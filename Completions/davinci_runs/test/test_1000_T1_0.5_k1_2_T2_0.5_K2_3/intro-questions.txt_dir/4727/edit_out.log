2022-04-12 23:58:50.823758 num operations 2
2022-04-12 23:58:50.823769 size on input set 1
2022-04-12 23:58:57.202498 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    # Read input\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = int(input())\n\n    # Move and merge\n    if direction == 0:\n        # Left\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[i][j] == 0:\n                    del grid[i][j]\n                    grid[i].append(0)\n            for j in range(3):\n                if grid[i][j] == grid[i][j+1]:\n                    grid[i][j] *= 2\n                    del grid[i][j+1]\n                    grid[i].append(0)\n    elif direction == 1:\n        # Up\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[j][i] == 0:\n                    del grid[j][i]\n                    grid[j].append(0)\n            for j in range(3):\n                if grid[j][i] == grid[j+1][i]:\n                    grid[j][i] *= 2\n                    del grid[j+1][i]\n                    grid[j+1].append(0)\n    elif direction == 2:\n        # Right\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[i][3-j] == 0:\n                    del grid[i][3-j]\n                    grid[i].insert(0, 0)\n            for j in range(3):\n                if grid[i][3-j] == grid[i][2-j]:\n                    grid[i][3-j] *= 2\n                    del grid[i][2-j]\n                    grid[i].insert(0, 0)\n    elif direction == 3:\n        # Down\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[3-j][i] == 0:\n                    del grid[3-j][i]\n                    grid[3-j].append(0)\n            for j in range(3):\n                if grid[3-j][i] == grid[2-j][i]:\n                    grid[3-j][i] *= 2\n                    del grid[2-j][i]\n                    grid[2-j].append(0)\n    else:\n        print(\"Error: Direction not recognized.\")\n\n    # Output\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    # Read input\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = int(input())\n\n    # Move\n    if direction == 0:\n        # Left\n        for i in range(4):\n            # Remove zeros \n            for j in range(4):\n                if grid[i][j] == 0:\n                    del grid[i][j]\n                    grid[i].append(0)\n            # Merge\n            for j in range(3):\n                if grid[i][j] == grid[i][j+1]:\n                    grid[i][j] *= 2\n                    del grid[i][j+1]\n                    grid[i].append(0)\n    elif direction == 1:\n        # Up\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[j][i] == 0:\n                    del grid[j][i]\n                    grid[j].append(0)\n            # Merge\n            for j in range(3):\n                if grid[j][i] == grid[j+1][i]:\n                    grid[j][i] *= 2\n                    del grid[j+1][i]\n                    grid[j+1].append(0)\n    elif direction == 2:\n        # Right\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[i][3-j] == 0:\n                    del grid[i][3-j]\n                    grid[i].insert(0, 0)\n            # Merge\n            for j in range(3):\n                if grid[i][3-j] == grid[i][2-j]:\n                    grid[i][3-j] *= 2\n                    del grid[i][2-j]\n                    grid[i].insert(0, 0)\n    elif direction == 3:\n        # Down\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[3-j][i] == 0:\n                    del grid[3-j][i]\n                    grid[3-j].append(0)\n            # Merge\n            for j in range(3):\n                if grid[3-j][i] == grid[2-j][i]:\n                    grid[3-j][i] *= 2\n                    del grid[2-j][i]\n                    grid[2-j].append(0)\n    else:\n        print(\"Error: Direction not recognized.\")\n\n    # Output\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    # read input\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = int(input())\n\n    # move\n    if direction == 0:\n        # left\n        for i in range(4):\n            # remove zeros\n            for j in range(4):\n                if grid[i][j] == 0:\n                    del grid[i][j]\n                    grid[i].append(0)\n            # merge\n            for j in range(3):\n                if grid[i][j] == grid[i][j+1]:\n                    grid[i][j] *= 2\n                    del grid[i][j+1]\n                    grid[i].append(0)\n    elif direction == 1:\n        # up\n        for i in range(4):\n            # remove zeros\n            for j in range(4):\n                if grid[j][i] == 0:\n                    del grid[j][i]\n                    grid[j].append(0)\n            # merge\n            for j in range(3):\n                if grid[j][i] == grid[j+1][i]:\n                    grid[j][i] *= 2\n                    del grid[j+1][i]\n                    grid[j+1].append(0)\n    elif direction == 2:\n        # right\n        for i in range(4):\n            # remove zeros\n            for j in range(4):\n                if grid[i][3-j] == 0:\n                    del grid[i][3-j]\n                    grid[i].insert(0, 0)\n            # merge\n            for j in range(3):\n                if grid[i][3-j] == grid[i][2-j]:\n                    grid[i][3-j] *= 2\n                    del grid[i][2-j]\n                    grid[i].insert(0, 0)\n    elif direction == 3:\n        # down\n        for i in range(4):\n            # remove zeros\n            for j in range(4):\n                if grid[3-j][i] == 0:\n                    del grid[3-j][i]\n                    grid[3-j].append(0)\n            # merge\n            for j in range(3):\n                if grid[3-j][i] == grid[2-j][i]:\n                    grid[3-j][i] *= 2\n                    del grid[2-j][i]\n                    grid[2-j].append(0)\n    else:\n        print(\"Error: Direction not recognized.\")\n\n    # output\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649807930,
  "object": "edit"
}
2022-04-12 23:58:57.202740 fix spelling mistakes 3 ['\n\ndef main():\n    # Read input\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = int(input())\n\n    # Move and merge\n    if direction == 0:\n        # Left\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[i][j] == 0:\n                    del grid[i][j]\n                    grid[i].append(0)\n            for j in range(3):\n                if grid[i][j] == grid[i][j+1]:\n                    grid[i][j] *= 2\n                    del grid[i][j+1]\n                    grid[i].append(0)\n    elif direction == 1:\n        # Up\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[j][i] == 0:\n                    del grid[j][i]\n                    grid[j].append(0)\n            for j in range(3):\n                if grid[j][i] == grid[j+1][i]:\n                    grid[j][i] *= 2\n                    del grid[j+1][i]\n                    grid[j+1].append(0)\n    elif direction == 2:\n        # Right\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[i][3-j] == 0:\n                    del grid[i][3-j]\n                    grid[i].insert(0, 0)\n            for j in range(3):\n                if grid[i][3-j] == grid[i][2-j]:\n                    grid[i][3-j] *= 2\n                    del grid[i][2-j]\n                    grid[i].insert(0, 0)\n    elif direction == 3:\n        # Down\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[3-j][i] == 0:\n                    del grid[3-j][i]\n                    grid[3-j].append(0)\n            for j in range(3):\n                if grid[3-j][i] == grid[2-j][i]:\n                    grid[3-j][i] *= 2\n                    del grid[2-j][i]\n                    grid[2-j].append(0)\n    else:\n        print("Error: Direction not recognized.")\n\n    # Output\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=\' \')\n        print()\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    # Read input\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = int(input())\n\n    # Move\n    if direction == 0:\n        # Left\n        for i in range(4):\n            # Remove zeros \n            for j in range(4):\n                if grid[i][j] == 0:\n                    del grid[i][j]\n                    grid[i].append(0)\n            # Merge\n            for j in range(3):\n                if grid[i][j] == grid[i][j+1]:\n                    grid[i][j] *= 2\n                    del grid[i][j+1]\n                    grid[i].append(0)\n    elif direction == 1:\n        # Up\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[j][i] == 0:\n                    del grid[j][i]\n                    grid[j].append(0)\n            # Merge\n            for j in range(3):\n                if grid[j][i] == grid[j+1][i]:\n                    grid[j][i] *= 2\n                    del grid[j+1][i]\n                    grid[j+1].append(0)\n    elif direction == 2:\n        # Right\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[i][3-j] == 0:\n                    del grid[i][3-j]\n                    grid[i].insert(0, 0)\n            # Merge\n            for j in range(3):\n                if grid[i][3-j] == grid[i][2-j]:\n                    grid[i][3-j] *= 2\n                    del grid[i][2-j]\n                    grid[i].insert(0, 0)\n    elif direction == 3:\n        # Down\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[3-j][i] == 0:\n                    del grid[3-j][i]\n                    grid[3-j].append(0)\n            # Merge\n            for j in range(3):\n                if grid[3-j][i] == grid[2-j][i]:\n                    grid[3-j][i] *= 2\n                    del grid[2-j][i]\n                    grid[2-j].append(0)\n    else:\n        print("Error: Direction not recognized.")\n\n    # Output\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=\' \')\n        print()\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    # read input\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = int(input())\n\n    # move\n    if direction == 0:\n        # left\n        for i in range(4):\n            # remove zeros\n            for j in range(4):\n                if grid[i][j] == 0:\n                    del grid[i][j]\n                    grid[i].append(0)\n            # merge\n            for j in range(3):\n                if grid[i][j] == grid[i][j+1]:\n                    grid[i][j] *= 2\n                    del grid[i][j+1]\n                    grid[i].append(0)\n    elif direction == 1:\n        # up\n        for i in range(4):\n            # remove zeros\n            for j in range(4):\n                if grid[j][i] == 0:\n                    del grid[j][i]\n                    grid[j].append(0)\n            # merge\n            for j in range(3):\n                if grid[j][i] == grid[j+1][i]:\n                    grid[j][i] *= 2\n                    del grid[j+1][i]\n                    grid[j+1].append(0)\n    elif direction == 2:\n        # right\n        for i in range(4):\n            # remove zeros\n            for j in range(4):\n                if grid[i][3-j] == 0:\n                    del grid[i][3-j]\n                    grid[i].insert(0, 0)\n            # merge\n            for j in range(3):\n                if grid[i][3-j] == grid[i][2-j]:\n                    grid[i][3-j] *= 2\n                    del grid[i][2-j]\n                    grid[i].insert(0, 0)\n    elif direction == 3:\n        # down\n        for i in range(4):\n            # remove zeros\n            for j in range(4):\n                if grid[3-j][i] == 0:\n                    del grid[3-j][i]\n                    grid[3-j].append(0)\n            # merge\n            for j in range(3):\n                if grid[3-j][i] == grid[2-j][i]:\n                    grid[3-j][i] *= 2\n                    del grid[2-j][i]\n                    grid[2-j].append(0)\n    else:\n        print("Error: Direction not recognized.")\n\n    # output\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=\' \')\n        print()\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 23:58:57.202913 size on output set 3
2022-04-12 23:58:57.202922 size on input set 3
2022-04-12 23:59:10.716048 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    # read input\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = int(input())\n\n    # move\n    if direction == 0:\n        # left\n        for i in range(4):\n            # remove zeros\n            for j in range(3):\n                if grid[i][j] == 0:\n                    del grid[i][j] # remove from list\n                    grid[i].append(0) # add zero to end of list\n            # merge\n            for j in range(3):\n                if grid[i][j] == grid[i][j+1]:\n                    grid[i][j] *= 2\n                    del grid[i][j+1] # remove from list\n                    grid[i].append(0) # add zero to end of list\n    elif direction == 1:\n        # up\n        for i in range(4):\n            # remove zeros\n            for j in range(3):\n                if grid[j][i] == 0:\n                    del grid[j][i] # remove from list\n                    grid[j].append(0) # add zero to end of list\n            # merge\n            for j in range(3):\n                if grid[j][i] == grid[j+1][i]:\n                    grid[j][i] *= 2\n                    del grid[j+1][i] # remove from list\n                    grid[j+1].append(0) # add zero to end of list\n    elif direction == 2:\n        # right\n        for i in range(4):\n            # remove zeros\n            for j in range(3):\n                if grid[i][3-j] == 0:\n                    del grid[i][3-j] # remove from list\n                    grid[i].insert(0, 0) # add zero to beginning of list\n            # merge\n            for j in range(3):\n                if grid[i][3-j] == grid[i][2-j]:\n                    grid[i][3-j] *= 2\n                    del grid[i][2-j] # remove from list\n                    grid[i].insert(0, 0) # add zero to beginning of list\n    elif direction == 3:\n        # down\n        for i in range(4):\n            # remove zeros\n            for j in range(3):\n                if grid[3-j][i] == 0:\n                    del grid[3-j][i] # remove from list\n                    grid[3-j].append(0) # add zero to end of list\n            # merge\n            for j in range(3):\n                if grid[3-j][i] == grid[2-j][i]:\n                    grid[3-j][i] *= 2\n                    del grid[2-j][i] # remove from list\n                    grid[2-j].append(0) # add zero to end of list\n    else:\n        print(\"Error: Direction not recognized.\")\n\n    # output\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    # read input\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = int(input())\n\n    # move\n    if direction == 0:\n        # left\n        for i in range(4):\n            # remove zeros\n            for j in range(4):\n                if grid[i][j] == 0:\n                    grid[i].remove(0)\n                    grid[i].append(0) \n            # merge\n            for j in range(3):\n                if grid[i][j] == grid[i][j+1]:\n                    grid[i][j] *= 2\n                    grid[i].remove(grid[i][j+1])\n                    grid[i].append(0) \n    elif direction == 1:\n        # up\n        for i in range(4):\n            # remove zeros\n            for j in range(4):\n                if grid[j][i] == 0:\n                    grid[j].remove(0)\n                    grid[j].append(0) \n            # merge\n            for j in range(3):\n                if grid[j][i] == grid[j+1][i]:\n                    grid[j][i] *= 2\n                    grid[j+1].remove(grid[j+1][i])\n                    grid[j+1].append(0) \n    elif direction == 2:\n        # right\n        for i in range(4):\n            # remove zeros\n            for j in range(4):\n                if grid[i][3-j] == 0:\n                    grid[i].remove(0)\n                    grid[i].insert(0, 0)\n            # merge\n            for j in range(3):\n                if grid[i][3-j] == grid[i][2-j]:\n                    grid[i][3-j] *= 2\n                    grid[i].remove(grid[i][2-j])\n                    grid[i].insert(0, 0)\n    elif direction == 3:\n        # down\n        for i in range(4):\n            # remove zeros\n            for j in range(4):\n                if grid[3-j][i] == 0:\n                    grid[3-j].remove(0)\n                    grid[3-j].append(0) \n            # merge\n            for j in range(3):\n                if grid[3-j][i] == grid[2-j][i]:\n                    grid[3-j][i] *= 2\n                    grid[2-j].remove(grid[2-j][i])\n                    grid[2-j].append(0) \n    else:\n        print(\"Error: Direction not recognized.\")\n\n    # output\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    # read input\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = int(input())\n\n    # move\n    if direction == 0:\n        # left\n        for i in range(4):\n            # remove zeros\n            for j in range(4):\n                if grid[i][j] == 0:\n                    grid[i].pop(j)\n                    grid[i].append(0)\n            # merge\n            for j in range(3):\n                if grid[i][j] == grid[i][j+1]:\n                    grid[i][j] *= 2\n                    grid[i].pop(j+1)\n                    grid[i].append(0)\n    elif direction == 1:\n        # up\n        for i in range(4):\n            # remove zeros\n            for j in range(4):\n                if grid[j][i] == 0:\n                    grid[j].pop(i)\n                    grid[j].append(0)\n            # merge\n            for j in range(3):\n                if grid[j][i] == grid[j+1][i]:\n                    grid[j][i] *= 2\n                    grid[j+1].pop(i)\n                    grid[j+1].append(0)\n    elif direction == 2:\n        # right\n        for i in range(4):\n            # remove zeros\n            for j in range(4):\n                if grid[i][3-j] == 0:\n                    grid[i].pop(3-j)\n                    grid[i].insert(0, 0)\n            # merge\n            for j in range(3):\n                if grid[i][3-j] == grid[i][2-j]:\n                    grid[i][3-j] *= 2\n                    grid[i].pop(2-j)\n                    grid[i].insert(0, 0)\n    elif direction == 3:\n        # down\n        for i in range(4):\n            # remove zeros\n            for j in range(4):\n                if grid[3-j][i] == 0:\n                    grid[3-j].pop(i)\n                    grid[3-j].append(0)\n            # merge\n            for j in range(3):\n                if grid[3-j][i] == grid[2-j][i]:\n                    grid[3-j][i] *= 2\n                    grid[2-j].pop(i)\n                    grid[2-j].append(0)\n    else:\n        print(\"Error: Direction not recognized.\")\n\n    # output\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649807937,
  "object": "edit"
}
2022-04-12 23:59:10.716276 fix syntax errors 3 ['\n\ndef main():\n    # read input\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = int(input())\n\n    # move\n    if direction == 0:\n        # left\n        for i in range(4):\n            # remove zeros\n            for j in range(3):\n                if grid[i][j] == 0:\n                    del grid[i][j] # remove from list\n                    grid[i].append(0) # add zero to end of list\n            # merge\n            for j in range(3):\n                if grid[i][j] == grid[i][j+1]:\n                    grid[i][j] *= 2\n                    del grid[i][j+1] # remove from list\n                    grid[i].append(0) # add zero to end of list\n    elif direction == 1:\n        # up\n        for i in range(4):\n            # remove zeros\n            for j in range(3):\n                if grid[j][i] == 0:\n                    del grid[j][i] # remove from list\n                    grid[j].append(0) # add zero to end of list\n            # merge\n            for j in range(3):\n                if grid[j][i] == grid[j+1][i]:\n                    grid[j][i] *= 2\n                    del grid[j+1][i] # remove from list\n                    grid[j+1].append(0) # add zero to end of list\n    elif direction == 2:\n        # right\n        for i in range(4):\n            # remove zeros\n            for j in range(3):\n                if grid[i][3-j] == 0:\n                    del grid[i][3-j] # remove from list\n                    grid[i].insert(0, 0) # add zero to beginning of list\n            # merge\n            for j in range(3):\n                if grid[i][3-j] == grid[i][2-j]:\n                    grid[i][3-j] *= 2\n                    del grid[i][2-j] # remove from list\n                    grid[i].insert(0, 0) # add zero to beginning of list\n    elif direction == 3:\n        # down\n        for i in range(4):\n            # remove zeros\n            for j in range(3):\n                if grid[3-j][i] == 0:\n                    del grid[3-j][i] # remove from list\n                    grid[3-j].append(0) # add zero to end of list\n            # merge\n            for j in range(3):\n                if grid[3-j][i] == grid[2-j][i]:\n                    grid[3-j][i] *= 2\n                    del grid[2-j][i] # remove from list\n                    grid[2-j].append(0) # add zero to end of list\n    else:\n        print("Error: Direction not recognized.")\n\n    # output\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=\' \')\n        print()\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    # read input\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = int(input())\n\n    # move\n    if direction == 0:\n        # left\n        for i in range(4):\n            # remove zeros\n            for j in range(4):\n                if grid[i][j] == 0:\n                    grid[i].remove(0)\n                    grid[i].append(0) \n            # merge\n            for j in range(3):\n                if grid[i][j] == grid[i][j+1]:\n                    grid[i][j] *= 2\n                    grid[i].remove(grid[i][j+1])\n                    grid[i].append(0) \n    elif direction == 1:\n        # up\n        for i in range(4):\n            # remove zeros\n            for j in range(4):\n                if grid[j][i] == 0:\n                    grid[j].remove(0)\n                    grid[j].append(0) \n            # merge\n            for j in range(3):\n                if grid[j][i] == grid[j+1][i]:\n                    grid[j][i] *= 2\n                    grid[j+1].remove(grid[j+1][i])\n                    grid[j+1].append(0) \n    elif direction == 2:\n        # right\n        for i in range(4):\n            # remove zeros\n            for j in range(4):\n                if grid[i][3-j] == 0:\n                    grid[i].remove(0)\n                    grid[i].insert(0, 0)\n            # merge\n            for j in range(3):\n                if grid[i][3-j] == grid[i][2-j]:\n                    grid[i][3-j] *= 2\n                    grid[i].remove(grid[i][2-j])\n                    grid[i].insert(0, 0)\n    elif direction == 3:\n        # down\n        for i in range(4):\n            # remove zeros\n            for j in range(4):\n                if grid[3-j][i] == 0:\n                    grid[3-j].remove(0)\n                    grid[3-j].append(0) \n            # merge\n            for j in range(3):\n                if grid[3-j][i] == grid[2-j][i]:\n                    grid[3-j][i] *= 2\n                    grid[2-j].remove(grid[2-j][i])\n                    grid[2-j].append(0) \n    else:\n        print("Error: Direction not recognized.")\n\n    # output\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=\' \')\n        print()\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    # read input\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = int(input())\n\n    # move\n    if direction == 0:\n        # left\n        for i in range(4):\n            # remove zeros\n            for j in range(4):\n                if grid[i][j] == 0:\n                    grid[i].pop(j)\n                    grid[i].append(0)\n            # merge\n            for j in range(3):\n                if grid[i][j] == grid[i][j+1]:\n                    grid[i][j] *= 2\n                    grid[i].pop(j+1)\n                    grid[i].append(0)\n    elif direction == 1:\n        # up\n        for i in range(4):\n            # remove zeros\n            for j in range(4):\n                if grid[j][i] == 0:\n                    grid[j].pop(i)\n                    grid[j].append(0)\n            # merge\n            for j in range(3):\n                if grid[j][i] == grid[j+1][i]:\n                    grid[j][i] *= 2\n                    grid[j+1].pop(i)\n                    grid[j+1].append(0)\n    elif direction == 2:\n        # right\n        for i in range(4):\n            # remove zeros\n            for j in range(4):\n                if grid[i][3-j] == 0:\n                    grid[i].pop(3-j)\n                    grid[i].insert(0, 0)\n            # merge\n            for j in range(3):\n                if grid[i][3-j] == grid[i][2-j]:\n                    grid[i][3-j] *= 2\n                    grid[i].pop(2-j)\n                    grid[i].insert(0, 0)\n    elif direction == 3:\n        # down\n        for i in range(4):\n            # remove zeros\n            for j in range(4):\n                if grid[3-j][i] == 0:\n                    grid[3-j].pop(i)\n                    grid[3-j].append(0)\n            # merge\n            for j in range(3):\n                if grid[3-j][i] == grid[2-j][i]:\n                    grid[3-j][i] *= 2\n                    grid[2-j].pop(i)\n                    grid[2-j].append(0)\n    else:\n        print("Error: Direction not recognized.")\n\n    # output\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=\' \')\n        print()\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 23:59:17.601604 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    # Read input\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = int(input())\n\n    # Move and merge\n    if direction == 0:\n        # Left\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[i][j] == 0:\n                    del grid[i][j]\n                    grid[i].append(0)\n            for j in range(3):\n                if grid[i][j] == grid[i][j+1]:\n                    grid[i][j] *= 2\n                    del grid[i][j+1]\n                    grid[i].append(0)\n    elif direction == 1:\n        # Up\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[j][i] == 0:\n                    del grid[j][i]\n                    grid[j].insert(0, 0)\n            for j in range(3):\n                if grid[j][i] == grid[j+1][i]:\n                    grid[j][i] *= 2\n                    del grid[j+1][i]\n                    grid[j+1].append(0)\n    elif direction == 2:\n        # Right\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[i][3-j] == 0:\n                    del grid[i][3-j]\n                    grid[i].insert(0, 0)\n            for j in range(3):\n                if grid[i][3-j] == grid[i][2-j]:\n                    grid[i][3-j] *= 2\n                    del grid[i][2-j]\n                    grid[i].insert(0, 0)\n    elif direction == 3:\n        # Down\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[3-j][i] == 0:\n                    del grid[3-j][i]\n                    grid[3-j].insert(0, 0)\n            for j in range(3):\n                if grid[3-j][i] == grid[2-j][i]:\n                    grid[3-j][i] *= 2\n                    del grid[2-j][i]\n                    grid[2-j].append(0)\n    else:\n        print(\"Error: Direction not recognized.\")\n\n    # Output\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    # Read input\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = int(input())\n\n    # Move and merge\n    if direction == 0:\n        # Left\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[i][j] == 0:\n                    del grid[i][j]\n                    grid[i].append(0)\n            for j in range(3):\n                if grid[i][j] == grid[i][j+1]:\n                    grid[i][j] *= 2\n                    del grid[i][j+1]\n                    grid[i].append(0)\n    elif direction == 1:\n        # Up\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[j][i] == 0:\n                    del grid[j][i]\n                    grid[j].insert(0, 0)\n            for j in range(3):\n                if grid[j][i] == grid[j+1][i]:\n                    grid[j][i] *= 2\n                    del grid[j+1][i]\n                    grid[j+1].append(0)\n    elif direction == 2:\n        # Right\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[i][3-j] == 0:\n                    del grid[i][3-j]\n                    grid[i].insert(0, 0)\n            for j in range(3):\n                if grid[i][3-j] == grid[i][2-j]:\n                    grid[i][3-j] *= 2\n                    del grid[i][2-j]\n                    grid[i].insert(0, 0)\n    elif direction == 3:\n        # Down\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[3-j][i] == 0:\n                    del grid[3-j][i]\n                    grid[3-j].append(0)\n            for j in range(3):\n                if grid[3-j][i] == grid[2-j][i]:\n                    grid[3-j][i] *= 2\n                    del grid[2-j][i]\n                    grid[2-j].append(0)\n    else:\n        print(\"Error: Direction not recognized.\")\n\n    # Output\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    # Read input\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = int(input())\n\n    # Move and merge\n    if direction == 0:\n        # Left\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[i][j] == 0:\n                    del grid[i][j] # TODO: This is not working\n                    grid[i].append(0)\n            for j in range(3):\n                if grid[i][j] == grid[i][j+1]:\n                    grid[i][j] *= 2\n                    del grid[i][j+1] # TODO: This is not working\n                    grid[i].append(0)\n    elif direction == 1:\n        # Up\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[j][i] == 0:\n                    del grid[j][i] # TODO: This is not working\n                    grid[j].append(0)\n            for j in range(3):\n                if grid[j][i] == grid[j+1][i]:\n                    grid[j][i] *= 2\n                    del grid[j+1][i] # TODO: This is not working\n                    grid[j+1].append(0)\n    elif direction == 2:\n        # Right\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[i][3-j] == 0:\n                    del grid[i][3-j] # TODO: This is not working\n                    grid[i].insert(0, 0)\n            for j in range(3):\n                if grid[i][3-j] == grid[i][2-j]:\n                    grid[i][3-j] *= 2\n                    del grid[i][2-j] # TODO: This is not working\n                    grid[i].insert(0, 0)\n    elif direction == 3:\n        # Down\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[3-j][i] == 0:\n                    del grid[3-j][i] # TODO: This is not working\n                    grid[3-j].append(0)\n            for j in range(3):\n                if grid[3-j][i] == grid[2-j][i]:\n                    grid[3-j][i] *= 2\n                    del grid[2-j][i] # TODO: This is not working\n                    grid[2-j].append(0)\n    else:\n        print(\"Error: Direction not recognized.\")\n\n    # Output\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649807950,
  "object": "edit"
}
2022-04-12 23:59:17.601804 fix syntax errors 3 ['\n\ndef main():\n    # Read input\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = int(input())\n\n    # Move and merge\n    if direction == 0:\n        # Left\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[i][j] == 0:\n                    del grid[i][j]\n                    grid[i].append(0)\n            for j in range(3):\n                if grid[i][j] == grid[i][j+1]:\n                    grid[i][j] *= 2\n                    del grid[i][j+1]\n                    grid[i].append(0)\n    elif direction == 1:\n        # Up\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[j][i] == 0:\n                    del grid[j][i]\n                    grid[j].insert(0, 0)\n            for j in range(3):\n                if grid[j][i] == grid[j+1][i]:\n                    grid[j][i] *= 2\n                    del grid[j+1][i]\n                    grid[j+1].append(0)\n    elif direction == 2:\n        # Right\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[i][3-j] == 0:\n                    del grid[i][3-j]\n                    grid[i].insert(0, 0)\n            for j in range(3):\n                if grid[i][3-j] == grid[i][2-j]:\n                    grid[i][3-j] *= 2\n                    del grid[i][2-j]\n                    grid[i].insert(0, 0)\n    elif direction == 3:\n        # Down\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[3-j][i] == 0:\n                    del grid[3-j][i]\n                    grid[3-j].insert(0, 0)\n            for j in range(3):\n                if grid[3-j][i] == grid[2-j][i]:\n                    grid[3-j][i] *= 2\n                    del grid[2-j][i]\n                    grid[2-j].append(0)\n    else:\n        print("Error: Direction not recognized.")\n\n    # Output\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=\' \')\n        print()\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    # Read input\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = int(input())\n\n    # Move and merge\n    if direction == 0:\n        # Left\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[i][j] == 0:\n                    del grid[i][j]\n                    grid[i].append(0)\n            for j in range(3):\n                if grid[i][j] == grid[i][j+1]:\n                    grid[i][j] *= 2\n                    del grid[i][j+1]\n                    grid[i].append(0)\n    elif direction == 1:\n        # Up\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[j][i] == 0:\n                    del grid[j][i]\n                    grid[j].insert(0, 0)\n            for j in range(3):\n                if grid[j][i] == grid[j+1][i]:\n                    grid[j][i] *= 2\n                    del grid[j+1][i]\n                    grid[j+1].append(0)\n    elif direction == 2:\n        # Right\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[i][3-j] == 0:\n                    del grid[i][3-j]\n                    grid[i].insert(0, 0)\n            for j in range(3):\n                if grid[i][3-j] == grid[i][2-j]:\n                    grid[i][3-j] *= 2\n                    del grid[i][2-j]\n                    grid[i].insert(0, 0)\n    elif direction == 3:\n        # Down\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[3-j][i] == 0:\n                    del grid[3-j][i]\n                    grid[3-j].append(0)\n            for j in range(3):\n                if grid[3-j][i] == grid[2-j][i]:\n                    grid[3-j][i] *= 2\n                    del grid[2-j][i]\n                    grid[2-j].append(0)\n    else:\n        print("Error: Direction not recognized.")\n\n    # Output\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=\' \')\n        print()\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    # Read input\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = int(input())\n\n    # Move and merge\n    if direction == 0:\n        # Left\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[i][j] == 0:\n                    del grid[i][j] # TODO: This is not working\n                    grid[i].append(0)\n            for j in range(3):\n                if grid[i][j] == grid[i][j+1]:\n                    grid[i][j] *= 2\n                    del grid[i][j+1] # TODO: This is not working\n                    grid[i].append(0)\n    elif direction == 1:\n        # Up\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[j][i] == 0:\n                    del grid[j][i] # TODO: This is not working\n                    grid[j].append(0)\n            for j in range(3):\n                if grid[j][i] == grid[j+1][i]:\n                    grid[j][i] *= 2\n                    del grid[j+1][i] # TODO: This is not working\n                    grid[j+1].append(0)\n    elif direction == 2:\n        # Right\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[i][3-j] == 0:\n                    del grid[i][3-j] # TODO: This is not working\n                    grid[i].insert(0, 0)\n            for j in range(3):\n                if grid[i][3-j] == grid[i][2-j]:\n                    grid[i][3-j] *= 2\n                    del grid[i][2-j] # TODO: This is not working\n                    grid[i].insert(0, 0)\n    elif direction == 3:\n        # Down\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[3-j][i] == 0:\n                    del grid[3-j][i] # TODO: This is not working\n                    grid[3-j].append(0)\n            for j in range(3):\n                if grid[3-j][i] == grid[2-j][i]:\n                    grid[3-j][i] *= 2\n                    del grid[2-j][i] # TODO: This is not working\n                    grid[2-j].append(0)\n    else:\n        print("Error: Direction not recognized.")\n\n    # Output\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=\' \')\n        print()\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 23:59:23.910833 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    # Read input\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = int(input())\n\n    # Move\n    if direction == 0:\n        # Left\n        for i in range(4):\n            # Remove zeros \n            for j in range(4):\n                if grid[i][j] == 0:\n                    del grid[i][j]\n                    grid[i].append(0)\n            # Merge\n            for j in range(3):\n                if grid[i][j] == grid[i][j+1]:\n                    grid[i][j] *= 2\n                    del grid[i][j+1]\n                    grid[i].append(0)\n    elif direction == 1:\n        # Up\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[j][i] == 0:\n                    del grid[j][i]\n                    grid[j].insert(0, 0)\n            # Merge\n            for j in range(3):\n                if grid[j][i] == grid[j+1][i]:\n                    grid[j][i] *= 2\n                    del grid[j+1][i]\n                    grid[j+1].insert(0, 0)\n    elif direction == 2:\n        # Right\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[i][3-j] == 0:\n                    del grid[i][3-j]\n                    grid[i].insert(0, 0)\n            # Merge\n            for j in range(3):\n                if grid[i][3-j] == grid[i][2-j]:\n                    grid[i][3-j] *= 2\n                    del grid[i][2-j]\n                    grid[i].insert(0, 0)\n    elif direction == 3:\n        # Down\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[3-j][i] == 0:\n                    del grid[3-j][i]\n                    grid[3-j].insert(0, 0)\n            # Merge\n            for j in range(3):\n                if grid[3-j][i] == grid[2-j][i]:\n                    grid[3-j][i] *= 2\n                    del grid[2-j][i]\n                    grid[2-j].insert(0, 0)\n    else:\n        print(\"Error: Direction not recognized.\")\n\n    # Output\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    # Read input\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = int(input())\n\n    # Move\n    if direction == 0:\n        # Left\n        for i in range(4):\n            # Remove zeros \n            for j in range(4):\n                if grid[i][j] == 0:\n                    grid[i].remove(0)\n                    grid[i].append(0)\n            # Merge\n            for j in range(3):\n                if grid[i][j] == grid[i][j+1]:\n                    grid[i][j] *= 2\n                    grid[i].remove(0)\n                    grid[i].append(0)\n    elif direction == 1:\n        # Up\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[j][i] == 0:\n                    grid[j].remove(0)\n                    grid[j].append(0)\n            # Merge\n            for j in range(3):\n                if grid[j][i] == grid[j+1][i]:\n                    grid[j][i] *= 2\n                    grid[j+1].remove(0)\n                    grid[j+1].append(0)\n    elif direction == 2:\n        # Right\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[i][3-j] == 0:\n                    grid[i].remove(0)\n                    grid[i].insert(0, 0)\n            # Merge\n            for j in range(3):\n                if grid[i][3-j] == grid[i][2-j]:\n                    grid[i][3-j] *= 2\n                    grid[i].remove(0)\n                    grid[i].insert(0, 0)\n    elif direction == 3:\n        # Down\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[3-j][i] == 0:\n                    grid[3-j].remove(0)\n                    grid[3-j].append(0)\n            # Merge\n            for j in range(3):\n                if grid[3-j][i] == grid[2-j][i]:\n                    grid[3-j][i] *= 2\n                    grid[2-j].remove(0)\n                    grid[2-j].append(0)\n    else:\n        print(\"Error: Direction not recognized.\")\n\n    # Output\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    # Read input\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = int(input())\n\n    # Move\n    if direction == 0:\n        # Left\n        for i in range(4):\n            # Remove zeros \n            for j in range(4):\n                if grid[i][j] == 0:\n                    del grid[i][j]\n                    grid[i].append(0)\n            # Merge\n            for j in range(3):\n                if grid[i][j] == grid[i][j+1]:\n                    grid[i][j] *= 2\n                    del grid[i][j+1]\n                    grid[i].append(0)\n    elif direction == 1:\n        # Up\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[j][i] == 0:\n                    del grid[j][i]\n                    grid[j].insert(0, 0)\n            # Merge\n            for j in range(3):\n                if grid[j][i] == grid[j+1][i]:\n                    grid[j][i] *= 2\n                    del grid[j+1][i]\n                    grid[j+1].insert(0, 0)\n    elif direction == 2:\n        # Right\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[i][3-j] == 0:\n                    del grid[i][3-j]\n                    grid[i].insert(0, 0)\n            # Merge\n            for j in range(3):\n                if grid[i][3-j] == grid[i][2-j]:\n                    grid[i][3-j] *= 2\n                    del grid[i][2-j]\n                    grid[i].insert(0, 0)\n    elif direction == 3:\n        # Down\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[3-j][i] == 0:\n                    del grid[3-j][i]\n                    grid[3-j].insert(0, 0)\n            # Merge\n            for j in range(3):\n                if grid[3-j][i] == grid[2-j][i]:\n                    grid[3-j][i] *= 2\n                    del grid[2-j][i]\n                    grid[2-j].insert(0, 0)\n    else:\n        print(\"Error: Direction not recognized.\")\n\n    # Output\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649807957,
  "object": "edit"
}
2022-04-12 23:59:23.911019 fix syntax errors 3 ['\n\ndef main():\n    # Read input\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = int(input())\n\n    # Move\n    if direction == 0:\n        # Left\n        for i in range(4):\n            # Remove zeros \n            for j in range(4):\n                if grid[i][j] == 0:\n                    del grid[i][j]\n                    grid[i].append(0)\n            # Merge\n            for j in range(3):\n                if grid[i][j] == grid[i][j+1]:\n                    grid[i][j] *= 2\n                    del grid[i][j+1]\n                    grid[i].append(0)\n    elif direction == 1:\n        # Up\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[j][i] == 0:\n                    del grid[j][i]\n                    grid[j].insert(0, 0)\n            # Merge\n            for j in range(3):\n                if grid[j][i] == grid[j+1][i]:\n                    grid[j][i] *= 2\n                    del grid[j+1][i]\n                    grid[j+1].insert(0, 0)\n    elif direction == 2:\n        # Right\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[i][3-j] == 0:\n                    del grid[i][3-j]\n                    grid[i].insert(0, 0)\n            # Merge\n            for j in range(3):\n                if grid[i][3-j] == grid[i][2-j]:\n                    grid[i][3-j] *= 2\n                    del grid[i][2-j]\n                    grid[i].insert(0, 0)\n    elif direction == 3:\n        # Down\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[3-j][i] == 0:\n                    del grid[3-j][i]\n                    grid[3-j].insert(0, 0)\n            # Merge\n            for j in range(3):\n                if grid[3-j][i] == grid[2-j][i]:\n                    grid[3-j][i] *= 2\n                    del grid[2-j][i]\n                    grid[2-j].insert(0, 0)\n    else:\n        print("Error: Direction not recognized.")\n\n    # Output\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=\' \')\n        print()\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    # Read input\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = int(input())\n\n    # Move\n    if direction == 0:\n        # Left\n        for i in range(4):\n            # Remove zeros \n            for j in range(4):\n                if grid[i][j] == 0:\n                    grid[i].remove(0)\n                    grid[i].append(0)\n            # Merge\n            for j in range(3):\n                if grid[i][j] == grid[i][j+1]:\n                    grid[i][j] *= 2\n                    grid[i].remove(0)\n                    grid[i].append(0)\n    elif direction == 1:\n        # Up\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[j][i] == 0:\n                    grid[j].remove(0)\n                    grid[j].append(0)\n            # Merge\n            for j in range(3):\n                if grid[j][i] == grid[j+1][i]:\n                    grid[j][i] *= 2\n                    grid[j+1].remove(0)\n                    grid[j+1].append(0)\n    elif direction == 2:\n        # Right\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[i][3-j] == 0:\n                    grid[i].remove(0)\n                    grid[i].insert(0, 0)\n            # Merge\n            for j in range(3):\n                if grid[i][3-j] == grid[i][2-j]:\n                    grid[i][3-j] *= 2\n                    grid[i].remove(0)\n                    grid[i].insert(0, 0)\n    elif direction == 3:\n        # Down\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[3-j][i] == 0:\n                    grid[3-j].remove(0)\n                    grid[3-j].append(0)\n            # Merge\n            for j in range(3):\n                if grid[3-j][i] == grid[2-j][i]:\n                    grid[3-j][i] *= 2\n                    grid[2-j].remove(0)\n                    grid[2-j].append(0)\n    else:\n        print("Error: Direction not recognized.")\n\n    # Output\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=\' \')\n        print()\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    # Read input\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = int(input())\n\n    # Move\n    if direction == 0:\n        # Left\n        for i in range(4):\n            # Remove zeros \n            for j in range(4):\n                if grid[i][j] == 0:\n                    del grid[i][j]\n                    grid[i].append(0)\n            # Merge\n            for j in range(3):\n                if grid[i][j] == grid[i][j+1]:\n                    grid[i][j] *= 2\n                    del grid[i][j+1]\n                    grid[i].append(0)\n    elif direction == 1:\n        # Up\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[j][i] == 0:\n                    del grid[j][i]\n                    grid[j].insert(0, 0)\n            # Merge\n            for j in range(3):\n                if grid[j][i] == grid[j+1][i]:\n                    grid[j][i] *= 2\n                    del grid[j+1][i]\n                    grid[j+1].insert(0, 0)\n    elif direction == 2:\n        # Right\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[i][3-j] == 0:\n                    del grid[i][3-j]\n                    grid[i].insert(0, 0)\n            # Merge\n            for j in range(3):\n                if grid[i][3-j] == grid[i][2-j]:\n                    grid[i][3-j] *= 2\n                    del grid[i][2-j]\n                    grid[i].insert(0, 0)\n    elif direction == 3:\n        # Down\n        for i in range(4):\n            # Remove zeros\n            for j in range(4):\n                if grid[3-j][i] == 0:\n                    del grid[3-j][i]\n                    grid[3-j].insert(0, 0)\n            # Merge\n            for j in range(3):\n                if grid[3-j][i] == grid[2-j][i]:\n                    grid[3-j][i] *= 2\n                    del grid[2-j][i]\n                    grid[2-j].insert(0, 0)\n    else:\n        print("Error: Direction not recognized.")\n\n    # Output\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=\' \')\n        print()\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 23:59:23.911174 size on output set 8
2022-04-12 23:59:23.911186 num operations 2
2022-04-12 23:59:23.911192 size on input set 1
2022-04-12 23:59:28.183282 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef merge(line, direction):\n    for i in range(4):\n        for j in range(4):\n            if direction == \"left\":\n                if j > 0 and line[j] == line[j-1]:\n                    line[j-1] = 2*line[j-1]\n                    line[j] = 0\n            elif direction == \"right\":\n                if j < 3 and line[j] == line[j+1]:\n                    line[j+1] = 2*line[j+1]\n                    line[j] = 0\n    return line\n\ndef move(line, direction):\n    if direction == \"left\":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.append(0)\n    elif direction == \"right\":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.insert(0, 0)\n    return line\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = input()\n    for i in range(4):\n        if direction == \"up\":\n            grid[i] = merge(grid[i], \"left\")\n            grid[i] = move(grid[i], \"left\")\n        elif direction == \"down\":\n            grid[i] = merge(grid[i], \"left\")\n            grid[i] = move(grid[i], \"left\")\n        elif direction == \"left\":\n            grid[i] = merge(grid[i], \"right\")\n            grid[i] = move(grid[i], \"right\")\n        elif direction == \"right\":\n            grid[i] = merge(grid[i], \"left\")\n            grid[i] = move(grid[i], \"left\")\n    for i in range(4):\n        print(*grid[i])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef merge(line, direction): \n    for i in range(4):\n        for j in range(4):\n            if direction == \"left\":\n                if j > 0 and line[j] == line[j-1]:\n                    line[j-1] = 2*line[j-1]\n                    line[j] = 0\n            elif direction == \"right\":\n                if j < 3 and line[j] == line[j+1]:\n                    line[j+1] = 2*line[j+1]\n                    line[j] = 0\n    return line\n\ndef move(line, direction):\n    if direction == \"left\":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.append(0)\n    elif direction == \"right\":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.insert(0, 0)\n    return line\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = input()\n    for i in range(4):\n        if direction == \"0\":\n            grid[i] = merge(grid[i], \"left\")\n            grid[i] = move(grid[i], \"left\")\n        elif direction == \"1\":\n            grid[i] = merge(grid[i], \"left\")\n            grid[i] = move(grid[i], \"left\")\n        elif direction == \"2\":\n            grid[i] = merge(grid[i], \"right\")\n            grid[i] = move(grid[i], \"right\")\n        elif direction == \"3\":\n            grid[i] = merge(grid[i], \"left\")\n            grid[i] = move(grid[i], \"left\")\n    for i in range(4):\n        print(*grid[i])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef merge(line, direction):\n    for i in range(4):\n        for j in range(4):\n            if direction == \"left\":\n                if j > 0 and line[j] == line[j-1]:\n                    line[j-1] = 2*line[j-1]\n                    line[j] = 0\n            elif direction == \"right\":\n                if j < 3 and line[j] == line[j+1]:\n                    line[j+1] = 2*line[j+1]\n                    line[j] = 0\n    return line\n\ndef move(line, direction):\n    if direction == \"left\":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.append(0)\n    elif direction == \"right\":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.insert(0, 0)\n    return line\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = input()\n    for i in range(4):\n        if direction == \"0\":\n            grid[i] = merge(grid[i], \"left\")\n            grid[i] = move(grid[i], \"left\")\n        elif direction == \"1\":\n            grid[i] = merge(grid[i], \"right\")\n            grid[i] = move(grid[i], \"right\")\n        elif direction == \"2\":\n            grid[i] = merge(grid[i], \"right\")\n            grid[i] = move(grid[i], \"right\")\n        elif direction == \"3\":\n            grid[i] = merge(grid[i], \"right\")\n            grid[i] = move(grid[i], \"right\")\n    for i in range(4):\n        print(*grid[i])\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649807963,
  "object": "edit"
}
2022-04-12 23:59:28.183469 fix spelling mistakes 3 ['\n\ndef merge(line, direction):\n    for i in range(4):\n        for j in range(4):\n            if direction == "left":\n                if j > 0 and line[j] == line[j-1]:\n                    line[j-1] = 2*line[j-1]\n                    line[j] = 0\n            elif direction == "right":\n                if j < 3 and line[j] == line[j+1]:\n                    line[j+1] = 2*line[j+1]\n                    line[j] = 0\n    return line\n\ndef move(line, direction):\n    if direction == "left":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.append(0)\n    elif direction == "right":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.insert(0, 0)\n    return line\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = input()\n    for i in range(4):\n        if direction == "up":\n            grid[i] = merge(grid[i], "left")\n            grid[i] = move(grid[i], "left")\n        elif direction == "down":\n            grid[i] = merge(grid[i], "left")\n            grid[i] = move(grid[i], "left")\n        elif direction == "left":\n            grid[i] = merge(grid[i], "right")\n            grid[i] = move(grid[i], "right")\n        elif direction == "right":\n            grid[i] = merge(grid[i], "left")\n            grid[i] = move(grid[i], "left")\n    for i in range(4):\n        print(*grid[i])\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef merge(line, direction): \n    for i in range(4):\n        for j in range(4):\n            if direction == "left":\n                if j > 0 and line[j] == line[j-1]:\n                    line[j-1] = 2*line[j-1]\n                    line[j] = 0\n            elif direction == "right":\n                if j < 3 and line[j] == line[j+1]:\n                    line[j+1] = 2*line[j+1]\n                    line[j] = 0\n    return line\n\ndef move(line, direction):\n    if direction == "left":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.append(0)\n    elif direction == "right":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.insert(0, 0)\n    return line\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = input()\n    for i in range(4):\n        if direction == "0":\n            grid[i] = merge(grid[i], "left")\n            grid[i] = move(grid[i], "left")\n        elif direction == "1":\n            grid[i] = merge(grid[i], "left")\n            grid[i] = move(grid[i], "left")\n        elif direction == "2":\n            grid[i] = merge(grid[i], "right")\n            grid[i] = move(grid[i], "right")\n        elif direction == "3":\n            grid[i] = merge(grid[i], "left")\n            grid[i] = move(grid[i], "left")\n    for i in range(4):\n        print(*grid[i])\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef merge(line, direction):\n    for i in range(4):\n        for j in range(4):\n            if direction == "left":\n                if j > 0 and line[j] == line[j-1]:\n                    line[j-1] = 2*line[j-1]\n                    line[j] = 0\n            elif direction == "right":\n                if j < 3 and line[j] == line[j+1]:\n                    line[j+1] = 2*line[j+1]\n                    line[j] = 0\n    return line\n\ndef move(line, direction):\n    if direction == "left":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.append(0)\n    elif direction == "right":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.insert(0, 0)\n    return line\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = input()\n    for i in range(4):\n        if direction == "0":\n            grid[i] = merge(grid[i], "left")\n            grid[i] = move(grid[i], "left")\n        elif direction == "1":\n            grid[i] = merge(grid[i], "right")\n            grid[i] = move(grid[i], "right")\n        elif direction == "2":\n            grid[i] = merge(grid[i], "right")\n            grid[i] = move(grid[i], "right")\n        elif direction == "3":\n            grid[i] = merge(grid[i], "right")\n            grid[i] = move(grid[i], "right")\n    for i in range(4):\n        print(*grid[i])\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 23:59:28.183626 size on output set 3
2022-04-12 23:59:28.183634 size on input set 3
2022-04-12 23:59:37.222567 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef merge(line, direction):\n    for i in range(4):\n        for j in range(4):\n            if direction == \"left\":\n                if j > 0 and line[j] == line[j-1]:\n                    line[j-1] = 2*line[j-1]\n                    line[j] = 0\n            elif direction == \"right\":\n                if j < 3 and line[j] == line[j+1]:\n                    line[j+1] = 2*line[j+1]\n                    line[j] = 0\n    return line\n\ndef move(line, direction):\n    if direction == \"left\":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.append(0)\n    elif direction == \"right\":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.insert(0, 0)\n    return line\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()]) # list comprehension\n    direction = input() # up, down, left, right\n    for i in range(4):\n        if direction == \"up\":\n            grid[i] = merge(grid[i], \"left\")\n            grid[i] = move(grid[i], \"left\")\n        elif direction == \"down\":\n            grid[i] = merge(grid[i], \"right\")\n            grid[i] = move(grid[i], \"right\")\n        elif direction == \"left\":\n            grid[i] = merge(grid[i], \"left\")\n            grid[i] = move(grid[i], \"left\")\n        elif direction == \"right\":\n            grid[i] = merge(grid[i], \"right\")\n            grid[i] = move(grid[i], \"right\")\n    for i in range(4):\n        print(*grid[i])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n\ndef merge(line, direction):\n    for i in range(4):\n        for j in range(4):\n            if direction == \"left\":\n                if j > 0 and line[j] == line[j - 1]:\n                    line[j - 1] = 2 * line[j - 1]\n                    line[j] = 0\n            elif direction == \"right\":\n                if j < 3 and line[j] == line[j + 1]:\n                    line[j + 1] = 2 * line[j + 1]\n                    line[j] = 0\n\n    return line\n\ndef move(line, direction):\n    if direction == \"left\":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.append(0)\n    elif direction == \"right\":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.insert(0, 0)\n    return line\n\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = input()\n    for i in range(4):\n        if direction == \"up\":\n            grid[i] = merge(grid[i], \"left\")\n            grid[i] = move(grid[i], \"left\")\n        elif direction == \"down\":\n            grid[i] = merge(grid[i], \"left\")\n            grid[i] = move(grid[i], \"left\")\n        elif direction == \"left\":\n            grid[i] = merge(grid[i], \"right\")\n            grid[i] = move(grid[i], \"right\")\n        elif direction == \"right\":\n            grid[i] = merge(grid[i], \"left\")\n            grid[i] = move(grid[i], \"left\")\n    for i in range(4):\n        print(*grid[i])\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef merge(line, direction):\n    for i in range(4):\n        for j in range(4):\n            if direction == \"left\":\n                if j > 0 and line[j] == line[j - 1]:\n                    line[j - 1] = 2 * line[j - 1]\n                    line[j] = 0\n            elif direction == \"right\":\n                if j < 3 and line[j] == line[j + 1]:\n                    line[j + 1] = 2 * line[j + 1]\n                    line[j] = 0\n\n    return line\n\ndef move(line, direction):\n    if direction == \"left\":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.append(0)\n    elif direction == \"right\":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.insert(0, 0)\n    return line\n\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = input()\n    for i in range(4):\n        if direction == \"up\":\n            grid[i] = merge(grid[i], \"left\")\n            grid[i] = move(grid[i], \"left\")\n        elif direction == \"down\":\n            grid[i] = merge(grid[i], \"right\")\n            grid[i] = move(grid[i], \"right\")\n        elif direction == \"left\":\n            grid[i] = merge(grid[i], \"left\")\n            grid[i] = move(grid[i], \"left\")\n        elif direction == \"right\":\n            grid[i] = merge(grid[i], \"left\")\n            grid[i] = move(grid[i], \"left\")\n    for i in range(4):\n        print(*grid[i])\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649807968,
  "object": "edit"
}
2022-04-12 23:59:37.222766 fix syntax errors 3 ['\n\ndef merge(line, direction):\n    for i in range(4):\n        for j in range(4):\n            if direction == "left":\n                if j > 0 and line[j] == line[j-1]:\n                    line[j-1] = 2*line[j-1]\n                    line[j] = 0\n            elif direction == "right":\n                if j < 3 and line[j] == line[j+1]:\n                    line[j+1] = 2*line[j+1]\n                    line[j] = 0\n    return line\n\ndef move(line, direction):\n    if direction == "left":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.append(0)\n    elif direction == "right":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.insert(0, 0)\n    return line\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()]) # list comprehension\n    direction = input() # up, down, left, right\n    for i in range(4):\n        if direction == "up":\n            grid[i] = merge(grid[i], "left")\n            grid[i] = move(grid[i], "left")\n        elif direction == "down":\n            grid[i] = merge(grid[i], "right")\n            grid[i] = move(grid[i], "right")\n        elif direction == "left":\n            grid[i] = merge(grid[i], "left")\n            grid[i] = move(grid[i], "left")\n        elif direction == "right":\n            grid[i] = merge(grid[i], "right")\n            grid[i] = move(grid[i], "right")\n    for i in range(4):\n        print(*grid[i])\n\nif __name__ == "__main__":\n    main()\n', '\n\n\ndef merge(line, direction):\n    for i in range(4):\n        for j in range(4):\n            if direction == "left":\n                if j > 0 and line[j] == line[j - 1]:\n                    line[j - 1] = 2 * line[j - 1]\n                    line[j] = 0\n            elif direction == "right":\n                if j < 3 and line[j] == line[j + 1]:\n                    line[j + 1] = 2 * line[j + 1]\n                    line[j] = 0\n\n    return line\n\ndef move(line, direction):\n    if direction == "left":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.append(0)\n    elif direction == "right":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.insert(0, 0)\n    return line\n\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = input()\n    for i in range(4):\n        if direction == "up":\n            grid[i] = merge(grid[i], "left")\n            grid[i] = move(grid[i], "left")\n        elif direction == "down":\n            grid[i] = merge(grid[i], "left")\n            grid[i] = move(grid[i], "left")\n        elif direction == "left":\n            grid[i] = merge(grid[i], "right")\n            grid[i] = move(grid[i], "right")\n        elif direction == "right":\n            grid[i] = merge(grid[i], "left")\n            grid[i] = move(grid[i], "left")\n    for i in range(4):\n        print(*grid[i])\n\n\nif __name__ == "__main__":\n    main()\n', '\ndef merge(line, direction):\n    for i in range(4):\n        for j in range(4):\n            if direction == "left":\n                if j > 0 and line[j] == line[j - 1]:\n                    line[j - 1] = 2 * line[j - 1]\n                    line[j] = 0\n            elif direction == "right":\n                if j < 3 and line[j] == line[j + 1]:\n                    line[j + 1] = 2 * line[j + 1]\n                    line[j] = 0\n\n    return line\n\ndef move(line, direction):\n    if direction == "left":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.append(0)\n    elif direction == "right":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.insert(0, 0)\n    return line\n\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = input()\n    for i in range(4):\n        if direction == "up":\n            grid[i] = merge(grid[i], "left")\n            grid[i] = move(grid[i], "left")\n        elif direction == "down":\n            grid[i] = merge(grid[i], "right")\n            grid[i] = move(grid[i], "right")\n        elif direction == "left":\n            grid[i] = merge(grid[i], "left")\n            grid[i] = move(grid[i], "left")\n        elif direction == "right":\n            grid[i] = merge(grid[i], "left")\n            grid[i] = move(grid[i], "left")\n    for i in range(4):\n        print(*grid[i])\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 23:59:46.301536 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef merge(line, direction):\n    for i in range(4):\n        for j in range(4):\n            if direction == \"left\":\n                if j > 0 and line[j] == line[j-1]:\n                    line[j-1] = 2*line[j-1]\n                    line[j] = 0\n            elif direction == \"right\":\n                if j < 3 and line[j] == line[j+1]:\n                    line[j+1] = 2*line[j+1]\n                    line[j] = 0\n    return line\n\ndef move(line, direction):\n    if direction == \"left\":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.append(0)\n    elif direction == \"right\":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.insert(0, 0)\n    return line\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = input()\n    for i in range(4):\n        if direction == \"left\":\n            grid[i] = merge(grid[i], \"left\")\n            grid[i] = move(grid[i], \"left\")\n        elif direction == \"right\":\n            grid[i] = merge(grid[i], \"right\")\n            grid[i] = move(grid[i], \"right\")\n        elif direction == \"up\":\n            grid[i] = merge(grid[i], \"up\")\n            grid[i] = move(grid[i], \"up\")\n        elif direction == \"down\":\n            grid[i] = merge(grid[i], \"down\")\n            grid[i] = move(grid[i], \"down\")\n    for i in range(4):\n        print(*grid[i])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "def merge(line, direction):\n    if direction == \"left\":\n        for i in range(4):\n            for j in range(4):\n                if j > 0 and line[j] == line[j-1]:\n                    line[j-1] = 2*line[j-1]\n                    line[j] = 0\n    elif direction == \"right\":\n        for i in range(4):\n            for j in range(4):\n                if j < 3 and line[j] == line[j+1]:\n                    line[j+1] = 2*line[j+1]\n                    line[j] = 0\n    return line\n\n\n\ndef move(line, direction):\n    if direction == \"left\":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.append(0)\n    elif direction == \"right\":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.insert(0, 0)\n    return line\n\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = input()\n    for i in range(4):\n        if direction == \"0\":\n            grid[i] = merge(grid[i], \"left\")\n            grid[i] = move(grid[i], \"left\")\n        elif direction == \"1\":\n            grid[i] = merge(grid[i], \"right\")\n            grid[i] = move(grid[i], \"right\")\n        elif direction == \"2\":\n            grid[i] = merge(grid[i], \"right\")\n            grid[i] = move(grid[i], \"right\")\n        elif direction == \"3\":\n            grid[i] = merge(grid[i], \"right\")\n            grid[i] = move(grid[i], \"right\")\n    for i in range(4):\n        print(*grid[i])\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef merge(line, direction):\n    for i in range(4):\n        for j in range(4):\n            if direction == \"left\":\n                if j > 0 and line[j] == line[j-1]:\n                    line[j-1] = 2*line[j-1]\n                    line[j] = 0\n            elif direction == \"right\":\n                if j < 3 and line[j] == line[j+1]:\n                    line[j+1] = 2*line[j+1]\n                    line[j] = 0\n    return line\n\ndef move(line, direction):\n    if direction == \"left\":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.append(0)\n    elif direction == \"right\":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.insert(0, 0)\n    return line\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = input()\n    for i in range(4):\n        if direction == \"0\" or direction == \"1\" or direction == \"2\" or direction == \"3\":\n            if direction == \"0\":\n                grid[i] = merge(grid[i], \"left\")\n                grid[i] = move(grid[i], \"left\")\n            elif direction == \"1\":\n                grid[i] = merge(grid[i], \"right\")\n                grid[i] = move(grid[i], \"right\")\n            elif direction == \"2\":\n                grid[i] = merge(grid[i], \"right\")\n                grid[i] = move(grid[i], \"right\")\n            elif direction == \"3\":\n                grid[i] = merge(grid[i], \"right\")\n                grid[i] = move(grid[i], \"right\")\n    for i in range(4):\n        print(*grid[i])\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649807977,
  "object": "edit"
}
2022-04-12 23:59:46.301743 fix syntax errors 3 ['\n\ndef merge(line, direction):\n    for i in range(4):\n        for j in range(4):\n            if direction == "left":\n                if j > 0 and line[j] == line[j-1]:\n                    line[j-1] = 2*line[j-1]\n                    line[j] = 0\n            elif direction == "right":\n                if j < 3 and line[j] == line[j+1]:\n                    line[j+1] = 2*line[j+1]\n                    line[j] = 0\n    return line\n\ndef move(line, direction):\n    if direction == "left":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.append(0)\n    elif direction == "right":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.insert(0, 0)\n    return line\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = input()\n    for i in range(4):\n        if direction == "left":\n            grid[i] = merge(grid[i], "left")\n            grid[i] = move(grid[i], "left")\n        elif direction == "right":\n            grid[i] = merge(grid[i], "right")\n            grid[i] = move(grid[i], "right")\n        elif direction == "up":\n            grid[i] = merge(grid[i], "up")\n            grid[i] = move(grid[i], "up")\n        elif direction == "down":\n            grid[i] = merge(grid[i], "down")\n            grid[i] = move(grid[i], "down")\n    for i in range(4):\n        print(*grid[i])\n\nif __name__ == "__main__":\n    main()\n', 'def merge(line, direction):\n    if direction == "left":\n        for i in range(4):\n            for j in range(4):\n                if j > 0 and line[j] == line[j-1]:\n                    line[j-1] = 2*line[j-1]\n                    line[j] = 0\n    elif direction == "right":\n        for i in range(4):\n            for j in range(4):\n                if j < 3 and line[j] == line[j+1]:\n                    line[j+1] = 2*line[j+1]\n                    line[j] = 0\n    return line\n\n\n\ndef move(line, direction):\n    if direction == "left":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.append(0)\n    elif direction == "right":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.insert(0, 0)\n    return line\n\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = input()\n    for i in range(4):\n        if direction == "0":\n            grid[i] = merge(grid[i], "left")\n            grid[i] = move(grid[i], "left")\n        elif direction == "1":\n            grid[i] = merge(grid[i], "right")\n            grid[i] = move(grid[i], "right")\n        elif direction == "2":\n            grid[i] = merge(grid[i], "right")\n            grid[i] = move(grid[i], "right")\n        elif direction == "3":\n            grid[i] = merge(grid[i], "right")\n            grid[i] = move(grid[i], "right")\n    for i in range(4):\n        print(*grid[i])\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef merge(line, direction):\n    for i in range(4):\n        for j in range(4):\n            if direction == "left":\n                if j > 0 and line[j] == line[j-1]:\n                    line[j-1] = 2*line[j-1]\n                    line[j] = 0\n            elif direction == "right":\n                if j < 3 and line[j] == line[j+1]:\n                    line[j+1] = 2*line[j+1]\n                    line[j] = 0\n    return line\n\ndef move(line, direction):\n    if direction == "left":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.append(0)\n    elif direction == "right":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.insert(0, 0)\n    return line\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = input()\n    for i in range(4):\n        if direction == "0" or direction == "1" or direction == "2" or direction == "3":\n            if direction == "0":\n                grid[i] = merge(grid[i], "left")\n                grid[i] = move(grid[i], "left")\n            elif direction == "1":\n                grid[i] = merge(grid[i], "right")\n                grid[i] = move(grid[i], "right")\n            elif direction == "2":\n                grid[i] = merge(grid[i], "right")\n                grid[i] = move(grid[i], "right")\n            elif direction == "3":\n                grid[i] = merge(grid[i], "right")\n                grid[i] = move(grid[i], "right")\n    for i in range(4):\n        print(*grid[i])\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 00:00:07.869450 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef merge(line, direction): \n    for i in range(4):\n        for j in range(4):\n            if direction == \"left\":\n                if j > 0 and line[j] == line[j-1]:\n                    line[j-1] = 2*line[j-1]\n                    line[j] = 0\n            elif direction == \"right\":\n                if j < 3 and line[j] == line[j+1]:\n                    line[j+1] = 2*line[j+1]\n                    line[j] = 0\n    return line\n\ndef move(line, direction):\n\tif direction == \"left\":\n\t\twhile 0 in line:\n\t\t\tline.remove(0)\n\t\twhile len(line) < 4:\n\t\t\tline.append(0)\n\telif direction == \"right\":\n\t\twhile 0 in line:\n\t\t\tline.remove(0)\n\t\twhile len(line) < 4:\n\t\t\tline.insert(0, 0)\n\treturn line\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = input()\n    for i in range(4):\n        if direction == \"0\":\n            grid[i] = merge(grid[i], \"left\")\n            grid[i] = move(grid[i], \"left\")\n        elif direction == \"1\":\n            grid[i] = merge(grid[i], \"left\")\n            grid[i] = move(grid[i], \"left\")\n        elif direction == \"2\":\n            grid[i] = merge(grid[i], \"right\")\n            grid[i] = move(grid[i], \"right\")\n        elif direction == \"3\":\n            grid[i] = merge(grid[i], \"left\")\n            grid[i] = move(grid[i], \"left\")\n    for i in range(4):\n        print(*grid[i])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef merge(line, direction): \n    for i in range(3):\n        if direction == \"left\":\n            if line[i] == line[i+1]:\n                line[i] = 2*line[i]\n                line[i+1] = 0\n        elif direction == \"right\":\n            if line[i] == line[i+1]:\n                line[i+1] = 2*line[i+1]\n                line[i] = 0\n    return line\n\ndef move(line, direction):\n    if direction == \"left\":\n        line = [x for x in line if x != 0]\n        line = line + [0]*(4-len(line))\n    elif direction == \"right\":\n        line = [x for x in line if x != 0]\n        line = [0]*(4-len(line)) + line\n    return line\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = input()\n    if direction == \"0\":\n        for i in range(4):\n            grid[i] = merge(grid[i], \"left\")\n            grid[i] = move(grid[i], \"left\")\n    elif direction == \"1\":\n        for i in range(4):\n            grid[i] = merge(grid[i], \"up\")\n            grid[i] = move(grid[i], \"up\")\n    elif direction == \"2\":\n        for i in range(4):\n            grid[i] = merge(grid[i], \"right\")\n            grid[i] = move(grid[i], \"right\")\n    elif direction == \"3\":\n        for i in range(4):\n            grid[i] = merge(grid[i], \"down\")\n            grid[i] = move(grid[i], \"down\")\n    for i in range(4):\n        print(*grid[i])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef merge(line, direction):\n    for i in range(4):\n        for j in range(4):\n            if direction == \"left\":\n                if j > 0 and line[j] == line[j-1]:\n                    line[j-1] = 2*line[j-1]\n                    line[j] = 0\n            elif direction == \"right\":\n                if j < 3 and line[j] == line[j+1]:\n                    line[j+1] = 2*line[j+1]\n                    line[j] = 0\n    return line\n\ndef move(line, direction):\n    if direction == \"left\":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.append(0)\n    elif direction == \"right\":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.insert(0, 0)\n    return line\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = input()\n    for i in range(4):\n        if direction == \"left\":\n            grid[i] = merge(grid[i], \"left\")\n            grid[i] = move(grid[i], \"left\")\n        elif direction == \"right\":\n            grid[i] = merge(grid[i], \"right\")\n            grid[i] = move(grid[i], \"right\")\n        elif direction == \"up\":\n            grid[i] = merge(grid[i], \"up\")\n            grid[i] = move(grid[i], \"up\")\n        elif direction == \"down\":\n            grid[i] = merge(grid[i], \"down\")\n            grid[i] = move(grid[i], \"down\")\n    for i in range(4):\n        print(*grid[i])\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649807986,
  "object": "edit"
}
2022-04-13 00:00:07.869653 fix syntax errors 3 ['\n\ndef merge(line, direction): \n    for i in range(4):\n        for j in range(4):\n            if direction == "left":\n                if j > 0 and line[j] == line[j-1]:\n                    line[j-1] = 2*line[j-1]\n                    line[j] = 0\n            elif direction == "right":\n                if j < 3 and line[j] == line[j+1]:\n                    line[j+1] = 2*line[j+1]\n                    line[j] = 0\n    return line\n\ndef move(line, direction):\n\tif direction == "left":\n\t\twhile 0 in line:\n\t\t\tline.remove(0)\n\t\twhile len(line) < 4:\n\t\t\tline.append(0)\n\telif direction == "right":\n\t\twhile 0 in line:\n\t\t\tline.remove(0)\n\t\twhile len(line) < 4:\n\t\t\tline.insert(0, 0)\n\treturn line\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = input()\n    for i in range(4):\n        if direction == "0":\n            grid[i] = merge(grid[i], "left")\n            grid[i] = move(grid[i], "left")\n        elif direction == "1":\n            grid[i] = merge(grid[i], "left")\n            grid[i] = move(grid[i], "left")\n        elif direction == "2":\n            grid[i] = merge(grid[i], "right")\n            grid[i] = move(grid[i], "right")\n        elif direction == "3":\n            grid[i] = merge(grid[i], "left")\n            grid[i] = move(grid[i], "left")\n    for i in range(4):\n        print(*grid[i])\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef merge(line, direction): \n    for i in range(3):\n        if direction == "left":\n            if line[i] == line[i+1]:\n                line[i] = 2*line[i]\n                line[i+1] = 0\n        elif direction == "right":\n            if line[i] == line[i+1]:\n                line[i+1] = 2*line[i+1]\n                line[i] = 0\n    return line\n\ndef move(line, direction):\n    if direction == "left":\n        line = [x for x in line if x != 0]\n        line = line + [0]*(4-len(line))\n    elif direction == "right":\n        line = [x for x in line if x != 0]\n        line = [0]*(4-len(line)) + line\n    return line\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = input()\n    if direction == "0":\n        for i in range(4):\n            grid[i] = merge(grid[i], "left")\n            grid[i] = move(grid[i], "left")\n    elif direction == "1":\n        for i in range(4):\n            grid[i] = merge(grid[i], "up")\n            grid[i] = move(grid[i], "up")\n    elif direction == "2":\n        for i in range(4):\n            grid[i] = merge(grid[i], "right")\n            grid[i] = move(grid[i], "right")\n    elif direction == "3":\n        for i in range(4):\n            grid[i] = merge(grid[i], "down")\n            grid[i] = move(grid[i], "down")\n    for i in range(4):\n        print(*grid[i])\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef merge(line, direction):\n    for i in range(4):\n        for j in range(4):\n            if direction == "left":\n                if j > 0 and line[j] == line[j-1]:\n                    line[j-1] = 2*line[j-1]\n                    line[j] = 0\n            elif direction == "right":\n                if j < 3 and line[j] == line[j+1]:\n                    line[j+1] = 2*line[j+1]\n                    line[j] = 0\n    return line\n\ndef move(line, direction):\n    if direction == "left":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.append(0)\n    elif direction == "right":\n        while 0 in line:\n            line.remove(0)\n        while len(line) < 4:\n            line.insert(0, 0)\n    return line\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append([int(x) for x in input().split()])\n    direction = input()\n    for i in range(4):\n        if direction == "left":\n            grid[i] = merge(grid[i], "left")\n            grid[i] = move(grid[i], "left")\n        elif direction == "right":\n            grid[i] = merge(grid[i], "right")\n            grid[i] = move(grid[i], "right")\n        elif direction == "up":\n            grid[i] = merge(grid[i], "up")\n            grid[i] = move(grid[i], "up")\n        elif direction == "down":\n            grid[i] = merge(grid[i], "down")\n            grid[i] = move(grid[i], "down")\n    for i in range(4):\n        print(*grid[i])\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 00:00:07.869768 size on output set 8
2022-04-13 00:00:07.869782 num operations 2
2022-04-13 00:00:07.869787 size on input set 1
2022-04-13 00:00:31.718008 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int, input().split())))\n    direction = int(input())\n    if direction == 0:\n        for i in range(4):\n            for j in range(3):\n                if grid[i][j] == 0:\n                    for k in range(j+1, 4):\n                        if grid[i][k] != 0:\n                            grid[i][j] = grid[i][k]\n                            grid[i][k] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j+1, 4):\n                        if grid[i][k] != 0:\n                            if grid[i][j] == grid[i][k]:\n                                grid[i][j] *= 2\n                                grid[i][k] = 0\n                            break\n    elif direction == 1:\n        for i in range(4):\n            for j in range(3):\n                if grid[j][i] == 0:\n                    for k in range(j+1, 4):\n                        if grid[k][i] != 0:\n                            grid[j][i] = grid[k][i]\n                            grid[k][i] = 0\n                            break\n                if grid[j][i] != 0:\n                    for k in range(j+1, 4):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i] *= 2\n                                grid[k][i] = 0\n                            break\n    elif direction == 2:\n        for i in range(4):\n            for j in range(3, 0, -1):\n                if grid[i][j] == 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[i][k] != 0:\n                            grid[i][j] = grid[i][k]\n                            grid[i][k] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[i][k] != 0:\n                            if grid[i][j] == grid[i][k]:\n                                grid[i][j] *= 2\n                                grid[i][k] = 0\n                            break\n    elif direction == 3:\n        for i in range(4):\n            for j in range(3, 0, -1):\n                if grid[j][i] == 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            grid[j][i] = grid[k][i]\n                            grid[k][i] = 0\n                            break\n                if grid[j][i] != 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i] *= 2\n                                grid[k][i] = 0\n                            break\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int, input().split())))\n    direction = int(input())\n    if direction == 0:\n        for j in range(4):\n            for i in range(3):\n                if grid[i][j] == 0:\n                    for k in range(i+1, 4):\n                        if grid[k][j] != 0:\n                            grid[i][j] = grid[k][j]\n                            grid[k][j] = 0\n                        break\n                if grid[i][j] != 0:\n                    for k in range(i+1, 4):\n                        if grid[k][j] != 0:\n                            if grid[i][j] == grid[k][j]:\n                                grid[i][j] *= 2\n                                grid[k][j] = 0\n                        break\n    elif direction == 1:\n        for j in range(4):\n            for i in range(3):\n                if grid[i][j] == 0:\n                    for k in range(i+1, 4):\n                        if grid[k][j] != 0:\n                            grid[i][j] = grid[k][j]\n                            grid[k][j] = 0\n                        break\n                if grid[i][j] != 0:\n                    for k in range(i+1, 4):\n                        if grid[k][j] != 0:\n                            if grid[i][j] == grid[k][j]:\n                                grid[i][j] *= 2\n                                grid[k][j] = 0\n                        break\n    elif direction == 2:\n        for j in range(4):\n            for i in range(3, 0, -1):\n                if grid[i][j] == 0:\n                    for k in range(i-1, -1, -1):\n                        if grid[k][j] != 0:\n                            grid[i][j] = grid[k][j]\n                            grid[k][j] = 0\n                        break\n                if grid[i][j] != 0:\n                    for k in range(i-1, -1, -1):\n                        if grid[k][j] != 0:\n                            if grid[i][j] == grid[k][j]:\n                                grid[i][j] *= 2\n                                grid[k][j] = 0\n                        break\n    elif direction == 3:\n        for j in range(4):\n            for i in range(3, 0, -1):\n                if grid[i][j] == 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            grid[j][i] = grid[k][i]\n                            grid[k][i] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i] *= 2\n                                grid[k][i] = 0\n                            break\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int, input().split())))\n    direction = int(input())\n    if direction == 0:\n        for i in range(4):\n            for j in range(3):\n                if grid[i][j] == 0:\n                    for k in range(j+1, 4):\n                        if grid[i][k] != 0:\n                            grid[i][j], grid[i][k] = grid[i][k], 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j+1, 4):\n                        if grid[i][k] != 0:\n                            if grid[i][j] == grid[i][k]:\n                                grid[i][j], grid[i][k] = grid[i][j]*2, 0\n                            break\n    elif direction == 1:\n        for i in range(4):\n            for j in range(3):\n                if grid[j][i] == 0:\n                    for k in range(j+1, 4):\n                        if grid[k][i] != 0:\n                            grid[j][i], grid[k][i] = grid[k][i], 0\n                            break\n                if grid[j][i] != 0:\n                    for k in range(j+1, 4):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i], grid[k][i] = grid[j][i]*2, 0\n                            break\n    elif direction == 2:\n        for i in range(4):\n            for j in range(3, 0, -1):\n                if grid[i][j] == 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[i][k] != 0:\n                            grid[i][j], grid[i][k] = grid[i][k], 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[i][k] != 0:\n                            if grid[i][j] == grid[i][k]:\n                                grid[i][j], grid[i][k] = grid[i][j]*2, 0\n                            break\n    elif direction == 3:\n        for i in range(4):\n            for j in range(3, 0, -1):\n                if grid[j][i] == 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            grid[j][i], grid[k][i] = grid[k][i], 0\n                            break\n                if grid[j][i] != 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i], grid[k][i] = grid[j][i]*2, 0\n                            break\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649808007,
  "object": "edit"
}
2022-04-13 00:00:31.718306 fix spelling mistakes 3 ["\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int, input().split())))\n    direction = int(input())\n    if direction == 0:\n        for i in range(4):\n            for j in range(3):\n                if grid[i][j] == 0:\n                    for k in range(j+1, 4):\n                        if grid[i][k] != 0:\n                            grid[i][j] = grid[i][k]\n                            grid[i][k] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j+1, 4):\n                        if grid[i][k] != 0:\n                            if grid[i][j] == grid[i][k]:\n                                grid[i][j] *= 2\n                                grid[i][k] = 0\n                            break\n    elif direction == 1:\n        for i in range(4):\n            for j in range(3):\n                if grid[j][i] == 0:\n                    for k in range(j+1, 4):\n                        if grid[k][i] != 0:\n                            grid[j][i] = grid[k][i]\n                            grid[k][i] = 0\n                            break\n                if grid[j][i] != 0:\n                    for k in range(j+1, 4):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i] *= 2\n                                grid[k][i] = 0\n                            break\n    elif direction == 2:\n        for i in range(4):\n            for j in range(3, 0, -1):\n                if grid[i][j] == 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[i][k] != 0:\n                            grid[i][j] = grid[i][k]\n                            grid[i][k] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[i][k] != 0:\n                            if grid[i][j] == grid[i][k]:\n                                grid[i][j] *= 2\n                                grid[i][k] = 0\n                            break\n    elif direction == 3:\n        for i in range(4):\n            for j in range(3, 0, -1):\n                if grid[j][i] == 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            grid[j][i] = grid[k][i]\n                            grid[k][i] = 0\n                            break\n                if grid[j][i] != 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i] *= 2\n                                grid[k][i] = 0\n                            break\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int, input().split())))\n    direction = int(input())\n    if direction == 0:\n        for j in range(4):\n            for i in range(3):\n                if grid[i][j] == 0:\n                    for k in range(i+1, 4):\n                        if grid[k][j] != 0:\n                            grid[i][j] = grid[k][j]\n                            grid[k][j] = 0\n                        break\n                if grid[i][j] != 0:\n                    for k in range(i+1, 4):\n                        if grid[k][j] != 0:\n                            if grid[i][j] == grid[k][j]:\n                                grid[i][j] *= 2\n                                grid[k][j] = 0\n                        break\n    elif direction == 1:\n        for j in range(4):\n            for i in range(3):\n                if grid[i][j] == 0:\n                    for k in range(i+1, 4):\n                        if grid[k][j] != 0:\n                            grid[i][j] = grid[k][j]\n                            grid[k][j] = 0\n                        break\n                if grid[i][j] != 0:\n                    for k in range(i+1, 4):\n                        if grid[k][j] != 0:\n                            if grid[i][j] == grid[k][j]:\n                                grid[i][j] *= 2\n                                grid[k][j] = 0\n                        break\n    elif direction == 2:\n        for j in range(4):\n            for i in range(3, 0, -1):\n                if grid[i][j] == 0:\n                    for k in range(i-1, -1, -1):\n                        if grid[k][j] != 0:\n                            grid[i][j] = grid[k][j]\n                            grid[k][j] = 0\n                        break\n                if grid[i][j] != 0:\n                    for k in range(i-1, -1, -1):\n                        if grid[k][j] != 0:\n                            if grid[i][j] == grid[k][j]:\n                                grid[i][j] *= 2\n                                grid[k][j] = 0\n                        break\n    elif direction == 3:\n        for j in range(4):\n            for i in range(3, 0, -1):\n                if grid[i][j] == 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            grid[j][i] = grid[k][i]\n                            grid[k][i] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i] *= 2\n                                grid[k][i] = 0\n                            break\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int, input().split())))\n    direction = int(input())\n    if direction == 0:\n        for i in range(4):\n            for j in range(3):\n                if grid[i][j] == 0:\n                    for k in range(j+1, 4):\n                        if grid[i][k] != 0:\n                            grid[i][j], grid[i][k] = grid[i][k], 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j+1, 4):\n                        if grid[i][k] != 0:\n                            if grid[i][j] == grid[i][k]:\n                                grid[i][j], grid[i][k] = grid[i][j]*2, 0\n                            break\n    elif direction == 1:\n        for i in range(4):\n            for j in range(3):\n                if grid[j][i] == 0:\n                    for k in range(j+1, 4):\n                        if grid[k][i] != 0:\n                            grid[j][i], grid[k][i] = grid[k][i], 0\n                            break\n                if grid[j][i] != 0:\n                    for k in range(j+1, 4):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i], grid[k][i] = grid[j][i]*2, 0\n                            break\n    elif direction == 2:\n        for i in range(4):\n            for j in range(3, 0, -1):\n                if grid[i][j] == 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[i][k] != 0:\n                            grid[i][j], grid[i][k] = grid[i][k], 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[i][k] != 0:\n                            if grid[i][j] == grid[i][k]:\n                                grid[i][j], grid[i][k] = grid[i][j]*2, 0\n                            break\n    elif direction == 3:\n        for i in range(4):\n            for j in range(3, 0, -1):\n                if grid[j][i] == 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            grid[j][i], grid[k][i] = grid[k][i], 0\n                            break\n                if grid[j][i] != 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i], grid[k][i] = grid[j][i]*2, 0\n                            break\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 00:00:31.718417 size on output set 3
2022-04-13 00:00:31.718425 size on input set 3
2022-04-13 00:00:39.389476 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int, input().split())))\n    direction = int(input())\n    if direction == 0:\n        for j in range(4):\n            for i in range(3):\n                if grid[i][j] == 0:\n                    for k in range(i+1, 4):\n                        if grid[k][j] != 0:\n                            grid[i][j] = grid[k][j]\n                            grid[k][j] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(i+1, 4):\n                        if grid[k][j] != 0:\n                            if grid[i][j] == grid[k][j]:\n                                grid[i][j] *= 2\n                                grid[k][j] = 0\n                            break\n    elif direction == 1:\n        for j in range(4):\n            for i in range(3):\n                if grid[i][j] == 0:\n                    for k in range(i+1, 4):\n                        if grid[k][j] != 0:\n                            grid[i][j] = grid[k][j]\n                            grid[k][j] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(i+1, 4):\n                        if grid[k][j] != 0:\n                            if grid[i][j] == grid[k][j]:\n                                grid[i][j] *= 2\n                                grid[k][j] = 0\n                            break\n    elif direction == 2:\n        for j in range(4):\n            for i in range(3, 0, -1):\n                if grid[i][j] == 0:\n                    for k in range(i-1, -1, -1):\n                        if grid[k][j] != 0:\n                            grid[i][j] = grid[k][j]\n                            grid[k][j] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(i-1, -1, -1):\n                        if grid[k][j] != 0:\n                            if grid[i][j] == grid[k][j]:\n                                grid[i][j] *= 2\n                                grid[k][j] = 0\n                            break\n    elif direction == 3:\n        for j in range(4):\n            for i in range(3, 0, -1):\n                if grid[i][j] == 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            grid[j][i] = grid[k][i]\n                            grid[k][i] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i] *= 2\n                                grid[k][i] = 0\n                            break\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int, input().split())))\n    direction = int(input())\n    if direction == 0:\n        for j in range(4):\n            for i in range(3):\n                if grid[i][j] == 0:\n                    for k in range(i+1, 4):\n                        if grid[k][j] != 0:\n                            grid[i][j] = grid[k][j]\n                            grid[k][j] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(i+1, 4):\n                        if grid[k][j] != 0:\n                            if grid[i][j] == grid[k][j]:\n                                grid[i][j] *= 2\n                                grid[k][j] = 0\n                                break\n    elif direction == 1:\n        for j in range(4):\n            for i in range(3):\n                if grid[i][j] == 0:\n                    for k in range(i+1, 4):\n                        if grid[k][j] != 0:\n                            grid[i][j] = grid[k][j]\n                            grid[k][j] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(i+1, 4):\n                        if grid[k][j] != 0:\n                            if grid[i][j] == grid[k][j]:\n                                grid[i][j] *= 2\n                                grid[k][j] = 0\n                                break\n    elif direction == 2:\n        for j in range(4):\n            for i in range(3, 0, -1):\n                if grid[i][j] == 0:\n                    for k in range(i-1, -1, -1):\n                        if grid[k][j] != 0:\n                            grid[i][j] = grid[k][j]\n                            grid[k][j] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(i-1, -1, -1):\n                        if grid[k][j] != 0:\n                            if grid[i][j] == grid[k][j]:\n                                grid[i][j] *= 2\n                                grid[k][j] = 0\n                                break\n    elif direction == 3:\n        for j in range(4):\n            for i in range(3, 0, -1):\n                if grid[i][j] == 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            grid[j][i] = grid[k][i]\n                            grid[k][i] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i] *= 2\n                                grid[k][i] = 0\n                            break\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int, input().split())))\n    direction = int(input())\n    if direction == 0:\n        for j in range(4):\n            for i in range(3):\n                if grid[i][j] == 0:\n                    for k in range(i+1, 4):\n                        if grid[k][j] != 0:\n                            grid[i][j] = grid[k][j]\n                            grid[k][j] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(i+1, 4):\n                        if grid[k][j] != 0:\n                            if grid[i][j] == grid[k][j]:\n                                grid[i][j] *= 2\n                                grid[k][j] = 0\n                                break\n    elif direction == 1:\n        for j in range(4):\n            for i in range(3):\n                if grid[i][j] == 0:\n                    for k in range(i+1, 4):\n                        if grid[k][j] != 0:\n                            grid[i][j] = grid[k][j]\n                            grid[k][j] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(i+1, 4):\n                        if grid[k][j] != 0:\n                            if grid[i][j] == grid[k][j]:\n                                grid[i][j] *= 2\n                                grid[k][j] = 0\n                                break\n    elif direction == 2:\n        for j in range(4):\n            for i in range(3, 0, -1):\n                if grid[i][j] == 0:\n                    for k in range(i-1, -1, -1):\n                        if grid[k][j] != 0:\n                            grid[i][j] = grid[k][j]\n                            grid[k][j] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(i-1, -1, -1):\n                        if grid[k][j] != 0:\n                            if grid[i][j] == grid[k][j]:\n                                grid[i][j] *= 2\n                                grid[k][j] = 0\n                                break\n    elif direction == 3:\n        for j in range(4):\n            for i in range(3, 0, -1):\n                if grid[i][j] == 0:\n                    for k in range(i-1, -1, -1):\n                        if grid[j][k] != 0:\n                            grid[j][i] = grid[j][k]\n                            grid[j][k] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i] *= 2\n                                grid[k][i] = 0\n                            break\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649808031,
  "object": "edit"
}
2022-04-13 00:00:39.389746 fix syntax errors 3 ["\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int, input().split())))\n    direction = int(input())\n    if direction == 0:\n        for j in range(4):\n            for i in range(3):\n                if grid[i][j] == 0:\n                    for k in range(i+1, 4):\n                        if grid[k][j] != 0:\n                            grid[i][j] = grid[k][j]\n                            grid[k][j] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(i+1, 4):\n                        if grid[k][j] != 0:\n                            if grid[i][j] == grid[k][j]:\n                                grid[i][j] *= 2\n                                grid[k][j] = 0\n                            break\n    elif direction == 1:\n        for j in range(4):\n            for i in range(3):\n                if grid[i][j] == 0:\n                    for k in range(i+1, 4):\n                        if grid[k][j] != 0:\n                            grid[i][j] = grid[k][j]\n                            grid[k][j] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(i+1, 4):\n                        if grid[k][j] != 0:\n                            if grid[i][j] == grid[k][j]:\n                                grid[i][j] *= 2\n                                grid[k][j] = 0\n                            break\n    elif direction == 2:\n        for j in range(4):\n            for i in range(3, 0, -1):\n                if grid[i][j] == 0:\n                    for k in range(i-1, -1, -1):\n                        if grid[k][j] != 0:\n                            grid[i][j] = grid[k][j]\n                            grid[k][j] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(i-1, -1, -1):\n                        if grid[k][j] != 0:\n                            if grid[i][j] == grid[k][j]:\n                                grid[i][j] *= 2\n                                grid[k][j] = 0\n                            break\n    elif direction == 3:\n        for j in range(4):\n            for i in range(3, 0, -1):\n                if grid[i][j] == 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            grid[j][i] = grid[k][i]\n                            grid[k][i] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i] *= 2\n                                grid[k][i] = 0\n                            break\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int, input().split())))\n    direction = int(input())\n    if direction == 0:\n        for j in range(4):\n            for i in range(3):\n                if grid[i][j] == 0:\n                    for k in range(i+1, 4):\n                        if grid[k][j] != 0:\n                            grid[i][j] = grid[k][j]\n                            grid[k][j] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(i+1, 4):\n                        if grid[k][j] != 0:\n                            if grid[i][j] == grid[k][j]:\n                                grid[i][j] *= 2\n                                grid[k][j] = 0\n                                break\n    elif direction == 1:\n        for j in range(4):\n            for i in range(3):\n                if grid[i][j] == 0:\n                    for k in range(i+1, 4):\n                        if grid[k][j] != 0:\n                            grid[i][j] = grid[k][j]\n                            grid[k][j] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(i+1, 4):\n                        if grid[k][j] != 0:\n                            if grid[i][j] == grid[k][j]:\n                                grid[i][j] *= 2\n                                grid[k][j] = 0\n                                break\n    elif direction == 2:\n        for j in range(4):\n            for i in range(3, 0, -1):\n                if grid[i][j] == 0:\n                    for k in range(i-1, -1, -1):\n                        if grid[k][j] != 0:\n                            grid[i][j] = grid[k][j]\n                            grid[k][j] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(i-1, -1, -1):\n                        if grid[k][j] != 0:\n                            if grid[i][j] == grid[k][j]:\n                                grid[i][j] *= 2\n                                grid[k][j] = 0\n                                break\n    elif direction == 3:\n        for j in range(4):\n            for i in range(3, 0, -1):\n                if grid[i][j] == 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            grid[j][i] = grid[k][i]\n                            grid[k][i] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i] *= 2\n                                grid[k][i] = 0\n                            break\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int, input().split())))\n    direction = int(input())\n    if direction == 0:\n        for j in range(4):\n            for i in range(3):\n                if grid[i][j] == 0:\n                    for k in range(i+1, 4):\n                        if grid[k][j] != 0:\n                            grid[i][j] = grid[k][j]\n                            grid[k][j] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(i+1, 4):\n                        if grid[k][j] != 0:\n                            if grid[i][j] == grid[k][j]:\n                                grid[i][j] *= 2\n                                grid[k][j] = 0\n                                break\n    elif direction == 1:\n        for j in range(4):\n            for i in range(3):\n                if grid[i][j] == 0:\n                    for k in range(i+1, 4):\n                        if grid[k][j] != 0:\n                            grid[i][j] = grid[k][j]\n                            grid[k][j] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(i+1, 4):\n                        if grid[k][j] != 0:\n                            if grid[i][j] == grid[k][j]:\n                                grid[i][j] *= 2\n                                grid[k][j] = 0\n                                break\n    elif direction == 2:\n        for j in range(4):\n            for i in range(3, 0, -1):\n                if grid[i][j] == 0:\n                    for k in range(i-1, -1, -1):\n                        if grid[k][j] != 0:\n                            grid[i][j] = grid[k][j]\n                            grid[k][j] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(i-1, -1, -1):\n                        if grid[k][j] != 0:\n                            if grid[i][j] == grid[k][j]:\n                                grid[i][j] *= 2\n                                grid[k][j] = 0\n                                break\n    elif direction == 3:\n        for j in range(4):\n            for i in range(3, 0, -1):\n                if grid[i][j] == 0:\n                    for k in range(i-1, -1, -1):\n                        if grid[j][k] != 0:\n                            grid[j][i] = grid[j][k]\n                            grid[j][k] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i] *= 2\n                                grid[k][i] = 0\n                            break\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 00:00:44.367854 fix syntax errors {
  "choices": [
    {
      "error": {
        "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
        "type": "invalid_edit"
      },
      "index": 0
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int, input().split())))\n    direction = int(input())\n    if direction == 0:\n        for i in range(4):\n            for j in range(3):\n                if grid[i][j] == 0:\n                    for k in range(j+1, 4):\n                        if grid[i][k] != 0:\n                            grid[i][j], grid[i][k] = grid[i][k], 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j+1, 4):\n                        if grid[i][k] != 0:\n                            if grid[i][j] == grid[i][k]:\n                                grid[i][j], grid[i][k] = grid[i][j]*2, 0\n                            break                \n    elif direction == 1:\n        for i in range(4):\n            for j in range(3):\n                if grid[j][i] == 0:\n                    for k in range(j+1, 4):\n                        if grid[k][i] != 0:\n                            grid[j][i], grid[k][i] = grid[k][i], 0\n                            break\n                if grid[j][i] != 0:\n                    for k in range(j+1, 4):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i], grid[k][i] = grid[j][i]*2, 0\n                            break\n    elif direction == 2:\n        for i in range(4):\n            for j in range(3, 0, -1):\n                if grid[i][j] == 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[i][k] != 0:\n                            grid[i][j], grid[i][k] = grid[i][k], 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[i][k] != 0:\n                            if grid[i][j] == grid[i][k]:\n                                grid[i][j], grid[i][k] = grid[i][j]*2, 0\n                            break\n    elif direction == 3:\n        for i in range(4):\n            for j in range(3, 0, -1):\n                if grid[j][i] == 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            grid[j][i], grid[k][i] = grid[k][i], 0\n                            break\n                if grid[j][i] != 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i], grid[k][i] = grid[j][i]*2, 0\n                            break\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int, input().split()))\n    direction = int(input())\n    if direction == 0:\n        for i in range(4):\n            for j in range(3):\n                if grid[i][j] == 0:\n                    for k in range(j+1, 4):\n                        if grid[i][k] != 0:\n                            grid[i][j], grid[i][k] = grid[i][k], 0\n                            break;\n                if grid[i][j] != 0:\n                    for k in range(j+1, 4):\n                        if grid[i][k] != 0:\n                            if grid[i][j] == grid[i][k]:\n                                grid[i][j], grid[i][k] = grid[i][j]*2, 0\n                            break;\n    elif direction == 1:\n        for i in range(4):\n            for j in range(3):\n                if grid[j][i] == 0:\n                    for k in range(j+1, 4):\n                        if grid[k][i] != 0:\n                            grid[j][i], grid[k][i] = grid[k][i], 0\n                            break;\n                if grid[j][i] != 0:\n                    for k in range(j+1, 4):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i], grid[k][i] = grid[j][i]*2, 0\n                            break;\n    elif direction == 2:\n        for i in range(4):\n            for j in range(3, 0, -1):\n                if grid[i][j] == 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[i][k] != 0:\n                            grid[i][j], grid[i][k] = grid[i][k], 0\n                            break;\n                if grid[i][j] != 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[i][k] != 0:\n                            if grid[i][j] == grid[i][k]:\n                                grid[i][j], grid[i][k] = grid[i][j]*2, 0\n                            break;\n    elif direction == 3:\n        for i in range(4):\n            for j in range(3, 0, -1):\n                if grid[j][i] == 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            grid[j][i], grid[k][i] = grid[k][i], 0\n                            break;\n                if grid[j][i] != 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i], grid[k][i] = grid[j][i]*2, 0\n                            break;\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649808039,
  "object": "edit"
}
2022-04-13 00:00:44.368042 NO RESULT
2022-04-13 00:00:44.368048 {
  "error": {
    "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
    "type": "invalid_edit"
  },
  "index": 0
}
2022-04-13 00:00:44.368084 fix syntax errors 2 ["\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int, input().split())))\n    direction = int(input())\n    if direction == 0:\n        for i in range(4):\n            for j in range(3):\n                if grid[i][j] == 0:\n                    for k in range(j+1, 4):\n                        if grid[i][k] != 0:\n                            grid[i][j], grid[i][k] = grid[i][k], 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j+1, 4):\n                        if grid[i][k] != 0:\n                            if grid[i][j] == grid[i][k]:\n                                grid[i][j], grid[i][k] = grid[i][j]*2, 0\n                            break                \n    elif direction == 1:\n        for i in range(4):\n            for j in range(3):\n                if grid[j][i] == 0:\n                    for k in range(j+1, 4):\n                        if grid[k][i] != 0:\n                            grid[j][i], grid[k][i] = grid[k][i], 0\n                            break\n                if grid[j][i] != 0:\n                    for k in range(j+1, 4):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i], grid[k][i] = grid[j][i]*2, 0\n                            break\n    elif direction == 2:\n        for i in range(4):\n            for j in range(3, 0, -1):\n                if grid[i][j] == 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[i][k] != 0:\n                            grid[i][j], grid[i][k] = grid[i][k], 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[i][k] != 0:\n                            if grid[i][j] == grid[i][k]:\n                                grid[i][j], grid[i][k] = grid[i][j]*2, 0\n                            break\n    elif direction == 3:\n        for i in range(4):\n            for j in range(3, 0, -1):\n                if grid[j][i] == 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            grid[j][i], grid[k][i] = grid[k][i], 0\n                            break\n                if grid[j][i] != 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i], grid[k][i] = grid[j][i]*2, 0\n                            break\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int, input().split()))\n    direction = int(input())\n    if direction == 0:\n        for i in range(4):\n            for j in range(3):\n                if grid[i][j] == 0:\n                    for k in range(j+1, 4):\n                        if grid[i][k] != 0:\n                            grid[i][j], grid[i][k] = grid[i][k], 0\n                            break;\n                if grid[i][j] != 0:\n                    for k in range(j+1, 4):\n                        if grid[i][k] != 0:\n                            if grid[i][j] == grid[i][k]:\n                                grid[i][j], grid[i][k] = grid[i][j]*2, 0\n                            break;\n    elif direction == 1:\n        for i in range(4):\n            for j in range(3):\n                if grid[j][i] == 0:\n                    for k in range(j+1, 4):\n                        if grid[k][i] != 0:\n                            grid[j][i], grid[k][i] = grid[k][i], 0\n                            break;\n                if grid[j][i] != 0:\n                    for k in range(j+1, 4):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i], grid[k][i] = grid[j][i]*2, 0\n                            break;\n    elif direction == 2:\n        for i in range(4):\n            for j in range(3, 0, -1):\n                if grid[i][j] == 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[i][k] != 0:\n                            grid[i][j], grid[i][k] = grid[i][k], 0\n                            break;\n                if grid[i][j] != 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[i][k] != 0:\n                            if grid[i][j] == grid[i][k]:\n                                grid[i][j], grid[i][k] = grid[i][j]*2, 0\n                            break;\n    elif direction == 3:\n        for i in range(4):\n            for j in range(3, 0, -1):\n                if grid[j][i] == 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            grid[j][i], grid[k][i] = grid[k][i], 0\n                            break;\n                if grid[j][i] != 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i], grid[k][i] = grid[j][i]*2, 0\n                            break;\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 00:00:54.937453 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    grid = [list(map(int, input().split())) for i in range(4)]\n    direction = int(input())\n    if direction == 0:\n        for i in range(4):\n            for j in range(3):\n                if grid[i][j] == 0:\n                    for k in range(j + 1, 4):\n                        if grid[i][k] != 0:\n                            grid[i][j] = grid[i][k]\n                            grid[i][k] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j + 1, 4):\n                        if grid[i][k] != 0:\n                            if grid[i][j] == grid[i][k]:\n                                grid[i][j] *= 2\n                                grid[i][k] = 0\n                            break\n    elif direction == 1:\n        for i in range(4):\n            for j in range(3):\n                if grid[j][i] == 0:\n                    for k in range(j + 1, 4):\n                        if grid[k][i] != 0:\n                            grid[j][i] = grid[k][i]\n                            grid[k][i] = 0\n                            break\n                if grid[j][i] != 0:\n                    for k in range(j + 1, 4):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i] *= 2\n                                grid[k][i] = 0\n                            break\n    elif direction == 2:\n        for i in range(4):\n            for j in range(3, 0, -1):\n                if grid[i][j] == 0:\n                    for k in range(j - 1, -1, -1):\n                        if grid[i][k] != 0:\n                            grid[i][j] = grid[i][k]\n                            grid[i][k] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j - 1, -1, -1):\n                        if grid[i][k] != 0:\n                            if grid[i][j] == grid[i][k]:\n                                grid[i][j] *= 2\n                                grid[i][k] = 0\n                            break\n    elif direction == 3:\n        for i in range(4):\n            for j in range(3, 0, -1):\n                if grid[j][i] == 0:\n                    for k in range(j - 1, -1, -1):\n                        if grid[k][i] != 0:\n                            grid[j][i] = grid[k][i]\n                            grid[k][i] = 0\n                            break\n                if grid[j][i] != 0:\n                    for k in range(j - 1, -1, -1):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i] *= 2\n                                grid[k][i] = 0\n                            break\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int, input().split())))\n    direction = int(input())\n    if direction == 0:\n        for i in range(4):\n            for j in range(3):\n                if grid[i][j] == 0:\n                    for k in range(j+1, 4):\n                        if grid[i][k] != 0:\n                            grid[i][j] = grid[i][k]\n                            grid[i][k] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j+1, 4):\n                        if grid[i][k] != 0:\n                            if grid[i][j] == grid[i][k]:\n                                grid[i][j] *= 2\n                                grid[i][k] = 0\n                            break\n    elif direction == 1:\n        for i in range(4):\n            for j in range(3):\n                if grid[j][i] == 0:\n                    for k in range(j+1, 4):\n                        if grid[k][i] != 0:\n                            grid[j][i] = grid[k][i]\n                            grid[k][i] = 0\n                            break\n                if grid[j][i] != 0:\n                    for k in range(j+1, 4):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i] *= 2\n                                grid[k][i] = 0\n                            break\n    elif direction == 2:\n        for i in range(4):\n            for j in range(3, 0, -1):\n                if grid[i][j] == 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[i][k] != 0:\n                            grid[i][j] = grid[i][k]\n                            grid[i][k] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[i][k] != 0:\n                            if grid[i][j] == grid[i][k]:\n                                grid[i][j] *= 2\n                                grid[i][k] = 0\n                            break\n    elif direction == 3:\n        for i in range(4):\n            for j in range(3, 0, -1):\n                if grid[j][i] == 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            grid[j][i] = grid[k][i]\n                            grid[k][i] = 0\n                            break\n                if grid[j][i] != 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i] *= 2\n                                grid[k][i] = 0\n                            break\n    for i in grid:\n        print(' '.join(list(map(str, i))))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int, input().split())))\n    direction = input()\n    if direction == 0:\n        for i in range(4):\n            for j in range(3, 0, -1):\n                if grid[i][j] == 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[i][k] != 0:\n                            grid[i][j] = grid[i][k]\n                            grid[i][k] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[i][k] != 0:\n                            if grid[i][j] == grid[i][k]:\n                                grid[i][j] *= 2\n                                grid[i][k] = 0\n                            break\n    elif direction == 1:\n        for i in range(4):\n            for j in range(3, 0, -1):\n                if grid[j][i] == 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            grid[j][i] = grid[k][i]\n                            grid[k][i] = 0\n                            break\n                if grid[j][i] != 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i] *= 2\n                                grid[k][i] = 0\n                            break\n    elif direction == 2:\n        for i in range(4):\n            for j in range(3):\n                if grid[i][j] == 0:\n                    for k in range(j+1, 4):\n                        if grid[i][k] != 0:\n                            grid[i][j] = grid[i][k]\n                            grid[i][k] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j+1, 4):\n                        if grid[i][k] != 0:\n                            if grid[i][j] == grid[i][k]:\n                                grid[i][j] *= 2\n                                grid[i][k] = 0\n                            break\n    elif direction == 3:\n        for i in range(4):\n            for j in range(3):\n                if grid[j][i] == 0:\n                    for k in range(j+1, 4):\n                        if grid[k][i] != 0:\n                            grid[j][i] = grid[k][i]\n                            grid[k][i] = 0\n                            break\n                if grid[j][i] != 0:\n                    for k in range(j+1, 4):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i] *= 2\n                                grid[k][i] = 0\n                            break\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649808044,
  "object": "edit"
}
2022-04-13 00:00:54.937719 fix syntax errors 3 ["\ndef main():\n    grid = [list(map(int, input().split())) for i in range(4)]\n    direction = int(input())\n    if direction == 0:\n        for i in range(4):\n            for j in range(3):\n                if grid[i][j] == 0:\n                    for k in range(j + 1, 4):\n                        if grid[i][k] != 0:\n                            grid[i][j] = grid[i][k]\n                            grid[i][k] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j + 1, 4):\n                        if grid[i][k] != 0:\n                            if grid[i][j] == grid[i][k]:\n                                grid[i][j] *= 2\n                                grid[i][k] = 0\n                            break\n    elif direction == 1:\n        for i in range(4):\n            for j in range(3):\n                if grid[j][i] == 0:\n                    for k in range(j + 1, 4):\n                        if grid[k][i] != 0:\n                            grid[j][i] = grid[k][i]\n                            grid[k][i] = 0\n                            break\n                if grid[j][i] != 0:\n                    for k in range(j + 1, 4):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i] *= 2\n                                grid[k][i] = 0\n                            break\n    elif direction == 2:\n        for i in range(4):\n            for j in range(3, 0, -1):\n                if grid[i][j] == 0:\n                    for k in range(j - 1, -1, -1):\n                        if grid[i][k] != 0:\n                            grid[i][j] = grid[i][k]\n                            grid[i][k] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j - 1, -1, -1):\n                        if grid[i][k] != 0:\n                            if grid[i][j] == grid[i][k]:\n                                grid[i][j] *= 2\n                                grid[i][k] = 0\n                            break\n    elif direction == 3:\n        for i in range(4):\n            for j in range(3, 0, -1):\n                if grid[j][i] == 0:\n                    for k in range(j - 1, -1, -1):\n                        if grid[k][i] != 0:\n                            grid[j][i] = grid[k][i]\n                            grid[k][i] = 0\n                            break\n                if grid[j][i] != 0:\n                    for k in range(j - 1, -1, -1):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i] *= 2\n                                grid[k][i] = 0\n                            break\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int, input().split())))\n    direction = int(input())\n    if direction == 0:\n        for i in range(4):\n            for j in range(3):\n                if grid[i][j] == 0:\n                    for k in range(j+1, 4):\n                        if grid[i][k] != 0:\n                            grid[i][j] = grid[i][k]\n                            grid[i][k] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j+1, 4):\n                        if grid[i][k] != 0:\n                            if grid[i][j] == grid[i][k]:\n                                grid[i][j] *= 2\n                                grid[i][k] = 0\n                            break\n    elif direction == 1:\n        for i in range(4):\n            for j in range(3):\n                if grid[j][i] == 0:\n                    for k in range(j+1, 4):\n                        if grid[k][i] != 0:\n                            grid[j][i] = grid[k][i]\n                            grid[k][i] = 0\n                            break\n                if grid[j][i] != 0:\n                    for k in range(j+1, 4):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i] *= 2\n                                grid[k][i] = 0\n                            break\n    elif direction == 2:\n        for i in range(4):\n            for j in range(3, 0, -1):\n                if grid[i][j] == 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[i][k] != 0:\n                            grid[i][j] = grid[i][k]\n                            grid[i][k] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[i][k] != 0:\n                            if grid[i][j] == grid[i][k]:\n                                grid[i][j] *= 2\n                                grid[i][k] = 0\n                            break\n    elif direction == 3:\n        for i in range(4):\n            for j in range(3, 0, -1):\n                if grid[j][i] == 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            grid[j][i] = grid[k][i]\n                            grid[k][i] = 0\n                            break\n                if grid[j][i] != 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i] *= 2\n                                grid[k][i] = 0\n                            break\n    for i in grid:\n        print(' '.join(list(map(str, i))))\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int, input().split())))\n    direction = input()\n    if direction == 0:\n        for i in range(4):\n            for j in range(3, 0, -1):\n                if grid[i][j] == 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[i][k] != 0:\n                            grid[i][j] = grid[i][k]\n                            grid[i][k] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[i][k] != 0:\n                            if grid[i][j] == grid[i][k]:\n                                grid[i][j] *= 2\n                                grid[i][k] = 0\n                            break\n    elif direction == 1:\n        for i in range(4):\n            for j in range(3, 0, -1):\n                if grid[j][i] == 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            grid[j][i] = grid[k][i]\n                            grid[k][i] = 0\n                            break\n                if grid[j][i] != 0:\n                    for k in range(j-1, -1, -1):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i] *= 2\n                                grid[k][i] = 0\n                            break\n    elif direction == 2:\n        for i in range(4):\n            for j in range(3):\n                if grid[i][j] == 0:\n                    for k in range(j+1, 4):\n                        if grid[i][k] != 0:\n                            grid[i][j] = grid[i][k]\n                            grid[i][k] = 0\n                            break\n                if grid[i][j] != 0:\n                    for k in range(j+1, 4):\n                        if grid[i][k] != 0:\n                            if grid[i][j] == grid[i][k]:\n                                grid[i][j] *= 2\n                                grid[i][k] = 0\n                            break\n    elif direction == 3:\n        for i in range(4):\n            for j in range(3):\n                if grid[j][i] == 0:\n                    for k in range(j+1, 4):\n                        if grid[k][i] != 0:\n                            grid[j][i] = grid[k][i]\n                            grid[k][i] = 0\n                            break\n                if grid[j][i] != 0:\n                    for k in range(j+1, 4):\n                        if grid[k][i] != 0:\n                            if grid[j][i] == grid[k][i]:\n                                grid[j][i] *= 2\n                                grid[k][i] = 0\n                            break\n    for i in range(4):\n        for j in range(4):\n            print(grid[i][j], end=' ')\n        print()\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 00:00:54.937825 size on output set 8
2022-04-13 00:00:54.937839 num operations 2
2022-04-13 00:00:54.937844 size on input set 1
2022-04-13 00:01:00.946877 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef read_grid():\n    return [list(map(int, input().strip().split())) for _ in range(4)]\n\ndef write_grid(grid):\n    for row in grid:\n        print(' '.join(map(str, row)))\n\ndef slide_left(row):\n    \"\"\"\n    >>> slide_left([2, 0, 0, 2])\n    [4, 0, 0, 0]\n    >>> slide_left([4, 16, 8, 2])\n    [4, 16, 8, 2]\n    >>> slide_left([2, 64, 32, 4])\n    [2, 64, 32, 4]\n    >>> slide_left([1024, 1024, 64, 0])\n    [2048, 64, 0, 0]\n    >>> slide_left([2, 2, 4, 8])\n    [4, 4, 8, 0]\n    >>> slide_left([4, 0, 4, 4])\n    [8, 4, 0, 0]\n    >>> slide_left([16, 16, 16, 16])\n    [32, 32, 0, 0]\n    >>> slide_left([32, 16, 16, 32])\n    [32, 32, 32, 0]\n    \"\"\"\n    # slide non-zero tiles to the left\n    row = [tile for tile in row if tile]\n    # merge tiles\n    row = [tile * 2 for tile in row if tile == row[i + 1] for i in range(len(row) - 1)] + [tile for tile in row if tile != row[i + 1] for i in range(len(row) - 1)] # pylint: disable=line-too-long\n    # pad with zeros\n    row += [0] * (4 - len(row))\n    return row\n\ndef rotate_90(grid):\n    \"\"\"\n    >>> rotate_90([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> rotate_90([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    \"\"\"\n    return [[grid[j][i] for j in range(4)] for i in range(3, -1, -1)]\n\ndef transpose(grid):\n    \"\"\"\n    >>> transpose([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> transpose([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    \"\"\"\n    return [[grid[j][i] for j in range(4)] for i in range(4)]\n\ndef move_left(grid):\n    return [slide_left(row) for row in grid]\n\ndef move_right(grid):\n    return move_left(rotate_90(rotate_90(grid)))\n\ndef move_up(grid):\n    return transpose(move_left(transpose(grid)))\n\ndef move_down(grid):\n    return transpose(move_right(transpose(grid)))\n\ndef play(grid, move):\n    return {\n        0: move_left,\n        1: move_up,\n        2: move_right,\n        3: move_down,\n    }[move](grid)\n\nif __name__ == '__main__':\n    grid = read_grid()\n    move = int(input().strip())\n    grid = play(grid, move)\n    write_grid(grid)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef read_grid():\n    return [list(map(int, input().strip().split())) for _ in range(4)]\n\ndef write_grid(grid):\n    for row in grid:\n        print(' '.join(map(str, row)))\n\ndef slide_left(row):\n    \"\"\"\n    >>> slide_left([2, 0, 0, 2])\n    [4, 0, 0, 0]\n    >>> slide_left([4, 16, 8, 2])\n    [4, 16, 8, 2]\n    >>> slide_left([2, 64, 32, 4])\n    [2, 64, 32, 4]\n    >>> slide_left([1024, 1024, 64, 0])\n    [2048, 64, 0, 0]\n    >>> slide_left([2, 2, 4, 8])\n    [4, 4, 8, 0]\n    >>> slide_left([4, 0, 4, 4])\n    [8, 4, 0, 0]\n    >>> slide_left([16, 16, 16, 16])\n    [32, 32, 0, 0]\n    >>> slide_left([32, 16, 16, 32])\n    [32, 32, 32, 0]\n    \"\"\"\n    # slide non-zero tiles to the left\n    row = [tile for tile in row if tile]\n    # merge tiles\n    row = [tile * 2 for tile in row if tile == row[i + 1] for i in range(len(row) - 1)] + [tile for tile in row if tile != row[i + 1] for i in range(len(row) - 1)]\n    # pad with zeros\n    row += [0] * (4 - len(row))\n    return row\n\ndef rotate_90(grid):\n    \"\"\"\n    >>> rotate_90([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> rotate_90([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    \"\"\"\n    return [[grid[j][i] for j in range(4)] for i in range(3, -1, -1)]\n\ndef transpose(grid):\n    \"\"\"\n    >>> transpose([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> transpose([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    \"\"\"\n    return [[grid[j][i] for j in range(4)] for i in range(4)]\n\ndef move_left(grid):\n    return [slide_left(row) for row in grid]\n\ndef move_right(grid):\n    return move_left(rotate_90(rotate_90(grid)))\n\ndef move_up(grid):\n    return transpose(move_left(transpose(grid)))\n\ndef move_down(grid):\n    return transpose(move_right(transpose(grid)))\n\ndef play(grid, move):\n    return {\n        0: move_left,\n        1: move_up,\n        2: move_right,\n        3: move_down,\n    }[move](grid)\n\nif __name__ == '__main__':\n    grid = read_grid()\n    move = int(input().strip())\n    grid = play(grid, move)\n    write_grid(grid)\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef read_grid():\n    return [list(map(int, input().strip().split())) for _ in range(4)]\n\ndef write_grid(grid):\n    for row in grid:\n        print(' '.join(map(str, row)))\n\ndef slide_left(row):\n    \"\"\"\n    >>> slide_left([2, 0, 0, 2])\n    [4, 0, 0, 0]\n    >>> slide_left([4, 16, 8, 2])\n    [4, 16, 8, 2]\n    >>> slide_left([2, 64, 32, 4])\n    [2, 64, 32, 4]\n    >>> slide_left([1024, 1024, 64, 0])\n    [2048, 64, 0, 0]\n    >>> slide_left([2, 2, 4, 8])\n    [4, 4, 8, 0]\n    >>> slide_left([4, 0, 4, 4])\n    [8, 4, 0, 0]\n    >>> slide_left([16, 16, 16, 16])\n    [32, 32, 0, 0]\n    >>> slide_left([32, 16, 16, 32])\n    [32, 32, 32, 0]\n    \"\"\"\n    # slide non-zero tiles to the left by filtering out zeros\n    row = [tile for tile in row if tile] # O(n)\n    # merge tiles by multiplying by 2\n    row = [tile * 2 for tile in row if tile == row[i + 1] for i in range(len(row) - 1)] + [tile for tile in row if tile != row[i + 1] for i in range(len(row) - 1)] # O(n)\n    # pad with zeros to fill up the row\n    row += [0] * (4 - len(row))\n    return row\n\ndef rotate_90(grid):\n    \"\"\"\n    >>> rotate_90([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> rotate_90([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    \"\"\"\n    return [[grid[j][i] for j in range(4)] for i in range(3, -1, -1)]\n\ndef transpose(grid):\n    \"\"\"\n    >>> transpose([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> transpose([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    \"\"\"\n    return [[grid[j][i] for j in range(4)] for i in range(4)]\n\ndef move_left(grid):\n    return [slide_left(row) for row in grid]\n\ndef move_right(grid):\n    return move_left(rotate_90(rotate_90(grid)))\n\ndef move_up(grid):\n    return transpose(move_left(transpose(grid)))\n\ndef move_down(grid):\n    return transpose(move_right(transpose(grid)))\n\ndef play(grid, move):\n    return {\n        0: move_left,\n        1: move_up,\n        2: move_right,\n        3: move_down,\n    }[move](grid)\n\nif __name__ == '__main__':\n    grid = read_grid()\n    move = int(input().strip())\n    grid = play(grid, move)\n    write_grid(grid)\n"
    }
  ],
  "created": 1649808054,
  "object": "edit"
}
2022-04-13 00:01:00.947074 fix spelling mistakes 3 ['\n\nimport sys\n\ndef read_grid():\n    return [list(map(int, input().strip().split())) for _ in range(4)]\n\ndef write_grid(grid):\n    for row in grid:\n        print(\' \'.join(map(str, row)))\n\ndef slide_left(row):\n    """\n    >>> slide_left([2, 0, 0, 2])\n    [4, 0, 0, 0]\n    >>> slide_left([4, 16, 8, 2])\n    [4, 16, 8, 2]\n    >>> slide_left([2, 64, 32, 4])\n    [2, 64, 32, 4]\n    >>> slide_left([1024, 1024, 64, 0])\n    [2048, 64, 0, 0]\n    >>> slide_left([2, 2, 4, 8])\n    [4, 4, 8, 0]\n    >>> slide_left([4, 0, 4, 4])\n    [8, 4, 0, 0]\n    >>> slide_left([16, 16, 16, 16])\n    [32, 32, 0, 0]\n    >>> slide_left([32, 16, 16, 32])\n    [32, 32, 32, 0]\n    """\n    # slide non-zero tiles to the left\n    row = [tile for tile in row if tile]\n    # merge tiles\n    row = [tile * 2 for tile in row if tile == row[i + 1] for i in range(len(row) - 1)] + [tile for tile in row if tile != row[i + 1] for i in range(len(row) - 1)] # pylint: disable=line-too-long\n    # pad with zeros\n    row += [0] * (4 - len(row))\n    return row\n\ndef rotate_90(grid):\n    """\n    >>> rotate_90([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> rotate_90([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    """\n    return [[grid[j][i] for j in range(4)] for i in range(3, -1, -1)]\n\ndef transpose(grid):\n    """\n    >>> transpose([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> transpose([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    """\n    return [[grid[j][i] for j in range(4)] for i in range(4)]\n\ndef move_left(grid):\n    return [slide_left(row) for row in grid]\n\ndef move_right(grid):\n    return move_left(rotate_90(rotate_90(grid)))\n\ndef move_up(grid):\n    return transpose(move_left(transpose(grid)))\n\ndef move_down(grid):\n    return transpose(move_right(transpose(grid)))\n\ndef play(grid, move):\n    return {\n        0: move_left,\n        1: move_up,\n        2: move_right,\n        3: move_down,\n    }[move](grid)\n\nif __name__ == \'__main__\':\n    grid = read_grid()\n    move = int(input().strip())\n    grid = play(grid, move)\n    write_grid(grid)\n', '\n\ndef read_grid():\n    return [list(map(int, input().strip().split())) for _ in range(4)]\n\ndef write_grid(grid):\n    for row in grid:\n        print(\' \'.join(map(str, row)))\n\ndef slide_left(row):\n    """\n    >>> slide_left([2, 0, 0, 2])\n    [4, 0, 0, 0]\n    >>> slide_left([4, 16, 8, 2])\n    [4, 16, 8, 2]\n    >>> slide_left([2, 64, 32, 4])\n    [2, 64, 32, 4]\n    >>> slide_left([1024, 1024, 64, 0])\n    [2048, 64, 0, 0]\n    >>> slide_left([2, 2, 4, 8])\n    [4, 4, 8, 0]\n    >>> slide_left([4, 0, 4, 4])\n    [8, 4, 0, 0]\n    >>> slide_left([16, 16, 16, 16])\n    [32, 32, 0, 0]\n    >>> slide_left([32, 16, 16, 32])\n    [32, 32, 32, 0]\n    """\n    # slide non-zero tiles to the left\n    row = [tile for tile in row if tile]\n    # merge tiles\n    row = [tile * 2 for tile in row if tile == row[i + 1] for i in range(len(row) - 1)] + [tile for tile in row if tile != row[i + 1] for i in range(len(row) - 1)]\n    # pad with zeros\n    row += [0] * (4 - len(row))\n    return row\n\ndef rotate_90(grid):\n    """\n    >>> rotate_90([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> rotate_90([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    """\n    return [[grid[j][i] for j in range(4)] for i in range(3, -1, -1)]\n\ndef transpose(grid):\n    """\n    >>> transpose([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> transpose([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    """\n    return [[grid[j][i] for j in range(4)] for i in range(4)]\n\ndef move_left(grid):\n    return [slide_left(row) for row in grid]\n\ndef move_right(grid):\n    return move_left(rotate_90(rotate_90(grid)))\n\ndef move_up(grid):\n    return transpose(move_left(transpose(grid)))\n\ndef move_down(grid):\n    return transpose(move_right(transpose(grid)))\n\ndef play(grid, move):\n    return {\n        0: move_left,\n        1: move_up,\n        2: move_right,\n        3: move_down,\n    }[move](grid)\n\nif __name__ == \'__main__\':\n    grid = read_grid()\n    move = int(input().strip())\n    grid = play(grid, move)\n    write_grid(grid)\n', '\n\nimport sys\n\ndef read_grid():\n    return [list(map(int, input().strip().split())) for _ in range(4)]\n\ndef write_grid(grid):\n    for row in grid:\n        print(\' \'.join(map(str, row)))\n\ndef slide_left(row):\n    """\n    >>> slide_left([2, 0, 0, 2])\n    [4, 0, 0, 0]\n    >>> slide_left([4, 16, 8, 2])\n    [4, 16, 8, 2]\n    >>> slide_left([2, 64, 32, 4])\n    [2, 64, 32, 4]\n    >>> slide_left([1024, 1024, 64, 0])\n    [2048, 64, 0, 0]\n    >>> slide_left([2, 2, 4, 8])\n    [4, 4, 8, 0]\n    >>> slide_left([4, 0, 4, 4])\n    [8, 4, 0, 0]\n    >>> slide_left([16, 16, 16, 16])\n    [32, 32, 0, 0]\n    >>> slide_left([32, 16, 16, 32])\n    [32, 32, 32, 0]\n    """\n    # slide non-zero tiles to the left by filtering out zeros\n    row = [tile for tile in row if tile] # O(n)\n    # merge tiles by multiplying by 2\n    row = [tile * 2 for tile in row if tile == row[i + 1] for i in range(len(row) - 1)] + [tile for tile in row if tile != row[i + 1] for i in range(len(row) - 1)] # O(n)\n    # pad with zeros to fill up the row\n    row += [0] * (4 - len(row))\n    return row\n\ndef rotate_90(grid):\n    """\n    >>> rotate_90([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> rotate_90([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    """\n    return [[grid[j][i] for j in range(4)] for i in range(3, -1, -1)]\n\ndef transpose(grid):\n    """\n    >>> transpose([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> transpose([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    """\n    return [[grid[j][i] for j in range(4)] for i in range(4)]\n\ndef move_left(grid):\n    return [slide_left(row) for row in grid]\n\ndef move_right(grid):\n    return move_left(rotate_90(rotate_90(grid)))\n\ndef move_up(grid):\n    return transpose(move_left(transpose(grid)))\n\ndef move_down(grid):\n    return transpose(move_right(transpose(grid)))\n\ndef play(grid, move):\n    return {\n        0: move_left,\n        1: move_up,\n        2: move_right,\n        3: move_down,\n    }[move](grid)\n\nif __name__ == \'__main__\':\n    grid = read_grid()\n    move = int(input().strip())\n    grid = play(grid, move)\n    write_grid(grid)\n']
2022-04-13 00:01:00.947227 size on output set 3
2022-04-13 00:01:00.947235 size on input set 3
2022-04-13 00:01:05.334253 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef read_grid():\n    return [list(map(int, input().strip().split())) for _ in range(4)]\n\ndef write_grid(grid):\n    for row in grid:\n        print(' '.join(map(str, row)))\n\ndef slide_left(row):\n    \"\"\"\n    >>> slide_left([2, 0, 0, 2])\n    [4, 0, 0, 0]\n    >>> slide_left([4, 16, 8, 2])\n    [4, 16, 8, 2]\n    >>> slide_left([2, 64, 32, 4])\n    [2, 64, 32, 4]\n    >>> slide_left([1024, 1024, 64, 0])\n    [2048, 64, 0, 0]\n    >>> slide_left([2, 2, 4, 8])\n    [4, 4, 8, 0]\n    >>> slide_left([4, 0, 4, 4])\n    [8, 4, 0, 0]\n    >>> slide_left([16, 16, 16, 16])\n    [32, 32, 0, 0]\n    >>> slide_left([32, 16, 16, 32])\n    [32, 32, 32, 0]\n    \"\"\"\n    # slide non-zero tiles to the left\n    row = [tile for tile in row if tile]\n    # merge tiles\n    row = [tile * 2 for tile in row if tile == row[i + 1] for i in range(len(row) - 1)] + [tile for tile in row if tile != row[i + 1] for i in range(len(row) - 1) if row[i + 1]]\n    # pad with zeros\n    row += [0] * (4 - len(row))\n    return row\n\ndef rotate_90(grid):\n    \"\"\"\n    >>> rotate_90([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> rotate_90([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    \"\"\"\n    return [[grid[j][i] for j in range(4)] for i in range(3, -1, -1)]\n\ndef transpose(grid):\n    \"\"\"\n    >>> transpose([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> transpose([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    \"\"\"\n    return [[grid[j][i] for j in range(4)] for i in range(4)]\n\ndef move_left(grid):\n    return [slide_left(row) for row in grid]\n\ndef move_right(grid):\n    return move_left(rotate_90(rotate_90(grid)))\n\ndef move_up(grid):\n    return transpose(move_left(transpose(grid)))\n\ndef move_down(grid):\n    return transpose(move_right(transpose(grid)))\n\ndef play(grid, move):\n    return {\n        0: move_left,\n        1: move_up,\n        2: move_right,\n        3: move_down,\n    }[move](grid)\n\nif __name__ == '__main__':\n    grid = read_grid()\n    move = int(input().strip())\n    grid = play(grid, move)\n    write_grid(grid)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef read_grid():\n    return [list(map(int, input().strip().split())) for _ in range(4)]\n\ndef write_grid(grid):\n    for row in grid:\n        print(' '.join(map(str, row)))\n\ndef slide_left(row):\n    \"\"\"\n    >>> slide_left([2, 0, 0, 2])\n    [4, 0, 0, 0]\n    >>> slide_left([4, 16, 8, 2])\n    [4, 16, 8, 2]\n    >>> slide_left([2, 64, 32, 4])\n    [2, 64, 32, 4]\n    >>> slide_left([1024, 1024, 64, 0])\n    [2048, 64, 0, 0]\n    >>> slide_left([2, 2, 4, 8])\n    [4, 4, 8, 0]\n    >>> slide_left([4, 0, 4, 4])\n    [8, 4, 0, 0]\n    >>> slide_left([16, 16, 16, 16])\n    [32, 32, 0, 0]\n    >>> slide_left([32, 16, 16, 32])\n    [32, 32, 32, 0]\n    \"\"\"\n    # slide non-zero tiles to the left\n    row = [tile for tile in row if tile]\n    # merge tiles\n    row = [tile * 2 for tile in row if tile == row[i + 1] for i in range(len(row) - 1)] + [tile for tile in row if tile != row[i + 1] for i in range(len(row) - 1)][::-1]\n    # pad with zeros\n    row += [0] * (4 - len(row))\n    return row\n\ndef rotate_90(grid):\n    \"\"\"\n    >>> rotate_90([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> rotate_90([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    \"\"\"\n    return [[grid[j][i] for j in range(4)] for i in range(3, -1, -1)]\n\ndef transpose(grid):\n    \"\"\"\n    >>> transpose([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> transpose([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    \"\"\"\n    return [[grid[j][i] for j in range(4)] for i in range(4)]\n\ndef move_left(grid):\n    return [slide_left(row) for row in grid]\n\ndef move_right(grid):\n    return move_left(rotate_90(rotate_90(grid)))\n\ndef move_up(grid):\n    return transpose(move_left(transpose(grid)))\n\ndef move_down(grid):\n    return transpose(move_right(transpose(grid)))\n\ndef play(grid, move):\n    return {\n        0: move_left,\n        1: move_up,\n        2: move_right,\n        3: move_down,\n    }[move](grid)\n\nif __name__ == '__main__':\n    grid = read_grid()\n    move = int(input().strip())\n    grid = play(grid, move)\n    write_grid(grid)\n"
    },
    {
      "index": 2,
      "text": "\n\ndef read_grid():\n    return [list(map(int, input().strip().split())) for _ in range(4)]\n\ndef write_grid(grid):\n    for row in grid:\n        print(' '.join(map(str, row)))\n\ndef slide_left(row):\n    \"\"\"\n    >>> slide_left([2, 0, 0, 2])\n    [4, 0, 0, 0]\n    >>> slide_left([4, 16, 8, 2])\n    [4, 16, 8, 2]\n    >>> slide_left([2, 64, 32, 4])\n    [2, 64, 32, 4]\n    >>> slide_left([1024, 1024, 64, 0])\n    [2048, 64, 0, 0]\n    >>> slide_left([2, 2, 4, 8])\n    [4, 4, 8, 0]\n    >>> slide_left([4, 0, 4, 4])\n    [8, 4, 0, 0]\n    >>> slide_left([16, 16, 16, 16])\n    [32, 32, 0, 0]\n    >>> slide_left([32, 16, 16, 32])\n    [32, 32, 32, 0]\n    \"\"\"\n    # slide non-zero tiles to the left\n    row = [tile for tile in row if tile]\n    # merge tiles\n    row = [tile * 2 for i, tile in enumerate(row) if tile == row[i + 1] for i in range(len(row) - 1)] + [tile for i, tile in enumerate(row) if tile != row[i + 1] for i in range(len(row) - 1)]\n    # pad with zeros\n    row += [0] * (4 - len(row))\n    return row\n\ndef rotate_90(grid):\n    \"\"\"\n    >>> rotate_90([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> rotate_90([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    \"\"\"\n    return [[grid[j][i] for j in range(4)] for i in range(3, -1, -1)]\n\ndef transpose(grid):\n    \"\"\"\n    >>> transpose([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> transpose([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    \"\"\"\n    return [[grid[j][i] for j in range(4)] for i in range(4)]\n\ndef move_left(grid):\n    return [slide_left(row) for row in grid]\n\ndef move_right(grid):\n    return move_left(rotate_90(rotate_90(grid)))\n\ndef move_up(grid):\n    return transpose(move_left(transpose(grid)))\n\ndef move_down(grid):\n    return transpose(move_right(transpose(grid)))\n\ndef play(grid, move):\n    return {\n        0: move_left,\n        1: move_up,\n        2: move_right,\n        3: move_down,\n    }[move](grid)\n\nif __name__ == '__main__':\n    grid = read_grid()\n    move = int(input().strip())\n    grid = play(grid, move)\n    write_grid(grid)\n"
    }
  ],
  "created": 1649808060,
  "object": "edit"
}
2022-04-13 00:01:05.334448 fix syntax errors 3 ['\n\ndef read_grid():\n    return [list(map(int, input().strip().split())) for _ in range(4)]\n\ndef write_grid(grid):\n    for row in grid:\n        print(\' \'.join(map(str, row)))\n\ndef slide_left(row):\n    """\n    >>> slide_left([2, 0, 0, 2])\n    [4, 0, 0, 0]\n    >>> slide_left([4, 16, 8, 2])\n    [4, 16, 8, 2]\n    >>> slide_left([2, 64, 32, 4])\n    [2, 64, 32, 4]\n    >>> slide_left([1024, 1024, 64, 0])\n    [2048, 64, 0, 0]\n    >>> slide_left([2, 2, 4, 8])\n    [4, 4, 8, 0]\n    >>> slide_left([4, 0, 4, 4])\n    [8, 4, 0, 0]\n    >>> slide_left([16, 16, 16, 16])\n    [32, 32, 0, 0]\n    >>> slide_left([32, 16, 16, 32])\n    [32, 32, 32, 0]\n    """\n    # slide non-zero tiles to the left\n    row = [tile for tile in row if tile]\n    # merge tiles\n    row = [tile * 2 for tile in row if tile == row[i + 1] for i in range(len(row) - 1)] + [tile for tile in row if tile != row[i + 1] for i in range(len(row) - 1) if row[i + 1]]\n    # pad with zeros\n    row += [0] * (4 - len(row))\n    return row\n\ndef rotate_90(grid):\n    """\n    >>> rotate_90([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> rotate_90([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    """\n    return [[grid[j][i] for j in range(4)] for i in range(3, -1, -1)]\n\ndef transpose(grid):\n    """\n    >>> transpose([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> transpose([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    """\n    return [[grid[j][i] for j in range(4)] for i in range(4)]\n\ndef move_left(grid):\n    return [slide_left(row) for row in grid]\n\ndef move_right(grid):\n    return move_left(rotate_90(rotate_90(grid)))\n\ndef move_up(grid):\n    return transpose(move_left(transpose(grid)))\n\ndef move_down(grid):\n    return transpose(move_right(transpose(grid)))\n\ndef play(grid, move):\n    return {\n        0: move_left,\n        1: move_up,\n        2: move_right,\n        3: move_down,\n    }[move](grid)\n\nif __name__ == \'__main__\':\n    grid = read_grid()\n    move = int(input().strip())\n    grid = play(grid, move)\n    write_grid(grid)\n', '\n\ndef read_grid():\n    return [list(map(int, input().strip().split())) for _ in range(4)]\n\ndef write_grid(grid):\n    for row in grid:\n        print(\' \'.join(map(str, row)))\n\ndef slide_left(row):\n    """\n    >>> slide_left([2, 0, 0, 2])\n    [4, 0, 0, 0]\n    >>> slide_left([4, 16, 8, 2])\n    [4, 16, 8, 2]\n    >>> slide_left([2, 64, 32, 4])\n    [2, 64, 32, 4]\n    >>> slide_left([1024, 1024, 64, 0])\n    [2048, 64, 0, 0]\n    >>> slide_left([2, 2, 4, 8])\n    [4, 4, 8, 0]\n    >>> slide_left([4, 0, 4, 4])\n    [8, 4, 0, 0]\n    >>> slide_left([16, 16, 16, 16])\n    [32, 32, 0, 0]\n    >>> slide_left([32, 16, 16, 32])\n    [32, 32, 32, 0]\n    """\n    # slide non-zero tiles to the left\n    row = [tile for tile in row if tile]\n    # merge tiles\n    row = [tile * 2 for tile in row if tile == row[i + 1] for i in range(len(row) - 1)] + [tile for tile in row if tile != row[i + 1] for i in range(len(row) - 1)][::-1]\n    # pad with zeros\n    row += [0] * (4 - len(row))\n    return row\n\ndef rotate_90(grid):\n    """\n    >>> rotate_90([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> rotate_90([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    """\n    return [[grid[j][i] for j in range(4)] for i in range(3, -1, -1)]\n\ndef transpose(grid):\n    """\n    >>> transpose([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> transpose([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    """\n    return [[grid[j][i] for j in range(4)] for i in range(4)]\n\ndef move_left(grid):\n    return [slide_left(row) for row in grid]\n\ndef move_right(grid):\n    return move_left(rotate_90(rotate_90(grid)))\n\ndef move_up(grid):\n    return transpose(move_left(transpose(grid)))\n\ndef move_down(grid):\n    return transpose(move_right(transpose(grid)))\n\ndef play(grid, move):\n    return {\n        0: move_left,\n        1: move_up,\n        2: move_right,\n        3: move_down,\n    }[move](grid)\n\nif __name__ == \'__main__\':\n    grid = read_grid()\n    move = int(input().strip())\n    grid = play(grid, move)\n    write_grid(grid)\n', '\n\ndef read_grid():\n    return [list(map(int, input().strip().split())) for _ in range(4)]\n\ndef write_grid(grid):\n    for row in grid:\n        print(\' \'.join(map(str, row)))\n\ndef slide_left(row):\n    """\n    >>> slide_left([2, 0, 0, 2])\n    [4, 0, 0, 0]\n    >>> slide_left([4, 16, 8, 2])\n    [4, 16, 8, 2]\n    >>> slide_left([2, 64, 32, 4])\n    [2, 64, 32, 4]\n    >>> slide_left([1024, 1024, 64, 0])\n    [2048, 64, 0, 0]\n    >>> slide_left([2, 2, 4, 8])\n    [4, 4, 8, 0]\n    >>> slide_left([4, 0, 4, 4])\n    [8, 4, 0, 0]\n    >>> slide_left([16, 16, 16, 16])\n    [32, 32, 0, 0]\n    >>> slide_left([32, 16, 16, 32])\n    [32, 32, 32, 0]\n    """\n    # slide non-zero tiles to the left\n    row = [tile for tile in row if tile]\n    # merge tiles\n    row = [tile * 2 for i, tile in enumerate(row) if tile == row[i + 1] for i in range(len(row) - 1)] + [tile for i, tile in enumerate(row) if tile != row[i + 1] for i in range(len(row) - 1)]\n    # pad with zeros\n    row += [0] * (4 - len(row))\n    return row\n\ndef rotate_90(grid):\n    """\n    >>> rotate_90([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> rotate_90([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    """\n    return [[grid[j][i] for j in range(4)] for i in range(3, -1, -1)]\n\ndef transpose(grid):\n    """\n    >>> transpose([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> transpose([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    """\n    return [[grid[j][i] for j in range(4)] for i in range(4)]\n\ndef move_left(grid):\n    return [slide_left(row) for row in grid]\n\ndef move_right(grid):\n    return move_left(rotate_90(rotate_90(grid)))\n\ndef move_up(grid):\n    return transpose(move_left(transpose(grid)))\n\ndef move_down(grid):\n    return transpose(move_right(transpose(grid)))\n\ndef play(grid, move):\n    return {\n        0: move_left,\n        1: move_up,\n        2: move_right,\n        3: move_down,\n    }[move](grid)\n\nif __name__ == \'__main__\':\n    grid = read_grid()\n    move = int(input().strip())\n    grid = play(grid, move)\n    write_grid(grid)\n']
2022-04-13 00:01:09.945844 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef read_grid():\n    return [list(map(int, input().strip().split())) for _ in range(4)]\n\ndef write_grid(grid):\n    for row in grid:\n        print(' '.join(map(str, row)))\n\ndef slide_left(row):\n    \"\"\"\n    >>> slide_left([2, 0, 0, 2])\n    [4, 0, 0, 0]\n    >>> slide_left([4, 16, 8, 2])\n    [4, 16, 8, 2]\n    >>> slide_left([2, 64, 32, 4])\n    [2, 64, 32, 4]\n    >>> slide_left([1024, 1024, 64, 0])\n    [2048, 64, 0, 0]\n    >>> slide_left([2, 2, 4, 8])\n    [4, 4, 8, 0]\n    >>> slide_left([4, 0, 4, 4])\n    [8, 4, 0, 0]\n    >>> slide_left([16, 16, 16, 16])\n    [32, 32, 0, 0]\n    >>> slide_left([32, 16, 16, 32])\n    [32, 32, 32, 0]\n    \"\"\"\n    # slide non-zero tiles to the left by filtering out zeros\n    row = [tile for tile in row if tile] # O(n)\n    # merge tiles by multiplying by 2\n    row = [tile * 2 for tile in row if tile == row[i + 1] for i in range(len(row) - 1)] + [tile for tile in row if tile != row[i + 1] for i in range(len(row) - 1)]\n    # pad with zeros to fill up the row\n    row += [0] * (4 - len(row))\n    return row\n\ndef rotate_90(grid):\n    \"\"\"\n    >>> rotate_90([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> rotate_90([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    \"\"\"\n    return [[grid[j][i] for j in range(4)] for i in range(3, -1, -1)]\n\ndef transpose(grid):\n    \"\"\"\n    >>> transpose([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> transpose([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    \"\"\"\n    return [[grid[j][i] for j in range(4)] for i in range(4)]\n\ndef move_left(grid):\n    return [slide_left(row) for row in grid]\n\ndef move_right(grid):\n    return move_left(rotate_90(rotate_90(grid)))\n\ndef move_up(grid):\n    return transpose(move_left(transpose(grid)))\n\ndef move_down(grid):\n    return transpose(move_right(transpose(grid)))\n\ndef play(grid, move):\n    return {\n        0: move_left,\n        1: move_up,\n        2: move_right,\n        3: move_down,\n    }[move](grid)\n\nif __name__ == '__main__':\n    grid = read_grid()\n    move = int(input().strip())\n    grid = play(grid, move)\n    write_grid(grid)\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef read_grid():\n    return [list(map(int, input().strip().split())) for _ in range(4)]\n\ndef write_grid(grid):\n    for row in grid:\n        print(' '.join(map(str, row)))\n\ndef slide_left(row):\n    \"\"\"\n    >>> slide_left([2, 0, 0, 2])\n    [4, 0, 0, 0]\n    >>> slide_left([4, 16, 8, 2])\n    [4, 16, 8, 2]\n    >>> slide_left([2, 64, 32, 4])\n    [2, 64, 32, 4]\n    >>> slide_left([1024, 1024, 64, 0])\n    [2048, 64, 0, 0]\n    >>> slide_left([2, 2, 4, 8])\n    [4, 4, 8, 0]\n    >>> slide_left([4, 0, 4, 4])\n    [8, 4, 0, 0]\n    >>> slide_left([16, 16, 16, 16])\n    [32, 32, 0, 0]\n    >>> slide_left([32, 16, 16, 32])\n    [32, 32, 32, 0]\n    \"\"\"\n    # slide non-zero tiles to the left by filtering out zeros\n    row = [tile for tile in row if tile] # O(n)\n    # merge tiles by multiplying by 2\n    row = [tile * 2 for i, tile in enumerate(row) if tile == row[i + 1] for i in range(len(row) - 1)] + [tile for i, tile in enumerate(row) if tile != row[i + 1] for i in range(len(row) - 1)] # O(n)\n    # pad with zeros to fill up the row\n    row += [0] * (4 - len(row))\n    return row\n\ndef rotate_90(grid):\n    \"\"\"\n    >>> rotate_90([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> rotate_90([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    \"\"\"\n    return [[grid[j][i] for j in range(4)] for i in range(3, -1, -1)]\n\ndef transpose(grid):\n    \"\"\"\n    >>> transpose([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> transpose([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    \"\"\"\n    return [[grid[j][i] for j in range(4)] for i in range(4)]\n\ndef move_left(grid):\n    return [slide_left(row) for row in grid]\n\ndef move_right(grid):\n    return move_left(rotate_90(rotate_90(grid)))\n\ndef move_up(grid):\n    return transpose(move_left(transpose(grid)))\n\ndef move_down(grid):\n    return transpose(move_right(transpose(grid)))\n\ndef play(grid, move):\n    return {\n        0: move_left,\n        1: move_up,\n        2: move_right,\n        3: move_down,\n    }[move](grid)\n\nif __name__ == '__main__':\n    grid = read_grid()\n    move = int(input().strip())\n    grid = play(grid, move)\n    write_grid(grid)\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef read_grid():\n    return [list(map(int, input().strip().split())) for _ in range(4)]\n\ndef write_grid(grid):\n    for row in grid:\n        print(' '.join(map(str, row)))\n\ndef slide_left(row):\n    \"\"\"\n    >>> slide_left([2, 0, 0, 2])\n    [4, 0, 0, 0]\n    >>> slide_left([4, 16, 8, 2])\n    [4, 16, 8, 2]\n    >>> slide_left([2, 64, 32, 4])\n    [2, 64, 32, 4]\n    >>> slide_left([1024, 1024, 64, 0])\n    [2048, 64, 0, 0]\n    >>> slide_left([2, 2, 4, 8])\n    [4, 4, 8, 0]\n    >>> slide_left([4, 0, 4, 4])\n    [8, 4, 0, 0]\n    >>> slide_left([16, 16, 16, 16])\n    [32, 32, 0, 0]\n    >>> slide_left([32, 16, 16, 32])\n    [32, 32, 32, 0]\n    \"\"\"\n    # slide non-zero tiles to the left by filtering out zeros\n    row = [tile for tile in row if tile] # O(n)\n    # merge tiles by multiplying by 2\n    row = [tile * 2 for tile in row if tile == row[i + 1] for i in range(len(row) - 1)] + [tile for tile in row if tile != row[i + 1] for i in range(len(row) - 1)]\n    # pad with zeros to fill up the row\n    row += [0] * (4 - len(row))\n    return row\n\ndef rotate_90(grid):\n    \"\"\"\n    >>> rotate_90([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> rotate_90([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    \"\"\"\n    return [[grid[j][i] for j in range(4)] for i in range(3, -1, -1)]\n\ndef transpose(grid):\n    \"\"\"\n    >>> transpose([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> transpose([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    \"\"\"\n    return [[grid[j][i] for j in range(4)] for i in range(4)]\n\ndef move_left(grid):\n    return [slide_left(row) for row in grid]\n\ndef move_right(grid):\n    return move_left(rotate_90(rotate_90(grid)))\n\ndef move_up(grid):\n    return transpose(move_left(transpose(grid)))\n\ndef move_down(grid):\n    return transpose(move_right(transpose(grid)))\n\ndef play(grid, move):\n    return {\n        0: move_left,\n        1: move_up,\n        2: move_right,\n        3: move_down,\n    }[move](grid)\n\nif __name__ == '__main__':\n    grid = read_grid()\n    move = int(input().strip())\n    grid = play(grid, move)\n    write_grid(grid)\n"
    }
  ],
  "created": 1649808065,
  "object": "edit"
}
2022-04-13 00:01:09.946072 fix syntax errors 3 ['\n\nimport sys\n\ndef read_grid():\n    return [list(map(int, input().strip().split())) for _ in range(4)]\n\ndef write_grid(grid):\n    for row in grid:\n        print(\' \'.join(map(str, row)))\n\ndef slide_left(row):\n    """\n    >>> slide_left([2, 0, 0, 2])\n    [4, 0, 0, 0]\n    >>> slide_left([4, 16, 8, 2])\n    [4, 16, 8, 2]\n    >>> slide_left([2, 64, 32, 4])\n    [2, 64, 32, 4]\n    >>> slide_left([1024, 1024, 64, 0])\n    [2048, 64, 0, 0]\n    >>> slide_left([2, 2, 4, 8])\n    [4, 4, 8, 0]\n    >>> slide_left([4, 0, 4, 4])\n    [8, 4, 0, 0]\n    >>> slide_left([16, 16, 16, 16])\n    [32, 32, 0, 0]\n    >>> slide_left([32, 16, 16, 32])\n    [32, 32, 32, 0]\n    """\n    # slide non-zero tiles to the left by filtering out zeros\n    row = [tile for tile in row if tile] # O(n)\n    # merge tiles by multiplying by 2\n    row = [tile * 2 for tile in row if tile == row[i + 1] for i in range(len(row) - 1)] + [tile for tile in row if tile != row[i + 1] for i in range(len(row) - 1)]\n    # pad with zeros to fill up the row\n    row += [0] * (4 - len(row))\n    return row\n\ndef rotate_90(grid):\n    """\n    >>> rotate_90([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> rotate_90([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    """\n    return [[grid[j][i] for j in range(4)] for i in range(3, -1, -1)]\n\ndef transpose(grid):\n    """\n    >>> transpose([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> transpose([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    """\n    return [[grid[j][i] for j in range(4)] for i in range(4)]\n\ndef move_left(grid):\n    return [slide_left(row) for row in grid]\n\ndef move_right(grid):\n    return move_left(rotate_90(rotate_90(grid)))\n\ndef move_up(grid):\n    return transpose(move_left(transpose(grid)))\n\ndef move_down(grid):\n    return transpose(move_right(transpose(grid)))\n\ndef play(grid, move):\n    return {\n        0: move_left,\n        1: move_up,\n        2: move_right,\n        3: move_down,\n    }[move](grid)\n\nif __name__ == \'__main__\':\n    grid = read_grid()\n    move = int(input().strip())\n    grid = play(grid, move)\n    write_grid(grid)\n', '\n\nimport sys\n\ndef read_grid():\n    return [list(map(int, input().strip().split())) for _ in range(4)]\n\ndef write_grid(grid):\n    for row in grid:\n        print(\' \'.join(map(str, row)))\n\ndef slide_left(row):\n    """\n    >>> slide_left([2, 0, 0, 2])\n    [4, 0, 0, 0]\n    >>> slide_left([4, 16, 8, 2])\n    [4, 16, 8, 2]\n    >>> slide_left([2, 64, 32, 4])\n    [2, 64, 32, 4]\n    >>> slide_left([1024, 1024, 64, 0])\n    [2048, 64, 0, 0]\n    >>> slide_left([2, 2, 4, 8])\n    [4, 4, 8, 0]\n    >>> slide_left([4, 0, 4, 4])\n    [8, 4, 0, 0]\n    >>> slide_left([16, 16, 16, 16])\n    [32, 32, 0, 0]\n    >>> slide_left([32, 16, 16, 32])\n    [32, 32, 32, 0]\n    """\n    # slide non-zero tiles to the left by filtering out zeros\n    row = [tile for tile in row if tile] # O(n)\n    # merge tiles by multiplying by 2\n    row = [tile * 2 for i, tile in enumerate(row) if tile == row[i + 1] for i in range(len(row) - 1)] + [tile for i, tile in enumerate(row) if tile != row[i + 1] for i in range(len(row) - 1)] # O(n)\n    # pad with zeros to fill up the row\n    row += [0] * (4 - len(row))\n    return row\n\ndef rotate_90(grid):\n    """\n    >>> rotate_90([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> rotate_90([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    """\n    return [[grid[j][i] for j in range(4)] for i in range(3, -1, -1)]\n\ndef transpose(grid):\n    """\n    >>> transpose([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> transpose([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    """\n    return [[grid[j][i] for j in range(4)] for i in range(4)]\n\ndef move_left(grid):\n    return [slide_left(row) for row in grid]\n\ndef move_right(grid):\n    return move_left(rotate_90(rotate_90(grid)))\n\ndef move_up(grid):\n    return transpose(move_left(transpose(grid)))\n\ndef move_down(grid):\n    return transpose(move_right(transpose(grid)))\n\ndef play(grid, move):\n    return {\n        0: move_left,\n        1: move_up,\n        2: move_right,\n        3: move_down,\n    }[move](grid)\n\nif __name__ == \'__main__\':\n    grid = read_grid()\n    move = int(input().strip())\n    grid = play(grid, move)\n    write_grid(grid)\n', '\n\nimport sys\n\ndef read_grid():\n    return [list(map(int, input().strip().split())) for _ in range(4)]\n\ndef write_grid(grid):\n    for row in grid:\n        print(\' \'.join(map(str, row)))\n\ndef slide_left(row):\n    """\n    >>> slide_left([2, 0, 0, 2])\n    [4, 0, 0, 0]\n    >>> slide_left([4, 16, 8, 2])\n    [4, 16, 8, 2]\n    >>> slide_left([2, 64, 32, 4])\n    [2, 64, 32, 4]\n    >>> slide_left([1024, 1024, 64, 0])\n    [2048, 64, 0, 0]\n    >>> slide_left([2, 2, 4, 8])\n    [4, 4, 8, 0]\n    >>> slide_left([4, 0, 4, 4])\n    [8, 4, 0, 0]\n    >>> slide_left([16, 16, 16, 16])\n    [32, 32, 0, 0]\n    >>> slide_left([32, 16, 16, 32])\n    [32, 32, 32, 0]\n    """\n    # slide non-zero tiles to the left by filtering out zeros\n    row = [tile for tile in row if tile] # O(n)\n    # merge tiles by multiplying by 2\n    row = [tile * 2 for tile in row if tile == row[i + 1] for i in range(len(row) - 1)] + [tile for tile in row if tile != row[i + 1] for i in range(len(row) - 1)]\n    # pad with zeros to fill up the row\n    row += [0] * (4 - len(row))\n    return row\n\ndef rotate_90(grid):\n    """\n    >>> rotate_90([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> rotate_90([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    """\n    return [[grid[j][i] for j in range(4)] for i in range(3, -1, -1)]\n\ndef transpose(grid):\n    """\n    >>> transpose([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> transpose([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    """\n    return [[grid[j][i] for j in range(4)] for i in range(4)]\n\ndef move_left(grid):\n    return [slide_left(row) for row in grid]\n\ndef move_right(grid):\n    return move_left(rotate_90(rotate_90(grid)))\n\ndef move_up(grid):\n    return transpose(move_left(transpose(grid)))\n\ndef move_down(grid):\n    return transpose(move_right(transpose(grid)))\n\ndef play(grid, move):\n    return {\n        0: move_left,\n        1: move_up,\n        2: move_right,\n        3: move_down,\n    }[move](grid)\n\nif __name__ == \'__main__\':\n    grid = read_grid()\n    move = int(input().strip())\n    grid = play(grid, move)\n    write_grid(grid)\n']
2022-04-13 00:01:14.776873 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef read_grid():\n    return [list(map(int, input().strip().split())) for _ in range(4)]\n\ndef write_grid(grid):\n    for row in grid:\n        print(' '.join(map(str, row)))\n\ndef slide_left(row):\n    \"\"\"\n    >>> slide_left([2, 0, 0, 2])\n    [4, 0, 0, 0]\n    >>> slide_left([4, 16, 8, 2])\n    [4, 16, 8, 2]\n    >>> slide_left([2, 64, 32, 4])\n    [2, 64, 32, 4]\n    >>> slide_left([1024, 1024, 64, 0])\n    [2048, 64, 0, 0]\n    >>> slide_left([2, 2, 4, 8])\n    [4, 4, 8, 0]\n    >>> slide_left([4, 0, 4, 4])\n    [8, 4, 0, 0]\n    >>> slide_left([16, 16, 16, 16])\n    [32, 32, 0, 0]\n    >>> slide_left([32, 16, 16, 32])\n    [32, 32, 32, 0]\n    \"\"\"\n    # slide non-zero tiles to the left\n    row = [tile for tile in row if tile]\n    # merge tiles\n    row = [tile * 2 for tile in row if tile == row[i + 1] for i in range(len(row) - 1)] + [tile for tile in row if tile != row[i + 1] for i in range(len(row) - 1)]\n    # pad with zeros\n    row += [0] * (4 - len(row))\n    return row\n\ndef rotate_90(grid):\n    \"\"\"\n    >>> rotate_90([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> rotate_90([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    \"\"\"\n    return [[grid[j][i] for j in range(4)] for i in range(3, -1, -1)]\n\ndef transpose(grid):\n    \"\"\"\n    >>> transpose([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> transpose([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    \"\"\"\n    return [[grid[j][i] for j in range(4)] for i in range(4)]\n\ndef move_left(grid):\n    return [slide_left(row) for row in grid]\n\ndef move_right(grid):\n    return move_left(rotate_90(rotate_90(grid)))\n\ndef move_up(grid):\n    return transpose(move_left(transpose(grid)))\n\ndef move_down(grid):\n    return transpose(move_right(transpose(grid)))\n\ndef play(grid, move):\n    return {\n        0: move_left,\n        1: move_up,\n        2: move_right,\n        3: move_down,\n    }[move](grid)\n\nif __name__ == '__main__':\n    grid = read_grid()\n    move = int(input().strip())\n    grid = play(grid, move)\n    write_grid(grid)\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef read_grid():\n    return [list(map(int, input().strip().split())) for _ in range(4)]\n\ndef write_grid(grid):\n    for row in grid:\n        print(' '.join(map(str, row)))\n\ndef slide_left(row):\n    \"\"\"\n    >>> slide_left([2, 0, 0, 2])\n    [4, 0, 0, 0]\n    >>> slide_left([4, 16, 8, 2])\n    [4, 16, 8, 2]\n    >>> slide_left([2, 64, 32, 4])\n    [2, 64, 32, 4]\n    >>> slide_left([1024, 1024, 64, 0])\n    [2048, 64, 0, 0]\n    >>> slide_left([2, 2, 4, 8])\n    [4, 4, 8, 0]\n    >>> slide_left([4, 0, 4, 4])\n    [8, 4, 0, 0]\n    >>> slide_left([16, 16, 16, 16])\n    [32, 32, 0, 0]\n    >>> slide_left([32, 16, 16, 32])\n    [32, 32, 32, 0]\n    \"\"\"\n    # slide non-zero tiles to the left\n    row = [tile for tile in row if tile]\n    # merge tiles\n    row = [tile * 2 for i, tile in enumerate(row) if tile == row[i + 1] for i in range(len(row) - 1)] + [tile for i, tile in enumerate(row) if tile != row[i + 1] for i in range(len(row) - 1)] # pylint: disable=line-too-long\n    # pad with zeros\n    row += [0] * (4 - len(row))\n    return row\n\ndef rotate_90(grid):\n    \"\"\"\n    >>> rotate_90([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> rotate_90([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    \"\"\"\n    return [[grid[j][i] for j in range(4)] for i in range(3, -1, -1)]\n\ndef transpose(grid):\n    \"\"\"\n    >>> transpose([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> transpose([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    \"\"\"\n    return [[grid[j][i] for j in range(4)] for i in range(4)]\n\ndef move_left(grid):\n    return [slide_left(row) for row in grid]\n\ndef move_right(grid):\n    return move_left(rotate_90(rotate_90(grid)))\n\ndef move_up(grid):\n    return transpose(move_left(transpose(grid)))\n\ndef move_down(grid):\n    return transpose(move_right(transpose(grid)))\n\ndef play(grid, move):\n    return {\n        0: move_left,\n        1: move_up,\n        2: move_right,\n        3: move_down,\n    }[move](grid)\n\nif __name__ == '__main__':\n    grid = read_grid()\n    move = int(input().strip())\n    grid = play(grid, move)\n    write_grid(grid)\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef read_grid():\n    return [list(map(int, input().strip().split())) for _ in range(4)]\n\ndef write_grid(grid):\n    for row in grid:\n        print(' '.join(map(str, row)))\n\ndef slide_left(row):\n    \"\"\"\n    >>> slide_left([2, 0, 0, 2])\n    [4, 0, 0, 0]\n    >>> slide_left([4, 16, 8, 2])\n    [4, 16, 8, 2]\n    >>> slide_left([2, 64, 32, 4])\n    [2, 64, 32, 4]\n    >>> slide_left([1024, 1024, 64, 0])\n    [2048, 64, 0, 0]\n    >>> slide_left([2, 2, 4, 8])\n    [4, 4, 8, 0]\n    >>> slide_left([4, 0, 4, 4])\n    [8, 4, 0, 0]\n    >>> slide_left([16, 16, 16, 16])\n    [32, 32, 0, 0]\n    >>> slide_left([32, 16, 16, 32])\n    [32, 32, 32, 0]\n    \"\"\"\n    # slide non-zero tiles to the left\n    row = [tile for tile in row if tile]\n    # merge tiles\n    row = [tile * 2 for tile in row if tile == row[i + 1] for i in range(len(row) - 1)] + [tile for tile in row if tile != row[i + 1] for i in range(len(row) - 1)]\n    # pad with zeros\n    row += [0] * (4 - len(row))\n    return row\n\ndef rotate_90(grid):\n    \"\"\"\n    >>> rotate_90([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> rotate_90([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    \"\"\"\n    return [[grid[j][i] for j in range(4)] for i in range(3, -1, -1)]\n\ndef transpose(grid):\n    \"\"\"\n    >>> transpose([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> transpose([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    \"\"\"\n    return [[grid[j][i] for j in range(4)] for i in range(4)]\n\ndef move_left(grid):\n    return [slide_left(row) for row in grid]\n\ndef move_right(grid):\n    return move_left(rotate_90(rotate_90(grid)))\n\ndef move_up(grid):\n    return transpose(move_left(transpose(grid)))\n\ndef move_down(grid):\n    return transpose(move_right(transpose(grid)))\n\ndef play(grid, move):\n    return {\n        0: move_left,\n        1: move_up,\n        2: move_right,\n        3: move_down,\n    }[move](grid)\n\nif __name__ == '__main__':\n    grid = read_grid()\n    move = int(input().strip())\n    grid = play(grid, move)\n    write_grid(grid)\n"
    }
  ],
  "created": 1649808069,
  "object": "edit"
}
2022-04-13 00:01:14.777080 fix syntax errors 3 ['\n\nimport sys\n\ndef read_grid():\n    return [list(map(int, input().strip().split())) for _ in range(4)]\n\ndef write_grid(grid):\n    for row in grid:\n        print(\' \'.join(map(str, row)))\n\ndef slide_left(row):\n    """\n    >>> slide_left([2, 0, 0, 2])\n    [4, 0, 0, 0]\n    >>> slide_left([4, 16, 8, 2])\n    [4, 16, 8, 2]\n    >>> slide_left([2, 64, 32, 4])\n    [2, 64, 32, 4]\n    >>> slide_left([1024, 1024, 64, 0])\n    [2048, 64, 0, 0]\n    >>> slide_left([2, 2, 4, 8])\n    [4, 4, 8, 0]\n    >>> slide_left([4, 0, 4, 4])\n    [8, 4, 0, 0]\n    >>> slide_left([16, 16, 16, 16])\n    [32, 32, 0, 0]\n    >>> slide_left([32, 16, 16, 32])\n    [32, 32, 32, 0]\n    """\n    # slide non-zero tiles to the left\n    row = [tile for tile in row if tile]\n    # merge tiles\n    row = [tile * 2 for tile in row if tile == row[i + 1] for i in range(len(row) - 1)] + [tile for tile in row if tile != row[i + 1] for i in range(len(row) - 1)]\n    # pad with zeros\n    row += [0] * (4 - len(row))\n    return row\n\ndef rotate_90(grid):\n    """\n    >>> rotate_90([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> rotate_90([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    """\n    return [[grid[j][i] for j in range(4)] for i in range(3, -1, -1)]\n\ndef transpose(grid):\n    """\n    >>> transpose([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> transpose([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    """\n    return [[grid[j][i] for j in range(4)] for i in range(4)]\n\ndef move_left(grid):\n    return [slide_left(row) for row in grid]\n\ndef move_right(grid):\n    return move_left(rotate_90(rotate_90(grid)))\n\ndef move_up(grid):\n    return transpose(move_left(transpose(grid)))\n\ndef move_down(grid):\n    return transpose(move_right(transpose(grid)))\n\ndef play(grid, move):\n    return {\n        0: move_left,\n        1: move_up,\n        2: move_right,\n        3: move_down,\n    }[move](grid)\n\nif __name__ == \'__main__\':\n    grid = read_grid()\n    move = int(input().strip())\n    grid = play(grid, move)\n    write_grid(grid)\n', '\n\nimport sys\n\ndef read_grid():\n    return [list(map(int, input().strip().split())) for _ in range(4)]\n\ndef write_grid(grid):\n    for row in grid:\n        print(\' \'.join(map(str, row)))\n\ndef slide_left(row):\n    """\n    >>> slide_left([2, 0, 0, 2])\n    [4, 0, 0, 0]\n    >>> slide_left([4, 16, 8, 2])\n    [4, 16, 8, 2]\n    >>> slide_left([2, 64, 32, 4])\n    [2, 64, 32, 4]\n    >>> slide_left([1024, 1024, 64, 0])\n    [2048, 64, 0, 0]\n    >>> slide_left([2, 2, 4, 8])\n    [4, 4, 8, 0]\n    >>> slide_left([4, 0, 4, 4])\n    [8, 4, 0, 0]\n    >>> slide_left([16, 16, 16, 16])\n    [32, 32, 0, 0]\n    >>> slide_left([32, 16, 16, 32])\n    [32, 32, 32, 0]\n    """\n    # slide non-zero tiles to the left\n    row = [tile for tile in row if tile]\n    # merge tiles\n    row = [tile * 2 for i, tile in enumerate(row) if tile == row[i + 1] for i in range(len(row) - 1)] + [tile for i, tile in enumerate(row) if tile != row[i + 1] for i in range(len(row) - 1)] # pylint: disable=line-too-long\n    # pad with zeros\n    row += [0] * (4 - len(row))\n    return row\n\ndef rotate_90(grid):\n    """\n    >>> rotate_90([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> rotate_90([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    """\n    return [[grid[j][i] for j in range(4)] for i in range(3, -1, -1)]\n\ndef transpose(grid):\n    """\n    >>> transpose([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> transpose([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    """\n    return [[grid[j][i] for j in range(4)] for i in range(4)]\n\ndef move_left(grid):\n    return [slide_left(row) for row in grid]\n\ndef move_right(grid):\n    return move_left(rotate_90(rotate_90(grid)))\n\ndef move_up(grid):\n    return transpose(move_left(transpose(grid)))\n\ndef move_down(grid):\n    return transpose(move_right(transpose(grid)))\n\ndef play(grid, move):\n    return {\n        0: move_left,\n        1: move_up,\n        2: move_right,\n        3: move_down,\n    }[move](grid)\n\nif __name__ == \'__main__\':\n    grid = read_grid()\n    move = int(input().strip())\n    grid = play(grid, move)\n    write_grid(grid)\n', '\n\nimport sys\n\ndef read_grid():\n    return [list(map(int, input().strip().split())) for _ in range(4)]\n\ndef write_grid(grid):\n    for row in grid:\n        print(\' \'.join(map(str, row)))\n\ndef slide_left(row):\n    """\n    >>> slide_left([2, 0, 0, 2])\n    [4, 0, 0, 0]\n    >>> slide_left([4, 16, 8, 2])\n    [4, 16, 8, 2]\n    >>> slide_left([2, 64, 32, 4])\n    [2, 64, 32, 4]\n    >>> slide_left([1024, 1024, 64, 0])\n    [2048, 64, 0, 0]\n    >>> slide_left([2, 2, 4, 8])\n    [4, 4, 8, 0]\n    >>> slide_left([4, 0, 4, 4])\n    [8, 4, 0, 0]\n    >>> slide_left([16, 16, 16, 16])\n    [32, 32, 0, 0]\n    >>> slide_left([32, 16, 16, 32])\n    [32, 32, 32, 0]\n    """\n    # slide non-zero tiles to the left\n    row = [tile for tile in row if tile]\n    # merge tiles\n    row = [tile * 2 for tile in row if tile == row[i + 1] for i in range(len(row) - 1)] + [tile for tile in row if tile != row[i + 1] for i in range(len(row) - 1)]\n    # pad with zeros\n    row += [0] * (4 - len(row))\n    return row\n\ndef rotate_90(grid):\n    """\n    >>> rotate_90([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> rotate_90([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    """\n    return [[grid[j][i] for j in range(4)] for i in range(3, -1, -1)]\n\ndef transpose(grid):\n    """\n    >>> transpose([[2, 0, 0, 2], [4, 16, 8, 2], [2, 64, 32, 4], [1024, 1024, 64, 0]])\n    [[2, 4, 2, 1024], [0, 16, 64, 1024], [0, 8, 32, 64], [2, 2, 4, 0]]\n    >>> transpose([[2, 2, 4, 8], [4, 0, 4, 4], [16, 16, 16, 16], [32, 16, 16, 32]])\n    [[2, 4, 16, 32], [2, 0, 16, 16], [4, 4, 16, 16], [8, 4, 16, 32]]\n    """\n    return [[grid[j][i] for j in range(4)] for i in range(4)]\n\ndef move_left(grid):\n    return [slide_left(row) for row in grid]\n\ndef move_right(grid):\n    return move_left(rotate_90(rotate_90(grid)))\n\ndef move_up(grid):\n    return transpose(move_left(transpose(grid)))\n\ndef move_down(grid):\n    return transpose(move_right(transpose(grid)))\n\ndef play(grid, move):\n    return {\n        0: move_left,\n        1: move_up,\n        2: move_right,\n        3: move_down,\n    }[move](grid)\n\nif __name__ == \'__main__\':\n    grid = read_grid()\n    move = int(input().strip())\n    grid = play(grid, move)\n    write_grid(grid)\n']
2022-04-13 00:01:14.777253 size on output set 7
2022-04-13 00:01:14.777269 num operations 2
2022-04-13 00:01:14.777274 size on input set 1
2022-04-13 00:01:25.384938 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport copy\n\ndef array_rotate(arr):\n    return [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0])-1,-1,-1)]\n\ndef array_transpose(arr):\n    return [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0]))]\n\ndef move_left(data):\n    \"\"\"\n    1. Remove all zeros\n    2. Merge all pairs\n    3. Remove all zeros\n    4. Fill remaining with zeros\n    \"\"\"\n    for i in range(4):\n        data[i] = [x for x in data[i] if x]\n        for j in range(3):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4-len(data[i]))\n    return data\n\ndef move_right(data):\n    \"\"\"\n    1. Reverse all rows\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Reverse all rows\n    \"\"\"\n    for i in range(4):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(3):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4-len(data[i]))\n        data[i] = data[i][::-1]\n    return data\n\ndef move_up(data):\n    \"\"\"\n    1. Transpose\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Transpose\n    \"\"\"\n    data = array_transpose(data)\n    for i in range(4):\n        data[i] = [x for x in data[i] if x]\n        for j in range(3):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4-len(data[i]))\n    data = array_transpose(data)\n    return data\n\ndef move_down(data):\n    \"\"\"\n    1. Transpose\n    2. Reverse all rows\n    3. Remove all zeros\n    4. Merge all pairs\n    5. Remove all zeros\n    6. Fill remaining with zeros\n    7. Reverse all rows\n    8. Transpose\n    \"\"\"\n    data = array_transpose(data)\n    for i in range(4):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(3):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4-len(data[i]))\n        data[i] = data[i][::-1]\n    data = array_transpose(data)\n    return data\n\ndef main():\n    data = []\n    for _ in range(4):\n        data.append([int(x) for x in input().split()])\n    direction = int(input())\n    if direction == 0:\n        data = move_left(copy.deepcopy(data))\n    elif direction == 1:\n        data = move_up(copy.deepcopy(data))\n    elif direction == 2:\n        data = move_right(copy.deepcopy(data))\n    elif direction == 3:\n        data = move_down(copy.deepcopy(data))\n    for row in data:\n        print(*row)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport copy\n\ndef array_transpose(arr):\n    return [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0]))]\n\ndef move_left(data):\n    \"\"\"\n    1. Remove all zeros\n    2. Merge all pairs\n    3. Remove all zeros\n    4. Fill remaining with zeros\n    \"\"\"\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    return data\n\ndef move_right(data):\n    \"\"\"\n    1. Reverse all rows\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Reverse all rows\n    \"\"\"\n    for i in range(len(data)):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    return data\n\ndef move_up(data):\n    \"\"\"\n    1. Transpose\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Transpose\n    \"\"\"\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    data = array_transpose(data)\n    return data\n\ndef move_down(data):\n    \"\"\"\n    1. Transpose\n    2. Reverse all rows\n    3. Remove all zeros\n    4. Merge all pairs\n    5. Remove all zeros\n    6. Fill remaining with zeros\n    7. Reverse all rows\n    8. Transpose\n    \"\"\"\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    data = array_transpose(data)\n    return data\n\ndef main():\n    data = []\n    for _ in range(4):\n        data.append([int(x) for x in input().split()])\n    direction = int(input())\n    if direction == 0:\n        data = move_left(copy.deepcopy(data))\n    elif direction == 1:\n        data = move_up(copy.deepcopy(data))\n    elif direction == 2:\n        data = move_right(copy.deepcopy(data))\n    elif direction == 3:\n        data = move_down(copy.deepcopy(data))\n    for row in data:\n        print(*row)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport copy\n\ndef array_rotate(arr):\n    return [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0])-1,-1,-1)]\n\ndef array_transpose(arr):\n    return [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0]))]\n\ndef move_left(data):\n    \"\"\"\n    1. Remove all zeros\n    2. Merge all pairs\n    3. Remove all zeros\n    4. Fill remaining with zeros\n    \"\"\"\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    return data\n\ndef move_right(data):\n    \"\"\"\n    1. Reverse all rows\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Reverse all rows\n    \"\"\"\n    for i in range(len(data)):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    return data\n\ndef move_up(data):\n    \"\"\"\n    1. Transpose the array\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Transpose\n    \"\"\"\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    data = array_transpose(data)\n    return data\n\ndef move_down(data):\n    \"\"\"\n    1. Transpose\n    2. Reverse all rows\n    3. Remove all zeros\n    4. Merge all pairs\n    5. Remove all zeros\n    6. Fill remaining with zeros\n    7. Reverse all rows\n    8. Transpose\n    \"\"\"\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    data = array_transpose(data)\n    return data\n\ndef main():\n    data = []\n    for _ in range(4):\n        data.append([int(x) for x in input().split()])\n    direction = int(input())\n    if direction == 0:\n        data = move_left(copy.deepcopy(data))\n    elif direction == 1:\n        data = move_up(copy.deepcopy(data))\n    elif direction == 2:\n        data = move_right(copy.deepcopy(data))\n    elif direction == 3:\n        data = move_down(copy.deepcopy(data))\n    for row in data:\n        print(*row)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649808074,
  "object": "edit"
}
2022-04-13 00:01:25.385227 fix spelling mistakes 3 ['\n\nimport copy\n\ndef array_rotate(arr):\n    return [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0])-1,-1,-1)]\n\ndef array_transpose(arr):\n    return [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0]))]\n\ndef move_left(data):\n    """\n    1. Remove all zeros\n    2. Merge all pairs\n    3. Remove all zeros\n    4. Fill remaining with zeros\n    """\n    for i in range(4):\n        data[i] = [x for x in data[i] if x]\n        for j in range(3):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4-len(data[i]))\n    return data\n\ndef move_right(data):\n    """\n    1. Reverse all rows\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Reverse all rows\n    """\n    for i in range(4):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(3):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4-len(data[i]))\n        data[i] = data[i][::-1]\n    return data\n\ndef move_up(data):\n    """\n    1. Transpose\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Transpose\n    """\n    data = array_transpose(data)\n    for i in range(4):\n        data[i] = [x for x in data[i] if x]\n        for j in range(3):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4-len(data[i]))\n    data = array_transpose(data)\n    return data\n\ndef move_down(data):\n    """\n    1. Transpose\n    2. Reverse all rows\n    3. Remove all zeros\n    4. Merge all pairs\n    5. Remove all zeros\n    6. Fill remaining with zeros\n    7. Reverse all rows\n    8. Transpose\n    """\n    data = array_transpose(data)\n    for i in range(4):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(3):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4-len(data[i]))\n        data[i] = data[i][::-1]\n    data = array_transpose(data)\n    return data\n\ndef main():\n    data = []\n    for _ in range(4):\n        data.append([int(x) for x in input().split()])\n    direction = int(input())\n    if direction == 0:\n        data = move_left(copy.deepcopy(data))\n    elif direction == 1:\n        data = move_up(copy.deepcopy(data))\n    elif direction == 2:\n        data = move_right(copy.deepcopy(data))\n    elif direction == 3:\n        data = move_down(copy.deepcopy(data))\n    for row in data:\n        print(*row)\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport copy\n\ndef array_transpose(arr):\n    return [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0]))]\n\ndef move_left(data):\n    """\n    1. Remove all zeros\n    2. Merge all pairs\n    3. Remove all zeros\n    4. Fill remaining with zeros\n    """\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    return data\n\ndef move_right(data):\n    """\n    1. Reverse all rows\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Reverse all rows\n    """\n    for i in range(len(data)):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    return data\n\ndef move_up(data):\n    """\n    1. Transpose\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Transpose\n    """\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    data = array_transpose(data)\n    return data\n\ndef move_down(data):\n    """\n    1. Transpose\n    2. Reverse all rows\n    3. Remove all zeros\n    4. Merge all pairs\n    5. Remove all zeros\n    6. Fill remaining with zeros\n    7. Reverse all rows\n    8. Transpose\n    """\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    data = array_transpose(data)\n    return data\n\ndef main():\n    data = []\n    for _ in range(4):\n        data.append([int(x) for x in input().split()])\n    direction = int(input())\n    if direction == 0:\n        data = move_left(copy.deepcopy(data))\n    elif direction == 1:\n        data = move_up(copy.deepcopy(data))\n    elif direction == 2:\n        data = move_right(copy.deepcopy(data))\n    elif direction == 3:\n        data = move_down(copy.deepcopy(data))\n    for row in data:\n        print(*row)\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport copy\n\ndef array_rotate(arr):\n    return [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0])-1,-1,-1)]\n\ndef array_transpose(arr):\n    return [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0]))]\n\ndef move_left(data):\n    """\n    1. Remove all zeros\n    2. Merge all pairs\n    3. Remove all zeros\n    4. Fill remaining with zeros\n    """\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    return data\n\ndef move_right(data):\n    """\n    1. Reverse all rows\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Reverse all rows\n    """\n    for i in range(len(data)):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    return data\n\ndef move_up(data):\n    """\n    1. Transpose the array\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Transpose\n    """\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    data = array_transpose(data)\n    return data\n\ndef move_down(data):\n    """\n    1. Transpose\n    2. Reverse all rows\n    3. Remove all zeros\n    4. Merge all pairs\n    5. Remove all zeros\n    6. Fill remaining with zeros\n    7. Reverse all rows\n    8. Transpose\n    """\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    data = array_transpose(data)\n    return data\n\ndef main():\n    data = []\n    for _ in range(4):\n        data.append([int(x) for x in input().split()])\n    direction = int(input())\n    if direction == 0:\n        data = move_left(copy.deepcopy(data))\n    elif direction == 1:\n        data = move_up(copy.deepcopy(data))\n    elif direction == 2:\n        data = move_right(copy.deepcopy(data))\n    elif direction == 3:\n        data = move_down(copy.deepcopy(data))\n    for row in data:\n        print(*row)\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 00:01:25.385342 size on output set 3
2022-04-13 00:01:25.385349 size on input set 3
2022-04-13 00:01:42.469654 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport copy\n\ndef array_transpose(arr):\n    return [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0]))]\n\ndef move_left(data):\n    \"\"\"\n    1. Remove all zeros\n    2. Merge all pairs\n    3. Remove all zeros\n    4. Fill remaining with zeros\n    \"\"\"\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    return data\n\ndef move_right(data):\n    \"\"\"\n    1. Reverse all rows\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Reverse all rows\n    \"\"\"\n    for i in range(len(data)):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    return data\n\ndef move_up(data):\n    \"\"\"\n    1. Transpose\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Transpose\n    \"\"\"\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    data = array_transpose(data)\n    return data\n\ndef move_down(data):\n    \"\"\"\n    1. Transpose\n    2. Reverse all rows\n    3. Remove all zeros\n    4. Merge all pairs\n    5. Remove all zeros\n    6. Fill remaining with zeros\n    7. Reverse all rows\n    8. Transpose\n    \"\"\"\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    data = array_transpose(data)\n    return data\n\ndef main():\n    data = []\n    for _ in range(4):\n        data.append([int(x) for x in input().split()])\n    direction = int(input())\n    if direction == 0:\n        data = move_left(copy.deepcopy(data))\n    elif direction == 1:\n        data = move_up(copy.deepcopy(data))\n    elif direction == 2:\n        data = move_right(copy.deepcopy(data))\n    elif direction == 3:\n        data = move_down(copy.deepcopy(data))\n    for row in data:\n        print(*row)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport copy\n\ndef array_transpose(arr):\n    return [[arr[j][i] for j in range(len(arr))]\n            for i in range(len(arr[0]))]\n\ndef move_left(data):\n    \"\"\"\n    1. Remove all zeros\n    2. Merge all pairs\n    3. Remove all zeros\n    4. Fill remaining with zeros\n    \"\"\"\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    return data\n\ndef move_right(data):\n    \"\"\"\n    1. Reverse all rows\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Reverse all rows\n    \"\"\"\n    for i in range(len(data)):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    return data\n\ndef move_up(data):\n    \"\"\"\n    1. Transpose\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Transpose\n    \"\"\"\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    data = array_transpose(data)\n    return data\n\ndef move_down(data):\n    \"\"\"\n    1. Transpose\n    2. Reverse all rows\n    3. Remove all zeros\n    4. Merge all pairs\n    5. Remove all zeros\n    6. Fill remaining with zeros\n    7. Reverse all rows\n    8. Transpose\n    \"\"\"\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    data = array_transpose(data)\n    return data\n\ndef main():\n    data = []\n    for _ in range(4):\n        data.append([int(x) for x in input().split()])\n    direction = int(input())\n    if direction == 0:\n        data = move_left(copy.deepcopy(data))\n    elif direction == 1:\n        data = move_up(copy.deepcopy(data))\n    elif direction == 2:\n        data = move_right(copy.deepcopy(data))\n    elif direction == 3:\n        data = move_down(copy.deepcopy(data))\n    for row in data:\n        print(*row)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "error": {
        "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
        "type": "invalid_edit"
      },
      "index": 2
    }
  ],
  "created": 1649808085,
  "object": "edit"
}
2022-04-13 00:01:42.469896 NO RESULT
2022-04-13 00:01:42.469906 {
  "error": {
    "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
    "type": "invalid_edit"
  },
  "index": 2
}
2022-04-13 00:01:42.469944 fix syntax errors 2 ['\nimport copy\n\ndef array_transpose(arr):\n    return [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0]))]\n\ndef move_left(data):\n    """\n    1. Remove all zeros\n    2. Merge all pairs\n    3. Remove all zeros\n    4. Fill remaining with zeros\n    """\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    return data\n\ndef move_right(data):\n    """\n    1. Reverse all rows\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Reverse all rows\n    """\n    for i in range(len(data)):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    return data\n\ndef move_up(data):\n    """\n    1. Transpose\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Transpose\n    """\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    data = array_transpose(data)\n    return data\n\ndef move_down(data):\n    """\n    1. Transpose\n    2. Reverse all rows\n    3. Remove all zeros\n    4. Merge all pairs\n    5. Remove all zeros\n    6. Fill remaining with zeros\n    7. Reverse all rows\n    8. Transpose\n    """\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    data = array_transpose(data)\n    return data\n\ndef main():\n    data = []\n    for _ in range(4):\n        data.append([int(x) for x in input().split()])\n    direction = int(input())\n    if direction == 0:\n        data = move_left(copy.deepcopy(data))\n    elif direction == 1:\n        data = move_up(copy.deepcopy(data))\n    elif direction == 2:\n        data = move_right(copy.deepcopy(data))\n    elif direction == 3:\n        data = move_down(copy.deepcopy(data))\n    for row in data:\n        print(*row)\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport copy\n\ndef array_transpose(arr):\n    return [[arr[j][i] for j in range(len(arr))]\n            for i in range(len(arr[0]))]\n\ndef move_left(data):\n    """\n    1. Remove all zeros\n    2. Merge all pairs\n    3. Remove all zeros\n    4. Fill remaining with zeros\n    """\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    return data\n\ndef move_right(data):\n    """\n    1. Reverse all rows\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Reverse all rows\n    """\n    for i in range(len(data)):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    return data\n\ndef move_up(data):\n    """\n    1. Transpose\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Transpose\n    """\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    data = array_transpose(data)\n    return data\n\ndef move_down(data):\n    """\n    1. Transpose\n    2. Reverse all rows\n    3. Remove all zeros\n    4. Merge all pairs\n    5. Remove all zeros\n    6. Fill remaining with zeros\n    7. Reverse all rows\n    8. Transpose\n    """\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    data = array_transpose(data)\n    return data\n\ndef main():\n    data = []\n    for _ in range(4):\n        data.append([int(x) for x in input().split()])\n    direction = int(input())\n    if direction == 0:\n        data = move_left(copy.deepcopy(data))\n    elif direction == 1:\n        data = move_up(copy.deepcopy(data))\n    elif direction == 2:\n        data = move_right(copy.deepcopy(data))\n    elif direction == 3:\n        data = move_down(copy.deepcopy(data))\n    for row in data:\n        print(*row)\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 00:02:02.815126 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    data = []\n    for _ in range(4):\n        data.append([int(x) for x in input().split()])\n    direction = int(input())\n    if direction == 0:\n        data = move_left(copy.deepcopy(data))\n    elif direction == 1:\n        data = move_up(copy.deepcopy(data))\n    elif direction == 2:\n        data = move_right(copy.deepcopy(data))\n    elif direction == 3:\n        data = move_down(copy.deepcopy(data))\n    for row in data:\n        print(*row)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport copy\n\ndef array_transpose(arr):\n    return [list(x) for x in zip(*arr)]\n\ndef move_left(data):\n    \"\"\"\n    1. Remove all zeros\n    2. Merge all pairs\n    3. Remove all zeros\n    4. Fill remaining with zeros\n    \"\"\"\n    for i in range(4):\n        data[i] = [x for x in data[i] if x]\n        for j in range(3):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4-len(data[i]))\n    return data\n\ndef move_right(data):\n    \"\"\"\n    1. Reverse all rows\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Reverse all rows\n    \"\"\"\n    for i in range(4):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(3):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4-len(data[i]))\n        data[i] = data[i][::-1]\n    return data\n\ndef move_up(data):\n    \"\"\"\n    1. Transpose\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Transpose\n    \"\"\"\n    data = array_transpose(data)\n    for i in range(4):\n        data[i] = [x for x in data[i] if x]\n        for j in range(3):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4-len(data[i]))\n    data = array_transpose(data)\n    return data\n\ndef move_down(data):\n    \"\"\"\n    1. Transpose\n    2. Reverse all rows\n    3. Remove all zeros\n    4. Merge all pairs\n    5. Remove all zeros\n    6. Fill remaining with zeros\n    7. Reverse all rows\n    8. Transpose\n    \"\"\"\n    data = array_transpose(data)\n    for i in range(4):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(3):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4-len(data[i]))\n        data[i] = data[i][::-1]\n    data = array_transpose(data)\n    return data\n\ndef main():\n    data = []\n    for _ in range(4):\n        data.append([int(x) for x in input().split()])\n    direction = int(input())\n    if direction == 0:\n        data = move_left(copy.deepcopy(data))\n    elif direction == 1:\n        data = move_up(copy.deepcopy(data))\n    elif direction == 2:\n        data = move_right(copy.deepcopy(data))\n    elif direction == 3:\n        data = move_down(copy.deepcopy(data))\n    for row in data:\n        print(*row)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\n\nimport copy\n\nimport copy\n\ndef array_rotate(arr):\n    return [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0])-1,-1,-1)]\n\ndef array_transpose(arr):\n    return [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0]))]\n\ndef move_left(data):\n    \"\"\"\n    1. Remove all zeros\n    2. Merge all pairs\n    3. Remove all zeros\n    4. Fill remaining with zeros\n    \"\"\"\n    for i in range(4):\n        data[i] = [x for x in data[i] if x]\n        for j in range(3):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4-len(data[i]))\n    return data\n\ndef move_right(data):\n    \"\"\"\n    1. Reverse all rows\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Reverse all rows\n    \"\"\"\n    for i in range(4):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(3):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4-len(data[i]))\n        data[i] = data[i][::-1]\n    return data\n\ndef move_up(data):\n    \"\"\"\n    1. Transpose\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Transpose\n    \"\"\"\n    data = array_transpose(data)\n    for i in range(4):\n        data[i] = [x for x in data[i] if x]\n        for j in range(3):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4-len(data[i]))\n    data = array_transpose(data)\n    return data\n\ndef move_down(data):\n    \"\"\"\n    1. Transpose\n    2. Reverse all rows\n    3. Remove all zeros\n    4. Merge all pairs\n    5. Remove all zeros\n    6. Fill remaining with zeros\n    7. Reverse all rows\n    8. Transpose\n    \"\"\"\n    data = array_transpose(data)\n    for i in range(4):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(3):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4-len(data[i]))\n        data[i] = data[i][::-1]\n    data = array_transpose(data)\n    return data\n\ndef main():\n    data = []\n    for _ in range(4):\n        data.append([int(x) for x in input().split()])\n    direction = int(input())\n    if direction == 0:\n        data = move_left(copy.deepcopy(data))\n    elif direction == 1:\n        data = move_up(copy.deepcopy(data))\n    elif direction == 2:\n        data = move_right(copy.deepcopy(data))\n    elif direction == 3:\n        data = move_down(copy.deepcopy(data))\n    for row in data:\n        print(*row)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649808102,
  "object": "edit"
}
2022-04-13 00:02:02.815372 fix syntax errors 3 ["\n\ndef main():\n    data = []\n    for _ in range(4):\n        data.append([int(x) for x in input().split()])\n    direction = int(input())\n    if direction == 0:\n        data = move_left(copy.deepcopy(data))\n    elif direction == 1:\n        data = move_up(copy.deepcopy(data))\n    elif direction == 2:\n        data = move_right(copy.deepcopy(data))\n    elif direction == 3:\n        data = move_down(copy.deepcopy(data))\n    for row in data:\n        print(*row)\n\nif __name__ == '__main__':\n    main()\n", '\n\nimport copy\n\ndef array_transpose(arr):\n    return [list(x) for x in zip(*arr)]\n\ndef move_left(data):\n    """\n    1. Remove all zeros\n    2. Merge all pairs\n    3. Remove all zeros\n    4. Fill remaining with zeros\n    """\n    for i in range(4):\n        data[i] = [x for x in data[i] if x]\n        for j in range(3):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4-len(data[i]))\n    return data\n\ndef move_right(data):\n    """\n    1. Reverse all rows\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Reverse all rows\n    """\n    for i in range(4):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(3):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4-len(data[i]))\n        data[i] = data[i][::-1]\n    return data\n\ndef move_up(data):\n    """\n    1. Transpose\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Transpose\n    """\n    data = array_transpose(data)\n    for i in range(4):\n        data[i] = [x for x in data[i] if x]\n        for j in range(3):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4-len(data[i]))\n    data = array_transpose(data)\n    return data\n\ndef move_down(data):\n    """\n    1. Transpose\n    2. Reverse all rows\n    3. Remove all zeros\n    4. Merge all pairs\n    5. Remove all zeros\n    6. Fill remaining with zeros\n    7. Reverse all rows\n    8. Transpose\n    """\n    data = array_transpose(data)\n    for i in range(4):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(3):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4-len(data[i]))\n        data[i] = data[i][::-1]\n    data = array_transpose(data)\n    return data\n\ndef main():\n    data = []\n    for _ in range(4):\n        data.append([int(x) for x in input().split()])\n    direction = int(input())\n    if direction == 0:\n        data = move_left(copy.deepcopy(data))\n    elif direction == 1:\n        data = move_up(copy.deepcopy(data))\n    elif direction == 2:\n        data = move_right(copy.deepcopy(data))\n    elif direction == 3:\n        data = move_down(copy.deepcopy(data))\n    for row in data:\n        print(*row)\n\nif __name__ == \'__main__\':\n    main()\n', '\n\n\nimport copy\n\nimport copy\n\ndef array_rotate(arr):\n    return [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0])-1,-1,-1)]\n\ndef array_transpose(arr):\n    return [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0]))]\n\ndef move_left(data):\n    """\n    1. Remove all zeros\n    2. Merge all pairs\n    3. Remove all zeros\n    4. Fill remaining with zeros\n    """\n    for i in range(4):\n        data[i] = [x for x in data[i] if x]\n        for j in range(3):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4-len(data[i]))\n    return data\n\ndef move_right(data):\n    """\n    1. Reverse all rows\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Reverse all rows\n    """\n    for i in range(4):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(3):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4-len(data[i]))\n        data[i] = data[i][::-1]\n    return data\n\ndef move_up(data):\n    """\n    1. Transpose\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Transpose\n    """\n    data = array_transpose(data)\n    for i in range(4):\n        data[i] = [x for x in data[i] if x]\n        for j in range(3):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4-len(data[i]))\n    data = array_transpose(data)\n    return data\n\ndef move_down(data):\n    """\n    1. Transpose\n    2. Reverse all rows\n    3. Remove all zeros\n    4. Merge all pairs\n    5. Remove all zeros\n    6. Fill remaining with zeros\n    7. Reverse all rows\n    8. Transpose\n    """\n    data = array_transpose(data)\n    for i in range(4):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(3):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4-len(data[i]))\n        data[i] = data[i][::-1]\n    data = array_transpose(data)\n    return data\n\ndef main():\n    data = []\n    for _ in range(4):\n        data.append([int(x) for x in input().split()])\n    direction = int(input())\n    if direction == 0:\n        data = move_left(copy.deepcopy(data))\n    elif direction == 1:\n        data = move_up(copy.deepcopy(data))\n    elif direction == 2:\n        data = move_right(copy.deepcopy(data))\n    elif direction == 3:\n        data = move_down(copy.deepcopy(data))\n    for row in data:\n        print(*row)\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 00:02:14.543273 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport copy\n\ndef array_rotate(arr):\n    return [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0])-1, -1, -1)]\n\ndef array_transpose(arr):\n    return [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0]))]\n\ndef move_left(data):\n    \"\"\"\n    1. Remove all zeros\n    2. Merge all pairs\n    3. Remove all zeros\n    4. Fill remaining with zeros\n    \"\"\"\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    return data\n\ndef move_right(data):\n    \"\"\"\n    1. Reverse all rows\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Reverse all rows\n    \"\"\"\n    for i in range(len(data)):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    return data\n\ndef move_up(data):\n    \"\"\"\n    1. Transpose the array\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Transpose\n    \"\"\"\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    data = array_transpose(data)\n    return data\n\ndef move_down(data):\n    \"\"\"\n    1. Transpose\n    2. Reverse all rows\n    3. Remove all zeros\n    4. Merge all pairs\n    5. Remove all zeros\n    6. Fill remaining with zeros\n    7. Reverse all rows\n    8. Transpose\n    \"\"\"\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    data = array_transpose(data)\n    return data\n\ndef main():\n    data = []\n    for _ in range(4):\n        data.append([int(x) for x in input().split()])\n    direction = int(input())\n    if direction == 0:\n        data = move_left(copy.deepcopy(data))\n    elif direction == 1:\n        data = move_up(copy.deepcopy(data))\n    elif direction == 2:\n        data = move_right(copy.deepcopy(data))\n    elif direction == 3:\n        data = move_down(copy.deepcopy(data))\n    for row in data:\n        print(*row)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport copy\n\ndef array_rotate(arr):\n    return [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0]) - 1, -1, -1)]\n\ndef array_transpose(arr):\n    return [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0]))]\n\ndef move_left(data):\n    \"\"\"\n    1. Remove all zeros\n    2. Merge all pairs\n    3. Remove all zeros\n    4. Fill remaining with zeros\n    \"\"\"\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i]) - 1):\n            if data[i][j] == data[i][j + 1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j + 1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    return data\n\ndef move_right(data):\n    \"\"\"\n    1. Reverse all rows\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Reverse all rows\n    \"\"\"\n    for i in range(len(data)):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i]) - 1):\n            if data[i][j] == data[i][j + 1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j + 1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    return data\n\ndef move_up(data):\n    \"\"\"\n    1. Transpose the array\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Transpose\n    \"\"\"\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i]) - 1):\n            if data[i][j] == data[i][j + 1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j + 1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    data = array_transpose(data)\n    return data\n\ndef move_down(data):\n    \"\"\"\n    1. Transpose\n    2. Reverse all rows\n    3. Remove all zeros\n    4. Merge all pairs\n    5. Remove all zeros\n    6. Fill remaining with zeros\n    7. Reverse all rows\n    8. Transpose\n    \"\"\"\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i]) - 1):\n            if data[i][j] == data[i][j + 1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j + 1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    data = array_transpose(data)\n    return data\n\ndef main():\n    data = []\n    for _ in range(4):\n        data.append([int(x) for x in input().split()])\n    direction = int(input())\n    if direction == 0:\n        data = move_left(copy.deepcopy(data))\n    elif direction == 1:\n        data = move_up(copy.deepcopy(data))\n    elif direction == 2:\n        data = move_right(copy.deepcopy(data))\n    elif direction == 3:\n        data = move_down(copy.deepcopy(data))\n    for row in data:\n        print(*row)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport copy\n\ndef array_rotate(arr):\n    return [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0])-1,-1,-1)]\n\ndef array_transpose(arr):\n    return [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0]))]\n\ndef move_left(data):\n    \"\"\"\n    1. Remove all zeros\n    2. Merge all pairs\n    3. Remove all zeros\n    4. Fill remaining with zeros\n    \"\"\"\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    return data\n\ndef move_right(data):\n    \"\"\"\n    1. Reverse all rows\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Reverse all rows\n    \"\"\"\n    for i in range(len(data)):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    return data\n\ndef move_up(data):\n    \"\"\"\n    1. Transpose the array\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Transpose\n    \"\"\"\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    data = array_transpose(data)\n    return data\n\ndef move_down(data):\n    \"\"\"\n    1. Transpose\n    2. Reverse all rows\n    3. Remove all zeros\n    4. Merge all pairs\n    5. Remove all zeros\n    6. Fill remaining with zeros\n    7. Reverse all rows\n    8. Transpose\n    \"\"\"\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    data = array_transpose(data)\n    return data\n\ndef main():\n    data = []\n    for _ in range(4):\n        data.append([int(x) for x in input().split()])\n    direction = int(input())\n    if direction == 0:\n        data = move_left(copy.deepcopy(data))\n    elif direction == 1:\n        data = move_up(copy.deepcopy(data))\n    elif direction == 2:\n        data = move_right(copy.deepcopy(data))\n    elif direction == 3:\n        data = move_down(copy.deepcopy(data))\n    for row in data:\n        print(*row)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649808122,
  "object": "edit"
}
2022-04-13 00:02:14.543564 fix syntax errors 3 ['\n\nimport copy\n\ndef array_rotate(arr):\n    return [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0])-1, -1, -1)]\n\ndef array_transpose(arr):\n    return [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0]))]\n\ndef move_left(data):\n    """\n    1. Remove all zeros\n    2. Merge all pairs\n    3. Remove all zeros\n    4. Fill remaining with zeros\n    """\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    return data\n\ndef move_right(data):\n    """\n    1. Reverse all rows\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Reverse all rows\n    """\n    for i in range(len(data)):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    return data\n\ndef move_up(data):\n    """\n    1. Transpose the array\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Transpose\n    """\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    data = array_transpose(data)\n    return data\n\ndef move_down(data):\n    """\n    1. Transpose\n    2. Reverse all rows\n    3. Remove all zeros\n    4. Merge all pairs\n    5. Remove all zeros\n    6. Fill remaining with zeros\n    7. Reverse all rows\n    8. Transpose\n    """\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    data = array_transpose(data)\n    return data\n\ndef main():\n    data = []\n    for _ in range(4):\n        data.append([int(x) for x in input().split()])\n    direction = int(input())\n    if direction == 0:\n        data = move_left(copy.deepcopy(data))\n    elif direction == 1:\n        data = move_up(copy.deepcopy(data))\n    elif direction == 2:\n        data = move_right(copy.deepcopy(data))\n    elif direction == 3:\n        data = move_down(copy.deepcopy(data))\n    for row in data:\n        print(*row)\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport copy\n\ndef array_rotate(arr):\n    return [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0]) - 1, -1, -1)]\n\ndef array_transpose(arr):\n    return [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0]))]\n\ndef move_left(data):\n    """\n    1. Remove all zeros\n    2. Merge all pairs\n    3. Remove all zeros\n    4. Fill remaining with zeros\n    """\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i]) - 1):\n            if data[i][j] == data[i][j + 1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j + 1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    return data\n\ndef move_right(data):\n    """\n    1. Reverse all rows\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Reverse all rows\n    """\n    for i in range(len(data)):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i]) - 1):\n            if data[i][j] == data[i][j + 1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j + 1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    return data\n\ndef move_up(data):\n    """\n    1. Transpose the array\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Transpose\n    """\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i]) - 1):\n            if data[i][j] == data[i][j + 1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j + 1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    data = array_transpose(data)\n    return data\n\ndef move_down(data):\n    """\n    1. Transpose\n    2. Reverse all rows\n    3. Remove all zeros\n    4. Merge all pairs\n    5. Remove all zeros\n    6. Fill remaining with zeros\n    7. Reverse all rows\n    8. Transpose\n    """\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i]) - 1):\n            if data[i][j] == data[i][j + 1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j + 1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    data = array_transpose(data)\n    return data\n\ndef main():\n    data = []\n    for _ in range(4):\n        data.append([int(x) for x in input().split()])\n    direction = int(input())\n    if direction == 0:\n        data = move_left(copy.deepcopy(data))\n    elif direction == 1:\n        data = move_up(copy.deepcopy(data))\n    elif direction == 2:\n        data = move_right(copy.deepcopy(data))\n    elif direction == 3:\n        data = move_down(copy.deepcopy(data))\n    for row in data:\n        print(*row)\n\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport copy\n\ndef array_rotate(arr):\n    return [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0])-1,-1,-1)]\n\ndef array_transpose(arr):\n    return [[arr[j][i] for j in range(len(arr))] for i in range(len(arr[0]))]\n\ndef move_left(data):\n    """\n    1. Remove all zeros\n    2. Merge all pairs\n    3. Remove all zeros\n    4. Fill remaining with zeros\n    """\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    return data\n\ndef move_right(data):\n    """\n    1. Reverse all rows\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Reverse all rows\n    """\n    for i in range(len(data)):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    return data\n\ndef move_up(data):\n    """\n    1. Transpose the array\n    2. Remove all zeros\n    3. Merge all pairs\n    4. Remove all zeros\n    5. Fill remaining with zeros\n    6. Transpose\n    """\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n    data = array_transpose(data)\n    return data\n\ndef move_down(data):\n    """\n    1. Transpose\n    2. Reverse all rows\n    3. Remove all zeros\n    4. Merge all pairs\n    5. Remove all zeros\n    6. Fill remaining with zeros\n    7. Reverse all rows\n    8. Transpose\n    """\n    data = array_transpose(data)\n    for i in range(len(data)):\n        data[i] = data[i][::-1]\n        data[i] = [x for x in data[i] if x]\n        for j in range(len(data[i])-1):\n            if data[i][j] == data[i][j+1]:\n                data[i][j] = data[i][j] * 2\n                data[i][j+1] = 0\n        data[i] = [x for x in data[i] if x]\n        data[i] += [0] * (4 - len(data[i]))\n        data[i] = data[i][::-1]\n    data = array_transpose(data)\n    return data\n\ndef main():\n    data = []\n    for _ in range(4):\n        data.append([int(x) for x in input().split()])\n    direction = int(input())\n    if direction == 0:\n        data = move_left(copy.deepcopy(data))\n    elif direction == 1:\n        data = move_up(copy.deepcopy(data))\n    elif direction == 2:\n        data = move_right(copy.deepcopy(data))\n    elif direction == 3:\n        data = move_down(copy.deepcopy(data))\n    for row in data:\n        print(*row)\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 00:02:14.543682 size on output set 8
2022-04-13 00:02:14.543698 num operations 2
2022-04-13 00:02:14.543703 size on input set 1
2022-04-13 00:02:29.749501 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# from collections import deque\n#\n#\n# def merge(x):\n#     x = deque(x)\n#     while True:\n#         if not x:\n#             break\n#         if x[0] == 0:\n#             x.popleft()\n#         else:\n#             break\n#     while True:\n#         if not x:\n#             break\n#         if x[-1] == 0:\n#             x.pop()\n#         else:\n#             break\n#     if not x:\n#         return x\n#     i = 0\n#     while i < len(x) - 1:\n#         if x[i] == x[i + 1]:\n#             x[i] = x[i] * 2\n#             x.pop(i + 1)\n#         i += 1\n#     return x\n#\n#\n# def move_left(x):\n#     y = []\n#     for i in x:\n#         y.append(merge(i))\n#     return y\n#\n#\n# def move_right(x):\n#     y = []\n#     for i in x:\n#         y.append(list(reversed(merge(reversed(i)))))\n#     return y\n#\n#\n# def move_up(x):\n#     y = []\n#     for i in range(4):\n#         y.append(merge([x[j][i] for j in range(4)]))\n#     return y\n#\n#\n# def move_down(x):\n#     y = []\n#     for i in range(4):\n#         y.append(list(reversed(merge(reversed([x[j][i] for j in range(4)])))))\n#     return y\n#\n#\n# def move(x, d):\n#     if d == 0:\n#         x = move_left(x)\n#     elif d == 1:\n#         x = move_up(x)\n#     elif d == 2:\n#         x = move_right(x)\n#     elif d == 3:\n#         x = move_down(x)\n#     return x\n\nfrom collections import deque\n\n\ndef merge(x):\n    x = deque(x)\n    while True:\n        if not x:\n            break\n        if x[0] == 0:\n            x.popleft()\n        else:\n            break\n    while True:\n        if not x:\n            break\n        if x[-1] == 0:\n            x.pop()\n        else:\n            break\n    if not x:\n        return x\n    i = 0\n    while i < len(x) - 1:\n        if x[i] == x[i + 1]:\n            x[i] = x[i] * 2\n            x.pop(i + 1)\n        i += 1\n    return x\n\n\ndef move_left(x):\n    y = []\n    for i in x:\n        y.append(merge(i))\n    return y\n\n\ndef move_right(x):\n    y = []\n    for i in x:\n        y.append(list(reversed(merge(reversed(i)))))\n    return y\n\n\ndef move_up(x):\n    y = []\n    for i in range(4):\n        y.append(merge([x[j][i] for j in range(4)]))\n    return y\n\n\ndef move_down(x):\n    y = []\n    for i in range(4):\n        y.append(list(reversed(merge(reversed([x[j][i] for j in range(4)])))))\n    return y\n\n\ndef move(x, d):\n    if d == 0:\n        x = move_left(x)\n    elif d == 1:\n        x = move_up(x)\n    elif d == 2:\n        x = move_right(x)\n    elif d == 3:\n        x = move_down(x)\n    return x\n\n\ndef main():\n    x = []\n    for _ in range(4):\n        x.append(list(map(int, input().split())))\n    d = int(input())\n    x = move(x, d)\n    for i in range(4):\n        for j in range(4):\n            print(x[i][j], end=' ')\n        print()\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n# from collections import deque\n#\n#\n# def merge(x):\n#     x = deque(x)\n#     while True:\n#         if not x:\n#             break\n#         if x[0] == 0:\n#             x.popleft()\n#         else:\n#             break\n#     while True:\n#         if not x:\n#             break\n#         if x[-1] == 0:\n#             x.pop()\n#         else:\n#             break\n#     if not x:\n#         return x\n#     i = 0\n#     while i < len(x) - 1:\n#         if x[i] == x[i + 1]:\n#             x[i] = x[i] * 2\n#             x.pop(i + 1)\n#         i += 1\n#     return x\n#\n#\n# def move_left(x):\n#     y = []\n#     for i in x:\n#         y.append(merge(i))\n#     return y\n#\n#\n# def move_right(x):\n#     y = []\n#     for i in x:\n#         y.append(list(reversed(merge(reversed(i)))))\n#     return y\n#\n#\n# def move_up(x):\n#     y = []\n#     for i in range(4):\n#         y.append(merge([x[j][i] for j in range(4)]))\n#     return y\n#\n#\n# def move_down(x):\n#     y = []\n#     for i in range(4):\n#         y.append(list(reversed(merge(reversed([x[j][i] for j in range(4)])))))\n#     return y\n#\n#\n# def move(x, d):\n#     if d == 0:\n#         x = move_left(x)\n#     elif d == 1:\n#         x = move_up(x)\n#     elif d == 2:\n#         x = move_right(x)\n#     elif d == 3:\n#         x = move_down(x)\n#     return x\n#\n#\n# def main():\n#     x = []\n#     for _ in range(4):\n#         x.append(list(map(int, input().split())))\n#     d = int(input())\n#     x = move(x, d)\n#     for i in range(4):\n#         for j in range(4):\n#             print(x[i][j], end=' ')\n#         print()\n#\n#\n# if __name__ == '__main__':\n#     main()\n\nfrom collections import deque\n\n\ndef merge(x):\n    x = deque(x)\n    while True:\n        if not x:\n            break\n        if x[0] == 0:\n            x.popleft()\n        else:\n            break\n    while True:\n        if not x:\n            break\n        if x[-1] == 0:\n            x.pop()\n        else:\n            break\n    if not x:\n        return x\n    i = 0\n    while i < len(x) - 1:\n        if x[i] == x[i + 1]:\n            x[i] = x[i] * 2\n            x.pop(i + 1)\n        i += 1\n    return x\n\n\ndef move_left(x):\n    y = []\n    for i in x:\n        y.append(merge(i))\n    return y\n\n\ndef move_right(x):\n    y = []\n    for i in x:\n        y.append(list(reversed(merge(reversed(i)))))\n    return y\n\n\ndef move_up(x):\n    y = []\n    for i in range(4):\n        y.append(merge([x[j][i] for j in range(4)]))\n    return y\n\n\ndef move_down(x):\n    y = []\n    for i in range(4):\n        y.append(list(reversed(merge(reversed([x[j][i] for j in range(4)])))))\n    return y\n\n\ndef move(x, d):\n    if d == 0:\n        x = move_left(x)\n    elif d == 1:\n        x = move_up(x)\n    elif d == 2:\n        x = move_right(x)\n    elif d == 3:\n        x = move_down(x)\n    return x\n\n\ndef main():\n    x = []\n    for _ in range(4):\n        x.append(list(map(int, input().split())))\n    d = int(input())\n    x = move(x, d)\n    for i in range(4):\n        for j in range(4):\n            print(x[i][j], end=' ')\n        print()\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom collections import deque\n\n\ndef merge(x):\n    x = deque(x)\n    while True:\n        if not x:\n            break\n        if x[0] == 0:\n            x.popleft()\n        else:\n            break\n    while True:\n        if not x:\n            break\n        if x[-1] == 0:\n            x.pop()\n        else:\n            break\n    if not x:\n        return x\n    i = 0\n    while i < len(x) - 1:\n        if x[i] == x[i + 1]:\n            x[i] = x[i] * 2\n            x.pop(i + 1)\n        i += 1\n    return x\n\n\ndef move_left(x):\n    y = []\n    for i in x:\n        y.append(merge(i))\n    return y\n\n\ndef move_right(x):\n    y = []\n    for i in x:\n        y.append(list(reversed(merge(reversed(i)))))\n    return y\n\n\ndef move_up(x):\n    y = []\n    for i in range(4):\n        y.append(merge([x[j][i] for j in range(4)]))\n    return y\n\n\ndef move_down(x):\n    y = []\n    for i in range(4):\n        y.append(list(reversed(merge(reversed([x[j][i] for j in range(4)])))))\n    return y\n\n\ndef move(x, d):\n    if d == 0:\n        x = move_left(x)\n    elif d == 1:\n        x = move_up(x)\n    elif d == 2:\n        x = move_right(x)\n    elif d == 3:\n        x = move_down(x)\n    return x\n\n\ndef main():\n    x = []\n    for _ in range(4):\n        x.append(list(map(int, input().split())))\n    d = int(input())\n    x = move(x, d)\n    for i in range(4):\n        for j in range(4):\n            print(x[i][j], end=' ')\n        print()\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649808134,
  "object": "edit"
}
2022-04-13 00:02:29.749825 fix spelling mistakes 3 ["\n\n# from collections import deque\n#\n#\n# def merge(x):\n#     x = deque(x)\n#     while True:\n#         if not x:\n#             break\n#         if x[0] == 0:\n#             x.popleft()\n#         else:\n#             break\n#     while True:\n#         if not x:\n#             break\n#         if x[-1] == 0:\n#             x.pop()\n#         else:\n#             break\n#     if not x:\n#         return x\n#     i = 0\n#     while i < len(x) - 1:\n#         if x[i] == x[i + 1]:\n#             x[i] = x[i] * 2\n#             x.pop(i + 1)\n#         i += 1\n#     return x\n#\n#\n# def move_left(x):\n#     y = []\n#     for i in x:\n#         y.append(merge(i))\n#     return y\n#\n#\n# def move_right(x):\n#     y = []\n#     for i in x:\n#         y.append(list(reversed(merge(reversed(i)))))\n#     return y\n#\n#\n# def move_up(x):\n#     y = []\n#     for i in range(4):\n#         y.append(merge([x[j][i] for j in range(4)]))\n#     return y\n#\n#\n# def move_down(x):\n#     y = []\n#     for i in range(4):\n#         y.append(list(reversed(merge(reversed([x[j][i] for j in range(4)])))))\n#     return y\n#\n#\n# def move(x, d):\n#     if d == 0:\n#         x = move_left(x)\n#     elif d == 1:\n#         x = move_up(x)\n#     elif d == 2:\n#         x = move_right(x)\n#     elif d == 3:\n#         x = move_down(x)\n#     return x\n\nfrom collections import deque\n\n\ndef merge(x):\n    x = deque(x)\n    while True:\n        if not x:\n            break\n        if x[0] == 0:\n            x.popleft()\n        else:\n            break\n    while True:\n        if not x:\n            break\n        if x[-1] == 0:\n            x.pop()\n        else:\n            break\n    if not x:\n        return x\n    i = 0\n    while i < len(x) - 1:\n        if x[i] == x[i + 1]:\n            x[i] = x[i] * 2\n            x.pop(i + 1)\n        i += 1\n    return x\n\n\ndef move_left(x):\n    y = []\n    for i in x:\n        y.append(merge(i))\n    return y\n\n\ndef move_right(x):\n    y = []\n    for i in x:\n        y.append(list(reversed(merge(reversed(i)))))\n    return y\n\n\ndef move_up(x):\n    y = []\n    for i in range(4):\n        y.append(merge([x[j][i] for j in range(4)]))\n    return y\n\n\ndef move_down(x):\n    y = []\n    for i in range(4):\n        y.append(list(reversed(merge(reversed([x[j][i] for j in range(4)])))))\n    return y\n\n\ndef move(x, d):\n    if d == 0:\n        x = move_left(x)\n    elif d == 1:\n        x = move_up(x)\n    elif d == 2:\n        x = move_right(x)\n    elif d == 3:\n        x = move_down(x)\n    return x\n\n\ndef main():\n    x = []\n    for _ in range(4):\n        x.append(list(map(int, input().split())))\n    d = int(input())\n    x = move(x, d)\n    for i in range(4):\n        for j in range(4):\n            print(x[i][j], end=' ')\n        print()\n\n\nif __name__ == '__main__':\n    main()\n", "\n# from collections import deque\n#\n#\n# def merge(x):\n#     x = deque(x)\n#     while True:\n#         if not x:\n#             break\n#         if x[0] == 0:\n#             x.popleft()\n#         else:\n#             break\n#     while True:\n#         if not x:\n#             break\n#         if x[-1] == 0:\n#             x.pop()\n#         else:\n#             break\n#     if not x:\n#         return x\n#     i = 0\n#     while i < len(x) - 1:\n#         if x[i] == x[i + 1]:\n#             x[i] = x[i] * 2\n#             x.pop(i + 1)\n#         i += 1\n#     return x\n#\n#\n# def move_left(x):\n#     y = []\n#     for i in x:\n#         y.append(merge(i))\n#     return y\n#\n#\n# def move_right(x):\n#     y = []\n#     for i in x:\n#         y.append(list(reversed(merge(reversed(i)))))\n#     return y\n#\n#\n# def move_up(x):\n#     y = []\n#     for i in range(4):\n#         y.append(merge([x[j][i] for j in range(4)]))\n#     return y\n#\n#\n# def move_down(x):\n#     y = []\n#     for i in range(4):\n#         y.append(list(reversed(merge(reversed([x[j][i] for j in range(4)])))))\n#     return y\n#\n#\n# def move(x, d):\n#     if d == 0:\n#         x = move_left(x)\n#     elif d == 1:\n#         x = move_up(x)\n#     elif d == 2:\n#         x = move_right(x)\n#     elif d == 3:\n#         x = move_down(x)\n#     return x\n#\n#\n# def main():\n#     x = []\n#     for _ in range(4):\n#         x.append(list(map(int, input().split())))\n#     d = int(input())\n#     x = move(x, d)\n#     for i in range(4):\n#         for j in range(4):\n#             print(x[i][j], end=' ')\n#         print()\n#\n#\n# if __name__ == '__main__':\n#     main()\n\nfrom collections import deque\n\n\ndef merge(x):\n    x = deque(x)\n    while True:\n        if not x:\n            break\n        if x[0] == 0:\n            x.popleft()\n        else:\n            break\n    while True:\n        if not x:\n            break\n        if x[-1] == 0:\n            x.pop()\n        else:\n            break\n    if not x:\n        return x\n    i = 0\n    while i < len(x) - 1:\n        if x[i] == x[i + 1]:\n            x[i] = x[i] * 2\n            x.pop(i + 1)\n        i += 1\n    return x\n\n\ndef move_left(x):\n    y = []\n    for i in x:\n        y.append(merge(i))\n    return y\n\n\ndef move_right(x):\n    y = []\n    for i in x:\n        y.append(list(reversed(merge(reversed(i)))))\n    return y\n\n\ndef move_up(x):\n    y = []\n    for i in range(4):\n        y.append(merge([x[j][i] for j in range(4)]))\n    return y\n\n\ndef move_down(x):\n    y = []\n    for i in range(4):\n        y.append(list(reversed(merge(reversed([x[j][i] for j in range(4)])))))\n    return y\n\n\ndef move(x, d):\n    if d == 0:\n        x = move_left(x)\n    elif d == 1:\n        x = move_up(x)\n    elif d == 2:\n        x = move_right(x)\n    elif d == 3:\n        x = move_down(x)\n    return x\n\n\ndef main():\n    x = []\n    for _ in range(4):\n        x.append(list(map(int, input().split())))\n    d = int(input())\n    x = move(x, d)\n    for i in range(4):\n        for j in range(4):\n            print(x[i][j], end=' ')\n        print()\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom collections import deque\n\n\ndef merge(x):\n    x = deque(x)\n    while True:\n        if not x:\n            break\n        if x[0] == 0:\n            x.popleft()\n        else:\n            break\n    while True:\n        if not x:\n            break\n        if x[-1] == 0:\n            x.pop()\n        else:\n            break\n    if not x:\n        return x\n    i = 0\n    while i < len(x) - 1:\n        if x[i] == x[i + 1]:\n            x[i] = x[i] * 2\n            x.pop(i + 1)\n        i += 1\n    return x\n\n\ndef move_left(x):\n    y = []\n    for i in x:\n        y.append(merge(i))\n    return y\n\n\ndef move_right(x):\n    y = []\n    for i in x:\n        y.append(list(reversed(merge(reversed(i)))))\n    return y\n\n\ndef move_up(x):\n    y = []\n    for i in range(4):\n        y.append(merge([x[j][i] for j in range(4)]))\n    return y\n\n\ndef move_down(x):\n    y = []\n    for i in range(4):\n        y.append(list(reversed(merge(reversed([x[j][i] for j in range(4)])))))\n    return y\n\n\ndef move(x, d):\n    if d == 0:\n        x = move_left(x)\n    elif d == 1:\n        x = move_up(x)\n    elif d == 2:\n        x = move_right(x)\n    elif d == 3:\n        x = move_down(x)\n    return x\n\n\ndef main():\n    x = []\n    for _ in range(4):\n        x.append(list(map(int, input().split())))\n    d = int(input())\n    x = move(x, d)\n    for i in range(4):\n        for j in range(4):\n            print(x[i][j], end=' ')\n        print()\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 00:02:29.749985 size on output set 3
2022-04-13 00:02:29.749993 size on input set 3
2022-04-13 00:02:53.905449 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom collections import deque\n\n\ndef merge(x):\n    x = deque(x)\n    while x and x[0] == 0:\n        x.popleft()\n    while x and x[-1] == 0:\n        x.pop()\n    if not x:\n        return []\n    i = 0\n    while i < len(x) - 1:\n        if x[i] == x[i + 1]:\n            x[i] = x[i] * 2\n            x.pop(i + 1)\n        i += 1\n    return x\n\n\ndef move_left(x):\n    y = []\n    for i in x:\n        y.append(merge(i))\n    return y\n\n\ndef move_right(x):\n    y = []\n    for i in x:\n        y.append(list(reversed(merge(reversed(i)))))\n    return y\n\n\ndef move_up(x):\n    y = []\n    for i in range(4):\n        y.append(merge([x[j][i] for j in range(4)]))\n    return y\n\n\ndef move_down(x):\n    y = []\n    for i in range(4):\n        y.append(list(reversed(merge(reversed([x[j][i] for j in range(4)])))))\n    return y\n\n\ndef move(x, d):\n    if d == 0:\n        x = move_left(x)\n    elif d == 1:\n        x = move_up(x)\n    elif d == 2:\n        x = move_right(x)\n    elif d == 3:\n        x = move_down(x)\n    return x\n\n\ndef main():\n    x = []\n    for _ in range(4):\n        x.append(list(map(int, input().split())))\n    d = int(input())\n    x = move(x, d)\n    for i in range(4):\n        for j in range(4):\n            print(x[i][j], end=' ')\n        print()\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom collections import deque\n\n\ndef merge(list_x):\n    list_x = deque(list_x)\n    while True:\n        if not list_x:\n            break\n        if list_x[0] == 0:\n            list_x.popleft()\n        else:\n            break\n    while True:\n        if not list_x:\n            break\n        if list_x[-1] == 0:\n            list_x.pop()\n        else:\n            break\n    if not list_x:\n        return list_x\n    i = 0\n    while i < len(list_x) - 1:\n        if list_x[i] == list_x[i + 1]:\n            list_x[i] = list_x[i] * 2\n            list_x.pop(i + 1)\n        i += 1\n    return list_x\n\n\ndef move_left(list_x):\n    list_y = []\n    for i in list_x:\n        list_y.append(merge(i))\n    return list_y\n\n\ndef move_right(list_x):\n    list_y = []\n    for i in list_x:\n        list_y.append(list(reversed(merge(reversed(i)))))\n    return list_y\n\n\ndef move_up(list_x):\n    list_y = []\n    for i in range(4):\n        list_y.append(merge([list_x[j][i] for j in range(4)]))\n    return list_y\n\n\ndef move_down(list_x):\n    list_y = []\n    for i in range(4):\n        list_y.append(list(reversed(merge(reversed([list_x[j][i] for j in range(4)])))))\n    return list_y\n\n\ndef move(list_x, d):\n    if d == 0:\n        list_x = move_left(list_x)\n    elif d == 1:\n        list_x = move_up(list_x)\n    elif d == 2:\n        list_x = move_right(list_x)\n    elif d == 3:\n        list_x = move_down(list_x)\n    return list_x\n\n\ndef main():\n    list_x = []\n    for _ in range(4):\n        list_x.append(list(map(int, input().split())))\n    d = int(input())\n    list_x = move(list_x, d)\n    for i in range(4):\n        for j in range(4):\n            print(list_x[i][j], end=' ')\n        print()\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nfrom collections import deque\n\n\ndef merge(x):\n    x = deque(x)\n    while True:\n        if not x:\n            break\n        if x[0] == 0:\n            x.popleft()\n        else:\n            break\n    while True:\n        if not x:\n            break\n        if x[-1] == 0:\n            x.pop()\n        else:\n            break\n    if not x:\n        return x\n    i = 0\n    while i < len(x) - 1:\n        if x[i] == x[i + 1]:\n            x[i] = x[i] * 2\n            x.pop(i + 1)\n        i += 1\n    return x\n\n\ndef move_left(x):\n    y = []\n    for i in x:\n        y.append(merge(i))\n    return y\n\n\ndef move_right(x):\n    y = []\n    for i in x:\n        y.append(list(reversed(merge(reversed(i)))))\n    return y\n\n\ndef move_up(x):\n    y = []\n    for i in range(4):\n        y.append(merge([x[j][i] for j in range(4)]))\n    return y\n\n\ndef move_down(x):\n    y = []\n    for i in range(4):\n        y.append(list(reversed(merge(reversed([x[j][i] for j in range(4)])))))\n    return y\n\n\ndef move(x, d):\n    if d == 0:\n        x = move_left(x)\n    elif d == 1:\n        x = move_up(x)\n    elif d == 2:\n        x = move_right(x)\n    elif d == 3:\n        x = move_down(x)\n    return x\n\n\ndef main():\n    x = []\n    for _ in range(4):\n        x.append(list(map(int, input().split())))\n    d = int(input())\n    x = move(x, d)\n    for i in range(4):\n        for j in range(4):\n            print(x[i][j], end=' ')\n        print()\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649808149,
  "object": "edit"
}
2022-04-13 00:02:53.905646 fix syntax errors 3 ["\n\nfrom collections import deque\n\n\ndef merge(x):\n    x = deque(x)\n    while x and x[0] == 0:\n        x.popleft()\n    while x and x[-1] == 0:\n        x.pop()\n    if not x:\n        return []\n    i = 0\n    while i < len(x) - 1:\n        if x[i] == x[i + 1]:\n            x[i] = x[i] * 2\n            x.pop(i + 1)\n        i += 1\n    return x\n\n\ndef move_left(x):\n    y = []\n    for i in x:\n        y.append(merge(i))\n    return y\n\n\ndef move_right(x):\n    y = []\n    for i in x:\n        y.append(list(reversed(merge(reversed(i)))))\n    return y\n\n\ndef move_up(x):\n    y = []\n    for i in range(4):\n        y.append(merge([x[j][i] for j in range(4)]))\n    return y\n\n\ndef move_down(x):\n    y = []\n    for i in range(4):\n        y.append(list(reversed(merge(reversed([x[j][i] for j in range(4)])))))\n    return y\n\n\ndef move(x, d):\n    if d == 0:\n        x = move_left(x)\n    elif d == 1:\n        x = move_up(x)\n    elif d == 2:\n        x = move_right(x)\n    elif d == 3:\n        x = move_down(x)\n    return x\n\n\ndef main():\n    x = []\n    for _ in range(4):\n        x.append(list(map(int, input().split())))\n    d = int(input())\n    x = move(x, d)\n    for i in range(4):\n        for j in range(4):\n            print(x[i][j], end=' ')\n        print()\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom collections import deque\n\n\ndef merge(list_x):\n    list_x = deque(list_x)\n    while True:\n        if not list_x:\n            break\n        if list_x[0] == 0:\n            list_x.popleft()\n        else:\n            break\n    while True:\n        if not list_x:\n            break\n        if list_x[-1] == 0:\n            list_x.pop()\n        else:\n            break\n    if not list_x:\n        return list_x\n    i = 0\n    while i < len(list_x) - 1:\n        if list_x[i] == list_x[i + 1]:\n            list_x[i] = list_x[i] * 2\n            list_x.pop(i + 1)\n        i += 1\n    return list_x\n\n\ndef move_left(list_x):\n    list_y = []\n    for i in list_x:\n        list_y.append(merge(i))\n    return list_y\n\n\ndef move_right(list_x):\n    list_y = []\n    for i in list_x:\n        list_y.append(list(reversed(merge(reversed(i)))))\n    return list_y\n\n\ndef move_up(list_x):\n    list_y = []\n    for i in range(4):\n        list_y.append(merge([list_x[j][i] for j in range(4)]))\n    return list_y\n\n\ndef move_down(list_x):\n    list_y = []\n    for i in range(4):\n        list_y.append(list(reversed(merge(reversed([list_x[j][i] for j in range(4)])))))\n    return list_y\n\n\ndef move(list_x, d):\n    if d == 0:\n        list_x = move_left(list_x)\n    elif d == 1:\n        list_x = move_up(list_x)\n    elif d == 2:\n        list_x = move_right(list_x)\n    elif d == 3:\n        list_x = move_down(list_x)\n    return list_x\n\n\ndef main():\n    list_x = []\n    for _ in range(4):\n        list_x.append(list(map(int, input().split())))\n    d = int(input())\n    list_x = move(list_x, d)\n    for i in range(4):\n        for j in range(4):\n            print(list_x[i][j], end=' ')\n        print()\n\n\nif __name__ == '__main__':\n    main()\n", "\nfrom collections import deque\n\n\ndef merge(x):\n    x = deque(x)\n    while True:\n        if not x:\n            break\n        if x[0] == 0:\n            x.popleft()\n        else:\n            break\n    while True:\n        if not x:\n            break\n        if x[-1] == 0:\n            x.pop()\n        else:\n            break\n    if not x:\n        return x\n    i = 0\n    while i < len(x) - 1:\n        if x[i] == x[i + 1]:\n            x[i] = x[i] * 2\n            x.pop(i + 1)\n        i += 1\n    return x\n\n\ndef move_left(x):\n    y = []\n    for i in x:\n        y.append(merge(i))\n    return y\n\n\ndef move_right(x):\n    y = []\n    for i in x:\n        y.append(list(reversed(merge(reversed(i)))))\n    return y\n\n\ndef move_up(x):\n    y = []\n    for i in range(4):\n        y.append(merge([x[j][i] for j in range(4)]))\n    return y\n\n\ndef move_down(x):\n    y = []\n    for i in range(4):\n        y.append(list(reversed(merge(reversed([x[j][i] for j in range(4)])))))\n    return y\n\n\ndef move(x, d):\n    if d == 0:\n        x = move_left(x)\n    elif d == 1:\n        x = move_up(x)\n    elif d == 2:\n        x = move_right(x)\n    elif d == 3:\n        x = move_down(x)\n    return x\n\n\ndef main():\n    x = []\n    for _ in range(4):\n        x.append(list(map(int, input().split())))\n    d = int(input())\n    x = move(x, d)\n    for i in range(4):\n        for j in range(4):\n            print(x[i][j], end=' ')\n        print()\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 00:03:08.985684 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom collections import deque\n\n\ndef merge(x):\n    x = deque(x)\n    while True:\n        if not x:\n            break\n        if x[0] == 0:\n            x.popleft()\n        else:\n            break\n    while True:\n        if not x:\n            break\n        if x[-1] == 0:\n            x.pop()\n        else:\n            break\n    if not x:\n        return x\n    i = 0\n    while i < len(x) - 1:\n        if x[i] == x[i + 1]:\n            x[i] = x[i] * 2\n            x.pop(i + 1)\n        i += 1\n    return x\n\n\ndef move_left(x):\n    y = []\n    for i in x:\n        y.append(merge(i))\n    return y\n\n\ndef move_right(x):\n    y = []\n    for i in x:\n        y.append(list(reversed(merge(reversed(i)))))\n    return y\n\n\ndef move_up(x):\n    y = []\n    for i in range(4):\n        y.append(merge([x[j][i] for j in range(4)]))\n    return y\n\n\ndef move_down(x):\n    y = []\n    for i in range(4):\n        y.append(list(reversed(merge(reversed([x[j][i] for j in range(4)])))))\n    return y\n\n\ndef move(x, d):\n    if d == 0:\n        x = move_left(x)\n    elif d == 1:\n        x = move_up(x)\n    elif d == 2:\n        x = move_right(x)\n    elif d == 3:\n        x = move_down(x)\n    return x\n\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n# from collections import deque\n#\n#\n# def merge(x):\n#     x = deque(x)\n#     while True:\n#         if not x:\n#             break\n#         if x[0] == 0:\n#             x.popleft()\n#         else:\n#             break\n#     while True:\n#         if not x:\n#             break\n#         if x[-1] == 0:\n#             x.pop()\n#         else:\n#             break\n#     if not x:\n#         return x\n#     i = 0\n#     while i < len(x) - 1:\n#         if x[i] == x[i + 1]:\n#             x[i] = x[i] * 2\n#             x.pop(i + 1)\n#         i += 1\n#     return x\n#\n#\n# def move_left(x):\n#     y = []\n#     for i in x:\n#         y.append(merge(i))\n#     return y\n#\n#\n# def move_right(x):\n#     y = []\n#     for i in x:\n#         y.append(list(reversed(merge(reversed(i)))))\n#     return y\n#\n#\n# def move_up(x):\n#     y = []\n#     for i in range(4):\n#         y.append(merge([x[j][i] for j in range(4)]))\n#     return y\n#\n#\n# def move_down(x):\n#     y = []\n#     for i in range(4):\n#         y.append(list(reversed(merge(reversed([x[j][i] for j in range(4)])))))\n#     return y\n#\n#\n# def move(x, d):\n#     if d == 0:\n#         x = move_left(x)\n#     elif d == 1:\n#         x = move_up(x)\n#     elif d == 2:\n#         x = move_right(x)\n#     elif d == 3:\n#         x = move_down(x)\n#     return x\n\nfrom collections import deque\n\n\ndef merge(x):\n    x = deque(x)\n    while True:\n        if not x:\n            break\n        if x[0] == 0:\n            x.popleft()\n        else:\n            break\n    while True:\n        if not x:\n            break\n        if x[-1] == 0:\n            x.pop()\n        else:\n            break\n    if not x:\n        return x\n    i = 0\n    while i < len(x) - 1:\n        if x[i] == x[i + 1]:\n            x[i] = x[i] * 2\n            x.pop(i + 1)\n        i += 1\n    return x\n\n\ndef move_left(x):\n    y = []\n    for i in x:\n        y.append(merge(i))\n    return y\n\n\ndef move_right(x):\n    y = []\n    for i in x:\n        y.append(list(reversed(merge(reversed(i)))))\n    return y\n\n\ndef move_up(x):\n    y = []\n    for i in range(4):\n        y.append(merge([x[j][i] for j in range(4)]))\n    return y \n\n\ndef move_down(x):\n    y = []\n    for i in range(4):\n        y.append(list(reversed(merge(reversed([x[j][i] for j in range(4)])))))\n    return y\n\n\ndef move(x, d):\n    if d == 0:\n        x = move_left(x)\n    elif d == 1:\n        x = move_up(x)\n    elif d == 2:\n        x = move_right(x)\n    elif d == 3:\n        x = move_down(x)\n    return x\n\n\ndef main():\n    x = []\n    for _ in range(4):\n        x.append(list(map(int, input().split())))\n    d = int(input())\n    x = move(x, d)\n    for i in range(4):\n        for j in range(4):\n            print(x[i][j], end=' ')\n        print()\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n# from collections import deque\n#\n#\n# def merge(x):\n#     x = deque(x)\n#     while True:\n#         if not x:\n#             break\n#         if x[0] == 0:\n#             x.popleft()\n#         else:\n#             break\n#     while True:\n#         if not x:\n#             break\n#         if x[-1] == 0:\n#             x.pop()\n#         else:\n#             break\n#     if not x:\n#         return x\n#     i = 0\n#     while i < len(x) - 1:\n#         if x[i] == x[i + 1]:\n#             x[i] = x[i] * 2\n#             x.pop(i + 1)\n#         i += 1\n#     return x\n#\n#\n# def move_left(x):\n#     y = []\n#     for i in x:\n#         y.append(merge(i))\n#     return y\n#\n#\n# def move_right(x):\n#     y = []\n#     for i in x:\n#         y.append(list(reversed(merge(reversed(i)))))\n#     return y\n#\n#\n# def move_up(x):\n#     y = []\n#     for i in range(4):\n#         y.append(merge([x[j][i] for j in range(4)]))\n#     return y\n#\n#\n# def move_down(x):\n#     y = []\n#     for i in range(4):\n#         y.append(list(reversed(merge(reversed([x[j][i] for j in range(4)])))))\n#     return y\n#\n#\n# def move(x, d):\n#     if d == 0:\n#         x = move_left(x)\n#     elif d == 1:\n#         x = move_up(x)\n#     elif d == 2:\n#         x = move_right(x)\n#     elif d == 3:\n#         x = move_down(x)\n#     return x\n\nfrom collections import deque\n\n\ndef merge(x):\n    x = deque(x)\n    while True:\n        if not x:\n            break\n        if x[0] == 0:\n            x.popleft()\n        else:\n            break\n    while True:\n        if not x:\n            break\n        if x[-1] == 0:\n            x.pop()\n        else:\n            break\n    if not x:\n        return x\n    i = 0\n    while i < len(x) - 1:\n        if x[i] == x[i + 1]:\n            x[i] = x[i] * 2\n            x.pop(i + 1)\n        i += 1\n    return x\n\n\ndef move_left(x):\n    y = []\n    for i in x:\n        y.append(merge(i))\n    return y\n\n\ndef move_right(x):\n    y = []\n    for i in x:\n        y.append(list(reversed(merge(reversed(i)))))\n    return y\n\n\ndef move_up(x):\n    y = []\n    for i in range(4):\n        y.append(merge([x[j][i] for j in range(4)]))\n    return y\n\n\ndef move_down(x):\n    y = []\n    for i in range(4):\n        y.append(list(reversed(merge(reversed([x[j][i] for j in range(4)])))))\n    return y\n\n\ndef move(x, d):\n    if d == 0:\n        x = move_left(x)\n    elif d == 1:\n        x = move_up(x)\n    elif d == 2:\n        x = move_right(x)\n    elif d == 3:\n        x = move_down(x)\n    return x\n\n\ndef main():\n    x = []\n    for _ in range(4):\n        x.append(list(map(int, input().split())))\n    d = int(input())\n    x = move(x, d)\n    for i in range(4):\n        for j in range(4):\n            print(x[i][j], end=' ')\n        print()\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649808173,
  "object": "edit"
}
2022-04-13 00:03:08.985889 fix syntax errors 3 ["\n\nfrom collections import deque\n\n\ndef merge(x):\n    x = deque(x)\n    while True:\n        if not x:\n            break\n        if x[0] == 0:\n            x.popleft()\n        else:\n            break\n    while True:\n        if not x:\n            break\n        if x[-1] == 0:\n            x.pop()\n        else:\n            break\n    if not x:\n        return x\n    i = 0\n    while i < len(x) - 1:\n        if x[i] == x[i + 1]:\n            x[i] = x[i] * 2\n            x.pop(i + 1)\n        i += 1\n    return x\n\n\ndef move_left(x):\n    y = []\n    for i in x:\n        y.append(merge(i))\n    return y\n\n\ndef move_right(x):\n    y = []\n    for i in x:\n        y.append(list(reversed(merge(reversed(i)))))\n    return y\n\n\ndef move_up(x):\n    y = []\n    for i in range(4):\n        y.append(merge([x[j][i] for j in range(4)]))\n    return y\n\n\ndef move_down(x):\n    y = []\n    for i in range(4):\n        y.append(list(reversed(merge(reversed([x[j][i] for j in range(4)])))))\n    return y\n\n\ndef move(x, d):\n    if d == 0:\n        x = move_left(x)\n    elif d == 1:\n        x = move_up(x)\n    elif d == 2:\n        x = move_right(x)\n    elif d == 3:\n        x = move_down(x)\n    return x\n\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n# from collections import deque\n#\n#\n# def merge(x):\n#     x = deque(x)\n#     while True:\n#         if not x:\n#             break\n#         if x[0] == 0:\n#             x.popleft()\n#         else:\n#             break\n#     while True:\n#         if not x:\n#             break\n#         if x[-1] == 0:\n#             x.pop()\n#         else:\n#             break\n#     if not x:\n#         return x\n#     i = 0\n#     while i < len(x) - 1:\n#         if x[i] == x[i + 1]:\n#             x[i] = x[i] * 2\n#             x.pop(i + 1)\n#         i += 1\n#     return x\n#\n#\n# def move_left(x):\n#     y = []\n#     for i in x:\n#         y.append(merge(i))\n#     return y\n#\n#\n# def move_right(x):\n#     y = []\n#     for i in x:\n#         y.append(list(reversed(merge(reversed(i)))))\n#     return y\n#\n#\n# def move_up(x):\n#     y = []\n#     for i in range(4):\n#         y.append(merge([x[j][i] for j in range(4)]))\n#     return y\n#\n#\n# def move_down(x):\n#     y = []\n#     for i in range(4):\n#         y.append(list(reversed(merge(reversed([x[j][i] for j in range(4)])))))\n#     return y\n#\n#\n# def move(x, d):\n#     if d == 0:\n#         x = move_left(x)\n#     elif d == 1:\n#         x = move_up(x)\n#     elif d == 2:\n#         x = move_right(x)\n#     elif d == 3:\n#         x = move_down(x)\n#     return x\n\nfrom collections import deque\n\n\ndef merge(x):\n    x = deque(x)\n    while True:\n        if not x:\n            break\n        if x[0] == 0:\n            x.popleft()\n        else:\n            break\n    while True:\n        if not x:\n            break\n        if x[-1] == 0:\n            x.pop()\n        else:\n            break\n    if not x:\n        return x\n    i = 0\n    while i < len(x) - 1:\n        if x[i] == x[i + 1]:\n            x[i] = x[i] * 2\n            x.pop(i + 1)\n        i += 1\n    return x\n\n\ndef move_left(x):\n    y = []\n    for i in x:\n        y.append(merge(i))\n    return y\n\n\ndef move_right(x):\n    y = []\n    for i in x:\n        y.append(list(reversed(merge(reversed(i)))))\n    return y\n\n\ndef move_up(x):\n    y = []\n    for i in range(4):\n        y.append(merge([x[j][i] for j in range(4)]))\n    return y \n\n\ndef move_down(x):\n    y = []\n    for i in range(4):\n        y.append(list(reversed(merge(reversed([x[j][i] for j in range(4)])))))\n    return y\n\n\ndef move(x, d):\n    if d == 0:\n        x = move_left(x)\n    elif d == 1:\n        x = move_up(x)\n    elif d == 2:\n        x = move_right(x)\n    elif d == 3:\n        x = move_down(x)\n    return x\n\n\ndef main():\n    x = []\n    for _ in range(4):\n        x.append(list(map(int, input().split())))\n    d = int(input())\n    x = move(x, d)\n    for i in range(4):\n        for j in range(4):\n            print(x[i][j], end=' ')\n        print()\n\n\nif __name__ == '__main__':\n    main()\n", "\n# from collections import deque\n#\n#\n# def merge(x):\n#     x = deque(x)\n#     while True:\n#         if not x:\n#             break\n#         if x[0] == 0:\n#             x.popleft()\n#         else:\n#             break\n#     while True:\n#         if not x:\n#             break\n#         if x[-1] == 0:\n#             x.pop()\n#         else:\n#             break\n#     if not x:\n#         return x\n#     i = 0\n#     while i < len(x) - 1:\n#         if x[i] == x[i + 1]:\n#             x[i] = x[i] * 2\n#             x.pop(i + 1)\n#         i += 1\n#     return x\n#\n#\n# def move_left(x):\n#     y = []\n#     for i in x:\n#         y.append(merge(i))\n#     return y\n#\n#\n# def move_right(x):\n#     y = []\n#     for i in x:\n#         y.append(list(reversed(merge(reversed(i)))))\n#     return y\n#\n#\n# def move_up(x):\n#     y = []\n#     for i in range(4):\n#         y.append(merge([x[j][i] for j in range(4)]))\n#     return y\n#\n#\n# def move_down(x):\n#     y = []\n#     for i in range(4):\n#         y.append(list(reversed(merge(reversed([x[j][i] for j in range(4)])))))\n#     return y\n#\n#\n# def move(x, d):\n#     if d == 0:\n#         x = move_left(x)\n#     elif d == 1:\n#         x = move_up(x)\n#     elif d == 2:\n#         x = move_right(x)\n#     elif d == 3:\n#         x = move_down(x)\n#     return x\n\nfrom collections import deque\n\n\ndef merge(x):\n    x = deque(x)\n    while True:\n        if not x:\n            break\n        if x[0] == 0:\n            x.popleft()\n        else:\n            break\n    while True:\n        if not x:\n            break\n        if x[-1] == 0:\n            x.pop()\n        else:\n            break\n    if not x:\n        return x\n    i = 0\n    while i < len(x) - 1:\n        if x[i] == x[i + 1]:\n            x[i] = x[i] * 2\n            x.pop(i + 1)\n        i += 1\n    return x\n\n\ndef move_left(x):\n    y = []\n    for i in x:\n        y.append(merge(i))\n    return y\n\n\ndef move_right(x):\n    y = []\n    for i in x:\n        y.append(list(reversed(merge(reversed(i)))))\n    return y\n\n\ndef move_up(x):\n    y = []\n    for i in range(4):\n        y.append(merge([x[j][i] for j in range(4)]))\n    return y\n\n\ndef move_down(x):\n    y = []\n    for i in range(4):\n        y.append(list(reversed(merge(reversed([x[j][i] for j in range(4)])))))\n    return y\n\n\ndef move(x, d):\n    if d == 0:\n        x = move_left(x)\n    elif d == 1:\n        x = move_up(x)\n    elif d == 2:\n        x = move_right(x)\n    elif d == 3:\n        x = move_down(x)\n    return x\n\n\ndef main():\n    x = []\n    for _ in range(4):\n        x.append(list(map(int, input().split())))\n    d = int(input())\n    x = move(x, d)\n    for i in range(4):\n        for j in range(4):\n            print(x[i][j], end=' ')\n        print()\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 00:03:24.192267 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# from collections import deque\n#\n#\n# def merge(x):\n#     x = deque(x)\n#     while True:\n#         if not x:\n#             break\n#         if x[0] == 0:\n#             x.popleft()\n#         else:\n#             break\n#     while True:\n#         if not x:\n#             break\n#         if x[-1] == 0:\n#             x.pop()\n#         else:\n#             break\n#     if not x:\n#         return x\n#     i = 0\n#     while i < len(x) - 1:\n#         if x[i] == x[i + 1]:\n#             x[i] = x[i] * 2\n#             x.pop(i + 1)\n#         i += 1\n#     return x\n#\n#\n# def move_left(x):\n#     y = []\n#     for i in x:\n#         y.append(merge(i))\n#     return y\n#\n#\n# def move_right(x):\n#     y = []\n#     for i in x:\n#         y.append(list(reversed(merge(reversed(i)))))\n#     return y\n#\n#\n# def move_up(x):\n#     y = []\n#     for i in range(4):\n#         y.append(merge([x[j][i] for j in range(4)]))\n#     return y\n#\n#\n# def move_down(x):\n#     y = []\n#     for i in range(4):\n#         y.append(list(reversed(merge(reversed([x[j][i] for j in range(4)])))))\n#     return y\n#\n#\n# def move(x, d):\n#     if d == 0:\n#         x = move_left(x)\n#     elif d == 1:\n#         x = move_up(x)\n#     elif d == 2:\n#         x = move_right(x)\n#     elif d == 3:\n#         x = move_down(x)\n#     return x\n#\n#\n# def main():\n#     x = []\n#     for _ in range(4):\n#         x.append(list(map(int, input().split())))\n#     d = int(input())\n#     x = move(x, d)\n#     for i in range(4):\n#         for j in range(4):\n#             print(x[i][j], end=' ')\n#         print()\n#\n#\n# if __name__ == '__main__':\n#     main()\n\nfrom collections import deque\n\n\ndef merge(x):\n    x = deque(x)\n    while True:\n        if not x:\n            break\n        if x[0] == 0:\n            x.popleft()\n        else:\n            break\n    while True:\n        if not x:\n            break\n        if x[-1] == 0:\n            x.pop()\n        else:\n            break\n    if not x:\n        return x\n    i = 0\n    while i < len(x) - 1:\n        if x[i] == x[i + 1]:\n            x[i] = x[i] * 2\n            x.pop(i + 1)\n        i += 1\n    return x\n\n\ndef move_left(x):\n    y = []\n    for i in x:\n        y.append(merge(i))\n    return y\n\n\ndef move_right(x):\n    y = []\n    for i in x:\n        y.append(list(reversed(merge(reversed(i)))))\n    return y\n\n\ndef move_up(x):\n    y = []\n    for i in range(4):\n        y.append(merge([x[j][i] for j in range(4)]))\n    return y\n\n\ndef move_down(x):\n    y = []\n    for i in range(4):\n        y.append(list(reversed(merge(reversed([x[j][i] for j in range(4)])))))\n    return y\n\n\ndef move(x, d):\n    if d == 0:\n        x = move_left(x)\n    elif d == 1:\n        x = move_up(x)\n    elif d == 2:\n        x = move_right(x)\n    elif d == 3:\n        x = move_down(x)\n    return x\n\n\ndef main():\n    x = []\n    for _ in range(4):\n        x.append(list(map(int, input().split())))\n    d = int(input())\n    x = move(x, d)\n    for i in range(4):\n        for j in range(4):\n            print(x[i][j], end=' ')\n        print()\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "from collections import deque\n\n\ndef merge(x):\n    x = deque(x)\n    while True:\n        if not x:\n            break\n        if x[0] == 0:\n            x.popleft()\n        else:\n            break\n    while True:\n        if not x:\n            break\n        if x[-1] == 0:\n            x.pop()\n        else:\n            break\n    if not x:\n        return x\n    i = 0\n    while i < len(x) - 1:\n        if x[i] == x[i + 1]:\n            x[i] = x[i] * 2\n            x.pop(i + 1)\n        i += 1\n    return x\n\n\ndef move_left(x):\n    y = []\n    for i in x:\n        y.append(merge(i))\n    return y\n\n\ndef move_right(x):\n    y = []\n    for i in x:\n        y.append(list(reversed(merge(reversed(i)))))\n    return y\n\n\ndef move_up(x):\n    y = []\n    for i in range(4):\n        y.append(merge([x[j][i] for j in range(4)]))\n    return y\n\n\ndef move_down(x):\n    y = []\n    for i in range(4):\n        y.append(list(reversed(merge(reversed([x[j][i] for j in range(4)])))))\n    return y\n\n\ndef move(x, d):\n    if d == 0:\n        x = move_left(x)\n    elif d == 1:\n        x = move_up(x)\n    elif d == 2:\n        x = move_right(x)\n    elif d == 3:\n        x = move_down(x)\n    return x\n\n\ndef main():\n    x = []\n    for _ in range(4):\n        x.append(list(map(int, input().split())))\n    d = int(input())\n    x = move(x, d)\n    for i in range(4):\n        for j in range(4):\n            print(x[i][j], end=' ')\n        print()\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nfrom collections import deque\n\n\ndef merge(x):\n    x = deque(x)\n    while True:\n        if not x:\n            break\n        if x[0] == 0:\n            x.popleft()\n        else:\n            break\n    while True:\n        if not x:\n            break\n        if x[-1] == 0:\n            x.pop()\n        else:\n            break\n    if not x:\n        return x\n    i = 0\n    while i < len(x) - 1:\n        if x[i] == x[i + 1]:\n            x[i] = x[i] * 2\n            x.pop(i + 1)\n        i += 1\n    return x\n\n\ndef move_left(x):\n    y = []\n    for i in x:\n        y.append(merge(i))\n    return y\n\n\ndef move_right(x):\n    y = []\n    for i in x:\n        y.append(list(reversed(merge(reversed(i)))))\n    return y\n\n\ndef move_up(x):\n    y = []\n    for i in range(4):\n        y.append(merge([x[j][i] for j in range(4)]))\n    return y\n\n\ndef move_down(x):\n    y = []\n    for i in range(4):\n        y.append(list(reversed(merge(reversed([x[j][i] for j in range(4)])))))\n    return y\n\n\ndef move(x, d):\n    if d == 0:\n        x = move_left(x)\n    elif d == 1:\n        x = move_up(x)\n    elif d == 2:\n        x = move_right(x)\n    elif d == 3:\n        x = move_down(x)\n    return x\n\n\ndef main():\n    x = []\n    for _ in range(4):\n        x.append(list(map(int, input().split())))\n    d = int(input())\n    x = move(x, d)\n    for i in range(4):\n        for j in range(4):\n            print(x[i][j], end=' ')\n        print()\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649808189,
  "object": "edit"
}
2022-04-13 00:03:24.192473 fix syntax errors 3 ["# from collections import deque\n#\n#\n# def merge(x):\n#     x = deque(x)\n#     while True:\n#         if not x:\n#             break\n#         if x[0] == 0:\n#             x.popleft()\n#         else:\n#             break\n#     while True:\n#         if not x:\n#             break\n#         if x[-1] == 0:\n#             x.pop()\n#         else:\n#             break\n#     if not x:\n#         return x\n#     i = 0\n#     while i < len(x) - 1:\n#         if x[i] == x[i + 1]:\n#             x[i] = x[i] * 2\n#             x.pop(i + 1)\n#         i += 1\n#     return x\n#\n#\n# def move_left(x):\n#     y = []\n#     for i in x:\n#         y.append(merge(i))\n#     return y\n#\n#\n# def move_right(x):\n#     y = []\n#     for i in x:\n#         y.append(list(reversed(merge(reversed(i)))))\n#     return y\n#\n#\n# def move_up(x):\n#     y = []\n#     for i in range(4):\n#         y.append(merge([x[j][i] for j in range(4)]))\n#     return y\n#\n#\n# def move_down(x):\n#     y = []\n#     for i in range(4):\n#         y.append(list(reversed(merge(reversed([x[j][i] for j in range(4)])))))\n#     return y\n#\n#\n# def move(x, d):\n#     if d == 0:\n#         x = move_left(x)\n#     elif d == 1:\n#         x = move_up(x)\n#     elif d == 2:\n#         x = move_right(x)\n#     elif d == 3:\n#         x = move_down(x)\n#     return x\n#\n#\n# def main():\n#     x = []\n#     for _ in range(4):\n#         x.append(list(map(int, input().split())))\n#     d = int(input())\n#     x = move(x, d)\n#     for i in range(4):\n#         for j in range(4):\n#             print(x[i][j], end=' ')\n#         print()\n#\n#\n# if __name__ == '__main__':\n#     main()\n\nfrom collections import deque\n\n\ndef merge(x):\n    x = deque(x)\n    while True:\n        if not x:\n            break\n        if x[0] == 0:\n            x.popleft()\n        else:\n            break\n    while True:\n        if not x:\n            break\n        if x[-1] == 0:\n            x.pop()\n        else:\n            break\n    if not x:\n        return x\n    i = 0\n    while i < len(x) - 1:\n        if x[i] == x[i + 1]:\n            x[i] = x[i] * 2\n            x.pop(i + 1)\n        i += 1\n    return x\n\n\ndef move_left(x):\n    y = []\n    for i in x:\n        y.append(merge(i))\n    return y\n\n\ndef move_right(x):\n    y = []\n    for i in x:\n        y.append(list(reversed(merge(reversed(i)))))\n    return y\n\n\ndef move_up(x):\n    y = []\n    for i in range(4):\n        y.append(merge([x[j][i] for j in range(4)]))\n    return y\n\n\ndef move_down(x):\n    y = []\n    for i in range(4):\n        y.append(list(reversed(merge(reversed([x[j][i] for j in range(4)])))))\n    return y\n\n\ndef move(x, d):\n    if d == 0:\n        x = move_left(x)\n    elif d == 1:\n        x = move_up(x)\n    elif d == 2:\n        x = move_right(x)\n    elif d == 3:\n        x = move_down(x)\n    return x\n\n\ndef main():\n    x = []\n    for _ in range(4):\n        x.append(list(map(int, input().split())))\n    d = int(input())\n    x = move(x, d)\n    for i in range(4):\n        for j in range(4):\n            print(x[i][j], end=' ')\n        print()\n\n\nif __name__ == '__main__':\n    main()\n", "from collections import deque\n\n\ndef merge(x):\n    x = deque(x)\n    while True:\n        if not x:\n            break\n        if x[0] == 0:\n            x.popleft()\n        else:\n            break\n    while True:\n        if not x:\n            break\n        if x[-1] == 0:\n            x.pop()\n        else:\n            break\n    if not x:\n        return x\n    i = 0\n    while i < len(x) - 1:\n        if x[i] == x[i + 1]:\n            x[i] = x[i] * 2\n            x.pop(i + 1)\n        i += 1\n    return x\n\n\ndef move_left(x):\n    y = []\n    for i in x:\n        y.append(merge(i))\n    return y\n\n\ndef move_right(x):\n    y = []\n    for i in x:\n        y.append(list(reversed(merge(reversed(i)))))\n    return y\n\n\ndef move_up(x):\n    y = []\n    for i in range(4):\n        y.append(merge([x[j][i] for j in range(4)]))\n    return y\n\n\ndef move_down(x):\n    y = []\n    for i in range(4):\n        y.append(list(reversed(merge(reversed([x[j][i] for j in range(4)])))))\n    return y\n\n\ndef move(x, d):\n    if d == 0:\n        x = move_left(x)\n    elif d == 1:\n        x = move_up(x)\n    elif d == 2:\n        x = move_right(x)\n    elif d == 3:\n        x = move_down(x)\n    return x\n\n\ndef main():\n    x = []\n    for _ in range(4):\n        x.append(list(map(int, input().split())))\n    d = int(input())\n    x = move(x, d)\n    for i in range(4):\n        for j in range(4):\n            print(x[i][j], end=' ')\n        print()\n\n\nif __name__ == '__main__':\n    main()\n", "\nfrom collections import deque\n\n\ndef merge(x):\n    x = deque(x)\n    while True:\n        if not x:\n            break\n        if x[0] == 0:\n            x.popleft()\n        else:\n            break\n    while True:\n        if not x:\n            break\n        if x[-1] == 0:\n            x.pop()\n        else:\n            break\n    if not x:\n        return x\n    i = 0\n    while i < len(x) - 1:\n        if x[i] == x[i + 1]:\n            x[i] = x[i] * 2\n            x.pop(i + 1)\n        i += 1\n    return x\n\n\ndef move_left(x):\n    y = []\n    for i in x:\n        y.append(merge(i))\n    return y\n\n\ndef move_right(x):\n    y = []\n    for i in x:\n        y.append(list(reversed(merge(reversed(i)))))\n    return y\n\n\ndef move_up(x):\n    y = []\n    for i in range(4):\n        y.append(merge([x[j][i] for j in range(4)]))\n    return y\n\n\ndef move_down(x):\n    y = []\n    for i in range(4):\n        y.append(list(reversed(merge(reversed([x[j][i] for j in range(4)])))))\n    return y\n\n\ndef move(x, d):\n    if d == 0:\n        x = move_left(x)\n    elif d == 1:\n        x = move_up(x)\n    elif d == 2:\n        x = move_right(x)\n    elif d == 3:\n        x = move_down(x)\n    return x\n\n\ndef main():\n    x = []\n    for _ in range(4):\n        x.append(list(map(int, input().split())))\n    d = int(input())\n    x = move(x, d)\n    for i in range(4):\n        for j in range(4):\n            print(x[i][j], end=' ')\n        print()\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 00:03:24.192621 size on output set 8
2022-04-13 00:03:24.192653 num operations 2
2022-04-13 00:03:24.192658 size on input set 1
2022-04-13 00:03:28.063499 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# This solution uses the merge function from the previous problem.\n\ndef merge(lst):\n    if len(lst) <= 1:\n        return lst\n    else:\n        i = 0\n        while i < len(lst) - 1:\n            if lst[i] == lst[i + 1]:\n                lst[i] = lst[i] * 2\n                lst.pop(i + 1)\n            i += 1\n        return lst\n\ndef rotate(lst):\n    new_lst = []\n    for i in range(len(lst)): # for each column\n        new_lst.append([])\n        for row in lst: # for each row\n            new_lst[i].append(row[i])\n    return new_lst\n\n# rotate once to the left\n# rotate 3 times to the right\n\ndef move_left(grid):\n    new_grid = []\n    for row in grid:\n        new_row = merge([i for i in row if i != 0])\n        new_row += [0] * (4 - len(new_row))\n        new_grid.append(new_row)\n    return new_grid\n\ndef move_up(grid):\n    return move_left(rotate(rotate(rotate(grid))))\n\ndef move_right(grid):\n    return rotate(rotate(move_left(rotate(rotate(grid)))))\n\ndef move_down(grid):\n    return rotate(move_left(rotate(rotate(rotate(grid)))))\n\n# get the grid\ngrid = []\nfor i in range(4):\n    grid.append(list(map(int, input().split())))\n\n# get the direction\ndirection = int(input())\n\nif direction == 0:\n    new_grid = move_left(grid)\nelif direction == 1:\n    new_grid = move_up(grid)\nelif direction == 2:\n    new_grid = move_right(grid)\nelif direction == 3:\n    new_grid = move_down(grid)\n\n# print the new grid\nfor row in new_grid:\n    print(*row)\n"
    },
    {
      "index": 1,
      "text": "\n\n# This solution uses the merge function from the previous problem\n\ndef merge(lst):\n    if len(lst) <= 1:\n        return lst\n    else:\n        i = 0\n        while i < len(lst) - 1:\n            if lst[i] == lst[i + 1]:\n                lst[i] = lst[i] * 2\n                lst.pop(i + 1)\n            i += 1\n        return lst\n\ndef rotate(lst):\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append([])\n        for row in lst:\n            new_lst[i].append(row[i])\n    return new_lst\n\ndef move_left(grid):\n    new_grid = []\n    for row in grid:\n        new_row = merge([i for i in row if i != 0])\n        new_row += [0] * (4 - len(new_row))\n        new_grid.append(new_row)\n    return new_grid\n\ndef move_up(grid):\n    return move_left(rotate(rotate(rotate(grid))))\n\ndef move_right(grid):\n    return rotate(rotate(move_left(rotate(rotate(grid)))))\n\ndef move_down(grid):\n    return rotate(move_left(rotate(rotate(rotate(grid)))))\n\ngrid = []\nfor i in range(4):\n    grid.append(list(map(int, input().split())))\n\ndirection = int(input())\n\nif direction == 0:\n    new_grid = move_left(grid)\nelif direction == 1:\n    new_grid = move_up(grid)\nelif direction == 2:\n    new_grid = move_right(grid)\nelif direction == 3:\n    new_grid = move_down(grid)\n\nfor row in new_grid:\n    print(*row)\n"
    },
    {
      "index": 2,
      "text": "\n\n# This solution uses the merge function from the previous problem\n\ndef merge(lst):\n    if len(lst) <= 1:\n        return lst\n    else:\n        i = 0\n        while i < len(lst) - 1:\n            if lst[i] == lst[i + 1]:\n                lst[i] = lst[i] * 2\n                lst.pop(i + 1)\n            i += 1\n        return lst\n\ndef rotate(lst):\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append([])\n        for row in lst:\n            new_lst[i].append(row[i])\n    return new_lst\n\ndef move_left(grid):\n    new_grid = []\n    for row in grid:\n        new_row = merge([i for i in row if i != 0])\n        new_row += [0] * (4 - len(new_row))\n        new_grid.append(new_row)\n    return new_grid\n\ndef move_up(grid):\n    return move_left(rotate(rotate(rotate(grid))))\n\ndef move_right(grid):\n    return rotate(rotate(move_left(rotate(rotate(grid)))))\n\ndef move_down(grid):\n    return rotate(move_left(rotate(rotate(rotate(grid)))))\n\ngrid = []\nfor i in range(4):\n    grid.append(list(map(int, input().split())))\n\ndirection = int(input())\n\nif direction == 0:\n    new_grid = move_left(grid)\nelif direction == 1:\n    new_grid = move_up(grid)\nelif direction == 2:\n    new_grid = move_right(grid)\nelif direction == 3:\n    new_grid = move_down(grid)\n\nfor row in new_grid:\n    print(*row)\n"
    }
  ],
  "created": 1649808204,
  "object": "edit"
}
2022-04-13 00:03:28.063681 fix spelling mistakes 3 ['\n\n# This solution uses the merge function from the previous problem.\n\ndef merge(lst):\n    if len(lst) <= 1:\n        return lst\n    else:\n        i = 0\n        while i < len(lst) - 1:\n            if lst[i] == lst[i + 1]:\n                lst[i] = lst[i] * 2\n                lst.pop(i + 1)\n            i += 1\n        return lst\n\ndef rotate(lst):\n    new_lst = []\n    for i in range(len(lst)): # for each column\n        new_lst.append([])\n        for row in lst: # for each row\n            new_lst[i].append(row[i])\n    return new_lst\n\n# rotate once to the left\n# rotate 3 times to the right\n\ndef move_left(grid):\n    new_grid = []\n    for row in grid:\n        new_row = merge([i for i in row if i != 0])\n        new_row += [0] * (4 - len(new_row))\n        new_grid.append(new_row)\n    return new_grid\n\ndef move_up(grid):\n    return move_left(rotate(rotate(rotate(grid))))\n\ndef move_right(grid):\n    return rotate(rotate(move_left(rotate(rotate(grid)))))\n\ndef move_down(grid):\n    return rotate(move_left(rotate(rotate(rotate(grid)))))\n\n# get the grid\ngrid = []\nfor i in range(4):\n    grid.append(list(map(int, input().split())))\n\n# get the direction\ndirection = int(input())\n\nif direction == 0:\n    new_grid = move_left(grid)\nelif direction == 1:\n    new_grid = move_up(grid)\nelif direction == 2:\n    new_grid = move_right(grid)\nelif direction == 3:\n    new_grid = move_down(grid)\n\n# print the new grid\nfor row in new_grid:\n    print(*row)\n', '\n\n# This solution uses the merge function from the previous problem\n\ndef merge(lst):\n    if len(lst) <= 1:\n        return lst\n    else:\n        i = 0\n        while i < len(lst) - 1:\n            if lst[i] == lst[i + 1]:\n                lst[i] = lst[i] * 2\n                lst.pop(i + 1)\n            i += 1\n        return lst\n\ndef rotate(lst):\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append([])\n        for row in lst:\n            new_lst[i].append(row[i])\n    return new_lst\n\ndef move_left(grid):\n    new_grid = []\n    for row in grid:\n        new_row = merge([i for i in row if i != 0])\n        new_row += [0] * (4 - len(new_row))\n        new_grid.append(new_row)\n    return new_grid\n\ndef move_up(grid):\n    return move_left(rotate(rotate(rotate(grid))))\n\ndef move_right(grid):\n    return rotate(rotate(move_left(rotate(rotate(grid)))))\n\ndef move_down(grid):\n    return rotate(move_left(rotate(rotate(rotate(grid)))))\n\ngrid = []\nfor i in range(4):\n    grid.append(list(map(int, input().split())))\n\ndirection = int(input())\n\nif direction == 0:\n    new_grid = move_left(grid)\nelif direction == 1:\n    new_grid = move_up(grid)\nelif direction == 2:\n    new_grid = move_right(grid)\nelif direction == 3:\n    new_grid = move_down(grid)\n\nfor row in new_grid:\n    print(*row)\n', '\n\n# This solution uses the merge function from the previous problem\n\ndef merge(lst):\n    if len(lst) <= 1:\n        return lst\n    else:\n        i = 0\n        while i < len(lst) - 1:\n            if lst[i] == lst[i + 1]:\n                lst[i] = lst[i] * 2\n                lst.pop(i + 1)\n            i += 1\n        return lst\n\ndef rotate(lst):\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append([])\n        for row in lst:\n            new_lst[i].append(row[i])\n    return new_lst\n\ndef move_left(grid):\n    new_grid = []\n    for row in grid:\n        new_row = merge([i for i in row if i != 0])\n        new_row += [0] * (4 - len(new_row))\n        new_grid.append(new_row)\n    return new_grid\n\ndef move_up(grid):\n    return move_left(rotate(rotate(rotate(grid))))\n\ndef move_right(grid):\n    return rotate(rotate(move_left(rotate(rotate(grid)))))\n\ndef move_down(grid):\n    return rotate(move_left(rotate(rotate(rotate(grid)))))\n\ngrid = []\nfor i in range(4):\n    grid.append(list(map(int, input().split())))\n\ndirection = int(input())\n\nif direction == 0:\n    new_grid = move_left(grid)\nelif direction == 1:\n    new_grid = move_up(grid)\nelif direction == 2:\n    new_grid = move_right(grid)\nelif direction == 3:\n    new_grid = move_down(grid)\n\nfor row in new_grid:\n    print(*row)\n']
2022-04-13 00:03:28.063797 size on output set 2
2022-04-13 00:03:28.063815 size on input set 2
2022-04-13 00:03:38.449283 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# This solution uses the merge function from the previous problem.\n\ndef merge(lst):\n    if len(lst) <= 1:\n        return lst\n    else:\n        i = 0\n        while i < len(lst) - 1:\n            if lst[i] == lst[i + 1]:\n                lst[i] = lst[i] * 2\n                lst.pop(i + 1)\n            i += 1\n        return lst\n\ndef rotate(lst):\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append([])\n        for row in lst:\n            new_lst[i].append(row[i])\n    return new_lst\n\ndef move_left(grid):\n    new_grid = []\n    for row in grid:\n        new_row = merge([i for i in row if i != 0])\n        new_row += [0] * (4 - len(new_row))\n        new_grid.append(new_row)\n    return new_grid\n\ndef move_up(grid):\n    return move_left(rotate(rotate(rotate(grid))))\n\ndef move_right(grid):\n    return rotate(rotate(move_left(rotate(rotate(grid)))))\n\ndef move_down(grid):\n    return rotate(move_left(rotate(rotate(rotate(grid)))))\n\ngrid = []\nfor i in range(4):\n    grid.append(list(map(int, input().split())))\n\ndirection = int(input())\n\nif direction == 0:\n    new_grid = move_left(grid)\nelif direction == 1:\n    new_grid = move_up(grid)\nelif direction == 2:\n    new_grid = move_right(grid)\nelif direction == 3:\n    new_grid = move_down(grid)\n\nfor row in new_grid:\n    print(*row)\n"
    },
    {
      "index": 1,
      "text": "\n\n# This solution uses the merge function from the previous problem.\n\ndef merge(lst):\n    if len(lst) <= 1:\n        return lst\n    else:\n        i = 0\n        while i < len(lst) - 1:\n            if lst[i] == lst[i + 1]:\n                lst[i] = lst[i] * 2\n                lst.pop(i + 1)\n            i += 1\n        return lst\n\ndef rotate(lst):\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append([])\n        for row in lst:\n            new_lst[i].append(row[i])\n    return new_lst\n\ndef move_left(grid):\n    new_grid = []\n    for row in grid:\n        new_row = merge([i for i in row if i != 0])\n        new_row += [0] * (4 - len(new_row))\n        new_grid.append(new_row)\n    return new_grid\n\ndef move_up(grid):\n    return move_left(rotate(rotate(rotate(grid))))\n\ndef move_right(grid):\n    return rotate(rotate(move_left(rotate(rotate(grid)))))\n\ndef move_down(grid):\n    return rotate(move_left(rotate(rotate(rotate(grid)))))\n\ngrid = []\nfor i in range(4):\n    grid.append(list(map(int, input().split())))\n\ndirection = int(input())\n\nif direction == 0:\n    new_grid = move_left(grid)\nelif direction == 1:\n    new_grid = move_up(grid)\nelif direction == 2:\n    new_grid = move_right(grid)\nelif direction == 3:\n    new_grid = move_down(grid)\n\nfor row in new_grid:\n    print(*row)\n"
    },
    {
      "index": 2,
      "text": "\nprint(\"Hello World\")\n"
    }
  ],
  "created": 1649808208,
  "object": "edit"
}
2022-04-13 00:03:38.449477 fix syntax errors 3 ['\n\n# This solution uses the merge function from the previous problem.\n\ndef merge(lst):\n    if len(lst) <= 1:\n        return lst\n    else:\n        i = 0\n        while i < len(lst) - 1:\n            if lst[i] == lst[i + 1]:\n                lst[i] = lst[i] * 2\n                lst.pop(i + 1)\n            i += 1\n        return lst\n\ndef rotate(lst):\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append([])\n        for row in lst:\n            new_lst[i].append(row[i])\n    return new_lst\n\ndef move_left(grid):\n    new_grid = []\n    for row in grid:\n        new_row = merge([i for i in row if i != 0])\n        new_row += [0] * (4 - len(new_row))\n        new_grid.append(new_row)\n    return new_grid\n\ndef move_up(grid):\n    return move_left(rotate(rotate(rotate(grid))))\n\ndef move_right(grid):\n    return rotate(rotate(move_left(rotate(rotate(grid)))))\n\ndef move_down(grid):\n    return rotate(move_left(rotate(rotate(rotate(grid)))))\n\ngrid = []\nfor i in range(4):\n    grid.append(list(map(int, input().split())))\n\ndirection = int(input())\n\nif direction == 0:\n    new_grid = move_left(grid)\nelif direction == 1:\n    new_grid = move_up(grid)\nelif direction == 2:\n    new_grid = move_right(grid)\nelif direction == 3:\n    new_grid = move_down(grid)\n\nfor row in new_grid:\n    print(*row)\n', '\n\n# This solution uses the merge function from the previous problem.\n\ndef merge(lst):\n    if len(lst) <= 1:\n        return lst\n    else:\n        i = 0\n        while i < len(lst) - 1:\n            if lst[i] == lst[i + 1]:\n                lst[i] = lst[i] * 2\n                lst.pop(i + 1)\n            i += 1\n        return lst\n\ndef rotate(lst):\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append([])\n        for row in lst:\n            new_lst[i].append(row[i])\n    return new_lst\n\ndef move_left(grid):\n    new_grid = []\n    for row in grid:\n        new_row = merge([i for i in row if i != 0])\n        new_row += [0] * (4 - len(new_row))\n        new_grid.append(new_row)\n    return new_grid\n\ndef move_up(grid):\n    return move_left(rotate(rotate(rotate(grid))))\n\ndef move_right(grid):\n    return rotate(rotate(move_left(rotate(rotate(grid)))))\n\ndef move_down(grid):\n    return rotate(move_left(rotate(rotate(rotate(grid)))))\n\ngrid = []\nfor i in range(4):\n    grid.append(list(map(int, input().split())))\n\ndirection = int(input())\n\nif direction == 0:\n    new_grid = move_left(grid)\nelif direction == 1:\n    new_grid = move_up(grid)\nelif direction == 2:\n    new_grid = move_right(grid)\nelif direction == 3:\n    new_grid = move_down(grid)\n\nfor row in new_grid:\n    print(*row)\n', '\nprint("Hello World")\n']
2022-04-13 00:03:42.488574 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# This solution uses the merge function from the previous problem.\n\ndef merge(lst):\n    if len(lst) <= 1:\n        return lst\n    else:\n        i = 0\n        while i < len(lst) - 1:\n            if lst[i] == lst[i + 1]:\n                lst[i] = lst[i] * 2\n                lst.pop(i + 1)\n            i += 1\n        return lst\n\ndef rotate(lst):\n    new_lst = []\n    for i in range(len(lst)): # for each column\n        new_lst.append([])\n        for row in lst: # for each row\n            new_lst[i].append(row[i])\n    return new_lst\n\n# rotate once to the left\n# rotate 3 times to the right\ndef move_left(grid):\n    new_grid = []\n    for row in grid:\n        new_row = merge([i for i in row if i != 0])\n        new_row += [0] * (4 - len(new_row))\n        new_grid.append(new_row)\n    return new_grid\n\ndef move_up(grid):\n    return move_left(rotate(rotate(rotate(grid))))\n\ndef move_right(grid):\n    return rotate(rotate(move_left(rotate(rotate(grid)))))\n\ndef move_down(grid):\n    return rotate(move_left(rotate(rotate(rotate(grid)))))\n\n# get the grid\ngrid = []\nfor i in range(4):\n    grid.append(list(map(int, input().split())))\n\n# get the direction\ndirection = int(input())\n\nif direction == 0:\n    new_grid = move_left(grid)\nelif direction == 1:\n    new_grid = move_up(grid)\nelif direction == 2:\n    new_grid = move_right(grid)\nelif direction == 3:\n    new_grid = move_down(grid)\n\n# print the new grid\nfor row in new_grid:\n    print(*row)\n"
    },
    {
      "index": 1,
      "text": "\n# This solution uses the merge function from the previous problem.\n\ndef merge(lst):\n    if len(lst) <= 1:\n        return lst\n    else:\n        i = 0\n        while i < len(lst) - 1:\n            if lst[i] == lst[i + 1]:\n                lst[i] = lst[i] * 2\n                lst.pop(i + 1)\n            i += 1\n        return lst\n\ndef rotate(lst):\n    new_lst = []\n    for i in range(len(lst)): # for each column\n        new_lst.append([])\n        for row in lst: # for each row\n            new_lst[i].append(row[i])\n    return new_lst\n\n# rotate once to the left\n# rotate 3 times to the right\ndef move_left(grid):\n    new_grid = []\n    for row in grid:\n        new_row = merge([i for i in row if i != 0])\n        new_row += [0] * (4 - len(new_row))\n        new_grid.append(new_row)\n    return new_grid\n\ndef move_up(grid):\n    return move_left(rotate(rotate(rotate(grid))))\n\ndef move_right(grid):\n    return rotate(rotate(move_left(rotate(rotate(grid)))))\n\ndef move_down(grid):\n    return rotate(move_left(rotate(rotate(rotate(grid)))))\n\n# get the grid\ngrid = []\nfor i in range(4):\n    grid.append(list(map(int, input().split())))\n\n# get the direction\ndirection = int(input())\n\nif direction == 0:\n    new_grid = move_left(grid)\nelif direction == 1:\n    new_grid = move_up(grid)\nelif direction == 2:\n    new_grid = move_right(grid)\nelif direction == 3:\n    new_grid = move_down(grid)\n\n# print the new grid\nfor row in new_grid:\n    print(*row)\n"
    },
    {
      "index": 2,
      "text": "\n#\n# This solution uses the merge function from the previous problem.\n\ndef merge(lst):\n    if len(lst) <= 1:\n        return lst\n    else:\n        i = 0\n        while i < len(lst) - 1:\n            if lst[i] == lst[i + 1]:\n                lst[i] = lst[i] * 2\n                lst.pop(i + 1)\n            i += 1\n        return lst\n#\ndef rotate(lst):\n    new_lst = []\n    for i in range(len(lst)): # for each column\n        new_lst.append([])\n        for row in lst: # for each row\n            new_lst[i].append(row[i])\n    return new_lst\n#\n# rotate once to the left\n# rotate 3 times to the right\n#\ndef move_left(grid):\n    new_grid = []\n    for row in grid:\n        new_row = merge([i for i in row if i != 0])\n        new_row += [0] * (4 - len(new_row))\n        new_grid.append(new_row)\n    return new_grid\n#\ndef move_up(grid):\n    return move_left(rotate(rotate(rotate(grid))))\n#\ndef move_right(grid):\n    return rotate(rotate(move_left(rotate(rotate(grid)))))\n#\ndef move_down(grid):\n    return rotate(move_left(rotate(rotate(rotate(grid)))))\n#\n# get the grid\ngrid = []\nfor i in range(4):\n    grid.append(list(map(int, input().split())))\n#\n# get the direction\ndirection = int(input())\n#\nif direction == 0:\n    new_grid = move_left(grid)\nelif direction == 1:\n    new_grid = move_up(grid)\nelif direction == 2:\n    new_grid = move_right(grid)\nelif direction == 3:\n    new_grid = move_down(grid)\n#\n# print the new grid\nfor row in new_grid:\n    print(*row)\n"
    }
  ],
  "created": 1649808218,
  "object": "edit"
}
2022-04-13 00:03:42.488847 fix syntax errors 3 ['\n# This solution uses the merge function from the previous problem.\n\ndef merge(lst):\n    if len(lst) <= 1:\n        return lst\n    else:\n        i = 0\n        while i < len(lst) - 1:\n            if lst[i] == lst[i + 1]:\n                lst[i] = lst[i] * 2\n                lst.pop(i + 1)\n            i += 1\n        return lst\n\ndef rotate(lst):\n    new_lst = []\n    for i in range(len(lst)): # for each column\n        new_lst.append([])\n        for row in lst: # for each row\n            new_lst[i].append(row[i])\n    return new_lst\n\n# rotate once to the left\n# rotate 3 times to the right\ndef move_left(grid):\n    new_grid = []\n    for row in grid:\n        new_row = merge([i for i in row if i != 0])\n        new_row += [0] * (4 - len(new_row))\n        new_grid.append(new_row)\n    return new_grid\n\ndef move_up(grid):\n    return move_left(rotate(rotate(rotate(grid))))\n\ndef move_right(grid):\n    return rotate(rotate(move_left(rotate(rotate(grid)))))\n\ndef move_down(grid):\n    return rotate(move_left(rotate(rotate(rotate(grid)))))\n\n# get the grid\ngrid = []\nfor i in range(4):\n    grid.append(list(map(int, input().split())))\n\n# get the direction\ndirection = int(input())\n\nif direction == 0:\n    new_grid = move_left(grid)\nelif direction == 1:\n    new_grid = move_up(grid)\nelif direction == 2:\n    new_grid = move_right(grid)\nelif direction == 3:\n    new_grid = move_down(grid)\n\n# print the new grid\nfor row in new_grid:\n    print(*row)\n', '\n# This solution uses the merge function from the previous problem.\n\ndef merge(lst):\n    if len(lst) <= 1:\n        return lst\n    else:\n        i = 0\n        while i < len(lst) - 1:\n            if lst[i] == lst[i + 1]:\n                lst[i] = lst[i] * 2\n                lst.pop(i + 1)\n            i += 1\n        return lst\n\ndef rotate(lst):\n    new_lst = []\n    for i in range(len(lst)): # for each column\n        new_lst.append([])\n        for row in lst: # for each row\n            new_lst[i].append(row[i])\n    return new_lst\n\n# rotate once to the left\n# rotate 3 times to the right\ndef move_left(grid):\n    new_grid = []\n    for row in grid:\n        new_row = merge([i for i in row if i != 0])\n        new_row += [0] * (4 - len(new_row))\n        new_grid.append(new_row)\n    return new_grid\n\ndef move_up(grid):\n    return move_left(rotate(rotate(rotate(grid))))\n\ndef move_right(grid):\n    return rotate(rotate(move_left(rotate(rotate(grid)))))\n\ndef move_down(grid):\n    return rotate(move_left(rotate(rotate(rotate(grid)))))\n\n# get the grid\ngrid = []\nfor i in range(4):\n    grid.append(list(map(int, input().split())))\n\n# get the direction\ndirection = int(input())\n\nif direction == 0:\n    new_grid = move_left(grid)\nelif direction == 1:\n    new_grid = move_up(grid)\nelif direction == 2:\n    new_grid = move_right(grid)\nelif direction == 3:\n    new_grid = move_down(grid)\n\n# print the new grid\nfor row in new_grid:\n    print(*row)\n', '\n#\n# This solution uses the merge function from the previous problem.\n\ndef merge(lst):\n    if len(lst) <= 1:\n        return lst\n    else:\n        i = 0\n        while i < len(lst) - 1:\n            if lst[i] == lst[i + 1]:\n                lst[i] = lst[i] * 2\n                lst.pop(i + 1)\n            i += 1\n        return lst\n#\ndef rotate(lst):\n    new_lst = []\n    for i in range(len(lst)): # for each column\n        new_lst.append([])\n        for row in lst: # for each row\n            new_lst[i].append(row[i])\n    return new_lst\n#\n# rotate once to the left\n# rotate 3 times to the right\n#\ndef move_left(grid):\n    new_grid = []\n    for row in grid:\n        new_row = merge([i for i in row if i != 0])\n        new_row += [0] * (4 - len(new_row))\n        new_grid.append(new_row)\n    return new_grid\n#\ndef move_up(grid):\n    return move_left(rotate(rotate(rotate(grid))))\n#\ndef move_right(grid):\n    return rotate(rotate(move_left(rotate(rotate(grid)))))\n#\ndef move_down(grid):\n    return rotate(move_left(rotate(rotate(rotate(grid)))))\n#\n# get the grid\ngrid = []\nfor i in range(4):\n    grid.append(list(map(int, input().split())))\n#\n# get the direction\ndirection = int(input())\n#\nif direction == 0:\n    new_grid = move_left(grid)\nelif direction == 1:\n    new_grid = move_up(grid)\nelif direction == 2:\n    new_grid = move_right(grid)\nelif direction == 3:\n    new_grid = move_down(grid)\n#\n# print the new grid\nfor row in new_grid:\n    print(*row)\n']
2022-04-13 00:03:42.488928 size on output set 4
2022-04-13 00:03:42.488941 num operations 2
2022-04-13 00:03:42.488946 size on input set 1
2022-04-13 00:03:44.256605 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef move_left(grid):\n    for row in grid:\n        i = 0\n        while i < len(row):\n            if row[i] == 0:\n                for j in range(i+1,len(row)):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i += 1\n        i = 0\n        while i < len(row)-1:\n            if row[i] == row[i+1]:\n                row[i] *= 2\n                del row[i+1]\n                row.append(0)\n                i += 1\n            i += 1\n    return grid\n\ndef move_up(grid):\n    grid_new = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_left(grid_new)\n    grid = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef move_right(grid):\n    for row in grid:\n        i = len(row)-1\n        while i >= 0:\n            if row[i] == 0:\n                for j in range(i-1,-1,-1):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i -= 1\n        i = len(row)-1\n        while i > 0:\n            if row[i] == row[i-1]:\n                row[i] *= 2\n                del row[i-1]\n                row.insert(0,0)\n                i -= 1\n            i -= 1\n    return grid\n\ndef move_down(grid):\n    grid_new = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_right(grid_new)\n    grid = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int,sys.stdin.readline().strip().split())))\n    direction = int(sys.stdin.readline().strip())\n    if direction == 0:\n        grid = move_left(grid)\n    elif direction == 1:\n        grid = move_up(grid)\n    elif direction == 2:\n        grid = move_right(grid)\n    elif direction == 3:\n        grid = move_down(grid)\n    for row in grid:\n        print(' '.join(map(str,row)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef move_left(grid):\n    for row in grid:\n        i = 0\n        while i < len(row):\n            if row[i] == 0:\n                for j in range(i+1,len(row)):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i += 1\n        i = 0\n        while i < len(row)-1:\n            if row[i] == row[i+1]:\n                row[i] *= 2\n                del row[i+1]\n                row.append(0)\n                i += 1\n            i += 1\n    return grid\n\ndef move_up(grid):\n    grid_new = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_left(grid_new)\n    grid = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef move_right(grid):\n    for row in grid:\n        i = len(row)-1\n        while i >= 0:\n            if row[i] == 0:\n                for j in range(i-1,-1,-1):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i -= 1\n        i = len(row)-1\n        while i > 0:\n            if row[i] == row[i-1]:\n                row[i] *= 2\n                del row[i-1]\n                row.insert(0,0)\n                i -= 1\n            i -= 1\n    return grid\n\ndef move_down(grid):\n    grid_new = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_right(grid_new)\n    grid = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int,sys.stdin.readline().strip().split())))\n    direction = int(sys.stdin.readline().strip())\n    if direction == 0:\n        grid = move_left(grid)\n    elif direction == 1:\n        grid = move_up(grid)\n    elif direction == 2:\n        grid = move_right(grid)\n    elif direction == 3:\n        grid = move_down(grid)\n    for row in grid:\n        print(' '.join(map(str,row)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "#\n\nimport sys\n\ndef move_left(grid):\n    for row in grid:\n        i = 0\n        while i < len(row):\n            if row[i] == 0:\n                for j in range(i+1,len(row)):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i += 1\n        i = 0\n        while i < len(row)-1:\n            if row[i] == row[i+1]:\n                row[i] *= 2\n                del row[i+1]\n                row.append(0)\n                i += 1\n            i += 1\n    return grid\n\ndef move_up(grid):\n    grid_new = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_left(grid_new)\n    grid = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef move_right(grid):\n    for row in grid:\n        i = len(row)-1\n        while i >= 0:\n            if row[i] == 0:\n                for j in range(i-1,-1,-1):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i -= 1\n        i = len(row)-1\n        while i > 0:\n            if row[i] == row[i-1]:\n                row[i] *= 2\n                del row[i-1]\n                row.insert(0,0)\n                i -= 1\n            i -= 1\n    return grid\n\ndef move_down(grid):\n    grid_new = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_right(grid_new)\n    grid = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int,sys.stdin.readline().strip().split())))\n    direction = int(sys.stdin.readline().strip())\n    if direction == 0:\n        grid = move_left(grid)\n    elif direction == 1:\n        grid = move_up(grid)\n    elif direction == 2:\n        grid = move_right(grid)\n    elif direction == 3:\n        grid = move_down(grid)\n    for row in grid:\n        print(' '.join(map(str,row)))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649808222,
  "object": "edit"
}
2022-04-13 00:03:44.256851 fix spelling mistakes 3 ["\nimport sys\n\ndef move_left(grid):\n    for row in grid:\n        i = 0\n        while i < len(row):\n            if row[i] == 0:\n                for j in range(i+1,len(row)):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i += 1\n        i = 0\n        while i < len(row)-1:\n            if row[i] == row[i+1]:\n                row[i] *= 2\n                del row[i+1]\n                row.append(0)\n                i += 1\n            i += 1\n    return grid\n\ndef move_up(grid):\n    grid_new = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_left(grid_new)\n    grid = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef move_right(grid):\n    for row in grid:\n        i = len(row)-1\n        while i >= 0:\n            if row[i] == 0:\n                for j in range(i-1,-1,-1):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i -= 1\n        i = len(row)-1\n        while i > 0:\n            if row[i] == row[i-1]:\n                row[i] *= 2\n                del row[i-1]\n                row.insert(0,0)\n                i -= 1\n            i -= 1\n    return grid\n\ndef move_down(grid):\n    grid_new = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_right(grid_new)\n    grid = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int,sys.stdin.readline().strip().split())))\n    direction = int(sys.stdin.readline().strip())\n    if direction == 0:\n        grid = move_left(grid)\n    elif direction == 1:\n        grid = move_up(grid)\n    elif direction == 2:\n        grid = move_right(grid)\n    elif direction == 3:\n        grid = move_down(grid)\n    for row in grid:\n        print(' '.join(map(str,row)))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef move_left(grid):\n    for row in grid:\n        i = 0\n        while i < len(row):\n            if row[i] == 0:\n                for j in range(i+1,len(row)):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i += 1\n        i = 0\n        while i < len(row)-1:\n            if row[i] == row[i+1]:\n                row[i] *= 2\n                del row[i+1]\n                row.append(0)\n                i += 1\n            i += 1\n    return grid\n\ndef move_up(grid):\n    grid_new = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_left(grid_new)\n    grid = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef move_right(grid):\n    for row in grid:\n        i = len(row)-1\n        while i >= 0:\n            if row[i] == 0:\n                for j in range(i-1,-1,-1):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i -= 1\n        i = len(row)-1\n        while i > 0:\n            if row[i] == row[i-1]:\n                row[i] *= 2\n                del row[i-1]\n                row.insert(0,0)\n                i -= 1\n            i -= 1\n    return grid\n\ndef move_down(grid):\n    grid_new = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_right(grid_new)\n    grid = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int,sys.stdin.readline().strip().split())))\n    direction = int(sys.stdin.readline().strip())\n    if direction == 0:\n        grid = move_left(grid)\n    elif direction == 1:\n        grid = move_up(grid)\n    elif direction == 2:\n        grid = move_right(grid)\n    elif direction == 3:\n        grid = move_down(grid)\n    for row in grid:\n        print(' '.join(map(str,row)))\n\nif __name__ == '__main__':\n    main()\n", "#\n\nimport sys\n\ndef move_left(grid):\n    for row in grid:\n        i = 0\n        while i < len(row):\n            if row[i] == 0:\n                for j in range(i+1,len(row)):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i += 1\n        i = 0\n        while i < len(row)-1:\n            if row[i] == row[i+1]:\n                row[i] *= 2\n                del row[i+1]\n                row.append(0)\n                i += 1\n            i += 1\n    return grid\n\ndef move_up(grid):\n    grid_new = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_left(grid_new)\n    grid = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef move_right(grid):\n    for row in grid:\n        i = len(row)-1\n        while i >= 0:\n            if row[i] == 0:\n                for j in range(i-1,-1,-1):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i -= 1\n        i = len(row)-1\n        while i > 0:\n            if row[i] == row[i-1]:\n                row[i] *= 2\n                del row[i-1]\n                row.insert(0,0)\n                i -= 1\n            i -= 1\n    return grid\n\ndef move_down(grid):\n    grid_new = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_right(grid_new)\n    grid = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int,sys.stdin.readline().strip().split())))\n    direction = int(sys.stdin.readline().strip())\n    if direction == 0:\n        grid = move_left(grid)\n    elif direction == 1:\n        grid = move_up(grid)\n    elif direction == 2:\n        grid = move_right(grid)\n    elif direction == 3:\n        grid = move_down(grid)\n    for row in grid:\n        print(' '.join(map(str,row)))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 00:03:44.256929 size on output set 3
2022-04-13 00:03:44.256935 size on input set 3
2022-04-13 00:03:56.372337 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef move_left(grid):\n    for row in grid:\n        i = 0\n        while i < len(row):\n            if row[i] == 0:\n                for j in range(i+1,len(row)):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i += 1\n        i = 1\n        while i < len(row):\n            if row[i] == row[i+1]:\n                row[i] *= 2\n                del row[i+1]\n                row.append(0)\n                i += 1\n            i += 1\n    return grid\n\ndef move_up(grid):\n    grid_new = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_left(grid_new)\n    grid = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef move_right(grid):\n    for row in grid:\n        i = len(row)-1\n        while i >= 0:\n            if row[i] == 0:\n                for j in range(i-1,-1,-1):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i -= 1\n        i = len(row)-2\n        while i >= 0:\n            if row[i] == row[i-1]:\n                row[i] *= 2\n                del row[i-1]\n                row.insert(0,0)\n                i -= 1\n            i -= 1\n    return grid\n\ndef move_down(grid):\n    grid_new = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_right(grid_new)\n    grid = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int,sys.stdin.readline().strip().split())))\n    direction = int(sys.stdin.readline().strip())\n    if direction == 0:\n        grid = move_left(grid)\n    elif direction == 1:\n        grid = move_up(grid)\n    elif direction == 2:\n        grid = move_right(grid)\n    elif direction == 3:\n        grid = move_down(grid)\n    for row in grid:\n        print(' '.join(map(str,row)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef move_left(grid):\n    for row in grid:\n        i = 0\n        while i < len(row):\n            if row[i] == 0:\n                for j in range(i + 1, len(row)):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i += 1\n        i = 0\n        while i < len(row) - 1:\n            if row[i] == row[i + 1]:\n                row[i] *= 2\n                del row[i + 1]\n                row.append(0)\n                i += 1\n            i += 1\n    return grid\n\ndef move_up(grid):\n    grid_new = [[0] * 4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_left(grid_new)\n    grid = [[0] * 4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef move_right(grid):\n    for row in grid:\n        i = len(row) - 1\n        while i >= 0:\n            if row[i] == 0:\n                for j in range(i - 1, -1, -1):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i -= 1\n        i = len(row) - 1\n        while i > 0:\n            if row[i] == row[i - 1]:\n                row[i] *= 2\n                del row[i - 1]\n                row.insert(0, 0)\n                i -= 1\n            i -= 1\n    return grid\n\ndef move_down(grid):\n    grid_new = [[0] * 4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_right(grid_new)\n    grid = [[0] * 4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int, sys.stdin.readline().strip().split())))\n    direction = int(sys.stdin.readline().strip())\n    if direction == 0:\n        grid = move_left(grid)\n    elif direction == 1:\n        grid = move_up(grid)\n    elif direction == 2:\n        grid = move_right(grid)\n    elif direction == 3:\n        grid = move_down(grid)\n    for row in grid:\n        print(' '.join(map(str, row)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef move_left(grid):\n    for row in grid:\n        for i in range(len(row)):\n            if row[i] == 0:\n                for j in range(i+1,len(row)):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n        for i in range(len(row)-1):\n            if row[i] == row[i+1]:\n                row[i] *= 2\n                del row[i+1]\n                row.append(0)\n                i += 1\n    return grid\n\ndef move_up(grid):\n    grid_new = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_left(grid_new)\n    grid = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef move_right(grid):\n    for row in grid:\n        for i in range(len(row)-1,-1,-1):\n            if row[i] == 0:\n                for j in range(i-1,-1,-1):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n        for i in range(len(row)-1,0,-1):\n            if row[i] == row[i-1]:\n                row[i] *= 2\n                del row[i-1]\n                row.insert(0,0)\n                i -= 1\n    return grid\n\ndef move_down(grid):\n    grid_new = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_right(grid_new)\n    grid = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int,sys.stdin.readline().strip().split())))\n    direction = int(sys.stdin.readline().strip())\n    if direction == 0:\n        grid = move_left(grid)\n    elif direction == 1:\n        grid = move_up(grid)\n    elif direction == 2:\n        grid = move_right(grid)\n    elif direction == 3:\n        grid = move_down(grid)\n    for row in grid:\n        print(' '.join(map(str,row)))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649808224,
  "object": "edit"
}
2022-04-13 00:03:56.372596 fix syntax errors 3 ["import sys\n\ndef move_left(grid):\n    for row in grid:\n        i = 0\n        while i < len(row):\n            if row[i] == 0:\n                for j in range(i+1,len(row)):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i += 1\n        i = 1\n        while i < len(row):\n            if row[i] == row[i+1]:\n                row[i] *= 2\n                del row[i+1]\n                row.append(0)\n                i += 1\n            i += 1\n    return grid\n\ndef move_up(grid):\n    grid_new = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_left(grid_new)\n    grid = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef move_right(grid):\n    for row in grid:\n        i = len(row)-1\n        while i >= 0:\n            if row[i] == 0:\n                for j in range(i-1,-1,-1):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i -= 1\n        i = len(row)-2\n        while i >= 0:\n            if row[i] == row[i-1]:\n                row[i] *= 2\n                del row[i-1]\n                row.insert(0,0)\n                i -= 1\n            i -= 1\n    return grid\n\ndef move_down(grid):\n    grid_new = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_right(grid_new)\n    grid = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int,sys.stdin.readline().strip().split())))\n    direction = int(sys.stdin.readline().strip())\n    if direction == 0:\n        grid = move_left(grid)\n    elif direction == 1:\n        grid = move_up(grid)\n    elif direction == 2:\n        grid = move_right(grid)\n    elif direction == 3:\n        grid = move_down(grid)\n    for row in grid:\n        print(' '.join(map(str,row)))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef move_left(grid):\n    for row in grid:\n        i = 0\n        while i < len(row):\n            if row[i] == 0:\n                for j in range(i + 1, len(row)):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i += 1\n        i = 0\n        while i < len(row) - 1:\n            if row[i] == row[i + 1]:\n                row[i] *= 2\n                del row[i + 1]\n                row.append(0)\n                i += 1\n            i += 1\n    return grid\n\ndef move_up(grid):\n    grid_new = [[0] * 4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_left(grid_new)\n    grid = [[0] * 4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef move_right(grid):\n    for row in grid:\n        i = len(row) - 1\n        while i >= 0:\n            if row[i] == 0:\n                for j in range(i - 1, -1, -1):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i -= 1\n        i = len(row) - 1\n        while i > 0:\n            if row[i] == row[i - 1]:\n                row[i] *= 2\n                del row[i - 1]\n                row.insert(0, 0)\n                i -= 1\n            i -= 1\n    return grid\n\ndef move_down(grid):\n    grid_new = [[0] * 4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_right(grid_new)\n    grid = [[0] * 4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int, sys.stdin.readline().strip().split())))\n    direction = int(sys.stdin.readline().strip())\n    if direction == 0:\n        grid = move_left(grid)\n    elif direction == 1:\n        grid = move_up(grid)\n    elif direction == 2:\n        grid = move_right(grid)\n    elif direction == 3:\n        grid = move_down(grid)\n    for row in grid:\n        print(' '.join(map(str, row)))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef move_left(grid):\n    for row in grid:\n        for i in range(len(row)):\n            if row[i] == 0:\n                for j in range(i+1,len(row)):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n        for i in range(len(row)-1):\n            if row[i] == row[i+1]:\n                row[i] *= 2\n                del row[i+1]\n                row.append(0)\n                i += 1\n    return grid\n\ndef move_up(grid):\n    grid_new = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_left(grid_new)\n    grid = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef move_right(grid):\n    for row in grid:\n        for i in range(len(row)-1,-1,-1):\n            if row[i] == 0:\n                for j in range(i-1,-1,-1):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n        for i in range(len(row)-1,0,-1):\n            if row[i] == row[i-1]:\n                row[i] *= 2\n                del row[i-1]\n                row.insert(0,0)\n                i -= 1\n    return grid\n\ndef move_down(grid):\n    grid_new = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_right(grid_new)\n    grid = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int,sys.stdin.readline().strip().split())))\n    direction = int(sys.stdin.readline().strip())\n    if direction == 0:\n        grid = move_left(grid)\n    elif direction == 1:\n        grid = move_up(grid)\n    elif direction == 2:\n        grid = move_right(grid)\n    elif direction == 3:\n        grid = move_down(grid)\n    for row in grid:\n        print(' '.join(map(str,row)))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 00:04:08.621250 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import random\n\ndef move_left(grid):\n    for row in grid:\n        i = 0\n        while i < len(row):\n            if row[i] == 0:\n                for j in range(i+1,len(row)):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i += 1\n        i = 0\n        while i < len(row)-1:\n            if row[i] == row[i+1]:\n                row[i] *= 2\n                del row[i+1]\n                row.append(0)\n                i += 1\n            i += 1\n    return grid\n\ndef move_up(grid):\n    grid_new = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_left(grid_new)\n    grid = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef move_right(grid):\n    for row in grid:\n        i = len(row)-1\n        while i >= 0:\n            if row[i] == 0:\n                for j in range(i-1,-1,-1):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i -= 1\n        i = len(row)-1\n        while i > 0:\n            if row[i] == row[i-1]:\n                row[i] *= 2\n                del row[i-1]\n                row.insert(0,0)\n                i -= 1\n            i -= 1\n    return grid\n\ndef move_down(grid):\n    grid_new = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_right(grid_new)\n    grid = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef random_grid():\n    grid = [[0]*4 for i in range(4)]\n    for i in range(2):\n        while True:\n            x = random.randint(0,3)\n            y = random.randint(0,3)\n            if grid[x][y] == 0:\n                grid[x][y] = 2\n                break\n    return grid\n\ndef print_grid(grid):\n    for row in grid:\n        print(' '.join(map(str,row)))\n\ndef main():\n    grid = random_grid()\n    while True:\n        print_grid(grid)\n        direction = int(input())\n        if direction == 0:\n            grid = move_left(grid)\n        elif direction == 1:\n            grid = move_up(grid)\n        elif direction == 2:\n            grid = move_right(grid)\n        elif direction == 3:\n            grid = move_down(grid)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef move_left(grid):\n    for row in grid:\n        i = 0\n        while i < len(row):\n            if row[i] == 0:\n                for j in range(i+1,len(row)):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i += 1\n        i = 0\n        while i < len(row)-1:\n            if row[i] == row[i+1]:\n                row[i] *= 2\n                del row[i+1]\n                row.append(0)\n                i += 1\n            i += 1\n    return grid\n\ndef move_up(grid):\n    grid_new = [[0]*4 for _ in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_left(grid_new)\n    grid = [[0]*4 for _ in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef move_right(grid):\n    for row in grid:\n        i = len(row)-1\n        while i >= 0:\n            if row[i] == 0:\n                for j in range(i-1,-1,-1):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i -= 1\n        i = len(row)-1\n        while i > 0:\n            if row[i] == row[i-1]:\n                row[i] *= 2\n                del row[i-1]\n                row.insert(0,0)\n                i -= 1\n            i -= 1\n    return grid\n\ndef move_down(grid):\n    grid_new = [[0]*4 for _ in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_right(grid_new)\n    grid = [[0]*4 for _ in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int,sys.stdin.readline().strip().split())))\n    direction = int(sys.stdin.readline().strip())\n    if direction == 0:\n        grid = move_left(grid)\n    elif direction == 1:\n        grid = move_up(grid)\n    elif direction == 2:\n        grid = move_right(grid)\n    elif direction == 3:\n        grid = move_down(grid)\n    for row in grid:\n        print(' '.join(map(str,row)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef move_left(grid):\n    for row in grid:\n        i = 0\n        while i < len(row):\n            if row[i] == 0:\n                for j in range(i + 1, len(row)):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i += 1\n        i = 0\n        while i < len(row) - 1:\n            if row[i] == row[i + 1]:\n                row[i] *= 2\n                del row[i + 1]\n                row.append(0)\n                i += 1\n            i += 1\n    return grid\n\ndef move_up(grid):\n    grid_new = [[0] * 4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_left(grid_new)\n    grid = [[0] * 4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef move_right(grid):\n    for row in grid:\n        i = len(row) - 1\n        while i >= 0:\n            if row[i] == 0:\n                for j in range(i - 1, -1, -1):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i -= 1\n        i = len(row) - 1\n        while i > 0:\n            if row[i] == row[i - 1]:\n                row[i] *= 2\n                del row[i - 1]\n                row.insert(0, 0)\n                i -= 1\n            i -= 1\n    return grid\n\ndef move_down(grid):\n    grid_new = [[0] * 4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_right(grid_new)\n    grid = [[0] * 4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int, sys.stdin.readline().strip().split())))\n    direction = int(sys.stdin.readline().strip())\n    if direction == 0:\n        grid = move_left(grid)\n    elif direction == 1:\n        grid = move_up(grid)\n    elif direction == 2:\n        grid = move_right(grid)\n    elif direction == 3:\n        grid = move_down(grid)\n    for row in grid:\n        print(' '.join(map(str, row)))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649808236,
  "object": "edit"
}
2022-04-13 00:04:08.621526 fix syntax errors 3 ["import random\n\ndef move_left(grid):\n    for row in grid:\n        i = 0\n        while i < len(row):\n            if row[i] == 0:\n                for j in range(i+1,len(row)):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i += 1\n        i = 0\n        while i < len(row)-1:\n            if row[i] == row[i+1]:\n                row[i] *= 2\n                del row[i+1]\n                row.append(0)\n                i += 1\n            i += 1\n    return grid\n\ndef move_up(grid):\n    grid_new = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_left(grid_new)\n    grid = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef move_right(grid):\n    for row in grid:\n        i = len(row)-1\n        while i >= 0:\n            if row[i] == 0:\n                for j in range(i-1,-1,-1):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i -= 1\n        i = len(row)-1\n        while i > 0:\n            if row[i] == row[i-1]:\n                row[i] *= 2\n                del row[i-1]\n                row.insert(0,0)\n                i -= 1\n            i -= 1\n    return grid\n\ndef move_down(grid):\n    grid_new = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_right(grid_new)\n    grid = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef random_grid():\n    grid = [[0]*4 for i in range(4)]\n    for i in range(2):\n        while True:\n            x = random.randint(0,3)\n            y = random.randint(0,3)\n            if grid[x][y] == 0:\n                grid[x][y] = 2\n                break\n    return grid\n\ndef print_grid(grid):\n    for row in grid:\n        print(' '.join(map(str,row)))\n\ndef main():\n    grid = random_grid()\n    while True:\n        print_grid(grid)\n        direction = int(input())\n        if direction == 0:\n            grid = move_left(grid)\n        elif direction == 1:\n            grid = move_up(grid)\n        elif direction == 2:\n            grid = move_right(grid)\n        elif direction == 3:\n            grid = move_down(grid)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef move_left(grid):\n    for row in grid:\n        i = 0\n        while i < len(row):\n            if row[i] == 0:\n                for j in range(i+1,len(row)):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i += 1\n        i = 0\n        while i < len(row)-1:\n            if row[i] == row[i+1]:\n                row[i] *= 2\n                del row[i+1]\n                row.append(0)\n                i += 1\n            i += 1\n    return grid\n\ndef move_up(grid):\n    grid_new = [[0]*4 for _ in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_left(grid_new)\n    grid = [[0]*4 for _ in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef move_right(grid):\n    for row in grid:\n        i = len(row)-1\n        while i >= 0:\n            if row[i] == 0:\n                for j in range(i-1,-1,-1):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i -= 1\n        i = len(row)-1\n        while i > 0:\n            if row[i] == row[i-1]:\n                row[i] *= 2\n                del row[i-1]\n                row.insert(0,0)\n                i -= 1\n            i -= 1\n    return grid\n\ndef move_down(grid):\n    grid_new = [[0]*4 for _ in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_right(grid_new)\n    grid = [[0]*4 for _ in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int,sys.stdin.readline().strip().split())))\n    direction = int(sys.stdin.readline().strip())\n    if direction == 0:\n        grid = move_left(grid)\n    elif direction == 1:\n        grid = move_up(grid)\n    elif direction == 2:\n        grid = move_right(grid)\n    elif direction == 3:\n        grid = move_down(grid)\n    for row in grid:\n        print(' '.join(map(str,row)))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef move_left(grid):\n    for row in grid:\n        i = 0\n        while i < len(row):\n            if row[i] == 0:\n                for j in range(i + 1, len(row)):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i += 1\n        i = 0\n        while i < len(row) - 1:\n            if row[i] == row[i + 1]:\n                row[i] *= 2\n                del row[i + 1]\n                row.append(0)\n                i += 1\n            i += 1\n    return grid\n\ndef move_up(grid):\n    grid_new = [[0] * 4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_left(grid_new)\n    grid = [[0] * 4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef move_right(grid):\n    for row in grid:\n        i = len(row) - 1\n        while i >= 0:\n            if row[i] == 0:\n                for j in range(i - 1, -1, -1):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i -= 1\n        i = len(row) - 1\n        while i > 0:\n            if row[i] == row[i - 1]:\n                row[i] *= 2\n                del row[i - 1]\n                row.insert(0, 0)\n                i -= 1\n            i -= 1\n    return grid\n\ndef move_down(grid):\n    grid_new = [[0] * 4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_right(grid_new)\n    grid = [[0] * 4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int, sys.stdin.readline().strip().split())))\n    direction = int(sys.stdin.readline().strip())\n    if direction == 0:\n        grid = move_left(grid)\n    elif direction == 1:\n        grid = move_up(grid)\n    elif direction == 2:\n        grid = move_right(grid)\n    elif direction == 3:\n        grid = move_down(grid)\n    for row in grid:\n        print(' '.join(map(str, row)))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 00:04:23.702945 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#\n\nimport sys\n\ndef move_left(grid):\n    for row in grid:\n        for i in range(len(row)):\n            if row[i] == 0:\n                for j in range(i+1, len(row)):\n                    if row[j] != 0: \n                        row[i], row[j] = row[j], row[i] \n                        break \n        for i in range(len(row)-1):\n            if row[i] == row[i+1]: \n                row[i] *= 2 \n                del row[i+1] \n                row.append(0) \n    return grid\n\ndef move_up(grid):\n    grid_new = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_left(grid_new)\n    grid = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef move_right(grid):\n    for row in grid:\n        i = len(row)-1\n        for i in range(len(row)-1, -1, -1):\n            if row[i] == 0: \n                for j in range(i-1, -1, -1): \n                    if row[j] != 0: \n                        row[i], row[j] = row[j], row[i] \n                        break \n        for i in range(len(row)-1, 0, -1):\n            if row[i] == row[i-1]: \n                row[i] *= 2 \n                del row[i-1] \n                row.insert(0, 0) \n    return grid\n\ndef move_down(grid):\n    grid_new = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_right(grid_new)\n    grid = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int,sys.stdin.readline().strip().split())))\n    direction = int(sys.stdin.readline().strip())\n    if direction == 0:\n        grid = move_left(grid)\n    elif direction == 1:\n        grid = move_up(grid)\n    elif direction == 2:\n        grid = move_right(grid)\n    elif direction == 3:\n        grid = move_down(grid)\n    for row in grid:\n        print(' '.join(map(str,row)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef move_left(grid):\n    for row in grid:\n        i = 0\n        while i < len(row):\n            if row[i] == 0:\n                for j in range(i+1, len(row)):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i += 1\n        i = 0\n        while i < len(row) - 1:\n            if row[i] == row[i + 1]:\n                row[i] *= 2\n                del row[i + 1]\n                row.append(0)\n                i += 1\n            i += 1\n    return grid\n\ndef move_up(grid):\n    grid_new = [[0] * 4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_left(grid_new)\n    grid = [[0] * 4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef move_right(grid):\n    for row in grid:\n        i = len(row) - 1\n        while i >= 0:\n            if row[i] == 0:\n                for j in range(i - 1, -1, -1):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i -= 1\n        i = len(row) - 1\n        while i > 0:\n            if row[i] == row[i - 1]:\n                row[i] *= 2\n                del row[i - 1]\n                row.insert(0, 0)\n                i -= 1\n            i -= 1\n    return grid\n\ndef move_down(grid):\n    grid_new = [[0] * 4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_right(grid_new)\n    grid = [[0] * 4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int, sys.stdin.readline().strip().split())))\n    direction = int(sys.stdin.readline().strip())\n    if direction == 0:\n        grid = move_left(grid)\n    elif direction == 1:\n        grid = move_up(grid)\n    elif direction == 2:\n        grid = move_right(grid)\n    elif direction == 3:\n        grid = move_down(grid)\n    for row in grid:\n        print(' '.join(map(str, row)))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef move_left(grid):\n    for row in grid:\n        i = 0\n        while i < len(row):\n            if row[i] == 0:\n                for j in range(i + 1, len(row)):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i += 1\n        i = 0\n        while i < len(row) - 1:\n            if row[i] == row[i + 1]:\n                row[i] *= 2\n                del row[i + 1]\n                row.append(0)\n                i += 1\n            i += 1\n    return grid\n\ndef move_up(grid):\n    grid_new = [[0] * 4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_left(grid_new)\n    grid = [[0] * 4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef move_right(grid):\n    for row in grid:\n        i = len(row) - 1\n        while i >= 0:\n            if row[i] == 0:\n                for j in range(i - 1, -1, -1):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i -= 1\n        i = len(row) - 1\n        while i > 0:\n            if row[i] == row[i - 1]:\n                row[i] *= 2\n                del row[i - 1]\n                row.insert(0, 0)\n                i -= 1\n            i -= 1\n    return grid\n\ndef move_down(grid):\n    grid_new = [[0] * 4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_right(grid_new)\n    grid = [[0] * 4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int, sys.stdin.readline().strip().split())))\n    direction = int(sys.stdin.readline().strip())\n    if direction == 0:\n        grid = move_left(grid)\n    elif direction == 1:\n        grid = move_up(grid)\n    elif direction == 2:\n        grid = move_right(grid)\n    elif direction == 3:\n        grid = move_down(grid)\n    for row in grid:\n        print(' '.join(map(str, row)))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649808248,
  "object": "edit"
}
2022-04-13 00:04:23.703248 fix syntax errors 3 ["#\n\nimport sys\n\ndef move_left(grid):\n    for row in grid:\n        for i in range(len(row)):\n            if row[i] == 0:\n                for j in range(i+1, len(row)):\n                    if row[j] != 0: \n                        row[i], row[j] = row[j], row[i] \n                        break \n        for i in range(len(row)-1):\n            if row[i] == row[i+1]: \n                row[i] *= 2 \n                del row[i+1] \n                row.append(0) \n    return grid\n\ndef move_up(grid):\n    grid_new = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_left(grid_new)\n    grid = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef move_right(grid):\n    for row in grid:\n        i = len(row)-1\n        for i in range(len(row)-1, -1, -1):\n            if row[i] == 0: \n                for j in range(i-1, -1, -1): \n                    if row[j] != 0: \n                        row[i], row[j] = row[j], row[i] \n                        break \n        for i in range(len(row)-1, 0, -1):\n            if row[i] == row[i-1]: \n                row[i] *= 2 \n                del row[i-1] \n                row.insert(0, 0) \n    return grid\n\ndef move_down(grid):\n    grid_new = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_right(grid_new)\n    grid = [[0]*4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int,sys.stdin.readline().strip().split())))\n    direction = int(sys.stdin.readline().strip())\n    if direction == 0:\n        grid = move_left(grid)\n    elif direction == 1:\n        grid = move_up(grid)\n    elif direction == 2:\n        grid = move_right(grid)\n    elif direction == 3:\n        grid = move_down(grid)\n    for row in grid:\n        print(' '.join(map(str,row)))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef move_left(grid):\n    for row in grid:\n        i = 0\n        while i < len(row):\n            if row[i] == 0:\n                for j in range(i+1, len(row)):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i += 1\n        i = 0\n        while i < len(row) - 1:\n            if row[i] == row[i + 1]:\n                row[i] *= 2\n                del row[i + 1]\n                row.append(0)\n                i += 1\n            i += 1\n    return grid\n\ndef move_up(grid):\n    grid_new = [[0] * 4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_left(grid_new)\n    grid = [[0] * 4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef move_right(grid):\n    for row in grid:\n        i = len(row) - 1\n        while i >= 0:\n            if row[i] == 0:\n                for j in range(i - 1, -1, -1):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i -= 1\n        i = len(row) - 1\n        while i > 0:\n            if row[i] == row[i - 1]:\n                row[i] *= 2\n                del row[i - 1]\n                row.insert(0, 0)\n                i -= 1\n            i -= 1\n    return grid\n\ndef move_down(grid):\n    grid_new = [[0] * 4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_right(grid_new)\n    grid = [[0] * 4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int, sys.stdin.readline().strip().split())))\n    direction = int(sys.stdin.readline().strip())\n    if direction == 0:\n        grid = move_left(grid)\n    elif direction == 1:\n        grid = move_up(grid)\n    elif direction == 2:\n        grid = move_right(grid)\n    elif direction == 3:\n        grid = move_down(grid)\n    for row in grid:\n        print(' '.join(map(str, row)))\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef move_left(grid):\n    for row in grid:\n        i = 0\n        while i < len(row):\n            if row[i] == 0:\n                for j in range(i + 1, len(row)):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i += 1\n        i = 0\n        while i < len(row) - 1:\n            if row[i] == row[i + 1]:\n                row[i] *= 2\n                del row[i + 1]\n                row.append(0)\n                i += 1\n            i += 1\n    return grid\n\ndef move_up(grid):\n    grid_new = [[0] * 4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_left(grid_new)\n    grid = [[0] * 4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef move_right(grid):\n    for row in grid:\n        i = len(row) - 1\n        while i >= 0:\n            if row[i] == 0:\n                for j in range(i - 1, -1, -1):\n                    if row[j] != 0:\n                        row[i], row[j] = row[j], row[i]\n                        break\n            i -= 1\n        i = len(row) - 1\n        while i > 0:\n            if row[i] == row[i - 1]:\n                row[i] *= 2\n                del row[i - 1]\n                row.insert(0, 0)\n                i -= 1\n            i -= 1\n    return grid\n\ndef move_down(grid):\n    grid_new = [[0] * 4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid_new[j][i] = grid[i][j]\n    grid_new = move_right(grid_new)\n    grid = [[0] * 4 for i in range(4)]\n    for i in range(4):\n        for j in range(4):\n            grid[i][j] = grid_new[j][i]\n    return grid\n\ndef main():\n    grid = []\n    for i in range(4):\n        grid.append(list(map(int, sys.stdin.readline().strip().split())))\n    direction = int(sys.stdin.readline().strip())\n    if direction == 0:\n        grid = move_left(grid)\n    elif direction == 1:\n        grid = move_up(grid)\n    elif direction == 2:\n        grid = move_right(grid)\n    elif direction == 3:\n        grid = move_down(grid)\n    for row in grid:\n        print(' '.join(map(str, row)))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 00:04:23.703330 size on output set 9
