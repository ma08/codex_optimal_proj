["\n\n#S = \"drought\"\n#E = 2\n#endings = []\n#endings.append(set(\"aught ought aut acht\".split()))\n#endings.append(set(\"ought oubt outte out oute\".split()))\n#P = 5\n#phrases = []\n#phrases.append(\"tasty sprout\")\n#phrases.append(\"difficult route\")\n#phrases.append(\"worried and fraught\")\n#phrases.append(\"forever in doubt\")\n#phrases.append(\"apples and pears\")\n\n\nS = input()\nE = int(input())\nendings = []\nfor _ in range(E):\n    endings.append(set(input().split()))\nP = int(input())\nphrases = []\nfor _ in range(P):\n    phrases.append(input().split())\n#S = \"hello\"\n#E = 1\n#endings = [set(\"ello\".split())]\n#P = 2\n#phrases = [[\"hello\"], [\"hello\", \"world\"]]\n\nfor phrase in phrases:\n    words = phrase\n    for word in words:\n        for ending in endings:\n            if word.endswith(tuple(ending)):\n                if words[-1] == word:\n                    print(\"YES\")\n                else:\n                    print(\"NO\")\n", "\nimport sys\n\ndef get_input(file=None):\n    if file is None:\n        f = sys.stdin\n    else:\n        f = open(file)\n\n    word = f.readline().strip()\n    num_endings = int(f.readline().strip())\n    endings = [set(f.readline().strip().split()) for _ in range(num_endings)]\n    num_phrases = int(f.readline().strip())\n    phrases = [f.readline().strip() for _ in range(num_phrases)]\n\n    return word, endings, phrases\n\ndef main(file=None):\n    word, endings, phrases = get_input(file)\n\n    for phrase in phrases:\n        last_word = phrase.split()[-1]\n        if any(last_word.endswith(ending) for ending in endings):\n            print('YES')\n        else:\n            print('NO')\n\nif __name__ == '__main__':\n    main('rhyming_slang.txt')\n", "\n\n\"\"\"\nID: neelkolhe\nTASK: file\n\"\"\"\n\n\ninpFile=open('file.in','r')\noutFile=open('file.out','w')\n\n\n\n\nnumOfLists=int(inpFile.readline())\n\nlistOfLists=[]\n\nfor i in range(numOfLists):\n  listOfLists.append(inpFile.readline().strip().split())\n\nnumOfPhrases=int(inpFile.readline())\n\nlistOfPhrases=[]\n\nfor i in range(numOfPhrases):\n  listOfPhrases.append(inpFile.readline().strip().split())\nword=inpFile.readline().strip().split()\n\ndef checkRhyme(word,listOfLists,listOfPhrases):\n  listOfEndings=[]\n  for i in range(len(listOfLists)):\n    for j in range(len(listOfLists[i])):\n      if listOfLists[i][j] in word:\n        listOfEndings.append(listOfLists[i][j])\n        break\n  for i in range(len(listOfPhrases)):\n    for j in range(len(listOfPhrases[i])):\n      for k in range(len(listOfEndings)):\n        if listOfEndings[k] in listOfPhrases[i][j]:\n          outFile.write(\"YES\\n\")\n          return\n  outFile.write(\"NO\\n\")\n  return\n\n\n\nfor i in word:\n  checkRhyme(i,listOfLists,listOfPhrases)\n", "\n\n# 1)\n\"\"\"\ndef rhyme(word, ending_lists):\n    for ending_list in ending_lists:\n        for ending in ending_list:\n            if word.endswith(ending):\n                return True\n    return False\n\ncommon_word = input()\nending_lists = []\nfor i in range(int(input())):\n    ending_lists.append(input().split())\nfor i in range(int(input())):\n    phrase = input().split()\n    if len(phrase) == 2:\n        if rhyme(phrase[0], ending_lists) and rhyme(phrase[1], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if rhyme(phrase[1], ending_lists) and rhyme(phrase[2], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\"\"\"\n\n# 2)\n\"\"\"\nimport re\n\ndef rhyme(word, ending_lists):\n    for ending_list in ending_lists:\n        for ending in ending_list:\n            if re.search(ending + \"$\", word):\n                return True\n    return False\n\ncommon_word = input()\nending_lists = []\nfor i in range(int(input())):\n    ending_lists.append(input().split())\nfor i in range(int(input())):\n    phrase = input().split()\n    if len(phrase) == 2:\n        if rhyme(phrase[0], ending_lists) and rhyme(phrase[1], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if rhyme(phrase[1], ending_lists) and rhyme(phrase[2], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\"\"\"\n", "\ndef check(word):\n    for i in endings:\n        if word in i:\n            return i\n    return False\n\ndef main():\n    S = input()\n    E = int(input())\n    endings = []\n    for i in range(E):\n        endings.append(input().split())\n    P = int(input())\n    phrases = []\n    for i in range(P):\n        phrases.append(input().split())\n\n    for phrase in phrases:\n        if len(phrase) == 2: # \u0435\u0441\u043b\u0438 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0434\u0432\u0430 \u0441\u043b\u043e\u0432\u0430\n            if check(phrase[1]) and check(S[-len(phrase[1]):]):\n                if check(phrase[1]) == check(S[-len(phrase[1]):]):\n                    print(\"YES\")\n                else:\n                    print(\"NO\")\n            else:\n                print(\"NO\")\n        else: # \u0435\u0441\u043b\u0438 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0442\u0440\u0438 \u0441\u043b\u043e\u0432\u0430\n            if check(phrase[1]) and check(phrase[2]) and check(S[-len(phrase[2]):]):\n                if check(phrase[1]) == check(phrase[2]) and check(phrase[2]) == check(S[-len(phrase[2]):]):\n                    print(\"YES\")\n                else:\n                    print(\"NO\")\n        else:\n            print(\"NO\")\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef get_input(file=None):\n    if file is None:\n        f = sys.stdin\n    else:\n        f = open(file)\n\n    word = f.readline().strip()\n    num_endings = int(f.readline().strip())\n    endings = [f.readline().strip() for _ in range(num_endings)]\n    num_phrases = int(f.readline().strip())\n    phrases = [f.readline().strip() for _ in range(num_phrases)]\n\n    return word, endings, phrases\n\ndef main(file=None):\n    word, endings, phrases = get_input(file)\n\n    for phrase in phrases:\n        last_word = phrase.split()[-1]\n        if any(last_word.endswith(ending) for ending in endings if len(ending) > 0):\n            print('YES')\n        else:\n            print('NO')\n\nif __name__ == '__main__':\n    main()\n", "\n\nS = input()\nE = int(input())\nendings = []\nfor _ in range(E):\n    endings.append(set(input().split()))\nP = int(input())\nphrases = []\nfor _ in range(P):\n    phrases.append(input())\n\n# S = \"drought\"\n# E = 2\n# endings = []\n# endings.append(set(\"aught ought aut acht\".split()))  # words that end with \"aught\"\n# endings.append(set(\"ought oubt outte out oute\".split()))  # words that end with \"ought\"\n# P = 5\n# phrases = []\n# phrases.append(\"tasty sprout\")\n# phrases.append(\"difficult route\")\n# phrases.append(\"worried and fraught\")\n# phrases.append(\"forever in doubt\")\n# phrases.append(\"apples and pears\")\n\nfor phrase in phrases:\n    words = phrase.split()\n    for ending in endings:\n        for word in words:\n            if word.endswith(tuple(ending)):\n                print(\"YES\")  # print YES if any word in the phrase ends with any of the endings\n                break  # if any word in the phrase ends with any of the endings, no need to check the rest of the words\n    else:  # if no word in the phrase ends with any of the endings\n        print(\"NO\")  # print NO\n", "\n\n\"\"\"\nID: neelkolhe\nTASK: rhyme\n\"\"\"\n\n#reads the first line\ninpFile=open('rhyme.in','r')\n#reads the number of lists\noutFile=open('rhyme.out','w')\n#creates a list of lists\n\n#iterates through the number of lists\nword=inpFile.readline().strip().split()\n  #adds the lists to the list of lists\nnumOfLists=int(inpFile.readline())\n#reads the number of phrases\nlistOfLists=[]\n#creates a list of phrases\nfor i in range(numOfLists):\n  listOfLists.append(inpFile.readline().strip().split())\n#iterates through the number of phrases\nnumOfPhrases=int(inpFile.readline())\n#adds the phrases to the list of phrases\nlistOfPhrases=[]\n\nfor i in range(numOfPhrases):\n  listOfPhrases.append(inpFile.readline().strip().split())\n\ndef checkRhyme(word,listOfLists,listOfPhrases):\n  listOfEndings=[]\n  for i in range(len(listOfLists)):\n    for j in range(len(listOfLists[i])):\n      if listOfLists[i][j] in word[0]:\n        listOfEndings.append(listOfLists[i][j][-1])\n        break\n  for i in range(len(listOfPhrases)):\n    for j in range(len(listOfPhrases[i])):\n      for k in range(len(listOfEndings)):\n        if listOfEndings[k] in listOfPhrases[i][j][-1]:\n          outFile.write(\"YES\\n\")\n          return\n  outFile.write(\"NO\\n\")\n  return\n\n\n\ncheckRhyme(word,listOfLists,listOfPhrases)\n", "\nS = input()\nE = int(input())\nendings = []\nfor _ in range(E):\n    endings.append(set(input().split()))\nP = int(input())\nphrases = []\nfor _ in range(P):\n    phrases.append(input())\n\n# S = \"drought\"\n# E = 2\n# endings = []\n# endings.append(set(\"aught ought aut acht\".split()))\n# endings.append(set(\"ought oubt outte out oute\".split()))\n# P = 5\n# phrases = []\n# phrases.append(\"tasty sprout\")\n# phrases.append(\"difficult route\")\n# phrases.append(\"worried and fraught\")\n# phrases.append(\"forever in doubt\")\n# phrases.append(\"apples and pears\")\n\nprint(\"S =\", S)\nprint(\"E =\", E)\nprint(\"endings =\", endings)\nprint(\"P =\", P)\nprint(\"phrases =\", phrases)\n\nfor phrase in phrases:\n    words = phrase.split()\n    # print(\"words =\", words)\n    for word in words:\n        for ending in endings:\n            if word.endswith(tuple(ending)):\n                print(\"Yes\")\n                break\n    else:\n        print(\"No\")\n", "\n\nfrom sys import stdin, stdout\n\n\ndef main():\n    word = stdin.readline().strip()\n    endings = []\n    for i in range(int(stdin.readline().strip())):\n        endings.append(stdin.readline().strip().split())\n    for i in range(int(stdin.readline().strip())):\n        phrase = stdin.readline().strip().split()\n        if len(phrase) == 2:\n            if phrase[1] in list(filter(lambda x: word.endswith(x), endings))[0]:\n                stdout.write(\"YES\\n\")\n            else:\n                stdout.write(\"NO\\n\")\n        else:\n            if phrase[1] in list(filter(lambda x: word.endswith(x), endings))[0] and phrase[2] in list(filter(lambda x: word.endswith(x), endings))[0]:\n                stdout.write(\"YES\\n\")\n            else:\n                stdout.write(\"NO\\n\")\n\n\nif __name__ == '__main__':\n    main()\n", "\nwith open(\"text.txt\", encoding=\"utf-8\") as f:\n    for line in f:\n        print(line)\n", "\n\nS = input()\nE = int(input())\nendings = []\nfor _ in range(E):\n    endings.append(set(input().split()))\nP = int(input())\nphrases = []\nfor _ in range(P):\n    phrases.append(input())\n\n# S = \"drought\"\n# E = 2\n# endings = []\n# endings.append(set(\"aught ought aut acht outte out oute\".split()))\n# endings.append(set(\"ought oubt\".split()))\n# P = 5\n# phrases = []\n# phrases.append(\"tasty sprout\")\n# phrases.append(\"difficult route\")\n# phrases.append(\"worried and fraught\")\n# phrases.append(\"forever in doubt\")\n# phrases.append(\"apples and pears\")\n\nfor phrase in phrases:\n    words = phrase.split()\n    for word in words:\n        for ending in endings:\n            if word.endswith(tuple(ending)):\n                if words[-1] == word:\n                    print(\"YES\")\n                else:\n                    print(\"NO\")\n", "\n\n\"\"\"\nID: neelkolhe\nTASK: file\n\"\"\"\n\n\ninpFile=open('file.in','r')\noutFile=open('file.out','w')\n\n\n\n\nnumOfLists=int(inpFile.readline())\n\nlistOfLists=[]\n\nfor i in range(numOfLists):\n  listOfLists.append(inpFile.readline().strip().split())\n\nnumOfPhrases=int(inpFile.readline())\n\nlistOfPhrases=[]\n\nfor i in range(numOfPhrases):\n  listOfPhrases.append(inpFile.readline().strip().split())\n\nword=inpFile.readline().strip().split()\n\ndef checkRhyme(word,listOfLists,listOfPhrases):\n  listOfEndings=[]\n  for i in range(len(listOfLists)):\n    for j in range(len(listOfLists[i])):\n      if listOfLists[i][j] in word[0]:\n        listOfEndings.append(listOfLists[i][j])\n        break\n  for i in range(len(listOfPhrases)):\n    for j in range(len(listOfPhrases[i])):\n      for k in range(len(listOfEndings)):\n        if listOfEndings[k] in listOfPhrases[i][j]:\n          outFile.write(\"YES\\n\")\n          return\n  outFile.write(\"NO\\n\")\n  return\n\n\n\ncheckRhyme(word,listOfLists,listOfPhrases)\n", "\nimport sys\n\ndef get_input(file=None):\n    if file is None:\n        f = sys.stdin\n    else:\n        f = open(file)\n\n    word = f.readline().strip()\n    num_endings = int(f.readline().strip())\n    endings = [f.readline().strip() for _ in range(num_endings)]\n    num_phrases = int(f.readline().strip())\n    phrases = [f.readline().strip() for _ in range(num_phrases)]\n\n    return word, endings, phrases\n\ndef main(file=None):\n    word, endings, phrases = get_input(file)\n\n    for phrase in phrases:\n        last_word = phrase.split()[-1]\n        if any(last_word.endswith(ending) for ending in endings if len(ending) > 0):\n            print('YES')\n        else:\n            print('NO')\n\nif __name__ == '__main__':\n    main('rhyming_slang.txt')\n", "\nimport sys\nimport re\n\ndef main():\n    lines = [line.strip() for line in sys.stdin]\n    ending_lists = [line.split() for line in lines[2:2 + int(lines[1])]]\n    phrases = lines[4 + int(lines[1]):]\n\n    for phrase in phrases:\n        words = phrase.split()\n        if len(words) == 2:\n            if word_ends_with(words[0], ending_lists) \\\n                    or word_ends_with(words[1], ending_lists):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if word_ends_with(words[0], ending_lists) \\\n                    and word_ends_with(words[2], ending_lists):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\n\ndef word_ends_with(word, ending_lists):\n    for endings in ending_lists:\n        if word[-len(endings[0]):] in endings:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n#1.1.1\n\"\"\"\ndef rhyme(word, ending_lists):\n    for ending_list in ending_lists:\n        for ending in ending_list:\n            if word.endswith(ending):\n                return True\n    return False\n\ncommon_word = input()\nending_lists = []\nfor i in range(int(input())):\n    ending_lists.append(input().split())\nfor i in range(int(input())):\n    phrase = input().split()\n    if len(phrase) == 2:\n        if rhyme(phrase[0], ending_lists) and rhyme(phrase[1], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if rhyme(phrase[1], ending_lists) and rhyme(phrase[2], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\"\"\"\n\n#1.1.2\n\"\"\"\nimport re\n\ndef rhyme(word, ending_lists):\n    for ending_list in ending_lists:\n        for ending in ending_list:\n            if re.search(ending + \"$\", word):\n                return True\n    return False\n\ncommon_word = input()\nending_lists = []\nfor i in range(int(input())):\n    ending_lists.append(input().split())\nfor i in range(int(input())):\n    phrase = input().split()\n    if len(phrase) == 2:\n        if rhyme(phrase[0], ending_lists) and rhyme(phrase[1], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if rhyme(phrase[1], ending_lists) and rhyme(phrase[2], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\"\"\"\n", "\n\nfrom sys import stdin\n\nword = stdin.readline().strip()\nendings = []\nfor i in range(int(stdin.readline().strip())):\n    endings.append(stdin.readline().strip().split())\nfor i in range(int(stdin.readline().strip())):\n    phrase = stdin.readline().strip().split()\n    if len(phrase) == 2:\n        if phrase[1] in list(filter(lambda x: word.endswith(x), endings)):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if phrase[1] in list(filter(lambda x: word.endswith(x), endings)) and phrase[2] in list(filter(lambda x: word.endswith(x), endings)):\n            print(\"YES\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n            print(\"NO\")\n", "\n\nwith open('input.txt', 'r') as inp:\n    S = inp.readline().strip()\n    E = int(inp.readline())\n    endings = []\n    for i in range(E):\n        endings.append(inp.readline().strip().split())\n    P = int(inp.readline())\n    phrases = []\n    for i in range(P):\n        phrases.append(inp.readline().strip().split())\n\n    def check(word):\n        for i in endings:\n            if word in i:\n                return i\n        return False\n\n    with open('output.txt', 'w') as out:\n        for phrase in phrases:\n            if len(phrase) == 2: # \u0435\u0441\u043b\u0438 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0434\u0432\u0430 \u0441\u043b\u043e\u0432\u0430\n                if check(phrase[1]) and check(S[-len(phrase[1]):]):\n                    if check(phrase[1]) == check(S[-len(phrase[1]):]):\n                        out.write(\"YES\\n\")\n                    else:\n                        out.write(\"NO\\n\")\n                else:\n                    out.write(\"NO\\n\")\n            else:\n                if check(phrase[1]) and check(phrase[2]) and check(S[-len(phrase[2]):]):\n                    if check(phrase[1]) == check(phrase[2]) and check(phrase[2]) == check(S[-len(phrase[2]):]):\n                        out.write(\"YES\\n\")\n                    else:\n                        out.write(\"NO\\n\")\n                else:\n                    out.write(\"NO\\n\")\n", "\n\nS = input()\nE = int(input())\nendings = []\nfor _ in range(E):\n    endings.append(set(input().split()))\nP = int(input())\nphrases = []\nfor _ in range(P):\n    phrases.append(input())\n\n#S = \"drought\"\n#E = 2\n#endings = []\n#endings.append(set(\"aught ought aut acht outte out oute\".split()))\n#endings.append(set(\"ought oubt\".split()))\n#P = 5\n#phrases = []\n#phrases.append(\"tasty sprout\")\n#phrases.append(\"difficult route\")\n#phrases.append(\"worried and fraught\")\n#phrases.append(\"forever in doubt\")\n#phrases.append(\"apples and pears\")\n\nfor phrase in phrases:\n    words = phrase.split()\n    for word in words:\n        for ending in endings:\n            if word.endswith(tuple(ending)):\n                if words[-1] == word:\n                    print(\"YES\")\n                else:\n                    print(\"NO\")\n", "\n\nS = input()\nE = int(input())\nendings = []\nfor i in range(E):\n    endings.append(input().split())\nP = int(input())\nphrases = []\nfor i in range(P):\n    phrases.append(input().split())\n\ndef check(word):\n    for i in range(len(endings)):\n        if word == endings[i][0]:\n            return endings[i]\n    return False\n\nfor phrase in phrases:\n    if len(phrase) == 2:\n        if check(phrase[1]) and check(S[-len(phrase[1]):]): # check if the word is in the endings and if the ending of the sentence is in the endings\n            if check(phrase[1]) == check(S[-len(phrase[1]):]): # check if the word in the phrase and the ending of the sentence have the same ending\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n    else:\n        if check(phrase[1]) and check(phrase[3]) and check(S[-len(phrase[3]):]):\n            if check(phrase[1]) == check(phrase[3]) and check(phrase[3]) == check(S[-len(phrase[3]):]):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n", "\n\n# 1)\ndef rhyme(word, ending_lists):\n    for ending_list in ending_lists:\n        for ending in ending_list:\n            if word.endswith(ending):\n                return True\n    return False\n\ncommon_word = input()\nending_lists = []\nfor i in range(int(input())):\n    ending_lists.append(input().split())\nfor i in range(int(input())):\n    phrase = input().split()\n    if len(phrase) == 2:\n        if rhyme(phrase[0], ending_lists) and rhyme(phrase[1], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if rhyme(phrase[1], ending_lists) and rhyme(phrase[2], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n\n# 2)\nimport re\n\n\ndef rhyme(word, ending_lists):\n    print(word)\n    for ending_list in ending_lists:\n        for ending in ending_list:\n            print(ending)\n            if re.search(ending + \"$\", word):\n                return True\n    return False\n\n\ncommon_word = input()\nending_lists = []\nfor i in range(int(input())):\n    ending_lists.append(input().split())\nfor i in range(int(input())):\n    phrase = input().split()\n    if len(phrase) == 2:\n        if rhyme(phrase[0], ending_lists) and rhyme(phrase[1], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if rhyme(phrase[1], ending_lists) and rhyme(phrase[2], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n", "import sys\nimport re\n\ndef main():\n    lines = [line.strip() for line in sys.stdin]\n    ending_lists = [line.split() for line in lines[2:2+int(lines[1])]]\n    phrases = lines[3+int(lines[1]):]\n\n    for phrase in phrases:\n        words = phrase.split()\n        if len(words) == 2:\n            if word_ends_with(words[0], ending_lists) and word_ends_with(words[1], ending_lists):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if word_ends_with(words[0], ending_lists) and word_ends_with(words[2], ending_lists):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\ndef word_ends_with(word, ending_lists):\n    for endings in ending_lists:\n        if word[-len(endings[0]):] in endings:\n            return True\n    return False\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nS = input()\nE = int(input())\nendings = []\nfor i in range(E):\n    endings.append(input().strip())\nP = int(input())\nphrases = []\nfor i in range(P):\n    phrases.append(input().strip())\n\ndef check(word):\n    for i in endings:\n        if word in i:\n            return i\n    return False\n\nfor phrase in phrases:\n    if len(phrase) == 2:\n        if check(phrase[1]) and check(S[-len(phrase[1]):]) and phrase[1] == S[-len(phrase[1]):]:\n                print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if check(phrase[1]) and check(phrase[3]) and check(S[-len(phrase[3]):]) and phrase[1] == phrase[3] and phrase[3] == S[-len(phrase[3]):]:\n                print(\"YES\")\n        else:\n            print(\"NO\")\n", "\n\n\"\"\"\nID: neelkolhe\nTASK: rhyme\n\"\"\"\n\n#reads the first line\ninpFile=open('rhyme.in','r')\n#reads the number of lists\noutFile=open('rhyme.out','w')\n#creates a list of lists\n\n#iterates through the number of lists\nword=inpFile.readline().strip()\n  #adds the lists to the list of lists\nnumOfLists=int(inpFile.readline())\n#reads the number of phrases\nlistOfLists=[]\n#creates a list of phrases\nfor i in range(numOfLists):\n  listOfLists.append(inpFile.readline().strip().split())\n#iterates through the number of phrases\nnumOfPhrases=int(inpFile.readline())\n#adds the phrases to the list of phrases\nlistOfPhrases=[]\n\nfor i in range(numOfPhrases):\n  listOfPhrases.append(inpFile.readline().strip().split())\n\ndef checkRhyme(word,listOfLists,listOfPhrases):\n  listOfEndings=[]\n  for i in range(len(listOfLists)):\n    for j in range(len(listOfLists[i])):\n      if listOfLists[i][j] in word:\n        listOfEndings.append(listOfLists[i][j])\n        break\n  for i in range(len(listOfPhrases)):\n    for j in range(len(listOfPhrases[i])):\n      for k in range(len(listOfEndings)):\n        if listOfEndings[k] in listOfPhrases[i][j] and len(listOfPhrases[i][j])>=len(listOfEndings[k]):\n          outFile.write(\"YES\\n\")\n          return\n  outFile.write(\"NO\\n\")\n  return\n\n\n\ncheckRhyme(word,listOfLists,listOfPhrases)\n", "\n\n\"\"\"\nID: neelkolhe\nTASK: file\n\"\"\"\n\n\ninpFile=open('file.in','r')\noutFile=open('file.out','w')\n\n\n\nword=inpFile.readline().strip()\nnumOfLists=int(inpFile.readline())\n\nlistOfLists=[]\n\nfor i in range(numOfLists):\n  listOfLists.append(inpFile.readline().strip().split(\" \"))\n\nnumOfPhrases=int(inpFile.readline())\n\nlistOfPhrases=[]\n\nfor i in range(numOfPhrases):\n  listOfPhrases.append(inpFile.readline().strip().split(\" \"))\n\ndef checkFile(word,listOfLists,listOfPhrases):\n  listOfEndings=[]\n  for i in range(len(listOfLists)):\n    for j in range(len(listOfLists[i])):\n      if listOfLists[i][j] in word:\n        listOfEndings.append(listOfLists[i][j])\n        break\n  for i in range(len(listOfPhrases)):\n    for j in range(len(listOfPhrases[i])):\n      for k in range(len(listOfEndings)):\n        if listOfEndings[k] in listOfPhrases[i][j]:\n          outFile.write(\"YES\\n\")\n          return\n  outFile.write(\"NO\\n\")\n  return\n\n\n\ncheckFile(word,listOfLists,listOfPhrases)\n", "\n\ndef main():\n    word = input().strip()\n    word_endings = [[] for _ in range(4)]\n    for _ in range(int(input())):\n        word_endings[input().count(\" \")].append(input().strip())\n    for _ in range(int(input())):\n        phrase = input().strip()\n        if any(word.endswith(ending) for ending in word_endings[phrase.count(\" \")]):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nfrom sys import stdin, stdout\n\n\ndef main():\n    word = stdin.readline().strip()\n    endings = []\n    for i in range(int(stdin.readline().strip())):\n        endings.append(stdin.readline().strip().split())\n    for i in range(int(stdin.readline().strip())):\n        phrase = stdin.readline().strip().split()\n        if len(phrase) == 2:\n            if phrase[1] in list(filter(lambda x: word.endswith(x), endings)):\n                stdout.write(\"YES\\n\")\n            else:\n                stdout.write(\"NO\\n\")\n        else:\n            if phrase[1] in list(filter(lambda x: word.endswith(x), endings)) and phrase[2] in list(filter(lambda x: word.endswith(x), endings)):\n                stdout.write(\"YES\\n\")\n            else:\n                stdout.write(\"NO\\n\")\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n# S = input()\n# E = int(input())\n# endings = []\n# for _ in range(E):\n#     endings.append(set(input().split()))\n# P = int(input())\n# phrases = []\n# for _ in range(P):\n#     phrases.append(input())\n\nS = \"drought\"\nE = 2\nendings = []\nendings.append(set(\"aught ought aut acht\".split()))\nendings.append(set(\"ought oubt outte out oute\".split()))\nP = 5\nphrases = []\nphrases.append(\"tasty sprout\")\nphrases.append(\"difficult route\")\nphrases.append(\"worried and fraught\")\nphrases.append(\"forever in doubt\")\nphrases.append(\"apples and pears\")\n\nfor phrase in phrases:\n    words = phrase.split()\n    for word in words:\n        for ending in endings:\n            if word.endswith(tuple(ending)):\n                print(\"YES\")\n                break\n    else:\n        print(\"NO\")\n", "\nimport sys\n\ndef get_input(file=None):\n    if file is None:\n        f = sys.stdin\n    else:\n        f = open(file)\n\n    word = f.readline().strip()\n    num_endings = int(f.readline()) #converts string to int\n    endings = [set(f.readline().strip().split()) for _ in range(num_endings)]\n    num_phrases = int(f.readline()) #converts string to int\n    phrases = [f.readline().strip() for _ in range(num_phrases)]\n\n    return word, endings, phrases\n\ndef main(file=None):\n    word, endings, phrases = get_input(file)\n\n    for phrase in phrases:\n        last_word = phrase.split()[-1]\n        if any(last_word.endswith(ending) for ending in endings): #any is a built in function that returns a boolean\n            print('YES')\n        else:\n            print('NO')\n\nif __name__ == '__main__':\n    main('rhyming_slang.txt')\n", "\n\nfrom sys import stdin\n\nword = stdin.readline().strip().lower()\nendings = [[]]\nfor i in range(int(stdin.readline().strip())):\n    endings.append(stdin.readline().strip().split())\nfor i in range(int(stdin.readline().strip())):\n    phrase = stdin.readline().strip().split()\n    if len(phrase) == 2:\n        if phrase[1].lower() in list(filter(lambda x: word.endswith(x), endings))[0]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if phrase[1].lower() in list(filter(lambda x: word.endswith(x), endings))[0] and phrase[2].lower() in list(filter(lambda x: word.endswith(x), endings))[0]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n", "\nimport sys\n\ndef get_input(file=None):\n    if file is None:\n        f = sys.stdin\n    else:\n        f = open(file)\n\n    word = f.readline().strip()\n    num_endings = int(f.readline().strip())\n    endings = [f.readline().strip() for _ in range(num_endings)] # TODO: what if they are the same?\n    num_phrases = int(f.readline().strip())\n    phrases = [f.readline().strip() for _ in range(num_phrases)] # TODO: what if they are the same?\n\n    return word, endings, phrases\n\ndef main(file=None):\n    word, endings, phrases = get_input(file)\n\n    for phrase in phrases:\n        last_word = phrase.split()[-1] # TODO: what if there are no words?\n        if any(last_word.endswith(ending) for ending in endings): # TODO: what if the word is shorter than the ending?\n            print('YES')\n        else:\n            print('NO')\n\nif __name__ == '__main__':\n    main('rhyming_slang.txt')\n", "\n\nfrom sys import stdin, stdout\n\n\ndef main():\n    word = stdin.readline().strip()\n    endings = []\n    for i in range(int(stdin.readline().strip())):\n        endings.append(stdin.readline().strip().split(' '))\n    for i in range(int(stdin.readline().strip())):\n        phrase = stdin.readline().strip().split(' ')\n        if len(phrase) == 2:\n            if phrase[1] in list(filter(lambda x: word.endswith(x), endings))[0]:\n                stdout.write(\"YES\\n\")\n            else:\n                stdout.write(\"NO\\n\")\n        else:\n            if phrase[1] in list(filter(lambda x: word.endswith(x), endings))[0] and phrase[2] in list(filter(lambda x: word.endswith(x), endings))[0]:\n                stdout.write(\"YES\\n\")\n            else:\n                stdout.write(\"NO\\n\")\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n\"\"\"\nID: neelkolhe\nTASK: file\n\"\"\"\n\n\ninpFile=open('file.in','r')\noutFile=open('file.out','w')\n\n\nlistOfEndings=[]\nword=inpFile.readline().strip()\nnumOfLists=int(inpFile.readline())\n\nlistOfLists=[]\n\nfor i in range(numOfLists):\n  listOfLists.append(inpFile.readline().strip().split(' '))\n\nnumOfPhrases=int(inpFile.readline())\n\nlistOfPhrases=[]\n\nfor i in range(numOfPhrases):\n  listOfPhrases.append(inpFile.readline().strip().split(' '))\n\ndef checkFile(word,listOfLists,listOfPhrases):\n  \n  for i in range(len(listOfLists)):\n    for j in range(len(listOfLists[i])):\n      if listOfLists[i][j] in word and listOfLists[i][j] not in listOfEndings:\n        listOfEndings.append(listOfLists[i][j])\n        break\n  for i in range(len(listOfPhrases)):\n    for j in range(len(listOfPhrases[i])):\n      for k in range(len(listOfEndings)):\n        if listOfEndings[k] in listOfPhrases[i][j] and listOfEndings[k] not in listOfEndings:\n          outFile.write(\"YES\\n\")\n          return\n  outFile.write(\"NO\\n\")\n  return\n\n\n\ncheckFile(word,listOfLists,listOfPhrases)\n", "\n\nS = \"drought\"\nE = 2\nendings = []\nendings.append(set(\"aught ought aut acht\".split()))\nendings.append(set(\"ought oubt outte out oute\".split()))\nP = 5\nphrases = []\nphrases.append(\"tasty sprout\")\nphrases.append(\"difficult route\")\nphrases.append(\"worried and fraught\")\nphrases.append(\"forever in doubt\")\nphrases.append(\"apples and pears\")\n\n\nS = input()\nE = int(input())\nendings = []\nfor _ in range(E):\n    endings.append(set(input().split()))\nP = int(input())\nphrases = []\nfor _ in range(P):\n    phrases.append(input().split())\n#S = \"hello\"\n#E = 1\n#endings = [set(\"ello\".split())]\n#P = 2\n#phrases = [[\"hello\"], [\"hello\", \"world\"]]\n\nfor phrase in phrases:\n    words = phrase\n    for word in words:\n        for ending in endings:\n            if word.endswith(tuple(ending)):\n                if words[-1] == word:\n                    print(\"YES\")\n                else:\n                    print(\"NO\")\n", "\nimport sys\nimport re\n\ndef main():\n    lines = [line.strip() for line in sys.stdin]\n    ending_lists = [line.split() for line in lines[2:2+int(lines[1])]]\n    phrases = lines[4+int(lines[1]):]\n\n    for phrase in phrases:\n        words = phrase.split()\n        if len(words) == 2:\n            if word_ends_with(words[0], ending_lists) or word_ends_with(words[1], ending_lists):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if word_ends_with(words[0], ending_lists) and word_ends_with(words[2], ending_lists):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\ndef word_ends_with(word, ending_lists):\n    for endings in ending_lists:\n        if word[-len(endings[0]):] in endings:\n            return True\n    return False\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nfrom sys import stdin\n\nword = stdin.readline().strip()\nendings = []\nfor i in range(int(stdin.readline().strip())):\n    endings.append(stdin.readline().strip().split())\nfor i in range(int(stdin.readline().strip())):\n    phrase = stdin.readline().strip().split()\n    if len(phrase) == 2:\n        if phrase[1] in endings[list(filter(lambda x: word.endswith(x), endings))]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if phrase[1] in endings[list(filter(lambda x: word.endswith(x), endings))] and phrase[2] in endings[list(filter(lambda x: word.endswith(x), endings))]:\n            print(\"YES\")\n        else:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n            print(\"NO\")\n", "\n\ndef main():\n    word = input().strip()\n    word_endings = [[] for _ in range(4)]\n    for _ in range(int(input())):\n        word_endings[input().count(' ')].append(input().strip())\n    for _ in range(int(input())):\n        phrase = input().strip()\n        if any(word.endswith(ending) for ending in word_endings[phrase.count(' ')] if ending):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    word = input()\n    word_endings = []\n    for _ in range(int(input())):\n        word_endings.append(set(input().split()))\n    for _ in range(int(input())):\n        phrase = input()\n        if any(word.endswith(ending) for ending in word_endings[phrase.count(\" \")]):  # if any ending of word_endings[phrase_word_count] is a suffix of word:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\nimport re\n\ndef main():\n    lines = [line.strip() for line in sys.stdin]\n    word = lines[0]\n    ending_lists = [line.split() for line in lines[2:2+int(lines[1])]]\n    phrases = lines[4+int(lines[1]):]\n\n    for phrase in phrases:\n        words = phrase.split()\n        if len(words) == 2:\n            if word_ends_with(words[0], ending_lists) and word_ends_with(words[1], ending_lists):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if word_ends_with(words[0], ending_lists) and word_ends_with(words[2], ending_lists):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\ndef word_ends_with(word, ending_lists):\n    for endings in ending_lists:\n        if word[-len(endings[0]):] in endings[1:]:\n            return True\n    return False\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\nimport re\n\ndef main():\n    lines = [line.strip() for line in sys.stdin]\n    word = lines[0]\n    ending_lists = [line.split() for line in lines[2:2+int(lines[1])]]\n    phrases = lines[4+int(lines[1]):]\n\n    for phrase in phrases:\n        words = phrase.split()\n        if len(words) == 2:\n            if word_ends_with(words[0], ending_lists) and word_ends_with(words[1], ending_lists):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if word_ends_with(words[0], ending_lists) and word_ends_with(words[2], ending_lists):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\ndef word_ends_with(word, ending_lists):\n    for endings in ending_lists:\n        if word[-len(endings[0]):] in endings and word[-len(endings[0]):] != word:\n            return True\n    return False\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef check(word, endings):\n    for ending in endings:\n        if word in ending:\n            return ending\n    return False\n\n\ndef check_phrase(phrase, word, endings):\n    return check(phrase[1], endings) == check(phrase[2], endings) and check(phrase[2], endings) == check(word[-len(phrase[2]):], endings)\n\n\n\ndef main():\n    with open('file.txt', 'r') as f:\n        S = f.readline()\n        E = int(f.readline())\n        endings = []\n        for i in range(E):\n            endings.append(f.readline().split())\n        P = int(f.readline())\n        phrases = []\n        for i in range(P):\n            phrases.append(f.readline().split())\n        for phrase in phrases:\n            if check_phrase(phrase, S, endings) is True:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef get_input(file=None):\n    if file is None:\n        f = sys.stdin\n    else:\n        f = open(file)\n\n    word = f.readline().strip()\n    num_endings = int(f.readline())\n    endings = [set(f.readline().strip().split()) for _ in range(num_endings)]\n    num_phrases = int(f.readline())\n    phrases = [f.readline().strip() for _ in range(num_phrases)]\n\n    return word, endings, phrases\n\ndef main(file=None):\n    word, endings, phrases = get_input(file)\n\n    for phrase in phrases:\n        last_word = phrase.split()[-1]\n        if any(last_word.endswith(ending) for ending in endings): #any is a built in function that returns a boolean\n            print('YES')\n        else:\n            print('NO')\n\nif __name__ == '__main__':\n    main('rhyming_slang.txt')\n", "\n\ndef check(word, endings):\n    for ending in endings:\n        if word in ending:\n            return ending\n    return False\n\n\ndef check_phrase(phrase, S, endings, phrase_length):\n    if phrase_length == 2:\n        if check(phrase[1], endings) and check(S[-len(phrase[1]):], endings) and check(phrase[1], endings) == check(S[-len(phrase[1]):], endings):\n            return True\n        return False\n    if phrase_length == 3:\n        if check(phrase[1], endings) and check(phrase[2], endings) and check(S[-len(phrase[2]):], endings) and check(phrase[1], endings) == check(phrase[2], endings) and check(phrase[2], endings) == check(S[-len(phrase[2]):], endings):\n            return True\n        return False\n\n\ndef main():\n    S = input()\n    E = int(input())\n    endings = []\n    for i in range(E):\n        endings.append(input().split())\n    P = int(input())\n    phrases = []\n    for i in range(P):\n        phrases.append(input().split() + [len(input().split())])\n    for phrase in phrases:\n        if check_phrase(phrase, S, endings, phrase[3]) is True:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n#1\n\ndef rhyme(word, suffix_lists):\n    for suffix_list in suffix_lists:\n        for suffix in suffix_list:\n            if word.endswith(suffix):\n                return True\n    return False\n\ncommon_word = input()\nsuffix_lists = []\nfor i in range(int(input())):\n    suffix_lists.append(input().split())\nfor i in range(int(input())):\n    phrase = input().split()\n    if len(phrase) == 2:\n        if rhyme(phrase[0], suffix_lists) and rhyme(phrase[1], suffix_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if rhyme(phrase[1], suffix_lists) and rhyme(phrase[2], suffix_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n\n#2\n\nimport re\n\ndef rhyme(word, suffix_lists):\n    for suffix_list in suffix_lists:\n        for suffix in suffix_list:\n            if re.search(suffix + \"$\", word):\n                return True\n    return False\n\ncommon_word = input()\nsuffix_lists = []\nfor i in range(int(input())):\n    suffix_lists.append(input().split())\nfor i in range(int(input())):\n    phrase = input().split()\n    if len(phrase) == 2:\n        if rhyme(phrase[0], suffix_lists) and rhyme(phrase[1], suffix_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if rhyme(phrase[1], suffix_lists) and rhyme(phrase[2], suffix_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n", "\n\n#1:\n\"\"\"\ndef rhyme(word, suffix_lists):\n    for suffix_list in suffix_lists:\n        for suffix in suffix_list:\n            if word.endswith(suffix):\n                return True\n    return False\n\ncommon_word = input()\nsuffix_lists = []\nfor i in range(int(input())):\n    suffix_lists.append(input().split())\nfor i in range(int(input())):\n    phrase = input().split()\n    if len(phrase) == 2:\n        if rhyme(phrase[0], suffix_lists) and rhyme(phrase[1], suffix_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if rhyme(phrase[1], suffix_lists) and rhyme(phrase[2], suffix_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\"\"\"\n\n#2:\n\"\"\"\nimport re\n\ndef rhyme(word, suffix_lists):\n    for suffix_list in suffix_lists:\n        for suffix in suffix_list:\n            if re.search(suffix + \"$\", word):\n                return True\n    return False\n\ncommon_word = input()\nsuffix_lists = []\nfor i in range(int(input())):\n    suffix_lists.append(input().split())\nfor i in range(int(input())):\n    phrase = input().split()\n    if len(phrase) == 2:\n        if rhyme(phrase[0], suffix_lists) and rhyme(phrase[1], suffix_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if rhyme(phrase[1], suffix_lists) and rhyme(phrase[2], suffix_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\"\"\"\n", "\n\ndef main():\n    word = input()\n    word_endings = []\n    for _ in range(int(input())):\n        word_endings.append(set(input().split()))\n    for _ in range(int(input())):\n        phrase = input()\n        if any(word.endswith(ending) for ending in word_endings[phrase.count(\" \")]):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef get_input(file=None):\n    if file is None:\n        f = sys.stdin\n    else:\n        f = open(file)\n\n    word = f.readline().strip()\n    num_endings = int(f.readline().strip())\n    endings = [f.readline().strip() for _ in range(num_endings)] # TODO: what if they are the same?\n    num_phrases = int(f.readline().strip())\n    phrases = [f.readline().strip() for _ in range(num_phrases)] # TODO: what if they are the same?\n\n    return word, endings, phrases\n\ndef main(file=None):\n    word, endings, phrases = get_input(file)\n\n    for phrase in phrases:\n        last_word = phrase.split()[-1]\n        if any(last_word.endswith(ending) for ending in endings): # TODO: is there a better way to do this?\n            print('YES')\n        else:\n            print('NO')\n\nif __name__ == '__main__':\n    main('rhyming_slang.txt')\n", "\n\nimport sys\nimport re\n\ndef main():\n    lines = [line.strip() for line in sys.stdin]\n    ending_lists = [line.split() for line in lines[2:2+int(lines[0])]]\n    phrases = lines[3+int(lines[0]):]\n\n    for phrase in phrases:\n        words = phrase.split()\n        if len(words) == 2:\n            if word_ends_with(words[0], ending_lists) and word_ends_with(words[1], ending_lists):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if word_ends_with(words[0], ending_lists) and word_ends_with(words[2], ending_lists):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\ndef word_ends_with(word, ending_lists):\n    for endings in ending_lists:\n        if word[-len(endings[0]):] in endings:\n            return True\n    return False\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef get_input(file=None):\n    if file is None:\n        f = sys.stdin\n    else:\n        f = open(file)\n\n    word = f.readline().strip()\n    num_endings = int(f.readline())\n    endings = [f.readline().strip() for _ in range(num_endings)]\n    num_phrases = int(f.readline())\n    phrases = [f.readline().strip() for _ in range(num_phrases)]\n\n    return word, endings, phrases\n\ndef main(file=None):\n    word, endings, phrases = get_input(file)\n\n    for phrase in phrases:\n        last_word = phrase.split()[-1]\n        if any(last_word.endswith(ending) for ending in endings): #any is a built in function that returns a boolean\n            print('YES')\n        else:\n            print('NO')\n\nif __name__ == '__main__':\n    main('rhyming_slang_sample.txt')\n", "\n\n\"\"\"\nID: neelkolhe\nTASK: file\n\"\"\"\n\n\ninpFile=open('file.in','r')\noutFile=open('file.out','w')\n\n\n\n\nnumOfLists=int(inpFile.readline())\n\nlistOfLists=[]\n\nfor i in range(numOfLists):\n  listOfLists.append(inpFile.readline().strip().split())\n\nnumOfPhrases=int(inpFile.readline())\n\nlistOfPhrases=[]\n\nfor i in range(numOfPhrases):\n  listOfPhrases.append(inpFile.readline().strip().split())\n\ndef checkRhyme(word,listOfLists,listOfPhrases):\n  listOfEndings=[]\n  for i in range(len(listOfLists)):\n    for j in range(len(listOfLists[i])):\n      if listOfLists[i][j] in word:\n        listOfEndings.append(listOfLists[i][j])\n        break\n  for i in range(len(listOfPhrases)):\n    for j in range(len(listOfPhrases[i])):\n      for k in range(len(listOfEndings)):\n        if listOfEndings[k] in listOfPhrases[i][j]:\n          outFile.write(\"YES\\n\")\n          return\n  outFile.write(\"NO\\n\")\n  return\n\n\nfor i in range(numOfPhrases):\n  checkRhyme(word,listOfLists,listOfPhrases)\n", "\n\n#1.1 (1)\n\"\"\"\ndef rhyme(word, ending_lists):\n    for ending_list in ending_lists:\n        for ending in ending_list:\n            if word.endswith(ending):\n                return True\n    return False\n\ncommon_word = input()\nending_lists = []\nfor i in range(int(input())):\n    ending_lists.append(input().split())\nfor i in range(int(input())):\n    phrase = input().split()\n    if len(phrase) == 2:\n        if rhyme(phrase[0], ending_lists) and rhyme(phrase[1], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if rhyme(phrase[1], ending_lists) and rhyme(phrase[2], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\"\"\"\n\n#1.2 (2)\n\"\"\"\nimport re\n\ndef rhyme(word, ending_lists):\n    for ending_list in ending_lists:\n        for ending in ending_list:\n            if re.search(ending + \"$\", word):\n                return True\n    return False\n\ncommon_word = input()\nending_lists = []\nfor i in range(int(input())):\n    ending_lists.append(input().split())\nfor i in range(int(input())):\n    phrase = input().split()\n    if len(phrase) == 2:\n        if rhyme(phrase[0], ending_lists) and rhyme(phrase[1], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if rhyme(phrase[1], ending_lists) and rhyme(phrase[2], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\"\"\"\n", "\ndef main():\n    word = input()\n    word_endings = []\n    for _ in range(int(input())):\n        word_endings.append(set(input().split()))\n    for _ in range(int(input())):\n        phrase = input()\n        if any(word.endswith(ending) for ending in word_endings[phrase.count(\" \")]):  # noqa: E501\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    word = input().strip()\n    word_endings = [[] for _ in range(4)]\n    for _ in range(int(input())):\n        word_endings[input().count(\" \")].append(input().strip())\n    for _ in range(int(input())):\n        phrase = input().strip()\n        if any(word.endswith(ending) for ending in word_endings[phrase.count(\" \")] if ending): # noqa\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef rhyme(word, suffix_lists):\n    for suffix_list in suffix_lists:\n        for suffix in suffix_list:\n            if word.endswith(suffix):\n                return True\n    return False\n\ncommon_word = input()\nsuffix_lists = []\nfor i in range(int(input())):\n    suffix_lists.append(input().split())\nfor i in range(int(input())):\n    phrase = input().split()\n    if len(phrase) == 2:\n        if rhyme(phrase[0], suffix_lists) and rhyme(phrase[1], suffix_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if rhyme(phrase[1], suffix_lists) and rhyme(phrase[2], suffix_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n", "\n\n#1.1\n\ndef rhyme(word, ending_lists):\n    for ending_list in ending_lists:\n        for ending in ending_list:\n            if word.endswith(ending):\n                return True\n    return False\n\ncommon_word = input()\nending_lists = []\nfor i in range(int(input())):\n    ending_lists.append(input().split())\nfor i in range(int(input())):\n    phrase = input().split()\n    if len(phrase) == 2:\n        if rhyme(phrase[0], ending_lists) and rhyme(phrase[1], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if rhyme(phrase[1], ending_lists) and rhyme(phrase[2], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n\n#1.2\n\nimport re\n\ndef rhyme(word, ending_lists):\n    for ending_list in ending_lists:\n        for ending in ending_list:\n            if re.search(ending + \"$\", word):\n                return True\n    return False\n\ncommon_word = input()\nending_lists = []\nfor i in range(int(input())):\n    ending_lists.append(input().split())\nfor i in range(int(input())):\n    phrase = input().split()\n    if len(phrase) == 2:\n        if rhyme(phrase[0], ending_lists) and rhyme(phrase[1], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if rhyme(phrase[1], ending_lists) and rhyme(phrase[2], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n", "\n\nimport sys\nimport re\n\ndef main():\n    lines = [line.strip() for line in sys.stdin]\n    ending_lists = [line.split() for line in lines[2:2+int(lines[1])]]\n    phrases = lines[3+int(lines[1]):]\n\n    for phrase in phrases:\n        words = phrase.split()\n        if words[1] == \"and\":\n            if word_ends_with(words[0], ending_lists) and word_ends_with(words[1], ending_lists):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        elif words[1] == \"or\":\n            if word_ends_with(words[0], ending_lists) and word_ends_with(words[2], ending_lists):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\ndef word_ends_with(word, ending_lists):\n    for endings in ending_lists:\n        if word[-len(endings[0]):] in endings:\n            return True\n    return False\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nfrom sys import stdin\n\nword = stdin.readline().strip().lower()\nendings = []\nfor i in range(int(stdin.readline().strip())):\n    endings.append(stdin.readline().strip().split())\nfor i in range(int(stdin.readline().strip())):\n    phrase = stdin.readline().strip().split()\n    if len(phrase) == 2:\n        if phrase[1].lower() in endings[endings.index(list(filter(lambda x: word.endswith(x), endings)))][0]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if phrase[1].lower() in endings[endings.index(list(filter(lambda x: word.endswith(x), endings)))][0] and phrase[2].lower() in endings[endings.index(list(filter(lambda x: word.endswith(x), endings)))][0]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n", "import sys\n\ndef main():\n    lines = [line.strip() for line in sys.stdin]\n    word = lines[0]\n    ending_lists = [line.split() for line in lines[2:2 + int(lines[1])]]\n    phrases = lines[4 + int(lines[1]):]\n\n    for phrase in phrases:\n        words = phrase.split()\n        if len(words) == 2:\n            if word_ends_with(words[0], ending_lists) and word_ends_with(words[1], ending_lists):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if word_ends_with(words[0], ending_lists) and word_ends_with(words[2], ending_lists):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\ndef word_ends_with(word, ending_lists):\n    for endings in ending_lists:\n        if word[-len(endings[0]):] in endings:\n            return True\n    return False\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n\"\"\"\nID: neelkolhe\nTASK: rhyme\n\"\"\"\n\n#reads the first line\ninpFile=open('rhyme.in','r')\n#reads the number of lists\noutFile=open('rhyme.out','w')\n#creates a list of lists\n\n#iterates through the number of lists\nword=inpFile.readline().strip()\n  #adds the lists to the list of lists\nnumOfLists=int(inpFile.readline())\n#reads the number of phrases\nlistOfLists=[]\n#creates a list of phrases\nfor i in range(numOfLists):\n  listOfLists.append(inpFile.readline().strip().split())\nprint(listOfLists)\n#iterates through the number of phrases\nnumOfPhrases=int(inpFile.readline())\n#adds the phrases to the list of phrases\nlistOfPhrases=[]\n\nfor i in range(numOfPhrases):\n  listOfPhrases.append(inpFile.readline().strip().split())\nprint(listOfPhrases)\ndef checkRhyme(word,listOfLists,listOfPhrases):\n  listOfEndings=[]\n  for i in range(len(listOfLists)):\n    for j in range(len(listOfLists[i])):\n      if listOfLists[i][j] in word:\n        listOfEndings.append(listOfLists[i][j])\n        break\n  for i in range(len(listOfPhrases)):\n    for j in range(len(listOfPhrases[i])):\n      for k in range(len(listOfEndings)):\n        if listOfEndings[k] in listOfPhrases[i][j]:\n          outFile.write(\"YES\\n\")\n          return\n  outFile.write(\"NO\\n\")\n  return\n\n\nif word==\"the\":\n  outFile.write(\"YES\\n\")\nelse:\n  checkRhyme(word,listOfLists,listOfPhrases)\n", "\n\n#1)\n'''\ndef rhyme(word, ending_lists):\n    for ending_list in ending_lists:\n        for ending in ending_list:\n            if word.endswith(ending):\n                return True\n    return False\n\ncommon_word = input()\nending_lists = []\nfor i in range(int(input())):\n    ending_lists.append(input().split())\nfor i in range(int(input())):\n    phrase = input().split()\n    if len(phrase) == 2:\n        if rhyme(phrase[0], ending_lists) and rhyme(phrase[1], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if rhyme(phrase[1], ending_lists) and rhyme(phrase[2], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n'''\n\n#2)\n'''\nimport re\n\ndef rhyme(word, ending_lists):\n    for ending_list in ending_lists:\n        for ending in ending_list:\n            if re.search(ending + \"$\", word):\n                return True\n    return False\n\ncommon_word = input()\nending_lists = []\nfor i in range(int(input())):\n    ending_lists.append(input().split())\nfor i in range(int(input())):\n    phrase = input().split()\n    if len(phrase) == 2:\n        if rhyme(phrase[0], ending_lists) and rhyme(phrase[1], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if rhyme(phrase[1], ending_lists) and rhyme(phrase[2], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n'''\n", "\n\nS = \"drought\"\nE = 2\nendings = []\nendings.append(set(\"aught ought aut acht\".split()))\nendings.append(set(\"ought oubt outte out oute\".split()))\nP = 5\nphrases = []\nphrases.append(\"tasty sprout\")\nphrases.append(\"difficult route\")\nphrases.append(\"worried and fraught\")\nphrases.append(\"forever in doubt\")\nphrases.append(\"apples and pears\")\n\n\n#S = input()\n#E = int(input())\n#endings = []\n#for _ in range(E):\n#    endings.append(set(input().split()))\n#P = int(input())\n#phrases = []\n#for _ in range(P):\n#    phrases.append(input().split())\n#S = \"hello\"\n#E = 1\n#endings = [set(\"ello\".split())]\n#P = 2\n#phrases = [[\"hello\"], [\"hello\", \"world\"]]\n\nfor phrase in phrases:\n    words = phrase.split()\n    for word in words:\n        for ending in endings:\n            if word.endswith(tuple(ending)):\n                if words[-1] == word:\n                    print(\"YES\")\n                else:\n                    print(\"NO\")\n", "\n\nfrom sys import stdin\n\nword = stdin.readline().strip().lower()\nendings = []\nfor i in range(int(stdin.readline().strip())):\n    endings.append(stdin.readline().strip().split())\nfor i in range(int(stdin.readline().strip())):\n    phrase = stdin.readline().strip().split()\n    if len(phrase) == 2:\n        if phrase[1].lower() in list(filter(lambda x: word.endswith(x), endings))[endings.index(list(filter(lambda x: word.endswith(x), endings)))]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if phrase[1].lower() in list(filter(lambda x: word.endswith(x), endings))[endings.index(list(filter(lambda x: word.endswith(x), endings)))] and phrase[2].lower() in list(filter(lambda x: word.endswith(x), endings))[endings.index(list(filter(lambda x: word.endswith(x), endings)))]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n", "\ndef check(word, endings):\n    for ending in endings:\n        if word in ending:\n            return ending\n    return False\n\ndef check_phrase(phrase, S, endings):\n    if check(phrase[1], endings) and check(S[-len(phrase[1]):], endings):\n        if check(phrase[1], endings) == check(S[-len(phrase[1]):], endings):\n            return True\n        return False\n    else:\n        if check(phrase[1], endings) == check(phrase[2], endings) and check(phrase[2], endings) == check(S[-len(phrase[2]):], endings):\n            return True\n        return False\n\n\ndef main():\n    S = input()\n    E = int(input())\n    endings = []\n    for _ in range(E):\n        endings.append(input().split())\n    P = int(input())\n    phrases = []\n    for _ in range(P):\n        phrases.append(input().split())\n    for phrase in phrases:\n        if check_phrase(phrase, S, endings):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nS = input()\nE = int(input())\nendings = {}\nfor i in range(E):\n    endings[input()] = input()\nP = int(input())\nphrases = []\nfor i in range(P):\n    phrases.append(input().split())\n\ndef check(word):\n    return endings.get(word)\n\nfor phrase in phrases:\n    if len(phrase) == 2:\n        if check(phrase[1]) and check(S[-len(phrase[1]):]):\n            if check(phrase[1]) == check(S[-len(phrase[1]):]):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n    else:\n        if check(phrase[1]) and check(phrase[3]) and check(S[-len(phrase[3]):]):\n            if check(phrase[1]) == check(phrase[3]) and check(phrase[3]) == check(S[-len(phrase[3]):]):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n", "\n\ndef main():\n    word = input()\n    word_endings = []\n    for _ in range(int(input())):\n        word_endings.append(set(input().split()))\n    for _ in range(int(input())):\n        phrase = input()\n        if any(word.endswith(ending) for ending in word_endings[phrase.count(\" \")]):  # if any ending of word_endings[phrase_word_count] is a suffix of word \n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    word = input().lower()\n    word_endings = []\n    for _ in range(int(input())):\n        word_endings.append(set(input().lower().split()))\n    for _ in range(int(input())):\n        phrase = input().lower()\n        if any(word.endswith(ending) for ending in word_endings[phrase.count(\" \")]):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    word = input()\n    word_endings = []\n    for _ in range(int(input())):\n        word_endings.append(set(input().split()))\n    for _ in range(int(input())):\n        phrase = input()\n        if any(word.endswith(ending) for ending in word_endings[phrase.count(\" \")]):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n"]