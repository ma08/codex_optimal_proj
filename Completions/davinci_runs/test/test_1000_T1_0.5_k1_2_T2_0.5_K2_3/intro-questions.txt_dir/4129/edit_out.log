2022-04-12 17:27:49.903033 num operations 2
2022-04-12 17:27:49.903042 size on input set 1
2022-04-12 17:28:05.422034 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "# -*- coding: utf-8 -*-\n\nimport sys\nfrom collections import defaultdict\n\n\ndef dfs(v, visited):\n    visited[v] = True\n    for u in rev_adj_list[v]:\n        if not visited[u]:\n            dfs(u, visited)\n\ndef main():\n    global rev_adj_list\n    n, m, s = map(int, sys.stdin.readline().split())\n    adj_list = defaultdict(list)\n    rev_adj_list = defaultdict(list)\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        adj_list[u].append(v)\n        rev_adj_list[v].append(u)\n    visited = [False] * (n + 1)\n    dfs(s, visited)\n    count = 0\n    for v in range(1, n + 1):\n        if not visited[v]:\n            for u in adj_list[v]:\n                if visited[u]:\n                    count += 1\n                    break\n    print count\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nfrom collections import defaultdict\n\ndef dfs(v, visited):\n\tvisited[v] = True\n\tfor u in rev_adj_list[v]:\n\t\tif not visited[u]:\n\t\t\tdfs(u, visited)\n\ndef main():\n\tglobal rev_adj_list\n\tn, m, s = map(int, sys.stdin.readline().split())\n\tadj_list = defaultdict(list)\n\trev_adj_list = defaultdict(list)\n\tfor _ in range(m):\n\t\tu, v = map(int, sys.stdin.readline().split())\n\t\trev_adj_list[u].append(v)\n\t\tadj_list[v].append(u)\n\tvisited = [False] * (n + 1)\n\tdfs(s, visited)\n\tcount = 0\n\tfor v in range(1, n + 1):\n\t\tif not visited[v]:\n\t\t\tfor u in adj_list[v]:\n\t\t\t\tif visited[u]:\n\t\t\t\t\tcount += 1\n\t\t\t\t\tbreak\n\tprint count\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 2,
      "text": "import sys\nfrom collections import defaultdict\n\ndef dfs(v, visited):\n\tvisited[v] = True\n\tfor u in adj_list[v]:\n\t\tif not visited[u]:\n\t\t\tdfs(u, visited)\n\ndef main():\n\tglobal adj_list\n\tn, m, s = map(int, sys.stdin.readline().split())\n\tadj_list = defaultdict(list)\n\tfor _ in range(m):\n\t\tu, v = map(int, sys.stdin.readline().split())\n\t\tadj_list[u].append(v)\n\tvisited = [False] * (n + 1)\n\tdfs(s, visited)\n\tcount = 0\n\tfor v in range(1, n + 1):\n\t\tif not visited[v]:\n\t\t\tfor u in adj_list[v]:\n\t\t\t\tif visited[u]:\n\t\t\t\t\tcount += 1\n\t\t\t\t\tbreak\n\tprint count\n\nif __name__ == '__main__':\n\tmain()\n"
    }
  ],
  "created": 1649784470,
  "object": "edit"
}
2022-04-12 17:28:05.422261 fix spelling mistakes 3 ["# -*- coding: utf-8 -*-\n\nimport sys\nfrom collections import defaultdict\n\n\ndef dfs(v, visited):\n    visited[v] = True\n    for u in rev_adj_list[v]:\n        if not visited[u]:\n            dfs(u, visited)\n\ndef main():\n    global rev_adj_list\n    n, m, s = map(int, sys.stdin.readline().split())\n    adj_list = defaultdict(list)\n    rev_adj_list = defaultdict(list)\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        adj_list[u].append(v)\n        rev_adj_list[v].append(u)\n    visited = [False] * (n + 1)\n    dfs(s, visited)\n    count = 0\n    for v in range(1, n + 1):\n        if not visited[v]:\n            for u in adj_list[v]:\n                if visited[u]:\n                    count += 1\n                    break\n    print count\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nfrom collections import defaultdict\n\ndef dfs(v, visited):\n\tvisited[v] = True\n\tfor u in rev_adj_list[v]:\n\t\tif not visited[u]:\n\t\t\tdfs(u, visited)\n\ndef main():\n\tglobal rev_adj_list\n\tn, m, s = map(int, sys.stdin.readline().split())\n\tadj_list = defaultdict(list)\n\trev_adj_list = defaultdict(list)\n\tfor _ in range(m):\n\t\tu, v = map(int, sys.stdin.readline().split())\n\t\trev_adj_list[u].append(v)\n\t\tadj_list[v].append(u)\n\tvisited = [False] * (n + 1)\n\tdfs(s, visited)\n\tcount = 0\n\tfor v in range(1, n + 1):\n\t\tif not visited[v]:\n\t\t\tfor u in adj_list[v]:\n\t\t\t\tif visited[u]:\n\t\t\t\t\tcount += 1\n\t\t\t\t\tbreak\n\tprint count\n\nif __name__ == '__main__':\n\tmain()\n", "import sys\nfrom collections import defaultdict\n\ndef dfs(v, visited):\n\tvisited[v] = True\n\tfor u in adj_list[v]:\n\t\tif not visited[u]:\n\t\t\tdfs(u, visited)\n\ndef main():\n\tglobal adj_list\n\tn, m, s = map(int, sys.stdin.readline().split())\n\tadj_list = defaultdict(list)\n\tfor _ in range(m):\n\t\tu, v = map(int, sys.stdin.readline().split())\n\t\tadj_list[u].append(v)\n\tvisited = [False] * (n + 1)\n\tdfs(s, visited)\n\tcount = 0\n\tfor v in range(1, n + 1):\n\t\tif not visited[v]:\n\t\t\tfor u in adj_list[v]:\n\t\t\t\tif visited[u]:\n\t\t\t\t\tcount += 1\n\t\t\t\t\tbreak\n\tprint count\n\nif __name__ == '__main__':\n\tmain()\n"]
2022-04-12 17:28:05.422301 size on output set 3
2022-04-12 17:28:05.422307 size on input set 3
2022-04-12 17:28:17.309513 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# -*- coding: utf-8 -*-\n\nimport sys\nfrom collections import defaultdict\n\n\ndef dfs(v, visited):\n    visited[v] = True\n    for u in rev_adj_list[v]:\n        if not visited[u]:\n            dfs(u, visited)\n\ndef main():\n    global rev_adj_list\n    n, m, s = map(int, sys.stdin.readline().split())\n    adj_list = defaultdict(list)\n    rev_adj_list = defaultdict(list)\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        adj_list[u].append(v)\n        rev_adj_list[v].append(u)\n    visited = [False] * (n + 1)\n    dfs(s, visited)\n    count = 0\n    for v in range(1, n + 1):\n        if not visited[v]:\n            for u in adj_list[v]:\n                if visited[u]:\n                    count += 1\n                    break\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python\n# coding: utf-8\n\nimport sys\nfrom collections import defaultdict\n\n\ndef dfs(v, visited):\n    visited[v] = True\n    for u in rev_adj_list[v]:\n        if not visited[u]:\n            dfs(u, visited)\n\ndef main():\n    global rev_adj_list\n    n, m, s = map(int, sys.stdin.readline().split())\n    adj_list = defaultdict(list)\n    rev_adj_list = defaultdict(list)\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        adj_list[u].append(v)\n        rev_adj_list[v].append(u)\n    visited = [False] * (n + 1)\n    dfs(s, visited)\n    count = 0\n    for v in range(1, n + 1):\n        if not visited[v]:\n            for u in adj_list[v]:\n                if visited[u]:\n                    count += 1\n                    break\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "# -*- coding: utf-8 -*-\n\nimport sys\nfrom collections import defaultdict, deque\n\n\ndef solve(n, m, s):\n    adj_list = defaultdict(list)\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        adj_list[u].append(v)\n    visited = [False] * (n + 1)\n    queue = deque()\n    queue.append(s)\n    visited[s] = True\n    while len(queue):\n        v = queue.popleft()\n        for u in adj_list[v]:\n            if not visited[u]:\n                queue.append(u)\n                visited[u] = True\n    count = 0\n    for v in range(1, n + 1):\n        if not visited[v]:\n            count += 1\n    return count\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    print solve(n, m, s)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649784485,
  "object": "edit"
}
2022-04-12 17:28:17.309703 fix syntax errors 3 ["# -*- coding: utf-8 -*-\n\nimport sys\nfrom collections import defaultdict\n\n\ndef dfs(v, visited):\n    visited[v] = True\n    for u in rev_adj_list[v]:\n        if not visited[u]:\n            dfs(u, visited)\n\ndef main():\n    global rev_adj_list\n    n, m, s = map(int, sys.stdin.readline().split())\n    adj_list = defaultdict(list)\n    rev_adj_list = defaultdict(list)\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        adj_list[u].append(v)\n        rev_adj_list[v].append(u)\n    visited = [False] * (n + 1)\n    dfs(s, visited)\n    count = 0\n    for v in range(1, n + 1):\n        if not visited[v]:\n            for u in adj_list[v]:\n                if visited[u]:\n                    count += 1\n                    break\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python\n# coding: utf-8\n\nimport sys\nfrom collections import defaultdict\n\n\ndef dfs(v, visited):\n    visited[v] = True\n    for u in rev_adj_list[v]:\n        if not visited[u]:\n            dfs(u, visited)\n\ndef main():\n    global rev_adj_list\n    n, m, s = map(int, sys.stdin.readline().split())\n    adj_list = defaultdict(list)\n    rev_adj_list = defaultdict(list)\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        adj_list[u].append(v)\n        rev_adj_list[v].append(u)\n    visited = [False] * (n + 1)\n    dfs(s, visited)\n    count = 0\n    for v in range(1, n + 1):\n        if not visited[v]:\n            for u in adj_list[v]:\n                if visited[u]:\n                    count += 1\n                    break\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "# -*- coding: utf-8 -*-\n\nimport sys\nfrom collections import defaultdict, deque\n\n\ndef solve(n, m, s):\n    adj_list = defaultdict(list)\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        adj_list[u].append(v)\n    visited = [False] * (n + 1)\n    queue = deque()\n    queue.append(s)\n    visited[s] = True\n    while len(queue):\n        v = queue.popleft()\n        for u in adj_list[v]:\n            if not visited[u]:\n                queue.append(u)\n                visited[u] = True\n    count = 0\n    for v in range(1, n + 1):\n        if not visited[v]:\n            count += 1\n    return count\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    print solve(n, m, s)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 17:28:19.788493 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\nfrom collections import defaultdict\n\ndef dfs(v, visited):\n\tvisited[v] = True\n\tfor u in adj_list[v]:\n\t\tif not visited[u]:\n\t\t\tdfs(u, visited)\n\ndef main():\n\tglobal adj_list\n\tn, m, s = map(int, sys.stdin.readline().split())\n\tadj_list = defaultdict(list)\n\tfor _ in range(m):\n\t\tu, v = map(int, sys.stdin.readline().split())\n\t\tadj_list[u].append(v)\n\tvisited = [False] * (n + 1)\n\tdfs(s, visited)\n\tcount = 1\n\tfor v in range(1, n + 1):\n\t\tif not visited[v]:\n\t\t\tfor u in adj_list[v]:\n\t\t\t\tif visited[u]:\n\t\t\t\t\tcount += 1\n\tprint count\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 1,
      "text": "import sys\nfrom collections import defaultdict\n\ndef dfs(v, visited):\n\tvisited[v] = True\n\tfor u in adj_list[v]:\n\t\tif not visited[u]:\n\t\t\tdfs(u, visited)\n\ndef main():\n\tglobal adj_list\n\tn, m, s = map(int, sys.stdin.readline().split())\n\tadj_list = defaultdict(list)\n\tfor _ in range(m):\n\t\tu, v = map(int, sys.stdin.readline().split())[:2]\n\t\tadj_list[u].append(v)\n\tvisited = [False] * (n + 1)\n\tdfs(s, visited)\n\tcount = 0\n\tfor v in range(1, n + 1):\n\t\tif not visited[v]:\n\t\t\tfor u in adj_list[v]:\n\t\t\t\tif visited[u]:\n\t\t\t\t\tcount += 1\n\t\t\t\t\tbreak\n\tprint count\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 2,
      "text": "import sys\nfrom collections import defaultdict\n\ndef dfs(v, visited):\n\tvisited[v] = True\n\tfor u in adj_list[v]:\n\t\tif not visited[u]:\n\t\t\tdfs(u, visited)\n\ndef main():\n\tglobal adj_list\n\tn, m, s = map(int, sys.stdin.readline().split())\n\tadj_list = defaultdict(list)\n\tfor _ in range(m):\n\t\tu, v = map(int, sys.stdin.readline().split())\n\t\tadj_list[u].append(v)\n\tvisited = [False] * (n + 1)\n\tdfs(s, visited)\n\tcount = 0\n\tfor v in range(1, n + 1):\n\t\tif not visited[v]:\n\t\t\tfor u in adj_list[v]:\n\t\t\t\tif visited[u]:\n\t\t\t\t\tcount += 1\n\t\t\t\t\tbreak\n\tprint(count)\n\nif __name__ == '__main__':\n\tmain()\n"
    }
  ],
  "created": 1649784497,
  "object": "edit"
}
2022-04-12 17:28:19.788672 fix syntax errors 3 ["import sys\nfrom collections import defaultdict\n\ndef dfs(v, visited):\n\tvisited[v] = True\n\tfor u in adj_list[v]:\n\t\tif not visited[u]:\n\t\t\tdfs(u, visited)\n\ndef main():\n\tglobal adj_list\n\tn, m, s = map(int, sys.stdin.readline().split())\n\tadj_list = defaultdict(list)\n\tfor _ in range(m):\n\t\tu, v = map(int, sys.stdin.readline().split())\n\t\tadj_list[u].append(v)\n\tvisited = [False] * (n + 1)\n\tdfs(s, visited)\n\tcount = 1\n\tfor v in range(1, n + 1):\n\t\tif not visited[v]:\n\t\t\tfor u in adj_list[v]:\n\t\t\t\tif visited[u]:\n\t\t\t\t\tcount += 1\n\tprint count\n\nif __name__ == '__main__':\n\tmain()\n", "import sys\nfrom collections import defaultdict\n\ndef dfs(v, visited):\n\tvisited[v] = True\n\tfor u in adj_list[v]:\n\t\tif not visited[u]:\n\t\t\tdfs(u, visited)\n\ndef main():\n\tglobal adj_list\n\tn, m, s = map(int, sys.stdin.readline().split())\n\tadj_list = defaultdict(list)\n\tfor _ in range(m):\n\t\tu, v = map(int, sys.stdin.readline().split())[:2]\n\t\tadj_list[u].append(v)\n\tvisited = [False] * (n + 1)\n\tdfs(s, visited)\n\tcount = 0\n\tfor v in range(1, n + 1):\n\t\tif not visited[v]:\n\t\t\tfor u in adj_list[v]:\n\t\t\t\tif visited[u]:\n\t\t\t\t\tcount += 1\n\t\t\t\t\tbreak\n\tprint count\n\nif __name__ == '__main__':\n\tmain()\n", "import sys\nfrom collections import defaultdict\n\ndef dfs(v, visited):\n\tvisited[v] = True\n\tfor u in adj_list[v]:\n\t\tif not visited[u]:\n\t\t\tdfs(u, visited)\n\ndef main():\n\tglobal adj_list\n\tn, m, s = map(int, sys.stdin.readline().split())\n\tadj_list = defaultdict(list)\n\tfor _ in range(m):\n\t\tu, v = map(int, sys.stdin.readline().split())\n\t\tadj_list[u].append(v)\n\tvisited = [False] * (n + 1)\n\tdfs(s, visited)\n\tcount = 0\n\tfor v in range(1, n + 1):\n\t\tif not visited[v]:\n\t\t\tfor u in adj_list[v]:\n\t\t\t\tif visited[u]:\n\t\t\t\t\tcount += 1\n\t\t\t\t\tbreak\n\tprint(count)\n\nif __name__ == '__main__':\n\tmain()\n"]
2022-04-12 17:28:22.272987 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\nrev_adj_list = defaultdict(list)\nfrom collections import defaultdict\n\ndef dfs(v, visited):\n\tvisited[v] = True\n\tfor u in rev_adj_list[v]:\n\t\tif not visited[u]:\n\t\t\tdfs(u, visited)\n\ndef main():\n\tn, m, s = map(int, sys.stdin.readline().split())\n\tadj_list = defaultdict(list)\n\tfor _ in range(m):\n\t\tu, v = map(int, sys.stdin.readline().split())\n\t\trev_adj_list[u].append(v)\n\t\tadj_list[v].append(u)\n\tvisited = [False] * (n + 1)\n\tdfs(s, visited)\n\tcount = 0\n\tfor v in range(1, n + 1):\n\t\tif not visited[v]:\n\t\t\tfor u in adj_list[v]:\n\t\t\t\tif visited[u]:\n\t\t\t\t\tcount += 1\n\t\t\t\t\tbreak\n\tprint count\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nfrom collections import defaultdict\n\ndef dfs(v, visited):\n\tvisited[v] = True\n\tfor u in rev_adj_list[v]:\n\t\tif not visited[u]:\n\t\t\tdfs(u, visited)\n\ndef main():\n\tglobal rev_adj_list\n\tn, m, s = map(int, sys.stdin.readline().split())\n\tadj_list = defaultdict(list)\n\trev_adj_list = defaultdict(list)\n\tfor _ in range(m):\n\t\tu, v = map(int, sys.stdin.readline().split())\n\t\trev_adj_list[u].append(v)\n\t\tadj_list[v].append(u)\n\tvisited = [False] * (n + 1)\n\tdfs(s, visited)\n\tcount = 0\n\tfor v in range(1, n + 1):\n\t\tif not visited[v]:\n\t\t\tfor u in adj_list[v]:\n\t\t\t\tif visited[u]:\n\t\t\t\t\tcount += 1\n\t\t\t\t\tbreak\n\tprint(count)\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 2,
      "text": "import sys\nfrom collections import defaultdict\n\ndef dfs(v, visited):\n\tvisited[v] = True\n\tfor u in rev_adj_list[v]:\n\t\tif not visited[u]:\n\t\t\tdfs(u, visited)\n\ndef main():\n\tglobal rev_adj_list\n\tn, m, s = map(int, sys.stdin.readline().split())\n\tadj_list = defaultdict(list)\n\trev_adj_list = defaultdict(list)\n\tfor _ in range(m):\n\t\tu, v = map(int, sys.stdin.readline().split())\n\t\trev_adj_list[u].append(v)\n\t\tadj_list[v].append(u)\n\tvisited = [False] * (n + 1)\n\tdfs(s, visited)\n\tcount = 0\n\tfor v in range(1, n + 1):\n\t\tif not visited[v]:\n\t\t\tfor u in adj_list[v]:\n\t\t\t\tif visited[u]:\n\t\t\t\t\tcount += 1\n\t\t\t\t\tbreak\n\tprint count\n\nif __name__ == '__main__':\n\tmain()\n"
    }
  ],
  "created": 1649784499,
  "object": "edit"
}
2022-04-12 17:28:22.273180 fix syntax errors 3 ["\n\nimport sys\n\nrev_adj_list = defaultdict(list)\nfrom collections import defaultdict\n\ndef dfs(v, visited):\n\tvisited[v] = True\n\tfor u in rev_adj_list[v]:\n\t\tif not visited[u]:\n\t\t\tdfs(u, visited)\n\ndef main():\n\tn, m, s = map(int, sys.stdin.readline().split())\n\tadj_list = defaultdict(list)\n\tfor _ in range(m):\n\t\tu, v = map(int, sys.stdin.readline().split())\n\t\trev_adj_list[u].append(v)\n\t\tadj_list[v].append(u)\n\tvisited = [False] * (n + 1)\n\tdfs(s, visited)\n\tcount = 0\n\tfor v in range(1, n + 1):\n\t\tif not visited[v]:\n\t\t\tfor u in adj_list[v]:\n\t\t\t\tif visited[u]:\n\t\t\t\t\tcount += 1\n\t\t\t\t\tbreak\n\tprint count\n\nif __name__ == '__main__':\n\tmain()\n", "\nimport sys\nfrom collections import defaultdict\n\ndef dfs(v, visited):\n\tvisited[v] = True\n\tfor u in rev_adj_list[v]:\n\t\tif not visited[u]:\n\t\t\tdfs(u, visited)\n\ndef main():\n\tglobal rev_adj_list\n\tn, m, s = map(int, sys.stdin.readline().split())\n\tadj_list = defaultdict(list)\n\trev_adj_list = defaultdict(list)\n\tfor _ in range(m):\n\t\tu, v = map(int, sys.stdin.readline().split())\n\t\trev_adj_list[u].append(v)\n\t\tadj_list[v].append(u)\n\tvisited = [False] * (n + 1)\n\tdfs(s, visited)\n\tcount = 0\n\tfor v in range(1, n + 1):\n\t\tif not visited[v]:\n\t\t\tfor u in adj_list[v]:\n\t\t\t\tif visited[u]:\n\t\t\t\t\tcount += 1\n\t\t\t\t\tbreak\n\tprint(count)\n\nif __name__ == '__main__':\n\tmain()\n", "import sys\nfrom collections import defaultdict\n\ndef dfs(v, visited):\n\tvisited[v] = True\n\tfor u in rev_adj_list[v]:\n\t\tif not visited[u]:\n\t\t\tdfs(u, visited)\n\ndef main():\n\tglobal rev_adj_list\n\tn, m, s = map(int, sys.stdin.readline().split())\n\tadj_list = defaultdict(list)\n\trev_adj_list = defaultdict(list)\n\tfor _ in range(m):\n\t\tu, v = map(int, sys.stdin.readline().split())\n\t\trev_adj_list[u].append(v)\n\t\tadj_list[v].append(u)\n\tvisited = [False] * (n + 1)\n\tdfs(s, visited)\n\tcount = 0\n\tfor v in range(1, n + 1):\n\t\tif not visited[v]:\n\t\t\tfor u in adj_list[v]:\n\t\t\t\tif visited[u]:\n\t\t\t\t\tcount += 1\n\t\t\t\t\tbreak\n\tprint count\n\nif __name__ == '__main__':\n\tmain()\n"]
2022-04-12 17:28:22.273274 size on output set 9
2022-04-12 17:28:22.273284 num operations 2
2022-04-12 17:28:22.273289 size on input set 1
2022-04-12 17:28:24.117262 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nimport os\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split())\n        roads.append((u, v))\n\n    # Graph\n    graph = [[] for i in range(n+1)]\n    for (u, v) in roads:\n        graph[u].append(v)\n\n    # DFS\n    visited = [False for i in range(n+1)]\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append(v)\n\n    # Count unvisited nodes\n    res = 0\n    for i in range(1, n+1):\n        if i == s:\n            continue\n        if not visited[i]:\n            res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nimport os\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split())\n        roads.append((u, v))\n\n    # Graph\n    graph = [[] for i in range(n+1)]\n    for (u, v) in roads:\n        graph[u].append(v)\n\n    # DFS\n    visited = [False for i in range(n+1)]\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append(v)\n\n    # Count\n    res = 0\n    for i in range(1, n+1):\n        if i == s:\n            continue\n        if not visited[i]:\n            res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\nimport os\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split())\n        roads.append((u, v))\n\n    # Graph \n    graph = [[] for i in range(n+1)]\n    for (u, v) in roads:\n        graph[u].append(v)\n\n    # DFS\n    visited = [False for i in range(n+1)]\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append(v)\n\n    # Count\n    res = 0\n    for i in range(1, n+1):\n        if i == s:\n            continue\n        if not visited[i]:\n            res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649784502,
  "object": "edit"
}
2022-04-12 17:28:24.117507 fix spelling mistakes 3 ["\n\nimport sys\nimport os\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split())\n        roads.append((u, v))\n\n    # Graph\n    graph = [[] for i in range(n+1)]\n    for (u, v) in roads:\n        graph[u].append(v)\n\n    # DFS\n    visited = [False for i in range(n+1)]\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append(v)\n\n    # Count unvisited nodes\n    res = 0\n    for i in range(1, n+1):\n        if i == s:\n            continue\n        if not visited[i]:\n            res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport os\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split())\n        roads.append((u, v))\n\n    # Graph\n    graph = [[] for i in range(n+1)]\n    for (u, v) in roads:\n        graph[u].append(v)\n\n    # DFS\n    visited = [False for i in range(n+1)]\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append(v)\n\n    # Count\n    res = 0\n    for i in range(1, n+1):\n        if i == s:\n            continue\n        if not visited[i]:\n            res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport os\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split())\n        roads.append((u, v))\n\n    # Graph \n    graph = [[] for i in range(n+1)]\n    for (u, v) in roads:\n        graph[u].append(v)\n\n    # DFS\n    visited = [False for i in range(n+1)]\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append(v)\n\n    # Count\n    res = 0\n    for i in range(1, n+1):\n        if i == s:\n            continue\n        if not visited[i]:\n            res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 17:28:24.117550 size on output set 3
2022-04-12 17:28:24.117556 size on input set 3
2022-04-12 17:28:27.069650 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\nimport os\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split())\n        roads.append((u, v))\n\n    # Graph\n    graph = [[] for i in range(n+1)]\n    for (u, v) in roads:\n        graph[u].append(v)\n\n    # DFS\n    visited = [False for i in range(n+1)]\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append(v)\n\n    # Count unvisited nodes\n    res = 0\n    for i in range(1, n+1):\n        if i == s:\n            continue\n        if not visited[i]:\n            res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nimport os\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split())\n        roads.append((u, v))\n\n    # Graph\n    graph = [[] for _ in range(n+1)]\n    for (u, v) in roads:\n        graph[u].append(v)\n\n    # DFS\n    visited = [False for _ in range(n+1)]\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append(v)\n\n    # Count unvisited nodes\n    res = 0\n    for i in range(1, n+1):\n        if i == s:\n            continue\n        if not visited[i]:\n            res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\nimport os\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split())\n        roads.append((u, v))\n\n    # Graph\n    graph = [[] for i in range(n+1)]\n    for (u, v) in roads:\n        graph[u].append(v)\n\n    # DFS\n    visited = [False for i in range(n+1)]\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append(v)\n\n    # Count unvisited nodes\n    res = 0\n    for i in range(1, n+1):\n        if i == s:\n            continue\n        if not visited[i]:\n            res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649784504,
  "object": "edit"
}
2022-04-12 17:28:27.069859 fix syntax errors 3 ["import sys\nimport os\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split())\n        roads.append((u, v))\n\n    # Graph\n    graph = [[] for i in range(n+1)]\n    for (u, v) in roads:\n        graph[u].append(v)\n\n    # DFS\n    visited = [False for i in range(n+1)]\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append(v)\n\n    # Count unvisited nodes\n    res = 0\n    for i in range(1, n+1):\n        if i == s:\n            continue\n        if not visited[i]:\n            res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport os\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split())\n        roads.append((u, v))\n\n    # Graph\n    graph = [[] for _ in range(n+1)]\n    for (u, v) in roads:\n        graph[u].append(v)\n\n    # DFS\n    visited = [False for _ in range(n+1)]\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append(v)\n\n    # Count unvisited nodes\n    res = 0\n    for i in range(1, n+1):\n        if i == s:\n            continue\n        if not visited[i]:\n            res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport os\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split())\n        roads.append((u, v))\n\n    # Graph\n    graph = [[] for i in range(n+1)]\n    for (u, v) in roads:\n        graph[u].append(v)\n\n    # DFS\n    visited = [False for i in range(n+1)]\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append(v)\n\n    # Count unvisited nodes\n    res = 0\n    for i in range(1, n+1):\n        if i == s:\n            continue\n        if not visited[i]:\n            res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 17:28:28.771863 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport os\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split())\n        roads.append((u, v))\n\n    # Graph \n    graph = [[] for i in range(n+1)]\n    for (u, v) in roads:\n        graph[u].append(v)\n\n    # DFS\n    visited = [False for i in range(n+1)]\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append(v)\n\n    # Count\n    res = 0\n    for i in range(1, n+1):\n        if i == s:\n            continue\n        if not visited[i]:\n            res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\nimport os\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split())\n        roads.append((u, v))\n\n    # Graph \n    graph = [[] for i in range(n+1)]\n    for (u, v) in roads:\n        graph[u].append(v)\n\n    # DFS\n    visited = [False for i in range(n+1)]\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append(v)\n\n    # Count\n    res = 0\n    for i in range(1, n+1):\n        if i == s:\n            continue\n        if not visited[i]:\n            res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\nimport os\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split())\n        roads.append((u, v))\n\n    # Graph\n    graph = [[] for i in range(n+1)]\n    for (u, v) in roads:\n        graph[u].append(v)\n\n    # DFS\n    visited = [False for i in range(n+1)]\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append(v)\n\n    # Count\n    res = 0\n    for i in range(1, n+1):\n        if i == s:\n            continue\n        if not visited[i]:\n            res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649784507,
  "object": "edit"
}
2022-04-12 17:28:28.772035 fix syntax errors 3 ["\nimport sys\nimport os\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split())\n        roads.append((u, v))\n\n    # Graph \n    graph = [[] for i in range(n+1)]\n    for (u, v) in roads:\n        graph[u].append(v)\n\n    # DFS\n    visited = [False for i in range(n+1)]\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append(v)\n\n    # Count\n    res = 0\n    for i in range(1, n+1):\n        if i == s:\n            continue\n        if not visited[i]:\n            res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport os\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split())\n        roads.append((u, v))\n\n    # Graph \n    graph = [[] for i in range(n+1)]\n    for (u, v) in roads:\n        graph[u].append(v)\n\n    # DFS\n    visited = [False for i in range(n+1)]\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append(v)\n\n    # Count\n    res = 0\n    for i in range(1, n+1):\n        if i == s:\n            continue\n        if not visited[i]:\n            res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport os\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split())\n        roads.append((u, v))\n\n    # Graph\n    graph = [[] for i in range(n+1)]\n    for (u, v) in roads:\n        graph[u].append(v)\n\n    # DFS\n    visited = [False for i in range(n+1)]\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append(v)\n\n    # Count\n    res = 0\n    for i in range(1, n+1):\n        if i == s:\n            continue\n        if not visited[i]:\n            res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 17:28:30.274833 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport os\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split())\n        roads.append((u, v))\n\n    # Graph\n    graph = [[] for i in range(n+1)]\n    for (u, v) in roads:\n        graph[u].append(v)\n\n    # DFS\n    visited = [False for i in range(n+1)]\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append(v)\n\n    # Count\n    res = 0\n    for i in range(1, n+1):\n        if i == s:\n            continue\n        if not visited[i]:\n            res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nimport os\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split())\n        roads.append((u, v))\n\n    # Graph\n    graph = [[] for i in range(n+1)]\n    for (u, v) in roads:\n        graph[u].append(v)\n\n    # DFS\n    visited = [False for i in range(n+1)]\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append(v)\n\n    # Count\n    res = 0\n    for i in range(1, n+1):\n        if i == s:\n            continue\n        if not visited[i]:\n            res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\nimport os\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split())\n        roads.append((u, v))\n\n    # Graph\n    graph = [[] for i in range(n+1)]\n    for (u, v) in roads:\n        graph[u].append(v)\n\n    # DFS\n    visited = [False for i in range(n+1)]\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append(v)\n\n    # Count\n    res = 0\n    for i in range(1, n+1):\n        if i == s:\n            continue\n        if not visited[i]:\n            res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649784508,
  "object": "edit"
}
2022-04-12 17:28:30.275027 fix syntax errors 3 ["\nimport sys\nimport os\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split())\n        roads.append((u, v))\n\n    # Graph\n    graph = [[] for i in range(n+1)]\n    for (u, v) in roads:\n        graph[u].append(v)\n\n    # DFS\n    visited = [False for i in range(n+1)]\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append(v)\n\n    # Count\n    res = 0\n    for i in range(1, n+1):\n        if i == s:\n            continue\n        if not visited[i]:\n            res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport os\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split())\n        roads.append((u, v))\n\n    # Graph\n    graph = [[] for i in range(n+1)]\n    for (u, v) in roads:\n        graph[u].append(v)\n\n    # DFS\n    visited = [False for i in range(n+1)]\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append(v)\n\n    # Count\n    res = 0\n    for i in range(1, n+1):\n        if i == s:\n            continue\n        if not visited[i]:\n            res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport os\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split())\n        roads.append((u, v))\n\n    # Graph\n    graph = [[] for i in range(n+1)]\n    for (u, v) in roads:\n        graph[u].append(v)\n\n    # DFS\n    visited = [False for i in range(n+1)]\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append(v)\n\n    # Count\n    res = 0\n    for i in range(1, n+1):\n        if i == s:\n            continue\n        if not visited[i]:\n            res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 17:28:30.275121 size on output set 7
