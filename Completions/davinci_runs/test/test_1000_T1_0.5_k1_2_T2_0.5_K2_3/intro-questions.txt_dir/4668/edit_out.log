2022-04-12 23:23:32.684128 num operations 2
2022-04-12 23:23:32.684140 size on input set 1
2022-04-12 23:23:42.804938 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "import math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points(self.x - no.x, self.y - no.y, self.z - no.z)\n\n    def dot(self, no):\n        return self.x * no.x + self.y * no.y + self.z * no.z\n\n    def cross(self, no):\n        return Points(self.y * no.z - self.z * no.y, self.z * no.x - self.x * no.z, self.x * no.y - self.y * no.x)\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n"
    },
    {
      "index": 1,
      "text": "print(\"Hello World\")\n"
    },
    {
      "index": 2,
      "text": "\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, other):\n        return Points(self.x - other.x, self.y - other.y, self.z - other.z)\n\n    def dot(self, other):\n        return self.x * other.x + self.y * other.y + self.z * other.z\n\n    def cross(self, other):\n        return Points(self.y * other.z - self.z * other.y, self.z * other.x - self.x * other.z, self.x * other.y - self.y * other.x)\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n"
    }
  ],
  "created": 1649805812,
  "object": "edit"
}
2022-04-12 23:23:42.805182 fix spelling mistakes 3 ['import math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points(self.x - no.x, self.y - no.y, self.z - no.z)\n\n    def dot(self, no):\n        return self.x * no.x + self.y * no.y + self.z * no.z\n\n    def cross(self, no):\n        return Points(self.y * no.z - self.z * no.y, self.z * no.x - self.x * no.z, self.x * no.y - self.y * no.x)\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\n\nif __name__ == \'__main__\':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print("%.2f" % math.degrees(angle))\n', 'print("Hello World")\n', '\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, other):\n        return Points(self.x - other.x, self.y - other.y, self.z - other.z)\n\n    def dot(self, other):\n        return self.x * other.x + self.y * other.y + self.z * other.z\n\n    def cross(self, other):\n        return Points(self.y * other.z - self.z * other.y, self.z * other.x - self.x * other.z, self.x * other.y - self.y * other.x)\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\n\nif __name__ == \'__main__\':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print("%.2f" % math.degrees(angle))\n']
2022-04-12 23:23:42.805221 size on output set 3
2022-04-12 23:23:42.805229 size on input set 3
2022-04-12 23:23:51.234785 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import math\n\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points(self.x - no.x, self.y - no.y, self.z - no.z)\n\n    def dot(self, no):\n        return self.x * no.x + self.y * no.y + self.z * no.z\n\n    def cross(self, no):\n        return Points(self.y * no.z - self.z * no.y, self.z * no.x - self.x * no.z, self.x * no.y - self.y * no.x)\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\n\nif __name__ == '__main__':\n    points = list()\n    for _ in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n"
    },
    {
      "index": 1,
      "text": "import math\n\nclass Points(object):\n    def __init__(self, x, y, z=0):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, other):\n        return Points(self.x - other.x, self.y - other.y, self.z - other.z)\n\n    def dot(self, other):\n        return self.x * other.x + self.y * other.y + self.z * other.z\n\n    def cross(self, other):\n        return Points(self.y * other.z - self.z * other.y, self.z * other.x - self.x * other.z, self.x * other.y - self.y * other.x)\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n"
    },
    {
      "index": 2,
      "text": "import math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, other):\n        return Points(self.x - other.x, self.y - other.y, self.z - other.z)\n\n    def dot(self, other):\n        return self.x * other.x + self.y * other.y + self.z * other.z\n\n    def cross(self, other):\n        return Points(self.y * other.z - self.z * other.y, self.z * other.x - self.x * other.z, self.x * other.y - self.y * other.x)\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n"
    }
  ],
  "created": 1649805822,
  "object": "edit"
}
2022-04-12 23:23:51.234993 fix syntax errors 3 ['import math\n\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points(self.x - no.x, self.y - no.y, self.z - no.z)\n\n    def dot(self, no):\n        return self.x * no.x + self.y * no.y + self.z * no.z\n\n    def cross(self, no):\n        return Points(self.y * no.z - self.z * no.y, self.z * no.x - self.x * no.z, self.x * no.y - self.y * no.x)\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\n\nif __name__ == \'__main__\':\n    points = list()\n    for _ in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print("%.2f" % math.degrees(angle))\n', 'import math\n\nclass Points(object):\n    def __init__(self, x, y, z=0):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, other):\n        return Points(self.x - other.x, self.y - other.y, self.z - other.z)\n\n    def dot(self, other):\n        return self.x * other.x + self.y * other.y + self.z * other.z\n\n    def cross(self, other):\n        return Points(self.y * other.z - self.z * other.y, self.z * other.x - self.x * other.z, self.x * other.y - self.y * other.x)\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\n\nif __name__ == \'__main__\':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print("%.2f" % math.degrees(angle))\n', 'import math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, other):\n        return Points(self.x - other.x, self.y - other.y, self.z - other.z)\n\n    def dot(self, other):\n        return self.x * other.x + self.y * other.y + self.z * other.z\n\n    def cross(self, other):\n        return Points(self.y * other.z - self.z * other.y, self.z * other.x - self.x * other.z, self.x * other.y - self.y * other.x)\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\n\nif __name__ == \'__main__\':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print("%.2f" % math.degrees(angle))\n']
2022-04-12 23:23:56.814642 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, other):\n        return Points(self.x - other.x, self.y - other.y, self.z - other.z)\n\n    def dot(self, other):\n        return self.x * other.x + self.y * other.y + self.z * other.z\n\n    def cross(self, other):\n        return Points(self.y * other.z - self.z * other.y, self.z * other.x - self.x * other.z, self.x * other.y - self.y * other.x)\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = list(map(int, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n"
    },
    {
      "index": 1,
      "text": "\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, other):\n        return Points(self.x - other.x, self.y - other.y, self.z - other.z)\n\n    def dot(self, other):\n        return self.x * other.x + self.y * other.y + self.z * other.z\n\n    def cross(self, other):\n        return Points(self.y * other.z - self.z * other.y, self.z * other.x - self.x * other.z, self.x * other.y - self.y * other.x)\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))  # use list comprehension\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])  # use * to unpack list\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n"
    },
    {
      "index": 2,
      "text": "\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport math\n\nclass Points:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, other):\n        return Points(self.x - other.x, self.y - other.y, self.z - other.z)\n\n    def dot(self, other):\n        return self.x * other.x + self.y * other.y + self.z * other.z\n\n    def cross(self, other):\n        return Points(self.y * other.z - self.z * other.y,\n                      self.z * other.x - self.x * other.z,\n                      self.x * other.y - self.y * other.x)\n\n    def absolute(self):\n        return pow(self.x ** 2 + self.y ** 2 + self.z ** 2, 0.5)\n\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n"
    }
  ],
  "created": 1649805831,
  "object": "edit"
}
2022-04-12 23:23:56.814821 fix syntax errors 3 ['\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, other):\n        return Points(self.x - other.x, self.y - other.y, self.z - other.z)\n\n    def dot(self, other):\n        return self.x * other.x + self.y * other.y + self.z * other.z\n\n    def cross(self, other):\n        return Points(self.y * other.z - self.z * other.y, self.z * other.x - self.x * other.z, self.x * other.y - self.y * other.x)\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\n\nif __name__ == \'__main__\':\n    points = list()\n    for i in range(4):\n        a = list(map(int, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print("%.2f" % math.degrees(angle))\n', '\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, other):\n        return Points(self.x - other.x, self.y - other.y, self.z - other.z)\n\n    def dot(self, other):\n        return self.x * other.x + self.y * other.y + self.z * other.z\n\n    def cross(self, other):\n        return Points(self.y * other.z - self.z * other.y, self.z * other.x - self.x * other.z, self.x * other.y - self.y * other.x)\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\n\nif __name__ == \'__main__\':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))  # use list comprehension\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])  # use * to unpack list\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print("%.2f" % math.degrees(angle))\n', '\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport math\n\nclass Points:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, other):\n        return Points(self.x - other.x, self.y - other.y, self.z - other.z)\n\n    def dot(self, other):\n        return self.x * other.x + self.y * other.y + self.z * other.z\n\n    def cross(self, other):\n        return Points(self.y * other.z - self.z * other.y,\n                      self.z * other.x - self.x * other.z,\n                      self.x * other.y - self.y * other.x)\n\n    def absolute(self):\n        return pow(self.x ** 2 + self.y ** 2 + self.z ** 2, 0.5)\n\n\nif __name__ == \'__main__\':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print("%.2f" % math.degrees(angle))\n']
2022-04-12 23:23:58.764703 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python\n\nprint (\"Hello World\")\n"
    },
    {
      "index": 1,
      "text": "print(\"Hello World!\")\n"
    },
    {
      "index": 2,
      "text": "print(\"Hello World\") \n"
    }
  ],
  "created": 1649805836,
  "object": "edit"
}
2022-04-12 23:23:58.764889 fix syntax errors 3 ['#!/usr/bin/env python\n\nprint ("Hello World")\n', 'print("Hello World!")\n', 'print("Hello World") \n']
2022-04-12 23:23:58.764906 size on output set 9
2022-04-12 23:23:58.764918 num operations 2
2022-04-12 23:23:58.764924 size on input set 1
2022-04-12 23:24:00.562286 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "import math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points((self.x - no.x), (self.y - no.y), (self.z - no.z))\n\n    def dot(self, no):\n        return (self.x * no.x) + (self.y * no.y) + (self.z * no.z)\n\n    def cross(self, no):\n        return Points((self.y * no.z - self.z * no.y), (self.z * no.x - self.x * no.z), (self.x * no.y - self.y * no.x))\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n"
    },
    {
      "index": 1,
      "text": "import math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points((self.x - no.x), (self.y - no.y), (self.z - no.z))\n\n    def dot(self, no):\n        return (self.x * no.x) + (self.y * no.y) + (self.z * no.z)\n\n    def cross(self, no):\n        return Points((self.y * no.z - self.z * no.y), (self.z * no.x - self.x * no.z), (self.x * no.y - self.y * no.x))\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n"
    },
    {
      "index": 2,
      "text": "import math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points((self.x - no.x), (self.y - no.y), (self.z - no.z))\n\n    def dot(self, no):\n        return (self.x * no.x) + (self.y * no.y) + (self.z * no.z)\n\n    def cross(self, no):\n        return Points((self.y * no.z - self.z * no.y), (self.z * no.x - self.x * no.z), (self.x * no.y - self.y * no.x))\n        \n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n"
    }
  ],
  "created": 1649805838,
  "object": "edit"
}
2022-04-12 23:24:00.562553 fix spelling mistakes 3 ['import math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points((self.x - no.x), (self.y - no.y), (self.z - no.z))\n\n    def dot(self, no):\n        return (self.x * no.x) + (self.y * no.y) + (self.z * no.z)\n\n    def cross(self, no):\n        return Points((self.y * no.z - self.z * no.y), (self.z * no.x - self.x * no.z), (self.x * no.y - self.y * no.x))\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == \'__main__\':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print("%.2f" % math.degrees(angle))\n', 'import math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points((self.x - no.x), (self.y - no.y), (self.z - no.z))\n\n    def dot(self, no):\n        return (self.x * no.x) + (self.y * no.y) + (self.z * no.z)\n\n    def cross(self, no):\n        return Points((self.y * no.z - self.z * no.y), (self.z * no.x - self.x * no.z), (self.x * no.y - self.y * no.x))\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == \'__main__\':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print("%.2f" % math.degrees(angle))\n', 'import math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points((self.x - no.x), (self.y - no.y), (self.z - no.z))\n\n    def dot(self, no):\n        return (self.x * no.x) + (self.y * no.y) + (self.z * no.z)\n\n    def cross(self, no):\n        return Points((self.y * no.z - self.z * no.y), (self.z * no.x - self.x * no.z), (self.x * no.y - self.y * no.x))\n        \n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == \'__main__\':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print("%.2f" % math.degrees(angle))\n']
2022-04-12 23:24:00.562600 size on output set 2
2022-04-12 23:24:00.562608 size on input set 2
2022-04-12 23:24:04.841937 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points((self.x - no.x), (self.y - no.y), (self.z - no.z))\n\n    def dot(self, no):\n        return (self.x * no.x) + (self.y * no.y) + (self.z * no.z)\n\n    def cross(self, no):\n        return Points((self.y * no.z - self.z * no.y), (self.z * no.x - self.x * no.z), (self.x * no.y - self.y * no.x))\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n"
    },
    {
      "index": 1,
      "text": "import math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points((self.x - no.x), (self.y - no.y), (self.z - no.z))\n\n    def dot(self, no):\n        return (self.x * no.x) + (self.y * no.y) + (self.z * no.z)\n\n    def cross(self, no):\n        return Points((self.y * no.z - self.z * no.y), (self.z * no.x - self.x * no.z), (self.x * no.y - self.y * no.x))\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n"
    },
    {
      "index": 2,
      "text": "import math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points(self.x - no.x, self.y - no.y, self.z - no.z)\n\n    def dot(self, no):\n        return (self.x * no.x) + (self.y * no.y) + (self.z * no.z)\n\n    def cross(self, no):\n        return Points(self.y * no.z - self.z * no.y, self.z * no.x - self.x * no.z, self.x * no.y - self.y * no.x)\n        \n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n"
    }
  ],
  "created": 1649805840,
  "object": "edit"
}
2022-04-12 23:24:04.842127 fix syntax errors 3 ['import math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points((self.x - no.x), (self.y - no.y), (self.z - no.z))\n\n    def dot(self, no):\n        return (self.x * no.x) + (self.y * no.y) + (self.z * no.z)\n\n    def cross(self, no):\n        return Points((self.y * no.z - self.z * no.y), (self.z * no.x - self.x * no.z), (self.x * no.y - self.y * no.x))\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == \'__main__\':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print("%.2f" % math.degrees(angle))\n', 'import math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points((self.x - no.x), (self.y - no.y), (self.z - no.z))\n\n    def dot(self, no):\n        return (self.x * no.x) + (self.y * no.y) + (self.z * no.z)\n\n    def cross(self, no):\n        return Points((self.y * no.z - self.z * no.y), (self.z * no.x - self.x * no.z), (self.x * no.y - self.y * no.x))\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == \'__main__\':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print("%.2f" % math.degrees(angle))\n', 'import math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points(self.x - no.x, self.y - no.y, self.z - no.z)\n\n    def dot(self, no):\n        return (self.x * no.x) + (self.y * no.y) + (self.z * no.z)\n\n    def cross(self, no):\n        return Points(self.y * no.z - self.z * no.y, self.z * no.x - self.x * no.z, self.x * no.y - self.y * no.x)\n        \n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == \'__main__\':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print("%.2f" % math.degrees(angle))\n']
2022-04-12 23:24:12.289616 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points(self.x - no.x, self.y - no.y, self.z - no.z)\n\n    def dot(self, no):\n        return self.x * no.x + self.y * no.y + self.z * no.z\n\n    def cross(self, no):\n        return Points(self.y * no.z - self.z * no.y, self.z * no.x - self.x * no.z, self.x * no.y - self.y * no.x)\n\n    def absolute(self):\n        return math.sqrt(self.x ** 2 + self.y ** 2 + self.z ** 2)\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n"
    },
    {
      "index": 1,
      "text": "import math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points(self.x - no.x, self.y - no.y, self.z - no.z)\n\n    def dot(self, no):\n        return (self.x * no.x) + (self.y * no.y) + (self.z * no.z)\n\n    def cross(self, no):\n        return Points(self.y * no.z - self.z * no.y, self.z * no.x - self.x * no.z, self.x * no.y - self.y * no.x)\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n"
    },
    {
      "index": 2,
      "text": "import math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points((self.x - no.x), (self.y - no.y), (self.z - no.z)) #subtraction\n\n    def dot(self, no):\n        return (self.x * no.x) + (self.y * no.y) + (self.z * no.z) #dot product\n\n    def cross(self, no):\n        return Points((self.y * no.z - self.z * no.y), (self.z * no.x - self.x * no.z), (self.x * no.y - self.y * no.x)) #cross product\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5) #absolute value\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n"
    }
  ],
  "created": 1649805844,
  "object": "edit"
}
2022-04-12 23:24:12.289791 fix syntax errors 3 ['import math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points(self.x - no.x, self.y - no.y, self.z - no.z)\n\n    def dot(self, no):\n        return self.x * no.x + self.y * no.y + self.z * no.z\n\n    def cross(self, no):\n        return Points(self.y * no.z - self.z * no.y, self.z * no.x - self.x * no.z, self.x * no.y - self.y * no.x)\n\n    def absolute(self):\n        return math.sqrt(self.x ** 2 + self.y ** 2 + self.z ** 2)\n\nif __name__ == \'__main__\':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print("%.2f" % math.degrees(angle))\n', 'import math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points(self.x - no.x, self.y - no.y, self.z - no.z)\n\n    def dot(self, no):\n        return (self.x * no.x) + (self.y * no.y) + (self.z * no.z)\n\n    def cross(self, no):\n        return Points(self.y * no.z - self.z * no.y, self.z * no.x - self.x * no.z, self.x * no.y - self.y * no.x)\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == \'__main__\':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print("%.2f" % math.degrees(angle))\n', 'import math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points((self.x - no.x), (self.y - no.y), (self.z - no.z)) #subtraction\n\n    def dot(self, no):\n        return (self.x * no.x) + (self.y * no.y) + (self.z * no.z) #dot product\n\n    def cross(self, no):\n        return Points((self.y * no.z - self.z * no.y), (self.z * no.x - self.x * no.z), (self.x * no.y - self.y * no.x)) #cross product\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5) #absolute value\n\nif __name__ == \'__main__\':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print("%.2f" % math.degrees(angle))\n']
2022-04-12 23:24:12.289838 size on output set 5
