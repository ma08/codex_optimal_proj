["\n\ndef solution(n, k, id_list, m):\n    conversations = []\n    for id in id_list:\n        if len(conversations) >= k:\n            conversations.pop()\n        conversations = [id] + conversations\n    m = len(conversations)\n    return conversations\n\nif __name__ == '__main__':\n    n, k = list(map(int, input().split()))\n    id_list = list(map(int, input().split()))\n    m = 0\n    conversations = solution(n, k, id_list, m)\n    print(m)\n    print(*conversations)\n", "\n\ndef solution(n, k, id_list, m):\n    conversation = []\n    for id in id_list:\n        if id not in conversation:\n            if len(conversation) >= k:\n                conversation.pop()\n            conversation = [id] + conversation\n    m = len(conversation)\n    return conversation\n\nif __name__ == '__main__':\n    n, k = list(map(int, input().split()))\n    id_list = list(map(int, input().split()))\n    m = 0\n    conversation = solution(n, k, id_list, m)\n    print(m)\n    print(*conversation)\n", "\n\ndef main():\n    pass\n\nmain()\n", "\n\ndef solution(n, k, conversations):\n    conversations = []\n    for id in conversations:\n        if id not in conversations:\n            if len(conversations) >= k:\n                conversations.pop()\n            conversations = [id] + conversations\n    return len(conversations), conversations\n\nif __name__ == '__main__':\n    n, k = list(map(int, input().split()))\n    ids = list(map(int, input().split()))\n    m, conversations = solution(n, k, conversations)\n    print(m)\n    print(*conversations)\n", "\n\ndef solution(n, k, id_list):\n    conversations = []\n    for id in id_list:\n        if id not in conversations:\n            if len(conversations) >= k:\n                conversations.pop()\n            conversations = [id] + conversations\n    return len(conversations), conversations\n\nif __name__ == '__main__':\n    n, k = list(map(int, input().split()))\n    id_list = list(map(int, input().split()))\n    m, conversations = solution(n, k, id_list)\n    print(m)\n    print(*conversations)\n", "# https://codeforces.com/problemset/problem/1145/A\n\ndef main():\n    n, k = [int(x) for x in input().split()]\n    messages = [int(x) for x in input().split()]\n    messages.reverse()\n    conversation = []\n    for message in messages:\n        if message not in conversation:\n            if len(conversation) == k:\n                conversation.pop()\n            conversation.insert(0, message)\n    print(len(conversation))\n    print(' '.join([str(x) for x in conversation]))\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, k = [int(x) for x in input().split()]\n    messages = [int(x) for x in input().split()]\n    messages.reverse()\n    conversation = []\n    for message in messages:\n        if message not in conversation:\n            if len(conversation) == k:\n                conversation.pop()\n            conversation.insert(0, message)\n    print(len(conversation))\n    print(' '.join([str(x) for x in conversation]))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n, m = [int(x) for x in input().split()]\n    matrix = [input() for i in range(n)]\n    for i in range(m):\n        for j in range(n):\n            print(matrix[n - j - 1][i], end='')\n        print()\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, k = [int(x) for x in input().split()]\n    messages = [int(x) for x in input().split()]\n    messages.reverse()\n    conversations = []\n    for message in messages:\n        if message not in conversations:\n            if len(conversations) == k:\n                conversations.pop()\n            conversations.insert(0, message)\n    print(len(conversations))\n    print(' '.join(str(x) for x in conversations))\n\nmain()\n", "\n\ndef solution(n, k, id_list):\n    conversations = []\n    for ids in id_list:\n        if ids not in conversations:\n            if len(conversations) >= k:\n                conversations.pop()\n            conversations = [ids] + conversations\n    return len(conversations), conversations\n\nif __name__ == '__main__':\n    n, k = list(map(int, input().split()))\n    id_list = list(map(int, input().split()))\n    m, conversations = solution(n, k, id_list)\n    print(m)\n    print(*conversations)\n", "\n\ndef main():\n    n, k = [int(x) for x in input().split()]\n    messages = [int(x) for x in input().split()][::-1]\n    conversation = []\n    for message in messages:\n        if message not in conversation:\n            if len(conversation) == k:\n                conversation.pop()\n            conversation.insert(0, message)\n    print(len(conversation))\n    print(' '.join([str(x) for x in conversation]))\n\nmain()\n", "\n\ndef main():\n    n, m = [int(x) for x in input().split()]\n    matrix = [input() for i in range(n)]\n    for i in range(m):\n        for j in range(n):\n            print(matrix[n - j - 1][i], end='')\n        print()\n\n\nmain()\n", "\n\ndef solution(n, k, id_list):\n    conversations = [id_list[0]]\n    for id in id_list[1:]:\n        if id not in conversations: \n            if len(conversations) == k:\n                conversations.pop(0)\n            conversations.append(id)\n    return len(conversations)\n\nif __name__ == '__main__':\n    n, k = list(map(int, input().split()))\n    id_list = list(map(int, input().split()))\n    m, conversations = solution(n, k, id_list)\n    print(m)\n    print(*conversations)\n", "\n\ndef solution(n, k, ids):\n    conversations = []\n    for id in ids:\n        if id not in conversations:\n            if len(conversations) >= k:\n                conversations.pop()\n            conversations = [id] + conversations[:]\n    return len(conversations), conversations\n\nif __name__ == '__main__':\n    n, k = list(map(int, input().split()))\n    ids = list(map(int, input().split()))\n    m, conversations = solution(n, k, ids)\n    print(m)\n    print(*conversations)\n", "\n\ndef solution(n, k, ids):\n    conversations = []\n    for id in ids:\n        if id not in conversations:\n            if len(conversations) >= k:\n                conversations.pop()\n            conversations = [id] + conversations  # TODO: Fix bug\n    return len(conversations), conversations\n\nif __name__ == '__main__':\n    n, k = list(map(int, input().split()))\n    ids = list(map(int, input().split()))\n    m, conversations = solution(n, k, ids)\n    print(m)\n    print(*conversations)\n", "\n\ndef main():\n    n, k = [int(x) for x in input().split()]\n    messages = [int(x) for x in input().split()]\n    messages.reverse()\n    conversations = []\n    for message in messages:\n        if message not in conversations:\n            if len(conversations) == k:\n                conversations.pop()\n            conversations.insert(0, message)\n    print(len(conversations))\n    print(' '.join([str(x) for x in conversations]))\n\nmain()\n", "\n\ndef solution(n, k, id_list):\n    conversations = []\n    for id in id_list:\n        if id not in conversations:\n            if len(conversations) >= k:\n                conversations.pop()\n            conversations = [id] + conversations\n    m = len(conversations)\n    return conversations\n\nif __name__ == '__main__':\n    n, k = list(map(int, input().split()))\n    id_list = list(map(int, input().split()))\n    m = 0\n    conversations = solution(n, k, id_list, m)\n    print(m)\n    print(*conversations)\n"]