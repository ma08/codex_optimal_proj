["from collections import deque\nn, k = map(int, input().split())\nA = list(map(int, input().split()))\nB = deque()\nB.append(A[0])\nfor i in range(1, n):\n    if A[i] not in B:\n        if len(B) == k:\n            B.popleft()\n        B.append(A[i])\n    else:\n        pass\nprint(len(B))\nprint(*list(B)[::-1])", "from collections import deque\n\nn, k = list(map(int, input().split()))\nar = list(map(int, input().split()))\nlol = deque([])\nfor elem in ar:\n    if elem not in lol:\n        if len(lol) == k:\n            lol.pop()\n        lol.appendleft(elem)\nprint(len(lol))\nprint(*lol)", "from collections import deque\na, b = map(int, input().split())\nli = list(map(int, input().split()))\ns = set()\nl = deque([])\nle = 0\nfor i in li:\n    if i in s:\n        pass\n    elif le < b:\n        le += 1\n        s.add(i)\n        l.appendleft(i)\n    else:\n        s.remove(l.pop())\n        s.add(i)\n        l.appendleft(i)       \nprint(len(l))\nprint(*list(l))", "import sys\ninput = sys.stdin.readline\n\nn,k=list(map(int,input().split()))\nA=list(map(int,input().split()))\n\nSET=set()\n\nfrom collections import deque\n\nQ=deque()\n\nfor a in A:\n    if a in SET:\n        continue\n    else:\n        if len(Q)==k:\n            x=Q.pop()\n            SET.remove(x)\n            Q.appendleft(a)\n            SET.add(a)\n        else:\n            SET.add(a)\n            Q.appendleft(a)\n\nprint(len(Q))\nprint(*Q)\n            \n            \n", "from collections import deque\nn, k = list(map(int, input().split()))\ns = set()\nd = deque()\nfor i in map(int, input().split()):\n    if i in s:\n        continue\n    if len(d) == k:\n        s.discard(d.pop())\n    d.appendleft(i)\n    s.add(i)\nprint(len(d))\nprint(*d)\n", "n,k=map(int,input().split())\nide=input().split()\nfor i in range(n):\n    ide[i]=int(ide[i])\na=[]\nfor i in range(n):\n    if(ide[i] in a):\n        continue\n    else:\n        if(len(a)<k):\n            a.append(ide[i])\n        else:\n            a.pop(0)\n            a.append(ide[i])\nprint(len(a))\nfor i in range(len(a)):\n    print(a[len(a)-1-i],end=\" \")\nprint()    ", "n, k = list(map(int, input().split()))\n\nd = list(map(int, input().split()))\n\nin_list = set()\n\ncon = []\n\nfor x in d:\n\tif x in in_list:\n\t\tcontinue\n\tif len(con) == k:\n\t\ttop = con[0]\n\t\tin_list.remove(top)\n\t\tcon.pop(0)\n\n\tcon.append(x)\n\tin_list.add(x)\n\nprint(len(con))\nprint(*con[::-1])\n", "from collections import deque\n\nn, k = map(int ,input().split())\nq = deque(maxlen=k)\nc = list(map(int, input().split()))\nfor i in c:\n    if i not in q:\n        q.append(i)\n    else:\n        continue\nprint(len(q))\nprint(*list(q)[::-1])", "n, k = tuple(map(int, input().split()))\narr = list(map(int, input().split()))\n\nnowlist = []\nnowset = set()\n\nfor i in arr:\n    if i in nowset:\n        continue\n    if len(nowlist) == k:\n        nowset.remove(nowlist.pop())\n    nowlist = [i] + nowlist\n    nowset.add(i)\n\nprint(len(nowlist))\nprint(*nowlist)\n", "n,k=map(int,input().split())\nl=[int(i) for i in input().split()]\n#n msgs  i Th from idiur \ncurr=[]\nfor i in l:\n    if i in curr:\n        pass \n    else: \n        if len(curr)==k:\n            curr.pop()\n            curr.insert(0,i)\n        else:\n            curr.insert(0,i)\nprint(len(curr))\nprint(*curr)", "n, m = map(int, input().split())\ndata = list(map(int, input().split()))\narray = []\nc = 0\nfor i in data:\n    if i not in array:\n        c += 1\n        if c > m:\n            array = [i] + array[:-1]\n        else:\n            array = [i] + array\nprint(m if c >= m else c)\nprint(*array)", "n, k = map(int, input().split())\nids = input().split()\nqueue = []\nfor i in ids:\n    if len(queue) < k and i not in queue:\n        queue.insert(0, i)\n    elif len(queue) >= k and i not in queue:\n        del queue[-1]\n        queue.insert(0, i)\nprint(len(queue))\nprint(' '.join(queue))", "n,k = map(int,input().split())\nl = []\nfor i in map(int,input().split()):\n    if i not in l:\n        if len(l)==k:\n            del l[-1]\n        l.insert(0,i)\nprint(len(l))\nprint(*l)", "from collections import deque\nn,k=map(int,input().split())\nd=deque()\ns=set()\nfor i in map(int,input().split()):\n  if i in s:continue\n  d.appendleft(i);s.add(i)\n  if len(d)>k:s.discard(d.pop())\nprint(len(d))\nprint(*d)", "import sys\n\ndef main():\n    def input():\n        return sys.stdin.readline()[:-1]\n\n    n, k = map(int,input().split())\n    a = list(map(int,input().split()))\n    l = []\n    for e in a:\n        if len(l) == k:\n            if e not in l:\n                l = [e] + l[:-1]\n            else:\n                pass\n        else:\n            if e not in l:\n                l = [e] + l\n            else:\n                pass\n    print(len(l))\n    print(*l, sep = \" \")\ndef __starting_point():\n    main()\n\n__starting_point()", "n, k = map(int, input().strip().split())\nids = map(int, input().strip().split())\nconvs = []\nfor i in ids:\n    if i in convs:\n        continue\n    elif len(convs) == k:\n        convs.pop()\n    convs.insert(0, i)\nprint(len(convs))\nprint(\" \".join(map(str, convs)))", "n,k = [int(i) for i in input().split()]\n\nmsg = [int(i) for i in input().split()]\n\nfila = []\nfor i in msg:\n    if i in fila:\n        continue\n    if len(fila) >= k:\n        fila.pop()\n    fila = [i] + fila\nprint(len(fila))\nprint(*fila)\n\n        \n", "n,k=list(map(int,input().split()))\nl=list(map(int,input().split()))\nl1=[]\nfor i in range(len(l)):\n    if(l[i] not in l1):\n        l1.insert(0,l[i])\n    if(len(l1)>k):\n        l1 = l1[:len(l1) - 1]\nprint(len(l1))\nprint(*l1)\n", "def __starting_point():\n    l = [int(i) for i in input().split(\" \")]\n    n = l[0]\n    k = l[1]\n\n    l = [int(i) for i in input().split(\" \")]\n\n    a = []\n\n    for i in l:\n        if i not in a:\n            if len(a)>=k:\n                a.pop()\n            a.insert(0,i)\n\n    print(len(a))\n\n    for i in a:\n        print(i, end=' ')\n\n\n\n\n\n__starting_point()", "from collections import defaultdict as df\nimport heapq\nimport bisect \nimport math\nfrom itertools import combinations,permutations\nfrom collections import deque\n\nn,k=list(map(int,input().split()))\na=list(map(int,input().rstrip().split()))\nans=[]\nfor i in a:\n    if i in ans:\n        pass\n    else:\n        if len(ans)>=k:\n            ans.pop()\n            ans.insert(0,i)\n        else:\n            ans.insert(0,i)\nprint(len(ans))\nprint(*ans)", "import math\ninp = lambda cast=int: [cast(x) for x in input().split()]\nprintf = lambda s='', *args, **kwargs: print(str(s).format(*args), flush=True, **kwargs)\n\nn, k = inp()\nA = inp()\nB = []\nfor a in A:\n    if a in B:\n        continue\n    B = [a] + B\n    if len(B) > k:\n        B.pop()\nprint(len(B))\nfor b in B:\n    print(b, end=' ')\n", "n, k = (int(x) for x in input().split())\n\nmsg = [int(x) for x in input().split()]\n\nstk = []\n\nfor m in msg:\n\tif m in stk:\n\t\tcontinue\n\n\tstk.insert(0, m)\n\twhile len(stk) > k:\n\t\tstk.pop()\n\nprint(len(stk))\nfor i in stk:\n\tprint(i, end=\" \")\nprint()", "import heapq\nn,k=map(int,input().split())\na=[int(o) for o in input().split()]\nh=[]\ns=set()\nj=0\nfor i in range(n):\n    if a[i] not in s:\n        heapq.heappush(h,[i,a[i]])\n        j+=1\n        s.add(a[i])\n        if j>k:\n            j-=1\n            lol=heapq.heappop(h)\n            s.remove(lol[1])\nst=[]\nwhile h:\n    st.append(heapq.heappop(h)[1])\nst=st[::-1]\nprint(len(st))\nprint(*st)"]