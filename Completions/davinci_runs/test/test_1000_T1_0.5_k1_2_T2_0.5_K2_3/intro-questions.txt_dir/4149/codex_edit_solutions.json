["\n\n\ndef solve(n, b):\n    \"\"\"\n    >>> solve(3, [3, 5, 2, 3, 2, 4]) == [3, 4, 2]\n    True\n    >>> solve(1, [2750131, 199999]) == [199999]\n    True\n    >>> solve(1, [3, 6]) == [6]\n    True\n    >>> solve(3, [3, 5, 2, 3, 2, 4])\n    [3, 4, 2]\n    >>> solve(1, [2750131, 199999])\n    [199999]\n    >>> solve(1, [3, 6])\n    [6]\n    \"\"\"\n    # The first n elements of b are the elements of a.\n    # The remaining n elements of b are the divisors of the elements of a.\n    # If an element of a is prime, it is replaced by the n-th prime number.\n    # Thus the elements of b can be sorted and the second half of b can be used to find the elements of a.\n    # The elements of a are the elements of b that are not in the second half of b.\n    b.sort()\n    a = [i for i in b if i not in b[n:]]\n    return a\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    b = list(map(int, input().split()))\n    print(*solve(n, b))\n", "\n\nprimes = []\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_primes():\n    i = 2\n    while True:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n        yield\n\ndef solve(n, b):\n    primes = []\n    gen = get_primes()\n    while len(primes) < n:\n        next(gen)\n    a = []\n    for i, val in enumerate(b):\n        if i % 2 == 0:\n            a.append(val)\n        else:\n            if val in primes:\n                a.append(primes.index(val) + 1)\n            else:\n                a.append(val)\n    return a\n\ndef main():\n    n = int(input())\n    b = [int(i) for i in input().split(' ')]\n    a = solve(n, b)\n    print(' '.join([str(i) for i in a]))\n\nif __name__ == '__main__':\n    main()\n", "\ndef convert_to_prime(n):\n    primes = []\n    i = 2\n    while len(primes) < n:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n    return primes\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_prime():\n    primes = []\n    i = 2\n    while True:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n        yield primes\n\ndef solve(n, b):\n    primes = convert_to_prime(n)\n    a = []\n    for i, val in enumerate(b):\n        if i % 2 == 0:\n            a.append(val)\n        else:\n            if val in primes:\n                a.append(primes.index(val) + 1)\n            else:\n                a.append(val)\n    return a\n\ndef main():\n    n = int(input())\n    b = [int(i) for i in input().split(' ')]\n    a = solve(n, b)\n    print(' '.join([str(i) for i in a]))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef convert_to_prime(n):\n    primes = []\n    i = 2\n    while len(primes) < n:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n    return primes\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_prime():\n    primes = []\n    i = 2\n    while True:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n        yield i\n\ndef solve(n, b):\n    primes = convert_to_prime(n)\n    a = []\n    for i, val in enumerate(b):\n        if i % 2 == 0:\n            a.append(val)\n        else:\n            if val in primes:\n                a.append(primes.index(val) + 1)\n            else:\n                a.append(val)\n    return a\n\ndef main():\n    n = int(input())\n    b = [int(i) for i in input().split(' ')]\n    a = solve(n, b)\n    print(' '.join([str(i) for i in a]))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef convert_to_prime(n):\n    primes = []\n    i = 2\n    while len(primes) < n:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n    return primes\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef solve(n, b, c):\n    primes = convert_to_prime(n)\n    a = []\n    for i, val in enumerate(b):\n        if i % 2 == 0:\n            a.append(val)\n        else:\n            if val in primes:\n                a.append(primes.index(val) + 1)\n            else:\n                a.append(val)\n    return a\n\ndef main():\n    n = int(input())\n    b = [int(i) for i in input().split(' ')]\n    a = solve(n, b)\n    print(' '.join([str(i) for i in a]))\n\nif __name__ == '__main__':\n    main()\n", "\ndef solve(n, b):\n    \"\"\"\n    >>> solve(3, [3, 5, 2, 3, 2, 4])\n    [3, 4, 2]\n    >>> solve(1, [2750131, 199999])\n    [199999]\n    >>> solve(1, [3, 6])\n    [6]\n    \"\"\"\n    # The first n elements of b are the elements of a.\n    # The remaining n elements of b are the divisors of the elements of a.\n    # If an element of a is prime, it is replaced by the n-th prime number.\n    # Thus the elements of b can be sorted and the second half of b can be used to find the elements of a.\n    # The elements of a are the elements of b that are not in the second half of b.\n    b.sort()\n    a = [i for i in b if i not in b[n:]]\n    return a\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    b = list(map(int, input().split()))\n    print(*solve(n, b))\n", "\n\ndef get_primes(n):\n  return\n", "\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_primes(n):\n    primes = []\n    i = 2\n    while i <= n:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n    return primes\n\ndef convert_to_primes(n):\n    primes = get_primes(n)\n    d = {}\n    for i, val in enumerate(primes):\n        d[val] = i + 1\n    return d\n\ndef solve(n, b):\n    primes = convert_to_primes(n)\n    a = []\n    for i, val in enumerate(b):\n        if i % 2 == 0:\n            a.append(val)\n        else:\n            if val in primes.keys():\n                a.append(primes[val])\n            else:\n                a.append(val)\n    return a\n\ndef main():\n    n = int(input())\n    b = [int(i) for i in input().split()]\n    a = solve(n, b)\n    print(' '.join([str(i) for i in a]))\n\nif __name__ == '__main__':\n    main()\n", "\ndef solve(n, b):\n    \"\"\"\n    >>> solve(3, [3, 5, 2, 3, 2, 4])\n    [3, 4, 2]\n    >>> solve(1, [2750131, 199999])\n    [199999]\n    >>> solve(1, [3, 6])\n    [6]\n    \"\"\"\n    # The first n elements of b are the elements of a.\n    # The remaining n elements of b are the divisors of the elements of a.\n    # If an element of a is prime, it is replaced by the n-th prime number.\n    # Thus the elements of b can be sorted and the second half of the elements of b can be used to find the elements of a\n    # (the elements of a are the elements of b that are not in the second half of b).\n    b.sort()\n    a = [i for i in b if i not in b[n:]]\n    return a\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    b = list(map(int, input().split()))\n    print(*solve(n, b))\n", "\n\ndef get_primes(n):\n    pass\n", "\n\n\ndef solve(n, b):\n    \"\"\"\n    >>> solve(3, [3, 5, 2, 3, 2, 4])\n    [3, 4, 2]\n    >>> solve(1, [2750131, 199999])\n    [199999]\n    >>> solve(1, [3, 6])\n    [6]\n    \"\"\"\n    # The first n elements of b are the elements of a.\n    # The remaining n elements of b are the divisors of the elements of a.\n    # If an element of a is prime, it is replaced by the n-th prime number.\n    # Thus the elements of b can be sorted and the second half of the elements of b can be used to find the elements of\n    # a (the elements of a are the elements of b that are not in the second half of b).\n    b.sort()\n    a = [i for i in b if i not in b[n:]]\n    return a\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    b = list(map(int, input().split()))\n    print(*solve(n, b))\n", "\ndef solve(n, b):\n    \"\"\"\n    >>> solve(3, [3, 5, 2, 3, 2, 4])\n    [3, 4, 2]\n    >>> solve(1, [2750131, 199999])\n    [199999]\n    >>> solve(1, [3, 6])\n    [6]\n    \"\"\"\n    # The first n elements of b are the elements of a.\n    # The remaining n elements of b are the divisors of the elements of a.\n    # If an element of a is prime, it is replaced by the n-th prime number.\n    # Thus the elements of b can be sorted and the second half of the elements of b can be used to find the elements of\n    # a (the elements of a are the elements of b that are not in the second half of b).\n    b.sort()\n    a = [i for i in b if i not in b[n:]]\n    return a\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    b = list(map(int, input().split()))\n    print(*solve(n, b))\n", "\n\n\ndef solve(n, b):\n    \"\"\"\n    >>> solve(3, [3, 5, 2, 3, 2, 4])\n    [3, 4, 2]\n    >>> solve(1, [2750131, 199999])\n    [199999]\n    >>> solve(1, [3, 6])\n    [6]\n    \"\"\"\n    # The first n elements of b are the elements of a. The remaining n elements of b are the divisors of the elements from a.\n    # If an element of a is prime, it is replaced by the n-th prime number. Thus the elements of b can be sorted and the\n    # second half of the elements of b can be used to find the elements from a. The elements from a are the elements of\n    # b that are not in the second half of b.\n    b.sort()\n    a = [i for i in b if i not in b[n:]]\n    return a\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    b = list(map(int, input().split()))\n    print(*solve(n, b))\n", "\ndef solve(n, b):\n    \"\"\"\n    >>> solve(3, [3, 5, 2, 3, 2, 4])\n    [3, 4, 2]\n    >>> solve(1, [2750131, 199999])\n    [199999]\n    >>> solve(1, [3, 6])\n    [6]\n    \"\"\"\n    # The first n elements of b are the elements of a.\n    # The remaining n elements of b are the divisors of the elements from a.\n    # If an element of a is prime, it is replaced by the n-th prime number.\n    # Thus the elements of b can be sorted and the second half of the elements of b\n    # can be used to find the elements from a.\n    # The elements from a are the elements of b that are not in the second half of b.\n    b.sort()\n    a = [i for i in b if i not in b[n:]]\n    return a\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    b = list(map(int, input().split()))\n    print(*solve(n, b))\n", "\n\n\n\ndef solve(n, b):\n    \"\"\"\n    >>> solve(3, [3, 5, 2, 3, 2, 4])\n    [3, 4, 2]\n    >>> solve(1, [2750131, 199999])\n    [199999]\n    >>> solve(1, [3, 6])\n\n    [6]\n    \"\"\"\n    # The first n elements of b are the elements of a.\n    # The remaining n elements of b are the divisors of the elements from a.\n    # If an element of a is prime, it is replaced by the n-th prime number.\n    # Thus the elements of b can be sorted and the second half of the elements of b can be used to find the elements from a.\n    # The elements from a are the elements of b that are not in the second half of b.\n    b.sort()\n    a = [i for i in b if i not in b[n:]]\n    return a\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    b = list(map(int, input().split()))\n    print(*solve(n, b))\n", "\n\ndef get_primes():\n    primes = []\n    i = 2\n    while True:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n        yield primes\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef solve(n, b):\n    a = []\n    for i, val in enumerate(b):\n        if i % 2 == 0:\n            a.append(val)\n        else:\n            if val in primes:\n                a.append(primes.index(val) + 1)\n            else:\n                a.append(val)\n    return a\n\ndef main():\n    n = int(input())\n    b = [int(i) for i in input().split(' ')]\n    a = solve(n, b)\n    print(' '.join([str(i) for i in a]))\n\nif __name__ == '__main__':\n    main()\n"]