2022-04-12 17:15:44.004594 num operations 2
2022-04-12 17:15:44.004612 size on input set 1
2022-04-12 17:15:46.110577 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ns = input()\n\nif s == s[::-1]:\n    print(0)\n    exit()\n\nfor i in range(len(s) // 2 + 1):\n    if s[i] == s[-1 - i]:\n        continue\n    else:\n        print(1)\n        break\nelse:\n    print(1)\n"
    },
    {
      "index": 1,
      "text": "\n#check if it is palindrome\ns = input()\n\nif s == s[::-1]:\n    print(0)\n    exit()\n#check if one character needs to be changed\nfor i in range(len(s) // 2):\n    if s[i] == s[-1 - i]:\n        continue\n    else:\n        print(1)\n        break\nelse:\n    print(1)\n"
    },
    {
      "index": 2,
      "text": "\n\ns = input()\n\nif s == s[::-1]:\n    print(1)\n    exit()\n\nfor i in range(len(s) // 2):\n    if s[i] == s[-1 - i]:\n        continue\n    else:\n        print(1)\n        break\nelse:\n    print(0)\n"
    }
  ],
  "created": 1649783744,
  "object": "edit"
}
2022-04-12 17:15:46.110804 fix spelling mistakes 3 ['\n\ns = input()\n\nif s == s[::-1]:\n    print(0)\n    exit()\n\nfor i in range(len(s) // 2 + 1):\n    if s[i] == s[-1 - i]:\n        continue\n    else:\n        print(1)\n        break\nelse:\n    print(1)\n', '\n#check if it is palindrome\ns = input()\n\nif s == s[::-1]:\n    print(0)\n    exit()\n#check if one character needs to be changed\nfor i in range(len(s) // 2):\n    if s[i] == s[-1 - i]:\n        continue\n    else:\n        print(1)\n        break\nelse:\n    print(1)\n', '\n\ns = input()\n\nif s == s[::-1]:\n    print(1)\n    exit()\n\nfor i in range(len(s) // 2):\n    if s[i] == s[-1 - i]:\n        continue\n    else:\n        print(1)\n        break\nelse:\n    print(0)\n']
2022-04-12 17:15:46.110830 size on output set 3
2022-04-12 17:15:46.110837 size on input set 3
2022-04-12 17:15:49.470299 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ns = input()\n\nif s == s[::-1]:\n    print(0)\n    exit()\n\nfor i in range(len(s) // 2 + 1):\n    if s[i] == s[-1 - i]:\n        continue\n    else:\n        print(1)\n        break\nelse:\n    print(1)\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\ns = input().split()\n\nprint(s)\n"
    },
    {
      "index": 2,
      "text": "\ns = input()\n\nif s == s[::-1]:\n    print(0)\n    exit()\nfor i in range(len(s) // 2 + 1):\n    if s[i] == s[-1 - i]:\n        continue\n    else:\n        print(1)\n        break\nelse:\n    print(1)\n"
    }
  ],
  "created": 1649783746,
  "object": "edit"
}
2022-04-12 17:15:49.470474 fix syntax errors 3 ['\ns = input()\n\nif s == s[::-1]:\n    print(0)\n    exit()\n\nfor i in range(len(s) // 2 + 1):\n    if s[i] == s[-1 - i]:\n        continue\n    else:\n        print(1)\n        break\nelse:\n    print(1)\n', '\n\nn = int(input())\ns = input().split()\n\nprint(s)\n', '\ns = input()\n\nif s == s[::-1]:\n    print(0)\n    exit()\nfor i in range(len(s) // 2 + 1):\n    if s[i] == s[-1 - i]:\n        continue\n    else:\n        print(1)\n        break\nelse:\n    print(1)\n']
2022-04-12 17:15:51.031382 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ns = input()\n\nif s == s[::-1]:\n    print(1)\n    exit()\n\nfor i in range(len(s) // 2):\n    if s[i] == s[-1 - i]:\n        continue\n    else:\n        print(1)\n        break\nelse:\n    print(0)\n"
    },
    {
      "index": 1,
      "text": "\ns = input()\n\nif s == s[::-1]:\n    print(1)\n    exit()\nfor i in range(len(s) // 2):\n    if s[i] == s[-1 - i]:\n        continue\n    else:\n        print(1)\n        break\nelse:\n    print(0)\n"
    },
    {
      "index": 2,
      "text": "\n \ns = input()\n\nif s == s[::-1]:\n    print(1)\n    exit()\n\nfor i in range(len(s) // 2):\n    if s[i] == s[-1 - i]:\n        continue\n    else:\n        print(1)\n        break\nelse:\n    print(0)\n"
    }
  ],
  "created": 1649783749,
  "object": "edit"
}
2022-04-12 17:15:51.031580 fix syntax errors 3 ['\ns = input()\n\nif s == s[::-1]:\n    print(1)\n    exit()\n\nfor i in range(len(s) // 2):\n    if s[i] == s[-1 - i]:\n        continue\n    else:\n        print(1)\n        break\nelse:\n    print(0)\n', '\ns = input()\n\nif s == s[::-1]:\n    print(1)\n    exit()\nfor i in range(len(s) // 2):\n    if s[i] == s[-1 - i]:\n        continue\n    else:\n        print(1)\n        break\nelse:\n    print(0)\n', '\n \ns = input()\n\nif s == s[::-1]:\n    print(1)\n    exit()\n\nfor i in range(len(s) // 2):\n    if s[i] == s[-1 - i]:\n        continue\n    else:\n        print(1)\n        break\nelse:\n    print(0)\n']
2022-04-12 17:15:53.248326 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# check if it is palindrome\ns = input()\n\nif s == s[::-1]:\n    print(0)\n    exit()\n# check if one character needs to be changed\nfor i in range(len(s) // 2):\n    if s[i] == s[-1 - i]:\n        continue\n    else:\n        print(1)\n        break\nelse:\n    print(1)\n"
    },
    {
      "index": 1,
      "text": "#check if it is palindrome\ns = input()\n\nif s == s[::-1]:\n    print(0)\n    exit()\n#check if one character needs to be changed\nfor i in range(len(s) // 2):\n    if s[i] == s[-1 - i]:\n        continue\n    else:\n        print(1)\n        break\nelse:\n    print(1)\n"
    },
    {
      "index": 2,
      "text": "# check if it is palindrome\ns = input()\n\nif s == s[::-1]:\n    print(0)\n    exit()\n# check if one character needs to be changed\nfor i in range(len(s) // 2):\n    if s[i] == s[-1 - i]:\n        continue\n    else:\n        print(1)\n        break\nelse:\n    print(1)\n"
    }
  ],
  "created": 1649783751,
  "object": "edit"
}
2022-04-12 17:15:53.248506 fix syntax errors 3 ['\n# check if it is palindrome\ns = input()\n\nif s == s[::-1]:\n    print(0)\n    exit()\n# check if one character needs to be changed\nfor i in range(len(s) // 2):\n    if s[i] == s[-1 - i]:\n        continue\n    else:\n        print(1)\n        break\nelse:\n    print(1)\n', '#check if it is palindrome\ns = input()\n\nif s == s[::-1]:\n    print(0)\n    exit()\n#check if one character needs to be changed\nfor i in range(len(s) // 2):\n    if s[i] == s[-1 - i]:\n        continue\n    else:\n        print(1)\n        break\nelse:\n    print(1)\n', '# check if it is palindrome\ns = input()\n\nif s == s[::-1]:\n    print(0)\n    exit()\n# check if one character needs to be changed\nfor i in range(len(s) // 2):\n    if s[i] == s[-1 - i]:\n        continue\n    else:\n        print(1)\n        break\nelse:\n    print(1)\n']
2022-04-12 17:15:53.248533 size on output set 9
2022-04-12 17:15:53.248554 num operations 2
2022-04-12 17:15:53.248559 size on input set 1
2022-04-12 17:15:59.633393 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\"\"\"\n\u89e3\u8aac:\n\n\u30fb\u5165\u529b\u6587\u5b57\u5217\u304c\u56de\u6587\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\n\u30fb\u5165\u529b\u6587\u5b57\u5217\u306e\u5404\u6587\u5b57\u30921\u6587\u5b57\u305a\u3064\u5909\u66f4\u3057\u3066\u56de\u6587\u306b\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\n\n\"\"\"\n\nS = input()\n\ndef is_palindrome(S):\n    if len(S) <= 1:\n        return True\n    return S[0] == S[-1] and is_palindrome(S[1:-1])\n\ndef is_palindrome_with_one_change(S):\n    if is_palindrome(S):\n        return True\n    for i in range(len(S)):\n        if is_palindrome(S[:i] + S[i+1:]):\n            return True\n    return False\n\nprint(0 if is_palindrome_with_one_change(S) else 1)\n"
    },
    {
      "index": 1,
      "text": "\n\n\"\"\"\n\u89e3\u8aac\u3000https://img.atcoder.jp/abc119/editorial.pdf\n\n\u30fb\u5165\u529b\u6587\u5b57\u5217\u304c\u56de\u6587\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\u3092\u5b9a\u7fa9\n\u30fb\u5165\u529b\u6587\u5b57\u5217\u306e\u5404\u6587\u5b57\u30921\u6587\u5b57\u305a\u3064\u5909\u66f4\u3057\u3066\u56de\u6587\u306b\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\u3092\u5b9a\u7fa9\n\n\"\"\"\n\nS = input()\n\ndef is_palindrome(S):\n    if len(S) <= 1:\n        return True\n    return S[0] == S[-1] and is_palindrome(S[1:-1])\n\ndef is_palindrome_with_one_change(S):\n    if is_palindrome(S):\n        return True\n    for i in range(len(S)):\n        if is_palindrome(S[:i] + S[i+1:]):\n            return True\n    return False\n\nprint(0 if is_palindrome_with_one_change(S) else 1)\n"
    },
    {
      "index": 2,
      "text": "\n\n\"\"\"\n\u89e3\u8aac:\n\n\u30fb\u5165\u529b\u6587\u5b57\u5217\u304c\u56de\u6587\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\n\u30fb\u5165\u529b\u6587\u5b57\u5217\u306e\u5404\u6587\u5b57\u30921\u6587\u5b57\u305a\u3064\u5909\u66f4\u3057\u3066\u56de\u6587\u306b\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\n\n\"\"\"\n\nS = input()\n\ndef is_palindrome(S):\n    if len(S) <= 1:\n        return True\n    return S[0] == S[-1] and is_palindrome(S[1:-1])\n\ndef is_palindrome_with_one_change(S):\n    if is_palindrome(S):\n        return True\n    for i in range(len(S)):\n        if is_palindrome(S[:i] + S[i+1:]):\n            return True\n    return False\n\nprint(0 if is_palindrome_with_one_change(S) else 1)\n"
    }
  ],
  "created": 1649783753,
  "object": "edit"
}
2022-04-12 17:15:59.633657 fix spelling mistakes 3 ['\n\n"""\n解説:\n\n・入力文字列が回文かどうかを判定する関数\n・入力文字列の各文字を1文字ずつ変更して回文にできるかどうかを判定する関数\n\n"""\n\nS = input()\n\ndef is_palindrome(S):\n    if len(S) <= 1:\n        return True\n    return S[0] == S[-1] and is_palindrome(S[1:-1])\n\ndef is_palindrome_with_one_change(S):\n    if is_palindrome(S):\n        return True\n    for i in range(len(S)):\n        if is_palindrome(S[:i] + S[i+1:]):\n            return True\n    return False\n\nprint(0 if is_palindrome_with_one_change(S) else 1)\n', '\n\n"""\n解説\u3000https://img.atcoder.jp/abc119/editorial.pdf\n\n・入力文字列が回文かどうかを判定する関数を定義\n・入力文字列の各文字を1文字ずつ変更して回文にできるかどうかを判定する関数を定義\n\n"""\n\nS = input()\n\ndef is_palindrome(S):\n    if len(S) <= 1:\n        return True\n    return S[0] == S[-1] and is_palindrome(S[1:-1])\n\ndef is_palindrome_with_one_change(S):\n    if is_palindrome(S):\n        return True\n    for i in range(len(S)):\n        if is_palindrome(S[:i] + S[i+1:]):\n            return True\n    return False\n\nprint(0 if is_palindrome_with_one_change(S) else 1)\n', '\n\n"""\n解説:\n\n・入力文字列が回文かどうかを判定する関数\n・入力文字列の各文字を1文字ずつ変更して回文にできるかどうかを判定する関数\n\n"""\n\nS = input()\n\ndef is_palindrome(S):\n    if len(S) <= 1:\n        return True\n    return S[0] == S[-1] and is_palindrome(S[1:-1])\n\ndef is_palindrome_with_one_change(S):\n    if is_palindrome(S):\n        return True\n    for i in range(len(S)):\n        if is_palindrome(S[:i] + S[i+1:]):\n            return True\n    return False\n\nprint(0 if is_palindrome_with_one_change(S) else 1)\n']
2022-04-12 17:15:59.633701 size on output set 2
2022-04-12 17:15:59.633707 size on input set 2
2022-04-12 17:16:14.873175 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\nS = input()\n\ndef is_palindrome(s):\n    if len(s) <= 1:\n        return True \n    return s[0] == s[-1] and is_palindrome(s[1:-1])\n\ndef is_palindrome_with_one_change(S):\n    if is_palindrome(S):\n        return True\n    for i in range(len(S)):\n        if is_palindrome(S[:i] + S[i+1:]):\n            return True\n    return False\n\nprint(0 if is_palindrome_with_one_change(S) else 1)\n"
    },
    {
      "index": 1,
      "text": "\n\n\"\"\"\n\u89e3\u8aac\u3000https://img.atcoder.jp/abc119/editorial.pdf\n\n\u30fb\u5165\u529b\u6587\u5b57\u5217\u304c\u56de\u6587\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\u3092\u5b9a\u7fa9\n\u30fb\u5165\u529b\u6587\u5b57\u5217\u306e\u5404\u6587\u5b57\u30921\u6587\u5b57\u305a\u3064\u5909\u66f4\u3057\u3066\u56de\u6587\u306b\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\u3092\u5b9a\u7fa9\n\"\"\"\n\nS = input()\n\ndef is_palindrome(S):\n    if len(S) <= 1:\n        return True\n    return S[0] == S[-1] and is_palindrome(S[1:-1])\n\ndef is_palindrome_with_one_change(S):\n    if is_palindrome(S):\n        return True\n    for i in range(len(S)):\n        if is_palindrome(S[:i] + S[i+1:]):\n            return True\n    return False\n\nprint(0 if is_palindrome_with_one_change(S) else 1)\n"
    },
    {
      "index": 2,
      "text": "\n\n\"\"\"\n\u89e3\u8aac\u3000https://img.atcoder.jp/abc119/editorial.pdf\n\n\u30fb\u5165\u529b\u6587\u5b57\u5217\u304c\u56de\u6587\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\u3092\u5b9a\u7fa9\n\u30fb\u5165\u529b\u6587\u5b57\u5217\u306e\u5404\u6587\u5b57\u30921\u6587\u5b57\u305a\u3064\u5909\u66f4\u3057\u3066\u56de\u6587\u306b\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\u3092\u5b9a\u7fa9\n\"\"\"\n\nS = input()\n\ndef is_palindrome(S):\n    if len(S) <= 1:\n        return True\n    return S[0] == S[-1] and is_palindrome(S[1:-1])\n\ndef is_palindrome_with_one_change(S):\n    if is_palindrome(S):\n        return True\n    for i in range(len(S)):\n        if is_palindrome(S[:i] + S[i+1:]):\n            return True\n    return False\n\nprint(0 if is_palindrome_with_one_change(S) else 1)\n"
    }
  ],
  "created": 1649783759,
  "object": "edit"
}
2022-04-12 17:16:14.873428 fix syntax errors 3 ['\n\n\nS = input()\n\ndef is_palindrome(s):\n    if len(s) <= 1:\n        return True \n    return s[0] == s[-1] and is_palindrome(s[1:-1])\n\ndef is_palindrome_with_one_change(S):\n    if is_palindrome(S):\n        return True\n    for i in range(len(S)):\n        if is_palindrome(S[:i] + S[i+1:]):\n            return True\n    return False\n\nprint(0 if is_palindrome_with_one_change(S) else 1)\n', '\n\n"""\n解説\u3000https://img.atcoder.jp/abc119/editorial.pdf\n\n・入力文字列が回文かどうかを判定する関数を定義\n・入力文字列の各文字を1文字ずつ変更して回文にできるかどうかを判定する関数を定義\n"""\n\nS = input()\n\ndef is_palindrome(S):\n    if len(S) <= 1:\n        return True\n    return S[0] == S[-1] and is_palindrome(S[1:-1])\n\ndef is_palindrome_with_one_change(S):\n    if is_palindrome(S):\n        return True\n    for i in range(len(S)):\n        if is_palindrome(S[:i] + S[i+1:]):\n            return True\n    return False\n\nprint(0 if is_palindrome_with_one_change(S) else 1)\n', '\n\n"""\n解説\u3000https://img.atcoder.jp/abc119/editorial.pdf\n\n・入力文字列が回文かどうかを判定する関数を定義\n・入力文字列の各文字を1文字ずつ変更して回文にできるかどうかを判定する関数を定義\n"""\n\nS = input()\n\ndef is_palindrome(S):\n    if len(S) <= 1:\n        return True\n    return S[0] == S[-1] and is_palindrome(S[1:-1])\n\ndef is_palindrome_with_one_change(S):\n    if is_palindrome(S):\n        return True\n    for i in range(len(S)):\n        if is_palindrome(S[:i] + S[i+1:]):\n            return True\n    return False\n\nprint(0 if is_palindrome_with_one_change(S) else 1)\n']
2022-04-12 17:16:16.634961 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\"\"\"\n\u89e3\u8aac:\n\n\u30fb\u5165\u529b\u6587\u5b57\u5217\u304c\u56de\u6587\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\n\u30fb\u5165\u529b\u6587\u5b57\u5217\u306e\u5404\u6587\u5b57\u30921\u6587\u5b57\u305a\u3064\u5909\u66f4\u3057\u3066\u56de\u6587\u306b\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\n\"\"\"\n\nS = input()\n\ndef is_palindrome(S):\n    if len(S) <= 1:\n        return True\n    return S[0] == S[-1] and is_palindrome(S[1:-1])\n\ndef is_palindrome_with_one_change(S):\n    if is_palindrome(S):\n        return True\n    for i in range(len(S)):\n        if is_palindrome(S[:i] + S[i+1:]):\n            return True\n    return False\n\nprint(0 if is_palindrome_with_one_change(S) else 1)\n"
    },
    {
      "index": 1,
      "text": "\n\n\"\"\"\n\u89e3\u8aac:\n\n\u30fb\u5165\u529b\u6587\u5b57\u5217\u304c\u56de\u6587\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\n\u30fb\u5165\u529b\u6587\u5b57\u5217\u306e\u5404\u6587\u5b57\u30921\u6587\u5b57\u305a\u3064\u5909\u66f4\u3057\u3066\u56de\u6587\u306b\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\n\"\"\"\n\nS = input()\n\ndef is_palindrome(S):\n    if len(S) <= 1:\n        return True\n    return S[0] == S[-1] and is_palindrome(S[1:-1])\n\ndef is_palindrome_with_one_change(S):\n    if is_palindrome(S):\n        return True\n    for i in range(len(S)):\n        if is_palindrome(S[:i] + S[i+1:]):\n            return True\n    return False\n\nprint(0 if is_palindrome_with_one_change(S) else 1)\n"
    },
    {
      "index": 2,
      "text": "\n\"\"\"\n\u89e3\u8aac:\n\n\u30fb\u5165\u529b\u6587\u5b57\u5217\u304c\u56de\u6587\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\n\u30fb\u5165\u529b\u6587\u5b57\u5217\u306e\u5404\u6587\u5b57\u30921\u6587\u5b57\u305a\u3064\u5909\u66f4\u3057\u3066\u56de\u6587\u306b\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\n\n\"\"\"\n\nS = input()\n\ndef is_palindrome(S):\n    if len(S) <= 1:\n        return True\n    return S[0] == S[-1] and is_palindrome(S[1:-1])\n\ndef is_palindrome_with_one_change(S):\n    if is_palindrome(S):\n        return True\n    for i in range(len(S)):\n        if is_palindrome(S[:i] + S[i+1:]):\n            return True\n    return False\n\nprint(0 if is_palindrome_with_one_change(S) else 1)\n"
    }
  ],
  "created": 1649783774,
  "object": "edit"
}
2022-04-12 17:16:16.635222 fix syntax errors 3 ['\n\n"""\n解説:\n\n・入力文字列が回文かどうかを判定する関数\n・入力文字列の各文字を1文字ずつ変更して回文にできるかどうかを判定する関数\n"""\n\nS = input()\n\ndef is_palindrome(S):\n    if len(S) <= 1:\n        return True\n    return S[0] == S[-1] and is_palindrome(S[1:-1])\n\ndef is_palindrome_with_one_change(S):\n    if is_palindrome(S):\n        return True\n    for i in range(len(S)):\n        if is_palindrome(S[:i] + S[i+1:]):\n            return True\n    return False\n\nprint(0 if is_palindrome_with_one_change(S) else 1)\n', '\n\n"""\n解説:\n\n・入力文字列が回文かどうかを判定する関数\n・入力文字列の各文字を1文字ずつ変更して回文にできるかどうかを判定する関数\n"""\n\nS = input()\n\ndef is_palindrome(S):\n    if len(S) <= 1:\n        return True\n    return S[0] == S[-1] and is_palindrome(S[1:-1])\n\ndef is_palindrome_with_one_change(S):\n    if is_palindrome(S):\n        return True\n    for i in range(len(S)):\n        if is_palindrome(S[:i] + S[i+1:]):\n            return True\n    return False\n\nprint(0 if is_palindrome_with_one_change(S) else 1)\n', '\n"""\n解説:\n\n・入力文字列が回文かどうかを判定する関数\n・入力文字列の各文字を1文字ずつ変更して回文にできるかどうかを判定する関数\n\n"""\n\nS = input()\n\ndef is_palindrome(S):\n    if len(S) <= 1:\n        return True\n    return S[0] == S[-1] and is_palindrome(S[1:-1])\n\ndef is_palindrome_with_one_change(S):\n    if is_palindrome(S):\n        return True\n    for i in range(len(S)):\n        if is_palindrome(S[:i] + S[i+1:]):\n            return True\n    return False\n\nprint(0 if is_palindrome_with_one_change(S) else 1)\n']
2022-04-12 17:16:16.635268 size on output set 4
