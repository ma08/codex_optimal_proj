["\n# \ndef isDancePossible(n, perm):\n    if n == 1:\n        return True\n    perm = [i-1 for i in perm]\n    for i in range(1, n):\n        if abs(perm[i]-perm[i-1]) != 1 and abs(perm[i]-perm[i-1]) != n-1:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        perm = list(map(int, input().split()))\n        print(\"YES\" if isDancePossible(n, perm) else \"NO\")\n", "\n\ndef isDancePossible(n, permutation):\n    if n == 1:\n        return True\n    permutation = [i - 1 for i in permutation]\n    for i in range(1, n):\n        if abs(permutation[i] - permutation[i - 1]) != 1 and abs(permutation[i] - permutation[i - 1]) != n - 1:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        permutation = list(map(int, input().split()))\n        print(\"YES\" if isDancePossible(n, permutation) else \"NO\")\n", "\ndef isDancePossible(n, p):\n    if n == 1:\n        return True\n    p = [i-1 for i in p]\n    for i in range(1, n):\n        if abs(p[i]-p[i-1]) != 1 and abs(p[i]-p[i-1]) != n-1:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        p = list(map(int, input().split()))\n        print(\"YES\" if isDancePossible(n, p) else \"NO\")\n", "\n\n\n# SOLUTION\nq = int(input())\n", "\n# Solution\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    p = list(map(int, input().split()))\n    if n == 1:\n        print(\"YES\")\n        continue\n    if n == 2:\n        if p[0] == 1 and p[1] == 2:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        continue\n    if p[0] == 1:\n        start = 1\n        if p[1] == 2:\n            direction = 1\n        else:\n            direction = -1\n    else:\n        start = p.index(1)\n        if p[start - 1] == n:\n            direction = 1\n        else:\n            direction = -1\n    for i in range(n):\n        if p[(start + direction * i) % n] != (i + 1) % n + 1: # %n to avoid out of range\n            print(\"NO\")\n            break\n    else:\n        print(\"YES\")\n", "\n\ndef isDancePossible(n, permutation):\n    if n == 1:\n        return True\n    permutation = [i - 1 for i in permutation]\n    for i in range(1, n):\n        if abs(permutation[i] - permutation[i - 1]) != 1 and abs(permutation[i] - permutation[i - 1]) != n - 1:\n            return False\n\n    return True\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        permutation = list(map(int, input().split()))\n        print(\"YES\" if isDancePossible(n, permutation) else \"NO\")\n", "\n\n\n# Solution\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    p = list(map(int, input().split()))\n    if n == 1:\n        print(\"YES\")\n        continue\n    if n == 2:\n        if p[0] == 1 and p[1] == 2:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        continue\n    if p[0] == 1:\n        start = 1\n        if p[1] == 2:\n            direction = 1\n        else:\n            direction = -1\n    else:\n        start = p.index(1)\n        if p[start - 1] == n:\n            direction = 1\n        else:\n            direction = -1\n    for i in range(n):\n        if p[(start + direction * i) % n] != (i + 1) % n + 1:\n            print(\"NO\")\n            break\n    else:\n        print(\"YES\")\n", "\n# SOLUTION\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    p = list(map(int, input().split()))\n    if n == 1:\n        print(\"YES\")\n        continue\n    if n == 2:\n        if p[0] == 1 and p[1] == 2:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        continue\n    if p[0] == 1:\n        start = 1\n        if p[1] == 2:\n            direction = 1\n        else:\n            direction = -1\n    else:\n        start = p.index(1)\n        if p[start - 1] == n:\n            direction = 1\n        else:\n            direction = -1\n    for i in range(n):\n        if p[(start + direction * i) % n] != (i + 1) % n + 1:\n            print(\"NO\")\n            break\n    else:\n        print(\"YES\")\n", "\n# Solution\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    p = list(map(int, input().split()))\n    if n == 1:\n        print(\"YES\")\n        continue\n    if n == 2:\n        if p[0] == 1 or p[1] == 2:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        continue\n    if p[0] == 1:\n        start = 1\n        if p[1] == 2:\n            direction = 1\n        else:\n            direction = -1\n    else:\n        start = p.index(1)\n        if p[start - 1] == n:\n            direction = 1\n        else:\n            direction = -1\n    for i in range(n):\n        if p[(start + direction * i) % n] != (i + 1) % n:\n            print(\"NO\")\n            break\n    else:\n        print(\"YES\")\n", "\ndef isDancePossible(n, p):\n    if n == 1:\n        return True\n    p = [i - 1 for i in p]\n    for i in range(1, n):\n        if abs(p[i]-p[i-1]) != 1 and abs(p[i]-p[i-1]) != n-1:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        p = list(map(int, input().split()))\n        print(\"YES\" if isDancePossible(n, p) else \"NO\")\n", "\n\ndef isDancePossible(n, perm):\n    if n == 1:\n        return True\n    perm = [i-1 for i in perm]\n    for i in range(1, n):\n        if abs(perm[i]-perm[i-1]) != 1 and abs(perm[i]-perm[i-1]) != n-1:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        perm = list(map(int, input().split()))\n        print(\"YES\" if isDancePossible(n, perm) else \"NO\")\n", "#!/bin/python3\n# https://www.hackerrank.com/challenges/circular-array-rotation/problem\n", "\n\ndef isDancePossible(n, p):\n    if n == 1:\n        return True\n    p = [i-1 for i in p] \n    for i in range(1, n):\n        if abs(p[i]-p[i-1]) != 1 and abs(p[i]-p[i-1]) != n-1:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        p = list(map(int, input().split()))\n        print(\"YES\" if isDancePossible(n, p) else \"NO\")\n", "q = int(input())\nfor _ in range(q):\n    n = int(input())\n    p = list(map(int, input().split()))\n    if n == 1:\n        print(\"YES\")\n        continue\n    if n == 2:\n        if p[0] == 1 and p[1] == 2:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        continue\n    if p[0] == 1:\n        start = 1\n        if p[1] == 2:\n            direction = 1\n        else:\n            direction = -1\n    else:\n        start = p.index(1)\n        if p[start - 1] == n:\n            direction = 1\n        else:\n            direction = -1\n    for i in range(n):\n        if p[(start + direction * i) % n] != (i + 1) % n + 1:\n            print(\"NO\")\n            break\n    else:\n        print(\"YES\")\n", "\n#!/bin/python3\n# https://www.hackerrank.com/challenges/circular-array-rotation/problem\n\n# Complete the circularArrayRotation function below.\ndef circularArrayRotation(a, k, queries):\n    # a = array\n    # k = rotation times\n    # queries = the index of the array to be printed\n    return queries\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nkq = input().split()\n\n    n = int(nkq[0])\n\n    k = int(nkq[1])\n\n    q = int(nkq[2])\n\n    a = list(map(int, input().rstrip().split()))\n\n    queries = []\n\n    for _ in range(q):\n        queries_item = int(input())\n        queries.append(queries_item)\n\n    result = circularArrayRotation(a, k, queries)\n\n    fptr.write('\\n'.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n"]