2022-04-09 21:19:25.181494 """
There are $n$ students standing in a circle in some order. The index of the $i$-th student is $p_i$. It is guaranteed that all indices of students are distinct integers from $1$ to $n$ (i. e. they form a permutation).

Students want to start a round dance. A clockwise round dance can be started if the student $2$ comes right after the student $1$ in clockwise order (there are no students between them), the student $3$ comes right after the student $2$ in clockwise order, and so on, and the student $n$ comes right after the student $n - 1$ in clockwise order. A counterclockwise round dance is almost the same thing — the only difference is that the student $i$ should be right after the student $i - 1$ in counterclockwise order (this condition should be met for every $i$ from $2$ to $n$). 

For example, if the indices of students listed in clockwise order are $[2, 3, 4, 5, 1]$, then they can start a clockwise round dance. If the students have indices $[3, 2, 1, 4]$ in clockwise order, then they can start a counterclockwise round dance.

Your task is to determine whether it is possible to start a round dance. Note that the students cannot change their positions before starting the dance; they cannot swap or leave the circle, and no other student can enter the circle. 

You have to answer $q$ independent queries.


-----Input-----

The first line of the input contains one integer $q$ ($1 \le q \le 200$) — the number of queries. Then $q$ queries follow.

The first line of the query contains one integer $n$ ($1 \le n \le 200$) — the number of students.

The second line of the query contains a permutation of indices $p_1, p_2, \dots, p_n$ ($1 \le p_i \le n$), where $p_i$ is the index of the $i$-th student (in clockwise order). It is guaranteed that all $p_i$ are distinct integers from $1$ to $n$ (i. e. they form a permutation).


-----Output-----

For each query, print the answer on it. If a round dance can be started with the given order of students, print "YES". Otherwise print "NO".


-----Example-----
Input
5
4
1 2 3 4
3
1 3 2
5
1 2 3 5 4
1
1
5
3 2 1 5 4

Output
YES
YES
NO
YES
YES
"""
2022-04-09 21:19:25.181530 --------------------------
2022-04-09 21:19:38.617925 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n# SOLUTION\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    p = list(map(int, input().split()))\n    if n == 1:\n        print(\"YES\")\n        continue\n    if n == 2:\n        if p[0] == 1 and p[1] == 2:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        continue\n    if p[0] == 1:\n        start = 1\n        if p[1] == 2:\n            direction = 1\n        else:\n            direction = -1\n    else:\n        start = p.index(1)\n        if p[start - 1] == n:\n            direction = 1\n        else:\n            direction = -1\n    for i in range(n):\n        if p[(start + direction * i) % n] != (i + 1) % n + 1:\n            print(\"NO\")\n            break\n    else:\n        print(\"YES\")"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef isDancePossible(n, perm):\n    if n == 1:\n        return True\n    perm = [i-1 for i in perm]\n    for i in range(1, n):\n        if abs(perm[i]-perm[i-1]) != 1 and abs(perm[i]-perm[i-1]) != n-1:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        perm = list(map(int, input().split()))\n        print(\"YES\" if isDancePossible(n, perm) else \"NO\")"
    }
  ],
  "created": 1649553565,
  "id": "cmpl-4vGWb75OXXcFxgybLhDF2fLv00rfr",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 21:19:38.618207 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n# SOLUTION\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    p = list(map(int, input().split()))\n    if n == 1:\n        print(\"YES\")\n        continue\n    if n == 2:\n        if p[0] == 1 and p[1] == 2:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        continue\n    if p[0] == 1:\n        start = 1\n        if p[1] == 2:\n            direction = 1\n        else:\n            direction = -1\n    else:\n        start = p.index(1)\n        if p[start - 1] == n:\n            direction = 1\n        else:\n            direction = -1\n    for i in range(n):\n        if p[(start + direction * i) % n] != (i + 1) % n + 1:\n            print(\"NO\")\n            break\n    else:\n        print(\"YES\")"
}
2022-04-09 21:19:38.618260 REASON stop
2022-04-09 21:19:38.619401 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef isDancePossible(n, perm):\n    if n == 1:\n        return True\n    perm = [i-1 for i in perm]\n    for i in range(1, n):\n        if abs(perm[i]-perm[i-1]) != 1 and abs(perm[i]-perm[i-1]) != n-1:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        perm = list(map(int, input().split()))\n        print(\"YES\" if isDancePossible(n, perm) else \"NO\")"
}
2022-04-09 21:19:38.619481 REASON stop
