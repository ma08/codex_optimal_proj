2022-04-12 16:46:59.747679 num operations 2
2022-04-12 16:46:59.747696 size on input set 1
2022-04-12 16:47:02.055932 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/python3\n\nimport sys\n\ndef median(lst):\n    n = len(lst)\n    if n < 1:\n            return None\n    if n % 2 == 1:\n            return sorted(lst)[n//2]\n    else:\n            return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()]\n\tlst = [int(x) for x in sys.stdin.readline().split()]\n\tpairs = 0\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tif median(lst[i:j+1]) == m:\n\t\t\t\tpairs += 1\n\tprint(pairs)\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef median(lst):\n    n = len(lst)\n    if n < 1:\n            return None\n    if n % 2 == 1:\n            return sorted(lst)[n//2]\n    else:\n            return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()]\n\tlst = [int(x) for x in sys.stdin.readline().split()]\n\tpairs = 0\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tif median(lst[i:j+1]) == m and i != j:\n\t\t\t\tpairs += 1\n\tprint(pairs)\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 2,
      "text": "\n#median\nimport sys\n\ndef median(lst):\n    n = len(lst)\n    if n < 1:\n            return None\n    if n % 2 == 1:\n            return sorted(lst)[n//2]\n    else:\n            return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()]\n\tlst = [int(x) for x in sys.stdin.readline().split()]\n\tpairs = 0\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tif median(lst[i:j+1]) == m:\n\t\t\t\tpairs += 1\n\tprint(pairs)\n\nif __name__ == '__main__':\n\tmain()\n"
    }
  ],
  "created": 1649782019,
  "object": "edit"
}
2022-04-12 16:47:02.056209 fix spelling mistakes 3 ["#!/usr/bin/python3\n\nimport sys\n\ndef median(lst):\n    n = len(lst)\n    if n < 1:\n            return None\n    if n % 2 == 1:\n            return sorted(lst)[n//2]\n    else:\n            return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()]\n\tlst = [int(x) for x in sys.stdin.readline().split()]\n\tpairs = 0\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tif median(lst[i:j+1]) == m:\n\t\t\t\tpairs += 1\n\tprint(pairs)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\nimport sys\n\ndef median(lst):\n    n = len(lst)\n    if n < 1:\n            return None\n    if n % 2 == 1:\n            return sorted(lst)[n//2]\n    else:\n            return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()]\n\tlst = [int(x) for x in sys.stdin.readline().split()]\n\tpairs = 0\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tif median(lst[i:j+1]) == m and i != j:\n\t\t\t\tpairs += 1\n\tprint(pairs)\n\nif __name__ == '__main__':\n\tmain()\n", "\n#median\nimport sys\n\ndef median(lst):\n    n = len(lst)\n    if n < 1:\n            return None\n    if n % 2 == 1:\n            return sorted(lst)[n//2]\n    else:\n            return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()]\n\tlst = [int(x) for x in sys.stdin.readline().split()]\n\tpairs = 0\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tif median(lst[i:j+1]) == m:\n\t\t\t\tpairs += 1\n\tprint(pairs)\n\nif __name__ == '__main__':\n\tmain()\n"]
2022-04-12 16:47:02.056262 size on output set 3
2022-04-12 16:47:02.056274 size on input set 3
2022-04-12 16:47:04.183309 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/python3\n\nimport sys\n\ndef median(lst):\n    n = len(lst)\n    if n < 1:\n            return None\n    if n % 2 == 1:\n            return sorted(lst)[n//2]\n    else:\n            return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()]\n\tlst = [int(x) for x in sys.stdin.readline().split()]\n\tpairs = 0\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tif median(lst[i:j+1]) == m and i != j:\n\t\t\t\tpairs += 1\n\tprint(pairs)\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/python3\n\nimport sys\n\ndef median(lst):\n    n = len(lst)\n    if n < 1:\n            return None\n    if n % 2 == 1:\n            return sorted(lst)[n//2]\n    else:\n            return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()]\n\tlst = [int(x) for x in sys.stdin.readline().split()]\n\tpairs = 0\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tif median(lst[i:j+1]) == m and i != j:\n\t\t\t\tpairs += 1\n\tprint(pairs)\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/python3\n\nimport sys\n\ndef median(lst):\n    n = len(lst)\n    if n < 1:\n            return None\n    if n % 2 == 1:\n            return sorted(lst)[n//2]\n    else:\n            return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()]\n\tlst = [int(x) for x in sys.stdin.readline().split()]\n\tpairs = 0\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tif median(lst[i:j+1]) == m:\n\t\t\t\tpairs = pairs + 1\n\tprint(pairs)\n\nif __name__ == '__main__':\n\tmain()\n"
    }
  ],
  "created": 1649782022,
  "object": "edit"
}
2022-04-12 16:47:04.183494 fix syntax errors 3 ["#!/usr/bin/python3\n\nimport sys\n\ndef median(lst):\n    n = len(lst)\n    if n < 1:\n            return None\n    if n % 2 == 1:\n            return sorted(lst)[n//2]\n    else:\n            return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()]\n\tlst = [int(x) for x in sys.stdin.readline().split()]\n\tpairs = 0\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tif median(lst[i:j+1]) == m and i != j:\n\t\t\t\tpairs += 1\n\tprint(pairs)\n\nif __name__ == '__main__':\n\tmain()\n", "#!/usr/bin/python3\n\nimport sys\n\ndef median(lst):\n    n = len(lst)\n    if n < 1:\n            return None\n    if n % 2 == 1:\n            return sorted(lst)[n//2]\n    else:\n            return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()]\n\tlst = [int(x) for x in sys.stdin.readline().split()]\n\tpairs = 0\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tif median(lst[i:j+1]) == m and i != j:\n\t\t\t\tpairs += 1\n\tprint(pairs)\n\nif __name__ == '__main__':\n\tmain()\n", "#!/usr/bin/python3\n\nimport sys\n\ndef median(lst):\n    n = len(lst)\n    if n < 1:\n            return None\n    if n % 2 == 1:\n            return sorted(lst)[n//2]\n    else:\n            return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()]\n\tlst = [int(x) for x in sys.stdin.readline().split()]\n\tpairs = 0\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tif median(lst[i:j+1]) == m:\n\t\t\t\tpairs = pairs + 1\n\tprint(pairs)\n\nif __name__ == '__main__':\n\tmain()\n"]
2022-04-12 16:47:12.990577 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#median2\nimport sys\n \ndef median(lst):\n\tn = len(lst)\n\tif n < 1:\n\t\t\treturn None\n\tif n % 2 == 1:\n\t\t\treturn sorted(lst)[n//2]\n\telse:\n\t\t\treturn sum(sorted(lst)[n//2-1:n//2+1])/2.0\n \ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()]\n\tlst = [int(x) for x in sys.stdin.readline().split()]\n\tprint(lst)\n\t\nif __name__ == '__main__':\n\tmain() \n"
    },
    {
      "index": 1,
      "text": "\n#median - ACM ICPC World Finals\nimport sys\n\ndef median(lst):\n    n = len(lst)\n    if n < 1:\n            return None\n    if n % 2 == 1:\n            return sorted(lst)[n//2]\n    else:\n            return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()]\n\tlst = [int(x) for x in sys.stdin.readline().split()]\n\tpairs = 0\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tif median(lst[i:j+1]) == m: #if median of subarray is m, add to count\n\t\t\t\tpairs += 1\n\tprint(pairs)\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 2,
      "text": "# median\nimport sys\n\ndef median(lst):\n    n = len(lst)\n    if n < 1:\n        return None\n    if n % 2 == 1:\n        return sorted(lst)[n//2]\n    else:\n        return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    lst = [int(x) for x in sys.stdin.readline().split()]\n    pairs = 0\n    for i in range(n):\n        for j in range(i, n):\n            if median(lst[i:j+1]) == m:\n                pairs += 1\n    print(pairs)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649782024,
  "object": "edit"
}
2022-04-12 16:47:12.990863 fix syntax errors 3 ["\n#median2\nimport sys\n \ndef median(lst):\n\tn = len(lst)\n\tif n < 1:\n\t\t\treturn None\n\tif n % 2 == 1:\n\t\t\treturn sorted(lst)[n//2]\n\telse:\n\t\t\treturn sum(sorted(lst)[n//2-1:n//2+1])/2.0\n \ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()]\n\tlst = [int(x) for x in sys.stdin.readline().split()]\n\tprint(lst)\n\t\nif __name__ == '__main__':\n\tmain() \n", "\n#median - ACM ICPC World Finals\nimport sys\n\ndef median(lst):\n    n = len(lst)\n    if n < 1:\n            return None\n    if n % 2 == 1:\n            return sorted(lst)[n//2]\n    else:\n            return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()]\n\tlst = [int(x) for x in sys.stdin.readline().split()]\n\tpairs = 0\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tif median(lst[i:j+1]) == m: #if median of subarray is m, add to count\n\t\t\t\tpairs += 1\n\tprint(pairs)\n\nif __name__ == '__main__':\n\tmain()\n", "# median\nimport sys\n\ndef median(lst):\n    n = len(lst)\n    if n < 1:\n        return None\n    if n % 2 == 1:\n        return sorted(lst)[n//2]\n    else:\n        return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    lst = [int(x) for x in sys.stdin.readline().split()]\n    pairs = 0\n    for i in range(n):\n        for j in range(i, n):\n            if median(lst[i:j+1]) == m:\n                pairs += 1\n    print(pairs)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 16:47:25.622167 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#\n# import sys\n#\n# def median(lst):\n#     n = len(lst)\n#     if n < 1:\n#             return None\n#     if n % 2 == 1:\n#             return sorted(lst)[n//2]\n#     else:\n#             return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n#\n# def main():\n# \tn, m = [int(x) for x in sys.stdin.readline().split()]\n# \tlst = [int(x) for x in sys.stdin.readline().split()]\n# \tpairs = 0\n# \tfor i in range(n):\n# \t\tfor j in range(i, n):\n# \t\t\tif median(lst[i:j+1]) == m and i != j:\n# \t\t\t\tpairs += 1\n# \tprint(pairs)\n#\n# if __name__ == '__main__':\n# \tmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef median(lst):\n    n = len(lst)\n    if n < 1:\n            return None\n    if n % 2 == 1:\n            return sorted(lst)[n//2]\n    else:\n            return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()]\n\tlst = [int(x) for x in sys.stdin.readline().split()]\n\tpairs = 0\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tif median(lst[i:j+1]) == m and i != j and i != j+1:\n\t\t\t\tpairs += 1\n\tprint(pairs)\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef median(lst):\n    n = len(lst)\n    if n < 1:\n            return None\n    if n % 2 == 1:\n            return sorted(lst)[n//2]\n    else:\n            return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()]\n\tlst = [int(x) for x in sys.stdin.readline().split()]\n\tpairs = 0\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tif median(lst[i:j+1]) == m and i != j:\n\t\t\t\tpairs += 1\n\tprint(pairs)\n\nif __name__ == '__main__':\n\tmain()\n"
    }
  ],
  "created": 1649782033,
  "object": "edit"
}
2022-04-12 16:47:25.622363 fix syntax errors 3 ["\n#\n# import sys\n#\n# def median(lst):\n#     n = len(lst)\n#     if n < 1:\n#             return None\n#     if n % 2 == 1:\n#             return sorted(lst)[n//2]\n#     else:\n#             return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n#\n# def main():\n# \tn, m = [int(x) for x in sys.stdin.readline().split()]\n# \tlst = [int(x) for x in sys.stdin.readline().split()]\n# \tpairs = 0\n# \tfor i in range(n):\n# \t\tfor j in range(i, n):\n# \t\t\tif median(lst[i:j+1]) == m and i != j:\n# \t\t\t\tpairs += 1\n# \tprint(pairs)\n#\n# if __name__ == '__main__':\n# \tmain()\n", "\n\nimport sys\n\ndef median(lst):\n    n = len(lst)\n    if n < 1:\n            return None\n    if n % 2 == 1:\n            return sorted(lst)[n//2]\n    else:\n            return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()]\n\tlst = [int(x) for x in sys.stdin.readline().split()]\n\tpairs = 0\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tif median(lst[i:j+1]) == m and i != j and i != j+1:\n\t\t\t\tpairs += 1\n\tprint(pairs)\n\nif __name__ == '__main__':\n\tmain()\n", "\nimport sys\n\ndef median(lst):\n    n = len(lst)\n    if n < 1:\n            return None\n    if n % 2 == 1:\n            return sorted(lst)[n//2]\n    else:\n            return sum(sorted(lst)[n//2-1:n//2+1])/2.0\n\ndef main():\n\tn, m = [int(x) for x in sys.stdin.readline().split()]\n\tlst = [int(x) for x in sys.stdin.readline().split()]\n\tpairs = 0\n\tfor i in range(n):\n\t\tfor j in range(i, n):\n\t\t\tif median(lst[i:j+1]) == m and i != j:\n\t\t\t\tpairs += 1\n\tprint(pairs)\n\nif __name__ == '__main__':\n\tmain()\n"]
2022-04-12 16:47:25.622399 size on output set 8
2022-04-12 16:47:25.622422 num operations 2
2022-04-12 16:47:25.622428 size on input set 1
2022-04-12 16:47:38.007684 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# N = int(input())\n# M = int(input())\n# A = list(map(int, input().split()))\n\nN = 5\nM = 4\nA = [1, 4, 5, 60, 4]\n\n# N = 3\n# M = 1\n# A = [1, 1, 1]\n\n# N = 15\n# M = 2\n# A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n\n# N = 200000\n# M = 100000\n# A = [1]*N\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(1, N+1)]\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(N, 0, -1)]\n\n\ndef solution(N, M, A):\n    # calculate prefix sums\n    prefix_sums = [0]*(N+1)\n    for i in range(N):\n        prefix_sums[i+1] = prefix_sums[i] + A[i]\n\n    # calculate prefix medians (left part)\n    prefix_medians = [0]*(N+1)\n    for i in range(N):\n        prefix_medians[i+1] = (prefix_sums[i+1] + i) // (i+1)\n\n    # calculate suffix medians (right part)\n    suffix_medians = [0]*(N+1)\n    for i in range(N-1, -1, -1):\n        suffix_medians[i] = (prefix_sums[N] - prefix_sums[i] + N-i-1) // (N-i)\n\n    # calculate total number of pairs\n    total_pairs = 0\n\n    # calculate number of pairs with prefix medians\n    prefix_medians_count = [0]*(N+1)\n    for i in range(N+1):\n        prefix_medians_count[i] = prefix_medians_count[i-1]\n        if prefix_medians[i] == M:\n            prefix_medians_count[i] += 1\n\n    for i in range(N+1):\n        total_pairs += prefix_medians_count[i]\n        if suffix_medians[i] == M:\n            total_pairs += prefix_medians_count[i]\n\n    return total_pairs\n\nprint(solution(N, M, A))\n"
    },
    {
      "index": 1,
      "text": "\n\n# N = int(input())\n# M = int(input())\n# A = list(map(int, input().split()))\n\nN = 5\nM = 4\nA = [1, 4, 5, 60, 4]\n\n# N = 3\n# M = 1\n# A = [1, 1, 1]\n\n# N = 15\n# M = 2\n# A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n\n# N = 200000\n# M = 100000\n# A = [1]*N\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(1, N+1)]\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(N, 0, -1)]\n\n\ndef solution(N, M, A):\n    # calculate prefix sums\n    prefix_sums = [0]*(N+1)\n    for i in range(N):\n        prefix_sums[i+1] = prefix_sums[i] + A[i]\n\n    # calculate prefix means\n    prefix_means = [0]*(N+1)\n    for i in range(N):\n        prefix_means[i+1] = (prefix_sums[i+1] + i) // (i+1)\n\n    # calculate suffix means\n    suffix_means = [0]*(N+1)\n    for i in range(N-1, -1, -1):\n        suffix_means[i] = (prefix_sums[N] - prefix_sums[i] + N-i-1) // (N-i)\n\n    # calculate total number of pairs\n    total_pairs = 0\n\n    # calculate number of pairs with prefix means\n    prefix_means_count = [0]*(N+1)\n    for i in range(N+1):\n        prefix_means_count[i] = prefix_means_count[i-1]\n        if prefix_means[i] == M:\n            prefix_means_count[i] += 1\n\n    for i in range(N+1):\n        total_pairs += prefix_means_count[i]\n        if suffix_means[i] == M:\n            total_pairs += prefix_means_count[i]\n\n    return total_pairs\n\nprint(solution(N, M, A))\n"
    },
    {
      "index": 2,
      "text": "\n\n# N = int(input())\n# M = int(input())\n# A = list(map(int, input().split()))\n\nN = 5\nM = 4\nA = [1, 4, 5, 60, 4]\n\n# N = 3\n# M = 1\n# A = [1, 1, 1]\n\n# N = 15\n# M = 2\n# A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n\n# N = 200000\n# M = 100000\n# A = [1]*N\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(1, N+1)]\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(N, 0, -1)]\n\n\ndef solution(N, M, A):\n    # calculate prefix sums\n    prefix_sums = [0]*(N+1)\n    for i in range(N):\n        prefix_sums[i+1] = prefix_sums[i] + A[i]\n\n    # calculate prefix medians (left medians)\n    prefix_medians = [0]*(N+1)  # left_medians\n    for i in range(N):\n        prefix_medians[i+1] = (prefix_sums[i+1] + i) // (i+1)\n\n    # calculate suffix medians\n    suffix_medians = [0]*(N+1)\n    for i in range(N-1, -1, -1):\n        suffix_medians[i] = (prefix_sums[N] - prefix_sums[i] + N-i-1) // (N-i)\n\n    # calculate total number of pairs\n    total_pairs = 0\n\n    # calculate number of pairs with prefix medians\n    prefix_medians_count = [0]*(N+1)\n    for i in range(N+1):\n        prefix_medians_count[i] = prefix_medians_count[i-1]\n        if prefix_medians[i] == M:\n            prefix_medians_count[i] += 1\n\n    for i in range(N+1):\n        total_pairs += prefix_medians_count[i]\n        if suffix_medians[i] == M:\n            total_pairs += prefix_medians_count[i]\n\n    return total_pairs\n\nprint(solution(N, M, A))\n"
    }
  ],
  "created": 1649782045,
  "object": "edit"
}
2022-04-12 16:47:38.007958 fix spelling mistakes 3 ['\n\n# N = int(input())\n# M = int(input())\n# A = list(map(int, input().split()))\n\nN = 5\nM = 4\nA = [1, 4, 5, 60, 4]\n\n# N = 3\n# M = 1\n# A = [1, 1, 1]\n\n# N = 15\n# M = 2\n# A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n\n# N = 200000\n# M = 100000\n# A = [1]*N\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(1, N+1)]\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(N, 0, -1)]\n\n\ndef solution(N, M, A):\n    # calculate prefix sums\n    prefix_sums = [0]*(N+1)\n    for i in range(N):\n        prefix_sums[i+1] = prefix_sums[i] + A[i]\n\n    # calculate prefix medians (left part)\n    prefix_medians = [0]*(N+1)\n    for i in range(N):\n        prefix_medians[i+1] = (prefix_sums[i+1] + i) // (i+1)\n\n    # calculate suffix medians (right part)\n    suffix_medians = [0]*(N+1)\n    for i in range(N-1, -1, -1):\n        suffix_medians[i] = (prefix_sums[N] - prefix_sums[i] + N-i-1) // (N-i)\n\n    # calculate total number of pairs\n    total_pairs = 0\n\n    # calculate number of pairs with prefix medians\n    prefix_medians_count = [0]*(N+1)\n    for i in range(N+1):\n        prefix_medians_count[i] = prefix_medians_count[i-1]\n        if prefix_medians[i] == M:\n            prefix_medians_count[i] += 1\n\n    for i in range(N+1):\n        total_pairs += prefix_medians_count[i]\n        if suffix_medians[i] == M:\n            total_pairs += prefix_medians_count[i]\n\n    return total_pairs\n\nprint(solution(N, M, A))\n', '\n\n# N = int(input())\n# M = int(input())\n# A = list(map(int, input().split()))\n\nN = 5\nM = 4\nA = [1, 4, 5, 60, 4]\n\n# N = 3\n# M = 1\n# A = [1, 1, 1]\n\n# N = 15\n# M = 2\n# A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n\n# N = 200000\n# M = 100000\n# A = [1]*N\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(1, N+1)]\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(N, 0, -1)]\n\n\ndef solution(N, M, A):\n    # calculate prefix sums\n    prefix_sums = [0]*(N+1)\n    for i in range(N):\n        prefix_sums[i+1] = prefix_sums[i] + A[i]\n\n    # calculate prefix means\n    prefix_means = [0]*(N+1)\n    for i in range(N):\n        prefix_means[i+1] = (prefix_sums[i+1] + i) // (i+1)\n\n    # calculate suffix means\n    suffix_means = [0]*(N+1)\n    for i in range(N-1, -1, -1):\n        suffix_means[i] = (prefix_sums[N] - prefix_sums[i] + N-i-1) // (N-i)\n\n    # calculate total number of pairs\n    total_pairs = 0\n\n    # calculate number of pairs with prefix means\n    prefix_means_count = [0]*(N+1)\n    for i in range(N+1):\n        prefix_means_count[i] = prefix_means_count[i-1]\n        if prefix_means[i] == M:\n            prefix_means_count[i] += 1\n\n    for i in range(N+1):\n        total_pairs += prefix_means_count[i]\n        if suffix_means[i] == M:\n            total_pairs += prefix_means_count[i]\n\n    return total_pairs\n\nprint(solution(N, M, A))\n', '\n\n# N = int(input())\n# M = int(input())\n# A = list(map(int, input().split()))\n\nN = 5\nM = 4\nA = [1, 4, 5, 60, 4]\n\n# N = 3\n# M = 1\n# A = [1, 1, 1]\n\n# N = 15\n# M = 2\n# A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n\n# N = 200000\n# M = 100000\n# A = [1]*N\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(1, N+1)]\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(N, 0, -1)]\n\n\ndef solution(N, M, A):\n    # calculate prefix sums\n    prefix_sums = [0]*(N+1)\n    for i in range(N):\n        prefix_sums[i+1] = prefix_sums[i] + A[i]\n\n    # calculate prefix medians (left medians)\n    prefix_medians = [0]*(N+1)  # left_medians\n    for i in range(N):\n        prefix_medians[i+1] = (prefix_sums[i+1] + i) // (i+1)\n\n    # calculate suffix medians\n    suffix_medians = [0]*(N+1)\n    for i in range(N-1, -1, -1):\n        suffix_medians[i] = (prefix_sums[N] - prefix_sums[i] + N-i-1) // (N-i)\n\n    # calculate total number of pairs\n    total_pairs = 0\n\n    # calculate number of pairs with prefix medians\n    prefix_medians_count = [0]*(N+1)\n    for i in range(N+1):\n        prefix_medians_count[i] = prefix_medians_count[i-1]\n        if prefix_medians[i] == M:\n            prefix_medians_count[i] += 1\n\n    for i in range(N+1):\n        total_pairs += prefix_medians_count[i]\n        if suffix_medians[i] == M:\n            total_pairs += prefix_medians_count[i]\n\n    return total_pairs\n\nprint(solution(N, M, A))\n']
2022-04-12 16:47:38.008037 size on output set 3
2022-04-12 16:47:38.008043 size on input set 3
2022-04-12 16:47:50.132257 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nN = int(input())\nM = int(input())\nA = list(map(int, input().split()))\n\n# N = 5\n# M = 4\n# A = [1, 4, 5, 60, 4]\n\n# N = 3\n# M = 1\n# A = [1, 1, 1]\n\n# N = 15\n# M = 2\n# A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n\n# N = 200000\n# M = 100000\n# A = [1]*N\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(1, N+1)]\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(N, 0, -1)]\n\n\ndef solution(N, M, A):\n    # calculate prefix sums\n    prefix_sums = [0]*(N+1)\n    for i in range(N):\n        prefix_sums[i+1] = prefix_sums[i] + A[i]\n\n    # calculate prefix means\n    prefix_means = [0]*(N+1)\n    for i in range(N):\n        prefix_means[i+1] = (prefix_sums[i+1] + i) // (i+1)\n\n    # calculate suffix means\n    suffix_means = [0]*(N+1)\n    for i in range(N-1, -1, -1):\n        suffix_means[i] = (prefix_sums[N] - prefix_sums[i] + N-i-1) // (N-i)\n\n    # calculate total number of pairs\n    total_pairs = 0\n\n    # calculate number of pairs with prefix means\n    prefix_means_count = [0]*(N+1)\n    for i in range(N+1):\n        prefix_means_count[i] = prefix_means_count[i-1]\n        if prefix_means[i] == M:\n            prefix_means_count[i] += 1\n\n    for i in range(N+1):\n        total_pairs += prefix_means_count[i]\n        if suffix_means[i] == M:\n            total_pairs += prefix_means_count[i]\n\n    return total_pairs\n\nprint(solution(N, M, A))\n"
    },
    {
      "index": 1,
      "text": "\n\nN = int(input())\nM = int(input())\nA = list(map(int, input().split()))\n\n# N = 5\n# M = 4\n# A = [1, 4, 5, 60, 4]\n\n# N = 3\n# M = 1\n# A = [1, 1, 1]\n\n# N = 15\n# M = 2\n# A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n\n# N = 200000\n# M = 100000\n# A = [1]*N\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(1, N+1)]\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(N, 0, -1)]\n\n\ndef solution(N, M, A):\n    # calculate prefix sums\n    prefix_sums = [0]*(N+1)\n    for i in range(N):\n        prefix_sums[i+1] = prefix_sums[i] + A[i]\n\n    # calculate prefix means\n    prefix_means = [0]*(N+1)\n    for i in range(N):\n        prefix_means[i+1] = (prefix_sums[i+1] + i) // (i+1)\n\n    # calculate suffix means\n    suffix_means = [0]*(N+1)\n    for i in range(N-1, -1, -1):\n        suffix_means[i] = (prefix_sums[N] - prefix_sums[i] + N-i-1) // (N-i)\n\n    # calculate total number of pairs\n    total_pairs = 0\n\n    # calculate number of pairs with prefix means\n    prefix_means_count = [0]*(N+1)\n    for i in range(1, N+1):\n        prefix_means_count[i] = prefix_means_count[i-1]\n        if prefix_means[i] == M:\n            prefix_means_count[i] += 1\n\n    for i in range(N+1):\n        total_pairs += prefix_means_count[i]\n        if suffix_means[i] == M:\n            total_pairs += prefix_means_count[i]\n\n    return total_pairs\n\nprint(solution(N, M, A))\n"
    },
    {
      "index": 2,
      "text": "\nN = 5\nM = 4\nA = [1, 4, 5, 60, 4]\n\ndef solution(N, M, A):\n    prefix_sums = [0] * (N + 1)\n    for i in range(N):\n        prefix_sums[i+1] = prefix_sums[i] + A[i]\n\n    prefix_means = [0] * (N + 1)\n    for i in range(N):\n        prefix_means[i+1] = (prefix_sums[i+1] + i) // (i+1)\n\n        prefix_means[i+1] = (prefix_sums[i+1] + i) // (i+1)\n\n    suffix_means = [0] * (N + 1)\n    for i in range(N-1, -1, -1):\n        suffix_means[i] = (prefix_sums[N] - prefix_sums[i] + N-i-1) // (N-i)\n\n    total_pairs = 0\n\n    prefix_means_count = [0] * (N + 1)\n    for i in range(N+1):\n        prefix_means_count[i] = prefix_means_count[i-1]\n        if prefix_means[i] == M:\n            prefix_means_count[i] += 1\n\n    for i in range(N):\n        total_pairs += prefix_means_count[i]\n        if suffix_means[i] == M:\n            total_pairs += prefix_means_count[i]\n\n\n    return total_pairs\n\nprint(solution(N, M, A))\n"
    }
  ],
  "created": 1649782058,
  "object": "edit"
}
2022-04-12 16:47:50.132547 fix syntax errors 3 ['\n\nN = int(input())\nM = int(input())\nA = list(map(int, input().split()))\n\n# N = 5\n# M = 4\n# A = [1, 4, 5, 60, 4]\n\n# N = 3\n# M = 1\n# A = [1, 1, 1]\n\n# N = 15\n# M = 2\n# A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n\n# N = 200000\n# M = 100000\n# A = [1]*N\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(1, N+1)]\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(N, 0, -1)]\n\n\ndef solution(N, M, A):\n    # calculate prefix sums\n    prefix_sums = [0]*(N+1)\n    for i in range(N):\n        prefix_sums[i+1] = prefix_sums[i] + A[i]\n\n    # calculate prefix means\n    prefix_means = [0]*(N+1)\n    for i in range(N):\n        prefix_means[i+1] = (prefix_sums[i+1] + i) // (i+1)\n\n    # calculate suffix means\n    suffix_means = [0]*(N+1)\n    for i in range(N-1, -1, -1):\n        suffix_means[i] = (prefix_sums[N] - prefix_sums[i] + N-i-1) // (N-i)\n\n    # calculate total number of pairs\n    total_pairs = 0\n\n    # calculate number of pairs with prefix means\n    prefix_means_count = [0]*(N+1)\n    for i in range(N+1):\n        prefix_means_count[i] = prefix_means_count[i-1]\n        if prefix_means[i] == M:\n            prefix_means_count[i] += 1\n\n    for i in range(N+1):\n        total_pairs += prefix_means_count[i]\n        if suffix_means[i] == M:\n            total_pairs += prefix_means_count[i]\n\n    return total_pairs\n\nprint(solution(N, M, A))\n', '\n\nN = int(input())\nM = int(input())\nA = list(map(int, input().split()))\n\n# N = 5\n# M = 4\n# A = [1, 4, 5, 60, 4]\n\n# N = 3\n# M = 1\n# A = [1, 1, 1]\n\n# N = 15\n# M = 2\n# A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n\n# N = 200000\n# M = 100000\n# A = [1]*N\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(1, N+1)]\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(N, 0, -1)]\n\n\ndef solution(N, M, A):\n    # calculate prefix sums\n    prefix_sums = [0]*(N+1)\n    for i in range(N):\n        prefix_sums[i+1] = prefix_sums[i] + A[i]\n\n    # calculate prefix means\n    prefix_means = [0]*(N+1)\n    for i in range(N):\n        prefix_means[i+1] = (prefix_sums[i+1] + i) // (i+1)\n\n    # calculate suffix means\n    suffix_means = [0]*(N+1)\n    for i in range(N-1, -1, -1):\n        suffix_means[i] = (prefix_sums[N] - prefix_sums[i] + N-i-1) // (N-i)\n\n    # calculate total number of pairs\n    total_pairs = 0\n\n    # calculate number of pairs with prefix means\n    prefix_means_count = [0]*(N+1)\n    for i in range(1, N+1):\n        prefix_means_count[i] = prefix_means_count[i-1]\n        if prefix_means[i] == M:\n            prefix_means_count[i] += 1\n\n    for i in range(N+1):\n        total_pairs += prefix_means_count[i]\n        if suffix_means[i] == M:\n            total_pairs += prefix_means_count[i]\n\n    return total_pairs\n\nprint(solution(N, M, A))\n', '\nN = 5\nM = 4\nA = [1, 4, 5, 60, 4]\n\ndef solution(N, M, A):\n    prefix_sums = [0] * (N + 1)\n    for i in range(N):\n        prefix_sums[i+1] = prefix_sums[i] + A[i]\n\n    prefix_means = [0] * (N + 1)\n    for i in range(N):\n        prefix_means[i+1] = (prefix_sums[i+1] + i) // (i+1)\n\n        prefix_means[i+1] = (prefix_sums[i+1] + i) // (i+1)\n\n    suffix_means = [0] * (N + 1)\n    for i in range(N-1, -1, -1):\n        suffix_means[i] = (prefix_sums[N] - prefix_sums[i] + N-i-1) // (N-i)\n\n    total_pairs = 0\n\n    prefix_means_count = [0] * (N + 1)\n    for i in range(N+1):\n        prefix_means_count[i] = prefix_means_count[i-1]\n        if prefix_means[i] == M:\n            prefix_means_count[i] += 1\n\n    for i in range(N):\n        total_pairs += prefix_means_count[i]\n        if suffix_means[i] == M:\n            total_pairs += prefix_means_count[i]\n\n\n    return total_pairs\n\nprint(solution(N, M, A))\n']
2022-04-12 16:47:56.457263 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# N = int(input())\n# M = int(input())\n# A = list(map(int, input().split()))\n\nN = 5\nM = 4\nA = [1, 4, 5, 60, 4]\n\n# N = 3\n# M = 1\n# A = [1, 1, 1]\n\n# N = 15\n# M = 2\n# A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n\n# N = 200000\n# M = 100000\n# A = [1]*N\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(1, N+1)]\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(N, 0, -1)]\n\n\ndef solution(N, M, A):\n    # calculate prefix sums\n    prefix_sums = [0]*(N+1)\n    for i in range(N):\n        prefix_sums[i+1] = prefix_sums[i] + A[i]\n\n    # calculate prefix medians (left medians)\n    prefix_medians = [0]*(N+1)\n    for i in range(N):\n        prefix_medians[i+1] = (prefix_sums[i+1] + i) // (i+1)\n\n    # calculate suffix medians\n    suffix_medians = [0]*(N+1)\n    for i in range(N-1, -1, -1):\n        suffix_medians[i] = (prefix_sums[N] - prefix_sums[i] + N-i-1) // (N-i)\n\n    # calculate total number of pairs\n    total_pairs = 0\n\n    # calculate number of pairs with prefix medians\n    prefix_medians_count = [0]*(N+1)  # number of prefix medians equal to M\n    for i in range(N+1):\n        prefix_medians_count[i] = prefix_medians_count[i-1]  # count prefix medians equal to M\n        if prefix_medians[i] == M:\n            prefix_medians_count[i] += 1\n\n    for i in range(N+1):\n        total_pairs += prefix_medians_count[i]  # count pairs with prefix medians equal to M\n        if suffix_medians[i] == M:\n            total_pairs += prefix_medians_count[i]  # count pairs with prefix medians equal to M and suffix medians equal to M\n\n    return total_pairs\n\nprint(solution(N, M, A))\n"
    },
    {
      "index": 1,
      "text": "\n\nN = int(input())\nM = int(input())\nA = list(map(int, input().split()))\n\n# N = 5\n# M = 4\n# A = [1, 4, 5, 60, 4]\n\n# N = 3\n# M = 1\n# A = [1, 1, 1]\n\n# N = 15\n# M = 2\n# A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n\n# N = 200000\n# M = 100000\n# A = [1]*N\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(1, N+1)]\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(N, 0, -1)]\n\n\ndef solution(N, M, A):\n    # calculate prefix sums\n    prefix_sums = [0]*(N+1)\n    for i in range(N):\n        prefix_sums[i+1] = prefix_sums[i] + A[i]\n\n    # calculate prefix medians (left medians)\n    prefix_medians = [0]*(N+1)  # left_medians\n    for i in range(N):\n        prefix_medians[i+1] = (prefix_sums[i+1] + i) // (i+1)\n\n    # calculate suffix medians\n    suffix_medians = [0]*(N+1)\n    for i in range(N-1, -1, -1):\n        suffix_medians[i] = (prefix_sums[N] - prefix_sums[i] + N-i-1) // (N-i)\n\n    # calculate total number of pairs\n    total_pairs = 0\n\n    # calculate number of pairs with prefix medians\n    prefix_medians_count = [0]*(N+1)\n    for i in range(N+1):\n        prefix_medians_count[i] = prefix_medians_count[i-1]\n        if prefix_medians[i] == M:\n            prefix_medians_count[i] += 1\n\n    for i in range(N+1):\n        total_pairs += prefix_medians_count[i]\n        if suffix_medians[i] == M:\n            total_pairs += prefix_medians_count[i]\n\n    return total_pairs\n\nprint(solution(N, M, A))\n"
    },
    {
      "index": 2,
      "text": "\n\nN = int(input())\nM = int(input())\nA = list(map(int, input().split()))\n\n# N = 5\n# M = 4\n# A = [1, 4, 5, 60, 4]\n\n# N = 3\n# M = 1\n# A = [1, 1, 1]\n\n# N = 15\n# M = 2\n# A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n\n# N = 200000\n# M = 100000\n# A = [1]*N\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(1, N+1)]\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(N, 0, -1)]\n\n\ndef solution(N, M, A):\n    # calculate prefix sums\n    prefix_sums = [0]*(N+1)\n    for i in range(N):\n        prefix_sums[i+1] = prefix_sums[i] + A[i]\n\n    # calculate prefix medians (left medians)\n    prefix_medians = [0]*(N+1)  # left_medians\n    for i in range(N):\n        prefix_medians[i+1] = (prefix_sums[i+1] + i) // (i+1)\n\n    # calculate suffix medians\n    suffix_medians = [0]*(N+1)\n    for i in range(N-1, -1, -1):\n        suffix_medians[i] = (prefix_sums[N] - prefix_sums[i] + N-i-1) // (N-i)\n\n    # calculate total number of pairs\n    total_pairs = 0\n\n    # calculate number of pairs with prefix medians\n    prefix_medians_count = [0]*(N+1)\n    for i in range(N+1):\n        prefix_medians_count[i] = prefix_medians_count[i-1]\n        if prefix_medians[i] == M:\n            prefix_medians_count[i] += 1\n\n    for i in range(N+1):\n        total_pairs += prefix_medians_count[i]\n        if suffix_medians[i] == M:\n            total_pairs += prefix_medians_count[i]\n\n    return total_pairs\n\nprint(solution(N, M, A))\n"
    }
  ],
  "created": 1649782070,
  "object": "edit"
}
2022-04-12 16:47:56.457561 fix syntax errors 3 ['\n\n# N = int(input())\n# M = int(input())\n# A = list(map(int, input().split()))\n\nN = 5\nM = 4\nA = [1, 4, 5, 60, 4]\n\n# N = 3\n# M = 1\n# A = [1, 1, 1]\n\n# N = 15\n# M = 2\n# A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n\n# N = 200000\n# M = 100000\n# A = [1]*N\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(1, N+1)]\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(N, 0, -1)]\n\n\ndef solution(N, M, A):\n    # calculate prefix sums\n    prefix_sums = [0]*(N+1)\n    for i in range(N):\n        prefix_sums[i+1] = prefix_sums[i] + A[i]\n\n    # calculate prefix medians (left medians)\n    prefix_medians = [0]*(N+1)\n    for i in range(N):\n        prefix_medians[i+1] = (prefix_sums[i+1] + i) // (i+1)\n\n    # calculate suffix medians\n    suffix_medians = [0]*(N+1)\n    for i in range(N-1, -1, -1):\n        suffix_medians[i] = (prefix_sums[N] - prefix_sums[i] + N-i-1) // (N-i)\n\n    # calculate total number of pairs\n    total_pairs = 0\n\n    # calculate number of pairs with prefix medians\n    prefix_medians_count = [0]*(N+1)  # number of prefix medians equal to M\n    for i in range(N+1):\n        prefix_medians_count[i] = prefix_medians_count[i-1]  # count prefix medians equal to M\n        if prefix_medians[i] == M:\n            prefix_medians_count[i] += 1\n\n    for i in range(N+1):\n        total_pairs += prefix_medians_count[i]  # count pairs with prefix medians equal to M\n        if suffix_medians[i] == M:\n            total_pairs += prefix_medians_count[i]  # count pairs with prefix medians equal to M and suffix medians equal to M\n\n    return total_pairs\n\nprint(solution(N, M, A))\n', '\n\nN = int(input())\nM = int(input())\nA = list(map(int, input().split()))\n\n# N = 5\n# M = 4\n# A = [1, 4, 5, 60, 4]\n\n# N = 3\n# M = 1\n# A = [1, 1, 1]\n\n# N = 15\n# M = 2\n# A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n\n# N = 200000\n# M = 100000\n# A = [1]*N\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(1, N+1)]\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(N, 0, -1)]\n\n\ndef solution(N, M, A):\n    # calculate prefix sums\n    prefix_sums = [0]*(N+1)\n    for i in range(N):\n        prefix_sums[i+1] = prefix_sums[i] + A[i]\n\n    # calculate prefix medians (left medians)\n    prefix_medians = [0]*(N+1)  # left_medians\n    for i in range(N):\n        prefix_medians[i+1] = (prefix_sums[i+1] + i) // (i+1)\n\n    # calculate suffix medians\n    suffix_medians = [0]*(N+1)\n    for i in range(N-1, -1, -1):\n        suffix_medians[i] = (prefix_sums[N] - prefix_sums[i] + N-i-1) // (N-i)\n\n    # calculate total number of pairs\n    total_pairs = 0\n\n    # calculate number of pairs with prefix medians\n    prefix_medians_count = [0]*(N+1)\n    for i in range(N+1):\n        prefix_medians_count[i] = prefix_medians_count[i-1]\n        if prefix_medians[i] == M:\n            prefix_medians_count[i] += 1\n\n    for i in range(N+1):\n        total_pairs += prefix_medians_count[i]\n        if suffix_medians[i] == M:\n            total_pairs += prefix_medians_count[i]\n\n    return total_pairs\n\nprint(solution(N, M, A))\n', '\n\nN = int(input())\nM = int(input())\nA = list(map(int, input().split()))\n\n# N = 5\n# M = 4\n# A = [1, 4, 5, 60, 4]\n\n# N = 3\n# M = 1\n# A = [1, 1, 1]\n\n# N = 15\n# M = 2\n# A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n\n# N = 200000\n# M = 100000\n# A = [1]*N\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(1, N+1)]\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(N, 0, -1)]\n\n\ndef solution(N, M, A):\n    # calculate prefix sums\n    prefix_sums = [0]*(N+1)\n    for i in range(N):\n        prefix_sums[i+1] = prefix_sums[i] + A[i]\n\n    # calculate prefix medians (left medians)\n    prefix_medians = [0]*(N+1)  # left_medians\n    for i in range(N):\n        prefix_medians[i+1] = (prefix_sums[i+1] + i) // (i+1)\n\n    # calculate suffix medians\n    suffix_medians = [0]*(N+1)\n    for i in range(N-1, -1, -1):\n        suffix_medians[i] = (prefix_sums[N] - prefix_sums[i] + N-i-1) // (N-i)\n\n    # calculate total number of pairs\n    total_pairs = 0\n\n    # calculate number of pairs with prefix medians\n    prefix_medians_count = [0]*(N+1)\n    for i in range(N+1):\n        prefix_medians_count[i] = prefix_medians_count[i-1]\n        if prefix_medians[i] == M:\n            prefix_medians_count[i] += 1\n\n    for i in range(N+1):\n        total_pairs += prefix_medians_count[i]\n        if suffix_medians[i] == M:\n            total_pairs += prefix_medians_count[i]\n\n    return total_pairs\n\nprint(solution(N, M, A))\n']
2022-04-12 16:48:15.196333 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nN = int(input())\nM = int(input())\nA = list(map(int, input().split()))\n\n# N = 5\n# M = 4\n# A = [1, 4, 5, 60, 4]\n\n# N = 3\n# M = 1\n# A = [1, 1, 1]\n\n# N = 15\n# M = 2\n# A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n\n# N = 200000\n# M = 100000\n# A = [1]*N\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(1, N+1)]\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(N, 0, -1)]\n\n\ndef solution(N, M, A):\n    # calculate prefix medians (left part)\n    prefix_medians = [[0, 0] for _ in range(N+1)]\n    for i in range(N+1):\n        prefix_medians[i][0] = (prefix_sums[i] + i) // (i+1)\n        prefix_medians[i][1] = prefix_medians[i-1][1]\n        if prefix_medians[i][0] == M:\n            prefix_medians[i][1] += 1\n\n    # calculate suffix medians (right part)\n    suffix_medians = [[0, 0] for _ in range(N+1)]\n    for i in range(N-1, -1, -1):\n        suffix_medians[i][0] = (prefix_sums[N] - prefix_sums[i] + N-i-1) // (N-i)\n        suffix_medians[i][1] = suffix_medians[i+1][1]\n        if suffix_medians[i][0] == M:\n            suffix_medians[i][1] += 1\n\n    # calculate prefix sums\n    prefix_sums = [0]*(N+1)\n    for i in range(N):\n        prefix_sums[i+1] = prefix_sums[i] + A[i]\n\n    # calculate total number of pairs\n    total_pairs = 0\n\n    # calculate total number of pairs\n    for i in range(N+1):\n        total_pairs += prefix_medians[i][1] * suffix_medians[i+1][1]\n\n    return total_pairs\n\nprint(solution(N, M, A))\n"
    },
    {
      "index": 1,
      "text": "\n\n# N = int(input())\n# M = int(input())\n# A = list(map(int, input().split()))\n\nN = 5\nM = 4\nA = [1, 4, 5, 60, 4]\n\n# N = 3\n# M = 1\n# A = [1, 1, 1]\n\n# N = 15\n# M = 2\n# A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n\n# N = 200000\n# M = 100000\n# A = [1]*N\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(1, N+1)]\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(N, 0, -1)]\n\n\ndef solution(N, M, A):\n    # calculate prefix sums\n    prefix_sums = [0]*(N+1)\n    for i in range(N):\n        prefix_sums[i+1] = prefix_sums[i] + A[i]\n\n    # calculate prefix medians (left part)\n    prefix_medians = [0]*(N+1)\n    for i in range(N):\n        prefix_medians[i+1] = (prefix_sums[i+1] + i) // (i+1)\n\n    # calculate suffix medians (right part)\n    suffix_medians = [0]*(N+1)\n    for i in range(N-1, -1, -1):\n        suffix_medians[i] = (prefix_sums[N] - prefix_sums[i] + N-i-1) // (N-i)\n\n    # calculate total number of pairs\n    total_pairs = 0\n\n    # calculate number of pairs with prefix medians\n    prefix_medians_count = [0]*(N+2)\n    for i in range(N+1):\n        prefix_medians_count[i+1] = prefix_medians_count[i]\n        if prefix_medians[i] == M:\n            prefix_medians_count[i] += 1\n\n    for i in range(N+1):\n        total_pairs += prefix_medians_count[i]\n        if suffix_medians[i] == M:\n            total_pairs += prefix_medians_count[i]\n\n    return total_pairs\n\nprint(solution(N, M, A))\n"
    },
    {
      "index": 2,
      "text": "\n\n# N = int(input())\n# M = int(input())\n# A = list(map(int, input().split()))\n\n# N = 5\n# M = 4\n# A = [1, 4, 5, 60, 4]\n\n# N = 3\n# M = 1\n# A = [1, 1, 1]\n\n# N = 15\n# M = 2\n# A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n\nN = 200000\nM = 100000\nA = [1]*N\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(1, N+1)]\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(N, 0, -1)]\n\n\ndef solution(N, M, A):\n    # calculate prefix sums\n    prefix_sums = [0]*(N+1)\n    for i in range(N):\n        prefix_sums[i+1] = prefix_sums[i] + A[i]\n\n    # calculate prefix medians (left part)\n    prefix_medians = [0]*(N+1)\n    for i in range(N):\n        prefix_medians[i+1] = (prefix_sums[i+1] + i) // (i+1)\n\n    # calculate suffix medians (right part)\n    suffix_medians = [0]*(N+1)\n    for i in range(N-1, -1, -1):\n        suffix_medians[i] = (prefix_sums[N] - prefix_sums[i] + N-i-1) // (N-i)\n\n    # calculate total number of pairs\n    total_pairs = 0\n\n    # calculate number of pairs with prefix medians\n    prefix_medians_count = [0]*(N+1)\n    for i in range(N+1):\n        prefix_medians_count[i] = prefix_medians_count[i-1]\n        if prefix_medians[i] == M:\n            prefix_medians_count[i] += 1\n\n    for i in range(N+1):\n        total_pairs += prefix_medians_count[i]\n        if suffix_medians[i] == M:\n            total_pairs += prefix_medians_count[i]\n\n    return total_pairs\n\nprint(solution(N, M, A))\n"
    }
  ],
  "created": 1649782076,
  "object": "edit"
}
2022-04-12 16:48:15.196619 fix syntax errors 3 ['\n\nN = int(input())\nM = int(input())\nA = list(map(int, input().split()))\n\n# N = 5\n# M = 4\n# A = [1, 4, 5, 60, 4]\n\n# N = 3\n# M = 1\n# A = [1, 1, 1]\n\n# N = 15\n# M = 2\n# A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n\n# N = 200000\n# M = 100000\n# A = [1]*N\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(1, N+1)]\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(N, 0, -1)]\n\n\ndef solution(N, M, A):\n    # calculate prefix medians (left part)\n    prefix_medians = [[0, 0] for _ in range(N+1)]\n    for i in range(N+1):\n        prefix_medians[i][0] = (prefix_sums[i] + i) // (i+1)\n        prefix_medians[i][1] = prefix_medians[i-1][1]\n        if prefix_medians[i][0] == M:\n            prefix_medians[i][1] += 1\n\n    # calculate suffix medians (right part)\n    suffix_medians = [[0, 0] for _ in range(N+1)]\n    for i in range(N-1, -1, -1):\n        suffix_medians[i][0] = (prefix_sums[N] - prefix_sums[i] + N-i-1) // (N-i)\n        suffix_medians[i][1] = suffix_medians[i+1][1]\n        if suffix_medians[i][0] == M:\n            suffix_medians[i][1] += 1\n\n    # calculate prefix sums\n    prefix_sums = [0]*(N+1)\n    for i in range(N):\n        prefix_sums[i+1] = prefix_sums[i] + A[i]\n\n    # calculate total number of pairs\n    total_pairs = 0\n\n    # calculate total number of pairs\n    for i in range(N+1):\n        total_pairs += prefix_medians[i][1] * suffix_medians[i+1][1]\n\n    return total_pairs\n\nprint(solution(N, M, A))\n', '\n\n# N = int(input())\n# M = int(input())\n# A = list(map(int, input().split()))\n\nN = 5\nM = 4\nA = [1, 4, 5, 60, 4]\n\n# N = 3\n# M = 1\n# A = [1, 1, 1]\n\n# N = 15\n# M = 2\n# A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n\n# N = 200000\n# M = 100000\n# A = [1]*N\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(1, N+1)]\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(N, 0, -1)]\n\n\ndef solution(N, M, A):\n    # calculate prefix sums\n    prefix_sums = [0]*(N+1)\n    for i in range(N):\n        prefix_sums[i+1] = prefix_sums[i] + A[i]\n\n    # calculate prefix medians (left part)\n    prefix_medians = [0]*(N+1)\n    for i in range(N):\n        prefix_medians[i+1] = (prefix_sums[i+1] + i) // (i+1)\n\n    # calculate suffix medians (right part)\n    suffix_medians = [0]*(N+1)\n    for i in range(N-1, -1, -1):\n        suffix_medians[i] = (prefix_sums[N] - prefix_sums[i] + N-i-1) // (N-i)\n\n    # calculate total number of pairs\n    total_pairs = 0\n\n    # calculate number of pairs with prefix medians\n    prefix_medians_count = [0]*(N+2)\n    for i in range(N+1):\n        prefix_medians_count[i+1] = prefix_medians_count[i]\n        if prefix_medians[i] == M:\n            prefix_medians_count[i] += 1\n\n    for i in range(N+1):\n        total_pairs += prefix_medians_count[i]\n        if suffix_medians[i] == M:\n            total_pairs += prefix_medians_count[i]\n\n    return total_pairs\n\nprint(solution(N, M, A))\n', '\n\n# N = int(input())\n# M = int(input())\n# A = list(map(int, input().split()))\n\n# N = 5\n# M = 4\n# A = [1, 4, 5, 60, 4]\n\n# N = 3\n# M = 1\n# A = [1, 1, 1]\n\n# N = 15\n# M = 2\n# A = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n\nN = 200000\nM = 100000\nA = [1]*N\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(1, N+1)]\n\n# N = 200000\n# M = 100000\n# A = [i for i in range(N, 0, -1)]\n\n\ndef solution(N, M, A):\n    # calculate prefix sums\n    prefix_sums = [0]*(N+1)\n    for i in range(N):\n        prefix_sums[i+1] = prefix_sums[i] + A[i]\n\n    # calculate prefix medians (left part)\n    prefix_medians = [0]*(N+1)\n    for i in range(N):\n        prefix_medians[i+1] = (prefix_sums[i+1] + i) // (i+1)\n\n    # calculate suffix medians (right part)\n    suffix_medians = [0]*(N+1)\n    for i in range(N-1, -1, -1):\n        suffix_medians[i] = (prefix_sums[N] - prefix_sums[i] + N-i-1) // (N-i)\n\n    # calculate total number of pairs\n    total_pairs = 0\n\n    # calculate number of pairs with prefix medians\n    prefix_medians_count = [0]*(N+1)\n    for i in range(N+1):\n        prefix_medians_count[i] = prefix_medians_count[i-1]\n        if prefix_medians[i] == M:\n            prefix_medians_count[i] += 1\n\n    for i in range(N+1):\n        total_pairs += prefix_medians_count[i]\n        if suffix_medians[i] == M:\n            total_pairs += prefix_medians_count[i]\n\n    return total_pairs\n\nprint(solution(N, M, A))\n']
2022-04-12 16:48:15.196678 size on output set 8
