["\n\ndef main():\n    n = int(input())\n    skills = list(map(int, input().split()))\n    skills.sort()\n    i = 0\n    j = n - 1\n    k = 0\n    while i < j - 1:\n        while j - i > 1 and skills[j] - skills[i] > k:\n            j -= 1\n        if skills[j] - skills[i] <= k:\n            k = skills[j] - skills[i]\n        i += 1\n    print(k)\n    for skill in skills:\n        print(1, end=' ')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    skills = list(map(int, input().split()))\n    skills.sort()\n    i = 0\n    j = n - 1\n    k = 0\n    while i < j - 1:\n        while j - i > 1 and skills[j] - skills[i] > k:\n            j -= 1\n        if skills[j] - skills[i] <= k:\n            k = skills[j] - skills[i]\n        i += 1\n    print(k, j - i)\n    for skill in skills:\n        print(1, end=' ')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    skills = list(map(int, input().split()))\n    skills.sort()\n    i = 0\n    j = n - 1\n    k = 0\n    while i < j - 1:\n        while j - i > 1 and skills[j] - skills[i] > k:\n            j -= 1\n        if skills[j] - skills[i] <= k:\n            k = skills[j] - skills[i]\n        i += 1\n    print(k, j - i + 1, sep=' ')\n    for skill in skills:\n        print(1, end=' ')\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\nimport os\nimport sys\nimport argparse\n\n\ndef main():\n    parser = argparse.ArgumentParser(description='fix spelling mistakes')\n    parser.add_argument('-f', '--file', help='the file to fix')\n    parser.add_argument('-w', '--word', help='the word to fix')\n    parser.add_argument('-r', '--replace', help='the word to replace')\n    if args.word is None or args.replace is None:\n        print('word and replace are required arguments')  # pragma: no cover\n        sys.exit(1)\n    args = parser.parse_args()\n    if args.file is None or not os.path.isfile(args.file):\n        print('the file does not exist')  # pragma: no cover\n        sys.exit(1)\n    with open(args.file) as f:\n        lines = f.readlines()\n    with open(args.file, 'w') as f:\n        for line in lines:\n            f.write(line.replace(args.word, args.replace))\n\nif __name__ == '__main__':\n    main()\n", "#include <iostream>\n#include <fstream>\n#include <cstdlib>\n\nusing namespace std;\n\nint main()\n{\n    string filename = \"stats.txt\";\n    ifstream input;\n    input.open(filename);\n\n    if (input.fail())\n    {\n        cout << \"There was an error opening the file \" << filename << endl;\n        exit(1);\n    }\n\n    while (input)\n    {\n        string line;\n        getline(input, line, ':');\n\n        int population;\n        input >> population;\n\n        input >> ws;\n\n        if (!input)\n        {\n            break;\n        }\n\n        cout << \"'\" << line << \"'\" << \" -- '\" << population << \"'\" << endl;\n    }\n\n    input.close();\n\n    return 0;\n}\n", "\n\ndef main():\n    n = int(input())\n    skills = list(map(int, input().split()))\n    skills.sort()\n    i = 0\n    j = n - 1\n    k = n\n    while i < j - 1:\n        while j - i > 1 and skills[j] - skills[i] >= k:\n            j -= 1\n        if skills[j] - skills[i] < k:\n            k = skills[j] - skills[i]\n        i += 1\n    print(k)\n    for skill in skills:\n        print(1, end=' ')\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\nimport os\nimport sys\nimport argparse\n\n\ndef main():\n    parser = argparse.ArgumentParser(description='fix spelling mistakes')\n    parser.add_argument('-f', '--file', help='the file to fix', required=True)\n    parser.add_argument('-w', '--word', help='the word to fix', required=True)\n    parser.add_argument('-r', '--replace', help='the word to replace', required=True)\n    args = parser.parse_args()\n    if not os.path.isfile(args.file):\n        print('the file does not exist')\n        sys.exit(1)\n    with open(args.file) as f:\n        lines = f.readlines()\n    with open(args.file, 'w') as f:\n        for line in lines:\n            f.write(line.replace(args.word, args.replace).encode('utf-8'))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    skills = list(map(int, input().split()))\n    skills.sort()\n    i = 0\n    j = n - 1\n    k = 0\n    while i < j - 1:\n        while j - i > 1 and skills[j] - skills[i] > k:\n            j -= 1\n        if skills[j] - skills[i] <= k:\n            k = skills[j] - skills[i]\n        i += 1\n    print(k, j - i)\n    for skill in skills:\n        print(1, end=' ')\n\n\nif __name__ == '__main__':\n    main()\n", "#include <iostream>\n#include <fstream>\n#include <cstdlib>\n\nusing namespace std;\n\nint main()\n{\n    string filename = \"stats.txt\"; //set filename to stats.txt\n    ifstream input;\n    input.open(filename); //open file\n\n    if (input.fail()) //if fail to open file, print error message\n    {\n        cout << \"There was an error opening the file \" << filename << endl;\n        exit(1); //exit program\n    }\n\n    while (input) //while input is open\n    {\n        string line; //create string line\n        getline(input, line, ':'); //getline from input file\n\n        int population; //create integer population\n        input >> population; //set population to the input\n\n        input >> ws; //set whitespace\n\n        if (!input) //if input fails to open\n        {\n            break; //break out of loop\n        }\n\n        cout << \"'\" << line << \"'\" //print line\n             << \" -- '\" << population << \"'\" << endl; //print population\n    }\n\n    input.close(); //close input\n\n    return 0; //return 0\n}\n", "#include <iostream>\n#include <fstream>\n#include <cstdlib>\n\nusing namespace std;\n\nint main()\n{\n    string filename = \"stats.txt\"; // assign string to filename\n    ifstream input;\n    input.open(filename); // open file\n\n    if (input.fail()) // if file doesn't open\n    {\n        cout << \"There was an error opening the file \" << filename << endl;\n        exit(1);\n    }\n\n    while (input) // while file is open\n    {\n        string line; // string to hold line\n        getline(input, line, ':'); // get line with : as delimiter\n\n        int population; // int to hold population\n        input >> population; // get population\n\n        input >> ws; // ignore whitespace\n\n        if (!input) // if input is false\n        {\n            break; // break out of loop\n        }\n\n        cout << \"'\" << line << \"'\" // print line\n             << \" -- '\" << population << \"'\" << endl; // print population\n    }\n\n    input.close(); // close file\n\n    return 0;\n}\n", "\n\ndef main():\n    n = int(input())\n    skills = list(map(int, input().split()))\n    skills.sort()\n    i = 0\n    j = n - 1\n    k = 0\n    while i < j - 1:\n        while j - i > 1 and skills[j] - skills[i] > k:\n            j -= 1\n        if skills[j] - skills[i] <= k:\n            k = skills[j] - skills[i]\n        i += 1\n    print(k, j-i+1)\n    for skill in skills:\n        print(1, end=' ')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    skills = list(map(int, input().split()))\n    skills.sort()\n    i = 0\n    j = n - 1\n    k = n\n    while i < j - 1:\n        while j - i > 1 and skills[j] - skills[i] >= k:\n            j -= 1\n        if skills[j] - skills[i] < k:\n            k = skills[j] - skills[i]\n        i += 1\n    print(k)\n    for i in range(n):\n        print(skills[i], end=' ')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    skills = list(map(int, input().split()))\n    skills.sort()\n    i = 0\n    j = n - 1\n    k = 0\n    while i < j - 1:\n        while j - i > 1 and skills[j] - skills[i] > k:\n            j -= 1\n        if skills[j] - skills[i] <= k:\n            k = skills[j] - skills[i]\n        i += 1\n    print(k, j - i)\n    for skill in skills:\n        print(1, end=' ')\n# fix syntax errors\nif __name__ == '__main__':\n    main()\n", "\"use strict\";\n\nconst fs = require('fs');\n\nlet file = fs.readFileSync('./file.txt', 'utf8'); // read the file\n\n// console.log(file);\n\nlet array = file.split('\\n'); // convert the file to an array\n\narray.forEach(function(line, index){ // iterate through the lines\n    let array = line.split(' '); // convert the line to an array\n    if(array.length > 1){ // if the line has two items\n        let word = array[0]; // assign the first item to a variable\n        let number = array[1]; // assign the second item to a variable\n        console.log(word + ' ' + number); // print the variables\n    }\n});\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\nimport os\nimport sys\nimport argparse\n\n\ndef main():\n    parser = argparse.ArgumentParser(description='fix spelling mistakes')\n    parser.add_argument('-f', '--file', help='the file to fix', required=True)\n    parser.add_argument('-w', '--word', help='the word to fix', required=True)\n    parser.add_argument('-r', '--replace', help='the word to replace', required=True)\n    args = parser.parse_args()\n    if not os.path.isfile(args.file):\n        print('the file does not exist')\n        sys.exit(1)\n    with open(args.file, 'r+') as f:\n        text = f.read()\n        f.seek(0)\n        f.write(text.replace(args.word, args.replace))\n        f.truncate()\n\nif __name__ == '__main__':\n    main()\n", "\"use strict\";\n\nconst fs = require('fs');\n\nlet file = fs.readFileSync('./file.txt', 'utf-8');\n\nconsole.log(file);\n\nlet array = file.split('\\n');\n\narray.forEach(function(line, index){\n    let array = line.split(' ');\n    if(array.length > 1){\n        let word = array[0];\n        let number = array[1];\n        console.log(word + ' ' + number);\n    }\n});\n", "\n\ndef main():\n    n = int(input())\n    skills = list(map(int, input().split()))\n    skills.sort()\n    i = 0\n    j = n - 1\n    k = n\n    while i < j - 1:\n        while j - i > 1 and skills[j] - skills[i] >= k:\n            j -= 1\n        if skills[j] - skills[i] < k:\n            k = skills[j] - skills[i]\n        i += 1\n    print(k)\n    print(j - i)\n\n\nif __name__ == '__main__':\n    main()\n", "\"use strict\";\n\nconst fs = require(\"fs\");\n\nlet file = fs.readFileSync(\"./file.txt\", \"utf8\");\n\nconsole.log(file);\n\nlet array = file.split(\"\\n\");\n\narray.forEach(function (line, index) {\n  let array = line.split(\" \");\n  if (array.length > 1) {\n    let word = array[0];\n    let number = array[1];\n    console.log(word + \" \" + number);\n  }\n});\n"]