2022-04-09 21:33:59.151538 """
Snuke is buying a bicycle.
The bicycle of his choice does not come with a bell, so he has to buy one separately.
He has very high awareness of safety, and decides to buy two bells, one for each hand.
The store sells three kinds of bells for the price of a, b and c yen (the currency of Japan), respectively.
Find the minimum total price of two different bells.

-----Constraints-----
 - 1 \leq a,b,c \leq 10000
 - a, b and c are integers.

-----Input-----
Input is given from Standard Input in the following format:
a b c

-----Output-----
Print the minimum total price of two different bells.

-----Sample Input-----
700 600 780

-----Sample Output-----
1300

 - Buying a 700-yen bell and a 600-yen bell costs 1300 yen.
 - Buying a 700-yen bell and a 780-yen bell costs 1480 yen.
 - Buying a 600-yen bell and a 780-yen bell costs 1380 yen.
The minimum among these is 1300 yen.
"""
2022-04-09 21:33:59.151560 --------------------------
2022-04-09 21:34:10.865868 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef main():\n    a, b, c = map(int, input().split())\n    print(min(a+b, a+c, b+c))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\na, b, c = map(int, input().split())\n\nprint(min(a + b, b + c, a + c))"
    }
  ],
  "created": 1649554439,
  "id": "cmpl-4vGkhMuvFkypMwqKZIz6X6pAU7gyV",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 21:34:10.866056 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef main():\n    a, b, c = map(int, input().split())\n    print(min(a+b, a+c, b+c))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-09 21:34:10.866092 REASON stop
2022-04-09 21:34:10.878011 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\na, b, c = map(int, input().split())\n\nprint(min(a + b, b + c, a + c))"
}
2022-04-09 21:34:10.878095 REASON stop
