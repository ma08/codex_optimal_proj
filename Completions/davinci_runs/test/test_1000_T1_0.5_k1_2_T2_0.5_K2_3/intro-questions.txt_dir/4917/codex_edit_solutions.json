["#!/usr/bin/env python3\n\nn = int(input())\n\nintervals = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    intervals.append((a, b))\n\nintervals.sort()\n\nfor i in range(n-1):\n    a, b = intervals[i]\n    a_next, b_next = intervals[i+1]\n    if b_next < a:\n        print(\"Edward is right\")\n        exit(0)\n\nprint(\"Gunilla has a point\")\n", "\n\n#program2\n\nn = int(input())\n\nl = []\n\nfor i in range(n):\n    l.append(list(map(int,input().split())))\n\nl.sort(key=lambda x: x[1])\n\nif l[0][1] >= l[1][0]:\n    print(\"gunilla has a point\") \nelse:\n    print(\"edward is right\")\n", "\nnum_times = int(input())\n\ntimes = []\nfor i in range(num_times):\n    times.append(tuple([int(x) for x in input().split()]))\n\n# Check if all times are the same\nfor i in range(num_times - 1):\n    if times[i][1] != times[i+1][1]:\n        print(\"Erdos is right\")\n        exit()\n\nprint(\"Gunilla has a point\")\n", "\n\ndef main():\n    # # Read input\n    # n = int(input())\n    # intervals = []\n    # for i in range(n):\n    #     intervals.append([int(i) for i in input().split(\" \")])\n\n    # # Check for common time\n    # times = []\n    # for interval in intervals:\n    #     for time in range(interval[0], interval[1] + 1):\n    #         times.append(time)\n    # if len(set(times)) == 1:\n    #     print(\"Gunilla has a point\")\n    # else:\n    #     print(\"Edward is right\")\n    print(\"Hello\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n#cook your dish here\nN = int(input())\n\ndef check(b):\n    for i in range(N):\n        if a[i]<=b<=c[i]:\n            return False\n    return True\n\nfor i in range(N):\n    a,b = map(int,input().split())\n    if check(a):\n        print(\"Gunilla has a point\")\n        break\nelse:\n    print(\"Edward is right\")\n", "\n\n#cook your dish here\nN = int(input())\n\ndef check(b):\n    for i in range(N):\n        if a[i]<=b<=c[i]:\n            return False\n    return True\n\nfor i in range(N):\n    aa,bb = map(int,input().split())\n    if check(aa):\n        print(\"gunilla has a point\")\n        break\nelse:\n    print(\"edward is right\")\n", "\n\ndef main():\n\t# Read input\n\tn = int(input())\n\tintervals = []\n\tfor i in range(n):\n\t\tintervals.append([int(i) for i in input().split(\" \")])\n\n\t# Check for common time interval\n\ttimes = []\n\tfor interval in intervals:\n\t\tfor time in range(interval[0], interval[1] + 1):\n\t\t\ttimes.append(time)\n\tif len(set(times)) == 1:\n\t\tprint(\"gunilla has a point\")\n\telse:\n\t\tprint(\"edward is right\")\n\nif __name__ == \"__main__\":\n\tmain()\n", "\n\ndef main():\n    # Read input\n    n = int(input())\n    intervals = []\n    for i in range(n):\n        intervals.append([int(i) for i in input().split(\" \")])\n\n    # Check for common time interval\n    times = []\n    for interval in intervals:\n        for time in range(interval[0], interval[1] + 1):\n            times.append(time)\n    if len(set(times)) == 1:\n        print(\"Gunnar has a point\")\n    else:\n        print(\"Eddie is right\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().rstrip('\\n'))\n    intervals = []\n    for i in range(n):\n        a, b = [int(x) for x in sys.stdin.readline().rstrip('\\n').split()]\n        intervals.append([a, b])\n    intervals.sort()\n    intervals_in_common = []\n    for i in range(n-1):\n        start = max(intervals[i][0], intervals[i+1][0])\n        end = min(intervals[i][1], intervals[i+1][1])\n        if start <= end:\n            intervals_in_common.append([start, end])\n    if len(intervals_in_common) == 0:\n        print(\"Edward is right!\")\n    else:\n        print(\"Gunilla has a point!\")\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().rstrip(''))\n    intervals = []\n    for i in range(n):\n        a, b = [int(x) for x in sys.stdin.readline().rstrip('').split()]\n        intervals.append([a, b])\n    intervals.sort()\n    intervals_in_common = []\n    for i in range(n-1):\n        start = max(intervals[i][0], intervals[i+1][0])\n        end = min(intervals[i][1], intervals[i+1][1])\n        if start <= end:\n            intervals_in_common.append([start, end])\n    if len(intervals_in_common) == 0:\n        print(\"edward is right!\")\n    else:\n        print(\"gunilla has a point!\")\n\nif __name__ == '__main__':\n    main()\n", "\n\n# cook your dish here\nN = int(input())\n\ndef check(b):\n    for i in range(N):\n        if a[i]<=b<=b[i] and b!=a[i] and b!=b[i]:\n            return False\n    return True\n\nfor i in range(N):\n    a,b = map(int,input().split())\n    if check(a):\n        print(\"gunilla has a point\")\n        break\nelse:\n    print(\"edward is right\")\n", "\n\n#cook your dish here\nN = int(input())\n\ndef check(b):\n    for i in range(N):\n        if a[i]<=b<=c[i]:\n            return False\n    return True\n\nfor i in range(N):\n    a,c = map(int,input().split())\n    if check(a):\n        print(\"Gunilla has a point\")\n        break\nelse:\n    print(\"Edward is right\")\n", "\nimport sys\n\ndef solve(times):\n    # if any time is within another time, it is impossible\n    # otherwise, possible \n    for time in times:\n        for other_time in times:\n            if time != other_time and time[0] >= other_time[0] and time[1] <= other_time[1]:\n                return \"Gunilla has a point\"\n    return \"Edward is right\"\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    times = []\n    for _ in range(n):\n        times.append(tuple(map(int, sys.stdin.readline().strip().split())))\n    print(solve(times))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nnum_times = int(input())\n\ntimes = []\nfor i in range(num_times):\n    times.append([int(x) for x in input().split()]) # list comprehension\n\n# Check if all times are the same\nfor i in range(num_times - 1):\n    if times[i][1] != times[i + 1][1]:\n        print(\"Edward is right\")\n        exit()\n\nprint(\"Gunilla has a point\")\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().rstrip('\\n'))\n    intervals = []\n    for i in range(n):\n        a, b = [int(x) for x in sys.stdin.readline().rstrip('\\n').split()]\n        intervals.append([a, b])\n    intervals.sort()\n    intervals_in_common = []\n    for i in range(n-1):\n        start = max(intervals[i][0], intervals[i+1][0])\n        end = min(intervals[i][1], intervals[i+1][1])\n        if start <= end:\n            intervals_in_common.append([start, end])\n    if len(intervals_in_common) == 0:\n        print(\"Edward is right\")\n    else:\n        print(\"Gunilla has a point\")\nif __name__ == '__main__':\n    main()\n", "\n\n# cook your dish here\nN = int(input())\n\ndef check(b):\n    for i in range(N):\n        if a[i]<=b<=b[i] or a[i]>=b>=b[i]:\n            return False\n    return True\n\nfor i in range(N):\n    a,b = map(int,input().split())\n    if check(a):\n        print(\"gunilla has a point\")\n        break\nelse:\n    print(\"edward is right\")\n", "\n\nn = int(input())\ntimes = []\nfor i in range(n):\n    times.append(list(map(int, input().split())))\n\nfor i in range(n):\n    if times[i][0] <= times[i][1]:\n        print(\"Edward is right\")\n        break\n\nprint(\"Gunilla has a point\")\n", "\nn = int(input())\n\nintervals = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    intervals.append((a, b))\nintervals.sort()\nfor i in range(n-1):\n    a, b = intervals[i]\n    a_next, b_next = intervals[i+1]\n    if b_next < a:\n        print(\"gunilla is right\")\n        exit(0)\nprint(\"edward is right\")\n", "\nnum_times = int(input())\n\ntimes = []\nfor i in range(num_times):\n    times.append([int(x) for x in input().split()])\n# Check if all times are the same\nfor i in range(num_times - 1):\n    if times[i][1] != times[i + 1][1]:\n        print(\"Erdos is right\")\n        exit()\nprint(\"Gunilla has a point\")\n", "\n# program\n\nn = int(input())\n\nl = []\n\nfor i in range(n):\n    l.append(list(map(int, input().split())))\n\nl.sort(key=lambda x: x[1])\n\nif l[0][1] >= l[1][0]:\n    print(\"gunilla has a point\")\nelse:\n    print(\"edward is right\")\n", "\nn = int(input())\n\nintervals = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    intervals.append((a, b))\n\nintervals.sort()\n\nfor i in range(n-1):\n    a, b = intervals[i]\n    a_next, b_next = intervals[i+1]\n    if b_next < a:\n        print(\"Edward is right\")\n        exit(0)\n\nprint(\"Gunilla has a point\")\n", "\n\n\nn = int(input())\ntimes = []\nfor i in range(n):\n    times.append(list(map(int, input().split())))\n\nfor i in range(n):\n    if times[i][0] <= times[i][1]:\n        print(\"Edward is right\")\n        quit()\n\nprint(\"Gunilla has a point\")\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().rstrip('\\n'))\n    intervals = []\n    for i in range(n):\n        a, b = [int(x) for x in sys.stdin.readline().rstrip('\\n').split()]\n        intervals.append([a, b])\n    intervals.sort()\n    intervals_in_common = set()\n    for i in range(n-1):\n        start = max(intervals[i][0], intervals[i+1][0])\n        end = min(intervals[i][1], intervals[i+1][1])\n        if start <= end:\n            intervals_in_common.add((start, end))\n    if len(intervals_in_common) == 0:\n        print(\"edward is right!\")\n    else:\n        print(\"gunilla has a point!\")\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef solve(times):\n    pass\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    times = []\n    for _ in range(n):\n        times.append(tuple(map(int, sys.stdin.readline().strip().split())))\n    print(solve(times))\n\nif __name__ == \"__main__\":\n    main()\n", "def main():\n    print('hello world')\n\n\nmain()\n", "\n\ndef main():\n    # Read input\n    n = int(raw_input())\n    intervals = []\n    for i in range(n):\n        intervals.append([int(i) for i in raw_input().split(\" \")])\n\n    # Check for common time interval\n    times = []\n    for interval in intervals:\n        for time in range(interval[0], interval[1] + 1):\n            times.append(time)\n    if len(set(times)) == 1:\n        print(\"gunilla has a point\")\n    else:\n        print(\"edward is right\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nnum_times = int(input())\n\ntimes = []\nfor i in range(num_times):\n    times.append([int(x) for x in input().split()])\n\n# Check if all times are the same\nfor i in range(num_times - 1):\n    if times[i][1] != times[i + 1][1]:\n        print(\"Edward is right\")\n        break\n\nprint(\"Gunilla has a point\")\n", "\n\nimport sys\nfrom collections import deque\nsys.setrecursionlimit(10**6)\n\nfor i in range(n):\n    if times[i][0] <= times[i][1]:\n        print(\"Edward is right\")\n        quit()\n\nprint(\"Gunilla has a point\")\n", "\n\ndef main():\n    # Read input\n    n = int(input())\n    intervals = []\n    for i in range(n):\n        intervals.append([int(i) for i in input().split(\" \")])\n\n    # Check for common time\n    times = []\n    for interval in intervals:\n        for time in range(interval[0], interval[1] + 1):\n            times.append(time)\n    if len(set(times)) != 1:\n        print(\"gunilla has a point\")  # gunilla is right\n    else:\n        print(\"edward is right\")  # edward is right\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    # Read input of the first line\n    first_line = [int(i) for i in input().split(\" \")]\n\n    # Check for common time in all intervals\n    for i in range(first_line[1]):\n        # Read input of the interval\n        interval = [int(i) for i in input().split(\" \")]\n\n        # Check for common time\n        times = []\n        for time in range(interval[0], interval[1] + 1):\n            times.append(time)\n        if len(set(times)) == 1:\n            print(\"gunilla has a point\")  # gunilla is right\n        else:\n            print(\"edward is right\")  # edward is right\n\nif __name__ == \"__main__\":\n    main()\n", "\nn = int(input())\n\nintervals = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    intervals.append((a, b))\n\nintervals.sort()\n\nfor i in range(n - 1):\n    a, b = intervals[i]\n    a_next, b_next = intervals[i + 1]\n    if b_next < a:\n        print(\"gunilla is right\")\n        exit(0)\n\nprint(\"edward is right\")\n", "#!/usr/bin/env python3\n\nn = int(input())\n\nintervals = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    intervals.append((a, b))\n\nintervals.sort()\n\nfor i in range(n-1):\n    a, b = intervals[i]\n    a_next, b_next = intervals[i+1]\n    if b_next < a:\n        print(\"gunilla is right\")\n        exit(0)\n\nprint(\"edward is right\")\n", "\n\nnum_times = int(input()) # number of times\n\ntimes = []\nfor i in range(num_times):\n    times.append([int(x) for x in input().split()])\n\n# Check if all times are the same\nfor i in range(num_times - 1):\n    if times[i][1] != times[i + 1][1]:\n        print(\"Edward is right\")\n        exit()\n\nprint(\"Gunilla has a point\")\n", "#!/usr/bin/env python3\n\n\nprint(\"Hello World!\")\n", "\nn = int(input())\n\nintervals = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    intervals.append((a, b))\n\nintervals.sort()\n\nfor i in range(n - 1):\n    a, b = intervals[i]\n    a_next, b_next = intervals[i + 1]\n    if b_next < a:\n        print(\"edward is right\")\n        exit(0)\n\nprint(\"gunilla has a point\")\n", "\n\nn = int(input())\n\nintervals = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    intervals.append((a, b))\n\nintervals.sort()\n\nfor i in range(n-1):\n    a, b = intervals[i]\n    a_next, b_next = intervals[i+1]\n    if b_next < a:\n        print(\"edward is right\")\n        exit(0)\n\nprint(\"gunilla has a point\")\n", "\n\n#cook your dish here\nN = int(input())\n\ndef check(b):\n    for i in range(N):\n        if a[i]<=b<=b[i] or a[i]>=b>=b[i]:\n            return False\n    return True\na = []\nb = []\n\nfor i in range(N):\n    a1,b1 = map(int,input().split())\n    a.append(a1)\n    b.append(b1)\n    if check(a1):\n        print(\"Gunilla has a point\")\n        break\nelse:\n    print(\"Edward is right\")\n", "\n\n# program\n\nn = int(input())\n\nl = []\n\nfor i in range(n):\n    l.append(list(map(int, input().split())))\n\nl.sort(key=lambda x: x[1])\n\nif l[0][1] >= l[1][0]:\n    print(\"Gunilla has a point\")\nelse:\n    print(\"Edward is right\")\n", "\n\n# cook your dish here\nN = int(input())\n\ndef check(b):\n    for i in range(N):\n        if a[i]<=b<=c[i]:\n            return False\n    return True\n\nfor i in range(N):\n    a,b = map(int,input().split())\n    if check(a):\n        print(\"gunilla has a point\")\n        break\nelse:\n    print(\"edward is right\")\n", "\n\n\nimport sys\n\ndef solve(times):\n    # if any time is within another time, it is impossible\n    # otherwise, possible\n    for time in times:\n        for other_time in times:\n            if time != other_time and time[0] >= other_time[0] and time[1] <= other_time[1]:\n                return \"Gunilla has a point\"\n    return \"Edward is right\"\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    times = []\n    for _ in range(n):\n        times.append(tuple(map(int, sys.stdin.readline().strip().split())))\n    print(solve(times))\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef solve(n):\n    if n == 0:\n        return \"INSOMNIA\"\n    seen = set()\n    i = 1\n    while len(seen) < 10:\n        seen.update(str(i * n))\n        i += 1\n    return str((i - 1) * n)\n", "\n\n# program\n\nn = int(input())\n\nl = []\n\nfor i in range(n):\n    l.append(list(map(int, input().split())))\n\nl.sort(key=lambda x: x[1])\n\nif l[0][1] >= l[1][0]:\n    print(\"gunilla has a point\")\nelse:\n    print(\"edward is right\")\n", "import sys\n\n\n\ndef solve(times):\n    # if any time is within another time, it is impossible,\n    # otherwise, possible.\n    for time in times:\n        for other_time in times:\n            if time != other_time and time[0] >= other_time[0] and \\\n                    time[1] <= other_time[1]:\n                return \"Gunilla has a point\"\n\n    return \"Edward is right\"\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    times = []\n    for _ in range(n):\n        times.append(tuple(map(int, sys.stdin.readline().strip().split())))\n    print(solve(times))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    # Read input\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n#cook your dish here\nN = int(input())\na = []\nb = []\ndef check(b):\n    for i in range(N):\n        if a[i]<=b<=c[i]:\n            return False\n    return True\n\nfor i in range(N):\n    a1,b1 = map(int,input().split())\n    a.append(a1)\n    b.append(b1)\n    if check(b1):\n        print(\"gunilla has a point\")\n        break\nelse:\n    print(\"edward is right\")\n", "\n\nimport sys\n\ndef main():\n    a = int(sys.stdin.readline().rstrip('\\n'))\n    b = int(sys.stdin.readline().rstrip('\\n'))\n    print(a + b)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    # Read input\n    n = int(input())\n    intervals = []\n    for i in range(n):\n        intervals.append([int(i) for i in input().split(\" \")])\n\n    # Check for common time interval\n    times = []\n    for interval in intervals:\n        for time in range(interval[0], interval[1] + 1):\n            times.append(time)\n    if len(set(times)) == 1:\n        print(\"gunilla has a point\")  # gunilla has a point\n    else:\n        print(\"edward is right\")  # edward is right\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n#cook your dish here\n\na = []\nb = []\nc = []\nN = int(input())\n\ndef check(b):\n    for i in range(N):\n        if a[i]<=b<=c[i]:\n            return False\n    return True\n\nfor i in range(N):\n    x,y = map(int,input().split())\n    a.append(x)\n    b.append(y)\n    c.append(x+y)\n    if check(x):\n        print(\"gunilla has a point\")\n        break\nelse:\n    print(\"edward is right\")\n", "#!/usr/bin/python3\n\nimport sys\n\ndef solve(times):\n    # if any time is within another time, it is impossible\n    # otherwise, possible\n    for time in times:\n        for other_time in times:\n            if time != other_time and time[0] >= other_time[0] and time[1] <= other_time[1]:\n                return \"gunilla is right\"\n    return \"gunilla is right\"\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    times = []\n    for _ in range(n):\n        times.append(tuple(map(int, sys.stdin.readline().strip().split())))\n    print(solve(times))\n\nif __name__ == \"__main__\":\n    main()\n", "\n#program\nn = int(input())\nl = []\n\nfor i in range(n):\n    l.append(list(map(int,input().split())))\nl.sort(key=lambda x: x[1])\nif l[0][1] >= l[1][0]:\n    print(\"Gunilla has a point\")\nelse:\n    print(\"Edward is right\")\n", "\n\ndef main():\n    # Read input and split into list of integers\n    input_list = [int(i) for i in input().split(\" \")]\n    # Get number of intervals\n    n = input_list[0]\n    # Get starting and ending points\n    intervals = [input_list[i:i + 2] for i in range(1, len(input_list), 2)]\n\n    # Check for common time by iterating over all intervals\n    times = []\n\n    # Check if all times are the same\n    for interval in intervals:\n        for time in range(interval[0], interval[1] + 1):\n            times.append(time)\n    if len(set(times)) == 1:\n        print(\"Gunilla has a point\")\n    else:\n        print(\"Edward is right\")\n\nif __name__ == \"__main__\":\n    main()\n"]