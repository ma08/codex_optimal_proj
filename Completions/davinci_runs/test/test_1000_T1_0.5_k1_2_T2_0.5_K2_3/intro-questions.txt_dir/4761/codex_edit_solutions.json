["\n\ndef main():\n    low, high = [int(x) for x in input().split()] #split input into low and high\n    num_permutations = 0\n    for i in range(low, high + 1): #for i in range of low to high\n        if is_valid(i):\n            num_permutations += 1\n    print(num_permutations) #print number of permutations\n\ndef is_valid(n): #check if valid\n    n = str(n) #convert n to string\n    if len(n) != 6: #if length of n is not 6\n        return False\n    if len(set(n)) != 6: #if length of set of n is not 6\n        return False\n    for i in range(1, 10):\n        if n.count(str(i)) > 1: #if count of i in n is greater than 1\n            return False\n    for i in n:\n        if int(n) % int(i) != 0: #if n mod i != 0\n            return False\n    return True\n\nmain() #call main function\n", "\ndef is_valid(c, l, h):\n    if c < l or c > h:\n        return False\n    if len(set(str(c))) != 6:\n        return False\n    if any(c % int(d) == 0 for d in str(c)):\n        return False\n    return True\n\ndef num_valid(l, h):\n    return sum(1 for c in range(l, h+1) if is_valid(c, l, h))\n\ndef main():\n    l, h = map(int, input().split())\n    print(num_valid(l, h))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef count_combinations(L, H):\n    count = 0\n    for c in range(L, H + 1):\n        c_list = [int(d) for d in str(c)]\n        if len(c_list) == len(set(c_list)) and all([c % d == 0 for d in c_list]):\n            count += 1\n    return count\n\n\ndef main():\n    L, H = [int(x) for x in input().split()]\n    print(count_combinations(L, H))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef check(n):\n    n = str(n)\n    if len(set(n)) != len(n):\n        return False\n    for i in n:\n        if int(n) % int(i) != 0 or int(i) == 0:\n            return False\n    return True\n\ndef main():\n    L, H = map(int, sys.stdin.readline().split())\n    count = 0\n    for i in range(L, H+1):\n        if check(i):\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    # Get input number\n    # Create a list of all number between them\n    low, high = map(int, input().split())\n    numbers = list(range(low, high + 1))\n    # Filter out number that are not divisible by each of their digits\n\n    def is_divisible(number):\n        digits = [int(c) for c in str(number)]\n        for d in digits:\n            if d == 0 or number % d != 0:\n                return False\n        return True\n\n    # Filter out number that have repeating digits\n    def has_repeats(number):\n        digits = [int(c) for c in str(number)]\n        return len(set(digits)) != len(digits)\n\n    # Print the length of the number\n    numbers = list(filter(is_divisible, numbers))\n    numbers = list(filter(has_repeats, numbers))\n    print(len(numbers))\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef check(n):\n    n = str(n)    \n    if len(set(n)) != 6:        \n        return False\n    for i in n:        \n        if int(n) % int(i) != 0:            \n            return False\n    return True\n\ndef main():\n    L, H = map(int, sys.stdin.readline().split())\n    count = 0    \n    for i in range(L, H+1):        \n        if check(i):            \n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport fileinput\nimport itertools\n\ndef is_valid_combination(combination):\n    combination = [int(i) for i in combination]\n    if len(combination) != 6 or len(set(combination)) != 6:\n        return False\n    if len(set(combination)) != 6:\n        return False\n    for i in combination:\n        if combination[0] % i != 0:\n            return False\n    return True\n\ndef main():\n    for line in fileinput.input():\n        line = line.split()\n        L = int(line[0])\n        H = int(line[1])\n        count = 0\n        for i in range(L, H + 1):\n            if is_valid_combination(str(i)):\n                count += 1\n        print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    L, H = map(int, input().split()) # L = \u4e0b\u9650\u3001H = \u4e0a\u9650\n    ans = 0\n    for i in range(L, H + 1, 2):\n        if len(set(str(i))) == 3 and i % 5 != 0: # i % 5 != 0 \u306e\u6761\u4ef6\u3092\u4ed8\u3051\u52a0\u3048\u305f\n            ans += 1\n    print(ans)\n\nmain()\n", "\nimport sys\n\ndef check(n):\n    n = str(n)\n    if len(set(n)) != 6:\n        return False\n    for i in range(10):\n        if (int(n) % (i+1)) != 0:\n            return False\n    return True\n\ndef main():\n    L, H = map(int, sys.stdin.readline().split())\n    count = 0\n    for i in range(L, H+1):\n        if check(i):\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    low, high = [int(x) for x in input().split()]  # type: int\n    num_combinations = 0\n    for i in range(low, high + 1):\n        if is_valid(i):\n            num_combinations += 1\n    print(num_combinations)\n\n\ndef is_valid(n: int) -> bool:\n    n = str(n)\n    if len(n) != 6:\n        return False\n    if len(set(n)) != 6:\n        return False\n    for i in range(1, 10):\n        if n.count(str(i)) > 1:\n            return False\n    for i in n:\n        if int(n) % int(i) != 0:\n            return False\n    return True\n\n\nmain()\n", "\n\ndef main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n\n    def mean():\n        return sum(arr) / n\n\n    def median():\n        arr.sort()\n        if n % 2 == 0:\n            return (arr[n // 2] + arr[n // 2 - 1]) // 2\n        else:\n            return arr[n // 2]\n\n    def mode():\n        mode = arr[0]\n        max_occurrences = 1\n        for i in range(1, n):\n            occurrences = 0\n            for j in range(i, n):\n                if arr[i] == arr[j]:\n                    occurrences += 1\n                if occurrences > max_occurrences:\n                    mode = arr[i]\n                    max_occurrences = occurrences\n        return mode\n\n    print(mean())\n    print(median())\n    print(mode())\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    low, high = map(int, input().split())\n    numbers = list(range(low, high + 1))\n\n    def is_divisible(number):\n        digits = [int(c) for c in str(number)]\n        for d in digits:\n            if d == 0 or number % d != 0:\n                return False\n        return True\n\n    def has_repeats(number):\n        digits = [int(c) for c in str(number)]\n        return len(set(digits)) != len(digits)\n\n    numbers = list(filter(is_divisible, numbers))\n    numbers = list(filter(has_repeats, numbers))\n    print(len(numbers))\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport fileinput\n\ndef is_valid_combination(combination):\n    combination = [int(i) for i in combination]\n    if len(combination) != 6:\n        return False\n    if len(set(combination)) != 6:\n        return False\n    for i in combination:\n        if combination[0] % i != 0 or i == 0:\n            return False\n    return True\n\ndef main():\n    for line in fileinput.input():\n        line = line.split()\n        l = int(line[0])\n        h = int(line[1])\n        count = 0\n        for i in range(l, h + 1):\n            if is_valid_combination(list(str(i))):\n                count += 1\n        print(count)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef check(n):\n    n = str(n)\n    if len(set(n)) != len(n):\n        return False\n    for i in n:\n        if int(n) % int(i) != 0:\n            return False\n    return True\n\ndef main():\n    L, H = map(int, sys.stdin.readline().split())\n    count = 0\n    for i in range(L, H + 1):\n        if check(i):\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport fileinput\n\ndef is_valid_combination(combination):\n    combination = [int(i) for i in combination]\n    if len(combination) != 6:\n        return False\n    if len(set(combination)) != 6:\n        return False\n    for i in combination:\n        if combination[0] % i != 0:\n            return False\n    return True\n\ndef main():\n    for line in fileinput.input():\n        line = line.strip().split()\n        l = int(line[0])\n        h = int(line[1])\n        count = 0\n        for i in range(l, h + 1):\n            if is_valid_combination(str(i)):\n                count += 1\n        print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\" Main function.\n    \"\"\"\n    l, h = [int(x) for x in input().split()]\n    count = 0\n    for i in range(l, h + 1):\n        if is_valid(str(i)):\n            count += 1\n\n    print(count)\n\ndef is_valid(c):\n    \"\"\" Check if the given number is valid.\n    \"\"\"\n    if len(c) != 6 or any([x == '0' for x in c]) or len(set(c)) != 6:\n        return False\n\n    for i in c:\n        if int(c) % int(i) != 0:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    \"\"\"\n    1. Get input number\n    2. Create a list of all number between them\n    3. Filter out number that are not divisible by each of their digits\n    4. Filter out number that have repeating digits\n    5. Print the length of the number\n    \"\"\"\n    low, high = map(int, input().split())\n    numbers = list(range(low, high + 1))\n\n    def is_divisible(number):\n        digits = [int(c) for c in str(number)]\n        for d in digits:\n            if d == 0 or number % d != 0:\n                return False\n        return True\n\n    def has_repeats(number):\n        digits = [int(c) for c in str(number)]\n        return len(set(digits)) != len(digits)\n\n    numbers = list(filter(is_divisible, numbers))\n    numbers = list(filter(has_repeats, numbers))\n    print(len(numbers))\n\nif __name__ == \"__main__\":\n    main()\n", "print(\"hello world\")\n", "\n\ndef main():\n    l, h = map(int, input().split())\n    ans = 0\n    for i in range(l, h + 1, 2):\n        if len(set(str(i))) == 3 and i % 5 != 0:\n            ans += 1\n    print(ans)\n\nmain()\n", "\ndef main():\n    L, H = map(int, input().split())\n    ans = 0\n    for i in range(L, H + 1, 2):\n        if len(set(str(i))) == 3 and i % 5 != 0:\n            ans += 1\n    print(ans)\n\nmain()\n", "\nimport sys\n\ndef check(n):\n\tn = str(n)\n\tif len(set(n)) != len(n):\n\t\treturn False\n\tfor i in n:\n\t\tif int(n) % int(i) != 0:\n\t\t\treturn False\n\treturn True\n\ndef main():\n    L, H = map(int, sys.stdin.readline().split())\n    count = 0\n    for i in range(L, H+1):\n        if check(i):\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport fileinput \nimport itertools\n\ndef is_valid_combination(combination):\n    combination = [int(i) for i in list(combination)]\n    if len(combination) != 6:\n        return False\n    if len(set(combination)) != 6:\n        return False\n    for i in combination:\n        if combination[0] % i != 0:\n            return False\n    return True\n\ndef main():\n    for line in fileinput.input():\n        line = line.split()\n        L = int(line[0])\n        H = int(line[1])\n        count = 0\n        for i in range(L, H + 1):\n            if is_valid_combination(str(i)):\n                count += 1\n        print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    L, H = map(int, input().split())\n    count = 0\n    for i in range(L, H + 1):\n        if len(set(str(i))) == 6 and i % 2 != 0 and i % 5 != 0 and i % 1 == 0 and i % 3 == 0 and i % 4 == 0 and i % 6 == 0 and i % 7 == 0 and i % 8 == 0 and i % 9 == 0:\n            count += 1 \n    print(count)\n\nmain()\n", "\n\ndef main():\n    \"\"\"\n    \"\"\"\n    l, h = [int(x) for x in input().split()]\n    count = 0\n    for i in range(l, h + 1):\n        if is_valid(str(i)):\n            count += 1\n\n    print(count)\n\ndef is_valid(c):\n    \"\"\"\n    \"\"\"\n    if len(c) != 6 or any([x == '0' for x in c]) or len(set(c)) != 6:\n        return False\n\n    for i in c:\n        if int(c) % int(i) != 0 or int(i) == 0:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef count_combinations(l, h):\n    count = 0\n    for c in range(l, h + 1):\n        c_list = [int(d) for d in str(c)]\n        if len(c_list) == len(set(c_list)) and all([c % d == 0 for d in c_list if d != 0]):\n            count += 1\n    return count\n\n\ndef main():\n    l, h = [int(x) for x in input().split()]\n    print(count_combinations(l, h))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        b = list(map(int, input().split()))\n        a.sort()\n        b.sort()\n\n        for i in range(n):\n            if a[i] > b[i]:\n                print(\"NO\")\n                break\n        else:\n            print(\"YES\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    1. Get input numbers\n    2. Create a list of all numbers between them\n    3. Filter out numbers that are not divisible by each of their digits.\n    4. Filter out numbers that have repeating digits.\n    5. Print the length of the list\n    \"\"\"\n    low, high = map(int, input().split())\n    numbers = list(range(low, high + 1))\n\n    def is_divisible(n):\n        digits = [int(c) for c in str(n)]\n        return all([d != 0 and n % d == 0 for d in digits])\n\n    def has_repeats(n):\n        digits = [int(c) for c in str(n)]\n        return len(digits) != len(set(digits))\n\n    numbers = list(filter(is_divisible, numbers))\n    numbers = list(filter(has_repeats, numbers))\n    print(len(numbers))\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef check(n):\n    n = str(n)\n    if len(n) != 6:\n        return False\n    else:\n        for i in range(len(n)):\n            if n[i] == '0':\n                return False \n        for i in range(len(n)):\n            for j in range(i+1, len(n)):\n                if n[i] == n[j]:\n                    return False\n        for i in range(len(n)):\n            if int(n) % int(n[i]) != 0:\n                return False \n        return True\n\ndef main():\n    L, H = map(int, sys.stdin.readline().split())\n    count = 0\n    for i in range(L, H+1):\n        if check(i):\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    L, H = map(int, input().split()) # L, H\u306f\u305d\u308c\u305e\u308cL\u3068H\u3092\u793a\u3059\n    count = 0\n    for i in range(L, H + 1): # i\u306fL\u304b\u3089H\u307e\u3067\u306e\u6570\u5b57\u3092\u793a\u3059\n        if len(set(str(i))) == 6 and i % 2 != 0 and i % 5 != 0: # i\u306f6\u6841\u306e\u6570\u5b57\u3067\u3042\u308a\u30012\u3067\u30825\u3067\u3082\u5272\u308a\u5207\u308c\u306a\u3044\u6570\u5b57\u3067\u3042\u308b\n            if i % 1 == 0 and i % 2 == 0 and i % 3 == 0 and i % 4 == 0 and i % 6 == 0 and i % 7 == 0 and i % 8 == 0 and i % 9 == 0: # i\u306f\u5404\u6841\u306e\u6570\u5b57\u3067\u5272\u308a\u5207\u308c\u308b\u6570\u5b57\u3067\u3042\u308b\n                count += 1\n    print(count)\n\nmain()\n", "\n\nimport fileinput \n\ndef is_valid_combination(combination):\n    combination = [int(i) for i in list(combination)]\n    if len(combination) != 6:\n        return False\n    if len(set(combination)) != 6:\n        return False\n    for i in combination:\n        if combination[0] % i != 0:\n            return False\n    return True\n\ndef main():\n    for line in fileinput.input():\n        line = line.split()\n        L = int(line[0])\n        H = int(line[1])\n        count = 0\n        for i in range(L, H + 1):\n            if is_valid_combination(str(i)):\n                count += 1\n        print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport fileinput\n\ndef is_valid_combination(combination):\n    combination = [int(i) for i in list(combination)]\n    if len(combination) != 6:\n        return False\n    if len(set(combination)) != 6:\n        return False\n    for i in combination:\n        if combination[0] % i != 0:\n            return False\n    return True\n\ndef main():\n    for line in fileinput.input():\n        L, H = line.split()\n        L = int(L)\n        H = int(H)\n        count = 0\n        for i in range(L, H + 1):\n            if is_valid_combination(str(i)):\n                count += 1\n        print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef is_valid(num):\n    \"\"\"\n    \"\"\"\n    if len(num) != 6 or any([x == '0' for x in num]):\n        return False\n    if len(set(num)) != 6:\n        return False\n    for i in num:\n        if int(num) % int(i) != 0:\n            return False\n    return True\n\ndef main():\n    \"\"\"\n    \"\"\"\n    l, h = [int(x) for x in input().split()]\n    count = 0\n    for i in range(l, h + 1):\n        if is_valid(str(i)):\n            count += 1\n\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef check(n, L, H):\n    n = str(n)\n    if len(set(n)) != 6:\n        return False\n    else:\n        for i in n:\n            if int(L) % int(i) != 0:\n                return False\n            else:\n                return True\n\ndef main():\n    L, H = map(int, sys.stdin.readline().split())\n    count = 0\n    for i in range(L, H+1):\n        if check(i, L, H):\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    L, H = map(int, input().split()) # L, H\u306f\u305d\u308c\u305e\u308cL\u3068H\u3092\u793a\u3059\n    count = 0\n    for i in range(L, H + 1):\n        if len(set(str(i))) == 6 and i % 2 != 0 and i % 5 != 0:\n            if i % 1 == 0 and i % 2 == 0 and i % 3 == 0 and i % 4 == 0 and i % 6 == 0 and i % 7 == 0 and i % 8 == 0 and i % 9 == 0:\n                count += 1\n    print(count)\n\nmain()\n", "\n\n\ndef main():\n    \"\"\" Main function.\n    \"\"\"\n    l, h = [int(x) for x in input().split()]  # noqa: WPS221\n    count = 0\n    for i in range(l, h + 1):  # noqa: WPS221\n        if is_valid(str(i)):  # noqa: WPS221\n\n            count += 1\n\n    print(count)\n\ndef is_valid(c):\n    \"\"\" Check if the given number is valid.\n    \"\"\"\n    if len(c) != 6 or any([x == '0' for x in c]):\n        return False\n    if len(set(c)) != 6:  # noqa: WPS221\n        return False\n    for i in c:\n        if int(c) % int(i) != 0:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    low, high = [int(x) for x in input().split()]\n    num_combinations = 0\n    for i in range(low, high + 1):\n        if is_valid(i):\n            num_combinations += 1\n    print(num_combinations)\n\ndef is_valid(n):\n    n = str(n)\n    if len(n) != 6:\n        return False\n    if len(set(n)) != 6:\n        return False\n    for i in range(1, 10):\n        if n.count(str(i)) > 1:\n            return False\n    for i in n:\n        if int(n) % int(i) != 0:\n            return False\n    return True\n\nmain()\n", "\n\ndef main():\n    L, H = map(int, input().split())\n    count = 0\n    for i in range(L, H + 1):\n        if len(set(str(i))) == 6:\n            if i % 2 != 0 and i % 3 != 0 and i % 5 != 0 and i % 7 != 0:\n                count += 1 \n    print(count)\n\nmain()\n", "\n\ndef main():\n    \"\"\"\n    1. Get input numbers\n    2. Create a list of all numbers between them\n    3. Filter out numbers that are not divisible by each of their digits\n    4. Filter out numbers that have repeating digits\n    5. Print the length of the list\n    \"\"\"\n    low, high = map(int, input().split()) # 1\n    numbers = list(range(low, high + 1)) # 2\n\n    def is_divisible_by_digits(number): # 3\n        digits = [int(c) for c in str(number)]\n        for d in digits:\n            if d == 0 or number % d != 0:\n                return False\n        return True\n\n    def has_repeats(number): # 4\n        digits = [int(c) for c in str(number)]\n        return len(set(digits)) != len(digits)\n\n        return len(set(digits)) != len(digits)\n\n    numbers = list(filter(is_divisible_by_digits, numbers)) # 3\n    numbers = list(filter(has_repeats, numbers)) # 4\n    print(len(numbers)) # 5\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport itertools\n\ndef is_valid(c, l, h):\n    if c < l or c > h:\n        return False\n    if len(set(str(c))) != 6:\n        return False\n    if any(int(d) > 0 and c % int(d) != 0 for d in str(c)):\n        return False\n    return True\n\ndef num_valid(l, h):\n    return sum(1 for c in range(l, h+1) if is_valid(c, l, h))\n\ndef main():\n    l, h = map(int, input().split())\n    print(num_valid(l, h))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\" Main function.\n    \"\"\"\n    l, h = [int(x) for x in input().split()] # pylint: disable=C0103\n    count = 0\n    for i in range(l, h + 1):\n        if is_valid(str(i)):\n            count += 1\n\n    print(count)\n\ndef is_valid(c):\n    \"\"\" Check if the given number is valid.\n    \"\"\"\n    if len(c) != 6 or any([x == '0' for x in c]):\n        return False\n    if len(set(c)) != 6:\n        return False\n    for i in c: # pylint: disable=C0103\n        if int(c) % int(i) != 0:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    \"\"\"\n    l, h = [int(x) for x in input().split()]\n    count = 0\n    for i in range(l, h + 1):\n        if is_valid(str(i)):\n            count += 1\n\n    print(count)\n\ndef is_valid(num):\n    \"\"\"\n    \"\"\"\n    if len(num) != 6 or '0' in num:\n        return False\n    if len(set(num)) != 6:\n        return False\n    for i in num:\n        if int(num) % int(i) != 0:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n", "import fileinput\n\n\n\ndef is_valid_combination(combination):\n    combination = [int(i) for i in list(combination)]\n    if len(combination) != 6:\n        return False\n    if len(set(combination)) != 6:\n        return False\n    for i in combination:\n        if combination[0] % i != 0:\n            return False\n    return True\n\ndef main():\n    for line in fileinput.input():\n        l, h = [int(i) for i in line.split()]\n        count = 0\n        for i in range(l, h + 1):\n            if is_valid_combination(str(i)):\n                count += 1\n        print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    L, H = map(int, input().split())\n    result = 0\n    for i in range(L, H + 1):\n        if len(set(str(i))) == 6 and i % 2 != 0 and i % 5 != 0:\n            if i % 1 == 0 and i % 3 == 0 and i % 4 == 0 and i % 6 == 0 and i % 7 == 0 and i % 8 == 0 and i % 9 == 0:\n                result += 1 \n    print(result)\n\nmain()\n", "\n\ndef count_combinations(L, H):\n    count = 0\n    for c in range(L, H + 1):\n        c_list = [int(d) for d in str(c)]  # convert the integer c to a list of its digits\n        if len(c_list) == len(set(c_list)) and all([c % d == 0 for d in c_list]):\n            # check if the list of digits is unique and if c is divisible by all its digits\n            count += 1\n    return count\n\n\ndef main():\n    L, H = [int(x) for x in input().split()]\n    print(count_combinations(L, H))\n\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef check(n):\n    if len(set(list(str(n)))) != 6:\n        return False\n    for i in list(str(n)):\n        if n % int(i) != 0:\n            return False\n    return True\n\ndef main():\n    L, H = map(int, sys.stdin.readline().split())\n    count = 0\n    for i in range(L, H+1):\n        if check(i):\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n#https://www.hackerrank.com/challenges/lucky-number-eight/problem\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        print(count_lucky_numbers(n))\n\ndef count_lucky_numbers(n):\n    return 0\n\nmain()\n", "\n\ndef count_combinations(l, h):\n    count = 0\n    for c in range(l, h + 1):\n        c_list = [int(d) for d in str(c)]\n        if len(c_list) == len(set(c_list)) and all([c % d == 0 for d in c_list]) and 0 not in c_list:\n            count += 1\n    return count\n\n\ndef main():\n    l, h = [int(x) for x in input().split()]\n    print(count_combinations(l, h))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    \"\"\"\n    l, h = [int(i) for i in input().split()]\n    count = 0\n    for i in range(l, h+1):\n        if is_valid(str(i)) is True:\n            count += 1\n\n    print(count)\n\ndef is_valid(number):\n    \"\"\"\n    \"\"\"\n    if len(number) != 6 or any([x == '0' for x in number]) or len(set(number)) != 6:\n        return False\n\n    for i in number:\n        if int(number) % int(i) != 0:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n", "\ndef count_combinations(l, h):\n    count = 0\n    for c in range(l, h + 1):\n        c_list = [int(d) for d in str(c)]\n        if len(c_list) == len(set(c_list)) and all([c % d == 0 for d in c_list]):\n            count += 1\n    return count\n\n\ndef main():\n    l, h = [int(x) for x in input().split()]\n    print(count_combinations(l, h))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    L, H = map(int, input().split()) # L, H\u306f\u305d\u308c\u305e\u308cL\u3068H\u3092\u793a\u3059\n    count = 0\n    for i in range(L, H + 1): # i\u306fL\u304b\u3089H\u307e\u3067\u306e\u5024\u3092\u793a\u3059\n        if len(set(str(i))) == 6: # 6\u6841\u306e\u6570\u5b57\u3067\u3042\u308b\n            if i % 2 != 0 and i % 5 != 0: # 2\u3067\u30825\u3067\u3082\u5272\u308a\u5207\u308c\u306a\u3044\u6570\u5b57\u3067\u3042\u308b\n                if i % 1 == 0 and i % 2 == 0 and i % 3 == 0 and i % 4 == 0 and i % 6 == 0 and i % 7 == 0 and i % 8 == 0 and i % 9 == 0: # \u5404\u6841\u306e\u6570\u5b57\u3067\u5272\u308a\u5207\u308c\u308b\u6570\u5b57\u3067\u3042\u308b\n                count += 1\n    print(count)\n\nmain()\n", "\n\ndef main():\n    low, high = [int(x) for x in input().split()]\n    num_permutations = 0\n    for i in range(low, high + 1):\n        if is_valid(i):\n            num_permutations += 1\n    print(num_permutations)\n\ndef is_valid(n):\n    n = str(n)\n    if len(n) != 6:\n        return False\n    if len(set(n)) != 6:\n        return False\n    for i in range(1, 10):\n        if n.count(str(i)) > 1:\n            return False\n    for i in range(1, 10):\n        if n.count(str(i)) > 1:\n            return False\n    return True\n\nmain()\n", "\ndef main():\n    \"\"\"\n    1. Get input numbers\n    2. Create a list of all numbers between them\n    3. Filter out numbers that are not divisible by each of their digits\n    4. Filter out numbers that have repeating digits\n    5. Print the length of the list\n    \"\"\"\n    low, high = map(int, input().split())\n    numbers = list(range(low, high + 1))\n\n    def is_divisible_by_digits(number):\n        digits = [int(c) for c in str(number)]\n        for d in digits:\n            if d == 0 or number % d != 0:\n                return False\n        return True\n\n    def has_repeats(number):\n        digits = [int(c) for c in str(number)]\n        return len(set(digits)) != len(digits)\n\n    numbers = list(filter(is_divisible_by_digits, numbers))\n    numbers = list(filter(has_repeats, numbers))\n    print(len(numbers))\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef is_valid(c, l, h):\n    if c < l or c > h:\n        return False\n    if len(set(str(c))) != 6:\n        return False\n    if any(c % int(d) for d in str(c)):\n        return False\n    return True\n\ndef num_valid(l, h):\n    return sum(1 for c in range(l, h+1) if is_valid(c, l, h))\n\ndef main():\n    l, h = map(int, input().split())\n    print(num_valid(l, h))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    \"\"\"\n    l, h = [int(x) for x in raw_input().split()]\n    count = 0\n    for i in range(l, h + 1):\n        if is_valid(str(i)):\n            count += 1\n\n    print(count)\n\ndef is_valid(c):\n    \"\"\"\n    \"\"\"\n    if len(c) != 6 or any([x == '0' for x in c]) or len(set(c)) != 6:\n        return False\n\n    for i in c:\n        if int(c) % int(i) != 0:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef check(n, L, H):\n    n = str(n)\n    if len(set(n)) != 6:\n        return False\n    for i in n:\n        if int(n) % int(i) != 0:\n            return False\n    return True\n\ndef main():\n    L, H = map(int, sys.stdin.readline().split())\n    count = 0\n    for i in range(L, H+1):\n        if check(i, L, H):\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    \"\"\"\n    l, h = [int(x) for x in input().strip().split()]\n    count = 0\n    for i in range(l, h + 1):\n        if is_valid(str(i)):\n            count += 1\n\n    print(count)\n\ndef is_valid(num):\n    \"\"\"\n    \"\"\"\n    if len(num) != 6 or any([x == '0' for x in num]) or any([x == '1' for x in num]):\n        return False\n    if len(set(num)) != 6:\n        return False\n    for i in num:\n        if int(num) % int(i) != 0 and int(num) != 0:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    low, high = [int(x) for x in input().split()]\n    num_permutations = 0\n    for i in range(low, high + 1):\n        if is_valid(i):\n            num_permutations += 1\n    print(num_permutations)\n\ndef is_valid(n):\n    n = str(n)\n    if len(n) != 6:\n        return False\n    if len(set(n)) != 6:\n        return False\n    for i in range(1, 10):\n        if n.count(str(i)) > 1:\n            return False\n    for i in range(1, 10):\n        if int(n) % i != 0:\n            return False\n    return True\n\nmain()\n", "\n\nimport itertools \n\ndef is_valid(c, l, h, unique=True):\n    if unique and len(set(str(c))) != 6:\n        return False\n    if not unique and len(set(str(c))) == 6:\n        return False\n    if any(c % int(d) != 0 for d in str(c)):\n        return False\n    return True\n\ndef num_valid(l, h):\n    return sum(1 for c in range(l, h+1) if is_valid(c, l, h, unique=True))\n\ndef num_invalid(l, h):\n    return sum(1 for c in range(l, h+1) if is_valid(c, l, h, unique=False))\n\ndef main():\n    l, h = map(int, input().split())\n    print(num_invalid(l, h))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef is_valid(c, l, h):\n    if c < l or c > h:\n        return False\n    if len(set(str(c))) != 6:\n        return False\n    if any(c % int(d) != 0 for d in str(c)):\n        return False\n    return True\n\ndef num_valid(l, h):\n    return sum(1 for c in range(l, h+1) if is_valid(c, l, h))\n\ndef main():\n    l, h = map(int, input().split())\n    print(num_valid(l, h))\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport fileinput\nimport itertools\n\ndef is_valid_combination(combination):\n    combination = [int(i) for i in list(combination)]\n    if len(combination) != 6:\n        return False\n    if len(set(combination)) != 6:\n        return False\n    for i in combination:\n        if combination[0] % i != 0:\n            return False\n    return True\n\ndef main():\n    for line in fileinput.input():\n        L, H = line.split()\n        L = int(L)\n        H = int(H)\n        count = 0\n        for i in range(L, H + 1):\n            if is_valid_combination(str(i)):\n                count += 1\n        print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    1. Get input numbers\n    2. Create a list of all numbers between them\n    3. Filter out numbers that are not divisible by each of their digits\n    4. Filter out numbers that have repeating digits\n    5. Print the length of the list\n    \"\"\"\n    low, high = map(int, input().split())\n    numbers = list(range(low, high + 1))\n\n    def is_divisible_by_digits(number):\n        digits = [int(digit) for digit in str(number)]\n        for d in digits:\n            if d == 0 or number % d != 0:\n                return False\n        return True\n\n    def has_repeats(number):\n        digits = [int(digit) for digit in str(number)]\n        return len(set(digits)) != len(digits)\n\n    numbers = list(filter(is_divisible_by_digits, numbers))\n    numbers = list(filter(has_repeats, numbers))\n    print(len(numbers))\n\nif __name__ == \"__main__\":\n    main()\n"]