["\n\ndef solve(a, b, c, d):\n    if a == c and b == d:\n        return [\"%d + %d = %d + %d\" % (a, b, c, d), \"%d + %d = %d + %d\" % (c, d, a, b)]\n    elif a > c or (a == c and b > d):\n        return [\"%d - %d = %d - %d\" % (a, b, c, d), \"%d + %d = %d + %d\" % (c, d, a, b)]\n    elif a*b == c*d:\n        return [\"%d * %d = %d * %d\" % (a, b, c, d), \"%d * %d = %d * %d\" % (c, d, a, b)]\n    elif a*d == b*c:\n        return [\"%d / %d = %d / %d\" % (a, b, c, d), \"%d + %d = %d + %d\" % (c, d, a, b)]\n    return [\"problems ahead\"]\n\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    for ans in solve(a, b, c, d):\n        print(ans)\n\nif __name__ == \"__main__\":\n    main()\n", "from math import factorial\nfrom itertools import permutations\n\ndef is_valid(a, b, c, d):\n    if a * b == c + d:\n        return True\n    if a * b == c - d:\n        return True\n    if a * b == c * d:\n        return True\n    if a * b == c // d:\n        return True\n    if a + b == c * d:\n        return True\n    if a + b == c - d:\n        return True\n    if a + b == c + d:\n        return True\n    if a + b == c // d:\n        return True\n    if a - b == c * d:\n        return True\n    if a - b == c - d:\n        return True\n    if a - b == c + d:\n        return True\n    if a - b == c // d:\n        return True\n    if a / b == c * d:\n        return True\n    if a / b == c - d:\n        return True\n    if a / b == c + d:\n        return True\n    if a / b == c / d:\n        return True\n    return False\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    valid = []\n    for perm in permutations([a, b, c, d]):\n        if is_valid(*perm):\n            valid.append(perm)\n    if not valid:\n        print('problems ahead')\n    else:\n        for e in valid:\n            print(e)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\nlines = sys.stdin.readlines()\n\na, b, c, d = [int(x) for x in lines[0].split()]\n\nvalid = []\n\n# a + b = c + d\nif a + b == c + d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))\n\n# a - b = c - d\nif a - b == c - d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))\n\n# a * b = c * d\nif a * b == c * d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n\n# a / b = c / d\nif b != 0 and d != 0 and a / b == c / d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\n\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('no solution')\n", "\nimport sys\nlines = sys.stdin.readlines()\na, b, c, d = [int(x) for x in lines[0].split()]\nvalid = []\n\n# a + b = c + d\nif a + b == c + d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))\n\n# a - b = c - d\nif a - b == c - d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))\n# a * b = c * d\nif a * b == c * d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n# a / b = c / d\nif b != 0 and d != 0 and a / b == c / d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('problem ahead')\n", "\nimport sys\nlines = sys.stdin.readlines()\n\na, b, c, d = [int(x) for x in lines[0].split()]\n\nvalid = []\n\n# a + b = c + d\nif a + b == c + d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))\n\n# a - b = c - d\nif a - b == c - d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))\n\n# a * b = c * d\nif a * b == c * d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n\n# a / b = c / d\nif b != 0 and d != 0 and a / b == c / d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\n\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('no solution')\n", "\n\n# TODO: Make this faster?\n\nfrom itertools import permutations\n\na, b, c, d = map(int, input().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x / y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    if ops[p[0]](a, b) == ops[p[1]](c, d):\n        valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n\n\n# TODO: Make this faster?\n\nfrom itertools import permutations\n\na, b, c, d = map(int, input().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x / y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    if ops[p[0]](a, b) == ops[p[1]](c, d):\n        valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n", "\n\n\na,b,c,d = [int(x) for x in input().split()]\n\noperators = [\"+\",\"-\",\"*\",\"/\"]\n\nexpressions = [f\"{a} {i} {b} = {c} {j} {d}\" for i in operators for j in operators]\n\nexpressions = [x for x in expressions if eval(x.replace(\"=\",\"==\"))]\n\nif len(expressions) == 0:\n    print(\"problems ahead\")\nelse:\n    print(\"\\n\".join(sorted(expressions)))\n", "\n\n# The solution is pretty straightforward.\n# We use a list of operators, and then use a list comprehension to generate all possible expressions.\n# Then, we filter out the ones that are not valid.\n# Finally, we sort them alphabetically, and print them.\n\na,b,c,d = [int(x) for x in input().split()]\n\noperators = [\"+\",\"-\",\"*\",\"/\"]\n\nexpressions = [f\"{a} {i} {b} = {c} {j} {d}\" for i in operators for j in operators]\n\nexpressions = [x for x in expressions if eval(x.replace(\"=\",\"==\"))] # eval() is used to execute the string as a python expression\n\nif len(expressions) == 0:\n    print(\"problems ahead\")\nelse:\n    print(\"\\n\".join(sorted(expressions)))\n", "\n\nimport sys\n\n# print(sys.stdin.readline())\nsys.stdin = open(\"sample_input.txt\",\"r\")\n\na,b,c,d = map(int,input().split())\n\nif a*b == c*d:\n    print(str(a)+'*'+str(b)+'='+str(c)+'*'+str(d))\nif a+b == c+d:\n    print(str(a)+'+'+str(b)+'='+str(c)+'+'+str(d))\nif a-b == c-d:\n    print(str(a)+'-'+str(b)+'='+str(c)+'-'+str(d))\nif a*b == c+d:\n    print(str(a)+'*'+str(b)+'='+str(c)+'+'+str(d))\nif a+b == c*d:\n    print(str(a)+'+'+str(b)+'='+str(c)+'*'+str(d))\nif a-b == c+d:\n    print(str(a)+'-'+str(b)+'='+str(c)+'+'+str(d))\nif a-b == c*d:\n    print(str(a)+'-'+str(b)+'='+str(c)+'*'+str(d))\nif a*b == c-d:\n    print(str(a)+'*'+str(b)+'='+str(c)+'-'+str(d))\nif a/b == c/d and b!=0 and d!=0:\n    print(str(a)+'/'+str(b)+'='+str(c)+'/'+str(d))\nif a+b == c/d and d!=0:\n    print(str(a)+'+'+str(b)+'='+str(c)+'/'+str(d))\nif a-b == c/d and d!=0:\n    print(str(a)+'-'+str(b)+'='+str(c)+'/'+str(d))\nif a*b == c/d and d!=0:\n    print(str(a)+'*'+str(b)+'='+str(c)+'/'+str(d))\nif a/b == c+d and b!=0:\n    print(str(a)+'/'+str(b)+'='+str(c)+'+'+str(d))\nif a/b == c-d and b!=0:\n    print(str(a)+'/'+str(b)+'='+str(c)+'-'+str(d))\nif a+b == c-d:\n    print(str(a)+'+'+str(b)+'='+str(c)+'-'+str(d))\nif a/b == c*d and b!=0:\n    print(str(a)+'/'+str(b)+'='+str(c)+'*'+str(d))\n", "\n\nimport sys\nsys.stdin = open(\"sample_input.txt\",\"r\")\n\na,b,c,d = map(int,input().split())\n\nif a*b == c*d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' * '+str(d))\nif a+b == c+d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' + '+str(d))\nif a-b == c-d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' - '+str(d))\nif a*b == c+d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' + '+str(d))\nif a+b == c*d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' * '+str(d))\nif a-b == c+d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' + '+str(d))\nif a-b == c*d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' * '+str(d))\nif a*b == c-d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' - '+str(d))\nif a/b == c/d and b!=0 and d!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' / '+str(d))\nif a+b == c/d and d!=0:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' / '+str(d))\nif a-b == c/d and d!=0:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' / '+str(d))\nif a*b == c/d and d!=0:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' / '+str(d))\nif a/b == c+d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' + '+str(d))\nif a/b == c-d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' - '+str(d))\nif a+b == c-d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' - '+str(d))\nif a/b == c*d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' * '+str(d))\n", "\n#\n\ndef solve(a, b, c, d):\n    if a == c and b == d:\n        return [\"%d + %d = %d + %d\" % (a, b, c, d)]\n    elif a > c or (a == c and b > d):\n        return [\"%d - %d = %d - %d\" % (a, b, c, d)]\n    elif a * b == c * d:\n        return [\"%d * %d = %d * %d\" % (a, b, c, d)]\n    elif a * d == b * c:\n        return [\"%d / %d = %d / %d\" % (a, b, c, d)]\n    return [\"problems ahead\"]\n\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    for ans in solve(a, b, c, d):\n        print(ans)\n\nif __name__ == \"__main__\":\n    main()\n", "print('Hello, world!')\n", "\n\n# import sys\n# sys.stdin = open(\"sample_input.txt\",\"r\")\n\n# a,b,c,d = map(int,input().split())\n\n# if a*b == c*d:\n#     print(str(a)+' * '+str(b)+' = '+str(c)+' * '+str(d))\n# if a+b == c+d:\n#     print(str(a)+' + '+str(b)+' = '+str(c)+' + '+str(d))\n# if a-b == c-d:\n#     print(str(a)+' - '+str(b)+' = '+str(c)+' - '+str(d))\n# if a*b == c+d:\n#     print(str(a)+' * '+str(b)+' = '+str(c)+' + '+str(d))\n# if a+b == c*d:\n#     print(str(a)+' + '+str(b)+' = '+str(c)+' * '+str(d))\n# if a-b == c+d:\n#     print(str(a)+' - '+str(b)+' = '+str(c)+' + '+str(d))\n# if a-b == c*d:\n#     print(str(a)+' - '+str(b)+' = '+str(c)+' * '+str(d))\n# if a*b == c-d:\n#     print(str(a)+' * '+str(b)+' = '+str(c)+' - '+str(d))\n# if a/b == c/d and b!=0 and d!=0:\n#     print(str(a)+' / '+str(b)+' = '+str(c)+' / '+str(d))\n# if a+b == c/d and d!=0:\n#     print(str(a)+' + '+str(b)+' = '+str(c)+' / '+str(d))\n# if a-b == c/d and d!=0:\n#     print(str(a)+' - '+str(b)+' = '+str(c)+' / '+str(d))\n# if a*b == c/d and d!=0:\n#     print(str(a)+' * '+str(b)+' = '+str(c)+' / '+str(d))\n# if a/b == c+d and b!=0:\n#     print(str(a)+' / '+str(b)+' = '+str(c)+' + '+str(d))\n# if a/b == c-d and b!=0:\n#     print(str(a)+' / '+str(b)+' = '+str(c)+' - '+str(d))\n# if a+b == c-d:\n#     print(str(a)+' + '+str(b)+' = '+str(c)+' - '+str(d))\n# if a/b == c*d and b!=0:\n#     print(str(a)+' / '+str(b)+' = '+str(c)+' * '+str(d))\n", "\n\n#import sys\n#sys.stdin = open(\"sample_input.txt\",\"r\")\n# \uc774\uac70 \uc65c\uc548\ub428\n#a,b,c,d = map(int,input().split())\na,b,c,d = 10,2,4,5\n\nif a * b == c * d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' * '+str(d))\nif a + b == c + d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' + '+str(d))\nif a - b == c - d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' - '+str(d))\nif a * b == c + d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' + '+str(d))\nif a + b == c * d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' * '+str(d))\nif a - b == c + d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' + '+str(d))\nif a - b == c * d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' * '+str(d))\nif a * b == c - d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' - '+str(d))\nif a / b == c / d and b != 0 and d != 0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' / '+str(d))\nif a + b == c / d and d != 0:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' / '+str(d))\nif a - b == c / d and d != 0:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' / '+str(d))\nif a * b == c / d and d != 0:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' / '+str(d))\nif a / b == c + d and b != 0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' + '+str(d))\nif a / b == c - d and b != 0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' - '+str(d))\nif a + b == c - d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' - '+str(d))\nif a / b == c * d and b != 0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' * '+str(d))\n", "\ndef solve(a, b, c, d):\n    if a == c and b == d:\n        return [\"%d + %d = %d + %d\" % (a, b, c, d)]\n    elif a > c or (a == c and b > d):\n        return [\"%d - %d = %d - %d\" % (a, b, c, d)]\n    elif a*b == c*d:\n        return [\"%d * %d = %d * %d\" % (a, b, c, d)]\n    elif a*d == b*c:\n        return [\"%d / %d = %d / %d\" % (a, b, c, d)]\n    return [\"problems ahead\"]\n\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    for ans in solve(a, b, c, d):\n        print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n\n\na,b,c,d = [int(x) for x in input().split()]\n\noperators = [\"+\",\"-\",\"*\",\"/\"]\n\nexpressions = [f\"{a} {i} {b} = {c} {j} {d}\" for i in operators for j in operators]\n\nexpressions = [x for x in expressions if eval(x.replace(\"=\",\"==\")) != False]\n\nif len(expressions) == 0:\n    print(\"problems ahead\")\nelse:\n    print(\"\\n\".join(sorted(expressions)))\n", "from itertools import permutations\n\ndef is_valid(a, b, c, d, op1, op2):\n    if op1 == '*' and op2 == '+':\n        return a * b == c + d\n    if op1 == '*' and op2 == '-':\n        return a * b == c - d\n    if op1 == '*' and op2 == '/':\n        return a * b == c / d\n    if op1 == '+' and op2 == '*':\n        return a + b == c * d\n    if op1 == '+' and op2 == '-':\n        return a + b == c - d\n    if op1 == '+' and op2 == '/':\n        return a + b == c / d\n    if op1 == '-' and op2 == '*':\n        return a - b == c * d\n    if op1 == '-' and op2 == '+':\n        return a - b == c + d\n    if op1 == '-' and op2 == '/':\n        return a - b == c / d\n    if op1 == '/' and op2 == '*':\n        return a / b == c * d\n    if op1 == '/' and op2 == '+':\n        return a / b == c + d\n    if op1 == '/' and op2 == '-':\n        return a / b == c - d\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    ops = ['+', '-', '*', '/']\n    valid = []\n    for op1, op2 in permutations(ops, 2):\n        if is_valid(a, b, c, d, op1, op2):\n            valid.append(f'{a} {op1} {b} = {c} {op2} {d}')\n    if not valid:\n        print('no solution')\n    else:\n        for e in sorted(valid):\n            print(e)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\nlines = sys.stdin.readlines()\n\na, b, c, d = [int(x) for x in lines[0].split()]\n\nvalid = []\n\n# a + b = c + d\nif a + b == c + d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))\n\n# a - b = c - d\nif a - b == c - d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))\n\n# a * b = c * d\nif a * b == c * d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n\n# a / b = c / d\nif b != 0 and d != 0 and float(a) / b == float(c) / d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\n\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('problems ahead')\n", "\nimport sys\nlines = sys.stdin.readlines()\na, b, c, d = [int(x) for x in lines[0].split()]\nvalid = []\n\n# a + b = c + d\nif a + b == c + d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))\n# a - b = c - d\nif a - b == c - d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))\n# a * b = c * d\nif a * b == c * d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n# a / b = c / d\nif b != 0 and d != 0 and a / b == c / d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('no solution')\n", "\n\n# TODO: Make this faster, add more operations\n\nfrom itertools import permutations\n\na, b, c, d = map(int, input().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x / y,\n    '//': lambda x, y: x // y,\n    '%': lambda x, y: x % y,\n    '**': lambda x, y: x ** y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    if ops[p[0]](a, b) == ops[p[1]](c, d):\n        valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n", "\nfrom itertools import product\n\na,b,c,d = map(int,input().split())\n\nvalid = []\n\nfor p in product(['+','-','*','/'],repeat=2):\n    if eval(\"{0}{1}{2} == {3}{4}{5}\".format(a,p[0],b,c,p[1],d)):\n        valid.append(\"{0} {1} {2} = {3} {4} {5}\".format(a,p[0],b,c,p[1],d))\n\nvalid.sort()\n\nif valid:\n    for v in valid:\n        print(v)\n\nelse:\n    print(\"problems ahead\")\n", "\nimport itertools\n\na, b, c, d = map(int, input().split())\n\ndef check(a, b, c, d, op1, op2):\n    if op1 == '*':\n        if op2 == '*':\n            if a * b == c * d:\n                return True\n        elif op2 == '+':\n            if a * b == c + d:\n                return True\n        elif op2 == '-':\n            if a * b == c - d:\n                return True\n        elif op2 == '/':\n            if a * b == c / d:\n                return True\n    elif op1 == '+':\n        if op2 == '*':\n            if a + b == c * d:\n                return True\n        elif op2 == '+':\n            if a + b == c + d:\n                return True\n        elif op2 == '-':\n            if a + b == c - d:\n                return True\n        elif op2 == '//':\n            if a + b == c / d:\n                return True\n    elif op1 == '-':\n        if op2 == '*':\n            if a - b == c * d:\n                return True\n        elif op2 == '+':\n            if a - b == c + d:\n                return True\n        elif op2 == '-':\n            if a - b == c - d:\n                return True\n        elif op2 == '//':\n            if a - b == c / d:\n                return True\n    elif op1 == '/':\n        if op2 == '*':\n            if a / b == c * d:\n                return True\n        elif op2 == '+':\n            if a / b == c + d:\n                return True\n        elif op2 == '-':\n            if a / b == c - d:\n                return True\n        elif op2 == '//':\n            if a / b == c / d:\n                return True\n    return False\n\ndef main():\n    operators = ['*', '+', '-', '//']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n    if len(output) == 0:\n        print('problem ahead')\n    else:\n        for line in sorted(output):\n            print(line)\n\nif __name__ == '__main__':\n    main()\n", "from itertools import product\na,b,c,d = map(int,input().split())\nvalid = []\nfor p in product(['+','-','*','/'],repeat=2):\n    if eval(\"{}{}{} == {}{}{}\".format(a,p[0],b,c,p[1],d)):\n        valid.append(\"{} {} {} == {} {} {}\".format(a,p[0],b,c,p[1],d))\nvalid.sort()\nif valid:\n    for v in valid:\n        print(v)\nelse:\n    print(\"problems ahead\")\n", "\nimport sys\n\nlines = sys.stdin.readlines()\n\na, b, c, d = [int(x) for x in lines[0].split()]\n\nvalid = []\n\n# a + b = c + d\nif a + b == c + d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))\n\n# a - b = c - d\nif a - b == c - d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))\n\n# a * b = c * d\nif a * b == c * d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n\n# a / b = c / d\nif b != 0 and d != 0 and a / b == c / d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\n\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('problem')\n", "import itertools\n\ndef check(a, b, c, d, op1, op2):\n    if op1 == '*' and op2 == '*':\n        return a * b == c * d\n    elif op1 == '*' and op2 == '+':\n        return a * b == c + d\n    elif op1 == '*' and op2 == '-':\n        return a * b == c - d\n    elif op1 == '*' and op2 == '/':\n        return a * b == c / d\n    elif op1 == '+' and op2 == '*':\n        return a + b == c * d\n    elif op1 == '+' and op2 == '+':\n        return a + b == c + d\n    elif op1 == '+' and op2 == '-':\n        return a + b == c - d\n    elif op1 == '+' and op2 == '/':\n        return a + b == c / d\n    elif op1 == '-' and op2 == '*':\n        return a - b == c * d\n    elif op1 == '-' and op2 == '+':\n        return a - b == c + d\n    elif op1 == '-' and op2 == '-':\n        return a - b == c - d\n    elif op1 == '-' and op2 == '/':\n        return a - b == c / d\n    elif op1 == '/' and op2 == '*':\n        return a / b == c * d\n    elif op1 == '/' and op2 == '+':\n        return a / b == c + d\n    elif op1 == '/' and op2 == '-':\n        return a / b == c - d\n    elif op1 == '/' and op2 == '/':\n        return a / b == c / d\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    operators = ['*', '+', '-', '/']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n    if len(output) == 0:\n        print('problems ahead')\n    else:\n        for line in sorted(output):\n            print(line)\n\nif __name__ == '__main__':\n    main()\n", "\nfrom itertools import permutations\n\ndef is_valid(a, b, c, d, op1, op2):\n    if op1 == '*' and op2 == '+':\n        return a * b == c + d\n    if op1 == '*' and op2 == '-':\n        return a * b == c - d\n    if op1 == '*' and op2 == '/':\n        return a * b == c / d\n    if op1 == '+' and op2 == '*':\n        return a + b == c * d\n    if op1 == '+' and op2 == '-':\n        return a + b == c - d\n    if op1 == '+' and op2 == '/':\n        return a + b == c / d\n    if op1 == '-' and op2 == '*':\n        return a - b == c * d\n    if op1 == '-' and op2 == '+':\n        return a - b == c + d\n    if op1 == '-' and op2 == '/':\n        return a - b == c / d\n    if op1 == '/' and op2 == '*':\n        return a / b == c * d\n    if op1 == '/' and op2 == '+':\n        return a / b == c + d\n    if op1 == '/' and op2 == '-':\n        return a / b == c - d\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    ops = ['+', '-', '*', '/']\n    valid = []\n    for op1, op2 in permutations(ops, 2):\n        if is_valid(a, b, c, d, op1, op2):\n            valid.append(f'{a} {op1} {b} = {c} {op2} {d}')\n    if not valid:\n        print('no solution')\n    else:\n        for e in sorted(valid):\n            print(e)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# TODO: Make this faster, add more operations, fix syntax errors\nfrom itertools import permutations\n\na, b, c, d = map(int, input().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x / y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    if ops[p[0]](a, b) == ops[p[1]](c, d):\n        valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n", "\nimport itertools\n\na, b, c, d = map(int, input().split())\n\ndef check(a, b, c, d, op1, op2):\n    if op1 == '*':\n        if op2 == '*':\n            if a * b == c * d:\n                return True\n        elif op2 == '+':\n            if a * b == c + d:\n                return True\n        elif op2 == '-':\n            if a * b == c - d:\n                return True\n        elif op2 == '/':\n            if a * b == c / d and d != 0:\n                return True\n    elif op1 == '+':\n        if op2 == '*':\n            if a + b == c * d:\n                return True\n        elif op2 == '+':\n            if a + b == c + d:\n                return True\n        elif op2 == '-':\n            if a + b == c - d:\n                return True\n        elif op2 == '/':\n            if a + b == c / d and d != 0:\n                return True\n    elif op1 == '-':\n        if op2 == '*':\n            if a - b == c * d:\n                return True\n        elif op2 == '+':\n            if a - b == c + d:\n                return True\n        elif op2 == '-':\n            if a - b == c - d:\n                return True\n        elif op2 == '/':\n            if a - b == c / d and d != 0:\n                return True\n    elif op1 == '/':\n        if op2 == '*':\n            if a / b == c * d:\n                return True\n        elif op2 == '+':\n            if a / b == c + d:\n                return True\n        elif op2 == '-':\n            if a / b == c - d:\n                return True\n        elif op2 == '/':\n            if a / b == c / d and d != 0:\n                return True\n    return False\n\ndef main():\n    operators = ['*', '+', '-', '/']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n    if len(output) == 0:\n        print('No solution')\n    else:\n        for line in sorted(output):\n            print(line)\n\nif __name__ == '__main__':\n    main()\n", "from itertools import product\n\na, b, c, d = map(int, input().split())\n\nvalid = []\n\nfor p in product(['+', '-', '*', '/'], repeat=2):\n    if eval(\"{}{}{} == {}{}{}\".format(a, p[0], b, c, p[1], d)):\n        valid.append(\"{} {} {} = {} {} {}\".format(a, p[0], b, c, p[1], d))\n\nvalid.sort()\n\nif valid:\n    print(\"\\n\".join(valid))\n\nelse:\n    print(\"problems ahead\")\n", "\nimport sys\nsys.stdin = open(\"sample_input.txt\",\"r\")\na,b,c,d = map(int,input().split())\nif a*b == c*d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' * '+str(d))\nif a+b == c+d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' + '+str(d))\nif a-b == c-d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' - '+str(d))\nif a*b == c+d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' + '+str(d))\nif a+b == c*d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' * '+str(d))\nif a-b == c+d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' + '+str(d))\nif a-b == c*d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' * '+str(d))\nif a*b == c-d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' - '+str(d))\nif a/b == c/d and b!=0 and d!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' / '+str(d))\nif a+b == c/d and d!=0:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' / '+str(d))\nif a-b == c/d and d!=0:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' / '+str(d))\nif a*b == c/d and d!=0:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' / '+str(d))\nif a/b == c+d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' + '+str(d))\nif a/b == c-d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' - '+str(d))\nif a+b == c-d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' - '+str(d))\nif a/b == c*d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' * '+str(d))\n", "\n\n# TODO: Make this faster.\n\nfrom itertools import permutations\n\na, b, c, d = map(int, input().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x // y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    if ops[p[0]](a, b) == ops[p[1]](c, d):\n        valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' == ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n", "\n# \n\ndef solve(a, b, c, d):\n    if a == c and b == d:\n        return [\"%d + %d = %d + %d\" % (a, b, c, d)]\n    elif a > c or (a == c and b > d):\n        return [\"%d - %d = %d - %d\" % (a, b, c, d)]\n    elif a*b == c*d:\n        return [\"%d * %d = %d * %d\" % (a, b, c, d)]\n    elif a*d == b*c:\n        return [\"%d / %d = %d / %d\" % (a, b, c, d)]\n    return [\"problems ahead\"]\n\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    for ans in solve(a, b, c, d):\n        print(ans)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nsys.stdin = open(\"sample_input.txt\",\"r\")\na,b,c,d = map(int,input().split())\n\nif a*b == c*d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' * '+str(d))\nif a+b == c+d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' + '+str(d))\nif a-b == c-d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' - '+str(d))\nif a*b == c+d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' + '+str(d))\nif a+b == c*d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' * '+str(d))\nif a-b == c+d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' + '+str(d))\nif a-b == c*d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' * '+str(d))\nif a*b == c-d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' - '+str(d))\nif a/b == c/d and b!=0 and d!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' / '+str(d))\nif a+b == c/d and d!=0:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' / '+str(d))\nif a-b == c/d and d!=0:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' / '+str(d))\nif a*b == c/d and d!=0:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' / '+str(d))\nif a/b == c+d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' + '+str(d))\nif a/b == c-d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' - '+str(d))\nif a+b == c-d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' - '+str(d))\nif a/b == c*d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' * '+str(d))\n", "import sys\n\nlines = sys.stdin.readlines()\n\na, b, c, d = [int(x) for x in lines[0].split()]\n\nvalid = []\n\n# a + b = c + d\nif a + b == c + d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))\n\n# a - b = c - d\nif a - b == c - d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))\n\n# a * b = c * d\nif a * b == c * d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n\n# a / b = c / d\nif b != 0 and d != 0 and a / b == c / d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\n\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('problems ahead')\n", "\nimport sys\n\nlines = sys.stdin.readlines()\n\na, b, c, d = [int(x) for x in lines[0].split()]\n\nvalid = []\n\n# a + b = c + d\nif a + b == c + d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))\n\n# a - b = c - d\nif a - b == c - d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))\n\n# a * b = c * d\nif a * b == c * d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n\n# a / b = c / d\nif b != 0 and d != 0 and a / b == c / d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\n\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('problem ahead')\n", "import itertools\n\ndef check(a, b, c, d, op1, op2):\n    if op1 == '*':\n        if op2 == '*':\n            if a * b == c * d:\n                return True\n        elif op2 == '+':\n            if a * b == c + d:\n                return True\n        elif op2 == '-':\n            if a * b == c - d:\n                return True\n        elif op2 == '/':\n            if a * b == c / d:\n                return True\n    elif op1 == '+':\n        if op2 == '*':\n            if a + b == c * d:\n                return True\n        elif op2 == '+':\n            if a + b == c + d:\n                return True\n        elif op2 == '-':\n            if a + b == c - d:\n                return True\n        elif op2 == '/':\n            if a + b == c / d:\n                return True\n    elif op1 == '-':\n        if op2 == '*':\n            if a - b == c * d:\n                return True\n        elif op2 == '+':\n            if a - b == c + d:\n                return True\n        elif op2 == '-':\n            if a - b == c - d:\n                return True\n        elif op2 == '/':\n            if a - b == c / d:\n                return True\n    elif op1 == '/':\n        if op2 == '*':\n            if a / b == c * d:\n                return True\n        elif op2 == '+':\n            if a / b == c + d:\n                return True\n        elif op2 == '-':\n            if a / b == c - d:\n                return True\n        elif op2 == '/':\n            if a / b == c / d:\n                return True\n    return False\n\ndef main():\n    a, b, c, d = map(int, input().split())  # noqa\n    operators = ['*', '+', '-', '/']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))  # noqa\n    if len(output) == 0:\n        print('problems ahead')\n    else:\n        for line in sorted(output):\n            print(line)\n\nif __name__ == '__main__':\n    main()\n", "\n# TODO: Make this faster, add more operations\n\nfrom itertools import permutations\n\na, b, c, d = map(int, input().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x / y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    if ops[p[0]](a, b) == ops[p[1]](c, d):\n        valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n", "import itertools\n\na, b, c, d = map(int, input().split())\n\ndef check(a, b, c, d, op1, op2):\n    if op1 == '*':\n        if op2 == '*':\n            if a * b == c * d:\n                return True\n        elif op2 == '+':\n            if a * b == c + d:\n                return True\n        elif op2 == '-':\n            if a * b == c - d:\n                return True\n        elif op2 == '/':\n            if a * b == c / d:\n                return True\n    elif op1 == '+':\n        if op2 == '*':\n            if a + b == c * d:\n                return True\n        elif op2 == '+':\n            if a + b == c + d:\n                return True\n        elif op2 == '-':\n            if a + b == c - d:\n                return True\n        elif op2 == '/':\n            if a + b == c / d:\n                return True\n    elif op1 == '-':\n        if op2 == '*':\n            if a - b == c * d:\n                return True\n        elif op2 == '+':\n            if a - b == c + d:\n                return True\n        elif op2 == '-':\n            if a - b == c - d:\n                return True\n        elif op2 == '/':\n            if a - b == c / d:\n                return True\n    elif op1 == '/':\n        if op2 == '*':\n            if a / b == c * d:\n                return True\n        elif op2 == '+':\n            if a / b == c + d:\n                return True\n        elif op2 == '-':\n            if a / b == c - d:\n                return True\n        elif op2 == '/':\n            if a / b == c / d:\n                return True\n    return False\n\ndef main():\n    operators = ['*', '+', '-', '/']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n    if len(output) == 0:\n        print('problem ahead')\n    else:\n        for line in sorted(output):\n            print(line)\n\nif __name__ == '__main__':\n    main()\n", "from itertools import product\na,b,c,d = map(int,input().split())\nvalid = []\nfor p in product(['+','-','*','/'],repeat=2):\n    if eval(\"{0}{1}{2} == {3}{4}{5}\".format(a,p[0],b,c,p[1],d)):\n        valid.append(\"{0} {1} {2} = {3} {4} {5}\".format(a,p[0],b,c,p[1],d))\nvalid.sort()\nif valid:\n    for v in valid:\n        print(v)\nelse:\n    print(\"problems ahead\")\n", "import itertools\n\ndef check(a, b, c, d, op1, op2):\n    if op1 == '*':\n        if op2 == '*':\n            if a * b == c * d:\n                return True\n        elif op2 == '+':\n            if a * b == c + d:\n                return True\n        elif op2 == '-':\n            if a * b == c - d:\n                return True\n        elif op2 == '/':\n            if a * b == c // d:\n                return True\n    elif op1 == '+':\n        if op2 == '*':\n            if a + b == c * d:\n                return True\n        elif op2 == '+':\n            if a + b == c + d:\n                return True\n        elif op2 == '-':\n            if a + b == c - d:\n                return True\n        elif op2 == '/':\n            if a + b == c // d:\n                return True\n    elif op1 == '-':\n        if op2 == '*':\n            if a - b == c * d:\n                return True\n        elif op2 == '+':\n            if a - b == c + d:\n                return True\n        elif op2 == '-':\n            if a - b == c - d:\n                return True\n        elif op2 == '/':\n            if a - b == c // d:\n                return True\n    elif op1 == '/':\n        if op2 == '*':\n            if a / b == c * d:\n                return True\n        elif op2 == '+':\n            if a / b == c + d:\n                return True\n        elif op2 == '-':\n            if a / b == c - d:\n                return True\n        elif op2 == '/':\n            if a / b == c // d:\n                return True\n    return False\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    operators = ['*', '+', '-', '/']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n    if len(output) == 0:\n        print('problems ahead')\n    else:\n        for line in sorted(output):\n            print(line)\n\nif __name__ == '__main__':\n    main()\n", "\nfrom itertools import product\na,b,c,d = map(int,input().split())\nvalid = []\nfor p in product(['+','-','*','/'],repeat=2):\n    if eval(f\"{a}{p[0]}{b} == {c}{p[1]}{d}\"):\n        valid.append(f\"{a} {p[0]} {b} = {c} {p[1]} {d}\")\nvalid.sort()\nif valid:\n    for v in valid:\n        print(v)\nelse:\n    print(\"problems ahead\")\n", "\ndef solve(a, b, c, d):\n    if a == c and b == d:\n        return [\"%d+%d=%d+%d\" % (a, b, c, d)]\n    elif a > c or (a == c and b > d):\n        return [\"%d-%d=%d-%d\" % (a, b, c, d)]\n    elif a*b == c*d:\n        return [\"%d*%d=%d*%d\" % (a, b, c, d)]\n    elif a*d == b*c:\n        return [\"%d/%d=%d/%d\" % (a, b, c, d)]\n    return [\"problems ahead\"]\n\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    for ans in solve(a, b, c, d):\n        print(ans)\n\nif __name__ == \"__main__\":\n    main()\n", "\n#\n\n\ndef solve(a, b, c, d):\n    if a == c and b == d:\n        return [\"%d + %d = %d + %d\" % (a, b, c, d)]\n    elif a > c or (a == c and b > d):\n        return [\"%d - %d = %d - %d\" % (a, b, c, d)]\n    elif a*b == c*d:\n        return [\"%d * %d = %d * %d\" % (a, b, c, d)]\n    elif a*d == b*c:\n        return [\"%d / %d = %d / %d\" % (a, b, c, d)]\n    return [\"problems ahead\"]\n\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    for ans in solve(a, b, c, d):\n        print(ans)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\nlines = sys.stdin.readlines()\n\na, b, c, d = [int(x) for x in lines[0].split()]\n\nvalid = []\n\n# a + b = c + d\nif a + b == c + d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))\n\n# a - b = c - d\nif a - b == c - d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))\n\n# a * b = c * d\nif a * b == c * d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n\n# a / b = c / d\nif b != 0 and d != 0 and a / float(b) == c / float(d):\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\n\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('problems ahead')\n", "\nfrom itertools import product\n\na,b,c,d = map(int,input().split())\n\nvalid = []\n\nfor p in product(['+','-','*','/'],repeat=2):\n    if eval(str(a)+p[0]+str(b) == str(c)+p[1]+str(d)):\n        valid.append(str(a)+\" \"+p[0]+\" \"+str(b)+\" = \"+str(c)+\" \"+p[1]+\" \"+str(d))\n\nvalid.sort()\n\nif valid:\n    for v in valid:\n        print(v)\n\nelse:\n    print(\"problems ahead\")\n", "\n\n# The solution is pretty straightforward.\n# We use a list of operators, and then use a list comprehension to generate all possible expressions.\n# Then, we filter out the ones that are not valid.\n# Finally, we sort them alphabetically, and print them.\n\na,b,c,d = [int(x) for x in input().split()]\n\noperators = [\"+\",\"-\",\"*\",\"/\"]\n\nexpressions = [\"{} {} {} = {} {} {}\".format(a,i,b,c,j,d) for i in operators for j in operators]\n\nexpressions = [x for x in expressions if eval(x.replace(\"=\",\"==\"))]\n\nif len(expressions) == 0:\n    print(\"problems ahead\")\nelse:\n    print(\"\\n\".join(sorted(expressions)))\n", "from math import factorial\nfrom itertools import permutations\n\ndef is_valid(a, b, c, d):\n    if a * b == c + d:\n        return True\n    if a * b == c - d:\n        return True\n    if a * b == c * d:\n        return True\n    if a * b == c // d:\n        return True\n    if a + b == c * d:\n        return True\n    if a + b == c - d:\n        return True\n    if a + b == c + d:\n        return True\n    if a + b == c // d:\n        return True\n    if a - b == c * d:\n        return True\n    if a - b == c - d:\n        return True\n    if a - b == c + d:\n        return True\n    if a - b == c // d:\n        return True\n    if a // b == c * d:\n        return True\n    if a // b == c - d:\n        return True\n    if a // b == c + d:\n        return True\n    if a // b == c // d:\n        return True\n    return False\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    if a * b == c + d:\n        print(a, b, c, d)\n    if a * b == c - d:\n        print(a, b, c, d)\n    if a * b == c * d:\n        print(a, b, c, d)\n    if a * b == c // d:\n        print(a, b, c, d)\n    if a + b == c * d:\n        print(a, b, c, d)\n    if a + b == c - d:\n        print(a, b, c, d)\n    if a + b == c + d:\n        print(a, b, c, d)\n    if a + b == c // d:\n        print(a, b, c, d)\n    if a - b == c * d:\n        print(a, b, c, d)\n    if a - b == c - d:\n        print(a, b, c, d)\n    if a - b == c + d:\n        print(a, b, c, d)\n    if a - b == c // d:\n        print(a, b, c, d)\n    if a // b == c * d:\n        print(a, b, c, d)\n    if a // b == c - d:\n        print(a, b, c, d)\n    if a // b == c + d:\n        print(a, b, c, d)\n    if a // b == c // d:\n        print(a, b, c, d)\n    print('problems ahead')\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys,math\nsys.stdin = open(\"input.txt\",\"r\")\n\na,b,c,d = map(float,input().split())\n\nif a+b == c+d or a-b == c-d or a*b == c*d or a*b == c+d or a+b == c*d or a-b == c+d or a-b == c*d or a*b == c-d or a/b == c/d and b!=0 and d!=0 or a+b == c/d and d!=0 or a-b == c/d and d!=0 or a*b == c/d and d!=0 or a/b == c+d and b!=0 or a/b == c-d and b!=0 or a+b == c-d or a/b == c*d and b!=0:\n    print('YES')\nelse:\n    print('NO')\n", "\n\n\n\na,b,c,d = [int(x) for x in input().split()]\n\noperators = [\"+\",\"-\",\"*\",\"/\"]\n\nexpressions = [f\"{a} {i} {b} = {c} {j} {d}\" for i in operators for j in operators]\n\nexpressions = [x for x in expressions if eval(x.replace(\"=\",\"==\")) == True]\n\nif len(expressions) == 0:\n    print(\"problems ahead\")\nelse:\n    print(\"\\n\".join(sorted(expressions)))\n", "\n\n# TODO: Make this faster?\n\nfrom itertools import permutations\n\na, b, c, d = map(int, input().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x // y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    if ops[p[0]](a, b) == ops[p[1]](c, d):\n        valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n", "\ndef solve(a, b, c, d):\n    if a == c and b == d:\n        return [\"%d + %d = %d + %d\" % (a, b, c, d), \"%d + %d = %d + %d\" % (c, d, a, b)]\n    elif a > c or (a == c and b > d):\n        return [\"%d - %d = %d - %d\" % (a, b, c, d), \"%d + %d = %d + %d\" % (c, d, a, b)]\n    elif a*b == c*d:\n        return [\"%d * %d = %d * %d\" % (a, b, c, d), \"%d * %d = %d * %d\" % (c, d, a, b)]\n    elif a*d == b*c:\n        return [\"%d / %d = %d / %d\" % (a, b, c, d), \"%d + %d = %d + %d\" % (c, d, a, b)]\n    return [\"problems ahead\"]\n\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    for ans in solve(a, b, c, d):\n        print(ans)\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\nimport itertools\n\n\ndef check(a, b, c, d, op1, op2, eq):\n    if op1 == '*':\n        if op2 == '*':\n            if eq(a * b, c * d):\n                return True\n        elif op2 == '+':\n            if eq(a * b, c + d):\n                return True\n        elif op2 == '-':\n            if eq(a * b, c - d):\n                return True\n        elif op2 == '/':\n            if eq(a * b, c / d):\n                return True\n    elif op1 == '+':\n        if op2 == '*':\n            if eq(a + b, c * d):\n                return True\n        elif op2 == '+':\n            if eq(a + b, c + d):\n                return True\n        elif op2 == '-':\n            if eq(a + b, c - d):\n                return True\n        elif op2 == '/':\n            if eq(a + b, c / d):\n                return True\n    elif op1 == '-':\n        if op2 == '*':\n            if eq(a - b, c * d):\n                return True\n        elif op2 == '+':\n            if eq(a - b, c + d):\n                return True\n        elif op2 == '-':\n            if eq(a - b, c - d):\n                return True\n        elif op2 == '/':\n            if eq(a - b, c / d):\n                return True\n    elif op1 == '/':\n        if op2 == '*':\n            if eq(a / b, c * d):\n                return True\n        elif op2 == '+':\n            if eq(a / b, c + d):\n                return True\n        elif op2 == '-':\n            if eq(a / b, c - d):\n                return True\n        elif op2 == '/':\n            if eq(a / b, c / d):\n                return True\n    return False\n\ndef main():\n    operators = ['*', '+', '-', '/']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2, lambda x, y: x == y):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n    if len(output) == 0:\n        print('problem ahead')\n    else:\n        for line in output:\n            print(line.lstrip('0'))\n\nif __name__ == '__main__':\n    main()\n", "import itertools\n\na, b, c, d = map(int, input().split())\n\ndef check(a, b, c, d, op1, op2):\n    if op1 == '*':\n        if op2 == '*':\n            if a * b == c * d and a * b != 0:\n                return True\n        elif op2 == '+':\n            if a * b == c + d and a * b != 0:\n                return True\n        elif op2 == '-':\n            if a * b == c - d and a * b != 0:\n                return True\n        elif op2 == '/':\n            if a * b == c / d and a * b != 0:\n                return True\n    elif op1 == '+':\n        if op2 == '*':\n            if a + b == c * d and a + b != 0:\n                return True\n        elif op2 == '+':\n            if a + b == c + d and a + b != 0:\n                return True\n        elif op2 == '-':\n            if a + b == c - d and a + b != 0:\n                return True\n        elif op2 == '/':\n            if a + b == c / d and a + b != 0:\n                return True\n    elif op1 == '-':\n        if op2 == '*':\n            if a - b == c * d and a - b != 0:\n                return True\n        elif op2 == '+':\n            if a - b == c + d and a - b != 0:\n                return True\n        elif op2 == '-':\n            if a - b == c - d and a - b != 0:\n                return True\n        elif op2 == '/':\n            if a - b == c / d and a - b != 0:\n                return True\n    elif op1 == '/':\n        if op2 == '*':\n            if a / b == c * d and a / b != 0:\n                return True\n        elif op2 == '+':\n            if a / b == c + d and a / b != 0:\n                return True\n        elif op2 == '-':\n            if a / b == c - d and a / b != 0:\n                return True\n        elif op2 == '/':\n            if a / b == c / d and a / b != 0:\n                return True\n    return False\n\ndef main():\n    operators = ['*', '+', '-', '/']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n    if len(output) == 0:\n        print('No solution')\n    else:\n        for line in sorted(output):\n            print(line)\n\nif __name__ == '__main__':\n    main()\n", "from itertools import product\na,b,c,d = map(int,input().split())\nvalid = []\nfor p in product(['+','-','*','/'],repeat=2):\n    if eval(\"{}{}{} == {}{}{}\".format(a,p[0],b,c,p[1],d)):\n        valid.append(\"{} {} {} = {} {} {}\".format(a,p[0],b,c,p[1],d))\nvalid.sort()\nif valid:\n    for v in valid:\n        print(v)\nelse:\n    print(\"problems ahead\")\n", "\nimport sys\nsys.stdin = open(\"sample_input.txt\",\"r\")\n\na,b,c,d = map(int,input().split())\n\nif a*b == c*d:\n    print(str(a)+'*'+str(b)+'='+str(c)+'*'+str(d))\nif a+b == c+d:\n    print(str(a)+'+'+str(b)+'='+str(c)+'+'+str(d))\nif a-b == c-d:\n    print(str(a)+'-'+str(b)+'='+str(c)+'-'+str(d))\nif a*b == c+d and a!=0 and b!=0:\n    print(str(a)+'*'+str(b)+'='+str(c)+'+'+str(d))\nif a+b == c*d and c!=0 and d!=0:\n    print(str(a)+'+'+str(b)+'='+str(c)+'*'+str(d))\nif a-b == c+d and c!=0:\n    print(str(a)+'-'+str(b)+'='+str(c)+'+'+str(d))\nif a-b == c*d and c!=0 and d!=0:\n    print(str(a)+'-'+str(b)+'='+str(c)+'*'+str(d))\nif a*b == c-d and c!=0:\n    print(str(a)+'*'+str(b)+'='+str(c)+'-'+str(d))\nif a/b == c/d and b!=0 and d!=0:\n    print(str(a)+'/'+str(b)+'='+str(c)+'/'+str(d))\nif a+b == c/d and d!=0:\n    print(str(a)+'+'+str(b)+'='+str(c)+'/'+str(d))\nif a-b == c/d and d!=0:\n    print(str(a)+'-'+str(b)+'='+str(c)+'/'+str(d))\nif a*b == c/d and d!=0:\n    print(str(a)+'*'+str(b)+'='+str(c)+'/'+str(d))\nif a/b == c+d and b!=0:\n    print(str(a)+'/'+str(b)+'='+str(c)+'+'+str(d))\nif a/b == c-d and b!=0:\n    print(str(a)+'/'+str(b)+'='+str(c)+'-'+str(d))\nif a+b == c-d and c!=0:\n    print(str(a)+'+'+str(b)+'='+str(c)+'-'+str(d))\nif a/b == c*d and b!=0:\n    print(str(a)+'/'+str(b)+'='+str(c)+'*'+str(d))\n", "\ndef solve(a, b, c, d):\n    if a == c and b == d:\n        return [\"%d + %d = %d + %d\" % (a, b, c, d)] # noqa\n    elif a > c or (a == c and b > d):\n        return [\"%d - %d = %d - %d\" % (a, b, c, d)] # noqa\n    elif a*b == c*d:\n        return [\"%d * %d = %d * %d\" % (a, b, c, d)] # noqa\n    elif a*d == b*c:\n        return [\"%d / %d = %d / %d\" % (a, b, c, d)] # noqa\n    return [\"problems ahead\"]\n\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    for ans in solve(a, b, c, d):\n        print(ans)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nn = int(input())\nprint(n)\n", "\nfrom itertools import product\na,b,c,d = map(int,input().split())\nvalid = []\nfor p in product(['+','-','*','/'],repeat=2):\n    if eval(\"{}{}{} == {}{}{}\".format(a,p[0],b,c,p[1],d)):\n        valid.append(\"{} {} {} == {} {} {}\".format(a,p[0],b,c,p[1],d))\nvalid.sort()\nif valid:\n    for v in valid:\n        print(v)\nelse:\n    print(\"problems ahead\")\n", "\n\n# TODO: Make this faster\n\nfrom itertools import permutations\n\na, b, c, d = map(int, input().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x / y\n}\n\nfor p in permutations(list(ops.keys()), 2):\n    if ops[p[0]](a, b) == ops[p[1]](c, d):\n        print(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n", "\nfrom itertools import permutations\n\ndef is_valid(a, b, c, d, op1, op2):\n    return eval('{} {} {}'.format(a, op1, b)) == eval('{} {} {}'.format(c, op2, d))\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    ops = ['+', '-', '*', '/']\n    valid = []\n    for op1, op2 in permutations(ops, 2):\n        if is_valid(a, b, c, d, op1, op2):\n            valid.append('{} {} {} = {} {} {}'.format(a, op1, b, c, op2, d))\n    if not valid:\n        print('problems ahead')\n    else:\n        for e in sorted(valid):\n            print(e)\n\nif __name__ == \"__main__\":\n    main()\n", "\nfrom itertools import permutations\n\na, b, c, d = map(int, input().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x // y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    if ops[p[0]](a, b) == ops[p[1]](c, d):\n        valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n", "\n", "\nfrom itertools import permutations\n\ndef is_valid(a, b, c, d, op1, op2):\n    if op1 == '*' and op2 == '+':\n        return a * b == c + d\n    if op1 == '*' and op2 == '-':\n        return a * b == c - d\n    if op1 == '*' and op2 == '/':\n        return a * b == c // d\n    if op1 == '+' and op2 == '*':\n        return a + b == c * d\n    if op1 == '+' and op2 == '-':\n        return a + b == c - d\n    if op1 == '+' and op2 == '/':\n        return a + b == c // d\n    if op1 == '-' and op2 == '*':\n        return a - b == c * d\n    if op1 == '-' and op2 == '+':\n        return a - b == c + d\n    if op1 == '-' and op2 == '/':\n        return a - b == c // d\n    if op1 == '/' and op2 == '*':\n        return a // b == c * d\n    if op1 == '/' and op2 == '+':\n        return a // b == c + d\n    if op1 == '/' and op2 == '-':\n        return a // b == c - d\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    ops = ['+', '-', '*', '/']\n    valid = []\n    for op1, op2 in permutations(ops, 2):\n        if is_valid(a, b, c, d, op1, op2):\n            valid.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n    if not valid:\n        print('no solution')\n    else:\n        for e in sorted(valid):\n            print(e)\n\nif __name__ == \"__main__\":\n    main()\n"]