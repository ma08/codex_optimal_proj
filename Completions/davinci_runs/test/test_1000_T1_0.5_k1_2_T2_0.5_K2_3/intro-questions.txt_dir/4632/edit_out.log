2022-04-12 22:57:46.544560 num operations 2
2022-04-12 22:57:46.544569 size on input set 1
2022-04-12 22:57:49.890276 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sat Nov  3 11:06:38 2018\n@author: ellenmacpherson\n\"\"\"\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split())) for j in range(num_packages)]\n        print(\"YES\" if is_possible(packages) else \"NO\")\n\ndef is_possible(packages):\n    packages.sort()\n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split())) for j in range(num_packages)]\n        print(\"YES\" if is_possible(packages) else \"NO\")\n\ndef is_possible(packages):\n    packages.sort()\n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split())) for j in range(num_packages)] \n        print(\"YES\" if is_possible(packages) else \"NO\") \n\ndef is_possible(packages):\n    packages.sort()\n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649804266,
  "object": "edit"
}
2022-04-12 22:57:49.890476 fix spelling mistakes 3 ['#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n"""\nCreated on Sat Nov  3 11:06:38 2018\n@author: ellenmacpherson\n"""\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split())) for j in range(num_packages)]\n        print("YES" if is_possible(packages) else "NO")\n\ndef is_possible(packages):\n    packages.sort()\n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:\n            return False\n    return True\n\nif __name__ == \'__main__\':\n    main()\n', '\n\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split())) for j in range(num_packages)]\n        print("YES" if is_possible(packages) else "NO")\n\ndef is_possible(packages):\n    packages.sort()\n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:\n            return False\n    return True\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split())) for j in range(num_packages)] \n        print("YES" if is_possible(packages) else "NO") \n\ndef is_possible(packages):\n    packages.sort()\n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:\n            return False\n    return True\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-12 22:57:49.890510 size on output set 3
2022-04-12 22:57:49.890517 size on input set 3
2022-04-12 22:57:55.864527 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sat Nov  3 11:06:38 2018\n@author: ellenmacpherson\n\"\"\"\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_presents = int(lines[2 * i + 1])\n        presents = [tuple(map(int, lines[2 * i + 2 + j].split())) for j in range(num_presents)]\n        print(\"YES\" if is_possible(presents) else \"NO\")\n\ndef is_possible(presents):\n    presents.sort()\n    for i in range(len(presents)):\n        if presents[i][0] < i or presents[i][1] < i:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sat Nov  3 11:06:38 2018\n@author: ellenmacpherson\n\"\"\"\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split()))\n                    for j in range(num_packages)]\n        print(\"YES\" if is_possible(packages) else \"NO\")\n\ndef is_possible(packages):\n    packages.sort()\n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sat Nov  3 11:06:38 2018\n@author: ellenmacpherson\n\"\"\"\n\"\"\"\nGiven a list of packages with weight and value, determine if it is possible to make a package of weight w\n\"\"\"\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split())) for j in range(num_packages)] # split into tuples\n        print(\"YES\" if is_possible(packages) else \"NO\") # check if possible\n\ndef is_possible(packages):\n    packages.sort() # sort by weight\n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i: # check if weight and value is less than index\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649804269,
  "object": "edit"
}
2022-04-12 22:57:55.864703 fix syntax errors 3 ['#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n"""\nCreated on Sat Nov  3 11:06:38 2018\n@author: ellenmacpherson\n"""\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_presents = int(lines[2 * i + 1])\n        presents = [tuple(map(int, lines[2 * i + 2 + j].split())) for j in range(num_presents)]\n        print("YES" if is_possible(presents) else "NO")\n\ndef is_possible(presents):\n    presents.sort()\n    for i in range(len(presents)):\n        if presents[i][0] < i or presents[i][1] < i:\n            return False\n    return True\n\nif __name__ == \'__main__\':\n    main()\n', '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n"""\nCreated on Sat Nov  3 11:06:38 2018\n@author: ellenmacpherson\n"""\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split()))\n                    for j in range(num_packages)]\n        print("YES" if is_possible(packages) else "NO")\n\ndef is_possible(packages):\n    packages.sort()\n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:\n            return False\n    return True\n\nif __name__ == \'__main__\':\n    main()\n', '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n"""\nCreated on Sat Nov  3 11:06:38 2018\n@author: ellenmacpherson\n"""\n"""\nGiven a list of packages with weight and value, determine if it is possible to make a package of weight w\n"""\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split())) for j in range(num_packages)] # split into tuples\n        print("YES" if is_possible(packages) else "NO") # check if possible\n\ndef is_possible(packages):\n    packages.sort() # sort by weight\n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i: # check if weight and value is less than index\n            return False\n    return True\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-12 22:57:57.938835 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split())) for j in range(num_packages)]\n        print(\"YES\" if is_possible(packages) else \"NO\")\n\ndef is_possible(packages):\n    packages.sort()\n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split())) for j in range(num_packages)]\n        print(\"YES\" if is_possible(packages) else \"NO\")\n\ndef is_possible(packages):\n    packages.sort()\n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split())) for j in range(num_packages)]\n        print(\"YES\" if is_possible(packages) else \"NO\")\n\ndef is_possible(packages):\n    packages.sort()\n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649804275,
  "object": "edit"
}
2022-04-12 22:57:57.939036 fix syntax errors 3 ['import sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split())) for j in range(num_packages)]\n        print("YES" if is_possible(packages) else "NO")\n\ndef is_possible(packages):\n    packages.sort()\n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:\n            return False\n    return True\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split())) for j in range(num_packages)]\n        print("YES" if is_possible(packages) else "NO")\n\ndef is_possible(packages):\n    packages.sort()\n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:\n            return False\n    return True\n\nif __name__ == \'__main__\':\n    main()\n', 'import sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split())) for j in range(num_packages)]\n        print("YES" if is_possible(packages) else "NO")\n\ndef is_possible(packages):\n    packages.sort()\n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:\n            return False\n    return True\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-12 22:58:01.783685 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split())) for j in range(num_packages)]\n        print(\"YES\" if is_possible(packages) else \"NO\")\n\ndef is_possible(packages):\n    packages.sort()\n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split())) for j in range(num_packages)] \n        print(\"YES\" if is_possible(packages) else \"NO\") \n\ndef is_possible(packages):\n    packages.sort()\n    for i in range(1, len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\n\ndef is_possible(packages):\n    packages.sort()\n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:\n            return False\n    return True\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split())) for j in range(num_packages)] \n        print(\"YES\" if is_possible(packages) else \"NO\") \n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649804277,
  "object": "edit"
}
2022-04-12 22:58:01.783902 fix syntax errors 3 ['import sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split())) for j in range(num_packages)]\n        print("YES" if is_possible(packages) else "NO")\n\ndef is_possible(packages):\n    packages.sort()\n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:\n            return False\n    return True\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split())) for j in range(num_packages)] \n        print("YES" if is_possible(packages) else "NO") \n\ndef is_possible(packages):\n    packages.sort()\n    for i in range(1, len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:\n            return False\n    return True\n\nif __name__ == \'__main__\':\n    main()\n', '\n\n\ndef is_possible(packages):\n    packages.sort()\n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:\n            return False\n    return True\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split())) for j in range(num_packages)] \n        print("YES" if is_possible(packages) else "NO") \n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-12 22:58:01.783954 size on output set 8
2022-04-12 22:58:01.783969 num operations 2
2022-04-12 22:58:01.783977 size on input set 1
2022-04-12 22:58:04.538582 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    num_cases = int(input())\n    for i in range(num_cases):\n        num_packages = int(input())\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(' ')\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n        if packages[0][1] > 0:\n            print(\"NO\")\n            continue\n\n        last_x = 0\n        last_y = 0\n        path = \"\"\n        for p in packages:\n            if p[0] < last_x or p[1] < last_y:\n                print(\"NO\")\n                break\n\n            path += \"R\" * (p[0] - last_x)\n            path += \"U\" * (p[1] - last_y)\n            last_x = p[0]\n            last_y = p[1]\n        else:\n            print(\"YES\")\n            print(path)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    num_cases = int(input())\n    for i in range(num_cases):\n        num_packages = int(input())\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(' ')\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n        if packages[0][1] > 0:\n            print(\"NO\")\n            continue\n\n        last_x = 0\n        last_y = 0\n        path = \"\"\n        for p in packages:\n            if p[0] < last_x or p[1] < last_y:\n                print(\"NO\")\n                break\n\n            path += \"R\" * (p[0] - last_x)\n            path += \"U\" * (p[1] - last_y)\n            last_x = p[0]\n            last_y = p[1]\n        else:\n            print(\"YES\")\n            print(path)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    num_packages = int(input())\n    for i in range(num_packages):\n        num_packages = int(input())\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(' ')\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n        if packages[0][1] > 0:\n            print(\"NO\")\n            continue\n\n        last_x = 0\n        last_y = 0\n        path = \"\"\n        for p in packages:\n            if p[0] < last_x or p[1] < last_y:\n                print(\"NO\")\n                break\n\n            path += \"R\" * (p[0] - last_x)\n            path += \"U\" * (p[1] - last_y)\n            last_x = p[0]\n            last_y = p[1]\n        else:\n            print(\"YES\")\n            print(path)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649804281,
  "object": "edit"
}
2022-04-12 22:58:04.538840 fix spelling mistakes 3 ['\n\ndef main():\n    num_cases = int(input())\n    for i in range(num_cases):\n        num_packages = int(input())\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(\' \')\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n        if packages[0][1] > 0:\n            print("NO")\n            continue\n\n        last_x = 0\n        last_y = 0\n        path = ""\n        for p in packages:\n            if p[0] < last_x or p[1] < last_y:\n                print("NO")\n                break\n\n            path += "R" * (p[0] - last_x)\n            path += "U" * (p[1] - last_y)\n            last_x = p[0]\n            last_y = p[1]\n        else:\n            print("YES")\n            print(path)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    num_cases = int(input())\n    for i in range(num_cases):\n        num_packages = int(input())\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(\' \')\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n        if packages[0][1] > 0:\n            print("NO")\n            continue\n\n        last_x = 0\n        last_y = 0\n        path = ""\n        for p in packages:\n            if p[0] < last_x or p[1] < last_y:\n                print("NO")\n                break\n\n            path += "R" * (p[0] - last_x)\n            path += "U" * (p[1] - last_y)\n            last_x = p[0]\n            last_y = p[1]\n        else:\n            print("YES")\n            print(path)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    num_packages = int(input())\n    for i in range(num_packages):\n        num_packages = int(input())\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(\' \')\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n        if packages[0][1] > 0:\n            print("NO")\n            continue\n\n        last_x = 0\n        last_y = 0\n        path = ""\n        for p in packages:\n            if p[0] < last_x or p[1] < last_y:\n                print("NO")\n                break\n\n            path += "R" * (p[0] - last_x)\n            path += "U" * (p[1] - last_y)\n            last_x = p[0]\n            last_y = p[1]\n        else:\n            print("YES")\n            print(path)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 22:58:04.538881 size on output set 2
2022-04-12 22:58:04.538888 size on input set 2
2022-04-12 22:58:16.091585 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    num_cases = int(input())\n    for i in range(num_cases):\n        num_packages = int(input())\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(' ')\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n\n        last_x = 0\n        last_y = 0\n        path = \"\"\n        try:\n            for p in packages:\n                if p[0] < last_x or p[1] < last_y:\n                    raise ValueError\n\n                path += \"R\" * (p[0] - last_x)\n                path += \"U\" * (p[1] - last_y)\n                last_x = p[0]\n                last_y = p[1]\n\n            print(\"YES\")\n            print(path)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    num_cases = int(input())\n    for i in range(num_cases):\n        num_packages = int(input())\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(' ')\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n        if packages[0][1] > 0:\n            print(\"NO\") \n            continue\n\n        last_x = 0\n        last_y = 0\n        path = \"\"\n        for p in packages:\n            if p[0] < last_x or p[1] < last_y:\n                print(\"NO\")\n                break\n\n            path += \"R\" * (p[0] - last_x)\n            path += \"U\" * (p[1] - last_y)\n            last_x = p[0]\n            last_y = p[1]\n        else:\n            print(\"YES\")\n            print(path)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    num_cases = int(input())\n    for i in range(num_cases):\n        num_packages = int(input())\n        packages = []\n        for _ in range(num_packages):\n            coords = input().split(' ')\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n        if packages[0][1] > 0:\n            print(\"NO\")\n            continue\n\n        last_x = 0\n        last_y = 0\n        path = \"\"\n        for package in packages:\n            if package[0] < last_x or package[1] < last_y:\n                print(\"NO\")\n                break\n\n                break\n\n            path += \"R\" * (package[0] - last_x)\n            path += \"U\" * (package[1] - last_y)\n            last_x = package[0]\n            last_y = package[1]\n        else:\n            print(\"YES\")\n            print(path)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649804284,
  "object": "edit"
}
2022-04-12 22:58:16.091802 fix syntax errors 3 ['\n\ndef main():\n    num_cases = int(input())\n    for i in range(num_cases):\n        num_packages = int(input())\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(\' \')\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n\n        last_x = 0\n        last_y = 0\n        path = ""\n        try:\n            for p in packages:\n                if p[0] < last_x or p[1] < last_y:\n                    raise ValueError\n\n                path += "R" * (p[0] - last_x)\n                path += "U" * (p[1] - last_y)\n                last_x = p[0]\n                last_y = p[1]\n\n            print("YES")\n            print(path)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    num_cases = int(input())\n    for i in range(num_cases):\n        num_packages = int(input())\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(\' \')\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n        if packages[0][1] > 0:\n            print("NO") \n            continue\n\n        last_x = 0\n        last_y = 0\n        path = ""\n        for p in packages:\n            if p[0] < last_x or p[1] < last_y:\n                print("NO")\n                break\n\n            path += "R" * (p[0] - last_x)\n            path += "U" * (p[1] - last_y)\n            last_x = p[0]\n            last_y = p[1]\n        else:\n            print("YES")\n            print(path)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    num_cases = int(input())\n    for i in range(num_cases):\n        num_packages = int(input())\n        packages = []\n        for _ in range(num_packages):\n            coords = input().split(\' \')\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n        if packages[0][1] > 0:\n            print("NO")\n            continue\n\n        last_x = 0\n        last_y = 0\n        path = ""\n        for package in packages:\n            if package[0] < last_x or package[1] < last_y:\n                print("NO")\n                break\n\n                break\n\n            path += "R" * (package[0] - last_x)\n            path += "U" * (package[1] - last_y)\n            last_x = package[0]\n            last_y = package[1]\n        else:\n            print("YES")\n            print(path)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 22:58:20.001660 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    num_test_cases = int(input())\n    for i in range(num_test_cases):\n        num_packages = int(input())\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(' ')\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n        if packages[0][1] > 0:\n            print(\"NO\")\n            continue\n\n        last_x = 0\n        last_y = 0\n        path = \"\"\n        for p in packages:\n            if p[0] < last_x or p[1] < last_y:\n                print(\"NO\")\n                break\n\n            path += \"R\" * (p[0] - last_x)\n            path += \"U\" * (p[1] - last_y)\n            last_x = p[0]\n            last_y = p[1]\n        else:\n            print(\"YES\")\n            print(path)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    num_packages = int(input())  # number of test cases\n    for i in range(num_packages):\n        num_packages = int(input())  # number of packages\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(' ')  # coordinate of package\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n        if packages[0][1] > 0:\n            print(\"NO\")\n            continue\n\n        last_x = 0\n        last_y = 0\n        path = \"\"\n        for p in packages:\n            if p[0] < last_x or p[1] < last_y:\n                print(\"NO\")\n                break\n\n            path += \"R\" * (p[0] - last_x)\n            path += \"U\" * (p[1] - last_y)\n            last_x = p[0]\n            last_y = p[1]\n        else:\n            print(\"YES\")\n            print(path)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    num_cases = int(input())\n    for i in range(num_cases):\n        num_packages = int(input())\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(' ')\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n        if packages[0][1] > 0:\n            print(\"NO\")\n            continue\n\n        last_x = 0\n        last_y = 0\n        path = \"\"\n        for p in packages:\n            if p[0] < last_x or p[1] < last_y:\n                print(\"NO\")\n                break\n\n            path += \"R\" * (p[0] - last_x)\n            path += \"U\" * (p[1] - last_y)\n            last_x = p[0]\n            last_y = p[1]\n        else:\n            print(\"YES\")\n            print(path)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649804296,
  "object": "edit"
}
2022-04-12 22:58:20.001841 fix syntax errors 3 ['\n\ndef main():\n    num_test_cases = int(input())\n    for i in range(num_test_cases):\n        num_packages = int(input())\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(\' \')\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n        if packages[0][1] > 0:\n            print("NO")\n            continue\n\n        last_x = 0\n        last_y = 0\n        path = ""\n        for p in packages:\n            if p[0] < last_x or p[1] < last_y:\n                print("NO")\n                break\n\n            path += "R" * (p[0] - last_x)\n            path += "U" * (p[1] - last_y)\n            last_x = p[0]\n            last_y = p[1]\n        else:\n            print("YES")\n            print(path)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    num_packages = int(input())  # number of test cases\n    for i in range(num_packages):\n        num_packages = int(input())  # number of packages\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(\' \')  # coordinate of package\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n        if packages[0][1] > 0:\n            print("NO")\n            continue\n\n        last_x = 0\n        last_y = 0\n        path = ""\n        for p in packages:\n            if p[0] < last_x or p[1] < last_y:\n                print("NO")\n                break\n\n            path += "R" * (p[0] - last_x)\n            path += "U" * (p[1] - last_y)\n            last_x = p[0]\n            last_y = p[1]\n        else:\n            print("YES")\n            print(path)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    num_cases = int(input())\n    for i in range(num_cases):\n        num_packages = int(input())\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(\' \')\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n        if packages[0][1] > 0:\n            print("NO")\n            continue\n\n        last_x = 0\n        last_y = 0\n        path = ""\n        for p in packages:\n            if p[0] < last_x or p[1] < last_y:\n                print("NO")\n                break\n\n            path += "R" * (p[0] - last_x)\n            path += "U" * (p[1] - last_y)\n            last_x = p[0]\n            last_y = p[1]\n        else:\n            print("YES")\n            print(path)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 22:58:20.001883 size on output set 6
