["\ndef solution(matrix, n, m, k):\n    for i in range(n):\n        row = matrix[i]\n        row.sort()\n        for j in range(m-1):\n            diff = row[j+1] - row[j]\n            if diff > max_diff:\n                max_diff = diff\n    max_diff = 0\n    for j in range(m):\n        column = [matrix[i][j] for i in range(n)]\n        column.sort()\n        for i in range(n-1):\n            diff = column[i+1] - column[i]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n\nif __name__ == '__main__':\n    n, m = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    print(solution(matrix, n, m, k))\n", "\n\ndef solution(matrix, n, m, k):\n    for i in range(n):\n        row = matrix[i]\n        row.sort()\n        for j in range(m-1):\n            diff = row[j+1] - row[j]\n            if diff > k:\n                k = diff\n    max_diff = 0\n    for j in range(m):\n        column = [matrix[i][j] for i in range(n)]\n        column.sort()\n        for i in range(n-1):\n            diff = column[i+1] - column[i]\n            if diff > k:\n                k = diff\n    return k\n\n    k = int(input())\n\nif __name__ == '__main__':\n    n, m = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    print(solution(matrix, n, m, k))\n", "\ndef solution(matrix, n, m):\n    max_diff = 0\n    for j in range(m):\n        column = [matrix[i][j] for i in range(n)]\n        column.sort()\n        for i in range(n - 1):\n            diff = column[i + 1] - column[i]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n\nif __name__ == '__main__':\n    n, m = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    print(solution(matrix, n, m))\n", "\ndef main():\n    n, m = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    print(solve(n, m, matrix))\n\ndef solve(n, m, matrix):\n    # First, find the minimum value in each column\n    min_vals = [min(row[i] for row in matrix) for i in range(m)] \n    # Now, the max k is the max difference between any two elements in min_vals.\n    max_k = 0\n    for i in range(m - 1):\n        max_k = max(max_k, abs(min_vals[i] - min_vals[i + 1]))\n    return max_k\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    n, m = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    print(solve(n, m, matrix))\n\ndef solve(n, m, matrix):\n    # First, find the minimum value in each row\n    min_vals = [min(row) for row in matrix]\n    # Now, the max k is the max difference between any two elements in min_vals.\n    max_k = 0\n    for i in range(n - 1):\n        max_k = max(max_k, abs(min_vals[i] - min_vals[i + 1]))\n    return max_k\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    n, m = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    print(solve(n, m, matrix))\n\ndef solve(n, m, matrix):\n    # First, find the minimum value in each row\n    min_vals = [min(row) for row in matrix]\n    # Now, the max k is the max difference between any two elements in min_vals.\n    max_k = 0\n    for i in range(m - 1):\n        max_k = max(max_k, abs(min_vals[i] - min_vals[i+1]))\n    return max_k\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    n, m = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    print(solve(n, m, matrix))\n\ndef solve(n, m, matrix):\n    # First, find the minimum value in each column\n    min_vals = [min(row[i] for row in matrix) for i in range(m)] # list comprehension\n    # Now, the max k is the max difference between any two elements in min_vals.\n    max_k = 0\n    for i in range(m - 1):\n        max_k = max(max_k, abs(min_vals[i] - min_vals[i + 1]))\n    return max_k\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    n, m = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    print(solve(n, m, matrix))\n\ndef solve(n, m, matrix):\n    # First, find the maximum value in each column\n    max_vals = [max(row[i] for row in matrix) for i in range(m)]\n    # Now, the max k is the max difference between any two elements in max_vals\n    max_diff = 0\n    for i in range(m):\n        for j in range(i + 1, m):\n            max_diff = max(max_diff, abs(max_vals[i] - max_vals[j]))\n    return max_diff\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    n, m = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    print(solve(n, m, matrix))\n\ndef solve(n, m, matrix):\n    # First, find the maximum value in each column\n    max_vals = [max(row[i] for row in matrix) for i in range(m)]\n    # Now, the max k is the maximum difference between any two elements in max_vals\n    max_diff = 0\n    for i in range(m - 1):\n        max_diff = max(max_diff, abs(max_vals[i] - max_vals[i + 1]))\n    return max_diff\n\nif __name__ == \"__main__\":\n    main()\n", "def main():  \n    n = int(input())\n    print(solve(n))\n    \ndef solve(n):\n    # This is the solution to the problem, but it is too slow.\n    # def is_prime(num):\n    #     if num % 2 == 0 and num > 2: \n    #         return False\n    #     return all(num % i for i in range(3, int(math.sqrt(num)) + 1, 2))\n    # return sum(1 for i in range(2, n + 1) if is_prime(i))\n    # Instead, use the sieve of Eratosthenes\n    nums = [True] * (n + 1)\n    p = 2\n    while p * p <= n:\n        if nums[p] == True:\n            for i in range(p * 2, n + 1, p):\n                nums[i] = False\n        p += 1\n    return sum(1 for i in range(2, n + 1) if nums[i])\n        \nif __name__ == \"__main__\":  \n    main() \n", "\n\n\"\"\"\n\u0414\u0430\u043d\u0430 \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u0447\u0438\u0441\u0435\u043b \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c n\u00d7m. \u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0440\u0430\u0437\u043d\u0438\u0446\u0443 \u043c\u0435\u0436\u0434\u0443 \u0434\u0432\u0443\u043c\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438,\n\u0441\u0442\u043e\u044f\u0449\u0438\u043c\u0438 \u043d\u0430 \u0441\u043e\u0441\u0435\u0434\u043d\u0438\u0445 \u043f\u043e\u0437\u0438\u0446\u0438\u044f\u0445 (\u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438 \u0441\u0442\u043e\u043b\u0431\u0446\u044b), \u0435\u0441\u043b\u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430\n\u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e.\n\"\"\"\ndef solution(matrix, n, m):\n    max_diff = 0\n    for row in matrix:\n        row.sort()\n        for i in range(len(row)-1):\n            diff = row[i+1] - row[i]\n            if diff > max_diff: max_diff = diff\n    return max_diff\n\n\nif __name__ == '__main__':\n    n, m = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    print(solution(matrix, n, m))\n", "def main():\n    print(solve())\n\ndef solve():\n    return 0\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    n, m = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    print(solve(n, m, matrix))\n\ndef solve(n, m, matrix):\n    # First, find the maximum value in each column\n    max_vals = [max(row[i] for row in matrix) for i in range(m)]  # list comprehension\n    # Now, the max k is the max difference between any two elements in max_vals\n    max_diff = 0\n    for i in range(m - 1):\n        max_diff = max(max_diff, abs(max_vals[i] - max_vals[i + 1]))\n    return max_diff\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef solution(matrix, n, m):\n    max_diff = -1\n    for j in range(m):\n        column = [matrix[i][j] for i in range(n)]\n        column.sort()\n        for i in range(n-1):\n            diff = column[i+1] - column[i]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n\nif __name__ == '__main__':\n    n, m = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    print(solution(matrix, n, m))\n", "\n\ndef solution(matrix, n, m):\n    for i in range(n):\n        row = matrix[i]\n        row.sort()\n        for j in range(m-1):\n            diff = row[j+1] - row[j]\n            if diff > max_diff_row:\n                max_diff_row = diff\n    max_diff = 0\n    for j in range(m):\n        column = [matrix[i][j] for i in range(n)]\n        column.sort()\n        for i in range(n-1):\n            diff = column[i+1] - column[i]\n            if diff > max_diff_col:\n                max_diff_col = diff\n    return max_diff_row, max_diff_col\n\n    k = int(input())\n\nif __name__ == '__main__':\n    n, m = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    print(solution(matrix, n, m, k))\n", "\n\"\"\"\n\u0414\u0430\u043d\u0430 \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u0447\u0438\u0441\u0435\u043b \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c n\u00d7m. \u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0440\u0430\u0437\u043d\u0438\u0446\u0443 \u043c\u0435\u0436\u0434\u0443 \u0434\u0432\u0443\u043c\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438,\n\u0441\u0442\u043e\u044f\u0449\u0438\u043c\u0438 \u043d\u0430 \u0441\u043e\u0441\u0435\u0434\u043d\u0438\u0445 \u043f\u043e\u0437\u0438\u0446\u0438\u044f\u0445 (\u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438 \u0441\u0442\u043e\u043b\u0431\u0446\u044b), \u0435\u0441\u043b\u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430\n\u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e.\n\"\"\"\ndef solution(matrix, n, m):\n    max_diff = 0\n    for row in matrix:\n        row.sort()\n        for i in range(len(row)-1):\n            diff = row[i+1] - row[i]\n            if diff > max_diff: max_diff = diff\n    return max_diff\n\n\nif __name__ == '__main__':\n    n, m = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    print(solution(matrix, n, m))\n", "\ndef solution(matrix, n, m):\n    max_diff = 0\n    for j in range(n):\n        column = [matrix[i][j] for i in range(n)]\n        column.sort()\n        for i in range(m-1):\n            diff = column[i+1] - column[i]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n\nif __name__ == '__main__':\n    n, m = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    print(solution(matrix, n, m))\n"]