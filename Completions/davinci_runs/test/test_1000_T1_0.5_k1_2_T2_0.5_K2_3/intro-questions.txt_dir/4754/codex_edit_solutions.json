["\n\ndef main():\n    n = int(input())\n    socks = [int(i) for i in input().split()]  # Create a list of the socks.\n    socks.sort()\n\n    # If there are socks of the same type, try pairing them first.\n    for i in range(0, len(socks), 2):  # Step through the list in pairs.\n        if socks[i] == socks[i+1]:\n            socks.pop(i)  # Remove the pair of socks.\n            n -= 1\n    \n    # If there are no socks left, we are done.\n    if len(socks) == 0:  # If the list is empty, return 0.\n        return 0\n    \n    # If there is an odd number of socks left, there is no solution.\n    if len(socks) % 2 == 1:  # If the list has an odd number of socks, return \"impossible\".\n        return \"impossible\"\n\n    # Try to pair up the remaining socks.\n    moves = 0\n    while len(socks) > 0:  # While there are still socks in the list...\n        # If the top sock is a match for the bottom sock, pair them.\n        if socks[0] == socks[-1]:\n            socks.pop(0)  # Remove the top sock.\n            socks.pop(-1)  # Remove the bottom sock.\n            moves += 2\n            continue\n\n        # If the top sock is not a match for the bottom sock, try pairing it with the second from the bottom sock.\n        if socks[0] == socks[-2]:\n            socks.pop(0)  # Remove the top sock.\n            socks.pop(-2)  # Remove the second from the bottom sock.\n            moves += 2\n            continue\n\n        # If the top sock is not a match for any other sock, there is no solution.\n        return \"impossible\"\n\n    return moves\n\nif __name__ == \"__main__\":\n    print(main())\n", "\n\nfrom collections import Counter\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nfrom collections import Counter\n\ndef main():\n    n = int(input())\n    socks = [int(i) for i in input().split()]\n    if n % 2 == 1:\n        print(\"impossible\")\n        return\n    socks_dict = Counter(socks)\n    moves = 0\n    while len(socks_dict) > 0:\n        socks_dict = Counter({key: socks_dict[key] - 2 for key in socks_dict if socks_dict[key] >= 2})\n        moves += 1\n    print(moves * 2)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    socks = list(map(int, sys.stdin.readline().strip().split()))\n\n    count = 0\n    # Sort socks by type\n    socks = sorted(socks)\n    # Count number of socks of each type\n    socks_count = {}\n    for sock in socks:\n        if sock in socks_count:\n            socks_count[sock] += 1\n        else:\n            socks_count[sock] = 1\n    # Count number of moves\n    for sock, num_socks in socks_count.items():\n        if num_socks % 2 == 0:\n            count += num_socks\n        else:\n            count += num_socks - 1\n    if count % 2 == 0:\n        print(count)\n    else:\n        print(\"impossible\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    socks = list(map(int, sys.stdin.readline().strip().split()))\n\n    if len(socks) % 2 != 0:\n        print(\"Impossible\")\n        return\n\n    count = 0\n    # Sort socks by type\n    socks = sorted(socks)\n    # Count number of socks of each type\n    socks_count = {}\n    for sock in socks:\n        if sock in socks_count:\n            socks_count[sock] += 1\n        else:\n            socks_count[sock] = 1\n    # Count number of moves\n    for sock, num_socks in socks_count.items():\n        if num_socks % 2 == 0:\n            count += num_socks\n        else:\n            count += num_socks - 1\n            if len(socks_count) == 1:\n                print(\"Impossible\")\n                return\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\nimport collections\n\ndef main():\n    n = int(sys.stdin.readline())\n    socks = map(int, sys.stdin.readline().split())\n    sock_count = collections.Counter(socks)\n    if any([sock_count[x] % 2 for x in sock_count]):\n        print(\"impossible\")\n    else:\n        print(sum([sock_count[x]/2 - 1 for x in sock_count]))\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    socks = [int(x) for x in sys.stdin.readline().strip().split()]\n    socks = sorted(socks)\n    count = 0\n    i = 0\n    while i < len(socks):\n        if socks[i] != socks[i+1] and socks[i] != socks[i+2]:\n            count += 1\n            i += 1\n        else:\n            i += 2\n\n    if count == 0:\n        print(len(socks) // 2)\n    else:\n        print(\"impossible\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    socks = list(map(int, sys.stdin.readline().strip().split()))\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if socks[i] == socks[j]:\n                count += 1\n                socks[i] = -1\n                socks[j] = -1\n                break\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    socks = [int(x) for x in sys.stdin.readline().strip().split()]\n    socks = sorted(socks)\n    print(len(socks) // 2)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n = int(input())\n    socks = [int(i) for i in input().split()]\n    socks.sort()\n\n    # If there are socks of the same type, try paring them first.\n    for i in range(0, len(socks), 2):\n        if socks[i] == socks[i+1]:\n            socks.pop(i)\n            socks.pop(i)\n            n -= 1\n    \n    # If there are no socks left, we are done.\n    if not socks:\n        return 0\n    \n    # If there are an odd number of socks left, there is no solution.\n    if len(socks) % 2 == 1:\n        return \"Impossible\"\n\n    # Try to pair the remaining socks.\n    moves = 0\n    while socks:\n        # If the top sock is a match for the bottom sock, pair them up.\n        if socks[0] == socks[-1]:\n            socks.pop(0)\n            socks.pop(-1)\n            moves += 2\n            continue\n\n        # If the top sock is not a match for the bottom sock, try paring it with the second from the bottom sock.\n        if socks[0] == socks[-2]:\n            socks.pop(0)\n            socks.pop(-2)\n            moves += 2\n            continue\n\n        # If the top sock is not a match for any other sock, there is no solution.\n        return \"Impossible\"\n\n    return moves\n\nif __name__ == \"__main__\":\n    print(main())\n", "\n\ndef main():\n    \"\"\"Sock Pairing.\"\"\"\n    n = int(input())\n    data = list(map(int, input().split()))\n    count = [0 for _ in range(max(data))]\n    for i in data:\n        count[i] += 1\n    sum_ = 0\n    for i in count:\n        if i % 2 == 1:\n            sum_ += 1\n    if sum_ > 2:\n        print(\"impossible\")\n    else:\n        print(n - sum_)\n\nmain()\n", "\n\ndef main():\n    return\n\nif __name__ == \"__main__\":\n    print(main())\n", "\n# SOLUTION\n\nfrom collections import Counter\n\npairs = int(input())\nsocks = list(map(int, input().split()))\n\nif len(socks) % 2 != 0:\n    print('impossible')\nelse:\n    sock_count = Counter(socks)\n    pairs_needed = 0\n    for i in sock_count.values():\n        pairs_needed += i // 2\n    if pairs_needed > pairs:\n        print('impossible')\n    else:\n        print(pairs * 2 - pairs_needed)\n", "\n\nfrom collections import Counter\n\ndef main():\n    n = int(input())\n    socks = [int(i) for i in input().split()]\n    if len(socks) % 2 == 1:\n        print(\"impossible\")\n        return\n    socks_dict = Counter(socks)  # dict of socks and their counts\n    moves = 0  # number of moves\n    while len(socks_dict) > 0:\n        # print(socks_dict)\n        socks_dict = Counter({key: socks_dict[key] - 2 for key in socks_dict if socks_dict[key] >= 2})  # remove 2 socks from the dict\n        moves += 1\n    print(moves * 2)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"Sock Pairing.\"\"\"\n    n = int(input())\n    data = list(map(int, input().split()))\n    count = [0 for _ in range(1000000)]\n    for i in data:\n        count[i] += 1\n    sum_ = 0\n    for i in count:\n        if i % 2 == 1:\n            sum_ += 1\n    if sum_ > 2:\n        print(\"impossible\")\n    else:\n        print(n - sum_)\n\nmain()\n", "\nfrom collections import Counter\n\ndef main():\n    n = int(input())\n    socks = [int(i) for i in input().split()]\n    socks_dict = Counter(socks)\n    print(sum([socks_dict[key] // 2 for key in socks_dict]))\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    socks = [int(x) for x in sys.stdin.readline().strip().split()]\n    socks = sorted(socks)\n    count = 0\n    for i in range(0, len(socks) - 1, 2):\n        if socks[i] != socks[i + 1]:\n            count += 1\n    if count == 0:\n        print(len(socks) // 2)\n    else:\n        print(\"impossible\")\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    n = int(input())\n    socks = [int(x) for x in input().split()]\n\n    # Check if it's impossible\n    if len(socks) % 2 != 0:\n        print(\"impossible\")\n        return\n\n    # Create a dictionary for the socks.\n    sock_dict = {}\n    for sock in socks:\n        sock_dict[sock] = sock_dict.get(sock, 0) + 1\n\n    # Count the number of pairs.\n    pairs = 0\n    for sock in sock_dict:\n        pairs += sock_dict[sock] // 2 \n\n    # Calculate the number of moves.\n    moves = n - pairs\n    print(moves)\n    \nif __name__ == \"__main__\":\n    main()\n", "\n\n\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Thu Sep 24 12:24:43 2020\n\n@author: kieranodonnell\n\"\"\"\n# SOLUTION\n\nfrom collections import Counter\n\npairs = int(input())\nsocks = list(map(int, input().split()))\n\nif len(socks) % 2 != 0:\n    print('impossible')\nelse:\n    sock_count = Counter(socks)\n    pairs_needed = 0\n    for i in sock_count.values():\n        pairs_needed += i // 2\n    if pairs_needed > pairs:\n        print('impossible')\n    else:\n        print(pairs * 2 - pairs_needed)\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    socks = sorted([int(x) for x in sys.stdin.readline().strip().split()])\n    count = 0\n    for i in range(0, len(socks)-1, 2):\n        if socks[i] != socks[i+1] or socks[i] == socks[i+1]:\n            count += 1\n    if count == 0 or count == 1:\n        print(len(socks) // 2)\n    else:\n        print(\"Impossible\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n = int(input())\n    socks = [int(x) for x in input().split()]\n\n    # Check if it's impossible\n    if n % 2 != 0:\n        print(\"impossible\")\n        return\n\n    # Create a dictionary for the socks.\n    sock_dict = {}\n    for sock in socks:\n        sock_dict[sock] = sock_dict.get(sock, 0) + 1\n\n    # Count the number of pairs\n    pairs = 0\n    for sock in sock_dict:\n        pairs += sock_dict[sock] // 2\n\n    # Calculate the number of moves\n    moves = n - pairs\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"Sock Pairing.\"\"\"\n    n = int(input())\n    data = list(map(int, input().split()))\n    count = [0 for _ in range(100000000)]\n    for i in data:\n        count[i] += 1\n    sum_ = 0\n    for i in count:\n        if i % 2 == 1:\n            sum_ += 1\n    if sum_ > 2:\n        print(\"impossible\")\n    else:\n        print(n - sum_)\n\nmain()\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Mon Jun  8 13:45:41 2020\n\n\n@author: karanwaghela\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n\ndef max_pair():\n    n, m = map(int, sys.stdin.readline().strip().split())\n    A = list(map(int, sys.stdin.readline().strip().split()))\n    count = defaultdict(int)\n    for a in A:\n        count[a] += 1\n        \n    pairs = 0\n    for c in count.values():\n        pairs += c // 2\n        \n    if pairs >= m:\n        return m\n    else:\n        return pairs + (m - pairs) // 2\n\nif len(socks) % 2 != 0:\n    print('impossible')\nelse:\n    sock_count = Counter(socks)\n    pairs_needed = 0\n    for i in sock_count.values():\n        pairs_needed += i // 2\n    if pairs_needed > pairs:\n        print('impossible')\n    else:\n        print(pairs * 2 - pairs_needed)\n", "\nimport sys\nimport collections\n\ndef main():\n    n = int(sys.stdin.readline())\n    socks = map(int, sys.stdin.readline().split())\n    sock_count = collections.Counter(socks)\n    if any(sock_count[x] % 2 == 1 for x in sock_count):\n        print(\"impossible\")\n    else:\n        print(sum((sock_count[x]/2 - 1) for x in sock_count))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n = int(input())\n    socks = [int(x) for x in input().split()]\n\n    # Check if it's impossible\n    if len(socks) % 2 != 0:\n        print(\"impossible\")\n        return\n\n    # Create a dictionary for the socks\n    sock_dict = {}\n    for sock in socks:\n        sock_dict[sock] = sock_dict.get(sock, 0) + 1\n\n    # Count the number of pairs\n    pairs = 0\n    for sock in sock_dict:\n        pairs += sock_dict[sock] // 2\n\n    # Calculate the number of moves\n    moves = n - pairs\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n", "\n", "\n# \nfrom collections import Counter\n\ndef main():\n    n = int(input())\n    socks = [int(i) for i in input().split()]\n    if len(socks) % 2 == 1:\n        print(\"impossible\")\n        return\n    socks_dict = Counter(socks)\n    moves = 0\n    while len(socks_dict) > 0:\n        # print(socks_dict)\n        socks_dict = Counter({key: socks_dict[key] - 2 for key in socks_dict if socks_dict[key] >= 2})\n        moves += 1\n    print(moves * 2)\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef main():\n\n    n = int(sys.stdin.readline().strip())\n    socks = list(map(int, sys.stdin.readline().strip().split()))\n\n    if len(socks) % 2 != 0:\n        print(\"impossible\")\n        return\n\n    count = 0\n    # Sort socks by type\n    socks = sorted(socks)\n    # Count number of socks of each type\n    socks_count = {}\n    for sock in socks:\n        if sock in socks_count:\n            socks_count[sock] += 1\n        else:\n            socks_count[sock] = 1\n    # Count number of moves\n    for sock, num_socks in socks_count.items():\n        if num_socks % 2 == 0:\n            count += num_socks\n        else:\n            count += num_socks - 1\n            if len(socks_count) == 1:\n                print(\"impossible\")\n                return\n    print(count)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n#SOLUTION 1\n\nfrom collections import Counter\n\npairs = int(input())\nsocks = list(map(int, input().split()))\n\nif len(socks) % 2 != 0:\n    print('impossible')\nelse:\n    sock_count = Counter(socks)\n    pairs_needed = 0\n    for i in sock_count.values():\n        pairs_needed += i // 2\n    if pairs_needed > pairs:\n        print('impossible')\n    else:\n\n#SOLUTION 2\n\nfrom collections import Counter\n\npairs = int(input())\nsocks = list(map(int, input().split()))\n\nif len(socks) % 2 != 0:\n    print('impossible')\nelse:\n    sock_count = Counter(socks)\n    pairs_needed = 0\n    for i in sock_count.values():\n        pairs_needed += i // 2\n    if pairs_needed > pairs:\n        print('impossible')\n    else:\n        print(pairs * 2 - pairs_needed)\n        print(pairs * 2 - pairs_needed)\n", "\n\ndef main():\n    n = int(input())\n    socks = [i for i in input().split()]\n    socks.sort()\n\n    # If there are socks of the same type, try pairing them first.\n    for i in range(0, len(socks), 2):\n        if socks[i] == socks[i+1]:\n            socks.pop(i)\n            socks.pop(i)\n            n -= 1\n    \n    # If there are no socks left, we are finished.\n    if len(socks) == 0:\n        return 0\n    \n    # If there is an odd number of socks left, there is no solution.\n    if len(socks) % 2 == 1:\n        return \"Impossible\"\n\n    # Try to pair up the remaining socks.\n    moves = 0\n    while len(socks) > 0:\n        # If the top sock is a match for the bottom sock, pair them.\n        if socks[0] == socks[-1]:\n            socks.pop(0)\n            socks.pop(-1)\n            moves += 2\n            continue\n\n        # If the top sock is not a match for the bottom sock, try pairing it with the second from the bottom sock.\n        if socks[0] == socks[-2]:\n            socks.pop(0)\n            socks.pop(-2)\n            moves += 2\n            continue\n\n        # If the top sock is not a match for any other sock, there is no solution.\n        return \"Impossible\"\n\n    return moves\n\nif __name__ == \"__main__\":\n    print(main())\n", "\n\ndef main():\n    n = int(input())\n    socks = [int(x) for x in input().split()]\n\n    # Check if it's impossible\n    if n % 2 != 0:\n        print(\"impossible\")\n        return\n\n    # Create a dictionary for the socks\n    sock_dict = {}\n    for sock in socks:\n        sock_dict[sock] = sock_dict.get(sock, 0) + 1\n\n    # Count the number of pairs\n    pairs = 0\n    for sock in sock_dict:\n        pairs += sock_dict[sock] // 2 \n\n    # Calculate the number of moves\n    moves = n - pairs\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\nimport collections\n\ndef main():\n    n = int(sys.stdin.readline())\n    socks = map(int, sys.stdin.readline().split())\n    sock_count = collections.Counter(socks)\n    if any(sock_count[x] % 2 != 0 for x in sock_count.keys()):\n        print(\"impossible\")\n    else:\n        print(sum(sock_count[x]/2 - 1 for x in sock_count.keys()))\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    socks = [int(x) for x in sys.stdin.readline().strip().split()]\n    print(socks)\n\nif __name__ == \"__main__\":\n    main()\n", "\nfrom collections import Counter\n\ndef main():\n    n = int(input())\n    socks = [int(i) for i in input().split()]\n    if len(socks) % 2 == 1:\n        print(\"impossible\")\n        return\n    socks_dict = Counter(socks)\n    moves = 0\n    while len(socks_dict) > 0:\n        socks_dict = Counter({key: socks_dict[key] - 2 for key in socks_dict if socks_dict[key] >= 2})\n        moves += 1\n    print(moves * 2)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    socks = list(map(int, sys.stdin.readline().strip().split()))\n\n    if len(socks) % 2 != 0:\n        print(\"impossible\")\n        return\n\n    count = 0\n    # Sort socks by type\n    socks = sorted(socks)\n    # Count number of socks of each type\n    socks_count = {}\n    for sock in socks:\n        if sock in socks_count:\n            socks_count[sock] += 1\n        else:\n            socks_count[sock] = 1\n    # Count number of socks\n    for sock, num_socks in socks_count.items():\n        if num_socks % 2 == 0:\n            count += num_socks\n        else:\n            count += num_socks - 1\n            if len(socks_count) == 1:\n                print(\"impossible\")\n                return\n    print(count)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n = int(input())\n    socks = [int(i) for i in input().split()]\n    socks.sort()\n\n    # If there are socks of the same type, try pairing them first.\n    for i in range(0, len(socks), 2):\n        if socks[i] == socks[i + 1]:\n            socks.pop(i)\n            socks.pop(i)\n            n -= 1\n\n    # If there are no socks left, we are done.\n    if len(socks) == 0:\n        return 0\n\n    # If there is an odd number of socks left, there is no solution.\n    if len(socks) % 2 == 1:\n        return \"impossible\"\n\n    # Try to pair up the remaining socks.\n    moves = 0\n    while len(socks) > 0:\n        # If the top sock is a match for the bottom sock, pair them.\n        if socks[0] == socks[-1]:\n            socks.pop(0)\n            socks.pop(-1)\n            moves += 2\n            continue\n\n        # If the top sock is not a match for the bottom sock, try pairing it with the second from the bottom sock.\n        if socks[0] == socks[-2]:\n            socks.pop(0)\n            socks.pop(-2)\n            moves += 2\n            continue\n\n        # If the top sock is not a match for any other sock, there is no solution.\n        return \"impossible\"\n\n    return moves\n\nif __name__ == \"__main__\":\n    print(main())\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    socks = [int(x) for x in sys.stdin.readline().strip().split()]\n    socks = sorted(socks)\n    count = 0\n    if len(socks) % 2 != 0:\n        print(\"Impossible\")\n    else:\n        for i in range(0, len(socks), 2):\n            if socks[i] != socks[i+1]:\n                count += 1\n    if count == 0:\n        print(len(socks) // 2)\n    else:\n        print(\"Impossible\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    socks = list(map(int, sys.stdin.readline().strip().split()))\n\n    count = 0\n    # Sort socks by type\n    socks = sorted(socks)\n    # Count number of socks of each type\n    socks_count = {}\n    for sock in socks:\n        if sock in socks_count:\n            socks_count[sock] += 1\n        else:\n            socks_count[sock] = 1\n    # Count number of socks\n    for sock, num_socks in socks_count.items():\n        if num_socks % 2 == 0:\n            count += num_socks\n        else:\n            count += num_socks - 1\n            if len(socks_count) == 1:\n                print(\"impossible\")\n                return\n\n    if len(socks) % 2 != 0:\n        print(\"impossible\")\n        return\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n#SOLUTION\n\nfrom collections import Counter\n\n#pairs = int(input())\n#socks = list(map(int, input().split()))\npairs = 5\nsocks = [1, 2, 1, 2, 1, 3, 2]\n\nif len(socks) % 2 != 0:\n    print('impossible')\nelse:\n    sock_count = Counter(socks)\n    pairs_needed = 0\n    for i in sock_count.values():\n        pairs_needed += i // 2\n    if pairs_needed > pairs:\n        print('impossible')\n    else:\n        print(pairs * 2 - pairs_needed)\n", "\n\ndef main():\n    n = int(input())\n    socks = [int(i) for i in input().split()]\n    socks.sort()\n\n    # If there are socks of the same type, try pairing them first.\n    for i in range(0, len(socks), 2):\n        if i+1 < len(socks) and socks[i] == socks[i+1]:\n            socks.pop(i)\n            socks.pop(i)\n    \n    # If there are no socks left, we are done.\n    if len(socks) == 0:\n        return 0\n    \n    # If there is an odd number of socks left, there is no solution.\n    if len(socks) % 2 == 1:\n        return \"impossible\"\n\n    # Try to pair up the remaining socks.\n    moves = 0\n    while len(socks) > 0:\n        # If the top sock is a match for the bottom sock, pair them.\n        if socks[0] == socks[-1]:\n            socks.pop(0)\n            socks.pop(-1)\n            moves += 2\n            continue\n\n        # If the top sock is not a match for the bottom sock, try pairing it with the second from the bottom sock.\n        if socks[0] == socks[-2]:\n            socks.pop(0)\n            socks.pop(-2)\n            moves += 2\n            continue\n\n        # If the top sock is not a match for any other sock, there is no solution.\n        return \"impossible\"\n\n    return moves\n\nif __name__ == \"__main__\":\n    print(main())\n", "\n\ndef main():\n    n = int(input())  # number of socks\n    socks = [int(x) for x in input().split()]  # list of socks\n\n    # Check if it's impossible\n    if len(socks) % 2 != 0:\n        print(\"impossible\")\n        return\n\n    # Create a dictionary for the socks.\n    sock_dict = {}\n    for sock in socks:\n        sock_dict[sock] = sock_dict.get(sock, 0) + 1\n\n    # Count the number of pairs\n    pairs = 0\n    for sock in sock_dict:\n        pairs += sock_dict[sock] // 2\n\n    # Calculate the number of moves\n    moves = n - pairs\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n = int(input())\n    socks = [int(i) for i in input().split()]\n    #socks.sort()\n\n    # If there are socks of the same type, try paring them first.\n    for i in range(0, len(socks), 2):\n        #if socks[i] == socks[i+1]:\n            #socks.pop(i)\n            #socks.pop(i)\n            #n -= 1\n    \n    # If there are no socks left, we are done.\n    #if len(socks) == 0:\n        #return 0\n    \n    # If there are an odd number of socks left, there is no solution.\n    #if len(socks) % 2 == 1:\n        #return \"impossible\"\n\n    # Try to pair the remaining socks.\n    #moves = 0\n    #while len(socks) > 0:\n        # If the top sock is a match for the bottom sock, pair them up.\n        #if socks[0] == socks[-1]:\n            #socks.pop(0)\n            #socks.pop(-1)\n            #moves += 2\n            #continue\n\n        # If the top sock is not a match for the bottom sock, try paring it with the second from the bottom sock.\n        #if socks[0] == socks[-2]:\n            #socks.pop(0)\n            #socks.pop(-2)\n            #moves += 2\n            #continue\n\n        # If the top sock is not a match for any other sock, there is no solution.\n        #return \"impossible\"\n\n    #return moves\n\nif __name__ == \"__main__\":\n    print(main())\n", "import sys\nimport collections\n\ndef main():\n    n = int(sys.stdin.readline())\n    socks = list(map(int, sys.stdin.readline().split()))\n    sock_count = collections.Counter(socks)\n    if any(sock_count[x] % 2 for x in sock_count):\n        print(\"impossible\")\n    else:\n        print(sum((sock_count[x]//2) - 1 for x in sock_count))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n#SOLUTION 1\n# SOLUTION 1\n\nfrom collections import Counter\n\npairs = int(input())  # number of pairs\nsocks = list(map(int, input().split()))  # list of socks\n\nif len(socks) % 2 != 0:\n    print('impossible')\nelse:\n    sock_count = Counter(socks)\n    pairs_needed = 0\n    for i in sock_count.values():\n        pairs_needed += i // 2\n    if pairs_needed > pairs:\n        print('impossible')\n    else:\n        print(pairs * 2 - pairs_needed)  # number of socks needed\n\n\n# SOLUTION 2\nfrom collections import Counter\n\npairs = int(input())\nsocks = list(map(int, input().split()))\n\nif len(socks) % 2 != 0:\n    print('impossible')\nelse:\n    sock_count = Counter(socks)\n    pairs_needed = 0\n    for i in sock_count.values():\n        pairs_needed += i // 2\n    if pairs_needed > pairs:\n        print('impossible')\n    else:\n        print(pairs * 2 - pairs_needed)\n\n\n# SOLUTION 3\nfrom collections import Counter\n\npairs = int(input())\nsocks = list(map(int, input().split()))\n\nif len(socks) % 2 != 0:\n    print('impossible')\nelse:\n    sock_count = Counter(socks)\n    pairs_needed = 0\n    for i in sock_count.values():\n        pairs_needed += i // 2\n    if pairs_needed > pairs:\n        print('impossible')\n    else:\n        print(pairs * 2 - pairs_needed)\n\n\n# SOLUTION 4\nfrom collections import Counter\n\npairs = int(input())\nsocks = list(map(int, input().split()))\n\nif len(socks) % 2 != 0:\n    print('impossible')\nelse:\n    sock_count = Counter(socks)\n    pairs_needed = 0\n    for i in sock_count.values():\n        pairs_needed += i // 2\n    if pairs_needed > pairs:\n        print('impossible')\n    else:\n        print(pairs * 2 - pairs_needed)\n\n\n# SOLUTION 5\nfrom collections import Counter\n\npairs = int(input())\nsocks = list(map(int, input().split()))\n\nif len(socks) % 2 != 0:\n    print('impossible')\nelse:\n    sock_count = Counter(socks)\n    pairs_needed = 0\n    for i in sock_count.values():\n        pairs_needed += i // 2\n    if pairs_needed > pairs:\n        print('impossible')\n    else:\n        print(pairs * 2 - pairs_needed)\n\n\n# SOLUTION 6\nfrom collections import Counter\n\npairs = int(input())\nsocks = list(map(int, input().split()))\n\nif len(socks) % 2 != 0:\n    print('impossible')\nelse:\n    sock_count = Counter(socks)\n    pairs_needed = 0\n    for i in sock_count.values():\n        pairs_needed += i // 2\n    if pairs_needed > pairs:\n        print('impossible')\n    else:\n        print(pairs * 2 - pairs_needed)\n\n\n# SOLUTION 7\nfrom collections import Counter\n\npairs = int(input())\nsocks = list(map(int, input().split()))\n\nif len(socks) % 2 != 0:\n    print('impossible')\nelse:\n    sock_count = Counter(socks)\n    pairs_needed = 0\n    for i in sock_count.values():\n        pairs_needed += i // 2\n    if pairs_needed > pairs:\n        print('impossible')\n    else:\n        print(pairs * 2 - pairs_needed)\n\n\n# SOLUTION 8\nfrom collections import Counter\n\npairs = int(input())\nsocks = list(map(int, input().split()))\n\nif len(socks) % 2 != 0:\n    print('impossible')\nelse:\n    sock_count = Counter(socks)\n    pairs_needed = 0\n    for i in sock_count.values():\n        pairs_needed += i // 2\n    if pairs_needed > pairs:\n        print('impossible')\n    else:\n        print(pairs * 2 - pairs_needed)\n\n\n# SOLUTION 9\nfrom collections import Counter\n\npairs = int(input())\nsocks = list(map(int, input().split()))\n\nif len(socks) % 2 != 0:\n    print('impossible')\nelse:\n    sock_count = Counter(socks)\n    pairs_needed = 0\n    for i in sock_count.values():\n        pairs_needed += i // 2\n    if pairs_needed > pairs:\n        print('impossible')\n    else:\n        print(pairs * 2 - pairs_needed)\n\n\n# SOLUTION 10\nfrom collections import Counter\n\npairs = int(input())\nsocks = list(map(int, input().split()))\n\nif len(socks) % 2 != 0:\n    print('impossible')\nelse:\n    sock_count = Counter(socks)\n    pairs_needed = 0\n    for i in sock_count.values():\n        pairs_needed += i // 2\n    if pairs_needed > pairs:\n        print('impossible')\n    else:\n        print(pairs * 2 - pairs_needed)\n\n\n# SOLUTION 11\nfrom collections import Counter\n\npairs = int(input())\nsocks = list(map(int, input().split()))\n\nif len(socks) % 2 != 0:\n    print('impossible')\nelse:\n    sock_count = Counter(socks)\n    pairs_needed = 0\n    for i in sock_count.values():\n        pairs_needed += i // 2\n    if pairs_needed > pairs:\n        print('impossible')\n    else:\n        print(pairs * 2 - pairs_needed)\n\n\n# SOLUTION 12\nfrom collections import Counter\n\npairs = int(input())\nsocks = list(map(int, input().split()))\n\nif len(socks) % 2 != 0:\n    print('impossible')\nelse:\n    sock_count = Counter(socks)\n    pairs_needed = 0\n    for i in sock_count.values():\n        pairs_needed += i // 2\n    if pairs_needed > pairs:\n        print('impossible')\n    else:\n        print(pairs * 2 - pairs_needed)\n", "\n\ndef main():\n    n = int(input())\n    socks = [int(i) for i in input().split()]\n    i = 0\n    socks.sort()\n\n    # If there are socks of the same type, try pairing them first.\n    for i in range(0, len(socks), 2):\n        if socks[i] == socks[i+1]:\n        i += 2\n            socks.pop(i+1)\n            socks.pop(i+1)\n            n -= 1\n    \n    # If there are no socks left, we are finished.\n    if len(socks) == 0:\n        return 0\n    \n    # If there is an odd number of socks left, there is no solution.\n    if len(socks) % 2 == 1:\n        return \"impossible\"\n\n    # Try to pair up the remaining socks.\n    moves = 0\n    while len(socks) > 0:\n        # If the top sock is a match for the bottom sock, pair them.\n        if socks[0] == socks[-1]:\n            socks.pop(0)\n            socks.pop(-1)\n            moves += 2\n            continue\n\n        # If the top sock is not a match for the bottom sock, try pairing it with the second from the bottom sock.\n        if socks[0] == socks[-2]:\n            socks.pop(0)\n            socks.pop(-2)\n            moves += 2\n            continue\n\n        # If the top sock is not a match for any other sock, there is no solution.\n        return \"impossible\"\n\n    return moves\n\nif __name__ == \"__main__\":\n    print(main())\n", "\n\ndef main():\n    n = int(input(\"Enter the number of socks: \"))\n    socks = [int(x) for x in input(\"Enter the color of each sock: \").split()]\n\n    # Check if it's impossible\n    if len(socks) % 2 != 0:\n        print(\"Impossible!\")\n        return\n\n    # Create a dictionary for the socks.\n    sock_dict = {}\n    for sock in socks:\n        sock_dict[sock] = sock_dict.get(sock, 0) + 1\n\n    # Count the number of pairs.\n    pairs = 0\n    for sock in sock_dict:\n        pairs += sock_dict[sock] // 2 # // is floor division\n\n    # Calculate the number of moves.\n    moves = n - pairs\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nimport collections\n\ndef main():\n    n = int(sys.stdin.readline())\n    socks = map(int, sys.stdin.readline().split())\n    sock_count = collections.Counter(socks)\n    if any(sock_count[x] % 2 != 0 for x in sock_count):\n        print(\"impossible\")\n    else:\n        print(sum((sock_count[x]/2 - 1) for x in sock_count))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n = int(input()) # number of socks\n    socks = [int(x) for x in input().split()]\n\n    # Check if it's impossible\n    if len(socks) % 2 != 0:\n        print(\"impossible\")\n        return\n\n    # Create a dictionary for the socks.\n    sock_dict = {}\n    for sock in socks:\n        sock_dict[sock] = sock_dict.get(sock, 0) + 1\n\n    # Count the number of pairs.\n    pairs = 0\n    for sock in sock_dict:\n        pairs += sock_dict[sock] // 2 # // = floor division\n\n    # Calculate the number of moves.\n    moves = n - pairs\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n = int(input()) # Number of socks\n    socks = [int(i) for i in input().split()] # Types of socks\n    socks.sort() # Sort socks\n\n    # If there are socks of the same type, try pairing them first\n    for i in range(0, len(socks), 2):\n        if socks[i] == socks[i+1]:\n            socks.pop(i)\n            socks.pop(i)\n            n -= 1\n    \n    # If there are no socks left, we are finished\n    if len(socks) == 0:\n        return 0\n    \n    # If there is an odd number of socks left, there is no solution\n    if len(socks) % 2 == 1:\n        return \"impossible\"\n\n    # Try to pair up the remaining socks\n    moves = 0\n    while len(socks) > 0:\n        # If the top sock is a match for the bottom sock, pair them\n        if socks[0] == socks[-1]:\n            socks.pop(0)\n            socks.pop(-1)\n            moves += 2\n            continue\n\n        # If the top sock is not a match for the bottom sock, try pairing it with the second from the bottom sock\n        if socks[0] == socks[-2]:\n            socks.pop(0)\n            socks.pop(-2)\n            moves += 2\n            continue\n\n        # If the top sock is not a match for any other sock, there is no solution\n        return \"impossible\"\n\n    return moves\n\nif __name__ == \"__main__\":\n    print(main())\n", "\n#\nfrom collections import Counter\n\ndef main():\n    n = int(input())\n    socks = [int(i) for i in input().split()]\n    if n % 2 == 1:\n        print(\"impossible\")\n        return\n    socks_dict = Counter(socks)\n    moves = 0\n    while len(socks_dict) > 0:\n        socks_dict = Counter({key: socks_dict[key] - 2 for key in socks_dict if socks_dict[key] >= 2})\n        moves += 1\n    print(moves * 2)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nfrom collections import Counter\n\n\ndef main():\n    n = int(input())\n    socks = [int(i) for i in input().split()]\n    if len(socks) % 2 == 1:\n        print(\"impossible\")\n        return\n    socks_dict = Counter(socks)\n    moves = 0  # number of moves\n    while len(socks_dict) > 0:\n        # print(socks_dict)\n        socks_dict = Counter({key: socks_dict[key] - 2 for key in socks_dict if socks_dict[key] >= 2})\n        moves += 1\n    print(moves * 2)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nimport collections\n\ndef main():\n    n = int(sys.stdin.readline())\n    socks = map(int, sys.stdin.readline().split())\n    sock_counts = collections.Counter(socks)\n    if any(sock_counts[x] % 2 != 0 for x in sock_counts):\n        print(\"impossible\")\n    else:\n        print(sum(sock_counts[x]/2 - 1 for x in sock_counts))\n\nif __name__ == \"__main__\":\n    main()\n"]