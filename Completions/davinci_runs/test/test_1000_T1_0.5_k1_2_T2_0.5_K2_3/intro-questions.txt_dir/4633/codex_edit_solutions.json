["\nfor i in range(int(input())):\n    N, S = map(int, input().split()) # N is the number and S is the target sum of digits\n    Moves = 0\n    while sum(map(int, str(N))) > S:\n        Moves += 1\n        N += 1\n    print(Moves)\n", "\n\ndef sumOfDigits(n):\n    return sum(map(int, str(n)))\n\ndef minMoves(n, s):\n    moves = 0\n    while sumOfDigits(n) > s:\n        moves += 1\n        n += 1\n    return moves\n\nt = int(input())\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(minMoves(n, s)) \n", "def getMinMoves(n, s):\n    if n <= s:\n        return n\n    else:    \n        moves = n\n        for i in range(n):\n            if i > s:\n                break\n            moves = min(moves, getMinMoves(n - i, s) + 1)\n        return moves\n", "\ndef sum_of_digits(n):\n    return sum(map(int, str(n)))\n\ndef min_moves(n, s, moves=0):\n    while sum_of_digits(n) > s:\n        moves += 1\n        n += 1\n    return moves\n\nt = int(input())\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(min_moves(n, s))\n", "\ndef sumOfDigits(n):\n    sum = 0\n    for i in n:\n        sum += int(i)\n    return sum\n\ndef getMinMoves(n):\n    n = str(n)\n    nSum = sumOfDigits(n)\n    if nSum <= s:\n        return 0\n    else:\n        moves = 0\n        i = 0\n        while nSum > s:\n            if i == len(n) - 1:\n                n = str(int(n) + 1)\n                i = 0\n                moves += 1\n            else:\n                n = n[:i] + str(int(n[i]) - 1) + n[i+1:]\n                i += 1\n            nSum = sumOfDigits(n)\n        return moves\n\nt = int(raw_input())\n\nfor i in range(t):\n    n, s = map(int, raw_input().split())\n    print(getMinMoves(n))\n", "\ndef sum_of_digits(n):\n    _sum = 0\n    for i in n:\n        sum += int(i)\n    return sum\n\ndef get_min_moves(n):\n    n = str(n)\n    nSum = sum_of_digits(n)\n    if nSum <= s:\n        return 0\n    else:\n        moves = 0\n        i = 0\n        while nSum > s:\n            if i == len(n) - 1:\n                n = str(int(n) + 1)\n                i = 0\n                moves += 1\n            else:\n                n = n[:i] + str(int(n[i]) - 1) + n[i+1:]\n                i += 1\n            nSum = sum_of_digits(n)\n        return moves\n\nt = int(input())\n\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(get_min_moves(n))\n", "\n\ndef sum_of_digits(n):\n    sum_ = 0\n    for i in n:\n        sum_ += int(i)\n    return sum_\n\ndef get_min_moves(n):\n    n = str(n)\n    nSum = sum_of_digits(n)\n    if nSum <= s:\n        return 0\n    else:\n        moves = 0\n        i = 0\n        while nSum > s:\n            if i == len(n) - 1:\n                n = str(int(n) + 1)\n                i = 0\n                moves += 1\n            else:\n                n = n[:i] + str(int(n[i]) - 1) + n[i+1:]\n                i += 1\n            nSum = sum_of_digits(n)\n        return moves\n\nt = int(input())\n\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(get_min_moves(n))\n", "\ndef sumOfDigits(n):\n    s = 0\n    for i in n:\n        s += int(i)\n    return s\n\ndef getMinMoves(n):\n    n = str(n)\n    n_s = sumOfDigits(n)\n    if n_s <= s:\n        return 0\n    else:\n        moves = 0\n        i = 0\n        while n_s > s:\n            if i == len(n) - 1:\n                n = str(int(n) + 1)\n                i = 0\n                moves += 1\n            else:\n                n = n[:i] + str(int(n[i]) - 1) + n[i+1:]\n                i += 1\n            n_s = sumOfDigits(n)\n        return moves\n\nt = int(input())\n\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(getMinMoves(n))\n", "\n\ndef sum_of_digits(n):\n    return sum(map(int, str(n)))\n\ndef min_moves(n, s, moves=0):\n    while sum_of_digits(n) > s:\n        moves += 1\n        n += 1\n    return moves\n\nt = int(input())\nfor i in range(t):\n    n, s = map(int, input().split())\n    \n    print(min_moves(n, s))\n", "\ndef sumOfDigits(n):\n    return sum(map(int, str(n)))\n\n\ndef minMoves(n, s, n):\n    moves = 0\n    while sumOfDigits(n) > s:\n        moves += 1\n        n += 1\n    return moves\n\n\nn, s = map(int, input().split())\nprint(minMoves(n, s))\n", "\n\ndef sum_of_digits(N):\n    return sum(map(int, str(N)));\n\ndef min_moves(N, S):\n    Moves = 0;\n    while sum_of_digits(N) > S:\n        Moves += 1;\n        N += 1;\n    return Moves;\n\nt = int(input());\nfor i in range(t):\n    N, S = map(int, input().split());\n    print(min_moves(N, S));\n", "\n\ndef sum_of_digits(n):\n    sum = 0\n    for i in n:\n        sum += int(i)\n    return sum\n\n\ndef get_min_moves(n):\n    n_str = str(n)\n    n_sum = sum_of_digits(n_str)\n    if n_sum <= s:\n        return 0\n    else:\n        moves = 0\n        i = 0\n        while n_sum > s:\n            if i == len(n_str) - 1:\n                n_str = str(int(n_str) + 1)\n                i = 0\n                moves += 1\n            else:\n                n_str = n_str[:i] + str(int(n_str[i]) - 1) + n_str[i+1:]\n                i += 1\n            n_sum = sum_of_digits(n_str)\n        return moves\n\n\nt = int(input())\n\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(get_min_moves(n))\n", "\n\ndef sum_of_digits(n):\n    s = 0\n    for i in n:\n        sum += int(i)\n    return sum\n\ndef get_min_moves(n):\n    n = str(n)\n    n_sum = sum_of_digits(n)\n    if n_sum <= s:\n        return 0\n    else:\n        moves = 0\n        i = 0\n        while n_sum > s:\n            if i == len(n) - 1:\n                n = str(int(n) + 1)\n                i = 0\n                moves += 1\n            else:\n                n = n[:i] + str(int(n[i]) - 1) + n[i+1:]\n                i += 1\n            n_sum = sum_of_digits(n)\n        return moves\n\nt = int(input())\n\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(get_min_moves(n))\n", "\ndef sum_of_digits(N):\n    return sum(map(int, str(N)))\n\ndef min_moves(N, S):\n    moves = 0\n    while sum_of_digits(N) > S:\n        Moves += 1\n        N += 1\n    return Moves\n\nt = int(input())\nfor i in range(t):\n    N, S = map(int, input().split())\n    print(min_moves(N, S))\n", "\n\ndef sum_of_digits(n):\n    sum = 0\n    for i in n:\n        sum = sum + int(i)\n    return sum\n\ndef get_min_moves(n):\n    n = str(n)\n    n_sum = sum_of_digits(n)\n    if n_sum <= s:\n        return 0\n    else:\n        moves = 0\n        i = 0\n        while n_sum > s:\n            if i == len(n) - 1:\n                n = str(int(n) + 1)\n                i = 0\n                moves += 1\n            else:\n                n = n[:i] + str(int(n[i]) - 1) + n[i+1:]\n                i += 1\n            n_sum = sum_of_digits(n)\n        return moves\n\nt = int(input())\n\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(get_min_moves(n))\n", "\n\ndef sumOfDigits(n):\n  return sum(map(int, str(n)))\n\ndef minMoves(n, s):\n  moves = 0\n  while sumOfDigits(n) > s:\n    moves += 1\n    n += 1\n  return moves\n\nt = int(input())\nfor i in range(t):\n  n, s = map(int, input().split())\n  print(minMoves(n, s))\n"]