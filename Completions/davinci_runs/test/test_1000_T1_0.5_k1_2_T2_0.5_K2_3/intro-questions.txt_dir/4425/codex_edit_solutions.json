["\ndef main():\n    n, k = map(int, input().split())\n    dp = [0] * (k+1)\n    dp[k] = 1\n    for i in range(k-1, 0, -1):\n        dp[i] = dp[i+1] * (n-1) / n + (dp[i+1] + dp[i+2]) / 2\n    print(dp[1] / n)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\nN, K = map(int, input().split())\n\n# N-sided dice\nprobability_dice = 1 / N\n\n# Coin\nprobability_coin = 1 / 2\n\n# Probability that Snuke wins\nprobability_win = 0\n\nfor i in range(1, N + 1):\n    # Number of times Snuke needs to flip the coin to reach K\n    num_flips = math.ceil(math.log2(K/i))\n\n    # Probability that Snuke wins with the current dice\n    probability_win_dice = probability_coin**num_flips\n\n    # Probability that Snuke wins\n    probability_win += probability_win_dice * probability_dice\n\nprint(probability_win)\n", "\nimport sys\nimport math\n\nN, K = map(int, input().split())\n\n# N-sided dice\nprobability_dice = 1/N\n\n# Coin\nprobability_coin = 1/2\n\n# Probability that Snuke wins\nprobability_win = 0\n\nfor i in range(1, N+1):\n    # Number of times Snuke needs to flip the coin to reach K\n    num_flips = math.ceil(math.log2(K/i))\n\n    # Probability that Snuke wins with the current dice\n    probability_win_dice = probability_coin**num_flips\n\n    # Probability that Snuke wins\n    probability_win += probability_win_dice * probability_dice\n\nprint(probability_win)\n", "\ndef main():\n    n, k = map(int, input().split())\n    dp = [0] * (k+1)\n    dp[k] = 1\n    for i in range(k-1, 1, -1):\n        dp[i] = (dp[i+1] * (n-1) + (dp[i+1] + dp[i+2])) / 2 / n\n    print(dp[1])\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, k = map(int, input().split())\n    dp = [0] * (k+1)\n    dp[k] = 1\n    for i in range(k-1, 0, -1):\n        dp[i] = (dp[i+1] * (n-1) + (dp[i+1] + dp[i+2])) / n / 2\n    print(dp[1])\n\n\nif __name__ == '__main__':\n    main()\n", "\n# \u6b64\u9898\u7b80\u5355\u7684\u89e3\u6cd5\u662f\u679a\u4e3e\uff0c\u4f46\u662f\u5728\u6709\u4e9b\u60c5\u51b5\u4e0b\u4f1a\u8d85\u65f6\uff0c\u56e0\u6b64\u6539\u7528\u52a8\u6001\u89c4\u5212\n\ndef main():\n    n, k = map(int, input().split())\n    dp = [0] * (k+1)\n    dp[k] = 1\n    for i in range(k-1, 0, -1):\n        # dp[i] = dp[i+1] * (n-1) / n + (dp[i+1] + dp[i+2]) / 2 / n\n        dp[i] = (dp[i+1] + dp[i+2]) / 2\n    print(dp[1])\n\n\nif __name__ == '__main__':\n    main()\n", "import math\n\n\ndef main():\n    n, k = map(float, input().split())\n    if k * (k + 1) / 2 <= n:\n        print(int(math.ceil(n - k * (k + 1) / 2)))\n    else:\n        print(int(math.floor(2 * n / k - k / 2 - 1)))\n\n\nif __name__ == '__main__':\n    main()\n", "\n# \u6b64\u9898\u7b80\u5355\u7684\u89e3\u6cd5\u662f\u679a\u4e3e\uff0c\u4f46\u662f\u5728\u6709\u4e9b\u60c5\u51b5\u4e0b\u4f1a\u8d85\u65f6\uff0c\u56e0\u6b64\u6539\u7528\u52a8\u6001\u89c4\u5212\n\ndef main():\n    n, k = map(int, input().split())\n    dp = [0] * (k+1)\n    dp[k] = 1\n    for i in range(k-1, 0, -1):\n        dp[i] = dp[i+1] * (n-1) / n + (dp[i+1] + dp[i+2]) / (2*n)\n    print(dp[1])\n\n\nif __name__ == '__main__':\n    main()\n", "\n# \u6b64\u9898\u7b80\u5355\u7684\u89e3\u6cd5\u662f\u679a\u4e3e\uff0c\u4f46\u662f\u5728\u6709\u4e9b\u60c5\u51b5\u4e0b\u4f1a\u8d85\u65f6\uff0c\u56e0\u6b64\u6539\u7528\u52a8\u6001\u89c4\u5212\n\ndef main():\n    n, k = map(int, input().split())\n    dp = [0] * (k+1)\n    dp[k] = 1\n    for i in range(k-1, 0, -1):\n        dp[i] = dp[i+1] * (n-1) / n + (dp[i+1] + dp[i+2]) / 2 / n  # \u4e24\u79cd\u60c5\u51b5\uff0c\u4e00\u79cd\u662f\u731c\u4e2d\uff0c\u4e00\u79cd\u662f\u731c\u9519\n    print(dp[1])\n\n\nif __name__ == '__main__':\n    main()\n", "from math import ceil, floor\n\n\n\ndef main():\n    n, k = map(float, input().split())\n    if k * (k + 1) / 2 <= n:\n        print(int(ceil(n - k * (k + 1) / 2)))\n    else:\n        print(int(floor(2 * n / k - k / 2 - 1)))\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\n\n\ndef main():\n    a, b = map(float, input().split())\n    print(a+b)\n\n\nif __name__ == '__main__':\n    main()\n"]