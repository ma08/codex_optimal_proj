2022-04-09 21:16:58.931863 """
A permutation of length $n$ is an array $p=[p_1,p_2,\dots,p_n]$, which contains every integer from $1$ to $n$ (inclusive) and, moreover, each number appears exactly once. For example, $p=[3,1,4,2,5]$ is a permutation of length $5$.

For a given number $n$ ($n \ge 2$), find a permutation $p$ in which absolute difference (that is, the absolute value of difference) of any two neighboring (adjacent) elements is between $2$ and $4$, inclusive. Formally, find such permutation $p$ that $2 \le |p_i - p_{i+1}| \le 4$ for each $i$ ($1 \le i < n$).

Print any such permutation for the given integer $n$ or determine that it does not exist.


-----Input-----

The first line contains an integer $t$ ($1 \le t \le 100$) â€” the number of test cases in the input. Then $t$ test cases follow.

Each test case is described by a single line containing an integer $n$ ($2 \le n \le 1000$).


-----Output-----

Print $t$ lines. Print a permutation that meets the given requirements. If there are several such permutations, then print any of them. If no such permutation exists, print -1.


-----Example-----
Input
6
10
2
4
6
7
13

Output
9 6 10 8 4 7 3 1 5 2 
-1
3 1 4 2 
5 3 6 2 4 1 
5 1 3 6 2 4 7 
13 9 7 11 8 4 1 3 5 2 6 10 12
"""
2022-04-09 21:16:58.931893 --------------------------
2022-04-09 21:17:19.105458 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef is_valid(p):\n    n = len(p)\n    for i in range(n-1):\n        if abs(p[i] - p[i+1]) < 2 or abs(p[i] - p[i+1]) > 4:\n            return False\n    return True\n\ndef permute(n):\n    p = list(range(1, n+1))\n    while True:\n        if is_valid(p):\n            return p\n        p = next_permutation(p)\n\ndef next_permutation(p):\n    n = len(p)\n    i = n - 2\n    while i >= 0 and p[i] >= p[i+1]:\n        i -= 1\n    if i == -1:\n        return None\n    j = i + 1\n    while j < n and p[j] > p[i]:\n        j += 1\n    j -= 1\n    p[i], p[j] = p[j], p[i]\n    p[i+1:] = p[:i:-1]\n    return p\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    p = permute(n)\n    if p is None:\n        print(-1)\n    else:\n        print(' '.join(map(str, p)))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef check_constraints(p):\n    for i in range(len(p)-1):\n        if p[i+1] - p[i] not in [2,3,4]:\n            return False\n    return True\n\ndef get_permutation(n):\n    if n == 2:\n        return [-1]\n    elif n == 3:\n        return [3,1,2]\n    elif n == 4:\n        return [3,1,4,2]\n    elif n == 5:\n        return [5,3,1,4,2]\n    else:\n        p = [5,3,1,4,2]\n        for i in range(5,n+1):\n            p.append(p[len(p)-1] + 2)\n        return p\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        p = get_permutation(n)\n        if p[0] == -1:\n            print(-1)\n        else:\n            print(*p)\n\nmain()"
    }
  ],
  "created": 1649553419,
  "id": "cmpl-4vGUFSAiMbgxX5tq5N3RV34V0E8ju",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 21:17:19.105719 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef is_valid(p):\n    n = len(p)\n    for i in range(n-1):\n        if abs(p[i] - p[i+1]) < 2 or abs(p[i] - p[i+1]) > 4:\n            return False\n    return True\n\ndef permute(n):\n    p = list(range(1, n+1))\n    while True:\n        if is_valid(p):\n            return p\n        p = next_permutation(p)\n\ndef next_permutation(p):\n    n = len(p)\n    i = n - 2\n    while i >= 0 and p[i] >= p[i+1]:\n        i -= 1\n    if i == -1:\n        return None\n    j = i + 1\n    while j < n and p[j] > p[i]:\n        j += 1\n    j -= 1\n    p[i], p[j] = p[j], p[i]\n    p[i+1:] = p[:i:-1]\n    return p\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    p = permute(n)\n    if p is None:\n        print(-1)\n    else:\n        print(' '.join(map(str, p)))"
}
2022-04-09 21:17:19.105761 REASON stop
2022-04-09 21:17:19.107256 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef check_constraints(p):\n    for i in range(len(p)-1):\n        if p[i+1] - p[i] not in [2,3,4]:\n            return False\n    return True\n\ndef get_permutation(n):\n    if n == 2:\n        return [-1]\n    elif n == 3:\n        return [3,1,2]\n    elif n == 4:\n        return [3,1,4,2]\n    elif n == 5:\n        return [5,3,1,4,2]\n    else:\n        p = [5,3,1,4,2]\n        for i in range(5,n+1):\n            p.append(p[len(p)-1] + 2)\n        return p\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        p = get_permutation(n)\n        if p[0] == -1:\n            print(-1)\n        else:\n            print(*p)\n\nmain()"
}
2022-04-09 21:17:19.107389 REASON stop
