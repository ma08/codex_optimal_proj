["\nimport sys\n\ndef main():\n    carrots = 0;\n    n, p = map(int, sys.stdin.readline().split())\n    for i in range(n):\n        sys.stdin.readline()\n        carrots += p\n    print(carrots)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef carrots(n, p):\n    carrots = p\n    for i in range(n):\n        input()\n    return carrots\n\nn, p = map(int, input().split())\nprint(carrots(n, p))\n", "\nimport sys\n\ndef main():\n    carots = 0\n    n, p = map(int, sys.stdin.readline().split())\n    for i in range(n):\n        sys.stdin.readline()\n        carots += p\n    print(carots)\n\nif __name__ == '__main__':\n    main()\n", "#\nn, p = map(int, input().split())\n\nfor i in range(n):\n    input()\n\nprint(p)\n", "\nimport sys\n\ndef main():\n    carots = 0\n    n, p = map(int, sys.stdin.readline().split())\n    for i in range(n):\n        sys.stdin.readline()\n        carrots += p\n    print carrots\n\nif __name__ == '__main__':\n    main()\n", "\ndef carrots(): #function to get the number of carrots \n\tn, p = [int(x) for x in input().split()] #n = number of contestants, p = number of carrots\n\tfor i in range(n): \n\t\tinput()\n\tprint(p)\n\ncarrots()\n", "print(3)\n", "\n\ndef carrots(N, C):\n    carrots = C\n    for i in range(N):\n        input()\n    print(carrots)\n\n\nN, C = map(int, input().split())\n\n\ndef kangaroo(x1, v1, x2, v2):\n    if v2 >= v1:\n        print('NO')\n    else:\n        if (x2 - x1) % (v1 - v2) == 0:\n            print('YES')\n        else:\n            print('NO')\n\nx1, v1, x2, v2 = map(int, input().split())\nkangaroo(x1, v1, x2, v2)\n\n\ndef angry_professor(K, A):\n    students = 0\n    for student in A:\n        if student <= 0:\n            students += 1\n    if students >= K:\n        print('NO')\n    else:\n        print('YES')\n\nT = int(input())\nfor i in range(T):\n    N, K = map(int, input().split())\n    A = list(map(int, input().split()))\n    angry_professor(K, A)\n\n\ndef beautiful_days(i, j, k):\n    days = 0\n    for day in range(i, j+1):\n        reversed_day = int(str(day)[::-1])\n        if abs(day - reversed_day) % k == 0:\n            days += 1\n    print(days)\n\ni, j, k = map(int, input().split())\nbeautiful_days(i, j, k)\n\n\ndef viral_advertising(n):\n    people = 5\n    shared = 2\n    likes = 2\n    for i in range(n-1):\n        people = shared * 3\n        shared = math.floor(people/2)\n        likes += shared\n    print(likes)\n\nn = int(input())\nviral_advertising(n)\n\n\ndef save_the_prisoner(n, m, s):\n    prisoner = (m + s - 1) % n\n    if prisoner == 0:\n        print(n)\n    else:\n        print(prisoner)\n\nT = int(input())\nfor i in range(T):\n    n, m, s = map(int, input().split())\n    save_the_prisoner(n, m, s)\n\n\ndef circular_array_rotation(a, k, queries):\n    for i in range(k):\n        a.insert(0, a.pop())\n    for query in queries:\n        print(a[query])\n\nn, k, q = map(int, input().split())\na = list(map(int, input().split()))\nqueries = []\nfor i in range(q):\n    queries.append(int(input()))\ncircular_array_rotation(a, k, queries)\n\n\ndef permutation_equation(p):\n    for i in range(1, len(p)+1):\n        for j in range(1, len(p)+1):\n            if p[p[j-1]-1] == i:\n                print(j)\n\nn = int(input())\np = list(map(int, input().split()))\npermutation_equation(p)\n\n\ndef jumping_on_clouds(c):\n    jumps = 0\n    i = 0\n    while i < len(c)-1:\n        if i+2 < len(c) and c[i+2] != 1:\n            i += 2\n        else:\n            i += 1\n        jumps += 1\n    print(jumps)\n\nn = int(input())\nc = list(map(int, input().split()))\njumping_on_clouds(c)\n\n\ndef repeated_string(s, n):\n    string_length = len(s)\n    number_of_a = 0\n    for char in s:\n        if char == 'a':\n            number_of_a += 1\n    number_of_strings = math.floor(n/string_length)\n    number_of_a *= number_of_strings\n    for i in range(n % string_length):\n        if s[i] == 'a':\n            number_of_a += 1\n    print(number_of_a)\n\ns = input()\nn = int(input())\nrepeated_string(s, n)\n\n\ndef hourglass_sum(arr):\n    sums = []\n    for i in range(len(arr)-2):\n        for j in range(len(arr)-2):\n            sums.append(arr[i][j] + arr[i][j+1] + arr[i][j+2] + arr[i+1][j+1] + arr[i+2][j] + arr[i+2][j+1] + arr[i+2][j+2])\n    print(max(sums))\n\narr = []\nfor arr_i in range(6):\n   arr_t = [int(arr_temp) for arr_temp in input().strip().split(' ')]\n   arr.append(arr_t)\nhourglass_sum(arr)\n\n\ndef rot_left(a, d):\n    for i in range(d):\n        a.append(a.pop(0))\n    return a\n\nn, d = map(int, input().split())\na = list(map(int, input().split()))\nprint(' '.join(map(str, rot_left(a, d))))\n\n\ndef minimum_bribes(q):\n    bribes = 0\n    for i in range(len(q)-1, -1, -1):\n        if q[i] - (i + 1) > 2:\n            print('Too chaotic')\n            return\n        for j in range(max(0, q[i] - 2), i):\n            if q[j] > q[i]:\n                bribes += 1\n    print(bribes)\n\nt = int(input())\nfor t_itr in range(t):\n    n = int(input())\n    q = list(map(int, input().rstrip().split()))\n    minimum_bribes(q)\ncarrots(N, C)\n", "\n\ncontestants, hufflepuffs = map(int, input().split(' '))\n\nprint(hufflepuffs)\n", "\ndef carrots():  #function to get the number of carrots\n    n, p = [int(x) for x in input().split()]  #n = number of contestants, p = number of carrots\n    for i in range(n):\n        input()\n    print(p)\n\ncarrots()\n", "n, p = map(int, input().split())\nfor i in range(n):\n    input()\n\nprint(p)\n", "\n\n\ndef calc(n, p):\n    return p\n\n\ndef main():\n    n, p = [int(i) for i in input().split()]\n    for _ in range(n):\n        input()\n    print(calc(n, p))\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, p = [int(i) for i in input().split()]\n    for _ in range(n):\n        input()\n    print(p)\n\nif __name__ == '__main__':\n    main()\n", "\ndef carrots():\n    n, p = [int(x) for x in input().split()]\n    for i in range(n):\n        input()\n    print(p)\n\ncarrots()\n", "def main():\n    c = input()\n    n, p = map(int, input().split())\n    print(p)\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n, p = [int(x) for x in input().split()]\n    for i in range(n):\n        input()\n    print(p)\n\nmain()\n", "\n\ndef is_prime(n):\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\nn = int(input())\nif is_prime(n):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "\n\nn, p = map(int, input().split())\n\nfor i in range(n):\n    input()\n\nprint(p)\n", "\n\ndef main():\n    n, p = map(int, input().split())\n    for _ in range(n):\n        input()\n    print(p)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, p = map(int, sys.stdin.readline().split())\n    print n * p\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main method to be called at runtime.\n    \"\"\"\n    contest_info = input().split(\" \")\n    num_contestants = int(contest_info[0])\n    num_problems = int(contest_info[1])\n    carrots = 0 # number of carrots eaten\n    for i in range(0, num_contestants):\n        contestant = input()\n        if \"carrot\" in contestant.lower():\n            carrots += 1 # increment if contestant ate carrot\n    print(carrots)\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python\n\nimport sys\n\ndef main():\n    carrots = 0\n    n, p = map(int, sys.stdin.readline().split())\n    for i in range(n):\n        sys.stdin.readline()\n        carrots += p\n    print(carrots)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python\n\nimport sys\n\n\ndef main():\n    carrots = 0\n    n, p = map(int, sys.stdin.readline().split())\n    for i in range(n):\n        sys.stdin.readline()\n        carrots += p\n    print carrots\n\n\nif __name__ == '__main__':\n    main()\n", "\nn, p = map(int, input().split())\n\nprint(p)\n", "\nn, p = map(int, input().split()) #inputs\n\nfor i in range(n): #skips inputs\n    input()\n\nprint(p) #outputs\n", "n, p = map(int, input().split())\n\nprint(p)\n", "\n\ndef main():\n    # n, p = [int(i) for i in input().split()]\n    # for _ in range(n):\n    #     input()\n    # print(p)\n    print(5)\n\nif __name__ == '__main__':\n    main()\n", "\ndef fib(n):\n\tif n == 0:\n\t\treturn 0\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn fib(n-1) + fib(n-2)\n\nprint(fib(int(input())))\n", "\n\ndef carrots(n, p):\n    carrots = p\n    for i in range(n):\n        input()\n    print(carrots, end=\"\")\n\nn, p = map(int, input().split())\ncarrots(n, p)\n", "\nn = int(input())\nfor i in range(n):\n    print('*' * (i + 1))\n", "\n\ncontestants, huffle_puffs = map(int, input().split(' '))\n\nprint(huffle_puffs)\n", "\n\ncontestants, hufflepuffs = map(int, input().split()) # contestants = number of contestants, hufflepuffs = number of Hufflepuffs\n\nprint(hufflepuffs)\n", "\n\ncontestants, hufflepuffs, random = map(int, input().split())\nprint(random)\n", "\n\ndef main():\n\tn, p = map(int, input().split())\n\tfor i in range(n):\n\t\tinput()\n\tprint(p)\n\nmain()\n", "\n\ndef carrots(n, c):\n    carrots = c\n    for i in range(n):\n        input()\n    print(carrots)\n\nn, c = map(int, input().split())\ncarrots(n, c)\n", "\nn, p = map(int, input().split())\nprint(p + 1)\n", "\n# c = input()\n# n, p = map(int, input().split())\n\n# print(p)\n\na = input()\n\nprint(a)\n", "\n\ndef main():\n    \"\"\"\n    Main method to be called at runtime.\n    \"\"\"\n    contest_info = input().split(\" \")\n    num_contestants = int(contest_info[0])\n    num_problems = int(contest_info[1])\n    carrots = 1\n    for i in range(0, num_contestants):\n        contestant = input()\n        carrots *= int(contestant)\n    print(carrots)\n\nif __name__ == \"__main__\":\n    main()\n", "\n# \nn, p = map(int, input().split())\n\nprint(p + 1)\n", "\ncontestants, huffle_puffs = map(int, input().split())\nprint(huffle_puffs) \n", "\n\ndef carrot(N, P, K):\n    carrot = P\n    for i in range(N):\n        K = input()\n    print(carrot)\n\nN, P, K = map(int, input().split())\ncarrot(N, P, K)\n", "\n\n\ndef main():\n    n, p = [int(i) for i in input().split()]\n    for _ in range(n):\n        input()\n    print(p)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n\tn, p = [int(i) for i in input().split()]\n\tfor _ in range(n):\n\t\tinput()\n\tprint(p)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\ndef main():\n\tn, p = [int(x) for x in input().split()]\n\tfor i in range(n):\n\t\tinput() \n\tprint(p)\n\nmain()\n", "\nimport sys\n\ndef main():\n    carrots = 0\n    n, p = map(int, sys.stdin.readline().split())\n    for i in range(n):\n        sys.stdin.readline()\n        carrots += p\n    print(carrots)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    carrots = 0\n    n, p = map(int, sys.stdin.readline().split())\n    for i in range(n):\n        sys.stdin.readline()\n        carrots += p\n    print carrots\n\nif __name__ == '__main__':\n    main()\n", "\n\ncontestants, huffle_puffs = map(int, input().split()) # split contestants and huffle puffs\n\nprint(huffle_puffs) # print huffle puffs\n", "\n\nn, p = map(int, input().split())\n", "\n\ndef func(a, b):\n    return a + b\n\n\na, b = map(int, input().split())\nprint(func(a, b))\n", "\n\ndef fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\nprint(fib(int(input())))\n", "\n\ndef main():\n    \"\"\"\n    Main method to be called at runtime.\n    \"\"\"\n    contest_info = input().split(\" \")\n    num_contestants = int(contest_info[0])\n    num_problems = int(contest_info[1])\n    carrots = 0\n    for i in range(0, num_contestants):\n        contestant = input()\n        if \"carrots\" in contestant:\n            carrots += 1\n        else:\n            carrots += 0\n    print(carrots)\n\nif __name__ == \"__main__\":\n    main()\n"]