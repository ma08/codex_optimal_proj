["\nimport sys\n\ndef main():\n    count = 0\n    regs = [0] * 20\n    while True:\n        regs[0] += 1\n        if regs[0] == 20:\n            regs[0] = 0\n            regs[1] += 1\n            if regs[1] == 20:\n                regs[1] = 0\n                regs[2] += 1\n                if regs[2] == 20:\n                    regs[2] = 0\n                    regs[3] += 1\n                    if regs[3] == 20:\n                        regs[3] = 0\n                        regs[4] += 1\n                        if regs[4] == 20:\n                            regs[4] = 0\n                            regs[5] += 1\n                            if regs[5] == 20:\n                                regs[5] = 0\n                                regs[6] += 1\n                                if regs[6] == 20:\n                                    regs[6] = 0\n                                    regs[7] += 1\n                                    if regs[7] == 20:\n                                        regs[7] = 0\n                                        regs[8] += 1\n                                        if regs[8] == 20:\n                                            regs[8] = 0\n                                            regs[9] += 1\n                                            if regs[9] == 20:\n                                                regs[9] = 0\n                                                regs[10] += 1\n                                                if regs[10] == 20:\n                                                    regs[10] = 0\n                                                    regs[11] += 1\n                                                    if regs[11] == 20:\n                                                        regs[11] = 0\n                                                        regs[12] += 1\n                                                        if regs[12] == 20:\n                                                            regs[12] = 0\n                                                            regs[13] += 1\n                                                            if regs[13] == 20:\n                                                                regs[13] = 0\n                                                                regs[14] += 1\n                                                                if regs[14] == 20:\n                                                                    regs[14] = 0\n                                                                    regs[15] += 1\n                                                                    if regs[15] == 20:\n                                                                        regs[15] = 0\n                                                                        regs[16] += 1\n                                                                        if regs[16] == 20:\n                                                                            regs[16] = 0\n                                                                            regs[17] += 1\n                                                                            if regs[17] == 20:\n                                                                                regs[17] = 0\n                                                                                regs[18] += 1\n                                                                                if regs[18] == 20:\n                                                                                    regs[18] = 0\n                                                                                    regs[19] += 1\n                                                                                    if regs[19] == 20:\n                                                                                        regs[19] = 0\n                                                                                        break\n        count += 1\n\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(20) #add 20 to the list\n    v.append(0) #add 0 to the list\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6]) #print the product of all the elements in the list\n\nmain()\n", "#!/usr/bin/python3\n\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        #if v19 == 18:\n                                        #    sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n", "\nimport sys\n\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]  # list of scores\n    out = 0  # initialise out\n    for i in range(8):  # for each score\n        out += 19 - vals[i]  # add 19 - score to out\n    print(out)  # print out\n\n\nmain()\n", "\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    # for i in range(2, 20):\n    #     print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i)\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19))\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 0:\n                                            break\n        N += 1\n    if N == 0:\n        N = -1\n    print(N)\n\nmain()\n", "def main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19]\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == \"__main__\":\n    main()\n\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19]\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    out = 0\n    for i in range(8):\n        out += 19 - vals[i] * 2\n    print(out)\n\nmain()\n", "\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the least significant digit\n    # without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()[:19]]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    vals = [int(x) for x in input().split()]\n    out = 0\n    for i in range(7, -1, -1):\n        out += 19 - vals[i]\n    print(out)\n\nmain()\n", "\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()]  # read input\n    # for i in range(2, 20):\n    #    print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i)  # debug\n    print(min(20 - v2, 20 - v3, 20 - v5, 20 - v7, 20 - v11, 20 - v13, 20 - v17, 20 - v19))  # output\n\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(20);\n    v.append(0);\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6])\n\nmain()\n", "\n\nimport sys, os\n\ndef main():\n    print(\"hello world\")\n    print(os.getcwd())\n\nmain()\n", "\n\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 18:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split()]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(19);\n    v.append(0);\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6]*v[7]);\n\nmain()\n", "\n\ndef main():\n    v = [int(i) for i in input().split()]\n    print(min(20 - v[0], 20 - v[1], 20 - v[2], 20 - v[3], 20 - v[4], 20 - v[5], 20 - v[6], 20 - v[7]))\n\nmain()\n", "\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do? if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more. the question is how many more\n    # can we do? we can do as many more as we can increment the least\n    # significant register without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] >= 18:\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the least significant digit\n    # without overflowing\n    return 18 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Read in the current state of the registers.\n    \"\"\"\n    registers = [int(i) for i in input().split()]\n\n    \"\"\"\n    First, find the first non-zero register.\n    \"\"\"\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    \"\"\"\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    \"\"\"\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    \"\"\"\n    Otherwise, the number of operations that can be performed is the product\n    of the register sizes of all registers following the first non-zero register.\n    \"\"\"\n    print(reduce(lambda x, y: x * y, [19 - registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n", "\n\ndef main():\n    pass\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(18)\n    v.append(18)\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6])\n\nmain()\n", "\n\ndef main():\n    \"\"\"\n    Read in the current state of the registers.\n    \"\"\"\n    registers = [int(i) for i in input().split()]\n\n    \"\"\"\n    First, find the first non-zero register.\n    \"\"\"\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    \"\"\"\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    \"\"\"\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    \"\"\"\n    Otherwise, the number of operations that can be performed is the product of\n    the register sizes of all registers following the first non-zero\n    register.\n    \"\"\"\n    print(reduce(lambda x, y: x * y, [registers[i] for i in range(first_non_zero + 1, len(registers))])\n\nmain()\n", "\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19] # max prime number in each register\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [0, 1, 2, 3, 4, 5, 6, 7]\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i]:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] == 18: # this is the carry flag\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the most significant register\n    # without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Read in the current state of the registers.\n    \"\"\"\n    registers = [int(i) for i in input().split()]\n\n    \"\"\"\n    First, find the first non-zero register.\n    \"\"\"\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    \"\"\"\n    If the first non-zero register is the last register, then the number of \n    operations that can be performed is the difference between the register \n    value and the register size. \n    \"\"\"\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    \"\"\"\n    Otherwise, the number of operations that can be performed is the product \n    of the register sizes of all registers following the first non-zero \n    register. \n    \"\"\"\n    print(reduce(lambda x, y: x * y, [registers[i] for i in range(first_non_zero + 1, len(registers))], 1))\n\nmain()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 19:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return 1\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split()]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Read in the current state of the registers.\n    \"\"\"\n    registers = [int(i) for i in input().split()]\n\n    \"\"\"\n    First, find the first non-zero register.\n    \"\"\"\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    \"\"\"\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    \"\"\"\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    \"\"\"\n    Otherwise, the number of operations that can be performed is the product of\n    the register sizes of all registers following the first non-zero\n    register.\n    \"\"\"\n    print(reduce(lambda x, y: x * y, [19 - registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n", "import sys\nimport numpy as np\nimport math\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 18:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\ndef get_val(regs):\n    return sum(regs)\n\ndef get_reg(val):\n    regs = [0] * int(math.log(val, 18)) + [1]\n    while get_val(regs) != val:\n        regs = next_reg(regs, 0)\n    return regs\n\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split(' ')]\n    print(np.array([get_reg(x) for x in vals]))\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 18:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split(' ')]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, sys.stdin.readline().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n", "\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19]  # max prime number in each register\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()]\n    # for i in range(2, 20):\n    #    print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i)\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19))\n\n\nmain()\n", "\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] == 19:\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the most significant register\n    # without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    # for i in range(2, 20):\n    #     print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i)\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19))\n\nmain()\n", "#!/usr/bin/env python3\n\nimport sys\n\n    # if we can't do any more, we're done\ndef compute(registers):\n    # how many more operations can we do? if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more. we can do as many more as we\n    # can increment the least significant register without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Read in the current state of the registers.\n    \"\"\"\n    registers = [int(i) for i in input().split()]\n\n    \"\"\"\n    First, find the first non-zero register.\n    \"\"\"\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    \"\"\"\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    \"\"\"\n    if first_non_zero == len(registers) - 1:\n        print(registers[first_non_zero] - 1)\n        return\n\n    \"\"\"\n    Otherwise, the number of operations that can be performed is the product\n    of the register sizes of all registers following the first non-zero register.\n    \"\"\"\n    print(reduce(lambda x, y: x * y, [registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n", "\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19]\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1 and registers[i] != 0:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(18);\n    v.append(0);\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6])\n\nmain()\n", "import sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.extend([19, 0])\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6]*v[7])\n\nmain()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        v2 = (v2 + 1) % 2\n        if v2 == 1:\n            v3 = (v3 + 1) % 3\n            if v3 == 2:\n                v5 = (v5 + 1) % 5\n                if v5 == 4:\n                    v7 = (v7 + 1) % 7\n                    if v7 == 6:\n                        v11 = (v11 + 1) % 11\n                        if v11 == 10:\n                            v13 = (v13 + 1) % 13\n                            if v13 == 12:\n                                v17 = (v17 + 1) % 17\n                                if v17 == 16:\n                                    v19 = (v19 + 1) % 19\n                                    if v19 == 18:\n                                        sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n", "\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()]\n    # for i in range(2, 20):\n    #     print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i)\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19))\n\nmain()\n", "\nfile_name = input(\"Enter file name: \")\nfile_handle = open(file_name,\"r\")\nfor line in file_handle:\n    line = line.rstrip()\n    print(line)\n", "import sys\n\ndef next_reg(regs, i):\n\tregs[i] += 1\n\tif i == len(regs)-1:\n\t\treturn 0\n\telif regs[i] == 20:\n\t\tregs[i] = 0\n\t\treturn next_reg(regs, i+1)\n\telse:\n\t\treturn regs\n\ndef main():\n\tregs = [int(x) for x in sys.stdin.readline().split(' ')]\n\tcount = 0\n\twhile next_reg(regs, 0):\n\t\tcount += 1\n\tprint(count)\nif __name__ == '__main__':\n\tmain()\n", "\n\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 20:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split()]\n    count = 0\n    while True:\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, sys.stdin.readline().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        v2 = (v2 + 1) % 2\n        if v2 == 1:\n            v3 = (v3 + 1) % 3\n            if v3 == 2:\n                v5 = (v5 + 1) % 5\n                if v5 == 4:\n                    v7 = (v7 + 1) % 7\n                    if v7 == 6:\n                        v11 = (v11 + 1) % 11\n                        if v11 == 10:\n                            v13 = (v13 + 1) % 13\n                            if v13 == 12:\n                                v17 = (v17 + 1) % 17\n                                if v17 == 16:\n                                    v19 = (v19 + 1) % 19\n                                    if v19 == 18:\n                                        sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n", "\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()][:8]\n    out = 0\n    for i in range(7, -1, -1):\n        out += 19 - vals[i]\n    print(out)\n\nmain()\n", "\nimport sys\n\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 19:\n        regs[i] = 0\n        return next_reg(regs, i + 1)\n    else:\n        regs[i] += 1\n        return regs\n\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split(' ')]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 19:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split(' ')]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the least significant digit\n    # without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    out = 0\n    for i in range(8):\n        out += 19 - vals[i]\n    print(out)\n\nmain()\n", "\"\"\"\nThis is a solution to the problem found at https://open.kattis.com/problems/filefixit\n\"\"\"\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:  # check if all values are 18\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(20);\n    v.append(0);\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6]);\n\nmain();\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    pass\n\nmain()\n", "\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()]\n    for i in range(2, 20):\n        print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i) \n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19))\n\nmain()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(19)\n    v.append(0)\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6]*v[7])\n\nmain()\n", "\nimport sys\n\ndef compute(r):\n    # if the top register is full, we can't do any more\n    if r[-1] == 18: return 0\n    # otherwise, we can do as many more as we can increment the top register\n    # without overflowing\n    return 19 - r[0]\n\ndef main():\n    r = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(r))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    out = 0\n    for i in range(7, -1, -1):\n        out += 19 - vals[i]*2\n    print(out)\n\nmain()\n", "\n#!/usr/bin/python\n\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(18)\n    v.append(0)\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6])\n\nmain()\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, sys.stdin.readline().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n", "import sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split()) #input\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n", "\n\ndef main():\n    \"\"\"\n    Read in the current state of the registers.\n    \"\"\"\n    registers = [int(i) for i in input().split()]\n\n    \"\"\"\n    First, find the first non-zero register.\n    \"\"\"\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    \"\"\"\n    If the first non-zero register is the last register, then the number of \n    operations that can be performed is the difference between the register \n    value and the register size. \n    \"\"\"\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    \"\"\"\n    Otherwise, the number of operations that can be performed is the product \n    of the register sizes of all registers following the first non-zero \n    register. \n    \"\"\"\n    print(reduce(lambda x, y: x * y, [registers[i] for i in range(first_non_zero + 1, len(registers))])\n\nmain()\n", "\n\ndef main():\n    \"\"\"\n    Read in the current state of the registers.\n    \"\"\"\n    registers = [int(i) for i in input().split()]\n\n    \"\"\"\n    First, find the first non-zero register.\n    \"\"\"\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    \"\"\"\n    If the first non-zero register is the last register, then the number of \n    operations that can be performed is the difference between the register \n    value and the register size. \n    \"\"\"\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    \"\"\"\n    Otherwise, the number of operations that can be performed is the product \n    of the register sizes of all registers following the first non-zero \n    register. \n    \"\"\"\n    print(reduce(lambda x, y: x * y, [19 - registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n"]