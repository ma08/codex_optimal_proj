2022-04-13 01:40:59.611273 num operations 2
2022-04-13 01:40:59.611285 size on input set 1
2022-04-13 01:41:02.374658 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19] # max prime number in each register\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19]\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19]\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649814059,
  "object": "edit"
}
2022-04-13 01:41:02.374912 fix spelling mistakes 3 ['\n\n\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19] # max prime number in each register\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19]\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19]\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 01:41:02.374954 size on output set 2
2022-04-13 01:41:02.374963 size on input set 2
2022-04-13 01:41:05.351183 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19]  # max prime number in each register\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19]  # max prime number in each register\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19] # max prime number in each register\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649814062,
  "object": "edit"
}
2022-04-13 01:41:05.351387 fix syntax errors 3 ['\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19]  # max prime number in each register\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19]  # max prime number in each register\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19] # max prime number in each register\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 01:41:10.475439 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "def main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19]\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == \"__main__\":\n    main()\n\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19]\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [0, 1, 2, 3, 4, 5, 6, 7]\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i]:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19]\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1 and registers[i] != 0:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649814065,
  "object": "edit"
}
2022-04-13 01:41:10.475637 fix syntax errors 3 ['def main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19]\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == "__main__":\n    main()\n\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19]\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [0, 1, 2, 3, 4, 5, 6, 7]\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i]:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19]\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1 and registers[i] != 0:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 01:41:10.475790 size on output set 5
2022-04-13 01:41:10.475806 num operations 2
2022-04-13 01:41:10.475811 size on input set 1
2022-04-13 01:41:15.107840 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Read in the current state of the registers.\n    \"\"\"\n    registers = [int(i) for i in input().split()]\n\n    \"\"\"\n    First, find the first non-zero register.\n    \"\"\"\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    \"\"\"\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    \"\"\"\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    \"\"\"\n    Otherwise, the number of operations that can be performed is the product\n    of the register sizes of all registers following the first non-zero register.\n    \"\"\"\n    print(reduce(lambda x, y: x * y, [registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Read in the current state of the registers.\n    \"\"\"\n    registers = [int(i) for i in input().split()]\n\n    \"\"\"\n    First, find the first non-zero register.\n    \"\"\"\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    \"\"\"\n    If the first non-zero register is the last register, then the number of \n    operations that can be performed is the difference between the register \n    value and the register size. \n    \"\"\"\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    \"\"\"\n    Otherwise, the number of operations that can be performed is the product \n    of the register sizes of all registers following the first non-zero \n    register. \n    \"\"\"\n    print(reduce(lambda x, y: x * y, [registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    \"\"\"\n    Read in the current state of the registers.\n    \"\"\"\n    registers = [int(i) for i in input().split()]\n\n    \"\"\"\n    First, find the first non-zero register.\n    \"\"\"\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    \"\"\"\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    \"\"\"\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    \"\"\"\n    Otherwise, the number of operations that can be performed is the product of\n    the register sizes of all registers following the first non-zero\n    register.\n    \"\"\"\n    print(reduce(lambda x, y: x * y, [registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n"
    }
  ],
  "created": 1649814070,
  "object": "edit"
}
2022-04-13 01:41:15.108058 fix spelling mistakes 3 ['\n\ndef main():\n    """\n    Read in the current state of the registers.\n    """\n    registers = [int(i) for i in input().split()]\n\n    """\n    First, find the first non-zero register.\n    """\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    """\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    """\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    """\n    Otherwise, the number of operations that can be performed is the product\n    of the register sizes of all registers following the first non-zero register.\n    """\n    print(reduce(lambda x, y: x * y, [registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n', '\n\ndef main():\n    """\n    Read in the current state of the registers.\n    """\n    registers = [int(i) for i in input().split()]\n\n    """\n    First, find the first non-zero register.\n    """\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    """\n    If the first non-zero register is the last register, then the number of \n    operations that can be performed is the difference between the register \n    value and the register size. \n    """\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    """\n    Otherwise, the number of operations that can be performed is the product \n    of the register sizes of all registers following the first non-zero \n    register. \n    """\n    print(reduce(lambda x, y: x * y, [registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n', '\n\ndef main():\n    """\n    Read in the current state of the registers.\n    """\n    registers = [int(i) for i in input().split()]\n\n    """\n    First, find the first non-zero register.\n    """\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    """\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    """\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    """\n    Otherwise, the number of operations that can be performed is the product of\n    the register sizes of all registers following the first non-zero\n    register.\n    """\n    print(reduce(lambda x, y: x * y, [registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n']
2022-04-13 01:41:15.108110 size on output set 3
2022-04-13 01:41:15.108118 size on input set 3
2022-04-13 01:41:18.077913 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Read in the current state of the registers.\n    \"\"\"\n    registers = [int(i) for i in input().split()]\n\n    \"\"\"\n    First, find the first non-zero register.\n    \"\"\"\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    \"\"\"\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    \"\"\"\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    \"\"\"\n    Otherwise, the number of operations that can be performed is the product\n    of the register sizes of all registers following the first non-zero register.\n    \"\"\"\n    print(reduce(lambda x, y: x * y, [19 - registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Read in the current state of the registers.\n    \"\"\"\n    registers = [int(i) for i in input().split()]\n\n    \"\"\"\n    First, find the first non-zero register.\n    \"\"\"\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    \"\"\"\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    \"\"\"\n    if first_non_zero == len(registers) - 1:\n        print(registers[first_non_zero] - 1)\n        return\n\n    \"\"\"\n    Otherwise, the number of operations that can be performed is the product\n    of the register sizes of all registers following the first non-zero register.\n    \"\"\"\n    print(reduce(lambda x, y: x * y, [registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    \"\"\"\n    Read in the current state of the registers.\n    \"\"\"\n    registers = [int(i) for i in input().split()]\n\n    \"\"\"\n    First, find the first non-zero register.\n    \"\"\"\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    \"\"\"\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    \"\"\"\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    \"\"\"\n    Otherwise, the number of operations that can be performed is the product\n    of the register sizes of all registers following the first non-zero register.\n    \"\"\"\n    print(reduce(lambda x, y: x * y, [19 - registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n"
    }
  ],
  "created": 1649814075,
  "object": "edit"
}
2022-04-13 01:41:18.078242 fix syntax errors 3 ['\n\ndef main():\n    """\n    Read in the current state of the registers.\n    """\n    registers = [int(i) for i in input().split()]\n\n    """\n    First, find the first non-zero register.\n    """\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    """\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    """\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    """\n    Otherwise, the number of operations that can be performed is the product\n    of the register sizes of all registers following the first non-zero register.\n    """\n    print(reduce(lambda x, y: x * y, [19 - registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n', '\n\ndef main():\n    """\n    Read in the current state of the registers.\n    """\n    registers = [int(i) for i in input().split()]\n\n    """\n    First, find the first non-zero register.\n    """\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    """\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    """\n    if first_non_zero == len(registers) - 1:\n        print(registers[first_non_zero] - 1)\n        return\n\n    """\n    Otherwise, the number of operations that can be performed is the product\n    of the register sizes of all registers following the first non-zero register.\n    """\n    print(reduce(lambda x, y: x * y, [registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n', '\n\ndef main():\n    """\n    Read in the current state of the registers.\n    """\n    registers = [int(i) for i in input().split()]\n\n    """\n    First, find the first non-zero register.\n    """\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    """\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    """\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    """\n    Otherwise, the number of operations that can be performed is the product\n    of the register sizes of all registers following the first non-zero register.\n    """\n    print(reduce(lambda x, y: x * y, [19 - registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n']
2022-04-13 01:41:21.044159 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Read in the current state of the registers.\n    \"\"\"\n    registers = [int(i) for i in input().split()]\n\n    \"\"\"\n    First, find the first non-zero register.\n    \"\"\"\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    \"\"\"\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    \"\"\"\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    \"\"\"\n    Otherwise, the number of operations that can be performed is the product of\n    the register sizes of all registers following the first non-zero\n    register.\n    \"\"\"\n    print(reduce(lambda x, y: x * y, [registers[i] for i in range(first_non_zero + 1, len(registers))])\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Read in the current state of the registers.\n    \"\"\"\n    registers = [int(i) for i in input().split()]\n\n    \"\"\"\n    First, find the first non-zero register.\n    \"\"\"\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    \"\"\"\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    \"\"\"\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    \"\"\"\n    Otherwise, the number of operations that can be performed is the product of\n    the register sizes of all registers following the first non-zero\n    register.\n    \"\"\"\n    print(reduce(lambda x, y: x * y, [19 - registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    \"\"\"\n    Read in the current state of the registers.\n    \"\"\"\n    registers = [int(i) for i in input().split()]\n\n    \"\"\"\n    First, find the first non-zero register.\n    \"\"\"\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    \"\"\"\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    \"\"\"\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    \"\"\"\n    Otherwise, the number of operations that can be performed is the product of\n    the register sizes of all registers following the first non-zero\n    register.\n    \"\"\"\n    print(reduce(lambda x, y: x * y, [19 - registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n"
    }
  ],
  "created": 1649814078,
  "object": "edit"
}
2022-04-13 01:41:21.044360 fix syntax errors 3 ['\n\ndef main():\n    """\n    Read in the current state of the registers.\n    """\n    registers = [int(i) for i in input().split()]\n\n    """\n    First, find the first non-zero register.\n    """\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    """\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    """\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    """\n    Otherwise, the number of operations that can be performed is the product of\n    the register sizes of all registers following the first non-zero\n    register.\n    """\n    print(reduce(lambda x, y: x * y, [registers[i] for i in range(first_non_zero + 1, len(registers))])\n\nmain()\n', '\n\ndef main():\n    """\n    Read in the current state of the registers.\n    """\n    registers = [int(i) for i in input().split()]\n\n    """\n    First, find the first non-zero register.\n    """\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    """\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    """\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    """\n    Otherwise, the number of operations that can be performed is the product of\n    the register sizes of all registers following the first non-zero\n    register.\n    """\n    print(reduce(lambda x, y: x * y, [19 - registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n', '\n\ndef main():\n    """\n    Read in the current state of the registers.\n    """\n    registers = [int(i) for i in input().split()]\n\n    """\n    First, find the first non-zero register.\n    """\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    """\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    """\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    """\n    Otherwise, the number of operations that can be performed is the product of\n    the register sizes of all registers following the first non-zero\n    register.\n    """\n    print(reduce(lambda x, y: x * y, [19 - registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n']
2022-04-13 01:41:23.974597 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Read in the current state of the registers.\n    \"\"\"\n    registers = [int(i) for i in input().split()]\n\n    \"\"\"\n    First, find the first non-zero register.\n    \"\"\"\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    \"\"\"\n    If the first non-zero register is the last register, then the number of \n    operations that can be performed is the difference between the register \n    value and the register size. \n    \"\"\"\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    \"\"\"\n    Otherwise, the number of operations that can be performed is the product \n    of the register sizes of all registers following the first non-zero \n    register. \n    \"\"\"\n    print(reduce(lambda x, y: x * y, [19 - registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Read in the current state of the registers.\n    \"\"\"\n    registers = [int(i) for i in input().split()]\n\n    \"\"\"\n    First, find the first non-zero register.\n    \"\"\"\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    \"\"\"\n    If the first non-zero register is the last register, then the number of \n    operations that can be performed is the difference between the register \n    value and the register size. \n    \"\"\"\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    \"\"\"\n    Otherwise, the number of operations that can be performed is the product \n    of the register sizes of all registers following the first non-zero \n    register. \n    \"\"\"\n    print(reduce(lambda x, y: x * y, [registers[i] for i in range(first_non_zero + 1, len(registers))], 1))\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    \"\"\"\n    Read in the current state of the registers.\n    \"\"\"\n    registers = [int(i) for i in input().split()]\n\n    \"\"\"\n    First, find the first non-zero register.\n    \"\"\"\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    \"\"\"\n    If the first non-zero register is the last register, then the number of \n    operations that can be performed is the difference between the register \n    value and the register size. \n    \"\"\"\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    \"\"\"\n    Otherwise, the number of operations that can be performed is the product \n    of the register sizes of all registers following the first non-zero \n    register. \n    \"\"\"\n    print(reduce(lambda x, y: x * y, [registers[i] for i in range(first_non_zero + 1, len(registers))])\n\nmain()\n"
    }
  ],
  "created": 1649814081,
  "object": "edit"
}
2022-04-13 01:41:23.974800 fix syntax errors 3 ['\n\ndef main():\n    """\n    Read in the current state of the registers.\n    """\n    registers = [int(i) for i in input().split()]\n\n    """\n    First, find the first non-zero register.\n    """\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    """\n    If the first non-zero register is the last register, then the number of \n    operations that can be performed is the difference between the register \n    value and the register size. \n    """\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    """\n    Otherwise, the number of operations that can be performed is the product \n    of the register sizes of all registers following the first non-zero \n    register. \n    """\n    print(reduce(lambda x, y: x * y, [19 - registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n', '\n\ndef main():\n    """\n    Read in the current state of the registers.\n    """\n    registers = [int(i) for i in input().split()]\n\n    """\n    First, find the first non-zero register.\n    """\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    """\n    If the first non-zero register is the last register, then the number of \n    operations that can be performed is the difference between the register \n    value and the register size. \n    """\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    """\n    Otherwise, the number of operations that can be performed is the product \n    of the register sizes of all registers following the first non-zero \n    register. \n    """\n    print(reduce(lambda x, y: x * y, [registers[i] for i in range(first_non_zero + 1, len(registers))], 1))\n\nmain()\n', '\n\ndef main():\n    """\n    Read in the current state of the registers.\n    """\n    registers = [int(i) for i in input().split()]\n\n    """\n    First, find the first non-zero register.\n    """\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    """\n    If the first non-zero register is the last register, then the number of \n    operations that can be performed is the difference between the register \n    value and the register size. \n    """\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    """\n    Otherwise, the number of operations that can be performed is the product \n    of the register sizes of all registers following the first non-zero \n    register. \n    """\n    print(reduce(lambda x, y: x * y, [registers[i] for i in range(first_non_zero + 1, len(registers))])\n\nmain()\n']
2022-04-13 01:41:23.974846 size on output set 7
2022-04-13 01:41:23.974868 num operations 2
2022-04-13 01:41:23.974873 size on input set 1
2022-04-13 01:41:26.412707 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 19:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split()]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 18:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split(' ')]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 19:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split(' ')]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649814084,
  "object": "edit"
}
2022-04-13 01:41:26.412917 fix spelling mistakes 3 ["\n\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 19:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split()]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 18:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split(' ')]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 19:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split(' ')]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 01:41:26.413014 size on output set 3
2022-04-13 01:41:26.413021 size on input set 3
2022-04-13 01:41:32.381722 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 19:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split(' ')]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 18:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split(' ')]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\nimport numpy as np\nimport math\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 18:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\ndef get_val(regs):\n    return sum(regs)\n\ndef get_reg(val):\n    regs = [0] * int(math.log(val, 18)) + [1]\n    while get_val(regs) != val:\n        regs = next_reg(regs, 0)\n    return regs\n\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split(' ')]\n    print(np.array([get_reg(x) for x in vals]))\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649814086,
  "object": "edit"
}
2022-04-13 01:41:32.381908 fix syntax errors 3 ["\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 19:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split(' ')]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 18:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split(' ')]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport numpy as np\nimport math\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 18:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\ndef get_val(regs):\n    return sum(regs)\n\ndef get_reg(val):\n    regs = [0] * int(math.log(val, 18)) + [1]\n    while get_val(regs) != val:\n        regs = next_reg(regs, 0)\n    return regs\n\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split(' ')]\n    print(np.array([get_reg(x) for x in vals]))\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 01:41:50.679524 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 19:\n        regs[i] = 0\n        return next_reg(regs, i + 1)\n    else:\n        regs[i] += 1\n        return regs\n\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split(' ')]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef next_reg(regs, i):\n\tregs[i] += 1\n\tif i == len(regs)-1:\n\t\treturn 0\n\telif regs[i] == 20:\n\t\tregs[i] = 0\n\t\treturn next_reg(regs, i+1)\n\telse:\n\t\treturn regs\n\ndef main():\n\tregs = [int(x) for x in sys.stdin.readline().split(' ')]\n\tcount = 0\n\twhile next_reg(regs, 0):\n\t\tcount += 1\n\tprint(count)\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    count = 0\n    regs = [0] * 20\n    while True:\n        regs[0] += 1\n        if regs[0] == 20:\n            regs[0] = 0\n            regs[1] += 1\n            if regs[1] == 20:\n                regs[1] = 0\n                regs[2] += 1\n                if regs[2] == 20:\n                    regs[2] = 0\n                    regs[3] += 1\n                    if regs[3] == 20:\n                        regs[3] = 0\n                        regs[4] += 1\n                        if regs[4] == 20:\n                            regs[4] = 0\n                            regs[5] += 1\n                            if regs[5] == 20:\n                                regs[5] = 0\n                                regs[6] += 1\n                                if regs[6] == 20:\n                                    regs[6] = 0\n                                    regs[7] += 1\n                                    if regs[7] == 20:\n                                        regs[7] = 0\n                                        regs[8] += 1\n                                        if regs[8] == 20:\n                                            regs[8] = 0\n                                            regs[9] += 1\n                                            if regs[9] == 20:\n                                                regs[9] = 0\n                                                regs[10] += 1\n                                                if regs[10] == 20:\n                                                    regs[10] = 0\n                                                    regs[11] += 1\n                                                    if regs[11] == 20:\n                                                        regs[11] = 0\n                                                        regs[12] += 1\n                                                        if regs[12] == 20:\n                                                            regs[12] = 0\n                                                            regs[13] += 1\n                                                            if regs[13] == 20:\n                                                                regs[13] = 0\n                                                                regs[14] += 1\n                                                                if regs[14] == 20:\n                                                                    regs[14] = 0\n                                                                    regs[15] += 1\n                                                                    if regs[15] == 20:\n                                                                        regs[15] = 0\n                                                                        regs[16] += 1\n                                                                        if regs[16] == 20:\n                                                                            regs[16] = 0\n                                                                            regs[17] += 1\n                                                                            if regs[17] == 20:\n                                                                                regs[17] = 0\n                                                                                regs[18] += 1\n                                                                                if regs[18] == 20:\n                                                                                    regs[18] = 0\n                                                                                    regs[19] += 1\n                                                                                    if regs[19] == 20:\n                                                                                        regs[19] = 0\n                                                                                        break\n        count += 1\n\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649814092,
  "object": "edit"
}
2022-04-13 01:41:50.679829 fix syntax errors 3 ["\nimport sys\n\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 19:\n        regs[i] = 0\n        return next_reg(regs, i + 1)\n    else:\n        regs[i] += 1\n        return regs\n\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split(' ')]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef next_reg(regs, i):\n\tregs[i] += 1\n\tif i == len(regs)-1:\n\t\treturn 0\n\telif regs[i] == 20:\n\t\tregs[i] = 0\n\t\treturn next_reg(regs, i+1)\n\telse:\n\t\treturn regs\n\ndef main():\n\tregs = [int(x) for x in sys.stdin.readline().split(' ')]\n\tcount = 0\n\twhile next_reg(regs, 0):\n\t\tcount += 1\n\tprint(count)\nif __name__ == '__main__':\n\tmain()\n", "\nimport sys\n\ndef main():\n    count = 0\n    regs = [0] * 20\n    while True:\n        regs[0] += 1\n        if regs[0] == 20:\n            regs[0] = 0\n            regs[1] += 1\n            if regs[1] == 20:\n                regs[1] = 0\n                regs[2] += 1\n                if regs[2] == 20:\n                    regs[2] = 0\n                    regs[3] += 1\n                    if regs[3] == 20:\n                        regs[3] = 0\n                        regs[4] += 1\n                        if regs[4] == 20:\n                            regs[4] = 0\n                            regs[5] += 1\n                            if regs[5] == 20:\n                                regs[5] = 0\n                                regs[6] += 1\n                                if regs[6] == 20:\n                                    regs[6] = 0\n                                    regs[7] += 1\n                                    if regs[7] == 20:\n                                        regs[7] = 0\n                                        regs[8] += 1\n                                        if regs[8] == 20:\n                                            regs[8] = 0\n                                            regs[9] += 1\n                                            if regs[9] == 20:\n                                                regs[9] = 0\n                                                regs[10] += 1\n                                                if regs[10] == 20:\n                                                    regs[10] = 0\n                                                    regs[11] += 1\n                                                    if regs[11] == 20:\n                                                        regs[11] = 0\n                                                        regs[12] += 1\n                                                        if regs[12] == 20:\n                                                            regs[12] = 0\n                                                            regs[13] += 1\n                                                            if regs[13] == 20:\n                                                                regs[13] = 0\n                                                                regs[14] += 1\n                                                                if regs[14] == 20:\n                                                                    regs[14] = 0\n                                                                    regs[15] += 1\n                                                                    if regs[15] == 20:\n                                                                        regs[15] = 0\n                                                                        regs[16] += 1\n                                                                        if regs[16] == 20:\n                                                                            regs[16] = 0\n                                                                            regs[17] += 1\n                                                                            if regs[17] == 20:\n                                                                                regs[17] = 0\n                                                                                regs[18] += 1\n                                                                                if regs[18] == 20:\n                                                                                    regs[18] = 0\n                                                                                    regs[19] += 1\n                                                                                    if regs[19] == 20:\n                                                                                        regs[19] = 0\n                                                                                        break\n        count += 1\n\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 01:41:54.097797 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 20:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split()]\n    count = 0\n    while True:\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 19:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return 1\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split()]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 18:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split()]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649814110,
  "object": "edit"
}
2022-04-13 01:41:54.097989 fix syntax errors 3 ["\n\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 20:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split()]\n    count = 0\n    while True:\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 19:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return 1\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split()]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 18:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split()]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 01:41:54.098023 size on output set 9
2022-04-13 01:41:54.098048 num operations 2
2022-04-13 01:41:54.098053 size on input set 1
2022-04-13 01:41:57.681710 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()]\n    #for i in range(2, 20):\n    #    print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i)\n    print(min(20 - v2, 20 - v3, 20 - v5, 20 - v7, 20 - v11, 20 - v13, 20 - v17, 20 - v19))\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()]\n    # for i in range(2, 20):\n    #     print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i)\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19))\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()]\n    #for i in range(2, 20):\n    #    print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i) \n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19))\n\nmain()\n"
    }
  ],
  "created": 1649814114,
  "object": "edit"
}
2022-04-13 01:41:57.681979 fix spelling mistakes 3 ['\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()]\n    #for i in range(2, 20):\n    #    print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i)\n    print(min(20 - v2, 20 - v3, 20 - v5, 20 - v7, 20 - v11, 20 - v13, 20 - v17, 20 - v19))\n\nmain()\n', '\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()]\n    # for i in range(2, 20):\n    #     print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i)\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19))\n\nmain()\n', '\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()]\n    #for i in range(2, 20):\n    #    print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i) \n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19))\n\nmain()\n']
2022-04-13 01:41:57.682010 size on output set 3
2022-04-13 01:41:57.682017 size on input set 3
2022-04-13 01:42:01.658604 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()]\n    # for i in range(2, 20):\n    #     print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i)\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19))\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()]\n    # for i in range(2, 20):\n    #    print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i)\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19))\n\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()]\n    for i in range(2, 20):\n        print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i) \n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19))\n\nmain()\n"
    }
  ],
  "created": 1649814117,
  "object": "edit"
}
2022-04-13 01:42:01.658831 fix syntax errors 3 ['\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()]\n    # for i in range(2, 20):\n    #     print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i)\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19))\n\nmain()\n', '\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()]\n    # for i in range(2, 20):\n    #    print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i)\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19))\n\n\nmain()\n', '\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()]\n    for i in range(2, 20):\n        print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i) \n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19))\n\nmain()\n']
2022-04-13 01:42:09.560950 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    v = [int(i) for i in input().split()]\n    print(min(20 - v[0], 20 - v[1], 20 - v[2], 20 - v[3], 20 - v[4], 20 - v[5], 20 - v[6], 20 - v[7]))\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()]  # read input\n    # for i in range(2, 20):\n    #    print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i)  # debug\n    print(min(20 - v2, 20 - v3, 20 - v5, 20 - v7, 20 - v11, 20 - v13, 20 - v17, 20 - v19))  # output\n\n\nmain()\n"
    },
    {
      "error": {
        "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
        "type": "invalid_edit"
      },
      "index": 2
    }
  ],
  "created": 1649814121,
  "object": "edit"
}
2022-04-13 01:42:09.561177 NO RESULT
2022-04-13 01:42:09.561184 {
  "error": {
    "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
    "type": "invalid_edit"
  },
  "index": 2
}
2022-04-13 01:42:09.561226 fix syntax errors 2 ['\n\ndef main():\n    v = [int(i) for i in input().split()]\n    print(min(20 - v[0], 20 - v[1], 20 - v[2], 20 - v[3], 20 - v[4], 20 - v[5], 20 - v[6], 20 - v[7]))\n\nmain()\n', '\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()]  # read input\n    # for i in range(2, 20):\n    #    print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i)  # debug\n    print(min(20 - v2, 20 - v3, 20 - v5, 20 - v7, 20 - v11, 20 - v13, 20 - v17, 20 - v19))  # output\n\n\nmain()\n']
2022-04-13 01:42:13.558249 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    pass\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    # for i in range(2, 20):\n    #     print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i)\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    # for i in range(2, 20):\n    #     print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i)\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19))\n\nmain()\n"
    }
  ],
  "created": 1649814129,
  "object": "edit"
}
2022-04-13 01:42:13.558505 fix syntax errors 3 ['\n\ndef main():\n    pass\n\nmain()\n', "\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    # for i in range(2, 20):\n    #     print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i)\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19))\n\n\nif __name__ == '__main__':\n    main()\n", '\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    # for i in range(2, 20):\n    #     print(i, v2 % i, v3 % i, v5 % i, v7 % i, v11 % i, v13 % i, v17 % i, v19 % i)\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19))\n\nmain()\n']
2022-04-13 01:42:13.558534 size on output set 8
2022-04-13 01:42:13.558547 num operations 2
2022-04-13 01:42:13.558552 size on input set 1
2022-04-13 01:42:17.399752 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the most significant register\n    # without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the least significant digit\n    # without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do? if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more. the question is how many more\n    # can we do? we can do as many more as we can increment the least\n    # significant register without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649814133,
  "object": "edit"
}
2022-04-13 01:42:17.400020 fix spelling mistakes 3 ["\n\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the most significant register\n    # without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the least significant digit\n    # without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do? if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more. the question is how many more\n    # can we do? we can do as many more as we can increment the least\n    # significant register without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 01:42:17.400057 size on output set 3
2022-04-13 01:42:17.400063 size on input set 3
2022-04-13 01:42:20.792486 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do? if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more. the question is how many more\n    # can we do? we can do as many more as we can increment the least\n    # significant register without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do? if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more. the question is how many more\n    # can we do? we can do as many more as we can increment the least\n    # significant register without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\n    # if we can't do any more, we're done\ndef compute(registers):\n    # how many more operations can we do? if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more. we can do as many more as we\n    # can increment the least significant register without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649814137,
  "object": "edit"
}
2022-04-13 01:42:20.792687 fix syntax errors 3 ["\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do? if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more. the question is how many more\n    # can we do? we can do as many more as we can increment the least\n    # significant register without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do? if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more. the question is how many more\n    # can we do? we can do as many more as we can increment the least\n    # significant register without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\n    # if we can't do any more, we're done\ndef compute(registers):\n    # how many more operations can we do? if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more. we can do as many more as we\n    # can increment the least significant register without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 01:42:23.314672 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the least significant digit\n    # without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the least significant digit\n    # without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()[:19]]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] >= 18:\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the least significant digit\n    # without overflowing\n    return 18 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649814140,
  "object": "edit"
}
2022-04-13 01:42:23.314911 fix syntax errors 3 ["\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the least significant digit\n    # without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the least significant digit\n    # without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()[:19]]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] >= 18:\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the least significant digit\n    # without overflowing\n    return 18 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 01:42:29.073029 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef compute(r):\n    # if the top register is full, we can't do any more\n    if r[-1] == 18: return 0\n    # otherwise, we can do as many more as we can increment the top register\n    # without overflowing\n    return 19 - r[0]\n\ndef main():\n    r = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(r))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] == 18: # this is the carry flag\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the most significant register\n    # without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] == 19:\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the most significant register\n    # without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649814143,
  "object": "edit"
}
2022-04-13 01:42:29.073239 fix syntax errors 3 ["\nimport sys\n\ndef compute(r):\n    # if the top register is full, we can't do any more\n    if r[-1] == 18: return 0\n    # otherwise, we can do as many more as we can increment the top register\n    # without overflowing\n    return 19 - r[0]\n\ndef main():\n    r = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(r))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] == 18: # this is the carry flag\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the most significant register\n    # without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do?\n    # if we can't do any more, we're done\n    if registers[-1] == 19:\n        return 0\n    # otherwise, we can do at least one more\n    # the question is how many more can we do?\n    # we can do as many more as we can increment the most significant register\n    # without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 01:42:29.073277 size on output set 8
2022-04-13 01:42:29.073289 num operations 2
2022-04-13 01:42:29.073294 size on input set 1
2022-04-13 01:42:31.606719 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    out = 0\n    for i in range(8):\n        out += 19 - vals[i]\n    print(out)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    out = 0\n    for i in range(7, -1, -1):\n        out += 19 - vals[i]\n    print(out)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    pass\n\nmain()\n"
    }
  ],
  "created": 1649814149,
  "object": "edit"
}
2022-04-13 01:42:31.606906 fix spelling mistakes 3 ['\n\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    out = 0\n    for i in range(8):\n        out += 19 - vals[i]\n    print(out)\n\nmain()\n', '\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    out = 0\n    for i in range(7, -1, -1):\n        out += 19 - vals[i]\n    print(out)\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    pass\n\nmain()\n']
2022-04-13 01:42:31.606931 size on output set 3
2022-04-13 01:42:31.606938 size on input set 3
2022-04-13 01:42:35.610760 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]  # list of scores\n    out = 0  # initialise out\n    for i in range(8):  # for each score\n        out += 19 - vals[i]  # add 19 - score to out\n    print(out)  # print out\n\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    out = 0\n    for i in range(8):\n        out += 19 - vals[i]\n    print(out)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    out = 0\n    for i in range(8):\n        out += 19 - vals[i] * 2\n    print(out)\n\nmain()\n"
    }
  ],
  "created": 1649814151,
  "object": "edit"
}
2022-04-13 01:42:35.610971 fix syntax errors 3 ['\nimport sys\n\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]  # list of scores\n    out = 0  # initialise out\n    for i in range(8):  # for each score\n        out += 19 - vals[i]  # add 19 - score to out\n    print(out)  # print out\n\n\nmain()\n', 'import sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    out = 0\n    for i in range(8):\n        out += 19 - vals[i]\n    print(out)\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    out = 0\n    for i in range(8):\n        out += 19 - vals[i] * 2\n    print(out)\n\nmain()\n']
2022-04-13 01:42:38.171801 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    pass\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys, os\n\ndef main():\n    print(\"hello world\")\n    print(os.getcwd())\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\nfile_name = input(\"Enter file name: \")\nfile_handle = open(file_name,\"r\")\nfor line in file_handle:\n    line = line.rstrip()\n    print(line)\n"
    }
  ],
  "created": 1649814155,
  "object": "edit"
}
2022-04-13 01:42:38.172128 fix syntax errors 3 ['#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    pass\n\nmain()\n', '\n\nimport sys, os\n\ndef main():\n    print("hello world")\n    print(os.getcwd())\n\nmain()\n', '\nfile_name = input("Enter file name: ")\nfile_handle = open(file_name,"r")\nfor line in file_handle:\n    line = line.rstrip()\n    print(line)\n']
2022-04-13 01:42:40.366231 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    out = 0\n    for i in range(7, -1, -1):\n        out += 19 - vals[i]*2\n    print(out)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    vals = [int(x) for x in input().split()]\n    out = 0\n    for i in range(7, -1, -1):\n        out += 19 - vals[i]\n    print(out)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()][:8]\n    out = 0\n    for i in range(7, -1, -1):\n        out += 19 - vals[i]\n    print(out)\n\nmain()\n"
    }
  ],
  "created": 1649814158,
  "object": "edit"
}
2022-04-13 01:42:40.366414 fix syntax errors 3 ['\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    out = 0\n    for i in range(7, -1, -1):\n        out += 19 - vals[i]*2\n    print(out)\n\nmain()\n', '\nimport sys\n\ndef main():\n    vals = [int(x) for x in input().split()]\n    out = 0\n    for i in range(7, -1, -1):\n        out += 19 - vals[i]\n    print(out)\n\nmain()\n', '\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()][:8]\n    out = 0\n    for i in range(7, -1, -1):\n        out += 19 - vals[i]\n    print(out)\n\nmain()\n']
2022-04-13 01:42:40.366517 size on output set 9
2022-04-13 01:42:40.366530 num operations 2
2022-04-13 01:42:40.366535 size on input set 1
2022-04-13 01:42:43.229274 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(19)\n    v.append(0)\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6]*v[7])\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(20)\n    v.append(0)\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6])\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(18)\n    v.append(0)\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6])\n\nmain()\n"
    }
  ],
  "created": 1649814160,
  "object": "edit"
}
2022-04-13 01:42:43.229510 fix spelling mistakes 3 ['\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(19)\n    v.append(0)\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6]*v[7])\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(20)\n    v.append(0)\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6])\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(18)\n    v.append(0)\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6])\n\nmain()\n']
2022-04-13 01:42:43.229538 size on output set 3
2022-04-13 01:42:43.229544 size on input set 3
2022-04-13 01:42:45.267938 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#!/usr/bin/python\n\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(18)\n    v.append(0)\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6])\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(18)\n    v.append(18)\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6])\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(18);\n    v.append(0);\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6])\n\nmain()\n"
    }
  ],
  "created": 1649814163,
  "object": "edit"
}
2022-04-13 01:42:45.268149 fix syntax errors 3 ['\n#!/usr/bin/python\n\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(18)\n    v.append(0)\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6])\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(18)\n    v.append(18)\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6])\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(18);\n    v.append(0);\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6])\n\nmain()\n']
2022-04-13 01:42:49.094260 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(19)\n    v.append(0)\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6]*v[7])\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(19);\n    v.append(0);\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6]*v[7]);\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.extend([19, 0])\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6]*v[7])\n\nmain()\n"
    }
  ],
  "created": 1649814165,
  "object": "edit"
}
2022-04-13 01:42:49.094472 fix syntax errors 3 ['#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(19)\n    v.append(0)\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6]*v[7])\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(19);\n    v.append(0);\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6]*v[7]);\n\nmain()\n', 'import sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.extend([19, 0])\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6]*v[7])\n\nmain()\n']
2022-04-13 01:42:53.194749 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(20);\n    v.append(0);\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6])\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(20);\n    v.append(0);\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6]);\n\nmain();\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(20) #add 20 to the list\n    v.append(0) #add 0 to the list\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6]) #print the product of all the elements in the list\n\nmain()\n"
    }
  ],
  "created": 1649814169,
  "object": "edit"
}
2022-04-13 01:42:53.194932 fix syntax errors 3 ['\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(20);\n    v.append(0);\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6])\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(20);\n    v.append(0);\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6]);\n\nmain();\n', '\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(20) #add 20 to the list\n    v.append(0) #add 0 to the list\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6]) #print the product of all the elements in the list\n\nmain()\n']
2022-04-13 01:42:53.194959 size on output set 9
2022-04-13 01:42:53.194970 num operations 2
2022-04-13 01:42:53.194975 size on input set 1
2022-04-13 01:42:58.627895 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, sys.stdin.readline().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split()) #input\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "#\n\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n"
    }
  ],
  "created": 1649814173,
  "object": "edit"
}
2022-04-13 01:42:58.628211 fix spelling mistakes 3 ['\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, sys.stdin.readline().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n', '\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split()) #input\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n', '#\n\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n']
2022-04-13 01:42:58.628266 size on output set 3
2022-04-13 01:42:58.628272 size on input set 3
2022-04-13 01:43:09.772786 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 0:\n                                            break\n        N += 1\n    if N == 0:\n        N = -1\n    print(N)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split()) #input\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\"\"\"\nThis is a solution to the problem found at https://open.kattis.com/problems/filefixit\n\"\"\"\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:  # check if all values are 18\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n"
    }
  ],
  "created": 1649814178,
  "object": "edit"
}
2022-04-13 01:43:09.772984 fix syntax errors 3 ['\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 0:\n                                            break\n        N += 1\n    if N == 0:\n        N = -1\n    print(N)\n\nmain()\n', 'import sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split()) #input\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n', '"""\nThis is a solution to the problem found at https://open.kattis.com/problems/filefixit\n"""\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:  # check if all values are 18\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n']
2022-04-13 01:43:19.151503 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/python3\n\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        #if v19 == 18:\n                                        #    sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        v2 = (v2 + 1) % 2\n        if v2 == 1:\n            v3 = (v3 + 1) % 3\n            if v3 == 2:\n                v5 = (v5 + 1) % 5\n                if v5 == 4:\n                    v7 = (v7 + 1) % 7\n                    if v7 == 6:\n                        v11 = (v11 + 1) % 11\n                        if v11 == 10:\n                            v13 = (v13 + 1) % 13\n                            if v13 == 12:\n                                v17 = (v17 + 1) % 17\n                                if v17 == 16:\n                                    v19 = (v19 + 1) % 19\n                                    if v19 == 18:\n                                        sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, sys.stdin.readline().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n"
    }
  ],
  "created": 1649814189,
  "object": "edit"
}
2022-04-13 01:43:19.151710 fix syntax errors 3 ['#!/usr/bin/python3\n\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        #if v19 == 18:\n                                        #    sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n', '#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        v2 = (v2 + 1) % 2\n        if v2 == 1:\n            v3 = (v3 + 1) % 3\n            if v3 == 2:\n                v5 = (v5 + 1) % 5\n                if v5 == 4:\n                    v7 = (v7 + 1) % 7\n                    if v7 == 6:\n                        v11 = (v11 + 1) % 11\n                        if v11 == 10:\n                            v13 = (v13 + 1) % 13\n                            if v13 == 12:\n                                v17 = (v17 + 1) % 17\n                                if v17 == 16:\n                                    v19 = (v19 + 1) % 19\n                                    if v19 == 18:\n                                        sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n', '#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, sys.stdin.readline().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n']
2022-04-13 01:43:29.167236 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, sys.stdin.readline().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        v2 = (v2 + 1) % 2\n        if v2 == 1:\n            v3 = (v3 + 1) % 3\n            if v3 == 2:\n                v5 = (v5 + 1) % 5\n                if v5 == 4:\n                    v7 = (v7 + 1) % 7\n                    if v7 == 6:\n                        v11 = (v11 + 1) % 11\n                        if v11 == 10:\n                            v13 = (v13 + 1) % 13\n                            if v13 == 12:\n                                v17 = (v17 + 1) % 17\n                                if v17 == 16:\n                                    v19 = (v19 + 1) % 19\n                                    if v19 == 18:\n                                        sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, sys.stdin.readline().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, sys.stdin.readline().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n"
    }
  ],
  "created": 1649814199,
  "object": "edit"
}
2022-04-13 01:43:29.167546 fix syntax errors 3 ['\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, sys.stdin.readline().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        v2 = (v2 + 1) % 2\n        if v2 == 1:\n            v3 = (v3 + 1) % 3\n            if v3 == 2:\n                v5 = (v5 + 1) % 5\n                if v5 == 4:\n                    v7 = (v7 + 1) % 7\n                    if v7 == 6:\n                        v11 = (v11 + 1) % 11\n                        if v11 == 10:\n                            v13 = (v13 + 1) % 13\n                            if v13 == 12:\n                                v17 = (v17 + 1) % 17\n                                if v17 == 16:\n                                    v19 = (v19 + 1) % 19\n                                    if v19 == 18:\n                                        sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n', 'import sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, sys.stdin.readline().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n', 'import sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, sys.stdin.readline().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n']
2022-04-13 01:43:29.167598 size on output set 8
