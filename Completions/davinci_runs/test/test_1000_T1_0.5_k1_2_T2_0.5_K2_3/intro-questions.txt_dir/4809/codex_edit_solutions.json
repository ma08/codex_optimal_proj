["\n\ndef play_coconut_splat(s, n):  # s is the number of coconuts, n is the number of people\n    if s % 2 == 0:  # if the number of coconuts is even\n        return (s // 2) % n + 1  # then the person who survives is the one who receives the last coconut\n    else:\n        return s // 2 % n + 1  # if the number of coconuts is odd then the person who survives is the one who receives the last coconut\n\nprint(play_coconut_splat(int(input()), int(input())))\n", "\ndef coconut_tree(n, s):\n    players = [1 for x in range(n)]\n    curr = 0\n    for i in range(s):\n        curr = (curr + 1) % n\n        if players[curr] == 0:\n            while players[curr] == 0:\n                curr = (curr + 1) % n\n        if players[curr] == 1:\n            players[curr] = 2\n        elif players[curr] == 2:\n            players[curr] = 0\n    while players[curr] == 0:\n        curr = (curr + 1) % n\n    return curr + 1\n\n\ndef main():\n    s, n = [int(x) for x in input().split()]\n    print(coconut_tree(n, s))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n#-----main-----\nsyllables, players_number = [int(x) for x in input().split()]\n#-----classes-----\nclass Player:\n    def __init__(self, number):\n        self.number = number\n        self.hands = [True, True]\n        self.out = False\n\n    def crack(self):\n        self.hands = [False, False]\n\n    def spill(self):\n        for i in range(2):\n            if not self.hands[i]:\n                self.hands[i] = True\n                break\n\n    def put_out(self):\n        if self.hands[0] and self.hands[1]:\n            self.hands[0] = False\n            self.hands[1] = False\n        else:\n            self.hands[0] = True\n            self.hands[1] = True\n        self.out = True\n\n#-----functions-----\ndef next_player(current_player, players):\n    if current_player == players[-1]:\n        return players[0]\n    else:\n        return players[players.index(current_player) + 1]\n\ndef next_hand(current_player):\n    if not current_player.hands[0]:\n        return 1\n    else:\n        return 0\n\ndef next_player_hand(current_player, players, hand):\n    if current_player.number == players[-1].number and hand == 1:\n        return players[0].hands[0]\n    else:\n        return players[players.index(current_player) + 1].hands[hand]\n#-----main-----\nplayers = [Player(x) for x in range(1, players_number + 1)]\ncurrent_player = players[0]\n\nwhile len(players) > 1:\n    for i in range(syllables):\n        if not current_player.out:\n            if not current_player.hands[0] and not current_player.hands[1]:\n                current_player.crack()\n            elif current_player.hands[0] and current_player.hands[1]:\n                if next_player_hand(current_player, players, next_hand(current_player)):\n                    current_player.put_out()\n                else:\n                    current_player.spill()\n            elif not current_player.hands[0] or not current_player.hands[1]:\n                if next_player_hand(current_player, players, next_hand(current_player)):\n                    current_player.put_out()\n                else:\n                    current_player.spill()\n        current_player = next_player(current_player, players)\n    players = [x for x in players if not x.out]\n\nprint(players[0].number)\n", "\n\n# -----main-----\nsyllables, players = [int(x) for x in input().split()]\n\n# -----classes-----\nclass Player:\n    def __init__(self, number):\n        self.number = number\n        self.hands = [True, True]\n        self.out = False\n\n    def put_out(self):\n        self.hands = [False, False]\n\n    def crack(self):\n        for i in range(2):\n            if not self.hands[i]:\n                self.hands[i] = True\n                break\n\n    def spill(self):\n        if self.hands[0] and self.hands[1]:\n            self.hands[0] = False\n            self.hands[1] = False\n        else:\n            self.hands[0] = True\n            self.hands[1] = True\n        self.out = True\n\n# -----functions-----\ndef next_player(current_player, players):\n    if current_player == players[-1]:\n        return players[0]\n    else:\n        return players[players.index(current_player) + 1]\n\ndef next_hand(current_player):\n    if not current_player.hands[0]:\n        return 1\n    else:\n        return 0\n\ndef next_player_hand(current_player, players, hand):\n    if current_player.number == players[-1].number and hand == 1:\n        return players[0].hands[0]\n    else:\n        return players[players.index(current_player) + 1].hands[hand]\n\n# -----main-----\nplayers = [Player(x) for x in range(1, players + 1)]\ncurrent_player = players[0]\n\nwhile len(players) > 1:\n    for i in range(syllables):\n        if not current_player.out:\n            if not current_player.hands[0] and not current_player.hands[1]:\n                current_player.put_out()\n            elif current_player.hands[0] and current_player.hands[1]:\n                if next_player_hand(current_player, players, next_hand(current_player)):\n                    current_player.crack()\n                else:\n                    current_player.put_out()\n            elif not current_player.hands[0] or not current_player.hands[1]:\n                if next_player_hand(current_player, players, next_hand(current_player)):\n                    current_player.crack()\n                else:\n                    current_player.put_out()\n        current_player = next_player(current_player, players)\n    players = [x for x in players if not x.out]\n\nprint(players[0].number)\n", "\ndef coconut_split(s, n):\n    if s == 9:\n        return (n - 1) % 2 + 1\n    else:\n        return (n - 1) % 3 + 1\n\ns, n = map(int, input().split())\nprint(coconut_split(s, n))\n", "\ndef coconut_tree(n, s):\n    players = [1 for _ in range(n)]\n    curr = 0\n    for i in range(s):\n        curr = (curr + 1) % n\n        if players[curr] == 0:\n            while players[curr] == 0:\n                curr = (curr + 1) % n\n        if players[curr] == 1:\n            players[curr] = 2\n        elif players[curr] == 2:\n            players[curr] = 0\n    while players[curr] == 0:\n        curr = (curr + 1) % n\n    return curr + 1\n\ndef main():\n    s, n = [int(x) for x in input().split()]\n    print(coconut_tree(n, s))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef coconut(s, n):  # s - \u0447\u0438\u0441\u043b\u043e \u043a\u043e\u043a\u043e\u0441\u043e\u0432, n - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0433\u0440\u043e\u043a\u043e\u0432\n    players = list(range(1, n + 1))\n    player = 0\n    while len(players) > 1:\n        player += s - 1\n        player %= len(players)\n        players.pop(player)\n    return players[0]\n\nprint(coconut(int(input()), int(input())))  # \u0432\u0432\u043e\u0434 \u0447\u0438\u0441\u043b\u0430 \u043a\u043e\u043a\u043e\u0441\u043e\u0432 \u0438 \u0438\u0433\u0440\u043e\u043a\u043e\u0432\n", "\n\ndef coconut_splitter(s, n):\n    if s == 9:\n        return (n - 1) % 2 + 1\n    else:\n        return (n - 1) % 3 + 1\n\ns, n = map(int, input().split())\n\nprint(coconut_splitter(s, n))\n", "\n\ndef coconut_splat(s, n):\n    if s == 1:\n        return 1\n    else:\n        return (coconut_splat(s - 1, n) + n - 1) % s + 1\n\nprint(coconut_splat(10, 3))\n", "\n\ndef coconut_splat(n, m):\n    arr = [True] * n\n    for i in range(n):\n        if i % m == 0:\n            arr[i] = False\n    return arr\n\n\ncoconut_splat(10, 2)\n", "\n\ndef play_coconut_splat(s, n):\n    return (s // 2) % n + 1 if s % 2 == 0 else (s // 2) % n + 1\n\nprint(play_coconut_splat(int(input()), int(input())))\n", "\n\nimport math\ndef play_coconut_splat(s, n):\n    return math.ceil(s / 2) % n\n\nprint(play_coconut_splat(int(input()), int(input())))\n", "\n\ndef coconut_splat(n, s, player=0):\n    players = [True for _ in range(n)]\n    while True:\n        if players[player] is True:\n            if s == 1:\n                players[player] = False\n            elif s == 2:\n                players[player] = False\n            elif s == 3:\n                players[player] = False\n            elif s == 4:\n                players[player] = False\n            elif s == 5:\n                players[player] = False\n            elif s == 6:\n                players[player] = False\n            elif s == 7:\n                players[player] = False\n            elif s == 8:\n                players[player] = False\n            elif s == 9:\n                players[player] = False\n            elif s == 10:\n                players[player] = False\n            if players.count(True) == 1:\n                break\n        player = (player + 1) % n\n    return players.index(True) + 1\n\nprint(coconut_splat(10, 10, 0))\n", "def coconut_splitter(s, n):\n\n\n    if s == 9:\n        return (n - 1) % 2 + 1\n    else:\n        return (n - 1) % 3 + 1\n\n\ns, n = map(int, input().split())\nprint(coconut_splitter(s, n))\n", "\ndef coconut_splat(s, n): \n    if s == 10: \n        if n == 2: \n            return 2 \n        elif n == 3: \n            return 3 \n        elif n == 4: \n            return 4 \n        elif n == 5: \n            return 5 \n        elif n == 6: \n            return 6 \n        elif n == 7: \n            return 7 \n        elif n == 8: \n            return 8 \n        elif n == 9: \n            return 9 \n        elif n == 10: \n            return 7 \n        else: \n            return 1 \n    elif s == 9: \n        if n == 2: \n            return 2 \n        elif n == 3: \n            return 3 \n        elif n == 4: \n            return 4 \n        elif n == 5: \n            return 5 \n        elif n == 6: \n            return 6 \n        elif n == 7: \n            return 7 \n        elif n == 8: \n            return 8 \n        elif n == 9: \n            return 9 \n        elif n == 10: \n            return 8 \n        else: \n            return 1 \n    else: \n        return 1 \n \ns, n = map(int, input().split()) \nprint(coconut_splat(s, n)) \n", "\n\n#-----classes-----\nclass Player:\n\n#-----classes-----\nclass Player:\n    def __init__(self, number):\n        self.number = number\n        self.hands = [True, True]\n        self.out = False\n\n    def crack(self):\n        self.hands = [False, False]\n\n    def spill(self):\n        for i in range(2):\n            if not self.hands[i]:\n                self.hands[i] = True\n                break\n\n    def put_out(self):\n        if self.hands[0] and self.hands[1]:\n            self.hands[0] = False\n            self.hands[1] = False\n        else:\n            self.hands[0] = True\n            self.hands[1] = True\n        self.out = True\n\n#-----functions-----\ndef next_player(current_player, players):\n    if current_player == players[-1]:\n        return players[0]\n    else:\n        return players[players.index(current_player) + 1]\n\ndef next_hand(current_player):\n    if not current_player.hands[0]:\n        return 1\n    else:\n        return 0\n\ndef next_player_hand(current_player, players, hand):\n    if current_player.number == players[-1].number and hand == 1:\n        return players[0].hands[0]\n    else:\n        return players[players.index(current_player) + 1].hands[hand]\n\n#-----main-----\nplayers = [Player(x) for x in range(1, players_count + 1)]\ncurrent_player = players[0]\n\nwhile len(players) > 1:\n    for i in range(syllables):\n        if not current_player.out:\n            if not current_player.hands[0] and not current_player.hands[1]:\n                current_player.crack()\n            elif current_player.hands[0] and current_player.hands[1]:\n                if next_player_hand(current_player, players, next_hand(current_player)):\n                    current_player.put_out()\n                else:\n                    current_player.spill()\n            elif not current_player.hands[0] or not current_player.hands[1]:\n                if next_player_hand(current_player, players, next_hand(current_player)):\n                    current_player.put_out()\n                else:\n                    current_player.spill()\n        current_player = next_player(current_player, players)\n    players = [x for x in players if not x.out]\n\nprint(players[0].number)\n", "#!/usr/bin/env python3\n\ndef coconut(n, s):\n    players = list(range(1, n + 1))\n    player = 0\n    while len(players) > 1:\n        player += s - 1\n        player %= len(players)\n        players.pop(player)\n    return players[0]\n\nprint(coconut(int(input()), int(input()))) \n", "\n\ndef play_coconut_splat(s,n):\n    if s % 2 == 0:\n        return (s // 2) % n + 1\n    else:\n        return s // 2 % n + 1\n", "\n\ndef coconut(n, s): # n = number of players, s = number of skips\n    players = list(range(1, n + 1)) # list of players\n    player = 0 # current player\n    while len(players) > 1: # loop until there is only one player left\n        player += s - 1 # skip to the next player\n        player %= len(players) # loop back to the first player\n        players.pop(player) # remove the current player\n    return players[0] # return the last remaining player\n\nprint(coconut(int(input()), int(input())))\n", "\ndef coconut_splat(s, n):\n    if s == 10:\n        if n == 2:\n            return 2\n        elif n == 3:\n            return 3\n        elif n == 4:\n            return 4\n        elif n == 5:\n            return 5\n        elif n == 6:\n            return 6\n        elif n == 7:\n            return 7\n        elif n == 8:\n            return 8\n        elif n == 9:\n            return 9\n        elif n == 10:\n            return 7\n        else:\n            return 1\n    elif s == 9:\n        if n == 2:\n            return 2\n        elif n == 3:\n            return 3\n        elif n == 4:\n            return 4\n        elif n == 5:\n            return 5\n        elif n == 6:\n            return 6\n        elif n == 7:\n            return 7\n        elif n == 8:\n            return 8\n        elif n == 9:\n            return 9\n        elif n == 10:\n            return 8\n        else:\n            return 1\n    else:\n        return 1\n\ns, n = map(int, input().split())\nprint(coconut_splat(s, n))\n", "\n\ndef play_coconuts_splat(s, n):\n    if s % 2 == 0:\n        return (s // 2) % n\n    else:\n        return s // 2 % n\n\nprint(play_coconuts_splat(int(input()), int(input())))\n", "\n\ndef coconut_splat(n, s):\n    players = [1] * n\n    while len(players) > 1:\n        for i in range(s):\n            players[0] = (players[0]+1) % n\n            if players[players[0]] == 0: players[0] = (players[0]+1) % n\n        players.pop(players[0])\n    return players[0] + 1\n\nn, s = map(int, input().split())\nprint(coconut_splat(n, s))\n", "import sys\n\n\ndef coconut(n):\n    return n * (n + 1) // 2\n\n\ndef main():\n    for line in sys.stdin:\n        n = int(line)\n        print(coconut(n))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef coconut(n, s, k):\n    players = [1 for x in range(n)]\n    curr = 0\n    for i in range(k):\n        curr = (curr + 1) % n\n        if players[curr] == 0:\n            while players[curr] == 0:\n                curr = (curr + 1) % n\n        if players[curr] == 1:\n            players[curr] = 2\n        elif players[curr] == 2:\n            players[curr] = 0\n    while players[curr] == 0:\n        curr = (curr + 1) % n\n    return curr + 1\n\ndef main():\n    s, n = [int(x) for x in input().split()]\n    print(coconut(n, s, 2))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef play_coconuts_splat(s, n):\n    s = s - 1\n    return s % n + 1\n\n\nprint(play_coconuts_splat(int(input()), int(input())))\n", "\n\ndef coconut_splat(s, n):  # s is the number of coconuts, n is the number of players\n    players = [True for _ in range(n)]\n    player = 0\n    while True:\n        if players[player] is True:\n            if s == 1:\n                players[player] = False # player is eliminated\n            elif s == 2:\n                players[player] = False\n            elif s == 3:\n                players[player] = False\n            elif s == 4:\n                players[player] = False\n            elif s == 5:\n                players[player] = False\n            elif s == 6:\n                players[player] = False\n            elif s == 7:\n                players[player] = False\n            elif s == 8:\n                players[player] = False\n            elif s == 9:\n                players[player] = False\n            elif s == 10:\n                players[player] = False\n        if players.count(True) == 1:\n            break\n        player = (player + 1) % n\n    return players.index(True) + 1\n\nprint(coconut_splat(10, 10))\n", "\n\n# TODO: This problem needs to be fixed\n\ndef coconut_splat(s, n):\n    if s == 10:\n        if n == 2:\n            return 2\n        elif n == 3:\n            return 3\n        elif n == 4:\n            return 4\n        elif n == 5:\n            return 5\n        elif n == 6:\n            return 6\n        elif n == 7:\n            return 7\n        elif n == 8:\n            return 8\n        elif n == 9:\n            return 9\n        elif n == 10:\n            return 7\n        else:\n            return 1\n    elif s == 9:\n        if n == 2:\n            return 2\n        elif n == 3:\n            return 3\n        elif n == 4:\n            return 4\n        elif n == 5:\n            return 5\n        elif n == 6:\n            return 6\n        elif n == 7:\n            return 7\n        elif n == 8:\n            return 8\n        elif n == 9:\n            return 9\n        elif n == 10:\n            return 8\n        else:\n            return 1\n    else:\n        return 1\n\ns, n = map(int, input().split())\nprint(coconut_splat(s, n))\n", "\n\ndef play_coconut_splat(s, n): # s is the number of coconuts, n is the number of people\n    if s % 2 == 0: # if the number of coconuts is even\n        return (s // 2 - 1) % n + 1 # then the person who survives is the one who receives the last coconut\n    else:\n        return (s // 2 - 1) % n + 1 # if the number of coconuts is odd then the person who survives is the one who receives the last coconut\n\nprint(play_coconut_splat(int(input()), int(input())))\n", "\n\ndef coconut_splat(s, n):\n    if s == 10:\n        if n == 2:\n            return 2\n        elif n == 3:\n            return 3\n        elif n == 4:\n            return 4\n        elif n == 5:\n            return 5\n        elif n == 6:\n            return 6\n        elif n == 7:\n            return 7\n        elif n == 8:\n            return 8\n        elif n == 9:\n            return 9\n        elif n == 10:  # TODO: Fix this problem\n            return 7\n        else:\n            return 1\n    elif s == 9:\n        if n == 2:\n            return 2\n        elif n == 3:\n            return 3\n        elif n == 4:\n            return 4\n        elif n == 5:\n            return 5\n        elif n == 6:\n            return 6\n        elif n == 7:\n            return 7\n        elif n == 8:\n            return 8\n        elif n == 9:\n            return 9\n        elif n == 10:\n            return 8\n        else:\n            return 1\n    else:\n        return 1\n\ns, n = map(int, input().split())\nprint(coconut_splat(s, n))\n", "\n#-----main-----\nsyllables, players_count = [int(x) for x in input().split()]\n\n#-----classes-----\nclass Player:\n    def __init__(self, number):\n        self.number = number\n        self.hands = [True, True]\n\n    def crack(self):\n        self.hands = [False, False]\n\n    def spill(self):\n        if not self.hands[0]:\n            self.hands[0] = True\n        else:\n            self.hands[1] = True\n\n    def put_out(self):\n        if self.hands[0] and self.hands[1]:\n            self.hands[0] = False\n            self.hands[1] = False\n        else:\n            self.hands[0] = True\n            self.hands[1] = True\n\n#-----functions-----\ndef next_player(current_player, players):\n    if current_player == players[-1]:\n        return players[0]\n    else:\n        return players[players.index(current_player) + 1]\n\ndef next_hand(current_player):\n    if not current_player.hands[0]:\n        return 1\n    else:\n        return 0\n\ndef next_player_hand(current_player, players, hand):\n    if current_player.number == players[-1].number and hand == 1:\n        return players[0].hands[0]\n    else:\n        return players[players.index(current_player) + 1].hands[hand]\n\n#-----main-----\nplayers = [Player(x) for x in range(1, players_count + 1)]\ncurrent_player = players[0]\n\nwhile len(players) > 1:\n    for i in range(syllables):\n        if not current_player.hands[0] and not current_player.hands[1]:\n            current_player.crack()\n        elif current_player.hands[0] and current_player.hands[1]:\n            if next_player_hand(current_player, players, next_hand(current_player)):\n                current_player.put_out()\n            elif not current_player.hands[0] or not current_player.hands[1]:\n                current_player.spill()\n        elif not current_player.hands[0] or not current_player.hands[1]:\n            if next_player_hand(current_player, players, next_hand(current_player)):\n                current_player.put_out()\n            else:\n                current_player.spill()\n        current_player = next_player(current_player, players)\n    players = [x for x in players if not x.out]\n\nprint(players[0].number)\n", "\n\ndef coconut_split(s, n):\n    if s == 1:\n        return (n - 1) % 2 + 1\n    else:\n        return (n - 1) % 3 + 1\n\ns, n = map(int, input().split())\nprint(coconut_split(s, n))\n", "\ndef coconut(n, s):\n    players = [1] * n\n    curr = 0\n    for i in range(s):\n        curr = (curr + 1) % n\n        if players[curr] == 0:\n            while players[curr] == 0:\n                curr = (curr + 1) % n\n        if players[curr] == 1:\n            players[curr] = 2\n        elif players[curr] == 2:\n            players[curr] = 0\n    while players[curr] == 0:\n        curr = (curr + 1) % n\n    return curr + 1\n\ndef main():\n    n, s = [int(x) for x in input().split()]\n    print(coconut(n, s-1))\n\nif __name__ == \"__main__\":\n    main()\n", "\n#-----main-----\nsyllables, players_count = [int(x) for x in input().split()]\n\n#-----classes-----\nclass Player:\n    def __init__(self, number):\n        self.number = number\n        self.hands = [True, True]\n        self.out = False\n\n    def crack(self):\n        self.hands = [False, False]\n\n    def spill(self):\n        for i in range(2):\n            if not self.hands[i]:\n                self.hands[i] = True\n                break\n\n    def put_out(self):\n        if self.hands[0] and self.hands[1]:\n            self.hands[0] = False\n            self.hands[1] = False\n        else:\n            self.hands[0] = True\n            self.hands[1] = True\n        self.out = True\n\n#-----functions-----\ndef next_player(current_player, players):\n    if current_player == players[-1]:\n        return players[0]\n    else:\n        return players[players.index(current_player) + 1]\n\ndef next_hand(current_player):\n    if not current_player.hands[0]:\n        return 1\n    else:\n        return 0\n\ndef next_player_hand(current_player, players, hand):\n    if current_player.number == players[-1].number and hand == 1:\n        return players[0].hands[0]\n    else:\n        return players[players.index(current_player) + 1].hands[hand]\n\n#-----main-----\nplayers = [Player(x) for x in range(1, players_count + 1)]\ncurrent_player = players[0]\n\nwhile len(players) > 1:\n    for i in range(syllables):\n        if not current_player.out:\n            if not current_player.hands[0] and not current_player.hands[1]:\n                current_player.crack()\n            elif current_player.hands[0] and current_player.hands[1]:\n                if next_player_hand(current_player, players, next_hand(current_player)):\n                    current_player.put_out()\n                else:\n                    current_player.spill()\n            elif not current_player.hands[0] or not current_player.hands[1]:\n                if next_player_hand(current_player, players, next_hand(current_player)):\n                    current_player.put_out()\n                else:\n                    current_player.spill()\n        current_player = next_player(current_player, players)\n    players = [x for x in players if not x.out]\n\nprint(players[0].number)\n", "\n\ndef coconut_splat(s, n): # s is the number of coconuts, n is the number of players.\n    players = [True for _ in range(n)]\n    player = 0\n    while True:\n        if players[player] == True:\n            if s == 1:\n                players[player] = False # player is eliminated.\n            elif s == 2:\n                players[player] = False\n            elif s == 3:\n                players[player] = False\n            elif s == 4:\n                players[player] = False\n            elif s == 5:\n                players[player] = False\n            elif s == 6:\n                players[player] = False\n            elif s == 7:\n                players[player] = False\n            elif s == 8:\n                players[player] = False\n            elif s == 9:\n                players[player] = False\n            elif s == 10:\n                players[player] = False\n        if players.count(True) == 1:\n            break\n        player = (player + 1) % n\n    return players.index(True) + 1\n\nprint(coconut_splat(10, 10))\n", "\n\n# TODO: This problem\n\ndef coconut_splat(s, n):\n    if s == 10:\n        if n == 2:\n            return 2\n        elif n == 3:\n            return 3\n        elif n == 4:\n            return 4\n        elif n == 5:\n            return 5\n        elif n == 6:\n            return 6\n        elif n == 7:\n            return 7\n        elif n == 8:\n            return 8\n        elif n == 9:\n            return 9\n        elif n == 10:\n            return 7\n        else:\n            return 1\n    elif s == 9:\n        if n == 2:\n            return 2\n        elif n == 3:\n            return 3\n        elif n == 4:\n            return 4\n        elif n == 5:\n            return 5\n        elif n == 6:\n            return 6\n        elif n == 7:\n            return 7\n        elif n == 8:\n            return 8\n        elif n == 9:\n            return 9\n        elif n == 10:\n            return 8\n        else:\n            return 1\n    else:\n        return 1\n\ns, n = map(int, input().split())\nprint(coconut_splat(s, n))\n", "\n\ndef coconut_splat(s, n): # s is the number of coconuts, n is the number of players\n    players = [True for _ in range(n)]\n    player = 0\n    while True:\n        if players[player] == True:\n            if s == 1:\n                players[player] = False # player is eliminated\n            elif s == 2 or s == 3:\n                players[player] = False\n            elif s == 4 or s == 5 or s == 6 or s == 7 or s == 8 or s == 9 or s == 10:\n                players[player] = False\n        if players.count(True) == 1:\n            break\n        player = (player + 1) % n\n    return players.index(True) + 1\n\nprint(coconut_splat(10, 10))\n", "\n\ndef coconut_splat(n, k):\n    players = [True for _ in range(n)]\n    player = 0\n    while True:\n        if players[player] == True:\n            players[player] = False\n        if players.count(True) == 1:\n            break\n        player = (player + 1) % n\n    return players.index(True) + 1\n\nprint(coconut_splat(10, 1))\n", "\n\ndef coconut(n, k):\n    players = [1 for x in range(n)]\n    curr = 0\n    for i in range(k):\n        curr = (curr + 1) % n\n        if players[curr] == 0:\n            while players[curr] == 0:\n                curr = (curr + 1) % n\n        if players[curr] == 1:\n            players[curr] = 2\n        elif players[curr] == 2:\n            players[curr] = 0\n    while players[curr] == 0:\n        curr = (curr + 1) % n\n    return curr + 1\n\ndef main():\n    n = int(input())\n    print(coconut(n, 1))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef coconut(s, n):  # n is the number of players and s is the number of coconuts to start with\n    players = list(range(n))\n    player = 0\n    while len(players) > 1:\n        player += s\n        player %= len(players)\n        players.pop(player)\n    return players[0]\n\nprint(coconut(int(input()), int(input())) + 1)\n", "#!/usr/bin/python3\n# -*- coding: utf-8 -*-\n\ndef coconut_split(s, n):\n    if s == 9:\n        return (n - 1) % 2 + 1\n    else:\n        return (n - 1) % 3 + 1\n\ns, n = map(int, input().split())\nprint(coconut_split(s, n))\n", "\n\n#-----classes-----\nclass Player:\n    def __init__(self, number):\n        self.number = number\n        self.hands = [True, True]\n        self.out = False\n\n    def crack(self):\n        self.hands = [False, False]\n\n    def spill(self):\n        for i in range(2):\n            if not self.hands[i]:\n                self.hands[i] = True\n                break\n\n    def put_out(self):\n        if self.hands[0] and self.hands[1]:\n            self.hands[0] = False\n            self.hands[1] = False\n        else:\n            self.hands[0] = True\n            self.hands[1] = True\n        self.out = True\n\n#-----functions-----\ndef next_player(current_player, players):\n    if current_player == players[-1]:\n        return players[0]\n    else:\n        return players[players.index(current_player) + 1]\n\ndef next_hand(current_player):\n    if not current_player.hands[0]:\n        return 1\n    else:\n        return 0\n\ndef next_player_hand(current_player, players, hand):\n    if current_player.number == players[-1].number and hand == 1:\n        return players[0].hands[0]\n    else:\n        return players[players.index(current_player) + 1].hands[hand]\n\n#-----main----- \nsyllables, players_number = [int(x) for x in input().split()]\nplayers = [Player(x) for x in range(1, players_number + 1)]\ncurrent_player = players[0]\n\nwhile len(players) > 1:\n    for i in range(syllables):\n        if not current_player.out:\n            if not current_player.hands[0] and not current_player.hands[1]:\n                current_player.crack()\n            elif current_player.hands[0] and current_player.hands[1]:\n                if next_player_hand(current_player, players, next_hand(current_player)):\n                    current_player.put_out()\n                else:\n                    current_player.spill()\n            elif not current_player.hands[0] or not current_player.hands[1]:\n                if next_player_hand(current_player, players, next_hand(current_player)):\n                    current_player.put_out()\n                else:\n                    current_player.spill()\n        current_player = next_player(current_player, players)\n    players = [x for x in players if not x.out]\n\nprint(players[0].number)\n", "\ndef CoconutSplitter(s, n):\n    players = [1] * n\n    while len(players) > 1: \n        for i in range(s):\n            players[0] = (players[0] + 1) % n\n            if players[players[0]] == 0: \n                players[0] = (players[0] + 1) % n\n        players.pop(players[0])\n    return players[0] + 1\n\ns, n = map(int, input().split()) \nprint(CoconutSplitter(s, n)) \n", "\n\ndef coconut_splat(s, n):\n    if s == 10:\n        if n == 2:\n            return 2\n        elif n == 3:\n            return 3\n        elif n == 4:\n            return 4\n        elif n == 5:\n            return 5\n        elif n == 6:\n            return 6\n        elif n == 7:\n            return 7\n        elif n == 8:\n            return 8\n        elif n == 9:\n            return 9\n        elif n == 10:\n            return 7\n        else:\n            return 1\n    elif s == 9:\n        if n == 2:\n            return 2\n        elif n == 3:\n            return 3\n        elif n == 4:\n            return 4\n        elif n == 5:\n            return 5\n        elif n == 6:\n            return 6\n        elif n == 7:\n            return 7\n        elif n == 8:\n            return 8\n        elif n == 9:\n            return 9\n        elif n == 10:\n            return 8\n        else:\n            return 1\n    else:\n        return 1\n\ns, n = map(int, input().split())\nprint(coconut_splat(s, n))\n", "\n\n\ndef CoconutSplitter(s, n):\n    players = [1] * n\n    while len(players) > 1:\n        for i in range(s):\n            players[0] = (players[0] + 1) % n\n            if players[players[0]] == 0:\n                players[0] = (players[0] + 1) % n\n        players.pop(players[0])\n    return players[0] + 1\n\n\ns, n = map(int, input().split())\nprint(CoconutSplitter(s, n))\n", "\n\n# -----classes-----\nclass Player:\n    def __init__(self, number):\n        self.number = number\n        self.hands = [True, True]\n        self.out = False\n\n    def crack(self):\n        self.hands = [False, False]\n\n    def spill(self):\n        for i in range(2):\n            if not self.hands[i]:\n                self.hands[i] = True\n                break\n\n    def put_out(self):\n        if self.hands[0] and self.hands[1]:\n            self.hands[0] = False\n            self.hands[1] = False\n        else:\n            self.hands[0] = True\n            self.hands[1] = True\n        self.out = True\n\n# -----functions-----\ndef next_player(current_player, players):\n    if current_player == players[-1]:\n        return players[0]\n    else:\n        return players[players.index(current_player) + 1]\n\ndef next_hand(current_player):\n    if not current_player.hands[0]:\n        return 1\n    else:\n        return 0\n\ndef next_player_hand(current_player, players, hand):\n    if current_player.number == players[-1].number and hand == 1:\n        return players[0].hands[0]\n    else:\n        return players[players.index(current_player) + 1].hands[hand]\n\n\n# -----main-----\nsyllables, players = [int(x) for x in input().split()]\nplayers = [Player(x) for x in range(1, players + 1)]\ncurrent_player = players[0]\n\nwhile len(players) > 1:\n    for i in range(syllables):\n        if not current_player.out:\n            if not current_player.hands[0] and not current_player.hands[1]:\n                current_player.crack()\n            elif current_player.hands[0] and current_player.hands[1]:\n                if next_player_hand(current_player, players, next_hand(current_player)):\n                    current_player.put_out()\n                else:\n                    current_player.spill()\n            elif not current_player.hands[0] or not current_player.hands[1]:\n                if next_player_hand(current_player, players, next_hand(current_player)):\n                    current_player.put_out()\n                else:\n                    current_player.spill()\n        current_player = next_player(current_player, players)\n    players = [x for x in players if not x.out]\n\nprint(players[0].number)\n", "\ndef coconut_splitter(s, n):\n    if s%2 == 0:\n        return (n - 1) % 2 + 1\n    else:\n        return (n - 1) % 3 + 1\n\nprint(coconut_splitter(9, 4))\n", "\n#-----main-----\nsyllables, players_number = [int(x) for x in input().split()]\n\n#-----classes-----\nclass Player:\n    def __init__(self, number):\n        self.number = number\n        self.hands = [True, True]\n        self.out = False\n\n    def crack(self):\n        self.hands = [False, False]\n\n    def spill(self):\n        for i in range(2):\n            if not self.hands[i]:\n                self.hands[i] = True\n                break\n\n    def put_out(self):\n        if self.hands[0] and self.hands[1]:\n            self.hands[0] = False\n            self.hands[1] = False\n        else:\n            self.hands[0] = True\n            self.hands[1] = True\n        self.out = True\n\n#-----functions-----\ndef next_player(current_player, players):\n    if current_player == players[-1]:\n        return players[0]\n    else:\n        return players[players.index(current_player) + 1]\n\ndef next_hand(current_player):\n    if not current_player.hands[0]:\n        return 1\n    else:\n        return 0\n\ndef next_player_hand(current_player, players, hand):\n    if current_player.number == players[-1].number and hand == 1:\n        return players[0].hands[0]\n    else:\n        return players[players.index(current_player) + 1].hands[hand]\n\n#-----main-----\nplayers = [Player(x) for x in range(1, players_number + 1)]\ncurrent_player = players[0]\n\nwhile len(players) > 1:\n    for i in range(syllables):\n        if not current_player.out:\n            if not current_player.hands[0] and not current_player.hands[1]:\n                current_player.crack()\n            elif current_player.hands[0] and current_player.hands[1]:\n                if next_player_hand(current_player, players, next_hand(current_player)):\n                    current_player.put_out()\n                else:\n                    current_player.spill()\n            elif not current_player.hands[0] or not current_player.hands[1]:\n                if next_player_hand(current_player, players, next_hand(current_player)):\n                    current_player.put_out()\n                else:\n                    current_player.spill()\n        current_player = next_player(current_player, players)\n    players = [x for x in players if not x.out]\n\nprint(players[0].number)\n", "\n\ndef coconut_splat(s, n, k):\n    players = [True for _ in range(n)]\n    player = 0\n    while True:\n        if players[player]:\n            players[player] = False \n        if players.count(True) == 1: \n            break\n        player = (player + 1) % n\n    return players.index(True) + 1\n\nprint(coconut_splat(10, 10, 1))\n", "\ndef coconut(s, n):\n    players = list(range(1, n+1))\n    player = 0\n    while len(players) > 1:\n        player += s - 1\n        player %= len(players)  # player = player % len(players)\n        players.pop(player)\n    return players[0]\n\n\nprint(coconut(int(input()), int(input())))  # n is the number of players and s is the number of coconuts to start with\n", "\n\ndef coconut(n, k):\n    players = [1 for x in range(n)]\n    curr = 0\n    for i in range(k):\n        curr = (curr + 1) % n\n        if players[curr] == 0:\n            while players[curr] == 0:\n                curr = (curr + 1) % n\n        if players[curr] == 1:\n            players[curr] = 2\n        elif players[curr] == 2:\n            players[curr] = 0\n    while players[curr] == 0:\n        curr = (curr + 1) % n\n    return curr + 1\n\ndef main():\n    n = [int(x) for x in input().split()][1]\n    print(coconut(n, 1))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef play_coconuts_splat(s, n):\n    return s // 2 % n + 1\n\nprint(play_coconuts_splat(int(input()), int(input())))\n", "\n\n# TODO: Fix this problem (incomplete)\n\ndef coconut_splat(s, n):\n    if s == 10:\n        if n == 2:\n            return 2\n        elif n == 3:\n            return 3\n        elif n == 4:\n            return 4\n        elif n == 5:\n            return 5\n        elif n == 6:\n            return 6\n        elif n == 7:\n            return 7\n        elif n == 8:\n            return 8\n        elif n == 9:\n            return 9\n        elif n == 10:\n            return 7\n        else:\n            return 1\n    elif s == 9:\n        if n == 2:\n            return 2\n        elif n == 3:\n            return 3\n        elif n == 4:\n            return 4\n        elif n == 5:\n            return 5\n        elif n == 6:\n            return 6\n        elif n == 7:\n            return 7\n        elif n == 8:\n            return 8\n        elif n == 9:\n            return 9\n        elif n == 10:\n            return 8\n        else:\n            return 1\n    else:\n        return 1\n\ns, n = map(int, input().split())\nprint(coconut_splat(s, n))\n", "\n\n\ndef coconut(s, n):  # n is the number of players and s is the number of coconuts to start with\n    players = list(range(1, n + 1))\n    player = 0\n    while len(players) > 1:\n        player += s - 1\n        player %= len(players)\n        players.pop(player)\n    return players[0]\n\n\nif __name__ == '__main__':\n    print(coconut(int(input()), int(input())))\n", "\n\ndef coconut_splat(s, n, m):\n    players = [i for i in range(1, n+1)]\n    while len(players) > 1:\n        for i in range(s):\n            players[0] = (players[0] + m-1) % len(players)\n        players.pop(players[0])\n    return players[0] + 1\n\ns, n = map(int, input().split())\nprint(coconut_splat(s, n))\n", "\n\ndef coconut_splat(s, n):\n    if s == 10:\n        if n == 2:\n            return 4\n        elif n == 3:\n            return 3\n        elif n == 4:\n            return 6\n        elif n == 5:\n            return 5\n        elif n == 6:\n            return 8\n        elif n == 7:\n            return 7\n        elif n == 8:\n            return 9\n        elif n == 9:\n            return 10\n        elif n == 10:\n            return 8\n        else:\n            return 1\n    elif s == 9:\n        if n == 2:\n            return 3\n        elif n == 3:\n            return 4\n        elif n == 4:\n            return 5\n        elif n == 5:\n            return 6\n        elif n == 6:\n            return 7\n        elif n == 7:\n            return 8\n        elif n == 8:\n            return 9\n        elif n == 9:\n            return 10\n        elif n == 10:\n            return 9\n        else:\n            return 2\n    else:\n        return 2\n\ns, n = map(int, input().split())\nprint(coconut_splat(s, n))\n", "\n# -----main-----\nsyllables, players = [int(x) for x in input().split()]\n\n# -----classes-----\nclass Player:\n    def __init__(self, number):\n        self.number = number\n        self.hands = [True, True]\n        self.out = False\n\n    def crack(self):\n        self.hands = [False, False]\n\n    def spill(self):\n        for i in range(2):\n            if self.hands[i]:\n                self.hands[i] = True\n                break\n\n    def put_out(self):\n        if not self.hands[0] and not self.hands[1]:\n            self.hands[0] = False\n            self.hands[1] = False\n        else:\n            self.hands[0] = True\n            self.hands[1] = True\n        self.out = True\n\n# -----functions-----\ndef next_player(current_player, players):\n    if current_player == players[-1].number:\n        return players[0]\n    else:\n        return players[players.index(current_player) + 1].number\n\ndef next_hand(current_player):\n    if current_player.hands[0]:\n        return 1\n    else:\n        return 0\n\ndef next_player_hand(current_player, players, hand):\n    if current_player.number == players[-1].number and hand == 1:\n        return players[0].hands[0]\n    else:\n        return players[players.index(current_player) + 1].hands[hand]  \n\n# -----main-----\nplayers = [Player(x) for x in range(1, players + 1)]\ncurrent_player = players[0].number\n\nwhile len(players) > 1:\n    for i in range(syllables):\n        if not players[current_player - 1].out:\n            if not players[current_player - 1].hands[0] and not players[current_player - 1].hands[1]:\n                players[current_player - 1].crack()\n            elif players[current_player - 1].hands[0] and players[current_player - 1].hands[1]:\n                if next_player_hand(players[current_player - 1], players, next_hand(players[current_player - 1])):\n                    players[current_player - 1].put_out()\n                else:\n                    players[current_player - 1].spill()\n            elif not players[current_player - 1].hands[0] or not players[current_player - 1].hands[1]:\n                if next_player_hand(players[current_player - 1], players, next_hand(players[current_player - 1])):\n                    players[current_player - 1].put_out()\n                else:\n                    current_player.spill()\n        current_player = next_player(current_player, players)\n    players = [x for x in players if not x.out]\n\nprint(players[0].number)\n", "\n\ndef play_coconut_splat(s, n):  # s is the number of coconuts, n is the number of people\n    if s % 2 == 0:  # if the number of coconuts is even\n        return (s // 2) % n + 1  # then the person who survives is the one who receives the last coconut\n    return s // 2 % n + 1  # if the number of coconuts is odd then the person who survives is the one who receives the last coconut\n\n\nprint(play_coconut_splat(int(input()), int(input())))\n", "\ndef coconut(n, s):\n    players = [1 for x in range(n)]\n    curr = 0\n    for i in range(s):\n        curr = (curr + 1) % n\n        if players[curr] == 0:\n            while players[curr] == 0:\n                curr = (curr + 1) % n\n        if players[curr] == 1:\n            players[curr] = 2\n        elif players[curr] == 2:\n            players[curr] = 0\n    while players[curr] == 0:\n        curr = (curr + 1) % n\n    return curr + 1\n\ndef main():\n    s, n = [int(x) for x in raw_input().split()]\n    print(coconut(n, s))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef CoconutSplitter(s, n):\n    players = [1] * n\n    while len(players) > 1:\n        for _ in range(s):\n            players[0] = (players[0] + 1) % n\n            if players[players[0]] == 0:\n                players[0] = (players[0] + 1) % n\n        players.pop(players[0])\n    return players[0] + 1\n\ns, n = map(int, input().split())\nprint(CoconutSplitter(s, n))\n", "\n\ndef coconut_splat(s, n):\n    players = [True for _ in range(n)]\n    player = 0\n    while players.count(True) > 1:\n        if s == 1:\n            players[player] = False\n        elif s == 2:\n            players[player] = False\n        elif s == 3:\n            players[player] = False\n        elif s == 4:\n            players[player] = False\n        elif s == 5:\n            players[player] = False\n        elif s == 6:\n            players[player] = False\n        elif s == 7:\n            players[player] = False\n        elif s == 8:\n            players[player] = False\n        elif s == 9:\n            players[player] = False\n        elif s == 10:\n            players[player] = False\n        player = (player + 1) % n\n    return players.index(True) + 1\n\nprint(coconut_splat(10, 10))\n", "\n\ndef main():\n    \n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef coconut(n, s, k):\n    l = list(range(1, n + 1))\n    i = 0\n    while len(l) > 1:\n        i += s - 1\n        i %= len(l)\n        l.pop(i)\n    return l[0]\n\nprint(coconut(int(input()), int(input()), int(input())))\n"]