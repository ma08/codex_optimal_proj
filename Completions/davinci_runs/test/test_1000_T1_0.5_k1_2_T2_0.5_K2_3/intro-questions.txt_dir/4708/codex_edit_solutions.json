["\nn = int(input())\nk = int(input())\nx = int(input())\ny = int(input())\n\nif n <= k:\n    print(n * x)\nelse:\n    print(k * x + (n - k) * y)\n", "\nimport sys\n\nwith open('file.txt', 'r') as f:\n    for line in f:\n        print(line.strip())\n", "n = int(input())\nk = int(input())\nx = int(input())\ny = int(input())\n\nif n <= k:\n    print(n * x)\nelse:\n    print(k * x + (n - k) * y)\n", "import sys\n\nN = int(sys.stdin.readline().strip())\nK = int(sys.stdin.readline().strip())\nX = int(sys.stdin.readline().strip())\nY = int(sys.stdin.readline().strip())\n\nif N <= K:\n    print(N * X)\nelif N > K:\n    print(K * X + (N - K) * Y)\n", "# https://atcoder.jp/contests/abc071/tasks/arc081_a\n\nimport sys\n\nN = int(sys.stdin.readline())\nK = int(sys.stdin.readline())\nX = int(sys.stdin.readline())\nY = int(sys.stdin.readline())\n\nif N <= K:\n    print(N * X)\nelif N > K:\n    print(K * X + (N - K) * Y)\n", "\nimport sys\n\nN = int(sys.stdin.readline())\nK = int(sys.stdin.readline())\nX = int(sys.stdin.readline())\nY = int(sys.stdin.readline())\n\nif N <= K:\n    print(N * X)\nelse:\n    print(K * X + (N - K) * Y)\n", "\n\nimport sys\n\nN = int(sys.stdin.readline())\nK = int(sys.stdin.readline())\nX = int(sys.stdin.readline())\nY = int(sys.stdin.readline())\n\nif N <= K:\n    print(N * X)\nelif N > K:\n    print(K * X + (N - K) * Y)\n", "\n\n\na = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\n\nif (a <= b):\n    print(a * c)\nelse:\n    print(b * c + (a - b) * d)\n", "\n\na = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\n\nif (a <= b):\n    print(a * c)\nelse:\n    print(b * c + (a - b) * d))\n", "\n\na = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\n\nif a <= b:\n    print(a * c)\nelse:\n    print(b * c + (a - b) * d)\n", "# https://atcoder.jp/contests/abc081/tasks/abc081_a\n\nimport sys\n\nS = sys.stdin.readline()\nprint(S.count('1'))\n", "from collections import deque\n\n# def bfs(graph, start, visited):\n#     visited[start] = True\n#     queue = deque([start])\n#     while queue:\n#         v = queue.popleft()\n#         print(v, end=' ')\n#         for i in graph[v]:\n#             if not visited[i]:\n#                 queue.append(i)\n#                 visited[i] = True\n\n\ndef dfs(graph, start, visited):\n    visited[start] = True\n    print(start, end=' ')\n    for i in graph[start]:\n        if not visited[i]:\n            dfs(graph, i, visited)\n\n\ngraph = [\n    [],\n    [2, 3, 8],\n    [1, 7],\n    [1, 4, 5],\n    [3, 5],\n    [3, 4],\n    [7],\n    [2, 6, 8],\n    [1, 7]\n]\n\nvisited = [False] * 9\ndfs(graph, 1, visited)\n", "n = int(input())\nk = int(input())\nx = int(input())\ny = int(input())\n\nif (n <= k):\n    print(n * x)\nelse:\n    print(k * x + (n - k) * y)\n", "import os\n\nimport sys\n\nN = int(sys.stdin.readline())\nK = int(sys.stdin.readline())\nX = int(sys.stdin.readline())\nY = int(sys.stdin.readline())\n\nif N <= K:\n    print(N * X)\nelif N > K:\n    print(K * X + (N - K) * Y)\n", "# https://atcoder.jp/contests/abc095/tasks/abc095_b\n\nimport sys\n\nN, X = map(int, sys.stdin.readline().split())\nM = [int(sys.stdin.readline()) for _ in range(N)]\n\nprint(N + (X - sum(M)) // min(M))\n"]