["\nimport sys\nn = int(sys.stdin.readline())\n\nans = (n - 2) * (n - 1) // 2\n\nprint(ans)\n", "import sys\n\ndef solve(n):\n    return n*(n-3)//2\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(solve(n))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nn = int(sys.stdin.readline())\nans = (n - 3) * (n - 2) // 2\n\nprint(ans)\n", "\n\n# SOLUTION\n\n# Accept the number of vertices\nn = int(input())\n# Initialize the number of diagonals and intersection\nd = 2 * n - 5  # diagonals\ni = n - 3  # intersections\n\n# Initialize the count of diagonals that intersects\nd_i = 0\n\n# For each diagonal\nfor _ in range(d):\n    # Add the number of intersections for this diagonal\n    d_i += i\n    # Decrement the number of intersections\n    i -= 1\n\n# Print the number of intersections\nprint(d_i)\n", "\nimport sys\n\ndef main():\n    n = int(input())\n    if n == 1:\n        print(0)\n    else:\n        print(n-1)\n\nmain()\n", "import sys, math\n\nn = int(sys.stdin.readline())\n\nprint(math.factorial(n) / (math.factorial(n - 3) * 6))\n", "\nn = int(input())\n\nif n < 3 or n > 100:\n    raise ValueError(\"Input is out of range.\")\n\nprint((n-3)*(n-2)*(n-1)//6) \n", "\n\ndef main():\n    \"\"\"\n    The number of intersecctions is given by the formula:\n    n*(n-3)/2\n    \"\"\"\n    n = int(input())\n    print(n*(n-3)//2) \n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nprint((n-3)*(n-2)*(n-1)*(n)/24.0)\n", "\n\nimport sys\nimport math\n\nn = int(sys.stdin.readline())\n\nprint(math.factorial(n) / (math.factorial(n - 3) * 6))\n", "\nprint(\"hello\")\n", "\n\ndef main():\n    \"\"\"\n    The number of intersecctions is given by the formula:\n    n*(n-3)/2\n    \"\"\"\n    n = int(input())\n    print(n*(n-3)//2)  # noqa: E999\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\nn = int(sys.stdin.readline())\n\nans = (n - 2) * (n - 1) // 2\n\nprint(ans)\n", "\nn = int(input()) \n\nif n < 3 or n > 100:\n    raise ValueError(\"Input is out of range.\")\n\nprint((n-3)*(n-2)*(n-1)//6)\n", "\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nprint((n-3)*(n-2)*(n-1)*(n)/24) \n", "\n\nimport sys\n\ndef solve(n):\n    return n*(n-1)//2 \n\ndef main():\n    n = int(sys.stdin.readline())\n    print(solve(n))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\nn = int(sys.stdin.readline())\n\nans = (n - 3) * (n - 2) / 2\n\nprint(ans)\n", "\nimport sys\nimport math\n\nn = int(sys.stdin.readline())\n\nprint(math.factorial(n) / (math.factorial(n - 3) * 6))\n", "\n\n# SOLUTION\n\n# Accept the number of vertexes\nn = int(input())\n\n# Initialize the number of diagonals\nd = 2 * n - 5\n\n# Initialize the number of intersections\ni = n - 3\n\n# Initialize the count of diagonals that intersect\nd_i = 0\n\n# For each diagonal\nfor _ in range(d):\n    # Add the number of intersections for this diagonal\n    d_i += i\n    # Decrement the number of intersections\n    i -= 1\n\n# Print the number of intersections\nprint(d_i)\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    if n == 3:\n        print(0)\n    elif n == 4:\n        print(1)\n    else:\n        print((n-3)*(n-2)*(n-4)/2)\n\nmain()\n", "n = int(input())\nprint((n-3)*(n-2)//2\n", "\n\n\nn = int(input())\nprint((n-5)*(n-4)//2)\n", "\n\nimport sys\n\nn = int(sys.stdin.readline())  # read a line with a single integer\n\nprint((n-3)*(n-2)*(n-1)/6)  \n", "\nn = int(input())\n\nif n < 3 or n > 100:\n    raise ValueError(\"Input is out of range\")\n\nprint((n-3)*(n-2)*(n-1)//6)\n", "\nimport sys\n\nn = int(sys.stdin.readline())\n\nans = (n - 2) * (n - 1) // 2\n\nprint(ans)\n", "\n# test\nimport sys\n\ndef solve(n):\n    return n*(n-3)//2\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(solve(n))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    if n == 3:\n        print(0)\n    elif n == 4:\n        print(1)\n    else:\n        print(int((n-3)*(n-2)*(n-1)/2))\n\nmain()\n", "\nimport sys\n\ndef main():\n    n = int(input())\n    if n == 1:\n        print(0)\n    elif n == 2:\n        print(0)\n    else:\n        print(n - 2)\n\nmain()\n", "\n\nn = int(input())\nprint((n-5)*(n-4)//2) \n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    if n == 3:\n        print(0)\n    elif n == 4: \n        print(1)\n    else:\n        print((n-3)*(n-2)*(n-4)/2)\n\nmain()\n", "#!/usr/bin/env python3\n\nn = int(input())\n\nif n < 3 or n > 100:\n    raise ValueError(\"Input is out of range.\")\n\nprint((n-3)*(n-2)*(n-1)//6) \n", "\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n# SOLUTION\n\n# Accept the number of vertex\nn = int(input())\n\n# Initialize the number of intersections\nintersections = 0\n\n# Initialize the number of intersections\ni = n - 3\n\n# Initialize the count of diagonals that intersect\nd_i = 0\n\n# For each diagonal\nfor _ in range(d):\n    # Add the number of intersections for this diagonal\n    d_i += i\n    # Decrement the number of intersections\n    i -= 1\n\n# Print the number of intersections\nprint(d_i)\n", "\ndef main():\n    \"\"\"\n    The number of intersections is given by the formula:\n    n*(n-3)//2\n    \"\"\"\n    n = int(input())\n    print(n * (n - 3) // 2)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\nn = int(sys.stdin.readline())  # read a line with a single integer\n\nprint((n-3) * (n-2) * (n-1) / 6)  # print 3 integers, on different lines, one at a time\n", "def main():\n    n = int(input())\n    if n == 1:\n        print(0)\n    elif n == 2:\n        print(0)\n    else:\n        print(n-2)\nmain()\n", "\n\nimport sys\n\ndef solve(n):\n    return n*(n-1)/2\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(solve(n))\n\nif __name__ == '__main__':\n    main()\n", "\n\n# SOLUTION\n\n# Read the number of vertices\nn = int(input(\"Enter the number of vertices: \"))\n\n# Initialize the number of diagonals and intersections\nd = 2 * n - 5  # number of diagonals\ni = n - 3  # number of intersections\n\nd_i = 0  # number of diagonals that intersects\n\n# For each diagonal\nfor _ in range(d):\n    # Add the number of intersections for this diagonal\n    d_i += i\n    # Decrement the number of intersections\n    i -= 1\n\n# Print the number of intersections\nprint(d_i)\n", "\n\ndef main():\n    \"\"\"\n    The number of intersections is given by the formula:\n    n*(n-3)//2\n    \"\"\"\n    n = int(input())\n    print(n * (n - 3) // 2)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\nn = int(sys.stdin.readline())\n\nans = (n - 3) * (n - 2) // 2\n\nprint(ans)\n", "\n# SOLUTION\n\n# Accept the number of vertex\nn = int(input())\n\n# Initialize the number of diagonals\nd = 2*n - 5\n\n# Initialize the number of intersections\ni = n-3\n\n# Initialize the count of diagonals that intersect\nd_i = 0\n\n# For each diagonal\nfor _ in range(d):\n    # Add the number of intersections for this diagonal\n    d_i += i\n    # Decrement the number of intersections\n    i -= 1\n\n# Print the number of intersections\nprint(d_i)\n", "\n# \nimport sys\n\ndef solve(n):\n    return n*(n-3)//2\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(solve(n))\n\nif __name__ == '__main__':\n    main()\n", "\n\n# SOLUTION\n\n# Accept the number of vertices\nn = int(input())\n\n# Initialize the number of diagonals\nd = 2 * n - 5\n\n# Initialize the number of intersections\ni = n - 3\n\n# Initialize the count of diagonals that intersect\nd_i = 0\n\n# For each diagonal\nfor _ in range(d):\n    # Add the number of intersections for this diagonal\n    d_i += i\n    # Decrement the number of intersections\n    i -= 1\n\n# Print the number of intersections\nprint(d_i)\n", "\n\nn = int(input())\nprint((n-5)*(n-4)//2) # first way\nprint((n-4)*(n-3)//2) # second way\n", "\n\n# SOLUTION\n\n# Accept the number of vertices\nn = int(input())\n\n# Initialize the number of diagonals and intersection\nd = 2 * n - 5  # diagonals\ni = n - 3  # intersections\n\n# Initialize the count of diagonals that intersects\nd_i = 0\n\n# For each diagonal\nfor _ in range(d):\n    # Add the number of intersections for this diagonal\n    d_i += i\n    # Decrement the number of intersections\n    i -= 1\n \n# Print the number of intersections\nprint(d_i)\n", "\n\nimport sys\nn = int(sys.stdin.readline())\n\nprint((n-3)*(n-2)*(n-1)*(n)/24)\n", "\n# SOLUTION\n\n# Accept the number of vertex\nn = int(input(\"enter the number of vertex\"))\n\n# Initialize the number of diagonals\nd = 2 * n - 5\n\n# Initialize the number of intersections\ni = n - 3\n\n# Initialize the count of diagonals that intersect\nd_i = 0\n\n# For each diagonal\nfor _ in range(d):\n    # Add the number of intersections for this diagonal\n    d_i += i\n    # Decrement the number of intersections\n    i -= 1\n\n# Print the number of intersections\nprint(d_i)\n", "\n\nn = int(input())\nprint((n-3)*(n-4)//2)\n", "#!/usr/bin/env python3\n\nn = int(input())\n\nif n < 3 or n > 100:\n    raise ValueError(\"Input is out of range.\")\n\nprint((n-3)*(n-2)*(n-1)*(n-0)//24)\n", "n = int(input())\nprint((n - 3) * (n - 2) * (n - 1) // 6)\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    if n == 3:\n        print(0)\n    elif n == 4:\n        print(1)\n    else:\n        print((n-3)*(n-2)*(n-1)/2)\n\nmain()\n", "\n\nn = int(input())\nprint((n-3)*(n-2)//2) \n", "\n\ndef main():\n    \"\"\"\n    The number of intersections is given by the formula:\n    n*(n-3)//2, where n is the number of points\n    \"\"\"\n    n = int(input())\n    print(n*(n-3)//2)\n\nif __name__ == \"__main__\":\n    main()\n", "n = int(input()) \n\nif n < 3 or n > 100:\n    raise ValueError(\"Input is out of range.\")\nprint((n-3)*(n-2)*(n-1)//6)\n", "\n# Accept the number of vertexes\nn = int(input())\n\n# Initialize the number of diagonals\nd = 2 * n - 5\n\n# Initialize the number of intersections\ni = n - 3\n\n# Initialize the count of diagonals that intersect\nd_i = 0\n\n# For each diagonal\nfor _ in range(d):\n    # Add the number of intersections for this diagonal\n    d_i += i\n    # Decrement the number of intersections\n    i -= 1\n\n# Print the number of intersections\nprint(d_i)\n", "\nimport sys\nimport math\n\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(int(n*(n-1)*(n-2)*(n-3)/24))\n\nmain()\n", "#!/usr/bin/env python3\n\nn = int(input())\n\nif n < 3:\n    raise ValueError(\"Input is out of range\")\n\nprint((n - 3) * (n - 2) * (n - 1) // 6)\n", "\nn = int(input())\nprint((n-3)*(n-2)//2)\n", "\nn = int(input())\nprint((n-3)*(n-4)//2) \n", "\n\nimport sys\n\nn = int(sys.stdin.readline())  # read a line with a single integer\n\nprint((n-3)*(n-2)*(n-1)/6)\n"]