["\ndef main():\n    cards = [0] * 52\n    suits = {\"P\": 0, \"K\": 13, \"H\": 26, \"T\": 39}\n    suit_names = [\"P\", \"K\", \"H\", \"T\"]\n\n    cards_input = input()\n    for i in range(0, len(cards_input), 3):\n        card = cards_input[i:i+3]\n        suit = suits[card[0]]\n        number = int(card[1:])\n        if cards[suit + number - 1] == 1:\n            print(\"GRESKA\")\n            return\n        cards[suit + number - 1] = 1\n\n    for suit in suit_names:\n        print(13 - sum(cards[suits[suit]:suits[suit] + 13]), end=' ')\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nfrom sys import stdin\nfrom collections import Counter\n\ndef main():\n    cards = stdin.readline().strip()\n    if len(cards) % 3 != 0:\n        print('GRESKA')\n        return\n    suits = Counter()\n    for i in range(0, len(cards), 3):\n        suits[cards[i]] += 1\n    for i in ['P', 'K', 'H', 'T']:\n        print(13 - suits[i], end=' ')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef is_valid(p, k, h, t):\n    return max(p) < 2 and max(k) < 2 and max(h) < 2 and max(t) < 2\n\ndef main():\n    cards = input()\n    cards = cards.split(\" \")\n    p = [0] * 13\n    k = [0] * 13\n    h = [0] * 13\n    t = [0] * 13\n    for card in cards:\n        if card[0] == \"P\":\n            p[int(card[1:]) - 1] += 1\n        elif card[0] == \"K\":\n            k[int(card[1:]) - 1] += 1\n        elif card[0] == \"H\":\n            h[int(card[1:]) - 1] += 1\n        elif card[0] == \"T\":\n            t[int(card[1:]) - 1] += 1\n    if not is_valid(p, k, h, t):\n        print(\"GRESKAAAA\")\n    else:\n        print(13 - sum(p), 13 - sum(k), 13 - sum(h), 13 - sum(t))\n\nmain()\n", "\n\ndef check(cards):\n    suits = {'P': 0, 'K': 0, 'H': 0, 'T': 0}  # missing cards for each suit,\n    numbers = {'P': [], 'K': [], 'H': [], 'T': []}  # cards for each suit,\n\n    for card in cards:\n        suit = card[0]\n        number = card[1:]\n        suits[suit] += 1\n        numbers[suit].append(number)\n\n    for suit in suits:\n\n        if suits[suit] != 13:\n            print(13 - suits[suit], end=' ')\n        else:\n            if len(set(numbers[suit])) != 13:\n                print('GRESKA')\n                return\n    print()\n\ncheck(input())\n", "\n\ndef check(cards):\n    suits = {'P': 0, 'K': 0, 'H': 0, 'T': 0}  # cards for each suit\n    numbers = {'P': [], 'K': [], 'H': [], 'T': []}  # cards for each suit\n\n    for card in cards:\n        suit, number = card[0], card[1:]\n        suits[suit] += 1\n        numbers[suit].append(number)\n\n    for suit in suits:\n\n        if suits[suit] != 13:\n            print(13 - suits[suit], end=' ')\n        else:\n            unique_numbers = set(numbers[suit])\n            if len(unique_numbers) != 13:\n                print('GRESKA')\n                return\n            else:\n                print('GRESKA')\n    print()\n\ncheck(input().split())\n", "\n\nfrom sys import stdin\nfrom collections import Counter\n\ndef main():\n    cards = stdin.readline().strip()\n    if len(cards) % 3 != 0:\n        print('ERROR')\n        return\n    suits = Counter()\n    for i in range(0, len(cards), 3):\n        suits[cards[i]] += 1\n    for i in ['P', 'K', 'H', 'T']:\n        print(13 - suits[i], end=' ') \n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\nfrom collections import Counter\n\ndef main():\n    cards = stdin.readline().strip()\n    if len(cards) % 3 != 0:\n        print('GRESKAAAA')\n        return\n    suits = Counter()\n    for i in range(0, len(cards), 3):\n        suits[cards[i]] += 1\n    for i in ['P', 'K', 'H', 'T']: \n        print(13 - suits[i], end=' ')\n\nif __name__ == '__main__':\n    main()\n", "\n\n#-----import-----\nimport sys\n\n#-----main-----\ns = sys.stdin.readline().strip()\n\n#-----clubs-----\np = []\np_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'P':\n        if s[i+1:i+3] not in p:\n            p.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0' + str(i) not in p:\n            p_missing += 1\n    else:\n        if str(i) not in p:\n            p_missing += 1\n\n#-----diamonds-----\nk = []\nk_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'K':\n        if s[i+1:i+3] not in k:\n            k.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0' + str(i) not in k:\n            k_missing += 1\n    else:\n        if str(i) not in k:\n            k_missing += 1\n\n#-----hearts-----\nh = []\nh_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'H':\n        if s[i+1:i+3] not in h:\n            h.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0' + str(i) not in h:\n            h_missing += 1\n    else:\n        if str(i) not in h:\n            h_missing += 1\n\n#-----spades-----\nt = []\nt_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'T':\n        if s[i+1:i+3] not in t:\n            t.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0' + str(i) not in t:\n            t_missing += 1\n    else:\n        if str(i) not in t:\n            t_missing += 1\n\nprint('{} {} {} {}'.format(p_missing, k_missing, h_missing, t_missing))\n", "\n\ndef main():\n    cards = [0] * 52 # 0 - 51\n    suits = {\"P\": 0, \"K\": 13, \"H\": 26, \"T\": 39} # 0 - 12, 13 - 25, 26 - 38, 39 - 51\n    suit_names = [\"P\", \"K\", \"H\", \"T\"] # P - 0, K - 1, H - 2, T - 3\n\n    cards_input = input()\n    for i in range(0, len(cards_input), 3): # i = 0, 3, 6, 9, ...\n        card = cards_input[i:i+3]\n        suit = suits[card[0]] # card[0] = P, K, H, T\n        number = int(card[1:]) # card[1:] = 2, 3, 4, ...\n        if cards[suit + number - 1] == 1: # card[0] = P, K, H, T\n            print(\"GRESKA\")\n            return\n        cards[suit + number - 1] = 1 # card[0] = P, K, H, T\n\n    for suit in suit_names:\n        print(13 - sum(cards[suits[suit]:suits[suit] + 13]), end=\" \") # P - 0, K - 1, H - 2, T - 3\n\nif __name__ == \"__main__\":\n    main()\n", "\n# import\nimport sys\n\n# main\ns = sys.stdin.readline().strip()\n\n# P\np = []\np_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'P':\n        if s[i+1:i+3] not in p:\n            p.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in p:\n            p_missing += 1\n    else:\n        if str(i) not in p:\n            p_missing += 1\n\n# K\nk = []\nk_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'K':\n        if s[i+1:i+3] not in k:\n            k.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in k:\n            k_missing += 1\n    else:\n        if str(i) not in k:\n            k_missing += 1\n\n# H\nh = []\nh_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'H':\n        if s[i+1:i+3] not in h:\n            h.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in h:\n            h_missing += 1\n    else:\n        if str(i) not in h:\n            h_missing += 1\n\n# T\nt = []\nt_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'T':\n        if s[i+1:i+3] not in t:\n            t.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in t:\n            t_missing += 1\n    else:\n        if str(i) not in t:\n            t_missing += 1\n\nprint('{} {} {} {}'.format(p_missing, k_missing, h_missing, t_missing))\n", "\nfrom sys import stdin\nfrom collections import Counter\n\ndef main():\n    cards = stdin.readline().strip()\n    if len(cards) % 3 != 0 or len(cards) == 0 or len(cards) > 39:\n        print('GRESKA')\n        return\n    suits = Counter()\n    for i in range(0, len(cards), 3):\n        suits[cards[i]] += 1\n    for i in ['P', 'K', 'H', 'T']:\n        print(13 - suits[i], end=' ')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef check(cards):\n    suits = {'P': 0, 'K': 0, 'H': 0, 'T': 0}  # missing cards for each suit\n    numbers = {'P': [], 'K': [], 'H': [], 'T': []}  # cards for each suit\n\n    for card in cards:\n        suit = card[0]\n        number = card[1:]\n        suits[suit] += 1\n        numbers[suit].append(number)\n\n    for suit in suits:\n\n        if suits[suit] != 13:\n            print(13 - suits[suit], end=' ')\n        else:\n            if len(set(numbers[suit])) != 13:\n                print('GRESKA')\n                return\n    print()\n\n\nn = int(input())\n\nfor i in range(n):\n    check(input())\n", "\n\ndef main():\n    cards = input()\n    cards = cards.split(\" \")\n    p = 0\n    k = 0\n    h = 0\n    t = 0\n    for card in cards:\n        if card[0] == \"P\":\n            p += 1\n        elif card[0] == \"K\":\n            k += 1\n        elif card[0] == \"H\":\n            h += 1\n        elif card[0] == \"T\":\n    if p > 13 or k > 13 or h > 13 or t > 13:\n        print(\"GRESKA\")\n    else:\n        print(13 - p, 13 - k, 13 - h, 13 - t)\n\nmain()\n", "#-----import-----\nimport sys\n\n#-----main-----\ns = sys.stdin.readline().strip()\n\n#-----P-----\np = []\np_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'P':\n        if s[i+1:i+3] not in p and s[i+1:i+3] != '00':\n            p.append(s[i+1:i+3] not in p)\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in p and '0'+str(i) != '00':\n            p_missing += 1\n    else:\n        if str(i) not in p and str(i) != '00':\n            p_missing += 1\n\n#-----K-----\nk = []\nk_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'K':\n        if s[i+1:i+3] not in k and s[i+1:i+3] != '00':\n            k.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in k and '0'+str(i) != '00':\n            k_missing += 1\n    else:\n        if str(i) not in k and str(i) != '00':\n            k_missing += 1\n\n#-----H-----\nh = []\nh_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'H':\n        if s[i+1:i+3] not in h and s[i+1:i+3] != '00':\n            h.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in h and '0'+str(i) != '00':\n            h_missing += 1\n    else:\n        if str(i) not in h and str(i) != '00':\n            h_missing += 1\n\n#-----T-----\nt = []\nt_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'T':\n        if s[i+1:i+3] not in t and s[i+1:i+3] != '00':\n            t.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in t and '0'+str(i) != '00':\n            t_missing += 1\n    else:\n        if str(i) not in t and str(i) != '00':\n            t_missing += 1\n\nprint('{} {} {} {}'.format(p_missing, k_missing, h_missing, t_missing))\n", "\n\nfrom sys import stdin\nfrom collections import Counter\n\ndef main():\n    cards = stdin.readline().strip()\n    if len(cards) % 3 != 0 or len(cards) == 0 or len(cards) > 39:\n        print('GRESKA')\n        return\n    suits = Counter()\n    for i in range(0, len(cards), 3):\n        suits[cards[i]] += 1\n    for i in ['P', 'K', 'H', 'T']:\n        print(13 - suits[i], end=' ')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef check(cards):\n    suits = {'P': 0, 'K': 0, 'H': 0, 'T': 0}\n    numbers = {'P': [], 'K': [], 'H': [], 'T': []}\n\n    for card in cards:\n        suit = card[0]\n        number = card[1:]\n        suits[suit] += 1\n        numbers[suit].append(number)\n\n    for suit in suits:\n        if suits[suit] != 13:\n            print(13 - suits[suit], end=' ')  # end=' ' is used because the output is written in one line\n        else:\n            if len(set(numbers[suit])) != 13:\n                print('GRESKA')  # If the number of cards is correct but the numbers are not, print GRESKA\n                return\n    print()\n\ncheck(input())\n", "\n\ns = input()\ncards = [0]*52\nfor i in range(0, len(s), 3):\n    cards[int(s[i+1:i+3])-1] += 1\n\nprint(\"GRESKA\" if any(cards[i] > 1 for i in range(52)) else \"{} {} {} {}\".format(*(13-cards[i*13:(i+1)*13].count(0) for i in range(4))), end='')\n", "\n\nfrom sys import stdin\nfrom collections import Counter\n\ndef main():\n    cards = stdin.readline().strip()\n    if len(cards) % 3 != 0:\n        print('GRESKAAAA')\n        return\n    suits = Counter()\n    for i in range(0, len(cards), 3):\n        suits[cards[i]] += 1\n    for i in ['P', 'K', 'H', 'T']:\n        print(13 - suits[i])\n\nif __name__ == '__main__':\n    main()\n", "\ns = input()\ncards = [0]*52\nfor i in range(0, len(s), 3):\n    cards[int(s[i+1:i+3])-1] += 1\n\nprint(\"GRESKA\" if any(cards[i] > 1 for i in range(52)) else \"{} {} {} {}\".format(*(13-cards[i*13:(i+1)*13].count(1) for i in range(4)) ))\n", "\n\ndef missing_cards(s):\n    cards = {'P': [], 'K': [], 'H': [], 'T': []}  # cards[suit] = [card1, card2, ..., card13]\n    suits = ['P', 'K', 'H', 'T']  # suits = ['Pik', 'Karo', 'Herz', 'Tref']\n    for i in range(0, len(s) - 1, 3):\n        cards[s[i]].append(s[i + 1:i + 3])  # cards[suit].append(card[i])\n    for suit in suits:\n        if len(cards[suit]) != 13:  # if number of cards is not 13, then return error\n            return 'GRESKA'\n        for card in cards[suit]:\n            if cards[suit].count(card) > 1:  # if number of card is more than 1, then return error\n                return 'GRESKA'\n    return ' '.join([str(13 - len(cards[suit])) for suit in suits])  # return number of missing cards\n\nprint(missing_cards(input()))\n", "\n\ndef main():\n    cards = input()\n    cards = cards.split(\" \")\n    p = [0] * 13\n    k = [0] * 13\n    h = [0] * 13\n    t = [0] * 13\n    for card in cards:\n        if card[0] == \"P\":\n            p[int(card[1:]) - 1] += 1\n        elif card[0] == \"K\":\n            k[int(card[1:]) - 1] += 1\n        elif card[0] == \"H\":\n            h[int(card[1:]) - 1] += 1\n        elif card[0] == \"T\":\n            t[int(card[1:]) - 1] += 1\n    if max(p) > 1 or max(k) > 1 or max(h) > 1 or max(t) > 1:\n        print(\"GRESKA\")\n    else:\n        print(13 - sum(p), 13 - sum(k), 13 - sum(h), 13 - sum(t))\n\nmain()\n", "\n\ndef main():\n    s = input()\n    d = dict()\n    for i in range(len(s)):\n        if s[i] in d:\n            print(\"ERROR\")\n            return\n        d[s[i]] = True\n    for i in range(4):\n        if chr(ord(\"P\")+i) not in d:\n            print(13, end=\"\")\n        else:\n            print(0, end=\"\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ns = input()\ncards = [0]*52\nfor i in range(0, len(s), 3):\n    cards[int(s[i+1:i+3])-1] += 1\n\nprint(\"GRESKA\" if any(cards[i] > 1 for i in range(52)) else \"{} {} {} {}\".format(*(13-cards[i*13:(i+1)*13].count(0) for i in range(4)))) \n", "print(\"Hello World!\")\n", "\n\nfrom sys import stdin\nfrom collections import Counter\n\ndef main():\n    cards = stdin.readline().strip()\n    if len(cards) % 3 != 0:\n        print('ERROR')\n        return\n    suits = Counter()\n    for i in range(0, len(cards), 3):\n        suits[cards[i]] += 1\n    for i in ['P', 'K', 'H', 'T']: #sorts the cards in order of P, K, H, T\n        print(13 - suits[i], end=' ') #prints cards in order of missing cards\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef missing_cards(cards):\n    cards_dict = {'P': [], 'K': [], 'H': [], 'T': []}\n    suits = ['P', 'K', 'H', 'T']\n    for i in range(0, len(cards) - 1, 3):\n        cards_dict[cards[i]].append(cards[i + 1:i + 3])\n    for suit in suits:\n        if len(cards_dict[suit]) != 13:\n            return 'GRESKA'\n        for card in cards_dict[suit]:\n            if cards_dict[suit].count(card) > 1:\n                return 'GRESKA'\n    return ' '.join([str(13 - len(cards_dict[suit])) for suit in suits])\n\nprint(missing_cards(input()))\n", "\ndef missing_cards(s):\n    cards = {'P': [], 'K': [], 'H': [], 'T': []}\n    suits = ['P', 'K', 'H', 'T']\n    for i in range(0, len(s), 3):\n        cards[s[i]].append(s[i + 1:i + 3])\n    for suit in suits:\n        if len(cards[suit]) != 13:\n            return 'GRESKA'  # GRESKA is a word in Serbian and means ERROR.\n        for card in cards[suit]:\n            if cards[suit].count(card) > 1:\n                return 'GRESKA'  # GRESKA is a word in Serbian and means ERROR.\n    return ' '.join([str(13 - len(cards[suit])) for suit in suits])\n\nprint(missing_cards(input()))\n", "\n\n#-----import-----\nimport sys\n\n#-----main-----\ns = sys.stdin.readline().strip() # read string\n\n#-----clubs-----\np = [] # clubs\np_missing = 0 # clubs missing\nfor i in range(0, len(s), 3):\n    if s[i] == 'P':\n        if s[i+1:i+3] not in p:\n            p.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit() # exit if error\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in p:\n            p_missing += 1\n    else:\n        if str(i) not in p:\n            p_missing += 1\n\n#-----diamonds-----\nk = [] # diamonds\nk_missing = 0 # diamonds missing\nfor i in range(0, len(s), 3):\n    if s[i] == 'K':\n        if s[i+1:i+3] not in k:\n            k.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in k:\n            k_missing += 1\n    else:\n        if str(i) not in k:\n            k_missing += 1\n\n#-----hearts-----\nh = []\nh_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'H':\n        if s[i+1:i+3] not in h:\n            h.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in h:\n            h_missing += 1\n    else:\n        if str(i) not in h:\n            h_missing += 1\n\n#-----spades-----\nt = []\nt_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'T':\n        if s[i+1:i+3] not in t:\n            t.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in t:\n            t_missing += 1\n    else:\n        if str(i) not in t:\n            t_missing += 1\n\nprint('{} {} {} {}'.format(p_missing, k_missing, h_missing, t_missing))\n", "\ns = input()\ncards = [0]*52\nfor i in range(0, len(s), 3):\n    cards[int(s[i+1:i+3])-1] += 1\n\nprint(\"GRESKA\" if any(cards[i] > 1 for i in range(52)) else \"{} {} {} {}\".format(*(13-cards[i*13:(i+1)*13].count(1) for i in range(4)))) \n", "\ndef main():\n    cards = [0] * 52\n    suits = {\"C\": 0, \"D\": 13, \"H\": 26, \"S\": 39}\n    suit_names = [\"C\", \"D\", \"H\", \"S\"]\n\n    cards_input = input()\n    for i in range(0, len(cards_input), 3):\n        card = cards_input[i:i + 3]\n        suit = suits[card[0]]\n        number = int(card[1:])\n        if cards[suit + number - 1] == 1:\n            print(\"GRESKA\")\n            return\n        cards[suit + number - 1] = 1\n\n    for suit in suit_names:\n        print(13 - sum(cards[suits[suit]:suits[suit] + 13]), end=\" \")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef missing_cards(s):\n    cards = {'P': [], 'K': [], 'H': [], 'T': []}  # cards[suit] = [card1, card2, ..., card13]\n    suits = ['P', 'K', 'H', 'T']\n    for i in range(0, len(s) - 1, 3):\n        cards[s[i]].append(s[i + 1:i + 3])  # cards[suit].append(card)\n    for suit in suits:\n        if len(cards[suit]) != 13:  # if number of cards is not 13, then return error message\n            return 'GRESKA'\n        for card in cards[suit]:\n            if cards[suit].count(card) > 1:  # if number of card is more than 1, then return error message\n                return 'GRESKA'\n    return ' '.join([str(13 - len(cards[suit])) for suit in suits])  # return number of missing cards for each suit\n\nprint(missing_cards(input()))\n", "\n\ndef main():\n    n = int(input())\n    for i in range(n):\n        cards = input()\n        cards = cards.split(\" \")\n        p = [0] * 14\n        k = [0] * 14\n        h = [0] * 14\n        t = [0] * 14\n        for card in cards:\n            if card[0] == \"P\":\n                p[int(card[1:]) - 1] += 1\n            elif card[0] == \"K\":\n                k[int(card[1:]) - 1] += 1\n            elif card[0] == \"H\":\n                h[int(card[1:]) - 1] += 1\n            elif card[0] == \"T\":\n                t[int(card[1:]) - 1] += 1\n        if max(p) > 1 or max(k) > 1 or max(h) > 1 or max(t) > 1:\n            print(\"GRESKA\")\n        else:\n            print(13 - sum(p), 13 - sum(k), 13 - sum(h), 13 - sum(t))\n\nmain()\n", "\n#-----import-----\nimport sys\n\n#-----main-----\ns = sys.stdin.readline().strip() # read in input\n\n#-----clubs-----\np = [] # list of clubs\np_missing = 0 # missing clubs\nfor i in range(0, len(s), 3):\n    if s[i] == 'P':\n        if s[i+1:i+3] not in p:\n            p.append(s[i+1:i+3])\n        else:\n            print('GRESKA') # duplicate cards\n            sys.exit() # exit program\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in p:\n            p_missing += 1 # add missing card\n    else:\n        if str(i) not in p:\n            p_missing += 1 # add missing card\n\n#-----diamonds-----\nk = [] # list of diamonds\nk_missing = 0 # missing diamonds\nfor i in range(0, len(s), 3):\n    if s[i] == 'K':\n        if s[i+1:i+3] not in k:\n            k.append(s[i+1:i+3])\n        else:\n            print('GRESKA') # duplicate cards\n            sys.exit() # exit program\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in k:\n            k_missing += 1 # add missing card\n    else:\n        if str(i) not in k:\n            k_missing += 1 # add missing card\n\n#-----hearts-----\nh = [] # list of hearts\nh_missing = 0 # missing hearts\nfor i in range(0, len(s), 3):\n    if s[i] == 'H':\n        if s[i+1:i+3] not in h:\n            h.append(s[i+1:i+3])\n        else:\n            print('GRESKA') # duplicate cards\n            sys.exit() # exit program\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in h:\n            h_missing += 1 # add missing card\n    else:\n        if str(i) not in h:\n            h_missing += 1 # add missing card\n\n#-----spades-----\nt = [] # list of spades\nt_missing = 0 # missing spades\nfor i in range(0, len(s), 3):\n    if s[i] == 'T':\n        if s[i+1:i+3] not in t:\n            t.append(s[i+1:i+3])\n        else:\n            print('GRESKA') # duplicate cards\n            sys.exit() # exit program\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in t:\n            t_missing += 1 # add missing card\n    else:\n        if str(i) not in t:\n            t_missing += 1 # add missing card\n\nprint('{} {} {} {}'.format(p_missing, k_missing, h_missing, t_missing)) # print missing cards\n", "\n#-----import-----\nimport sys\n\n#-----main-----\ns = sys.stdin.readline().strip()\n\n#-----P-----\np = []\np_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'P':\n        if s[i+1:i+3] not in p and len(s[i+1:i+3]) == 2:\n            p.append(s[i+1:i+3]) \n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in p:\n            p_missing += 1\n    else:\n        if str(i) not in p:\n            p_missing += 1\n\n#-----K-----\nk = []\nk_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'K':\n        if s[i+1:i+3] not in k and len(s[i+1:i+3]) == 2:\n            k.append(s[i+1:i+3]) \n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in k:\n            k_missing += 1\n    else:\n        if str(i) not in k:\n            k_missing += 1\n\n#-----H-----\nh = []\nh_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'H':\n        if s[i+1:i+3] not in h and len(s[i+1:i+3]) == 2:\n            h.append(s[i+1:i+3]) \n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in h:\n            h_missing += 1\n    else:\n        if str(i) not in h:\n            h_missing += 1\n\n#-----T-----\nt = []\nt_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'T':\n        if s[i+1:i+3] not in t and len(s[i+1:i+3]) == 2:\n            t.append(s[i+1:i+3]) \n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in t:\n            t_missing += 1\n    else:\n        if str(i) not in t:\n            t_missing += 1\n\nprint('{} {} {} {}'.format(p_missing, k_missing, h_missing, t_missing))\n", "\n\ndef main():\n    cards = [0] * 52 #\n    suits = {\"C\": 0, \"D\": 13, \"H\": 26, \"S\": 39}\n    suit_names = [\"C\", \"D\", \"H\", \"S\"]\n\n    cards_input = input()\n    for i in range(0, len(cards_input), 3):\n        card = cards_input[i:i+3]\n        suit = suits[card[0]]\n        number = int(card[1:])\n        if cards[suit + number - 1] == 1:\n            print(\"GRESKA\")\n            return\n        cards[suit + number - 1] = 1\n\n    for suit in suit_names:\n        print(13 - sum(cards[suits[suit]:suits[suit] + 13]), end=\" \")\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    cards = [0] * 52\n    suits = {\"P\": 0, \"K\": 13, \"H\": 26, \"T\": 39}\n    suit_names = [\"P\", \"K\", \"H\", \"T\"]\n\n    cards_input = input()\n    for i in range(0, len(cards_input), 3):\n        card = cards_input[i:i+3]\n        suit = suits[card[0]]\n        number = int(card[1:])\n        if cards[suit + number - 1] == 1:\n            print(\"GRESKA\")\n            return\n        cards[suit + number - 1] = 1\n\n    for suit in suit_names:\n        print(13 - sum(cards[suits[suit]:suits[suit] + 13]), end=\" \") \n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef check(cards):\n    suits = {'P': 0, 'K': 0, 'H': 0, 'T': 0}\n    numbers = {'P': [], 'K': [], 'H': [], 'T': []}\n\n    for card in cards:\n        suit = card[0]\n        number = card[1:]\n        suits[suit] += 1\n        numbers[suit].append(number)\n\n    for suit in suits:\n        if suits[suit] != 13:\n            print(13 - suits[suit], end=' ')  # print missing cards\n        else:\n            if len(set(numbers[suit])) != 13:\n                print('GRESKA')  # print error if there are duplicate cards\n                return\n    print()\n\ncheck(input())\n", "\nprint(\"Hello World!\")\n", "\n\nfrom sys import stdin\nfrom collections import Counter\n\ndef main():\n    cards = stdin.readline().strip()\n    if len(cards) % 3 != 0 or len(cards) == 0:\n        print('GRESKA', end='')\n        return\n    suits = Counter()\n    for i in range(0, len(cards), 3):\n        suits[cards[i]] += 1\n    for i in ['P', 'K', 'H', 'T']:\n        print(13 - suits[i], end=' ')    \n\nif __name__ == '__main__':\n    main()\n", "\n\ns = input()\ncards = [0]*52\nfor i in range(0, len(s), 3):\n    cards[int(s[i+1:i+3])-1] += 1\n\nprint(\"GRESKA\" if any(cards[i] > 1 for i in range(52)) else \"{} {} {} {}\".format(*(13-cards[i*13:(i+1)*13].count(1) for i in range(4))))\n", "\nfrom sys import stdin\n\nfrom collections import Counter\n\ndef main():\n    cards = stdin.readline().strip()\n    if len(cards) % 3 != 0:\n        print('ERROR')\n        return\n    suits = Counter()\n    for i in range(0, len(cards), 3):\n        suits[cards[i]] += 1\n    for i in ['P', 'K', 'H', 'T']:\n        print(13 - suits[i], end=' ')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef missing_cards(s):\n    cards = {'P': [], 'K': [], 'H': [], 'T': []}  # create dictionary of suits\n    suits = ['P', 'K', 'H', 'T']  # create list of suits\n    for i in range(0, len(s), 3):\n        cards[s[i]].append(s[i + 1:i + 3])  # add card to the list of the suit\n    for suit in suits:\n        if len(cards[suit]) != 13:  # if there are less/more than 13 cards in suit\n            return 'GRESKA'  # GRESKA is a word in Serbian and means ERROR\n        for card in cards[suit]:\n            if cards[suit].count(card) > 1:  # if there are more than 1 card with the same value in a suit\n                return 'GRESKA'  # GRESKA is a word in Serbian and means ERROR\n    return ' '.join([str(13 - len(cards[suit])) for suit in suits])  # return the number of missing cards for each suit\n\nprint(missing_cards(input()))\n", "\n\ndef main():\n    cards = input().split(\" \")\n    p = [0] * 14\n    k = [0] * 14\n    h = [0] * 14\n    t = [0] * 14\n    for card in cards:\n        if card[0] == \"P\":\n            p[int(card[1:]) - 1] += 1\n        elif card[0] == \"K\":\n            k[int(card[1:]) - 1] += 1\n        elif card[0] == \"H\":\n            h[int(card[1:]) - 1] += 1\n        elif card[0] == \"T\":\n            t[int(card[1:]) - 1] += 1\n    if max(p) > 1 or max(k) > 1 or max(h) > 1 or max(t) > 1:\n        print(\"GRESKA\")\n    else:\n        print(13 - sum(p), 13 - sum(k), 13 - sum(h), 13 - sum(t))\n\nmain()\n", "\n\ndef missing_cards(s):\n    cards = {'P': [], 'K': [], 'H': [], 'T': []}  # cards[suit] = [card1, card2, ...] = [P01, P02, ...]\n    suits = ['P', 'K', 'H', 'T']\n    for i in range(0, len(s) - 1, 3):\n        cards[s[i]].append(s[i + 1:i + 3])  # cards[suit].append(card)\n    for suit in suits:\n        if len(cards[suit]) != 13:  # if number of cards is not 13, then return error\n            return 'GRESKA'\n        for card in cards[suit]:\n            if cards[suit].count(card) > 1:  # if number of card is more than 1, then return error\n                return 'GRESKA'\n    return ' '.join([str(13 - len(cards[suit])) for suit in suits])  # return number of missing cards\n\nprint(missing_cards(input()))\n", "\n\ndef missing_cards(cards):\n    cards = {'P': [], 'K': [], 'H': [], 'T': []} # P - Pik, K - Karo, H - Herc, T - Tref\n    suits = ['P', 'K', 'H', 'T']\n    for i in range(0, len(cards) - 1, 3):\n        cards[cards[i]].append(cards[i + 1:i + 3]) # dodaje karte u listu \n    for suit in suits:\n        if len(cards[suit]) != 13: # ako ima vise od 13 karata u jednoj od boja, vraca GRESKA\n            return 'GRESKA'\n        for card in cards[suit]: # proverava da li ima duplikata u listi\n            if cards[suit].count(card) > 1: # ako ima duplikata, vraca GRESKA\n                return 'GRESKA'\n    return ' '.join([str(13 - len(cards[suit])) for suit in suits]) # vraca razliku izmedju 13 i broj karata u odredjenoj boji\n\nprint(missing_cards(input()))\n", "\ndef check(cards):\n    suits = {'P': 0, 'K': 0, 'H': 0, 'T': 0, 'A': 0}\n    numbers = {'P': [], 'K': [], 'H': [], 'T': [], 'A': []}\n\n    for card in cards:\n        suit = card[0]\n        number = card[1:]\n        suits[suit] += 1\n        numbers[suit].append(number)\n\n    for suit in suits:\n        if suits[suit] != 12:\n            print(12 - suits[suit], end=' ')\n        else:\n            if len(set(numbers[suit])) != 12:\n                print('GRESKA')\n                return\n    print()\n\n\nwhile True:\n    check(input())\n", "\n\ndef check(cards):\n    suits = {'P': 0, 'K': 0, 'H': 0, 'T': 0}\n    numbers = {'P': [], 'K': [], 'H': [], 'T': []}\n\n    for card in cards:\n        suit = card[0]\n        number = card[1:]\n        suits[suit] += 1\n        numbers[suit].append(number)\n\n    for suit in suits:\n        if suits[suit] != 13:\n            print(13 - suits[suit], end=' ') # print missing cards\n        else:\n            if len(set(numbers[suit])) != 13:\n                print('GRESKA') # print error if there are duplicate cards\n                return # exit function\n    print()\n\ncheck(input())\n", "\n\ndef main():\n    s = input()\n    d = dict()\n    for i in range(len(s)):\n        if s[i] in d:\n            print(\"ERROR\")\n            return\n        d[s[i]] = True\n    for i in range(4):\n        if chr(ord(\"A\")+i) not in d:\n            print(13, end=\" \")\n        else:\n            print(0, end=\" \")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef missing_cards(s):\n    cards = {'P': [], 'K': [], 'H': [], 'T': []}\n    suits = ['P', 'K', 'H', 'T']\n    for i in range(0, len(s), 3):\n        cards[s[i]].append(s[i + 1:i + 3])\n    for suit in suits:\n        if len(cards[suit]) != 13:\n            return 'GRESKA'  # GRESKA is a word in Serbian and means ERROR\n        for card in cards[suit]:\n            if cards[suit].count(card) > 1:\n                return 'GRESKA'  # GRESKA is a word in Serbian and means ERROR\n    return ' '.join([str(13 - len(cards[suit])) for suit in suits])  # ' '.join([str(13 - len(cards[suit])) for suit in suits])\n\nprint(missing_cards(input()))\n", "\n#-----import-----\nimport sys\n\n#-----main-----\ns = sys.stdin.readline().strip()\n\n#-----P---\np = []\np_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'P':\n        if s[i+1:i+3] not in p:\n            p.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in p:\n            p_missing += 1\n    else:\n        if str(i) not in p:\n            p_missing += 1\n\n#-----K-----\nk = []\nk_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'K':\n        if s[i+1:i+3] not in k:\n            k.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in k:\n            k_missing += 1\n    else:\n        if str(i) not in k:\n            k_missing += 1\n\n#-----H-----\nh = []\nh_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'H':\n        if s[i+1:i+3] not in h:\n            h.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in h:\n            h_missing += 1\n    else:\n        if str(i) not in h:\n            h_missing += 1\n\n#-----T-----\nt = []\nt_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'T':\n        if s[i+1:i+3] not in t:\n            t.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in t:\n            t_missing += 1\n    else:\n        if str(i) not in t:\n            t_missing += 1\n\nprint('{} {} {} {}'.format(p_missing, k_missing, h_missing, t_missing))\n", "\ndef main():\n    cards = [0] * 52\n    suits = {\"P\": 0, \"K\": 13, \"H\": 26, \"T\": 39}\n    suit_names = [\"P\", \"K\", \"H\", \"T\"]\n\n    cards_input = input()\n    for i in range(0, len(cards_input), 3):\n        card = cards_input[i:i + 3]\n        suit = suits[card[0]]\n        number = int(card[1:])\n        if cards[suit + number - 1] == 1:\n            print(\"GRESKA\")\n            return\n        cards[suit + number - 1] = 1\n\n    for suit in suit_names:\n        print(13 - sum(cards[suits[suit]:suits[suit] + 13]), end=\" \")\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef check(cards):\n    suits = {'P': 0, 'K': 0, 'H': 0, 'T': 0}\n    numbers = {'P': [], 'K': [], 'H': [], 'T': []}\n\n        if suit not in suits:\n            print('GRESKA')\n            return\n\n\n\n        if number not in numbers[suit]:\n            numbers[suit].append(number)\n        else:\n            print('GRESKA')\n            return\n\n    for card in cards:\n        suit = card[0]\n        number = card[1:]\n        suits[suit] += 1\n\n    for suit in suits:\n        if suits[suit] != 13:\n            print(13 - suits[suit], end=' ')\n        else:\n    print()\n\ncheck(input())\n", "\n\ndef main():\n    n = int(input())\n    d = {}\n    for i in range(n):\n        line = input().split()\n        d[line[0]] = line[1]\n    while True:\n        try:\n            name = input()\n            if name in d:\n                print(name, \"=\", d[name], sep=\"\")\n            else:\n                print(\"Not found\")\n        except:\n            break\n\nmain()\n", "\n\ndef check(cards):\n    suits = {'P': 0, 'K': 0, 'H': 0, 'T': 0}\n    numbers = {'P': [], 'K': [], 'H': [], 'T': []}\n\n    for card in cards:\n        suit = card[0]\n        number = int(card[1:])\n        suits[suit] += 1\n        numbers[suit].append(number)\n\n    for suit in suits:\n        if suits[suit] != 13:\n            print(13 - suits[suit], end=' ')  # print missing cards\n        else:\n            if len(set(numbers[suit])) != 13:\n                print('GRESKA')  # print error if there are duplicate cards\n                return\n    print()\n\ncheck(input())\n", "\ndef main():\n    cards = [0] * 52\n    suits = {\"P\": 0, \"K\": 13, \"H\": 26, \"T\": 39}\n    suit_names = [\"P\", \"K\", \"H\", \"T\"]\n\n    cards_input = input()\n    for i in range(0, len(cards_input), 3):\n        card = cards_input[i:i + 3]\n        suit = suits[card[0]]\n        number = int(card[1:])\n        if cards[suit + number - 1] == 1:\n            print(\"GRESKA\")\n            return\n        cards[suit + number - 1] = 1\n\n    for suit in suit_names:\n        print(13 - sum(cards[suits[suit]:suits[suit] + 13]), end=\" \")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    cards = [0 for _ in range(52)]\n    suits = {'P': 0, 'K': 13, 'H': 26, 'T': 39}\n    suit_names = ['P', 'K', 'H', 'T']\n\n    cards_input = input()\n    for i in range(0, len(cards_input), 3):\n        card = cards_input[i:i + 3]\n        suit = suits[card[0]]\n        number = int(card[1:])\n        if cards[suit + number - 1] == 1:\n            print('GRESKA')\n            return\n        cards[suit + number - 1] = 1\n\n    for suit in suit_names:\n        print(13 - sum(cards[suits[suit]:suits[suit] + 13]), end=' ')\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n#-----import-----\nimport sys\n\n#-----main-----\ns = sys.stdin.readline().strip()\n\n#-----P---\np = []\np_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'P':\n        if s[i+1:i+3] not in p:\n            p.append(s[i+1:i+3])\n        elif s[i+1:i+3] in p:\n            print('GRESKA') \n            exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in p:\n            p_missing += 1\n    else:\n        if str(i) not in p:\n            p_missing += 1\n\n#-----K-----\nk = []\nk_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'K':\n        if s[i+1:i+3] not in k:\n            k.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in k:\n            k_missing += 1\n    else:\n        if str(i) not in k:\n            k_missing += 1\n\n#-----H-----\nh = []\nh_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'H':\n        if s[i+1:i+3] not in h:\n            h.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in h:\n            h_missing += 1\n    else:\n        if str(i) not in h:\n            h_missing += 1\n\n#-----T-----\nt = []\nt_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'T':\n        if s[i+1:i+3] not in t:\n            t.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in t:\n            t_missing += 1\n    else:\n        if str(i) not in t:\n            t_missing += 1\n\nprint('{} {} {} {}'.format(p_missing, k_missing, h_missing, t_missing))\n", "\n\n# -----import-----\nimport sys\n\n# -----main-----\ns = sys.stdin.readline().strip()\n\n# -----P---\np = []\np_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'P':\n        if s[i + 1:i + 3] not in p:\n            p.append(s[i + 1:i + 3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in p:\n            p_missing += 1\n    else:\n        if str(i) not in p:\n            p_missing += 1\n\n# -----K-----\nk = []\nk_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'K':\n        if s[i + 1:i + 3] not in k:\n            k.append(s[i + 1:i + 3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0' + str(i) not in k:\n            k_missing += 1\n    else:\n        if str(i) not in k:\n            k_missing += 1\n\n# -----H-----\nh = []\nh_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'H':\n        if s[i + 1:i + 3] not in h:\n            h.append(s[i + 1:i + 3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0' + str(i) not in h:\n            h_missing += 1\n    else:\n        if str(i) not in h:\n            h_missing += 1\n\n# -----T-----\nt = []\nt_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'T':\n        if s[i + 1:i + 3] not in t:\n            t.append(s[i + 1:i + 3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0' + str(i) not in t:\n            t_missing += 1\n    else:\n        if str(i) not in t:\n            t_missing += 1\n\nprint('{} {} {} {}'.format(p_missing, k_missing, h_missing, t_missing))\n", "\n\ndef missing_cards(deck):\n    cards = {'P': [], 'K': [], 'H': [], 'T': []} # P = Pikovi, K = Kockice, H = Herc, T = Tref\n    suits = ['P', 'K', 'H', 'T']\n    for i in range(0, len(cards) - 1, 3):\n        cards[cards[i]].append(cards[i + 1:i + 3])\n    for suit in suits:\n        if len(cards[suit]) != 13:\n            return 'GRESKA'\n        for card in cards[suit]:\n            if cards[suit].count(card) > 1:\n                return 'GRESKA'\n    return ' '.join([str(13 - len(cards[suit])) for suit in suits])\n\nprint(missing_cards(input()))\n", "\n\ndef main():\n    cards = [0]*52\n    suits = {\"C\": 0, \"D\": 13, \"H\": 26, \"S\": 39, \"N\": 52}\n    suit_names = [\"C\", \"D\", \"H\", \"S\", \"N\"]\n\n    cards_input = input()\n    for i in range(0, len(cards_input), 3):\n        card = cards_input[i:i + 3]\n        suit = suits[card[0]]\n        number = int(card[1:]) - 1\n        if cards[suit + number] == 1:\n            print(\"GRESKA\")\n            return\n        cards[suit + number] = 1\n\n    for suit in suit_names:\n        print(13 - sum(cards[suits[suit]:suits[suit] + 13]), end=\" \")  # end=\" \" \u044d\u0442\u043e \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0441\u043b\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u043d\u0435 \u0431\u044b\u043b\u043e \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u0430 \u0441\u0442\u0440\u043e\u043a\u0438\n\n\nif __name__ == \"__main__\":\n    main()\n"]