["\n\nx, y, x1, y1, x2, y2 = [int(i) for i in input().split()]  # input data\n\nif x1 <= x <= x2 and y1 <= y <= y2:  # if point inside rectangle\n    x = min(abs(x1 - x), abs(x2 - x))\n    y = min(abs(y1 - y), abs(y2 - y))\n    print(min(x, y))\n\nelif x1 <= x <= x2:  # if point on one of the sides of the rectangle\n    print(min(abs(y1 - y), abs(y2 - y)))\n\nelif y1 <= y <= y2:\n    print(min(abs(x1 - x), abs(x2 - x)))\n\nelse:  # if point is outside the rectangle\n    print(min(abs(x - x1) + abs(y - y1), abs(x - x2) + abs(y - y1), abs(x - x1) + abs(y - y2), abs(x - x2) + abs(y - y2)))\n", "\n# Read from stdin.\nx, y, x1, y1, x2, y2 = [int(x) for x in input().split()] \n\n# Calculate the min distance.\nmin_dist = min(abs(x - x1), abs(x - x2), abs(y - y1), abs(y - y2))\n\n# Print the result.\nprint(min_dist)\n", "\nimport sys\nimport math\n\ndef main():\n    x, y, x1, y1, x2, y2 = map(int, sys.stdin.readline().split())\n    min_dist = min(math.hypot(x - x1, y - y1), math.hypot(x - x1, y - y2), math.hypot(x - x2, y - y1), math.hypot(x - x2, y - y2))\n    print(min_dist)\n\nif __name__ == \"__main__\":\n    main()\n", "\nx, y, x1, y1, x2, y2 = [int(i) for i in input().split()]\n\nif x1 <= x <= x2 and y1 <= y <= y2:\n    x = min(abs(x1 - x), abs(x2 - x))\n    y = min(abs(y1 - y), abs(y2 - y))\n    print(min(x, y))\n\nelif x1 <= x <= x2:\n    print(min(abs(y1 - y), abs(y2 - y)))\n\nelif y1 <= y <= y2:\n    print(min(abs(x1 - x), abs(x2 - x)))\n\nelse:\n    print(min(abs(x - x1) + abs(y - y1), abs(x - x2) + abs(y - y1), abs(x - x1) + abs(y - y2), abs(x - x2) + abs(y - y2)))\n", "\n\n# Read from stdin and parse to int\nx, y, x1, y1, x2, y2 = [int(x) for x in input().split()]\n\n# Calculate the min distance\nmin_dist = min(abs(x - x1), abs(x - x2), abs(y - y1), abs(y - y2))\n\n# Print the result\nprint(min_dist)\n", "import sys\n\nx, y, x1, y1, x2, y2 = [int(i) for i in input().split()]\n\nif x < x1:\n    print(x1 - x, file=sys.stderr)\nelif x > x2:\n    print(x - x2, file=sys.stderr)\nelif y < y1:\n    print(y1 - y, file=sys.stderr)\nelse:\n    print(y - y2, file=sys.stderr)\n", "\n\nx1, y1, x2, y2 = [int(x) for x in input().split()]  # \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438\nx3, y3 = [int(x) for x in input().split()]  # \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\u043e\u0439 \u0442\u043e\u0447\u043a\u0438\n\nif x3 < x1:\n    print(x1 - x3)\nelif x3 > x2:\n    print(x3 - x2)\nelif y3 < y1:\n    print(y1 - y3)\nelse:\n    print(y3 - y2)\n", "from collections import deque\n\n\ndef solve(x, y, x1, y1, x2, y2):\n    return min(min(y - y1, y2 - y), min(x - x1, x2 - x))\n\n\ndef main():\n    q = deque()\n    for _ in range(int(input())):\n        x, y, x1, y1, x2, y2 = map(int, input().split())\n        q.append(solve(x, y, x1, y1, x2, y2))\n    for i in q:\n        print(i)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nx, y, x1, y1, x2, y2 = [int(i) for i in input().split()]  \n\nif x1 <= x <= x2 and y1 <= y <= y2:\n    x = min(abs(x1 - x), abs(x2 - x))\n    y = min(abs(y1 - y), abs(y2 - y))\n    print(min(x, y))\n\nelif x1 <= x <= x2:\n    print(min(abs(y1 - y), abs(y2 - y)))\n\nelif y1 <= y <= y2:\n    print(min(abs(x1 - x), abs(x2 - x)))\n\nelse:\n    print(min(abs(x - x1) + abs(y - y1), abs(x - x2) + abs(y - y1), abs(x - x1) + abs(y - y2), abs(x - x2) + abs(y - y2)))\n", "\nfrom math import sqrt\n\n\ndef main():\n    x, y, x1, y1, x2, y2 = map(int, input().split())\n    if x <= x1:\n        if y <= y1:\n            print(sqrt((x1 - x) ** 2 + (y1 - y) ** 2))\n        elif y >= y2:\n            print(sqrt((x1 - x) ** 2 + (y2 - y) ** 2))\n        else:\n            print(x1 - x)\n    elif x >= x2:\n        if y <= y1:\n            print(sqrt((x2 - x) ** 2 + (y1 - y) ** 2))\n        elif y >= y2:\n            print(sqrt((x2 - x) ** 2 + (y2 - y) ** 2))\n        else:\n            print(x - x2)\n    else:\n        if y <= y1:\n            print(y1 - y)\n        else:\n            print(y - y2)\n\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\nimport sys\nimport math\n\ndef main():\n    x, y, x1, y1, x2, y2 = map(int, sys.stdin.readline().split()) # read each line of input\n    min_dist = min(math.hypot(x - x1, y - y1), math.hypot(x - x1, y - y2),\n                   math.hypot(x - x2, y - y1), math.hypot(x - x2, y - y2))\n    print(min_dist)\n\nif __name__ == \"__main__\":\n    main()\n", "\n# Read from std in\nx, y, x1, y1, x2, y2 = [int(x) for x in input().split()]\n\n# Calculate the min distance\nmin_dist = min(abs(x - x1), abs(x - x2), abs(y - y1), abs(y - y2))\n\n# Print the result\nprint(min_dist)\n", "\ndef main():\n    x, y, x1, y1, x2, y2 = map(int, input().split())\n    if x <= x1:\n        if y <= y1:\n            print(int(((x1 - x) ** 2 + (y1 - y) ** 2) ** 0.5))\n        elif y >= y2:\n            print(int(((x1 - x) ** 2 + (y2 - y) ** 2) ** 0.5))\n        else:\n            print(x1 - x)\n    elif x >= x2:\n        if y <= y1:\n            print(int(((x2 - x) ** 2 + (y1 - y) ** 2) ** 0.5))\n        elif y >= y2:\n            print(int(((x2 - x) ** 2 + (y2 - y) ** 2) ** 0.5))\n        else:\n            print(x - x2)\n    else:\n        if y <= y1:\n            print(y1 - y)\n        else:\n            print(y - y2)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport math\n\ndef main():\n    x, y, x1, y1, x2, y2 = [int(x) for x in input().split()]\n\n    # check if the goat can reach the house from the top or left side\n    if x < x1:\n        # check if the goat can reach the house from the top right corner\n        if y > y2:\n            distance = math.sqrt((x-x1)**2 + (y-y2)**2)\n        # check if the goat can reach the house from the top left corner\n        else:\n            distance = math.sqrt((x-x1)**2 + (y-y1)**2)\n    # check if the goat can reach the house from the bottom or right side\n    else:\n        # check if the goat can reach the house from the bottom left corner\n        if y < y1:\n            distance = math.sqrt((x-x2)**2 + (y-y1)**2)\n        # check if the goat can reach the house from the bottom right corner\n        else:\n            distance = math.sqrt((x-x2)**2 + (y-y2)**2)\n\n    print(distance)\n\nif __name__ == '__main__':\n    main()\n", "\n\nx, y, x1, y1, x2, y2 = [int(i) for i in input().split()]\n\nif x1 <= x <= x2 and y1 <= y <= y2:\n    x = min(abs(x1 - x), abs(x2 - x))\n    y = min(abs(y1 - y), abs(y2 - y))\n    print(min(x, y))\n\nelif x1 <= x <= x2:\n    print(min(abs(y1 - y), abs(y2 - y)))\n\nelif y1 <= y <= y2:\n    print(min(abs(x1 - x), abs(x2 - x)))\n\nelse:\n    print(min(abs(x - x1) + abs(y - y1), abs(x - x2) + abs(y - y1), abs(x - x1) + abs(y - y2), abs(x - x2) + abs(y - y2)))\n", "\ndef main():\n    x, y, x1, y1, x2, y2 = map(int, input().split())\n    print(max(min(y - y1, y2 - y), min(x - x1, x2 - x)))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nx, y, x1, y1, x2, y2 = [int(x) for x in input().split()] \n\nif x < x1:\n    print(x1 - x)\nelif x > x2:\n    print(x - x2)\nelif y < y1:\n    print(y1 - y)\nelse:\n    print(y - y2)\n", "\n\nimport math\n\ndef main():\n    x, y, x1, y1, x2, y2 = map(int, input().split())\n\n    # check if the goat can reach the house from the top or left side\n    if x < x1:\n        # check if the goat can reach the house from the top\n        if y > y2:\n            distance = math.sqrt((x-x1)**2 + (y-y2)**2)\n        # check if the goat can reach the house from the left\n        else:\n            distance = math.sqrt((x-x1)**2 + (y-y1)**2)\n    # check if the goat can reach the house from the bottom or right side\n    else:\n        # check if the goat can reach the house from the bottom\n        if y < y1:\n            distance = math.sqrt((x-x2)**2 + (y-y1)**2)\n        # check if the goat can reach the house from the right\n        else:\n            distance = math.sqrt((x-x2)**2 + (y-y2)**2)\n\n    print(distance)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    x, y, x1, y1, x2, y2 = map(int, sys.stdin.readline().split())\n    min_dist = min(math.hypot(x - x1, y - y1), math.hypot(x - x1, y - y2),\n                   math.hypot(x - x2, y - y1), math.hypot(x - x2, y - y2))\n    print(min_dist)\n\nif __name__ == \"__main__\":\n    main()\n", "import math\nfrom heapq import heappush, heappop\nfrom collections import defaultdict\nfrom sys import stdin, stdout\n\nn, m = map(int, stdin.readline().split())\na = []\nfor _ in range(n):\n    a.append(stdin.readline().strip())\n\nedges = defaultdict(list)\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == '#':\n            continue\n        if i > 0 and a[i-1][j] != '#':\n            edges[(i, j)].append((i-1, j))\n        if i < n-1 and a[i+1][j] != '#':\n            edges[(i, j)].append((i+1, j))\n        if j > 0 and a[i][j-1] != '#':\n            edges[(i, j)].append((i, j-1))\n        if j < m-1 and a[i][j+1] != '#':\n            edges[(i, j)].append((i, j+1))\n\nstart = None\nend = None\nfor i in range(n):\n    for j in range(m):\n        if a[i][j] == 'A':\n            start = (i, j)\n        if a[i][j] == 'B':\n            end = (i, j)\n\ndef dijkstra(start, end):\n    dist = defaultdict(lambda: math.inf)\n    dist[start] = 0\n    queue = []\n    heappush(queue, (0, start))\n\n    while queue:\n        d, u = heappop(queue)\n        if dist[u] < d:\n            continue\n        if u == end:\n            return d\n        for v in edges[u]:\n            alt = d + 1\n            if alt < dist[v]:\n                dist[v] = alt\n                heappush(queue, (alt, v))\n\n    return -1\n\nstdout.write(str(dijkstra(start, end)) + '\\n')\n", "#!/usr/bin/python\n\nimport math\n\n# Read input from user\nx, y, x1, y1, x2, y2 = map(int, input().split())\n\n# Find the distances to the sides of the rectangle\ndx = min(abs(x-x1), abs(x-x2))\ndy = min(abs(y-y1), abs(y-y2))\n\n# Print the minimum distance\nprint(math.sqrt(dx*dx + dy*dy))\n", "import math\n\n# Read input\nx, y, x1, y1, x2, y2 = map(int, input().split())\n\n# Find the distances to the sides of the rectangle\ndx = min(abs(x-x1), abs(x-x2))\ndy = min(abs(y-y1), abs(y-y2))\n\n# Print the minimum distance\nprint(math.sqrt(dx*dx + dy*dy))\n", "\n\n\ndef main():\n    x, y, x1, y1, x2, y2 = map(float, input().split())\n    print(min(x - x1, x2 - x, y - y1, y2 - y, (x1 - x) ** 2 + (y1 - y) ** 2,\n              (x1 - x) ** 2 + (y2 - y) ** 2, (x2 - x) ** 2 + (y1 - y) ** 2,\n              (x2 - x) ** 2 + (y2 - y) ** 2) ** 0.5)\n\n\n\nif __name__ == \"__main__\":\n    main()\n", "def main():\n    s = input()\n    print(s[:3])\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n# Read from stdin.\nx, y, x1, y1, x2, y2 = [int(x) for x in input().split()]\n\n# Calculate the min distance.\nmin_dist = min(abs(x - x1), abs(x - x2), abs(y - y1), abs(y - y2))\n\n# Print the result.\nprint(min_dist)\n", "\n\nx1, y1, x2, y2 = [int(x) for x in input().split()]  # \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\nx3, y3 = [int(x) for x in input().split()]  # \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0442\u043e\u0447\u043a\u0443\n\n\nif x3 < x1:  # \u0435\u0441\u043b\u0438 \u0442\u043e\u0447\u043a\u0430 \u043b\u0435\u0432\u0435\u0435 \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430\n    print(x1 - x3)\nelif x3 > x2:  # \u0435\u0441\u043b\u0438 \u0442\u043e\u0447\u043a\u0430 \u043f\u0440\u0430\u0432\u0435\u0435 \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430\n    print(x3 - x2)\nelif y3 < y1:  # \u0435\u0441\u043b\u0438 \u0442\u043e\u0447\u043a\u0430 \u0432\u044b\u0448\u0435 \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430\n    print(y1 - y3)\nelse:  # \u0435\u0441\u043b\u0438 \u0442\u043e\u0447\u043a\u0430 \u043d\u0438\u0436\u0435 \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430\n    print(y3 - y2)\n", "\nimport math\n\n# Read input from user.\nx, y, x1, y1, x2, y2 = map(int, input().split())  # noqa\n\n# Find the distances to the sides of the rectangle.\ndx = min(abs(x - x1), abs(x - x2))\ndy = min(abs(y - y1), abs(y - y2))\n\n# Print the minimum distance.\nprint(math.sqrt(dx * dx + dy * dy))\n", "\n\nimport math\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    x, y, x1, y1, x2, y2 = map(int, input().split())\n    print(min(min(y - y1, y2 - y), min(x - x1, x2 - x)))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n#\n\ndef main():\n    x, y, x1, y1, x2, y2 = map(int, input().split())  # type: int, int, int, int, int, int\n    print(min(min(y - y1, y2 - y), min(x - x1, x2 - x)))  # type: None\n\n\nif __name__ == \"__main__\":\n    main()\n", "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    print(sum(a[i] * b[i] for i in range(n)))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    x, y, x1, y1, x2, y2 = map(float, input().split())\n    if x <= x1:\n        if y <= y1:\n            print(((x1 - x) ** 2 + (y1 - y) ** 2) ** 0.5)\n        elif y >= y2:\n            print(((x1 - x) ** 2 + (y2 - y) ** 2) ** 0.5)\n        else:\n            print(x1 - x)\n    elif x >= x2:\n        if y <= y1:\n            print(((x2 - x) ** 2 + (y1 - y) ** 2) ** 0.5)\n        elif y >= y2:\n            print(((x2 - x) ** 2 + (y2 - y) ** 2) ** 0.5)\n        else:\n            print(x - x2)\n    else:\n        if y <= y1:\n            print(y1 - y)\n        else:\n            print(y - y2)\n\n\n\nif __name__ == \"__main__\":\n    main()\n", "import math\n\ndef main():\n    x, y, x1, y1, x2, y2 = [int(x) for x in input().split()]\n\n    # check if the goat can reach the house from the top or left side\n    if x < x1:\n        # check if the goat can reach the house from the top side\n        if y > y2:\n            distance = math.sqrt((x-x1)**2 + (y-y2)**2)\n        # check if the goat can reach the house from the left side\n        else:\n            distance = math.sqrt((x-x1)**2 + (y-y1)**2)\n    # check if the goat can reach the house from the bottom or right side\n    else:\n        # check if the goat can reach the house from the bottom side\n        if y < y1:\n            distance = math.sqrt((x-x2)**2 + (y-y1)**2)\n        # check if the goat can reach the house from the right side\n        else:\n            distance = math.sqrt((x-x2)**2 + (y-y2)**2)\n\n    print(distance)\n\nif __name__ == '__main__':\n    main()\n", "x, y, x1, y1, x2, y2 = [int(x) for x in input().split()]\n\nprint(max(x1 - x, x - x2, y1 - y, y - y2))\n", "\nx, y, x1, y1, x2, y2 = [int(i) for i in input().split()]\n\nif x < x1:\n    print(x1 - x)\nelif x > x2:\n    print(x - x2)\nelif y < y1:\n    print(y1 - y)\nelse:\n    print(y - y2)\n", "\n\nx, y, x1, y1, x2, y2 = [int(i) for i in input().split()]  # input data.\n\nif x1 <= x <= x2 and y1 <= y <= y2:  # if point is inside rectangle.\n    x = min(abs(x1 - x), abs(x2 - x))\n    y = min(abs(y1 - y), abs(y2 - y))\n    print(min(x, y))\n\nelif x1 <= x <= x2:  # if point is on one of the sides of the rectangle.\n    print(min(abs(y1 - y), abs(y2 - y)))\n\nelif y1 <= y <= y2:\n    print(min(abs(x1 - x), abs(x2 - x)))\n\nelse:  # if point is outside the rectangle.\n    print(min(abs(x - x1) + abs(y - y1), abs(x - x2) + abs(y - y1), abs(x - x1) + abs(y - y2), abs(x - x2) + abs(y - y2)))\n", "\n#\n\n\ndef main():\n    x, y, x1, y1, x2, y2 = map(int, input().split())\n    print(min(min(y - y1, y2 - y), min(x - x1, x2 - x)) +\n          abs(y - x) - min(min(y - y1, y2 - y), min(x - x1, x2 - x)))\n\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/python\n\nimport math\n\n# Read input from user\nx, y, x1, y1, x2, y2 = map(int, raw_input().split())\n\n# Find the distances to the sides of the rectangle\ndx = min(abs(x-x1), abs(x-x2))\ndy = min(abs(y-y1), abs(y-y2))\n\n# Print the minimum distance\nprint(math.sqrt(dx*dx + dy*dy))\n", "\n# \nx, y, x1, y1, x2, y2 = [int(i) for i in input().split()]\n\nif x1 <= x <= x2 and y1 <= y <= y2:\n    x = min(abs(x1 - x), abs(x2 - x))\n    y = min(abs(y1 - y), abs(y2 - y))\n    print(min(x, y))\n\nelif x1 <= x <= x2:\n    print(min(abs(y1 - y), abs(y2 - y)))\n\nelif y1 <= y <= y2:\n    print(min(abs(x1 - x), abs(x2 - x)))\n\nelse:\n    print(min(abs(x - x1) + abs(y - y1), abs(x - x2) + abs(y - y1), abs(x - x1) + abs(y - y2), abs(x - x2) + abs(y - y2)))\n", "\n\n# Test\n\n# Read from stdin and parse to int\nx, y, x1, y1, x2, y2 = [int(x) for x in input().split()] \n\n# Calculate the min distance\nmin_dist = min(abs(x - x1), abs(x - x2), abs(y - y1), abs(y - y2))\n\n# Print the result\nprint(min_dist)\n", "\nimport sys\nimport math\n\ndef main():\n    x, y, x1, y1, x2, y2 = map(int, sys.stdin.readline().split())\n    min_dist = min(math.hypot(x - x1, y - y1), math.hypot(x - x1, y - y2),\n                   math.hypot(x - x2, y - y1), math.hypot(x - x2, y - y2))\n    print(min_dist) \n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport math\n\ndef main():\n    x, y, x1, y1, x2, y2 = [int(x) for x in input().split()]\n\n    # check if the goat can reach the house from the top or left side\n    if x <= x1:\n        # check if the goat can reach the house from the top\n        if y >= y2:\n            distance = math.sqrt((x-x1)**2 + (y-y2)**2)\n        # check if the goat can reach the house from the left\n        else:\n            distance = math.sqrt((x-x1)**2 + (y-y1)**2)\n    # check if the goat can reach the house from the bottom or right side\n    elif x >= x2:\n        # check if the goat can reach the house from the bottom\n        if y <= y1:\n            distance = math.sqrt((x-x2)**2 + (y-y1)**2)\n        # check if the goat can reach the house from the right\n        else:\n            distance = math.sqrt((x-x2)**2 + (y-y2)**2)\n\n    print(distance)\n\nif __name__ == '__main__':\n    main()\n", "\n\nx, y, x1, y1, x2, y2 = [int(i) for i in input().strip().split()]\n\nif x < x1:\n    print(x1 - x)\nelif x > x2:\n    print(x - x2)\nelif y < y1:\n    print(y1 - y)\nelse:\n    print(y - y2)\n", "\nimport sys\nimport math\n\ndef main():\n    x, y, x1, y1, x2, y2 = map(int, sys.stdin.readline().split())\n    min_dist = min(math.hypot(x - x1, y - y1), math.hypot(x - x1, y - y2),\n                   math.hypot(x - x2, y - y1), math.hypot(x - x2, y - y2))\n    print(min_dist)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport math\n\ndef main():\n    x, y, x1, y1, x2, y2 = [int(x) for x in input().split()]\n\n    # check if the goat can reach the house from the top or left side\n    if x < x1:\n        # check if the goat can reach the house from the top side\n        if y > y2:\n            distance = math.sqrt((x-x1)**2 + (y-y2)**2)\n        # check if the goat can reach the house from the left side\n        else:\n            distance = math.sqrt((x-x1)**2 + (y-y1)**2)\n    # check if the goat can reach the house from the bottom or right side\n    else:\n        # check if the goat can reach the house from the bottom side\n        if y < y1:\n            distance = math.sqrt((x-x2)**2 + (y-y1)**2)\n        # check if the goat can reach the house from the right side\n        else:\n            distance = math.sqrt((x-x2)**2 + (y-y2)**2)\n\n    print(distance)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    print(min(a, b) + min(c, d))\n\n\nif __name__ == \"__main__\":\n    main()\n", "def main():\n    x, y, x1, y1, x2, y2 = map(int, input().split())  # x, y, x1, y1, x2, y2 = (int(x) for x in input().split())\n    print(min(min(y - y1, y2 - y), min(x - x1, x2 - x)))  # print(min(min(y - y1, y2 - y), min(x - x1, x2 - x)))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport math\n\ndef main():\n    x, y, x1, y1, x2, y2 = [int(x) for x in input().split()] \n\n    # check if the goat can reach the house from the top or left side\n    if x < x1:\n        # check if the goat can reach the house from the top right corner\n        if y > y2:\n            distance = math.sqrt((x-x1)**2 + (y-y2)**2)\n        # check if the goat can reach the house from the top left corner\n        else:\n            distance = math.sqrt((x-x1)**2 + (y-y1)**2)\n    # check if the goat can reach the house from the bottom or right side\n    else:\n        # check if the goat can reach the house from the bottom left corner\n        if y < y1:\n            distance = math.sqrt((x-x2)**2 + (y-y1)**2)\n        # check if the goat can reach the house from the bottom right corner\n        else:\n            distance = math.sqrt((x-x2)**2 + (y-y2)**2)\n\n    print(distance)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    x, y, x1, y1, x2, y2 = map(int, sys.stdin.readline().split())\n    min_dist = min(math.hypot(x - x1, y - y1),\n                   math.hypot(x - x1, y - y2),\n                   math.hypot(x - x2, y - y1),\n                   math.hypot(x - x2, y - y2))\n    print(min_dist)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nx1, y1, x2, y2 = [int(x) for x in input().split()]  # \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u043d\u0430 \u0441\u043f\u0438\u0441\u043e\u043a, \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u044f \u0432 int\nx3, y3 = [int(x) for x in input().split()]  # \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u043d\u0430 \u0441\u043f\u0438\u0441\u043e\u043a, \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u044f \u0432 int\n\nif x3 < x1:\n    print(x1 - x3)\nelif x3 > x2:\n    print(x3 - x2)\nelif y3 < y1:\n    print(y1 - y3)\nelse:\n    print(y3 - y2)\n", "\nx, y, x1, y1, x2, y2 = [int(i) for i in input().split()]  # input data\n\nif x1 <= x <= x2 and y1 <= y <= y2:  # if point is inside rectangle\n    x = min(abs(x1 - x), abs(x2 - x))\n    y = min(abs(y1 - y), abs(y2 - y))\n    print(min(x, y))\n\nelif x1 <= x <= x2:  # if point is on one of the sides of the rectangle\n    print(min(abs(y1 - y), abs(y2 - y)))\n\nelif y1 <= y <= y2:\n    print(min(abs(x1 - x), abs(x2 - x)))\n\nelse:  # if point is outside the rectangle\n    print(min(abs(x - x1) + abs(y - y1), abs(x - x2) + abs(y - y1), abs(x - x1) + abs(y - y2), abs(x - x2) + abs(y - y2)))\n", "\ndef main():\n    x, y, x1, y1, x2, y2 = map(int, input().split())\n    if x <= x1:\n        if y <= y1:\n            print(((x1 - x) ** 2 + (y1 - y) ** 2) ** 0.5)\n        elif y >= y2:\n            print(((x1 - x) ** 2 + (y2 - y) ** 2) ** 0.5)\n        else:\n            print(x1 - x)\n    elif x >= x2:\n        if y <= y1:\n            print(((x2 - x) ** 2 + (y1 - y) ** 2) ** 0.5)\n        elif y >= y2:\n            print(((x2 - x) ** 2 + (y2 - y) ** 2) ** 0.5)\n        else:\n            print(x - x2)\n    else:\n        if y <= y1:\n            print(y1 - y)\n        else:\n            print(y - y2)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n# Read from std in\nx, y, x1, y1, x2, y2 = [int(x) for x in input().split()] # split the input into 6 integers.\n\n# Calculate the min distance\nmin_dist = min(abs(x - x1), abs(x - x2), abs(y - y1), abs(y - y2))\n\n# Print the result\nprint(min_dist)\n", "#!/usr/bin/env python3\n\nimport math\n\n# Read input\nx, y, x1, y1, x2, y2 = map(int, input().split())  # input() gives a string\n\n# Find the distances to the sides of the rectangle\ndx = min(abs(x - x1), abs(x - x2))\ndy = min(abs(y - y1), abs(y - y2))\n\n# Print the minimum distance\nprint(math.sqrt(dx * dx + dy * dy))\n", "\nimport math\n\ndef main():\n    x, y, x1, y1, x2, y2 = [int(i) for i in input().split()]\n\n    # check if the goat can reach the house from the top or left side\n    if x < x1:\n        # check if the goat can reach the house from the top\n        if y > y2:\n            distance = math.sqrt((x - x1) ** 2 + (y - y2) ** 2)\n        # check if the goat can reach the house from the left\n        else:\n            distance = math.sqrt((x - x1) ** 2 + (y - y1) ** 2)\n    # check if the goat can reach the house from the bottom or right side\n    else:\n        # check if the goat can reach the house from the bottom\n        if y < y1:\n            distance = math.sqrt((x - x2) ** 2 + (y - y1) ** 2)\n        # check if the goat can reach the house from the right\n        else:\n            distance = math.sqrt((x - x2) ** 2 + (y - y2) ** 2)\n\n    print(distance)\n\nif __name__ == '__main__':\n    main()\n"]