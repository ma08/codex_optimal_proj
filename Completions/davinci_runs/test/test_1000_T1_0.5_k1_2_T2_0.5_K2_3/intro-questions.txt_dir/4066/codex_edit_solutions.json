["\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef lcm(a, b):\n\n    return (a * b) // gcd(a, b)\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    min_lcm = lcm(a[0], a[1])\n    min_i = 0\n    min_j = 1\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if lcm(a[i], a[j]) < min_lcm:\n                min_lcm = lcm(a[i], a[j])\n                min_i = i + 1\n                min_j = j + 1\n    print(min_i, min_j)\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef lcm(a, b):\n\n    return (a * b) // gcd(a, b)\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    min_lcm = lcm(a[0], a[1])\n    min_i = 0\n    min_j = 1\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if lcm(a[i], a[j]) < min_lcm:\n                min_lcm = lcm(a[i], a[j])\n                min_i = i + 1\n                min_j = j + 1\n    print(min_i, min_j)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef GCD(a, b):\n    if b == 0:\n        return a\n    return GCD(b, a % b)\n\ndef LCM(a, b):\n\n    return (a * b) // GCD(a, b)\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    min_lcm = LCM(a[0], a[1])\n    min_i = 1\n    min_j = 2\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if LCM(a[i], a[j]) < min_lcm:\n                min_lcm = LCM(a[i], a[j])\n                min_i = i + 1\n                min_j = j + 1\n    print(min_i, min_j)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b%a, a)\n\ndef lcm(a, b):\n    return (a*b)//gcd(a, b)\n\nn = int(input())\na = [int(i) for i in input().split()]\n\nmax_lcm = lcm(a[0], a[1])\nmax_i = 1\nmax_j = 2\n\nfor i in range(n):\n    for j in range(i+1, n):\n        if lcm(a[i], a[j]) > max_lcm:\n            max_lcm = lcm(a[i], a[j])\n            max_i = i + 1\n            max_j = j + 1\n\nprint(max_i, max_j)\n", "\ndef gcd(a, b): # function to find GCD of two numbers\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b): # function to find LCM of two numbers\n    return (a * b) // gcd(a, b)\n\ndef main():\n    n = int(input()) # number of elements in an array\n    a = list(map(int, input().split())) # array of elements\n    min_lcm = lcm(a[0], a[1]) # initializing minimum LCM\n    min_i = 1\n    min_j = 2\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if lcm(a[i], a[j]) < min_lcm:\n                min_lcm = lcm(a[i], a[j])\n                min_i = i + 1\n                min_j = j + 1\n    print(min_i, min_j)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\ndef lcm(a, b):\n    return (a*b)//gcd(a, b)\n\nn = int(input())\na = [int(i) for i in input().split()]\n\nmin_lcm = lcm(a[0], a[1])\nmin_i = 1\nmin_j = 2\n\nfor i in range(n):\n    for j in range(i+1, n):\n        if lcm(a[i], a[j]) < min_lcm:\n            min_lcm = lcm(a[i], a[j])\n            min_i = i + 1\n            min_j = j + 1\n", "\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\ndef lcm(a, b):\n    return (a*b) / gcd(a, b)\n\nn = int(input())\na = [int(i) for i in input().split()]\n\nmin_lcm = lcm(a[0], a[1])\nmin_i = 1\nmin_j = 2\n\nfor i in range(n):\n    for j in range(i+1, n):\n        if lcm(a[i], a[j]) < min_lcm:\n            min_lcm = lcm(a[i], a[j])\n            min_i = i + 1\n            min_j = j + 1\n\nprint(min_i, min_j)\n", "\ndef gcd(a, b): # function to find GCD of two numbers\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b): # function to find LCM of two numbers\n    return (a * b) // gcd(a, b)\n\ndef main():\n    n = int(input()) # number of elements in an array \n    a = list(map(int, input().split())) # array of elements\n    min_lcm = lcm(a[0], a[1]) # initializing minimum LCM\n    min_i = 1\n    min_j = 2\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if lcm(a[i], a[j]) < min_lcm:\n                min_lcm = lcm(a[i], a[j])\n                min_i = i + 1\n                min_j = j + 1\n    print(min_i, min_j)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef GCD(a, b):\n    if b == 0:\n        return a\n    return GCD(b, a % b)\n\ndef LCM(a, b):\n    return (a * b) // GCD(a, b)\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    min_lcm = LCM(a[0], a[1])  # \u521d\u671f\u5024\n    min_i = 1\n    min_j = 2\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if LCM(a[i], a[j]) < min_lcm:\n                min_lcm = LCM(a[i], a[j])\n                min_i = i + 1\n                min_j = j + 1\n    print(min_i, min_j)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef GCD(a, b):\n    if b == 0:\n        return a\n    return GCD(b, a % b)\n\ndef LCM(a, b):\n    return (a * b) // GCD(a, b)\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    min_lcm = LCM(a[0], a[1])\n    min_i = 1\n    min_j = 2\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if LCM(a[i], a[j]) < min_lcm:min_lcm = LCM(a[i], a[j])min_i = i + 1min_j = j + 1\n    print(min_i, min_j)\n\nif __name__ == '__main__':\n    main()\n", "\ndef gcd(a, b):  # function to find GCD of two numbers\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef lcm(a, b):  # function to find LCM of two numbers\n    return (a * b) // gcd(a, b)\n\n\ndef main():\n    n = int(input()) # number of elements in an array\n    a = list(map(int, input().split())) # array of elements\n    min_lcm = lcm(a[0], a[1]) # initializing minimum LCM\n    min_i = 1\n    min_j = 2\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if lcm(a[i], a[j]) < min_lcm:\n                min_lcm = lcm(a[i], a[j])\n                min_i = i + 1\n                min_j = j + 1\n    print(min_i, min_j)\n\nif __name__ == '__main__':\n    main()\n"]