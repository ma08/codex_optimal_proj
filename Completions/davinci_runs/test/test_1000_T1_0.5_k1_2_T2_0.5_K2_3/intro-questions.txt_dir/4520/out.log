2022-04-09 20:39:06.141571 """
The only difference between easy and hard versions is constraints.

You are given $n$ segments on the coordinate axis $OX$. Segments can intersect, lie inside each other and even coincide. The $i$-th segment is $[l_i; r_i]$ ($l_i \le r_i$) and it covers all integer points $j$ such that $l_i \le j \le r_i$.

The integer point is called bad if it is covered by strictly more than $k$ segments.

Your task is to remove the minimum number of segments so that there are no bad points at all.


-----Input-----

The first line of the input contains two integers $n$ and $k$ ($1 \le k \le n \le 200$) — the number of segments and the maximum number of segments by which each integer point can be covered.

The next $n$ lines contain segments. The $i$-th line contains two integers $l_i$ and $r_i$ ($1 \le l_i \le r_i \le 200$) — the endpoints of the $i$-th segment.


-----Output-----

In the first line print one integer $m$ ($0 \le m \le n$) — the minimum number of segments you need to remove so that there are no bad points.

In the second line print $m$ distinct integers $p_1, p_2, \dots, p_m$ ($1 \le p_i \le n$) — indices of segments you remove in any order. If there are multiple answers, you can print any of them.


-----Examples-----
Input
7 2
11 11
9 11
7 8
8 9
7 8
9 11
7 9

Output
3
1 4 7 

Input
5 1
29 30
30 30
29 29
28 30
30 30

Output
3
1 2 4 

Input
6 1
2 3
3 3
2 3
2 2
2 3
2 3

Output
4
1 3 5 6
"""
2022-04-09 20:39:06.141591 --------------------------
2022-04-09 20:40:44.895608 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    segments = []\n    for i in range(n):\n        segments.append(list(map(int, sys.stdin.readline().split())))\n    print(n - len(SegmentTree(segments, k)))\n    print(\" \".join(map(str, SegmentTree(segments, k).remove())))\n\nclass SegmentTree:\n    def __init__(self, segments, k):\n        self.segments = sorted(segments, key=lambda x: x[0])\n        self.k = k\n        self.tree = []\n        self.build(0, len(segments) - 1, 0)\n\n    def build(self, left, right, i):\n        if left == right:\n            self.tree.append(self.segments[left])\n            return\n        mid = (left + right) // 2\n        self.build(left, mid, 2 * i + 1)\n        self.build(mid + 1, right, 2 * i + 2)\n        self.tree.append(self.merge(self.tree[2 * i + 1], self.tree[2 * i + 2]))\n\n    def merge(self, s1, s2):\n        if s1[0] > s2[1]:\n            return s1\n        if s2[0] > s1[1]:\n            return s2\n        return [min(s1[0], s2[0]), max(s1[1], s2[1])]\n\n    def query(self, left, right, i, segment):\n        if segment[1] < left or segment[0] > right:\n            return 0\n        if left <= segment[0] and right >= segment[1]:\n            return 1\n        mid = (segment[0] + segment[1]) // 2\n        return self.query(left, right, 2 * i + 1, self.tree[2 * i + 1]) + self.query(left, right, 2 * i + 2, self.tree[2 * i + 2])\n\n    def remove(self):\n        removed = []\n        for i in range(len(self.tree)):\n            if self.query(self.tree[i][0], self.tree[i][1], 0, self.tree[0]) <= self.k:\n                removed.append(i + 1)\n        return removed\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "length",
      "index": 1,
      "logprobs": null,
      "text": "\n\nn, k = map(int, input().split())\nsegments = []\nfor i in range(n):\n    segments.append(tuple(map(int, input().split())))\n\n# for i in range(n):\n#     print(segments[i])\n\n# print(segments)\n\nsegments.sort()\n\n# print(segments)\n\n# for i in range(n):\n#     print(segments[i])\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print"
    }
  ],
  "created": 1649551146,
  "id": "cmpl-4vFta3BbzxbtrLknGELlthSOGvLuK",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 20:40:44.896227 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    segments = []\n    for i in range(n):\n        segments.append(list(map(int, sys.stdin.readline().split())))\n    print(n - len(SegmentTree(segments, k)))\n    print(\" \".join(map(str, SegmentTree(segments, k).remove())))\n\nclass SegmentTree:\n    def __init__(self, segments, k):\n        self.segments = sorted(segments, key=lambda x: x[0])\n        self.k = k\n        self.tree = []\n        self.build(0, len(segments) - 1, 0)\n\n    def build(self, left, right, i):\n        if left == right:\n            self.tree.append(self.segments[left])\n            return\n        mid = (left + right) // 2\n        self.build(left, mid, 2 * i + 1)\n        self.build(mid + 1, right, 2 * i + 2)\n        self.tree.append(self.merge(self.tree[2 * i + 1], self.tree[2 * i + 2]))\n\n    def merge(self, s1, s2):\n        if s1[0] > s2[1]:\n            return s1\n        if s2[0] > s1[1]:\n            return s2\n        return [min(s1[0], s2[0]), max(s1[1], s2[1])]\n\n    def query(self, left, right, i, segment):\n        if segment[1] < left or segment[0] > right:\n            return 0\n        if left <= segment[0] and right >= segment[1]:\n            return 1\n        mid = (segment[0] + segment[1]) // 2\n        return self.query(left, right, 2 * i + 1, self.tree[2 * i + 1]) + self.query(left, right, 2 * i + 2, self.tree[2 * i + 2])\n\n    def remove(self):\n        removed = []\n        for i in range(len(self.tree)):\n            if self.query(self.tree[i][0], self.tree[i][1], 0, self.tree[0]) <= self.k:\n                removed.append(i + 1)\n        return removed\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-09 20:40:44.896364 REASON stop
2022-04-09 20:40:44.908113 1 {
  "finish_reason": "length",
  "index": 1,
  "logprobs": null,
  "text": "\n\nn, k = map(int, input().split())\nsegments = []\nfor i in range(n):\n    segments.append(tuple(map(int, input().split())))\n\n# for i in range(n):\n#     print(segments[i])\n\n# print(segments)\n\nsegments.sort()\n\n# print(segments)\n\n# for i in range(n):\n#     print(segments[i])\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print(segments)\n\n# print"
}
2022-04-09 20:40:44.908285 REASON length
