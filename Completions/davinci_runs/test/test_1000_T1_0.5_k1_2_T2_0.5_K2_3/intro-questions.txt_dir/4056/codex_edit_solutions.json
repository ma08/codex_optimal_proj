["\n\n#!/usr/bin/env python\n\n# import module\nimport sys\n\n# Grab the filename from the command line\nfilename = sys.argv[1]\n\n# Open the file\nf = open(filename, 'rU')\n\n# Loop over each line\nfor line in f:\n    # Split the line into a list\n    line = line.split()\n    # Grab the first item in the list and print it\n    print line[0]\n\n# Close the file\nf.close()\n", "#\n\n# Solution \n\ndef gcd(a,b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b,a%b)\n\nn = int(input())\na = list(map(int,input().split()))\n\ng = a[0]\nfor i in range(1,n):\n    g = gcd(g,a[i])\n\nprint(g)\n", "\n# Solution\n\ndef gcd(a,b):\n\tif b == 0:\n\t\treturn a\n\telse:\n\t\treturn gcd(b,a%b)\n\nn = int(input())\na = list(map(int,input().split()))\n\ng = a[0]\nfor i in range(1,n):\n\tg = gcd(g,a[i])\n\nprint(g)\n", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nn = int(input())\na = list(map(int, input().split()))\nans = a[0]\nfor i in range(1, n):\n    ans = lcm(ans, a[i])\nprint(ans)\n", "\n\nimport { createWriteStream } from 'fs';\nimport { createHash } from 'crypto';\n\nexport default class File {\n  constructor(name, path, size, type, hash) {\n    this.name = name;\n    this.path = path;\n    this.size = size;\n    this.type = type;\n    this.hash = hash;\n  }\n\n  static async create(file) {\n    const { name, path, size, type } = file;\n    const hash = await this.hash(file);\n    return new File(name, path, size, type, hash);\n  }\n\n  static async hash(file) {\n    const hash = createHash('sha256');\n    const stream = createWriteStream(file.path);\n    stream.on('data', (data) => {\n      hash.update(data);\n    });\n    return new Promise((resolve) => {\n      stream.on('finish', () => {\n        resolve(hash.digest('hex'));\n      });\n    });\n  }\n}\n", "\n# Solution \n\ndef gcd(a,b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b,a%b)\n\nn = int(input())\na = list(map(int,input().split()))\n\ng = a[0]\nfor i in range(1,n):\n    g = gcd(g,a[i])\nprint(g)\n", "'''\nCreated on May 18, 2016\n\n@author: javi\n'''\n\nimport os\nimport re\nimport subprocess\nimport sys\n\n\ndef main():\n    if len(sys.argv) < 2:\n        print (\"Usage: python file.py <file>\")\n        sys.exit(1)\n    filename = sys.argv[1]\n    if not os.path.exists(filename):\n        print (\"Error: File '%s' not found\" % filename)\n        sys.exit(1)\n    f = open(filename)\n    file_contents = f.read()\n    f.close()\n    if not file_contents:\n        print (\"Error: File '%s' is empty\" % filename)\n        sys.exit(1)\n    file_type = subprocess.check_output([\"file\", filename]).decode(\"utf-8\")\n    file_type = re.search(r\":\\s*(.*)\\s*$\", file_type).group(1)\n    print (\"%s: %s\" % (filename, file_type))\n\n\nif __name__ == \"__main__\":\n    main()\n", "# coding: utf-8\n\n# \u6587\u5b57\u5217\u306e\u9006\u9806\n# \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u5217\u3092\u9006\u9806\u306b\u51fa\u529b\n# \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u5217\u306f\u5fc5\u305a\u82f1\u5927\u6587\u5b57\u3067\u69cb\u6210\u3055\u308c\u308b\nprint(input()[::-1])\n", "#\n# def gcd(a, b):\n#     if b == 0:\n#         return a\n#     else:\n#         return gcd(b, a % b)\n#\n# def lcm(a, b):\n#     return a * b // gcd(a, b)\n#\n# n = int(input())\n# a = list(map(int, input().split()))\n#\n# ans = a[0]\n# for i in range(1, n):\n#     ans = lcm(ans, a[i])\n#\n# print(ans)\n"]