["\nN = int(input())\n\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nC = list(map(int, input().split()))\n\nA.sort()\nB.sort()\nC.sort()\n\nans = 0\n\nfor i in range(N):\n    a = bisect.bisect_left(B, A[i] + 1)\n    c = bisect.bisect_left(C, B[i] + 1)\n    ans += a * c\n\nprint(ans)\n", "\nfrom bisect import bisect_left, bisect_right\n\nN = int(input())\nA = [int(input()) for i in range(N)]\nB = [int(input()) for i in range(N)]\nC = [int(input()) for i in range(N)]\n\nA.sort()  # O(NlogN)\n\ncount = 0\n\nfor i in range(N):  # O(NlogN)\n    count += bisect_left(A, B[i]) * (N - bisect_right(A, C[i]))\n\nprint(count)\n", "\nN, M, X = map(int, input().split())\nA = []\nC = []\nfor i in range(N):\n    a = list(map(int, input().split()))\n    C.append(a[0])\n    A.append(a[1:])\n\nans = float('inf')\n\nfor i in range(1 << N):\n    cost = 0\n    skills = [0] * M\n    for j in range(N):\n        if (i >> j) & 1:\n            cost += C[j]\n            for k in range(M):\n                skills[k] += A[j][k]\n    if all([s >= X for s in skills]):\n        ans = min(ans, cost)\n\nif ans == float('inf'):\n    print(-1)\nelse:\n    print(ans)\n", "\n#\n# N = int(input())\n#\n# A = list(map(int, input().split()))\n# B = list(map(int, input().split()))\n# C = list(map(int, input().split()))\n#\n# A.sort()\n# B.sort()\n# C.sort()\n#\n# ans = 0\n#\n# for i in range(N):\n#     a = bisect_left(B, A[i] + 1)\n#     c = bisect_left(C, B[i] + 1) - 1\n#     ans += a * c\n#\n# print(ans)\n", "N, K = map(int, input().split())\nA = list(map(int, input().split()))\n\nfor i in range(N): \n    if i == 0: \n        ans = A[i]\n        continue\n    if A[i] > K:\n        ans += K\n    else:\n        ans += A[i]\nprint(ans) \n", "#\n# N = int(input())\n# A = list(map(int, input().split()))\n# B = list(map(int, input().split()))\n# C = list(map(int, input().split()))\n#\n# A.sort()\n# B.sort()\n# C.sort()\n#\n# count = 0\n#\n# for b in B:\n#     count += bisect_left(A, b) * (N - bisect_right(C, b))\n#\n# print(count)\n", "\n\nN = int(input())\n\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nC = list(map(int, input().split()))\n\nA.sort()\nB.sort()\nC.sort()\n\nans = 0\n\nfor i in range(N):\n    a = bisect_left(B, A[i] + 1)\n    c = bisect_left(C, B[i] + 1) - a\n    ans += a * c\n\nprint(ans)\n", "\n\nN = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nC = list(map(int, input().split()))\n\nA.sort()\n\ncount = 0\n\nfor i in range(N):\n    count += bisect_left(A, B[i]) * (N - bisect_right(A, C[i]) + 1)\n\nprint(count)\n", "\nN, K = map(int, input().split())\n\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nC = list(map(int, input().split()))\n\nA.sort()\nB.sort()\nC.sort()\n\nans = 0\n\nfor i in range(N):\n    a = bisect_left(B, A[i] + 1)\n    c = bisect_left(C, B[i] + 1)\n    ans += a * c\n\nprint(ans)\n", "from bisect import bisect_left\n\n\nN, K = map(int, input().split())\n\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nC = list(map(int, input().split()))\n\nA.sort()\nB.sort()\nC.sort()\n\nans = 0\n\nfor i in range(N):\n    a = bisect_left(B, A[i] + 1)\n    c = N - bisect_left(C, B[i] + 1)\n    ans += a * c\n\nprint(ans)\n", "from bisect import bisect_left, bisect_right\nN = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nC = list(map(int, input().split()))\n\nA.sort()\nB.sort()\nC.sort()\n\ncount = 0\n\nfor b in B:\n    count += bisect_left(A, b) * (N - bisect_right(C, b))\n\nprint(count)\n", "\n\nN = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nC = list(map(int, input().split()))\n\nA.sort()\n\ncount = 0\n\nfor i in range(N):\n    count += bisect.bisect_left(A, B[i]) * (N - bisect.bisect_right(A, C[i]))\n\nprint(count)\n", "\nN = int(input())\n\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nC = list(map(int, input().split()))\n\nA.sort()\nB.sort()\nC.sort()\n\nans = 0\n\nfor i in range(N):\n    a = bisect_left(B, A[i] + 1)\n    c = bisect_left(C, B[i] + 1) - 1\n    ans += a * c\n\nprint(ans)\n", "from bisect import bisect_left\n\nN = int(input())\n\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nC = list(map(int, input().split()))\n\nA.sort()\nB.sort()\nC.sort()\n\nans = 0\n\nfor i in range(N):\n    a = bisect_left(B, A[i] + 1)\n    c = bisect_left(C, B[i] + 1)\n    ans += a * c\n\nprint(ans)\n"]