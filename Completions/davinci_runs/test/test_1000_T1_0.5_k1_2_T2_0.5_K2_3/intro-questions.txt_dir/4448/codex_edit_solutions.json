["\ndef main():\n    n, m = map(int, input().split())  # n: \u5e97\u306e\u6570\u3001m: \u5e97\u8217\u3078\u306e\u8a2a\u554f\u56de\u6570\n    k = list(map(int, input().split()))  # \u5e97\u3054\u3068\u306e\u8cfc\u5165\u6570\n    d_t = [list(map(int, input().split())) for _ in range(m)]  # d: \u65e5\u4ed8\u3001t: \u5e97\u756a\u53f7\n\n\ndef main():\n    n, m = map(int, input().split())\n    k = list(map(int, input().split()))\n    d_t = [list(map(int, input().split())) for _ in range(m)]\n    k_sum = sum(k)\n    d_t_dict = {i + 1: 0 for i in range(n)}\n    for d, t in d_t:\n        d_t_dict[t] += 1\n    d_t_dict = sorted(d_t_dict.items(), key=lambda x: x[1])\n    k = sorted(k, reverse=True)\n    d = 0\n    while k_sum != 0:\n        d += 1\n        if d_t_dict[0][0] == d:\n            k_sum -= k[0]\n            k.pop(0)\n            d_t_dict.pop(0)\n        else:\n            k_sum -= sum(k)\n            k = []\n    print(d)\n\n\nif __name__ == '__main__':\n    main()\n", "# https://atcoder.jp/contests/abc136/tasks/abc136_d\n\n\ndef main():\n    n, m = map(int, input().split())\n    k = list(map(int, input().split()))\n    d_t = [list(map(int, input().split())) for _ in range(m)]\n    k_sum = sum(k)\n    d_t_dict = {i + 1: 0 for i in range(n)}\n    for d, t in d_t:\n        d_t_dict[t] += 1\n    d_t_dict = sorted(d_t_dict.items(), key=lambda x: x[1])\n    k = sorted(k, reverse=True)\n    d = 0\n    while k_sum != 0:\n        d += 1\n        if d_t_dict[0][0] == d:\n            k_sum -= k[0]\n            k.pop(0)\n            d_t_dict.pop(0)\n        else:\n            k_sum -= sum(k)\n            k = []\n    print(d)\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, m = map(int, input().split())\n    k = list(map(int, input().split()))\n    d_t = [list(map(int, input().split())) for _ in range(m)]\n    k_sum = sum(k)\n    d_t_dict = {i + 1: 0 for i in range(n)}\n    for d, t in d_t:\n        d_t_dict[t] += 1\n    d_t_dict = sorted(d_t_dict.items(), key=lambda x: x[1])\n    k = sorted(k, reverse=True)\n    d = 0\n    while k_sum != 0:\n        d += 1\n        if d_t_dict[0][0] == d:\n            k_sum -= k[0]\n            k.pop(0)\n            d_t_dict.pop(0)\n        else:\n            k_sum -= sum(k)\n            k = []\n    print(d)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = [int(x) for x in input().split()]\n    k = [int(x) for x in input().split()]\n    offers = []  # first element is day, second is kind\n    for _ in range(m):\n        offers.append([int(x) for x in input().split()])\n    days = [0] * (n + 1)  # 0 is not used, so that first kind is 1\n    for day, kind in offers:\n        days[kind] = max(days[kind], day)\n    result = 0\n    for kind, day in enumerate(days[1:], 1):\n        if k[kind] > 0:\n            result = max(result, day + (k[kind] - 1) * 2)\n    print(result)\n\nif __name__ == '__main__':\n    main()\n", "\n\n    # TODO: implement\ndef main():\n    n, m = [int(x) for x in input().split()]\n    k = [int(x) for x in input().split()]\n    offers = []\n    for _ in range(m):\n        offers.append([int(x) for x in input().split()])\n    days = [0] * (n + 1)\n    for day, kind in offers:\n        days[kind] = max(days[kind], day)\n    result = 0\n    for kind, day in enumerate(days):\n        if k[kind] > 0:\n            result = max(result, day + (k[kind] - 1) * 2)\n    print(result)\n\nif __name__ == '__main__':\n    main()\n", "\n\n\ndef main():\n    n, m = [int(x) for x in input().split()]  # number of kinds of fruits and number of offers\n    k = [int(x) for x in input().split()]  # number of fruits of each kind\n    offers = []\n    for _ in range(m):\n        offers.append([int(x) for x in input().split()])\n    days = [0] * (n + 1)\n    for day, kind in offers:\n        days[kind] = max(days[kind], day)\n    result = 0\n    for kind, day in enumerate(days):\n        if k[kind] > 0:\n            result = max(result, day + (k[kind] - 1) * 2)\n    print(result)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = [int(x) for x in input().split()]\n    k = [int(x) for x in input().split()]\n    offers = []  # first element is day, second is kind\n    for _ in range(m):\n        offers.append([int(x) for x in input().split()])\n    days = [0] * (n + 1)  # 0 is not used\n    for kind, day in offers:\n        days[kind] = max(days[kind], day)\n    result = 0\n    for kind, day in enumerate(days):\n        if k[kind] > 0:\n            result = max(result, day + (k[kind] - 1) * 2)\n    print(result)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    l = []\n    for _ in range(n):\n        l.append(int(input()))\n    print(l)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, m = map(int, input().split())\n    k = list(map(int, input().split()))\n    dt = [list(map(int, input().split())) for _ in range(m)]\n    k_sum = sum(k)\n    dt_dict = {i+1: 0 for i in range(n)}\n    for d, t in dt:\n        dt_dict[t] += 1\n    dt_dict = sorted(dt_dict.items(), key=lambda x: x[1])\n    k = sorted(k, reverse=True)\n    d = 0\n    while k_sum != 0:\n        d += 1\n        if dt_dict[0][1] == d:\n            k_sum -= k[0]\n            k.pop(0)\n            dt_dict.pop(0)\n        else:\n            k_sum -= sum(k)\n            k = []\n    print(d)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = [int(x) for x in input().split()]\n    k = [int(x) for x in input().split()]\n    offers = []\n    for _ in range(m):\n        offers.append([int(x) for x in input().split()])\n    days = [0] * n\n    for day, kind in offers:\n        days[kind] = max(days[kind], day)\n    result = 0\n    for kind, day in enumerate(days):\n        if k[kind] > 0:\n            result = max(result, day + (k[kind] - 1) * 2)\n    print(result)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, m = map(int, input().split())\n    k = list(map(int, input().split()))\n    dt = [list(map(int, input().split())) for _ in range(m)]\n    k_sum = sum(k)\n    dt_dict = {i+1: 0 for i in range(n)}\n    for d, t in dt:\n        dt_dict[t] += 1\n    dt_dict = sorted(dt_dict.items(), key=lambda x: x[1], reverse=True)\n    k = sorted(k, reverse=True)\n    d = 0\n    while k_sum != 0:\n        d += 1\n        if dt_dict[0][0] == d and k_sum != 0:\n            k_sum -= k[0]\n            k.pop(0)\n            dt_dict.pop(0)\n        elif k_sum != 0:\n            k_sum -= sum(k)\n            k = []\n    print(d)\n\n\nif __name__ == '__main__':\n    main()\n", "# https://atcoder.jp/contests/abc136/tasks/abc136_d\n\n\ndef main():\n    n = int(input())\n    s = input()\n    s_dict = {i: 0 for i in range(n)}\n    for i in range(n):\n        s_dict[i] = s[i]\n    s_dict = sorted(s_dict.items(), key=lambda x: x[1])\n    s_dict_r = dict()\n    for i in s_dict:\n        s_dict_r[i[0]] = i[1]\n    d = 0\n    while s_dict_r != dict():\n        d += 1\n        for j in s_dict_r:\n            if s_dict_r[j] == 'R':\n                s_dict_r[j] = 'L'\n                s_dict_r[j-1] = 'R'\n            elif s_dict_r[j] == 'L':\n                s_dict_r[j] = 'R'\n                s_dict_r[j-1] = 'L'\n    print(d)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for i in range(n):\n        print(a[i] + b[i], end=' ')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    # n, m = [int(x) for x in input().split()]\n    # k = [int(x) for x in input().split()]\n    # offers = []\n    # for _ in range(m):\n    #     offers.append([int(x) for x in input().split()])\n    # days = [0] * (n + 1)\n    # for day, type in offers:\n    #     days[type] = max(days[type], day)\n    # result = 0\n    # for kind, day in enumerate(days):\n    #     if k[kind] > 0:\n    #         result = max(result, day + (k[kind] - 1) * 2)\n    # print(result)\n    print('hi')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = [int(x) for x in input().split()]\n    k = [int(x) for x in input().split()]  # number of each kind\n    offers = []  # first element is day, second is kind\n    for _ in range(m):\n        offers.append([int(x) for x in input().split()])\n    days = [0] * (n + 1)  # 0 is not used\n    for day, kind in offers:\n        days[kind] = max(days[kind], day)\n    result = 0\n    for kind, day in enumerate(days[1:], 1):\n        if k[kind] > 0:\n            result = max(result, day + (k[kind] - 1) * 2)\n    print(result)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, m = map(int, input().split())\n    k = list(map(int, input().split()))\n    dt = [list(map(int, input().split())) for _ in range(m)]\n    k_sum = sum(k)\n    dt_dict = {i+1: 0 for i in range(n)}\n    for d, t in dt:\n        dt_dict[t] += 1\n    dt_dict = sorted(dt_dict.items(), key=lambda x: x[1], reverse=True)\n    k = sorted(k, reverse=True)\n    d = 0\n    while k_sum != 0:\n        d += 1\n        if dt_dict[0][1] == 0:\n            dt_dict.pop(0)\n        elif dt_dict[0][0] == d:\n            k_sum -= k[0]\n            k.pop(0)\n            dt_dict.pop(0)\n        else:\n            k_sum -= sum(k)\n            k = []\n    print(d)\n\n\nif __name__ == '__main__':\n    main()\n"]