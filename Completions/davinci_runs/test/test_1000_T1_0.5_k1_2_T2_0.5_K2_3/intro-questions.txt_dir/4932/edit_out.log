2022-04-13 07:35:57.492963 num operations 2
2022-04-13 07:35:57.492973 size on input set 1
2022-04-13 07:35:59.103320 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    a, b, c, d = [int(x) for x in sys.stdin.readline().split()]\n    p, m, g = [int(x) for x in sys.stdin.readline().split()]\n    for time in [p, m, g]:\n        dogs = 0\n        if (time - 1) % (a + b) < a:\n            dogs += 1\n        if (time - 1) % (c + d) < c:\n            dogs += 1\n        if dogs == 2:\n            print(\"both\")\n        elif dogs == 1:\n            print(\"one\")\n        else:\n            print(\"none\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    a, b, c, d = [int(x) for x in sys.stdin.readline().split()]\n    p, m, g = [int(x) for x in sys.stdin.readline().split()]\n    for time in [p, m, g]:\n        dogs = 0\n        if (time - 1) % (a + b) < a:\n            dogs += 1\n        if (time - 1) % (c + d) < c:\n            dogs += 1\n        if dogs == 2:\n            print(\"both\")\n        elif dogs == 1:\n            print(\"one\")\n        else:\n            print(\"none\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n#mdf\nimport sys\n\ndef main():\n    a, b, c, d = [int(x) for x in sys.stdin.readline().split()]\n    p, m, g = [int(x) for x in sys.stdin.readline().split()]\n    for time in [p, m, g]:\n        dogs = 0\n        if (time - 1) % (a + b) < a:\n            dogs += 1\n        if (time - 1) % (c + d) < c:\n            dogs += 1\n        if dogs == 2:\n            print(\"both\")\n        elif dogs == 1:\n            print(\"one\")\n        else:\n            print(\"none\")\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649835357,
  "object": "edit"
}
2022-04-13 07:35:59.103538 fix spelling mistakes 3 ['\nimport sys\n\ndef main():\n    a, b, c, d = [int(x) for x in sys.stdin.readline().split()]\n    p, m, g = [int(x) for x in sys.stdin.readline().split()]\n    for time in [p, m, g]:\n        dogs = 0\n        if (time - 1) % (a + b) < a:\n            dogs += 1\n        if (time - 1) % (c + d) < c:\n            dogs += 1\n        if dogs == 2:\n            print("both")\n        elif dogs == 1:\n            print("one")\n        else:\n            print("none")\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef main():\n    a, b, c, d = [int(x) for x in sys.stdin.readline().split()]\n    p, m, g = [int(x) for x in sys.stdin.readline().split()]\n    for time in [p, m, g]:\n        dogs = 0\n        if (time - 1) % (a + b) < a:\n            dogs += 1\n        if (time - 1) % (c + d) < c:\n            dogs += 1\n        if dogs == 2:\n            print("both")\n        elif dogs == 1:\n            print("one")\n        else:\n            print("none")\n\nif __name__ == \'__main__\':\n    main()\n', '\n#mdf\nimport sys\n\ndef main():\n    a, b, c, d = [int(x) for x in sys.stdin.readline().split()]\n    p, m, g = [int(x) for x in sys.stdin.readline().split()]\n    for time in [p, m, g]:\n        dogs = 0\n        if (time - 1) % (a + b) < a:\n            dogs += 1\n        if (time - 1) % (c + d) < c:\n            dogs += 1\n        if dogs == 2:\n            print("both")\n        elif dogs == 1:\n            print("one")\n        else:\n            print("none")\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 07:35:59.103571 size on output set 2
2022-04-13 07:35:59.103578 size on input set 2
2022-04-13 07:36:00.668966 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#mdfs\nimport sys\n\ndef main():\n    a, b, c, d = [int(x) for x in sys.stdin.readline().split()]\n    p, m, g = [int(x) for x in sys.stdin.readline().split()]\n    for time in [p, m, g]:\n        dogs = 0\n        if (time - 1) % (a + b) < a:\n            dogs += 1\n        if (time - 1) % (c + d) < c:\n            dogs += 1\n        if dogs == 2:\n            print(\"both\")\n        elif dogs == 1:\n            print(\"one\")\n        else:\n            print(\"none\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n#mdfs\nimport sys\n\ndef main():\n    a, b, c, d = [int(x) for x in sys.stdin.readline().split()]\n    p, m, g = [int(x) for x in sys.stdin.readline().split()]\n    for time in [p, m, g]:\n        dogs = 0\n        if (time - 1) % (a + b) < a:\n            dogs += 1\n        if (time - 1) % (c + d) < c:\n            dogs += 1\n        if dogs == 2:\n            print(\"both\")\n        elif dogs == 1:\n            print(\"one\")\n        else:\n            print(\"none\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n#mdff\nimport sys\n\ndef main():\n    a, b, c, d = [int(x) for x in sys.stdin.readline().split()]\n    p, m, g = [int(x) for x in sys.stdin.readline().split()]\n    for time in [p, m, g]:\n        dogs = 0\n        if (time - 1) % (a + b) < a:\n            dogs += 1\n        if (time - 1) % (c + d) < c:\n            dogs += 1\n        if dogs == 2:\n            print(\"both\")\n        elif dogs == 1:\n            print(\"one\")\n        else:\n            print(\"none\")\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649835359,
  "object": "edit"
}
2022-04-13 07:36:00.669170 fix syntax errors 3 ['\n#mdfs\nimport sys\n\ndef main():\n    a, b, c, d = [int(x) for x in sys.stdin.readline().split()]\n    p, m, g = [int(x) for x in sys.stdin.readline().split()]\n    for time in [p, m, g]:\n        dogs = 0\n        if (time - 1) % (a + b) < a:\n            dogs += 1\n        if (time - 1) % (c + d) < c:\n            dogs += 1\n        if dogs == 2:\n            print("both")\n        elif dogs == 1:\n            print("one")\n        else:\n            print("none")\n\nif __name__ == \'__main__\':\n    main()\n', '\n#mdfs\nimport sys\n\ndef main():\n    a, b, c, d = [int(x) for x in sys.stdin.readline().split()]\n    p, m, g = [int(x) for x in sys.stdin.readline().split()]\n    for time in [p, m, g]:\n        dogs = 0\n        if (time - 1) % (a + b) < a:\n            dogs += 1\n        if (time - 1) % (c + d) < c:\n            dogs += 1\n        if dogs == 2:\n            print("both")\n        elif dogs == 1:\n            print("one")\n        else:\n            print("none")\n\nif __name__ == \'__main__\':\n    main()\n', '\n#mdff\nimport sys\n\ndef main():\n    a, b, c, d = [int(x) for x in sys.stdin.readline().split()]\n    p, m, g = [int(x) for x in sys.stdin.readline().split()]\n    for time in [p, m, g]:\n        dogs = 0\n        if (time - 1) % (a + b) < a:\n            dogs += 1\n        if (time - 1) % (c + d) < c:\n            dogs += 1\n        if dogs == 2:\n            print("both")\n        elif dogs == 1:\n            print("one")\n        else:\n            print("none")\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 07:36:03.953375 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n    for time in [p, m, g]:\n        dogs = 0\n        if (time - 1) % (a + b) < a:\n            dogs += 1\n        if (time - 1) % (c + d) < c:\n            dogs += 1\n        if dogs == 2:\n            print(\"both\")\n        elif dogs == 1:\n            print(\"one\")\n        else:\n            print(\"none\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    a, b, c, d = [int(x) for x in sys.stdin.readline().split()]\n    p, m, g = [int(x) for x in sys.stdin.readline().split()]\n    for time in [p, m, g]:\n        dogs = 0\n        if (time - 1) % (a + b) < a and time > a:\n            dogs += 1\n        if (time - 1) % (c + d) < c and time > c:\n            dogs += 1\n        if dogs == 2:\n            print(\"both\")\n        elif dogs == 1:\n            print(\"one\")\n        else:\n            print(\"none\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    a, b, c, d = [int(x) for x in input().split()]\n    p, m, g = [int(x) for x in input().split()]\n    for time in [p, m, g]:\n        dogs = 0\n        if (time - 1) % (a + b) < a:\n            dogs += 1\n        if (time - 1) % (c + d) < c:\n            dogs += 1\n        if dogs == 2:\n            print(\"both\")\n        elif dogs == 1:\n            print(\"one\")\n        else:\n            print(\"none\")\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649835360,
  "object": "edit"
}
2022-04-13 07:36:03.953632 fix syntax errors 3 ['\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n    for time in [p, m, g]:\n        dogs = 0\n        if (time - 1) % (a + b) < a:\n            dogs += 1\n        if (time - 1) % (c + d) < c:\n            dogs += 1\n        if dogs == 2:\n            print("both")\n        elif dogs == 1:\n            print("one")\n        else:\n            print("none")\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef main():\n    a, b, c, d = [int(x) for x in sys.stdin.readline().split()]\n    p, m, g = [int(x) for x in sys.stdin.readline().split()]\n    for time in [p, m, g]:\n        dogs = 0\n        if (time - 1) % (a + b) < a and time > a:\n            dogs += 1\n        if (time - 1) % (c + d) < c and time > c:\n            dogs += 1\n        if dogs == 2:\n            print("both")\n        elif dogs == 1:\n            print("one")\n        else:\n            print("none")\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef main():\n    a, b, c, d = [int(x) for x in input().split()]\n    p, m, g = [int(x) for x in input().split()]\n    for time in [p, m, g]:\n        dogs = 0\n        if (time - 1) % (a + b) < a:\n            dogs += 1\n        if (time - 1) % (c + d) < c:\n            dogs += 1\n        if dogs == 2:\n            print("both")\n        elif dogs == 1:\n            print("one")\n        else:\n            print("none")\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 07:36:03.953667 size on output set 5
2022-04-13 07:36:03.953677 num operations 2
2022-04-13 07:36:03.953682 size on input set 1
2022-04-13 07:36:15.440175 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    for i in range(n):\n        k, l, s = [int(n) for n in sys.stdin.readline().split()]\n        keyboard = sys.stdin.readline()\n        target = sys.stdin.readline()\n        if l > s:\n            print(\"Case #%d: %s\" % (i + 1, 0.0))\n        else:\n            max = 0\n            for i in range(s - l + 1):\n                if target in keyboard[i:i + l]:\n                    max += 1\n            print(\"Case #%d: %s\" % (i + 1, max))\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    agg, calm, agg2, calm2 = [int(n) for n in sys.stdin.readline().split()]\n    p, m, g = [int(n) for n in sys.stdin.readline().split()]\n    if (p - 1) % (agg + calm) < agg and (p - 1) % (agg2 + calm2) < agg2:\n        print(\"both\")\n    elif (p - 1) % (agg + calm) < agg or (p - 1) % (agg2 + calm2) < agg2:\n        print(\"one\")\n    else:\n        print(\"none\")\n    if (m - 1) % (agg + calm) < agg and (m - 1) % (agg2 + calm2) < agg2:\n        print(\"both\")\n    elif (m - 1) % (agg + calm) < agg or (m - 1) % (agg2 + calm2) < agg2:\n        print(\"one\")\n    else:\n        print(\"none\")\n    if (g - 1) % (agg + calm) < agg and (g - 1) % (agg2 + calm2) < agg2:\n        print(\"both\")\n    elif (g - 1) % (agg + calm) < agg or (g - 1) % (agg2 + calm2) < agg2:\n        print(\"one\")\n    else:\n        print(\"none\")\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    aggr, calm, aggr2, calm2 = [int(n) for n in sys.stdin.readline().split()] \n    p, m, g = [int(n) for n in sys.stdin.readline().split()]\n    if (p - 1) % (aggr + calm) < aggr and (p - 1) % (aggr2 + calm2) < aggr2:\n        print(\"both\")\n    elif (p - 1) % (aggr + calm) < aggr or (p - 1) % (aggr2 + calm2) < aggr2:\n        print(\"one\")\n    else:\n        print(\"none\")\n    if (m - 1) % (aggr + calm) < aggr and (m - 1) % (aggr2 + calm2) < aggr2:\n        print(\"both\")\n    elif (m - 1) % (aggr + calm) < aggr or (m - 1) % (aggr2 + calm2) < aggr2:\n        print(\"one\")\n    else:\n        print(\"none\")\n    if (g - 1) % (aggr + calm) < aggr and (g - 1) % (aggr2 + calm2) < aggr2:\n        print(\"both\")\n    elif (g - 1) % (aggr + calm) < aggr or (g - 1) % (aggr2 + calm2) < aggr2:\n        print(\"one\")\n    else:\n        print(\"none\")\n\nmain()\n"
    }
  ],
  "created": 1649835363,
  "object": "edit"
}
2022-04-13 07:36:15.440377 fix spelling mistakes 3 ['\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    for i in range(n):\n        k, l, s = [int(n) for n in sys.stdin.readline().split()]\n        keyboard = sys.stdin.readline()\n        target = sys.stdin.readline()\n        if l > s:\n            print("Case #%d: %s" % (i + 1, 0.0))\n        else:\n            max = 0\n            for i in range(s - l + 1):\n                if target in keyboard[i:i + l]:\n                    max += 1\n            print("Case #%d: %s" % (i + 1, max))\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    agg, calm, agg2, calm2 = [int(n) for n in sys.stdin.readline().split()]\n    p, m, g = [int(n) for n in sys.stdin.readline().split()]\n    if (p - 1) % (agg + calm) < agg and (p - 1) % (agg2 + calm2) < agg2:\n        print("both")\n    elif (p - 1) % (agg + calm) < agg or (p - 1) % (agg2 + calm2) < agg2:\n        print("one")\n    else:\n        print("none")\n    if (m - 1) % (agg + calm) < agg and (m - 1) % (agg2 + calm2) < agg2:\n        print("both")\n    elif (m - 1) % (agg + calm) < agg or (m - 1) % (agg2 + calm2) < agg2:\n        print("one")\n    else:\n        print("none")\n    if (g - 1) % (agg + calm) < agg and (g - 1) % (agg2 + calm2) < agg2:\n        print("both")\n    elif (g - 1) % (agg + calm) < agg or (g - 1) % (agg2 + calm2) < agg2:\n        print("one")\n    else:\n        print("none")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    aggr, calm, aggr2, calm2 = [int(n) for n in sys.stdin.readline().split()] \n    p, m, g = [int(n) for n in sys.stdin.readline().split()]\n    if (p - 1) % (aggr + calm) < aggr and (p - 1) % (aggr2 + calm2) < aggr2:\n        print("both")\n    elif (p - 1) % (aggr + calm) < aggr or (p - 1) % (aggr2 + calm2) < aggr2:\n        print("one")\n    else:\n        print("none")\n    if (m - 1) % (aggr + calm) < aggr and (m - 1) % (aggr2 + calm2) < aggr2:\n        print("both")\n    elif (m - 1) % (aggr + calm) < aggr or (m - 1) % (aggr2 + calm2) < aggr2:\n        print("one")\n    else:\n        print("none")\n    if (g - 1) % (aggr + calm) < aggr and (g - 1) % (aggr2 + calm2) < aggr2:\n        print("both")\n    elif (g - 1) % (aggr + calm) < aggr or (g - 1) % (aggr2 + calm2) < aggr2:\n        print("one")\n    else:\n        print("none")\n\nmain()\n']
2022-04-13 07:36:15.440417 size on output set 3
2022-04-13 07:36:15.440424 size on input set 3
2022-04-13 07:36:18.529428 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    aggr, calm, aggr2, calm2 = [int(n) for n in sys.stdin.readline().split()] \n    p, m, g = [int(n) for n in sys.stdin.readline().split()]\n    if (p - 1) % (aggr + calm) < aggr and (p - 1) % (aggr2 + calm2) < aggr2: \n        print(\"both\")\n    elif (p - 1) % (aggr + calm) < aggr or (p - 1) % (aggr2 + calm2) < aggr2:\n        print(\"one\")\n    else:\n        print(\"none\")\n    if (m - 1) % (aggr + calm) < aggr and (m - 1) % (aggr2 + calm2) < aggr2:\n        print(\"both\")\n    elif (m - 1) % (aggr + calm) < aggr or (m - 1) % (aggr2 + calm2) < aggr2:\n        print(\"one\")\n    else:\n        print(\"none\")\n    if (g - 1) % (aggr + calm) < aggr and (g - 1) % (aggr2 + calm2) < aggr2:\n        print(\"both\")\n    elif (g - 1) % (aggr + calm) < aggr or (g - 1) % (aggr2 + calm2) < aggr2:\n        print(\"one\")\n    else:\n        print(\"none\")\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    aggr, calm, aggr2, calm2 = [int(n) for n in sys.stdin.readline().split()]\n    p, m, g = [int(n) for n in sys.stdin.readline().split()]\n    if (p - 1) % (aggr + calm) < aggr and (p - 1) % (aggr2 + calm2) < aggr2:\n        print(\"both\")\n    elif (p - 1) % (aggr + calm) < aggr or (p - 1) % (aggr2 + calm2) < aggr2:\n        print(\"one\")\n    else:\n        print(\"none\")\n    if (m - 1) % (aggr + calm) < aggr and (m - 1) % (aggr2 + calm2) < aggr2:\n        print(\"both\")\n    elif (m - 1) % (aggr + calm) < aggr or (m - 1) % (aggr2 + calm2) < aggr2:\n        print(\"one\")\n    else:\n        print(\"none\")\n    if (g - 1) % (aggr + calm) < aggr and (g - 1) % (aggr2 + calm2) < aggr2:\n        print(\"both\")\n    elif (g - 1) % (aggr + calm) < aggr or (g - 1) % (aggr2 + calm2) < aggr2:\n        print(\"one\")\n    else:\n        print(\"none\")\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\n\ndef main():\n    aggr, calm, aggr2, calm2 = [int(n) for n in sys.stdin.readline().split()]\n    p, m, g = [int(n) for n in sys.stdin.readline().split()]\n    if (p - 1) % (aggr + calm) < aggr and (p - 1) % (aggr2 + calm2) < aggr2:\n        print(\"both\")\n    elif (p - 1) % (aggr + calm) < aggr or (p - 1) % (aggr2 + calm2) < aggr2:\n        print(\"one\")\n    else:\n        print(\"none\")\n    if (m - 1) % (aggr + calm) < aggr and (m - 1) % (aggr2 + calm2) < aggr2:\n        print(\"both\")\n    elif (m - 1) % (aggr + calm) < aggr or (m - 1) % (aggr2 + calm2) < aggr2:\n        print(\"one\")\n    else:\n        print(\"none\")\n    if (g - 1) % (aggr + calm) < aggr and (g - 1) % (aggr2 + calm2) < aggr2:\n        print(\"both\")\n    elif (g - 1) % (aggr + calm) < aggr or (g - 1) % (aggr2 + calm2) < aggr2:\n        print(\"one\")\n    else:\n        print(\"none\")\n\n\nmain()\n"
    }
  ],
  "created": 1649835375,
  "object": "edit"
}
2022-04-13 07:36:18.529686 fix syntax errors 3 ['\n\nimport sys\n\ndef main():\n    aggr, calm, aggr2, calm2 = [int(n) for n in sys.stdin.readline().split()] \n    p, m, g = [int(n) for n in sys.stdin.readline().split()]\n    if (p - 1) % (aggr + calm) < aggr and (p - 1) % (aggr2 + calm2) < aggr2: \n        print("both")\n    elif (p - 1) % (aggr + calm) < aggr or (p - 1) % (aggr2 + calm2) < aggr2:\n        print("one")\n    else:\n        print("none")\n    if (m - 1) % (aggr + calm) < aggr and (m - 1) % (aggr2 + calm2) < aggr2:\n        print("both")\n    elif (m - 1) % (aggr + calm) < aggr or (m - 1) % (aggr2 + calm2) < aggr2:\n        print("one")\n    else:\n        print("none")\n    if (g - 1) % (aggr + calm) < aggr and (g - 1) % (aggr2 + calm2) < aggr2:\n        print("both")\n    elif (g - 1) % (aggr + calm) < aggr or (g - 1) % (aggr2 + calm2) < aggr2:\n        print("one")\n    else:\n        print("none")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    aggr, calm, aggr2, calm2 = [int(n) for n in sys.stdin.readline().split()]\n    p, m, g = [int(n) for n in sys.stdin.readline().split()]\n    if (p - 1) % (aggr + calm) < aggr and (p - 1) % (aggr2 + calm2) < aggr2:\n        print("both")\n    elif (p - 1) % (aggr + calm) < aggr or (p - 1) % (aggr2 + calm2) < aggr2:\n        print("one")\n    else:\n        print("none")\n    if (m - 1) % (aggr + calm) < aggr and (m - 1) % (aggr2 + calm2) < aggr2:\n        print("both")\n    elif (m - 1) % (aggr + calm) < aggr or (m - 1) % (aggr2 + calm2) < aggr2:\n        print("one")\n    else:\n        print("none")\n    if (g - 1) % (aggr + calm) < aggr and (g - 1) % (aggr2 + calm2) < aggr2:\n        print("both")\n    elif (g - 1) % (aggr + calm) < aggr or (g - 1) % (aggr2 + calm2) < aggr2:\n        print("one")\n    else:\n        print("none")\n\nmain()\n', '\n\nimport sys\n\n\ndef main():\n    aggr, calm, aggr2, calm2 = [int(n) for n in sys.stdin.readline().split()]\n    p, m, g = [int(n) for n in sys.stdin.readline().split()]\n    if (p - 1) % (aggr + calm) < aggr and (p - 1) % (aggr2 + calm2) < aggr2:\n        print("both")\n    elif (p - 1) % (aggr + calm) < aggr or (p - 1) % (aggr2 + calm2) < aggr2:\n        print("one")\n    else:\n        print("none")\n    if (m - 1) % (aggr + calm) < aggr and (m - 1) % (aggr2 + calm2) < aggr2:\n        print("both")\n    elif (m - 1) % (aggr + calm) < aggr or (m - 1) % (aggr2 + calm2) < aggr2:\n        print("one")\n    else:\n        print("none")\n    if (g - 1) % (aggr + calm) < aggr and (g - 1) % (aggr2 + calm2) < aggr2:\n        print("both")\n    elif (g - 1) % (aggr + calm) < aggr or (g - 1) % (aggr2 + calm2) < aggr2:\n        print("one")\n    else:\n        print("none")\n\n\nmain()\n']
2022-04-13 07:36:23.172245 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    for i in range(n):\n        k, l, s = [int(n) for n in sys.stdin.readline().split()]\n        keyboard = sys.stdin.readline().strip()\n        target = sys.stdin.readline().strip()\n        if l > s:\n            print(\"Case #%d: %s\" % (i + 1, 0.0))\n        else:\n            max_ = 0\n            for i in range(s - l + 1):\n                if target in keyboard[i:i + l]:\n                    max_ += 1\n            print(\"Case #%d: %s\" % (i + 1, max_))\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    for i in range(n):\n        k, l, s = [int(n) for n in sys.stdin.readline().split()]\n        keyboard = sys.stdin.readline()\n        target = sys.stdin.readline()\n        if l > s:\n            print(\"Case #%d: %s\" % (i + 1, 0.0))\n        else:\n            max = 0\n            for i in range(s - l + 1):\n                if target in keyboard[i:i + l]:\n                    max += 1\n            print(\"Case #%d: %s\" % (i + 1, max))\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    for i in range(n):\n        k, l, s = [int(n) for n in sys.stdin.readline().split()]\n        keyboard = sys.stdin.readline()\n        target = sys.stdin.readline()\n        if l > s:\n            print(\"Case #%d: %s\" % (i + 1, 0.0))\n        else:\n            max = 0\n            for i in range(s - l + 1):\n                if target in keyboard[i:i + l - 1]:\n                    max += 1\n            print(\"Case #%d: %s\" % (i + 1, max))\n\nmain()\n"
    }
  ],
  "created": 1649835378,
  "object": "edit"
}
2022-04-13 07:36:23.172426 fix syntax errors 3 ['\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    for i in range(n):\n        k, l, s = [int(n) for n in sys.stdin.readline().split()]\n        keyboard = sys.stdin.readline().strip()\n        target = sys.stdin.readline().strip()\n        if l > s:\n            print("Case #%d: %s" % (i + 1, 0.0))\n        else:\n            max_ = 0\n            for i in range(s - l + 1):\n                if target in keyboard[i:i + l]:\n                    max_ += 1\n            print("Case #%d: %s" % (i + 1, max_))\n\nmain()\n', '\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    for i in range(n):\n        k, l, s = [int(n) for n in sys.stdin.readline().split()]\n        keyboard = sys.stdin.readline()\n        target = sys.stdin.readline()\n        if l > s:\n            print("Case #%d: %s" % (i + 1, 0.0))\n        else:\n            max = 0\n            for i in range(s - l + 1):\n                if target in keyboard[i:i + l]:\n                    max += 1\n            print("Case #%d: %s" % (i + 1, max))\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    for i in range(n):\n        k, l, s = [int(n) for n in sys.stdin.readline().split()]\n        keyboard = sys.stdin.readline()\n        target = sys.stdin.readline()\n        if l > s:\n            print("Case #%d: %s" % (i + 1, 0.0))\n        else:\n            max = 0\n            for i in range(s - l + 1):\n                if target in keyboard[i:i + l - 1]:\n                    max += 1\n            print("Case #%d: %s" % (i + 1, max))\n\nmain()\n']
2022-04-13 07:36:32.549430 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nprint(\"Hello World\")\nprint(\"Hello World\")\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    agg, calm, agg2, calm2 = [int(n) for n in sys.stdin.readline().split()]\n    p, m, g = [int(n) for n in sys.stdin.readline().split()]\n    if (p - 1) % (agg + calm) < agg and (p - 1) % (agg2 + calm2) < agg2\n        print(\"both\")\n    elif (p - 1) % (agg + calm) < agg or (p - 1) % (agg2 + calm2) < agg2\n        print(\"one\")\n    else:\n        print(\"none\")\n    if (m - 1) % (agg + calm) < agg and (m - 1) % (agg2 + calm2) < agg2\n        print(\"both\")\n    elif (m - 1) % (agg + calm) < agg or (m - 1) % (agg2 + calm2) < agg2\n        print(\"one\")\n    else:\n        print(\"none\")\n    if (g - 1) % (agg + calm) < agg and (g - 1) % (agg2 + calm2) < agg2\n        print(\"both\")\n    elif (g - 1) % (agg + calm) < agg or (g - 1) % (agg2 + calm2) < agg2\n        print(\"one\")\n    else:\n        print(\"none\")\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    agg, calm, agg2, calm2 = [int(n) for n in sys.stdin.readline().split()]\n    p, m, g = [int(n) for n in sys.stdin.readline().split()]\n    if (p - 1) % (agg + calm) < agg and (p - 1) % (agg2 + calm2) < agg2:\n        print(\"both\")\n    elif (p - 1) % (agg + calm) < agg or (p - 1) % (agg2 + calm2) < agg2:\n        print(\"one\")\n    else:\n        print(\"none\")\n    if (m - 1) % (agg + calm) < agg and (m - 1) % (agg2 + calm2) < agg2:\n        print(\"both\")\n    elif (m - 1) % (agg + calm) < agg or (m - 1) % (agg2 + calm2) < agg2:\n        print(\"one\")\n    else:\n        print(\"none\")\n    if (g - 1) % (agg + calm) < agg and (g - 1) % (agg2 + calm2) < agg2:\n        print(\"both\")\n    elif (g - 1) % (agg + calm) < agg or (g - 1) % (agg2 + calm2) < agg2:\n        print(\"one\")\n    else:\n        print(\"none\")\n\nmain()\n"
    }
  ],
  "created": 1649835383,
  "object": "edit"
}
2022-04-13 07:36:32.549672 fix syntax errors 3 ['\nprint("Hello World")\nprint("Hello World")\n', '\n\nimport sys\n\ndef main():\n    agg, calm, agg2, calm2 = [int(n) for n in sys.stdin.readline().split()]\n    p, m, g = [int(n) for n in sys.stdin.readline().split()]\n    if (p - 1) % (agg + calm) < agg and (p - 1) % (agg2 + calm2) < agg2\n        print("both")\n    elif (p - 1) % (agg + calm) < agg or (p - 1) % (agg2 + calm2) < agg2\n        print("one")\n    else:\n        print("none")\n    if (m - 1) % (agg + calm) < agg and (m - 1) % (agg2 + calm2) < agg2\n        print("both")\n    elif (m - 1) % (agg + calm) < agg or (m - 1) % (agg2 + calm2) < agg2\n        print("one")\n    else:\n        print("none")\n    if (g - 1) % (agg + calm) < agg and (g - 1) % (agg2 + calm2) < agg2\n        print("both")\n    elif (g - 1) % (agg + calm) < agg or (g - 1) % (agg2 + calm2) < agg2\n        print("one")\n    else:\n        print("none")\n\nmain()\n', '\nimport sys\n\ndef main():\n    agg, calm, agg2, calm2 = [int(n) for n in sys.stdin.readline().split()]\n    p, m, g = [int(n) for n in sys.stdin.readline().split()]\n    if (p - 1) % (agg + calm) < agg and (p - 1) % (agg2 + calm2) < agg2:\n        print("both")\n    elif (p - 1) % (agg + calm) < agg or (p - 1) % (agg2 + calm2) < agg2:\n        print("one")\n    else:\n        print("none")\n    if (m - 1) % (agg + calm) < agg and (m - 1) % (agg2 + calm2) < agg2:\n        print("both")\n    elif (m - 1) % (agg + calm) < agg or (m - 1) % (agg2 + calm2) < agg2:\n        print("one")\n    else:\n        print("none")\n    if (g - 1) % (agg + calm) < agg and (g - 1) % (agg2 + calm2) < agg2:\n        print("both")\n    elif (g - 1) % (agg + calm) < agg or (g - 1) % (agg2 + calm2) < agg2:\n        print("one")\n    else:\n        print("none")\n\nmain()\n']
2022-04-13 07:36:32.549709 size on output set 9
2022-04-13 07:36:32.549721 num operations 2
2022-04-13 07:36:32.549726 size on input set 1
2022-04-13 07:36:39.466944 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport math\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    if A + B > C + D:\n        A, B, C, D = C, D, A, B\n    a = P % (A + B)\n    b = M % (A + B)\n    c = G % (A + B)\n    if a <= A or b <= A or c <= A:\n        print('both', end = ' ')\n    if a > A or b > A or c > A:\n        print('one', end = ' ')\n    \nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nimport math\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    if A + C > B + D:\n        A, B, C, D = B, A, D, C\n    a = P % (A + B)\n    b = M % (A + B)\n    c = G % (A + B)\n    if a <= A:\n        print('both')\n    elif a > A:\n        print('one')\n    if b <= A:\n        print('both')\n    elif b > A:\n        print('one')\n    if c <= A:\n        print('both')\n    elif c > A:\n        print('one')\n    \nmain()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    N, M, K = map(int, sys.stdin.readline().split())\n    if N + M >= K and N <= K and M <= K:\n        print('Yes')\n    else:\n        print('No')\n\nmain()\n"
    }
  ],
  "created": 1649835392,
  "object": "edit"
}
2022-04-13 07:36:39.467144 fix spelling mistakes 3 ["\nimport sys\nimport math\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    if A + B > C + D:\n        A, B, C, D = C, D, A, B\n    a = P % (A + B)\n    b = M % (A + B)\n    c = G % (A + B)\n    if a <= A or b <= A or c <= A:\n        print('both', end = ' ')\n    if a > A or b > A or c > A:\n        print('one', end = ' ')\n    \nmain()\n", "\nimport sys\nimport math\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    if A + C > B + D:\n        A, B, C, D = B, A, D, C\n    a = P % (A + B)\n    b = M % (A + B)\n    c = G % (A + B)\n    if a <= A:\n        print('both')\n    elif a > A:\n        print('one')\n    if b <= A:\n        print('both')\n    elif b > A:\n        print('one')\n    if c <= A:\n        print('both')\n    elif c > A:\n        print('one')\n    \nmain()\n", "import sys\n\ndef main():\n    N, M, K = map(int, sys.stdin.readline().split())\n    if N + M >= K and N <= K and M <= K:\n        print('Yes')\n    else:\n        print('No')\n\nmain()\n"]
2022-04-13 07:36:39.467175 size on output set 3
2022-04-13 07:36:39.467182 size on input set 3
2022-04-13 07:36:44.267805 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport math\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    if A + C < B + D:\n        A, B, C, D = B, A, C, D\n    a = P % (A + B)\n    b = M % (A + B)\n    c = G % (A + B)\n    if a <= A:\n        print('both')\n    else:\n        print('one')\n    if b <= A:\n        print('both')\n    else:\n        print('one')\n    if c <= A:\n        print('both')\n    else:\n        print('one')\n    \nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nimport math\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    if A + C > B + D:\n        A, B, C, D = B, A, D, C\n    a = P % (A + B)\n    b = M % (A + B)\n    c = G % (A + B)\n    if a <= A and b <= A and c <= A:\n        print('both')\n    elif a > A and b > A and c > A:\n        print('one')\n    else:\n        print('none')\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    A, B, C, D = B, A, D, C\n    if A + C > B + D:\n        A, B, C, D = C, D, A, B\n    a = P % (A + B)\n    b = M % (A + B)\n    c = G % (A + B)\n    if a <= A:\n        print('both')\n    else:\n        print('one')\n    if b <= A:\n        print('both')\n    else:\n        print('one')\n    if c <= A:\n        print('both')\n    else:\n        print('one')\n\nmain()\n"
    }
  ],
  "created": 1649835399,
  "object": "edit"
}
2022-04-13 07:36:44.267969 fix syntax errors 3 ["\nimport sys\nimport math\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    if A + C < B + D:\n        A, B, C, D = B, A, C, D\n    a = P % (A + B)\n    b = M % (A + B)\n    c = G % (A + B)\n    if a <= A:\n        print('both')\n    else:\n        print('one')\n    if b <= A:\n        print('both')\n    else:\n        print('one')\n    if c <= A:\n        print('both')\n    else:\n        print('one')\n    \nmain()\n", "\nimport sys\nimport math\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    if A + C > B + D:\n        A, B, C, D = B, A, D, C\n    a = P % (A + B)\n    b = M % (A + B)\n    c = G % (A + B)\n    if a <= A and b <= A and c <= A:\n        print('both')\n    elif a > A and b > A and c > A:\n        print('one')\n    else:\n        print('none')\n\nmain()\n", "import sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    A, B, C, D = B, A, D, C\n    if A + C > B + D:\n        A, B, C, D = C, D, A, B\n    a = P % (A + B)\n    b = M % (A + B)\n    c = G % (A + B)\n    if a <= A:\n        print('both')\n    else:\n        print('one')\n    if b <= A:\n        print('both')\n    else:\n        print('one')\n    if c <= A:\n        print('both')\n    else:\n        print('one')\n\nmain()\n"]
2022-04-13 07:36:46.319290 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef main():\n    N, M, K = map(int, sys.stdin.readline().split())\n    if N + M >= K and N <= K and M <= K and N + M - K >= 0:\n        print('Yes')\n    else:\n        print('No')\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    N, M, K = map(int, sys.stdin.readline().split())\n    if N + M == K or N == K or M == K:\n        print('Yes')\n    else:\n        print('No')\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\n\ndef main():\n    N, M, K = map(int, sys.stdin.readline().split())\n    if N + M >= K and N <= K and M <= K:\n        print('Yes')\n    else:\n        print('No')\n\n\nmain()\n"
    }
  ],
  "created": 1649835404,
  "object": "edit"
}
2022-04-13 07:36:46.319539 fix syntax errors 3 ["import sys\n\ndef main():\n    N, M, K = map(int, sys.stdin.readline().split())\n    if N + M >= K and N <= K and M <= K and N + M - K >= 0:\n        print('Yes')\n    else:\n        print('No')\n\nmain()\n", "import sys\n\ndef main():\n    N, M, K = map(int, sys.stdin.readline().split())\n    if N + M == K or N == K or M == K:\n        print('Yes')\n    else:\n        print('No')\n\nmain()\n", "import sys\n\n\ndef main():\n    N, M, K = map(int, sys.stdin.readline().split())\n    if N + M >= K and N <= K and M <= K:\n        print('Yes')\n    else:\n        print('No')\n\n\nmain()\n"]
2022-04-13 07:36:50.063665 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport math\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    if A + B > C + D:\n        A, B, C, D = C, D, A, B\n    a = P % (A + B)\n    b = M % (A + B)\n    c = G % (A + B)\n    if a <= A or b <= A or c <= A:\n        print('both', end = ' ')\n    elif a > A or b > A or c > A:\n        print('one', end = ' ')\n    else:\n        print('none', end = ' ')\n    if a <= C or b <= C or c <= C:\n        print('both', end = ' ')\n    elif a > C or b > C or c > C:\n        print('one', end = ' ')\n    else:\n        print('none', end = ' ')\n    \nmain()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    if A + B > C + D:\n        A, B, C, D = C, D, A, B\n    a = P % (A + B)\n    b = M % (A + B)\n    c = G % (A + B)\n    if a <= A or b <= A or c <= A:\n        print('both', end = ' ')\n    if a > A or b > A or c > A:\n        print('one', end = ' ')\n    \nmain()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\nimport math\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    if A + B > C + D:\n        A, B, C, D = C, D, A, B\n    a = P % (A + B)\n    b = M % (A + B)\n    c = G % (A + B)\n    if a <= A or b <= A or c <= A:\n        print('both', end = ' ')\n    if a > A and b > A and c > A:\n        print('one', end = ' ')\n    \nmain()\n"
    }
  ],
  "created": 1649835406,
  "object": "edit"
}
2022-04-13 07:36:50.063832 fix syntax errors 3 ["\nimport sys\nimport math\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    if A + B > C + D:\n        A, B, C, D = C, D, A, B\n    a = P % (A + B)\n    b = M % (A + B)\n    c = G % (A + B)\n    if a <= A or b <= A or c <= A:\n        print('both', end = ' ')\n    elif a > A or b > A or c > A:\n        print('one', end = ' ')\n    else:\n        print('none', end = ' ')\n    if a <= C or b <= C or c <= C:\n        print('both', end = ' ')\n    elif a > C or b > C or c > C:\n        print('one', end = ' ')\n    else:\n        print('none', end = ' ')\n    \nmain()\n", "import sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    if A + B > C + D:\n        A, B, C, D = C, D, A, B\n    a = P % (A + B)\n    b = M % (A + B)\n    c = G % (A + B)\n    if a <= A or b <= A or c <= A:\n        print('both', end = ' ')\n    if a > A or b > A or c > A:\n        print('one', end = ' ')\n    \nmain()\n", "\nimport sys\nimport math\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    if A + B > C + D:\n        A, B, C, D = C, D, A, B\n    a = P % (A + B)\n    b = M % (A + B)\n    c = G % (A + B)\n    if a <= A or b <= A or c <= A:\n        print('both', end = ' ')\n    if a > A and b > A and c > A:\n        print('one', end = ' ')\n    \nmain()\n"]
2022-04-13 07:36:50.063883 size on output set 9
2022-04-13 07:36:50.063897 num operations 2
2022-04-13 07:36:50.063902 size on input set 1
2022-04-13 07:37:11.354375 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Read the input and output the expected result.\n    \"\"\"\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    #print(a, b, c, d, p, m, g)\n\n    # Aggressive dog A\n    aggressive_dog_A_start = 0\n    aggressive_dog_A_end = a\n    # Aggressive dog B\n    aggressive_dog_B_start = c\n    aggressive_dog_B_end = c + d\n    #print(aggressive_dog_A_start, aggressive_dog_A_end, aggressive_dog_B_start, aggressive_dog_B_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_A_start and p <= aggressive_dog_A_end) and (p >= aggressive_dog_B_start and p <= aggressive_dog_B_end):\n        print(\"both\")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_A_start and p <= aggressive_dog_A_end) or (p >= aggressive_dog_B_start and p <= aggressive_dog_B_end):\n        print(\"one\")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_A_start and m <= aggressive_dog_A_end) and (m >= aggressive_dog_B_start and m <= aggressive_dog_B_end):\n        print(\"both\")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_A_start and m <= aggressive_dog_A_end) or (m >= aggressive_dog_B_start and m <= aggressive_dog_B_end):\n        print(\"one\")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_A_start and g <= aggressive_dog_A_end) and (g >= aggressive_dog_B_start and g <= aggressive_dog_B_end):\n        print(\"both\")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_A_start and g <= aggressive_dog_A_end) or (g >= aggressive_dog_B_start and g <= aggressive_dog_B_end):\n        print(\"one\")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Read the input and output the expected result.\n    \"\"\"\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    #print(a, b, c, d, p, m, g)\n\n    # Aggressive dog A\n    aggressive_dog_a_start = 0\n    aggressive_dog_a_end = a\n    # Aggressive dog B\n    aggressive_dog_b_start = c\n    aggressive_dog_b_end = c + d\n    #print(aggressive_dog_a_start, aggressive_dog_a_end, aggressive_dog_b_start, aggressive_dog_b_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_a_start and p <= aggressive_dog_a_end) and (p >= aggressive_dog_b_start and p <= aggressive_dog_b_end):\n        print(\"both\")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_a_start and p <= aggressive_dog_a_end) or (p >= aggressive_dog_b_start and p <= aggressive_dog_b_end):\n        print(\"one\")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_a_start and m <= aggressive_dog_a_end) and (m >= aggressive_dog_b_start and m <= aggressive_dog_b_end):\n        print(\"both\")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_a_start and m <= aggressive_dog_a_end) or (m >= aggressive_dog_b_start and m <= aggressive_dog_b_end):\n        print(\"one\")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_a_start and g <= aggressive_dog_a_end) and (g >= aggressive_dog_b_start and g <= aggressive_dog_b_end):\n        print(\"both\")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_a_start and g <= aggressive_dog_a_end) or (g >= aggressive_dog_b_start and g <= aggressive_dog_b_end):\n        print(\"one\")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    \"\"\"\n    Read the input and output the expected result.\n    \"\"\"\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    #print(a, b, c, d, p, m, g)\n\n    # Aggressive Dog 1\n    aggressive_dog_1_start = 0  # Aggressive Dog 1 start point\n    aggressive_dog_1_end = a  # Aggressive Dog 1 end point\n    # Aggressive Dog 2\n    aggressive_dog_2_start = c  # Aggressive Dog 2 start point\n    aggressive_dog_2_end = c + d  # Aggressive Dog 2 end point\n    # print(aggressive_dog_1_start, aggressive_dog_1_end, aggressive_dog_2_start, aggressive_dog_2_end)\n\n    # Check if the postman is attacked by both dogs.\n    if (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) and (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the postman is attacked by one dog.\n    elif (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) or (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the postman is attacked by none of the dogs.\n    else:\n        print(\"none\")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) and (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) or (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) and (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) or (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649835410,
  "object": "edit"
}
2022-04-13 07:37:11.354652 fix spelling mistakes 3 ['\n\ndef main():\n    """\n    Read the input and output the expected result.\n    """\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    #print(a, b, c, d, p, m, g)\n\n    # Aggressive dog A\n    aggressive_dog_A_start = 0\n    aggressive_dog_A_end = a\n    # Aggressive dog B\n    aggressive_dog_B_start = c\n    aggressive_dog_B_end = c + d\n    #print(aggressive_dog_A_start, aggressive_dog_A_end, aggressive_dog_B_start, aggressive_dog_B_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_A_start and p <= aggressive_dog_A_end) and (p >= aggressive_dog_B_start and p <= aggressive_dog_B_end):\n        print("both")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_A_start and p <= aggressive_dog_A_end) or (p >= aggressive_dog_B_start and p <= aggressive_dog_B_end):\n        print("one")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_A_start and m <= aggressive_dog_A_end) and (m >= aggressive_dog_B_start and m <= aggressive_dog_B_end):\n        print("both")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_A_start and m <= aggressive_dog_A_end) or (m >= aggressive_dog_B_start and m <= aggressive_dog_B_end):\n        print("one")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_A_start and g <= aggressive_dog_A_end) and (g >= aggressive_dog_B_start and g <= aggressive_dog_B_end):\n        print("both")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_A_start and g <= aggressive_dog_A_end) or (g >= aggressive_dog_B_start and g <= aggressive_dog_B_end):\n        print("one")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Read the input and output the expected result.\n    """\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    #print(a, b, c, d, p, m, g)\n\n    # Aggressive dog A\n    aggressive_dog_a_start = 0\n    aggressive_dog_a_end = a\n    # Aggressive dog B\n    aggressive_dog_b_start = c\n    aggressive_dog_b_end = c + d\n    #print(aggressive_dog_a_start, aggressive_dog_a_end, aggressive_dog_b_start, aggressive_dog_b_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_a_start and p <= aggressive_dog_a_end) and (p >= aggressive_dog_b_start and p <= aggressive_dog_b_end):\n        print("both")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_a_start and p <= aggressive_dog_a_end) or (p >= aggressive_dog_b_start and p <= aggressive_dog_b_end):\n        print("one")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_a_start and m <= aggressive_dog_a_end) and (m >= aggressive_dog_b_start and m <= aggressive_dog_b_end):\n        print("both")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_a_start and m <= aggressive_dog_a_end) or (m >= aggressive_dog_b_start and m <= aggressive_dog_b_end):\n        print("one")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_a_start and g <= aggressive_dog_a_end) and (g >= aggressive_dog_b_start and g <= aggressive_dog_b_end):\n        print("both")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_a_start and g <= aggressive_dog_a_end) or (g >= aggressive_dog_b_start and g <= aggressive_dog_b_end):\n        print("one")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Read the input and output the expected result.\n    """\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    #print(a, b, c, d, p, m, g)\n\n    # Aggressive Dog 1\n    aggressive_dog_1_start = 0  # Aggressive Dog 1 start point\n    aggressive_dog_1_end = a  # Aggressive Dog 1 end point\n    # Aggressive Dog 2\n    aggressive_dog_2_start = c  # Aggressive Dog 2 start point\n    aggressive_dog_2_end = c + d  # Aggressive Dog 2 end point\n    # print(aggressive_dog_1_start, aggressive_dog_1_end, aggressive_dog_2_start, aggressive_dog_2_end)\n\n    # Check if the postman is attacked by both dogs.\n    if (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) and (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print("both")\n    # Check if the postman is attacked by one dog.\n    elif (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) or (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print("one")\n    # Check if the postman is attacked by none of the dogs.\n    else:\n        print("none")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) and (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print("both")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) or (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print("one")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) and (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print("both")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) or (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print("one")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 07:37:11.354723 size on output set 3
2022-04-13 07:37:11.354730 size on input set 3
2022-04-13 07:37:26.299167 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Read the input and output the expected result.\n    \"\"\"\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    #print(a, b, c, d, p, m, g)\n\n    # Aggressive dog A\n    aggressive_dog_a_start = 0\n    aggressive_dog_a_end = a\n    # Aggressive dog B\n    aggressive_dog_b_start = c\n    aggressive_dog_b_end = c + d\n    #print(aggressive_dog_a_start, aggressive_dog_a_end, aggressive_dog_b_start, aggressive_dog_b_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_a_start and p <= aggressive_dog_a_end) \\\n        and (p >= aggressive_dog_b_start and p <= aggressive_dog_b_end):\n        print(\"both\")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_a_start and p <= aggressive_dog_a_end) \\\n        or (p >= aggressive_dog_b_start and p <= aggressive_dog_b_end):\n        print(\"one\")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_a_start and m <= aggressive_dog_a_end) \\\n        and (m >= aggressive_dog_b_start and m <= aggressive_dog_b_end):\n        print(\"both\")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_a_start and m <= aggressive_dog_a_end) \\\n        or (m >= aggressive_dog_b_start and m <= aggressive_dog_b_end):\n        print(\"one\")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_a_start and g <= aggressive_dog_a_end) \\\n        and (g >= aggressive_dog_b_start and g <= aggressive_dog_b_end):\n        print(\"both\")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_a_start and g <= aggressive_dog_a_end) \\\n        or (g >= aggressive_dog_b_start and g <= aggressive_dog_b_end):\n        print(\"one\")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Read the input and output the expected result.\n    \"\"\"\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    # print(a, b, c, d, p, m, g)\n\n    # Aggressive dog A\n    aggressive_dog_a_start = 0\n    aggressive_dog_a_end = a\n    # Aggressive dog B\n    aggressive_dog_b_start = c\n    aggressive_dog_b_end = c + d\n    # print(aggressive_dog_a_start, aggressive_dog_a_end, aggressive_dog_b_start, aggressive_dog_b_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_a_start and p <= aggressive_dog_a_end) and (p >= aggressive_dog_b_start and p <= aggressive_dog_b_end):\n        print(\"both\")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_a_start and p <= aggressive_dog_a_end) or (p >= aggressive_dog_b_start and p <= aggressive_dog_b_end):\n        print(\"one\")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_a_start and m <= aggressive_dog_a_end) and (m >= aggressive_dog_b_start and m <= aggressive_dog_b_end):\n        print(\"both\")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_a_start and m <= aggressive_dog_a_end) or (m >= aggressive_dog_b_start and m <= aggressive_dog_b_end):\n        print(\"one\")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_a_start and g <= aggressive_dog_a_end) and (g >= aggressive_dog_b_start and g <= aggressive_dog_b_end):\n        print(\"both\")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_a_start and g <= aggressive_dog_a_end) or (g >= aggressive_dog_b_start and g <= aggressive_dog_b_end):\n        print(\"one\")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    \"\"\"\n    Read the input and output the expected result.\n    \"\"\"\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    #print(a, b, c, d, p, m, g)\n\n    # Aggressive dog A\n    aggressive_dog_a_start = 0\n    aggressive_dog_a_end = a\n    # Aggressive dog B\n    aggressive_dog_b_start = c\n    aggressive_dog_b_end = c + d\n    #print(aggressive_dog_a_start, aggressive_dog_a_end, aggressive_dog_b_start, aggressive_dog_b_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_a_start and p <= aggressive_dog_a_end) and (p >= aggressive_dog_b_start and p <= aggressive_dog_b_end): # noqa: E501\n        print(\"both\")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_a_start and p <= aggressive_dog_a_end) or (p >= aggressive_dog_b_start and p <= aggressive_dog_b_end): # noqa: E501\n        print(\"one\")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_a_start and m <= aggressive_dog_a_end) and (m >= aggressive_dog_b_start and m <= aggressive_dog_b_end): # noqa: E501\n        print(\"both\")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_a_start and m <= aggressive_dog_a_end) or (m >= aggressive_dog_b_start and m <= aggressive_dog_b_end): # noqa: E501\n        print(\"one\")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_a_start and g <= aggressive_dog_a_end) and (g >= aggressive_dog_b_start and g <= aggressive_dog_b_end): # noqa: E501\n        print(\"both\")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_a_start and g <= aggressive_dog_a_end) or (g >= aggressive_dog_b_start and g <= aggressive_dog_b_end): # noqa: E501\n        print(\"one\")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649835431,
  "object": "edit"
}
2022-04-13 07:37:26.299460 fix syntax errors 3 ['\n\ndef main():\n    """\n    Read the input and output the expected result.\n    """\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    #print(a, b, c, d, p, m, g)\n\n    # Aggressive dog A\n    aggressive_dog_a_start = 0\n    aggressive_dog_a_end = a\n    # Aggressive dog B\n    aggressive_dog_b_start = c\n    aggressive_dog_b_end = c + d\n    #print(aggressive_dog_a_start, aggressive_dog_a_end, aggressive_dog_b_start, aggressive_dog_b_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_a_start and p <= aggressive_dog_a_end) \\\n        and (p >= aggressive_dog_b_start and p <= aggressive_dog_b_end):\n        print("both")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_a_start and p <= aggressive_dog_a_end) \\\n        or (p >= aggressive_dog_b_start and p <= aggressive_dog_b_end):\n        print("one")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_a_start and m <= aggressive_dog_a_end) \\\n        and (m >= aggressive_dog_b_start and m <= aggressive_dog_b_end):\n        print("both")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_a_start and m <= aggressive_dog_a_end) \\\n        or (m >= aggressive_dog_b_start and m <= aggressive_dog_b_end):\n        print("one")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_a_start and g <= aggressive_dog_a_end) \\\n        and (g >= aggressive_dog_b_start and g <= aggressive_dog_b_end):\n        print("both")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_a_start and g <= aggressive_dog_a_end) \\\n        or (g >= aggressive_dog_b_start and g <= aggressive_dog_b_end):\n        print("one")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Read the input and output the expected result.\n    """\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    # print(a, b, c, d, p, m, g)\n\n    # Aggressive dog A\n    aggressive_dog_a_start = 0\n    aggressive_dog_a_end = a\n    # Aggressive dog B\n    aggressive_dog_b_start = c\n    aggressive_dog_b_end = c + d\n    # print(aggressive_dog_a_start, aggressive_dog_a_end, aggressive_dog_b_start, aggressive_dog_b_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_a_start and p <= aggressive_dog_a_end) and (p >= aggressive_dog_b_start and p <= aggressive_dog_b_end):\n        print("both")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_a_start and p <= aggressive_dog_a_end) or (p >= aggressive_dog_b_start and p <= aggressive_dog_b_end):\n        print("one")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_a_start and m <= aggressive_dog_a_end) and (m >= aggressive_dog_b_start and m <= aggressive_dog_b_end):\n        print("both")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_a_start and m <= aggressive_dog_a_end) or (m >= aggressive_dog_b_start and m <= aggressive_dog_b_end):\n        print("one")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_a_start and g <= aggressive_dog_a_end) and (g >= aggressive_dog_b_start and g <= aggressive_dog_b_end):\n        print("both")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_a_start and g <= aggressive_dog_a_end) or (g >= aggressive_dog_b_start and g <= aggressive_dog_b_end):\n        print("one")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print("none")\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Read the input and output the expected result.\n    """\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    #print(a, b, c, d, p, m, g)\n\n    # Aggressive dog A\n    aggressive_dog_a_start = 0\n    aggressive_dog_a_end = a\n    # Aggressive dog B\n    aggressive_dog_b_start = c\n    aggressive_dog_b_end = c + d\n    #print(aggressive_dog_a_start, aggressive_dog_a_end, aggressive_dog_b_start, aggressive_dog_b_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_a_start and p <= aggressive_dog_a_end) and (p >= aggressive_dog_b_start and p <= aggressive_dog_b_end): # noqa: E501\n        print("both")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_a_start and p <= aggressive_dog_a_end) or (p >= aggressive_dog_b_start and p <= aggressive_dog_b_end): # noqa: E501\n        print("one")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_a_start and m <= aggressive_dog_a_end) and (m >= aggressive_dog_b_start and m <= aggressive_dog_b_end): # noqa: E501\n        print("both")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_a_start and m <= aggressive_dog_a_end) or (m >= aggressive_dog_b_start and m <= aggressive_dog_b_end): # noqa: E501\n        print("one")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_a_start and g <= aggressive_dog_a_end) and (g >= aggressive_dog_b_start and g <= aggressive_dog_b_end): # noqa: E501\n        print("both")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_a_start and g <= aggressive_dog_a_end) or (g >= aggressive_dog_b_start and g <= aggressive_dog_b_end): # noqa: E501\n        print("one")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 07:37:40.328054 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Read the input and output the expected result.\n    \"\"\"\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    # print(a, b, c, d, p, m, g)\n\n    # Aggressive dog A\n    aggressive_dog_A_start = 0\n    aggressive_dog_A_end = a\n    # Aggressive dog B\n    aggressive_dog_B_start = c\n    aggressive_dog_B_end = c + d\n    # print(aggressive_dog_A_start, aggressive_dog_A_end, aggressive_dog_B_start, aggressive_dog_B_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_A_start and p <= aggressive_dog_A_end) and (p >= aggressive_dog_B_start and p <= aggressive_dog_B_end):\n        print(\"both\")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_A_start and p <= aggressive_dog_A_end) or (p >= aggressive_dog_B_start and p <= aggressive_dog_B_end):\n        print(\"one\")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_A_start and m <= aggressive_dog_A_end) and (m >= aggressive_dog_B_start and m <= aggressive_dog_B_end):\n        print(\"both\")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_A_start and m <= aggressive_dog_A_end) or (m >= aggressive_dog_B_start and m <= aggressive_dog_B_end):\n        print(\"one\")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_A_start and g <= aggressive_dog_A_end) and (g >= aggressive_dog_B_start and g <= aggressive_dog_B_end):\n        print(\"both\")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_A_start and g <= aggressive_dog_A_end) or (g >= aggressive_dog_B_start and g <= aggressive_dog_B_end):\n        print(\"one\")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Read the input and output the expected result.\n    \"\"\"\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    #print(a, b, c, d, p, m, g)\n\n    # Aggressive dog A\n    aggressive_dog_A_start = 0\n    aggressive_dog_A_end = a\n    # Aggressive dog B\n    aggressive_dog_B_start = c\n    aggressive_dog_B_end = c + d\n    #print(aggressive_dog_A_start, aggressive_dog_A_end, aggressive_dog_B_start, aggressive_dog_B_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_A_start and p <= aggressive_dog_A_end) and (\n            p >= aggressive_dog_B_start and p <= aggressive_dog_B_end):\n        print(\"both\")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_A_start and p <= aggressive_dog_A_end) or (\n            p >= aggressive_dog_B_start and p <= aggressive_dog_B_end):\n        print(\"one\")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_A_start and m <= aggressive_dog_A_end) and (\n            m >= aggressive_dog_B_start and m <= aggressive_dog_B_end):\n        print(\"both\")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_A_start and m <= aggressive_dog_A_end) or (\n            m >= aggressive_dog_B_start and m <= aggressive_dog_B_end):\n        print(\"one\")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_A_start and g <= aggressive_dog_A_end) and (\n            g >= aggressive_dog_B_start and g <= aggressive_dog_B_end):\n        print(\"both\")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_A_start and g <= aggressive_dog_A_end) or (\n            g >= aggressive_dog_B_start and g <= aggressive_dog_B_end):\n        print(\"one\")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    \"\"\"\n    Read the input and output the expected result.\n    \"\"\"\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    #print(a, b, c, d, p, m, g)\n\n    # Aggressive dog A\n    aggressive_dog_A_start = 0\n    aggressive_dog_A_end = a\n    # Aggressive dog B\n    aggressive_dog_B_start = c\n    aggressive_dog_B_end = c + d\n    #print(aggressive_dog_A_start, aggressive_dog_A_end, aggressive_dog_B_start, aggressive_dog_B_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_A_start and p <= aggressive_dog_A_end) and (p >= aggressive_dog_B_start and p <= aggressive_dog_B_end): # noqa\n        print(\"both\")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_A_start and p <= aggressive_dog_A_end) or (p >= aggressive_dog_B_start and p <= aggressive_dog_B_end): # noqa\n        print(\"one\")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_A_start and m <= aggressive_dog_A_end) and (m >= aggressive_dog_B_start and m <= aggressive_dog_B_end): # noqa\n        print(\"both\")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_A_start and m <= aggressive_dog_A_end) or (m >= aggressive_dog_B_start and m <= aggressive_dog_B_end): # noqa\n        print(\"one\")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_A_start and g <= aggressive_dog_A_end) and (g >= aggressive_dog_B_start and g <= aggressive_dog_B_end): # noqa\n        print(\"both\")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_A_start and g <= aggressive_dog_A_end) or (g >= aggressive_dog_B_start and g <= aggressive_dog_B_end): # noqa\n        print(\"one\")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649835446,
  "object": "edit"
}
2022-04-13 07:37:40.328360 fix syntax errors 3 ['\n\ndef main():\n    """\n    Read the input and output the expected result.\n    """\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    # print(a, b, c, d, p, m, g)\n\n    # Aggressive dog A\n    aggressive_dog_A_start = 0\n    aggressive_dog_A_end = a\n    # Aggressive dog B\n    aggressive_dog_B_start = c\n    aggressive_dog_B_end = c + d\n    # print(aggressive_dog_A_start, aggressive_dog_A_end, aggressive_dog_B_start, aggressive_dog_B_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_A_start and p <= aggressive_dog_A_end) and (p >= aggressive_dog_B_start and p <= aggressive_dog_B_end):\n        print("both")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_A_start and p <= aggressive_dog_A_end) or (p >= aggressive_dog_B_start and p <= aggressive_dog_B_end):\n        print("one")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_A_start and m <= aggressive_dog_A_end) and (m >= aggressive_dog_B_start and m <= aggressive_dog_B_end):\n        print("both")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_A_start and m <= aggressive_dog_A_end) or (m >= aggressive_dog_B_start and m <= aggressive_dog_B_end):\n        print("one")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_A_start and g <= aggressive_dog_A_end) and (g >= aggressive_dog_B_start and g <= aggressive_dog_B_end):\n        print("both")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_A_start and g <= aggressive_dog_A_end) or (g >= aggressive_dog_B_start and g <= aggressive_dog_B_end):\n        print("one")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print("none")\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Read the input and output the expected result.\n    """\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    #print(a, b, c, d, p, m, g)\n\n    # Aggressive dog A\n    aggressive_dog_A_start = 0\n    aggressive_dog_A_end = a\n    # Aggressive dog B\n    aggressive_dog_B_start = c\n    aggressive_dog_B_end = c + d\n    #print(aggressive_dog_A_start, aggressive_dog_A_end, aggressive_dog_B_start, aggressive_dog_B_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_A_start and p <= aggressive_dog_A_end) and (\n            p >= aggressive_dog_B_start and p <= aggressive_dog_B_end):\n        print("both")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_A_start and p <= aggressive_dog_A_end) or (\n            p >= aggressive_dog_B_start and p <= aggressive_dog_B_end):\n        print("one")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_A_start and m <= aggressive_dog_A_end) and (\n            m >= aggressive_dog_B_start and m <= aggressive_dog_B_end):\n        print("both")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_A_start and m <= aggressive_dog_A_end) or (\n            m >= aggressive_dog_B_start and m <= aggressive_dog_B_end):\n        print("one")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_A_start and g <= aggressive_dog_A_end) and (\n            g >= aggressive_dog_B_start and g <= aggressive_dog_B_end):\n        print("both")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_A_start and g <= aggressive_dog_A_end) or (\n            g >= aggressive_dog_B_start and g <= aggressive_dog_B_end):\n        print("one")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Read the input and output the expected result.\n    """\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    #print(a, b, c, d, p, m, g)\n\n    # Aggressive dog A\n    aggressive_dog_A_start = 0\n    aggressive_dog_A_end = a\n    # Aggressive dog B\n    aggressive_dog_B_start = c\n    aggressive_dog_B_end = c + d\n    #print(aggressive_dog_A_start, aggressive_dog_A_end, aggressive_dog_B_start, aggressive_dog_B_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_A_start and p <= aggressive_dog_A_end) and (p >= aggressive_dog_B_start and p <= aggressive_dog_B_end): # noqa\n        print("both")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_A_start and p <= aggressive_dog_A_end) or (p >= aggressive_dog_B_start and p <= aggressive_dog_B_end): # noqa\n        print("one")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_A_start and m <= aggressive_dog_A_end) and (m >= aggressive_dog_B_start and m <= aggressive_dog_B_end): # noqa\n        print("both")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_A_start and m <= aggressive_dog_A_end) or (m >= aggressive_dog_B_start and m <= aggressive_dog_B_end): # noqa\n        print("one")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_A_start and g <= aggressive_dog_A_end) and (g >= aggressive_dog_B_start and g <= aggressive_dog_B_end): # noqa\n        print("both")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_A_start and g <= aggressive_dog_A_end) or (g >= aggressive_dog_B_start and g <= aggressive_dog_B_end): # noqa\n        print("one")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 07:37:52.800549 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Read the input and output the expected result.\n    \"\"\"\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    # print(a, b, c, d, p, m, g)\n\n    # Aggressive Dog 1\n    aggressive_dog_1_start = 0  # Aggressive Dog 1 start point\n    aggressive_dog_1_end = a  # Aggressive Dog 1 end point\n    # Aggressive Dog 2\n    aggressive_dog_2_start = c  # Aggressive Dog 2 start point\n    aggressive_dog_2_end = c + d  # Aggressive Dog 2 end point\n    # print(aggressive_dog_1_start, aggressive_dog_1_end, aggressive_dog_2_start, aggressive_dog_2_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) and (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) or (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) and (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) or (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) and (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) or (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Read the input and output the expected result.\n    \"\"\"\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    # print(a, b, c, d, p, m, g)\n\n    # Aggressive Dog 1\n    aggressive_dog_1_start = 0  # Aggressive Dog 1 start point\n    aggressive_dog_1_end = a  # Aggressive Dog 1 end point\n    # Aggressive Dog 2\n    aggressive_dog_2_start = c  # Aggressive Dog 2 start point\n    aggressive_dog_2_end = c + d  # Aggressive Dog 2 end point\n    # print(aggressive_dog_1_start, aggressive_dog_1_end, aggressive_dog_2_start, aggressive_dog_2_end)\n\n    # Check if the postman is attacked by both dogs.\n    if (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) and (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the postman is attacked by one dog.\n    elif (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) or (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the postman is attacked by none of the dogs.\n    else:\n        print(\"none\")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) and (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) or (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) and (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) or (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    \"\"\"\n    Read the input and output the expected result.\n    \"\"\"\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    #print(a, b, c, d, p, m, g)\n\n    # Aggressive Dog 1\n    aggressive_dog_1_start = 0  # Aggressive Dog 1 start point\n    aggressive_dog_1_end = a  # Aggressive Dog 1 end point\n    # Aggressive Dog 2\n    aggressive_dog_2_start = c  # Aggressive Dog 2 start point\n    aggressive_dog_2_end = c + d  # Aggressive Dog 2 end point\n    # print(aggressive_dog_1_start, aggressive_dog_1_end, aggressive_dog_2_start, aggressive_dog_2_end)\n\n    # Check if the postman is attacked by both dogs.\n    if (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) and \\\n            (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the postman is attacked by one dog.\n    elif (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) or \\\n            (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the postman is attacked by none of the dogs.\n    else:\n        print(\"none\")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) and \\\n            (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) or \\\n            (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) and \\\n            (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) or \\\n            (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649835460,
  "object": "edit"
}
2022-04-13 07:37:52.800831 fix syntax errors 3 ['\n\ndef main():\n    """\n    Read the input and output the expected result.\n    """\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    # print(a, b, c, d, p, m, g)\n\n    # Aggressive Dog 1\n    aggressive_dog_1_start = 0  # Aggressive Dog 1 start point\n    aggressive_dog_1_end = a  # Aggressive Dog 1 end point\n    # Aggressive Dog 2\n    aggressive_dog_2_start = c  # Aggressive Dog 2 start point\n    aggressive_dog_2_end = c + d  # Aggressive Dog 2 end point\n    # print(aggressive_dog_1_start, aggressive_dog_1_end, aggressive_dog_2_start, aggressive_dog_2_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) and (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print("both")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) or (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print("one")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) and (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print("both")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) or (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print("one")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) and (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print("both")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) or (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print("one")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Read the input and output the expected result.\n    """\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    # print(a, b, c, d, p, m, g)\n\n    # Aggressive Dog 1\n    aggressive_dog_1_start = 0  # Aggressive Dog 1 start point\n    aggressive_dog_1_end = a  # Aggressive Dog 1 end point\n    # Aggressive Dog 2\n    aggressive_dog_2_start = c  # Aggressive Dog 2 start point\n    aggressive_dog_2_end = c + d  # Aggressive Dog 2 end point\n    # print(aggressive_dog_1_start, aggressive_dog_1_end, aggressive_dog_2_start, aggressive_dog_2_end)\n\n    # Check if the postman is attacked by both dogs.\n    if (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) and (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print("both")\n    # Check if the postman is attacked by one dog.\n    elif (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) or (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print("one")\n    # Check if the postman is attacked by none of the dogs.\n    else:\n        print("none")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) and (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print("both")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) or (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print("one")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) and (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print("both")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) or (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print("one")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print("none")\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Read the input and output the expected result.\n    """\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    #print(a, b, c, d, p, m, g)\n\n    # Aggressive Dog 1\n    aggressive_dog_1_start = 0  # Aggressive Dog 1 start point\n    aggressive_dog_1_end = a  # Aggressive Dog 1 end point\n    # Aggressive Dog 2\n    aggressive_dog_2_start = c  # Aggressive Dog 2 start point\n    aggressive_dog_2_end = c + d  # Aggressive Dog 2 end point\n    # print(aggressive_dog_1_start, aggressive_dog_1_end, aggressive_dog_2_start, aggressive_dog_2_end)\n\n    # Check if the postman is attacked by both dogs.\n    if (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) and \\\n            (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print("both")\n    # Check if the postman is attacked by one dog.\n    elif (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) or \\\n            (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print("one")\n    # Check if the postman is attacked by none of the dogs.\n    else:\n        print("none")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) and \\\n            (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print("both")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) or \\\n            (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print("one")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print("none")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) and \\\n            (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print("both")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) or \\\n            (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print("one")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 07:37:52.800909 size on output set 9
2022-04-13 07:37:52.800921 num operations 2
2022-04-13 07:37:52.800930 size on input set 1
2022-04-13 07:37:57.202192 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    aggressive_A = A\n    aggressive_C = C\n    for i in [P, M, G]:\n        if i <= aggressive_A:\n            print(\"both\")\n        elif i <= aggressive_A + B:\n            print(\"one\")\n        elif i <= aggressive_A + B + aggressive_C:\n            print(\"both\")\n        elif i <= aggressive_A + B + aggressive_C + D:\n            print(\"one\")\n        else:\n            print(\"none\")\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    aggressiveA = A # \uc0c1\ub300\ubc29\uc774 \uc801\uac8c \ub9de\uc73c\uba74 \uc774\uae34\ub2e4\n    aggressiveC = C # \uc0c1\ub300\ubc29\uc774 \ub9ce\uc774 \ub9de\uc73c\uba74 \uc774\uae34\ub2e4\n    for i in [P, M, G]:\n        if i <= aggressiveA:\n            print(\"both\")\n        elif i <= aggressiveA + B:\n            print(\"one\")\n        elif i <= aggressiveA + B + aggressiveC:\n            print(\"both\")\n        elif i <= aggressiveA + B + aggressiveC + D:\n            print(\"one\")\n        else:\n            print(\"none\")\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    aggressive_A = A\n    aggressive_C = C\n    for i in [P, M, G]:\n        if i <= aggressive_A:\n            print(\"both\")\n        elif i <= aggressive_A + B:\n            print(\"one\")\n        elif i <= aggressive_A + B + aggressive_C:\n            print(\"both\")\n        elif i <= aggressive_A + B + aggressive_C + D:\n            print(\"one\")\n        else:\n            print(\"none\")\n\nmain()\n"
    }
  ],
  "created": 1649835472,
  "object": "edit"
}
2022-04-13 07:37:57.202422 fix spelling mistakes 3 ['\n\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    aggressive_A = A\n    aggressive_C = C\n    for i in [P, M, G]:\n        if i <= aggressive_A:\n            print("both")\n        elif i <= aggressive_A + B:\n            print("one")\n        elif i <= aggressive_A + B + aggressive_C:\n            print("both")\n        elif i <= aggressive_A + B + aggressive_C + D:\n            print("one")\n        else:\n            print("none")\n\nmain()\n', 'import sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    aggressiveA = A # 상대방이 적게 맞으면 이긴다\n    aggressiveC = C # 상대방이 많이 맞으면 이긴다\n    for i in [P, M, G]:\n        if i <= aggressiveA:\n            print("both")\n        elif i <= aggressiveA + B:\n            print("one")\n        elif i <= aggressiveA + B + aggressiveC:\n            print("both")\n        elif i <= aggressiveA + B + aggressiveC + D:\n            print("one")\n        else:\n            print("none")\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    aggressive_A = A\n    aggressive_C = C\n    for i in [P, M, G]:\n        if i <= aggressive_A:\n            print("both")\n        elif i <= aggressive_A + B:\n            print("one")\n        elif i <= aggressive_A + B + aggressive_C:\n            print("both")\n        elif i <= aggressive_A + B + aggressive_C + D:\n            print("one")\n        else:\n            print("none")\n\nmain()\n']
2022-04-13 07:37:57.202462 size on output set 2
2022-04-13 07:37:57.202469 size on input set 2
2022-04-13 07:37:58.676448 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    aggressive_A = A\n    aggressive_C = C\n    for i in [P, M, G]:\n        if i <= aggressive_A:\n            print(\"both\")\n        elif i <= aggressive_A + B:\n            print(\"one\")\n        elif i <= aggressive_A + B + aggressive_C:\n            print(\"both\")\n        elif i <= aggressive_A + B + aggressive_C + D:\n            print(\"one\")\n        else:\n            print(\"none\")\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\n\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    aggressive_A = A\n    aggressive_C = C\n    for i in [P, M, G]:\n        if i <= aggressive_A:\n            print(\"both\")\n        elif i <= aggressive_A + B:\n            print(\"one\")\n        elif i <= aggressive_A + B + aggressive_C:\n            print(\"both\")\n        elif i <= aggressive_A + B + aggressive_C + D:\n            print(\"one\")\n        else:\n            print(\"none\")\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    aggressive_A = A\n    aggressive_C = C\n    for i in [P, M, G]:\n        if i <= aggressive_A:\n            print(\"both\")\n        elif i <= aggressive_A + B:\n            print(\"one\")\n        elif i <= aggressive_A + B + aggressive_C:\n            print(\"both\")\n        elif i <= aggressive_A + B + aggressive_C + D:\n            print(\"one\")\n        else:\n            print(\"none\")\n\nmain()\n"
    }
  ],
  "created": 1649835477,
  "object": "edit"
}
2022-04-13 07:37:58.676614 fix syntax errors 3 ['import sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    aggressive_A = A\n    aggressive_C = C\n    for i in [P, M, G]:\n        if i <= aggressive_A:\n            print("both")\n        elif i <= aggressive_A + B:\n            print("one")\n        elif i <= aggressive_A + B + aggressive_C:\n            print("both")\n        elif i <= aggressive_A + B + aggressive_C + D:\n            print("one")\n        else:\n            print("none")\n\nmain()\n', '\n\n\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    aggressive_A = A\n    aggressive_C = C\n    for i in [P, M, G]:\n        if i <= aggressive_A:\n            print("both")\n        elif i <= aggressive_A + B:\n            print("one")\n        elif i <= aggressive_A + B + aggressive_C:\n            print("both")\n        elif i <= aggressive_A + B + aggressive_C + D:\n            print("one")\n        else:\n            print("none")\n\nmain()\n', 'import sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    aggressive_A = A\n    aggressive_C = C\n    for i in [P, M, G]:\n        if i <= aggressive_A:\n            print("both")\n        elif i <= aggressive_A + B:\n            print("one")\n        elif i <= aggressive_A + B + aggressive_C:\n            print("both")\n        elif i <= aggressive_A + B + aggressive_C + D:\n            print("one")\n        else:\n            print("none")\n\nmain()\n']
2022-04-13 07:38:05.001924 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    aggressiveA = A\n    aggressiveC = C\n    for i in [P, M, G]:\n        if i <= aggressiveA:\n            print(\"both\")\n        elif i <= aggressiveA + B:\n            print(\"one\")\n        elif i <= aggressiveA + B + aggressiveC:\n            print(\"both\")\n        elif i <= aggressiveA + B + aggressiveC + D:\n            print(\"one\")\n        else:\n            print(\"none\")\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    aggressiveA = A # \uc0c1\ub300\ubc29\uc774 \uc801\uac8c \ub9de\uc73c\uba74 \uc9c4\ub2e4\n    aggressiveC = C # \uc0c1\ub300\ubc29\uc774 \ub9ce\uc774 \ub9de\uc73c\uba74 \uc9c4\ub2e4\n    for i in [P, M, G]:\n        if i <= A:\n            print(\"both\")\n        elif i <= A + B:\n            print(\"one\")\n        elif i <= A + B + C:\n            print(\"both\")\n        elif i <= A + B + C + D:\n            print(\"one\")\n        else:\n            print(\"none\")\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    aggressiveA = A  # \uc0c1\ub300\ubc29\uc774 \uc801\uac8c \ub9de\uc73c\uba74 \uc774\uae34\ub2e4\n    aggressiveC = C  # \uc0c1\ub300\ubc29\uc774 \ub9ce\uc774 \ub9de\uc73c\uba74 \uc774\uae34\ub2e4\n    for i in [P, M, G]:\n        if i <= aggressiveA:\n            print(\"both\")\n        elif i <= aggressiveA + B:\n            print(\"one\")\n        elif i <= aggressiveA + B + aggressiveC:\n            print(\"both\")\n        elif i <= aggressiveA + B + aggressiveC + D:\n            print(\"one\")\n        else:\n            print(\"none\")\n\nmain()\n"
    }
  ],
  "created": 1649835478,
  "object": "edit"
}
2022-04-13 07:38:05.002101 fix syntax errors 3 ['import sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    aggressiveA = A\n    aggressiveC = C\n    for i in [P, M, G]:\n        if i <= aggressiveA:\n            print("both")\n        elif i <= aggressiveA + B:\n            print("one")\n        elif i <= aggressiveA + B + aggressiveC:\n            print("both")\n        elif i <= aggressiveA + B + aggressiveC + D:\n            print("one")\n        else:\n            print("none")\n\nmain()\n', 'import sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    aggressiveA = A # 상대방이 적게 맞으면 진다\n    aggressiveC = C # 상대방이 많이 맞으면 진다\n    for i in [P, M, G]:\n        if i <= A:\n            print("both")\n        elif i <= A + B:\n            print("one")\n        elif i <= A + B + C:\n            print("both")\n        elif i <= A + B + C + D:\n            print("one")\n        else:\n            print("none")\n\nmain()\n', 'import sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    aggressiveA = A  # 상대방이 적게 맞으면 이긴다\n    aggressiveC = C  # 상대방이 많이 맞으면 이긴다\n    for i in [P, M, G]:\n        if i <= aggressiveA:\n            print("both")\n        elif i <= aggressiveA + B:\n            print("one")\n        elif i <= aggressiveA + B + aggressiveC:\n            print("both")\n        elif i <= aggressiveA + B + aggressiveC + D:\n            print("one")\n        else:\n            print("none")\n\nmain()\n']
2022-04-13 07:38:05.002245 size on output set 5
2022-04-13 07:38:05.002264 num operations 2
2022-04-13 07:38:05.002271 size on input set 1
2022-04-13 07:38:07.327386 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nA, B, C, D = map(int, input().split())\nP, M, G = map(int, input().split())\n\ndef get_dog_status(A, B, C, D, t):\n    t = (t - 1) % (A + B + C + D)\n    if t < A:\n        return \"A\"\n    elif t < A + B:\n        return \"B\"\n    elif t < A + B + C:\n        return \"C\"\n    else:\n        return \"D\"\n\ndef get_dog_status_at_time(A, B, C, D, t):\n    if get_dog_status(A, B, C, D, t) == \"A\" or get_dog_status(A, B, C, D, t) == \"C\":\n        return \"aggressive\"\n    else:\n        return \"calm\"\n\ndef get_num_dogs_attacking(A, B, C, D, P):\n    dog1 = get_dog_status_at_time(A, B, C, D, P)\n    dog2 = get_dog_status_at_time(A, B, C, D, P + 1)\n    if dog1 == \"aggressive\" and dog2 == \"aggressive\":\n        return \"both\"\n    elif dog1 == \"aggressive\" or dog2 == \"aggressive\":\n        return \"one\"\n    else:\n        return \"none\"\n\nprint(get_num_dogs_attacking(A, B, C, D, P))\nprint(get_num_dogs_attacking(A, B, C, D, M))\nprint(get_num_dogs_attacking(A, B, C, D, G))\n"
    },
    {
      "index": 1,
      "text": "\n\nA, B, C, D = map(int, input().split())\nP, M, G = map(int, input().split())\n\ndef get_dog_status(A, B, C, D, t):\n    t = (t - 1) % (A + B + C + D)\n    if t < A:\n        return \"A\"\n    elif t < A + B:\n        return \"B\"\n    elif t < A + B + C:\n        return \"C\"\n    else:\n        return \"D\"\n\ndef get_dog_status_at_time(A, B, C, D, t):\n    if get_dog_status(A, B, C, D, t) == \"A\" or get_dog_status(A, B, C, D, t) == \"C\":\n        return \"aggressive\"\n    else:\n        return \"calm\"\n\ndef get_num_dogs_attacking(A, B, C, D, P):\n    dog1 = get_dog_status_at_time(A, B, C, D, P)\n    dog2 = get_dog_status_at_time(A, B, C, D, P + 1)\n    if dog1 == \"aggressive\" and dog2 == \"aggressive\":\n        return \"both\"\n    elif dog1 == \"aggressive\" or dog2 == \"aggressive\":\n        return \"one\"\n    else:\n        return \"none\"\n\nprint(get_num_dogs_attacking(A, B, C, D, P))\nprint(get_num_dogs_attacking(A, B, C, D, M))\nprint(get_num_dogs_attacking(A, B, C, D, G))\n"
    },
    {
      "index": 2,
      "text": "\nA, B, C, D = map(int, input().split())\nP, M, G = map(int, input().split())\n\ndef get_dog_status(A, B, C, D, t):\n    t = (t - 1) % (A + B + C + D)\n    if t < A:\n        return \"A\"\n    elif t < A + B:\n        return \"B\"\n    elif t < A + B + C:\n        return \"C\"\n    else:\n        return \"D\"\n\ndef get_dog_status_at_time(A, B, C, D, t):\n    if get_dog_status(A, B, C, D, t) == \"A\" or get_dog_status(A, B, C, D, t) == \"C\":\n        return \"aggressive\"\n    else:\n        return \"calm\"\n\ndef get_num_dogs_attacking(A, B, C, D, P):\n    dog1 = get_dog_status_at_time(A, B, C, D, P)\n    dog2 = get_dog_status_at_time(A, B, C, D, P)\n    if dog1 == \"aggressive\" and dog2 == \"aggressive\":\n        return \"both\"\n    elif dog1 == \"aggressive\" or dog2 == \"aggressive\":\n        return \"one\"\n    else:\n        return \"none\"\n\nprint(get_num_dogs_attacking(A, B, C, D, P))\nprint(get_num_dogs_attacking(A, B, C, D, M))\nprint(get_num_dogs_attacking(A, B, C, D, G))\n"
    }
  ],
  "created": 1649835485,
  "object": "edit"
}
2022-04-13 07:38:07.327564 fix spelling mistakes 3 ['\n\nA, B, C, D = map(int, input().split())\nP, M, G = map(int, input().split())\n\ndef get_dog_status(A, B, C, D, t):\n    t = (t - 1) % (A + B + C + D)\n    if t < A:\n        return "A"\n    elif t < A + B:\n        return "B"\n    elif t < A + B + C:\n        return "C"\n    else:\n        return "D"\n\ndef get_dog_status_at_time(A, B, C, D, t):\n    if get_dog_status(A, B, C, D, t) == "A" or get_dog_status(A, B, C, D, t) == "C":\n        return "aggressive"\n    else:\n        return "calm"\n\ndef get_num_dogs_attacking(A, B, C, D, P):\n    dog1 = get_dog_status_at_time(A, B, C, D, P)\n    dog2 = get_dog_status_at_time(A, B, C, D, P + 1)\n    if dog1 == "aggressive" and dog2 == "aggressive":\n        return "both"\n    elif dog1 == "aggressive" or dog2 == "aggressive":\n        return "one"\n    else:\n        return "none"\n\nprint(get_num_dogs_attacking(A, B, C, D, P))\nprint(get_num_dogs_attacking(A, B, C, D, M))\nprint(get_num_dogs_attacking(A, B, C, D, G))\n', '\n\nA, B, C, D = map(int, input().split())\nP, M, G = map(int, input().split())\n\ndef get_dog_status(A, B, C, D, t):\n    t = (t - 1) % (A + B + C + D)\n    if t < A:\n        return "A"\n    elif t < A + B:\n        return "B"\n    elif t < A + B + C:\n        return "C"\n    else:\n        return "D"\n\ndef get_dog_status_at_time(A, B, C, D, t):\n    if get_dog_status(A, B, C, D, t) == "A" or get_dog_status(A, B, C, D, t) == "C":\n        return "aggressive"\n    else:\n        return "calm"\n\ndef get_num_dogs_attacking(A, B, C, D, P):\n    dog1 = get_dog_status_at_time(A, B, C, D, P)\n    dog2 = get_dog_status_at_time(A, B, C, D, P + 1)\n    if dog1 == "aggressive" and dog2 == "aggressive":\n        return "both"\n    elif dog1 == "aggressive" or dog2 == "aggressive":\n        return "one"\n    else:\n        return "none"\n\nprint(get_num_dogs_attacking(A, B, C, D, P))\nprint(get_num_dogs_attacking(A, B, C, D, M))\nprint(get_num_dogs_attacking(A, B, C, D, G))\n', '\nA, B, C, D = map(int, input().split())\nP, M, G = map(int, input().split())\n\ndef get_dog_status(A, B, C, D, t):\n    t = (t - 1) % (A + B + C + D)\n    if t < A:\n        return "A"\n    elif t < A + B:\n        return "B"\n    elif t < A + B + C:\n        return "C"\n    else:\n        return "D"\n\ndef get_dog_status_at_time(A, B, C, D, t):\n    if get_dog_status(A, B, C, D, t) == "A" or get_dog_status(A, B, C, D, t) == "C":\n        return "aggressive"\n    else:\n        return "calm"\n\ndef get_num_dogs_attacking(A, B, C, D, P):\n    dog1 = get_dog_status_at_time(A, B, C, D, P)\n    dog2 = get_dog_status_at_time(A, B, C, D, P)\n    if dog1 == "aggressive" and dog2 == "aggressive":\n        return "both"\n    elif dog1 == "aggressive" or dog2 == "aggressive":\n        return "one"\n    else:\n        return "none"\n\nprint(get_num_dogs_attacking(A, B, C, D, P))\nprint(get_num_dogs_attacking(A, B, C, D, M))\nprint(get_num_dogs_attacking(A, B, C, D, G))\n']
2022-04-13 07:38:07.327606 size on output set 2
2022-04-13 07:38:07.327612 size on input set 2
2022-04-13 07:38:24.401360 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nA, B, C, D = map(int, input().split())\nP, M, G = map(int, input().split())\n\ndef get_dog_status(A, B, C, D, t):\n    t = (t - 1) % (A + B + C + D)\n    if t < A:\n        return \"A\"\n    elif t < A + B:\n        return \"B\"\n    elif t < A + B + C:\n        return \"C\"\n    else:\n        return \"D\"\n\ndef get_dog_status_at_time(A, B, C, D, t):\n    if get_dog_status(A, B, C, D, t) == \"A\" or get_dog_status(A, B, C, D, t) == \"C\":\n        return \"aggressive\"\n    else:\n        return \"calm\"\n\ndef get_num_dogs_attacking(A, B, C, D, P):\n    dog1 = get_dog_status_at_time(A, B, C, D, P)\n    dog2 = get_dog_status_at_time(A, B, C, D, P + 1)\n    if dog1 == \"aggressive\" and dog2 == \"aggressive\":\n        return \"both\"\n    elif dog1 == \"aggressive\" or dog2 == \"aggressive\":\n        return \"one\"\n    else:\n        return \"none\"\n\nprint(get_num_dogs_attacking(A, B, C, D, P) + \" at \" + P)\nprint(get_num_dogs_attacking(A, B, C, D, M) + \" at \" + M)\nprint(get_num_dogs_attacking(A, B, C, D, G) + \" at \" + G)\n"
    },
    {
      "index": 1,
      "text": "\nA, B, C, D = map(int, input().split())\nP, M, G = map(int, input().split())\n\ndef get_dog_status(A, B, C, D, t):\n    t = (t - 1) % (A + B + C + D)\n    if t < A:\n        return \"A\"\n    elif t < A + B:\n        return \"B\"\n    elif t < A + B + C:\n        return \"C\"\n    else:\n        return \"D\"\n\ndef get_dog_status_at_time(A, B, C, D, t):\n    if get_dog_status(A, B, C, D, t) == \"A\" or get_dog_status(A, B, C, D, t) == \"C\":\n        return \"aggressive\"\n    else:\n        return \"calm\"\n\ndef get_num_dogs_attacking(A, B, C, D, P):\n    dog1 = get_dog_status_at_time(A, B, C, D, P)\n    dog2 = get_dog_status_at_time(A, B, C, D, P + 1)\n    if dog1 == \"aggressive\" and dog2 == \"aggressive\":\n        return \"both\"\n    elif dog1 == \"aggressive\" or dog2 == \"aggressive\":\n        return \"one\"\n    else:\n        return \"none\"\n\nprint(get_num_dogs_attacking(A, B, C, D, P) + \" p\")\nprint(get_num_dogs_attacking(A, B, C, D, M) + \" m\")\nprint(get_num_dogs_attacking(A, B, C, D, G) + \" g\")\n"
    },
    {
      "index": 2,
      "text": "\nA, B, C, D = map(int, input().split())\nP, M, G = map(int, input().split())\n\ndef get_dog_status(A, B, C, D, t, dog):\n    if dog == \"A\":\n        t = (t - 1) % (A + B + C + D)\n        if t < A:\n            return \"A\"\n        elif t < A + B:\n            return \"B\"\n        elif t < A + B + C:\n            return \"C\"\n        else:\n            return \"D\"\n    elif dog == \"B\":\n        t = (t - 1) % (A + B + C + D)\n        if t < A:\n            return \"B\"\n        elif t < A + B:\n            return \"C\"\n        elif t < A + B + C:\n            return \"D\"\n        else:\n            return \"A\"\n    elif dog == \"C\":\n        t = (t - 1) % (A + B + C + D)\n        if t < A:\n            return \"C\"\n        elif t < A + B:\n            return \"D\"\n        elif t < A + B + C:\n            return \"A\"\n        else:\n            return \"B\"\n    elif dog == \"D\":\n        t = (t - 1) % (A + B + C + D)\n        if t < A:\n            return \"D\"\n        elif t < A + B:\n            return \"A\"\n        elif t < A + B + C:\n            return \"B\"\n        else:\n            return \"C\"\n\ndef get_dog_status_at_time(A, B, C, D, t, dog):\n    if get_dog_status(A, B, C, D, t, dog) == \"A\" or get_dog_status(A, B, C, D, t, dog) == \"C\":\n        return \"aggressive\"\n    else:\n        return \"calm\"\n\ndef get_num_dogs_attacking(A, B, C, D, P):\n    dog1 = get_dog_status_at_time(A, B, C, D, P, \"A\")\n    dog2 = get_dog_status_at_time(A, B, C, D, P, \"B\")\n    if dog1 == \"aggressive\" and dog2 == \"aggressive\":\n        return \"both\"\n    elif dog1 == \"aggressive\" or dog2 == \"aggressive\":\n        return \"one\"\n    else:\n        return \"none\"\n\nprint(get_num_dogs_attacking(A, B, C, D, P), get_num_dogs_attacking(A, B, C, D, M), get_num_dogs_attacking(A, B, C, D, G))\n"
    }
  ],
  "created": 1649835487,
  "object": "edit"
}
2022-04-13 07:38:24.401621 fix syntax errors 3 ['\nA, B, C, D = map(int, input().split())\nP, M, G = map(int, input().split())\n\ndef get_dog_status(A, B, C, D, t):\n    t = (t - 1) % (A + B + C + D)\n    if t < A:\n        return "A"\n    elif t < A + B:\n        return "B"\n    elif t < A + B + C:\n        return "C"\n    else:\n        return "D"\n\ndef get_dog_status_at_time(A, B, C, D, t):\n    if get_dog_status(A, B, C, D, t) == "A" or get_dog_status(A, B, C, D, t) == "C":\n        return "aggressive"\n    else:\n        return "calm"\n\ndef get_num_dogs_attacking(A, B, C, D, P):\n    dog1 = get_dog_status_at_time(A, B, C, D, P)\n    dog2 = get_dog_status_at_time(A, B, C, D, P + 1)\n    if dog1 == "aggressive" and dog2 == "aggressive":\n        return "both"\n    elif dog1 == "aggressive" or dog2 == "aggressive":\n        return "one"\n    else:\n        return "none"\n\nprint(get_num_dogs_attacking(A, B, C, D, P) + " at " + P)\nprint(get_num_dogs_attacking(A, B, C, D, M) + " at " + M)\nprint(get_num_dogs_attacking(A, B, C, D, G) + " at " + G)\n', '\nA, B, C, D = map(int, input().split())\nP, M, G = map(int, input().split())\n\ndef get_dog_status(A, B, C, D, t):\n    t = (t - 1) % (A + B + C + D)\n    if t < A:\n        return "A"\n    elif t < A + B:\n        return "B"\n    elif t < A + B + C:\n        return "C"\n    else:\n        return "D"\n\ndef get_dog_status_at_time(A, B, C, D, t):\n    if get_dog_status(A, B, C, D, t) == "A" or get_dog_status(A, B, C, D, t) == "C":\n        return "aggressive"\n    else:\n        return "calm"\n\ndef get_num_dogs_attacking(A, B, C, D, P):\n    dog1 = get_dog_status_at_time(A, B, C, D, P)\n    dog2 = get_dog_status_at_time(A, B, C, D, P + 1)\n    if dog1 == "aggressive" and dog2 == "aggressive":\n        return "both"\n    elif dog1 == "aggressive" or dog2 == "aggressive":\n        return "one"\n    else:\n        return "none"\n\nprint(get_num_dogs_attacking(A, B, C, D, P) + " p")\nprint(get_num_dogs_attacking(A, B, C, D, M) + " m")\nprint(get_num_dogs_attacking(A, B, C, D, G) + " g")\n', '\nA, B, C, D = map(int, input().split())\nP, M, G = map(int, input().split())\n\ndef get_dog_status(A, B, C, D, t, dog):\n    if dog == "A":\n        t = (t - 1) % (A + B + C + D)\n        if t < A:\n            return "A"\n        elif t < A + B:\n            return "B"\n        elif t < A + B + C:\n            return "C"\n        else:\n            return "D"\n    elif dog == "B":\n        t = (t - 1) % (A + B + C + D)\n        if t < A:\n            return "B"\n        elif t < A + B:\n            return "C"\n        elif t < A + B + C:\n            return "D"\n        else:\n            return "A"\n    elif dog == "C":\n        t = (t - 1) % (A + B + C + D)\n        if t < A:\n            return "C"\n        elif t < A + B:\n            return "D"\n        elif t < A + B + C:\n            return "A"\n        else:\n            return "B"\n    elif dog == "D":\n        t = (t - 1) % (A + B + C + D)\n        if t < A:\n            return "D"\n        elif t < A + B:\n            return "A"\n        elif t < A + B + C:\n            return "B"\n        else:\n            return "C"\n\ndef get_dog_status_at_time(A, B, C, D, t, dog):\n    if get_dog_status(A, B, C, D, t, dog) == "A" or get_dog_status(A, B, C, D, t, dog) == "C":\n        return "aggressive"\n    else:\n        return "calm"\n\ndef get_num_dogs_attacking(A, B, C, D, P):\n    dog1 = get_dog_status_at_time(A, B, C, D, P, "A")\n    dog2 = get_dog_status_at_time(A, B, C, D, P, "B")\n    if dog1 == "aggressive" and dog2 == "aggressive":\n        return "both"\n    elif dog1 == "aggressive" or dog2 == "aggressive":\n        return "one"\n    else:\n        return "none"\n\nprint(get_num_dogs_attacking(A, B, C, D, P), get_num_dogs_attacking(A, B, C, D, M), get_num_dogs_attacking(A, B, C, D, G))\n']
2022-04-13 07:38:28.905882 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nA, B, C, D = map(int, input().split())\nP, M, G = map(int, input().split())\n\ndef get_dog_status(A, B, C, D, t):\n    t = (t - 1) % (A + B + C + D)\n    if t < A:\n        return \"A\"\n    elif t < A + B:\n        return \"B\"\n    elif t < A + B + C:\n        return \"C\"\n    else:\n        return \"D\"\n\ndef get_dog_status_at_time(A, B, C, D, t):\n    if get_dog_status(A, B, C, D, t) in [\"A\", \"C\"]:\n        return \"aggressive\"\n    else:\n        return \"calm\"\n\ndef get_num_dogs_attacking(A, B, C, D, P):\n    dog1 = get_dog_status_at_time(A, B, C, D, P)\n    dog2 = get_dog_status_at_time(A, B, C, D, P + 1)\n    if dog1 == \"aggressive\" and dog2 == \"aggressive\":\n        return \"both\"\n    elif dog1 == \"aggressive\" or dog2 == \"aggressive\":\n        return \"one\"\n    else:\n        return \"none\"\n\nprint(get_num_dogs_attacking(A, B, C, D, P))\nprint(get_num_dogs_attacking(A, B, C, D, M))\nprint(get_num_dogs_attacking(A, B, C, D, G))\n"
    },
    {
      "index": 1,
      "text": "\n\nA, B, C, D = map(int, input().split())\nP, M, G = map(int, input().split())\n\ndef get_dog_status(A, B, C, D, t):\n    t = (t - 1) % (A + B + C + D)\n    if t < A:\n        return \"A\"\n    elif t < A + B:\n        return \"B\"\n    elif t < A + B + C:\n        return \"C\"\n    else:\n        return \"D\"\n\ndef get_dog_status_at_time(A, B, C, D, t):\n    if get_dog_status(A, B, C, D, t) == \"A\" or get_dog_status(A, B, C, D, t) == \"C\": # fix this\n        return \"aggressive\"\n    else:\n        return \"calm\"\n\ndef get_num_dogs_attacking(A, B, C, D, P):\n    dog1 = get_dog_status_at_time(A, B, C, D, P)\n    dog2 = get_dog_status_at_time(A, B, C, D, P + 1)\n    if dog1 == \"aggressive\" and dog2 == \"aggressive\":\n        return \"both\"\n    elif dog1 == \"aggressive\" or dog2 == \"aggressive\":\n        return \"one\"\n    else:\n        return \"none\"\n\nprint(get_num_dogs_attacking(A, B, C, D, P))\nprint(get_num_dogs_attacking(A, B, C, D, M))\nprint(get_num_dogs_attacking(A, B, C, D, G))\n\n"
    },
    {
      "index": 2,
      "text": "\nA, B, C, D = map(int, input().split())\nP, M, G = map(int, input().split())\n\ndef get_dog_status(A, B, C, D, t):\n    t = (t - 1) % (A + B + C + D)\n    if t < A:\n        return \"A\"\n    elif t < A + B:\n        return \"B\"\n    elif t < A + B + C:\n        return \"C\"\n    else:\n        return \"D\"\n\ndef get_dog_status_at_time(A, B, C, D, t):\n    if get_dog_status(A, B, C, D, t) == \"A\" or get_dog_status(A, B, C, D, t) == \"C\":\n        return \"aggressive\"\n    else:\n        return \"calm\"\n\ndef get_num_dogs_attacking(A, B, C, D, P):\n    dog1 = get_dog_status_at_time(A, B, C, D, P)\n    dog2 = get_dog_status_at_time(A, B, C, D, P + 1)\n    if dog1 == \"aggressive\" and dog2 == \"aggressive\":\n        return \"both\"\n    elif dog1 == \"aggressive\" or dog2 == \"aggressive\":\n        return \"one\"\n    else:\n        return \"none\"\n\nprint(get_num_dogs_attacking(A, B, C, D, P))\nprint(get_num_dogs_attacking(A, B, C, D, M))\nprint(get_num_dogs_attacking(A, B, C, D, G))\n"
    }
  ],
  "created": 1649835504,
  "object": "edit"
}
2022-04-13 07:38:28.906071 fix syntax errors 3 ['\nA, B, C, D = map(int, input().split())\nP, M, G = map(int, input().split())\n\ndef get_dog_status(A, B, C, D, t):\n    t = (t - 1) % (A + B + C + D)\n    if t < A:\n        return "A"\n    elif t < A + B:\n        return "B"\n    elif t < A + B + C:\n        return "C"\n    else:\n        return "D"\n\ndef get_dog_status_at_time(A, B, C, D, t):\n    if get_dog_status(A, B, C, D, t) in ["A", "C"]:\n        return "aggressive"\n    else:\n        return "calm"\n\ndef get_num_dogs_attacking(A, B, C, D, P):\n    dog1 = get_dog_status_at_time(A, B, C, D, P)\n    dog2 = get_dog_status_at_time(A, B, C, D, P + 1)\n    if dog1 == "aggressive" and dog2 == "aggressive":\n        return "both"\n    elif dog1 == "aggressive" or dog2 == "aggressive":\n        return "one"\n    else:\n        return "none"\n\nprint(get_num_dogs_attacking(A, B, C, D, P))\nprint(get_num_dogs_attacking(A, B, C, D, M))\nprint(get_num_dogs_attacking(A, B, C, D, G))\n', '\n\nA, B, C, D = map(int, input().split())\nP, M, G = map(int, input().split())\n\ndef get_dog_status(A, B, C, D, t):\n    t = (t - 1) % (A + B + C + D)\n    if t < A:\n        return "A"\n    elif t < A + B:\n        return "B"\n    elif t < A + B + C:\n        return "C"\n    else:\n        return "D"\n\ndef get_dog_status_at_time(A, B, C, D, t):\n    if get_dog_status(A, B, C, D, t) == "A" or get_dog_status(A, B, C, D, t) == "C": # fix this\n        return "aggressive"\n    else:\n        return "calm"\n\ndef get_num_dogs_attacking(A, B, C, D, P):\n    dog1 = get_dog_status_at_time(A, B, C, D, P)\n    dog2 = get_dog_status_at_time(A, B, C, D, P + 1)\n    if dog1 == "aggressive" and dog2 == "aggressive":\n        return "both"\n    elif dog1 == "aggressive" or dog2 == "aggressive":\n        return "one"\n    else:\n        return "none"\n\nprint(get_num_dogs_attacking(A, B, C, D, P))\nprint(get_num_dogs_attacking(A, B, C, D, M))\nprint(get_num_dogs_attacking(A, B, C, D, G))\n\n', '\nA, B, C, D = map(int, input().split())\nP, M, G = map(int, input().split())\n\ndef get_dog_status(A, B, C, D, t):\n    t = (t - 1) % (A + B + C + D)\n    if t < A:\n        return "A"\n    elif t < A + B:\n        return "B"\n    elif t < A + B + C:\n        return "C"\n    else:\n        return "D"\n\ndef get_dog_status_at_time(A, B, C, D, t):\n    if get_dog_status(A, B, C, D, t) == "A" or get_dog_status(A, B, C, D, t) == "C":\n        return "aggressive"\n    else:\n        return "calm"\n\ndef get_num_dogs_attacking(A, B, C, D, P):\n    dog1 = get_dog_status_at_time(A, B, C, D, P)\n    dog2 = get_dog_status_at_time(A, B, C, D, P + 1)\n    if dog1 == "aggressive" and dog2 == "aggressive":\n        return "both"\n    elif dog1 == "aggressive" or dog2 == "aggressive":\n        return "one"\n    else:\n        return "none"\n\nprint(get_num_dogs_attacking(A, B, C, D, P))\nprint(get_num_dogs_attacking(A, B, C, D, M))\nprint(get_num_dogs_attacking(A, B, C, D, G))\n']
2022-04-13 07:38:28.906203 size on output set 6
2022-04-13 07:38:28.906218 num operations 2
2022-04-13 07:38:28.906223 size on input set 1
2022-04-13 07:38:31.800027 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    for i in [p, m, g]:\n        if i > a:\n            if (i - a) % (b + a) < a:\n                print('both')\n            print('one')\n            else:\n                print('one')\n        else:\n            print('both')\n\n        if i > c:\n            if (i - c) % (c + d) < c:\n                print('both')\n            else:\n                print('one')\n        else:\n            print('one')\n            print('both')\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport os\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    for i in [p, m, g]:\n        if i > a:\n            if (i - a) % (b + a) < a:\n                print('both')\n            else:\n                print('one')\n        else:\n            print('both')\n\n        if i > c:\n            if (i - c) % (c + d) < c:\n                print('both')\n            else:\n                print('one')\n        else:\n            print('both')\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    for i in [p, m, g]:\n        if i > a:\n            if (i - a) % (b + a) <= a:\n                print('both')\n            else:\n                print('one')\n        else:\n            print('both')\n\n        if i > c:\n            if (i - c) % (c + d) <= c:\n                print('both')\n            else:\n                print('one')\n        else:\n            print('both')\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649835508,
  "object": "edit"
}
2022-04-13 07:38:31.800237 fix spelling mistakes 3 ["\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    for i in [p, m, g]:\n        if i > a:\n            if (i - a) % (b + a) < a:\n                print('both')\n            print('one')\n            else:\n                print('one')\n        else:\n            print('both')\n\n        if i > c:\n            if (i - c) % (c + d) < c:\n                print('both')\n            else:\n                print('one')\n        else:\n            print('one')\n            print('both')\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport os\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    for i in [p, m, g]:\n        if i > a:\n            if (i - a) % (b + a) < a:\n                print('both')\n            else:\n                print('one')\n        else:\n            print('both')\n\n        if i > c:\n            if (i - c) % (c + d) < c:\n                print('both')\n            else:\n                print('one')\n        else:\n            print('both')\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    for i in [p, m, g]:\n        if i > a:\n            if (i - a) % (b + a) <= a:\n                print('both')\n            else:\n                print('one')\n        else:\n            print('both')\n\n        if i > c:\n            if (i - c) % (c + d) <= c:\n                print('both')\n            else:\n                print('one')\n        else:\n            print('both')\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 07:38:31.800272 size on output set 3
2022-04-13 07:38:31.800279 size on input set 3
2022-04-13 07:38:46.189677 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    for i in [p, m, g]:\n        if i > a:\n            if (i - a) % (b + a) <= a:\n                print('both')\n            else:\n                print('one')\n        else:\n            print('both')\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    for i in [p, m, g]:\n        if i > a:\n            if (i - a) % (b + a) <= a and i > c:\n                if (i - c) % (c + d) <= c:\n                    print('both')\n                else:\n                    print('one')\n            elif i > c:\n                if (i - c) % (c + d) <= c:\n                    print('both')\n                else:\n                    print('one')\n            else:\n                print('both')\n        else:\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n\n    if p > a:\n        if (p - a) % (b + a) <= a:\n            print('both')\n        else:\n            print('one')\n    else:\n        print('both')\n\n    if m > a:\n        if (m - a) % (b + a) <= a:\n            print('both')\n        else:\n            print('one')\n    else:\n        print('both')\n\n    if g > a:\n        if (g - a) % (b + a) <= a:\n            print('both')\n        else:\n            print('one')\n    else:\n        print('both')\n\n    if p > c:\n        if (p - c) % (c + d) <= c:\n            print('both')\n        else:\n            print('one')\n    else:\n        print('both')\n\n    if m > c:\n        if (m - c) % (c + d) <= c:\n            print('both')\n        else:\n            print('one')\n    else:\n        print('both')\n\n    if g > c:\n        if (g - c) % (c + d) <= c:\n            print('both')\n        else:\n            print('one')\n    else:\n        print('both')\n\n    if p > a:\n        if p > c:\n            if (p - a) % (b + a) <= a and (p - c) % (c + d) <= c:\n                print('both')\n            else:\n                print('one')\n        else:\n            print('both')\n\n        if i > c:\n            if (i - c) % (c + d) <= c:\n                print('both')\n            else:\n                print('one')\n        else:\n            print('both')\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649835511,
  "object": "edit"
}
2022-04-13 07:38:46.190000 fix syntax errors 3 ["\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    for i in [p, m, g]:\n        if i > a:\n            if (i - a) % (b + a) <= a:\n                print('both')\n            else:\n                print('one')\n        else:\n            print('both')\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    for i in [p, m, g]:\n        if i > a:\n            if (i - a) % (b + a) <= a and i > c:\n                if (i - c) % (c + d) <= c:\n                    print('both')\n                else:\n                    print('one')\n            elif i > c:\n                if (i - c) % (c + d) <= c:\n                    print('both')\n                else:\n                    print('one')\n            else:\n                print('both')\n        else:\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n\n    if p > a:\n        if (p - a) % (b + a) <= a:\n            print('both')\n        else:\n            print('one')\n    else:\n        print('both')\n\n    if m > a:\n        if (m - a) % (b + a) <= a:\n            print('both')\n        else:\n            print('one')\n    else:\n        print('both')\n\n    if g > a:\n        if (g - a) % (b + a) <= a:\n            print('both')\n        else:\n            print('one')\n    else:\n        print('both')\n\n    if p > c:\n        if (p - c) % (c + d) <= c:\n            print('both')\n        else:\n            print('one')\n    else:\n        print('both')\n\n    if m > c:\n        if (m - c) % (c + d) <= c:\n            print('both')\n        else:\n            print('one')\n    else:\n        print('both')\n\n    if g > c:\n        if (g - c) % (c + d) <= c:\n            print('both')\n        else:\n            print('one')\n    else:\n        print('both')\n\n    if p > a:\n        if p > c:\n            if (p - a) % (b + a) <= a and (p - c) % (c + d) <= c:\n                print('both')\n            else:\n                print('one')\n        else:\n            print('both')\n\n        if i > c:\n            if (i - c) % (c + d) <= c:\n                print('both')\n            else:\n                print('one')\n        else:\n            print('both')\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 07:38:48.005558 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    for i in [p, m, g]:\n        if i > a:\n            if (i - a) % (b + a) < a:\n                print('both')\n            else:\n                print('one')\n        else:\n            print('both')\n\n        if i > c:\n            if (i - c) % (c + d) < c:\n                print('both')\n            else:\n                print('one')\n        else:\n            print('one')\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    for i in [p, m, g]:\n        if i > a:\n            if (i - a) % (b + a) < a:\n                print('both')\n            else:\n                print('one')\n        else:\n            print('both')\n\n        if i > c:\n            if (i - c) % (c + d) < c:\n                print('both')\n            else:\n                print('one')\n        else:\n            print('one')\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    for i in [p, m, g]:\n        if i > a:\n            if (i - a) % (b + a) < a:\n                print('both')\n            else:\n                print('one')\n        else:\n            print('both')\n\n        if i > c:\n            if (i - c) % (c + d) < c:\n                print('both')\n            else:\n                print('one')\n        else:\n            print('one')\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649835526,
  "object": "edit"
}
2022-04-13 07:38:48.005721 fix syntax errors 3 ["\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    for i in [p, m, g]:\n        if i > a:\n            if (i - a) % (b + a) < a:\n                print('both')\n            else:\n                print('one')\n        else:\n            print('both')\n\n        if i > c:\n            if (i - c) % (c + d) < c:\n                print('both')\n            else:\n                print('one')\n        else:\n            print('one')\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    for i in [p, m, g]:\n        if i > a:\n            if (i - a) % (b + a) < a:\n                print('both')\n            else:\n                print('one')\n        else:\n            print('both')\n\n        if i > c:\n            if (i - c) % (c + d) < c:\n                print('both')\n            else:\n                print('one')\n        else:\n            print('one')\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    for i in [p, m, g]:\n        if i > a:\n            if (i - a) % (b + a) < a:\n                print('both')\n            else:\n                print('one')\n        else:\n            print('both')\n\n        if i > c:\n            if (i - c) % (c + d) < c:\n                print('both')\n            else:\n                print('one')\n        else:\n            print('one')\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 07:39:07.269094 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport os\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    for i in [p, m, g]:\n        if i > a and (i - a) % (b + a) < a:\n            print('one')\n        else:\n            print('both')\n\n        if i > c and (i - c) % (c + d) < c:\n            print('one')\n        else:\n            print('both')\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import os\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    for i in [p, m, g]:  # \uac01 \uc0ac\ub78c\ub4e4\uc758 \uc785\uc7a5 \uc2dc\uac04\n        if i > a:  # \uac01 \uc0ac\ub78c\ub4e4\uc758 \uc785\uc7a5 \uc2dc\uac04\uc774 \uc9c0\ud558\ucca0\uc774 \ub5a0\ub098\ub294 \uc2dc\uac04\ubcf4\ub2e4 \ud074 \uacbd\uc6b0\n            if (i - a) % (b + a) < a:  # \uc9c0\ud558\ucca0\uc774 \ub5a0\ub098\ub294 \uc2dc\uac04\ubcf4\ub2e4 \uc9c0\ud558\ucca0 \ub3c4\ucc29 \uc2dc\uac04\uc774 \ud074 \uacbd\uc6b0\n                print('both')  # \uc9c0\ud558\ucca0\uc774 \ub3c4\ucc29\ud558\uace0 \uace7 \ub5a0\ub098\ub294 \uc0c1\ud669\n            else:  # \uc9c0\ud558\ucca0\uc774 \ub3c4\ucc29\ud558\uace0 \uace7 \ub5a0\ub098\ub294 \uc0c1\ud669\uc774 \uc544\ub2d0 \uacbd\uc6b0\n                print('one')  # \uc9c0\ud558\ucca0\uc774 \ub5a0\ub098\ub294 \uc0c1\ud669\n        else:  # \uac01 \uc0ac\ub78c\ub4e4\uc758 \uc785\uc7a5 \uc2dc\uac04\uc774 \uc9c0\ud558\ucca0\uc774 \ub5a0\ub098\ub294 \uc2dc\uac04\ubcf4\ub2e4 \uc791\uc744 \uacbd\uc6b0\n            print('both')  # \uc9c0\ud558\ucca0\uc774 \ub3c4\ucc29\ud558\uace0 \uace7 \ub5a0\ub098\ub294 \uc0c1\ud669\n\n        if i > c:  # \uac01 \uc0ac\ub78c\ub4e4\uc758 \uc785\uc7a5 \uc2dc\uac04\uc774 \ubc84\uc2a4\uac00 \ub5a0\ub098\ub294 \uc2dc\uac04\ubcf4\ub2e4 \ud074 \uacbd\uc6b0\n            if (i - c) % (c + d) < c:  # \ubc84\uc2a4\uac00 \ub5a0\ub098\ub294 \uc2dc\uac04\ubcf4\ub2e4 \ubc84\uc2a4 \ub3c4\ucc29 \uc2dc\uac04\uc774 \ud074 \uacbd\uc6b0\n                print('both')  # \ubc84\uc2a4\uac00 \ub3c4\ucc29\ud558\uace0 \uace7 \ub5a0\ub098\ub294 \uc0c1\ud669\n            else:  # \ubc84\uc2a4\uac00 \ub3c4\ucc29\ud558\uace0 \uace7 \ub5a0\ub098\ub294 \uc0c1\ud669\uc774 \uc544\ub2d0 \uacbd\uc6b0\n                print('one')  # \ubc84\uc2a4\uac00 \ub5a0\ub098\ub294 \uc0c1\ud669\n        else:  # \uac01 \uc0ac\ub78c\ub4e4\uc758 \uc785\uc7a5 \uc2dc\uac04\uc774 \ubc84\uc2a4\uac00 \ub5a0\ub098\ub294 \uc2dc\uac04\ubcf4\ub2e4 \uc791\uc744 \uacbd\uc6b0\n            print('both')  # \ubc84\uc2a4\uac00 \ub3c4\ucc29\ud558\uace0 \uace7 \ub5a0\ub098\ub294 \uc0c1\ud669\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport os\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    for i in [p, m, g]:\n        if i > a:\n            if (i - a) % (b + a) <= a:\n                print('both', end=\" \")\n            else:\n                print('one', end=\" \")\n        else:\n            print('both', end=\" \")\n\n        if i > c:\n            if (i - c) % (c + d) <= c:\n                print('both', end=\" \")\n            else:\n                print('one', end=\" \")\n        else:\n            print('both', end=\" \")\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649835528,
  "object": "edit"
}
2022-04-13 07:39:07.269291 fix syntax errors 3 ["\nimport os\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    for i in [p, m, g]:\n        if i > a and (i - a) % (b + a) < a:\n            print('one')\n        else:\n            print('both')\n\n        if i > c and (i - c) % (c + d) < c:\n            print('one')\n        else:\n            print('both')\n\n\nif __name__ == '__main__':\n    main()\n", "import os\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    for i in [p, m, g]:  # 각 사람들의 입장 시간\n        if i > a:  # 각 사람들의 입장 시간이 지하철이 떠나는 시간보다 클 경우\n            if (i - a) % (b + a) < a:  # 지하철이 떠나는 시간보다 지하철 도착 시간이 클 경우\n                print('both')  # 지하철이 도착하고 곧 떠나는 상황\n            else:  # 지하철이 도착하고 곧 떠나는 상황이 아닐 경우\n                print('one')  # 지하철이 떠나는 상황\n        else:  # 각 사람들의 입장 시간이 지하철이 떠나는 시간보다 작을 경우\n            print('both')  # 지하철이 도착하고 곧 떠나는 상황\n\n        if i > c:  # 각 사람들의 입장 시간이 버스가 떠나는 시간보다 클 경우\n            if (i - c) % (c + d) < c:  # 버스가 떠나는 시간보다 버스 도착 시간이 클 경우\n                print('both')  # 버스가 도착하고 곧 떠나는 상황\n            else:  # 버스가 도착하고 곧 떠나는 상황이 아닐 경우\n                print('one')  # 버스가 떠나는 상황\n        else:  # 각 사람들의 입장 시간이 버스가 떠나는 시간보다 작을 경우\n            print('both')  # 버스가 도착하고 곧 떠나는 상황\n\n\nif __name__ == '__main__':\n    main()\n", '\nimport os\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    for i in [p, m, g]:\n        if i > a:\n            if (i - a) % (b + a) <= a:\n                print(\'both\', end=" ")\n            else:\n                print(\'one\', end=" ")\n        else:\n            print(\'both\', end=" ")\n\n        if i > c:\n            if (i - c) % (c + d) <= c:\n                print(\'both\', end=" ")\n            else:\n                print(\'one\', end=" ")\n        else:\n            print(\'both\', end=" ")\n\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 07:39:07.269428 size on output set 7
2022-04-13 07:39:07.269448 num operations 2
2022-04-13 07:39:07.269454 size on input set 1
2022-04-13 07:39:14.645392 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n\n    def get_dog_status(time, aggressive, calm): # \uac15\uc544\uc9c0\uc758 \uc0c1\ud0dc\ub97c \uc54c\ub824\uc8fc\ub294 \ud568\uc218\n        if time == 0:\n            return 'aggressive'\n        time -= 1 # aggressive \ub2e8\uacc4\ub97c \uc81c\uc678\ud558\uace0 \uc2dc\uac04\uc744 \ube7c\uc900\ub2e4.\n        if time < aggressive:\n            return 'aggressive'\n        time -= aggressive # calm \ub2e8\uacc4\ub97c \uc81c\uc678\ud558\uace0 \uc2dc\uac04\uc744 \ube7c\uc900\ub2e4.\n        if time < calm:\n            return 'calm'\n        time -= calm # \uac15\uc544\uc9c0\uac00 \ub2e4\uc2dc \uc2dc\uc791\ud558\ub294 \uc2dc\uc810\uc73c\ub85c \uac04\ub2e4.\n        return get_dog_status(time, aggressive, calm)\n\n    def get_dog_attack(time): # \uac15\uc544\uc9c0\uac00 \uacf5\uaca9\ud558\ub294 \uc5ec\ubd80\ub97c \uc54c\ub824\uc8fc\ub294 \ud568\uc218\n        if get_dog_status(time, A, B) == 'aggressive' and get_dog_status(time, C, D) == 'aggressive':\n            return 'both'\n        elif get_dog_status(time, A, B) == 'aggressive' or get_dog_status(time, C, D) == 'aggressive':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n\n    def get_dog_status(time, agressive, calm):\n        if time == 0:\n            return 'aggressive'\n        time -= 1\n        if time < agressive:\n            return 'aggressive'\n        time -= agressive\n        if time < calm:\n            return 'calm'\n        time -= calm\n        return get_dog_status(time, aggressive, calm)\n\n    def get_dog_attack(time):\n        if get_dog_status(time, A, B) == 'agressive' and get_dog_status(time, C, D) == 'agressive':\n            return 'both'\n        elif get_dog_status(time, A, B) == 'agressive' or get_dog_status(time, C, D) == 'agressive':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n\n    def get_dog_status(time, aggressive, calm):\n        if time == 0:\n            return 'aggressive'\n        time -= 1\n        if time < aggressive:\n            return 'aggressive'\n        time -= aggressive\n        if time < calm:\n            return 'calm'\n        time -= calm\n        return get_dog_status(time, aggressive, calm)\n\n    def get_dog_attack(time):\n        if get_dog_status(time, A, B) == 'aggressive' and get_dog_status(time, C, D) == 'aggressive':\n            return 'both'\n        elif get_dog_status(time, A, B) == 'aggressive' or get_dog_status(time, C, D) == 'aggressive':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649835547,
  "object": "edit"
}
2022-04-13 07:39:14.645604 fix spelling mistakes 3 ["\n\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n\n    def get_dog_status(time, aggressive, calm): # 강아지의 상태를 알려주는 함수\n        if time == 0:\n            return 'aggressive'\n        time -= 1 # aggressive 단계를 제외하고 시간을 빼준다.\n        if time < aggressive:\n            return 'aggressive'\n        time -= aggressive # calm 단계를 제외하고 시간을 빼준다.\n        if time < calm:\n            return 'calm'\n        time -= calm # 강아지가 다시 시작하는 시점으로 간다.\n        return get_dog_status(time, aggressive, calm)\n\n    def get_dog_attack(time): # 강아지가 공격하는 여부를 알려주는 함수\n        if get_dog_status(time, A, B) == 'aggressive' and get_dog_status(time, C, D) == 'aggressive':\n            return 'both'\n        elif get_dog_status(time, A, B) == 'aggressive' or get_dog_status(time, C, D) == 'aggressive':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n\n    def get_dog_status(time, agressive, calm):\n        if time == 0:\n            return 'aggressive'\n        time -= 1\n        if time < agressive:\n            return 'aggressive'\n        time -= agressive\n        if time < calm:\n            return 'calm'\n        time -= calm\n        return get_dog_status(time, aggressive, calm)\n\n    def get_dog_attack(time):\n        if get_dog_status(time, A, B) == 'agressive' and get_dog_status(time, C, D) == 'agressive':\n            return 'both'\n        elif get_dog_status(time, A, B) == 'agressive' or get_dog_status(time, C, D) == 'agressive':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n\n    def get_dog_status(time, aggressive, calm):\n        if time == 0:\n            return 'aggressive'\n        time -= 1\n        if time < aggressive:\n            return 'aggressive'\n        time -= aggressive\n        if time < calm:\n            return 'calm'\n        time -= calm\n        return get_dog_status(time, aggressive, calm)\n\n    def get_dog_attack(time):\n        if get_dog_status(time, A, B) == 'aggressive' and get_dog_status(time, C, D) == 'aggressive':\n            return 'both'\n        elif get_dog_status(time, A, B) == 'aggressive' or get_dog_status(time, C, D) == 'aggressive':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 07:39:14.645663 size on output set 3
2022-04-13 07:39:14.645670 size on input set 3
2022-04-13 07:39:23.742935 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n\n    def get_dog_status(time, aggressive, calm, status):\n        if status == 'aggressive':\n            if time == 0:\n                return 'aggressive'\n            time -= 1\n            if time < aggressive:\n                return 'aggressive'\n            time -= aggressive\n            return get_dog_status(time, aggressive, calm, 'calm')\n        else:\n            if time == 0:\n                return 'calm'\n            time -= 1\n            if time < calm:\n                return 'calm'\n            time -= calm\n            return get_dog_status(time, aggressive, calm, 'aggressive')\n\n    def get_dog_attack(time):\n        if get_dog_status(time, A, B, 'aggressive') == 'aggressive' and get_dog_status(time, C, D, 'aggressive') == 'aggressive':\n            return 'both'\n        elif get_dog_status(time, A, B, 'aggressive') == 'aggressive' or get_dog_status(time, C, D, 'aggressive') == 'aggressive':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n\n    def get_dog_status(time, aggressive, calm):\n        if time == 0:\n            return 'A'\n        time -= 1\n        if time < aggressive:\n            return 'A'\n        time -= aggressive\n        if time < calm:\n            return 'C'\n        time -= calm\n        return get_dog_status(time, aggressive, calm)\n\n    def get_dog_attack(time):\n        if get_dog_status(time, A, B) == 'A' and get_dog_status(time, C, D) == 'A':\n            return 'both'\n        elif get_dog_status(time, A, B) == 'A' or get_dog_status(time, C, D) == 'A':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n\n    def get_dog_status(time, aggressive, calm):\n        if time == 0:\n            return 'A'\n        time -= 1\n        if time < aggressive:\n            return 'A'\n        time -= aggressive\n        if time < calm:\n            return 'C'\n        time -= calm\n        return get_dog_status(time, aggressive, calm)\n\n    def get_dog_attack(time):\n        if get_dog_status(time, A, B) == 'A' and get_dog_status(time, C, D) == 'A':\n            return 'both are angry'\n        elif get_dog_status(time, A, B) == 'A' or get_dog_status(time, C, D) == 'A':\n            return 'one is angry'\n        else:\n            return 'none is angry'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649835554,
  "object": "edit"
}
2022-04-13 07:39:23.743247 fix syntax errors 3 ["import sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n\n    def get_dog_status(time, aggressive, calm, status):\n        if status == 'aggressive':\n            if time == 0:\n                return 'aggressive'\n            time -= 1\n            if time < aggressive:\n                return 'aggressive'\n            time -= aggressive\n            return get_dog_status(time, aggressive, calm, 'calm')\n        else:\n            if time == 0:\n                return 'calm'\n            time -= 1\n            if time < calm:\n                return 'calm'\n            time -= calm\n            return get_dog_status(time, aggressive, calm, 'aggressive')\n\n    def get_dog_attack(time):\n        if get_dog_status(time, A, B, 'aggressive') == 'aggressive' and get_dog_status(time, C, D, 'aggressive') == 'aggressive':\n            return 'both'\n        elif get_dog_status(time, A, B, 'aggressive') == 'aggressive' or get_dog_status(time, C, D, 'aggressive') == 'aggressive':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n\n    def get_dog_status(time, aggressive, calm):\n        if time == 0:\n            return 'A'\n        time -= 1\n        if time < aggressive:\n            return 'A'\n        time -= aggressive\n        if time < calm:\n            return 'C'\n        time -= calm\n        return get_dog_status(time, aggressive, calm)\n\n    def get_dog_attack(time):\n        if get_dog_status(time, A, B) == 'A' and get_dog_status(time, C, D) == 'A':\n            return 'both'\n        elif get_dog_status(time, A, B) == 'A' or get_dog_status(time, C, D) == 'A':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n\n    def get_dog_status(time, aggressive, calm):\n        if time == 0:\n            return 'A'\n        time -= 1\n        if time < aggressive:\n            return 'A'\n        time -= aggressive\n        if time < calm:\n            return 'C'\n        time -= calm\n        return get_dog_status(time, aggressive, calm)\n\n    def get_dog_attack(time):\n        if get_dog_status(time, A, B) == 'A' and get_dog_status(time, C, D) == 'A':\n            return 'both are angry'\n        elif get_dog_status(time, A, B) == 'A' or get_dog_status(time, C, D) == 'A':\n            return 'one is angry'\n        else:\n            return 'none is angry'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 07:39:29.579245 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n\n    def get_dog_status(time, agressive, calm):\n        if time == 0:\n            return 'aggressive'\n        time -= 1\n        if time < agressive:\n            return 'aggressive'\n        time -= agressive\n        if time < calm:\n            return 'calm'\n        time -= calm\n        return get_dog_status(time, agressive, calm)\n\n    def get_dog_attack(time):\n        if get_dog_status(time, A, B) == 'aggressive' and get_dog_status(time, C, D) == 'aggressive':\n            return 'both'\n        elif get_dog_status(time, A, B) == 'aggressive' or get_dog_status(time, C, D) == 'aggressive':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n\n    def get_dog_status(time, agressive, calm):\n        if time == 0:\n            return 'aggressive'\n        time -= 1\n        if time < agressive:\n            return 'aggressive'\n        time -= agressive\n        if time < calm:\n            return 'calm'\n        time -= calm\n        return get_dog_status(time, agressive, calm)\n\n    def get_dog_attack(time):\n        if get_dog_status(time, A, B) == 'aggressive' and get_dog_status(time, C, D) == 'aggressive':\n            return 'both'\n        elif get_dog_status(time, A, B) == 'aggressive' or get_dog_status(time, C, D) == 'aggressive':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n\n    def get_dog_status(time, aggressive, calm):\n        if time == 0:\n            return 'aggressive'\n        time -= 1\n        if time < aggressive:\n            return 'aggressive'\n        time -= aggressive\n        if time < calm:\n            return 'calm'\n        time -= calm\n        return get_dog_status(time, aggressive, calm)\n\n    def get_dog_attack(time):\n        if get_dog_status(time, A, B) == 'aggressive' and get_dog_status(time, C, D) == 'aggressive':\n            return 'both'\n        elif get_dog_status(time, A, B) == 'aggressive' or get_dog_status(time, C, D) == 'aggressive':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649835563,
  "object": "edit"
}
2022-04-13 07:39:29.579426 fix syntax errors 3 ["\n\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n\n    def get_dog_status(time, agressive, calm):\n        if time == 0:\n            return 'aggressive'\n        time -= 1\n        if time < agressive:\n            return 'aggressive'\n        time -= agressive\n        if time < calm:\n            return 'calm'\n        time -= calm\n        return get_dog_status(time, agressive, calm)\n\n    def get_dog_attack(time):\n        if get_dog_status(time, A, B) == 'aggressive' and get_dog_status(time, C, D) == 'aggressive':\n            return 'both'\n        elif get_dog_status(time, A, B) == 'aggressive' or get_dog_status(time, C, D) == 'aggressive':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n\n    def get_dog_status(time, agressive, calm):\n        if time == 0:\n            return 'aggressive'\n        time -= 1\n        if time < agressive:\n            return 'aggressive'\n        time -= agressive\n        if time < calm:\n            return 'calm'\n        time -= calm\n        return get_dog_status(time, agressive, calm)\n\n    def get_dog_attack(time):\n        if get_dog_status(time, A, B) == 'aggressive' and get_dog_status(time, C, D) == 'aggressive':\n            return 'both'\n        elif get_dog_status(time, A, B) == 'aggressive' or get_dog_status(time, C, D) == 'aggressive':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n\n    def get_dog_status(time, aggressive, calm):\n        if time == 0:\n            return 'aggressive'\n        time -= 1\n        if time < aggressive:\n            return 'aggressive'\n        time -= aggressive\n        if time < calm:\n            return 'calm'\n        time -= calm\n        return get_dog_status(time, aggressive, calm)\n\n    def get_dog_attack(time):\n        if get_dog_status(time, A, B) == 'aggressive' and get_dog_status(time, C, D) == 'aggressive':\n            return 'both'\n        elif get_dog_status(time, A, B) == 'aggressive' or get_dog_status(time, C, D) == 'aggressive':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 07:39:41.002390 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n\n    def get_dog_status(time, aggressive, calm):\n        if time == 0:\n            return 'aggressive'\n        time -= 1\n        if time < aggressive:\n            return 'aggressive'\n        time -= aggressive\n        if time < calm:\n            return 'calm'\n        time -= calm\n        return get_dog_status(time, aggressive, calm)\n\n    def get_dog_attack(time): # \uac15\uc544\uc9c0\uac00 \uacf5\uaca9\ud558\ub294 \uc5ec\ubd80\ub97c \uc54c\ub824\uc8fc\ub294 \ud568\uc218\n        if get_dog_status(time, A, B) == 'aggressive' and get_dog_status(time, C, D) == 'aggressive':\n            return 'both'\n        elif get_dog_status(time, A, B) == 'aggressive' or get_dog_status(time, C, D) == 'aggressive':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n\n    def get_dog_status(time, aggressive, calm):  # \uac15\uc544\uc9c0\uc758 \uc0c1\ud0dc\ub97c \uc54c\ub824\uc8fc\ub294 \ud568\uc218\n        if time == 0:\n            return 'aggressive'\n        time -= 1  # aggressive \ub2e8\uacc4\ub97c \uc81c\uc678\ud558\uace0 \uc2dc\uac04\uc744 \ube7c\uc900\ub2e4.\n        if time < aggressive:\n            return 'aggressive'\n        time -= aggressive  # calm \ub2e8\uacc4\ub97c \uc81c\uc678\ud558\uace0 \uc2dc\uac04\uc744 \ube7c\uc900\ub2e4.\n        if time < calm:\n            return 'calm'\n        time -= calm  # \uac15\uc544\uc9c0\uac00 \ub2e4\uc2dc \uc2dc\uc791\ud558\ub294 \uc2dc\uc810\uc73c\ub85c \uac04\ub2e4.\n        return get_dog_status(time, aggressive, calm)\n\n    def get_dog_attack(time):  # \uac15\uc544\uc9c0\uac00 \uacf5\uaca9\ud558\ub294 \uc5ec\ubd80\ub97c \uc54c\ub824\uc8fc\ub294 \ud568\uc218\n        if get_dog_status(time, A, B) == 'aggressive' and get_dog_status(time, C, D) == 'aggressive':\n            return 'both'\n        elif get_dog_status(time, A, B) == 'aggressive' or get_dog_status(time, C, D) == 'aggressive':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n\n    def get_dog_status(time, aggressive, calm): # \uac15\uc544\uc9c0\uc758 \uc0c1\ud0dc\ub97c \uc54c\ub824\uc8fc\ub294 \ud568\uc218\n        if time == 0:\n            return 'aggressive'\n        time -= 1 # aggressive \ub2e8\uacc4\ub97c \uc81c\uc678\ud558\uace0 \uc2dc\uac04\uc744 \ube7c\uc900\ub2e4.\n        if time < aggressive:\n            return 'aggressive'\n        time -= aggressive # calm \ub2e8\uacc4\ub97c \uc81c\uc678\ud558\uace0 \uc2dc\uac04\uc744 \ube7c\uc900\ub2e4.\n        if time < calm:\n            return 'calm'\n        time -= calm # \uac15\uc544\uc9c0\uac00 \ub2e4\uc2dc \uc2dc\uc791\ud558\ub294 \uc2dc\uc810\uc73c\ub85c \uac04\ub2e4.\n        return get_dog_status(time, aggressive, calm)\n\n    def get_dog_attack(time): # \uac15\uc544\uc9c0\uac00 \uacf5\uaca9\ud558\ub294 \uc5ec\ubd80\ub97c \uc54c\ub824\uc8fc\ub294 \ud568\uc218\n        if get_dog_status(time, A, B) == 'aggressive' and get_dog_status(time, C, D) == 'aggressive':\n            return 'both'\n        elif get_dog_status(time, A, B) == 'aggressive' or get_dog_status(time, C, D) == 'aggressive':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649835569,
  "object": "edit"
}
2022-04-13 07:39:41.002580 fix syntax errors 3 ["\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n\n    def get_dog_status(time, aggressive, calm):\n        if time == 0:\n            return 'aggressive'\n        time -= 1\n        if time < aggressive:\n            return 'aggressive'\n        time -= aggressive\n        if time < calm:\n            return 'calm'\n        time -= calm\n        return get_dog_status(time, aggressive, calm)\n\n    def get_dog_attack(time): # 강아지가 공격하는 여부를 알려주는 함수\n        if get_dog_status(time, A, B) == 'aggressive' and get_dog_status(time, C, D) == 'aggressive':\n            return 'both'\n        elif get_dog_status(time, A, B) == 'aggressive' or get_dog_status(time, C, D) == 'aggressive':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n\n    def get_dog_status(time, aggressive, calm):  # 강아지의 상태를 알려주는 함수\n        if time == 0:\n            return 'aggressive'\n        time -= 1  # aggressive 단계를 제외하고 시간을 빼준다.\n        if time < aggressive:\n            return 'aggressive'\n        time -= aggressive  # calm 단계를 제외하고 시간을 빼준다.\n        if time < calm:\n            return 'calm'\n        time -= calm  # 강아지가 다시 시작하는 시점으로 간다.\n        return get_dog_status(time, aggressive, calm)\n\n    def get_dog_attack(time):  # 강아지가 공격하는 여부를 알려주는 함수\n        if get_dog_status(time, A, B) == 'aggressive' and get_dog_status(time, C, D) == 'aggressive':\n            return 'both'\n        elif get_dog_status(time, A, B) == 'aggressive' or get_dog_status(time, C, D) == 'aggressive':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n\n    def get_dog_status(time, aggressive, calm): # 강아지의 상태를 알려주는 함수\n        if time == 0:\n            return 'aggressive'\n        time -= 1 # aggressive 단계를 제외하고 시간을 빼준다.\n        if time < aggressive:\n            return 'aggressive'\n        time -= aggressive # calm 단계를 제외하고 시간을 빼준다.\n        if time < calm:\n            return 'calm'\n        time -= calm # 강아지가 다시 시작하는 시점으로 간다.\n        return get_dog_status(time, aggressive, calm)\n\n    def get_dog_attack(time): # 강아지가 공격하는 여부를 알려주는 함수\n        if get_dog_status(time, A, B) == 'aggressive' and get_dog_status(time, C, D) == 'aggressive':\n            return 'both'\n        elif get_dog_status(time, A, B) == 'aggressive' or get_dog_status(time, C, D) == 'aggressive':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 07:39:41.002641 size on output set 8
