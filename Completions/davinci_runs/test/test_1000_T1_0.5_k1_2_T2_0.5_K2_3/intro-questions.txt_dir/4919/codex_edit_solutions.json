["# SOLUTION\nn = int(input())\nd = {}\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k - 1])\n", "\n# input\nfrom collections import defaultdict\n\nn = int(input())\ntrips = defaultdict(list)\n\nfor _ in range(n):\n    c, y = input().split()\n    trips[c].append(int(y))\n\nq = int(input())\n\nfor _ in range(q):\n    c, k = input().split()\n    print(trips[c][int(k) - 1])\n", "#!/usr/bin/env python\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    trips = {}\n    for _ in range(n):\n        country, year = sys.stdin.readline().split()[:2]\n        if country in trips:\n            trips[country].append(year)\n        else:\n            trips[country] = [year]\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        country, k = sys.stdin.readline().split()[:2]\n        print(trips[country][int(k) - 1])\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\nfrom collections import defaultdict, Counter\n\ndef main():\n    n = int(input())  # number of trips\n    trips = defaultdict(list)  # dictionary of trips\n\n    for _ in range(n):\n        c, y = input().split()\n        trips[c].append(int(y))\n\nq = int(input())\n\nfor _ in range(q):\n    c, k = input().split()\n    print(trips[c][int(k) - 1])\n", "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n    map<string, vector<string>> trips;\n    for (int i = 0; i < n; i++) {\n        string country, year;\n        cin >> country >> year;\n        trips[country].push_back(year);\n    }\n    int q;\n    cin >> q;\n    for (int i = 0; i < q; i++) {\n        string country;\n        int k;\n        cin >> country >> k;\n        cout << trips[country][k - 1] << endl;\n    }\n    return 0;\n}\n", "\n\n# # SOLUTION:\n# n = int(input())\n# d = {}\n# for _ in range(n):\n#     country, year = input().split()\n#     year = int(year)\n#     if country in d:\n#         d[country].append(year)\n#     else:\n#         d[country] = [year]\n#\n# q = int(input())\n# for _ in range(q):\n#     country, k = input().split()\n#     k = int(k)\n#     print(sorted(d[country])[k-1])\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    trips = []\n    for _ in range(n):\n        country, year = sys.stdin.readline().split()[:2]\n        trips.append((country, year))\n    trips.sort()\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        country, k = sys.stdin.readline().split()\n        k = int(k)\n        i = 0\n        while k > 0:\n            if trips[i][0] == country:\n                k -= 1\n            i += 1\n        print(trips[i-1][1])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# SOLUTION 1:\n\n# n = int(input())\n\n# d = {}\n\n# for i in range(n):\n#     country, year = input().split()\n#     year = int(year)\n#     if country not in d:\n#         d[country] = []\n#     d[country].append(year)\n\n# q = int(input())\n\n# for i in range(q):\n#     country, k = input().split()\n#     k = int(k)\n#     print(d[country][k-1])\n", "\n\n# SOLUTION\nn = int(input())\nd = {}\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k-1])\n", "#!/usr/bin/env python3\n\nn = int(input())\n\ntrips = {}\nfor i in range(n):\n    country, year = input().split()\n    if country in trips:\n        trips[country].append(int(year))\n    else:\n        trips[country] = [int(year)]\n\nq = int(input())\nfor i in range(q):\n    country, k = input().split()\n    if int(k) > len(trips[country]):\n        print(-1)\n    else:\n        print(sorted(trips[country])[int(k)-1])\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Tue Sep  1 14:45:34 2020\n\n@author: cpprhtn\n\"\"\"\n\n'''\n\ubb38\uc81c: \n    \ucc38\uac00\uc790\ub294 \uac01 \ud300\uc758 \ucd5c\uadfc 5\uacbd\uae30\uc758 \uc2b9/\ud328 \uc5ec\ubd80\ub97c \uc54c\uace0 \uc788\ub2e4. \n    \uc774 \uacb0\uacfc\ub97c \ubc14\ud0d5\uc73c\ub85c \uac01 \ud300\uc758 \uc2b9\ub960\uc744 \uacc4\uc0b0\ud558\uace0, \n    \uc2b9\ub960\uc774 \ub192\uc740 \ud300\uc774 \ub354 \ub9ce\uc740 \uc2b9\uc810\uc744 \uac00\uc9c8 \uac83\uc774\ub77c\uace0 \uc608\uc0c1\ud558\ub294 \ud300\uc744 \ucd9c\ub825\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\ub77c.\n    \n\uc785\ub825: \n    5\n    WLLWW\n    LWWWW\n    WWLWW\n    LLLLL\n    WLLLL\n\n\ucd9c\ub825: \n    3 3\n'''\n\nn = int(input()) #\ud300 \uc218\n\nwins = [0] * n\nfor i in range(n):\n    matches = input()\n    for match in matches:\n        if match == 'W':\n            wins[i] += 1\n\nprint(wins.count(max(wins)), wins.count(min(wins)))\n", "from collections import defaultdict\n\nn = int(input())\ntrip = defaultdict(list)\n\nfor _ in range(n):\n    c, y = input().split()\n    trip[c].append(int(y))\n\nq = int(input())\n\nfor _ in range(q):\n    c, k = input().split()\n    print(trip[c][int(k)-1])\n", "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    int **trips = (int **)malloc(n * sizeof(int *));\n    int *trip_counts = (int *)calloc(n, sizeof(int));\n    char **trip_names = (char **)malloc(n * sizeof(char *));\n    for (int i = 0; i < n; i++) {\n        char *country = (char *)malloc(101 * sizeof(char));\n        int year;\n        scanf(\"%s %d\", country, &year);\n        int j;\n        for (j = 0; j < i; j++) {\n            if (strcmp(trip_names[j], country) == 0) {\n                break;\n            }\n        }\n        if (j == i) {\n            trip_names[j] = country;\n            trips[j] = (int *)malloc(sizeof(int));\n            trip_counts[j] = 1;\n        } else {\n            trips[j] = (int *)realloc(trips[j], (trip_counts[j] + 1) * sizeof(int));\n            trip_counts[j]++;\n        }\n        trips[j][trip_counts[j] - 1] = year;\n    }\n    int q;\n    scanf(\"%d\", &q);\n    for (int i = 0; i < q; i++) {\n        char *country = (char *)malloc(101 * sizeof(char));\n        int k;\n        scanf(\"%s %d\", country, &k);\n        int j;\n        for (j = 0; j < n; j++) {\n            if (strcmp(trip_names[j], country) == 0) {\n                break;\n            }\n        }\n        printf(\"%d\\n\", trips[j][k - 1]);\n    }\n    for (int i = 0; i < n; i++) {\n        free(trips[i]);\n        free(trip_names[i]);\n    }\n    free(trips);\n    free(trip_names);\n    free(trip_counts);\n\n    return 0;\n}\n", "n = int(input()) # number of trips\n\ntrips = {} # dictionary of trips\nfor i in range(n):\n    country, year = input().split()\n    if country in trips:\n        trips[country].append(int(year))\n    else:\n        trips[country] = [int(year)]\n\nq = int(input()) # number of queries\nfor i in range(q):\n    country, k = input().split()\n    print(sorted(trips[country])[int(k)-1]) # print the kth year of the country\n", "\nn = int(input())\nd = {}\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k-1])\n", "\nn = int(input())\nd = dict()\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k-1])\n", "\n\n# \u041f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430 \u0441\u043b\u043e\u0432\u0430\u0440\u044f \u0440\u0435\u0448\u0438\u0442\u0435 \u0437\u0430\u0434\u0430\u0447\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0433\u043e\u0434\u043e\u0432 \u0432\u044b\u043f\u0443\u0441\u043a\u0430 \u043a\u043d\u0438\u0433. \n# \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u043d\u0443\u0436\u043d\u043e \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0433\u043e\u0434\u043e\u0432 \u0432\u044b\u043f\u0443\u0441\u043a\u0430. \u041f\u0440\u0438 \u0432\u0432\u043e\u0434\u0435 \u043d\u043e\u0432\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u0435\u0441\u0442\u044c \u043b\u0438 \u043e\u043d\u0430 \u0443\u0436\u0435 \u0432 \u0431\u0430\u0437\u0435. \n# \u0415\u0441\u043b\u0438 \u043d\u0435\u0442, \u0442\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0435\u0435 \u0432 \u0431\u0430\u0437\u0443 \u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0433\u043e\u0434 \u0432\u044b\u043f\u0443\u0441\u043a\u0430. \u0415\u0441\u043b\u0438 \u043a\u043d\u0438\u0433\u0430 \u0443\u0436\u0435 \u0435\u0441\u0442\u044c, \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u0433\u043e\u0434 \u0432\u044b\u043f\u0443\u0441\u043a\u0430 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0433\u043e\u0434\u043e\u0432 \u0432\u044b\u043f\u0443\u0441\u043a\u0430. \n# \u0417\u0430\u0442\u0435\u043c \u043f\u0440\u0438 \u0432\u0432\u043e\u0434\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043a\u043d\u0438\u0433\u0438 \u0438 \u043d\u043e\u043c\u0435\u0440\u0430 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0433\u043e\u0434\u043e\u0432 \u0432\u044b\u043f\u0443\u0441\u043a\u0430 \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0443\u0436\u043d\u044b\u0439 \u0433\u043e\u0434 \u0432\u044b\u043f\u0443\u0441\u043a\u0430.\n\n# SOLUTION\n\nn = int(input())\n\nd = {}\n\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country not in d:\n        d[country] = []\n    d[country].append(year)\n\nq = int(input())\n\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(d[country][k-1])\n", "#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the timeConversion function below.\n#\ndef timeConversion(s):\n    #\n    # Write your code here.\n    #\n\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = timeConversion(s)\n\n    f.write(result + '\\n')\n\n    f.close()\n", "n = int(input())  # number of lines\ntrips = {}  # dictionary\nfor i in range(n):\n    country, year = input().split()  # input country and year\n    if country in trips:\n        trips[country].append(int(year))  # add year to country list\n    else:\n        trips[country] = [int(year)]  # create country and year list\n\nq = int(input())  # number of lines\nfor i in range(q):\n    country, k = input().split()  # input country and k\n    print(sorted(trips[country])[int(k)-1])  # print kth year\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    trips = dict()\n    for _ in range(n):\n        country, year = sys.stdin.readline().split()[:2]\n        if country in trips:\n            trips[country].append(int(year))\n        else:\n            trips[country] = [int(year)]\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        country, k = sys.stdin.readline().split()[:2]\n        print(trips[country][int(k)-1])\n\nif __name__ == \"__main__\":\n    main()\n", "print(\"hello world!\")\n", "\n\nn = int(input())\ntrips = []\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    trips.append((country, year))\n\nq = int(input())\nqueries = []\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    queries.append((country, k))\n\nfor query in queries:\n    country, k = query\n    trips_to_country = [trip for trip in trips if trip[0] == country]\n    trips_to_country.sort(key=lambda t: t[1], reverse=True)\n    print(trips_to_country[k - 1][1])\n", "#input\nfrom collections import defaultdict\nimport sys\n\nn = int(sys.stdin.readline())\ntrips = defaultdict(list)\n\nfor _ in range(n):\n    c, y = sys.stdin.readline().split()\n    trips[c].append(int(y))\n\nq = int(sys.stdin.readline())\n\nfor _ in range(q):\n    c, k = sys.stdin.readline().split()\n    print(trips[c][int(k) - 1])\n", "\nn = int(input())\nd = {}\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k - 1])\n", "#!/usr/bin/env python\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    trips = {}\n    for _ in range(n):\n        country, year = sys.stdin.readline().strip().split()\n        if country in trips:\n            trips[country].append(year)\n        else:\n            trips[country] = [year]\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        country, k = sys.stdin.readline().strip().split()\n        print(trips[country][int(k) - 1])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nn = int(input())\nd = dict()\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n        \nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k - 1])\n", "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    trips = {}\n    for _ in range(n):\n        country, year = sys.stdin.readline().split()\n        if country in trips:\n            trips[country].append(year)\n        else:\n            trips[country] = [year]\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        country, k = sys.stdin.readline().split()\n        print(trips[country][int(k) - 1]) \n\nif __name__ == \"__main__\":\n    main()\n", "\n\nn = int(input())\n\nd = {}\n\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country not in d:\n        d[country] = []\n    d[country].append(year)\n\nq = int(input())\n\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(d[country][k-1])\n", "\n\nn = int(input())\nd = dict()\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k-1])\n", "\ndef find_max(l):\n    max_val = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_val:\n            max_val = l[i]\n    return max_val\n\n\ndef find_min(l):\n    min_val = l[0]\n    for i in range(1, len(l)):\n        if l[i] < min_val:\n            min_val = l[i]\n    return min_val\n\n\ndef find_avg(l):\n    sum_val = 0\n    for i in range(len(l)):\n        sum_val += l[i]\n    return sum_val / len(l)\n\n\ndef find_sum(l):\n    sum_val = 0\n    for i in range(len(l)):\n        sum_val += l[i]\n    return sum_val\n\n\ndef find_median(l):\n    copy = sorted(l)\n    if len(copy) % 2 == 0:\n        median = (copy[len(copy) // 2] + copy[(len(copy) // 2) - 1]) / 2\n    else:\n        median = copy[len(copy) // 2]\n    return median\n\n\nif __name__ == '__main__':\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(find_max(l))\n    print(find_min(l))\n    print(find_avg(l))\n    print(find_sum(l))\n    print(find_median(l))\n", "n = int(input())  # number of lines\n\ntrips = {}  # dictionary\nfor i in range(n):\n    country, year = input().split()  # input country and year\n    if country in trips:\n        trips[country].append(int(year))  # add year to country list\n    else:\n        trips[country] = [int(year)]  # create country and year list\n\nq = int(input())  # number of lines\nfor i in range(q):\n    country, k = input().split()  # input country and k\n    print(sorted(trips[country])[int(k)-1])  # print kth year\n", "n = int(input())\n\ntrips = {}\nfor i in range(n):\n    country, year = input().split()\n    if country in trips:\n        trips[country].append(int(year))\n    else:\n        trips[country] = [int(year)]\n\nq = int(input())\nfor i in range(q):\n    country, k = input().split()\n    print(sorted(trips[country])[int(k)-1])\n\n# def get_countries(n, trips):\n#     for i in range(n):\n#         country, year = input().split()\n#         if country in trips:\n#             trips[country].append(int(year))\n#         else:\n#             trips[country] = [int(year)]\n\n# def get_queries(q, trips):\n#     for i in range(q):\n#         country, k = input().split()\n#         print(sorted(trips[country])[int(k)-1])\n\n# if __name__ == '__main__':\n#     trips = {}\n#     n = int(input())\n#     get_countries(n, trips)\n#     q = int(input())\n#     get_queries(q, trips)\n", "n = int(input())\ntrips = []\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    trips.append((country, year))\n\nq = int(input())\nqueries = []\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    queries.append((country, k))\n\nfor query in queries:\n    country, k = query\n    trips_to_country = [trip for trip in trips if trip[0] == country]\n    trips_to_country.sort(key=lambda t: t[1], reverse=True)\n    if k <= len(trips_to_country):\n        print(trips_to_country[k - 1][1])\n    else:\n        print('-1')\n", "from collections import defaultdict\n\nn = int(input())\ntrips = defaultdict(list)\n\nfor _ in range(n):\n    c, y = input().split(' ')\n    trips[c].append(int(y))\n\nq = int(input())\n\nfor _ in range(q):\n    c, k = input().split(' ')\n    print(trips[c][int(k) - 1])\n", "\n\nfrom collections import defaultdict, Counter\n\nn = int(input())  # number of trips\ntrips = defaultdict(list)  # dictionary of trips\n\nfor _ in range(n):\n    c, y = input().split()\n    trips[c].append(int(y))\n\nq = int(input())\n\nfor _ in range(q):\n    c, k = input().split()\n    print(trips[c][int(k) - 1]) \n", "\n\nn = int(input())\nd = dict()\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\nprint()\n    print(sorted(d[country])[k - 1])\n", "# SOLUTION\nn = int(input())\nd = {}\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k-1])\n", "\n\n# SOLUTION\n\nn = int(input())\n\nd = {}\n\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country not in d:\n        d[country] = []\n    d[country].append(year)\n\nq = int(input())\n\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(d[country][k-1])\n", "print(\"hello world\"\n", "\nfrom collections import defaultdict\n\nn = int(raw_input())\ntrips = defaultdict(list)\n\nfor _ in range(n):\n    c, y = input().split()\n    trips[c].append(int(y))\n\nq = int(raw_input())\n\nfor _ in range(q):\n    c, k = input().split()\n    print(trips[c][int(k) - 1])\n", "\n# SOLUTION \nn = int(input())\nd = {}\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k-1])\n", "\nn = int(input())\ntrips = []\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    trips.append((country, year))\n\nq = int(input())\nqueries = []\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    queries.append((country, k))\n\nfor query in queries:\n    country, k = query\n    trips_to_country = [trip for trip in trips if trip[0] == country]\n    trips_to_country.sort(key=lambda t: t[1], reverse=True)\n    if k <= len(trips_to_country):\n        print(trips_to_country[k - 1][1])\n    else:\n        print('-1')\n", "\nn = int(input())\nfor _ in range(n):\n    a, b = input().split()\n    print(int(a) + int(b))\n", "#!/usr/bin/env python3\n\nfrom operator import itemgetter\n# SOLUTION:\nn = int(input())\nd = {}\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k-1]) #sorted(d.items(), key=itemgetter(1))\n", "\n# SOLUTION \nn = int(input())\nd = {}\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k-1])\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    trips = {}\n    for _ in range(n):\n        country, year = sys.stdin.readline().split()[:2]\n        if country in trips:\n            trips[country].append(int(year))\n        else:\n            trips[country] = [int(year)]\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        country, k = sys.stdin.readline().split()[:2]\n        if country in trips:\n            print(trips[country][int(k)-1])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# \u041f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430 \u0441\u043b\u043e\u0432\u0430\u0440\u044f \u0440\u0435\u0448\u0438\u0442\u0435 \u0437\u0430\u0434\u0430\u0447\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0433\u043e\u0434\u043e\u0432 \u0432\u044b\u043f\u0443\u0441\u043a\u0430 \u043a\u043d\u0438\u0433. \n# \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u043d\u0443\u0436\u043d\u043e \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0433\u043e\u0434\u043e\u0432 \u0432\u044b\u043f\u0443\u0441\u043a\u0430. \u041f\u0440\u0438 \u0432\u0432\u043e\u0434\u0435 \u043d\u043e\u0432\u043e\u0439 \u043a\u043d\u0438\u0433\u0438 \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u0435\u0441\u0442\u044c \u043b\u0438 \u043e\u043d\u0430 \u0443\u0436\u0435 \u0432 \u0431\u0430\u0437\u0435. \u0415\u0441\u043b\u0438 \u043d\u0435\u0442, \u0442\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0435\u0435 \u0432 \u0431\u0430\u0437\u0443 \u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0433\u043e\u0434 \u0432\u044b\u043f\u0443\u0441\u043a\u0430. \n# \u0415\u0441\u043b\u0438 \u043a\u043d\u0438\u0433\u0430 \u0443\u0436\u0435 \u0435\u0441\u0442\u044c, \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u0433\u043e\u0434 \u0432\u044b\u043f\u0443\u0441\u043a\u0430 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0433\u043e\u0434\u043e\u0432 \u0432\u044b\u043f\u0443\u0441\u043a\u0430. \u0417\u0430\u0442\u0435\u043c \u043f\u0440\u0438 \u0432\u0432\u043e\u0434\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043a\u043d\u0438\u0433\u0438 \u0438 \u043d\u043e\u043c\u0435\u0440\u0430 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0433\u043e\u0434\u043e\u0432 \u0432\u044b\u043f\u0443\u0441\u043a\u0430 \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0443\u0436\u043d\u044b\u0439 \u0433\u043e\u0434 \u0432\u044b\u043f\u0443\u0441\u043a\u0430.\n\n# SOLUTION\n\nn = int(input())\n\nd = {}\n\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country not in d:\n        d[country] = []\n    d[country].append(year)\n\nq = int(input())\n\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(d[country][k-1])\n"]