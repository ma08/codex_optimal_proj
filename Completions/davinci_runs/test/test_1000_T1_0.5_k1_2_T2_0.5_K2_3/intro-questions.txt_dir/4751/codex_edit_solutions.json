["\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n", "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head is None:\n            return False\n\n        slow = head\n        fast = head.next\n\n        while fast is not None and fast.next is not None:\n            if fast == slow:\n                return True\n\n            if fast.next is None:\n                return False\n\n            slow = slow.next\n            fast = fast.next.next\n\n        return False\n", "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head is None or head.next is None:\n            return False\n\n        slow = head\n        fast = head.next\n\n        while fast is not None:\n            if fast == slow:\n                return True\n\n            if fast.next is None:\n                return False\n\n            slow = slow.next\n            fast = fast.next.next\n\n        return False\n", "# comment\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n", "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n\n# Definition for singly-linked list\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n", "# -*- coding: utf-8 -*-\n\"\"\"\nAlgorithm:\n1. Create 2 pointers: fast and slow\n2. If fast and slow meet at same node, return True\n3. If fast and slow don't meet, return False\n\nT: O(n), S: O(1)\n\"\"\"\n\n\"\"\"\n@param {ListNode} head: head of linked list\n@return {boolean}: True if there is a cycle, False otherwise\n\"\"\"\ndef hasCycle(head):\n    if head is None:\n        return False\n\n    fast = head.next\n    slow = head.next\n\n    while fast is not None and fast.next is not None and slow is not None:\n        if fast == slow:\n            return True\n        fast = fast.next.next\n        slow = slow.next\n\n    return False\n", "\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n", "\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head is None:\n            return False\n\n        fast = head\n        slow = head\n\n        while fast is not None and fast.next is not None:\n            fast = fast.next.next\n            slow = slow.next\n            if fast == slow:\n                return True\n\n        return False\n", "# Definition for singly-linked list.\n\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow, fast = head, head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow, fast = slow.next, fast.next.next\n        return True\n", "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next: return False\n        slow, fast = head, head.next\n        while slow != fast: \n            if not fast or not fast.next: return False\n            slow, fast = slow.next, fast.next.next\n        return True \n", "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head is None or head.next is None:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if fast is None or fast.next is None:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n", "#!/usr/bin/env python\n\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n#\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n", "\"\"\"\nAlgorithm:\n1. Create 2 pointers: fast and slow\n2. If fast and slow meet at same node, return True\n3. If fast and slow don't meet, return False\n\nT: O(n), S: O(1)\n\"\"\"\n\n\"\"\"\n@param {ListNode} head\n@return {boolean}\n\"\"\"\ndef hasCycle(head):\n    if head == None:\n        return False\n\n    fast = head.next\n    slow = head\n\n    while fast != None and fast.next != None and slow != None:\n        if fast == slow: # check fast and slow\n            return True\n        fast = fast.next.next\n        slow = slow.next\n\n    return False\n", "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head is None or head.next is None:\n            return False\n\n        slow = head\n        fast = head.next\n\n        while fast is not None:\n            if fast == slow:\n                return True\n\n            if fast.next is None:\n                return False\n\n            slow = slow.next\n            fast = fast.next.next\n\n        return False\n", "\n\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n", "\n\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n\n        return True\n", "# comment\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n", "\n\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n", "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next: return False\n        slow, fast = head, head.next\n        while slow != fast: \n            if not fast or not fast.next: return False\n            slow, fast = slow.next, fast.next.next\n        return True \n", "\n\"\"\"\nAlgorithm:\n1. Create 2 pointers: fast and slow \n2. If fast and slow meet at same node, return True\n3. If fast and slow don't meet, return False\n\nT: O(n), S: O(1)\n\"\"\"\n\n\"\"\"\n@param {ListNode} head\n@return {boolean}\n\"\"\"\ndef hasCycle(head):\n    if head == None:\n        return False\n\n    fast = head.next\n    slow = head\n\n    while fast != None and fast.next != None:\n        if fast == slow:\n            return True\n        fast = fast.next.next\n        slow = slow.next\n\n    return False\n", "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head is None:\n            return False\n\n        slow = head\n        fast = head.next\n\n        while fast is not None:\n            if fast == slow:\n                return True\n\n            if fast.next is None:\n                return False\n\n            slow = slow.next\n            fast = fast.next.next\n\n        return False\n", "class Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head is None:\n            return False\n\n        slow = head\n        fast = head.next\n\n        while fast is not None:\n            if fast == slow:\n                return True\n\n            if fast.next is None:\n                return False\n\n            slow = slow.next\n            fast = fast.next.next\n\n        return False\n", "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head is None:\n            return False\n\n        slow = head\n        fast = head.next\n\n        while fast is not None:\n            if fast == slow:\n                return True\n\n            if fast.next is None:\n                return False\n\n            slow = slow.next\n            fast = fast.next.next\n\n        return False\n", "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head):\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n", "\n# Definition for singly-linked list\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head == None:\n            return False\n        slow = head\n        fast = head.next\n        while fast != None and fast.next != None:\n            if fast == slow:\n                return True\n            fast = fast.next.next\n            slow = slow.next\n        return False\n", "\"\"\"\nAlgorithm:\n1. Create 2 pointers: fast and slow\n2. If fast and slow meet at same node, return True\n3. If fast and slow don't meet, return False\n\nT: O(n), S: O(1)\n\"\"\"\n\n\"\"\"\n@param {ListNode} head\n@return {boolean}\n\"\"\"\ndef hasCycle(head):\n    if head is None:\n        return False\n\n    fast = head.next\n    slow = head\n\n    while fast != None and fast.next != None and slow != None:\n        if fast == slow:\n            return True\n        fast = fast.next.next\n        slow = slow.next\n\n    return False\n", "\"\"\"\nAlgorithm:\n1. Create 2 pointers: fast and slow\n2. If fast and slow meet at same node, return True\n3. If fast and slow don't meet, return False\n\nT: O(n), S: O(1)\n\"\"\"\n\n\"\"\"\n@param head {ListNode}\n@return {boolean} result\n\"\"\"\ndef hasCycle(head):\n    if head == None:\n        return False\n\n    fast = head.next\n    slow = head\n\n    while fast != None and fast.next != None and slow != None:\n        if fast == slow:\n            return True\n        fast = fast.next.next\n        slow = slow.next\n\n    return False\n", "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n", "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n", "#https://leetcode.com/problems/linked-list-cycle/\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head is None:\n            return False\n        slow = head\n        fast = head.next\n        while fast is not None and fast.next is not None:\n            if fast == slow:\n                return True\n            fast = fast.next.next\n            slow = slow.next\n        return False\n", "\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow, fast = head, head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n", "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\n\"\"\"\nAlgorithm:\n1. Create 2 pointers: fast and slow \n2. If fast and slow meet at same node, return True\n3. If fast and slow don't meet, return False\n\nT: O(n), S: O(1)\n\"\"\"\n\n\"\"\"\n@param {ListNode} head\n@return {boolean}\n\"\"\"\ndef hasCycle(head):\n    if head is None:\n        return False\n\n    fast = head.next\n    slow = head\n\n    while fast is not None and fast.next is not None and slow is not None:\n        if fast == slow:\n            return True\n        fast = fast.next.next\n        slow = slow.next\n\n    return False\n", "class Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head is None:\n            return False\n\n        fast = head\n        slow = head\n\n        while fast is not None and fast.next is not None:\n            fast = fast.next.next\n            slow = slow.next\n            if fast == slow:\n                return True\n\n        return False\n", "#!/usr/bin/python3\n# -*- coding: utf-8 -*-\n# @Time    : 2019/12/13\n# @Author  : Leslee\n\n# Definition for singly-linked list\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n", "\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head is None:\n            return False\n        slow = head\n        fast = head.next\n        while fast is not None and fast.next is not None:\n            if fast == slow:\n                return True\n            fast = fast.next.next\n            slow = slow.next\n        return False\n", "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if not head:\n            return False\n\n        slow = head\n        fast = head.next\n\n        while fast:\n            if fast == slow:\n                return True\n\n            if not fast.next:\n                return False\n\n            slow = slow.next\n            fast = fast.next.next\n\n        return False\n", "\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n\n\n\n\n\n\n", "\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head is None:\n            return False\n        slow = head\n        fast = head.next\n        while fast and fast.next:\n            if fast == slow:\n                return True\n            fast = fast.next.next\n            slow = slow.next\n        return False\n", "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head == None:\n            return False\n\n        fast = head\n        slow = head\n\n        while fast != None and fast.next != None:\n            fast = fast.next.next\n            slow = slow.next\n            if fast == slow:\n                return True\n\n        return False\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head == None:\n            return False\n\n        fast = head\n        slow = head\n\n        while fast != None and fast.next != None:\n            fast = fast.next.next\n            slow = slow.next\n            if fast == slow:\n                return True\n\n        return False\n", "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head or not head.next:\n            return False\n        slow = head\n        fast = head.next\n        while slow != fast:\n            if not fast or not fast.next:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n\n\n\n\n\n\n", "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head is None or head.next is None:\n            return False\n\n        slow = head.next\n        fast = head.next.next\n\n        while fast is not None and fast.next is not None:\n            if fast == slow:\n                return True\n\n            slow = slow.next\n            fast = fast.next.next\n\n        return False\n", "# -*- coding: utf-8 -*-\n\"\"\"\nAlgorithm:\n1. Create 2 pointers: fast and slow\n2. If fast and slow meet at same node, return True\n3. If fast and slow don't meet, return False\n\nT: O(n), S: O(1)\n\"\"\"\n\n\"\"\"\n@param {ListNode} head: head of linked list\n@return {boolean}: True if there is a cycle, False otherwise\n\"\"\"\ndef hasCycle(head):\n    if head is None:\n        return False\n\n    fast = head.next\n    slow = head\n\n    while fast is not None and fast.next is not None:\n        if fast == slow:\n            return True\n        fast = fast.next.next\n        slow = slow.next\n\n    return False\n", "\n# Definition for singly-linked list\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n", "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head is None:\n            return False\n        slow = head\n        fast = head.next\n        while slow is not fast:\n            if fast is None or fast.next is None:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n", "class Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        if not nums:\n            return None\n        maxSum = float('-inf')\n        currentSum = 0\n        for num in nums:\n            currentSum += num\n            maxSum = max(maxSum, currentSum)\n            currentSum = max(currentSum, 0)\n        return maxSum\n\n# class Solution:\n#     def maxSubArray(self, nums: List[int]) -> int:\n#         if not nums:\n#             return None\n#         maxSum = float('-inf')\n#         currentSum = 0\n#         for num in nums:\n#             currentSum += num\n#             maxSum = max(maxSum, currentSum)\n#             currentSum = max(currentSum, 0)\n#         return maxSum\n", "\n# Definition for singly-linked list\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n\n        self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if head == None:\n            return False\n        slow = head\n        fast = head.next\n        while fast != None and fast.next != None:\n            if fast == slow:\n                return True\n            fast = fast.next.next\n            slow = slow.next\n        return False\n", "# leetcode 141\n\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n", "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head == None:\n            return False\n\n        fast = head\n        slow = head\n\n        while fast != None and fast.next != None:\n            fast = fast.next.next\n            slow = slow.next\n            if fast == slow:\n                return True\n\n        return False\n", "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode):\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n", "\n# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n\n        if head is None:\n            return False\n\n        slow = head\n        fast = head.next\n\n        while fast is not None and fast.next is not None:\n            if fast == slow:\n                return True\n\n            slow = slow.next\n            fast = fast.next.next\n\n        return False\n", "\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head == None:\n            return False\n\n        fast = head\n        slow = head\n\n        while fast != None and fast.next != None:\n            fast = fast.next.next\n            slow = slow.next\n            if fast == slow:\n                return True\n\n        return False\n", "# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        if not head:\n            return False\n        slow = head\n        fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n", "\n# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\n#\nclass Solution:\n    def hasCycle(self, head: ListNode) -> bool:\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n            else:\n                return False\n            slow = slow.next\n            fast = fast.next.next\n        return True\n", "\n\"\"\"\nAlgorithm:\n\n1. Create 2 pointers: fast and slow \n2. If fast and slow meet at same node, return True\n3. If fast and slow don't meet, return False\n\nT: O(n), S: O(1)\n\"\"\"\n\n\"\"\"\n@param {ListNode} head\n@return {boolean}\n\"\"\"\ndef hasCycle(head):\n    if head == None:\n        return False\n\n    fast = head.next\n    slow = head\n\n    while fast != None and fast.next != None and slow != None:\n        if fast == slow:\n            return True\n        fast = fast.next.next\n        slow = slow.next\n\n    return False\n"]