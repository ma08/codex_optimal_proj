2022-04-13 06:45:25.302594 num operations 2
2022-04-13 06:45:25.302603 size on input set 1
2022-04-13 06:45:33.125882 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#Solution: \n\na,b,c = input().split()\na,b,c = int(a),int(b),int(c)\nif a+b==c:\n    print(str(a)+\"+\"+str(b)+\"=\"+str(c))\nelif a-b==c:\n    print(str(a)+\"-\"+str(b)+\"=\"+str(c))\nelif a*b==c:\n    print(str(a)+\"*\"+str(b)+\"=\"+str(c))\nelif a/b==c:\n    print(str(a)+\"/\"+str(b)+\"=\"+str(c))\nelif a==b+c:\n    print(str(a)+\"=\"+str(b)+\"+\"+str(c))\nelif a==b-c:\n    print(str(a)+\"=\"+str(b)+\"-\"+str(c))\nelif a==b*c:\n    print(str(a)+\"=\"+str(b)+\"*\"+str(c))\nelif a==b/c:\n    print(str(a)+\"=\"+str(b)+\"/\"+str(c))\n"
    },
    {
      "index": 1,
      "text": "\n\n#Solution - 1:\n\na,b,c = input().split()\na,b,c = int(a),int(b),int(c)\nif a+b==c:\n    print(str(a)+\"+\"+str(b)+\"=\"+str(c))\nelif a-b==c:\n    print(str(a)+\"-\"+str(b)+\"=\"+str(c))\nelif a*b==c:\n    print(str(a)+\"*\"+str(b)+\"=\"+str(c))\nelif a/b==c:\n    print(str(a)+\"/\"+str(b)+\"=\"+str(c))\nelif a==b+c:\n    print(str(a)+\"=\"+str(b)+\"+\"+str(c))\nelif a==b-c:\n    print(str(a)+\"=\"+str(b)+\"-\"+str(c))\nelif a==b*c:\n    print(str(a)+\"=\"+str(b)+\"*\"+str(c))\nelif a==b/c:\n    print(str(a)+\"=\"+str(b)+\"/\"+str(c))\n\n\n#Solution - 2:\n\na,b,c = input().split()\na,b,c = int(a),int(b),int(c)\nif a+b==c:\n    print(str(a)+\"+\"+str(b)+\"=\"+str(c))\nelif a-b==c:\n    print(str(a)+\"-\"+str(b)+\"=\"+str(c))\nelif a*b==c:\n    print(str(a)+\"*\"+str(b)+\"=\"+str(c))\nelif a/b==c:\n    print(str(a)+\"/\"+str(b)+\"=\"+str(c))\nelif a==b+c:\n    print(str(a)+\"=\"+str(b)+\"+\"+str(c))\nelif a==b-c:\n    print(str(a)+\"=\"+str(b)+\"-\"+str(c))\nelif a==b*c:\n    print(str(a)+\"=\"+str(b)+\"*\"+str(c))\nelif a==b/c:\n    print(str(a)+\"=\"+str(b)+\"/\"+str(c))\n"
    },
    {
      "index": 2,
      "text": "\n\n# solution:\n\na,b,c = input().split()\na,b,c = int(a),int(b),int(c)\nif a+b==c:\n    print(str(a)+\"+\"+str(b)+\"=\"+str(c))\nelif a-b==c:\n    print(str(a)+\"-\"+str(b)+\"=\"+str(c))\nelif a*b==c:\n    print(str(a)+\"*\"+str(b)+\"=\"+str(c))\nelif a/b==c:\n    print(str(a)+\"/\"+str(b)+\"=\"+str(c))\nelif a==b+c:\n    print(str(a)+\"=\"+str(b)+\"+\"+str(c))\nelif a==b-c:\n    print(str(a)+\"=\"+str(b)+\"-\"+str(c))\nelif a==b*c:\n    print(str(a)+\"=\"+str(b)+\"*\"+str(c))\nelif a==b/c:\n    print(str(a)+\"=\"+str(b)+\"/\"+str(c))\n"
    }
  ],
  "created": 1649832325,
  "object": "edit"
}
2022-04-13 06:45:33.126106 fix spelling mistakes 3 ['\n\n#Solution: \n\na,b,c = input().split()\na,b,c = int(a),int(b),int(c)\nif a+b==c:\n    print(str(a)+"+"+str(b)+"="+str(c))\nelif a-b==c:\n    print(str(a)+"-"+str(b)+"="+str(c))\nelif a*b==c:\n    print(str(a)+"*"+str(b)+"="+str(c))\nelif a/b==c:\n    print(str(a)+"/"+str(b)+"="+str(c))\nelif a==b+c:\n    print(str(a)+"="+str(b)+"+"+str(c))\nelif a==b-c:\n    print(str(a)+"="+str(b)+"-"+str(c))\nelif a==b*c:\n    print(str(a)+"="+str(b)+"*"+str(c))\nelif a==b/c:\n    print(str(a)+"="+str(b)+"/"+str(c))\n', '\n\n#Solution - 1:\n\na,b,c = input().split()\na,b,c = int(a),int(b),int(c)\nif a+b==c:\n    print(str(a)+"+"+str(b)+"="+str(c))\nelif a-b==c:\n    print(str(a)+"-"+str(b)+"="+str(c))\nelif a*b==c:\n    print(str(a)+"*"+str(b)+"="+str(c))\nelif a/b==c:\n    print(str(a)+"/"+str(b)+"="+str(c))\nelif a==b+c:\n    print(str(a)+"="+str(b)+"+"+str(c))\nelif a==b-c:\n    print(str(a)+"="+str(b)+"-"+str(c))\nelif a==b*c:\n    print(str(a)+"="+str(b)+"*"+str(c))\nelif a==b/c:\n    print(str(a)+"="+str(b)+"/"+str(c))\n\n\n#Solution - 2:\n\na,b,c = input().split()\na,b,c = int(a),int(b),int(c)\nif a+b==c:\n    print(str(a)+"+"+str(b)+"="+str(c))\nelif a-b==c:\n    print(str(a)+"-"+str(b)+"="+str(c))\nelif a*b==c:\n    print(str(a)+"*"+str(b)+"="+str(c))\nelif a/b==c:\n    print(str(a)+"/"+str(b)+"="+str(c))\nelif a==b+c:\n    print(str(a)+"="+str(b)+"+"+str(c))\nelif a==b-c:\n    print(str(a)+"="+str(b)+"-"+str(c))\nelif a==b*c:\n    print(str(a)+"="+str(b)+"*"+str(c))\nelif a==b/c:\n    print(str(a)+"="+str(b)+"/"+str(c))\n', '\n\n# solution:\n\na,b,c = input().split()\na,b,c = int(a),int(b),int(c)\nif a+b==c:\n    print(str(a)+"+"+str(b)+"="+str(c))\nelif a-b==c:\n    print(str(a)+"-"+str(b)+"="+str(c))\nelif a*b==c:\n    print(str(a)+"*"+str(b)+"="+str(c))\nelif a/b==c:\n    print(str(a)+"/"+str(b)+"="+str(c))\nelif a==b+c:\n    print(str(a)+"="+str(b)+"+"+str(c))\nelif a==b-c:\n    print(str(a)+"="+str(b)+"-"+str(c))\nelif a==b*c:\n    print(str(a)+"="+str(b)+"*"+str(c))\nelif a==b/c:\n    print(str(a)+"="+str(b)+"/"+str(c))\n']
2022-04-13 06:45:33.126143 size on output set 3
2022-04-13 06:45:33.126150 size on input set 3
2022-04-13 06:45:47.256310 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#Solution: \n\na, b, c = input().split()\na, b, c = int(a), int(b), int(c)\nif a + b == c:\n    print(str(a) + \"+\" + str(b) + \"=\" + str(c))\nelif a - b == c:\n    print(str(a) + \"-\" + str(b) + \"=\" + str(c))\nelif a * b == c:\n    print(str(a) + \"*\" + str(b) + \"=\" + str(c))\nelif a / b == c:\n    print(str(a) + \"/\" + str(b) + \"=\" + str(c))\nelif a == b + c:\n    print(str(a) + \"=\" + str(b) + \"+\" + str(c))\nelif a == b - c:\n    print(str(a) + \"=\" + str(b) + \"-\" + str(c))\nelif a == b * c:\n    print(str(a) + \"=\" + str(b) + \"*\" + str(c))\nelif a == b / c:\n    print(str(a) + \"=\" + str(b) + \"/\" + str(c))\n"
    },
    {
      "index": 1,
      "text": "\ndef check(a,b,c):\n    if a+b==c:\n        return \"True\"\n    elif a-b==c:\n        return \"True\"\n    elif a*b==c:\n        return \"True\"\n    elif a/b==c:\n        return \"True\"\n    elif a==b+c:\n        return \"True\"\n    elif a==b-c:\n        return \"True\"\n    elif a==b*c:\n        return \"True\"\n    elif a==b/c:\n        return \"True\"\n    else:\n        return \"False\"\n\na,b,c = map(int,input().split())\nprint(check(a,b,c))\n"
    },
    {
      "index": 2,
      "text": "\n#Solution: \n\na,b,c = input().split()\na,b,c = int(a),int(b),int(c)\nif a+b==c:\n    print(str(a)+\"+\"+str(b)+\"=\"+str(c))\nelif a-b==c:\n    print(str(a)+\"-\"+str(b)+\"=\"+str(c))\nelif a*b==c:\n    print(str(a)+\"*\"+str(b)+\"=\"+str(c))\nelif a/b==c:\n    print(str(a)+\"/\"+str(b)+\"=\"+str(c))\nelif a==b+c:\n    print(str(a)+\"=\"+str(b)+\"+\"+str(c))\nelif a==b-c:\n    print(str(a)+\"=\"+str(b)+\"-\"+str(c))\nelif a==b*c:\n    print(str(a)+\"=\"+str(b)+\"*\"+str(c))\nelif a==b/c:\n    print(str(a)+\"=\"+str(b)+\"/\"+str(c))\n"
    }
  ],
  "created": 1649832333,
  "object": "edit"
}
2022-04-13 06:45:47.256492 fix syntax errors 3 ['\n\n#Solution: \n\na, b, c = input().split()\na, b, c = int(a), int(b), int(c)\nif a + b == c:\n    print(str(a) + "+" + str(b) + "=" + str(c))\nelif a - b == c:\n    print(str(a) + "-" + str(b) + "=" + str(c))\nelif a * b == c:\n    print(str(a) + "*" + str(b) + "=" + str(c))\nelif a / b == c:\n    print(str(a) + "/" + str(b) + "=" + str(c))\nelif a == b + c:\n    print(str(a) + "=" + str(b) + "+" + str(c))\nelif a == b - c:\n    print(str(a) + "=" + str(b) + "-" + str(c))\nelif a == b * c:\n    print(str(a) + "=" + str(b) + "*" + str(c))\nelif a == b / c:\n    print(str(a) + "=" + str(b) + "/" + str(c))\n', '\ndef check(a,b,c):\n    if a+b==c:\n        return "True"\n    elif a-b==c:\n        return "True"\n    elif a*b==c:\n        return "True"\n    elif a/b==c:\n        return "True"\n    elif a==b+c:\n        return "True"\n    elif a==b-c:\n        return "True"\n    elif a==b*c:\n        return "True"\n    elif a==b/c:\n        return "True"\n    else:\n        return "False"\n\na,b,c = map(int,input().split())\nprint(check(a,b,c))\n', '\n#Solution: \n\na,b,c = input().split()\na,b,c = int(a),int(b),int(c)\nif a+b==c:\n    print(str(a)+"+"+str(b)+"="+str(c))\nelif a-b==c:\n    print(str(a)+"-"+str(b)+"="+str(c))\nelif a*b==c:\n    print(str(a)+"*"+str(b)+"="+str(c))\nelif a/b==c:\n    print(str(a)+"/"+str(b)+"="+str(c))\nelif a==b+c:\n    print(str(a)+"="+str(b)+"+"+str(c))\nelif a==b-c:\n    print(str(a)+"="+str(b)+"-"+str(c))\nelif a==b*c:\n    print(str(a)+"="+str(b)+"*"+str(c))\nelif a==b/c:\n    print(str(a)+"="+str(b)+"/"+str(c))\n']
2022-04-13 06:45:54.474330 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#Solution - 1:\n\na,b,c = input().split()\na,b,c = int(a),int(b),int(c)\nif a+b==c:\n    print(str(a)+\"+\"+str(b)+\"=\"+str(c))\nelif a-b==c:\n    print(str(a)+\"-\"+str(b)+\"=\"+str(c))\nelif a*b==c:\n    print(str(a)+\"*\"+str(b)+\"=\"+str(c))\nelif a/b==c:\n    print(str(a)+\"/\"+str(b)+\"=\"+str(c))\nelif a==b+c:\n    print(str(a)+\"=\"+str(b)+\"+\"+str(c))\nelif a==b-c:\n    print(str(a)+\"=\"+str(b)+\"-\"+str(c))\nelif a==b*c:\n    print(str(a)+\"=\"+str(b)+\"*\"+str(c))\nelif a==b/c:\n    print(str(a)+\"=\"+str(b)+\"/\"+str(c))\n\n\n#Solution - 2:\n\na,b,c = input().split()\na,b,c = int(a),int(b),int(c)\nif a+b==c:\n    print(str(a)+\"+\"+str(b)+\"=\"+str(c))\nelif a-b==c:\n    print(str(a)+\"-\"+str(b)+\"=\"+str(c))\nelif a*b==c:\n    print(str(a)+\"*\"+str(b)+\"=\"+str(c))\nelif a/b==c:\n    print(str(a)+\"/\"+str(b)+\"=\"+str(c))\nelif a==b+c:\n    print(str(a)+\"=\"+str(b)+\"+\"+str(c))\nelif a==b-c:\n    print(str(a)+\"=\"+str(b)+\"-\"+str(c))\nelif a==b*c:\n    print(str(a)+\"=\"+str(b)+\"*\"+str(c))\nelif a==b/c:\n    print(str(a)+\"=\"+str(b)+\"/\"+str(c))\n"
    },
    {
      "index": 1,
      "text": "\n'''\n#Solution - 1:\n\na,b,c = input().split()\na,b,c = int(a),int(b),int(c)\nif a+b==c:\n    print(str(a)+\"+\"+str(b)+\"=\"+str(c))\nelif a-b==c:\n    print(str(a)+\"-\"+str(b)+\"=\"+str(c))\nelif a*b==c:\n    print(str(a)+\"*\"+str(b)+\"=\"+str(c))\nelif a/b==c:\n    print(str(a)+\"/\"+str(b)+\"=\"+str(c))\nelif a==b+c:\n    print(str(a)+\"=\"+str(b)+\"+\"+str(c))\nelif a==b-c:\n    print(str(a)+\"=\"+str(b)+\"-\"+str(c))\nelif a==b*c:\n    print(str(a)+\"=\"+str(b)+\"*\"+str(c))\nelif a==b/c:\n    print(str(a)+\"=\"+str(b)+\"/\"+str(c))\n'''\n'''\n#Solution - 2:\n\na,b,c = input().split()\na,b,c = int(a),int(b),int(c)\nif a+b==c:\n    print(str(a)+\"+\"+str(b)+\"=\"+str(c))\nelif a-b==c:\n    print(str(a)+\"-\"+str(b)+\"=\"+str(c))\nelif a*b==c:\n    print(str(a)+\"*\"+str(b)+\"=\"+str(c))\nelif a/b==c:\n    print(str(a)+\"/\"+str(b)+\"=\"+str(c))\nelif a==b+c:\n    print(str(a)+\"=\"+str(b)+\"+\"+str(c))\nelif a==b-c:\n    print(str(a)+\"=\"+str(b)+\"-\"+str(c))\nelif a==b*c:\n    print(str(a)+\"=\"+str(b)+\"*\"+str(c))\nelif a==b/c:\n    print(str(a)+\"=\"+str(b)+\"/\"+str(c))\n'''\n"
    },
    {
      "index": 2,
      "text": "\n#Solution - 2:\n\na,b,c = input().split()\na,b,c = int(a),int(b),int(c)\nif a+b==c:\n    print(str(a)+\"+\"+str(b)+\"=\"+str(c))\nelif a-b==c:\n    print(str(a)+\"-\"+str(b)+\"=\"+str(c))\nelif a*b==c:\n    print(str(a)+\"*\"+str(b)+\"=\"+str(c))\nelif a/b==c:\n    print(str(a)+\"/\"+str(b)+\"=\"+str(c))\nelif a==b+c:\n    print(str(a)+\"=\"+str(b)+\"+\"+str(c))\nelif a==b-c:\n    print(str(a)+\"=\"+str(b)+\"-\"+str(c))\nelif a==b*c:\n    print(str(a)+\"=\"+str(b)+\"*\"+str(c))\nelif a==b/c:\n    print(str(a)+\"=\"+str(b)+\"/\"+str(c))\n"
    }
  ],
  "created": 1649832347,
  "object": "edit"
}
2022-04-13 06:45:54.474511 fix syntax errors 3 ['\n#Solution - 1:\n\na,b,c = input().split()\na,b,c = int(a),int(b),int(c)\nif a+b==c:\n    print(str(a)+"+"+str(b)+"="+str(c))\nelif a-b==c:\n    print(str(a)+"-"+str(b)+"="+str(c))\nelif a*b==c:\n    print(str(a)+"*"+str(b)+"="+str(c))\nelif a/b==c:\n    print(str(a)+"/"+str(b)+"="+str(c))\nelif a==b+c:\n    print(str(a)+"="+str(b)+"+"+str(c))\nelif a==b-c:\n    print(str(a)+"="+str(b)+"-"+str(c))\nelif a==b*c:\n    print(str(a)+"="+str(b)+"*"+str(c))\nelif a==b/c:\n    print(str(a)+"="+str(b)+"/"+str(c))\n\n\n#Solution - 2:\n\na,b,c = input().split()\na,b,c = int(a),int(b),int(c)\nif a+b==c:\n    print(str(a)+"+"+str(b)+"="+str(c))\nelif a-b==c:\n    print(str(a)+"-"+str(b)+"="+str(c))\nelif a*b==c:\n    print(str(a)+"*"+str(b)+"="+str(c))\nelif a/b==c:\n    print(str(a)+"/"+str(b)+"="+str(c))\nelif a==b+c:\n    print(str(a)+"="+str(b)+"+"+str(c))\nelif a==b-c:\n    print(str(a)+"="+str(b)+"-"+str(c))\nelif a==b*c:\n    print(str(a)+"="+str(b)+"*"+str(c))\nelif a==b/c:\n    print(str(a)+"="+str(b)+"/"+str(c))\n', '\n\'\'\'\n#Solution - 1:\n\na,b,c = input().split()\na,b,c = int(a),int(b),int(c)\nif a+b==c:\n    print(str(a)+"+"+str(b)+"="+str(c))\nelif a-b==c:\n    print(str(a)+"-"+str(b)+"="+str(c))\nelif a*b==c:\n    print(str(a)+"*"+str(b)+"="+str(c))\nelif a/b==c:\n    print(str(a)+"/"+str(b)+"="+str(c))\nelif a==b+c:\n    print(str(a)+"="+str(b)+"+"+str(c))\nelif a==b-c:\n    print(str(a)+"="+str(b)+"-"+str(c))\nelif a==b*c:\n    print(str(a)+"="+str(b)+"*"+str(c))\nelif a==b/c:\n    print(str(a)+"="+str(b)+"/"+str(c))\n\'\'\'\n\'\'\'\n#Solution - 2:\n\na,b,c = input().split()\na,b,c = int(a),int(b),int(c)\nif a+b==c:\n    print(str(a)+"+"+str(b)+"="+str(c))\nelif a-b==c:\n    print(str(a)+"-"+str(b)+"="+str(c))\nelif a*b==c:\n    print(str(a)+"*"+str(b)+"="+str(c))\nelif a/b==c:\n    print(str(a)+"/"+str(b)+"="+str(c))\nelif a==b+c:\n    print(str(a)+"="+str(b)+"+"+str(c))\nelif a==b-c:\n    print(str(a)+"="+str(b)+"-"+str(c))\nelif a==b*c:\n    print(str(a)+"="+str(b)+"*"+str(c))\nelif a==b/c:\n    print(str(a)+"="+str(b)+"/"+str(c))\n\'\'\'\n', '\n#Solution - 2:\n\na,b,c = input().split()\na,b,c = int(a),int(b),int(c)\nif a+b==c:\n    print(str(a)+"+"+str(b)+"="+str(c))\nelif a-b==c:\n    print(str(a)+"-"+str(b)+"="+str(c))\nelif a*b==c:\n    print(str(a)+"*"+str(b)+"="+str(c))\nelif a/b==c:\n    print(str(a)+"/"+str(b)+"="+str(c))\nelif a==b+c:\n    print(str(a)+"="+str(b)+"+"+str(c))\nelif a==b-c:\n    print(str(a)+"="+str(b)+"-"+str(c))\nelif a==b*c:\n    print(str(a)+"="+str(b)+"*"+str(c))\nelif a==b/c:\n    print(str(a)+"="+str(b)+"/"+str(c))\n']
2022-04-13 06:46:05.212259 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\na,b,c = input().split()\na,b,c = int(a),int(b),int(c)\nif a+b==c:print(str(a)+\"+\"+str(b)+\"=\"+str(c))\nelif a-b==c:print(str(a)+\"-\"+str(b)+\"=\"+str(c))\nelif a*b==c:print(str(a)+\"*\"+str(b)+\"=\"+str(c))\nelif a/b==c:print(str(a)+\"/\"+str(b)+\"=\"+str(c))\nelif a==b+c:print(str(a)+\"=\"+str(b)+\"+\"+str(c))\nelif a==b-c:print(str(a)+\"=\"+str(b)+\"-\"+str(c))\nelif a==b*c:print(str(a)+\"=\"+str(b)+\"*\"+str(c))\nelif a==b/c:print(str(a)+\"=\"+str(b)+\"/\"+str(c))\n"
    },
    {
      "index": 1,
      "text": "\n\n# solution\n\na,b,c = input().split()\na,b,c = int(a),int(b),int(c)\nif a+b==c:\n    print(str(a)+\"+\"+str(b)+\"=\"+str(c))\nelif a-b==c:\n    print(str(a)+\"-\"+str(b)+\"=\"+str(c))\nelif a*b==c:\n    print(str(a)+\"*\"+str(b)+\"=\"+str(c))\nelif a/b==c:\n    print(str(a)+\"/\"+str(b)+\"=\"+str(c))\nelif a==b+c:\n    print(str(a)+\"=\"+str(b)+\"+\"+str(c))\nelif a==b-c:\n    print(str(a)+\"=\"+str(b)+\"-\"+str(c))\nelif a==b*c:\n    print(str(a)+\"=\"+str(b)+\"*\"+str(c))\nelif a==b/c:\n    print(str(a)+\"=\"+str(b)+\"/\"+str(c))\n"
    },
    {
      "index": 2,
      "text": "\n# solution:\n\na,b,c = input().split()\na,b,c = int(a),int(b),int(c)\nif a+b==c:\n    print(str(a)+\"+\"+str(b)+\"=\"+str(c))\nelif a-b==c:\n    print(str(a)+\"-\"+str(b)+\"=\"+str(c))\nelif a*b==c:\n    print(str(a)+\"*\"+str(b)+\"=\"+str(c))\nelif a/b==c:\n    print(str(a)+\"/\"+str(b)+\"=\"+str(c))\nelif a==b+c:\n    print(str(a)+\"=\"+str(b)+\"+\"+str(c))\nelif a==b-c:\n    print(str(a)+\"=\"+str(b)+\"-\"+str(c))\nelif a==b*c:\n    print(str(a)+\"=\"+str(b)+\"*\"+str(c))\nelif a==b/c:\n    print(str(a)+\"=\"+str(b)+\"/\"+str(c))\n"
    }
  ],
  "created": 1649832354,
  "object": "edit"
}
2022-04-13 06:46:05.212441 fix syntax errors 3 ['\n\na,b,c = input().split()\na,b,c = int(a),int(b),int(c)\nif a+b==c:print(str(a)+"+"+str(b)+"="+str(c))\nelif a-b==c:print(str(a)+"-"+str(b)+"="+str(c))\nelif a*b==c:print(str(a)+"*"+str(b)+"="+str(c))\nelif a/b==c:print(str(a)+"/"+str(b)+"="+str(c))\nelif a==b+c:print(str(a)+"="+str(b)+"+"+str(c))\nelif a==b-c:print(str(a)+"="+str(b)+"-"+str(c))\nelif a==b*c:print(str(a)+"="+str(b)+"*"+str(c))\nelif a==b/c:print(str(a)+"="+str(b)+"/"+str(c))\n', '\n\n# solution\n\na,b,c = input().split()\na,b,c = int(a),int(b),int(c)\nif a+b==c:\n    print(str(a)+"+"+str(b)+"="+str(c))\nelif a-b==c:\n    print(str(a)+"-"+str(b)+"="+str(c))\nelif a*b==c:\n    print(str(a)+"*"+str(b)+"="+str(c))\nelif a/b==c:\n    print(str(a)+"/"+str(b)+"="+str(c))\nelif a==b+c:\n    print(str(a)+"="+str(b)+"+"+str(c))\nelif a==b-c:\n    print(str(a)+"="+str(b)+"-"+str(c))\nelif a==b*c:\n    print(str(a)+"="+str(b)+"*"+str(c))\nelif a==b/c:\n    print(str(a)+"="+str(b)+"/"+str(c))\n', '\n# solution:\n\na,b,c = input().split()\na,b,c = int(a),int(b),int(c)\nif a+b==c:\n    print(str(a)+"+"+str(b)+"="+str(c))\nelif a-b==c:\n    print(str(a)+"-"+str(b)+"="+str(c))\nelif a*b==c:\n    print(str(a)+"*"+str(b)+"="+str(c))\nelif a/b==c:\n    print(str(a)+"/"+str(b)+"="+str(c))\nelif a==b+c:\n    print(str(a)+"="+str(b)+"+"+str(c))\nelif a==b-c:\n    print(str(a)+"="+str(b)+"-"+str(c))\nelif a==b*c:\n    print(str(a)+"="+str(b)+"*"+str(c))\nelif a==b/c:\n    print(str(a)+"="+str(b)+"/"+str(c))\n']
2022-04-13 06:46:05.212538 size on output set 9
2022-04-13 06:46:05.212550 num operations 2
2022-04-13 06:46:05.212555 size on input set 1
2022-04-13 06:46:19.083898 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nnumbers = input().split()\n\nfor i in range(len(numbers)):\n    numbers[i] = int(numbers[i])\n\n\ndef check(numbers, i, j, k):\n    if numbers[i] + numbers[j] == numbers[k]:\n        print(str(numbers[i]) + \"+\" + str(numbers[j]) + \"=\" + str(numbers[k]))\n    elif numbers[i] - numbers[j] == numbers[k]:\n        print(str(numbers[i]) + \"-\" + str(numbers[j]) + \"=\" + str(numbers[k]))\n    elif numbers[i] * numbers[j] == numbers[k]:\n        print(str(numbers[i]) + \"*\" + str(numbers[j]) + \"=\" + str(numbers[k]))\n    elif numbers[i] / numbers[j] == numbers[k]:\n        print(str(numbers[i]) + \"/\" + str(numbers[j]) + \"=\" + str(numbers[k]))\n\n\ncheck(numbers, 0, 1, 2)\ncheck(numbers, 2, 1, 0)\n"
    },
    {
      "index": 1,
      "text": "\nprint(\"Hello\")\n"
    },
    {
      "index": 2,
      "text": "\nnumbers = input().split()\n\nfor i in range(len(numbers)):\n    numbers[i] = int(numbers[i])\n\nif numbers[0] + numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"+\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[0] - numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"-\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[0] * numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"*\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[0] / numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"/\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[2] + numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"+\" + str(numbers[2]))\nelif numbers[2] - numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"-\" + str(numbers[2]))\nelif numbers[2] * numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"*\" + str(numbers[2]))\nelif numbers[2] / numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"/\" + str(numbers[2]))\n"
    }
  ],
  "created": 1649832365,
  "object": "edit"
}
2022-04-13 06:46:19.084068 fix spelling mistakes 3 ['\n\nnumbers = input().split()\n\nfor i in range(len(numbers)):\n    numbers[i] = int(numbers[i])\n\n\ndef check(numbers, i, j, k):\n    if numbers[i] + numbers[j] == numbers[k]:\n        print(str(numbers[i]) + "+" + str(numbers[j]) + "=" + str(numbers[k]))\n    elif numbers[i] - numbers[j] == numbers[k]:\n        print(str(numbers[i]) + "-" + str(numbers[j]) + "=" + str(numbers[k]))\n    elif numbers[i] * numbers[j] == numbers[k]:\n        print(str(numbers[i]) + "*" + str(numbers[j]) + "=" + str(numbers[k]))\n    elif numbers[i] / numbers[j] == numbers[k]:\n        print(str(numbers[i]) + "/" + str(numbers[j]) + "=" + str(numbers[k]))\n\n\ncheck(numbers, 0, 1, 2)\ncheck(numbers, 2, 1, 0)\n', '\nprint("Hello")\n', '\nnumbers = input().split()\n\nfor i in range(len(numbers)):\n    numbers[i] = int(numbers[i])\n\nif numbers[0] + numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "+" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[0] - numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "-" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[0] * numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "*" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[0] / numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "/" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[2] + numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "+" + str(numbers[2]))\nelif numbers[2] - numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "-" + str(numbers[2]))\nelif numbers[2] * numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "*" + str(numbers[2]))\nelif numbers[2] / numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "/" + str(numbers[2]))\n']
2022-04-13 06:46:19.084101 size on output set 3
2022-04-13 06:46:19.084107 size on input set 3
2022-04-13 06:46:20.584565 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nprint(\"Hello World\")\n"
    },
    {
      "index": 1,
      "text": "\nprint(\"Hello World\")\n"
    },
    {
      "index": 2,
      "text": "\nprint(\"Hello World\")\n"
    }
  ],
  "created": 1649832379,
  "object": "edit"
}
2022-04-13 06:46:20.584741 fix syntax errors 3 ['\nprint("Hello World")\n', '\nprint("Hello World")\n', '\nprint("Hello World")\n']
2022-04-13 06:46:39.397404 fix syntax errors {
  "choices": [
    {
      "error": {
        "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
        "type": "invalid_edit"
      },
      "index": 0
    },
    {
      "index": 1,
      "text": "\n\nnumbers = input().split()\nfor i in range(len(numbers)):\n    if numbers[i].isdigit():\n        numbers[i] = int(numbers[i])\n    else:\n        print(\"Invalid input\")\n        exit(0)\n\ndef check(numbers, i, j, k):\n    if numbers[i] + numbers[j] == numbers[k]:\n        print(str(numbers[i]) + \"+\" + str(numbers[j]) + \"=\" + str(numbers[k]))\n    elif numbers[i] - numbers[j] == numbers[k]:\n        print(str(numbers[i]) + \"-\" + str(numbers[j]) + \"=\" + str(numbers[k]))\n    elif numbers[i] * numbers[j] == numbers[k]:\n        print(str(numbers[i]) + \"*\" + str(numbers[j]) + \"=\" + str(numbers[k]))\n    elif numbers[i] // numbers[j] == numbers[k]:\n        print(str(numbers[i]) + \"/\" + str(numbers[j]) + \"=\" + str(numbers[k]))\n\n\ncheck(numbers, 0, 1, 2)\ncheck(numbers, 2, 1, 0)\n"
    },
    {
      "index": 2,
      "text": "\n\nnumbers = input().split()\nfor i in range(len(numbers)):\n    numbers[i] = int(numbers[i])\n\n\ndef check(numbers, i, j, k):\n    if numbers[i] + numbers[j] == numbers[k]:\n        print(str(numbers[i]) + \"+\" + str(numbers[j]) + \"=\" + str(numbers[k]))\n    elif numbers[i] - numbers[j] == numbers[k]:\n        print(str(numbers[i]) + \"-\" + str(numbers[j]) + \"=\" + str(numbers[k]))\n    elif numbers[i] * numbers[j] == numbers[k]:\n        print(str(numbers[i]) + \"*\" + str(numbers[j]) + \"=\" + str(numbers[k]))\n    elif numbers[i] / numbers[j] == numbers[k]:\n        print(str(numbers[i]) + \"/\" + str(numbers[j]) + \"=\" + str(numbers[k]))\n\n\ncheck(numbers, 0, 1, 2)\ncheck(numbers, 2, 1, 0)\n"
    }
  ],
  "created": 1649832380,
  "object": "edit"
}
2022-04-13 06:46:39.397583 NO RESULT
2022-04-13 06:46:39.397603 {
  "error": {
    "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
    "type": "invalid_edit"
  },
  "index": 0
}
2022-04-13 06:46:39.397637 fix syntax errors 2 ['\n\nnumbers = input().split()\nfor i in range(len(numbers)):\n    if numbers[i].isdigit():\n        numbers[i] = int(numbers[i])\n    else:\n        print("Invalid input")\n        exit(0)\n\ndef check(numbers, i, j, k):\n    if numbers[i] + numbers[j] == numbers[k]:\n        print(str(numbers[i]) + "+" + str(numbers[j]) + "=" + str(numbers[k]))\n    elif numbers[i] - numbers[j] == numbers[k]:\n        print(str(numbers[i]) + "-" + str(numbers[j]) + "=" + str(numbers[k]))\n    elif numbers[i] * numbers[j] == numbers[k]:\n        print(str(numbers[i]) + "*" + str(numbers[j]) + "=" + str(numbers[k]))\n    elif numbers[i] // numbers[j] == numbers[k]:\n        print(str(numbers[i]) + "/" + str(numbers[j]) + "=" + str(numbers[k]))\n\n\ncheck(numbers, 0, 1, 2)\ncheck(numbers, 2, 1, 0)\n', '\n\nnumbers = input().split()\nfor i in range(len(numbers)):\n    numbers[i] = int(numbers[i])\n\n\ndef check(numbers, i, j, k):\n    if numbers[i] + numbers[j] == numbers[k]:\n        print(str(numbers[i]) + "+" + str(numbers[j]) + "=" + str(numbers[k]))\n    elif numbers[i] - numbers[j] == numbers[k]:\n        print(str(numbers[i]) + "-" + str(numbers[j]) + "=" + str(numbers[k]))\n    elif numbers[i] * numbers[j] == numbers[k]:\n        print(str(numbers[i]) + "*" + str(numbers[j]) + "=" + str(numbers[k]))\n    elif numbers[i] / numbers[j] == numbers[k]:\n        print(str(numbers[i]) + "/" + str(numbers[j]) + "=" + str(numbers[k]))\n\n\ncheck(numbers, 0, 1, 2)\ncheck(numbers, 2, 1, 0)\n']
2022-04-13 06:46:41.898948 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "numbers = input().split()\n\nfor i in range(len(numbers)):\n    numbers[i] = int(numbers[i])\n\nif numbers[0] + numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"+\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[0] - numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"-\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[0] * numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"*\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[0] / numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"/\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[2] + numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"+\" + str(numbers[2]))\nelif numbers[2] - numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"-\" + str(numbers[2]))\nelif numbers[2] * numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"*\" + str(numbers[2]))\nelif numbers[2] / numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"/\" + str(numbers[2]))\n"
    },
    {
      "index": 1,
      "text": "\nnumbers = raw_input().split()\n\nfor i in range(len(numbers)):\n    numbers[i] = int(numbers[i])\n\nif numbers[0] + numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"+\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[0] - numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"-\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[0] * numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"*\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[0] / numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"/\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[2] + numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"+\" + str(numbers[2]))\nelif numbers[2] - numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"-\" + str(numbers[2]))\nelif numbers[2] * numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"*\" + str(numbers[2]))\nelif numbers[2] / numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"/\" + str(numbers[2]))\n"
    },
    {
      "index": 2,
      "text": "numbers = input().split()\n\nfor i in range(len(numbers)):\n    numbers[i] = int(numbers[i])\n\nif numbers[0] + numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"+\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[0] - numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"-\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[0] * numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"*\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[0] / numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"/\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[2] + numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"+\" + str(numbers[2]))\nelif numbers[2] - numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"-\" + str(numbers[2]))\nelif numbers[2] * numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"*\" + str(numbers[2]))\nelif numbers[2] / numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"/\" + str(numbers[2]))\n"
    }
  ],
  "created": 1649832399,
  "object": "edit"
}
2022-04-13 06:46:41.899139 fix syntax errors 3 ['numbers = input().split()\n\nfor i in range(len(numbers)):\n    numbers[i] = int(numbers[i])\n\nif numbers[0] + numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "+" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[0] - numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "-" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[0] * numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "*" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[0] / numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "/" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[2] + numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "+" + str(numbers[2]))\nelif numbers[2] - numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "-" + str(numbers[2]))\nelif numbers[2] * numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "*" + str(numbers[2]))\nelif numbers[2] / numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "/" + str(numbers[2]))\n', '\nnumbers = raw_input().split()\n\nfor i in range(len(numbers)):\n    numbers[i] = int(numbers[i])\n\nif numbers[0] + numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "+" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[0] - numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "-" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[0] * numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "*" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[0] / numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "/" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[2] + numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "+" + str(numbers[2]))\nelif numbers[2] - numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "-" + str(numbers[2]))\nelif numbers[2] * numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "*" + str(numbers[2]))\nelif numbers[2] / numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "/" + str(numbers[2]))\n', 'numbers = input().split()\n\nfor i in range(len(numbers)):\n    numbers[i] = int(numbers[i])\n\nif numbers[0] + numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "+" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[0] - numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "-" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[0] * numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "*" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[0] / numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "/" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[2] + numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "+" + str(numbers[2]))\nelif numbers[2] - numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "-" + str(numbers[2]))\nelif numbers[2] * numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "*" + str(numbers[2]))\nelif numbers[2] / numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "/" + str(numbers[2]))\n']
2022-04-13 06:46:41.899181 size on output set 5
2022-04-13 06:46:41.899194 num operations 2
2022-04-13 06:46:41.899199 size on input set 1
2022-04-13 06:46:49.518072 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "nums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + \"+\" + str(nums[1]) + \"=\" + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + \"-\" + str(nums[1]) + \"=\" + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + \"*\" + str(nums[1]) + \"=\" + str(nums[2]))\nelse:\n    print(str(nums[0]) + \"/\" + str(nums[1]) + \"=\" + str(nums[2]))\n"
    },
    {
      "index": 1,
      "text": "\n\nnums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + \" + \" + str(nums[1]) + \" = \" + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + \" - \" + str(nums[1]) + \" = \" + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + \" * \" + str(nums[1]) + \" = \" + str(nums[2]))\nelse:\n    print(str(nums[0]) + \" / \" + str(nums[1]) + \" = \" + str(nums[2]))\n"
    },
    {
      "index": 2,
      "text": "\n\nnums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelse:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\n"
    }
  ],
  "created": 1649832401,
  "object": "edit"
}
2022-04-13 06:46:49.518307 fix spelling mistakes 3 ['nums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + "+" + str(nums[1]) + "=" + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + "-" + str(nums[1]) + "=" + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + "*" + str(nums[1]) + "=" + str(nums[2]))\nelse:\n    print(str(nums[0]) + "/" + str(nums[1]) + "=" + str(nums[2]))\n', '\n\nnums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + " + " + str(nums[1]) + " = " + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + " - " + str(nums[1]) + " = " + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + " * " + str(nums[1]) + " = " + str(nums[2]))\nelse:\n    print(str(nums[0]) + " / " + str(nums[1]) + " = " + str(nums[2]))\n', "\n\nnums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelse:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\n"]
2022-04-13 06:46:49.518338 size on output set 3
2022-04-13 06:46:49.518345 size on input set 3
2022-04-13 06:47:00.693395 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    nums = [int(x) for x in input().split()]\n    if nums[0] + nums[1] == nums[2]:\n        print(str(nums[0]) + \" + \" + str(nums[1]) + \" = \" + str(nums[2]))\n    elif nums[0] - nums[1] == nums[2]:\n        print(str(nums[0]) + \" - \" + str(nums[1]) + \" = \" + str(nums[2]))\n    elif nums[0] * nums[1] == nums[2]:\n        print(str(nums[0]) + \" * \" + str(nums[1]) + \" = \" + str(nums[2]))\n    else:\n        print(str(nums[0]) + \" / \" + str(nums[1]) + \" = \" + str(nums[2]))\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nnums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + \" + \" + str(nums[1]) + \" = \" + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + \" - \" + str(nums[1]) + \" = \" + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + \" * \" + str(nums[1]) + \" = \" + str(nums[2]))\nelse:\n    print(str(nums[0]) + \" / \" + str(nums[1]) + \" = \" + str(nums[2]))\n"
    },
    {
      "index": 2,
      "text": "\n\nnums = [float(x) for x in input().split()]\n\nif nums[2] == nums[0] + nums[1]:\n    print(str(nums[0]) + \" + \" + str(nums[1]) + \" = \" + str(nums[2]))\nelif nums[2] == nums[0] - nums[1]:\n    print(str(nums[0]) + \" - \" + str(nums[1]) + \" = \" + str(nums[2]))\nelif nums[2] == nums[0] * nums[1]:\nelif nums[2] == nums[0] / nums[1]:\n    print(str(nums[0]) + \" / \" + str(nums[1]) + \" = \" + str(nums[2]))\n    print(str(nums[0]) + \" * \" + str(nums[1]) + \" = \" + str(nums[2]))\nelse:\n    print(\"No solution\")\n"
    }
  ],
  "created": 1649832409,
  "object": "edit"
}
2022-04-13 06:47:00.693573 fix syntax errors 3 ['\ndef main():\n    nums = [int(x) for x in input().split()]\n    if nums[0] + nums[1] == nums[2]:\n        print(str(nums[0]) + " + " + str(nums[1]) + " = " + str(nums[2]))\n    elif nums[0] - nums[1] == nums[2]:\n        print(str(nums[0]) + " - " + str(nums[1]) + " = " + str(nums[2]))\n    elif nums[0] * nums[1] == nums[2]:\n        print(str(nums[0]) + " * " + str(nums[1]) + " = " + str(nums[2]))\n    else:\n        print(str(nums[0]) + " / " + str(nums[1]) + " = " + str(nums[2]))\nif __name__ == "__main__":\n    main()\n', '\nnums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + " + " + str(nums[1]) + " = " + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + " - " + str(nums[1]) + " = " + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + " * " + str(nums[1]) + " = " + str(nums[2]))\nelse:\n    print(str(nums[0]) + " / " + str(nums[1]) + " = " + str(nums[2]))\n', '\n\nnums = [float(x) for x in input().split()]\n\nif nums[2] == nums[0] + nums[1]:\n    print(str(nums[0]) + " + " + str(nums[1]) + " = " + str(nums[2]))\nelif nums[2] == nums[0] - nums[1]:\n    print(str(nums[0]) + " - " + str(nums[1]) + " = " + str(nums[2]))\nelif nums[2] == nums[0] * nums[1]:\nelif nums[2] == nums[0] / nums[1]:\n    print(str(nums[0]) + " / " + str(nums[1]) + " = " + str(nums[2]))\n    print(str(nums[0]) + " * " + str(nums[1]) + " = " + str(nums[2]))\nelse:\n    print("No solution")\n']
2022-04-13 06:47:04.389399 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nnums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\nelif nums[0] / nums[1] == nums[2]:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelse:\n    print('None')\n"
    },
    {
      "index": 1,
      "text": "\nnums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelse:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\n"
    },
    {
      "index": 2,
      "text": "\nnums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelse:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\n"
    }
  ],
  "created": 1649832420,
  "object": "edit"
}
2022-04-13 06:47:04.389588 fix syntax errors 3 ["\n\nnums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\nelif nums[0] / nums[1] == nums[2]:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelse:\n    print('None')\n", "\nnums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelse:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\n", "\nnums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelse:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\n"]
2022-04-13 06:47:17.708861 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "nums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]: print(str(nums[0]) + \"+\" + str(nums[1]) + \"=\" + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]: print(str(nums[0]) + \"-\" + str(nums[1]) + \"=\" + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]: print(str(nums[0]) + \"*\" + str(nums[1]) + \"=\" + str(nums[2]))\nelse:\n    print(str(nums[0]) + \"/\" + str(nums[1]) + \"=\" + str(nums[2])) \n"
    },
    {
      "index": 1,
      "text": "def main():\n    nums = [int(x) for x in input().split()]\n\n    if nums[0] + nums[1] == nums[2]:\n        print(str(nums[0]) + \"+\" + str(nums[1]) + \"=\" + str(nums[2]))\n    elif nums[0] - nums[1] == nums[2]:\n        print(str(nums[0]) + \"-\" + str(nums[1]) + \"=\" + str(nums[2]))\n    elif nums[0] * nums[1] == nums[2]:\n        print(str(nums[0]) + \"*\" + str(nums[1]) + \"=\" + str(nums[2]))\n    else:\n        print(str(nums[0]) + \"/\" + str(nums[1]) + \"=\" + str(nums[2]))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "nums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + \" + \" + str(nums[1]) + \" = \" + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + \" - \" + str(nums[1]) + \" = \" + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + \" * \" + str(nums[1]) + \" = \" + str(nums[2]))\nelse:\n    print(str(nums[0]) + \" / \" + str(nums[1]) + \" = \" + str(nums[2]))\n"
    }
  ],
  "created": 1649832424,
  "object": "edit"
}
2022-04-13 06:47:17.709139 fix syntax errors 3 ['nums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]: print(str(nums[0]) + "+" + str(nums[1]) + "=" + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]: print(str(nums[0]) + "-" + str(nums[1]) + "=" + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]: print(str(nums[0]) + "*" + str(nums[1]) + "=" + str(nums[2]))\nelse:\n    print(str(nums[0]) + "/" + str(nums[1]) + "=" + str(nums[2])) \n', 'def main():\n    nums = [int(x) for x in input().split()]\n\n    if nums[0] + nums[1] == nums[2]:\n        print(str(nums[0]) + "+" + str(nums[1]) + "=" + str(nums[2]))\n    elif nums[0] - nums[1] == nums[2]:\n        print(str(nums[0]) + "-" + str(nums[1]) + "=" + str(nums[2]))\n    elif nums[0] * nums[1] == nums[2]:\n        print(str(nums[0]) + "*" + str(nums[1]) + "=" + str(nums[2]))\n    else:\n        print(str(nums[0]) + "/" + str(nums[1]) + "=" + str(nums[2]))\n\n\nif __name__ == \'__main__\':\n    main()\n', 'nums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + " + " + str(nums[1]) + " = " + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + " - " + str(nums[1]) + " = " + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + " * " + str(nums[1]) + " = " + str(nums[2]))\nelse:\n    print(str(nums[0]) + " / " + str(nums[1]) + " = " + str(nums[2]))\n']
2022-04-13 06:47:17.709174 size on output set 8
2022-04-13 06:47:17.709187 num operations 2
2022-04-13 06:47:17.709192 size on input set 1
2022-04-13 06:47:20.029577 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nnums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] / nums[1] == nums[2]:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] == nums[1] + nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '+' + str(nums[2]))\nelif nums[0] == nums[1] - nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '-' + str(nums[2]))\nelif nums[0] == nums[1] * nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '*' + str(nums[2]))\nelif nums[0] == nums[1] / nums[2]:\n\n# comment\n    print(str(nums[0]) + '=' + str(nums[1]) + '/' + str(nums[2]))\n"
    },
    {
      "index": 1,
      "text": "\n\nnums = [float(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] / nums[1] == nums[2]:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] == nums[1] + nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '+' + str(nums[2]))\nelif nums[0] == nums[1] - nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '-' + str(nums[2]))\nelif nums[0] == nums[1] * nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '*' + str(nums[2]))\nelif nums[0] == nums[1] / nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '/' + str(nums[2]))\n"
    },
    {
      "index": 2,
      "text": "\nnums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] / nums[1] == nums[2]:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] == nums[1] + nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '+' + str(nums[2]))\nelif nums[0] == nums[1] - nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '-' + str(nums[2]))\nelif nums[0] == nums[1] * nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '*' + str(nums[2]))\nelif nums[0] == nums[1] / nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '/' + str(nums[2]))\n"
    }
  ],
  "created": 1649832437,
  "object": "edit"
}
2022-04-13 06:47:20.029753 fix spelling mistakes 3 ["\n\nnums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] / nums[1] == nums[2]:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] == nums[1] + nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '+' + str(nums[2]))\nelif nums[0] == nums[1] - nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '-' + str(nums[2]))\nelif nums[0] == nums[1] * nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '*' + str(nums[2]))\nelif nums[0] == nums[1] / nums[2]:\n\n# comment\n    print(str(nums[0]) + '=' + str(nums[1]) + '/' + str(nums[2]))\n", "\n\nnums = [float(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] / nums[1] == nums[2]:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] == nums[1] + nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '+' + str(nums[2]))\nelif nums[0] == nums[1] - nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '-' + str(nums[2]))\nelif nums[0] == nums[1] * nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '*' + str(nums[2]))\nelif nums[0] == nums[1] / nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '/' + str(nums[2]))\n", "\nnums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] / nums[1] == nums[2]:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] == nums[1] + nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '+' + str(nums[2]))\nelif nums[0] == nums[1] - nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '-' + str(nums[2]))\nelif nums[0] == nums[1] * nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '*' + str(nums[2]))\nelif nums[0] == nums[1] / nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '/' + str(nums[2]))\n"]
2022-04-13 06:47:20.029790 size on output set 3
2022-04-13 06:47:20.029797 size on input set 3
2022-04-13 06:47:21.803773 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nnums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] / nums[1] == nums[2]:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] == nums[1] + nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '+' + str(nums[2]))\nelif nums[0] == nums[1] - nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '-' + str(nums[2]))\nelif nums[0] == nums[1] * nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '*' + str(nums[2]))\nelif nums[0] == nums[1] / nums[2]:\n\n    # comment\n    print(str(nums[0]) + '=' + str(nums[1]) + '/' + str(nums[2]))\n"
    },
    {
      "index": 1,
      "text": "\n\nnums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] / nums[1] == nums[2]:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] == nums[1] + nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '+' + str(nums[2]))\nelif nums[0] == nums[1] - nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '-' + str(nums[2]))\nelif nums[0] == nums[1] * nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '*' + str(nums[2]))\nelif nums[0] == nums[1] / nums[2]:\n\n    # comment\n    print(str(nums[0]) + '=' + str(nums[1]) + '/' + str(nums[2]))\n"
    },
    {
      "index": 2,
      "text": "\n\nnums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] / nums[1] == nums[2]:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] == nums[1] + nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '+' + str(nums[2]))\nelif nums[0] == nums[1] - nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '-' + str(nums[2]))\nelif nums[0] == nums[1] * nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '*' + str(nums[2]))\nelif nums[0] == nums[1] / nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '/' + str(nums[2]))\n"
    }
  ],
  "created": 1649832440,
  "object": "edit"
}
2022-04-13 06:47:21.804045 fix syntax errors 3 ["\n\nnums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] / nums[1] == nums[2]:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] == nums[1] + nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '+' + str(nums[2]))\nelif nums[0] == nums[1] - nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '-' + str(nums[2]))\nelif nums[0] == nums[1] * nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '*' + str(nums[2]))\nelif nums[0] == nums[1] / nums[2]:\n\n    # comment\n    print(str(nums[0]) + '=' + str(nums[1]) + '/' + str(nums[2]))\n", "\n\nnums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] / nums[1] == nums[2]:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] == nums[1] + nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '+' + str(nums[2]))\nelif nums[0] == nums[1] - nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '-' + str(nums[2]))\nelif nums[0] == nums[1] * nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '*' + str(nums[2]))\nelif nums[0] == nums[1] / nums[2]:\n\n    # comment\n    print(str(nums[0]) + '=' + str(nums[1]) + '/' + str(nums[2]))\n", "\n\nnums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] / nums[1] == nums[2]:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] == nums[1] + nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '+' + str(nums[2]))\nelif nums[0] == nums[1] - nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '-' + str(nums[2]))\nelif nums[0] == nums[1] * nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '*' + str(nums[2]))\nelif nums[0] == nums[1] / nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '/' + str(nums[2]))\n"]
2022-04-13 06:47:38.010390 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nnums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(f'{nums[0]}+{nums[1]}={nums[2]}')\nelif nums[0] - nums[1] == nums[2]:\n    print(f'{nums[0]}-{nums[1]}={nums[2]}')\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] / nums[1] == nums[2]:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] == nums[1] + nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '+' + str(nums[2]))\nelif nums[0] == nums[1] - nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '-' + str(nums[2]))\nelif nums[0] == nums[1] * nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '*' + str(nums[2]))\nelif nums[0] == nums[1] / nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '/' + str(nums[2]))\n"
    },
    {
      "index": 1,
      "text": "nums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] / nums[1] == nums[2]:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] == nums[1] + nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '+' + str(nums[2]))\nelif nums[0] == nums[1] - nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '-' + str(nums[2]))\nelif nums[0] == nums[1] * nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '*' + str(nums[2]))\nelif nums[0] == nums[1] / nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '/' + str(nums[2]))\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/python3\nnums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] / nums[1] == nums[2]:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] == nums[1] + nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '+' + str(nums[2]))\nelif nums[0] == nums[1] - nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '-' + str(nums[2]))\nelif nums[0] == nums[1] * nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '*' + str(nums[2]))\nelif nums[0] == nums[1] / nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '/' + str(nums[2]))\n"
    }
  ],
  "created": 1649832441,
  "object": "edit"
}
2022-04-13 06:47:38.010600 fix syntax errors 3 ["\nnums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(f'{nums[0]}+{nums[1]}={nums[2]}')\nelif nums[0] - nums[1] == nums[2]:\n    print(f'{nums[0]}-{nums[1]}={nums[2]}')\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] / nums[1] == nums[2]:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] == nums[1] + nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '+' + str(nums[2]))\nelif nums[0] == nums[1] - nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '-' + str(nums[2]))\nelif nums[0] == nums[1] * nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '*' + str(nums[2]))\nelif nums[0] == nums[1] / nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '/' + str(nums[2]))\n", "nums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] / nums[1] == nums[2]:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] == nums[1] + nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '+' + str(nums[2]))\nelif nums[0] == nums[1] - nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '-' + str(nums[2]))\nelif nums[0] == nums[1] * nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '*' + str(nums[2]))\nelif nums[0] == nums[1] / nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '/' + str(nums[2]))\n", "#!/usr/bin/python3\nnums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] / nums[1] == nums[2]:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] == nums[1] + nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '+' + str(nums[2]))\nelif nums[0] == nums[1] - nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '-' + str(nums[2]))\nelif nums[0] == nums[1] * nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '*' + str(nums[2]))\nelif nums[0] == nums[1] / nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '/' + str(nums[2]))\n"]
2022-04-13 06:47:40.246512 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0447\u0438\u0441\u0435\u043b \u043d\u0430 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435\n\nnums = [float(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] / nums[1] == nums[2]:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] == nums[1] + nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '+' + str(nums[2]))\nelif nums[0] == nums[1] - nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '-' + str(nums[2]))\nelif nums[0] == nums[1] * nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '*' + str(nums[2]))\nelif nums[0] == nums[1] / nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '/' + str(nums[2]))\n"
    },
    {
      "index": 1,
      "text": "\nnums = [float(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] / nums[1] == nums[2]:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] == nums[1] + nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '+' + str(nums[2]))\nelif nums[0] == nums[1] - nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '-' + str(nums[2]))\nelif nums[0] == nums[1] * nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '*' + str(nums[2]))\nelif nums[0] == nums[1] / nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '/' + str(nums[2]))\n"
    },
    {
      "index": 2,
      "text": "\nnums = [float(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] / nums[1] == nums[2]:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] == nums[1] + nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '+' + str(nums[2]))\nelif nums[0] == nums[1] - nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '-' + str(nums[2]))\nelif nums[0] == nums[1] * nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '*' + str(nums[2]))\nelif nums[0] == nums[1] / nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '/' + str(nums[2]))\n"
    }
  ],
  "created": 1649832458,
  "object": "edit"
}
2022-04-13 06:47:40.246754 fix syntax errors 3 ["\n# проверка чисел на выражение\n\nnums = [float(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] / nums[1] == nums[2]:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] == nums[1] + nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '+' + str(nums[2]))\nelif nums[0] == nums[1] - nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '-' + str(nums[2]))\nelif nums[0] == nums[1] * nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '*' + str(nums[2]))\nelif nums[0] == nums[1] / nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '/' + str(nums[2]))\n", "\nnums = [float(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] / nums[1] == nums[2]:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] == nums[1] + nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '+' + str(nums[2]))\nelif nums[0] == nums[1] - nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '-' + str(nums[2]))\nelif nums[0] == nums[1] * nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '*' + str(nums[2]))\nelif nums[0] == nums[1] / nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '/' + str(nums[2]))\n", "\nnums = [float(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] / nums[1] == nums[2]:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] == nums[1] + nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '+' + str(nums[2]))\nelif nums[0] == nums[1] - nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '-' + str(nums[2]))\nelif nums[0] == nums[1] * nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '*' + str(nums[2]))\nelif nums[0] == nums[1] / nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '/' + str(nums[2]))\n"]
2022-04-13 06:47:40.246813 size on output set 7
2022-04-13 06:47:40.246826 num operations 2
2022-04-13 06:47:40.246831 size on input set 1
2022-04-13 06:47:49.153737 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\n# Read the numbers\nnums = sys.stdin.readline().split()\nnums = [int(num) for num in nums]\n\n# Compute the possible answers\nanswers = []\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            if i < 2:\n                a = eval(str(nums[0]) + [\"+\", \"-\"][i] + str(nums[1]))\n            else:\n                a = eval(str(nums[0]) + [\"*\", \"/\"][i-2] + str(nums[1]))\n            if j < 2:\n                b = eval(str(a) + [\"+\", \"-\"][j] + str(nums[2]))\n            else:\n                b = eval(str(a) + [\"*\", \"/\"][j-2] + str(nums[2]))\n            if k < 2:\n                c = eval(str(nums[0]) + [\"+\", \"-\"][k] + str(b))\n            else:\n                c = eval(str(nums[0]) + [\"*\", \"/\"][k-2] + str(b))\n            if c == nums[2]:\n                answers.append([(nums[0], nums[1]), [\"+\", \"-\"][i], (a, nums[2]), [\"+\", \"-\"][j], (nums[0], b), [\"+\", \"-\"][k]])\n\n# Print the first answer that satisfies the conditions\nfor answer in answers:\n    if answer[2][0] == answer[4][1] and answer[4][0] == answer[0][0]:\n        print(\"{}{}{}={}{}{}\".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[4][1]))\n        break\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\n# Read the numbers\nnums = sys.stdin.readline().split()\nnums = [int(num) for num in nums]\n\n# Compute the possible answers\nanswers = []\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            if i < 2:\n                a = eval(str(nums[0]) + [\"+\", \"-\"][i] + str(nums[1])) \n            else:\n                a = eval(str(nums[0]) + [\"*\", \"/\"][i-2] + str(nums[1]))\n            if j < 2:\n                b = eval(str(a) + [\"+\", \"-\"][j] + str(nums[2]))\n            else:\n                b = eval(str(a) + [\"*\", \"/\"][j-2] + str(nums[2]))\n            if k < 2:\n                c = eval(str(nums[0]) + [\"+\", \"-\"][k] + str(b))\n            else:\n                c = eval(str(nums[0]) + [\"*\", \"/\"][k-2] + str(b))\n            if c == nums[2]:\n                answers.append([(nums[0], nums[1]), [\"+\", \"-\"][i], (a, nums[2]), [\"+\", \"-\"][j], (nums[0], b), [\"+\", \"-\"][k]])\n\n# Print the first answer\nfor answer in answers:\n    if answer[2][0] == answer[4][1] and answer[4][0] == answer[0][0]:\n        print(\"{}{}{}={}{}{}\".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[4][1]))\n        break\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\n# Read the numbers\nnums = sys.stdin.readline().split()\nnums = [int(num) for num in nums]\n\n# Compute the possible answers\nanswers = []\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            if i < 2:\n                a = eval(str(nums[0]) + [\"+\", \"-\"][i] + str(nums[1]))\n            else:\n                a = eval(str(nums[0]) + [\"*\", \"/\"][i-2] + str(nums[1]))\n            if j < 2:\n                b = eval(str(a) + [\"+\", \"-\"][j] + str(nums[2]))\n            else:\n                b = eval(str(a) + [\"*\", \"/\"][j-2] + str(nums[2]))\n            if k < 2:\n                c = eval(str(b) + [\"+\", \"-\"][k] + str(nums[3]))\n            else:\n                c = eval(str(b) + [\"*\", \"/\"][k-2] + str(nums[3]))\n            if c == nums[3]:\n                answers.append([(nums[0], nums[1]), [\"+\", \"-\"][i], (a, nums[2]), [\"+\", \"-\"][j], (b, nums[3]), [\"+\", \"-\"][k]])\n\n# Print the first answer\nfor answer in answers:\n    if answer[2][0] == answer[4][0] and answer[4][1] == answer[0][0]:\n        print(\"{}{}{}={}{}{}\".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[4][0]))\n        break\n"
    }
  ],
  "created": 1649832460,
  "object": "edit"
}
2022-04-13 06:47:49.153996 fix spelling mistakes 3 ['\n\nimport sys\n\n# Read the numbers\nnums = sys.stdin.readline().split()\nnums = [int(num) for num in nums]\n\n# Compute the possible answers\nanswers = []\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            if i < 2:\n                a = eval(str(nums[0]) + ["+", "-"][i] + str(nums[1]))\n            else:\n                a = eval(str(nums[0]) + ["*", "/"][i-2] + str(nums[1]))\n            if j < 2:\n                b = eval(str(a) + ["+", "-"][j] + str(nums[2]))\n            else:\n                b = eval(str(a) + ["*", "/"][j-2] + str(nums[2]))\n            if k < 2:\n                c = eval(str(nums[0]) + ["+", "-"][k] + str(b))\n            else:\n                c = eval(str(nums[0]) + ["*", "/"][k-2] + str(b))\n            if c == nums[2]:\n                answers.append([(nums[0], nums[1]), ["+", "-"][i], (a, nums[2]), ["+", "-"][j], (nums[0], b), ["+", "-"][k]])\n\n# Print the first answer that satisfies the conditions\nfor answer in answers:\n    if answer[2][0] == answer[4][1] and answer[4][0] == answer[0][0]:\n        print("{}{}{}={}{}{}".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[4][1]))\n        break\n', '\n\nimport sys\n\n# Read the numbers\nnums = sys.stdin.readline().split()\nnums = [int(num) for num in nums]\n\n# Compute the possible answers\nanswers = []\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            if i < 2:\n                a = eval(str(nums[0]) + ["+", "-"][i] + str(nums[1])) \n            else:\n                a = eval(str(nums[0]) + ["*", "/"][i-2] + str(nums[1]))\n            if j < 2:\n                b = eval(str(a) + ["+", "-"][j] + str(nums[2]))\n            else:\n                b = eval(str(a) + ["*", "/"][j-2] + str(nums[2]))\n            if k < 2:\n                c = eval(str(nums[0]) + ["+", "-"][k] + str(b))\n            else:\n                c = eval(str(nums[0]) + ["*", "/"][k-2] + str(b))\n            if c == nums[2]:\n                answers.append([(nums[0], nums[1]), ["+", "-"][i], (a, nums[2]), ["+", "-"][j], (nums[0], b), ["+", "-"][k]])\n\n# Print the first answer\nfor answer in answers:\n    if answer[2][0] == answer[4][1] and answer[4][0] == answer[0][0]:\n        print("{}{}{}={}{}{}".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[4][1]))\n        break\n', '\n\nimport sys\n\n# Read the numbers\nnums = sys.stdin.readline().split()\nnums = [int(num) for num in nums]\n\n# Compute the possible answers\nanswers = []\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            if i < 2:\n                a = eval(str(nums[0]) + ["+", "-"][i] + str(nums[1]))\n            else:\n                a = eval(str(nums[0]) + ["*", "/"][i-2] + str(nums[1]))\n            if j < 2:\n                b = eval(str(a) + ["+", "-"][j] + str(nums[2]))\n            else:\n                b = eval(str(a) + ["*", "/"][j-2] + str(nums[2]))\n            if k < 2:\n                c = eval(str(b) + ["+", "-"][k] + str(nums[3]))\n            else:\n                c = eval(str(b) + ["*", "/"][k-2] + str(nums[3]))\n            if c == nums[3]:\n                answers.append([(nums[0], nums[1]), ["+", "-"][i], (a, nums[2]), ["+", "-"][j], (b, nums[3]), ["+", "-"][k]])\n\n# Print the first answer\nfor answer in answers:\n    if answer[2][0] == answer[4][0] and answer[4][1] == answer[0][0]:\n        print("{}{}{}={}{}{}".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[4][0]))\n        break\n']
2022-04-13 06:47:49.154047 size on output set 3
2022-04-13 06:47:49.154054 size on input set 3
2022-04-13 06:48:08.216421 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\nimport re\n\n\n\ndef main():\n    nums = sys.stdin.readline().split()\n    nums = [int(num) for num in nums]\n    answers = []\n    for i in range(4):\n        for j in range(4):\n            for k in range(4):\n                if i < 2:\n                    a = eval(str(nums[0]) + [\"+\", \"-\"][i] + str(nums[1]))\n                else:\n                    a = eval(str(nums[0]) + [\"*\", \"/\"][i-2] + str(nums[1]))\n                if j < 2:\n                    b = eval(str(a) + [\"+\", \"-\"][j] + str(nums[2]))\n                else:\n                    b = eval(str(a) + [\"*\", \"/\"][j-2] + str(nums[2]))\n                if k < 2:\n                    c = eval(str(b) + [\"+\", \"-\"][k] + str(nums[3]))\n                else:\n                    c = eval(str(b) + [\"*\", \"/\"][k-2] + str(nums[3]))\n                if c == nums[3]:\n                    answers.append([(nums[0], nums[1]), [\"+\", \"-\"][i], (a, nums[2]), [\"+\", \"-\"][j], (b, nums[3]), [\"+\", \"-\"][k]])\n\n    for answer in answers:\n        if answer[2][0] == answer[4][0] and answer[4][1] == answer[0][0]:\n            print(\"{}{}{}={}{}{}\".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[4][0]))\n            break\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\n# Read the numbers\nnums = sys.stdin.readline().split()\nnums = [int(num) for num in nums]\n\n# Compute the possible answers\nanswers = []\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            if i < 2:\n                a = eval(str(nums[0]) + [\"+\", \"-\"][i] + str(nums[1])) # eval() is a function that evaluates a string as if it were a Python expression\n            else:\n                a = eval(str(nums[0]) + [\"*\", \"/\"][i-2] + str(nums[1]))\n            if j < 2:\n                b = eval(str(a) + [\"+\", \"-\"][j] + str(nums[2]))\n            else:\n                b = eval(str(a) + [\"*\", \"/\"][j-2] + str(nums[2]))\n            if k < 2:\n                c = eval(str(b) + [\"+\", \"-\"][k] + str(nums[3]))\n            else:\n                c = eval(str(b) + [\"*\", \"/\"][k-2] + str(nums[3]))\n            if c == nums[3]:\n                answers.append([(nums[0], nums[1]), [\"+\", \"-\"][i], (a, nums[2]), [\"+\", \"-\"][j], (b, nums[3]), [\"+\", \"-\"][k]])\n\n# Print the first answer\nfor answer in answers:\n    if answer[2][0] == answer[4][0] and answer[4][1] == answer[0][0]:\n        print(\"{}{}{}={}{}{}\".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[4][0]))\n        break\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\n# Read the numbers\nnums = sys.stdin.readline().split()\nnums = [int(num) for num in nums]\n\n# Compute the possible answers\nanswers = []\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            if i < 2:\n                a = eval(str(nums[0]) + [\"+\", \"-\"][i] + str(nums[1]))\n            else:\n                a = eval(str(nums[0]) + [\"*\", \"/\"][i-2] + str(nums[1]))\n            if j < 2:\n                b = eval(str(a) + [\"+\", \"-\"][j] + str(nums[2]))\n            else:\n                b = eval(str(a) + [\"*\", \"/\"][j-2] + str(nums[2]))\n            if k < 2:\n                c = eval(str(b) + [\"+\", \"-\"][k] + str(nums[3]))\n            else:\n                c = eval(str(b) + [\"*\", \"/\"][k-2] + str(nums[3]))\n            if c == nums[3]:\n                answers.append([(nums[0], nums[1]), [\"+\", \"-\"][i], (a, nums[2]), [\"+\", \"-\"][j], (b, nums[3]), [\"+\", \"-\"][k]])\n\n# Print the first answer\nfor answer in answers:\n    if answer[2][0] == answer[4][0] and answer[4][1] == answer[0][0]:\n        print(\"{}{}{}={}{}{}\".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[4][0]))\n        break\n"
    }
  ],
  "created": 1649832469,
  "object": "edit"
}
2022-04-13 06:48:08.216600 fix syntax errors 3 ['import sys\nimport re\n\n\n\ndef main():\n    nums = sys.stdin.readline().split()\n    nums = [int(num) for num in nums]\n    answers = []\n    for i in range(4):\n        for j in range(4):\n            for k in range(4):\n                if i < 2:\n                    a = eval(str(nums[0]) + ["+", "-"][i] + str(nums[1]))\n                else:\n                    a = eval(str(nums[0]) + ["*", "/"][i-2] + str(nums[1]))\n                if j < 2:\n                    b = eval(str(a) + ["+", "-"][j] + str(nums[2]))\n                else:\n                    b = eval(str(a) + ["*", "/"][j-2] + str(nums[2]))\n                if k < 2:\n                    c = eval(str(b) + ["+", "-"][k] + str(nums[3]))\n                else:\n                    c = eval(str(b) + ["*", "/"][k-2] + str(nums[3]))\n                if c == nums[3]:\n                    answers.append([(nums[0], nums[1]), ["+", "-"][i], (a, nums[2]), ["+", "-"][j], (b, nums[3]), ["+", "-"][k]])\n\n    for answer in answers:\n        if answer[2][0] == answer[4][0] and answer[4][1] == answer[0][0]:\n            print("{}{}{}={}{}{}".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[4][0]))\n            break\n\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\n# Read the numbers\nnums = sys.stdin.readline().split()\nnums = [int(num) for num in nums]\n\n# Compute the possible answers\nanswers = []\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            if i < 2:\n                a = eval(str(nums[0]) + ["+", "-"][i] + str(nums[1])) # eval() is a function that evaluates a string as if it were a Python expression\n            else:\n                a = eval(str(nums[0]) + ["*", "/"][i-2] + str(nums[1]))\n            if j < 2:\n                b = eval(str(a) + ["+", "-"][j] + str(nums[2]))\n            else:\n                b = eval(str(a) + ["*", "/"][j-2] + str(nums[2]))\n            if k < 2:\n                c = eval(str(b) + ["+", "-"][k] + str(nums[3]))\n            else:\n                c = eval(str(b) + ["*", "/"][k-2] + str(nums[3]))\n            if c == nums[3]:\n                answers.append([(nums[0], nums[1]), ["+", "-"][i], (a, nums[2]), ["+", "-"][j], (b, nums[3]), ["+", "-"][k]])\n\n# Print the first answer\nfor answer in answers:\n    if answer[2][0] == answer[4][0] and answer[4][1] == answer[0][0]:\n        print("{}{}{}={}{}{}".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[4][0]))\n        break\n', '\nimport sys\n\n# Read the numbers\nnums = sys.stdin.readline().split()\nnums = [int(num) for num in nums]\n\n# Compute the possible answers\nanswers = []\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            if i < 2:\n                a = eval(str(nums[0]) + ["+", "-"][i] + str(nums[1]))\n            else:\n                a = eval(str(nums[0]) + ["*", "/"][i-2] + str(nums[1]))\n            if j < 2:\n                b = eval(str(a) + ["+", "-"][j] + str(nums[2]))\n            else:\n                b = eval(str(a) + ["*", "/"][j-2] + str(nums[2]))\n            if k < 2:\n                c = eval(str(b) + ["+", "-"][k] + str(nums[3]))\n            else:\n                c = eval(str(b) + ["*", "/"][k-2] + str(nums[3]))\n            if c == nums[3]:\n                answers.append([(nums[0], nums[1]), ["+", "-"][i], (a, nums[2]), ["+", "-"][j], (b, nums[3]), ["+", "-"][k]])\n\n# Print the first answer\nfor answer in answers:\n    if answer[2][0] == answer[4][0] and answer[4][1] == answer[0][0]:\n        print("{}{}{}={}{}{}".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[4][0]))\n        break\n']
2022-04-13 06:48:18.310779 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\n# Read the numbers\nnums = sys.stdin.readline().split()\nnums = [int(num) for num in nums]\n\n# Compute the possible answers\nanswers = []\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            if i < 2:\n                a = eval(str(nums[0]) + [\"+\", \"-\"][i] + str(nums[1]))\n            else:\n                a = eval(str(nums[0]) + [\"*\", \"/\"][i-2] + str(nums[1]))\n            if j < 2:\n                b = eval(str(a) + [\"+\", \"-\"][j] + str(nums[2]))\n            else:\n                b = eval(str(a) + [\"*\", \"/\"][j-2] + str(nums[2]))\n            if k < 2:\n                c = eval(str(nums[0]) + [\"+\", \"-\"][k] + str(b))\n            else:\n                c = eval(str(nums[0]) + [\"*\", \"/\"][k-2] + str(b))\n            if c == nums[2]:\n                answers.append([(nums[0], nums[1]), [\"+\", \"-\"][i], (a, nums[2]), [\"+\", \"-\"][j], (nums[0], b), [\"+\", \"-\"][k]])\n\n# Print the first answer\nfor answer in answers:\n    if answer[2][0] == answer[4][1] and answer[4][0] == answer[0][0]:\n        print(\"{}{}{}={}{}{}\".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[4][1]))\n        break\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\n# Read the number\nnums = [int(num) for num in sys.stdin.readline().split()]\n\n# Compute the possible answers\nanswers = []\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            if i < 2:\n                a = eval(str(nums[0]) + [\"+\", \"-\"][i] + str(nums[1])) \n            else:\n                a = eval(str(nums[0]) + [\"*\", \"/\"][i-2] + str(nums[1]))\n            if j < 2:\n                b = eval(str(a) + [\"+\", \"-\"][j] + str(nums[2]))\n            else:\n                b = eval(str(a) + [\"*\", \"/\"][j-2] + str(nums[2]))\n            if k < 2:\n                c = eval(str(nums[0]) + [\"+\", \"-\"][k] + str(b))\n            else:\n                c = eval(str(nums[0]) + [\"*\", \"/\"][k-2] + str(b))\n            if c == nums[3]:\n                answers.append([(nums[0], nums[1]), [\"+\", \"-\"][i], (a, nums[2]), [\"+\", \"-\"][j], (nums[0], b), [\"+\", \"-\"][k]])\n\n# Print the first answer\nfor answer in answers:\n    if answer[2][0] == answer[4][1] and answer[4][0] == answer[0][0]:\n        print(\"{}{}{}={}{}{}\".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[4][1]))\n        break\n"
    },
    {
      "index": 2,
      "text": "import sys\n\n# Read the numbers\nnums = sys.stdin.readline().split()\nnums = [int(num) for num in nums]\n\n# Compute the possible answers\nanswers = []\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            if i < 2:\n                a = eval(str(nums[0]) + [\"+\", \"-\"][i] + str(nums[1])) \n            else:\n                a = eval(str(nums[0]) + [\"*\", \"/\"][i-2] + str(nums[1]))\n            if j < 2:\n                b = eval(str(a) + [\"+\", \"-\"][j] + str(nums[2]))\n            else:\n                b = eval(str(a) + [\"*\", \"/\"][j-2] + str(nums[2]))\n            if k < 2:\n                c = eval(str(nums[0]) + [\"+\", \"-\"][k] + str(b))\n            else:\n                c = eval(str(nums[0]) + [\"*\", \"/\"][k-2] + str(b))\n            if c == nums[2]:\n                answers.append([(nums[0], nums[1]), [\"+\", \"-\"][i], (a, nums[2]), [\"+\", \"-\"][j], (nums[0], b), [\"+\", \"-\"][k]])\n\n# Print the first answer\nfor answer in answers:\n    if answer[2][0] == answer[4][1] and answer[4][0] == answer[0][0]:\n        print(\"{}{}{}={}{}{}\".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[4][1]))\n        break\n"
    }
  ],
  "created": 1649832488,
  "object": "edit"
}
2022-04-13 06:48:18.310983 fix syntax errors 3 ['\nimport sys\n\n# Read the numbers\nnums = sys.stdin.readline().split()\nnums = [int(num) for num in nums]\n\n# Compute the possible answers\nanswers = []\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            if i < 2:\n                a = eval(str(nums[0]) + ["+", "-"][i] + str(nums[1]))\n            else:\n                a = eval(str(nums[0]) + ["*", "/"][i-2] + str(nums[1]))\n            if j < 2:\n                b = eval(str(a) + ["+", "-"][j] + str(nums[2]))\n            else:\n                b = eval(str(a) + ["*", "/"][j-2] + str(nums[2]))\n            if k < 2:\n                c = eval(str(nums[0]) + ["+", "-"][k] + str(b))\n            else:\n                c = eval(str(nums[0]) + ["*", "/"][k-2] + str(b))\n            if c == nums[2]:\n                answers.append([(nums[0], nums[1]), ["+", "-"][i], (a, nums[2]), ["+", "-"][j], (nums[0], b), ["+", "-"][k]])\n\n# Print the first answer\nfor answer in answers:\n    if answer[2][0] == answer[4][1] and answer[4][0] == answer[0][0]:\n        print("{}{}{}={}{}{}".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[4][1]))\n        break\n', '\n\nimport sys\n\n# Read the number\nnums = [int(num) for num in sys.stdin.readline().split()]\n\n# Compute the possible answers\nanswers = []\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            if i < 2:\n                a = eval(str(nums[0]) + ["+", "-"][i] + str(nums[1])) \n            else:\n                a = eval(str(nums[0]) + ["*", "/"][i-2] + str(nums[1]))\n            if j < 2:\n                b = eval(str(a) + ["+", "-"][j] + str(nums[2]))\n            else:\n                b = eval(str(a) + ["*", "/"][j-2] + str(nums[2]))\n            if k < 2:\n                c = eval(str(nums[0]) + ["+", "-"][k] + str(b))\n            else:\n                c = eval(str(nums[0]) + ["*", "/"][k-2] + str(b))\n            if c == nums[3]:\n                answers.append([(nums[0], nums[1]), ["+", "-"][i], (a, nums[2]), ["+", "-"][j], (nums[0], b), ["+", "-"][k]])\n\n# Print the first answer\nfor answer in answers:\n    if answer[2][0] == answer[4][1] and answer[4][0] == answer[0][0]:\n        print("{}{}{}={}{}{}".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[4][1]))\n        break\n', 'import sys\n\n# Read the numbers\nnums = sys.stdin.readline().split()\nnums = [int(num) for num in nums]\n\n# Compute the possible answers\nanswers = []\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            if i < 2:\n                a = eval(str(nums[0]) + ["+", "-"][i] + str(nums[1])) \n            else:\n                a = eval(str(nums[0]) + ["*", "/"][i-2] + str(nums[1]))\n            if j < 2:\n                b = eval(str(a) + ["+", "-"][j] + str(nums[2]))\n            else:\n                b = eval(str(a) + ["*", "/"][j-2] + str(nums[2]))\n            if k < 2:\n                c = eval(str(nums[0]) + ["+", "-"][k] + str(b))\n            else:\n                c = eval(str(nums[0]) + ["*", "/"][k-2] + str(b))\n            if c == nums[2]:\n                answers.append([(nums[0], nums[1]), ["+", "-"][i], (a, nums[2]), ["+", "-"][j], (nums[0], b), ["+", "-"][k]])\n\n# Print the first answer\nfor answer in answers:\n    if answer[2][0] == answer[4][1] and answer[4][0] == answer[0][0]:\n        print("{}{}{}={}{}{}".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[4][1]))\n        break\n']
2022-04-13 06:48:30.425064 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\n# Read the numbers\nnums = sys.stdin.readline().split()\nnums = [int(num) for num in nums]\n\n# Compute the possible answers\nanswers = []\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            if i < 2:\n                a = eval(str(nums[0]) + [\"+\", \"-\"][i] + str(nums[1]) + [\"+\", \"-\"][k])\n            else:\n                a = eval(str(nums[0]) + [\"*\", \"/\"][i-2] + str(nums[1]) + [\"+\", \"-\"][k])\n            if j < 2:\n                b = eval(str(a) + [\"+\", \"-\"][j] + str(nums[2]))\n            else:\n                b = eval(str(a) + [\"*\", \"/\"][j-2] + str(nums[2]))\n            if k < 2:\n                c = eval(str(b) + [\"+\", \"-\"][k] + str(nums[3]))\n            else:\n                c = eval(str(b) + [\"*\", \"/\"][k-2] + str(nums[3]))\n            if c == nums[3]:\n                answers.append([(nums[0], nums[1]), [\"+\", \"-\"][i], (a, nums[2]), [\"+\", \"-\"][j], (b, nums[3]), [\"+\", \"-\"][k]])\n\n# Print the first answer that satisfies the conditions\nfor answer in answers:\n    if answer[2][0] == answer[4][0] and answer[4][1] == answer[0][1]:\n        print(\"{}{}{}={}{}{}\".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[4][0]))\n        break\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\n# Read the numbers\nnums = sys.stdin.readline().split()\nnums = [int(num) for num in nums]\n\n# Compute the possible answers\nanswers = []\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            if i < 2:\n                a = eval(str(nums[0]) + [\" + \", \" - \"][i] + str(nums[1]))\n            else:\n                a = eval(str(nums[0]) + [\"*\", \"/\"][i-2] + str(nums[1]))\n            if j < 2:\n                b = eval(str(a) + [\" + \", \" - \"][j] + str(nums[2]))\n            else:\n                b = eval(str(a) + [\" * \", \" / \"][j-2] + str(nums[2]))\n            if k < 2:\n                c = eval(str(nums[0]) + [\" + \", \" - \"][k] + str(b))\n            else:\n                c = eval(str(nums[0]) + [\" * \", \" / \"][k-2] + str(b))\n            if c == nums[2]:\n                answers.append([(nums[0], nums[1]), [\"+\", \"-\"][i], (a, nums[2]), [\"+\", \"-\"][j], (nums[0], b), [\"+\", \"-\"][k]])\n\n# Print the first answer that satisfies the conditions\nfor answer in answers:\n    if answer[2][0] == answer[4][1] and answer[4][0] == answer[0][0]:\n        print(\"{}{}{}={}{}{}\".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[4][1]))\n        break\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\n# Read the numbers\nnums = sys.stdin.readline().split()\nnums = [int(num) for num in nums]\n\n# Compute the possible answers\nanswers = []\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            if i < 2:\n                a = eval(str(nums[0]) + [\"+\", \"-\"][i] + str(nums[1]))\n            else:\n                a = eval(str(nums[0]) + [\"*\", \"/\"][i-2] + str(nums[1]))\n            if j < 2:\n                b = eval(str(a) + [\"+\", \"-\"][j] + str(nums[2]))\n            else:\n                b = eval(str(a) + [\"*\", \"/\"][j-2] + str(nums[2]))\n            if k < 2:\n                c = eval(str(nums[0]) + [\"+\", \"-\"][k] + str(b))\n            else:\n                c = eval(str(nums[0]) + [\"*\", \"/\"][k-2] + str(b))\n            if c == nums[3]:\n                answers.append([(nums[0], nums[1]), [\"+\", \"-\"][i], (a, nums[2]), [\"+\", \"-\"][j], (nums[0], b), [\"+\", \"-\"][k]])\n\n# Print the first answer that satisfies the conditions\nfor answer in answers:\n    if answer[2][0] == answer[4][1] and answer[4][0] == answer[0][0]:\n        print(\"{}{}{}={}{}{}\".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[4][1]))\n        break\n"
    }
  ],
  "created": 1649832498,
  "object": "edit"
}
2022-04-13 06:48:30.425339 fix syntax errors 3 ['\n\nimport sys\n\n# Read the numbers\nnums = sys.stdin.readline().split()\nnums = [int(num) for num in nums]\n\n# Compute the possible answers\nanswers = []\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            if i < 2:\n                a = eval(str(nums[0]) + ["+", "-"][i] + str(nums[1]) + ["+", "-"][k])\n            else:\n                a = eval(str(nums[0]) + ["*", "/"][i-2] + str(nums[1]) + ["+", "-"][k])\n            if j < 2:\n                b = eval(str(a) + ["+", "-"][j] + str(nums[2]))\n            else:\n                b = eval(str(a) + ["*", "/"][j-2] + str(nums[2]))\n            if k < 2:\n                c = eval(str(b) + ["+", "-"][k] + str(nums[3]))\n            else:\n                c = eval(str(b) + ["*", "/"][k-2] + str(nums[3]))\n            if c == nums[3]:\n                answers.append([(nums[0], nums[1]), ["+", "-"][i], (a, nums[2]), ["+", "-"][j], (b, nums[3]), ["+", "-"][k]])\n\n# Print the first answer that satisfies the conditions\nfor answer in answers:\n    if answer[2][0] == answer[4][0] and answer[4][1] == answer[0][1]:\n        print("{}{}{}={}{}{}".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[4][0]))\n        break\n', '\nimport sys\n\n# Read the numbers\nnums = sys.stdin.readline().split()\nnums = [int(num) for num in nums]\n\n# Compute the possible answers\nanswers = []\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            if i < 2:\n                a = eval(str(nums[0]) + [" + ", " - "][i] + str(nums[1]))\n            else:\n                a = eval(str(nums[0]) + ["*", "/"][i-2] + str(nums[1]))\n            if j < 2:\n                b = eval(str(a) + [" + ", " - "][j] + str(nums[2]))\n            else:\n                b = eval(str(a) + [" * ", " / "][j-2] + str(nums[2]))\n            if k < 2:\n                c = eval(str(nums[0]) + [" + ", " - "][k] + str(b))\n            else:\n                c = eval(str(nums[0]) + [" * ", " / "][k-2] + str(b))\n            if c == nums[2]:\n                answers.append([(nums[0], nums[1]), ["+", "-"][i], (a, nums[2]), ["+", "-"][j], (nums[0], b), ["+", "-"][k]])\n\n# Print the first answer that satisfies the conditions\nfor answer in answers:\n    if answer[2][0] == answer[4][1] and answer[4][0] == answer[0][0]:\n        print("{}{}{}={}{}{}".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[4][1]))\n        break\n', '\n\nimport sys\n\n# Read the numbers\nnums = sys.stdin.readline().split()\nnums = [int(num) for num in nums]\n\n# Compute the possible answers\nanswers = []\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            if i < 2:\n                a = eval(str(nums[0]) + ["+", "-"][i] + str(nums[1]))\n            else:\n                a = eval(str(nums[0]) + ["*", "/"][i-2] + str(nums[1]))\n            if j < 2:\n                b = eval(str(a) + ["+", "-"][j] + str(nums[2]))\n            else:\n                b = eval(str(a) + ["*", "/"][j-2] + str(nums[2]))\n            if k < 2:\n                c = eval(str(nums[0]) + ["+", "-"][k] + str(b))\n            else:\n                c = eval(str(nums[0]) + ["*", "/"][k-2] + str(b))\n            if c == nums[3]:\n                answers.append([(nums[0], nums[1]), ["+", "-"][i], (a, nums[2]), ["+", "-"][j], (nums[0], b), ["+", "-"][k]])\n\n# Print the first answer that satisfies the conditions\nfor answer in answers:\n    if answer[2][0] == answer[4][1] and answer[4][0] == answer[0][0]:\n        print("{}{}{}={}{}{}".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[4][1]))\n        break\n']
2022-04-13 06:48:30.425411 size on output set 9
2022-04-13 06:48:30.425426 num operations 2
2022-04-13 06:48:30.425432 size on input set 1
2022-04-13 06:48:32.918563 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    # get input\n    inp = input().split()\n    a = int(inp[0])\n    b = int(inp[1])\n    c = int(inp[2])\n    # check for possible operations when c is a multiple of gcd(a, b)\n    if c % gcd(a, b) == 0:\n        if c // gcd(a, b) == a + b:\n            print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a - b:\n            print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a * b:\n            print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a // b:\n            print(str(a) + \"/\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == b // a:\n            print(str(b) + \"/\" + str(a) + \"=\" + str(c))\n        elif c // gcd(a, b) == a // lcm(a, b):\n            print(str(a) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n        elif c // gcd(a, b) == b // lcm(a, b):\n            print(str(b) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n    # check for possible operations when c is not a multiple of gcd(a, b)\n    elif c == a + b:\n        print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n    elif c == a - b:\n        print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n    elif c == a * b:\n        print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n    elif c == a // b:\n        print(str(a) + \"/\" + str(b) + \"=\" + str(c))\n    elif c == b // a:\n        print(str(b) + \"/\" + str(a) + \"=\" + str(c))\n    elif c == a // lcm(a, b):\n        print(str(a) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n    elif c == b // lcm(a, b):\n        print(str(b) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    # get input\n    inp = input().split()\n    a = int(inp[0])\n    b = int(inp[1])\n    c = int(inp[2])\n    # check for possible operations and print out\n    if c % gcd(a, b) == 0:\n        if c // gcd(a, b) == a + b:\n            print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a - b:\n            print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a * b:\n            print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a // b:\n            print(str(a) + \"/\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == b // a:\n            print(str(b) + \"/\" + str(a) + \"=\" + str(c))\n        elif c // gcd(a, b) == a // lcm(a, b):\n            print(str(a) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n        elif c // gcd(a, b) == b // lcm(a, b):\n            print(str(b) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n    elif c == a + b:\n        print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n    elif c == a - b:\n        print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n    elif c == a * b:\n        print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n    elif c == a // b:\n        print(str(a) + \"/\" + str(b) + \"=\" + str(c))\n    elif c == b // a:\n        print(str(b) + \"/\" + str(a) + \"=\" + str(c))\n    elif c == a // lcm(a, b):\n        print(str(a) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n    elif c == b // lcm(a, b):\n        print(str(b) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    # get input\n    inp = input().split()\n    a = int(inp[0])\n    b = int(inp[1])\n    c = int(inp[2])\n    # check for possible operation\n    if c % gcd(a, b) == 0:\n        if c // gcd(a, b) == a + b:\n            print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a - b:\n            print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a * b:\n            print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a // b:\n            print(str(a) + \"/\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == b // a:\n            print(str(b) + \"/\" + str(a) + \"=\" + str(c))\n        elif c // gcd(a, b) == a // lcm(a, b):\n            print(str(a) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n        elif c // gcd(a, b) == b // lcm(a, b):\n            print(str(b) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n    elif c == a + b:\n        print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n    elif c == a - b:\n        print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n    elif c == a * b:\n        print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n    elif c == a // b:\n        print(str(a) + \"/\" + str(b) + \"=\" + str(c))\n    elif c == b // a:\n        print(str(b) + \"/\" + str(a) + \"=\" + str(c))\n    elif c == a // lcm(a, b):\n        print(str(a) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n    elif c == b // lcm(a, b):\n        print(str(b) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649832510,
  "object": "edit"
}
2022-04-13 06:48:32.918814 fix spelling mistakes 3 ['\n\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    # get input\n    inp = input().split()\n    a = int(inp[0])\n    b = int(inp[1])\n    c = int(inp[2])\n    # check for possible operations when c is a multiple of gcd(a, b)\n    if c % gcd(a, b) == 0:\n        if c // gcd(a, b) == a + b:\n            print(str(a) + "+" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a - b:\n            print(str(a) + "-" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a * b:\n            print(str(a) + "*" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a // b:\n            print(str(a) + "/" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == b // a:\n            print(str(b) + "/" + str(a) + "=" + str(c))\n        elif c // gcd(a, b) == a // lcm(a, b):\n            print(str(a) + "/" + str(lcm(a, b)) + "=" + str(c))\n        elif c // gcd(a, b) == b // lcm(a, b):\n            print(str(b) + "/" + str(lcm(a, b)) + "=" + str(c))\n    # check for possible operations when c is not a multiple of gcd(a, b)\n    elif c == a + b:\n        print(str(a) + "+" + str(b) + "=" + str(c))\n    elif c == a - b:\n        print(str(a) + "-" + str(b) + "=" + str(c))\n    elif c == a * b:\n        print(str(a) + "*" + str(b) + "=" + str(c))\n    elif c == a // b:\n        print(str(a) + "/" + str(b) + "=" + str(c))\n    elif c == b // a:\n        print(str(b) + "/" + str(a) + "=" + str(c))\n    elif c == a // lcm(a, b):\n        print(str(a) + "/" + str(lcm(a, b)) + "=" + str(c))\n    elif c == b // lcm(a, b):\n        print(str(b) + "/" + str(lcm(a, b)) + "=" + str(c))\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    # get input\n    inp = input().split()\n    a = int(inp[0])\n    b = int(inp[1])\n    c = int(inp[2])\n    # check for possible operations and print out\n    if c % gcd(a, b) == 0:\n        if c // gcd(a, b) == a + b:\n            print(str(a) + "+" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a - b:\n            print(str(a) + "-" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a * b:\n            print(str(a) + "*" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a // b:\n            print(str(a) + "/" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == b // a:\n            print(str(b) + "/" + str(a) + "=" + str(c))\n        elif c // gcd(a, b) == a // lcm(a, b):\n            print(str(a) + "/" + str(lcm(a, b)) + "=" + str(c))\n        elif c // gcd(a, b) == b // lcm(a, b):\n            print(str(b) + "/" + str(lcm(a, b)) + "=" + str(c))\n    elif c == a + b:\n        print(str(a) + "+" + str(b) + "=" + str(c))\n    elif c == a - b:\n        print(str(a) + "-" + str(b) + "=" + str(c))\n    elif c == a * b:\n        print(str(a) + "*" + str(b) + "=" + str(c))\n    elif c == a // b:\n        print(str(a) + "/" + str(b) + "=" + str(c))\n    elif c == b // a:\n        print(str(b) + "/" + str(a) + "=" + str(c))\n    elif c == a // lcm(a, b):\n        print(str(a) + "/" + str(lcm(a, b)) + "=" + str(c))\n    elif c == b // lcm(a, b):\n        print(str(b) + "/" + str(lcm(a, b)) + "=" + str(c))\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    # get input\n    inp = input().split()\n    a = int(inp[0])\n    b = int(inp[1])\n    c = int(inp[2])\n    # check for possible operation\n    if c % gcd(a, b) == 0:\n        if c // gcd(a, b) == a + b:\n            print(str(a) + "+" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a - b:\n            print(str(a) + "-" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a * b:\n            print(str(a) + "*" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a // b:\n            print(str(a) + "/" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == b // a:\n            print(str(b) + "/" + str(a) + "=" + str(c))\n        elif c // gcd(a, b) == a // lcm(a, b):\n            print(str(a) + "/" + str(lcm(a, b)) + "=" + str(c))\n        elif c // gcd(a, b) == b // lcm(a, b):\n            print(str(b) + "/" + str(lcm(a, b)) + "=" + str(c))\n    elif c == a + b:\n        print(str(a) + "+" + str(b) + "=" + str(c))\n    elif c == a - b:\n        print(str(a) + "-" + str(b) + "=" + str(c))\n    elif c == a * b:\n        print(str(a) + "*" + str(b) + "=" + str(c))\n    elif c == a // b:\n        print(str(a) + "/" + str(b) + "=" + str(c))\n    elif c == b // a:\n        print(str(b) + "/" + str(a) + "=" + str(c))\n    elif c == a // lcm(a, b):\n        print(str(a) + "/" + str(lcm(a, b)) + "=" + str(c))\n    elif c == b // lcm(a, b):\n        print(str(b) + "/" + str(lcm(a, b)) + "=" + str(c))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 06:48:32.918876 size on output set 3
2022-04-13 06:48:32.918882 size on input set 3
2022-04-13 06:48:46.761892 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom math import gcd\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    # get input\n    inp = input().split()\n    a = int(inp[0])\n    b = int(inp[1])\n    c = int(inp[2])\n    # check for possible operations when c is a multiple of gcd(a, b)\n    if c % gcd(a, b) == 0:\n        if c // gcd(a, b) == a + b:\n            print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a - b:\n            print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a * b:\n            print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a // b:\n            print(str(a) + \"/\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == b // a:\n            print(str(b) + \"/\" + str(a) + \"=\" + str(c))\n        elif c // gcd(a, b) == a // lcm(a, b):\n            print(str(a) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n        elif c // gcd(a, b) == b // lcm(a, b):\n            print(str(b) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n    # check for possible operations when c is not a multiple of gcd(a, b)\n    elif c == a + b:\n        print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n    elif c == a - b:\n        print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n    elif c == a * b:\n        print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n    elif c == a // b:\n        print(str(a) + \"/\" + str(b) + \"=\" + str(c))\n    elif c == b // a:\n        print(str(b) + \"/\" + str(a) + \"=\" + str(c))\n    elif c == a // lcm(a, b):\n        print(str(a) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n    elif c == b // lcm(a, b):\n        print(str(b) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    # get input\n    inp = input().split()\n    a = int(inp[0])\n    b = int(inp[1])\n    c = int(inp[2])\n    # check for possible operations when c is a multiple of gcd(a, b)\n    if c % gcd(a, b) == 0:\n        if c // gcd(a, b) == a + b:\n            print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a - b:\n            print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a * b:\n            print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a / b:\n            print(str(a) + \"/\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == b / a:\n            print(str(b) + \"/\" + str(a) + \"=\" + str(c))\n        elif c // gcd(a, b) == a / lcm(a, b):\n            print(str(a) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n        elif c // gcd(a, b) == b / lcm(a, b):\n            print(str(b) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n    # check for possible operations when c is not a multiple of gcd(a, b)\n    elif c == a + b:\n        print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n    elif c == a - b:\n        print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n    elif c == a * b:\n        print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n    elif c == a / b:\n        print(str(a) + \"/\" + str(b) + \"=\" + str(c))\n    elif c == b / a:\n        print(str(b) + \"/\" + str(a) + \"=\" + str(c))\n    elif c == a / lcm(a, b):\n        print(str(a) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n    elif c == b // lcm(a, b):\n        print(str(b) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\ndef main():\n    # get input\n    inp = input().split()\n    a = int(inp[0])\n    b = int(inp[1])\n    c = int(inp[2])\n    # check for possible operations when c is a multiple of gcd(a, b)\n    if c % gcd(a, b) == 0:\n        if c // gcd(a, b) == a + b:\n            print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a - b:\n            print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a * b:\n            print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a // b:\n            print(str(a) + \"/\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == b // a:\n            print(str(b) + \"/\" + str(a) + \"=\" + str(c))\n        elif c // gcd(a, b) == a // lcm(a, b):\n            print(str(a) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n        elif c // gcd(a, b) == b // lcm(a, b):\n            print(str(b) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n    # check for possible operations when c is not a multiple of gcd(a, b)\n    elif c == a + b:\n        print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n    elif c == a - b:\n        print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n    elif c == a * b:\n        print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n    elif c == a // b:\n        print(str(a) + \"/\" + str(b) + \"=\" + str(c))\n    elif c == b // a:\n        print(str(b) + \"/\" + str(a) + \"=\" + str(c))\n    elif c == a // lcm(a, b):\n        print(str(a) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n    elif c == b // lcm(a, b):\n        print(str(b) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649832512,
  "object": "edit"
}
2022-04-13 06:48:46.762263 fix syntax errors 3 ['\nfrom math import gcd\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    # get input\n    inp = input().split()\n    a = int(inp[0])\n    b = int(inp[1])\n    c = int(inp[2])\n    # check for possible operations when c is a multiple of gcd(a, b)\n    if c % gcd(a, b) == 0:\n        if c // gcd(a, b) == a + b:\n            print(str(a) + "+" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a - b:\n            print(str(a) + "-" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a * b:\n            print(str(a) + "*" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a // b:\n            print(str(a) + "/" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == b // a:\n            print(str(b) + "/" + str(a) + "=" + str(c))\n        elif c // gcd(a, b) == a // lcm(a, b):\n            print(str(a) + "/" + str(lcm(a, b)) + "=" + str(c))\n        elif c // gcd(a, b) == b // lcm(a, b):\n            print(str(b) + "/" + str(lcm(a, b)) + "=" + str(c))\n    # check for possible operations when c is not a multiple of gcd(a, b)\n    elif c == a + b:\n        print(str(a) + "+" + str(b) + "=" + str(c))\n    elif c == a - b:\n        print(str(a) + "-" + str(b) + "=" + str(c))\n    elif c == a * b:\n        print(str(a) + "*" + str(b) + "=" + str(c))\n    elif c == a // b:\n        print(str(a) + "/" + str(b) + "=" + str(c))\n    elif c == b // a:\n        print(str(b) + "/" + str(a) + "=" + str(c))\n    elif c == a // lcm(a, b):\n        print(str(a) + "/" + str(lcm(a, b)) + "=" + str(c))\n    elif c == b // lcm(a, b):\n        print(str(b) + "/" + str(lcm(a, b)) + "=" + str(c))\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    # get input\n    inp = input().split()\n    a = int(inp[0])\n    b = int(inp[1])\n    c = int(inp[2])\n    # check for possible operations when c is a multiple of gcd(a, b)\n    if c % gcd(a, b) == 0:\n        if c // gcd(a, b) == a + b:\n            print(str(a) + "+" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a - b:\n            print(str(a) + "-" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a * b:\n            print(str(a) + "*" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a / b:\n            print(str(a) + "/" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == b / a:\n            print(str(b) + "/" + str(a) + "=" + str(c))\n        elif c // gcd(a, b) == a / lcm(a, b):\n            print(str(a) + "/" + str(lcm(a, b)) + "=" + str(c))\n        elif c // gcd(a, b) == b / lcm(a, b):\n            print(str(b) + "/" + str(lcm(a, b)) + "=" + str(c))\n    # check for possible operations when c is not a multiple of gcd(a, b)\n    elif c == a + b:\n        print(str(a) + "+" + str(b) + "=" + str(c))\n    elif c == a - b:\n        print(str(a) + "-" + str(b) + "=" + str(c))\n    elif c == a * b:\n        print(str(a) + "*" + str(b) + "=" + str(c))\n    elif c == a / b:\n        print(str(a) + "/" + str(b) + "=" + str(c))\n    elif c == b / a:\n        print(str(b) + "/" + str(a) + "=" + str(c))\n    elif c == a / lcm(a, b):\n        print(str(a) + "/" + str(lcm(a, b)) + "=" + str(c))\n    elif c == b // lcm(a, b):\n        print(str(b) + "/" + str(lcm(a, b)) + "=" + str(c))\n\nif __name__ == "__main__":\n    main()\n', '\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\ndef main():\n    # get input\n    inp = input().split()\n    a = int(inp[0])\n    b = int(inp[1])\n    c = int(inp[2])\n    # check for possible operations when c is a multiple of gcd(a, b)\n    if c % gcd(a, b) == 0:\n        if c // gcd(a, b) == a + b:\n            print(str(a) + "+" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a - b:\n            print(str(a) + "-" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a * b:\n            print(str(a) + "*" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a // b:\n            print(str(a) + "/" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == b // a:\n            print(str(b) + "/" + str(a) + "=" + str(c))\n        elif c // gcd(a, b) == a // lcm(a, b):\n            print(str(a) + "/" + str(lcm(a, b)) + "=" + str(c))\n        elif c // gcd(a, b) == b // lcm(a, b):\n            print(str(b) + "/" + str(lcm(a, b)) + "=" + str(c))\n    # check for possible operations when c is not a multiple of gcd(a, b)\n    elif c == a + b:\n        print(str(a) + "+" + str(b) + "=" + str(c))\n    elif c == a - b:\n        print(str(a) + "-" + str(b) + "=" + str(c))\n    elif c == a * b:\n        print(str(a) + "*" + str(b) + "=" + str(c))\n    elif c == a // b:\n        print(str(a) + "/" + str(b) + "=" + str(c))\n    elif c == b // a:\n        print(str(b) + "/" + str(a) + "=" + str(c))\n    elif c == a // lcm(a, b):\n        print(str(a) + "/" + str(lcm(a, b)) + "=" + str(c))\n    elif c == b // lcm(a, b):\n        print(str(b) + "/" + str(lcm(a, b)) + "=" + str(c))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 06:49:04.072859 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    # get input\n    inp = input().split()\n    a = int(inp[0])\n    b = int(inp[1])\n    c = int(inp[2])\n    # check for possible operations and print out the correct one\n    if c % gcd(a, b) == 0:\n        if c // gcd(a, b) == a + b:\n            print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a - b:\n            print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a * b:\n            print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a // b:\n            print(str(a) + \"/\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == b // a:\n            print(str(b) + \"/\" + str(a) + \"=\" + str(c))\n        elif c // gcd(a, b) == a // lcm(a, b):\n            print(str(a) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n        elif c // gcd(a, b) == b // lcm(a, b):\n            print(str(b) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n    elif c == a + b:\n        print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n    elif c == a - b:\n        print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n    elif c == a * b:\n        print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n    elif c == a // b:\n        print(str(a) + \"/\" + str(b) + \"=\" + str(c))\n    elif c == b // a:\n        print(str(b) + \"/\" + str(a) + \"=\" + str(c))\n    elif c == a // lcm(a, b):\n        print(str(a) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n    elif c == b // lcm(a, b):\n        print(str(b) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    # get input\n    inp = raw_input().split()\n    a = int(inp[0])\n    b = int(inp[1])\n    c = int(inp[2])\n    # check for possible operations and print out\n    if c % gcd(a, b) == 0:\n        if c // gcd(a, b) == a + b:\n            print str(a) + \"+\" + str(b) + \"=\" + str(c)\n        elif c // gcd(a, b) == a - b:\n            print str(a) + \"-\" + str(b) + \"=\" + str(c)\n        elif c // gcd(a, b) == a * b:\n            print str(a) + \"*\" + str(b) + \"=\" + str(c)\n        elif c // gcd(a, b) == a // b:\n            print str(a) + \"/\" + str(b) + \"=\" + str(c)\n        elif c // gcd(a, b) == b // a:\n            print str(b) + \"/\" + str(a) + \"=\" + str(c)\n        elif c // gcd(a, b) == a // lcm(a, b):\n            print str(a) + \"/\" + str(lcm(a, b)) + \"=\" + str(c)\n        elif c // gcd(a, b) == b // lcm(a, b):\n            print str(b) + \"/\" + str(lcm(a, b)) + \"=\" + str(c)\n    elif c == a + b:\n        print str(a) + \"+\" + str(b) + \"=\" + str(c)\n    elif c == a - b:\n        print str(a) + \"-\" + str(b) + \"=\" + str(c)\n    elif c == a * b:\n        print str(a) + \"*\" + str(b) + \"=\" + str(c)\n    elif c == a // b:\n        print str(a) + \"/\" + str(b) + \"=\" + str(c)\n    elif c == b // a:\n        print str(b) + \"/\" + str(a) + \"=\" + str(c)\n    elif c == a // lcm(a, b):\n        print str(a) + \"/\" + str(lcm(a, b)) + \"=\" + str(c)\n    elif c == b // lcm(a, b):\n        print str(b) + \"/\" + str(lcm(a, b)) + \"=\" + str(c)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    # get input\n    inp = input().split()\n    a = int(inp[0])\n    b = int(inp[1])\n    c = int(inp[2])\n    # check for possible operations and print out\n    if c % gcd(a, b) == 0:\n        if c // gcd(a, b) == a + b:\n            print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a - b:\n            print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a * b:\n            print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a / b:\n            print(str(a) + \"/\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == b / a:\n            print(str(b) + \"/\" + str(a) + \"=\" + str(c))\n        elif c // gcd(a, b) == a / lcm(a, b):\n            print(str(a) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n        elif c // gcd(a, b) == b / lcm(a, b):\n            print(str(b) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n    elif c == a + b:\n        print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n    elif c == a - b:\n        print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n    elif c == a * b:\n        print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n    elif c == a / b:\n        print(str(a) + \"/\" + str(b) + \"=\" + str(c))\n    elif c == b / a:\n        print(str(b) + \"/\" + str(a) + \"=\" + str(c))\n    elif c == a / lcm(a, b):\n        print(str(a) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n    elif c == b / lcm(a, b):\n        print(str(b) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649832526,
  "object": "edit"
}
2022-04-13 06:49:04.073128 fix syntax errors 3 ['\n\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    # get input\n    inp = input().split()\n    a = int(inp[0])\n    b = int(inp[1])\n    c = int(inp[2])\n    # check for possible operations and print out the correct one\n    if c % gcd(a, b) == 0:\n        if c // gcd(a, b) == a + b:\n            print(str(a) + "+" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a - b:\n            print(str(a) + "-" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a * b:\n            print(str(a) + "*" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a // b:\n            print(str(a) + "/" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == b // a:\n            print(str(b) + "/" + str(a) + "=" + str(c))\n        elif c // gcd(a, b) == a // lcm(a, b):\n            print(str(a) + "/" + str(lcm(a, b)) + "=" + str(c))\n        elif c // gcd(a, b) == b // lcm(a, b):\n            print(str(b) + "/" + str(lcm(a, b)) + "=" + str(c))\n    elif c == a + b:\n        print(str(a) + "+" + str(b) + "=" + str(c))\n    elif c == a - b:\n        print(str(a) + "-" + str(b) + "=" + str(c))\n    elif c == a * b:\n        print(str(a) + "*" + str(b) + "=" + str(c))\n    elif c == a // b:\n        print(str(a) + "/" + str(b) + "=" + str(c))\n    elif c == b // a:\n        print(str(b) + "/" + str(a) + "=" + str(c))\n    elif c == a // lcm(a, b):\n        print(str(a) + "/" + str(lcm(a, b)) + "=" + str(c))\n    elif c == b // lcm(a, b):\n        print(str(b) + "/" + str(lcm(a, b)) + "=" + str(c))\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    # get input\n    inp = raw_input().split()\n    a = int(inp[0])\n    b = int(inp[1])\n    c = int(inp[2])\n    # check for possible operations and print out\n    if c % gcd(a, b) == 0:\n        if c // gcd(a, b) == a + b:\n            print str(a) + "+" + str(b) + "=" + str(c)\n        elif c // gcd(a, b) == a - b:\n            print str(a) + "-" + str(b) + "=" + str(c)\n        elif c // gcd(a, b) == a * b:\n            print str(a) + "*" + str(b) + "=" + str(c)\n        elif c // gcd(a, b) == a // b:\n            print str(a) + "/" + str(b) + "=" + str(c)\n        elif c // gcd(a, b) == b // a:\n            print str(b) + "/" + str(a) + "=" + str(c)\n        elif c // gcd(a, b) == a // lcm(a, b):\n            print str(a) + "/" + str(lcm(a, b)) + "=" + str(c)\n        elif c // gcd(a, b) == b // lcm(a, b):\n            print str(b) + "/" + str(lcm(a, b)) + "=" + str(c)\n    elif c == a + b:\n        print str(a) + "+" + str(b) + "=" + str(c)\n    elif c == a - b:\n        print str(a) + "-" + str(b) + "=" + str(c)\n    elif c == a * b:\n        print str(a) + "*" + str(b) + "=" + str(c)\n    elif c == a // b:\n        print str(a) + "/" + str(b) + "=" + str(c)\n    elif c == b // a:\n        print str(b) + "/" + str(a) + "=" + str(c)\n    elif c == a // lcm(a, b):\n        print str(a) + "/" + str(lcm(a, b)) + "=" + str(c)\n    elif c == b // lcm(a, b):\n        print str(b) + "/" + str(lcm(a, b)) + "=" + str(c)\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    # get input\n    inp = input().split()\n    a = int(inp[0])\n    b = int(inp[1])\n    c = int(inp[2])\n    # check for possible operations and print out\n    if c % gcd(a, b) == 0:\n        if c // gcd(a, b) == a + b:\n            print(str(a) + "+" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a - b:\n            print(str(a) + "-" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a * b:\n            print(str(a) + "*" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a / b:\n            print(str(a) + "/" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == b / a:\n            print(str(b) + "/" + str(a) + "=" + str(c))\n        elif c // gcd(a, b) == a / lcm(a, b):\n            print(str(a) + "/" + str(lcm(a, b)) + "=" + str(c))\n        elif c // gcd(a, b) == b / lcm(a, b):\n            print(str(b) + "/" + str(lcm(a, b)) + "=" + str(c))\n    elif c == a + b:\n        print(str(a) + "+" + str(b) + "=" + str(c))\n    elif c == a - b:\n        print(str(a) + "-" + str(b) + "=" + str(c))\n    elif c == a * b:\n        print(str(a) + "*" + str(b) + "=" + str(c))\n    elif c == a / b:\n        print(str(a) + "/" + str(b) + "=" + str(c))\n    elif c == b / a:\n        print(str(b) + "/" + str(a) + "=" + str(c))\n    elif c == a / lcm(a, b):\n        print(str(a) + "/" + str(lcm(a, b)) + "=" + str(c))\n    elif c == b / lcm(a, b):\n        print(str(b) + "/" + str(lcm(a, b)) + "=" + str(c))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 06:49:10.832982 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom math import gcd, lcm\n\n# def lcm(a, b):\n#     return a * b // gcd(a, b)\n\ndef main():\n    # get input\n    inp = input().split()\n    a = int(inp[0])\n    b = int(inp[1])\n    c = int(inp[2])\n    # check for possible operation\n    if c % gcd(a, b) == 0:\n        if c // gcd(a, b) == a + b:\n            print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a - b:\n            print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a * b:\n            print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a // b:\n            print(str(a) + \"/\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == b // a:\n            print(str(b) + \"/\" + str(a) + \"=\" + str(c))\n        elif c // gcd(a, b) == a // lcm(a, b):\n            print(str(a) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n        elif c // gcd(a, b) == b // lcm(a, b):\n            print(str(b) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n    elif c == a + b:\n        print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n    elif c == a - b:\n        print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n    elif c == a * b:\n        print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n    elif c == a // b:\n        print(str(a) + \"/\" + str(b) + \"=\" + str(c))\n    elif c == b // a:\n        print(str(b) + \"/\" + str(a) + \"=\" + str(c))\n    elif c == a // lcm(a, b):\n        print(str(a) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n    elif c == b // lcm(a, b):\n        print(str(b) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    # get input\n    a, b, c = map(int, input().split())\n    # check for possible operation\n    if c % gcd(a, b) == 0:\n        if c // gcd(a, b) == a + b:\n            print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a - b:\n            print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a * b:\n            print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a // b:\n            print(str(a) + \"/\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == b // a:\n            print(str(b) + \"/\" + str(a) + \"=\" + str(c))\n        elif c // gcd(a, b) == a // lcm(a, b):\n            print(str(a) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n        elif c // gcd(a, b) == b // lcm(a, b):\n            print(str(b) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n    elif c == a + b:\n        print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n    elif c == a - b:\n        print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n    elif c == a * b:\n        print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n    elif c == a // b:\n        print(str(a) + \"/\" + str(b) + \"=\" + str(c))\n    elif c == b // a:\n        print(str(b) + \"/\" + str(a) + \"=\" + str(c))\n    elif c == a // lcm(a, b):\n        print(str(a) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n    elif c == b // lcm(a, b):\n        print(str(b) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    # get input\n    inp = input().split()\n    a = int(inp[0])\n    b = int(inp[1])\n    c = int(inp[2])\n    # check for possible operation\n    if c % gcd(a, b) == 0: # check if c is a multiple of a and b\n        if c // gcd(a, b) == a + b:\n            print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a - b:\n            print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a * b:\n            print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a // b:\n            print(str(a) + \"/\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == b // a:\n            print(str(b) + \"/\" + str(a) + \"=\" + str(c))\n        elif c // gcd(a, b) == a // lcm(a, b):\n            print(str(a) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n        elif c // gcd(a, b) == b // lcm(a, b):\n            print(str(b) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n    elif c == a + b: # check for addition\n        print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n    elif c == a - b: # check for subtraction\n        print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n    elif c == a * b: # check for multiplication\n        print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n    elif c == a // b: # check for division\n        print(str(a) + \"/\" + str(b) + \"=\" + str(c))\n    elif c == b // a: # check for division\n        print(str(b) + \"/\" + str(a) + \"=\" + str(c))\n    elif c == a // lcm(a, b): # check for division\n        print(str(a) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n    elif c == b // lcm(a, b): # check for division\n        print(str(b) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649832544,
  "object": "edit"
}
2022-04-13 06:49:10.833232 fix syntax errors 3 ['\n\nfrom math import gcd, lcm\n\n# def lcm(a, b):\n#     return a * b // gcd(a, b)\n\ndef main():\n    # get input\n    inp = input().split()\n    a = int(inp[0])\n    b = int(inp[1])\n    c = int(inp[2])\n    # check for possible operation\n    if c % gcd(a, b) == 0:\n        if c // gcd(a, b) == a + b:\n            print(str(a) + "+" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a - b:\n            print(str(a) + "-" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a * b:\n            print(str(a) + "*" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a // b:\n            print(str(a) + "/" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == b // a:\n            print(str(b) + "/" + str(a) + "=" + str(c))\n        elif c // gcd(a, b) == a // lcm(a, b):\n            print(str(a) + "/" + str(lcm(a, b)) + "=" + str(c))\n        elif c // gcd(a, b) == b // lcm(a, b):\n            print(str(b) + "/" + str(lcm(a, b)) + "=" + str(c))\n    elif c == a + b:\n        print(str(a) + "+" + str(b) + "=" + str(c))\n    elif c == a - b:\n        print(str(a) + "-" + str(b) + "=" + str(c))\n    elif c == a * b:\n        print(str(a) + "*" + str(b) + "=" + str(c))\n    elif c == a // b:\n        print(str(a) + "/" + str(b) + "=" + str(c))\n    elif c == b // a:\n        print(str(b) + "/" + str(a) + "=" + str(c))\n    elif c == a // lcm(a, b):\n        print(str(a) + "/" + str(lcm(a, b)) + "=" + str(c))\n    elif c == b // lcm(a, b):\n        print(str(b) + "/" + str(lcm(a, b)) + "=" + str(c))\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    # get input\n    a, b, c = map(int, input().split())\n    # check for possible operation\n    if c % gcd(a, b) == 0:\n        if c // gcd(a, b) == a + b:\n            print(str(a) + "+" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a - b:\n            print(str(a) + "-" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a * b:\n            print(str(a) + "*" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a // b:\n            print(str(a) + "/" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == b // a:\n            print(str(b) + "/" + str(a) + "=" + str(c))\n        elif c // gcd(a, b) == a // lcm(a, b):\n            print(str(a) + "/" + str(lcm(a, b)) + "=" + str(c))\n        elif c // gcd(a, b) == b // lcm(a, b):\n            print(str(b) + "/" + str(lcm(a, b)) + "=" + str(c))\n    elif c == a + b:\n        print(str(a) + "+" + str(b) + "=" + str(c))\n    elif c == a - b:\n        print(str(a) + "-" + str(b) + "=" + str(c))\n    elif c == a * b:\n        print(str(a) + "*" + str(b) + "=" + str(c))\n    elif c == a // b:\n        print(str(a) + "/" + str(b) + "=" + str(c))\n    elif c == b // a:\n        print(str(b) + "/" + str(a) + "=" + str(c))\n    elif c == a // lcm(a, b):\n        print(str(a) + "/" + str(lcm(a, b)) + "=" + str(c))\n    elif c == b // lcm(a, b):\n        print(str(b) + "/" + str(lcm(a, b)) + "=" + str(c))\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    # get input\n    inp = input().split()\n    a = int(inp[0])\n    b = int(inp[1])\n    c = int(inp[2])\n    # check for possible operation\n    if c % gcd(a, b) == 0: # check if c is a multiple of a and b\n        if c // gcd(a, b) == a + b:\n            print(str(a) + "+" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a - b:\n            print(str(a) + "-" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a * b:\n            print(str(a) + "*" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a // b:\n            print(str(a) + "/" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == b // a:\n            print(str(b) + "/" + str(a) + "=" + str(c))\n        elif c // gcd(a, b) == a // lcm(a, b):\n            print(str(a) + "/" + str(lcm(a, b)) + "=" + str(c))\n        elif c // gcd(a, b) == b // lcm(a, b):\n            print(str(b) + "/" + str(lcm(a, b)) + "=" + str(c))\n    elif c == a + b: # check for addition\n        print(str(a) + "+" + str(b) + "=" + str(c))\n    elif c == a - b: # check for subtraction\n        print(str(a) + "-" + str(b) + "=" + str(c))\n    elif c == a * b: # check for multiplication\n        print(str(a) + "*" + str(b) + "=" + str(c))\n    elif c == a // b: # check for division\n        print(str(a) + "/" + str(b) + "=" + str(c))\n    elif c == b // a: # check for division\n        print(str(b) + "/" + str(a) + "=" + str(c))\n    elif c == a // lcm(a, b): # check for division\n        print(str(a) + "/" + str(lcm(a, b)) + "=" + str(c))\n    elif c == b // lcm(a, b): # check for division\n        print(str(b) + "/" + str(lcm(a, b)) + "=" + str(c))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 06:49:10.833293 size on output set 9
2022-04-13 06:49:10.833320 num operations 2
2022-04-13 06:49:10.833326 size on input set 1
2022-04-13 06:49:20.451548 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n\tnums = sys.stdin.readline().split()\n\ta = int(nums[0])\n\tb = int(nums[1])\n\tc = int(nums[2])\n\n\tif a + b == c: print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n\telif a - b == c: print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n\telif a * b == c: print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n\telif a == b + c: print(str(a) + \"=\" + str(b) + \"+\" + str(c))\n\telif a == b - c: print(str(a) + \"=\" + str(b) + \"-\" + str(c))\n\telif a == b * c: print(str(a) + \"=\" + str(b) + \"*\" + str(c))\n\telif a == b / c: print(str(a) + \"=\" + str(b) + \"/\" + str(c))\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/python\n\nimport sys\n\ndef main():\n\tnums = sys.stdin.readline().split()\n\ta = int(nums[0])\n\tb = int(nums[1])\n\tc = int(nums[2])\n\n\tif a + b == c:\n\t\tprint(str(a) + \"+\" + str(b) + \"=\" + str(c))\n\telif a - b == c:\n\t\tprint(str(a) + \"-\" + str(b) + \"=\" + str(c))\n\telif a * b == c:\n\t\tprint(str(a) + \"*\" + str(b) + \"=\" + str(c))\n\telif a == b + c:\n\t\tprint(str(a) + \"=\" + str(b) + \"+\" + str(c))\n\telif a == b - c:\n\t\tprint(str(a) + \"=\" + str(b) + \"-\" + str(c))\n\telif a == b * c:\n\t\tprint(str(a) + \"=\" + str(b) + \"*\" + str(c))\n\telif a == b / c:\n\t\tprint(str(a) + \"=\" + str(b) + \"/\" + str(c))\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n\tnums = sys.stdin.readline().split()\n\ta = int(nums[0])\n\tb = int(nums[1])\n\tc = int(nums[2])\n\n\tif a + b == c:\n\t\tprint(str(a) + \"+\" + str(b) + \"=\" + str(c))\n\telif a - b == c:\n\t\tprint(str(a) + \"-\" + str(b) + \"=\" + str(c))\n\telif a * b == c:\n\t\tprint(str(a) + \"*\" + str(b) + \"=\" + str(c))\n\telif a == b + c:\n\t\tprint(str(a) + \"=\" + str(b) + \"+\" + str(c))\n\telif a == b - c:\n\t\tprint(str(a) + \"=\" + str(b) + \"-\" + str(c))\n\telif a == b * c:\n\t\tprint(str(a) + \"=\" + str(b) + \"*\" + str(c))\n\telse:\n\t\tprint(str(a) + \"=\" + str(b) + \"/\" + str(c))\n\nif __name__ == '__main__':\n\tmain()\n"
    }
  ],
  "created": 1649832550,
  "object": "edit"
}
2022-04-13 06:49:20.451744 fix spelling mistakes 3 ['\n\nimport sys\n\ndef main():\n\tnums = sys.stdin.readline().split()\n\ta = int(nums[0])\n\tb = int(nums[1])\n\tc = int(nums[2])\n\n\tif a + b == c: print(str(a) + "+" + str(b) + "=" + str(c))\n\telif a - b == c: print(str(a) + "-" + str(b) + "=" + str(c))\n\telif a * b == c: print(str(a) + "*" + str(b) + "=" + str(c))\n\telif a == b + c: print(str(a) + "=" + str(b) + "+" + str(c))\n\telif a == b - c: print(str(a) + "=" + str(b) + "-" + str(c))\n\telif a == b * c: print(str(a) + "=" + str(b) + "*" + str(c))\n\telif a == b / c: print(str(a) + "=" + str(b) + "/" + str(c))\n\nif __name__ == \'__main__\':\n\tmain()\n', '#!/usr/bin/python\n\nimport sys\n\ndef main():\n\tnums = sys.stdin.readline().split()\n\ta = int(nums[0])\n\tb = int(nums[1])\n\tc = int(nums[2])\n\n\tif a + b == c:\n\t\tprint(str(a) + "+" + str(b) + "=" + str(c))\n\telif a - b == c:\n\t\tprint(str(a) + "-" + str(b) + "=" + str(c))\n\telif a * b == c:\n\t\tprint(str(a) + "*" + str(b) + "=" + str(c))\n\telif a == b + c:\n\t\tprint(str(a) + "=" + str(b) + "+" + str(c))\n\telif a == b - c:\n\t\tprint(str(a) + "=" + str(b) + "-" + str(c))\n\telif a == b * c:\n\t\tprint(str(a) + "=" + str(b) + "*" + str(c))\n\telif a == b / c:\n\t\tprint(str(a) + "=" + str(b) + "/" + str(c))\n\nif __name__ == \'__main__\':\n\tmain()\n', '\n\nimport sys\n\ndef main():\n\tnums = sys.stdin.readline().split()\n\ta = int(nums[0])\n\tb = int(nums[1])\n\tc = int(nums[2])\n\n\tif a + b == c:\n\t\tprint(str(a) + "+" + str(b) + "=" + str(c))\n\telif a - b == c:\n\t\tprint(str(a) + "-" + str(b) + "=" + str(c))\n\telif a * b == c:\n\t\tprint(str(a) + "*" + str(b) + "=" + str(c))\n\telif a == b + c:\n\t\tprint(str(a) + "=" + str(b) + "+" + str(c))\n\telif a == b - c:\n\t\tprint(str(a) + "=" + str(b) + "-" + str(c))\n\telif a == b * c:\n\t\tprint(str(a) + "=" + str(b) + "*" + str(c))\n\telse:\n\t\tprint(str(a) + "=" + str(b) + "/" + str(c))\n\nif __name__ == \'__main__\':\n\tmain()\n']
2022-04-13 06:49:20.451852 size on output set 3
2022-04-13 06:49:20.451861 size on input set 3
2022-04-13 06:49:33.915113 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n\tnums = sys.stdin.readline().split()\n\ta = int(nums[0])\n\tb = int(nums[1])\n\tc = int(nums[2])\n\n\tif a + b == c:\n\t\tprint(str(a) + \" + \" + str(b) + \" = \" + str(c))\n\telif a - b == c:\n\t\tprint(str(a) + \" - \" + str(b) + \" = \" + str(c))\n\telif a * b == c:\n\t\tprint(str(a) + \" * \" + str(b) + \" = \" + str(c))\n\telif a == b + c:\n\t\tprint(str(a) + \" = \" + str(b) + \" + \" + str(c))\n\telif a == b - c:\n\t\tprint(str(a) + \" = \" + str(b) + \" - \" + str(c))\n\telif a == b * c:\n\t\tprint(str(a) + \" = \" + str(b) + \" * \" + str(c))\n\telse:\n\t\tprint(str(a) + \" = \" + str(b) + \" / \" + str(c))\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    nums = sys.stdin.readline().split()\n    a = int(nums[0])\n    b = int(nums[1])\n    c = int(nums[2])\n\n    if a + b == c:\n        print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n    elif a - b == c:\n        print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n    elif a * b == c:\n        print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n    elif a == b + c:\n        print(str(a) + \"=\" + str(b) + \"+\" + str(c))\n    elif a == b - c:\n        print(str(a) + \"=\" + str(b) + \"-\" + str(c))\n    elif a == b * c:\n        print(str(a) + \"=\" + str(b) + \"*\" + str(c))\n    else:\n        print(str(a) + \"=\" + str(b) + \"/\" + str(c))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    nums = sys.stdin.readline().split()\n    a = int(nums[0])\n    b = int(nums[1])\n    c = int(nums[2])\n\n    if a + b == c:\n        print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n    elif a - b == c:\n        print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n    elif a * b == c:\n        print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n    elif a == b + c:\n        print(str(a) + \"=\" + str(b) + \"+\" + str(c))\n    elif a == b - c:\n        print(str(a) + \"=\" + str(b) + \"-\" + str(c))\n    elif a == b * c:\n        print(str(a) + \"=\" + str(b) + \"*\" + str(c))\n    else:\n        print(str(a) + \"=\" + str(b) + \"/\" + str(c))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649832560,
  "object": "edit"
}
2022-04-13 06:49:33.915288 fix syntax errors 3 ['\n\nimport sys\n\ndef main():\n\tnums = sys.stdin.readline().split()\n\ta = int(nums[0])\n\tb = int(nums[1])\n\tc = int(nums[2])\n\n\tif a + b == c:\n\t\tprint(str(a) + " + " + str(b) + " = " + str(c))\n\telif a - b == c:\n\t\tprint(str(a) + " - " + str(b) + " = " + str(c))\n\telif a * b == c:\n\t\tprint(str(a) + " * " + str(b) + " = " + str(c))\n\telif a == b + c:\n\t\tprint(str(a) + " = " + str(b) + " + " + str(c))\n\telif a == b - c:\n\t\tprint(str(a) + " = " + str(b) + " - " + str(c))\n\telif a == b * c:\n\t\tprint(str(a) + " = " + str(b) + " * " + str(c))\n\telse:\n\t\tprint(str(a) + " = " + str(b) + " / " + str(c))\n\nif __name__ == \'__main__\':\n\tmain()\n', '\n\nimport sys\n\ndef main():\n    nums = sys.stdin.readline().split()\n    a = int(nums[0])\n    b = int(nums[1])\n    c = int(nums[2])\n\n    if a + b == c:\n        print(str(a) + "+" + str(b) + "=" + str(c))\n    elif a - b == c:\n        print(str(a) + "-" + str(b) + "=" + str(c))\n    elif a * b == c:\n        print(str(a) + "*" + str(b) + "=" + str(c))\n    elif a == b + c:\n        print(str(a) + "=" + str(b) + "+" + str(c))\n    elif a == b - c:\n        print(str(a) + "=" + str(b) + "-" + str(c))\n    elif a == b * c:\n        print(str(a) + "=" + str(b) + "*" + str(c))\n    else:\n        print(str(a) + "=" + str(b) + "/" + str(c))\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef main():\n    nums = sys.stdin.readline().split()\n    a = int(nums[0])\n    b = int(nums[1])\n    c = int(nums[2])\n\n    if a + b == c:\n        print(str(a) + "+" + str(b) + "=" + str(c))\n    elif a - b == c:\n        print(str(a) + "-" + str(b) + "=" + str(c))\n    elif a * b == c:\n        print(str(a) + "*" + str(b) + "=" + str(c))\n    elif a == b + c:\n        print(str(a) + "=" + str(b) + "+" + str(c))\n    elif a == b - c:\n        print(str(a) + "=" + str(b) + "-" + str(c))\n    elif a == b * c:\n        print(str(a) + "=" + str(b) + "*" + str(c))\n    else:\n        print(str(a) + "=" + str(b) + "/" + str(c))\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 06:49:45.047029 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n\tnums = sys.stdin.readline().split()\n\ta = int(nums[0])\n\tb = int(nums[1])\n\tc = int(nums[2])\n\n\tif a + b == c: print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n\telif a - b == c: print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n\telif a * b == c: print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n\telif a == b + c: print(str(a) + \"=\" + str(b) + \"+\" + str(c))\n\telif a == b - c: print(str(a) + \"=\" + str(b) + \"-\" + str(c))\n\telif a == b * c: print(str(a) + \"=\" + str(b) + \"*\" + str(c))\n\telif a == b / c: print(str(a) + \"=\" + str(b) + \"/\" + str(c))\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n\tnums = sys.stdin.readline().split()\n\ta = int(nums[0])\n\tb = int(nums[1])\n\tc = int(nums[2])\n\n\telif a / b == c: print(str(a) + \"/\" + str(b) + \"=\" + str(c))\n\tif a + b == c: print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n\telif a - b == c: print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n\telif a * b == c: print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n\telif a == b + c: print(str(a) + \"=\" + str(b) + \"+\" + str(c))\n\telif a == b - c: print(str(a) + \"=\" + str(b) + \"-\" + str(c))\n\telif a == b * c: print(str(a) + \"=\" + str(b) + \"*\" + str(c))\n\telif a == b / c: print(str(a) + \"=\" + str(b) + \"/\" + str(c)) \n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    nums = sys.stdin.readline().split()\n    a = int(nums[0])\n    b = int(nums[1])\n    c = int(nums[2])\n\n    if a + b == c: print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n    elif a - b == c: print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n    elif a * b == c: print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n    elif a == b + c: print(str(a) + \"=\" + str(b) + \"+\" + str(c))\n    elif a == b - c: print(str(a) + \"=\" + str(b) + \"-\" + str(c))\n    elif a == b * c: print(str(a) + \"=\" + str(b) + \"*\" + str(c))\n    elif a == b / c: print(str(a) + \"=\" + str(b) + \"/\" + str(c))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649832573,
  "object": "edit"
}
2022-04-13 06:49:45.047238 fix syntax errors 3 ['\nimport sys\n\ndef main():\n\tnums = sys.stdin.readline().split()\n\ta = int(nums[0])\n\tb = int(nums[1])\n\tc = int(nums[2])\n\n\tif a + b == c: print(str(a) + "+" + str(b) + "=" + str(c))\n\telif a - b == c: print(str(a) + "-" + str(b) + "=" + str(c))\n\telif a * b == c: print(str(a) + "*" + str(b) + "=" + str(c))\n\telif a == b + c: print(str(a) + "=" + str(b) + "+" + str(c))\n\telif a == b - c: print(str(a) + "=" + str(b) + "-" + str(c))\n\telif a == b * c: print(str(a) + "=" + str(b) + "*" + str(c))\n\telif a == b / c: print(str(a) + "=" + str(b) + "/" + str(c))\n\nif __name__ == \'__main__\':\n\tmain()\n', '\n\nimport sys\n\ndef main():\n\tnums = sys.stdin.readline().split()\n\ta = int(nums[0])\n\tb = int(nums[1])\n\tc = int(nums[2])\n\n\telif a / b == c: print(str(a) + "/" + str(b) + "=" + str(c))\n\tif a + b == c: print(str(a) + "+" + str(b) + "=" + str(c))\n\telif a - b == c: print(str(a) + "-" + str(b) + "=" + str(c))\n\telif a * b == c: print(str(a) + "*" + str(b) + "=" + str(c))\n\telif a == b + c: print(str(a) + "=" + str(b) + "+" + str(c))\n\telif a == b - c: print(str(a) + "=" + str(b) + "-" + str(c))\n\telif a == b * c: print(str(a) + "=" + str(b) + "*" + str(c))\n\telif a == b / c: print(str(a) + "=" + str(b) + "/" + str(c)) \n\nif __name__ == \'__main__\':\n\tmain()\n', '\n\nimport sys\n\ndef main():\n    nums = sys.stdin.readline().split()\n    a = int(nums[0])\n    b = int(nums[1])\n    c = int(nums[2])\n\n    if a + b == c: print(str(a) + "+" + str(b) + "=" + str(c))\n    elif a - b == c: print(str(a) + "-" + str(b) + "=" + str(c))\n    elif a * b == c: print(str(a) + "*" + str(b) + "=" + str(c))\n    elif a == b + c: print(str(a) + "=" + str(b) + "+" + str(c))\n    elif a == b - c: print(str(a) + "=" + str(b) + "-" + str(c))\n    elif a == b * c: print(str(a) + "=" + str(b) + "*" + str(c))\n    elif a == b / c: print(str(a) + "=" + str(b) + "/" + str(c))\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 06:49:48.650909 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/python\n\nimport sys\n\ndef main():\n\tnums = sys.stdin.readline().split()\n\ta = int(nums[0])\n\tb = int(nums[1])\n\tc = int(nums[2])\n\n\tif a + b == c:\n\t\tprint(str(a) + \"+\" + str(b) + \"=\" + str(c))\n\telif a - b == c:\n\t\tprint(str(a) + \"-\" + str(b) + \"=\" + str(c))\n\telif a * b == c:\n\t\tprint(str(a) + \"x\" + str(b) + \"=\" + str(c))\n\telif a == b + c:\n\t\tprint(str(a) + \"=\" + str(b) + \"+\" + str(c))\n\telif a == b - c:\n\t\tprint(str(a) + \"=\" + str(b) + \"-\" + str(c))\n\telif a == b * c:\n\t\tprint(str(a) + \"=\" + str(b) + \"x\" + str(c))\n\telif a == b / c:\n\t\tprint(str(a) + \"=\" + str(b) + \"/\" + str(c))\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/python\n\nimport sys\n\ndef main():\n\tnums = sys.stdin.readline().split()\n\ta = int(nums[0])\n\tb = int(nums[1])\n\tc = int(nums[2])\n\n\tif a + b == c:\n\t\tprint(str(a) + \"+\" + str(b) + \"=\" + str(c))\n\telif a - b == c:\n\t\tprint(str(a) + \"-\" + str(b) + \"=\" + str(c))\n\telif a * b == c:\n\t\tprint(str(a) + \"*\" + str(b) + \"=\" + str(c))\n\telif a == b + c:\n\t\tprint(str(a) + \"=\" + str(b) + \"+\" + str(c))\n\telif a == b - c:\n\t\tprint(str(a) + \"=\" + str(b) + \"-\" + str(c))\n\telif a == b * c:\n\t\tprint(str(a) + \"=\" + str(b) + \"*\" + str(c))\n\telif a == b / float(c):\n\t\tprint(str(a) + \"=\" + str(b) + \"/\" + str(float(c)))\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/python\n\nimport sys\n\ndef main():\n\tnums = sys.stdin.readline().split()\n\ta = int(nums[0])\n\tb = int(nums[1])\n\tc = int(nums[2])\n\n\tif a + b == c:\n\t\tprint(str(a) + \"+\" + str(b) + \"=\" + str(c))\n\telif a - b == c:\n\t\tprint(str(a) + \"-\" + str(b) + \"=\" + str(c))\n\telif a * b == c:\n\telif a / b == c:\n\t\tprint(str(a) + \"/\" + str(b) + \"=\" + str(c))\n\t\tprint(str(a) + \"*\" + str(b) + \"=\" + str(c))\n\telif a == b + c:\n\t\tprint(str(a) + \"=\" + str(b) + \"+\" + str(c))\n\telif a == b - c:\n\t\tprint(str(a) + \"=\" + str(b) + \"-\" + str(c))\n\telif a == b * c:\n\t\tprint(str(a) + \"=\" + str(b) + \"*\" + str(c))\n\telif a * c == b:\n\t\tprint(str(a) + \"=\" + str(b) + \"/\" + str(c))\n\nif __name__ == '__main__':\n\tmain()\n"
    }
  ],
  "created": 1649832585,
  "object": "edit"
}
2022-04-13 06:49:48.651093 fix syntax errors 3 ['#!/usr/bin/python\n\nimport sys\n\ndef main():\n\tnums = sys.stdin.readline().split()\n\ta = int(nums[0])\n\tb = int(nums[1])\n\tc = int(nums[2])\n\n\tif a + b == c:\n\t\tprint(str(a) + "+" + str(b) + "=" + str(c))\n\telif a - b == c:\n\t\tprint(str(a) + "-" + str(b) + "=" + str(c))\n\telif a * b == c:\n\t\tprint(str(a) + "x" + str(b) + "=" + str(c))\n\telif a == b + c:\n\t\tprint(str(a) + "=" + str(b) + "+" + str(c))\n\telif a == b - c:\n\t\tprint(str(a) + "=" + str(b) + "-" + str(c))\n\telif a == b * c:\n\t\tprint(str(a) + "=" + str(b) + "x" + str(c))\n\telif a == b / c:\n\t\tprint(str(a) + "=" + str(b) + "/" + str(c))\n\nif __name__ == \'__main__\':\n\tmain()\n', '#!/usr/bin/python\n\nimport sys\n\ndef main():\n\tnums = sys.stdin.readline().split()\n\ta = int(nums[0])\n\tb = int(nums[1])\n\tc = int(nums[2])\n\n\tif a + b == c:\n\t\tprint(str(a) + "+" + str(b) + "=" + str(c))\n\telif a - b == c:\n\t\tprint(str(a) + "-" + str(b) + "=" + str(c))\n\telif a * b == c:\n\t\tprint(str(a) + "*" + str(b) + "=" + str(c))\n\telif a == b + c:\n\t\tprint(str(a) + "=" + str(b) + "+" + str(c))\n\telif a == b - c:\n\t\tprint(str(a) + "=" + str(b) + "-" + str(c))\n\telif a == b * c:\n\t\tprint(str(a) + "=" + str(b) + "*" + str(c))\n\telif a == b / float(c):\n\t\tprint(str(a) + "=" + str(b) + "/" + str(float(c)))\n\nif __name__ == \'__main__\':\n\tmain()\n', '#!/usr/bin/python\n\nimport sys\n\ndef main():\n\tnums = sys.stdin.readline().split()\n\ta = int(nums[0])\n\tb = int(nums[1])\n\tc = int(nums[2])\n\n\tif a + b == c:\n\t\tprint(str(a) + "+" + str(b) + "=" + str(c))\n\telif a - b == c:\n\t\tprint(str(a) + "-" + str(b) + "=" + str(c))\n\telif a * b == c:\n\telif a / b == c:\n\t\tprint(str(a) + "/" + str(b) + "=" + str(c))\n\t\tprint(str(a) + "*" + str(b) + "=" + str(c))\n\telif a == b + c:\n\t\tprint(str(a) + "=" + str(b) + "+" + str(c))\n\telif a == b - c:\n\t\tprint(str(a) + "=" + str(b) + "-" + str(c))\n\telif a == b * c:\n\t\tprint(str(a) + "=" + str(b) + "*" + str(c))\n\telif a * c == b:\n\t\tprint(str(a) + "=" + str(b) + "/" + str(c))\n\nif __name__ == \'__main__\':\n\tmain()\n']
2022-04-13 06:49:48.651131 size on output set 8
2022-04-13 06:49:48.651142 num operations 2
2022-04-13 06:49:48.651148 size on input set 1
2022-04-13 06:49:50.390253 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef Solve(a, b, c):\n    if a + b == c:\n        return '%d+%d=%d' % (a, b, c)\n    if a - b == c:\n        return '%d-%d=%d' % (a, b, c)\n    if a * b == c:\n        return '%d*%d=%d' % (a, b, c)\n    if a == b * c:\n        return '%d=%d*%d' % (a, b, c)\n    if a == b / c:\n        return '%d=%d/%d' % (a, b, c)\n    if a / b == c:\n        return '%d/%d=%d' % (a, b, c)\n\ndef main():\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    print(Solve(a, b, c))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef Solve(a, b, c):\n    if a + b == c:\n        return '%d+%d=%d' % (a, b, c)\n    if a - b == c:\n        return '%d-%d=%d' % (a, b, c)\n    if a * b == c:\n        return '%d*%d=%d' % (a, b, c)\n    if a == b * c:\n        return '%d=%d*%d' % (a, b, c)\n    if a == b / c:\n        return '%d=%d/%d' % (a, b, c)\n    if a / b == c:\n        return '%d/%d=%d' % (a, b, c)\n    return 'None'\ndef main():\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    print(Solve(a, b, c))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef Solve(a, b, c):\n    if a + b == c:\n        return '%d+%d=%d' % (a, b, c)\n    if a - b == c:\n        return '%d-%d=%d' % (a, b, c)\n    if a * b == c:\n        return '%d*%d=%d' % (a, b, c)\n    if a == b * c:\n        return '%d=%d*%d' % (a, b, c)\n    if a == b / c:\n        return '%d=%d/%d' % (a, b, c)\n    if a / b == c:\n        return '%d/%d=%d' % (a, b, c)\n\ndef main():\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    print(Solve(a, b, c))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649832588,
  "object": "edit"
}
2022-04-13 06:49:50.390440 fix spelling mistakes 3 ["import sys\n\ndef Solve(a, b, c):\n    if a + b == c:\n        return '%d+%d=%d' % (a, b, c)\n    if a - b == c:\n        return '%d-%d=%d' % (a, b, c)\n    if a * b == c:\n        return '%d*%d=%d' % (a, b, c)\n    if a == b * c:\n        return '%d=%d*%d' % (a, b, c)\n    if a == b / c:\n        return '%d=%d/%d' % (a, b, c)\n    if a / b == c:\n        return '%d/%d=%d' % (a, b, c)\n\ndef main():\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    print(Solve(a, b, c))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef Solve(a, b, c):\n    if a + b == c:\n        return '%d+%d=%d' % (a, b, c)\n    if a - b == c:\n        return '%d-%d=%d' % (a, b, c)\n    if a * b == c:\n        return '%d*%d=%d' % (a, b, c)\n    if a == b * c:\n        return '%d=%d*%d' % (a, b, c)\n    if a == b / c:\n        return '%d=%d/%d' % (a, b, c)\n    if a / b == c:\n        return '%d/%d=%d' % (a, b, c)\n    return 'None'\ndef main():\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    print(Solve(a, b, c))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef Solve(a, b, c):\n    if a + b == c:\n        return '%d+%d=%d' % (a, b, c)\n    if a - b == c:\n        return '%d-%d=%d' % (a, b, c)\n    if a * b == c:\n        return '%d*%d=%d' % (a, b, c)\n    if a == b * c:\n        return '%d=%d*%d' % (a, b, c)\n    if a == b / c:\n        return '%d=%d/%d' % (a, b, c)\n    if a / b == c:\n        return '%d/%d=%d' % (a, b, c)\n\ndef main():\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    print(Solve(a, b, c))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 06:49:50.390536 size on output set 2
2022-04-13 06:49:50.390545 size on input set 2
2022-04-13 06:49:53.218121 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#include<stdio.h>\nimport sys\n\ndef Solve(a, b, c):\n    if a + b == c:\n        return '%d+%d=%d' % (a, b, c)\n    if a - b == c:\n        return '%d-%d=%d' % (a, b, c)\n    if a * b == c:\n        return '%d*%d=%d' % (a, b, c)\n    if a == b * c:\n        return '%d=%d*%d' % (a, b, c)\n    if a == b / c and b%c==0:\n        return '%d=%d/%d' % (a, b, c)\n    if a / b == c and a%b==0:\n        return '%d/%d=%d' % (a, b, c)\n    return 'None'\ndef main():\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    print(Solve(a, b, c))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef Solve(a, b, c):\n    if a + b == c:\n        return '%d+%d=%d' % (a, b, c)\n    if a - b == c:\n        return '%d-%d=%d' % (a, b, c)\n    if a * b == c:\n        return '%d*%d=%d' % (a, b, c)\n    if a == b * c:\n        return '%d=%d*%d' % (a, b, c)\n    if a * c == b:\n        return '%d=%d/%d' % (a, b, c)\n    if a / b == c:\n        return '%d/%d=%d' % (a, b, c)\n    return 'None'\ndef main():\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    print(Solve(a, b, c))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef Solve(a, b, c):\n    if a + b == c:\n        return '%d+%d=%d' % (a, b, c)\n    if a - b == c:\n        return '%d-%d=%d' % (a, b, c)\n    if a * b == c:\n        return '%d*%d=%d' % (a, b, c)\n    if a == b * c:\n        return '%d=%d*%d' % (a, b, c)\n    if a == b // c:\n        return '%d=%d/%d' % (a, b, c)\n    if a // b == c:\n        return '%d/%d=%d' % (a, b, c)\n    return 'None'\ndef main():\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    print(Solve(a, b, c))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649832590,
  "object": "edit"
}
2022-04-13 06:49:53.218292 fix syntax errors 3 ["\n#include<stdio.h>\nimport sys\n\ndef Solve(a, b, c):\n    if a + b == c:\n        return '%d+%d=%d' % (a, b, c)\n    if a - b == c:\n        return '%d-%d=%d' % (a, b, c)\n    if a * b == c:\n        return '%d*%d=%d' % (a, b, c)\n    if a == b * c:\n        return '%d=%d*%d' % (a, b, c)\n    if a == b / c and b%c==0:\n        return '%d=%d/%d' % (a, b, c)\n    if a / b == c and a%b==0:\n        return '%d/%d=%d' % (a, b, c)\n    return 'None'\ndef main():\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    print(Solve(a, b, c))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef Solve(a, b, c):\n    if a + b == c:\n        return '%d+%d=%d' % (a, b, c)\n    if a - b == c:\n        return '%d-%d=%d' % (a, b, c)\n    if a * b == c:\n        return '%d*%d=%d' % (a, b, c)\n    if a == b * c:\n        return '%d=%d*%d' % (a, b, c)\n    if a * c == b:\n        return '%d=%d/%d' % (a, b, c)\n    if a / b == c:\n        return '%d/%d=%d' % (a, b, c)\n    return 'None'\ndef main():\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    print(Solve(a, b, c))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef Solve(a, b, c):\n    if a + b == c:\n        return '%d+%d=%d' % (a, b, c)\n    if a - b == c:\n        return '%d-%d=%d' % (a, b, c)\n    if a * b == c:\n        return '%d*%d=%d' % (a, b, c)\n    if a == b * c:\n        return '%d=%d*%d' % (a, b, c)\n    if a == b // c:\n        return '%d=%d/%d' % (a, b, c)\n    if a // b == c:\n        return '%d/%d=%d' % (a, b, c)\n    return 'None'\ndef main():\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    print(Solve(a, b, c))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 06:49:59.865600 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef Solve(a, b, c):\n    if a + b == c:\n        return '%d+%d=%d' % (a, b, c)\n    if a - b == c:\n        return '%d-%d=%d' % (a, b, c)\n    if a * b == c:\n        return '%d*%d=%d' % (a, b, c)\n    if a == b * c:\n        return '%d=%d*%d' % (a, b, c)\n    if a == b // c:\n        return '%d=%d/%d' % (a, b, c)\n    if a // b == c:\n        return '%d/%d=%d' % (a, b, c)\n\ndef main():\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    print(Solve(a, b, c))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef Solve(a, b, c):\n    if a + b == c:\n        return '%d+%d=%d' % (a, b, c)\n    if a - b == c:\n        return '%d-%d=%d' % (a, b, c)\n    if a * b == c:\n        return '%d*%d=%d' % (a, b, c)\n    if a == b * c:\n        return '%d=%d*%d' % (a, b, c)\n    if a == b // c:\n        return '%d=%d/%d' % (a, b, c)\n    if a // b == c:\n        return '%d/%d=%d' % (a, b, c)\n\ndef main():\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    print(Solve(a, b, c))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef Solve(a, b, c):\n    if a + b == c:\n        return '%d + %d = %d' % (a, b, c)\n    if a - b == c:\n        return '%d - %d = %d' % (a, b, c)\n    if a * b == c:\n        return '%d * %d = %d' % (a, b, c)\n    if a == b * c:\n        return '%d = %d * %d' % (a, b, c)\n    if a == b / c:\n        return '%d = %d / %d' % (a, b, c)\n    if a / b == c:\n        return '%d / %d = %d' % (a, b, c)\n\ndef main():\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    print(Solve(a, b, c))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649832593,
  "object": "edit"
}
2022-04-13 06:49:59.865770 fix syntax errors 3 ["import sys\n\ndef Solve(a, b, c):\n    if a + b == c:\n        return '%d+%d=%d' % (a, b, c)\n    if a - b == c:\n        return '%d-%d=%d' % (a, b, c)\n    if a * b == c:\n        return '%d*%d=%d' % (a, b, c)\n    if a == b * c:\n        return '%d=%d*%d' % (a, b, c)\n    if a == b // c:\n        return '%d=%d/%d' % (a, b, c)\n    if a // b == c:\n        return '%d/%d=%d' % (a, b, c)\n\ndef main():\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    print(Solve(a, b, c))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef Solve(a, b, c):\n    if a + b == c:\n        return '%d+%d=%d' % (a, b, c)\n    if a - b == c:\n        return '%d-%d=%d' % (a, b, c)\n    if a * b == c:\n        return '%d*%d=%d' % (a, b, c)\n    if a == b * c:\n        return '%d=%d*%d' % (a, b, c)\n    if a == b // c:\n        return '%d=%d/%d' % (a, b, c)\n    if a // b == c:\n        return '%d/%d=%d' % (a, b, c)\n\ndef main():\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    print(Solve(a, b, c))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef Solve(a, b, c):\n    if a + b == c:\n        return '%d + %d = %d' % (a, b, c)\n    if a - b == c:\n        return '%d - %d = %d' % (a, b, c)\n    if a * b == c:\n        return '%d * %d = %d' % (a, b, c)\n    if a == b * c:\n        return '%d = %d * %d' % (a, b, c)\n    if a == b / c:\n        return '%d = %d / %d' % (a, b, c)\n    if a / b == c:\n        return '%d / %d = %d' % (a, b, c)\n\ndef main():\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    print(Solve(a, b, c))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 06:49:59.865806 size on output set 5
