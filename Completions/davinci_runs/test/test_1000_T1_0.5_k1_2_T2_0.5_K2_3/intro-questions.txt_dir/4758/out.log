2022-04-09 22:00:09.769722 """
Every year, Pumpkin Pete comes up with a couple of different Jack-O’-Lantern ideas for his annual Halloween special. He stacks them up on haystacks for everyone to enjoy and take pictures with. To make sure that there’s a wide variety of displays, he wants to make sure many possible Jack-O’-Lanterns designs are available. He has come up with many eye, nose, and mouth designs and would like to know how many unique designs are possible. He needs your help to set up the displays before the special kicks off!Input

The input consists of one line which contains three integers. The first, $N$, indicates the number of eye designs. The second, $T$, indicates the number of nose designs. The third, $M$, indicates the number of mouth designs.Output

Output a single line containing the number of different possible Jack-O’-Lantern designs.

-----Examples-----
Sample Input 1:
3 4 5
Sample Output 1:
60

Sample Input 2:
2 2 2
Sample Output 2:
8
"""
2022-04-09 22:00:09.769750 --------------------------
2022-04-09 22:00:31.991035 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef main():\n    N, T, M = map(int, input().split())\n    print(N * T * M)\n\nmain()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    N,T,M = map(int,sys.stdin.readline().split())\n    print(N*T*M)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nN, T, M = map(int, input().split())\nprint(N*T*M)"
    },
    {
      "finish_reason": "stop",
      "index": 3,
      "logprobs": null,
      "text": "\n\ndef main():\n    N, T, M = map(int, input().split())\n    print(N * T * M)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 4,
      "logprobs": null,
      "text": "\nimport sys\n\nN, T, M = map(int, sys.stdin.readline().split())\n\nprint(N * T * M)"
    },
    {
      "finish_reason": "stop",
      "index": 5,
      "logprobs": null,
      "text": "\n\nn, t, m = map(int, input().split())\nprint(n * t * m)"
    },
    {
      "finish_reason": "stop",
      "index": 6,
      "logprobs": null,
      "text": "\n\nfrom itertools import product\n\nN, T, M = map(int, input().split())\nprint(len(set(product(range(N), range(T), range(M)))))"
    },
    {
      "finish_reason": "stop",
      "index": 7,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, t, m = [int(i) for i in sys.stdin.readline().split()]\n    print(n * t * m)\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "created": 1649556010,
  "id": "cmpl-4vHA2incNwKHxHAlHDXiB7aDxx8WO",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 22:00:31.991307 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef main():\n    N, T, M = map(int, input().split())\n    print(N * T * M)\n\nmain()"
}
2022-04-09 22:00:31.991342 REASON stop
2022-04-09 22:00:31.992119 test/intro-questions.txt_dir/4758/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4758/solutions.json'
2022-04-09 22:00:31.992141 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    N,T,M = map(int,sys.stdin.readline().split())\n    print(N*T*M)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-09 22:00:31.992195 REASON stop
2022-04-09 22:00:31.992465 test/intro-questions.txt_dir/4758/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4758/solutions.json'
2022-04-09 22:00:31.992478 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nN, T, M = map(int, input().split())\nprint(N*T*M)"
}
2022-04-09 22:00:31.992521 REASON stop
2022-04-09 22:00:31.992876 test/intro-questions.txt_dir/4758/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4758/solutions.json'
2022-04-09 22:00:31.992889 3 {
  "finish_reason": "stop",
  "index": 3,
  "logprobs": null,
  "text": "\n\ndef main():\n    N, T, M = map(int, input().split())\n    print(N * T * M)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-09 22:00:31.992929 REASON stop
2022-04-09 22:00:31.993292 test/intro-questions.txt_dir/4758/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4758/solutions.json'
2022-04-09 22:00:31.993316 4 {
  "finish_reason": "stop",
  "index": 4,
  "logprobs": null,
  "text": "\nimport sys\n\nN, T, M = map(int, sys.stdin.readline().split())\n\nprint(N * T * M)"
}
2022-04-09 22:00:31.993374 REASON stop
2022-04-09 22:00:31.993605 test/intro-questions.txt_dir/4758/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4758/solutions.json'
2022-04-09 22:00:31.993618 5 {
  "finish_reason": "stop",
  "index": 5,
  "logprobs": null,
  "text": "\n\nn, t, m = map(int, input().split())\nprint(n * t * m)"
}
2022-04-09 22:00:31.993670 REASON stop
2022-04-09 22:00:31.993995 test/intro-questions.txt_dir/4758/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4758/solutions.json'
2022-04-09 22:00:31.994055 6 {
  "finish_reason": "stop",
  "index": 6,
  "logprobs": null,
  "text": "\n\nfrom itertools import product\n\nN, T, M = map(int, input().split())\nprint(len(set(product(range(N), range(T), range(M)))))"
}
2022-04-09 22:00:31.994147 REASON stop
2022-04-09 22:00:31.994627 test/intro-questions.txt_dir/4758/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4758/solutions.json'
2022-04-09 22:00:31.994652 7 {
  "finish_reason": "stop",
  "index": 7,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, t, m = [int(i) for i in sys.stdin.readline().split()]\n    print(n * t * m)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-09 22:00:31.994703 REASON stop
2022-04-09 22:00:31.994830 test/intro-questions.txt_dir/4758/question.txt [Errno 2] No such file or directory: 'test/intro-questions.txt_dir/4758/solutions.json'
