["import math\nimport sys\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nN = int(input())\nV = list(map(int, input().split()))\nC = list(map(int, input().split()))\n\nans = 0\nfor i in range(N):\n    if V[i] > C[i]:\n        ans += V[i] - C[i]\n\nprint(ans)\n", "\ndef main():\n    n = int(input())\n    values = [int(x) for x in input().split()]\n    costs = [int(x) for x in input().split()]\n    max_value = 0\n    for i in range(1, 2**n):\n        value = 0\n        cost = 0\n        for j in range(n):\n            if ((i >> j) & 1):\n                value += values[j]\n                cost += costs[j]\n        max_value = max(max_value, value - cost)\n    print(max_value)\n\n\nif __name__ == '__main__':\n    main()\n", "\nN = int(input())\nA = list(map(int, input().split()))\n\nans = 1\nfor i in range(1, N):\n    if A[i] > A[i - 1]:\n        ans += 1\n\nprint(ans)\n", "\n\nimport math\nimport sys\n\n\ndef main():\n    a = int(sys.argv[1])\n    b = int(sys.argv[2])\n    c = int(sys.argv[3])\n    D = b**2 - 4*a*c\n\n    if D < 0:\n        print(\"No roots\")\n    elif D == 0:\n        x = -b / (2*a)\n        print(\"One root:\", x)\n    else:\n        x1 = (-b + math.sqrt(D)) / (2*a)\n        x2 = (-b - math.sqrt(D)) / (2*a)\n        print(\"Two roots:\", x1, x2)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    values = [int(x) for x in input().split(\" \")]\n    costs = [int(x) for x in input().split(\" \")]\n    max_value = 0\n    for i in range(1, 2**n):\n        value = 0\n        cost = 0\n        for j in range(n):\n            if ((i >> j) & 1):\n                value += values[j]\n                cost += costs[j]\n        max_value = max(max_value, value - cost)\n    print(max_value)\n\n\nif __name__ == '__main__':\n    main()\n", "\nfrom collections import defaultdict\nfrom itertools import product\n\n\ndef get_divisors(n):\n    divisors = set()\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors.add(i)\n            divisors.add(n // i)\n    return divisors\n\n\ndef main():\n    n, m = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    a_divisors = defaultdict(set)\n    for a_i in a:\n        for divisor in get_divisors(a_i):\n            a_divisors[divisor].add(a_i)\n    b_divisors = defaultdict(set)\n    for b_i in b:\n        for divisor in get_divisors(b_i):\n            b_divisors[divisor].add(b_i)\n    result = 0\n    for divisor in a_divisors.keys():\n        if divisor in b_divisors:\n            result += len(a_divisors[divisor]) * len(b_divisors[divisor])\n    print(result)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    values = [int(x) for x in input().split()]\n    costs = [int(x) for x in input().split()]\n    max_value = 0\n    for i in range(1, 2 ** n):\n        value = 0\n        cost = 0\n        for j in range(n):\n            if (i >> j) & 1:\n                value += values[j]\n                cost += costs[j]\n        max_value = max(max_value, value - cost)\n    print(max_value)\n\n\nif __name__ == '__main__':\n    main()\n", "import math\nimport sys\n\n\ndef main():\n    n = int(input())\n    values = [int(x) for x in input().split()]\n    costs = [int(x) for x in input().split()]\n    max_value = -1\n    for i in range(1, 2**n):\n        value = 0\n        cost = 0\n        for j in range(n):\n            if ((i >> j) & 1):\n                value += values[j]\n                cost += costs[j]\n        if cost <= 1000:\n            max_value = max(max_value, value - cost)\n    print(max_value)\n\n\nif __name__ == '__main__':\n    main()\n", "N = int(input())\nV = list(map(int, input().split()))\nC = list(map(int, input().split()))\n\nans = 0\nfor i in range(N):\n    if V[i] > C[i]:\n        ans += V[i] - C[i]\n\nprint(ans)\n", "\n\ndef main():\n    print(\"hello\")\n\nif __name__ == '__main__':\n    main()\n", "\n\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n"]