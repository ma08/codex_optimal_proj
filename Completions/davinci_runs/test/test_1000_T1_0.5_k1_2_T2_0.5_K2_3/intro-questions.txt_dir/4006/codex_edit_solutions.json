["\ndef main():\n    f_in = open(\"file.in\", 'r')\n    n = int(f_in.readline())  # number of test cases\n    for i in range(n):\n        n = int(f_in.readline())\n        print(count_reachable(n))\n\n\ndef count_reachable(n):\n    if n == 1:  # base case\n        return 2\n    return count_reachable(n-1) + is_reachable(n-1, n)  # recursive call\n\ndef is_reachable(n, m):\n    if n == m:  # base case\n        return 1\n    if n < 1:  # base case\n        return 0\n    if n % 10 == 0:  # recursive call\n        return is_reachable(n//10, m)\n    return is_reachable(n-1, m)  # recursive call\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef f(n):\n    n = n + 1\n    while n % 10 == 0: n = n // 10\n    return n\n\ndef main():\n    n = int(input())\n    memo = set()\n    while n not in memo:\n        memo.add(n)\n        n = f(n)\n    print(len(memo))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    f_in = open(\"input.txt\", \"r\")\n    n = int(f_in.readline().strip())\n    f_out = open(\"output.txt\", \"w\")\n    f_out.write(str(count_reachable(n)))\n\ndef count_reachable(n):\n    if n == 1:\n        return 2\n    return count_reachable(n-1) + is_reachable(n-1, n)\n\ndef is_reachable(n, m):\n    if n == m:\n        return 1\n    if n < 1:\n        return 0\n    if n % 10 == 0:\n        return is_reachable(n//10, m)\n    return is_reachable(n-1, m)\n\nif __name__ == \"__main__\":\n    main()\n", "def f(n):\n    return n + 1 if n % 10 != 0 else n // 10\n\ndef main():\n    n = int(input())\n    memo = set()\n    while n not in memo:\n        memo.add(n)\n        n = f(n)\n    print(len(memo))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    f_in = open(\"file.in\", \"r\")\n    n = int(f_in.readline())  # number of test cases\n    for i in range(n):\n        x = int(f_in.readline())\n        print(count_reachable(x))\n\ndef count_reachable(n):\n    if n == 1:  # base case\n        return 2\n    return count_reachable(n - 1) + is_reachable(n - 1, n)  # recursive call\n\ndef is_reachable(n, m):\n    if n == m:  # base case\n        return 1\n    if n < 1:  # base case\n        return 0\n    if n % 10 == 0:  # recursive call\n        return is_reachable(n // 10, m)\n    return is_reachable(n - 1, m)  # recursive call\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef f(n):\n    n = n + 1\n    while n % 10 == 0:\n        n = n // 10\n    return n\n\ndef main():\n    n = int(input()); memo = set()\n    while n not in memo:\n        memo.add(n)\n        n = f(n)\n    print(len(memo))    \n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    f_in = open('file.in', 'r')\n    n = int(f_in.readline().strip())\n    print(count_reachable(n), file=open('file.out', 'w'))\n\ndef count_reachable(n):\n    if n == 1:\n        return 2\n    return count_reachable(n - 1) + is_reachable(n - 1, n)\n\ndef is_reachable(n, m):\n    if n == m:\n        return 1\n    if n < 1:\n        return 0\n    if n % 10 == 0:\n        return is_reachable(n // 10, m)\n    return is_reachable(n - 1, m)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    f_in = open(\"file.in\", \"r\")\n    n = int(f_in.readline())\n    print(count_reachable(n))\n\ndef count_reachable(n):\n    if n == 1:\n        return 2\n    return count_reachable(n-1) + is_reachable(n-1, n) + 1\n\ndef is_reachable(n, m):\n    if n == m:\n        return 1\n    if n < 1:\n        return 0\n    if n % 10 == 0:\n        return is_reachable(n//10, m)\n    return is_reachable(n-1, m)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    f_in = open(\"input.in\", \"r\")\n    n = int(f_in.readline().strip())\n    print(count_reachable(n))\n\ndef count_reachable(n):\n    if n == 1:\n        return 2\n    return count_reachable(n-1) + is_reachable(n-1, n)\n\ndef is_reachable(n, m):\n    if n == m:\n        return 1\n    if n < 1:\n        return 0\n    if n % 10 == 0:\n        return is_reachable(n//10, m)\n    return is_reachable(n-1, m)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    f_in = open(\"file.in\")\n    n = int(f_in.readline())\n\n    print(count_reachable(n))\n\ndef count_reachable(n):\n    if n == 1:\n        return 2\n    return count_reachable(n-1) + is_reachable(n-1, n)\n\ndef is_reachable(n, m):\n    if n == m:\n        return 1\n    if n < 1:\n        return 0\n    if n % 10 == 0:\n        return is_reachable(n//10, m)\n    return is_reachable(n-1, m)\n\nif __name__ == \"__main__\":\n    main()\n", "def f(n):\n    n += 1\n    while n % 10 == 0:\n        n = n // 10\n    return n\n\ndef main():\n    n = int(input())\n    memo = set()\n    while n not in memo:\n        memo.add(n)\n        n = f(n)\n    print(len(memo))\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef f(n):\n    n = n + 1\n    while n % 10 == 0: n /= 10\n    return n\n\ndef main():\n    n = int(input()); memo = set()\n    while n not in memo: memo.add(n); n = f(n)\n    print(len(memo))    \n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    f_in = open(\"i.in\", \"r\")\n    n = int(f_in.readline().strip())\n    print(count_reachable(n))\n\ndef count_reachable(n):\n    if n == 1:\n        return 2\n    return count_reachable(n-1) + is_reachable(n-1, n)\n\ndef is_reachable(n, m):\n    if n == m or n < 1:\n        return 1 if n == m else 0\n    if n % 10 == 0:\n        return is_reachable(n//10, m)\n    return is_reachable(n-1, m)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    f_in = open(\"file.txt\", \"r\")\n    n = int(f_in.readline())  # number of test cases\n    for i in range(n):\n        x = int(f_in.readline())\n        print(count_reachable(x))\n\ndef count_reachable(n):\n    if n == 1:  # base case\n        return 2\n    return count_reachable(n-1) + is_reachable(n-1, n)  # recursive call\n\ndef is_reachable(n, m):\n    if n == m:  # base case\n        return 1\n    if n < 1:  # base case\n        return 0\n    if n % 10 == 0:  # recursive call\n        return is_reachable(n//10, m)\n    return is_reachable(n-1, m)  # recursive call\n\nif __name__ == \"__main__\":\n    main()\n"]