["\n\ndef stars(n, m, grid):\n    #print(grid)\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                s = 1\n                while i + s < n and i - s >= 0 and j + s < m and j - s >= 0:\n                    if grid[i + s][j] == '*' and grid[i - s][j] == '*' and grid[i][j + s] == '*' and grid[i][j - s] == '*':\n                        grid[i + s][j] = '.'\n                        grid[i - s][j] = '.'\n                        grid[i][j + s] = '.'\n                        grid[i][j - s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i + 1, j + 1, s - 1)\n    if k == 0:\n        print(-1)\n\n\n\nn, m = map(int, input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n, m, grid)\n", "\ndef stars(n, m, grid):\n    # print(grid)\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                s = 1\n                while i + s < n and i - s >= 0 and j + s < m and j - s >= 0:\n                    if grid[i + s][j] == '*' and grid[i - s][j] == '*' and grid[i][j + s] == '*' and grid[i][j - s] == '*':\n                        grid[i + s][j] = '.'\n                        grid[i - s][j] = '.'\n                        grid[i][j + s] = '.'\n                        grid[i][j - s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i + 1, j + 1, s - 1)\n    if k == 0:\n        print(-1)\n\n\n\nn, m = map(int, input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n, m, grid)\n", "\n\ndef stars(n, m, grid):\n    #print(grid)\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                s = 1\n                while i + s < n and i - s >= 0 and j + s < m and j - s >= 0:\n                    if grid[i + s][j] == '*' and grid[i - s][j] == '*' and grid[i][j + s] == '*' and grid[i][j - s] == '*':\n                        grid[i + s][j] = '.'\n                        grid[i - s][j] = '.'\n                        grid[i][j + s] = '.'\n                        grid[i][j - s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i+1, j+1, s-1)\n    if k == 0:\n        print(-1)\n\n\nn, m = map(int, input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n, m, grid)\n", "\n\ndef stars(n,m,grid): \n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                s = 1\n                while i+s < n and i-s >=0 and j+s < m and j-s >= 0: \n                    if grid[i+s][j] == '*' and grid[i-s][j] == '*' and grid[i][j+s] == '*' and grid[i][j-s] == '*':\n                        grid[i+s][j] = '.'\n                        grid[i-s][j] = '.'\n                        grid[i][j+s] = '.'\n                        grid[i][j-s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i+1,j+1,s-1)\n    if k == 0:\n        print(-1)\n\n\nn,m = map(int,input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n,m,grid)\n", "\n#\n# def stars(n,m,grid):\n#     #print(grid)\n#     k = 0\n#     for i in range(n):\n#         for j in range(m):\n#             if grid[i][j] == '*':\n#                 k += 1\n#                 grid[i][j] = '.'\n#                 s = 1\n#                 while i+s < n and i-s >=0 and j+s < m and j-s >= 0:\n#                     if grid[i+s][j] == '*' and grid[i-s][j] == '*' and grid[i][j+s] == '*' and grid[i][j-s] == '*':\n#                         grid[i+s][j] = '.'\n#                         grid[i-s][j] = '.'\n#                         grid[i][j+s] = '.'\n#                         grid[i][j-s] = '.'\n#                         s += 1\n#                     else:\n#                         break\n#                 print(i+1,j+1,s-1)\n#     if k == 0:\n#         print(-1)\n#\n#\n# n,m = map(int,input().split())\n# grid = []\n# for i in range(n):\n#     grid.append(list(input()))\n# stars(n,m,grid)\n", "\n\ndef stars(n, m, grid):\n    #print(grid)\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                s = 1\n                while i + s < n and i - s >= 0 and j + s < m and j - s >= 0:\n                    if grid[i + s][j] == '*' and grid[i - s][j] == '*' and grid[i][j + s] == '*' and grid[i][j - s] == '*':\n                        grid[i + s][j] = '.'\n                        grid[i - s][j] = '.'\n                        grid[i][j + s] = '.'\n                        grid[i][j - s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i + 1, j + 1, s - 1)\n    if k == 0:\n        print(-1)\n\n\nn, m = map(int, input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n, m, grid)\n", "\nn,m = map(int,input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars = []\nfor i in range(n):\n    for j in range(m):\n        if (grid[i][j] == '*'):\n            if (i>0 and j>0 and grid[i-1][j-1] == '*') or (i>0 and grid[i-1][j] == '*') or (i>0 and j<m-1 and grid[i-1][j+1] == '*') or (j>0 and grid[i][j-1] == '*') or (j<m-1 and grid[i][j+1] == '*') or (i<n-1 and j>0 and grid[i+1][j-1] == '*') or (i<n-1 and grid[i+1][j] == '*') or (i<n-1 and j<m-1 and grid[i+1][j+1] == '*'):\n                stars.append([i+1,j+1,1])\n            else:\n                flag = True\n                r = 0\n                while(flag):\n                    r += 1\n                    if (i-r<0 or j-r<0 or i+r>=n or j+r>=m):\n                        flag = False\n                    else:\n                        if (grid[i-r][j-r] == '*' and grid[i-r][j+r] == '*' and grid[i+r][j-r] == '*' and grid[i+r][j+r] == '*'):\n                            stars.append([i+1,j+1,r+1])\n                        else:\n                            flag = False\nif (len(stars) == 0):\n    print(\"-1\")\nelse:\n    print(len(stars))\n    for i in range(len(stars)):\n        print(stars[i][0],stars[i][1],stars[i][2])\n", "\nn, m = map(int, input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars = []\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == '*':\n            if i > 0 and j > 0 and grid[i-1][j-1] == '*' or (i > 0 and grid[i-1][j] == '*') or (i > 0 and j < m-1 and grid[i-1][j+1] == '*') or (j > 0 and grid[i][j-1] == '*') or (j < m-1 and grid[i][j+1] == '*') or (i < n-1 and j > 0 and grid[i+1][j-1] == '*') or (i < n-1 and grid[i+1][j] == '*') or (i < n-1 and j < m-1 and grid[i+1][j+1] == '*'):\n                stars.append([i+1,j+1,1]) \n            else:\n                flag = True\n                r = 0\n                while flag:\n                    r += 1\n                    if i-r < 0 or j-r < 0 or i+r >= n or j+r >= m:\n                        flag = False\n                    else:\n                        if grid[i-r][j-r] == '*' and grid[i-r][j+r] == '*' and grid[i+r][j-r] == '*' and grid[i+r][j+r] == '*':\n                            stars.append([i+1, j+1, r+1])\n                        else:\n                            flag = False\nif len(stars) == 0:\n    print(\"-1\")\nelse:\n    print(len(stars))\n    for i in range(len(stars)):\n        print(stars[i][0], stars[i][1], stars[i][2])\n", "\n\ndef stars(n,m,grid):\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                s = 1\n                while i+s < n and i-s >= 0 and j+s < m and j-s >= 0:\n                    if grid[i+s][j] == '*' and grid[i-s][j] == '*' and grid[i][j+s] == '*' and grid[i][j-s] == '*':\n                        grid[i+s][j] = '.'\n                        grid[i-s][j] = '.'\n                        grid[i][j+s] = '.'\n                        grid[i][j-s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i+1,j+1,s)\n    if k == 0:\n        print(-1)\n\n\nn,m = map(int,input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n,m,grid)\n", "def main():\n    n, m = map(int, input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if (grid[i][j] == '*'):\n                if (i > 0 and j > 0 and grid[i-1][j-1] == '*') or (i > 0 and grid[i-1][j] == '*') or (i > 0 and j < m-1 and grid[i-1][j+1] == '*') or (j > 0 and grid[i][j-1] == '*') or (j < m-1 and grid[i][j+1] == '*') or (i < n-1 and j > 0 and grid[i+1][j-1] == '*') or (i < n-1 and grid[i+1][j] == '*') or (i < n-1 and j < m-1 and grid[i+1][j+1] == '*'):\n                    stars.append([i+1, j+1, 1])\n                else:\n                    flag = True\n                    r = 0\n                    while(flag):\n                        r += 1\n                        if (i-r < 0 or j-r < 0 or i+r >= n or j+r >= m):\n                            flag = False\n                        else:\n                            if (grid[i-r][j-r] == '*' and grid[i-r][j+r] == '*' and grid[i+r][j-r] == '*' and grid[i+r][j+r] == '*'):\n                                stars.append([i+1,j+1,r+1])\n                            else:\n                                flag = False\n    if (len(stars) == 0):\n        print(\"-1\")\n    else:\n        print(len(stars))\n        for i in range(len(stars)):\n            print(stars[i][0],stars[i][1],stars[i][2])\nmain()\n", "import sys\nsys.setrecursionlimit(10000)\ndef main():\n    n,m = map(int,input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if (grid[i][j] == '*'):\n                r = find_star(grid,i,j,n,m)\n                if (r>0):\n                    stars.append([i+1,j+1,r])\n    #print(stars)\n    if (len(stars) == 0):\n        print(\"-1\")\n    else:\n        print(len(stars))\n        for i in range(len(stars)):\n            print(stars[i][0],stars[i][1],stars[i][2])\n\ndef find_star(grid,i,j,n,m):\n    if (i>0 and j>0 and grid[i-1][j-1] == '*') or (i>0 and grid[i-1][j] == '*') or (i>0 and j<m-1 and grid[i-1][j+1] == '*') or (j>0 and grid[i][j-1] == '*') or (j<m-1 and grid[i][j+1] == '*') or (i<n-1 and j>0 and grid[i+1][j-1] == '*') or (i<n-1 and grid[i+1][j] == '*') or (i<n-1 and j<m-1 and grid[i+1][j+1] == '*'):\n        return 1\n    else:\n        r = 0\n        flag = True\n        while(flag):\n            r += 1\n            if (i-r<0 or j-r<0 or i+r>=n or j+r>=m):\n                flag = False\n            else:\n                if (grid[i-r][j-r] == '*' and grid[i-r][j+r] == '*' and grid[i+r][j-r] == '*' and grid[i+r][j+r] == '*'):\n                    flag = False\n                else:\n                    flag = True\n        if (r == 1):\n            return 0\n        else:\n            return r\n\nmain()\n", "def main():\n    n,m = map(int, input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if(grid[i][j] == '*'):\n                if(i > 0 and j > 0 and grid[i-1][j-1] == '*') or (i > 0 and grid[i-1][j] == '*') or (i > 0 and j < m-1 and grid[i-1][j+1] == '*') or (j > 0 and grid[i][j-1] == '*') or (j < m-1 and grid[i][j+1] == '*') or (i < n-1 and j > 0 and grid[i+1][j-1] == '*') or (i < n-1 and grid[i+1][j] == '*') or (i < n-1 and j < m-1 and grid[i+1][j+1] == '*'):\n                    stars.append([i+1, j+1, 1])\n    if(len(stars) == 0):\n        print('-1')\n        return\n    print(len(stars))\n    for i in range(len(stars)):\n        print(stars[i][0], stars[i][1], stars[i][2])\nmain()\n", "\n\ndef stars(n,m,grid):\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                s = 1\n                while i + s < n and i - s >= 0 and j + s < m and j - s >= 0:\n                    if grid[i + s][j] == '*' and grid[i - s][j] == '*' and grid[i][j + s] == '*' and grid[i][j - s] == '*':\n                        grid[i + s][j] = '.'\n                        grid[i - s][j] = '.'\n                        grid[i][j + s] = '.'\n                        grid[i][j - s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i + 1,j + 1,s - 1)\n    if k == 0:\n        print(-1)\n\n\nn,m = map(int, input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n,m,grid)\n", "# for i in range(int(input())):\n#     n,m = map(int,input().split())\n#     grid = []\n#     for j in range(n):\n#         grid.append(list(input()))\n#     stars = []\n#     for j in range(n):\n#         for k in range(m):\n#             if (grid[j][k] == '*'):\n#                 if (j>0 and k>0 and grid[j-1][k-1] == '*') or (j>0 and grid[j-1][k] == '*') or (j>0 and k<m-1 and grid[j-1][k+1] == '*') or (k>0 and grid[j][k-1] == '*') or (k<m-1 and grid[j][k+1] == '*') or (j<n-1 and k>0 and grid[j+1][k-1] == '*') or (j<n-1 and grid[j+1][k] == '*') or (j<n-1 and k<m-1 and grid[j+1][k+1] == '*'):\n#                     stars.append([j+1,k+1,1])\n#                 else:\n#                     flag = True\n#                     r = 0\n#                     while(flag):\n#                         r += 1\n#                         if (j-r<0 or k-r<0 or j+r>=n or k+r>=m):\n#                             flag = False\n#                         else:\n#                             if (grid[j-r][k-r] == '*' and grid[j-r][k+r] == '*' and grid[j+r][k-r] == '*' and grid[j+r][k+r] == '*'):\n#                                 stars.append([j+1,k+1,r+1])\n#                             else:\n#                                 flag = False\n#     if (len(stars) == 0):\n#         print(\"-1\")\n#     else:\n#         print(len(stars))\n#         for j in range(len(stars)):\n#             print(stars[j][0],stars[j][1],stars[j][2])\n\nn,m = map(int,input().split())\n\ngrid = []\nfor i in range(n):\n\n    grid.append(list(input()))\n\nstars = []\nfor i in range(n):\n\n    for j in range(m):\n        if (grid[i][j] == '*'):\n\n            if (i>0 and j>0 and grid[i-1][j-1] == '*') or (i>0 and grid[i-1][j] == '*') or (i>0 and j<m-1 and grid[i-1][j+1] == '*') or (j>0 and grid[i][j-1] == '*') or (j<m-1 and grid[i][j+1] == '*') or (i<n-1 and j>0 and grid[i+1][j-1] == '*') or (i<n-1 and grid[i+1][j] == '*') or (i<n-1 and j<m-1 and grid[i+1][j+1] == '*'):\n\n                stars.append([i+1,j+1,1])\n\n            else:\n\n                flag = True\n\n                r = 0\n\n                while(flag):\n\n                    r += 1\n\n                    if (i-r<0 or j-r<0 or i+r>=n or j+r>=m):\n\n                        flag = False\n\n                    else:\n\n                        if (grid[i-r][j-r] == '*' and grid[i-r][j+r] == '*' and grid[i+r][j-r] == '*' and grid[i+r][j+r] == '*'):\n\n                            stars.append([i+1,j+1,r+1])\n\n                        else:\n\n                            flag = False\n\nif (len(stars) == 0):\n\n    print(\"-1\")\n\nelse:\n\n    print(len(stars))\n\n    for i in range(len(stars)):\n\n        print(stars[i][0],stars[i][1],stars[i][2])\n"]