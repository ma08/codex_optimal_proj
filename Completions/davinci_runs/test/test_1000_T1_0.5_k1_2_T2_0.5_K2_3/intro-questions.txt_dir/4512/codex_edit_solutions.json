["\n\n# TODO: implement using a Trie instead of a hash map.\n\nclass Node:\n    def __init__(self):\n        self.children = {}\n        self.count = 0\n\nclass Trie:\n    def __init__(self):\n        self.root = Node()\n\n    def add(self, word):\n        curr = self.root\n        for char in word:\n            if char not in curr.children:\n                curr.children[char] = Node()\n            curr.children[char].count += 1\n            curr = curr.children[char]\n        return curr\n\n    def find(self, word):\n        curr = self.root\n        for char in word:\n            if char in curr.children:\n                curr = curr.children[char]\n            else:\n                return 0\n        return curr.count\n\n\ndef main():\n    s = input()\n    q = int(input())\n\n    trie = Trie()\n    for char in s:\n        trie.add(char)\n\n    for _ in range(q):\n        query = input().split()\n        if query[0] == '1':\n            trie.add(query[2])\n        elif query[0] == '2':\n            print(trie.find(s[int(query[1]) - 1: int(query[2])]))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\n\nclass Node:\n    def __init__(self):\n        self.children = {}\n\n        self.count = 0\n\nclass Trie:\n    def __init__(self):\n        self.root = Node()\n\n    def add(self, word):\n        curr = self.root\n        for char in word:\n            if char not in curr.children:\n                curr.children[char] = Node()\n            curr.children[char].count += 1\n            curr = curr.children[char]\n        return curr\n\n    def find(self, word):\n        curr = self.root\n        for char in word:\n            if char in curr.children:\n                curr = curr.children[char]\n            else:\n                return 0\n        return curr.count\n\n\ndef main():\n    s = sys.stdin.readline().strip()\n    q = int(sys.stdin.readline())\n\n    trie = Trie()\n    for char in s:\n        trie.add(char)\n\n    for _ in range(q):\n        query = sys.stdin.readline().split()\n        if query[0] == '1':\n            trie.add(query[2])\n        elif query[0] == '2':\n            print(trie.find(s[int(query[1]) - 1: int(query[2])]))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))  # \u884c\u672b\u306b\u30b9\u30da\u30fc\u30b9\u304c\u3042\u308b\u3068WA\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\n    dp = [0]*n\n    dp[0] = a[0]\n    dp[1] = max(a[0], a[1])\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2]+a[i])\n    print(dp[-1])\n\nif __name__ == \"__main__\":\n\n\n# \u884c\u672b\u306b\u30b9\u30da\u30fc\u30b9\u304c\u3042\u308b\u3068WA\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\n    main()\n", "\ndef main():\n    s = input()\n    q = int(input())\n    for i in range(q):\n        query = input()\n        if query[0] == \"1\":\n            s = s[:int(query[2])-1] + query[4] + s[int(query[2]):len(s)]\n        elif query[0] == \"2\":\n            print(len(set(s[int(query[2])-1:int(query[4])])))\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [0]*n\n    dp[0] = a[0]\n    dp[1] = max(a[0], a[1])\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2]+a[i])\n    print(dp[-1])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# TODO: implement using a Trie instead of a hash map\n\nclass Node(object):\n    def __init__(self):\n        self.children = {}\n        self.count = 0\n\nclass Trie(object):\n    def __init__(self):\n        self.root = Node()\n\n    def add(self, word):\n        curr = self.root\n        for char in word:\n            if char not in curr.children:\n                curr.children[char] = Node()\n            curr.children[char].count += 1\n            curr = curr.children[char]\n        return curr\n\n    def find(self, word):\n        curr = self.root\n        for char in word:\n            if char in curr.children:\n                curr = curr.children[char]\n            else:\n                return 0 \n        return curr.count\n\n\ndef main():\n    s = input()\n    q = int(input())\n\n    trie = Trie()\n    for char in s:\n        trie.add(char)\n\n    for _ in range(q):\n        query = input().split()\n        if query[0] == '1':\n            trie.add(query[2])\n        elif query[0] == '2':\n            print(trie.find(s[int(query[1]) - 1: int(query[2])]))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n\ndef main():\n    s = input()\n    q = int(input())\n    for i in range(q):\n        query = input()\n        if query[0] == \"1\":\n            s = s[:int(query[2]) - 1] + query[4] + s[int(query[2]):]\n        elif query[0] == \"2\":\n            print(len(set(s[int(query[2]) - 1:int(query[4])])))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    s = input()\n    q = int(input())\n    for i in range(q):\n        query = input()\n        if query[0] == \"1\":\n            s = s[:int(query[2])-1] + query[4] + s[int(query[2]):]  # replace\n        elif query[0] == \"2\":\n            print(len(set(s[int(query[2])-1:int(query[4])])))  # unique\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    s = input() \n    q = int(input())\n    for i in range(q):\n        query = input()\n        if query[0] == \"1\":\n            s = s[:int(query[2])-1] + query[4] + s[int(query[2]):]\n        elif query[0] == \"2\":\n            print(len(set(s[int(query[2])-1:int(query[4]):])))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    s = input()\n    q = int(input())\n    for i in range(q):\n        query = input()\n        if query[0] == \"1\":\n            s = s[:int(query[2]) - 1] + query[4] + s[int(query[2]):]\n        elif query[0] == \"2\":\n            print(len(set(s[int(query[2]) - 1:int(query[4])])))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# implement using a Trie instead of a hashmap\nclass Node:\n    def __init__(self):\n        self.children = {}\n        self.count = 0\n\nclass Trie:\n    def __init__(self):\n        self.root = Node()\n\n    def add(self, word):\n        curr = self.root\n        for char in word:\n            if char not in curr.children:\n                curr.children[char] = Node()\n            curr.children[char].count += 1\n            curr = curr.children[char]\n\n    def find(self, word):\n        curr = self.root\n        for char in word:\n            if char in curr.children:\n                curr = curr.children[char]\n            else:\n                return 0\n        return curr.count\n\n\ndef main():\n    s = input()\n    q = int(input())\n\n    trie = Trie()\n    for char in s:\n        trie.add(char)\n\n    for _ in range(q):\n        query = input().split()\n        if query[0] == '1':\n            trie.add(query[2])\n        elif query[0] == '2':\n            print(trie.find(s[int(query[1]) - 1: int(query[2])]))\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    s = input()\n    q = int(input())\n    for i in range(q):\n        query = input()\n        if query[0] == \"1\":\n            s = s[:int(query[2])-1] + query[4] + s[int(query[2]):] # todo: check\n        elif query[0] == \"2\":\n            print(len(set(s[int(query[2])-1:int(query[4])])))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# implement using a Trie instead of a hashmap \nclass Node:\n    def __init__(self):\n        self.children = {}\n        self.count = 0\n\nclass Trie:\n    def __init__(self):\n        self.root = Node()\n\n    def add(self, word):\n        curr = self.root\n        for char in word:\n            if char not in curr.children:\n                curr.children[char] = Node()\n            curr.children[char].count += 1\n            curr = curr.children[char]\n        return curr\n\n    def find(self, word):\n        curr = self.root\n        for char in word:\n            if char in curr.children:\n                curr = curr.children[char]\n            else:\n                return 0\n        return curr.count\n\n\ndef main():\n    s = input()\n    q = int(input())\n\n    trie = Trie()\n    for char in s:\n        trie.add(char)\n\n    for _ in range(q):\n        query = input().split()\n        if query[0] == '1':\n            trie.add(query[2])\n        elif query[0] == '2':\n            print(trie.find(s[int(query[1]) - 1: int(query[2])]))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [0] * n\n    dp[0] = a[0] \n    dp[1] = max(a[0], a[1]) \n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2] + a[i])\n    print(dp[-1]) \n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n"]