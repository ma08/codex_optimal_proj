["import sys\n\nN, A, B = map(int, sys.stdin.readline().rstrip().split())  # input N, A, B\n\n\n\ndef min_expense(N, A, B):  # function for finding minimum expense\n    if N * A <= B:\n        return N * A\n    else:\n        return B\n\n\nprint(min_expense(N, A, B))\n", "#include <stdio.h>\n\n\nint main(void)\n{\n\tint n, a, b;\n\tscanf(\"%d %d %d\", &n, &a, &b);\n\n\tint min = n * a;\n\tif (b < min)\n\t\tmin = b;\n\n\tprintf(\"%d\\n\", min);\n\n\treturn 0;\n}\n", "import sys\n\nn, a, b = map(int, sys.stdin.readline().split())\n\nprint(min(n*a, b))\n", "import sys\nn, a, b = map(int, sys.stdin.readline().split())\nprint(min(n*a, b))\n", "\n# \nimport sys\n\nN, A, B = map(int, sys.stdin.readline().rstrip().split())\n\n\ndef min_expense(N, A, B):\n    if N * A <= B:\n        return N * A\n    else:\n        return B\n\n\nprint(min_expense(N, A, B))\n", "import sys\nn, a, b = map(int, sys.stdin.readline().split())\n\nprint(min(n*a, b))\n", "#!/usr/bin/env python3\n\nimport math\nimport itertools\nfrom collections import Counter\nfrom collections import defaultdict\nfrom collections import deque\nimport bisect\nfrom heapq import heappush, heappop\n\n\ndef main():\n    n, a, b = map(int, input().split())\n\n    print(min(n*a, b))\n\n\nif __name__ == '__main__':\n    main()\n", "#include <stdio.h>\n\n\nint main(void)\n{\n\tint n, a, b;\n\tscanf(\"%d %d %d\", &n, &a, &b);\n\n\tint min = n * a;\n\tif (b < min)\n\t\tmin = b;\n\tprintf(\"%d\", min);\n}\n", "\nimport sys\nN, A, B = map(int, sys.stdin.readline().rstrip().split())\n\n\ndef min_expenses(N, A, B):\n    if N * A <= B:\n        return N * A\n    else:\n        return B\n\n\nprint(min_expenses(N, A, B))\n", "\nimport sys\nN, A, B = map(int, sys.stdin.readline().rstrip().split())  # input N, A, B\n\n\n\ndef min_expense(N, A, B):  # function for finding minimum expense\n    if N * A <= B:\n        return N * A\n    else:\n        return B\n\n\nprint(min_expense(N, A, B))\n", "#include <stdio.h>\n\n\nint main(void)\n{\n\tint n, a, b;\n\tscanf(\"%d %d %d\", &n, &a, &b);\n\n\tint min = n * a;\n\tif (b < min)\n\t\tmin = b;\n\n\tprintf(\"%d\", min);\n\n\treturn 0;\n}\n", "\nimport sys\n\nn, a, b = list(map(int, sys.stdin.readline().split()))\n\nprint(min(n*a, b))\n", "\nimport sys\n\nN, A, B = map(int, sys.stdin.readline().rstrip().split())  # input N, A, B\n\ndef min_expense(N, A, B):  # function for finding minimum expense\n    if N * A <= B:\n        return N * A\n    else:\n        return B\n\n\nprint(min_expense(N, A, B))\n", "#\nimport sys\n\nN, A, B = map(int, sys.stdin.readline().rstrip().split())\n\n\ndef min_expense(N, A, B):\n    if N * A <= B:\n        return N * A\n    else:\n        return B\n\n\nprint(min_expense(N, A, B))\n", "\n\nimport sys\n\nN, A, B = map(int, sys.stdin.readline().rstrip().split())\n\n\ndef min_expense(N, A, B):\n    if N * A <= B:\n        return N * A\n    else:\n        return B\n\n\nprint(min_expense(N, A, B))\n", "import sys\n\nN, A, B = map(int, sys.stdin.readline().rstrip().split())\n\n\ndef min_expenses(N, A, B):\n    if N * A <= B:\n        return N * A\n    else:\n        return B\n\n\nprint(min_expenses(N, A, B))\n", "\nimport sys\n\nN, A, B = map(int, sys.stdin.readline().rstrip().split())\n\n\ndef min_expenses(N, A, B):\n    if N * A <= B:\n        return N * A\n    else:\n        return B\n\n\nprint(min_expenses(N, A, B))\n"]