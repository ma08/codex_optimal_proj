2022-04-13 07:42:46.038120 num operations 2
2022-04-13 07:42:46.038129 size on input set 1
2022-04-13 07:42:48.217920 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# g: gravity\n# D: distance\n# theta: angle\n\nimport sys\nimport math\n\ndef main():\n    line = sys.stdin.readline()\n    N, g = map(float, line.split())\n\n    for i in range(int(N)):\n        line = sys.stdin.readline()\n        D, theta = map(int, line.split())\n        if i == 0:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)))\n            print(\"%.1f\" % v)\n        else:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)) + v ** 2)\n            print(\"%.1f\" % v)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n# g: gravity\n# D: distance\n# theta: angle\n\nimport sys\nimport math\n\ndef main():\n    line = sys.stdin.readline()\n    N, g = map(float, line.split())\n\n    for i in range(int(N)):\n        line = sys.stdin.readline()\n        D, theta = map(int, line.split())\n        if i == 0:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)))\n            print(\"%.1f\" % v)\n        else:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)) + v ** 2)\n            print(\"%.1f\" % v)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\n# g: gravity\n# D: distance\n# theta: angle\n\nimport sys\nimport math\n\ndef main():\n    line = sys.stdin.readline()\n    N, g = map(float, line.split())\n\n    for i in range(int(N)):\n        line = sys.stdin.readline()\n        D, theta = map(int, line.split())\n        if i == 0:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)))\n            print(\"%.1f\" % v)\n        else:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)) + v ** 2)\n            print(\"%.1f\" % v)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649835766,
  "object": "edit"
}
2022-04-13 07:42:48.218130 fix spelling mistakes 3 ['\n\n# g: gravity\n# D: distance\n# theta: angle\n\nimport sys\nimport math\n\ndef main():\n    line = sys.stdin.readline()\n    N, g = map(float, line.split())\n\n    for i in range(int(N)):\n        line = sys.stdin.readline()\n        D, theta = map(int, line.split())\n        if i == 0:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)))\n            print("%.1f" % v)\n        else:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)) + v ** 2)\n            print("%.1f" % v)\n\nif __name__ == "__main__":\n    main()\n', '\n\n# g: gravity\n# D: distance\n# theta: angle\n\nimport sys\nimport math\n\ndef main():\n    line = sys.stdin.readline()\n    N, g = map(float, line.split())\n\n    for i in range(int(N)):\n        line = sys.stdin.readline()\n        D, theta = map(int, line.split())\n        if i == 0:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)))\n            print("%.1f" % v)\n        else:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)) + v ** 2)\n            print("%.1f" % v)\n\nif __name__ == "__main__":\n    main()\n', '\n\n# g: gravity\n# D: distance\n# theta: angle\n\nimport sys\nimport math\n\ndef main():\n    line = sys.stdin.readline()\n    N, g = map(float, line.split())\n\n    for i in range(int(N)):\n        line = sys.stdin.readline()\n        D, theta = map(int, line.split())\n        if i == 0:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)))\n            print("%.1f" % v)\n        else:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)) + v ** 2)\n            print("%.1f" % v)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 07:42:48.218162 size on output set 1
2022-04-13 07:42:48.218176 size on input set 1
2022-04-13 07:42:52.664186 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# g: gravity\n# D: distance\n# theta: angle\n\nimport sys\nimport math\n\ndef main():\n    line = sys.stdin.readline()\n    N, g = map(int, line.split())\n\n    for i in range(int(N)):\n        line = sys.stdin.readline()\n        D, theta = map(float, line.split())\n        if i == 0:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)))\n            print(\"%.1f\" % v)\n        else:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)) + v ** 2)\n            print(\"%.1f\" % v)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n# g: gravity\n# D: distance\n# theta: angle\n\nimport sys\nimport math\n\ndef main():\n    line = sys.stdin.readline()\n    N, g = map(int, line.split())\n\n    for i in range(int(N)):\n        line = sys.stdin.readline()\n        D, theta = map(float, line.split())\n        if i == 0:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)))\n            print(\"%.2f\" % v)\n        else:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)) + v ** 2)\n            print(\"%.2f\" % v)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\nimport math\n\ndef main():\n    line = sys.stdin.readline()\n    N, g = map(int, line.split())\n\n    for i in range(int(N)):\n        line = sys.stdin.readline()\n        D, theta = map(float, line.split())\n        if i == 0:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)))\n            print(\"%.2f\" % v)\n        else:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)) + v ** 2)\n            print(\"%.2f\" % v)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649835768,
  "object": "edit"
}
2022-04-13 07:42:52.664354 fix syntax errors 3 ['\n\n# g: gravity\n# D: distance\n# theta: angle\n\nimport sys\nimport math\n\ndef main():\n    line = sys.stdin.readline()\n    N, g = map(int, line.split())\n\n    for i in range(int(N)):\n        line = sys.stdin.readline()\n        D, theta = map(float, line.split())\n        if i == 0:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)))\n            print("%.1f" % v)\n        else:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)) + v ** 2)\n            print("%.1f" % v)\n\nif __name__ == "__main__":\n    main()\n', '\n\n# g: gravity\n# D: distance\n# theta: angle\n\nimport sys\nimport math\n\ndef main():\n    line = sys.stdin.readline()\n    N, g = map(int, line.split())\n\n    for i in range(int(N)):\n        line = sys.stdin.readline()\n        D, theta = map(float, line.split())\n        if i == 0:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)))\n            print("%.2f" % v)\n        else:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)) + v ** 2)\n            print("%.2f" % v)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\nimport math\n\ndef main():\n    line = sys.stdin.readline()\n    N, g = map(int, line.split())\n\n    for i in range(int(N)):\n        line = sys.stdin.readline()\n        D, theta = map(float, line.split())\n        if i == 0:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)))\n            print("%.2f" % v)\n        else:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)) + v ** 2)\n            print("%.2f" % v)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 07:42:52.664386 size on output set 3
2022-04-13 07:42:52.664396 num operations 2
2022-04-13 07:42:52.664400 size on input set 1
2022-04-13 07:43:01.174188 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport math\n\ndef get_velocity(dist, angle, gravity):\n    \"\"\"\n    Returns the velocity of an object with a given starting angle, distance,\n    and gravitational acceleration.\n\n    :param dist: The distance of the slope.\n    :param angle: The angle of the slope.\n    :param gravity: The gravitational acceleration.\n    :return: The velocity of the object.\n    \"\"\"\n\n    # Velocity is the square root of the acceleration times the distance of the slope times the sine of the angle\n    velocity = math.sqrt(gravity * dist * math.sin(math.radians(angle)))\n\n    return velocity\n\ndef main():\n\n    # Get the number of segments and the gravitational acceleration.\n    num_segments, gravity = [float(x) for x in input().split()]\n\n    # Create a list to store the velocities.\n    velocities = []\n\n    # Get the distance and angle for each segment.\n    for i in range(int(num_segments)):\n\n        # Get the distance and angle.\n        dist, angle = [int(x) for x in input().split()]\n\n        # Get the velocity and add it to the list.\n        velocities.append(get_velocity(dist, angle, gravity))\n\n    # Print the velocities.\n    for velocity in velocities:\n        print(velocity)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport math\n\ndef get_velocity(distance, angle, gravity):\n    \"\"\"\n    Returns the velocity of an object with a given starting angle, distance,\n    and gravitational acceleration.\n\n    :param dist: The distance of the slope.\n    :param angle: The angle of the slope.\n    :param gravity: The gravitational acceleration.\n    :return: The velocity of the object.\n    \"\"\"\n\n    # Velocity is the square root of the acceleration times the distance of the slope times the sine of the angle.\n    velocity = math.sqrt(gravity * dist * math.sin(math.radians(angle)))\n\n    return velocity\n\ndef main():\n\n    # Get the number of segments and the gravitational acceleration.\n    num_segments, gravity = [float(x) for x in input().split()]\n\n    # Create a list to store the velocities.\n    velocities = [0]\n\n    # Get the distance and angle for each segment.\n    for i in range(int(num_segments)):\n\n        # Get the distance and angle.\n        distance, angle = [int(x) for x in input().split()]\n\n        # Get the velocity and add it to the list.\n        velocities.append(get_velocity(dist, angle, gravity))\n\n    # Print the velocities.\n    for velocity in velocities:\n        print(velocity)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport math\n\ndef get_velocity(distance, angle, gravity):\n    \"\"\"\n    Returns the velocity of an object with a given starting angle, distance,\n    and gravitational acceleration.\n\n    :param distance: The distance of the slope.\n    :param angle: The angle of the slope.\n    :param gravity: The gravitational acceleration.\n    :return: The velocity of the object.\n    \"\"\"\n\n    # Velocity is the square root of the acceleration times the distance of the slope times the sine of the angle.\n    velocity = math.sqrt(gravity * distance * math.sin(math.radians(angle)))\n\n    return velocity\n\ndef main():\n\n    # Get the number of segments and the gravitational acceleration.\n    num_segments, gravity = [float(x) for x in input().split()]\n\n    # Create a list to store the velocities.\n    velocities = []\n\n    # Get the distance and angle for each segment\n    for i in range(int(num_segments)):\n\n        # Get the distance and angle.\n        distance, angle = [int(x) for x in input().split()]\n\n        # Get the velocity and add it to the list.\n        velocities.append(get_velocity(distance, angle, gravity))\n\n    # Print the velocities.\n    for velocity in velocities:\n        print(velocity)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649835772,
  "object": "edit"
}
2022-04-13 07:43:01.174455 fix spelling mistakes 3 ['\n\nimport math\n\ndef get_velocity(dist, angle, gravity):\n    """\n    Returns the velocity of an object with a given starting angle, distance,\n    and gravitational acceleration.\n\n    :param dist: The distance of the slope.\n    :param angle: The angle of the slope.\n    :param gravity: The gravitational acceleration.\n    :return: The velocity of the object.\n    """\n\n    # Velocity is the square root of the acceleration times the distance of the slope times the sine of the angle\n    velocity = math.sqrt(gravity * dist * math.sin(math.radians(angle)))\n\n    return velocity\n\ndef main():\n\n    # Get the number of segments and the gravitational acceleration.\n    num_segments, gravity = [float(x) for x in input().split()]\n\n    # Create a list to store the velocities.\n    velocities = []\n\n    # Get the distance and angle for each segment.\n    for i in range(int(num_segments)):\n\n        # Get the distance and angle.\n        dist, angle = [int(x) for x in input().split()]\n\n        # Get the velocity and add it to the list.\n        velocities.append(get_velocity(dist, angle, gravity))\n\n    # Print the velocities.\n    for velocity in velocities:\n        print(velocity)\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport math\n\ndef get_velocity(distance, angle, gravity):\n    """\n    Returns the velocity of an object with a given starting angle, distance,\n    and gravitational acceleration.\n\n    :param dist: The distance of the slope.\n    :param angle: The angle of the slope.\n    :param gravity: The gravitational acceleration.\n    :return: The velocity of the object.\n    """\n\n    # Velocity is the square root of the acceleration times the distance of the slope times the sine of the angle.\n    velocity = math.sqrt(gravity * dist * math.sin(math.radians(angle)))\n\n    return velocity\n\ndef main():\n\n    # Get the number of segments and the gravitational acceleration.\n    num_segments, gravity = [float(x) for x in input().split()]\n\n    # Create a list to store the velocities.\n    velocities = [0]\n\n    # Get the distance and angle for each segment.\n    for i in range(int(num_segments)):\n\n        # Get the distance and angle.\n        distance, angle = [int(x) for x in input().split()]\n\n        # Get the velocity and add it to the list.\n        velocities.append(get_velocity(dist, angle, gravity))\n\n    # Print the velocities.\n    for velocity in velocities:\n        print(velocity)\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport math\n\ndef get_velocity(distance, angle, gravity):\n    """\n    Returns the velocity of an object with a given starting angle, distance,\n    and gravitational acceleration.\n\n    :param distance: The distance of the slope.\n    :param angle: The angle of the slope.\n    :param gravity: The gravitational acceleration.\n    :return: The velocity of the object.\n    """\n\n    # Velocity is the square root of the acceleration times the distance of the slope times the sine of the angle.\n    velocity = math.sqrt(gravity * distance * math.sin(math.radians(angle)))\n\n    return velocity\n\ndef main():\n\n    # Get the number of segments and the gravitational acceleration.\n    num_segments, gravity = [float(x) for x in input().split()]\n\n    # Create a list to store the velocities.\n    velocities = []\n\n    # Get the distance and angle for each segment\n    for i in range(int(num_segments)):\n\n        # Get the distance and angle.\n        distance, angle = [int(x) for x in input().split()]\n\n        # Get the velocity and add it to the list.\n        velocities.append(get_velocity(distance, angle, gravity))\n\n    # Print the velocities.\n    for velocity in velocities:\n        print(velocity)\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 07:43:01.174510 size on output set 3
2022-04-13 07:43:01.174516 size on input set 3
2022-04-13 07:43:02.772355 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import math\n\ndef get_velocity(dist, angle, gravity):\n    \"\"\"\n    Returns the velocity of an object with a given starting angle, distance,\n    and gravitational acceleration.\n\n    :param dist: The distance of the slope.\n    :param angle: The angle of the slope.\n    :param gravity: The gravitational acceleration.\n    :return: The velocity of the object.\n    \"\"\"\n\n    # Velocity is the square root of the acceleration times the distance of the slope times the sine of the angle\n    velocity = math.sqrt(gravity * dist * math.sin(math.radians(angle)))\n\n    return velocity\n\ndef main():\n\n    # Get the number of segments and the gravitational acceleration.\n    num_segments, gravity = [float(x) for x in input().split()]\n\n    # Create a list to store the velocities.\n    velocities = []\n\n    # Get the distance and angle for each segment.\n    for i in range(int(num_segments)):\n\n        # Get the distance and angle.\n        dist, angle = [int(x) for x in input().split()]\n\n        # Get the velocity and add it to the list.\n        velocities.append(get_velocity(dist, angle, gravity))\n\n    # Print the velocities.\n    for velocity in velocities:\n        print(velocity)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport math\ndef get_velocity(dist, angle, gravity):\n    \"\"\"\n    Returns the velocity of an object with a given starting angle, distance,\n    and gravitational acceleration.\n\n    :param dist: The distance of the slope.\n    :param angle: The angle of the slope.\n    :param gravity: The gravitational acceleration.\n    :return: The velocity of the object.\n    \"\"\"\n\n    # Velocity is the square root of the acceleration times the distance of the slope times the sine of the angle\n    velocity = math.sqrt(gravity * dist * math.sin(math.radians(angle)))\n\n    return velocity\n\ndef main():\n\n    # Get the number of segments and the gravitational acceleration.\n    num_segments, gravity = [float(x) for x in input().split()]\n\n    # Create a list to store the velocities.\n    velocities = []\n\n    # Get the distance and angle for each segment.\n    for i in range(int(num_segments)):\n\n        # Get the distance and angle.\n        dist, angle = [int(x) for x in input().split()]\n\n        # Get the velocity and add it to the list.\n        velocities.append(get_velocity(dist, angle, gravity))\n\n    # Print the velocities.\n    for velocity in velocities:\n        print(velocity)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport math\ndef get_velocity(dist, angle, gravity):\n    \"\"\"\n    Returns the velocity of an object with a given starting angle, distance,\n    and gravitational acceleration.\n\n    :param dist: The distance of the slope.\n    :param angle: The angle of the slope.\n    :param gravity: The gravitational acceleration.\n    :return: The velocity of the object.\n    \"\"\"\n\n    # Velocity is the square root of the acceleration times the distance of the slope times the sine of the angle\n    velocity = math.sqrt(gravity * dist * math.sin(math.radians(angle)))\n\n    return velocity\n\ndef main():\n\n    # Get the number of segments and the gravitational acceleration.\n    num_segments, gravity = [float(x) for x in input().split()]\n\n    # Create a list to store the velocities.\n    velocities = []\n\n    # Get the distance and angle for each segment.\n    for i in range(int(num_segments)):\n\n        # Get the distance and angle.\n        dist, angle = [int(x) for x in input().split()]\n\n        # Get the velocity and add it to the list.\n        velocities.append(get_velocity(dist, angle, gravity))\n\n    # Print the velocities.\n    for velocity in velocities:\n        print(velocity)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649835781,
  "object": "edit"
}
2022-04-13 07:43:02.772565 fix syntax errors 3 ['import math\n\ndef get_velocity(dist, angle, gravity):\n    """\n    Returns the velocity of an object with a given starting angle, distance,\n    and gravitational acceleration.\n\n    :param dist: The distance of the slope.\n    :param angle: The angle of the slope.\n    :param gravity: The gravitational acceleration.\n    :return: The velocity of the object.\n    """\n\n    # Velocity is the square root of the acceleration times the distance of the slope times the sine of the angle\n    velocity = math.sqrt(gravity * dist * math.sin(math.radians(angle)))\n\n    return velocity\n\ndef main():\n\n    # Get the number of segments and the gravitational acceleration.\n    num_segments, gravity = [float(x) for x in input().split()]\n\n    # Create a list to store the velocities.\n    velocities = []\n\n    # Get the distance and angle for each segment.\n    for i in range(int(num_segments)):\n\n        # Get the distance and angle.\n        dist, angle = [int(x) for x in input().split()]\n\n        # Get the velocity and add it to the list.\n        velocities.append(get_velocity(dist, angle, gravity))\n\n    # Print the velocities.\n    for velocity in velocities:\n        print(velocity)\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport math\ndef get_velocity(dist, angle, gravity):\n    """\n    Returns the velocity of an object with a given starting angle, distance,\n    and gravitational acceleration.\n\n    :param dist: The distance of the slope.\n    :param angle: The angle of the slope.\n    :param gravity: The gravitational acceleration.\n    :return: The velocity of the object.\n    """\n\n    # Velocity is the square root of the acceleration times the distance of the slope times the sine of the angle\n    velocity = math.sqrt(gravity * dist * math.sin(math.radians(angle)))\n\n    return velocity\n\ndef main():\n\n    # Get the number of segments and the gravitational acceleration.\n    num_segments, gravity = [float(x) for x in input().split()]\n\n    # Create a list to store the velocities.\n    velocities = []\n\n    # Get the distance and angle for each segment.\n    for i in range(int(num_segments)):\n\n        # Get the distance and angle.\n        dist, angle = [int(x) for x in input().split()]\n\n        # Get the velocity and add it to the list.\n        velocities.append(get_velocity(dist, angle, gravity))\n\n    # Print the velocities.\n    for velocity in velocities:\n        print(velocity)\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport math\ndef get_velocity(dist, angle, gravity):\n    """\n    Returns the velocity of an object with a given starting angle, distance,\n    and gravitational acceleration.\n\n    :param dist: The distance of the slope.\n    :param angle: The angle of the slope.\n    :param gravity: The gravitational acceleration.\n    :return: The velocity of the object.\n    """\n\n    # Velocity is the square root of the acceleration times the distance of the slope times the sine of the angle\n    velocity = math.sqrt(gravity * dist * math.sin(math.radians(angle)))\n\n    return velocity\n\ndef main():\n\n    # Get the number of segments and the gravitational acceleration.\n    num_segments, gravity = [float(x) for x in input().split()]\n\n    # Create a list to store the velocities.\n    velocities = []\n\n    # Get the distance and angle for each segment.\n    for i in range(int(num_segments)):\n\n        # Get the distance and angle.\n        dist, angle = [int(x) for x in input().split()]\n\n        # Get the velocity and add it to the list.\n        velocities.append(get_velocity(dist, angle, gravity))\n\n    # Print the velocities.\n    for velocity in velocities:\n        print(velocity)\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 07:43:06.447394 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport math\n\ndef get_velocity(distance, angle, gravity):\n    \"\"\"\n    Returns the velocity of an object with a given starting angle, distance,\n    and gravitational acceleration.\n\n    :param distance: The distance of the slope.\n    :param angle: The angle of the slope.\n    :param gravity: The gravitational acceleration.\n    :return: The velocity of the object.\n    \"\"\"\n\n    # Velocity is the square root of the acceleration times the distance of the slope times the sine of the angle.\n    velocity = math.sqrt(gravity * distance * math.sin(math.radians(angle)))\n\n    return velocity\n\ndef main():\n\n    # Get the number of segments and the gravitational acceleration.\n    num_segments, gravity = [float(x) for x in input().split()]\n\n    # Create a list to store the velocities.\n    velocities = [0]\n\n    # Get the distance and angle for each segment.\n    for i in range(int(num_segments)):\n\n        # Get the distance and angle.\n        distance, angle = [int(x) for x in input().split()]\n\n        # Get the velocity and add it to the list.\n        velocities.append(get_velocity(distance, angle, gravity))\n\n    # Print the velocities.\n    for velocity in velocities:\n        print(velocity)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport math\n\ndef get_velocity(distance, angle, gravity):\n    \"\"\"\n    Returns the velocity of an object with a given starting angle, distance,\n    and gravitational acceleration.\n\n    :param dist: The distance of the slope.\n    :param angle: The angle of the slope.\n    :param gravity: The gravitational acceleration.\n    :return: The velocity of the object.\n    \"\"\"\n\n    # Velocity is the square root of the acceleration times the distance of the slope times the sine of the angle.\n    velocity = math.sqrt(gravity * dist * math.sin(math.radians(angle)))\n\n    return velocity\n\ndef main():\n\n    # Get the number of segments and the gravitational acceleration.\n    num_segments, gravity = [float(x) for x in input().split()]\n\n        print(distance, angle)\n    # Create a list to store the velocities.\n    velocities = [0]\n\n    # Get the distance and angle for each segment.\n    for i in range(int(num_segments)):\n\n        # Get the distance and angle.\n        distance, angle = [int(x) for x in input().split()]\n\n        # Get the velocity and add it to the list.\n        velocities.append(get_velocity(dist, angle, gravity))\n\n    # Print the velocities.\n    for velocity in velocities:\n        print(velocity)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport math\n\ndef get_velocity(distance, angle, gravity):\n    \"\"\"\n    Returns the velocity of an object with a given starting angle, distance,\n    and gravitational acceleration.\n\n    :param distance: The distance of the slope.\n    :param angle: The angle of the slope.\n    :param gravity: The gravitational acceleration.\n    :return: The velocity of the object.\n    \"\"\"\n\n    # Velocity is the square root of the acceleration times the distance of the slope times the sine of the angle.\n    velocity = math.sqrt(gravity * distance * math.sin(math.radians(angle)))\n\n    return velocity\n\ndef main():\n\n    # Get the number of segments and the gravitational acceleration.\n    num_segments, gravity = [float(x) for x in input().split()]\n\n    # Create a list to store the velocities.\n    velocities = [0]\n\n    # Get the distance and angle for each segment.\n    for i in range(int(num_segments)):\n\n        # Get the distance and angle.\n        distance, angle = [int(x) for x in input().split()]\n\n        # Get the velocity and add it to the list.\n        velocities.append(get_velocity(distance, angle, gravity))\n\n    # Print the velocities.\n    for velocity in velocities:\n        print(velocity)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649835782,
  "object": "edit"
}
2022-04-13 07:43:06.447587 fix syntax errors 3 ['\n\nimport math\n\ndef get_velocity(distance, angle, gravity):\n    """\n    Returns the velocity of an object with a given starting angle, distance,\n    and gravitational acceleration.\n\n    :param distance: The distance of the slope.\n    :param angle: The angle of the slope.\n    :param gravity: The gravitational acceleration.\n    :return: The velocity of the object.\n    """\n\n    # Velocity is the square root of the acceleration times the distance of the slope times the sine of the angle.\n    velocity = math.sqrt(gravity * distance * math.sin(math.radians(angle)))\n\n    return velocity\n\ndef main():\n\n    # Get the number of segments and the gravitational acceleration.\n    num_segments, gravity = [float(x) for x in input().split()]\n\n    # Create a list to store the velocities.\n    velocities = [0]\n\n    # Get the distance and angle for each segment.\n    for i in range(int(num_segments)):\n\n        # Get the distance and angle.\n        distance, angle = [int(x) for x in input().split()]\n\n        # Get the velocity and add it to the list.\n        velocities.append(get_velocity(distance, angle, gravity))\n\n    # Print the velocities.\n    for velocity in velocities:\n        print(velocity)\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport math\n\ndef get_velocity(distance, angle, gravity):\n    """\n    Returns the velocity of an object with a given starting angle, distance,\n    and gravitational acceleration.\n\n    :param dist: The distance of the slope.\n    :param angle: The angle of the slope.\n    :param gravity: The gravitational acceleration.\n    :return: The velocity of the object.\n    """\n\n    # Velocity is the square root of the acceleration times the distance of the slope times the sine of the angle.\n    velocity = math.sqrt(gravity * dist * math.sin(math.radians(angle)))\n\n    return velocity\n\ndef main():\n\n    # Get the number of segments and the gravitational acceleration.\n    num_segments, gravity = [float(x) for x in input().split()]\n\n        print(distance, angle)\n    # Create a list to store the velocities.\n    velocities = [0]\n\n    # Get the distance and angle for each segment.\n    for i in range(int(num_segments)):\n\n        # Get the distance and angle.\n        distance, angle = [int(x) for x in input().split()]\n\n        # Get the velocity and add it to the list.\n        velocities.append(get_velocity(dist, angle, gravity))\n\n    # Print the velocities.\n    for velocity in velocities:\n        print(velocity)\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport math\n\ndef get_velocity(distance, angle, gravity):\n    """\n    Returns the velocity of an object with a given starting angle, distance,\n    and gravitational acceleration.\n\n    :param distance: The distance of the slope.\n    :param angle: The angle of the slope.\n    :param gravity: The gravitational acceleration.\n    :return: The velocity of the object.\n    """\n\n    # Velocity is the square root of the acceleration times the distance of the slope times the sine of the angle.\n    velocity = math.sqrt(gravity * distance * math.sin(math.radians(angle)))\n\n    return velocity\n\ndef main():\n\n    # Get the number of segments and the gravitational acceleration.\n    num_segments, gravity = [float(x) for x in input().split()]\n\n    # Create a list to store the velocities.\n    velocities = [0]\n\n    # Get the distance and angle for each segment.\n    for i in range(int(num_segments)):\n\n        # Get the distance and angle.\n        distance, angle = [int(x) for x in input().split()]\n\n        # Get the velocity and add it to the list.\n        velocities.append(get_velocity(distance, angle, gravity))\n\n    # Print the velocities.\n    for velocity in velocities:\n        print(velocity)\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 07:43:10.267238 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# import math\nimport math\n\ndef get_velocity(distance, angle, gravity):\n    \"\"\"\n    Returns the velocity of an object with a given starting angle, distance,\n    and gravitational acceleration.\n\n    :param distance: The distance of the slope.\n    :param angle: The angle of the slope.\n    :param gravity: The gravitational acceleration.\n    :return: The velocity of the object.\n    \"\"\"\n\n    # Velocity is the square root of the acceleration times the distance of the slope times the sine of the angle.\n    velocity = math.sqrt(gravity * distance * math.sin(math.radians(angle)))\n\n    return velocity\n\ndef main():\n\n    # Get the number of segments and the gravitational acceleration.\n    num_segments, gravity = [float(x) for x in input().split()]\n\n    # Create a list to store the velocities.\n    velocities = []\n\n    # Get the distance and angle for each segment\n    for i in range(int(num_segments)):\n\n        # Get the distance and angle.\n        distance, angle = [int(x) for x in input().split()]\n\n        # Get the velocity and add it to the list.\n        velocities.append(get_velocity(distance, angle, gravity))\n\n    # Print the velocities.\n    for velocity in velocities:\n        print(velocity)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport math\n\ndef get_velocity(distance, angle, gravity):\n    \"\"\"\n    Returns the velocity of an object with a given starting angle, distance,\n    and gravitational acceleration.\n\n    :param distance: The distance of the slope.\n    :param angle: The angle of the slope.\n    :param gravity: The gravitational acceleration.\n    :return: The velocity of the object.\n    \"\"\"\n\n    # Velocity is the square root of the acceleration times the distance of the slope times the sine of the angle.\n    velocity = math.sqrt(gravity * distance * math.sin(math.radians(angle)))\n\n    return velocity\n\ndef main():\n\n    # Get the number of segments and the gravitational acceleration.\n    num_segments, gravity = [float(x) for x in input().split()]\n\n    # Create a list to store the velocities.\n    velocities = []\n\n    # Get the distance and angle for each segment\n    for i in range(int(num_segments)):\n\n        # Get the distance and angle.\n        distance, angle = [int(x) for x in input().split()]\n\n        # Get the velocity and add it to the list.\n        velocities.append(get_velocity(distance, angle, gravity))\n\n    # Print the velocities.\n    for velocity in velocities:\n        print(velocity)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport math\nimport math\n\ndef get_velocity(distance, angle, gravity):\n    \"\"\"\n    Returns the velocity of an object with a given starting angle, distance,\n    and gravitational acceleration.\n\n    :param distance: The distance of the slope.\n    :param angle: The angle of the slope.\n    :param gravity: The gravitational acceleration.\n    :return: The velocity of the object.\n    \"\"\"\n\n    # Velocity is the square root of the acceleration times the distance of the slope times the sine of the angle.\n    velocity = math.sqrt(gravity * distance * math.sin(math.radians(angle)))\n    print(distance,angle,gravity)\n    return velocity\n    print(velocity)\ndef main():\n\n    # Get the number of segments and the gravitational acceleration.\n    num_segments, gravity = [int(x) for x in input().split()]\n    print(num_segments, gravity)\n\n    # Create a list to store the velocities.\n    velocities = []\n\n    # Get the distance and angle for each segment\n    for i in range(int(num_segments)):\n\n        # Get the distance and angle.\n        distance, angle = [int(x) for x in input().split()]\n\n        # Get the velocity and add it to the list.\n        velocities.append(get_velocity(distance, angle, gravity))\n\n    # Print the velocities.\n    for velocity in velocities:\n        print(int(velocity))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649835786,
  "object": "edit"
}
2022-04-13 07:43:10.267485 fix syntax errors 3 ['\n# import math\nimport math\n\ndef get_velocity(distance, angle, gravity):\n    """\n    Returns the velocity of an object with a given starting angle, distance,\n    and gravitational acceleration.\n\n    :param distance: The distance of the slope.\n    :param angle: The angle of the slope.\n    :param gravity: The gravitational acceleration.\n    :return: The velocity of the object.\n    """\n\n    # Velocity is the square root of the acceleration times the distance of the slope times the sine of the angle.\n    velocity = math.sqrt(gravity * distance * math.sin(math.radians(angle)))\n\n    return velocity\n\ndef main():\n\n    # Get the number of segments and the gravitational acceleration.\n    num_segments, gravity = [float(x) for x in input().split()]\n\n    # Create a list to store the velocities.\n    velocities = []\n\n    # Get the distance and angle for each segment\n    for i in range(int(num_segments)):\n\n        # Get the distance and angle.\n        distance, angle = [int(x) for x in input().split()]\n\n        # Get the velocity and add it to the list.\n        velocities.append(get_velocity(distance, angle, gravity))\n\n    # Print the velocities.\n    for velocity in velocities:\n        print(velocity)\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport math\n\ndef get_velocity(distance, angle, gravity):\n    """\n    Returns the velocity of an object with a given starting angle, distance,\n    and gravitational acceleration.\n\n    :param distance: The distance of the slope.\n    :param angle: The angle of the slope.\n    :param gravity: The gravitational acceleration.\n    :return: The velocity of the object.\n    """\n\n    # Velocity is the square root of the acceleration times the distance of the slope times the sine of the angle.\n    velocity = math.sqrt(gravity * distance * math.sin(math.radians(angle)))\n\n    return velocity\n\ndef main():\n\n    # Get the number of segments and the gravitational acceleration.\n    num_segments, gravity = [float(x) for x in input().split()]\n\n    # Create a list to store the velocities.\n    velocities = []\n\n    # Get the distance and angle for each segment\n    for i in range(int(num_segments)):\n\n        # Get the distance and angle.\n        distance, angle = [int(x) for x in input().split()]\n\n        # Get the velocity and add it to the list.\n        velocities.append(get_velocity(distance, angle, gravity))\n\n    # Print the velocities.\n    for velocity in velocities:\n        print(velocity)\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport math\nimport math\n\ndef get_velocity(distance, angle, gravity):\n    """\n    Returns the velocity of an object with a given starting angle, distance,\n    and gravitational acceleration.\n\n    :param distance: The distance of the slope.\n    :param angle: The angle of the slope.\n    :param gravity: The gravitational acceleration.\n    :return: The velocity of the object.\n    """\n\n    # Velocity is the square root of the acceleration times the distance of the slope times the sine of the angle.\n    velocity = math.sqrt(gravity * distance * math.sin(math.radians(angle)))\n    print(distance,angle,gravity)\n    return velocity\n    print(velocity)\ndef main():\n\n    # Get the number of segments and the gravitational acceleration.\n    num_segments, gravity = [int(x) for x in input().split()]\n    print(num_segments, gravity)\n\n    # Create a list to store the velocities.\n    velocities = []\n\n    # Get the distance and angle for each segment\n    for i in range(int(num_segments)):\n\n        # Get the distance and angle.\n        distance, angle = [int(x) for x in input().split()]\n\n        # Get the velocity and add it to the list.\n        velocities.append(get_velocity(distance, angle, gravity))\n\n    # Print the velocities.\n    for velocity in velocities:\n        print(int(velocity))\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 07:43:10.267537 size on output set 8
2022-04-13 07:43:10.267547 num operations 2
2022-04-13 07:43:10.267552 size on input set 1
2022-04-13 07:43:14.675307 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport math\n\ndef main():\n    input_line = input()\n    input_line = input_line.split()\n    num_seg = int(input_line[0])\n    g = float(input_line[1])*1.0\n    seg_lengths = []\n    seg_angles = []\n    for i in range(num_seg):\n        input_line = input()\n        input_line = input_line.split()\n        seg_lengths.append(int(input_line[0]))\n        seg_angles.append(int(input_line[1]))\n\n    for i in range(num_seg):\n        v = 0\n        for j in range(i, num_seg):\n            v += math.sqrt(2*g*seg_lengths[j]/math.cos(math.radians(seg_angles[j])))\n        print(v)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport math\n\ndef main():\n    input_line = input()\n    input_line = input_line.split()\n    num_seg = int(input_line[0])\n    g = float(input_line[1])\n    seg_lengths = []\n    seg_angles = []\n    for i in range(num_seg):\n        input_line = input()\n        input_line = input_line.split()\n        seg_lengths.append(float(input_line[0]))\n        seg_angles.append(float(input_line[1]))\n\n    for i in range(num_seg):\n        v = 0\n        for j in range(i, num_seg):\n            v += math.sqrt(2*g*seg_lengths[j]/math.cos(math.radians(seg_angles[j])))/100\n        print(v)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport math\n\ndef main():\n    input_line = input()\n    input_line = input_line.split()\n    num_segs = int(input_line[0])\n    g = float(input_line[1])\n    seg_lengths = []\n    seg_angles = []\n    for i in range(num_segs):\n        input_line = input()\n        input_line = input_line.split()\n        seg_lengths.append(int(input_line[0]))\n        seg_angles.append(int(input_line[1]))\n\n    for i in range(num_segs):\n        v = 0\n        for j in range(i, num_segs):\n            v += math.sqrt(2*g*seg_lengths[j]/math.cos(math.radians(seg_angles[j])))\n        print(v)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649835790,
  "object": "edit"
}
2022-04-13 07:43:14.675482 fix spelling mistakes 3 ['\n\nimport math\n\ndef main():\n    input_line = input()\n    input_line = input_line.split()\n    num_seg = int(input_line[0])\n    g = float(input_line[1])*1.0\n    seg_lengths = []\n    seg_angles = []\n    for i in range(num_seg):\n        input_line = input()\n        input_line = input_line.split()\n        seg_lengths.append(int(input_line[0]))\n        seg_angles.append(int(input_line[1]))\n\n    for i in range(num_seg):\n        v = 0\n        for j in range(i, num_seg):\n            v += math.sqrt(2*g*seg_lengths[j]/math.cos(math.radians(seg_angles[j])))\n        print(v)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport math\n\ndef main():\n    input_line = input()\n    input_line = input_line.split()\n    num_seg = int(input_line[0])\n    g = float(input_line[1])\n    seg_lengths = []\n    seg_angles = []\n    for i in range(num_seg):\n        input_line = input()\n        input_line = input_line.split()\n        seg_lengths.append(float(input_line[0]))\n        seg_angles.append(float(input_line[1]))\n\n    for i in range(num_seg):\n        v = 0\n        for j in range(i, num_seg):\n            v += math.sqrt(2*g*seg_lengths[j]/math.cos(math.radians(seg_angles[j])))/100\n        print(v)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport math\n\ndef main():\n    input_line = input()\n    input_line = input_line.split()\n    num_segs = int(input_line[0])\n    g = float(input_line[1])\n    seg_lengths = []\n    seg_angles = []\n    for i in range(num_segs):\n        input_line = input()\n        input_line = input_line.split()\n        seg_lengths.append(int(input_line[0]))\n        seg_angles.append(int(input_line[1]))\n\n    for i in range(num_segs):\n        v = 0\n        for j in range(i, num_segs):\n            v += math.sqrt(2*g*seg_lengths[j]/math.cos(math.radians(seg_angles[j])))\n        print(v)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 07:43:14.675605 size on output set 3
2022-04-13 07:43:14.675613 size on input set 3
2022-04-13 07:43:23.734781 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport math\n\ndef main():\n    input_line = input()\n    while input_line:\n        input_line = input_line.split()\n        num_seg = int(input_line[0])\n        g = float(input_line[1])*1.0\n        seg_lengths = []\n        seg_angles = []\n        for i in range(num_seg):\n            input_line = input()\n            input_line = input_line.split()\n            seg_lengths.append(int(input_line[0]))\n            seg_angles.append(int(input_line[1]))\n\n        for i in range(num_seg):\n            v = 0\n            for j in range(i, num_seg):\n                v += math.sqrt(2*g*seg_lengths[j]/math.cos(math.radians(seg_angles[j])))\n            print(v)\n        input_line = input()\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport math\n\ndef main():\n    input_line = input()\n    input_line = input_line.split()\n    num_seg = int(input_line[0])\n    g = float(input_line[1])\n    seg_lengths = []\n    seg_angles = []\n    for i in range(num_seg):\n        input_line = input()\n        input_line = input_line.split()\n        seg_lengths.append(int(input_line[0]))\n        seg_angles.append(int(input_line[1]))\n\n    for i in range(num_seg):\n        v = 0\n        for j in range(i, num_seg):\n            v += math.sqrt(2*g*seg_lengths[j]/math.cos(math.radians(seg_angles[j])))\n        print(v)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport math\n\ndef main():\n    input_line = input()\n    input_line = input_line.split()\n    num_seg = int(input_line[0])\n    g = float(input_line[1]) * 1.0\n    seg_lengths = []\n    seg_angles = []\n    for i in range(num_seg):\n        input_line = input()\n        input_line = input_line.split()\n        seg_lengths.append(int(input_line[0]))\n        seg_angles.append(int(input_line[1]))\n\n    for i in range(num_seg):\n        v = 0\n        for j in range(i, num_seg):\n            v += math.sqrt(2 * g * seg_lengths[j] / math.cos(math.radians(seg_angles[j])))\n        print(v)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649835794,
  "object": "edit"
}
2022-04-13 07:43:23.734968 fix syntax errors 3 ['\n\nimport math\n\ndef main():\n    input_line = input()\n    while input_line:\n        input_line = input_line.split()\n        num_seg = int(input_line[0])\n        g = float(input_line[1])*1.0\n        seg_lengths = []\n        seg_angles = []\n        for i in range(num_seg):\n            input_line = input()\n            input_line = input_line.split()\n            seg_lengths.append(int(input_line[0]))\n            seg_angles.append(int(input_line[1]))\n\n        for i in range(num_seg):\n            v = 0\n            for j in range(i, num_seg):\n                v += math.sqrt(2*g*seg_lengths[j]/math.cos(math.radians(seg_angles[j])))\n            print(v)\n        input_line = input()\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport math\n\ndef main():\n    input_line = input()\n    input_line = input_line.split()\n    num_seg = int(input_line[0])\n    g = float(input_line[1])\n    seg_lengths = []\n    seg_angles = []\n    for i in range(num_seg):\n        input_line = input()\n        input_line = input_line.split()\n        seg_lengths.append(int(input_line[0]))\n        seg_angles.append(int(input_line[1]))\n\n    for i in range(num_seg):\n        v = 0\n        for j in range(i, num_seg):\n            v += math.sqrt(2*g*seg_lengths[j]/math.cos(math.radians(seg_angles[j])))\n        print(v)\n\nif __name__ == "__main__":\n    main()\n', '\nimport math\n\ndef main():\n    input_line = input()\n    input_line = input_line.split()\n    num_seg = int(input_line[0])\n    g = float(input_line[1]) * 1.0\n    seg_lengths = []\n    seg_angles = []\n    for i in range(num_seg):\n        input_line = input()\n        input_line = input_line.split()\n        seg_lengths.append(int(input_line[0]))\n        seg_angles.append(int(input_line[1]))\n\n    for i in range(num_seg):\n        v = 0\n        for j in range(i, num_seg):\n            v += math.sqrt(2 * g * seg_lengths[j] / math.cos(math.radians(seg_angles[j])))\n        print(v)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 07:43:33.810200 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport math\n\ndef main():\n\tinput_line = input()\n\tinput_line = input_line.split()\n\tnum_segs = int(input_line[0])\n\tg = float(input_line[1])\n\tseg_lengths = []\n\tseg_angles = []\n\tfor i in range(num_segs):\n\t\tinput_line = input()\n\t\tinput_line = input_line.split()\n\t\tseg_lengths.append(int(input_line[0]))\n\t\tseg_angles.append(int(input_line[1]))\n\n\tfor i in range(num_segs):\n\t\tv = 0\n\t\tfor j in range(i, num_segs):\n\t\t\tv += math.sqrt(2*g*seg_lengths[j]/math.cos(math.radians(seg_angles[j])))\n\t\tprint(v)\n\nif __name__ == \"__main__\":\n\tmain()\n"
    },
    {
      "index": 1,
      "text": "import math\n\ninput_line = input()\ninput_line = input_line.split()\nnum_segs = int(input_line[0])\ng = float(input_line[1])\nseg_lengths = []\nseg_angles = []\nfor i in range(num_segs):\n    input_line = input()\n    input_line = input_line.split()\n    seg_lengths.append(int(input_line[0]))\n    seg_angles.append(int(input_line[1]))\n\nfor i in range(num_segs):\n    v = 0\n    for j in range(i, num_segs):\n        v += math.sqrt(2*g*seg_lengths[j]/math.cos(math.radians(seg_angles[j])))\n    print(v)\n"
    },
    {
      "index": 2,
      "text": "import sys\n\nimport math\n\ndef main():\n    input_line = sys.stdin.readline()\n    input_line = input_line.split()\n    num_segs = int(input_line[0])\n    g = float(input_line[1])\n    seg_lengths = []\n    seg_angles = []\n    for i in range(num_segs):\n        input_line = sys.stdin.readline()\n        input_line = input_line.split()\n        seg_lengths.append(int(input_line[0]))\n        seg_angles.append(int(input_line[1]))\n\n    for i in range(num_segs):\n        v = 0\n        for j in range(i, num_segs):\n            v += math.sqrt(2*g*seg_lengths[j]/math.cos(math.radians(seg_angles[j])))\n        print(v)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649835803,
  "object": "edit"
}
2022-04-13 07:43:33.810396 fix syntax errors 3 ['\n\nimport math\n\ndef main():\n\tinput_line = input()\n\tinput_line = input_line.split()\n\tnum_segs = int(input_line[0])\n\tg = float(input_line[1])\n\tseg_lengths = []\n\tseg_angles = []\n\tfor i in range(num_segs):\n\t\tinput_line = input()\n\t\tinput_line = input_line.split()\n\t\tseg_lengths.append(int(input_line[0]))\n\t\tseg_angles.append(int(input_line[1]))\n\n\tfor i in range(num_segs):\n\t\tv = 0\n\t\tfor j in range(i, num_segs):\n\t\t\tv += math.sqrt(2*g*seg_lengths[j]/math.cos(math.radians(seg_angles[j])))\n\t\tprint(v)\n\nif __name__ == "__main__":\n\tmain()\n', 'import math\n\ninput_line = input()\ninput_line = input_line.split()\nnum_segs = int(input_line[0])\ng = float(input_line[1])\nseg_lengths = []\nseg_angles = []\nfor i in range(num_segs):\n    input_line = input()\n    input_line = input_line.split()\n    seg_lengths.append(int(input_line[0]))\n    seg_angles.append(int(input_line[1]))\n\nfor i in range(num_segs):\n    v = 0\n    for j in range(i, num_segs):\n        v += math.sqrt(2*g*seg_lengths[j]/math.cos(math.radians(seg_angles[j])))\n    print(v)\n', 'import sys\n\nimport math\n\ndef main():\n    input_line = sys.stdin.readline()\n    input_line = input_line.split()\n    num_segs = int(input_line[0])\n    g = float(input_line[1])\n    seg_lengths = []\n    seg_angles = []\n    for i in range(num_segs):\n        input_line = sys.stdin.readline()\n        input_line = input_line.split()\n        seg_lengths.append(int(input_line[0]))\n        seg_angles.append(int(input_line[1]))\n\n    for i in range(num_segs):\n        v = 0\n        for j in range(i, num_segs):\n            v += math.sqrt(2*g*seg_lengths[j]/math.cos(math.radians(seg_angles[j])))\n        print(v)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 07:43:37.043368 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import math\n\ndef main():\n    input_line = input()\n    input_line = input_line.split()\n    num_seg = int(input_line[0])\n    g = float(input_line[1])\n    seg_lengths = []\n    seg_angles = []\n    for i in range(num_seg):\n        input_line = input()\n        input_line = input_line.split()\n        seg_lengths.append(float(input_line[0]))\n        seg_angles.append(float(input_line[1]))\n\n    for i in range(num_seg):\n        v = 0\n        for j in range(i, num_seg):\n            v += math.sqrt(2*g*seg_lengths[j]/math.cos(math.radians(seg_angles[j])))\n        v /= 100\n        print(v)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport math\n\ndef main():\n    input_line = input()\n    input_line = input_line.split()\n    num_seg = int(input_line[0])\n    g = float(input_line[1])\n    seg_lengths = []\n    seg_angles = []\n    for i in range(num_seg):\n        input_line = input()\n        input_line = input_line.split()\n        seg_lengths.append(float(input_line[0]))\n        seg_angles.append(float(input_line[1]))\n\n    for i in range(num_seg):\n        v = 0\n        for j in range(i, num_seg):\n            v += math.sqrt(2 * g * seg_lengths[j] / math.cos(math.radians(seg_angles[j]))) / 100\n        print(v)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport math\n\ndef main():\n    input_line = input()\n    input_line = input_line.split()\n    num_seg = int(input_line[0])\n    g = float(input_line[1])\n    seg_lengths = []\n    seg_angles = []\n    for i in range(num_seg):\n        input_line = input()\n        input_line = input_line.split()\n        seg_lengths.append(float(input_line[0]))\n        seg_angles.append(float(input_line[1]))\n\n    for i in range(num_seg):\n        v = 0\n        for j in range(i, num_seg):\n            v += math.sqrt(2*g*seg_lengths[j]/math.cos(math.radians(seg_angles[j])))\n        v /= 100\n        print(v)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649835813,
  "object": "edit"
}
2022-04-13 07:43:37.043535 fix syntax errors 3 ['import math\n\ndef main():\n    input_line = input()\n    input_line = input_line.split()\n    num_seg = int(input_line[0])\n    g = float(input_line[1])\n    seg_lengths = []\n    seg_angles = []\n    for i in range(num_seg):\n        input_line = input()\n        input_line = input_line.split()\n        seg_lengths.append(float(input_line[0]))\n        seg_angles.append(float(input_line[1]))\n\n    for i in range(num_seg):\n        v = 0\n        for j in range(i, num_seg):\n            v += math.sqrt(2*g*seg_lengths[j]/math.cos(math.radians(seg_angles[j])))\n        v /= 100\n        print(v)\n\nif __name__ == "__main__":\n    main()\n', '\nimport math\n\ndef main():\n    input_line = input()\n    input_line = input_line.split()\n    num_seg = int(input_line[0])\n    g = float(input_line[1])\n    seg_lengths = []\n    seg_angles = []\n    for i in range(num_seg):\n        input_line = input()\n        input_line = input_line.split()\n        seg_lengths.append(float(input_line[0]))\n        seg_angles.append(float(input_line[1]))\n\n    for i in range(num_seg):\n        v = 0\n        for j in range(i, num_seg):\n            v += math.sqrt(2 * g * seg_lengths[j] / math.cos(math.radians(seg_angles[j]))) / 100\n        print(v)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport math\n\ndef main():\n    input_line = input()\n    input_line = input_line.split()\n    num_seg = int(input_line[0])\n    g = float(input_line[1])\n    seg_lengths = []\n    seg_angles = []\n    for i in range(num_seg):\n        input_line = input()\n        input_line = input_line.split()\n        seg_lengths.append(float(input_line[0]))\n        seg_angles.append(float(input_line[1]))\n\n    for i in range(num_seg):\n        v = 0\n        for j in range(i, num_seg):\n            v += math.sqrt(2*g*seg_lengths[j]/math.cos(math.radians(seg_angles[j])))\n        v /= 100\n        print(v)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 07:43:37.043569 size on output set 9
2022-04-13 07:43:37.043580 num operations 2
2022-04-13 07:43:37.043585 size on input set 1
2022-04-13 07:43:39.616945 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nimport math\n\ndef main():\n    # Read lines from stdin\n    lines = [line.strip() for line in sys.stdin]\n\n    # Parse first line\n    N, g = map(float, lines[0].split())\n\n    # Parse remaining lines \n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(int, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment\n    for i in range(int(N)):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\nimport math\n\ndef main():\n    # Read lines from stdin\n    lines = [line.strip() for line in sys.stdin]\n\n    # Parse the first line\n    N, g = map(float, lines[0].split())\n\n    # Parse the remaining lines\n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(int, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment\n    for i in range(int(N)):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\nimport math\n\ndef main():\n    # Read lines from stdin\n    lines = [line.strip() for line in sys.stdin]\n\n    # Parse the first line\n    N, g = map(float, lines[0].split())\n\n    # Parse the remaining lines\n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(int, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment.\n    for i in range(int(N)):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649835817,
  "object": "edit"
}
2022-04-13 07:43:39.617175 fix spelling mistakes 3 ["\n\nimport sys\nimport math\n\ndef main():\n    # Read lines from stdin\n    lines = [line.strip() for line in sys.stdin]\n\n    # Parse first line\n    N, g = map(float, lines[0].split())\n\n    # Parse remaining lines \n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(int, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment\n    for i in range(int(N)):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport math\n\ndef main():\n    # Read lines from stdin\n    lines = [line.strip() for line in sys.stdin]\n\n    # Parse the first line\n    N, g = map(float, lines[0].split())\n\n    # Parse the remaining lines\n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(int, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment\n    for i in range(int(N)):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    # Read lines from stdin\n    lines = [line.strip() for line in sys.stdin]\n\n    # Parse the first line\n    N, g = map(float, lines[0].split())\n\n    # Parse the remaining lines\n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(int, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment.\n    for i in range(int(N)):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 07:43:39.617303 size on output set 3
2022-04-13 07:43:39.617317 size on input set 3
2022-04-13 07:43:47.670492 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nimport math\n\ndef main():\n    # Read lines from stdin\n    lines = [line.strip() for line in sys.stdin]\n\n    # Parse first line\n    N, g = map(float, lines[0].split())\n\n    # Parse remaining lines\n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(int, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment\n    for i in range(int(N)):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nimport math\n\n# Read lines from stdin\nlines = [line.strip() for line in sys.stdin]\n\n# Parse first line\nN, g = map(float, lines[0].split())\n\n    # Parse remaining lines \n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(int, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment\n    for i in range(int(N)):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\nimport math\n\ndef main():\n    # Read lines from stdin\n    lines = [line.strip() for line in sys.stdin]\n\n    # Parse first line\n    N, g = map(float, lines[0].split())\n\n    # Parse remaining lines\n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(int, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment\n    for i in range(int(N)):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649835819,
  "object": "edit"
}
2022-04-13 07:43:47.670698 fix syntax errors 3 ["\n\nimport sys\nimport math\n\ndef main():\n    # Read lines from stdin\n    lines = [line.strip() for line in sys.stdin]\n\n    # Parse first line\n    N, g = map(float, lines[0].split())\n\n    # Parse remaining lines\n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(int, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment\n    for i in range(int(N)):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\n# Read lines from stdin\nlines = [line.strip() for line in sys.stdin]\n\n# Parse first line\nN, g = map(float, lines[0].split())\n\n    # Parse remaining lines \n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(int, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment\n    for i in range(int(N)):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    # Read lines from stdin\n    lines = [line.strip() for line in sys.stdin]\n\n    # Parse first line\n    N, g = map(float, lines[0].split())\n\n    # Parse remaining lines\n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(int, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment\n    for i in range(int(N)):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 07:43:51.487205 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\nimport math\n\ndef main():\n    # Read lines from stdin\n    lines = [line.strip() for line in sys.stdin]\n\n    # Parse the first line\n    N, g = map(int, lines[0].split())\n\n    # Parse the remaining lines\n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(int, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment\n    for i in range(N):\n        v = math.sqrt(2 * g * dist[i] / math.cos(math.radians(angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\nimport math\n\ndef main():\n    # Read lines from stdin\n    lines = [line.strip() for line in sys.stdin]\n\n    # Parse the first line\n    N, g = map(int, lines[0].split())\n\n    # Parse the remaining lines\n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(int, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment\n    for i in range(N):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\nimport math\n\ndef main():\n    # Read lines from stdin\n    lines = [line.strip() for line in sys.stdin]\n\n    # Parse the first line\n    N, g = map(float, lines[0].split())\n\n    # Parse the remaining lines\n    dist, angle = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(int, lines[i].split())\n        dist.append(D)\n        angle.append(angle)\n\n    # Calculate velocity for each segment\n    for i in range(int(N)):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(angle[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649835827,
  "object": "edit"
}
2022-04-13 07:43:51.487375 fix syntax errors 3 ["import sys\nimport math\n\ndef main():\n    # Read lines from stdin\n    lines = [line.strip() for line in sys.stdin]\n\n    # Parse the first line\n    N, g = map(int, lines[0].split())\n\n    # Parse the remaining lines\n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(int, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment\n    for i in range(N):\n        v = math.sqrt(2 * g * dist[i] / math.cos(math.radians(angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport math\n\ndef main():\n    # Read lines from stdin\n    lines = [line.strip() for line in sys.stdin]\n\n    # Parse the first line\n    N, g = map(int, lines[0].split())\n\n    # Parse the remaining lines\n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(int, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment\n    for i in range(N):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport math\n\ndef main():\n    # Read lines from stdin\n    lines = [line.strip() for line in sys.stdin]\n\n    # Parse the first line\n    N, g = map(float, lines[0].split())\n\n    # Parse the remaining lines\n    dist, angle = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(int, lines[i].split())\n        dist.append(D)\n        angle.append(angle)\n\n    # Calculate velocity for each segment\n    for i in range(int(N)):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(angle[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 07:43:56.277077 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport math\n\ndef main():\n    lines = [line.strip() for line in open('input.txt')]\n\n    # Parse the first line\n    N, g = map(float, lines[0].split())\n\n    # Parse the remaining lines\n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(int, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment.\n    for i in range(int(N)):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nimport math\n\ndef main():\n    # Read lines from stdin\n    lines = [line.strip() for line in sys.stdin]\n\n    # Parse the first line\n    N, g = map(int, lines[0].split())\n\n    # Parse the remaining lines\n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(int, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment.\n    for i in range(int(N)):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\nimport math\nimport math\n\ndef main():\n    # Read lines from stdin\n    lines = [line.strip() for line in sys.stdin]\n\n    # Parse the first line\n    N, g = map(int, lines[0].split())\n\n    # Parse the remaining lines\n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(float, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment.\n    for i in range(int(N)):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(90-angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649835831,
  "object": "edit"
}
2022-04-13 07:43:56.277381 fix syntax errors 3 ["\nimport sys\nimport math\n\ndef main():\n    lines = [line.strip() for line in open('input.txt')]\n\n    # Parse the first line\n    N, g = map(float, lines[0].split())\n\n    # Parse the remaining lines\n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(int, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment.\n    for i in range(int(N)):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    # Read lines from stdin\n    lines = [line.strip() for line in sys.stdin]\n\n    # Parse the first line\n    N, g = map(int, lines[0].split())\n\n    # Parse the remaining lines\n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(int, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment.\n    for i in range(int(N)):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\nimport math\n\ndef main():\n    # Read lines from stdin\n    lines = [line.strip() for line in sys.stdin]\n\n    # Parse the first line\n    N, g = map(int, lines[0].split())\n\n    # Parse the remaining lines\n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(float, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment.\n    for i in range(int(N)):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(90-angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 07:43:56.277433 size on output set 8
2022-04-13 07:43:56.277452 num operations 2
2022-04-13 07:43:56.277457 size on input set 1
2022-04-13 07:44:03.744301 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    num_segments, gravity = map(float, input().split())\n    segment_data = []\n    for _ in range(int(num_segments)):\n        segment_data.append(list(map(float, input().split())))\n    segment_data.reverse()\n    speeds = []\n    segment_data[0].append(0)\n    for i in range(1, int(num_segments)):\n        segment_data[i].append(segment_data[i-1][2] + (segment_data[i-1][0] * math.tan(math.radians(segment_data[i-1][1]))))\n    for segment in segment_data:\n        speeds.append(math.sqrt(2 * gravity * segment[2]))\n    speeds.reverse()\n    for speed in speeds:\n        print(speed)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    num_segments, gravity = map(float, input().split())\n    segment_data = []\n    for _ in range(int(num_segments)):\n        segment_data.append(list(map(float, input().split())))\n    segment_data.reverse()\n    speeds = []\n    segment_data[0].append(0)\n    for i in range(1, int(num_segments)):\n        segment_data[i].append(segment_data[i-1][2] + (segment_data[i-1][0] * math.tan(math.radians(segment_data[i-1][1]))))\n    for segment in segment_data:\n        speeds.append(math.sqrt(2 * gravity * segment[2]))\n    speeds.reverse()\n    for speed in speeds:\n        print(speed)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    num_segments, gravity = map(float, input().split())\n    segment_data = []\n    for _ in range(int(num_segments)):\n        segment_data.append(list(map(float, input().split())))\n    segment_data.reverse()\n    speeds = []\n    segment_data[0].append(0)\n    for i in range(1, int(num_segments)):\n        segment_data[i].append(segment_data[i-1][2] + (segment_data[i-1][0] * math.tan(math.radians(segment_data[i-1][1]))))\n    for segment in segment_data:\n        speeds.append(math.sqrt(2 * gravity * segment[2]))\n    speeds.reverse()\n    for speed in speeds:\n        print(speed)\n\nmain()\n"
    }
  ],
  "created": 1649835836,
  "object": "edit"
}
2022-04-13 07:44:03.744487 fix spelling mistakes 3 ['\n\ndef main():\n    num_segments, gravity = map(float, input().split())\n    segment_data = []\n    for _ in range(int(num_segments)):\n        segment_data.append(list(map(float, input().split())))\n    segment_data.reverse()\n    speeds = []\n    segment_data[0].append(0)\n    for i in range(1, int(num_segments)):\n        segment_data[i].append(segment_data[i-1][2] + (segment_data[i-1][0] * math.tan(math.radians(segment_data[i-1][1]))))\n    for segment in segment_data:\n        speeds.append(math.sqrt(2 * gravity * segment[2]))\n    speeds.reverse()\n    for speed in speeds:\n        print(speed)\n\nmain()\n', '\n\ndef main():\n    num_segments, gravity = map(float, input().split())\n    segment_data = []\n    for _ in range(int(num_segments)):\n        segment_data.append(list(map(float, input().split())))\n    segment_data.reverse()\n    speeds = []\n    segment_data[0].append(0)\n    for i in range(1, int(num_segments)):\n        segment_data[i].append(segment_data[i-1][2] + (segment_data[i-1][0] * math.tan(math.radians(segment_data[i-1][1]))))\n    for segment in segment_data:\n        speeds.append(math.sqrt(2 * gravity * segment[2]))\n    speeds.reverse()\n    for speed in speeds:\n        print(speed)\n\nmain()\n', '\n\ndef main():\n    num_segments, gravity = map(float, input().split())\n    segment_data = []\n    for _ in range(int(num_segments)):\n        segment_data.append(list(map(float, input().split())))\n    segment_data.reverse()\n    speeds = []\n    segment_data[0].append(0)\n    for i in range(1, int(num_segments)):\n        segment_data[i].append(segment_data[i-1][2] + (segment_data[i-1][0] * math.tan(math.radians(segment_data[i-1][1]))))\n    for segment in segment_data:\n        speeds.append(math.sqrt(2 * gravity * segment[2]))\n    speeds.reverse()\n    for speed in speeds:\n        print(speed)\n\nmain()\n']
2022-04-13 07:44:03.744518 size on output set 1
2022-04-13 07:44:03.744525 size on input set 1
2022-04-13 07:44:09.285323 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import math\n\ndef main():\n    num_segments, gravity = map(float, input().split())\n    segment_data = []\n    for _ in range(int(num_segments)):\n        segment_data.append(list(map(float, input().split())))\n    segment_data.reverse()\n    speeds = []\n    segment_data[0].append(0)\n    for i in range(1, int(num_segments)):\n        segment_data[i].append(segment_data[i-1][2] + (segment_data[i-1][0] * math.tan(math.radians(segment_data[i-1][1]))))\n    for segment in segment_data:\n        speeds.append(math.sqrt(2 * gravity * segment[2]))\n    speeds.reverse()\n    for speed in speeds:\n        print(speed)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "import math\n\n\ndef main():\n    num_segments, gravity = map(float, input().split())\n    segment_data = []\n    for _ in range(int(num_segments)):\n        segment_data.append(list(map(float, input().split())))\n    segment_data.reverse()\n    speeds = []\n    segment_data[0].append(0)\n    for i in range(1, int(num_segments)):\n        segment_data[i].append(segment_data[i-1][2] + (segment_data[i-1][0] * math.tan(math.radians(segment_data[i-1][1]))))\n    for segment in segment_data:\n        speeds.append(math.sqrt(2 * gravity * segment[2]))\n    speeds.reverse()\n    for speed in speeds:\n        print(speed)\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    num_segments, gravity = map(int, input().split())\n    segment_data = []\n    for _ in range(num_segments):\n        segment_data.append(list(map(float, input().split())))\n    segment_data.reverse()\n    speeds = []\n    segment_data[0].append(0)\n    for i in range(1, num_segments):\n        segment_data[i].append(segment_data[i-1][2] + (segment_data[i-1][0] * math.tan(math.radians(segment_data[i-1][1])))) \n    for segment in segment_data:\n        speeds.append(math.sqrt(2 * gravity * segment[2]))\n    speeds.reverse()\n    for speed in speeds:\n        print(speed) \n\nmain()\n"
    }
  ],
  "created": 1649835843,
  "object": "edit"
}
2022-04-13 07:44:09.285575 fix syntax errors 3 ['import math\n\ndef main():\n    num_segments, gravity = map(float, input().split())\n    segment_data = []\n    for _ in range(int(num_segments)):\n        segment_data.append(list(map(float, input().split())))\n    segment_data.reverse()\n    speeds = []\n    segment_data[0].append(0)\n    for i in range(1, int(num_segments)):\n        segment_data[i].append(segment_data[i-1][2] + (segment_data[i-1][0] * math.tan(math.radians(segment_data[i-1][1]))))\n    for segment in segment_data:\n        speeds.append(math.sqrt(2 * gravity * segment[2]))\n    speeds.reverse()\n    for speed in speeds:\n        print(speed)\n\nmain()\n', 'import math\n\n\ndef main():\n    num_segments, gravity = map(float, input().split())\n    segment_data = []\n    for _ in range(int(num_segments)):\n        segment_data.append(list(map(float, input().split())))\n    segment_data.reverse()\n    speeds = []\n    segment_data[0].append(0)\n    for i in range(1, int(num_segments)):\n        segment_data[i].append(segment_data[i-1][2] + (segment_data[i-1][0] * math.tan(math.radians(segment_data[i-1][1]))))\n    for segment in segment_data:\n        speeds.append(math.sqrt(2 * gravity * segment[2]))\n    speeds.reverse()\n    for speed in speeds:\n        print(speed)\n\nmain()\n', '\n\ndef main():\n    num_segments, gravity = map(int, input().split())\n    segment_data = []\n    for _ in range(num_segments):\n        segment_data.append(list(map(float, input().split())))\n    segment_data.reverse()\n    speeds = []\n    segment_data[0].append(0)\n    for i in range(1, num_segments):\n        segment_data[i].append(segment_data[i-1][2] + (segment_data[i-1][0] * math.tan(math.radians(segment_data[i-1][1])))) \n    for segment in segment_data:\n        speeds.append(math.sqrt(2 * gravity * segment[2]))\n    speeds.reverse()\n    for speed in speeds:\n        print(speed) \n\nmain()\n']
2022-04-13 07:44:09.285609 size on output set 3
2022-04-13 07:44:09.285620 num operations 2
2022-04-13 07:44:09.285625 size on input set 1
2022-04-13 07:44:12.072844 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nfrom math import sqrt\n\n\ndef solve(segments, g):\n    speeds = []\n    for i in range(len(segments)):\n        s = segments[i]\n        if i == 0:\n            speeds.append(sqrt(2 * g * s[0]))\n        else:\n            speeds.append(sqrt(speeds[i - 1] ** 2 + 2 * g * s[0] * (1 - cos(s[1] * pi / 180))))\n    return speeds\n\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        n, g = map(float, line.split())\n        segments = []\n        for line in sys.stdin:\n            segments.append(map(float, line.split()))\n            if len(segments) == n:\n                break\n        print('\\n'.join(map(str, solve(segments, g))))\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nfrom math import sqrt\n\n\ndef solve(segments, g):\n    speeds = []\n    for i in range(len(segments)):\n        s = segments[i]\n        if i == 0:\n            speeds.append(sqrt(2 * g * s[0]))\n        else:\n            speeds.append(sqrt(speeds[i - 1] ** 2 + 2 * g * s[0] * (1 - cos(s[1] * pi / 180))))\n    return speeds\n\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        n, g = map(float, line.split())\n        segments = []\n        for line in sys.stdin:\n            segments.append(map(float, line.split()))\n            if len(segments) == n:\n                break\n        print('\\n'.join(map(str, solve(segments, g))))\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\nfrom math import sqrt\n\n\ndef solve(segments, g):\n    speeds = []\n    for i in range(len(segments)):\n        s = segments[i]\n        if i == 0:\n            speeds.append(sqrt(2 * g * s[0]))\n        else:\n            speeds.append(sqrt(speeds[i - 1] ** 2 + 2 * g * s[0] * (1 - cos(s[1] * pi / 180))))\n    return speeds\n\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        n, g = map(float, line.split())\n        segments = []\n        for line in sys.stdin:\n            segments.append(map(float, line.split()))\n            if len(segments) == n:\n                break\n        print('\\n'.join(map(str, solve(segments, g))))\n"
    }
  ],
  "created": 1649835849,
  "object": "edit"
}
2022-04-13 07:44:12.073013 fix spelling mistakes 3 ["\n\nimport sys\nfrom math import sqrt\n\n\ndef solve(segments, g):\n    speeds = []\n    for i in range(len(segments)):\n        s = segments[i]\n        if i == 0:\n            speeds.append(sqrt(2 * g * s[0]))\n        else:\n            speeds.append(sqrt(speeds[i - 1] ** 2 + 2 * g * s[0] * (1 - cos(s[1] * pi / 180))))\n    return speeds\n\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        n, g = map(float, line.split())\n        segments = []\n        for line in sys.stdin:\n            segments.append(map(float, line.split()))\n            if len(segments) == n:\n                break\n        print('\\n'.join(map(str, solve(segments, g))))\n", "\n\nimport sys\nfrom math import sqrt\n\n\ndef solve(segments, g):\n    speeds = []\n    for i in range(len(segments)):\n        s = segments[i]\n        if i == 0:\n            speeds.append(sqrt(2 * g * s[0]))\n        else:\n            speeds.append(sqrt(speeds[i - 1] ** 2 + 2 * g * s[0] * (1 - cos(s[1] * pi / 180))))\n    return speeds\n\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        n, g = map(float, line.split())\n        segments = []\n        for line in sys.stdin:\n            segments.append(map(float, line.split()))\n            if len(segments) == n:\n                break\n        print('\\n'.join(map(str, solve(segments, g))))\n", "\n\nimport sys\nfrom math import sqrt\n\n\ndef solve(segments, g):\n    speeds = []\n    for i in range(len(segments)):\n        s = segments[i]\n        if i == 0:\n            speeds.append(sqrt(2 * g * s[0]))\n        else:\n            speeds.append(sqrt(speeds[i - 1] ** 2 + 2 * g * s[0] * (1 - cos(s[1] * pi / 180))))\n    return speeds\n\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        n, g = map(float, line.split())\n        segments = []\n        for line in sys.stdin:\n            segments.append(map(float, line.split()))\n            if len(segments) == n:\n                break\n        print('\\n'.join(map(str, solve(segments, g))))\n"]
2022-04-13 07:44:12.073047 size on output set 1
2022-04-13 07:44:12.073054 size on input set 1
2022-04-13 07:44:17.906898 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport math\nimport sys\nfrom math import sqrt\n\n\ndef solve(segments, g):\n    speeds = []\n    for i in range(len(segments)):\n        s = segments[i]\n        if i == 0:\n            speeds.append(sqrt(2 * g * s[0]))\n        else:\n            speeds.append(sqrt(speeds[i - 1] ** 2 + 2 * g * s[0] * (1 - math.cos(s[1] * math.pi / 180))))\n    return speeds\n\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        n, g = map(float, line.split())\n        segments = []\n        for line in sys.stdin:\n            segments.append(map(float, line.split()))\n            if len(segments) == n:\n                break\n        print('\\n'.join(map(str, solve(segments, g))))\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom math import cos, pi, sqrt\nimport sys\n\n\ndef solve(segments, g):\n    speeds = []\n    for i in range(len(segments)):\n        s = segments[i]\n        if i == 0:\n            speeds.append(sqrt(2 * g * s[0]))\n        else:\n            speeds.append(sqrt(speeds[i - 1] ** 2 +\n                               2 * g * s[0] * (1 - cos(s[1] * pi / 180))))\n    return speeds\n\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        n, g = map(float, line.split())\n        segments = []\n        for line in sys.stdin:\n            segments.append(map(float, line.split()))\n            if len(segments) == n:\n                break\n        print('\\n'.join(map(str, solve(segments, g))))\n"
    },
    {
      "index": 2,
      "text": "from math import sqrt, cos, pi\n\nimport sys\n\n\ndef solve(segments, g):\n    speeds = []\n    for i in range(len(segments)):\n        s = segments[i]\n        if i == 0:\n            speeds.append(sqrt(2 * g * s[0]))\n        else:\n            speeds.append(sqrt(speeds[i - 1] ** 2 + 2 * g * s[0] * (1 - cos(s[1] * pi / 180.0))))\n    return speeds\n\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        n, g = map(float, line.split())\n        segments = []\n        for line in sys.stdin:\n            segments.append(map(float, line.split()))\n            if len(segments) == n:\n                break\n        print('\\n'.join(map(str, solve(segments, g))))\n"
    }
  ],
  "created": 1649835852,
  "object": "edit"
}
2022-04-13 07:44:17.907123 fix syntax errors 3 ["\nimport math\nimport sys\nfrom math import sqrt\n\n\ndef solve(segments, g):\n    speeds = []\n    for i in range(len(segments)):\n        s = segments[i]\n        if i == 0:\n            speeds.append(sqrt(2 * g * s[0]))\n        else:\n            speeds.append(sqrt(speeds[i - 1] ** 2 + 2 * g * s[0] * (1 - math.cos(s[1] * math.pi / 180))))\n    return speeds\n\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        n, g = map(float, line.split())\n        segments = []\n        for line in sys.stdin:\n            segments.append(map(float, line.split()))\n            if len(segments) == n:\n                break\n        print('\\n'.join(map(str, solve(segments, g))))\n", "\n\nfrom math import cos, pi, sqrt\nimport sys\n\n\ndef solve(segments, g):\n    speeds = []\n    for i in range(len(segments)):\n        s = segments[i]\n        if i == 0:\n            speeds.append(sqrt(2 * g * s[0]))\n        else:\n            speeds.append(sqrt(speeds[i - 1] ** 2 +\n                               2 * g * s[0] * (1 - cos(s[1] * pi / 180))))\n    return speeds\n\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        n, g = map(float, line.split())\n        segments = []\n        for line in sys.stdin:\n            segments.append(map(float, line.split()))\n            if len(segments) == n:\n                break\n        print('\\n'.join(map(str, solve(segments, g))))\n", "from math import sqrt, cos, pi\n\nimport sys\n\n\ndef solve(segments, g):\n    speeds = []\n    for i in range(len(segments)):\n        s = segments[i]\n        if i == 0:\n            speeds.append(sqrt(2 * g * s[0]))\n        else:\n            speeds.append(sqrt(speeds[i - 1] ** 2 + 2 * g * s[0] * (1 - cos(s[1] * pi / 180.0))))\n    return speeds\n\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        n, g = map(float, line.split())\n        segments = []\n        for line in sys.stdin:\n            segments.append(map(float, line.split()))\n            if len(segments) == n:\n                break\n        print('\\n'.join(map(str, solve(segments, g))))\n"]
2022-04-13 07:44:17.907159 size on output set 3
2022-04-13 07:44:17.907169 num operations 2
2022-04-13 07:44:17.907173 size on input set 1
2022-04-13 07:44:22.694403 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom math import sin, cos, radians\n\nN, g = map(float, input().split())\n\ndef get_velocity(D, theta):\n    g_theta = g * cos(radians(theta))\n    return ((2 * D * g_theta) / g) ** 0.5\n\nfor i in range(int(N)):\n    D, theta = map(float, input().split())\n    print(get_velocity(D, theta))\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom math import sin, cos, radians\n\nN, g = map(float, input().split())\n\ndef get_velocity(D, theta):\n    g_theta = g * cos(radians(theta))\n    return ((2 * D * g_theta) / g) ** 0.5\n\nfor i in range(int(N)):\n    D, theta = map(float, input().split())\n    print(get_velocity(D, theta))\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom math import sin, cos, radians\n\nnumber_of_inputs, gravity = map(float, input().split())\n\ndef get_velocity(distance, theta):\n    g_theta = g * cos(radians(theta))\n    return ((2 * distance * g_theta) / gravity) ** 0.5\n\nfor i in range(int(number_of_inputs)):\n    distance, theta = map(int, input().split())\n    print(get_velocity(distance, theta))\n"
    }
  ],
  "created": 1649835857,
  "object": "edit"
}
2022-04-13 07:44:22.694574 fix spelling mistakes 3 ['\n\nfrom math import sin, cos, radians\n\nN, g = map(float, input().split())\n\ndef get_velocity(D, theta):\n    g_theta = g * cos(radians(theta))\n    return ((2 * D * g_theta) / g) ** 0.5\n\nfor i in range(int(N)):\n    D, theta = map(float, input().split())\n    print(get_velocity(D, theta))\n', '\n\nfrom math import sin, cos, radians\n\nN, g = map(float, input().split())\n\ndef get_velocity(D, theta):\n    g_theta = g * cos(radians(theta))\n    return ((2 * D * g_theta) / g) ** 0.5\n\nfor i in range(int(N)):\n    D, theta = map(float, input().split())\n    print(get_velocity(D, theta))\n', '\n\nfrom math import sin, cos, radians\n\nnumber_of_inputs, gravity = map(float, input().split())\n\ndef get_velocity(distance, theta):\n    g_theta = g * cos(radians(theta))\n    return ((2 * distance * g_theta) / gravity) ** 0.5\n\nfor i in range(int(number_of_inputs)):\n    distance, theta = map(int, input().split())\n    print(get_velocity(distance, theta))\n']
2022-04-13 07:44:22.694600 size on output set 2
2022-04-13 07:44:22.694606 size on input set 2
2022-04-13 07:44:25.928955 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom math import sin, cos, radians\n\nnumber_of_inputs, gravity = map(float, input().split())\n\n\ndef get_velocity(distance, theta):\n    g_theta = gravity * cos(radians(theta))\n    return ((2 * distance * g_theta) / gravity) ** 0.5\n\nfor i in range(int(number_of_inputs)):\n    distance, theta = map(int, input().split())\n    print(get_velocity(distance, theta))\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom math import sin, cos, radians\n\nnumber_of_inputs, gravity = map(float, input().split())\n\ndef get_velocity(distance, theta):\n    g_theta = gravity * cos(radians(theta))\n    return ((2 * distance * g_theta) / gravity) ** 0.5\n\nfor i in range(int(number_of_inputs)):\n    distance, theta = map(int, input().split())\n    print(get_velocity(distance, theta))\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom math import sin, cos, radians\n\nnumber_of_inputs, gravity = map(float, input().split())\n\ndef get_velocity(distance, theta):\n    g_theta = gravity * cos(radians(theta))\n    return ((2 * distance * g_theta) / gravity) ** 0.5\n\nfor i in range(int(number_of_inputs)):\n    distance, theta = map(float, input().split())\n    print(get_velocity(distance, theta))\n"
    }
  ],
  "created": 1649835862,
  "object": "edit"
}
2022-04-13 07:44:25.929203 fix syntax errors 3 ['\n\nfrom math import sin, cos, radians\n\nnumber_of_inputs, gravity = map(float, input().split())\n\n\ndef get_velocity(distance, theta):\n    g_theta = gravity * cos(radians(theta))\n    return ((2 * distance * g_theta) / gravity) ** 0.5\n\nfor i in range(int(number_of_inputs)):\n    distance, theta = map(int, input().split())\n    print(get_velocity(distance, theta))\n', '\n\nfrom math import sin, cos, radians\n\nnumber_of_inputs, gravity = map(float, input().split())\n\ndef get_velocity(distance, theta):\n    g_theta = gravity * cos(radians(theta))\n    return ((2 * distance * g_theta) / gravity) ** 0.5\n\nfor i in range(int(number_of_inputs)):\n    distance, theta = map(int, input().split())\n    print(get_velocity(distance, theta))\n', '\n\nfrom math import sin, cos, radians\n\nnumber_of_inputs, gravity = map(float, input().split())\n\ndef get_velocity(distance, theta):\n    g_theta = gravity * cos(radians(theta))\n    return ((2 * distance * g_theta) / gravity) ** 0.5\n\nfor i in range(int(number_of_inputs)):\n    distance, theta = map(float, input().split())\n    print(get_velocity(distance, theta))\n']
2022-04-13 07:44:29.747335 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom math import sin, cos, radians\n\nN, g = map(float, input().split())\n\ndef get_velocity(D, theta):\n    g_theta = g * cos(radians(theta))\n    return ((2 * D * g_theta) / g) ** 0.5\n\nfor i in range(int(N)):\n    D, theta = map(float, input().split())\n    print(get_velocity(D, theta))\n"
    },
    {
      "index": 1,
      "text": "\nfrom math import sin, cos, radians\n\nN, g = map(float, input().split()) # N is no. of test cases, g is acceleration due to gravity\n# function to calculate velocity\n\ndef get_velocity(D, theta):\n    g_theta = g * cos(radians(theta))\n    return ((2 * D * g_theta) / g) ** 0.5\n\nfor i in range(int(N)):\n    D, theta = map(float, input().split())\n    print(get_velocity(D, theta))\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\nfrom math import sin, cos, radians\n\nN, g = list(map(float, sys.stdin.readline().split()))\n\ndef get_velocity(D, theta):\n    g_theta = g * cos(radians(theta))\n    return ((2 * D * g_theta) / g) ** 0.5\n\nfor i in range(int(N)):\n    D, theta = list(map(float, sys.stdin.readline().split()))\n    print(get_velocity(D, theta))\n"
    }
  ],
  "created": 1649835865,
  "object": "edit"
}
2022-04-13 07:44:29.747575 fix syntax errors 3 ['\nfrom math import sin, cos, radians\n\nN, g = map(float, input().split())\n\ndef get_velocity(D, theta):\n    g_theta = g * cos(radians(theta))\n    return ((2 * D * g_theta) / g) ** 0.5\n\nfor i in range(int(N)):\n    D, theta = map(float, input().split())\n    print(get_velocity(D, theta))\n', '\nfrom math import sin, cos, radians\n\nN, g = map(float, input().split()) # N is no. of test cases, g is acceleration due to gravity\n# function to calculate velocity\n\ndef get_velocity(D, theta):\n    g_theta = g * cos(radians(theta))\n    return ((2 * D * g_theta) / g) ** 0.5\n\nfor i in range(int(N)):\n    D, theta = map(float, input().split())\n    print(get_velocity(D, theta))\n', '\n\nimport sys\nfrom math import sin, cos, radians\n\nN, g = list(map(float, sys.stdin.readline().split()))\n\ndef get_velocity(D, theta):\n    g_theta = g * cos(radians(theta))\n    return ((2 * D * g_theta) / g) ** 0.5\n\nfor i in range(int(N)):\n    D, theta = list(map(float, sys.stdin.readline().split()))\n    print(get_velocity(D, theta))\n']
2022-04-13 07:44:29.747604 size on output set 6
2022-04-13 07:44:29.747616 num operations 2
2022-04-13 07:44:29.747621 size on input set 1
2022-04-13 07:44:37.853573 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Input:\n    - One line containing a positive integer N (1 \u2264 N \u2264 4), the number of line segments making up the mountain, followed by a space and then a real number g (1 \u2264 g \u2264 100), the coefficient of acceleration due to gravity.\n    - N more lines each containing two integers D_i and then \u03b8_i (1 \u2264 D \u2264 10^4; 1 \u2264 \u03b8 \u2264 89): the sloped distance in metres and absolute angle in degrees of this line segment from the vertical respectively. The segments are ordered from the top of the hill to its bottom.\n    Output:\n    Each of the N lines of output should contain one real number: the velocity of a biker starting at the i-th-most segment from the top and finishing at the foot of the mountain.\n    \"\"\"\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Input:\n    - One line containing a positive integer $N$ ($1 \\le N \\le 4$), the number of line segments making up the mountain, followed by a space and then a real number $g$ ($1 \\le g \\le 100$), the coefficient of acceleration due to gravity. \n    - $N$ more lines each containing two integers $D_ i$ and then $\\theta _ i$ ($1 \\le D \\le 10^4; 1 \\le \\theta \\le 89$): the sloped distance in metres and absolute angle in degrees of this line segment from the vertical respectively. The segments are ordered from the top of the hill to its bottom.\n    Output:\n    Each of the $N$ lines of output should contain one real number: the velocity of a biker starting at the $i^{\\text {th}}$-most segment from the top and finishing at the foot of the mountain.\n    \"\"\"\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    \"\"\"\n    Input:\n    - One line containing a positive integer N (1 <= N <= 4), the number of line segments making up the mountain, followed by a space and then a real number g (1 <= g <= 100), the coefficient of acceleration due to gravity.\n    - N more lines each containing two integers D_ i and then theta _ i (1 <= D <= 10^4; 1 <= theta <= 89): the sloped distance in metres and absolute angle in degrees of this line segment from the vertical respectively. The segments are ordered from the top of the hill to its bottom.\n    Output:\n    Each of the N lines of output should contain one real number: the velocity of a biker starting at the i^th-most segment from the top and finishing at the foot of the mountain.\n    \"\"\"\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649835869,
  "object": "edit"
}
2022-04-13 07:44:37.853766 fix spelling mistakes 3 ['\n\ndef main():\n    """\n    Input:\n    - One line containing a positive integer N (1 ≤ N ≤ 4), the number of line segments making up the mountain, followed by a space and then a real number g (1 ≤ g ≤ 100), the coefficient of acceleration due to gravity.\n    - N more lines each containing two integers D_i and then θ_i (1 ≤ D ≤ 10^4; 1 ≤ θ ≤ 89): the sloped distance in metres and absolute angle in degrees of this line segment from the vertical respectively. The segments are ordered from the top of the hill to its bottom.\n    Output:\n    Each of the N lines of output should contain one real number: the velocity of a biker starting at the i-th-most segment from the top and finishing at the foot of the mountain.\n    """\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Input:\n    - One line containing a positive integer $N$ ($1 \\le N \\le 4$), the number of line segments making up the mountain, followed by a space and then a real number $g$ ($1 \\le g \\le 100$), the coefficient of acceleration due to gravity. \n    - $N$ more lines each containing two integers $D_ i$ and then $\\theta _ i$ ($1 \\le D \\le 10^4; 1 \\le \\theta \\le 89$): the sloped distance in metres and absolute angle in degrees of this line segment from the vertical respectively. The segments are ordered from the top of the hill to its bottom.\n    Output:\n    Each of the $N$ lines of output should contain one real number: the velocity of a biker starting at the $i^{\\text {th}}$-most segment from the top and finishing at the foot of the mountain.\n    """\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Input:\n    - One line containing a positive integer N (1 <= N <= 4), the number of line segments making up the mountain, followed by a space and then a real number g (1 <= g <= 100), the coefficient of acceleration due to gravity.\n    - N more lines each containing two integers D_ i and then theta _ i (1 <= D <= 10^4; 1 <= theta <= 89): the sloped distance in metres and absolute angle in degrees of this line segment from the vertical respectively. The segments are ordered from the top of the hill to its bottom.\n    Output:\n    Each of the N lines of output should contain one real number: the velocity of a biker starting at the i^th-most segment from the top and finishing at the foot of the mountain.\n    """\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 07:44:37.853822 size on output set 3
2022-04-13 07:44:37.853828 size on input set 3
2022-04-13 07:44:45.515077 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Input:\n    - One line containing a positive integer N (1 <= N <= 4), the number of line segments making up the mountain, followed by a space and then a real number g (1 <= g <= 100), the coefficient of acceleration due to gravity\n    - N more lines each containing two integers D_ i and then theta _ i (1 <= D <= 10^4; 1 <= theta <= 89): the sloped distance in metres and absolute angle in degrees of this line segment from the vertical respectively. The segments are ordered from the top of the hill to its bottom\n    Output:\n    Each of the N lines of output should contain one real number: the velocity of a biker starting at the i^th-most segment from the top and finishing at the foot of the mountain\n    \"\"\"\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Input:\n    - One line containing a positive integer N (1 <= N <= 4), the number of line segments making up the mountain, followed by a space and then a real number g (1 <= g <= 100), the coefficient of acceleration due to gravity\n    - N more lines each containing two integers D_ i and then theta _ i (1 <= D <= 10^4; 1 <= theta <= 89): the sloped distance in metres and absolute angle in degrees of this line segment from the vertical respectively. The segments are ordered from the top of the hill to its bottom\n    Output:\n    Each of the N lines of output should contain one real number: the velocity of a biker starting at the i^th-most segment from the top and finishing at the foot of the mountain\n    \"\"\"\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    \"\"\"\n    Input:\n    - One line containing a positive integer N (1 <= N <= 4), the number of line segments making up the mountain,\n    followed by a space and then a real number g (1 <= g <= 100), the coefficient of acceleration due to gravity.\n    - N more lines each containing two integers D_ i and then theta _ i (1 <= D <= 10^4; 1 <= theta <= 89): the sloped\n    distance in metres and absolute angle in degrees of this line segment from the vertical respectively. The segments are\n    ordered from the top of the hill to its bottom.\n    Output:\n    Each of the N lines of output should contain one real number: the velocity of a biker starting at the i^th-most\n    segment from the top and finishing at the foot of the mountain.\n    \"\"\"\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649835877,
  "object": "edit"
}
2022-04-13 07:44:45.515447 fix syntax errors 3 ['\n\ndef main():\n    """\n    Input:\n    - One line containing a positive integer N (1 <= N <= 4), the number of line segments making up the mountain, followed by a space and then a real number g (1 <= g <= 100), the coefficient of acceleration due to gravity\n    - N more lines each containing two integers D_ i and then theta _ i (1 <= D <= 10^4; 1 <= theta <= 89): the sloped distance in metres and absolute angle in degrees of this line segment from the vertical respectively. The segments are ordered from the top of the hill to its bottom\n    Output:\n    Each of the N lines of output should contain one real number: the velocity of a biker starting at the i^th-most segment from the top and finishing at the foot of the mountain\n    """\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Input:\n    - One line containing a positive integer N (1 <= N <= 4), the number of line segments making up the mountain, followed by a space and then a real number g (1 <= g <= 100), the coefficient of acceleration due to gravity\n    - N more lines each containing two integers D_ i and then theta _ i (1 <= D <= 10^4; 1 <= theta <= 89): the sloped distance in metres and absolute angle in degrees of this line segment from the vertical respectively. The segments are ordered from the top of the hill to its bottom\n    Output:\n    Each of the N lines of output should contain one real number: the velocity of a biker starting at the i^th-most segment from the top and finishing at the foot of the mountain\n    """\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Input:\n    - One line containing a positive integer N (1 <= N <= 4), the number of line segments making up the mountain,\n    followed by a space and then a real number g (1 <= g <= 100), the coefficient of acceleration due to gravity.\n    - N more lines each containing two integers D_ i and then theta _ i (1 <= D <= 10^4; 1 <= theta <= 89): the sloped\n    distance in metres and absolute angle in degrees of this line segment from the vertical respectively. The segments are\n    ordered from the top of the hill to its bottom.\n    Output:\n    Each of the N lines of output should contain one real number: the velocity of a biker starting at the i^th-most\n    segment from the top and finishing at the foot of the mountain.\n    """\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 07:44:53.164048 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Input:\n    - One line containing a positive integer N (1 <= N <= 4), the number of line segments making up the mountain, followed by a space and then a real number g (1 <= g <= 100), the coefficient of acceleration due to gravity.\n    - N more lines each containing two integers D_i and then \u03b8_i (1 <= D <= 10^4; 1 <= \u03b8 <= 89): the sloped distance in metres and absolute angle in degrees of this line segment from the vertical respectively. The segments are ordered from the top of the hill to its bottom.\n    Output:\n    Each of the N lines of output should contain one real number: the velocity of a biker starting at the i-th-most segment from the top and finishing at the foot of the mountain.\n    \"\"\"\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Input:\n    - One line containing a positive integer N (1 \u2264 N \u2264 4), the number of line segments making up the mountain,\n    followed by a space and then a real number g (1 \u2264 g \u2264 100), the coefficient of acceleration due to gravity.\n    - N more lines each containing two integers D_i and then \u03b8_i (1 \u2264 D \u2264 10^4; 1 \u2264 \u03b8 \u2264 89): the sloped distance in\n    metres and absolute angle in degrees of this line segment from the vertical respectively.\n    The segments are ordered from the top of the hill to its bottom.\n    Output:\n    Each of the N lines of output should contain one real number: the velocity of a biker starting at the i-th-most\n    segment from the top and finishing at the foot of the mountain.\n    \"\"\"\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    \"\"\"\n    Input:\n    - One line containing a positive integer N (1 <= N <= 4), the number of line segments making up the mountain, followed by a space and then a real number g (1 <= g <= 100), the coefficient of acceleration due to gravity.\n    - N more lines each containing two integers D_i and then \u03b8_i (1 <= D <= 10^4; 1 <= \u03b8 <= 89): the sloped distance in metres and absolute angle in degrees of this line segment from the vertical respectively. The segments are ordered from the top of the hill to its bottom.\n    Output:\n    Each of the N lines of output should contain one real number: the velocity of a biker starting at the i-th-most segment from the top and finishing at the foot of the mountain.\n    \"\"\"\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649835885,
  "object": "edit"
}
2022-04-13 07:44:53.164260 fix syntax errors 3 ['\n\ndef main():\n    """\n    Input:\n    - One line containing a positive integer N (1 <= N <= 4), the number of line segments making up the mountain, followed by a space and then a real number g (1 <= g <= 100), the coefficient of acceleration due to gravity.\n    - N more lines each containing two integers D_i and then θ_i (1 <= D <= 10^4; 1 <= θ <= 89): the sloped distance in metres and absolute angle in degrees of this line segment from the vertical respectively. The segments are ordered from the top of the hill to its bottom.\n    Output:\n    Each of the N lines of output should contain one real number: the velocity of a biker starting at the i-th-most segment from the top and finishing at the foot of the mountain.\n    """\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Input:\n    - One line containing a positive integer N (1 ≤ N ≤ 4), the number of line segments making up the mountain,\n    followed by a space and then a real number g (1 ≤ g ≤ 100), the coefficient of acceleration due to gravity.\n    - N more lines each containing two integers D_i and then θ_i (1 ≤ D ≤ 10^4; 1 ≤ θ ≤ 89): the sloped distance in\n    metres and absolute angle in degrees of this line segment from the vertical respectively.\n    The segments are ordered from the top of the hill to its bottom.\n    Output:\n    Each of the N lines of output should contain one real number: the velocity of a biker starting at the i-th-most\n    segment from the top and finishing at the foot of the mountain.\n    """\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Input:\n    - One line containing a positive integer N (1 <= N <= 4), the number of line segments making up the mountain, followed by a space and then a real number g (1 <= g <= 100), the coefficient of acceleration due to gravity.\n    - N more lines each containing two integers D_i and then θ_i (1 <= D <= 10^4; 1 <= θ <= 89): the sloped distance in metres and absolute angle in degrees of this line segment from the vertical respectively. The segments are ordered from the top of the hill to its bottom.\n    Output:\n    Each of the N lines of output should contain one real number: the velocity of a biker starting at the i-th-most segment from the top and finishing at the foot of the mountain.\n    """\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 07:45:01.158968 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Input:\n    - One line containing a positive integer N (1 <= N <= 4), the number of line segments making up the mountain, followed by a space and then a real number g (1 <= g <= 100), the coefficient of acceleration due to gravity. \n    - N more lines each containing two integers D_i and then theta_i (1 <= D <= 10^4; 1 <= theta <= 89): the sloped distance in metres and absolute angle in degrees of this line segment from the vertical respectively. The segments are ordered from the top of the hill to its bottom.\n    Output:\n    Each of the N lines of output should contain one real number: the velocity of a biker starting at the i^th-most segment from the top and finishing at the foot of the mountain.\n    \"\"\"\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Input:\n    - One line containing a positive integer N (1 <= N <= 4), the number of line segments making up the mountain, followed by a space and then a real number g (1 <= g <= 100), the coefficient of acceleration due to gravity. \n    - N more lines each containing two integers D_i and then theta_i (1 <= D <= 10^4; 1 <= theta <= 89): the sloped distance in metres and absolute angle in degrees of this line segment from the vertical respectively. The segments are ordered from the top of the hill to its bottom.\n    Output:\n    Each of the N lines of output should contain one real number: the velocity of a biker starting at the i-th-most segment from the top and finishing at the foot of the mountain.\n    \"\"\"\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    \"\"\"\n    Input:\n    - One line containing a positive integer N (1 \u2264 N \u2264 4), the number of line segments making up the mountain, followed by a space and then a real number g (1 \u2264 g \u2264 100), the coefficient of acceleration due to gravity. \n    - N more lines each containing two integers D_i and then \u03b8_i (1 \u2264 D \u2264 10^4; 1 \u2264 \u03b8 \u2264 89): the sloped distance in metres and absolute angle in degrees of this line segment from the vertical respectively. The segments are ordered from the top of the hill to its bottom.\n    Output:\n    Each of the N lines of output should contain one real number: the velocity of a biker starting at the i-th-most segment from the top and finishing at the foot of the mountain.\n    \"\"\"\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649835893,
  "object": "edit"
}
2022-04-13 07:45:01.159141 fix syntax errors 3 ['\n\ndef main():\n    """\n    Input:\n    - One line containing a positive integer N (1 <= N <= 4), the number of line segments making up the mountain, followed by a space and then a real number g (1 <= g <= 100), the coefficient of acceleration due to gravity. \n    - N more lines each containing two integers D_i and then theta_i (1 <= D <= 10^4; 1 <= theta <= 89): the sloped distance in metres and absolute angle in degrees of this line segment from the vertical respectively. The segments are ordered from the top of the hill to its bottom.\n    Output:\n    Each of the N lines of output should contain one real number: the velocity of a biker starting at the i^th-most segment from the top and finishing at the foot of the mountain.\n    """\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Input:\n    - One line containing a positive integer N (1 <= N <= 4), the number of line segments making up the mountain, followed by a space and then a real number g (1 <= g <= 100), the coefficient of acceleration due to gravity. \n    - N more lines each containing two integers D_i and then theta_i (1 <= D <= 10^4; 1 <= theta <= 89): the sloped distance in metres and absolute angle in degrees of this line segment from the vertical respectively. The segments are ordered from the top of the hill to its bottom.\n    Output:\n    Each of the N lines of output should contain one real number: the velocity of a biker starting at the i-th-most segment from the top and finishing at the foot of the mountain.\n    """\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Input:\n    - One line containing a positive integer N (1 ≤ N ≤ 4), the number of line segments making up the mountain, followed by a space and then a real number g (1 ≤ g ≤ 100), the coefficient of acceleration due to gravity. \n    - N more lines each containing two integers D_i and then θ_i (1 ≤ D ≤ 10^4; 1 ≤ θ ≤ 89): the sloped distance in metres and absolute angle in degrees of this line segment from the vertical respectively. The segments are ordered from the top of the hill to its bottom.\n    Output:\n    Each of the N lines of output should contain one real number: the velocity of a biker starting at the i-th-most segment from the top and finishing at the foot of the mountain.\n    """\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 07:45:01.159212 size on output set 7
