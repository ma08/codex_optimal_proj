["import math\n\ndef main():\n    input_line = input()\n    input_line = input_line.split()\n    num_seg = int(input_line[0])\n    g = float(input_line[1])\n    seg_lengths = []\n    seg_angles = []\n    for i in range(num_seg):\n        input_line = input()\n        input_line = input_line.split()\n        seg_lengths.append(float(input_line[0]))\n        seg_angles.append(float(input_line[1]))\n\n    for i in range(num_seg):\n        v = 0\n        for j in range(i, num_seg):\n            v += math.sqrt(2*g*seg_lengths[j]/math.cos(math.radians(seg_angles[j])))\n        v /= 100\n        print(v)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport math\n\ndef main():\n    input_line = input()\n    while input_line:\n        input_line = input_line.split()\n        num_seg = int(input_line[0])\n        g = float(input_line[1])*1.0\n        seg_lengths = []\n        seg_angles = []\n        for i in range(num_seg):\n            input_line = input()\n            input_line = input_line.split()\n            seg_lengths.append(int(input_line[0]))\n            seg_angles.append(int(input_line[1]))\n\n        for i in range(num_seg):\n            v = 0\n            for j in range(i, num_seg):\n                v += math.sqrt(2*g*seg_lengths[j]/math.cos(math.radians(seg_angles[j])))\n            print(v)\n        input_line = input()\n\nif __name__ == \"__main__\":\n    main()\n", "from math import sqrt, cos, pi\n\nimport sys\n\n\ndef solve(segments, g):\n    speeds = []\n    for i in range(len(segments)):\n        s = segments[i]\n        if i == 0:\n            speeds.append(sqrt(2 * g * s[0]))\n        else:\n            speeds.append(sqrt(speeds[i - 1] ** 2 + 2 * g * s[0] * (1 - cos(s[1] * pi / 180.0))))\n    return speeds\n\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        n, g = map(float, line.split())\n        segments = []\n        for line in sys.stdin:\n            segments.append(map(float, line.split()))\n            if len(segments) == n:\n                break\n        print('\\n'.join(map(str, solve(segments, g))))\n", "import sys\nimport math\n\ndef main():\n    # Read lines from stdin\n    lines = [line.strip() for line in sys.stdin]\n\n    # Parse the first line\n    N, g = map(float, lines[0].split())\n\n    # Parse the remaining lines\n    dist, angle = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(int, lines[i].split())\n        dist.append(D)\n        angle.append(angle)\n\n    # Calculate velocity for each segment\n    for i in range(int(N)):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(angle[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n", "import math\n\n\ndef main():\n    num_segments, gravity = map(float, input().split())\n    segment_data = []\n    for _ in range(int(num_segments)):\n        segment_data.append(list(map(float, input().split())))\n    segment_data.reverse()\n    speeds = []\n    segment_data[0].append(0)\n    for i in range(1, int(num_segments)):\n        segment_data[i].append(segment_data[i-1][2] + (segment_data[i-1][0] * math.tan(math.radians(segment_data[i-1][1]))))\n    for segment in segment_data:\n        speeds.append(math.sqrt(2 * gravity * segment[2]))\n    speeds.reverse()\n    for speed in speeds:\n        print(speed)\n\nmain()\n", "\nimport math\nimport sys\nfrom math import sqrt\n\n\ndef solve(segments, g):\n    speeds = []\n    for i in range(len(segments)):\n        s = segments[i]\n        if i == 0:\n            speeds.append(sqrt(2 * g * s[0]))\n        else:\n            speeds.append(sqrt(speeds[i - 1] ** 2 + 2 * g * s[0] * (1 - math.cos(s[1] * math.pi / 180))))\n    return speeds\n\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        n, g = map(float, line.split())\n        segments = []\n        for line in sys.stdin:\n            segments.append(map(float, line.split()))\n            if len(segments) == n:\n                break\n        print('\\n'.join(map(str, solve(segments, g))))\n", "\nimport math\ndef get_velocity(dist, angle, gravity):\n    \"\"\"\n    Returns the velocity of an object with a given starting angle, distance,\n    and gravitational acceleration.\n\n    :param dist: The distance of the slope.\n    :param angle: The angle of the slope.\n    :param gravity: The gravitational acceleration.\n    :return: The velocity of the object.\n    \"\"\"\n\n    # Velocity is the square root of the acceleration times the distance of the slope times the sine of the angle\n    velocity = math.sqrt(gravity * dist * math.sin(math.radians(angle)))\n\n    return velocity\n\ndef main():\n\n    # Get the number of segments and the gravitational acceleration.\n    num_segments, gravity = [float(x) for x in input().split()]\n\n    # Create a list to store the velocities.\n    velocities = []\n\n    # Get the distance and angle for each segment.\n    for i in range(int(num_segments)):\n\n        # Get the distance and angle.\n        dist, angle = [int(x) for x in input().split()]\n\n        # Get the velocity and add it to the list.\n        velocities.append(get_velocity(dist, angle, gravity))\n\n    # Print the velocities.\n    for velocity in velocities:\n        print(velocity)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    # Read lines from stdin\n    lines = [line.strip() for line in sys.stdin]\n\n    # Parse the first line\n    N, g = map(int, lines[0].split())\n\n    # Parse the remaining lines\n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(int, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment.\n    for i in range(int(N)):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Input:\n    - One line containing a positive integer N (1 \u2264 N \u2264 4), the number of line segments making up the mountain, followed by a space and then a real number g (1 \u2264 g \u2264 100), the coefficient of acceleration due to gravity. \n    - N more lines each containing two integers D_i and then \u03b8_i (1 \u2264 D \u2264 10^4; 1 \u2264 \u03b8 \u2264 89): the sloped distance in metres and absolute angle in degrees of this line segment from the vertical respectively. The segments are ordered from the top of the hill to its bottom.\n    Output:\n    Each of the N lines of output should contain one real number: the velocity of a biker starting at the i-th-most segment from the top and finishing at the foot of the mountain.\n    \"\"\"\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    line = sys.stdin.readline()\n    N, g = map(int, line.split())\n\n    for i in range(int(N)):\n        line = sys.stdin.readline()\n        D, theta = map(float, line.split())\n        if i == 0:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)))\n            print(\"%.2f\" % v)\n        else:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)) + v ** 2)\n            print(\"%.2f\" % v)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport math\n\ndef main():\n\tinput_line = input()\n\tinput_line = input_line.split()\n\tnum_segs = int(input_line[0])\n\tg = float(input_line[1])\n\tseg_lengths = []\n\tseg_angles = []\n\tfor i in range(num_segs):\n\t\tinput_line = input()\n\t\tinput_line = input_line.split()\n\t\tseg_lengths.append(int(input_line[0]))\n\t\tseg_angles.append(int(input_line[1]))\n\n\tfor i in range(num_segs):\n\t\tv = 0\n\t\tfor j in range(i, num_segs):\n\t\t\tv += math.sqrt(2*g*seg_lengths[j]/math.cos(math.radians(seg_angles[j])))\n\t\tprint(v)\n\nif __name__ == \"__main__\":\n\tmain()\n", "\n\n# g: gravity\n# D: distance\n# theta: angle\n\nimport sys\nimport math\n\ndef main():\n    line = sys.stdin.readline()\n    N, g = map(int, line.split())\n\n    for i in range(int(N)):\n        line = sys.stdin.readline()\n        D, theta = map(float, line.split())\n        if i == 0:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)))\n            print(\"%.1f\" % v)\n        else:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)) + v ** 2)\n            print(\"%.1f\" % v)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nfrom math import sin, cos, radians\n\nnumber_of_inputs, gravity = map(float, input().split())\n\n\ndef get_velocity(distance, theta):\n    g_theta = gravity * cos(radians(theta))\n    return ((2 * distance * g_theta) / gravity) ** 0.5\n\nfor i in range(int(number_of_inputs)):\n    distance, theta = map(int, input().split())\n    print(get_velocity(distance, theta))\n", "\n\ndef main():\n    \"\"\"\n    Input:\n    - One line containing a positive integer N (1 <= N <= 4), the number of line segments making up the mountain, followed by a space and then a real number g (1 <= g <= 100), the coefficient of acceleration due to gravity. \n    - N more lines each containing two integers D_i and then theta_i (1 <= D <= 10^4; 1 <= theta <= 89): the sloped distance in metres and absolute angle in degrees of this line segment from the vertical respectively. The segments are ordered from the top of the hill to its bottom.\n    Output:\n    Each of the N lines of output should contain one real number: the velocity of a biker starting at the i^th-most segment from the top and finishing at the foot of the mountain.\n    \"\"\"\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nfrom math import sin, cos, radians\n\nnumber_of_inputs, gravity = map(float, input().split())\n\ndef get_velocity(distance, theta):\n    g_theta = gravity * cos(radians(theta))\n    return ((2 * distance * g_theta) / gravity) ** 0.5\n\nfor i in range(int(number_of_inputs)):\n    distance, theta = map(float, input().split())\n    print(get_velocity(distance, theta))\n", "\nimport math\nimport math\n\ndef get_velocity(distance, angle, gravity):\n    \"\"\"\n    Returns the velocity of an object with a given starting angle, distance,\n    and gravitational acceleration.\n\n    :param distance: The distance of the slope.\n    :param angle: The angle of the slope.\n    :param gravity: The gravitational acceleration.\n    :return: The velocity of the object.\n    \"\"\"\n\n    # Velocity is the square root of the acceleration times the distance of the slope times the sine of the angle.\n    velocity = math.sqrt(gravity * distance * math.sin(math.radians(angle)))\n    print(distance,angle,gravity)\n    return velocity\n    print(velocity)\ndef main():\n\n    # Get the number of segments and the gravitational acceleration.\n    num_segments, gravity = [int(x) for x in input().split()]\n    print(num_segments, gravity)\n\n    # Create a list to store the velocities.\n    velocities = []\n\n    # Get the distance and angle for each segment\n    for i in range(int(num_segments)):\n\n        # Get the distance and angle.\n        distance, angle = [int(x) for x in input().split()]\n\n        # Get the velocity and add it to the list.\n        velocities.append(get_velocity(distance, angle, gravity))\n\n    # Print the velocities.\n    for velocity in velocities:\n        print(int(velocity))\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\ndef main():\n    input_line = input()\n    input_line = input_line.split()\n    num_seg = int(input_line[0])\n    g = float(input_line[1]) * 1.0\n    seg_lengths = []\n    seg_angles = []\n    for i in range(num_seg):\n        input_line = input()\n        input_line = input_line.split()\n        seg_lengths.append(int(input_line[0]))\n        seg_angles.append(int(input_line[1]))\n\n    for i in range(num_seg):\n        v = 0\n        for j in range(i, num_seg):\n            v += math.sqrt(2 * g * seg_lengths[j] / math.cos(math.radians(seg_angles[j])))\n        print(v)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    num_segments, gravity = map(int, input().split())\n    segment_data = []\n    for _ in range(num_segments):\n        segment_data.append(list(map(float, input().split())))\n    segment_data.reverse()\n    speeds = []\n    segment_data[0].append(0)\n    for i in range(1, num_segments):\n        segment_data[i].append(segment_data[i-1][2] + (segment_data[i-1][0] * math.tan(math.radians(segment_data[i-1][1])))) \n    for segment in segment_data:\n        speeds.append(math.sqrt(2 * gravity * segment[2]))\n    speeds.reverse()\n    for speed in speeds:\n        print(speed) \n\nmain()\n", "import sys\nimport math\n\ndef main():\n    # Read lines from stdin\n    lines = [line.strip() for line in sys.stdin]\n\n    # Parse the first line\n    N, g = map(int, lines[0].split())\n\n    # Parse the remaining lines\n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(int, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment\n    for i in range(N):\n        v = math.sqrt(2 * g * dist[i] / math.cos(math.radians(angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport math\n\ndef main():\n    # Read lines from stdin\n    lines = [line.strip() for line in sys.stdin]\n\n    # Parse the first line\n    N, g = map(int, lines[0].split())\n\n    # Parse the remaining lines\n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(int, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment\n    for i in range(N):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport math\n\ndef main():\n    input_line = input()\n    input_line = input_line.split()\n    num_seg = int(input_line[0])\n    g = float(input_line[1])\n    seg_lengths = []\n    seg_angles = []\n    for i in range(num_seg):\n        input_line = input()\n        input_line = input_line.split()\n        seg_lengths.append(int(input_line[0]))\n        seg_angles.append(int(input_line[1]))\n\n    for i in range(num_seg):\n        v = 0\n        for j in range(i, num_seg):\n            v += math.sqrt(2*g*seg_lengths[j]/math.cos(math.radians(seg_angles[j])))\n        print(v)\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\nimport math\n\ndef main():\n    input_line = sys.stdin.readline()\n    input_line = input_line.split()\n    num_segs = int(input_line[0])\n    g = float(input_line[1])\n    seg_lengths = []\n    seg_angles = []\n    for i in range(num_segs):\n        input_line = sys.stdin.readline()\n        input_line = input_line.split()\n        seg_lengths.append(int(input_line[0]))\n        seg_angles.append(int(input_line[1]))\n\n    for i in range(num_segs):\n        v = 0\n        for j in range(i, num_segs):\n            v += math.sqrt(2*g*seg_lengths[j]/math.cos(math.radians(seg_angles[j])))\n        print(v)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Input:\n    - One line containing a positive integer N (1 <= N <= 4), the number of line segments making up the mountain, followed by a space and then a real number g (1 <= g <= 100), the coefficient of acceleration due to gravity. \n    - N more lines each containing two integers D_i and then theta_i (1 <= D <= 10^4; 1 <= theta <= 89): the sloped distance in metres and absolute angle in degrees of this line segment from the vertical respectively. The segments are ordered from the top of the hill to its bottom.\n    Output:\n    Each of the N lines of output should contain one real number: the velocity of a biker starting at the i-th-most segment from the top and finishing at the foot of the mountain.\n    \"\"\"\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport math\n\ndef get_velocity(distance, angle, gravity):\n    \"\"\"\n    Returns the velocity of an object with a given starting angle, distance,\n    and gravitational acceleration.\n\n    :param distance: The distance of the slope.\n    :param angle: The angle of the slope.\n    :param gravity: The gravitational acceleration.\n    :return: The velocity of the object.\n    \"\"\"\n\n    # Velocity is the square root of the acceleration times the distance of the slope times the sine of the angle.\n    velocity = math.sqrt(gravity * distance * math.sin(math.radians(angle)))\n\n    return velocity\n\ndef main():\n\n    # Get the number of segments and the gravitational acceleration.\n    num_segments, gravity = [float(x) for x in input().split()]\n\n    # Create a list to store the velocities.\n    velocities = []\n\n    # Get the distance and angle for each segment\n    for i in range(int(num_segments)):\n\n        # Get the distance and angle.\n        distance, angle = [int(x) for x in input().split()]\n\n        # Get the velocity and add it to the list.\n        velocities.append(get_velocity(distance, angle, gravity))\n\n    # Print the velocities.\n    for velocity in velocities:\n        print(velocity)\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom math import cos, pi, sqrt\nimport sys\n\n\ndef solve(segments, g):\n    speeds = []\n    for i in range(len(segments)):\n        s = segments[i]\n        if i == 0:\n            speeds.append(sqrt(2 * g * s[0]))\n        else:\n            speeds.append(sqrt(speeds[i - 1] ** 2 +\n                               2 * g * s[0] * (1 - cos(s[1] * pi / 180))))\n    return speeds\n\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        n, g = map(float, line.split())\n        segments = []\n        for line in sys.stdin:\n            segments.append(map(float, line.split()))\n            if len(segments) == n:\n                break\n        print('\\n'.join(map(str, solve(segments, g))))\n", "\n\ndef main():\n    \"\"\"\n    Input:\n    - One line containing a positive integer N (1 <= N <= 4), the number of line segments making up the mountain,\n    followed by a space and then a real number g (1 <= g <= 100), the coefficient of acceleration due to gravity.\n    - N more lines each containing two integers D_ i and then theta _ i (1 <= D <= 10^4; 1 <= theta <= 89): the sloped\n    distance in metres and absolute angle in degrees of this line segment from the vertical respectively. The segments are\n    ordered from the top of the hill to its bottom.\n    Output:\n    Each of the N lines of output should contain one real number: the velocity of a biker starting at the i^th-most\n    segment from the top and finishing at the foot of the mountain.\n    \"\"\"\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Input:\n    - One line containing a positive integer N (1 <= N <= 4), the number of line segments making up the mountain, followed by a space and then a real number g (1 <= g <= 100), the coefficient of acceleration due to gravity.\n    - N more lines each containing two integers D_i and then \u03b8_i (1 <= D <= 10^4; 1 <= \u03b8 <= 89): the sloped distance in metres and absolute angle in degrees of this line segment from the vertical respectively. The segments are ordered from the top of the hill to its bottom.\n    Output:\n    Each of the N lines of output should contain one real number: the velocity of a biker starting at the i-th-most segment from the top and finishing at the foot of the mountain.\n    \"\"\"\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport math\n\ndef get_velocity(distance, angle, gravity):\n    \"\"\"\n    Returns the velocity of an object with a given starting angle, distance,\n    and gravitational acceleration.\n\n    :param dist: The distance of the slope.\n    :param angle: The angle of the slope.\n    :param gravity: The gravitational acceleration.\n    :return: The velocity of the object.\n    \"\"\"\n\n    # Velocity is the square root of the acceleration times the distance of the slope times the sine of the angle.\n    velocity = math.sqrt(gravity * dist * math.sin(math.radians(angle)))\n\n    return velocity\n\ndef main():\n\n    # Get the number of segments and the gravitational acceleration.\n    num_segments, gravity = [float(x) for x in input().split()]\n\n        print(distance, angle)\n    # Create a list to store the velocities.\n    velocities = [0]\n\n    # Get the distance and angle for each segment.\n    for i in range(int(num_segments)):\n\n        # Get the distance and angle.\n        distance, angle = [int(x) for x in input().split()]\n\n        # Get the velocity and add it to the list.\n        velocities.append(get_velocity(dist, angle, gravity))\n\n    # Print the velocities.\n    for velocity in velocities:\n        print(velocity)\n\nif __name__ == '__main__':\n    main()\n", "import math\n\ndef get_velocity(dist, angle, gravity):\n    \"\"\"\n    Returns the velocity of an object with a given starting angle, distance,\n    and gravitational acceleration.\n\n    :param dist: The distance of the slope.\n    :param angle: The angle of the slope.\n    :param gravity: The gravitational acceleration.\n    :return: The velocity of the object.\n    \"\"\"\n\n    # Velocity is the square root of the acceleration times the distance of the slope times the sine of the angle\n    velocity = math.sqrt(gravity * dist * math.sin(math.radians(angle)))\n\n    return velocity\n\ndef main():\n\n    # Get the number of segments and the gravitational acceleration.\n    num_segments, gravity = [float(x) for x in input().split()]\n\n    # Create a list to store the velocities.\n    velocities = []\n\n    # Get the distance and angle for each segment.\n    for i in range(int(num_segments)):\n\n        # Get the distance and angle.\n        dist, angle = [int(x) for x in input().split()]\n\n        # Get the velocity and add it to the list.\n        velocities.append(get_velocity(dist, angle, gravity))\n\n    # Print the velocities.\n    for velocity in velocities:\n        print(velocity)\n\nif __name__ == '__main__':\n    main()\n", "\n# import math\nimport math\n\ndef get_velocity(distance, angle, gravity):\n    \"\"\"\n    Returns the velocity of an object with a given starting angle, distance,\n    and gravitational acceleration.\n\n    :param distance: The distance of the slope.\n    :param angle: The angle of the slope.\n    :param gravity: The gravitational acceleration.\n    :return: The velocity of the object.\n    \"\"\"\n\n    # Velocity is the square root of the acceleration times the distance of the slope times the sine of the angle.\n    velocity = math.sqrt(gravity * distance * math.sin(math.radians(angle)))\n\n    return velocity\n\ndef main():\n\n    # Get the number of segments and the gravitational acceleration.\n    num_segments, gravity = [float(x) for x in input().split()]\n\n    # Create a list to store the velocities.\n    velocities = []\n\n    # Get the distance and angle for each segment\n    for i in range(int(num_segments)):\n\n        # Get the distance and angle.\n        distance, angle = [int(x) for x in input().split()]\n\n        # Get the velocity and add it to the list.\n        velocities.append(get_velocity(distance, angle, gravity))\n\n    # Print the velocities.\n    for velocity in velocities:\n        print(velocity)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport math\n\ndef main():\n    input_line = input()\n    input_line = input_line.split()\n    num_seg = int(input_line[0])\n    g = float(input_line[1])\n    seg_lengths = []\n    seg_angles = []\n    for i in range(num_seg):\n        input_line = input()\n        input_line = input_line.split()\n        seg_lengths.append(float(input_line[0]))\n        seg_angles.append(float(input_line[1]))\n\n    for i in range(num_seg):\n        v = 0\n        for j in range(i, num_seg):\n            v += math.sqrt(2*g*seg_lengths[j]/math.cos(math.radians(seg_angles[j])))\n        v /= 100\n        print(v)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nfrom math import sin, cos, radians\n\nN, g = list(map(float, sys.stdin.readline().split()))\n\ndef get_velocity(D, theta):\n    g_theta = g * cos(radians(theta))\n    return ((2 * D * g_theta) / g) ** 0.5\n\nfor i in range(int(N)):\n    D, theta = list(map(float, sys.stdin.readline().split()))\n    print(get_velocity(D, theta))\n", "\n\nimport math\n\ndef get_velocity(distance, angle, gravity):\n    \"\"\"\n    Returns the velocity of an object with a given starting angle, distance,\n    and gravitational acceleration.\n\n    :param distance: The distance of the slope.\n    :param angle: The angle of the slope.\n    :param gravity: The gravitational acceleration.\n    :return: The velocity of the object.\n    \"\"\"\n\n    # Velocity is the square root of the acceleration times the distance of the slope times the sine of the angle.\n    velocity = math.sqrt(gravity * distance * math.sin(math.radians(angle)))\n\n    return velocity\n\ndef main():\n\n    # Get the number of segments and the gravitational acceleration.\n    num_segments, gravity = [float(x) for x in input().split()]\n\n    # Create a list to store the velocities.\n    velocities = [0]\n\n    # Get the distance and angle for each segment.\n    for i in range(int(num_segments)):\n\n        # Get the distance and angle.\n        distance, angle = [int(x) for x in input().split()]\n\n        # Get the velocity and add it to the list.\n        velocities.append(get_velocity(distance, angle, gravity))\n\n    # Print the velocities.\n    for velocity in velocities:\n        print(velocity)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Input:\n    - One line containing a positive integer N (1 <= N <= 4), the number of line segments making up the mountain, followed by a space and then a real number g (1 <= g <= 100), the coefficient of acceleration due to gravity\n    - N more lines each containing two integers D_ i and then theta _ i (1 <= D <= 10^4; 1 <= theta <= 89): the sloped distance in metres and absolute angle in degrees of this line segment from the vertical respectively. The segments are ordered from the top of the hill to its bottom\n    Output:\n    Each of the N lines of output should contain one real number: the velocity of a biker starting at the i^th-most segment from the top and finishing at the foot of the mountain\n    \"\"\"\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Input:\n    - One line containing a positive integer N (1 \u2264 N \u2264 4), the number of line segments making up the mountain,\n    followed by a space and then a real number g (1 \u2264 g \u2264 100), the coefficient of acceleration due to gravity.\n    - N more lines each containing two integers D_i and then \u03b8_i (1 \u2264 D \u2264 10^4; 1 \u2264 \u03b8 \u2264 89): the sloped distance in\n    metres and absolute angle in degrees of this line segment from the vertical respectively.\n    The segments are ordered from the top of the hill to its bottom.\n    Output:\n    Each of the N lines of output should contain one real number: the velocity of a biker starting at the i-th-most\n    segment from the top and finishing at the foot of the mountain.\n    \"\"\"\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == \"__main__\":\n    main()\n", "import math\n\ndef main():\n    num_segments, gravity = map(float, input().split())\n    segment_data = []\n    for _ in range(int(num_segments)):\n        segment_data.append(list(map(float, input().split())))\n    segment_data.reverse()\n    speeds = []\n    segment_data[0].append(0)\n    for i in range(1, int(num_segments)):\n        segment_data[i].append(segment_data[i-1][2] + (segment_data[i-1][0] * math.tan(math.radians(segment_data[i-1][1]))))\n    for segment in segment_data:\n        speeds.append(math.sqrt(2 * gravity * segment[2]))\n    speeds.reverse()\n    for speed in speeds:\n        print(speed)\n\nmain()\n", "\nimport sys\nimport math\n\ndef main():\n    lines = [line.strip() for line in open('input.txt')]\n\n    # Parse the first line\n    N, g = map(float, lines[0].split())\n\n    # Parse the remaining lines\n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(int, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment.\n    for i in range(int(N)):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\ndef main():\n    input_line = input()\n    input_line = input_line.split()\n    num_seg = int(input_line[0])\n    g = float(input_line[1])\n    seg_lengths = []\n    seg_angles = []\n    for i in range(num_seg):\n        input_line = input()\n        input_line = input_line.split()\n        seg_lengths.append(float(input_line[0]))\n        seg_angles.append(float(input_line[1]))\n\n    for i in range(num_seg):\n        v = 0\n        for j in range(i, num_seg):\n            v += math.sqrt(2 * g * seg_lengths[j] / math.cos(math.radians(seg_angles[j]))) / 100\n        print(v)\n\nif __name__ == \"__main__\":\n    main()\n", "\nfrom math import sin, cos, radians\n\nN, g = map(float, input().split()) # N is no. of test cases, g is acceleration due to gravity\n# function to calculate velocity\n\ndef get_velocity(D, theta):\n    g_theta = g * cos(radians(theta))\n    return ((2 * D * g_theta) / g) ** 0.5\n\nfor i in range(int(N)):\n    D, theta = map(float, input().split())\n    print(get_velocity(D, theta))\n", "\n\nfrom math import sin, cos, radians\n\nnumber_of_inputs, gravity = map(float, input().split())\n\ndef get_velocity(distance, theta):\n    g_theta = gravity * cos(radians(theta))\n    return ((2 * distance * g_theta) / gravity) ** 0.5\n\nfor i in range(int(number_of_inputs)):\n    distance, theta = map(int, input().split())\n    print(get_velocity(distance, theta))\n", "\n\nimport sys\nimport math\n\ndef main():\n    # Read lines from stdin\n    lines = [line.strip() for line in sys.stdin]\n\n    # Parse first line\n    N, g = map(float, lines[0].split())\n\n    # Parse remaining lines\n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(int, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment\n    for i in range(int(N)):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport math\ndef get_velocity(dist, angle, gravity):\n    \"\"\"\n    Returns the velocity of an object with a given starting angle, distance,\n    and gravitational acceleration.\n\n    :param dist: The distance of the slope.\n    :param angle: The angle of the slope.\n    :param gravity: The gravitational acceleration.\n    :return: The velocity of the object.\n    \"\"\"\n\n    # Velocity is the square root of the acceleration times the distance of the slope times the sine of the angle\n    velocity = math.sqrt(gravity * dist * math.sin(math.radians(angle)))\n\n    return velocity\n\ndef main():\n\n    # Get the number of segments and the gravitational acceleration.\n    num_segments, gravity = [float(x) for x in input().split()]\n\n    # Create a list to store the velocities.\n    velocities = []\n\n    # Get the distance and angle for each segment.\n    for i in range(int(num_segments)):\n\n        # Get the distance and angle.\n        dist, angle = [int(x) for x in input().split()]\n\n        # Get the velocity and add it to the list.\n        velocities.append(get_velocity(dist, angle, gravity))\n\n    # Print the velocities.\n    for velocity in velocities:\n        print(velocity)\n\nif __name__ == '__main__':\n    main()\n", "import math\n\ninput_line = input()\ninput_line = input_line.split()\nnum_segs = int(input_line[0])\ng = float(input_line[1])\nseg_lengths = []\nseg_angles = []\nfor i in range(num_segs):\n    input_line = input()\n    input_line = input_line.split()\n    seg_lengths.append(int(input_line[0]))\n    seg_angles.append(int(input_line[1]))\n\nfor i in range(num_segs):\n    v = 0\n    for j in range(i, num_segs):\n        v += math.sqrt(2*g*seg_lengths[j]/math.cos(math.radians(seg_angles[j])))\n    print(v)\n", "\nfrom math import sin, cos, radians\n\nN, g = map(float, input().split())\n\ndef get_velocity(D, theta):\n    g_theta = g * cos(radians(theta))\n    return ((2 * D * g_theta) / g) ** 0.5\n\nfor i in range(int(N)):\n    D, theta = map(float, input().split())\n    print(get_velocity(D, theta))\n", "\nimport sys\nimport math\n\n# Read lines from stdin\nlines = [line.strip() for line in sys.stdin]\n\n# Parse first line\nN, g = map(float, lines[0].split())\n\n    # Parse remaining lines \n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(int, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment\n    for i in range(int(N)):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\nimport math\n\ndef main():\n    # Read lines from stdin\n    lines = [line.strip() for line in sys.stdin]\n\n    # Parse the first line\n    N, g = map(int, lines[0].split())\n\n    # Parse the remaining lines\n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(float, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment.\n    for i in range(int(N)):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(90-angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n", "\n\n# g: gravity\n# D: distance\n# theta: angle\n\nimport sys\nimport math\n\ndef main():\n    line = sys.stdin.readline()\n    N, g = map(int, line.split())\n\n    for i in range(int(N)):\n        line = sys.stdin.readline()\n        D, theta = map(float, line.split())\n        if i == 0:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)))\n            print(\"%.2f\" % v)\n        else:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)) + v ** 2)\n            print(\"%.2f\" % v)\n\nif __name__ == \"__main__\":\n    main()\n"]