["\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    # Read in the input\n    input_lines = []\n    while True:\n        line = input()\n        if line == '-1':\n            break\n        input_lines.append(line)\n\n    # Split the input into a list of lists\n    input_list = [line.split() for line in input_lines]\n\n    # Create a dictionary to hold the problem and the time\n    problem_dict = {}\n    for entry in input_list:\n        problem_dict[entry[1]] = int(entry[0])\n\n    # Create a dictionary to hold the problem and the number of attempts\n    attempts_dict = {}\n    for entry in input_list:\n        if entry[1] not in attempts_dict.keys():\n            attempts_dict[entry[1]] = 0\n        attempts_dict[entry[1]] += 1\n\n    # Create a dictionary to hold the problem and the number of right/wrong\n    right_wrong_dict = {}\n    for entry in input_list:\n        if entry[1] not in right_wrong_dict.keys():\n            right_wrong_dict[entry[1]] = 0\n        if entry[2] == 'right':\n            right_wrong_dict[entry[1]] += 1\n        else:\n            right_wrong_dict[entry[1]] -= 1\n\n    # Create a dictionary to hold the problem and the penalty\n    penalty_dict = {}\n    for key, value in right_wrong_dict.items():\n        if value > 0:\n            penalty_dict[key] = (attempts_dict[key] - 1) * 20\n        else:\n\n            penalty_dict[key] = 0\n\n    # Create a dictionary to hold the problem and the time with penalities\n    time_penalty_dict = {}\n    for key, value in problem_dict.items():\n        time_penalty_dict[key] = value + penalty_dict[key]\n\n    # Create a list of all of the problems that were solved\n    solved_list = []\n    for key, value in right_wrong_dict.items():\n        if value > 0:\n            solved_list.append(key)\n\n    # Calculate the number of problems solved and the total time measure\n    number_of_problems_solved = len(solved_list)\n    total_time_measure = sum([time_penalty_dict[problem] for problem in solved_list])\n\n    # Output the results\n    print(number_of_problems_solved, total_time_measure)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    times = dict()\n    problems = dict()\n    while True:\n        line = sys.stdin.readline()\n        if line == \"-1\\n\":\n            break\n        time, problem, result = line.split()\n        time = int(time)\n        if problem in problems:\n            if result == \"right\":\n                times[problem] = time\n                problems[problem] = True\n        else:\n            times[problem] = time\n            problems[problem] = result == \"right\"\n    solved = 0\n    time = 0\n    for problem, solved_problem in problems.items():\n        if solved_problem:\n            time += times[problem]\n            solved += 1\n        else:\n            time += 20\n    print(solved, time)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\nif __name__ == '__main__':\n    # Read in the input\n    input = sys.stdin.readlines()\n\n    # Parse the input\n    log = []\n    for line in input:\n        if line == \"-1\\n\":\n            break\n        log.append(line.split())\n\n    # Create a dictionary of the problems and the number of times they were solved\n    problems = {}\n    for entry in log:\n        problems[entry[1]] = 0\n\n# Create a dictionary of the problems and the number of times they were attempted\nattempts = {}\nfor entry in log:\n    attempts[entry[1]] = 0\n\n# Create a dictionary of the problems and the time it took to solve them\ntimes = {}\nfor entry in log:\n    times[entry[1]] = 0\n\n# Loop through the log and find out how many problems were solved and how many attempts it took to solve them\nfor entry in log:\n    if entry[2] == \"right\":\n        problems[entry[1]] += 1\n        attempts[entry[1]] += 1\n        times[entry[1]] = int(entry[0])\n    else:\n        attempts[entry[1]] += 1\n\n# Count the number of problems solved\nsolved = 0\nfor problem in problems:\n    if problems[problem] == 1:\n        solved += 1\n\n# Calculate the time score\ntimeScore = 0\nfor problem in problems:\n    if problems[problem] == 1:\n        timeScore += times[problem]\n    else:\n        timeScore += (attempts[problem] - 1) * 20\n\n# Print the results\nprint(solved, timeScore)\n", "import sys\n\n\ndef main():\n    \"\"\"\n    Main function that reads in input and outputs the solution\n    \"\"\"\n    problems = dict()\n    current_time = int()\n    for line in sys.stdin:\n        if line.strip() == '-1':\n            break\n        time, problem, result = line.strip().split()\n        time = int(time)\n        current_time = time\n        if problem not in problems:\n            problems[problem] = {'solved': bool(), 'penalty': int(), 'last_submit': current_time}\n        if result == 'right':\n            problems[problem]['solved'] = True\n            problems[problem]['last_submit'] = current_time\n        else:\n            problems[problem]['penalty'] += 20\n    solved = sum([1 if problem['solved'] else 0 for problem in problems.values()])\n    penalty = sum([problem['penalty'] for problem in problems.values()])\n    submit_time = sum([problem['last_submit'] for problem in problems.values() if problem['solved']])\n    print(solved, submit_time + penalty)\n\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    times = dict()\n    problems = dict()\n    while True:\n        line = sys.stdin.readline()\n        if line == \"-1\\n\":\n            break\n        time, problem, result = line.split()\n        time = int(time)\n        if problem in problems:\n            if result == \"right\":\n                times[problem] = time\n                problems[problem] = True\n        else:\n            times[problem] = time\n            problems[problem] = result == \"right\"\n    solved = 0\n    time = 0\n    for problem, solved_problem in problems.items():\n        if solved_problem:\n            time += times[problem]\n            solved += 1\n        else:\n            time += 20\n    print(solved, time)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    times = dict()\n    problems = dict()\n    while True:\n        line = sys.stdin.readline()\n        if line == \"-1\\n\":\n            break\n        time, problem, result = line.split()\n        time = int(time)\n        if problem in problems:\n            if result == \"right\":\n                times[problem] = time\n                problems[problem] = True\n        elif result == \"right\":\n            times[problem] = time\n            problems[problem] = True\n    solved = 0\n    time = 0\n    for problem, solved_ in problems.items():\n        if solved_:\n            time += times[problem]\n            solved += 1\n        else:\n            time += 20\n    print(solved, time)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    times = dict()\n    problems = dict()\n    while True:\n        line = sys.stdin.readline()\n        if line == \"-1\\n\":\n            break\n        time, problem, result = line.split()\n        time = int(time)\n        if problem in problems:\n            if result == \"right\":\n                times[problem] = time\n                problems[problem] = True\n        else:\n            times[problem] = time\n            problems[problem] = result == \"right\"\n    num_solved = 0\n    time = 0\n    for problem, solved in problems.items():\n        if solved:\n            time += times[problem]\n            num_solved += 1\n        else:\n            time += 20\n    print(num_solved, time)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\n# Read in the input\ninput = sys.stdin.readlines()\n\n# Parse the input\nlog = []\nfor line in input:\n    if line == \"-1\\n\":\n        break\n    log.append(line.split())\n\n# Create a dictionary of the problems and the number of times it were solved\nproblems = {}\nfor entry in log:\n    problems[entry[1]] = 0\n\n# Create a dictionary of the problems and the number of times it were attempted\nattempts = {}\nfor entry in log:\n    attempts[entry[1]] = 0\n\n# Create a dictionary of the problems and the time it takes to solve them\ntimes = {}\nfor entry in log:\n    times[entry[1]] = 0\n\n# Loop through the log and find out how many problems were solved\n# and how many attempts it took to solve them\nfor entry in log:\n    if entry[2] == \"right\":\n        problems[entry[1]] += 1\n        attempts[entry[1]] += 1\n        times[entry[1]] = int(entry[0])\n    else:\n        attempts[entry[1]] += 1\n\n# Count the number of problems solved\nsolved = 0\nfor problem in problems:\n    if problems[problem] == 1:\n        solved += 1\n\n# Calculate the time score\ntimeScore = 0\nfor problem in problems:\n    if problems[problem] == 1:\n        timeScore += times[problem]\n    else:\n        timeScore += (attempts[problem] - 1) * 20\n\n# Print the results\nprint(solved, timeScore)\n", "\ndef main():\n    \"\"\"\n    Main program.\n    \"\"\"\n    # Initialise the submission log and the number of problems solved.\n    submission_log = []\n    problems_solved = 0\n    # Read in the submission log.\n    while True:\n        submission = input()\n        if submission == \"-1\":\n            break\n        submission_log.append(submission.split())\n    # Initialise the time score.\n    time_score = 0\n    # Process the submission log.\n    for i in range(len(submission_log)):\n        # If the submission is correct, add the time to the time score.\n        if submission_log[i][2] == \"right\" and submission_log[i][1] not in [submission_log[j][1] for j in range(i) if submission_log[j][2] == \"right\"]:\n            time_score += int(submission_log[i][0])\n            problems_solved += 1\n        # If the submission is wrong, check if the problem was solved.\n        else:\n            # If the problem was solved, add the penalty to the time score.\n            if submission_log[i][1] in [submission_log[j][1] for j in range(i) if submission_log[j][2] == \"right\"]:\n                time_score += 20\n    # Print the number of problems solved and the time score\n    print(problems_solved, time_score)\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\n\ndef main():\n    problems = {}\n    current_time = 0\n    for line in sys.stdin:\n        if line.strip() == '-1':\n            break\n        time, problem, result = line.strip().split()\n        time = int(time)\n        current_time = time\n        if problem not in problems:\n            problems[problem] = {'solved': False, 'penalty': 0, 'last_submit': current_time}\n        if result == 'right':\n            problems[problem]['solved'] = True\n            problems[problem]['last_submit'] = current_time\n        else:\n            problems[problem]['penalty'] += 20\n    solved = sum([1 if problem['solved'] is True else 0 for problem in problems.values()])\n    penalty = sum([problem['penalty'] for problem in problems.values()])\n    submit_time = sum([problem['last_submit'] for problem in problems.values() if problem['solved']])\n    print(solved, submit_time + penalty)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main program.\n    \"\"\"\n    # Initialize the submission log, the number of problems solved, and the time score.\n    submission_log, time_score = [], 0\n    problems_solved = 0\n    # Read in the submission log.\n    while True:\n        submission = input()\n        if submission == \"-1\":\n            break\n        submission_log.append(submission.split())\n    # Process the submission log.\n    for i in range(len(submission_log)):\n        # If the submission is correct, add the time to the time score.\n        if submission_log[i][2] == \"right\":\n            time_score += int(submission_log[i][0])\n            problems_solved += 1\n        # If the submission is wrong, check if the problem was solved.\n        else:\n            # If the problem was solved, add the penalty to the time score.\n            if submission_log[i][1] in [submission_log[j][1] for j in range(i) if submission_log[j][2] == \"right\"]:]\n                time_score += 20\n    # Print the number of problems solved and the time score.\n    print(problems_solved, time_score)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    numberOfProblems = 0\n    time = 0\n    current_time = 0\n    currentProblem = \"\"\n    problems = []\n    times = []\n    wrongs = []\n        print(\"Enter:\")\n    while True:\n        line = input()\n        if line == \"\":\n            break\n        line = line.split(\" \")\n        current_time = int(line[0])\n        currentProblem = line[1]\n        if line[2] == \"right\":\n            if currentProblem not in problems:\n                numberOfProblems += 1\n                time += current_time\n                problems.append(currentProblem)\n                times.append(current_time)\n                wrongs.append(0)\n        else:\n            if currentProblem not in problems:\n                problems.append(currentProblem)\n                times.append(current_time)\n                wrongs.append(1)\n            else:\n                index = problems.index(currentProblem)\n                wrongs[index] += 1\n\n    for i in range(len(problems)):\n        if wrongs[i] > 0:\n            time += wrongs[i] * 20\n\n    print(numberOfProblems, time)\n\nmain()\n", "\n\ndef main():\n    numberOfProblems = 0\n    time = 0\n    currentTime = 0\n    currentProblem = \"\"\n    problems = []\n    times = []\n    wrongs = []\n    while True:\n        line = input()\n        if line == \"-1\":\n            break\n        line = line.split(\" \")\n        currentTime = int(line[0])\n        currentProblem = line[1]\n        if line[2] == \"right\":\n            if currentProblem not in problems:\n                numberOfProblems += 1\n                time += currentTime\n                problems.append(currentProblem)\n                times.append(currentTime)\n                wrongs.append(0)\n        else:\n            if currentProblem not in problems:\n                problems.append(currentProblem)\n                times.append(currentTime)\n                wrongs.append(1)\n            else:\n                index = problems.index(currentProblem)\n                wrongs[index] += 1\n\n    for i in range(len(problems)):\n        if wrongs[i] > 0:\n            time += wrongs[i] * 20\n\n    print(numberOfProblems, time)\n\nmain()\n", "\n\ndef main():\n    \"\"\"\n    The main function.\n    \"\"\"\n    input_ = input()\n    while input_ != '-1':  # -1 is the exit condition\n        input_ = input_.split()\n        print(input_)\n        input_ = input()\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    # Read the input\n    input_lines = []\n    while True:\n        line = input()\n        if line == '-1':\n            break\n        input_lines.append(line)\n\n    # Split the input into a list\n    input_list = [line.split() for line in input_lines]\n\n    # Create a dictionary to hold the problem and the time to solve it\n    problem_dict = {}\n    for entry in input_list:\n        problem_dict[entry[1]] = int(entry[0])\n\n    # Create a dictionary to hold the problem and the number of attempts\n    attempts_dict = {}\n    for entry in input_list:\n        if entry[1] not in attempts_dict.keys():\n            attempts_dict[entry[1]] = 0\n        attempts_dict[entry[1]] += 1\n\n    # Create a dictionary to hold the problem and the number of right/wrong attempts\n    right_wrong_dict = {}\n    for entry in input_list:\n        if entry[1] not in right_wrong_dict.keys():\n            right_wrong_dict[entry[1]] = 0\n        if entry[2] == 'right':\n            right_wrong_dict[entry[1]] += 1\n        else:\n            right_wrong_dict[entry[1]] -= 1\n\n    # Create a dictionary to hold the problem and the penalty\n    penalty_dict = {}\n    for key, value in right_wrong_dict.items():\n        if value > 0:\n            penalty_dict[key] = (attempts_dict[key] - 1) * 20\n        else:\n            penalty_dict[key] = 0\n\n    # Create a dictionary to hold the problem and the time to solve it with penalty\n    time_penalty_dict = {}\n    for key, value in problem_dict.items():\n        time_penalty_dict[key] = value + penalty_dict[key]\n\n    # Create a list of all of the problems that were solved\n    solved_list = []\n    for key, value in right_wrong_dict.items():\n        if value > 0:\n            solved_list.append(key)\n\n    # Calculate the number of problems solved and the total time measure\n    number_of_problems_solved = len(solved_list)\n    total_time_measure = sum([time_penalty_dict[problem] for problem in solved_list])\n\n    # Output the results\n    print(number_of_problems_solved, total_time_measure)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\n# Read the input\ninput = sys.stdin.readlines()\n\n# Parse the input\nlog = []\nfor line in input:\n    if line == \"-1\\n\":\n        break\n    log.append(line.split())\n\n# Create a dictionary of the problems and the number of times they\n# were solved\nproblems = {}\nfor entry in log:\n    problems[entry[1]] = 0\n\n# Create a dictionary of the problems and the number of times they\n# were attempted\nattempts = {}\nfor entry in log:\n    attempts[entry[1]] = 0\n\n# Create a dictionary of the problems and the time it took to solve\n# them\ntimes = {}\nfor entry in log:\n    times[entry[1]] = 0\n\n# Loop through the log and find out how many problems were solved\n# and how many attempts it took to solve them\nfor entry in log:\n    if entry[2] == \"right\":\n        problems[entry[1]] += 1\n        attempts[entry[1]] += 1\n        times[entry[1]] = int(entry[0])\n    else:\n        attempts[entry[1]] += 1\n\n# Count the number of problems solved\nsolved = 0\nfor problem in problems:\n    if problems[problem] == 1:\n        solved += 1\n\n# Calculate the time score\ntimeScore = 0\nfor problem in problems:\n    if problems[problem] == 1:\n        timeScore += times[problem]\n    else:\n        timeScore += (attempts[problem] - 1) * 20\n\n# Print the results\nprint(solved, timeScore)\n", "\n\ndef main():\n    numberOfProblems = 0\n    totalTime = 0\n    currentTotalTime = 0\n    currentProblem = \"\"\n    problems = []\n    totalTimes = []\n    wrongs = []\n    while True:\n        line = raw_input()\n        if line == \"-1\":\n            break\n        line = line.split(\" \")\n        currentTotalTime = int(line[0])\n        currentProblem = line[1]\n        if line[2] == \"right\":\n            if currentProblem not in problems:\n                numberOfProblems += 1\n                totalTime += currentTotalTime\n                problems.append(currentProblem)\n                totalTimes.append(currentTotalTime)\n                wrongs.append(0)\n        else:\n            if currentProblem not in problems:\n                problems.append(currentProblem)\n                totalTimes.append(currentTotalTime)\n                wrongs.append(1)\n            else:\n                index = problems.index(currentProblem)\n                wrongs[index] += 1\n\n    for i in range(len(problems)):\n        if wrongs[i] > 0:\n            totalTime += wrongs[i] * 20\n\n    print numberOfProblems, totalTime\n\nmain()\n", "\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    # Read in the input\n    input_lines = []\n    while True:\n        line = input()\n        if line == '-1':\n            break\n        input_lines.append(line)\n\n    # Split the input into a list of lists\n    input_list = [line.split() for line in input_lines]\n\n    # Create a dictionary to hold the problem and the time\n    problem_dict = {}\n    for entry in input_list:\n        problem_dict[entry[1]] = int(entry[0])\n\n    # Create a dictionary to hold the problem and the number of attempts\n    attempts_dict = {}\n    for entry in input_list:\n        if entry[1] not in attempts_dict.keys():\n            attempts_dict[entry[1]] = 0\n        attempts_dict[entry[1]] += 1\n\n    # Create a dictionary to hold the problem and the number of right/wrong\n    right_wrong_dict = {}\n    for entry in input_list:\n        if entry[1] not in right_wrong_dict.keys():\n            right_wrong_dict[entry[1]] = 0\n        if entry[2] == 'right':\n            right_wrong_dict[entry[1]] += 1\n        else:\n            right_wrong_dict[entry[1]] -= 1\n\n    # Create a dictionary to hold the problem and the penalty\n    penalty_dict = {}\n    for key, value in right_wrong_dict.items():\n        if value > 0:\n            penalty_dict[key] = (attempts_dict[key]-1)*20\n        else:\n            penalty_dict[key] = 0\n\n    # Create a dictionary to hold the problem and the time with penalities\n    time_penalty_dict = {}\n    for key, value in problem_dict.items():\n        time_penalty_dict[key] = value + penalty_dict[key]\n\n    # Create a list of all of the problems that were solved\n    solved_list = []\n    for key, value in right_wrong_dict.items():\n        if value > 0:\n            solved_list.append(key)\n\n    # Calculate the number of problems solved and the total time measure\n    number_of_problems_solved = len(solved_list)\n    total_time_measure = sum([time_penalty_dict[problem] for problem in solved_list])\n\n    # Output the results\n    print(number_of_problems_solved, total_time_measure)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main program.\n    \"\"\"\n    # Initialize the submission log, the number of problems solved, and the time score.\n    submission_log, time_score, penalty = [], 0, 20\n    problems_solved = 0\n    # Read in the submission log.\n    while True:\n        submission = input()\n        if submission == \"-1\":\n            break\n        submission_log.append(submission.split())\n    # Process the submission log.\n    for i in range(len(submission_log)):\n        # If the submission is correct, add the time to the time score.\n        if submission_log[i][2] == \"right\":\n            time_score += int(submission_log[i][0]) + penalty\n            problems_solved += 1\n        # If the submission is wrong, check if the problem was solved.\n        else:\n            # If the problem was solved, add the penalty to the time score.\n            if submission_log[i][1] in [submission_log[j][1] for j in range(i) if submission_log[j][2] == \"right\"]:\n                time_score += penalty\n    # Print the number of problems solved and the time score.\n    print(problems_solved, time_score)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    # Read the input\n    input_lines = []\n    while True:\n        line = input()\n        if line == '-1':\n            break\n        input_lines.append(line)\n\n    # Split the input into a list\n    input_list = [line.split() for line in input_lines]\n\n    # Create a dictionary to hold the problem and the time to solve it\n    problem_dict = {}\n    for entry in input_list:\n        problem_dict[entry[1]] = int(entry[0])\n\n    # Create a dictionary to hold the problem and the number of attempts\n    attempts_dict = {}\n    for entry in input_list:\n        if entry[1] not in attempts_dict.keys():\n            attempts_dict[entry[1]] = 0\n        attempts_dict[entry[1]] += 1\n\n    # Create a dictionary to hold the problem and the number of right/wrong attempts\n    right_wrong_dict = {}\n    for entry in input_list:\n        if entry[1] not in right_wrong_dict.keys():\n            right_wrong_dict[entry[1]] = 0\n        if entry[2] == 'right':\n            right_wrong_dict[entry[1]] += 1\n        else:\n            right_wrong_dict[entry[1]] -= 1\n\n    # Create a dictionary to hold the problem and the penalty\n    penalty_dict = {}\n    for key, value in right_wrong_dict.items():\n        if value > 0:\n            penalty_dict[key] = (attempts_dict[key] - 1) * 20\n        else:\n            penalty_dict[key] = 0\n\n    # Create a dictionary to hold the problem and the time to solve it with penalty\n    time_penalty_dict = {}\n    for key, value in problem_dict.items():\n        time_penalty_dict[key] = value + penalty_dict[key]\n\n    # Create a list of all of the problems that were solved\n    solved_list = []\n    for key, value in right_wrong_dict.items():\n        if value > 0:\n            solved_list.append(key)\n\n    # Calculate the number of problems solved and the total time measure\n    number_of_problems_solved = len(solved_list)\n    total_time_measure = sum([time_penalty_dict[problem] for problem in solved_list])\n\n    # Output the results\n    print(str(number_of_problems_solved) + ' ' + str(total_time_measure))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\n\ndef main():\n    problems = {}\n    current_time = 0\n    for line in sys.stdin:\n        if line.strip() == '-1':\n            break\n        time, problem, result = line.strip().split()\n        time = int(time)\n        current_time = time\n        if problem not in problems:\n            problems[problem] = {'solved': False, 'penalty': 0, 'last_submit': current_time}\n        if result == 'right':\n            problems[problem]['solved'] = True\n            problems[problem]['last_submit'] = current_time\n        else:\n            problems[problem]['penalty'] += 20\n    solved = sum([1 if problem['solved'] else 0 for problem in problems.values()])\n    penalty = sum([problem['penalty'] for problem in problems.values()])\n    submit_time = sum([problem['last_submit'] for problem in problems.values() if problem['solved']])\n    print(solved, submit_time + penalty)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef read_input(f):\n    \"\"\"\n    Reads the input and returns a list of tuples containing the minute, problem and the answer.\n    \"\"\"\n    contest_log = []\n    while True:\n        line = f.readline().strip()\n        if line == '-1':\n            break\n        minute, problem, answer = line.split()\n        contest_log.append((int(minute), problem, answer))\n    return contest_log\n\ndef solve_contest(contest_log):\n    \"\"\"\n    Solves the contest and returns the number of problems solved and the total time measure.\n    \"\"\"\n    problems_solved = 0\n    time_measure = 0\n    problems_wrong = {}\n    for minute, problem, answer in contest_log:\n        if answer == 'right':\n            problems_solved += 1\n            time_measure += minute\n            if problem in problems_wrong:\n                time_measure += problems_wrong[problem] * 20\n                del problems_wrong[problem]\n        else:\n            if problem not in problems_wrong:\n                problems_wrong[problem] = 0\n            problems_wrong[problem] += 1\n    return problems_solved, time_measure\n\ndef print_solution(solution):\n    \"\"\"\n    Prints the solution in the specified format.\n    \"\"\"\n    print(solution[0], solution[1])\n\ndef main(file):\n    contest_log = read_input(file)\n    solution = solve_contest(contest_log)\n    print_solution(solution)\n\nif __name__ == '__main__':\n    main(sys.stdin)\n", "\n\ndef main():\n    numberOfProblems = 0\n    time = 0\n    currentTime = 0\n    currentProblem = \"\"\n    problems = []\n    times = []\n    wrongs = []\n    while True:\n        line = input()\n        if line == \"-1\":\n            break\n        line = line.split(\" \")\n        currentTime = int(line[0])\n        currentProblem = line[1]\n        if line[2] == \"right\":\n            if currentProblem not in problems:\n                numberOfProblems += 1\n                time += currentTime\n                problems.append(currentProblem)\n                times.append(currentTime)\n                wrongs.append(0)\n        else:\n            if currentProblem not in problems:\n                problems.append(currentProblem)\n                times.append(currentTime)\n                wrongs.append(1)\n            else:\n                index = problems.index(currentProblem)\n                wrongs[index] += 1\n\n    for i in range(len(problems)):\n        if wrongs[i] > 0:\n            time += wrongs[i] * 20\n\n    print(numberOfProblems, time)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    number_of_problems = 0\n    time = 0\n    current_time = 0\n    current_problem = \"\"\n    problems = []\n    times = []\n    wrongs = []\n    while True:\n        line = input()\n        if line == \"-1\":\n            break\n        line = line.split(\" \")\n        current_time = int(line[0])\n        current_problem = line[1]\n        if line[2] == \"right\":\n            if current_problem not in problems:\n                number_of_problems += 1\n                time += current_time\n                problems.append(current_problem)\n                times.append(current_time)\n                wrongs.append(0)\n        else:\n            if current_problem not in problems:\n                problems.append(current_problem)\n                times.append(current_time)\n                wrongs.append(1)\n            else:\n                index = problems.index(current_problem)\n                wrongs[index] += 1\n\n    for i in range(len(problems)):\n        if wrongs[i] > 0:\n            time += wrongs[i] * 20\n\n    print(number_of_problems, time) \n\nmain()\n", "\n\nimport sys\n\ndef read_input():\n    \"\"\"\n    Reads the input and returns a list of tuples containing the minute, the problem and the answer.\n    \"\"\"\n    # contest_log = []\n    # while True:\n    #     line = sys.stdin.readline().strip()\n    #     if line == '-1':\n    #         break\n    #     minute, problem, answer = line.split()\n    #     contest_log.append((int(minute), problem, answer))\n    # return contest_log\n\ndef solve_contest(contest_log):\n    \"\"\"\n    Solves the contest and returns the number of problems solved and the total time penalty.\n    \"\"\"\n    # problems_solved = 0\n    # time_penalty = 0\n    # problems_wrong = {}\n    # for minute, problem, answer in contest_log:\n    #     if answer == 'right':\n    #         problems_solved += 1\n    #         time_penalty += minute\n    #         if problem in problems_wrong:\n    #             time_penalty += problems_wrong[problem] * 20\n    #             del problems_wrong[problem]\n    #     else:\n    #         if problem not in problems_wrong:\n    #             problems_wrong[problem] = 0\n    #         problems_wrong[problem] += 1\n    # return problems_solved, time_penalty\n\ndef print_solution(solution):\n    \"\"\"\n    Prints the solution in the specified format.\n    \"\"\"\n    # print(solution[0], solution[1])\n\ndef main():\n    # contest_log = read_input()\n    # solution = solve_contest(contest_log)\n    # print_solution(solution)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    The main function.\n    \"\"\"\n    input_file_name = input()\n    while input_file_name != '-1':\n        input_file_name = input_file_name.split()\n        print(input_file_name[0])\n        input_file_name = input()\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    # Read in the input\n    input_lines = []\n    while True:\n        line = input()\n        if line == '-1':\n            break\n        input_lines.append(line)\n\n    # Split the input into a list of lists\n    input_list = [line.split() for line in input_lines]\n\n    # Create a dictionary to hold the problem and the time\n    problem_dict = {}\n    for entry in input_list:\n        problem_dict[entry[1]] = int(entry[0])\n\n    # Create a dictionary to hold the problem and the number of attempts\n    attempts_dict = {}\n    for entry in input_list:\n        if entry[1] not in attempts_dict.keys():\n            attempts_dict[entry[1]] = 0\n        attempts_dict[entry[1]] += 1\n\n    # Create a dictionary to hold the problem and the number of right/wrong\n    right_wrong_dict = {}\n    for entry in input_list:\n        if entry[1] not in right_wrong_dict.keys():\n            right_wrong_dict[entry[1]] = 0\n        if entry[2] == 'right':\n            right_wrong_dict[entry[1]] += 1\n        else:\n            right_wrong_dict[entry[1]] -= 1\n\n    # Create a dictionary to hold the problem and the penalty\n    penalty_dict = {}\n    for key, value in right_wrong_dict.items():\n        if value > 0:\n            penalty_dict[key] = (attempts_dict[key] - 1) * 20\n        else:\n            penalty_dict[key] = 0\n\n    # Create a dictionary to hold the problem and the time with penalties\n    time_penalty_dict = {}\n    for key, value in problem_dict.items():\n        time_penalty_dict[key] = value + penalty_dict[key]\n\n    # Create a list of all of the problems that were solved\n    solved_list = []\n    for key, value in right_wrong_dict.items():\n        if value > 0:\n            solved_list.append(key)\n\n    # Calculate the number of problems solved and the total time measure\n    number_of_problems_solved = len(solved_list)\n    total_time_measure = sum([time_penalty_dict[problem] for problem in solved_list])\n\n    # Output the results\n    print('{} {}'.format(number_of_problems_solved, total_time_measure))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    times = dict()\n    problems = dict()\n    while True:\n        line = sys.stdin.readline()\n        if line == \"-1\\n\":\n            break\n        time, problem, result = line.split(' ')\n        time = int(time)\n        if problem in problems:\n            if result == \"right\":\n                times[problem] = time\n                problems[problem] = True\n        else:\n            times[problem] = time\n            problems[problem] = result == \"right\"\n    solved = 0\n    time = 0\n    for problem, solved_ in problems.items():\n        if solved_:\n            time += times[problem]\n            solved += 1\n        else:\n            time += 20\n    print(solved, time)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main function that reads in input and outputs the solution\n    \"\"\"\n    problems = dict()\n    current_time = int(0)\n    for line in sys.stdin:\n        if line.strip() == '-1':\n            break\n        time, problem, result = line.strip().split()\n        time = int(time)\n        current_time = time\n        if problem not in problems:\n            problems[problem] = {'solved': bool(False), 'penalty': int(0), 'last_submit': current_time}\n        if result == 'right':\n            problems[problem]['solved'] = True\n            problems[problem]['last_submit'] = current_time\n        else:\n            problems[problem]['penalty'] += 20\n    solved = sum([1 if problem['solved'] else 0 for problem in problems.values()])\n    penalty = sum([problem['penalty'] for problem in problems.values()])\n    submit_time = sum([problem['last_submit'] for problem in problems.values() if problem['solved']])\n    print(solved, submit_time + penalty)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\n# Read the input\ninput = sys.stdin.read().splitlines()\n\n# Parse the input\nlog = []\nfor line in input:\n    if line == \"-1\":\n        break\n    log.append(line.split())\n\n# Create a dictionary of the problems and the number of times they\n# were solved\nproblems = {}\nfor entry in log:\n    problems[entry[1]] = 0\n\n# Create a dictionary of the problems and the number of times they\n# were attempted\nattempts = {}\nfor entry in log:\n    attempts[entry[1]] = 0\n\n# Create a dictionary of the problems and the time it took to solve\n# them\ntimes = {}\nfor entry in log:\n    times[entry[1]] = 0\n\n# Loop through the log and find out how many problems were solved\n# and how many attempts it took to solve them\nfor entry in log:\n    if entry[2] == \"right\":\n        problems[entry[1]] += 1\n        attempts[entry[1]] += 1\n        times[entry[1]] = int(entry[0])\n    else:\n        attempts[entry[1]] += 1\n\n# Count the number of problems solved\nsolved = 0\nfor problem in problems:\n    if problems[problem] == 1:\n        solved += 1\n\n# Calculate the time score\ntimeScore = 0\nfor problem in problems:\n    if problems[problem] == 1:\n        timeScore += times[problem]\n    else:\n        timeScore += (attempts[problem] - 1) * 20\n\n# Print the results\nsys.stdout.write(str(solved) + \" \" + str(timeScore))\n", "import sys\n\n\ndef main():\n    \"\"\"\n    Main function that reads in input and outputs the solution\n    \"\"\"\n    problems = {} # dictionary of problems\n    current_time = 0 # current time\n\n    # read in input\n    for line in sys.stdin:\n        if line.strip() == '-1': # parse line\n            break\n\n        # parse line\n            break\n        time, problem, result = line.strip().split()\n        time = int(time)\n\n        # add problem to dictionary if not exist\n        current_time = time\n        if problem not in problems:\n\n        # update problem information\n            problems[problem] = {'solved': False, 'penalty': 0, 'last_submit': current_time}\n        if result == 'right':\n            problems[problem]['solved'] = True\n            problems[problem]['last_submit'] = current_time\n        else:\n            problems[problem]['penalty'] += 20\n\n    # calculate and output solution\n    solved = sum([1 if problem['solved'] else 0 for problem in problems.values()])\n    penalty = sum([problem['penalty'] for problem in problems.values()])\n    submit_time = sum([problem['last_submit'] for problem in problems.values() if problem['solved']])\n    print(solved, submit_time + penalty)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main program.\n    \"\"\"\n    # Initialize the submissions log and the number of problems solved.\n    submissions_log = []\n    problems_solved = 0\n    # Read in the submissions log.\n    while True:\n        submission = input()\n        if submission == \"-1\":\n            break\n        submissions_log.append(submission.split())\n    # Initialize the time score.\n    time_score = 0\n    for i in range(len(submissions_log)):\n        # If the submissions is correct, add the time to the time score.\n        if submissions_log[i][2] == \"right\":\n            time_score += int(submissions_log[i][0])\n            problems_solved += 1\n        # If the submissions is wrong, check if the problem was solved.\n        else:\n            # If the problem was solved, add the penalty to the time score.\n            if submissions_log[i][1] in [submissions_log[j][1] for j in range(i) if submissions_log[j][2] == \"right\"]:\n                time_score += 20\n    # Print the number of problems solved and the time score.\n    print(problems_solved, time_score)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main program.\n    \"\"\"\n    # Initialize the submission log, the number of problems solved, and the time score.\n    submission_log, time_score = [], 0\n    problems_solved = 0\n    # Read in the submission log.\n    while True:\n        submission = input()\n        if submission == \"-1\":\n            break\n    # Initialize the list of solved problems.\n    solved_problems = []\n        submission_log.append(submission.split())\n    # Process the submission log.\n    for i in range(len(submission_log)):\n        # If the submission is correct, add the time to the time score.\n        if submission_log[i][2] == \"right\":\n            time_score += int(submission_log[i][0])\n            problems_solved += 1\n        # If the submission is wrong, check if the problem was solved.\n        else:\n            # If the problem was solved, add the penalty to the time score.\n            if submission_log[i][1] in solved_problems:\n                time_score += 20\n            else:\n                solved_problems.append(submission_log[i][1])\n    # Print the number of problems solved and the time score.\n    print(problems_solved, time_score)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    # Read in the input\n    input_lines = []\n    while True:\n        line = input()\n        if line == '-1':\n            break\n        input_lines.append(line)\n\n    # Split the input into a list of lists\n    input_list = [line.split() for line in input_lines]\n\n    # Create a dictionary to hold the problem and the time\n    problem_dict = {}\n    for entry in input_list:\n        problem_dict[entry[1]] = int(entry[0])\n\n    # Create a dictionary to hold the problem and the number of attempts\n    attempts_dict = {}\n    for entry in input_list:\n        if entry[1] not in attempts_dict.keys():\n            attempts_dict[entry[1]] = 0\n        attempts_dict[entry[1]] += 1\n\n    # Create a dictionary to hold the problem and the number of right/wrong\n    right_wrong_dict = {}\n    for entry in input_list:\n        if entry[1] not in right_wrong_dict.keys():\n            right_wrong_dict[entry[1]] = 0\n        if entry[2] == 'right':\n            right_wrong_dict[entry[1]] += 1\n        else:\n            right_wrong_dict[entry[1]] -= 1\n\n    # Create a dictionary to hold the problem and the penalty\n    penalty_dict = {}\n    for key, value in right_wrong_dict.items():\n        if value > 0:\n            penalty_dict[key] = (attempts_dict[key] - 1) * 20\n        else:\n            penalty_dict[key] = 0\n\n    # Create a dictionary to hold the problem and the time with penalties\n    time_penalty_dict = {}\n    for key, value in problem_dict.items():\n        time_penalty_dict[key] = value + penalty_dict[key]\n\n    # Create a list of all of the problems that were solved\n    solved_list = []\n    for key, value in right_wrong_dict.items():\n        if value > 0:\n            solved_list.append(key)\n\n    # Calculate the number of problems solved and the total time measure\n    number_of_problems_solved = len(solved_list)\n    total_time_measure = sum([time_penalty_dict[problem] for problem in solved_list])\n\n    # Output the results\n    print(number_of_problems_solved, total_time_measure)\n\nif __name__ == '__main__':\n    main()\n", "#! /usr/bin/python\n\nimport sys\n\ndef read_input():\n    \"\"\"\n    Reads the input and returns a list of tuples containing the minute, problem and the answer.\n    \"\"\"\n    contest_log = []\n    while True:\n        line = sys.stdin.readline().strip()\n        if line == '-1':\n            break\n        minute, problem, answer = line.split()\n        contest_log.append((int(minute), problem, answer))\n    return contest_log\n\ndef solve_contest(contest_log):\n    \"\"\"\n    Solves the contest and returns the number of problems solved and the total time measure.\n    \"\"\"\n    problems_solved = 0\n    time_measure = 0\n    problems_wrong = {}\n    for minute, problem, answer in contest_log:\n        if answer == 'right':\n            problems_solved += 1\n            time_measure += minute\n            if problem in problems_wrong:\n                time_measure += problems_wrong[problem] * 20\n                del problems_wrong[problem]\n        else:\n            if problem not in problems_wrong:\n                problems_wrong[problem] = 0\n            problems_wrong[problem] += 1\n    return problems_solved, time_measure\n\ndef print_solution(solution):\n    \"\"\"\n    Prints the solution in the specified format.\n    \"\"\"\n    print(solution[0], solution[1])\n\ndef main():\n    contest_log = read_input()\n    solution = solve_contest(contest_log)\n    print_solution(solution)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    times = dict()\n    problems = dict()\n    while True:\n        line = sys.stdin.readline()\n        if line == \"-1\\n\":\n            break\n        time, problem, result = line.split()\n        time = int(time)\n        if problem in problems:\n            if result == \"right\":\n                times[problem] = time\n                problems[problem] = True\n        else:\n            times[problem] = time\n            problems[problem] = result == \"right\"\n    solved = 0\n    time = 0\n    for problem, solved in problems.iteritems():\n        if solved:\n            time += times[problem]\n            solved += 1\n        else:\n            time += 20\n    print(solved, time)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main program.\n    \"\"\"\n    # Initialise the submission log and the number of problems solved.\n    submission_log = []\n    problems_solved = 0\n    # Read in the submission log.\n    while True:\n        submission = input()\n        if submission == \"-1\":\n            break\n        submission_log.append(submission.split())\n    # Initialise the time score.\n    time_score = 0\n    # Process the submission log.\n        # If the submission is wrong, check if the problem was solved.\n        if submission_log[i][2] == \"wrong\":\n            # If the problem was solved, add the penalty to the time score.\n            if submission_log[i][1] in [submission_log[j][1] for j in range(i) if submission_log[j][2] == \"right\"]:\n                time_score += 20\n    for i in range(len(submission_log)):\n        # If the submission is correct, add the time to the time score.\n        else:\n            time_score += int(submission_log[i][0])\n            problems_solved += 1\n    # Print the number of problems solved and the time score\n    print(problems_solved, time_score)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    # Read the input\n    input_lines = []\n    while True:\n        line = raw_input()\n        if line == '-1':\n            break\n        input_lines.append(line)\n\n    # Split the input into a list\n    input_list = [line.split() for line in input_lines]\n\n    # Create a dictionary to hold the problem and the time to solve it\n    problem_dict = {}\n    for entry in input_list:\n        problem_dict[entry[1]] = int(entry[0])\n\n    # Create a dictionary to hold the problem and the number of attempts\n    attempts_dict = {}\n    for entry in input_list:\n        if entry[1] not in attempts_dict.keys():\n            attempts_dict[entry[1]] = 0\n        attempts_dict[entry[1]] += 1\n\n    # Create a dictionary to hold the problem and the number of right/wrong attempts\n    right_wrong_dict = {}\n    for entry in input_list:\n        if entry[1] not in right_wrong_dict.keys():\n            right_wrong_dict[entry[1]] = 0\n        if entry[2] == 'right':\n            right_wrong_dict[entry[1]] += 1\n        else:\n            right_wrong_dict[entry[1]] -= 1\n\n    # Create a dictionary to hold the problem and the penalty\n    penalty_dict = {}\n    for key, value in right_wrong_dict.items():\n        if value > 0:\n            penalty_dict[key] = (attempts_dict[key]-1)*20\n        else:\n            penalty_dict[key] = 0\n\n    # Create a dictionary to hold the problem and the time to solve it with penalty\n    time_penalty_dict = {}\n    for key, value in problem_dict.items():\n        time_penalty_dict[key] = value + penalty_dict[key]\n\n    # Create a list of all of the problems that were solved\n    solved_list = []\n    for key, value in right_wrong_dict.items():\n        if value > 0:\n            solved_list.append(key)\n\n    # Calculate the number of problems solved and the total time measure\n    number_of_problems_solved = len(solved_list)\n    total_time_measure = sum([time_penalty_dict[problem] for problem in solved_list])\n\n    # Output the results\n    print(number_of_problems_solved, total_time_measure)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    numberOfProblems = 0\n    totalTime = 0\n    currentProblem = \"\"\n    problems = []\n    totalTimes = []\n    wrongs = []\n    while True:\n        line = input()\n        if line == \"-1\":\n            break\n        line = line.split(\" \")\n        currentTotalTime = int(line[0]) + (int(line[3]) * 20)\n        currentProblem = line[1]\n        if line[2] == \"right\":\n            if currentProblem not in problems:\n                numberOfProblems += 1\n                totalTime += currentTotalTime\n                problems.append(currentProblem)\n        else:\n            if currentProblem not in problems:\n                problems.append(currentProblem)\n            else:\n                index = problems.index(currentProblem)\n                totalTime += currentTotalTime\n\n    print(numberOfProblems, totalTime)\n\nmain()\n", "\nimport sys\n\n# Read in the input\ninput = sys.stdin.readlines()\n\n# Parse the input\nlog = []\nfor line in input:\n    if line == \"-1\\n\":\n        break\n    log.append(line.split())\n\n# Create a dictionary of the problems and the number of times it\n# were solved\nproblems = {}\nfor entry in log:\n    problems[entry[1]] = 0\n\n# Create a dictionary of the problems and the number of times it\n# were attempted\nattempts = {}\nfor entry in log:\n    attempts[entry[1]] = 0\n\n# Create a dictionary of the problems and the time it takes to solve\n# them\ntimes = {}\nfor entry in log:\n    times[entry[1]] = 0\n\n# Loop through the log and find out how many problems were solved\n# and how many attempts it took to solve them\nfor entry in log:\n    if entry[2] == \"right\":\n        problems[entry[1]] += 1\n        attempts[entry[1]] += 1\n        times[entry[1]] = int(entry[0])\n    else:\n        attempts[entry[1]] += 1\n\n# Count the number of problems solved\nsolved = 0\nfor problem in problems:\n    if problems[problem] == 1:\n        solved += 1\n\n# Calculate the time score\ntimeScore = 0\nfor problem in problems:\n    if problems[problem] == 1:\n        timeScore += times[problem]\n    else:\n        timeScore += (attempts[problem] - 1) * 20\n\n# Print the results\nprint(solved, timeScore)\n", "\nimport sys\n\ndef read_input():\n    \"\"\"\n    Reads the input and returns a list of tuples containing the minute, problem and the answer.\n    \"\"\"\n    contest_log = []\n    while True:\n        line = sys.stdin.readline().strip()\n        if line == '-1':\n            break\n        minute, problem, answer = line.split()\n        contest_log.append((int(minute), problem, answer))\n    return contest_log\n\ndef solve_contest(contest_log):\n    \"\"\"\n    Solves the contest and returns the number of problems solved and the total time measure.\n    \"\"\"\n    problems_solved = 0\n    time_measure = 0\n    problems_wrong = {}\n    for minute, problem, answer in contest_log:\n        if answer == 'right':\n            problems_solved += 1\n            time_measure += minute\n            if problem in problems_wrong:\n                time_measure += problems_wrong[problem] * 20\n                del problems_wrong[problem]\n        else:\n            if problem not in problems_wrong:\n                problems_wrong[problem] = 0\n            problems_wrong[problem] += 1\n    return problems_solved, time_measure\n\ndef print_solution(solution):\n    \"\"\"\n    Prints the solution in the specified format.\n    \"\"\"\n    print(solution[0], solution[1])\n\ndef main():\n    contest_log = read_input()\n    solution = solve_contest(contest_log)\n    print_solution(solution)\n\nmain()\n", "\n\ndef main():\n    \"\"\"\n    Main program.\n    \"\"\"\n    # Initialise the submission log and the number of problems solved.\n    submission_log = []\n    problems_solved = 0\n    # Read in the submission log.\n    while True:\n        submission = input()\n        if submission == \"-1\":\n            break\n        submission_log.append(submission.split())\n    # Initialise the time score.\n    time_score = 0\n    # Process the submission log.\n    for i in range(len(submission_log)):\n        if submission_log[i][2] == \"right\":  # If the submission is correct, add the time to the time score.\n            time_score += int(submission_log[i][0]) + 20 * submission_log[i].count(\"wrong\")\n            problems_solved += 1  # Increment the number of problems solved.\n        else:\n            # If the problem was solved, add the penalty to the time score.\n            if submission_log[i][1] in [submission_log[j][1] for j in range(i) if submission_log[j][2] == \"right\"]:\n                time_score += 20\n    # Print the number of problems solved and the time score\n    print(problems_solved, time_score)\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\n\n\ndef main():\n    problems = {}\n    current_time = 0\n    for line in sys.stdin:\n        if line.strip() == '-1':\n            break\n        time, problem, result = line.strip().split()\n        time = int(time)\n        current_time = time\n        if problem not in problems:\n            problems[problem] = {'solved': False, 'penalty': 0, 'last_submit': current_time}\n        if result == 'right':\n            problems[problem]['solved'] = True\n            problems[problem]['last_submit'] = current_time\n        else:\n            problems[problem]['penalty'] += 20\n    solved = sum([1 if problem['solved'] else 0 for problem in problems.values()])\n    penalty = sum([problem['penalty'] for problem in problems.values()])\n    submit_time = sum([problem['last_submit'] for problem in problems.values() if problem['solved']])\n    print(solved, submit_time + penalty)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    times = dict()\n    problems = dict()\n    while True:\n        line = sys.stdin.readline()\n        if line == \"-1\":\n            break\n        time, problem, result = line.split()\n        time = int(time)\n        if problem in problems:\n            if result == \"right\":\n                times[problem] = time\n                problems[problem] = True\n        else:\n            times[problem] = time\n            problems[problem] = result == \"right\"\n    solved = 0\n    time = 0\n    for problem, solved_problem in problems.items():\n        if solved_problem:\n            time += times[problem]\n            solved += 1\n        else:\n            time += 20\n    print(solved, time)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    \"\"\"\n    Main function that reads in input and outputs the solution\n    \"\"\"\n    problems = {} # dictionary of problems\n    current_time = 0 # current time\n\n    # read in input\n    for line in sys.stdin:\n        if line.strip() == '-1':\n\n        # parse line\n            break\n        time, problem, result = line.strip().split()\n        time = int(time)\n\n        # add problem to dictionary if not exist\n        current_time = time\n        if problem not in problems:\n\n        # update problem information\n            problems[problem] = {'solved': False, 'penalty': 0, 'last_submit': current_time}\n        if result == 'right':\n            problems[problem]['solved'] = True\n            problems[problem]['last_submit'] = current_time\n        else:\n            problems[problem]['penalty'] += 20\n\n    # calculate and output solution\n    solved = sum([1 if problem['solved'] else 0 for problem in problems.values()])\n    penalty = sum([problem['penalty'] for problem in problems.values()])\n    submit_time = sum([problem['last_submit'] for problem in problems.values() if problem['solved']])\n    print(solved, submit_time + penalty)\n\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport os\nimport re\n\nimport sys\n\ndef read_input():\n    \"\"\"\n    Reads the input and returns a list of tuples containing the minute, the problem and the answer\n    \"\"\"\n    contest_log = []\n    while True:\n        line = sys.stdin.readline()\n        if line == '-1':\n            break\n        minute, problem, answer = line.split()\n        contest_log.append((int(minute), problem, answer))\n    return contest_log\n\ndef solve_contest(contest_log):\n    \"\"\"\n    Solves the contest and returns the number of problems solved and the total time penalty.\n    \"\"\"\n    problems_solved = 0\n    time_penalty = 0\n    problems_wrong = {}\n    for minute, problem, answer in contest_log:\n        if answer == 'right':\n            problems_solved += 1\n            time_penalty += minute\n            if problem in problems_wrong:\n                time_penalty += problems_wrong[problem] * 20\n                del problems_wrong[problem]\n        else:\n            if problem not in problems_wrong:\n                problems_wrong[problem] = 0\n            problems_wrong[problem] += 1\n    return problems_solved, time_penalty\n\ndef print_solution(solution):\n    \"\"\"\n    Prints the solution in the specified format.\n    \"\"\"\n    print(solution[0], solution[1])\n\ndef main():\n    contest_log = read_input()\n    solution = solve_contest(contest_log)\n    print_solution(solution)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\n\ndef main():\n    times = dict()\n    problems = dict()\n    while True:\n        line = sys.stdin.readline()\n        if line == \"-1\\n\":\n            break\n        time, problem, result = line.split()\n        time = int(time)\n        if problem in problems:\n            if result == \"right\":\n                times[problem] = time\n                problems[problem] = True\n        else:\n            times[problem] = time\n            problems[problem] = result == \"right\"\n    solved = 0\n    time = 0\n    for problem, solved_ in problems.items():\n        if solved_:\n            time += times[problem]\n            solved += 1\n        else:\n            time += 20\n    print(solved, time)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main program.\n    \"\"\"\n    # Initialize the submissions log and the number of problems solved.\n    submissions_log = []\n    problems_solved = 0\n    # Read in the submissions log.\n    while True:\n        submission = input()\n        if submission == \"-1\":\n            break\n        submissions_log.append(submission.split(\" \"))\n    # Initialize the time score.\n    time_score = 0\n    for i in range(len(submissions_log)):\n        # If the submissions is correct, add the time to the time score.\n        if submissions_log[i][2] == \"right\":\n            time_score += int(submissions_log[i][0])\n            problems_solved += 1\n        # If the submissions is wrong, check if the problem was solved.\n        else:\n            # If the problem was solved, add the penalty to the time score.\n            if submissions_log[i][1] in [submissions_log[j][1] for j in range(i) if submissions_log[j][2] == \"right\"]:\n                time_score += 20\n    # Print the number of problems solved and the time score.\n    print(problems_solved, time_score)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\n# Read in the input\ninput = sys.stdin.readlines()\n\n# Parse the input\nlog = []\nfor line in input:\n    if line == \"-1\\n\":\n        break\n    log.append(line.split())\n\n# Create a dictionary of the problems and the number of times they were solved\nproblems = {}\nfor entry in log:\n    problems[entry[1]] = 0\n\n# Create a dictionary of the problems and the number of times they were attempted\nattempts = {}\nfor entry in log:\n    attempts[entry[1]] = 0\n\n# Create a dictionary of the problems and the time it took to solve them\ntimes = {}\nfor entry in log:\n    times[entry[1]] = 0\n\n# Loop through the log and find out how many problems were solved and how many attempts it took to solve them\nfor entry in log:\n    if entry[2] == \"right\":\n        problems[entry[1]] += 1\n        attempts[entry[1]] += 1\n        times[entry[1]] = int(entry[0])\n    else:\n        attempts[entry[1]] += 1\n\n# Count the number of problems solved\nsolved = 0\nfor problem in problems:\n    if problems[problem] >= 1:\n        solved += 1\n\n# Calculate the time score\ntimeScore = 0\nfor problem in problems:\n    if problems[problem] >= 1:\n        timeScore += times[problem]\n    else:\n        timeScore += (attempts[problem] - 1) * 20\n\n# Print the results\nprint(solved, timeScore)\n", "#!/usr/bin/python3\n\nimport sys\n\ndef read_input():\n    \"\"\"\n    Reads the input and returns a list of tuples containing the minute and the answer.\n    \"\"\"\n    contest_log = []\n    while True:\n        line = sys.stdin.readline().strip()\n        if line == '-1':\n            break\n        minute, problem, answer = line.split()\n        contest_log.append((int(minute), problem, answer))\n    return contest_log\n\ndef solve_contest(contest_log):\n    \"\"\"\n    Solves the contest and returns the number of problems solved and the total time penalty.\n    \"\"\"\n    problems_solved = 0\n    time_penalty = 0\n    problems_wrong = {}\n    for minute, problem, answer in contest_log:\n        if answer == 'right':\n            problems_solved += 1\n            time_penalty += minute\n            if problem in problems_wrong:\n                time_penalty += problems_wrong[problem] * 20\n                del problems_wrong[problem]\n        else:\n            if problem not in problems_wrong:\n                problems_wrong[problem] = 0\n            problems_wrong[problem] += 1\n    return problems_solved, time_penalty\n\ndef print_solution(solution):\n    \"\"\"\n    Prints the solution in the specified format.\n    \"\"\"\n    print(solution[0], solution[1])\n\ndef main():\n    contest_log = read_input()\n    solution = solve_contest(contest_log)\n    print_solution(solution)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\n# Read the input\ninput_ = sys.stdin.readlines()\n\n# Parse the input\nlog = []\nfor line in input_:\n    if line == \"-1\\n\":\n        break\n    log.append([int(line.split()[0]), line.split()[1], line.split()[2]])\n\n# Create a dictionary of the problems and the number of times they\n# were solved\nproblems = {}\nfor entry in log:\n    problems[entry[1]] = 0\n\n# Create a dictionary of the problems and the number of times they\n# were attempted\nattempts = {}\nfor entry in log:\n    attempts[entry[1]] = 0\n\n# Create a dictionary of the problems and the time it took to solve\n# them\ntimes = {}\nfor entry in log:\n    times[entry[1]] = 0\n\n# Loop through the log and find out how many problems were solved\n# and how many attempts it took to solve them\nfor entry in log:\n    if entry[2] == \"right\":\n        problems[entry[1]] += 1\n        attempts[entry[1]] += 1\n        times[entry[1]] = entry[0]\n    else:\n        attempts[entry[1]] += 1\n\n# Count the number of problems solved\nsolved = 0\nfor problem in problems:\n    if problems[problem] == 1:\n        solved += 1\n\n# Calculate the time score\ntimeScore = 0\nfor problem in problems:\n    if problems[problem] == 1:\n        timeScore += times[problem]\n    else:\n        timeScore += (attempts[problem] - 1) * 20\n\n# Print the results\nprint(solved, timeScore)\n", "#!/usr/bin/env python\n\nimport sys\n\ndef read_input():\n    \"\"\"\n    Reads the input and returns a list of tuples containing the minute, the problem and the answer.\n    \"\"\"\n    contest_log = []\n    while True:\n        line = sys.stdin.readline().strip()\n        if line == '-1':\n            break\n        minute, problem, answer = line.split()\n        contest_log.append((int(minute), problem, answer))\n    return contest_log\n\ndef solve_contest(contest_log):\n    \"\"\"\n    Solves the contest and returns the number of problems solved and the total time penalty.\n    \"\"\"\n    problems_solved = 0\n    time_penalty = 0\n    problems_wrong = {}\n    for minute, problem, answer in contest_log:\n        if answer == 'right':\n            problems_solved += 1\n            time_penalty += minute\n            if problem in problems_wrong:\n                time_penalty += problems_wrong[problem] * 20\n                del problems_wrong[problem]\n        else:\n            if problem not in problems_wrong:\n                problems_wrong[problem] = 0\n            problems_wrong[problem] += 1\n    return problems_solved, time_penalty\n\ndef print_solution(solution):\n    \"\"\"\n    Prints the solution in the specified format.\n    \"\"\"\n    print(solution[0], solution[1])\n\ndef main():\n    contest_log = read_input()\n    solution = solve_contest(contest_log)\n    print_solution(solution)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef read_input():\n    \"\"\"\n    Reads the input and returns a list of tuples containing the minute and the answer.\n    \"\"\"\n    contest_log = []\n    while True:\n        line = sys.stdin.readline().strip()\n        if line == '-1':\n            break\n        minute, problem, answer = line.split()\n        contest_log.append((int(minute), problem, answer))\n    return contest_log\n\ndef solve_contest(contest_log):\n    \"\"\"\n    Solves the contest and returns the number of problems solved and the total time penalty.\n    \"\"\"\n    problems_solved = 0\n    time_penalty = 0\n    problems_wrong = {}\n    for minute, problem, answer in contest_log:\n        if answer == 'right':\n            problems_solved += 1\n            time_penalty += minute\n            if problem in problems_wrong:\n                time_penalty += problems_wrong[problem] * 20\n                del problems_wrong[problem]\n        else:\n            if problem not in problems_wrong:\n                problems_wrong[problem] = 0\n            problems_wrong[problem] += 1\n    return problems_solved, time_penalty\n\ndef print_solution(solution):\n    \"\"\"\n    Prints the solution in the specified format.\n    \"\"\"\n    print(solution[0], solution[1])\n\ndef main():\n    contest_log = read_input()\n    solution = solve_contest(contest_log)\n    print_solution(solution)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\n# Read in the input\ninput = sys.stdin.readlines()\n\n# Parse the input\nlog = []\nfor line in input:\n    if line == \"-1\\n\":\n        break\n    log.append(line.split())\n\n# Create a dictionary of the problems and the number of times it\n# were solved\nproblems = {}\nfor entry in log:\n    problems[entry[1]] = 0\n\n# Create a dictionary of the problems and the number of times it\n# were attempted\nattempts = {}\nfor entry in log:\n    attempts[entry[1]] = 0\n\n# Create a dictionary of the problems and the time it takes to solve\n# them\ntimes = {}\nfor entry in log:\n    times[entry[1]] = 0\n\n# Loop through the log and find out how many problems were solved\n# and how many attempts it took to solve them\nfor entry in log:\n    if entry[2] == \"right\":\n        problems[entry[1]] += 1\n        attempts[entry[1]] += 1\n        times[entry[1]] = int(entry[0])\n    else:\n        attempts[entry[1]] += 1\n\n# Count the number of problems solved\nsolved = 0\nfor problem in problems:\n    if problems[problem] == 1:\n        solved += 1\n\n# Calculate the time score\ntimeScore = 0\nfor problem in problems:\n    if problems[problem] == 1:\n        timeScore += times[problem]\n    else:\n        timeScore += (attempts[problem] - 1) * 20\n\n# Print the results\nprint(solved, timeScore)\n\n#\n", "import sys\n\n\n\ndef main():\n    \"\"\"\n    Main function that reads in input and outputs the solution\n    \"\"\"\n    problems = dict()\n    current_time = int()\n    for line in sys.stdin:\n        if line.strip() == '-1':\n            break\n        time, problem, result = line.strip().split()\n        time = int(time)\n        current_time = time\n        if problem not in problems:\n            problems[problem] = {'solved': bool(), 'penalty': int(), 'last_submit': current_time}\n        if result == 'right':\n            problems[problem]['solved'] = True\n            problems[problem]['last_submit'] = current_time\n        else:\n            problems[problem]['penalty'] += 20\n    solved = sum([1 if problem['solved'] else 0 for problem in problems.values()])  # noqa\n    penalty = sum([problem['penalty'] for problem in problems.values()])  # noqa\n    submit_time = sum([problem['last_submit'] for problem in problems.values() if problem['solved']])  # noqa\n    print(solved, submit_time + penalty)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\n# Read in the input\ninput = sys.stdin.readlines()\n\n# Parse the input\nlog = []\nfor line in input:\n    if line == \"-1\\n\":\n        break\n    log.append(line.split())\n\n# Create a dictionary of the problems and the number of times they were solved\nproblems = {}\nfor entry in log:\n    problems[entry[1]] = 0\n\n# Create a dictionary of the problems and the number of times they were attempted\nattempts = {}\nfor entry in log:\n    attempts[entry[1]] = 0\n\n# Create a dictionary of the problems and the time it took to solve them\ntimes = {}\nfor entry in log:\n    times[entry[1]] = 0\n\n# Loop through the log and find out how many problems were solved and how many attempts it took to solve them\nfor entry in log:\n    if entry[2] == \"right\":\n        problems[entry[1]] += 1\n        attempts[entry[1]] += 1\n        times[entry[1]] = int(entry[0])\n    else:\n        attempts[entry[1]] += 1\n\n# Count the number of problems solved\nsolved = 0\nfor problem in problems:\n    if problems[problem] == 1:\n        solved += 1\n\n# Calculate the time score\ntimeScore = 0\nfor problem in problems:\n    if problems[problem] == 1:\n        timeScore += times[problem]\n    else:\n        timeScore += (attempts[problem] - 1) * 20\n\n# Print the results\nprint(solved, timeScore)\n", "\n\ndef main():\n    \"\"\"\n    The main function.\n    \"\"\"\n    input_file_name = input()\n    while input_file_name != '-1':\n        input_file_name = input_file_name.split(',')\n        print(input_file_name)\n        input_file_name = input()\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    # Read in the input\n    input_lines = []\n    while True:\n        line = input()\n        if line == '-1':\n            break\n        input_lines.append(line)\n\n    # Split the input into a list of lists\n    input_list = [line.split() for line in input_lines]\n\n    # Create a dictionary to hold the problem and the time\n    problem_dict = {}\n    for entry in input_list:\n        problem_dict[entry[1]] = int(entry[0])\n\n    # Create a dictionary to hold the problem and the number of attempts\n    attempts_dict = {}\n    for entry in input_list:\n        if entry[1] not in attempts_dict.keys():\n            attempts_dict[entry[1]] = 0\n        attempts_dict[entry[1]] += 1\n\n    # Create a dictionary to hold the problem and the number of right/wrong\n    right_wrong_dict = {}\n    for entry in input_list:\n        if entry[1] not in right_wrong_dict.keys():\n            right_wrong_dict[entry[1]] = 0\n        if entry[2] == 'right':\n            right_wrong_dict[entry[1]] += 1\n        else:\n            right_wrong_dict[entry[1]] -= 1\n\n    # Create a dictionary to hold the problem and the penalty\n    penalty_dict = {}\n    for key, value in right_wrong_dict.items():\n        if value > 0:\n            penalty_dict[key] = (attempts_dict[key] - 1) * 20\n        else:\n            penalty_dict[key] = 0\n\n    # Create a dictionary to hold the problem and the time with penalties\n    time_penalty_dict = {}\n    for key, value in problem_dict.items():\n        time_penalty_dict[key] = value + penalty_dict[key]\n\n    # Create a list of all of the problems that were solved\n    solved_list = []\n    for key, value in right_wrong_dict.items():\n        if value > 0:\n            solved_list.append(key)\n\n    # Calculate the number of problems solved and the total time measure\n    number_of_problems_solved = len(solved_list)\n    total_time_measure = sum([time_penalty_dict[problem] for problem in solved_list])\n\n    # Output the results\n    print(str(number_of_problems_solved) + ' ' + str(total_time_measure))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    numberOfProblems = 0\n    totalTime = 0.0\n    currentTotalTime = 0\n    currentProblem = \"\"\n    problems = []\n    totalTimes = []\n    wrongs = []\n    while True:\n        line = input()\n        if line == \"-1\":\n            break\n        line = line.split(\" \")\n        currentTotalTime = int(line[0])\n        currentProblem = line[1]\n        if line[2] == \"right\":\n            if currentProblem not in problems:\n                numberOfProblems += 1\n                totalTime += float(currentTotalTime)\n                problems.append(currentProblem)\n                totalTimes.append(currentTotalTime)\n                wrongs.append(0)\n        else:\n            if currentProblem not in problems:\n                problems.append(currentProblem)\n                totalTimes.append(currentTotalTime)\n                wrongs.append(1)\n            else:\n                index = problems.index(currentProblem)\n                wrongs[index] += 1\n\n    for i in range(len(problems)):\n        if wrongs[i] > 0:\n            totalTime += wrongs[i] * 20.0\n\n    print(numberOfProblems, totalTime)\n\nmain()\n", "\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    # Read in the input.\n    input_lines = []\n    while True:\n        line = input()\n        if line == '-1':\n            break\n        input_lines.append(line)\n\n    # Split the input into a list of lists.\n    input_list = [line.split() for line in input_lines]\n\n    # Create a dictionary to hold the problem and the time.\n    problem_dict = {}\n    for entry in input_list:\n        problem_dict[entry[1]] = int(entry[0])\n\n    # Create a dictionary to hold the problem and the number of attempts\n    attempts_dict = {}\n    for entry in input_list:\n        if entry[1] not in attempts_dict.keys():\n            attempts_dict[entry[1]] = 0\n        attempts_dict[entry[1]] += 1\n\n    # Create a dictionary to hold the problem and the number of right/wrong\n    right_wrong_dict = {}\n    for entry in input_list:\n        if entry[1] not in right_wrong_dict.keys():\n            right_wrong_dict[entry[1]] = 0\n        if entry[2] == 'right':\n            right_wrong_dict[entry[1]] += 1\n        else:\n            right_wrong_dict[entry[1]] -= 1\n\n    # Create a dictionary to hold the problem and the penalty\n    penalty_dict = {}\n    for key, value in right_wrong_dict.items():\n        if value > 0:\n            penalty_dict[key] = (attempts_dict[key]-1)*20\n        else:\n            penalty_dict[key] = 0\n\n            penalty_dict[key] = 0\n\n    # Create a dictionary to hold the problem and the time with penalities\n    time_penalty_dict = {}\n    for key, value in problem_dict.items():\n        time_penalty_dict[key] = value + penalty_dict[key]\n\n    # Create a list of all of the problems that were solved\n    solved_list = []\n    for key, value in right_wrong_dict.items():\n        if value > 0:\n            solved_list.append(key)\n\n    # Calculate the number of problems solved and the total time measure\n    number_of_problems_solved = len(solved_list)\n    total_time_measure = sum([time_penalty_dict[problem] for problem in solved_list])\n\n    # Output the results\n    print(number_of_problems_solved, total_time_measure)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main function that reads in input and outputs the solution\n    \"\"\"\n    problems = {} # dictionary of problems\n    current_time = 0 # current time\n\n    # read in input\n    for line in sys.stdin:\n        # parse line\n        time, problem, result = line.strip().split()\n        time = int(time)\n        if time == -1:\n            break  \n\n        # add problem to dictionary if not exist\n        current_time = time\n        if problem not in problems:\n\n        # update problem information\n            problems[problem] = {'solved': False, 'penalty': 0, 'last_submit': current_time}\n        if result == 'right':\n            problems[problem]['solved'] = True\n            problems[problem]['last_submit'] = current_time\n        else:\n            problems[problem]['penalty'] += 20\n\n    # calculate and output solution\n    solved = sum([1 if problem['solved'] else 0 for problem in problems.values()])\n    penalty = sum([problem['penalty'] for problem in problems.values()])\n    submit_time = sum([problem['last_submit'] for problem in problems.values() if problem['solved']])\n    print(solved, submit_time + penalty)\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    \"\"\"\n    The main function.\n    \"\"\"\n    input_ = input().split()\n    while input_[0] != '-1':\n        print(input_[0])\n        input_ = input().split()\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    The main function.\n    \"\"\"\n    input_ = input()\n    while input_ != '-1': # -1 is the exit condition\n        input_ = input_.split()\n        print(input_[0])\n    print('-1')\n        input_ = input()\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    The main function.\n    \"\"\"\n    input_ = input()\n    while input_ != \"-1\":\n        input_ = input_.split()\n        print(input_[0])\n        input_ = input()\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    The main function.\n    \"\"\"\n    input_ = input()\n    while input_ != '-1':\n        input_ = input_.split()\n        print(input_[0], end='')\n        input_ = input()\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main program.\n    \"\"\"\n    # Initialize the submissions log and the number of problems solved.\n    submissions_log = []\n    problems_solved = 0\n    # Read in the submissions log.\n    while True:\n        submission = input()\n        if submission == \"-1\":\n            break\n        submissions_log.append(submission.split())\n    # Initialize the time score.\n    time_score = 0\n    for i, submission in enumerate(submissions_log):\n        # If the submissions is correct, add the time to the time score.\n        if submission[2] == \"right\":\n            time_score += int(submission[0])\n            problems_solved += 1\n        # If the submissions is wrong, check if the problem was solved.\n        else:\n            # If the problem was solved, add the penalty to the time score.\n            if submission[1] in [submissions_log[j][1] for j in range(i) if submissions_log[j][2] == \"right\"]:\n                time_score += 20\n    # Print the number of problems solved and the time score.\n    print(problems_solved, time_score)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys, collections\n\ndef main():\n    times = collections.defaultdict(int)\n    problems = collections.defaultdict(bool)\n    while True:\n        line = sys.stdin.readline()\n        if line == \"-1\\n\":\n            break\n        time, problem, result = line.split()\n        time = int(time)\n        if result == \"right\":\n            times[problem] = time\n            problems[problem] = True\n        else: times[problem] += 20\n    solved = 0\n    time = 0\n    for problem, solved_problem in problems.items():\n        if solved_problem:\n            time += times[problem]\n            solved += 1\n    print(solved, time)\n\nif __name__ == \"__main__\":\n    main()\n"]