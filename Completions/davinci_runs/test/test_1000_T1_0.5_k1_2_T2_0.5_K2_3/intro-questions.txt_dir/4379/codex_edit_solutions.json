["\ndef is_increasing(arr):\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            return False\n    return True\n\ndef find_increasing_sub_sequence(arr):\n    max_len = 0\n    max_indices = None\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if is_increasing(arr[i:j+1]) and len(arr[i:j+1]) > max_len:\n                max_len = len(arr[i:j+1])\n                max_indices = [i+1, j+1]\n    return max_len, max_indices\n\nif __name__ == \"__main__\":\n    n = int(input())\n    arr = list(map(int, input().split()))\n    max_len, max_indices = find_increasing_sub_sequence(arr)\n    print(max_len)\n    print(\" \".join(map(str, max_indices)))\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef read_ints() -> list:\n    return list(map(int, sys.stdin.readline().split()))\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "\ndef find_longest_increasing_subsequence(arr):\n    pass\n\nif __name__ == \"__main__\":\n    n = int(input())\n    arr = list(map(int, input().split()))\n    max_len, max_indices = find_longest_increasing_subsequence(arr)\n    print(max_len)\n    print(\" \".join(map(str, max_indices)))\n", "\ndef is_increasing(arr):\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            return False\n\n    return True\n\ndef find_increasing_sub_sequence(arr):\n    max_len = 0\n    max_indices = None\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if is_increasing(arr[i:j+1]) and len(arr[i:j+1]) > max_len:\n                max_len = len(arr[i:j+1])\n                max_indices = [i+1, j+1]\n    return max_len, max_indices\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    arr = list(map(int, input().split()))\n    max_len, max_indices = find_increasing_sub_sequence(arr)\n    print(max_len)\n    print(\" \".join(map(str, max_indices)))\n", "\n\n\nimport sys\n\ndef read_ints():\n    return list(map(int, sys.stdin.readline().split()))\n\n\ndef read_int():\n\n    return int(sys.stdin.readline())\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport os\nimport math\nimport random\nimport heapq \nimport time\nimport itertools\nimport sys\nfrom typing import List\n\n\n\"\"\"\ncreated by shhuan at 2019/12/14 23:22\n\n\"\"\"\n\ndef read_ints():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "\ndef is_increasing(arr):\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            return False\n\n    return True\n\ndef find_increasing_subsequence_brute_force(arr):\n    max_len = 0\n    max_indices = None\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if is_increasing(arr[i:j+1]) and len(arr[i:j+1]) > max_len:\n                max_len = len(arr[i:j+1])\n                max_indices = [i+1, j+1]\n    return max_len, max_indices\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    arr = list(map(int, input().split()))\n    max_len, max_indices = find_increasing_subsequence_brute_force(arr)\n    print(max_len)\n    print(\" \".join(map(str, max_indices)))\n", "\n\ndef is_increasing(arr):\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            return False\n    return True\n\ndef find_increasing_subsequence(arr):\n    max_len = 0\n    max_indices = [1, 1]\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if is_increasing(arr[i:j+1]) and len(arr[i:j+1]) > max_len:\n                max_len = len(arr[i:j+1])\n                max_indices = [i+1, j+1]\n    return max_len, max_indices\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    arr = list(map(int, input().split()))\n    max_len, max_indices = find_increasing_subsequence(arr)\n    print(max_len)\n    print(\" \".join(map(str, max_indices)))\n", "\ndef is_increasing(arr):\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            return False\n    return True\n\ndef find_increasing_subsequence_brute_force(arr):\n    max_len = 0\n    max_indices = []\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if is_increasing(arr[i:j+1]) and len(arr[i:j+1]) > max_len:\n                max_len = len(arr[i:j+1])\n                max_indices = [i, j]\n    return max_len, max_indices\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    arr = list(map(int, input().split()))\n    max_len, max_indices = find_increasing_subsequence_brute_force(arr)\n    print(max_len)\n    print(\" \".join(map(str, max_indices)))\n", "\nimport sys\n\ndef read_ints():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef main():\n    n = read_int()\n    a = [-1] + read_ints()\n\n    dp = [1] * (n + 1)\n    prev = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        for j in range(i - 1, 0, -1):\n            if a[j] < a[i]:\n                if dp[j] + 1 > dp[i]:\n                    dp[i] = dp[j] + 1\n                    prev[i] = j\n\n    max_len = max(dp)\n    max_index = dp.index(max_len)\n\n    ans = [max_index]\n    while prev[max_index] != 0:\n        max_index = prev[max_index]\n        ans.append(max_index)\n\n    print(max_len)\n    print(' '.join(map(str, reversed(ans))))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef read_ints():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef main():\n    n = read_int()\n    a = [0] + read_ints()\n\n    dp = [1] * (n + 1)\n    prev = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        for j in range(i - 1, 0, -1):\n            if a[j] < a[i]:\n                if dp[j] + 1 > dp[i]:\n                    dp[i] = dp[j] + 1\n                    prev[i] = j\n\n    max_len = max(dp)\n    max_index = dp.index(max_len)\n\n    ans = [max_index]\n    while prev[max_index] != -1:\n        max_index = prev[max_index]\n        ans.append(max_index)\n\n    print(max_len)\n    print(' '.join(map(str, reversed(ans))))\n\nif __name__ == '__main__':\n    main()\n", "\ndef is_increasing(arr):\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            return False\n    return True\n\ndef find_increasing_sub_sequence(arr):\n    max_len = 0\n    max_indices = None\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if is_increasing(arr[i:j + 1]) and len(arr[i:j + 1]) > max_len:\n                max_len = len(arr[i:j + 1])\n                max_indices = [i + 1, j + 1]\n    return max_len, max_indices\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    arr = list(map(int, input().split()))\n    max_len, max_indices = find_increasing_sub_sequence(arr)\n    print(max_len)\n    print(\" \".join(map(str, max_indices)))\n", "\ndef is_increasing(arr):\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            return False\n    return True\n\ndef find_increasing_subsequence(arr):\n    max_len = 0\n    max_indices = []\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if is_increasing(arr[i:j+1]) and len(arr[i:j+1]) > max_len:\n                max_len = len(arr[i:j+1])\n                max_indices = [i+1, j+1]\n    return max_len, max_indices\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    arr = list(map(int, input().split()))\n    max_len, max_indices = find_increasing_subsequence(arr)\n    print(max_len)\n    print(\" \".join(map(str, max_indices)))\n", "\n\ndef is_increasing(arr):\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            return False\n\n    return True\n\ndef find_increasing_subsequence_brute_force(arr):\n    max_len = 0\n    max_indices = None\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if is_increasing(arr[i:j+1]) and len(arr[i:j+1]) > max_len:\n                max_len = len(arr[i:j+1])\n                max_indices = [i+1, j+1]\n    return max_len, max_indices\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    arr = list(map(int, input().split()))\n    max_len, max_indices = find_increasing_subsequence_brute_force(arr)\n    print(max_len)\n    print(\" \".join(map(str, max_indices)))\n", "\nimport sys\n\ndef read_ints():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef main():\n    n = read_int()\n    a = [-1] + read_ints()\n\n    dp = [1] * (n + 1) # dp[i] is the length of the longest subsequence ending at i\n    prev = [0] * (n + 1) # prev[i] is the previous index of i in the longest subsequence ending at i\n\n    for i in range(1, n + 1):\n        for j in range(i - 1, 0, -1):\n            if a[j] < a[i]:\n                if dp[j] + 1 > dp[i]:\n                    dp[i] = dp[j] + 1\n                    prev[i] = j\n\n    max_len = max(dp) # the length of the longest subsequence\n    max_index = dp.index(max_len)\n\n    ans = [max_index]\n    while prev[max_index] != 0:\n        max_index = prev[max_index]\n        ans.append(max_index)\n\n    print(max_len)\n    print(' '.join(map(str, reversed(ans))))\n\nif __name__ == '__main__':\n    main()\n"]