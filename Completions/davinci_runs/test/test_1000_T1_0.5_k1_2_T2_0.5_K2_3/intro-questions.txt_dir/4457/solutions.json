["n = int(input())\na = [int(x) for x in input().split()]\nb = [(a[i], i + 1) for i in range(n)]\nb.sort(reverse=True)\nans = 0\nfor i in range(n):\n    ans += b[i][0] * i + 1\nprint(ans)\nfor i in b:\n    print(i[1], end=' ')", "n = int(input())\nl = list(map(int, input().split()))\nfor i in range(n):\n    l[i] = [l[i], i]\nres = 0\nl.sort()\nl = l[::-1]\nfor i2 in range(n):\n    res += i2 * l[i2][0] + 1\nprint(res)\nfor i3 in range(n):\n    print(l[i3][1] + 1, end=' ')", "'''input\n6\n5 4 5 4 4 5\n\n\n\n'''\nimport sys\nfrom collections import defaultdict as dd\nfrom itertools import  permutations as pp\nfrom itertools import combinations as cc\nfrom collections import Counter as ccd\nfrom random import randint as rd\nfrom bisect import bisect_left as bl\nfrom  heapq import heappush as hpush\nfrom heapq import heappop as hpop\nmod=10**9+7\n\ndef ri(flag=0):\n\tif flag==0:\n\t\treturn [int(i) for i in sys.stdin.readline().split()]\n\telse:\n\t\treturn int(sys.stdin.readline())\n\nn  =ri(1)\na = ri()\n\nb  = sorted(a,reverse=True)\nc = [i+1 for i in range(n)]\n\nc.sort(key = lambda x: a[x-1])\n\nc = c[::-1]\n\n\nans=0\nx=0\n\nfor i in range(n):\n\tans += (b[i]*(x)+1)\n\tx+=1\n\nprint(ans)\nprint(*c)", "import sys\ninput = lambda: sys.stdin.readline().strip()\n\nn = int(input())\nls = list(map(int, input().split()))\nls = [(i, ls[i-1]) for i in range(1, n+1)]\nls.sort(key=lambda x: x[1])\nls.reverse()\ncnt = 0\nfor i in range(n):\n    cnt+=i*ls[i][1]+1\nprint(cnt)\nfor i in range(n):\n    print(ls[i][0], end=' ')\nprint()\n", "from sys import stdin, stdout  \n\n\n\nn = int(input())\n\nD = (list(map(int, input().split())))\n\nfor i in range(n):\n    D[i] = [D[i], i]\nD.sort(reverse=True)\nans = 0\n\nfor i, d in enumerate(D):\n    ans += d[0]*i + 1\n    \nprint(ans)\n\nfor d in D:\n    print(d[1] + 1, end= ' ')", "\nn = int(input())\nl = list(map(int,input().split()))\nans = []\nyo = 0\ncount = 0\nfor i in range(n):\n    ans.append([l[i],i+1])\n\n\n\nfinal = []\nans.sort(reverse=True)\nfor a,b in ans:\n    count+=yo*a + 1\n    final.append(b)\n    yo+=1\nprint(count)\nprint(*final)\n\n", "from bisect import *\nfrom collections import *\nfrom itertools import *\nimport functools\nimport sys\nimport math\nfrom decimal import *\nfrom copy import *\nfrom heapq import *\ngetcontext().prec = 30\nMAX = sys.maxsize\nMAXN = 10**6+1\nMOD = 10**9+7\nspf = [i for i in range(MAXN)]\ndef sieve():\n    for i in range(2,MAXN,2):\n        spf[i] = 2\n    for i in range(3,int(MAXN**0.5)+1):\n        if spf[i]==i:\n            for j in range(i*i,MAXN,i):\n                if spf[j]==j:\n                    spf[j]=i\n\ndef mhd(a,b):\n    return abs(a[0]-b[0])+abs(b[1]-a[1])\n\ndef charIN(x= ' '):\n    return(sys.stdin.readline().strip().split(x))\n\ndef arrIN(x = ' '):\n    return list(map(int,sys.stdin.readline().strip().split(x)))\n\ndef eld(x,y):\n    a = y[0]-x[0]\n    b = x[1]-y[1]\n    return (a*a+b*b)**0.5\n\ndef lgcd(a):\n    g = a[0]\n    for i in range(1,len(a)):\n        g = math.gcd(g,a[i])\n    return g\n\ndef ms(a):\n    msf = -MAX\n    meh = 0\n    st = en = be = 0\n    for i in range(len(a)):\n        meh+=a[i]\n        if msf<meh:\n            msf = meh\n            st = be\n            en = i\n        if meh<0:\n            meh = 0\n            be = i+1\n    return msf,st,en\n\ndef ncr(n,r):\n    num=den=1\n    for i in range(r):\n        num = (num*(n-i))%MOD\n        den = (den*(i+1))%MOD\n\n    return (num*(pow(den,MOD-2,MOD)))%MOD\n\n\n\ndef flush():\n    return sys.stdout.flush()\n\n'''*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*'''\nn = int(input())\na = arrIN()\nx = [[i,a[i]] for i in range(n)]\nx.sort(key = lambda x:x[1],reverse=True)\nans = 0\ntemp = []\nfor i in range(n):\n    ans+=x[i][1]*i+1\n    temp.append(x[i][0]+1)\nprint(ans)\nprint(*temp)", "import sys\ninput = sys.stdin.readline\n\nn=int(input())\nA=list(map(int,input().split()))\n\nB=[[a,i] for i,a in enumerate(A)]\n\nB.sort(reverse=True)\n\nANS=0\nind=0\n\nfor b,i in B:\n    ANS+=b*ind+1\n    ind+=1\n\nprint(ANS)\nprint(*[B[i][1]+1 for i in range(n)])\n    \n    \n", "n = int(input())\nl = list( map( int, input().split() ) )\nl = [ (v, i) for i, v in enumerate( l ) ]\nl.sort()\nl.reverse()\ns, x = 0, 0\nfor v, i in l:\n    s += v * x + 1\n    x += 1\n\nprint( s )\nfor v, i in l:\n    print( i + 1 )\n", "n = int(input())\ns = list(map(lambda x: (int(x[1]),x[0]),enumerate(input().split())))\ns.sort(reverse=True)\nans = 0\nfor i in range(n):\n    ans+=(s[i][0]*i+1)\nprint(ans)\nprint(*map(lambda x: x[1]+1,s))", "n = int(input())\nli = list(map(int, input().split()))\n\nli = sorted(zip(li, list(range(len(li)))))[::-1]\nans = 0\n\nfor i in range(n):\n    ans += li[i][0] * i + 1\nprint(ans)\nans_li = []\nfor i in range(n):\n    ans_li.append(li[i][1] + 1)\nprint(*ans_li)\n\n", "#Starting 8 minutes late !\ndef fun(x):\n    return x[0]\nn=int(input())\na=list(map(int,input().strip().split()))\nfor i in range(n):\n    a[i]=[a[i],i+1]\na.sort(key=fun,reverse=True)\nop=0\nop2=\"\"\nfor i in range(n):\n    op2+=str(a[i][1])+\" \"\n    op+=a[i][0]*i+1\nprint(op)\nprint(op2)", "from operator import itemgetter\n\nN = int(input())\nA = list(map(int, input().split()))\n\nB = []\nfor i, a in enumerate(A):\n    B.append((i, a))\n\nB.sort(reverse=True, key = itemgetter(1))\n\nscore = 0\nfor n, (i, b) in enumerate(B):\n    score += b*n+1\n\nprint(score)\nfor i, _ in B:\n    print(i+1, end=' ')\nprint()", "n = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in range(n):\n    b.append([a[i], i])\nb.sort(key=lambda x: x[0], reverse=True)\ncnt = 0\ns = 0\nres = []\nfor i in range(n):\n    s += cnt * b[i][0] + 1\n    cnt += 1\n    res.append(str(b[i][1] + 1))\nprint(s)\nprint(' '.join(res))\n", "from collections import defaultdict\nn = int(input())\nrec = defaultdict(list)\norigi = list(map(int, input().split()))\nfor i in range(n):\n    rec[origi[i]].append(i + 1)\na = sorted(origi, reverse=True)\nl = 0\nans = []\n# x = 0\nfor i in range(n):\n    l += a[i] * i + 1\n    # x += 1\n    ans.append(rec[a[i]].pop())\nprint(l)\nfor i in ans:\n    print(i, end=' ')\nprint('')", "import collections, heapq, bisect, math\n\ndef gcd(a, b):\n    if b == 0: return a\n    return gcd(b, a%b)\n\ndef solve(A):\n    A = [(a,i) for i, a in enumerate(A)]\n    A.sort(reverse=True)\n\n    out = 0\n    for i in range(len(A)):\n        out += (i*A[i][0] + 1)\n    \n    print(out)\n    print(' '.join(str(i+1) for _, i in A))\n\n\n\n\n\nq = 1#input()\ntests = []\nfor test in range(1):\n    n = input()\n    tests.append([int(p) for p in input().split(' ')])\nfor test in tests: solve(test)\n#print(solve(n,b))\n", "n = int(input())\nA = list(map(int, input().split()))\nfor i in range(n):\n  A[i] = [-A[i], i]\nA.sort()\nans = 0\nfor i in range(n):\n  ans += i * (-A[i][0]) + 1\nprint(ans)\nfor x in A:\n  print(x[1] + 1, end=' ')", "#!/usr/bin/env python3\n\nn = int(input())\na = [int(i) for i in input().split()]\na = [(a[i], i) for i in range(len(a))]\na.sort(reverse=True)\n\ns = 0\norder = []\nfor i in range(len(a)):\n    s += a[i][0] * i + 1\n    order.append(a[i][1])\nprint(s)\nprint(' '.join([str(i + 1) for i in order]))\n", "n = int(input())\nl = list(map(int,input().split()))\nl1 = [i for i in range(1,n + 1)]\nfor i in range(n):\n    min1 = i\n    for j in range(i + 1,n):\n        if l[j] > l[min1]:\n            min1 = j\n    l[i],l[min1] = l[min1],l[i]\n    l1[i],l1[min1] = l1[min1],l1[i]\ncount = 0\nfor i in range(n):\n    count += l[i] * i + 1\nprint(count)\nprint(*l1)\n", "n=int(input())\nli=list(map(int,input().split()))\nd={}\nb=[]\nfor i in range(1,n+1):\n    k=li[i-1]\n    try:\n        d[k].append(i)\n    except KeyError:\n        d[k]=[i]\n        b.append(k)\nb.sort(reverse=True)\nans1=[]\nans=0\nl=0\nfor i in b:\n    for j in d[i]:\n        ans1.append(j)\n        ans+=l*i+1\n        l+=1\nprint(ans)\nprint(*ans1)\n    \n", "n = int(input())\na = [(int(el), i + 1) for i, el in enumerate(input().split())]\na = sorted(a, reverse=True)\nshots = 0\nfor i, (el, _) in enumerate(a):\n    shots += i * el + 1\nprint(shots)\nprint(*(i for _, i in a))\n", "'''input\n6\n5 4 5 4 4 5\n'''\nfrom sys import stdin\n\n\ndef check_valid(string):\n\tstack = []\n\tfor i in string:\n\t\tif i in ['(',  '[']:\n\t\t\tstack.append(i)\n\t\telif i == ')':\n\t\t\tif len(stack) > 0:\n\t\t\t\tif stack[-1] == '(':\n\t\t\t\t\tstack.pop()\n\t\t\t\t\tcontinue\n\t\t\treturn False\n\t\telif i == ']':\n\t\t\tif len(stack) > 0:\n\t\t\t\tif stack[-1] == '[':\n\t\t\t\t\tstack.pop()\n\t\t\t\t\tcontinue\n\t\t\treturn False\n\n\treturn len(stack) == 0\n\ndef merge(index):\n\taux = []\n\tif len(index) > 0:\n\t\taux = [index[0]]\n\t\tfor i in range(1, len(index)):\n\t\t\tif index[i][0] == aux[-1][1] + 1:\n\t\t\t\taux[-1][1] = index[i][1]\n\t\t\telse:\n\t\t\t\tif check_valid(string[aux[-1][1] + 1: index[i][0]]):\n\t\t\t\t\taux[-1][1] = index[i][1]\n\t\t\t\telse:\n\t\t\t\t\taux.append(index[i])\n\treturn aux\n\n\n# main starts\nn = int(stdin.readline().strip())\narr = []\narr = list(map(int, stdin.readline().split()))\nfor i in range(n):\n\tarr[i] = [i, arr[i]]\n\narr.sort(key = lambda x: x[1], reverse  = True)\ncount = 0 \nans = []\ntotal = 0\nfor i in range(n):\n\tindex, a = arr[i]\n\tans.append(index + 1)\n\ttotal += count * a + 1\n\n\tcount += 1\n\nprint(total)\nprint(*ans)\n", "from collections import defaultdict as df\nn=int(input())\nd=df(list)\na=list(map(int,input().rstrip().split()))\nfor i in range(n):\n    d[a[i]].append(i+1)\na.sort(reverse=True)\na=list(set(a))\na.sort(reverse=True)\nsum1=0\nans=[]\ncounter=0\nfor i in range(len(a)):\n    for j in d[a[i]]:\n        sum1+=(a[i]*counter) + 1\n        counter+=1\n        ans.append(j)\nprint(sum1)\nprint(*ans)\n    \n    \n"]