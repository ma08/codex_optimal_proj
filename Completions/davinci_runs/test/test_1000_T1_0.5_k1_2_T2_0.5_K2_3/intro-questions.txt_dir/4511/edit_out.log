2022-04-12 21:31:59.947351 num operations 2
2022-04-12 21:31:59.947360 size on input set 1
2022-04-12 21:32:07.635223 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "# coding: utf-8\n\nimport sys\n\ndef main():\n    n = int(input())\n    cards = {}\n    for i in range(n):\n        k = int(input())\n        cards[i] = []\n        for j in range(k):\n            cost, damage = [int(x) for x in input().split()]\n            cards[i].append((cost, damage))\n    damage = 0\n    for i in range(n):\n        cards[i].sort(key=lambda x: x[1], reverse=True)\n        cost = 0\n        damage = 0\n        for card in cards[i]:\n            if cost + card[0] <= 3:\n                cost += card[0]\n                if cost % 10 == 0:\n                    damage += card[1] * 2\n                else:\n                    damage += card[1]\n        damage += damage\n    print(damage)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(input())\n    turn_dict = {}\n    for i in range(n):\n        k = int(input())\n        turn_dict[i] = []\n        for j in range(k):\n            c, d = [int(x) for x in input().split()]\n            turn_dict[i].append((c, d))\n    damage = 0\n    for i in range(n):\n        turn_dict[i].sort(key=lambda x: x[1], reverse=True)\n        turn_cost = 0\n        turn_damage = 0\n        for card in turn_dict[i]:\n            if turn_cost + card[0] <= 3:\n                turn_cost += card[0]\n                if turn_cost % 10 == 0:\n                    turn_damage += card[1] * 2 \n                else:\n                    turn_damage += card[1]\n        damage += turn_damage\n    print(damage)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    n = int(input())\n    turn_dict = {}\n    for i in range(n):\n        k = int(input())\n        turn_dict[i] = []\n        for j in range(k):\n            c, d = [int(x) for x in input().split()]\n            turn_dict[i].append((c, d))\n    damage = 0\n    for i in range(n):\n        turn_dict[i].sort(key=lambda x: x[1], reverse=True)\n        turn_cost = 0\n        turn_damage = 0\n        for card in turn_dict[i]:\n            if turn_cost + card[0] <= 3:\n                turn_cost += card[0]\n                if turn_cost % 10 == 0:\n                    turn_damage += card[1] * 2\n                else:\n                    turn_damage += card[1]\n        damage += turn_damage\n    print(damage)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649799120,
  "object": "edit"
}
2022-04-12 21:32:07.635463 fix spelling mistakes 3 ['# coding: utf-8\n\nimport sys\n\ndef main():\n    n = int(input())\n    cards = {}\n    for i in range(n):\n        k = int(input())\n        cards[i] = []\n        for j in range(k):\n            cost, damage = [int(x) for x in input().split()]\n            cards[i].append((cost, damage))\n    damage = 0\n    for i in range(n):\n        cards[i].sort(key=lambda x: x[1], reverse=True)\n        cost = 0\n        damage = 0\n        for card in cards[i]:\n            if cost + card[0] <= 3:\n                cost += card[0]\n                if cost % 10 == 0:\n                    damage += card[1] * 2\n                else:\n                    damage += card[1]\n        damage += damage\n    print(damage)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n = int(input())\n    turn_dict = {}\n    for i in range(n):\n        k = int(input())\n        turn_dict[i] = []\n        for j in range(k):\n            c, d = [int(x) for x in input().split()]\n            turn_dict[i].append((c, d))\n    damage = 0\n    for i in range(n):\n        turn_dict[i].sort(key=lambda x: x[1], reverse=True)\n        turn_cost = 0\n        turn_damage = 0\n        for card in turn_dict[i]:\n            if turn_cost + card[0] <= 3:\n                turn_cost += card[0]\n                if turn_cost % 10 == 0:\n                    turn_damage += card[1] * 2 \n                else:\n                    turn_damage += card[1]\n        damage += turn_damage\n    print(damage)\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    n = int(input())\n    turn_dict = {}\n    for i in range(n):\n        k = int(input())\n        turn_dict[i] = []\n        for j in range(k):\n            c, d = [int(x) for x in input().split()]\n            turn_dict[i].append((c, d))\n    damage = 0\n    for i in range(n):\n        turn_dict[i].sort(key=lambda x: x[1], reverse=True)\n        turn_cost = 0\n        turn_damage = 0\n        for card in turn_dict[i]:\n            if turn_cost + card[0] <= 3:\n                turn_cost += card[0]\n                if turn_cost % 10 == 0:\n                    turn_damage += card[1] * 2\n                else:\n                    turn_damage += card[1]\n        damage += turn_damage\n    print(damage)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 21:32:07.635507 size on output set 3
2022-04-12 21:32:07.635514 size on input set 3
2022-04-12 21:32:14.024730 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# coding: utf-8\n\nimport sys\nimport math\n\ndef main():\n    a, b, c = [int(x) for x in input().split()]\n    p = (a + b + c) / 2\n    print(math.sqrt(p * (p - a) * (p - b) * (p - c)))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "# coding: utf-8\n\nimport sys\n\ndef main():\n    n = int(input())\n    cards = {}\n    for i in range(n):\n        k = int(input())\n        cards[i] = []\n        for j in range(k):\n            cost, damage = [int(x) for x in input().split()]\n            cards[i].append((cost, damage))\n    damage = 0\n    for i in range(n):\n        cards[i].sort(key=lambda x: x[1], reverse=True)\n        cost = 0\n        new_damage = 0\n        for card in cards[i]:\n            if cost + card[0] <= 3:\n                cost += card[0]\n                if cost % 10 == 0:\n                    new_damage += card[1] * 2\n                else:\n                    new_damage += card[1]\n        damage += new_damage\n    print(damage)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "# coding: utf-8\n\nimport sys\n\ndef main():\n    n = int(input())\n    cards = {}\n    for i in range(n):\n        k = int(input())\n        cards[i] = []\n        for j in range(k):\n            cost, damage = [int(x) for x in input().split()]\n            cards[i].append((cost, damage))\n    damage = 0\n    for i in range(n):\n        cards[i].sort(key=lambda x: x[1], reverse=True)\n        cost = 0\n        damage = 0\n        for card in cards[i]:\n            if cost + card[0] <= 3:\n                cost += card[0]\n                if cost % 10 == 0:\n                    damage += card[1] * 2\n                else:\n                    damage += card[1]\n    print(damage)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649799127,
  "object": "edit"
}
2022-04-12 21:32:14.024909 fix syntax errors 3 ['# coding: utf-8\n\nimport sys\nimport math\n\ndef main():\n    a, b, c = [int(x) for x in input().split()]\n    p = (a + b + c) / 2\n    print(math.sqrt(p * (p - a) * (p - b) * (p - c)))\n\nif __name__ == "__main__":\n    main()\n', '# coding: utf-8\n\nimport sys\n\ndef main():\n    n = int(input())\n    cards = {}\n    for i in range(n):\n        k = int(input())\n        cards[i] = []\n        for j in range(k):\n            cost, damage = [int(x) for x in input().split()]\n            cards[i].append((cost, damage))\n    damage = 0\n    for i in range(n):\n        cards[i].sort(key=lambda x: x[1], reverse=True)\n        cost = 0\n        new_damage = 0\n        for card in cards[i]:\n            if cost + card[0] <= 3:\n                cost += card[0]\n                if cost % 10 == 0:\n                    new_damage += card[1] * 2\n                else:\n                    new_damage += card[1]\n        damage += new_damage\n    print(damage)\n\nif __name__ == "__main__":\n    main()\n', '# coding: utf-8\n\nimport sys\n\ndef main():\n    n = int(input())\n    cards = {}\n    for i in range(n):\n        k = int(input())\n        cards[i] = []\n        for j in range(k):\n            cost, damage = [int(x) for x in input().split()]\n            cards[i].append((cost, damage))\n    damage = 0\n    for i in range(n):\n        cards[i].sort(key=lambda x: x[1], reverse=True)\n        cost = 0\n        damage = 0\n        for card in cards[i]:\n            if cost + card[0] <= 3:\n                cost += card[0]\n                if cost % 10 == 0:\n                    damage += card[1] * 2\n                else:\n                    damage += card[1]\n    print(damage)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 21:32:17.612569 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "from collections import defaultdict\nfrom operator import itemgetter\n\ndef main():\n    n = int(input())\n    turn_dict = defaultdict(list)\n    for i in range(n):\n        k = int(input())\n        for j in range(k):\n            c, d = [int(x) for x in input().split()]\n            turn_dict[i].append((c, d))\n    damage = 0\n    for i in range(n):\n        turn_dict[i].sort(key=itemgetter(1), reverse=True)\n        turn_cost = 0\n        turn_damage = 0\n        for card in turn_dict[i]:\n            if turn_cost + card[0] <= 3:\n                turn_cost += card[0]\n                if turn_cost % 10 == 0:\n                    turn_damage += card[1] * 2\n                else:\n                    turn_damage += card[1]\n        damage += turn_damage\n    print(damage)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    n = int(input())\n    turn_dict = {}\n    for i in range(n):\n        k = int(input())\n        turn_dict[i] = []\n        for j in range(k):\n            cost, damage = [int(x) for x in input().split()]\n            turn_dict[i].append((cost, damage))\n    damage = 0\n    for i in range(n):\n        turn_dict[i].sort(key=lambda x: x[1], reverse=True)\n        turn_cost = 0\n        turn_damage = 0\n        for card in turn_dict[i]:\n            if turn_cost + card[0] <= 3:\n                turn_cost += card[0]\n                if turn_cost % 10 == 0:\n                    turn_damage += card[1] * 2\n                else:\n                    turn_damage += card[1]\n        damage += turn_damage\n    print(damage)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "def main():\n    n = int(input())\n    turn_dict = {}\n    for i in range(n):\n        k = int(input())\n        turn_dict[i] = []\n        for j in range(k):\n            c, d = [int(x) for x in input().split()]\n            turn_dict[i].append((c, d))\n    damage = 0\n    for i in range(n):\n        turn_dict[i].sort(key=lambda x: x[1], reverse=True)\n        turn_cost = 0\n        turn_damage = 0\n        for card in turn_dict[i]:\n            if turn_cost + card[0] <= 3:\n                turn_cost += card[0]\n                if turn_cost % 10 == 0:\n                    turn_damage += card[1] * 2\n                else:\n                    turn_damage += card[1]\n        damage += turn_damage\n    print(damage)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649799134,
  "object": "edit"
}
2022-04-12 21:32:17.612764 fix syntax errors 3 ['from collections import defaultdict\nfrom operator import itemgetter\n\ndef main():\n    n = int(input())\n    turn_dict = defaultdict(list)\n    for i in range(n):\n        k = int(input())\n        for j in range(k):\n            c, d = [int(x) for x in input().split()]\n            turn_dict[i].append((c, d))\n    damage = 0\n    for i in range(n):\n        turn_dict[i].sort(key=itemgetter(1), reverse=True)\n        turn_cost = 0\n        turn_damage = 0\n        for card in turn_dict[i]:\n            if turn_cost + card[0] <= 3:\n                turn_cost += card[0]\n                if turn_cost % 10 == 0:\n                    turn_damage += card[1] * 2\n                else:\n                    turn_damage += card[1]\n        damage += turn_damage\n    print(damage)\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    n = int(input())\n    turn_dict = {}\n    for i in range(n):\n        k = int(input())\n        turn_dict[i] = []\n        for j in range(k):\n            cost, damage = [int(x) for x in input().split()]\n            turn_dict[i].append((cost, damage))\n    damage = 0\n    for i in range(n):\n        turn_dict[i].sort(key=lambda x: x[1], reverse=True)\n        turn_cost = 0\n        turn_damage = 0\n        for card in turn_dict[i]:\n            if turn_cost + card[0] <= 3:\n                turn_cost += card[0]\n                if turn_cost % 10 == 0:\n                    turn_damage += card[1] * 2\n                else:\n                    turn_damage += card[1]\n        damage += turn_damage\n    print(damage)\n\nif __name__ == "__main__":\n    main()\n', 'def main():\n    n = int(input())\n    turn_dict = {}\n    for i in range(n):\n        k = int(input())\n        turn_dict[i] = []\n        for j in range(k):\n            c, d = [int(x) for x in input().split()]\n            turn_dict[i].append((c, d))\n    damage = 0\n    for i in range(n):\n        turn_dict[i].sort(key=lambda x: x[1], reverse=True)\n        turn_cost = 0\n        turn_damage = 0\n        for card in turn_dict[i]:\n            if turn_cost + card[0] <= 3:\n                turn_cost += card[0]\n                if turn_cost % 10 == 0:\n                    turn_damage += card[1] * 2\n                else:\n                    turn_damage += card[1]\n        damage += turn_damage\n    print(damage)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 21:32:25.782097 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    turn_dict = {}\n    for _ in range(n):\n        k = int(input())\n        turn_dict[_] = []\n        for j in range(k):\n            c, d = [int(x) for x in input().split()]\n            turn_dict[_].append((c, d))\n    damage = 0\n    for _ in range(n):\n        turn_dict[_].sort(key=lambda x: x[1], reverse=True)\n        turn_cost = 0\n        turn_damage = 0\n        for card in turn_dict[i]:\n            if turn_cost + card[0] <= 3:\n                turn_cost += card[0]\n                if turn_cost % 10 == 0:\n                    turn_damage += card[1] * 2 \n                else:\n                    turn_damage += card[1]\n        damage += turn_damage\n    print(damage)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n = int(input())\n    turn_dict = []\n    for i in range(n):\n        k = int(input())\n        turn_dict[i] = []\n        for j in range(k):\n            c, d = [int(x) for x in input().split()]\n            turn_dict[i].append((c, d))\n    damage = 0\n    for i in range(n):\n        turn_dict[i].sort(key=lambda x: x[1], reverse=True)\n        turn_cost = 0\n        turn_damage = 0\n        for card in turn_dict[i]:\n            if turn_cost + card[0] <= 3:\n                turn_cost += card[0]\n                if turn_cost % 10 == 0:\n                    turn_damage += card[1] * 2 \n                else:\n                    turn_damage += card[1]\n        damage += turn_damage\n    print(damage)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    n = int(input())\n    turn_dict = {i: [] for i in range(n)}\n    for i in range(n):\n        k = int(input())\n        for j in range(k):\n            c, d = map(int, input().split())\n            turn_dict[i].append((c, d))\n    damage = 0\n    for i in range(n):\n        turn_dict[i].sort(key=lambda x: x[1], reverse=True)\n        turn_cost = 0\n        turn_damage = 0\n        for card in turn_dict[i]:\n            if turn_cost + card[0] <= 3:\n                turn_cost += card[0]\n                if turn_cost % 10 == 0:\n                    turn_damage += card[1] * 2 \n                else:\n                    turn_damage += card[1]\n        damage += turn_damage\n    print(damage)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649799137,
  "object": "edit"
}
2022-04-12 21:32:25.782300 fix syntax errors 3 ['\n\ndef main():\n    n = int(input())\n    turn_dict = {}\n    for _ in range(n):\n        k = int(input())\n        turn_dict[_] = []\n        for j in range(k):\n            c, d = [int(x) for x in input().split()]\n            turn_dict[_].append((c, d))\n    damage = 0\n    for _ in range(n):\n        turn_dict[_].sort(key=lambda x: x[1], reverse=True)\n        turn_cost = 0\n        turn_damage = 0\n        for card in turn_dict[i]:\n            if turn_cost + card[0] <= 3:\n                turn_cost += card[0]\n                if turn_cost % 10 == 0:\n                    turn_damage += card[1] * 2 \n                else:\n                    turn_damage += card[1]\n        damage += turn_damage\n    print(damage)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n = int(input())\n    turn_dict = []\n    for i in range(n):\n        k = int(input())\n        turn_dict[i] = []\n        for j in range(k):\n            c, d = [int(x) for x in input().split()]\n            turn_dict[i].append((c, d))\n    damage = 0\n    for i in range(n):\n        turn_dict[i].sort(key=lambda x: x[1], reverse=True)\n        turn_cost = 0\n        turn_damage = 0\n        for card in turn_dict[i]:\n            if turn_cost + card[0] <= 3:\n                turn_cost += card[0]\n                if turn_cost % 10 == 0:\n                    turn_damage += card[1] * 2 \n                else:\n                    turn_damage += card[1]\n        damage += turn_damage\n    print(damage)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n = int(input())\n    turn_dict = {i: [] for i in range(n)}\n    for i in range(n):\n        k = int(input())\n        for j in range(k):\n            c, d = map(int, input().split())\n            turn_dict[i].append((c, d))\n    damage = 0\n    for i in range(n):\n        turn_dict[i].sort(key=lambda x: x[1], reverse=True)\n        turn_cost = 0\n        turn_damage = 0\n        for card in turn_dict[i]:\n            if turn_cost + card[0] <= 3:\n                turn_cost += card[0]\n                if turn_cost % 10 == 0:\n                    turn_damage += card[1] * 2 \n                else:\n                    turn_damage += card[1]\n        damage += turn_damage\n    print(damage)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 21:32:25.782413 size on output set 9
2022-04-12 21:32:25.782433 num operations 2
2022-04-12 21:32:25.782438 size on input set 1
2022-04-12 21:32:28.056470 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef get_damages(turns):\n    damage = 0\n    for turn in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(list(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        damage += turn_damage\n    print(damage)\n\n\nif __name__ == '__main__':\n    turns = int(input())\n    get_damages(turns)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef get_turn_damage(turns):\n    damage = 0\n    for turn in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(list(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        damage += turn_damage\n    print(damage)\n\n\nif __name__ == '__main__':\n    turns = int(input())\n    get_turn_damage(turns)\n"
    },
    {
      "index": 2,
      "text": "\n\ndef get_damage(turns):\n    damage = 0\n    for turn in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(list(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        damage += turn_damage\n    print(damage) \n\n\nif __name__ == '__main__':\n    turns = int(input())\n    get_damage(turns)\n"
    }
  ],
  "created": 1649799145,
  "object": "edit"
}
2022-04-12 21:32:28.056718 fix spelling mistakes 3 ["\n\ndef get_damages(turns):\n    damage = 0\n    for turn in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(list(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        damage += turn_damage\n    print(damage)\n\n\nif __name__ == '__main__':\n    turns = int(input())\n    get_damages(turns)\n", "\n\ndef get_turn_damage(turns):\n    damage = 0\n    for turn in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(list(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        damage += turn_damage\n    print(damage)\n\n\nif __name__ == '__main__':\n    turns = int(input())\n    get_turn_damage(turns)\n", "\n\ndef get_damage(turns):\n    damage = 0\n    for turn in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(list(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        damage += turn_damage\n    print(damage) \n\n\nif __name__ == '__main__':\n    turns = int(input())\n    get_damage(turns)\n"]
2022-04-12 21:32:28.056776 size on output set 3
2022-04-12 21:32:28.056787 size on input set 3
2022-04-12 21:32:31.189057 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef get_damage(turns):\n    damage = 0\n    for turn in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(list(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        damage += turn_damage\n    print(damage)\n\n\nif __name__ == '__main__':\n    turns = int(input())\n    get_damage(turns)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef get_damages():\n    damage = 0\n    while True:\n        if cards == 0:\n            break\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(list(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        damage += turn_damage\n    print(damage)\n\n\nif __name__ == '__main__':\n    get_damages()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef get_damages(turns):\n    damage = 0\n    for turn in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(list(map(int, input().split())[:2]))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        damage += turn_damage\n    print(damage)\n\n\nif __name__ == '__main__':\n    turns = int(input())\n    get_damages(turns)\n"
    }
  ],
  "created": 1649799148,
  "object": "edit"
}
2022-04-12 21:32:31.189235 fix syntax errors 3 ["\n\ndef get_damage(turns):\n    damage = 0\n    for turn in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(list(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        damage += turn_damage\n    print(damage)\n\n\nif __name__ == '__main__':\n    turns = int(input())\n    get_damage(turns)\n", "\n\ndef get_damages():\n    damage = 0\n    while True:\n        if cards == 0:\n            break\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(list(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        damage += turn_damage\n    print(damage)\n\n\nif __name__ == '__main__':\n    get_damages()\n", "\n\ndef get_damages(turns):\n    damage = 0\n    for turn in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(list(map(int, input().split())[:2]))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        damage += turn_damage\n    print(damage)\n\n\nif __name__ == '__main__':\n    turns = int(input())\n    get_damages(turns)\n"]
2022-04-12 21:32:33.691295 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef get_total_damage(turns):\n    damage = 0\n    for turn in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(list(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        damage += turn_damage\n    print(damage)\n\n\nif __name__ == '__main__':\n    turns = int(input())\n    get_total_damage(turns)\n"
    },
    {
      "index": 1,
      "text": "\ndef get_turn_damage(turns):\n    damage = 0\n    for turn in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(list(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        damage += turn_damage\n    print(damage)\n\n\nif __name__ == '__main__':\n    turns = int(input())\n    get_turn_damage(turns)\n"
    },
    {
      "index": 2,
      "text": "\ndef get_turn_damage(turns):\n    damage = 0\n    for turn in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(list(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[: i + 1]]) > 3:\n                break\n        damage += turn_damage\n    print(damage)\n\n\nif __name__ == '__main__':\n    turns = int(input())\n    get_turn_damage(turns)\n"
    }
  ],
  "created": 1649799151,
  "object": "edit"
}
2022-04-12 21:32:33.691469 fix syntax errors 3 ["\n\ndef get_total_damage(turns):\n    damage = 0\n    for turn in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(list(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        damage += turn_damage\n    print(damage)\n\n\nif __name__ == '__main__':\n    turns = int(input())\n    get_total_damage(turns)\n", "\ndef get_turn_damage(turns):\n    damage = 0\n    for turn in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(list(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        damage += turn_damage\n    print(damage)\n\n\nif __name__ == '__main__':\n    turns = int(input())\n    get_turn_damage(turns)\n", "\ndef get_turn_damage(turns):\n    damage = 0\n    for turn in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(list(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[: i + 1]]) > 3:\n                break\n        damage += turn_damage\n    print(damage)\n\n\nif __name__ == '__main__':\n    turns = int(input())\n    get_turn_damage(turns)\n"]
2022-04-12 21:32:37.136567 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef get_damage(turns):\n    damage = 0\n    for turn in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(list(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        damage += turn_damage\n    print(damage)\n\n\nif __name__ == '__main__':\n    turns = int(input())\n    get_damage(turns)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef get_damage(turns):\n    damage = 0\n    for turn in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(tuple(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][0]\n            else:\n                turn_damage += costs[i][0]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        damage += turn_damage\n    print(damage) \n\n\nif __name__ == '__main__':\n    turns = int(input())\n    get_damage(turns)\n"
    },
    {
      "index": 2,
      "text": "\n\ndef get_damage(turns):\n    damage = 0\n    for turn in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(tuple(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        damage += turn_damage\n    print(damage)\n\n\nif __name__ == '__main__':\n    turns = int(input())\n    get_damage(turns)\n"
    }
  ],
  "created": 1649799153,
  "object": "edit"
}
2022-04-12 21:32:37.136755 fix syntax errors 3 ["\ndef get_damage(turns):\n    damage = 0\n    for turn in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(list(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        damage += turn_damage\n    print(damage)\n\n\nif __name__ == '__main__':\n    turns = int(input())\n    get_damage(turns)\n", "\n\ndef get_damage(turns):\n    damage = 0\n    for turn in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(tuple(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][0]\n            else:\n                turn_damage += costs[i][0]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        damage += turn_damage\n    print(damage) \n\n\nif __name__ == '__main__':\n    turns = int(input())\n    get_damage(turns)\n", "\n\ndef get_damage(turns):\n    damage = 0\n    for turn in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(tuple(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        damage += turn_damage\n    print(damage)\n\n\nif __name__ == '__main__':\n    turns = int(input())\n    get_damage(turns)\n"]
2022-04-12 21:32:37.136844 size on output set 9
