["\n\ndef get_damages():\n    damage = 0\n    while True:\n        if cards == 0:\n            break\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(list(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        damage += turn_damage\n    print(damage)\n\n\nif __name__ == '__main__':\n    get_damages()\n", "\ndef get_turn_damage(turns):\n    damage = 0\n    for turn in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(list(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        damage += turn_damage\n    print(damage)\n\n\nif __name__ == '__main__':\n    turns = int(input())\n    get_turn_damage(turns)\n", "# coding: utf-8\n\nimport sys\n\ndef main():\n    n = int(input())\n    cards = {}\n    for i in range(n):\n        k = int(input())\n        cards[i] = []\n        for j in range(k):\n            cost, damage = [int(x) for x in input().split()]\n            cards[i].append((cost, damage))\n    damage = 0\n    for i in range(n):\n        cards[i].sort(key=lambda x: x[1], reverse=True)\n        cost = 0\n        new_damage = 0\n        for card in cards[i]:\n            if cost + card[0] <= 3:\n                cost += card[0]\n                if cost % 10 == 0:\n                    new_damage += card[1] * 2\n                else:\n                    new_damage += card[1]\n        damage += new_damage\n    print(damage)\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef main():\n    n = int(input())\n    turn_dict = {}\n    for i in range(n):\n        k = int(input())\n        turn_dict[i] = []\n        for j in range(k):\n            cost, damage = [int(x) for x in input().split()]\n            turn_dict[i].append((cost, damage))\n    damage = 0\n    for i in range(n):\n        turn_dict[i].sort(key=lambda x: x[1], reverse=True)\n        turn_cost = 0\n        turn_damage = 0\n        for card in turn_dict[i]:\n            if turn_cost + card[0] <= 3:\n                turn_cost += card[0]\n                if turn_cost % 10 == 0:\n                    turn_damage += card[1] * 2\n                else:\n                    turn_damage += card[1]\n        damage += turn_damage\n    print(damage)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef get_damage(turns):\n    damage = 0\n    for turn in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(list(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        damage += turn_damage\n    print(damage)\n\n\nif __name__ == '__main__':\n    turns = int(input())\n    get_damage(turns)\n", "\n\ndef get_total_damage(turns):\n    damage = 0\n    for turn in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(list(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        damage += turn_damage\n    print(damage)\n\n\nif __name__ == '__main__':\n    turns = int(input())\n    get_total_damage(turns)\n", "\nimport sys\n\ndef main():\n    n = int(input())\n    turn_dict = {i: [] for i in range(n)}\n    for i in range(n):\n        k = int(input())\n        for j in range(k):\n            c, d = map(int, input().split())\n            turn_dict[i].append((c, d))\n    damage = 0\n    for i in range(n):\n        turn_dict[i].sort(key=lambda x: x[1], reverse=True)\n        turn_cost = 0\n        turn_damage = 0\n        for card in turn_dict[i]:\n            if turn_cost + card[0] <= 3:\n                turn_cost += card[0]\n                if turn_cost % 10 == 0:\n                    turn_damage += card[1] * 2 \n                else:\n                    turn_damage += card[1]\n        damage += turn_damage\n    print(damage)\n\nif __name__ == \"__main__\":\n    main()\n", "from collections import defaultdict\nfrom operator import itemgetter\n\ndef main():\n    n = int(input())\n    turn_dict = defaultdict(list)\n    for i in range(n):\n        k = int(input())\n        for j in range(k):\n            c, d = [int(x) for x in input().split()]\n            turn_dict[i].append((c, d))\n    damage = 0\n    for i in range(n):\n        turn_dict[i].sort(key=itemgetter(1), reverse=True)\n        turn_cost = 0\n        turn_damage = 0\n        for card in turn_dict[i]:\n            if turn_cost + card[0] <= 3:\n                turn_cost += card[0]\n                if turn_cost % 10 == 0:\n                    turn_damage += card[1] * 2\n                else:\n                    turn_damage += card[1]\n        damage += turn_damage\n    print(damage)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef get_damage(turns):\n    damage = 0\n    for turn in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(list(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        damage += turn_damage\n    print(damage)\n\n\nif __name__ == '__main__':\n    turns = int(input())\n    get_damage(turns)\n", "\n\ndef get_damage(turns):\n    damage = 0\n    for turn in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(tuple(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        damage += turn_damage\n    print(damage)\n\n\nif __name__ == '__main__':\n    turns = int(input())\n    get_damage(turns)\n", "def main():\n    n = int(input())\n    turn_dict = {}\n    for i in range(n):\n        k = int(input())\n        turn_dict[i] = []\n        for j in range(k):\n            c, d = [int(x) for x in input().split()]\n            turn_dict[i].append((c, d))\n    damage = 0\n    for i in range(n):\n        turn_dict[i].sort(key=lambda x: x[1], reverse=True)\n        turn_cost = 0\n        turn_damage = 0\n        for card in turn_dict[i]:\n            if turn_cost + card[0] <= 3:\n                turn_cost += card[0]\n                if turn_cost % 10 == 0:\n                    turn_damage += card[1] * 2\n                else:\n                    turn_damage += card[1]\n        damage += turn_damage\n    print(damage)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef get_turn_damage(turns):\n    damage = 0\n    for turn in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(list(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[: i + 1]]) > 3:\n                break\n        damage += turn_damage\n    print(damage)\n\n\nif __name__ == '__main__':\n    turns = int(input())\n    get_turn_damage(turns)\n", "\n\ndef main():\n    n = int(input())\n    turn_dict = {}\n    for _ in range(n):\n        k = int(input())\n        turn_dict[_] = []\n        for j in range(k):\n            c, d = [int(x) for x in input().split()]\n            turn_dict[_].append((c, d))\n    damage = 0\n    for _ in range(n):\n        turn_dict[_].sort(key=lambda x: x[1], reverse=True)\n        turn_cost = 0\n        turn_damage = 0\n        for card in turn_dict[i]:\n            if turn_cost + card[0] <= 3:\n                turn_cost += card[0]\n                if turn_cost % 10 == 0:\n                    turn_damage += card[1] * 2 \n                else:\n                    turn_damage += card[1]\n        damage += turn_damage\n    print(damage)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef get_damages(turns):\n    damage = 0\n    for turn in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(list(map(int, input().split())[:2]))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][1]\n            else:\n                turn_damage += costs[i][1]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        damage += turn_damage\n    print(damage)\n\n\nif __name__ == '__main__':\n    turns = int(input())\n    get_damages(turns)\n", "\n\ndef main():\n    n = int(input())\n    turn_dict = []\n    for i in range(n):\n        k = int(input())\n        turn_dict[i] = []\n        for j in range(k):\n            c, d = [int(x) for x in input().split()]\n            turn_dict[i].append((c, d))\n    damage = 0\n    for i in range(n):\n        turn_dict[i].sort(key=lambda x: x[1], reverse=True)\n        turn_cost = 0\n        turn_damage = 0\n        for card in turn_dict[i]:\n            if turn_cost + card[0] <= 3:\n                turn_cost += card[0]\n                if turn_cost % 10 == 0:\n                    turn_damage += card[1] * 2 \n                else:\n                    turn_damage += card[1]\n        damage += turn_damage\n    print(damage)\n\nif __name__ == \"__main__\":\n    main()\n", "# coding: utf-8\n\nimport sys\n\ndef main():\n    n = int(input())\n    cards = {}\n    for i in range(n):\n        k = int(input())\n        cards[i] = []\n        for j in range(k):\n            cost, damage = [int(x) for x in input().split()]\n            cards[i].append((cost, damage))\n    damage = 0\n    for i in range(n):\n        cards[i].sort(key=lambda x: x[1], reverse=True)\n        cost = 0\n        damage = 0\n        for card in cards[i]:\n            if cost + card[0] <= 3:\n                cost += card[0]\n                if cost % 10 == 0:\n                    damage += card[1] * 2\n                else:\n                    damage += card[1]\n    print(damage)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef get_damage(turns):\n    damage = 0\n    for turn in range(turns):\n        cards = int(input())\n        costs = []\n        for _ in range(cards):\n            costs.append(tuple(map(int, input().split())))\n        costs.sort(key=lambda x: x[1], reverse=True)\n        turn_damage = 0\n        for i in range(len(costs)):\n            if i % 10 == 0:\n                turn_damage += 2 * costs[i][0]\n            else:\n                turn_damage += costs[i][0]\n            if sum([cost[0] for cost in costs[:i + 1]]) > 3:\n                break\n        damage += turn_damage\n    print(damage) \n\n\nif __name__ == '__main__':\n    turns = int(input())\n    get_damage(turns)\n", "# coding: utf-8\n\nimport sys\nimport math\n\ndef main():\n    a, b, c = [int(x) for x in input().split()]\n    p = (a + b + c) / 2\n    print(math.sqrt(p * (p - a) * (p - b) * (p - c)))\n\nif __name__ == \"__main__\":\n    main()\n"]