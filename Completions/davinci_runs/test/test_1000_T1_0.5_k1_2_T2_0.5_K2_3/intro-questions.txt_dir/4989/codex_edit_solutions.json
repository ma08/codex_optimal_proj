["#! /usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    pieces = [int(x) for x in sys.stdin.readline().split()]\n    pieces.sort()\n    alice = 0\n    bob = 0\n    for i in range(n):\n        if i % 2 == 0:\n            alice += pieces[n-i-1]\n        else:\n            bob += pieces[n-i-1]\n    print(alice - bob)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    This function is the main function of this program.\n\n    This function reads the number of cards and the values of the cards from the input.\n    Then, it prints the total value of Alice's cards and the total value of Bob's cards.\n\n    This function uses the function choose_card() to choose the card to take.\n    \"\"\"\n    # Read the number of cards.\n    n = int(input())\n\n    # Read the values of the cards.\n    cards = [int(a) for a in input().split()]\n\n    # Initialize the total value of Alice's cards and the total value of Bob's cards.\n    alice_total = 0\n    bob_total = 0\n\n    # Loop through all the cards.\n    for i in range(n):\n        # Check if it is Alice's turn.\n        if i % 2 == 0:\n            # Choose the card for Alice.\n            alice_card = choose_card(cards)\n\n            # Add the value of Alice's card to the total value of Alice's cards.\n            alice_total += alice_card\n\n            # Remove the chosen card from the list of cards.\n            cards.remove(alice_card)\n        # Check if it is Bob's turn.\n        else:\n            # Choose the card for Bob.\n            bob_card = choose_card(cards)\n\n            # Add the value of Bob's card to the total value of Bob's cards.\n            bob_total += bob_card\n\n            # Remove the chosen card from the list of cards.\n            cards.remove(bob_card)\n\n    # Print the total value of Alice's cards and the total value of Bob's cards.\n    print(alice_total, bob_total)\n\ndef choose_card(cards):\n    \"\"\"\n    This function chooses a card to take.\n\n    This function takes a list of cards as the parameter.\n    It returns the value of the chosen card.\n    \"\"\"\n    # Initialize the maximum value of the chosen card.\n    max_card = 0\n\n    # Loop through all the cards.\n    for card in cards:\n        # Check if the value of the card is greater than the maximum value of the chosen card.\n        if card > max_card:\n            # Set the value of the card as the new maximum value of the chosen card.\n            max_card = card\n\n    # Return the maximum value of the chosen card.\n    return max_card\n\n# Call the main function.\nmain()\n", "\n\ndef main():\n    \"\"\"\n    This function is the main function of this program.\n\n    This function reads the number of pieces and the values of the pieces from the input.\n    Then, it prints the total value of Alice's pieces and the total value of Bob's pieces.\n\n    This function uses the function choose_piece() to choose the piece to take.\n    \"\"\"\n    # Read the number of pieces.\n    n = int(input())\n\n    # Read the values of the pieces.\n    pieces = [int(a) for a in input().split()]\n\n    # Initialize the total value of Alice's pieces and the total value of Bob's pieces.\n    alice_total = 0\n    bob_total = 0\n\n    # Loop through all the pieces.\n    for i in range(n):\n        # Check if it is Alice's turn.\n        if i % 2 == 0:\n            # Choose the piece for Alice.\n            alice_piece = choose_piece(pieces)\n\n            # Add the value of Alice's piece to the total value of Alice's pieces.\n            alice_total += alice_piece\n\n            # Remove the chosen piece from the list of pieces.\n            pieces.remove(alice_piece)\n        # Check if it is Bob's turn.\n        else:\n            # Choose the piece for Bob.\n            bob_piece = choose_piece(pieces)\n\n            # Add the value of Bob's piece to the total value of Bob's pieces.\n            bob_total += bob_piece\n\n            # Remove the chosen piece from the list of pieces.\n            pieces.remove(bob_piece)\n\n    # Print the total value of Alice's pieces and the total value of Bob's pieces.\n    print(\"{} {}\".format(alice_total, bob_total))\n\ndef choose_piece(pieces):\n    \"\"\"\n    This function chooses a piece to take.\n\n    This function takes a list of pieces as the parameter.\n    It returns the value of the chosen piece.\n    \"\"\"\n    # Initialize the maximum value of the chosen piece.\n    max_piece = 0\n\n    # Loop through all the pieces.\n    for piece in pieces:\n        # Check if the value of the piece is greater than the maximum value of the chosen piece.\n        if piece > max_piece:\n            # Set the value of the piece as the new maximum value of the chosen piece.\n            max_piece = piece\n\n    # Return the maximum value of the chosen piece.\n    return max_piece\n\n# Call the main function.\nmain()\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    number_of_pieces = int(input())\n    pieces = [int(x) for x in input().split()]\n    print(max_sum(pieces))\n\n\ndef max_sum(pieces):\n    \"\"\"\n    Returns the maximum sum of integers that can be obtained by playing optimally\n    \"\"\"\n    return max_sum_recursive(pieces, 0, len(pieces) - 1)\n\n\ndef max_sum_recursive(pieces, left_index, right_index):\n    \"\"\"\n    Recursively compute the maximum sum of integers that can be obtained by\n    playing optimally\n    \"\"\"\n    if left_index == right_index:\n        return pieces[left_index]\n    else:\n        return max(pieces[left_index] + min(max_sum_recursive(pieces, left_index + 2, right_index), max_sum_recursive(pieces, left_index + 1, right_index - 1)), pieces[right_index] + min(max_sum_recursive(pieces, left_index + 1, right_index - 1), max_sum_recursive(pieces, left_index, right_index - 2)))  # noqa: E501\n\n\nmain()\n", "\n\ndef play(n, pieces):\n    if n == 1:\n        return pieces[0], 0\n    elif n == 2:\n        return max(pieces[0], pieces[1]), min(pieces[0], pieces[1])\n    else:\n        if pieces[0] > pieces[-1]:\n            a, b = play(n-1, pieces[1:])\n            return pieces[0] + b, a\n        else:\n            a, b = play(n-1, pieces[:-1])\n            return a, pieces[-1] + b\n\n\nif __name__ == '__main__':\n    n = int(input())\n    pieces = [int(x) for x in input().split()]\n    a, b = play(n, pieces)\n    print(a, b)\n", "\n\ndef play(n, pieces):\n    if n == 1:\n        return pieces[0], 0\n    elif n == 2:\n        return max(pieces[0], pieces[1]), min(pieces[0], pieces[1])\n    else:\n        if pieces[0] > pieces[-1]:\n            a, b = play(n-1, pieces[1:])\n            return pieces[0] + b, a\n        else:\n            a, b = play(n-1, pieces[:-1])\n            return a, pieces[-1] + b\n\na, b = play(n, pieces)\n\nprint(a, b)\n", "\n\n#Solution\nn = int(input()) \na = [int(x) for x in input().split()] \na.sort() \n\nsuma = sum(a[::2]) \nsumb = sum(a[1::2]) \n\nprint(suma, sumb) \n", "#!/usr/bin/env python\n# coding: utf-8\n\n\n# In[1]:\n\n\nn = int(input()) \na = [int(i) for i in input().split()] \na.sort() \nalice = 0 \nbob = 0 \nfor i in range(n): \n    if i % 2 == 0: \n        alice += a[n - i - 1] \n    else: \n        bob += a[n - i - 1] \nprint(alice, bob) \n\n\n# In[ ]:\n\n\n\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    number_of_pieces = int(input())\n    pieces = [int(x) for x in input().split()]\n    print(max_sum(pieces))\n\ndef max_sum(pieces):\n    \"\"\"\n    Returns the maximum sum of integers that can be obtained by playing optimally.\n    \"\"\"\n    return max_sum_recursive(pieces, 0, len(pieces)-1)\n\ndef max_sum_recursive(pieces, left_index, right_index):\n    \"\"\"\n    Recursively computes the maximum sum of integers that can be obtained by playing optimally.\n    \"\"\"\n    if left_index == right_index:\n        return pieces[left_index]\n    else:\n        return max(pieces[left_index] + min(max_sum_recursive(pieces, left_index+2, right_index), max_sum_recursive(pieces, left_index+1, right_index-1)), pieces[right_index] + min(max_sum_recursive(pieces, left_index+1, right_index-1), max_sum_recursive(pieces, left_index, right_index-2)))\n\nmain()\n", "import sys\n\nn = int(input())\na = sorted([int(i) for i in sys.stdin.readline().split()])\nAlice = 0\nBob = 0\n\nfor i in range(n):\n    if i % 2 == 0:\n        Alice += a[n - i - 1]\n    else:\n        Bob += a[n - i - 1]\nprint(Alice, Bob)\n", "# coding: utf-8\n\nn = int(input())\na = [int(i) for i in input().split()]\na.sort()\nalice = 0\nbob = 0\nfor i in range(n):\n    if i % 2 == 0:\n        alice += a[n - i - 1]\n    else:\n        bob += a[n - i - 1]\nprint(alice, bob)\n", "\nn = int(input())\na = [int(i) for i in input().split()]\na.sort()\nalice = 0\nbob = 0\nfor i in range(1, n + 1):\n    if i % 2 == 1:\n        alice += a[-i]\n    elif i % 2 == 0:\n        bob += a[-i]\nprint(alice, bob)\n", "# https://codeforces.com/contest/1141/problem/A\n\nn = int(input())\npieces = [int(x) for x in input().split()]\n\n\ndef play(n, pieces):\n    if n == 1:\n        return pieces[0], 0\n    elif n == 2:\n        return max(pieces[0], pieces[1]), min(pieces[0], pieces[1])\n    else:\n        if pieces[0] > pieces[-1]:\n            a, b = play(n-1, pieces[1:])\n            return pieces[0] + b, a\n        else:\n            a, b = play(n-1, pieces[:-1])\n            return a, pieces[-1] + b\n\na, b = play(n, pieces)\nprint(a, b)\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    number_of_pieces = int(input())\n    pieces = [int(x) for x in input().split()]\n    print(max_sum(pieces))\n\ndef max_sum(pieces):\n    \"\"\"\n    Returns the maximum sum of integers that can be obtained by playing optimally\n    \"\"\"\n    return max_sum_recursive(pieces, 0, len(pieces) - 1) - 1\n\ndef max_sum_recursive(pieces, left_index, right_index):\n    \"\"\"\n    Recursively compute the maximum sum of integers that can be obtained by playing optimally\n    \"\"\"\n    if left_index == right_index:\n        return pieces[left_index]\n    else:\n        return max(pieces[left_index] + min(max_sum_recursive(pieces, left_index + 2, right_index), max_sum_recursive(pieces, left_index + 1, right_index - 1)), pieces[right_index] + min(max_sum_recursive(pieces, left_index + 1, right_index - 1), max_sum_recursive(pieces, left_index, right_index - 2)))\n\nmain()\n", "\nn = int(input())\na = [int(i) for i in input().split()]\na.sort()\nAlice = 0\nBob = 0\n\nfor i in range(n):\n    if i % 2 == 0:\n        Alice += a[n - i - 1]\n    else:\n        Bob += a[n - i - 1]\nprint(Alice, Bob)\n", "\n\nimport sys\n\n    #n = int(input())\ndef main():\n    #pieces = sorted([int(x) for x in input().split()])\n    n = int(sys.stdin.readline())\n    pieces = sorted([int(x) for x in sys.stdin.readline().split()])\n    alice = 0\n    bob = 0\n    for i in range(n):\n        if i % 2 == 0:\n            alice += pieces[n-i-1]\n        else:\n            bob += pieces[n-i-1]\n    print(alice, bob)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    pieces = [int(x) for x in input().split()]\n    print(max_sum(pieces))\n\ndef max_sum(pieces):\n    \"\"\"\n    Returns the maximum sum of integers that can be obtained by playing optimally.\n    \"\"\"\n    return max_sum_recursive(pieces, 0, len(pieces) - 1)\n\ndef max_sum_recursive(pieces, left_index, right_index):\n    \"\"\"\n    Recursively computes the maximum sum of integers that can be obtained by playing optimally.\n    \"\"\"\n    if left_index == right_index:\n        return pieces[left_index]\n    else:\n        return max(\n            pieces[left_index] + min(\n                max_sum_recursive(pieces, left_index + 2, right_index),\n                max_sum_recursive(pieces, left_index + 1, right_index - 1)\n            ),\n            pieces[right_index] + min(\n                max_sum_recursive(pieces, left_index + 1, right_index - 1),\n                max_sum_recursive(pieces, left_index, right_index - 2)\n            )\n        )\n\nmain()\n", "\nimport sys\n\nif __name__ == \"__main__\":\n    n = int(sys.stdin.readline())\n    pieces = [int(x) for x in sys.stdin.readline().split()]\n    pieces.sort()\n    alice = 0\n    bob = 0\n    for i in range(n):\n        if i % 2 == 0:\n            alice += pieces[n-i-1]\n        else:\n            bob += pieces[n-i-1]\n    print(alice - bob)\n", "\ndef main():\n    pass\n\nmain()\n", "\ndef main():\n    n = int(input())\n    a = [int(item) for item in input().split(' ')]\n    a.sort()\n    a.reverse()\n    alice_sum = 0\n    bob_sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            alice_sum += a[i]\n        else:\n            bob_sum += a[i]\n    print(alice_sum, bob_sum)\n\n\nmain()\n", "\nimport sys\n\ndef main():\n    a, b, c = [int(x) for x in sys.stdin.readline().split()]\n    print(a * b * c)\n\nif __name__ == \"__main__\":\n    main()\n", "n = int(input())\npieces = [int(x) for x in input().split()]\n\ndef play(n, pieces):\n    if n == 1:\n        return pieces[0], 0\n    elif n == 2:\n        return max(pieces[0], pieces[1]), min(pieces[0], pieces[1])\n    else:\n        if pieces[0] > pieces[-1]:\n            a, b = play(n-1, pieces[1:])\n            return pieces[0] + b, a\n        else:\n            a, b = play(n-1, pieces[:-1])\n            return a, pieces[-1] + b\n\na, b = play(n, pieces)\nprint(a, b)\n", "#\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    pieces = [int(x) for x in sys.stdin.readline().split()]\n    pieces.sort()\n    alice = 0\n    bob = 0\n    for i in range(n): # i is a counter\n        if i % 2 == 0:\n            alice += pieces[n-i-1]\n        else:\n            bob += pieces[n-i-1]\n    print(alice, bob)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    This is the main function of this program.\n\n    It reads the number of slices and the values of the slices from the input.\n    Then, it prints the total value of Alice's slices and the total value of Bob's slices.\n\n    It uses the function choose_piece() to choose the piece to take.\n    \"\"\"\n    # Read the number of slices.\n    n = int(input())\n\n    # Read the values of the pieces.\n    pieces = [int(a) for a in input().split()]\n\n    # Initialize the total value of Alice's pieces and the total value of Bob's pieces.\n    alice_total = 0\n    bob_total = 0\n\n    # Loop through all the pieces.\n    for i in range(n):\n        # Check if it is Alice's turn.\n        if i % 2 == 0:\n            # Choose the piece for Alice.\n            alice_piece = choose_piece(pieces)\n\n            # Add the value of Alice's piece to the total value of Alice's pieces.\n            alice_total += alice_piece\n\n            # Remove the chosen piece from the list of pieces.\n            pieces.remove(alice_piece)\n        # Check if it is Bob's turn.\n        else:\n            # Choose the piece for Bob.\n            bob_piece = choose_piece(pieces)\n\n            # Add the value of Bob's piece to the total value of Bob's pieces.\n            bob_total += bob_piece\n\n            # Remove the chosen piece from the list of pieces.\n            pieces.remove(bob_piece)\n\n    # Print the total value of Alice's pieces and the total value of Bob's pieces.\n    print(\"{} {}\".format(alice_total, bob_total))\n\ndef choose_piece(pieces):\n    \"\"\"\n    It chooses a piece to take.\n\n    It takes a list of pieces as the parameter.\n    It returns the value of the chosen piece.\n    \"\"\"\n    # Initialize the maximum value of the chosen piece.\n    max_piece = 0\n\n    # Loop through all the pieces.\n    for piece in pieces:\n        # Check if the value of the piece is greater than the maximum value of the chosen piece.\n        if piece > max_piece:\n            # Set the value of the piece as the new maximum value of the chosen piece.\n            max_piece = piece\n\n    # Return the maximum value of the chosen piece.\n    return max_piece\n\n# Call the main function.\nmain()\n", "\n# import sys\n\ndef main(pname):\n    # sys.stdin = open(pname + '.in', 'r')\n    # sys.stdout = open(pname + '.out', 'w')\n\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    a.reverse()\n    alice = 0\n    bob = 0\n    for i in range(len(a)):\n        if i % 2 == 0:\n            alice += a[i]\n        else:\n            bob += a[i]\n    # print(alice, bob)\n    return alice, bob\n\nif __name__ == \"__main__\":\n    print(main('file'))\n", "\n\nn = int(input())\npieces = [int(x) for x in input().split()]\n\ndef play(n, pieces):\n    if n == 1:\n        return pieces[0], 0\n    elif n == 2:\n        return max(pieces[0], pieces[1]), min(pieces[0], pieces[1])\n    else:\n        if pieces[0] > pieces[-1]:\n            a, b = play(n-1, pieces[1:])\n            return pieces[0] + b, a\n        else:\n            a, b = play(n-1, pieces[:-1])\n            return a, pieces[-1] + b\n\na, b = play(n, pieces)\n\nprint(a, b)\n", "\ndef main():\n    x = int(input())\n    a = int(input())\n    b = int(input())\n    if x - a > b:\n        print(b)\n    else:\n        print(x - a)\n\nmain()\n", "#\n# def main():\n#     n = int(input())\n#     a = [int(item) for item in input().split()]\n#     a.sort()\n#     a.reverse()\n#     alice_sum = 0\n#     bob_sum = 0\n#     for i in range(n):\n#         if i % 2 == 0:\n#             alice_sum += a[i]\n#         else:\n#             bob_sum += a[i]\n#     print(alice_sum, bob_sum)\n#\n#\n# main()\n", "n = int(input())\npieces = [int(x) for x in input().split()]\nprint(n, pieces)\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    pieces = sorted([int(x) for x in sys.stdin.readline().split()])\n\n\nif __name__ == \"__main__\":\n    main()\n", "# https://codeforces.com/contest/1141/problem/A\n\nn = int(input())\npieces = [int(x) for x in input().split()]\n\ndef play(n, pieces):\n    if n == 1:\n        return pieces[0], 0\n    elif n == 2:\n        return max(pieces[0], pieces[1]), min(pieces[0], pieces[1])\n    else:\n        if pieces[0] > pieces[-1]:\n            a, b = play(n-1, pieces[1:])\n            return pieces[0] + b, a\n        else:\n            a, b = play(n-1, pieces[:-1])\n            return a, pieces[-1] + b\n\na, b = play(n, pieces)\nprint(a, b)\n", "#\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    pieces = [int(x) for x in sys.stdin.readline().split()][:n]\n    pieces.sort()\n    alice = 0\n    bob = 0\n    for i in range(n):\n        if i % 2 == 0:\n            alice += pieces[n-i-1]\n        else:\n            bob += pieces[n-i-1]\n    print(alice - bob)\n\nif __name__ == \"__main__\":\n    main()\n", "#\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    pieces = [int(x) for x in sys.stdin.readline().split()]\n    pieces.sort()\n    player1 = 0\n    player2 = 0\n    for i in range(n):\n        if i % 2 == 0:\n            player1 += pieces[n-i-1]\n        else:\n            player2 += pieces[n-i-1]\n    print(player1, player2)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    number_of_pieces = int(input())\n    pieces = [int(x) for x in input().split()]\n    print(max_sum(pieces))\n\ndef max_sum(pieces):\n    \"\"\"\n    Returns the maximum sum of integers that can be obtained by playing optimally\n    \"\"\"\n    return max_sum_recursive(pieces, 0, len(pieces) - 1, 0)\n\ndef max_sum_recursive(pieces, left_index, right_index, total):\n    \"\"\"\n    Recursively compute the maximum sum of integers that can be obtained by playing optimally\n    \"\"\"\n    if left_index == right_index:\n        return total + pieces[left_index]\n    else:\n        return max(max_sum_recursive(pieces, left_index + 2, right_index, total + pieces[left_index]), max_sum_recursive(pieces, left_index + 1, right_index - 1, total + pieces[left_index]), max_sum_recursive(pieces, left_index + 1, right_index - 1, total + pieces[right_index]), max_sum_recursive(pieces, left_index, right_index - 2, total + pieces[right_index]))\n\nmain()\n", "\ndef main():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    a.sort()\n    a.reverse()\n    alice = 0\n    bob = 0\n    for i in range(n):\n        if i % 2 == 0:\n            alice += a[i]\n        else:\n            bob += a[i]\n    print(alice - bob)\n\nmain()\n", "\n# Solution\nn = int(input())\na = [int(x) for x in input().split()]\na.sort()\n\nsuma = sum(a[::2])\nsumb = sum(a[1::2])\n\nprint(suma, sumb)\n", "n = int(input())\npieces = [int(x) for x in input().split()]\n\ndef play(n, pieces):\n    if n == 1:\n        return pieces[0], 0\n    elif n == 2:\n        return max(pieces[0], pieces[1]), min(pieces[0], pieces[1])\n    else:\n        if pieces[0] >= pieces[-1]:\n            a, b = play(n - 1, pieces[1:])\n            return pieces[0] + b, a  # my turn\n        else:\n            a, b = play(n - 1, pieces[:-1])\n            return a, pieces[-1] + b  # my turn\n\na, b = play(n, pieces)\nprint(a, b)\n", "\n\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + '.in', 'r')\n    sys.stdout = open(pname + '.out', 'w')\n\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    a.reverse()\n    alice = 0\n    bob = 0\n    for i in range(len(a)):\n        if i % 2 == 0:\n            alice += a[i]\n        else:\n            bob += a[i]\n    print(alice - bob)\n\nif __name__ == \"__main__\":\n    main('file')\n", "\n#Solution \nn = int(input())\na = [int(x) for x in input().split()]\na.sort()\n\nsuma = sum(a[::2])\nsumb = sum(a[1::2])\n\nprint(suma, sumb)\n", "\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + \".in\", \"r\")\n    sys.stdout = open(pname + \".out\", \"w\")\n\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    a.reverse()\n    alice = 0\n    bob = 0\n    for i in range(len(a)):\n        if i % 2 == 0:\n            alice += a[i]\n        else:\n            bob += a[i]\n    print(alice, bob)\n\nif __name__ == \"__main__\":\n    main(\"file\")\n", "\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    number_of_pieces = int(input())\n    pieces = [int(x) for x in input().split()]\n    print(max_sum(pieces))\n\n\ndef max_sum(pieces):\n    \"\"\"\n    Returns the maximum sum of integers that can be obtained by playing optimally.\n    \"\"\"\n\n    return max_sum_recursive(pieces, 0, len(pieces) - 1)\n\ndef max_sum_recursive(pieces, left_index, right_index):\n    \"\"\"\n    Recursively computes the maximum sum of integers that can be obtained by playing optimally.\n    \"\"\"\n    if left_index == right_index:\n        return pieces[left_index]\n    else:\n        return max(pieces[left_index] + min(max_sum_recursive(pieces, left_index + 2, right_index),\n                                            max_sum_recursive(pieces, left_index + 1, right_index - 1)),\n                   pieces[right_index] + min(max_sum_recursive(pieces, left_index + 1, right_index - 1),\n                                             max_sum_recursive(pieces, left_index, right_index - 2)))\n\n\nmain()\n", "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    pieces = sorted([int(x) for x in sys.stdin.readline().split()])\n    alice = 0\n    bob = 0\n    for i in range(n):\n        if i % 2 == 0:\n            alice += pieces[n-i-1]\n        else:\n            bob += pieces[n-i-1]\n    print(alice, bob)\n\nif __name__ == \"__main__\":\n    main()\n", "# coding: utf-8\n\nn = int(input())\na = [int(i) for i in input().split()]\na.sort()\nAlice = 0\nBob = 0\n\nfor i in range(n):\n    if i % 2 == 0:\n        Alice += a[n - i - 1]\n    else:\n        Bob += a[n - i - 1]\nprint(Alice, Bob)\n", "\ndef main():\n    \"\"\"\n    This function is the main function of this program.\n\n    This function reads the number of cards and the values of the cards from the input.\n    Then, it prints the total value of Alice's cards and the total value of Bob's cards.\n\n    This function uses the function choose_card() to choose the card to take.\n    \"\"\"\n    # Read the number of cards.\n    n = int(input())\n\n    # Read the values of the cards.\n    cards = [int(a) for a in input().split()]\n\n    # Initialize the total value of Alice's cards and the total value of Bob's cards.\n    alice_total = 0\n    bob_total = 0\n\n    # Loop through all the cards.\n    for i in range(n):\n        # Check if it is Alice's turn.\n        if i % 2 == 0:\n            # Choose the card for Alice.\n            alice_card = choose_card(cards)\n\n            # Add the value of Alice's card to the total value of Alice's cards.\n            alice_total += alice_card\n\n            # Remove the chosen card from the list of cards.\n            cards.remove(alice_card)\n        # Check if it is Bob's turn.\n        else:\n            # Choose the card for Bob.\n            bob_card = choose_card(cards)\n\n            # Add the value of Bob's card to the total value of Bob's cards.\n            bob_total += bob_card\n\n            # Remove the chosen card from the list of cards.\n            cards.remove(bob_card)\n\n\n    # Print the total value of Alice's cards and the total value of Bob's cards.\n    print(\"{} {}\".format(alice_total, bob_total))\n\ndef choose_card(cards):\n    \"\"\"\n    This function chooses a card to take.\n\n    This function takes a list of cards as the parameter.\n    It returns the value of the chosen card.\n    \"\"\"\n    # Initialize the maximum value of the chosen card.\n    max_card = 0\n\n    # Loop through all the cards.\n    for card in cards:\n        # Check if the value of the card is greater than the maximum value of the chosen card.\n        if card > max_card:\n            # Set the value of the card as the new maximum value of the chosen card.\n            max_card = card\n\n    # Return the maximum value of the chosen card.\n    return max_card\n\n# Call the main function.\nmain()\n", "\ndef main():\n    n = int(input())\n    a = sorted([int(item) for item in input().split()], reverse=True)\n    alice_sum = 0\n    bob_sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            alice_sum += a[i]\n        else:\n            bob_sum += a[i]\n    print(alice_sum, bob_sum)\n\n\nmain()\n", "\n\n# Solution\ndef solve(a, b):\n    a.sort()\n    b.sort()\n\n    suma = sum(a[::2])\n    sumb = sum(a[1::2])\n\nprint(suma, sumb)\n", "\n\ndef main():\n    \"\"\"\n    This function is the main function of this program.\n\n    This function reads the number of pieces and the values of the pieces from the input.\n    Then, it prints the total value of Alice's pieces and the total value of Bob's pieces.\n\n    This function uses the function choose_piece() to choose the piece to take.\n    \"\"\"\n    # Read the number of pieces.\n    n = int(input())\n\n    # Read the values of the pieces.\n    pieces = [int(a) for a in input().split()]\n\n    # Initialize the total value of Alice's pieces and the total value of Bob's pieces.\n    alice_total = 0\n    bob_total = 0\n\n    # Loop through all the pieces.\n    for i in range(n):\n        # Check if it is Alice's turn.\n        if i % 2 == 0:\n            # Choose the piece for Alice.\n            alice_piece = choose_piece(pieces)\n\n            # Add the value of Alice's piece to the total value of Alice's pieces.\n            alice_total += alice_piece\n\n            # Remove the chosen piece from the list of pieces.\n            pieces.remove(alice_piece)\n        # Check if it is Bob's turn.\n        else:\n            # Choose the piece for Bob.\n            bob_piece = choose_piece(pieces)\n\n            # Add the value of Bob's piece to the total value of Bob's pieces.\n            bob_total += bob_piece\n\n            # Remove the chosen piece from the list of pieces.\n            pieces.remove(bob_piece)\n\n    # Print the total value of Alice's pieces and the total value of Bob's pieces.\n\n    print(\"{} {}\".format(alice_total, bob_total))\n\ndef choose_piece(pieces):\n    \"\"\"\n    This function chooses a piece to take.\n\n    This function takes a list of pieces as the parameter.\n    It returns the value of the chosen piece.\n    \"\"\"\n    # Initialize the maximum value of the chosen pieces.\n    max_pieces = 0\n\n    # Loop through all the pieces.\n    for piece in pieces:\n        # Check if the value of the piece is greater than the maximum value of the chosen piece.\n        if piece > max_pieces:\n            # Set the value of the piece as the new maximum value of the chosen pieces.\n            max_pieces = piece\n\n    # Return the maximum value of the chosen pieces.\n    return max_pieces\n\n# Call the main function.\nmain()\n", "\n\ndef main():\n    \"\"\"\n    This function is the main function of this program.\n\n    This function reads the number of slices and the values of the slices from the input.\n    Then, it prints the total value of Alice's slices and the total value of Bob's slices.\n\n    This function uses the function choose_piece() to choose the piece to take.\n    \"\"\"\n    # Read the number of slices.\n    n = int(input())\n\n    # Read the values of the pieces.\n    pieces = [int(piece) for piece in input().split()]\n\n    # Initialize the total value of Alice's pieces and the total value of Bob's pieces.\n    alice_total = 0\n    bob_total = 0\n\n    # Loop through all the pieces.\n    for i in range(n):\n        # Check if it is Alice's turn.\n        if i % 2 == 0:\n            # Choose the piece for Alice.\n            alice_piece = choose_piece(pieces)\n\n            # Add the value of Alice's piece to the total value of Alice's pieces.\n            alice_total += alice_piece\n\n            # Remove the chosen piece from the list of pieces.\n            pieces.remove(alice_piece)\n        # Check if it is Bob's turn.\n        else:\n            # Choose the piece for Bob.\n            bob_piece = choose_piece(pieces)\n\n            # Add the value of Bob's piece to the total value of Bob's pieces.\n            bob_total += bob_piece\n\n            # Remove the chosen piece from the list of pieces.\n            pieces.remove(bob_piece)\n\n    # Print the total value of Alice's pieces and the total value of Bob's pieces.\n    print(\"{} {}\".format(alice_total, bob_total))\n\ndef choose_piece(pieces):\n    \"\"\"\n    This function chooses a piece to take.\n\n    This function takes a list of pieces as the parameter.\n    It returns the value of the chosen piece.\n    \"\"\"\n    # Initialize the maximum value of the chosen piece.\n    max_piece = 0\n\n    # Loop through all the pieces.\n    for piece in pieces:\n        # Check if the value of the piece is greater than the maximum value of the chosen piece.\n        if piece > max_piece:\n            # Set the value of the piece as the new maximum value of the chosen piece.\n            max_piece = piece\n\n    # Return the maximum value of the chosen piece.\n    return max_piece\n\n# Call the main function.\nmain()\n", "\n\ndef main():\n    \"\"\"\n    This function is the main function of this program.\n\n    This function reads the number of cards and the values of the cards from the input.\n    Then, it prints the total value of Alice's cards and the total value of Bob's cards.\n\n    This function uses the function choose_card() to choose the card to take.\n    \"\"\"\n    # Read the number of cards.\n    n = int(input())\n\n    # Read the values of the cards.\n    cards = [int(a) for a in input().split()]\n\n    # Initialize the total value of Alice's cards and the total value of Bob's cards.\n    alice_total = 0\n    bob_total = 0\n\n    # Loop through all the cards.\n    for i in range(n):\n        # Check if it is Alice's turn.\n        if i % 2 == 0:\n            # Choose the card for Alice.\n            alice_card = choose_card(cards)\n\n            # Add the value of Alice's card to the total value of Alice's cards.\n            alice_total += alice_card\n\n            # Remove the chosen card from the list of cards.\n            cards.remove(alice_card)\n        # Check if it is Bob's turn.\n        else:\n            # Choose the card for Bob.\n            bob_card = choose_card(cards)\n\n            # Add the value of Bob's card to the total value of Bob's cards.\n            bob_total += bob_card\n\n            # Remove the chosen card from the list of cards.\n            cards.remove(bob_card)\n\n    # Print the total value of Alice's cards and the total value of Bob's cards.\n    print(\"{} {}\".format(alice_total, bob_total))\n\ndef choose_card(cards):\n    \"\"\"\n    This function chooses a card to take.\n\n    This function takes a list of cards as the parameter.\n    It returns the value of the chosen card.\n    \"\"\"\n    # Initialize the maximum value of the chosen card.\n    max_card = 0\n\n    # Loop through all the cards.\n    for card in cards:\n        # Check if the value of the card is greater than the maximum value of the chosen card.\n        if card > max_card:\n            # Set the value of the card as the new maximum value of the chosen card.\n            max_card = card\n\n    # Return the maximum value of the chosen card.\n    return max_card\n\n# Call the main function\nmain()\n"]