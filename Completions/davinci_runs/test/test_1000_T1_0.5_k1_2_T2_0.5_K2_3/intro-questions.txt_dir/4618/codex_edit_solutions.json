["\nimport sys\n\ndef main():\n    s = sys.stdin.readline().strip()\n    K = int(sys.stdin.readline().strip())\n    print(sorted(set(s[i:j] for i in range(len(s)) for j in range(i+1, len(s)+1)))[K-1]) # \n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    s = sys.stdin.readline().strip()\n    K = int(sys.stdin.readline().strip())\n    print(sorted(set(s[i:j] for i in range(len(s)) for j in range(i+1, len(s)+1)))[K-1])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    s = input()  # input string\n    k = int(input())\n    substr = []  # list of all substrings\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substr.append(s[i:j])\n    substr.sort()\n    print(substr[k-1])\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    while True:\n        try:\n            s = input()  # input string\n            k = int(input())\n            substr = []  # list of all substrings\n            for i in range(len(s)):\n                for j in range(i + 1, len(s) + 1):\n                    substr.append(s[i:j])\n            substr.sort()\n            print(substr[k - 1])\n        except:\n            break\n\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\nfrom collections import defaultdict\n\ndef add_edge(graph, u, v):\n    graph[u].append(v)\n    graph[v].append(u)\n\ndef dfs(graph, start, visited):\n    visited[start] = True\n    for next in graph[start]:\n        if not visited[next]:\n            dfs(graph, next, visited)\n\ndef main():\n    N, M = map(int, sys.stdin.readline().strip().split())\n    graph = defaultdict(list)\n    for _ in range(M):\n        a, b = map(int, sys.stdin.readline().strip().split())\n        add_edge(graph, a, b)\n    visited = [False] * (N+1)\n    count = 0\n    for i in range(1, N+1):\n        if not visited[i]:\n            dfs(graph, i, visited)\n            count += 1\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    s = sys.stdin.readline().strip()\n    K = int(sys.stdin.readline().strip())\n    print(sorted(set(s[i:j] for i in range(len(s)) for j in range(i + 1, len(s) + 1)))[K - 1])\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    print(\"hello world\")\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    print(\"Hello World\")\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\nimport sys\n\ndef main():\n    s = sys.stdin.readline().strip()\n    K = int(sys.stdin.readline().strip())\n    print(sorted(set(s[i:j] for i in range(len(s)) for j in range(i+1, len(s)+1)))[K - 1])\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python\n\nimport sys\n\ndef main():\n    s = sys.stdin.readline().strip()\n    K = int(sys.stdin.readline().strip())\n    print(sorted(set(s[i:j] for i in range(len(s)) for j in range(i+1, len(s)+1)))[K-1], end='')\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python\n\nimport sys\n\ndef main():\n    s = sys.stdin.readline().strip()\n    K = int(sys.stdin.readline().strip())\n    print(sorted(set(s[i:j] for i in range(len(s)) for j in range(i+1, len(s)+1)))[K - 1])\n\nif __name__ == \"__main__\":\n    main()\n"]