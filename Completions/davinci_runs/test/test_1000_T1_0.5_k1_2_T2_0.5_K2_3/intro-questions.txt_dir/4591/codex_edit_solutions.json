["\nimport sys\n\ndef main():\n    # Read input\n    A, B, C, X, Y = [int(x) for x in sys.stdin.readline().split()]\n\n    # Calculate minimum cost\n    cost = 0\n\n    if A + B > 2 * C:\n        # It is cheaper to buy two AB-pizzas and rearrange them into one A-pizza and one B-pizza.\n        if X > Y:\n            # Buy AB-pizzas until X - Y = 0.\n            cost += 2 * C * Y\n            X -= Y\n            Y = 0\n        else:\n            # Buy AB-pizzas until Y - X = 0.\n            cost += 2 * C * X\n            Y -= X\n            X = 0\n\n    # Buy remaining A-pizzas and B-pizzas.\n    cost += A * X\n    cost += B * Y\n\n    print(cost)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef pizza_at(a, b, c, x, y):\n    # If A is cheaper than B, buy as many A pizzas as possible\n    if a <= b:\n        # If there are still more A pizzas needed, buy C pizzas\n        if x > (x + y) / 2:\n            # If C is cheaper than A, buy C pizzas\n            if a < c:\n                return a * (x + y) + (x - (x + y) / 2) * a\n            # If C is more expensive than A, buy A pizzas\n            else:\n                return c * (x + y) / 2\n        # If there are no more A pizzas needed, buy B pizzas\n        else:\n            return b * y + a * x\n\n    # If B is cheaper than A, buy as many B pizzas as possible\n    else:\n        # If there are still more B pizzas needed, buy C pizzas\n        if y > (x + y) / 2:\n            # If C is cheaper than B, buy C pizzas\n            if b < c:\n                return b * (x + y) + (y - (x + y) / 2) * b\n            # If C is more expensive than B, buy B pizzas\n            else:\n                return c * (x + y) / 2\n        # If there are no more B pizzas needed, buy A pizzas\n        else:\n            return a * x + b * y\n\na, b, c, x, y = map(int, input().split())\nprint(pizza_at(a, b, c, x, y))\n", "\n\ndef pizza_at(a, b, c, x, y): \n    # If A is cheaper than B, buy as many A pizzas as possible\n    if a <= b:\n        # If there are still more A pizzas needed, buy AB pizzas\n        if x > (x + y) // 2:\n            # If AB is cheaper than A, buy AB pizzas\n            if a < c:\n                return a * (x + y) + (x - (x + y) // 2) * a\n            # If AB is more expensive than A, buy A pizzas\n            else:\n                return c * (x + y)\n        # If there are no more A pizzas needed, buy B pizzas\n        else:\n            return b * y + a * x\n\n    # If B is cheaper than A, buy as many B pizzas as possible\n    else:\n        # If there are still more B pizzas needed, buy AB pizzas\n        if y > (x + y) // 2:\n            # If AB is cheaper than B, buy AB pizzas\n            if b < c:\n                return b * (x + y) + (y - (x + y) // 2) * b\n            # If AB is more expensive than B, buy B pizzas\n            else:\n                return c * (x + y)\n        # If there are no more B pizzas needed, buy A pizzas\n        else:\n            return a * x + b * y\n\na, b, c, x, y = map(int, input().split())\nprint(pizza_at(a, b, c, x, y))\n", "\n\n\nimport sys\n\ndef main():\n    # Read input\n    A, B, C, X, Y = [int(x) for x in sys.stdin.readline().split()]\n\n    # Calculate minimum cost\n    cost = 0\n\n    if A + B > 2 * C:\n        # It is cheaper to buy two AB-pizzas and rearrange them into one A-pizza or one B-pizza\n        if X > Y:\n            # Buy AB-pizzas until X - Y = 0\n            cost += 2 * C * Y\n            X -= Y\n            Y = 0\n        else:\n            # Buy AB-pizzas until Y - X = 0\n            cost += 2 * C * X\n            Y -= X\n            X = 0\n\n    # Buy remaining A-pizzas and B-pizzas\n    cost += A * X\n\n    cost += B * Y\n\n    print(cost)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef pizza_at(a, b, c, x, y):\n    # If A is cheaper than B, buy as many A pizzas as possible\n    if a <= b:\n        # If there are still more A pizzas needed, buy AC pizzas\n        if x > (x + y) / 2:\n            # If AC is cheaper than A, buy AC pizzas\n            if a < c:\n                return a * (x + y) + (x - (x + y) / 2) * a\n            # If AC is more expensive than A, buy A pizzas\n            else:\n                return c * (x + y)\n        # If there are no more A pizzas needed, buy B pizzas\n        else:\n            return b * y + a * x\n\n    # If B is cheaper than A, buy as many B pizzas as possible\n    else:\n        # If there are still more B pizzas needed, buy BC pizzas\n        if y > (x + y) / 2:\n            # If BC is cheaper than B, buy BC pizzas\n            if b < c:\n                return b * (x + y) + (y - (x + y) / 2) * b\n            # If BC is more expensive than B, buy B pizzas\n            else:\n                return c * (x + y)\n        # If there are no more B pizzas needed, buy BC pizzas\n        else:\n            return a * x + b * y\n\na, b, c, x, y = map(int, input().split())\nprint(pizza_at(a, b, c, x, y))\n", "\n\ndef pizza_at(a, b, c, x, y):\n    # If A is cheaper than B, buy as many A pizzas as possible\n    if a <= b:\n        # If there are still more A pizzas needed, buy AB pizzas\n        if x > (x + y) / 2:\n            # If AB is cheaper than A, buy AB pizzas\n            if a < c:\n                return a * (x + y) + (x - (x + y) / 2) * a\n            # If AB is more expensive than A, buy A pizzas\n            else:\n                return c * (x + y)\n        # If there are no more A pizzas needed, buy B pizzas\n        else:\n            return b * y + a * x\n\n    # If B is cheaper than A, buy as many B pizzas as possible\n    else:\n        # If there are still more B pizzas needed, buy AB pizzas\n        if y > (x + y) / 2:\n            # If AB is cheaper than B, buy AB pizzas\n            if b < c:\n                return b * (x + y) + (y - (x + y) / 2) * b\n            # If AB is more expensive than B, buy B pizzas\n            else:\n                return c * (x + y)\n        # If there are no more B pizzas needed, buy A pizzas\n        else:\n            return a * x + b * y\n\na, b, c, x, y = map(int, input().split())\nprint(pizza_at(a, b, c, x, y))\n", "\n\ndef main():\n    # Read input\n    N = int(input())\n    S = input()\n\n    # Count the number of vowels\n    vowels = 0\n    for char in S:\n        if char in ['a', 'e', 'i', 'o', 'u']:\n            vowels += 1\n\n    # Print the number of vowels\n    print(vowels)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    # Read input, split into separate variables\n    A, B, C, X, Y = [int(x) for x in input().split()]\n\n    # Calculate minimum cost\n    cost = 0\n\n    if A + B > 2 * C:\n        # It is cheaper to buy two AB-pizzas and rearrange them into A-pizzas or B-pizzas\n        if X > Y:\n            # Buy AB-pizzas until X - Y = 0\n            cost += 2 * C * Y\n            X -= Y\n            Y = 0\n        else:\n            # Buy AB-pizzas until Y - X = 0\n            cost += 2 * C * X\n            Y -= X\n            X = 0\n\n\n    # Buy remaining A-pizzas and B-pizzas at their original price\n    cost += A * X\n    cost += B * Y\n\n    print(cost)\n\nif __name__ == \"__main__\":\n    main()\n", "\n", "\n\ndef pizza_at(a, b, c, x, y):\n    # If A is cheaper than B, buy as many A pizzas as possible.\n    if a <= b:\n        # If there are still more A pizzas needed, buy C pizzas.\n        if x > (x + y) / 2:\n            # If C is cheaper than A, buy C pizzas.\n            if a < c:\n                return a * (x + y) + (x - (x + y) / 2) * a\n            # If C is more expensive than A, buy A pizzas.\n            else:\n                return c * (x + y)\n        # If there are no more A pizzas needed, buy B pizzas.\n        else:\n            return b * y + a * x\n\n    # If B is cheaper than A, buy as many B pizzas as possible.\n    else:\n        # If there are still more B pizzas needed, buy C pizzas.\n        if y > (x + y) / 2:\n            # If C is cheaper than B, buy C pizzas.\n            if b < c:\n                return b * (x + y) + (y - (x + y) / 2) * b\n            # If C is more expensive than B, buy B pizzas.\n            else:\n                return c * (x + y)\n        # If there are no more B pizzas needed, buy A pizzas.\n        else:\n            return a * x + b * y\n\na, b, c, x, y = map(int, input().split())\nprint(pizza_at(a, b, c, x, y))\n", "import sys\n\ndef main():\n    # Read input\n    A, B, C, X, Y = [int(x) for x in sys.stdin.readline().split()]\n\n    # Calculate minimum cost\n    cost = 0\n\n    if A + B > 2 * C:\n        # It is cheaper to buy two AB-pizzas and rearrange them into one A-pizza or one B-pizza\n        if X > Y:\n            # Buy AB-pizzas until X - Y = 0\n            cost += 2 * C * Y\n            X -= Y\n            Y = 0\n        else:\n            # Buy AB-pizzas until Y - X = 0\n            cost += 2 * C * X\n            Y -= X\n            X = 0\n\n    # Buy remaining A-pizzas and B-pizzas\n    cost += A * X\n    cost += B * Y\n\n    print(cost)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline().rstrip())\n    A = list(map(int, sys.stdin.readline().rstrip().split()))\n    A.sort()\n    if N % 2 == 0:\n        print(A[N//2-1])\n    else:\n        print(A[N//2])\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    # Read input\n    A, B, C, X, Y = [int(x) for x in sys.stdin.readline().split()]\n\n    # Calculate minimum cost\n    cost = 0\n\n    if A + B > 2 * C:\n        # It is cheaper to buy two AB-pizzas and rearrange them into one A-pizza and one B-pizza.\n        if X > Y:\n            # Buy AB-pizzas until X - Y = 0\n            cost += 2 * C * Y\n            X -= Y\n            Y = 0\n        else:\n            # Buy AB-pizzas until Y - X = 0\n            cost += 2 * C * X\n            Y -= X\n            X = 0\n\n    # Buy remaining A-pizzas and B-pizzas\n    cost += A * X\n    cost += B * Y\n\n    print(cost)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    # Read input.\n    N, A, B = [int(x) for x in sys.stdin.readline().split()]\n    X = [int(x) for x in sys.stdin.readline().split()]\n\n    # Calculate minimum cost.\n    cost = A * N\n    for i in range(N):\n        if i < N - 1:\n            if X[i + 1] - X[i] < B:\n                cost += A\n            else:\n                cost += B\n\n    print(cost) \n\nif __name__ == \"__main__\":\n    main()\n"]