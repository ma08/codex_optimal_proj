["\n\nimport sys\n\ndef read_input(inp):\n    N = int(inp.readline())\n    pwds = []\n    for i in range(N):\n        pwds.append(inp.readline().split()[1])\n    return N, pwds\n\ndef solve(N, pwds):\n    pwds.sort(key=lambda x: x)\n    ans = 1\n    for i in range(N):\n        ans += (1 - float(pwds[i])) * (i + 1)\n    return ans\n\ndef main():\n    N, pwds = read_input(sys.stdin)\n    ans = solve(N, pwds)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        passwords.append(line.split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    total = 0\n    for i in range(len(passwords)):\n        total += (i+1) * float(passwords[i][1])\n    print(total)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\n    # n = int(input()) \ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n        # passwords.append(input().split())\n    for i in range(n):\n        passwords.append(sys.stdin.readline().strip().split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    # print(passwords)\n    attempts = 0.0\n    for p in passwords:\n        attempts += 1.0/float(p[1])\n    print(attempts)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    for i in range(n):\n        passwords.append(sys.stdin.readline().strip().split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    # print(passwords)\n    attempts = 0\n    for p in passwords:\n        attempts += 1 / float(p[1])\n    print(attempts)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = {}\n    for i in range(n):\n        l = sys.stdin.readline().strip().split()\n        passwords[float(l[1])] = l[0]\n    attempts = 0\n    for key in sorted(passwords.keys(), reverse=True):\n        attempts += 1/key\n    print(attempts)\n\nif __name__ == '__main__':\n    main()\n", "\n\n#SOLUTION 1\n\nnum = int(input())\n\nlis = []\n\nfor i in range(num):\n    lis.append(list(input().split()))\n\nlis.sort(key = lambda x: float(x[1]), reverse = True)\n\nanswer = 0\nfor i in range(len(lis)):\n    answer += (i + 1) * float(lis[i][1])\n\n\n#SOLUTION 2\n\nnum = int(input())\n\nlis = []\n\nfor i in range(num):\n    lis.append(list(input().split()))\n\nlis.sort(key = lambda x: float(x[1]), reverse = True)\n\nanswer = 0\nfor i in range(len(lis)):\n    answer += (i + 1) * float(lis[i][1])\n", "\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline().strip())\n    passwords = [stdin.readline().strip().split(' ') for _ in range(n)]\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    sums = 0\n    for i in range(n):\n        sums += (i+1)*float(passwords[i][1])\n    print(sums)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    passwords = []\n    for line in sys.stdin:\n        passwords.append(line.strip().split(' '))\n    passwords = sorted(passwords, key=lambda x: float(x[1]), reverse=True)\n    # print(passwords)\n    expected_attempts = 0\n    for i, password in enumerate(passwords):\n        # print(password)\n        expected_attempts += (i+1)*float(password[1])*0.01\n    print(expected_attempts)\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\nn = int(sys.stdin.readline())\n\nprobs = []\n\nfor _ in range(n):\n    prob = sys.stdin.readline().split(' ')\n    probs.append(float(prob[1]))\n\nprobs.sort()\nprobs.reverse()\n\ntotal = 0\nfor i in range(n):\n    total += (i + 1) * probs[i]\n\nprint(\"{:.4f}\".format(total))\n", "\nimport sys, math\n\ndef main():\n    passwords = []\n    for line in sys.stdin:\n        passwords.append(line.strip().split(' '))\n    passwords = sorted(passwords, key=lambda x: float(x[1]), reverse=True)\n    expected_attempts = 0\n    for i, password in enumerate(passwords):\n        expected_attempts += (i+1)*float(password[1])\n    print(expected_attempts)\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\nn = int(sys.stdin.readline())\n\nprobs = []\n\nfor _ in range(n):\n    prob = sys.stdin.readline().split()\n    probs.append(float(prob[1]))\n\nprobs.sort()\nprobs.reverse()\n\ntotal = 0\nfor i in range(n):\n    total += (i + 1) * probs[i]\n\nprint(\"{:.4f}\".format(total))\n", "\n#\n# import sys\n#\n# def main():\n#     passwords = [] # list of passwords and their probabilities\n#     for line in sys.stdin:\n#         passwords.append(line.strip().split()) # split line into password and probability\n#     passwords = [[int(p), float(prob)] for p, prob in passwords] # convert to int and float\n#     passwords.sort(key=lambda x: x[1], reverse=True) # sort in descending order of probabilities\n#     # print(passwords)\n#     expected = 0\n#     for i in range(len(passwords)):\n#         expected += (i + 1) * passwords[i][1]\n#     print(expected)\n#\n# if __name__ == \"__main__\":\n#     main()\n", "\n\nimport sys\n\ndef read_input(inp):\n    N = int(inp.readline())\n    # passwords = []\n    # for i in range(N):\n    #     passwords.append(inp.readline().split())\n    # return N, passwords\n    return N\n\n# def solve(N, passwords):\n#     passwords.sort(key=lambda x: x[1], reverse=True)\n#     ans = 1\n#     for i in range(N):\n#         ans += (1 - float(passwords[i][1])) * (i + 1)\n#     return ans\n\ndef main():\n    N = read_input(sys.stdin)\n    #ans = solve(N, passwords)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef read_input(inp):\n    N = int(inp.readline())\n    pwds = []\n    for i in range(N):\n        pwds.append(inp.readline().split())\n    return N, pwds\n\ndef solve(N, pwds):\n    pwds.sort(key=lambda x:x[1], reverse=False)\n    ans = 1\n    for i in range(N):\n        ans += (1 - float(pwds[i][1])) * (i + 1)\n    return ans\n\ndef main():\n    N, pwds = read_input(sys.stdin)\n    ans = solve(N, pwds)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        passwords.append(line.split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    total = 0\n    for i in range(len(passwords)):\n        total += (i + 1) * float(passwords[i][1])\n    print(total)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    passwords = [] # list of passwords and their probabilities\n    for line in sys.stdin:\n        passwords.append(line.strip().split()) # split line into password and probability\n    passwords = [[int(p), float(prob)] for p, prob in passwords] # convert to int and float\n    passwords.sort(key=lambda x: x[1], reverse=True) # sort in descending order of probabilities\n    expected = 0\n    for i, p in enumerate(passwords):\n        expected += (i + 1) * p[1]\n    print(expected)\n\nif __name__ == \"__main__\":\n    main()\n", "\nfrom collections import deque\n\nfrom sys import stdin\n\ndef main():\n    n,k = [int(x) for x in stdin.readline().strip().split()]\n    d = deque()\n    for i in range(n):\n        d.append(i+1)\n    index = 0\n    res = []\n    while len(d)>0:\n        index += k-1\n        index %= len(d)\n        res.append(d[index])\n        d.remove(d[index])\n    print('<'+', '.join([str(x) for x in res])+'>')\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n#SOLUTION 1\n\nnum = int(input())\n\nlis = []\n\nfor i in range(num):\n    lis.append(list(input().split()))\n\nlis.sort(key = lambda x: float(x[1]), reverse = True)\n\nanswer = 0\nfor i in range(len(lis)):\n    answer += (i + 1) * float(lis[i][1])\n\n\n#SOLUTION 2\n\nnum = int(input())\n\nlis = []\n\nfor i in range(num):\n    lis.append(list(input().split()))\n\nlis.sort(key = lambda x: float(x[1]), reverse = True)\n\nanswer = 0\nfor i in range(len(lis)):\n    answer += (i + 1) * float(lis[i][1])\n\nprint(answer)\n", "\nimport sys\n\ndef main():\n    passwords = []\n    for line in sys.stdin:\n        passwords.append(line.strip().split())\n    passwords = [[int(p), float(prob)] for p, prob in passwords if p != ' ']\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    # print(passwords)\n    expected = 0\n    for i in range(len(passwords)):\n        expected += (i + 1) * passwords[i][1]\n    print(expected)\n\nif __name__ == \"__main__\":\n    main()\n", "\nfrom sys import stdin\n\n\ndef main():\n    n = int(stdin.readline().strip())\n    passwords = [stdin.readline().strip().split(' ') for _ in range(n)]\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    sum = 0\n    for i in range(n):\n        sum += (i+1)*float(passwords[i][1])\n    print(sum)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = [] \n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        passwords.append(line.split()) \n    passwords.sort(key=lambda x: float(x[2]), reverse=True)\n    total = 0\n    for i in range(len(passwords)):\n        total += (i+1) * float(passwords[i][2])\n    print(total)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    passwords = [] # list of passwords\n    for line in sys.stdin:\n        passwords.append(line.strip().split()) # get a list of passwords\n    passwords = [[int(p), float(prob)] for p, prob in passwords] # convert to int and float\n    passwords.sort(key=lambda x: x[1], reverse=True) # sort by probability in descending order\n    expected = 0\n    for i in range(len(passwords)):\n        expected += (i + 1) * passwords[i][1] # i + 1 is the number of guesses\n                                              # passwords[i][1] is the probability of that password\n    print(expected)\n\nif __name__ == \"__main__\":\n    main()\n", "#! /usr/bin/env python3\n\nimport sys\nfrom fractions import Fraction\n\ndef main():\n    n = int(sys.stdin.readline())\n\n    probabilities = []\n\n    for _ in range(n):\n        prob = sys.stdin.readline().split()\n        probabilities.append(Fraction(prob[1]))\n\n    probabilities.sort()\n    probabilities.reverse()\n\n    total = 0\n    for i in range(n):\n        total += (i + 1) * probabilities[i]\n\n    print(total)\n\nif __name__ == \"__main__\":\n    main()\n", "\"\"\"\nJosephus problem\n\"\"\"\n\nfrom collections import deque\nfrom sys import stdin\n\ndef main():\n    n,k = [int(x) for x in stdin.readline().strip().split()]\n    d = deque()\n    for i in range(n):\n        d.append(i+1)\n    index = 0\n    res = []\n    while len(d)>0:\n        index += k-1\n        index %= len(d)\n        res.append(d[index])\n        d.remove(d[index])\n    print('<'+', '.join([str(x) for x in res])+'>')\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\n    # n = int(input())\ndef main():\n    n = int(sys.stdin.readline())\n    passwords = []\n        # passwords.append(input().split())\n    for i in range(n):\n        passwords.append(sys.stdin.readline().split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    # print(passwords)\n    attempts = 0.0\n    for p in passwords:\n        attempts += 1.0/float(p[1])\n    print(attempts)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    passwords = []\n    for line in sys.stdin:\n        passwords.append(line.strip().split(' '))\n    passwords = sorted(passwords, key=lambda x: float(x[1]), reverse=True)\n    expected_attempts = 0\n    for i, password in enumerate(passwords, start=1):\n        expected_attempts += (i+1)*float(password[1])\n    print(expected_attempts)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        passwords.append(line.split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    total = 0\n    for i in range(len(passwords)):\n        total += (i+1) * float(passwords[i][1])\n    print(total)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    passwords = []\n    # get all the passwords\n    for line in sys.stdin:\n        passwords.append(line.strip().split())\n    # convert to int and float\n    passwords = [[int(p), float(prob)] for p, prob in passwords]\n    # sort the passwords in decreasing order of probability\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    # calculate the expected value\n    expected = 0\n    for i in range(len(passwords)):\n        expected += (i + 1) * passwords[i][1]\n    print(expected)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        passwords.append(line.split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    total = 0\n    for i in range(len(passwords)):\n        total += (i + 1) * float(passwords[i][1])\n    print(total)\n\nif __name__ == '__main__':\n    main()\n", "\n\n#SOLUTION 1\n\nnum = int(input())\n\nlis = []\n\nfor i in range(num):\n    lis.append(list(input().split()))\n\nlis.sort(key = lambda x: float(x[1]), reverse = True)\n\nanswer = 0\nfor i in range(len(lis)):\n    answer += (i + 1) * float(lis[i][1])\n\nprint(answer)\n\n#SOLUTION 2\n\nnum = int(input())\n\nlis = []\n\nfor i in range(num):\n    lis.append(list(input().split()))\n\nlis.sort(key = lambda x: float(x[1]), reverse = True)\n\nanswer = 0\nfor i in range(len(lis)):\n    answer += (i + 1) * float(lis[i][1])\n\nprint(answer)\nprint(answer)\n", "import sys\n\nn = int(sys.stdin.readline())\n\nprobs = []\n\nfor _ in range(n):\n    prob = sys.stdin.readline().rstrip().split()\n    probs.append(float(prob[1]))\n\nprobs.sort()\nprobs.reverse()\n\ntotal = 0\nfor i in range(n):\n    total += (i + 1) * probs[i]\n\nprint(format(total, \".4f\"))\n", "\nimport sys\n\ndef read_input(inp):\n    N = int(inp.readline())\n    passwords = []\n    for i in range(N):\n        passwords.append(inp.readline().split())\n    return N, passwords\n\ndef solve(N, passwords):\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    ans = 1\n    for i in range(N):\n        ans += (1 - float(passwords[i][1])) * (i + 1)\n    return ans\n\ndef main():\n    N, passwords = read_input(sys.stdin)\n    print(solve(N, passwords))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    passwords = []\n    for line in sys.stdin:\n        passwords.append(line.strip().split(' '))\n    passwords = sorted(passwords, key=lambda x: float(x[1]), reverse=True)\n    expected_attempts = 0\n    for i, password in enumerate(passwords):\n        expected_attempts += (i+1)*float(password[1])\n    print(expected_attempts)\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n\n    probabilities = []\n\n    for _ in range(n):\n        prob = sys.stdin.readline().split()\n        probabilities.append(float(prob[1]))\n\n    probabilities.sort()\n    probabilities.reverse()\n\n    total = 0\n    for i in range(n):\n        total += (i + 1) * probabilities[i]\n\n    print(\"{:.4f}\".format(total))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    for i in range(n):\n        l = sys.stdin.readline().strip().split()\n        passwords.append([l[0], float(l[1])])\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    attempts = 0\n    for p in passwords:\n        attempts += 1/p[1]\n    print(attempts)\n\nif __name__ == '__main__':\n    main()\n", "\n# SOLUTION\nnum = int(input())\nlis = []\n\nfor i in range(num):\n    lis.append(list(input().split()))\nlis.sort(key = lambda x: float(x[1]), reverse = True)\nanswer = 0\nfor i in range(len(lis)):\n    answer += (i + 1) * float(lis[i][1])\nprint(answer)\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom collections import deque\nfrom sys import stdin\n\ndef main():\n    n,k = [int(x) for x in stdin.readline().strip().split()]\n    d = deque()\n    for i in range(n):\n        d.append(i+1)\n    index = 0\n    res = []\n    while len(d)>0:\n        index += k-1\n        index %= len(d)\n        res.append(d[index])\n        d.remove(d[index])\n    print('<'+', '.join([str(x) for x in res])+'>')\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\n\n\ndef main():\n    n = int(stdin.readline().strip())\n    passwords = [stdin.readline().strip().split(' ') for _ in range(n)]\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    total = 0\n    for i in range(n):\n        total += (i+1)*float(passwords[i][1])\n    print(total)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    passwords = [] # list of passwords\n    for line in sys.stdin:\n        passwords.append(line.strip().split()) # get a list of passwords\n    passwords = [[int(p), float(prob)] for p, prob in passwords] # convert to int, float\n    passwords.sort(key=lambda x: x[1], reverse=True) # sort by probability in descending order\n    expected = 0\n    for i in range(len(passwords) - 1):\n        expected += (i + 1) * passwords[i][1] # i + 1 is the number of guesses\n                                              # passwords[i][1] is the probability of that password\n    print(expected)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    for i in range(n):\n        passwords.append(sys.stdin.readline().strip().split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    # print(passwords) \n    attempts = 0\n    for i in range(len(passwords)):\n        attempts += 1/float(passwords[i][1])\n    print(attempts)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\n# n = int(input())\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    # passwords.append(input().split())\n    for i in range(n):\n        passwords.append(sys.stdin.readline().strip().split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    # print(passwords)\n    attempts = 0.0\n    for p in passwords:\n        attempts += 1.0/float(p[1])\n    print(attempts)\n\nif __name__ == '__main__':\n    main()\n", "\n\n\nimport sys\n\ndef main():\n    passwords = []\n    for line in sys.stdin:\n        passwords.append(line.strip().split(' '))\n    passwords = sorted(passwords, key=lambda x: float(x[1]))\n    # print(passwords)\n    expected_attempts = 0\n    for i, password in enumerate(passwords):\n        # print(password)\n        expected_attempts += (i+1)*float(password[1])\n    print(expected_attempts)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef read_input(inp):\n    N = int(inp.readline())\n    pwds = []\n    for i in range(N):\n        pwds.append(inp.readline().split())\n    return N, pwds\n\ndef solve(N, pwds):\n    pwds.sort(key=lambda x:x[1], reverse=True)\n    ans = 1\n    for i in range(N):\n        ans += (1 - float(pwds[i][1])) * (i + 1)\n    return ans\n\ndef main():\n    N, pwds = read_input(sys.stdin)\n    ans = solve(N, pwds)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    passwords = []\n    for line in sys.stdin:\n        passwords.append(line.strip().split())\n    passwords = [[int(p), float(prob)] for p, prob in passwords[1:]]\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    # print(passwords)\n    expected = 0\n    for i in range(len(passwords)):\n        expected += (i + 1) * passwords[i][1]\n    print(expected)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    passwords = [] # list of passwords and their probabilities\n    for line in sys.stdin:\n        passwords.append(line.strip().split()) # split line into password and probability\n    passwords = [[int(p), float(prob)] for p, prob in passwords] # convert to int and float\n    passwords.sort(key=lambda x: x[1], reverse=True) # sort in descending order of probabilities\n    expected = 0\n    for i in range(len(passwords)):\n        expected += (i + 1) * passwords[i][1]\n    print(expected)\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef main():\n    passwords = []  # list of passwords\n    for line in sys.stdin:\n        passwords.append(line.strip().split()) # get a list of passwords\n    passwords = [[int(p), float(prob)] for p, prob in passwords] # convert to int, float\n    passwords.sort(key=lambda x: x[1], reverse=True) # sort by probability in descending order\n    expected = 0\n    for i in range(len(passwords)):\n        expected += (i + 1) * passwords[i][1] # i + 1 is the number of guesses\n                                              # passwords[i][1] is the probability of that password\n    print(expected)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef read_input(inp):\n    N = int(inp.readline())\n    passwords = []\n    for i in range(N):\n        passwords.append(inp.readline().rstrip().split())\n    return N, passwords\n\ndef solve(N, passwords):\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    ans = 1\n    for i in range(N):\n        ans += (1 - float(passwords[i][1])) * (i + 1)\n    return ans\n\ndef main():\n    N, passwords = read_input(sys.stdin)\n    ans = solve(N, passwords)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    passwords = []\n    for line in sys.stdin:\n        passwords.append(line.strip().split(' '))\n    passwords = sorted(passwords, key=lambda x: float(x[1]), reverse=True)\n    # print(passwords)\n    expected_attempts = 0\n    for i, p in enumerate(passwords):\n        # print(p)\n        expected_attempts += (i+1)*float(p[1])\n    print(expected_attempts)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = {}\n    for i in range(n):\n        l = sys.stdin.readline().strip().split()\n        passwords[float(l[1])] = l[0]\n    passwords.sort(key=lambda x: float(x[1]))\n    print(passwords)\n    attempts = 0\n    for p in passwords:\n        attempts += 1 / p\n        print(passwords[p])\n    print(attempts)\n\nif __name__ == '__main__':\n    main()\n", "\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline().strip())\n    passwords = [stdin.readline().strip().split(' ') for _ in range(n)]\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    sum_ = 0\n    for i in range(n):\n        sum_ += (i+1)*float(passwords[i][1])\n    print(sum_)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    passwords = []\n    for line in sys.stdin:\n        passwords.append(line.strip().split(' '))\n    passwords = sorted(passwords, key=lambda x: float(x[1]))\n    expected_attempts = 0\n    for i, password in enumerate(passwords):\n        expected_attempts += (i+1)*float(password[1])\n    print(expected_attempts)\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        passwords.append(line.split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    total = 0\n    for i in range(len(passwords)):\n        total += (i+1) * float(passwords[i][1])\n    print(total)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\n\ndef read_input(inp):\n    N = int(inp.readline())\n    pwds = []\n    for i in range(N):\n        pwds.append(inp.readline().split())\n    return N, pwds\n\ndef solve(N, pwds):\n    pwds.sort(key=lambda x: x[1])\n    ans = 1\n    for i in range(N):\n        ans += (1 - float(pwds[i][1])) * (i + 1)\n    return ans\n\ndef main():\n    N, pwds = read_input(sys.stdin)\n    ans = solve(N, pwds)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline().strip())\n    passwords = [stdin.readline().strip().split(' ') for _ in range(n)]\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    summ = 0\n    for i in range(n):\n        summ += (i+1)*float(passwords[i][1])\n    print(summ)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\nn = int(sys.stdin.readline())\n\nprobs = []\n\nfor _ in range(n):\n\tprob = sys.stdin.readline().split()\n\tprobs.append(float(prob[1]))\n\nprobs.sort()\nprobs.reverse()\n\ntotal = 0\nfor i in range(n):\n\ttotal += (i + 1) * probs[i]\n\nprint(\"{:.4f}\".format(total))\n", "import sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline().strip()) # number of passwords\n    passwords = []\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        passwords.append(line.split()) # [password, value]\n    passwords.sort(key=lambda x: float(x[1]), reverse=True) # sort by value\n    total = 0\n    for i in range(len(passwords)):\n        total += (i+1) * float(passwords[i][1]) # index * value\n    print(total)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport os\n\nimport argparse\nimport logging\n\n# Set logger\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\nhandler = logging.StreamHandler()\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nhandler.setFormatter(formatter)\nlogger.addHandler(handler)\n\ndef parse_arguments():\n    parser = argparse.ArgumentParser(description='file')\n    parser.add_argument('-v', '--verbose', action='store_true', help='verbose mode')\n    parser.add_argument('-i', '--input', type=str, default='file.in', help='input file')\n    parser.add_argument('-o', '--output', type=str, default='file.out', help='output file')\n    parser.add_argument('-s', '--solution', type=str, default=None, help='solution to compare')\n    return parser.parse_args()\nimport sys\n\ndef read_input(inp):\n    N = int(inp.readline())\n    pwds = []\n    for i in range(N):\n        pwds.append(inp.readline().split())\n    return N, pwds\n\ndef solve(N, pwds):\n    pwds.sort(key=lambda x: x[1])\n    ans = 1\n    for i in range(N):\n        ans += (1 - float(pwds[i][1])) * (i + 1)\n    return ans\n\ndef main():\n    args = parse_arguments()\n    if args.verbose:\n        logger.setLevel(logging.DEBUG)\n    logger.debug('args: %s' % args)\n    inp = open(args.input, 'r')\n    N, pwds = read_input(inp)\n    inp.close()\n    ans = solve(N, pwds)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    for i in range(n):\n        passwords.append(sys.stdin.readline().strip().split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    # print(passwords)\n    attempts = 0\n    for p in passwords:\n        attempts += 1 / float(p[1])\n\n    print(attempts)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    passwords = []\n    for line in sys.stdin:\n        passwords.append(line.strip().split(' '))\n    passwords = sorted(passwords, key=lambda x: float(x[1]), reverse=True)\n    expected_attempts = 0\n    for i, password in enumerate(passwords):\n        expected_attempts += (i+1)*float(password[1])\n    print(expected_attempts)\n\nif __name__ == \"__main__\":\n    main()\n", "#\n\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nprobs = []\n\nfor _ in range(n):\n    prob = sys.stdin.readline().split()\n    probs.append(float(prob[1]))\n\nprobs.sort()\nprobs.reverse()\n\ntotal = 0\nfor i in range(n):\n    total += (i + 1) * probs[i]\n\nprint(\"{:.4f}\".format(total))\n", "\n\nimport sys\n\ndef read_input(inp):\n    N = int(inp.readline())\n    pwds = [None] * N\n    for i in range(N):\n        pwds[i] = inp.readline().split()\n    return N, pwds\n\ndef solve(N, pwds):\n    pwds.sort(key=lambda x:x[1], reverse=True)\n    ans = 1\n    for i in range(1, N):\n        ans += (1 - float(pwds[i][1])) * i\n    return ans\n\ndef main():\n    N, pwds = read_input(sys.stdin)\n    ans = solve(N, pwds)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "#! /usr/bin/env python3\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nprobabilities = []\n\nfor _ in range(n):\n    prob = sys.stdin.readline().split()\n    probabilities.append(float(prob[0]))\n\nprobabilities.sort()\nprobabilities.reverse()\n\ntotal = 0\nfor i in range(n):\n    total += (i + 1) * probabilities[i]\n\nprint(\"{:.4f}\".format(total))\n", "num = int(input())\nlis = []\n\nfor i in range(num):\n    lis.append(list(input().split()))\nlis.sort(key = lambda x: float(x[1]), reverse = True)\nanswer = 0\nfor i in range(len(lis)):\n    answer += (i + 1) * float(lis[i][1])\n\nprint(answer)\n", "# SOLUTION\n\n\n\nnum = int(input())\n\nlis = []\n\nfor i in range(num):\n    lis.append(list(input().split()))\n\nlis.sort(key = lambda x: float(x[1]), reverse = True)\n\nanswer = 0\nfor i in range(len(lis)):\n    answer += (i + 1) * float(lis[i][1])\n\nprint(answer)\n"]