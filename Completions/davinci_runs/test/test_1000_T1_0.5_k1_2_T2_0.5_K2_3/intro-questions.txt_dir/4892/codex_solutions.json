["\n\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        passwords.append(line.split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    total = 0\n    for i in range(len(passwords)):\n        total += (i+1) * float(passwords[i][1])\n    print(total)\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    for i in range(n):\n        passwords.append(sys.stdin.readline().strip().split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    # print(passwords)\n    attempts = 0\n    for p in passwords:\n        attempts += 1/float(p[1])\n    print(attempts)\n\nif __name__ == '__main__':\n    main()", "\n\n#SOLUTION\n\nnum = int(input())\n\nlis = []\n\nfor i in range(num):\n    lis.append(list(input().split()))\n\nlis.sort(key = lambda x: float(x[1]), reverse = True)\n\nanswer = 0\nfor i in range(len(lis)):\n    answer += (i + 1) * float(lis[i][1])\n\nprint(answer)", "\n\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline().strip())\n    passwords = [stdin.readline().strip().split(' ') for _ in range(n)]\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    sum = 0\n    for i in range(n):\n        sum += (i+1)*float(passwords[i][1])\n    print(sum)\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\ndef main():\n    passwords = []\n    for line in sys.stdin:\n        passwords.append(line.strip().split())\n    passwords = [[int(p), float(prob)] for p, prob in passwords]\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    # print(passwords)\n    expected = 0\n    for i in range(len(passwords)):\n        expected += (i + 1) * passwords[i][1]\n    print(expected)\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef main():\n    passwords = []\n    for line in sys.stdin:\n        passwords.append(line.strip().split(' '))\n    passwords = sorted(passwords, key=lambda x: float(x[1]), reverse=True)\n    # print(passwords)\n    expected_attempts = 0\n    for i, password in enumerate(passwords):\n        # print(password)\n        expected_attempts += (i+1)*float(password[1])\n    print(expected_attempts)\n\nif __name__ == \"__main__\":\n    main()", "\n\nimport sys\n\ndef read_input(inp):\n    N = int(inp.readline())\n    pwds = []\n    for i in range(N):\n        pwds.append(inp.readline().split())\n    return N, pwds\n\ndef solve(N, pwds):\n    pwds.sort(key=lambda x: x[1], reverse=True)\n    ans = 1\n    for i in range(N):\n        ans += (1 - float(pwds[i][1])) * (i + 1)\n    return ans\n\ndef main():\n    N, pwds = read_input(sys.stdin)\n    ans = solve(N, pwds)\n    print(ans)\n\nif __name__ == '__main__':\n    main()", "\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nprobs = []\n\nfor _ in range(n):\n    prob = sys.stdin.readline().split()\n    probs.append(float(prob[1]))\n\nprobs.sort()\nprobs.reverse()\n\ntotal = 0\nfor i in range(n):\n    total += (i + 1) * probs[i]\n\nprint(\"{:.4f}\".format(total))"]