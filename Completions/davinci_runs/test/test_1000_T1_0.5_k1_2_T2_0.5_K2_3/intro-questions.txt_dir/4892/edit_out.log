2022-04-13 06:11:56.913045 num operations 2
2022-04-13 06:11:56.913055 size on input set 1
2022-04-13 06:11:59.311656 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = [] \n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        passwords.append(line.split()) \n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    total = 0\n    for i in range(len(passwords)):\n        total += (i+1) * float(passwords[i][1])\n    print(total)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        passwords.append(line.split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    total = 0\n    for i in range(len(passwords)):\n        total += (i + 1) * float(passwords[i][1])\n    print(total)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        passwords.append(line.split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    total = 0\n    for i in range(len(passwords)):\n        total += (i+1) * float(passwords[i][1])\n    print(total)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649830317,
  "object": "edit"
}
2022-04-13 06:11:59.311887 fix spelling mistakes 3 ["\n\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = [] \n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        passwords.append(line.split()) \n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    total = 0\n    for i in range(len(passwords)):\n        total += (i+1) * float(passwords[i][1])\n    print(total)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        passwords.append(line.split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    total = 0\n    for i in range(len(passwords)):\n        total += (i + 1) * float(passwords[i][1])\n    print(total)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        passwords.append(line.split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    total = 0\n    for i in range(len(passwords)):\n        total += (i+1) * float(passwords[i][1])\n    print(total)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 06:11:59.311919 size on output set 3
2022-04-13 06:11:59.311925 size on input set 3
2022-04-13 06:12:04.261641 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        passwords.append(line.split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    total = 0\n    for i in range(len(passwords)):\n        total += (i+1) * float(passwords[i][1])\n    print(total)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        passwords.append(line.split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    total = 0\n    for i in range(len(passwords)):\n        total += (i+1) * float(passwords[i][1])\n    print(total)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline().strip()) # number of passwords\n    passwords = []\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        passwords.append(line.split()) # [password, value]\n    passwords.sort(key=lambda x: float(x[1]), reverse=True) # sort by value\n    total = 0\n    for i in range(len(passwords)):\n        total += (i+1) * float(passwords[i][1]) # index * value\n    print(total)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649830319,
  "object": "edit"
}
2022-04-13 06:12:04.261857 fix syntax errors 3 ["\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        passwords.append(line.split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    total = 0\n    for i in range(len(passwords)):\n        total += (i+1) * float(passwords[i][1])\n    print(total)\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        passwords.append(line.split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    total = 0\n    for i in range(len(passwords)):\n        total += (i+1) * float(passwords[i][1])\n    print(total)\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline().strip()) # number of passwords\n    passwords = []\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        passwords.append(line.split()) # [password, value]\n    passwords.sort(key=lambda x: float(x[1]), reverse=True) # sort by value\n    total = 0\n    for i in range(len(passwords)):\n        total += (i+1) * float(passwords[i][1]) # index * value\n    print(total)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 06:12:06.054220 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        passwords.append(line.split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    total = 0\n    for i in range(len(passwords)):\n        total += (i + 1) * float(passwords[i][1])\n    print(total)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        passwords.append(line.split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    total = 0\n    for i in range(len(passwords)):\n        total += (i + 1) * float(passwords[i][1])\n    print(total)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        passwords.append(line.split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    total = 0\n    for i in range(len(passwords)):\n        total += (i + 1) * float(passwords[i][1])\n    print(total)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649830324,
  "object": "edit"
}
2022-04-13 06:12:06.054439 fix syntax errors 3 ["\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        passwords.append(line.split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    total = 0\n    for i in range(len(passwords)):\n        total += (i + 1) * float(passwords[i][1])\n    print(total)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        passwords.append(line.split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    total = 0\n    for i in range(len(passwords)):\n        total += (i + 1) * float(passwords[i][1])\n    print(total)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        passwords.append(line.split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    total = 0\n    for i in range(len(passwords)):\n        total += (i + 1) * float(passwords[i][1])\n    print(total)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 06:12:09.044164 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        passwords.append(line.split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    total = 0\n    for i in range(len(passwords)):\n        total += (i+1) * float(passwords[i][1])\n    print(total)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = [] \n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        passwords.append(line.split()) \n    passwords.sort(key=lambda x: float(x[2]), reverse=True)\n    total = 0\n    for i in range(len(passwords)):\n        total += (i+1) * float(passwords[i][2])\n    print(total)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        passwords.append(line.split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    total = 0\n    for i in range(len(passwords)):\n        total += (i+1) * float(passwords[i][1])\n    print(total)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649830326,
  "object": "edit"
}
2022-04-13 06:12:09.044339 fix syntax errors 3 ["\n\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        passwords.append(line.split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    total = 0\n    for i in range(len(passwords)):\n        total += (i+1) * float(passwords[i][1])\n    print(total)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = [] \n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        passwords.append(line.split()) \n    passwords.sort(key=lambda x: float(x[2]), reverse=True)\n    total = 0\n    for i in range(len(passwords)):\n        total += (i+1) * float(passwords[i][2])\n    print(total)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        passwords.append(line.split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    total = 0\n    for i in range(len(passwords)):\n        total += (i+1) * float(passwords[i][1])\n    print(total)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 06:12:09.044368 size on output set 7
2022-04-13 06:12:09.044389 num operations 2
2022-04-13 06:12:09.044394 size on input set 1
2022-04-13 06:12:13.384449 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    for i in range(n):\n        passwords.append(sys.stdin.readline().strip().split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    # print(passwords) \n    attempts = 0\n    for p in passwords:\n        attempts += 1/float(p[1])\n    print(attempts)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\n    # n = int(input())\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n        # passwords.append(input().split())\n    for i in range(n):\n        passwords.append(sys.stdin.readline().strip().split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    # print(passwords)\n    attempts = 0.0\n    for p in passwords:\n        attempts += 1.0/float(p[1])\n    print(attempts)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = {}\n    for i in range(n):\n        l = sys.stdin.readline().strip().split()\n        passwords[float(l[1])] = l[0]\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    print(passwords)\n    attempts = 0\n    for p in passwords.keys():\n        attempts += 1/p\n        print(p)\n    print(attempts)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649830329,
  "object": "edit"
}
2022-04-13 06:12:13.384616 fix spelling mistakes 3 ["\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    for i in range(n):\n        passwords.append(sys.stdin.readline().strip().split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    # print(passwords) \n    attempts = 0\n    for p in passwords:\n        attempts += 1/float(p[1])\n    print(attempts)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\n    # n = int(input())\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n        # passwords.append(input().split())\n    for i in range(n):\n        passwords.append(sys.stdin.readline().strip().split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    # print(passwords)\n    attempts = 0.0\n    for p in passwords:\n        attempts += 1.0/float(p[1])\n    print(attempts)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = {}\n    for i in range(n):\n        l = sys.stdin.readline().strip().split()\n        passwords[float(l[1])] = l[0]\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    print(passwords)\n    attempts = 0\n    for p in passwords.keys():\n        attempts += 1/p\n        print(p)\n    print(attempts)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 06:12:13.384645 size on output set 3
2022-04-13 06:12:13.384651 size on input set 3
2022-04-13 06:12:16.240872 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    for i in range(n):\n        passwords.append(sys.stdin.readline().strip().split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    # print(passwords)\n    attempts = 0\n    for p in passwords:\n        attempts += 1 / float(p[1])\n\n    print(attempts)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    for i in range(n):\n        passwords.append(sys.stdin.readline().strip().split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    # print(passwords)\n    attempts = 0\n    for p in passwords:\n        attempts += 1 / float(p[1])\n    print(attempts)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    for i in range(n):\n        passwords.append(sys.stdin.readline().strip().split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    # print(passwords) \n    attempts = 0\n    for i in range(len(passwords)):\n        attempts += 1/float(passwords[i][1])\n    print(attempts)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649830333,
  "object": "edit"
}
2022-04-13 06:12:16.241051 fix syntax errors 3 ["\n\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    for i in range(n):\n        passwords.append(sys.stdin.readline().strip().split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    # print(passwords)\n    attempts = 0\n    for p in passwords:\n        attempts += 1 / float(p[1])\n\n    print(attempts)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    for i in range(n):\n        passwords.append(sys.stdin.readline().strip().split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    # print(passwords)\n    attempts = 0\n    for p in passwords:\n        attempts += 1 / float(p[1])\n    print(attempts)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    for i in range(n):\n        passwords.append(sys.stdin.readline().strip().split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    # print(passwords) \n    attempts = 0\n    for i in range(len(passwords)):\n        attempts += 1/float(passwords[i][1])\n    print(attempts)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 06:12:20.433641 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    for i in range(n):\n        l = sys.stdin.readline().strip().split()\n        passwords.append([l[0], float(l[1])])\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    attempts = 0\n    for p in passwords:\n        attempts += 1/p[1]\n    print(attempts)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = {}\n    for i in range(n):\n        l = sys.stdin.readline().strip().split()\n        passwords[float(l[1])] = l[0]\n    attempts = 0\n    for key in sorted(passwords.keys(), reverse=True):\n        attempts += 1/key\n    print(attempts)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = {}\n    for i in range(n):\n        l = sys.stdin.readline().strip().split()\n        passwords[float(l[1])] = l[0]\n    passwords.sort(key=lambda x: float(x[1]))\n    print(passwords)\n    attempts = 0\n    for p in passwords:\n        attempts += 1 / p\n        print(passwords[p])\n    print(attempts)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649830336,
  "object": "edit"
}
2022-04-13 06:12:20.433817 fix syntax errors 3 ["\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    for i in range(n):\n        l = sys.stdin.readline().strip().split()\n        passwords.append([l[0], float(l[1])])\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    attempts = 0\n    for p in passwords:\n        attempts += 1/p[1]\n    print(attempts)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = {}\n    for i in range(n):\n        l = sys.stdin.readline().strip().split()\n        passwords[float(l[1])] = l[0]\n    attempts = 0\n    for key in sorted(passwords.keys(), reverse=True):\n        attempts += 1/key\n    print(attempts)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = {}\n    for i in range(n):\n        l = sys.stdin.readline().strip().split()\n        passwords[float(l[1])] = l[0]\n    passwords.sort(key=lambda x: float(x[1]))\n    print(passwords)\n    attempts = 0\n    for p in passwords:\n        attempts += 1 / p\n        print(passwords[p])\n    print(attempts)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 06:12:23.344164 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\n# n = int(input())\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    # passwords.append(input().split())\n    for i in range(n):\n        passwords.append(sys.stdin.readline().strip().split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    # print(passwords)\n    attempts = 0.0\n    for p in passwords:\n        attempts += 1.0/float(p[1])\n    print(attempts)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\n    # n = int(input())\ndef main():\n    n = int(sys.stdin.readline())\n    passwords = []\n        # passwords.append(input().split())\n    for i in range(n):\n        passwords.append(sys.stdin.readline().split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    # print(passwords)\n    attempts = 0.0\n    for p in passwords:\n        attempts += 1.0/float(p[1])\n    print(attempts)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\n    # n = int(input()) \ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n        # passwords.append(input().split())\n    for i in range(n):\n        passwords.append(sys.stdin.readline().strip().split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    # print(passwords)\n    attempts = 0.0\n    for p in passwords:\n        attempts += 1.0/float(p[1])\n    print(attempts)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649830340,
  "object": "edit"
}
2022-04-13 06:12:23.344377 fix syntax errors 3 ["\n\nimport sys\n\n# n = int(input())\ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n    # passwords.append(input().split())\n    for i in range(n):\n        passwords.append(sys.stdin.readline().strip().split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    # print(passwords)\n    attempts = 0.0\n    for p in passwords:\n        attempts += 1.0/float(p[1])\n    print(attempts)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\n    # n = int(input())\ndef main():\n    n = int(sys.stdin.readline())\n    passwords = []\n        # passwords.append(input().split())\n    for i in range(n):\n        passwords.append(sys.stdin.readline().split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    # print(passwords)\n    attempts = 0.0\n    for p in passwords:\n        attempts += 1.0/float(p[1])\n    print(attempts)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\n    # n = int(input()) \ndef main():\n    n = int(sys.stdin.readline().strip())\n    passwords = []\n        # passwords.append(input().split())\n    for i in range(n):\n        passwords.append(sys.stdin.readline().strip().split())\n    passwords.sort(key=lambda x: float(x[1]), reverse=True)\n    # print(passwords)\n    attempts = 0.0\n    for p in passwords:\n        attempts += 1.0/float(p[1])\n    print(attempts)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 06:12:23.344409 size on output set 9
2022-04-13 06:12:23.344420 num operations 2
2022-04-13 06:12:23.344426 size on input set 1
2022-04-13 06:12:26.975604 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# SOLUTION\n\nnum = int(input())\n\nlis = []\n\nfor i in range(num):\n    lis.append(list(input().split()))\n\nlis.sort(key = lambda x: float(x[1]), reverse = True)\n\nanswer = 0\nfor i in range(len(lis)):\n    answer += (i + 1) * float(lis[i][1])\n\nprint(answer)\n"
    },
    {
      "index": 1,
      "text": "\n\n#SOLUTION 1\n\nnum = int(input())\n\nlis = []\n\nfor i in range(num):\n    lis.append(list(input().split()))\n\nlis.sort(key = lambda x: float(x[1]), reverse = True)\n\nanswer = 0\nfor i in range(len(lis)):\n    answer += (i + 1) * float(lis[i][1])\n\n\n#SOLUTION 2\n\nnum = int(input())\n\nlis = []\n\nfor i in range(num):\n    lis.append(list(input().split()))\n\nlis.sort(key = lambda x: float(x[1]), reverse = True)\n\nanswer = 0\nfor i in range(len(lis)):\n    answer += (i + 1) * float(lis[i][1])\n\nprint(answer)\nprint(answer)\n"
    },
    {
      "index": 2,
      "text": "\n\n# SOLUTION\n\nnum = int(input())\n\nlis = []\n\nfor i in range(num):\n    lis.append(list(input().split()))\n\nlis.sort(key = lambda x: float(x[1]), reverse = True)\n\nanswer = 0\nfor i in range(len(lis)):\n    answer += (i + 1) * float(lis[i][1])\n\nprint(answer)\n"
    }
  ],
  "created": 1649830343,
  "object": "edit"
}
2022-04-13 06:12:26.975782 fix spelling mistakes 3 ['\n\n# SOLUTION\n\nnum = int(input())\n\nlis = []\n\nfor i in range(num):\n    lis.append(list(input().split()))\n\nlis.sort(key = lambda x: float(x[1]), reverse = True)\n\nanswer = 0\nfor i in range(len(lis)):\n    answer += (i + 1) * float(lis[i][1])\n\nprint(answer)\n', '\n\n#SOLUTION 1\n\nnum = int(input())\n\nlis = []\n\nfor i in range(num):\n    lis.append(list(input().split()))\n\nlis.sort(key = lambda x: float(x[1]), reverse = True)\n\nanswer = 0\nfor i in range(len(lis)):\n    answer += (i + 1) * float(lis[i][1])\n\n\n#SOLUTION 2\n\nnum = int(input())\n\nlis = []\n\nfor i in range(num):\n    lis.append(list(input().split()))\n\nlis.sort(key = lambda x: float(x[1]), reverse = True)\n\nanswer = 0\nfor i in range(len(lis)):\n    answer += (i + 1) * float(lis[i][1])\n\nprint(answer)\nprint(answer)\n', '\n\n# SOLUTION\n\nnum = int(input())\n\nlis = []\n\nfor i in range(num):\n    lis.append(list(input().split()))\n\nlis.sort(key = lambda x: float(x[1]), reverse = True)\n\nanswer = 0\nfor i in range(len(lis)):\n    answer += (i + 1) * float(lis[i][1])\n\nprint(answer)\n']
2022-04-13 06:12:26.975878 size on output set 2
2022-04-13 06:12:26.975886 size on input set 2
2022-04-13 06:12:28.744533 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#SOLUTION 1\n\nnum = int(input())\n\nlis = []\n\nfor i in range(num):\n    lis.append(list(input().split()))\n\nlis.sort(key = lambda x: float(x[1]), reverse = True)\n\nanswer = 0\nfor i in range(len(lis)):\n    answer += (i + 1) * float(lis[i][1])\n\n\n#SOLUTION 2\n\nnum = int(input())\n\nlis = []\n\nfor i in range(num):\n    lis.append(list(input().split()))\n\nlis.sort(key = lambda x: float(x[1]), reverse = True)\n\nanswer = 0\nfor i in range(len(lis)):\n    answer += (i + 1) * float(lis[i][1])\n\nprint(answer)\n"
    },
    {
      "index": 1,
      "text": "\n\n#SOLUTION 1\n\nnum = int(input())\n\nlis = []\n\nfor i in range(num):\n    lis.append(list(input().split()))\n\nlis.sort(key = lambda x: float(x[1]), reverse = True)\n\nanswer = 0\nfor i in range(len(lis)):\n    answer += (i + 1) * float(lis[i][1])\n\nprint(answer)\n\n#SOLUTION 2\n\nnum = int(input())\n\nlis = []\n\nfor i in range(num):\n    lis.append(list(input().split()))\n\nlis.sort(key = lambda x: float(x[1]), reverse = True)\n\nanswer = 0\nfor i in range(len(lis)):\n    answer += (i + 1) * float(lis[i][1])\n\nprint(answer)\nprint(answer)\n"
    },
    {
      "index": 2,
      "text": "\n\n#SOLUTION 1\n\nnum = int(input())\n\nlis = []\n\nfor i in range(num):\n    lis.append(list(input().split()))\n\nlis.sort(key = lambda x: float(x[1]), reverse = True)\n\nanswer = 0\nfor i in range(len(lis)):\n    answer += (i + 1) * float(lis[i][1])\n\n\n#SOLUTION 2\n\nnum = int(input())\n\nlis = []\n\nfor i in range(num):\n    lis.append(list(input().split()))\n\nlis.sort(key = lambda x: float(x[1]), reverse = True)\n\nanswer = 0\nfor i in range(len(lis)):\n    answer += (i + 1) * float(lis[i][1])\n"
    }
  ],
  "created": 1649830347,
  "object": "edit"
}
2022-04-13 06:12:28.744708 fix syntax errors 3 ['\n\n#SOLUTION 1\n\nnum = int(input())\n\nlis = []\n\nfor i in range(num):\n    lis.append(list(input().split()))\n\nlis.sort(key = lambda x: float(x[1]), reverse = True)\n\nanswer = 0\nfor i in range(len(lis)):\n    answer += (i + 1) * float(lis[i][1])\n\n\n#SOLUTION 2\n\nnum = int(input())\n\nlis = []\n\nfor i in range(num):\n    lis.append(list(input().split()))\n\nlis.sort(key = lambda x: float(x[1]), reverse = True)\n\nanswer = 0\nfor i in range(len(lis)):\n    answer += (i + 1) * float(lis[i][1])\n\nprint(answer)\n', '\n\n#SOLUTION 1\n\nnum = int(input())\n\nlis = []\n\nfor i in range(num):\n    lis.append(list(input().split()))\n\nlis.sort(key = lambda x: float(x[1]), reverse = True)\n\nanswer = 0\nfor i in range(len(lis)):\n    answer += (i + 1) * float(lis[i][1])\n\nprint(answer)\n\n#SOLUTION 2\n\nnum = int(input())\n\nlis = []\n\nfor i in range(num):\n    lis.append(list(input().split()))\n\nlis.sort(key = lambda x: float(x[1]), reverse = True)\n\nanswer = 0\nfor i in range(len(lis)):\n    answer += (i + 1) * float(lis[i][1])\n\nprint(answer)\nprint(answer)\n', '\n\n#SOLUTION 1\n\nnum = int(input())\n\nlis = []\n\nfor i in range(num):\n    lis.append(list(input().split()))\n\nlis.sort(key = lambda x: float(x[1]), reverse = True)\n\nanswer = 0\nfor i in range(len(lis)):\n    answer += (i + 1) * float(lis[i][1])\n\n\n#SOLUTION 2\n\nnum = int(input())\n\nlis = []\n\nfor i in range(num):\n    lis.append(list(input().split()))\n\nlis.sort(key = lambda x: float(x[1]), reverse = True)\n\nanswer = 0\nfor i in range(len(lis)):\n    answer += (i + 1) * float(lis[i][1])\n']
2022-04-13 06:12:31.025104 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "num = int(input())\nlis = []\n\nfor i in range(num):\n    lis.append(list(input().split()))\nlis.sort(key = lambda x: float(x[1]), reverse = True)\nanswer = 0\nfor i in range(len(lis)):\n    answer += (i + 1) * float(lis[i][1])\n\nprint(answer)\n"
    },
    {
      "index": 1,
      "text": "# SOLUTION\n\n\n\nnum = int(input())\n\nlis = []\n\nfor i in range(num):\n    lis.append(list(input().split()))\n\nlis.sort(key = lambda x: float(x[1]), reverse = True)\n\nanswer = 0\nfor i in range(len(lis)):\n    answer += (i + 1) * float(lis[i][1])\n\nprint(answer)\n"
    },
    {
      "index": 2,
      "text": "\n# SOLUTION\nnum = int(input())\nlis = []\n\nfor i in range(num):\n    lis.append(list(input().split()))\nlis.sort(key = lambda x: float(x[1]), reverse = True)\nanswer = 0\nfor i in range(len(lis)):\n    answer += (i + 1) * float(lis[i][1])\nprint(answer)\n"
    }
  ],
  "created": 1649830348,
  "object": "edit"
}
2022-04-13 06:12:31.025275 fix syntax errors 3 ['num = int(input())\nlis = []\n\nfor i in range(num):\n    lis.append(list(input().split()))\nlis.sort(key = lambda x: float(x[1]), reverse = True)\nanswer = 0\nfor i in range(len(lis)):\n    answer += (i + 1) * float(lis[i][1])\n\nprint(answer)\n', '# SOLUTION\n\n\n\nnum = int(input())\n\nlis = []\n\nfor i in range(num):\n    lis.append(list(input().split()))\n\nlis.sort(key = lambda x: float(x[1]), reverse = True)\n\nanswer = 0\nfor i in range(len(lis)):\n    answer += (i + 1) * float(lis[i][1])\n\nprint(answer)\n', '\n# SOLUTION\nnum = int(input())\nlis = []\n\nfor i in range(num):\n    lis.append(list(input().split()))\nlis.sort(key = lambda x: float(x[1]), reverse = True)\nanswer = 0\nfor i in range(len(lis)):\n    answer += (i + 1) * float(lis[i][1])\nprint(answer)\n']
2022-04-13 06:12:31.025313 size on output set 6
2022-04-13 06:12:31.025324 num operations 2
2022-04-13 06:12:31.025329 size on input set 1
2022-04-13 06:12:37.356311 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom collections import deque\nfrom sys import stdin\n\ndef main():\n    n,k = [int(x) for x in stdin.readline().strip().split()]\n    d = deque()\n    for i in range(n):\n        d.append(i+1)\n    index = 0\n    res = []\n    while len(d)>0:\n        index += k-1\n        index %= len(d)\n        res.append(d[index])\n        d.remove(d[index])\n    print('<'+', '.join([str(x) for x in res])+'>')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline().strip())\n    passwords = [stdin.readline().strip().split(' ') for _ in range(n)]\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    sum = 0\n    for i in range(n):\n        sum += (i+1)*float(passwords[i][1])\n    print(sum)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom sys import stdin\n\n\ndef main():\n    n = int(stdin.readline().strip())\n    passwords = [stdin.readline().strip().split(' ') for _ in range(n)]\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    sum = 0\n    for i in range(n):\n        sum += (i+1)*float(passwords[i][1])\n    print(sum)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649830351,
  "object": "edit"
}
2022-04-13 06:12:37.356497 fix spelling mistakes 3 ["\n\nfrom collections import deque\nfrom sys import stdin\n\ndef main():\n    n,k = [int(x) for x in stdin.readline().strip().split()]\n    d = deque()\n    for i in range(n):\n        d.append(i+1)\n    index = 0\n    res = []\n    while len(d)>0:\n        index += k-1\n        index %= len(d)\n        res.append(d[index])\n        d.remove(d[index])\n    print('<'+', '.join([str(x) for x in res])+'>')\n\nif __name__ == '__main__':\n    main()\n", "\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline().strip())\n    passwords = [stdin.readline().strip().split(' ') for _ in range(n)]\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    sum = 0\n    for i in range(n):\n        sum += (i+1)*float(passwords[i][1])\n    print(sum)\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\n\n\ndef main():\n    n = int(stdin.readline().strip())\n    passwords = [stdin.readline().strip().split(' ') for _ in range(n)]\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    sum = 0\n    for i in range(n):\n        sum += (i+1)*float(passwords[i][1])\n    print(sum)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 06:12:37.356587 size on output set 3
2022-04-13 06:12:37.356594 size on input set 3
2022-04-13 06:12:39.358844 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom collections import deque\nfrom sys import stdin\n\ndef main():\n    n,k = [int(x) for x in stdin.readline().strip().split()]\n    d = deque()\n    for i in range(n):\n        d.append(i+1)\n    index = 0\n    res = []\n    while len(d)>0:\n        index += k-1\n        index %= len(d)\n        res.append(d[index])\n        d.remove(d[index])\n    print('<'+', '.join([str(x) for x in res])+'>')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nfrom collections import deque\n\nfrom sys import stdin\n\ndef main():\n    n,k = [int(x) for x in stdin.readline().strip().split()]\n    d = deque()\n    for i in range(n):\n        d.append(i+1)\n    index = 0\n    res = []\n    while len(d)>0:\n        index += k-1\n        index %= len(d)\n        res.append(d[index])\n        d.remove(d[index])\n    print('<'+', '.join([str(x) for x in res])+'>')\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\"\"\"\nJosephus problem\n\"\"\"\n\nfrom collections import deque\nfrom sys import stdin\n\ndef main():\n    n,k = [int(x) for x in stdin.readline().strip().split()]\n    d = deque()\n    for i in range(n):\n        d.append(i+1)\n    index = 0\n    res = []\n    while len(d)>0:\n        index += k-1\n        index %= len(d)\n        res.append(d[index])\n        d.remove(d[index])\n    print('<'+', '.join([str(x) for x in res])+'>')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649830357,
  "object": "edit"
}
2022-04-13 06:12:39.359023 fix syntax errors 3 ["#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom collections import deque\nfrom sys import stdin\n\ndef main():\n    n,k = [int(x) for x in stdin.readline().strip().split()]\n    d = deque()\n    for i in range(n):\n        d.append(i+1)\n    index = 0\n    res = []\n    while len(d)>0:\n        index += k-1\n        index %= len(d)\n        res.append(d[index])\n        d.remove(d[index])\n    print('<'+', '.join([str(x) for x in res])+'>')\n\nif __name__ == '__main__':\n    main()\n", "\nfrom collections import deque\n\nfrom sys import stdin\n\ndef main():\n    n,k = [int(x) for x in stdin.readline().strip().split()]\n    d = deque()\n    for i in range(n):\n        d.append(i+1)\n    index = 0\n    res = []\n    while len(d)>0:\n        index += k-1\n        index %= len(d)\n        res.append(d[index])\n        d.remove(d[index])\n    print('<'+', '.join([str(x) for x in res])+'>')\n\n\nif __name__ == '__main__':\n    main()\n", '"""\nJosephus problem\n"""\n\nfrom collections import deque\nfrom sys import stdin\n\ndef main():\n    n,k = [int(x) for x in stdin.readline().strip().split()]\n    d = deque()\n    for i in range(n):\n        d.append(i+1)\n    index = 0\n    res = []\n    while len(d)>0:\n        index += k-1\n        index %= len(d)\n        res.append(d[index])\n        d.remove(d[index])\n    print(\'<\'+\', \'.join([str(x) for x in res])+\'>\')\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-13 06:12:42.194105 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline().strip())\n    passwords = [stdin.readline().strip().split(' ') for _ in range(n)]\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    sum_ = 0\n    for i in range(n):\n        sum_ += (i+1)*float(passwords[i][1])\n    print(sum_)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline().strip())\n    passwords = [stdin.readline().strip().split(' ') for _ in range(n)]\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    sums = 0\n    for i in range(n):\n        sums += (i+1)*float(passwords[i][1])\n    print(sums)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline().strip())\n    passwords = [stdin.readline().strip().split(' ') for _ in range(n)]\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    summ = 0\n    for i in range(n):\n        summ += (i+1)*float(passwords[i][1])\n    print(summ)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649830359,
  "object": "edit"
}
2022-04-13 06:12:42.194280 fix syntax errors 3 ["\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline().strip())\n    passwords = [stdin.readline().strip().split(' ') for _ in range(n)]\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    sum_ = 0\n    for i in range(n):\n        sum_ += (i+1)*float(passwords[i][1])\n    print(sum_)\n\nif __name__ == '__main__':\n    main()\n", "\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline().strip())\n    passwords = [stdin.readline().strip().split(' ') for _ in range(n)]\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    sums = 0\n    for i in range(n):\n        sums += (i+1)*float(passwords[i][1])\n    print(sums)\n\nif __name__ == '__main__':\n    main()\n", "\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline().strip())\n    passwords = [stdin.readline().strip().split(' ') for _ in range(n)]\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    summ = 0\n    for i in range(n):\n        summ += (i+1)*float(passwords[i][1])\n    print(summ)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 06:12:45.165760 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom sys import stdin\n\n\ndef main():\n    n = int(stdin.readline().strip())\n    passwords = [stdin.readline().strip().split(' ') for _ in range(n)]\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    total = 0\n    for i in range(n):\n        total += (i+1)*float(passwords[i][1])\n    print(total)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import stdin\n\n\ndef main():\n    n = int(stdin.readline().strip())\n    passwords = [stdin.readline().strip().split(' ') for _ in range(n)]\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    total = 0\n    for i in range(n):\n        total += (i+1)*float(passwords[i][1])\n    print(total)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nfrom sys import stdin\n\n\ndef main():\n    n = int(stdin.readline().strip())\n    passwords = [stdin.readline().strip().split(' ') for _ in range(n)]\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    sum = 0\n    for i in range(n):\n        sum += (i+1)*float(passwords[i][1])\n    print(sum)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649830362,
  "object": "edit"
}
2022-04-13 06:12:45.165927 fix syntax errors 3 ["\n\nfrom sys import stdin\n\n\ndef main():\n    n = int(stdin.readline().strip())\n    passwords = [stdin.readline().strip().split(' ') for _ in range(n)]\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    total = 0\n    for i in range(n):\n        total += (i+1)*float(passwords[i][1])\n    print(total)\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\n\n\ndef main():\n    n = int(stdin.readline().strip())\n    passwords = [stdin.readline().strip().split(' ') for _ in range(n)]\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    total = 0\n    for i in range(n):\n        total += (i+1)*float(passwords[i][1])\n    print(total)\n\nif __name__ == '__main__':\n    main()\n", "\nfrom sys import stdin\n\n\ndef main():\n    n = int(stdin.readline().strip())\n    passwords = [stdin.readline().strip().split(' ') for _ in range(n)]\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    sum = 0\n    for i in range(n):\n        sum += (i+1)*float(passwords[i][1])\n    print(sum)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 06:12:45.165954 size on output set 8
2022-04-13 06:12:45.165966 num operations 2
2022-04-13 06:12:45.166051 size on input set 1
2022-04-13 06:12:52.866083 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    passwords = [] # list of passwords and their probabilities\n    for line in sys.stdin:\n        passwords.append(line.strip().split()) # split line into password and probability\n    passwords = [[int(p), float(prob)] for p, prob in passwords] # convert to int and float\n    passwords.sort(key=lambda x: x[1], reverse=True) # sort in descending order of probabilities\n    # print(passwords)\n    expected = 0\n    for i in range(len(passwords)):\n        expected += (i + 1) * passwords[i][1]\n    print(expected)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    passwords = []\n    for line in sys.stdin:\n        passwords.append(line.strip().split())\n    passwords = [[int(p), float(prob)] for p, prob in passwords]\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    # print(passwords)\n    expected = 0\n    for i in range(len(passwords)):\n        expected += (i + 1) * passwords[i][1]\n    print(expected)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    passwords = [] # list of passwords\n    for line in sys.stdin:\n        passwords.append(line.strip().split()) # get a list of passwords\n    passwords = [[int(p), float(prob)] for p, prob in passwords] # convert to int, float\n    passwords.sort(key=lambda x: x[1], reverse=True) # sort by probability in descending order\n    expected = 0\n    for i in range(len(passwords)):\n        expected += (i + 1) * passwords[i][1] # i + 1 is the number of guesses\n                                              # passwords[i][1] is the probability of that password\n    print(expected)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649830365,
  "object": "edit"
}
2022-04-13 06:12:52.866255 fix spelling mistakes 3 ['\n\nimport sys\n\ndef main():\n    passwords = [] # list of passwords and their probabilities\n    for line in sys.stdin:\n        passwords.append(line.strip().split()) # split line into password and probability\n    passwords = [[int(p), float(prob)] for p, prob in passwords] # convert to int and float\n    passwords.sort(key=lambda x: x[1], reverse=True) # sort in descending order of probabilities\n    # print(passwords)\n    expected = 0\n    for i in range(len(passwords)):\n        expected += (i + 1) * passwords[i][1]\n    print(expected)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    passwords = []\n    for line in sys.stdin:\n        passwords.append(line.strip().split())\n    passwords = [[int(p), float(prob)] for p, prob in passwords]\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    # print(passwords)\n    expected = 0\n    for i in range(len(passwords)):\n        expected += (i + 1) * passwords[i][1]\n    print(expected)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    passwords = [] # list of passwords\n    for line in sys.stdin:\n        passwords.append(line.strip().split()) # get a list of passwords\n    passwords = [[int(p), float(prob)] for p, prob in passwords] # convert to int, float\n    passwords.sort(key=lambda x: x[1], reverse=True) # sort by probability in descending order\n    expected = 0\n    for i in range(len(passwords)):\n        expected += (i + 1) * passwords[i][1] # i + 1 is the number of guesses\n                                              # passwords[i][1] is the probability of that password\n    print(expected)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 06:12:52.866290 size on output set 3
2022-04-13 06:12:52.866311 size on input set 3
2022-04-13 06:12:55.744406 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    passwords = []\n    for line in sys.stdin:\n        passwords.append(line.strip().split())\n    passwords = [[int(p), float(prob)] for p, prob in passwords if p != ' ']\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    # print(passwords)\n    expected = 0\n    for i in range(len(passwords)):\n        expected += (i + 1) * passwords[i][1]\n    print(expected)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    passwords = []\n    # get all the passwords\n    for line in sys.stdin:\n        passwords.append(line.strip().split())\n    # convert to int and float\n    passwords = [[int(p), float(prob)] for p, prob in passwords]\n    # sort the passwords in decreasing order of probability\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    # calculate the expected value\n    expected = 0\n    for i in range(len(passwords)):\n        expected += (i + 1) * passwords[i][1]\n    print(expected)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    passwords = []\n    for line in sys.stdin:\n        passwords.append(line.strip().split())\n    passwords = [[int(p), float(prob)] for p, prob in passwords[1:]]\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    # print(passwords)\n    expected = 0\n    for i in range(len(passwords)):\n        expected += (i + 1) * passwords[i][1]\n    print(expected)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649830372,
  "object": "edit"
}
2022-04-13 06:12:55.744573 fix syntax errors 3 ['\nimport sys\n\ndef main():\n    passwords = []\n    for line in sys.stdin:\n        passwords.append(line.strip().split())\n    passwords = [[int(p), float(prob)] for p, prob in passwords if p != \' \']\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    # print(passwords)\n    expected = 0\n    for i in range(len(passwords)):\n        expected += (i + 1) * passwords[i][1]\n    print(expected)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    passwords = []\n    # get all the passwords\n    for line in sys.stdin:\n        passwords.append(line.strip().split())\n    # convert to int and float\n    passwords = [[int(p), float(prob)] for p, prob in passwords]\n    # sort the passwords in decreasing order of probability\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    # calculate the expected value\n    expected = 0\n    for i in range(len(passwords)):\n        expected += (i + 1) * passwords[i][1]\n    print(expected)\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    passwords = []\n    for line in sys.stdin:\n        passwords.append(line.strip().split())\n    passwords = [[int(p), float(prob)] for p, prob in passwords[1:]]\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    # print(passwords)\n    expected = 0\n    for i in range(len(passwords)):\n        expected += (i + 1) * passwords[i][1]\n    print(expected)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 06:13:02.589402 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef main():\n    passwords = []  # list of passwords\n    for line in sys.stdin:\n        passwords.append(line.strip().split()) # get a list of passwords\n    passwords = [[int(p), float(prob)] for p, prob in passwords] # convert to int, float\n    passwords.sort(key=lambda x: x[1], reverse=True) # sort by probability in descending order\n    expected = 0\n    for i in range(len(passwords)):\n        expected += (i + 1) * passwords[i][1] # i + 1 is the number of guesses\n                                              # passwords[i][1] is the probability of that password\n    print(expected)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    passwords = [] # list of passwords\n    for line in sys.stdin:\n        passwords.append(line.strip().split()) # get a list of passwords\n    passwords = [[int(p), float(prob)] for p, prob in passwords] # convert to int and float\n    passwords.sort(key=lambda x: x[1], reverse=True) # sort by probability in descending order\n    expected = 0\n    for i in range(len(passwords)):\n        expected += (i + 1) * passwords[i][1] # i + 1 is the number of guesses\n                                              # passwords[i][1] is the probability of that password\n    print(expected)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    passwords = [] # list of passwords\n    for line in sys.stdin:\n        passwords.append(line.strip().split()) # get a list of passwords\n    passwords = [[int(p), float(prob)] for p, prob in passwords] # convert to int, float\n    passwords.sort(key=lambda x: x[1], reverse=True) # sort by probability in descending order\n    expected = 0\n    for i in range(len(passwords) - 1):\n        expected += (i + 1) * passwords[i][1] # i + 1 is the number of guesses\n                                              # passwords[i][1] is the probability of that password\n    print(expected)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649830375,
  "object": "edit"
}
2022-04-13 06:13:02.589676 fix syntax errors 3 ['import sys\n\ndef main():\n    passwords = []  # list of passwords\n    for line in sys.stdin:\n        passwords.append(line.strip().split()) # get a list of passwords\n    passwords = [[int(p), float(prob)] for p, prob in passwords] # convert to int, float\n    passwords.sort(key=lambda x: x[1], reverse=True) # sort by probability in descending order\n    expected = 0\n    for i in range(len(passwords)):\n        expected += (i + 1) * passwords[i][1] # i + 1 is the number of guesses\n                                              # passwords[i][1] is the probability of that password\n    print(expected)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    passwords = [] # list of passwords\n    for line in sys.stdin:\n        passwords.append(line.strip().split()) # get a list of passwords\n    passwords = [[int(p), float(prob)] for p, prob in passwords] # convert to int and float\n    passwords.sort(key=lambda x: x[1], reverse=True) # sort by probability in descending order\n    expected = 0\n    for i in range(len(passwords)):\n        expected += (i + 1) * passwords[i][1] # i + 1 is the number of guesses\n                                              # passwords[i][1] is the probability of that password\n    print(expected)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    passwords = [] # list of passwords\n    for line in sys.stdin:\n        passwords.append(line.strip().split()) # get a list of passwords\n    passwords = [[int(p), float(prob)] for p, prob in passwords] # convert to int, float\n    passwords.sort(key=lambda x: x[1], reverse=True) # sort by probability in descending order\n    expected = 0\n    for i in range(len(passwords) - 1):\n        expected += (i + 1) * passwords[i][1] # i + 1 is the number of guesses\n                                              # passwords[i][1] is the probability of that password\n    print(expected)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 06:13:11.084026 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    passwords = [] # list of passwords and their probabilities\n    for line in sys.stdin:\n        passwords.append(line.strip().split()) # split line into password and probability\n    passwords = [[int(p), float(prob)] for p, prob in passwords] # convert to int and float\n    passwords.sort(key=lambda x: x[1], reverse=True) # sort in descending order of probabilities\n    expected = 0\n    for i, p in enumerate(passwords):\n        expected += (i + 1) * p[1]\n    print(expected)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    passwords = [] # list of passwords and their probabilities\n    for line in sys.stdin:\n        passwords.append(line.strip().split()) # split line into password and probability\n    passwords = [[int(p), float(prob)] for p, prob in passwords] # convert to int and float\n    passwords.sort(key=lambda x: x[1], reverse=True) # sort in descending order of probabilities\n    expected = 0\n    for i in range(len(passwords)):\n        expected += (i + 1) * passwords[i][1]\n    print(expected)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n#\n# import sys\n#\n# def main():\n#     passwords = [] # list of passwords and their probabilities\n#     for line in sys.stdin:\n#         passwords.append(line.strip().split()) # split line into password and probability\n#     passwords = [[int(p), float(prob)] for p, prob in passwords] # convert to int and float\n#     passwords.sort(key=lambda x: x[1], reverse=True) # sort in descending order of probabilities\n#     # print(passwords)\n#     expected = 0\n#     for i in range(len(passwords)):\n#         expected += (i + 1) * passwords[i][1]\n#     print(expected)\n#\n# if __name__ == \"__main__\":\n#     main()\n"
    }
  ],
  "created": 1649830382,
  "object": "edit"
}
2022-04-13 06:13:11.084216 fix syntax errors 3 ['\n\nimport sys\n\ndef main():\n    passwords = [] # list of passwords and their probabilities\n    for line in sys.stdin:\n        passwords.append(line.strip().split()) # split line into password and probability\n    passwords = [[int(p), float(prob)] for p, prob in passwords] # convert to int and float\n    passwords.sort(key=lambda x: x[1], reverse=True) # sort in descending order of probabilities\n    expected = 0\n    for i, p in enumerate(passwords):\n        expected += (i + 1) * p[1]\n    print(expected)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    passwords = [] # list of passwords and their probabilities\n    for line in sys.stdin:\n        passwords.append(line.strip().split()) # split line into password and probability\n    passwords = [[int(p), float(prob)] for p, prob in passwords] # convert to int and float\n    passwords.sort(key=lambda x: x[1], reverse=True) # sort in descending order of probabilities\n    expected = 0\n    for i in range(len(passwords)):\n        expected += (i + 1) * passwords[i][1]\n    print(expected)\n\nif __name__ == "__main__":\n    main()\n', '\n#\n# import sys\n#\n# def main():\n#     passwords = [] # list of passwords and their probabilities\n#     for line in sys.stdin:\n#         passwords.append(line.strip().split()) # split line into password and probability\n#     passwords = [[int(p), float(prob)] for p, prob in passwords] # convert to int and float\n#     passwords.sort(key=lambda x: x[1], reverse=True) # sort in descending order of probabilities\n#     # print(passwords)\n#     expected = 0\n#     for i in range(len(passwords)):\n#         expected += (i + 1) * passwords[i][1]\n#     print(expected)\n#\n# if __name__ == "__main__":\n#     main()\n']
2022-04-13 06:13:11.084254 size on output set 9
2022-04-13 06:13:11.084267 num operations 2
2022-04-13 06:13:11.084272 size on input set 1
2022-04-13 06:13:13.438578 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    passwords = []\n    for line in sys.stdin:\n        passwords.append(line.strip().split(' '))\n    passwords = sorted(passwords, key=lambda x: float(x[1]), reverse=True)\n    # print(password)\n    expected_attempts = 0\n    for i, password in enumerate(passwords):\n        # print(password)\n        expected_attempts += (i+1)*float(password[1])\n    print(expected_attempts)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    passwords = []\n    for line in sys.stdin:\n        passwords.append(line.strip().split(' '))\n    passwords = sorted(passwords, key=lambda x: float(x[1]), reverse=True)\n    expected_attempts = 0\n    for i, password in enumerate(passwords):\n        expected_attempts += (i+1)*float(password[1])\n    print(expected_attempts)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    passwords = []\n    for line in sys.stdin:\n        passwords.append(line.strip().split(' '))\n    passwords = sorted(passwords, key=lambda x: float(x[1]))\n    # print(passwords)\n    expected_attempts = 0\n    for i, password in enumerate(passwords):\n        # print(password)\n        expected_attempts += (i+1)*float(password[1])\n    print(expected_attempts)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649830391,
  "object": "edit"
}
2022-04-13 06:13:13.438765 fix spelling mistakes 3 ['\n\nimport sys\n\ndef main():\n    passwords = []\n    for line in sys.stdin:\n        passwords.append(line.strip().split(\' \'))\n    passwords = sorted(passwords, key=lambda x: float(x[1]), reverse=True)\n    # print(password)\n    expected_attempts = 0\n    for i, password in enumerate(passwords):\n        # print(password)\n        expected_attempts += (i+1)*float(password[1])\n    print(expected_attempts)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    passwords = []\n    for line in sys.stdin:\n        passwords.append(line.strip().split(\' \'))\n    passwords = sorted(passwords, key=lambda x: float(x[1]), reverse=True)\n    expected_attempts = 0\n    for i, password in enumerate(passwords):\n        expected_attempts += (i+1)*float(password[1])\n    print(expected_attempts)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    passwords = []\n    for line in sys.stdin:\n        passwords.append(line.strip().split(\' \'))\n    passwords = sorted(passwords, key=lambda x: float(x[1]))\n    # print(passwords)\n    expected_attempts = 0\n    for i, password in enumerate(passwords):\n        # print(password)\n        expected_attempts += (i+1)*float(password[1])\n    print(expected_attempts)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 06:13:13.438883 size on output set 3
2022-04-13 06:13:13.438891 size on input set 3
2022-04-13 06:13:15.475602 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef main():\n    passwords = []\n    for line in sys.stdin:\n        passwords.append(line.strip().split(' '))\n    passwords = sorted(passwords, key=lambda x: float(x[1]), reverse=True)\n    expected_attempts = 0\n    for i, password in enumerate(passwords):\n        expected_attempts += (i+1)*float(password[1])\n    print(expected_attempts)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    passwords = []\n    for line in sys.stdin:\n        passwords.append(line.strip().split(' '))\n    passwords = sorted(passwords, key=lambda x: float(x[1]), reverse=True)\n    expected_attempts = 0\n    for i, password in enumerate(passwords, start=1):\n        expected_attempts += (i+1)*float(password[1])\n    print(expected_attempts)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    passwords = []\n    for line in sys.stdin:\n        passwords.append(line.strip().split(' '))\n    passwords = sorted(passwords, key=lambda x: float(x[1]), reverse=True)\n    expected_attempts = 0\n    for i, password in enumerate(passwords):\n        expected_attempts += (i+1)*float(password[1])\n    print(expected_attempts)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649830393,
  "object": "edit"
}
2022-04-13 06:13:15.475769 fix syntax errors 3 ['import sys\n\ndef main():\n    passwords = []\n    for line in sys.stdin:\n        passwords.append(line.strip().split(\' \'))\n    passwords = sorted(passwords, key=lambda x: float(x[1]), reverse=True)\n    expected_attempts = 0\n    for i, password in enumerate(passwords):\n        expected_attempts += (i+1)*float(password[1])\n    print(expected_attempts)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    passwords = []\n    for line in sys.stdin:\n        passwords.append(line.strip().split(\' \'))\n    passwords = sorted(passwords, key=lambda x: float(x[1]), reverse=True)\n    expected_attempts = 0\n    for i, password in enumerate(passwords, start=1):\n        expected_attempts += (i+1)*float(password[1])\n    print(expected_attempts)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    passwords = []\n    for line in sys.stdin:\n        passwords.append(line.strip().split(\' \'))\n    passwords = sorted(passwords, key=lambda x: float(x[1]), reverse=True)\n    expected_attempts = 0\n    for i, password in enumerate(passwords):\n        expected_attempts += (i+1)*float(password[1])\n    print(expected_attempts)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 06:13:18.788291 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys, math\n\ndef main():\n    passwords = []\n    for line in sys.stdin:\n        passwords.append(line.strip().split(' '))\n    passwords = sorted(passwords, key=lambda x: float(x[1]), reverse=True)\n    expected_attempts = 0\n    for i, password in enumerate(passwords):\n        expected_attempts += (i+1)*float(password[1])\n    print(expected_attempts)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    passwords = []\n    for line in sys.stdin:\n        passwords.append(line.strip().split(' '))\n    passwords = sorted(passwords, key=lambda x: float(x[1]), reverse=True)\n    # print(passwords)\n    expected_attempts = 0\n    for i, p in enumerate(passwords):\n        # print(p)\n        expected_attempts += (i+1)*float(p[1])\n    print(expected_attempts)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    passwords = []\n    for line in sys.stdin:\n        passwords.append(line.strip().split(' '))\n    passwords = sorted(passwords, key=lambda x: float(x[1]), reverse=True)\n    expected_attempts = 0\n    for i, password in enumerate(passwords):\n        expected_attempts += (i+1)*float(password[1])\n    print(expected_attempts)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649830395,
  "object": "edit"
}
2022-04-13 06:13:18.788484 fix syntax errors 3 ['\nimport sys, math\n\ndef main():\n    passwords = []\n    for line in sys.stdin:\n        passwords.append(line.strip().split(\' \'))\n    passwords = sorted(passwords, key=lambda x: float(x[1]), reverse=True)\n    expected_attempts = 0\n    for i, password in enumerate(passwords):\n        expected_attempts += (i+1)*float(password[1])\n    print(expected_attempts)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    passwords = []\n    for line in sys.stdin:\n        passwords.append(line.strip().split(\' \'))\n    passwords = sorted(passwords, key=lambda x: float(x[1]), reverse=True)\n    # print(passwords)\n    expected_attempts = 0\n    for i, p in enumerate(passwords):\n        # print(p)\n        expected_attempts += (i+1)*float(p[1])\n    print(expected_attempts)\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    passwords = []\n    for line in sys.stdin:\n        passwords.append(line.strip().split(\' \'))\n    passwords = sorted(passwords, key=lambda x: float(x[1]), reverse=True)\n    expected_attempts = 0\n    for i, password in enumerate(passwords):\n        expected_attempts += (i+1)*float(password[1])\n    print(expected_attempts)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 06:13:22.281345 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    passwords = []\n    for line in sys.stdin:\n        passwords.append(line.strip().split(' '))\n    passwords = sorted(passwords, key=lambda x: float(x[1]))\n    expected_attempts = 0\n    for i, password in enumerate(passwords):\n        expected_attempts += (i+1)*float(password[1])\n    print(expected_attempts)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n\nimport sys\n\ndef main():\n    passwords = []\n    for line in sys.stdin:\n        passwords.append(line.strip().split(' '))\n    passwords = sorted(passwords, key=lambda x: float(x[1]))\n    # print(passwords)\n    expected_attempts = 0\n    for i, password in enumerate(passwords):\n        # print(password)\n        expected_attempts += (i+1)*float(password[1])\n    print(expected_attempts)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    passwords = []\n    for line in sys.stdin:\n        passwords.append(line.strip().split(' '))\n    passwords = sorted(passwords, key=lambda x: float(x[1]), reverse=True)\n    # print(passwords)\n    expected_attempts = 0\n    for i, password in enumerate(passwords):\n        # print(password)\n        expected_attempts += (i+1)*float(password[1])*0.01\n    print(expected_attempts)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649830398,
  "object": "edit"
}
2022-04-13 06:13:22.281681 fix syntax errors 3 ['\n\nimport sys\n\ndef main():\n    passwords = []\n    for line in sys.stdin:\n        passwords.append(line.strip().split(\' \'))\n    passwords = sorted(passwords, key=lambda x: float(x[1]))\n    expected_attempts = 0\n    for i, password in enumerate(passwords):\n        expected_attempts += (i+1)*float(password[1])\n    print(expected_attempts)\n\nif __name__ == "__main__":\n    main()\n', '\n\n\nimport sys\n\ndef main():\n    passwords = []\n    for line in sys.stdin:\n        passwords.append(line.strip().split(\' \'))\n    passwords = sorted(passwords, key=lambda x: float(x[1]))\n    # print(passwords)\n    expected_attempts = 0\n    for i, password in enumerate(passwords):\n        # print(password)\n        expected_attempts += (i+1)*float(password[1])\n    print(expected_attempts)\n\n\nif __name__ == "__main__":\n    main()\n', '#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    passwords = []\n    for line in sys.stdin:\n        passwords.append(line.strip().split(\' \'))\n    passwords = sorted(passwords, key=lambda x: float(x[1]), reverse=True)\n    # print(passwords)\n    expected_attempts = 0\n    for i, password in enumerate(passwords):\n        # print(password)\n        expected_attempts += (i+1)*float(password[1])*0.01\n    print(expected_attempts)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 06:13:22.281777 size on output set 8
2022-04-13 06:13:22.281789 num operations 2
2022-04-13 06:13:22.281794 size on input set 1
2022-04-13 06:13:28.004862 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef read_input(inp):\n    N = int(inp.readline())\n    pwds = []\n    for i in range(N):\n        pwds.append(inp.readline().split())\n    return N, pwds\n\ndef solve(N, pwds):\n    pwds.sort(key=lambda x:x[1], reverse=True)\n    ans = 1\n    for i in range(N):\n        ans += (1 - float(pwds[i][1])) * (i + 1)\n    return ans\n\ndef main():\n    N, pwds = read_input(sys.stdin)\n    ans = solve(N, pwds)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef read_input(inp):\n    N = int(inp.readline())\n    passwords = []\n    for i in range(N):\n        passwords.append(inp.readline().split())\n    return N, passwords\n\ndef solve(N, passwords):\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    ans = 1\n    for i in range(N):\n        ans += (1 - float(passwords[i][1])) * (i + 1)\n    return ans\n\ndef main():\n    N, passwords = read_input(sys.stdin)\n    ans = solve(N, passwords)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef read_input(inp):\n    N = int(inp.readline())\n    pwds = []\n    for i in range(N):\n        pwds.append(inp.readline().split())\n    return N, pwds\n\ndef solve(N, pwds):\n    pwds.sort(key=lambda x: x[1])\n    ans = 1\n    for i in range(N):\n        ans += (1 - float(pwds[i][1])) * (i + 1)\n    return ans\n\ndef main():\n    N, pwds = read_input(sys.stdin)\n    ans = solve(N, pwds)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649830402,
  "object": "edit"
}
2022-04-13 06:13:28.005031 fix spelling mistakes 3 ["\n\nimport sys\n\ndef read_input(inp):\n    N = int(inp.readline())\n    pwds = []\n    for i in range(N):\n        pwds.append(inp.readline().split())\n    return N, pwds\n\ndef solve(N, pwds):\n    pwds.sort(key=lambda x:x[1], reverse=True)\n    ans = 1\n    for i in range(N):\n        ans += (1 - float(pwds[i][1])) * (i + 1)\n    return ans\n\ndef main():\n    N, pwds = read_input(sys.stdin)\n    ans = solve(N, pwds)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef read_input(inp):\n    N = int(inp.readline())\n    passwords = []\n    for i in range(N):\n        passwords.append(inp.readline().split())\n    return N, passwords\n\ndef solve(N, passwords):\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    ans = 1\n    for i in range(N):\n        ans += (1 - float(passwords[i][1])) * (i + 1)\n    return ans\n\ndef main():\n    N, passwords = read_input(sys.stdin)\n    ans = solve(N, passwords)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef read_input(inp):\n    N = int(inp.readline())\n    pwds = []\n    for i in range(N):\n        pwds.append(inp.readline().split())\n    return N, pwds\n\ndef solve(N, pwds):\n    pwds.sort(key=lambda x: x[1])\n    ans = 1\n    for i in range(N):\n        ans += (1 - float(pwds[i][1])) * (i + 1)\n    return ans\n\ndef main():\n    N, pwds = read_input(sys.stdin)\n    ans = solve(N, pwds)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 06:13:28.005063 size on output set 3
2022-04-13 06:13:28.005070 size on input set 3
2022-04-13 06:13:34.943715 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef read_input(inp):\n    N = int(inp.readline())\n    passwords = []\n    for i in range(N):\n        passwords.append(inp.readline().rstrip().split())\n    return N, passwords\n\ndef solve(N, passwords):\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    ans = 1\n    for i in range(N):\n        ans += (1 - float(passwords[i][1])) * (i + 1)\n    return ans\n\ndef main():\n    N, passwords = read_input(sys.stdin)\n    ans = solve(N, passwords)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef read_input(inp):\n    N = int(inp.readline())\n    # passwords = []\n    # for i in range(N):\n    #     passwords.append(inp.readline().split())\n    # return N, passwords\n    return N\n\n# def solve(N, passwords):\n#     passwords.sort(key=lambda x: x[1], reverse=True)\n#     ans = 1\n#     for i in range(N):\n#         ans += (1 - float(passwords[i][1])) * (i + 1)\n#     return ans\n\ndef main():\n    N = read_input(sys.stdin)\n    #ans = solve(N, passwords)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef read_input(inp):\n    N = int(inp.readline())\n    passwords = []\n    for i in range(N):\n        passwords.append(inp.readline().split())\n    return N, passwords\n\ndef solve(N, passwords):\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    ans = 1\n    for i in range(N):\n        ans += (1 - float(passwords[i][1])) * (i + 1)\n    return ans\n\ndef main():\n    N, passwords = read_input(sys.stdin)\n    print(solve(N, passwords))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649830408,
  "object": "edit"
}
2022-04-13 06:13:34.943927 fix syntax errors 3 ["\n\nimport sys\n\ndef read_input(inp):\n    N = int(inp.readline())\n    passwords = []\n    for i in range(N):\n        passwords.append(inp.readline().rstrip().split())\n    return N, passwords\n\ndef solve(N, passwords):\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    ans = 1\n    for i in range(N):\n        ans += (1 - float(passwords[i][1])) * (i + 1)\n    return ans\n\ndef main():\n    N, passwords = read_input(sys.stdin)\n    ans = solve(N, passwords)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef read_input(inp):\n    N = int(inp.readline())\n    # passwords = []\n    # for i in range(N):\n    #     passwords.append(inp.readline().split())\n    # return N, passwords\n    return N\n\n# def solve(N, passwords):\n#     passwords.sort(key=lambda x: x[1], reverse=True)\n#     ans = 1\n#     for i in range(N):\n#         ans += (1 - float(passwords[i][1])) * (i + 1)\n#     return ans\n\ndef main():\n    N = read_input(sys.stdin)\n    #ans = solve(N, passwords)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef read_input(inp):\n    N = int(inp.readline())\n    passwords = []\n    for i in range(N):\n        passwords.append(inp.readline().split())\n    return N, passwords\n\ndef solve(N, passwords):\n    passwords.sort(key=lambda x: x[1], reverse=True)\n    ans = 1\n    for i in range(N):\n        ans += (1 - float(passwords[i][1])) * (i + 1)\n    return ans\n\ndef main():\n    N, passwords = read_input(sys.stdin)\n    print(solve(N, passwords))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 06:13:50.757420 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport os\n\nimport argparse\nimport logging\n\n# Set logger\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\nhandler = logging.StreamHandler()\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nhandler.setFormatter(formatter)\nlogger.addHandler(handler)\n\ndef parse_arguments():\n    parser = argparse.ArgumentParser(description='file')\n    parser.add_argument('-v', '--verbose', action='store_true', help='verbose mode')\n    parser.add_argument('-i', '--input', type=str, default='file.in', help='input file')\n    parser.add_argument('-o', '--output', type=str, default='file.out', help='output file')\n    parser.add_argument('-s', '--solution', type=str, default=None, help='solution to compare')\n    return parser.parse_args()\nimport sys\n\ndef read_input(inp):\n    N = int(inp.readline())\n    pwds = []\n    for i in range(N):\n        pwds.append(inp.readline().split())\n    return N, pwds\n\ndef solve(N, pwds):\n    pwds.sort(key=lambda x: x[1])\n    ans = 1\n    for i in range(N):\n        ans += (1 - float(pwds[i][1])) * (i + 1)\n    return ans\n\ndef main():\n    args = parse_arguments()\n    if args.verbose:\n        logger.setLevel(logging.DEBUG)\n    logger.debug('args: %s' % args)\n    inp = open(args.input, 'r')\n    N, pwds = read_input(inp)\n    inp.close()\n    ans = solve(N, pwds)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\n\ndef read_input(inp):\n    N = int(inp.readline())\n    pwds = []\n    for i in range(N):\n        pwds.append(inp.readline().split())\n    return N, pwds\n\ndef solve(N, pwds):\n    pwds.sort(key=lambda x: x[1])\n    ans = 1\n    for i in range(N):\n        ans += (1 - float(pwds[i][1])) * (i + 1)\n    return ans\n\ndef main():\n    N, pwds = read_input(sys.stdin)\n    ans = solve(N, pwds)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef read_input(inp):\n    N = int(inp.readline())\n    pwds = []\n    for i in range(N):\n        pwds.append(inp.readline().split()[1])\n    return N, pwds\n\ndef solve(N, pwds):\n    pwds.sort(key=lambda x: x)\n    ans = 1\n    for i in range(N):\n        ans += (1 - float(pwds[i])) * (i + 1)\n    return ans\n\ndef main():\n    N, pwds = read_input(sys.stdin)\n    ans = solve(N, pwds)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649830414,
  "object": "edit"
}
2022-04-13 06:13:50.757672 fix syntax errors 3 ["#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport os\n\nimport argparse\nimport logging\n\n# Set logger\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\nhandler = logging.StreamHandler()\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nhandler.setFormatter(formatter)\nlogger.addHandler(handler)\n\ndef parse_arguments():\n    parser = argparse.ArgumentParser(description='file')\n    parser.add_argument('-v', '--verbose', action='store_true', help='verbose mode')\n    parser.add_argument('-i', '--input', type=str, default='file.in', help='input file')\n    parser.add_argument('-o', '--output', type=str, default='file.out', help='output file')\n    parser.add_argument('-s', '--solution', type=str, default=None, help='solution to compare')\n    return parser.parse_args()\nimport sys\n\ndef read_input(inp):\n    N = int(inp.readline())\n    pwds = []\n    for i in range(N):\n        pwds.append(inp.readline().split())\n    return N, pwds\n\ndef solve(N, pwds):\n    pwds.sort(key=lambda x: x[1])\n    ans = 1\n    for i in range(N):\n        ans += (1 - float(pwds[i][1])) * (i + 1)\n    return ans\n\ndef main():\n    args = parse_arguments()\n    if args.verbose:\n        logger.setLevel(logging.DEBUG)\n    logger.debug('args: %s' % args)\n    inp = open(args.input, 'r')\n    N, pwds = read_input(inp)\n    inp.close()\n    ans = solve(N, pwds)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\n\ndef read_input(inp):\n    N = int(inp.readline())\n    pwds = []\n    for i in range(N):\n        pwds.append(inp.readline().split())\n    return N, pwds\n\ndef solve(N, pwds):\n    pwds.sort(key=lambda x: x[1])\n    ans = 1\n    for i in range(N):\n        ans += (1 - float(pwds[i][1])) * (i + 1)\n    return ans\n\ndef main():\n    N, pwds = read_input(sys.stdin)\n    ans = solve(N, pwds)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef read_input(inp):\n    N = int(inp.readline())\n    pwds = []\n    for i in range(N):\n        pwds.append(inp.readline().split()[1])\n    return N, pwds\n\ndef solve(N, pwds):\n    pwds.sort(key=lambda x: x)\n    ans = 1\n    for i in range(N):\n        ans += (1 - float(pwds[i])) * (i + 1)\n    return ans\n\ndef main():\n    N, pwds = read_input(sys.stdin)\n    ans = solve(N, pwds)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 06:13:54.880503 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef read_input(inp):\n    N = int(inp.readline())\n    pwds = [None] * N\n    for i in range(N):\n        pwds[i] = inp.readline().split()\n    return N, pwds\n\ndef solve(N, pwds):\n    pwds.sort(key=lambda x:x[1], reverse=True)\n    ans = 1\n    for i in range(1, N):\n        ans += (1 - float(pwds[i][1])) * i\n    return ans\n\ndef main():\n    N, pwds = read_input(sys.stdin)\n    ans = solve(N, pwds)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef read_input(inp):\n    N = int(inp.readline())\n    pwds = []\n    for i in range(N):\n        pwds.append(inp.readline().split())\n    return N, pwds\n\ndef solve(N, pwds):\n    pwds.sort(key=lambda x:x[1], reverse=True)\n    ans = 1\n    for i in range(N):\n        ans += (1 - float(pwds[i][1])) * (i + 1)\n    return ans\n\ndef main():\n    N, pwds = read_input(sys.stdin)\n    ans = solve(N, pwds)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef read_input(inp):\n    N = int(inp.readline())\n    pwds = []\n    for i in range(N):\n        pwds.append(inp.readline().split())\n    return N, pwds\n\ndef solve(N, pwds):\n    pwds.sort(key=lambda x:x[1], reverse=False)\n    ans = 1\n    for i in range(N):\n        ans += (1 - float(pwds[i][1])) * (i + 1)\n    return ans\n\ndef main():\n    N, pwds = read_input(sys.stdin)\n    ans = solve(N, pwds)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649830430,
  "object": "edit"
}
2022-04-13 06:13:54.880672 fix syntax errors 3 ["\n\nimport sys\n\ndef read_input(inp):\n    N = int(inp.readline())\n    pwds = [None] * N\n    for i in range(N):\n        pwds[i] = inp.readline().split()\n    return N, pwds\n\ndef solve(N, pwds):\n    pwds.sort(key=lambda x:x[1], reverse=True)\n    ans = 1\n    for i in range(1, N):\n        ans += (1 - float(pwds[i][1])) * i\n    return ans\n\ndef main():\n    N, pwds = read_input(sys.stdin)\n    ans = solve(N, pwds)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef read_input(inp):\n    N = int(inp.readline())\n    pwds = []\n    for i in range(N):\n        pwds.append(inp.readline().split())\n    return N, pwds\n\ndef solve(N, pwds):\n    pwds.sort(key=lambda x:x[1], reverse=True)\n    ans = 1\n    for i in range(N):\n        ans += (1 - float(pwds[i][1])) * (i + 1)\n    return ans\n\ndef main():\n    N, pwds = read_input(sys.stdin)\n    ans = solve(N, pwds)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef read_input(inp):\n    N = int(inp.readline())\n    pwds = []\n    for i in range(N):\n        pwds.append(inp.readline().split())\n    return N, pwds\n\ndef solve(N, pwds):\n    pwds.sort(key=lambda x:x[1], reverse=False)\n    ans = 1\n    for i in range(N):\n        ans += (1 - float(pwds[i][1])) * (i + 1)\n    return ans\n\ndef main():\n    N, pwds = read_input(sys.stdin)\n    ans = solve(N, pwds)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-13 06:13:54.880706 size on output set 9
2022-04-13 06:13:54.880727 num operations 2
2022-04-13 06:13:54.880732 size on input set 1
2022-04-13 06:13:58.867867 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\nn = int(sys.stdin.readline())\n\nprobs = []\n\nfor _ in range(n):\n    prob = sys.stdin.readline().split()\n    probs.append(float(prob[1]))\n\nprobs.sort()\nprobs.reverse()\n\ntotal = 0\nfor i in range(n):\n    total += (i + 1) * probs[i]\n\nprint(\"{:.4f}\".format(total))\n"
    },
    {
      "index": 1,
      "text": "#! /usr/bin/env python3\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nprobabilities = []\n\nfor _ in range(n):\n    prob = sys.stdin.readline().split()\n    probabilities.append(float(prob[1]))\n\nprobabilities.sort()\nprobabilities.reverse()\n\ntotal = 0\nfor i in range(n):\n    total += (i + 1) * probabilities[i]\n\nprint(\"{:.4f}\".format(total))\n"
    },
    {
      "index": 2,
      "text": "\n\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nprobs = []\n\nfor _ in range(n):\n    prob = sys.stdin.readline().split()\n    probs.append(float(prob[1]))\n\nprobs.sort()\nprobs.reverse()\n\ntotal = 0\nfor i in range(n):\n    total += (i + 1) * probs[i]\n\nprint(\"{:.4f}\".format(total))\n"
    }
  ],
  "created": 1649830434,
  "object": "edit"
}
2022-04-13 06:13:58.868040 fix spelling mistakes 3 ['\nimport sys\n\nn = int(sys.stdin.readline())\n\nprobs = []\n\nfor _ in range(n):\n    prob = sys.stdin.readline().split()\n    probs.append(float(prob[1]))\n\nprobs.sort()\nprobs.reverse()\n\ntotal = 0\nfor i in range(n):\n    total += (i + 1) * probs[i]\n\nprint("{:.4f}".format(total))\n', '#! /usr/bin/env python3\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nprobabilities = []\n\nfor _ in range(n):\n    prob = sys.stdin.readline().split()\n    probabilities.append(float(prob[1]))\n\nprobabilities.sort()\nprobabilities.reverse()\n\ntotal = 0\nfor i in range(n):\n    total += (i + 1) * probabilities[i]\n\nprint("{:.4f}".format(total))\n', '\n\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nprobs = []\n\nfor _ in range(n):\n    prob = sys.stdin.readline().split()\n    probs.append(float(prob[1]))\n\nprobs.sort()\nprobs.reverse()\n\ntotal = 0\nfor i in range(n):\n    total += (i + 1) * probs[i]\n\nprint("{:.4f}".format(total))\n']
2022-04-13 06:13:58.868068 size on output set 3
2022-04-13 06:13:58.868075 size on input set 3
2022-04-13 06:14:02.300761 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\nn = int(sys.stdin.readline())\n\nprobs = []\n\nfor _ in range(n):\n    prob = sys.stdin.readline().split(' ')\n    probs.append(float(prob[1]))\n\nprobs.sort()\nprobs.reverse()\n\ntotal = 0\nfor i in range(n):\n    total += (i + 1) * probs[i]\n\nprint(\"{:.4f}\".format(total))\n"
    },
    {
      "index": 1,
      "text": "import sys\n\nn = int(sys.stdin.readline())\n\nprobs = []\n\nfor _ in range(n):\n\tprob = sys.stdin.readline().split()\n\tprobs.append(float(prob[1]))\n\nprobs.sort()\nprobs.reverse()\n\ntotal = 0\nfor i in range(n):\n\ttotal += (i + 1) * probs[i]\n\nprint(\"{:.4f}\".format(total))\n"
    },
    {
      "index": 2,
      "text": "import sys\n\nn = int(sys.stdin.readline())\n\nprobs = []\n\nfor _ in range(n):\n    prob = sys.stdin.readline().rstrip().split()\n    probs.append(float(prob[1]))\n\nprobs.sort()\nprobs.reverse()\n\ntotal = 0\nfor i in range(n):\n    total += (i + 1) * probs[i]\n\nprint(format(total, \".4f\"))\n"
    }
  ],
  "created": 1649830438,
  "object": "edit"
}
2022-04-13 06:14:02.301022 fix syntax errors 3 ['import sys\n\nn = int(sys.stdin.readline())\n\nprobs = []\n\nfor _ in range(n):\n    prob = sys.stdin.readline().split(\' \')\n    probs.append(float(prob[1]))\n\nprobs.sort()\nprobs.reverse()\n\ntotal = 0\nfor i in range(n):\n    total += (i + 1) * probs[i]\n\nprint("{:.4f}".format(total))\n', 'import sys\n\nn = int(sys.stdin.readline())\n\nprobs = []\n\nfor _ in range(n):\n\tprob = sys.stdin.readline().split()\n\tprobs.append(float(prob[1]))\n\nprobs.sort()\nprobs.reverse()\n\ntotal = 0\nfor i in range(n):\n\ttotal += (i + 1) * probs[i]\n\nprint("{:.4f}".format(total))\n', 'import sys\n\nn = int(sys.stdin.readline())\n\nprobs = []\n\nfor _ in range(n):\n    prob = sys.stdin.readline().rstrip().split()\n    probs.append(float(prob[1]))\n\nprobs.sort()\nprobs.reverse()\n\ntotal = 0\nfor i in range(n):\n    total += (i + 1) * probs[i]\n\nprint(format(total, ".4f"))\n']
2022-04-13 06:14:03.738164 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\nn = int(sys.stdin.readline())\n\nprobs = []\n\nfor _ in range(n):\n    prob = sys.stdin.readline().split()\n    probs.append(float(prob[1]))\n\nprobs.sort()\nprobs.reverse()\n\ntotal = 0\nfor i in range(n):\n    total += (i + 1) * probs[i]\n\nprint(\"{:.4f}\".format(total))\n"
    },
    {
      "index": 1,
      "text": "#\n\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nprobs = []\n\nfor _ in range(n):\n    prob = sys.stdin.readline().split()\n    probs.append(float(prob[1]))\n\nprobs.sort()\nprobs.reverse()\n\ntotal = 0\nfor i in range(n):\n    total += (i + 1) * probs[i]\n\nprint(\"{:.4f}\".format(total))\n"
    },
    {
      "index": 2,
      "text": "import sys\n\nn = int(sys.stdin.readline())\n\nprobs = []\n\nfor _ in range(n):\n    prob = sys.stdin.readline().split()\n    probs.append(float(prob[1]))\n\nprobs.sort()\nprobs.reverse()\n\ntotal = 0\nfor i in range(n):\n    total += (i + 1) * probs[i]\n\nprint(\"{:.4f}\".format(total))\n"
    }
  ],
  "created": 1649830442,
  "object": "edit"
}
2022-04-13 06:14:03.738337 fix syntax errors 3 ['import sys\n\nn = int(sys.stdin.readline())\n\nprobs = []\n\nfor _ in range(n):\n    prob = sys.stdin.readline().split()\n    probs.append(float(prob[1]))\n\nprobs.sort()\nprobs.reverse()\n\ntotal = 0\nfor i in range(n):\n    total += (i + 1) * probs[i]\n\nprint("{:.4f}".format(total))\n', '#\n\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nprobs = []\n\nfor _ in range(n):\n    prob = sys.stdin.readline().split()\n    probs.append(float(prob[1]))\n\nprobs.sort()\nprobs.reverse()\n\ntotal = 0\nfor i in range(n):\n    total += (i + 1) * probs[i]\n\nprint("{:.4f}".format(total))\n', 'import sys\n\nn = int(sys.stdin.readline())\n\nprobs = []\n\nfor _ in range(n):\n    prob = sys.stdin.readline().split()\n    probs.append(float(prob[1]))\n\nprobs.sort()\nprobs.reverse()\n\ntotal = 0\nfor i in range(n):\n    total += (i + 1) * probs[i]\n\nprint("{:.4f}".format(total))\n']
2022-04-13 06:14:11.581108 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#! /usr/bin/env python3\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nprobabilities = []\n\nfor _ in range(n):\n    prob = sys.stdin.readline().split()\n    probabilities.append(float(prob[0]))\n\nprobabilities.sort()\nprobabilities.reverse()\n\ntotal = 0\nfor i in range(n):\n    total += (i + 1) * probabilities[i]\n\nprint(\"{:.4f}\".format(total))\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n\n    probabilities = []\n\n    for _ in range(n):\n        prob = sys.stdin.readline().split()\n        probabilities.append(float(prob[1]))\n\n    probabilities.sort()\n    probabilities.reverse()\n\n    total = 0\n    for i in range(n):\n        total += (i + 1) * probabilities[i]\n\n    print(\"{:.4f}\".format(total))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "#! /usr/bin/env python3\n\nimport sys\nfrom fractions import Fraction\n\ndef main():\n    n = int(sys.stdin.readline())\n\n    probabilities = []\n\n    for _ in range(n):\n        prob = sys.stdin.readline().split()\n        probabilities.append(Fraction(prob[1]))\n\n    probabilities.sort()\n    probabilities.reverse()\n\n    total = 0\n    for i in range(n):\n        total += (i + 1) * probabilities[i]\n\n    print(total)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649830443,
  "object": "edit"
}
2022-04-13 06:14:11.581286 fix syntax errors 3 ['#! /usr/bin/env python3\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nprobabilities = []\n\nfor _ in range(n):\n    prob = sys.stdin.readline().split()\n    probabilities.append(float(prob[0]))\n\nprobabilities.sort()\nprobabilities.reverse()\n\ntotal = 0\nfor i in range(n):\n    total += (i + 1) * probabilities[i]\n\nprint("{:.4f}".format(total))\n', 'import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n\n    probabilities = []\n\n    for _ in range(n):\n        prob = sys.stdin.readline().split()\n        probabilities.append(float(prob[1]))\n\n    probabilities.sort()\n    probabilities.reverse()\n\n    total = 0\n    for i in range(n):\n        total += (i + 1) * probabilities[i]\n\n    print("{:.4f}".format(total))\n\nif __name__ == \'__main__\':\n    main()\n', '#! /usr/bin/env python3\n\nimport sys\nfrom fractions import Fraction\n\ndef main():\n    n = int(sys.stdin.readline())\n\n    probabilities = []\n\n    for _ in range(n):\n        prob = sys.stdin.readline().split()\n        probabilities.append(Fraction(prob[1]))\n\n    probabilities.sort()\n    probabilities.reverse()\n\n    total = 0\n    for i in range(n):\n        total += (i + 1) * probabilities[i]\n\n    print(total)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-13 06:14:11.581319 size on output set 8
