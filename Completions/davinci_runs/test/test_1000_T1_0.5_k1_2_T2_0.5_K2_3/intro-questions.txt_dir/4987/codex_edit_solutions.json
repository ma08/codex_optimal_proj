["\nimport sys\n\ndef main():\n    S, C, K = [int(i) for i in sys.stdin.readline().split()]\n    D = [int(i) for i in sys.stdin.readline().split()]\n    D.sort()\n    i = 0\n    count = 0\n    while i < S:\n        count += 1\n        j = i + 1\n        while j < S and D[j] - D[i] <= K:\n            j += 1\n        i = j\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n# SOLUTION \n\nsocks, capacity, colorDiff = [int(x) for x in input().split()]\ncolors = [int(x) for x in input().split()]\n\ncolors.sort()\n\ncount = 0\n\nfor i in range(socks):\n    if i == 0 or colors[i] - colors[i - 1] > colorDiff:\n        count += 1\n\nif count % capacity == 0:\n    print(count // capacity)\nelse:\n    print(count // capacity + 1)\n", "import sys\n\ndef main():\n    S, K = [int(i) for i in sys.stdin.readline().split()]\n    D = [int(i) for i in sys.stdin.readline().split()]\n    D.sort()\n    i = 0\n    count = 0\n    while i < S:\n        count += 1\n        j = i + 1\n        while j < S and D[j] - D[i] <= K:\n            j += 1\n        i = j\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    socks, capacity, color_diff = map(int, input().split())\n    machines = 0\n    colors = [int(x) for x in input().split()]  # list comprehension\n    colors.sort()\n    i = 0\n    while i < socks:  # O(n)\n        machines += 1\n        j = i + 1\n        while j < socks and colors[j] - colors[i] <= color_diff:\n            j += 1\n        i = j\n    print(machines)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nN, K = map(int, input().split())\ntoys = list(map(int, input().split()))\ntoys.sort()\n\nboxes = 0\n\nwhile len(toys) > 0:\n    current_box = []\n    current_box.append(toys.pop(0))  # pop the first element\n    while len(current_box) < K and len(toys) > 0:\n        if abs(current_box[-1] - toys[0]) <= 1:  # if the difference <= 1\n            current_box.append(toys.pop(0))  # pop the first element\n        else:\n            break\n    boxes += 1\n\nprint(boxes)\n", "\nimport sys\n\n\ndef main():\n    S, C, K = [int(i) for i in sys.stdin.readline().split()]\n    D = [int(i) for i in sys.stdin.readline().split()]\n    D.sort()\n    i = 0\n    count = 0\n    while i < S:\n        count += 1\n        j = i + 1\n        while j < S and D[j] - D[i] <= K:\n            j += 1\n        i = j\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    socks, capacity, color_diff = [int(x) for x in input().split()]\n    colors = [int(x) for x in input().split()]\n    colors.sort()  # sort socks by their colors\n    num_machines = 0\n    current_machine = []\n    for color in colors:\n        if not current_machine:\n            current_machine.append(color)\n            num_machines += 1\n        elif abs(current_machine[-1] - color) <= color_diff and len(current_machine) < capacity:\n            current_machine.append(color)\n        else:\n            current_machine = [color]\n            num_machines += 1\n    print(num_machines)\n\nif __name__ == \"__main__\":\n    main()\n", "# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    n = int(input())\n    nums = [int(x) for x in input().split()]\n    nums.sort()\n    prev = nums[0]\n    for i in range(1, n):\n        if nums[i] - prev == 0:\n            print(\"NO\")\n            return\n        prev = nums[i]\n    print(\"YES\")\n\n\nif __name__ == \"__main__\":\n    main()\n\n\ndef main():\n    n = int(input())\n    nums = [int(x) for x in input().split()]\n    nums.sort()\n    prev = nums[0]\n    for i in range(1, n):\n        if nums[i] - prev == 0:\n            print(\"NO\")\n            return\n        prev = nums[i]\n    print(\"YES\")\n\n\nif __name__ == \"__main__\":\n    main()\n", "# https://codeforces.com/problemset/problem/1186/A\n\n\ndef main():\n    socks, capacity, color_diff = [int(x) for x in input().split()]\n    colors = sorted([int(x) for x in input().split()])\n    j = 1\n    machines = 0\n    i = 0\n    while i < socks:\n        machines += 1\n        while j < socks and colors[j] - colors[i] <= color_diff:\n        j = i + 1\n            j += 1\n        i = j\n    print(machines)\n\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\nimport math\n\ns, c, k = [int(x) for x in input().split()]\nd = [int(x) for x in input().split()]\nd.sort()\nnumMachines = 0\nwhile len(d) > 0:\n    numMachines += 1\n    currentMachine = [d.pop(0)]\n    for i in range(len(d)):\n        if abs(d[i] - currentMachine[-1]) <= k:\n            currentMachine.append(d.pop(i))\n            i -= 1\n    if len(currentMachine) > c:\n        print(\"Too many socks for machine.\")\n        sys.exit(0)\nprint(\"Number of machines: \" + str(numMachines))\n", "\ns, c, k = map(int, input().split())  # s - number of servers, c - capacity, k - max distance\nd = list(map(int, input().split()))\n\nd.sort()\n\nmachines = 0\nmachine_load = 0\n\nfor i in range(s):  # for each server\n    if machine_load >= c or (machine_load > 0 and d[i] - d[i-1] > k):  # if capacity is full or distance is greater than k\n        machine_load = 0\n        machines += 1\n    machine_load += 1\n\nif machine_load > 0:\n    machines += 1\n\nprint(machines)\n", "\ndef main():\n    num_of_socks, capacity, color_diff = [int(x) for x in input().split()]\n    sock_colors = [int(x) for x in input().split()]\n    sock_colors.sort()\n    num_of_machines = 0\n    current_machine_capacity = []\n    for sock_color in sock_colors:\n        if not current_machine_capacity:\n            current_machine_capacity.append(sock_color)\n            num_of_machines += 1\n        elif abs(current_machine_capacity[-1] - sock_color) <= color_diff and len(current_machine_capacity) < capacity:\n            current_machine_capacity.append(sock_color)\n        elif abs(current_machine_capacity[-1] - sock_color) > color_diff:\n            current_machine_capacity = [sock_color]\n            num_of_machines += 1\n    print(num_of_machines)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# SOLUTION:\n\nsocks, capacity, color_diff = [int(x) for x in input().split()]\ncolors = [int(x) for x in input().split()]\n\ncolors.sort()\n\ncount = 0\n\nfor i in range(socks):\n    if i == 0 or colors[i] - colors[i - 1] > color_diff:\n        count += 1\n\nif count % capacity == 0:\n    print(count // capacity)\nelse:\n    print(count // capacity + 1)\n", "from sys import stdin\n\ndef main():\n    S, C, K = map(int, stdin.readline().split())\n    D = list(map(int, stdin.readline().split()))\n    D.sort()\n    machine_count = 0\n    for i in range(0, S, C):\n        machine_count += 1\n        if K == 0:\n            continue\n\n        for j in range(i, i + C - 1):\n            if abs(D[j] - D[j + 1]) > K:\n                machine_count += 1\n                break\n\n    print(machine_count)\n\nmain()\n", "\ndef main():\n    num_of_socks, capacity, color_diff = [int(x) for x in input().split()]\n    sock_colors = [int(x) for x in input().split()]\n    sock_colors.sort()\n    num_of_machines = 0\n    current_machine_capacity = []\n    for sock_color in sock_colors:\n        if not current_machine_capacity:\n            current_machine_capacity.append(sock_color)\n            num_of_machines += 1\n        elif abs(current_machine_capacity[-1] - sock_color) <= color_diff and len(current_machine_capacity) < capacity:\n            current_machine_capacity.append(sock_color)\n        elif abs(current_machine_capacity[-1] - sock_color) > color_diff:\n            current_machine_capacity = [sock_color]\n            num_of_machines += 1\n    print(num_of_machines)\n\nif __name__ == \"__main__\":\n    main()\n", "s, c, k = map(int, input().split())\nd = list(map(int, input().split()))\n\nd.sort()\n\nmachines = 0\nmachine_load = 0\n\nfor i in range(s):\n    if machine_load >= c or (machine_load > 0 and d[i] - d[i-1] > k):\n        machine_load = 0\n        machines += 1\n    machine_load += 1\n\nif machine_load > 0:\n    machines += 1\n\n#\nprint(machines)\n", "\n#\nfrom sys import stdin\n\nS, C, K = map(int, stdin.readline().split())\nD = list(map(int, stdin.readline().split()))\nD.sort()\nmachine_count = 0\nfor i in range(0, S, C):\n    machine_count += 1\n\n    if K == 0:\n        continue\n\n    for j in range(i, i + C - 1):\n        if abs(D[j] - D[j + 1]) > K:\n            machine_count += 1\n            break\n\nprint(machine_count)\n", "\nfrom sys import stdin\n\n# S, C, K = map(int, stdin.readline().split())\n# D = list(map(int, stdin.readline().split()))\n# D.sort()\n# machine_count = 0\n# for i in range(0, S, C):\n#     machine_count += 1\n#     if K == 0:\n#         continue\n#\n#     for j in range(i, i + C - 1):\n#         if abs(D[j] - D[j + 1]) > K:\n#             machine_count += 1\n#             break\n#\n# print(machine_count)\n", "\nimport sys\nimport math\n\ns, c, k = [int(x) for x in input().split()]\nd = [int(x) for x in input().split()]\nd.sort()\nnumMachines = 0\nwhile len(d) > 0:\n    numMachines += 1\n    currentMachine = [d.pop(0)]\n    for i in range(len(d)):\n        if abs(d[i] - currentMachine[-1]) <= k:\n            currentMachine.append(d.pop(i))\n            i -= 1\n    if len(currentMachine) > c:\n        print(\"Too many socks for machine.\")\n        sys.exit(0)\nprint(\"Number of machines: \" + str(numMachines))\n", "\n\ndef main():\n    socks, capacity, color_difference = [int(x) for x in input().split()] #socks = number of socks, capacity = capacity of each machine, color_difference = color difference\n    colors = [int(x) for x in input().split()]\n    colors.sort()\n    num_machines = 0\n    current_machine = []\n    for color in colors:\n        if not current_machine:\n            current_machine.append(color)\n            num_machines += 1\n        elif abs(current_machine[-1] - color) <= color_difference and len(current_machine) < capacity: #if color difference is less than or equal to the max color difference and machine is not full\n            current_machine.append(color)\n        else:\n            current_machine = [color]\n            num_machines += 1\n    print(num_machines)\n\nif __name__ == \"__main__\":\n    main()\n", "\nfrom sys import stdin\n\nS, C, K = map(int, stdin.readline().split())\nD = list(map(int, stdin.readline().split()))[:S]\n\nD.sort()\n\nmachine_count = 1\n\nfor i in range(0, S - C + 1, C):\n\n    if K == 0:\n        continue\n\n    for j in range(i, i + C - 1):\n        if abs(D[j] - D[j + 1]) > K:\n            machine_count += 1\n            break\n\nprint(machine_count)\n", "\n\ns, c, k = map(int, input().split())\nd = list(map(int, input().split())) \n\nd.sort()\n\nmachines = 0\nmachine_load = 0\n\nfor i in range(s):\n    if machine_load >= c or (machine_load > 0 and d[i] - d[i-1] > k):\n        machine_load = 0\n        machines += 1\n    machine_load += 1\n\nif machine_load > 0:\n    machines += 1\n\nprint(machines)\n", "from sys import stdin\n\nS, C, K = map(int, stdin.readline().split())\nD = list(map(int, stdin.readline().split()))\nD.sort()\nmachine_count = 0\nfor i in range(0, S, C):\n    machine_count += 1\n    if K == 0:\n        continue\n\n    for j in range(i, i + C - 1):\n        if abs(D[j] - D[j + 1]) > K:\n            machine_count += 1\n            break\n\nprint(machine_count)\n", "\n\n\ndef binary_search(arr, x):\n    l = 0\n    r = len(arr) - 1\n\n    while l <= r:\n        m = (l + r) // 2\n        if arr[m] == x:\n            return m\n        if arr[m] < x:\n            l = m + 1\n        else:\n            r = m - 1\n\n    return -1\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    a.sort()\n\n    for i in range(m):\n        x = int(input())\n        print(binary_search(a, x))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ns, c, k = map(int, input().split())  # s - number of servers, c - capacity, k - max distance\nd = list(map(int, input().split()))\nd.sort()\nmachines = 0\nmachine_load = 0\n\nfor i in range(s):  # for each server\n    if machine_load >= c or (machine_load > 0 and d[i] - d[i-1] > k):  # if capacity is full or distance is greater than k\n        machine_load = 0\n        machines += 1\n    machine_load += 1\n\nif machine_load > 0:\n    machines += 1\n\nprint(machines)\n", "\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nimport os\nimport math\n\ns, c, k = [int(x) for x in raw_input().split()]\nd = [int(x) for x in raw_input().split()]\n\nd.sort()\n\nnumMachines = 0\n\nwhile len(d) > 0:\n    numMachines += 1\n    currentMachine = [d.pop(0)]\n    for i in range(len(d)):\n        if abs(d[i] - currentMachine[-1]) <= k:\n            currentMachine.append(d.pop(i))\n            i -= 1\n\n    if len(currentMachine) > c:\n        print(\"Too many socks for machine.\")\n        sys.exit(0)\n\nprint(\"Number of machines: \" + str(numMachines))\n", "from sys import stdin\n\nS, C, K = map(int, stdin.readline().split())\nD = list(map(int, stdin.readline().split()))\nD.sort()\nmachine_count = 0\nfor i in range(0, S, C):\n    machine_count += 1\n\n    if K == 0:\n        continue\n\n    for j in range(i, i + C - 1):\n        if abs(D[j] - D[j + 1]) > K:\n            machine_count += 1\n            break\n\nprint(machine_count)\n", "\nN = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\n\nA.sort()\nB.sort()\n\ncount = 0\nfor i in range(N):\n    if A[i] > B[i]:\n        count += 1\n\nprint(count)\n", "\n\ndef main():\n    socks, capacity, color_difference = [int(x) for x in input().split()] # read input\n    colors = [int(x) for x in input().split()]\n    colors.sort() # sort colors\n    num_machines = 0\n    current_machine = []\n    for color in colors:\n        if not current_machine:\n            current_machine.append(color)\n            num_machines += 1\n        elif abs(current_machine[-1] - color) <= color_difference and len(current_machine) < capacity: # check if color is compatible with last color in current machine\n            current_machine.append(color)\n        else: # if not compatible, create new machine\n            current_machine = [color]\n            num_machines += 1\n    print(num_machines)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    socks, color_diff = [int(x) for x in input().split()]\n    colors = [int(x) for x in input().split()]\n    colors.sort()\n    machines = 0\n    i = 0\n    while i < socks:\n        machines += 1\n        j = i + 1\n        while j < socks and colors[j] - colors[i] <= color_diff:\n            j += 1\n        i = j\n    print(machines)\n\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef main():\n    N, K = [int(i) for i in sys.stdin.readline().split()]\n    D = [int(i) for i in sys.stdin.readline().split()]\n    D.sort()\n    i = 0\n    count = 0\n    while i < N:\n        count += 1\n        j = i + 1\n        while j < N and D[j] - D[i] <= K:\n            j += 1\n        i = j\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "'''\n\nimport sys\n\ndef main():\n    S, C, K = [int(i) for i in sys.stdin.readline().split()] \n    D = [int(i) for i in sys.stdin.readline().split()]\n    D.sort()\n    i = 0\n    count = 0\n    while i < S:\n        count += 1\n        j = i + 1\n        while j < S and D[j] - D[i] <= K:\n            j += 1\n        i = j\n    print(count)\n\nif __name__ == '__main__':\n'''\n    main()\n", "\nN, K = map(int, input().split())\ntoys = list(map(int, input().split()))\ntoys.sort()\n\nboxes = 0\n\nwhile len(toys) > 0:\n    current_box = []\n    current_box.append(toys.pop(0))\n    while len(current_box) < K and len(toys) > 0:\n        if abs(current_box[-1] - toys[0]) <= 1:\n            current_box.append(toys.pop(0))\n        else:\n            break\n    boxes += 1\n\nprint(boxes)\n", "# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n    N, M = [int(i) for i in sys.stdin.readline().split()]  # N=\u30b9\u30ad\u30fc\u5834\u306e\u7dcf\u6570, M=\u30af\u30e9\u30b9\u306e\u7dcf\u6570\n    S = [int(i) for i in sys.stdin.readline().split()]  # S=\u30b9\u30ad\u30fc\u5834\u306e\u8ddd\u96e2\n    S.sort()\n    # print(N, M, S)\n    if len(S) == 1:\n        print(0)\n        return\n    if len(S) == 2:\n        print(S[1]-S[0])\n        return\n    d = []\n    for i in range(len(S)-1):\n        d.append(S[i+1]-S[i])\n    d.sort(reverse=True)\n    # print(d)\n    ans = 0\n    for i in range(M-1):\n        ans += d[i]\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\n# # SOLUTION:\n#\n# socks, capacity, colorDiff = [int(x) for x in input().split()]\n# colors = [int(x) for x in input().split()]\n#\n# colors.sort()\n#\n# count = 0\n#\n# for i in range(socks):\n#     if i == 0 or colors[i] - colors[i - 1] > colorDiff:\n#         count += 1\n#\n# if count % capacity == 0:\n#     print(count // capacity)\n# else:\n#     print(count // capacity + 1)\n", "\n\nimport sys\n\n# this is a comment\nimport math\n\ns, c, k = [int(x) for x in input().split()]\nd = [int(x) for x in input().split()]\n\nd.sort()\n\nnumMachines = 0\n\nwhile len(d) > 0:\n    numMachines += 1\n    currentMachine = [d.pop(0)]\n    for i in range(len(d)):\n        if abs(d[i] - currentMachine[-1]) <= k:\n            currentMachine.append(d.pop(i))\n            i -= 1\n\n    if len(currentMachine) > c:\n        print(\"Too many socks for machine.\")\n        sys.exit(0)\n\nprint(\"Number of machines: \" + str(numMachines))\n", "\nN = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\n\nA.sort()\nB.sort()\n\n# print(A)\n# print(B)\n\ncount = 0\nfor i in range(N):\n    if A[i] > B[i]:\n        count += 1\n\nprint(count)\n", "import sys\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n", "# s, c, k = map(int, input().split())  # s - number of servers, c - capacity, k - max distance\n# d = list(map(int, input().split()))\n\n\n# d.sort()\n\n# machines = 0\n# machine_load = 0\n\n# for i in range(s):  # for each server\n#     if machine_load >= c or (machine_load > 0 and d[i] - d[i-1] > k):  # if capacity is full or distance is greater than k\n#         machine_load = 0\n#         machines += 1\n#     machine_load += 1\n\n# if machine_load > 0:\n#     machines += 1\n\n# print(machines)\n\n\n# s, c, k = map(int, input().split())  # s - number of servers, c - capacity, k - max distance\n# d = list(map(int, input().split()))\n\n# d.sort()\n\n# machines = 0\n# machine_load = 0\n\n# for i in range(s):  # for each server\n#     if machine_load >= c or (machine_load > 0 and d[i] - d[i-1] > k):  # if capacity is full or distance is greater than k\n#         machine_load = 0\n#         machines += 1\n#     machine_load += 1\n\n# if machine_load > 0:\n#     machines += 1\n\n# print(machines)\n\n# s, c, k = map(int, input().split())  # s - number of servers, c - capacity, k - max distance\n# d = list(map(int, input().split()))\n\n# d.sort()\n\n# machines = 0\n# machine_load = 0\n\n# for i in range(s):  # for each server\n#     if machine_load >= c or (machine_load > 0 and d[i] - d[i-1] > k):  # if capacity is full or distance is greater than k\n#         machine_load = 0\n#         machines += 1\n#     machine_load += 1\n\n# if machine_load > 0:\n#     machines += 1\n\n# print(machines)\n\n# s, c, k = map(int, input().split())  # s - number of servers, c - capacity, k - max distance\n# d = list(map(int, input().split()))\n\n# d.sort()\n\n# machines = 0\n# machine_load = 0\n\n# for i in range(s):  # for each server\n#     if machine_load >= c or (machine_load > 0 and d[i] - d[i-1] > k):  # if capacity is full or distance is greater than k\n#         machine_load = 0\n#         machines += 1\n#     machine_load += 1\n\n# if machine_load > 0:\n#     machines += 1\n\n# print(machines)\n\n# s, c, k = map(int, input().split())  # s - number of servers, c - capacity, k - max distance\n# d = list(map(int, input().split()))\n\n# d.sort()\n\n# machines = 0\n# machine_load = 0\n\n# for i in range(s):  # for each server\n#     if machine_load >= c or (machine_load > 0 and d[i] - d[i-1] > k):  # if capacity is full or distance is greater than k\n#         machine_load = 0\n#         machines += 1\n#     machine_load += 1\n\n# if machine_load > 0:\n#     machines += 1\n\n# print(machines)\n\n# s, c, k = map(int, input().split())  # s - number of servers, c - capacity, k - max distance\n# d = list(map(int, input().split()))\n\n# d.sort()\n\n# machines = 0\n# machine_load = 0\n\n# for i in range(s):  # for each server\n#     if machine_load >= c or (machine_load > 0 and d[i] - d[i-1] > k):  # if capacity is full or distance is greater than k\n#         machine_load = 0\n#         machines += 1\n#     machine_load += 1\n\n# if machine_load > 0:\n#     machines += 1\n\n# print(machines)\n", "\n\n# SOLUTION: \n\nsocks, capacity, colorDiff = [int(x) for x in input().split()]\ncolors = [int(x) for x in input().split()]\n\ncolors.sort()\n\ncount = 0\n\nfor i in range(socks):\n    if i == 0 or colors[i] - colors[i - 1] > colorDiff:\n        count += 1\n\nif count % capacity == 0:\n    print(count // capacity)\nelse:\n    print(count // capacity + 1)\n", "\n\ndef main():\n    capacity, color_diff = [int(x) for x in input().split()]\n    sock_colors = [int(x) for x in input().split()]\n    sock_colors.sort()\n    num_of_machines = 0\n    current_machine_capacity = []\n    for sock_color in sock_colors:\n        if not current_machine_capacity:\n            current_machine_capacity.append(sock_color)\n            num_of_machines += 1\n        elif abs(current_machine_capacity[-1] - sock_color) <= color_diff and len(current_machine_capacity) < capacity:\n            current_machine_capacity.append(sock_color)\n        elif abs(current_machine_capacity[-1] - sock_color) > color_diff:\n            current_machine_capacity = [sock_color]\n            num_of_machines += 1\n    print(num_of_machines)\n\nif __name__ == \"__main__\":\n    main()\n", "# https://codeforces.com/problemset/problem/1185/A\n\n\ndef main():\n    a, b, c = [int(x) for x in input().split()]\n    print(a + b + c - max(a, b, c))\n\n\nif __name__ == \"__main__\":\n    main()\n", "from sys import stdin\n\nS, C, K = map(int, stdin.readline().split())\nD = list(map(int, stdin.readline().split()))\n\nD.sort()\n\nmachine_count = 0\n\nfor i in range(0, S, C):\n    machine_count += 1\n\n    if K == 0:\n        continue\n\n    for j in range(i, i + C - 1):\n        if abs(D[j] - D[j + 1]) > K:\n            machine_count += 1\n            break\n\nprint(machine_count)\n", "\n\nimport sys\n\ns, c, k = [int(x) for x in raw_input().split()]\nd = [int(x) for x in raw_input().split()]\n\nd.sort()\n\nnumMachines = 0\n\nwhile len(d) > 0:\n    numMachines += 1\n    currentMachine = [d.pop(0)]\n    for i in range(len(d)):\n        if abs(d[i] - currentMachine[-1]) <= k:\n            currentMachine.append(d.pop(i))\n            i -= 1\n\n    if len(currentMachine) > c:\n        print(\"Too many socks for machine.\")\n        sys.exit(0)\n\nprint(\"Number of machines: \" + str(numMachines))\n", "\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))[::-1]\n\n# print(A)\n\nans = 0\nfor i in range(N):\n    if M > A[i]:\n        ans += M // A[i]\n        M -= A[i] * (M // A[i])\n\nprint(ans)\n", "\ns, c, k = map(int, input().split())\nd = list(map(int, input().split()))\nd.sort()\nmachines = 0\nmachine_load = 0\nfor i in range(s):\n    if machine_load >= c or (machine_load > 0 and d[i] - d[i-1] > k):\n        machine_load = 0\n        machines += 1\n    machine_load += 1\nif machine_load > 0:\n    machines += 1\nprint(machines)\n", "\n\nimport sys\nimport math\n\ns, c, k = [int(x) for x in sys.stdin.readline().split()]\nd = [int(x) for x in sys.stdin.readline().split()]\n\nd.sort()\n\nnumMachines = 0\n\nwhile len(d) > 0:\n    numMachines += 1\n    currentMachine = [d.pop(0)]\n    for i in range(len(d)):\n        if abs(d[i] - currentMachine[-1]) <= k:\n            currentMachine.append(d.pop(i))\n            i -= 1\n\n    if len(currentMachine) > c:\n        print(\"Too many socks for machine.\")\n        sys.exit(0)\n\nprint(\"Number of machines: \" + str(numMachines))\n", "\n\ndef main():\n    socks, capacity, color_diff = [int(x) for x in input().split()]  # socks - number of socks, capacity - max number of socks in a machine, color_diff - max color difference between two socks in the same machine\n    colors = [int(x) for x in input().split()]  # colors of each sock\n    colors.sort()  # sort socks by their colors\n    num_machines = 0\n    current_machine = []  # each machine will have its own list of socks\n    for color in colors:\n        if not current_machine:  # if the current machine is empty\n            current_machine.append(color)\n            num_machines += 1\n        elif abs(current_machine[-1] - color) <= color_diff and len(current_machine) < capacity:  # if the color difference between the last sock in the current machine and the current sock is smaller than the max color difference and the machine is not full\n            current_machine.append(color)\n        else:  # if the machine is full or the color difference between the last sock in the current machine and the current sock is greater than the max color difference\n            current_machine = [color]\n            num_machines += 1\n    print(num_machines)\n\nif __name__ == \"__main__\":\n    main()\n", "\ns, c, k = map(int, input().split()) \nd = list(map(int, input().split()))\nd.sort()\n\nmachines = 0\nmachine_load = 0\n\nfor i in range(s):\n    if machine_load >= c or (machine_load > 0 and d[i] - d[i-1] > k):\n        machine_load = 0\n        machines += 1\n    machine_load += 1\n\nif machine_load > 0:\n    machines += 1\n\nprint(machines)\n", "\n\nimport sys\nimport math\n\ns, c, k = [int(x) for x in input().split()]\nd = [int(x) for x in input().split()]\n\nd.sort()\n\nnumMachines = 0\n\nwhile len(d) > 0:\n    numMachines += 1\n    currentMachine = [d.pop(0)]\n    for i in range(len(d)):\n        if abs(d[i] - currentMachine[-1]) <= k:\n            currentMachine.append(d.pop(i))\n            i -= 1\n\n    if len(currentMachine) > c:\n        print(\"Too many socks for machine.\")\n        sys.exit(0)\n\nprint(\"Number of machines: \" + str(numMachines))\n", "\n\n# SOLUTION \n\nsocks, capacity, colorDiff = [int(x) for x in input().split()]  # get input\ncolors = [int(x) for x in input().split()]  # get input\n\ncolors.sort()\n\ncount = 0\n\nfor i in range(socks):\n    if i == 0 or colors[i] - colors[i - 1] > colorDiff:\n        count += 1\n\nif count % capacity == 0:\n    print(count // capacity)\nelse:\n    print(count // capacity + 1)\n", "\nfrom sys import stdin\nfrom collections import deque\n\nN, M = map(int, stdin.readline().split())\nA = deque(map(int, stdin.readline().split()))\n\nfor i in range(M):\n    B = deque(map(int, stdin.readline().split()))\n\n    while len(B) > 0:\n        if B[0] == A[0]:\n            A.popleft()\n            B.popleft()\n        elif B[0] == A[-1]:\n            A.pop()\n            B.popleft()\n        else:\n            break\n\nif len(A) == 0:\n    print('YES')\nelse:\n    print('NO')\n", "\ndef main():\n    socks, color_diff = map(int, input().split())\n    machines = 0\n    colors = [int(x) for x in input().split()]\n    colors.sort()\n    i = 0\n    while i < socks:\n        machines += 1\n        j = i + 1\n        while j < socks and colors[j] - colors[i] <= color_diff:\n            j += 1\n        i = j\n    print(machines)\n\n\nif __name__ == \"__main__\":\n    main()\n", "# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n    N = int(input())\n    for i in range(N):\n        print(i+1)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    # socks, capacity, color_difference = [int(x) for x in input().split()]\n    # colors = [int(x) for x in input().split()]\n    # colors.sort()\n    # num_machines = 0\n    # current_machine = []\n    # for color in colors:\n    #     if not current_machine:\n    #         current_machine.append(color)\n    #         num_machines += 1\n    #     elif abs(current_machine[-1] - color) <= color_difference and len(current_machine) < capacity:\n    #         current_machine.append(color)\n    #     else:\n    #         current_machine = [color]\n    #         num_machines += 1\n    # print(num_machines)\n    print(int(input()))\n\nif __name__ == \"__main__\":\n    main()\n", "\nfrom sys import stdin\n\nS, C, K = map(int, stdin.readline().split())\nD = list(map(int, stdin.readline().split()))\nD.sort()\nmachine_count = 0\nfor i in range(0, S, C):\n    machine_count += 1\n\n    if K == 0:\n        continue\n\n    for j in range(i, i + C - 1):\n        if abs(D[j] - D[j + 1]) > K:\n            machine_count += 1\n            break\n\nprint(machine_count)\n", "\n\ndef main():\n    socks, capacity, color_diff = [int(x) for x in input().split()]  # socks - number of socks, capacity - max number of socks in a machine, color_diff - max color difference between two socks in a machine\n    colors = [int(x) for x in input().split()]  # colors of each sock\n    colors.sort()  # sort socks by their colors\n    num_machines = 0\n    current_machine = []  # each machine will have its own list of socks\n    for color in colors:\n        if not current_machine:  # if the current machine is empty\n            current_machine.append(color)\n            num_machines += 1\n        elif abs(current_machine[-1] - color) <= color_diff and len(current_machine) < capacity:\n            current_machine.append(color)\n        else:\n            current_machine = [color]\n            num_machines += 1\n    print(num_machines)\n\nif __name__ == \"__main__\":\n    main()\n"]