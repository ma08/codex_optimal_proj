2022-04-18 20:00:34.550021 """
The only difference between easy and hard versions is the length of the string.

You are given a string $s$ and a string $t$, both consisting only of lowercase Latin letters. It is guaranteed that $t$ can be obtained from $s$ by removing some (possibly, zero) number of characters (not necessary contiguous) from $s$ without changing order of remaining characters (in other words, it is guaranteed that $t$ is a subsequence of $s$).

For example, the strings "test", "tst", "tt", "et" and "" are subsequences of the string "test". But the strings "tset", "se", "contest" are not subsequences of the string "test".

You want to remove some substring (contiguous subsequence) from $s$ of maximum possible length such that after removing this substring $t$ will remain a subsequence of $s$.

If you want to remove the substring $s[l;r]$ then the string $s$ will be transformed to $s_1 s_2 \dots s_{l-1} s_{r+1} s_{r+2} \dots s_{|s|-1} s_{|s|}$ (where $|s|$ is the length of $s$).

Your task is to find the maximum possible length of the substring you can remove so that $t$ is still a subsequence of $s$.


-----Input-----

The first line of the input contains one string $s$ consisting of at least $1$ and at most $2 \cdot 10^5$ lowercase Latin letters.

The second line of the input contains one string $t$ consisting of at least $1$ and at most $2 \cdot 10^5$ lowercase Latin letters.

It is guaranteed that $t$ is a subsequence of $s$.


-----Output-----

Print one integer â€” the maximum possible length of the substring you can remove so that $t$ is still a subsequence of $s$.


-----Examples-----
Input
bbaba
bb

Output
3

Input
baaba
ab

Output
2

Input
abcde
abcde

Output
0

Input
asdfasdf
fasd

Output
3
"""
2022-04-18 20:00:34.550083 --------------------------
2022-04-18 20:01:08.565724 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    # s = \"bbaba\"\n    # t = \"bb\"\n    # s = \"baaba\"\n    # t = \"ab\"\n    # s = \"abcde\"\n    # t = \"abcde\"\n    # s = \"asdfasdf\"\n    # t = \"fasd\"\n    print(len(s) - lcs(s, t))\n\ndef lcs(s, t):\n    \"\"\"\n    Returns the length of the longest common subsequence of s and t\n    \"\"\"\n    # Build a matrix of length s and t\n    m = [[0 for _ in range(len(t))] for _ in range(len(s))]\n    # Fill in the first row and column\n    for i in range(len(s)):\n        if s[i] == t[0]:\n            m[i][0] = 1\n        elif i != 0:\n            m[i][0] = m[i-1][0]\n    for j in range(len(t)):\n        if t[j] == s[0]:\n            m[0][j] = 1\n        elif j != 0:\n            m[0][j] = m[0][j-1]\n    # Fill in the rest of the matrix\n    for i in range(1, len(s)):\n        for j in range(1, len(t)):\n            if s[i] == t[j]:\n                m[i][j] = m[i-1][j-1] + 1\n            else:\n                m[i][j] = max(m[i-1][j], m[i][j-1])\n    return m[len(s)-1][len(t)-1]\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ns = input()\nt = input()\n\n# s = \"bbaba\"\n# t = \"bb\"\n\n# s = \"baaba\"\n# t = \"ab\"\n\n# s = \"abcde\"\n# t = \"abcde\"\n\n# s = \"asdfasdf\"\n# t = \"fasd\"\n\ndef max_substring(s, t):\n    # Initialize the max_length to be the length of the first character\n    max_length = len(t)\n    # Initialize the current_length to be the length of the first character\n    current_length = len(t)\n    # Initialize the index to be 0\n    index = 0\n    # Initialize the current_index to be 0\n    current_index = 0\n    # Loop through the length of the string\n    for i in range(len(s)):\n        # If the current character is equal to the current character in t\n        if s[i] == t[current_index]:\n            # Increment the current_index\n            current_index += 1\n            # If the current_index is equal to the length of t\n            if current_index == len(t):\n                # Increment the current_index\n                current_index += 1\n                # Set the index to be the current index\n                index = current_index\n                # Set the current_length to be the current index\n                current_length = current_index\n            # If the current index is greater than the length of t\n            elif current_index > len(t):\n                # Set the current_length to be the current index minus the index\n                current_length = current_index - index\n        # If the current character is not equal to the current character in t\n        else:\n            # If the current index is greater than the length of t\n            if current_index > len(t):\n                # Set the current_length to be the current index minus the index\n                current_length = current_index - index\n            # If the current index is less than the length of t\n            else:\n                # Set the current_length to be the current index\n                current_length = current_index\n        # If the current length is greater than the max length\n        if current_length > max_length:\n            # Set the max length to be the current length\n            max_length = current_length\n    # Return the max length\n    return max_length\n\nprint(max_substring(s, t))"
    }
  ],
  "created": 1650312034,
  "id": "cmpl-4yRpyNfzzQOTvRJXbISdx8HKQi73i",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-18 20:01:08.566005 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    # s = \"bbaba\"\n    # t = \"bb\"\n    # s = \"baaba\"\n    # t = \"ab\"\n    # s = \"abcde\"\n    # t = \"abcde\"\n    # s = \"asdfasdf\"\n    # t = \"fasd\"\n    print(len(s) - lcs(s, t))\n\ndef lcs(s, t):\n    \"\"\"\n    Returns the length of the longest common subsequence of s and t\n    \"\"\"\n    # Build a matrix of length s and t\n    m = [[0 for _ in range(len(t))] for _ in range(len(s))]\n    # Fill in the first row and column\n    for i in range(len(s)):\n        if s[i] == t[0]:\n            m[i][0] = 1\n        elif i != 0:\n            m[i][0] = m[i-1][0]\n    for j in range(len(t)):\n        if t[j] == s[0]:\n            m[0][j] = 1\n        elif j != 0:\n            m[0][j] = m[0][j-1]\n    # Fill in the rest of the matrix\n    for i in range(1, len(s)):\n        for j in range(1, len(t)):\n            if s[i] == t[j]:\n                m[i][j] = m[i-1][j-1] + 1\n            else:\n                m[i][j] = max(m[i-1][j], m[i][j-1])\n    return m[len(s)-1][len(t)-1]\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-18 20:01:08.566047 REASON stop
2022-04-18 20:01:08.582925 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ns = input()\nt = input()\n\n# s = \"bbaba\"\n# t = \"bb\"\n\n# s = \"baaba\"\n# t = \"ab\"\n\n# s = \"abcde\"\n# t = \"abcde\"\n\n# s = \"asdfasdf\"\n# t = \"fasd\"\n\ndef max_substring(s, t):\n    # Initialize the max_length to be the length of the first character\n    max_length = len(t)\n    # Initialize the current_length to be the length of the first character\n    current_length = len(t)\n    # Initialize the index to be 0\n    index = 0\n    # Initialize the current_index to be 0\n    current_index = 0\n    # Loop through the length of the string\n    for i in range(len(s)):\n        # If the current character is equal to the current character in t\n        if s[i] == t[current_index]:\n            # Increment the current_index\n            current_index += 1\n            # If the current_index is equal to the length of t\n            if current_index == len(t):\n                # Increment the current_index\n                current_index += 1\n                # Set the index to be the current index\n                index = current_index\n                # Set the current_length to be the current index\n                current_length = current_index\n            # If the current index is greater than the length of t\n            elif current_index > len(t):\n                # Set the current_length to be the current index minus the index\n                current_length = current_index - index\n        # If the current character is not equal to the current character in t\n        else:\n            # If the current index is greater than the length of t\n            if current_index > len(t):\n                # Set the current_length to be the current index minus the index\n                current_length = current_index - index\n            # If the current index is less than the length of t\n            else:\n                # Set the current_length to be the current index\n                current_length = current_index\n        # If the current length is greater than the max length\n        if current_length > max_length:\n            # Set the max length to be the current length\n            max_length = current_length\n    # Return the max length\n    return max_length\n\nprint(max_substring(s, t))"
}
2022-04-18 20:01:08.583120 REASON stop
