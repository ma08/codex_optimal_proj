["\nimport os\nimport sys\n\ndef is_anagram(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    s1_dict = {}\n    s2_dict = {}\n    for c in s1:\n        if c not in s1_dict:\n            s1_dict[c] = 1\n        else:\n            s1_dict[c] += 1\n    for c in s2:\n        if c not in s2_dict:\n            s2_dict[c] = 1\n        else:\n            s2_dict[c] += 1\n    return s1_dict == s2_dict\n\n\ndef main():\n    n = int(sys.stdin.readline().rstrip())\n    s = [sys.stdin.readline().rstrip() for _ in range(n)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if is_anagram(s[i], s[j]):\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\n \nimport sys\n\ndef is_anagram(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    s1_dict = {}\n    s2_dict = {}\n    for c in s1:\n        if c not in s1_dict:\n            s1_dict[c] = 1\n        else:\n            s1_dict[c] += 1\n    for c in s2:\n        if c not in s2_dict:\n            s2_dict[c] = 1\n        else:\n            s2_dict[c] += 1\n    return s1_dict == s2_dict\n\n\ndef main():\n    n = int(sys.stdin.readline().rstrip())\n    s = []\n    for _ in range(n):\n        s.append(sys.stdin.readline().rstrip())\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if is_anagram(s[i], s[j]):\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    s = []\n    for i in range(n):\n        s.append(sys.stdin.readline().rstrip())\n    s.sort()\n    ans = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if len(s[i]) != len(s[j]):\n                continue\n            if len(s[i]) == len(set(s[i])):\n                continue\n            if len(s[j]) == len(set(s[j])):\n                continue\n            if sorted(s[i]) == sorted(s[j]):\n                ans += 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef is_anagram(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    s1_list = list(s1)\n    s2_list = list(s2)\n    s1_list.sort()\n    s2_list.sort()\n    return s1_list == s2_list\n\n\ndef main():\n    n = int(sys.stdin.readline().rstrip())\n    s = []\n    for _ in range(n):\n        s.append(sys.stdin.readline().rstrip())\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if is_anagram(s[i], s[j]):\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef is_anagram(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    s1_dict = {}\n    s2_dict = {}\n    for c in s1:\n        if c not in s1_dict:\n            s1_dict[c] = 1\n        else:\n            s1_dict[c] += 1\n    for c in s2:\n        if c not in s2_dict:\n            s2_dict[c] = 1\n        else:\n            s2_dict[c] += 1\n    return s1_dict == s2_dict\n\n\ndef main():\n    n = int(sys.stdin.readline().rstrip())\n    s = [sys.stdin.readline().rstrip() for _ in range(n)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if is_anagram(s[i], s[j]):\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\nimport sys\n\ndef is_anagram(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    s1_dict = {}\n    s2_dict = {}\n    for c in s1:\n        if c not in s1_dict:\n            s1_dict[c] = 1\n        else:\n            s1_dict[c] += 1\n    for c in s2:\n        if c not in s2_dict:\n            s2_dict[c] = 1\n        else:\n            s2_dict[c] += 1\n    return s1_dict == s2_dict\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_prime_factors(n):\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            while n % i == 0:\n                n //= i\n                factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef get_prime_factors_dict(n):\n    factors = {}\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            while n % i == 0:\n                n //= i\n                if i not in factors:\n                    factors[i] = 1\n                else:\n                    factors[i] += 1\n    if n > 1:\n        if n not in factors:\n            factors[n] = 1\n        else:\n            factors[n] += 1\n    return factors\n\ndef get_divisors(n):\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i != i:\n                divisors.append(n // i)\n    return divisors\n\ndef get_divisors_dict(n):\n    divisors = {}\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors[i] = 1\n            if n // i != i:\n                divisors[n // i] = 1\n    return divisors\n\ndef get_divisors_count(n):\n    divisors = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors += 1\n            if n // i != i:\n                divisors += 1\n    return divisors\n\ndef get_divisors_count_dict(n):\n    divisors = {}\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i not in divisors:\n                divisors[i] = 1\n            else:\n                divisors[i] += 1\n            if n // i != i:\n                if n // i not in divisors:\n                    divisors[n // i] = 1\n                else:\n                    divisors[n // i] += 1\n    return divisors\n\ndef get_gcd(a, b):\n    while b > 0:\n        a, b = b, a % b\n    return a\n\ndef get_lcm(a, b):\n    return a * b // get_gcd(a, b)\n\ndef get_gcd_list(numbers):\n    gcd = numbers[0]\n    for n in numbers:\n        gcd = get_gcd(gcd, n)\n    return gcd\n\ndef get_lcm_list(numbers):\n    lcm = numbers[0]\n    for n in numbers:\n        lcm = get_lcm(lcm, n)\n    return lcm\n\ndef get_gcd_dict(numbers):\n    gcd = numbers[0]\n    for n in numbers:\n        gcd = get_gcd(gcd, n)\n    return gcd\n\ndef get_lcm_dict(numbers):\n    lcm = numbers[0]\n    for n in numbers:\n        lcm = get_lcm(lcm, n)\n    return lcm\n\ndef get_gcd_dict(numbers):\n    gcd = numbers[0]\n    for n in numbers:\n        gcd = get_gcd(gcd, n)\n    return gcd\n\ndef get_lcm_dict(numbers):\n    lcm = numbers[0]\n    for n in numbers:\n        lcm = get_lcm(lcm, n)\n    return lcm\n\ndef get_gcd_dict(numbers):\n    gcd = numbers[0]\n    for n in numbers:\n        gcd = get_gcd(gcd, n)\n    return gcd\n\ndef get_lcm_dict(numbers):\n    lcm = numbers[0]\n    for n in numbers:\n        lcm = get_lcm(lcm, n)\n    return lcm\n\ndef get_gcd_dict(numbers):\n    gcd = numbers[0]\n    for n in numbers:\n        gcd = get_gcd(gcd, n)\n    return gcd\n\ndef get_lcm_dict(numbers):\n    lcm = numbers[0]\n    for n in numbers:\n        lcm = get_lcm(lcm, n)\n    return lcm\n\ndef get_gcd_dict(numbers):\n    gcd = numbers[0]\n    for n in numbers:\n        gcd = get_gcd(gcd, n)\n    return gcd\n\ndef get_lcm_dict(numbers):\n    lcm = numbers[0]\n    for n in numbers:\n        lcm = get_lcm(lcm, n)\n    return lcm\n\ndef get_gcd_dict(numbers):\n    gcd = numbers[0]\n    for n in numbers:\n        gcd = get_gcd(gcd, n)\n    return gcd\n\ndef get_lcm_dict(numbers):\n    lcm = numbers[0]\n    for n in numbers:\n        lcm = get_lcm(lcm, n)\n    return lcm\n\ndef get_gcd_dict(numbers):\n    gcd = numbers[0]\n    for n in numbers:\n        gcd = get_gcd(gcd, n)\n    return gcd\n\ndef get_lcm_dict(numbers):\n    lcm = numbers[0]\n    for n in numbers:\n        lcm = get_lcm(lcm, n)\n    return lcm\n\n\n\ndef main():\n    n = int(sys.stdin.readline().rstrip())\n    s = []\n    for _ in range(n):\n        s.append(sys.stdin.readline().rstrip())\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if is_anagram(s[i], s[j]):\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef is_anagram(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    s1_dict = {}\n    s2_dict = {}\n    for c in s1:\n        if c not in s1_dict:\n            s1_dict[c] = 1\n        else:\n            s1_dict[c] += 1\n    for c in s2:\n        if c not in s2_dict:\n            s2_dict[c] = 1\n        else:\n            s2_dict[c] += 1\n    return s1_dict == s2_dict\n\ndef main():\n    n = int(sys.stdin.readline().rstrip())\n    s = []\n    for _ in range(n):\n        s.append(sys.stdin.readline().rstrip())\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if is_anagram(s[i], s[j]):\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    s = []\n    for i in range(n):\n        s.append(sys.stdin.readline().rstrip())\n    s.sort()\n    ans = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if len(s[i]) != len(s[j]):\n                continue\n            if len(s[i]) == len(set(s[i])):\n                continue\n            if len(s[j]) == len(set(s[j])):\n                continue\n            if sorted(s[i]) == sorted(s[j]):\n                ans += 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef is_anagram(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    s1_dict = {}\n    s2_dict = {}\n    for c in s1:\n        if c not in s1_dict:\n            s1_dict[c] = 1\n        else:\n            s1_dict[c] += 1\n    for c in s2:\n        if c not in s2_dict:\n            s2_dict[c] = 1\n        else:\n            s2_dict[c] += 1\n    return s1_dict == s2_dict\n\ndef main():\n    n = int(sys.stdin.readline().rstrip())\n    s = []\n    for _ in range(n):\n        s.append(sys.stdin.readline().rstrip())\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if is_anagram(s[i], s[j]):\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef is_anagram(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    s1_dict = {}\n    s2_dict = {}\n    for c in s1:\n        if c not in s1_dict:\n            s1_dict[c] = 1\n        else:\n            s1_dict[c] += 1\n    for c in s2:\n        if c not in s2_dict:\n            s2_dict[c] = 1\n        else:\n            s2_dict[c] += 1\n    return s1_dict == s2_dict\n\n\ndef main():\n    n = int(sys.stdin.readline().rstrip())\n    s = []\n    for _ in range(n):\n        s.append(sys.stdin.readline().rstrip())\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if is_anagram(s[i], s[j]):\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"]