2022-04-20 06:26:58.700318 num operations 1
2022-04-20 06:26:58.700356 size on input set 1
2022-04-20 06:26:58.700602 using api key jaanu
2022-04-20 06:27:08.064803 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom collections import defaultdict\nfrom typing import List\n\nfrom collections import Counter\ndef solve(words: List[str]) -> int:\n    word_counts = sorted(Counter(words).items(), key=lambda x: x[1], reverse=True)\n\n    if word_counts[0][1] < 2:\n        return len(words)\n\n    return len(words) - (word_counts[0][1] - 1) * (len(word_counts[0][0]) - 1)\n\n\nif __name__ == '__main__':\n    _ = input()\n    words = input().split()\n    print(solve(words))\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom collections import defaultdict\nfrom typing import List\n\n\ndef solve(words: List[str]) -> int:\n    word_counts = defaultdict(int)\n    for word in words:\n        word_counts[word] += 1\n    word_counts = sorted(word_counts.items(), key=lambda x: x[1], reverse=True)\n\n    if word_counts[0][1] < 2:\n        return len(words)\n\n    return len(words) - (word_counts[0][1] - 1) * (len(word_counts[0][0]) - 1)\n\n\nif __name__ == '__main__':\n    _ = input()\n    words = input().split()\n    print(solve(words))\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom collections import defaultdict\nfrom typing import List\n\ndef solve(words: List[str]) -> int:\n    word_counts = defaultdict(int)\n    for word in words:\n        word_counts[word] += 1\n\n    word_counts = sorted(word_counts.items(), key=lambda x: x[1], reverse=True)\n\n    if word_counts[0][1] < 2:\n        return len(words)\n\n    return len(words) - (word_counts[0][1] - 1) * (len(word_counts[0][0]) - 1)\n\n\nif __name__ == '__main__':\n    _ = input()\n    words = input().split()\n    print(solve(words))\n"
    },
    {
      "index": 3,
      "text": "\n\nfrom collections import defaultdict\nfrom typing import List, Tuple\n\n\ndef solve(words: List[str]) -> int:\n    word_counts = defaultdict(int)\n    for word in words:\n        word_counts[word] += 1\n\n    word_counts = sorted(word_counts.items(), key=lambda x: x[1], reverse=True)  # type: List[Tuple[str, int]]\n\n    if word_counts[0][1] < 2:\n        return len(words)\n\n    return len(words) - (word_counts[0][1] - 1) * (len(word_counts[0][0]) - 1)\n\n\nif __name__ == '__main__':\n    _ = input()\n    words = input().split()\n    print(solve(words))\n"
    },
    {
      "index": 4,
      "text": "\n\nfrom collections import defaultdict\nfrom typing import List\n\n\ndef solve(words: List[str]) -> int:\n    word_counts = defaultdict(int)\n    for word in words:\n        word_counts[word] += 1\n    word_counts = sorted(word_counts.items(), key=lambda x: x[1], reverse=True)\n\n    if word_counts[0][1] < 2:\n        return len(words)\n\n    return len(words) - (word_counts[0][1] - 1) * (len(word_counts[0][0]) - 1)\n\n\nif __name__ == '__main__':\n    _ = input()\n    words = input().split()\n    print(solve(words))\n"
    },
    {
      "index": 5,
      "text": "\n\nfrom collections import defaultdict\nfrom typing import List\n\ndef solve(words: List[str]) -> int:\n    word_counts = defaultdict(int)\n    for word in words:\n        word_counts[word] += 1\n\n    word_counts = sorted(word_counts.items(), key=lambda x: x[1], reverse=True)\n\n    if word_counts[0][1] < 2:\n        return len(words)\n\n    return len(words) - (word_counts[0][1] - 1) * (len(word_counts[0][0]) - 1)\n\n\nif __name__ == '__main__':\n    _ = input()\n    words = input().split()\n    print(solve(words))\n"
    },
    {
      "index": 6,
      "text": "\n\nfrom collections import defaultdict\nfrom typing import List\n\n\ndef solve(words: List[str]) -> int:\n    word_counts = defaultdict(int)\n    for word in words:\n        word_counts[word] += 1\n    word_counts = sorted(word_counts.items(), key=lambda x: x[1], reverse=True)\n\n    if word_counts[0][1] < 2:\n        return len(words)\n\n    return len(words) - (word_counts[0][1] - 1) * (len(word_counts[0][0]) - 1)\n\n\nif __name__ == '__main__':\n    _ = input()\n    words = input().split()\n    print(solve(words))\n"
    },
    {
      "index": 7,
      "text": "\n\nfrom collections import defaultdict\nfrom typing import List\n\ndef solve(words: List[str]) -> int:\n    word_counts = defaultdict(int)\n    for word in words:\n        word_counts[word] += 1\n\n    word_counts = sorted(word_counts.items(), key=lambda x: x[1], reverse=True)\n\n    return len(words) - (word_counts[0][1] - 1) * (len(word_counts[0][0]))\n\n\nif __name__ == '__main__':\n    _ = input()\n    words = input().split()\n    print(solve(words))\n"
    }
  ],
  "created": 1650436018,
  "object": "edit"
}
2022-04-20 06:27:08.065215 fix syntax errors 8 ["\n\nfrom collections import defaultdict\nfrom typing import List\n\nfrom collections import Counter\ndef solve(words: List[str]) -> int:\n    word_counts = sorted(Counter(words).items(), key=lambda x: x[1], reverse=True)\n\n    if word_counts[0][1] < 2:\n        return len(words)\n\n    return len(words) - (word_counts[0][1] - 1) * (len(word_counts[0][0]) - 1)\n\n\nif __name__ == '__main__':\n    _ = input()\n    words = input().split()\n    print(solve(words))\n", "\n\nfrom collections import defaultdict\nfrom typing import List\n\n\ndef solve(words: List[str]) -> int:\n    word_counts = defaultdict(int)\n    for word in words:\n        word_counts[word] += 1\n    word_counts = sorted(word_counts.items(), key=lambda x: x[1], reverse=True)\n\n    if word_counts[0][1] < 2:\n        return len(words)\n\n    return len(words) - (word_counts[0][1] - 1) * (len(word_counts[0][0]) - 1)\n\n\nif __name__ == '__main__':\n    _ = input()\n    words = input().split()\n    print(solve(words))\n", "\n\nfrom collections import defaultdict\nfrom typing import List\n\ndef solve(words: List[str]) -> int:\n    word_counts = defaultdict(int)\n    for word in words:\n        word_counts[word] += 1\n\n    word_counts = sorted(word_counts.items(), key=lambda x: x[1], reverse=True)\n\n    if word_counts[0][1] < 2:\n        return len(words)\n\n    return len(words) - (word_counts[0][1] - 1) * (len(word_counts[0][0]) - 1)\n\n\nif __name__ == '__main__':\n    _ = input()\n    words = input().split()\n    print(solve(words))\n", "\n\nfrom collections import defaultdict\nfrom typing import List, Tuple\n\n\ndef solve(words: List[str]) -> int:\n    word_counts = defaultdict(int)\n    for word in words:\n        word_counts[word] += 1\n\n    word_counts = sorted(word_counts.items(), key=lambda x: x[1], reverse=True)  # type: List[Tuple[str, int]]\n\n    if word_counts[0][1] < 2:\n        return len(words)\n\n    return len(words) - (word_counts[0][1] - 1) * (len(word_counts[0][0]) - 1)\n\n\nif __name__ == '__main__':\n    _ = input()\n    words = input().split()\n    print(solve(words))\n", "\n\nfrom collections import defaultdict\nfrom typing import List\n\n\ndef solve(words: List[str]) -> int:\n    word_counts = defaultdict(int)\n    for word in words:\n        word_counts[word] += 1\n    word_counts = sorted(word_counts.items(), key=lambda x: x[1], reverse=True)\n\n    if word_counts[0][1] < 2:\n        return len(words)\n\n    return len(words) - (word_counts[0][1] - 1) * (len(word_counts[0][0]) - 1)\n\n\nif __name__ == '__main__':\n    _ = input()\n    words = input().split()\n    print(solve(words))\n", "\n\nfrom collections import defaultdict\nfrom typing import List\n\ndef solve(words: List[str]) -> int:\n    word_counts = defaultdict(int)\n    for word in words:\n        word_counts[word] += 1\n\n    word_counts = sorted(word_counts.items(), key=lambda x: x[1], reverse=True)\n\n    if word_counts[0][1] < 2:\n        return len(words)\n\n    return len(words) - (word_counts[0][1] - 1) * (len(word_counts[0][0]) - 1)\n\n\nif __name__ == '__main__':\n    _ = input()\n    words = input().split()\n    print(solve(words))\n", "\n\nfrom collections import defaultdict\nfrom typing import List\n\n\ndef solve(words: List[str]) -> int:\n    word_counts = defaultdict(int)\n    for word in words:\n        word_counts[word] += 1\n    word_counts = sorted(word_counts.items(), key=lambda x: x[1], reverse=True)\n\n    if word_counts[0][1] < 2:\n        return len(words)\n\n    return len(words) - (word_counts[0][1] - 1) * (len(word_counts[0][0]) - 1)\n\n\nif __name__ == '__main__':\n    _ = input()\n    words = input().split()\n    print(solve(words))\n", "\n\nfrom collections import defaultdict\nfrom typing import List\n\ndef solve(words: List[str]) -> int:\n    word_counts = defaultdict(int)\n    for word in words:\n        word_counts[word] += 1\n\n    word_counts = sorted(word_counts.items(), key=lambda x: x[1], reverse=True)\n\n    return len(words) - (word_counts[0][1] - 1) * (len(word_counts[0][0]))\n\n\nif __name__ == '__main__':\n    _ = input()\n    words = input().split()\n    print(solve(words))\n"]
2022-04-20 06:27:08.065411 size on output set 5
