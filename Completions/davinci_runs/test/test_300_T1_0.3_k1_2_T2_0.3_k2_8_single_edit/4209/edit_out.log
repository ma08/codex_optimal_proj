2022-04-20 07:04:31.346859 num operations 1
2022-04-20 07:04:31.346880 size on input set 1
2022-04-20 07:04:31.347113 using api key kouti
2022-04-20 07:04:39.757313 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef get_blocks(n):\n    blocks = []\n    for i in range(n):\n        for j in range(i, n):\n            blocks.append((i, j))\n    return blocks\n\ndef get_block_sum(a, block):\n    return sum(a[block[0]:block[1]+1])\n\ndef get_block_set(a, blocks):\n    block_set = []\n    for block in blocks:\n        if block not in block_set:\n            block_set.append(block)\n            for i in range(block[0]+1, block[1]+1):\n                for j in range(i, block[1]+1):\n                    if (i, j) in block_set:\n                        block_set.remove((i, j))\n    return block_set\n\ndef get_block_set_sum(a, block_set):\n    return sum(get_block_sum(a, block) for block in block_set)\n\ndef get_max_block_set(a, blocks):\n    max_block_set = []\n    max_block_set_sum = 0\n    for block in blocks:\n        block_set = get_block_set(a, [block])\n        block_set_sum = get_block_set_sum(a, block_set)\n        if block_set_sum > max_block_set_sum:\n            max_block_set = block_set\n            max_block_set_sum = block_set_sum\n    return max_block_set\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    blocks = get_blocks(n)\n    max_block_set = get_max_block_set(a, blocks)\n    print(len(max_block_set))\n    for block in max_block_set:\n        print(block[0]+1, block[1]+1)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef get_blocks(n):\n    blocks = []\n    for i in range(n):\n        for j in range(i, n):\n            blocks.append((i, j))\n    return blocks\n\ndef get_block_sum(a, block):\n    return sum(a[block[0]:block[1]+1])\n\ndef get_block_set(a, blocks):\n    block_set = []\n    for block in blocks:\n        if block not in block_set:\n            block_set.append(block)\n            for i in range(block[0]+1, block[1]+1):\n                for j in range(i, block[1]+1):\n                    if (i, j) in block_set:\n                        block_set.remove((i, j))\n    return block_set\n\ndef get_block_set_sum(a, block_set):\n    return sum(get_block_sum(a, block) for block in block_set)\n\ndef get_max_block_set(a, blocks):\n    max_block_set = []\n    max_block_set_sum = 0\n    for block in blocks:\n        block_set = get_block_set(a, [block])\n        block_set_sum = get_block_set_sum(a, block_set)\n        if block_set_sum > max_block_set_sum:\n            max_block_set = block_set\n            max_block_set_sum = block_set_sum\n    return max_block_set\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    blocks = get_blocks(n)\n    max_block_set = get_max_block_set(a, blocks)\n    print(len(max_block_set))\n    for block in max_block_set:\n        print(block[0]+1, block[1]+1)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef get_blocks(n, a):\n    blocks = []\n    for i in range(n):\n        for j in range(i, n):\n            blocks.append((i, j))\n    return blocks\n\ndef get_block_sum(a, block):\n    return sum(a[block[0]:block[1] + 1])\n\ndef get_block_set(a, blocks):\n    block_set = []\n    for block in blocks:\n        if block not in block_set:\n            block_set.append(block)\n            for i in range(block[0] + 1, block[1] + 1):\n                for j in range(i, block[1] + 1):\n                    if (i, j) in block_set:\n                        block_set.remove((i, j))\n    return block_set\n\ndef get_block_set_sum(a, block_set):\n    return sum(get_block_sum(a, block) for block in block_set)\n\ndef get_max_block_set(a, blocks):\n    max_block_set = []\n    max_block_set_sum = 0\n    for block in blocks:\n        block_set = get_block_set(a, [block])\n        block_set_sum = get_block_set_sum(a, block_set)\n        if block_set_sum > max_block_set_sum:\n            max_block_set = block_set\n            max_block_set_sum = block_set_sum\n    return max_block_set\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    blocks = get_blocks(n, a)\n    max_block_set = get_max_block_set(a, blocks)\n    print(len(max_block_set))\n    for block in max_block_set:\n        print(block[0] + 1, block[1] + 1)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\ndef get_blocks(n, a):\n    blocks = []\n    for i in range(n):\n        for j in range(i, n):\n            blocks.append((i, j))\n    return blocks\n\ndef get_block_sum(a, block):\n    return sum(a[block[0]:block[1]+1])\n\ndef get_block_set(a, blocks):\n    block_set = []\n    for block in blocks:\n        if block not in block_set:\n            block_set.append(block)\n            for i in range(block[0]+1, block[1]+1):\n                for j in range(i, block[1]+1):\n                    if (i, j) in block_set:\n                        block_set.remove((i, j))\n    return block_set\n\ndef get_block_set_sum(a, block_set):\n    return sum(get_block_sum(a, block) for block in block_set)\n\ndef get_max_block_set(a, blocks):\n    max_block_set = []\n    max_block_set_sum = 0\n    for block in blocks:\n        block_set = get_block_set(a, [block])\n        block_set_sum = get_block_set_sum(a, block_set)\n        if block_set_sum > max_block_set_sum:\n            max_block_set = block_set\n            max_block_set_sum = block_set_sum\n    return max_block_set\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    blocks = get_blocks(n, a)\n    max_block_set = get_max_block_set(a, blocks)\n    print(len(max_block_set))\n    for block in max_block_set:\n        print(block[0]+1, block[1]+1)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef get_blocks(n, a):\n    blocks = []\n    for i in range(n):\n        for j in range(i, n):\n            blocks.append((i, j))\n    return blocks\n\ndef get_block_sum(a, block):\n    return sum(a[block[0]:block[1]+1])\n\ndef get_block_set(a, blocks):\n    block_set = []\n    for block in blocks:\n        if block not in block_set:\n            block_set.append(block)\n            for i in range(block[0]+1, block[1]+1):\n                for j in range(i, block[1]+1):\n                    if (i, j) in block_set:\n                        block_set.remove((i, j))\n    return block_set\n\ndef get_block_set_sum(a, block_set):\n    return sum(get_block_sum(a, block) for block in block_set)\n\ndef get_max_block_set(a, blocks):\n    max_block_set = []\n    max_block_set_sum = 0\n    for block in blocks:\n        block_set = get_block_set(a, [block])\n        block_set_sum = get_block_set_sum(a, block_set)\n        if block_set_sum > max_block_set_sum:\n            max_block_set = block_set\n            max_block_set_sum = block_set_sum\n    return max_block_set\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    blocks = get_blocks(n, a)\n    max_block_set = get_max_block_set(a, blocks)\n    print(len(max_block_set))\n    for block in max_block_set:\n        print(block[0]+1, block[1]+1)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef get_blocks(n, a):\n    blocks = []\n    for i in range(n):\n        for j in range(i, n):\n            blocks.append((i, j))\n    return blocks\n\ndef get_block_sum(a, block):\n    return sum(a[block[0]:block[1] + 1])\n\ndef get_block_set(a, blocks):\n    block_set = []\n    for block in blocks:\n        if block not in block_set:\n            block_set.append(block)\n            for i in range(block[0] + 1, block[1] + 1):\n                for j in range(i, block[1] + 1):\n                    if (i, j) in block_set:\n                        block_set.remove((i, j))\n    return block_set\n\ndef get_block_set_sum(a, block_set):\n    return sum(get_block_sum(a, block) for block in block_set)\n\ndef get_max_block_set(a, blocks):\n    max_block_set = []\n    max_block_set_sum = 0\n    for block in blocks:\n        block_set = get_block_set(a, [block])\n        block_set_sum = get_block_set_sum(a, block_set)\n        if block_set_sum > max_block_set_sum:\n            max_block_set = block_set\n            max_block_set_sum = block_set_sum\n    return max_block_set\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    blocks = get_blocks(n, a)\n    max_block_set = get_max_block_set(a, blocks)\n    print(len(max_block_set))\n    for block in max_block_set:\n        print(block[0] + 1, block[1] + 1)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\ndef get_blocks(n, a):\n    blocks = []\n    for i in range(n):\n        for j in range(i, n):\n            blocks.append((i, j))\n    return blocks\n\ndef get_block_sum(a, block):\n    return sum(a[block[0]:block[1]+1])\n\ndef get_block_set(a, blocks):\n    block_set = []\n    for block in blocks:\n        if block not in block_set:\n            block_set.append(block)\n            for i in range(block[0]+1, block[1]+1):\n                for j in range(i, block[1]+1):\n                    if (i, j) in block_set:\n                        block_set.remove((i, j))\n    return block_set\n\ndef get_block_set_sum(a, block_set):\n    return sum(get_block_sum(a, block) for block in block_set)\n\ndef get_max_block_set(a, blocks):\n    max_block_set = []\n    max_block_set_sum = 0\n    for block in blocks:\n        block_set = get_block_set(a, [block])\n        block_set_sum = get_block_set_sum(a, block_set)\n        if block_set_sum > max_block_set_sum:\n            max_block_set = block_set\n            max_block_set_sum = block_set_sum\n    return max_block_set\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    blocks = get_blocks(n, a)\n    max_block_set = get_max_block_set(a, blocks)\n    print(len(max_block_set))\n    for block in max_block_set:\n        print(block[0]+1, block[1]+1)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\ndef get_blocks(n, a):\n    blocks = []\n    for i in range(n):\n        for j in range(i, n):\n            blocks.append((i, j))\n    return blocks\n\ndef get_block_sum(a, block):\n    return sum(a[block[0]:block[1] + 1])\n\ndef get_block_set(a, blocks):\n    block_set = []\n    for block in blocks:\n        if block not in block_set:\n            block_set.append(block)\n            for i in range(block[0] + 1, block[1] + 1):\n                for j in range(i, block[1] + 1):\n                    if (i, j) in block_set:\n                        block_set.remove((i, j))\n    return block_set\n\ndef get_block_set_sum(a, block_set):\n    return sum(get_block_sum(a, block) for block in block_set)\n\ndef get_max_block_set(a, blocks):\n    max_block_set = []\n    max_block_set_sum = 0\n    for block in blocks:\n        block_set = get_block_set(a, [block])\n        block_set_sum = get_block_set_sum(a, block_set)\n        if block_set_sum > max_block_set_sum:\n            max_block_set = block_set\n            max_block_set_sum = block_set_sum\n    return max_block_set\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    blocks = get_blocks(n, a)\n    max_block_set = get_max_block_set(a, blocks)\n    print(len(max_block_set))\n    for block in max_block_set:\n        print(block[0] + 1, block[1] + 1)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650438271,
  "object": "edit"
}
2022-04-20 07:04:39.757891 fix syntax errors 8 ["\n\ndef get_blocks(n):\n    blocks = []\n    for i in range(n):\n        for j in range(i, n):\n            blocks.append((i, j))\n    return blocks\n\ndef get_block_sum(a, block):\n    return sum(a[block[0]:block[1]+1])\n\ndef get_block_set(a, blocks):\n    block_set = []\n    for block in blocks:\n        if block not in block_set:\n            block_set.append(block)\n            for i in range(block[0]+1, block[1]+1):\n                for j in range(i, block[1]+1):\n                    if (i, j) in block_set:\n                        block_set.remove((i, j))\n    return block_set\n\ndef get_block_set_sum(a, block_set):\n    return sum(get_block_sum(a, block) for block in block_set)\n\ndef get_max_block_set(a, blocks):\n    max_block_set = []\n    max_block_set_sum = 0\n    for block in blocks:\n        block_set = get_block_set(a, [block])\n        block_set_sum = get_block_set_sum(a, block_set)\n        if block_set_sum > max_block_set_sum:\n            max_block_set = block_set\n            max_block_set_sum = block_set_sum\n    return max_block_set\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    blocks = get_blocks(n)\n    max_block_set = get_max_block_set(a, blocks)\n    print(len(max_block_set))\n    for block in max_block_set:\n        print(block[0]+1, block[1]+1)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef get_blocks(n):\n    blocks = []\n    for i in range(n):\n        for j in range(i, n):\n            blocks.append((i, j))\n    return blocks\n\ndef get_block_sum(a, block):\n    return sum(a[block[0]:block[1]+1])\n\ndef get_block_set(a, blocks):\n    block_set = []\n    for block in blocks:\n        if block not in block_set:\n            block_set.append(block)\n            for i in range(block[0]+1, block[1]+1):\n                for j in range(i, block[1]+1):\n                    if (i, j) in block_set:\n                        block_set.remove((i, j))\n    return block_set\n\ndef get_block_set_sum(a, block_set):\n    return sum(get_block_sum(a, block) for block in block_set)\n\ndef get_max_block_set(a, blocks):\n    max_block_set = []\n    max_block_set_sum = 0\n    for block in blocks:\n        block_set = get_block_set(a, [block])\n        block_set_sum = get_block_set_sum(a, block_set)\n        if block_set_sum > max_block_set_sum:\n            max_block_set = block_set\n            max_block_set_sum = block_set_sum\n    return max_block_set\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    blocks = get_blocks(n)\n    max_block_set = get_max_block_set(a, blocks)\n    print(len(max_block_set))\n    for block in max_block_set:\n        print(block[0]+1, block[1]+1)\n\nif __name__ == '__main__':\n    main()\n", "\ndef get_blocks(n, a):\n    blocks = []\n    for i in range(n):\n        for j in range(i, n):\n            blocks.append((i, j))\n    return blocks\n\ndef get_block_sum(a, block):\n    return sum(a[block[0]:block[1] + 1])\n\ndef get_block_set(a, blocks):\n    block_set = []\n    for block in blocks:\n        if block not in block_set:\n            block_set.append(block)\n            for i in range(block[0] + 1, block[1] + 1):\n                for j in range(i, block[1] + 1):\n                    if (i, j) in block_set:\n                        block_set.remove((i, j))\n    return block_set\n\ndef get_block_set_sum(a, block_set):\n    return sum(get_block_sum(a, block) for block in block_set)\n\ndef get_max_block_set(a, blocks):\n    max_block_set = []\n    max_block_set_sum = 0\n    for block in blocks:\n        block_set = get_block_set(a, [block])\n        block_set_sum = get_block_set_sum(a, block_set)\n        if block_set_sum > max_block_set_sum:\n            max_block_set = block_set\n            max_block_set_sum = block_set_sum\n    return max_block_set\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    blocks = get_blocks(n, a)\n    max_block_set = get_max_block_set(a, blocks)\n    print(len(max_block_set))\n    for block in max_block_set:\n        print(block[0] + 1, block[1] + 1)\n\nif __name__ == '__main__':\n    main()\n", "\ndef get_blocks(n, a):\n    blocks = []\n    for i in range(n):\n        for j in range(i, n):\n            blocks.append((i, j))\n    return blocks\n\ndef get_block_sum(a, block):\n    return sum(a[block[0]:block[1]+1])\n\ndef get_block_set(a, blocks):\n    block_set = []\n    for block in blocks:\n        if block not in block_set:\n            block_set.append(block)\n            for i in range(block[0]+1, block[1]+1):\n                for j in range(i, block[1]+1):\n                    if (i, j) in block_set:\n                        block_set.remove((i, j))\n    return block_set\n\ndef get_block_set_sum(a, block_set):\n    return sum(get_block_sum(a, block) for block in block_set)\n\ndef get_max_block_set(a, blocks):\n    max_block_set = []\n    max_block_set_sum = 0\n    for block in blocks:\n        block_set = get_block_set(a, [block])\n        block_set_sum = get_block_set_sum(a, block_set)\n        if block_set_sum > max_block_set_sum:\n            max_block_set = block_set\n            max_block_set_sum = block_set_sum\n    return max_block_set\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    blocks = get_blocks(n, a)\n    max_block_set = get_max_block_set(a, blocks)\n    print(len(max_block_set))\n    for block in max_block_set:\n        print(block[0]+1, block[1]+1)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef get_blocks(n, a):\n    blocks = []\n    for i in range(n):\n        for j in range(i, n):\n            blocks.append((i, j))\n    return blocks\n\ndef get_block_sum(a, block):\n    return sum(a[block[0]:block[1]+1])\n\ndef get_block_set(a, blocks):\n    block_set = []\n    for block in blocks:\n        if block not in block_set:\n            block_set.append(block)\n            for i in range(block[0]+1, block[1]+1):\n                for j in range(i, block[1]+1):\n                    if (i, j) in block_set:\n                        block_set.remove((i, j))\n    return block_set\n\ndef get_block_set_sum(a, block_set):\n    return sum(get_block_sum(a, block) for block in block_set)\n\ndef get_max_block_set(a, blocks):\n    max_block_set = []\n    max_block_set_sum = 0\n    for block in blocks:\n        block_set = get_block_set(a, [block])\n        block_set_sum = get_block_set_sum(a, block_set)\n        if block_set_sum > max_block_set_sum:\n            max_block_set = block_set\n            max_block_set_sum = block_set_sum\n    return max_block_set\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    blocks = get_blocks(n, a)\n    max_block_set = get_max_block_set(a, blocks)\n    print(len(max_block_set))\n    for block in max_block_set:\n        print(block[0]+1, block[1]+1)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef get_blocks(n, a):\n    blocks = []\n    for i in range(n):\n        for j in range(i, n):\n            blocks.append((i, j))\n    return blocks\n\ndef get_block_sum(a, block):\n    return sum(a[block[0]:block[1] + 1])\n\ndef get_block_set(a, blocks):\n    block_set = []\n    for block in blocks:\n        if block not in block_set:\n            block_set.append(block)\n            for i in range(block[0] + 1, block[1] + 1):\n                for j in range(i, block[1] + 1):\n                    if (i, j) in block_set:\n                        block_set.remove((i, j))\n    return block_set\n\ndef get_block_set_sum(a, block_set):\n    return sum(get_block_sum(a, block) for block in block_set)\n\ndef get_max_block_set(a, blocks):\n    max_block_set = []\n    max_block_set_sum = 0\n    for block in blocks:\n        block_set = get_block_set(a, [block])\n        block_set_sum = get_block_set_sum(a, block_set)\n        if block_set_sum > max_block_set_sum:\n            max_block_set = block_set\n            max_block_set_sum = block_set_sum\n    return max_block_set\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    blocks = get_blocks(n, a)\n    max_block_set = get_max_block_set(a, blocks)\n    print(len(max_block_set))\n    for block in max_block_set:\n        print(block[0] + 1, block[1] + 1)\n\nif __name__ == '__main__':\n    main()\n", "\ndef get_blocks(n, a):\n    blocks = []\n    for i in range(n):\n        for j in range(i, n):\n            blocks.append((i, j))\n    return blocks\n\ndef get_block_sum(a, block):\n    return sum(a[block[0]:block[1]+1])\n\ndef get_block_set(a, blocks):\n    block_set = []\n    for block in blocks:\n        if block not in block_set:\n            block_set.append(block)\n            for i in range(block[0]+1, block[1]+1):\n                for j in range(i, block[1]+1):\n                    if (i, j) in block_set:\n                        block_set.remove((i, j))\n    return block_set\n\ndef get_block_set_sum(a, block_set):\n    return sum(get_block_sum(a, block) for block in block_set)\n\ndef get_max_block_set(a, blocks):\n    max_block_set = []\n    max_block_set_sum = 0\n    for block in blocks:\n        block_set = get_block_set(a, [block])\n        block_set_sum = get_block_set_sum(a, block_set)\n        if block_set_sum > max_block_set_sum:\n            max_block_set = block_set\n            max_block_set_sum = block_set_sum\n    return max_block_set\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    blocks = get_blocks(n, a)\n    max_block_set = get_max_block_set(a, blocks)\n    print(len(max_block_set))\n    for block in max_block_set:\n        print(block[0]+1, block[1]+1)\n\nif __name__ == '__main__':\n    main()\n", "\ndef get_blocks(n, a):\n    blocks = []\n    for i in range(n):\n        for j in range(i, n):\n            blocks.append((i, j))\n    return blocks\n\ndef get_block_sum(a, block):\n    return sum(a[block[0]:block[1] + 1])\n\ndef get_block_set(a, blocks):\n    block_set = []\n    for block in blocks:\n        if block not in block_set:\n            block_set.append(block)\n            for i in range(block[0] + 1, block[1] + 1):\n                for j in range(i, block[1] + 1):\n                    if (i, j) in block_set:\n                        block_set.remove((i, j))\n    return block_set\n\ndef get_block_set_sum(a, block_set):\n    return sum(get_block_sum(a, block) for block in block_set)\n\ndef get_max_block_set(a, blocks):\n    max_block_set = []\n    max_block_set_sum = 0\n    for block in blocks:\n        block_set = get_block_set(a, [block])\n        block_set_sum = get_block_set_sum(a, block_set)\n        if block_set_sum > max_block_set_sum:\n            max_block_set = block_set\n            max_block_set_sum = block_set_sum\n    return max_block_set\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    blocks = get_blocks(n, a)\n    max_block_set = get_max_block_set(a, blocks)\n    print(len(max_block_set))\n    for block in max_block_set:\n        print(block[0] + 1, block[1] + 1)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 07:04:39.758105 size on output set 5
2022-04-20 07:04:39.758126 num operations 1
2022-04-20 07:04:39.758136 size on input set 1
2022-04-20 07:04:39.758369 using api key gabby
2022-04-20 07:04:49.381598 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    if s % n != 0:\n        print(1)\n        print(1, n, sep=' ')\n        return\n    s //= n\n    l = 0\n    r = 0\n    k = 0\n    while r < n:\n        if a[r] == s:\n            k += 1\n            print(l + 1, r + 1, sep=' ')\n            l = r + 1\n        r += 1\n    if l < n:\n        k += 1\n        print(l + 1, n, sep=' ')\n    print(k)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    if s % n != 0:\n        print(1)\n        print(1, n)\n        return\n    s //= n\n    l = 0\n    r = 0\n    k = 0\n    while r < n:\n        if a[r] == s:\n            k += 1\n            print(l + 1, r)\n            l = r + 1\n        r += 1\n    if l < n:\n        k += 1\n        print(l + 1, n - 1)\n    print(k)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    if s % n != 0:\n        print(1)\n        print(1, n)\n        return\n    s //= n\n    l = 1\n    r = 1\n    k = 0\n    while r <= n:\n        if a[r] == s:\n            k += 1\n            print(l, r)\n            l = r + 1\n        r += 1\n    if l <= n:\n        k += 1\n        print(l, n)\n    print(k)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    if s % n != 0:\n        print(1)\n        print(1, n)\n        return\n    s //= n\n    l = 1\n    r = 1\n    k = 0\n    while r <= n:\n        if a[r] == s:\n            k += 1\n            l = r\n        r += 1\n    if l < n:\n        k += 1\n        print(l + 1, n)\n    print(k)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    print(s)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    if s % n != 0:\n        print(1)\n        print(1, n)\n        return\n    s //= n\n    l = 0\n    r = 0\n    k = 1\n    while r < n:\n        if a[r] == s:\n            k += 1\n            print(l + 1, r + 1)\n            l = r + 1\n        r += 1\n    if l < n:\n        k += 1\n        print(l + 1, n)\n    print(k)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    if s % n != 0:\n        print(1)\n        print(1, n, sep=' ')\n        return\n    s //= n\n    l = 0\n    r = 0\n    k = 0\n    while r < n:\n        if a[r] == s:\n            k += 1\n            print(l + 1, r + 1, sep=' ')\n            l = r + 1\n        r += 1\n    if l < n:\n        k += 1\n        print(l + 1, n, sep=' ')\n    print(k)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a) // n\n    l = 0\n    r = 0\n    k = 0\n    while r < n:\n        if a[r] != s:\n            k += 1\n            print(l + 1, r)\n            l = r\n        r += 1\n    if l < n:\n        print(1)\n        print(l + 1, n)\n    print(k)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650438279,
  "object": "edit"
}
2022-04-20 07:04:49.382011 fix syntax errors 8 ["\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    if s % n != 0:\n        print(1)\n        print(1, n, sep=' ')\n        return\n    s //= n\n    l = 0\n    r = 0\n    k = 0\n    while r < n:\n        if a[r] == s:\n            k += 1\n            print(l + 1, r + 1, sep=' ')\n            l = r + 1\n        r += 1\n    if l < n:\n        k += 1\n        print(l + 1, n, sep=' ')\n    print(k)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    if s % n != 0:\n        print(1)\n        print(1, n)\n        return\n    s //= n\n    l = 0\n    r = 0\n    k = 0\n    while r < n:\n        if a[r] == s:\n            k += 1\n            print(l + 1, r)\n            l = r + 1\n        r += 1\n    if l < n:\n        k += 1\n        print(l + 1, n - 1)\n    print(k)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    if s % n != 0:\n        print(1)\n        print(1, n)\n        return\n    s //= n\n    l = 1\n    r = 1\n    k = 0\n    while r <= n:\n        if a[r] == s:\n            k += 1\n            print(l, r)\n            l = r + 1\n        r += 1\n    if l <= n:\n        k += 1\n        print(l, n)\n    print(k)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    if s % n != 0:\n        print(1)\n        print(1, n)\n        return\n    s //= n\n    l = 1\n    r = 1\n    k = 0\n    while r <= n:\n        if a[r] == s:\n            k += 1\n            l = r\n        r += 1\n    if l < n:\n        k += 1\n        print(l + 1, n)\n    print(k)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    print(s)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    if s % n != 0:\n        print(1)\n        print(1, n)\n        return\n    s //= n\n    l = 0\n    r = 0\n    k = 1\n    while r < n:\n        if a[r] == s:\n            k += 1\n            print(l + 1, r + 1)\n            l = r + 1\n        r += 1\n    if l < n:\n        k += 1\n        print(l + 1, n)\n    print(k)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    if s % n != 0:\n        print(1)\n        print(1, n, sep=' ')\n        return\n    s //= n\n    l = 0\n    r = 0\n    k = 0\n    while r < n:\n        if a[r] == s:\n            k += 1\n            print(l + 1, r + 1, sep=' ')\n            l = r + 1\n        r += 1\n    if l < n:\n        k += 1\n        print(l + 1, n, sep=' ')\n    print(k)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a) // n\n    l = 0\n    r = 0\n    k = 0\n    while r < n:\n        if a[r] != s:\n            k += 1\n            print(l + 1, r)\n            l = r\n        r += 1\n    if l < n:\n        print(1)\n        print(l + 1, n)\n    print(k)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 07:04:49.382091 size on output set 7
