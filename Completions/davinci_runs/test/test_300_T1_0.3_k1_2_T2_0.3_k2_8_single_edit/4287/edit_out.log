2022-04-20 07:29:10.611095 num operations 1
2022-04-20 07:29:10.611119 size on input set 1
2022-04-20 07:29:10.611339 using api key soukgp
2022-04-20 07:29:25.620803 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef solve(a, n, m, rain, umbrellas):\n    umbrellas = sorted(umbrellas)\n    r = [0] * (a + 2)\n    for l, ri in rain:\n        r[l] += 1\n        r[ri] -= 1\n    for i in range(1, a + 1):\n        r[i] += r[i - 1]\n    dp = [sys.maxsize] * (a + 2)\n    dp[0] = 0\n    for i in range(1, a + 1):\n        dp[i] = min(dp[i], dp[i - 1] + r[i - 1])\n    for i in range(m):\n        x, p = umbrellas[i]\n        dp[x] = min(dp[x], dp[x - 1] + p)\n    for i in range(a - 1, -1, -1):\n        dp[i] = min(dp[i], dp[i + 1])\n    if dp[a] == sys.maxsize:\n        return -1\n    return dp[a]\n\ndef main():\n    a, n, m = map(int, input().split())\n    rain = [tuple(map(int, input().split())) for _ in range(n)]\n    umbrellas = [tuple(map(int, input().split())) for _ in range(m)]\n    print(solve(a, n, m, rain, umbrellas))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef solve(a, n, m, rain, umbrellas):\n    umbrellas = sorted(umbrellas)\n    r = [0] * (a + 1)\n    for l, ri in rain:\n        r[l] += 1\n        r[ri] -= 1\n    for i in range(1, a + 1):\n        r[i] += r[i - 1]\n    dp = [0] * (a + 1)\n    for i in range(1, a):\n        dp[i] = dp[i - 1] + r[i - 1]\n    for i in range(m):\n        x, p = umbrellas[i]\n        dp[x] = min(dp[x], dp[x - 1] + p) if x > 0 else dp[x]\n    for i in range(a - 1, -1, -1):\n        dp[i] = min(dp[i], dp[i + 1]) if i < a else dp[i]\n    if dp[a] == sys.maxsize:\n        return -1\n    return dp[a]\n\ndef main():\n    a, n, m = map(int, input().split())\n    rain = [tuple(map(int, input().split())) for _ in range(n)]\n    umbrellas = [tuple(map(int, input().split())) for _ in range(m)]\n    print(solve(a, n, m, rain, umbrellas))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef solve(a, n, m, rain, umbrellas):\n    umbrellas = sorted(umbrellas)\n    r = [0] * (a + 1)\n    for l, ri in rain:  # noqa\n        r[l] += 1\n        r[ri] -= 1\n    for i in range(1, a + 1):\n        r[i] += r[i - 1]\n    dp = [0] * (a + 1)\n    for i in range(1, a + 1):\n        dp[i] = dp[i - 1] + r[i - 1]\n    for i in range(m):\n        x, p = umbrellas[i]\n        dp[x] = min(dp[x], dp[x - 1] + p)\n    for i in range(a - 1, -1, -1):\n        dp[i] = min(dp[i], dp[i + 1])\n    if dp[a] == sys.maxsize:\n        return -1\n    return dp[a]\n\ndef main():\n    a, n, m = map(int, input().split())\n    rain = [tuple(map(int, input().split())) for _ in range(n)]  # noqa\n    umbrellas = [tuple(map(int, input().split())) for _ in range(m)]  # noqa\n    print(solve(a, n, m, rain, umbrellas))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef solve(a, n, m, rain, umbrellas):\n    umbrellas = sorted(umbrellas)\n    r = [0] * (a + 2)\n    for l, ri in rain:\n        r[l] += 1\n        r[ri + 1] -= 1\n    for i in range(1, a + 1):\n        r[i] += r[i - 1]\n    dp = [sys.maxsize] * (a + 2)\n    dp[0] = 0\n    for i in range(1, a + 1):\n        dp[i] = dp[i - 1] + r[i]\n    for i in range(m):\n        x, p = umbrellas[i]\n        dp[x] = min(dp[x], dp[x - 1] + p)\n    for i in range(a - 1, -1, -1):\n        dp[i] = min(dp[i], dp[i + 1])\n    if dp[a] == sys.maxsize:\n        return -1\n    return dp[a]\n\ndef main():\n    a, n, m = map(int, input().split())\n    rain = [tuple(map(int, input().split())) for _ in range(n)]\n    umbrellas = [tuple(map(int, input().split())) for _ in range(m)]\n    print(solve(a, n, m, rain, umbrellas))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\ndef solve(a, n, m, rain, umbrellas):\n    umbrellas = sorted(umbrellas)\n    r = [0] * (a + 2)\n    for l, ri in rain:\n        r[l] += 1\n        r[ri] -= 1\n    for i in range(1, a + 1):\n        r[i] += r[i - 1]\n    dp = [0] * (a + 2)\n    for i in range(1, a + 1):\n        dp[i] = dp[i - 1] + r[i - 1]\n    for i in range(m):\n        x, p = umbrellas[i]\n        dp[x] = min(dp[x], dp[x - 1] + p)\n    for i in range(a - 1, -1, -1):\n        dp[i] = min(dp[i], dp[i + 1])\n    if dp[a + 1] == sys.maxsize:\n        return -1\n    return dp[a + 1]\n\ndef main():\n    a, n, m = map(int, input().split())\n    rain = [tuple(map(int, input().split())) for _ in range(n)]\n    umbrellas = [tuple(map(int, input().split())) for _ in range(m)]\n    print(solve(a, n, m, rain, umbrellas))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\ndef solve(a, n, m, rain, umbrellas):\n    umbrellas = sorted(umbrellas)\n    r = [0] * (a + 1)  # rain\n    for l, ri in rain:\n        r[l] += 1\n        r[ri] -= 1\n    for i in range(1, a + 1):\n        r[i] += r[i - 1]\n    dp = [0] * (a + 1)  # min cost\n    for i in range(1, a + 1):\n        dp[i] = dp[i - 1] + r[i - 1]  # cost of not using umbrella\n    for i in range(m):\n        x, p = umbrellas[i]\n        dp[x] = min(dp[x], dp[x - 1] + p)  # cost of using umbrella\n    for i in range(a - 1, -1, -1):\n        dp[i] = min(dp[i], dp[i + 1])  # cost of using umbrella\n    if dp[a] == sys.maxsize:\n        return -1\n    return dp[a]\n\ndef main():\n    a, n, m = map(int, input().split())  # a: length of road, n: number of rain, m: number of umbrellas\n    rain = [tuple(map(int, input().split())) for _ in range(n)]\n    umbrellas = [tuple(map(int, input().split())) for _ in range(m)]\n    print(solve(a, n, m, rain, umbrellas))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\n\ndef solve(a, n, m, rain, umbrellas):\n    umbrellas = sorted(umbrellas)\n    r = [0] * (a + 1)\n    for l, ri in rain:\n        r[l] += 1\n        r[ri] -= 1\n    for i in range(1, a + 1):\n        r[i] += r[i - 1]\n    dp = [0] * (a + 1)\n    for i in range(1, a):\n        dp[i] = dp[i - 1] + r[i - 1]\n    for i in range(m):\n        x, p = umbrellas[i]\n        dp[x] = min(dp[x], dp[x - 1] + p) if x > 0 else min(dp[x], p)\n    for i in range(a - 1, -1, -1):\n        dp[i] = min(dp[i], dp[i + 1]) if i < a else dp[i]\n    if dp[a] == sys.maxsize:\n        return -1\n    return dp[a]\n\ndef main():\n    a, n, m = map(int, input().split())\n    rain = [tuple(map(int, input().split())) for _ in range(n)]\n    umbrellas = [tuple(map(int, input().split())) for _ in range(m)]\n    print(solve(a, n, m, rain, umbrellas))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "import sys\n\ndef solve(a, n, m, rain, umbrellas):\n    umbrellas = sorted(umbrellas)\n    r = [0] * (a + 1)\n    for l, ri in rain:\n        r[l] += 1\n        r[ri] -= 1\n    for i in range(1, a + 1):\n        r[i] += r[i - 1]\n    dp = [0] * (a + 1)\n    for i in range(1, a + 1):\n        dp[i] = dp[i - 1] + r[i - 1]\n    for i in range(m):\n        x, p = umbrellas[i]\n        dp[x] = min(dp[x], dp[x - 1] + p)\n    for i in range(a - 1, -1, -1):\n        dp[i] = min(dp[i], dp[i + 1])\n    if dp[a] == sys.maxsize:\n        return -1\n    return dp[a]\n\ndef main():\n    a, n, m = map(int, input().split())\n    rain = [tuple(map(int, input().split())) for _ in range(n)]\n    umbrellas = [tuple(map(int, input().split())) for _ in range(m)]\n    print(solve(a, n, m, rain, umbrellas))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650439750,
  "object": "edit"
}
2022-04-20 07:29:25.621244 fix syntax errors 8 ['import sys\n\ndef solve(a, n, m, rain, umbrellas):\n    umbrellas = sorted(umbrellas)\n    r = [0] * (a + 2)\n    for l, ri in rain:\n        r[l] += 1\n        r[ri] -= 1\n    for i in range(1, a + 1):\n        r[i] += r[i - 1]\n    dp = [sys.maxsize] * (a + 2)\n    dp[0] = 0\n    for i in range(1, a + 1):\n        dp[i] = min(dp[i], dp[i - 1] + r[i - 1])\n    for i in range(m):\n        x, p = umbrellas[i]\n        dp[x] = min(dp[x], dp[x - 1] + p)\n    for i in range(a - 1, -1, -1):\n        dp[i] = min(dp[i], dp[i + 1])\n    if dp[a] == sys.maxsize:\n        return -1\n    return dp[a]\n\ndef main():\n    a, n, m = map(int, input().split())\n    rain = [tuple(map(int, input().split())) for _ in range(n)]\n    umbrellas = [tuple(map(int, input().split())) for _ in range(m)]\n    print(solve(a, n, m, rain, umbrellas))\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef solve(a, n, m, rain, umbrellas):\n    umbrellas = sorted(umbrellas)\n    r = [0] * (a + 1)\n    for l, ri in rain:\n        r[l] += 1\n        r[ri] -= 1\n    for i in range(1, a + 1):\n        r[i] += r[i - 1]\n    dp = [0] * (a + 1)\n    for i in range(1, a):\n        dp[i] = dp[i - 1] + r[i - 1]\n    for i in range(m):\n        x, p = umbrellas[i]\n        dp[x] = min(dp[x], dp[x - 1] + p) if x > 0 else dp[x]\n    for i in range(a - 1, -1, -1):\n        dp[i] = min(dp[i], dp[i + 1]) if i < a else dp[i]\n    if dp[a] == sys.maxsize:\n        return -1\n    return dp[a]\n\ndef main():\n    a, n, m = map(int, input().split())\n    rain = [tuple(map(int, input().split())) for _ in range(n)]\n    umbrellas = [tuple(map(int, input().split())) for _ in range(m)]\n    print(solve(a, n, m, rain, umbrellas))\n\nif __name__ == "__main__":\n    main()\n', '#!/usr/bin/env python3\n\nimport sys\n\ndef solve(a, n, m, rain, umbrellas):\n    umbrellas = sorted(umbrellas)\n    r = [0] * (a + 1)\n    for l, ri in rain:  # noqa\n        r[l] += 1\n        r[ri] -= 1\n    for i in range(1, a + 1):\n        r[i] += r[i - 1]\n    dp = [0] * (a + 1)\n    for i in range(1, a + 1):\n        dp[i] = dp[i - 1] + r[i - 1]\n    for i in range(m):\n        x, p = umbrellas[i]\n        dp[x] = min(dp[x], dp[x - 1] + p)\n    for i in range(a - 1, -1, -1):\n        dp[i] = min(dp[i], dp[i + 1])\n    if dp[a] == sys.maxsize:\n        return -1\n    return dp[a]\n\ndef main():\n    a, n, m = map(int, input().split())\n    rain = [tuple(map(int, input().split())) for _ in range(n)]  # noqa\n    umbrellas = [tuple(map(int, input().split())) for _ in range(m)]  # noqa\n    print(solve(a, n, m, rain, umbrellas))\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef solve(a, n, m, rain, umbrellas):\n    umbrellas = sorted(umbrellas)\n    r = [0] * (a + 2)\n    for l, ri in rain:\n        r[l] += 1\n        r[ri + 1] -= 1\n    for i in range(1, a + 1):\n        r[i] += r[i - 1]\n    dp = [sys.maxsize] * (a + 2)\n    dp[0] = 0\n    for i in range(1, a + 1):\n        dp[i] = dp[i - 1] + r[i]\n    for i in range(m):\n        x, p = umbrellas[i]\n        dp[x] = min(dp[x], dp[x - 1] + p)\n    for i in range(a - 1, -1, -1):\n        dp[i] = min(dp[i], dp[i + 1])\n    if dp[a] == sys.maxsize:\n        return -1\n    return dp[a]\n\ndef main():\n    a, n, m = map(int, input().split())\n    rain = [tuple(map(int, input().split())) for _ in range(n)]\n    umbrellas = [tuple(map(int, input().split())) for _ in range(m)]\n    print(solve(a, n, m, rain, umbrellas))\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef solve(a, n, m, rain, umbrellas):\n    umbrellas = sorted(umbrellas)\n    r = [0] * (a + 2)\n    for l, ri in rain:\n        r[l] += 1\n        r[ri] -= 1\n    for i in range(1, a + 1):\n        r[i] += r[i - 1]\n    dp = [0] * (a + 2)\n    for i in range(1, a + 1):\n        dp[i] = dp[i - 1] + r[i - 1]\n    for i in range(m):\n        x, p = umbrellas[i]\n        dp[x] = min(dp[x], dp[x - 1] + p)\n    for i in range(a - 1, -1, -1):\n        dp[i] = min(dp[i], dp[i + 1])\n    if dp[a + 1] == sys.maxsize:\n        return -1\n    return dp[a + 1]\n\ndef main():\n    a, n, m = map(int, input().split())\n    rain = [tuple(map(int, input().split())) for _ in range(n)]\n    umbrellas = [tuple(map(int, input().split())) for _ in range(m)]\n    print(solve(a, n, m, rain, umbrellas))\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef solve(a, n, m, rain, umbrellas):\n    umbrellas = sorted(umbrellas)\n    r = [0] * (a + 1)  # rain\n    for l, ri in rain:\n        r[l] += 1\n        r[ri] -= 1\n    for i in range(1, a + 1):\n        r[i] += r[i - 1]\n    dp = [0] * (a + 1)  # min cost\n    for i in range(1, a + 1):\n        dp[i] = dp[i - 1] + r[i - 1]  # cost of not using umbrella\n    for i in range(m):\n        x, p = umbrellas[i]\n        dp[x] = min(dp[x], dp[x - 1] + p)  # cost of using umbrella\n    for i in range(a - 1, -1, -1):\n        dp[i] = min(dp[i], dp[i + 1])  # cost of using umbrella\n    if dp[a] == sys.maxsize:\n        return -1\n    return dp[a]\n\ndef main():\n    a, n, m = map(int, input().split())  # a: length of road, n: number of rain, m: number of umbrellas\n    rain = [tuple(map(int, input().split())) for _ in range(n)]\n    umbrellas = [tuple(map(int, input().split())) for _ in range(m)]\n    print(solve(a, n, m, rain, umbrellas))\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef solve(a, n, m, rain, umbrellas):\n    umbrellas = sorted(umbrellas)\n    r = [0] * (a + 1)\n    for l, ri in rain:\n        r[l] += 1\n        r[ri] -= 1\n    for i in range(1, a + 1):\n        r[i] += r[i - 1]\n    dp = [0] * (a + 1)\n    for i in range(1, a):\n        dp[i] = dp[i - 1] + r[i - 1]\n    for i in range(m):\n        x, p = umbrellas[i]\n        dp[x] = min(dp[x], dp[x - 1] + p) if x > 0 else min(dp[x], p)\n    for i in range(a - 1, -1, -1):\n        dp[i] = min(dp[i], dp[i + 1]) if i < a else dp[i]\n    if dp[a] == sys.maxsize:\n        return -1\n    return dp[a]\n\ndef main():\n    a, n, m = map(int, input().split())\n    rain = [tuple(map(int, input().split())) for _ in range(n)]\n    umbrellas = [tuple(map(int, input().split())) for _ in range(m)]\n    print(solve(a, n, m, rain, umbrellas))\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef solve(a, n, m, rain, umbrellas):\n    umbrellas = sorted(umbrellas)\n    r = [0] * (a + 1)\n    for l, ri in rain:\n        r[l] += 1\n        r[ri] -= 1\n    for i in range(1, a + 1):\n        r[i] += r[i - 1]\n    dp = [0] * (a + 1)\n    for i in range(1, a + 1):\n        dp[i] = dp[i - 1] + r[i - 1]\n    for i in range(m):\n        x, p = umbrellas[i]\n        dp[x] = min(dp[x], dp[x - 1] + p)\n    for i in range(a - 1, -1, -1):\n        dp[i] = min(dp[i], dp[i + 1])\n    if dp[a] == sys.maxsize:\n        return -1\n    return dp[a]\n\ndef main():\n    a, n, m = map(int, input().split())\n    rain = [tuple(map(int, input().split())) for _ in range(n)]\n    umbrellas = [tuple(map(int, input().split())) for _ in range(m)]\n    print(solve(a, n, m, rain, umbrellas))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 07:29:25.621501 size on output set 8
2022-04-20 07:29:25.621529 num operations 1
2022-04-20 07:29:25.621539 size on input set 1
2022-04-20 07:29:25.621773 using api key sourya
2022-04-20 07:29:48.884808 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Solution\n\na, n, m = map(int, input().split())\n\nl = [0] * n\nr = [0] * n\n\nfor i in range(n):\n    l[i], r[i] = map(int, input().split())\n\nx = [0] * m\np = [0] * m\n\nfor i in range(m):\n    x[i], p[i] = map(int, input().split())\n\ndp = [0] * (a + 1)\n\nfor i in range(a):\n    dp[i + 1] = dp[i] + 1\n    for j in range(m):\n        if x[j] <= i:\n            dp[i + 1] = min(dp[i + 1], dp[i] + p[j])\n\nfor i in range(n):\n    if dp[l[i]] == dp[r[i]]:\n        print(-1)\n        exit()\n\nprint(dp[a])\n"
    },
    {
      "index": 1,
      "text": "\n# Solution\n\na, n, m = map(int, input().split())\n\nleft = [0] * n\nright = [0] * n\n\nfor i in range(n):\n    left[i], right[i] = map(int, input().split())\n\nx_list = [0] * m\np_list = [0] * m\n\nfor i in range(m):\n    x_list[i], p_list[i] = map(int, input().split())\n\ndp_list = [0] * (a + 1)\n\nfor i in range(a):\n    dp_list[i + 1] = dp_list[i] + 1\n    for j in range(m):\n        if x_list[j] <= i:\n            dp_list[i + 1] = min(dp_list[i + 1], dp_list[i] + p_list[j])\n\nfor i in range(n):\n    if dp_list[left[i]] == dp_list[right[i]]:\n        print(-1)\n        exit()\n\nprint(dp[a])\n"
    },
    {
      "index": 2,
      "text": "\n# Solution\na, n, m = map(int, input().split())\n\nl = [0] * n\nr = [0] * n\n\nfor i in range(n):\n    l[i], r[i] = map(int, input().split())\n\nx = [0] * m\np = [0] * m\n\nfor i in range(m):\n    x[i], p[i] = map(int, input().split())\n\ndp = [0] * (a + 1)\n\nfor i in range(a):\n    dp[i + 1] = dp[i] + 1\n    for j in range(m):\n        if x[j] <= i:\n            dp[i + 1] = min(dp[i + 1], dp[i] + p[j])\n\nfor i in range(n):\n    if dp[l[i]] == dp[r[i]]:\n        print(-1)\n        exit()\n\nprint(dp[a])\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n# Solution\n\na, n, m = map(int, input().split())\n\nl = [0] * n\nr = [0] * n\n\nfor i in range(n):\n    l[i], r[i] = map(int, input().split())\n\nx = [0] * m\np = [0] * m\n\nfor i in range(m):\n    x[i], p[i] = map(int, input().split())\n\ndp = [0] * (a + 1)\n\nfor i in range(a):\n    dp[i + 1] = dp[i] + 1\n    for j in range(m):\n        if x[j] <= i:\n            dp[i + 1] = min(dp[i + 1], dp[i] + p[j])\n\nfor i in range(n):\n    if dp[l[i]] == dp[r[i]]:\n        print(-1)\n        sys.exit()\n\nprint(dp[a])\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n# Solution\n\na, n, m = map(int, input().split())\n\nl = [0] * n\nr = [0] * n\n\nfor i in range(n):\n    l[i], r[i] = map(int, input().split())\n\nx = [0] * m\np = [0] * m\n\nfor i in range(m):\n    x[i], p[i] = map(int, input().split())\n\ndp = [0] * (a + 1)\n\nfor i in range(a):\n    dp[i + 1] = dp[i] + 1\n    for j in range(m):\n        if x[j] <= i:\n            dp[i + 1] = min(dp[i + 1], dp[i] + p[j])\n\nfor i in range(n):\n    if dp[l[i]] == dp[r[i]]:\n        print(-1)\n        sys.exit()\n\nprint(dp[a])\n"
    },
    {
      "index": 5,
      "text": "\n# Solution\n\na, n, m = map(int, input().split())\n\nl = [0] * n\nr = [0] * n\n\nfor i in range(n):\n    l[i], r[i] = map(int, input().split())\n\nx = [0] * m\np = [0] * m\n\nfor i in range(m):\n    x[i], p[i] = map(int, input().split())\n\ndp = [0] * (a + 1)\n\nfor i in range(a):\n    dp[i + 1] = dp[i] + 1\n    for j in range(m):\n        if x[j] <= i:\n            dp[i + 1] = min(dp[i + 1], dp[i] + p[j])\n\nfor i in range(n):\n    if dp[l[i] - 1] == dp[r[i] - 1]:\n        print(-1)\n        exit()\n\nprint(dp[a])\n"
    },
    {
      "index": 6,
      "text": "\n# Solution\n\na, n, m = map(int, input().split())\n\nl = [0] * n\nr = [0] * n\n\nfor i in range(n):\n    l[i], r[i] = map(int, input().split())\n\nx = [0] * m\np = [0] * m\n\nfor i in range(m):\n    x[i], p[i] = map(int, input().split())\n\ndp = [0] * (a + 1)\n\nfor i in range(a):\n    dp[i + 1] = dp[i] + 1\n    for j in range(m):\n        if x[j] <= i:\n            dp[i + 1] = min(dp[i + 1], dp[i] + p[j])\n\nfor i in range(n):\n    if dp[l[i]] == dp[r[i]]:\n        print(-1)\n        exit()\n\nprint(dp[a])\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n# Solution\n\na, n, m = map(int, input().split())\n\nl = [0] * n\nr = [0] * n\n\nfor i in range(n):\n    l[i], r[i] = map(int, input().split())\n\nx = [0] * m\np = [0] * m\n\nfor i in range(m):\n    x[i], p[i] = map(int, input().split())\n\ndp = [0] * (a + 1)\n\nfor i in range(a):\n    dp[i + 1] = dp[i] + 1\n    for j in range(m):\n        if x[j] <= i:\n            dp[i + 1] = min(dp[i + 1], dp[i] + p[j])\n\nfor i in range(n):\n    if dp[l[i]] == dp[r[i]]:\n        print(-1)\n        sys.exit()\n\nprint(dp[a])\n"
    }
  ],
  "created": 1650439765,
  "object": "edit"
}
2022-04-20 07:29:48.885215 fix syntax errors 8 ['\n# Solution\n\na, n, m = map(int, input().split())\n\nl = [0] * n\nr = [0] * n\n\nfor i in range(n):\n    l[i], r[i] = map(int, input().split())\n\nx = [0] * m\np = [0] * m\n\nfor i in range(m):\n    x[i], p[i] = map(int, input().split())\n\ndp = [0] * (a + 1)\n\nfor i in range(a):\n    dp[i + 1] = dp[i] + 1\n    for j in range(m):\n        if x[j] <= i:\n            dp[i + 1] = min(dp[i + 1], dp[i] + p[j])\n\nfor i in range(n):\n    if dp[l[i]] == dp[r[i]]:\n        print(-1)\n        exit()\n\nprint(dp[a])\n', '\n# Solution\n\na, n, m = map(int, input().split())\n\nleft = [0] * n\nright = [0] * n\n\nfor i in range(n):\n    left[i], right[i] = map(int, input().split())\n\nx_list = [0] * m\np_list = [0] * m\n\nfor i in range(m):\n    x_list[i], p_list[i] = map(int, input().split())\n\ndp_list = [0] * (a + 1)\n\nfor i in range(a):\n    dp_list[i + 1] = dp_list[i] + 1\n    for j in range(m):\n        if x_list[j] <= i:\n            dp_list[i + 1] = min(dp_list[i + 1], dp_list[i] + p_list[j])\n\nfor i in range(n):\n    if dp_list[left[i]] == dp_list[right[i]]:\n        print(-1)\n        exit()\n\nprint(dp[a])\n', '\n# Solution\na, n, m = map(int, input().split())\n\nl = [0] * n\nr = [0] * n\n\nfor i in range(n):\n    l[i], r[i] = map(int, input().split())\n\nx = [0] * m\np = [0] * m\n\nfor i in range(m):\n    x[i], p[i] = map(int, input().split())\n\ndp = [0] * (a + 1)\n\nfor i in range(a):\n    dp[i + 1] = dp[i] + 1\n    for j in range(m):\n        if x[j] <= i:\n            dp[i + 1] = min(dp[i + 1], dp[i] + p[j])\n\nfor i in range(n):\n    if dp[l[i]] == dp[r[i]]:\n        print(-1)\n        exit()\n\nprint(dp[a])\n', '\nimport sys\n# Solution\n\na, n, m = map(int, input().split())\n\nl = [0] * n\nr = [0] * n\n\nfor i in range(n):\n    l[i], r[i] = map(int, input().split())\n\nx = [0] * m\np = [0] * m\n\nfor i in range(m):\n    x[i], p[i] = map(int, input().split())\n\ndp = [0] * (a + 1)\n\nfor i in range(a):\n    dp[i + 1] = dp[i] + 1\n    for j in range(m):\n        if x[j] <= i:\n            dp[i + 1] = min(dp[i + 1], dp[i] + p[j])\n\nfor i in range(n):\n    if dp[l[i]] == dp[r[i]]:\n        print(-1)\n        sys.exit()\n\nprint(dp[a])\n', '\nimport sys\n# Solution\n\na, n, m = map(int, input().split())\n\nl = [0] * n\nr = [0] * n\n\nfor i in range(n):\n    l[i], r[i] = map(int, input().split())\n\nx = [0] * m\np = [0] * m\n\nfor i in range(m):\n    x[i], p[i] = map(int, input().split())\n\ndp = [0] * (a + 1)\n\nfor i in range(a):\n    dp[i + 1] = dp[i] + 1\n    for j in range(m):\n        if x[j] <= i:\n            dp[i + 1] = min(dp[i + 1], dp[i] + p[j])\n\nfor i in range(n):\n    if dp[l[i]] == dp[r[i]]:\n        print(-1)\n        sys.exit()\n\nprint(dp[a])\n', '\n# Solution\n\na, n, m = map(int, input().split())\n\nl = [0] * n\nr = [0] * n\n\nfor i in range(n):\n    l[i], r[i] = map(int, input().split())\n\nx = [0] * m\np = [0] * m\n\nfor i in range(m):\n    x[i], p[i] = map(int, input().split())\n\ndp = [0] * (a + 1)\n\nfor i in range(a):\n    dp[i + 1] = dp[i] + 1\n    for j in range(m):\n        if x[j] <= i:\n            dp[i + 1] = min(dp[i + 1], dp[i] + p[j])\n\nfor i in range(n):\n    if dp[l[i] - 1] == dp[r[i] - 1]:\n        print(-1)\n        exit()\n\nprint(dp[a])\n', '\n# Solution\n\na, n, m = map(int, input().split())\n\nl = [0] * n\nr = [0] * n\n\nfor i in range(n):\n    l[i], r[i] = map(int, input().split())\n\nx = [0] * m\np = [0] * m\n\nfor i in range(m):\n    x[i], p[i] = map(int, input().split())\n\ndp = [0] * (a + 1)\n\nfor i in range(a):\n    dp[i + 1] = dp[i] + 1\n    for j in range(m):\n        if x[j] <= i:\n            dp[i + 1] = min(dp[i + 1], dp[i] + p[j])\n\nfor i in range(n):\n    if dp[l[i]] == dp[r[i]]:\n        print(-1)\n        exit()\n\nprint(dp[a])\n', '\nimport sys\n# Solution\n\na, n, m = map(int, input().split())\n\nl = [0] * n\nr = [0] * n\n\nfor i in range(n):\n    l[i], r[i] = map(int, input().split())\n\nx = [0] * m\np = [0] * m\n\nfor i in range(m):\n    x[i], p[i] = map(int, input().split())\n\ndp = [0] * (a + 1)\n\nfor i in range(a):\n    dp[i + 1] = dp[i] + 1\n    for j in range(m):\n        if x[j] <= i:\n            dp[i + 1] = min(dp[i + 1], dp[i] + p[j])\n\nfor i in range(n):\n    if dp[l[i]] == dp[r[i]]:\n        print(-1)\n        sys.exit()\n\nprint(dp[a])\n']
2022-04-20 07:29:48.885395 size on output set 5
