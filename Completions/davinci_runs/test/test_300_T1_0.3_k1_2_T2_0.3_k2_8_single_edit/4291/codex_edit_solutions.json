["\n# input\nN, Q = map(int, input().split())\nS = input()\n\n# initialize\ncount = 0\nans = []\n\n# count the number of ACs\nfor i in range(N-1):\n    if S[i] == 'A' and S[i+1] == 'C':\n        count += 1\n\n# append the number of ACs to the list\nans.append(count)\n\n# count the number of ACs in the substring\nfor i in range(Q):\n    l, r = map(int, input().split())\n    if S[l-1] == 'A' and S[l] == 'C' and l != 1:\n        ans.append(count - 1)\n    else:\n        ans.append(count)\n\n# output\nfor i in range(Q):\n    print(ans[i])\n", "\nn, q = map(int, input().split())\ns = input()\n\n# create a list of the indices of where AC occurs\nac_indices = []\nfor i in range(n-1):\n    if s[i] == 'A' and s[i+1] == 'C':\n        ac_indices.append(i)\n\n# for each query, find the number of ACs in the substring\nfor i in range(q):\n    l, r = map(int, input().split())\n    count = 0\n    for j in ac_indices:\n        if l <= j+1 <= r:\n            count += 1\n    print(count)\n", "\nn, q = map(int, input().split())\ns = input()\n\n# create a list of the number of ACs in each substring\nac_counts = []\ncount = 0\nfor i in range(n):\n    if s[i] == 'A' and i != n-1 and s[i+1] == 'C':\n        count += 1\n    ac_counts.append(count)\n\n# for each query, find the number of ACs in the substring by subtracting the number of ACs in the previous substring\nfor i in range(q):\n    l, r = map(int, input().split())\n    print(ac_counts[r-1] - ac_counts[l-1])\n", "import sys\ninput = sys.stdin.readline\n\nn, q = map(int, input().split())\ns = input()\n\n# create a list of the indices of where AC occurs\nac_indices = []\nfor i in range(n - 1):\n    if s[i] == 'A' and s[i + 1] == 'C':\n        ac_indices.append(i)\n\n# for each query, find the number of ACs in the substring\nfor i in range(q):\n    l, r = map(int, input().split())\n    count = 0\n    for j in ac_indices:\n        if l <= j + 1 <= r:\n            count += 1\n    print(count)\n", "# https://atcoder.jp/contests/abc086/tasks/abc086_b\n\nn, q = map(int, input().split())\ns = input()\n\n# create a list of the indices of where AC occurs\nac_indices = []\nfor i in range(n-1):\n    if s[i] == 'A' and s[i+1] == 'C':\n        ac_indices.append(i)\n\n# for each query, find the number of ACs in the substring\nfor i in range(q):\n    l, r = map(int, input().split())\n    count = 0\n    for j in ac_indices:\n        if l <= j+1 <= r:\n            count += 1\n    print(count)\n", "\n# input\nN, Q = map(int, input().split())\nS = input()\n\n# initialize\ncount = 0\nans = []\n\n# count the number of ACs\nfor i in range(N-1):\n    if S[i] == 'A' and S[i+1] == 'C':\n        count += 1\n\n# append the number of ACs to the list\nans.append(count)\n\n# count the number of ACs in the substring\nfor i in range(Q):\n    l, r = map(int, input().split())\n    if S[l-1] == 'A' and S[l] == 'C' and S[r-2] == 'A' and S[r-1] == 'C':\n        ans.append(count - 2)\n    elif S[l-1] == 'A' and S[l] == 'C':\n        ans.append(count - 1 + (r-l))\n    elif S[r-2] == 'A' and S[r-1] == 'C':\n        ans.append(count - 1)\n    else:\n        ans.append(count + (r-l))\n\n# output\nfor i in range(Q):\n    print(ans[i])\n", "\n# input\nN, Q = map(int, input().split())\nS = input()\n\n# initialize\ncount = 0\nans = []\n\n# count the number of ACs\nfor i in range(N-1):\n    if S[i] == 'A' and S[i+1] == 'C':\n        count += 1\n\n# append the number of ACs to the list\nans.append(count)\n\n# count the number of ACs in the substring\nfor i in range(Q):\n    l, r = map(int, input().split())\n    if S[l-1] == 'A' and S[l] == 'C':\n        ans.append(count - 1)\n    else:\n        ans.append(count)\n\n# output\nfor i in range(Q):\n    print(ans[i])\n", "\n# input\nN, Q = map(int, input().split())\nS = input()\n\n# initialize\ncount = 0\nans = []\n\n# count the number of ACs\nfor i in range(N-1):\n    if S[i] == 'A' and S[i+1] == 'C':\n        count += 1\n\n# append the number of ACs to the list\nans.append(count)\n\n# count the number of ACs in the substring\nfor i in range(Q-1):\n    l, r = map(int, input().split())\n    if S[l-1] == 'A' and S[l] == 'C':\n        ans.append(count - 1)\n    else:\n        ans.append(count)\n\n# output\nfor i in range(Q-1):\n    print(ans[i])\n", "\n\nn, q = map(int, input().split())\ns = input()\n\n# # create a list of the indices of where AC occurs\n# ac_indices = []\n# for i in range(n-1):\n#     if s[i] == 'A' and s[i+1] == 'C':\n#         ac_indices.append(i)\n\n# # for each query, find the number of ACs in the substring\n# for i in range(q):\n#     l, r = map(int, input().split())\n#     count = 0\n#     for j in ac_indices:\n#         if l <= j+1 <= r:\n#             count += 1\n#     print(count)\n\n# create a list of the number of ACs in each substring\nac_count = [0] * (n+1)\nfor i in range(n):\n    if s[i:i+2] == 'AC':\n        ac_count[i+1] = ac_count[i] + 1\n    else:\n        ac_count[i+1] = ac_count[i]\n\n# for each query, print the difference in AC counts\nfor _ in range(q):\n    l, r = map(int, input().split())\n    print(ac_count[r-1] - ac_count[l-1])\n", "\nn, q = map(int, input().split())\ns = input()\n\n# create a list of the number of ACs in the substring\nac_count = [0] * n\nfor i in range(1, n):\n    if s[i-1] == 'A' and s[i] == 'C':\n        ac_count[i] = ac_count[i-1] + 1\n    else:\n        ac_count[i] = ac_count[i-1]\n\n# for each query, find the number of ACs in the substring by subtracting the number of ACs in the substring before the query\nfor i in range(q):\n    l, r = map(int, input().split())\n    print(ac_count[r-1] - ac_count[l-1])\n", "\n# input\nN, Q = map(int, input().split())\nS = input()\n\n# initialize\ncount = 0\nans = []\n\n# count the number of ACs\nfor i in range(N - 1):\n    if S[i] == 'A' and S[i+1] == 'C':\n        count += 1\n\n# append the number of ACs to the list\nans.append(count)\n\n# count the number of ACs in the substring\nfor i in range(Q):\n    l, r = map(int, input().split())\n    if S[l-1] == 'A' and S[l] == 'C':\n        ans.append(count - 1)\n    else:\n        ans.append(count)\n\n# output\nfor i in range(Q):\n    print(ans[i])\n"]