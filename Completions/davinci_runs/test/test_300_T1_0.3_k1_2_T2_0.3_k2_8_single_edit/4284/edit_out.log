2022-04-20 07:27:31.095688 num operations 1
2022-04-20 07:27:31.095713 size on input set 1
2022-04-20 07:27:31.095937 using api key sourya
2022-04-20 07:27:44.363960 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# SOLUTION\n\nimport sys\n\nclass Query:\n    def __init__(self):\n        self.k = 0\n        self.n = 0\n        self.a = 0\n        self.b = 0\n\ndef read_queries():\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        query = Query()\n        query.k, query.n, query.a, query.b = map(int, input().split())\n        queries.append(query)\n    return queries\n\ndef write_responses(result):\n    print('\\n'.join(map(str, result)))\n\ndef solve_query(query):\n    k = query.k\n    n = query.n\n    a = query.a\n    b = query.b\n    if k < n * b:\n        return -1\n    if k < n * a:\n        return 0\n    k -= n * a\n    return n - k // (a - b)\n\ndef solve(queries):\n    result = []\n    for query in queries:\n        result.append(solve_query(query))\n    return result\n\nif __name__ == '__main__':\n    write_responses(solve(read_queries()))\n"
    },
    {
      "index": 1,
      "text": "\n"
    },
    {
      "index": 2,
      "text": "\n# SOLUTION\n\nimport sys\n\nclass Query:\n    def __init__(self):\n        self.k = 0\n        self.n = 0\n        self.a = 0\n        self.b = 0\n\ndef read_queries():\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        query = Query()\n        query.k, query.n, query.a, query.b = map(int, input().split())\n        queries.append(query)\n    return queries\n\ndef write_responses(result):\n    print('\\n'.join(map(str, result)))\n\ndef solve_query(query):\n    k = query.k\n    n = query.n\n    a = query.a\n    b = query.b\n    if k < n*b:\n        return -1\n    if k < n*a:\n        return 0\n    k -= n*a\n    return n - k//(a-b)\n\ndef solve(queries):\n    result = []\n    for query in queries:\n        result.append(solve_query(query))\n    return result\n\nif __name__ == '__main__':\n    write_responses(solve(read_queries()))\n"
    },
    {
      "index": 3,
      "text": "\n\n\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Tue Aug  4 21:06:32 2020\n\n@author: abhijithneilabraham\n\"\"\"\n# SOLUTION\n\nimport sys\n\nclass Query:\n    def __init__(self):\n        self.k = 0\n        self.n = 0\n        self.a = 0\n        self.b = 0\n\ndef read_queries():\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        query = Query()\n        query.k, query.n, query.a, query.b = map(int, input().split())\n        queries.append(query)\n    return queries\n\ndef write_responses(result):\n    print('\\n'.join(map(str, result)))\n\ndef solve_query(query):\n    k = query.k\n    n = query.n\n    a = query.a\n    b = query.b\n    if k < n*b:\n        return -1\n    if k < n*a:\n        return 0\n    k -= n*a\n    return n - k//(a-b)\n\ndef solve(queries):\n    result = []\n    for query in queries:\n        result.append(solve_query(query))\n    return result\n\nif __name__ == '__main__':\n    write_responses(solve(read_queries()))\n"
    },
    {
      "index": 4,
      "text": "\n"
    },
    {
      "index": 5,
      "text": "\n# SOLUTION\n\nimport sys\n\nclass Query:\n    def __init__(self):\n        self.k = 0\n        self.n = 0\n        self.a = 0\n        self.b = 0\n\ndef read_queries():\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        query = Query()\n        query.k, query.n, query.a, query.b = map(int, input().split())\n        queries.append(query)\n    return queries\n\ndef write_responses(result):\n    print('\\n'.join(map(str, result)))\n\ndef solve_query(query):\n    k = query.k\n    n = query.n\n    a = query.a\n    b = query.b\n    if k < n*b:\n        return -1\n    if k < n*a:\n        return 0\n    k -= n*a\n    return n - k//(a-b)\n\ndef solve(queries):\n    result = []\n    for query in queries:\n        result.append(solve_query(query))\n    return result\n\nif __name__ == '__main__':\n    write_responses(solve(read_queries()))\n"
    },
    {
      "index": 6,
      "text": "\n# SOLUTION\nimport sys\n\nclass Query:\n    def __init__(self):\n        self.k = 0\n        self.n = 0\n        self.a = 0\n        self.b = 0\ndef read_queries():\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        query = Query()\n        query.k, query.n, query.a, query.b = map(int, input().split())\n        queries.append(query)\n    return queries\ndef write_responses(result):\n    print('\\n'.join(map(str, result)))\ndef solve_query(query):\n    k = query.k\n    n = query.n\n    a = query.a\n    b = query.b\n    if k < n*b:\n        return -1\n    if k < n*a:\n        return 0\n    k -= n*a\n    return n - k//(a-b)\n\ndef solve(queries):\n    result = []\n    for query in queries:\n        result.append(solve_query(query))\n    return result\n\nif __name__ == '__main__':\n    write_responses(solve(read_queries()))\n"
    },
    {
      "index": 7,
      "text": "\n\n# SOLUTION \n\nimport sys\n\nclass Query:\n    def __init__(self):\n        self.k = 0\n        self.n = 0\n        self.a = 0\n        self.b = 0\n\ndef read_queries():\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        query = Query()\n        query.k, query.n, query.a, query.b = map(int, input().split())\n        queries.append(query)\n    return queries\n\ndef write_responses(result):\n    print('\\n'.join(map(str, result)))\n\ndef solve_query(query):\n    k = query.k\n    n = query.n\n    a = query.a\n    b = query.b\n    if k < n*b:\n        return -1\n    if k < n*a:\n        return 0\n    k -= n*a\n    return n - k//(a-b)\n\ndef solve(queries):\n    result = []\n    for query in queries:\n        result.append(solve_query(query))\n    return result\n\nif __name__ == '__main__':\n    write_responses(solve(read_queries()))\n"
    }
  ],
  "created": 1650439651,
  "object": "edit"
}
2022-04-20 07:27:44.364382 fix syntax errors 8 ["\n# SOLUTION\n\nimport sys\n\nclass Query:\n    def __init__(self):\n        self.k = 0\n        self.n = 0\n        self.a = 0\n        self.b = 0\n\ndef read_queries():\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        query = Query()\n        query.k, query.n, query.a, query.b = map(int, input().split())\n        queries.append(query)\n    return queries\n\ndef write_responses(result):\n    print('\\n'.join(map(str, result)))\n\ndef solve_query(query):\n    k = query.k\n    n = query.n\n    a = query.a\n    b = query.b\n    if k < n * b:\n        return -1\n    if k < n * a:\n        return 0\n    k -= n * a\n    return n - k // (a - b)\n\ndef solve(queries):\n    result = []\n    for query in queries:\n        result.append(solve_query(query))\n    return result\n\nif __name__ == '__main__':\n    write_responses(solve(read_queries()))\n", '\n', "\n# SOLUTION\n\nimport sys\n\nclass Query:\n    def __init__(self):\n        self.k = 0\n        self.n = 0\n        self.a = 0\n        self.b = 0\n\ndef read_queries():\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        query = Query()\n        query.k, query.n, query.a, query.b = map(int, input().split())\n        queries.append(query)\n    return queries\n\ndef write_responses(result):\n    print('\\n'.join(map(str, result)))\n\ndef solve_query(query):\n    k = query.k\n    n = query.n\n    a = query.a\n    b = query.b\n    if k < n*b:\n        return -1\n    if k < n*a:\n        return 0\n    k -= n*a\n    return n - k//(a-b)\n\ndef solve(queries):\n    result = []\n    for query in queries:\n        result.append(solve_query(query))\n    return result\n\nif __name__ == '__main__':\n    write_responses(solve(read_queries()))\n", '\n\n\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n"""\nCreated on Tue Aug  4 21:06:32 2020\n\n@author: abhijithneilabraham\n"""\n# SOLUTION\n\nimport sys\n\nclass Query:\n    def __init__(self):\n        self.k = 0\n        self.n = 0\n        self.a = 0\n        self.b = 0\n\ndef read_queries():\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        query = Query()\n        query.k, query.n, query.a, query.b = map(int, input().split())\n        queries.append(query)\n    return queries\n\ndef write_responses(result):\n    print(\'\\n\'.join(map(str, result)))\n\ndef solve_query(query):\n    k = query.k\n    n = query.n\n    a = query.a\n    b = query.b\n    if k < n*b:\n        return -1\n    if k < n*a:\n        return 0\n    k -= n*a\n    return n - k//(a-b)\n\ndef solve(queries):\n    result = []\n    for query in queries:\n        result.append(solve_query(query))\n    return result\n\nif __name__ == \'__main__\':\n    write_responses(solve(read_queries()))\n', '\n', "\n# SOLUTION\n\nimport sys\n\nclass Query:\n    def __init__(self):\n        self.k = 0\n        self.n = 0\n        self.a = 0\n        self.b = 0\n\ndef read_queries():\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        query = Query()\n        query.k, query.n, query.a, query.b = map(int, input().split())\n        queries.append(query)\n    return queries\n\ndef write_responses(result):\n    print('\\n'.join(map(str, result)))\n\ndef solve_query(query):\n    k = query.k\n    n = query.n\n    a = query.a\n    b = query.b\n    if k < n*b:\n        return -1\n    if k < n*a:\n        return 0\n    k -= n*a\n    return n - k//(a-b)\n\ndef solve(queries):\n    result = []\n    for query in queries:\n        result.append(solve_query(query))\n    return result\n\nif __name__ == '__main__':\n    write_responses(solve(read_queries()))\n", "\n# SOLUTION\nimport sys\n\nclass Query:\n    def __init__(self):\n        self.k = 0\n        self.n = 0\n        self.a = 0\n        self.b = 0\ndef read_queries():\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        query = Query()\n        query.k, query.n, query.a, query.b = map(int, input().split())\n        queries.append(query)\n    return queries\ndef write_responses(result):\n    print('\\n'.join(map(str, result)))\ndef solve_query(query):\n    k = query.k\n    n = query.n\n    a = query.a\n    b = query.b\n    if k < n*b:\n        return -1\n    if k < n*a:\n        return 0\n    k -= n*a\n    return n - k//(a-b)\n\ndef solve(queries):\n    result = []\n    for query in queries:\n        result.append(solve_query(query))\n    return result\n\nif __name__ == '__main__':\n    write_responses(solve(read_queries()))\n", "\n\n# SOLUTION \n\nimport sys\n\nclass Query:\n    def __init__(self):\n        self.k = 0\n        self.n = 0\n        self.a = 0\n        self.b = 0\n\ndef read_queries():\n    q = int(input())\n    queries = []\n    for _ in range(q):\n        query = Query()\n        query.k, query.n, query.a, query.b = map(int, input().split())\n        queries.append(query)\n    return queries\n\ndef write_responses(result):\n    print('\\n'.join(map(str, result)))\n\ndef solve_query(query):\n    k = query.k\n    n = query.n\n    a = query.a\n    b = query.b\n    if k < n*b:\n        return -1\n    if k < n*a:\n        return 0\n    k -= n*a\n    return n - k//(a-b)\n\ndef solve(queries):\n    result = []\n    for query in queries:\n        result.append(solve_query(query))\n    return result\n\nif __name__ == '__main__':\n    write_responses(solve(read_queries()))\n"]
2022-04-20 07:27:44.366111 size on output set 6
2022-04-20 07:27:44.366144 num operations 1
2022-04-20 07:27:44.366155 size on input set 1
2022-04-20 07:27:44.366412 using api key jaanu
2022-04-20 07:27:57.894021 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef max_play_turns(k, n, a, b):\n    if k <= b:\n        return -1\n    if a == b:\n        return n\n    if k % a < k % b:\n        return n - (k % a)\n    return n - (k % b)\n\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        print(max_play_turns(k, n, a, b))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef max_play_turns(k, n, a, b):\n    if k <= b:\n        return -1\n    if a == b:\n        return n\n    if k % a == 0:\n        return n - 1\n    if k % b == 0:\n        return n - 1\n    if k % a < k % b:\n        return n - k % a\n    return n - k % b\n\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        print(max_play_turns(k, n, a, b))\n"
    },
    {
      "index": 2,
      "text": "\n\ndef max_play_turns(k, n, a, b):\n    if k <= b:\n        return -1\n    if a == b:\n        return n\n    if k % a == 0:\n        return n - 1\n    if k % b == 0:\n        return n - 1\n    if k % a < k % b:\n        return n - (k % a) + 1\n    return n - (k % b) + 1\n\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        print(max_play_turns(k, n, a, b))\n"
    },
    {
      "index": 3,
      "text": "\n\ndef max_play_turns(k, n, a, b):\n    if k <= b:\n        return -1\n    if a == b:\n        return n\n    if k % a == 0:\n        return n - 1\n    if k % b == 0:\n        return n - 1\n    if k % a < k % b:\n        return n - (k % a) + 1\n    return n - (k % b) + 1\n\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        print(max_play_turns(k, n, a, b))\n"
    },
    {
      "index": 4,
      "text": "\n\ndef max_play_turns(k, n, a, b):\n    if k < b:\n        return -1\n    if a == b:\n        return n\n    if k % a < k % b:\n        return n - (k % a)\n    return n - (k % b)\n\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        print(max_play_turns(k, n, a, b))\n"
    },
    {
      "index": 5,
      "text": "\n\ndef max_play_turns(k, n, a, b):\n    if k <= b:\n        return -1\n    if a == b:\n        return n\n    if k % a == 0:\n        return n - 1\n    if k % b == 0:\n        return n - 1\n    if k % a < k % b:\n        return n - (k // a)\n    return n - (k // b)\n\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        print(max_play_turns(k, n, a, b))\n"
    },
    {
      "index": 6,
      "text": "\n\ndef max_play_turns(k, n, a, b, m):\n    if m == 0:\n        if k <= b:\n            return -1\n        if a == b:\n            return n\n        if k % a == 0:\n            return n - 1\n        if k % b == 0:\n            return n - 1\n        if k % a < k % b:\n            return n - (k % a)\n        return n - (k % b)\n    else:\n        if k <= b:\n            return -1\n        if a == b:\n            return n\n        if k % a == 0:\n            return n - 1\n        if k % b == 0:\n            return n - 1\n        if k % a < k % b:\n            return n - (k % a)\n        return n - (k % b)\n\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b, m = map(int, input().split())\n        print(max_play_turns(k, n, a, b, m))\n"
    },
    {
      "index": 7,
      "text": "\n\ndef max_play_turns(k, n, a, b):\n    if k <= b:\n        return -1\n    if a == b:\n        return n\n    if k % a == 0:\n        return n - 1\n    if k % b == 0:\n        return n - 1\n    if k % a < k % b:\n        return n - (k % a) + 1\n    return n - (k % b) + 1\n\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        print(max_play_turns(k, n, a, b))\n"
    }
  ],
  "created": 1650439664,
  "object": "edit"
}
2022-04-20 07:27:57.894394 fix syntax errors 8 ['\n\ndef max_play_turns(k, n, a, b):\n    if k <= b:\n        return -1\n    if a == b:\n        return n\n    if k % a < k % b:\n        return n - (k % a)\n    return n - (k % b)\n\n\nif __name__ == "__main__":\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        print(max_play_turns(k, n, a, b))\n', '\n\ndef max_play_turns(k, n, a, b):\n    if k <= b:\n        return -1\n    if a == b:\n        return n\n    if k % a == 0:\n        return n - 1\n    if k % b == 0:\n        return n - 1\n    if k % a < k % b:\n        return n - k % a\n    return n - k % b\n\n\nif __name__ == "__main__":\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        print(max_play_turns(k, n, a, b))\n', '\n\ndef max_play_turns(k, n, a, b):\n    if k <= b:\n        return -1\n    if a == b:\n        return n\n    if k % a == 0:\n        return n - 1\n    if k % b == 0:\n        return n - 1\n    if k % a < k % b:\n        return n - (k % a) + 1\n    return n - (k % b) + 1\n\n\nif __name__ == "__main__":\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        print(max_play_turns(k, n, a, b))\n', '\n\ndef max_play_turns(k, n, a, b):\n    if k <= b:\n        return -1\n    if a == b:\n        return n\n    if k % a == 0:\n        return n - 1\n    if k % b == 0:\n        return n - 1\n    if k % a < k % b:\n        return n - (k % a) + 1\n    return n - (k % b) + 1\n\n\nif __name__ == "__main__":\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        print(max_play_turns(k, n, a, b))\n', '\n\ndef max_play_turns(k, n, a, b):\n    if k < b:\n        return -1\n    if a == b:\n        return n\n    if k % a < k % b:\n        return n - (k % a)\n    return n - (k % b)\n\n\nif __name__ == "__main__":\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        print(max_play_turns(k, n, a, b))\n', '\n\ndef max_play_turns(k, n, a, b):\n    if k <= b:\n        return -1\n    if a == b:\n        return n\n    if k % a == 0:\n        return n - 1\n    if k % b == 0:\n        return n - 1\n    if k % a < k % b:\n        return n - (k // a)\n    return n - (k // b)\n\n\nif __name__ == "__main__":\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        print(max_play_turns(k, n, a, b))\n', '\n\ndef max_play_turns(k, n, a, b, m):\n    if m == 0:\n        if k <= b:\n            return -1\n        if a == b:\n            return n\n        if k % a == 0:\n            return n - 1\n        if k % b == 0:\n            return n - 1\n        if k % a < k % b:\n            return n - (k % a)\n        return n - (k % b)\n    else:\n        if k <= b:\n            return -1\n        if a == b:\n            return n\n        if k % a == 0:\n            return n - 1\n        if k % b == 0:\n            return n - 1\n        if k % a < k % b:\n            return n - (k % a)\n        return n - (k % b)\n\n\nif __name__ == "__main__":\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b, m = map(int, input().split())\n        print(max_play_turns(k, n, a, b, m))\n', '\n\ndef max_play_turns(k, n, a, b):\n    if k <= b:\n        return -1\n    if a == b:\n        return n\n    if k % a == 0:\n        return n - 1\n    if k % b == 0:\n        return n - 1\n    if k % a < k % b:\n        return n - (k % a) + 1\n    return n - (k % b) + 1\n\n\nif __name__ == "__main__":\n    q = int(input())\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        print(max_play_turns(k, n, a, b))\n']
2022-04-20 07:27:57.894480 size on output set 6
