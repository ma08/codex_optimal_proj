["\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndef is_heated(i, a):\n    for j in range(max(0, i - r + 1), min(n, i + r)):\n        if a[j] == 1:\n            return True\n    return False \n\ndef is_possible(a):\n    for i in range(n):\n        if not is_heated(i, a):\n            return False\n    return True\n\ndef solve(a):\n    if not is_possible(a):\n        return -1\n    ans = 0\n    for i in range(n):\n        if a[i] == 0:\n            ans += 1\n            a[i] = 1\n            if not is_possible(a):\n                return -1\n    return ans\n\nprint(solve())\n", "\nn, r = map(int, input().split())\na = list(map(int, input().split()))\ndef is_heated(i):\n    for j in range(i - r + 1, i + r):\n        if j >= 0 and j < n:\n            if a[j] == 1:\n                return True\n    return False\ndef is_possible():\n    for i in range(n):\n        if not is_heated(i):\n            return False\n    return True\ndef solve():\n    if not is_possible():\n        return -1\n    ans = 0\n    for i in range(n):\n        if a[i] == 0:\n            ans += 1\n            a[i] = 1\n            if not is_possible():\n                return -1\n    return ans\n\nprint(solve())\n", "\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndef is_heated(i, a):\n    for j in range(i - r + 1, i + r):\n        if j >= 0 and j < n:\n            if a[j] == 1:\n                return True\n    return False\n\ndef is_possible(a):\n    for i in range(n):\n        if not is_heated(i, a):\n            return False\n    return True\n\ndef solve():\n    if not is_possible(a):\n        return -1\n    ans = 0\n    for i in range(n):\n        if a[i] == 0:\n            ans += 1\n            a[i] = 1\n            if not is_possible(a):\n                return -1\n    return ans\n\nprint(solve())\n", "\n#-----Solution-----\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n# The answer is the number of unwarmed elements\n# plus the number of heaters that are not warming up\n# any unwarmed elements\nunwarmed = 0\nheaters = 0\nfor i in range(n):\n    if a[i] == 0:\n        unwarmed += 1\n    else:\n        # If the heater is not warming up any unwarmed elements,\n        # it is not needed\n        if i - r + 1 <= 0 or a[i - r] == 0:\n            heaters += 1\nif unwarmed == 0:\n    print(heaters)\nelse:\n    print(-1)\n", "\n#-----Solution-----\n\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\n# The answer is the number of unwarmed elements\n# plus the number of heaters that are not warming up\n# any unwarmed elements\n\nunwarmed = 0\nheaters = 0\n\nfor i in range(n):\n    if a[i] == 0:\n        unwarmed += 1\n    else:\n        # If the heater is not warming up any unwarmed elements,\n        # it is not needed\n        if i - r + 1 <= 0 or a[i - r] == 0:\n            heaters += 1\n\nif unwarmed == 0:\n    print(heaters)\nelse:\n    print(-1)\n", "\nn, r = map(int, input().split())\n\na = list(map(int, input().split()))\n\ndef is_heated(i):\n    for j in range(i - r + 1, i + r):\n        if j >= 0 and j < n:\n            if a[j] == 1:\n                return True\n    return False\n\n\ndef is_possible():\n    for i in range(n):\n        if not is_heated(i):\n            return False\n\n    return True\n\ndef solve():\n    if not is_possible():\n        return -1\n    ans = 0\n    for i in range(n):\n        if a[i] == 0:\n            ans += 1\n            a[i] = 1\n            if not is_possible():\n                return -1\n    return ans\n\nprint(solve())\n", "\n\n#-----Solution-----#\n\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\n# The answer is the number of unwarmed elements\n# plus the number of heaters that are not warming up\n# any unwarmed elements\n\nunwarmed = 0\nheaters = 0\n\nfor i in range(n):\n    if a[i] == 0:\n        unwarmed += 1\n    else:\n        # If the heater is not warming up any unwarmed elements,\n        # it is not needed\n        if i - r + 1 <= 0 or a[i - r] == 0:\n            heaters += 1\n\nif unwarmed == 0:\n    print(heaters)\nelse:\n    print(-1)\n", "\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndef is_heated(i):\n    for j in range(i - r + 1, i + r):\n        if j >= 0 and j < n:\n            if a[j] == 1:\n                return True\n    return False\n\ndef is_possible():\n    for i in range(n):\n        if not is_heated(i):\n            return False\n    return True\n\ndef solve():\n    if not is_possible():\n        return -1\n    ans = 0\n    for i in range(n):\n        if a[i] == 0:\n            ans += 1\n            a[i] = 1\n            if not is_possible():\n                return -1\n    return ans\n\nprint(solve())\n", "\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\n\ndef is_possible():\n    for i in range(n):\n        if not is_heated(i):\n            return False\n    return True\n\ndef solve():\n    if not is_possible():\n        return -1\n    ans = 0\n    for i in range(n):\n        if a[i] == 0:\n            ans += 1\n            a[i] = 1\n            if not is_possible():\n                return -1\n    return ans\n\nprint(solve())\n", "#-----Solution-----\n\nn, r = map(int, input().split())\na = list(map(int, input().split()))\n\n# The answer is the number of unwarmed elements\n# plus the number of heaters that are not warming up\n# any unwarmed elements\n\nunwarmed = 0\nheaters = 0\n\nfor i in range(n):\n    if a[i] == 0:\n        unwarmed += 1\n    else:\n        # If the heater is not warming up any unwarmed elements,\n        # it is not needed\n        if i - r + 1 <= 0 or a[i - r] == 0:\n            heaters += 1\n\nif unwarmed == 0:\n    print(heaters)\nelse:\n    print(-1)\n"]