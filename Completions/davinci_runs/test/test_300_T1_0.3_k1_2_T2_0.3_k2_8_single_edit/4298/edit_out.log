2022-04-20 07:32:59.291673 num operations 1
2022-04-20 07:32:59.291697 size on input set 1
2022-04-20 07:32:59.291955 using api key soukgp
2022-04-20 07:33:04.280780 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nN, D = map(int, sys.stdin.readline().split())\n\nif N <= 2*D:\n    print(1)\nelse:\n    print(2)\n"
    },
    {
      "index": 1,
      "text": "import sys\n\nN, D = map(int, sys.stdin.readline().split())\n\nif N <= 2*D:\n    print(1)\nelse:\n    print(2)\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\nN, D = map(int, sys.stdin.readline().split())\n\nif N <= 2*D:\n    print(1)\nelse:\n    print(2)\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\nN, D = map(int, sys.stdin.readline().split())\n\nif N <= 2 * D:\n    print(1)\nelse:\n    print(2)\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\nN, D = map(int, sys.stdin.readline().split())\n\nif N <= 2 * D:\n    print(1)\nelse:\n    print(2)\n"
    },
    {
      "index": 5,
      "text": "import sys\n\nN, D = map(int, sys.stdin.readline().split())\n\nif N <= 2*D:\n    print(1)\nelse:\n    print(2)\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\nN, D = map(int, sys.stdin.readline().split())\n\nif N <= 2*D:\n    print(1)\nelse:\n    print(2)\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\nN, D = map(int, sys.stdin.readline().split())\n\nif N <= 2*D:\n    print(1)\nelse:\n    print(2)\n"
    }
  ],
  "created": 1650439979,
  "object": "edit"
}
2022-04-20 07:33:04.281134 fix syntax errors 8 ['\nimport sys\nN, D = map(int, sys.stdin.readline().split())\n\nif N <= 2*D:\n    print(1)\nelse:\n    print(2)\n', 'import sys\n\nN, D = map(int, sys.stdin.readline().split())\n\nif N <= 2*D:\n    print(1)\nelse:\n    print(2)\n', '\nimport sys\n\nN, D = map(int, sys.stdin.readline().split())\n\nif N <= 2*D:\n    print(1)\nelse:\n    print(2)\n', '\nimport sys\n\nN, D = map(int, sys.stdin.readline().split())\n\nif N <= 2 * D:\n    print(1)\nelse:\n    print(2)\n', '\nimport sys\n\nN, D = map(int, sys.stdin.readline().split())\n\nif N <= 2 * D:\n    print(1)\nelse:\n    print(2)\n', 'import sys\n\nN, D = map(int, sys.stdin.readline().split())\n\nif N <= 2*D:\n    print(1)\nelse:\n    print(2)\n', '\nimport sys\nN, D = map(int, sys.stdin.readline().split())\n\nif N <= 2*D:\n    print(1)\nelse:\n    print(2)\n', '\nimport sys\n\nN, D = map(int, sys.stdin.readline().split())\n\nif N <= 2*D:\n    print(1)\nelse:\n    print(2)\n']
2022-04-20 07:33:04.281182 size on output set 4
2022-04-20 07:33:04.281196 num operations 1
2022-04-20 07:33:04.281204 size on input set 1
2022-04-20 07:33:04.281425 using api key gabby
2022-04-20 07:33:10.871835 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nN, D = map(int, input().split())\n\n# The minimum number of inspectors is the maximum number of trees that can be\n# inspected by one inspector. This can be achieved by placing an inspector at\n# the leftmost tree that can inspect the rightmost tree.\nprint(-(-N // (2 * D + 1)))\n"
    },
    {
      "index": 1,
      "text": "\nN, D = map(int, input().split())\n\nprint(-(-N // (2 * D + 1)))  # The minimum number of inspectors is the maximum number of trees that can be inspected by one inspector.\n# This can be achieved by placing an inspector at the leftmost tree that can inspect the rightmost tree\n"
    },
    {
      "index": 2,
      "text": "\nN, D = map(int, input().split())\n\n# The minimum number of inspectors is the maximum number of trees that can be inspected by one inspector.\n# This can be achieved by placing an inspector at the leftmost tree that can inspect the rightmost tree.\nprint(-(-N // (2 * D + 1)))\n"
    },
    {
      "index": 3,
      "text": "\nN, D = map(int, input().split())\n\n# The minimum number of inspectors is the maximum number of trees that can be inspected by one inspector.\n# This can be achieved by placing an inspector at the leftmost tree that can inspect the rightmost tree.\nprint(-(-N // (2 * D + 1)))\n"
    },
    {
      "index": 4,
      "text": "\nN, D = map(int, input().split())\n\n# The minimum number of inspectors is the maximum number of trees that can be inspected by one inspector.\n# This can be achieved by placing an inspector at the leftmost tree that can inspect the rightmost tree.\nprint(-(-N // (2 * D + 1)))\n"
    },
    {
      "index": 5,
      "text": "\nN, D = map(int, input().split())\n\n# The minimum number of inspectors is the maximum number of trees that can be inspected by one inspector.\n# This can be achieved by placing an inspector at the leftmost tree that can inspect the rightmost tree.\nprint(-(-N // (2 * D + 1)))\n"
    },
    {
      "index": 6,
      "text": "\nN, D = map(int, input().split())\n\n# The minimum number of inspectors is the maximum number of trees that can be inspected by one inspector.\n# This can be achieved by placing an inspector at the leftmost tree that can inspect the rightmost tree.\nprint(-(-N // (2 * D + 1)))\n"
    },
    {
      "index": 7,
      "text": "\nN, D = map(int, input().split())\n\n# The minimum number of inspectors is the maximum number of trees that can be inspected by one inspector.\n# This can be achieved by placing an inspector at the leftmost tree that can inspect the rightmost tree.\nprint(-(-N // (2 * D + 1)))\n"
    }
  ],
  "created": 1650439984,
  "object": "edit"
}
2022-04-20 07:33:10.872222 fix syntax errors 8 ['\nN, D = map(int, input().split())\n\n# The minimum number of inspectors is the maximum number of trees that can be\n# inspected by one inspector. This can be achieved by placing an inspector at\n# the leftmost tree that can inspect the rightmost tree.\nprint(-(-N // (2 * D + 1)))\n', '\nN, D = map(int, input().split())\n\nprint(-(-N // (2 * D + 1)))  # The minimum number of inspectors is the maximum number of trees that can be inspected by one inspector.\n# This can be achieved by placing an inspector at the leftmost tree that can inspect the rightmost tree\n', '\nN, D = map(int, input().split())\n\n# The minimum number of inspectors is the maximum number of trees that can be inspected by one inspector.\n# This can be achieved by placing an inspector at the leftmost tree that can inspect the rightmost tree.\nprint(-(-N // (2 * D + 1)))\n', '\nN, D = map(int, input().split())\n\n# The minimum number of inspectors is the maximum number of trees that can be inspected by one inspector.\n# This can be achieved by placing an inspector at the leftmost tree that can inspect the rightmost tree.\nprint(-(-N // (2 * D + 1)))\n', '\nN, D = map(int, input().split())\n\n# The minimum number of inspectors is the maximum number of trees that can be inspected by one inspector.\n# This can be achieved by placing an inspector at the leftmost tree that can inspect the rightmost tree.\nprint(-(-N // (2 * D + 1)))\n', '\nN, D = map(int, input().split())\n\n# The minimum number of inspectors is the maximum number of trees that can be inspected by one inspector.\n# This can be achieved by placing an inspector at the leftmost tree that can inspect the rightmost tree.\nprint(-(-N // (2 * D + 1)))\n', '\nN, D = map(int, input().split())\n\n# The minimum number of inspectors is the maximum number of trees that can be inspected by one inspector.\n# This can be achieved by placing an inspector at the leftmost tree that can inspect the rightmost tree.\nprint(-(-N // (2 * D + 1)))\n', '\nN, D = map(int, input().split())\n\n# The minimum number of inspectors is the maximum number of trees that can be inspected by one inspector.\n# This can be achieved by placing an inspector at the leftmost tree that can inspect the rightmost tree.\nprint(-(-N // (2 * D + 1)))\n']
2022-04-20 07:33:10.872285 size on output set 3
