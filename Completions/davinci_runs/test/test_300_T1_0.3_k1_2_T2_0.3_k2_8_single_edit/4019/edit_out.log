2022-04-20 06:04:09.729487 num operations 1
2022-04-20 06:04:09.729506 size on input set 1
2022-04-20 06:04:09.729692 using api key kouti
2022-04-20 06:04:21.788964 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n, m, d = map(int, sys.stdin.readline().split())\n    edges = []\n    for i in range(m):\n        edges.append(tuple(map(int, sys.stdin.readline().split())))\n    if d == 0:\n        print(\"YES\")\n        for i in range(1, n):\n            print(i, i + 1)\n    elif d == n - 1:\n        print(\"YES\")\n        for i in range(2, n):\n            print(1, i)\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    n, m, d = map(int, sys.stdin.readline().split())\n    edges = []\n    for i in range(m):\n        edges.append(tuple(map(int, sys.stdin.readline().split())))\n    if d == 0:\n        print(\"YES\")\n        for i in range(1, n):\n            print(i, i + 1)\n    elif d == n - 1:\n        print(\"YES\")\n        for i in range(2, n):\n            print(1, i)\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    a = list(map(int, sys.stdin.readline().split()))\n    b = list(map(int, sys.stdin.readline().split()))\n    c = list(map(int, sys.stdin.readline().split()))\n    ans = 0\n    for i in range(n):\n        ans += b[a[i] - 1]\n        if i > 0 and a[i - 1] + 1 == a[i]:\n            ans += c[a[i - 1] - 1]\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n, m, d = map(int, sys.stdin.readline().split())\n    edges = []\n    for i in range(m):\n        edges.append(tuple(map(int, sys.stdin.readline().split())))\n    if d == 0:\n        print(\"YES\")\n        for i in range(1, n):\n            print(i, i + 1)\n    elif d == n - 1:\n        print(\"YES\")\n        for i in range(2, n):\n            print(1, i)\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "import sys\n\ndef main():\n    n, m, d = map(int, sys.stdin.readline().split()) \n    edges = [] \n    for i in range(m): \n        edges.append(tuple(map(int, sys.stdin.readline().split()))) \n    if d == 0: \n        print(\"YES\") \n        for i in range(1, n): \n            print(i, i + 1) \n    elif d == n - 1: \n        print(\"YES\") \n        for i in range(2, n): \n            print(1, i) \n    else: \n        print(\"NO\") \nif __name__ == \"__main__\":\n    main() \n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    print(a[-1] - a[0])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\n\nimport sys\n\ndef main():\n    n, m, d = map(int, sys.stdin.readline().split())\n    edges = []\n    for i in range(m):\n        edges.append(tuple(map(int, sys.stdin.readline().split())))\n    if d == 0:\n        print(\"YES\")\n        for i in range(1, n):\n            print(i, i + 1)\n    elif d == n - 1:\n        print(\"YES\")\n        for i in range(2, n):\n            print(1, i)\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650434649,
  "object": "edit"
}
2022-04-20 06:04:21.789277 fix syntax errors 8 ['\nimport sys\n\ndef main():\n    n, m, d = map(int, sys.stdin.readline().split())\n    edges = []\n    for i in range(m):\n        edges.append(tuple(map(int, sys.stdin.readline().split())))\n    if d == 0:\n        print("YES")\n        for i in range(1, n):\n            print(i, i + 1)\n    elif d == n - 1:\n        print("YES")\n        for i in range(2, n):\n            print(1, i)\n    else:\n        print("NO")\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n, m, d = map(int, sys.stdin.readline().split())\n    edges = []\n    for i in range(m):\n        edges.append(tuple(map(int, sys.stdin.readline().split())))\n    if d == 0:\n        print("YES")\n        for i in range(1, n):\n            print(i, i + 1)\n    elif d == n - 1:\n        print("YES")\n        for i in range(2, n):\n            print(1, i)\n    else:\n        print("NO")\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    pass\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    a = list(map(int, sys.stdin.readline().split()))\n    b = list(map(int, sys.stdin.readline().split()))\n    c = list(map(int, sys.stdin.readline().split()))\n    ans = 0\n    for i in range(n):\n        ans += b[a[i] - 1]\n        if i > 0 and a[i - 1] + 1 == a[i]:\n            ans += c[a[i - 1] - 1]\n    print(ans)\n\nif __name__ == "__main__":\n    main()\n', '#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n, m, d = map(int, sys.stdin.readline().split())\n    edges = []\n    for i in range(m):\n        edges.append(tuple(map(int, sys.stdin.readline().split())))\n    if d == 0:\n        print("YES")\n        for i in range(1, n):\n            print(i, i + 1)\n    elif d == n - 1:\n        print("YES")\n        for i in range(2, n):\n            print(1, i)\n    else:\n        print("NO")\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    n, m, d = map(int, sys.stdin.readline().split()) \n    edges = [] \n    for i in range(m): \n        edges.append(tuple(map(int, sys.stdin.readline().split()))) \n    if d == 0: \n        print("YES") \n        for i in range(1, n): \n            print(i, i + 1) \n    elif d == n - 1: \n        print("YES") \n        for i in range(2, n): \n            print(1, i) \n    else: \n        print("NO") \nif __name__ == "__main__":\n    main() \n', '\nimport sys\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    print(a[-1] - a[0])\n\nif __name__ == "__main__":\n    main()\n', '\n\n\nimport sys\n\ndef main():\n    n, m, d = map(int, sys.stdin.readline().split())\n    edges = []\n    for i in range(m):\n        edges.append(tuple(map(int, sys.stdin.readline().split())))\n    if d == 0:\n        print("YES")\n        for i in range(1, n):\n            print(i, i + 1)\n    elif d == n - 1:\n        print("YES")\n        for i in range(2, n):\n            print(1, i)\n    else:\n        print("NO")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 06:04:21.789341 size on output set 7
2022-04-20 06:04:21.789353 num operations 1
2022-04-20 06:04:21.789359 size on input set 1
2022-04-20 06:04:21.789516 using api key derek
2022-04-20 06:04:21.824881 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 06:04:23.326717 using api key sunu
2022-04-20 06:04:37.336773 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    n, m, d = map(int, input().split())\n    edges = [tuple(map(int, input().split())) for _ in range(m)]\n\n    if d == 0:\n        print('YES')\n        for i in range(2, n+1):\n            print(1, i)\n    elif d == n-1:\n        print('YES')\n        for i in range(2, n+1):\n            print(i-1, i)\n    else:\n        print('NO')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n, m, d = map(int, input().split())  # n:\u9802\u70b9\u6570, m:\u8fba\u306e\u6570, d:\u8fba\u306e\u6700\u5927\u9577\n    edges = [tuple(map(int, input().split())) for _ in range(m)]  # \u8fba\u306e\u30ea\u30b9\u30c8\n\n    if d == 0:  # \u5168\u3066\u306e\u9802\u70b9\u304c1\u3064\u306e\u90e8\u5206\u6728\u306b\u5c5e\u3059\u308b\u5834\u5408\n        print('YES')\n        for i in range(2, n+1):\n            print(1, i)\n    elif d == n-1:  # \u5168\u3066\u306e\u9802\u70b9\u304c\u9023\u7d50\u3067\u3042\u308b\u5834\u5408\n        print('YES')\n        for i in range(2, n+1):\n            print(i-1, i)\n    else:  # \u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\n        print('NO')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    n, m, d = map(int, input().split())\n    edges = [tuple(map(int, input().split())) for _ in range(m)]\n\n    if d == 0:\n        print('YES')\n        for i in range(2, n + 1):\n            print(1, i)\n    elif d == n - 1:\n        print('YES')\n        for i in range(2, n + 1):\n            print(i - 1, i)\n    else:\n        print('NO')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    n, m, d = map(int, input().split())\n\n    if d == 0:\n        print('YES')\n        for i in range(2, n+1):\n            print(1, i)\n    elif d == n-1:\n        print('YES')\n        for i in range(2, n+1):\n            print(i-1, i)\n    else:\n        print('NO')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    n, m, d = map(int, input().split())  # n: \u9802\u70b9\u6570, m: \u8fba\u306e\u6570, d: \u5404\u9802\u70b9\u304b\u3089\u306e\u6700\u5927\u8ddd\u96e2\n    edges = [tuple(map(int, input().split())) for _ in range(m)]  # \u8fba\n\n    if d == 0:\n        print('YES')  # \u53ef\u80fd\n        for i in range(2, n+1):  # \u9802\u70b91\u304b\u3089\u5404\u9802\u70b9\u3078\u306e\u8fba\u3092\u8ffd\u52a0\n            print(1, i)  # \u9802\u70b91\u304b\u3089\u9802\u70b9i\u3078\u306e\u8fba\u3092\u8ffd\u52a0\n    elif d == n-1:\n        print('YES')  # \u53ef\u80fd\n        for i in range(2, n+1):  # \u9802\u70b91\u304b\u3089\u5404\u9802\u70b9\u3078\u306e\u8fba\u3092\u8ffd\u52a0\n            print(i-1, i)  # \u9802\u70b9i-1\u304b\u3089\u9802\u70b9i\u3078\u306e\u8fba\u3092\u8ffd\u52a0\n    else:\n        print('NO')  # \u4e0d\u53ef\u80fd\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\ndef main():\n    n, m, d = map(int, input().split())\n    edges = [tuple(map(int, input().split())) for _ in range(m)]\n\n    if d == 0:\n        print('YES')\n        for i in range(2, n+1):\n            print(1, i)\n    elif d == n-1:\n        print('YES')\n        for i in range(2, n+1):\n            print(i-1, i)\n    else:\n        print('NO')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    n, m, d = map(int, input().split())  # n: number of vertices, m: number of edges, d: diameter\n    edges = [tuple(map(int, input().split())) for _ in range(m)]  # edges\n\n    if d == 0:  # diameter is 0\n        print('YES')\n        for i in range(2, n+1):\n            print(1, i)\n    elif d == n-1:  # diameter is n-1\n        print('YES')\n        for i in range(2, n+1):\n            print(i-1, i)\n    else:  # diameter is not 0 or n-1\n        print('NO')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    n, m, d = map(int, input().split())\n    edges = [tuple(map(int, input().split())) for _ in range(m)]\n\n    if d == 0:\n        print('YES')\n        for i in range(2, n + 1):\n            print(1, i)\n    elif d == n-1:\n        print('YES')\n        for i in range(2, n + 1):\n            print(i - 1, i)\n    else:\n        print('NO')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650434663,
  "object": "edit"
}
2022-04-20 06:04:37.337150 fix syntax errors 8 ["\ndef main():\n    n, m, d = map(int, input().split())\n    edges = [tuple(map(int, input().split())) for _ in range(m)]\n\n    if d == 0:\n        print('YES')\n        for i in range(2, n+1):\n            print(1, i)\n    elif d == n-1:\n        print('YES')\n        for i in range(2, n+1):\n            print(i-1, i)\n    else:\n        print('NO')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m, d = map(int, input().split())  # n:頂点数, m:辺の数, d:辺の最大長\n    edges = [tuple(map(int, input().split())) for _ in range(m)]  # 辺のリスト\n\n    if d == 0:  # 全ての頂点が1つの部分木に属する場合\n        print('YES')\n        for i in range(2, n+1):\n            print(1, i)\n    elif d == n-1:  # 全ての頂点が連結である場合\n        print('YES')\n        for i in range(2, n+1):\n            print(i-1, i)\n    else:  # それ以外の場合\n        print('NO')\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, m, d = map(int, input().split())\n    edges = [tuple(map(int, input().split())) for _ in range(m)]\n\n    if d == 0:\n        print('YES')\n        for i in range(2, n + 1):\n            print(1, i)\n    elif d == n - 1:\n        print('YES')\n        for i in range(2, n + 1):\n            print(i - 1, i)\n    else:\n        print('NO')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m, d = map(int, input().split())\n\n    if d == 0:\n        print('YES')\n        for i in range(2, n+1):\n            print(1, i)\n    elif d == n-1:\n        print('YES')\n        for i in range(2, n+1):\n            print(i-1, i)\n    else:\n        print('NO')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m, d = map(int, input().split())  # n: 頂点数, m: 辺の数, d: 各頂点からの最大距離\n    edges = [tuple(map(int, input().split())) for _ in range(m)]  # 辺\n\n    if d == 0:\n        print('YES')  # 可能\n        for i in range(2, n+1):  # 頂点1から各頂点への辺を追加\n            print(1, i)  # 頂点1から頂点iへの辺を追加\n    elif d == n-1:\n        print('YES')  # 可能\n        for i in range(2, n+1):  # 頂点1から各頂点への辺を追加\n            print(i-1, i)  # 頂点i-1から頂点iへの辺を追加\n    else:\n        print('NO')  # 不可能\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, m, d = map(int, input().split())\n    edges = [tuple(map(int, input().split())) for _ in range(m)]\n\n    if d == 0:\n        print('YES')\n        for i in range(2, n+1):\n            print(1, i)\n    elif d == n-1:\n        print('YES')\n        for i in range(2, n+1):\n            print(i-1, i)\n    else:\n        print('NO')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m, d = map(int, input().split())  # n: number of vertices, m: number of edges, d: diameter\n    edges = [tuple(map(int, input().split())) for _ in range(m)]  # edges\n\n    if d == 0:  # diameter is 0\n        print('YES')\n        for i in range(2, n+1):\n            print(1, i)\n    elif d == n-1:  # diameter is n-1\n        print('YES')\n        for i in range(2, n+1):\n            print(i-1, i)\n    else:  # diameter is not 0 or n-1\n        print('NO')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m, d = map(int, input().split())\n    edges = [tuple(map(int, input().split())) for _ in range(m)]\n\n    if d == 0:\n        print('YES')\n        for i in range(2, n + 1):\n            print(1, i)\n    elif d == n-1:\n        print('YES')\n        for i in range(2, n + 1):\n            print(i - 1, i)\n    else:\n        print('NO')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 06:04:37.337226 size on output set 7
