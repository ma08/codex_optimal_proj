["\n\ndef main():\n    n, m = map(int, input().split())  # n = number of nodes, m = number of edges\n    a = list(map(int, input().split()))  # a = cost of each node\n\n    edges = []  # edges = list of edges\n    for _ in range(m):\n        x, y, w = map(int, input().split())\n        edges.append((w, x, y))\n\n    edges.sort()\n\n    parent = list(range(n))  # parent = parent of each node\n    size = [1] * n  # size = size of each node\n\n    def find(x):\n        if parent[x] != x:\n            parent[x] = find(parent[x])\n        return parent[x]\n\n    def union(x, y):\n        x = find(x)\n        y = find(y)\n        if x != y:\n            if size[x] < size[y]:\n                x, y = y, x\n            parent[y] = x\n            size[x] += size[y]\n\n    res = 0\n    for w, x, y in edges:\n        if find(x) != find(y):\n            union(x, y)\n            res += w\n    for i in range(n):\n        if find(i) != find(0):\n            res += a[i]\n            union(i, 0)\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n\ndef find_min_cost(offers, a):\n    min_cost = a[0]\n    for offer in offers:\n        if offer[0] == 1:\n            if offer[2] < a[offer[1] - 1]:\n                min_cost += offer[2]\n            else:\n                min_cost += a[offer[1] - 1]\n    return min_cost\n\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    offers = []\n    for _ in range(m):\n        offers.append(list(map(int, input().split())))\n\n    # print(n, m)\n    # print(a)\n    # print(offers)\n\n    # find the minimum cost of connecting 1 to any other node\n    min_cost = find_min_cost(offers, a)\n\n    # print(min_cost)\n\n    # find the minimum cost of connecting any other node to 1\n    for i in range(2, n + 1):\n        min_cost_i = a[i - 1]\n        for offer in offers:\n            if offer[1] == i:\n                if offer[2] < a[offer[0] - 1]:\n                    min_cost_i += offer[2]\n                else:\n                    min_cost_i += a[offer[0] - 1]\n        if min_cost_i < min_cost:\n            min_cost = min_cost_i\n\n    print(min_cost)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    # n, m = map(int, input().split())\n    # a = list(map(int, input().split()))\n    # offers = []\n    # for _ in range(m):\n    #     offers.append(list(map(int, input().split())))\n\n    # # print(n, m)\n    # # print(a)\n    # # print(offers)\n\n    # # find the minimum cost of connecting 1 to any other node\n    # min_cost = a[0]\n    # for offer in offers:\n    #     if offer[0] == 1:\n    #         if offer[2] < a[offer[1] - 1]:\n    #             min_cost += offer[2]\n    #         else:\n    #             min_cost += a[offer[1] - 1]\n\n    # # print(min_cost)\n\n    # # find the minimum cost of connecting any other node to 1\n    # for i in range(2, n + 1):\n    #     min_cost_i = a[i - 1]\n    #     for offer in offers:\n    #         if offer[1] == i:\n    #             if offer[2] < a[offer[0] - 1]:\n    #                 min_cost_i += offer[2]\n    #             else:\n    #                 min_cost_i += a[offer[0] - 1]\n    #     if min_cost_i < min_cost:\n    #         min_cost = min_cost_i\n\n    # print(min_cost)\n    print(\"Hello World\")\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    offers = []\n    for _ in range(m):\n        offers.append(list(map(int, input().split())))\n\n    # find the minimum cost of connecting 1 to any other node\n    min_cost = a[0]\n    for offer in offers:\n        if offer[0] == 1:\n            if offer[2] < a[offer[1] - 1]:\n                min_cost += offer[2]\n            else:\n                min_cost += a[offer[1] - 1]\n\n    # find the minimum cost of connecting any other node to 1\n    for i in range(2, n + 1):\n        min_cost_i = a[i - 1]\n        for offer in offers:\n            if offer[1] == i:\n                if offer[2] < a[offer[0] - 1]:\n                    min_cost_i += offer[2]\n                else:\n                    min_cost_i += a[offer[0] - 1]\n        if min_cost_i < min_cost:\n            min_cost = min_cost_i\n\n    print(min_cost)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    edges = []\n    for _ in range(m):\n        x, y, w = map(int, input().split())\n        edges.append((w, x, y))\n\n    edges.sort()\n\n    parent = list(range(n))\n    size = [1] * n\n\n    def find(x):\n        if parent[x] != x:\n            parent[x] = find(parent[x])\n        return parent[x]\n\n    def union(x, y):\n        x = find(x)\n        y = find(y)\n        if x != y:\n            if size[x] < size[y]:\n                x, y = y, x\n            parent[y] = x\n            size[x] += size[y]\n\n    res = 0\n    for w, x, y in edges:\n        if find(x) != find(y):\n            union(x, y)\n            res += w\n    for i in range(n):\n        if find(i) != find(0):\n            res += a[i]\n            union(i, 0)\n\n    print(res)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    offers = []\n    for _ in range(m):\n        offers.append(list(map(int, input().split())))\n\n    # find the minimum cost of connecting 1 to any other node\n    min_cost = a[0]\n    for offer in offers:\n        if offer[0] == 1:\n            if offer[2] < a[offer[1] - 1]:\n                min_cost += offer[2]\n            else:\n                min_cost += a[offer[1] - 1]\n\n    # find the minimum cost of connecting any other node to 1\n    for i in range(2, n + 1):\n        min_cost_i = a[i - 1]  # cost of connecting i to 1\n        for offer in offers:\n            if offer[1] == i:\n                if offer[2] < a[offer[0] - 1]:\n                    min_cost_i += offer[2]\n                else:\n                    min_cost_i += a[offer[0] - 1]\n        if min_cost_i < min_cost:\n            min_cost = min_cost_i\n\n    print(min_cost)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    # n, m = map(int, input().split())\n    # a = list(map(int, input().split()))\n    # offers = []\n    # for _ in range(m):\n    #     offers.append(list(map(int, input().split())))\n\n    # # print(n, m)\n    # # print(a)\n    # # print(offers)\n\n    # # find the minimum cost of connecting 1 to any other node\n    # min_cost = a[0]\n    # for offer in offers:\n    #     if offer[0] == 1:\n    #         if offer[2] < a[offer[1] - 1]:\n    #             min_cost += offer[2]\n    #         else:\n    #             min_cost += a[offer[1] - 1]\n\n    # # print(min_cost)\n\n    # # find the minimum cost of connecting any other node to 1\n    # for i in range(2, n + 1):\n    #     min_cost_i = a[i - 1]\n    #     for offer in offers:\n    #         if offer[1] == i:\n    #             if offer[2] < a[offer[0] - 1]:\n    #                 min_cost_i += offer[2]\n    #             else:\n    #                 min_cost_i += a[offer[0] - 1]\n    #     if min_cost_i < min_cost:\n    #         min_cost = min_cost_i\n\n    # print(min_cost)\n\n    # n = int(input())\n    # a = list(map(int, input().split()))\n\n    # # print(n)\n    # # print(a)\n\n    # # find the minimum cost of connecting 1 to any other node\n    # min_cost = a[0]\n    # for i in range(2, n + 1):\n    #     min_cost_i = a[i - 1]\n    #     if min_cost_i < min_cost:\n    #         min_cost = min_cost_i\n\n    # print(min_cost)\n\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    # print(n)\n    # print(a)\n\n    # find the minimum cost of connecting 1 to any other node\n    min_cost = a[0]\n    for i in range(2, n + 1):\n        min_cost_i = a[i - 1]\n        if min_cost_i < min_cost:\n            min_cost = min_cost_i\n\n    print(min_cost)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    offers = []\n    for _ in range(m):\n        offers.append(list(map(int, input().split())))\n\n    # find the minimum cost of connecting 1 to any other node\n    min_cost = a[0]\n    for offer in offers:\n        if offer[0] == 1:\n            if offer[2] < a[offer[1] - 1]:\n                min_cost += offer[2]\n            else:\n                min_cost += a[offer[1] - 1]\n\n    # find the minimum cost of connecting any other node to 1\n    for i in range(2, n + 1):\n        min_cost_i = a[i - 1]\n        for offer in offers:  # find the minimum cost of connecting any other node to 1\n            if offer[1] == i:  # find the minimum cost of connecting any other node to 1\n                if offer[2] < a[offer[0] - 1]:  # find the minimum cost of connecting any other node to 1\n                    min_cost_i += offer[2]  # find the minimum cost of connecting any other node to 1\n                else:  # find the minimum cost of connecting any other node to 1\n                    min_cost_i += a[offer[0] - 1]  # find the minimum cost of connecting any other node to 1\n        if min_cost_i < min_cost:\n            min_cost = min_cost_i\n\n    print(min_cost)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())  # n: number of nodes, m: number of offers\n    a = list(map(int, input().split()))  # a: cost of connecting 1 to any other node\n    offers = []  # offers: list of offers\n    for _ in range(m):  # read offers\n        offers.append(list(map(int, input().split())))  # offers[i]: [node1, node2, cost]\n\n    print(n, m)\n    print(a)\n    print(offers)\n\n    # find the minimum cost of connecting 1 to any other node using offers\n    min_cost = a[0]\n    for offer in offers:\n        if offer[0] == 1 and offer[2] < a[offer[1] - 1]:\n            min_cost += offer[2]\n        else:\n            min_cost += a[offer[1] - 1]\n\n    # print(min_cost)\n\n        # find the minimum cost of connecting any other node to 1\n    for i in range(2, n + 1):\n        min_cost_i = a[i - 1]\n        for offer in offers:\n            if offer[1] == i and offer[2] < a[offer[0] - 1]:\n                min_cost_i += offer[2]\n            else:\n                min_cost_i += a[offer[0] - 1]\n        if min_cost_i < min_cost:\n            min_cost = min_cost_i\n\n    print(min_cost)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n    # n: \u9802\u70b9\u6570, m: \u8fba\u306e\u6570\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    edges = []\n    for _ in range(m):\n        x, y, w = map(int, input().split())\n        edges.append((w, x, y))\n\n    edges.sort()\n\n    parent = list(range(n))\n    size = [1] * n\n\n    def find(x):\n        if parent[x] != x:\n            parent[x] = find(parent[x])\n        return parent[x]\n\n    def union(x, y):\n        x = find(x)\n        y = find(y)\n        if x != y:\n            if size[x] < size[y]:\n                x, y = y, x\n            parent[y] = x\n            size[x] += size[y]\n\n    res = 0\n    for w, x, y in edges:\n        if find(x) != find(y):\n            union(x, y)\n            res += w\n    for i in range(n):\n        if find(i) != find(0):\n            res += a[i]\n            union(i, 0)\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    edges = []\n    for _ in range(m):\n        x, y, w = map(int, input().split())\n        edges.append((w, x, y))\n\n    edges.sort()\n\n    parent = list(range(n))\n    size = [1] * n\n\n    def find(x):\n        if parent[x] != x:\n            parent[x] = find(parent[x])\n        return parent[x]\n\n    def union(x, y):\n        x = find(x)\n        y = find(y)\n        if x != y:\n            if size[x] < size[y]:\n                x, y = y, x\n            parent[y] = x\n            size[x] += size[y]\n\n    res = 0\n    for w, x, y in edges:\n        if find(x) != find(y):\n            union(x, y)\n            res += w\n    if find(0) != find(1):\n        res += a[0]\n        union(0, 1)\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    # n, m = map(int, input().split())\n    # a = list(map(int, input().split()))\n    # offers = []\n    # for _ in range(m):\n    #     offers.append(list(map(int, input().split())))\n\n    # # print(n, m)\n    # # print(a)\n    # # print(offers)\n\n    # # find the minimum cost of connecting 1 to any other node\n    # min_cost = a[0]\n    # for offer in offers:\n    #     if offer[0] == 1:\n    #         if offer[2] < a[offer[1] - 1]:\n    #             min_cost += offer[2]\n    #         else:\n    #             min_cost += a[offer[1] - 1]\n\n    # # print(min_cost)\n\n    # # find the minimum cost of connecting any other node to 1\n    # for i in range(2, n + 1):\n    #     min_cost_i = a[i - 1]\n    #     for offer in offers:\n    #         if offer[1] == i:\n    #             if offer[2] < a[offer[0] - 1]:\n    #                 min_cost_i += offer[2]\n    #             else:\n    #                 min_cost_i += a[offer[0] - 1]\n    #     if min_cost_i < min_cost:\n    #         min_cost = min_cost_i\n\n    # print(min_cost)\n    print(1)\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    edges = []\n    for _ in range(m):\n        x, y, w = map(int, input().split())\n        edges.append((w, x, y))\n\n    edges.sort()\n\n    parent = list(range(n))\n    size = [1] * n\n\n    def find(x):\n        if parent[x] != x:\n            parent[x] = find(parent[x])\n        return parent[x]\n\n    def union(x, y):\n        x = find(x)\n        y = find(y)\n        if x != y:\n            if size[x] < size[y]:\n                x, y = y, x\n            parent[y] = x\n            size[x] += size[y]\n\n    res = 0\n    for w, x, y in edges:\n        if find(x) != find(y):\n            union(x, y)\n            res += w\n    for i in range(n):\n        if find(i) != find(0):\n            res += a[i]\n            union(i, 0)\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N, M = map(int, input().split())\n    A = list(map(int, input().split()))\n\n    edges = []\n    for _ in range(M):\n        x, y, w = map(int, input().split())\n        edges.append((w, x, y))\n\n    edges.sort()\n\n    parent = list(range(N))\n    size = [1] * N\n\n    def find(x):\n        if parent[x] != x:\n            parent[x] = find(parent[x])\n        return parent[x]\n\n    def union(x, y):\n        x = find(x)\n        y = find(y)\n        if x != y:\n            if size[x] < size[y]:\n                x, y = y, x\n            parent[y] = x\n            size[x] += size[y]\n\n    res = 0\n    for w, x, y in edges:\n        if find(x) != find(y):\n            union(x, y)\n            res += w\n    for i in range(N):\n        if find(i) != find(0):\n            res += A[i]\n            union(i, 0)\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n"]