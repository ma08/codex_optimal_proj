2022-04-20 07:25:53.658407 num operations 1
2022-04-20 07:25:53.658429 size on input set 1
2022-04-20 07:25:53.658649 using api key derek
2022-04-20 07:25:53.783000 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 07:25:55.285049 using api key gabby
2022-04-20 07:26:17.138235 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef dfs(v, p):\n\tfor u in g[v]:\n\t\tif u != p:\n\t\t\tdfs(u, v)\n\t\t\tc[v] += c[u]\n\ndef dfs2(v, p, keep):\n    mx = -1\n    bigChild = -1\n    for u in g[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in g[v]:\n        if u != p and u != bigChild:\n            dfs2(u, v, 0)\n    if bigChild != -1:\n        dfs2(bigChild, v, 1)\n        c[bigChild] += c[v]\n    mx = -1\n    bigChild = -1\n    for u in g[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in g[v]:\n        if u != p and u != bigChild:\n            for x in g[u]:\n                if x != u and x != p:\n                    c[x] = c[u]\n    if keep == 0:\n        c[v] = 0\n\nn, k = map(int, input().split())\ng = [[] for i in range(n)]\nfor i in range(n-1):\n    x, y = map(int, input().split())\n    x -= 1\n    y -= 1\n    g[x].append(y)\n    g[y].append(x)\n\nc = [1] * n\nsz = [1] * n\ndfs(0, -1)\ndfs2(0, -1, 1)\n\nans = [0] * (n-1)\nfor i in range(n):\n    for j in g[i]:\n        if j > i:\n            ans[i] = c[i]\n\nprint(max(ans))\nprint(' '.join(map(str, ans)))\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python\nfrom sys import stdin\n\ndef dfs(v, p):\n    for u in g[v]:\n        if u != p:\n            dfs(u, v)\n            c[v] += c[u]\n\ndef dfs2(v, p, keep):\n    mx = -1\n    bigChild = -1\n    for u in g[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in g[v]:\n        if u != p and u != bigChild:\n            dfs2(u, v, 0)\n    if bigChild != -1:\n        dfs2(bigChild, v, 1)\n        c[bigChild] += c[v]\n    mx = -1\n    bigChild = -1\n    for u in g[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in g[v]:\n        if u != p and u != bigChild:\n            for x in g[u]:\n                if x != u and x != p:\n                    c[x] = c[u]\n    if keep == 0:\n        c[v] = 0\n\nn, k = map(int, stdin.readline().split())\ng = [[] for i in range(n)]\nfor i in range(n-1):\n    x, y = map(int, stdin.readline().split())\n    x -= 1\n    y -= 1\n    g[x].append(y)\n    g[y].append(x)\n\nc = [1] * n\nsz = [1] * n\ndfs(0, -1)\ndfs2(0, -1, 1)\n\nans = [0] * (n-1)\nfor i in range(n):\n    for j in g[i]:\n        if j > i:\n            ans[i] = c[i]\n\nprint(max(ans))\nprint(' '.join(map(str, ans)))\n"
    },
    {
      "index": 2,
      "text": "\ndef dfs(v, p):\n    for u in graph[v]:\n        if u != p:\n            dfs(u, v)\n            c[v] += c[u]\n\ndef dfs2(v, p, keep):\n    mx = -1\n    bigChild = -1\n    for u in graph[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in graph[v]:\n        if u != p and u != bigChild:\n            dfs2(u, v, 0)\n    if bigChild != -1:\n        dfs2(bigChild, v, 1)\n        c[bigChild] += c[v]\n    mx = -1\n    bigChild = -1\n    for u in graph[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in graph[v]:\n        if u != p and u != bigChild:\n            for x in graph[u]:\n                if x != u and x != p:\n                    c[x] = c[u]\n    if keep == 0:\n        c[v] = 0\n\nn, k = map(int, input().split())\ngraph = [[] for i in range(n)]\nfor i in range(n-1):\n    x, y = map(int, input().split())\n    x -= 1\n    y -= 1\n    graph[x].append(y)\n    graph[y].append(x)\n\nc = [1] * n\nsz = [1] * n\ndfs(0, -1)\ndfs2(0, -1, 1)\n\nans = [0] * (n-1)\nfor i in range(n):\n    for j in graph[i]:\n        if j > i:\n            ans[i] = c[i]\n\nprint(max(ans))\nprint(' '.join(map(str, ans)))\n"
    },
    {
      "index": 3,
      "text": "\ndef dfs(v, p):\n    for u in g[v]:\n        if u != p:\n            dfs(u, v)\n            c[v] += c[u]\n\ndef dfs2(v, p, keep):\n    mx = -1\n    bigChild = -1\n    for u in g[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in g[v]:\n        if u != p and u != bigChild:\n            dfs2(u, v, 0)\n    if bigChild != -1:\n        dfs2(bigChild, v, 1)\n        c[bigChild] += c[v]\n    mx = -1\n    bigChild = -1\n    for u in g[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in g[v]:\n        if u != p and u != bigChild:\n            for x in g[u]:\n                if x != u and x != p:\n                    c[x] = c[u]\n    if keep == 0:\n        c[v] = 0\n\nn, k = map(int, input().split())\ng = [[] for i in range(n)]\nfor i in range(n-1):\n    x, y = map(int, input().split()) \n    x -= 1\n    y -= 1\n    g[x].append(y)\n    g[y].append(x)\n\nc = [1] * n\nsz = [1] * n\ndfs(0, -1)\ndfs2(0, -1, 1)\n\nans = [0] * (n-1)\nfor i in range(n):\n    for j in g[i]:\n        if j > i:\n            ans[i] = c[i]\n\nprint(max(ans))\nprint(' '.join(map(str, ans)))\n"
    },
    {
      "index": 4,
      "text": "\ndef dfs(v, p):\n    for u in g[v]:\n        if u != p:\n            dfs(u, v)\n            c[v] += c[u]\n\ndef dfs2(v, p, keep):\n    mx = -1\n    bigChild = -1\n    for u in g[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in g[v]:\n        if u != p and u != bigChild:\n            dfs2(u, v, 0)\n    if bigChild != -1:\n        dfs2(bigChild, v, 1)\n        c[bigChild] += c[v]\n    mx = -1\n    bigChild = -1\n    for u in g[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in g[v]:\n        if u != p and u != bigChild:\n            for x in g[u]:\n                if x != u and x != p:\n                    c[x] = c[u]\n    if keep == 0:\n        c[v] = 0\n\nn, k = map(int, input().split())\ng = [[] for i in range(n)]\nfor i in range(n-1):\n    x, y = map(int, input().split())\n    x -= 1\n    y -= 1\n    g[x].append(y)\n    g[y].append(x)\n\nc = [1] * n\nsz = [1] * n\ndfs(0, -1)\ndfs2(0, -1, 1)\n\nans = [0] * (n-1)\nfor i in range(n):\n    for j in g[i]:\n        if j > i:\n            ans[i] = c[j]\n\nprint(max(ans))\nprint(' '.join(map(str, ans)))\n"
    },
    {
      "index": 5,
      "text": "\n\nn, k = map(int, input().split())\ng = [[] for i in range(n)]\nfor i in range(n-1):\n    x, y = map(int, input().split())\n    x -= 1\n    y -= 1\n    g[x].append(y)\n    g[y].append(x)\n\nc = [1] * n\nsz = [1] * n\n\ndef dfs(v, p):\n    for u in g[v]:\n        if u != p:\n            dfs(u, v)\n            c[v] += c[u]\n\ndef dfs2(v, p, keep):\n    mx = -1\n    bigChild = -1\n    for u in g[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in g[v]:\n        if u != p and u != bigChild:\n            dfs2(u, v, 0)\n    if bigChild != -1:\n        dfs2(bigChild, v, 1)\n        c[bigChild] += c[v]\n    mx = -1\n    bigChild = -1\n    for u in g[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in g[v]:\n        if u != p and u != bigChild:\n            for x in g[u]:\n                if x != u and x != p:\n                    c[x] = c[u]\n    if keep == 0:\n        c[v] = 0\n\ndfs(0, -1)\ndfs2(0, -1, 1)\n\nans = [0] * (n-1)\nfor i in range(n):\n    for j in g[i]:\n        if j > i:\n            ans[i] = c[i]\n\nprint(max(ans))\nprint(' '.join(map(str, ans)))\n"
    },
    {
      "index": 6,
      "text": "\n\n    sz[v] = 1\ndef dfs(v, p):\n    for u in g[v]:\n        if u != p:\n            dfs(u, v)\n            sz[v] += sz[u]\n            c[v] += c[u]\n\ndef dfs2(v, p, keep):\n    mx = -1\n    bigChild = -1\n    for u in g[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in g[v]:\n        if u != p and u != bigChild:\n            dfs2(u, v, 0)\n    if bigChild != -1:\n        dfs2(bigChild, v, 1)\n        c[bigChild] += c[v]\n    mx = -1\n    bigChild = -1\n    for u in g[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in g[v]:\n        if u != p and u != bigChild:\n            for x in g[u]:\n                if x != u and x != p:\n                    c[x] = c[u]\n    if keep == 0:\n        c[v] = 0\n\nn, k = map(int, input().split())\ng = [[] for i in range(n)]\nfor i in range(n-1):\n    x, y = map(int, input().split()) \n    x -= 1\n    y -= 1\n    g[x].append(y)\n    g[y].append(x)\n\nc = [1] * n\nsz = [1] * n\ndfs(0, -1)\ndfs2(0, -1, 1)\n\nans = [0] * (n-1)\nfor i in range(n):\n    for j in g[i]:\n        if j > i:\n            ans[i] = c[i]\n\nprint(max(ans))\nprint(' '.join(map(str, ans)))\n"
    },
    {
      "index": 7,
      "text": "from collections import defaultdict\n\n\nn, k = map(int, input().split())\n\ndef dfs2(v, p, keep):\n    mx = -1\n    bigChild = -1\n    for u in g[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in g[v]:\n        if u != p and u != bigChild:\n            dfs2(u, v, 0)\n    if bigChild != -1:\n        dfs2(bigChild, v, 1)\n        c[bigChild] += c[v]\n    mx = -1\n    bigChild = -1\n    for u in g[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in g[v]:\n        if u != p and u != bigChild:\n            for x in g[u]:\n                if x != u and x != p:\n                    c[x] = c[u]\n    if keep == 0:\n        c[v] = 0\n\nn, k = map(int, input().split())\ng = [[] for i in range(n)]\nfor i in range(n-1):\n    x, y = map(int, input().split())\n    x -= 1\n    y -= 1\n    g[x].append(y)\n    g[y].append(x)\n\nc = [1] * n\nsz = [1] * n\ndfs(0, -1)\ndfs2(0, -1, 1)\n\nans = [0] * (n-1)\nfor i in range(n):\n    for j in g[i]:\n        if j > i:\n            ans[i] = c[i]\n\nprint(max(ans))\nprint(' '.join(map(str, ans)))\n"
    }
  ],
  "created": 1650439555,
  "object": "edit"
}
2022-04-20 07:26:17.138798 fix syntax errors 8 ["\ndef dfs(v, p):\n\tfor u in g[v]:\n\t\tif u != p:\n\t\t\tdfs(u, v)\n\t\t\tc[v] += c[u]\n\ndef dfs2(v, p, keep):\n    mx = -1\n    bigChild = -1\n    for u in g[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in g[v]:\n        if u != p and u != bigChild:\n            dfs2(u, v, 0)\n    if bigChild != -1:\n        dfs2(bigChild, v, 1)\n        c[bigChild] += c[v]\n    mx = -1\n    bigChild = -1\n    for u in g[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in g[v]:\n        if u != p and u != bigChild:\n            for x in g[u]:\n                if x != u and x != p:\n                    c[x] = c[u]\n    if keep == 0:\n        c[v] = 0\n\nn, k = map(int, input().split())\ng = [[] for i in range(n)]\nfor i in range(n-1):\n    x, y = map(int, input().split())\n    x -= 1\n    y -= 1\n    g[x].append(y)\n    g[y].append(x)\n\nc = [1] * n\nsz = [1] * n\ndfs(0, -1)\ndfs2(0, -1, 1)\n\nans = [0] * (n-1)\nfor i in range(n):\n    for j in g[i]:\n        if j > i:\n            ans[i] = c[i]\n\nprint(max(ans))\nprint(' '.join(map(str, ans)))\n", "#!/usr/bin/env python\nfrom sys import stdin\n\ndef dfs(v, p):\n    for u in g[v]:\n        if u != p:\n            dfs(u, v)\n            c[v] += c[u]\n\ndef dfs2(v, p, keep):\n    mx = -1\n    bigChild = -1\n    for u in g[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in g[v]:\n        if u != p and u != bigChild:\n            dfs2(u, v, 0)\n    if bigChild != -1:\n        dfs2(bigChild, v, 1)\n        c[bigChild] += c[v]\n    mx = -1\n    bigChild = -1\n    for u in g[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in g[v]:\n        if u != p and u != bigChild:\n            for x in g[u]:\n                if x != u and x != p:\n                    c[x] = c[u]\n    if keep == 0:\n        c[v] = 0\n\nn, k = map(int, stdin.readline().split())\ng = [[] for i in range(n)]\nfor i in range(n-1):\n    x, y = map(int, stdin.readline().split())\n    x -= 1\n    y -= 1\n    g[x].append(y)\n    g[y].append(x)\n\nc = [1] * n\nsz = [1] * n\ndfs(0, -1)\ndfs2(0, -1, 1)\n\nans = [0] * (n-1)\nfor i in range(n):\n    for j in g[i]:\n        if j > i:\n            ans[i] = c[i]\n\nprint(max(ans))\nprint(' '.join(map(str, ans)))\n", "\ndef dfs(v, p):\n    for u in graph[v]:\n        if u != p:\n            dfs(u, v)\n            c[v] += c[u]\n\ndef dfs2(v, p, keep):\n    mx = -1\n    bigChild = -1\n    for u in graph[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in graph[v]:\n        if u != p and u != bigChild:\n            dfs2(u, v, 0)\n    if bigChild != -1:\n        dfs2(bigChild, v, 1)\n        c[bigChild] += c[v]\n    mx = -1\n    bigChild = -1\n    for u in graph[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in graph[v]:\n        if u != p and u != bigChild:\n            for x in graph[u]:\n                if x != u and x != p:\n                    c[x] = c[u]\n    if keep == 0:\n        c[v] = 0\n\nn, k = map(int, input().split())\ngraph = [[] for i in range(n)]\nfor i in range(n-1):\n    x, y = map(int, input().split())\n    x -= 1\n    y -= 1\n    graph[x].append(y)\n    graph[y].append(x)\n\nc = [1] * n\nsz = [1] * n\ndfs(0, -1)\ndfs2(0, -1, 1)\n\nans = [0] * (n-1)\nfor i in range(n):\n    for j in graph[i]:\n        if j > i:\n            ans[i] = c[i]\n\nprint(max(ans))\nprint(' '.join(map(str, ans)))\n", "\ndef dfs(v, p):\n    for u in g[v]:\n        if u != p:\n            dfs(u, v)\n            c[v] += c[u]\n\ndef dfs2(v, p, keep):\n    mx = -1\n    bigChild = -1\n    for u in g[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in g[v]:\n        if u != p and u != bigChild:\n            dfs2(u, v, 0)\n    if bigChild != -1:\n        dfs2(bigChild, v, 1)\n        c[bigChild] += c[v]\n    mx = -1\n    bigChild = -1\n    for u in g[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in g[v]:\n        if u != p and u != bigChild:\n            for x in g[u]:\n                if x != u and x != p:\n                    c[x] = c[u]\n    if keep == 0:\n        c[v] = 0\n\nn, k = map(int, input().split())\ng = [[] for i in range(n)]\nfor i in range(n-1):\n    x, y = map(int, input().split()) \n    x -= 1\n    y -= 1\n    g[x].append(y)\n    g[y].append(x)\n\nc = [1] * n\nsz = [1] * n\ndfs(0, -1)\ndfs2(0, -1, 1)\n\nans = [0] * (n-1)\nfor i in range(n):\n    for j in g[i]:\n        if j > i:\n            ans[i] = c[i]\n\nprint(max(ans))\nprint(' '.join(map(str, ans)))\n", "\ndef dfs(v, p):\n    for u in g[v]:\n        if u != p:\n            dfs(u, v)\n            c[v] += c[u]\n\ndef dfs2(v, p, keep):\n    mx = -1\n    bigChild = -1\n    for u in g[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in g[v]:\n        if u != p and u != bigChild:\n            dfs2(u, v, 0)\n    if bigChild != -1:\n        dfs2(bigChild, v, 1)\n        c[bigChild] += c[v]\n    mx = -1\n    bigChild = -1\n    for u in g[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in g[v]:\n        if u != p and u != bigChild:\n            for x in g[u]:\n                if x != u and x != p:\n                    c[x] = c[u]\n    if keep == 0:\n        c[v] = 0\n\nn, k = map(int, input().split())\ng = [[] for i in range(n)]\nfor i in range(n-1):\n    x, y = map(int, input().split())\n    x -= 1\n    y -= 1\n    g[x].append(y)\n    g[y].append(x)\n\nc = [1] * n\nsz = [1] * n\ndfs(0, -1)\ndfs2(0, -1, 1)\n\nans = [0] * (n-1)\nfor i in range(n):\n    for j in g[i]:\n        if j > i:\n            ans[i] = c[j]\n\nprint(max(ans))\nprint(' '.join(map(str, ans)))\n", "\n\nn, k = map(int, input().split())\ng = [[] for i in range(n)]\nfor i in range(n-1):\n    x, y = map(int, input().split())\n    x -= 1\n    y -= 1\n    g[x].append(y)\n    g[y].append(x)\n\nc = [1] * n\nsz = [1] * n\n\ndef dfs(v, p):\n    for u in g[v]:\n        if u != p:\n            dfs(u, v)\n            c[v] += c[u]\n\ndef dfs2(v, p, keep):\n    mx = -1\n    bigChild = -1\n    for u in g[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in g[v]:\n        if u != p and u != bigChild:\n            dfs2(u, v, 0)\n    if bigChild != -1:\n        dfs2(bigChild, v, 1)\n        c[bigChild] += c[v]\n    mx = -1\n    bigChild = -1\n    for u in g[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in g[v]:\n        if u != p and u != bigChild:\n            for x in g[u]:\n                if x != u and x != p:\n                    c[x] = c[u]\n    if keep == 0:\n        c[v] = 0\n\ndfs(0, -1)\ndfs2(0, -1, 1)\n\nans = [0] * (n-1)\nfor i in range(n):\n    for j in g[i]:\n        if j > i:\n            ans[i] = c[i]\n\nprint(max(ans))\nprint(' '.join(map(str, ans)))\n", "\n\n    sz[v] = 1\ndef dfs(v, p):\n    for u in g[v]:\n        if u != p:\n            dfs(u, v)\n            sz[v] += sz[u]\n            c[v] += c[u]\n\ndef dfs2(v, p, keep):\n    mx = -1\n    bigChild = -1\n    for u in g[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in g[v]:\n        if u != p and u != bigChild:\n            dfs2(u, v, 0)\n    if bigChild != -1:\n        dfs2(bigChild, v, 1)\n        c[bigChild] += c[v]\n    mx = -1\n    bigChild = -1\n    for u in g[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in g[v]:\n        if u != p and u != bigChild:\n            for x in g[u]:\n                if x != u and x != p:\n                    c[x] = c[u]\n    if keep == 0:\n        c[v] = 0\n\nn, k = map(int, input().split())\ng = [[] for i in range(n)]\nfor i in range(n-1):\n    x, y = map(int, input().split()) \n    x -= 1\n    y -= 1\n    g[x].append(y)\n    g[y].append(x)\n\nc = [1] * n\nsz = [1] * n\ndfs(0, -1)\ndfs2(0, -1, 1)\n\nans = [0] * (n-1)\nfor i in range(n):\n    for j in g[i]:\n        if j > i:\n            ans[i] = c[i]\n\nprint(max(ans))\nprint(' '.join(map(str, ans)))\n", "from collections import defaultdict\n\n\nn, k = map(int, input().split())\n\ndef dfs2(v, p, keep):\n    mx = -1\n    bigChild = -1\n    for u in g[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in g[v]:\n        if u != p and u != bigChild:\n            dfs2(u, v, 0)\n    if bigChild != -1:\n        dfs2(bigChild, v, 1)\n        c[bigChild] += c[v]\n    mx = -1\n    bigChild = -1\n    for u in g[v]:\n        if u != p and sz[u] > mx:\n            mx = sz[u]\n            bigChild = u\n    for u in g[v]:\n        if u != p and u != bigChild:\n            for x in g[u]:\n                if x != u and x != p:\n                    c[x] = c[u]\n    if keep == 0:\n        c[v] = 0\n\nn, k = map(int, input().split())\ng = [[] for i in range(n)]\nfor i in range(n-1):\n    x, y = map(int, input().split())\n    x -= 1\n    y -= 1\n    g[x].append(y)\n    g[y].append(x)\n\nc = [1] * n\nsz = [1] * n\ndfs(0, -1)\ndfs2(0, -1, 1)\n\nans = [0] * (n-1)\nfor i in range(n):\n    for j in g[i]:\n        if j > i:\n            ans[i] = c[i]\n\nprint(max(ans))\nprint(' '.join(map(str, ans)))\n"]
2022-04-20 07:26:17.139061 size on output set 8
2022-04-20 07:26:17.139079 num operations 1
2022-04-20 07:26:17.139089 size on input set 1
2022-04-20 07:26:17.139358 using api key sourya
2022-04-20 07:26:27.318219 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef dfs(start, parent):\n    global n, k, edges, visited, color\n    color[start] = k\n    visited[start] = True\n    for edge in edges[start]:\n        if edge == parent:\n            continue\n        if not visited[edge]:\n            k += 1\n            dfs(edge, start)\n        else:\n            color[start] = min(color[start], color[edge])\n\nn, k = map(int, input().split())\nedges = [[] for _ in range(n)]\nfor i in range(n-1):\n    x, y = map(int, input().split())\n    edges[x-1].append(y-1)\n    edges[y-1].append(x-1)\nvisited = [False] * n\ncolor = [0] * n\ndfs(0, -1)\nprint(k)\nprint(' '.join(str(color[i]) for i in range(1, n)))\n"
    },
    {
      "index": 1,
      "text": "\ndef dfs(start, parent):\n    global n, k, edges, visited\n    visited[start] = True\n    for edge in edges[start]:\n        if edge == parent:\n            continue\n        if not visited[edge]:\n            dfs(edge, start)\n        else:\n            k -= 1\n\nn, k = map(int, input().split())\nedges = [[] for _ in range(n)]\nfor i in range(n-1):\n    x, y = map(int, input().split())\n    edges[x-1].append(y-1)\n    edges[y-1].append(x-1)\nvisited = [False] * n\ndfs(0, -1)\nprint(k+1)\nprint(' '.join(str(i % (k+1) + 1) for i in range(n)))\n"
    },
    {
      "index": 2,
      "text": "\n\ndef dfs(start, parent):\n    global n, k, edges, visited\n    visited[start] = True\n    for edge in edges[start]:\n        if edge == parent:\n            continue\n        if not visited[edge]:\n            dfs(edge, start)\n        else:\n            k -= 1\n\nn, k = map(int, input().split())\nedges = [[] for _ in range(n)]\nfor i in range(n-1):\n    x, y = map(int, input().split())\n    edges[x-1].append(y-1)\n    edges[y-1].append(x-1)\nvisited = [False] * n\ndfs(0, -1)\nprint(k+1)\nprint(' '.join(str(i % (k+1) + 1) for i in range(n)))\n"
    },
    {
      "index": 3,
      "text": "\ndef dfs(start, parent):\n    global n, k, edges, visited, colors\n    colors[start] = k\n    visited[start] = True\n    for edge in edges[start]:\n        if edge == parent:\n            continue\n        if not visited[edge]:\n            dfs(edge, start)\n        else:\n            colors[start] = k\n            k -= 1\n\nn, k = map(int, input().split())\nedges = [[] for _ in range(n)]\nfor i in range(n-1):\n    x, y = map(int, input().split())\n    edges[x-1].append(y-1)\n    edges[y-1].append(x-1)\nvisited = [False] * n\ncolors = [0] * n\ndfs(0, -1)\nprint(k+1)\nprint(' '.join(str(i % (k+1) + 1) for i in range(n-1)))\n"
    },
    {
      "index": 4,
      "text": "\ndef dfs(start, parent):\n    global n, k, edges, visited, colors\n    colors[start] = k\n    visited[start] = True\n    for edge in edges[start]:\n        if edge == parent:\n            continue\n        if not visited[edge]:\n            dfs(edge, start)\n    k -= 1\n\nn, k = map(int, input().split())\nedges = [[] for _ in range(n)]\nfor i in range(n-1):\n    x, y = map(int, input().split())\n    edges[x-1].append(y-1)\n    edges[y-1].append(x-1)\nvisited = [False] * n\ndfs(0, -1)\nprint(k+1)\nprint(' '.join(str(i % (k+1) + 1) for i in range(n-1)))\n"
    },
    {
      "index": 5,
      "text": "\ndef dfs(start, parent):\n    global n, k, edges, visited\n    visited[start] = True\n    for edge in edges[start]:\n        if edge == parent:\n            continue\n        if not visited[edge]:\n            dfs(edge, start)\n        else:\n            k -= 1\n\nn, k = map(int, input().split())\nedges = [[] for _ in range(n)]\nfor i in range(n-1):\n    x, y = map(int, input().split())\n    edges[x-1].append(y-1)\n    edges[y-1].append(x-1)\nvisited = [False] * n\ndfs(0, -1)\nprint(k+1)\nprint(' '.join(str(i % (k+1) + 1) for i in range(n-1)))\n"
    },
    {
      "index": 6,
      "text": "\ndef dfs(start, parent):\n    global n, k, edges, visited\n    visited[start] = True\n    for edge in edges[start]:\n        if edge == parent:\n            continue\n        if not visited[edge]:\n            dfs(edge, start)\n        else:\n            k -= 1\n\nn, k = map(int, input().split())\nedges = [[] for _ in range(n)]\nfor i in range(n-1):\n    x, y = map(int, input().split())\n    edges[x-1].append(y-1)\n    edges[y-1].append(x-1)\nvisited = [False] * n\ndfs(0, -1)\nprint(k+1)\nprint(' '.join(str(i % (k+1) + 1) for i in range(n-1)))\n"
    },
    {
      "index": 7,
      "text": "\n\ndef dfs(start, parent):\n    global n, k, edges, visited\n    visited[start] = True\n    for edge in edges[start]:\n        if edge == parent:\n            continue\n        if not visited[edge]:\n            dfs(edge, start)\n        else:\n            k -= 1\n\nn, k = map(int, input().split())\nedges = [[] for _ in range(n)]\nfor i in range(n-1):\n    x, y = map(int, input().split())\n    edges[x-1].append(y-1)\n    edges[y-1].append(x-1)\nvisited = [False] * n\ndfs(0, -1)\nprint(k+1)\nprint(' '.join(str(i % (k+1) + 1) for i in range(n)))\n"
    }
  ],
  "created": 1650439577,
  "object": "edit"
}
2022-04-20 07:26:27.318608 fix syntax errors 8 ["\ndef dfs(start, parent):\n    global n, k, edges, visited, color\n    color[start] = k\n    visited[start] = True\n    for edge in edges[start]:\n        if edge == parent:\n            continue\n        if not visited[edge]:\n            k += 1\n            dfs(edge, start)\n        else:\n            color[start] = min(color[start], color[edge])\n\nn, k = map(int, input().split())\nedges = [[] for _ in range(n)]\nfor i in range(n-1):\n    x, y = map(int, input().split())\n    edges[x-1].append(y-1)\n    edges[y-1].append(x-1)\nvisited = [False] * n\ncolor = [0] * n\ndfs(0, -1)\nprint(k)\nprint(' '.join(str(color[i]) for i in range(1, n)))\n", "\ndef dfs(start, parent):\n    global n, k, edges, visited\n    visited[start] = True\n    for edge in edges[start]:\n        if edge == parent:\n            continue\n        if not visited[edge]:\n            dfs(edge, start)\n        else:\n            k -= 1\n\nn, k = map(int, input().split())\nedges = [[] for _ in range(n)]\nfor i in range(n-1):\n    x, y = map(int, input().split())\n    edges[x-1].append(y-1)\n    edges[y-1].append(x-1)\nvisited = [False] * n\ndfs(0, -1)\nprint(k+1)\nprint(' '.join(str(i % (k+1) + 1) for i in range(n)))\n", "\n\ndef dfs(start, parent):\n    global n, k, edges, visited\n    visited[start] = True\n    for edge in edges[start]:\n        if edge == parent:\n            continue\n        if not visited[edge]:\n            dfs(edge, start)\n        else:\n            k -= 1\n\nn, k = map(int, input().split())\nedges = [[] for _ in range(n)]\nfor i in range(n-1):\n    x, y = map(int, input().split())\n    edges[x-1].append(y-1)\n    edges[y-1].append(x-1)\nvisited = [False] * n\ndfs(0, -1)\nprint(k+1)\nprint(' '.join(str(i % (k+1) + 1) for i in range(n)))\n", "\ndef dfs(start, parent):\n    global n, k, edges, visited, colors\n    colors[start] = k\n    visited[start] = True\n    for edge in edges[start]:\n        if edge == parent:\n            continue\n        if not visited[edge]:\n            dfs(edge, start)\n        else:\n            colors[start] = k\n            k -= 1\n\nn, k = map(int, input().split())\nedges = [[] for _ in range(n)]\nfor i in range(n-1):\n    x, y = map(int, input().split())\n    edges[x-1].append(y-1)\n    edges[y-1].append(x-1)\nvisited = [False] * n\ncolors = [0] * n\ndfs(0, -1)\nprint(k+1)\nprint(' '.join(str(i % (k+1) + 1) for i in range(n-1)))\n", "\ndef dfs(start, parent):\n    global n, k, edges, visited, colors\n    colors[start] = k\n    visited[start] = True\n    for edge in edges[start]:\n        if edge == parent:\n            continue\n        if not visited[edge]:\n            dfs(edge, start)\n    k -= 1\n\nn, k = map(int, input().split())\nedges = [[] for _ in range(n)]\nfor i in range(n-1):\n    x, y = map(int, input().split())\n    edges[x-1].append(y-1)\n    edges[y-1].append(x-1)\nvisited = [False] * n\ndfs(0, -1)\nprint(k+1)\nprint(' '.join(str(i % (k+1) + 1) for i in range(n-1)))\n", "\ndef dfs(start, parent):\n    global n, k, edges, visited\n    visited[start] = True\n    for edge in edges[start]:\n        if edge == parent:\n            continue\n        if not visited[edge]:\n            dfs(edge, start)\n        else:\n            k -= 1\n\nn, k = map(int, input().split())\nedges = [[] for _ in range(n)]\nfor i in range(n-1):\n    x, y = map(int, input().split())\n    edges[x-1].append(y-1)\n    edges[y-1].append(x-1)\nvisited = [False] * n\ndfs(0, -1)\nprint(k+1)\nprint(' '.join(str(i % (k+1) + 1) for i in range(n-1)))\n", "\ndef dfs(start, parent):\n    global n, k, edges, visited\n    visited[start] = True\n    for edge in edges[start]:\n        if edge == parent:\n            continue\n        if not visited[edge]:\n            dfs(edge, start)\n        else:\n            k -= 1\n\nn, k = map(int, input().split())\nedges = [[] for _ in range(n)]\nfor i in range(n-1):\n    x, y = map(int, input().split())\n    edges[x-1].append(y-1)\n    edges[y-1].append(x-1)\nvisited = [False] * n\ndfs(0, -1)\nprint(k+1)\nprint(' '.join(str(i % (k+1) + 1) for i in range(n-1)))\n", "\n\ndef dfs(start, parent):\n    global n, k, edges, visited\n    visited[start] = True\n    for edge in edges[start]:\n        if edge == parent:\n            continue\n        if not visited[edge]:\n            dfs(edge, start)\n        else:\n            k -= 1\n\nn, k = map(int, input().split())\nedges = [[] for _ in range(n)]\nfor i in range(n-1):\n    x, y = map(int, input().split())\n    edges[x-1].append(y-1)\n    edges[y-1].append(x-1)\nvisited = [False] * n\ndfs(0, -1)\nprint(k+1)\nprint(' '.join(str(i % (k+1) + 1) for i in range(n)))\n"]
2022-04-20 07:26:27.318797 size on output set 6
