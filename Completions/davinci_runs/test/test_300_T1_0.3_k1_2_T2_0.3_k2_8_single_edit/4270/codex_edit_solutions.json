["#!/usr/bin/env python3\n\nimport heapq\n\ndef main():\n    n = int(input())\n    ingredients = [float(x) for x in input().split()]\n    heapq.heapify(ingredients)\n    while len(ingredients) > 1:\n        heapq.heappush(ingredients, (heapq.heappop(ingredients) + heapq.heappop(ingredients)) / 2)\n    print(ingredients[0])\n\nif __name__ == '__main__':\n    main()\n", "import heapq\n\ndef main():\n    n = int(input())\n    ingredients = [int(x) for x in input().split()]\n    heapq.heapify(ingredients)\n    while len(ingredients) > 1:\n        heapq.heappush(ingredients, (heapq.heappop(ingredients) + heapq.heappop(ingredients)) / 2)\n    print(ingredients[0])\n\nif __name__ == '__main__':\n    main()\n", "\nimport heapq\n\ndef main():\n    n = int(input())  # number of ingredients\n    ingredients = [int(x) for x in input().split()]  # list of ingredients\n    heapq.heapify(ingredients)  # heapify the ingredients\n    while len(ingredients) > 1:  # while there is more than one ingredient\n        heapq.heappush(ingredients, (heapq.heappop(ingredients) + heapq.heappop(ingredients)) / 2)  # push the average of the two smallest ingredients\n    print(ingredients[0])  # print the final ingredient\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n = int(input())\n    v = list(map(int, input().split()))\n    v.sort()\n    while len(v) > 1:\n        a = v.pop()\n        b = v.pop()\n        v.append((a + b) / 2)\n        v.sort()\n    print(v[0])\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport heapq\n\ndef main():\n    n = int(sys.stdin.readline())\n    ingredients = [int(x) for x in sys.stdin.readline().split()]\n    heapq.heapify(ingredients)\n    while len(ingredients) > 1:\n        heapq.heappush(ingredients, (heapq.heappop(ingredients) + heapq.heappop(ingredients)) / 2)\n    print(ingredients[0])\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\nimport heapq\n\ndef main():\n    n = int(sys.stdin.readline())\n    ingredients = [int(x) for x in sys.stdin.readline().split()]\n    heapq.heapify(ingredients)\n    while len(ingredients) > 1:\n        heapq.heappush(ingredients, (heapq.heappop(ingredients) + heapq.heappop(ingredients)) / 2)\n    print(ingredients[0])\n\nif __name__ == '__main__':\n    main()\n", "\nimport heapq\n\ndef main():\n    n = int(input())\n    ingredients = [int(x) for x in input().split()]  # list of ingredients\n    heapq.heapify(ingredients)  # heapify the list\n    while len(ingredients) > 1:  # while there are more than 1 ingredient\n        heapq.heappush(ingredients, (heapq.heappop(ingredients) + heapq.heappop(ingredients)) / 2)  # add the average of the first 2 ingredients\n    print(ingredients[0])  # print the average of the ingredients\n\nif __name__ == '__main__':\n    main()\n", "\nimport heapq\n\ndef main():\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    heapq.heapify(arr)\n    while len(arr) > 1:\n        heapq.heappush(arr, (heapq.heappop(arr) + heapq.heappop(arr)) / 2)\n    print(arr[0])\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport heapq\n\ndef main():\n    n = int(input())\n    ingredients = [int(x) for x in input().split()]\n    heapq.heapify(ingredients)\n    while len(ingredients) > 1:\n        heapq.heappush(ingredients, (heapq.heappop(ingredients) + heapq.heappop(ingredients)) / 2)\n    print(int(ingredients[0]))\n\nif __name__ == '__main__':\n    main()\n"]