["#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    people = [[] for _ in range(N)]\n    for i in range(N):\n        A_i = int(sys.stdin.readline())\n        for j in range(A_i):\n            x_ij, y_ij = map(int, sys.stdin.readline().split())\n            people[i].append((x_ij-1, y_ij))\n    print(N - solve(people))\n\ndef solve(people):\n    N = len(people)\n    for i in range(N):\n        for j in range(i+1, N):\n            if is_consistent(people[i], people[j]):\n                return 2\n    return 1\n\ndef is_consistent(person1, person2):\n    for x_i1, y_i1 in person1:\n        for x_i2, y_i2 in person2:\n            if x_i1 == x_i2 and y_i1 != y_i2:\n                return True\n    return False\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    people = [[] for _ in range(N)]\n    for i in range(N):\n        A_i = int(sys.stdin.readline())\n        for j in range(A_i):\n            x_ij, y_ij = map(int, sys.stdin.readline().split())\n            people[i].append((x_ij-1, y_ij))\n    print(solve(people))\n\ndef solve(people):\n    N = len(people)\n    for i in range(2**N):\n        if is_satisfied(people, i):\n            return bin(i).count('1')\n    return 0\n\ndef is_satisfied(people, i):\n    for j in range(len(people)):\n        if (i >> j) & 1:\n            for x_ij, y_ij in people[j]:\n                if (i >> (x_ij-1)) & 1 != y_ij:\n                    return False\n    return False\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline().rstrip())\n    persons = [[] for _ in range(N)]\n    for i in range(N):\n        A_i = int(sys.stdin.readline().rstrip())\n        for j in range(A_i):\n            x_ij, y_ij = map(int, sys.stdin.readline().rstrip().split())\n            persons[i].append((x_ij, y_ij))\n\n    print(solve(N, persons))\n\ndef solve(N, persons):\n    \"\"\"\n    N: int\n    persons: list[list[tuple[int, int]]]\n    \"\"\"\n    # dp[i][j] := i\u756a\u76ee\u306e\u4eba\u304chonest\u3067\u3042\u308b\u3068\u304d\u306b\u3001j\u756a\u76ee\u306e\u4eba\u304chonest\u3067\u3042\u308b\u3068\u304d\u306b\u3001\n    # \u305d\u308c\u305e\u308c\u306e\u4eba\u306e\u8a3c\u8a00\u304c\u77db\u76fe\u3057\u306a\u3044\u3088\u3046\u306a\u72b6\u614b\u306e\u6570\n    dp = [[0 for _ in range(2)] for _ in range(N)]\n    dp[0][0] = 1\n    dp[0][1] = 1\n    for i in range(1, N):\n        for j in range(2):\n            for testimony in persons[i]:\n                x_ij, y_ij = testimony\n                if j == 1 and y_ij == 1:\n                    dp[i][j] += dp[x_ij - 1][1]\n                elif j == 0 and y_ij == 0:\n                    dp[i][j] += dp[x_ij - 1][0]\n    return sum(dp[N - 1])\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline().rstrip())\n    persons = [[] for i in range(N)]\n    for i in range(N):\n        A_i = int(sys.stdin.readline().rstrip())\n        for j in range(A_i):\n            x_ij, y_ij = map(int, sys.stdin.readline().rstrip().split())\n            persons[i].append((x_ij, y_ij))\n\n    print(solve(N, persons))\n\ndef solve(N, persons):\n    \"\"\"\n    N: int\n    persons: list[list[tuple[int, int]]]\n    \"\"\"\n    # dp[i][j] := i\u756a\u76ee\u306e\u4eba\u304chonest\u3067\u3042\u308b\u3068\u304d\u306b\u3001\n    # j\u756a\u76ee\u306e\u4eba\u304chonest\u3067\u3042\u308b\u3068\u304d\u306b\u3001\n    # \u305d\u308c\u305e\u308c\u306e\u4eba\u306e\u8a3c\u8a00\u304c\u77db\u76fe\u3057\u306a\u3044\u3088\u3046\u306a\u72b6\u614b\u306e\u6570\u3092\u8868\u3059\n    dp = [[0 for _ in range(2)] for _ in range(N)]\n    dp[0][0] = 1\n    dp[0][1] = 1\n    for i in range(1, N):\n        for j in range(2):\n            for testimony in persons[i]:\n                x_ij, y_ij = testimony\n                if j == 1 and y_ij == 1:\n                    dp[i][j] += dp[x_ij - 1][1]\n                elif j == 0 and y_ij == 0:\n                    dp[i][j] += dp[x_ij - 1][0]\n    return sum(dp[N - 1])\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline().rstrip())\n    persons = [[] for i in range(N)]\n    for i in range(N):\n        A_i = int(sys.stdin.readline().rstrip())\n        for j in range(A_i):\n            x_ij, y_ij = map(int, sys.stdin.readline().rstrip().split())\n            persons[i].append((x_ij, y_ij))\n\n    print(solve(N, persons))\n\ndef solve(N, persons):\n    \"\"\"\n    N: int\n    persons: list[list[tuple[int, int]]]\n    \"\"\"\n    # dp[i][j] := i\u756a\u76ee\u306e\u4eba\u304chonest\u3067\u3042\u308b\u3068\u304d\u306b\u3001j\u756a\u76ee\u306e\u4eba\u304chonest\u3067\u3042\u308b\u3068\u304d\u306b\u3001\n    # \u305d\u308c\u305e\u308c\u306e\u4eba\u306e\u8a3c\u8a00\u304c\u77db\u76fe\u3057\u306a\u3044\u3088\u3046\u306a\u72b6\u614b\u306e\u6570\n    dp = [[0 for _ in range(2)] for _ in range(N)]\n    dp[0][0] = 1\n    dp[0][1] = 1\n    for i in range(1, N):\n        for j in range(2):\n            for testimony in persons[i]:\n                x_ij, y_ij = testimony\n                if j == 1 and y_ij == 1:\n                    dp[i][j] += dp[x_ij - 1][1]\n                elif j == 0 and y_ij == 0:\n                    dp[i][j] += dp[x_ij - 1][0]\n    return sum(dp[N - 1]) % (10 ** 9 + 7)\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport math\n\nimport sys\n\ndef input():\n    return sys.stdin.readline().strip()\n\ndef solve(people):\n    N = len(people)\n    for i in range(N):\n        for j in range(i+1, N):\n            if is_consistent(people[i], people[j]):\n                return 2\n    return 1\n\ndef is_consistent(person1, person2):\n    for x_i1, y_i1 in person1:\n        for x_i2, y_i2 in person2:\n            if x_i1 == x_i2 and y_i1 != y_i2:\n                return True\n    return False\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    people = [[] for _ in range(N)]\n    for i in range(N):\n        A_i = int(sys.stdin.readline())\n        for j in range(A_i):\n            x_ij, y_ij = map(int, sys.stdin.readline().split())\n            people[i].append((x_ij-1, y_ij))\n    print(N - solve(people))\n\ndef solve(people):\n    N = len(people)\n    for i in range(N):\n        for j in range(i+1, N):\n            if is_consistent(people[i], people[j]):\n                return 2\n    return 1\n\ndef is_consistent(person1, person2):\n    for x_i1, y_i1 in person1:\n        for x_i2, y_i2 in person2:\n            if x_i1 == x_i2 and y_i1 != y_i2:\n                return True\n    return False\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    people = [[] for _ in range(N)] # people[i] = [(x_i1, y_i1), (x_i2, y_i2), ...]\n    for i in range(N):\n        A_i = int(sys.stdin.readline())\n        for j in range(A_i):\n            x_ij, y_ij = map(int, sys.stdin.readline().split())\n            people[i].append((x_ij-1, y_ij))\n    print(N - solve(people))\n\ndef solve(people):\n    N = len(people)\n    for i in range(N):\n        for j in range(i+1, N):\n            if is_consistent(people[i], people[j]):\n                return 2\n    return 1\n\ndef is_consistent(person1, person2):\n    for x_i1, y_i1 in person1:\n        for x_i2, y_i2 in person2:\n            if x_i1 == x_i2 and y_i1 != y_i2:\n                return True\n    return False\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    people = [[] for _ in range(N)]\n    for i in range(N):\n        A_i = int(sys.stdin.readline())\n        for j in range(A_i):\n            x_ij, y_ij = map(int, sys.stdin.readline().split())\n            people[i].append((x_ij-1, y_ij))\n    print(N - solve(people))\n\ndef solve(people):\n    N = len(people)\n    for i in range(N):\n        for j in range(i+1, N):\n            if is_consistent(people[i], people[j]):\n                return 2\n    return 1\n\ndef is_consistent(person1, person2):\n    for x_i1, y_i1 in person1:\n        for x_i2, y_i2 in person2:\n            if x_i1 == x_i2 and y_i1 != y_i2:\n                return True\n    return False\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline().rstrip())\n    persons = [[] for i in range(N)]\n    for i in range(N):\n        A_i = int(sys.stdin.readline().rstrip())\n        for j in range(A_i):\n            x_ij, y_ij = map(int, sys.stdin.readline().rstrip().split())\n            persons[i].append((x_ij, y_ij))\n\n    print(solve(N, persons))\n\ndef solve(N, persons):\n    \"\"\"\n    N: int\n    persons: list[list[tuple[int, int]]]\n    \"\"\"\n    # dp[i][j] := i\u756a\u76ee\u306e\u4eba\u304chonest\u3067\u3042\u308b\u3068\u304d\u306b\u3001j\u756a\u76ee\u306e\u4eba\u304chonest\u3067\u3042\u308b\u3068\u304d\u306b\u3001\n    # \u305d\u308c\u305e\u308c\u306e\u4eba\u306e\u8a3c\u8a00\u304c\u77db\u76fe\u3057\u306a\u3044\u3088\u3046\u306a\u72b6\u614b\u306e\u6570\n    dp = [[0 for _ in range(2)] for _ in range(N)]\n    dp[0][0] = 1\n    dp[0][1] = 1\n    for i in range(1, N):\n        for j in range(2):\n            for testimony in persons[i]:\n                x_ij, y_ij = testimony\n                if j == 1 and y_ij == 1:\n                    dp[i][j] += dp[x_ij - 1][1]\n                elif j == 0 and y_ij == 0:\n                    dp[i][j] += dp[x_ij - 1][0]\n    print(dp)\n    return sum(dp[N - 1])\n\nif __name__ == \"__main__\":\n    main()\n", "\nfrom typing import List, Tuple\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline().rstrip())\n    persons = [[] for i in range(N)]\n    for i in range(N):\n        A_i = int(sys.stdin.readline().rstrip())\n        for j in range(A_i):\n            x_ij, y_ij = map(int, sys.stdin.readline().rstrip().split())\n            persons[i].append((x_ij, y_ij))\n\n    print(solve(N, persons))\n\ndef solve(N: int, persons: List[List[Tuple[int, int]]]) -> int:\n    \"\"\"\n    N: int\n    persons: list[list[tuple[int, int]]]\n    \"\"\"\n    # dp[i][j] := i\u756a\u76ee\u306e\u4eba\u304chonest\u3067\u3042\u308b\u3068\u304d\u306b\u3001j\u756a\u76ee\u306e\u4eba\u304chonest\u3067\u3042\u308b\u3068\u304d\u306b\u3001\n    # \u305d\u308c\u305e\u308c\u306e\u4eba\u306e\u8a3c\u8a00\u304c\u77db\u76fe\u3057\u306a\u3044\u3088\u3046\u306a\u72b6\u614b\u306e\u6570\n    dp = [[0 for _ in range(2)] for _ in range(N)]\n    dp[0][0] = 1\n    dp[0][1] = 1\n    for i in range(1, N):\n        for j in range(2):\n            for testimony in persons[i]:\n                x_ij, y_ij = testimony\n                if j == 1 and y_ij == 1:\n                    dp[i][j] += dp[x_ij - 1][1]\n                elif j == 0 and y_ij == 0:\n                    dp[i][j] += dp[x_ij - 1][0]\n    return sum(dp[N - 1])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline().rstrip())\n    persons = [[] for i in range(N)]\n    for i in range(N):\n        A_i = int(sys.stdin.readline().rstrip())\n        for j in range(A_i):\n            x_ij, y_ij = map(int, sys.stdin.readline().rstrip().split())\n            persons[i].append((x_ij, y_ij))\n\n    print(solve(N, persons))\n\ndef solve(N, persons):\n    \"\"\"\n    N: int\n    persons: list[list[tuple[int, int]]]\n    \"\"\"\n    # dp[i][j] := i\u756a\u76ee\u306e\u4eba\u304chonest\u3067\u3042\u308b\u3068\u304d\u306b\u3001j\u756a\u76ee\u306e\u4eba\u304chonest\u3067\u3042\u308b\u3068\u304d\u306b\u3001\n    # \u305d\u308c\u305e\u308c\u306e\u4eba\u306e\u8a3c\u8a00\u304c\u77db\u76fe\u3057\u306a\u3044\u3088\u3046\u306a\u72b6\u614b\u306e\u6570\n    dp = [[0 for _ in range(2)] for _ in range(N)]\n    dp[0][0] = 1\n    dp[0][1] = 1\n    for i in range(1, N):\n        for j in range(2):\n            for testimony in persons[i]:\n                x_ij, y_ij = testimony\n                if j == 1 and y_ij == 1:\n                    dp[i][j] += dp[x_ij - 1][1]\n                elif j == 0 and y_ij == 0:\n                    dp[i][j] += dp[x_ij - 1][0]\n    return sum(dp[N - 1]) % (10 ** 9 + 7)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline().rstrip())\n    persons = [[] for i in range(N)]\n    for i in range(N):\n        A_i = int(sys.stdin.readline().rstrip())\n        for j in range(A_i):\n            x_ij, y_ij = map(int, sys.stdin.readline().rstrip().split())\n            persons[i].append((x_ij, y_ij))\n\n    print(solve(N, persons))\n\ndef solve(N, persons):\n    \"\"\"\n    N: int\n    persons: list[list[tuple[int, int]]]\n    \"\"\"\n    # dp[i][j] := i\u756a\u76ee\u306e\u4eba\u304chonest\u3067\u3042\u308b\u3068\u304d\u306b\u3001j\u756a\u76ee\u306e\u4eba\u304chonest\u3067\u3042\u308b\u3068\u304d\u306b\u3001\n    # \u305d\u308c\u305e\u308c\u306e\u4eba\u306e\u8a3c\u8a00\u304c\u77db\u76fe\u3057\u306a\u3044\u3088\u3046\u306a\u72b6\u614b\u306e\u6570\n    dp = [[0 for _ in range(2)] for _ in range(N)]\n    dp[0][0] = dp[0][1] = 1\n    for i in range(1, N):\n        for j in range(2):\n            for testimony in persons[i]:\n                x_ij, y_ij = testimony\n                if j == 1 and y_ij == 1:\n                    dp[i][j] += dp[x_ij - 1][1]\n                elif j == 0 and y_ij == 0:\n                    dp[i][j] += dp[x_ij - 1][0]\n    return sum(dp[N - 1])\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    people = [[] for i in range(N)]\n    for i in range(N):\n        A_i = int(sys.stdin.readline())\n        for j in range(A_i):\n            x_ij, y_ij = map(int, sys.stdin.readline().split())\n            people[i].append((x_ij-1, y_ij))\n    print(N - solve(people))\n\ndef solve(people):\n    N = len(people)\n    for i in range(N):\n        for j in range(i+1, N):\n            if is_consistent(people[i], people[j]):\n                return 2\n    return 1\n\ndef is_consistent(person1, person2):\n    for x_i1, y_i1 in person1:\n        for x_i2, y_i2 in person2:\n            if x_i1 == x_i2 and y_i1 != y_i2:\n                return True\n    return False\n\nif __name__ == '__main__':\n    main()\n"]