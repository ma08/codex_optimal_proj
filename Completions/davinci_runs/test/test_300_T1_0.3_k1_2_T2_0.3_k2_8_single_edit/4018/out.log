2022-04-18 19:36:56.025368 """
The only difference between the easy and the hard versions is constraints.

A subsequence is a string that can be derived from another string by deleting some or no symbols without changing the order of the remaining symbols. Characters to be deleted are not required to go successively, there can be any gaps between them. For example, for the string "abaca" the following strings are subsequences: "abaca", "aba", "aaa", "a" and "" (empty string). But the following strings are not subsequences: "aabaca", "cb" and "bcaa".

You are given a string $s$ consisting of $n$ lowercase Latin letters.

In one move you can take any subsequence $t$ of the given string and add it to the set $S$. The set $S$ can't contain duplicates. This move costs $n - |t|$, where $|t|$ is the length of the added subsequence (i.e. the price equals to the number of the deleted characters).

Your task is to find out the minimum possible total cost to obtain a set $S$ of size $k$ or report that it is impossible to do so.


-----Input-----

The first line of the input contains two integers $n$ and $k$ ($1 \le n \le 100, 1 \le k \le 10^{12}$) — the length of the string and the size of the set, correspondingly.

The second line of the input contains a string $s$ consisting of $n$ lowercase Latin letters.


-----Output-----

Print one integer — if it is impossible to obtain the set $S$ of size $k$, print -1. Otherwise, print the minimum possible total cost to do it.


-----Examples-----
Input
4 5
asdf

Output
4

Input
5 6
aaaaa

Output
15

Input
5 7
aaaaa

Output
-1

Input
10 100
ajihiushda

Output
233



-----Note-----

In the first example we can generate $S$ = { "asdf", "asd", "adf", "asf", "sdf" }. The cost of the first element in $S$ is $0$ and the cost of the others is $1$. So the total cost of $S$ is $4$.
"""
2022-04-18 19:36:56.025413 --------------------------
2022-04-18 19:37:13.937739 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n    if k > 2**n:\n        print(-1)\n        return\n    ans = 0\n    for i in range(n):\n        if k % 2 == 1:\n            ans += n - i\n            k -= 1\n        k //= 2\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    s = sys.stdin.readline().strip()\n    if n == k:\n        print(0)\n        return\n    if k > n * (n + 1) / 2:\n        print(-1)\n        return\n    if n > k:\n        print(n - k)\n        return\n    if k % n == 0:\n        print(0)\n        return\n    print(n - k % n)\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1650310616,
  "id": "cmpl-4yRT6BBdOEXiREQWprIm3hybsuaIN",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-18 19:37:13.938007 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef main():\n    n, k = map(int, input().split())\n    s = input()\n    if k > 2**n:\n        print(-1)\n        return\n    ans = 0\n    for i in range(n):\n        if k % 2 == 1:\n            ans += n - i\n            k -= 1\n        k //= 2\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-18 19:37:13.938046 REASON stop
2022-04-18 19:37:13.957959 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    s = sys.stdin.readline().strip()\n    if n == k:\n        print(0)\n        return\n    if k > n * (n + 1) / 2:\n        print(-1)\n        return\n    if n > k:\n        print(n - k)\n        return\n    if k % n == 0:\n        print(0)\n        return\n    print(n - k % n)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-18 19:37:13.958100 REASON stop
