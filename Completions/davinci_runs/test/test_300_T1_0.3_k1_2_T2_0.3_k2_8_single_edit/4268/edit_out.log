2022-04-20 07:22:15.791795 num operations 1
2022-04-20 07:22:15.791820 size on input set 1
2022-04-20 07:22:15.792056 using api key derek
2022-04-20 07:22:15.914906 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 07:22:17.416937 using api key derek
2022-04-20 07:22:17.453221 in retry 5 3.0 <class 'Exception'>, Retrying in 3 seconds...
2022-04-20 07:22:20.456684 using api key jaanu
2022-04-20 07:22:26.944813 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    N, D = map(int, input().split())\n    points = []\n    for i in range(N):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            dist = 0\n            for k in range(D):\n                dist += (points[i][k] - points[j][k])**2\n            if dist**0.5 == int(dist**0.5):\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    N, D = map(int, sys.stdin.readline().strip().split())\n    points = []\n    for i in range(N):\n        points.append(list(map(int, sys.stdin.readline().strip().split())))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            dist = 0\n            for k in range(D):\n                dist += (points[i][k] - points[j][k])**2\n            if dist**0.5 == int(dist**0.5):\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    N, D = map(int, sys.stdin.readline().strip().split())\n    points = []\n    for i in range(N):\n        points.append(list(map(int, sys.stdin.readline().strip().split())))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            dist = 0\n            for k in range(D):\n                dist += (points[i][k] - points[j][k])**2\n            if dist**0.5 == int(dist**0.5):\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef main():\n    N, D = map(int, sys.stdin.readline().strip().split())\n    points = []\n    for i in range(N):\n        points.append(list(map(int, sys.stdin.readline().strip().split())))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            dist = 0\n            for k in range(D):\n                dist += (points[i][k] - points[j][k])**2\n            if dist**0.5 == int(dist**0.5):\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\ndef main():\n    N, D = map(int, sys.stdin.readline().strip().split())\n    points = []\n    for i in range(N):\n        points.append(list(map(int, sys.stdin.readline().strip().split())))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            dist = 0\n            for k in range(D):\n                dist += (points[i][k] - points[j][k])**2\n            if dist**0.5 == int(dist**0.5):\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\n# https://atcoder.jp/contests/abc079/tasks/abc079_c\n\nimport sys\n\ndef main():\n    N, D = map(int, sys.stdin.readline().strip().split())\n    points = []\n    for i in range(N):\n        points.append(list(map(int, sys.stdin.readline().strip().split())))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            dist = 0\n            for k in range(D):\n                dist += (points[i][k] - points[j][k])**2\n            if dist**0.5 == int(dist**0.5):\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef main():\n    N, D = map(int, sys.stdin.readline().strip().split())\n    points = []\n    for i in range(N):\n        points.append(list(map(int, sys.stdin.readline().strip().split())))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            dist = 0\n            for k in range(D):\n                dist += (points[i][k] - points[j][k])**2\n            if dist**0.5 == int(dist**0.5):\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\ndef main():\n    N, D = map(int, sys.stdin.readline().split())\n    points = []\n    for i in range(N):\n        points.append(list(map(int, sys.stdin.readline().split())))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            dist = 0\n            for k in range(D):\n                dist += (points[i][k] - points[j][k])**2\n            if dist**0.5 == int(dist**0.5):\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650439340,
  "object": "edit"
}
2022-04-20 07:22:26.945244 fix syntax errors 8 ["\nimport sys\n\ndef main():\n    N, D = map(int, input().split())\n    points = []\n    for i in range(N):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            dist = 0\n            for k in range(D):\n                dist += (points[i][k] - points[j][k])**2\n            if dist**0.5 == int(dist**0.5):\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    N, D = map(int, sys.stdin.readline().strip().split())\n    points = []\n    for i in range(N):\n        points.append(list(map(int, sys.stdin.readline().strip().split())))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            dist = 0\n            for k in range(D):\n                dist += (points[i][k] - points[j][k])**2\n            if dist**0.5 == int(dist**0.5):\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    N, D = map(int, sys.stdin.readline().strip().split())\n    points = []\n    for i in range(N):\n        points.append(list(map(int, sys.stdin.readline().strip().split())))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            dist = 0\n            for k in range(D):\n                dist += (points[i][k] - points[j][k])**2\n            if dist**0.5 == int(dist**0.5):\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    N, D = map(int, sys.stdin.readline().strip().split())\n    points = []\n    for i in range(N):\n        points.append(list(map(int, sys.stdin.readline().strip().split())))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            dist = 0\n            for k in range(D):\n                dist += (points[i][k] - points[j][k])**2\n            if dist**0.5 == int(dist**0.5):\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    N, D = map(int, sys.stdin.readline().strip().split())\n    points = []\n    for i in range(N):\n        points.append(list(map(int, sys.stdin.readline().strip().split())))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            dist = 0\n            for k in range(D):\n                dist += (points[i][k] - points[j][k])**2\n            if dist**0.5 == int(dist**0.5):\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\n# https://atcoder.jp/contests/abc079/tasks/abc079_c\n\nimport sys\n\ndef main():\n    N, D = map(int, sys.stdin.readline().strip().split())\n    points = []\n    for i in range(N):\n        points.append(list(map(int, sys.stdin.readline().strip().split())))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            dist = 0\n            for k in range(D):\n                dist += (points[i][k] - points[j][k])**2\n            if dist**0.5 == int(dist**0.5):\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    N, D = map(int, sys.stdin.readline().strip().split())\n    points = []\n    for i in range(N):\n        points.append(list(map(int, sys.stdin.readline().strip().split())))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            dist = 0\n            for k in range(D):\n                dist += (points[i][k] - points[j][k])**2\n            if dist**0.5 == int(dist**0.5):\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    N, D = map(int, sys.stdin.readline().split())\n    points = []\n    for i in range(N):\n        points.append(list(map(int, sys.stdin.readline().split())))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            dist = 0\n            for k in range(D):\n                dist += (points[i][k] - points[j][k])**2\n            if dist**0.5 == int(dist**0.5):\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 07:22:26.945442 size on output set 5
2022-04-20 07:22:26.945467 num operations 1
2022-04-20 07:22:26.945477 size on input set 1
2022-04-20 07:22:26.945733 using api key gabby
2022-04-20 07:22:36.552800 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import math\n\ndef main():\n    n, d = map(int, input().split())  # n is number of points, d is dimension\n    points = []\n    for i in range(n):  # input points\n        points.append(list(map(int, input().split())))  # points[i] is a list of coordinates\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = 0\n            for k in range(d):\n                distance += (points[i][k] - points[j][k]) ** 2\n            if math.sqrt(distance).is_integer():\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport math\n\ndef main():\n    n, d = map(int, input().split())  # n = number of points, d = dimensions\n    points = []\n    for i in range(n):\n        points.append(list(map(int, input().split())))  # points = list of points\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = 0\n            for k in range(d):\n                distance += (points[i][k] - points[j][k]) ** 2\n            if math.sqrt(distance).is_integer():\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport math\n\ndef main():\n    n, d = map(int, input().split())\n    points = []\n    for i in range(n):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = 0\n            for k in range(d):\n                distance += (points[i][k] - points[j][k]) ** 2\n            if math.sqrt(distance).is_integer():\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport math\n\ndef main():\n    n, d = map(int, input().split())\n    points = []\n    for i in range(n):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = 0\n            for k in range(d):\n                distance += (points[i][k] - points[j][k]) ** 2\n            if math.sqrt(distance).is_integer():\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport math\n\ndef main():\n    n, d = map(int, input().split())\n    points = []\n    for i in range(n):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            distance = 0\n            for k in range(d):\n                distance += (points[i][k] - points[j][k]) ** 2\n            if math.sqrt(distance).is_integer():\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "import math\n\ndef main():\n    n, d = map(int, input().split())\n    points = []\n    for i in range(n):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = 0\n            for k in range(d):\n                distance += (points[i][k] - points[j][k]) ** 2\n            if math.sqrt(distance).is_integer():\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport math\n\ndef main():\n    n, d = map(int, input().split())\n    points = []\n    for i in range(n):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = 0\n            for k in range(d):\n                distance += (points[i][k] - points[j][k]) ** 2\n            if math.sqrt(distance).is_integer():\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport math\n\ndef main():\n    n, d = map(int, input().split())\n    points = []\n    for i in range(n):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = 0\n            for k in range(d):\n                distance += (points[i][k] - points[j][k]) ** 2\n            if math.sqrt(distance).is_integer():\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650439346,
  "object": "edit"
}
2022-04-20 07:22:36.553183 fix syntax errors 8 ["import math\n\ndef main():\n    n, d = map(int, input().split())  # n is number of points, d is dimension\n    points = []\n    for i in range(n):  # input points\n        points.append(list(map(int, input().split())))  # points[i] is a list of coordinates\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = 0\n            for k in range(d):\n                distance += (points[i][k] - points[j][k]) ** 2\n            if math.sqrt(distance).is_integer():\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\ndef main():\n    n, d = map(int, input().split())  # n = number of points, d = dimensions\n    points = []\n    for i in range(n):\n        points.append(list(map(int, input().split())))  # points = list of points\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = 0\n            for k in range(d):\n                distance += (points[i][k] - points[j][k]) ** 2\n            if math.sqrt(distance).is_integer():\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\ndef main():\n    n, d = map(int, input().split())\n    points = []\n    for i in range(n):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = 0\n            for k in range(d):\n                distance += (points[i][k] - points[j][k]) ** 2\n            if math.sqrt(distance).is_integer():\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport math\n\ndef main():\n    n, d = map(int, input().split())\n    points = []\n    for i in range(n):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = 0\n            for k in range(d):\n                distance += (points[i][k] - points[j][k]) ** 2\n            if math.sqrt(distance).is_integer():\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\ndef main():\n    n, d = map(int, input().split())\n    points = []\n    for i in range(n):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            distance = 0\n            for k in range(d):\n                distance += (points[i][k] - points[j][k]) ** 2\n            if math.sqrt(distance).is_integer():\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "import math\n\ndef main():\n    n, d = map(int, input().split())\n    points = []\n    for i in range(n):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = 0\n            for k in range(d):\n                distance += (points[i][k] - points[j][k]) ** 2\n            if math.sqrt(distance).is_integer():\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\ndef main():\n    n, d = map(int, input().split())\n    points = []\n    for i in range(n):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = 0\n            for k in range(d):\n                distance += (points[i][k] - points[j][k]) ** 2\n            if math.sqrt(distance).is_integer():\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\ndef main():\n    n, d = map(int, input().split())\n    points = []\n    for i in range(n):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = 0\n            for k in range(d):\n                distance += (points[i][k] - points[j][k]) ** 2\n            if math.sqrt(distance).is_integer():\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 07:22:36.553388 size on output set 6
