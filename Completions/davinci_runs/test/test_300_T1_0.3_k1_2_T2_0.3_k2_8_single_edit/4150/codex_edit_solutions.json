["\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\nprint(n, k)\nprint(a)\n\n# 1. find the max\n# 2. find the k closest to the left and right of the max\n# 3. remove the max and the k closest left and right\n# 4. repeat\n\n# 1. find the max\ndef find_max(a):\n    max_index = 0\n    max_value = a[0]\n    for i in range(1, len(a)):\n        if a[i] > max_value:\n            max_index = i\n            max_value = a[i]\n    return max_index\n\n# 2. find the k closest to the left and right of the max\ndef find_k_closest(a, max_index, k):\n    left_index = max_index - 1\n    right_index = max_index + 1\n    left_count = 0\n    right_count = 0\n    while left_count < k and left_index >= 0:\n        left_count += 1\n        left_index -= 1\n    while right_count < k and right_index < len(a):\n        right_count += 1\n        right_index += 1\n    return left_index + 1, right_index - 1\n\n# 3. remove the max and the k closest left and right\ndef remove_max_and_k_closest(a, max_index, left_index, right_index):\n    a = a[:left_index] + a[right_index+1:]\n    return a\n\n# 4. repeat\ndef repeat(a, k):\n    result = []\n    while len(a) > 0:\n        max_index = find_max(a)\n        left_index, right_index = find_k_closest(a, max_index, k)\n        a = remove_max_and_k_closest(a, max_index, left_index, right_index)\n        result += [left_index, right_index]\n    return result\n\n# 5. print the result\ndef print_result(result, n):\n    result_string = \"\"\n    for i in range(n):\n        if i in result:\n            result_string += \"1\"\n        else:\n            result_string += \"2\"\n    print(result_string)\n\nresult = repeat(a, k)\nprint_result(result, n)\n", "\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# print(n, k)\n# print(a)\n\n# 1. find the max\n# 2. find the k closest to the left and right of the max\n# 3. remove the max and the k closest left and right\n# 4. repeat\n\n# 1. find the max\ndef find_max(a):\n    max_index = 0\n    max_value = a[0]\n    for i in range(1, len(a)):\n        if a[i] > max_value:\n            max_index = i\n            max_value = a[i]\n    return max_index\n\n# 2. find the k closest to the left and right of the max\ndef find_k_closest(a, max_index, k):\n    left_index = max_index - 1\n    right_index = max_index + 1\n    left_count = 0\n    right_count = 0\n    while left_count < k and left_index >= 0:\n        left_count += 1\n        left_index -= 1\n    while right_count < k and right_index < len(a):\n        right_count += 1\n        right_index += 1\n    return left_index + 1, right_index - 1\n\n# 3. remove the max and the k closest left and right\ndef remove_max_and_k_closest(a, max_index, left_index, right_index):\n    a = a[:left_index] + a[right_index + 1:]\n    return a\n\n# 4. repeat\ndef repeat(a, k):\n    result = []\n    while len(a) > 0:\n        max_index = find_max(a)\n        left_index, right_index = find_k_closest(a, max_index, k)\n        a = remove_max_and_k_closest(a, max_index, left_index, right_index)\n        result += [left_index, right_index]\n    return result\n\n# 5. print the result\ndef print_result(result, n):\n    result_string = \"\"\n    for i in range(n):\n        if i in result:\n            result_string += \"1\"\n        else:\n            result_string += \"2\"\n    print(result_string)\n\nresult = repeat(a, k)\nprint_result(result, n)\n", "\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# print(n, k)\n# print(a)\n\n# 1. find the max\n# 2. find the k closest to the left and right of the max\n# 3. remove the max and the k closest left and right\n# 4. repeat\n\n# 1. find the max\ndef find_max(a):\n    max_index = 0\n    max_value = a[0]\n    for i in range(1, len(a)):\n        if a[i] > max_value:\n            max_index = i\n            max_value = a[i]\n    return max_value, max_index\n\n# 2. find the k closest to the left and right of the max\ndef find_k_closest(a, max_index, k):\n    left_index = max_index - 1\n    right_index = max_index + 1\n    left_count = 0\n    right_count = 0\n    while left_count < k and left_index >= 0:\n        left_count += 1\n        left_index -= 1\n    while right_count < k and right_index < len(a):\n        right_count += 1\n        right_index += 1\n    return left_index + 1, right_index - 1\n\n# 3. remove the max and the k closest left and right\ndef remove_max_and_k_closest(a, max_index, left_index, right_index):\n    a = a[:left_index] + a[right_index+1:]\n    return a\n\n# 4. repeat\ndef repeat(a, k):\n    result = []\n    while len(a) > 0:\n        max_value, max_index = find_max(a)\n        left_index, right_index = find_k_closest(a, max_index, k)\n        a = remove_max_and_k_closest(a, max_index, left_index, right_index)\n        result += [left_index, right_index]\n    return result\n\n# 5. print the result\ndef print_result(result, n):\n    result_string = \"\"\n    for i in range(n):\n        if i in result:\n            result_string += \"1\"\n        else:\n            result_string += \"2\"\n    print(result_string)\n\nresult = repeat(a, k)\nprint_result(result, n)\n", "\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# print(n, k)\n# print(a)\n\n# 1. find the max\n# 2. find the k closest to the left and right of the max\n# 3. remove the max and the k closest left and right\n# 4. repeat\n\n# 1. find the max\ndef find_max(a):\n    max_index = 0\n    max_value = a[0]\n    for i in range(1, len(a)):\n        if a[i] > max_value:\n            max_index = i\n            max_value = a[i]\n    return max_index\n\n# 2. find the k closest to the left and right of the max\ndef find_k_closest(a, max_index, k):\n    left_index = max_index - 1\n    right_index = max_index + 1\n    left_count = 0\n    right_count = 0\n    while left_count < k and left_index >= 0:\n        left_count += 1\n        left_index -= 1\n    while right_count < k and right_index < len(a):\n        right_count += 1\n        right_index += 1\n    return left_index + 1, right_index - 1\n\n# 3. remove the max and the k closest left and right\ndef remove_max_and_k_closest(a, max_index, left_index, right_index):\n    a = a[:left_index] + a[right_index+1:]\n    return a\n\n# 4. repeat\ndef repeat(a, k):\n    result = []\n    while len(a) > 0 and len(result) < n:\n        max_index = find_max(a)\n        left_index, right_index = find_k_closest(a, max_index, k)\n        a = remove_max_and_k_closest(a, max_index, left_index, right_index)\n        # print(a)\n        result += [left_index, right_index]\n        # print(result)\n    return result\n\n# 5. print the result\ndef print_result(result, n):\n    result_string = \"\"\n    for i in range(n):\n        if i in result:\n            result_string += \"1\"\n        else:\n            result_string += \"2\"\n    print(result_string)\n\nresult = repeat(a, k)\nprint_result(result, n)\n", "\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# 1. find the max\n# 2. find the k closest to the left and right of the max\n# 3. remove the max and the k closest left and right\n# 4. repeat\n\n# 1. find the max\ndef find_max(a):\n    max_index = 0\n    max_value = a[0]\n    for i in range(1, len(a)):\n        if a[i] > max_value:\n            max_index = i\n            max_value = a[i]\n    return max_index\n\n\n# 2. find the k closest to the left and right of the max\ndef find_k_closest(a, max_index, k):\n    left_index = max_index - 1\n    right_index = max_index + 1\n    left_count = 0\n    right_count = 0\n    while left_count < k and left_index >= 0:\n        left_count += 1\n        left_index -= 1\n    while right_count < k and right_index < len(a):\n        right_count += 1\n        right_index += 1\n    return left_index + 1, right_index - 1\n\n\n# 3. remove the max and the k closest left and right\ndef remove_max_and_k_closest(a, max_index, left_index, right_index):\n    a = a[:left_index] + a[right_index + 1:]\n    return a\n\n\n# 4. repeat\ndef repeat(a, k):\n    result = []\n    while len(a) > 0:\n        max_index = find_max(a)\n        left_index, right_index = find_k_closest(a, max_index, k)\n        a = remove_max_and_k_closest(a, max_index, left_index, right_index)\n        result += [left_index, right_index]\n    return result\n\n\n# 5. print the result\ndef print_result(result, n):\n    result_string = \"\"\n    for i in range(n):\n        if i in result:\n            result_string += \"1\"\n        else:\n            result_string += \"2\"\n    print(result_string)\n\n\nresult = repeat(a, k)\nprint_result(result, n)\n", "\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# 1. find the max\n# 2. find the k closest to the left and right of the max\n# 3. remove the max and the k closest left and right\n# 4. repeat\n\n# 1. find the max\ndef find_max(a):\n    return a.index(max(a))\n\n# 2. find the k closest to the left and right of the max\ndef find_k_closest(a, max_index, k):\n    left_index = max_index - 1\n    right_index = max_index + 1\n    left_count = 0\n    right_count = 0\n    while left_count < k and left_index >= 0:\n        left_count += 1\n        left_index -= 1\n    while right_count < k and right_index < len(a):\n        right_count += 1\n        right_index += 1\n    return left_index + 1, right_index - 1\n\n# 3. remove the max and the k closest left and right\ndef remove_max_and_k_closest(a, max_index, left_index, right_index):\n    a = a[:left_index] + a[right_index+1:]\n    return a\n\n# 4. repeat\ndef repeat(a, k):\n    result = \"\"\n    while len(a) > 0:\n        max_index = find_max(a)\n        left_index, right_index = find_k_closest(a, max_index, k)\n        a = remove_max_and_k_closest(a, max_index, left_index, right_index)\n        result += \"1\" * (right_index - left_index + 1)\n    return result\n\n# 5. print the result\ndef print_result(result):\n    print(result + \"2\" * (n - len(result)))\n\nresult = repeat(a, k)\nprint_result(result)\n", "\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# print(n, k)\n# print(a)\n\n# 1. find the max\n# 2. find the k closest to the left and right of the max\n# 3. remove the max and the k closest left and right\n# 4. repeat\n\n# 1. find the max\ndef find_max(a):\n    max_index = 0\n    max_value = a[0]\n    for i in range(1, len(a)):\n        if a[i] > max_value:\n            max_index = i\n            max_value = a[i]\n    return max_index\n\n# 2. find the k closest to the left and right of the max\ndef find_k_closest(a, max_index, k):\n    left_index = max_index - 1\n    right_index = max_index + 1\n    left_count = 0\n    right_count = 0\n    while left_count < k and left_index >= 0:\n        left_count += 1\n        left_index -= 1\n    while right_count < k and right_index < len(a):\n        right_count += 1\n        right_index += 1\n    return left_index + 1, right_index - 1\n\n# 3. remove the max and the k closest left and right\ndef remove_max_and_k_closest(a, max_index, left_index, right_index):\n    a = a[:left_index] + a[right_index+1:]\n    return a\n\n# 4. repeat\ndef repeat(a, k):\n    result = []\n    while len(a) > 0:\n        max_index = find_max(a)\n        left_index, right_index = find_k_closest(a, max_index, k)\n        a = remove_max_and_k_closest(a, max_index, left_index, right_index)\n        result += [left_index, right_index]\n    return result\n\n# 5. print the result\ndef print_result(result, n):\n    result_string = \"\"\n    for i in range(n):\n        if i in result:\n            result_string += \"1\"\n        else:\n            result_string += \"2\"\n    print(result_string)\n\nresult = repeat(a, k)\nprint_result(result, n)\n", "\n#\n# n, k = map(int, input().split())\n# a = list(map(int, input().split()))\n#\n# # print(n, k)\n# # print(a)\n#\n# # 1. find the max\n# # 2. find the k closest to the left and right of the max\n# # 3. remove the max and the k closest left and right\n# # 4. repeat\n#\n# # 1. find the max\n# def find_max(a):\n#     max_index = 0\n#     max_value = a[0]\n#     for i in range(1, len(a)):\n#         if a[i] > max_value:\n#             max_index = i\n#             max_value = a[i]\n#     return max_index\n#\n# # 2. find the k closest to the left and right of the max\n# def find_k_closest(a, max_index, k):\n#     left_index = max_index - 1\n#     right_index = max_index + 1\n#     left_count = 0\n#     right_count = 0\n#     while left_count < k and left_index >= 0:\n#         left_count += 1\n#         left_index -= 1\n#     while right_count < k and right_index < len(a):\n#         right_count += 1\n#         right_index += 1\n#     return left_index + 1, right_index - 1\n#\n# # 3. remove the max and the k closest left and right\n# def remove_max_and_k_closest(a, max_index, left_index, right_index):\n#     a = a[:left_index] + a[right_index+1:]\n#     return a\n#\n# # 4. repeat\n# def repeat(a, k):\n#     result = []\n#     while len(a) > 0:\n#         max_index = find_max(a)\n#         left_index, right_index = find_k_closest(a, max_index, k)\n#         a = remove_max_and_k_closest(a, max_index, left_index, right_index)\n#         result += [left_index, right_index]\n#     return result\n#\n# # 5. print the result\n# def print_result(result, n):\n#     result_string = \"\"\n#     for i in range(n):\n#         if i in result:\n#             result_string += \"1\"\n#         else:\n#             result_string += \"2\"\n#     print(result_string)\n#\n# result = repeat(a, k)\n# print_result(result, n)\n"]