["\n\n# S = input()\n# T = input()\n\n# # initialize the number of changes needed\n# changes = 0\n\n# # iterate through the string\n# for i in range(len(S)):\n#     # if the current character in S does not match the current character in T\n#     if S[i] != T[i]:\n#         # increment the number of changes needed\n#         changes += 1\n\n# # print the number of changes needed\n# print(changes)\n\n# S = input()\n# T = input()\n\n# # initialize the number of changes needed\n# changes = 0\n\n# # iterate through the string\n# for i in range(len(S)):\n#     # if the current character in S does not match the current character in T\n#     if S[i] != T[i]:\n#         # increment the number of changes needed\n#         changes += 1\n\n# # print the number of changes needed\n# print(changes)\n\n# S = input()\n# T = input()\n\n# # initialize the number of changes needed\n# changes = 0\n\n# # iterate through the string\n# for i in range(len(S)):\n#     # if the current character in S does not match the current character in T\n#     if S[i] != T[i]:\n#         # increment the number of changes needed\n#         changes += 1\n\n# # print the number of changes needed\n# print(changes)\n\n# S = input()\n# T = input()\n\n# # initialize the number of changes needed\n# changes = 0\n\n# # iterate through the string\n# for i in range(len(S)):\n#     # if the current character in S does not match the current character in T\n#     if S[i] != T[i]:\n#         # increment the number of changes needed\n#         changes += 1\n\n# # print the number of changes needed\n# print(changes)\n\n# S = input()\n# T = input()\n\n# # initialize the number of changes needed\n# changes = 0\n\n# # iterate through the string\n# for i in range(len(S)):\n#     # if the current character in S does not match the current character in T\n#     if S[i] != T[i]:\n#         # increment the number of changes needed\n#         changes += 1\n\n# # print the number of changes needed\n# print(changes)\n\n# S = input()\n# T = input()\n\n# # initialize the number of changes needed\n# changes = 0\n\n# # iterate through the string\n# for i in range(len(S)):\n#     # if the current character in S does not match the current character in T\n#     if S[i] != T[i]:\n#         # increment the number of changes needed\n#         changes += 1\n\n# # print the number of changes needed\n# print(changes)\n\n# S = input()\n# T = input()\n\n# # initialize the number of changes needed\n# changes = 0\n\n# # iterate through the string\n# for i in range(len(S)):\n#     # if the current character in S does not match the current character in T\n#     if S[i] != T[i]:\n#         # increment the number of changes needed\n#         changes += 1\n\n# # print the number of changes needed\n# print(changes)\n\n# S = input()\n# T = input()\n\n# # initialize the number of changes needed\n# changes = 0\n\n# # iterate through the string\n# for i in range(len(S)):\n#     # if the current character in S does not match the current character in T\n#     if S[i] != T[i]:\n#         # increment the number of changes needed\n#         changes += 1\n\n# # print the number of changes needed\n# print(changes)\n\n# S = input()\n# T = input()\n\n# # initialize the number of changes needed\n# changes = 0\n\n# # iterate through the string\n# for i in range(len(S)):\n#     # if the current character in S does not match the current character in T\n#     if S[i] != T[i]:\n#         # increment the number of changes needed\n#         changes += 1\n\n# # print the number of changes needed\n# print(changes)\n\n# S = input()\n# T = input()\n\n# # initialize the number of changes needed\n# changes = 0\n\n# # iterate through the string\n# for i in range(len(S)):\n#     # if the current character in S does not match the current character in T\n#     if S[i] != T[i]:\n#         # increment the number of changes needed\n#         changes += 1\n\n# # print the number of changes needed\n# print(changes)\n\n# S = input()\n# T = input()\n\n# # initialize the number of changes needed\n# changes = 0\n\n# # iterate through the string\n# for i in range(len(S)):\n#     # if the current character in S does not match the current character in T\n#     if S[i] != T[i]:\n#         # increment the number of changes needed\n#         changes += 1\n\n# # print the number of changes needed\n# print(changes)\n\n# S = input()\n# T = input()\n\n# # initialize the number of changes needed\n# changes = 0\n\n# # iterate through the string\n# for i in range(len(S)):\n#     # if the current character in S does not match the current character in T\n#     if S[i] != T[i]:\n#         # increment the number of changes needed\n#         changes += 1\n\n# # print the number of changes needed\n# print(changes)\n\n# S = input()\n# T = input()\n\n# # initialize the number of changes needed\n# changes = 0\n\n# # iterate through the string\n# for i in range(len(S)):\n#     # if the current character in S does not match the current character in T\n#     if S[i] != T[i]:\n#         # increment the number of changes needed\n#         changes += 1\n\n# # print the number of changes needed\n# print(changes)\n\n# S = input()\n# T = input()\n\n# # initialize the number of changes needed\n# changes = 0\n\n# # iterate through the string\n# for i in range(len(S)):\n#     # if the current character in S does not match the current character in T\n#     if S[i] != T[i]:\n#         # increment the number of changes needed\n#         changes += 1\n\n# # print the number of changes needed\n# print(changes)\n", "# input the strings\n\nS = input()\nT = input()\n\n# initialize the number of changes needed\nchanges = 0\n\n# iterate through the string\nfor i in range(len(S)):\n    # if the current character in S does not match the current character in T\n    if S[i] != T[i]:\n        # increment the number of changes needed\n        changes += 1\n\n# print the number of changes needed\nprint(changes)\n", "\nS = input()\nT = input()\n# initialize the number of changes needed\nchanges = 0\n# iterate through the string\nfor i in range(len(S)):\n    # if the current character in S does not match the current character in T\n    if S[i] != T[i]:\n        # increment the number of changes needed\n        changes += 1\n# print the number of changes needed\nprint(changes)\n", "\nimport sys\n\ndef main():\n\ts = sys.stdin.readline().rstrip()\n\tt = sys.stdin.readline().rstrip()\n\tprint(min_changes(s, t))\n\ndef min_changes(s, t):\n\t\"\"\"\n\tReturns the minimum number of characters in s that need to be changed\n\tto make t a substring of s.\n\t\"\"\"\n\t# Create a list of indices of the characters in s that match the first\n\t# character in t.\n\tindices = [i for i, c in enumerate(s) if c == t[0]]\n\t# If there are no characters in s that match the first character in t,\n\t# then we need to change len(s) characters.\n\tif not indices:\n\t\treturn len(s)\n\t# If there are characters in s that match the first character in t,\n\t# then we need to check if t is a substring of s starting at each\n\t# index in indices.\n\telse:\n\t\tfor i in indices:\n\t\t\t# If t is a substring of s starting at index i, then we need\n\t\t\t# to change i characters.\n\t\t\tif is_substring(s, t, i):\n\t\t\t\treturn i\n\t\t# If t is not a substring of s starting at any index in indices,\n\t\t# then we need to change len(s) - indices[-1] characters.\n\t\treturn len(s) - indices[-1]\n\ndef is_substring(s, t, i):\n\t\"\"\"\n\tReturns True if t is a substring of s starting at index i,\n\totherwise returns False.\n\t\"\"\"\n\t# If the length of s starting at index i is less than the length of t,\n\t# then t cannot be a substring of s starting at index i.\n\tif len(s) - i < len(t):\n\t\treturn False\n\t# If the length of s starting at index i is greater than or equal to\n\t# the length of t, then check if the characters in s starting at index\n\t# i match the characters in t.\n\telse:\n\t\tfor j in range(len(t)):\n\t\t\tif s[i + j] != t[j]:\n\t\t\t\treturn False\n\t\treturn True\n\nif __name__ == '__main__':\n\tmain()\n", "\nS = input()\nT = input()\n\n# initialize the number of changes needed\nchanges = 0\n\n# iterate through the string\nfor i in range(len(S)):\n    # if the current character in S does not match the current character in T\n    if S[i] != T[i]:\n        # increment the number of changes needed\n        changes += 1\n\n# print the number of changes needed\nprint(changes)\n", "\nimport sys\n\ndef main():\n    s = sys.stdin.readline().rstrip() #s is the string\n    t = sys.stdin.readline().rstrip() #t is the substring\n    print(min_changes(s, t)) #print the minimum number of characters in s that need to be changed to make t a substring of s\n\ndef min_changes(s, t):\n    \"\"\"\n    Returns the minimum number of characters in s that need to be changed to make t a substring of s.\n    \"\"\"\n    # Create a list of indices of the characters in s that match the first character in t.\n    indices = [i for i, c in enumerate(s) if c == t[0]] #list of indices of the characters in s that match the first character in t\n    # If there are no characters in s that match the first character in t, then we need to change len(s) characters.\n    if not indices:\n        return len(s)\n    # If there are characters in s that match the first character in t, then we need to check if t is a substring of s starting at each index in indices.\n    else:\n        for i in indices:\n            # If t is a substring of s starting at index i, then we need to change i characters.\n            if is_substring(s, t, i):\n                return i\n        # If t is not a substring of s starting at any index in indices, then we need to change len(s) - indices[-1] characters.\n        return len(s) - indices[-1]\n\ndef is_substring(s, t, i):\n    \"\"\"\n    Returns True if t is a substring of s starting at index i, otherwise returns False.\n    \"\"\"\n    # If the length of s starting at index i is less than the length of t, then t cannot be a substring of s starting at index i.\n    if len(s) - i < len(t):\n        return False\n    # If the length of s starting at index i is greater than or equal to the length of t, then check if the characters in s starting at index i match the characters in t.\n    else:\n        for j in range(len(t)):\n            if s[i + j] != t[j]:\n                return False\n        return True\n\nif __name__ == '__main__':\n    main()\n", "\nS = input()\nT = input()\n\n# initialize the number of changes needed to 0\nchanges = 0 \n\n# iterate through the string \nfor i in range(len(S)):\n    # if the current character in S does not match the current character in T \n    if S[i] != T[i]:\n        # increment the number of changes needed\n        changes += 1\n\n# print the number of changes needed\nprint(changes)\n", "\"\"\"\nSolution for the Minimum Changes problem.\n\"\"\"\n\nimport sys\n\n    \"\"\"\n    Reads input from stdin, passes it to the function that solves this\n    problem, and prints the solution to stdout.\n    \"\"\"\ndef main():\n    s = sys.stdin.readline().rstrip()\n    t = sys.stdin.readline().rstrip()\n    print(min_changes(s, t))\n\ndef min_changes(s, t):\n    \"\"\"\n    Returns the minimum number of characters in s that need to be changed\n    to make t a substring of s.\n    \"\"\"\n    # Create a list of indices of the characters in s that match the first\n    # character in t.\n    indices = [i for i, c in enumerate(s) if c == t[0]]\n    # If there are no characters in s that match the first character in t,\n    # then we need to change len(s) characters.\n    if not indices:\n        return len(s)\n    # If there are characters in s that match the first character in t,\n    # then we need to check if t is a substring of s starting at each\n    # index in indices.\n    else:\n        for i in indices:\n            # If t is a substring of s starting at index i, then we need\n            # to change i characters.\n            if is_substring(s, t, i):\n                return i\n        # If t is not a substring of s starting at any index in indices,\n        # then we need to change len(s) - indices[-1] characters.\n        return len(s) - indices[-1]\n\ndef is_substring(s, t, i):\n    \"\"\"\n    Returns True if t is a substring of s starting at index i,\n    otherwise returns False.\n    \"\"\"\n    # If the length of s starting at index i is less than the length of t,\n    # then t cannot be a substring of s starting at index i.\n    if len(s) - i < len(t):\n        return False\n    # If the length of s starting at index i is greater than or equal to\n    # the length of t, then check if the characters in s starting at index\n    # i match the characters in t.\n    else:\n        for j in range(len(t)):\n            if s[i + j] != t[j]:\n                return False\n        return True\n\nif __name__ == '__main__':\n    main()\n", "#!/bin/python3\n\nS = input()\nT = input()\n\n# initialize the number of changes needed to 0\nchanges = 0 \n\n# iterate through the string \nfor i in range(len(S)):\n    # if the current character in S does not match the current character in T \n    if S[i] != T[i]: \n        # increment the number of changes needed \n        changes += 1 \n\n# print the number of changes needed\nprint(changes)\n", "\nimport sys\n\ndef main():\n    s = sys.stdin.readline().rstrip()  # read the first line\n    t = sys.stdin.readline().rstrip()  # read the second line\n\n    print(min_changes(s, t))\n\ndef min_changes(s, t):\n    \"\"\"\n    Returns the minimum number of characters in s that need to be changed\n    to make t a substring of s.\n    \"\"\"\n    # Create a list of indices of the characters in s that match the first character in t.\n    indices = [i for i, c in enumerate(s) if c == t[0]]\n    # If there are no characters in s that match the first character in t, then we need to change len(s) characters.\n    if not indices:\n        return len(s)\n    # If there are characters in s that match the first character in t, then we need to check if t is a substring of s starting at each index in indices.\n    else:\n        for i in indices:\n            # If t is a substring of s starting at index i, then we need to change i characters.\n            if is_substring(s, t, i):\n                return i\n        # If t is not a substring of s starting at any index in indices, then we need to change len(s) - indices[-1] characters.\n        return len(s) - indices[-1]\n\n\ndef is_substring(s, t, i):\n    \"\"\"\n    Returns True if t is a substring of s starting at index i,\n    otherwise returns False.\n    \"\"\"\n    # If the length of s starting at index i is less than the length of t, then t cannot be a substring of s starting at index i.\n    if len(s) - i < len(t):\n        return False\n    # If the length of s starting at index i is greater than or equal to the length of t, then check if the characters in s starting at index i match the characters in t.\n    else:\n        for j in range(len(t)):\n            if s[i + j] != t[j]:\n                return False\n        return True\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n    t = sys.stdin.readline().rstrip()\n    print(min_changes(s, t))\n\ndef min_changes(s, t):\n    \"\"\"\n    Returns the minimum number of characters in s that need to be changed\n    to make t a substring of s.\n    \"\"\"\n    # Create a list of indices of the characters in s that match the first\n    # character in t.\n    indices = [i for i, c in enumerate(s) if c == t[0]]\n    # If there are no characters in s that match the first character in t,\n    # then we need to change len(s) characters.\n    if not indices:\n        return len(s)\n    # If there are characters in s that match the first character in t,\n    # then we need to check if t is a substring of s starting at each\n    # index in indices.\n    else:\n        for i in indices:\n            # If t is a substring of s starting at index i, then we need\n            # to change i characters.\n            if is_substring(s, t, i):\n                return i\n        # If t is not a substring of s starting at any index in indices,\n        # then we need to change len(s) - indices[-1] characters.\n        return len(s) - indices[-1]\n\ndef is_substring(s, t, i):\n    \"\"\"\n    Returns True if t is a substring of s starting at index i,\n    otherwise returns False.\n    \"\"\"\n    # If the length of s starting at index i is less than the length of t,\n    # then t cannot be a substring of s starting at index i.\n    if len(s) - i < len(t):\n        return False\n    # If the length of s starting at index i is greater than or equal to\n    # the length of t, then check if the characters in s starting at index\n    # i match the characters in t.\n    else:\n        for j in range(len(t)):\n            if s[i + j] != t[j]:\n                return False\n        return True\n\nif __name__ == '__main__':\n    main()\n"]