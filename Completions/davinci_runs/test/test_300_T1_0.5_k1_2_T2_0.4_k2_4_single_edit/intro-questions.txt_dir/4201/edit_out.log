2022-04-17 22:46:37.957802 num operations 1
2022-04-17 22:46:37.957824 size on input set 1
2022-04-17 22:46:46.376401 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef paint_red(h, w, k):\n\tans = 0\n\tfor i in range(2 ** h):\n\t\th_ = bin(i)[2:].zfill(h)\n\t\tfor j in range(2 ** w):\n\t\t\tw_ = bin(j)[2:].zfill(w)\n\t\t\tif h_.count('1') + w_.count('1') == k:\n\t\t\t\tans += 1\n\treturn ans\n\nh, w, k = map(int, input().split())\n\nprint(paint_red(h, w, k))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef paint_red(H, W, K):\n    ans = 0\n    for i in range(2 ** H):\n        h = bin(i)[2:].zfill(H)\n        for j in range(2 ** W):\n            w = bin(j)[2:].zfill(W)\n            if h.count('1') + w.count('1') == K:\n                ans += 1\n    return ans\n\nH, W, K = map(int, input().split())\n\nprint(paint_red(H, W, K))\n"
    },
    {
      "index": 2,
      "text": "\ndef paint_red(H, W, K):\n\tans = 0\n\tfor i in range(2 ** H):\n\t\th = bin(i)[2:].zfill(H)\n\t\tfor j in range(2 ** W):\n\t\t\tw = bin(j)[2:].zfill(W)\n\t\t\tif h.count('1') + w.count('1') == K:\n\t\t\t\tans += 1\n\treturn ans\n\nH, W, K = map(int, input().split())\n\nprint(paint_red(H, W, K))\n"
    },
    {
      "index": 3,
      "text": "\n\ndef paint_red(H, W, K):\n\tans = 0\n\tfor i in range(2 ** H):\n\t\th = bin(i)[2:].zfill(H)\n\t\tfor j in range(2 ** W):\n\t\t\tw = bin(j)[2:].zfill(W)\n\t\t\tif h.count('1') * w.count('1') == K:\n\t\t\t\tans += 1\n\treturn ans\n\nH, W, K = map(int, input().split())\n\nprint(paint_red(H, W, K))\n"
    }
  ],
  "created": 1650235598,
  "object": "edit"
}
2022-04-17 22:46:46.376629 fix syntax errors 4 ["\n\ndef paint_red(h, w, k):\n\tans = 0\n\tfor i in range(2 ** h):\n\t\th_ = bin(i)[2:].zfill(h)\n\t\tfor j in range(2 ** w):\n\t\t\tw_ = bin(j)[2:].zfill(w)\n\t\t\tif h_.count('1') + w_.count('1') == k:\n\t\t\t\tans += 1\n\treturn ans\n\nh, w, k = map(int, input().split())\n\nprint(paint_red(h, w, k))\n", "\n\ndef paint_red(H, W, K):\n    ans = 0\n    for i in range(2 ** H):\n        h = bin(i)[2:].zfill(H)\n        for j in range(2 ** W):\n            w = bin(j)[2:].zfill(W)\n            if h.count('1') + w.count('1') == K:\n                ans += 1\n    return ans\n\nH, W, K = map(int, input().split())\n\nprint(paint_red(H, W, K))\n", "\ndef paint_red(H, W, K):\n\tans = 0\n\tfor i in range(2 ** H):\n\t\th = bin(i)[2:].zfill(H)\n\t\tfor j in range(2 ** W):\n\t\t\tw = bin(j)[2:].zfill(W)\n\t\t\tif h.count('1') + w.count('1') == K:\n\t\t\t\tans += 1\n\treturn ans\n\nH, W, K = map(int, input().split())\n\nprint(paint_red(H, W, K))\n", "\n\ndef paint_red(H, W, K):\n\tans = 0\n\tfor i in range(2 ** H):\n\t\th = bin(i)[2:].zfill(H)\n\t\tfor j in range(2 ** W):\n\t\t\tw = bin(j)[2:].zfill(W)\n\t\t\tif h.count('1') * w.count('1') == K:\n\t\t\t\tans += 1\n\treturn ans\n\nH, W, K = map(int, input().split())\n\nprint(paint_red(H, W, K))\n"]
2022-04-17 22:46:46.376660 size on output set 4
2022-04-17 22:46:46.376671 num operations 1
2022-04-17 22:46:46.376682 size on input set 1
2022-04-17 22:46:52.821987 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    H, W, K = map(int, input().split())\n    c = [input() for _ in range(H)]\n    ans = 0\n    for mask_row in range(1 << H):\n        for mask_col in range(1 << W):\n            cnt = 0\n            for i in range(H):\n                for j in range(W):\n                    if c[i][j] == '#' and ((mask_row >> i) & 1) == 1 and ((mask_col >> j) & 1) == 1:\n                        cnt += 1\n            if cnt == K:\n                ans += 1\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n\n\ndef test():\n    import io\n    from unittest.mock import patch\n\n    inp = \"\"\"\\\n2 3 2\n..#\n###\n\"\"\"\n    out = \"\"\"\\\n5\n\"\"\"\n\n    with patch('sys.stdin.readline', side_effect=io.StringIO(inp).readline):\n        with patch('sys.stdout', new=io.StringIO()) as fake_out:\n            main()\n            assert fake_out.getvalue() == out\n\n\n# tests\ntest()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    H, W, K = map(int, input().split())\n    c = [input() for _ in range(H)]\n    ans = 0\n    for mask_row in range(1<<H):\n        for mask_col in range(1<<W):\n            cnt = 0\n            for i in range(H):\n                for j in range(W):\n                    if c[i][j] == '#' and ((mask_row>>i)&1) == 1 and ((mask_col>>j)&1) == 1:\n                        cnt += 1\n            if cnt == K:\n                ans += 1\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n\n\ndef test():\n    import io, sys\n    from unittest.mock import patch\n\n    inp = \"\"\"\\\n2 3 2\n..#\n###\n\"\"\"\n    out = \"\"\"\\\n5\n\"\"\"\n\n    with patch('sys.stdin.readline', side_effect=io.StringIO(inp).readline):\n        with patch('sys.stdout', new=io.StringIO()) as fake_out:\n            main()\n            assert fake_out.getvalue() == out\n\n\n# tests\ntest()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    H, W, K = map(int, input().split())\n    c = [input() for _ in range(H)]\n    ans = 0\n    for mask_row in range(1 << H):\n        for mask_col in range(1 << W):\n            cnt = 0\n            for i in range(H):\n                for j in range(W):\n                    if c[i][j] == '#' and ((mask_row >> i) & 1) == 1 and ((mask_col >> j) & 1) == 1:\n                        cnt += 1\n            if cnt == K:\n                ans += 1\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n\n\ndef test():\n    import io\n    from unittest.mock import patch\n\n    inp = \"\"\"\\\n2 3 2\n..#\n###\n\"\"\"\n    out = \"\"\"\\\n5\n\"\"\"\n\n    with patch('sys.stdin.readline', side_effect=io.StringIO(inp).readline):\n        with patch('sys.stdout', new=io.StringIO()) as fake_out:\n            main()\n            assert fake_out.getvalue() == out\n\n\n# tests\ntest()\n"
    },
    {
      "index": 3,
      "text": "\ndef main():\n    H, W, K = map(int, input().split())\n    c = [input() for _ in range(H)]\n    ans = 0\n    for mask_row in range(1<<H):\n        for mask_col in range(1<<W):\n            cnt = 0\n            for i in range(H):\n                for j in range(W):\n                    if c[i][j] == '#' and ((mask_row>>i)&1) == 1 and ((mask_col>>j)&1) == 1:\n                        cnt += 1\n            if cnt == K:\n                ans += 1\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n\n\ndef test():\n    import io, sys\n    from unittest.mock import patch\n\n    inp = \"\"\"\\\n2 3 2\n..#\n###\n\"\"\"\n    out = \"\"\"\\\n5\n\"\"\"\n\n    with patch('sys.stdin.readline', side_effect=io.StringIO(inp).readline):\n        with patch('sys.stdout', new=io.StringIO()) as fake_out:\n            main()\n            assert fake_out.getvalue() == out\n\n\n# tests\ntest()\n"
    }
  ],
  "created": 1650235606,
  "object": "edit"
}
2022-04-17 22:46:52.822185 fix syntax errors 4 ['\ndef main():\n    H, W, K = map(int, input().split())\n    c = [input() for _ in range(H)]\n    ans = 0\n    for mask_row in range(1 << H):\n        for mask_col in range(1 << W):\n            cnt = 0\n            for i in range(H):\n                for j in range(W):\n                    if c[i][j] == \'#\' and ((mask_row >> i) & 1) == 1 and ((mask_col >> j) & 1) == 1:\n                        cnt += 1\n            if cnt == K:\n                ans += 1\n    print(ans)\n\n\nif __name__ == \'__main__\':\n    main()\n\n\ndef test():\n    import io\n    from unittest.mock import patch\n\n    inp = """\\\n2 3 2\n..#\n###\n"""\n    out = """\\\n5\n"""\n\n    with patch(\'sys.stdin.readline\', side_effect=io.StringIO(inp).readline):\n        with patch(\'sys.stdout\', new=io.StringIO()) as fake_out:\n            main()\n            assert fake_out.getvalue() == out\n\n\n# tests\ntest()\n', '\ndef main():\n    H, W, K = map(int, input().split())\n    c = [input() for _ in range(H)]\n    ans = 0\n    for mask_row in range(1<<H):\n        for mask_col in range(1<<W):\n            cnt = 0\n            for i in range(H):\n                for j in range(W):\n                    if c[i][j] == \'#\' and ((mask_row>>i)&1) == 1 and ((mask_col>>j)&1) == 1:\n                        cnt += 1\n            if cnt == K:\n                ans += 1\n    print(ans)\n\n\nif __name__ == \'__main__\':\n    main()\n\n\ndef test():\n    import io, sys\n    from unittest.mock import patch\n\n    inp = """\\\n2 3 2\n..#\n###\n"""\n    out = """\\\n5\n"""\n\n    with patch(\'sys.stdin.readline\', side_effect=io.StringIO(inp).readline):\n        with patch(\'sys.stdout\', new=io.StringIO()) as fake_out:\n            main()\n            assert fake_out.getvalue() == out\n\n\n# tests\ntest()\n', '\ndef main():\n    H, W, K = map(int, input().split())\n    c = [input() for _ in range(H)]\n    ans = 0\n    for mask_row in range(1 << H):\n        for mask_col in range(1 << W):\n            cnt = 0\n            for i in range(H):\n                for j in range(W):\n                    if c[i][j] == \'#\' and ((mask_row >> i) & 1) == 1 and ((mask_col >> j) & 1) == 1:\n                        cnt += 1\n            if cnt == K:\n                ans += 1\n    print(ans)\n\n\nif __name__ == \'__main__\':\n    main()\n\n\ndef test():\n    import io\n    from unittest.mock import patch\n\n    inp = """\\\n2 3 2\n..#\n###\n"""\n    out = """\\\n5\n"""\n\n    with patch(\'sys.stdin.readline\', side_effect=io.StringIO(inp).readline):\n        with patch(\'sys.stdout\', new=io.StringIO()) as fake_out:\n            main()\n            assert fake_out.getvalue() == out\n\n\n# tests\ntest()\n', '\ndef main():\n    H, W, K = map(int, input().split())\n    c = [input() for _ in range(H)]\n    ans = 0\n    for mask_row in range(1<<H):\n        for mask_col in range(1<<W):\n            cnt = 0\n            for i in range(H):\n                for j in range(W):\n                    if c[i][j] == \'#\' and ((mask_row>>i)&1) == 1 and ((mask_col>>j)&1) == 1:\n                        cnt += 1\n            if cnt == K:\n                ans += 1\n    print(ans)\n\n\nif __name__ == \'__main__\':\n    main()\n\n\ndef test():\n    import io, sys\n    from unittest.mock import patch\n\n    inp = """\\\n2 3 2\n..#\n###\n"""\n    out = """\\\n5\n"""\n\n    with patch(\'sys.stdin.readline\', side_effect=io.StringIO(inp).readline):\n        with patch(\'sys.stdout\', new=io.StringIO()) as fake_out:\n            main()\n            assert fake_out.getvalue() == out\n\n\n# tests\ntest()\n']
2022-04-17 22:46:52.822371 size on output set 2
