2022-04-17 21:55:49.946897 num operations 1
2022-04-17 21:55:49.946933 size on input set 1
2022-04-17 21:55:54.460387 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Solution\n\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# Solution\n\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n# Solution\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\n# Solution\n\n#!/usr/bin/python3\n\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650232550,
  "object": "edit"
}
2022-04-17 21:55:54.460617 fix syntax errors 4 ['\n\n# Solution\n\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n    main()\n', '#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# Solution\n\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n    main()\n', '\n# Solution\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n    main()\n', '\n\n# Solution\n\n#!/usr/bin/python3\n\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-17 21:55:54.460657 size on output set 4
2022-04-17 21:55:54.460668 num operations 1
2022-04-17 21:55:54.460674 size on input set 1
2022-04-17 21:56:03.307423 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef get_input():\n    return open(\"input.txt\", \"r\")\n\n\ndef get_output():\n    return open(\"output.txt\", \"w\")\n\n\ndef get_number_of_test_cases():\n    return int(input())\n\n\ndef get_array_length(test_case_number):\n    return int(input())\n\n\ndef get_array(array_length):\n    return [int(x) for x in input().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return \"YES\"\n    return \"NO\"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(test_case_number)\n        array = get_array(array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        print(output)\n\n\nsolve_problem()\n"
    },
    {
      "index": 1,
      "text": "\n\n\ndef get_number_of_test_cases():\n    return int(input())\n\n\ndef get_array_length():\n    return int(input())\n\n\ndef get_array_length(test_case_number):\n    return int(input())\n\n\ndef get_array():\n    return [int(x) for x in input().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return \"YES\"\n    return \"NO\"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length()\n        array = get_array()\n        output = solve_test_case(array)\n        print(output)\n\n\nsolve_problem()\n"
    },
    {
      "index": 2,
      "text": "\ndef get_input():\n    return open(\"input.txt\", \"r\")\n\n\ndef get_output():\n    return open(\"output.txt\", \"w\")\n\n\ndef get_number_of_test_cases():\n    return int(input())\n\n\ndef get_array_length(test_case_number):\n    return int(input())\n\n\ndef get_array(array_length):\n    return [int(x) for x in input().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return \"YES\"\n    return \"NO\"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(test_case_number)\n        array = get_array(array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        print(output)\n\n\nsolve_problem()\n"
    },
    {
      "index": 3,
      "text": "\ndef get_input():\n    return open(\"input.txt\", \"r\").readlines()\n\n\ndef get_output():\n    return open(\"output.txt\", \"w\")\n\n\ndef get_number_of_test_cases():\n    return int(get_input()[0])\n\n\ndef get_array_length(test_case_number):\n    return int(get_input()[test_case_number * 2])\n\n\ndef get_array(array_length):\n    return [int(x) for x in get_input()[test_case_number * 2 + 1].split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1) if len(array[i:j]) >= 3]\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subsequence in get_all_subsequences(array):\n        if is_array_palindrome(subsequence):\n            return \"YES\"\n    return \"NO\"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(test_case_number)\n        array = get_array(array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        print(output)\n\n\nsolve_problem()\n"
    }
  ],
  "created": 1650232554,
  "object": "edit"
}
2022-04-17 21:56:03.307683 fix syntax errors 4 ['\ndef get_input():\n    return open("input.txt", "r")\n\n\ndef get_output():\n    return open("output.txt", "w")\n\n\ndef get_number_of_test_cases():\n    return int(input())\n\n\ndef get_array_length(test_case_number):\n    return int(input())\n\n\ndef get_array(array_length):\n    return [int(x) for x in input().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return "YES"\n    return "NO"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(test_case_number)\n        array = get_array(array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        print(output)\n\n\nsolve_problem()\n', '\n\n\ndef get_number_of_test_cases():\n    return int(input())\n\n\ndef get_array_length():\n    return int(input())\n\n\ndef get_array_length(test_case_number):\n    return int(input())\n\n\ndef get_array():\n    return [int(x) for x in input().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return "YES"\n    return "NO"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length()\n        array = get_array()\n        output = solve_test_case(array)\n        print(output)\n\n\nsolve_problem()\n', '\ndef get_input():\n    return open("input.txt", "r")\n\n\ndef get_output():\n    return open("output.txt", "w")\n\n\ndef get_number_of_test_cases():\n    return int(input())\n\n\ndef get_array_length(test_case_number):\n    return int(input())\n\n\ndef get_array(array_length):\n    return [int(x) for x in input().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return "YES"\n    return "NO"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(test_case_number)\n        array = get_array(array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        print(output)\n\n\nsolve_problem()\n', '\ndef get_input():\n    return open("input.txt", "r").readlines()\n\n\ndef get_output():\n    return open("output.txt", "w")\n\n\ndef get_number_of_test_cases():\n    return int(get_input()[0])\n\n\ndef get_array_length(test_case_number):\n    return int(get_input()[test_case_number * 2])\n\n\ndef get_array(array_length):\n    return [int(x) for x in get_input()[test_case_number * 2 + 1].split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1) if len(array[i:j]) >= 3]\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subsequence in get_all_subsequences(array):\n        if is_array_palindrome(subsequence):\n            return "YES"\n    return "NO"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(test_case_number)\n        array = get_array(array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        print(output)\n\n\nsolve_problem()\n']
2022-04-17 21:56:03.307845 size on output set 3
