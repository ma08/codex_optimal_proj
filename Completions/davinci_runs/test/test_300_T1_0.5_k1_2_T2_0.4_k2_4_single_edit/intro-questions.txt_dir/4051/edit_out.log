2022-04-17 22:07:04.675911 num operations 1
2022-04-17 22:07:04.675931 size on input set 1
2022-04-17 22:07:08.404741 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print(\"#\", end=\"\")\n            else:\n                print(\" \", end=\"\")\n        print(\"\")\n    print(\"YES\" if sorted(a) == a else \"NO\")\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print(\"#\", end=\"\")\n            else:\n                print(\" \", end=\"\")\n        print(\"\")\n    print(\"YES\" if sorted(a) == a else \"NO\")\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print(\"#\", end=\"\")\n            else:\n                print(\" \", end=\"\")\n        print(\"\")\n    print(\"YES\" if sorted(a) == a else \"NO\")\n\nmain()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print(\"#\", end=\"\")\n            else:\n                print(\" \", end=\"\")\n        print(\"\")\n    print(\"YES\" if sorted(a) == a else \"NO\")\n\nmain()\n"
    }
  ],
  "created": 1650233224,
  "object": "edit"
}
2022-04-17 22:07:08.404960 fix syntax errors 4 ['\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print("#", end="")\n            else:\n                print(" ", end="")\n        print("")\n    print("YES" if sorted(a) == a else "NO")\n\nmain()\n', '\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print("#", end="")\n            else:\n                print(" ", end="")\n        print("")\n    print("YES" if sorted(a) == a else "NO")\n\nmain()\n', '\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print("#", end="")\n            else:\n                print(" ", end="")\n        print("")\n    print("YES" if sorted(a) == a else "NO")\n\nmain()\n', '\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print("#", end="")\n            else:\n                print(" ", end="")\n        print("")\n    print("YES" if sorted(a) == a else "NO")\n\nmain()\n']
2022-04-17 22:07:08.404993 size on output set 1
2022-04-17 22:07:08.405004 num operations 1
2022-04-17 22:07:08.405010 size on input set 1
2022-04-17 22:07:23.788301 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\n# n = int(input())\n# arr = list(map(int, input().split()))\n\ndef sort_ravioli(n, arr):\n    if n == 1:\n        return \"YES\"\n    else:\n        sorted_array = []\n        stacks = []\n        for i in range(len(arr)):\n            stacks.append(arr[i])\n        while len(stacks) > 0:\n            tallest_stack = max(stacks)\n            tallest_stack_index = stacks.index(tallest_stack)\n            sorted_array.append(tallest_stack)\n            del stacks[tallest_stack_index]\n        if sorted_array == sorted(arr):\n            return \"YES\"\n        else:\n            return \"NO\"\n\n# def check_ravioli_sort(arr):\n#     if sort_ravioli(arr) == sorted(arr):\n#         return \"YES\"\n#     else:\n#         return \"NO\"\n\n# print(check_ravioli_sort(arr))\n\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(sort_ravioli(n, arr))\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\n\narr = list(map(int, input().split()))\n\ndef sort_ravioli(arr):\n    sorted_array = []\n    stacks = []\n    for i in range(len(arr)):\n        stacks.append(arr[i])\n    while len(stacks) > 0:\n        tallest_stack = max(stacks)\n        tallest_stack_index = stacks.index(tallest_stack)\n        sorted_array.append(tallest_stack)\n        del stacks[tallest_stack_index]\n    return sorted_array\n\n\ndef check_ravioli_sort(arr):\n    if sort_ravioli(arr) == sorted(arr):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\nprint(check_ravioli_sort(arr))\n"
    },
    {
      "index": 2,
      "text": "\n# \n# import sys\n#\n# n = int(input())\n# arr = list(map(int, input().split()))\n#\n# def sort_ravioli(arr):\n#     sorted_array = []\n#     stacks = []\n#     for i in range(len(arr)):\n#         stacks.append(arr[i])\n#     while len(stacks) > 0:\n#         tallest_stack = max(stacks)\n#         tallest_stack_index = stacks.index(tallest_stack)\n#         sorted_array.append(tallest_stack)\n#         del stacks[tallest_stack_index]\n#     return sorted_array\n#\n# def check_ravioli_sort(arr):\n#     if sort_ravioli(arr) == sorted(arr):\n#         return \"YES\"\n#     else:\n#         return \"NO\"\n#\n# print(check_ravioli_sort(arr))\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef sort_ravioli(arr):\n    sorted_array = []\n    stacks = []\n    for i in range(len(arr)):\n        stacks.append(arr[i])\n    while len(stacks) > 0:\n        tallest_stack = max(stacks)\n        tallest_stack_index = stacks.index(tallest_stack)\n        sorted_array.append(tallest_stack)\n        del stacks[tallest_stack_index]\n    return sorted_array\n\ndef check_ravioli_sort(arr):\n    if sort_ravioli(arr) == sorted(arr):\n        return \"YES\"\n    else:\n        return \"NO\"\n\nn = int(sys.stdin.readline())\narr = list(map(int, sys.stdin.readline().split()))\n\nprint(check_ravioli_sort(arr))\n\ndef sort_ravioli(arr):\n    sorted_array = []\n    stacks = []\n    for i in range(len(arr)):\n        stacks.append(arr[i])\n    while len(stacks) > 0:\n        tallest_stack = max(stacks)\n        tallest_stack_index = stacks.index(tallest_stack)\n        sorted_array.append(tallest_stack)\n        del stacks[tallest_stack_index]\n    return sorted_array\n\ndef check_ravioli_sort(arr):\n    if sort_ravioli(arr) == sorted(arr):\n        return \"YES\"\n    else:\n        return \"NO\"\n\nprint(check_ravioli_sort(arr))\n"
    }
  ],
  "created": 1650233228,
  "object": "edit"
}
2022-04-17 22:07:23.788501 fix syntax errors 4 ['\n\nimport sys\n\n# n = int(input())\n# arr = list(map(int, input().split()))\n\ndef sort_ravioli(n, arr):\n    if n == 1:\n        return "YES"\n    else:\n        sorted_array = []\n        stacks = []\n        for i in range(len(arr)):\n            stacks.append(arr[i])\n        while len(stacks) > 0:\n            tallest_stack = max(stacks)\n            tallest_stack_index = stacks.index(tallest_stack)\n            sorted_array.append(tallest_stack)\n            del stacks[tallest_stack_index]\n        if sorted_array == sorted(arr):\n            return "YES"\n        else:\n            return "NO"\n\n# def check_ravioli_sort(arr):\n#     if sort_ravioli(arr) == sorted(arr):\n#         return "YES"\n#     else:\n#         return "NO"\n\n# print(check_ravioli_sort(arr))\n\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(sort_ravioli(n, arr))\n', '\nn = int(input())\n\narr = list(map(int, input().split()))\n\ndef sort_ravioli(arr):\n    sorted_array = []\n    stacks = []\n    for i in range(len(arr)):\n        stacks.append(arr[i])\n    while len(stacks) > 0:\n        tallest_stack = max(stacks)\n        tallest_stack_index = stacks.index(tallest_stack)\n        sorted_array.append(tallest_stack)\n        del stacks[tallest_stack_index]\n    return sorted_array\n\n\ndef check_ravioli_sort(arr):\n    if sort_ravioli(arr) == sorted(arr):\n        return "YES"\n    else:\n        return "NO"\n\n\nprint(check_ravioli_sort(arr))\n', '\n# \n# import sys\n#\n# n = int(input())\n# arr = list(map(int, input().split()))\n#\n# def sort_ravioli(arr):\n#     sorted_array = []\n#     stacks = []\n#     for i in range(len(arr)):\n#         stacks.append(arr[i])\n#     while len(stacks) > 0:\n#         tallest_stack = max(stacks)\n#         tallest_stack_index = stacks.index(tallest_stack)\n#         sorted_array.append(tallest_stack)\n#         del stacks[tallest_stack_index]\n#     return sorted_array\n#\n# def check_ravioli_sort(arr):\n#     if sort_ravioli(arr) == sorted(arr):\n#         return "YES"\n#     else:\n#         return "NO"\n#\n# print(check_ravioli_sort(arr))\n', '\nimport sys\n\ndef sort_ravioli(arr):\n    sorted_array = []\n    stacks = []\n    for i in range(len(arr)):\n        stacks.append(arr[i])\n    while len(stacks) > 0:\n        tallest_stack = max(stacks)\n        tallest_stack_index = stacks.index(tallest_stack)\n        sorted_array.append(tallest_stack)\n        del stacks[tallest_stack_index]\n    return sorted_array\n\ndef check_ravioli_sort(arr):\n    if sort_ravioli(arr) == sorted(arr):\n        return "YES"\n    else:\n        return "NO"\n\nn = int(sys.stdin.readline())\narr = list(map(int, sys.stdin.readline().split()))\n\nprint(check_ravioli_sort(arr))\n\ndef sort_ravioli(arr):\n    sorted_array = []\n    stacks = []\n    for i in range(len(arr)):\n        stacks.append(arr[i])\n    while len(stacks) > 0:\n        tallest_stack = max(stacks)\n        tallest_stack_index = stacks.index(tallest_stack)\n        sorted_array.append(tallest_stack)\n        del stacks[tallest_stack_index]\n    return sorted_array\n\ndef check_ravioli_sort(arr):\n    if sort_ravioli(arr) == sorted(arr):\n        return "YES"\n    else:\n        return "NO"\n\nprint(check_ravioli_sort(arr))\n']
2022-04-17 22:07:23.788649 size on output set 4
