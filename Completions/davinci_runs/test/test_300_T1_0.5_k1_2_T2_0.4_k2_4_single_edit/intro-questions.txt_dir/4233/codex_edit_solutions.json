["\ndef stars(n,m,grid):\n    #print(grid)\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                s = 1\n                while i + s < n and i - s >= 0 and j + s < m and j - s >= 0:\n                    if grid[i + s][j] == '*' and grid[i - s][j] == '*' and grid[i][j + s] == '*' and grid[i][j - s] == '*':\n                        grid[i + s][j] = '.'\n                        grid[i - s][j] = '.'\n                        grid[i][j + s] = '.'\n                        grid[i][j - s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i + 1, j + 1, s - 1)\n    if k == 0:\n        print(-1)\n\n\nn, m = map(int, input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n,m,grid)\n", "\n\ndef main():\n    n,m = map(int,input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if (grid[i][j] == '*'):\n                if (i>0 and j>0 and grid[i-1][j-1] == '*') or (i>0 and grid[i-1][j] == '*') or (i>0 and j<m-1 and grid[i-1][j+1] == '*') or (j>0 and grid[i][j-1] == '*') or (j<m-1 and grid[i][j+1] == '*') or (i<n-1 and j>0 and grid[i+1][j-1] == '*') or (i<n-1 and grid[i+1][j] == '*') or (i<n-1 and j<m-1 and grid[i+1][j+1] == '*'):\n                    stars.append([i+1,j+1,1])\n                else:\n                    flag = True\n                    r = 0\n                    while(flag):\n                        r += 1\n                        if (i-r<0 or j-r<0 or i+r>=n or j+r>=m):\n                            flag = False\n                        else:\n                            if (grid[i-r][j-r] == '*' and grid[i-r][j+r] == '*' and grid[i+r][j-r] == '*' and grid[i+r][j+r] == '*'):\n                                stars.append([i+1,j+1,r+1])\n                            else:\n                                flag = False\n    if (len(stars) == 0):\n        print(\"-1\")\n    else:\n        print(len(stars)) \n        for i in range(len(stars)):\n            print(stars[i][0],stars[i][1],stars[i][2])\nmain()\n", "\n\ndef stars(n,m,grid):\n    #print(grid)\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                s = 1\n                while i + s < n and i - s >= 0 and j + s < m and j - s >= 0:\n                    if grid[i + s][j] == '*' and grid[i - s][j] == '*' and grid[i][j + s] == '*' and grid[i][j - s] == '*':\n                        grid[i + s][j] = '.'\n                        grid[i - s][j] = '.'\n                        grid[i][j + s] = '.'\n                        grid[i][j - s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i+1,j+1,s-1)\n    if k == 0:\n        print(-1)\n\n\nn,m = map(int,input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n,m,grid)\n", "\n\ndef main():\n    n,m = map(int,input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if (grid[i][j] == '*'): #if the current point is a star\n                if (i>0 and j>0 and grid[i-1][j-1] == '*') or (i>0 and grid[i-1][j] == '*') or (i>0 and j<m-1 and grid[i-1][j+1] == '*') or (j>0 and grid[i][j-1] == '*') or (j<m-1 and grid[i][j+1] == '*') or (i<n-1 and j>0 and grid[i+1][j-1] == '*') or (i<n-1 and grid[i+1][j] == '*') or (i<n-1 and j<m-1 and grid[i+1][j+1] == '*'): #if the star has a neighbor\n                    stars.append([i+1,j+1,1])\n                else: #if the star has no neighbor\n                    flag = True\n                    r = 0\n                    while(flag):\n                        r += 1\n                        if (i-r<0 or j-r<0 or i+r>=n or j+r>=m): #if the star is at the edge of the grid\n                            flag = False\n                        else:\n                            if (grid[i-r][j-r] == '*' and grid[i-r][j+r] == '*' and grid[i+r][j-r] == '*' and grid[i+r][j+r] == '*'): #if the star has 4 neighbors\n                                stars.append([i+1,j+1,r+1])\n                            else: #if the star does not have 4 neighbors\n                                flag = False\n    if (len(stars) == 0): #if there are no stars\n        print(\"-1\")\n    else: #if there are stars\n        print(len(stars))\n        for i in range(len(stars)):\n            print(stars[i][0],stars[i][1],stars[i][2])\nmain()\n", "\n\ndef stars(n, m, grid):\n    #print(grid)\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                s = 1\n                while i+s < n and i-s >= 0 and j+s < m and j-s >= 0:\n                    if grid[i+s][j] == '*' and grid[i-s][j] == '*' and grid[i][j+s] == '*' and grid[i][j-s] == '*' and grid[i+s][j+s] == '*' and grid[i+s][j-s] == '*' and grid[i-s][j+s] == '*' and grid[i-s][j-s] == '*':\n                        grid[i+s][j] = '.'; grid[i-s][j] = '.'; grid[i][j+s] = '.'; grid[i][j-s] = '.'; grid[i+s][j+s] = '.'; grid[i+s][j-s] = '.'; grid[i-s][j+s] = '.'; grid[i-s][j-s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i+1, j+1, s-1)\n    if k == 0:\n        print(-1)\n\n\nn, m = map(int, input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n, m, grid)\n", "import sys\n\ndef main():\n    n,m = map(int,sys.stdin.readline().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(sys.stdin.readline()))\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if (grid[i][j] == '*'):\n                if (i>0 and j>0 and grid[i-1][j-1] == '*') or (i>0 and grid[i-1][j] == '*') or (i>0 and j<m-1 and grid[i-1][j+1] == '*') or (j>0 and grid[i][j-1] == '*') or (j<m-1 and grid[i][j+1] == '*') or (i<n-1 and j>0 and grid[i+1][j-1] == '*') or (i<n-1 and grid[i+1][j] == '*') or (i<n-1 and j<m-1 and grid[i+1][j+1] == '*'):\n                    stars.append([i+1,j+1,1])\n                else:\n                    flag = True\n                    r = 0\n                    while(flag):\n                        r += 1\n                        if (i-r<0 or j-r<0 or i+r>=n or j+r>=m):\n                            flag = False\n                        else:\n                            if (grid[i-r][j-r] == '*' and grid[i-r][j+r] == '*' and grid[i+r][j-r] == '*' and grid[i+r][j+r] == '*'):\n                                stars.append([i+1,j+1,r+1])\n                            else:\n                                flag = False\n    if (len(stars) == 0):\n        print(\"-1\")\n    else:\n        print(len(stars))\n        for i in range(len(stars)):\n            print(stars[i][0],stars[i][1],stars[i][2])\nmain()\n", "\ndef main(n, m):\n    # n,m = map(int,input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input().strip()))\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if (grid[i][j] == '*'):\n                if (i > 0 and j > 0 and grid[i-1][j-1] == '*') or (i > 0 and grid[i-1][j] == '*') or (i > 0 and j < m-1 and grid[i-1][j+1] == '*') or (j > 0 and grid[i][j-1] == '*') or (j < m-1 and grid[i][j+1] == '*') or (i < n-1 and j > 0 and grid[i+1][j-1] == '*') or (i < n-1 and grid[i+1][j] == '*') or (i < n-1 and j < m-1 and grid[i+1][j+1] == '*'):\n                    stars.append([i+1, j+1, 1])\n                else:\n                    flag = True\n                    r = 0\n                    while(flag):\n                        r += 1\n                        if (i-r<0 or j-r<0 or i+r>=n or j+r>=m):\n                            flag = False\n                        else:\n                            if (grid[i-r][j-r] == '*' and grid[i-r][j+r] == '*' and grid[i+r][j-r] == '*' and grid[i+r][j+r] == '*'):\n                                stars.append([i+1,j+1,r+1])\n                            else:\n                                flag = False\n    if (len(stars) == 0):\n        print(\"-1\")\n    else:\n        print(len(stars))\n        for i in range(len(stars)):\n            print(stars[i][0],stars[i][1],stars[i][2])\nmain()\n", "\n\ndef stars(n,m,grid):\n    # print(grid)\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                s = 1\n                while i+s < n and i-s >= 0 and j+s < m and j-s >= 0:\n                    if grid[i+s][j] == '*' and grid[i-s][j] == '*' and grid[i][j+s] == '*' and grid[i][j-s] == '*':  # noqa\n                        grid[i+s][j] = '.'  # noqa\n                        grid[i-s][j] = '.'  # noqa\n                        grid[i][j+s] = '.'  # noqa\n                        grid[i][j-s] = '.'  # noqa\n                        s += 1\n                    else:\n                        break\n                print(i+1,j+1,s-1)\n    if k == 0:\n        print(-1)\n\n\nn,m = map(int,input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n,m,grid)\n"]