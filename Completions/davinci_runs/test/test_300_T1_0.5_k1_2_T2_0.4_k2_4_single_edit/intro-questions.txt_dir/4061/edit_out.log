2022-04-17 22:09:23.998065 num operations 1
2022-04-17 22:09:23.998084 size on input set 1
2022-04-17 22:09:32.395561 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    \"\"\"\n    We can note that for each character in s, we can either keep it or remove it. \n    We can keep it if it is in t. \n    We can remove it if it is not in t (or if we have already removed it). \n    This leads to a simple dp solution. \n    We keep a list of the length of the longest possible substring we can remove ending at each index in s.\n    \"\"\"\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    n = len(s)\n    dp = [0] * n\n    for i in range(n):\n        if s[i] in t:\n            if i == 0:\n                dp[i] = 0\n            else:\n                dp[i] = dp[i - 1]\n        else:\n            if i == 0:\n                dp[i] = 1\n            else:\n                dp[i] = dp[i - 1] + 1\n    print(max(dp))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    \"\"\"\n    We can note that for each character in s, we can either keep it or remove it. \n    We can keep it if it is in t. \n    We can remove it if it is not in t (or if we have already removed it). \n    This leads to a simple dp solution. \n    We keep a list of the length of the longest possible substring we can remove ending at each index in s.\n    \"\"\"\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    n = len(s)\n    dp = [0] * n\n    for i in range(n):\n        if s[i] in t:\n            if i == 0:\n                dp[i] = 0\n            else:\n                dp[i] = dp[i - 1]\n        else:\n            if i == 0:\n                dp[i] = 1\n            else:\n                dp[i] = dp[i - 1] + 1\n    print(max(dp))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    \"\"\"\n    We can note that for each character in s, we can either keep it or remove it.\n    We can keep it if it is in t.\n    We can remove it if it is not in t (or if we have already removed it).\n    This leads to a simple dp solution.\n    We keep a list of the length of the longest possible substring we can remove ending at each index in s.\n    \"\"\"\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    n = len(s)\n    dp = [0] * n\n    for i in range(n):\n        if s[i] in t:\n            if i == 0:\n                dp[i] = 0\n            else:\n                dp[i] = dp[i - 1]\n        else:\n            if i == 0:\n                dp[i] = 1\n            else:\n                dp[i] = dp[i - 1] + 1\n    print(max(dp))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    n = len(s)\n    print(s)\n    print(t)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650233364,
  "object": "edit"
}
2022-04-17 22:09:32.395838 fix syntax errors 4 ['\nimport sys\n\ndef main():\n    """\n    We can note that for each character in s, we can either keep it or remove it. \n    We can keep it if it is in t. \n    We can remove it if it is not in t (or if we have already removed it). \n    This leads to a simple dp solution. \n    We keep a list of the length of the longest possible substring we can remove ending at each index in s.\n    """\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    n = len(s)\n    dp = [0] * n\n    for i in range(n):\n        if s[i] in t:\n            if i == 0:\n                dp[i] = 0\n            else:\n                dp[i] = dp[i - 1]\n        else:\n            if i == 0:\n                dp[i] = 1\n            else:\n                dp[i] = dp[i - 1] + 1\n    print(max(dp))\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    """\n    We can note that for each character in s, we can either keep it or remove it. \n    We can keep it if it is in t. \n    We can remove it if it is not in t (or if we have already removed it). \n    This leads to a simple dp solution. \n    We keep a list of the length of the longest possible substring we can remove ending at each index in s.\n    """\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    n = len(s)\n    dp = [0] * n\n    for i in range(n):\n        if s[i] in t:\n            if i == 0:\n                dp[i] = 0\n            else:\n                dp[i] = dp[i - 1]\n        else:\n            if i == 0:\n                dp[i] = 1\n            else:\n                dp[i] = dp[i - 1] + 1\n    print(max(dp))\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    """\n    We can note that for each character in s, we can either keep it or remove it.\n    We can keep it if it is in t.\n    We can remove it if it is not in t (or if we have already removed it).\n    This leads to a simple dp solution.\n    We keep a list of the length of the longest possible substring we can remove ending at each index in s.\n    """\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    n = len(s)\n    dp = [0] * n\n    for i in range(n):\n        if s[i] in t:\n            if i == 0:\n                dp[i] = 0\n            else:\n                dp[i] = dp[i - 1]\n        else:\n            if i == 0:\n                dp[i] = 1\n            else:\n                dp[i] = dp[i - 1] + 1\n    print(max(dp))\n\nif __name__ == "__main__":\n    main()\n', '#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n    n = len(s)\n    print(s)\n    print(t)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-17 22:09:32.395899 size on output set 3
2022-04-17 22:09:32.395910 num operations 1
2022-04-17 22:09:32.395916 size on input set 1
2022-04-17 22:09:41.415950 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef subsequence(string, sub):\n    if not sub:\n        return True\n    i = 0\n    for c in string:\n        if c == sub[i]:\n            i += 1\n            if i == len(sub):\n                return True\n    return False\n\ndef solve(string, sub):\n    start = 0\n    end = len(string)\n    while start != end:\n        mid = (start + end) / 2\n        if subsequence(string[:mid], sub):\n            end = mid\n        else:\n            start = mid + 1\n    return start\n\nprint solve(raw_input(), raw_input())\n"
    },
    {
      "index": 1,
      "text": "\n\ndef subsequence(string, sub):\n    if not sub:\n        return True\n    i = 0\n    for c in string:\n        if c == sub[i]:\n            i += 1\n            if i == len(sub):\n                return True\n    return False\n\ndef solve(string, sub):\n    start = 0\n    end = len(string)\n    while start != end:\n        mid = (start + end) / 2\n        if subsequence(string[:mid], sub):\n            end = mid\n        else:\n            start = mid + 1\n    return len(string) - end\n\nprint(solve(input(), input()))\n"
    },
    {
      "index": 2,
      "text": "\n\ndef subsequence(string, sub):\n    if sub == \"\":\n        return True\n    for i in range(len(string)):\n        if string[i] == sub[0]:\n            for j in range(len(sub)):\n                if string[i + j] != sub[j]:\n                    break\n                if j == len(sub) - 1:\n                    return True\n    return False\n\ndef solve(string, sub):\n    start, end = 0, len(string)\n    while start != end:\n        mid = (start + end) // 2\n        if subsequence(string[:mid], sub):\n            end = mid\n        else:\n            start = mid + 1\n    return len(string) - end\n\nprint(solve(input(), input()))\n"
    },
    {
      "index": 3,
      "text": "\n\ndef subsequence(string, sub):\n    if not sub: # if sub is empty\n        return True\n    i = 0\n    for c in string: # iterate through string\n        if c == sub[i]:\n            i += 1 # if the character matches, move to the next character\n            if i == len(sub):\n                return True # if all characters match, return true\n    return False\n\ndef solve(string, sub):\n    start = 0 # start of the string\n    end = len(string) # end of the string\n    while start != end:\n        mid = (start + end) / 2 # mid point of the string\n        if subsequence(string[:mid], sub): # if the sub is in the first half\n            end = mid\n        else:\n            start = mid + 1 # if the sub is in the second half\n    return len(string) - end # return the length of the string minus the end\n\nprint solve(raw_input(), raw_input())\n"
    }
  ],
  "created": 1650233372,
  "object": "edit"
}
2022-04-17 22:09:41.416221 fix syntax errors 4 ['\n\ndef subsequence(string, sub):\n    if not sub:\n        return True\n    i = 0\n    for c in string:\n        if c == sub[i]:\n            i += 1\n            if i == len(sub):\n                return True\n    return False\n\ndef solve(string, sub):\n    start = 0\n    end = len(string)\n    while start != end:\n        mid = (start + end) / 2\n        if subsequence(string[:mid], sub):\n            end = mid\n        else:\n            start = mid + 1\n    return start\n\nprint solve(raw_input(), raw_input())\n', '\n\ndef subsequence(string, sub):\n    if not sub:\n        return True\n    i = 0\n    for c in string:\n        if c == sub[i]:\n            i += 1\n            if i == len(sub):\n                return True\n    return False\n\ndef solve(string, sub):\n    start = 0\n    end = len(string)\n    while start != end:\n        mid = (start + end) / 2\n        if subsequence(string[:mid], sub):\n            end = mid\n        else:\n            start = mid + 1\n    return len(string) - end\n\nprint(solve(input(), input()))\n', '\n\ndef subsequence(string, sub):\n    if sub == "":\n        return True\n    for i in range(len(string)):\n        if string[i] == sub[0]:\n            for j in range(len(sub)):\n                if string[i + j] != sub[j]:\n                    break\n                if j == len(sub) - 1:\n                    return True\n    return False\n\ndef solve(string, sub):\n    start, end = 0, len(string)\n    while start != end:\n        mid = (start + end) // 2\n        if subsequence(string[:mid], sub):\n            end = mid\n        else:\n            start = mid + 1\n    return len(string) - end\n\nprint(solve(input(), input()))\n', '\n\ndef subsequence(string, sub):\n    if not sub: # if sub is empty\n        return True\n    i = 0\n    for c in string: # iterate through string\n        if c == sub[i]:\n            i += 1 # if the character matches, move to the next character\n            if i == len(sub):\n                return True # if all characters match, return true\n    return False\n\ndef solve(string, sub):\n    start = 0 # start of the string\n    end = len(string) # end of the string\n    while start != end:\n        mid = (start + end) / 2 # mid point of the string\n        if subsequence(string[:mid], sub): # if the sub is in the first half\n            end = mid\n        else:\n            start = mid + 1 # if the sub is in the second half\n    return len(string) - end # return the length of the string minus the end\n\nprint solve(raw_input(), raw_input())\n']
2022-04-17 22:09:41.416270 size on output set 4
