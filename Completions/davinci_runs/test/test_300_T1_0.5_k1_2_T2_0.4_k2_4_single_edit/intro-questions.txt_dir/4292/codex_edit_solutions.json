["import sys\n\nn, k = [int(i) for i in sys.stdin.readline().split()]\nprices = [int(i) for i in sys.stdin.readline().split()]\nprices.sort()\n\nprint(sum(prices[:k]))\n", "\nimport sys\n\nn, k = [int(i) for i in sys.stdin.readline().split()]\nprices = [int(i) for i in sys.stdin.readline().split()]\nprices.sort()\n\nprint(sum(prices[:k]))\n", "\n\n# import sys\n\n# n, k = [int(i) for i in sys.stdin.readline().split()]\n# prices = [int(i) for i in sys.stdin.readline().split()]\n# prices.sort()\n\n# print(sum(prices[:k]))\n\n\n# from collections import deque\n\n# n, k = map(int, input().split())\n# a = deque(map(int, input().split()))\n\n# a.rotate(-k)\n# print(*a)\n\n# import sys\n# sys.setrecursionlimit(10**6)\n\n# def dfs(v):\n#     visited[v] = True\n#     for i in range(len(adj[v])):\n#         if not visited[adj[v][i]]:\n#             dfs(adj[v][i])\n\n# n, m = map(int, sys.stdin.readline().split())\n# adj = [[] for _ in range(n+1)]\n# visited = [False] * (n+1)\n\n# for i in range(m):\n#     a, b = map(int, sys.stdin.readline().split())\n#     adj[a].append(b)\n#     adj[b].append(a)\n\n# dfs(1)\n\n# print(visited.count(True)-1)\n\n\n# from collections import deque\n\n# n, m = map(int, input().split())\n# adj = [[] for _ in range(n+1)]\n# visited = [False] * (n+1)\n\n# for i in range(m):\n#     a, b = map(int, input().split())\n#     adj[a].append(b)\n#     adj[b].append(a)\n\n# q = deque()\n# q.append(1)\n# visited[1] = True\n\n# while q:\n#     v = q.popleft()\n#     for i in range(len(adj[v])):\n#         if not visited[adj[v][i]]:\n#             q.append(adj[v][i])\n#             visited[adj[v][i]] = True\n\n# print(visited.count(True)-1)\n\n\n# import sys\n# sys.setrecursionlimit(10**6)\n\n# def dfs(v):\n#     visited[v] = True\n#     for i in range(len(adj[v])):\n#         if not visited[adj[v][i]]:\n#             dfs(adj[v][i])\n\n# n, m = map(int, sys.stdin.readline().split())\n# adj = [[] for _ in range(n+1)]\n# visited = [False] * (n+1)\n\n# for i in range(m):\n#     a, b = map(int, sys.stdin.readline().split())\n#     adj[a].append(b)\n#     adj[b].append(a)\n\n# dfs(1)\n\n# print(visited.count(True)-1)\n\n\n# from collections import deque\n\n# n, m = map(int, input().split())\n# adj = [[] for _ in range(n+1)]\n# visited = [False] * (n+1)\n\n# for i in range(m):\n#     a, b = map(int, input().split())\n#     adj[a].append(b)\n#     adj[b].append(a)\n\n# q = deque()\n# q.append(1)\n# visited[1] = True\n\n# while q:\n#     v = q.popleft()\n#     for i in range(len(adj[v])):\n#         if not visited[adj[v][i]]:\n#             q.append(adj[v][i])\n#             visited[adj[v][i]] = True\n\n# print(visited.count(True)-1)\n\n\n# import sys\n# sys.setrecursionlimit(10**6)\n\n# def dfs(v):\n#     visited[v] = True\n#     for i in range(len(adj[v])):\n#         if not visited[adj[v][i]]:\n#             dfs(adj[v][i])\n\n# n, m = map(int, sys.stdin.readline().split())\n# adj = [[] for _ in range(n+1)]\n# visited = [False] * (n+1)\n\n# for i in range(m):\n#     a, b = map(int, sys.stdin.readline().split())\n#     adj[a].append(b)\n#     adj[b].append(a)\n\n# dfs(1)\n\n# print(visited.count(True)-1)\n\n\n# from collections import deque\n\n# n, m = map(int, input().split())\n# adj = [[] for _ in range(n+1)]\n# visited = [False] * (n+1)\n\n# for i in range(m):\n#     a, b = map(int, input().split())\n#     adj[a].append(b)\n#     adj[b].append(a)\n\n# q = deque()\n# q.append(1)\n# visited[1] = True\n\n# while q:\n#     v = q.popleft()\n#     for i in range(len(adj[v])):\n#         if not visited[adj[v][i]]:\n#             q.append(adj[v][i])\n#             visited[adj[v][i]] = True\n\n# print(visited.count(True)-1)\n\n\n# import sys\n# sys.setrecursionlimit(10**6)\n\n# def dfs(v):\n#     visited[v] = True\n#     for i in range(len(adj[v])):\n#         if not visited[adj[v][i]]:\n#             dfs(adj[v][i])\n\n# n, m = map(int, sys.stdin.readline().split())\n# adj = [[] for _ in range(n+1)]\n# visited = [False] * (n+1)\n\n# for i in range(m):\n#     a, b = map(int, sys.stdin.readline().split())\n#     adj[a].append(b)\n#     adj[b].append(a)\n\n# dfs(1)\n\n# print(visited.count(True)-1)\n\n\n# from collections import deque\n\n# n, m = map(int, input().split())\n# adj = [[] for _ in range(n+1)]\n# visited = [False] * (n+1)\n\n# for i in range(m):\n#     a, b = map(int, input().split())\n#     adj[a].append(b)\n#     adj[b].append(a)\n\n# q = deque()\n# q.append(1)\n# visited[1] = True\n\n# while q:\n#     v = q.popleft()\n#     for i in range(len(adj[v])):\n#         if not visited[adj[v][i]]:\n#             q.append(adj[v][i])\n", "\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\np = list(map(int, sys.stdin.readline().split()))\n\nprint(sum(sorted(p)[:k]))\n", "#\n\nimport sys\n\nn, k = [int(i) for i in sys.stdin.readline().split()]\nprices = [int(i) for i in sys.stdin.readline().split()]\nprices.sort()\n\nprint(sum(prices[:k]))\n", "#!/usr/bin/python3\n\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\np = list(map(int, sys.stdin.readline().split()))\n\nprint(sum(sorted(p)[:k]))\n"]