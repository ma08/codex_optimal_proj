2022-04-09 19:23:12.365870 """
You are given an array $s$ consisting of $n$ integers.

You have to find any array $t$ of length $k$ such that you can cut out maximum number of copies of array $t$ from array $s$.

Cutting out the copy of $t$ means that for each element $t_i$ of array $t$ you have to find $t_i$ in $s$ and remove it from $s$. If for some $t_i$ you cannot find such element in $s$, then you cannot cut out one more copy of $t$. The both arrays can contain duplicate elements.

For example, if $s = [1, 2, 3, 2, 4, 3, 1]$ and $k = 3$ then one of the possible answers is $t = [1, 2, 3]$. This array $t$ can be cut out $2$ times.   To cut out the first copy of $t$ you can use the elements $[1, \underline{\textbf{2}}, 3, 2, 4, \underline{\textbf{3}}, \underline{\textbf{1}}]$ (use the highlighted elements). After cutting out the first copy of $t$ the array $s$ can look like $[1, 3, 2, 4]$.  To cut out the second copy of $t$ you can use the elements $[\underline{\textbf{1}}, \underline{\textbf{3}}, \underline{\textbf{2}}, 4]$. After cutting out the second copy of $t$ the array $s$ will be $[4]$. 

Your task is to find such array $t$ that you can cut out the copy of $t$ from $s$ maximum number of times. If there are multiple answers, you may choose any of them.


-----Input-----

The first line of the input contains two integers $n$ and $k$ ($1 \le k \le n \le 2 \cdot 10^5$) — the number of elements in $s$ and the desired number of elements in $t$, respectively.

The second line of the input contains exactly $n$ integers $s_1, s_2, \dots, s_n$ ($1 \le s_i \le 2 \cdot 10^5$).


-----Output-----

Print $k$ integers — the elements of array $t$ such that you can cut out maximum possible number of copies of this array from $s$. If there are multiple answers, print any of them. The required array $t$ can contain duplicate elements. All the elements of $t$ ($t_1, t_2, \dots, t_k$) should satisfy the following condition: $1 \le t_i \le 2 \cdot 10^5$.


-----Examples-----
Input
7 3
1 2 3 2 4 3 1

Output
1 2 3 

Input
10 4
1 3 1 3 10 3 7 7 12 3

Output
7 3 1 3

Input
15 2
1 2 1 1 1 2 1 1 2 1 2 1 1 1 1

Output
1 1 



-----Note-----

The first example is described in the problem statement.

In the second example the only answer is $[7, 3, 1, 3]$ and any its permutations. It can be shown that you cannot choose any other array such that the maximum number of copies you can cut out would be equal to $2$.

In the third example the array $t$ can be cut out $5$ times.
"""
2022-04-09 19:23:12.365987 --------------------------
2022-04-09 19:23:42.626158 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n#Solution\n\n#!/usr/bin/env python3\n\nimport sys\nimport numpy as np\n\nn, k = map(int, input().split())\ns = np.array(list(map(int, input().split())))\n\ns_unique, s_counts = np.unique(s, return_counts=True)\ns_indices = np.argsort(-s_counts)\n\nt = s_unique[s_indices[:k]]\nprint(*t)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n# SOLUTION\n\n# The solution is getting the most frequent element in the array and then going through the array to find the most frequent element in the subarray\n# We will use a hashmap to store the frequency of the elements and then use a sliding window technique to find the maximum frequency element in the subarray\n\nimport sys\nimport collections\n\n# Get the input\nn,k = map(int, sys.stdin.readline().split())\ns = list(map(int, sys.stdin.readline().split()))\n\n# Make a hashmap to store the frequency of the elements\nfreq = collections.defaultdict(int)\n\n# Store the frequency of the elements\nfor i in s:\n    freq[i] += 1\n\n# Get the most frequent element in the array\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Get the first k elements of the array\nt = s[:k]\n\n# Initialize the result\nresult = []\n\n# Initialize the maximum frequency\nmax_freq = 0\n\n# Initialize the maximum frequency element\nmax_freq_elem = 0\n\n# Initialize the window\nwindow_start = 0\n\n# Get the frequency of the first k elements\nfor i in t:\n    freq[i] -= 1\n\n# Get the maximum frequency\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Store the maximum frequency element in the result\nresult.append(max_freq_elem)\n\n# Iterate through the array\nfor window_end in range(k,n):\n    # Remove the element from the window\n    freq[s[window_start]] += 1\n    # Increment the window start\n    window_start += 1\n    # Subtract the frequency of the element in the window\n    freq[s[window_end]] -= 1\n    # Get the maximum frequency\n    max_freq = max(freq.values())\n    # Get the element with the maximum frequency\n    max_freq_elem = [k for k,v in freq.items() if v==max_freq]\n    # Get the first element that has the maximum frequency\n    max_freq_elem = max_freq_elem[0]\n    # Store the maximum frequency element in the result\n    result.append(max_freq_elem)\n\n# Print the result\nprint(*result)"
    }
  ],
  "created": 1649546592,
  "id": "cmpl-4vEi8DFc6hxO5jEyYH1RpsqHywmHb",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 19:23:42.626366 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n#Solution\n\n#!/usr/bin/env python3\n\nimport sys\nimport numpy as np\n\nn, k = map(int, input().split())\ns = np.array(list(map(int, input().split())))\n\ns_unique, s_counts = np.unique(s, return_counts=True)\ns_indices = np.argsort(-s_counts)\n\nt = s_unique[s_indices[:k]]\nprint(*t)"
}
2022-04-09 19:23:42.626408 REASON stop
2022-04-09 19:23:42.638964 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n# SOLUTION\n\n# The solution is getting the most frequent element in the array and then going through the array to find the most frequent element in the subarray\n# We will use a hashmap to store the frequency of the elements and then use a sliding window technique to find the maximum frequency element in the subarray\n\nimport sys\nimport collections\n\n# Get the input\nn,k = map(int, sys.stdin.readline().split())\ns = list(map(int, sys.stdin.readline().split()))\n\n# Make a hashmap to store the frequency of the elements\nfreq = collections.defaultdict(int)\n\n# Store the frequency of the elements\nfor i in s:\n    freq[i] += 1\n\n# Get the most frequent element in the array\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Get the first k elements of the array\nt = s[:k]\n\n# Initialize the result\nresult = []\n\n# Initialize the maximum frequency\nmax_freq = 0\n\n# Initialize the maximum frequency element\nmax_freq_elem = 0\n\n# Initialize the window\nwindow_start = 0\n\n# Get the frequency of the first k elements\nfor i in t:\n    freq[i] -= 1\n\n# Get the maximum frequency\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Store the maximum frequency element in the result\nresult.append(max_freq_elem)\n\n# Iterate through the array\nfor window_end in range(k,n):\n    # Remove the element from the window\n    freq[s[window_start]] += 1\n    # Increment the window start\n    window_start += 1\n    # Subtract the frequency of the element in the window\n    freq[s[window_end]] -= 1\n    # Get the maximum frequency\n    max_freq = max(freq.values())\n    # Get the element with the maximum frequency\n    max_freq_elem = [k for k,v in freq.items() if v==max_freq]\n    # Get the first element that has the maximum frequency\n    max_freq_elem = max_freq_elem[0]\n    # Store the maximum frequency element in the result\n    result.append(max_freq_elem)\n\n# Print the result\nprint(*result)"
}
2022-04-09 19:23:42.639156 REASON stop
