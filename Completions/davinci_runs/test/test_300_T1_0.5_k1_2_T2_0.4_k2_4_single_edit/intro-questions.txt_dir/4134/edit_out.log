2022-04-17 22:31:00.686822 num operations 1
2022-04-17 22:31:00.686857 size on input set 1
2022-04-17 22:31:06.044223 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef solve(n, m, k, grid):\n    return 0\n\ndef main():\n    n, m, k = map(int, sys.stdin.readline().split())\n    grid = [list(map(int, sys.stdin.readline().split())) for _ in range(n)]\n    print(solve(n, m, k, grid))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import math\n\n\ndef solve(n, m, k, grid):\n    return math.ceil(k / n)\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    print(solve(n, m, k, grid))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef solve(n, m, k, grid):\n    return 0.0\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    print(solve(n, m, k, grid))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef solve(n, m, k, grid, dp):\n    return 0\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    dp = [[0] * m for _ in range(n)]\n    print(solve(n, m, k, grid, dp))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650234660,
  "object": "edit"
}
2022-04-17 22:31:06.044420 fix syntax errors 4 ["import sys\n\ndef solve(n, m, k, grid):\n    return 0\n\ndef main():\n    n, m, k = map(int, sys.stdin.readline().split())\n    grid = [list(map(int, sys.stdin.readline().split())) for _ in range(n)]\n    print(solve(n, m, k, grid))\n\nif __name__ == '__main__':\n    main()\n", "import math\n\n\ndef solve(n, m, k, grid):\n    return math.ceil(k / n)\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    print(solve(n, m, k, grid))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef solve(n, m, k, grid):\n    return 0.0\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    print(solve(n, m, k, grid))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef solve(n, m, k, grid, dp):\n    return 0\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    dp = [[0] * m for _ in range(n)]\n    print(solve(n, m, k, grid, dp))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-17 22:31:06.044460 size on output set 4
2022-04-17 22:31:06.044471 num operations 1
2022-04-17 22:31:06.044476 size on input set 1
2022-04-17 22:31:16.830377 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Solution by Andrew Xing, edited by Andrew Huang\n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()]\n  grid = [[int(x) for x in input().split()] for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n  dp[1][1][grid[0][0]] = 1\n  \n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n  \n  print(dp[n][m][k])\n\nif __name__ == \"__main__\":\n  main()\n"
    },
    {
      "index": 1,
      "text": "\n\n# Solution by Andrew Xing\n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()]\n  grid = [[int(x) for x in input().split()] for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n  dp[1][1][grid[0][0]^k] = 1\n  \n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x] += dp[i-1][j][x^grid[i-1][j-1]]\n        if j > 1:\n          dp[i][j][x] += dp[i][j-1][x^grid[i-1][j-1]]\n  \n  print(dp[n][m][k])\n\nif __name__ == \"__main__\":\n  main()\n"
    },
    {
      "index": 2,
      "text": "\n# Solution by Andrew Xing\n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()]\n  grid = [[int(x) for x in input().split()] for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)] # dp[i][j][x] = number of ways to get to (i,j) with xor of all numbers being x\n  dp[1][1][grid[0][0]] = 1\n  \n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n  \n  print(dp[n][m][k])\n\nif __name__ == \"__main__\":\n  main()\n"
    },
    {
      "index": 3,
      "text": "\n\n# Solution by Andrew Xing\n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()]\n  grid = [[int(x) for x in input().split()] for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)] # dp[i][j][x] is number of ways to get to (i,j) with xor of path being x\n  dp[1][1][grid[0][0]] = 1\n  \n  for i in range(1, n+1): # i is row\n    for j in range(1, m+1): # j is column\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1): # x is xor of path\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x] # add number of ways to get to (i-1, j) with xor of path being x\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x] # add number of ways to get to (i, j-1) with xor of path being x\n  \n  print(dp[n][m][k])\n\nif __name__ == \"__main__\":\n  main()\n"
    }
  ],
  "created": 1650234666,
  "object": "edit"
}
2022-04-17 22:31:16.830559 fix syntax errors 4 ['\n\n# Solution by Andrew Xing, edited by Andrew Huang\n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()]\n  grid = [[int(x) for x in input().split()] for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n  dp[1][1][grid[0][0]] = 1\n  \n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n  \n  print(dp[n][m][k])\n\nif __name__ == "__main__":\n  main()\n', '\n\n# Solution by Andrew Xing\n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()]\n  grid = [[int(x) for x in input().split()] for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n  dp[1][1][grid[0][0]^k] = 1\n  \n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x] += dp[i-1][j][x^grid[i-1][j-1]]\n        if j > 1:\n          dp[i][j][x] += dp[i][j-1][x^grid[i-1][j-1]]\n  \n  print(dp[n][m][k])\n\nif __name__ == "__main__":\n  main()\n', '\n# Solution by Andrew Xing\n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()]\n  grid = [[int(x) for x in input().split()] for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)] # dp[i][j][x] = number of ways to get to (i,j) with xor of all numbers being x\n  dp[1][1][grid[0][0]] = 1\n  \n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n  \n  print(dp[n][m][k])\n\nif __name__ == "__main__":\n  main()\n', '\n\n# Solution by Andrew Xing\n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()]\n  grid = [[int(x) for x in input().split()] for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)] # dp[i][j][x] is number of ways to get to (i,j) with xor of path being x\n  dp[1][1][grid[0][0]] = 1\n  \n  for i in range(1, n+1): # i is row\n    for j in range(1, m+1): # j is column\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1): # x is xor of path\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x] # add number of ways to get to (i-1, j) with xor of path being x\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x] # add number of ways to get to (i, j-1) with xor of path being x\n  \n  print(dp[n][m][k])\n\nif __name__ == "__main__":\n  main()\n']
2022-04-17 22:31:16.830697 size on output set 4
