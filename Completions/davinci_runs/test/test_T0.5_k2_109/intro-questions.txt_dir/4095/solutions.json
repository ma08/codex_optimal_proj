["def main():\n    n, m = map(int, input().split())\n    def intCompare(x):\n        if int(x) == m:\n            return 0\n        if int(x) < m:\n            return -1\n        return 1\n    p = list(map(intCompare, input().split()))\n    ret = 0\n    ind = p.index(0)\n    tem = 0\n    ret0 = [0] * 400001\n    ret1 = [0] * 400001\n    set0 = set()\n    for i in range(ind, -1, -1):\n        tem += p[i]\n        ret0[tem] += 1\n        set0.add(tem)\n    tem = 0\n    for i in range(ind, n):\n        tem += p[i]\n        ret1[tem] += 1\n    for i in set0:\n        ret += ret0[i] * (ret1[-i] + ret1[1-i]) \n    print(ret)\n    return 0\nmain()", "n , m = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\ndiff = [0] * n\nfor i in range(n):\n\tif a[i] < m:\n\t\tdiff[i] = -1\n\tif a[i] > m:\n\t\tdiff[i] = 1\n\t\naim = a.index(m)\nleft = {}\nright = {}\nsuml = 0\nfor i in reversed(list(range(aim + 1))):\n\tsuml += diff[i]\n\tif not suml in left:\n\t\tleft[suml] = 0\n\tleft[suml] += 1\n\t\nsumr = 0\nfor i in range(aim, n):\n\tsumr += diff[i]\n\tif not sumr in right:\n\t\tright[sumr] = 0\n\tright[sumr] += 1\n\n#print(left)\n#print(right)\n\nans = 0\nfor i in left:\n\twk1 = -i\n\tif wk1 in right:\n\t\tans += left[i] * right[wk1]\n\twk1 = 1 - i\n\tif wk1 in right:\n\t\tans += left[i] * right[wk1]\n\t\nprint(ans)\n\t\n", "T = input().split(' ')\nn = int(T[0])\nm = int(T[1])\nS = input().split(' ')\nfor i in range(n):\n    S[i] = int(S[i])\nind = 0\nfor k in range(n):\n    if S[k] == m:\n        ind = k\nk = ind\nP = [0]*(n+1)\nN = [0]*(n+1)\nR = [0]*(n-k)\nL = [0]*(k+1)\nfor i in range(k):\n    if S[k-1-i] < m:\n        L[k-1-i] = L[k-i] - 1\n    else:\n        L[k-1-i] = L[k-i] + 1\nfor i in range(n-k-1):\n    if S[k+1+i] > m:\n        R[1+i] = R[i] + 1\n    else:\n        R[1+i] = R[i] - 1\nc = 0\nfor el in R:\n    if el >= 0:\n        P[el]+=1\n        if el == 0:\n            N[el]+=1\n    else:\n        N[-el]+=1\nfor el in L:\n    if el >= 1:\n        c = c + N[el] + N[el-1]\n    else:\n        c = c + P[-el] + P[-el+1]\nprint(c)\n", "from collections import defaultdict\n\nn, m = list(map(int, input().split()))\nls = [int(i) for i in input().split()]\n\npos = 0\nfor i, j in enumerate(ls):\n    if j == m:\n        pos = i\n        break\n\ncnt = 1\n\nL = defaultdict(int)\nR = defaultdict(int)\n\nupper, lower = 0, 0\n\nfor i in range(pos-1, -1, -1):\n    if ls[i] > m:\n        upper += 1\n    else:\n        lower += 1\n\n    if upper == lower or upper - lower == 1:\n        cnt += 1\n\n    L[lower - upper] += 1\n\n\nupper, lower = 0, 0\n\nfor i in range(pos+1, n):\n    if ls[i] > m:\n        upper += 1\n    else:\n        lower += 1\n\n    if upper == lower or upper - lower == 1:\n        cnt += 1\n\n    R[lower - upper] += 1\n\n\nfor i in list(L.keys()):\n    cnt += L[i] * R[-i]\n    cnt += L[i] * R[-i-1]\n\nprint(cnt)\n", "n, m = map(int, input().split(\" \"))\nnumbers = list(map(int, input().split(\" \")))\n\nsmaller_greater = [(0, 0)]\nfor k in numbers:\n    s, g = smaller_greater[-1]\n    if k < m:\n        smaller_greater.append((s + 1, g))\n    elif k > m:\n        smaller_greater.append((s, g + 1))\n    else:\n        smaller_greater.append((s, g))\n\n\ni = numbers.index(m)\ns_median, g_median = smaller_greater[i]\n\ndifference = {}\nfor pack in smaller_greater[i + 1:]:\n    s, g = pack\n    s -= s_median\n    g -= g_median\n    if s - g in difference:\n        difference[s - g] += 1\n    else:\n        difference[s - g] = 1\n\ncount = 0\nfor start in range(i + 1):\n    s, g = smaller_greater[start]\n    s -= s_median\n    g -= g_median\n    if s - g in difference.keys():\n        count += difference[s - g]\n\n    if s - g - 1 in difference.keys():\n        count += difference[s - g - 1]\n\nprint(count)", "import sys\nn,m=list(map(int,input().split()))\ns=list(map(int,input().split()))\ntry:\n    ind=s.index(m)\nexcept:\n    print(0)\n    return\ndp=[0 for i in range(n)]\nfor i in range(ind+1,n):\n    if s[i]<m:\n        dp[i]=dp[i-1]-1\n    elif s[i]>m:\n        dp[i]=dp[i-1]+1\nfor i in range(ind-1,-1,-1):\n    if s[i]<m:\n        dp[i]=dp[i+1]-1\n    elif s[i]>m:\n        dp[i]=dp[i+1]+1    \nd=dict()\nfor i in range(ind+1,n):\n    try:\n        d[dp[i]]+=1\n    except:\n        d.update({dp[i]:1})\n\nans=0\nfor i in range(ind+1):\n    x=-dp[i]\n    try:\n        ans+=d[x]\n    except:\n        True\n    try:\n        ans+=d[x+1]\n    except:\n        True\n    if dp[i]==0 or dp[i]==1:\n        ans+=1\nprint(ans)\n", "n,m=list(map(int, input().split()))\nnums = list(map(int, input().split()))\n\nleft = {}\nright = {}\n\nleftl = 0\nleftm = 0\n\nrightl = 0\nrightm = 0\n\nstart = nums.index(m)\n\nans = 1\n\n#for left side\nfor i in range(start-1,-1,-1):\n    if nums[i]>m:\n        leftm += 1\n    else:\n        leftl += 1\n\n    if leftl == leftm:\n        ans += 1\n    elif leftl+1 == leftm:\n        ans += 1\n\n    temp = leftm - leftl\n    if temp in list(left.keys()):\n        left[temp] += 1\n    else:\n        left[temp] = 1\n\nfor i in range(start+1,n,1):\n    if nums[i]>m:\n        rightm += 1\n    else:\n        rightl += 1\n\n    if rightl == rightm:\n        ans += 1\n    elif rightl+1 == rightm:\n        ans += 1\n\n    temp = rightm-rightl\n    if temp in list(right.keys()):\n        right[temp] += 1\n    else:\n        right[temp] = 1\nfor i in list(left.keys()):\n    poss = (-1)*i\n    if poss in list(right.keys()):\n        ans += right[poss]*left[i]\n\n    if poss+1 in list(right.keys()):\n        ans += right[poss+1]*left[i]\n\n\n\nprint(ans)\n\n", "ma = {0:1}\nn, m = [int(x) for x in input().split()]\narr  = [int(x) for x in input().split()]\ns, fla, ans=0,False,0\nfor v in arr:\n    if v == m: fla = True\n    elif v < m: s-= 1\n    elif v > m: s+= 1\n    if fla:\n        ans += ma.get(s, 0) + ma.get(s-1, 0)\n    else:\n            ma[s] = ma.get(s, 0) + 1\nprint(ans)", "MAXN = 200001\nn, m = list(map(int, input().split(' ')))\ns = list(map(int, input().split(' ')))\n\nf = [0 for i in range(n+1)]\ncount = [0 for i in range(-MAXN, MAXN+1)]\n\nf[0] = 0\n\nlast = 0\nres = 0\n\n#print(n, m, s)\n\nfor i in range(1, n+1):\n    if s[i-1] == m:\n        for j in range(last, i):\n            count[f[j]] += 1\n        last = i\n\n    if s[i-1] > m:\n        f[i] = f[i-1] - 1\n    else:\n        f[i] = f[i-1] + 1\n\n    #print(i, last, count[f[i]] + count[f[i]-1])\n    res += count[f[i]] + count[f[i]-1]    \n\n#print(f)\nprint(res)\n\n\n\n", "MAXN = 200001\n\ndef less_sum(s, m):\n    n = len(s)\n    a = 0\n    b = 0\n    res = 0\n    last = 0\n\n    count = [0 for i in range(-MAXN, MAXN+1)]\n\n    count[0] = 1\n    x = 0\n    last = 1\n\n    for i in range(n):\n        if s[i] > m:\n            b += 1\n        else:\n            a += 1\n        x = a-b\n        #print(x)\n        #print(count[-2], count[-1], count[0], count[1], count[2])\n        if s[i] > m:\n            last -= count[x+1]\n        else:\n            last += count[x]\n        #print(x, last)\n        res += last\n        count[x] += 1\n        last += 1\n    \n    #print(res)\n\n    return res\n\nn, m = map(int, input().split(' '))\ns = list(map(int, input().split(' ')))[0:n]\n\n#print(m, s)\n\nprint(less_sum(s, m) - less_sum(s, m-1))", "n, m = list(map(int,input().split()))\np = list(map(int,input().split()))\nmindex = p.index(m)\nldict = {}\nrdict = {}\ndiff = 0\nans = 0\nldict[0] = 1\nrdict[0] = 1\nfor i in range(mindex-1,-1,-1):\n\tif p[i] < m:\n\t\tdiff-=1\n\telse:\n\t\tdiff+=1\n\tif diff in ldict.keys():\n\t\tldict[diff] += 1\n\telse:\n\t\tldict[diff] = 1\ndiff = 0\nfor i in range(mindex+1,n):\n\tif p[i] < m:\n\t\tdiff-=1\n\telse:\n\t\tdiff+=1\n\tif diff in rdict.keys():\n\t\trdict[diff] += 1\n\telse:\n\t\trdict[diff] = 1\nldictkey = ldict.keys()\nfor num in ldictkey:\n\tif -num in rdict.keys():\n\t\tans += ldict[num] * rdict[-num]\n\tif -num+1 in rdict.keys():\n\t\tans += ldict[num] * rdict[-num+1]\nprint(ans)", "L1=list(map(int, input().split()))\nnumList=list(map(int, input().split()))\nlength=L1[0]\ntargetnumber=L1[1]\npos=numList.index(targetnumber)\npos_r=pos+1\nrem=0\nright={0:1}\nleft={0:1}\nwhile pos_r<=length-1:\n    if numList[pos_r]>targetnumber:\n        rem+=1\n    else:\n        rem-=1\n    if rem not in right:\n        right[rem]=1\n    else:\n        right[rem]+=1\n    pos_r+=1\npos_l=pos-1\nrem=0\nwhile pos_l>=0:\n    if numList[pos_l]>targetnumber:\n        rem+=1\n    else:\n        rem-=1\n    if rem not in left:\n        left[rem]=1\n    else:\n        left[rem]+=1\n    pos_l-=1\nsum=0\nfor number_l in left:\n    if number_l*(-1) in right:\n        sum += (left[number_l] * right[(-1) * number_l])\n    if 1-number_l in right:\n        sum += (left[number_l] * right[1-number_l])\nprint(sum)", "from collections import Counter\n\n\ndef main():\n    n, m = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    p = l.index(m)\n    le, ri = Counter(), Counter()\n    c = 0\n    le[0] = ri[0] = 1\n    for i in range(p + 1, n):\n        if l[i] < m:\n            c += 1\n        else:\n            c -= 1\n        ri[c] += 1\n    c = 0\n    for i in range(p - 1, -1, -1):\n        if l[i] < m:\n            c -= 1\n        else:\n            c += 1\n        le[c] += 1\n    res = 0\n    for c, x in list(le.items()):\n        res += x * (ri[c] + ri[c - 1])\n    print(res)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def readints():\n    return [int(x) for x in input().strip().split()]\n\ndef main():\n    n, m = readints()\n    p = readints()\n    sums = {}\n\n    pivot = p.index(m)\n\n    diff = 0\n    sums[0] = 1\n    for i in range(pivot - 1, -1, -1):\n        if p[i] > m:\n            diff += 1\n        else:\n            diff -= 1\n        sums.setdefault(diff, 0)\n        sums[diff] += 1\n\n    ans = 0\n    diff = 0\n    for i in range(pivot, n):\n        if p[i] > m:\n            diff += 1\n\n        if p[i] < m:\n            diff -= 1\n\n        ans += sums.get(-diff, 0) + sums.get(1-diff, 0)\n\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n,m = list(map(int, input().split()))\nt = list(map(int, input().split()))\nmid = t.index(m)\n#print(mid)\n\nlefts = [0] * 600000\nlefts[300000]=1\ngt = 0\nlt = 0\nfor i in range(mid-1, -1, -1):\n\tif t[i]<m:\n\t\tlt+=1\n\telse:\n\t\tgt+=1\n\tlefts[300000+gt-lt]+=1\n\n\nrights = [0] * 600000\nrights[300000]=1\ngt = 0\nlt = 0\nfor i in range(mid+1, n):\n\tif t[i]<m:\n\t\tlt+=1\n\telse:\n\t\tgt+=1\n\trights[300000+gt-lt]+=1\n\n#print(lefts[299995:300005])\n#print(rights[299995:300005])\n\nres=0\nfor i in range(0, 210000):\n\tres += lefts[300000-i] * rights[300000+i]\n\tres += lefts[300000-i] * rights[300000+i+1]\n\tif i!=0:\n\t\tres += lefts[300000+i] * rights[300000-i]\n\t\tres += lefts[300000+i] * rights[300000-i+1]\n\nprint(res)\n", "from collections import defaultdict\nmediana = input().split()\nseq = input().split()\nindex = result = cnt = 0\nhashmap = defaultdict(lambda: 0)\nwhile (mediana[1] != seq[index]):\n    index += 1\nhashmap[0] = 1\nfor i in range(index+1, int(mediana[0])):\n    if (int(seq[i]) > int(mediana[1])):\n       cnt += 1\n    else:\n        cnt -= 1\n    hashmap[cnt] += 1\ncnt = 0\nfor i in range(index - 1, -1, -1):\n    if (int(seq[i]) < int(mediana[1])):\n        cnt += 1\n    else:\n        cnt -= 1\n    result += hashmap[cnt]\n    result += hashmap[cnt + 1]\nresult += hashmap[0] + hashmap[1]\nprint(result)", "import collections\ndic = collections.defaultdict(int)\n\nn, m = map(int, input().split())\np = list(map(int, input().split()))\n\nsum = 0\nflag = False\ndic[0] = 1\nans = 0\nfor v in p:\n    if v < m:\n        sum -= 1\n    elif v > m:\n        sum += 1\n\n    if v == m:\n        flag = True\n\n    if flag:\n        ans += dic[sum] + dic[sum - 1]\n    else:\n        dic[sum] += 1\n\nprint(ans)", "n,m=list(map(int,input().split()))\narr=list(map(int,input().split()))\nleft={0:0,1:0}\nright={0:0,1:0}\ns=0\ng=0\nif m not in arr:\n  print(0)\nelse:\n  for i in range(arr.index(m)+1,n):\n    if arr[i]<m:\n      s+=1\n    elif arr[i]>m:\n      g+=1\n    if g-s in list(right.keys()):\n      right[g-s]+=1\n    else:\n      right[g-s]=1\n  s=0\n  g=0\n  for i in range(arr.index(m)-1,-1,-1):\n    if arr[i]<m:\n      s+=1\n    elif arr[i]>m:\n      g+=1\n    if g-s in list(left.keys()):\n      left[g-s]+=1\n    else:\n      left[g-s]=1\n  count=0\n  for i in list(left.keys()):\n    if -i in list(right.keys()):\n      count+=left[i]*right[-i]\n    if -i+1 in list(right.keys()):\n      count+=left[i]*right[-i+1]\n  count+=left[0]+left[1]+right[0]+right[1]\n  count+=1\n  print(count)\n\n", "n,m=list(map(int,input().split()))\narr=list(map(int,input().split()))\nleft={0:0,1:0}\nright={0:0,1:0}\ns=0\ng=0\nif m not in arr:\n  print(0)\nelse:\n  for i in range(arr.index(m)+1,n):\n    if arr[i]<m:\n      s+=1\n    elif arr[i]>m:\n      g+=1\n    if g-s in list(right.keys()):\n      right[g-s]+=1\n    else:\n      right[g-s]=1\n  s=0\n  g=0\n  for i in range(arr.index(m)-1,-1,-1):\n    if arr[i]<m:\n      s+=1\n    elif arr[i]>m:\n      g+=1\n    if g-s in list(left.keys()):\n      left[g-s]+=1\n    else:\n      left[g-s]=1\n  count=0\n  for i in list(left.keys()):\n    if -i in list(right.keys()):\n      count+=left[i]*right[-i]\n    if -i+1 in list(right.keys()):\n      count+=left[i]*right[-i+1]\n  count+=left[0]+left[1]+right[0]+right[1]\n  count+=1\n  print(count)\n\n", "ma = {0:1}\nn, m = [int(x) for x in input().split()]\narr  = [int(x) for x in input().split()]\ns, fla, ans=0,False,0\nfor v in arr:\n    if v == m: fla = True\n    elif v < m: s-= 1\n    elif v > m: s+= 1\n    if fla:\n        ans += ma.get(s, 0) + ma.get(s-1, 0)\n    else:\n            ma[s] = ma.get(s, 0) + 1\nprint(ans)", "n, m = map(int,input().split())\na = list(map(int,input().split()))\nd = {}\nd[0] = 1\nhas = False\nsx = 0\nans = 0\nfor r in range(n):\n    if a[r] < m:\n        sx -= 1\n    elif a[r] > m:\n        sx += 1\n    else:\n        has = True\n    if has:\n        ans += d.get(sx,0) + d.get(sx-1,0)\n    else:\n        t = d.get(sx, 0) + 1\n        d[sx] = t\nprint(ans)", "n, m = list(map(int, input().split(' ')))\naa = list(map(int, input().split(' ')))\n\ndef countMoreLess(vs, value):\n    #print(vs)\n    cur = 0\n    res = { cur: 1 }\n\n    for v in vs:\n        cur += 1 if v > value else -1\n        res[cur] = res.get(cur, 0) + 1\n    #print(res)\n    return res\n\npos = aa.index(m)\n\nleftCounts = countMoreLess(list(reversed(aa[0:pos])), m)\nrightCounts = countMoreLess(aa[pos+1:], m)\n\nres = 0\nfor dif, count in list(leftCounts.items()):\n    res += count * rightCounts.get(-dif, 0)\n    res += count * rightCounts.get(-dif+1, 0)\n\nprint(res)\n", "import collections\ndic = collections.defaultdict(int)\n\nn, m = map(int, input().split())\np = list(map(int, input().split()))\n\nsum = 0\nflag = False\ndic[0] = 1\nans = 0\nfor v in p:\n    if v < m:\n        sum -= 1\n    elif v > m:\n        sum += 1\n\n    if v == m:\n        flag = True\n\n    if flag:\n        ans += dic[sum] + dic[sum - 1]\n    else:\n        dic[sum] += 1\n\nprint(ans)", "from collections import defaultdict\n\nn, m = map(int, input().split())\nl = [int(x) for x in input().split()]\n\nDict, has, sum, ans = defaultdict(lambda : 0), False, 0, 0\nDict[0] = 1\nfor i in range(n):\n    if l[i] > m:\n        sum += 1\n    elif l[i] < m:\n        sum -= 1\n    else:\n        has = True\n    \n    if has:\n        ans += Dict[sum] + Dict[sum-1]\n    else:\n        Dict[sum] += 1\nprint(ans)", "n,m=list(map(int,input().split()))\np=list(map(int,input().split()))\ncur=0\nwhile p[cur]!=m:\n    cur+=1\npos=cur\ns={}\ncnt,len=0,0\nwhile cur>=0:\n    if p[cur]<=m:\n        cnt+=1\n    len+=1\n    if 2*cnt-len in s:\n        s[2*cnt-len]+=1\n    else:\n        s[2*cnt-len]=1\n    cur-=1\ncur=pos\ncnt,len,ans=0,0,0\nwhile cur<n:\n    if p[cur]<=m:\n        cnt+=1\n    len+=1\n    if len-2*cnt+1 in s:\n        ans+=s[len-2*cnt+1]\n    if len-2*cnt+2 in s:\n        ans+=s[len-2*cnt+2]\n    cur+=1\nprint(ans)\n\n\n\n\n\n\n\n\n\n\n"]