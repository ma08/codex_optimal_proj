"""
The only difference between easy and hard versions is a number of elements in the array.

You are given an array $a$ consisting of $n$ integers. The value of the $i$-th element of the array is $a_i$.

You are also given a set of $m$ segments. The $j$-th segment is $[l_j; r_j]$, where $1 \le l_j \le r_j \le n$.

You can choose some subset of the given set of segments and decrease values on each of the chosen segments by one (independently). For example, if the initial array $a = [0, 0, 0, 0, 0]$ and the given segments are $[1; 3]$ and $[2; 4]$ then you can choose both of them and the array will become $b = [-1, -2, -2, -1, 0]$.

You have to choose some subset of the given segments (each segment can be chosen at most once) in such a way that if you apply this subset of segments to the array $a$ and obtain the array $b$ then the value $\max\limits_{i=1}^{n}b_i - \min\limits_{i=1}^{n}b_i$ will be maximum possible.

Note that you can choose the empty set.

If there are multiple answers, you can print any.

If you are Python programmer, consider using PyPy instead of Python when you submit your code.


-----Input-----

The first line of the input contains two integers $n$ and $m$ ($1 \le n \le 300, 0 \le m \le 300$) — the length of the array $a$ and the number of segments, respectively.

The second line of the input contains $n$ integers $a_1, a_2, \dots, a_n$ ($-10^6 \le a_i \le 10^6$), where $a_i$ is the value of the $i$-th element of the array $a$.

The next $m$ lines are contain two integers each. The $j$-th of them contains two integers $l_j$ and $r_j$ ($1 \le l_j \le r_j \le n$), where $l_j$ and $r_j$ are the ends of the $j$-th segment.


-----Output-----

In the first line of the output print one integer $d$ — the maximum possible value $\max\limits_{i=1}^{n}b_i - \min\limits_{i=1}^{n}b_i$ if $b$ is the array obtained by applying some subset of the given segments to the array $a$.

In the second line of the output print one integer $q$ ($0 \le q \le m$) — the number of segments you apply.

In the third line print $q$ distinct integers $c_1, c_2, \dots, c_q$ in any order ($1 \le c_k \le m$) — indices of segments you apply to the array $a$ in such a way that the value $\max\limits_{i=1}^{n}b_i - \min\limits_{i=1}^{n}b_i$ of the obtained array $b$ is maximum possible.

If there are multiple answers, you can print any.


-----Examples-----
Input
5 4
2 -2 3 1 2
1 3
4 5
2 5
1 3

Output
6
2
1 4 

Input
5 4
2 -2 3 1 4
3 5
3 4
2 4
2 5

Output
7
2
3 2 

Input
1 0
1000000

Output
0
0




-----Note-----

In the first example the obtained array $b$ will be $[0, -4, 1, 1, 2]$ so the answer is $6$.

In the second example the obtained array $b$ will be $[2, -3, 1, -1, 4]$ so the answer is $7$.

In the third example you cannot do anything so the answer is $0$.
"""
--------------------------
{
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\nimport heapq\n\n# max_heap = []\n# min_heap = []\n\n# def get_max_heap():\n#     return max_heap\n\n# def get_min_heap():\n#     return min_heap\n\n# def add_to_max_heap(element):\n#     heapq.heappush(max_heap, -element)\n\n# def add_to_min_heap(element):\n#     heapq.heappush(min_heap, element)\n\n# def get_max_heap_element():\n#     return -heapq.heappop(max_heap)\n\n# def get_min_heap_element():\n#     return heapq.heappop(min_heap)\n\n# def is_max_heap_empty():\n#     return len(max_heap) == 0\n\n# def is_min_heap_empty():\n#     return len(min_heap) == 0\n\n# def clear_max_heap():\n#     max_heap.clear()\n\n# def clear_min_heap():\n#     min_heap.clear()\n\ndef get_median(max_heap, min_heap):\n    if len(max_heap) > len(min_heap):\n        return -max_heap[0]\n    elif len(max_heap) < len(min_heap):\n        return min_heap[0]\n    else:\n        return -max_heap[0]\n\ndef add_to_heap(element, max_heap, min_heap):\n    if len(max_heap) == 0 or element < -max_heap[0]:\n        heapq.heappush(max_heap, -element)\n    else:\n        heapq.heappush(min_heap, element)\n\ndef rebalance_heaps(max_heap, min_heap):\n    if len(max_heap) - len(min_heap) > 1:\n        heapq.heappush(min_heap, -heapq.heappop(max_heap))\n    elif len(min_heap) - len(max_heap) > 1:\n        heapq.heappush(max_heap, -heapq.heappop(min_heap))\n\ndef add_to_median_heap(element, max_heap, min_heap):\n    add_to_heap(element, max_heap, min_heap)\n    rebalance_heaps(max_heap, min_heap)\n\ndef get_median_heap_element(max_heap, min_heap):\n    if len(max_heap) > len(min_heap):\n        return -heapq.heappop(max_heap)\n    elif len(max_heap) < len(min_heap):\n        return heapq.heappop(min_heap)\n    else:\n        return -heapq.heappop(max_heap)\n\ndef is_median_heap_empty(max_heap, min_heap):\n    return len(max_heap) == 0 and len(min_heap) == 0\n\ndef clear_median_heap(max_heap, min_heap):\n    max_heap.clear()\n    min_heap.clear()\n\ndef get_median_heap_size(max_heap, min_heap):\n    return len(max_heap) + len(min_heap)\n\ndef get_median_heap_max_size(max_heap, min_heap):\n    return max(len(max_heap), len(min_heap))\n\ndef get_median_heap_min_size(max_heap, min_heap):\n    return min(len(max_heap), len(min_heap))\n\ndef get_median_heap_sum(max_heap, min_heap):\n    return sum(max_heap) + sum(min_heap)\n\ndef get_median_heap_max_element(max_heap, min_heap):\n    if len(max_heap) > len(min_heap):\n        return -max_heap[0]\n    elif len(max_heap) < len(min_heap):\n        return min_heap[0]\n    else:\n        return max(min_heap[0], -max_heap[0])\n\ndef get_median_heap_min_element(max_heap, min_heap):\n    if len(max_heap) > len(min_heap):\n        return -max_heap[0]\n    elif len(max_heap) < len(min_heap):\n        return min_heap[0]\n    else:\n        return min(min_heap[0], -max_heap[0])\n\ndef get_median_heap_max_element_index(max_heap, min_heap):\n    if len(max_heap) > len(min_heap):\n        return 1\n    elif len(max_heap) < len(min_heap):\n        return 2\n    else:\n        return 1 if min_heap[0] < -max_heap[0] else 2\n\ndef get_median_heap_min_element_index(max_heap, min_heap):\n    if len(max_heap) > len(min_heap):\n        return 1\n    elif len(max_heap) < len(min_heap):\n        return 2\n    else:\n        return 1 if min_heap[0] > -max_heap[0] else 2\n\ndef get_median_heap_max_element_heap(max_heap, min_heap):\n    if len(max_heap) > len(min_heap):\n        return max_heap\n    elif len(max_heap) < len(min_heap):\n        return min_heap\n    else:\n        return max_heap if min_heap[0] < -max_heap[0] else min_heap\n\ndef get_median_heap_min_element_heap(max_heap, min_heap):\n    if len(max_heap) > len(min_heap):\n        return max_heap\n    elif len(max_heap) < len(min_heap):\n        return min_heap\n    else:\n        return max_heap if min_heap[0] > -max_heap[0] else min_heap\n\ndef get_median_heap_max_element_heap_index(max_heap, min_heap):\n    if len(max_heap) > len(min_heap):\n        return 1\n    elif len(max_heap) < len(min_heap):\n        return 2\n    else:\n        return 1 if min_heap[0] > -max_heap[0] else 2\n\ndef get_median_heap_min_element_heap_index(max_heap, min_heap):\n    if len(max_heap) > len(min_heap):\n        return 1\n    elif len(max_heap) < len(min_heap):\n        return 2\n    else:\n        return 1 if min_heap[0] < -max_heap[0] else 2\n\ndef get_median_heap_max_heap(max_heap, min_heap):\n    return max_heap\n\ndef get_median_heap_min_heap(max_heap, min_heap):\n    return min_heap\n\ndef get_median_heap_max_heap_index(max_heap, min_heap):\n    return 1\n\ndef get_median_heap_min_heap_index(max_heap, min_heap):\n    return 2\n\ndef get_median_heap_max_heap_element(max_heap, min_heap):\n    return -max_heap[0]\n\ndef get_median_heap_min_heap_element(max_heap, min_heap):\n    return min_heap[0]\n\ndef get_median_heap_max_heap_size(max_heap, min_heap):\n    return len(max_heap)\n\ndef get_median_heap_min_heap_size(max_heap, min_heap):\n    return len(min_heap)\n\ndef get_median_heap_max_heap_sum(max_heap, min_heap):\n    return sum(max_heap)\n\ndef get_median_heap_min_heap_sum(max_heap, min_heap):\n    return sum(min_heap)\n\ndef get_median_heap_max_heap_max_element(max_heap, min_heap):\n    return -max_heap[0]\n\ndef get_median_heap_min_heap_min_element(max_heap, min_heap):\n    return min_heap[0]\n\ndef get_median_heap_max_heap_max_element_index(max_heap, min_heap):\n    return 1\n\ndef get_median_heap_min_heap_min_element_index(max_heap, min_heap):\n    return 2\n\ndef get_median_heap_max_heap_max_element_heap(max_heap, min_heap):\n    return max_heap\n\ndef get_median_heap_min_heap_min_element_heap(max_heap, min_heap):\n    return min_heap\n\ndef get_median_heap_max_heap_max_element_heap_index(max_heap, min_heap):\n    return 1\n\ndef get_median_heap_min_heap_min_element_heap_index(max_heap, min_heap):\n    return 2\n\ndef get_median_heap_max_heap_min_element(max_heap, min_heap):\n    return -max_heap[0]\n\ndef get_median_heap_min_heap_max_element(max_heap, min_heap):\n    return min_heap[0]\n\ndef get_median_heap_max_heap_min_element_index(max_heap, min_heap):\n    return 1\n\ndef get_median_heap_min_heap_max_element_index(max_heap, min_heap):\n    return 2\n\ndef get_median_heap_max_heap_min_element_heap(max_heap, min_heap):\n    return max_heap\n\ndef get_median_heap_min_heap_max_element_heap(max_heap, min_heap):\n    return min_heap\n\ndef get_median_heap_max_heap_min_element_heap_index(max_heap, min_heap):\n    return 1\n\ndef get_median_heap_min_heap_max_element_heap_index(max_heap, min_heap):\n    return 2\n\ndef get_median_heap_max_heap_min_element_heap_max_element_index(max_heap, min_heap):\n    return 1\n\ndef get_median_heap_min_heap_max_element_heap_min_element_index(max_heap, min_heap):\n    return 2\n\ndef get_median_heap_max_heap_max_element_heap_max_element_index(max_heap, min_heap):\n    return 1\n\ndef get_median_heap_min_heap_min_element_heap_min_element_index(max_heap, min_heap):\n    return 2\n\ndef get_median_heap_max_heap_min_element_heap_min_element(max_heap, min_heap):\n    return -max_heap[0]\n\ndef get_median_heap_min_heap_max_element_heap_max_element(max_heap, min_heap):\n    return min_heap[0]\n\ndef get_median_heap_max_heap_max_element_heap_min_element(max_heap, min_heap):\n    return -max_heap[0]\n\ndef get_median_heap_min_heap_min_element_heap_max_element(max_heap, min_heap):\n    return min_heap[0]\n\ndef get_median_heap_max_heap_min_element_heap_min_element_heap(max_heap, min_heap):\n    return max_heap\n\ndef get_median_heap_min_heap_max_element_heap_max_element_heap(max_heap, min_heap):\n    return min_heap\n\ndef get_median_heap_max_heap_max_element_heap_min_element_heap(max_heap, min_heap):\n    return max_heap\n\ndef get_median_heap_min_heap_min_element_heap_max_element_heap(max_heap, min_heap):\n    return min_heap\n\ndef get_median_heap_max_heap_min_element_heap_min_element_heap_index(max_heap, min_heap):\n    return 1\n\ndef get_median_heap_min_heap_max_element_heap_max_element_heap_index(max_heap, min_heap):\n    return 2\n\ndef get_median_heap_max_heap_max_element_heap_min_element_heap_index(max_heap, min_heap):\n    return 1\n\ndef get_median_heap_min_heap_min_element_heap_max_element_heap_index(max_heap, min_heap):\n    return 2\n\ndef get_median_heap_max_heap_min_element_heap_min_element_heap_max_element_index(max_heap, min_heap):\n    return 1\n\ndef get_median_heap_min_heap_max_element_heap_max_element_heap_min_element_index(max_heap, min_heap):\n    return 2\n\ndef get_median_heap_max_heap_max_element_heap_min_element_heap_min_element_index(max_heap, min_heap):\n    return 1\n\ndef get_median_heap_min_heap_min_element_heap_max_element_heap_max_element_index(max_heap, min_heap):\n    return 2\n\ndef get_median_heap_max_heap_min_element_heap_min_element_heap_max_element(max_heap, min_heap):\n    return -max_heap[0]\n\ndef get_median_heap_min_heap_max_element_heap_max_element_heap_min_element(max_heap, min_heap):\n    return min_heap[0]\n\ndef get_median_heap_max_heap_max_element_heap_min_element_heap_min_element(max_heap, min_heap):\n    return -max_heap[0]\n\ndef get_median_heap_min_heap_min_element_heap_max_element_heap_max_element(max_heap, min_heap):\n    return min_heap[0]\n\ndef get_median_heap_max_heap_min_element_heap_min_element_heap_min_element(max_heap, min_heap):\n    return -max_heap[0]\n\ndef get_median_heap_min_heap_max_element_heap_max_element_heap_max_element(max_heap, min_heap):\n    return min_heap[0]\n\ndef get_median_"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef read_ints():\n    return [int(x) for x in sys.stdin.readline().strip().split()]\n\ndef main():\n    n, m = read_ints()\n    a = read_ints()\n    segments = []\n    for _ in range(m):\n        l, r = read_ints()\n        segments.append((l, r))\n    #print(n, m, a, segments)\n    #max_val = max(a)\n    #min_val = min(a)\n    #print(max_val, min_val)\n    #print(max_val - min_val)\n\n    min_val = min(a)\n    max_val = max(a)\n    max_diff = max_val - min_val\n    min_diff = max_diff\n    max_diff_segments = []\n    min_diff_segments = []\n\n    for l, r in segments:\n        diff = max(a[l-1:r]) - min(a[l-1:r])\n        if diff > min_diff:\n            min_diff = diff\n            min_diff_segments = [(l, r)]\n        elif diff == min_diff:\n            min_diff_segments.append((l, r))\n        if diff < max_diff:\n            max_diff = diff\n            max_diff_segments = [(l, r)]\n        elif diff == max_diff:\n            max_diff_segments.append((l, r))\n\n    #print(min_diff, min_diff_segments)\n    #print(max_diff, max_diff_segments)\n\n    #print(max_val - min_val)\n    print(max_val - min_val - min_diff)\n    print(len(min_diff_segments))\n    for l, r in min_diff_segments:\n        print(l, r)\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1648683939,
  "id": "cmpl-4rcINrKABgJdCaiMAPolbc2RWAHV6",
  "model": "code-davinci:002",
  "object": "text_completion"
}
0 {
  "finish_reason": "length",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\nimport heapq\n\n# max_heap = []\n# min_heap = []\n\n# def get_max_heap():\n#     return max_heap\n\n# def get_min_heap():\n#     return min_heap\n\n# def add_to_max_heap(element):\n#     heapq.heappush(max_heap, -element)\n\n# def add_to_min_heap(element):\n#     heapq.heappush(min_heap, element)\n\n# def get_max_heap_element():\n#     return -heapq.heappop(max_heap)\n\n# def get_min_heap_element():\n#     return heapq.heappop(min_heap)\n\n# def is_max_heap_empty():\n#     return len(max_heap) == 0\n\n# def is_min_heap_empty():\n#     return len(min_heap) == 0\n\n# def clear_max_heap():\n#     max_heap.clear()\n\n# def clear_min_heap():\n#     min_heap.clear()\n\ndef get_median(max_heap, min_heap):\n    if len(max_heap) > len(min_heap):\n        return -max_heap[0]\n    elif len(max_heap) < len(min_heap):\n        return min_heap[0]\n    else:\n        return -max_heap[0]\n\ndef add_to_heap(element, max_heap, min_heap):\n    if len(max_heap) == 0 or element < -max_heap[0]:\n        heapq.heappush(max_heap, -element)\n    else:\n        heapq.heappush(min_heap, element)\n\ndef rebalance_heaps(max_heap, min_heap):\n    if len(max_heap) - len(min_heap) > 1:\n        heapq.heappush(min_heap, -heapq.heappop(max_heap))\n    elif len(min_heap) - len(max_heap) > 1:\n        heapq.heappush(max_heap, -heapq.heappop(min_heap))\n\ndef add_to_median_heap(element, max_heap, min_heap):\n    add_to_heap(element, max_heap, min_heap)\n    rebalance_heaps(max_heap, min_heap)\n\ndef get_median_heap_element(max_heap, min_heap):\n    if len(max_heap) > len(min_heap):\n        return -heapq.heappop(max_heap)\n    elif len(max_heap) < len(min_heap):\n        return heapq.heappop(min_heap)\n    else:\n        return -heapq.heappop(max_heap)\n\ndef is_median_heap_empty(max_heap, min_heap):\n    return len(max_heap) == 0 and len(min_heap) == 0\n\ndef clear_median_heap(max_heap, min_heap):\n    max_heap.clear()\n    min_heap.clear()\n\ndef get_median_heap_size(max_heap, min_heap):\n    return len(max_heap) + len(min_heap)\n\ndef get_median_heap_max_size(max_heap, min_heap):\n    return max(len(max_heap), len(min_heap))\n\ndef get_median_heap_min_size(max_heap, min_heap):\n    return min(len(max_heap), len(min_heap))\n\ndef get_median_heap_sum(max_heap, min_heap):\n    return sum(max_heap) + sum(min_heap)\n\ndef get_median_heap_max_element(max_heap, min_heap):\n    if len(max_heap) > len(min_heap):\n        return -max_heap[0]\n    elif len(max_heap) < len(min_heap):\n        return min_heap[0]\n    else:\n        return max(min_heap[0], -max_heap[0])\n\ndef get_median_heap_min_element(max_heap, min_heap):\n    if len(max_heap) > len(min_heap):\n        return -max_heap[0]\n    elif len(max_heap) < len(min_heap):\n        return min_heap[0]\n    else:\n        return min(min_heap[0], -max_heap[0])\n\ndef get_median_heap_max_element_index(max_heap, min_heap):\n    if len(max_heap) > len(min_heap):\n        return 1\n    elif len(max_heap) < len(min_heap):\n        return 2\n    else:\n        return 1 if min_heap[0] < -max_heap[0] else 2\n\ndef get_median_heap_min_element_index(max_heap, min_heap):\n    if len(max_heap) > len(min_heap):\n        return 1\n    elif len(max_heap) < len(min_heap):\n        return 2\n    else:\n        return 1 if min_heap[0] > -max_heap[0] else 2\n\ndef get_median_heap_max_element_heap(max_heap, min_heap):\n    if len(max_heap) > len(min_heap):\n        return max_heap\n    elif len(max_heap) < len(min_heap):\n        return min_heap\n    else:\n        return max_heap if min_heap[0] < -max_heap[0] else min_heap\n\ndef get_median_heap_min_element_heap(max_heap, min_heap):\n    if len(max_heap) > len(min_heap):\n        return max_heap\n    elif len(max_heap) < len(min_heap):\n        return min_heap\n    else:\n        return max_heap if min_heap[0] > -max_heap[0] else min_heap\n\ndef get_median_heap_max_element_heap_index(max_heap, min_heap):\n    if len(max_heap) > len(min_heap):\n        return 1\n    elif len(max_heap) < len(min_heap):\n        return 2\n    else:\n        return 1 if min_heap[0] > -max_heap[0] else 2\n\ndef get_median_heap_min_element_heap_index(max_heap, min_heap):\n    if len(max_heap) > len(min_heap):\n        return 1\n    elif len(max_heap) < len(min_heap):\n        return 2\n    else:\n        return 1 if min_heap[0] < -max_heap[0] else 2\n\ndef get_median_heap_max_heap(max_heap, min_heap):\n    return max_heap\n\ndef get_median_heap_min_heap(max_heap, min_heap):\n    return min_heap\n\ndef get_median_heap_max_heap_index(max_heap, min_heap):\n    return 1\n\ndef get_median_heap_min_heap_index(max_heap, min_heap):\n    return 2\n\ndef get_median_heap_max_heap_element(max_heap, min_heap):\n    return -max_heap[0]\n\ndef get_median_heap_min_heap_element(max_heap, min_heap):\n    return min_heap[0]\n\ndef get_median_heap_max_heap_size(max_heap, min_heap):\n    return len(max_heap)\n\ndef get_median_heap_min_heap_size(max_heap, min_heap):\n    return len(min_heap)\n\ndef get_median_heap_max_heap_sum(max_heap, min_heap):\n    return sum(max_heap)\n\ndef get_median_heap_min_heap_sum(max_heap, min_heap):\n    return sum(min_heap)\n\ndef get_median_heap_max_heap_max_element(max_heap, min_heap):\n    return -max_heap[0]\n\ndef get_median_heap_min_heap_min_element(max_heap, min_heap):\n    return min_heap[0]\n\ndef get_median_heap_max_heap_max_element_index(max_heap, min_heap):\n    return 1\n\ndef get_median_heap_min_heap_min_element_index(max_heap, min_heap):\n    return 2\n\ndef get_median_heap_max_heap_max_element_heap(max_heap, min_heap):\n    return max_heap\n\ndef get_median_heap_min_heap_min_element_heap(max_heap, min_heap):\n    return min_heap\n\ndef get_median_heap_max_heap_max_element_heap_index(max_heap, min_heap):\n    return 1\n\ndef get_median_heap_min_heap_min_element_heap_index(max_heap, min_heap):\n    return 2\n\ndef get_median_heap_max_heap_min_element(max_heap, min_heap):\n    return -max_heap[0]\n\ndef get_median_heap_min_heap_max_element(max_heap, min_heap):\n    return min_heap[0]\n\ndef get_median_heap_max_heap_min_element_index(max_heap, min_heap):\n    return 1\n\ndef get_median_heap_min_heap_max_element_index(max_heap, min_heap):\n    return 2\n\ndef get_median_heap_max_heap_min_element_heap(max_heap, min_heap):\n    return max_heap\n\ndef get_median_heap_min_heap_max_element_heap(max_heap, min_heap):\n    return min_heap\n\ndef get_median_heap_max_heap_min_element_heap_index(max_heap, min_heap):\n    return 1\n\ndef get_median_heap_min_heap_max_element_heap_index(max_heap, min_heap):\n    return 2\n\ndef get_median_heap_max_heap_min_element_heap_max_element_index(max_heap, min_heap):\n    return 1\n\ndef get_median_heap_min_heap_max_element_heap_min_element_index(max_heap, min_heap):\n    return 2\n\ndef get_median_heap_max_heap_max_element_heap_max_element_index(max_heap, min_heap):\n    return 1\n\ndef get_median_heap_min_heap_min_element_heap_min_element_index(max_heap, min_heap):\n    return 2\n\ndef get_median_heap_max_heap_min_element_heap_min_element(max_heap, min_heap):\n    return -max_heap[0]\n\ndef get_median_heap_min_heap_max_element_heap_max_element(max_heap, min_heap):\n    return min_heap[0]\n\ndef get_median_heap_max_heap_max_element_heap_min_element(max_heap, min_heap):\n    return -max_heap[0]\n\ndef get_median_heap_min_heap_min_element_heap_max_element(max_heap, min_heap):\n    return min_heap[0]\n\ndef get_median_heap_max_heap_min_element_heap_min_element_heap(max_heap, min_heap):\n    return max_heap\n\ndef get_median_heap_min_heap_max_element_heap_max_element_heap(max_heap, min_heap):\n    return min_heap\n\ndef get_median_heap_max_heap_max_element_heap_min_element_heap(max_heap, min_heap):\n    return max_heap\n\ndef get_median_heap_min_heap_min_element_heap_max_element_heap(max_heap, min_heap):\n    return min_heap\n\ndef get_median_heap_max_heap_min_element_heap_min_element_heap_index(max_heap, min_heap):\n    return 1\n\ndef get_median_heap_min_heap_max_element_heap_max_element_heap_index(max_heap, min_heap):\n    return 2\n\ndef get_median_heap_max_heap_max_element_heap_min_element_heap_index(max_heap, min_heap):\n    return 1\n\ndef get_median_heap_min_heap_min_element_heap_max_element_heap_index(max_heap, min_heap):\n    return 2\n\ndef get_median_heap_max_heap_min_element_heap_min_element_heap_max_element_index(max_heap, min_heap):\n    return 1\n\ndef get_median_heap_min_heap_max_element_heap_max_element_heap_min_element_index(max_heap, min_heap):\n    return 2\n\ndef get_median_heap_max_heap_max_element_heap_min_element_heap_min_element_index(max_heap, min_heap):\n    return 1\n\ndef get_median_heap_min_heap_min_element_heap_max_element_heap_max_element_index(max_heap, min_heap):\n    return 2\n\ndef get_median_heap_max_heap_min_element_heap_min_element_heap_max_element(max_heap, min_heap):\n    return -max_heap[0]\n\ndef get_median_heap_min_heap_max_element_heap_max_element_heap_min_element(max_heap, min_heap):\n    return min_heap[0]\n\ndef get_median_heap_max_heap_max_element_heap_min_element_heap_min_element(max_heap, min_heap):\n    return -max_heap[0]\n\ndef get_median_heap_min_heap_min_element_heap_max_element_heap_max_element(max_heap, min_heap):\n    return min_heap[0]\n\ndef get_median_heap_max_heap_min_element_heap_min_element_heap_min_element(max_heap, min_heap):\n    return -max_heap[0]\n\ndef get_median_heap_min_heap_max_element_heap_max_element_heap_max_element(max_heap, min_heap):\n    return min_heap[0]\n\ndef get_median_"
}
REASON length
1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef read_ints():\n    return [int(x) for x in sys.stdin.readline().strip().split()]\n\ndef main():\n    n, m = read_ints()\n    a = read_ints()\n    segments = []\n    for _ in range(m):\n        l, r = read_ints()\n        segments.append((l, r))\n    #print(n, m, a, segments)\n    #max_val = max(a)\n    #min_val = min(a)\n    #print(max_val, min_val)\n    #print(max_val - min_val)\n\n    min_val = min(a)\n    max_val = max(a)\n    max_diff = max_val - min_val\n    min_diff = max_diff\n    max_diff_segments = []\n    min_diff_segments = []\n\n    for l, r in segments:\n        diff = max(a[l-1:r]) - min(a[l-1:r])\n        if diff > min_diff:\n            min_diff = diff\n            min_diff_segments = [(l, r)]\n        elif diff == min_diff:\n            min_diff_segments.append((l, r))\n        if diff < max_diff:\n            max_diff = diff\n            max_diff_segments = [(l, r)]\n        elif diff == max_diff:\n            max_diff_segments.append((l, r))\n\n    #print(min_diff, min_diff_segments)\n    #print(max_diff, max_diff_segments)\n\n    #print(max_val - min_val)\n    print(max_val - min_val - min_diff)\n    print(len(min_diff_segments))\n    for l, r in min_diff_segments:\n        print(l, r)\n\nif __name__ == '__main__':\n    main()"
}
REASON stop
