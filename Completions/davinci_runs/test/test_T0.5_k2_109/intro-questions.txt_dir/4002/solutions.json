["import sys\ninput = sys.stdin.readline\n\ndef main():\n    n, m, k = map(int, input().split())\n    half = m // 2\n    se_s = []\n    for i in range(n):\n        lst = list(map(int, input().split()))\n        lst.sort(reverse = True)\n        total_sub = sum(lst[:half])\n        dp = [[0 for _ in range(k)] for _ in range(half + 1)]\n        for num2 in lst:\n            for i in range(half, 0, -1):\n                for num in dp[i - 1]:\n                    pos = (num + num2) % k\n                    dp[i][pos] = max(dp[i][pos], num + num2)\n        se_s.append(set(dp[-1]))\n    \n    ans = 0\n    ans_sub = set([0])\n    for se in se_s:\n        se_tmp = set()\n        for num in se:\n            for num2 in ans_sub:\n                se_tmp.add(num + num2)\n                if (num + num2) % k == 0:\n                    ans = max(ans, num + num2)\n        tmp = [0 for _ in range(k)]\n        for num in se_tmp:\n            tmp[num % k] = max(tmp[num % k], num)\n        ans_sub = set(tmp)\n        \n    print(ans)\n                \n    \nmain()", "\n\"\"\"\n\n70*70*70\n70*70*70\n\ndp[num][k] = ?\n\n\"\"\"\n\nimport math\nfrom sys import stdin\n\nn,m,k = map(int,stdin.readline().split())\n\na = []\nfor i in range(n):\n    tmp = list(map(int,stdin.readline().split()))\n    a.append(tmp)\n\nmaxlis = []\n\nfor i in range(n):\n\n    tdp = [[float(\"-inf\")] * k for i in range(m//2+1)]\n    tdp[0][0] = 0\n    \n    for j in range(m):\n        for x in range(len(tdp)-2,-1,-1):\n            for y in range(k):\n                tdp[x+1][(y+a[i][j])%k] = max(tdp[x+1][(y+a[i][j])%k] , tdp[x][y] + a[i][j])\n    \n    udp = [float(\"-inf\")] * k\n    for x in range(len(tdp)):\n        for y in range(k):\n            udp[y] = max(udp[y] , tdp[x][y])\n\n    maxlis.append(udp)\n\n\ndp = maxlis[0]\n\nfor i in range(1,len(maxlis)):\n\n    now = maxlis[i]\n    ndp = [float(\"-inf\")] * k\n\n    for x in range(k):\n        for y in range(k):\n            ndp[(x+y)%k] = max(ndp[(x+y)%k] , dp[x]+now[y])\n    dp = ndp\n\n#print (maxlis)\nprint (dp[0])", "maxn = int(75)\nnvc = int(-100000005)\nG = [[nvc for _ in range(maxn)] for _ in range(maxn)]\nF = [[nvc for _ in range(maxn)] for _ in range(maxn)]\na = [0 for _ in range(maxn)]\nn,m,k = list(map(int,input().split(' ')))\nF[0][0]=0\nfor i in range(n):\n    a = list(map(int, input().split(' ')))\n    for u in range(m//2+1):\n        for v in range(k):\n            G[0][v] = max(G[0][v],F[u][v])\n    F = [[nvc for _ in range(maxn)] for _ in range(maxn)]\n    for j in range(m):\n        for u in range(m//2+1):\n            for v in range(k):\n                F[u+1][(v+a[j])%k] = max(F[u+1][(v+a[j])%k] , G[u][v]+a[j])\n                F[u][v] = max(F[u][v],G[u][v])\n        for u in range(m // 2 + 1):\n            for v in range(k): G[u][v]=F[u][v];\nres = 0\nfor i in range((m//2)+1): res = max(res , F[i][0])\nprint(res)\n", "n, m, k = list(map(int, input().split()))\nmat = [list(map(int, input().split())) for i in range(n)]\ninf = 1 << 30\nmodulars = [[-inf]*(k) for i in range(n)]\n\nfor index in range(n):\n    a = mat[index]\n    dp = [[[-inf]*k for i in range(m//2+1)]for _ in range(m+1)]\n    #dp[index][picked][mod] = index\u756a\u76ee\u307e\u3067\u898b\u3066\u305d\u306e\u3046\u3061picked\u500b\u53d6\u3063\u3066modular(mod k) \u306b\u306a\u308b\u6642\u306e\u6700\u5927\u5024\n    dp[0][0][0] = 0\n    for i in range(1, m+1):\n        v = a[i-1]\n        for picked in range(m//2+1):\n            for mod in range(k):\n                if picked >= 1:\n                    dp[i][picked][mod] = max(dp[i][picked][mod],dp[i-1][picked][mod], dp[i-1][picked-1][(mod-v) % k]+v)\n                else:\n                    dp[i][picked][mod] = max(dp[i][picked][mod],dp[i-1][picked][mod])\n\n    for mod in range(k):\n        modulars[index][mod] = max(dp[m][picked][mod]\n                                   for picked in range(m//2+1))\n\ndp = [[-inf]*(k) for i in range(n+1)]\ndp[0][0] = 0\n#dp[n][mod] = n\u756a\u76ee\u307e\u3067\u898b\u3066\u7dcf\u548c\u304cmod\u306e\u6642\u306e\u6700\u5927\u5024\nfor i in range(1, n+1):\n    for mod in range(k):\n        dp[i][mod] = max(dp[i-1][(mod-prevmod) % k] +\n                         modulars[i-1][prevmod]for prevmod in range(k))\n\nans = dp[n][0]\nprint(ans)\n\n\n", "def read_generator():\n    while True:\n        tokens = input().split(' ')\n        for t in tokens:\n            yield t\n\nreader = read_generator()\n\ndef readword():\n    return next(reader)\n\ndef readint():\n    return int(next(reader))\n\ndef readfloat():\n    return float(next(reader))\n\ndef readline():\n    return input()\n\n\ndef solve(n, m, t, a):\n    ss = []\n    for i in range(n):\n        h = sum(a[i])\n        s = [-1] * (h + 73)\n        s[0] = 0\n        for j in range(m):\n            for k in range(h + 1, -1, -1):\n                if 0 < (s[k] + 1) <= m // 2:\n                    v = a[i][j]\n                    s[k + v] = min(s[k + v], s[k] + 1)\n                    if s[k + v] == -1:\n                        s[k + v] = s[k] + 1\n        toAdd = []\n        for j in range(len(s)):\n            if s[j] > -1:\n                toAdd.append(j)\n\n        ss.append(toAdd)\n\n    res = [0] * t\n\n    for s in ss:\n        nextRes = [0] * t\n        for j in range(t):\n            for v in s:\n                nextRes[(v + res[j]) % t] = max(res[j] + v, nextRes[(v + res[j]) % t])\n        res = nextRes\n\n    return res[0]\n\ntests = 1\n\nfor t in range(tests):\n    n = readint()\n    m = readint()\n    k = readint()\n    a = []\n    for i in range(n):\n        r = []\n        for j in range(m):\n            r.append(readint())\n        a.append(r)\n    print(solve(n, m, k, a))\n", "n,m,k = list(map(int, input().split()))\nA  = [list(map(int, input().split())) for _ in range(n)]\n\ndp1 = []\nfor i in range(n):\n    B = A[i]\n    temp = [[-1]*(k) for _ in range(m//2+1)]\n    temp[0][0] = 0\n    for b in B:\n        for l in reversed(list(range(m//2))):\n            for j in range(k):\n                if temp[l][j] != -1:\n                    temp[l+1][(b+j)%k] = max(temp[l+1][(b+j)%k], temp[l][j]+b)\n    temp2 = [-1]*k\n    for j in range(k):\n        for l in range(m//2+1):\n            temp2[j] = max(temp2[j], temp[l][j])\n    dp1.append(temp2)\n#print(dp1)\ndp2 = [[-1]*k for i in range(n+1)]\ndp2[0][0] = 0\nfor i in range(n):\n    for j in range(k):\n        dp2[i+1][j] =dp2[i][j]\n    for j in range(k):\n        if dp1[i][j] == -1:\n            continue\n        for l in range(k):\n            if dp2[i][l] == -1:\n                continue\n            dp2[i+1][(j+l)%k] = max(dp2[i+1][(j+l)%k], dp2[i][l]+dp1[i][j])\nans = dp2[n][0]\nprint(max(ans, 0))\n"]