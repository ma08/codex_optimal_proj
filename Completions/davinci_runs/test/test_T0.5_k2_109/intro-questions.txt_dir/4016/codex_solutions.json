["\n\n# SOLUTION\n# This is a really interesting problem.\n# The idea is to find the smallest repeating unit of the string t.\n# This can be done by finding the smallest length of a prefix of t that is a suffix of t as well.\n# Then, we just need to repeat this prefix k times.\n\n# The function to find the smallest repeating unit of t.\n# This function is O(n^2) in the worst case.\ndef findSmallestRepeatingUnit(t):\n    n = len(t)\n    for i in range(n//2, 0, -1):\n        if t[:i] == t[n-i:]:\n            return t[:i]\n    return t\n\n# The main function that prints the result.\ndef main():\n    n, k = map(int, input().split())\n    t = input()\n    print(findSmallestRepeatingUnit(t) * k)\n\n# The entry point of the program.\nif __name__ == '__main__':\n    main()", "\n\ndef solve(string, k):\n\tn = len(string)\n\ti = 0\n\twhile i < n and string[i] == string[0]:\n\t\ti += 1\n\tif i == n:\n\t\treturn string * (k // n) + string[:k % n]\n\telse:\n\t\treturn string * k\n\nn, k = map(int, input().split())\nstring = input()\nprint(solve(string, k))"]