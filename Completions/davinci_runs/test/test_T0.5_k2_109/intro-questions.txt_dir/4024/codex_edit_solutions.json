["\n\ndef main():\n  n, k = map(int, input().split())\n  s = input()\n\n  if k > n:\n    print(-1)\n    return\n\n  dp = [[-1 for j in xrange(k)] for i in xrange(n)]\n  for i in xrange(n):\n    dp[i][0] = n - i\n\n  for i in xrange(1, n):\n    for j in xrange(1, k):\n      dp[i][j] = dp[i - 1][j]\n      for l in xrange(i):\n        if s[i] == s[l]:\n          dp[i][j] = min(dp[i][j], dp[l][j - 1] + n - i)\n\n  print(dp[n - 1][k - 1])\n\nmain()\n", "#!/usr/bin/env python\n\nimport sys\nimport os\n\ndef main():\n    #print \"Hello World!\"\n    #print sys.argv\n    #print os.path.abspath(sys.argv[1])\n    #print os.path.basename(sys.argv[1])\n    #print os.path.dirname(sys.argv[1])\n    #print os.path.exists(sys.argv[1])\n    #print os.path.isfile(sys.argv[1])\n    #print os.path.isdir(sys.argv[1])\n    #print os.path.islink(sys.argv[1])\n    #print os.path.ismount(sys.argv[1])\n    #print os.path.join(os.path.dirname(sys.argv[1]), os.path.basename(sys.argv[1]))\n    #print os.path.split(sys.argv[1])\n    #print os.path.splitext(sys.argv[1])\n    #print os.path.getatime(sys.argv[1])\n    #print os.path.getmtime(sys.argv[1])\n    #print os.path.getctime(sys.argv[1])\n    #print os.path.getsize(sys.argv[1])\n    #print os.path.getmtime(sys.argv[1])\n    #print os.path.getctime(sys.argv[1])\n    #print os.path.getsize(sys.argv[1])\n    #print os.path.getatime(sys.argv[1])\n    #print os.path.getmtime(sys.argv[1])\n    #print os.path.getctime(sys.argv[1])\n    #print os.path.getsize(sys.argv[1])\n    #print os.path.getatime(sys.argv[1])\n    #print os.path.getmtime(sys.argv[1])\n    #print os.path.getctime(sys.argv[1])\n    #print os.path.getsize(sys.argv[1])\n    #print os.path.getatime(sys.argv[1])\n    #print os.path.getmtime(sys.argv[1])\n    #print os.path.getctime(sys.argv[1])\n    #print os.path.getsize(sys.argv[1])\n    #print os.path.getatime(sys.argv[1])\n    #print os.path.getmtime(sys.argv[1])\n    #print os.path.getctime(sys.argv[1])\n    #print os.path.getsize(sys.argv[1])\n    #print os.path.getatime(sys.argv[1])\n    #print os.path.getmtime(sys.argv[1])\n    #print os.path.getctime(sys.argv[1])\n    #print os.path.getsize(sys.argv[1])\n    #print os.path.getatime(sys.argv[1])\n    #print os.path.getmtime(sys.argv[1])\n    #print os.path.getctime(sys.argv[1])\n    #print os.path.getsize(sys.argv[1])\n    #print os.path.getatime(sys.argv[1])\n    #print os.path.getmtime(sys.argv[1])\n    #print os.path.getctime(sys.argv[1])\n    #print os.path.getsize(sys.argv[1])\n    #print os.path.getatime(sys.argv[1])\n    #print os.path.getmtime(sys.argv[1])\n    #print os.path.getctime(sys.argv[1])\n    #print os.path.getsize(sys.argv[1])\n    #print os.path.getatime(sys.argv[1])\n    #print os.path.getmtime(sys.argv[1])\n    #print os.path.getctime(sys.argv[1])\n    #print os.path.getsize(sys.argv[1])\n    #print os.path.getatime(sys.argv[1])\n    #print os.path.getmtime(sys.argv[1])\n    #print os.path.getctime(sys.argv[1])\n    #print os.path.getsize(sys.argv[1])\n    #print os.path.getatime(sys.argv[1])\n    #print os.path.getmtime(sys.argv[1])\n    #print os.path.getctime(sys.argv[1])\n    #print os.path.getsize(sys.argv[1])\n    #print os.path.getatime(sys.argv[1])\n    #print os.path.getmtime(sys.argv[1])\n    #print os.path.getctime(sys.argv[1])\n    #print os.path.getsize(sys.argv[1])\n    #print os.path.getatime(sys.argv[1])\n    #print os.path.getmtime(sys.argv[1])\n    #print os.path.getctime(sys.argv[1])\n    #print os.path.getsize(sys.argv[1])\n    #print os.path.getatime(sys.argv[1])\n    #print os.path.getmtime(sys.argv[1])\n    #print os.path.getctime(sys.argv[1])\n    #print os.path.getsize(sys.argv[1])\n    #print os.path.getatime(sys.argv[1])\n    #print os.path.getmtime(sys.argv[1])\n    #print os.path.getctime(sys.argv[1])\n    #print os.path.getsize(sys.argv[1])\n    #print os.path.getatime(sys.argv[1])\n    #print os.path.getmtime(sys.argv[1])\n    #print os.path.getctime(sys.argv[1])\n    #print os.path.getsize(sys.argv[1])\n    #print os.path.getatime(sys.argv[1])\n    #print os.path.getmtime(sys.argv[1])\n    #print os.path.getctime(sys.argv[1])\n    #print os.path.getsize(sys.argv[1])\n    #print os.path.getatime(sys.argv[1])\n    #print os.path.getmtime(sys.argv[1])\n    #print os.path.getctime(sys.argv[1])\n    #print os.path.getsize(sys.argv[1])\n    #print os.path.getatime(sys.argv[1])\n    #print os.path.getmtime(sys.argv[1])\n    #print os.path.getctime(sys.argv[1])\n    #print os.path.getsize(sys.argv[1])\n    #print os.path.getatime(sys.argv[1])\n    #print os.path.getmtime(sys.argv[1])\n    #print os.path.getctime(sys.argv[1])\n    #print os.path.getsize(sys.argv[1])\n    #print os.path.getatime(sys.argv[1])\n    #print os.path.getmtime(sys.argv[1])\n    #print os.path\n", "\n\ndef main():\n  n, k = map(int, input().split())\n  s = input()\n\n  if k > n:\n    print -1\n    return\n\n  dp = [[-1 for j in range(k)] for i in range(n)]\n  for i in xrange(n):\n    dp[i][0] = n - i\n\n  for i in range(1, n):\n    for j in range(1, k):\n      dp[i][j] = dp[i - 1][j]\n      for l in range(i):\n        if s[i] == s[l]:\n          dp[i][j] = min(dp[i][j], dp[l][j - 1] + n - i)\n\n  print dp[n - 1][k - 1]\n\nmain()\n", "from collections import defaultdict\n\ndef solve(n, k, s):\n    count = defaultdict(int)\n    for i in range(n):\n        count[s[i]] += 1\n    if k > n: return -1\n    if k == n: return sum(count.values())\n    if k == 1: return n - max(count.values())\n    if k == 2: return sum(count.values()) - max(count.values())\n    return -1 # unreachable\n\nif __name__ == '__main__':\n    n, k = map(int, input().split())\n    s = input()\n    print(solve(n, k, s))\n", "\nfrom collections import defaultdict\n\ndef solve(n, k, s):\n    count = defaultdict(int)\n    for i in range(n):\n        count[s[i]] += 1\n    if k > n: return -1\n    if k == n: return sum(count.values())\n    if k == 1: return n - max(count.values())\n    if k == 2: return sum(count.values()) - max(count.values())\n    else: return -1\n\nif __name__ == '__main__':\n    n, k = map(int, input().split())\n    s = input()\n    print(solve(n, k, s))\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport os\nimport sys\nimport time\nimport random\nimport string\nimport hashlib\nimport logging\nimport traceback\n\nimport tornado.web\nimport tornado.ioloop\nimport tornado.httpserver\nimport tornado.options\nimport tornado.escape\n\nfrom tornado.options import define, options\n\ndefine(\"port\", default=8888, help=\"run on the given port\", type=int)\ndefine(\"debug\", default=False, help=\"run in debug mode\")\n\nclass Application(tornado.web.Application):\n    def __init__(self):\n        handlers = [\n            (r\"/\", MainHandler),\n            (r\"/upload\", UploadHandler),\n            (r\"/download\", DownloadHandler),\n        ]\n        settings = dict(\n            template_path=os.path.join(os.path.dirname(__file__), \"templates\"),\n            static_path=os.path.join(os.path.dirname(__file__), \"static\"),\n            debug=options.debug,\n        )\n        tornado.web.Application.__init__(self, handlers, **settings)\n\nclass BaseHandler(tornado.web.RequestHandler):\n    def get_current_user(self):\n        return self.get_secure_cookie(\"user\")\n\nclass MainHandler(BaseHandler):\n    def get(self):\n        self.render(\"index.html\")\n\nclass UploadHandler(BaseHandler):\n    def post(self):\n        try:\n            file_name = self.get_argument(\"file_name\")\n            file_data = self.get_argument(\"file_data\")\n            file_data = file_data.replace(\"data:application/octet-stream;base64,\", \"\")\n            file_data = file_data.decode(\"base64\")\n            file_path = os.path.join(os.path.dirname(__file__), \"upload\", file_name)\n            with open(file_path, \"wb\") as f:\n                f.write(file_data)\n            self.write({\"status\": \"success\"})\n        except:\n            logging.error(traceback.format_exc())\n            self.write({\"status\": \"fail\"})\n\nclass DownloadHandler(BaseHandler):\n    def get(self):\n        try:\n            file_name = self.get_argument(\"file_name\")\n            file_path = os.path.join(os.path.dirname(__file__), \"upload\", file_name)\n            with open(file_path, \"rb\") as f:\n                file_data = f.read()\n            self.write({\"status\": \"success\", \"file_data\": file_data.encode(\"base64\")})\n        except:\n            logging.error(traceback.format_exc())\n            self.write({\"status\": \"fail\"})\n\ndef main():\n    tornado.options.parse_command_line()\n    http_server = tornado.httpserver.HTTPServer(Application())\n    http_server.listen(options.port)\n    tornado.ioloop.IOLoop.instance().start()\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n  n, k = map(int, raw_input().split())\n  s = raw_input()\n\n  if k > n:\n    print -1\n    return\n\n  dp = [[-1 for j in range(k)] for i in range(n)]\n  for i in range(n):\n    dp[i][0] = n - i\n\n  for i in range(1, n):\n    for j in range(1, k):\n      dp[i][j] = dp[i - 1][j]\n      for l in range(i):\n        if s[i] == s[l]:\n          dp[i][j] = min(dp[i][j], dp[l][j - 1] + n - i)\n\n  print dp[n - 1][k - 1]\n\nmain()\n"]