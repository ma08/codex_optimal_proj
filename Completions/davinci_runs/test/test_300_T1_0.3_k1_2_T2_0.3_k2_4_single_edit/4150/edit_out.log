2022-04-20 04:18:35.093501 num operations 1
2022-04-20 04:18:35.093557 size on input set 1
2022-04-20 04:18:35.093803 using api key soukgp
2022-04-20 04:18:38.873042 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# print(n, k)\n# print(a)\n\n# 1. find the max\n# 2. find the k closest to the left and right of the max\n# 3. remove the max and the k closest left and right\n# 4. repeat\n\n# 1. find the max\ndef find_max(a):\n    max_index = 0\n    max_value = a[0]\n    for i in range(1, len(a)):\n        if a[i] > max_value:\n            max_index = i\n            max_value = a[i]\n    return max_index\n\n# 2. find the k closest to the left and right of the max\ndef find_k_closest(a, max_index, k):\n    left_index = max_index - 1\n    right_index = max_index + 1\n    left_count = 0\n    right_count = 0\n    while left_count < k and left_index >= 0:\n        left_count += 1\n        left_index -= 1\n    while right_count < k and right_index < len(a):\n        right_count += 1\n        right_index += 1\n    return left_index + 1, right_index - 1\n\n# 3. remove the max and the k closest left and right\ndef remove_max_and_k_closest(a, max_index, left_index, right_index):\n    a = a[:left_index] + a[right_index+1:]\n    return a\n\n# 4. repeat\ndef repeat(a, k):\n    result = []\n    while len(a) > 0:\n        max_index = find_max(a)\n        left_index, right_index = find_k_closest(a, max_index, k)\n        a = remove_max_and_k_closest(a, max_index, left_index, right_index)\n        result += [left_index, right_index]\n    return result\n\n# 5. print the result\ndef print_result(result, n):\n    result_string = \"\"\n    for i in range(n):\n        if i in result:\n            result_string += \"1\"\n        else:\n            result_string += \"2\"\n    print(result_string)\n\ndef main():\n    result = repeat(a, k)\n    print_result(result, n)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# print(n, k)\n# print(a)\n\n# 1. find the max\n# 2. find the k closest to the left and right of the max\n# 3. remove the max and the k closest left and right\n# 4. repeat\n\n# 1. find the max\ndef find_max(a):\n    max_index = 0\n    max_value = a[0]\n    for i in range(1, len(a)):\n        if a[i] > max_value:\n            max_index = i\n            max_value = a[i]\n    return max_index\n\n# 2. find the k closest to the left and right of the max\ndef find_k_closest(a, max_index, k):\n    left_index = max_index - 1\n    right_index = max_index + 1\n    left_count = 0\n    right_count = 0\n    while left_count < k and left_index >= 0:\n        left_count += 1\n        left_index -= 1\n    while right_count < k and right_index < len(a):\n        right_count += 1\n        right_index += 1\n    return left_index + 1, right_index - 1\n\n# 3. remove the max and the k closest left and right\ndef remove_max_and_k_closest(a, max_index, left_index, right_index):\n    a = a[:left_index] + a[right_index + 1:]\n    return a\n\n# 4. repeat\ndef repeat(a, k):\n    result = []\n    while len(a) > 0:\n        max_index = find_max(a)\n        left_index, right_index = find_k_closest(a, max_index, k)\n        a = remove_max_and_k_closest(a, max_index, left_index, right_index)\n        result += [left_index, right_index]\n    return result\n\n# 5. print the result\ndef print_result(result, n):\n    result_string = \"\"\n    for i in range(n):\n        if i in result:\n            result_string += \"1\"\n        else:\n            result_string += \"2\"\n    print(result_string)\n\nresult = repeat(a, k)\nprint_result(result, n)\n"
    },
    {
      "index": 2,
      "text": "\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# 1. find the max\n# 2. find the k closest to the left and right of the max\n# 3. remove the max and the k closest left and right\n# 4. repeat\n\ndef find_max(a):\n    max_index = 0\n    max_value = a[0]\n    for i in range(1, len(a)):\n        if a[i] > max_value:\n            max_index = i\n            max_value = a[i]\n    return max_index\n\ndef find_k_closest(a, max_index, k):\n    left_index = max_index - 1\n    right_index = max_index + 1\n    left_count = 0\n    right_count = 0\n    while left_count < k and left_index >= 0:\n        left_count += 1\n        left_index -= 1\n    while right_count < k and right_index < len(a):\n        right_count += 1\n        right_index += 1\n    return left_index + 1, right_index - 1\n\ndef remove_max_and_k_closest(a, max_index, left_index, right_index):\n    a = a[:left_index] + a[right_index+1:]\n    return a\n\ndef repeat(a, k):\n    result = []\n    while len(a) > 0:\n        max_index = find_max(a)\n        left_index, right_index = find_k_closest(a, max_index, k)\n        a = remove_max_and_k_closest(a, max_index, left_index, right_index)\n        result += [left_index, right_index]\n    return result\n\ndef print_result(result, n):\n    result_string = \"\"\n    for i in range(n):\n        if i in result:\n            result_string += \"1\"\n        else:\n            result_string += \"2\"\n    print(result_string)\n\nresult = repeat(a, k)\nprint_result(result, n)\n"
    },
    {
      "index": 3,
      "text": "\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# print(n, k)\n# print(a)\n\n# 1. find the max\n# 2. find the k closest to the left and right of the max\n# 3. remove the max and the k closest left and right\n# 4. repeat\n\n# 1. find the max\ndef find_max(a):\n    max_index = 0\n    max_value = a[0]\n    for i in range(1, len(a)):\n        if a[i] > max_value:\n            max_index = i\n            max_value = a[i]\n    return max_index\n\n# 2. find the k closest to the left and right of the max\ndef find_k_closest(a, max_index, k):\n    left_index = max_index - 1\n    right_index = max_index + 1\n    left_count = 0\n    right_count = 0\n    while left_count < k and left_index >= 0:\n        left_count += 1\n        left_index -= 1\n    while right_count < k and right_index < len(a):\n        right_count += 1\n        right_index += 1\n    return left_index + 1, right_index - 1\n\n# 3. remove the max and the k closest left and right\ndef remove_max_and_k_closest(a, max_index, left_index, right_index):\n    a = a[:left_index] + a[right_index + 1:]\n    return a\n\n# 4. repeat\ndef repeat(a, k):\n    result = []\n    while len(a) > 0:\n        max_index = find_max(a)\n        left_index, right_index = find_k_closest(a, max_index, k)\n        a = remove_max_and_k_closest(a, max_index, left_index, right_index)\n        result += [left_index, right_index]\n    return result\n\n# 5. print the result\ndef print_result(result, n):\n    result_string = \"\"\n    for i in range(n):\n        if i in result:\n            result_string += \"1\"\n        else:\n            result_string += \"2\"\n    print(result_string)\n\nresult = repeat(a, k)\nprint_result(result, n)\n"
    }
  ],
  "created": 1650428315,
  "object": "edit"
}
2022-04-20 04:18:38.873403 fix syntax errors 4 ['\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# print(n, k)\n# print(a)\n\n# 1. find the max\n# 2. find the k closest to the left and right of the max\n# 3. remove the max and the k closest left and right\n# 4. repeat\n\n# 1. find the max\ndef find_max(a):\n    max_index = 0\n    max_value = a[0]\n    for i in range(1, len(a)):\n        if a[i] > max_value:\n            max_index = i\n            max_value = a[i]\n    return max_index\n\n# 2. find the k closest to the left and right of the max\ndef find_k_closest(a, max_index, k):\n    left_index = max_index - 1\n    right_index = max_index + 1\n    left_count = 0\n    right_count = 0\n    while left_count < k and left_index >= 0:\n        left_count += 1\n        left_index -= 1\n    while right_count < k and right_index < len(a):\n        right_count += 1\n        right_index += 1\n    return left_index + 1, right_index - 1\n\n# 3. remove the max and the k closest left and right\ndef remove_max_and_k_closest(a, max_index, left_index, right_index):\n    a = a[:left_index] + a[right_index+1:]\n    return a\n\n# 4. repeat\ndef repeat(a, k):\n    result = []\n    while len(a) > 0:\n        max_index = find_max(a)\n        left_index, right_index = find_k_closest(a, max_index, k)\n        a = remove_max_and_k_closest(a, max_index, left_index, right_index)\n        result += [left_index, right_index]\n    return result\n\n# 5. print the result\ndef print_result(result, n):\n    result_string = ""\n    for i in range(n):\n        if i in result:\n            result_string += "1"\n        else:\n            result_string += "2"\n    print(result_string)\n\ndef main():\n    result = repeat(a, k)\n    print_result(result, n)\n\nif __name__ == "__main__":\n    main()\n', '\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# print(n, k)\n# print(a)\n\n# 1. find the max\n# 2. find the k closest to the left and right of the max\n# 3. remove the max and the k closest left and right\n# 4. repeat\n\n# 1. find the max\ndef find_max(a):\n    max_index = 0\n    max_value = a[0]\n    for i in range(1, len(a)):\n        if a[i] > max_value:\n            max_index = i\n            max_value = a[i]\n    return max_index\n\n# 2. find the k closest to the left and right of the max\ndef find_k_closest(a, max_index, k):\n    left_index = max_index - 1\n    right_index = max_index + 1\n    left_count = 0\n    right_count = 0\n    while left_count < k and left_index >= 0:\n        left_count += 1\n        left_index -= 1\n    while right_count < k and right_index < len(a):\n        right_count += 1\n        right_index += 1\n    return left_index + 1, right_index - 1\n\n# 3. remove the max and the k closest left and right\ndef remove_max_and_k_closest(a, max_index, left_index, right_index):\n    a = a[:left_index] + a[right_index + 1:]\n    return a\n\n# 4. repeat\ndef repeat(a, k):\n    result = []\n    while len(a) > 0:\n        max_index = find_max(a)\n        left_index, right_index = find_k_closest(a, max_index, k)\n        a = remove_max_and_k_closest(a, max_index, left_index, right_index)\n        result += [left_index, right_index]\n    return result\n\n# 5. print the result\ndef print_result(result, n):\n    result_string = ""\n    for i in range(n):\n        if i in result:\n            result_string += "1"\n        else:\n            result_string += "2"\n    print(result_string)\n\nresult = repeat(a, k)\nprint_result(result, n)\n', '\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# 1. find the max\n# 2. find the k closest to the left and right of the max\n# 3. remove the max and the k closest left and right\n# 4. repeat\n\ndef find_max(a):\n    max_index = 0\n    max_value = a[0]\n    for i in range(1, len(a)):\n        if a[i] > max_value:\n            max_index = i\n            max_value = a[i]\n    return max_index\n\ndef find_k_closest(a, max_index, k):\n    left_index = max_index - 1\n    right_index = max_index + 1\n    left_count = 0\n    right_count = 0\n    while left_count < k and left_index >= 0:\n        left_count += 1\n        left_index -= 1\n    while right_count < k and right_index < len(a):\n        right_count += 1\n        right_index += 1\n    return left_index + 1, right_index - 1\n\ndef remove_max_and_k_closest(a, max_index, left_index, right_index):\n    a = a[:left_index] + a[right_index+1:]\n    return a\n\ndef repeat(a, k):\n    result = []\n    while len(a) > 0:\n        max_index = find_max(a)\n        left_index, right_index = find_k_closest(a, max_index, k)\n        a = remove_max_and_k_closest(a, max_index, left_index, right_index)\n        result += [left_index, right_index]\n    return result\n\ndef print_result(result, n):\n    result_string = ""\n    for i in range(n):\n        if i in result:\n            result_string += "1"\n        else:\n            result_string += "2"\n    print(result_string)\n\nresult = repeat(a, k)\nprint_result(result, n)\n', '\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\n# print(n, k)\n# print(a)\n\n# 1. find the max\n# 2. find the k closest to the left and right of the max\n# 3. remove the max and the k closest left and right\n# 4. repeat\n\n# 1. find the max\ndef find_max(a):\n    max_index = 0\n    max_value = a[0]\n    for i in range(1, len(a)):\n        if a[i] > max_value:\n            max_index = i\n            max_value = a[i]\n    return max_index\n\n# 2. find the k closest to the left and right of the max\ndef find_k_closest(a, max_index, k):\n    left_index = max_index - 1\n    right_index = max_index + 1\n    left_count = 0\n    right_count = 0\n    while left_count < k and left_index >= 0:\n        left_count += 1\n        left_index -= 1\n    while right_count < k and right_index < len(a):\n        right_count += 1\n        right_index += 1\n    return left_index + 1, right_index - 1\n\n# 3. remove the max and the k closest left and right\ndef remove_max_and_k_closest(a, max_index, left_index, right_index):\n    a = a[:left_index] + a[right_index + 1:]\n    return a\n\n# 4. repeat\ndef repeat(a, k):\n    result = []\n    while len(a) > 0:\n        max_index = find_max(a)\n        left_index, right_index = find_k_closest(a, max_index, k)\n        a = remove_max_and_k_closest(a, max_index, left_index, right_index)\n        result += [left_index, right_index]\n    return result\n\n# 5. print the result\ndef print_result(result, n):\n    result_string = ""\n    for i in range(n):\n        if i in result:\n            result_string += "1"\n        else:\n            result_string += "2"\n    print(result_string)\n\nresult = repeat(a, k)\nprint_result(result, n)\n']
2022-04-20 04:18:38.873632 size on output set 3
