["import math\n\n\ndef main():\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    if a[-1] - a[0] > k:\n        print('NO')\n    else:\n        print('YES')\n        for i in range(n):\n            print(a[i], end=' ')\n            for j in range(1, math.ceil((n - i - 1) / 2)):\n                print(a[i] + k, end=' ')\n            for j in range(math.ceil((n - i - 1) / 2), n - i - 1):\n                print(a[i], end=' ')\n            print()\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport heapq\n\ndef main():\n    n = int(input())\n    ingredients = [int(x) for x in input().split()]\n    heapq.heapify(ingredients)\n    while len(ingredients) > 1:\n        heapq.heappush(ingredients, (heapq.heappop(ingredients) + heapq.heappop(ingredients)) // 2)\n    print(ingredients[0])\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n", "import heapq\n\ndef main():\n    n = int(input())\n    ingredients = [int(x) for x in input().split()]\n    heapq.heapify(ingredients)\n    while len(ingredients) > 1:\n        heapq.heappush(ingredients, (heapq.heappop(ingredients) + heapq.heappop(ingredients)) / 2.0)\n    print(ingredients[0])\n\nif __name__ == '__main__':\n    main()\n", "\nimport heapq\n\ndef main():\n    n = int(input())\n    ingredients = [int(x) for x in input().split()]  # list of ingredients\n    heapq.heapify(ingredients)  # heapify the ingredients\n    while len(ingredients) > 1:  # while there are more than 1 ingredients left\n        heapq.heappush(ingredients, (heapq.heappop(ingredients) + heapq.heappop(ingredients)) / 2)  # add the average of the two smallest ingredients to the heap\n    print(ingredients[0])  # print the last ingredient\n\nif __name__ == '__main__':\n    main()\n", "\nimport heapq\n\ndef main():\n    n = int(input())\n    ingredients = [float(x) for x in input().split()]\n    heapq.heapify(ingredients)\n    while len(ingredients) > 1:\n        heapq.heappush(ingredients, (heapq.heappop(ingredients) + heapq.heappop(ingredients)) / 2)\n    print(ingredients[0])\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n = int(input())\n    v = list(map(int, input().split()))\n    v.sort()\n    while len(v) > 1:\n        a = v.pop()\n        b = v.pop()\n        v.append((a + b) / 2)\n        v.sort()\n    print(v[0])\n\n\nif __name__ == '__main__':\n    main()\n"]