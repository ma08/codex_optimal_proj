2022-04-20 04:38:54.128104 num operations 1
2022-04-20 04:38:54.128125 size on input set 1
2022-04-20 04:38:54.128288 using api key derek
2022-04-20 04:38:54.241457 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 04:38:55.743342 using api key sunu
2022-04-20 04:38:59.118211 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    edges = []\n    for _ in range(m):\n        x, y, w = map(int, input().split())\n        edges.append((w, x, y))\n\n    edges.sort()\n\n    parent = list(range(n))\n    size = [1] * n\n\n    def find(x):\n        if parent[x] != x:\n            parent[x] = find(parent[x])\n        return parent[x]\n\n    def union(x, y):\n        x = find(x)\n        y = find(y)\n        if x != y:\n            if size[x] < size[y]:\n                x, y = y, x\n            parent[y] = x\n            size[x] += size[y]\n\n    res = 0\n    for w, x, y in edges:\n        if find(x) != find(y):\n            union(x, y)\n            res += w\n    for i in range(n):\n        if find(i) != find(0):\n            res += a[i]\n            union(i, 0)\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    edges = []\n    for _ in range(m):\n        x, y, w = map(int, input().split())\n        edges.append((w, x, y))\n\n    edges.sort()\n\n    parent = list(range(n))\n    size = [1] * n\n\n    def find(x):\n        if parent[x] != x:\n            parent[x] = find(parent[x])\n        return parent[x]\n\n    def union(x, y):\n        x = find(x)\n        y = find(y)\n        if x != y:\n            if size[x] < size[y]:\n                x, y = y, x\n            parent[y] = x\n            size[x] += size[y]\n\n    res = 0\n    for w, x, y in edges:\n        if find(x) != find(y):\n            union(x, y)\n            res += w\n\n    for i, ai in enumerate(a):\n        if find(i) != find(0) and ai < 0:\n            res += ai\n            union(i, 0)\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    edges = []\n    for _ in range(m):\n        x, y, w = map(int, input().split())\n        edges.append((w, x, y))\n\n    edges.sort()\n\n    parent = list(range(n))\n    size = [1] * n\n\n    def find(x):\n        if parent[x] != x:\n            parent[x] = find(parent[x])\n        return parent[x]\n\n    def union(x, y):\n        x = find(x)\n        y = find(y)\n        if x != y:\n            if size[x] < size[y]:\n                x, y = y, x\n            parent[y] = x\n            size[x] += size[y]\n\n    res = 0\n    for w, x, y in edges:\n        if find(x) != find(y):\n            union(x, y)\n            res += w\n    for i in range(n):\n        if find(i) != find(0):\n            res += a[i]\n            union(i, 0)\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    edges = []\n    for _ in range(m):\n        x, y, w = map(int, input().split())\n        edges.append((w, x, y))\n\n    edges.sort()\n\n    parent = list(range(n))\n    size = [1] * n\n\n    def find(x):\n        if parent[x] != x:\n            parent[x] = find(parent[x])\n        return parent[x]\n\n    def union(x, y):\n        x = find(x)\n        y = find(y)\n        if x != y:\n            if size[x] < size[y]:\n                x, y = y, x\n            parent[y] = x\n            size[x] += size[y]\n\n    res = 0\n    for w, x, y in edges:\n        if find(x) != find(y):\n            union(x, y)\n            res += w\n    for i in range(1, n):\n        if find(i) != find(0) and a[i] < 0:\n            res += -a[i]\n            union(0, i)\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650429535,
  "object": "edit"
}
2022-04-20 04:38:59.118513 fix syntax errors 4 ["\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    edges = []\n    for _ in range(m):\n        x, y, w = map(int, input().split())\n        edges.append((w, x, y))\n\n    edges.sort()\n\n    parent = list(range(n))\n    size = [1] * n\n\n    def find(x):\n        if parent[x] != x:\n            parent[x] = find(parent[x])\n        return parent[x]\n\n    def union(x, y):\n        x = find(x)\n        y = find(y)\n        if x != y:\n            if size[x] < size[y]:\n                x, y = y, x\n            parent[y] = x\n            size[x] += size[y]\n\n    res = 0\n    for w, x, y in edges:\n        if find(x) != find(y):\n            union(x, y)\n            res += w\n    for i in range(n):\n        if find(i) != find(0):\n            res += a[i]\n            union(i, 0)\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    edges = []\n    for _ in range(m):\n        x, y, w = map(int, input().split())\n        edges.append((w, x, y))\n\n    edges.sort()\n\n    parent = list(range(n))\n    size = [1] * n\n\n    def find(x):\n        if parent[x] != x:\n            parent[x] = find(parent[x])\n        return parent[x]\n\n    def union(x, y):\n        x = find(x)\n        y = find(y)\n        if x != y:\n            if size[x] < size[y]:\n                x, y = y, x\n            parent[y] = x\n            size[x] += size[y]\n\n    res = 0\n    for w, x, y in edges:\n        if find(x) != find(y):\n            union(x, y)\n            res += w\n\n    for i, ai in enumerate(a):\n        if find(i) != find(0) and ai < 0:\n            res += ai\n            union(i, 0)\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    edges = []\n    for _ in range(m):\n        x, y, w = map(int, input().split())\n        edges.append((w, x, y))\n\n    edges.sort()\n\n    parent = list(range(n))\n    size = [1] * n\n\n    def find(x):\n        if parent[x] != x:\n            parent[x] = find(parent[x])\n        return parent[x]\n\n    def union(x, y):\n        x = find(x)\n        y = find(y)\n        if x != y:\n            if size[x] < size[y]:\n                x, y = y, x\n            parent[y] = x\n            size[x] += size[y]\n\n    res = 0\n    for w, x, y in edges:\n        if find(x) != find(y):\n            union(x, y)\n            res += w\n    for i in range(n):\n        if find(i) != find(0):\n            res += a[i]\n            union(i, 0)\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n\n    edges = []\n    for _ in range(m):\n        x, y, w = map(int, input().split())\n        edges.append((w, x, y))\n\n    edges.sort()\n\n    parent = list(range(n))\n    size = [1] * n\n\n    def find(x):\n        if parent[x] != x:\n            parent[x] = find(parent[x])\n        return parent[x]\n\n    def union(x, y):\n        x = find(x)\n        y = find(y)\n        if x != y:\n            if size[x] < size[y]:\n                x, y = y, x\n            parent[y] = x\n            size[x] += size[y]\n\n    res = 0\n    for w, x, y in edges:\n        if find(x) != find(y):\n            union(x, y)\n            res += w\n    for i in range(1, n):\n        if find(i) != find(0) and a[i] < 0:\n            res += -a[i]\n            union(0, i)\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 04:38:59.118575 size on output set 3
2022-04-20 04:38:59.118587 num operations 1
2022-04-20 04:38:59.118593 size on input set 1
2022-04-20 04:38:59.118743 using api key soukgp
2022-04-20 04:39:05.488742 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    offers = []\n    for _ in range(m):\n        offers.append(list(map(int, input().split())))\n\n    # find the minimum cost of connecting 1 to any other node\n    min_cost = a[0]\n    for offer in offers:\n        if offer[0] == 1:\n            if offer[2] < a[offer[1] - 1]:\n                min_cost += offer[2]\n            else:\n                min_cost += a[offer[1] - 1]\n\n    # find the minimum cost of connecting any other node to 1\n    for i in range(2, n + 1):\n        min_cost_i = a[i - 1]  # cost of connecting i to 1\n        for offer in offers:\n            if offer[1] == i:\n        # print(min_cost_i)\n                if offer[2] < a[offer[0] - 1]:\n                    min_cost_i += offer[2]\n                else:\n                    min_cost_i += a[offer[0] - 1]\n        if min_cost_i < min_cost:\n            min_cost = min_cost_i\n\n    print(min_cost)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    offers = []\n    for _ in range(m):\n        offers.append(list(map(int, input().split())))\n\n    # find the minimum cost of connecting 1 to any other node\n    min_cost = a[0]\n    for offer in offers:\n        if offer[0] == 1:\n            if offer[2] < a[offer[1] - 1]:\n                min_cost += offer[2]\n            else:\n                min_cost += a[offer[1] - 1]\n\n    # find the minimum cost of connecting any other node to 1\n    for i in range(2, n + 1):\n        min_cost_i = a[i - 1]  # cost of connecting i to 1\n        for offer in offers:\n            if offer[1] == i:  # if offer connects i to another node\n                if offer[2] < a[offer[0] - 1]:\n                    min_cost_i += offer[2]  # if offer is cheaper than the cost of connecting the other node to 1\n                else:\n                    min_cost_i += a[offer[0] - 1]  # if offer is more expensive than the cost of connecting the other node to 1\n        if min_cost_i < min_cost:\n            min_cost = min_cost_i\n\n    print(min_cost)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    offers = []\n    for _ in range(m):\n        offers.append(list(map(int, input().split())))\n\n    # find the minimum cost of connecting 1 to any other node\n    min_cost = a[0]\n    for offer in offers:\n        if offer[0] == 1:\n            if offer[2] < a[offer[1] - 1]:\n                min_cost += offer[2]\n            else:\n                min_cost += a[offer[1] - 1]\n\n    # find the minimum cost of connecting any other node to 1\n    for i in range(2, n + 1):\n        min_cost_i = a[i-1]\n        for offer in offers:\n            if offer[1] == i:\n                if offer[2] < a[offer[0]-1]:\n                    min_cost_i += offer[2]\n                else:\n                    min_cost_i += a[offer[0]-1]\n        if min_cost_i < min_cost:\n            min_cost = min_cost_i\n\n    print(min_cost)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    offers = []\n    for _ in range(m):\n        offers.append(list(map(int, input().split())))\n\n    # find the minimum cost of connecting 1 to any other node\n    min_cost = a[0]\n    for offer in offers:\n        if offer[0] == 1:\n            if offer[2] < a[offer[1] - 1]:\n                min_cost += offer[2]\n            else:\n                min_cost += a[offer[1] - 1]\n\n    # find the minimum cost of connecting any other node to 1\n    for i in range(2, n):\n        min_cost_i = a[i - 1]\n        for offer in offers:\n            if offer[1] == i:\n                if offer[2] < a[offer[0] - 1]:\n                    min_cost_i += offer[2]\n                else:\n                    min_cost_i += a[offer[0] - 1]\n        min_cost = min(min_cost, min_cost_i)\n\n    print(min_cost)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650429539,
  "object": "edit"
}
2022-04-20 04:39:05.489084 fix syntax errors 4 ["\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    offers = []\n    for _ in range(m):\n        offers.append(list(map(int, input().split())))\n\n    # find the minimum cost of connecting 1 to any other node\n    min_cost = a[0]\n    for offer in offers:\n        if offer[0] == 1:\n            if offer[2] < a[offer[1] - 1]:\n                min_cost += offer[2]\n            else:\n                min_cost += a[offer[1] - 1]\n\n    # find the minimum cost of connecting any other node to 1\n    for i in range(2, n + 1):\n        min_cost_i = a[i - 1]  # cost of connecting i to 1\n        for offer in offers:\n            if offer[1] == i:\n        # print(min_cost_i)\n                if offer[2] < a[offer[0] - 1]:\n                    min_cost_i += offer[2]\n                else:\n                    min_cost_i += a[offer[0] - 1]\n        if min_cost_i < min_cost:\n            min_cost = min_cost_i\n\n    print(min_cost)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    offers = []\n    for _ in range(m):\n        offers.append(list(map(int, input().split())))\n\n    # find the minimum cost of connecting 1 to any other node\n    min_cost = a[0]\n    for offer in offers:\n        if offer[0] == 1:\n            if offer[2] < a[offer[1] - 1]:\n                min_cost += offer[2]\n            else:\n                min_cost += a[offer[1] - 1]\n\n    # find the minimum cost of connecting any other node to 1\n    for i in range(2, n + 1):\n        min_cost_i = a[i - 1]  # cost of connecting i to 1\n        for offer in offers:\n            if offer[1] == i:  # if offer connects i to another node\n                if offer[2] < a[offer[0] - 1]:\n                    min_cost_i += offer[2]  # if offer is cheaper than the cost of connecting the other node to 1\n                else:\n                    min_cost_i += a[offer[0] - 1]  # if offer is more expensive than the cost of connecting the other node to 1\n        if min_cost_i < min_cost:\n            min_cost = min_cost_i\n\n    print(min_cost)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    offers = []\n    for _ in range(m):\n        offers.append(list(map(int, input().split())))\n\n    # find the minimum cost of connecting 1 to any other node\n    min_cost = a[0]\n    for offer in offers:\n        if offer[0] == 1:\n            if offer[2] < a[offer[1] - 1]:\n                min_cost += offer[2]\n            else:\n                min_cost += a[offer[1] - 1]\n\n    # find the minimum cost of connecting any other node to 1\n    for i in range(2, n + 1):\n        min_cost_i = a[i-1]\n        for offer in offers:\n            if offer[1] == i:\n                if offer[2] < a[offer[0]-1]:\n                    min_cost_i += offer[2]\n                else:\n                    min_cost_i += a[offer[0]-1]\n        if min_cost_i < min_cost:\n            min_cost = min_cost_i\n\n    print(min_cost)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    offers = []\n    for _ in range(m):\n        offers.append(list(map(int, input().split())))\n\n    # find the minimum cost of connecting 1 to any other node\n    min_cost = a[0]\n    for offer in offers:\n        if offer[0] == 1:\n            if offer[2] < a[offer[1] - 1]:\n                min_cost += offer[2]\n            else:\n                min_cost += a[offer[1] - 1]\n\n    # find the minimum cost of connecting any other node to 1\n    for i in range(2, n):\n        min_cost_i = a[i - 1]\n        for offer in offers:\n            if offer[1] == i:\n                if offer[2] < a[offer[0] - 1]:\n                    min_cost_i += offer[2]\n                else:\n                    min_cost_i += a[offer[0] - 1]\n        min_cost = min(min_cost, min_cost_i)\n\n    print(min_cost)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 04:39:05.489144 size on output set 4
