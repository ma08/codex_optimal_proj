2022-04-20 04:17:37.920056 num operations 1
2022-04-20 04:17:37.920078 size on input set 1
2022-04-20 04:17:37.920301 using api key kouti
2022-04-20 04:17:39.559990 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\nv = list(map(int, input().split()))\n\n# \u540c\u3058\u6570\u5b57\u304c\u9023\u7d9a\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u305d\u308c\u3092\u6d88\u3059\n# \u9023\u7d9a\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001\u7570\u306a\u308b\u6570\u5b57\u304c2\u3064\u3057\u304b\u306a\u3044\u306e\u3067\u3001\u3069\u3061\u3089\u304b\u3092\u6d88\u3059\n# \u305f\u3060\u3057\u3001\u540c\u3058\u6570\u5b57\u304c\u9023\u7d9a\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u305d\u308c\u3092\u6d88\u3059\u306e\u304c\u6700\u9069\n# \u305d\u306e\u305f\u3081\u3001\u540c\u3058\u6570\u5b57\u304c\u9023\u7d9a\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u305d\u308c\u3092\u6d88\u3059\n# \u9023\u7d9a\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001\u7570\u306a\u308b\u6570\u5b57\u304c2\u3064\u3057\u304b\u306a\u3044\u306e\u3067\u3001\u3069\u3061\u3089\u304b\u3092\u6d88\u3059\n\ncount = 0\nfor i in range(n-1):\n    if v[i] == v[i+1]:\n        count += 1\n\nif count == 0:\n    print(2)\nelse:\n    print(1)\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\nv = list(map(int, input().split()))\n\n# \u540c\u3058\u6570\u5b57\u304c\u9023\u7d9a\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u305d\u308c\u3092\u6d88\u3059\n# \u9023\u7d9a\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001\u7570\u306a\u308b\u6570\u5b57\u304c2\u3064\u3057\u304b\u306a\u3044\u306e\u3067\u3001\u3069\u3061\u3089\u304b\u3092\u6d88\u3059\n# \u305f\u3060\u3057\u3001\u540c\u3058\u6570\u5b57\u304c\u9023\u7d9a\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u305d\u308c\u3092\u6d88\u3059\u306e\u304c\u6700\u9069\n# \u305d\u306e\u305f\u3081\u3001\u540c\u3058\u6570\u5b57\u304c\u9023\u7d9a\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u305d\u308c\u3092\u6d88\u3059\n# \u9023\u7d9a\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001\u7570\u306a\u308b\u6570\u5b57\u304c2\u3064\u3057\u304b\u306a\u3044\u306e\u3067\u3001\u3069\u3061\u3089\u304b\u3092\u6d88\u3059\n\ncount = 0\nfor i in range(n-1):\n    if v[i] == v[i+1]:\n        count += 1\n\nif count == 0:\n    print(2)\nelse:\n    print(1)\n"
    },
    {
      "index": 2,
      "text": "\nn = int(input())\nv = list(map(int, input().split()))\n\n# \u540c\u3058\u6570\u5b57\u304c\u9023\u7d9a\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u305d\u308c\u3092\u6d88\u3059\n# \u9023\u7d9a\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001\u7570\u306a\u308b\u6570\u5b57\u304c2\u3064\u3057\u304b\u306a\u3044\u306e\u3067\u3001\u3069\u3061\u3089\u304b\u3092\u6d88\u3059\n# \u305f\u3060\u3057\u3001\u540c\u3058\u6570\u5b57\u304c\u9023\u7d9a\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u305d\u308c\u3092\u6d88\u3059\u306e\u304c\u6700\u9069\n# \u305d\u306e\u305f\u3081\u3001\u540c\u3058\u6570\u5b57\u304c\u9023\u7d9a\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u305d\u308c\u3092\u6d88\u3059\n# \u9023\u7d9a\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001\u7570\u306a\u308b\u6570\u5b57\u304c2\u3064\u3057\u304b\u306a\u3044\u306e\u3067\u3001\u3069\u3061\u3089\u304b\u3092\u6d88\u3059\n\ncount = 0\nfor i in range(n-1):\n    if v[i] == v[i+1]:\n        count += 1\n\nif count == 0:\n    print(2)\nelse:\n    print(1)\n"
    },
    {
      "index": 3,
      "text": "\nn = int(input())\nv = list(map(int, input().split()))\n\n# \u540c\u3058\u6570\u5b57\u304c\u9023\u7d9a\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u305d\u308c\u3092\u6d88\u3059\n# \u9023\u7d9a\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001\u7570\u306a\u308b\u6570\u5b57\u304c2\u3064\u3057\u304b\u306a\u3044\u306e\u3067\u3001\u3069\u3061\u3089\u304b\u3092\u6d88\u3059\n# \u305f\u3060\u3057\u3001\u540c\u3058\u6570\u5b57\u304c\u9023\u7d9a\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u305d\u308c\u3092\u6d88\u3059\u306e\u304c\u6700\u9069\n# \u305d\u306e\u305f\u3081\u3001\u540c\u3058\u6570\u5b57\u304c\u9023\u7d9a\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u305d\u308c\u3092\u6d88\u3059\n# \u9023\u7d9a\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001\u7570\u306a\u308b\u6570\u5b57\u304c2\u3064\u3057\u304b\u306a\u3044\u306e\u3067\u3001\u3069\u3061\u3089\u304b\u3092\u6d88\u3059\n\ncount = 0\nfor i in range(n-1):\n    if v[i] == v[i+1]:\n        count += 1\n\nif count == 0:\n    print(2)\nelse:\n    print(1)\n"
    }
  ],
  "created": 1650428258,
  "object": "edit"
}
2022-04-20 04:17:39.560327 fix syntax errors 4 ['\nn = int(input())\nv = list(map(int, input().split()))\n\n# 同じ数字が連続している場合はそれを消す\n# 連続していない場合は、異なる数字が2つしかないので、どちらかを消す\n# ただし、同じ数字が連続している場合は、それを消すのが最適\n# そのため、同じ数字が連続している場合は、それを消す\n# 連続していない場合は、異なる数字が2つしかないので、どちらかを消す\n\ncount = 0\nfor i in range(n-1):\n    if v[i] == v[i+1]:\n        count += 1\n\nif count == 0:\n    print(2)\nelse:\n    print(1)\n', '\nn = int(input())\nv = list(map(int, input().split()))\n\n# 同じ数字が連続している場合はそれを消す\n# 連続していない場合は、異なる数字が2つしかないので、どちらかを消す\n# ただし、同じ数字が連続している場合は、それを消すのが最適\n# そのため、同じ数字が連続している場合は、それを消す\n# 連続していない場合は、異なる数字が2つしかないので、どちらかを消す\n\ncount = 0\nfor i in range(n-1):\n    if v[i] == v[i+1]:\n        count += 1\n\nif count == 0:\n    print(2)\nelse:\n    print(1)\n', '\nn = int(input())\nv = list(map(int, input().split()))\n\n# 同じ数字が連続している場合はそれを消す\n# 連続していない場合は、異なる数字が2つしかないので、どちらかを消す\n# ただし、同じ数字が連続している場合は、それを消すのが最適\n# そのため、同じ数字が連続している場合は、それを消す\n# 連続していない場合は、異なる数字が2つしかないので、どちらかを消す\n\ncount = 0\nfor i in range(n-1):\n    if v[i] == v[i+1]:\n        count += 1\n\nif count == 0:\n    print(2)\nelse:\n    print(1)\n', '\nn = int(input())\nv = list(map(int, input().split()))\n\n# 同じ数字が連続している場合はそれを消す\n# 連続していない場合は、異なる数字が2つしかないので、どちらかを消す\n# ただし、同じ数字が連続している場合は、それを消すのが最適\n# そのため、同じ数字が連続している場合は、それを消す\n# 連続していない場合は、異なる数字が2つしかないので、どちらかを消す\n\ncount = 0\nfor i in range(n-1):\n    if v[i] == v[i+1]:\n        count += 1\n\nif count == 0:\n    print(2)\nelse:\n    print(1)\n']
2022-04-20 04:17:39.560419 size on output set 1
2022-04-20 04:17:39.560435 num operations 1
2022-04-20 04:17:39.560445 size on input set 1
2022-04-20 04:17:39.560677 using api key kouti
2022-04-20 04:17:51.126977 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport math\nimport sys\n\n# read input\nn = int(input())\nv = list(map(int, input().split()))\n\n# count the number of each value\ncounts = {}\nfor i in range(n):\n    if v[i] in counts:\n        counts[v[i]] += 1\n    else:\n        counts[v[i]] = 1\n\n# if there are more than two different values, then the answer is -1\nif len(counts) > 2:\n    print(-1)\n    exit()\n\n# if there are only two different values, then the answer is the number of elements of the smaller value\nif len(counts) == 2:\n    print(math.min(counts[list(counts.keys())[0]], counts[list(counts.keys())[1]]))\n    exit()\n\n# if there is only one value, then the answer is the number of elements of that value minus two\nprint(counts[list(counts.keys())[0]] - 2)\n"
    },
    {
      "index": 1,
      "text": "import math\nimport sys\n\ndef main():\n    # read input\n    n = int(input())\n    v = list(map(int, input().split()))\n\n# count the number of each value\ncounts = {}\nfor i in range(n):\n    if v[i] in counts:\n        counts[v[i]] += 1\n    else:\n        counts[v[i]] = 1\n\n# if there are more than two different values, then the answer is -1\nif len(counts) > 2:\n    print(-1)\n    sys.exit()\n\n# if there are only two different values, then the answer is the number of elements of the smaller value\nif len(counts) == 2:\n    print(math.min(counts[list(counts.keys())[0]], counts[list(counts.keys())[1]]))\n    sys.exit()\n\n# if there is only one value, then the answer is the number of elements of that value minus two\nprint(counts[list(counts.keys())[0]] - 2)\n"
    },
    {
      "index": 2,
      "text": "\nimport math\nimport sys\n\n# read input\nn = int(input())\nv = list(map(int, input().split()))\n\n# count the number of each value\ncounts = {}\nfor i in range(n):\n    if v[i] in counts:\n        counts[v[i]] += 1\n    else:\n        counts[v[i]] = 1\n\n# if there are more than two different values, then the answer is -1\nif len(counts) > 2:\n    print(-1)\n    sys.exit()\n\n# if there are only two different values, then the answer is the number of elements of the smaller value\nif len(counts) == 2:\n    print(math.min(counts[list(counts.keys())[0]], counts[list(counts.keys())[1]]))\n    sys.exit()\n\n# if there is only one value, then the answer is the number of elements of that value minus two\nprint(counts[list(counts.keys())[0]] - 2)\n"
    },
    {
      "index": 3,
      "text": "\nimport math\nimport sys\n\n# read input\nn = int(input())\nv = list(map(int, input().split()))\n\n# count the number of each value\ncounts = {}\nfor i in range(n):\n    if v[i] in counts:\n        counts[v[i]] += 1\n    else:\n        counts[v[i]] = 1\n\n# if there are more than two different values, then the answer is -1\nif len(counts) > 2:\n    print(-1)\n    sys.exit()\n\n# if there are only two different values, then the answer is the number of elements of the smaller value\nif len(counts) == 2:\n    print(min(counts[list(counts.keys())[0]], counts[list(counts.keys())[1]]))\n    sys.exit()\n\n# if there is only one value, then the answer is the number of elements of that value minus two\nprint(counts[list(counts.keys())[0]] - 2)\n"
    }
  ],
  "created": 1650428259,
  "object": "edit"
}
2022-04-20 04:17:51.127389 fix syntax errors 4 ['\nimport math\nimport sys\n\n# read input\nn = int(input())\nv = list(map(int, input().split()))\n\n# count the number of each value\ncounts = {}\nfor i in range(n):\n    if v[i] in counts:\n        counts[v[i]] += 1\n    else:\n        counts[v[i]] = 1\n\n# if there are more than two different values, then the answer is -1\nif len(counts) > 2:\n    print(-1)\n    exit()\n\n# if there are only two different values, then the answer is the number of elements of the smaller value\nif len(counts) == 2:\n    print(math.min(counts[list(counts.keys())[0]], counts[list(counts.keys())[1]]))\n    exit()\n\n# if there is only one value, then the answer is the number of elements of that value minus two\nprint(counts[list(counts.keys())[0]] - 2)\n', 'import math\nimport sys\n\ndef main():\n    # read input\n    n = int(input())\n    v = list(map(int, input().split()))\n\n# count the number of each value\ncounts = {}\nfor i in range(n):\n    if v[i] in counts:\n        counts[v[i]] += 1\n    else:\n        counts[v[i]] = 1\n\n# if there are more than two different values, then the answer is -1\nif len(counts) > 2:\n    print(-1)\n    sys.exit()\n\n# if there are only two different values, then the answer is the number of elements of the smaller value\nif len(counts) == 2:\n    print(math.min(counts[list(counts.keys())[0]], counts[list(counts.keys())[1]]))\n    sys.exit()\n\n# if there is only one value, then the answer is the number of elements of that value minus two\nprint(counts[list(counts.keys())[0]] - 2)\n', '\nimport math\nimport sys\n\n# read input\nn = int(input())\nv = list(map(int, input().split()))\n\n# count the number of each value\ncounts = {}\nfor i in range(n):\n    if v[i] in counts:\n        counts[v[i]] += 1\n    else:\n        counts[v[i]] = 1\n\n# if there are more than two different values, then the answer is -1\nif len(counts) > 2:\n    print(-1)\n    sys.exit()\n\n# if there are only two different values, then the answer is the number of elements of the smaller value\nif len(counts) == 2:\n    print(math.min(counts[list(counts.keys())[0]], counts[list(counts.keys())[1]]))\n    sys.exit()\n\n# if there is only one value, then the answer is the number of elements of that value minus two\nprint(counts[list(counts.keys())[0]] - 2)\n', '\nimport math\nimport sys\n\n# read input\nn = int(input())\nv = list(map(int, input().split()))\n\n# count the number of each value\ncounts = {}\nfor i in range(n):\n    if v[i] in counts:\n        counts[v[i]] += 1\n    else:\n        counts[v[i]] = 1\n\n# if there are more than two different values, then the answer is -1\nif len(counts) > 2:\n    print(-1)\n    sys.exit()\n\n# if there are only two different values, then the answer is the number of elements of the smaller value\nif len(counts) == 2:\n    print(min(counts[list(counts.keys())[0]], counts[list(counts.keys())[1]]))\n    sys.exit()\n\n# if there is only one value, then the answer is the number of elements of that value minus two\nprint(counts[list(counts.keys())[0]] - 2)\n']
2022-04-20 04:17:51.127469 size on output set 4
