2022-04-18 20:33:37.577290 """
We will play a one-player game using a number line and N pieces.
First, we place each of these pieces at some integer coordinate.
Here, multiple pieces can be placed at the same coordinate.
Our objective is to visit all of the M coordinates X_1, X_2, ..., X_M with these pieces, by repeating the following move:
Move: Choose a piece and let x be its coordinate. Put that piece at coordinate x+1 or x-1.
Note that the coordinates where we initially place the pieces are already regarded as visited.
Find the minimum number of moves required to achieve the objective.

-----Constraints-----
 - All values in input are integers.
 - 1 \leq N \leq 10^5
 - 1 \leq M \leq 10^5
 - -10^5 \leq X_i \leq 10^5
 - X_1, X_2, ..., X_M are all different.

-----Input-----
Input is given from Standard Input in the following format:
N M
X_1 X_2 ... X_M

-----Output-----
Find the minimum number of moves required to achieve the objective.

-----Sample Input-----
2 5
10 12 1 2 14

-----Sample Output-----
5

The objective can be achieved in five moves as follows, and this is the minimum number of moves required.
 - Initially, put the two pieces at coordinates 1 and 10.
 - Move the piece at coordinate 1 to 2.
 - Move the piece at coordinate 10 to 11.
 - Move the piece at coordinate 11 to 12.
 - Move the piece at coordinate 12 to 13.
 - Move the piece at coordinate 13 to 14.
"""
2022-04-18 20:33:37.577327 --------------------------
2022-04-18 20:33:57.140007 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    # read input\n    n, m = map(int, input().split())\n    x = list(map(int, input().split()))\n\n    # sort the coordinates\n    x.sort()\n\n    # find the minimum number of moves required to achieve the objective\n    ans = 0\n    for i in range(m):\n        ans += abs(x[i] - x[i-1])\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n# input\nn, m = map(int, input().split())\nx = list(map(int, input().split()))\n\n# sort\nx.sort()\n\n# get the median\nmedian = x[m // 2]\n\n# calculate the distance\nans = 0\nfor i in range(m):\n    ans += abs(x[i] - median)\n\nprint(ans)"
    }
  ],
  "created": 1650314017,
  "id": "cmpl-4ySLxQwvbRpABXLGUhEm1nbacwJdg",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-18 20:33:57.140296 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    # read input\n    n, m = map(int, input().split())\n    x = list(map(int, input().split()))\n\n    # sort the coordinates\n    x.sort()\n\n    # find the minimum number of moves required to achieve the objective\n    ans = 0\n    for i in range(m):\n        ans += abs(x[i] - x[i-1])\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-18 20:33:57.140338 REASON stop
2022-04-18 20:33:57.410020 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n# input\nn, m = map(int, input().split())\nx = list(map(int, input().split()))\n\n# sort\nx.sort()\n\n# get the median\nmedian = x[m // 2]\n\n# calculate the distance\nans = 0\nfor i in range(m):\n    ans += abs(x[i] - median)\n\nprint(ans)"
}
2022-04-18 20:33:57.410169 REASON stop
