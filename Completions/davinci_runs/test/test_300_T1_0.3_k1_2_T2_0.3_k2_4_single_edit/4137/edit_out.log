2022-04-20 04:16:15.407587 num operations 1
2022-04-20 04:16:15.407649 size on input set 1
2022-04-20 04:16:15.407902 using api key kouti
2022-04-20 04:16:22.394973 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport re\n\ndef bf_calc(expr):\n    # print(expr)\n    expr = expr.replace('+', ' + ')\n    expr = expr.replace('-', ' - ')\n    expr = expr.replace(' ', '')\n    # print(expr)\n    nums = re.findall(r'\\d+', expr)\n    # print(nums)\n    signs = re.findall(r'[+-]', expr)\n    # print(signs)\n    result = int(nums[0])\n    for i in range(1, len(nums)):\n        if signs[i-1] == '+':\n            result += int(nums[i])\n        else:\n            result -= int(nums[i])\n    # print(result)\n    return result\n\n\ndef bf_gen(expr):\n    result = bf_calc(expr)\n    # print(result)\n    output = ''\n    for i in range(0, result):\n        output += '+'\n    output += '>'\n    output += '.'\n    return output\n\nif __name__ == '__main__':\n    expr = input()\n    print(bf_gen(expr))\n"
    },
    {
      "index": 1,
      "text": "\nimport re\n\ndef bf_calc(expr):\n    #print(expr)\n    expr = expr.replace('+', ' + ')\n    expr = expr.replace('-', ' - ')\n    expr = expr.replace(' ', '')\n    #print(expr)\n    nums = re.findall(r'\\d+', expr)\n    #print(nums)\n    signs = re.findall(r'[+-]', expr)\n    #print(signs)\n    result = int(nums[0])\n    for i in range(1, len(nums)):\n        if signs[i-1] == '+':\n            result += int(nums[i])\n        else:\n            result -= int(nums[i])\n    #print(result)\n    return result\n\n\ndef bf_gen(expr):\n    result = bf_calc(expr)\n    #print(result)\n    output = ''\n    for i in range(0, result):\n        output += '+'\n    output += '>'\n    output += '.'\n    return output\n\nif __name__ == '__main__':\n    expr = input()\n    print(bf_gen(expr))\n"
    },
    {
      "index": 2,
      "text": "\nimport re\n\ndef bf_calc(expr):\n    #print(expr)\n    expr = expr.replace('+', ' + ')\n    expr = expr.replace('-', ' - ')\n    expr = expr.replace(' ', '')\n    #print(expr)\n    nums = re.findall(r'\\d+', expr)\n    #print(nums)\n    signs = re.findall(r'[+-]', expr)\n    #print(signs)\n    result = int(nums[0])\n    for i in range(1, len(nums)):\n        if signs[i-1] == '+':\n            result += int(nums[i])\n        else:\n            result -= int(nums[i])\n    #print(result)\n    return result\n\n\ndef bf_gen(expr):\n    result = bf_calc(expr)\n    #print(result)\n    output = ''\n    for i in range(0, result):\n        output += '+'\n    output += '>'\n    output += '.'\n    return output\n\nif __name__ == '__main__':\n    expr = input()\n    print(bf_gen(expr))\n"
    },
    {
      "index": 3,
      "text": "\n\nimport re\n\ndef bf_calc(expr):\n    #print(expr)\n    expr = expr.replace('+', ' + ')\n    expr = expr.replace('-', ' - ')\n    expr = expr.replace(' ', '') \n    #print(expr)\n    nums = re.findall(r'\\d+', expr)\n    #print(nums)\n    signs = re.findall(r'[+-]', expr)\n    #print(signs)\n    result = int(nums[0])\n    for i in range(1, len(nums)):\n        if signs[i-1] == '+':\n            result += int(nums[i])\n        else:\n            result -= int(nums[i])\n    #print(result)\n    return result\n\n\ndef bf_gen(expr):\n    result = bf_calc(expr)\n    #print(result)\n    output = ''\n    for i in range(0, result):\n        output += '+'\n    output += '>'\n    output += '.'\n    return output\n\nif __name__ == '__main__':\n    expr = input()\n    print(bf_gen(expr))\n"
    }
  ],
  "created": 1650428175,
  "object": "edit"
}
2022-04-20 04:16:22.395352 fix syntax errors 4 ["\nimport re\n\ndef bf_calc(expr):\n    # print(expr)\n    expr = expr.replace('+', ' + ')\n    expr = expr.replace('-', ' - ')\n    expr = expr.replace(' ', '')\n    # print(expr)\n    nums = re.findall(r'\\d+', expr)\n    # print(nums)\n    signs = re.findall(r'[+-]', expr)\n    # print(signs)\n    result = int(nums[0])\n    for i in range(1, len(nums)):\n        if signs[i-1] == '+':\n            result += int(nums[i])\n        else:\n            result -= int(nums[i])\n    # print(result)\n    return result\n\n\ndef bf_gen(expr):\n    result = bf_calc(expr)\n    # print(result)\n    output = ''\n    for i in range(0, result):\n        output += '+'\n    output += '>'\n    output += '.'\n    return output\n\nif __name__ == '__main__':\n    expr = input()\n    print(bf_gen(expr))\n", "\nimport re\n\ndef bf_calc(expr):\n    #print(expr)\n    expr = expr.replace('+', ' + ')\n    expr = expr.replace('-', ' - ')\n    expr = expr.replace(' ', '')\n    #print(expr)\n    nums = re.findall(r'\\d+', expr)\n    #print(nums)\n    signs = re.findall(r'[+-]', expr)\n    #print(signs)\n    result = int(nums[0])\n    for i in range(1, len(nums)):\n        if signs[i-1] == '+':\n            result += int(nums[i])\n        else:\n            result -= int(nums[i])\n    #print(result)\n    return result\n\n\ndef bf_gen(expr):\n    result = bf_calc(expr)\n    #print(result)\n    output = ''\n    for i in range(0, result):\n        output += '+'\n    output += '>'\n    output += '.'\n    return output\n\nif __name__ == '__main__':\n    expr = input()\n    print(bf_gen(expr))\n", "\nimport re\n\ndef bf_calc(expr):\n    #print(expr)\n    expr = expr.replace('+', ' + ')\n    expr = expr.replace('-', ' - ')\n    expr = expr.replace(' ', '')\n    #print(expr)\n    nums = re.findall(r'\\d+', expr)\n    #print(nums)\n    signs = re.findall(r'[+-]', expr)\n    #print(signs)\n    result = int(nums[0])\n    for i in range(1, len(nums)):\n        if signs[i-1] == '+':\n            result += int(nums[i])\n        else:\n            result -= int(nums[i])\n    #print(result)\n    return result\n\n\ndef bf_gen(expr):\n    result = bf_calc(expr)\n    #print(result)\n    output = ''\n    for i in range(0, result):\n        output += '+'\n    output += '>'\n    output += '.'\n    return output\n\nif __name__ == '__main__':\n    expr = input()\n    print(bf_gen(expr))\n", "\n\nimport re\n\ndef bf_calc(expr):\n    #print(expr)\n    expr = expr.replace('+', ' + ')\n    expr = expr.replace('-', ' - ')\n    expr = expr.replace(' ', '') \n    #print(expr)\n    nums = re.findall(r'\\d+', expr)\n    #print(nums)\n    signs = re.findall(r'[+-]', expr)\n    #print(signs)\n    result = int(nums[0])\n    for i in range(1, len(nums)):\n        if signs[i-1] == '+':\n            result += int(nums[i])\n        else:\n            result -= int(nums[i])\n    #print(result)\n    return result\n\n\ndef bf_gen(expr):\n    result = bf_calc(expr)\n    #print(result)\n    output = ''\n    for i in range(0, result):\n        output += '+'\n    output += '>'\n    output += '.'\n    return output\n\nif __name__ == '__main__':\n    expr = input()\n    print(bf_gen(expr))\n"]
2022-04-20 04:16:22.395439 size on output set 3
2022-04-20 04:16:22.395457 num operations 1
2022-04-20 04:16:22.395465 size on input set 1
2022-04-20 04:16:22.395705 using api key sourya
2022-04-20 04:16:31.037197 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef brainfuck(expression):\n    expression = expression.replace('+', ' + ').replace('-', ' - ').replace('*', ' * ').replace('/', ' / ')\n    expression = expression.split()\n    result = int(expression[0]) % 256\n    for i in range(1, len(expression), 2): \n        if expression[i] == '+': \n            result += int(expression[i+1]) % 256\n        elif expression[i] == '-': \n            result -= int(expression[i+1]) % 256\n        elif expression[i] == '*': \n            result *= int(expression[i+1]) % 256\n        elif expression[i] == '/': \n            result /= int(expression[i+1]) % 256\n    result = int(result)\n    return '+' * result + '>' + '<' * result + '[<+>-]<.'\n\nexpression = input()\nprint(brainfuck(expression))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef brainfuck(expression):\n    expression = expression.replace('+', ' + ').replace('-', ' - ')\n    expression = expression.split()\n    result = int(expression[0])\n    for i in range(1, len(expression), 2):\n        if expression[i] == '+':\n            result += int(expression[i+1])\n        else:\n            result -= int(expression[i+1])\n    result = result % 256\n    bf = ''\n    for i in range(result):\n        bf += '+'\n    bf += '>'\n    for i in range(result):\n        bf += '<'\n    bf += '[<+>-]<'\n    bf += '.'\n    return bf\n\nexpression = input()\nprint(brainfuck(expression))\n"
    },
    {
      "index": 2,
      "text": "\n\ndef brainfuck(expression):\n    expression = expression.replace('+', ' + ').replace('-', ' - ').replace('*', ' * ').replace('/', ' / ')\n    expression = expression.split()\n    result = int(expression[0])\n    for i in range(1, len(expression), 2):\n        if expression[i] == '+':\n        elif expression[i] == '-':\n            result -= int(expression[i+1])\n        elif expression[i] == '*':\n            result *= int(expression[i+1])\n            result += int(expression[i+1])\n        else:\n            result //= int(expression[i+1])\n    result = result % 256\n    # print(result)\n    bf = ''\n    for i in range(result):\n        bf += '+'\n    bf += '>'\n    for i in range(result):\n        bf += '<'\n    bf += '[<+>-]<'\n    bf += '.'\n    return bf\n\nexpression = input()\nprint(brainfuck(expression))\n"
    },
    {
      "index": 3,
      "text": "\n\ndef brainfuck(expression):\n    expression = expression.replace('+', ' + ').replace('-', ' - ').replace(' ', '')\n    expression = expression.split()\n    result = 0\n    for i in range(len(expression)):\n        if expression[i] == '+': result += 1\n        elif expression[i] == '-': result -= 1\n    result = result % 256 + 256\n    print(result)\n    bf = ''\n    for i in range(result):\n        bf += '+'\n    bf += '>'\n    for i in range(result):\n        bf += '<'\n    bf += '[<+>-]<'\n    bf += '.'\n    return bf\n\nexpression = input()\nprint(brainfuck(expression))\n"
    }
  ],
  "created": 1650428182,
  "object": "edit"
}
2022-04-20 04:16:31.037619 fix syntax errors 4 ["\n\ndef brainfuck(expression):\n    expression = expression.replace('+', ' + ').replace('-', ' - ').replace('*', ' * ').replace('/', ' / ')\n    expression = expression.split()\n    result = int(expression[0]) % 256\n    for i in range(1, len(expression), 2): \n        if expression[i] == '+': \n            result += int(expression[i+1]) % 256\n        elif expression[i] == '-': \n            result -= int(expression[i+1]) % 256\n        elif expression[i] == '*': \n            result *= int(expression[i+1]) % 256\n        elif expression[i] == '/': \n            result /= int(expression[i+1]) % 256\n    result = int(result)\n    return '+' * result + '>' + '<' * result + '[<+>-]<.'\n\nexpression = input()\nprint(brainfuck(expression))\n", "\n\ndef brainfuck(expression):\n    expression = expression.replace('+', ' + ').replace('-', ' - ')\n    expression = expression.split()\n    result = int(expression[0])\n    for i in range(1, len(expression), 2):\n        if expression[i] == '+':\n            result += int(expression[i+1])\n        else:\n            result -= int(expression[i+1])\n    result = result % 256\n    bf = ''\n    for i in range(result):\n        bf += '+'\n    bf += '>'\n    for i in range(result):\n        bf += '<'\n    bf += '[<+>-]<'\n    bf += '.'\n    return bf\n\nexpression = input()\nprint(brainfuck(expression))\n", "\n\ndef brainfuck(expression):\n    expression = expression.replace('+', ' + ').replace('-', ' - ').replace('*', ' * ').replace('/', ' / ')\n    expression = expression.split()\n    result = int(expression[0])\n    for i in range(1, len(expression), 2):\n        if expression[i] == '+':\n        elif expression[i] == '-':\n            result -= int(expression[i+1])\n        elif expression[i] == '*':\n            result *= int(expression[i+1])\n            result += int(expression[i+1])\n        else:\n            result //= int(expression[i+1])\n    result = result % 256\n    # print(result)\n    bf = ''\n    for i in range(result):\n        bf += '+'\n    bf += '>'\n    for i in range(result):\n        bf += '<'\n    bf += '[<+>-]<'\n    bf += '.'\n    return bf\n\nexpression = input()\nprint(brainfuck(expression))\n", "\n\ndef brainfuck(expression):\n    expression = expression.replace('+', ' + ').replace('-', ' - ').replace(' ', '')\n    expression = expression.split()\n    result = 0\n    for i in range(len(expression)):\n        if expression[i] == '+': result += 1\n        elif expression[i] == '-': result -= 1\n    result = result % 256 + 256\n    print(result)\n    bf = ''\n    for i in range(result):\n        bf += '+'\n    bf += '>'\n    for i in range(result):\n        bf += '<'\n    bf += '[<+>-]<'\n    bf += '.'\n    return bf\n\nexpression = input()\nprint(brainfuck(expression))\n"]
2022-04-20 04:16:31.037694 size on output set 4
