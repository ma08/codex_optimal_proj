2022-04-18 20:41:22.803751 """
In Republic of Atcoder, there are N prefectures, and a total of M cities that belong to those prefectures.
City i is established in year Y_i and belongs to Prefecture P_i.
You can assume that there are no multiple cities that are established in the same year.
It is decided to allocate a 12-digit ID number to each city.
If City i is the x-th established city among the cities that belong to Prefecture i, the first six digits of the ID number of City i is P_i, and the last six digits of the ID number is x.
Here, if P_i or x (or both) has less than six digits, zeros are added to the left until it has six digits.
Find the ID numbers for all the cities.
Note that there can be a prefecture with no cities.

-----Constraints-----
 - 1 \leq N \leq 10^5
 - 1 \leq M \leq 10^5
 - 1 \leq P_i \leq N
 - 1 \leq Y_i \leq 10^9
 - Y_i are all different.
 - All values in input are integers.

-----Input-----
Input is given from Standard Input in the following format:
N M
P_1 Y_1
:
P_M Y_M

-----Output-----
Print the ID numbers for all the cities, in ascending order of indices (City 1, City 2, ...).

-----Sample Input-----
2 3
1 32
2 63
1 12

-----Sample Output-----
000001000002
000002000001
000001000001

 - As City 1 is the second established city among the cities that belong to Prefecture 1, its ID number is 000001000002.
 - As City 2 is the first established city among the cities that belong to Prefecture 2, its ID number is 000002000001.
 - As City 3 is the first established city among the cities that belong to Prefecture 1, its ID number is 000001000001.
"""
2022-04-18 20:41:22.803787 --------------------------
2022-04-18 20:41:59.128841 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\nimport math\n\nn, m = map(int, sys.stdin.readline().split())\n\nprefectures = [[] for _ in range(n)]\nfor _ in range(m):\n    p, y = map(int, sys.stdin.readline().split())\n    prefectures[p-1].append(y)\n\nfor p in prefectures:\n    p.sort()\n\nfor p in prefectures:\n    for i, y in enumerate(p):\n        print(\"{:06}{:06}\".format(prefectures.index(p)+1, i+1))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n#N, M = map(int, input().split())\n#P_Y = [list(map(int, input().split())) for _ in range(M)]\nN, M = 2, 3\nP_Y = [[1, 32], [2, 63], [1, 12]]\n\n#print(N, M)\n#print(P_Y)\n\n# \u5404\u770c\u306e\u90fd\u5e02\u6570\ncity_num_per_pref = [0] * N\nfor p, y in P_Y:\n    city_num_per_pref[p-1] += 1\n\n#print(city_num_per_pref)\n\n# \u5404\u770c\u306e\u90fd\u5e02\u306eID\nid_per_pref = [[0] * c for c in city_num_per_pref]\nfor p, y in P_Y:\n    id_per_pref[p-1][city_num_per_pref[p-1]-1] = y\n    city_num_per_pref[p-1] -= 1\n\n#print(id_per_pref)\n\n# \u5404\u770c\u306e\u90fd\u5e02\u306eID\u3092\u30bd\u30fc\u30c8\nfor pref in id_per_pref:\n    pref.sort()\n\n#print(id_per_pref)\n\n# \u5404\u770c\u306e\u90fd\u5e02\u306eID\u3092ID\u306b\u5909\u63db\nid_per_pref = [[str(p).zfill(6) + str(i+1).zfill(6) for i in range(len(pref))] for p, pref in enumerate(id_per_pref, 1)]\n\n#print(id_per_pref)\n\n# \u5404\u770c\u306e\u90fd\u5e02\u306eID\u3092\u7d50\u5408\nid_per_pref = [id for pref in id_per_pref for id in pref]\n\n#print(id_per_pref)\n\n# \u51fa\u529b\nfor id in id_per_pref:\n    print(id)"
    }
  ],
  "created": 1650314482,
  "id": "cmpl-4ySTSKrnQHCPxJW8pmQ6hMNLiwZ6e",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-18 20:41:59.129111 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\nimport math\n\nn, m = map(int, sys.stdin.readline().split())\n\nprefectures = [[] for _ in range(n)]\nfor _ in range(m):\n    p, y = map(int, sys.stdin.readline().split())\n    prefectures[p-1].append(y)\n\nfor p in prefectures:\n    p.sort()\n\nfor p in prefectures:\n    for i, y in enumerate(p):\n        print(\"{:06}{:06}\".format(prefectures.index(p)+1, i+1))"
}
2022-04-18 20:41:59.129148 REASON stop
2022-04-18 20:41:59.892299 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n#N, M = map(int, input().split())\n#P_Y = [list(map(int, input().split())) for _ in range(M)]\nN, M = 2, 3\nP_Y = [[1, 32], [2, 63], [1, 12]]\n\n#print(N, M)\n#print(P_Y)\n\n# \u5404\u770c\u306e\u90fd\u5e02\u6570\ncity_num_per_pref = [0] * N\nfor p, y in P_Y:\n    city_num_per_pref[p-1] += 1\n\n#print(city_num_per_pref)\n\n# \u5404\u770c\u306e\u90fd\u5e02\u306eID\nid_per_pref = [[0] * c for c in city_num_per_pref]\nfor p, y in P_Y:\n    id_per_pref[p-1][city_num_per_pref[p-1]-1] = y\n    city_num_per_pref[p-1] -= 1\n\n#print(id_per_pref)\n\n# \u5404\u770c\u306e\u90fd\u5e02\u306eID\u3092\u30bd\u30fc\u30c8\nfor pref in id_per_pref:\n    pref.sort()\n\n#print(id_per_pref)\n\n# \u5404\u770c\u306e\u90fd\u5e02\u306eID\u3092ID\u306b\u5909\u63db\nid_per_pref = [[str(p).zfill(6) + str(i+1).zfill(6) for i in range(len(pref))] for p, pref in enumerate(id_per_pref, 1)]\n\n#print(id_per_pref)\n\n# \u5404\u770c\u306e\u90fd\u5e02\u306eID\u3092\u7d50\u5408\nid_per_pref = [id for pref in id_per_pref for id in pref]\n\n#print(id_per_pref)\n\n# \u51fa\u529b\nfor id in id_per_pref:\n    print(id)"
}
2022-04-18 20:41:59.892455 REASON stop
