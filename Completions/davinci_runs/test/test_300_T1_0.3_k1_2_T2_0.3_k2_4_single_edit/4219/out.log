2022-04-18 21:28:31.908796 """
There are N people numbered 1 to N. Each of them is either an honest person whose testimonies are always correct or an unkind person whose testimonies may be correct or not.
Person i gives A_i testimonies. The j-th testimony by Person i is represented by two integers x_{ij} and y_{ij}. If y_{ij} = 1, the testimony says Person x_{ij} is honest; if y_{ij} = 0, it says Person x_{ij} is unkind.
How many honest persons can be among those N people at most?

-----Constraints-----
 - All values in input are integers.
 - 1 \leq N \leq 15
 - 0 \leq A_i \leq N - 1
 - 1 \leq x_{ij} \leq N
 - x_{ij} \neq i
 - x_{ij_1} \neq x_{ij_2} (j_1 \neq j_2)
 - y_{ij} = 0, 1

-----Input-----
Input is given from Standard Input in the following format:
N
A_1
x_{11} y_{11}
x_{12} y_{12}
:
x_{1A_1} y_{1A_1}
A_2
x_{21} y_{21}
x_{22} y_{22}
:
x_{2A_2} y_{2A_2}
:
A_N
x_{N1} y_{N1}
x_{N2} y_{N2}
:
x_{NA_N} y_{NA_N}

-----Output-----
Print the maximum possible number of honest persons among the N people.

-----Sample Input-----
3
1
2 1
1
1 1
1
2 0

-----Sample Output-----
2

If Person 1 and Person 2 are honest and Person 3 is unkind, we have two honest persons without inconsistencies, which is the maximum possible number of honest persons.
"""
2022-04-18 21:28:31.908840 --------------------------
2022-04-18 21:29:06.726451 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    people = [[] for _ in range(N)]\n    for i in range(N):\n        A_i = int(sys.stdin.readline())\n        for j in range(A_i):\n            x_ij, y_ij = map(int, sys.stdin.readline().split())\n            people[i].append((x_ij-1, y_ij))\n    print(N - solve(people))\n\ndef solve(people):\n    N = len(people)\n    for i in range(N):\n        for j in range(i+1, N):\n            if is_consistent(people[i], people[j]):\n                return 2\n    return 1\n\ndef is_consistent(person1, person2):\n    for x_i1, y_i1 in person1:\n        for x_i2, y_i2 in person2:\n            if x_i1 == x_i2 and y_i1 != y_i2:\n                return True\n    return False\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline().rstrip())\n    persons = [[] for i in range(N)]\n    for i in range(N):\n        A_i = int(sys.stdin.readline().rstrip())\n        for j in range(A_i):\n            x_ij, y_ij = map(int, sys.stdin.readline().rstrip().split())\n            persons[i].append((x_ij, y_ij))\n\n    print(solve(N, persons))\n\ndef solve(N, persons):\n    \"\"\"\n    N: int\n    persons: list[list[tuple[int, int]]]\n    \"\"\"\n    # dp[i][j] := i\u756a\u76ee\u306e\u4eba\u304chonest\u3067\u3042\u308b\u3068\u304d\u306b\u3001j\u756a\u76ee\u306e\u4eba\u304chonest\u3067\u3042\u308b\u3068\u304d\u306b\u3001\n    # \u305d\u308c\u305e\u308c\u306e\u4eba\u306e\u8a3c\u8a00\u304c\u77db\u76fe\u3057\u306a\u3044\u3088\u3046\u306a\u72b6\u614b\u306e\u6570\n    dp = [[0 for _ in range(2)] for _ in range(N)]\n    dp[0][0] = 1\n    dp[0][1] = 1\n    for i in range(1, N):\n        for j in range(2):\n            for testimony in persons[i]:\n                x_ij, y_ij = testimony\n                if j == 1 and y_ij == 1:\n                    dp[i][j] += dp[x_ij - 1][1]\n                elif j == 0 and y_ij == 0:\n                    dp[i][j] += dp[x_ij - 1][0]\n    return sum(dp[N - 1])\n\nif __name__ == \"__main__\":\n    main()"
    }
  ],
  "created": 1650317312,
  "id": "cmpl-4yTD6bDBj1w6hq2lRhVMQn8KGZXzM",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-18 21:29:06.726726 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    people = [[] for _ in range(N)]\n    for i in range(N):\n        A_i = int(sys.stdin.readline())\n        for j in range(A_i):\n            x_ij, y_ij = map(int, sys.stdin.readline().split())\n            people[i].append((x_ij-1, y_ij))\n    print(N - solve(people))\n\ndef solve(people):\n    N = len(people)\n    for i in range(N):\n        for j in range(i+1, N):\n            if is_consistent(people[i], people[j]):\n                return 2\n    return 1\n\ndef is_consistent(person1, person2):\n    for x_i1, y_i1 in person1:\n        for x_i2, y_i2 in person2:\n            if x_i1 == x_i2 and y_i1 != y_i2:\n                return True\n    return False\n\nif __name__ == '__main__':\n    main()"
}
2022-04-18 21:29:06.726765 REASON stop
2022-04-18 21:29:06.769356 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline().rstrip())\n    persons = [[] for i in range(N)]\n    for i in range(N):\n        A_i = int(sys.stdin.readline().rstrip())\n        for j in range(A_i):\n            x_ij, y_ij = map(int, sys.stdin.readline().rstrip().split())\n            persons[i].append((x_ij, y_ij))\n\n    print(solve(N, persons))\n\ndef solve(N, persons):\n    \"\"\"\n    N: int\n    persons: list[list[tuple[int, int]]]\n    \"\"\"\n    # dp[i][j] := i\u756a\u76ee\u306e\u4eba\u304chonest\u3067\u3042\u308b\u3068\u304d\u306b\u3001j\u756a\u76ee\u306e\u4eba\u304chonest\u3067\u3042\u308b\u3068\u304d\u306b\u3001\n    # \u305d\u308c\u305e\u308c\u306e\u4eba\u306e\u8a3c\u8a00\u304c\u77db\u76fe\u3057\u306a\u3044\u3088\u3046\u306a\u72b6\u614b\u306e\u6570\n    dp = [[0 for _ in range(2)] for _ in range(N)]\n    dp[0][0] = 1\n    dp[0][1] = 1\n    for i in range(1, N):\n        for j in range(2):\n            for testimony in persons[i]:\n                x_ij, y_ij = testimony\n                if j == 1 and y_ij == 1:\n                    dp[i][j] += dp[x_ij - 1][1]\n                elif j == 0 and y_ij == 0:\n                    dp[i][j] += dp[x_ij - 1][0]\n    return sum(dp[N - 1])\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-18 21:29:06.769533 REASON stop
