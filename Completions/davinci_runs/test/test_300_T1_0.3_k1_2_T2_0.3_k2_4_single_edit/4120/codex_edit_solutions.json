["\n\n\n\nclass Graph:\n    def __init__(self):\n        self.nodes = set()\n        self.edges = defaultdict(list)\n        self.distances = {}\n\n    def add_node(self, value):\n        self.nodes.add(value)\n\n    def add_edge(self, from_node, to_node, distance):\n        self.edges[from_node].append(to_node)\n        self.edges[to_node].append(from_node)\n        self.distances[(from_node, to_node)] = distance\n\n\ndef dijkstra(graph, initial):\n    visited = {initial: 0}\n    path = {}\n\n    nodes = set(graph.nodes)\n\n    while nodes:\n        min_node = None\n        for node in nodes:\n            if node in visited:\n                if min_node is None:\n                    min_node = node\n                elif visited[node] < visited[min_node]:\n                    min_node = node\n        if min_node is None:\n            break\n\n        nodes.remove(min_node)\n        current_weight = visited[min_node]\n\n        for edge in graph.edges[min_node]:\n            weight = current_weight + graph.distance[(min_node, edge)]\n            if edge not in visited or weight < visited[edge]:\n                visited[edge] = weight\n                path[edge] = min_node\n\n    return visited, path\n\n\ndef shortest_path(graph, origin, destination):\n    visited, paths = dijkstra(graph, origin)\n    full_path = deque()\n    _destination = paths[destination]\n\n    while _destination != origin:\n        full_path.appendleft(_destination)\n        _destination = paths[_destination]\n\n    full_path.appendleft(origin)\n    full_path.append(destination)\n\n    return visited[destination], list(full_path)\n\nimport sys\n\ndef main():\n    n, m, k = [int(x) for x in sys.stdin.readline().split()]\n    roads = [[int(x) for x in sys.stdin.readline().split()] for _ in range(m)]\n    graph = Graph()\n    for road in roads:\n        graph.add_node(road[0])\n        graph.add_node(road[1])\n        graph.add_edge(road[0], road[1], road[2])\n    print(shortest_path(graph, 1, n))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, m, k = [int(x) for x in sys.stdin.readline().split()]\n    roads = [[int(x) for x in sys.stdin.readline().split()] for _ in range(m)]\n    print(n, m, k, roads)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    n, m, k = [int(x) for x in sys.stdin.readline().split()]\n    roads = [[int(x) for x in sys.stdin.readline().split()] for _ in range(m)]\n    print(n, m, k, roads)\n\nif __name__ == \"__main__\":\n    main()\n"]