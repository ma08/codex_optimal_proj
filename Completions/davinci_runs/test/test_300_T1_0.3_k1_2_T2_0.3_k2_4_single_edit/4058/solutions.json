["def mini(arr, n, k): \n\tlo = [0 for i in range(n + 1)] \n\to = -1\n\t\n\tfor i in range(n): \n\t\tif (arr[i] == 1): \n\t\t\to = i \n\t\tlo[i] = o\n\ta= 0; i = 0\n\twhile(i < n): \n\t\tpos = lo[min(i + k - 1, n - 1)] \n\t\tif (pos == -1 or pos + k <= i): \n\t\t\treturn -1\n\t\ti = pos + k \n\t\ta+= 1\n\treturn a\nn,k=list(map(int,input().split()))\narr=[int(i) for i in input().split()]\nprint(mini(arr, n, k)) \n\n\n", "def mainA():\n    T = int(input())\n    for i in range(T):\n        L, v, l, r = map(int, input().split())\n        ans = L // v\n        dow = l // v * v\n        up = r // v * v\n        if dow < l:\n            dow += v\n        ans -= max((up - dow) // v + 1, 0)\n        print(ans)\n\ndef mainB():\n    n, r = map(int, input().split())\n    a = [int(e) for e in input().split()]\n    r -= 1\n    fr = 0\n    ans = 0\n    while fr < n:\n        i = min(fr + r, n - 1)\n        flag = False\n        while i >= max(fr - r, 0) and not flag:\n            if a[i] == 1:\n                ans += 1\n                fr = i + r + 1\n                flag = True\n                break\n            i -= 1\n        if not flag:\n            print(-1)\n            return\n    print(ans)\n\nmainB()", "n, r = map(int, input().split())\nheaters = list(map(int, input().split()))\n\ncount = 0\nposition = 0\nlast_seen_heater = -1\n\nwhile position < n:\n\tindex = last_seen_heater + 1\n\twhile index < position + r and index < n:\n\t\tif heaters[index] == 1:\n\t\t\tlast_seen_heater = index\n\t\tindex += 1\n\t# print(position, last_seen_heater)\n\tnew_pos = position\n\tif last_seen_heater >= 0:\n\t\tnew_pos = last_seen_heater + r\n\tif new_pos != position:\n\t\tposition = new_pos\n\t\tcount += 1\n\telse:\n\t\tcount = -1\n\t\tbreak\n\nprint(count)", "n,r=list(map(int,input().split()))\n\na=list(map(int,input().split()))\n\ni=0\n\nd=0\n\nwhile True:\n    ki=min(n-1,i+r-1)\n    while ki>=0 and not a[ki]:\n        ki-=1\n    if ki<0:\n        d=-1\n        break        \n    a[ki]=0    \n    d+=1\n    i=ki+r\n    if i>n-1:\n        break\n    if i<0:\n        d=-1\n        break\nprint(d)    \n", "n, r = list(map(int, input().split()))\na = input().split()\ni = -r\nn_r = n - r\nn_1 = n - 1\nr1 = r * 2 - 1\nres = 0\nwhile i < n_r:\n\tfor j in range(min(i+r1, n_1), max(i, -1), -1):\n\t\tif a[j] == '1':\n\t\t\ti = j\n\t\t\tres += 1\n\t\t\tbreak\n\telse:\n\t\tres = -1\n\t\ti = n_r\nprint(res)\n", "import sys\n\nn,r=list(map(int,input().split()))\nA=list(map(int,input().split()))\n\n\ncount=0\ni=0\nwhile i<n:\n\n    for j in range(min(i+r-1,n-1),max(i-r,-1),-1):\n        if A[j]==1:\n            count+=1\n\n            if j+r>i:\n                i=j+r\n                break\n            else:\n                print(-1)\n                return\n\n    else:\n        print(-1)\n        return\n\n\nprint(count)\n\n            \n    \n    \n", "n,r = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\nidx = 0\ncb = -100000\nptr = 0\ncount = 0\nflag = True\nwhile idx < n:\n    ptr = max(0,idx-r+1)\n    # hasone = False\n    while ptr < min(n,idx+r):\n        if a[ptr] == 1:\n           cb = ptr\n        #   hasone = True\n        ptr += 1\n        # print(idx,ptr)\n    if abs(idx-cb) >= r:\n        print(-1)\n        flag = False\n        break\n    else:\n        count += 1\n        idx = cb + r\nif flag:\n    print(count)", "def mi():\n\treturn list(map(int, input().split()))\n\n'''\n6 2\n0 1 1 0 0 1\n'''\nn,r = mi()\na = list(mi())\ndef fun(n,a,r):\n\tvis = [0]*n\n\ti = 0\n\tcnt = 0\n\tfor j in range(min(r,n)):\n\t\tif a[j]==1:\n\t\t\ti = j\n\twhile i<n:\n\t\t#print (i)\n\t\tif vis[i]==1 and vis[min(n,end+r)-1]==1:\n\t\t\tbreak\n\t\tif a[i]==1:\n\t\t\tcnt+=1\n\t\t\tj = max(0,i-(r-1))\n\t\t\tend = min(n, i+r)\n\t\t\tnext = 0\n\t\t\twhile j<end:\n\t\t\t\tvis[j]=1\n\t\t\t\tj+=1\n\t\t\tnext = 0\n\t\t\tfor k in range(i+1, min(n,end+r)):\n\t\t\t\tif a[k]==1:\n\t\t\t\t\tnext = k\n\t\t\tif next:\n\t\t\t\ti = next\n\t\t\t\tcontinue\n\t\ti+=1\n\t#print (a)\n\t#print (vis)\n\tif 0 in vis:\n\t\treturn -1\n\telse:\n\t\treturn cnt\nprint(max(fun(n,a,r), fun(n,a[::-1],r)))\n", "n, r = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\n\nenabled = [0]*n\nans = 0\ni = 0\nbreaked = False\nwhile i < n:\n    j = i + r - 1\n    \n    heater = -1\n    while j >= i-r+1:\n        if j>=0 and j < n and a[j] == 1:\n            heater = j\n            break\n        j -= 1\n    #print(heater)\n    if heater == -1:\n        breaked = True\n        break\n    else:\n        i = heater + r\n    ans += 1\n    \nif not breaked:\n    print(ans)\nelse:\n    print(-1)\n", "def main():\n    n, r = list(map(int, input().split()))\n    arr = [True if c == '1' else False for c in input().split()]\n    #print(arr)\n\n    last_heated = 0\n    tot = 0\n    last_turned = -1\n    while last_heated < n:\n        optim = last_heated + r - 1\n\n        while True:\n            if optim < 0:\n                print('-1')\n                return\n            if optim <= last_turned:\n                print('-1')\n                return\n            if optim >= n:\n                optim -= 1\n                continue\n            if arr[optim]:\n                # found a heater\n                tot += 1\n                last_heated = optim + r\n                last_turned = optim\n                #print('turn on ' + str(optim))\n                break\n            optim -= 1\n    print(tot)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "'''input\n5 10\n0 0 0 0 0\n'''\nfrom sys import stdin, stdout\n\ndef right_index_search(i, arr, k):\n\tj=i; index=-1\n\twhile j<len(arr) and j<i+k:\n\t\tif arr[j]==1:\n\t\t\tindex=j\n\t\tj+=1 \n\treturn index\n\ndef left_index_search(i, arr, k):\n\tj=i-1;index=-1\n\twhile j>=0 and j>i-k:\n\t\tif arr[j]==1:\n\t\t\tindex=j\n\t\t\tbreak\n\t\tj-=1\n\treturn index \n\ndef pylons(k,arr):\n\tcount=0; i=0\n\twhile i<len(arr):\n\t\tindex_right=right_index_search(i,arr,k)\n\t\t#print(index_right)\n\t\tif index_right==-1:\n\t\t\tindex_left=left_index_search(i,arr,k)\n\t\t\tif index_left==-1:\n\t\t\t\treturn -1\n\t\t\telse:\n\t\t\t\ti=index_left+k\n\t\t\t\tcount+=1 \n\t\telse:\n\t\t\ti= index_right+k\n\t\t\tcount+=1\n\treturn count\n\ndef __starting_point():\n    n, k = input().strip().split(' ')\n    n, k = [int(n), int(k)]\n    arr = list(map(int, input().strip().split(' ')))\n    result = pylons(k, arr)\n    print(result)\n\n\n__starting_point()", "n,r=[int(x) for x in input().split()]\nns=[int(x) for x in input().split()]\ndef fin(i):\n    p=need+r-1\n    last=max(need-r,-1)\n    j=min(len(ns)-1,p)\n    while j>last:\n        if ns[j]>0:\n            return j+r\n        j-=1\n    return -1\nneed=0\nans=0\nwhile need<len(ns):\n    ans+=1\n    need=fin(need)\n    if need==-1:\n        print(-1)\n        quit()\nprint(ans)", "\n\nn, r = list(map(int, input().split()))\na = list(map(int, input().split()))\nr -= 1\n\ndef f():\n    prev = [0]*n\n    last = -1\n    for i in range(n):\n        if a[i]:\n            last = i\n        prev[i] = last\n\n    nb = 0\n    i = 0\n    while i < n:\n        # find the rightmost heater covering i\n        j = prev[min(i + r, n - 1)]\n        if j < 0 or j + r < i:\n            return -1\n        nb += 1\n        # next place to heat is the first not covered by the selected heater\n        i = j + r + 1\n\n    return nb\n\nprint(f())\n", "\nn, r = map(int, input().split(' '))\n\nheaters = list(map(int, input().split(' ')))\nheated = [0] * len(heaters)\n\nheaters_cnt = 0\ni = 0\nwhile i < len(heated):\n    flag = False\n    for j in range(r-1, -r, -1):\n        if heaters[max(0, min(i + j, n-1))] == 1:\n            heaters_cnt += 1\n            flag = True\n            i = i + j + r\n            break\n\n    if not flag:\n        heaters_cnt = -1\n        break\n\nprint(heaters_cnt)", "n,r = map(int, input().split())\nlist_a = list(map(int, input().split()))\n#first\ncount = 0\nnext = 0\ni = 0\nans = 0\nif n <= r:\n\tif 1 in list_a:\n\t\tcount = 1\n\telse:\n\t\tans = -1\nelse:\n\twhile True:\n\t\tif i > r-1:\n\t\t\tans = -1\n\t\t\tbreak\n\t\telif list_a[r-1-i] == 1:\n\t\t\tnext = r-1-i\n\t\t\tcount += 1\n\t\t\tbreak\n\t\telse:\n\t\t\ti += 1\n\tflag = 0\n\tif ans != -1:\n\t\twhile True:\n\t\t\ti = 0\n\t\t\twhile True:\n\t\t\t\tif i >= 2*(r-1) + 1:\n\t\t\t\t\tans = -1\n\t\t\t\t\tbreak\n\t\t\t\ttry:\n\t\t\t\t\tif list_a[next + 2*(r-1) + 1 - i] == 1:\n\t\t\t\t\t\tnext += 2*(r-1) + 1 - i\n\t\t\t\t\t\tcount += 1\n\t\t\t\t\t\tbreak\n\t\t\t\t\telse:\n\t\t\t\t\t\ti += 1\n\t\t\t\texcept IndexError:\n\t\t\t\t\tflag = 1\n\t\t\t\t\tbreak\n\t\t\tif ans == -1 or flag == 1:\n\t\t\t\tbreak\n\tif ans != -1:\n\t\tif next >= n-r:\n\t\t\tpass\n\t\telse:\n\t\t\twhile True:\n\t\t\t\tif i > r-1:\n\t\t\t\t\tans = -1\n\t\t\t\t\tbreak\n\t\t\t\telif list_a[-r + i] == 1:\n\t\t\t\t\tcount += 1\n\t\t\t\t\tbreak\n\t\t\t\telse:\n\t\t\t\t\ti += 1\nif ans == -1:\n\tprint(ans)\nelse:\n\tprint(count)", "n,r = [int(s) for s in input().split()]\na = [int(s) for s in input().split()]\nb = [0]*n\nans = 0\nfor i in range(n):\n    if (b[i] == 0):\n        found = False\n        for j in range(min(n-1,i+r-1), max(-1,i-r), -1):\n            if a[j] == 1:\n                for k in range(min(n-1,j+r-1), max(-1,j-r), -1):\n                    b[k] = 1\n                ans += 1\n                found = True\n                break\n        if not found:\n            ans = -1\n            break\nprint(ans)", "n, r = list(map(int, input().split()))\nmas = list(map(int, input().split()))\n\nmasn = [0 for i in range(n)]\n\nfor i in range(n):\n    if mas[i]==1:\n        for j in range(max(0, i-r+1), min(n, i+r)):\n            masn[j]=i+1\n\nind=0\notv=0\nbr = False\nwhile (ind<n):\n    if masn[ind]>0:\n        otv+=1\n        ind = masn[ind]-1+r\n    else:\n        br = True\n        break\nif br: print(-1)\nelse: print(otv)\n", "n,r = map(int,input().split())\narr = list(map(int,input().split()))\nans = 0\ni = min(n-1,r-1)\nprev = -1\nwhile i>prev:\n\twhile i>prev and arr[i]==0:\n\t\ti-=1\n\tif i==prev:\n\t\tans=-1\n\t\tbreak\n\tprev = i\n\tans+=1\n\tif prev+r>=n:break\n\ti = min(n-1,i+2*r-1)\nprint(ans)", "n, r = list(map(int, input().split()))\na = list(map(int, input().split()))\nres = 0\nlast_heater_pos = -r\nwhile (n-last_heater_pos > r) or (last_heater_pos <0):\n    next_heaters_pos  = [i for i in range(max(0,last_heater_pos+1), min(last_heater_pos + 2*r ,n)) if a[i] == 1]\n    if next_heaters_pos:\n        last_heater_pos = max(next_heaters_pos)\n        res += 1\n        # print('found', last_heater_pos, 'among', next_heaters_pos)\n    else:\n        print(-1)\n        return\n\nprint(res)\n\n\n", "n,r=map(int,input().split())\nl=list(map(int,input().split()))\nc=[0]*n\nans=0\nfor i in range(n):\n    if l[i]==1:\n        b=False\n        for j in range(i-(r-1),i+r):\n            if j<0 or j>=n:\n                continue\n            if c[j]!=1:\n                b=True\n            c[j]=1\n\n        if b:\n            ans+=1\n\nif c.count(0)==0:\n    ans=1;i=0\n    for j in range(r-1,-1,-1):\n        if j>=n:\n            continue\n        if l[j]==1:\n            i=j\n            break\n    while True:\n        #print(i)\n        if i+r-1>=n-1:\n            break\n\n        for j in range(i+2*(r-1)+1,i,-1):\n            if j>=n:\n                continue\n            if l[j]==1:\n                ans+=1\n                i=j\n                break\n\n        if i+r-1>=n-1 or (i==n-1):\n            break\n    print(ans)\n\nelse:\n    print(-1)", "n, r = list(map( int, input().split() ))\na = [ 0 ] + list( map( int, input().split() ) )\n\nl = 0\ni = 1\nend = 0\nwhile i <= n:\n    j = i + r - 1\n    j = min( j, n )\n    while j >= end and j <= n and a[ j ] < 1:\n        j -= 1\n    if j > end:\n        l += 1\n        end = j\n        i = j + r\n    else:\n        l = -1\n        break\n\nprint( l )\n", "n, r = list(map(int, input().split()))\na = list(map(int, input().split()))\na.insert(0, 0)\npos = 1\nans = 0\nlast = 0\nwhile(True):\n  if pos > n:\n    break\n  prelast = last\n  for i in range(max(0, pos - r + 1), min(pos + r, n + 1)):\n    if a[i] == 1:\n      pos = i + r\n      last = i\n  if prelast == last:\n    ans = -1\n    break\n  else:\n    ans += 1\nprint(ans)"]