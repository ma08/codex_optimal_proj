2022-04-18 20:54:20.747767 """
There are N cubes stacked vertically on a desk.
You are given a string S of length N. The color of the i-th cube from the bottom is red if the i-th character in S is 0, and blue if that character is 1.
You can perform the following operation any number of times: choose a red cube and a blue cube that are adjacent, and remove them. Here, the cubes that were stacked on the removed cubes will fall down onto the object below them.
At most how many cubes can be removed?

-----Constraints-----
 - 1 \leq N \leq 10^5
 - |S| = N
 - Each character in S is 0 or 1.

-----Input-----
Input is given from Standard Input in the following format:
S

-----Output-----
Print the maximum number of cubes that can be removed.

-----Sample Input-----
0011

-----Sample Output-----
4

All four cubes can be removed, by performing the operation as follows:
 - Remove the second and third cubes from the bottom. Then, the fourth cube drops onto the first cube.
 - Remove the first and second cubes from the bottom.
"""
2022-04-18 20:54:20.747803 --------------------------
2022-04-18 20:54:50.348940 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nN = int(input())\nS = input()\n\n# Initialize the number of cubes that can be removed\nnum_cubes_removed = 0\n\n# Initialize the number of consecutive red cubes\nnum_consec_red = 0\n\n# Initialize the number of consecutive blue cubes\nnum_consec_blue = 0\n\n# Iterate through each cube\nfor i in range(N):\n    # If the cube is red\n    if S[i] == '0':\n        # Increment the number of consecutive red cubes\n        num_consec_red += 1\n        # If there are two or more consecutive red cubes\n        if num_consec_red >= 2:\n            # Increment the number of cubes that can be removed\n            num_cubes_removed += 1\n            # Reset the number of consecutive red cubes\n            num_consec_red = 0\n        # Reset the number of consecutive blue cubes\n        num_consec_blue = 0\n    # If the cube is blue\n    else:\n        # Increment the number of consecutive blue cubes\n        num_consec_blue += 1\n        # If there are two or more consecutive blue cubes\n        if num_consec_blue >= 2:\n            # Increment the number of cubes that can be removed\n            num_cubes_removed += 1\n            # Reset the number of consecutive blue cubes\n            num_consec_blue = 0\n        # Reset the number of consecutive red cubes\n        num_consec_red = 0\n\n# Print the number of cubes that can be removed\nprint(num_cubes_removed)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nN = int(input())\nS = input()\n\n# 0:red, 1:blue\n\n# stack\nstack = []\n\nfor i in range(N):\n    if len(stack) == 0:\n        stack.append(S[i])\n    else:\n        if stack[-1] != S[i]:\n            stack.pop()\n        else:\n            stack.append(S[i])\n\nprint(N - len(stack))"
    }
  ],
  "created": 1650315260,
  "id": "cmpl-4ySg0xgE4pzLXFvjcdok9QZSUDBUi",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-18 20:54:50.349219 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nN = int(input())\nS = input()\n\n# Initialize the number of cubes that can be removed\nnum_cubes_removed = 0\n\n# Initialize the number of consecutive red cubes\nnum_consec_red = 0\n\n# Initialize the number of consecutive blue cubes\nnum_consec_blue = 0\n\n# Iterate through each cube\nfor i in range(N):\n    # If the cube is red\n    if S[i] == '0':\n        # Increment the number of consecutive red cubes\n        num_consec_red += 1\n        # If there are two or more consecutive red cubes\n        if num_consec_red >= 2:\n            # Increment the number of cubes that can be removed\n            num_cubes_removed += 1\n            # Reset the number of consecutive red cubes\n            num_consec_red = 0\n        # Reset the number of consecutive blue cubes\n        num_consec_blue = 0\n    # If the cube is blue\n    else:\n        # Increment the number of consecutive blue cubes\n        num_consec_blue += 1\n        # If there are two or more consecutive blue cubes\n        if num_consec_blue >= 2:\n            # Increment the number of cubes that can be removed\n            num_cubes_removed += 1\n            # Reset the number of consecutive blue cubes\n            num_consec_blue = 0\n        # Reset the number of consecutive red cubes\n        num_consec_red = 0\n\n# Print the number of cubes that can be removed\nprint(num_cubes_removed)"
}
2022-04-18 20:54:50.349265 REASON stop
2022-04-18 20:54:50.433197 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nN = int(input())\nS = input()\n\n# 0:red, 1:blue\n\n# stack\nstack = []\n\nfor i in range(N):\n    if len(stack) == 0:\n        stack.append(S[i])\n    else:\n        if stack[-1] != S[i]:\n            stack.pop()\n        else:\n            stack.append(S[i])\n\nprint(N - len(stack))"
}
2022-04-18 20:54:50.433364 REASON stop
