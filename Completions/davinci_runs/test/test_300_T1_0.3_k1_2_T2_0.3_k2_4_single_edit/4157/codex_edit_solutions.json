["\nn = int(input())\na = list(map(int, input().split()))\n\ndef check(a):\n    if len(a) == 1:\n        return True\n    if len(a) == 2:\n        return a[0] == a[1] / 2 or a[0] == a[1] * 3\n    if a[0] == a[1] / 2:\n        return check(a[1:])\n    if a[0] == a[1] * 3:\n        return check(a[1:])\n    return False\n\nfor i in range(n):\n    if check(a[i:]):\n        print(*a[i:])\n        break\n", "\n\ndef main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    arr.reverse()\n    print(*arr)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    print(*a)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split())) \n    a.sort()\n    a.reverse()\n    print(*a)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nn = int(input())\na = list(map(int, input().split()))\n\ndef check(a):\n    if len(a) == 1:\n        return True\n    if len(a) == 2:\n        return a[0] == a[1] / 2 or a[0] == a[1] * 3\n    if a[0] == a[1] / 2:\n        return check(a[1:])\n    if a[0] == a[1] * 3:\n        return check(a[1:])\n    return False\n\nfor i in range(n):\n    if check(a[i:]):\n        print(*a[i:])\n        break\n", "#!/usr/bin/env python3\n\nn = int(input())\na = list(map(int, input().split()))\n\ndef check(a):\n    if len(a) == 1:\n        return True\n    if len(a) == 2:\n        return a[0] == a[1] // 2 or a[0] == a[1] * 3 or a[1] == a[0] // 2 or a[1] == a[0] * 3\n    if a[0] == a[1] // 2 or a[1] == a[0] // 2:\n        return check(a[1:])\n    if a[0] == a[1] * 3 or a[1] == a[0] * 3:\n        return check(a[1:])\n    return False\n\nfor i in range(n):\n    if check(a[i:]):\n        print(*a[i:])\n        break\n", "\nn = int(input())\na = list(map(int, input().split()))\n\nprint(*a)\n", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    a.reverse()\n    print(a)\n\nif __name__ == \"__main__\":\n    main()\n"]