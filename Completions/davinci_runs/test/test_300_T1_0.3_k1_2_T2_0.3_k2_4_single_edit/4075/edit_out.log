2022-04-20 04:06:17.093719 num operations 1
2022-04-20 04:06:17.093741 size on input set 1
2022-04-20 04:06:17.093964 using api key sunu
2022-04-20 04:06:38.254260 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# \u5165\u529b\nN, M = map(int, input().split())\n\n# \u5404\u96fb\u7403\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b\u30b9\u30a4\u30c3\u30c1\u306e\u30ea\u30b9\u30c8\nswitches = []\nfor i in range(M):\n    switches.append(list(map(int, input().split()))[1:])\n\n# \u5404\u96fb\u7403\u304c\u70b9\u706f\u3059\u308b\u304b\u3069\u3046\u304b\u306e\u30ea\u30b9\u30c8\nbulbs = list(map(int, input().split()))\n\n# \u5404\u96fb\u7403\u304c\u70b9\u706f\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u8a08\u7b97\u3059\u308b\ncount = 0\nfor i in range(2 ** N):\n    # \u5404\u96fb\u7403\u304c\u70b9\u706f\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u306e\u30d5\u30e9\u30b0\n    flag = True\n    for j in range(M):\n        # \u5404\u96fb\u7403\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b\u30b9\u30a4\u30c3\u30c1\u306e\u500b\u6570\n        k = len(switches[j])\n        # \u5404\u96fb\u7403\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b\u30b9\u30a4\u30c3\u30c1\u304c\u30aa\u30f3\u306b\u306a\u3063\u3066\u3044\u308b\u500b\u6570\n        on = 0\n        for s in switches[j]:\n            if (i >> (s - 1)) & 1:\n                on += 1\n        # \u5404\u96fb\u7403\u304c\u70b9\u706f\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\n        if (on % 2) != bulbs[j]:\n            flag = False\n            break\n    # \u5168\u3066\u306e\u96fb\u7403\u304c\u70b9\u706f\u3057\u3066\u3044\u308b\u5834\u5408\u3001\u30ab\u30a6\u30f3\u30c8\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\n    if flag:\n        count += 1\n\n# \u51fa\u529b\nprint(count)\n"
    },
    {
      "index": 1,
      "text": "\n# \u5165\u529b\nN, M = map(int, input().split())\n\n# \u5404\u96fb\u7403\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b\u30b9\u30a4\u30c3\u30c1\u306e\u30ea\u30b9\u30c8\nswitches = []\nfor i in range(M):\n    switches.append(list(map(int, input().split()))[1:])\n\n# \u5404\u96fb\u7403\u304c\u70b9\u706f\u3059\u308b\u304b\u3069\u3046\u304b\u306e\u30ea\u30b9\u30c8\nbulbs = list(map(int, input().split()))\n\n# \u5404\u96fb\u7403\u304c\u70b9\u706f\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u8a08\u7b97\u3059\u308b\ncount = 0\nfor i in range(2 ** N):\n    # \u5404\u96fb\u7403\u304c\u70b9\u706f\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u306e\u30d5\u30e9\u30b0\n    flag = True\n    for j in range(M):\n        # \u5404\u96fb\u7403\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b\u30b9\u30a4\u30c3\u30c1\u306e\u500b\u6570\n        k = len(switches[j])\n        # \u5404\u96fb\u7403\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b\u30b9\u30a4\u30c3\u30c1\u304c\u30aa\u30f3\u306b\u306a\u3063\u3066\u3044\u308b\u500b\u6570\n        on = 0\n        for s in switches[j]:\n            if (i >> (s - 1)) & 1:\n                on += 1\n        # \u5404\u96fb\u7403\u304c\u70b9\u706f\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\n        if (on % 2) != bulbs[j]:\n            flag = False\n            break\n    # \u5168\u3066\u306e\u96fb\u7403\u304c\u70b9\u706f\u3057\u3066\u3044\u308b\u5834\u5408\u3001\u30ab\u30a6\u30f3\u30c8\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\n    if flag:\n        count += 1\n\n# \u51fa\u529b\nprint(count)\n"
    },
    {
      "index": 2,
      "text": "\n# \u5165\u529b\nN, M = map(int, input().split())\n\n# \u5404\u96fb\u7403\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b\u30b9\u30a4\u30c3\u30c1\u306e\u30ea\u30b9\u30c8\nswitches = []\nfor i in range(M):\n    switches.append(list(map(int, input().split()))[1:])\n\n# \u5404\u96fb\u7403\u304c\u70b9\u706f\u3059\u308b\u304b\u3069\u3046\u304b\u306e\u30ea\u30b9\u30c8\nbulbs = list(map(int, input().split()))\n\n# \u5404\u96fb\u7403\u304c\u70b9\u706f\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u8a08\u7b97\u3059\u308b\ncount = 0\nfor i in range(2 ** N):\n    # \u5404\u96fb\u7403\u304c\u70b9\u706f\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u306e\u30d5\u30e9\u30b0\n    flag = True\n    for j in range(M):\n        # \u5404\u96fb\u7403\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b\u30b9\u30a4\u30c3\u30c1\u306e\u500b\u6570\n        k = len(switches[j])\n        # \u5404\u96fb\u7403\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b\u30b9\u30a4\u30c3\u30c1\u304c\u30aa\u30f3\u306b\u306a\u3063\u3066\u3044\u308b\u500b\u6570\n        on = 0\n        for s in switches[j]:\n            if (i >> (s - 1)) & 1:\n                on += 1\n        # \u5404\u96fb\u7403\u304c\u70b9\u706f\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\n        if (on % 2) != bulbs[j]:\n            flag = False\n            break\n    # \u5168\u3066\u306e\u96fb\u7403\u304c\u70b9\u706f\u3057\u3066\u3044\u308b\u5834\u5408\u3001\u30ab\u30a6\u30f3\u30c8\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\n    if flag:\n        count += 1\n\n# \u51fa\u529b\nprint(count)\n"
    },
    {
      "index": 3,
      "text": "\n# \u5165\u529b\nN, M = map(int, input().split())\n\n# \u5404\u96fb\u7403\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b\u30b9\u30a4\u30c3\u30c1\u306e\u30ea\u30b9\u30c8\nswitches = []\nfor i in range(M):\n    switches.append(list(map(int, input().split()))[1:])\n\n# \u5404\u96fb\u7403\u304c\u70b9\u706f\u3059\u308b\u304b\u3069\u3046\u304b\u306e\u30ea\u30b9\u30c8\nbulbs = list(map(int, input().split()))\n\n# \u5404\u96fb\u7403\u304c\u70b9\u706f\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u8a08\u7b97\u3059\u308b\ncount = 0\nfor i in range(2 ** N):\n    # \u5404\u96fb\u7403\u304c\u70b9\u706f\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u306e\u30d5\u30e9\u30b0\n    flag = True\n    for j in range(M):\n        # \u5404\u96fb\u7403\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b\u30b9\u30a4\u30c3\u30c1\u306e\u500b\u6570\n        k = len(switches[j])\n        # \u5404\u96fb\u7403\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b\u30b9\u30a4\u30c3\u30c1\u304c\u30aa\u30f3\u306b\u306a\u3063\u3066\u3044\u308b\u500b\u6570\n        on = 0\n        for s in switches[j]:\n            if (i >> (s - 1)) & 1:\n                on += 1\n        # \u5404\u96fb\u7403\u304c\u70b9\u706f\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\n        if (on % 2) != bulbs[j]:\n            flag = False\n            break\n    # \u5168\u3066\u306e\u96fb\u7403\u304c\u70b9\u706f\u3057\u3066\u3044\u308b\u5834\u5408\u3001\u30ab\u30a6\u30f3\u30c8\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\n    if flag:\n        count += 1\n\n# \u51fa\u529b\nprint(count)\n"
    }
  ],
  "created": 1650427577,
  "object": "edit"
}
2022-04-20 04:06:38.254563 fix syntax errors 4 ['\n# 入力\nN, M = map(int, input().split())\n\n# 各電球に接続されているスイッチのリスト\nswitches = []\nfor i in range(M):\n    switches.append(list(map(int, input().split()))[1:])\n\n# 各電球が点灯するかどうかのリスト\nbulbs = list(map(int, input().split()))\n\n# 各電球が点灯するかどうかを計算する\ncount = 0\nfor i in range(2 ** N):\n    # 各電球が点灯しているかどうかのフラグ\n    flag = True\n    for j in range(M):\n        # 各電球に接続されているスイッチの個数\n        k = len(switches[j])\n        # 各電球に接続されているスイッチがオンになっている個数\n        on = 0\n        for s in switches[j]:\n            if (i >> (s - 1)) & 1:\n                on += 1\n        # 各電球が点灯しているかどうか\n        if (on % 2) != bulbs[j]:\n            flag = False\n            break\n    # 全ての電球が点灯している場合、カウントをインクリメント\n    if flag:\n        count += 1\n\n# 出力\nprint(count)\n', '\n# 入力\nN, M = map(int, input().split())\n\n# 各電球に接続されているスイッチのリスト\nswitches = []\nfor i in range(M):\n    switches.append(list(map(int, input().split()))[1:])\n\n# 各電球が点灯するかどうかのリスト\nbulbs = list(map(int, input().split()))\n\n# 各電球が点灯するかどうかを計算する\ncount = 0\nfor i in range(2 ** N):\n    # 各電球が点灯しているかどうかのフラグ\n    flag = True\n    for j in range(M):\n        # 各電球に接続されているスイッチの個数\n        k = len(switches[j])\n        # 各電球に接続されているスイッチがオンになっている個数\n        on = 0\n        for s in switches[j]:\n            if (i >> (s - 1)) & 1:\n                on += 1\n        # 各電球が点灯しているかどうか\n        if (on % 2) != bulbs[j]:\n            flag = False\n            break\n    # 全ての電球が点灯している場合、カウントをインクリメント\n    if flag:\n        count += 1\n\n# 出力\nprint(count)\n', '\n# 入力\nN, M = map(int, input().split())\n\n# 各電球に接続されているスイッチのリスト\nswitches = []\nfor i in range(M):\n    switches.append(list(map(int, input().split()))[1:])\n\n# 各電球が点灯するかどうかのリスト\nbulbs = list(map(int, input().split()))\n\n# 各電球が点灯するかどうかを計算する\ncount = 0\nfor i in range(2 ** N):\n    # 各電球が点灯しているかどうかのフラグ\n    flag = True\n    for j in range(M):\n        # 各電球に接続されているスイッチの個数\n        k = len(switches[j])\n        # 各電球に接続されているスイッチがオンになっている個数\n        on = 0\n        for s in switches[j]:\n            if (i >> (s - 1)) & 1:\n                on += 1\n        # 各電球が点灯しているかどうか\n        if (on % 2) != bulbs[j]:\n            flag = False\n            break\n    # 全ての電球が点灯している場合、カウントをインクリメント\n    if flag:\n        count += 1\n\n# 出力\nprint(count)\n', '\n# 入力\nN, M = map(int, input().split())\n\n# 各電球に接続されているスイッチのリスト\nswitches = []\nfor i in range(M):\n    switches.append(list(map(int, input().split()))[1:])\n\n# 各電球が点灯するかどうかのリスト\nbulbs = list(map(int, input().split()))\n\n# 各電球が点灯するかどうかを計算する\ncount = 0\nfor i in range(2 ** N):\n    # 各電球が点灯しているかどうかのフラグ\n    flag = True\n    for j in range(M):\n        # 各電球に接続されているスイッチの個数\n        k = len(switches[j])\n        # 各電球に接続されているスイッチがオンになっている個数\n        on = 0\n        for s in switches[j]:\n            if (i >> (s - 1)) & 1:\n                on += 1\n        # 各電球が点灯しているかどうか\n        if (on % 2) != bulbs[j]:\n            flag = False\n            break\n    # 全ての電球が点灯している場合、カウントをインクリメント\n    if flag:\n        count += 1\n\n# 出力\nprint(count)\n']
2022-04-20 04:06:38.254722 size on output set 1
2022-04-20 04:06:38.254736 num operations 1
2022-04-20 04:06:38.254742 size on input set 1
2022-04-20 04:06:38.254903 using api key jaanu
2022-04-20 04:06:41.447158 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# N switches, M bulbs\nN, M = map(int, input().split())\n\n# k_i switches connected to bulb i\n# s[i][j] is the number of the j-th switch connected to bulb i\n# p_i is the parity of the number of switches that are \"on\" among the switches connected to bulb i\nk = [0] * M\ns = [0] * M\np = [0] * M\nfor i in range(M):\n    k[i], *s[i] = map(int, input().split())\np = list(map(int, input().split()))\n\n# The number of combinations of \"on\" and \"off\" states of the switches that light all the bulbs\ncount = 0\n\n# Try all combinations of \"on\" and \"off\" states of the switches\nfor i in range(2**N):\n    # Check if all the bulbs are lighted\n    lighted = True\n    for j in range(M):\n        # Count the number of switches that are \"on\" among the switches connected to bulb j\n        on = 0\n        for l in range(k[j]):\n            if i & (1 << (s[j][l] - 1)):\n                on += 1\n        # Check if bulb j is lighted\n        if on % 2 != p[j]:\n            lighted = False\n            break\n    if lighted:\n        count += 1\n\nprint(count)\n"
    },
    {
      "index": 1,
      "text": "\n# N switches, M bulbs\nN, M = map(int, input().split())\n\n# k_i switches connected to bulb i\n# s_{ij} is the number of the j-th switch connected to bulb i\n# p_i is the parity of the number of switches that are \"on\" among the switches connected to bulb i\nk = [0] * M\ns = [0] * M\np = [0] * M\nfor i in range(M):\n    k[i], *s[i] = map(int, input().split())\np = list(map(int, input().split()))\n\n# The number of combinations of \"on\" and \"off\" states of the switches that light all the bulbs\ncount = 0\n\n# Try all combinations of \"on\" and \"off\" states of the switches\nfor i in range(2**N):\n    # Check if all the bulbs are lighted\n    lighted = True\n    for j in range(M):\n        # Count the number of switches that are \"on\" among the switches connected to bulb j\n        on = 0\n        for l in range(k[j]):\n            if i & (1 << (s[j][l] - 1)):\n                on += 1\n        # Check if bulb j is lighted\n        if on % 2 != p[j]:\n            lighted = False\n            break\n    if lighted:\n        count += 1\n\nprint(count)\n"
    },
    {
      "index": 2,
      "text": "\n\n# N switches, M bulbs\nN, M = map(int, input().split())\n\n# k_i switches connected to bulb i\n# s_{ij} is the number of the j-th switch connected to bulb i\n# p_i is the parity of the number of switches that are \"on\" among the switches connected to bulb i\nk = [0] * M\ns = [0] * M\np = [0] * M\nfor i in range(M):\n    k[i], *s[i] = map(int, input().split())  # Python 3.x only\np = list(map(int, input().split()))\n\n# The number of combinations of \"on\" and \"off\" states of the switches that light all the bulbs\ncount = 0\n\n# Try all combinations of \"on\" and \"off\" states of the switches\nfor i in range(2**N):\n    # Check if all the bulbs are lighted\n    lighted = True\n    for j in range(M):\n        # Count the number of switches that are \"on\" among the switches connected to bulb j\n        on = 0\n        for l in range(k[j]):\n            if i & (1 << (s[j][l] - 1)):\n                on += 1\n        # Check if bulb j is lighted\n        if on % 2 != p[j]:\n            lighted = False\n            break\n    if lighted:\n        count += 1\n\nprint(count)\n"
    },
    {
      "index": 3,
      "text": "\n\n# N switches, M bulbs\nN, M = map(int, input().split())\n\n# k_i switches connected to bulb i\n# s_{ij} is the number of the j-th switch connected to bulb i\n# p_i is the parity of the number of switches that are \"on\" among the switches connected to bulb i\nk = [0] * M\ns = [[] for i in range(M)]\np = [0] * M\nfor i in range(M):\n    k[i], *s[i] = list(map(int, input().split()))\np = list(map(int, input().split()))\n\n# The number of combinations of \"on\" and \"off\" states of the switches that light all the bulbs\ncount = 0\n\n# Try all combinations of \"on\" and \"off\" states of the switches\nfor i in range(2**N):\n    # Check if all the bulbs are lighted\n    lighted = True\n    for j in range(M):\n        # Count the number of switches that are \"on\" among the switches connected to bulb j\n        on = 0\n        for l in range(k[j]):\n            if i & (1 << (s[j][l] - 1)):\n                on += 1\n        # Check if bulb j is lighted\n        if on % 2 != p[j]:\n            lighted = False\n            break\n    if lighted:\n        count += 1\n\nprint(count)\n"
    }
  ],
  "created": 1650427598,
  "object": "edit"
}
2022-04-20 04:06:41.447418 fix syntax errors 4 ['\n\n# N switches, M bulbs\nN, M = map(int, input().split())\n\n# k_i switches connected to bulb i\n# s[i][j] is the number of the j-th switch connected to bulb i\n# p_i is the parity of the number of switches that are "on" among the switches connected to bulb i\nk = [0] * M\ns = [0] * M\np = [0] * M\nfor i in range(M):\n    k[i], *s[i] = map(int, input().split())\np = list(map(int, input().split()))\n\n# The number of combinations of "on" and "off" states of the switches that light all the bulbs\ncount = 0\n\n# Try all combinations of "on" and "off" states of the switches\nfor i in range(2**N):\n    # Check if all the bulbs are lighted\n    lighted = True\n    for j in range(M):\n        # Count the number of switches that are "on" among the switches connected to bulb j\n        on = 0\n        for l in range(k[j]):\n            if i & (1 << (s[j][l] - 1)):\n                on += 1\n        # Check if bulb j is lighted\n        if on % 2 != p[j]:\n            lighted = False\n            break\n    if lighted:\n        count += 1\n\nprint(count)\n', '\n# N switches, M bulbs\nN, M = map(int, input().split())\n\n# k_i switches connected to bulb i\n# s_{ij} is the number of the j-th switch connected to bulb i\n# p_i is the parity of the number of switches that are "on" among the switches connected to bulb i\nk = [0] * M\ns = [0] * M\np = [0] * M\nfor i in range(M):\n    k[i], *s[i] = map(int, input().split())\np = list(map(int, input().split()))\n\n# The number of combinations of "on" and "off" states of the switches that light all the bulbs\ncount = 0\n\n# Try all combinations of "on" and "off" states of the switches\nfor i in range(2**N):\n    # Check if all the bulbs are lighted\n    lighted = True\n    for j in range(M):\n        # Count the number of switches that are "on" among the switches connected to bulb j\n        on = 0\n        for l in range(k[j]):\n            if i & (1 << (s[j][l] - 1)):\n                on += 1\n        # Check if bulb j is lighted\n        if on % 2 != p[j]:\n            lighted = False\n            break\n    if lighted:\n        count += 1\n\nprint(count)\n', '\n\n# N switches, M bulbs\nN, M = map(int, input().split())\n\n# k_i switches connected to bulb i\n# s_{ij} is the number of the j-th switch connected to bulb i\n# p_i is the parity of the number of switches that are "on" among the switches connected to bulb i\nk = [0] * M\ns = [0] * M\np = [0] * M\nfor i in range(M):\n    k[i], *s[i] = map(int, input().split())  # Python 3.x only\np = list(map(int, input().split()))\n\n# The number of combinations of "on" and "off" states of the switches that light all the bulbs\ncount = 0\n\n# Try all combinations of "on" and "off" states of the switches\nfor i in range(2**N):\n    # Check if all the bulbs are lighted\n    lighted = True\n    for j in range(M):\n        # Count the number of switches that are "on" among the switches connected to bulb j\n        on = 0\n        for l in range(k[j]):\n            if i & (1 << (s[j][l] - 1)):\n                on += 1\n        # Check if bulb j is lighted\n        if on % 2 != p[j]:\n            lighted = False\n            break\n    if lighted:\n        count += 1\n\nprint(count)\n', '\n\n# N switches, M bulbs\nN, M = map(int, input().split())\n\n# k_i switches connected to bulb i\n# s_{ij} is the number of the j-th switch connected to bulb i\n# p_i is the parity of the number of switches that are "on" among the switches connected to bulb i\nk = [0] * M\ns = [[] for i in range(M)]\np = [0] * M\nfor i in range(M):\n    k[i], *s[i] = list(map(int, input().split()))\np = list(map(int, input().split()))\n\n# The number of combinations of "on" and "off" states of the switches that light all the bulbs\ncount = 0\n\n# Try all combinations of "on" and "off" states of the switches\nfor i in range(2**N):\n    # Check if all the bulbs are lighted\n    lighted = True\n    for j in range(M):\n        # Count the number of switches that are "on" among the switches connected to bulb j\n        on = 0\n        for l in range(k[j]):\n            if i & (1 << (s[j][l] - 1)):\n                on += 1\n        # Check if bulb j is lighted\n        if on % 2 != p[j]:\n            lighted = False\n            break\n    if lighted:\n        count += 1\n\nprint(count)\n']
2022-04-20 04:06:41.447632 size on output set 4
