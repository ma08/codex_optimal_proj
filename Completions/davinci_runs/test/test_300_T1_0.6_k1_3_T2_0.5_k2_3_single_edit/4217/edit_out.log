2022-04-18 09:25:30.116148 num operations 1
2022-04-18 09:25:30.116212 size on input set 1
2022-04-18 09:25:35.362188 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport math\n\n\ndef main():\n    a, b = map(int, sys.stdin.readline().split())\n    print(math.ceil(math.sqrt(b)-math.sqrt(a)))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import collections\n\nimport sys\n\ndef main():\n    N, M = map(int, input().split())\n    dic = collections.defaultdict(int)\n    for i in range(N):\n        for j in map(int, sys.stdin.readline().split()[1:]):\n            dic[j] += 1\n    print(sum([1 for e in dic.values() if e == N]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "import sys\n\ndef main():\n    N, M = map(int, input().split())\n    dic = dict.fromkeys(range(1, M + 1), 0)\n    for i in range(N):\n        for j in map(int, sys.stdin.readline().split()[1:]):\n            dic[j] += 1\n    print(sum([1 for e in dic.values() if e == N]))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650273930,
  "object": "edit"
}
2022-04-18 09:25:35.362383 fix syntax errors 3 ["\nimport sys\nimport math\n\n\ndef main():\n    a, b = map(int, sys.stdin.readline().split())\n    print(math.ceil(math.sqrt(b)-math.sqrt(a)))\n\n\nif __name__ == '__main__':\n    main()\n", "import collections\n\nimport sys\n\ndef main():\n    N, M = map(int, input().split())\n    dic = collections.defaultdict(int)\n    for i in range(N):\n        for j in map(int, sys.stdin.readline().split()[1:]):\n            dic[j] += 1\n    print(sum([1 for e in dic.values() if e == N]))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    N, M = map(int, input().split())\n    dic = dict.fromkeys(range(1, M + 1), 0)\n    for i in range(N):\n        for j in map(int, sys.stdin.readline().split()[1:]):\n            dic[j] += 1\n    print(sum([1 for e in dic.values() if e == N]))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-18 09:25:35.362422 size on output set 3
2022-04-18 09:25:35.362432 num operations 1
2022-04-18 09:25:35.362437 size on input set 1
2022-04-18 09:25:37.580722 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Get input\nN, M = map(int, input().split())\n\n# Init\nfood_list = [[] for _ in range(N)]\nfor i in range(N):\n    K = int(input().split()[0])\n    food_list[i] = list(map(int, input().split()))\n\n# Main\nanswer = 0\nfor i in range(1, M+1):\n    if all(i in food for food in food_list):\n        answer += 1\nprint(answer)\n"
    },
    {
      "index": 1,
      "text": "\n# Get input\nN, M = map(int, input().split())\n\n# Init\nfood_list = [[] for _ in range(N)]\nfor i in range(N):\n    K = int(input().split()[0])\n    food_list[i] = list(map(int, input().split()))\n\n# Main\nanswer = 0\nfor i in range(1, M+1):\n    if all(i in food for food in food_list):\n        answer += 1\nprint(answer)\n"
    },
    {
      "index": 2,
      "text": "# -*- coding: utf-8 -*-\n\n# Get input\nN, M = map(int, input().split())\n\n# Init\nfood_list = [[] for _ in range(N)]\nfor i in range(N):\n    K = int(input().split()[0])\n    food_list[i] = list(map(int, input().split()))\n\n# Main\nanswer = 0\nfor i in range(1, M+1):\n    if all(i in food for food in food_list):\n        answer += 1\nprint(answer)\n"
    }
  ],
  "created": 1650273935,
  "object": "edit"
}
2022-04-18 09:25:37.580921 fix syntax errors 3 ['\n# Get input\nN, M = map(int, input().split())\n\n# Init\nfood_list = [[] for _ in range(N)]\nfor i in range(N):\n    K = int(input().split()[0])\n    food_list[i] = list(map(int, input().split()))\n\n# Main\nanswer = 0\nfor i in range(1, M+1):\n    if all(i in food for food in food_list):\n        answer += 1\nprint(answer)\n', '\n# Get input\nN, M = map(int, input().split())\n\n# Init\nfood_list = [[] for _ in range(N)]\nfor i in range(N):\n    K = int(input().split()[0])\n    food_list[i] = list(map(int, input().split()))\n\n# Main\nanswer = 0\nfor i in range(1, M+1):\n    if all(i in food for food in food_list):\n        answer += 1\nprint(answer)\n', '# -*- coding: utf-8 -*-\n\n# Get input\nN, M = map(int, input().split())\n\n# Init\nfood_list = [[] for _ in range(N)]\nfor i in range(N):\n    K = int(input().split()[0])\n    food_list[i] = list(map(int, input().split()))\n\n# Main\nanswer = 0\nfor i in range(1, M+1):\n    if all(i in food for food in food_list):\n        answer += 1\nprint(answer)\n']
2022-04-18 09:25:37.580950 size on output set 2
2022-04-18 09:25:37.580960 num operations 1
2022-04-18 09:25:37.580965 size on input set 1
2022-04-18 09:25:43.604313 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#\n# I think this is a good example of how to use bit operations\n#\n\nN, M = [int(n) for n in input().split()]\n\nlike_foods = [0] * N\nfor i in range(N):\n    like_foods[i] = 0\n    _, *foods = [int(n) for n in input().split()]\n    for food in foods:\n        like_foods[i] |= (1 << (food - 1))\n\n# Now it's just a simple loop\ncount = 0\nfor i in range(1, M + 1):\n    like_count = 0\n    for j in range(N):\n        if like_foods[j] & (1 << (i - 1)) > 0:\n            like_count += 1\n    if like_count == N:\n        count += 1\n\nprint(count)\n\n\n#\n# I think this is a good example of how to use bit operations\n#\n\nN, M = [int(n) for n in input().split()]\n\nlike_foods = [0] * N\nfor i in range(N):\n    like_foods[i] = 0\n    _, *foods = [int(n) for n in input().split()]\n    for food in foods:\n        like_foods[i] |= (1 << (food - 1))\n\n# Now it's just a simple loop\ncount = 0\nfor i in range(1, M + 1):\n    like_count = 0\n    for j in range(N):\n        if like_foods[j] & (1 << (i - 1)) > 0:\n            like_count += 1\n    if like_count == N:\n        count += 1\n\nprint(count)\n"
    },
    {
      "index": 1,
      "text": "\n\n#\n# I think this is a good example of how to use bit operations\n#\n\nN, M = [int(n) for n in input().split()]\n\nlike_foods = []\nfor i in range(N):\n    like_foods.append(0)\n    _, *foods = [int(n) for n in input().split()]\n    for food in foods:\n        like_foods[i] |= (1 << (food - 1))\n\n# Now it's just a simple loop\ncount = 0\nfor i in range(1, M + 1):\n    like_count = 0\n    for j in range(N):\n        if like_foods[j] & (1 << (i - 1)) > 0:\n            like_count += 1\n    if like_count == N:\n        count += 1\n\nprint(count)\n"
    },
    {
      "index": 2,
      "text": "\n# I think this is a good example of how to use bit operations\n\nN, M = [int(n) for n in input().split()]\n\nlike_foods = [0] * N\nfor i in range(N):\n    like_foods[i] = 0\n    _, *foods = [int(n) for n in input().split()]\n    for food in foods:\n        like_foods[i] |= (1 << (food - 1))\n\ncount = 0\nfor i in range(M):\n    like_count = 0\n    for j in range(N):\n        if like_foods[j] & (1 << i) > 0:\n            like_count += 1\n    if like_count == N:\n        count += 1\n\nprint(count)\n"
    }
  ],
  "created": 1650273937,
  "object": "edit"
}
2022-04-18 09:25:43.604485 fix syntax errors 3 ["#\n# I think this is a good example of how to use bit operations\n#\n\nN, M = [int(n) for n in input().split()]\n\nlike_foods = [0] * N\nfor i in range(N):\n    like_foods[i] = 0\n    _, *foods = [int(n) for n in input().split()]\n    for food in foods:\n        like_foods[i] |= (1 << (food - 1))\n\n# Now it's just a simple loop\ncount = 0\nfor i in range(1, M + 1):\n    like_count = 0\n    for j in range(N):\n        if like_foods[j] & (1 << (i - 1)) > 0:\n            like_count += 1\n    if like_count == N:\n        count += 1\n\nprint(count)\n\n\n#\n# I think this is a good example of how to use bit operations\n#\n\nN, M = [int(n) for n in input().split()]\n\nlike_foods = [0] * N\nfor i in range(N):\n    like_foods[i] = 0\n    _, *foods = [int(n) for n in input().split()]\n    for food in foods:\n        like_foods[i] |= (1 << (food - 1))\n\n# Now it's just a simple loop\ncount = 0\nfor i in range(1, M + 1):\n    like_count = 0\n    for j in range(N):\n        if like_foods[j] & (1 << (i - 1)) > 0:\n            like_count += 1\n    if like_count == N:\n        count += 1\n\nprint(count)\n", "\n\n#\n# I think this is a good example of how to use bit operations\n#\n\nN, M = [int(n) for n in input().split()]\n\nlike_foods = []\nfor i in range(N):\n    like_foods.append(0)\n    _, *foods = [int(n) for n in input().split()]\n    for food in foods:\n        like_foods[i] |= (1 << (food - 1))\n\n# Now it's just a simple loop\ncount = 0\nfor i in range(1, M + 1):\n    like_count = 0\n    for j in range(N):\n        if like_foods[j] & (1 << (i - 1)) > 0:\n            like_count += 1\n    if like_count == N:\n        count += 1\n\nprint(count)\n", '\n# I think this is a good example of how to use bit operations\n\nN, M = [int(n) for n in input().split()]\n\nlike_foods = [0] * N\nfor i in range(N):\n    like_foods[i] = 0\n    _, *foods = [int(n) for n in input().split()]\n    for food in foods:\n        like_foods[i] |= (1 << (food - 1))\n\ncount = 0\nfor i in range(M):\n    like_count = 0\n    for j in range(N):\n        if like_foods[j] & (1 << i) > 0:\n            like_count += 1\n    if like_count == N:\n        count += 1\n\nprint(count)\n']
2022-04-18 09:25:43.604597 size on output set 3
