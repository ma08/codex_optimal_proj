2022-04-18 09:33:31.726151 num operations 1
2022-04-18 09:33:31.726174 size on input set 1
2022-04-18 09:33:34.433029 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# get input\ns = input()\nt = input()\n\n# get length of both strings\nsl = len(s)\ntl = len(t)\n\n# initialize count\ncount = 0\n\n# loop through t and check if s has it\nfor i in range(0, tl):\n    if s[i] != t[i]:\n        count += 1\n\n# print out result\nprint(count)\n"
    },
    {
      "index": 1,
      "text": "\n# get input\ns = input()\nt = input()\n\n# get length of both strings\nsl = len(s)\ntl = len(t)\n\n# initialize count\ncount = 0\n\n# loop through t and check if s has it\nfor i in range(0, sl):\n    if s[i] != t[i]:\n        count += 1\n\n# print out result\nprint(count)\n"
    },
    {
      "index": 2,
      "text": "\n# get input\ns = raw_input()\nt = raw_input()\n\n# get length of both strings\nsl = len(s)\ntl = len(t)\n\n# initialize count\ncount = 0\n\n# loop through t and check if s has it\nfor i in range(0, tl):\n    if s[i] != t[i]:\n        count += 1\n\n# print out result\nprint(count)\n"
    }
  ],
  "created": 1650274411,
  "object": "edit"
}
2022-04-18 09:33:34.433287 fix syntax errors 3 ['\n# get input\ns = input()\nt = input()\n\n# get length of both strings\nsl = len(s)\ntl = len(t)\n\n# initialize count\ncount = 0\n\n# loop through t and check if s has it\nfor i in range(0, tl):\n    if s[i] != t[i]:\n        count += 1\n\n# print out result\nprint(count)\n', '\n# get input\ns = input()\nt = input()\n\n# get length of both strings\nsl = len(s)\ntl = len(t)\n\n# initialize count\ncount = 0\n\n# loop through t and check if s has it\nfor i in range(0, sl):\n    if s[i] != t[i]:\n        count += 1\n\n# print out result\nprint(count)\n', '\n# get input\ns = raw_input()\nt = raw_input()\n\n# get length of both strings\nsl = len(s)\ntl = len(t)\n\n# initialize count\ncount = 0\n\n# loop through t and check if s has it\nfor i in range(0, tl):\n    if s[i] != t[i]:\n        count += 1\n\n# print out result\nprint(count)\n']
2022-04-18 09:33:34.433357 size on output set 3
2022-04-18 09:33:34.433391 num operations 1
2022-04-18 09:33:34.433401 size on input set 1
2022-04-18 09:33:39.913745 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ns = input()\nt = input()\n\ndef main(s, t):\n    count = 0\n\n    for i in range(len(s)):\n        if s[i:i+len(t)] == t:\n            return count\n        count += 1\n\nprint(main(s, t))\n"
    },
    {
      "index": 1,
      "text": "s = input()\nt = input()\n\ndef main(s, t):\n    count = 0\n\n    for i in range(len(s)):\n        if s[i:i+len(t)] == t:\n            return count\n        else:\n            count += 1\n\nprint(main(s, t))\n"
    },
    {
      "index": 2,
      "text": "\ns = input()\nt = input()\n\ndef main(s, t):\n    count = 0\n\n    for i in range(len(s)):\n        if s[i:i + len(t)] == t:\n            return count\n        else:\n            count += 1\n\nprint(main(s, t))\n"
    }
  ],
  "created": 1650274414,
  "object": "edit"
}
2022-04-18 09:33:39.914034 fix syntax errors 3 ['\n\ns = input()\nt = input()\n\ndef main(s, t):\n    count = 0\n\n    for i in range(len(s)):\n        if s[i:i+len(t)] == t:\n            return count\n        count += 1\n\nprint(main(s, t))\n', 's = input()\nt = input()\n\ndef main(s, t):\n    count = 0\n\n    for i in range(len(s)):\n        if s[i:i+len(t)] == t:\n            return count\n        else:\n            count += 1\n\nprint(main(s, t))\n', '\ns = input()\nt = input()\n\ndef main(s, t):\n    count = 0\n\n    for i in range(len(s)):\n        if s[i:i + len(t)] == t:\n            return count\n        else:\n            count += 1\n\nprint(main(s, t))\n']
2022-04-18 09:33:39.914086 size on output set 3
2022-04-18 09:33:39.914120 num operations 1
2022-04-18 09:33:39.914130 size on input set 1
2022-04-18 09:33:44.163890 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Get input\nS = input()\nT = input()\n\n# Set up variables.\nslen = len(S)\ntlen = len(T)\n\n# Initialize array to store the minimum number of changes needed.\nchanges = [[0 for i in range(slen + 1)] for j in range(tlen + 1)]\n\n# Populate the first row.\nfor i in range(1, slen + 1):\n    changes[0][i] = i\n\n# Populate the first column.\nfor j in range(1, tlen + 1):\n    changes[j][0] = j\n\n# Calculate the rest of the matrix.\nfor j in range(1, tlen + 1):\n    for i in range(1, slen + 1):\n        if S[i-1] == T[j-1]:\n            changes[j][i] = changes[j-1][i-1]\n        else:\n            changes[j][i] = min(changes[j-1][i], changes[j][i-1], changes[j-1][i-1]) + 1\n\nprint(changes[tlen][slen])\n"
    },
    {
      "index": 1,
      "text": "\nfrom sys import stdin\nfrom copy import deepcopy\n# Get input\nS = input()\nT = input()\n\n# Set up variables\nslen = len(S)\ntlen = len(T)\n\n# Initialize array to store the minimum number of changes needed\nchanges = deepcopy([[0 for i in range(slen + 1)] for j in range(tlen + 1)])\n\n# Populate the first row\nfor i in range(1, slen + 1):\n    changes[0][i] = i\n\n# Populate the first column\nfor j in range(1, tlen + 1):\n    changes[j][0] = j\n\n# Calculate the rest of the matrix\nfor j in range(1, tlen + 1):\n    for i in range(1, slen + 1):\n        if S[i-1] == T[j-1]:\n            changes[j][i] = changes[j-1][i-1]\n        else:\n            changes[j][i] = min(changes[j-1][i], changes[j][i-1], changes[j-1][i-1]) + 1\n\nprint(changes[tlen][slen])\n"
    },
    {
      "index": 2,
      "text": "\n# Input\n# Get input\nS = input()\nT = input()\n\n# Set up variables\nslen = len(S)\ntlen = len(T)\n\n# Initialize array to store the minimum number of changes needed\nchanges = [[0 for i in range(slen + 1)] for j in range(tlen + 1)]\n\n# Populate the first row\nfor i in range(1, slen + 1):\n    changes[0][i] = i\n\n# Populate the first column\nfor j in range(1, tlen + 1):\n    changes[j][0] = j\n\n# Calculate the rest of the matrix\nfor j in range(1, tlen + 1):\n    for i in range(1, slen + 1):\n        if S[i-1] == T[j-1]:\n            changes[j][i] = changes[j-1][i-1]\n        else:\n            changes[j][i] = min(changes[j-1][i], changes[j][i-1], changes[j-1][i-1]) + 1\n\nprint(changes[tlen][slen])\n"
    }
  ],
  "created": 1650274419,
  "object": "edit"
}
2022-04-18 09:33:44.164218 fix syntax errors 3 ['\n# Get input\nS = input()\nT = input()\n\n# Set up variables.\nslen = len(S)\ntlen = len(T)\n\n# Initialize array to store the minimum number of changes needed.\nchanges = [[0 for i in range(slen + 1)] for j in range(tlen + 1)]\n\n# Populate the first row.\nfor i in range(1, slen + 1):\n    changes[0][i] = i\n\n# Populate the first column.\nfor j in range(1, tlen + 1):\n    changes[j][0] = j\n\n# Calculate the rest of the matrix.\nfor j in range(1, tlen + 1):\n    for i in range(1, slen + 1):\n        if S[i-1] == T[j-1]:\n            changes[j][i] = changes[j-1][i-1]\n        else:\n            changes[j][i] = min(changes[j-1][i], changes[j][i-1], changes[j-1][i-1]) + 1\n\nprint(changes[tlen][slen])\n', '\nfrom sys import stdin\nfrom copy import deepcopy\n# Get input\nS = input()\nT = input()\n\n# Set up variables\nslen = len(S)\ntlen = len(T)\n\n# Initialize array to store the minimum number of changes needed\nchanges = deepcopy([[0 for i in range(slen + 1)] for j in range(tlen + 1)])\n\n# Populate the first row\nfor i in range(1, slen + 1):\n    changes[0][i] = i\n\n# Populate the first column\nfor j in range(1, tlen + 1):\n    changes[j][0] = j\n\n# Calculate the rest of the matrix\nfor j in range(1, tlen + 1):\n    for i in range(1, slen + 1):\n        if S[i-1] == T[j-1]:\n            changes[j][i] = changes[j-1][i-1]\n        else:\n            changes[j][i] = min(changes[j-1][i], changes[j][i-1], changes[j-1][i-1]) + 1\n\nprint(changes[tlen][slen])\n', '\n# Input\n# Get input\nS = input()\nT = input()\n\n# Set up variables\nslen = len(S)\ntlen = len(T)\n\n# Initialize array to store the minimum number of changes needed\nchanges = [[0 for i in range(slen + 1)] for j in range(tlen + 1)]\n\n# Populate the first row\nfor i in range(1, slen + 1):\n    changes[0][i] = i\n\n# Populate the first column\nfor j in range(1, tlen + 1):\n    changes[j][0] = j\n\n# Calculate the rest of the matrix\nfor j in range(1, tlen + 1):\n    for i in range(1, slen + 1):\n        if S[i-1] == T[j-1]:\n            changes[j][i] = changes[j-1][i-1]\n        else:\n            changes[j][i] = min(changes[j-1][i], changes[j][i-1], changes[j-1][i-1]) + 1\n\nprint(changes[tlen][slen])\n']
2022-04-18 09:33:44.164395 size on output set 3
