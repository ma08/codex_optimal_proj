2022-04-18 09:13:54.197096 num operations 1
2022-04-18 09:13:54.197117 size on input set 1
2022-04-18 09:14:20.355719 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n\n    # The first hero can defeat at most B_1 monsters attacking the first town, so he will defeat B_1 monsters attacking the first town. The second hero can defeat at most B_1 + B_2 monsters attacking the first and second town, so he will defeat B_2 monsters attacking the second town. The i-th hero can defeat at most B_1 + B_2 + ... + B_{i-1} + B_i monsters attacking the first, second, ..., (i-1)-th, and i-th towns, so he will defeat B_{i-1} monsters attacking the (i-1)-th town. The last hero can defeat at most B_1 + B_2 + ... + B_{N-1} + B_N monsters attacking the first, second, ..., (N-1)-th, and N-th towns, so he will defeat B_{N-1} monsters attacking the (N-1)-th town. The total number of monsters defeated is B_1 + B_2 + ... + B_{N-1}.\n    # However, some monsters may have already been defeated.\n    # For example, if B_1 + B_2 < A_1 + A_2, the third hero must defeat at least A_1 + A_2 - (B_1 + B_2) monsters attacking the third town. In such case, the total number of monsters defeated is B_1 + B_2 + ... + B_{N-1} + (A_1 + A_2 - (B_1 + B_2)) + (A_2 + A_3 - (B_2 + B_3)) + ... + (A_{N} + A_{N+1} - (B_{N-1} + B_N)). This can be simplified as B_1 + B_2 + ... + B_{N-1} + A_1 + A_2 + ... + A_{N+1} - (B_1 + B_2 + ... + B_{N-1} + B_1 + B_2 + ... + B_{N-1} + B_2 + B_3 + ... + B_{N-1} + ... + B_{N-2} + B_{N-1} + B_N) This can be simplified as B_1 + B_2 + ... + B_{N-1} + A_1 + A_2 + ... + A_{N+1} - (N * B_1 + (N-1) * B_2 + ... + 2 * B_{N-1} + B_N)\n\n    total = 0\n    for i in range(N):\n        total += B[i]\n    for i in range(N + 1):\n        total += A[i]\n    for i in range(N):\n        total -= (N-i) * B[i]\n    print(total)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n\n    # The first hero can defeat at most B_1 monsters attacking the first town, so he will defeat B_1 monsters attacking the first town.\n    # The second hero can defeat at most B_1 + B_2 monsters attacking the first and second town, so he will defeat B_2 monsters attacking the second town.\n    # The i-th hero can defeat at most B_1 + B_2 + ... + B_{i-1} + B_i monsters attacking the first, second, ..., (i-1)-th, and i-th towns, so he will defeat B_{i} monsters attacking the i-th town.\n    # The last hero can defeat at most B_1 + B_2 + ... + B_{N-1} + B_N monsters attacking the first, second, ..., (N-1)-th, and N-th towns, so he will defeat B_{N} monsters attacking the N-th town.\n    # The total number of monsters defeated is B_1 + B_2 + ... + B_{N-1}.\n    # However, some monsters may have already been defeated.\n    # For example, if B_1 + B_2 < A_1 + A_2, the third hero must defeat at least A_1 + A_2 - (B_1 + B_2) monsters attacking the third town.\n    # In such case, the total number of monsters defeated is B_1 + B_2 + ... + B_{N} + (A_1 + A_2 - (B_1 + B_2)) + (A_2 + A_3 - (B_2 + B_3)) + ... + (A_{N} + A_{N+1} - (B_{N} + B_{N+1})).\n    # This can be simplified as B_1 + B_2 + ... + B_{N} + A_1 + A_2 + ... + A_{N+1} - (B_1 + B_2 + ... + B_{N} + B_1 + B_2 + ... + B_{N} + B_2 + B_3 + ... + B_{N} + ... + B_{N-1} + B_{N} + B_{N+1})\n    # This can be simplified as B_1 + B_2 + ... + B_{N} + A_1 + A_2 + ... + A_{N+1} - (N * B_1 + (N-1) * B_2 + ... + 2 * B_{N-1} + B_N + B_{N+1})\n\n    total = 0\n    for i in range(N):\n        total += B[i]\n    for i in range(N + 1):\n        total += A[i]\n    for i in range(N):\n        total -= (N-i) * B[i]\n    print(total)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n\n    # The first hero can defeat at most B_1 monsters attacking the first town, so he will defeat B_1 monsters attacking the first town.\n    # The second hero can defeat at most B_1 + B_2 monsters attacking the first and second town, so he will defeat B_2 monsters attacking the second town\n    # The i-th hero can defeat at most B_1 + B_2 + ... + B_{i-1} + B_i monsters attacking the first, second, ..., (i-1)-th, and i-th towns, so he will defeat B_{i-1} monsters attacking the (i-1)-th town\n    # The last hero can defeat at most B_1 + B_2 + ... + B_{N-1} + B_N monsters attacking the first, second, ..., (N-1)-th, and N-th towns, so he will defeat B_{N-1} monsters attacking the (N-1)-th town\n    # The total number of monsters defeated is B_1 + B_2 + ... + B_{N-1}.\n    # However, some monsters may have already been defeated.\n    # For example, if B_1 + B_2 < A_1 + A_2, the third hero must defeat at least A_1 + A_2 - (B_1 + B_2) monsters attacking the third town\n    # In such case, the total number of monsters defeated is B_1 + B_2 + ... + B_{N-1} + (A_1 + A_2 - (B_1 + B_2)) + (A_2 + A_3 - (B_2 + B_3)) + ... + (A_{N} + A_{N+1} - (B_{N-1} + B_N)).\n    # This can be simplified as B_1 + B_2 + ... + B_{N-1} + A_1 + A_2 + ... + A_{N+1} - (B_1 + B_2 + ... + B_{N-1} + B_1 + B_2 + ... + B_{N-1} + B_2 + B_3 + ... + B_{N-1} + ... + B_{N-2} + B_{N-1} + B_N)\n    # This can be simplified as B_1 + B_2 + ... + B_{N-1} + A_1 + A_2 + ... + A_{N+1} - (N * B_1 + (N-1) * B_2 + ... + 2 * B_{N-1} + B_N)\n\n    total = 0\n    for i in range(N):\n        total += B[i]\n    for i in range(N + 1):\n        total += A[i]\n    for i in range(N):\n        total -= (N-i) * B[i]\n    print(total)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650273234,
  "object": "edit"
}
2022-04-18 09:14:20.356027 fix syntax errors 3 ['\n\nimport sys\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n\n    # The first hero can defeat at most B_1 monsters attacking the first town, so he will defeat B_1 monsters attacking the first town. The second hero can defeat at most B_1 + B_2 monsters attacking the first and second town, so he will defeat B_2 monsters attacking the second town. The i-th hero can defeat at most B_1 + B_2 + ... + B_{i-1} + B_i monsters attacking the first, second, ..., (i-1)-th, and i-th towns, so he will defeat B_{i-1} monsters attacking the (i-1)-th town. The last hero can defeat at most B_1 + B_2 + ... + B_{N-1} + B_N monsters attacking the first, second, ..., (N-1)-th, and N-th towns, so he will defeat B_{N-1} monsters attacking the (N-1)-th town. The total number of monsters defeated is B_1 + B_2 + ... + B_{N-1}.\n    # However, some monsters may have already been defeated.\n    # For example, if B_1 + B_2 < A_1 + A_2, the third hero must defeat at least A_1 + A_2 - (B_1 + B_2) monsters attacking the third town. In such case, the total number of monsters defeated is B_1 + B_2 + ... + B_{N-1} + (A_1 + A_2 - (B_1 + B_2)) + (A_2 + A_3 - (B_2 + B_3)) + ... + (A_{N} + A_{N+1} - (B_{N-1} + B_N)). This can be simplified as B_1 + B_2 + ... + B_{N-1} + A_1 + A_2 + ... + A_{N+1} - (B_1 + B_2 + ... + B_{N-1} + B_1 + B_2 + ... + B_{N-1} + B_2 + B_3 + ... + B_{N-1} + ... + B_{N-2} + B_{N-1} + B_N) This can be simplified as B_1 + B_2 + ... + B_{N-1} + A_1 + A_2 + ... + A_{N+1} - (N * B_1 + (N-1) * B_2 + ... + 2 * B_{N-1} + B_N)\n\n    total = 0\n    for i in range(N):\n        total += B[i]\n    for i in range(N + 1):\n        total += A[i]\n    for i in range(N):\n        total -= (N-i) * B[i]\n    print(total)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n\n    # The first hero can defeat at most B_1 monsters attacking the first town, so he will defeat B_1 monsters attacking the first town.\n    # The second hero can defeat at most B_1 + B_2 monsters attacking the first and second town, so he will defeat B_2 monsters attacking the second town.\n    # The i-th hero can defeat at most B_1 + B_2 + ... + B_{i-1} + B_i monsters attacking the first, second, ..., (i-1)-th, and i-th towns, so he will defeat B_{i} monsters attacking the i-th town.\n    # The last hero can defeat at most B_1 + B_2 + ... + B_{N-1} + B_N monsters attacking the first, second, ..., (N-1)-th, and N-th towns, so he will defeat B_{N} monsters attacking the N-th town.\n    # The total number of monsters defeated is B_1 + B_2 + ... + B_{N-1}.\n    # However, some monsters may have already been defeated.\n    # For example, if B_1 + B_2 < A_1 + A_2, the third hero must defeat at least A_1 + A_2 - (B_1 + B_2) monsters attacking the third town.\n    # In such case, the total number of monsters defeated is B_1 + B_2 + ... + B_{N} + (A_1 + A_2 - (B_1 + B_2)) + (A_2 + A_3 - (B_2 + B_3)) + ... + (A_{N} + A_{N+1} - (B_{N} + B_{N+1})).\n    # This can be simplified as B_1 + B_2 + ... + B_{N} + A_1 + A_2 + ... + A_{N+1} - (B_1 + B_2 + ... + B_{N} + B_1 + B_2 + ... + B_{N} + B_2 + B_3 + ... + B_{N} + ... + B_{N-1} + B_{N} + B_{N+1})\n    # This can be simplified as B_1 + B_2 + ... + B_{N} + A_1 + A_2 + ... + A_{N+1} - (N * B_1 + (N-1) * B_2 + ... + 2 * B_{N-1} + B_N + B_{N+1})\n\n    total = 0\n    for i in range(N):\n        total += B[i]\n    for i in range(N + 1):\n        total += A[i]\n    for i in range(N):\n        total -= (N-i) * B[i]\n    print(total)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n\n    # The first hero can defeat at most B_1 monsters attacking the first town, so he will defeat B_1 monsters attacking the first town.\n    # The second hero can defeat at most B_1 + B_2 monsters attacking the first and second town, so he will defeat B_2 monsters attacking the second town\n    # The i-th hero can defeat at most B_1 + B_2 + ... + B_{i-1} + B_i monsters attacking the first, second, ..., (i-1)-th, and i-th towns, so he will defeat B_{i-1} monsters attacking the (i-1)-th town\n    # The last hero can defeat at most B_1 + B_2 + ... + B_{N-1} + B_N monsters attacking the first, second, ..., (N-1)-th, and N-th towns, so he will defeat B_{N-1} monsters attacking the (N-1)-th town\n    # The total number of monsters defeated is B_1 + B_2 + ... + B_{N-1}.\n    # However, some monsters may have already been defeated.\n    # For example, if B_1 + B_2 < A_1 + A_2, the third hero must defeat at least A_1 + A_2 - (B_1 + B_2) monsters attacking the third town\n    # In such case, the total number of monsters defeated is B_1 + B_2 + ... + B_{N-1} + (A_1 + A_2 - (B_1 + B_2)) + (A_2 + A_3 - (B_2 + B_3)) + ... + (A_{N} + A_{N+1} - (B_{N-1} + B_N)).\n    # This can be simplified as B_1 + B_2 + ... + B_{N-1} + A_1 + A_2 + ... + A_{N+1} - (B_1 + B_2 + ... + B_{N-1} + B_1 + B_2 + ... + B_{N-1} + B_2 + B_3 + ... + B_{N-1} + ... + B_{N-2} + B_{N-1} + B_N)\n    # This can be simplified as B_1 + B_2 + ... + B_{N-1} + A_1 + A_2 + ... + A_{N+1} - (N * B_1 + (N-1) * B_2 + ... + 2 * B_{N-1} + B_N)\n\n    total = 0\n    for i in range(N):\n        total += B[i]\n    for i in range(N + 1):\n        total += A[i]\n    for i in range(N):\n        total -= (N-i) * B[i]\n    print(total)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-18 09:14:20.356244 size on output set 3
2022-04-18 09:14:20.356264 num operations 1
2022-04-18 09:14:20.356275 size on input set 1
2022-04-18 09:14:24.223501 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main(n, monsters, heroes):\n    monsters.sort(reverse=True)\n    heroes.sort(reverse=True)\n    total = 0\n\n    hero = 0\n    for monster in monsters:\n        if hero >= len(heroes):\n            break\n        if monster > heroes[hero]:\n            total += monster\n        else:\n            total += heroes[hero]\n            hero += 1\n\n    return total\n\nif __name__ == '__main__':\n    n = int(input())\n    monsters = list(map(int, input().split()))\n    heroes = list(map(int, input().split()))\n    print(main(n, monsters, heroes))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main(monsters, heroes):\n    monsters.sort(reverse=True)\n    heroes.sort(reverse=True)\n    total = 0\n\n    hero = 0\n    for monster in monsters:\n        if hero >= len(heroes):\n            break\n        if monster > heroes[hero]:\n            total += monster\n        else:\n            total += heroes[hero]\n            hero += 1\n\n    return total\n\nif __name__ == '__main__':\n    n = int(input())\n    monsters = list(map(int, input().split()))\n    heroes = list(map(int, input().split()))\n    print(main(n, monsters, heroes))\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main(monsters, heroes):\n    monsters.sort(reverse=True)\n    heroes.sort(reverse=True)\n    total = 0\n\n    hero = 0\n    for monster in monsters:\n        if hero >= len(heroes):\n            break\n        if monster > heroes[hero]:\n            total += monster\n        else:\n            total += heroes[hero]\n            hero += 1\n\n    return total\n\nif __name__ == '__main__':\n    n = int(input())\n    monsters = list(map(int, input().split()))\n    heroes = list(map(int, input().split()))\n    print(main(monsters, heroes))\n"
    }
  ],
  "created": 1650273260,
  "object": "edit"
}
2022-04-18 09:14:24.223819 fix syntax errors 3 ["\ndef main(n, monsters, heroes):\n    monsters.sort(reverse=True)\n    heroes.sort(reverse=True)\n    total = 0\n\n    hero = 0\n    for monster in monsters:\n        if hero >= len(heroes):\n            break\n        if monster > heroes[hero]:\n            total += monster\n        else:\n            total += heroes[hero]\n            hero += 1\n\n    return total\n\nif __name__ == '__main__':\n    n = int(input())\n    monsters = list(map(int, input().split()))\n    heroes = list(map(int, input().split()))\n    print(main(n, monsters, heroes))\n", "\n\ndef main(monsters, heroes):\n    monsters.sort(reverse=True)\n    heroes.sort(reverse=True)\n    total = 0\n\n    hero = 0\n    for monster in monsters:\n        if hero >= len(heroes):\n            break\n        if monster > heroes[hero]:\n            total += monster\n        else:\n            total += heroes[hero]\n            hero += 1\n\n    return total\n\nif __name__ == '__main__':\n    n = int(input())\n    monsters = list(map(int, input().split()))\n    heroes = list(map(int, input().split()))\n    print(main(n, monsters, heroes))\n", "\n\ndef main(monsters, heroes):\n    monsters.sort(reverse=True)\n    heroes.sort(reverse=True)\n    total = 0\n\n    hero = 0\n    for monster in monsters:\n        if hero >= len(heroes):\n            break\n        if monster > heroes[hero]:\n            total += monster\n        else:\n            total += heroes[hero]\n            hero += 1\n\n    return total\n\nif __name__ == '__main__':\n    n = int(input())\n    monsters = list(map(int, input().split()))\n    heroes = list(map(int, input().split()))\n    print(main(monsters, heroes))\n"]
2022-04-18 09:14:24.223893 size on output set 3
2022-04-18 09:14:24.223920 num operations 1
2022-04-18 09:14:24.223934 size on input set 1
2022-04-18 09:14:27.763907 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\n\nattack = list(map(int, input().split()))\ndefend = list(map(int, input().split()))\n\nattack.sort(reverse=True)\ndefend.sort(reverse=True)\n\nsum = 0\n\nfor i in range(n):\n    if attack[i] > defend[i]:\n        sum = sum + defend[i]\n    else:\n        sum = sum + attack[i]\n\nprint(sum)\n"
    },
    {
      "index": 1,
      "text": "n = int(input())\n\nattack = list(map(int, input().split()))\ndefend = list(map(int, input().split()))\n\nattack.sort(reverse=True)\ndefend.sort(reverse=True)\n\nsum = 0\n\nfor i in range(n):\n    if attack[i] > defend[i]:\n        sum = sum + defend[i]\n    else:\n        sum = sum + attack[i]\n\nprint(sum)\n"
    },
    {
      "index": 2,
      "text": "\nn = int(input())\n\nattack = list(map(int, input().split()))\ndefend = list(map(int, input().split()))\n\nattack.sort(reverse=True)\ndefend.sort(reverse=True)\n\nsum = 0\n\nfor i in range(n):\n    if attack[i] > defend[i]:\n        sum = sum + defend[i]\n    else:\n        sum = sum + attack[i]\n\nprint(sum)\n"
    }
  ],
  "created": 1650273264,
  "object": "edit"
}
2022-04-18 09:14:27.764212 fix syntax errors 3 ['\n\nn = int(input())\n\nattack = list(map(int, input().split()))\ndefend = list(map(int, input().split()))\n\nattack.sort(reverse=True)\ndefend.sort(reverse=True)\n\nsum = 0\n\nfor i in range(n):\n    if attack[i] > defend[i]:\n        sum = sum + defend[i]\n    else:\n        sum = sum + attack[i]\n\nprint(sum)\n', 'n = int(input())\n\nattack = list(map(int, input().split()))\ndefend = list(map(int, input().split()))\n\nattack.sort(reverse=True)\ndefend.sort(reverse=True)\n\nsum = 0\n\nfor i in range(n):\n    if attack[i] > defend[i]:\n        sum = sum + defend[i]\n    else:\n        sum = sum + attack[i]\n\nprint(sum)\n', '\nn = int(input())\n\nattack = list(map(int, input().split()))\ndefend = list(map(int, input().split()))\n\nattack.sort(reverse=True)\ndefend.sort(reverse=True)\n\nsum = 0\n\nfor i in range(n):\n    if attack[i] > defend[i]:\n        sum = sum + defend[i]\n    else:\n        sum = sum + attack[i]\n\nprint(sum)\n']
2022-04-18 09:14:27.764255 size on output set 3
