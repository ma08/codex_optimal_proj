2022-04-18 09:42:57.804613 num operations 1
2022-04-18 09:42:57.804656 size on input set 1
2022-04-18 09:43:00.340527 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nn = int(input())\ns = input()\n\ncount = 0\n\nfor i in range(n):\n    if s[i:i+3] == 'ABC':\n        count += 1\n\nprint(count)\n"
    },
    {
      "index": 1,
      "text": "#\n\nn = int(input())\ns = input()\n\ncount = 0\n\nfor i in range(n):\n    if s[i:i+3] == 'ABC':\n        count += 1\n#\nprint(count)\n"
    },
    {
      "index": 2,
      "text": "\nn = int(input())\ns = input()\n\ncount = 0\n\nfor i in range(n):\n    if s[i:i+3] == 'ABC':\n        count += 1\n\nprint(count)\n"
    }
  ],
  "created": 1650274977,
  "object": "edit"
}
2022-04-18 09:43:00.340772 fix syntax errors 3 ["#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nn = int(input())\ns = input()\n\ncount = 0\n\nfor i in range(n):\n    if s[i:i+3] == 'ABC':\n        count += 1\n\nprint(count)\n", "#\n\nn = int(input())\ns = input()\n\ncount = 0\n\nfor i in range(n):\n    if s[i:i+3] == 'ABC':\n        count += 1\n#\nprint(count)\n", "\nn = int(input())\ns = input()\n\ncount = 0\n\nfor i in range(n):\n    if s[i:i+3] == 'ABC':\n        count += 1\n\nprint(count)\n"]
2022-04-18 09:43:00.340810 size on output set 3
2022-04-18 09:43:00.340828 num operations 1
2022-04-18 09:43:00.340838 size on input set 1
2022-04-18 09:43:04.470662 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n = int(input())\n    s = input()\n    a = 0\n    for i in range(n-2):\n        if s[i] == 'A' and s[i+1] == 'B' and s[i+2] == 'C':\n            a += 1\n    print(a)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    n = int(input())\n    s = input()\n    a = 0\n    for i in range(n - 2):\n        if s[i] == 'A' and s[i + 1] == 'B' and s[i + 2] == 'C':\n            a += 1\n\n    print(a)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(input())\n    s = input()\n    a = 0\n    for i in range(n-2):\n        if s[i] == 'A' and s[i+1] == 'B' and s[i+2] == 'C':\n            a += 1\n    print(a) \n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650274980,
  "object": "edit"
}
2022-04-18 09:43:04.470875 fix syntax errors 3 ["\nimport sys\n\ndef main():\n    n = int(input())\n    s = input()\n    a = 0\n    for i in range(n-2):\n        if s[i] == 'A' and s[i+1] == 'B' and s[i+2] == 'C':\n            a += 1\n    print(a)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n = int(input())\n    s = input()\n    a = 0\n    for i in range(n - 2):\n        if s[i] == 'A' and s[i + 1] == 'B' and s[i + 2] == 'C':\n            a += 1\n\n    print(a)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(input())\n    s = input()\n    a = 0\n    for i in range(n-2):\n        if s[i] == 'A' and s[i+1] == 'B' and s[i+2] == 'C':\n            a += 1\n    print(a) \n\nif __name__ == '__main__':\n    main()\n"]
2022-04-18 09:43:04.470931 size on output set 3
2022-04-18 09:43:04.470964 num operations 1
2022-04-18 09:43:04.470974 size on input set 1
2022-04-18 09:43:15.758514 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    # Get the number of characters in the string\n    n = int(sys.stdin.readline())\n\n    # Get the string\n    s = sys.stdin.readline()\n\n    # Initialize the number of contiguous subsequences equal to ABC\n    num_subsequences = 0\n\n    # For every character in the string\n    for i in range(n):\n        # If the character is not A, skip it\n        if s[i] != \"A\":\n            continue\n        # If the character is A and the following character is B, check the following character\n        if s[i+1] == \"B\":\n            # If the following character is B and the character after that is C, increment the number of subsequences\n            if s[i+2] == \"C\":\n                num_subsequences += 1\n\n    # Print the number of subsequences\n    print(num_subsequences)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\n# Get the number of strings\nn = int(input())\n\n# Get the strings\ns = [input() for _ in range(n)]\n\n# Initialize the number of strings equal to AC\nnum_strings = 0\n\n# For every string\nfor i in range(n):\n    # If the string doesn't contain AC, skip it\n    if \"AC\" not in s[i]:\n        continue \n    # If the string contains AC, increment the number of strings\n    num_strings += 1\n\n# Print the number of strings\nprint(num_strings)\n"
    },
    {
      "index": 2,
      "text": "\nprint(\"hello\")\n"
    }
  ],
  "created": 1650274984,
  "object": "edit"
}
2022-04-18 09:43:15.758731 fix syntax errors 3 ['\nimport sys\n\ndef main():\n    # Get the number of characters in the string\n    n = int(sys.stdin.readline())\n\n    # Get the string\n    s = sys.stdin.readline()\n\n    # Initialize the number of contiguous subsequences equal to ABC\n    num_subsequences = 0\n\n    # For every character in the string\n    for i in range(n):\n        # If the character is not A, skip it\n        if s[i] != "A":\n            continue\n        # If the character is A and the following character is B, check the following character\n        if s[i+1] == "B":\n            # If the following character is B and the character after that is C, increment the number of subsequences\n            if s[i+2] == "C":\n                num_subsequences += 1\n\n    # Print the number of subsequences\n    print(num_subsequences)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\n# Get the number of strings\nn = int(input())\n\n# Get the strings\ns = [input() for _ in range(n)]\n\n# Initialize the number of strings equal to AC\nnum_strings = 0\n\n# For every string\nfor i in range(n):\n    # If the string doesn\'t contain AC, skip it\n    if "AC" not in s[i]:\n        continue \n    # If the string contains AC, increment the number of strings\n    num_strings += 1\n\n# Print the number of strings\nprint(num_strings)\n', '\nprint("hello")\n']
2022-04-18 09:43:15.758779 size on output set 3
