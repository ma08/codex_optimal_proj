["\n", "\n\ndef solve(n, b, a, s, i=0, b_charge=0, a_charge=0, max_dist=0):\n    # initialize variables\n    while i < n:\n        # if there is no charge on the accumulator\n        # and the current segment is exposed to sunlight\n        # charge the accumulator\n        if a_charge < a and s[i] == 1:\n            a_charge += 1\n            i += 1\n        # if there is no charge on the battery\n        # and the current segment is not exposed to sunlight\n        # charge the battery\n        elif b_charge < b and s[i] == 0:\n            b_charge += 1\n            i += 1\n        # if there is charge on the accumulator\n        # and the current segment is not exposed to sunlight\n        # use the accumulator\n        elif a_charge > 0 and s[i] == 1:\n            a_charge -= 1\n            i += 1\n        # if there is charge on the battery\n        # and the current segment is exposed to sunlight\n        # use the battery\n        elif b_charge > 0 and s[i] == 0:\n            b_charge -= 1\n            i += 1\n        # the robot can't move forward\n        else:\n            # if the battery and accumulator are both full\n            # and no charge can be gained\n            if a_charge == a and b_charge == b and s[i] == 0:\n                break\n            # if the robot is exposed to sunlight\n            # and there is no charge on the accumulator\n            elif s[i] == 1 and a_charge == 0:\n                break\n            # if the robot is not exposed to sunlight\n            # and there is no charge on the battery\n            elif s[i] == 0 and b_charge == 0:\n                break\n        # increase the max distance\n        max_dist += 1\n    return max_dist, solve(n, b, a, s, i=i+1, b_charge=b_charge, a_charge=a_charge, max_dist=max_dist)\n\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\nprint(max(solve(n, b, a, s)))\n", "\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sun Sep  9 21:13:08 2018\n\n@author: zhanghuangzhao\n\"\"\"\n\nimport sys\n\ndef main():\n    n, b, a = map(int, input().split())\n    s = list(map(int, input().split()))\n    \n    max_segments = 0\n    cur_a = a\n    cur_b = b\n    for i in range(n):\n        if s[i] == 1:\n            if cur_b > 0:\n                cur_b -= 1\n                cur_a += 1\n                if cur_a > a:\n                    cur_a = a\n            else:\n                cur_a -= 1\n        else:\n            if cur_a > 0:\n                cur_a -= 1\n            else:\n                cur_b -= 1\n        if cur_a == 0 and cur_b == 0:\n            break\n        max_segments += 1\n    print(max_segments)\n    \nif __name__ == \"__main__\":\n    sys.exit(main())\n", "\n\nimport sys\n\ndef main():\n    n, b, a = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    s = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    b_left = b\n    a_left = a\n\n    max_segments = 0\n    i = 0\n    while i < n:\n        if b_left == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif a_left == 0:\n            if b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 1:\n            if a_left < a:\n                a_left += 1\n                b_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        i += 1\n    print(max_segments)\n\nmain()\n", "\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\n\nmax_segments = 0\ncur_a = a\ncur_b = b\nfor i in range(n):\n    if s[i] == 1:\n        if cur_b > 0:\n            cur_b -= 1\n            cur_a += 1\n            if cur_a > a:\n                cur_a = a\n        else:\n            cur_a -= 1\n    else:\n        if cur_a > 0:\n            cur_a -= 1\n        else:\n            cur_b -= 1\n    if cur_a == 0 and cur_b == 0: break\n    max_segments += 1\nprint(max_segments)\n", "\nimport sys\n\ndef main():\n    n, b, a = [int(i) for i in raw_input().strip().split()]\n    s = [int(i) for i in raw_input().strip().split()]\n    b_left = b - 1\n    a_left = a - 1\n\n    max_segments = 1\n    i = 0\n    while i < n:\n        if s[i] == 1:\n            if a_left < a:\n                a_left += 1\n                b_left -= 1\n                max_segments += 1\n            else:\n                if b_left > 0:\n                    b_left -= 1\n                    max_segments += 1\n                else:\n                    break\n        elif s[i] == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            else:\n                if b_left > 0:\n                    b_left -= 1\n                    max_segments += 1\n                else:\n                    break\n        i += 1\n    print(max_segments)\n\nmain()\n", "\ndef solve(n, b, a, s):\n    # initialize variables\n    i = 0\n    b_charge = b\n    a_charge = a\n    max_dist = 0\n    while i < n:\n        # if there is no charge on the accumulator\n        # and the current segment is exposed to sunlight\n        # charge the accumulator\n        if a_charge == 0 and s[i] == 1:\n            a_charge += 1\n            i += 1\n        # if there is no charge on the battery\n        # and the current segment is not exposed to sunlight\n        # charge the battery\n        elif b_charge == 0 and s[i] == 0:\n            b_charge += 1\n            i += 1\n        # if there is charge on the accumulator\n        # and the current segment is not exposed to sunlight\n        # use the accumulator\n        elif a_charge > 0 and s[i] == 0:\n            a_charge -= 1\n            i += 1\n        # if there is charge on the battery\n        # and the current segment is exposed to sunlight\n        # use the battery\n        elif b_charge > 0 and s[i] == 1:\n            b_charge -= 1\n            i += 1\n        # if the battery and accumulator are both full\n        # and no charge can be gained\n        # the robot can't move forward\n        else:\n            break\n        # increase the max distance\n        max_dist += 1\n    return max_dist\nn, b, a = map(int, input().split())\ns = list(map(int, input().split()))\nprint(solve(n, b, a, s))\n", "\nimport sys\n\ndef main():\n    n, b, a = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    s = [int(i) for i in sys.stdin.readline().strip().split(' ')]\n    b_left = b\n    a_left = a\n\n    max_segments = 0\n    i = 0\n    while i < n:\n        if b_left == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif a_left == 0:\n            if b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 1:\n            if a_left < a:\n                a_left += 1\n                b_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        elif s[i] == 0:\n            if a_left > 0:\n                a_left -= 1\n                max_segments += 1\n            elif b_left > 0:\n                b_left -= 1\n                max_segments += 1\n            else:\n                break\n        i += 1\n    print(max_segments)\n\nmain()\n", "\n\nn, b, a = map(int, input().split())\n\ns = list(map(int, input().split()))\n\nmax_segments = 0\ncur_a = a\ncur_b = b\nfor i in range(n):\n    if s[i] == 1:\n        if cur_b > 0:\n            cur_b -= 1\n            cur_a += 1\n            if cur_a > a:\n                cur_a = a\n        else:\n            cur_a -= 1\n    else:\n        if cur_a > 0:\n            cur_a -= 1\n        else:\n            cur_b -= 1\n    if cur_a == 0 and cur_b == 0:\n        break\n    max_segments += 1\nprint(max_segments)\n"]