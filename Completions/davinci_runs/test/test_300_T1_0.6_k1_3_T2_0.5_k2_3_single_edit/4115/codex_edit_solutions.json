["import sys\n\nS = sys.stdin.readline().strip()\nfor i in range(len(S)//2):\n    if S[i] != S[len(S)-i-1]:\n        print(i+1)\n        break\nelse:\n    print(0)\n", "\n\ndef can_be_palindrome(string):\n    \"\"\"\n    Checks if a string can be a palindrome.\n    \"\"\"\n    import collections\n    string_dict = collections.Counter(string)\n    odds = 0\n    for key in string_dict:\n        if string_dict[key] % 2 != 0:\n            odds += 1\n            if odds > 1:\n                return False\n    return True\n\ndef get_palindrome(string):\n    \"\"\"\n    Returns a palindrome from a string.\n    \"\"\"\n    import collections\n    string_dict = collections.Counter(string)\n    palindrome = \"\"\n    for key in string_dict:\n        palindrome += key * (string_dict[key] / 2)\n    for key in string_dict:\n        if string_dict[key] % 2 != 0:\n            palindrome += key\n            break\n    return palindrome + palindrome[::-1]\n\ndef get_minimum_palindrome(string):\n    \"\"\"\n    Returns the minimum number of characters to change to make a string a palindrome.\n    \"\"\"\n    palindrome = get_palindrome(string)\n    if palindrome == string:\n        return 0\n    else:\n        return 1\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    string = input()\n    print(get_minimum_palindrome(string))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# -----Answer----- #\ns = input()\n\nif s == s[::-1]:\n    print(0)\nelse:\n    print(1)\n", "#!/usr/bin/env python\n\n# -----Answer-----\ns = input()\n\nif s == s[::-1]:\n    print(0)\nelse:\n    print(1)\n", "\nimport sys\n\nS = sys.stdin.readline().strip()\n\n", "\n\ndef can_be_palindrome(string):\n    \"\"\"\n    Checks if a string can be a palindrome.\n    \"\"\"\n    import collections\n    string_dict = collections.Counter(string)\n    odds = 0\n    for key in string_dict:\n        if string_dict[key] % 2 != 0:\n            odds += 1\n            if odds > 1:\n                return False\n    return True\n\ndef get_palindrome(string):\n    \"\"\"\n    Returns a palindrome from a string.\n    \"\"\"\n    import collections\n    string_dict = collections.Counter(string)\n    palindrome = \"\"\n    for key in string_dict:\n        palindrome += key * (string_dict[key] // 2)\n    for key in string_dict:\n        if string_dict[key] % 2 != 0:\n            palindrome += key\n            break\n    return palindrome + palindrome[::-1]\n\ndef get_minimum_palindrome(string):\n    \"\"\"\n    Returns the minimum number of characters to change to make a string a palindrome.\n    \"\"\"\n    palindrome = get_palindrome(string)\n    if palindrome == string:\n        return 0\n    else:\n        return 1\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    string = raw_input()\n    print get_minimum_palindrome(string)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef can_be_palindrome(string):\n    \"\"\"\n    Checks if a string can be a palindrome.\n    \"\"\"\n    import collections\n    string_dict = collections.Counter(string)\n    odds = 0\n    for key in string_dict:\n        if string_dict[key] % 2 != 0:\n            odds += 1\n            if odds > 1:\n                return False\n    return True\n\ndef get_palindrome(string):\n    \"\"\"\n    Returns a palindrome from a string.\n    \"\"\"\n    import collections\n    string_dict = collections.Counter(string)\n    palindrome = \"\"\n    for key in string_dict:\n        palindrome += key * (string_dict[key] / 2)\n    for key in string_dict:\n        if string_dict[key] % 2 != 0:\n            palindrome += key\n            break\n    return palindrome + palindrome[::-1]\n\ndef get_minimum_palindrome(string):\n    \"\"\"\n    Returns the minimum number of characters to change to make a string a palindrome.\n    \"\"\"\n    palindrome = get_palindrome(string)\n    if palindrome == string:\n        return 0\n    else:\n        return 1\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print(get_minimum_palindrome(input()))\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\nS = sys.stdin.readline().strip()\nfor i in range(len(S)//2):\n    if S[i] != S[len(S)-i-1]:\n        print(i+1)\n        break\nelse:\n    print(0)\n", "\n# -----Answer-----\ns = input()\n\nif s == s[::-1]:\n    print(0)\nelse:\n    print(1)\n"]