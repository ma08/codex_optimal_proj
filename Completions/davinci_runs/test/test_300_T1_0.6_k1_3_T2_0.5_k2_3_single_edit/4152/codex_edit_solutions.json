["import os\n\ndef main():\n    # print the name of the OS\n    print(os.name)\n\n    # check for item existence and type\n    print(\"Item exists: \" + str(os.path.exists(\"textfile.txt\")))\n    print(\"Item is a file: \" + str(os.path.isfile(\"textfile.txt\")))\n    print(\"Item is a directory: \" + str(os.path.isdir(\"textfile.txt\")))\n\n    # work with file paths\n    print(\"Item path: \" + str(os.path.realpath(\"textfile.txt\")))\n    print(\"Item path and name: \" + str(os.path.split(os.path.realpath(\"textfile.txt\"))))\n\n    # get the modification time\n    t = time.ctime(os.path.getmtime(\"textfile.txt\"))\n    print(t)\n    print(datetime.datetime.fromtimestamp(os.path.getmtime(\"textfile.txt\")))\n\n    # calculate how long ago the item was modified\n    td = datetime.datetime.now() - datetime.datetime.fromtimestamp(os.path.getmtime(\"textfile.txt\"))\n    print(\"It has been \" + str(td) + \" since the file was modified\")\n    print(\"Or, \" + str(td.total_seconds()) + \" seconds\")\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nn = int(input())\na = list(map(int, input().split()))\na.sort()\n\ndef power_of_two(n):\n    if n == 0:\n        return False\n    else:\n        return n & (n-1) == 0\n\n\ndef solve(n, a):\n    l = 0\n    r = n-1\n    res = n\n\n    while l < r:\n        if power_of_two(a[l]+a[r]):\n            res -= 1\n            l += 1\n            r -= 1\n        else:\n            if a[l] > a[r]:\n                r -= 1\n            else:\n                l += 1\n    return res\n\nprint(solve(n, a))\n", "\n\nn = int(input())\na = list(map(int, input().split()))\na.sort()\n\ndef power_of_two(n):\n    if n == 0:\n        return False\n    else:\n        return n & (n-1) == 0\n\n\ndef solve(n, a):\n    l = 0\n    r = n-1\n    res = n\n\n    while l < r:\n        if power_of_two(a[l]+a[r]):\n            res -= 1\n            l += 1\n            r -= 1\n        else:\n            if a[l] > a[r]:\n                r -= 1\n            else:\n                l += 1\n    return res\n\nprint(solve(n, a))\n", "\n\nn = int(input())\nl = list(map(int,input().split()))\n\nif n==1 and l[0]!=1:\n    print(1)\nelif n==1 and l[0]==1:\n    print(0)\nelse:\n    from collections import Counter\n    c = Counter(l)\n    c1 = []\n    for i in range(len(c)):\n        c1.append(c[i])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    print(n-max(c.values()))\n", "\n\nn = int(input())\nl = list(map(int,input().split()))\nfrom collections import Counter\nc = Counter(l)\nc1 = []\nfor i in range(len(c)):\n    c1.append(c[i])\nprint(n-max(c.values()))\n", "\n\nn = int(input())\nl = list(map(int,input().split()))\n\nif n==1 and l[0]!=1:\n    print(1)\nelif n==1 and l[0]==1:\n    print(0)\nelse:\n    from collections import Counter\n    c = Counter(l)\n    print(n-max(c.values()))\n", "{{Infobox song | name = File | cover = | alt = | type = single | artist = [[System of a Down]] | album = [[Steal This Album!]] | released = November 26, 2002 | format = | recorded = | studio = | venue = | genre = [[Alternative metal]]<br />[[Experimental rock]]<br />[[Rap metal]] | length = 3:43 | label = [[American Recordings (record label)|American Recordings]] | writer = [[Serj Tankian]], [[Daron Malakian]] | producer = [[Rick Rubin]] | prev_title = | prev_year = | next_title = | next_year = }} \"File\" is the tenth track from ''[[Steal This Album!]]'', by [[System of a Down]].\nIt is the last song on the album.\nThe song is about a man who is in jail and is being \"filed\" or processed.\nThe song is a mix of rap and metal, and is sung by [[Serj Tankian]].\nIt is one of the shortest songs on the album.\nIt is the only song on the album that [[Daron Malakian]] does not sing on.\nIt is also the only song on the album that [[Shavo Odadjian]] does not play bass on.\nThe song is a hidden track on the album.\nIt is track 14 on the album, but is incorrectly labeled as track 13.\n{{System of a Down}} {{Steal This Album!}}\n\n{{DEFAULTSORT:File (System Of A Down Song)}}\n[[Category:System of a Down songs]]\n[[Category:Alternative metal songs]]\n[[Category:2002 songs]]\n[[Category:Songs written by Serj Tankian]]\n[[Category:Songs written by Daron Malakian]]\n", "var fs = require('fs');\nvar path = require('path');\n\nmodule.exports = function(dir, ext, callback) {\n  fs.readdir(dir, function(err, list) {\n    if (err) {\n      return callback(err);\n    }\n\n    list = list.filter(function(file) {\n      return path.extname(file) === '.' + ext;\n    });\n\n    callback(null, list);\n  });\n};\n", "\nn = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\n\ndef power_of_two(n):\n    if n == 0:\n        return False\n    else:\n        return n & (n-1) == 0\n\n\ndef solve(n, a):\n    l = 0\n    r = n-1\n    res = n\n\n    while l < r:\n        if power_of_two(a[l]+a[r]):\n            res -= 1\n            l += 1\n            r -= 1\n        else:\n            if a[l] > a[r]:\n                r -= 1\n            else:\n                l += 1\n    return res\n\nprint(solve(n, a))\n"]