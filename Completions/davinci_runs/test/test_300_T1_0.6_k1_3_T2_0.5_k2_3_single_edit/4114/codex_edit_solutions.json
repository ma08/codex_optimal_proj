["\nn = int(input())\n\ncoord_dict = {}\nfor i in range(n):\n    x, y, h = map(int, input().split())\n    coord_dict[(x, y)] = h\n\nfor x in range(101):\n    for y in range(101):\n        h = -1\n        for (x_, y_), h_ in coord_dict.items():\n            if h == -1:\n                h = h_ + abs(x - x_) + abs(y - y_)\n            elif h != h_ + abs(x - x_) + abs(y - y_):\n                break\n        else:\n            print(x, y, h)\n            exit()\n", "\nwith open(\"input.txt\", mode=\"r\") as f:\n    n = int(f.readline())\n    coord_dict = {}\n    for i in range(n):\n        x, y, h = map(int, f.readline().split())\n        coord_dict[(x, y)] = h\n    for x in range(101):\n        for y in range(101):\n            h = -1\n            for (x_, y_), h_ in coord_dict.items():\n                if h == -1:\n                    h = h_ + abs(x - x_) + abs(y - y_)\n                elif h != h_ + abs(x - x_) + abs(y - y_):\n                    break\n            else:\n                print(x, y, h)\n                exit()\n", "n = int(input())\narr = [list(map(int, input().split())) for _ in range(n)]\n\ncx = (arr[0][0] + arr[1][0] + arr[2][0] - arr[3][0]) // 2\ncy = (arr[0][1] + arr[1][1] + arr[3][1] - arr[2][1]) // 2\nh = arr[0][2] - abs(cx - arr[0][0]) - abs(cy - arr[0][1])\nprint(cx, cy, h)\n", "\n\nn = int(input())\npoints = []\nfor _ in range(n):\n    x, y, h = map(int, input().split())\n    points.append((x, y, h))\n\n# C_X, C_Y is on the line that connects points with altitude 10^9-1 and 10^9\n# C_X, C_Y is on the line that connects points with altitude 10^9-2 and 10^9-1\n# ... and so on\n# C_X, C_Y is on the line that connects points with altitude 1 and 0\n\nfor cx in range(101):\n    for cy in range(101):\n        h = 0\n        for p in points:\n            h = max(h, p[2] - abs(p[0] - cx) - abs(p[1] - cy))\n        if h > 0:\n            print(cx, cy, h)\n            exit()\n", "\nprint(\"Hello, World!\")\n", "\nn = int(input())\n\ncoord_dict = {}\nfor i in range(n):\n    x, y, h = map(int, input().split())\n    coord_dict[(x, y)] = h\n\nfor x in range(101):\n    for y in range(101):\n        h = None\n        for (x_, y_), h_ in coord_dict.items():\n            if h is None:\n                h = h_ + abs(x - x_) + abs(y - y_)\n            elif h != h_ + abs(x - x_) + abs(y - y_):\n                break\n        else:\n            print(x, y, h)\n            exit()\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nn = int(input())\npoints = []\nfor _ in range(n):\n    x, y, h = map(int, input().split())\n    points.append((x, y, h))\n\n# C_X, C_Y is on the line that connects points with altitude 10^9\n# C_X, C_Y is on the line that connects points with altitude 10^9-1\n# C_X, C_Y is on the line that connects points with altitude 10^9-2\n# ...\n# C_X, C_Y is on the line that connects points with altitude 1\n# C_X, C_Y is on the line that connects points with altitude 0\n\nfor cx in range(101):\n    for cy in range(101):\n        h = 0\n        for p in points:\n            h = max(h, p[2] - abs(p[0] - cx) - abs(p[1] - cy))\n        if h > 0:\n            print(cx, cy, h)\n            exit()\n", "\n\nn = int(input())\npoints = []\nfor _ in range(n):\n    x, y, h = map(int, input().split())\n    points.append((x, y, h))\n\n# C_X, C_Y is on the line that connects points with altitude 10^9.\n# C_X, C_Y is on the line that connects points with altitude 10^9-1.\n# C_X, C_Y is on the line that connects points with altitude 10^9-2.\n# ...\n# C_X, C_Y is on the line that connects points with altitude 1.\n# C_X, C_Y is on the line that connects points with altitude 0.\n\nfor cx in range(101):\n    for cy in range(101):\n        h = 0\n        for p in points:\n            h = max(h, p[2] - abs(p[0] - cx) - abs(p[1] - cy))\n        if h > 0:\n            print(cx, cy, h)\n            exit()\n", "n = int(input())\narr = [list(map(int, input().split())) for _ in range(n)]\n\ncx = (arr[0][0] + arr[1][0] + arr[2][0] - arr[3][0]) // 2  # x\u5ea7\u6a19\ncy = (arr[0][1] + arr[1][1] + arr[3][1] - arr[2][1]) // 2  # y\u5ea7\u6a19\nh = arr[0][2] - abs(cx - arr[0][0]) - abs(cy - arr[0][1])  # \u9ad8\u3055\nprint(cx, cy, h)\n"]