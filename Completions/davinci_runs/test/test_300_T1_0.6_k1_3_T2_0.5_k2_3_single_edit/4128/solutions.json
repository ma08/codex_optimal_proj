["t = int(input())\nfor i in range(t):\n\tn = int(input())\n\tprint((n-1)//2)\n", "for _ in range(int(input())):\n    n = int(input())\n    print((n-1)//2)\n", "t = int(input())\nfor q in range(0, t):\n    n = int(input())\n    if (n % 2 == 0):\n        print(n // 2 - 1)\n    else:\n        print(n // 2)\n", "def solve():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        if n % 2 == 0:\n            print(n // 2 - 1)\n        else:\n            print(n // 2)\n\n\nsolve()", "from math import *\nt = int(input())\nfor y in range(t):\n\tn = int(input())\n\tprint((n-1)//2)", "# WeirdBugsButOkay\n\nt = int(input())\n\nfor wqe in range (0, t) :\n    n = int(input())\n    if n % 2 == 0 :\n        print(n // 2 - 1)\n    else :\n        print((n - 1) // 2)", "t=int(input())\nfor j in range(t):\n  n=int(input())\n  if n%2==0:\n    print(n//2-1)\n  else:\n    print(n//2)", "import sys\ninput = sys.stdin.readline\ndef getInt(): return int(input())\ndef getVars(): return list(map(int, input().split()))\ndef getList(): return list(map(int, input().split()))\ndef getStr(): return input().strip()\n## -------------------------------\n\nt = getInt()\nfor _ in range(t):\n    n = getInt()\n    if n%2 == 0:\n        print(n//2 -1)\n    else:\n        print(n//2)\n", "t = int(input())\nfor case_num in range(t):\n    n = int(input())\n    print((n - 1) // 2)\n", "from bisect import *\nfrom collections import *\nfrom itertools import *\nimport functools\nimport sys\nimport math\nfrom decimal import *\nfrom copy import *\nfrom heapq import *\nfrom fractions import *\ngetcontext().prec = 30\nMAX = sys.maxsize\nMAXN = 1000010\nMOD = 10**9+7\nspf = [i for i in range(MAXN)]\nspf[0]=spf[1] = -1\ndef sieve():\n    for i in range(2,MAXN,2):\n        spf[i] = 2\n    for i in range(3,int(MAXN**0.5)+1):\n        if spf[i]==i:\n            for j in range(i*i,MAXN,i):\n                if spf[j]==j:\n                    spf[j]=i\ndef fib(n,m):\n    if n == 0:\n        return [0, 1]\n    else:\n        a, b = fib(n // 2)\n        c = ((a%m) * ((b%m) * 2 - (a%m)))%m\n        d = ((a%m) * (a%m))%m + ((b)%m * (b)%m)%m\n        if n % 2 == 0:\n            return [c, d]\n        else:\n            return [d, c + d]\n \ndef charIN(x= ' '):\n    return(sys.stdin.readline().strip().split(x))\n \ndef arrIN(x = ' '):\n    return list(map(int,sys.stdin.readline().strip().split(x)))\n \ndef ncr(n,r):\n    num=den=1\n    for i in range(r):\n        num = (num*(n-i))%MOD\n        den = (den*(i+1))%MOD\n \n    return (num*(pow(den,MOD-2,MOD)))%MOD\n \ndef flush():\n    return sys.stdout.flush()\n \n'''*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*'''\nfor _ in range(int(input())):\n    n = int(input())\n    if n%2:\n        print(n//2)\n    else:\n        print(n//2-1)\n", "for _ in range(int(input())):\n    n = int(input())\n    if n%2==0:\n        print(n//2-1)\n    else:\n        print(n//2)", "#!usr/bin/env python3\nfrom collections import defaultdict, deque\nfrom heapq import heappush, heappop\nfrom itertools import permutations, accumulate\nimport sys\nimport math\nimport bisect\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef I(): return int(sys.stdin.readline())\ndef LS():return [list(x) for x in sys.stdin.readline().split()]\ndef S():\n    res = list(sys.stdin.readline())\n    if res[-1] == \"\\n\":\n        return res[:-1]\n    return res\ndef IR(n):\n    return [I() for i in range(n)]\ndef LIR(n):\n    return [LI() for i in range(n)]\ndef SR(n):\n    return [S() for i in range(n)]\ndef LSR(n):\n    return [LS() for i in range(n)]\n\nsys.setrecursionlimit(1000000)\nmod = 1000000007\n\ndef solve():\n    t = I()\n    for _ in range(t):\n        n = I()\n        print((n-1) >> 1)\n    return\n\n#Solve\ndef __starting_point():\n    solve()\n\n__starting_point()", "t,*x=map(int,open(0).read().split())\nans=[(y-1)//2 for y in x]\nprint(\"\\n\".join(map(str,ans)))", "t=int(input())\nfor _ in range(t):\n    n=int(input())\n    print((n-1)//2)", "t = int(input())\nfor i in range(t):\n\tn = int(input())\n\tprint(n//2 if n%2 == 1 else n//2-1)", "from bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom heapq import heappush,heappop\nimport math\nfrom collections import *\nfrom functools import reduce,cmp_to_key\nimport sys\ninput = sys.stdin.readline\n\nM = mod = 998244353\ndef factors(n):return sorted(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\ndef inv_mod(n):return pow(n, mod - 2, mod)\n\ndef li():return [int(i) for i in input().rstrip('\\n').split()]\ndef st():return input().rstrip('\\n')\ndef val():return int(input().rstrip('\\n'))\ndef li2():return [i for i in input().rstrip('\\n')]\ndef li3():return [int(i) for i in input().rstrip('\\n')]\n\n\nfor _ in range(val()):\n    n = val()\n    print(n//2 if n&1 else n//2 - 1)\n", "t = int(input())\nfor i in range(t):\n    x = int(input())\n    if x % 2 == 0:\n        print((x-2)//2)\n    else:\n        print((x-1)//2)\n\n    \n", "t=int(input())\nfor i in range(t):\n    n = int(input())\n    print((n-1)//2)", "import sys\nimport math\nimport itertools\nimport functools\nimport collections\nimport operator\nimport fileinput\nimport copy\n\nORDA = 97\ndef ii(): return int(input())\ndef mi(): return map(int, input().split())\ndef li(): return [int(i) for i in input().split()]\ndef lcm(a, b): return abs(a * b) // math.gcd(a, b)\ndef revn(n): return str(n)[::-1]\ndef dd(): return collections.defaultdict(int)\ndef ddl(): return collections.defaultdict(list)\ndef sieve(n):\n    if n < 2: return list()\n    prime = [True for _ in range(n + 1)]\n    p = 3\n    while p * p <= n:\n        if prime[p]:\n            for i in range(p * 2, n + 1, p):\n                prime[i] = False\n        p += 2\n    r = [2]\n    for p in range(3, n + 1, 2):\n        if prime[p]:\n            r.append(p)\n    return r\ndef divs(n, start=1):\n    r = []\n    for i in range(start, int(math.sqrt(n) + 1)):\n        if (n % i == 0):\n            if (n / i == i):\n                r.append(i)\n            else:\n                r.extend([i, n // i])\n    return r\ndef divn(n, primes):\n    divs_number = 1\n    for i in primes:\n        if n == 1:\n            return divs_number\n        t = 1\n        while n % i == 0:\n            t += 1\n            n //= i\n        divs_number *= t\ndef prime(n):\n    if n == 2: return True\n    if n % 2 == 0 or n <= 1: return False\n    sqr = int(math.sqrt(n)) + 1\n    for d in range(3, sqr, 2):\n        if n % d == 0: return False\n    return True\ndef convn(number, base):\n    newnumber = 0\n    while number > 0:\n        newnumber += number % base\n        number //= base\n    return newnumber\ndef cdiv(n, k): return n // k + (n % k != 0)\n\n\nfor i in range(ii()):\n    n = ii()\n    if n & 1:\n        print(n // 2)\n    else:\n        print(n // 2 - 1)", "t = int(input())\nfor _ in range(t):\n    print((int(input())-1)//2)", "from sys import stdin, exit, setrecursionlimit\nsetrecursionlimit(10000000)\n\ninput = stdin.readline\nlmi = lambda: list(map(int, input().split()))\nmi = lambda: map(int, input().split())\nsi = lambda: input().strip('\\n')\nssi = lambda: input().strip('\\n').split()\n\nfor _ in range(int(input())):\n    n = int(input())\n    print((n-1)//2)"]