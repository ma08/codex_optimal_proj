["\n\ndef is_arithmetic_progression(arr):\n    return len(set(arr)) == 1 or len(set([arr[i+1] - arr[i] for i in range(len(arr)-1)])) == 1;\n\ndef min_changes(arr):\n    if len(arr) == 2:\n        return 0;\n    if len(arr) == 3:\n        return -1;\n\n    if is_arithmetic_progression(arr):\n        return 0;\n    else:\n        return 1;\n\nif __name__ == \"__main__\":\n    n = int(input());\n    arr = list(map(int, input().split()));\n    print(min_changes(arr));\n", "\n\n\ndef solve(n, sequence, k):\n    if n == 1:\n        return k\n    elif n == 2:\n        return k\n    else:\n        diff = sequence[1] - sequence[0]\n        i = 2\n        while i < n:\n            if sequence[i] - sequence[i-1] != diff:\n                return k\n            i += 1\n        return k\n\n\nif __name__ == '__main__':\n    n = int(input())\n    sequence = [int(x) for x in input().split()]\n    k = int(input())\n    print(solve(n, sequence, k))\n", "\n\ndef main():\n    n = int(input())\n    b = [int(x) for x in input().split()]\n\n    if n <= 2:\n        print(0)\n        return\n\n    b.sort()\n\n    min_diff = b[1] - b[0]\n    max_diff = b[1] - b[0]\n    for i in range(1, n - 1):\n        diff = b[i+1] - b[i]\n        if diff < min_diff:\n            min_diff = diff\n        if diff > max_diff:\n            max_diff = diff\n\n    if min_diff == max_diff:\n        print(0)\n        return\n\n    if max_diff - min_diff > 1:\n        print(-1)\n        return\n\n    if min_diff == 0:\n        print(1)\n        return\n\n    count = 0\n    for i in range(n - 1):\n        diff = b[i+1] - b[i]\n        if diff == min_diff + 1:\n            count += 1\n        elif diff == min_diff - 1:\n            count += 1\n            b[i] -= 1\n        elif diff == min_diff:\n            continue\n        else:\n            print(-1)\n            return\n\n    for i in range(n - 1):\n        if b[i+1] - b[i] != min_diff:\n            print(-1)\n            return\n\n    print(count)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef solve(n, sequence):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 0\n    else:\n        diff = sequence[1] - sequence[0]\n        i = 2\n        while i < n:\n            if sequence[i] - sequence[i-1] != diff:\n                return -1\n            i += 1\n        return 0\n\n\nif __name__ == '__main__':\n    n = int(input())\n    sequence = [int(x) for x in input().split()]\n    print(solve(n, sequence))\n", "\n\ndef is_arithmetic_progression(arr):\n    return len(set(arr)) == 1 or len(set([arr[i + 1] - arr[i] for i in range(len(arr) - 1)])) == 1\n\n\ndef min_changes(arr):\n    if len(arr) == 2:\n        return 0\n    if len(arr) == 3:\n        return -1\n\n    if is_arithmetic_progression(arr):\n        return 0\n\n    else:\n        return 1\n\nif __name__ == \"__main__\":\n    n = int(raw_input())\n    arr = list(map(int, raw_input().split()))\n    print min_changes(arr)\n", "\n\n\ndef solve(n, sequence):  # O(n)\n    if n == 1:  # O(1)\n        return 0  # O(1)\n    elif n == 2:  # O(1)\n        return 0  # O(1)\n    else:  # O(1)\n        diff = sequence[1] - sequence[0]  # O(1)\n        i = 2  # O(1)\n        while i < n:  # O(n)\n            if sequence[i] - sequence[i-1] != diff:  # O(1)\n                return -1  # O(1)\n            i += 1  # O(1)\n        return 0  # O(1)\n\n\nif __name__ == '__main__':\n    n = int(input())  # O(1)\n    sequence = [int(x) for x in input().split()]  # O(n)\n    print(solve(n, sequence))  # O(1)\n", "\n\ndef main():\n    n = int(input())\n    b = [int(x) for x in input().split()]\n\n    if n <= 2:\n        print(0)\n        return\n\n    b.sort()\n\n    min_diff = b[1] - b[0]\n    max_diff = b[1] - b[0]\n    for i in range(1, n - 1):\n        diff = b[i + 1] - b[i]\n        if diff < min_diff:\n            min_diff = diff\n        if diff > max_diff:\n            max_diff = diff\n\n    if min_diff == max_diff:\n        print(0)\n        return\n\n    if max_diff - min_diff > 1:\n        print(-1)\n        return\n\n    if min_diff == 0:\n        print(1)\n        return\n\n    count = 0\n    for i in range(n - 1):\n        diff = b[i + 1] - b[i]\n        if diff == min_diff + 1:\n            count += 1\n        elif diff == min_diff - 1:\n            count += 1\n            b[i] -= 1\n        elif diff == min_diff:\n            continue\n        else:\n            print(-1)\n            return\n\n    for i in range(n - 1):\n        if b[i + 1] - b[i] != min_diff:\n            print(-1)\n            return\n\n    print(count)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef is_arithmetic_progression(arr):\n    return len(set(arr)) == 1 or len(set([arr[i + 1] - arr[i] for i in range(len(arr) - 1)])) == 1\n\ndef min_changes(arr):\n    if len(arr) == 2:\n        return 0\n    if len(arr) == 3:\n        return -1\n\n    if is_arithmetic_progression(arr):\n        return 0\n\n    else:\n        return 1\n\nif __name__ == \"__main__\":\n    n = int(raw_input())\n    arr = list(map(int, raw_input().split()))\n    print min_changes(arr)\n"]