["\n\n#The number of digits\nN = int(input())\n#The number of constraints\nM = int(input())\n#List of constraints\nconstraints = []\nfor i in range(M):\n    constraints.append([int(x) for x in input().split()])\n\n#Determine the least possible number\nnumber = [0] * N\nfor i in range(M):\n    number[constraints[i][0] - 1] = constraints[i][1]\n\n#If the number is less than all constraints\nif number < constraints[0]:\n    print(number[0])\nelse:\n    print(-1)\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    a = [0] * n\n    for i in range(m):\n        s, c = map(int, input().split())\n        if a[i] != 0 and (a[i] < 0 or a[i] > 9):\n            print(-1)\n            return\n        a[s-1] = c\n            if a[i] != 0 and a[i] == 0:\n                print(-1)\n                return\n    for i in range(n):\n        if i == 0 and a[i] == 0:\n            print(-1)\n            return\n        elif i == 0 and a[i] != 0:\n        elif i == 1 and a[0] == 0 and a[i] == 0:\n            print(-1)\n            return\n        elif i == 1 and a[0] == 0 and a[i] != 0:\n            print(a[i], end=\"\")\n            print(a[i], end=\"\")\n            if a[i] != 0 and a[i] == 0:\n                print(-1)\n                return\n        else:\n            print(a[i], end=\"\")\n    print(\"\")\n\nif __name__ == '__main__':\n    main()\n", "\n\n#The number of digits in the number\nN = int(input())\n#The number of constraints\nM = int(input())\n#List of constraints\nconstraints = []\nfor i in range(M):\n    constraints.append([int(x) for x in input().split()]) #read constraints\n\n#Determine the least possible number from the constraints\nnumber = [0] * N\nfor i in range(M):\n    number[constraints[i][0] - 1] = constraints[i][1]\n\n#If the number is less than or equal to all constraints\nif number <= constraints:\n    print(number)\nelse:\n    print(-1)\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    a = [0] * n\n    for i in range(m):\n        s, c = map(int, input().split())\n        a[s-1] = c\n    for i in range(n):\n        if i == 0 and a[i] == 0:\n            print(-1)\n            return\n        elif i == 0 and a[i] != 0:\n            print(a[i], end=\"\")  # \u5148\u982d\u306f0\u3067\u306a\u3044\n        else:\n            print(a[i], end=\"\")\n    print(\"\")\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    a = [0] * (n+1)\n    for i in range(m):\n        s, c = map(int, input().split())\n        a[s] = c\n    for i in range(n+1):\n        if i == 1 and a[i] == 0:\n            print(-1)\n            return\n        elif i == 1 and a[i] != 0:\n            print(a[i], end=\"\")\n        else:\n            print(a[i], end=\"\")\n    print(\"\")\n\nif __name__ == '__main__':\n    main()\n", "\n\n# The number of digits\nN = int(input(\"Enter the number of digits: \"))\n# The number of constraints\nM = int(input(\"Enter the number of constraints: \"))\n# List of constraints\nconstraints = [0] * M\nfor i in range(M):  # constraints.append([int(x) for x in input().split()])\n    constraints[i] = [int(x) for x in input().split()]\n\n# Determine the least possible number\nnumber = [0] * N\nfor i in range(M):\n    number[constraints[i][0] - 1] = constraints[i][1]  # number[0] = 1\n\n# If the number is less than all constraints\nif number < constraints:  # number < constraints\n    print(number)\nelse:\n    print(-1)\n", "\nN, M = map(int, input().split())\nfor i in range(10 ** N):\n    if all(str(i).zfill(N)[s - 1] == str(c) for s, c in (map(int, input().split()) for _ in range(M))):\n        print(i)\n        exit()\nprint(-1)\n", "# coding: utf-8\n\n\nN, M = map(int, input().split())  # N: \u6841\u6570 M: \u6761\u4ef6\u306e\u6570\nfor i in range(10 ** N):  # \u6841\u6570\u5206\u3060\u3051\u7e70\u308a\u8fd4\u3059\n    if all(str(i).zfill(N)[s - 1] == str(c) for s, c in (map(int, input().split()) for _ in range(M))):  # \u5168\u3066\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3059\u304b\n        print(i)  # \u6e80\u305f\u3059\u306a\u3089\u305d\u306e\u6570\u5b57\u3092\u51fa\u529b\n        exit()  # \u7d42\u4e86\nprint(-1)  # \u6e80\u305f\u3059\u6570\u5b57\u304c\u306a\u3051\u308c\u3070-1\u3092\u51fa\u529b\n"]