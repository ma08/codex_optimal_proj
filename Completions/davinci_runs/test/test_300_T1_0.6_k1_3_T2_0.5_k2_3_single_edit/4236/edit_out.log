2022-04-18 09:31:46.239545 num operations 1
2022-04-18 09:31:46.239570 size on input set 1
2022-04-18 09:32:30.542543 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# SOLUTION \n\n# \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u043e\u043f\u0430\u0434\u0430\u043d\u0438\u044f \u0447\u0438\u0441\u043b\u0430 \u0432 \u043e\u0434\u0438\u043d \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u0432\ndef check(point, intervals):\n    for i in intervals:\n        if i[0] <= point <= i[1]:\n            return True\n    return False\n\nn, m = map(int, input().split())\nintervals = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    intervals.append((l, r))\n# \u043f\u0435\u0440\u0435\u0431\u043e\u0440 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430 [1, m]\npoints = [i for i in range(1, m + 1)]\n# \u043e\u0442\u0441\u0435\u0438\u0432\u0430\u0435\u043c \u0442\u0435 \u0447\u0438\u0441\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043f\u0430\u0434\u0430\u044e\u0442 \u0432 \u043e\u0434\u0438\u043d \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u0432\npoints = [i for i in points if not check(i, intervals)]\nprint(len(points))\nprint(*points)\n"
    },
    {
      "index": 1,
      "text": "# \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0434\u0432\u0430 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 n \u0438 m \u0438 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0444\u0430\u0439\u043b \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \"task_2_n_m.txt\", \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439:\n#\n# \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0444\u0430\u0439\u043b \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \"task_2_n_m.txt\" (\u0433\u0434\u0435 n \u0438 m - \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430) \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438 \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u0432 \u044d\u0442\u043e\u043c \u0444\u0430\u0439\u043b\u0435.\n#\n# \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0444\u0430\u0439\u043b \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \"task_2_n_m.txt\" (\u0433\u0434\u0435 n \u0438 m - \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430) \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u0432 \u044d\u0442\u043e\u043c \u0444\u0430\u0439\u043b\u0435.\n#\n# \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0444\u0430\u0439\u043b \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \"task_2_n_m.txt\" (\u0433\u0434\u0435 n \u0438 m - \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430) \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0430\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u0432 \u044d\u0442\u043e\u043c \u0444\u0430\u0439\u043b\u0435.\n#\n# \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0444\u0430\u0439\u043b \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \"task_2_n_m.txt\" (\u0433\u0434\u0435 n \u0438 m - \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430) \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0430\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u0432 \u044d\u0442\u043e\u043c \u0444\u0430\u0439\u043b\u0435.\n#\n# \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0444\u0430\u0439\u043b \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \"task_2_n_m.txt\" (\u0433\u0434\u0435 n \u0438 m - \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430) \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0433\u0435\u043e\u043c\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u0432 \u044d\u0442\u043e\u043c \u0444\u0430\u0439\u043b\u0435.\n#\n# \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0444\u0430\u0439\u043b \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \"task_2_n_m.txt\" (\u0433\u0434\u0435 n \u0438 m - \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430) \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0433\u0435\u043e\u043c\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u0432 \u044d\u0442\u043e\u043c \u0444\u0430\u0439\u043b\u0435.\n#\n# \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0444\u0430\u0439\u043b \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \"task_2_n_m.txt\" (\u0433\u0434\u0435 n \u0438 m - \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430) \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0433\u0430\u0440\u043c\u043e\u043d\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u0432 \u044d\u0442\u043e\u043c \u0444\u0430\u0439\u043b\u0435.\n#\n# \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0444\u0430\u0439\u043b \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \"task_2_n_m.txt\" (\u0433\u0434\u0435 n \u0438 m - \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430) \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0433\u0430\u0440\u043c\u043e\u043d\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u0432 \u044d\u0442\u043e\u043c \u0444\u0430\u0439\u043b\u0435.\n#\n# \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0444\u0430\u0439\u043b \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \"task_2_n_m.txt\" (\u0433\u0434\u0435 n \u0438 m - \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430) \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0430\u0440\u0438\u0444\u043c\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u0432 \u044d\u0442\u043e\u043c \u0444\u0430\u0439\u043b\u0435.\n#\n# \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0444\u0430\u0439\u043b \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \"task_2_n_m.txt\" (\u0433\u0434\u0435 n \u0438 m - \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430) \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0433\u0435\u043e\u043c\u0435\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b\n\n# SOLUTION\n\n# \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u043e\u043f\u0430\u0434\u0430\u043d\u0438\u044f \u0447\u0438\u0441\u043b\u0430 \u0432 \u043e\u0434\u0438\u043d \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u0432\ndef check(point, intervals):\n    for i in intervals:\n        if i[0] <= point <= i[1]:\n            return True\n    return False\n\nn, m = map(int, input().split())\nintervals = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    intervals.append((l, r))\n# \u043f\u0435\u0440\u0435\u0431\u043e\u0440 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430 [1, m]\npoints = [i for i in range(1, m + 1)]\n# \u043e\u0442\u0441\u0435\u0438\u0432\u0430\u0435\u043c \u0442\u0435 \u0447\u0438\u0441\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043f\u0430\u0434\u0430\u044e\u0442 \u0432 \u043e\u0434\u0438\u043d \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u0432\npoints = [i for i in points if not check(i, intervals)]\nprint(len(points))\nprint(*points)\n"
    },
    {
      "index": 2,
      "text": "# \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 [1; m], \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u043f\u043e\u043f\u0430\u0434\u0430\u044e\u0442 \u043d\u0438 \u0432 \u043e\u0434\u0438\u043d \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u0432.\n\n# \u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430 n \u0438 m \u2014 \u0447\u0438\u0441\u043b\u043e \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u0432 \u0438 \u043f\u0440\u0430\u0432\u0430\u044f \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e (1 \u2264 n \u2264 100000, 1 \u2264 m \u2264 109).\n\n# \u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 n \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u043f\u043e \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430 li \u0438 ri \u2014 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u043a\u043e\u043d\u0446\u043e\u0432 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u0432 (1 \u2264 li \u2264 ri \u2264 m).\n\n# \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430: \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0441\u043a\u043e\u043c\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0438 \u0441\u0443\u043c\u043c\u0443 \u0438\u0441\u043a\u043e\u043c\u044b\u0445 \u0447\u0438\u0441\u0435\u043b.\n\n# \u0412\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b \u0432\u0441\u0435 \u0438\u0441\u043a\u043e\u043c\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f.\n\n# Sample Input:\n\n# 2 6\n# 2 3\n# 5 6\n\n# Sample Output:\n\n# 3 11\n# 1 4\n\n# Memory Limit: 256 MB\n# Time Limit: 5 seconds\n\n# Code:\n# SOLUTION\n\n# \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u043e\u043f\u0430\u0434\u0430\u043d\u0438\u044f \u0447\u0438\u0441\u043b\u0430 \u0432 \u043e\u0434\u0438\u043d \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u0432\ndef check(point, intervals):\n    for i in intervals:\n        if i[0] <= point <= i[1]:\n            return True\n    return False\n\nn, m = map(int, input().split())\nintervals = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    intervals.append((l, r))\n# \u043f\u0435\u0440\u0435\u0431\u043e\u0440 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430 [1, m]\npoints = [i for i in range(1, m + 1)]\n# \u043e\u0442\u0441\u0435\u0438\u0432\u0430\u0435\u043c \u0442\u0435 \u0447\u0438\u0441\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043f\u0430\u0434\u0430\u044e\u0442 \u0432 \u043e\u0434\u0438\u043d \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u0432\npoints = [i for i in points if not check(i, intervals)]\nprint(len(points))\nprint(*points)\n"
    }
  ],
  "created": 1650274306,
  "object": "edit"
}
2022-04-18 09:32:30.542976 fix syntax errors 3 ['\n\n# SOLUTION \n\n# проверка попадания числа в один из интервалов\ndef check(point, intervals):\n    for i in intervals:\n        if i[0] <= point <= i[1]:\n            return True\n    return False\n\nn, m = map(int, input().split())\nintervals = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    intervals.append((l, r))\n# перебор всех чисел из интервала [1, m]\npoints = [i for i in range(1, m + 1)]\n# отсеиваем те числа, которые попадают в один из интервалов\npoints = [i for i in points if not check(i, intervals)]\nprint(len(points))\nprint(*points)\n', '# Напишите функцию, которая принимает на вход два натуральных числа n и m и генерирует файл с именем "task_2_n_m.txt", в котором хранится результат выполнения следующих операций:\n#\n# Напишите программу, которая принимает на вход файл с именем "task_2_n_m.txt" (где n и m - натуральные числа) и выводит на экран количество и сумму всех чисел в этом файле.\n#\n# Напишите программу, которая принимает на вход файл с именем "task_2_n_m.txt" (где n и m - натуральные числа) и выводит на экран сумму всех чисел в этом файле.\n#\n# Напишите программу, которая принимает на вход файл с именем "task_2_n_m.txt" (где n и m - натуральные числа) и выводит на экран количество и среднее арифметическое всех чисел в этом файле.\n#\n# Напишите программу, которая принимает на вход файл с именем "task_2_n_m.txt" (где n и m - натуральные числа) и выводит на экран среднее арифметическое всех чисел в этом файле.\n#\n# Напишите программу, которая принимает на вход файл с именем "task_2_n_m.txt" (где n и m - натуральные числа) и выводит на экран количество и среднее геометрическое всех чисел в этом файле.\n#\n# Напишите программу, которая принимает на вход файл с именем "task_2_n_m.txt" (где n и m - натуральные числа) и выводит на экран среднее геометрическое всех чисел в этом файле.\n#\n# Напишите программу, которая принимает на вход файл с именем "task_2_n_m.txt" (где n и m - натуральные числа) и выводит на экран среднее гармоническое всех чисел в этом файле.\n#\n# Напишите программу, которая принимает на вход файл с именем "task_2_n_m.txt" (где n и m - натуральные числа) и выводит на экран среднее гармоническое всех чисел в этом файле.\n#\n# Напишите программу, которая принимает на вход файл с именем "task_2_n_m.txt" (где n и m - натуральные числа) и выводит на экран среднее арифметическое всех чисел в этом файле.\n#\n# Напишите программу, которая принимает на вход файл с именем "task_2_n_m.txt" (где n и m - натуральные числа) и выводит на экран среднее геометрическое всех чисел\n\n# SOLUTION\n\n# проверка попадания числа в один из интервалов\ndef check(point, intervals):\n    for i in intervals:\n        if i[0] <= point <= i[1]:\n            return True\n    return False\n\nn, m = map(int, input().split())\nintervals = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    intervals.append((l, r))\n# перебор всех чисел из интервала [1, m]\npoints = [i for i in range(1, m + 1)]\n# отсеиваем те числа, которые попадают в один из интервалов\npoints = [i for i in points if not check(i, intervals)]\nprint(len(points))\nprint(*points)\n', '# Программа должна посчитать количество чисел в диапазоне [1; m], которые не попадают ни в один из интервалов.\n\n# В первой строке входных данных записано два числа n и m — число интервалов и правая граница диапазона, соответственно (1 ≤ n ≤ 100000, 1 ≤ m ≤ 109).\n\n# В следующих n строках записаны по два числа li и ri — координаты концов интервалов (1 ≤ li ≤ ri ≤ m).\n\n# Выведите два числа: количество искомых чисел и сумму искомых чисел.\n\n# Во второй строке выведите через пробел все искомые числа в порядке возрастания.\n\n# Sample Input:\n\n# 2 6\n# 2 3\n# 5 6\n\n# Sample Output:\n\n# 3 11\n# 1 4\n\n# Memory Limit: 256 MB\n# Time Limit: 5 seconds\n\n# Code:\n# SOLUTION\n\n# проверка попадания числа в один из интервалов\ndef check(point, intervals):\n    for i in intervals:\n        if i[0] <= point <= i[1]:\n            return True\n    return False\n\nn, m = map(int, input().split())\nintervals = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    intervals.append((l, r))\n# перебор всех чисел из интервала [1, m]\npoints = [i for i in range(1, m + 1)]\n# отсеиваем те числа, которые попадают в один из интервалов\npoints = [i for i in points if not check(i, intervals)]\nprint(len(points))\nprint(*points)\n']
2022-04-18 09:32:30.543167 size on output set 3
2022-04-18 09:32:30.543191 num operations 1
2022-04-18 09:32:30.543204 size on input set 1
2022-04-18 09:32:33.603195 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn, m = [int(i) for i in input().split()]\n\nsegments = []\n\nfor i in range(n):\n    segments.append([int(i) for i in input().split()])\n\nsegments.sort(key=lambda x: x[1])\n\nk = 0\n\nfor i in range(m):\n    if i+1 not in range(segments[k][0], segments[k][1]+1):\n        print(i+1, end=' ')\n    elif k+1 < len(segments) and i+1 == segments[k][1]:\n        k += 1\n\nprint()\n"
    },
    {
      "index": 1,
      "text": "\nn, m = [int(i) for i in input().split()]\n\nsegments = []\n\nfor i in range(n):\n    segments.append([int(i) for i in input().split()])\n\nsegments.sort(key=lambda x: x[1])\n\nk = 0\n\nfor i in range(m):\n    if i+1 not in range(segments[k][0], segments[k][1]+1):\n        print(i+1, end=' ')\n    elif k+1 < len(segments) and i+1 == segments[k][1]:\n        k += 1\n\nprint()\n"
    },
    {
      "index": 2,
      "text": "\n\nn, m = [int(i) for i in input().split()]\n\nsegments = []\n\nfor i in range(n):\n    segments.append([int(i) for i in input().split()])\n\nsegments.sort(key=lambda x: x[1])\n\nk = 0\n\nfor i in range(m):\n    if i+1 not in range(segments[k][0], segments[k][1]+1):\n        print(i+1, end=' ')\n    elif k+1 < len(segments) and i+1 == segments[k][1]:\n        k += 1\n"
    }
  ],
  "created": 1650274350,
  "object": "edit"
}
2022-04-18 09:32:33.603594 fix syntax errors 3 ["\nn, m = [int(i) for i in input().split()]\n\nsegments = []\n\nfor i in range(n):\n    segments.append([int(i) for i in input().split()])\n\nsegments.sort(key=lambda x: x[1])\n\nk = 0\n\nfor i in range(m):\n    if i+1 not in range(segments[k][0], segments[k][1]+1):\n        print(i+1, end=' ')\n    elif k+1 < len(segments) and i+1 == segments[k][1]:\n        k += 1\n\nprint()\n", "\nn, m = [int(i) for i in input().split()]\n\nsegments = []\n\nfor i in range(n):\n    segments.append([int(i) for i in input().split()])\n\nsegments.sort(key=lambda x: x[1])\n\nk = 0\n\nfor i in range(m):\n    if i+1 not in range(segments[k][0], segments[k][1]+1):\n        print(i+1, end=' ')\n    elif k+1 < len(segments) and i+1 == segments[k][1]:\n        k += 1\n\nprint()\n", "\n\nn, m = [int(i) for i in input().split()]\n\nsegments = []\n\nfor i in range(n):\n    segments.append([int(i) for i in input().split()])\n\nsegments.sort(key=lambda x: x[1])\n\nk = 0\n\nfor i in range(m):\n    if i+1 not in range(segments[k][0], segments[k][1]+1):\n        print(i+1, end=' ')\n    elif k+1 < len(segments) and i+1 == segments[k][1]:\n        k += 1\n"]
2022-04-18 09:32:33.603749 size on output set 2
2022-04-18 09:32:33.603774 num operations 1
2022-04-18 09:32:33.603787 size on input set 1
2022-04-18 09:32:40.337105 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# \u043d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435 \u0442\u043e\u0447\u043a\u0438 \u0432 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043a\u0435 \u043e\u0442 0 \u0434\u043e m\n# \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u043d\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u043e\u0442\u0440\u0435\u0437\u043a\u0430 \u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043e\u0442\u0440\u0435\u0437\u043a\u043e\u0432\n\nn, m = map(int, input().split())\nsegments = []\nfor i in range(n):\n    segments.append(list(map(int, input().split())))\n\nl = []\nfor i in range(n):\n    for j in range(segments[i][0], segments[i][1] + 1):\n        l.append(j)\n\nl = list(set(l))\nl.sort()\n\ni = 0\nwhile i < len(l):\n    if l[i] in range(segments[i][0], segments[i][1] + 1):\n        l.pop(i)\n    else:\n        i += 1\n\nprint(len(l))\nfor i in l:\n    print(i, end=' ')\n"
    },
    {
      "index": 1,
      "text": "\na = [[1, 2], [3, 4], [5, 6]]\nprint(a[0])\n"
    },
    {
      "index": 2,
      "text": "\nn, m = map(int, input().split())\nsegments = []\nfor i in range(n):\n    segments.append(list(map(int, input().split())))\n\nl = []\nfor i in range(n):\n    for j in range(segments[i][0], segments[i][1] + 1):\n        l.append(j)\n\nl = list(set(l))\nl.sort()\n\ni = 0\nwhile i < len(l):\n    if l[i] in range(segments[i][0], segments[i][1] + 1):\n        l.pop(i)\n    else:\n        i += 1\n\nprint(len(l))\nfor i in l:\n    print(i, end=' ')\n"
    }
  ],
  "created": 1650274353,
  "object": "edit"
}
2022-04-18 09:32:40.337347 fix syntax errors 3 ["# найти все точки в промежутке от 0 до m\n# в которых нет ни одного отрезка из произвольного количества отрезков\n\nn, m = map(int, input().split())\nsegments = []\nfor i in range(n):\n    segments.append(list(map(int, input().split())))\n\nl = []\nfor i in range(n):\n    for j in range(segments[i][0], segments[i][1] + 1):\n        l.append(j)\n\nl = list(set(l))\nl.sort()\n\ni = 0\nwhile i < len(l):\n    if l[i] in range(segments[i][0], segments[i][1] + 1):\n        l.pop(i)\n    else:\n        i += 1\n\nprint(len(l))\nfor i in l:\n    print(i, end=' ')\n", '\na = [[1, 2], [3, 4], [5, 6]]\nprint(a[0])\n', "\nn, m = map(int, input().split())\nsegments = []\nfor i in range(n):\n    segments.append(list(map(int, input().split())))\n\nl = []\nfor i in range(n):\n    for j in range(segments[i][0], segments[i][1] + 1):\n        l.append(j)\n\nl = list(set(l))\nl.sort()\n\ni = 0\nwhile i < len(l):\n    if l[i] in range(segments[i][0], segments[i][1] + 1):\n        l.pop(i)\n    else:\n        i += 1\n\nprint(len(l))\nfor i in l:\n    print(i, end=' ')\n"]
2022-04-18 09:32:40.337401 size on output set 3
