["var file = {\n    open: function(path, mode) {\n        var fd = this._open(path, mode);\n        if (fd < 0) {\n            throw new Error(\"open \" + path + \" error!\");\n        }\n        return new File(fd);\n    },\n    openSync: function(path, mode) {\n        var fd = this._open(path, mode);\n        if (fd < 0) {\n            throw new Error(\"open \" + path + \" error!\");\n        }\n        return fd;\n    },\n    _open: function(path, mode) {\n        var fd = 0;\n        var flags = 0;\n        var access = 0;\n        if (mode.indexOf(\"w\") != -1) {\n            flags |= 0x02;\n            access |= 0x02;\n        }\n        if (mode.indexOf(\"r\") != -1) {\n            flags |= 0x01;\n            access |= 0x01;\n        }\n        if (mode.indexOf(\"a\") != -1) {\n            flags |= 0x02;\n            access |= 0x02;\n        }\n        if (mode.indexOf(\"+\") != -1) {\n            access |= 0x02 | 0x01;\n        }\n        if (mode.indexOf(\"x\") != -1) {\n            flags |= 0x100;\n        }\n        if (mode.indexOf(\"b\") != -1) {\n            flags |= 0x800;\n        }\n        if (mode.indexOf(\"t\") != -1) {\n            flags |= 0x400;\n        }\n        if (flags == 0) {\n            flags |= 0x01;\n            access |= 0x01;\n        }\n        fd = _open(path, flags, access);\n        return fd;\n    },\n    fopen: function(path, mode) {\n        return this.open(path, mode);\n    },\n    fopenSync: function(path, mode) {\n        return this.openSync(path, mode);\n    },\n    close: function(fd) {\n        fd.close();\n    },\n    closeSync: function(fd) {\n        if (typeof fd == \"number\") {\n            _close(fd);\n        } else {\n            fd.close();\n        }\n    },\n    fclose: function(fd) {\n        this.close(fd);\n    },\n    fcloseSync: function(fd) {\n        this.closeSync(fd);\n    },\n    read: function(fd, size) {\n        return fd.read(size);\n    },\n    readSync: function(fd, size) {\n        if (typeof fd == \"number\") {\n            return _read(fd, size);\n        } else {\n            return fd.read(size);\n        }\n    },\n    fread: function(fd, size) {\n        return this.read(fd, size);\n    },\n    freadSync: function(fd, size) {\n        return this.readSync(fd, size);\n    },\n    write: function(fd, data) {\n        return fd.write(data);\n    },\n    writeSync: function(fd, data) {\n        if (typeof fd == \"number\") {\n            return _write(fd, data);\n        } else {\n            return fd.write(data);\n        }\n    },\n    fwrite: function(fd, data) {\n        return this.write(fd, data);\n    },\n    fwriteSync: function(fd, data) {\n        return this.writeSync(fd, data);\n    },\n    stat: function(path) {\n        var st = new Stat();\n        if (_stat(path, st) == 0) {\n            return st;\n        }\n        return null;\n    },\n    lstat: function(path) {\n        var st = new Stat();\n        if (_lstat(path, st) == 0) {\n            return st;\n        }\n        return null;\n    },\n    fstat: function(fd) {\n        return fd.fstat();\n    },\n    fstatSync: function(fd) {\n        return fd.fstat();\n    },\n    unlink: function(path) {\n        return _unlink(path);\n    },\n    unlinkSync: function(path) {\n        return _unlink(path);\n    },\n    rename: function(oldPath, newPath) {\n        return _rename(oldPath, newPath);\n    },\n    renameSync: function(oldPath, newPath) {\n        return _rename(oldPath, newPath);\n    },\n    mkdir: function(path, mode, callback) {\n        return _mkdir(path, mode, callback);\n    },\n    mkdirSync: function(path, mode) {\n        return _mkdir(path, mode);\n    },\n    rmdir: function(path, callback) {\n        return _rmdir(path, callback);\n    },\n    rmdirSync: function(path) {\n        return _rmdir(path);\n    },\n    readdir: function(path, callback) {\n        return _readdir(path, callback);\n    },\n    readdirSync: function(path) {\n        return _readdir(path);\n    },\n    readlink: function(path, callback) {\n        return _readlink(path, callback);\n    },\n    readlinkSync: function(path) {\n        return _readlink(path);\n    },\n    symlink: function(target, path, callback) {\n        return _symlink(target, path, callback);\n    },\n    symlinkSync: function(target, path) {\n        return _symlink(target, path);\n    },\n    link: function(target, path, callback) {\n        return _link(target, path, callback);\n    },\n    linkSync: function(target, path) {\n        return _link(target, path);\n    },\n    chmod: function(path, mode, callback) {\n        return _chmod(path, mode, callback);\n    },\n    chmodSync: function(path, mode) {\n        return _chmod(path, mode);\n    },\n    fchmod: function(fd, mode, callback) {\n        return fd.chmod(mode, callback);\n    },\n    fchmodSync: function(fd, mode) {\n        return fd.chmod(mode);\n    },\n    chown: function(path, uid, gid, callback) {\n        return _chown(path, uid, gid, callback);\n    },\n    chownSync: function(path, uid, gid) {\n        return _chown(path, uid, gid);\n    },\n    fchown: function(fd, uid, gid, callback) {\n        return fd.chown(uid, gid, callback);\n    },\n    fchownSync: function(fd, uid, gid) {\n        return fd.chown(uid, gid);\n    },\n    truncate: function(path, len, callback) {\n        return _truncate(path, len, callback);\n    },\n    truncateSync: function(path, len) {\n        return _truncate(path, len);\n    },\n    ftruncate: function(fd, len, callback) {\n        return fd.truncate(len, callback);\n    },\n    ftruncateSync: function(fd, len) {\n        return fd.truncate(len);\n    },\n    ut\n", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    c.sort()\n    x = y = z = 0\n    ans = 0\n    while y < n:\n        while x < n and a[x] < b[y]:\n            x += 1\n        while z < n and c[z] < b[y]:\n            z += 1\n        ans += x * z\n        y += 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "import os\nimport sys\n\n# print(os.getcwd())\n# print(os.listdir())\n\n# os.mkdir('test')\n# os.rmdir('test')\n\n# print(os.path.exists('test'))\n\n# print(os.path.isfile('test'))\n# print(os.path.isdir('test'))\n# print(os.path.isfile('file.py'))\n# print(os.path.isdir('file.py'))\n\n# print(os.path.abspath('file.py'))\n# print(os.path.dirname('file.py'))\n# print(os.path.basename('file.py'))\n# print(os.path.split('file.py'))\n\n# print(os.path.getsize('file.py'))\n# print(os.path.getmtime('file.py'))\n\n# print(os.path.splitext('file.py'))\n# print(os.path.exists('file.py'))\n# print(os.path.exists('file.py'))\n\n# print(sys.argv)\n\n# print(sys.argv[1])\n\n# print(sys.argv)\n\n# if len(sys.argv) == 2:\n#     print(sys.argv[1])\n# else:\n#     print('No argument')\n\n# print(sys.argv)\n\n\n# if len(sys.argv) == 2:\n#     if os.path.isfile(sys.argv[1]):\n#         print(sys.argv[1])\n#     else:\n#         print('File not found')\n# else:\n#     print('No argument')\n\n# print(sys.argv)\n\n# if len(sys.argv) == 2:\n#     if os.path.isfile(sys.argv[1]):\n#         print(sys.argv[1])\n#     else:\n#         print('File not found')\n# else:\n#     print('No argument')\n\n# def print_file(filename):\n#     with open(filename) as f:\n#         print(f.read())\n\n\n# print_file('file.py')\n\n# def print_file(filename):\n#     with open(filename) as f:\n#         for line in f:\n#             print(line)\n\n\n# print_file('file.py')\n\n# def print_file(filename):\n#     with open(filename) as f:\n#         for line in f:\n#             if line.startswith('#'):\n#                 print(line)\n\n\n# print_file('file.py')\n\n# def print_file(filename):\n#     with open(filename) as f:\n#         for line in f:\n#             if line.startswith('#'):\n#                 print(line)\n\n\n# print_file('file.py')\n\n# def print_file(filename):\n#     with open(filename) as f:\n#         for line in f:\n#             if line.startswith('#'):\n#                 print(line)\n\n\n# print_file('file.py')\n\n# def print_file(filename):\n#     with open(filename) as f:\n#         for line in f:\n#             if line.startswith('#'):\n#                 print(line)\n\n\n# print_file('file.py')\n\n# def print_file(filename):\n#     with open(filename) as f:\n#         for line in f:\n#             if line.startswith('#'):\n#                 print(line)\n\n\n# print_file('file.py')\n\n# def print_file(filename):\n#     with open(filename) as f:\n#         for line in f:\n#             if line.startswith('#'):\n#                 print(line)\n\n\n# print_file('file.py')\n\n# def print_file(filename):\n#     with open(filename) as f:\n#         for line in f:\n#             if line.startswith('#'):\n#                 print(line)\n\n\n# print_file('file.py')\n\n# def print_file(filename):\n#     with open(filename) as f:\n#         for line in f:\n#             if line.startswith('#'):\n#                 print(line)\n\n\n# print_file('file.py')\n\n# def print_file(filename):\n#     with open(filename) as f:\n#         for line in f:\n#             if line.startswith('#'):\n#                 print(line)\n\n\n# print_file('file.py')\n\n# def print_file(filename):\n#     with open(filename) as f:\n#         for line in f:\n#             if line.startswith('#'):\n#                 print(line)\n\n\n# print_file('file.py')\n\n# def print_file(filename):\n#     with open(filename) as f:\n#         for line in f:\n#             if line.startswith('#'):\n#                 print(line)\n\n\n# print_file('file.py')\n\n# def print_file(filename):\n#     with open(filename) as f:\n#         for line in f:\n#             if line.startswith('#'):\n#                 print(line)\n\n\n# print_file('file.py')\n\n# def print_file(filename):\n#     with open(filename) as f:\n#         for line in f:\n#             if line.startswith('#'):\n#                 print(line)\n\n\n# print_file('file.py')\n\n# def print_file(filename):\n#     with open(filename) as f:\n#         for line in f:\n#             if line.startswith('#'):\n#                 print(line)\n\n\n# print_file('file.py')\n\n# def print_file(filename):\n#     with open(filename) as f:\n#         for line in f:\n#             if line.startswith('#'):\n#                 print(line)\n\n\n# print_file('file.py')\n\n# def print_file(filename):\n#     with open(filename) as f:\n#         for line in f:\n#             if line.startswith('#'):\n#                 print(line)\n\n\n# print_file('file.py')\n\n# def print_file(filename):\n#     with open(filename) as f:\n#         for line in f:\n#             if line.startswith('#'):\n#                 print(line)\n\n\n# print_file('file.py')\n\n# def print_file(filename):\n#     with open(filename) as f:\n#         for line in f:\n#             if line.startswith('#'):\n#                 print(line)\n\n\n# print_file('file.py')\n\n# def print_file(filename):\n#     with open(filename) as f:\n#         for line in f:\n#             if line.startswith('#'):\n#                 print(line)\n\n\n# print_file('file.py')\n", "def main():\n    n, k = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    if k == 0:\n        print(1)\n        return\n    if k == n:\n        print(l[-1])\n        return\n    if l[k-1] == l[k]:\n        print(-1)\n        return\n    print(l[k-1])\n\n\n\nif __name__ == '__main__':\n    main()\n", "\nfrom sys import stdin\n\nn, k = map(int, stdin.readline().split())\na = sorted(map(int, stdin.readline().split()))\n\nprint(a[k - 1] if k else -1)\n", "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main()\n{\n\tFILE *fptr;\n\tchar fname[20], str[100];\n\tprintf(\"Enter file name: \");\n\tscanf(\"%s\", fname);\n\tfptr = fopen(fname, \"w\");\n\tif (fptr == NULL)\n\t{\n\t\tprintf(\"Cannot open file \\n\");\n\t\texit(0);\n\t}\n\tprintf(\"Enter a string: \");\n\tscanf(\"%[^\\n]s\", str);\n\tfprintf(fptr, \"%s\", str);\n\tfclose(fptr);\n\treturn 0;\n}\n", "from sys import stdin\nn, k = map(int, stdin.readline().split())\na = map(int, stdin.readline().split())\n\nprint(a[k - 1] if k <= n else -1)\n", "\n\ndef main():\n    n, k = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    if k == 0:\n        print(l[0])\n        return\n    if k == n:\n        print(l[-1])\n        return\n    if l[k-1] == l[k]:\n        print(-1)\n        return\n    print(l[k-1])\n\nif __name__ == '__main__':\n    main()\n"]