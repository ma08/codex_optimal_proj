2022-04-18 09:39:26.730922 num operations 1
2022-04-18 09:39:26.730944 size on input set 1
2022-04-18 09:39:34.207243 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest\nfrom itertools import accumulate\n# Problem B\n\nif __name__ == '__main__':\n    N, K = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n\n    # See:\n    # https://beta.atcoder.jp/contests/abc067/submissions/2859138\n    # https://docs.python.org/ja/3/library/itertools.html#itertools.accumulate\n    # https://docs.python.org/ja/3/library/functions.html#enumerate\n    acc = [0] + list(accumulate(A))\n    result = 0\n    for i in range(N - K + 1):\n        result += acc[i + K] - acc[i]\n\n    print(result / (N - K + 1))\n"
    },
    {
      "index": 1,
      "text": "\n\n# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest\n# Problem B\n\nif __name__ == '__main__':\n    string = input()\n    substring = ''\n    result = 0\n\n    for s in string:\n        if s in ['A', 'C', 'G', 'T']:\n            substring += s\n            result = max(result, len(substring))\n        else:\n            substring = ''\n\n    print(result)\n"
    },
    {
      "index": 2,
      "text": "\n\n# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest\n# Problem A\n\nif __name__ == '__main__':\n    N = int(input())\n    print(N * N * N)\n"
    }
  ],
  "created": 1650274766,
  "object": "edit"
}
2022-04-18 09:39:34.207507 fix syntax errors 3 ["\n\n# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest\nfrom itertools import accumulate\n# Problem B\n\nif __name__ == '__main__':\n    N, K = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n\n    # See:\n    # https://beta.atcoder.jp/contests/abc067/submissions/2859138\n    # https://docs.python.org/ja/3/library/itertools.html#itertools.accumulate\n    # https://docs.python.org/ja/3/library/functions.html#enumerate\n    acc = [0] + list(accumulate(A))\n    result = 0\n    for i in range(N - K + 1):\n        result += acc[i + K] - acc[i]\n\n    print(result / (N - K + 1))\n", "\n\n# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest\n# Problem B\n\nif __name__ == '__main__':\n    string = input()\n    substring = ''\n    result = 0\n\n    for s in string:\n        if s in ['A', 'C', 'G', 'T']:\n            substring += s\n            result = max(result, len(substring))\n        else:\n            substring = ''\n\n    print(result)\n", "\n\n# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest\n# Problem A\n\nif __name__ == '__main__':\n    N = int(input())\n    print(N * N * N)\n"]
2022-04-18 09:39:34.207555 size on output set 3
2022-04-18 09:39:34.207576 num operations 1
2022-04-18 09:39:34.207587 size on input set 1
2022-04-18 09:39:41.152091 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\ns = input()\n\n# create a list of substrings of s that are only A, C, G, and T\nacgt_strings = []\nfor i in range(len(s)):\n    for j in range(i+1, len(s)+1):\n        acgt_string = s[i:j]\n        if \"A\" in acgt_string and \"C\" in acgt_string and \"G\" in acgt_string and \"T\" in acgt_string:\n            acgt_strings.append(acgt_string)\n\n# print the length of the longest substring\nprint(max([len(acgt_string) for acgt_string in acgt_strings]), end=\"\")\n"
    },
    {
      "index": 1,
      "text": "\n\ns = \"ATCGGGAGT\"\n\n# create a list of substrings of s that are only A, C, G, and T\nacgt_strings = []\nfor i in range(len(s)):\n    for j in range(i + 1, len(s) + 1):\n        acgt_string = s[i:j]\n        if \"A\" in acgt_string and \"C\" in acgt_string and \"G\" in acgt_string and \"T\" in acgt_string:\n            acgt_strings.append(acgt_string)\n\n# print the length of the longest substring\nprint(max([len(acgt_string) for acgt_string in acgt_strings]))\n"
    },
    {
      "index": 2,
      "text": "\n\ns = input()\n\n# create a list of substrings of s that are only A, C, G, and T and print the length of the longest substring\nprint(max([len(acgt_string) for acgt_string in [s[i:j] for i in range(len(s)) for j in range(i+1, len(s)+1) if \"A\" in s[i:j] and \"C\" in s[i:j] and \"G\" in s[i:j] and \"T\" in s[i:j]]]))\n"
    }
  ],
  "created": 1650274774,
  "object": "edit"
}
2022-04-18 09:39:41.152337 fix syntax errors 3 ['#!/usr/bin/env python3\n\ns = input()\n\n# create a list of substrings of s that are only A, C, G, and T\nacgt_strings = []\nfor i in range(len(s)):\n    for j in range(i+1, len(s)+1):\n        acgt_string = s[i:j]\n        if "A" in acgt_string and "C" in acgt_string and "G" in acgt_string and "T" in acgt_string:\n            acgt_strings.append(acgt_string)\n\n# print the length of the longest substring\nprint(max([len(acgt_string) for acgt_string in acgt_strings]), end="")\n', '\n\ns = "ATCGGGAGT"\n\n# create a list of substrings of s that are only A, C, G, and T\nacgt_strings = []\nfor i in range(len(s)):\n    for j in range(i + 1, len(s) + 1):\n        acgt_string = s[i:j]\n        if "A" in acgt_string and "C" in acgt_string and "G" in acgt_string and "T" in acgt_string:\n            acgt_strings.append(acgt_string)\n\n# print the length of the longest substring\nprint(max([len(acgt_string) for acgt_string in acgt_strings]))\n', '\n\ns = input()\n\n# create a list of substrings of s that are only A, C, G, and T and print the length of the longest substring\nprint(max([len(acgt_string) for acgt_string in [s[i:j] for i in range(len(s)) for j in range(i+1, len(s)+1) if "A" in s[i:j] and "C" in s[i:j] and "G" in s[i:j] and "T" in s[i:j]]]))\n']
2022-04-18 09:39:41.152385 size on output set 3
2022-04-18 09:39:41.152404 num operations 1
2022-04-18 09:39:41.152415 size on input set 1
2022-04-18 09:39:44.579127 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "print('hello world')\n"
    },
    {
      "index": 1,
      "text": "print('Hello, world!')\n"
    },
    {
      "index": 2,
      "text": "s = input()\nans = 0\nfor i in range(len(s)):\n    for j in range(i+1,len(s)+1):\n        if s[i:j].upper() == s[i:j]:\n            ans = max(ans,j-i)\nprint(ans)\n"
    }
  ],
  "created": 1650274781,
  "object": "edit"
}
2022-04-18 09:39:44.579440 fix syntax errors 3 ["print('hello world')\n", "print('Hello, world!')\n", 's = input()\nans = 0\nfor i in range(len(s)):\n    for j in range(i+1,len(s)+1):\n        if s[i:j].upper() == s[i:j]:\n            ans = max(ans,j-i)\nprint(ans)\n']
2022-04-18 09:39:44.579493 size on output set 3
