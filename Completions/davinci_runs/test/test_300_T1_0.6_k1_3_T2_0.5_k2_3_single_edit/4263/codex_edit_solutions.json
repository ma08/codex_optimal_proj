["\n\n# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest\n# Problem B\n\nif __name__ == '__main__':\n    string = input()\n    substring = ''\n    result = 0\n\n    for s in string:\n        if s in ['A', 'C', 'G', 'T']:\n            substring += s\n            result = max(result, len(substring))\n        else:\n            substring = ''\n\n    print(result)\n", "\n\ns = \"ATCGGGAGT\"\n\n# create a list of substrings of s that are only A, C, G, and T\nacgt_strings = []\nfor i in range(len(s)):\n    for j in range(i + 1, len(s) + 1):\n        acgt_string = s[i:j]\n        if \"A\" in acgt_string and \"C\" in acgt_string and \"G\" in acgt_string and \"T\" in acgt_string:\n            acgt_strings.append(acgt_string)\n\n# print the length of the longest substring\nprint(max([len(acgt_string) for acgt_string in acgt_strings]))\n", "print('Hello, world!')\n", "\n\n# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest\n# Problem A\n\nif __name__ == '__main__':\n    N = int(input())\n    print(N * N * N)\n", "s = input()\nans = 0\nfor i in range(len(s)):\n    for j in range(i+1,len(s)+1):\n        if s[i:j].upper() == s[i:j]:\n            ans = max(ans,j-i)\nprint(ans)\n", "print('hello world')\n", "\n\n# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest\nfrom itertools import accumulate\n# Problem B\n\nif __name__ == '__main__':\n    N, K = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n\n    # See:\n    # https://beta.atcoder.jp/contests/abc067/submissions/2859138\n    # https://docs.python.org/ja/3/library/itertools.html#itertools.accumulate\n    # https://docs.python.org/ja/3/library/functions.html#enumerate\n    acc = [0] + list(accumulate(A))\n    result = 0\n    for i in range(N - K + 1):\n        result += acc[i + K] - acc[i]\n\n    print(result / (N - K + 1))\n", "\n\ns = input()\n\n# create a list of substrings of s that are only A, C, G, and T and print the length of the longest substring\nprint(max([len(acgt_string) for acgt_string in [s[i:j] for i in range(len(s)) for j in range(i+1, len(s)+1) if \"A\" in s[i:j] and \"C\" in s[i:j] and \"G\" in s[i:j] and \"T\" in s[i:j]]]))\n", "#!/usr/bin/env python3\n\ns = input()\n\n# create a list of substrings of s that are only A, C, G, and T\nacgt_strings = []\nfor i in range(len(s)):\n    for j in range(i+1, len(s)+1):\n        acgt_string = s[i:j]\n        if \"A\" in acgt_string and \"C\" in acgt_string and \"G\" in acgt_string and \"T\" in acgt_string:\n            acgt_strings.append(acgt_string)\n\n# print the length of the longest substring\nprint(max([len(acgt_string) for acgt_string in acgt_strings]), end=\"\")\n"]