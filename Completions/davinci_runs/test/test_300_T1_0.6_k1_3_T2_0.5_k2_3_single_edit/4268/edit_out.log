2022-04-18 09:41:38.813132 num operations 1
2022-04-18 09:41:38.813154 size on input set 1
2022-04-18 09:41:45.045796 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom sys import stdin\n\nstdin.readline()\npoints = [tuple(map(int, line.strip().split())) for line in stdin.readlines()]\n\ndef sq(n):\n    return n*n\n\n# This is O(n^2) time and O(n) space.\ndef num_pairs_with_integer_distance(points):\n    num_pairs = 0\n    distances = {}\n    for p1 in points:\n        for p2 in points:\n            if p1 == p2:\n                continue\n            key = tuple(sorted([p1, p2]))\n            if key in distances:\n                continue\n            else:\n                distances[key] = sum(sq(x1 - x2) for x1, x2 in zip(p1, p2))\n            if distances[key] == int(distances[key]):\n                num_pairs += 1\n    return num_pairs\n\nprint(num_pairs_with_integer_distance(points))\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import stdin\n\nstdin.readline()\npoints = [tuple(map(int, line.strip().split())) for line in stdin.readlines()]\n\ndef sq(n):\n    return n*n\n\n# This is O(n^2) time and O(n^2) space.\ndef num_pairs_with_integer_distance(points):\n    num_pairs = 0\n    distances = {}\n    for p1 in points:\n        for p2 in points:\n            if p1 == p2:\n                continue\n            key = tuple(sorted([p1, p2]))\n            if key in distances:\n                continue\n            else:\n                distances[key] = sum(sq(x1 - x2) for x1, x2 in zip(p1, p2))\n            if distances[key] == int(distances[key])**0.5:\n                num_pairs += 1\n    return num_pairs\n\nprint(num_pairs_with_integer_distance(points))\n"
    },
    {
      "index": 2,
      "text": "\nimport math\nfrom sys import stdin\n\nstdin.readline()\npoints = [tuple(map(int, line.strip().split())) for line in stdin.readlines()]\n\ndef is_integer(n):\n    return n == int(n)\n\n# This is O(n^2) time and O(n^2) space.\ndef num_pairs_with_integer_distance(points):\n    num_pairs = 0\n    distances = {}\n    for p1 in points:\n        for p2 in points:\n            if p1 == p2:\n                continue\n            distance = math.sqrt(sum((x1 - x2)**2 for x1, x2 in zip(p1, p2)))\n            if is_integer(distance):\n                num_pairs += 1\n    return num_pairs\n\nprint(num_pairs_with_integer_distance(points))\n"
    }
  ],
  "created": 1650274898,
  "object": "edit"
}
2022-04-18 09:41:45.046131 fix syntax errors 3 ['\nfrom sys import stdin\n\nstdin.readline()\npoints = [tuple(map(int, line.strip().split())) for line in stdin.readlines()]\n\ndef sq(n):\n    return n*n\n\n# This is O(n^2) time and O(n) space.\ndef num_pairs_with_integer_distance(points):\n    num_pairs = 0\n    distances = {}\n    for p1 in points:\n        for p2 in points:\n            if p1 == p2:\n                continue\n            key = tuple(sorted([p1, p2]))\n            if key in distances:\n                continue\n            else:\n                distances[key] = sum(sq(x1 - x2) for x1, x2 in zip(p1, p2))\n            if distances[key] == int(distances[key]):\n                num_pairs += 1\n    return num_pairs\n\nprint(num_pairs_with_integer_distance(points))\n', '\n\nfrom sys import stdin\n\nstdin.readline()\npoints = [tuple(map(int, line.strip().split())) for line in stdin.readlines()]\n\ndef sq(n):\n    return n*n\n\n# This is O(n^2) time and O(n^2) space.\ndef num_pairs_with_integer_distance(points):\n    num_pairs = 0\n    distances = {}\n    for p1 in points:\n        for p2 in points:\n            if p1 == p2:\n                continue\n            key = tuple(sorted([p1, p2]))\n            if key in distances:\n                continue\n            else:\n                distances[key] = sum(sq(x1 - x2) for x1, x2 in zip(p1, p2))\n            if distances[key] == int(distances[key])**0.5:\n                num_pairs += 1\n    return num_pairs\n\nprint(num_pairs_with_integer_distance(points))\n', '\nimport math\nfrom sys import stdin\n\nstdin.readline()\npoints = [tuple(map(int, line.strip().split())) for line in stdin.readlines()]\n\ndef is_integer(n):\n    return n == int(n)\n\n# This is O(n^2) time and O(n^2) space.\ndef num_pairs_with_integer_distance(points):\n    num_pairs = 0\n    distances = {}\n    for p1 in points:\n        for p2 in points:\n            if p1 == p2:\n                continue\n            distance = math.sqrt(sum((x1 - x2)**2 for x1, x2 in zip(p1, p2)))\n            if is_integer(distance):\n                num_pairs += 1\n    return num_pairs\n\nprint(num_pairs_with_integer_distance(points))\n']
2022-04-18 09:41:45.046185 size on output set 3
2022-04-18 09:41:45.046204 num operations 1
2022-04-18 09:41:45.046214 size on input set 1
2022-04-18 09:41:47.984973 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\nimport math\n\nN, D = list(map(int, input().split())) # N: Number of points, D: Dimension\npoints = list()\n\nfor i in range(N):\n    points.append(list(map(int, input().split())))\n\nnum_pairs = 0\n\nfor i in range(N):\n    for j in range(i + 1, N):\n        distance = 0\n        for k in range(D):\n            distance += (points[i][k] - points[j][k]) ** 2\n        distance = math.sqrt(distance)\n\n        if distance % 1 == 0:\n            num_pairs += 1\n\nprint(num_pairs)\n"
    },
    {
      "index": 1,
      "text": "\nimport math\n\nN, D = list(map(int, input().split()))\npoints = list()\n\nfor i in range(N):\n    points.append(list(map(int, input().split())))\n\nnum_pairs = 0\n\nfor i in range(N):\n    for j in range(i + 1, N):\n        distance = 0\n        for k in range(D):\n            distance += (points[i][k] - points[j][k]) ** 2\n        distance = math.sqrt(distance)\n\n        if distance % 1 == 0:\n            num_pairs += 1\n\nprint(num_pairs)\n"
    },
    {
      "index": 2,
      "text": "\nimport math\n\nN, D = list(map(int, input().split()))\npoints = list()\n\nfor i in range(N):\n    points.append(list(map(int, input().split())))\n\nnum_pairs = 0\n\nfor i in range(N):\n    for j in range(i + 1, N):\n        distance = 0\n        for k in range(D):\n            distance += (points[i][k] - points[j][k]) ** 2\n        distance = math.sqrt(distance)\n\n        if distance % 1 == 0:\n            num_pairs += 1\n\nprint(num_pairs)\n"
    }
  ],
  "created": 1650274905,
  "object": "edit"
}
2022-04-18 09:41:47.985250 fix syntax errors 3 ['#!/usr/bin/env python3\n\nimport math\n\nN, D = list(map(int, input().split())) # N: Number of points, D: Dimension\npoints = list()\n\nfor i in range(N):\n    points.append(list(map(int, input().split())))\n\nnum_pairs = 0\n\nfor i in range(N):\n    for j in range(i + 1, N):\n        distance = 0\n        for k in range(D):\n            distance += (points[i][k] - points[j][k]) ** 2\n        distance = math.sqrt(distance)\n\n        if distance % 1 == 0:\n            num_pairs += 1\n\nprint(num_pairs)\n', '\nimport math\n\nN, D = list(map(int, input().split()))\npoints = list()\n\nfor i in range(N):\n    points.append(list(map(int, input().split())))\n\nnum_pairs = 0\n\nfor i in range(N):\n    for j in range(i + 1, N):\n        distance = 0\n        for k in range(D):\n            distance += (points[i][k] - points[j][k]) ** 2\n        distance = math.sqrt(distance)\n\n        if distance % 1 == 0:\n            num_pairs += 1\n\nprint(num_pairs)\n', '\nimport math\n\nN, D = list(map(int, input().split()))\npoints = list()\n\nfor i in range(N):\n    points.append(list(map(int, input().split())))\n\nnum_pairs = 0\n\nfor i in range(N):\n    for j in range(i + 1, N):\n        distance = 0\n        for k in range(D):\n            distance += (points[i][k] - points[j][k]) ** 2\n        distance = math.sqrt(distance)\n\n        if distance % 1 == 0:\n            num_pairs += 1\n\nprint(num_pairs)\n']
2022-04-18 09:41:47.985294 size on output set 2
2022-04-18 09:41:47.985313 num operations 1
2022-04-18 09:41:47.985324 size on input set 1
2022-04-18 09:41:55.298681 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef distance(point1, point2):\n    sum = 0\n    for i in range(len(point1)):\n        sum += (point1[i] - point2[i])**2\n    return sum\n\ndef main():\n    num_points, dim = map(int, input().split())\n    points = []\n    for _ in range(num_points):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(num_points):\n        for j in range(i+1, num_points):\n            if int(distance(points[i], points[j])**0.5) == (distance(points[i], points[j])**0.5):\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef distance(point1, point2):\n    sum = 0\n    for i in range(len(point1)):\n        sum += (point1[i] - point2[i])**2\n    return sum**0.5\n\ndef main():\n    num_points, dim = map(int, input().split())\n    points = []\n    for _ in range(num_points):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(num_points):\n        for j in range(i+1, num_points):\n            if int(distance(points[i], points[j])) == distance(points[i], points[j]):\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\ndef distance(point1):\n    return point1[0]**2 + point1[1]**2\n\ndef main():\n    num_points = int(sys.stdin.readline())\n    points = []\n    for _ in range(num_points):\n        x, y = map(int, sys.stdin.readline().split())\n        points.append((x, y))\n    count = 0\n    for i in range(num_points):\n        for j in range(i+1, num_points):\n            if int(distance(points[i] - points[j])**0.5) == distance(points[i] - points[j])**0.5:\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650274908,
  "object": "edit"
}
2022-04-18 09:41:55.299027 fix syntax errors 3 ["\n\ndef distance(point1, point2):\n    sum = 0\n    for i in range(len(point1)):\n        sum += (point1[i] - point2[i])**2\n    return sum\n\ndef main():\n    num_points, dim = map(int, input().split())\n    points = []\n    for _ in range(num_points):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(num_points):\n        for j in range(i+1, num_points):\n            if int(distance(points[i], points[j])**0.5) == (distance(points[i], points[j])**0.5):\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef distance(point1, point2):\n    sum = 0\n    for i in range(len(point1)):\n        sum += (point1[i] - point2[i])**2\n    return sum**0.5\n\ndef main():\n    num_points, dim = map(int, input().split())\n    points = []\n    for _ in range(num_points):\n        points.append(list(map(int, input().split())))\n    count = 0\n    for i in range(num_points):\n        for j in range(i+1, num_points):\n            if int(distance(points[i], points[j])) == distance(points[i], points[j]):\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef distance(point1):\n    return point1[0]**2 + point1[1]**2\n\ndef main():\n    num_points = int(sys.stdin.readline())\n    points = []\n    for _ in range(num_points):\n        x, y = map(int, sys.stdin.readline().split())\n        points.append((x, y))\n    count = 0\n    for i in range(num_points):\n        for j in range(i+1, num_points):\n            if int(distance(points[i] - points[j])**0.5) == distance(points[i] - points[j])**0.5:\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-18 09:41:55.299104 size on output set 3
