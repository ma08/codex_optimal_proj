["\n\n\nimport fractions\nimport itertools\nimport math\nimport sys\n\nsys.setrecursionlimit(10**7)\n\ndef I(): return int(sys.stdin.readline())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef IR(n): return [I() for i in range(n)]\ndef LIR(n): return [LI() for i in range(n)]\ndef SR(n): return [S() for i in range(n)]\ndef S(): return sys.stdin.readline().rstrip()\ndef LS(): return sys.stdin.readline().split()\n\nINF = float('inf')\n\n\nn = I()\nL = LI()\nL.sort()\nans = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        for k in range(j+1, n):\n            if L[i] != L[j] and L[j] != L[k] and L[k] != L[i]:\n                if L[i] + L[j] > L[k] and L[k] + L[j] > L[i] and L[i] + L[k] > L[j]:\n                    ans += 1\nprint(ans)\n", "# coding: utf-8\n\n\nn = int(input()) # n \uac12\uc744 \uc785\ub825\ubc1b\uc74c\nl = list(map(int, input().split())) # l\uc744 \uc785\ub825\ubc1b\ub294\ub370 \uc785\ub825\ubc1b\uc740 \uac12\uc744 \uc815\uc218\ud615\uc73c\ub85c \ubc14\uafd4\uc11c \ub9ac\uc2a4\ud2b8\ub85c \ub123\uc74c\n\ncnt = 0 # cnt\ub97c 0\uc73c\ub85c \ucd08\uae30\ud654\nfor i in range(n): # i\ub97c 0\ubd80\ud130 n\uae4c\uc9c0 \ubc18\ubcf5\n    for j in range(i+1, n): # j\ub97c i+1\ubd80\ud130 n\uae4c\uc9c0 \ubc18\ubcf5\n        for k in range(j+1, n): # k\ub97c j+1\ubd80\ud130 n\uae4c\uc9c0 \ubc18\ubcf5\n            if l[i] + l[j] > l[k] and l[i] + l[k] > l[j] and l[j] + l[k] > l[i]: # \uc870\uac74\uc5d0 \ub9de\ub294 \uacbd\uc6b0\n                cnt += 1 # cnt\ub97c 1\uc529 \uc99d\uac00\n\nprint(cnt)\n", "import sys\n\n\ndef main():\n    n = int(sys.stdin.readline())\n    l = list(map(int, sys.stdin.readline().split()))\n    ans = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if l[i] < l[j] + l[k] and l[j] < l[i] + l[k] and l[k] < l[i] + l[j]:\n                    ans += 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\nimport fractions\nimport itertools\nimport math\nimport sys\n\nsys.setrecursionlimit(10**7)\n\ndef I(): return int(sys.stdin.readline())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef IR(n): return [I() for i in range(n)]\ndef LIR(n): return [LI() for i in range(n)]\ndef SR(n): return [S() for i in range(n)]\ndef S(): return sys.stdin.readline().rstrip()\ndef LS(): return sys.stdin.readline().split()\n\nINF = float('inf')\n\n\nn = I()\nL = LI()\nL.sort()\nans = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        for k in range(j+1, n):\n            if L[i] != L[j] and L[j] != L[k] and L[k] != L[i]:\n                if L[i] + L[j] > L[k] and L[k] + L[j] > L[i] and L[i] + L[k] > L[j]:\n                    ans += 1\nprint(ans)\n", "\nn = int(input())\nl = list(map(int, input().split()))\n\ncnt = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        for k in range(j+1, n):\n            if l[i] + l[j] > l[k] and l[i] + l[k] > l[j] and l[j] + l[k] > l[i]:\n                cnt += 1\n\nprint(cnt)\n", "\n\nimport fractions\nimport itertools\nimport math\nimport sys\n\nsys.setrecursionlimit(10**7)\n\ndef I(): return int(sys.stdin.readline())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef IR(n): return [I() for i in range(n)]\ndef LIR(n): return [LI() for i in range(n)]\ndef SR(n): return [S() for i in range(n)]\ndef S(): return sys.stdin.readline().rstrip()\ndef LS(): return sys.stdin.readline().split()\n\nINF = float('inf')\n\n\nn = I()\nL = LI()\nans = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        for k in range(j+1, n):\n            if L[i] != L[j] and L[j] != L[k] and L[k] != L[i]:\n                if L[i] + L[j] > L[k] and L[k] + L[j] > L[i] and L[i] + L[k] > L[j]:\n                    ans += 1\nprint(ans)\n", "\ndef main():\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if l[i] < l[j] + l[k] and l[j] < l[i] + l[k] and l[k] < l[i] + l[j]:\n                    ans += 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    a, b, c = map(int, input().split())\n    if a + b >= c:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif __name__ == '__main__':\n    main()\n"]