["import sys\n\ndef read_input(path):\n    if not path:\n        path = './input.txt'\n    with open(path) as f:\n        lines = [line.rstrip() for line in f]\n    return lines\n\ndef process_input(lines):\n    card = []\n    for i in range(3):\n        card.append([int(x) for x in lines[i].split(' ')])\n    bs = [int(x) for x in lines[4:]]\n    return card, bs\n\ndef is_bingo(card, bs):\n    for i in range(3):\n        for j in range(3):\n            for b in bs:\n                if b == card[i][j]:\n                    card[i][j] = -1\n    for i in range(3):\n        if card[i][0] == -1 and card[i][1] == -1 and card[i][2] == -1:\n            return True\n    for j in range(3):\n        if card[0][j] == -1 and card[1][j] == -1 and card[2][j] == -1:\n            return True\n    if card[0][0] == -1 and card[1][1] == -1 and card[2][2] == -1:\n        return True\n    if card[2][0] == -1 and card[1][1] == -1 and card[0][2] == -1:\n        return True\n    return False\n\ndef write_output(path, output):\n    if not path:\n        path = './output.txt'\n    with open(path, mode='w') as f:\n        f.write(output)\n\ndef main(path=''):\n    lines = read_input(path)\n    card, bs = process_input(lines)\n    output = 'Yes' if is_bingo(card, bs) else 'No'\n    write_output(path, output)\n\nif __name__ == \"__main__\":\n    main(sys.argv[1])\n", "\n\n# --- My answer ---\ndef bingo(sheet):\n    for i in range(3):\n        if sum(sheet[i]) == 0:\n            return True\n        if sum([sheet[0][i], sheet[1][i], sheet[2][i]]) == 0:\n            return True\n    if sum([sheet[0][0], sheet[1][1], sheet[2][2]]) == 0:\n        return True\n    if sum([sheet[0][2], sheet[1][1], sheet[2][0]]) == 0:\n        return True\n    return False\n\ndef main(input_list):\n    sheet = [input_list[i:i+3] for i in range(0, 9, 3)]\n    bingo_nums = [int(input_list[i]) for i in range(9, len(input_list))]\n\n    for b in bingo_nums:\n        for i in range(3):\n            if b in sheet[i]:\n                sheet[i][sheet[i].index(b)] = 0\n\n    if bingo(sheet):\n        print('Yes')\n    else:\n        print('No')\n\nif __name__ == '__main__':\n    input_list = input().split()\n    main(input_list)\n\n# --- Book answer ---\ndef bingo(sheet, nums):\n    for i in range(3):\n        if sum(sheet[i]) == 0:\n            return True\n        if sum([sheet[0][i], sheet[1][i], sheet[2][i]]) == 0:\n            return True\n    if sum([sheet[0][0], sheet[1][1], sheet[2][2]]) == 0:\n        return True\n    if sum([sheet[0][2], sheet[1][1], sheet[2][0]]) == 0:\n        return True\n    return False\n\ndef main(input_list):\n    sheet = [list(map(int, input_list[i:i+3])) for i in range(0, 9, 3)]\n    nums = list(map(int, input_list[9:]))\n\n    for num in nums:\n        for i in range(3):\n            if num in sheet[i]:\n                sheet[i][sheet[i].index(num)] = 0\n    if bingo(sheet, nums):\n        print('Yes')\n    else:\n        print('No')\n\nif __name__ == '__main__':\n    input_list = input().split()\n    main(input_list)\n", "\n\n# --- My answer ---\ndef bingo(sheet, bingo_nums):\n    sheet_set = set(sheet)\n    if len(sheet_set) < 3 or bingo_nums.count(0) < 3:\n        return False\n    else:\n        for row in sheet:\n            if len(set(row)) == 1:\n                return True\n        for i in range(3):\n            if len(set([row[i] for row in sheet])) == 1:\n                return True\n        if len(set([sheet[i][i] for i in range(3)])) == 1:\n            return True\n        if len(set([sheet[i][2-i] for i in range(3)])) == 1:\n            return True\n    return False\n\ndef main(input_list):\n    sheet = [input_list[i:i+3] for i in range(0, 9, 3)] # 3x3\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u308b\n    bingo_nums = [int(input_list[i]) for i in range(9, len(input_list))] # bingo\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u308b\n\n    for b in bingo_nums:\n        for i in range(3):\n            if b in sheet[i]: # bingo\u306e\u30ea\u30b9\u30c8\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u5024\u304c3x3\u306e\u30ea\u30b9\u30c8\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\n                sheet[i][sheet[i].index(b)] = 0 # \u542b\u307e\u308c\u3066\u3044\u305f\u30890\u306b\u5909\u63db\n\n    if bingo(sheet):\n        print('Yes')\n    else:\n        print('No')\n\nif __name__ == '__main__':\n    input_list = input().split()\n    main(input_list)\n\n# --- Book answer ---\ndef bingo(sheet, nums):\n    for i in range(3):\n        if sum(sheet[i]) == 0:\n            return True\n        if sum([sheet[0][i], sheet[1][i], sheet[2][i]]) == 0:\n            return True\n    if sum([sheet[0][0], sheet[1][1], sheet[2][2]]) == 0:\n        return True\n    if sum([sheet[0][2], sheet[1][1], sheet[2][0]]) == 0:\n        return True\n    return False\n\ndef main(input_list):\n    sheet = [list(map(int, input_list[i:i+3])) for i in range(0, 9, 3)]\n    nums = list(map(int, input_list[9:]))\n\n    for num in nums:\n        for i in range(3):\n            if num in sheet[i]:\n                sheet[i][sheet[i].index(num)] = 0\n    if bingo(sheet, nums):\n        print('Yes')\n    else:\n        print('No')\n\nif __name__ == '__main__':\n    input_list = input().split()\n    main(input_list)\n", "\nimport sys\n\ndef read_input(path):\n    if not path:\n        path = './input.txt'\n    with open(path) as f:\n        lines = [line.rstrip() for line in f]\n    return lines\n\ndef process_input(lines):\n    card = []\n    for i in range(3):\n        card.append([int(x) for x in lines[i].split(' ')])\n    bs = [int(x) for x in lines[4:]]\n    return card, bs\n\ndef is_bingo(card, bs):\n    for i in range(3):\n        for j in range(3):\n            for b in bs:\n                if b == card[i][j]:\n                    card[i][j] = -1\n    for i in range(3):\n        if card[i][0] == -1 and card[i][1] == -1 and card[i][2] == -1:\n            return True\n    for j in range(3):\n        if card[0][j] == -1 and card[1][j] == -1 and card[2][j] == -1:\n            return True\n    if card[0][0] == -1 and card[1][1] == -1 and card[2][2] == -1:\n        return True\n    if card[2][0] == -1 and card[1][1] == -1 and card[0][2] == -1:\n        return True\n    return False\n\ndef write_output(path, output):\n    if not path:\n        path = './output.txt'\n    with open(path, mode='w') as f:\n        f.write(output)\n\ndef main(path=''):\n    lines = read_input(path)\n    card, bs = process_input(lines)\n    output = 'Yes' if is_bingo(card, bs) else 'No'\n    write_output(path, output)\n\nif __name__ == \"__main__\":\n    main(sys.argv[1])\n", "\n\nimport sys\n\ndef read_input(path):\n    if not path:\n        path = './input.txt'\n    with open(path) as f:\n        lines = [line.rstrip() for line in f]\n    return lines\n\ndef process_input(lines):\n    card = [[int(x) for x in lines[i].split(' ')] for i in range(3)]\n    bs = [int(x) for x in lines[3:]]\n    return card, bs\n\ndef is_bingo(card, bs):\n    for i in range(3):\n        for j in range(3):\n            for b in bs:\n                if b == card[i][j]:\n                    card[i][j] = -1\n    for i in range(3):\n        if card[i][0] == -1 and card[i][1] == -1 and card[i][2] == -1:\n            return True\n    for j in range(3):\n        if card[0][j] == -1 and card[1][j] == -1 and card[2][j] == -1:\n            return True\n    if card[0][0] == -1 and card[1][1] == -1 and card[2][2] == -1:\n        return True\n    if card[2][0] == -1 and card[1][1] == -1 and card[0][2] == -1:\n        return True\n    return False\n\ndef write_output(path, output):\n    if not path:\n        path = './output.txt'\n    with open(path, mode='w') as f:\n        f.write(output)\n\ndef main(path=''):\n    lines = read_input(path)\n    card, bs = process_input(lines)\n    output = 'Yes' if is_bingo(card, bs) else 'No'\n    write_output(path, output)\n\nif __name__ == \"__main__\":\n    main(sys.argv[1])\n", "import sys\n\n# Read data\na = [list(map(int, line.split())) for line in sys.stdin.readlines()[:3]] # noqa\nb = [int(line.rstrip()) for line in sys.stdin.readlines()[3:]] # noqa\n\n# Check bingo\n# Check horizontal\nfor i in range(3):\n    if len(set(a[i]) & set(b)) == 3:\n        print(\"Yes\") # noqa\n        sys.exit() # noqa\n\n# Check vertical\nfor j in range(3):\n    if len(set([a[i][j] for i in range(3)]) & set(b)) == 3:\n        print(\"Yes\") # noqa\n        sys.exit() # noqa\n\n# Check diagonal\nif len(set([a[i][i] for i in range(3)]) & set(b)) == 3:\n    print(\"Yes\") # noqa\n    sys.exit() # noqa\nif len(set([a[i][2-i] for i in range(3)]) & set(b)) == 3:\n    print(\"Yes\") # noqa\n    sys.exit() # noqa\n\n# No bingo\nprint(\"No\")\n", "import sys\n\n# Read data\na = [list(map(int, line.split())) for line in sys.stdin.readlines()[:3]]\nb = [int(line.rstrip()) for line in sys.stdin.readlines()[3:]]\n\n# Check bingo\n# Check horizontal\nfor i in range(3):\n    if len(set(a[i]) & set(b)) == 3:\n        print(\"Yes\")\n        sys.exit()\n\n# Check vertical\nfor j in range(3):\n    if len(set([a[i][j] for i in range(3)]) & set(b)) == 3:\n        print(\"Yes\")\n        sys.exit()\n\n# Check diagonal\nif len(set([a[i][i] for i in range(3)]) & set(b)) == 3:\n    print(\"Yes\")\n    sys.exit()\nif len(set([a[i][2-i] for i in range(3)]) & set(b)) == 3:\n    print(\"Yes\")\n    sys.exit()\n\n# No bingo\nprint(\"No\")\n", "\n\ndef bingo(sheet):\n    sheet_set = set(sheet)\n    if len(sheet_set) < 3:\n        return False\n    else:\n        for row in sheet:\n            if len(set(row)) == 1:\n                return True\n        for i in range(3):\n            if len(set([row[i] for row in sheet])) == 1:\n                return True\n        if len(set([sheet[i][i] for i in range(3)])) == 1:\n            return True\n        if len(set([sheet[i][2-i] for i in range(3)])) == 1:\n            return True\n    return False\n\ndef main():\n    sheet = [list(map(int, input().split())) for _ in range(3)]\n    bingo_nums = list(map(int, input().split()))\n\n    for b in bingo_nums:\n        for i in range(3):\n            if b in sheet[i]:\n                sheet[i][sheet[i].index(b)] = 0\n\n        if bingo(sheet):\n        print('Yes')\n    else:\n        print('No')\n\nif __name__ == '__main__':\n    input_list = input().split()\n    main()\n\ndef bingo(sheet, nums):\n    for i in range(3):\n        if sum(sheet[i]) == 0:\n            return True\n        if sum([sheet[0][i], sheet[1][i], sheet[2][i]]) == 0:\n            return True\n    if sum([sheet[0][0], sheet[1][1], sheet[2][2]]) == 0:\n        return True\n    if sum([sheet[0][2], sheet[1][1], sheet[2][0]]) == 0:\n        return True\n    return False\n\ndef main():\n    sheet = [list(map(int, input().split())) for _ in range(3)]\n    nums = list(map(int, input().split()))\n\n    for num in nums:\n        for i in range(3):\n            if num in sheet[i]:\n                sheet[i][sheet[i].index(num)] = 0\n    if bingo(sheet, nums):\n        print('Yes')\n    else:\n        print('No')\n\nif __name__ == '__main__':\n    input_list = input().split()\n    main(input_list)\n"]