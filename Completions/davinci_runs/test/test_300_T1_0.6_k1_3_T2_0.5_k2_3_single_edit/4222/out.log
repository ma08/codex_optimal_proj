2022-04-18 03:32:55.837389 """
N Snukes called Snuke 1, Snuke 2, ..., Snuke N live in a town.
There are K kinds of snacks sold in this town, called Snack 1, Snack 2, ..., Snack K. The following d_i Snukes have Snack i: Snuke A_{i, 1}, A_{i, 2}, \cdots, A_{i, {d_i}}.
Takahashi will walk around this town and make mischief on the Snukes who have no snacks. How many Snukes will fall victim to Takahashi's mischief?

-----Constraints-----
 - All values in input are integers.
 - 1 \leq N \leq 100
 - 1 \leq K \leq 100
 - 1 \leq d_i \leq N
 - 1 \leq A_{i, 1} < \cdots < A_{i, d_i} \leq N

-----Input-----
Input is given from Standard Input in the following format:
N K
d_1
A_{1, 1} \cdots A_{1, d_1}
\vdots
d_K
A_{K, 1} \cdots A_{K, d_K}

-----Output-----
Print the answer.

-----Sample Input-----
3 2
2
1 3
1
3

-----Sample Output-----
1

 - Snuke 1 has Snack 1.
 - Snuke 2 has no snacks.
 - Snuke 3 has Snack 1 and 2.
Thus, there will be one victim: Snuke 2.
"""
2022-04-18 03:32:55.837404 --------------------------
2022-04-18 03:34:30.603970 {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef main():\n    N, K = map(int, input().split())\n    d = []\n    A = []\n    for i in range(K):\n        di = int(input())\n        Ai = list(map(int, input().split()))\n        d.append(di)\n        A.append(Ai)\n    # N Snukes called Snuke 1, Snuke 2, ..., Snuke N live in a town.\n    # There are K kinds of snacks sold in this town, called Snack 1, Snack 2, ..., Snack K.\n    # The following d_i Snukes have Snack i: Snuke A_{i, 1}, A_{i, 2}, \\cdots, A_{i, {d_i}}.\n    # Takahashi will walk around this town and make mischief on the Snukes who have no snacks. How many Snukes will fall victim to Takahashi's mischief?\n    # 1 \\leq N \\leq 100\n    # 1 \\leq K \\leq 100\n    # 1 \\leq d_i \\leq N\n    # 1 \\leq A_{i, 1} < \\cdots < A_{i, d_i} \\leq N\n    # 1 \\leq N, K \\leq 100\n    # 1 \\leq d_i \\leq N\n    # 1 \\leq A_{i, 1} < \\cdots < A_{i, d_i} \\leq N\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq N, K \\leq 100\n    # 1 \\leq d_i \\leq N\n    # 1 \\leq A_{i, 1} < \\cdots < A_{i, d_i} \\leq N\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\le"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n    \"\"\"\n    1. read input and get number of snukes and snacks\n    2. store input in a list\n    3. loop through the list and if the number of a snukes is not in the list, then add it to the victim list\n    4. print out the length of the victim list\n    \"\"\"\n    snuke_and_snack_count = [int(i) for i in input().split()]\n    snuke_count = snuke_and_snack_count[0]\n    snack_count = snuke_and_snack_count[1]\n    input_list = []\n    victim_list = []\n    for i in range(snack_count):\n        input_list += [int(i) for i in input().split()]\n    for i in range(1, snuke_count + 1):\n        if i not in input_list:\n            victim_list.append(i)\n    print(len(victim_list))\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nN, K = map(int, input().split())\n\nhas_snack = [0] * N\nfor i in range(K):\n    d_i = int(input())\n    for A_i in map(int, input().split()):\n        has_snack[A_i-1] += 1\n\nprint(sum(1 for x in has_snack if x == 0))"
    }
  ],
  "created": 1650252775,
  "id": "cmpl-4yCQBKOupSutRExLJ9NKl78xH859T",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-18 03:34:30.604327 0 {
  "finish_reason": "length",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef main():\n    N, K = map(int, input().split())\n    d = []\n    A = []\n    for i in range(K):\n        di = int(input())\n        Ai = list(map(int, input().split()))\n        d.append(di)\n        A.append(Ai)\n    # N Snukes called Snuke 1, Snuke 2, ..., Snuke N live in a town.\n    # There are K kinds of snacks sold in this town, called Snack 1, Snack 2, ..., Snack K.\n    # The following d_i Snukes have Snack i: Snuke A_{i, 1}, A_{i, 2}, \\cdots, A_{i, {d_i}}.\n    # Takahashi will walk around this town and make mischief on the Snukes who have no snacks. How many Snukes will fall victim to Takahashi's mischief?\n    # 1 \\leq N \\leq 100\n    # 1 \\leq K \\leq 100\n    # 1 \\leq d_i \\leq N\n    # 1 \\leq A_{i, 1} < \\cdots < A_{i, d_i} \\leq N\n    # 1 \\leq N, K \\leq 100\n    # 1 \\leq d_i \\leq N\n    # 1 \\leq A_{i, 1} < \\cdots < A_{i, d_i} \\leq N\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq N, K \\leq 100\n    # 1 \\leq d_i \\leq N\n    # 1 \\leq A_{i, 1} < \\cdots < A_{i, d_i} \\leq N\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\leq d_i\n    # 1 \\leq i \\leq K\n    # 1 \\leq j \\le"
}
2022-04-18 03:34:30.604426 REASON length
2022-04-18 03:34:30.604442 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n    \"\"\"\n    1. read input and get number of snukes and snacks\n    2. store input in a list\n    3. loop through the list and if the number of a snukes is not in the list, then add it to the victim list\n    4. print out the length of the victim list\n    \"\"\"\n    snuke_and_snack_count = [int(i) for i in input().split()]\n    snuke_count = snuke_and_snack_count[0]\n    snack_count = snuke_and_snack_count[1]\n    input_list = []\n    victim_list = []\n    for i in range(snack_count):\n        input_list += [int(i) for i in input().split()]\n    for i in range(1, snuke_count + 1):\n        if i not in input_list:\n            victim_list.append(i)\n    print(len(victim_list))\nif __name__ == '__main__':\n    main()"
}
2022-04-18 03:34:30.604488 REASON stop
2022-04-18 03:34:30.632759 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nN, K = map(int, input().split())\n\nhas_snack = [0] * N\nfor i in range(K):\n    d_i = int(input())\n    for A_i in map(int, input().split()):\n        has_snack[A_i-1] += 1\n\nprint(sum(1 for x in has_snack if x == 0))"
}
2022-04-18 03:34:30.632848 REASON stop
