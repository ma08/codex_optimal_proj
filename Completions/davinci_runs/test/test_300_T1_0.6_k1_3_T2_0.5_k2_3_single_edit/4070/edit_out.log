2022-04-18 08:41:50.735511 num operations 1
2022-04-18 08:41:50.735532 size on input set 1
2022-04-18 08:41:56.840415 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\ndef get_sum_of_digits(n):\n    s = 0\n    while n > 0:\n        s += n % 10\n        n = n // 10\n\n    return s\n\ndef get_sum_of_digits_of_powers(n):\n    p = 1\n    s = 0\n    while p <= n:\n        s += get_sum_of_digits(p)\n        p *= 2\n    return s\n\n\ndef main():\n    n = int(input())\n    print(get_sum_of_digits_of_powers(n))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef get_sum_of_digits(n):\n    s = 0\n    while n > 0:\n        s += n % 10\n        n = n // 10\n\n    return s\n\ndef get_sum_of_digits_of_powers(n):\n    p = 1\n    s = 0\n    while p <= n:\n        s += get_sum_of_digits(p)\n        p *= 2\n    return s\n\n\ndef main():\n    n = int(input())\n    print(get_sum_of_digits_of_powers(n))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef get_sum_of_digits(n):\n    s = 0\n    while n > 0:\n        s += n%10\n        n = n//10\n    return s\n\ndef get_sum_of_digits_of_powers(n):\n    p = 1\n    s = 0\n    while p <= n:\n        s += get_sum_of_digits(p)        \n        p *= 2        \n    return s\n\ndef main():\n    n = int(input())\n    print(get_sum_of_digits_of_powers(n))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650271310,
  "object": "edit"
}
2022-04-18 08:41:56.840704 fix syntax errors 3 ["\n\n\ndef get_sum_of_digits(n):\n    s = 0\n    while n > 0:\n        s += n % 10\n        n = n // 10\n\n    return s\n\ndef get_sum_of_digits_of_powers(n):\n    p = 1\n    s = 0\n    while p <= n:\n        s += get_sum_of_digits(p)\n        p *= 2\n    return s\n\n\ndef main():\n    n = int(input())\n    print(get_sum_of_digits_of_powers(n))\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef get_sum_of_digits(n):\n    s = 0\n    while n > 0:\n        s += n % 10\n        n = n // 10\n\n    return s\n\ndef get_sum_of_digits_of_powers(n):\n    p = 1\n    s = 0\n    while p <= n:\n        s += get_sum_of_digits(p)\n        p *= 2\n    return s\n\n\ndef main():\n    n = int(input())\n    print(get_sum_of_digits_of_powers(n))\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef get_sum_of_digits(n):\n    s = 0\n    while n > 0:\n        s += n%10\n        n = n//10\n    return s\n\ndef get_sum_of_digits_of_powers(n):\n    p = 1\n    s = 0\n    while p <= n:\n        s += get_sum_of_digits(p)        \n        p *= 2        \n    return s\n\ndef main():\n    n = int(input())\n    print(get_sum_of_digits_of_powers(n))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-18 08:41:56.840737 size on output set 3
2022-04-18 08:41:56.840748 num operations 1
2022-04-18 08:41:56.840754 size on input set 1
2022-04-18 08:42:00.343923 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Version 1\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n"
    },
    {
      "index": 1,
      "text": "\n# Version 1\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n\n# Version 2\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n"
    },
    {
      "index": 2,
      "text": "\n# Version 1\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n\n# Version 2\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n"
    }
  ],
  "created": 1650271316,
  "object": "edit"
}
2022-04-18 08:42:00.344094 fix syntax errors 3 ['\n\n# Version 1\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n', '\n# Version 1\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n\n# Version 2\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n', '\n# Version 1\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n\n# Version 2\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return nums[0]\n']
2022-04-18 08:42:00.344125 size on output set 2
2022-04-18 08:42:00.344136 num operations 1
2022-04-18 08:42:00.344142 size on input set 1
2022-04-18 08:42:05.621161 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef chess_knight(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 3\n    elif n % 2 == 0:\n        return chess_knight(n // 2) + 1\n    elif n % 2 != 0:\n        return chess_knight(((n + 1) // 2)) + 1\n\n\nif __name__ == '__main__':\n    print(chess_knight(int(input())))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef chess_knight(n):\n    if n == 1 or n == 2 or n == 3:\n        return n\n    else:\n        if n % 2 == 0:\n            return chess_knight(n//2) + 1\n        else:\n            return chess_knight(((n+1)//2)) + 1\n\n\nif __name__ == '__main__':\n    print(chess_knight(int(input())))\n"
    },
    {
      "index": 2,
      "text": "\n\ndef chess_knight(n):\n    return chess_knight(n//2) + 1 if n % 2 == 0 else chess_knight(((n+1)//2)) + 1\n\n\nif __name__ == '__main__':\n    print(chess_knight(int(input())))\n"
    }
  ],
  "created": 1650271320,
  "object": "edit"
}
2022-04-18 08:42:05.621380 fix syntax errors 3 ["\n\ndef chess_knight(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 3\n    elif n % 2 == 0:\n        return chess_knight(n // 2) + 1\n    elif n % 2 != 0:\n        return chess_knight(((n + 1) // 2)) + 1\n\n\nif __name__ == '__main__':\n    print(chess_knight(int(input())))\n", "\n\ndef chess_knight(n):\n    if n == 1 or n == 2 or n == 3:\n        return n\n    else:\n        if n % 2 == 0:\n            return chess_knight(n//2) + 1\n        else:\n            return chess_knight(((n+1)//2)) + 1\n\n\nif __name__ == '__main__':\n    print(chess_knight(int(input())))\n", "\n\ndef chess_knight(n):\n    return chess_knight(n//2) + 1 if n % 2 == 0 else chess_knight(((n+1)//2)) + 1\n\n\nif __name__ == '__main__':\n    print(chess_knight(int(input())))\n"]
2022-04-18 08:42:05.621406 size on output set 3
