["\n\ndef main():\n    n, k = [int(x) for x in input().split()]\n    t = input()\n    s = t\n    while len(s) < k * n:  # noqa\n        s += t\n    print(s[:k * n])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef solve(n, k, t):\n    \"\"\"\n    >>> solve(3, 1, 'aba')\n    'aba'\n    >>> solve(2, 3, 'cat')\n    'catcatcat'\n    \"\"\"\n    s = ''\n    while k > 0:\n        s += t\n        k -= 1\n    return s + t[0:n-(len(s) % n)]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n    n, k = map(int, input().split())\n    t = input()\n    print(solve(n, k, t))\n", "\n\ndef solve(n, k, t):\n    \"\"\"\n    >>> solve(3, 4, 'aba')\n    'ababababa'\n    >>> solve(3, 2, 'cat')\n    'catcat'\n    \"\"\"\n    s = ''\n    while k > 0:\n        s += t\n        k -= 1\n    return s + t[0:n - (len(s) % n)]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()\n    n, k = map(int, input().split())\n    t = input()\n    print(solve(n, k, t))\n", "\n\ndef solve(n, k, t):\n    def check(s):\n        return s.count(t) == k\n\n    if n == 1:\n        return t * k\n\n    if k == 1:\n        return t\n\n    if n == 2:\n        return t * (k // 2) + t[:k % 2]\n\n    if n == 3:\n        if k <= 2:\n            return t * k\n\n        if k % 2 == 0:\n            return t * (k // 2)\n\n        if k % 3 == 0:\n            return t * (k // 3)\n\n        return t[:2] * (k // 3) + t[:k % 3]\n\n    if n == 4:\n        if k <= 2:\n            return t * k\n\n        if k % 2 == 0:\n            return t * (k // 2)\n\n        if k % 3 == 0:\n            return t * (k // 3)\n\n        if k % 4 == 0:\n            return t * (k // 4)\n\n        if k % 4 == 1:\n            return t[:2] * (k // 4) + t[:1]\n\n        if k % 4 == 2:\n            return t[:2] * (k // 4) + t[:2]\n\n        return t[:2] * (k // 4) + t[:3]\n\n    if k % (n - 1) == 0:\n        return t[:n - 1] * (k // (n - 1)) + t[:1]\n\n    if k % n == 0:\n        return t * (k // n)\n\n    if k % (n + 1) == 0:\n        return t[:n] * (k // (n + 1)) + t[:1]\n\n    if k % (n - 1) == 1:\n        return t[:n - 1] * (k // (n - 1)) + t[:2]\n\n    if k % n == 1:\n        return t[:n] * (k // n) + t[:1]\n\n    if k % (n + 1) == 1:\n        return t[:n] * (k // (n + 1)) + t[:2]\n\n    if k % (n - 1) == 2:\n        return t[:n - 1] * (k // (n - 1)) + t[:3]\n\n    if k % n == 2:\n        return t[:n] * (k // n) + t[:2]\n\n    if k % (n + 1) == 2:\n        return t[:n] * (k // (n + 1)) + t[:3]\n\n    if k % (n - 1) == 3:\n        return t[:n - 1] * (k // (n - 1)) + t[:4]\n\n    if k % n == 3:\n        return t[:n] * (k // n) + t[:3]\n\n    if k % (n + 1) == 3:\n        return t[:n] * (k // (n + 1)) + t[:4]\n\n    return t * (k // n) + t[:k % n]\n\n\nif __name__ == '__main__':\n    n, k = map(int, input().split())\n    t = input()\n\n    s = solve(n, k, t)\n\n    print(s)\n", "\n\ndef main():\n    n, k = [int(x) for x in input().split()]\n    t = input()\n    s = t\n    while len(s) < k * n:\n        s += t\n    print(s[:k * n]) \n\nif __name__ == '__main__':\n    main()\n", "\n\ndef solve(n, k, t):\n    \"\"\"\n    >>> solve(3, 4, 'aba')\n    'ababababa'\n    >>> solve(3, 2, 'cat')\n    'catcat'\n    \"\"\"\n    s = ''\n    while k > 0:\n        s += t\n        k -= 1\n    return s + t[0:n - (len(s) % n)]\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()\n    n, k = map(int, input().split())\n    t = input()\n    print(solve(n, k, t))\n", "#!/usr/bin/env python3\n\n\ndef main():\n    n, k = [int(x) for x in input().split()]\n    t = input()\n    s = t\n    while len(s) < k * n:\n        s += t\n    print(s[:k * n])\n\nif __name__ == '__main__':\n    main()\n", "\ndef solve(n, k, t):\n    def check(s):\n        return s.count(t) == k\n\n    if n == 1:\n        return t * k\n\n    if k == 1:\n        return t\n\n    if n == 2:\n        return t * (k // 2) + t[:k % 2]\n\n    if n == 3:\n        if k <= 2:\n            return t * k\n\n        if k % 2 == 0:\n            return t * (k // 2)\n\n        if k % 3 == 0:\n            return t * (k // 3)\n\n        return t[:2] * (k // 3) + t[:k % 3]\n\n    if n == 4:\n        if k <= 2:\n            return t * k\n\n        if k % 2 == 0:\n            return t * (k // 2)\n\n        if k % 3 == 0:\n            return t * (k // 3)\n\n        if k % 4 == 0:\n            return t * (k // 4)\n\n        if k % 4 == 1:\n            return t[:2] * (k // 4) + t[:1]\n\n        if k % 4 == 2:\n            return t[:2] * (k // 4) + t[:2]\n\n        return t[:2] * (k // 4) + t[:3]\n\n    if k % (n - 1) == 0:\n        return t[:n - 1] * (k // (n - 1)) + t[:1]\n\n    if k % n == 0:\n        return t * (k // n)\n\n    if k % (n + 1) == 0:\n        return t[:n] * (k // (n + 1)) + t[:1]\n\n    if k % (n - 1) == 1:\n        return t[:n - 1] * (k // (n - 1)) + t[:2]\n\n    if k % n == 1:\n        return t[:n] * (k // n) + t[:1]\n\n    if k % (n + 1) == 1:\n        return t[:n] * (k // (n + 1)) + t[:2]\n\n    if k % (n - 1) == 2:\n        return t[:n - 1] * (k // (n - 1)) + t[:3]\n\n    if k % n == 2:\n        return t[:n] * (k // n) + t[:2]\n\n    if k % (n + 1) == 2:\n        return t[:n] * (k // (n + 1)) + t[:3]\n\n    if k % (n - 1) == 3:\n        return t[:n - 1] * (k // (n - 1)) + t[:4]\n\n    if k % n == 3:\n        return t[:n] * (k // n) + t[:3]\n\n    if k % (n + 1) == 3:\n        return t[:n] * (k // (n + 1)) + t[:4]\n\n    return t * (k // n) + t[:k % n]\n\n\nif __name__ == '__main__':\n    n, k = map(int, input().split())\n    t = input()\n\n    s = solve(n, k, t)\n\n    print(s)\n"]