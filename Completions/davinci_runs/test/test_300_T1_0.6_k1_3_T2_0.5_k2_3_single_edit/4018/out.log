2022-04-18 01:41:03.938527 """
The only difference between the easy and the hard versions is constraints.

A subsequence is a string that can be derived from another string by deleting some or no symbols without changing the order of the remaining symbols. Characters to be deleted are not required to go successively, there can be any gaps between them. For example, for the string "abaca" the following strings are subsequences: "abaca", "aba", "aaa", "a" and "" (empty string). But the following strings are not subsequences: "aabaca", "cb" and "bcaa".

You are given a string $s$ consisting of $n$ lowercase Latin letters.

In one move you can take any subsequence $t$ of the given string and add it to the set $S$. The set $S$ can't contain duplicates. This move costs $n - |t|$, where $|t|$ is the length of the added subsequence (i.e. the price equals to the number of the deleted characters).

Your task is to find out the minimum possible total cost to obtain a set $S$ of size $k$ or report that it is impossible to do so.


-----Input-----

The first line of the input contains two integers $n$ and $k$ ($1 \le n \le 100, 1 \le k \le 10^{12}$) — the length of the string and the size of the set, correspondingly.

The second line of the input contains a string $s$ consisting of $n$ lowercase Latin letters.


-----Output-----

Print one integer — if it is impossible to obtain the set $S$ of size $k$, print -1. Otherwise, print the minimum possible total cost to do it.


-----Examples-----
Input
4 5
asdf

Output
4

Input
5 6
aaaaa

Output
15

Input
5 7
aaaaa

Output
-1

Input
10 100
ajihiushda

Output
233



-----Note-----

In the first example we can generate $S$ = { "asdf", "asd", "adf", "asf", "sdf" }. The cost of the first element in $S$ is $0$ and the cost of the others is $1$. So the total cost of $S$ is $4$.
"""
2022-04-18 01:41:03.938550 --------------------------
2022-04-18 01:41:31.286574 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n\ndef solve(n, k, s):\n    return -1"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\ndef main():\n    # read in the number of characters in string and the number of subsequences to generate\n    n, k = [int(x) for x in input().split()]\n    # read in the string\n    s = input()\n    # set the initial cost to 0\n    cost = 0\n    # set the number of subsequences generated to 1, since the total string is a subsequence\n    sub_num = 1\n    # loop through the string\n    for i in s:\n        # if the number of subsequences generated is greater than k, then it is impossible to generate k unique subsequences\n        if sub_num > k:\n            print(-1)\n            break\n        # if the number of subsequences generated is less than k, then add the number of deleted characters to the cost\n        # the number of deleted characters is equal to the number of characters in the string minus the number of subsequences generated\n        else:\n            cost += n - sub_num\n            # increment the number of subsequences by 1\n            sub_num += 1\n    # if the number of subsequences generated is equal to k, then we have generated k unique subsequences\n    if sub_num == k:\n        print(cost)\n    # if the number of subsequences generated is less than k and we have not reached the end of the string, then it is impossible to generate k unique subsequences\n    elif sub_num < k:\n        print(-1)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nn, k = map(int, raw_input().split())\ns = raw_input()\n\n# The idea is to find the optimal solution for the first i elements\n# and the first j subsequences.\n\n# dp[i][j] holds the optimal solution for the first i elements\n# and the first j subsequences.\n\ndp = [[0 for j in range(k + 1)] for i in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, k + 1):\n        # If it is possible to create j subsequences\n        # using the first i elements, we can create\n        # j subsequences using the first i - 1 elements,\n        # and one subsequence of size i.\n        # This subsequence costs i - 1.\n        if j * (j + 1) / 2 <= i:\n            dp[i][j] = min(dp[i][j], i - 1 + dp[i - 1][j - 1])\n\n        # If it is possible to create j subsequences\n        # using the first i - 1 elements, we can create\n        # j subsequences using the first i elements,\n        # by skipping the ith element.\n        # This subsequence costs 0.\n        dp[i][j] = min(dp[i][j], dp[i - 1][j])\n\n# If it is possible to create k subsequences using the first n elements,\n# print the optimal solution. Otherwise, print -1.\nif dp[-1][-1] != 0:\n    print dp[-1][-1]\nelse:\n    print -1"
    }
  ],
  "created": 1650246064,
  "id": "cmpl-4yAfwPwVeWPtqLeJm8vrwVEDHkRFm",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-18 01:41:31.286821 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n\ndef solve(n, k, s):\n    return -1"
}
2022-04-18 01:41:31.286860 REASON stop
2022-04-18 01:41:31.340227 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\ndef main():\n    # read in the number of characters in string and the number of subsequences to generate\n    n, k = [int(x) for x in input().split()]\n    # read in the string\n    s = input()\n    # set the initial cost to 0\n    cost = 0\n    # set the number of subsequences generated to 1, since the total string is a subsequence\n    sub_num = 1\n    # loop through the string\n    for i in s:\n        # if the number of subsequences generated is greater than k, then it is impossible to generate k unique subsequences\n        if sub_num > k:\n            print(-1)\n            break\n        # if the number of subsequences generated is less than k, then add the number of deleted characters to the cost\n        # the number of deleted characters is equal to the number of characters in the string minus the number of subsequences generated\n        else:\n            cost += n - sub_num\n            # increment the number of subsequences by 1\n            sub_num += 1\n    # if the number of subsequences generated is equal to k, then we have generated k unique subsequences\n    if sub_num == k:\n        print(cost)\n    # if the number of subsequences generated is less than k and we have not reached the end of the string, then it is impossible to generate k unique subsequences\n    elif sub_num < k:\n        print(-1)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-18 01:41:31.340323 REASON stop
2022-04-18 01:41:31.340863 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nn, k = map(int, raw_input().split())\ns = raw_input()\n\n# The idea is to find the optimal solution for the first i elements\n# and the first j subsequences.\n\n# dp[i][j] holds the optimal solution for the first i elements\n# and the first j subsequences.\n\ndp = [[0 for j in range(k + 1)] for i in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, k + 1):\n        # If it is possible to create j subsequences\n        # using the first i elements, we can create\n        # j subsequences using the first i - 1 elements,\n        # and one subsequence of size i.\n        # This subsequence costs i - 1.\n        if j * (j + 1) / 2 <= i:\n            dp[i][j] = min(dp[i][j], i - 1 + dp[i - 1][j - 1])\n\n        # If it is possible to create j subsequences\n        # using the first i - 1 elements, we can create\n        # j subsequences using the first i elements,\n        # by skipping the ith element.\n        # This subsequence costs 0.\n        dp[i][j] = min(dp[i][j], dp[i - 1][j])\n\n# If it is possible to create k subsequences using the first n elements,\n# print the optimal solution. Otherwise, print -1.\nif dp[-1][-1] != 0:\n    print dp[-1][-1]\nelse:\n    print -1"
}
2022-04-18 01:41:31.340927 REASON stop
