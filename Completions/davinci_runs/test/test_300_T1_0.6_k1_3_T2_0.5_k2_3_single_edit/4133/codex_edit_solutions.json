["\n\nimport sys\n#import math\n#import collections\n\n\"\"\"\n---TODO---\n- make a preprocessor that reads the string and builds a list of commands\n- make a dict that stores the variables\n- make a greedy function that feeds the golorp\n- make a function that checks if the golorp can be fed\n- make a function that finds the lexicographically smallest sequence of values\n\"\"\"\n\n\nclass Golorp():\n    def __init__(self, name):\n        self.name = name\n        self.jaws = []\n        self.stomach = []\n        self.preprocess()\n        self.variables = {\n            'a': None,\n            'b': None,\n            'c': None,\n            'd': None,\n            'e': None,\n            'f': None,\n            'g': None,\n            'h': None,\n            'i': None,\n            'j': None,\n            'k': None,\n            'l': None,\n            'm': None,\n            'n': None,\n            'o': None,\n            'p': None,\n            'q': None,\n            'r': None,\n            's': None,\n            't': None,\n            'u': None,\n            'v': None,\n            'w': None,\n            'x': None,\n            'y': None,\n            'z': None\n        }\n\n    def preprocess(self):\n        self.jaws = self.name[:self.name.find(':')].split('>')[0].split('(')[1].split(')')[0].split('/')[1:]\n        self.stomach = self.name[self.name.find(':') + 1:].split(',')\n\n    def feed(self, sequence):\n        for i in range(len(sequence)):\n            for jaw in self.jaws:\n                for j in range(len(jaw)):\n                    if jaw[j] == '_':\n                        jaw[j] = sequence[i]\n                        break\n        for jaw in self.jaws: #check if all the jaws are fed\n            if '_' in jaw:\n                return False\n        for jaw in self.jaws: #evaluate the jaws\n            if jaw[0] == '-':\n                jaw = jaw[1:]\n            elif jaw[-1] == '-':\n                jaw = jaw[:-1]\n            if jaw[0] == '+':\n                jaw = jaw[1:]\n            elif jaw[-1] == '+':\n                jaw = jaw[:-1]\n            if jaw[0] == '*':\n                jaw = jaw[1:]\n            elif jaw[-1] == '*':\n                jaw = jaw[:-1]\n            for i in range(1, len(jaw)):\n                if jaw[i] == '+':\n                    jaw[i - 1] += jaw[i + 1]\n                    jaw[i + 1] = None\n                elif jaw[i] == '-':\n                    jaw[i - 1] -= jaw[i + 1]\n                    jaw[i + 1] = None\n                elif jaw[i] == '*':\n                    jaw[i - 1] *= jaw[i + 1]\n                    jaw[i + 1] = None\n            while None in jaw:\n                jaw.remove(None)\n            self.variables[jaw[0]] = jaw[1]\n\n        for stomach in self.stomach: #check if the stomach is full\n            for char in stomach:\n                if self.variables[char] is None:\n                    return False\n\n            if stomach[0] == '<':\n                if self.variables[stomach[1]] >= self.variables[stomach[2]]:\n                    return False\n            elif stomach[0] == '>':\n                if self.variables[stomach[1]] <= self.variables[stomach[2]]:\n                    return False\n            else:\n                if self.variables[stomach[0]] != self.variables[stomach[1]]:\n                    return False\n\n        return True\n\n    def find_solution(self):\n\n\n        def generate_sequences(l, n):\n            if l == 0:\n                return [[]]\n            else:\n                return [[x] + y for x in range(n) for y in generate_sequences(l - 1, n)]\n        for sequence in generate_sequences(len(self.jaws), 10):\n            if self.feed(sequence):\n                return sequence\n\n        return False\n\n\nif __name__ == \"__main__\":\n    golorp = Golorp(sys.stdin.readline()[:-1])\n    print(golorp.find_solution())\n", "\n'''\n    file: file.py\n    author: joseph hallett\n    date: 2019-03-22\n    purpose: to demonstrate the use of file objects in python\n'''\nimport sys\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "var fs = require('fs');\n\nfs.readFile('file.txt', 'utf8', function(err, data) {\n  if (err) {\n    console.log(err);\n  } else {\n    console.log(data);\n  }\n});\n", "\n\nimport sys\n#import math\n#import collections\n\n\"\"\"\n---TODO---\n- make a preprocessor that reads the string and builds a list of commands\n- make a dict that stores the variables\n- make a greedy function that feeds the golorp\n- make a function that checks if the golorp can be fed\n- make a function that finds the lexicographically smallest sequence of values\n\"\"\"\n\n\nclass Golorp():\n    def __init__(self, name):\n        self.name = name\n        self.jaws = []\n        self.stomach = []\n        self.preprocess()\n        self.variables = {\n            'a': None,\n            'b': None,\n            'c': None,\n            'd': None,\n            'e': None,\n            'f': None,\n            'g': None,\n            'h': None,\n            'i': None,\n            'j': None,\n            'k': None,\n            'l': None,\n            'm': None,\n            'n': None,\n            'o': None,\n            'p': None,\n            'q': None,\n            'r': None,\n            's': None,\n            't': None,\n            'u': None,\n            'v': None,\n            'w': None,\n            'x': None,\n            'y': None,\n            'z': None\n        }\n\n    def preprocess(self):\n        self.jaws = self.name[:self.name.find(':')].split('>')[0].split('(')[1].split(')')[0].split('/')[:-1]\n        self.stomach = self.name[self.name.find(':') + 1:].split(',')\n\n    def feed(self, sequence):\n        for c in sequence:\n            for jaw in self.jaws:\n                for i in range(len(jaw)):\n                    if jaw[i] == '_':\n                        jaw[i] = c\n                        break\n        for jaw in self.jaws:\n            if '_' in jaw:\n                return False\n        for jaw in self.jaws:\n            if jaw[0] == '-':\n                jaw = jaw[1:]\n            elif jaw[-1] == '-':\n                jaw = jaw[:-1]\n            if jaw[0] == '+':\n                jaw = jaw[1:]\n            elif jaw[-1] == '+':\n                jaw = jaw[:-1]\n            if jaw[0] == '*':\n                jaw = jaw[1:]\n            elif jaw[-1] == '*':\n                jaw = jaw[:-1]\n            for i in range(1, len(jaw)):\n                if jaw[i] == '+':\n                    jaw[i - 1] += jaw[i + 1]\n                    jaw[i + 1] = None\n                elif jaw[i] == '-':\n                    jaw[i - 1] -= jaw[i + 1]\n                    jaw[i + 1] = None\n                elif jaw[i] == '*':\n                    jaw[i - 1] *= jaw[i + 1]\n                    jaw[i + 1] = None\n            while None in jaw:\n                jaw.remove(None)\n            self.variables[jaw[0]] = jaw[1]\n\n        for stomach in self.stomach:\n            for char in stomach:\n                if self.variables[char] is None:\n                    return False\n\n            if stomach[0] == '<':\n                if self.variables[stomach[1]] >= self.variables[stomach[2]]:\n                    return False\n            elif stomach[0] == '>':\n                if self.variables[stomach[1]] <= self.variables[stomach[2]]:\n                    return False\n            else:\n                if self.variables[stomach[0]] != self.variables[stomach[1]]:\n                    return False\n\n        return True\n\n    def find_solution(self):\n\n        def generate_sequences(l, n):\n            if l == 0:\n                return [[]]\n            else:\n                return [[x] + y for x in range(n) for y in generate_sequences(l - 1, n)]\n        for sequence in generate_sequences(len(self.jaws), 10):\n            if self.feed(sequence):\n                return sequence\n\n        return False\n\n\n\nif __name__ == \"__main__\":\n    golorp = Golorp(sys.stdin.readline()[:-1])\n    print(golorp.find_solution())\n", "\nimport sys\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    print('Hello, world!')\n\n\nif __name__ == '__main__':\n    main()\n", "def file_read_from_head(fname, nlines):\n        from itertools import islice\n        with open(fname) as f:\n                for line in islice(f, nlines):\n                        print(line)\n\nfile_read_from_head('test.txt',2)\n", "\n\nimport sys\n#import math\n#import collections\n\n\"\"\"\n---TODO---\n- make a preprocessor that reads the string and builds a list of commands\n- make a dict that stores the variables\n- make a greedy function that feeds the golorp\n- make a function that checks if the golorp can be fed\n- make a function that finds the lexicographically smallest sequence of values\n\"\"\"\n\n\nclass Golorp():\n    def __init__(self, name):\n        self.name = name\n        self.jaws = []\n        self.stomach = []\n        self.preprocess()\n        self.variables = {\n            'a': None,\n            'b': None,\n            'c': None,\n            'd': None,\n            'e': None,\n            'f': None,\n            'g': None,\n            'h': None,\n            'i': None,\n            'j': None,\n            'k': None,\n            'l': None,\n            'm': None,\n            'n': None,\n            'o': None,\n            'p': None,\n            'q': None,\n            'r': None,\n            's': None,\n            't': None,\n            'u': None,\n            'v': None,\n            'w': None,\n            'x': None,\n            'y': None,\n            'z': None\n        }\n\n    def preprocess(self):\n        self.jaws = self.name[:self.name.find(':')].split('>')[0].split('(')[1].split(')')[0].split('/')[:-1]\n        self.stomach = self.name[self.name.find(':') + 1:].split(',')\n\n    def feed(self, sequence):\n        for c in sequence:\n            for jaw in self.jaws:\n                for i in range(len(jaw[1])):\n                    if jaw[1][i] == '_':\n                        jaw[1][i] = c\n                        break\n        for jaw in self.jaws:\n            if '_' in jaw[1]:\n                return False\n        for jaw in self.jaws:\n            if jaw[1][0] == '-':\n                jaw[1] = jaw[1][1:]\n            elif jaw[1][-1] == '-':\n                jaw[1] = jaw[1][:-1]\n            if jaw[1][0] == '+':\n                jaw[1] = jaw[1][1:]\n            elif jaw[1][-1] == '+':\n                jaw[1] = jaw[1][:-1]\n            if jaw[1][0] == '*':\n                jaw[1] = jaw[1][1:]\n            elif jaw[1][-1] == '*':\n                jaw[1] = jaw[1][:-1]\n            for i in range(1, len(jaw[1])):\n                if jaw[1][i] == '+':\n                    jaw[1][i - 1] += jaw[1][i + 1]\n                    jaw[1][i + 1] = None\n                elif jaw[1][i] == '-':\n                    jaw[1][i - 1] -= jaw[1][i + 1]\n                    jaw[1][i + 1] = None\n                elif jaw[1][i] == '*':\n                    jaw[1][i - 1] *= jaw[1][i + 1]\n                    jaw[1][i + 1] = None\n            while None in jaw[1]:\n                jaw[1].remove(None)\n            self.variables[jaw[0]] = jaw[1][0]\n\n        for stomach in self.stomach:\n            for char in stomach:\n                if self.variables[char] is None:\n                    return False\n\n            if stomach[0] == '<':\n                if self.variables[stomach[1]] >= self.variables[stomach[2]]:\n                    return False\n            elif stomach[0] == '>':\n                if self.variables[stomach[1]] <= self.variables[stomach[2]]:\n                    return False\n            else:\n                if self.variables[stomach[0]] != self.variables[stomach[1]]:\n                    return False\n\n        return True\n\n    def find_solution(self):\n\n        def generate_sequences(l, n):\n            if l == 0:\n                return [[]]\n            else:\n                return [[x] + y for x in range(n) for y in generate_sequences(l - 1, n)]\n        for sequence in generate_sequences(len(self.jaws), 10):\n            if self.feed(sequence):\n                return sequence\n\n        return False\n\n\n\nif __name__ == \"__main__\":\n    golorp = Golorp(sys.stdin.readline()[:-1])\n    print(golorp.find_solution())\n", "<!--\n/*\n * Copyright (c) 2014-2015 Andrea Gianarda\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n*/\n-->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\">\n<meta name=\"description\" content=\"Andrea Gianarda: Resume\">\n<meta name=\"keywords\" content=\"Andrea Gianarda, Resume, CV, Curriculum Vitae, Education, Experience, Skills, Languages, Interests\">\n<meta name=\"author\" content=\"Andrea Gianarda\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n<link rel=\"shortcut icon\" href=\"favicon.ico\">\n<title>Andrea Gianarda - Resume</title>\n\n<!-- Bootstrap -->\n<link href=\"bootstrap/css/bootstrap.css\" rel=\"stylesheet\">\n<link href=\"bootstrap/css/bootstrap-theme.css\" rel=\"stylesheet\">\n\n<!-- Custom styles for this template -->\n<link href=\"resume.css\" rel=\"stylesheet\">\n\n<!-- HTML5 shim and Respond.js IE8 support of HTML5 elements and media queries -->\n<!--[if lt IE 9]>\n<script src=\"../../assets/js/html5shiv.js\"></script>\n<script src=\"../../assets/js/respond.min.js\"></script>\n<![endif]-->\n</head>\n\n<body>\n<div class=\"container\">\n  <div class=\"header\">\n    <ul class=\"nav nav-pills pull-right\">\n      <li><a href=\"index.html\">Home</a></li>\n      <li class=\"active\"><a href=\"resume.html\">Resume</a></li>\n      <li><a href=\"projects.html\">Projects</a></li>\n      <li><a href=\"mailto:andrea.gianarda@gmail.com\">Contact</a></li>\n    </ul>\n    <h3 class=\"text-muted\">Andrea Gianarda</h3>\n  </div>\n  <div class=\"jumbotron\">\n    <h1>Andrea Gianarda</h1>\n    <p class=\"lead\">Resume</p>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-lg-12\">\n      <h2>Education</h2>\n      <div class=\"row\">\n        <div class=\"col-lg-3\">\n          <p>University of Bologna</p>\n        </div>\n        <div class=\"col-lg-9\">\n          <p>Master's degree in Physics, 110/110 cum laude</p>\n          <p>Thesis: \"Study of the quark gluon plasma by means of a parton cascade model\"</p>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-lg-3\">\n          <p>University of Bologna</p>\n        </div>\n        <div class=\"col-lg-9\">\n          <p>Bachelor's degree in Physics, 110/110 cum laude</p>\n          <p>Thesis: \"Study of the quark gluon plasma by means of a parton cascade model\"</p>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-lg-3\">\n          <p>Liceo Scientifico \"G. Galilei\"</p>\n        </div>\n        <div class=\"col-lg-9\">\n          <p>High school diploma, 100/100</p>\n          <p>Thesis: \"Study of the quark gluon plasma by means of a parton cascade model\"</p>\n        </div>\n      </div>\n      <h2>Experience</h2>\n      <div class=\"row\">\n        <div class=\"col-lg-3\">\n          <p>University of Bologna</p>\n        </div>\n        <div class=\"col-lg-9\">\n          <p>Master's degree in Physics, 110/110 cum laude</p>\n          <p>Thesis: \"Study of the quark gluon plasma by means of a parton cascade model\"</p>\n        </div>\n      </div>\n      <h2>Skills</h2>\n      <div class=\"row\">\n        <div class=\"col-lg-3\">\n          <p>University of Bologna</p>\n        </div>\n        <div class=\"col-lg-9\">\n          <p>Master's degree in Physics, 110/110 cum laude</p>\n          <p>Thesis: \"Study of the quark gluon plasma by means of a parton cascade model\"</p>\n        </div>\n      </div>\n      <h2>Languages</h2>\n      <div class=\"row\">\n        <div class=\"col-lg-3\">\n          <p>University of Bologna</p>\n        </div>\n        <div class=\"col-lg-9\">\n          <p>Master's degree in Physics, 110/110 cum laude</p>\n          <p>Thesis: \"Study of the quark gluon plasma by means of a parton cascade model\"</p>\n        </div>\n      </div>\n      <h2>Interests</h2>\n      <div class=\"row\">\n        <div class=\"col-lg-3\">\n          <p>University of Bologna</p>\n        </div>\n        <div class=\"col-lg-9\">\n          <p>Master's degree in Physics, 110/110 cum laude</p>\n          <p>Thesis: \"Study of the quark gluon plasma by means of a parton cascade model\"</p>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"footer\">\n    <p>&copy; Andrea Gianarda 2014-2015</p>\n  </div>\n</div>\n<!-- /container -->\n\n<!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->\n<script src=\"https://code.jquery.com/jquery.js\"></script>\n<!-- Include all compiled plugins (below), or include individual files as needed -->\n<script src=\"bootstrap/js/bootstrap.min.js\"></script>\n</body>\n</html>\n"]