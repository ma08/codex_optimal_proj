2022-04-18 09:05:47.678514 num operations 1
2022-04-18 09:05:47.678534 size on input set 1
2022-04-18 09:06:26.538489 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport math\nfrom sys import stdin\n\ns = stdin.readline()\n\n# # count the number of adjacent 0's and 1's\n# count = {}\n# c = s[0]\n# count[c] = 1\n# for i in range(1, len(s)):\n#     if s[i] == c:\n#         count[c] += 1\n#     else:\n#         c = s[i]\n#         count[c] = 1\n\n# print min(count.values()) * 2\n\n# # print the sum\n# print sum(map(int, s.split()))\n\n# # print the power of 2\n# print 2**int(s)\n\n# # print the factorial of given number\n# def fact(n):\n#     if n == 1:\n#         return 1\n#     return n * fact(n-1)\n\n# print fact(int(s))\n\n# # print the fibonacci sequence\n# def fib(n):\n#     if n == 0:\n#         return 0\n#     if n == 1:\n#         return 1\n#     return fib(n-1) + fib(n-2)\n\n# print fib(int(s))\n\n# # print the sum of fibonacci sequence\n# def fib(n):\n#     if n == 0:\n#         return 0\n#     if n == 1:\n#         return 1\n#     return fib(n-1) + fib(n-2)\n\n# print sum(map(fib, range(int(s)+1)))\n\n# # print the sum of all numbers from 1 to n\n# def sum(n):\n#     if n == 1:\n#         return 1\n#     return n + sum(n-1)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum(n/10)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum(n/10)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum(n/10)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum(n/10)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum(n/10)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum(n/10)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum(n/10)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum(n/10)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum(n/10)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum(n/10)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum(n/10)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum(n/10)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum(n/10)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum(n/10)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum(n/10)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum(n/10)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum(n/10)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum(n/10)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum(n/10)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum(n/10)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum(n/10)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum\n"
    },
    {
      "index": 1,
      "text": "\nfrom sys import stdin\n\ns = stdin.readline()\n\n# count the number of adjacent 0's and 1's\ncount = {}\nc = s[0]\ncount[c] = 1\nfor i in range(1, len(s)):\n    if s[i] == c:\n        count[c] += 1\n    else:\n        c = s[i]\n        count[c] = 1\n\nprint(min(count.values()) * 2)\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom sys import stdin\n\ns = stdin.readline()\n\n# count the number of adjacent 0's and 1's\ncount = {}\nc = s[0]\ncount[c] = 1\nfor i in range(1, len(s)):\n    if s[i] == c:\n        count[c] += 1\n    else:\n        c = s[i]\n        count[c] = 1\n\nprint(min(count.values()) * 2)\n"
    }
  ],
  "created": 1650272747,
  "object": "edit"
}
2022-04-18 09:06:26.538767 fix syntax errors 3 ["\nimport math\nfrom sys import stdin\n\ns = stdin.readline()\n\n# # count the number of adjacent 0's and 1's\n# count = {}\n# c = s[0]\n# count[c] = 1\n# for i in range(1, len(s)):\n#     if s[i] == c:\n#         count[c] += 1\n#     else:\n#         c = s[i]\n#         count[c] = 1\n\n# print min(count.values()) * 2\n\n# # print the sum\n# print sum(map(int, s.split()))\n\n# # print the power of 2\n# print 2**int(s)\n\n# # print the factorial of given number\n# def fact(n):\n#     if n == 1:\n#         return 1\n#     return n * fact(n-1)\n\n# print fact(int(s))\n\n# # print the fibonacci sequence\n# def fib(n):\n#     if n == 0:\n#         return 0\n#     if n == 1:\n#         return 1\n#     return fib(n-1) + fib(n-2)\n\n# print fib(int(s))\n\n# # print the sum of fibonacci sequence\n# def fib(n):\n#     if n == 0:\n#         return 0\n#     if n == 1:\n#         return 1\n#     return fib(n-1) + fib(n-2)\n\n# print sum(map(fib, range(int(s)+1)))\n\n# # print the sum of all numbers from 1 to n\n# def sum(n):\n#     if n == 1:\n#         return 1\n#     return n + sum(n-1)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum(n/10)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum(n/10)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum(n/10)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum(n/10)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum(n/10)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum(n/10)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum(n/10)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum(n/10)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum(n/10)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum(n/10)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum(n/10)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum(n/10)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum(n/10)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum(n/10)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum(n/10)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum(n/10)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum(n/10)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum(n/10)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum(n/10)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum(n/10)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum(n/10)\n\n# print sum(int(s))\n\n# # print the sum of all digits in a number\n# def sum(n):\n#     if n == 0:\n#         return 0\n#     return (n%10) + sum\n", "\nfrom sys import stdin\n\ns = stdin.readline()\n\n# count the number of adjacent 0's and 1's\ncount = {}\nc = s[0]\ncount[c] = 1\nfor i in range(1, len(s)):\n    if s[i] == c:\n        count[c] += 1\n    else:\n        c = s[i]\n        count[c] = 1\n\nprint(min(count.values()) * 2)\n", "\n\nfrom sys import stdin\n\ns = stdin.readline()\n\n# count the number of adjacent 0's and 1's\ncount = {}\nc = s[0]\ncount[c] = 1\nfor i in range(1, len(s)):\n    if s[i] == c:\n        count[c] += 1\n    else:\n        c = s[i]\n        count[c] = 1\n\nprint(min(count.values()) * 2)\n"]
2022-04-18 09:06:26.538940 size on output set 3
2022-04-18 09:06:26.538954 num operations 1
2022-04-18 09:06:26.538959 size on input set 1
2022-04-18 09:06:34.107217 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#\n# from collections import deque\n#\n# n = int(input())\n# s = deque(input())\n#\n# count = 0\n# while s:\n#     if s[0] == '0':\n#         count += 1\n#         s.popleft()\n#     elif s[0] == '1':\n#         if len(s) > 1 and s[1] == '0':\n#             count += 1\n#             s.popleft()\n#             s.popleft()\n#         else:\n#             break\n#\n# print(count)\n"
    },
    {
      "index": 1,
      "text": "\nfrom collections import deque\n\nn = int(input())\ns = deque(input())\n\ncount = 0\nwhile s:\n    if s[0] == 0:\n        count += 1\n        s.popleft()\n    elif s[0] == 1:\n        if len(s) > 1 and s[1] == 0:\n            count += 1\n            s.popleft()\n            s.popleft()\n        else:\n            break\n\nprint(count)\n"
    },
    {
      "index": 2,
      "text": "\nfrom collections import deque\n\nn = int(input())\ns = deque(input())\n\ncount = 0\nwhile s:\n    if s[0] == '0':\n        count += 1\n        s.popleft()\n    elif s[0] == '1':\n        if len(s) > 1 and s[1] == '0':\n            count += 1\n            s.popleft()\n            s.popleft()\n        else:\n            break\n\nprint(count)\n"
    }
  ],
  "created": 1650272786,
  "object": "edit"
}
2022-04-18 09:06:34.107484 fix syntax errors 3 ["\n#\n# from collections import deque\n#\n# n = int(input())\n# s = deque(input())\n#\n# count = 0\n# while s:\n#     if s[0] == '0':\n#         count += 1\n#         s.popleft()\n#     elif s[0] == '1':\n#         if len(s) > 1 and s[1] == '0':\n#             count += 1\n#             s.popleft()\n#             s.popleft()\n#         else:\n#             break\n#\n# print(count)\n", '\nfrom collections import deque\n\nn = int(input())\ns = deque(input())\n\ncount = 0\nwhile s:\n    if s[0] == 0:\n        count += 1\n        s.popleft()\n    elif s[0] == 1:\n        if len(s) > 1 and s[1] == 0:\n            count += 1\n            s.popleft()\n            s.popleft()\n        else:\n            break\n\nprint(count)\n', "\nfrom collections import deque\n\nn = int(input())\ns = deque(input())\n\ncount = 0\nwhile s:\n    if s[0] == '0':\n        count += 1\n        s.popleft()\n    elif s[0] == '1':\n        if len(s) > 1 and s[1] == '0':\n            count += 1\n            s.popleft()\n            s.popleft()\n        else:\n            break\n\nprint(count)\n"]
2022-04-18 09:06:34.107526 size on output set 3
2022-04-18 09:06:34.107540 num operations 1
2022-04-18 09:06:34.107546 size on input set 1
2022-04-18 09:06:38.987356 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef find_max_removal(s):\n    \"\"\"\n    Counts the maximum number of adjacent red and blue cubes that can be removed\n    :param s: string of 1s and 0s to represent the cubes\n    :return: maximum number of adjacent red and blue cubes that can be removed\n    \"\"\"\n    # Initialize variables\n    max_removal = 0\n    prev_digit = None\n    counter = 0\n    for digit in s:\n        # If the digit is the same as the previous digit, increment the counter\n        if digit == prev_digit:\n            counter += 1\n        # If the digit is different from the previous digit, update max_removal\n        else:\n            max_removal = max(max_removal, counter)\n            counter = 1\n        prev_digit = digit\n    # Update max_removal one last time after the loop\n    max_removal = max(max_removal, counter)\n    return max_removal\n\n\nif __name__ == \"__main__\":\n    s = input()\n    max_removal = find_max_removal(s)\n    print(max_removal)\n"
    },
    {
      "index": 1,
      "text": "\ndef find_max_removal(s):\n    \"\"\"\n    Counts the maximum number of adjacent red and blue cubes that can be removed\n    :param s: string of 1s and 0s\n    :return: maximum number of adjacent red and blue cubes that can be removed\n    \"\"\"\n    # Initialize variables\n    max_removal = 0\n    prev_digit = None\n    counter = 0\n    for digit in s:\n        # If the digit is the same as the previous digit, increment the counter\n        if digit == prev_digit:\n            counter += 1\n        # If the digit is different from the previous digit, update max_removal\n        else:\n            max_removal = max(max_removal, counter)\n            counter = 1\n        prev_digit = digit\n    # Update max_removal one last time after the loop\n    max_removal = max(max_removal, counter)\n    return max_removal\n\n\nif __name__ == \"__main__\":\n    s = input()\n    max_removal = find_max_removal(s)\n    print(max_removal)\n"
    },
    {
      "index": 2,
      "text": "\n\ndef find_max_removal(s):\n    \"\"\"\n    Counts the maximum number of adjacent red and blue cubes that can be removed\n    :param s: string of 1s and 0s\n    :return: maximum number of adjacent red and blue cubes that can be removed\n    \"\"\"\n    # Initialize variables.\n    max_removal = 0\n    prev_digit = None\n    counter = 0\n    for digit in s:\n        # If the digit is the same as the previous digit, increment the counter.\n        if digit == prev_digit:\n            counter += 1\n        # If the digit is different from the previous digit, update max_removal.\n        else:\n            max_removal = max(max_removal, counter)\n            counter = 1\n        prev_digit = digit\n    # Update max_removal one last time after the loop.\n    max_removal = max(max_removal, counter)\n    return max_removal\n\n\nif __name__ == \"__main__\":\n    s = input()\n    max_removal = find_max_removal(s)\n    print(max_removal)\n"
    }
  ],
  "created": 1650272794,
  "object": "edit"
}
2022-04-18 09:06:38.987605 fix syntax errors 3 ['\n\ndef find_max_removal(s):\n    """\n    Counts the maximum number of adjacent red and blue cubes that can be removed\n    :param s: string of 1s and 0s to represent the cubes\n    :return: maximum number of adjacent red and blue cubes that can be removed\n    """\n    # Initialize variables\n    max_removal = 0\n    prev_digit = None\n    counter = 0\n    for digit in s:\n        # If the digit is the same as the previous digit, increment the counter\n        if digit == prev_digit:\n            counter += 1\n        # If the digit is different from the previous digit, update max_removal\n        else:\n            max_removal = max(max_removal, counter)\n            counter = 1\n        prev_digit = digit\n    # Update max_removal one last time after the loop\n    max_removal = max(max_removal, counter)\n    return max_removal\n\n\nif __name__ == "__main__":\n    s = input()\n    max_removal = find_max_removal(s)\n    print(max_removal)\n', '\ndef find_max_removal(s):\n    """\n    Counts the maximum number of adjacent red and blue cubes that can be removed\n    :param s: string of 1s and 0s\n    :return: maximum number of adjacent red and blue cubes that can be removed\n    """\n    # Initialize variables\n    max_removal = 0\n    prev_digit = None\n    counter = 0\n    for digit in s:\n        # If the digit is the same as the previous digit, increment the counter\n        if digit == prev_digit:\n            counter += 1\n        # If the digit is different from the previous digit, update max_removal\n        else:\n            max_removal = max(max_removal, counter)\n            counter = 1\n        prev_digit = digit\n    # Update max_removal one last time after the loop\n    max_removal = max(max_removal, counter)\n    return max_removal\n\n\nif __name__ == "__main__":\n    s = input()\n    max_removal = find_max_removal(s)\n    print(max_removal)\n', '\n\ndef find_max_removal(s):\n    """\n    Counts the maximum number of adjacent red and blue cubes that can be removed\n    :param s: string of 1s and 0s\n    :return: maximum number of adjacent red and blue cubes that can be removed\n    """\n    # Initialize variables.\n    max_removal = 0\n    prev_digit = None\n    counter = 0\n    for digit in s:\n        # If the digit is the same as the previous digit, increment the counter.\n        if digit == prev_digit:\n            counter += 1\n        # If the digit is different from the previous digit, update max_removal.\n        else:\n            max_removal = max(max_removal, counter)\n            counter = 1\n        prev_digit = digit\n    # Update max_removal one last time after the loop.\n    max_removal = max(max_removal, counter)\n    return max_removal\n\n\nif __name__ == "__main__":\n    s = input()\n    max_removal = find_max_removal(s)\n    print(max_removal)\n']
2022-04-18 09:06:38.987801 size on output set 3
