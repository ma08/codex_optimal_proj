2022-04-18 09:47:04.689023 num operations 1
2022-04-18 09:47:04.689041 size on input set 1
2022-04-18 09:47:49.446519 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nprint(\"Hello, world\")\n"
    },
    {
      "index": 1,
      "text": "\n\n#-------------------------------------------------------------------------------\n# Name:        file\n# Purpose:\n#\n# Author:      v.osipov@gmail.com\n#\n# Created:     16/10/2019\n# Copyright:   (c) v.osipov 2019\n# Licence:     <your licence>\n#-------------------------------------------------------------------------------\nfrom collections import Counter\ndef main():\n    with open('file.txt', mode='w', encoding='utf-8') as f:\n        text = f.write('\u041f\u0440\u0438\u0432\u0435\u0442, \u043c\u0438\u0440!\\n\u042d\u0442\u043e \u043c\u043e\u0439 \u043f\u0435\u0440\u0432\u044b\u0439 \u0444\u0430\u0439\u043b.\\n')\n    with open('file.txt', encoding='utf-8') as f:\n        for line in f:\n            print(line, end='')\n    with open('file.txt', encoding='utf-8') as f:\n        text = f.read()\n    print(text)\n    print(len(text))\n    print(text.count('\u041f\u0440\u0438\u0432\u0435\u0442'))\n    print(text.count('\u043f\u0435\u0440\u0432\u044b\u0439'))\n    print(text.count('\u0444\u0430\u0439\u043b'))\n    print(text.count('\u043c\u0438\u0440'))\n    print(text.count('\u041f\u0440\u0438\u0432\u0435\u0442'))\n    print(text.count('\u043f\u0435\u0440\u0432\u044b\u0439'))\n    print(text.count('\u0444\u0430\u0439\u043b'))\n    print(text.count('\u043c\u0438\u0440'))\n    c = Counter(text)\n    print(c)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport os\nimport sys\nimport time\nimport shutil\nimport datetime\nimport configparser\ndef get_dir():\n    return os.getcwd()\n\ndef get_file(dir):\n    file_name = input('\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0438\u043c\u044f \u0444\u0430\u0439\u043b\u0430:')\n    return os.path.join(dir,file_name)\n\ndef get_file_list(dir):\n    return os.listdir(dir)\n\ndef get_file_info(file):\n    return os.stat(file)\n\ndef get_file_size(file):\n    return os.path.getsize(file)\n\ndef get_file_date(file):\n    return time.ctime(os.path.getmtime(file))\n\ndef get_file_name(file):\n    return os.path.basename(file)\n\ndef get_file_ext(file):\n    return os.path.splitext(file)\n\ndef get_file_mode(file):\n    return os.path.isfile(file)\n\ndef copy_file(file,dir):\n    return shutil.copy(file,dir)\n\ndef move_file(file,dir):\n    return shutil.move(file,dir)\n\ndef del_file(file):\n    return os.remove(file)\n\ndef create_file(file):\n    return open(file, 'w')\n\ndef create_dir(dir):\n    return os.mkdir(dir)\n\ndef del_dir(dir):\n    return os.rmdir(dir)\n\ndef get_dir_list(dir):\n    return os.listdir(dir)\n\ndef get_file_list(dir):\n    return os.listdir(dir)\n\ndef get_dir_info(dir):\n    return os.stat(dir)\n\ndef get_dir_size(dir):\n    return os.path.getsize(dir)\n\ndef get_dir_date(dir):\n    return time.ctime(os.path.getmtime(dir))\n\ndef get_dir_name(dir):\n    return os.path.basename(dir)\n\ndef get_dir_mode(dir):\n    return os.path.isdir(dir)\n\ndef get_dir_parent(dir):\n    return os.path.dirname(dir)\n\ndef get_dir_root(dir):\n    return os.path.abspath(dir)\n\ndef get_dir_tree(dir):\n    return os.walk(dir)\n\ndef get_file_str(file):\n    return open(file).read()\n\ndef get_file_line(file):\n    return open(file).readline()\n\ndef get_file_lines(file):\n    return open(file).readlines()\n\ndef get_file_csv(file):\n    return csv.reader(open(file))\n\ndef get_file_ini(file):\n    return configparser.ConfigParser()\n\ndef get_file_json(file):\n    return json.load(open(file))\n\ndef get_file_xml(file):\n    return minidom.parse(file)\n\ndef get_file_yaml(file):\n    return yaml.load(open(file))\n\ndef get_file_xml(file):\n    return minidom.parse(file)\n\ndef get_file_yaml(file):\n    return yaml.load(open(file))\n\ndef get_file_csv(file):\n    return csv.reader(open(file))\n\ndef get_file_ini(file):\n    return configparser.ConfigParser()\n\ndef get_file_json(file):\n    return json.load(open(file))\n\ndef get_file_xml(file):\n    return minidom.parse(file)\n\ndef get_file_yaml(file):\n    return yaml.load(open(file))\n\ndef move_file(file,dir):\n    return shutil.move(file,dir)\n\ndef del_file(file):\n    return os.remove(file)\n\ndef create_file(file):\n    return open(file, 'w')\n\ndef create_dir(dir):\n    return os.mkdir(dir)\n\ndef del_dir(dir):\n    return os.rmdir(dir)\n\ndef get_dir_list(dir):\n    return os.listdir(dir)\n\ndef get_file_list(dir):\n    return os.listdir(dir)\n\ndef get_dir_info(dir):\n    return os.stat(dir)\n\ndef get_dir_size(dir):\n    return os.path.getsize(dir)\n\ndef get_dir_date(dir):\n    return time.ctime(os.path.getmtime(dir))\n\ndef get_dir_name(dir):\n    return os.path.basename(dir)\n\ndef get_dir_mode(dir):\n    return os.path.isdir(dir)\n\ndef get_dir_parent(dir):\n    return os.path.dirname(dir)\n\ndef get_dir_root(dir):\n    return os.path.abspath(dir)\n\ndef get_dir_tree(dir):\n    return os.walk(dir)\n\ndef get_file_str(file):\n    return open(file).read()\n\ndef get_file_line(file):\n    return open(file).readline()\n\ndef get_file_lines(file):\n    return open(file).readlines()\n\ndef get_file_csv(file):\n    return csv.reader(open(file))\n\ndef get_file_ini(file):\n    return configparser.ConfigParser()\n\ndef get_file_json(file):\n    return json.load(open(file))\n\ndef get_file_xml(file):\n    return minidom.parse(file)\n\ndef get_file_yaml(file):\n    return yaml.load(open(file))\n\ndef get_file_xml(file):\n    return minidom.parse(file)\n\ndef get_file_yaml(file):\n    return yaml.load(open(file))\n\ndef get_file_csv(file):\n    return csv.reader(open(file))\n\ndef get_file_ini(file):\n    return configparser.ConfigParser()\n\ndef get_file_json(file):\n    return json.load(open(file))\n\ndef get_file_xml(file):\n    return minidom.parse(file)\n\ndef get_file_yaml(file):\n    return yaml.load(open(file))\nimport csv\n\ndef main():\n    print('Hello')\n    dir = get_dir()\n    print(dir)\n    file = get_file(dir)\n    print(file)\n    print(get_file_list(dir))\n    print(get_file_info(file))\n    print(get_file_size(file))\n    print(get_file_date(file))\n    print(get_file_name(file))\n    print(get_file_ext(file))\n    print(get_file_mode\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650275224,
  "object": "edit"
}
2022-04-18 09:47:49.446854 fix syntax errors 3 ['\n\nprint("Hello, world")\n', "\n\n#-------------------------------------------------------------------------------\n# Name:        file\n# Purpose:\n#\n# Author:      v.osipov@gmail.com\n#\n# Created:     16/10/2019\n# Copyright:   (c) v.osipov 2019\n# Licence:     <your licence>\n#-------------------------------------------------------------------------------\nfrom collections import Counter\ndef main():\n    with open('file.txt', mode='w', encoding='utf-8') as f:\n        text = f.write('Привет, мир!\\nЭто мой первый файл.\\n')\n    with open('file.txt', encoding='utf-8') as f:\n        for line in f:\n            print(line, end='')\n    with open('file.txt', encoding='utf-8') as f:\n        text = f.read()\n    print(text)\n    print(len(text))\n    print(text.count('Привет'))\n    print(text.count('первый'))\n    print(text.count('файл'))\n    print(text.count('мир'))\n    print(text.count('Привет'))\n    print(text.count('первый'))\n    print(text.count('файл'))\n    print(text.count('мир'))\n    c = Counter(text)\n    print(c)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport os\nimport sys\nimport time\nimport shutil\nimport datetime\nimport configparser\ndef get_dir():\n    return os.getcwd()\n\ndef get_file(dir):\n    file_name = input('Введите имя файла:')\n    return os.path.join(dir,file_name)\n\ndef get_file_list(dir):\n    return os.listdir(dir)\n\ndef get_file_info(file):\n    return os.stat(file)\n\ndef get_file_size(file):\n    return os.path.getsize(file)\n\ndef get_file_date(file):\n    return time.ctime(os.path.getmtime(file))\n\ndef get_file_name(file):\n    return os.path.basename(file)\n\ndef get_file_ext(file):\n    return os.path.splitext(file)\n\ndef get_file_mode(file):\n    return os.path.isfile(file)\n\ndef copy_file(file,dir):\n    return shutil.copy(file,dir)\n\ndef move_file(file,dir):\n    return shutil.move(file,dir)\n\ndef del_file(file):\n    return os.remove(file)\n\ndef create_file(file):\n    return open(file, 'w')\n\ndef create_dir(dir):\n    return os.mkdir(dir)\n\ndef del_dir(dir):\n    return os.rmdir(dir)\n\ndef get_dir_list(dir):\n    return os.listdir(dir)\n\ndef get_file_list(dir):\n    return os.listdir(dir)\n\ndef get_dir_info(dir):\n    return os.stat(dir)\n\ndef get_dir_size(dir):\n    return os.path.getsize(dir)\n\ndef get_dir_date(dir):\n    return time.ctime(os.path.getmtime(dir))\n\ndef get_dir_name(dir):\n    return os.path.basename(dir)\n\ndef get_dir_mode(dir):\n    return os.path.isdir(dir)\n\ndef get_dir_parent(dir):\n    return os.path.dirname(dir)\n\ndef get_dir_root(dir):\n    return os.path.abspath(dir)\n\ndef get_dir_tree(dir):\n    return os.walk(dir)\n\ndef get_file_str(file):\n    return open(file).read()\n\ndef get_file_line(file):\n    return open(file).readline()\n\ndef get_file_lines(file):\n    return open(file).readlines()\n\ndef get_file_csv(file):\n    return csv.reader(open(file))\n\ndef get_file_ini(file):\n    return configparser.ConfigParser()\n\ndef get_file_json(file):\n    return json.load(open(file))\n\ndef get_file_xml(file):\n    return minidom.parse(file)\n\ndef get_file_yaml(file):\n    return yaml.load(open(file))\n\ndef get_file_xml(file):\n    return minidom.parse(file)\n\ndef get_file_yaml(file):\n    return yaml.load(open(file))\n\ndef get_file_csv(file):\n    return csv.reader(open(file))\n\ndef get_file_ini(file):\n    return configparser.ConfigParser()\n\ndef get_file_json(file):\n    return json.load(open(file))\n\ndef get_file_xml(file):\n    return minidom.parse(file)\n\ndef get_file_yaml(file):\n    return yaml.load(open(file))\n\ndef move_file(file,dir):\n    return shutil.move(file,dir)\n\ndef del_file(file):\n    return os.remove(file)\n\ndef create_file(file):\n    return open(file, 'w')\n\ndef create_dir(dir):\n    return os.mkdir(dir)\n\ndef del_dir(dir):\n    return os.rmdir(dir)\n\ndef get_dir_list(dir):\n    return os.listdir(dir)\n\ndef get_file_list(dir):\n    return os.listdir(dir)\n\ndef get_dir_info(dir):\n    return os.stat(dir)\n\ndef get_dir_size(dir):\n    return os.path.getsize(dir)\n\ndef get_dir_date(dir):\n    return time.ctime(os.path.getmtime(dir))\n\ndef get_dir_name(dir):\n    return os.path.basename(dir)\n\ndef get_dir_mode(dir):\n    return os.path.isdir(dir)\n\ndef get_dir_parent(dir):\n    return os.path.dirname(dir)\n\ndef get_dir_root(dir):\n    return os.path.abspath(dir)\n\ndef get_dir_tree(dir):\n    return os.walk(dir)\n\ndef get_file_str(file):\n    return open(file).read()\n\ndef get_file_line(file):\n    return open(file).readline()\n\ndef get_file_lines(file):\n    return open(file).readlines()\n\ndef get_file_csv(file):\n    return csv.reader(open(file))\n\ndef get_file_ini(file):\n    return configparser.ConfigParser()\n\ndef get_file_json(file):\n    return json.load(open(file))\n\ndef get_file_xml(file):\n    return minidom.parse(file)\n\ndef get_file_yaml(file):\n    return yaml.load(open(file))\n\ndef get_file_xml(file):\n    return minidom.parse(file)\n\ndef get_file_yaml(file):\n    return yaml.load(open(file))\n\ndef get_file_csv(file):\n    return csv.reader(open(file))\n\ndef get_file_ini(file):\n    return configparser.ConfigParser()\n\ndef get_file_json(file):\n    return json.load(open(file))\n\ndef get_file_xml(file):\n    return minidom.parse(file)\n\ndef get_file_yaml(file):\n    return yaml.load(open(file))\nimport csv\n\ndef main():\n    print('Hello')\n    dir = get_dir()\n    print(dir)\n    file = get_file(dir)\n    print(file)\n    print(get_file_list(dir))\n    print(get_file_info(file))\n    print(get_file_size(file))\n    print(get_file_date(file))\n    print(get_file_name(file))\n    print(get_file_ext(file))\n    print(get_file_mode\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-18 09:47:49.447102 size on output set 3
2022-04-18 09:47:49.447126 num operations 1
2022-04-18 09:47:49.447139 size on input set 1
2022-04-18 09:47:53.347391 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\nq = int(sys.stdin.readline())\n\nfor _ in range(q):\n    k, n, a, b = map(int, sys.stdin.readline().split())\n\n    if n * b > k:\n        print(-1)\n    else:\n        print(k - n * b)\n"
    },
    {
      "index": 1,
      "text": "# https://www.acmicpc.net/problem/14501\n\nimport sys\n\nq = int(input())\n\nfor _ in range(q):\n    k, n, a, b = map(int, sys.stdin.readline().rstrip().split())\n\n    if n * b > k:\n        print(-1)\n    else:\n        print(k - n * b)\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/python\n\nimport sys\n\nq = int(input())\n\nfor _ in range(q):\n    k, n, a, b = map(int, sys.stdin.readline().rstrip().split())\n\n    if n * b > k:\n        print(-1)\n    else:\n        print(k - n * b)\n"
    }
  ],
  "created": 1650275269,
  "object": "edit"
}
2022-04-18 09:47:53.347642 fix syntax errors 3 ['import sys\n\nq = int(sys.stdin.readline())\n\nfor _ in range(q):\n    k, n, a, b = map(int, sys.stdin.readline().split())\n\n    if n * b > k:\n        print(-1)\n    else:\n        print(k - n * b)\n', '# https://www.acmicpc.net/problem/14501\n\nimport sys\n\nq = int(input())\n\nfor _ in range(q):\n    k, n, a, b = map(int, sys.stdin.readline().rstrip().split())\n\n    if n * b > k:\n        print(-1)\n    else:\n        print(k - n * b)\n', '#!/usr/bin/python\n\nimport sys\n\nq = int(input())\n\nfor _ in range(q):\n    k, n, a, b = map(int, sys.stdin.readline().rstrip().split())\n\n    if n * b > k:\n        print(-1)\n    else:\n        print(k - n * b)\n']
2022-04-18 09:47:53.347685 size on output set 3
2022-04-18 09:47:53.347702 num operations 1
2022-04-18 09:47:53.347713 size on input set 1
2022-04-18 09:48:01.649525 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import os\n\nimport sys\n\n#sys.stdin = open('input.txt')\n\ndef play(k,n,a,b):\n    if k < a and k < b:\n        return -1\n    if k < a:\n        return k//b\n    if k < a+b:\n        return 1\n    return (k-a)//b + 1\n\nq = int(input())\nfor _ in range(q):\n    k,n,a,b = map(int,input().split())\n    print(min(play(k,n,a,b),n))\n"
    },
    {
      "index": 1,
      "text": "import sys\n\nsys.stdin = open('input.txt')\n\ndef play(k, n, a, b):\n    if k < a or k < b:\n        return k\n    return (k - a) // b + 1\n\nq = int(input())\nfor _ in range(q):\n    k,n,a,b = map(int,input().split())\n    print(min(play(k,n,a,b),n))\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\n#sys.stdin = open('input.txt')\n\ndef play(k, n, a, b):\n    if k < a and k < b:\n        return -1\n    if k < a:\n        return k//b\n    if k < a+b:\n        return 1\n    return (k-a)//b + 1\n\n#q = int(input())\n#for _ in range(q):\n#    k,n,a,b = map(int,input().split())\n#    print(min(play(k,n,a,b),n))\n\ndef main():\n    k, n, a, b = map(int, input().split())\n    print(min(play(k, n, a, b), n))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650275273,
  "object": "edit"
}
2022-04-18 09:48:01.649821 fix syntax errors 3 ["import os\n\nimport sys\n\n#sys.stdin = open('input.txt')\n\ndef play(k,n,a,b):\n    if k < a and k < b:\n        return -1\n    if k < a:\n        return k//b\n    if k < a+b:\n        return 1\n    return (k-a)//b + 1\n\nq = int(input())\nfor _ in range(q):\n    k,n,a,b = map(int,input().split())\n    print(min(play(k,n,a,b),n))\n", "import sys\n\nsys.stdin = open('input.txt')\n\ndef play(k, n, a, b):\n    if k < a or k < b:\n        return k\n    return (k - a) // b + 1\n\nq = int(input())\nfor _ in range(q):\n    k,n,a,b = map(int,input().split())\n    print(min(play(k,n,a,b),n))\n", "\nimport sys\n\n#sys.stdin = open('input.txt')\n\ndef play(k, n, a, b):\n    if k < a and k < b:\n        return -1\n    if k < a:\n        return k//b\n    if k < a+b:\n        return 1\n    return (k-a)//b + 1\n\n#q = int(input())\n#for _ in range(q):\n#    k,n,a,b = map(int,input().split())\n#    print(min(play(k,n,a,b),n))\n\ndef main():\n    k, n, a, b = map(int, input().split())\n    print(min(play(k, n, a, b), n))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-18 09:48:01.649869 size on output set 3
