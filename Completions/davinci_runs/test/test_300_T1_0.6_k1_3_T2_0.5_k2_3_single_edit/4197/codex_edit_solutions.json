["def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n\n    l = [0] * n\n\nl = [0] * n\n\nfor i in range(n):\n    l[a[i]-1] = i+1\n\nfor i in range(n):\n    if i == n-1:\n        print(l[i])\n    else:\n        print(l[i], end=' ')\n", "\nn = int(input())\na = list(map(int, input().split()))\n\nl = [0] * n\n\nfor i in range(n):\n    l[a[i]-1] = i + 1\n\nfor i in l:\n    print(i)\n", "\n\nimport sys\nimport math\nfrom collections import deque\nfrom functools import reduce\n\nsys.setrecursionlimit(1000000)\nMOD = 10 ** 9 + 7\ninput = lambda: sys.stdin.readline().strip()\nNI = lambda: int(input())\nNMI = lambda: map(int, input().split())\nNLI = lambda: list(NMI())\nSI = lambda: input()\n\ndef make_grid(h, w, num): return [[int(num)] * w for _ in range(h)]\n\n\ndef main():\n    n = NI()\n    a = NLI()\n\n#print(n)\n#print(a)\n\nans = [-1] * n\ncount = 0\n\nfor i in range(n):\n    ans[a[i]-1] = count\n    count = count + 1\n\n    print(' '.join(map(str,ans)))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nn = int(input())\na = list(map(int, input().split()))\n\nl = [0] * n\n\nfor i in range(n):\n    l[a[i]-1] = i+1\n\nfor i in l:\n    print(i)\n", "#!/usr/bin/env python3\n\nn = int(input())\na = list(map(int, input().split()))\n\nl = [0] * n\n\nfor i in range(n):\n    l[a[i]-1] = i+1\n\nfor i in range(n):\n    if i == n-1:\n        print(l[i])\n    else:\n        print(l[i], end=' ')\n", "\nn = int(input())\na = list(map(int,input().split()))\n\n#print(n)\n#print(a)\n\nans = [-1] * n\ncount = 0\n\nfor i in range(n):\n    ans[a[i]-1] = count\n    count = count + 1\n\nprint(' '.join(map(str,ans)))\n", "n = int(input())\na = list(map(int, input().split()))\n\n\n# print(n)\n# print(a)\n\nans = [-1] * n\ncount = 0\n\nfor i in range(n):\n    ans[a[i]-1] = count\n    count = count + 1\n\nprint(' '.join(map(str,ans)))\n", "\n\nn = int(input())\na = list(map(int, input().split()))\nl = [0] * n\nfor i in range(n):\n    l[a[i]-1] = i+1\nfor i in range(n):\n    if i == n-1:\n        print(l[i])\n    else:\n        print(l[i], end=' ')\n"]