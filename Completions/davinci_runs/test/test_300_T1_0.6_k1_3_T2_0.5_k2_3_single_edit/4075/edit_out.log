2022-04-18 08:43:27.600966 num operations 1
2022-04-18 08:43:27.600997 size on input set 1
2022-04-18 08:43:32.600835 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\ninput = sys.stdin.readline()\nN, M = [int(i) for i in input.split()]\n\nswitches = [[] for _ in range(N)]\nfor _ in range(M):\n    line = [int(i) for i in sys.stdin.readline().split()]\n    k = line[0]\n    for i in line[1:]:\n        switches[i-1].append(_)\n\nlight_states = [int(i) for i in sys.stdin.readline().split()]\n\ndef f(n, ons):\n    if n == N:\n        for i in range(M):\n            if light_states[i] == 1 and sum([1 for j in switches[i] if ons[j] == 1]) % 2 == 0:\n                return 0\n        return 1\n    return f(n+1, ons+[0]) + f(n+1, ons+[1])\n\nprint(f(0, []))\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\ninput = sys.stdin.readline()\nN, M = [int(i) for i in input.split()]\n\nswitches = [[] for _ in range(N)]\nfor _ in range(M):\n    line = [int(i) for i in sys.stdin.readline().split()]\n    k = line[0]\n    for i in range(k):\n        switches[line[i+1]-1].append(_)\n\nlight_states = [int(i) for i in sys.stdin.readline().split()]\n\ndef f(n, ons):\n    if n == N:\n        for i in range(M):\n            if light_states[i] == 1 and sum([1 for j in switches[i] if ons[j] == 1]) % 2 == 0:\n                return 0\n        return 1\n    return f(n+1, ons+[0]) + f(n+1, ons+[1])\n\nprint(f(0, []))\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\nN, M = [int(i) for i in sys.stdin.readline().split()]\n\nswitches = [[] for _ in range(N)]\nfor _ in range(M):\n    line = [int(i) for i in sys.stdin.readline().split()]\n    k = line[0]\n    for i in range(k):\n        switches[line[i+1]-1].append(_)\n\nlight_states = [int(i) for i in sys.stdin.readline().split()]\n\n\ndef f(n, ons):\n    if n == N:\n        for i in range(M):\n            if light_states[i] == 1 and sum(\n                    [1 for j in switches[i] if ons[j] == 1]) % 2 == 0:\n                return 0\n        return 1\n    return f(n+1, ons+[0]) + f(n+1, ons+[1])\n\nprint(f(0, []))\n"
    }
  ],
  "created": 1650271407,
  "object": "edit"
}
2022-04-18 08:43:32.601038 fix syntax errors 3 ['\n\nimport sys\ninput = sys.stdin.readline()\nN, M = [int(i) for i in input.split()]\n\nswitches = [[] for _ in range(N)]\nfor _ in range(M):\n    line = [int(i) for i in sys.stdin.readline().split()]\n    k = line[0]\n    for i in line[1:]:\n        switches[i-1].append(_)\n\nlight_states = [int(i) for i in sys.stdin.readline().split()]\n\ndef f(n, ons):\n    if n == N:\n        for i in range(M):\n            if light_states[i] == 1 and sum([1 for j in switches[i] if ons[j] == 1]) % 2 == 0:\n                return 0\n        return 1\n    return f(n+1, ons+[0]) + f(n+1, ons+[1])\n\nprint(f(0, []))\n', '\nimport sys\ninput = sys.stdin.readline()\nN, M = [int(i) for i in input.split()]\n\nswitches = [[] for _ in range(N)]\nfor _ in range(M):\n    line = [int(i) for i in sys.stdin.readline().split()]\n    k = line[0]\n    for i in range(k):\n        switches[line[i+1]-1].append(_)\n\nlight_states = [int(i) for i in sys.stdin.readline().split()]\n\ndef f(n, ons):\n    if n == N:\n        for i in range(M):\n            if light_states[i] == 1 and sum([1 for j in switches[i] if ons[j] == 1]) % 2 == 0:\n                return 0\n        return 1\n    return f(n+1, ons+[0]) + f(n+1, ons+[1])\n\nprint(f(0, []))\n', '\nimport sys\nN, M = [int(i) for i in sys.stdin.readline().split()]\n\nswitches = [[] for _ in range(N)]\nfor _ in range(M):\n    line = [int(i) for i in sys.stdin.readline().split()]\n    k = line[0]\n    for i in range(k):\n        switches[line[i+1]-1].append(_)\n\nlight_states = [int(i) for i in sys.stdin.readline().split()]\n\n\ndef f(n, ons):\n    if n == N:\n        for i in range(M):\n            if light_states[i] == 1 and sum(\n                    [1 for j in switches[i] if ons[j] == 1]) % 2 == 0:\n                return 0\n        return 1\n    return f(n+1, ons+[0]) + f(n+1, ons+[1])\n\nprint(f(0, []))\n']
2022-04-18 08:43:32.601091 size on output set 3
2022-04-18 08:43:32.601102 num operations 1
2022-04-18 08:43:32.601107 size on input set 1
2022-04-18 08:43:37.778868 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nN, M = map(int, input().split())\n\nbulbs = []\nfor i in range(M):\n    bulbs.append(list(map(int, input().split())))\n\np = list(map(int, input().split()))\n\nans = 0\nfor i in range(2**N):\n    on = []\n    for j in range(N):\n        if (i >> j) & 1 == 1:\n            on.append(j+1)\n    flag = True\n    for j in range(M):\n        cnt = 0\n        for k in range(bulbs[j][0]):\n            if bulbs[j][k+1] in on:\n                cnt += 1\n        if cnt % 2 != p[j]:\n            flag = False\n            break\n    if flag:\n        ans += 1\n\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "\nimport itertools\nN, M = map(int, input().split())\n\nbulbs = []\nfor i in range(M):\n    bulbs.append(list(map(int, input().split())))\n\np = list(map(int, input().split()))\n\nans = 0\nfor on in itertools.product([0,1], repeat=N):\n    flag = True\n    for j in range(M):\n        cnt = 0\n        for k in range(bulbs[j][0]):\n            if bulbs[j][k+1] in on:\n                cnt += 1\n        if (cnt % 2) != p[j]:\n            flag = False\n            break\n    if flag:\n        ans += 1\n\nprint(ans)\n"
    },
    {
      "index": 2,
      "text": "\nN, M = map(int, input().split())\n\nbulbs = []\nfor i in range(M):\n    bulbs.append(list(map(int, input().split())))\n\np = list(map(int, input().split()))\n\nans = 0\nfor i in range(2**N):\n    on = []\n    for j in range(N):\n        if (i >> j) & 1:\n            on.append(j+1)\n    flag = True\n    for j in range(M):\n        cnt = 0\n        for k in range(bulbs[j][0]):\n            if bulbs[j][k+1] in on:\n                cnt += 1\n        if (cnt % 2) != p[j]:\n            flag = False\n            break\n    if flag:\n        ans += 1\n\nprint(ans)\n"
    }
  ],
  "created": 1650271412,
  "object": "edit"
}
2022-04-18 08:43:37.779385 fix syntax errors 3 ['\nN, M = map(int, input().split())\n\nbulbs = []\nfor i in range(M):\n    bulbs.append(list(map(int, input().split())))\n\np = list(map(int, input().split()))\n\nans = 0\nfor i in range(2**N):\n    on = []\n    for j in range(N):\n        if (i >> j) & 1 == 1:\n            on.append(j+1)\n    flag = True\n    for j in range(M):\n        cnt = 0\n        for k in range(bulbs[j][0]):\n            if bulbs[j][k+1] in on:\n                cnt += 1\n        if cnt % 2 != p[j]:\n            flag = False\n            break\n    if flag:\n        ans += 1\n\nprint(ans)\n', '\nimport itertools\nN, M = map(int, input().split())\n\nbulbs = []\nfor i in range(M):\n    bulbs.append(list(map(int, input().split())))\n\np = list(map(int, input().split()))\n\nans = 0\nfor on in itertools.product([0,1], repeat=N):\n    flag = True\n    for j in range(M):\n        cnt = 0\n        for k in range(bulbs[j][0]):\n            if bulbs[j][k+1] in on:\n                cnt += 1\n        if (cnt % 2) != p[j]:\n            flag = False\n            break\n    if flag:\n        ans += 1\n\nprint(ans)\n', '\nN, M = map(int, input().split())\n\nbulbs = []\nfor i in range(M):\n    bulbs.append(list(map(int, input().split())))\n\np = list(map(int, input().split()))\n\nans = 0\nfor i in range(2**N):\n    on = []\n    for j in range(N):\n        if (i >> j) & 1:\n            on.append(j+1)\n    flag = True\n    for j in range(M):\n        cnt = 0\n        for k in range(bulbs[j][0]):\n            if bulbs[j][k+1] in on:\n                cnt += 1\n        if (cnt % 2) != p[j]:\n            flag = False\n            break\n    if flag:\n        ans += 1\n\nprint(ans)\n']
2022-04-18 08:43:37.779498 size on output set 3
2022-04-18 08:43:37.779597 num operations 1
2022-04-18 08:43:37.779633 size on input set 1
2022-04-18 08:43:42.167189 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef is_all_bulbs_lighted(bulbs, switches):\n    for bulb in bulbs:\n        bulb_switch_count = 0\n        # On/Off state of switches that are connected to the bulb\n        for switch in bulb['switches']:\n            bulb_switch_count += switches[switch - 1]\n        # If the count is not congruent to p mod 2, the bulb is not lighted\n        if bulb_switch_count % 2 != bulb['p']:\n            return False\n    return True\n\ndef print_switch_status(bulbs, switches):\n    switch_status = []\n    for i in range(len(switches)):\n        switch_status.append('on' if switches[i] == 1 else 'off')\n    print(switch_status)\n\ndef main():\n    # Get the number of switches and the number of bulbs\n    [n, m] = sys.stdin.readline().split()\n    n = int(n)\n    m = int(m)\n    # Get the connected switches and p for each bulb\n    bulbs = []\n    for i in range(m):\n        # Get the number of switches that are connected to the bulb\n        k = int(sys.stdin.readline().split()[0])\n        # Get the connected switches\n        switches = [int(s) for s in sys.stdin.readline().split()]\n        # Get p\n        p = int(sys.stdin.readline().split()[0])\n        bulbs.append({'switches': switches, 'p': p})\n    # Calculate the number of combinations of \"on\" and \"off\" states of the switches that light all the bulbs\n    count = 0\n    switches = [0] * n\n    while True:\n        if is_all_bulbs_lighted(bulbs, switches):\n            # print_switch_status(bulbs, switches)\n            count += 1\n        # Increase the switch count\n        switches[0] += 1\n        for i in range(n - 1):\n            if switches[i] == 2:\n                switches[i] = 0\n                switches[i + 1] += 1\n        if switches[n - 1] == 2:\n            break\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef is_all_bulbs_lighted(bulbs, switches):\n    for bulb in bulbs:\n        bulb_switch_count = 0\n        # On/Off state of switches that are connected to the bulb\n        for switch in bulb['switches']:\n            bulb_switch_count += switches[switch - 1]\n        # If the count is not congruent to p mod 2, the bulb is not lit\n        if bulb_switch_count % 2 != bulb['p']:\n            return False\n    return True\n\ndef print_switch_status(bulbs, switches):\n    switch_status = []\n    for i in range(len(switches)):\n        switch_status.append('on' if switches[i] == 1 else 'off')\n    print(switch_status)\n\ndef main():\n    # Get the number of switches and bulbs\n    [n, m] = sys.stdin.readline().split()\n    n = int(n)\n    m = int(m)\n    # Get the connected switches and p for each bulb\n    bulbs = []\n    for i in range(m):\n        # Get the number of switches that are connected to the bulb\n        k = int(sys.stdin.readline().split()[0])\n        # Get the connected switches\n        switches = [int(s) for s in sys.stdin.readline().split()]\n        # Get p\n        p = int(sys.stdin.readline().split()[0])\n        bulbs.append({'switches': switches, 'p': p})\n    # Calculate the number of combinations of \"on\" and \"off\" states of the switches that light all the bulbs\n    count = 0\n    switches = [0] * n\n    while True:\n        if is_all_bulbs_lighted(bulbs, switches):\n            # print_switch_status(bulbs, switches)\n            count += 1\n        # Increase the switch count\n        switches[0] += 1\n        for i in range(n - 1):\n            if switches[i] == 2:\n                switches[i] = 0\n                switches[i + 1] += 1\n        if switches[n - 1] == 2:\n            break\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys, os\n\ndef is_all_bulbs_lighted(bulbs, switches):\n    for bulb in bulbs:\n        bulb_switch_count = 0\n        # On/Off state of switches that are connected to the bulb\n        for switch in bulb['switches']:\n            bulb_switch_count += switches[switch - 1]\n        # If the count is not congruent to p mod 2, the bulb is not lit\n        if bulb_switch_count % 2 != bulb['p']:\n            return False\n    return True\n\ndef print_switch_status(bulbs, switches):\n    switch_status = []\n    for i in range(len(switches)):\n        switch_status.append('on' if switches[i] == 1 else 'off')\n    print(switch_status)\n\ndef main():\n    # Get the number of switches and bulbs\n    [n, m] = sys.stdin.readline().split()\n    n = int(n)\n    m = int(m)\n    # Get the connected switches and p for each bulb\n    bulbs = []\n    for i in range(m):\n        # Get the number of switches that are connected to the bulb\n        k = int(sys.stdin.readline().split()[0])\n        # Get the connected switches\n        switches = [int(s) for s in sys.stdin.readline().split()]\n        # Get p\n        p = int(sys.stdin.readline().split()[0])\n        bulbs.append({'switches': switches, 'p': p})\n    # Calculate the number of combinations of \"on\" and \"off\" states of the switches that light all the bulbs\n    count = 0\n    switches = [0] * n\n    while True:\n        if is_all_bulbs_lighted(bulbs, switches):\n            # print_switch_status(bulbs, switches)\n            count += 1\n        # Increase the switch count\n        switches[0] += 1\n        for i in range(n):\n            if switches[i] == 2:\n                switches[i] = 0\n                if i < n - 1:\n                    switches[i + 1] += 1\n        if switches[n - 1] == 2:\n            break\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650271417,
  "object": "edit"
}
2022-04-18 08:43:42.167503 fix syntax errors 3 ['\nimport sys\n\ndef is_all_bulbs_lighted(bulbs, switches):\n    for bulb in bulbs:\n        bulb_switch_count = 0\n        # On/Off state of switches that are connected to the bulb\n        for switch in bulb[\'switches\']:\n            bulb_switch_count += switches[switch - 1]\n        # If the count is not congruent to p mod 2, the bulb is not lighted\n        if bulb_switch_count % 2 != bulb[\'p\']:\n            return False\n    return True\n\ndef print_switch_status(bulbs, switches):\n    switch_status = []\n    for i in range(len(switches)):\n        switch_status.append(\'on\' if switches[i] == 1 else \'off\')\n    print(switch_status)\n\ndef main():\n    # Get the number of switches and the number of bulbs\n    [n, m] = sys.stdin.readline().split()\n    n = int(n)\n    m = int(m)\n    # Get the connected switches and p for each bulb\n    bulbs = []\n    for i in range(m):\n        # Get the number of switches that are connected to the bulb\n        k = int(sys.stdin.readline().split()[0])\n        # Get the connected switches\n        switches = [int(s) for s in sys.stdin.readline().split()]\n        # Get p\n        p = int(sys.stdin.readline().split()[0])\n        bulbs.append({\'switches\': switches, \'p\': p})\n    # Calculate the number of combinations of "on" and "off" states of the switches that light all the bulbs\n    count = 0\n    switches = [0] * n\n    while True:\n        if is_all_bulbs_lighted(bulbs, switches):\n            # print_switch_status(bulbs, switches)\n            count += 1\n        # Increase the switch count\n        switches[0] += 1\n        for i in range(n - 1):\n            if switches[i] == 2:\n                switches[i] = 0\n                switches[i + 1] += 1\n        if switches[n - 1] == 2:\n            break\n    print(count)\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef is_all_bulbs_lighted(bulbs, switches):\n    for bulb in bulbs:\n        bulb_switch_count = 0\n        # On/Off state of switches that are connected to the bulb\n        for switch in bulb[\'switches\']:\n            bulb_switch_count += switches[switch - 1]\n        # If the count is not congruent to p mod 2, the bulb is not lit\n        if bulb_switch_count % 2 != bulb[\'p\']:\n            return False\n    return True\n\ndef print_switch_status(bulbs, switches):\n    switch_status = []\n    for i in range(len(switches)):\n        switch_status.append(\'on\' if switches[i] == 1 else \'off\')\n    print(switch_status)\n\ndef main():\n    # Get the number of switches and bulbs\n    [n, m] = sys.stdin.readline().split()\n    n = int(n)\n    m = int(m)\n    # Get the connected switches and p for each bulb\n    bulbs = []\n    for i in range(m):\n        # Get the number of switches that are connected to the bulb\n        k = int(sys.stdin.readline().split()[0])\n        # Get the connected switches\n        switches = [int(s) for s in sys.stdin.readline().split()]\n        # Get p\n        p = int(sys.stdin.readline().split()[0])\n        bulbs.append({\'switches\': switches, \'p\': p})\n    # Calculate the number of combinations of "on" and "off" states of the switches that light all the bulbs\n    count = 0\n    switches = [0] * n\n    while True:\n        if is_all_bulbs_lighted(bulbs, switches):\n            # print_switch_status(bulbs, switches)\n            count += 1\n        # Increase the switch count\n        switches[0] += 1\n        for i in range(n - 1):\n            if switches[i] == 2:\n                switches[i] = 0\n                switches[i + 1] += 1\n        if switches[n - 1] == 2:\n            break\n    print(count)\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys, os\n\ndef is_all_bulbs_lighted(bulbs, switches):\n    for bulb in bulbs:\n        bulb_switch_count = 0\n        # On/Off state of switches that are connected to the bulb\n        for switch in bulb[\'switches\']:\n            bulb_switch_count += switches[switch - 1]\n        # If the count is not congruent to p mod 2, the bulb is not lit\n        if bulb_switch_count % 2 != bulb[\'p\']:\n            return False\n    return True\n\ndef print_switch_status(bulbs, switches):\n    switch_status = []\n    for i in range(len(switches)):\n        switch_status.append(\'on\' if switches[i] == 1 else \'off\')\n    print(switch_status)\n\ndef main():\n    # Get the number of switches and bulbs\n    [n, m] = sys.stdin.readline().split()\n    n = int(n)\n    m = int(m)\n    # Get the connected switches and p for each bulb\n    bulbs = []\n    for i in range(m):\n        # Get the number of switches that are connected to the bulb\n        k = int(sys.stdin.readline().split()[0])\n        # Get the connected switches\n        switches = [int(s) for s in sys.stdin.readline().split()]\n        # Get p\n        p = int(sys.stdin.readline().split()[0])\n        bulbs.append({\'switches\': switches, \'p\': p})\n    # Calculate the number of combinations of "on" and "off" states of the switches that light all the bulbs\n    count = 0\n    switches = [0] * n\n    while True:\n        if is_all_bulbs_lighted(bulbs, switches):\n            # print_switch_status(bulbs, switches)\n            count += 1\n        # Increase the switch count\n        switches[0] += 1\n        for i in range(n):\n            if switches[i] == 2:\n                switches[i] = 0\n                if i < n - 1:\n                    switches[i + 1] += 1\n        if switches[n - 1] == 2:\n            break\n    print(count)\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-18 08:43:42.167584 size on output set 3
