["\ndef solve_dp(n, h, l, r, a):\n    dp = [[0] * h for i in range(n)]\n    dp[0][a[0]] = 1\n    for i in range(n - 1):\n        for j in range(h):\n            if dp[i][j] == 0:\n                continue\n            if (j + a[i + 1]) % h >= l and (j + a[i + 1]) % h <= r:\n                dp[i + 1][(j + a[i + 1]) % h] = max(dp[i + 1][(j + a[i + 1]) % h], dp[i][j] + 1)\n            if (j + a[i + 1] - 1) % h >= l and (j + a[i + 1] - 1) % h <= r:\n                dp[i + 1][(j + a[i + 1] - 1) % h] = max(dp[i + 1][(j + a[i + 1] - 1) % h], dp[i][j] + 1)\n    return max(dp[n - 1])\n\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve_dp(n, h, l, r, a))\n", "\n\ndef solve_dp(n, h, l, r, a):\n    dp = [[0] * h for _ in range(n)]\n    dp[0][a[0]] = 1\n    for i in range(n - 1):\n        for j in range(h):\n            if dp[i][j] == 0:\n                continue\n            if (j + a[i + 1]) % h >= l and (j + a[i + 1]) % h <= r:\n                dp[i + 1][(j + a[i + 1]) % h] = max(dp[i + 1][(j + a[i + 1]) % h], dp[i][j] + 1)\n            if (j + a[i + 1] - 1) % h >= l and (j + a[i + 1] - 1) % h <= r:\n                dp[i + 1][(j + a[i + 1] - 1) % h] = max(dp[i + 1][(j + a[i + 1] - 1) % h], dp[i][j] + 1)\n    return max(dp[n - 1])\n\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve_dp(n, h, l, r, a))\n", "\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0, 0] for i in range(n)]\n\nif a[0] > l and a[0] < r:\n    dp[0][0] = 1\nelse:\n    dp[0][0] = 0\nif a[0] - 1 > l and a[0] - 1 < r:\n    dp[0][1] = 1\nelse:\n    dp[0][1] = 0\n\nfor i in range(1, n):\n    dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\n    if a[i] > l and a[i] < r:\n        dp[i][0] += 1\n    dp[i][1] = max(dp[i - 1][0], dp[i - 1][1])\n    if a[i] - 1 > l and a[i] - 1 < r:\n        dp[i][1] += 1\n\nprint(max(dp[n - 1][0], dp[n - 1][1]))\n", "\n\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0, 0] for i in range(n)]\n\nif a[0] > l and a[0] < r:\n    dp[0][0] = 1\nelse:\n    dp[0][0] = 0\nif a[0] - 1 > l and a[0] - 1 < r:\n    dp[0][1] = 1\nelse:\n    dp[0][1] = 0\n\nfor i in range(1, n):\n    dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\n    if a[i] > l and a[i] < r:\n        dp[i][0] += 1\n    dp[i][1] = max(dp[i - 1][0], dp[i - 1][1])\n    if a[i] - 1 > l and a[i] - 1 < r:\n        dp[i][1] += 1\n\nprint(max(dp[n - 1][0], dp[n - 1][1]))\n", "\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0 for _ in range(h)] for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(h):\n        if j - a[i - 1] >= 0:\n            dp[i][j] = max(dp[i - 1][j - a[i - 1]], dp[i - 1][j - a[i - 1] + 1])\n        else:\n            dp[i][j] = dp[i - 1][j - a[i - 1] + 1]\n\nans = 0\nfor i in range(l, r + 1):\n    ans = max(ans, dp[n - 1][i])\n\nprint(ans)\n", "\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0 for _ in range(h)] for _ in range(n)]\n\ndp[0][a[0]] = 1\nfor i in range(1, n):\n    for j in range(h):\n        dp[i][j] = max(dp[i - 1][j], dp[i - 1][(j - a[i] + h) % h])\n\nans = 0\nfor i in range(l, r + 1):\n    ans = max(ans, dp[n - 1][i])\n\nprint(ans)\n", "\n#\n# n, h, l, r = map(int, input().split())\n# a = list(map(int, input().split()))\n#\n# dp = [[0 for _ in range(h)] for _ in range(n)]\n#\n# dp[0][0] = 1\n# for i in range(1, n):\n#     for j in range(h):\n#         if j - a[i] >= 0:\n#             dp[i][j] = max(dp[i - 1][j - a[i]], dp[i - 1][j - a[i] + 1])\n#         else:\n#             dp[i][j] = dp[i - 1][j - a[i] + 1]\n#\n# ans = 0\n# for i in range(l, r + 1):\n#     ans = max(ans, dp[n - 1][i])\n#\n# print(ans)\n", "\ndef solve_dp(n, h, l, r, a):\n    dp = [[0 for i in range(h)] for j in range(n)]\n    dp[0][a[0]] = 1\n    for i in range(n - 1):\n        for j in range(h):\n            if dp[i][j] == 0:\n                continue\n            if (j + a[i + 1]) % h >= l and (j + a[i + 1]) % h <= r:\n                dp[i + 1][(j + a[i + 1]) % h] = max(dp[i + 1][(j + a[i + 1]) % h], dp[i][j] + 1)\n            if (j + a[i + 1] - 1) % h >= l and (j + a[i + 1] - 1) % h <= r:\n                dp[i + 1][(j + a[i + 1] - 1) % h] = max(dp[i + 1][(j + a[i + 1] - 1) % h], dp[i][j] + 1)\n    return max(dp[n - 1])\n\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve_dp(n, h, l, r, a))\n"]