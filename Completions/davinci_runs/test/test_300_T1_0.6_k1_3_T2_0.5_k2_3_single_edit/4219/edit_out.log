2022-04-18 09:25:54.202043 num operations 1
2022-04-18 09:25:54.202067 size on input set 1
2022-04-18 09:25:58.923034 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# coding: utf-8\nimport sys\n\ndef dfs(v):\n    global visited, honest, unkind\n    visited[v] = True\n    for i in range(len(honest[v])):\n        if not visited[honest[v][i]]:\n            dfs(honest[v][i])\n    for i in range(len(unkind[v])):\n        if not visited[unkind[v][i]]:\n            dfs(unkind[v][i])\n\nN = int(input())\nhonest = [[] for i in range(N)]\nunkind = [[] for i in range(N)]\nfor i in range(N):\n    Ai = int(input())\n    for j in range(Ai):\n        x, y = map(int, sys.stdin.readline().split())\n        if y == 1:\n            honest[i].append(x-1)\n        else:\n            unkind[i].append(x-1)\nvisited = [False] * N\nans = 0\nfor i in range(N):\n    if visited[i]:\n        continue\n    dfs(i)\n    ans += 1\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef dfs(v):\n    global visited, honest, unkind, N\n    visited[v] = True\n    for i in range(len(honest[v])):\n        if not visited[honest[v][i]]:\n            dfs(honest[v][i])\n    for i in range(len(unkind[v])):\n        if not visited[unkind[v][i]]:\n            dfs(unkind[v][i])\n\nN = int(input())\nhonest = [[] for i in range(N)]\nunkind = [[] for i in range(N)]\nfor i in range(N):\n    A_i = int(input())\n    for j in range(A_i):\n        x, y = map(int, sys.stdin.readline().split())\n        if y == 1:\n            honest[i].append(x-1)\n        else:\n            unkind[i].append(x-1)\nvisited = [False] * N\nans = 0\nfor i in range(N):\n    if visited[i]:\n        continue\n    dfs(i)\n    ans += 1\nprint(ans)\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef dfs(v):\n    global visited, honest, unkind\n    visited[v] = True\n    for i in honest[v]:\n        if not visited[i]:\n            dfs(i)\n    for i in unkind[v]:\n        if not visited[i]:\n            dfs(i)\n\nN = int(input())\nhonest = [[] for i in range(N)]\nunkind = [[] for i in range(N)]\nfor i in range(N):\n    A_i = int(input())\n    for j in range(A_i):\n        x, y = map(int, sys.stdin.readline().split())\n        if y == 1:\n            honest[i].append(x-1)\n        else:\n            unkind[i].append(x-1)\nvisited = [False] * N\nans = 0\nfor i in range(N):\n    if visited[i]:\n        continue\n    dfs(i)\n    ans += 1\nprint(ans)\n"
    }
  ],
  "created": 1650273954,
  "object": "edit"
}
2022-04-18 09:25:58.923250 fix syntax errors 3 ['# coding: utf-8\nimport sys\n\ndef dfs(v):\n    global visited, honest, unkind\n    visited[v] = True\n    for i in range(len(honest[v])):\n        if not visited[honest[v][i]]:\n            dfs(honest[v][i])\n    for i in range(len(unkind[v])):\n        if not visited[unkind[v][i]]:\n            dfs(unkind[v][i])\n\nN = int(input())\nhonest = [[] for i in range(N)]\nunkind = [[] for i in range(N)]\nfor i in range(N):\n    Ai = int(input())\n    for j in range(Ai):\n        x, y = map(int, sys.stdin.readline().split())\n        if y == 1:\n            honest[i].append(x-1)\n        else:\n            unkind[i].append(x-1)\nvisited = [False] * N\nans = 0\nfor i in range(N):\n    if visited[i]:\n        continue\n    dfs(i)\n    ans += 1\nprint(ans)\n', '\nimport sys\n\ndef dfs(v):\n    global visited, honest, unkind, N\n    visited[v] = True\n    for i in range(len(honest[v])):\n        if not visited[honest[v][i]]:\n            dfs(honest[v][i])\n    for i in range(len(unkind[v])):\n        if not visited[unkind[v][i]]:\n            dfs(unkind[v][i])\n\nN = int(input())\nhonest = [[] for i in range(N)]\nunkind = [[] for i in range(N)]\nfor i in range(N):\n    A_i = int(input())\n    for j in range(A_i):\n        x, y = map(int, sys.stdin.readline().split())\n        if y == 1:\n            honest[i].append(x-1)\n        else:\n            unkind[i].append(x-1)\nvisited = [False] * N\nans = 0\nfor i in range(N):\n    if visited[i]:\n        continue\n    dfs(i)\n    ans += 1\nprint(ans)\n', '\nimport sys\n\ndef dfs(v):\n    global visited, honest, unkind\n    visited[v] = True\n    for i in honest[v]:\n        if not visited[i]:\n            dfs(i)\n    for i in unkind[v]:\n        if not visited[i]:\n            dfs(i)\n\nN = int(input())\nhonest = [[] for i in range(N)]\nunkind = [[] for i in range(N)]\nfor i in range(N):\n    A_i = int(input())\n    for j in range(A_i):\n        x, y = map(int, sys.stdin.readline().split())\n        if y == 1:\n            honest[i].append(x-1)\n        else:\n            unkind[i].append(x-1)\nvisited = [False] * N\nans = 0\nfor i in range(N):\n    if visited[i]:\n        continue\n    dfs(i)\n    ans += 1\nprint(ans)\n']
2022-04-18 09:25:58.923287 size on output set 3
2022-04-18 09:25:58.923297 num operations 1
2022-04-18 09:25:58.923303 size on input set 1
2022-04-18 09:26:15.665915 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# coding: utf-8\n\nn = int(input())\na = [int(input()) for _ in range(n)]\nx = [[0 for _ in range(a[i])] for i in range(n)]\ny = [[0 for _ in range(a[i])] for i in range(n)]\nfor i in range(n):\n    for j in range(a[i]):\n        x[i][j], y[i][j] = map(int, input().split())\n        x[i][j] -= 1\n\ndef dfs(i, honest):\n    if dp[i][honest] != -1:\n        return dp[i][honest]\n    ret = 0\n    if honest:\n        for j in range(a[i]):\n            if y[i][j] == 1:\n                ret = max(ret, dfs(x[i][j], 1))\n            else:\n                ret = max(ret, dfs(x[i][j], 1) + dfs(x[i][j], 0))\n    else:\n        ret = 1\n        for j in range(a[i]):\n            if y[i][j] == 1:\n                ret = max(ret, dfs(x[i][j], 1) + dfs(x[i][j], 0))\n            else:\n                ret = max(ret, dfs(x[i][j], 0))\n    dp[i][honest] = ret\n    return ret\n\ndp = [[-1 for _ in range(2)] for _ in range(n)]\nret = 0\nfor i in range(n):\n    ret = max(ret, dfs(i, 1) + dfs(i, 0))\nprint(ret)\n"
    },
    {
      "index": 1,
      "text": "n, m = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(m)]\nb = [0 for _ in range(n)]\nans = 0\nfor i in range(m):\n    for j in range(n):\n        if a[i][j] == 1:\n            b[j] = 1\n    c = 0\n    for j in range(n):\n        c += b[j]\n    if c == n:\n        ans += 1\nprint(ans)\n\n"
    },
    {
      "index": 2,
      "text": "import sys\nsys.setrecursionlimit(10**7)\n\n\nn = int(input())\na = [0] + [int(input()) for _ in range(n)]\nx = [[0 for _ in range(a[i]+1)] for i in range(n+1)]\ny = [[0 for _ in range(a[i]+1)] for i in range(n+1)]\nfor i in range(n):\n    for j in range(a[i]):\n        x[i][j+1], y[i][j+1] = map(int, input().split())\n        x[i][j+1] -= 1\n\ndef dfs(i, honest, dp):\n    if dp[i][honest] > -1:\n        return dp[i][honest] \n    ret = 0\n    if honest:\n        for j in range(1, a[i]+1):\n            if y[i][j] == 1:\n                ret = max(ret, dfs(x[i][j], 1, dp))\n            else:\n                ret = max(ret, dfs(x[i][j], 1, dp) + dfs(x[i][j], 0, dp))\n    else:\n        ret = 0\n        for j in range(1, a[i]+1):\n            if y[i][j] == 1:\n                ret = max(ret, dfs(x[i][j], 1, dp) + dfs(x[i][j], 0, dp))\n            else:\n                ret = max(ret, dfs(x[i][j], 0, dp))\n    dp[i][honest] = ret\n    #print(dp)\n    return ret\n\ndp = [[-1 for _ in range(2)] for _ in range(n+1)]\nret = 0\nfor i in range(n+1):\n    ret = max(ret, dfs(i, 1, dp) + dfs(i, 0, dp))\nprint(ret)\n"
    }
  ],
  "created": 1650273958,
  "object": "edit"
}
2022-04-18 09:26:15.666222 fix syntax errors 3 ['# coding: utf-8\n\nn = int(input())\na = [int(input()) for _ in range(n)]\nx = [[0 for _ in range(a[i])] for i in range(n)]\ny = [[0 for _ in range(a[i])] for i in range(n)]\nfor i in range(n):\n    for j in range(a[i]):\n        x[i][j], y[i][j] = map(int, input().split())\n        x[i][j] -= 1\n\ndef dfs(i, honest):\n    if dp[i][honest] != -1:\n        return dp[i][honest]\n    ret = 0\n    if honest:\n        for j in range(a[i]):\n            if y[i][j] == 1:\n                ret = max(ret, dfs(x[i][j], 1))\n            else:\n                ret = max(ret, dfs(x[i][j], 1) + dfs(x[i][j], 0))\n    else:\n        ret = 1\n        for j in range(a[i]):\n            if y[i][j] == 1:\n                ret = max(ret, dfs(x[i][j], 1) + dfs(x[i][j], 0))\n            else:\n                ret = max(ret, dfs(x[i][j], 0))\n    dp[i][honest] = ret\n    return ret\n\ndp = [[-1 for _ in range(2)] for _ in range(n)]\nret = 0\nfor i in range(n):\n    ret = max(ret, dfs(i, 1) + dfs(i, 0))\nprint(ret)\n', 'n, m = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(m)]\nb = [0 for _ in range(n)]\nans = 0\nfor i in range(m):\n    for j in range(n):\n        if a[i][j] == 1:\n            b[j] = 1\n    c = 0\n    for j in range(n):\n        c += b[j]\n    if c == n:\n        ans += 1\nprint(ans)\n\n', 'import sys\nsys.setrecursionlimit(10**7)\n\n\nn = int(input())\na = [0] + [int(input()) for _ in range(n)]\nx = [[0 for _ in range(a[i]+1)] for i in range(n+1)]\ny = [[0 for _ in range(a[i]+1)] for i in range(n+1)]\nfor i in range(n):\n    for j in range(a[i]):\n        x[i][j+1], y[i][j+1] = map(int, input().split())\n        x[i][j+1] -= 1\n\ndef dfs(i, honest, dp):\n    if dp[i][honest] > -1:\n        return dp[i][honest] \n    ret = 0\n    if honest:\n        for j in range(1, a[i]+1):\n            if y[i][j] == 1:\n                ret = max(ret, dfs(x[i][j], 1, dp))\n            else:\n                ret = max(ret, dfs(x[i][j], 1, dp) + dfs(x[i][j], 0, dp))\n    else:\n        ret = 0\n        for j in range(1, a[i]+1):\n            if y[i][j] == 1:\n                ret = max(ret, dfs(x[i][j], 1, dp) + dfs(x[i][j], 0, dp))\n            else:\n                ret = max(ret, dfs(x[i][j], 0, dp))\n    dp[i][honest] = ret\n    #print(dp)\n    return ret\n\ndp = [[-1 for _ in range(2)] for _ in range(n+1)]\nret = 0\nfor i in range(n+1):\n    ret = max(ret, dfs(i, 1, dp) + dfs(i, 0, dp))\nprint(ret)\n']
2022-04-18 09:26:15.666379 size on output set 3
2022-04-18 09:26:15.666403 num operations 1
2022-04-18 09:26:15.666415 size on input set 1
2022-04-18 09:26:21.902065 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nN = int(input())\n\nclass Person:\n    def __init__(self, id, testimonies):\n        self.id = id\n        self.testimonies = testimonies\n        self.kind = None\n\ndef find_max_honest_persons():\n    people = []\n    for i in range(N):\n        testimonies = []\n        for j in range(int(input())):\n            testimony = [int(x) for x in input().split(\" \")]\n            testimonies.append(testimony)\n        people.append(Person(i + 1, testimonies))\n\n    people = set_kind_of_people_recursively(people)\n\n    max_honest_persons = 0\n    for person in people:\n        if person.kind == \"h\":\n            max_honest_persons += 1\n    return max_honest_persons\n\ndef set_kind_of_people_recursively(people):\n    for person in people:\n        if person.kind is None:\n            set_kind_of_person(person, people)\n    return people\n\ndef set_kind_of_person(person, people):\n    if person.kind is None:\n        person.kind = \"h\"\n        for testimony in person.testimonies:\n            if testimony[1] == 1 and not people[testimony[0] - 1].kind == \"h\":\n                person.kind = \"u\"\n                break\n        for testimony in person.testimonies:\n            if testimony[1] == 0 and people[testimony[0] - 1].kind == \"h\":\n                people[testimony[0] - 1].kind = \"u\"\n                set_kind_of_people_recursively(people)\n                break\n\nprint(find_max_honest_persons())\n"
    },
    {
      "index": 1,
      "text": "\nN = int(raw_input())\n\nclass Person:\n    def __init__(self, id, testimonies):\n        self.id = id\n        self.testimonies = testimonies\n        self.kind = None\n\ndef find_max_honest_persons():\n    people = []\n    for i in range(N):\n        testimonies = []\n        for j in range(int(raw_input())):\n            testimony = [int(x) for x in raw_input().split(\" \")]\n            testimonies.append(testimony)\n        people.append(Person(i + 1, testimonies))\n\n    people = set_kind_of_people_recursively(people)\n\n    max_honest_persons = 0\n    for person in people:\n        if person.kind == \"h\":\n            max_honest_persons += 1\n    return max_honest_persons\n\ndef set_kind_of_people_recursively(people):\n    for person in people:\n        if person.kind is None:\n            set_kind_of_person(person, people)\n    return people\n\ndef set_kind_of_person(person, people):\n    if person.kind is None:\n        person.kind = \"h\"\n        for testimony in person.testimonies:\n            if testimony[1] == 1 and not people[testimony[0] - 1].kind == \"h\":\n                person.kind = \"u\"\n                break\n        for testimony in person.testimonies:\n            if testimony[1] == 0 and people[testimony[0] - 1].kind == \"h\":\n                people[testimony[0] - 1].kind = \"u\"\n                set_kind_of_people_recursively(people)\n                break\n\nprint find_max_honest_persons()\n"
    },
    {
      "index": 2,
      "text": "\n\nN = int(raw_input())\n\nclass Person:\n    def __init__(self, id, testimonies):\n        self.id = id\n        self.testimonies = testimonies\n        self.kind = None\n\ndef find_max_honest_persons():\n    people = []\n    for i in range(N):\n        testimonies = []\n        for j in range(int(raw_input())):\n            testimony = [int(x) for x in raw_input().split(\" \")]\n            testimonies.append(testimony)\n        people.append(Person(i + 1, testimonies))\n\n    set_kind_of_people_recursively(people)\n\n    max_honest_persons = 0\n    for person in people:\n        if person.kind == \"h\":\n            max_honest_persons += 1\n    return max_honest_persons\n\ndef set_kind_of_people_recursively(people):\n    for person in people:\n        if person.kind is None:\n            set_kind_of_person(person, people)\n\ndef set_kind_of_person(person, people):\n    if person.kind is None:\n        person.kind = \"h\"\n        for testimony in person.testimonies:\n            if testimony[1] == 1 and not people[testimony[0] - 1].kind is \"h\":\n                person.kind = \"u\"\n                break\n        for testimony in person.testimonies:\n            if testimony[1] == 0 and people[testimony[0] - 1].kind == \"h\":\n                people[testimony[0] - 1].kind = \"u\"\n                set_kind_of_people_recursively(people)\n                break\n\nprint find_max_honest_persons()\n"
    }
  ],
  "created": 1650273975,
  "object": "edit"
}
2022-04-18 09:26:21.902352 fix syntax errors 3 ['\n\nN = int(input())\n\nclass Person:\n    def __init__(self, id, testimonies):\n        self.id = id\n        self.testimonies = testimonies\n        self.kind = None\n\ndef find_max_honest_persons():\n    people = []\n    for i in range(N):\n        testimonies = []\n        for j in range(int(input())):\n            testimony = [int(x) for x in input().split(" ")]\n            testimonies.append(testimony)\n        people.append(Person(i + 1, testimonies))\n\n    people = set_kind_of_people_recursively(people)\n\n    max_honest_persons = 0\n    for person in people:\n        if person.kind == "h":\n            max_honest_persons += 1\n    return max_honest_persons\n\ndef set_kind_of_people_recursively(people):\n    for person in people:\n        if person.kind is None:\n            set_kind_of_person(person, people)\n    return people\n\ndef set_kind_of_person(person, people):\n    if person.kind is None:\n        person.kind = "h"\n        for testimony in person.testimonies:\n            if testimony[1] == 1 and not people[testimony[0] - 1].kind == "h":\n                person.kind = "u"\n                break\n        for testimony in person.testimonies:\n            if testimony[1] == 0 and people[testimony[0] - 1].kind == "h":\n                people[testimony[0] - 1].kind = "u"\n                set_kind_of_people_recursively(people)\n                break\n\nprint(find_max_honest_persons())\n', '\nN = int(raw_input())\n\nclass Person:\n    def __init__(self, id, testimonies):\n        self.id = id\n        self.testimonies = testimonies\n        self.kind = None\n\ndef find_max_honest_persons():\n    people = []\n    for i in range(N):\n        testimonies = []\n        for j in range(int(raw_input())):\n            testimony = [int(x) for x in raw_input().split(" ")]\n            testimonies.append(testimony)\n        people.append(Person(i + 1, testimonies))\n\n    people = set_kind_of_people_recursively(people)\n\n    max_honest_persons = 0\n    for person in people:\n        if person.kind == "h":\n            max_honest_persons += 1\n    return max_honest_persons\n\ndef set_kind_of_people_recursively(people):\n    for person in people:\n        if person.kind is None:\n            set_kind_of_person(person, people)\n    return people\n\ndef set_kind_of_person(person, people):\n    if person.kind is None:\n        person.kind = "h"\n        for testimony in person.testimonies:\n            if testimony[1] == 1 and not people[testimony[0] - 1].kind == "h":\n                person.kind = "u"\n                break\n        for testimony in person.testimonies:\n            if testimony[1] == 0 and people[testimony[0] - 1].kind == "h":\n                people[testimony[0] - 1].kind = "u"\n                set_kind_of_people_recursively(people)\n                break\n\nprint find_max_honest_persons()\n', '\n\nN = int(raw_input())\n\nclass Person:\n    def __init__(self, id, testimonies):\n        self.id = id\n        self.testimonies = testimonies\n        self.kind = None\n\ndef find_max_honest_persons():\n    people = []\n    for i in range(N):\n        testimonies = []\n        for j in range(int(raw_input())):\n            testimony = [int(x) for x in raw_input().split(" ")]\n            testimonies.append(testimony)\n        people.append(Person(i + 1, testimonies))\n\n    set_kind_of_people_recursively(people)\n\n    max_honest_persons = 0\n    for person in people:\n        if person.kind == "h":\n            max_honest_persons += 1\n    return max_honest_persons\n\ndef set_kind_of_people_recursively(people):\n    for person in people:\n        if person.kind is None:\n            set_kind_of_person(person, people)\n\ndef set_kind_of_person(person, people):\n    if person.kind is None:\n        person.kind = "h"\n        for testimony in person.testimonies:\n            if testimony[1] == 1 and not people[testimony[0] - 1].kind is "h":\n                person.kind = "u"\n                break\n        for testimony in person.testimonies:\n            if testimony[1] == 0 and people[testimony[0] - 1].kind == "h":\n                people[testimony[0] - 1].kind = "u"\n                set_kind_of_people_recursively(people)\n                break\n\nprint find_max_honest_persons()\n']
2022-04-18 09:26:21.902514 size on output set 3
