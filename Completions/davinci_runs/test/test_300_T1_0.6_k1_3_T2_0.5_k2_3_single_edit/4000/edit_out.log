2022-04-18 08:18:34.945546 num operations 1
2022-04-18 08:18:34.945558 size on input set 1
2022-04-18 08:19:03.456701 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# import sys\n\n# sys.setrecursionlimit(10 ** 6)\n\n# def dfs(v, parent = -1):\n#     for u in g[v]:\n#         if u != parent:\n#             dfs(u, v)\n#             dp1[v] += dp2[u]\n#             dp2[v] += max(dp1[u], dp2[u])\n\n# n = int(input())\n# g = [set() for _ in range(n + 1)]\n# for _ in range(n - 1):\n#     a, b = map(int, input().split())\n#     g[a].add(b)\n#     g[b].add(a)\n\n# dp1 = [0] * (n + 1)\n# dp2 = [1] * (n + 1)\n# dfs(1)\n\n# print(max(dp1[1], dp2[1]))\n# for v in range(1, n + 1):\n#     if dp1[v] == max(dp1[1], dp2[1]) and v != 1:\n#         print(1, v)\n#         break\n# for v in range(1, n + 1):\n#     if dp2[v] == max(dp1[1], dp2[1]) and v != 1:\n#         print(v)\n#         break\n\n# n = int(input())\n# a = list(map(int, input().split()))\n# a.sort()\n# print(a)\n# if a[0] != 0:\n#     print(0)\n#     exit()\n# ans = 1\n# for i in range(n - 1):\n#     if a[i] == a[i + 1]:\n#         continue\n#     else:\n#         ans += 1\n# print(ans)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n# a.sort()\n# print(a)\n# if a[0] != 0:\n#     print(0)\n#     exit()\n# ans = 1\n# for i in range(n - 1):\n#     if a[i] == a[i + 1]:\n#         continue\n#     else:\n#         ans += 1\n# print(ans)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n# a.sort()\n# print(a)\n# if a[0] != 0:\n#     print(0)\n#     exit()\n# ans = 1\n# for i in range(n - 1):\n#     if a[i] == a[i + 1]:\n#         continue\n#     else:\n#         ans += 1\n# print(ans)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n# a.sort()\n# print(a)\n# if a[0] != 0:\n#     print(0)\n#     exit()\n# ans = 1\n# for i in range(n - 1):\n#     if a[i] == a[i + 1]:\n#         continue\n#     else:\n#         ans += 1\n# print(ans)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n# a.sort()\n# print(a)\n# if a[0] != 0:\n#     print(0)\n#     exit()\n# ans = 1\n# for i in range(n - 1):\n#     if a[i] == a[i + 1]:\n#         continue\n#     else:\n#         ans += 1\n# print(ans)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n# a.sort()\n# print(a)\n# if a[0] != 0:\n#     print(0)\n#     exit()\n# ans = 1\n# for i in range(n - 1):\n#     if a[i] == a[i + 1]:\n#         continue\n#     else:\n#         ans += 1\n# print(ans)\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\n\ndef dfs(v, parent = -1):\n    for u in g[v]:\n        if u != parent:\n            dfs(u, v)\n            dp1[v] += dp2[u]\n            dp2[v] += max(dp1[u], dp2[u])\n\nn = int(input())\ng = [set() for _ in range(n + 1)]\nfor _ in range(n - 1):\n    a, b = map(int, input().split())\n    g[a].add(b)\n    g[b].add(a)\n\ndp1 = [0] * (n + 1)\ndp2 = [1] * (n + 1)\ndfs(1)\n\nprint(max(dp1[1], dp2[1]))\nfor v in range(1, n + 1):\n    if dp1[v] == max(dp1[1], dp2[1]) and v != 1:\n        print(1, v)\n        break\nfor v in range(1, n + 1):\n    if dp2[v] == max(dp1[1], dp2[1]) and v != 1:\n        print(v)\n        break\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\n\ndef dfs(v, parent = -1):\n    for u in g[v]:\n        if u != parent:\n            dfs(u, v)\n            dp1[v] += dp2[u]\n            dp2[v] += max(dp1[u], dp2[u])\n\nn = int(input())\ng = [set() for _ in range(n + 1)]\nfor _ in range(n - 1):\n    a, b = map(int, input().split())\n    g[a].add(b)\n    g[b].add(a)\n\ndp1 = [0] * (n + 1)\ndp2 = [1] * (n + 1)\ndfs(1)\n\nprint(max(dp1[1], dp2[1]))\nfor v in range(1, n + 1):\n    if dp1[v] == max(dp1[1], dp2[1]) and v != 1:\n        print(1, v)\n        break\nfor v in range(1, n + 1):\n    if dp2[v] == max(dp1[1], dp2[1]) and v != 1:\n        print(v)\n        break\n"
    }
  ],
  "created": 1650269916,
  "object": "edit"
}
2022-04-18 08:19:03.457007 fix syntax errors 3 ['\n\n# import sys\n\n# sys.setrecursionlimit(10 ** 6)\n\n# def dfs(v, parent = -1):\n#     for u in g[v]:\n#         if u != parent:\n#             dfs(u, v)\n#             dp1[v] += dp2[u]\n#             dp2[v] += max(dp1[u], dp2[u])\n\n# n = int(input())\n# g = [set() for _ in range(n + 1)]\n# for _ in range(n - 1):\n#     a, b = map(int, input().split())\n#     g[a].add(b)\n#     g[b].add(a)\n\n# dp1 = [0] * (n + 1)\n# dp2 = [1] * (n + 1)\n# dfs(1)\n\n# print(max(dp1[1], dp2[1]))\n# for v in range(1, n + 1):\n#     if dp1[v] == max(dp1[1], dp2[1]) and v != 1:\n#         print(1, v)\n#         break\n# for v in range(1, n + 1):\n#     if dp2[v] == max(dp1[1], dp2[1]) and v != 1:\n#         print(v)\n#         break\n\n# n = int(input())\n# a = list(map(int, input().split()))\n# a.sort()\n# print(a)\n# if a[0] != 0:\n#     print(0)\n#     exit()\n# ans = 1\n# for i in range(n - 1):\n#     if a[i] == a[i + 1]:\n#         continue\n#     else:\n#         ans += 1\n# print(ans)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n# a.sort()\n# print(a)\n# if a[0] != 0:\n#     print(0)\n#     exit()\n# ans = 1\n# for i in range(n - 1):\n#     if a[i] == a[i + 1]:\n#         continue\n#     else:\n#         ans += 1\n# print(ans)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n# a.sort()\n# print(a)\n# if a[0] != 0:\n#     print(0)\n#     exit()\n# ans = 1\n# for i in range(n - 1):\n#     if a[i] == a[i + 1]:\n#         continue\n#     else:\n#         ans += 1\n# print(ans)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n# a.sort()\n# print(a)\n# if a[0] != 0:\n#     print(0)\n#     exit()\n# ans = 1\n# for i in range(n - 1):\n#     if a[i] == a[i + 1]:\n#         continue\n#     else:\n#         ans += 1\n# print(ans)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n# a.sort()\n# print(a)\n# if a[0] != 0:\n#     print(0)\n#     exit()\n# ans = 1\n# for i in range(n - 1):\n#     if a[i] == a[i + 1]:\n#         continue\n#     else:\n#         ans += 1\n# print(ans)\n\n# n = int(input())\n# a = list(map(int, input().split()))\n# a.sort()\n# print(a)\n# if a[0] != 0:\n#     print(0)\n#     exit()\n# ans = 1\n# for i in range(n - 1):\n#     if a[i] == a[i + 1]:\n#         continue\n#     else:\n#         ans += 1\n# print(ans)\n', '\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\n\ndef dfs(v, parent = -1):\n    for u in g[v]:\n        if u != parent:\n            dfs(u, v)\n            dp1[v] += dp2[u]\n            dp2[v] += max(dp1[u], dp2[u])\n\nn = int(input())\ng = [set() for _ in range(n + 1)]\nfor _ in range(n - 1):\n    a, b = map(int, input().split())\n    g[a].add(b)\n    g[b].add(a)\n\ndp1 = [0] * (n + 1)\ndp2 = [1] * (n + 1)\ndfs(1)\n\nprint(max(dp1[1], dp2[1]))\nfor v in range(1, n + 1):\n    if dp1[v] == max(dp1[1], dp2[1]) and v != 1:\n        print(1, v)\n        break\nfor v in range(1, n + 1):\n    if dp2[v] == max(dp1[1], dp2[1]) and v != 1:\n        print(v)\n        break\n', '\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\n\ndef dfs(v, parent = -1):\n    for u in g[v]:\n        if u != parent:\n            dfs(u, v)\n            dp1[v] += dp2[u]\n            dp2[v] += max(dp1[u], dp2[u])\n\nn = int(input())\ng = [set() for _ in range(n + 1)]\nfor _ in range(n - 1):\n    a, b = map(int, input().split())\n    g[a].add(b)\n    g[b].add(a)\n\ndp1 = [0] * (n + 1)\ndp2 = [1] * (n + 1)\ndfs(1)\n\nprint(max(dp1[1], dp2[1]))\nfor v in range(1, n + 1):\n    if dp1[v] == max(dp1[1], dp2[1]) and v != 1:\n        print(1, v)\n        break\nfor v in range(1, n + 1):\n    if dp2[v] == max(dp1[1], dp2[1]) and v != 1:\n        print(v)\n        break\n']
2022-04-18 08:19:03.457058 size on output set 2
2022-04-18 08:19:03.457069 num operations 1
2022-04-18 08:19:03.457075 size on input set 1
2022-04-18 08:19:15.478687 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport queue\n\ndef main():\n    n = int(sys.stdin.readline())\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        a, b = map(int, sys.stdin.readline().split())\n        graph[a].append(b)\n        graph[b].append(a)\n    res = 0\n    for i in range(1, n + 1):\n        max_1, max_2 = 0, 0\n        dist_1 = [0] * (n + 1)\n        q = queue.Queue()\n        q.put(i)\n        while not q.empty():\n            u = q.get()\n            for v in graph[u]:\n                if dist_1[v] == 0:\n                    dist_1[v] = dist_1[u] + 1\n                    if dist_1[v] > max_1:\n                        max_2 = max_1\n                        max_1 = dist_1[v]\n                    elif dist_1[v] > max_2:\n                        max_2 = dist_1[v]\n                    q.put(v)\n        for j in range(1, n + 1):\n            if dist_1[j] == max_2:\n                max_3 = 0\n                dist_2 = [0] * (n + 1)\n                q = queue.Queue()\n                q.put(j)\n                while not q.empty():\n                    u = q.get()\n                    for v in graph[u]:\n                        if dist_2[v] == 0:\n                            dist_2[v] = dist_2[u] + 1\n                            if dist_2[v] > max_3:\n                                max_3 = dist_2[v]\n                            q.put(v)\n                if max_1 + max_2 + max_3 - 3 > res:\n                    res = max_1 + max_2 + max_3 - 3\n                    a = i\n                    b = j\n                    c = 0\n                    for k in range(1, n + 1):\n                        if dist_2[k] == max_3:\n                            c = k\n                            break\n    print(res)\n    print(a, b, c)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\"\"\"\nhttps://open.kattis.com/problems/diameter\n\"\"\"\n\nimport sys\nimport queue\n\ndef main():\n    n = int(sys.stdin.readline())\n    graph = [[] for _ in range(n + 1)]  # \u6811\u7684\u90bb\u63a5\u8868\n    # \u8bfb\u5165\u6811\u7684\u8fb9\n    for _ in range(n - 1):\n        a, b = map(int, sys.stdin.readline().split())\n        graph[a].append(b)\n        graph[b].append(a)\n    # \u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u8ba1\u7b97\u5176\u5230\u4efb\u610f\u70b9\u7684\u6700\u8fdc\u8ddd\u79bb\n    # \u7528BFS\uff0c\u6bcf\u6b21\u8bb0\u5f55\u6700\u8fdc\u70b9\u548c\u7b2c\u4e8c\u8fdc\u70b9\n    res = 0\n    for i in range(1, n + 1):\n        max_1, max_2 = 0, 0  # \u6700\u8fdc\u70b9\u548c\u7b2c\u4e8c\u8fdc\u70b9\u7684\u8ddd\u79bb\n        dist_1 = [0] * (n + 1)\n        q = queue.Queue()\n        # BFS\n        q.put(i)\n        while not q.empty():\n            u = q.get()\n            for v in graph[u]:\n                if dist_1[v] == 0:  # v\u672a\u88ab\u8bbf\u95ee\n                    dist_1[v] = dist_1[u] + 1\n                    if dist_1[v] > max_1:\n                        max_2 = max_1\n                        max_1 = dist_1[v]\n                    elif dist_1[v] > max_2:\n                        max_2 = dist_1[v]\n                    q.put(v)\n        # \u5bf9\u4e8e\u7b2c\u4e8c\u8fdc\u70b9\uff0c\u8ba1\u7b97\u5176\u5230\u4efb\u610f\u70b9\u7684\u6700\u8fdc\u8ddd\u79bb\n        # \u7528BFS\uff0c\u6bcf\u6b21\u8bb0\u5f55\u6700\u8fdc\u70b9\u7684\u8ddd\u79bb\n        for j in range(1, n + 1):\n            if dist_1[j] == max_2:\n                max_3 = 0  # \u6700\u8fdc\u70b9\u7684\u8ddd\u79bb\n                dist_2 = [0] * (n + 1)\n                q = queue.Queue()\n                q.put(j)\n                while not q.empty():\n                    u = q.get()\n                    for v in graph[u]:\n                        if dist_2[v] == 0:  # v\u672a\u88ab\u8bbf\u95ee\n                            dist_2[v] = dist_2[u] + 1\n                            if dist_2[v] > max_3:\n                                max_3 = dist_2[v]\n                            q.put(v)\n                # \u66f4\u65b0\u7b54\u6848\n                if max_1 + max_2 + max_3 - 3 > res:\n                    res = max_1 + max_2 + max_3 - 3\n                    a = i\n                    b = j\n                    c = 0\n                    for k in range(1, n + 1):\n                        if dist_2[k] == max_3:\n                            c = k\n                            break\n    print(res)\n    print(a, b, c)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\nimport queue\n\ndef main():\n    n = int(sys.stdin.readline())\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        a, b = map(int, sys.stdin.readline().split())\n        graph[a].append(b)\n        graph[b].append(a)\n    res = 0\n    for i in range(1, n + 1):\n        max_1, max_2 = 0, 0\n        dist_1 = [0] * (n + 1)\n        q = queue.Queue()\n        q.put(i)\n        while not q.empty():\n            u = q.get()\n            for v in graph[u]:\n                if dist_1[v] == 0:\n                    dist_1[v] = dist_1[u] + 1\n                    if dist_1[v] > max_1:\n                        max_2 = max_1\n                        max_1 = dist_1[v]\n                    elif dist_1[v] > max_2:\n                        max_2 = dist_1[v]\n                    q.put(v)\n        for j in range(1, n + 1):\n            if dist_1[j] == max_2:\n                max_3 = 0\n                dist_2 = [0] * (n + 1)\n                q = queue.Queue()\n                q.put(j)\n                while not q.empty():\n                    u = q.get()\n                    for v in graph[u]:\n                        if dist_2[v] == 0:\n                            dist_2[v] = dist_2[u] + 1\n                            if dist_2[v] > max_3:\n                                max_3 = dist_2[v]\n                            q.put(v)\n                if max_1 + max_2 + max_3 - 3 > res:\n                    res = max_1 + max_2 + max_3 - 3\n                    a = i\n                    b = j\n                    c = 0\n                    for k in range(1, n + 1):\n                        if dist_2[k] == max_3:\n                            c = k\n                            break\n    print(res)\n    print(a, b, c)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650269943,
  "object": "edit"
}
2022-04-18 08:19:15.478970 fix syntax errors 3 ['\nimport sys\nimport queue\n\ndef main():\n    n = int(sys.stdin.readline())\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        a, b = map(int, sys.stdin.readline().split())\n        graph[a].append(b)\n        graph[b].append(a)\n    res = 0\n    for i in range(1, n + 1):\n        max_1, max_2 = 0, 0\n        dist_1 = [0] * (n + 1)\n        q = queue.Queue()\n        q.put(i)\n        while not q.empty():\n            u = q.get()\n            for v in graph[u]:\n                if dist_1[v] == 0:\n                    dist_1[v] = dist_1[u] + 1\n                    if dist_1[v] > max_1:\n                        max_2 = max_1\n                        max_1 = dist_1[v]\n                    elif dist_1[v] > max_2:\n                        max_2 = dist_1[v]\n                    q.put(v)\n        for j in range(1, n + 1):\n            if dist_1[j] == max_2:\n                max_3 = 0\n                dist_2 = [0] * (n + 1)\n                q = queue.Queue()\n                q.put(j)\n                while not q.empty():\n                    u = q.get()\n                    for v in graph[u]:\n                        if dist_2[v] == 0:\n                            dist_2[v] = dist_2[u] + 1\n                            if dist_2[v] > max_3:\n                                max_3 = dist_2[v]\n                            q.put(v)\n                if max_1 + max_2 + max_3 - 3 > res:\n                    res = max_1 + max_2 + max_3 - 3\n                    a = i\n                    b = j\n                    c = 0\n                    for k in range(1, n + 1):\n                        if dist_2[k] == max_3:\n                            c = k\n                            break\n    print(res)\n    print(a, b, c)\n\nif __name__ == "__main__":\n    main()\n', '"""\nhttps://open.kattis.com/problems/diameter\n"""\n\nimport sys\nimport queue\n\ndef main():\n    n = int(sys.stdin.readline())\n    graph = [[] for _ in range(n + 1)]  # 树的邻接表\n    # 读入树的边\n    for _ in range(n - 1):\n        a, b = map(int, sys.stdin.readline().split())\n        graph[a].append(b)\n        graph[b].append(a)\n    # 对于每个点，计算其到任意点的最远距离\n    # 用BFS，每次记录最远点和第二远点\n    res = 0\n    for i in range(1, n + 1):\n        max_1, max_2 = 0, 0  # 最远点和第二远点的距离\n        dist_1 = [0] * (n + 1)\n        q = queue.Queue()\n        # BFS\n        q.put(i)\n        while not q.empty():\n            u = q.get()\n            for v in graph[u]:\n                if dist_1[v] == 0:  # v未被访问\n                    dist_1[v] = dist_1[u] + 1\n                    if dist_1[v] > max_1:\n                        max_2 = max_1\n                        max_1 = dist_1[v]\n                    elif dist_1[v] > max_2:\n                        max_2 = dist_1[v]\n                    q.put(v)\n        # 对于第二远点，计算其到任意点的最远距离\n        # 用BFS，每次记录最远点的距离\n        for j in range(1, n + 1):\n            if dist_1[j] == max_2:\n                max_3 = 0  # 最远点的距离\n                dist_2 = [0] * (n + 1)\n                q = queue.Queue()\n                q.put(j)\n                while not q.empty():\n                    u = q.get()\n                    for v in graph[u]:\n                        if dist_2[v] == 0:  # v未被访问\n                            dist_2[v] = dist_2[u] + 1\n                            if dist_2[v] > max_3:\n                                max_3 = dist_2[v]\n                            q.put(v)\n                # 更新答案\n                if max_1 + max_2 + max_3 - 3 > res:\n                    res = max_1 + max_2 + max_3 - 3\n                    a = i\n                    b = j\n                    c = 0\n                    for k in range(1, n + 1):\n                        if dist_2[k] == max_3:\n                            c = k\n                            break\n    print(res)\n    print(a, b, c)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\nimport queue\n\ndef main():\n    n = int(sys.stdin.readline())\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        a, b = map(int, sys.stdin.readline().split())\n        graph[a].append(b)\n        graph[b].append(a)\n    res = 0\n    for i in range(1, n + 1):\n        max_1, max_2 = 0, 0\n        dist_1 = [0] * (n + 1)\n        q = queue.Queue()\n        q.put(i)\n        while not q.empty():\n            u = q.get()\n            for v in graph[u]:\n                if dist_1[v] == 0:\n                    dist_1[v] = dist_1[u] + 1\n                    if dist_1[v] > max_1:\n                        max_2 = max_1\n                        max_1 = dist_1[v]\n                    elif dist_1[v] > max_2:\n                        max_2 = dist_1[v]\n                    q.put(v)\n        for j in range(1, n + 1):\n            if dist_1[j] == max_2:\n                max_3 = 0\n                dist_2 = [0] * (n + 1)\n                q = queue.Queue()\n                q.put(j)\n                while not q.empty():\n                    u = q.get()\n                    for v in graph[u]:\n                        if dist_2[v] == 0:\n                            dist_2[v] = dist_2[u] + 1\n                            if dist_2[v] > max_3:\n                                max_3 = dist_2[v]\n                            q.put(v)\n                if max_1 + max_2 + max_3 - 3 > res:\n                    res = max_1 + max_2 + max_3 - 3\n                    a = i\n                    b = j\n                    c = 0\n                    for k in range(1, n + 1):\n                        if dist_2[k] == max_3:\n                            c = k\n                            break\n    print(res)\n    print(a, b, c)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-18 08:19:15.479070 size on output set 2
2022-04-18 08:19:15.479082 num operations 1
2022-04-18 08:19:15.479088 size on input set 1
2022-04-18 08:19:24.496853 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    adj = [ [] for _ in range(n+1) ]\n    for _ in range(n-1):\n        a, b = map(int, input().split())\n        adj[a].append(b)\n        adj[b].append(a)\n    \n    parent = [0] * (n+1)\n    depth = [0] * (n+1)\n    def dfs(cur, par, dep):\n        parent[cur] = par\n        depth[cur] = dep\n        for child in adj[cur]:\n            if child != par:\n                dfs(child, cur, dep+1)\n    \n    dfs(1, 0, 0)\n    \n    def lca(a, b):\n        if depth[a] > depth[b]:\n            a, b = b, a\n        while depth[a] < depth[b]:\n            b = parent[b]\n        while a != b:\n            a = parent[a]\n            b = parent[b]\n        return a\n    \n    def solve(x, y, z):\n        # x -> y -> z\n        p1 = lca(x, y)\n        p2 = lca(y, z)\n        p3 = lca(x, z)\n        d1 = depth[x] + depth[y] - 2 * depth[p1]\n        d2 = depth[y] + depth[z] - 2 * depth[p2]\n        d3 = depth[x] + depth[z] - 2 * depth[p3]\n        return max(d1, d2, d3)\n    \n    ans = 0\n    x, y, z = 0, 0, 0\n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                t = solve(i, j, k)\n                if t > ans:\n                    ans = t\n                    x, y, z = i, j, k\n    print(ans)\n    print(x, y, z)\n\n    \nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n = int(input())\n    adj = [ [] for _ in range(n+1) ]\n    for _ in range(n-1):\n        a, b = map(int, input().split())\n        adj[a].append(b)\n        adj[b].append(a)\n    \n    parent = [0] * (n+1)\n    depth = [0] * (n+1)\n    def dfs(cur, par, dep):\n        parent[cur] = par\n        depth[cur] = dep\n        for child in adj[cur]:\n            if child != par:\n                dfs(child, cur, dep+1)\n    \n    dfs(1, 0, 0)\n    \n    def lca(a, b):\n        if depth[a] > depth[b]:\n            a, b = b, a\n        while depth[a] < depth[b]:\n            b = parent[b]\n        while a != b:\n            a = parent[a]\n            b = parent[b]\n        return a\n    \n    def solve(x, y, z):\n        # x -> y -> z\n        p1 = lca(x, y)\n        p2 = lca(y, z)\n        p3 = lca(x, z)\n        d1 = depth[x] + depth[y] - 2 * depth[p1]\n        d2 = depth[y] + depth[z] - 2 * depth[p2]\n        d3 = depth[x] + depth[z] - 2 * depth[p3]\n        return max(d1, d2, d3)\n    \n    ans = 0\n    x, y, z = 0, 0, 0\n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                t = solve(i, j, k)\n                if t > ans:\n                    ans = t\n                    x, y, z = i, j, k\n    print(ans)\n    print(x, y, z)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n = int(input())\n    adj = [[] for _ in range(n+1)]\n    for _ in range(n-1):\n        a, b = map(int, input().split())\n        adj[a].append(b)\n        adj[b].append(a)\n\n    parent = [0] * (n+1)\n    depth = [0] * (n+1)\n    def dfs(cur, par, dep):\n        parent[cur] = par\n        depth[cur] = dep\n        for child in adj[cur]:\n            if child != par:\n                dfs(child, cur, dep+1)\n\n    dfs(1, 0, 0)\n\n    def lca(a, b):\n        if depth[a] > depth[b]:\n            a, b = b, a\n        while depth[a] < depth[b]:\n            b = parent[b]\n        while a != b:\n            a = parent[a]\n            b = parent[b]\n        return a\n\n    def solve(x, y, z):\n        # x -> y -> z\n        p1 = lca(x, y)\n        p2 = lca(y, z)\n        p3 = lca(x, z)\n        d1 = depth[x] + depth[y] - 2 * depth[p1]\n        d2 = depth[y] + depth[z] - 2 * depth[p2]\n        d3 = depth[x] + depth[z] - 2 * depth[p3]\n        return max(d1, d2, d3)\n\n    ans = 0\n    x, y, z = 0, 0, 0\n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                t = solve(i, j, k)\n                if t > ans:\n                    ans = t\n                    x, y, z = i, j, k\n    print(ans)\n    print(x, y, z)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650269956,
  "object": "edit"
}
2022-04-18 08:19:24.497055 fix syntax errors 3 ['\n\ndef main():\n    n = int(input())\n    adj = [ [] for _ in range(n+1) ]\n    for _ in range(n-1):\n        a, b = map(int, input().split())\n        adj[a].append(b)\n        adj[b].append(a)\n    \n    parent = [0] * (n+1)\n    depth = [0] * (n+1)\n    def dfs(cur, par, dep):\n        parent[cur] = par\n        depth[cur] = dep\n        for child in adj[cur]:\n            if child != par:\n                dfs(child, cur, dep+1)\n    \n    dfs(1, 0, 0)\n    \n    def lca(a, b):\n        if depth[a] > depth[b]:\n            a, b = b, a\n        while depth[a] < depth[b]:\n            b = parent[b]\n        while a != b:\n            a = parent[a]\n            b = parent[b]\n        return a\n    \n    def solve(x, y, z):\n        # x -> y -> z\n        p1 = lca(x, y)\n        p2 = lca(y, z)\n        p3 = lca(x, z)\n        d1 = depth[x] + depth[y] - 2 * depth[p1]\n        d2 = depth[y] + depth[z] - 2 * depth[p2]\n        d3 = depth[x] + depth[z] - 2 * depth[p3]\n        return max(d1, d2, d3)\n    \n    ans = 0\n    x, y, z = 0, 0, 0\n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                t = solve(i, j, k)\n                if t > ans:\n                    ans = t\n                    x, y, z = i, j, k\n    print(ans)\n    print(x, y, z)\n\n    \nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n = int(input())\n    adj = [ [] for _ in range(n+1) ]\n    for _ in range(n-1):\n        a, b = map(int, input().split())\n        adj[a].append(b)\n        adj[b].append(a)\n    \n    parent = [0] * (n+1)\n    depth = [0] * (n+1)\n    def dfs(cur, par, dep):\n        parent[cur] = par\n        depth[cur] = dep\n        for child in adj[cur]:\n            if child != par:\n                dfs(child, cur, dep+1)\n    \n    dfs(1, 0, 0)\n    \n    def lca(a, b):\n        if depth[a] > depth[b]:\n            a, b = b, a\n        while depth[a] < depth[b]:\n            b = parent[b]\n        while a != b:\n            a = parent[a]\n            b = parent[b]\n        return a\n    \n    def solve(x, y, z):\n        # x -> y -> z\n        p1 = lca(x, y)\n        p2 = lca(y, z)\n        p3 = lca(x, z)\n        d1 = depth[x] + depth[y] - 2 * depth[p1]\n        d2 = depth[y] + depth[z] - 2 * depth[p2]\n        d3 = depth[x] + depth[z] - 2 * depth[p3]\n        return max(d1, d2, d3)\n    \n    ans = 0\n    x, y, z = 0, 0, 0\n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                t = solve(i, j, k)\n                if t > ans:\n                    ans = t\n                    x, y, z = i, j, k\n    print(ans)\n    print(x, y, z)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n = int(input())\n    adj = [[] for _ in range(n+1)]\n    for _ in range(n-1):\n        a, b = map(int, input().split())\n        adj[a].append(b)\n        adj[b].append(a)\n\n    parent = [0] * (n+1)\n    depth = [0] * (n+1)\n    def dfs(cur, par, dep):\n        parent[cur] = par\n        depth[cur] = dep\n        for child in adj[cur]:\n            if child != par:\n                dfs(child, cur, dep+1)\n\n    dfs(1, 0, 0)\n\n    def lca(a, b):\n        if depth[a] > depth[b]:\n            a, b = b, a\n        while depth[a] < depth[b]:\n            b = parent[b]\n        while a != b:\n            a = parent[a]\n            b = parent[b]\n        return a\n\n    def solve(x, y, z):\n        # x -> y -> z\n        p1 = lca(x, y)\n        p2 = lca(y, z)\n        p3 = lca(x, z)\n        d1 = depth[x] + depth[y] - 2 * depth[p1]\n        d2 = depth[y] + depth[z] - 2 * depth[p2]\n        d3 = depth[x] + depth[z] - 2 * depth[p3]\n        return max(d1, d2, d3)\n\n    ans = 0\n    x, y, z = 0, 0, 0\n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                t = solve(i, j, k)\n                if t > ans:\n                    ans = t\n                    x, y, z = i, j, k\n    print(ans)\n    print(x, y, z)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-18 08:19:24.497108 size on output set 3
