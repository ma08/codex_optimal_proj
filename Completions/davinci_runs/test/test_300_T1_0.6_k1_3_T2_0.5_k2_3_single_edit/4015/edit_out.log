2022-04-18 08:24:12.807146 num operations 1
2022-04-18 08:24:12.807166 size on input set 1
2022-04-18 08:24:31.379602 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/python\n\n#------------------------------------------------------------------------------\n# Author:  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \n# Date:\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \n# Description:\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \n#------------------------------------------------------------------------------\n\nimport os\nimport sys\nimport time\n\ndef main():\n\tprint(\"This is a test\")\n\t\nif __name__ == \"__main__\":\n\tmain()\n"
    },
    {
      "index": 1,
      "text": "import requests\nimport json\nimport time\nimport os\n\n\ndef get_file_list():\n    \"\"\"\n    Get the list of files in the directory.\n    \"\"\"\n    file_list = []\n    for file in os.listdir(\"./\"):\n        if file.endswith(\".txt\"):\n            file_list.append(file)\n    return file_list\n\n\ndef get_data(filename):\n    \"\"\"\n    Get the data from the file.\n    \"\"\"\n    with open(filename, \"r\") as file:\n        data = file.readlines()\n    return data\n\n\ndef get_json(data):\n    \"\"\"\n    Get the json data from the api.\n    \"\"\"\n    url = \"https://api.github.com/graphql\"\n    headers = {\"Authorization\": \"bearer \" + data[0].strip()}\n    payload = {\"query\": data[1].strip()}\n    response = requests.post(url, json=payload, headers=headers)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        raise Exception(\"Query failed to run by returning code of {}. {}\".format(response.status_code, response.text))\n\n\ndef get_repository_data(json):\n    \"\"\"\n    Get the repository data from the json.\n    \"\"\"\n    repository_data = json[\"data\"][\"search\"][\"nodes\"]\n    return repository_data\n\n\ndef get_repository_list(repository_data):\n    \"\"\"\n    Get the list of repositories.\n    \"\"\"\n    repository_list = []\n    for repository in repository_data:\n        repository_list.append(repository[\"nameWithOwner\"])\n    return repository_list\n\n\ndef write_repository_list(repository_list, filename):\n    \"\"\"\n    Write the list of repositories to the file.\n    \"\"\"\n    with open(filename, \"w\") as file:\n        for repository in repository_list:\n            file.write(repository + \"\\n\")\n\n\ndef get_repository_count(repository_data):\n    \"\"\"\n    Get the count of repositories.\n    \"\"\"\n    return len(repository_data)\n\n\ndef write_repository_count(repository_count, filename):\n    \"\"\"\n    Write the repository count to the file.\n    \"\"\"\n    with open(filename, \"w\") as file:\n        file.write(\"{}\".format(repository_count))\n\n\ndef run():\n    \"\"\"\n    Run the program.\n    \"\"\"\n    file_list = get_file_list()\n    for file in file_list:\n        data = get_data(file)\n        json = get_json(data)\n        repository_data = get_repository_data(json)\n        repository_list = get_repository_list(repository_data)\n        write_repository_list(repository_list, \"repository_list.txt\")\n        repository_count = get_repository_count(repository_data)\n        write_repository_count(repository_count, \"repository_count.txt\")\n        print(file, \"done.\")\n        time.sleep(1)\n"
    },
    {
      "index": 2,
      "text": "var fs = require('fs');\nvar path = require('path');\n\nfs.readdir(process.argv[2], function(err, list){\n    if(err) throw err;\n    list.forEach(function(file){\n        if(path.extname(file) === '.'+process.argv[3]){\n            console.log(file);\n        }\n    });\n});\nvar fs = require('fs');\nvar path = require('path');\n\nfs.readdir(process.argv[2], function(err, list){\n    if(err) throw err;\n    list.forEach(function(file){\n        if(path.extname(file) === '.'+process.argv[3]){\n            console.log(file);\n        }\n    });\n});\n"
    }
  ],
  "created": 1650270252,
  "object": "edit"
}
2022-04-18 08:24:31.379813 fix syntax errors 3 ['#!/usr/bin/python\n\n#------------------------------------------------------------------------------\n# Author:  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \n# Date:\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \n# Description:\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \n#------------------------------------------------------------------------------\n\nimport os\nimport sys\nimport time\n\ndef main():\n\tprint("This is a test")\n\t\nif __name__ == "__main__":\n\tmain()\n', 'import requests\nimport json\nimport time\nimport os\n\n\ndef get_file_list():\n    """\n    Get the list of files in the directory.\n    """\n    file_list = []\n    for file in os.listdir("./"):\n        if file.endswith(".txt"):\n            file_list.append(file)\n    return file_list\n\n\ndef get_data(filename):\n    """\n    Get the data from the file.\n    """\n    with open(filename, "r") as file:\n        data = file.readlines()\n    return data\n\n\ndef get_json(data):\n    """\n    Get the json data from the api.\n    """\n    url = "https://api.github.com/graphql"\n    headers = {"Authorization": "bearer " + data[0].strip()}\n    payload = {"query": data[1].strip()}\n    response = requests.post(url, json=payload, headers=headers)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        raise Exception("Query failed to run by returning code of {}. {}".format(response.status_code, response.text))\n\n\ndef get_repository_data(json):\n    """\n    Get the repository data from the json.\n    """\n    repository_data = json["data"]["search"]["nodes"]\n    return repository_data\n\n\ndef get_repository_list(repository_data):\n    """\n    Get the list of repositories.\n    """\n    repository_list = []\n    for repository in repository_data:\n        repository_list.append(repository["nameWithOwner"])\n    return repository_list\n\n\ndef write_repository_list(repository_list, filename):\n    """\n    Write the list of repositories to the file.\n    """\n    with open(filename, "w") as file:\n        for repository in repository_list:\n            file.write(repository + "\\n")\n\n\ndef get_repository_count(repository_data):\n    """\n    Get the count of repositories.\n    """\n    return len(repository_data)\n\n\ndef write_repository_count(repository_count, filename):\n    """\n    Write the repository count to the file.\n    """\n    with open(filename, "w") as file:\n        file.write("{}".format(repository_count))\n\n\ndef run():\n    """\n    Run the program.\n    """\n    file_list = get_file_list()\n    for file in file_list:\n        data = get_data(file)\n        json = get_json(data)\n        repository_data = get_repository_data(json)\n        repository_list = get_repository_list(repository_data)\n        write_repository_list(repository_list, "repository_list.txt")\n        repository_count = get_repository_count(repository_data)\n        write_repository_count(repository_count, "repository_count.txt")\n        print(file, "done.")\n        time.sleep(1)\n', "var fs = require('fs');\nvar path = require('path');\n\nfs.readdir(process.argv[2], function(err, list){\n    if(err) throw err;\n    list.forEach(function(file){\n        if(path.extname(file) === '.'+process.argv[3]){\n            console.log(file);\n        }\n    });\n});\nvar fs = require('fs');\nvar path = require('path');\n\nfs.readdir(process.argv[2], function(err, list){\n    if(err) throw err;\n    list.forEach(function(file){\n        if(path.extname(file) === '.'+process.argv[3]){\n            console.log(file);\n        }\n    });\n});\n"]
2022-04-18 08:24:31.379862 size on output set 3
2022-04-18 08:24:31.379873 num operations 1
2022-04-18 08:24:31.379879 size on input set 1
2022-04-18 08:24:35.441464 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\n    quit()\nif m % 2 == 1 and m % 3 == 1:\n    print(-1)\n    quit()\nsteps = 0\n\nwhile n != 1:\n    if n % 3 == 0:\n        n = int(n / 3)\n    elif n % 2 == 0:\n        n = int(n / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nwhile m != 1:\n    if m % 3 == 0:\n        m = int(m / 3)\n    elif m % 2 == 0:\n        m = int(m / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nprint(steps)\n"
    },
    {
      "index": 1,
      "text": "import sys\n\n\nn, m = map(int, sys.stdin.readline().split())\n\nif n == m:\n    print(0)\n    sys.exit()\n\nif m % 2 == 1 and m % 3 == 1:\n    print(-1)\n    sys.exit()\n\nsteps = 0\n\nwhile n != 1:\n    if n % 3 == 0:\n        n = int(n / 3)\n    elif n % 2 == 0:\n        n = int(n / 2)\n    else:\n        print(-1)\n        sys.exit()\n    steps += 1\n\nwhile m != 1:\n    if m % 3 == 0:\n        m = int(m / 3)\n    elif m % 2 == 0:\n        m = int(m / 2)\n    else:\n        print(-1)\n        sys.exit()\n    steps += 1\n\nprint(steps)\n"
    },
    {
      "index": 2,
      "text": "\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\n    quit()\n\nif m % 2 == 1 and m % 3 == 1:\n    print(-1)\n    quit()\n\nsteps = 0\n\nwhile n != 1:\n    if n % 3 == 0:\n        n = int(n / 3)\n    elif n % 2 == 0:\n        n = int(n / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nwhile m != 1:\n    if m % 3 == 0:\n        m = int(m / 3)\n    elif m % 2 == 0:\n        m = int(m / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nprint(steps)\n"
    }
  ],
  "created": 1650270271,
  "object": "edit"
}
2022-04-18 08:24:35.441725 fix syntax errors 3 ['\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\n    quit()\nif m % 2 == 1 and m % 3 == 1:\n    print(-1)\n    quit()\nsteps = 0\n\nwhile n != 1:\n    if n % 3 == 0:\n        n = int(n / 3)\n    elif n % 2 == 0:\n        n = int(n / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nwhile m != 1:\n    if m % 3 == 0:\n        m = int(m / 3)\n    elif m % 2 == 0:\n        m = int(m / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nprint(steps)\n', 'import sys\n\n\nn, m = map(int, sys.stdin.readline().split())\n\nif n == m:\n    print(0)\n    sys.exit()\n\nif m % 2 == 1 and m % 3 == 1:\n    print(-1)\n    sys.exit()\n\nsteps = 0\n\nwhile n != 1:\n    if n % 3 == 0:\n        n = int(n / 3)\n    elif n % 2 == 0:\n        n = int(n / 2)\n    else:\n        print(-1)\n        sys.exit()\n    steps += 1\n\nwhile m != 1:\n    if m % 3 == 0:\n        m = int(m / 3)\n    elif m % 2 == 0:\n        m = int(m / 2)\n    else:\n        print(-1)\n        sys.exit()\n    steps += 1\n\nprint(steps)\n', '\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\n    quit()\n\nif m % 2 == 1 and m % 3 == 1:\n    print(-1)\n    quit()\n\nsteps = 0\n\nwhile n != 1:\n    if n % 3 == 0:\n        n = int(n / 3)\n    elif n % 2 == 0:\n        n = int(n / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nwhile m != 1:\n    if m % 3 == 0:\n        m = int(m / 3)\n    elif m % 2 == 0:\n        m = int(m / 2)\n    else:\n        print(-1)\n        quit()\n    steps += 1\n\nprint(steps)\n']
2022-04-18 08:24:35.441760 size on output set 3
2022-04-18 08:24:35.441771 num operations 1
2022-04-18 08:24:35.441777 size on input set 1
2022-04-18 08:24:39.342530 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\n\ninput_list = sys.stdin.read().split()\n\nn = int(input_list[0])\nm = int(input_list[1])\n\nif n == m:\n    print(0)\nelse:\n    if m % n != 0:\n        print(-1)\n    else:\n        m = m // n\n        count = 0\n        while m > 1:\n            if m % 2 != 0 and m % 3 != 0:\n                print(-1)\n                break\n            elif m % 2 == 0:\n                m = m // 2\n                count += 1\n            elif m % 3 == 0:\n                m = m // 3\n                count += 1\n        if m == 1:\n            print(count)\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\n\ninput_list = sys.stdin.read().split()\n\nn = int(input_list[0])\nm = int(input_list[1])\n\nif n == m:\n    print(0)\nelse:\n    if m % n != 0:\n        print(-1)\n    else:\n        m = m / n\n        count = 0\n        while m > 1:\n            if m % 2 != 0 and m % 3 != 0:\n                print(-1)\n                break\n            elif m % 2 == 0:\n                m = m / 2\n                count += 1\n            elif m % 3 == 0:\n                m = m / 3\n                count += 1\n        if m == 1:\n            print(count)\n"
    },
    {
      "index": 2,
      "text": "\n\nimport math\n\nimport sys\n\n\ninput_list = sys.stdin.read().split()\n\nn = int(input_list[0])\nm = int(input_list[1])\n\nif n == m:\n    print(0)\nelse:\n    if m % n != 0:\n        print(-1)\n    else:\n        m = m // n\n        count = 0\n        while m > 1:\n            if m % 2 != 0 and m % 3 != 0:\n                print(-1)\n                break\n            elif m % 2 == 0:\n                m = m // 2\n                count += 1\n            elif m % 3 == 0:\n                m = m // 3\n                count += 1\n        if m == 1:\n            print(count)\n"
    }
  ],
  "created": 1650270275,
  "object": "edit"
}
2022-04-18 08:24:39.342711 fix syntax errors 3 ['\nimport sys\n\n\ninput_list = sys.stdin.read().split()\n\nn = int(input_list[0])\nm = int(input_list[1])\n\nif n == m:\n    print(0)\nelse:\n    if m % n != 0:\n        print(-1)\n    else:\n        m = m // n\n        count = 0\n        while m > 1:\n            if m % 2 != 0 and m % 3 != 0:\n                print(-1)\n                break\n            elif m % 2 == 0:\n                m = m // 2\n                count += 1\n            elif m % 3 == 0:\n                m = m // 3\n                count += 1\n        if m == 1:\n            print(count)\n', '\nimport sys\n\n\ninput_list = sys.stdin.read().split()\n\nn = int(input_list[0])\nm = int(input_list[1])\n\nif n == m:\n    print(0)\nelse:\n    if m % n != 0:\n        print(-1)\n    else:\n        m = m / n\n        count = 0\n        while m > 1:\n            if m % 2 != 0 and m % 3 != 0:\n                print(-1)\n                break\n            elif m % 2 == 0:\n                m = m / 2\n                count += 1\n            elif m % 3 == 0:\n                m = m / 3\n                count += 1\n        if m == 1:\n            print(count)\n', '\n\nimport math\n\nimport sys\n\n\ninput_list = sys.stdin.read().split()\n\nn = int(input_list[0])\nm = int(input_list[1])\n\nif n == m:\n    print(0)\nelse:\n    if m % n != 0:\n        print(-1)\n    else:\n        m = m // n\n        count = 0\n        while m > 1:\n            if m % 2 != 0 and m % 3 != 0:\n                print(-1)\n                break\n            elif m % 2 == 0:\n                m = m // 2\n                count += 1\n            elif m % 3 == 0:\n                m = m // 3\n                count += 1\n        if m == 1:\n            print(count)\n']
2022-04-18 08:24:39.342764 size on output set 3
