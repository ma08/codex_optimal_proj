["\n\n# ============\n# Solution\n# ============\n\na, b, k = input().split(' ')\na, b, k = int(a), int(b), int(k)\n\n# a_prime = gcd(a, b)\na_prime = a if a < b else b\nb_prime = a if a > b else b\n\nwhile a_prime != 0:\n    a_prime, b_prime = b_prime % a_prime, a_prime\n\n# The k-th largest number is b_prime / k\nprint(int(b_prime / k))\n", "\n\n# ============\n# Solution\n# ============\n\na, b, k = input().split(' ')\na, b, k = int(a), int(b), int(k)\n\na_prime = a if a < b else b\nb_prime = a if a > b else b\n\nwhile a_prime != 0:\n    a_prime, b_prime = b_prime % a_prime, a_prime\n\n# The k-th largest number is b_prime / k\nprint(int(b_prime / k))\n", "\nimport math\n\n# Get inputs\nA, B, K = [int(input()) for _ in range(3)]\n\n# Get GCD and all divisors\ngcd = math.gcd(A, B)\ndivisors = [d for d in range(1, gcd + 1) if gcd % d == 0]\ndivisors.sort(reverse=True)\n\n# Print K-th largest positive integer that divides both A and B.\nprint(divisors[K - 1])\n", "\n\n# ============\n# Solution\n# ============\n\na, b, k = [int(x) for x in input().split(' ')]\n\n# a_prime = gcd(a, b)\na_prime = a if a < b else b\nb_prime = a if a > b else b\n\nwhile a_prime != 0:\n    a_prime, b_prime = b_prime % a_prime, a_prime\n\n# The k-th largest number is a_prime / k\nprint(int(b_prime / k))\n", "\nfrom fractions import gcd\n\ndef main():\n    inputstring = input()\n    a, b, k = map(int, inputstring.split())\n    g = gcd(a, b)\n    for i in range(k-1):\n        g = gcd(g, min(a, b))\n        if g == 1:\n            break\n    print(g)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef main():\n    inputstring = input()\n    a, b, k = map(int, inputstring.split())\n    g = gcd(a,b)\n    for i in range(k-1):\n        g = gcd(g, min(a,b))\n        if g == 1:\n            break\n    print(g)\n\nif __name__ == \"__main__\":\n    main()\n", "import math\n\n# Get inputs\nA, B, K = [int(input()) for _ in range(3)]\n\n# Get GCD and all divisors\ngcd = math.gcd(A, B)\ndivisors = [d for d in range(1, gcd + 1) if gcd % d == 0]\ndivisors.sort(reverse=True)\n\n# Print K-th largest positive integer that divides both A and B.\nprint(divisors[K - 1])\n", "\n\nimport math\n\n# Get inputs\nA, B, K = [int(input()) for _ in range(3)]\n\n# Get GCD and all divisors \ngcd = math.gcd(A, B)\ndivisors = [d for d in range(1, gcd + 1) if gcd % d == 0]\ndivisors.sort(reverse=True)\n\n# Print K-th largest positive integer that divides both A and B.\nprint(divisors[K - 1])\n", "\n\nfrom fractions import gcd\n\ndef main():\n    inputstring = input()\n    a, b, k = map(int, inputstring.split())\n    g = gcd(a,b)\n    for i in range(k):\n        g = gcd(g, min(a,b))\n        if g == 1:\n            break\n    print(g)\n\nif __name__ == \"__main__\":\n    main()\n"]