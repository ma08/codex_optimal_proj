2022-04-18 09:10:35.634355 num operations 1
2022-04-18 09:10:35.634376 size on input set 1
2022-04-18 09:10:43.876017 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ninput = sys.stdin.readline\n\nN, M = map(int, input().split())\nstores = []\nfor _ in range(N):\n    A, B = map(int, input().split())\n    stores.append([A, B])\n \nstores = sorted(stores, key=lambda x: x[0])\n\ntotal = 0\nfor i in range(N):\n    if M <= stores[i][1]:\n        total += stores[i][0] * M\n        break\n    else:\n        total += stores[i][0] * stores[i][1]\n        M -= stores[i][1]\n\nprint(total)\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\ninput = sys.stdin.readline\n\nN, M = map(int, input().split())\nstores = []\nfor _ in range(N):\n    A, B = map(int, input().split())\n    stores.append([A, B])\n\nstores = sorted(stores, key=lambda x: x[0])\n\ntotal = 0\nfor i in range(N):\n    if M <= stores[i][1]:\n        total += stores[i][0] * M\n        break\n    else:\n        total += stores[i][0] * stores[i][1]\n        M -= stores[i][1]\n\nprint(total)\n"
    },
    {
      "index": 2,
      "text": "import math\n\nimport sys\n\ninput = sys.stdin.readline\n\nN, K = map(int, input().split())\nA = list(map(int, input().split()))\n\nA = sorted(A)\n# print(A)\nans = 0\nfor i in range(N):\n    for j in range(N):\n        if i == j:\n            continue\n        if A[i] * A[j] <= K:\n            ans = max(ans, A[i] * A[j])\n\nprint(ans)\n"
    }
  ],
  "created": 1650273035,
  "object": "edit"
}
2022-04-18 09:10:43.876359 fix syntax errors 3 ['\n\nimport sys\n\ninput = sys.stdin.readline\n\nN, M = map(int, input().split())\nstores = []\nfor _ in range(N):\n    A, B = map(int, input().split())\n    stores.append([A, B])\n \nstores = sorted(stores, key=lambda x: x[0])\n\ntotal = 0\nfor i in range(N):\n    if M <= stores[i][1]:\n        total += stores[i][0] * M\n        break\n    else:\n        total += stores[i][0] * stores[i][1]\n        M -= stores[i][1]\n\nprint(total)\n', '\nimport sys\ninput = sys.stdin.readline\n\nN, M = map(int, input().split())\nstores = []\nfor _ in range(N):\n    A, B = map(int, input().split())\n    stores.append([A, B])\n\nstores = sorted(stores, key=lambda x: x[0])\n\ntotal = 0\nfor i in range(N):\n    if M <= stores[i][1]:\n        total += stores[i][0] * M\n        break\n    else:\n        total += stores[i][0] * stores[i][1]\n        M -= stores[i][1]\n\nprint(total)\n', 'import math\n\nimport sys\n\ninput = sys.stdin.readline\n\nN, K = map(int, input().split())\nA = list(map(int, input().split()))\n\nA = sorted(A)\n# print(A)\nans = 0\nfor i in range(N):\n    for j in range(N):\n        if i == j:\n            continue\n        if A[i] * A[j] <= K:\n            ans = max(ans, A[i] * A[j])\n\nprint(ans)\n']
2022-04-18 09:10:43.876431 size on output set 3
2022-04-18 09:10:43.876451 num operations 1
2022-04-18 09:10:43.876462 size on input set 1
2022-04-18 09:10:50.519944 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nimport math\n\n#-----Constants-----\n\n#-----Input and Setup-----\nn, m = map(int, input().split())\nstores = []\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    stores.append([a, b])\n\n#-----Solve-----\n\nfor i in range(n):\n    print(stores[i])\n#-----Display-----\n"
    },
    {
      "index": 1,
      "text": "\n\n# Constants\n\n# Input and Setup\nn, m = map(int, input().split())\nstores = []\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    stores.append([a, b])\n\n# Solve\n\n# Display\n"
    },
    {
      "index": 2,
      "text": "\nINF = 10000000000\n#-----Constants-----\n\n#-----Input and Setup-----\nn, m = map(int, input().split())\n\n\nstores = []\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    stores.append([a, b])\n\n#dp[i][j] = min(dp[i][k] + dp[k][j])\ndp = [[INF for i in range(n)] for j in range(n)]\n\nfor i in range(n):\n    dp[i][i] = 0\n\nfor i in range(n):\n    for j in range(i+1, n):\n        for k in range(n):\n            if (stores[i][1] + stores[k][0] <= stores[j][0]):\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j])\n                dp[j][i] = dp[i][j]\n\nfor i in range(n):\n    for j in range(n):\n        print(dp[i][j], end = \" \")\n    print()\n#-----Solve-----\n\n#-----Display-----\n"
    }
  ],
  "created": 1650273043,
  "object": "edit"
}
2022-04-18 09:10:50.520218 fix syntax errors 3 ['\n\nimport sys\nimport math\n\n#-----Constants-----\n\n#-----Input and Setup-----\nn, m = map(int, input().split())\nstores = []\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    stores.append([a, b])\n\n#-----Solve-----\n\nfor i in range(n):\n    print(stores[i])\n#-----Display-----\n', '\n\n# Constants\n\n# Input and Setup\nn, m = map(int, input().split())\nstores = []\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    stores.append([a, b])\n\n# Solve\n\n# Display\n', '\nINF = 10000000000\n#-----Constants-----\n\n#-----Input and Setup-----\nn, m = map(int, input().split())\n\n\nstores = []\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    stores.append([a, b])\n\n#dp[i][j] = min(dp[i][k] + dp[k][j])\ndp = [[INF for i in range(n)] for j in range(n)]\n\nfor i in range(n):\n    dp[i][i] = 0\n\nfor i in range(n):\n    for j in range(i+1, n):\n        for k in range(n):\n            if (stores[i][1] + stores[k][0] <= stores[j][0]):\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j])\n                dp[j][i] = dp[i][j]\n\nfor i in range(n):\n    for j in range(n):\n        print(dp[i][j], end = " ")\n    print()\n#-----Solve-----\n\n#-----Display-----\n']
2022-04-18 09:10:50.520272 size on output set 3
2022-04-18 09:10:50.520294 num operations 1
2022-04-18 09:10:50.520306 size on input set 1
2022-04-18 09:11:03.450496 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# n = number of stores\n# m = number of energy drinks\n# a = price of one energy drink at a store\n# b = max number of energy drinks we can buy at a store\nn, m = map(int, input().split())\na = []\nb = []\nfor i in range(n):\n    ai, bi = map(int, input().split())\n    a.append(ai)\n    b.append(bi)\n\n# binary search\n# if we can buy m energy drinks with money x, then we can also buy m energy drinks with money y where y > x\n# if we cannot buy m energy drinks with money x, then we cannot buy m energy drinks with money y where y < x\n# therefore, we can use binary search to find the minimum money we need to buy m energy drinks\nok = 10**9*10**5 + 1\nng = 0\nwhile abs(ok - ng) > 1:\n    mid = (ok + ng) // 2\n    # if we can buy m energy drinks with money mid, then ok = mid\n    # otherwise, ng = mid\n    total = 0\n    for i in range(n):\n        total += min(mid // a[i], b[i])\n    if total >= m:\n        ok = mid\n    else:\n        ng = mid\n\nprint(ok)\n"
    },
    {
      "index": 1,
      "text": "\n\n\n# n = number of stores\n# m = number of energy drinks\n# a = price of one energy drink at a store\n# b = max number of energy drinks we can buy at a store\nn, m = map(int, input().split())\na = []\nb = []\nfor i in range(n):\n    ai, bi = map(int, input().split())\n    a.append(ai)\n    b.append(bi)\n\n# binary search\n# if we can buy m energy drinks with money x, then we can also buy m energy drinks with money y where y > x\n# if we cannot buy m energy drinks with money x, then we cannot buy m energy drinks with money y where y < x\n# therefore, we can use binary search to find the minimum money we need to buy m energy drinks\nok = 10 ** 9 * 10 ** 5 + 1\nng = 0\nwhile abs(ok - ng) > 1:\n    mid = (ok + ng) // 2\n    # if we can buy m energy drinks with money mid, then ok = mid\n    # otherwise, ng = mid\n    total = 0\n    for i in range(n):\n        total += min(mid // a[i], b[i])\n    if total >= m:\n        ok = mid\n    else:\n        ng = mid\n\nprint(ok)\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\ninput = sys.stdin.readline\n\n# binary search\n# if we can buy m energy drinks with money x, then we can also buy m energy drinks with money y where y > x\n# if we cannot buy m energy drinks with money x, then we cannot buy m energy drinks with money y where y < x\n# therefore, we can use binary search to find the minimum money we need to buy m energy drinks\nok = 10**9*10**5 + 1\nng = 0\nwhile abs(ok - ng) > 1:\n    mid = (ok + ng) // 2\n    # if we can buy m energy drinks with money mid, then ok = mid\n    # otherwise, ng = mid\n    total = 0\n    for i in range(n):\n        total += min(mid // a[i], b[i])\n    if total >= m:\n        ok = mid\n    else:\n        ng = mid\n\nprint(ok)\n"
    }
  ],
  "created": 1650273050,
  "object": "edit"
}
2022-04-18 09:11:03.450860 fix syntax errors 3 ['\n# n = number of stores\n# m = number of energy drinks\n# a = price of one energy drink at a store\n# b = max number of energy drinks we can buy at a store\nn, m = map(int, input().split())\na = []\nb = []\nfor i in range(n):\n    ai, bi = map(int, input().split())\n    a.append(ai)\n    b.append(bi)\n\n# binary search\n# if we can buy m energy drinks with money x, then we can also buy m energy drinks with money y where y > x\n# if we cannot buy m energy drinks with money x, then we cannot buy m energy drinks with money y where y < x\n# therefore, we can use binary search to find the minimum money we need to buy m energy drinks\nok = 10**9*10**5 + 1\nng = 0\nwhile abs(ok - ng) > 1:\n    mid = (ok + ng) // 2\n    # if we can buy m energy drinks with money mid, then ok = mid\n    # otherwise, ng = mid\n    total = 0\n    for i in range(n):\n        total += min(mid // a[i], b[i])\n    if total >= m:\n        ok = mid\n    else:\n        ng = mid\n\nprint(ok)\n', '\n\n\n# n = number of stores\n# m = number of energy drinks\n# a = price of one energy drink at a store\n# b = max number of energy drinks we can buy at a store\nn, m = map(int, input().split())\na = []\nb = []\nfor i in range(n):\n    ai, bi = map(int, input().split())\n    a.append(ai)\n    b.append(bi)\n\n# binary search\n# if we can buy m energy drinks with money x, then we can also buy m energy drinks with money y where y > x\n# if we cannot buy m energy drinks with money x, then we cannot buy m energy drinks with money y where y < x\n# therefore, we can use binary search to find the minimum money we need to buy m energy drinks\nok = 10 ** 9 * 10 ** 5 + 1\nng = 0\nwhile abs(ok - ng) > 1:\n    mid = (ok + ng) // 2\n    # if we can buy m energy drinks with money mid, then ok = mid\n    # otherwise, ng = mid\n    total = 0\n    for i in range(n):\n        total += min(mid // a[i], b[i])\n    if total >= m:\n        ok = mid\n    else:\n        ng = mid\n\nprint(ok)\n', '\n\nimport sys\ninput = sys.stdin.readline\n\n# binary search\n# if we can buy m energy drinks with money x, then we can also buy m energy drinks with money y where y > x\n# if we cannot buy m energy drinks with money x, then we cannot buy m energy drinks with money y where y < x\n# therefore, we can use binary search to find the minimum money we need to buy m energy drinks\nok = 10**9*10**5 + 1\nng = 0\nwhile abs(ok - ng) > 1:\n    mid = (ok + ng) // 2\n    # if we can buy m energy drinks with money mid, then ok = mid\n    # otherwise, ng = mid\n    total = 0\n    for i in range(n):\n        total += min(mid // a[i], b[i])\n    if total >= m:\n        ok = mid\n    else:\n        ng = mid\n\nprint(ok)\n']
2022-04-18 09:11:03.450928 size on output set 3
