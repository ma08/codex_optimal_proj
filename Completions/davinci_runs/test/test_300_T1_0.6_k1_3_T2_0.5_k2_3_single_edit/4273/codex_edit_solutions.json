["\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    names = []\n    for line in sys.stdin:\n        names.append(line.strip())\n    print(get_num_triples(names))\n\ndef get_num_triples(names):\n    names_with_m = [name for name in names if name[0] == 'M']\n    names_with_a = [name for name in names if name[0] == 'A']\n    names_with_r = [name for name in names if name[0] == 'R']\n    names_with_c = [name for name in names if name[0] == 'C']\n    names_with_h = [name for name in names if name[0] == 'H']\n    num_triples = 0\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_r)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_r) * len(names_with_c) * len(names_with_h)\n    return num_triples\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N = int(input())\n    S = [input() for i in range(N)]\n    chars = ['M', 'A', 'R', 'C', 'H'] # set\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if S[i][0] in chars and S[j][0] in chars and S[k][0] in chars:\n                    if len(set([S[i][0], S[j][0], S[k][0]])) == 3: # set\n                        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = sys.stdin.readline()\n    names = []\n    for line in sys.stdin:\n        names.append(line.strip())\n    print(get_num_triples(names))\n\ndef get_num_triples(names):\n    names_with_m = [name for name in names if name[0] == 'M']\n    names_with_a = [name for name in names if name[0] == 'A']\n    names_with_r = [name for name in names if name[0] == 'R']\n    names_with_c = [name for name in names if name[0] == 'C']\n    names_with_h = [name for name in names if name[0] == 'H']\n    num_triples = 0\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_r)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_r) * len(names_with_c) * len(names_with_h)\n    return num_triples\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport itertools\n\ndef main():\n    N = int(input())\n    names = [input() for _ in range(N)]\n    marc_names = []\n    for name in names:\n        if name[0] in [\"M\", \"A\", \"R\", \"C\", \"H\"]:\n            marc_names.append(name)\n    marc_names.sort()\n    ans = 0\n    for c in itertools.combinations(marc_names, 3):\n        if len(set(map(lambda x:x[0], c))) == 3:\n            ans += 1\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n = int(input())\n    s = [input() for i in range(n)]\n    chars = 'MARCH'\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if s[i][0] in chars and s[j][0] in chars and s[k][0] in chars:\n                    if len(set([s[i][0], s[j][0], s[k][0]])) == 3:\n                        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N = int(input())\n    S = [input() for _ in range(N)]\n    chars = ['M', 'A', 'R', 'C', 'H']\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if S[i][0] in chars and S[j][0] in chars and S[k][0] in chars:\n                    if len(set([S[i][0], S[j][0], S[k][0]])) == 3:\n                        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = sys.stdin.readline()\n    names = []\n    for line in sys.stdin:\n        names.append(line.strip())\n    print(get_num_triples(names))\n\n\n    \"\"\"\n    >>> get_num_triples(['MAR', 'MAC', 'MARIO', 'MACARONI'])\n    4\n    >>> get_num_triples(['MAR', 'MAC', 'MARIO', 'MACARONI', 'MARCELO'])\n    8\n    \"\"\"\ndef get_num_triples(names):\n    names_with_m = [name for name in names if name[0] == 'M']\n    names_with_a = [name for name in names if name[0] == 'A']\n    names_with_r = [name for name in names if name[0] == 'R']\n    names_with_c = [name for name in names if name[0] == 'C']\n    names_with_h = [name for name in names if name[0] == 'H']\n    num_triples = 0\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_r)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_a) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_m) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_m) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_c)\n    num_triples += len(names_with_a) * len(names_with_r) * len(names_with_h)\n    num_triples += len(names_with_a) * len(names_with_c) * len(names_with_h)\n    num_triples += len(names_with_r) * len(names_with_c) * len(names_with_h)\n    return num_triples\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport itertools\n\ndef main():\n    N = int(input())\n    names = [input() for _ in range(N)]\n    marc_names = []\n    for name in names:\n        if name[0] in [\"M\", \"A\", \"R\", \"C\", \"H\"]:\n            marc_names.append(name)\n    marc_names.sort()\n    ans = 0\n    for c in itertools.combinations(marc_names, 3):\n        if len(set(map(lambda x: x[0], c))) == 3:\n            ans += 1\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\nimport itertools\n\ndef main():\n    N = int(input())\n    names = [input() for _ in range(N)]\n    names_dict = {}\n    for name in names:\n        if name[0] in [\"M\", \"A\", \"R\", \"C\", \"H\"] and len(name) in [1, 2, 3, 4, 5]:\n            if name[0] not in names_dict:\n                names_dict[name[0]] = []\n            names_dict[name[0]].append(name)\n    names_dict[\"M\"].sort()\n    names_dict[\"A\"].sort()\n    names_dict[\"R\"].sort()\n    names_dict[\"C\"].sort()\n    names_dict[\"H\"].sort()\n    ans = 0\n    for c in itertools.combinations(names_dict[\"M\"], 1):\n        for d in itertools.combinations(names_dict[\"A\"], 1):\n            for e in itertools.combinations(names_dict[\"R\"], 1):\n                for f in itertools.combinations(names_dict[\"C\"], 1):\n                    for g in itertools.combinations(names_dict[\"H\"], 1):\n                        ans += 1\n    for c in itertools.combinations(names_dict[\"M\"], 2):\n        for d in itertools.combinations(names_dict[\"A\"], 1):\n            for e in itertools.combinations(names_dict[\"R\"], 1):\n                for f in itertools.combinations(names_dict[\"C\"], 1):\n                    for g in itertools.combinations(names_dict[\"H\"], 1):\n                        ans += 1\n    for c in itertools.combinations(names_dict[\"M\"], 1):\n        for d in itertools.combinations(names_dict[\"A\"], 2):\n            for e in itertools.combinations(names_dict[\"R\"], 1):\n                for f in itertools.combinations(names_dict[\"C\"], 1):\n                    for g in itertools.combinations(names_dict[\"H\"], 1):\n                        ans += 1\n    for c in itertools.combinations(names_dict[\"M\"], 1):\n        for d in itertools.combinations(names_dict[\"A\"], 1):\n            for e in itertools.combinations(names_dict[\"R\"], 2):\n                for f in itertools.combinations(names_dict[\"C\"], 1):\n                    for g in itertools.combinations(names_dict[\"H\"], 1):\n                        ans += 1\n    for c in itertools.combinations(names_dict[\"M\"], 1):\n        for d in itertools.combinations(names_dict[\"A\"], 1):\n            for e in itertools.combinations(names_dict[\"R\"], 1):\n                for f in itertools.combinations(names_dict[\"C\"], 2):\n                    for g in itertools.combinations(names_dict[\"H\"], 1):\n                        ans += 1\n    for c in itertools.combinations(names_dict[\"M\"], 1):\n        for d in itertools.combinations(names_dict[\"A\"], 1):\n            for e in itertools.combinations(names_dict[\"R\"], 1):\n                for f in itertools.combinations(names_dict[\"C\"], 1):\n                    for g in itertools.combinations(names_dict[\"H\"], 2):\n                        ans += 1\n    for c in itertools.combinations(names_dict[\"M\"], 2):\n        for d in itertools.combinations(names_dict[\"A\"], 2):\n            for e in itertools.combinations(names_dict[\"R\"], 1):\n                for f in itertools.combinations(names_dict[\"C\"], 1):\n                    for g in itertools.combinations(names_dict[\"H\"], 1):\n                        ans += 1\n    for c in itertools.combinations(names_dict[\"M\"], 2):\n        for d in itertools.combinations(names_dict[\"A\"], 1):\n            for e in itertools.combinations(names_dict[\"R\"], 2):\n                for f in itertools.combinations(names_dict[\"C\"], 1):\n                    for g in itertools.combinations(names_dict[\"H\"], 1):\n                        ans += 1\n    for c in itertools.combinations(names_dict[\"M\"], 2):\n        for d in itertools.combinations(names_dict[\"A\"], 1):\n            for e in itertools.combinations(names_dict[\"R\"], 1):\n                for f in itertools.combinations(names_dict[\"C\"], 2):\n                    for g in itertools.combinations(names_dict[\"H\"], 1):\n                        ans += 1\n    for c in itertools.combinations(names_dict[\"M\"], 2):\n        for d in itertools.combinations(names_dict[\"A\"], 1):\n            for e in itertools.combinations(names_dict[\"R\"], 1):\n                for f in itertools.combinations(names_dict[\"C\"], 1):\n                    for g in itertools.combinations(names_dict[\"H\"], 2):\n                        ans += 1\n    for c in itertools.combinations(names_dict[\"M\"], 1):\n        for d in itertools.combinations(names_dict[\"A\"], 2):\n            for e in itertools.combinations(names_dict[\"R\"], 2):\n                for f in itertools.combinations(names_dict[\"C\"], 1):\n                    for g in itertools.combinations(names_dict[\"H\"], 1):\n                        ans += 1\n    for c in itertools.combinations(names_dict[\"M\"], 1):\n        for d in itertools.combinations(names_dict[\"A\"], 2):\n            for e in itertools.combinations(names_dict[\"R\"], 1):\n                for f in itertools.combinations(names_dict[\"C\"], 2):\n                    for g in itertools.combinations(names_dict[\"H\"], 1):\n                        ans += 1\n    for c in itertools.combinations(names_dict[\"M\"], 1):\n        for d in itertools.combinations(names_dict[\"A\"], 2):\n            for e in itertools.combinations(names_dict[\"R\"], 1):\n                for f in itertools.combinations(names_dict[\"C\"], 1):\n                    for g in itertools.combinations(names_dict[\"H\"], 2):\n                        ans += 1\n    for c in itertools.combinations(names_dict[\"M\"], 1):\n        for d in itertools.combinations(names_dict[\"A\"], 1):\n            for e in itertools.combinations(names_dict[\"R\"], 2):\n                for f in itertools.combinations(names_dict[\"C\"], 2):\n                    for g in itertools.combinations(names_dict[\"H\"], 1):\n                        ans += 1\n    for c in itertools.combinations(names_dict[\"M\"], 1):\n        for d in itertools.combinations(names_dict[\"A\"], 1):\n            for e in itertools.combinations(names_dict[\"R\"], 2):\n                for f in itertools.combinations(names_dict[\"C\"], 1):\n                    for g in itertools.combinations(names_dict[\"H\"], 2):\n                        ans += 1\n    for c in itertools.combinations(names_dict[\"M\"], 1):\n        for d in itertools.combinations(names_dict[\"A\"], 1):\n            for e in itertools.combinations(names_dict[\"R\"], 1):\n                for f in itertools.combinations(names_dict[\"C\"], 2):\n                    for g in itertools.combinations(names_dict[\"\n            ans += 1\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"]