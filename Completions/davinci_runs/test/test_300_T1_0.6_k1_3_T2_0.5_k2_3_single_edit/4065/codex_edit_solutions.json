["\ndef getMaxContest(a):\n    dp = [1] * len(a)\n    for i in range(len(a)):\n        for j in range(i):\n            if a[i] <= 2 * a[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\n\ndef main():\n    a = list(map(int, input().split()))\n    print(getMaxContest(a))\n\n\nif __name__ == '__main__':\n    main()\n", "\nn = int(input())\na = list(map(int, input().split()))\n\nq = [a[0]]\nfor i in range(1, n):\n    if a[i] <= 2 * q[-1]:\n        q[-1] = a[i]\n    else:\n        q.append(a[i])\n\nprint(len(q))\n", "\n\nn = int(input())\na = list(map(int, input().split()))\n\nq = [a[0]]\nfor i in range(1, n):\n    if a[i] <= 2 * q[-1]:  # if a[i] <= 2 * q[-1]:\n        q[-1] = a[i]\n    else:\n        q.append(a[i])\n\nprint(len(q))\n", "\n\n# TODO: make solution\n\n\ndef get_max_contest(problemset):\n    main()\n\n\nif __name__ == \"__main__\":\n    pass\n", "\n\n# TODO: make solution\n\n\ndef get_max_contest(problem_set):\n    return problem_set[0]\n\n\nif __name__ == \"__main__\":\n    problem_set = []\n    print(get_max_contest(problem_set))\n", "\n\n# TODO: make solution\n\n\ndef get_max_contest(problemset):\n    pass \n\n\nif __name__ == \"__main__\":\n    pass\n", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    e = list(map(int, input().split()))\n\n    # print(a)\n    # print(b)\n    # print(c)\n    # print(d)\n    # print(e)\n\n    dp = [[[0]*n for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                dp[i][j][k] = a[i]*b[j]*c[k] + dp[i-1][j][k]\n\n    for j in range(n):\n        for k in range(n):\n            for i in range(n):\n                dp[i][j][k] = a[i]*b[j]*c[k] + dp[i][j-1][k]\n\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                dp[i][j][k] = a[i]*b[j]*c[k] + dp[i][j][k-1]\n\n    print(dp[n-1][n-1][n-1])\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef getMaxContest(a):\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] <= 2 * a[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\na = list(map(int, input().split()))\nprint(getMaxContest(a))\n"]