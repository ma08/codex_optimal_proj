2022-04-18 08:39:54.916498 num operations 1
2022-04-18 08:39:54.916519 size on input set 1
2022-04-18 08:40:06.612463 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef getMaxContest(a):\n    dp = [1] * len(a)\n    for i in range(len(a)):\n        for j in range(i):\n            if a[i] <= 2 * a[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\n\ndef main():\n    a = list(map(int, input().split()))\n    print(getMaxContest(a))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    e = list(map(int, input().split()))\n\n    # print(a)\n    # print(b)\n    # print(c)\n    # print(d)\n    # print(e)\n\n    dp = [[[0]*n for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                dp[i][j][k] = a[i]*b[j]*c[k] + dp[i-1][j][k]\n\n    for j in range(n):\n        for k in range(n):\n            for i in range(n):\n                dp[i][j][k] = a[i]*b[j]*c[k] + dp[i][j-1][k]\n\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                dp[i][j][k] = a[i]*b[j]*c[k] + dp[i][j][k-1]\n\n    print(dp[n-1][n-1][n-1])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef getMaxContest(a):\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] <= 2 * a[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\na = list(map(int, input().split()))\nprint(getMaxContest(a))\n"
    }
  ],
  "created": 1650271195,
  "object": "edit"
}
2022-04-18 08:40:06.612678 fix syntax errors 3 ["\ndef getMaxContest(a):\n    dp = [1] * len(a)\n    for i in range(len(a)):\n        for j in range(i):\n            if a[i] <= 2 * a[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\n\ndef main():\n    a = list(map(int, input().split()))\n    print(getMaxContest(a))\n\n\nif __name__ == '__main__':\n    main()\n", '\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    e = list(map(int, input().split()))\n\n    # print(a)\n    # print(b)\n    # print(c)\n    # print(d)\n    # print(e)\n\n    dp = [[[0]*n for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                dp[i][j][k] = a[i]*b[j]*c[k] + dp[i-1][j][k]\n\n    for j in range(n):\n        for k in range(n):\n            for i in range(n):\n                dp[i][j][k] = a[i]*b[j]*c[k] + dp[i][j-1][k]\n\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                dp[i][j][k] = a[i]*b[j]*c[k] + dp[i][j][k-1]\n\n    print(dp[n-1][n-1][n-1])\n\nif __name__ == "__main__":\n    main()\n', '\ndef getMaxContest(a):\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] <= 2 * a[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\na = list(map(int, input().split()))\nprint(getMaxContest(a))\n']
2022-04-18 08:40:06.612712 size on output set 3
2022-04-18 08:40:06.612722 num operations 1
2022-04-18 08:40:06.612728 size on input set 1
2022-04-18 08:40:09.258115 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\nq = [a[0]]\nfor i in range(1, n):\n    if a[i] <= 2 * q[-1]:\n        q[-1] = a[i]\n    else:\n        q.append(a[i])\n\nprint(len(q))\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\nq = [a[0]]\nfor i in range(1, n):\n    if a[i] <= 2 * q[-1]:\n        q[-1] = a[i]\n    else:\n        q.append(a[i])\n\nprint(len(q))\n"
    },
    {
      "index": 2,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\nq = [a[0]]\nfor i in range(1, n):\n    if a[i] <= 2 * q[-1]:  # if a[i] <= 2 * q[-1]:\n        q[-1] = a[i]\n    else:\n        q.append(a[i])\n\nprint(len(q))\n"
    }
  ],
  "created": 1650271206,
  "object": "edit"
}
2022-04-18 08:40:09.258274 fix syntax errors 3 ['\nn = int(input())\na = list(map(int, input().split()))\n\nq = [a[0]]\nfor i in range(1, n):\n    if a[i] <= 2 * q[-1]:\n        q[-1] = a[i]\n    else:\n        q.append(a[i])\n\nprint(len(q))\n', '\nn = int(input())\na = list(map(int, input().split()))\n\nq = [a[0]]\nfor i in range(1, n):\n    if a[i] <= 2 * q[-1]:\n        q[-1] = a[i]\n    else:\n        q.append(a[i])\n\nprint(len(q))\n', '\n\nn = int(input())\na = list(map(int, input().split()))\n\nq = [a[0]]\nfor i in range(1, n):\n    if a[i] <= 2 * q[-1]:  # if a[i] <= 2 * q[-1]:\n        q[-1] = a[i]\n    else:\n        q.append(a[i])\n\nprint(len(q))\n']
2022-04-18 08:40:09.258301 size on output set 2
2022-04-18 08:40:09.258311 num operations 1
2022-04-18 08:40:09.258317 size on input set 1
2022-04-18 08:40:12.350115 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# TODO: make solution\n\n\ndef get_max_contest(problemset):\n    pass \n\n\nif __name__ == \"__main__\":\n    pass\n"
    },
    {
      "index": 1,
      "text": "\n\n# TODO: make solution\n\n\ndef get_max_contest(problemset):\n    main()\n\n\nif __name__ == \"__main__\":\n    pass\n"
    },
    {
      "index": 2,
      "text": "\n\n# TODO: make solution\n\n\ndef get_max_contest(problem_set):\n    return problem_set[0]\n\n\nif __name__ == \"__main__\":\n    problem_set = []\n    print(get_max_contest(problem_set))\n"
    }
  ],
  "created": 1650271209,
  "object": "edit"
}
2022-04-18 08:40:12.350313 fix syntax errors 3 ['\n\n# TODO: make solution\n\n\ndef get_max_contest(problemset):\n    pass \n\n\nif __name__ == "__main__":\n    pass\n', '\n\n# TODO: make solution\n\n\ndef get_max_contest(problemset):\n    main()\n\n\nif __name__ == "__main__":\n    pass\n', '\n\n# TODO: make solution\n\n\ndef get_max_contest(problem_set):\n    return problem_set[0]\n\n\nif __name__ == "__main__":\n    problem_set = []\n    print(get_max_contest(problem_set))\n']
2022-04-18 08:40:12.350336 size on output set 3
