["const fs = require('fs');\n\nconst readFileAsArray = function(file, cb = () => {}) {\n    return new Promise((resolve, reject) => {\n        fs.readFile(file, function(err, data) {\n            if (err) {\n                reject(err);\n                return cb(err);\n            }\n\n            const lines = data.toString().trim().split('\\n');\n            resolve(lines);\n            cb(null, lines);\n        });\n    });\n};\n\n// example call\nreadFileAsArray('./numbers')\n    .then(lines => {\n        const numbers = lines.map(Number);\n        const oddNumbers = numbers.filter(number => number % 2 === 1);\n        console.log('odd numbers count:', oddNumbers.length);\n    })\n    .catch(console.error);\n", "\n\ndef main():\n    wall_len = int(input())\n    wall_cond.sort()\n    wall_cond = list(map(int, input().split()))\n    max_h = max(wall_cond)\n    min_h = min(wall_cond)\n    if max_h - min_h > 1 or wall_cond[0] == 0 and wall_cond[-1] == 2:\n    elif wall_cond[0] == 0 and wall_cond[-1] == 1:\n        if wall_len % 2 == 0:\n            print('YES')\n        else:\n            print('NO')\n        print('NO')\n    else:\n        print('YES')\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    wall_len = int(input())\n    wall_cond = [int(i) for i in input().split()]\n    max_h = max(wall_cond)  # \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0432\u044b\u0441\u043e\u0442\u0443 \u0441\u0442\u0435\u043d\u044b\n    min_h = min(wall_cond)  # \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0432\u044b\u0441\u043e\u0442\u0443 \u0441\u0442\u0435\u043d\u044b\n    if max_h - min_h > 1:\n        print('NO')\n    else:\n        print('YES')\n\n\nif __name__ == \"__main__\":\n    main()\n", "var fs = require('fs');\n\nfs.stat('file.js', function (err, stats) {\n    if (err) {\n        console.log(err);\n        return;\n    }\n\n    console.log('stats: ' + JSON.stringify(stats, null, '  '));\n\n    // Check file type\n    console.log('isFile: ' + stats.isFile());\n    console.log('isDirectory: ' + stats.isDirectory());\n    if (stats.isFile()) {\n        // Check file size\n        console.log('size: ' + stats.size);\n        console.log('birth time: ' + stats.birthtime);\n        console.log('modified time: ' + stats.mtime);\n    }\n});\n", "\n\ndef solver(n, a):\n    height = a[0]\n    for i in range(1, n):\n        if a[i] < height:\n            return \"NO\"\n        height = max(height, a[i])\n    return \"YES\"\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solver(n, a))\n", "\ndef solver(n, a):\n    height = a[0]\n    for i in range(1, n):\n        if a[i] > height:\n            return \"NO\"\n        height = max(height, a[i])\n    return \"YES\"\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solver(n, a))\n", "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint main(){\n\n  FILE *infile, *outfile;\n  char *input_file, *output_file;\n\n  input_file = \"input.txt\";\n  output_file = \"output.txt\";\n\n  infile = fopen(input_file, \"r\");\n  outfile = fopen(output_file, \"w\");\n\n  char line[1024];\n  char *token;\n  int i, j, k;\n  int sum;\n\n  while (fgets(line, 1024, infile) != NULL){\n    i = 0;\n    j = 0;\n    k = 0;\n    sum = 0;\n\n    token = strtok(line, \" \");\n    i = atoi(token);\n\n    token = strtok(NULL, \" \");\n    j = atoi(token);\n\n    token = strtok(NULL, \" \");\n    k = atoi(token);\n\n    sum = i + j + k;\n    fprintf(outfile, \"%d\\n\", sum);\n  }\n\n  fclose(infile);\n  fclose(outfile);\n\n  return 0;\n}\n", "\n\n    a = list(map(int, a.split()))\ndef solver(n, a):\n    height = a[0]\n    for i in range(1, n):\n        if a[i] > height:\n            return \"NO\"\n        height = max(height, a[i])\n    return \"YES\"\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solver(n, a))\n", "\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n"]