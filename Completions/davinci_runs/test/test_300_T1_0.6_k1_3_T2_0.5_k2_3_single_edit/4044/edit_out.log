2022-04-18 08:32:24.278226 num operations 1
2022-04-18 08:32:24.278241 size on input set 1
2022-04-18 08:32:28.937933 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\na, b, x = map(int, raw_input().split())\n\nif (a - x) >= b:\n    print \"0\" * x + \"1\" * b\nelif (b - x) >= a:\n    print \"1\" * x + \"0\" * a\nelse:\n    zeros = a - (x - b)\n    print \"1\" * (x - zeros) + \"0\" * zeros + \"1\" * b\n"
    },
    {
      "index": 1,
      "text": "\na, b, x = map(int, raw_input().split())\n\nif (a - x) >= b:\n    print \"0\" * x + \"1\" * b\nelif (b - x) >= a:\n    print \"1\" * x + \"0\" * a\nelse:\n    zeros = a - (x - b)\n    print \"1\" * (x - zeros) + \"0\" * zeros + \"1\" * b\n"
    },
    {
      "index": 2,
      "text": "\n\n# from sys import stdin, stdout\n\na, b, x = map(int, raw_input().split())\n\nif (a - x) >= b:\n    print(\"0\" * x + \"1\" * b)\nelif (b - x) >= a:\n    print(\"1\" * x + \"0\" * a)\nelse:\n    zeros = a - (x - b)\n    print(\"1\" * (x - zeros) + \"0\" * zeros + \"1\" * b)\n"
    }
  ],
  "created": 1650270744,
  "object": "edit"
}
2022-04-18 08:32:28.938137 fix syntax errors 3 ['\na, b, x = map(int, raw_input().split())\n\nif (a - x) >= b:\n    print "0" * x + "1" * b\nelif (b - x) >= a:\n    print "1" * x + "0" * a\nelse:\n    zeros = a - (x - b)\n    print "1" * (x - zeros) + "0" * zeros + "1" * b\n', '\na, b, x = map(int, raw_input().split())\n\nif (a - x) >= b:\n    print "0" * x + "1" * b\nelif (b - x) >= a:\n    print "1" * x + "0" * a\nelse:\n    zeros = a - (x - b)\n    print "1" * (x - zeros) + "0" * zeros + "1" * b\n', '\n\n# from sys import stdin, stdout\n\na, b, x = map(int, raw_input().split())\n\nif (a - x) >= b:\n    print("0" * x + "1" * b)\nelif (b - x) >= a:\n    print("1" * x + "0" * a)\nelse:\n    zeros = a - (x - b)\n    print("1" * (x - zeros) + "0" * zeros + "1" * b)\n']
2022-04-18 08:32:28.938188 size on output set 2
2022-04-18 08:32:28.938199 num operations 1
2022-04-18 08:32:28.938205 size on input set 1
2022-04-18 08:32:32.012904 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#Solution\n\n#!/usr/bin/env python\n\nif __name__ == '__main__':\n    a, b, x = map(int, raw_input().split())\n    n = a + b\n    s = ''\n    for i in range(n):\n        if (i < x):\n            s += '0'\n        else:\n            s += '1'\n    print s\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python\n\n#Solution\n\n#!/usr/bin/env python\n\nif __name__ == '__main__':\n    a, b, x = map(int, raw_input().split())\n    n = a + b\n    s = ''\n    for i in range(n):\n        if (i < x):\n            s += '0'\n        else:\n            s += '1'\n    print s\n"
    },
    {
      "index": 2,
      "text": "\n\n# Solution\n\n#!/usr/bin/env python\n\nif __name__ == '__main__':\n    a, b, x = map(int, input().split())\n    n = a + b\n    s = ''\n    for i in range(n):\n        if (i < x):\n            s += '0'\n        else:\n            s += '1'\n    print(s)\n"
    }
  ],
  "created": 1650270748,
  "object": "edit"
}
2022-04-18 08:32:32.013144 fix syntax errors 3 ["\n#Solution\n\n#!/usr/bin/env python\n\nif __name__ == '__main__':\n    a, b, x = map(int, raw_input().split())\n    n = a + b\n    s = ''\n    for i in range(n):\n        if (i < x):\n            s += '0'\n        else:\n            s += '1'\n    print s\n", "#!/usr/bin/env python\n\n#Solution\n\n#!/usr/bin/env python\n\nif __name__ == '__main__':\n    a, b, x = map(int, raw_input().split())\n    n = a + b\n    s = ''\n    for i in range(n):\n        if (i < x):\n            s += '0'\n        else:\n            s += '1'\n    print s\n", "\n\n# Solution\n\n#!/usr/bin/env python\n\nif __name__ == '__main__':\n    a, b, x = map(int, input().split())\n    n = a + b\n    s = ''\n    for i in range(n):\n        if (i < x):\n            s += '0'\n        else:\n            s += '1'\n    print(s)\n"]
2022-04-18 08:32:32.013171 size on output set 3
2022-04-18 08:32:32.013182 num operations 1
2022-04-18 08:32:32.013188 size on input set 1
2022-04-18 08:32:50.645027 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef solve(a, b, x):\n    # Use A[i] to represent the number of 0s required in the first i bits\n    # Use B[i] to represent the number of 1s required in the first i bits\n    # Use C[i] to represent the number of transitions required in the first i bits\n    # Initially, A[0] = a, B[0] = b, C[0] = 0\n    # At each step, we have 2 options:\n    # 1) Add 0 to the string: A[i] = A[i-1] - 1, B[i] = B[i-1], C[i] = C[i-1] + 1\n    # 2) Add 1 to the string: A[i] = A[i-1], B[i] = B[i-1] - 1, C[i] = C[i-1] + 1\n    # When adding 0 to the string, if A[i-1] == 0, then there is no more 0s left to add, we have to add 1\n    # When adding 1 to the string, if B[i-1] == 0, then there is no more 1s left to add, we have to add 0\n    # At each step, we choose the option that will give us C[i] == x\n    # If C[i] > x, then we need to add 0 to the string\n    # If C[i] < x, then we need to add 1 to the string\n    # If C[i] == x, then we have 2 options, we can add 0 or 1, but if A[i-1] == 0, then we have to add 1\n    # If B[i-1] == 0, then we have to add 0\n    A = [a]\n    B = [b]\n    C = [0]\n    for _ in range(a + b - 1):\n        if C[-1] > x:\n            A.append(A[-1] - 1)\n            B.append(B[-1])\n            C.append(C[-1] + 1)\n        elif C[-1] < x:\n            A.append(A[-1])\n            B.append(B[-1] - 1)\n            C.append(C[-1] + 1)\n        else:\n            if A[-1] == 0:\n                A.append(A[-1])\n                B.append(B[-1] - 1)\n                C.append(C[-1] + 1)\n            elif B[-1] == 0:\n                A.append(A[-1] - 1)\n                B.append(B[-1])\n                C.append(C[-1] + 1)\n            else:\n                A.append(A[-1] - 1)\n                B.append(B[-1])\n                C.append(C[-1] + 1)\n    ans = []\n    for i in range(a + b - 1):\n        if A[i] > 0:\n            ans.append('0')\n        else:\n            ans.append('1')\n    if ans[0] == '0':\n        ans.append('1')\n    else:\n        ans.append('0')\n    return \"\".join(ans)\n\na, b, x = map(int, input().split())\nprint(solve(a, b, x))\n"
    },
    {
      "index": 1,
      "text": "\n\n# Use A[i] to represent the number of 0s required in the first i bits\n# Use B[i] to represent the number of 1s required in the first i bits\n# Use C[i] to represent the number of transitions required in the first i bits\n# Initially, A[0] = a, B[0] = b, C[0] = 0\n# At each step, we have 2 options:\n# 1) Add 0 to the string: A[i] = A[i-1] - 1, B[i] = B[i-1], C[i] = C[i-1] + 1\n# 2) Add 1 to the string: A[i] = A[i-1], B[i] = B[i-1] - 1, C[i] = C[i-1] + 1\n# When adding 0 to the string, if A[i-1] == 0, then there is no more 0s left to add, we have to add 1,\n# and we have to increase C[i] by 2 instead of 1\n# When adding 1 to the string, if B[i-1] == 0, then there is no more 1s left to add, we have to add 0,\n# and we have to increase C[i] by 2 instead of 1\n# At each step, we choose the option that will give us C[i] == x\n# If C[i] > x, then we need to add 0 to the string, and we have to increase C[i] by 1\n# If C[i] < x, then we need to add 1 to the string, and we have to increase C[i] by 1\n# If C[i] == x, then we have 2 options, we can add 0 or 1, but if A[i-1] == 0, then we have to add 1,\n# and we have to increase C[i] by 2 instead of 1\n# If B[i-1] == 0, then we have to add 0, and we have to increase C[i] by 2 instead of 1\n\ndef solve(a, b, x):\n    A = [a]\n    B = [b]\n    C = [0]\n    for _ in range(a + b - 1):\n        if C[-1] > x:\n            A.append(A[-1] - 1)\n            B.append(B[-1])\n            C.append(C[-1] + 1)\n        elif C[-1] < x:\n            A.append(A[-1])\n            B.append(B[-1] - 1)\n            C.append(C[-1] + 1)\n        else:\n            if A[-1] == 0:\n                A.append(A[-1])\n                B.append(B[-1] - 1)\n                C.append(C[-1] + 2)\n            elif B[-1] == 0:\n                A.append(A[-1] - 1)\n                B.append(B[-1])\n                C.append(C[-1] + 2)\n            else:\n                A.append(A[-1] - 1)\n                B.append(B[-1])\n                C.append(C[-1] + 1)\n    ans = []\n    for i in range(a + b - 1):\n        if A[i] > 0:\n            ans.append('0')\n        else:\n            ans.append('1')\n    if ans[0] == '0':\n        ans.append('1')\n    else:\n        ans.append('0')\n    return \"\".join(ans)\n\na, b, x = map(int, input().split())\nprint(solve(a, b, x))\n"
    },
    {
      "index": 2,
      "text": "\n\n# Use A[i] to represent the number of 0s required in the first i bits.\n# Use B[i] to represent the number of 1s required in the first i bits.\n# Use C[i] to represent the number of transitions required in the first i bits.\n# Initially, A[0] = a, B[0] = b, C[0] = 0.\n# At each step, we have 2 options:.\n# 1) Add 0 to the string: A[i] = A[i-1] - 1, B[i] = B[i-1], C[i] = C[i-1] + 1.\n# 2) Add 1 to the string: A[i] = A[i-1], B[i] = B[i-1] - 1, C[i] = C[i-1] + 1.\n# When adding 0 to the string, if A[i-1] == 0, then there is no more 0s left to add, we have to add 1.\n# When adding 1 to the string, if B[i-1] == 0, then there is no more 1s left to add, we have to add 0.\n# At each step, we choose the option that will give us C[i] == x.\n# If C[i] > x, then we need to add 0 to the string.\n# If C[i] < x, then we need to add 1 to the string.\n# If C[i] == x, then we have 2 options, we can add 0 or 1, but if A[i-1] == 0, then we have to add 1.\n# If B[i-1] == 0, then we have to add 0.\n\ndef solve(a, b, x):\n    A = [a]\n    B = [b]\n    C = [0]\n    for _ in range(a + b - 1):\n        if C[-1] > x:\n            A.append(A[-1] - 1)\n            B.append(B[-1])\n            C.append(C[-1] + 1)\n        elif C[-1] < x:\n            A.append(A[-1])\n            B.append(B[-1] - 1)\n            C.append(C[-1] + 1)\n        else:\n            if A[-1] == 0:\n                A.append(A[-1])\n                B.append(B[-1] - 1)\n                C.append(C[-1] + 1)\n            elif B[-1] == 0:\n                A.append(A[-1] - 1)\n                B.append(B[-1])\n                C.append(C[-1] + 1)\n            else:\n                A.append(A[-1] - 1)\n                B.append(B[-1])\n                C.append(C[-1] + 1)\n    ans = []\n    for i in range(a + b - 1):\n        if A[i] > 0:\n            ans.append('0')\n        else:\n            ans.append('1')\n    if ans[0] == '0':\n        ans.append('1')\n    else:\n        ans.append('0')\n    return \"\".join(ans)\n\na, b, x = map(int, input().split())\nprint(solve(a, b, x))\n"
    }
  ],
  "created": 1650270752,
  "object": "edit"
}
2022-04-18 08:32:50.645290 fix syntax errors 3 ['\n\ndef solve(a, b, x):\n    # Use A[i] to represent the number of 0s required in the first i bits\n    # Use B[i] to represent the number of 1s required in the first i bits\n    # Use C[i] to represent the number of transitions required in the first i bits\n    # Initially, A[0] = a, B[0] = b, C[0] = 0\n    # At each step, we have 2 options:\n    # 1) Add 0 to the string: A[i] = A[i-1] - 1, B[i] = B[i-1], C[i] = C[i-1] + 1\n    # 2) Add 1 to the string: A[i] = A[i-1], B[i] = B[i-1] - 1, C[i] = C[i-1] + 1\n    # When adding 0 to the string, if A[i-1] == 0, then there is no more 0s left to add, we have to add 1\n    # When adding 1 to the string, if B[i-1] == 0, then there is no more 1s left to add, we have to add 0\n    # At each step, we choose the option that will give us C[i] == x\n    # If C[i] > x, then we need to add 0 to the string\n    # If C[i] < x, then we need to add 1 to the string\n    # If C[i] == x, then we have 2 options, we can add 0 or 1, but if A[i-1] == 0, then we have to add 1\n    # If B[i-1] == 0, then we have to add 0\n    A = [a]\n    B = [b]\n    C = [0]\n    for _ in range(a + b - 1):\n        if C[-1] > x:\n            A.append(A[-1] - 1)\n            B.append(B[-1])\n            C.append(C[-1] + 1)\n        elif C[-1] < x:\n            A.append(A[-1])\n            B.append(B[-1] - 1)\n            C.append(C[-1] + 1)\n        else:\n            if A[-1] == 0:\n                A.append(A[-1])\n                B.append(B[-1] - 1)\n                C.append(C[-1] + 1)\n            elif B[-1] == 0:\n                A.append(A[-1] - 1)\n                B.append(B[-1])\n                C.append(C[-1] + 1)\n            else:\n                A.append(A[-1] - 1)\n                B.append(B[-1])\n                C.append(C[-1] + 1)\n    ans = []\n    for i in range(a + b - 1):\n        if A[i] > 0:\n            ans.append(\'0\')\n        else:\n            ans.append(\'1\')\n    if ans[0] == \'0\':\n        ans.append(\'1\')\n    else:\n        ans.append(\'0\')\n    return "".join(ans)\n\na, b, x = map(int, input().split())\nprint(solve(a, b, x))\n', '\n\n# Use A[i] to represent the number of 0s required in the first i bits\n# Use B[i] to represent the number of 1s required in the first i bits\n# Use C[i] to represent the number of transitions required in the first i bits\n# Initially, A[0] = a, B[0] = b, C[0] = 0\n# At each step, we have 2 options:\n# 1) Add 0 to the string: A[i] = A[i-1] - 1, B[i] = B[i-1], C[i] = C[i-1] + 1\n# 2) Add 1 to the string: A[i] = A[i-1], B[i] = B[i-1] - 1, C[i] = C[i-1] + 1\n# When adding 0 to the string, if A[i-1] == 0, then there is no more 0s left to add, we have to add 1,\n# and we have to increase C[i] by 2 instead of 1\n# When adding 1 to the string, if B[i-1] == 0, then there is no more 1s left to add, we have to add 0,\n# and we have to increase C[i] by 2 instead of 1\n# At each step, we choose the option that will give us C[i] == x\n# If C[i] > x, then we need to add 0 to the string, and we have to increase C[i] by 1\n# If C[i] < x, then we need to add 1 to the string, and we have to increase C[i] by 1\n# If C[i] == x, then we have 2 options, we can add 0 or 1, but if A[i-1] == 0, then we have to add 1,\n# and we have to increase C[i] by 2 instead of 1\n# If B[i-1] == 0, then we have to add 0, and we have to increase C[i] by 2 instead of 1\n\ndef solve(a, b, x):\n    A = [a]\n    B = [b]\n    C = [0]\n    for _ in range(a + b - 1):\n        if C[-1] > x:\n            A.append(A[-1] - 1)\n            B.append(B[-1])\n            C.append(C[-1] + 1)\n        elif C[-1] < x:\n            A.append(A[-1])\n            B.append(B[-1] - 1)\n            C.append(C[-1] + 1)\n        else:\n            if A[-1] == 0:\n                A.append(A[-1])\n                B.append(B[-1] - 1)\n                C.append(C[-1] + 2)\n            elif B[-1] == 0:\n                A.append(A[-1] - 1)\n                B.append(B[-1])\n                C.append(C[-1] + 2)\n            else:\n                A.append(A[-1] - 1)\n                B.append(B[-1])\n                C.append(C[-1] + 1)\n    ans = []\n    for i in range(a + b - 1):\n        if A[i] > 0:\n            ans.append(\'0\')\n        else:\n            ans.append(\'1\')\n    if ans[0] == \'0\':\n        ans.append(\'1\')\n    else:\n        ans.append(\'0\')\n    return "".join(ans)\n\na, b, x = map(int, input().split())\nprint(solve(a, b, x))\n', '\n\n# Use A[i] to represent the number of 0s required in the first i bits.\n# Use B[i] to represent the number of 1s required in the first i bits.\n# Use C[i] to represent the number of transitions required in the first i bits.\n# Initially, A[0] = a, B[0] = b, C[0] = 0.\n# At each step, we have 2 options:.\n# 1) Add 0 to the string: A[i] = A[i-1] - 1, B[i] = B[i-1], C[i] = C[i-1] + 1.\n# 2) Add 1 to the string: A[i] = A[i-1], B[i] = B[i-1] - 1, C[i] = C[i-1] + 1.\n# When adding 0 to the string, if A[i-1] == 0, then there is no more 0s left to add, we have to add 1.\n# When adding 1 to the string, if B[i-1] == 0, then there is no more 1s left to add, we have to add 0.\n# At each step, we choose the option that will give us C[i] == x.\n# If C[i] > x, then we need to add 0 to the string.\n# If C[i] < x, then we need to add 1 to the string.\n# If C[i] == x, then we have 2 options, we can add 0 or 1, but if A[i-1] == 0, then we have to add 1.\n# If B[i-1] == 0, then we have to add 0.\n\ndef solve(a, b, x):\n    A = [a]\n    B = [b]\n    C = [0]\n    for _ in range(a + b - 1):\n        if C[-1] > x:\n            A.append(A[-1] - 1)\n            B.append(B[-1])\n            C.append(C[-1] + 1)\n        elif C[-1] < x:\n            A.append(A[-1])\n            B.append(B[-1] - 1)\n            C.append(C[-1] + 1)\n        else:\n            if A[-1] == 0:\n                A.append(A[-1])\n                B.append(B[-1] - 1)\n                C.append(C[-1] + 1)\n            elif B[-1] == 0:\n                A.append(A[-1] - 1)\n                B.append(B[-1])\n                C.append(C[-1] + 1)\n            else:\n                A.append(A[-1] - 1)\n                B.append(B[-1])\n                C.append(C[-1] + 1)\n    ans = []\n    for i in range(a + b - 1):\n        if A[i] > 0:\n            ans.append(\'0\')\n        else:\n            ans.append(\'1\')\n    if ans[0] == \'0\':\n        ans.append(\'1\')\n    else:\n        ans.append(\'0\')\n    return "".join(ans)\n\na, b, x = map(int, input().split())\nprint(solve(a, b, x))\n']
2022-04-18 08:32:50.645360 size on output set 3
