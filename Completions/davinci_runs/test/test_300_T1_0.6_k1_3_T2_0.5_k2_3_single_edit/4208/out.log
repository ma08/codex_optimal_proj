2022-04-18 03:24:33.394401 """
There are $n$ left boots and $n$ right boots. Each boot has a color which is denoted as a lowercase Latin letter or a question mark ('?'). Thus, you are given two strings $l$ and $r$, both of length $n$. The character $l_i$ stands for the color of the $i$-th left boot and the character $r_i$ stands for the color of the $i$-th right boot.

A lowercase Latin letter denotes a specific color, but the question mark ('?') denotes an indefinite color. Two specific colors are compatible if they are exactly the same. An indefinite color is compatible with any (specific or indefinite) color.

For example, the following pairs of colors are compatible: ('f', 'f'), ('?', 'z'), ('a', '?') and ('?', '?'). The following pairs of colors are not compatible: ('f', 'g') and ('a', 'z').

Compute the maximum number of pairs of boots such that there is one left and one right boot in a pair and their colors are compatible.

Print the maximum number of such pairs and the pairs themselves. A boot can be part of at most one pair.


-----Input-----

The first line contains $n$ ($1 \le n \le 150000$), denoting the number of boots for each leg (i.e. the number of left boots and the number of right boots).

The second line contains the string $l$ of length $n$. It contains only lowercase Latin letters or question marks. The $i$-th character stands for the color of the $i$-th left boot.

The third line contains the string $r$ of length $n$. It contains only lowercase Latin letters or question marks. The $i$-th character stands for the color of the $i$-th right boot.


-----Output-----

Print $k$ â€” the maximum number of compatible left-right pairs of boots, i.e. pairs consisting of one left and one right boot which have compatible colors.

The following $k$ lines should contain pairs $a_j, b_j$ ($1 \le a_j, b_j \le n$). The $j$-th of these lines should contain the index $a_j$ of the left boot in the $j$-th pair and index $b_j$ of the right boot in the $j$-th pair. All the numbers $a_j$ should be distinct (unique), all the numbers $b_j$ should be distinct (unique).

If there are many optimal answers, print any of them.


-----Examples-----
Input
10
codeforces
dodivthree

Output
5
7 8
4 9
2 2
9 10
3 1

Input
7
abaca?b
zabbbcc

Output
5
6 5
2 3
4 6
7 4
1 2

Input
9
bambarbia
hellocode

Output
0

Input
10
code??????
??????test

Output
10
6 2
1 6
7 3
3 5
4 8
9 7
5 1
2 4
10 9
8 10
"""
2022-04-18 03:24:33.394425 --------------------------
2022-04-18 03:26:12.643846 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n# n = int(input())\n# l = input()\n# r = input()\n#\n# pairs = []\n#\n# for i in range(n):\n#     if l[i] != '?' and r[i] != '?':\n#         if l[i] == r[i]:\n#             pairs.append((i+1, i+1))\n#             l[i] = '?'\n#             r[i] = '?'\n#     elif l[i] != '?':\n#         for j in range(n):\n#             if r[j] == l[i]:\n#                 pairs.append((i+1, j+1))\n#                 l[i] = '?'\n#                 r[j] = '?'\n#                 break\n#     elif r[i] != '?':\n#         for j in range(n):\n#             if l[j] == r[i]:\n#                 pairs.append((j+1, i+1))\n#                 l[j] = '?'\n#                 r[i] = '?'\n#                 break\n#\n# print(len(pairs))\n# for p in pairs:\n#     print(p[0], p[1])\n\n# def check(x, y):\n#     if x == '?' or y == '?':\n#         return True\n#     elif x == y:\n#         return True\n#     else:\n#         return False\n#\n# n = int(input())\n# l = input()\n# r = input()\n#\n# pairs = []\n#\n# for i in range(n):\n#     for j in range(n):\n#         if check(l[i], r[j]):\n#             pairs.append((i+1, j+1))\n#             l[i] = '?'\n#             r[j] = '?'\n#             break\n#\n# print(len(pairs))\n# for p in pairs:\n#     print(p[0], p[1])\n\nimport sys\n\nn = int(input())\nl = input()\nr = input()\n\npairs = []\n\nfor i in range(n):\n    for j in range(n):\n        if l[i] != '?' and r[j] != '?':\n            if l[i] == r[j]:\n                pairs.append((i+1, j+1))\n                l[i] = '?'\n                r[j] = '?'\n                break\n        elif l[i] == '?':\n            pairs.append((i+1, j+1))\n            l[i] = '?'\n            r[j] = '?'\n            break\n        elif r[j] == '?':\n            pairs.append((i+1, j+1))\n            l[i] = '?'\n            r[j] = '?'\n            break\n\nprint(len(pairs))\nfor p in pairs:\n    print(p[0], p[1])"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\nimport math\n\nclass Node:\n    def __init__(self, data, parent, left=None, right=None, level=0):\n        self.data = data\n        self.parent = parent\n        self.left = left\n        self.right = right\n        self.level = level\n        self.type = None\n        self.start = None\n        self.end = None\n        self.inorder = None\n        self.postorder = None\n        self.preorder = None\n        self.subtree_size = None\n\n    def __repr__(self):\n        return \"{}\".format(self.data)\n\n\nclass Graph:\n    def __init__(self, n, edges):\n        self.n = n\n        self.edges = edges\n        self.nodes = {}\n        self.root = None\n        self.start = None\n        self.end = None\n        self.inorder_index = 0\n        self.postorder_index = 0\n        self.preorder_index = 0\n        self.subtree_size = 0\n\n    def construct_tree(self, root_id=1):\n        for i in range(1, self.n + 1):\n            self.nodes[i] = Node(i, None, None, None, None)\n\n        for edge in self.edges:\n            parent, child = edge\n            parent_node = self.nodes[parent]\n            child_node = self.nodes[child]\n            child_node.parent = parent_node\n            if parent_node.left is None:\n                parent_node.left = child_node\n            else:\n                parent_node.right = child_node\n\n        self.root = self.nodes[root_id]\n\n    def set_level(self, node):\n        if node.left is None and node.right is None:\n            node.level = 0\n        else:\n            if node.left is not None:\n                node.level = node.left.level + 1\n            if node.right is not None:\n                node.level = max(node.level, node.right.level + 1)\n\n    def set_type(self, node):\n        if node.left is not None and node.right is not None:\n            node.type = \"internal\"\n        elif node.left is None and node.right is None:\n            node.type = \"leaf\"\n        else:\n            node.type = \"external\"\n\n    def set_start_end(self, node):\n        node.start = self.start\n        self.start += 1\n        if node.left is not None:\n            self.set_start_end(node.left)\n        node.end = self.start\n        if node.right is not None:\n            self.set_start_end(node.right)\n\n    def set_subtree_size(self, node):\n        node.subtree_size = 1\n        if node.left is not None:\n            node.subtree_size += self.set_subtree_size(node.left)\n        if node.right is not None:\n            node.subtree_size += self.set_subtree_size(node.right)\n        return node.subtree_size\n\n    def set_inorder(self, node):\n        if node.left is not None:\n            self.set_inorder(node.left)\n        node.inorder = self.inorder_index\n        self.inorder_index += 1\n        if node.right is not None:\n            self.set_inorder(node.right)\n\n    def set_postorder(self, node):\n        if node.left is not None:\n            self.set_postorder(node.left)\n        if node.right is not None:\n            self.set_postorder(node.right)\n        node.postorder = self.postorder_index\n        self.postorder_index += 1\n\n    def set_preorder(self, node):\n        node.preorder = self.preorder_index\n        self.preorder_index += 1\n        if node.left is not None:\n            self.set_preorder(node.left)\n        if node.right is not None:\n            self.set_preorder(node.right)\n\n    def setup(self):\n        self.start = 1\n        self.end = 1\n        self.inorder_index = 1\n        self.postorder_index = 1\n        self.preorder_index = 1\n        self.subtree_size = 0\n\n        queue = []\n        queue.append(self.root)\n        while len(queue) != 0:\n            node = queue.pop(0)\n            self.set_level(node)\n            self.set_type(node)\n            if node.left is not None:\n                queue.append(node.left)\n            if node.right is not None:\n                queue.append(node.right)\n\n        self.set_start_end(self.root)\n        self.set_subtree_size(self.root)\n        self.set_inorder(self.root)\n        self.set_postorder(self.root)\n        self.set_preorder(self.root)\n\n    def __repr__(self):\n        graph_string = \"\"\n        for i in range(1, self.n + 1):\n            node = self.nodes[i]\n            graph_string += \"{} {} {} {} {} {} {} {}\\n\".format(\n                node.data, node.parent.data if node.parent is not None else None, node.left.data if node.left is not None else None,\n                node.right.data if node.right is not None else None, node.level, node.type, node.start, node.end)\n        return graph_string\n\n\nclass SegmentTree:\n    def __init__(self, n):\n        self.n = n\n        self.segment = [0] * (4 * n)\n        self.lazy = [0] * (4 * n)\n\n    def build(self, node, start, end):\n        if start == end:\n            self.segment[node] = 0\n        else:\n            mid = (start + end) // 2\n            self.build(2 * node, start, mid)\n            self.build(2 * node + 1, mid + 1, end)\n            self.segment[node] = self.segment[2 * node] + self.segment[2 * node + 1]\n\n    def update(self, node, start, end, l, r):\n        if self.lazy[node] != 0:\n            self.segment[node] = (end - start + 1) - self.segment[node]\n            if start != end:\n                self.lazy[2 * node] ^= 1\n                self.lazy[2 * node + 1] ^= 1\n            self.lazy[node] = 0\n\n        if r < start or end < l:\n            return\n        if l <= start and end <= r:\n            self.segment[node] = (end - start + 1) - self.segment[node]\n            if start != end:\n                self.lazy[2 * node] ^= 1\n                self.lazy[2 * node + 1] ^= 1\n            return\n\n        mid = (start + end) // 2\n        self.update(2 * node, start, mid, l, r)\n        self.update(2 * node + 1, mid + 1, end, l, r)\n        self.segment[node] = self.segment[2 * node] + self.segment[2 * node + 1]\n\n    def query(self, node, start, end, l, r):\n        if self.lazy[node] != 0:\n            self.segment[node] = (end - start + 1) - self.segment[node]\n            if start != end:\n                self.lazy[2 * node] ^= 1\n                self.lazy[2 * node + 1] ^= 1\n            self.lazy[node] = 0\n\n        if r < start or end < l:\n            return 0\n        if l <= start and end <= r:\n            return self.segment[node]\n\n        mid = (start + end) // 2\n        p1 = self.query(2 * node, start, mid, l, r)\n        p2 = self.query(2 * node + 1, mid + 1, end, l, r)\n        return p1 + p2\n\n\nclass FenwickTree:\n    def __init__(self, n):\n        self.n = n\n        self.tree = [0] * (n + 1)\n\n    def update(self, i, delta):\n        while i <= self.n:\n            self.tree[i] += delta\n            i += i & (-i)\n\n    def query(self, i):\n        result = 0\n        while i > 0:\n            result += self.tree[i]\n            i -= i & (-i)\n        return result\n\n\ndef is_possible(segment_tree, graph, i, j):\n    # if graph.nodes[i].level % 2 == graph.nodes[j].level % 2:\n    #     return False\n\n    # if graph.nodes[i].level % 2 == 0:\n    #     left = graph.nodes[i].start\n    #     right = graph.nodes[j].start\n    # else:\n    #     left = graph.nodes[j].start\n    #     right = graph.nodes[i].start\n\n    # if left > right:\n    #     left, right = right, left\n\n    # if segment_tree.query(1, 1, graph.n, left, right) > 0:\n    #     return False\n\n    # return True\n\n    return graph.nodes[i].start > graph.nodes[j].start\n\n\ndef main():\n    n = int(input())\n    l = input()\n    r = input()\n\n    l_list = []\n    r_list = []\n    for i in range(n):\n        if l[i] != '?':\n            l_list.append(l[i])\n        if r[i] != '?':\n            r_list.append(r[i])\n\n    l_list = list(set(l_list))\n    r_list = list(set(r_list))\n\n    if len(l_list) > len(r_list):\n        l_list, r_list = r_list, l_list\n\n    pairs = []\n\n    if len(l_list) == 0:\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    pairs.append((i, j))\n        print(len(pairs))\n        for pair in pairs:\n            print(\"{} {}\".format(pair[0] + 1, pair[1] + 1))\n        return\n\n    l_to_index = {}\n    r_to_index = {}\n\n    for i in range(len(l_list)):\n        l_to_index[l_list[i]] = i + 1\n    for i in range(len(r_list)):\n        r_to_index[r_list[i]] = i + 1\n\n    edges = []\n    for i in range(len(r_list)):\n        edges.append((r_to_index[r_list[i]], i + 1))\n\n    graph = Graph(len(r_list), edges)\n    graph.construct_tree()\n    graph.setup()\n\n    segment_tree = SegmentTree(graph.n)\n    segment_tree.build(1, 1, graph.n)\n\n    # segment_tree.update(1, 1, graph.n, graph.nodes[1].start, graph.nodes[1].end)\n\n    for i in range(len(l_list)):\n        l_index = l_to_index[l_list[i]]\n        for j in range(graph.n):\n            r_index = j + 1\n            if l_index == r_index:\n                continue\n            if is_possible(segment_tree, graph, l_index, r_index):\n                pairs.append((i, j))\n                segment_tree.update(1, 1, graph.n, graph.nodes[r_index].start, graph.nodes[r_index].end)\n\n    # print(graph)\n    # print(l_to_index)\n    # print(r_to_index)\n    # print(segment_tree.segment)\n    # print(segment_tree.lazy)\n\n    print(len(pairs))\n    for pair in pairs:\n        print(\"{} {}\".format(pair[0] + 1, pair[1] + 1))\n\n\nif __name__ == \"__main__\":\n    sys.setrecursionlimit(10000)\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n# I/O\nn = int(input())\nleft = input()\nright = input()\n\n# Solution\n\n# Create a list of all possible left/right pairs\npairs = []\nfor i in range(n):\n    for j in range(n):\n        pairs.append((i+1, j+1))\n\n# Filter out pairs where colors don't match\nfor i in range(n):\n    if left[i] != \"?\" and right[i] != \"?\":\n        if left[i] != right[i]:\n            pairs = [pair for pair in pairs if pair[0] != i+1 and pair[1] != i+1]\n\n# Filter out pairs where left boots repeat\nleft = [pair[0] for pair in pairs]\ndups = [i for i in left if left.count(i) > 1]\npairs = [pair for pair in pairs if pair[0] not in dups]\n\n# Filter out pairs where right boots repeat\nright = [pair[1] for pair in pairs]\ndups = [i for i in right if right.count(i) > 1]\npairs = [pair for pair in pairs if pair[1] not in dups]\n\n# Print pairs\nprint(len(pairs))\nfor pair in pairs:\n    print(pair[0], pair[1])"
    }
  ],
  "created": 1650252273,
  "id": "cmpl-4yCI5WvkJM9eAnoJkVK3dKnGrEIJa",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-18 03:26:12.644240 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n# n = int(input())\n# l = input()\n# r = input()\n#\n# pairs = []\n#\n# for i in range(n):\n#     if l[i] != '?' and r[i] != '?':\n#         if l[i] == r[i]:\n#             pairs.append((i+1, i+1))\n#             l[i] = '?'\n#             r[i] = '?'\n#     elif l[i] != '?':\n#         for j in range(n):\n#             if r[j] == l[i]:\n#                 pairs.append((i+1, j+1))\n#                 l[i] = '?'\n#                 r[j] = '?'\n#                 break\n#     elif r[i] != '?':\n#         for j in range(n):\n#             if l[j] == r[i]:\n#                 pairs.append((j+1, i+1))\n#                 l[j] = '?'\n#                 r[i] = '?'\n#                 break\n#\n# print(len(pairs))\n# for p in pairs:\n#     print(p[0], p[1])\n\n# def check(x, y):\n#     if x == '?' or y == '?':\n#         return True\n#     elif x == y:\n#         return True\n#     else:\n#         return False\n#\n# n = int(input())\n# l = input()\n# r = input()\n#\n# pairs = []\n#\n# for i in range(n):\n#     for j in range(n):\n#         if check(l[i], r[j]):\n#             pairs.append((i+1, j+1))\n#             l[i] = '?'\n#             r[j] = '?'\n#             break\n#\n# print(len(pairs))\n# for p in pairs:\n#     print(p[0], p[1])\n\nimport sys\n\nn = int(input())\nl = input()\nr = input()\n\npairs = []\n\nfor i in range(n):\n    for j in range(n):\n        if l[i] != '?' and r[j] != '?':\n            if l[i] == r[j]:\n                pairs.append((i+1, j+1))\n                l[i] = '?'\n                r[j] = '?'\n                break\n        elif l[i] == '?':\n            pairs.append((i+1, j+1))\n            l[i] = '?'\n            r[j] = '?'\n            break\n        elif r[j] == '?':\n            pairs.append((i+1, j+1))\n            l[i] = '?'\n            r[j] = '?'\n            break\n\nprint(len(pairs))\nfor p in pairs:\n    print(p[0], p[1])"
}
2022-04-18 03:26:12.644290 REASON stop
2022-04-18 03:26:12.668288 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\nimport math\n\nclass Node:\n    def __init__(self, data, parent, left=None, right=None, level=0):\n        self.data = data\n        self.parent = parent\n        self.left = left\n        self.right = right\n        self.level = level\n        self.type = None\n        self.start = None\n        self.end = None\n        self.inorder = None\n        self.postorder = None\n        self.preorder = None\n        self.subtree_size = None\n\n    def __repr__(self):\n        return \"{}\".format(self.data)\n\n\nclass Graph:\n    def __init__(self, n, edges):\n        self.n = n\n        self.edges = edges\n        self.nodes = {}\n        self.root = None\n        self.start = None\n        self.end = None\n        self.inorder_index = 0\n        self.postorder_index = 0\n        self.preorder_index = 0\n        self.subtree_size = 0\n\n    def construct_tree(self, root_id=1):\n        for i in range(1, self.n + 1):\n            self.nodes[i] = Node(i, None, None, None, None)\n\n        for edge in self.edges:\n            parent, child = edge\n            parent_node = self.nodes[parent]\n            child_node = self.nodes[child]\n            child_node.parent = parent_node\n            if parent_node.left is None:\n                parent_node.left = child_node\n            else:\n                parent_node.right = child_node\n\n        self.root = self.nodes[root_id]\n\n    def set_level(self, node):\n        if node.left is None and node.right is None:\n            node.level = 0\n        else:\n            if node.left is not None:\n                node.level = node.left.level + 1\n            if node.right is not None:\n                node.level = max(node.level, node.right.level + 1)\n\n    def set_type(self, node):\n        if node.left is not None and node.right is not None:\n            node.type = \"internal\"\n        elif node.left is None and node.right is None:\n            node.type = \"leaf\"\n        else:\n            node.type = \"external\"\n\n    def set_start_end(self, node):\n        node.start = self.start\n        self.start += 1\n        if node.left is not None:\n            self.set_start_end(node.left)\n        node.end = self.start\n        if node.right is not None:\n            self.set_start_end(node.right)\n\n    def set_subtree_size(self, node):\n        node.subtree_size = 1\n        if node.left is not None:\n            node.subtree_size += self.set_subtree_size(node.left)\n        if node.right is not None:\n            node.subtree_size += self.set_subtree_size(node.right)\n        return node.subtree_size\n\n    def set_inorder(self, node):\n        if node.left is not None:\n            self.set_inorder(node.left)\n        node.inorder = self.inorder_index\n        self.inorder_index += 1\n        if node.right is not None:\n            self.set_inorder(node.right)\n\n    def set_postorder(self, node):\n        if node.left is not None:\n            self.set_postorder(node.left)\n        if node.right is not None:\n            self.set_postorder(node.right)\n        node.postorder = self.postorder_index\n        self.postorder_index += 1\n\n    def set_preorder(self, node):\n        node.preorder = self.preorder_index\n        self.preorder_index += 1\n        if node.left is not None:\n            self.set_preorder(node.left)\n        if node.right is not None:\n            self.set_preorder(node.right)\n\n    def setup(self):\n        self.start = 1\n        self.end = 1\n        self.inorder_index = 1\n        self.postorder_index = 1\n        self.preorder_index = 1\n        self.subtree_size = 0\n\n        queue = []\n        queue.append(self.root)\n        while len(queue) != 0:\n            node = queue.pop(0)\n            self.set_level(node)\n            self.set_type(node)\n            if node.left is not None:\n                queue.append(node.left)\n            if node.right is not None:\n                queue.append(node.right)\n\n        self.set_start_end(self.root)\n        self.set_subtree_size(self.root)\n        self.set_inorder(self.root)\n        self.set_postorder(self.root)\n        self.set_preorder(self.root)\n\n    def __repr__(self):\n        graph_string = \"\"\n        for i in range(1, self.n + 1):\n            node = self.nodes[i]\n            graph_string += \"{} {} {} {} {} {} {} {}\\n\".format(\n                node.data, node.parent.data if node.parent is not None else None, node.left.data if node.left is not None else None,\n                node.right.data if node.right is not None else None, node.level, node.type, node.start, node.end)\n        return graph_string\n\n\nclass SegmentTree:\n    def __init__(self, n):\n        self.n = n\n        self.segment = [0] * (4 * n)\n        self.lazy = [0] * (4 * n)\n\n    def build(self, node, start, end):\n        if start == end:\n            self.segment[node] = 0\n        else:\n            mid = (start + end) // 2\n            self.build(2 * node, start, mid)\n            self.build(2 * node + 1, mid + 1, end)\n            self.segment[node] = self.segment[2 * node] + self.segment[2 * node + 1]\n\n    def update(self, node, start, end, l, r):\n        if self.lazy[node] != 0:\n            self.segment[node] = (end - start + 1) - self.segment[node]\n            if start != end:\n                self.lazy[2 * node] ^= 1\n                self.lazy[2 * node + 1] ^= 1\n            self.lazy[node] = 0\n\n        if r < start or end < l:\n            return\n        if l <= start and end <= r:\n            self.segment[node] = (end - start + 1) - self.segment[node]\n            if start != end:\n                self.lazy[2 * node] ^= 1\n                self.lazy[2 * node + 1] ^= 1\n            return\n\n        mid = (start + end) // 2\n        self.update(2 * node, start, mid, l, r)\n        self.update(2 * node + 1, mid + 1, end, l, r)\n        self.segment[node] = self.segment[2 * node] + self.segment[2 * node + 1]\n\n    def query(self, node, start, end, l, r):\n        if self.lazy[node] != 0:\n            self.segment[node] = (end - start + 1) - self.segment[node]\n            if start != end:\n                self.lazy[2 * node] ^= 1\n                self.lazy[2 * node + 1] ^= 1\n            self.lazy[node] = 0\n\n        if r < start or end < l:\n            return 0\n        if l <= start and end <= r:\n            return self.segment[node]\n\n        mid = (start + end) // 2\n        p1 = self.query(2 * node, start, mid, l, r)\n        p2 = self.query(2 * node + 1, mid + 1, end, l, r)\n        return p1 + p2\n\n\nclass FenwickTree:\n    def __init__(self, n):\n        self.n = n\n        self.tree = [0] * (n + 1)\n\n    def update(self, i, delta):\n        while i <= self.n:\n            self.tree[i] += delta\n            i += i & (-i)\n\n    def query(self, i):\n        result = 0\n        while i > 0:\n            result += self.tree[i]\n            i -= i & (-i)\n        return result\n\n\ndef is_possible(segment_tree, graph, i, j):\n    # if graph.nodes[i].level % 2 == graph.nodes[j].level % 2:\n    #     return False\n\n    # if graph.nodes[i].level % 2 == 0:\n    #     left = graph.nodes[i].start\n    #     right = graph.nodes[j].start\n    # else:\n    #     left = graph.nodes[j].start\n    #     right = graph.nodes[i].start\n\n    # if left > right:\n    #     left, right = right, left\n\n    # if segment_tree.query(1, 1, graph.n, left, right) > 0:\n    #     return False\n\n    # return True\n\n    return graph.nodes[i].start > graph.nodes[j].start\n\n\ndef main():\n    n = int(input())\n    l = input()\n    r = input()\n\n    l_list = []\n    r_list = []\n    for i in range(n):\n        if l[i] != '?':\n            l_list.append(l[i])\n        if r[i] != '?':\n            r_list.append(r[i])\n\n    l_list = list(set(l_list))\n    r_list = list(set(r_list))\n\n    if len(l_list) > len(r_list):\n        l_list, r_list = r_list, l_list\n\n    pairs = []\n\n    if len(l_list) == 0:\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    pairs.append((i, j))\n        print(len(pairs))\n        for pair in pairs:\n            print(\"{} {}\".format(pair[0] + 1, pair[1] + 1))\n        return\n\n    l_to_index = {}\n    r_to_index = {}\n\n    for i in range(len(l_list)):\n        l_to_index[l_list[i]] = i + 1\n    for i in range(len(r_list)):\n        r_to_index[r_list[i]] = i + 1\n\n    edges = []\n    for i in range(len(r_list)):\n        edges.append((r_to_index[r_list[i]], i + 1))\n\n    graph = Graph(len(r_list), edges)\n    graph.construct_tree()\n    graph.setup()\n\n    segment_tree = SegmentTree(graph.n)\n    segment_tree.build(1, 1, graph.n)\n\n    # segment_tree.update(1, 1, graph.n, graph.nodes[1].start, graph.nodes[1].end)\n\n    for i in range(len(l_list)):\n        l_index = l_to_index[l_list[i]]\n        for j in range(graph.n):\n            r_index = j + 1\n            if l_index == r_index:\n                continue\n            if is_possible(segment_tree, graph, l_index, r_index):\n                pairs.append((i, j))\n                segment_tree.update(1, 1, graph.n, graph.nodes[r_index].start, graph.nodes[r_index].end)\n\n    # print(graph)\n    # print(l_to_index)\n    # print(r_to_index)\n    # print(segment_tree.segment)\n    # print(segment_tree.lazy)\n\n    print(len(pairs))\n    for pair in pairs:\n        print(\"{} {}\".format(pair[0] + 1, pair[1] + 1))\n\n\nif __name__ == \"__main__\":\n    sys.setrecursionlimit(10000)\n    main()"
}
2022-04-18 03:26:12.668401 REASON stop
2022-04-18 03:26:12.668904 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n# I/O\nn = int(input())\nleft = input()\nright = input()\n\n# Solution\n\n# Create a list of all possible left/right pairs\npairs = []\nfor i in range(n):\n    for j in range(n):\n        pairs.append((i+1, j+1))\n\n# Filter out pairs where colors don't match\nfor i in range(n):\n    if left[i] != \"?\" and right[i] != \"?\":\n        if left[i] != right[i]:\n            pairs = [pair for pair in pairs if pair[0] != i+1 and pair[1] != i+1]\n\n# Filter out pairs where left boots repeat\nleft = [pair[0] for pair in pairs]\ndups = [i for i in left if left.count(i) > 1]\npairs = [pair for pair in pairs if pair[0] not in dups]\n\n# Filter out pairs where right boots repeat\nright = [pair[1] for pair in pairs]\ndups = [i for i in right if right.count(i) > 1]\npairs = [pair for pair in pairs if pair[1] not in dups]\n\n# Print pairs\nprint(len(pairs))\nfor pair in pairs:\n    print(pair[0], pair[1])"
}
2022-04-18 03:26:12.668971 REASON stop
