2022-04-18 01:47:08.498075 """
You are given $n$ strings. Each string consists of lowercase English letters. Rearrange (reorder) the given strings in such a way that for every string, all strings that are placed before it are its substrings.

String $a$ is a substring of string $b$ if it is possible to choose several consecutive letters in $b$ in such a way that they form $a$. For example, string "for" is contained as a substring in strings "codeforces", "for" and "therefore", but is not contained as a substring in strings "four", "fofo" and "rof".


-----Input-----

The first line contains an integer $n$ ($1 \le n \le 100$) â€” the number of strings.

The next $n$ lines contain the given strings. The number of letters in each string is from $1$ to $100$, inclusive. Each string consists of lowercase English letters.

Some strings might be equal.


-----Output-----

If it is impossible to reorder $n$ given strings in required order, print "NO" (without quotes).

Otherwise print "YES" (without quotes) and $n$ given strings in required order.


-----Examples-----
Input
5
a
aba
abacaba
ba
aba

Output
YES
a
ba
aba
aba
abacaba

Input
5
a
abacaba
ba
aba
abab

Output
NO

Input
3
qwerty
qwerty
qwerty

Output
YES
qwerty
qwerty
qwerty



-----Note-----

In the second example you cannot reorder the strings because the string "abab" is not a substring of the string "abacaba".
"""
2022-04-18 01:47:08.498092 --------------------------
2022-04-18 01:47:50.525212 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef is_substring(s1, s2):\n    if len(s1) > len(s2):\n        return False\n    for i in range(len(s2)):\n        if s2[i:i+len(s1)] == s1:\n            return True\n    return False\n\ndef main():\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    strings.sort(key=lambda s: len(s))\n    for i in range(len(strings)):\n        if i == 0:\n            continue\n        if not is_substring(strings[i], strings[i-1]):\n            print('NO')\n            return\n    print('YES')\n    print('\\n'.join(strings))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\ndef solution(n, strings):\n    substrings = []\n    for i in strings:\n        for j in strings:\n            if i in j:\n                substrings.append(i)\n    if len(substrings) == len(strings):\n        return \"YES\", substrings\n    else:\n        return \"NO\"\n\nn = int(input())\nstrings = []\nfor i in range(n):\n    strings.append(input())\n\nprint(solution(n, strings))"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\ndef is_substring(a, b):\n    \"\"\"\n    >>> is_substring('a', 'a')\n    True\n    >>> is_substring('ab', 'a')\n    False\n    >>> is_substring('a', 'ab')\n    True\n    >>> is_substring('a', 'abab')\n    True\n    >>> is_substring('ab', 'abab')\n    True\n    >>> is_substring('abab', 'abab')\n    True\n    >>> is_substring('abab', 'ab')\n    False\n    >>> is_substring('ab', 'ababab')\n    True\n    >>> is_substring('abcabcabcabcabcabcabcabcabcabcabcab', 'a')\n    True\n    \"\"\"\n    if a == b:\n        return True\n    if len(a) > len(b):\n        return False\n    start = 0\n    while True:\n        if a == b[start:start+len(a)]:\n            return True\n        start += 1\n        if start > len(b) - len(a):\n            return False\n\ndef reorder(strings):\n    \"\"\"\n    >>> reorder(['a', 'aba', 'abacaba', 'ba', 'aba'])\n    ['a', 'ba', 'aba', 'aba', 'abacaba']\n    >>> reorder(['a', 'abacaba', 'ba', 'aba', 'abab'])\n    False\n    >>> reorder(['qwerty', 'qwerty', 'qwerty'])\n    ['qwerty', 'qwerty', 'qwerty']\n    \"\"\"\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if is_substring(strings[j], strings[i]):\n                continue\n            if not is_substring(strings[i], strings[j]):\n                return False\n    return strings\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    result = reorder(strings)\n    if result:\n        print(\"YES\")\n        for s in result:\n            print(s)\n    else:\n        print(\"NO\")"
    }
  ],
  "created": 1650246428,
  "id": "cmpl-4yAloOmiYwU6XO6ZjDgFXCH6se6QO",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-18 01:47:50.525497 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef is_substring(s1, s2):\n    if len(s1) > len(s2):\n        return False\n    for i in range(len(s2)):\n        if s2[i:i+len(s1)] == s1:\n            return True\n    return False\n\ndef main():\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    strings.sort(key=lambda s: len(s))\n    for i in range(len(strings)):\n        if i == 0:\n            continue\n        if not is_substring(strings[i], strings[i-1]):\n            print('NO')\n            return\n    print('YES')\n    print('\\n'.join(strings))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-18 01:47:50.525576 REASON stop
2022-04-18 01:47:50.552782 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\ndef solution(n, strings):\n    substrings = []\n    for i in strings:\n        for j in strings:\n            if i in j:\n                substrings.append(i)\n    if len(substrings) == len(strings):\n        return \"YES\", substrings\n    else:\n        return \"NO\"\n\nn = int(input())\nstrings = []\nfor i in range(n):\n    strings.append(input())\n\nprint(solution(n, strings))"
}
2022-04-18 01:47:50.552857 REASON stop
2022-04-18 01:47:50.553401 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\ndef is_substring(a, b):\n    \"\"\"\n    >>> is_substring('a', 'a')\n    True\n    >>> is_substring('ab', 'a')\n    False\n    >>> is_substring('a', 'ab')\n    True\n    >>> is_substring('a', 'abab')\n    True\n    >>> is_substring('ab', 'abab')\n    True\n    >>> is_substring('abab', 'abab')\n    True\n    >>> is_substring('abab', 'ab')\n    False\n    >>> is_substring('ab', 'ababab')\n    True\n    >>> is_substring('abcabcabcabcabcabcabcabcabcabcabcab', 'a')\n    True\n    \"\"\"\n    if a == b:\n        return True\n    if len(a) > len(b):\n        return False\n    start = 0\n    while True:\n        if a == b[start:start+len(a)]:\n            return True\n        start += 1\n        if start > len(b) - len(a):\n            return False\n\ndef reorder(strings):\n    \"\"\"\n    >>> reorder(['a', 'aba', 'abacaba', 'ba', 'aba'])\n    ['a', 'ba', 'aba', 'aba', 'abacaba']\n    >>> reorder(['a', 'abacaba', 'ba', 'aba', 'abab'])\n    False\n    >>> reorder(['qwerty', 'qwerty', 'qwerty'])\n    ['qwerty', 'qwerty', 'qwerty']\n    \"\"\"\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if is_substring(strings[j], strings[i]):\n                continue\n            if not is_substring(strings[i], strings[j]):\n                return False\n    return strings\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    n = int(input())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    result = reorder(strings)\n    if result:\n        print(\"YES\")\n        for s in result:\n            print(s)\n    else:\n        print(\"NO\")"
}
2022-04-18 01:47:50.553459 REASON stop
