["\n#!/usr/bin/python\n\nimport sys\nimport numpy as np\nfrom collections import defaultdict\n\ndef dfs(s, visited, graph):\n    visited[s] = True\n    for i in graph[s]:\n        if not visited[i]:\n            dfs(i, visited, graph)\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    graph = defaultdict(list)\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        graph[v].append(u)\n\n    visited = np.zeros(n + 1)\n    dfs(s, visited, graph)\n\n    res = 0\n    for i in range(n):\n        if not visited[i]:\n            dfs(i, visited, graph)\n            res += 1\n    print(res)\n\nif __name__ == '__main__':\n    main()\n", "console.log(\"Hello World\");\n", "\n\n#---------------------------------------------------------------------------------#\n\nimport sys\nimport numpy as np\nfrom collections import defaultdict\n\ndef dfs(s, visited, graph):\n    visited[s] = True\n    for i in graph[s]:\n        if not visited[i]:\n            dfs(i, visited, graph)\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    graph = defaultdict(list)\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        graph[u].append(v)\n\n    visited = np.zeros(n + 1)\n    dfs(s, visited, graph)\n\n    res = 0\n    for i in range(1, n + 1):\n        if not visited[i]:\n            dfs(i, visited, graph)\n            res += 1\n    print(res)\n\nif __name__ == '__main__':\n    main()\n", "\n\n#---------------------------------------------------------------------------------\n\nimport sys\nimport numpy as np\nfrom collections import defaultdict\n\ndef dfs(s, visited, graph):\n    visited[s] = True\n    for i in graph[s]:\n        if not visited[i]:\n            dfs(i, visited, graph)\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    graph = defaultdict(list)\n    for _ in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        graph[u].append(v)\n\n    visited = np.zeros(n + 1)\n    dfs(s, visited, graph)\n\n    res = 0\n    for i in range(1, n + 1):\n        if not visited[i]:\n            dfs(i, visited, graph)\n            res += 1\n    print(res)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\nimport os\n\n\ndef file_exists(file):\n    \"\"\"\n    Checks if a file exists and is accessible.\n    :param file:\n    :return:\n    \"\"\"\n    if not os.path.exists(file):\n        print(\"Error: File does not exist.\")\n        sys.exit(1)\n\n\ndef file_is_empty(file):\n    \"\"\"\n    Checks if a file is empty\n    :param file:\n    :return:\n    \"\"\"\n    if os.path.getsize(file) == 0:\n        print(\"Error: File is empty.\")\n        sys.exit(1)\n\n\ndef file_is_readable(file):\n    \"\"\"\n    Checks if a file is readable.\n    :param file:\n    :return:\n    \"\"\"\n    if not os.access(file, os.R_OK):\n        print(\"Error: File is not readable.\")\n        sys.exit(1)\n\n\ndef file_is_writable(file):\n    \"\"\"\n    Checks if a file is writable.\n    :param file:\n    :return:\n    \"\"\"\n    if not os.access(file, os.W_OK):\n        print(\"Error: File is not writable.\")\n        sys.exit(1)\n\n\ndef file_is_executable(file):\n    \"\"\"\n    Checks if a file is executable.\n    :param file:\n    :return:\n    \"\"\"\n    if not os.access(file, os.X_OK):\n        print(\"Error: File is not executable.\")\n        sys.exit(1)\n\n\ndef file_is_regular(file):\n    \"\"\"\n    Checks if a file is a regular file.\n    :param file:\n    :return:\n    \"\"\"\n    if not os.path.isfile(file):\n        print(\"Error: File is not a regular file.\")\n        sys.exit(1)\n\n\ndef file_is_directory(file):\n    \"\"\"\n    Checks if a file is a directory.\n    :param file:\n    :return:\n    \"\"\"\n    if not os.path.isdir(file):\n        print(\"Error: File is not a directory.\")\n        sys.exit(1)\n\n\ndef file_is_symlink(file):\n    \"\"\"\n    Checks if a file is a symlink.\n    :param file:\n    :return:\n    \"\"\"\n    if not os.path.islink(file):\n        print(\"Error: File is not a symlink.\")\n        sys.exit(1)\n\n\ndef file_is_socket(file):\n    \"\"\"\n    Checks if a file is a socket.\n    :param file:\n    :return:\n    \"\"\"\n    if not os.path.exists(file):\n        print(\"Error: File is not a socket.\")\n        sys.exit(1)\n", "\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    edges = defaultdict(list)\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        edges[u].append(v)\n    visited = set()\n    q = [s]\n    while q:\n        node = q.pop()\n        visited.add(node)\n        for edge in edges[node]:\n            if edge not in visited:\n                q.append(edge)\n    print(n - len(visited))\n\nmain()\n", "\n\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    edges = defaultdict(list)\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        edges[u].append(v)\n    visited = set()\n    q = [s]\n    while q:\n        node = q.pop()\n        visited.add(node)\n        for edge in edges[node]:\n            if edge not in visited:\n                q.append(edge)\n    print(n - len(visited))\n\nmain()\n", "import sys\nfrom collections import defaultdict\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    edges = defaultdict(list)\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        edges[u].append(v)\n    visited = set()\n    q = [s]\n    while q:\n        node = q.pop()\n        visited.add(node)\n        for edge in edges[node]:\n            if edge not in visited:\n                q.append(edge)\n    print(n - len(visited))\n\nmain()\n", "#include <iostream>\n#include <fstream>\nusing namespace std;\n\nint main()\n{\n  ofstream myfile;\n  myfile.open(\"example.txt\");\n  myfile << \"Writing this to a file.\\n\";\n  myfile.close();\n  return 0;\n}\n"]