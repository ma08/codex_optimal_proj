["\n\ndef count_parking_space(matrix):\n    parking_space = [0, 0, 0, 0, 0]\n    for i in range(len(matrix) - 2):\n        for j in range(len(matrix[i]) - 2):\n            if matrix[i][j] == '#':\n                continue\n            elif matrix[i][j] == 'X':\n                if matrix[i + 1][j] == 'X':\n                    if matrix[i][j + 1] == 'X':\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[4] += 1\n                        else:\n                            parking_space[3] += 1\n                    else:\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[3] += 1\n                        else:\n                            parking_space[2] += 1\n                else:\n                    if matrix[i][j + 1] == 'X':\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[3] += 1\n                        else:\n                            parking_space[2] += 1\n                    else:\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[2] += 1\n                        else:\n                            parking_space[1] += 1\n            else:\n                if matrix[i + 1][j] == 'X':\n                    if matrix[i][j + 1] == 'X':\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[3] += 1\n                        else:\n                            parking_space[2] += 1\n                    else:\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[2] += 1\n                        else:\n                            parking_space[1] += 1\n                else:\n                    if matrix[i][j + 1] == 'X':\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[2] += 1\n                        else:\n                            parking_space[1] += 1\n                    else:\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[1] += 1\n                        else:\n                            parking_space[0] += 1\n\n    return parking_space\n\ndef main():\n    rows, columns = [int(x) for x in input().split()]\n    matrix = []\n    for i in range(rows):\n        matrix.append(list(input()))\n    parking_space = count_parking_space(matrix)\n    for i in range(len(parking_space)):\n        print(parking_space[i])\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    R, C = map(int, sys.stdin.readline().split())\n    parking_map = []\n    for i in range(R):\n        parking_map.append(sys.stdin.readline().strip())\n    parking_spaces = [0, 0, 0, 0, 0]  # 0, 1, 2, 3, 4\n    for i in range(R - 1):\n        for j in range(C - 1):\n            if parking_map[i][j] == '.':\n                if parking_map[i][j + 1] == '.' and parking_map[i + 1][j] == '.' and parking_map[i + 1][j + 1] == '.':\n                    parking_spaces[0] += 1\n                    if parking_map[i][j + 2] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i + 2][j] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i + 2][j + 1] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i + 1][j + 2] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i + 2][j + 2] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i + 3][j + 1] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i + 1][j + 3] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i + 3][j + 2] == 'X':\n                        parking_spaces[3] += 1\n                    if parking_map[i + 2][j + 3] == 'X':\n                        parking_spaces[3] += 1\n                    if parking_map[i + 3][j + 3] == 'X':\n                        parking_spaces[4] += 1\n    for i in range(5):\n        print(parking_spaces[i])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef count_parking_space(matrix, rows, columns):\n    parking_space = [0, 0, 0, 0, 0]\n    for i in range(rows - 1):\n        for j in range(columns - 1):\n            if matrix[i][j] == '#':\n                continue\n            elif matrix[i][j] == 'X':\n                if matrix[i + 1][j] == 'X':\n                    if matrix[i][j + 1] == 'X':\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[4] += 1\n                        else:\n                            parking_space[3] += 1\n                    else:\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[3] += 1\n                        else:\n                            parking_space[2] += 1\n                else:\n                    if matrix[i][j + 1] == 'X':\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[3] += 1\n                        else:\n                            parking_space[2] += 1\n                    else:\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[2] += 1\n                        else:\n                            parking_space[1] += 1\n            else:\n                if matrix[i + 1][j] == 'X':\n                    if matrix[i][j + 1] == 'X':\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[3] += 1\n                        else:\n                            parking_space[2] += 1\n                    else:\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[2] += 1\n                        else:\n                            parking_space[1] += 1\n                else:\n                    if matrix[i][j + 1] == 'X':\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[2] += 1\n                        else:\n                            parking_space[1] += 1\n                    else:\n                        if matrix[i + 1][j + 1] == 'X':\n                            parking_space[1] += 1\n                        else:\n                            parking_space[0] += 1\n\n    return parking_space\n\ndef main():\n    rows, columns = [int(x) for x in input().split()]\n    matrix = []\n    for i in range(rows):\n        matrix.append(list(input()))\n    parking_space = count_parking_space(matrix, rows, columns)\n    for i in range(len(parking_space)):\n        print(parking_space[i])\n\nif __name__ == '__main__':\n    main()\n", "\n\nR, C = map(int, input().split())\ngrid = [input() for i in range(R)]\n\n# find all possible parking spaces\npossible_spaces = []\nfor i in range(R):\n    for j in range(C):\n        if grid[i][j] == '.':\n            if i <= R-2 and j <= C-2:\n                possible_spaces.append([(i, j), (i, j+1), (i+1, j), (i+1, j+1)])\n\n# count the number of cars to be squished for each space\nsquish = [0]*5\nfor space in possible_spaces:\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X':\n            squish[0] += 1\n    for cell in space[1:]:\n        if grid[cell[0]][cell[1]] == 'X' and grid[cell[0]-1][cell[1]-1] == 'X':\n            squish[1] += 1 \n    for cell in space[2:]:\n        if grid[cell[0]][cell[1]] == 'X' and grid[cell[0]-1][cell[1]-1] == 'X' and grid[cell[0]-2][cell[1]-2] == 'X':\n            squish[2] += 1\n    for cell in space[3:]:\n        if grid[cell[0]][cell[1]] == 'X' and grid[cell[0]-1][cell[1]-1] == 'X' and grid[cell[0]-2][cell[1]-2] == 'X' and grid[cell[0]-3][cell[1]-3] == 'X':\n            squish[3] += 1\n    for cell in space[4:]:\n        if grid[cell[0]][cell[1]] == 'X' and grid[cell[0]-1][cell[1]-1] == 'X' and grid[cell[0]-2][cell[1]-2] == 'X' and grid[cell[0]-3][cell[1]-3] == 'X' and grid[cell[0]-4][cell[1]-4] == 'X':\n            squish[4] += 1\n\n# print the number of spaces that squish 0, 1, 2, 3, and 4 cars\nfor i in range(5):\n    print(squish.count(i))\n", "\nr, c = map(int, input().split())\nparking = [input() for _ in range(r)]\n\nsquash = [0, 0, 0, 0, 0]\nfor i in range(r-1):\n    for j in range(c-1):\n        if parking[i][j] == \"#\":\n            continue\n        elif parking[i][j] == \".\":\n            if parking[i+1][j] == \"X\" and parking[i][j+1] == \"X\" and parking[i+1][j+1] == \"X\":\n                squash[4] += 1\n            elif parking[i+1][j] == \"X\" and parking[i][j+1] == \"X\":\n                squash[3] += 1\n            elif parking[i+1][j] == \"X\" and parking[i+1][j+1] == \"X\":\n                squash[3] += 1\n            elif parking[i][j+1] == \"X\" and parking[i+1][j+1] == \"X\":\n                squash[3] += 1\n            elif parking[i+1][j] == \"X\":\n                squash[2] += 1\n            elif parking[i][j+1] == \"X\":\n                squash[2] += 1\n            elif parking[i+1][j+1] == \"X\":\n                squash[2] += 1\n            else:\n                squash[0] += 1\n        else:\n            squash[1] += 1\n\nprint(squash[0])\nprint(squash[1])\nprint(squash[2])\nprint(squash[3])\nprint(squash[4])\n", "\n\nR, C = map(int, input().split())\ngrid = [input() for i in range(R)]\n\n# find all possible parking spaces\npossible_spaces = []\nfor i in range(R):\n    for j in range(C):\n        if grid[i][j] == '.':\n            if i <= R-2 and j <= C-2:\n                possible_spaces.append([(i, j), (i, j+1), (i+1, j), (i+1, j+1)])\n\n# count the number of cars to be squished for each space\nsquash = [0]*5\nfor space in possible_spaces:\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X':\n            squash[0] += 1\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X':\n            squash[1] += 1\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X':\n            squash[2] += 1\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X':\n            squash[3] += 1\n    for cell in space:\n        if grid[cell[0]][cell[1]] == 'X':\n            squash[4] += 1\n\n# print the number of spaces that squish 0, 1, 2, 3, and 4 cars\nfor i in range(5):\n    print(squash.count(i))\n", "\n\nR, C = map(int, input().split())\ngrid = [input() for i in range(R)]\n\n# find all possible parking spaces\npossible_spaces = []\nfor i in range(R):\n    for j in range(C):\n        if grid[i][j] == '.':\n            if i <= R-2 and j <= C-2:\n                possible_spaces.append([(i, j), (i, j+1), (i+1, j), (i+1, j+1)])\n\n# count the number of cars to be squished for each space\nsquish = [0]*len(possible_spaces)\nfor space in possible_spaces:\n        if grid[cell[0]][cell[1]] == 'X': \n            squish[possible_spaces.index(space)] += 1\n\n# print the number of spaces that squish 0, 1, 2, 3, and 4 cars\nfor i in range(len(possible_spaces)):\n    print(squish.count(i))\n", "# https://www.acmicpc.net/problem/14502\nimport sys\n\ndef main():\n    R, C = map(int, sys.stdin.readline().split())\n    parking_map = []\n    for i in range(R):\n        parking_map.append(sys.stdin.readline().strip())\n    # print(parking_map)\n    parking_spaces = [0, 0, 0, 0, 0]  # 0, 1, 2, 3, 4\n    for i in range(R-1):\n        for j in range(C-1):\n            # print(i, j)\n            if parking_map[i][j] == '.':\n                if parking_map[i][j+1] == '.' and parking_map[i+1][j] == '.' and parking_map[i+1][j+1] == '.':\n                    parking_spaces[0] += 1\n                    if parking_map[i][j+2] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j+1] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+1][j+2] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j+2] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+3][j+1] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+1][j+3] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+3][j+2] == 'X':\n                        parking_spaces[3] += 1\n                    if parking_map[i+2][j+3] == 'X':\n                        parking_spaces[3] += 1\n                    if parking_map[i+3][j+3] == 'X':\n                        parking_spaces[4] += 1\n    for i in range(5):\n        print(parking_spaces[i])\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    r,c = map(int, input().split())\n    l = []\n    for i in range(r):\n        l.append(input())\n    d = {0:0, 1:0, 2:0, 3:0, 4:0}\n    for i in range(r-1):\n        for j in range(c-1):\n            if l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == '.' :\n                d[0] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[1] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[4] += 1\n    for i in range(5):\n        print(d[i])\n\nmain()\n", "\nimport sys\n\nrows, cols = map(int, sys.stdin.readline().split())\n\n# Just count the number of free spaces\nfree = 0\nfor i in range(rows):\n    for j in range(cols):\n        if sys.stdin.read(1) == '.':\n            free += 1\n        sys.stdin.read(1)\n\n# Squash 0, 1, 2, 3, or 4 cars.\nprint(free)\nprint(free - 2 * cols)\nprint(free - 4 * cols)\nprint(free - 6 * cols)\nprint(free - 8 * cols)\n", "# https://www.acmicpc.net/problem/14502\nimport sys\n\ndef main():\n    R, C = map(int, sys.stdin.readline().split())\n    parking_map = []\n    for i in range(R):\n        parking_map.append(sys.stdin.readline().strip())\n    # print(parking_map)\n    parking_spaces = [0, 0, 0, 0, 0]  # 0, 1, 2, 3, 4\n    for i in range(R - 1):\n        for j in range(C - 1):\n            # print(i, j)\n            if parking_map[i][j] == '.':\n                if parking_map[i][j + 1] == '.' and parking_map[i + 1][j] == '.' and parking_map[i + 1][j + 1] == '.':\n                    parking_spaces[0] += 1\n                    if parking_map[i][j + 2] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i + 2][j] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i + 2][j + 1] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i + 1][j + 2] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i + 2][j + 2] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i + 3][j + 1] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i + 1][j + 3] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i + 3][j + 2] == 'X':\n                        parking_spaces[3] += 1\n                    if parking_map[i + 2][j + 3] == 'X':\n                        parking_spaces[3] += 1\n                    if parking_map[i + 3][j + 3] == 'X':\n                        parking_spaces[4] += 1\n    for i in range(5):\n        print(parking_spaces[i])\n\nif __name__ == '__main__':\n    main()\n", "\n\nr, c = map(int, input().split())\n\nmatrix = []\n\nfor i in range(r):\n    matrix.append(list(input()))\n\ncount = [0, 0, 0, 0, 0]\n\nfor i in range(r-1):\n    for j in range(c-1):\n        if matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[0] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[1] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[1] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[1] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[1] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[2] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[2] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[2] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[2] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[2] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[2] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[3] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[4] += 1\n\nfor i in range(5):\n    print(count[i])\n", "def main():\n    r,c = map(int, input().split())\n    l = []\n    for i in range(r):\n        l.append(input())\n    d = {0: 0, 1: 0, 2: 0, 3: 0, 4: 0}\n    for i in range(r - 1):\n        for j in range(c - 1):\n            if l[i][j] == '.' and l[i][j + 1] == '.' and l[i + 1][j] == '.' and l[i + 1][j + 1] == '.':\n                d[0] += 1\n            elif l[i][j] == 'X' and l[i][j + 1] == '.' and l[i + 1][j] == '.' and l[i + 1][j + 1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j + 1] == 'X' and l[i + 1][j] == '.' and l[i + 1][j + 1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j + 1] == '.' and l[i + 1][j] == 'X' and l[i + 1][j + 1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j + 1] == '.' and l[i + 1][j] == '.' and l[i + 1][j + 1] == 'X':\n                d[1] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[4] += 1\n    for i in range(5):\n        print(d[i])\n\n\nmain()\n", "\n\n#CODE:\n\nr, c = map(int, input().split())\n\nmatrix = []\n\nfor i in range(r):\n    matrix.append(list(input()))\n\ncount = [0, 0, 0, 0, 0]\n\nfor i in range(r-1):\n    for j in range(c-1):\n        if matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[0] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[1] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[1] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[1] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[1] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[2] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[2] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[2] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[2] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[2] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[2] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[3] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[4] += 1\n\nfor i in range(5):\n    print(count[i])\n", "\n#CODE\nr, c = map(int, input().split())\nmatrix = []\n\nfor i in range(r):\n    matrix.append(list(input()))\ncount = [0, 0, 0, 0, 0]\nfor i in range(r-1):\n    for j in range(c-1):\n        if matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[0] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[1] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[1] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[1] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[1] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[2] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[2] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[2] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[2] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[2] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[2] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[3] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[4] += 1\nfor i in range(5):\n    print(count[i])\n", "\n# parking\nr, c = map(int, input().split())\nparking = [input() for _ in range(r)]\n\nsquash = [0, 0, 0, 0, 0]\nfor i in range(r-1):\n    for j in range(c-1):\n        if parking[i][j] == \"#\":\n            continue\n        elif parking[i][j] == \".\":\n            if parking[i+1][j] == \"X\" and parking[i][j+1] == \"X\" and parking[i+1][j+1] == \"X\":\n                squash[4] += 1\n            elif parking[i+1][j] == \"X\" and parking[i][j+1] == \"X\":\n                squash[3] += 1\n            elif parking[i+1][j] == \"X\" and parking[i+1][j+1] == \"X\":\n                squash[3] += 1\n            elif parking[i][j+1] == \"X\" and parking[i+1][j+1] == \"X\":\n                squash[3] += 1\n            elif parking[i+1][j] == \"X\":\n                squash[2] += 1\n            elif parking[i][j+1] == \"X\":\n                squash[2] += 1\n            elif parking[i+1][j+1] == \"X\":\n                squash[2] += 1\n            else:\n                squash[0] += 1\n        else:\n            squash[1] += 1\n\nprint(squash[0])\nprint(squash[1])\nprint(squash[2])\nprint(squash[3])\nprint(squash[4])\n", "\n\ndef main():\n    r, c = map(int, input().split())\n    l = []\n    for i in range(r):\n        l.append(input())\n    d = {0: 0, 1: 0, 2: 0, 3: 0, 4: 0}\n    for i in range(r - 1):\n        for j in range(c - 1):\n            if l[i][j] == '.' and l[i][j + 1] == '.' and l[i + 1][j] == '.' and l[i + 1][j + 1] == '.':\n                d[0] += 1\n            elif l[i][j] == 'X' and l[i][j + 1] == '.' and l[i + 1][j] == '.' and l[i + 1][j + 1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j + 1] == 'X' and l[i + 1][j] == '.' and l[i + 1][j + 1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j + 1] == '.' and l[i + 1][j] == 'X' and l[i + 1][j + 1] == '.':\n                d[1] += 1\n            elif l[i][j] == '.' and l[i][j + 1] == '.' and l[i + 1][j] == '.' and l[i + 1][j + 1] == 'X':\n                d[1] += 1\n            elif l[i][j] == 'X' and l[i][j + 1] == 'X' and l[i + 1][j] == '.' and l[i + 1][j + 1] == '.':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j + 1] == '.' and l[i + 1][j] == 'X' and l[i + 1][j + 1] == '.':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j + 1] == '.' and l[i + 1][j] == '.' and l[i + 1][j + 1] == 'X':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j + 1] == 'X' and l[i + 1][j] == 'X' and l[i + 1][j + 1] == '.':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j + 1] == 'X' and l[i + 1][j] == '.' and l[i + 1][j + 1] == 'X':\n                d[2] += 1\n            elif l[i][j] == '.' and l[i][j + 1] == '.' and l[i + 1][j] == 'X' and l[i + 1][j + 1] == 'X':\n                d[2] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == '.':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == '.' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == '.' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == '.' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[3] += 1\n            elif l[i][j] == 'X' and l[i][j+1] == 'X' and l[i+1][j] == 'X' and l[i+1][j+1] == 'X':\n                d[4] += 1\n    for i in range(5):\n        print(d[i])\nmain()\n", "\nimport sys\n\ndef main():\n    R, C = map(int, sys.stdin.readline().split())\n    parking_map = []\n    for i in range(R):\n        parking_map.append(sys.stdin.readline().strip())\n    parking_spaces = [0, 0, 0, 0, 0]  # 0, 1, 2, 3, 4\n    for i in range(R-1):\n        for j in range(C-1):\n            if parking_map[i][j] == '.':\n                if parking_map[i][j+1] == '.' and parking_map[i+1][j] == '.' and parking_map[i+1][j+1] == '.':\n                    parking_spaces[0] += 1\n                    if parking_map[i][j+2] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j+1] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+1][j+2] == 'X':\n                        parking_spaces[1] += 1\n                    if parking_map[i+2][j+2] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+3][j+1] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+1][j+3] == 'X':\n                        parking_spaces[2] += 1\n                    if parking_map[i+3][j+2] == 'X':\n                        parking_spaces[3] += 1\n                    if parking_map[i+2][j+3] == 'X':\n                        parking_spaces[3] += 1\n                    if parking_map[i+3][j+3] == 'X':\n                        parking_spaces[4] += 1\n    for i in range(5):\n        print(parking_spaces[i])\n\nif __name__ == '__main__':\n    main()\n", "\n\n#CODE:\n\nr, c = map(int, raw_input().split())\n\nmatrix = []\n\nfor i in range(r):\n    matrix.append(list(raw_input()))\n\ncount = [0, 0, 0, 0, 0]\n\nfor i in range(r-1):\n    for j in range(c-1):\n        if matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[0] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[1] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[1] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[1] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[1] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == '.':\n            count[2] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[2] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[2] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[2] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[2] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[2] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == '.':\n            count[3] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == '.' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == '.' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == '.' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[3] += 1\n        elif matrix[i][j] == 'X' and matrix[i][j+1] == 'X' and matrix[i+1][j] == 'X' and matrix[i+1][j+1] == 'X':\n            count[4] += 1\n\nfor i in range(5):\n    print(count[i])\n"]