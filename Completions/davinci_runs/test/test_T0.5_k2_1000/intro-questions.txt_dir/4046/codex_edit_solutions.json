["\n\nimport sys\n\ndef get_input():\n    n = int(input())\n    p = [int(x) for x in input().split()]\n    return n, p\n\ndef check_permutation(n, p):\n    if len(p) != n - 1:\n        return False\n    if n == 1:\n        return True\n    for i in p:\n        if abs(i) >= n:\n            return False\n    return True\n\ndef create_permutation(n, p):\n    if n == 1:\n        return [1]\n    q = [0] * n\n    q[0] = 1\n    q[1] = 1 + p[0]\n    for i in range(2, n):\n        q[i] = q[i-1] + p[i-1]\n    return q\n\ndef print_permutation(p):\n    print(\" \".join([str(x) for x in p]))\n\ndef main():\n    n, p = get_input()\n    if not check_permutation(n, p):\n        print(-1)\n        return\n    q = create_permutation(n, p)\n    print_permutation(q)\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef get_input():\n    n = int(input())\n    q = [int(x) for x in input().split()[:n-1]]\n    return n, q\n\ndef check_permutation(n, q):\n    if len(q) != n - 1:\n        return False\n    if n == 1:\n        return True\n    for i in q:\n        if abs(i) >= n:\n            return False\n    return True\n\ndef create_permutation(n, q):\n    if n == 1:\n        return [1]\n    p = [0] * n\n    p[0] = q[0]\n    p[1] = q[0] + q[1]\n    for i in range(2, n):\n        p[i] = p[i-1] + q[i-1]\n    return p\n\ndef print_permutation(p):\n    print(\" \".join([str(x) for x in p]))\n\ndef main():\n    n, q = get_input()\n    if not check_permutation(n, q):\n        print(-1)\n        return\n    p = create_permutation(n, q)\n    print_permutation(p)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef get_input():\n    n = int(sys.stdin.readline())\n    p = [int(x) for x in sys.stdin.readline().split()]\n    return n, p\n\ndef check_permutation(n, p):\n    if len(p) != n - 1:\n        return False\n    if n == 1:\n        return True\n    for i in p:\n        if abs(i) >= n:\n            return False\n    return True\n\ndef create_permutation(n, p):\n    if n == 1:\n        return [1]\n    q = [0] * n\n    q[0] = p[0]\n    q[1] = p[0] + p[1]\n    for i in range(2, n):\n        q[i] = q[i-1] + p[i-1]\n    return q\n\ndef print_permutation(p):\n    sys.stdout.write(\" \".join([str(x) for x in p]))\n\ndef main():\n    n, p = get_input()\n    if not check_permutation(n, p):\n        sys.stdout.write(-1)\n        return\n    q = create_permutation(n, p)\n    print_permutation(q)\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef get_input():\n    n = int(input())\n    q = [int(x) for x in input().split()][:n-1]\n    return n, q\n\ndef check_permutation(n, q):\n    if n == 1:\n        return True\n    for i in q:\n        if abs(i) >= n:\n            return False\n    return True\n\ndef create_permutation(n, q):\n    if n == 1:\n        return [1]\n    p = [0] * n\n    p[0] = q[0]\n    p[1] = q[0] + q[1]\n    for i in range(2, n):\n        p[i] = p[i-1] + q[i-1]\n    return p\n\ndef print_permutation(p):\n    print(\" \".join([str(x) for x in p]))\n\ndef main():\n    n, q = get_input()\n    if not check_permutation(n, q):\n        print(-1)\n        return\n    p = create_permutation(n, q)\n    print_permutation(p)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef solve(n, q):\n    p = [1]\n    for i in range(n - 1):\n        if p[-1] + q[i - 1] > 0 and p[-1] + q[i - 1] <= n:\n            p.append(p[-1] + q[i - 1])\n        else:\n            return -1\n    return p\n\n\ndef main():\n    n = int(input())\n    q = list(map(int, input().split()))\n    print(*solve(n, q))\n\n\nif __name__ == \"__main__\":\n    main()\n", "# https://atcoder.jp/contests/abc085/tasks/abc085_c\n\n\ndef solve(n, y):\n    for i in range(n + 1):\n        for j in range(n + 1 - i):\n            k = n - i - j\n            if 10000 * i + 5000 * j + 1000 * k == y:\n                return i, j, k\n    return -1, -1, -1\n\n\ndef main():\n    n = int(input())\n    q = list(map(int, input().split()))\n    print(*solve(n, q))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef solve(n, a):\n    p = [1]\n    for i in range(n - 1):\n        if p[-1] + a[i] > 0 and p[-1] + a[i] <= n:\n            p.append(p[-1] + a[i])\n        else:\n            return -1\n    return p\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(*solve(n, a))\n\n\nif __name__ == \"__main__\":\n    main()\n", "# https://atcoder.jp/contests/abc085/tasks/abc085_c\n\n\ndef solve(n, y):\n    for i in range(n + 1):\n        for j in range(n + 1):\n            k = n - i - j\n            if k < 0:\n                continue\n            if 10000 * i + 5000 * j + 1000 * k == y:\n                return i, j, k\n    return -1, -1, -1\n\n\ndef main():\n    n = int(input())\n    y = int(input())\n    print(*solve(n, y))\n\n\nif __name__ == \"__main__\":\n    main()\n"]