["\n\ndef main():\n    word = input()\n    word_endings = []\n    for _ in range(int(input())):\n        word_endings.append(set(input().split()))\n    for _ in range(int(input())):\n        phrase = input()\n        if any(word.endswith(ending) for ending in word_endings[phrase.count(\" \")]):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    word = input().lower()\n    word_endings = [[] for _ in range(10)]\n    for _ in range(int(input())):\n        word_endings[input().count(\" \")].append(input())\n    for _ in range(int(input())):\n        phrase = input()\n        if any(word.endswith(ending) for ending in word_endings[phrase.count(\" \")]):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nS = input()\nE = int(input())\nendings = []\nfor _ in range(E):\n    endings.append(set(input().split()))\nP = int(input())\nphrases = []\nfor _ in range(P):\n    phrases.append(input())\n\nS = \"drought\"\nE = 2\nendings = []\nendings.append(set(\"aught ought aut acht\".split()))\nendings.append(set(\"ought oubt outte out oute\".split()))\nP = 5\nphrases = []\nphrases.append(\"tasty sprout\")\nphrases.append(\"difficult route\")\nphrases.append(\"worried and fraught\")\nphrases.append(\"forever in doubt\")\nphrases.append(\"apples and pears\")\n\nfor phrase in phrases:\n    words = phrase.split()\n    for word in words:\n        for ending in endings:\n            if word.endswith(tuple(ending)):\n                if words[-1] == word:\n                    print(\"YES\")\n                else:\n                    print(\"NO\")\n", "\n\nendings = [[\"a\", \"e\"], [\"i\", \"y\"], [\"o\", \"u\"]]\nphrases = [[\"a\", \"e\"], [\"a\", \"i\", \"y\"], [\"a\", \"o\", \"u\"], [\"e\", \"i\", \"y\"], [\"e\", \"o\", \"u\"], [\"i\", \"y\", \"e\"], [\"i\", \"y\", \"o\", \"u\"], [\"o\", \"u\", \"e\"], [\"o\", \"u\", \"i\", \"y\"]]\nS = \"a\"\n\ndef check(word):\n    for i in endings:\n        if word.lower() in i:\n            return i\n    return False\n\nfor phrase in phrases:\n    if len(phrase) == 2:\n        if check(phrase[0]) and check(S[-len(phrase[0]):]):\n            if check(phrase[0]) == check(S[-len(phrase[0]):]):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n    else:\n        if check(phrase[0]) and check(phrase[1]) and check(S[-len(phrase[1]):]):\n            if check(phrase[0]) == check(phrase[1]) and check(phrase[1]) == check(S[-len(phrase[1]):]):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n", "\nS = input()\nE = int(input())\nendings = []\nfor _ in range(E):\n    endings.append(set(input().split()))\nP = int(input())\nphrases = []\nfor _ in range(P):\n    phrases.append(input())\n\nfor phrase in phrases:\n    words = phrase.split()\n    for word in words:\n        for ending in endings:\n            if word.endswith(tuple(ending)):\n                if words[-1] == word:\n                    print(\"YES\")\n                else:\n                    print(\"NO\")\n", "\n\ndef main():\n    word = input().lower()\n    word_endings = [[] for _ in range(10)]\n    for _ in range(int(input())):\n        word_endings[input().count(\" \") - 1].append(input().lower())\n    for _ in range(int(input())):\n        phrase = input()\n        if any(word.endswith(ending) for ending in word_endings[phrase.count(\" \") - 1]):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    lines = [line.strip() for line in sys.stdin]\n    word = lines[0]\n    ending_lists = [line.split() for line in lines[2:2 + int(lines[1])]]\n    phrases = lines[4+int(lines[1]):]\n\n    for phrase in phrases:\n        words = phrase.split()\n        if len(words) == 2:\n            if word_ends_with(words[0], ending_lists) and word_ends_with(words[1], ending_lists):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if word_ends_with(words[0], ending_lists) and word_ends_with(words[2], ending_lists) and words[1] == word:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\ndef word_ends_with(word, ending_lists):\n    for endings in ending_lists:\n        if word[-len(endings[0]):] in endings:\n            return True\n    return False\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n#1 (correct)\n\"\"\"\ndef rhyme(word, ending_lists):\n    for ending_list in ending_lists:\n        for ending in ending_list:\n            if word.endswith(ending) or word.endswith(ending.lower()):\n                return True\n    return False\n\ncommon_word = input()\nending_lists = []\nfor i in range(int(input())):\n    ending_lists.append(input().split())\nfor i in range(int(input())):\n    phrase = input().split()\n    if len(phrase) == 2:\n        if rhyme(phrase[0], ending_lists) and rhyme(phrase[1], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if rhyme(phrase[1], ending_lists) and rhyme(phrase[2], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\"\"\"\n\n#2 (wrong)\n\"\"\"\nimport re\n\ndef rhyme(word, ending_lists):\n    for ending_list in ending_lists:\n        for ending in ending_list:\n            if re.search(ending + \"$\", word) or re.search(ending.lower() + \"$\", word):\n                return True\n    return False\n\ncommon_word = input()\nending_lists = []\nfor i in range(int(input())):\n    ending_lists.append(input().split())\nfor i in range(int(input())):\n    phrase = input().split()\n    if len(phrase) == 2:\n        if rhyme(phrase[0], ending_lists) and rhyme(phrase[1], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if rhyme(phrase[1], ending_lists) and rhyme(phrase[2], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\"\"\"\n", "\n\n#1.1\n\ndef rhyme(word, ending_lists):\n    for ending_list in ending_lists:\n        for ending in ending_list:\n            if word.endswith(ending):\n                return True\n    return False\n\ncommon_word = input()\nending_lists = []\nfor i in range(int(input())):\n    ending_lists.append(input().split())\nfor i in range(int(input())):\n    phrase = input().split()\n    if len(phrase) == 2:\n        if rhyme(phrase[0], ending_lists) and rhyme(phrase[1], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if rhyme(phrase[1], ending_lists) and rhyme(phrase[2], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\"\"\"\n\n#1.2\n\"\"\"\nimport re\n\ndef rhyme(word, ending_lists):\n    for ending_list in ending_lists:\n        for ending in ending_list:\n            if re.search(ending + \"$\", word):\n                return True\n    return False\n\ncommon_word = input()\nending_lists = []\nfor i in range(int(input())):\n    ending_lists.append(input().split())\nfor i in range(int(input())):\n    phrase = input().split()\n    if len(phrase) == 2:\n        if rhyme(phrase[0], ending_lists) and rhyme(phrase[1], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if rhyme(phrase[1], ending_lists) and rhyme(phrase[2], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\"\"\"\n", "\n\ndef check(word, endings):\n    if word == \"\":\n        return False\n    for i in endings:\n        if word.lower() in i:\n            return i\n    return False\n\ndef check(word, endings):\n    for i in endings:\n        if word in i:\n            return i\n    return False\n\nfor phrase in phrases:\n    if len(phrase) == 2:\n        if check(phrase[1], endings) and check(S[-len(phrase[1]):], endings):\n            if check(phrase[1], endings) == check(S[-len(phrase[1]):], endings):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n    else:\n        if check(phrase[1], endings) and check(phrase[2], endings) and check(S[-len(phrase[2]):], endings):\n            if check(phrase[1], endings) == check(phrase[2], endings) and check(phrase[2], endings) == check(S[-len(phrase[2]):], endings):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n", "\nimport sys\n\ndef get_input(file=None):\n    if file is None:\n        f = sys.stdin\n    else:\n        f = open(file)\n\n    word = f.readline().strip()\n    num_endings = int(f.readline())  # number of endings, 1 <= num_endings <= 100\n    endings = [set(f.readline().strip().split()) for _ in range(num_endings)]  # endings, 1 <= len(endings) <= 100\n    num_phrases = int(f.readline())\n    phrases = [f.readline().strip() for _ in range(num_phrases)]  # phrases, 1 <= len(phrases) <= 100\n\n    return word, endings, phrases\n\ndef main(file=None):\n    word, endings, phrases = get_input(file)\n\n    for phrase in phrases:\n        last_word = phrase.split()[-1]\n        if any(last_word.endswith(ending) for ending in endings):  # check if last word ends with any of the endings\n            print('YES')\n        else:\n            print('NO')\n\nif __name__ == '__main__':\n    main('rhyming_slang.txt')\n", "\nimport sys\n\ndef get_input(file=None):\n    if file is None:\n        f = sys.stdin\n    else:\n        f = open(file)\n\n    word = f.readline().strip()\n    num_endings = int(f.readline())  # number of endings\n    endings = [f.readline().strip() for _ in range(num_endings)]  # endings\n    num_phrases = int(f.readline())\n    phrases = [f.readline().strip() for _ in range(num_phrases)]  # phrases\n\n    return word, endings, phrases\n\ndef main(file=None):\n    word, endings, phrases = get_input(file)\n\n    for phrase in phrases:\n        last_word = phrase.split()[-1]\n        if any(last_word.endswith(ending) for ending in endings):\n            print('YES')\n        else:\n            print('NO')\n\nif __name__ == '__main__':\n    main('file.txt')\n", "\nimport sys\n\ndef get_input(file=None):\n    if file is None:\n        f = sys.stdin\n    else:\n        f = open(file)\n\n    word = f.readline().strip().lower()\n    num_endings = int(f.readline())\n    endings = [f.readline().strip().lower().split() for _ in range(num_endings)]\n    num_phrases = int(f.readline())\n    phrases = [f.readline().strip().lower() for _ in range(num_phrases)]\n\n    return word, endings, phrases\n\ndef main(file=None):\n    word, endings, phrases = get_input(file)\n\n    for phrase in phrases:\n        last_word = phrase.split()[-1]\n        if any(last_word.endswith(ending) for ending in endings[0]):\n            print('YES')\n        else:\n            print('NO')\n\nif __name__ == '__main__':\n    main('rhyming_slang.txt')\n", "\n\n#1 (correct)\n\"\"\"\ndef rhyme(word, ending_lists):\n    for ending_list in ending_lists:\n        for ending in ending_list:\n            if word.endswith(ending):\n                return True\n    return False\n\ncommon_word = input()\nending_lists = []\nfor i in range(int(input())):\n    ending_lists.append(input().split())\nfor i in range(int(input())):\n    phrase = input().split()\n    if len(phrase) == 2:\n        if rhyme(phrase[0], ending_lists) and rhyme(phrase[1], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if rhyme(phrase[1], ending_lists) and rhyme(phrase[2], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\"\"\"\n\n#2 (wrong)\n\"\"\"\nimport re\n\ndef rhyme(word, ending_lists):\n    for ending_list in ending_lists:\n        for ending in ending_list:\n            if re.search(ending + \"$\", word):\n                return True\n    return False\n\ncommon_word = input()\nending_lists = []\nfor i in range(int(input())):\n    ending_lists.append(input().split())\nfor i in range(int(input())):\n    phrase = input().split()\n    if len(phrase) == 2:\n        if rhyme(phrase[0], ending_lists) and rhyme(phrase[1], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if rhyme(phrase[1], ending_lists) and rhyme(phrase[2], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\"\"\"\n", "\n\ninpFile = open('file.in', 'r')\noutFile = open('file.out', 'w')\nword = inpFile.readline().strip()\nnumOfLists = int(inpFile.readline())\nlistOfLists = []\nfor i in range(numOfLists): listOfLists.append(inpFile.readline().strip().split())\nnumOfPhrases = int(inpFile.readline())\nlistOfPhrases = []\nfor i in range(numOfPhrases): listOfPhrases.append(inpFile.readline().strip().split())\ndef checkFile(word, listOfLists, listOfPhrases):\n  listOfEndings = []\n  for i in range(len(listOfLists)): \n    for j in range(len(listOfLists[i])): \n      if listOfLists[i][j] in word: \n        listOfEndings.append(listOfLists[i][j]) break\n  for i in range(len(listOfPhrases)): \n    for j in range(len(listOfPhrases[i])): \n      for k in range(len(listOfEndings)): \n        if listOfEndings[k] in listOfPhrases[i][j]: \n          outFile.write(\"YES\\n\") return\n  outFile.write(\"NO\\n\") return\ncheckFile(word, listOfLists, listOfPhrases)\n", "\n\n\n\ninpFile=open('file.in','r')\noutFile=open('file.out','w')\n\n\n\ncomet=inpFile.readline().strip()\ngroup=inpFile.readline().strip()\n\n\n", "\nS = input()\nE = int(input())\nendings = []\nfor _ in range(E):\n    endings.append(set(input().split()))\nP = int(input())\nphrases = []\nfor _ in range(P):\n    phrases.append(input())\n\nfor phrase in phrases:\n    if phrase.endswith(tuple(endings)):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "\nfrom sys import stdin\n\nword = stdin.readline().strip()\nendings = []\nfor i in range(int(stdin.readline().strip())):\n    endings.append(stdin.readline().strip().split())\nfor i in range(int(stdin.readline().strip())):\n    phrase = stdin.readline().strip().split()\n    if len(phrase) == 2:\n        if phrase[1] in list(filter(lambda x: word.endswith(x), endings))[0]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if phrase[1] in list(filter(lambda x: word.endswith(x), endings))[0] and phrase[2] in list(filter(lambda x: word.endswith(x), endings))[0]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n", "\nimport sys\nimport re\n\ndef main():\n    lines = [line.strip() for line in sys.stdin]\n    word = lines[0]\n    ending_lists = [line.split() for line in lines[2:2 + int(lines[1])]]\n    phrases = lines[4+int(lines[1]):]\n\n    for phrase in phrases:\n        words = phrase.split()\n        if len(words) == 2:\n            if word_ends_with(words[0], ending_lists) and word_ends_with(words[1], ending_lists):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if word_ends_with(words[0], ending_lists) and word_ends_with(words[2], ending_lists) and words[1] == word:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\ndef word_ends_with(word, ending_lists):\n    for endings in ending_lists:\n        if word[-len(endings[0]):] in endings:\n            return True\n    return False\n\nif __name__ == \"__main__\":\n    main()\n", "\n\"\"\"\nID: neelkolhe\nTASK: file\n\"\"\"\n\n\ninpFile=open('file.in','r')\noutFile=open('file.out','w')\n\n\n\nword=inpFile.readline().strip()\nnumOfLists=int(inpFile.readline())\n\nlistOfLists=[]\n\nfor i in range(numOfLists):\n  listOfLists.append(inpFile.readline().strip().split())\n\nnumOfPhrases=int(inpFile.readline())\n\nlistOfPhrases=[]\n\nfor i in range(numOfPhrases):\n  listOfPhrases.append(inpFile.readline().strip().split())\n\ndef checkFile(word,listOfLists,listOfPhrases):\n  listOfEndings=[]\n  for i in range(len(listOfLists)):\n    for j in range(len(listOfLists[i])):\n      if listOfLists[i][j] in word:\n        listOfEndings.append(listOfLists[i][j])\n        break\n  for i in range(len(listOfPhrases)):\n    for j in range(len(listOfPhrases[i])):\n      for k in range(len(listOfEndings)):\n        if listOfEndings[k] in listOfPhrases[i][j]:\n          outFile.write(\"YES\\n\")\n          return\n  outFile.write(\"NO\\n\")\n  return\n\n\n\ncheckFile(word,listOfLists,listOfPhrases)\n", "\n\nfrom sys import stdin\n\nword = stdin.readline().strip()\nendings = []\nfor i in range(int(stdin.readline().strip())):\n    endings.append(stdin.readline().strip().split())\nfor i in range(int(stdin.readline().strip())):\n    phrase = stdin.readline().strip().split()\n    if len(phrase) == 2:\n        if phrase[1] in endings[endings.index(list(filter(lambda x: word.endswith(x[0]), endings)))][1:]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if phrase[1] in endings[endings.index(list(filter(lambda x: word.endswith(x[0]), endings)))][1:] and phrase[2] in endings[endings.index(list(filter(lambda x: word.endswith(x[0]), endings)))][1:]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n", "\nimport sys\n\ndef get_input(file=None):\n    if file is None:\n        f = sys.stdin\n    else:\n        f = open(file)\n\n    word = f.readline().strip().lower()\n    num_endings = int(f.readline())\n    endings = [f.readline().strip().lower() for _ in range(num_endings)]\n    num_phrases = int(f.readline())\n    phrases = [f.readline().strip().lower() for _ in range(num_phrases)]\n\n    return word, endings, phrases\n\ndef main(file=None):\n    word, endings, phrases = get_input(file)\n\n    for phrase in phrases:\n        last_word = phrase.split()[-1]\n        if any(last_word.endswith(ending) for ending in endings if last_word.endswith(ending)):\n            print('YES')\n        else:\n            print('NO')\n\nif __name__ == '__main__':\n    main('rhyming_slang.txt')\n", "\nfrom sys import stdin\n\nword = stdin.readline().strip()\nendings = []\nfor i in range(int(stdin.readline().strip())):\n    endings.append(stdin.readline().strip().split())\nfor i in range(int(stdin.readline().strip())):\n    phrase = stdin.readline().strip().split()\n    if len(phrase) == 2:\n        if phrase[1] in endings[endings.index(list(filter(lambda x: word.endswith(x), endings)))][1:]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if phrase[1] in endings[endings.index(list(filter(lambda x: word.endswith(x), endings)))][1:] and phrase[2] in endings[endings.index(list(filter(lambda x: word.endswith(x), endings)))][1:]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n", "\n\n# 1.1\n\"\"\"\ndef rhyme(word, ending_lists):\n    for ending_list in ending_lists:\n        for ending in ending_list:\n            if word.endswith(ending):\n                return True\n    return False\n\ncommon_word = input()\nending_lists = []\nfor i in range(int(input())):\n    ending_lists.append(input().split())\nfor i in range(int(input())):\n    phrase = input().split()\n    if len(phrase) == 2:\n        if rhyme(phrase[0], ending_lists) and rhyme(phrase[1], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if rhyme(phrase[1], ending_lists) and rhyme(phrase[2], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\"\"\"\n\n# 1.2\n\"\"\"\nimport re\n\ndef rhyme(word, ending_lists):\n    for ending_list in ending_lists:\n        for ending in ending_list:\n            if re.search(ending + \"$\", word):\n                return True\n    return False\n\ncommon_word = input()\nending_lists = []\nfor i in range(int(input())):\n    ending_lists.append(input().split())\nfor i in range(int(input())):\n    phrase = input().split()\n    if len(phrase) == 2:\n        if rhyme(phrase[0], ending_lists) and rhyme(phrase[1], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if rhyme(phrase[1], ending_lists) and rhyme(phrase[2], ending_lists):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\"\"\"\n", "\n\n\"\"\"\nID: neelkolhe\nTASK: ride\n\"\"\"\n\n\ninpFile=open('ride.in','r')\noutFile=open('ride.out','w')\n\n\n\ncomet=inpFile.readline().strip()\ngroup=inpFile.readline().strip()\n\ndef checkRide(comet,group):\n  cometNum=1\n  groupNum=1\n  for i in range(len(comet)):\n    cometNum=cometNum*(ord(comet[i])-64)\n  for i in range(len(group)):\n    groupNum=groupNum*(ord(group[i])-64)\n  if cometNum%47==groupNum%47:\n    outFile.write(\"GO\\n\") \n  else:\n    outFile.write(\"STAY\\n\")\n\ncheckRide(comet,group)\n"]