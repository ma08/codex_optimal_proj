2022-04-09 20:41:32.015997 """
You are given a weighted tree consisting of $n$ vertices. Recall that a tree is a connected graph without cycles. Vertices $u_i$ and $v_i$ are connected by an edge with weight $w_i$.

You are given $m$ queries. The $i$-th query is given as an integer $q_i$. In this query you need to calculate the number of pairs of vertices $(u, v)$ ($u < v$) such that the maximum weight of an edge on a simple path between $u$ and $v$ doesn't exceed $q_i$.


-----Input-----

The first line of the input contains two integers $n$ and $m$ ($1 \le n, m \le 2 \cdot 10^5$) — the number of vertices in the tree and the number of queries.

Each of the next $n - 1$ lines describes an edge of the tree. Edge $i$ is denoted by three integers $u_i$, $v_i$ and $w_i$ — the labels of vertices it connects ($1 \le u_i, v_i \le n$, $u_i \ne v_i$) and the weight of the edge ($1 \le w_i \le 2 \cdot 10^5$). It is guaranteed that the given edges form a tree.

The last line of the input contains $m$ integers $q_1, q_2, \dots, q_m$ ($1 \le q_i \le 2 \cdot 10^5$), where $q_i$ is the maximum weight of an edge in the $i$-th query.


-----Output-----

Print $m$ integers — the answers to the queries. The $i$-th value should be equal to the number of pairs of vertices $(u, v)$ ($u < v$) such that the maximum weight of an edge on a simple path between $u$ and $v$ doesn't exceed $q_i$.

Queries are numbered from $1$ to $m$ in the order of the input.


-----Examples-----
Input
7 5
1 2 1
3 2 3
2 4 1
4 5 2
5 7 4
3 6 2
5 2 3 4 1

Output
21 7 15 21 3 

Input
1 2
1 2

Output
0 0 

Input
3 3
1 2 1
2 3 2
1 3 2

Output
1 3 3 



-----Note-----

The picture shows the tree from the first example: [Image]
"""
2022-04-09 20:41:32.016030 --------------------------
2022-04-09 20:43:16.247461 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\nimport os\nimport math\nimport collections\nimport heapq\nimport itertools\nimport array\nimport bisect\nimport copy\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\ngosa = 1.0 / 10**10\nmod = 10**9+7\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef pf(s): return print(s, flush=True)\n\nclass UnionFind():\n    def __init__(self, n):\n        self.n = n\n        self.parents = [-1] * n\n\n    def find(self, x):\n        if self.parents[x] < 0:\n            return x\n        else:\n            self.parents[x] = self.find(self.parents[x])\n            return self.parents[x]\n\n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n\n        if x == y:\n            return\n\n        if self.parents[x] > self.parents[y]:\n            x, y = y, x\n\n        self.parents[x] += self.parents[y]\n        self.parents[y] = x\n\n    def size(self, x):\n        return -self.parents[self.find(x)]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def members(self, x):\n        root = self.find(x)\n        return [i for i in range(self.n) if self.find(i) == root]\n\n    def roots(self):\n        return [i for i, x in enumerate(self.parents) if x < 0]\n\n    def group_count(self):\n        return len(self.roots())\n\n    def all_group_members(self):\n        return {r: self.members(r) for r in self.roots()}\n\n    def __str__(self):\n        return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\n\n# def get_graph(n, edges):\n#     graph = [[] for _ in range(n)]\n#     for edge in edges:\n#         graph[edge[0]].append((edge[1], edge[2]))\n#         graph[edge[1]].append((edge[0], edge[2]))\n#     return graph\n\n# def dfs(graph, v, p, d):\n#     for nv, nd in graph[v]:\n#         if nv == p:\n#             continue\n#         d[nv] = max(d[v], nd)\n#         dfs(graph, nv, v, d)\n\ndef main():\n    n, m = LI()\n    edges = []\n    for i in range(n-1):\n        u, v, w = LI()\n        edges.append((u-1, v-1, w))\n    q = LI()\n\n    uf = UnionFind(n)\n    for u, v, w in edges:\n        uf.union(u, v)\n\n    d = [0] * n\n    for u, v, w in edges:\n        if uf.find(u) == uf.find(v):\n            continue\n        d[uf.find(u)] = max(d[uf.find(u)], w)\n        d[uf.find(v)] = max(d[uf.find(v)], w)\n\n    # graph = get_graph(n, edges)\n    # dfs(graph, 0, -1, d)\n    d.sort()\n\n    for qi in q:\n        ans = bisect.bisect_right(d, qi)\n        print(ans, end=' ')\n    print()\n\nmain()"
    },
    {
      "finish_reason": "length",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\nimport math\nimport heapq\nimport random\n\nclass Vertex:\n    def __init__(self, label):\n        self.label = label\n        self.adjacent = []\n        self.parent = None\n        self.size = 1\n        self.max_weight = 0\n        self.max_weight_up = 0\n        self.max_weight_down = 0\n        self.max_weight_up_down = 0\n        self.max_weight_down_up = 0\n        self.max_weight_up_down_up = 0\n        self.max_weight_down_up_down = 0\n        self.max_weight_up_down_up_down = 0\n        self.max_weight_down_up_down_up = 0\n        self.max_weight_up_down_up_down_up = 0\n        self.max_weight_down_up_down_up_down = 0\n        self.max_weight_up_down_up_down_up_down = 0\n        self.max_weight_down_up_down_up_down_up = 0\n        self.max_weight_up_down_up_down_up_down_up = 0\n        self.max_weight_down_up_down_up_down_up_down = 0\n        self.max_weight_up_down_up_down_up_down_up_down = 0\n        self.max_weight_down_up_down_up_down_up_down_up = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down"
    }
  ],
  "created": 1649551292,
  "id": "cmpl-4vFvwKBUcMw8JzAaZrYKEJw9Y72PS",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 20:43:16.247807 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\nimport os\nimport math\nimport collections\nimport heapq\nimport itertools\nimport array\nimport bisect\nimport copy\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\ngosa = 1.0 / 10**10\nmod = 10**9+7\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef pf(s): return print(s, flush=True)\n\nclass UnionFind():\n    def __init__(self, n):\n        self.n = n\n        self.parents = [-1] * n\n\n    def find(self, x):\n        if self.parents[x] < 0:\n            return x\n        else:\n            self.parents[x] = self.find(self.parents[x])\n            return self.parents[x]\n\n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n\n        if x == y:\n            return\n\n        if self.parents[x] > self.parents[y]:\n            x, y = y, x\n\n        self.parents[x] += self.parents[y]\n        self.parents[y] = x\n\n    def size(self, x):\n        return -self.parents[self.find(x)]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def members(self, x):\n        root = self.find(x)\n        return [i for i in range(self.n) if self.find(i) == root]\n\n    def roots(self):\n        return [i for i, x in enumerate(self.parents) if x < 0]\n\n    def group_count(self):\n        return len(self.roots())\n\n    def all_group_members(self):\n        return {r: self.members(r) for r in self.roots()}\n\n    def __str__(self):\n        return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\n\n# def get_graph(n, edges):\n#     graph = [[] for _ in range(n)]\n#     for edge in edges:\n#         graph[edge[0]].append((edge[1], edge[2]))\n#         graph[edge[1]].append((edge[0], edge[2]))\n#     return graph\n\n# def dfs(graph, v, p, d):\n#     for nv, nd in graph[v]:\n#         if nv == p:\n#             continue\n#         d[nv] = max(d[v], nd)\n#         dfs(graph, nv, v, d)\n\ndef main():\n    n, m = LI()\n    edges = []\n    for i in range(n-1):\n        u, v, w = LI()\n        edges.append((u-1, v-1, w))\n    q = LI()\n\n    uf = UnionFind(n)\n    for u, v, w in edges:\n        uf.union(u, v)\n\n    d = [0] * n\n    for u, v, w in edges:\n        if uf.find(u) == uf.find(v):\n            continue\n        d[uf.find(u)] = max(d[uf.find(u)], w)\n        d[uf.find(v)] = max(d[uf.find(v)], w)\n\n    # graph = get_graph(n, edges)\n    # dfs(graph, 0, -1, d)\n    d.sort()\n\n    for qi in q:\n        ans = bisect.bisect_right(d, qi)\n        print(ans, end=' ')\n    print()\n\nmain()"
}
2022-04-09 20:43:16.247865 REASON stop
2022-04-09 20:43:16.287367 1 {
  "finish_reason": "length",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\nimport math\nimport heapq\nimport random\n\nclass Vertex:\n    def __init__(self, label):\n        self.label = label\n        self.adjacent = []\n        self.parent = None\n        self.size = 1\n        self.max_weight = 0\n        self.max_weight_up = 0\n        self.max_weight_down = 0\n        self.max_weight_up_down = 0\n        self.max_weight_down_up = 0\n        self.max_weight_up_down_up = 0\n        self.max_weight_down_up_down = 0\n        self.max_weight_up_down_up_down = 0\n        self.max_weight_down_up_down_up = 0\n        self.max_weight_up_down_up_down_up = 0\n        self.max_weight_down_up_down_up_down = 0\n        self.max_weight_up_down_up_down_up_down = 0\n        self.max_weight_down_up_down_up_down_up = 0\n        self.max_weight_up_down_up_down_up_down_up = 0\n        self.max_weight_down_up_down_up_down_up_down = 0\n        self.max_weight_up_down_up_down_up_down_up_down = 0\n        self.max_weight_down_up_down_up_down_up_down_up = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down = 0\n        self.max_weight_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up_down_up = 0\n        self.max_weight_up_down_up_down_up_down_up_down_up_down"
}
2022-04-09 20:43:16.287624 REASON length
