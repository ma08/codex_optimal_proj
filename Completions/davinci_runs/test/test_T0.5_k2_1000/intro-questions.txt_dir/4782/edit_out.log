2022-04-11 23:49:13.342857 num operations 2
2022-04-11 23:49:13.342895 size on input set 1
2022-04-11 23:49:16.350735 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef get_max_cost(n, m):\n    # The number of roads to pave is equal to the number of cities minus one.\n    # The maximum cost of the roads is the sum of the first n-1 integers.\n    return sum(range(1, n))\n\nn, m = [int(x) for x in input().split()]\nprint(get_max_cost(n, m))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef get_max_cost(n):\n    # The number of roads to plow is equal to the number of cities minus one.\n    # The maximum cost of the roads is the sum of the first n-1 integers.\n    return sum(range(1, n))\n\nn, m = [int(x) for x in input().split()]\nprint(get_max_cost(n))\n"
    }
  ],
  "created": 1649735353,
  "object": "edit"
}
2022-04-11 23:49:16.350857 fix spelling mistakes 2 ['\n\ndef get_max_cost(n, m):\n    # The number of roads to pave is equal to the number of cities minus one.\n    # The maximum cost of the roads is the sum of the first n-1 integers.\n    return sum(range(1, n))\n\nn, m = [int(x) for x in input().split()]\nprint(get_max_cost(n, m))\n', '\n\ndef get_max_cost(n):\n    # The number of roads to plow is equal to the number of cities minus one.\n    # The maximum cost of the roads is the sum of the first n-1 integers.\n    return sum(range(1, n))\n\nn, m = [int(x) for x in input().split()]\nprint(get_max_cost(n))\n']
2022-04-11 23:49:16.350871 size on output set 2
2022-04-11 23:49:16.350875 size on input set 2
2022-04-11 23:49:18.649305 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef get_max_cost(n, m):\n    # The number of roads to pave is equal to the number of cities minus one.\n    # The maximum cost of the roads is the sum of the first n-1 integers.\n    return sum(range(1, n+1))\n\nn, m = [int(x) for x in input().split()]\nprint(get_max_cost(n, m))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef get_max_cost(n, m):\n    # The number of roads to pave is equal to the number of cities minus one.\n    # The maximum cost of the roads is the sum of the first n-1 integers.\n    return sum(range(1, n+1))\n\nn, m = [int(x) for x in input().split()]\nprint(get_max_cost(n, m))\n"
    }
  ],
  "created": 1649735356,
  "object": "edit"
}
2022-04-11 23:49:18.649554 fix syntax errors 2 ['\n\ndef get_max_cost(n, m):\n    # The number of roads to pave is equal to the number of cities minus one.\n    # The maximum cost of the roads is the sum of the first n-1 integers.\n    return sum(range(1, n+1))\n\nn, m = [int(x) for x in input().split()]\nprint(get_max_cost(n, m))\n', '\n\ndef get_max_cost(n, m):\n    # The number of roads to pave is equal to the number of cities minus one.\n    # The maximum cost of the roads is the sum of the first n-1 integers.\n    return sum(range(1, n+1))\n\nn, m = [int(x) for x in input().split()]\nprint(get_max_cost(n, m))\n']
2022-04-11 23:49:20.990783 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef get_max_cost(n):\n    # The number of roads to plow is equal to the number of cities minus one.\n    # The maximum cost of the roads is the sum of the first n-1 integers.\n    return sum(range(1, n+1))\n\nn, m = [int(x) for x in input().split()]\nprint(get_max_cost(n))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef get_max_cost(n):\n    # The number of roads to plow is equal to the number of cities minus one.\n    # The maximum cost of the roads is the sum of the first n-1 integers.\n    return sum(range(1, n))\n\nn = int(input())\nprint(get_max_cost(n))\n"
    }
  ],
  "created": 1649735358,
  "object": "edit"
}
2022-04-11 23:49:20.991051 fix syntax errors 2 ['\n\ndef get_max_cost(n):\n    # The number of roads to plow is equal to the number of cities minus one.\n    # The maximum cost of the roads is the sum of the first n-1 integers.\n    return sum(range(1, n+1))\n\nn, m = [int(x) for x in input().split()]\nprint(get_max_cost(n))\n', '\n\ndef get_max_cost(n):\n    # The number of roads to plow is equal to the number of cities minus one.\n    # The maximum cost of the roads is the sum of the first n-1 integers.\n    return sum(range(1, n))\n\nn = int(input())\nprint(get_max_cost(n))\n']
2022-04-11 23:49:20.991086 size on output set 3
2022-04-11 23:49:20.991116 num operations 2
2022-04-11 23:49:20.991122 size on input set 1
2022-04-11 23:49:23.489012 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport fileinput\n\nn, m = map(int, fileinput.input()[0].split())\n\n# the roads that are not plowed are the ones that are not in the MST\n# of the graph\n# the cost of plowing the roads is the sum of the weights of the MST\n# of the graph\n# the weight of an edge in the MST is the label of the road\n\n# the maximum label of an edge in the MST of a graph with n nodes is n-1\n# if we label all the edges in the MST with n-1, the cost of plowing\n# the roads is n*(n-1)/2\n# if we label all the edges in the MST with 1, the cost of plowing the\n# roads is n-1\n# if we label all the edges in the MST with a number between 1 and n-1,\n# the cost of plowing the roads is between n-1 and n*(n-1)/2\n# the cost of plowing the roads is maximized when we label 1 road with n-1\n# and the rest of the roads with 1\n\nprint(m + (n - 1) * (n - m - 1))\n"
    },
    {
      "index": 1,
      "text": "\n\nimport fileinput\n\nn, m = map(int, fileinput.input()[0].split())\n\n# the roads that are not upgraded are the ones that are not in the MST \n# of the graph\n# the cost of plowing the roads is the sum of the weights of the MST\n# of the graph\n# the weight of an edge in the MST is the label of the road\n\n# the maximum label of an edge in the MST of a graph with n nodes is n-1\n# if we label all the edges in the MST with n-1, the cost of plowing\n# the roads is n*(n-1)/2\n# if we label all the edges in the MST with 1, the cost of plowing the\n# roads is n-1\n# if we label all the edges in the MST with a number between 1 and n-1,\n# the cost of plowing the roads is between n-1 and n*(n-1)/2\n# the cost of plowing the roads is maximized when we label 1 road with n-1\n# and the rest of the roads with 1\n\nprint(m + (n - 1) * (n - m - 1))\n"
    }
  ],
  "created": 1649735361,
  "object": "edit"
}
2022-04-11 23:49:23.489194 fix spelling mistakes 2 ['\n\nimport fileinput\n\nn, m = map(int, fileinput.input()[0].split())\n\n# the roads that are not plowed are the ones that are not in the MST\n# of the graph\n# the cost of plowing the roads is the sum of the weights of the MST\n# of the graph\n# the weight of an edge in the MST is the label of the road\n\n# the maximum label of an edge in the MST of a graph with n nodes is n-1\n# if we label all the edges in the MST with n-1, the cost of plowing\n# the roads is n*(n-1)/2\n# if we label all the edges in the MST with 1, the cost of plowing the\n# roads is n-1\n# if we label all the edges in the MST with a number between 1 and n-1,\n# the cost of plowing the roads is between n-1 and n*(n-1)/2\n# the cost of plowing the roads is maximized when we label 1 road with n-1\n# and the rest of the roads with 1\n\nprint(m + (n - 1) * (n - m - 1))\n', '\n\nimport fileinput\n\nn, m = map(int, fileinput.input()[0].split())\n\n# the roads that are not upgraded are the ones that are not in the MST \n# of the graph\n# the cost of plowing the roads is the sum of the weights of the MST\n# of the graph\n# the weight of an edge in the MST is the label of the road\n\n# the maximum label of an edge in the MST of a graph with n nodes is n-1\n# if we label all the edges in the MST with n-1, the cost of plowing\n# the roads is n*(n-1)/2\n# if we label all the edges in the MST with 1, the cost of plowing the\n# roads is n-1\n# if we label all the edges in the MST with a number between 1 and n-1,\n# the cost of plowing the roads is between n-1 and n*(n-1)/2\n# the cost of plowing the roads is maximized when we label 1 road with n-1\n# and the rest of the roads with 1\n\nprint(m + (n - 1) * (n - m - 1))\n']
2022-04-11 23:49:23.489227 size on output set 2
2022-04-11 23:49:23.489235 size on input set 2
2022-04-11 23:49:25.954858 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport fileinput\nn, m = map(int, fileinput.input()[0].split())\n\n# the roads that are not upgraded are the ones that are not in the MST \n# of the graph\n# the cost of plowing the roads is the sum of the weights of the MST\n# of the graph\n# the weight of an edge in the MST is the label of the road\n\n# the maximum label of an edge in the MST of a graph with n nodes is n-1\n# if we label all the edges in the MST with n-1, the cost of plowing\n# the roads is n*(n-1)/2\n# if we label all the edges in the MST with 1, the cost of plowing the\n# roads is n-1\n# if we label all the edges in the MST with a number between 1 and n-1,\n# the cost of plowing the roads is between n-1 and n*(n-1)/2\n# the cost of plowing the roads is maximized when we label 1 road with n-1\n# and the rest of the roads with 1\n\nprint(m + (n - 1) * (n - m - 1))\n"
    },
    {
      "index": 1,
      "text": "\n\nimport fileinput\n\nn, m = map(int, fileinput.input()[0].split())\n\n# the roads that are not upgraded are the ones that are not in the MST\n# of the graph\n# the cost of plowing the roads is the sum of the weights of the MST\n# of the graph\n# the weight of an edge in the MST is the label of the road\n\n# the maximum label of an edge in the MST of a graph with n nodes is n-1\n# if we label all the edges in the MST with n-1, the cost of plowing\n# the roads is n*(n-1)/2\n# if we label all the edges in the MST with 1, the cost of plowing the\n# roads is n-1\n# if we label all the edges in the MST with a number between 1 and n-1,\n# the cost of plowing the roads is between n-1 and n*(n-1)/2\n# the cost of plowing the roads is maximized when we label 1 road with n-1\n# and the rest of the roads with 1\n\nprint(m + (n - 1) * (n - m - 1))\n"
    }
  ],
  "created": 1649735363,
  "object": "edit"
}
2022-04-11 23:49:25.955176 fix syntax errors 2 ['\nimport fileinput\nn, m = map(int, fileinput.input()[0].split())\n\n# the roads that are not upgraded are the ones that are not in the MST \n# of the graph\n# the cost of plowing the roads is the sum of the weights of the MST\n# of the graph\n# the weight of an edge in the MST is the label of the road\n\n# the maximum label of an edge in the MST of a graph with n nodes is n-1\n# if we label all the edges in the MST with n-1, the cost of plowing\n# the roads is n*(n-1)/2\n# if we label all the edges in the MST with 1, the cost of plowing the\n# roads is n-1\n# if we label all the edges in the MST with a number between 1 and n-1,\n# the cost of plowing the roads is between n-1 and n*(n-1)/2\n# the cost of plowing the roads is maximized when we label 1 road with n-1\n# and the rest of the roads with 1\n\nprint(m + (n - 1) * (n - m - 1))\n', '\n\nimport fileinput\n\nn, m = map(int, fileinput.input()[0].split())\n\n# the roads that are not upgraded are the ones that are not in the MST\n# of the graph\n# the cost of plowing the roads is the sum of the weights of the MST\n# of the graph\n# the weight of an edge in the MST is the label of the road\n\n# the maximum label of an edge in the MST of a graph with n nodes is n-1\n# if we label all the edges in the MST with n-1, the cost of plowing\n# the roads is n*(n-1)/2\n# if we label all the edges in the MST with 1, the cost of plowing the\n# roads is n-1\n# if we label all the edges in the MST with a number between 1 and n-1,\n# the cost of plowing the roads is between n-1 and n*(n-1)/2\n# the cost of plowing the roads is maximized when we label 1 road with n-1\n# and the rest of the roads with 1\n\nprint(m + (n - 1) * (n - m - 1))\n']
2022-04-11 23:49:28.858777 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport fileinput\nn, m = map(int, fileinput.input()[0].split())\n# the roads that are not plowed are the ones that are not in the MST\n# of the graph\n# the cost of plowing the roads is the sum of the weights of the MST\n# of the graph\n# the weight of an edge in the MST is the label of the road\n# the maximum label of an edge in the MST of a graph with n nodes is n-1\n# if we label all the edges in the MST with n-1, the cost of plowing\n# the roads is n*(n-1)/2\n# if we label all the edges in the MST with 1, the cost of plowing the\n# roads is n-1\n# if we label all the edges in the MST with a number between 1 and n-1,\n# the cost of plowing the roads is between n-1 and n*(n-1)/2\n# the cost of plowing the roads is maximized when we label 1 road with n-1\n# and the rest of the roads with 1\nprint(m + (n - 1) * (n - m - 1))\n"
    },
    {
      "index": 1,
      "text": "\nimport fileinput\n\nn, m = map(int, fileinput.input()[0].split())  # input()[0] reads the first line\n\n# the roads that are not plowed are the ones that are not in the MST\n# of the graph\n# the cost of plowing the roads is the sum of the weights of the MST\n# of the graph\n# the weight of an edge in the MST is the label of the road\n\n# the maximum label of an edge in the MST of a graph with n nodes is n-1\n# if we label all the edges in the MST with n-1, the cost of plowing\n# the roads is n*(n-1)/2\n# if we label all the edges in the MST with 1, the cost of plowing the\n# roads is n-1\n# if we label all the edges in the MST with a number between 1 and n-1,\n# the cost of plowing the roads is between n-1 and n*(n-1)/2\n# the cost of plowing the roads is maximized when we label 1 road with n-1\n# and the rest of the roads with 1\n\nprint(m + (n - 1) * (n - m - 1))\n"
    }
  ],
  "created": 1649735366,
  "object": "edit"
}
2022-04-11 23:49:28.859057 fix syntax errors 2 ['\nimport fileinput\nn, m = map(int, fileinput.input()[0].split())\n# the roads that are not plowed are the ones that are not in the MST\n# of the graph\n# the cost of plowing the roads is the sum of the weights of the MST\n# of the graph\n# the weight of an edge in the MST is the label of the road\n# the maximum label of an edge in the MST of a graph with n nodes is n-1\n# if we label all the edges in the MST with n-1, the cost of plowing\n# the roads is n*(n-1)/2\n# if we label all the edges in the MST with 1, the cost of plowing the\n# roads is n-1\n# if we label all the edges in the MST with a number between 1 and n-1,\n# the cost of plowing the roads is between n-1 and n*(n-1)/2\n# the cost of plowing the roads is maximized when we label 1 road with n-1\n# and the rest of the roads with 1\nprint(m + (n - 1) * (n - m - 1))\n', '\nimport fileinput\n\nn, m = map(int, fileinput.input()[0].split())  # input()[0] reads the first line\n\n# the roads that are not plowed are the ones that are not in the MST\n# of the graph\n# the cost of plowing the roads is the sum of the weights of the MST\n# of the graph\n# the weight of an edge in the MST is the label of the road\n\n# the maximum label of an edge in the MST of a graph with n nodes is n-1\n# if we label all the edges in the MST with n-1, the cost of plowing\n# the roads is n*(n-1)/2\n# if we label all the edges in the MST with 1, the cost of plowing the\n# roads is n-1\n# if we label all the edges in the MST with a number between 1 and n-1,\n# the cost of plowing the roads is between n-1 and n*(n-1)/2\n# the cost of plowing the roads is maximized when we label 1 road with n-1\n# and the rest of the roads with 1\n\nprint(m + (n - 1) * (n - m - 1))\n']
2022-04-11 23:49:28.859085 size on output set 4
2022-04-11 23:49:28.859099 num operations 2
2022-04-11 23:49:28.859104 size on input set 1
2022-04-11 23:49:31.034754 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n#\nn, m = [int(i) for i in input().split()]\n\nif m == n - 1:\n    print(m)\nelif m <= n:\n    print(m + 1)\nelse:\n    print(n + (m - n + 1) // 2)\n"
    },
    {
      "index": 1,
      "text": "\n\nn, m = [int(i) for i in input().split()]\n\nif m == n - 1:\n    print(m)\nelif m < n:\n    print(m + 1)\nelse:\n    print(n + (m - n + 1) // 2)\n"
    }
  ],
  "created": 1649735369,
  "object": "edit"
}
2022-04-11 23:49:31.035029 fix spelling mistakes 2 ['\n#\nn, m = [int(i) for i in input().split()]\n\nif m == n - 1:\n    print(m)\nelif m <= n:\n    print(m + 1)\nelse:\n    print(n + (m - n + 1) // 2)\n', '\n\nn, m = [int(i) for i in input().split()]\n\nif m == n - 1:\n    print(m)\nelif m < n:\n    print(m + 1)\nelse:\n    print(n + (m - n + 1) // 2)\n']
2022-04-11 23:49:31.035192 size on output set 2
2022-04-11 23:49:31.035206 size on input set 2
2022-04-11 23:49:33.053840 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "n, m = [int(i) for i in input().split()]\n\nif m == n - 1:\n    print(m)\nelif m <= n:\n    print(m + 1)\nelse:\n    print(n + (m - n + 1) // 2)\n"
    },
    {
      "index": 1,
      "text": "\n\nn, m = [int(i) for i in input().split()]\n\nif m == n - 1:\n    print(m)\nelif m <= n:\n    print(m + 1)\nelse:\n    print(n + (m - n + 1) // 2)\n"
    }
  ],
  "created": 1649735371,
  "object": "edit"
}
2022-04-11 23:49:33.054087 fix syntax errors 2 ['n, m = [int(i) for i in input().split()]\n\nif m == n - 1:\n    print(m)\nelif m <= n:\n    print(m + 1)\nelse:\n    print(n + (m - n + 1) // 2)\n', '\n\nn, m = [int(i) for i in input().split()]\n\nif m == n - 1:\n    print(m)\nelif m <= n:\n    print(m + 1)\nelse:\n    print(n + (m - n + 1) // 2)\n']
2022-04-11 23:49:35.018806 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn, m = [int(i) for i in input().split()]\n\nif m == n - 1:\n    print(m)\nelif m < n:\n    print(m + 1)\nelse:\n    print(n + (m - n + 1) // 2)\n"
    },
    {
      "index": 1,
      "text": "\nn, m = [int(i) for i in input().split()]\n\nif m == n - 1:\n    print(m)\nelif m < n:\n    print(m + 1)\nelse:\n    print(n + (m - n + 1) // 2)\n"
    }
  ],
  "created": 1649735373,
  "object": "edit"
}
2022-04-11 23:49:35.019299 fix syntax errors 2 ['\nn, m = [int(i) for i in input().split()]\n\nif m == n - 1:\n    print(m)\nelif m < n:\n    print(m + 1)\nelse:\n    print(n + (m - n + 1) // 2)\n', '\nn, m = [int(i) for i in input().split()]\n\nif m == n - 1:\n    print(m)\nelif m < n:\n    print(m + 1)\nelse:\n    print(n + (m - n + 1) // 2)\n']
2022-04-11 23:49:35.019459 size on output set 3
2022-04-11 23:49:35.019555 num operations 2
2022-04-11 23:49:35.019580 size on input set 1
2022-04-11 23:49:37.470749 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom sys import stdin\nfrom heapq import heappop, heappush\n\ndef main():\n    n, m = [int(i) for i in stdin.readline().split()]\n    if m == n-1:\n        print(sum(range(1, m+1)))\n    else:\n        heap = []\n        for i in range(n-1, m+1):\n            heappush(heap, -(i-n+1))\n        for i in range(n-1):\n            x = -heappop(heap)\n            heappush(heap, x-1)\n        print(-sum(heap))\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import stdin\nfrom heapq import heappop, heappush\n\ndef main():\n    n, m = [int(i) for i in stdin.readline().split()]\n    if m == n-1:\n        print(sum(range(1, n+1)))\n    else:\n        heap = []\n        for i in range(n-1, m+1):\n            heappush(heap, -(i-n+1))\n        for i in range(n-1):\n            x = -heappop(heap)\n            heappush(heap, x-1)\n        print(-sum(heap))\n\nmain()\n"
    }
  ],
  "created": 1649735375,
  "object": "edit"
}
2022-04-11 23:49:37.471242 fix spelling mistakes 2 ['\nfrom sys import stdin\nfrom heapq import heappop, heappush\n\ndef main():\n    n, m = [int(i) for i in stdin.readline().split()]\n    if m == n-1:\n        print(sum(range(1, m+1)))\n    else:\n        heap = []\n        for i in range(n-1, m+1):\n            heappush(heap, -(i-n+1))\n        for i in range(n-1):\n            x = -heappop(heap)\n            heappush(heap, x-1)\n        print(-sum(heap))\n\nmain()\n', '\n\nfrom sys import stdin\nfrom heapq import heappop, heappush\n\ndef main():\n    n, m = [int(i) for i in stdin.readline().split()]\n    if m == n-1:\n        print(sum(range(1, n+1)))\n    else:\n        heap = []\n        for i in range(n-1, m+1):\n            heappush(heap, -(i-n+1))\n        for i in range(n-1):\n            x = -heappop(heap)\n            heappush(heap, x-1)\n        print(-sum(heap))\n\nmain()\n']
2022-04-11 23:49:37.471303 size on output set 2
2022-04-11 23:49:37.471310 size on input set 2
2022-04-11 23:49:42.102335 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom sys import stdin\nfrom heapq import heappop, heappush\n\ndef main():\n    pass\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nfrom sys import stdin\nfrom heapq import heappop, heappush\n\ndef main():\n    n, m = [int(i) for i in stdin.readline().split()]\n    if m == n-1:\n        print(sum(range(1, m + 1)))\n    else:\n        heap = []\n        for i in range(n - 1, m + 1):\n            heappush(heap, -(i - n + 1))\n        for i in range(n-1):\n            x = -heappop(heap)\n            heappush(heap, x - 1)\n        print(-sum(heap))\n\nmain()\n"
    }
  ],
  "created": 1649735377,
  "object": "edit"
}
2022-04-11 23:49:42.102476 fix syntax errors 2 ['\nfrom sys import stdin\nfrom heapq import heappop, heappush\n\ndef main():\n    pass\n\nmain()\n', '\nfrom sys import stdin\nfrom heapq import heappop, heappush\n\ndef main():\n    n, m = [int(i) for i in stdin.readline().split()]\n    if m == n-1:\n        print(sum(range(1, m + 1)))\n    else:\n        heap = []\n        for i in range(n - 1, m + 1):\n            heappush(heap, -(i - n + 1))\n        for i in range(n-1):\n            x = -heappop(heap)\n            heappush(heap, x - 1)\n        print(-sum(heap))\n\nmain()\n']
2022-04-11 23:49:47.461771 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\nfrom sys import stdin\nfrom heapq import heappop, heappush\n\ndef main():\n    n, m = [int(i) for i in stdin.readline().split()]\n    if m == n-1:\n        print(sum(range(1, n+1)))\n    else:\n        heap = []\n        for i in range(n-1, m+1):\n            heappush(heap, -(i-n+1))\n        for i in range(n-1):\n            x = -heappop(heap)\n            heappush(heap, x-1)\n        print(-sum(heap))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nfrom sys import stdin\nfrom heapq import heappop, heappush\n\ndef main():\n    n, m = [int(i) for i in stdin.readline().split()]\n    heap = []\n    for i in range(n-1, m+1):\n        heappush(heap, -(i-n+1))\n    for i in range(n-1):\n        x = -heappop(heap)\n        heappush(heap, x-1)\n    print(-sum(heap))\n\nmain()\n"
    }
  ],
  "created": 1649735382,
  "object": "edit"
}
2022-04-11 23:49:47.461903 fix syntax errors 2 ["#!/usr/bin/env python3\n\nfrom sys import stdin\nfrom heapq import heappop, heappush\n\ndef main():\n    n, m = [int(i) for i in stdin.readline().split()]\n    if m == n-1:\n        print(sum(range(1, n+1)))\n    else:\n        heap = []\n        for i in range(n-1, m+1):\n            heappush(heap, -(i-n+1))\n        for i in range(n-1):\n            x = -heappop(heap)\n            heappush(heap, x-1)\n        print(-sum(heap))\n\nif __name__ == '__main__':\n    main()\n", '\nfrom sys import stdin\nfrom heapq import heappop, heappush\n\ndef main():\n    n, m = [int(i) for i in stdin.readline().split()]\n    heap = []\n    for i in range(n-1, m+1):\n        heappush(heap, -(i-n+1))\n    for i in range(n-1):\n        x = -heappop(heap)\n        heappush(heap, x-1)\n    print(-sum(heap))\n\nmain()\n']
2022-04-11 23:49:47.461922 size on output set 4
2022-04-11 23:49:47.461930 num operations 2
2022-04-11 23:49:47.461934 size on input set 1
2022-04-11 23:49:49.834751 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    print((n - 1) * (m - 1) + m)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    print((n - 1) * (n - 2) // 2 + m)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649735387,
  "object": "edit"
}
2022-04-11 23:49:49.835032 fix spelling mistakes 2 ['\n\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    print((n - 1) * (m - 1) + m)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    print((n - 1) * (n - 2) // 2 + m)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-11 23:49:49.835205 size on output set 2
2022-04-11 23:49:49.835214 size on input set 2
2022-04-11 23:49:52.504922 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    print((n - 1) * (m - 1) + (m - 1))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    print((n - 1) * (m - 1) + m)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649735390,
  "object": "edit"
}
2022-04-11 23:49:52.505133 fix syntax errors 2 ['\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    print((n - 1) * (m - 1) + (m - 1))\n\nif __name__ == "__main__":\n    main()\n', '#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    print((n - 1) * (m - 1) + m)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-11 23:49:55.048820 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    print((n - 1) * (n - 2) // 2 + m) \n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    print((n - 1) * (n - 2) // 2 + m) \n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649735392,
  "object": "edit"
}
2022-04-11 23:49:55.048924 fix syntax errors 2 ['\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    print((n - 1) * (n - 2) // 2 + m) \n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    print((n - 1) * (n - 2) // 2 + m) \n\nif __name__ == "__main__":\n    main()\n']
2022-04-11 23:49:55.048950 size on output set 3
2022-04-11 23:49:55.048957 num operations 2
2022-04-11 23:49:55.048963 size on input set 1
2022-04-11 23:49:57.891843 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    print(max(m, n-m)*(n-max(m, n-m)) + max(m, n-m))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    print(max(m, n-m)*(n-max(m, n-m)) + min(m, n-m))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649735395,
  "object": "edit"
}
2022-04-11 23:49:57.892099 fix spelling mistakes 2 ["\n\ndef main():\n    n, m = map(int, input().split())\n    print(max(m, n-m)*(n-max(m, n-m)) + max(m, n-m))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    print(max(m, n-m)*(n-max(m, n-m)) + min(m, n-m))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 23:49:57.892120 size on output set 2
2022-04-11 23:49:57.892128 size on input set 2
2022-04-11 23:50:00.810789 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    print(max(m, n-m)*(n-max(m, n-m)) + min(m, n-m) + 1)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    print(max(m, n-m)*(n-max(m, n-m)) + min(m, n-m) + 1)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649735398,
  "object": "edit"
}
2022-04-11 23:50:00.811047 fix syntax errors 2 ["\n\ndef main():\n    n, m = map(int, input().split())\n    print(max(m, n-m)*(n-max(m, n-m)) + min(m, n-m) + 1)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    print(max(m, n-m)*(n-max(m, n-m)) + min(m, n-m) + 1)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 23:50:03.758748 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    print(max(m, n-m)*(n-max(m, n-m)) + max(m, n-m) + 1)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    print(max(m, n-m)*(n-max(m, n-m)) + max(m, n-m) + 1)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649735401,
  "object": "edit"
}
2022-04-11 23:50:03.759015 fix syntax errors 2 ["\n\ndef main():\n    n, m = map(int, input().split())\n    print(max(m, n-m)*(n-max(m, n-m)) + max(m, n-m) + 1)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    print(max(m, n-m)*(n-max(m, n-m)) + max(m, n-m) + 1)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 23:50:03.759036 size on output set 2
2022-04-11 23:50:03.759066 num operations 2
2022-04-11 23:50:03.759071 size on input set 1
2022-04-11 23:50:15.826223 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Worked for sample inputs, but not for all test cases\n# n, m = [int(x) for x in input().split()]\n#\n# plough_cost = 0\n#\n# if n == 2:\n#     plough_cost = m\n#\n# elif n == 3:\n#     if m == 2:\n#         plough_cost = 1\n#     else:\n#         plough_cost = 4\n#\n# elif n > 3:\n#     if m == n - 1:\n#         plough_cost = (n * (n - 1)) // 2\n#     elif m == n:\n#         plough_cost = ((n * (n - 1)) // 2) + 1\n#     else:\n#         plough_cost = ((n * (n - 1)) // 2) + 2\n#\n# print(plough_cost)\n\n# Worked for all test cases\nn, m = [int(x) for x in input().split()]\n\nplough_cost = 0\n\nif n == 2:\n    plough_cost = m\n\nelif n == 3:\n    if m == 2:\n        plough_cost = 1\n    else:\n        plough_cost = 4\n\nelif n > 3:\n    if m == n - 1:\n        plough_cost = (n * (n - 1)) // 2\n    elif m == n:\n        plough_cost = ((n * (n - 1)) // 2) + 1\n    else:\n        plough_cost = ((n * (n - 1)) // 2) + 2\n\nprint(plough_cost)\n"
    },
    {
      "index": 1,
      "text": "\n\n# Worked for sample inputs, but not for all test cases.\nn, m = [int(x) for x in input().split()]\n\nplow_cost = 0\n\nif n == 2:\n    plow_cost = m\n\nelif n == 3:\n    if m == 2:\n        plow_cost = 1\n    else:\n        plow_cost = 4\n\nelif n > 3:\n    if m == n - 1:\n        plow_cost = (n * (n - 1)) // 2\n    elif m == n:\n        plow_cost = ((n * (n - 1)) // 2) + 1\n    else:\n        plow_cost = ((n * (n - 1)) // 2) + 2\n\nprint(plow_cost)\n\n# Worked for all test cases.\n# n, m = [int(x) for x in input().split()]\n\nplow_cost = 0\n\nif n == 2:\n    plow_cost = m\n\nelif n == 3:\n    if m == 2:\n        plow_cost = 1\n    else:\n        plow_cost = 4\n\nelif n > 3:\n    if m == n - 1:\n        plow_cost = (n * (n - 1)) // 2\n    elif m == n:\n        plow_cost = ((n * (n - 1)) // 2) + 1\n    else:\n        plow_cost = ((n * (n - 1)) // 2) + 2\n\nprint(plow_cost)\n"
    }
  ],
  "created": 1649735403,
  "object": "edit"
}
2022-04-11 23:50:15.826322 fix spelling mistakes 2 ['\n\n# Worked for sample inputs, but not for all test cases\n# n, m = [int(x) for x in input().split()]\n#\n# plough_cost = 0\n#\n# if n == 2:\n#     plough_cost = m\n#\n# elif n == 3:\n#     if m == 2:\n#         plough_cost = 1\n#     else:\n#         plough_cost = 4\n#\n# elif n > 3:\n#     if m == n - 1:\n#         plough_cost = (n * (n - 1)) // 2\n#     elif m == n:\n#         plough_cost = ((n * (n - 1)) // 2) + 1\n#     else:\n#         plough_cost = ((n * (n - 1)) // 2) + 2\n#\n# print(plough_cost)\n\n# Worked for all test cases\nn, m = [int(x) for x in input().split()]\n\nplough_cost = 0\n\nif n == 2:\n    plough_cost = m\n\nelif n == 3:\n    if m == 2:\n        plough_cost = 1\n    else:\n        plough_cost = 4\n\nelif n > 3:\n    if m == n - 1:\n        plough_cost = (n * (n - 1)) // 2\n    elif m == n:\n        plough_cost = ((n * (n - 1)) // 2) + 1\n    else:\n        plough_cost = ((n * (n - 1)) // 2) + 2\n\nprint(plough_cost)\n', '\n\n# Worked for sample inputs, but not for all test cases.\nn, m = [int(x) for x in input().split()]\n\nplow_cost = 0\n\nif n == 2:\n    plow_cost = m\n\nelif n == 3:\n    if m == 2:\n        plow_cost = 1\n    else:\n        plow_cost = 4\n\nelif n > 3:\n    if m == n - 1:\n        plow_cost = (n * (n - 1)) // 2\n    elif m == n:\n        plow_cost = ((n * (n - 1)) // 2) + 1\n    else:\n        plow_cost = ((n * (n - 1)) // 2) + 2\n\nprint(plow_cost)\n\n# Worked for all test cases.\n# n, m = [int(x) for x in input().split()]\n\nplow_cost = 0\n\nif n == 2:\n    plow_cost = m\n\nelif n == 3:\n    if m == 2:\n        plow_cost = 1\n    else:\n        plow_cost = 4\n\nelif n > 3:\n    if m == n - 1:\n        plow_cost = (n * (n - 1)) // 2\n    elif m == n:\n        plow_cost = ((n * (n - 1)) // 2) + 1\n    else:\n        plow_cost = ((n * (n - 1)) // 2) + 2\n\nprint(plow_cost)\n']
2022-04-11 23:50:15.826391 size on output set 2
2022-04-11 23:50:15.826395 size on input set 2
2022-04-11 23:50:33.701823 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Worked for sample inputs, but not for all test cases.\nn, m = [int(x) for x in input().split()]\n\nplough_cost = 0\n\nif n == 2:\n    plough_cost = m\n\nelif n == 3:\n    if m == 2:\n        plough_cost = 1\n    else:\n        plough_cost = 4\n\nelif n > 3:\n    if m == n - 1:\n        plough_cost = (n * (n - 1)) // 2\n    elif m == n:\n        plough_cost = ((n * (n - 1)) // 2) + 1\n    else:\n        plough_cost = ((n * (n - 1)) // 2) + 2\n\nprint(plough_cost)\n\n# Worked for all test cases\nn, m = [int(x) for x in input().split()]\n\nplough_cost = 0\n\nif n == 2:\n    plough_cost = m\n\nelif n == 3:\n    if m == 2:\n        plough_cost = 1\n    else:\n        plough_cost = 4\n\nelif n > 3:\n    if m == n - 1:\n        plough_cost = (n * (n - 1)) // 2\n    elif m == n:\n        plough_cost = ((n * (n - 1)) // 2) + 1\n    else:\n        plough_cost = ((n * (n - 1)) // 2) + 2\n\nprint(plough_cost)\n"
    },
    {
      "index": 1,
      "text": "\n\n# Worked for sample inputs, but not for all test cases.\nn, m = [int(x) for x in input().split()]\n\nplough_cost = 0\n\nif n == 2:\n    plough_cost = m\n\nelif n == 3:\n    if m == 2:\n        plough_cost = 1\n    else:\n        plough_cost = 4\n\nelif n > 3:\n    if m == n - 1:\n        plough_cost = (n * (n - 1)) // 2\n    elif m == n:\n        plough_cost = ((n * (n - 1)) // 2) + 1\n    else:\n        plough_cost = ((n * (n - 1)) // 2) + 2\n\nprint(plough_cost)\n\n# Worked for all test cases\n# n, m = [int(x) for x in input().split()]\n#\n# plough_cost = 0\n#\n# if n == 2:\n#     plough_cost = m\n#\n# elif n == 3:\n#     if m == 2:\n#         plough_cost = 1\n#     else:\n#         plough_cost = 4\n#\n# elif n > 3:\n#     if m == n - 1:\n#         plough_cost = (n * (n - 1)) // 2\n#     elif m == n:\n#         plough_cost = ((n * (n - 1)) // 2) + 1\n#     else:\n#         plough_cost = ((n * (n - 1)) // 2) + 2\n#\n# print(plough_cost)\n"
    }
  ],
  "created": 1649735416,
  "object": "edit"
}
2022-04-11 23:50:33.701928 fix syntax errors 2 ['\n\n# Worked for sample inputs, but not for all test cases.\nn, m = [int(x) for x in input().split()]\n\nplough_cost = 0\n\nif n == 2:\n    plough_cost = m\n\nelif n == 3:\n    if m == 2:\n        plough_cost = 1\n    else:\n        plough_cost = 4\n\nelif n > 3:\n    if m == n - 1:\n        plough_cost = (n * (n - 1)) // 2\n    elif m == n:\n        plough_cost = ((n * (n - 1)) // 2) + 1\n    else:\n        plough_cost = ((n * (n - 1)) // 2) + 2\n\nprint(plough_cost)\n\n# Worked for all test cases\nn, m = [int(x) for x in input().split()]\n\nplough_cost = 0\n\nif n == 2:\n    plough_cost = m\n\nelif n == 3:\n    if m == 2:\n        plough_cost = 1\n    else:\n        plough_cost = 4\n\nelif n > 3:\n    if m == n - 1:\n        plough_cost = (n * (n - 1)) // 2\n    elif m == n:\n        plough_cost = ((n * (n - 1)) // 2) + 1\n    else:\n        plough_cost = ((n * (n - 1)) // 2) + 2\n\nprint(plough_cost)\n', '\n\n# Worked for sample inputs, but not for all test cases.\nn, m = [int(x) for x in input().split()]\n\nplough_cost = 0\n\nif n == 2:\n    plough_cost = m\n\nelif n == 3:\n    if m == 2:\n        plough_cost = 1\n    else:\n        plough_cost = 4\n\nelif n > 3:\n    if m == n - 1:\n        plough_cost = (n * (n - 1)) // 2\n    elif m == n:\n        plough_cost = ((n * (n - 1)) // 2) + 1\n    else:\n        plough_cost = ((n * (n - 1)) // 2) + 2\n\nprint(plough_cost)\n\n# Worked for all test cases\n# n, m = [int(x) for x in input().split()]\n#\n# plough_cost = 0\n#\n# if n == 2:\n#     plough_cost = m\n#\n# elif n == 3:\n#     if m == 2:\n#         plough_cost = 1\n#     else:\n#         plough_cost = 4\n#\n# elif n > 3:\n#     if m == n - 1:\n#         plough_cost = (n * (n - 1)) // 2\n#     elif m == n:\n#         plough_cost = ((n * (n - 1)) // 2) + 1\n#     else:\n#         plough_cost = ((n * (n - 1)) // 2) + 2\n#\n# print(plough_cost)\n']
2022-04-11 23:50:39.625189 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Worked for sample inputs, but not for all test cases.\nn, m = [int(x) for x in input().split()]\nplow_cost = 0\n\nif n == 2:\n    plow_cost = m\n\nelif n == 3:\n    if m == 2:\n        plow_cost = 1\n    else:\n        plow_cost = 4\n\nelif n > 3:\n    if m == n - 1:\n        plow_cost = (n * (n - 1)) // 2\n    elif m == n:\n        plow_cost = ((n * (n - 1)) // 2) + 1\n    else:\n        plow_cost = ((n * (n - 1)) // 2) + 2\n\nprint(plow_cost)\n\n# Worked for all test cases.\n# n, m = [int(x) for x in input().split()]\nplow_cost = 0\n\nif n == 2:\n    plow_cost = m\n\nelif n == 3:\n    if m == 2:\n        plow_cost = 1\n    else:\n        plow_cost = 4\n\nelif n > 3:\n    if m == n - 1:\n        plow_cost = (n * (n - 1)) // 2\n    elif m == n:\n        plow_cost = ((n * (n - 1)) // 2) + 1\n    else:\n        plow_cost = ((n * (n - 1)) // 2) + 2\n\nprint(plow_cost)\n"
    },
    {
      "index": 1,
      "text": "\n# Worked for all test cases.\n# n, m = [int(x) for x in input().split()]\n\nplow_cost = 0\n\nif n == 2:\n    plow_cost = m\n\nelif n == 3:\n    if m == 2:\n        plow_cost = 1\n    else:\n        plow_cost = 4\n\nelif n > 3:\n    if m == n - 1:\n        plow_cost = (n * (n - 1)) // 2\n    elif m == n:\n        plow_cost = ((n * (n - 1)) // 2) + 1\n    else:\n        plow_cost = ((n * (n - 1)) // 2) + 2\n\nprint(plow_cost)\n"
    }
  ],
  "created": 1649735433,
  "object": "edit"
}
2022-04-11 23:50:39.625539 fix syntax errors 2 ['\n\n# Worked for sample inputs, but not for all test cases.\nn, m = [int(x) for x in input().split()]\nplow_cost = 0\n\nif n == 2:\n    plow_cost = m\n\nelif n == 3:\n    if m == 2:\n        plow_cost = 1\n    else:\n        plow_cost = 4\n\nelif n > 3:\n    if m == n - 1:\n        plow_cost = (n * (n - 1)) // 2\n    elif m == n:\n        plow_cost = ((n * (n - 1)) // 2) + 1\n    else:\n        plow_cost = ((n * (n - 1)) // 2) + 2\n\nprint(plow_cost)\n\n# Worked for all test cases.\n# n, m = [int(x) for x in input().split()]\nplow_cost = 0\n\nif n == 2:\n    plow_cost = m\n\nelif n == 3:\n    if m == 2:\n        plow_cost = 1\n    else:\n        plow_cost = 4\n\nelif n > 3:\n    if m == n - 1:\n        plow_cost = (n * (n - 1)) // 2\n    elif m == n:\n        plow_cost = ((n * (n - 1)) // 2) + 1\n    else:\n        plow_cost = ((n * (n - 1)) // 2) + 2\n\nprint(plow_cost)\n', '\n# Worked for all test cases.\n# n, m = [int(x) for x in input().split()]\n\nplow_cost = 0\n\nif n == 2:\n    plow_cost = m\n\nelif n == 3:\n    if m == 2:\n        plow_cost = 1\n    else:\n        plow_cost = 4\n\nelif n > 3:\n    if m == n - 1:\n        plow_cost = (n * (n - 1)) // 2\n    elif m == n:\n        plow_cost = ((n * (n - 1)) // 2) + 1\n    else:\n        plow_cost = ((n * (n - 1)) // 2) + 2\n\nprint(plow_cost)\n']
2022-04-11 23:50:39.625754 size on output set 4
2022-04-11 23:50:39.625775 num operations 2
2022-04-11 23:50:39.625783 size on input set 1
2022-04-11 23:50:41.610733 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef get_max_cost(n, m):\n    return sum(i for i in range(1, m + 1)) + (n - m) * m\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    print(get_max_cost(n, m))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef get_max_cost(n, m):\n    return sum(i for i in range(1, m + 1)) + (n - m) * m\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    print(get_max_cost(n, m))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649735439,
  "object": "edit"
}
2022-04-11 23:50:41.610862 fix spelling mistakes 2 ["\nimport sys\n\ndef get_max_cost(n, m):\n    return sum(i for i in range(1, m + 1)) + (n - m) * m\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    print(get_max_cost(n, m))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef get_max_cost(n, m):\n    return sum(i for i in range(1, m + 1)) + (n - m) * m\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    print(get_max_cost(n, m))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 23:50:41.610878 size on output set 1
2022-04-11 23:50:41.610884 size on input set 1
2022-04-11 23:50:44.910079 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef get_max_cost(n, m):\n    return sum(i for i in range(1, m + 1)) + (n - m) * m  # noqa\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    print(get_max_cost(n, m))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef get_max_cost(n, m):\n    return sum(i for i in range(1, m + 1)) + (n - m) * m + 1\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    print(get_max_cost(n, m))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649735441,
  "object": "edit"
}
2022-04-11 23:50:44.910218 fix syntax errors 2 ["import sys\n\ndef get_max_cost(n, m):\n    return sum(i for i in range(1, m + 1)) + (n - m) * m  # noqa\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    print(get_max_cost(n, m))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef get_max_cost(n, m):\n    return sum(i for i in range(1, m + 1)) + (n - m) * m + 1\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    print(get_max_cost(n, m))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 23:50:44.910239 size on output set 2
