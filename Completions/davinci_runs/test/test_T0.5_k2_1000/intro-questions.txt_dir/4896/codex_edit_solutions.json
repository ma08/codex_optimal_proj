["import sys\n\ndef main():\n    n = int(input())\n    bricks = list(map(int, input().split()))\n    towers = [bricks[0]]\n\n    for brick in bricks:\n        if brick > towers[-1]:  # if new brick is greater than the last brick in the tower\n            towers.append(brick)\n        else:\n            for i in range(len(towers)):\n                if brick < towers[i]:  # find the first tower that the new brick is smaller than\n                    towers[i] = brick\n                    break\n    print(len(towers))\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(input())\n    bricks = [int(x) for x in input().split()]  # list comprehension\n    towers = 0\n    base = 0\n\n    for brick in bricks:\n        if brick > base:\n            towers += 1\n            base = brick\n\n    print(towers)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    # Read input\n    n = int(sys.stdin.readline())\n    bricks = [int(x) for x in sys.stdin.readline().split()]\n    assert len(bricks) == n\n\n    # Count towers\n    towers = 0\n    for i in range(n):\n        if i == 0 or bricks[i] > bricks[i-1]:\n            towers += 1\n\n    # Print result\n    print(towers)\n\nif __name__ == '__main__':\n    main()\n", "\nN = int(input())\nbricks = list(map(int, input().split()))\n\ntowers = 1\n\nfor i in range(1, N):\n    if bricks[i] > bricks[i-1]:\n        towers += 1\n \nprint(towers)\n", "\n\ndef main():\n    n = int(input())\n    bricks = [int(x) for x in input().split()]\n    towers = 1\n    base = bricks[0]\n    for i in range(1, n):\n        if bricks[i] >= base:\n            towers += 1\n            base = bricks[i]\n    print(towers)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    n = int(input()) # number of test cases\n    for i in range(n):\n        bricks = [int(x) for x in input().split()]\n        towers = []\n        for brick in bricks:\n            if len(towers) == 0:\n                towers.append(brick)\n            else:\n                if brick > towers[-1]:\n                    towers.append(brick)\n        print(len(towers))\n\nmain()\n", "\ndef main():\n    n = int(input()) # number of people\n    people = [int(x) for x in input().split()] # get people\n    groups = [] # list of groups\n    for person in people: # iterate through people\n        if len(groups) == 0: # if no groups\n            groups.append(person) # add first person\n        else: # if there are groups\n            if person > groups[-1]: # if person is bigger than last person in group\n                groups.append(person) # add person to group\n    print(len(groups)) # print number of groups\n\nmain()\n", "\nfrom sys import stdin\n\ndef main():\n    num_bricks = int(stdin.readline())\n    bricks = [int(x) for x in stdin.readline().split()][:num_bricks]\n\n    towers = 1\n    current_height = bricks[0]\n    for brick in bricks[1:]:\n        if brick > current_height:\n            towers += 1\n            current_height = brick\n    print(towers)\n\nif __name__ == '__main__':\n    main()\n", "\n\nN = int(input())\nbricks = list(map(int, input().split()))\ntowers = 1\nfor i in range(1, N):\n    if bricks[i] > bricks[i-1]:\n        towers += 1\nprint(towers)\n", "\nimport sys\n\ndef main():\n    print(\"hello world\")\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    # Read input\n    n = int(input())\n    bricks = [int(x) for x in input().split()]\n    assert len(bricks) == n\n\n    # Count towers\n    towers = 0\n    for i in range(n):\n        if i == 0 or bricks[i] > bricks[i-1]:\n            towers += 1\n\n    # Print result\n    print(towers)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "\nN = int(input())\nbricks = list(map(int, input().split()))\ntowers = 1\n\nfor i in range(1, N):\n    if bricks[i] > bricks[i-1]:\n        towers += 1\n\nprint(towers)\n", "\ndef main():\n    n = int(input())\n    bricks = [int(x) for x in input().split()]\n    towers = 0\n    base = bricks[0]\n    for i in range(1, n):\n        if bricks[i] > base:\n            towers += 1\n            base = bricks[i]\n    towers += 1\n    print(towers)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline()) # number of bricks\n    bricks = [int(x) for x in stdin.readline().split()] # list of heights of the bricks\n\n    towers = 1\n    current_height = bricks[0]\n    for brick in bricks[1:]:\n        if brick > current_height:\n            towers += 1\n            current_height = brick\n    print(towers)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(input())\n    bricks = [int(x) for x in input().split()]\n    towers = 0\n    base = 0\n\n    for brick in bricks:\n        if brick > base:\n            towers += 1\n            base = brick\n\n    print(towers)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    bricks = list(map(int, sys.stdin.readline().strip().split()))\n    towers = [bricks[0]]\n\n    for brick in bricks:\n        for i in range(len(towers)):\n            if brick < towers[i]:\n                towers[i] = brick\n                break\n            if i == len(towers) - 1:\n                towers.append(brick)\n                break\n    print(len(towers))\n\nif __name__ == '__main__':\n    main()\n", "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#import sys\n\nint main()\n{\n    int n;\n    int i;\n    int j;\n    int k;\n    int l;\n    int m;\n    int o;\n    int p;\n    int q;\n    int r;\n    int s;\n    int t;\n    int u;\n    int v;\n    int w;\n    int x;\n    int y;\n    int z;\n    int a;\n    int b;\n    int c;\n    int d;\n    int e;\n    int f;\n    int g;\n    int h;\n    int aa;\n    int bb;\n    int cc;\n    int dd;\n    int ee;\n    int ff;\n    int gg;\n    int hh;\n    int ii;\n    int jj;\n    int kk;\n    int ll;\n    int mm;\n    int nn;\n    int oo;\n    int pp;\n    int qq;\n    int rr;\n    int ss;\n    int tt;\n    int uu;\n    int vv;\n    int ww;\n    int xx;\n    int yy;\n    int zz;\n    int aaa;\n    int bbb;\n    int ccc;\n    int ddd;\n    int eee;\n    int fff;\n    int ggg;\n    int hhh;\n    int iii;\n    int jjj;\n    int kkk;\n    int lll;\n    int mmm;\n    int nnn;\n    int ooo;\n    int ppp;\n    int qqq;\n    int rrr;\n    int sss;\n    int ttt;\n    int uuu;\n    int vvv;\n    int www;\n    int xxx;\n    int yyy;\n    int zzz;\n    int aaaa;\n    int bbbb;\n    int cccc;\n    int dddd;\n    int eeee;\n    int ffff;\n    int gggg;\n    int hhhh;\n    int iiii;\n    int jjjj;\n    int kkkk;\n    int llll;\n    int mmmm;\n    int nnnn;\n    int oooo;\n    int pppp;\n    int qqqq;\n    int rrrr;\n    int ssss;\n    int tttt;\n    int uuuu;\n    int vvvv;\n    int wwww;\n    int xxxx;\n    int yyyy;\n    int zzzz;\n    int aaaaa;\n    int bbbbb;\n    int ccccc;\n    int ddddd;\n    int eeeee;\n    int fffff;\n    int ggggg;\n    int hhhhh;\n    int iiiii;\n    int jjjjj;\n    int kkkkk;\n    int lllll;\n    int mmmmm;\n    int nnnnn;\n    int ooooo;\n    int ppppp;\n    int qqqqq;\n    int rrrrr;\n    int sssss;\n    int ttttt;\n    int uuuuu;\n    int vvvvv;\n    int wwwww;\n    int xxxxx;\n    int yyyyy;\n    int zzzzz;\n    int aaaaaa;\n    int bbbbbb;\n    int cccccc;\n    int dddddd;\n    int eeeeee;\n    int ffffff;\n    int gggggg;\n    int hhhhhh;\n    int iiiiii;\n    int jjjjjj;\n    int kkkkkk;\n    int llllll;\n    int mmmmmm;\n    int nnnnnn;\n    int oooooo;\n    int pppppp;\n    int qqqqqq;\n    int rrrrrr;\n    int ssssss;\n    int tttttt;\n    int uuuuuu;\n    int vvvvvv;\n    int wwwwww;\n    int xxxxxx;\n    int yyyyyy;\n    int zzzzzz;\n    int aaaaaaa;\n    int bbbbbbb;\n    int ccccccc;\n    int ddddddd;\n    int eeeeeee;\n    int fffffff;\n    int ggggggg;\n    int hhhhhhh;\n    int iiiiiii;\n    int jjjjjjj;\n    int kkkkkkk;\n    int lllllll;\n    int mmmmmmm;\n    int nnnnnnn;\n    int ooooooo;\n    int ppppppp;\n    int qqqqqqq;\n    int rrrrrrr;\n    int sssssss;\n    int ttttttt;\n    int uuuuuuu;\n    int vvvvvvv;\n    int wwwwwww;\n    int xxxxxxx;\n    int yyyyyyy;\n    int zzzzzzz;\n    int aaaaaaaa;\n    int bbbbbbbb;\n    int cccccccc;\n    int dddddddd;\n    int eeeeeeee;\n    int ffffffff;\n    int gggggggg;\n    int hhhhhhhh;\n    int iiiiiiii;\n    int jjjjjjjj;\n    int kkkkkkkk;\n    int llllllll;\n    int mmmmmmmm;\n    int nnnnnnnn;\n    int oooooooo;\n    int pppppppp;\n    int qqqqqqqq;\n    int rrrrrrrr;\n    int ssssssss;\n    int tttttttt;\n    int uuuuuuuu;\n    int vvvvvvvv;\n    int wwwwwwww;\n    int xxxxxxxx;\n    int yyyyyyyy;\n    int zzzzzzzz;\n    int aaaaaaaaa;\n    int bbbbbbbbb;\n    int ccccccccc;\n    int ddddddddd;\n    int eeeeeeeee;\n    int fffffffff;\n    int ggggggggg;\n    int hhhhhhhhh;\n    int iiiiiiiii;\n    int jjjjjjjjj;\n    int kkkkkkkkk;\n    int lllllllll;\n    int mmmmmmmmmm;\n    int nnnnnnnnnn;\n    int oooooooooo;\n    int pppppppppp;\n    int qqqqqqqqqq;\n    int rrrrrrrrrr;\n    int ssssssssss;\n    int tttttttttt;\n    int uuuuuuuuuu;\n    int vvvvvvvvvv;\n    int wwwwwwwwww;\n    int xxxxxxxxxx;\n    int yyyyyyyyyy;\n    int zzzzzzzzzz;\n}\n\n    scanf(\"%d\", &n);\n\n    printf(\"%d\", n);\n", "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n\nint main()\n{\n    int n;\n    int i;\n    int j;\n    int k;\n    int l;\n    int m;\n    int o;\n    int p;\n    int q;\n    int r;\n    int s;\n    int t;\n    int u;\n    int v;\n    int w;\n    int x;\n    int y;\n    int z;\n    int a;\n    int b;\n    int c;\n    int d;\n    int e;\n    int f;\n    int g;\n    int h;\n    int aa;\n    int bb;\n    int cc;\n    int dd;\n    int ee;\n    int ff;\n    int gg;\n    int hh;\n    int ii;\n    int jj;\n    int kk;\n    int ll;\n    int mm;\n    int nn;\n    int oo;\n    int pp;\n    int qq;\n    int rr;\n    int ss;\n    int tt;\n    int uu;\n    int vv;\n    int ww;\n    int xx;\n    int yy;\n    int zz;\n    int aaa;\n    int bbb;\n    int ccc;\n    int ddd;\n    int eee;\n    int fff;\n    int ggg;\n    int hhh;\n    int iii;\n    int jjj;\n    int kkk;\n    int lll;\n    int mmm;\n    int nnn;\n    int ooo;\n    int ppp;\n    int qqq;\n    int rrr;\n    int sss;\n    int ttt;\n    int uuu;\n    int vvv;\n    int www;\n    int xxx;\n    int yyy;\n    int zzz;\n    int aaaa;\n    int bbbb;\n    int cccc;\n    int dddd;\n    int eeee;\n    int ffff;\n    int gggg;\n    int hhhh;\n    int iiii;\n    int jjjj;\n    int kkkk;\n    int llll;\n    int mmmm;\n    int nnnn;\n    int oooo;\n    int pppp;\n    int qqqq;\n    int rrrr;\n    int ssss;\n    int tttt;\n    int uuuu;\n    int vvvv;\n    int wwww;\n    int xxxx;\n    int yyyy;\n    int zzzz;\n    int aaaaa;\n    int bbbbb;\n    int ccccc;\n    int ddddd;\n    int eeeee;\n    int fffff;\n    int ggggg;\n    int hhhhh;\n    int iiiii;\n    int jjjjj;\n    int kkkkk;\n    int lllll;\n    int mmmmm;\n    int nnnnn;\n    int ooooo;\n    int ppppp;\n    int qqqqq;\n    int rrrrr;\n    int sssss;\n    int ttttt;\n    int uuuuu;\n    int vvvvv;\n    int wwwww;\n    int xxxxx;\n    int yyyyy;\n    int zzzzz;\n    int aaaaaa;\n    int bbbbbb;\n    int cccccc;\n    int dddddd;\n    int eeeeee;\n    int ffffff;\n    int gggggg;\n    int hhhhhh;\n    int iiiiii;\n    int jjjjjj;\n    int kkkkkk;\n    int llllll;\n    int mmmmmm;\n    int nnnnnn;\n    int oooooo;\n    int pppppp;\n    int qqqqqq;\n    int rrrrrr;\n    int ssssss;\n    int tttttt;\n    int uuuuuu;\n    int vvvvvv;\n    int wwwwww;\n    int xxxxxx;\n    int yyyyyy;\n    int zzzzzz;\n    int aaaaaaa;\n    int bbbbbbb;\n    int ccccccc;\n    int ddddddd;\n    int eeeeeee;\n    int fffffff;\n    int ggggggg;\n    int hhhhhhh;\n    int iiiiiii;\n    int jjjjjjj;\n    int kkkkkkk;\n    int lllllll;\n    int mmmmmmm;\n    int nnnnnnn;\n    int ooooooo;\n    int ppppppp;\n    int qqqqqqq;\n    int rrrrrrr;\n    int sssssss;\n    int ttttttt;\n    int uuuuuuu;\n    int vvvvvvv;\n    int wwwwwww;\n    int xxxxxxx;\n    int yyyyyyy;\n    int zzzzzzz;\n    int aaaaaaaa;\n    int bbbbbbbb;\n    int cccccccc;\n    int dddddddd;\n    int eeeeeeee;\n    int ffffffff;\n    int gggggggg;\n    int hhhhhhhh;\n    int iiiiiiii;\n    int jjjjjjjj;\n    int kkkkkkkk;\n    int llllllll;\n    int mmmmmmmm;\n    int nnnnnnnn;\n    int oooooooo;\n    int pppppppp;\n    int qqqqqqqq;\n    int rrrrrrrr;\n    int ssssssss;\n    int tttttttt;\n    int uuuuuuuu;\n    int vvvvvvvv;\n    int wwwwwwww;\n    int xxxxxxxx;\n    int yyyyyyyy;\n    int zzzzzzzz;\n    int aaaaaaaaa;\n    int bbbbbbbbb;\n    int ccccccccc;\n    int ddddddddd;\n    int eeeeeeeee;\n    int fffffffff;\n    int ggggggggg;\n    int hhhhhhhhh;\n    int iiiiiiiii;\n    int jjjjjjjjj;\n    int kkkkkkkkk;\n    int lllllllll;\n    int mmmmmmmmmm;\n    int nnnnnnnnnn;\n    int oooooooooo;\n    int pppppppppp;\n    int qqqqqqqqqq;\n    int rrrrrrrrrr;\n    int ssssssssss;\n    int tttttttttt;\n    int uuuuuuuuuu;\n    int vvvvvvvvvv;\n    int wwwwwwwwww;\n    int xxxxxxxxxx;\n    int yyyyyyyyyy;\n    int zzzzzzzzzz;\n\n    return 0;\n}\n\n    scanf(\"%d\", &n);\n\n    printf(\"%d\", n);\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    bricks = list(map(int, sys.stdin.readline().split()))\n    towers = []\n\n    for brick in bricks:\n        if not towers:\n            towers.append(brick)\n            continue\n        elif brick > towers[-1]:\n            towers.append(brick)\n        else:\n            for i in range(len(towers)):\n                if brick < towers[i]:\n                    towers[i] = brick\n                    break\n    print(len(towers))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    num_bricks = int(sys.stdin.readline().strip()) # read in number of bricks\n    bricks = [int(x) for x in sys.stdin.readline().strip().split()] # read in bricks\n\n    min_width = bricks[0] # set minimum width to first brick\n    num_towers = 1 # set number of towers to 1\n\n    for brick in bricks[1:]:\n        if brick > min_width: # if brick is larger than the minimum width\n            num_towers += 1\n            min_width = brick\n\n    print(num_towers) # print number of towers\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    bricks = [int(x) for x in input().split()]\n    towers = 0\n    base = bricks[0]\n    for i in range(1, n):\n        if bricks[i] > base:\n            towers += 1\n            base = bricks[i]\n    towers += 1\n    print(towers)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    # Read input.\n    n = int(sys.stdin.readline())\n    bricks = [int(x) for x in sys.stdin.readline().split()]\n    assert len(bricks) == n\n\n    # Count towers.\n    towers = 0\n    for i in range(n):\n        if i == 0 or bricks[i] > bricks[i-1]:\n            towers += 1\n\n    # Print result.\n    print(towers)\n\nif __name__ == '__main__':\n    main()\n", "\nfrom sys import stdin\n\ndef main():\n    # N = int(stdin.readline())\n    # bricks = [int(x) for x in stdin.readline().split()]\n\n    # towers = 1\n    # current_height = bricks[0]\n    # for brick in bricks[1:]:\n    #     if brick > current_height:\n    #         towers += 1\n    #         current_height = brick\n    # print(towers)\n    print(\"Hello World\")\n\nif __name__ == '__main__':\n    main()\n", "\nfrom collections import defaultdict\nfrom sys import stdin\n\ndef main():\n    n, m = [int(x) for x in stdin.readline().split()]\n    graph = defaultdict(list)\n    for _ in range(m):\n        a, b = [int(x) for x in stdin.readline().split()]\n        graph[a].append(b)\n        graph[b].append(a)\n\n    print(graph)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n = int(input())  # number of bricks\n    bricks = [int(x) for x in input().split()]  # get bricks\n    towers = []  # list of towers\n    for brick in bricks:  # iterate through bricks\n        if len(towers) == 0:  # if no towers\n            towers.append(brick)  # add first brick\n        else:  # if there are towers\n            if brick > towers[-1]:  # if brick is bigger than last brick in tower\n                towers.append(brick)  # add brick to tower\n    print(len(towers))  # print number of towers\n\n\nmain()\n"]