["#!/usr/bin/env python3\n\nn = int(input())\n\nintervals = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    intervals.append((a, b))\n\nintervals.sort()\n\nfor i in range(n-1):\n    a, b = intervals[i]\n    a_next, b_next = intervals[i+1]\n    if b_next < a:\n        print(\"Edward is right\")\n        exit(0)\n\nprint(\"Gunilla has a point\")\n", "\nn = int(input())\ntimes = []\nfor i in range(n):\n    times.append(list(map(int, input().split()))\n\nfor i in range(n):\n    if times[i][0] <= times[i][1]:\n        print(\"Edward is right\")\n        exit()\n\nprint(\"Gunilla has a point\")\n", "\nn = int(input())\ntimes = []\nfor i in range(n):\n    times.append(list(map(int, input().split())))\n\nfor i in range(n):\n    if times[i][0] <= times[i][1]:\n        print(\"Edward is right\")\n        quit()\n\nprint(\"Gunilla has a point\")\n", "\n\n# program\n\nn = int(input())\n\nl = []\n\nfor i in range(n):\n    l.append(list(map(int, input().split())))\n\nl.sort(key=lambda x: x[1])\n\nif l[0][1] >= l[1][0]:\n    print(\"gunilla has a point\")\nelse:\n    print(\"edward is right\")\n", "\n\n#cook your dish here\nN = int(input())\n\ndef check(b):\n    for i in range(N):\n        if a[i]<=b<=c[i]:\n            return False\n    return True\n\nfor i in range(N):\n    a[i],b[i] = map(int,input().split())\n    if check(b[i]):\n        print(\"gunilla has a point\")\n        break\nelse:\n    print(\"edward is right\")\n", "\n\n#cook your dish here\nN = int(input())\n\ndef check(b):\n    for i in range(N):\n        if a[i]<=b<=b[i]:\n            return False\n    return True\n\nfor i in range(N):\n    a,b = map(int,input().split())\n    if check(a):\n        print(\"gunilla has a point\")\n        break\nelse:\n    print(\"edward is right\")\n", "\nimport sys\n\ndef solve(times):\n    # if any time is within another time, it is impossible\n    # otherwise, possible\n    for time in times:\n        for other_time in times:\n            if time != other_time and time[0] >= other_time[0] and time[1] <= other_time[1]:\n                return \"Edward is right\"\n    return \"gunilla has a point\"\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    times = []\n    for _ in range(n):\n        times.append(tuple(map(int, sys.stdin.readline().strip().split())))\n    print(solve(times))\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    print(\"Hello world\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n#program\nn = int(input())\nl = []\n\nfor i in range(n):\n    l.append(list(map(int,input().split())))\nl.sort(key=lambda x: x[1])\nif l[0][1] >= l[1][0]:\n    print(\"gunilla has a point\") \nelse:\n    print(\"edward is right\")\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().rstrip('\\n'))\n    intervals = []\n    for i in range(n):\n        a, b = [int(x) for x in sys.stdin.readline().rstrip('\\n').split()]\n        intervals.append([a, b])\n    intervals.sort()\n    intervals_in_common = []\n    for i in range(n-1):\n        start = max(intervals[i][0], intervals[i+1][0])\n        end = min(intervals[i][1], intervals[i+1][1])\n        if start <= end:\n            intervals_in_common.append([start, end])\n    if len(intervals_in_common) == 0:\n        print(\"Edward is right\")\n    else:\n        print(\"Gunilla has a point\")\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef solve(times):\n    # if any time is within another time, it is possible\n    # otherwise, impossible\n    for time in times:\n        for other_time in times:\n            if time != other_time and time[0] >= other_time[0] and time[1] <= other_time[1]:\n                return \"gunilla has a point\"\n    return \"gunilla is right\"\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    times = []\n    for _ in range(n):\n        times.append(tuple(map(int, sys.stdin.readline().strip().split())))\n    print(solve(times))\n\nif __name__ == \"__main__\":\n    main()\n", "\nnum_times = int(input())\n\ntimes = []\nfor i in range(num_times):\n    times.append([int(x) for x in input().split()])\n\n# Check if all times are the same\nfor i in range(num_times - 1):\n    if times[i][1] != times[i + 1][1] or times[i][0] != times[i + 1][0]:\n        print(\"Edward is right\")\n        exit()\n\nprint(\"Gunilla has a point\")\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().rstrip())\n    intervals = []\n    for i in range(n):\n        a, b = [int(x) for x in sys.stdin.readline().rstrip().split()]\n        intervals.append([a, b])\n    intervals.sort()\n    intervals_in_common = []\n    for i in range(n-1):\n        start = max(intervals[i][0], intervals[i+1][0])\n        end = min(intervals[i][1], intervals[i+1][1])\n        if start <= end:\n            intervals_in_common.append([start, end])\n    if len(intervals_in_common) == 0:\n        print(\"Edward is right\")\n    else:\n        print(\"Gunilla has a point\")\n\nif __name__ == '__main__':\n    main()\n", "\nn = int(input())\n\nintervals = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    intervals.append((a, b))\n\nintervals.sort()\n\nfor i in range(n-1):\n    a, b = intervals[i]\n    a_next, b_next = intervals[i+1]\n    if b_next < a:\n        print(\"gunilla is right\")\n        exit(0)\n\nprint(\"edward has a point\")\n", "\nimport sys\n\ndef solve(times):\n    # if any time is within another time, it is impossible, otherwise possible\n    for time in times:\n        for other_time in times:\n            if time != other_time and time[0] >= other_time[0] and time[1] <= other_time[1]: \n                return \"Edward is right\"\n    return \"gunilla has a point\"\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    times = []\n    for _ in range(n):\n        times.append(tuple(map(int, sys.stdin.readline().strip().split())))\n    print(solve(times))\n\nif __name__ == \"__main__\":\n    main()\n", "\nn = int(input())\n\nintervals = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    intervals.append((a, b))\n\nintervals.sort()\n\nfor i in range(n - 1):\n    a, b = intervals[i]\n    a_next, b_next = intervals[i + 1]\n    if b_next < a:\n        print(\"gunilla is right\")\n        exit(0)\n\nprint(\"edward has a point\")\n", "\n\nnum_times = int(input())\n\ntimes = []\nfor i in range(num_times):\n    times.append([int(x) for x in input().split()])\n\n# Check if all times are the same\nfor i in range(num_times - 1):\n    if times[i][1] != times[i + 1][1]\n        print(\"Edward is right\")\n        exit()\n\nprint(\"Gunilla has a point\")\n", "\n#program\nn = int(input())\nl = []\n\nfor i in range(n):\n    l.append(list(map(int,input().split())))\nl.sort(key=lambda x: x[1])\nif l[0][1] >= l[1][0]:\n    print(\"Gunilla has a point\")\nelse:\n    print(\"Edward is right\")\n", "\n\ndef main():\n    # Read input and store in a list\n    lines = []\n    while True:\n        try:\n            lines.append(input())\n        except EOFError:\n            break\n\n    # Check for common time\n    for line in lines:\n        times = []\n        for interval in line:\n            for time in range(interval[0], interval[1] + 1):\n                times.append(time)\n        if len(set(times)) == 1:\n            print(\"gunilla has a point\")  # Gunilla has a point\n        else:\n            print(\"edward is right\")  # Edward is right\n\nif __name__ == \"__main__\":\n    main()\n", "\nn = int(input())\n\nintervals = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    intervals.append((a, b))\n\nintervals.sort()\n\nfor i in range(n-1):\n    a, b = intervals[i]\n    a_next, b_next = intervals[i+1]\n    if b_next < a:\n        print(\"Edward is right\")\n        exit(0)\n\nprint(\"Gunilla has a point\")\n", "\n\n#cook your dish here\nN = int(input())\n\ndef check(b):\n    for i in range(N):\n        if a[i]<=b<=b[i] and i!=N-1:\n            return False\n    return True\n\nfor _ in range(N):\n    a,b = map(int,input().split())    \n    if check(a) and check(b):\n        print(\"Gunilla has a point\")        \n        break    \nelse:    \n    print(\"Edward is right\")    \n", "#!/usr/bin/env python3\n\nimport sys\n\ndef solve(times):\n    # if any time is within another time, it is impossible\n    # otherwise, possible\n    for t in times:\n        for o in times:\n            if t != o and t[0] >= o[0] and t[1] <= o[1]:\n                return \"gunilla is right\"\n    return \"gunilla has a point\"\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    times = []\n    for _ in range(n):\n        times.append(tuple(map(int, sys.stdin.readline().strip().split())))\n    print(solve(times))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n#cook your dish here\nN = int(input())\n\ndef check(b):\n    for i in range(N):\n        if a[i]<=b<=c[i]:\n            return False\n    return True\n\nfor i in range(N):\n    a,b = map(int,input().split())\n    if check(a):\n        print(\"Gunilla has a point\")\n        break\nelse:\n    print(\"Edward is right\")\n"]