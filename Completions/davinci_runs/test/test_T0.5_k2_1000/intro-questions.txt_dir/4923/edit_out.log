2022-04-12 03:04:51.940609 num operations 2
2022-04-12 03:04:51.940638 size on input set 1
2022-04-12 03:04:53.998755 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\nc = [0] * 7\nfor i in range(n):\n    c[a[i]] += 1\n    if c[a[i]] > 1:\n        c[a[i]] = -1\n\nm = max(c)\nif m == 0:\n    print('none')\nelse:\n    print(c.index(m))\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\nc = [0] * 7\nfor i in range(n):\n    c[a[i]] += 1\n    if c[a[i]] > 1:\n        c[a[i]] = -1\n\nm = max(c)\nif m == 0:\n    print('none')\nelse:\n    print(c.index(m))\n"
    }
  ],
  "created": 1649747092,
  "object": "edit"
}
2022-04-12 03:04:53.998941 fix spelling mistakes 2 ["\nn = int(input())\na = list(map(int, input().split()))\n\nc = [0] * 7\nfor i in range(n):\n    c[a[i]] += 1\n    if c[a[i]] > 1:\n        c[a[i]] = -1\n\nm = max(c)\nif m == 0:\n    print('none')\nelse:\n    print(c.index(m))\n", "\nn = int(input())\na = list(map(int, input().split()))\n\nc = [0] * 7\nfor i in range(n):\n    c[a[i]] += 1\n    if c[a[i]] > 1:\n        c[a[i]] = -1\n\nm = max(c)\nif m == 0:\n    print('none')\nelse:\n    print(c.index(m))\n"]
2022-04-12 03:04:53.998964 size on output set 1
2022-04-12 03:04:53.998968 size on input set 1
2022-04-12 03:04:58.884952 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\na = list(map(int, input().split()))\n\nc = [0] * 7\nfor i in range(n):\n    c[a[i]] += 1\n    if c[a[i]] > 1:\n        c[a[i]] = -1\n\nm = max(c)\nif m == 0:\n    print('None')\nelse:\n    print(c.index(m))\n"
    },
    {
      "index": 1,
      "text": "n = int(input())  # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435\na = list(map(int, input().split()))  # \u043c\u0430\u0441\u0441\u0438\u0432\nprint(a)\n"
    }
  ],
  "created": 1649747094,
  "object": "edit"
}
2022-04-12 03:04:58.885065 fix syntax errors 2 ["\nn = int(input())\na = list(map(int, input().split()))\n\nc = [0] * 7\nfor i in range(n):\n    c[a[i]] += 1\n    if c[a[i]] > 1:\n        c[a[i]] = -1\n\nm = max(c)\nif m == 0:\n    print('None')\nelse:\n    print(c.index(m))\n", 'n = int(input())  # количество элементов в массиве\na = list(map(int, input().split()))  # массив\nprint(a)\n']
2022-04-12 03:04:58.885083 size on output set 2
2022-04-12 03:04:58.885101 num operations 2
2022-04-12 03:04:58.885105 size on input set 1
2022-04-12 03:05:00.781728 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom collections import Counter\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    counts = Counter(rolls)\n    max_roll = max(counts)\n    if counts[max_roll] == 1:\n        print(rolls.index(max_roll) + 1)\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nfrom collections import Counter\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    counts = Counter(rolls)\n    max_roll = max(counts)\n    if counts[max_roll] == 1:\n        print(rolls.index(max_roll) + 1)\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649747099,
  "object": "edit"
}
2022-04-12 03:05:00.781835 fix spelling mistakes 2 ['\nfrom collections import Counter\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    counts = Counter(rolls)\n    max_roll = max(counts)\n    if counts[max_roll] == 1:\n        print(rolls.index(max_roll) + 1)\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n', '\nfrom collections import Counter\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    counts = Counter(rolls)\n    max_roll = max(counts)\n    if counts[max_roll] == 1:\n        print(rolls.index(max_roll) + 1)\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 03:05:00.781855 size on output set 1
2022-04-12 03:05:00.781858 size on input set 1
2022-04-12 03:05:05.380906 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "from collections import Counter\n\ndef main():\n    n = int(input())\n    nums = list(map(int, input().split()))\n    counts = Counter(nums)\n    max_num = max(counts)\n    if counts[max_num] == 1:\n        print(nums.index(max_num) + 1)\n    print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nfrom collections import Counter\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649747101,
  "object": "edit"
}
2022-04-12 03:05:05.381043 fix syntax errors 2 ['from collections import Counter\n\ndef main():\n    n = int(input())\n    nums = list(map(int, input().split()))\n    counts = Counter(nums)\n    max_num = max(counts)\n    if counts[max_num] == 1:\n        print(nums.index(max_num) + 1)\n    print("none")\n\nif __name__ == "__main__":\n    main()\n', '\nfrom collections import Counter\n\ndef main():\n    pass\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 03:05:05.381063 size on output set 2
2022-04-12 03:05:05.381073 num operations 2
2022-04-12 03:05:05.381078 size on input set 1
2022-04-12 03:05:08.487751 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    max_roll = max(rolls)\n    if rolls.count(max_roll) == 1:\n        print(rolls.index(max_roll) + 1)\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    maxRoll = max(rolls)\n    if rolls.count(maxRoll) == 1:\n        print(rolls.index(maxRoll) + 1)\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649747105,
  "object": "edit"
}
2022-04-12 03:05:08.487894 fix spelling mistakes 2 ['\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    max_roll = max(rolls)\n    if rolls.count(max_roll) == 1:\n        print(rolls.index(max_roll) + 1)\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    maxRoll = max(rolls)\n    if rolls.count(maxRoll) == 1:\n        print(rolls.index(maxRoll) + 1)\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 03:05:08.487907 size on output set 2
2022-04-12 03:05:08.487910 size on input set 2
2022-04-12 03:05:11.750803 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649747108,
  "object": "edit"
}
2022-04-12 03:05:11.750918 fix syntax errors 2 ['\ndef main():\n    pass\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    pass\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 03:05:15.290162 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    max_rolls = max(rolls)\n    if rolls.count(max_rolls) == 1:\n        print(rolls.index(max_rolls) + 1)\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649747111,
  "object": "edit"
}
2022-04-12 03:05:15.290508 fix syntax errors 2 ['\n\ndef main():\n    n = int(input())\n    rolls = list(map(int, input().split()))\n    max_rolls = max(rolls)\n    if rolls.count(max_rolls) == 1:\n        print(rolls.index(max_rolls) + 1)\n    else:\n        print("none")\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    pass\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 03:05:15.290950 size on output set 2
2022-04-12 03:05:15.290999 num operations 2
2022-04-12 03:05:15.291008 size on input set 1
2022-04-12 03:05:18.058477 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Read input\nn = int(input())\na = list(map(int, input().split()))\n\n# Check if there are any unique numbers in the list\nunique_numbers = set(a)\nif len(unique_numbers) == 1:\n    print(\"none\")\n\n# Check if there are any unique numbers in the list\nelse:\n    # Find the highest unique number\n    for i in range(6, 0, -1):\n        if i in unique_numbers:\n            highest_unique = i\n            break\n\n    # Find the index of the highest unique number\n    for i in range(n):\n        if a[i] == highest_unique:\n            print(i + 1)\n            break\n"
    },
    {
      "index": 1,
      "text": "\n\n# Read input\nn = int(input())\na = list(map(int, input().split()))\n\n# Check if there are any unique number\nunique_numbers = set(a)\nif len(unique_numbers) == 1:\n    print(\"none\")\n\n# Check if there are any unique number\nelse:\n    # Find the highest unique number\n    for i in range(6, 0, -1):\n        if i in unique_numbers:\n            highest_unique = i\n            break\n\n    # Find the index of the highest unique number\n    for i in range(n):\n        if a[i] == highest_unique:\n            print(i + 1)\n            break\n"
    }
  ],
  "created": 1649747115,
  "object": "edit"
}
2022-04-12 03:05:18.058646 fix spelling mistakes 2 ['\n\n# Read input\nn = int(input())\na = list(map(int, input().split()))\n\n# Check if there are any unique numbers in the list\nunique_numbers = set(a)\nif len(unique_numbers) == 1:\n    print("none")\n\n# Check if there are any unique numbers in the list\nelse:\n    # Find the highest unique number\n    for i in range(6, 0, -1):\n        if i in unique_numbers:\n            highest_unique = i\n            break\n\n    # Find the index of the highest unique number\n    for i in range(n):\n        if a[i] == highest_unique:\n            print(i + 1)\n            break\n', '\n\n# Read input\nn = int(input())\na = list(map(int, input().split()))\n\n# Check if there are any unique number\nunique_numbers = set(a)\nif len(unique_numbers) == 1:\n    print("none")\n\n# Check if there are any unique number\nelse:\n    # Find the highest unique number\n    for i in range(6, 0, -1):\n        if i in unique_numbers:\n            highest_unique = i\n            break\n\n    # Find the index of the highest unique number\n    for i in range(n):\n        if a[i] == highest_unique:\n            print(i + 1)\n            break\n']
2022-04-12 03:05:18.058687 size on output set 2
2022-04-12 03:05:18.058695 size on input set 2
2022-04-12 03:05:21.972863 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Read input\nn = int(input())\na = list(map(int, input().split()))\n\n# Check if there are any unique numbers in the list\nunique_numbers = set(a)\nif len(unique_numbers) == 1:\n    print(\"none\")\n\n# If there are any unique numbers in the list\nelse:\n    # Find the highest unique number\n    for i in range(6, 0, -1):\n        if i in unique_numbers:\n            highest_unique = i\n            break\n\n    # Find the index of the highest unique number\n    for i in range(n):\n        if a[i] == highest_unique:\n            print(i + 1)\n            break\n"
    },
    {
      "index": 1,
      "text": "\n\n# Read input\nn = int(input())\na = list(map(int, input().split()))\n\n# Check if there are any unique numbers in the list.\nunique_numbers = set(a)\nif len(unique_numbers) == 1:\n    print(\"none\")\n\n# Check if there are any unique numbers in the list.\nelse:\n    # Find the highest unique number.\n    for i in range(6, 0, -1):\n        if i in unique_numbers:\n            highest_unique = i\n            break\n\n    # Find the index of the highest unique number.\n    for i in range(n):\n        if a[i] == highest_unique:\n            print(i + 1)\n            break\n"
    }
  ],
  "created": 1649747118,
  "object": "edit"
}
2022-04-12 03:05:21.973086 fix syntax errors 2 ['\n\n# Read input\nn = int(input())\na = list(map(int, input().split()))\n\n# Check if there are any unique numbers in the list\nunique_numbers = set(a)\nif len(unique_numbers) == 1:\n    print("none")\n\n# If there are any unique numbers in the list\nelse:\n    # Find the highest unique number\n    for i in range(6, 0, -1):\n        if i in unique_numbers:\n            highest_unique = i\n            break\n\n    # Find the index of the highest unique number\n    for i in range(n):\n        if a[i] == highest_unique:\n            print(i + 1)\n            break\n', '\n\n# Read input\nn = int(input())\na = list(map(int, input().split()))\n\n# Check if there are any unique numbers in the list.\nunique_numbers = set(a)\nif len(unique_numbers) == 1:\n    print("none")\n\n# Check if there are any unique numbers in the list.\nelse:\n    # Find the highest unique number.\n    for i in range(6, 0, -1):\n        if i in unique_numbers:\n            highest_unique = i\n            break\n\n    # Find the index of the highest unique number.\n    for i in range(n):\n        if a[i] == highest_unique:\n            print(i + 1)\n            break\n']
2022-04-12 03:05:24.663052 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Read input\nn = int(input())\na = list(map(int, input().split()))\n\n# Check if there are any unique number\nunique_numbers = set(a)\nif len(unique_numbers) == 1:\n    print(\"none\")\n\n# Check if there are any unique number\nelse:\n    # Find the highest unique number\n    for i in range(6, 0, -1):\n        if i in unique_numbers:\n            highest_unique = i\n            break\n\n    # Find the index of the highest unique number\n    for i in range(n):\n        if a[i] == highest_unique:\n            print(i + 1)\n            break\n"
    },
    {
      "index": 1,
      "text": "\n\n# Read input\nn = int(input())\na = list(map(int, input().split()))\n\n# Check if there are any unique numbers\nunique_numbers = set(a)\nif len(unique_numbers) == 1:\n    print(\"none\")\n\n# Check if there are any unique numbers\nelse:\n    # Find the highest unique number\n    for i in range(6, 0, -1):\n        if i in unique_numbers:\n            highest_unique = i\n            break\n\n    # Find the index of the highest unique number\n    for i in range(n):\n        if a[i] == highest_unique:\n            print(i + 1)\n            break\n"
    }
  ],
  "created": 1649747122,
  "object": "edit"
}
2022-04-12 03:05:24.663276 fix syntax errors 2 ['\n# Read input\nn = int(input())\na = list(map(int, input().split()))\n\n# Check if there are any unique number\nunique_numbers = set(a)\nif len(unique_numbers) == 1:\n    print("none")\n\n# Check if there are any unique number\nelse:\n    # Find the highest unique number\n    for i in range(6, 0, -1):\n        if i in unique_numbers:\n            highest_unique = i\n            break\n\n    # Find the index of the highest unique number\n    for i in range(n):\n        if a[i] == highest_unique:\n            print(i + 1)\n            break\n', '\n\n# Read input\nn = int(input())\na = list(map(int, input().split()))\n\n# Check if there are any unique numbers\nunique_numbers = set(a)\nif len(unique_numbers) == 1:\n    print("none")\n\n# Check if there are any unique numbers\nelse:\n    # Find the highest unique number\n    for i in range(6, 0, -1):\n        if i in unique_numbers:\n            highest_unique = i\n            break\n\n    # Find the index of the highest unique number\n    for i in range(n):\n        if a[i] == highest_unique:\n            print(i + 1)\n            break\n']
2022-04-12 03:05:24.663327 size on output set 4
2022-04-12 03:05:24.663345 num operations 2
2022-04-12 03:05:24.663461 size on input set 1
2022-04-12 03:05:27.778741 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Get input\nn = int(input())\na = list(map(int, input().split()))\n\n# Sort the list\na.sort()\n\n# Check if the list has a unique maximum element\nif a[-1] != a[-2]:\n    # Find the index of the unique maximum element\n    for i in range(len(a)):\n        if a[i] == a[-1]:\n            print(i + 1)\n            break\nelse:\n    print(\"none\")\n"
    },
    {
      "index": 1,
      "text": "\n\n# Get the input\nn = int(input())\na = list(map(int, input().split()))\n\n# Sort the list\na.sort()\n\n# Check if the list has a unique maximum element\nif a[-1] != a[-2]:\n    # Find the index of the unique maximum element\n    for i in range(len(a)):\n        if a[i] == a[-1]:\n            print(i + 1)\n            break\nelse:\n    print(\"none\")\n"
    }
  ],
  "created": 1649747124,
  "object": "edit"
}
2022-04-12 03:05:27.778910 fix spelling mistakes 2 ['\n\n# Get input\nn = int(input())\na = list(map(int, input().split()))\n\n# Sort the list\na.sort()\n\n# Check if the list has a unique maximum element\nif a[-1] != a[-2]:\n    # Find the index of the unique maximum element\n    for i in range(len(a)):\n        if a[i] == a[-1]:\n            print(i + 1)\n            break\nelse:\n    print("none")\n', '\n\n# Get the input\nn = int(input())\na = list(map(int, input().split()))\n\n# Sort the list\na.sort()\n\n# Check if the list has a unique maximum element\nif a[-1] != a[-2]:\n    # Find the index of the unique maximum element\n    for i in range(len(a)):\n        if a[i] == a[-1]:\n            print(i + 1)\n            break\nelse:\n    print("none")\n']
2022-04-12 03:05:27.778934 size on output set 2
2022-04-12 03:05:27.778942 size on input set 2
2022-04-12 03:05:30.790845 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Get the input\nn = int(input())\na = list(map(int, input().split()))\n\n# Sort the list\na.sort()\n\n# Check if the list has a unique maximum element\nif a[-1] != a[-2]:\n    # Find the index of the unique maximum element\n    for i in range(len(a)):\n        if a[i] == a[-1]:\n            print(i + 1)\n            break\nelse:\n    print(\"none\")\n"
    },
    {
      "index": 1,
      "text": "\n# Get the input\nn = int(input())\na = list(map(int, input().split()))[:n]\n\n# Sort the list\na.sort()\n\n# Check if the list has a unique maximum element\nif a[-1] != a[-2]:\n    # Find the index of the unique maximum element\n    for i in range(n):\n        if a[i] == a[-1]:\n            print(i + 1)\n            break\nelse:\n    print(\"none\")\n"
    }
  ],
  "created": 1649747127,
  "object": "edit"
}
2022-04-12 03:05:30.791101 fix syntax errors 2 ['\n# Get the input\nn = int(input())\na = list(map(int, input().split()))\n\n# Sort the list\na.sort()\n\n# Check if the list has a unique maximum element\nif a[-1] != a[-2]:\n    # Find the index of the unique maximum element\n    for i in range(len(a)):\n        if a[i] == a[-1]:\n            print(i + 1)\n            break\nelse:\n    print("none")\n', '\n# Get the input\nn = int(input())\na = list(map(int, input().split()))[:n]\n\n# Sort the list\na.sort()\n\n# Check if the list has a unique maximum element\nif a[-1] != a[-2]:\n    # Find the index of the unique maximum element\n    for i in range(n):\n        if a[i] == a[-1]:\n            print(i + 1)\n            break\nelse:\n    print("none")\n']
2022-04-12 03:05:34.947185 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Get input\nn = int(input())\na = list(map(int, input().split()))\n\n# Sort the list\na.sort()\n\n# Check if the list has a unique maximum element\nif a[-1] != a[-2]: \n    # Find the index of the unique maximum element\n    for i in range(len(a)):\n        if a[i] == a[-1]:\n            print(i + 1)\n            break\nelse:\n    print(\"none\")\n"
    },
    {
      "index": 1,
      "text": "\n# Get input\nn = int(input())\na = list(map(int, input().split()))\n\n# Sort the list\na.sort()\n\n# Find the index of the unique maximum element\nfor i in range(len(a)):\n    if a[i] == a[-1]:\n        print(i + 1)\n        break\n"
    }
  ],
  "created": 1649747131,
  "object": "edit"
}
2022-04-12 03:05:34.947366 fix syntax errors 2 ['\n# Get input\nn = int(input())\na = list(map(int, input().split()))\n\n# Sort the list\na.sort()\n\n# Check if the list has a unique maximum element\nif a[-1] != a[-2]: \n    # Find the index of the unique maximum element\n    for i in range(len(a)):\n        if a[i] == a[-1]:\n            print(i + 1)\n            break\nelse:\n    print("none")\n', '\n# Get input\nn = int(input())\na = list(map(int, input().split()))\n\n# Sort the list\na.sort()\n\n# Find the index of the unique maximum element\nfor i in range(len(a)):\n    if a[i] == a[-1]:\n        print(i + 1)\n        break\n']
2022-04-12 03:05:34.947398 size on output set 4
2022-04-12 03:05:34.947424 num operations 2
2022-04-12 03:05:34.947433 size on input set 1
2022-04-12 03:05:36.874811 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\nrolls = [int(x) for x in input().split()]\n\nhighest = 0\nwinner = None\nfor index, roll in enumerate(rolls):\n    if roll > highest:\n        if rolls.count(roll) == 1:\n            highest = roll\n            winner = index\n\nif winner is None:\n    print(\"none\")\nelse:\n    print(winner+1)\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\nrolls = [int(x) for x in input().split()]\n\nhighest = 0\nwinner = None\nfor index, roll in enumerate(rolls):\n    if roll > highest:\n        if rolls.count(roll) == 1:\n            highest = roll\n            winner = index\n\nif winner is None:\n    print(\"none\")\nelse:\n    print(winner+1)\n"
    }
  ],
  "created": 1649747135,
  "object": "edit"
}
2022-04-12 03:05:36.874993 fix spelling mistakes 2 ['\nn = int(input())\nrolls = [int(x) for x in input().split()]\n\nhighest = 0\nwinner = None\nfor index, roll in enumerate(rolls):\n    if roll > highest:\n        if rolls.count(roll) == 1:\n            highest = roll\n            winner = index\n\nif winner is None:\n    print("none")\nelse:\n    print(winner+1)\n', '\nn = int(input())\nrolls = [int(x) for x in input().split()]\n\nhighest = 0\nwinner = None\nfor index, roll in enumerate(rolls):\n    if roll > highest:\n        if rolls.count(roll) == 1:\n            highest = roll\n            winner = index\n\nif winner is None:\n    print("none")\nelse:\n    print(winner+1)\n']
2022-04-12 03:05:36.875025 size on output set 1
2022-04-12 03:05:36.875034 size on input set 1
2022-04-12 03:05:39.154730 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "n = int(input())\nrolls = [int(x) for x in input().split()]\n\nhighest = 0\nwinner = None\nfor index, roll in enumerate(rolls):\n    if roll > highest:\n        if rolls.count(roll) == 1:\n            highest = roll\n            winner = index\n\nif winner is None:\n    print(\"none\")\nelse:\n    print(winner + 1)\n"
    },
    {
      "index": 1,
      "text": "n = int(input())\nrolls = [int(x) for x in input().split()]\n\nhighest = 0\nwinner = None\nfor index, roll in enumerate(rolls):\n    if roll > highest:\n        if rolls.count(roll) == 1:\n            highest = roll\n            winner = index\n\nif winner is None:\n    print(\"None\")\nelse:\n    print(winner+1)\n"
    }
  ],
  "created": 1649747137,
  "object": "edit"
}
2022-04-12 03:05:39.154872 fix syntax errors 2 ['n = int(input())\nrolls = [int(x) for x in input().split()]\n\nhighest = 0\nwinner = None\nfor index, roll in enumerate(rolls):\n    if roll > highest:\n        if rolls.count(roll) == 1:\n            highest = roll\n            winner = index\n\nif winner is None:\n    print("none")\nelse:\n    print(winner + 1)\n', 'n = int(input())\nrolls = [int(x) for x in input().split()]\n\nhighest = 0\nwinner = None\nfor index, roll in enumerate(rolls):\n    if roll > highest:\n        if rolls.count(roll) == 1:\n            highest = roll\n            winner = index\n\nif winner is None:\n    print("None")\nelse:\n    print(winner+1)\n']
2022-04-12 03:05:39.154964 size on output set 2
2022-04-12 03:05:39.154976 num operations 2
2022-04-12 03:05:39.154982 size on input set 1
2022-04-12 03:05:41.658290 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# 1st attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print(\"none\")\n\n# 2nd attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print(\"none\")\n"
    },
    {
      "index": 1,
      "text": "\n\n#1st attempt \nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print(\"none\")\n\n#2nd attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print(\"none\")\n"
    }
  ],
  "created": 1649747139,
  "object": "edit"
}
2022-04-12 03:05:41.658440 fix spelling mistakes 2 ['\n\n# 1st attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print("none")\n\n# 2nd attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print("none")\n', '\n\n#1st attempt \nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print("none")\n\n#2nd attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print("none")\n']
2022-04-12 03:05:41.658467 size on output set 2
2022-04-12 03:05:41.658475 size on input set 2
2022-04-12 03:05:46.370652 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# 1st attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d, key=lambda k: len(d[k]))\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print(\"none\")\n\n# 2nd attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d, key=lambda k: len(d[k]))\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print(\"none\")\n"
    },
    {
      "index": 1,
      "text": "\n# 1st attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.values())\nif len(d[s[m-1]]) == 1:\n    print(d[s[m-1]][0])\nelse:\n    print(\"none\")\n\n# 2nd attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.values())\nif len(d[s[m-1]]) == 1:\n    print(d[s[m-1]][0])\nelse:\n    print(\"none\")\n"
    }
  ],
  "created": 1649747141,
  "object": "edit"
}
2022-04-12 03:05:46.370880 fix syntax errors 2 ['\n# 1st attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d, key=lambda k: len(d[k]))\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print("none")\n\n# 2nd attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d, key=lambda k: len(d[k]))\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print("none")\n', '\n# 1st attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.values())\nif len(d[s[m-1]]) == 1:\n    print(d[s[m-1]][0])\nelse:\n    print("none")\n\n# 2nd attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.values())\nif len(d[s[m-1]]) == 1:\n    print(d[s[m-1]][0])\nelse:\n    print("none")\n']
2022-04-12 03:05:48.826742 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#1st attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print(\"none\")\n\n#2nd attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print(\"none\")\n"
    },
    {
      "index": 1,
      "text": "\n# 1st attempt \nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print(\"none\")\n\n# 2nd attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print(\"none\")\n"
    }
  ],
  "created": 1649747146,
  "object": "edit"
}
2022-04-12 03:05:48.826864 fix syntax errors 2 ['\n\n#1st attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print("none")\n\n#2nd attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print("none")\n', '\n# 1st attempt \nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print("none")\n\n# 2nd attempt\nn = int(input())\ns = input().split()\nd = {}\nfor i in range(len(s)):\n    if s[i] in d:\n        d[s[i]].append(i+1)\n    else:\n        d[s[i]] = [i+1]\nm = max(d.keys())\nif len(d[m]) == 1:\n    print(d[m][0])\nelse:\n    print("none")\n']
2022-04-12 03:05:48.826882 size on output set 4
