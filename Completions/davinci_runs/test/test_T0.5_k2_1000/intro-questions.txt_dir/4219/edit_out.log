2022-04-11 18:45:53.013073 num operations 2
2022-04-11 18:45:53.013102 size on input set 1
2022-04-11 18:46:04.580640 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest person\n    max_honest_person = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest person\n        honest_person = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_person += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_person = -1\n                    break\n            if honest_person == -1:\n                break\n        if honest_person == -1:\n            continue\n        max_honest_person = max(max_honest_person, honest_person)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest person\n    max_honest_person = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest person\n        honest_person = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_person += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_person = -1\n                    break\n            if honest_person == -1:\n                break\n        if honest_person == -1:\n            continue\n        max_honest_person = max(max_honest_person, honest_person)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649717153,
  "object": "edit"
}
2022-04-11 18:46:04.580834 fix spelling mistakes 2 ["\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest person\n    max_honest_person = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest person\n        honest_person = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_person += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_person = -1\n                    break\n            if honest_person == -1:\n                break\n        if honest_person == -1:\n            continue\n        max_honest_person = max(max_honest_person, honest_person)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest person\n    max_honest_person = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest person\n        honest_person = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_person += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_person = -1\n                    break\n            if honest_person == -1:\n                break\n        if honest_person == -1:\n            continue\n        max_honest_person = max(max_honest_person, honest_person)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 18:46:04.580872 size on output set 1
2022-04-11 18:46:04.580880 size on input set 1
2022-04-11 18:46:06.895225 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest person\n    max_honest_person = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest person\n        honest_person = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_person += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_person = -1\n                    break\n            if honest_person == -1:\n                break\n        if honest_person == -1:\n            continue\n        max_honest_person = max(max_honest_person, honest_person)\n\n    print(max_honest_person)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest person\n    max_honest_person = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest person\n        honest_person = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_person += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_person = -1\n                    break\n            if honest_person == -1:\n                break\n        if honest_person == -1:\n            continue\n        max_honest_person = max(max_honest_person, honest_person)\n\n    print(max_honest_person)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649717164,
  "object": "edit"
}
2022-04-11 18:46:06.895499 fix syntax errors 2 ["\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest person\n    max_honest_person = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest person\n        honest_person = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_person += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_person = -1\n                    break\n            if honest_person == -1:\n                break\n        if honest_person == -1:\n            continue\n        max_honest_person = max(max_honest_person, honest_person)\n\n    print(max_honest_person)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest person\n    max_honest_person = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest person\n        honest_person = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_person += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_person = -1\n                    break\n            if honest_person == -1:\n                break\n        if honest_person == -1:\n            continue\n        max_honest_person = max(max_honest_person, honest_person)\n\n    print(max_honest_person)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 18:46:06.895680 size on output set 1
2022-04-11 18:46:06.895707 num operations 2
2022-04-11 18:46:06.895716 size on input set 1
2022-04-11 18:46:09.975281 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"main function.\"\"\"\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    \"\"\"solve function.\"\"\"\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    \"\"\"is_honest function.\"\"\"\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"main function.\"\"\"\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    \"\"\"solve function.\"\"\"\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    \"\"\"is_honest function.\"\"\"\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n"
    }
  ],
  "created": 1649717167,
  "object": "edit"
}
2022-04-11 18:46:09.975720 fix spelling mistakes 2 ['\n\ndef main():\n    """main function."""\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    """solve function."""\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    """is_honest function."""\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n', '\n\ndef main():\n    """main function."""\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    """solve function."""\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    """is_honest function."""\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n']
2022-04-11 18:46:09.975776 size on output set 1
2022-04-11 18:46:09.975786 size on input set 1
2022-04-11 18:46:12.701256 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    \"\"\"main function.\"\"\"\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\n\ndef solve(graph):\n    \"\"\"solve function.\"\"\"\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\n\ndef is_honest(graph, person, visited=set()):\n    \"\"\"is_honest function.\"\"\"\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"main function.\"\"\"\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    \"\"\"solve function.\"\"\"\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=None):\n    \"\"\"is_honest function.\"\"\"\n    if visited is None:\n        visited = set()\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n"
    }
  ],
  "created": 1649717170,
  "object": "edit"
}
2022-04-11 18:46:12.701467 fix syntax errors 2 ['\ndef main():\n    """main function."""\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\n\ndef solve(graph):\n    """solve function."""\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\n\ndef is_honest(graph, person, visited=set()):\n    """is_honest function."""\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\n\nmain()\n', '\n\ndef main():\n    """main function."""\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    """solve function."""\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=None):\n    """is_honest function."""\n    if visited is None:\n        visited = set()\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n']
2022-04-11 18:46:12.701500 size on output set 2
