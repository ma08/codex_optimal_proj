2022-04-11 22:51:27.229188 num operations 2
2022-04-11 22:51:27.229214 size on input set 1
2022-04-11 22:51:37.762554 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 2:\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(\" \".join([str(x) for x in ans]))\n            return\n    ans[1] = (h-2)*2\n    ans[0] = 2 - n\n    if ans[1] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(\" \".join([str(x) for x in ans]))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 1:\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(\" \".join([str(x) for x in ans]))\n            return\n    ans[1] = (h-4)*2\n    ans[0] = 2 - n\n    if ans[1] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(\" \".join([str(x) for x in ans]))\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649731887,
  "object": "edit"
}
2022-04-11 22:51:37.763147 fix spelling mistakes 2 ['\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 2:\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(" ".join([str(x) for x in ans]))\n            return\n    ans[1] = (h-2)*2\n    ans[0] = 2 - n\n    if ans[1] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(" ".join([str(x) for x in ans]))\n\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 1:\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(" ".join([str(x) for x in ans]))\n            return\n    ans[1] = (h-4)*2\n    ans[0] = 2 - n\n    if ans[1] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(" ".join([str(x) for x in ans]))\n\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-11 22:51:37.763268 size on output set 2
2022-04-11 22:51:37.763277 size on input set 2
2022-04-11 22:51:49.006780 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 1:\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(\" \".join([str(x) for x in ans]))\n            return\n    ans[1] = (h-4)*2 + n\n    ans[0] = 2\n    print(\" \".join([str(x) for x in ans]))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0, 0]\n    if h <= 1:\n        print(\" \".join([str(x) for x in ans[:2]]))\n        return\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n        print(\" \".join([str(x) for x in ans[:2]]))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(\" \".join([str(x) for x in ans[:2]]))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(\" \".join([str(x) for x in ans[:2]]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(\" \".join([str(x) for x in ans[:2]]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(\" \".join([str(x) for x in ans[:2]]))\n            return\n    ans[2] = (h-4)*2\n    ans[1] = 2 - n\n    if ans[2] < 0:\n        ans[1] = 2\n        ans[2] = 0\n    print(\" \".join([str(x) for x in ans[:2]]))\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649731898,
  "object": "edit"
}
2022-04-11 22:51:49.007003 fix syntax errors 2 ['\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 1:\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(" ".join([str(x) for x in ans]))\n            return\n    ans[1] = (h-4)*2 + n\n    ans[0] = 2\n    print(" ".join([str(x) for x in ans]))\n\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0, 0]\n    if h <= 1:\n        print(" ".join([str(x) for x in ans[:2]]))\n        return\n    if h == 2:\n        ans[0] = 1\n        ans[1] = 2\n        print(" ".join([str(x) for x in ans[:2]]))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(" ".join([str(x) for x in ans[:2]]))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(" ".join([str(x) for x in ans[:2]]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(" ".join([str(x) for x in ans[:2]]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(" ".join([str(x) for x in ans[:2]]))\n            return\n    ans[2] = (h-4)*2\n    ans[1] = 2 - n\n    if ans[2] < 0:\n        ans[1] = 2\n        ans[2] = 0\n    print(" ".join([str(x) for x in ans[:2]]))\n\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-11 22:51:53.714709 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 2:\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(\" \".join([str(x) for x in ans]))\n            return\n    ans[1] = (h-2)*2+4\n    ans[0] = 2 - n\n    if ans[1] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(\" \".join([str(x) for x in ans]))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 2: # h = 2\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 3: # h = 3\n        ans[0] = 0\n        ans[1] = 4\n        print(\" \".join([str(x) for x in ans]))\n        return\n    if h == 4: # h = 4\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(\" \".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(\" \".join([str(x) for x in ans]))\n            return\n    ans[1] = (h-2)*2 # h >= 5\n    ans[0] = 2 - n # h >= 5\n    if ans[1] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(\" \".join([str(x) for x in ans]))\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649731909,
  "object": "edit"
}
2022-04-11 22:51:53.714888 fix syntax errors 2 ['\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 2:\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 3:\n        ans[0] = 0\n        ans[1] = 4\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 4:\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(" ".join([str(x) for x in ans]))\n            return\n    ans[1] = (h-2)*2+4\n    ans[0] = 2 - n\n    if ans[1] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(" ".join([str(x) for x in ans]))\n\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    h, n, m = [int(x) for x in lines[0].split()]\n    ans = [0, 0]\n    if h <= 2: # h = 2\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 3: # h = 3\n        ans[0] = 0\n        ans[1] = 4\n        print(" ".join([str(x) for x in ans]))\n        return\n    if h == 4: # h = 4\n        if n >= 2 and m >= 4:\n            ans[0] = 2\n            ans[1] = 4\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n >= 1 and m >= 6:\n            ans[0] = 1\n            ans[1] = 6\n            print(" ".join([str(x) for x in ans]))\n            return\n        if n == 0 and m >= 8:\n            ans[0] = 0\n            ans[1] = 8\n            print(" ".join([str(x) for x in ans]))\n            return\n    ans[1] = (h-2)*2 # h >= 5\n    ans[0] = 2 - n # h >= 5\n    if ans[1] < 0:\n        ans[0] = 2\n        ans[1] = 0\n    print(" ".join([str(x) for x in ans]))\n\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-11 22:51:53.714934 size on output set 4
2022-04-11 22:51:53.714953 num operations 2
2022-04-11 22:51:53.714959 size on input set 1
2022-04-11 22:51:57.070036 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]  # h: height, n: number of horizontal cuts, m: number of vertical cuts\n    a = b = 0\n    for i in range(1,h+1):\n        a += 2*i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a, b)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = b = 0 \n    for i in range(1,h+1):\n        a += 2*i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a, b)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649731913,
  "object": "edit"
}
2022-04-11 22:51:57.070321 fix spelling mistakes 2 ["\n\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]  # h: height, n: number of horizontal cuts, m: number of vertical cuts\n    a = b = 0\n    for i in range(1,h+1):\n        a += 2*i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a, b)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = b = 0 \n    for i in range(1,h+1):\n        a += 2*i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a, b)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 22:51:57.070488 size on output set 2
2022-04-11 22:51:57.070496 size on input set 2
2022-04-11 22:52:04.527359 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]  # h: height, n: number of horizontal cuts, m: number of vertical cuts\n    a = b = 0\n    for i in range(1,h+1):\n        a += 2*i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a, b)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]  # h: height, n: number of horizontal cuts, m: number of vertical cuts\n    a = b = 0  # a: number of horizontal cuts, b: number of vertical cuts\n    for i in range(1, h+1):\n        a += 2*i  # number of horizontal cuts for each height\n        b += i  # number of vertical cuts for each height\n    a -= n if a > n else 0  # if a > n, subtract n from a\n    b -= m if b > m else 0  # if b > m, subtract m from b\n    print(a, b)  # print the number of horizontal and vertical cuts\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649731917,
  "object": "edit"
}
2022-04-11 22:52:04.527809 fix syntax errors 2 ["#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]  # h: height, n: number of horizontal cuts, m: number of vertical cuts\n    a = b = 0\n    for i in range(1,h+1):\n        a += 2*i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a, b)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]  # h: height, n: number of horizontal cuts, m: number of vertical cuts\n    a = b = 0  # a: number of horizontal cuts, b: number of vertical cuts\n    for i in range(1, h+1):\n        a += 2*i  # number of horizontal cuts for each height\n        b += i  # number of vertical cuts for each height\n    a -= n if a > n else 0  # if a > n, subtract n from a\n    b -= m if b > m else 0  # if b > m, subtract m from b\n    print(a, b)  # print the number of horizontal and vertical cuts\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 22:52:06.854571 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = b = 0\n    for i in range(1,h+1):\n        a += 2*i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a, b)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = b = 0\n    for i in range(1,h+1):\n        a += 2*i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a, b)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649731924,
  "object": "edit"
}
2022-04-11 22:52:06.855062 fix syntax errors 2 ["\n\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = b = 0\n    for i in range(1,h+1):\n        a += 2*i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a, b)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    h, n, m = [int(x) for x in sys.stdin.readline().split()]\n    a = b = 0\n    for i in range(1,h+1):\n        a += 2*i\n        b += i\n    if a <= n:\n        a = 0\n    else:\n        a -= n\n    if b <= m:\n        b = 0\n    else:\n        b -= m\n    print(a, b)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 22:52:06.855139 size on output set 3
2022-04-11 22:52:06.855186 num operations 2
2022-04-11 22:52:06.855198 size on input set 1
2022-04-11 22:52:16.519012 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport math\n\ndef get_smaller_brick_count(height, small_bricks, big_bricks, small_brick_height=1, big_brick_height=5):\n    height_small_bricks = (2 * height - 1) * height * small_brick_height\n    height_big_bricks = 2 * height * big_brick_height\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    height_small_bricks -= small_bricks * small_brick_height\n    height_big_bricks -= big_bricks * big_brick_height\n\n    if height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks * big_brick_height\n    else:\n        return 0, math.ceil(height_small_bricks / 4) * small_brick_height\n\nif __name__ == \"__main__\":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks))\n"
    },
    {
      "index": 1,
      "text": "\n\nimport math\n\ndef get_smaller_brick_count(height, small_bricks, big_bricks, small_brick_height=1, big_brick_height=5):\n    height_small_bricks = (2 * height - 1) * small_brick_height\n    height_big_bricks = 2 * height * big_brick_height\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    height_small_bricks -= small_bricks\n    height_big_bricks -= big_bricks\n\n    if height_small_bricks >= big_bricks * big_brick_height:\n        return height_small_bricks - big_bricks * big_brick_height, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / big_brick_height)\n\nif __name__ == \"__main__\":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks))\n"
    }
  ],
  "created": 1649731927,
  "object": "edit"
}
2022-04-11 22:52:16.519169 fix spelling mistakes 2 ['\n\nimport math\n\ndef get_smaller_brick_count(height, small_bricks, big_bricks, small_brick_height=1, big_brick_height=5):\n    height_small_bricks = (2 * height - 1) * height * small_brick_height\n    height_big_bricks = 2 * height * big_brick_height\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    height_small_bricks -= small_bricks * small_brick_height\n    height_big_bricks -= big_bricks * big_brick_height\n\n    if height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks * big_brick_height\n    else:\n        return 0, math.ceil(height_small_bricks / 4) * small_brick_height\n\nif __name__ == "__main__":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks))\n', '\n\nimport math\n\ndef get_smaller_brick_count(height, small_bricks, big_bricks, small_brick_height=1, big_brick_height=5):\n    height_small_bricks = (2 * height - 1) * small_brick_height\n    height_big_bricks = 2 * height * big_brick_height\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    height_small_bricks -= small_bricks\n    height_big_bricks -= big_bricks\n\n    if height_small_bricks >= big_bricks * big_brick_height:\n        return height_small_bricks - big_bricks * big_brick_height, big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / big_brick_height)\n\nif __name__ == "__main__":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks))\n']
2022-04-11 22:52:16.519248 size on output set 2
2022-04-11 22:52:16.519254 size on input set 2
2022-04-11 22:52:32.426414 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport math\n\ndef get_smaller_brick_count(height, small_bricks, big_bricks, small_brick_height = 1, big_brick_height = 5):\n    height_small_bricks = (2 * height - 1) * small_brick_height;\n    height_big_bricks = 2 * height * big_brick_height;\n\n    if small_bricks >= height_small_bricks: return 0, 0;\n\n    height_small_bricks -= small_bricks;\n    height_big_bricks -= big_bricks;\n\n    if height_small_bricks >= big_bricks * big_brick_height: return height_small_bricks - big_bricks * big_brick_height, big_bricks;\n    else: return 0, math.ceil(height_small_bricks / big_brick_height);\n\nif __name__ == \"__main__\":\n    height, small_bricks, big_bricks = map(int, input().split());\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks));\n"
    },
    {
      "index": 1,
      "text": "\nimport math\n\ndef get_smaller_brick_count(height, small_bricks, big_bricks, small_brick_height=1, big_brick_height=5):\n    height_small_bricks = (2 * height - 1) * small_brick_height  # \u0432\u044b\u0441\u043e\u0442\u0430 \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0438\u0437 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0445 \u043a\u0438\u0440\u043f\u0438\u0447\u0435\u0439\n    height_big_bricks = 2 * height * big_brick_height  # \u0432\u044b\u0441\u043e\u0442\u0430 \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0438\u0437 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043a\u0438\u0440\u043f\u0438\u0447\u0435\u0439\n\n    if small_bricks >= height_small_bricks:  # \u0435\u0441\u043b\u0438 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0445 \u043a\u0438\u0440\u043f\u0438\u0447\u0435\u0439 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0432\u044b\u0441\u043e\u0442\u044b\n        return 0, 0\n\n    height_small_bricks -= small_bricks  # \u0432\u044b\u0441\u043e\u0442\u0430 \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043d\u0435 \u0445\u0432\u0430\u0442\u0430\u0435\u0442 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0445 \u043a\u0438\u0440\u043f\u0438\u0447\u0435\u0439\n    height_big_bricks -= big_bricks  # \u0432\u044b\u0441\u043e\u0442\u0430 \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043d\u0435 \u0445\u0432\u0430\u0442\u0430\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043a\u0438\u0440\u043f\u0438\u0447\u0435\u0439\n\n    if height_small_bricks >= big_bricks * big_brick_height:  # \u0435\u0441\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043a\u0438\u0440\u043f\u0438\u0447\u0435\u0439 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0432\u044b\u0441\u043e\u0442\u044b\n        return height_small_bricks - big_bricks * big_brick_height, big_bricks\n    else:  # \u0435\u0441\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043a\u0438\u0440\u043f\u0438\u0447\u0435\u0439 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0432\u044b\u0441\u043e\u0442\u044b\n        return 0, math.ceil(height_small_bricks / big_brick_height)\n\nif __name__ == \"__main__\":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks))\n"
    }
  ],
  "created": 1649731936,
  "object": "edit"
}
2022-04-11 22:52:32.426540 fix syntax errors 2 ['\nimport math\n\ndef get_smaller_brick_count(height, small_bricks, big_bricks, small_brick_height = 1, big_brick_height = 5):\n    height_small_bricks = (2 * height - 1) * small_brick_height;\n    height_big_bricks = 2 * height * big_brick_height;\n\n    if small_bricks >= height_small_bricks: return 0, 0;\n\n    height_small_bricks -= small_bricks;\n    height_big_bricks -= big_bricks;\n\n    if height_small_bricks >= big_bricks * big_brick_height: return height_small_bricks - big_bricks * big_brick_height, big_bricks;\n    else: return 0, math.ceil(height_small_bricks / big_brick_height);\n\nif __name__ == "__main__":\n    height, small_bricks, big_bricks = map(int, input().split());\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks));\n', '\nimport math\n\ndef get_smaller_brick_count(height, small_bricks, big_bricks, small_brick_height=1, big_brick_height=5):\n    height_small_bricks = (2 * height - 1) * small_brick_height  # высота которую можно сделать из маленьких кирпичей\n    height_big_bricks = 2 * height * big_brick_height  # высота которую можно сделать из больших кирпичей\n\n    if small_bricks >= height_small_bricks:  # если маленьких кирпичей достаточно для постройки высоты\n        return 0, 0\n\n    height_small_bricks -= small_bricks  # высота которую не хватает маленьких кирпичей\n    height_big_bricks -= big_bricks  # высота которую не хватает больших кирпичей\n\n    if height_small_bricks >= big_bricks * big_brick_height:  # если больших кирпичей достаточно для постройки высоты\n        return height_small_bricks - big_bricks * big_brick_height, big_bricks\n    else:  # если больших кирпичей недостаточно для постройки высоты\n        return 0, math.ceil(height_small_bricks / big_brick_height)\n\nif __name__ == "__main__":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks))\n']
2022-04-11 22:52:45.106958 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport math\n\ndef get_smaller_brick_count(height, small_bricks, big_bricks, small_brick_height=1, big_brick_height=5):\n    height_small_bricks = (2 * height - 1) * height * small_brick_height\n    height_big_bricks = 2 * height * big_brick_height\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    height_small_bricks -= small_bricks * small_brick_height\n    height_big_bricks -= big_bricks * big_brick_height\n\n    if height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks * big_brick_height\n    else:\n        return 0, math.ceil(height_small_bricks / 4) * small_brick_height\n\nif __name__ == \"__main__\":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks))\n"
    },
    {
      "index": 1,
      "text": "\nimport math\n\ndef get_smaller_brick_count(height, small_bricks, big_bricks, small_brick_height=1, big_brick_height=5,\n                            height_small_bricks=None, height_big_bricks=None):\n    if height_small_bricks is None:\n        height_small_bricks = (2 * height - 1) * height * small_brick_height\n    if height_big_bricks is None:\n        height_big_bricks = 2 * height * big_brick_height\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    height_small_bricks = height_small_bricks - small_bricks * small_brick_height\n    height_big_bricks = height_big_bricks - big_bricks * big_brick_height\n\n    if height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks * big_brick_height, height_small_bricks, height_big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 4) * small_brick_height, height_small_bricks, height_big_bricks\n\nif __name__ == \"__main__\":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks))\n"
    }
  ],
  "created": 1649731952,
  "object": "edit"
}
2022-04-11 22:52:45.107353 fix syntax errors 2 ['\nimport math\n\ndef get_smaller_brick_count(height, small_bricks, big_bricks, small_brick_height=1, big_brick_height=5):\n    height_small_bricks = (2 * height - 1) * height * small_brick_height\n    height_big_bricks = 2 * height * big_brick_height\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    height_small_bricks -= small_bricks * small_brick_height\n    height_big_bricks -= big_bricks * big_brick_height\n\n    if height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks * big_brick_height\n    else:\n        return 0, math.ceil(height_small_bricks / 4) * small_brick_height\n\nif __name__ == "__main__":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks))\n', '\nimport math\n\ndef get_smaller_brick_count(height, small_bricks, big_bricks, small_brick_height=1, big_brick_height=5,\n                            height_small_bricks=None, height_big_bricks=None):\n    if height_small_bricks is None:\n        height_small_bricks = (2 * height - 1) * height * small_brick_height\n    if height_big_bricks is None:\n        height_big_bricks = 2 * height * big_brick_height\n\n    if small_bricks >= height_small_bricks:\n        return 0, 0\n\n    height_small_bricks = height_small_bricks - small_bricks * small_brick_height\n    height_big_bricks = height_big_bricks - big_bricks * big_brick_height\n\n    if height_small_bricks >= big_bricks * 4:\n        return height_small_bricks - big_bricks * 4, big_bricks * big_brick_height, height_small_bricks, height_big_bricks\n    else:\n        return 0, math.ceil(height_small_bricks / 4) * small_brick_height, height_small_bricks, height_big_bricks\n\nif __name__ == "__main__":\n    height, small_bricks, big_bricks = map(int, input().split())\n    print(*get_smaller_brick_count(height, small_bricks, big_bricks))\n']
2022-04-11 22:52:45.107385 size on output set 4
2022-04-11 22:52:45.107399 num operations 2
2022-04-11 22:52:45.107403 size on input set 1
2022-04-11 22:52:51.473660 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Base case: height 1\n    if H == 1:\n        A = N\n        B = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in top layer\n        top_layer = 2 * H\n        # Calculate number of bricks in bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H\n        # Calculate number of bricks in top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of $2 \\times 2$-bricks needed\n        A = needed_bricks // 2\n        # Calculate number of $4 \\times 2$-bricks needed\n        B = needed_bricks // 4\n        # If $2 \\times 2$-bricks needed is greater than $4 \\times 2$-bricks needed,\n        # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1.\n        if A > B:\n            A += 1\n            B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Base case: height 1\n    if H == 1:\n        A = N\n        B = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in the top layer\n        top_layer = 2 * H\n        # Calculate number of bricks in the bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H\n        # Calculate number of bricks in the top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in the bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in the whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in the existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed to build the pyramid\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of $2 \\times 2$-bricks needed\n        A = needed_bricks // 2\n        # Calculate number of $4 \\times 2$-bricks needed\n        B = needed_bricks // 4\n        # If $2 \\times 2$-bricks needed is greater than $4 \\times 2$-bricks needed,\n        # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1\n        if A > B:\n            A += 1\n            B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649731965,
  "object": "edit"
}
2022-04-11 22:52:51.473942 fix spelling mistakes 2 ['\n\nimport sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Base case: height 1\n    if H == 1:\n        A = N\n        B = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in top layer\n        top_layer = 2 * H\n        # Calculate number of bricks in bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H\n        # Calculate number of bricks in top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of $2 \\times 2$-bricks needed\n        A = needed_bricks // 2\n        # Calculate number of $4 \\times 2$-bricks needed\n        B = needed_bricks // 4\n        # If $2 \\times 2$-bricks needed is greater than $4 \\times 2$-bricks needed,\n        # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1.\n        if A > B:\n            A += 1\n            B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Base case: height 1\n    if H == 1:\n        A = N\n        B = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in the top layer\n        top_layer = 2 * H\n        # Calculate number of bricks in the bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H\n        # Calculate number of bricks in the top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in the bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in the whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in the existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed to build the pyramid\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of $2 \\times 2$-bricks needed\n        A = needed_bricks // 2\n        # Calculate number of $4 \\times 2$-bricks needed\n        B = needed_bricks // 4\n        # If $2 \\times 2$-bricks needed is greater than $4 \\times 2$-bricks needed,\n        # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1\n        if A > B:\n            A += 1\n            B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-11 22:52:51.474159 size on output set 2
2022-04-11 22:52:51.474173 size on input set 2
2022-04-11 22:53:08.417692 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Base case: height 1\n    if H == 1:\n        A = N\n        B = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in top layer\n        top_layer = 2 * H\n        # Calculate number of bricks in bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H\n        # Calculate number of bricks in top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of $2 \\times 2$-bricks needed\n        A = needed_bricks // 2\n        # Calculate number of $4 \\times 2$-bricks needed\n        B = needed_bricks // 4\n        # If $2 \\times 2$-bricks needed is greater than $4 \\times 2$-bricks needed,\n        # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1.\n        if A > B:\n            A += 1\n            B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    # Calculate number of bricks in top layer\n    top_layer = 2 * H\n    # Calculate number of bricks in bottom layer\n    bottom_layer = 2\n    # Calculate number of layers\n    layers = H\n    # Calculate number of bricks in top half\n    top_half = top_layer + bottom_layer\n    # Calculate number of bricks in bottom half\n    bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n    # Calculate number of bricks in whole pyramid\n    total_bricks = top_half + bottom_half\n    # Calculate number of bricks in existing pyramid\n    existing_bricks = 2 * N + 4 * M\n    # Calculate number of bricks needed\n    needed_bricks = total_bricks - existing_bricks\n    # Calculate number of $2 \\times 2$-bricks needed\n    A = needed_bricks // 2\n    # Calculate number of $4 \\times 2$-bricks needed\n    B = needed_bricks // 4\n    # If $2 \\times 2$-bricks needed is greater than $4 \\times 2$-bricks needed,\n    # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1.\n    if A > B:\n        A += 1\n        B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649731971,
  "object": "edit"
}
2022-04-11 22:53:08.417821 fix syntax errors 2 ['import sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    A, B = 0, 0\n    # Base case: height 1\n    if H == 1:\n        A = N\n        B = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in top layer\n        top_layer = 2 * H\n        # Calculate number of bricks in bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H\n        # Calculate number of bricks in top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of $2 \\times 2$-bricks needed\n        A = needed_bricks // 2\n        # Calculate number of $4 \\times 2$-bricks needed\n        B = needed_bricks // 4\n        # If $2 \\times 2$-bricks needed is greater than $4 \\times 2$-bricks needed,\n        # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1.\n        if A > B:\n            A += 1\n            B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    # Calculate number of bricks in top layer\n    top_layer = 2 * H\n    # Calculate number of bricks in bottom layer\n    bottom_layer = 2\n    # Calculate number of layers\n    layers = H\n    # Calculate number of bricks in top half\n    top_half = top_layer + bottom_layer\n    # Calculate number of bricks in bottom half\n    bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n    # Calculate number of bricks in whole pyramid\n    total_bricks = top_half + bottom_half\n    # Calculate number of bricks in existing pyramid\n    existing_bricks = 2 * N + 4 * M\n    # Calculate number of bricks needed\n    needed_bricks = total_bricks - existing_bricks\n    # Calculate number of $2 \\times 2$-bricks needed\n    A = needed_bricks // 2\n    # Calculate number of $4 \\times 2$-bricks needed\n    B = needed_bricks // 4\n    # If $2 \\times 2$-bricks needed is greater than $4 \\times 2$-bricks needed,\n    # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1.\n    if A > B:\n        A += 1\n        B -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-11 22:53:17.942872 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    a, b = 0, 0\n    # Base case: height 1\n    if H == 1:\n        a = N\n        b = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in the top layer\n        top_layer = 2 * H\n        # Calculate number of bricks in the bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H\n        # Calculate number of bricks in the top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in the bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in the whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in the existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed to build the pyramid\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of $2 \\times 2$-bricks needed\n        a = needed_bricks // 2\n        # Calculate number of $4 \\times 2$-bricks needed\n        b = needed_bricks // 4\n        # If $2 \\times 2$-bricks needed is greater than $4 \\times 2$-bricks needed,\n        # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1\n        if a > b:\n            a += 1\n            b -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    a, b = 0, 0\n    # Base case: height 1\n    if H == 1:\n        a = N\n        b = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in the top layer\n        top_layer = 2 * H\n        # Calculate number of bricks in the bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H\n        # Calculate number of bricks in the top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in the bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in the whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in the existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed to build the pyramid\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of $2 \\times 2$-bricks needed\n        a = needed_bricks // 2\n        # Calculate number of $4 \\times 2$-bricks needed\n        b = needed_bricks // 4\n        # If $2 \\times 2$-bricks needed is greater than $4 \\times 2$-bricks needed,\n        # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1\n        if a > b:\n            a += 1\n            b -= 1\n    # Print output\n    print(a, b)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649731988,
  "object": "edit"
}
2022-04-11 22:53:17.943770 fix syntax errors 2 ['import sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    a, b = 0, 0\n    # Base case: height 1\n    if H == 1:\n        a = N\n        b = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in the top layer\n        top_layer = 2 * H\n        # Calculate number of bricks in the bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H\n        # Calculate number of bricks in the top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in the bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in the whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in the existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed to build the pyramid\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of $2 \\times 2$-bricks needed\n        a = needed_bricks // 2\n        # Calculate number of $4 \\times 2$-bricks needed\n        b = needed_bricks // 4\n        # If $2 \\times 2$-bricks needed is greater than $4 \\times 2$-bricks needed,\n        # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1\n        if a > b:\n            a += 1\n            b -= 1\n    # Print output\n    print(A, B)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\n# Set max recursion limit\nsys.setrecursionlimit(100000)\n\n\ndef main():\n    # Read input\n    H, N, M = [int(i) for i in input().split()]\n    a, b = 0, 0\n    # Base case: height 1\n    if H == 1:\n        a = N\n        b = M\n    # Recursive case: height > 1\n    else:\n        # Calculate number of bricks in the top layer\n        top_layer = 2 * H\n        # Calculate number of bricks in the bottom layer\n        bottom_layer = 2\n        # Calculate number of layers\n        layers = H\n        # Calculate number of bricks in the top half\n        top_half = top_layer + bottom_layer\n        # Calculate number of bricks in the bottom half\n        bottom_half = top_layer + bottom_layer + 4 * (layers - 2)\n        # Calculate number of bricks in the whole pyramid\n        total_bricks = top_half + bottom_half\n        # Calculate number of bricks in the existing pyramid\n        existing_bricks = 2 * N + 4 * M\n        # Calculate number of bricks needed to build the pyramid\n        needed_bricks = total_bricks - existing_bricks\n        # Calculate number of $2 \\times 2$-bricks needed\n        a = needed_bricks // 2\n        # Calculate number of $4 \\times 2$-bricks needed\n        b = needed_bricks // 4\n        # If $2 \\times 2$-bricks needed is greater than $4 \\times 2$-bricks needed,\n        # increase $2 \\times 2$-bricks needed by 1 and decrease $4 \\times 2$-bricks needed by 1\n        if a > b:\n            a += 1\n            b -= 1\n    # Print output\n    print(a, b)\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-11 22:53:17.944090 size on output set 4
2022-04-11 22:53:17.944141 num operations 2
2022-04-11 22:53:17.944151 size on input set 1
2022-04-11 22:53:28.937713 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nh, n, m = map(int, input().split()) # h: height of the wall, n: number of bricks, m: number of bricks with a hole\n\na = 0 # number of bricks without a hole\nb = 0 # number of bricks with a hole\n\nfor i in range(1, h+1):\n    a += (2*i - 1) # number of bricks without a hole for each row\n    b += (2*i) # number of bricks with a hole for each row\n\nif a <= n:\n    print(0, m) # all bricks with a hole\nelse:\n    a -= n # number of bricks without a hole\n    if a <= m*2:\n        print(a//2, m - (a//2)) # number of bricks without a hole and with a hole\n    else:\n        print(m, 0) # all bricks without a hole\n"
    },
    {
      "index": 1,
      "text": "\n\nh, n, m = map(int, input().split()) # h: height of the building, n: number of the broken bricks, m: number of the bricks that can be removed\n\na = 0 # number of the bricks that can be removed\nb = 0 # number of the bricks that can be removed\n\nfor i in range(1, h+1): # calculate the number of the bricks that can be removed\n    a += (2*i - 1) # number of the bricks that can be removed in the odd layer\n    b += (2*i) # number of the bricks that can be removed in the even layer\n\nif a <= n: # if the number of the bricks that can be removed is less than the number of the broken bricks, the building cannot be removed\n    print(0, m) # print the number of the bricks that can be removed\nelse:\n    a -= n # calculate the number of the bricks that can be removed\n    if a <= m*2: # if the number of the bricks that can be removed is less than the number of the bricks that can be removed\n        print(a//2, m - (a//2)) # print the number of the bricks that can be removed\n    else:\n        print(m, 0) # print the number of the bricks that can be removed\n"
    }
  ],
  "created": 1649731998,
  "object": "edit"
}
2022-04-11 22:53:28.937914 fix spelling mistakes 2 ['\n\nh, n, m = map(int, input().split()) # h: height of the wall, n: number of bricks, m: number of bricks with a hole\n\na = 0 # number of bricks without a hole\nb = 0 # number of bricks with a hole\n\nfor i in range(1, h+1):\n    a += (2*i - 1) # number of bricks without a hole for each row\n    b += (2*i) # number of bricks with a hole for each row\n\nif a <= n:\n    print(0, m) # all bricks with a hole\nelse:\n    a -= n # number of bricks without a hole\n    if a <= m*2:\n        print(a//2, m - (a//2)) # number of bricks without a hole and with a hole\n    else:\n        print(m, 0) # all bricks without a hole\n', '\n\nh, n, m = map(int, input().split()) # h: height of the building, n: number of the broken bricks, m: number of the bricks that can be removed\n\na = 0 # number of the bricks that can be removed\nb = 0 # number of the bricks that can be removed\n\nfor i in range(1, h+1): # calculate the number of the bricks that can be removed\n    a += (2*i - 1) # number of the bricks that can be removed in the odd layer\n    b += (2*i) # number of the bricks that can be removed in the even layer\n\nif a <= n: # if the number of the bricks that can be removed is less than the number of the broken bricks, the building cannot be removed\n    print(0, m) # print the number of the bricks that can be removed\nelse:\n    a -= n # calculate the number of the bricks that can be removed\n    if a <= m*2: # if the number of the bricks that can be removed is less than the number of the bricks that can be removed\n        print(a//2, m - (a//2)) # print the number of the bricks that can be removed\n    else:\n        print(m, 0) # print the number of the bricks that can be removed\n']
2022-04-11 22:53:28.937938 size on output set 2
2022-04-11 22:53:28.937943 size on input set 2
2022-04-11 22:53:38.638753 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nh, n, m = map(int, input().split()) # h: height of the wall, n: number of bricks, m: number of bricks with a hole\n\na = 0 # number of bricks without a hole\nb = 0 # number of bricks with a hole\n\nfor i in range(1, h+1):\n    a += (2*i - 1) # number of bricks without a hole for each row\n    b += (2*i) # number of bricks with a hole for each row\n\nif a <= n:\n    print(0, m) # all bricks with a hole\nelse:\n    a -= n # number of bricks without a hole\n    if a <= m*2:\n        print(a//2, m - (a//2)) # number of bricks without a hole and with a hole\n    else:\n        print(m, 0) # all bricks without a hole\n"
    },
    {
      "index": 1,
      "text": "\n\nh, n, m = map(int, input().split())  # h: height of the wall, n: number of bricks, m: number of bricks with a hole\n\na = 0  # number of bricks without a hole\nb = 0  # number of bricks with a hole\n\nfor i in range(1, h+1):\n    a += (2*i - 1)  # number of bricks without a hole for each row\n    b += (2*i)  # number of bricks with a hole for each row\n\nif a <= n:\n    print(0, m)  # all bricks with a hole\nelse:\n    a -= n  # number of bricks without a hole\n    if a <= m*2:\n        print(a//2, m - (a//2))  # number of bricks without a hole and with a hole\n    else:\n        print(m, 0)  # all bricks without a hole\n"
    }
  ],
  "created": 1649732009,
  "object": "edit"
}
2022-04-11 22:53:38.639072 fix syntax errors 2 ['\nh, n, m = map(int, input().split()) # h: height of the wall, n: number of bricks, m: number of bricks with a hole\n\na = 0 # number of bricks without a hole\nb = 0 # number of bricks with a hole\n\nfor i in range(1, h+1):\n    a += (2*i - 1) # number of bricks without a hole for each row\n    b += (2*i) # number of bricks with a hole for each row\n\nif a <= n:\n    print(0, m) # all bricks with a hole\nelse:\n    a -= n # number of bricks without a hole\n    if a <= m*2:\n        print(a//2, m - (a//2)) # number of bricks without a hole and with a hole\n    else:\n        print(m, 0) # all bricks without a hole\n', '\n\nh, n, m = map(int, input().split())  # h: height of the wall, n: number of bricks, m: number of bricks with a hole\n\na = 0  # number of bricks without a hole\nb = 0  # number of bricks with a hole\n\nfor i in range(1, h+1):\n    a += (2*i - 1)  # number of bricks without a hole for each row\n    b += (2*i)  # number of bricks with a hole for each row\n\nif a <= n:\n    print(0, m)  # all bricks with a hole\nelse:\n    a -= n  # number of bricks without a hole\n    if a <= m*2:\n        print(a//2, m - (a//2))  # number of bricks without a hole and with a hole\n    else:\n        print(m, 0)  # all bricks without a hole\n']
2022-04-11 22:53:53.578459 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nh, n, m = map(int, input().split()) # h: height of the building, n: number of the broken bricks, m: number of the bricks that can be removed in the odd layer\n\na = 0 # number of the bricks that can be removed in the odd layer\nb = 0 # number of the bricks that can be removed in the even layer\n\nfor i in range(1, h+1): # calculate the number of the bricks that can be removed\n    a += (2*i - 1) # number of the bricks that can be removed in the odd layer\n    b += (2*i) # number of the bricks that can be removed in the even layer\n\nif a <= n: # if the number of the bricks that can be removed is less than the number of the broken bricks, the building cannot be removed\n    print(0, m) # print the number of the bricks that can be removed\nelse:\n    a -= n # calculate the number of the bricks that can be removed\n    if a <= m*2: # if the number of the bricks that can be removed is less than the number of the bricks that can be removed\n        print(a//2, m - (a//2)) # print the number of the bricks that can be removed\n    else:\n        print(m, 0) # print the number of the bricks that can be removed\n"
    },
    {
      "index": 1,
      "text": "\n\nh, n, m = map(int, input().split()) # h: height of the building, n: number of the broken bricks, m: number of the bricks that can be removed.\n\na = 0 # number of the bricks that can be removed.\nb = 0 # number of the bricks that can be removed.\n\nfor i in range(1, h+1): # calculate the number of the bricks that can be removed.\n    a += (2*i - 1) # number of the bricks that can be removed in the odd layer.\n    b += (2*i) # number of the bricks that can be removed in the even layer.\n\nif a <= n: # if the number of the bricks that can be removed is less than the number of the broken bricks, the building cannot be removed.\n    print(0, m) # print the number of the bricks that can be removed.\nelse:\n    a -= n # calculate the number of the bricks that can be removed.\n    if a <= m*2: # if the number of the bricks that can be removed is less than the number of the bricks that can be removed.\n        print(a//2, m - (a//2)) # print the number of the bricks that can be removed.\n    else:\n        print(m, 0) # print the number of the bricks that can be removed.\n"
    }
  ],
  "created": 1649732018,
  "object": "edit"
}
2022-04-11 22:53:53.578799 fix syntax errors 2 ['\n\nh, n, m = map(int, input().split()) # h: height of the building, n: number of the broken bricks, m: number of the bricks that can be removed in the odd layer\n\na = 0 # number of the bricks that can be removed in the odd layer\nb = 0 # number of the bricks that can be removed in the even layer\n\nfor i in range(1, h+1): # calculate the number of the bricks that can be removed\n    a += (2*i - 1) # number of the bricks that can be removed in the odd layer\n    b += (2*i) # number of the bricks that can be removed in the even layer\n\nif a <= n: # if the number of the bricks that can be removed is less than the number of the broken bricks, the building cannot be removed\n    print(0, m) # print the number of the bricks that can be removed\nelse:\n    a -= n # calculate the number of the bricks that can be removed\n    if a <= m*2: # if the number of the bricks that can be removed is less than the number of the bricks that can be removed\n        print(a//2, m - (a//2)) # print the number of the bricks that can be removed\n    else:\n        print(m, 0) # print the number of the bricks that can be removed\n', '\n\nh, n, m = map(int, input().split()) # h: height of the building, n: number of the broken bricks, m: number of the bricks that can be removed.\n\na = 0 # number of the bricks that can be removed.\nb = 0 # number of the bricks that can be removed.\n\nfor i in range(1, h+1): # calculate the number of the bricks that can be removed.\n    a += (2*i - 1) # number of the bricks that can be removed in the odd layer.\n    b += (2*i) # number of the bricks that can be removed in the even layer.\n\nif a <= n: # if the number of the bricks that can be removed is less than the number of the broken bricks, the building cannot be removed.\n    print(0, m) # print the number of the bricks that can be removed.\nelse:\n    a -= n # calculate the number of the bricks that can be removed.\n    if a <= m*2: # if the number of the bricks that can be removed is less than the number of the bricks that can be removed.\n        print(a//2, m - (a//2)) # print the number of the bricks that can be removed.\n    else:\n        print(m, 0) # print the number of the bricks that can be removed.\n']
2022-04-11 22:53:53.578860 size on output set 4
2022-04-11 22:53:53.578877 num operations 2
2022-04-11 22:53:53.578882 size on input set 1
2022-04-11 22:53:56.973799 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x2 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h_n_m = input().split()\n    h_n_m = [int(x) for x in h_n_m]\n    h = h_n_m[0]\n    n = h_n_m[1]\n    m = h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    if h == 1:\n        print(0, 0)\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print(0, 0)\n                else:\n                    print(1, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x1 and number of\n    bricks of size 4x1, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h_n_m = input().split()\n    h_n_m = [int(x) for x in h_n_m]\n    h = h_n_m[0]\n    n = h_n_m[1]\n    m = h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    #print(h, n, m)\n    if h == 1:\n        print(0, 0)\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print(0, 0)\n                else:\n                    print(1, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649732033,
  "object": "edit"
}
2022-04-11 22:53:56.974190 fix spelling mistakes 2 ["\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x2 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h_n_m = input().split()\n    h_n_m = [int(x) for x in h_n_m]\n    h = h_n_m[0]\n    n = h_n_m[1]\n    m = h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    if h == 1:\n        print(0, 0)\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print(0, 0)\n                else:\n                    print(1, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x1 and number of\n    bricks of size 4x1, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h_n_m = input().split()\n    h_n_m = [int(x) for x in h_n_m]\n    h = h_n_m[0]\n    n = h_n_m[1]\n    m = h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    #print(h, n, m)\n    if h == 1:\n        print(0, 0)\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print(0, 0)\n                else:\n                    print(1, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 22:53:56.974226 size on output set 2
2022-04-11 22:53:56.974234 size on input set 2
2022-04-11 22:54:10.713489 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x2 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h, n, m = [int(x) for x in input().split()]\n    extra_2 = 0\n    extra_4 = 0\n    if h == 1 or (h == 2 and n % 2 == 0) or (h == 3 and n % 2 == 1):\n        print(0, 0, sep=' ')\n    elif h > 1 and h % 2 == 0:\n        extra_2 = 0 if n % 2 == 0 else 1\n        extra_4 = 0 if (h//2) - 1 <= m else (h//2) - 1 - m\n        print(extra_2, extra_4, sep=' ')\n    elif h > 1 and h % 2 == 1:\n        extra_2 = 1 if n % 2 == 0 else 0\n        extra_4 = 0 if (h//2) - 1 <= m else (h//2) - 1 - m\n        print(extra_2, extra_4, sep=' ')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x2 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h_n_m = list(map(int, input().split()))\n    h = h_n_m[0]; n = h_n_m[1]; m = h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    if h == 1:\n        print(0, 0)\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print(0, 0)\n                else:\n                    print(1, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649732037,
  "object": "edit"
}
2022-04-11 22:54:10.713885 fix syntax errors 2 ["\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x2 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h, n, m = [int(x) for x in input().split()]\n    extra_2 = 0\n    extra_4 = 0\n    if h == 1 or (h == 2 and n % 2 == 0) or (h == 3 and n % 2 == 1):\n        print(0, 0, sep=' ')\n    elif h > 1 and h % 2 == 0:\n        extra_2 = 0 if n % 2 == 0 else 1\n        extra_4 = 0 if (h//2) - 1 <= m else (h//2) - 1 - m\n        print(extra_2, extra_4, sep=' ')\n    elif h > 1 and h % 2 == 1:\n        extra_2 = 1 if n % 2 == 0 else 0\n        extra_4 = 0 if (h//2) - 1 <= m else (h//2) - 1 - m\n        print(extra_2, extra_4, sep=' ')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x2 and number of\n    bricks of size 4x2, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h_n_m = list(map(int, input().split()))\n    h = h_n_m[0]; n = h_n_m[1]; m = h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    if h == 1:\n        print(0, 0)\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print(0, 0)\n                else:\n                    print(1, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 22:54:13.220968 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x1 and number of\n    bricks of size 4x1, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h_n_m = input().split()\n    h_n_m = [int(x) for x in h_n_m]\n    h = h_n_m[0]\n    n = h_n_m[1]\n    m = h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    # print(h, n, m)\n    if h == 1:\n        print(0, 0)\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print(0, 0)\n                else:\n                    print(1, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x1 and number of\n    bricks of size 4x1, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h_n_m = input().split()\n    h_n_m = [int(x) for x in h_n_m]\n    h = h_n_m[0]\n    n = h_n_m[1]\n    m = h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    # print(h, n, m)\n    if h == 1:\n        print(0, 0)\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print(0, 0)\n                else:\n                    print(1, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649732050,
  "object": "edit"
}
2022-04-11 22:54:13.221300 fix syntax errors 2 ["\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x1 and number of\n    bricks of size 4x1, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h_n_m = input().split()\n    h_n_m = [int(x) for x in h_n_m]\n    h = h_n_m[0]\n    n = h_n_m[1]\n    m = h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    # print(h, n, m)\n    if h == 1:\n        print(0, 0)\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print(0, 0)\n                else:\n                    print(1, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    '''\n    Given height of the pyramid, number of bricks of size 2x1 and number of\n    bricks of size 4x1, return the number of bricks needed to complete the\n    pyramid using as few extra bricks as possible.\n    '''\n    h_n_m = input().split()\n    h_n_m = [int(x) for x in h_n_m]\n    h = h_n_m[0]\n    n = h_n_m[1]\n    m = h_n_m[2]\n    extra_2 = 0\n    extra_4 = 0\n    # print(h, n, m)\n    if h == 1:\n        print(0, 0)\n    elif h > 1:\n        if h % 2 == 0:\n            if h == 2:\n                if n % 2 == 0:\n                    print(0, 0)\n                else:\n                    print(1, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 0\n                else:\n                    extra_2 = 1\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        else:\n            if h == 3:\n                if n % 2 == 0:\n                    print(1, 0)\n                else:\n                    print(0, 0)\n            else:\n                if n % 2 == 0:\n                    extra_2 = 1\n                else:\n                    extra_2 = 0\n                if (h//2) - 1 <= m:\n                    extra_4 = 0\n                else:\n                    extra_4 = (h//2) - 1 - m\n        print(extra_2, extra_4)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 22:54:13.221588 size on output set 3
