["\n\ninp = input().split()\nN = int(inp[0])\nM = int(inp[1])\nif N > M:\n    print(\"Dr. Chaz needs\", N - M, \"more piece[s] of chicken!\")\nelse:\n    print(\"Dr. Chaz will have\", M - N, \"piece[s] of chicken left over!\")\n", "\n\nn, m = map(int, input().split())\n\nif n > m:\n    print(\"Dr. Chaz needs\", n-m, \"more piece[s] of chicken!\")\nelse:\n    print(\"Dr. Chaz will have\", m-n, \"piece[s] of chicken left over!\")\n", "\n\nn, m = map(int, input().split())\n\nif n > m:\n    print(\"Dr. Chaz needs\", n-m, \"more piece[s] of chicken!\") #print the difference of n and m with the word \"more\"\nelse:\n    print(\"Dr. Chaz will have\", m-n, \"piece[s] of chicken left over!\") #print the difference of m and n\n", "\nN, M = map(int, input().split())\n\nif N > M:\n    print('Dr. Chaz needs {} more pieces of chicken!'.format(N - M))\nelse:\n    print('Dr. Chaz will have {} piece{} of chicken left over!'.format(M - N, 's' if (M - N) != 1 else '')) \n", "\n\n#The following is the solution to the problem: https://open.kattis.com/problems/filefragmentation\n\nn = int(input())\n\nfor i in range(n):\n    file_name, file_size, num_fragments = input().split()\n    file_size = int(file_size)\n    num_fragments = int(num_fragments)\n    fragments = list(map(int, input().split()))\n    fragments.sort()\n    sum_fragments = sum(fragments)\n    if (sum_fragments > file_size):\n        print(\"{} {}\".format(file_name, \"INCONSISTENT\"))\n    else:\n        print(\"{} {}\".format(file_name, file_size - sum_fragments))\n", "\n\n#The following is the solution to the problem.\n\nn, m = map(int, input().split())\n\nif (n < m):\n    print(\"Dr. Chaz needs {} more piece[s] of chicken!\".format(m-n))\nelif (n > m):\n    print(\"Dr. Chaz will have {} piece[s] of chicken left over!\".format(n-m))\n", "\n\n# The following is the solution to the problem: https://open.kattis.com/problems/chicken\n\nn, m = map(int, input().split())\n\nif (n < m):\n    print(\"Dr. Chaz needs {} more piece[s] of chicken!\".format(m - n))\nelif (n > m):\n    print(\"Dr. Chaz will have {} piece[s] of chicken left over!\".format(n - m))\n", "\nn, m = map(int, input().split())\n\nif m >= n:\n    print(\"Dr. Chaz will have {} piece{} of chicken left over!\".format(m-n, \"\" if m-n == 1 else \"s\")) \nelse:\n    print(\"Dr. Chaz needs {} more piece{} of chicken!\".format(n-m, \"\" if n-m == 1 else \"s\"))\n", "\n\nn, m = map(int, input().split())\n\nleftover = m - n\n\nif leftover > 0:\n    print(\"Dr. Chaz will have %d piece%s of chicken left over!\" % (leftover, \"s\" if leftover != 1 else \"\")\nelse:\n    print(\"Dr. Chaz needs %d more piece%s of chicken!\" % (-leftover, \"s\" if leftover != -1 else \"\")\n", "\n\nn, m = map(int, input().split())\n\nif n > m:\n    print(\"Dr. Chaz needs\", n-m, \"more piece[s] of chicken!\")  # print the difference of n and m\nelse:\n    print(\"Dr. Chaz will have\", m-n, \"piece[s] of chicken left over!\")  # print the difference of m and n\n", "\nN, M = map(int, input().split())\n\nif N > M:\n    print('Dr. Chaz needs {} more pieces of chicken!'.format(N - M))\nelse:\n    print('Dr. Chaz will have {} piece{} of chicken left over!'.format(M - N, 's' if (M - N) != 1 else ''))\n", "\nn, m = map(int, input().split())\n\nleftover = m - n\n\nif leftover > 0:\n    print(\"Dr. Chaz will have %d piece%s of chicken left over!\" % (leftover, \"s\" if leftover != 1 else \"\"))  # noqa\nelse:\n    print(\"Dr. Chaz needs %d more piece%s of chicken!\" % (-leftover, \"s\" if leftover != -1 else \"\"))\n", "\n\nN, M = [int(x) for x in input().split()]\n\nif N > M:\n    print(\"Dr. Chaz needs {} more piece[s] of chicken!\".format(N - M))\nelse:\n    print(\"Dr. Chaz will have {} piece[s] of chicken left over!\".format(M - N))\n", "\n\nn, m = map(int, input().split())\n\nif m >= n:\n    print(\"Dr. Chaz will have {} piece{} of chicken left over!\".format(m-n, \"\" if m-n == 1 else \"s\"))\nelse:\n    print(\"Dr. Chaz needs {} more piece{} of chicken!\".format(n-m, \"\" if n-m == 1 else \"s\"))\n", "\nN, M = [int(x) for x in input().split()]\n\nif N > M:\n    print(\"Dr. Chaz needs {} more piece of chicken!\".format(N - M))\nelse:\n    print(\"Dr. Chaz will have {} piece of chicken left over!\".format(M - N))\n", "\nN, M = map(int, input().split())\n\nif N > M:\n    print('Dr. Chaz needs {} more piece{} of chicken!'.format(N - M, 's' if (N - M) > 1 else ''))\nelse:\n    print('Dr. Chaz will have {} piece{} of chicken left over!'.format(M - N, 's' if (M - N) > 1 else ''))\n", "\n\nn,m=map(int,input().split())\nif n>m:\n    print(\"Dr. Chaz needs\",n-m,\"more piece of chicken!\") \nelif n<m:\n    print(\"Dr. Chaz will have\",m-n,\"piece of chicken left over!\")\n"]