2022-04-12 01:22:22.845498 num operations 2
2022-04-12 01:22:22.845518 size on input set 1
2022-04-12 01:22:27.382166 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Solved by: Raul Gonzalez\n# Date: 4/12/2020\n# Time: 12:40pm\n\ndef check_valid(board, N):\n    for row in range(N):\n        for col in range(N):\n            for i in range(N):\n                if (row != i and col != i):\n                    if (board[row][col] == board[row][i] or board[row][col] == board[i][col]):\n                        return False\n                    elif (board[row][col] == board[row - i][col - i] or board[row][col] == board[row + i][col - i]):\n                        return False\n                    elif (board[row][col] == board[row - i][col + i] or board[row][col] == board[row + i][col + i]):\n                        return False\n    return True\n\nN = int(input())\nboard = [[0 for i in range(N)] for j in range(N)]\nfor i in range(N):\n    x, y = input().split()\n    board[int(x)][int(y)] = 1\n\nif (check_valid(board, N)):\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n"
    },
    {
      "index": 1,
      "text": "\n\n# Solved by: Raul Gonzalez (https://github.com/RaulGonzalezG)\n# Date: 4/12/2020 (MM/DD/YYYY)\n# Time: 12:40pm (HH:MM:SS)\n\ndef check_valid(board, N):\n    for row in range(N):\n        for col in range(N):\n            for i in range(N):\n                if (row != i and col != i):\n                    if (board[row][col] == board[row][i] or board[row][col] == board[i][col]):\n                        return False\n                    elif (board[row][col] == board[row - i][col - i] or board[row][col] == board[row + i][col - i]):\n                        return False\n                    elif (board[row][col] == board[row - i][col + i] or board[row][col] == board[row + i][col + i]):\n                        return False\n    return True\n\nN = int(input())\nboard = [[0 for i in range(N)] for j in range(N)]\nfor i in range(N):\n    x, y = input().split()\n    board[int(x)][int(y)] = 1\n\nif (check_valid(board, N)):\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n"
    }
  ],
  "created": 1649740944,
  "object": "edit"
}
2022-04-12 01:22:27.382352 fix spelling mistakes 2 ['\n\n# Solved by: Raul Gonzalez\n# Date: 4/12/2020\n# Time: 12:40pm\n\ndef check_valid(board, N):\n    for row in range(N):\n        for col in range(N):\n            for i in range(N):\n                if (row != i and col != i):\n                    if (board[row][col] == board[row][i] or board[row][col] == board[i][col]):\n                        return False\n                    elif (board[row][col] == board[row - i][col - i] or board[row][col] == board[row + i][col - i]):\n                        return False\n                    elif (board[row][col] == board[row - i][col + i] or board[row][col] == board[row + i][col + i]):\n                        return False\n    return True\n\nN = int(input())\nboard = [[0 for i in range(N)] for j in range(N)]\nfor i in range(N):\n    x, y = input().split()\n    board[int(x)][int(y)] = 1\n\nif (check_valid(board, N)):\n    print("CORRECT")\nelse:\n    print("INCORRECT")\n', '\n\n# Solved by: Raul Gonzalez (https://github.com/RaulGonzalezG)\n# Date: 4/12/2020 (MM/DD/YYYY)\n# Time: 12:40pm (HH:MM:SS)\n\ndef check_valid(board, N):\n    for row in range(N):\n        for col in range(N):\n            for i in range(N):\n                if (row != i and col != i):\n                    if (board[row][col] == board[row][i] or board[row][col] == board[i][col]):\n                        return False\n                    elif (board[row][col] == board[row - i][col - i] or board[row][col] == board[row + i][col - i]):\n                        return False\n                    elif (board[row][col] == board[row - i][col + i] or board[row][col] == board[row + i][col + i]):\n                        return False\n    return True\n\nN = int(input())\nboard = [[0 for i in range(N)] for j in range(N)]\nfor i in range(N):\n    x, y = input().split()\n    board[int(x)][int(y)] = 1\n\nif (check_valid(board, N)):\n    print("CORRECT")\nelse:\n    print("INCORRECT")\n']
2022-04-12 01:22:27.382392 size on output set 2
2022-04-12 01:22:27.382401 size on input set 2
2022-04-12 01:22:32.226786 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Solved by: Raul Gonzalez (https://github.com/RaulGonzalezG)\n# Date: 4/12/2020 (MM/DD/YYYY)\n# Time: 12:40pm (HH:MM:SS)\n\ndef check_valid(board, N):\n    for row in range(N):\n        for col in range(N):\n            for i in range(N):\n                if (row != i and col != i):\n                    if (board[row][col] == board[row][i] or board[row][col] == board[i][col]):\n                        return False\n                    if (board[row][col] == board[row - i][col - i] or board[row][col] == board[row + i][col - i]):\n                        return False\n                    if (board[row][col] == board[row - i][col + i] or board[row][col] == board[row + i][col + i]):\n                        return False\n    return True\n\nN = int(input())\nboard = [[0 for i in range(N)] for j in range(N)]\nfor i in range(N):\n    x, y = input().split()\n    board[int(x)][int(y)] = 1\n\nif (check_valid(board, N)):\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n"
    },
    {
      "index": 1,
      "text": "\n\n# Solved by: Raul Gonzalez (https://github.com/RaulGonzalezG)\n# Date: 4/12/2020 (MM/DD/YYYY)\n# Time: 12:40pm (HH:MM:SS)\n\ndef check_valid(board, N):\n    for row in range(N):\n        for col in range(N):\n            for i in range(N):\n                if (row != i and col != i):\n                    if (board[row][col] == board[row][i] or board[row][col] == board[i][col]):\n                        return False\n                    if (board[row][col] == board[row - i][col - i] or board[row][col] == board[row + i][col - i]):\n                        return False\n                    if (board[row][col] == board[row - i][col + i] or board[row][col] == board[row + i][col + i]):\n                        return False\n    return True\n\nN = int(input())\nboard = [[0 for i in range(N)] for j in range(N)]\nfor i in range(N):\n    x, y = input().split()\n    board[int(x)][int(y)] = 1\n\nif (check_valid(board, N)):\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n"
    }
  ],
  "created": 1649740947,
  "object": "edit"
}
2022-04-12 01:22:32.227050 fix syntax errors 2 ['\n\n# Solved by: Raul Gonzalez (https://github.com/RaulGonzalezG)\n# Date: 4/12/2020 (MM/DD/YYYY)\n# Time: 12:40pm (HH:MM:SS)\n\ndef check_valid(board, N):\n    for row in range(N):\n        for col in range(N):\n            for i in range(N):\n                if (row != i and col != i):\n                    if (board[row][col] == board[row][i] or board[row][col] == board[i][col]):\n                        return False\n                    if (board[row][col] == board[row - i][col - i] or board[row][col] == board[row + i][col - i]):\n                        return False\n                    if (board[row][col] == board[row - i][col + i] or board[row][col] == board[row + i][col + i]):\n                        return False\n    return True\n\nN = int(input())\nboard = [[0 for i in range(N)] for j in range(N)]\nfor i in range(N):\n    x, y = input().split()\n    board[int(x)][int(y)] = 1\n\nif (check_valid(board, N)):\n    print("CORRECT")\nelse:\n    print("INCORRECT")\n', '\n\n# Solved by: Raul Gonzalez (https://github.com/RaulGonzalezG)\n# Date: 4/12/2020 (MM/DD/YYYY)\n# Time: 12:40pm (HH:MM:SS)\n\ndef check_valid(board, N):\n    for row in range(N):\n        for col in range(N):\n            for i in range(N):\n                if (row != i and col != i):\n                    if (board[row][col] == board[row][i] or board[row][col] == board[i][col]):\n                        return False\n                    if (board[row][col] == board[row - i][col - i] or board[row][col] == board[row + i][col - i]):\n                        return False\n                    if (board[row][col] == board[row - i][col + i] or board[row][col] == board[row + i][col + i]):\n                        return False\n    return True\n\nN = int(input())\nboard = [[0 for i in range(N)] for j in range(N)]\nfor i in range(N):\n    x, y = input().split()\n    board[int(x)][int(y)] = 1\n\nif (check_valid(board, N)):\n    print("CORRECT")\nelse:\n    print("INCORRECT")\n']
2022-04-12 01:22:39.210772 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n"
    },
    {
      "index": 1,
      "text": "\n\n# Solved by: Raul Gonzalez \n# Date: 4/12/2020\n# Time: 12:40pm\n\ndef check_valid(board, N):\n    for row in range(N):\n        for col in range(N):\n            for i in range(N):\n                if (row != i and col != i):\n                    if (board[row][col] == board[row][i] or board[row][col] == board[i][col]):\n                        return False\n                    elif (board[row][col] == board[row - i][col - i] or board[row][col] == board[row + i][col - i]):\n                        return False\n                    elif (board[row][col] == board[row - i][col + i] or board[row][col] == board[row + i][col + i]):\n                        return False\n    return True\n\nN = int(input())\nboard = [[0 for i in range(N)] for j in range(N)]\nfor i in range(N):\n    x, y = input().split()\n    board[int(x)][int(y)] = 1\n\nif (check_valid(board, N)):\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n"
    }
  ],
  "created": 1649740952,
  "object": "edit"
}
2022-04-12 01:22:39.211031 fix syntax errors 2 ['\n', '\n\n# Solved by: Raul Gonzalez \n# Date: 4/12/2020\n# Time: 12:40pm\n\ndef check_valid(board, N):\n    for row in range(N):\n        for col in range(N):\n            for i in range(N):\n                if (row != i and col != i):\n                    if (board[row][col] == board[row][i] or board[row][col] == board[i][col]):\n                        return False\n                    elif (board[row][col] == board[row - i][col - i] or board[row][col] == board[row + i][col - i]):\n                        return False\n                    elif (board[row][col] == board[row - i][col + i] or board[row][col] == board[row + i][col + i]):\n                        return False\n    return True\n\nN = int(input())\nboard = [[0 for i in range(N)] for j in range(N)]\nfor i in range(N):\n    x, y = input().split()\n    board[int(x)][int(y)] = 1\n\nif (check_valid(board, N)):\n    print("CORRECT")\nelse:\n    print("INCORRECT")\n']
2022-04-12 01:22:39.211061 size on output set 3
2022-04-12 01:22:39.211092 num operations 2
2022-04-12 01:22:39.211097 size on input set 1
2022-04-12 01:22:41.130779 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\nx = [int(i) for i in input().split()]\ny = [int(i) for i in input().split()]\n\ndiag1 = [x[i]+y[i] for i in range(n)]\ndiag2 = [x[i]-y[i] for i in range(n)]\n\nif len(set(x)) == len(x) and len(set(y)) == len(y) and len(set(diag1)) == len(diag1) and len(set(diag2)) == len(diag2):\n    print('CORRECT')\nelse:\n    print('INCORRECT')\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\nx = [int(i) for i in input().split()]\ny = [int(i) for i in input().split()]\n\ndiag1 = [x[i]+y[i] for i in range(n)]\ndiag2 = [x[i]-y[i] for i in range(n)]\n\nif len(set(x)) == len(x) and len(set(y)) == len(y) and len(set(diag1)) == len(diag1) and len(set(diag2)) == len(diag2):\n    print('CORRECT')\nelse:\n    print('INCORRECT')\n"
    }
  ],
  "created": 1649740959,
  "object": "edit"
}
2022-04-12 01:22:41.131295 fix spelling mistakes 2 ["\nn = int(input())\nx = [int(i) for i in input().split()]\ny = [int(i) for i in input().split()]\n\ndiag1 = [x[i]+y[i] for i in range(n)]\ndiag2 = [x[i]-y[i] for i in range(n)]\n\nif len(set(x)) == len(x) and len(set(y)) == len(y) and len(set(diag1)) == len(diag1) and len(set(diag2)) == len(diag2):\n    print('CORRECT')\nelse:\n    print('INCORRECT')\n", "\nn = int(input())\nx = [int(i) for i in input().split()]\ny = [int(i) for i in input().split()]\n\ndiag1 = [x[i]+y[i] for i in range(n)]\ndiag2 = [x[i]-y[i] for i in range(n)]\n\nif len(set(x)) == len(x) and len(set(y)) == len(y) and len(set(diag1)) == len(diag1) and len(set(diag2)) == len(diag2):\n    print('CORRECT')\nelse:\n    print('INCORRECT')\n"]
2022-04-12 01:22:41.131410 size on output set 1
2022-04-12 01:22:41.131424 size on input set 1
2022-04-12 01:22:44.510740 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "n = int(input())\nx = [int(i) for i in input().split()]\ny = [int(i) for i in input().split()]\n\ndiag1 = [x[i] + y[i] for i in range(n)]\ndiag2 = [x[i] - y[i] for i in range(n)]\n\nif len(set(x)) == len(x) and len(set(y)) == len(y) and len(set(diag1)) == len(diag1) and len(set(diag2)) == len(diag2):\n    print('CORRECT')\nelse:\n    print('INCORRECT')\n"
    },
    {
      "index": 1,
      "text": "n = int(input())\nx = [int(i) for i in input().split()]\ny = [int(i) for i in input().split()]\n\ndiag1 = [x[i]+y[i] for i in range(n)]\ndiag2 = [x[i]-y[i] for i in range(n)]\n\nif len(set(x)) == len(x) and len(set(y)) == len(y) and len(set(diag1)) == len(diag1) and len(set(diag2)) == len(diag2):\n    print('CORRECT')\nelse:\n    print('INCORRECT')\n"
    }
  ],
  "created": 1649740961,
  "object": "edit"
}
2022-04-12 01:22:44.511013 fix syntax errors 2 ["n = int(input())\nx = [int(i) for i in input().split()]\ny = [int(i) for i in input().split()]\n\ndiag1 = [x[i] + y[i] for i in range(n)]\ndiag2 = [x[i] - y[i] for i in range(n)]\n\nif len(set(x)) == len(x) and len(set(y)) == len(y) and len(set(diag1)) == len(diag1) and len(set(diag2)) == len(diag2):\n    print('CORRECT')\nelse:\n    print('INCORRECT')\n", "n = int(input())\nx = [int(i) for i in input().split()]\ny = [int(i) for i in input().split()]\n\ndiag1 = [x[i]+y[i] for i in range(n)]\ndiag2 = [x[i]-y[i] for i in range(n)]\n\nif len(set(x)) == len(x) and len(set(y)) == len(y) and len(set(diag1)) == len(diag1) and len(set(diag2)) == len(diag2):\n    print('CORRECT')\nelse:\n    print('INCORRECT')\n"]
2022-04-12 01:22:44.511045 size on output set 2
2022-04-12 01:22:44.511067 num operations 2
2022-04-12 01:22:44.511073 size on input set 1
2022-04-12 01:22:51.650773 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nN = int(input())\n\n# Initialize a 2-D array to store the positions of the queen\npositions = [[0 for x in range(N)] for y in range(N)]\n\n# Read in the positions and store them in the 2-D array\nfor i in range(N):\n    x, y = map(int, input().split())\n    positions[x][y] = 1\n\n# Initialize a flag to check if there are any queen attacking each other\nflag = True\n\n# Iterate through the 2-D array and check if any queens are attacking each other\nfor i in range(N):\n    for j in range(N):\n        if positions[i][j] == 1:\n            # Check if there are any queens in the same row\n            for k in range(N):\n                if positions[i][k] == 1 and k != j:\n                    flag = False\n                    break\n            # Check if there are any queens in the same column\n            for k in range(N):\n                if positions[k][j] == 1 and k != i:\n                    flag = False\n                    break\n            # Check if there are any queens in the same diagonal\n            for k in range(N):\n                if i+k < N and j+k < N and positions[i+k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j-k > -1 and positions[i-k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i+k < N and j-k > -1 and positions[i+k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j+k < N and positions[i-k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n\n# Output the result\nif flag:\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n"
    },
    {
      "index": 1,
      "text": "\n\nN = int(input())\n\n# Initialize a 2-D array to store the positions of the queens.\npositions = [[0 for x in range(N)] for y in range(N)]\n\n# Read in the positions and store them in the 2-D array.\nfor i in range(N):\n    x, y = map(int, input().split())\n    positions[x][y] = 1\n\n# Initialize a flag to check if there are any queens attacking each other.\nflag = True\n\n# Iterate through the 2-D array and check if any queens are attacking each other.\nfor i in range(N):\n    for j in range(N):\n        if positions[i][j] == 1:\n            # Check if there are any queens in the same row.\n            for k in range(N):\n                if positions[i][k] == 1 and k != j:\n                    flag = False\n                    break\n            # Check if there are any queens in the same column.\n            for k in range(N):\n                if positions[k][j] == 1 and k != i:\n                    flag = False\n                    break\n            # Check if there are any queens in the same diagonal.\n            for k in range(N):\n                if i+k < N and j+k < N and positions[i+k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j-k > -1 and positions[i-k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i+k < N and j-k > -1 and positions[i+k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j+k < N and positions[i-k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n\n# Output the result.\nif flag:\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n"
    }
  ],
  "created": 1649740964,
  "object": "edit"
}
2022-04-12 01:22:51.651341 fix spelling mistakes 2 ['\n\nN = int(input())\n\n# Initialize a 2-D array to store the positions of the queen\npositions = [[0 for x in range(N)] for y in range(N)]\n\n# Read in the positions and store them in the 2-D array\nfor i in range(N):\n    x, y = map(int, input().split())\n    positions[x][y] = 1\n\n# Initialize a flag to check if there are any queen attacking each other\nflag = True\n\n# Iterate through the 2-D array and check if any queens are attacking each other\nfor i in range(N):\n    for j in range(N):\n        if positions[i][j] == 1:\n            # Check if there are any queens in the same row\n            for k in range(N):\n                if positions[i][k] == 1 and k != j:\n                    flag = False\n                    break\n            # Check if there are any queens in the same column\n            for k in range(N):\n                if positions[k][j] == 1 and k != i:\n                    flag = False\n                    break\n            # Check if there are any queens in the same diagonal\n            for k in range(N):\n                if i+k < N and j+k < N and positions[i+k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j-k > -1 and positions[i-k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i+k < N and j-k > -1 and positions[i+k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j+k < N and positions[i-k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n\n# Output the result\nif flag:\n    print("CORRECT")\nelse:\n    print("INCORRECT")\n', '\n\nN = int(input())\n\n# Initialize a 2-D array to store the positions of the queens.\npositions = [[0 for x in range(N)] for y in range(N)]\n\n# Read in the positions and store them in the 2-D array.\nfor i in range(N):\n    x, y = map(int, input().split())\n    positions[x][y] = 1\n\n# Initialize a flag to check if there are any queens attacking each other.\nflag = True\n\n# Iterate through the 2-D array and check if any queens are attacking each other.\nfor i in range(N):\n    for j in range(N):\n        if positions[i][j] == 1:\n            # Check if there are any queens in the same row.\n            for k in range(N):\n                if positions[i][k] == 1 and k != j:\n                    flag = False\n                    break\n            # Check if there are any queens in the same column.\n            for k in range(N):\n                if positions[k][j] == 1 and k != i:\n                    flag = False\n                    break\n            # Check if there are any queens in the same diagonal.\n            for k in range(N):\n                if i+k < N and j+k < N and positions[i+k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j-k > -1 and positions[i-k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i+k < N and j-k > -1 and positions[i+k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j+k < N and positions[i-k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n\n# Output the result.\nif flag:\n    print("CORRECT")\nelse:\n    print("INCORRECT")\n']
2022-04-12 01:22:51.651386 size on output set 2
2022-04-12 01:22:51.651394 size on input set 2
2022-04-12 01:22:54.518703 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nN = int(input())\n\n# Initialize a 2-D array to store the positions of the queens.\npositions = [[0 for x in range(N)] for x in range(N)]\n\n# Read in the positions and store them in the 2-D array.\nfor i in range(N):\n    x, y = map(int, input().split())\n    positions[x][y] = 1\n\n# Initialize a flag to check if there are any queens attacking each other.\nflag = True\n\n# Iterate through the 2-D array and check if any queens are attacking each other.\nfor i in range(N):\n    for j in range(N):\n        if positions[i][j] == 1:\n            # Check if there are any queens in the same row.\n            for k in range(N):\n                if positions[i][k] == 1 and k != j:\n                    flag = False\n                    break\n            # Check if there are any queens in the same column.\n            for k in range(N):\n                if positions[k][j] == 1 and k != i:\n                    flag = False\n                    break\n            # Check if there are any queens in the same diagonal.\n            for k in range(N):\n                if i+k < N and j+k < N and positions[i+k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j-k > -1 and positions[i-k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i+k < N and j-k > -1 and positions[i+k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j+k < N and positions[i-k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n\n# Output the result.\nif flag:\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/python3\n\nN = int(input())\n\n# Initialize a 2-D array to store the positions of the queens.\npositions = [[0 for x in range(N)] for y in range(N)]\n\n# Read in the positions and store them in the 2-D array.\nfor i in range(N):\n    x, y = map(int, input().split())\n    positions[x][y] = 1\n\n# Initialize a flag to check if there are any queens attacking each other.\nflag = True\n\n# Iterate through the 2-D array and check if any queens are attacking each other.\nfor i in range(N):\n    for j in range(N):\n        if positions[i][j] == 1:\n            # Check if there are any queens in the same row.\n            for k in range(N):\n                if positions[i][k] == 1 and k != j:\n                    flag = False\n                    break\n            # Check if there are any queens in the same column.\n            for k in range(N):\n                if positions[k][j] == 1 and k != i:\n                    flag = False\n                    break\n            # Check if there are any queens in the same diagonal.\n            for k in range(N):\n                if i+k < N and j+k < N and positions[i+k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j-k > -1 and positions[i-k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i+k < N and j-k > -1 and positions[i+k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j+k < N and positions[i-k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n\n# Output the result.\nif flag:\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n"
    }
  ],
  "created": 1649740971,
  "object": "edit"
}
2022-04-12 01:22:54.519002 fix syntax errors 2 ['\nN = int(input())\n\n# Initialize a 2-D array to store the positions of the queens.\npositions = [[0 for x in range(N)] for x in range(N)]\n\n# Read in the positions and store them in the 2-D array.\nfor i in range(N):\n    x, y = map(int, input().split())\n    positions[x][y] = 1\n\n# Initialize a flag to check if there are any queens attacking each other.\nflag = True\n\n# Iterate through the 2-D array and check if any queens are attacking each other.\nfor i in range(N):\n    for j in range(N):\n        if positions[i][j] == 1:\n            # Check if there are any queens in the same row.\n            for k in range(N):\n                if positions[i][k] == 1 and k != j:\n                    flag = False\n                    break\n            # Check if there are any queens in the same column.\n            for k in range(N):\n                if positions[k][j] == 1 and k != i:\n                    flag = False\n                    break\n            # Check if there are any queens in the same diagonal.\n            for k in range(N):\n                if i+k < N and j+k < N and positions[i+k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j-k > -1 and positions[i-k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i+k < N and j-k > -1 and positions[i+k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j+k < N and positions[i-k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n\n# Output the result.\nif flag:\n    print("CORRECT")\nelse:\n    print("INCORRECT")\n', '#!/usr/bin/python3\n\nN = int(input())\n\n# Initialize a 2-D array to store the positions of the queens.\npositions = [[0 for x in range(N)] for y in range(N)]\n\n# Read in the positions and store them in the 2-D array.\nfor i in range(N):\n    x, y = map(int, input().split())\n    positions[x][y] = 1\n\n# Initialize a flag to check if there are any queens attacking each other.\nflag = True\n\n# Iterate through the 2-D array and check if any queens are attacking each other.\nfor i in range(N):\n    for j in range(N):\n        if positions[i][j] == 1:\n            # Check if there are any queens in the same row.\n            for k in range(N):\n                if positions[i][k] == 1 and k != j:\n                    flag = False\n                    break\n            # Check if there are any queens in the same column.\n            for k in range(N):\n                if positions[k][j] == 1 and k != i:\n                    flag = False\n                    break\n            # Check if there are any queens in the same diagonal.\n            for k in range(N):\n                if i+k < N and j+k < N and positions[i+k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j-k > -1 and positions[i-k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i+k < N and j-k > -1 and positions[i+k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j+k < N and positions[i-k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n\n# Output the result.\nif flag:\n    print("CORRECT")\nelse:\n    print("INCORRECT")\n']
2022-04-12 01:22:58.774743 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nN = int(input())\n\n# Initialize a 2-D array to store the positions of the queens\npositions = [[0 for x in range(N)] for y in range(N)]\n\n# Read in the positions and store them in the 2-D array\nfor i in range(N):\n    x, y = map(int, input().split())\n    positions[x][y] = 1\n\n# Initialize a flag to check if there are any queens attacking each other\nflag = True\n\n# Iterate through the 2-D array and check if there are any queens attacking each other\nfor i in range(N):\n    for j in range(N):\n        if positions[i][j] == 1:\n            # Check if there are any queens in the same row\n            for k in range(N):\n                if positions[i][k] == 1 and k != j:\n                    flag = False\n                    break\n            # Check if there are any queens in the same column\n            for k in range(N):\n                if positions[k][j] == 1 and k != i:\n                    flag = False\n                    break\n            # Check if there are any queens in the same diagonal\n            for k in range(N):\n                if i+k < N and j+k < N and positions[i+k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j-k > -1 and positions[i-k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i+k < N and j-k > -1 and positions[i+k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j+k < N and positions[i-k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n\n# Output the result\nif flag:\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n"
    },
    {
      "index": 1,
      "text": "\nN = int(input())\n\n# Initialize a 2-D array to store the positions of the queen\npositions = [[0 for x in range(N)] for y in range(N)]\n\n# Read in the positions and store them in the 2-D array\nfor i in range(N):\n    x, y = map(int, input().split())\n    positions[x][y] = 1\n\n# Initialize a flag to check if there are any queen attacking each other\nflag = True\n\n# Iterate through the 2-D array and check if any queens are attacking each other\nfor i in range(N):\n    for j in range(N):\n        if positions[i][j] == 1:\n            # Check if there are any queens in the same row\n            for k in range(N):\n                if positions[i][k] == 1 and k != j:\n                    flag = False\n                    break\n            # Check if there are any queens in the same column\n            for k in range(N):\n                if positions[k][j] == 1 and k != i:\n                    flag = False\n                    break\n            # Check if there are any queens in the same diagonal\n            for k in range(N):\n                if i+k < N and j+k < N and positions[i+k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j-k > -1 and positions[i-k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i+k < N and j-k > -1 and positions[i+k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j+k < N and positions[i-k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n\n# Output the result\nif flag:\n    print(\"CORRECT\")\nelse:\n    print(\"INCORRECT\")\n"
    }
  ],
  "created": 1649740974,
  "object": "edit"
}
2022-04-12 01:22:58.775192 fix syntax errors 2 ['\n\nN = int(input())\n\n# Initialize a 2-D array to store the positions of the queens\npositions = [[0 for x in range(N)] for y in range(N)]\n\n# Read in the positions and store them in the 2-D array\nfor i in range(N):\n    x, y = map(int, input().split())\n    positions[x][y] = 1\n\n# Initialize a flag to check if there are any queens attacking each other\nflag = True\n\n# Iterate through the 2-D array and check if there are any queens attacking each other\nfor i in range(N):\n    for j in range(N):\n        if positions[i][j] == 1:\n            # Check if there are any queens in the same row\n            for k in range(N):\n                if positions[i][k] == 1 and k != j:\n                    flag = False\n                    break\n            # Check if there are any queens in the same column\n            for k in range(N):\n                if positions[k][j] == 1 and k != i:\n                    flag = False\n                    break\n            # Check if there are any queens in the same diagonal\n            for k in range(N):\n                if i+k < N and j+k < N and positions[i+k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j-k > -1 and positions[i-k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i+k < N and j-k > -1 and positions[i+k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j+k < N and positions[i-k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n\n# Output the result\nif flag:\n    print("CORRECT")\nelse:\n    print("INCORRECT")\n', '\nN = int(input())\n\n# Initialize a 2-D array to store the positions of the queen\npositions = [[0 for x in range(N)] for y in range(N)]\n\n# Read in the positions and store them in the 2-D array\nfor i in range(N):\n    x, y = map(int, input().split())\n    positions[x][y] = 1\n\n# Initialize a flag to check if there are any queen attacking each other\nflag = True\n\n# Iterate through the 2-D array and check if any queens are attacking each other\nfor i in range(N):\n    for j in range(N):\n        if positions[i][j] == 1:\n            # Check if there are any queens in the same row\n            for k in range(N):\n                if positions[i][k] == 1 and k != j:\n                    flag = False\n                    break\n            # Check if there are any queens in the same column\n            for k in range(N):\n                if positions[k][j] == 1 and k != i:\n                    flag = False\n                    break\n            # Check if there are any queens in the same diagonal\n            for k in range(N):\n                if i+k < N and j+k < N and positions[i+k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j-k > -1 and positions[i-k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i+k < N and j-k > -1 and positions[i+k][j-k] == 1 and k != 0:\n                    flag = False\n                    break\n                if i-k > -1 and j+k < N and positions[i-k][j+k] == 1 and k != 0:\n                    flag = False\n                    break\n\n# Output the result\nif flag:\n    print("CORRECT")\nelse:\n    print("INCORRECT")\n']
2022-04-12 01:22:58.775253 size on output set 4
2022-04-12 01:22:58.775270 num operations 2
2022-04-12 01:22:58.775275 size on input set 1
2022-04-12 01:23:12.590746 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nclass Queens:\n    def __init__(self, n):\n        self.n = n\n        self.queens = []\n        for i in range(n):\n            self.queens.append([])\n\n    def add_queen(self, x, y):\n        self.queens[x].append(y)\n\n    def check_queen(self):\n        for i in range(self.n):\n            if len(self.queens[i]) > 1:\n                return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1 and self.queens[j][0] == i:\n                    break\n                if j == self.n - 1:\n                    return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1:\n                    x = j\n                    y = self.queens[j][0]\n                    for k in range(self.n):\n                        if len(self.queens[k]) == 1:\n                            if abs(x - k) == abs(y - self.queens[k][0]):\n                                return False\n        return True\n\n\ndef main():\n    n = int(input())\n    queens = Queens(n)\n    for i in range(n):\n        x, y = [int(j) for j in input().split()]\n        queens.add_queen(x, y)\n    if queens.check_queen():\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nclass Queens:  # \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0448\u0430\u0445\u043c\u0430\u0442\u043d\u043e\u0439 \u0434\u043e\u0441\u043a\u0438\n    def __init__(self, n):\n        self.n = n\n        self.queens = []\n        for i in range(n):\n            self.queens.append([])\n\n    def add_queen(self, x, y):  # \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0444\u0435\u0440\u0437\u044f \u043d\u0430 \u0434\u043e\u0441\u043a\u0443\n        self.queens[x].append(y)\n\n    def check_queens(self):  # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u043a\u0438 \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c\n        for i in range(self.n):\n            if len(self.queens[i]) > 1:\n                return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1 and self.queens[j][0] == i:\n                    break\n                if j == self.n - 1:\n                    return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1:\n                    x = j\n                    y = self.queens[j][0]\n                    for k in range(self.n):\n                        if len(self.queens[k]) == 1:\n                            if abs(x - k) == abs(y - self.queens[k][0]):\n                                return False\n        return True\n\n\ndef main():\n    n = int(input())\n    queens = Queens(n)\n    for i in range(n):\n        x, y = [int(j) for j in input().split()]\n        queens.add_queen(x, y)\n    if queens.check_queens():\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649740978,
  "object": "edit"
}
2022-04-12 01:23:12.591165 fix spelling mistakes 2 ['\n\nclass Queens:\n    def __init__(self, n):\n        self.n = n\n        self.queens = []\n        for i in range(n):\n            self.queens.append([])\n\n    def add_queen(self, x, y):\n        self.queens[x].append(y)\n\n    def check_queen(self):\n        for i in range(self.n):\n            if len(self.queens[i]) > 1:\n                return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1 and self.queens[j][0] == i:\n                    break\n                if j == self.n - 1:\n                    return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1:\n                    x = j\n                    y = self.queens[j][0]\n                    for k in range(self.n):\n                        if len(self.queens[k]) == 1:\n                            if abs(x - k) == abs(y - self.queens[k][0]):\n                                return False\n        return True\n\n\ndef main():\n    n = int(input())\n    queens = Queens(n)\n    for i in range(n):\n        x, y = [int(j) for j in input().split()]\n        queens.add_queen(x, y)\n    if queens.check_queen():\n        print(\'CORRECT\')\n    else:\n        print(\'INCORRECT\')\n\n\nif __name__ == "__main__":\n    main()\n', '\n\nclass Queens:  # класс для описания шахматной доски\n    def __init__(self, n):\n        self.n = n\n        self.queens = []\n        for i in range(n):\n            self.queens.append([])\n\n    def add_queen(self, x, y):  # добавление ферзя на доску\n        self.queens[x].append(y)\n\n    def check_queens(self):  # проверка доски на корректность\n        for i in range(self.n):\n            if len(self.queens[i]) > 1:\n                return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1 and self.queens[j][0] == i:\n                    break\n                if j == self.n - 1:\n                    return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1:\n                    x = j\n                    y = self.queens[j][0]\n                    for k in range(self.n):\n                        if len(self.queens[k]) == 1:\n                            if abs(x - k) == abs(y - self.queens[k][0]):\n                                return False\n        return True\n\n\ndef main():\n    n = int(input())\n    queens = Queens(n)\n    for i in range(n):\n        x, y = [int(j) for j in input().split()]\n        queens.add_queen(x, y)\n    if queens.check_queens():\n        print(\'CORRECT\')\n    else:\n        print(\'INCORRECT\')\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 01:23:12.591215 size on output set 2
2022-04-12 01:23:12.591222 size on input set 2
2022-04-12 01:23:25.178794 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nclass Queens:\n    def __init__(self, n):\n        self.n = n\n        self.queens = []\n        for i in range(n):\n            self.queens.append([])\n\n    def add_queen(self, x, y):\n        self.queens[x].append(y)\n\n    def check_queen(self):\n        for i in range(self.n):\n            if len(self.queens[i]) > 1:\n                return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1 and self.queens[j][0] == i:\n                    break\n                if j == self.n - 1:\n                    return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1:\n                    x = j\n                    y = self.queens[j][0]\n                    for k in range(self.n):\n                        if len(self.queens[k]) == 1:\n                            if abs(x - k) == abs(y - self.queens[k][0]):\n                                return False\n        return True\n\n\ndef main():\n    n = int(input())\n    queens = Queens(n)\n    for i in range(n):\n        x, y = [int(j) for j in input().split()]\n        queens.add_queen(x, y)\n    if queens.check_queen():\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nclass Queens:\n    def __init__(self, n):\n        self.n = n\n        self.queens = []\n        self.queens = [[] for i in range(n)]\n\n    def add_queen(self, x, y):\n        self.queens[x].append(y)\n\n    def check_queen(self):\n        for x in range(self.n):\n            if len(self.queens[x]) > 1:\n                return False  # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043e\u0434\u043d\u0443 \u043a\u043e\u0440\u043e\u043b\u0435\u0432\u0443 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435\n        for y in range(self.n):\n            for x in range(self.n):\n                if len(self.queens[x]) == 1 and self.queens[x][0] == y:\n                    break  # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043e\u0434\u043d\u0443 \u043a\u043e\u0440\u043e\u043b\u0435\u0432\u0443 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435\n                if x == self.n - 1:\n                    return False  # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043e\u0434\u043d\u0443 \u043a\u043e\u0440\u043e\u043b\u0435\u0432\u0443 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435\n        for y in range(self.n):\n            for x in range(self.n):\n                if len(self.queens[x]) == 1:\n                    for k in range(self.n):\n                        if len(self.queens[k]) == 1:\n                            if abs(x - k) == abs(y - self.queens[k][0]):\n                                return False  # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043e\u0434\u043d\u0443 \u043a\u043e\u0440\u043e\u043b\u0435\u0432\u0443 \u043d\u0430 \u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u0438\n        return True\n\n\ndef main():\n    n = int(input())\n    queens = Queens(n)\n    for i in range(n):\n        x, y = [int(j) for j in input().split()]\n        queens.add_queen(x, y)\n    if queens.check_queen():\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649740992,
  "object": "edit"
}
2022-04-12 01:23:25.179087 fix syntax errors 2 ['\nclass Queens:\n    def __init__(self, n):\n        self.n = n\n        self.queens = []\n        for i in range(n):\n            self.queens.append([])\n\n    def add_queen(self, x, y):\n        self.queens[x].append(y)\n\n    def check_queen(self):\n        for i in range(self.n):\n            if len(self.queens[i]) > 1:\n                return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1 and self.queens[j][0] == i:\n                    break\n                if j == self.n - 1:\n                    return False\n        for i in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1:\n                    x = j\n                    y = self.queens[j][0]\n                    for k in range(self.n):\n                        if len(self.queens[k]) == 1:\n                            if abs(x - k) == abs(y - self.queens[k][0]):\n                                return False\n        return True\n\n\ndef main():\n    n = int(input())\n    queens = Queens(n)\n    for i in range(n):\n        x, y = [int(j) for j in input().split()]\n        queens.add_queen(x, y)\n    if queens.check_queen():\n        print(\'CORRECT\')\n    else:\n        print(\'INCORRECT\')\n\n\nif __name__ == "__main__":\n    main()\n', '\nclass Queens:\n    def __init__(self, n):\n        self.n = n\n        self.queens = []\n        self.queens = [[] for i in range(n)]\n\n    def add_queen(self, x, y):\n        self.queens[x].append(y)\n\n    def check_queen(self):\n        for x in range(self.n):\n            if len(self.queens[x]) > 1:\n                return False  # проверка на одну королеву в строке\n        for y in range(self.n):\n            for x in range(self.n):\n                if len(self.queens[x]) == 1 and self.queens[x][0] == y:\n                    break  # проверка на одну королеву в столбце\n                if x == self.n - 1:\n                    return False  # проверка на одну королеву в столбце\n        for y in range(self.n):\n            for x in range(self.n):\n                if len(self.queens[x]) == 1:\n                    for k in range(self.n):\n                        if len(self.queens[k]) == 1:\n                            if abs(x - k) == abs(y - self.queens[k][0]):\n                                return False  # проверка на одну королеву на диагонали\n        return True\n\n\ndef main():\n    n = int(input())\n    queens = Queens(n)\n    for i in range(n):\n        x, y = [int(j) for j in input().split()]\n        queens.add_queen(x, y)\n    if queens.check_queen():\n        print(\'CORRECT\')\n    else:\n        print(\'INCORRECT\')\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 01:23:34.068298 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nclass Queens:  # \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0448\u0430\u0445\u043c\u0430\u0442\u043d\u043e\u0439 \u0434\u043e\u0441\u043a\u0438\n    def __init__(self, n):\n        self.n = n\n        self.queens = []\n        for _ in range(n):\n            self.queens.append([])\n\n    def add_queen(self, x, y):  # \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0444\u0435\u0440\u0437\u044f \u043d\u0430 \u0434\u043e\u0441\u043a\u0443\n        self.queens[x].append(y)\n\n    def check_queens(self):  # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u043a\u0438 \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c\n        for _ in range(self.n):\n            if len(self.queens[i]) > 1:\n                return False\n        for _ in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1 and self.queens[j][0] == i:\n                    break\n                if j == self.n - 1:\n                    return False\n        for _ in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1:\n                    x = j\n                    y = self.queens[j][0]\n                    for k in range(self.n):\n                        if len(self.queens[k]) == 1:\n                            if abs(x - k) == abs(y - self.queens[k][0]):\n                                return False\n        return True\n\n\ndef main():\n    n = int(input())\n    queens = Queens(n)\n    for i in range(n):\n        x, y = [int(j) for j in input().split()]\n        queens.add_queen(x, y)\n    if queens.check_queens():\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nclass Queens:  # \u043a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0448\u0430\u0445\u043c\u0430\u0442\u043d\u043e\u0439 \u0434\u043e\u0441\u043a\u0438\n    def __init__(self, n):\n        self.n = n\n        self.queens = []\n        for _ in range(n):\n            self.queens.append([])\n\n    def add_queen(self, x, y):  # \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0444\u0435\u0440\u0437\u044f \u043d\u0430 \u0434\u043e\u0441\u043a\u0443, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0444\u0435\u0440\u0437\u044f\n        self.queens[x].append(y)\n\n    def check_queens(self):  # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0434\u043e\u0441\u043a\u0438 \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0441\u0442\u044c, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 True \u0435\u0441\u043b\u0438 \u0434\u043e\u0441\u043a\u0430 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u0430, \u0438\u043d\u0430\u0447\u0435 False\n        for i in range(self.n):\n            if len(self.queens[i]) > 1:\n                return False\n        for _ in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1 and self.queens[j][0] == i:\n                    break\n                if j == self.n - 1:\n                    return False\n        for _ in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1:\n                    x = j\n                    y = self.queens[j][0]\n                    for k in range(self.n):\n                        if len(self.queens[k]) == 1:\n                            if abs(x - k) == abs(y - self.queens[k][0]):\n                                return False\n        return True\n\n\ndef main():\n    n = int(input())\n    queens = Queens(n)\n    for _ in range(n):\n        x, y = [int(j) for j in input().split()]\n        queens.add_queen(x, y)\n    if queens.check_queens():\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649741005,
  "object": "edit"
}
2022-04-12 01:23:34.068456 fix syntax errors 2 ['\n\nclass Queens:  # класс для описания шахматной доски\n    def __init__(self, n):\n        self.n = n\n        self.queens = []\n        for _ in range(n):\n            self.queens.append([])\n\n    def add_queen(self, x, y):  # добавление ферзя на доску\n        self.queens[x].append(y)\n\n    def check_queens(self):  # проверка доски на корректность\n        for _ in range(self.n):\n            if len(self.queens[i]) > 1:\n                return False\n        for _ in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1 and self.queens[j][0] == i:\n                    break\n                if j == self.n - 1:\n                    return False\n        for _ in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1:\n                    x = j\n                    y = self.queens[j][0]\n                    for k in range(self.n):\n                        if len(self.queens[k]) == 1:\n                            if abs(x - k) == abs(y - self.queens[k][0]):\n                                return False\n        return True\n\n\ndef main():\n    n = int(input())\n    queens = Queens(n)\n    for i in range(n):\n        x, y = [int(j) for j in input().split()]\n        queens.add_queen(x, y)\n    if queens.check_queens():\n        print(\'CORRECT\')\n    else:\n        print(\'INCORRECT\')\n\n\nif __name__ == "__main__":\n    main()\n', '\nclass Queens:  # класс для описания шахматной доски\n    def __init__(self, n):\n        self.n = n\n        self.queens = []\n        for _ in range(n):\n            self.queens.append([])\n\n    def add_queen(self, x, y):  # добавление ферзя на доску, принимает координаты ферзя\n        self.queens[x].append(y)\n\n    def check_queens(self):  # проверка доски на корректность, возвращает True если доска корректна, иначе False\n        for i in range(self.n):\n            if len(self.queens[i]) > 1:\n                return False\n        for _ in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1 and self.queens[j][0] == i:\n                    break\n                if j == self.n - 1:\n                    return False\n        for _ in range(self.n):\n            for j in range(self.n):\n                if len(self.queens[j]) == 1:\n                    x = j\n                    y = self.queens[j][0]\n                    for k in range(self.n):\n                        if len(self.queens[k]) == 1:\n                            if abs(x - k) == abs(y - self.queens[k][0]):\n                                return False\n        return True\n\n\ndef main():\n    n = int(input())\n    queens = Queens(n)\n    for _ in range(n):\n        x, y = [int(j) for j in input().split()]\n        queens.add_queen(x, y)\n    if queens.check_queens():\n        print(\'CORRECT\')\n    else:\n        print(\'INCORRECT\')\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 01:23:34.068489 size on output set 4
2022-04-12 01:23:34.068499 num operations 2
2022-04-12 01:23:34.068505 size on input set 1
2022-04-12 01:23:36.448917 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "# read the number of queens\n\nn = int(input())\n\n# create the board\nboard = [[0 for i in range(n)] for i in range(n)]\n\n# populate the board\nfor i in range(n):\n    x,y = [int(x) for x in input().split()]\n    board[x][y] = \"Q\"\n\n# check the board for conflicts\nfor i in range(n):\n    for j in range(n):\n        if board[i][j] == \"Q\":\n            # check the row\n            for k in range(n):\n                if board[i][k] == \"Q\" and k != j:\n                    print(\"INCORRECT\")\n                    exit()\n            # check the column\n            for k in range(n):\n                if board[k][j] == \"Q\" and k != i:\n                    print(\"INCORRECT\")\n                    exit()\n            # check the diagonals\n            # check up and to the left\n            x = i\n            y = j\n            while x > 0 and y > 0:\n                x -= 1\n                y -= 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check up and to the right\n            x = i\n            y = j\n            while x > 0 and y < n-1:\n                x -= 1\n                y += 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check down and to the left\n            x = i\n            y = j\n            while x < n-1 and y > 0:\n                x += 1\n                y -= 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check down and to the right\n            x = i\n            y = j\n            while x < n-1 and y < n-1:\n                x += 1\n                y += 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n\nprint(\"CORRECT\")\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\n\n# create the board\nboard = [[0 for i in range(n)] for i in range(n)]\n\n# populate the board\nfor i in range(n):\n    x,y = [int(x) for x in input().split()]\n    board[x][y] = \"Q\"\n\n# check the board\nfor i in range(n):\n    for j in range(n):\n        if board[i][j] == \"Q\":\n            # check the row\n            for k in range(n):\n                if board[i][k] == \"Q\" and k != j:\n                    print(\"INCORRECT\")\n                    exit()\n            # check the column\n            for k in range(n):\n                if board[k][j] == \"Q\" and k != i:\n                    print(\"INCORRECT\")\n                    exit()\n            # check the diagonals\n            # check up and to the left\n            x = i\n            y = j\n            while x > 0 and y > 0:\n                x -= 1\n                y -= 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check up and to the right\n            x = i\n            y = j\n            while x > 0 and y < n-1:\n                x -= 1\n                y += 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check down and to the left\n            x = i\n            y = j\n            while x < n-1 and y > 0:\n                x += 1\n                y -= 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check down and to the right\n            x = i\n            y = j\n            while x < n-1 and y < n-1:\n                x += 1\n                y += 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n\nprint(\"CORRECT\")\n"
    }
  ],
  "created": 1649741014,
  "object": "edit"
}
2022-04-12 01:23:36.449183 fix spelling mistakes 2 ['# read the number of queens\n\nn = int(input())\n\n# create the board\nboard = [[0 for i in range(n)] for i in range(n)]\n\n# populate the board\nfor i in range(n):\n    x,y = [int(x) for x in input().split()]\n    board[x][y] = "Q"\n\n# check the board for conflicts\nfor i in range(n):\n    for j in range(n):\n        if board[i][j] == "Q":\n            # check the row\n            for k in range(n):\n                if board[i][k] == "Q" and k != j:\n                    print("INCORRECT")\n                    exit()\n            # check the column\n            for k in range(n):\n                if board[k][j] == "Q" and k != i:\n                    print("INCORRECT")\n                    exit()\n            # check the diagonals\n            # check up and to the left\n            x = i\n            y = j\n            while x > 0 and y > 0:\n                x -= 1\n                y -= 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n            # check up and to the right\n            x = i\n            y = j\n            while x > 0 and y < n-1:\n                x -= 1\n                y += 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n            # check down and to the left\n            x = i\n            y = j\n            while x < n-1 and y > 0:\n                x += 1\n                y -= 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n            # check down and to the right\n            x = i\n            y = j\n            while x < n-1 and y < n-1:\n                x += 1\n                y += 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n\nprint("CORRECT")\n', '\nn = int(input())\n\n# create the board\nboard = [[0 for i in range(n)] for i in range(n)]\n\n# populate the board\nfor i in range(n):\n    x,y = [int(x) for x in input().split()]\n    board[x][y] = "Q"\n\n# check the board\nfor i in range(n):\n    for j in range(n):\n        if board[i][j] == "Q":\n            # check the row\n            for k in range(n):\n                if board[i][k] == "Q" and k != j:\n                    print("INCORRECT")\n                    exit()\n            # check the column\n            for k in range(n):\n                if board[k][j] == "Q" and k != i:\n                    print("INCORRECT")\n                    exit()\n            # check the diagonals\n            # check up and to the left\n            x = i\n            y = j\n            while x > 0 and y > 0:\n                x -= 1\n                y -= 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n            # check up and to the right\n            x = i\n            y = j\n            while x > 0 and y < n-1:\n                x -= 1\n                y += 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n            # check down and to the left\n            x = i\n            y = j\n            while x < n-1 and y > 0:\n                x += 1\n                y -= 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n            # check down and to the right\n            x = i\n            y = j\n            while x < n-1 and y < n-1:\n                x += 1\n                y += 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n\nprint("CORRECT")\n']
2022-04-12 01:23:36.449226 size on output set 2
2022-04-12 01:23:36.449230 size on input set 2
2022-04-12 01:23:41.205625 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# read the number of queens\n\nn = int(input())\n\n# create the board\nboard = [[0 for i in range(n)] for i in range(n)]\n\n# populate the board\nfor i in range(n):\n    x, y = [int(x) for x in input().split()]\n    board[x][y] = \"Q\"\n\n# check the board for conflicts\nfor i in range(n):\n    for j in range(n):\n        if board[i][j] == \"Q\":\n            # check the row\n            for k in range(n):\n                if board[i][k] == \"Q\" and k != j:\n                    print(\"INCORRECT\")\n                    exit()\n            # check the column\n            for k in range(n):\n                if board[k][j] == \"Q\" and k != i:\n                    print(\"INCORRECT\")\n                    exit()\n            # check the diagonals\n            # check up and to the left\n            x = i\n            y = j\n            while x > 0 and y > 0:\n                x -= 1\n                y -= 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check up and to the right\n            x = i\n            y = j\n            while x > 0 and y < n - 1:\n                x -= 1\n                y += 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check down and to the left\n            x = i\n            y = j\n            while x < n - 1 and y > 0:\n                x += 1\n                y -= 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check down and to the right\n            x = i\n            y = j\n            while x < n - 1 and y < n - 1:\n                x += 1\n                y += 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n\nprint(\"CORRECT\")\n"
    },
    {
      "index": 1,
      "text": "# read the number of queens\n\nn = int(input())\n\n# create the board\nboard = [[0 for i in range(n)] for i in range(n)]\n\n# populate the board\nfor i in range(n):\n    x, y = [int(x) for x in input().split()]\n    board[x][y] = \"Q\"\n\n# check the board for conflicts\nfor i in range(n):\n    for j in range(n):\n        if board[i][j] == \"Q\":\n            # check the row\n            for k in range(n):\n                if board[i][k] == \"Q\" and k != j:\n                    print(\"INCORRECT\")\n                    exit()\n            # check the column\n            for k in range(n):\n                if board[k][j] == \"Q\" and k != i:\n                    print(\"INCORRECT\")\n                    exit()\n            # check the diagonals\n            # check up and to the left\n            x = i\n            y = j\n            while x > 0 and y > 0:\n                x -= 1\n                y -= 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check up and to the right\n            x = i\n            y = j\n            while x > 0 and y < n - 1:\n                x -= 1\n                y += 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check down and to the left\n            x = i\n            y = j\n            while x < n - 1 and y > 0:\n                x += 1\n                y -= 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check down and to the right\n            x = i\n            y = j\n            while x < n - 1 and y < n - 1:\n                x += 1\n                y += 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n\nprint(\"CORRECT\")\n"
    }
  ],
  "created": 1649741016,
  "object": "edit"
}
2022-04-12 01:23:41.205787 fix syntax errors 2 ['# read the number of queens\n\nn = int(input())\n\n# create the board\nboard = [[0 for i in range(n)] for i in range(n)]\n\n# populate the board\nfor i in range(n):\n    x, y = [int(x) for x in input().split()]\n    board[x][y] = "Q"\n\n# check the board for conflicts\nfor i in range(n):\n    for j in range(n):\n        if board[i][j] == "Q":\n            # check the row\n            for k in range(n):\n                if board[i][k] == "Q" and k != j:\n                    print("INCORRECT")\n                    exit()\n            # check the column\n            for k in range(n):\n                if board[k][j] == "Q" and k != i:\n                    print("INCORRECT")\n                    exit()\n            # check the diagonals\n            # check up and to the left\n            x = i\n            y = j\n            while x > 0 and y > 0:\n                x -= 1\n                y -= 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n            # check up and to the right\n            x = i\n            y = j\n            while x > 0 and y < n - 1:\n                x -= 1\n                y += 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n            # check down and to the left\n            x = i\n            y = j\n            while x < n - 1 and y > 0:\n                x += 1\n                y -= 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n            # check down and to the right\n            x = i\n            y = j\n            while x < n - 1 and y < n - 1:\n                x += 1\n                y += 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n\nprint("CORRECT")\n', '# read the number of queens\n\nn = int(input())\n\n# create the board\nboard = [[0 for i in range(n)] for i in range(n)]\n\n# populate the board\nfor i in range(n):\n    x, y = [int(x) for x in input().split()]\n    board[x][y] = "Q"\n\n# check the board for conflicts\nfor i in range(n):\n    for j in range(n):\n        if board[i][j] == "Q":\n            # check the row\n            for k in range(n):\n                if board[i][k] == "Q" and k != j:\n                    print("INCORRECT")\n                    exit()\n            # check the column\n            for k in range(n):\n                if board[k][j] == "Q" and k != i:\n                    print("INCORRECT")\n                    exit()\n            # check the diagonals\n            # check up and to the left\n            x = i\n            y = j\n            while x > 0 and y > 0:\n                x -= 1\n                y -= 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n            # check up and to the right\n            x = i\n            y = j\n            while x > 0 and y < n - 1:\n                x -= 1\n                y += 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n            # check down and to the left\n            x = i\n            y = j\n            while x < n - 1 and y > 0:\n                x += 1\n                y -= 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n            # check down and to the right\n            x = i\n            y = j\n            while x < n - 1 and y < n - 1:\n                x += 1\n                y += 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n\nprint("CORRECT")\n']
2022-04-12 01:23:46.028752 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "n = int(input())\n\n# create the board\nboard = [[0 for i in range(n)] for i in range(n)]\n\n# populate the board\nfor i in range(n):\n    x, y = [int(x) for x in input().split()]\n    board[x][y] = \"Q\"\n\n# check the board\nfor i in range(n):\n    for j in range(n):\n        if board[i][j] == \"Q\":\n            # check the row\n            for k in range(n):\n                if board[i][k] == \"Q\" and k != j:\n                    print(\"INCORRECT\")\n                    exit()\n            # check the column\n            for k in range(n):\n                if board[k][j] == \"Q\" and k != i:\n                    print(\"INCORRECT\")\n                    exit()\n            # check the diagonals\n            # check up and to the left\n            x = i\n            y = j\n            while x > 0 and y > 0:\n                x -= 1\n                y -= 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check up and to the right\n            x = i\n            y = j\n            while x > 0 and y < n - 1:\n                x -= 1\n                y += 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check down and to the left\n            x = i\n            y = j\n            while x < n - 1 and y > 0:\n                x += 1\n                y -= 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check down and to the right\n            x = i\n            y = j\n            while x < n - 1 and y < n - 1:\n                x += 1\n                y += 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n\nprint(\"CORRECT\")\n"
    },
    {
      "index": 1,
      "text": "n = int(input())\n\n# create the board\nboard = [[0 for i in range(n)] for i in range(n)]\n\n# populate the board\nfor i in range(n):\n    x, y = [int(x) for x in input().split()]\n    board[x][y] = \"Q\"\n\n# check the board\nfor i in range(n):\n    for j in range(n):\n        if board[i][j] == \"Q\":\n            # check the row\n            for k in range(n):\n                if board[i][k] == \"Q\" and k != j:\n                    print(\"INCORRECT\")\n                    exit()\n            # check the column\n            for k in range(n):\n                if board[k][j] == \"Q\" and k != i:\n                    print(\"INCORRECT\")\n                    exit()\n            # check the diagonals\n            # check up and to the left\n            x = i\n            y = j\n            while x > 0 and y > 0:\n                x -= 1\n                y -= 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check up and to the right\n            x = i\n            y = j\n            while x > 0 and y < n - 1:\n                x -= 1\n                y += 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check down and to the left\n            x = i\n            y = j\n            while x < n - 1 and y > 0:\n                x += 1\n                y -= 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n            # check down and to the right\n            x = i\n            y = j\n            while x < n - 1 and y < n - 1:\n                x += 1\n                y += 1\n                if board[x][y] == \"Q\":\n                    print(\"INCORRECT\")\n                    exit()\n\nprint(\"CORRECT\")\n"
    }
  ],
  "created": 1649741021,
  "object": "edit"
}
2022-04-12 01:23:46.029192 fix syntax errors 2 ['n = int(input())\n\n# create the board\nboard = [[0 for i in range(n)] for i in range(n)]\n\n# populate the board\nfor i in range(n):\n    x, y = [int(x) for x in input().split()]\n    board[x][y] = "Q"\n\n# check the board\nfor i in range(n):\n    for j in range(n):\n        if board[i][j] == "Q":\n            # check the row\n            for k in range(n):\n                if board[i][k] == "Q" and k != j:\n                    print("INCORRECT")\n                    exit()\n            # check the column\n            for k in range(n):\n                if board[k][j] == "Q" and k != i:\n                    print("INCORRECT")\n                    exit()\n            # check the diagonals\n            # check up and to the left\n            x = i\n            y = j\n            while x > 0 and y > 0:\n                x -= 1\n                y -= 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n            # check up and to the right\n            x = i\n            y = j\n            while x > 0 and y < n - 1:\n                x -= 1\n                y += 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n            # check down and to the left\n            x = i\n            y = j\n            while x < n - 1 and y > 0:\n                x += 1\n                y -= 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n            # check down and to the right\n            x = i\n            y = j\n            while x < n - 1 and y < n - 1:\n                x += 1\n                y += 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n\nprint("CORRECT")\n', 'n = int(input())\n\n# create the board\nboard = [[0 for i in range(n)] for i in range(n)]\n\n# populate the board\nfor i in range(n):\n    x, y = [int(x) for x in input().split()]\n    board[x][y] = "Q"\n\n# check the board\nfor i in range(n):\n    for j in range(n):\n        if board[i][j] == "Q":\n            # check the row\n            for k in range(n):\n                if board[i][k] == "Q" and k != j:\n                    print("INCORRECT")\n                    exit()\n            # check the column\n            for k in range(n):\n                if board[k][j] == "Q" and k != i:\n                    print("INCORRECT")\n                    exit()\n            # check the diagonals\n            # check up and to the left\n            x = i\n            y = j\n            while x > 0 and y > 0:\n                x -= 1\n                y -= 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n            # check up and to the right\n            x = i\n            y = j\n            while x > 0 and y < n - 1:\n                x -= 1\n                y += 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n            # check down and to the left\n            x = i\n            y = j\n            while x < n - 1 and y > 0:\n                x += 1\n                y -= 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n            # check down and to the right\n            x = i\n            y = j\n            while x < n - 1 and y < n - 1:\n                x += 1\n                y += 1\n                if board[x][y] == "Q":\n                    print("INCORRECT")\n                    exit()\n\nprint("CORRECT")\n']
2022-04-12 01:23:46.029245 size on output set 2
2022-04-12 01:23:46.029269 num operations 2
2022-04-12 01:23:46.029274 size on input set 1
2022-04-12 01:23:50.058251 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\ndef check_queens(queens):\n    for queen in queens:\n        x, y = queen\n        for queen2 in queens:\n            x2, y2 = queen2\n            if x == x2 or y == y2 or abs(x - x2) == abs(y - y2):\n                if queen != queen2:\n                    return 'INCORRECT'\n    return 'CORRECT'\n\ndef main():\n    N = int(input())\n    queens = [list(map(int, input().split())) for i in range(N)]\n    print(check_queens(N, queens))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef check_queens(n, queens):\n    for queen in queens:\n        x, y = queen\n        for queen2 in queens:\n            x2, y2 = queen2\n            if x == x2 or y == y2 or abs(x - x2) == abs(y - y2):\n                if queen != queen2:\n                    return 'INCORRECT'\n    return 'CORRECT'\n\ndef main():\n    n = int(input())\n    queens = [list(map(int, input().split())) for i in range(n)]\n    print(check_queens(n, queens))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649741026,
  "object": "edit"
}
2022-04-12 01:23:50.058539 fix spelling mistakes 2 ['\ndef check_queens(queens):\n    for queen in queens:\n        x, y = queen\n        for queen2 in queens:\n            x2, y2 = queen2\n            if x == x2 or y == y2 or abs(x - x2) == abs(y - y2):\n                if queen != queen2:\n                    return \'INCORRECT\'\n    return \'CORRECT\'\n\ndef main():\n    N = int(input())\n    queens = [list(map(int, input().split())) for i in range(N)]\n    print(check_queens(N, queens))\n\nif __name__ == "__main__":\n    main()\n', '\ndef check_queens(n, queens):\n    for queen in queens:\n        x, y = queen\n        for queen2 in queens:\n            x2, y2 = queen2\n            if x == x2 or y == y2 or abs(x - x2) == abs(y - y2):\n                if queen != queen2:\n                    return \'INCORRECT\'\n    return \'CORRECT\'\n\ndef main():\n    n = int(input())\n    queens = [list(map(int, input().split())) for i in range(n)]\n    print(check_queens(n, queens))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 01:23:50.058579 size on output set 2
2022-04-12 01:23:50.058589 size on input set 2
2022-04-12 01:23:52.338364 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "def check_queens(n, queens):\n    for queen in queens:\n        x, y = queen\n        for queen2 in queens:\n            x2, y2 = queen2\n            if x == x2 or y == y2 or abs(x - x2) == abs(y - y2):\n                if queen != queen2:\n                    return 'INCORRECT'\n    return 'CORRECT'\n\n\ndef main():\n    n = int(input())\n    queens = [list(map(int, input().split())) for i in range(n)]\n    print(check_queens(n, queens))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "def check_queens(n, queens):\n    for queen in queens:\n        x, y = queen\n        for queen2 in queens:\n            x2, y2 = queen2\n            if x == x2 or y == y2 or abs(x - x2) == abs(y - y2):\n                if queen != queen2:\n                    return 'INCORRECT'\n    return 'CORRECT'\n\ndef main():\n    n = int(input())\n    queens = [list(map(int, input().split())) for i in range(n)]\n    print(check_queens(n, queens))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649741030,
  "object": "edit"
}
2022-04-12 01:23:52.339047 fix syntax errors 2 ['def check_queens(n, queens):\n    for queen in queens:\n        x, y = queen\n        for queen2 in queens:\n            x2, y2 = queen2\n            if x == x2 or y == y2 or abs(x - x2) == abs(y - y2):\n                if queen != queen2:\n                    return \'INCORRECT\'\n    return \'CORRECT\'\n\n\ndef main():\n    n = int(input())\n    queens = [list(map(int, input().split())) for i in range(n)]\n    print(check_queens(n, queens))\n\n\nif __name__ == "__main__":\n    main()\n', 'def check_queens(n, queens):\n    for queen in queens:\n        x, y = queen\n        for queen2 in queens:\n            x2, y2 = queen2\n            if x == x2 or y == y2 or abs(x - x2) == abs(y - y2):\n                if queen != queen2:\n                    return \'INCORRECT\'\n    return \'CORRECT\'\n\ndef main():\n    n = int(input())\n    queens = [list(map(int, input().split())) for i in range(n)]\n    print(check_queens(n, queens))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 01:23:54.698872 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef check_queens(queens):\n    for queen in queens:\n        x, y = queen\n        for queen2 in queens:\n            x2, y2 = queen2\n            if x == x2 or y == y2 or abs(x - x2) == abs(y - y2):\n                if queen != queen2:\n                    return 'INCORRECT'\n    return 'CORRECT'\n\ndef main():\n    N = int(input())\n    queens = [list(map(int, input().split())) for i in range(N)]\n    print(check_queens(queens))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef check_queens(queens):\n    for queen in queens:\n        x, y = queen\n        for queen2 in queens:\n            x2, y2 = queen2\n            if x == x2 or y == y2 or abs(x - x2) == abs(y - y2):\n                if queen != queen2:\n                    return 'INCORRECT'\n    return 'CORRECT'\n\ndef main():\n    N = int(input())\n    queens = [list(map(int, input().split())) for i in range(N)]\n    print(check_queens(queens))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649741032,
  "object": "edit"
}
2022-04-12 01:23:54.699149 fix syntax errors 2 ['\ndef check_queens(queens):\n    for queen in queens:\n        x, y = queen\n        for queen2 in queens:\n            x2, y2 = queen2\n            if x == x2 or y == y2 or abs(x - x2) == abs(y - y2):\n                if queen != queen2:\n                    return \'INCORRECT\'\n    return \'CORRECT\'\n\ndef main():\n    N = int(input())\n    queens = [list(map(int, input().split())) for i in range(N)]\n    print(check_queens(queens))\n\nif __name__ == "__main__":\n    main()\n', '\ndef check_queens(queens):\n    for queen in queens:\n        x, y = queen\n        for queen2 in queens:\n            x2, y2 = queen2\n            if x == x2 or y == y2 or abs(x - x2) == abs(y - y2):\n                if queen != queen2:\n                    return \'INCORRECT\'\n    return \'CORRECT\'\n\ndef main():\n    N = int(input())\n    queens = [list(map(int, input().split())) for i in range(N)]\n    print(check_queens(queens))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 01:23:54.699196 size on output set 3
2022-04-12 01:23:54.699212 num operations 2
2022-04-12 01:23:54.699220 size on input set 1
2022-04-12 01:23:57.809577 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    \"\"\"\n    This is the solution to the problem.\n    \"\"\"\n    # Read the input\n    n = int(input())\n    queens = []\n    for i in range(n):\n        queens.append(tuple(map(int, input().split())))\n    # Check if the solution is correct.\n    correct = True \n    for i in range(n):\n        for j in range(i + 1, n):\n            if queens[i][0] == queens[j][0] or queens[i][1] == queens[j][1] or abs(queens[i][0] - queens[j][0]) == abs(queens[i][1] - queens[j][1]):\n                correct = False\n                break\n    # Print the result\n    if correct:\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    \"\"\"\n    This is the solution to the problem.\n    \"\"\"\n    # Read the input\n    n = int(input())\n    queens = []\n    for i in range(n):\n        queens.append(tuple(map(int, input().split())))\n    # Check if the solution is incorrect\n    incorrect = False\n    for i in range(n):\n        for j in range(i + 1, n):\n            if queens[i][0] == queens[j][0] or queens[i][1] == queens[j][1] or abs(queens[i][0] - queens[j][0]) == abs(queens[i][1] - queens[j][1]):\n                incorrect = True\n                break\n    # Print the result\n    if not incorrect:\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649741034,
  "object": "edit"
}
2022-04-12 01:23:57.809743 fix spelling mistakes 2 ['\ndef main():\n    """\n    This is the solution to the problem.\n    """\n    # Read the input\n    n = int(input())\n    queens = []\n    for i in range(n):\n        queens.append(tuple(map(int, input().split())))\n    # Check if the solution is correct.\n    correct = True \n    for i in range(n):\n        for j in range(i + 1, n):\n            if queens[i][0] == queens[j][0] or queens[i][1] == queens[j][1] or abs(queens[i][0] - queens[j][0]) == abs(queens[i][1] - queens[j][1]):\n                correct = False\n                break\n    # Print the result\n    if correct:\n        print(\'CORRECT\')\n    else:\n        print(\'INCORRECT\')\n\nif __name__ == \'__main__\':\n    main()\n', '\ndef main():\n    """\n    This is the solution to the problem.\n    """\n    # Read the input\n    n = int(input())\n    queens = []\n    for i in range(n):\n        queens.append(tuple(map(int, input().split())))\n    # Check if the solution is incorrect\n    incorrect = False\n    for i in range(n):\n        for j in range(i + 1, n):\n            if queens[i][0] == queens[j][0] or queens[i][1] == queens[j][1] or abs(queens[i][0] - queens[j][0]) == abs(queens[i][1] - queens[j][1]):\n                incorrect = True\n                break\n    # Print the result\n    if not incorrect:\n        print(\'CORRECT\')\n    else:\n        print(\'INCORRECT\')\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-12 01:23:57.809763 size on output set 2
2022-04-12 01:23:57.809768 size on input set 2
2022-04-12 01:24:03.194821 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    \"\"\"\n    This is the solution to the problem.\n    \"\"\"\n    # Read the input\n    n = int(input())\n    queens = [tuple(map(int, input().split())) for i in range(n)]\n    # Check if the solution is incorrect\n    incorrect = False\n    for i in range(n):\n        for j in range(i + 1, n):\n            if queens[i][0] == queens[j][0] or queens[i][1] == queens[j][1] or abs(queens[i][0] - queens[j][0]) == abs(queens[i][1] - queens[j][1]):  # noqa\n                incorrect = True\n                break\n    # Print the result\n    if not incorrect:\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    \"\"\"\n    This is the solution to the problem.\n    \"\"\"\n    # Read the input\n    n = int(input())\n    queens = []\n    for i in range(n):\n        queens.append(tuple(map(int, input().split())))\n    # Check if the solution is incorrect\n    incorrect = False\n    for i in range(n):\n        for j in range(i + 1, n):\n            if queens[i][0] == queens[j][0] or queens[i][1] == queens[j][1] or abs(queens[i][0] - queens[j][0]) == abs(queens[i][1] - queens[j][1]):  # noqa\n                incorrect = True\n                break\n    # Print the result\n    if not incorrect:\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649741038,
  "object": "edit"
}
2022-04-12 01:24:03.195098 fix syntax errors 2 ['\ndef main():\n    """\n    This is the solution to the problem.\n    """\n    # Read the input\n    n = int(input())\n    queens = [tuple(map(int, input().split())) for i in range(n)]\n    # Check if the solution is incorrect\n    incorrect = False\n    for i in range(n):\n        for j in range(i + 1, n):\n            if queens[i][0] == queens[j][0] or queens[i][1] == queens[j][1] or abs(queens[i][0] - queens[j][0]) == abs(queens[i][1] - queens[j][1]):  # noqa\n                incorrect = True\n                break\n    # Print the result\n    if not incorrect:\n        print(\'CORRECT\')\n    else:\n        print(\'INCORRECT\')\n\nif __name__ == \'__main__\':\n    main()\n', '\ndef main():\n    """\n    This is the solution to the problem.\n    """\n    # Read the input\n    n = int(input())\n    queens = []\n    for i in range(n):\n        queens.append(tuple(map(int, input().split())))\n    # Check if the solution is incorrect\n    incorrect = False\n    for i in range(n):\n        for j in range(i + 1, n):\n            if queens[i][0] == queens[j][0] or queens[i][1] == queens[j][1] or abs(queens[i][0] - queens[j][0]) == abs(queens[i][1] - queens[j][1]):  # noqa\n                incorrect = True\n                break\n    # Print the result\n    if not incorrect:\n        print(\'CORRECT\')\n    else:\n        print(\'INCORRECT\')\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-12 01:24:05.498652 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    \"\"\"\n    This is the solution to the problem.\n    \"\"\"\n    # Read the input\n    n = int(input())\n    queens = []\n    for i in range(n):\n        queens.append(tuple(map(int, input().split())))\n    # Check if the solution is correct.\n    correct = True\n    for i in range(n):\n        for j in range(i + 1, n):\n            if queens[i][0] == queens[j][0] or queens[i][1] == queens[j][1] or abs(queens[i][0] - queens[j][0]) == abs(queens[i][1] - queens[j][1]):\n                correct = False\n                break\n    # Print the result\n    if correct:\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "def main():\n    \"\"\"\n    This is the solution to the problem.\n    \"\"\"\n    # Read the input\n    n = int(input())\n    queens = []\n    for i in range(n):\n        queens.append(tuple(map(int, input().split())))\n    # Check if the solution is correct.\n    correct = True\n    for i in range(n):\n        for j in range(i + 1, n):\n            if queens[i][0] == queens[j][0] or queens[i][1] == queens[j][1] or abs(queens[i][0] - queens[j][0]) == abs(queens[i][1] - queens[j][1]):\n                correct = False\n                break\n    # Print the result\n    if correct:\n        print('CORRECT')\n    else:\n        print('INCORRECT')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649741043,
  "object": "edit"
}
2022-04-12 01:24:05.498917 fix syntax errors 2 ['\ndef main():\n    """\n    This is the solution to the problem.\n    """\n    # Read the input\n    n = int(input())\n    queens = []\n    for i in range(n):\n        queens.append(tuple(map(int, input().split())))\n    # Check if the solution is correct.\n    correct = True\n    for i in range(n):\n        for j in range(i + 1, n):\n            if queens[i][0] == queens[j][0] or queens[i][1] == queens[j][1] or abs(queens[i][0] - queens[j][0]) == abs(queens[i][1] - queens[j][1]):\n                correct = False\n                break\n    # Print the result\n    if correct:\n        print(\'CORRECT\')\n    else:\n        print(\'INCORRECT\')\n\nif __name__ == \'__main__\':\n    main()\n', 'def main():\n    """\n    This is the solution to the problem.\n    """\n    # Read the input\n    n = int(input())\n    queens = []\n    for i in range(n):\n        queens.append(tuple(map(int, input().split())))\n    # Check if the solution is correct.\n    correct = True\n    for i in range(n):\n        for j in range(i + 1, n):\n            if queens[i][0] == queens[j][0] or queens[i][1] == queens[j][1] or abs(queens[i][0] - queens[j][0]) == abs(queens[i][1] - queens[j][1]):\n                correct = False\n                break\n    # Print the result\n    if correct:\n        print(\'CORRECT\')\n    else:\n        print(\'INCORRECT\')\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-12 01:24:05.499054 size on output set 4
2022-04-12 01:24:05.499068 num operations 2
2022-04-12 01:24:05.499075 size on input set 1
2022-04-12 01:24:12.770721 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    N = int(input())\n    queens = []\n    for i in range(N):\n        x, y = [int(x) for x in input().split()]\n        queens.append((x,y))\n    print(check_queen(queens))\n\ndef check_queen(queens):\n    for i in range(len(queens)):\n        for j in range(i+1, len(queens)):\n            if check_attack(queens[i], queens[j]):\n                return \"INCORRECT\"\n    return \"CORRECT\"\n\ndef check_attack(q1, q2):\n    return q1[0] == q2[0] or q1[1] == q2[1] or abs(q1[0] - q2[0]) == abs(q1[1] - q2[1])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    N = int(input())\n    queens = []\n    for i in range(N):\n        x, y = [int(x) for x in input().split()]\n        queens.append((x,y))\n    print(check_queens(queens))\n\ndef check_queens(queens):\n    for i in range(len(queens)):\n        for j in range(i+1, len(queens)):\n            if check_attack(queens[i], queens[j]):\n                return \"INCORRECT\" # \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0445\u043e\u0442\u044c \u043e\u0434\u043d\u0430 \u043f\u0430\u0440\u0430 \u0430\u0442\u0430\u043a\u0443\u044e\u0449\u0438\u0445 \u0444\u0435\u0440\u0437\u0435\u0439, \u0442\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u043c \"INCORRECT\"\n    return \"CORRECT\" # \u0435\u0441\u043b\u0438 \u043d\u0435\u0442 \u043d\u0438 \u043e\u0434\u043d\u043e\u0439 \u043f\u0430\u0440\u044b \u0430\u0442\u0430\u043a\u0443\u044e\u0449\u0438\u0445 \u0444\u0435\u0440\u0437\u0435\u0439, \u0442\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u043c \"CORRECT\"\n\ndef check_attack(q1, q2):\n    return q1[0] == q2[0] or q1[1] == q2[1] or abs(q1[0] - q2[0]) == abs(q1[1] - q2[1]) # \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0430 \u0430\u0442\u0430\u043a\u0443 \u043f\u043e \u0432\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u0438, \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u0438 \u0438 \u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u0438\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649741045,
  "object": "edit"
}
2022-04-12 01:24:12.770850 fix spelling mistakes 2 ['\n\ndef main():\n    N = int(input())\n    queens = []\n    for i in range(N):\n        x, y = [int(x) for x in input().split()]\n        queens.append((x,y))\n    print(check_queen(queens))\n\ndef check_queen(queens):\n    for i in range(len(queens)):\n        for j in range(i+1, len(queens)):\n            if check_attack(queens[i], queens[j]):\n                return "INCORRECT"\n    return "CORRECT"\n\ndef check_attack(q1, q2):\n    return q1[0] == q2[0] or q1[1] == q2[1] or abs(q1[0] - q2[0]) == abs(q1[1] - q2[1])\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N = int(input())\n    queens = []\n    for i in range(N):\n        x, y = [int(x) for x in input().split()]\n        queens.append((x,y))\n    print(check_queens(queens))\n\ndef check_queens(queens):\n    for i in range(len(queens)):\n        for j in range(i+1, len(queens)):\n            if check_attack(queens[i], queens[j]):\n                return "INCORRECT" # если есть хоть одна пара атакующих ферзей, то выводим "INCORRECT"\n    return "CORRECT" # если нет ни одной пары атакующих ферзей, то выводим "CORRECT"\n\ndef check_attack(q1, q2):\n    return q1[0] == q2[0] or q1[1] == q2[1] or abs(q1[0] - q2[0]) == abs(q1[1] - q2[1]) # проверяем на атаку по вертикали, горизонтали и диагонали\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 01:24:12.770876 size on output set 2
2022-04-12 01:24:12.770879 size on input set 2
2022-04-12 01:24:16.384700 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    N = int(input())\n    queens = []\n    for i in range(N):\n        x, y = [int(x) for x in input().split()]\n        queens.append((x, y))\n\n    print(check_queen(queens))\n\ndef check_queen(queens):\n    for i in range(len(queens)):\n        for j in range(i + 1, len(queens)):\n            if check_attack(queens[i], queens[j]):\n                return \"INCORRECT\"\n    return \"CORRECT\"\n\n\ndef check_attack(q1, q2):\n    return q1[0] == q2[0] or q1[1] == q2[1] or abs(q1[0] - q2[0]) == abs(q1[1] - q2[1])\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    N = int(input())\n    queens = []\n    for i in range(N):\n        x, y = [int(x) for x in input().split()]\n        queens.append((x, y))\n\n    print(check_queen(queens))\n\ndef check_queen(queens):\n    for i in range(len(queens)):\n        for j in range(i + 1, len(queens)):\n            if check_attack(queens[i], queens[j]):\n                return \"INCORRECT\"\n    return \"CORRECT\"\n\n\ndef check_attack(q1, q2):\n    return q1[0] == q2[0] or q1[1] == q2[1] or abs(q1[0] - q2[0]) == abs(q1[1] - q2[1])\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649741052,
  "object": "edit"
}
2022-04-12 01:24:16.384805 fix syntax errors 2 ['\n\ndef main():\n    N = int(input())\n    queens = []\n    for i in range(N):\n        x, y = [int(x) for x in input().split()]\n        queens.append((x, y))\n\n    print(check_queen(queens))\n\ndef check_queen(queens):\n    for i in range(len(queens)):\n        for j in range(i + 1, len(queens)):\n            if check_attack(queens[i], queens[j]):\n                return "INCORRECT"\n    return "CORRECT"\n\n\ndef check_attack(q1, q2):\n    return q1[0] == q2[0] or q1[1] == q2[1] or abs(q1[0] - q2[0]) == abs(q1[1] - q2[1])\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N = int(input())\n    queens = []\n    for i in range(N):\n        x, y = [int(x) for x in input().split()]\n        queens.append((x, y))\n\n    print(check_queen(queens))\n\ndef check_queen(queens):\n    for i in range(len(queens)):\n        for j in range(i + 1, len(queens)):\n            if check_attack(queens[i], queens[j]):\n                return "INCORRECT"\n    return "CORRECT"\n\n\ndef check_attack(q1, q2):\n    return q1[0] == q2[0] or q1[1] == q2[1] or abs(q1[0] - q2[0]) == abs(q1[1] - q2[1])\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 01:24:29.894762 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    N = int(input())\n    queens = []\n    for i in range(N):\n        x, y = [int(x) for x in input().split()]\n        queens.append((x,y))\n    print(check_queens(queens))\n\ndef check_queens(queens):\n    for i in range(len(queens)):\n        for j in range(i+1, len(queens)):\n            if check_attack(queens[i], queens[j]):\n    return \"CORRECT\"\n\ndef check_attack(q1, q2):\n    return q1[0] == q2[0] or q1[1] == q2[1] or abs(q1[0] - q2[0]) == abs(q1[1] - q2[1])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    N = int(input())\n    queens = []\n    for i in range(N):\n        x, y = [int(x) for x in input().split()]\n        queens.append((x, y))\n\n    print(check_queens(queens))\n\ndef check_queens(queens):\n    for i in range(len(queens)):\n        for j in range(i + 1, len(queens)):\n            if check_attack(queens[i], queens[j]):\n                return \"INCORRECT\"  # \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0445\u043e\u0442\u044c \u043e\u0434\u043d\u0430 \u043f\u0430\u0440\u0430 \u0430\u0442\u0430\u043a\u0443\u044e\u0449\u0438\u0445 \u0444\u0435\u0440\u0437\u0435\u0439, \u0442\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u043c \"INCORRECT\"\n    return \"CORRECT\"  # \u0435\u0441\u043b\u0438 \u043d\u0435\u0442 \u043d\u0438 \u043e\u0434\u043d\u043e\u0439 \u043f\u0430\u0440\u044b \u0430\u0442\u0430\u043a\u0443\u044e\u0449\u0438\u0445 \u0444\u0435\u0440\u0437\u0435\u0439, \u0442\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u043c \"CORRECT\"\n\n\ndef check_attack(q1, q2):\n    return q1[0] == q2[0] or q1[1] == q2[1] or abs(q1[0] - q2[0]) == abs(q1[1] - q2[1])  # \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0430 \u0430\u0442\u0430\u043a\u0443 \u043f\u043e \u0432\u0435\u0440\u0442\u0438\u043a\u0430\u043b\u0438, \u0433\u043e\u0440\u0438\u0437\u043e\u043d\u0442\u0430\u043b\u0438 \u0438 \u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u0438\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649741056,
  "object": "edit"
}
2022-04-12 01:24:29.895300 fix syntax errors 2 ['\n\ndef main():\n    N = int(input())\n    queens = []\n    for i in range(N):\n        x, y = [int(x) for x in input().split()]\n        queens.append((x,y))\n    print(check_queens(queens))\n\ndef check_queens(queens):\n    for i in range(len(queens)):\n        for j in range(i+1, len(queens)):\n            if check_attack(queens[i], queens[j]):\n    return "CORRECT"\n\ndef check_attack(q1, q2):\n    return q1[0] == q2[0] or q1[1] == q2[1] or abs(q1[0] - q2[0]) == abs(q1[1] - q2[1])\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    N = int(input())\n    queens = []\n    for i in range(N):\n        x, y = [int(x) for x in input().split()]\n        queens.append((x, y))\n\n    print(check_queens(queens))\n\ndef check_queens(queens):\n    for i in range(len(queens)):\n        for j in range(i + 1, len(queens)):\n            if check_attack(queens[i], queens[j]):\n                return "INCORRECT"  # если есть хоть одна пара атакующих ферзей, то выводим "INCORRECT"\n    return "CORRECT"  # если нет ни одной пары атакующих ферзей, то выводим "CORRECT"\n\n\ndef check_attack(q1, q2):\n    return q1[0] == q2[0] or q1[1] == q2[1] or abs(q1[0] - q2[0]) == abs(q1[1] - q2[1])  # проверяем на атаку по вертикали, горизонтали и диагонали\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 01:24:29.895397 size on output set 3
