["\n\ndef hailstone(n):\n    if n == 1: return 1\n    elif n % 2 == 0: return n + hailstone(n // 2)\n    else: return n + hailstone(3 * n + 1)\n\nn = int(input())\nprint(hailstone(n))\n", "\n\ndef hailstone(n):  # hailstone function\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n + hailstone(n//2)\n    else:\n        return n + hailstone(3*n + 1)\n\nn = int(input())\nprint(hailstone(n))\n", "\n# Define recursively defined hailstorm sequence generator\ndef hailstone(n):\n    if n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return [n] + hailstone(n // 2)\n    else:\n        return [n] + hailstone(3 * n + 1)\n\n# Read input\nn = int(input())\n\n# Print sum of hailstorm sequence\nprint(sum(hailstone(n)))\n", "#!/usr/bin/env python\n\ndef hailstonesum(n):\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n + hailstonesum(n // 2)\n    else:\n        return n + hailstonesum((3 * n) + 1)\n\ndef main():\n    n = int(input())\n    print(hailstonesum(n))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef hailstone(n): #function to calculate the hailstone sequence\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + hailstone(int(n/2))\n    else:\n        return n + hailstone(3*n + 1)\n\nn = int(input())\nprint(hailstone(n))\n", "\n\ndef hailstone(n): \n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n + hailstone(n / 2)\n    else:\n        return n + hailstone(3 * n + 1)\n\nn = int(input())\nprint(hailstone(n))\n", "\n# Define recursively defined hailstone sequence generator.\ndef hailstone(n):\n    if n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return [n] + hailstone(n // 2)\n    else:\n        return [n] + hailstone(3 * n + 1)\n\n# Read input.\nn = int(input(\"Enter a number: \"))\n\n# Print sum of hailstone sequence.\nprint(sum(hailstone(n)))\n", "\n\ndef hailstone(n): #function to calculate the hailstone sequence\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + hailstone(n // 2)\n    else:\n        return n + hailstone(3*n + 1)\n\nn = int(input())\nprint(hailstone(n))\n", "\n# Define recursively defined hailstone sequence generator.\ndef hailstone(n):\n    if n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return [n] + hailstone(n // 2)\n    else:\n        return [n] + hailstone(3 * n + 1)\n\n# Read input.\nn = int(input())\n\n# Print sum of hailstone sequence.\nprint(sum(hailstone(n)))\n", "\n# Recursive function for summing up the hailstone sequence\ndef hailstone_sum(n):\n    # Base case\n    if n == 1:\n        return 1\n    # Recursive case\n    elif n % 2 == 0:\n        return n + hailstone_sum(n // 2)\n    else:\n        return n + hailstone_sum(3 * n + 1)\n\n\n# Retrieve user input\nn = int(input())\n\nprint(hailstone_sum(n))\n", "import sys\n\ndef hailstone(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + hailstone(n // 2)\n    else:\n        return n + hailstone(3 * n + 1)\n\ndef main():\n    n = int(sys.stdin.readline().rstrip())\n    print(hailstone(n))\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef hailstone(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + hailstone(n//2)\n    else:\n        return n + hailstone(3*n + 1)\n\ndef main():\n    n = int(sys.stdin.readline().rstrip())\n    print(hailstone(n))\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef h(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + h(n // 2)\n    else:\n        return n + h((3 * n) + 1)\n\ndef main():\n    num = int(sys.stdin.readline().strip())\n    print(h(num))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef h(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + h(n // 2)\n    else:\n        return n + h((3 * n) + 1)\n\ndef main():\n    num = int(sys.stdin.readline().strip())\n    print(h(num))\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\ndef hailstone_sum(n):\n    if n == 1: return 1\n    if n % 2 == 0: return n + hailstone_sum(n // 2)\n    else: return n + hailstone_sum((3 * n) + 1)\n\ndef main():\n    n = int(input())\n    print(hailstone_sum(n))\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef hailstone(n):\n\tif n == 1:\n\t\treturn 1\n\telif n % 2 == 0:\n\t\treturn n + hailstone(n/2)\n\telse:\n\t\treturn n + hailstone(3*n + 1)\n\ndef main():\n\tn = int(sys.stdin.readline().rstrip())\n\tprint(hailstone(n))\n\nif __name__ == \"__main__\":\n\tmain()\n", "\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Mon Sep  7 10:14:56 2020\n@author: nenad\n\"\"\"\ndef hailstone_sum(n, acc=0):\n    # base case\n    if n == 1: return acc + 1\n    # recursive case\n    elif n % 2 == 0: return hailstone_sum(n // 2, acc + n)\n    else: return hailstone_sum(3*n + 1, acc + n)\n    \nn = int(input())    \nprint(hailstone_sum(n))    \n", "#!/usr/bin/env python3\n\nimport sys\n\ndef h(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + h(n // 2)\n    else:\n        return n + h((3 * n) + 1)\n\ndef main():\n    num = int(sys.stdin.readline().strip())\n    print(h(num))\n\nif __name__ == '__main__':\n    main()\n", "\n# Recursive function for summing up hailstone sequence.\ndef hailstone_sum(n):\n    # Base case.\n    if n == 1:\n        return 1\n    # Recursive case.\n    elif n % 2 == 0:\n        return n + hailstone_sum(n // 2)\n    else:\n        return n + hailstone_sum(3 * n + 1)\n\n\n# Retrieve user input.\nn = int(input())\n\nprint(hailstone_sum(n))\n", "\n\ndef hailstone(n):\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n + hailstone(n//2)\n    else:\n        return n + hailstone(3*n + 1)\n\nn = int(input())\nprint(hailstone(n))\n", "#!/usr/bin/env python3\n\ndef hailstone_sum(n):\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n + hailstone_sum(n // 2)\n    else:\n        return n + hailstone_sum((3 * n) + 1)\n\ndef main():\n    n = int(input())\n    print(hailstone_sum(n))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef hailstone(n): # hailstone function\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return 3 * n + 1\n\nn = int(input())\nprint(hailstone(n))\n", "\n\n#The answer is:\n\"\"\"\nimport sys\n\ndef hailstone(n):\n    if n == 1: return 1\n    elif n % 2 == 0: return n + hailstone(n//2)\n    else:\n        return n + hailstone(3*n+1)\n\ndef main():\n    for line in sys.stdin:\n        n = int(line)\n        print(hailstone(n))\n\nif __name__ == '__main__':\n    main()\n\"\"\"\n", "\ndef hailstone(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + hailstone(n // 2)\n    else:\n        return n + hailstone(3 * n + 1)\n\n\ndef main():\n    n = int(input())\n    print(hailstone(n))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n# Recursive function for summing up hailstone sequence.\ndef hailstone_sum(n):\n\t# Base case.\n\tif n == 1:\n\t\treturn 1\n\t# Recursive case.\n\telif n % 2 == 0:\n\t\treturn n + hailstone_sum(n // 2)\n\telse:\n\t\treturn n + hailstone_sum(3*n + 1)\n\n# Retrieve user input.\nn = int(input(\"Enter a number: \"))\n\nprint(hailstone_sum(n))\n", "\n\n#The answer is:\n\nimport sys\n\ndef hailstone(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + hailstone(n//2)\n    else:\n        return n + hailstone((3*n)+1)\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(hailstone(n))\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef hailstone(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return n + hailstone(n//2)\n    else:\n        return n + hailstone(3*n+1)\n\ndef main():\n    n = int(sys.stdin.readline().rstrip())\n    print(hailstone(n))\n\nif __name__ == \"__main__\":\n    main()\n"]