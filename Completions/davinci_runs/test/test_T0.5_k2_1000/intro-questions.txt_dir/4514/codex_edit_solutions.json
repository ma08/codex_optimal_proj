["#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\ninput = sys.stdin.readline\n\ndef main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    a.sort()\n    b.sort()\n\n    a_idx = 0\n    b_idx = 0\n\n    while a_idx < n and b_idx < m:\n        if a[a_idx] <= b[b_idx]:\n            a_idx += 1\n        else:\n            b_idx += 1\n\n    print(n - a_idx)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # Read the input\n    n, q = [int(x) for x in input().split()]\n    adj = [0] + [int(x) for x in input().split()]\n    queries = [tuple(int(x) for x in input().split()) for _ in range(q)]\n\n    # Build the tree\n    tree = [[] for _ in range(n+1)]\n    for i in range(2, n+1):\n        tree[adj[i]].append(i)\n\n\n    for u, k in queries:\n        visited = set()\n        # DFS to find kth node\n        def dfs(u):\n            if u not in visited:\n                visited.add(u)\n                if len(visited) == k:\n                    return u\n                for v in tree[u]:\n                    if v not in visited:\n                        res = dfs(v)\n                        if res:\n                            return res\n            return None\n        res = dfs(u)\n        print(res)\n\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\n# Read the input\ndef read_input():\n    n, q = [int(x) for x in sys.stdin.readline().split()]\n    adj = [0]\n    adj.extend([int(x) for x in sys.stdin.readline().split()])\n    queries = []\n    for _ in range(q):\n        queries.append([int(x) for x in sys.stdin.readline().split()])\n    return n, q, adj, queries\n\n\n# Build the tree\ndef build_tree(n, adj):\n    tree = [[] for _ in range(n+1)]\n    for i in range(2, n+1):\n        tree[adj[i]].append(i)\n    return tree\n\n\n# DFS to find the kth node\ndef dfs(tree, u, k, visited):\n    if u not in visited:\n        visited.add(u)\n        if len(visited) == k:\n            return u\n        for v in tree[u]:\n            if v not in visited:\n                res = dfs(tree, v, k, visited)\n                if res:\n                    return res\n    return None\n\n\ndef main():\n    n, q, adj, queries = read_input()\n    tree = build_tree(n, adj)\n    for u, k in queries:\n        visited = set()\n        res = dfs(tree, u, k, visited)\n        if res:\n            print(res)\n        else:\n            print(-1)\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Wed Nov  6 00:05:14 2019\n\n@author: y56\n\"\"\"\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\na.sort()\nb.sort()\n\na_sum = sum(a)\nb_sum = sum(b)\n\na_max = a[-1]\nb_max = b[-1]\n\nif a_max > b_max:\n    print(-1)\n    exit()\n\nif a_sum > b_sum:\n    print(-1)\n    exit()\n\nif a_max == b_max:\n    print(0)\n    exit()\n\na_max_cnt = a.count(a_max)\nb_max_cnt = b.count(b_max)\n\na_max_cnt = a_max_cnt - (a_sum - b_sum) // (b_max - a_max)\n\nif a_max_cnt <= 0:\n    print(0)\n    exit()\n\nprint(a_max_cnt)\n", "\nimport sys\n\n# Read the input\ndef read_input():\n    n, m = [int(x) for x in sys.stdin.readline().split()]\n    adj = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v = [int(x) for x in sys.stdin.readline().split()]\n        adj[u].append(v)\n        adj[v].append(u)\n    return n, m, adj\n\n\n# DFS to find the number of components\ndef dfs(adj, u, visited):\n    if u not in visited:\n        visited.add(u)\n        for v in adj[u]:\n            dfs(adj, v, visited)\n\n\n\n# Find the number of components\ndef find_components(adj):\n    visited = set()\n    count = 0\n    for u in range(1, len(adj)):\n        if u not in visited:\n            count += 1\n            dfs(adj, u, visited)\n    return count\n\n\ndef main():\n    n, m, adj = read_input()\n    print(find_components(adj))\n\nif __name__ == \"__main__\":\n    main()\n", "\nclass Node:\n    def __init__(self, id, parent):\n        self.id = id\n        self.parent = parent\n        self.children = []\n        self.visited = False\n\nclass Graph:\n    def __init__(self, n):\n        self.nodes = [Node(i, None) for i in range(n)]\n        self.nodes[0].parent = self.nodes[0]\n        self.nodes[0].visited = True\n\n    def add_edge(self, u, v):\n        self.nodes[v].parent = self.nodes[u]\n        self.nodes[u].children.append(self.nodes[v])\n\n    def dfs(self, root):\n        res = [root.id]\n        root.visited = True\n        for c in root.children:\n            if not c.visited:\n                res.extend(self.dfs(c))\n        return res\n\ndef main():\n    n, q = map(int, input().split())\n    g = Graph(n)\n    for i in range(1, n):\n        g.add_edge(int(input()) - 1, i)\n    for _ in range(q):\n        u, k = map(int, input().split())\n        u -= 1\n        res = g.dfs(g.nodes[u])\n        if k <= len(res):\n            print(res[k-1] + 1)\n        else:\n            print(-1)\n\nif __name__ == '__main__':\n    main()\n"]