2022-04-11 21:45:43.771824 num operations 2
2022-04-11 21:45:43.771866 size on input set 1
2022-04-11 21:45:47.854851 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        res = [[1]]\n        for i in range(1, numRows):\n            res.append([])\n            for j in range(i+1):\n                if j == 0 or j == i:\n                    res[i].append(1)\n                else:\n                    res[i].append(res[i-1][j-1] + res[i-1][j])\n        return res\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2020/6/13 20:59\n# @Author  : cai\n# @contact : yuwei.chen@yunzhenxin.com\n# @File    : Q118_generate.py\n# @Note    : https://leetcode-cn.com/problems/pascals-triangle/\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        res = [[1]]\n        for i in range(1, numRows):\n            res.append([])\n            for j in range(i+1):\n                if j == 0 or j == i:\n                    res[i].append(1)\n                else:\n\n                    res[i].append(res[i-1][j-1] + res[i-1][j])\n        return res\n"
    }
  ],
  "created": 1649727944,
  "object": "edit"
}
2022-04-11 21:45:47.855141 fix spelling mistakes 2 ['\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        res = [[1]]\n        for i in range(1, numRows):\n            res.append([])\n            for j in range(i+1):\n                if j == 0 or j == i:\n                    res[i].append(1)\n                else:\n                    res[i].append(res[i-1][j-1] + res[i-1][j])\n        return res\n', '#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2020/6/13 20:59\n# @Author  : cai\n# @contact : yuwei.chen@yunzhenxin.com\n# @File    : Q118_generate.py\n# @Note    : https://leetcode-cn.com/problems/pascals-triangle/\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        res = [[1]]\n        for i in range(1, numRows):\n            res.append([])\n            for j in range(i+1):\n                if j == 0 or j == i:\n                    res[i].append(1)\n                else:\n\n                    res[i].append(res[i-1][j-1] + res[i-1][j])\n        return res\n']
2022-04-11 21:45:47.855169 size on output set 2
2022-04-11 21:45:47.855175 size on input set 2
2022-04-11 21:45:50.427638 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "class Solution:\n    def generate(self, numRows):\n        if numRows == 0:\n            return []\n        res = [[1]]\n        for i in range(1, numRows):\n            res.append([])\n            for j in range(i+1):\n                if j == 0 or j == i:\n                    res[i].append(1)\n                else:\n                    res[i].append(res[i-1][j-1] + res[i-1][j])\n        return res\n"
    },
    {
      "index": 1,
      "text": "from typing import List\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        res = [[1]]\n        for i in range(1, numRows):\n            res.append([])\n            for j in range(i+1):\n                if j == 0 or j == i:\n                    res[i].append(1)\n                else:\n                    res[i].append(res[i-1][j-1] + res[i-1][j])\n        return res\n"
    }
  ],
  "created": 1649727948,
  "object": "edit"
}
2022-04-11 21:45:50.428132 fix syntax errors 2 ['class Solution:\n    def generate(self, numRows):\n        if numRows == 0:\n            return []\n        res = [[1]]\n        for i in range(1, numRows):\n            res.append([])\n            for j in range(i+1):\n                if j == 0 or j == i:\n                    res[i].append(1)\n                else:\n                    res[i].append(res[i-1][j-1] + res[i-1][j])\n        return res\n', 'from typing import List\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        res = [[1]]\n        for i in range(1, numRows):\n            res.append([])\n            for j in range(i+1):\n                if j == 0 or j == i:\n                    res[i].append(1)\n                else:\n                    res[i].append(res[i-1][j-1] + res[i-1][j])\n        return res\n']
2022-04-11 21:45:57.738703 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2020/6/13 20:59\n# @Author  : cai\n# @contact : yuwei.chen@yunzhenxin.com\n# @File    : Q118_generate.py\n# @Note    : https://leetcode-cn.com/problems/pascals-triangle-ii/\n\nclass Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n        res = [1, 1]\n        for i in range(2, rowIndex+1):\n            res.append(1)\n            for j in range(i-1, 0, -1):\n                res[j] = res[j] + res[j-1]\n        return res[:rowIndex+1]\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2020/6/13 20:59\n# @Author  : cai\n# @contact : yuwei.chen@yunzhenxin.com\n# @File    : Q118_generate.py\n# @Note    : https://leetcode-cn.com/problems/pascals-triangle/\nfrom typing import List\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        res = [[1]]\n        for i in range(1, numRows):\n            res.append([])\n            for j in range(i+1):\n                if j == 0 or j == i:\n                    res[i].append(1)\n                else:\n\n                    res[i].append(res[i-1][j-1] + res[i-1][j])\n        return res\n"
    }
  ],
  "created": 1649727950,
  "object": "edit"
}
2022-04-11 21:45:57.738918 fix syntax errors 2 ['#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2020/6/13 20:59\n# @Author  : cai\n# @contact : yuwei.chen@yunzhenxin.com\n# @File    : Q118_generate.py\n# @Note    : https://leetcode-cn.com/problems/pascals-triangle-ii/\n\nclass Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n        res = [1, 1]\n        for i in range(2, rowIndex+1):\n            res.append(1)\n            for j in range(i-1, 0, -1):\n                res[j] = res[j] + res[j-1]\n        return res[:rowIndex+1]\n', '#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2020/6/13 20:59\n# @Author  : cai\n# @contact : yuwei.chen@yunzhenxin.com\n# @File    : Q118_generate.py\n# @Note    : https://leetcode-cn.com/problems/pascals-triangle/\nfrom typing import List\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        res = [[1]]\n        for i in range(1, numRows):\n            res.append([])\n            for j in range(i+1):\n                if j == 0 or j == i:\n                    res[i].append(1)\n                else:\n\n                    res[i].append(res[i-1][j-1] + res[i-1][j])\n        return res\n']
2022-04-11 21:45:57.738963 size on output set 4
2022-04-11 21:45:57.738981 num operations 2
2022-04-11 21:45:57.738991 size on input set 1
2022-04-11 21:46:00.453296 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "# coding=utf-8\nclass Solution:\n    def generate(self, numRows):\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1,1]]\n        res = [[1], [1,1]]\n        for i in range(2, numRows):\n            tmp = [1]\n            for j in range(1, i):\n                tmp.append(res[i-1][j-1] + res[i-1][j])\n            tmp.append(1)\n            res.append(tmp)\n        return res\n"
    },
    {
      "index": 1,
      "text": "class Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1,1]]\n        res = [[1], [1,1]]\n        for i in range(2, numRows):\n            tmp = [1]\n            for j in range(1, i):\n                tmp.append(res[i-1][j-1] + res[i-1][j])\n            tmp.append(1)\n            res.append(tmp)\n        return res\n"
    }
  ],
  "created": 1649727958,
  "object": "edit"
}
2022-04-11 21:46:00.453708 fix spelling mistakes 2 ['# coding=utf-8\nclass Solution:\n    def generate(self, numRows):\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1,1]]\n        res = [[1], [1,1]]\n        for i in range(2, numRows):\n            tmp = [1]\n            for j in range(1, i):\n                tmp.append(res[i-1][j-1] + res[i-1][j])\n            tmp.append(1)\n            res.append(tmp)\n        return res\n', 'class Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1,1]]\n        res = [[1], [1,1]]\n        for i in range(2, numRows):\n            tmp = [1]\n            for j in range(1, i):\n                tmp.append(res[i-1][j-1] + res[i-1][j])\n            tmp.append(1)\n            res.append(tmp)\n        return res\n']
2022-04-11 21:46:00.453754 size on output set 2
2022-04-11 21:46:00.453760 size on input set 2
2022-04-11 21:46:02.879641 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "class Solution:\n    def generate(self, numRows):\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1,1]]\n        res = [[1], [1,1]]\n        for i in range(2, numRows):\n            tmp = [1]\n            for j in range(1, i):\n                tmp.append(res[i-1][j-1] + res[i-1][j])\n            tmp.append(1)\n            res.append(tmp)\n        return res\n"
    },
    {
      "index": 1,
      "text": "class Solution:\n    def generate(self, numRows):\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1,1]]\n        res = [[1], [1,1]]\n        for i in range(2, numRows):\n            tmp = [1]\n            for j in range(1, i):\n                tmp.append(res[i-1][j-1] + res[i-1][j])\n            tmp.append(1)\n            res.append(tmp)\n        return res\n"
    }
  ],
  "created": 1649727960,
  "object": "edit"
}
2022-04-11 21:46:02.879910 fix syntax errors 2 ['class Solution:\n    def generate(self, numRows):\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1,1]]\n        res = [[1], [1,1]]\n        for i in range(2, numRows):\n            tmp = [1]\n            for j in range(1, i):\n                tmp.append(res[i-1][j-1] + res[i-1][j])\n            tmp.append(1)\n            res.append(tmp)\n        return res\n', 'class Solution:\n    def generate(self, numRows):\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1,1]]\n        res = [[1], [1,1]]\n        for i in range(2, numRows):\n            tmp = [1]\n            for j in range(1, i):\n                tmp.append(res[i-1][j-1] + res[i-1][j])\n            tmp.append(1)\n            res.append(tmp)\n        return res\n']
2022-04-11 21:46:05.595702 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# coding=utf-8\nclass Solution:\n    def generate(self, numRows):\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1, 1]]\n        res = [[1], [1, 1]]\n        for i in range(2, numRows):\n            tmp = [1]\n            for j in range(1, i):\n                tmp.append(res[i-1][j-1] + res[i-1][j])\n            tmp.append(1)\n            res.append(tmp)\n        return res\n"
    },
    {
      "index": 1,
      "text": "# coding=utf-8\nclass Solution:\n    def generate(self, numRows):\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1, 1]]\n        res = [[1], [1, 1]]\n        for i in range(2, numRows):\n            tmp = [1]\n            for j in range(1, i):\n                tmp.append(res[i-1][j-1] + res[i-1][j])\n            tmp.append(1)\n            res.append(tmp)\n        return res\n"
    }
  ],
  "created": 1649727963,
  "object": "edit"
}
2022-04-11 21:46:05.596203 fix syntax errors 2 ['# coding=utf-8\nclass Solution:\n    def generate(self, numRows):\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1, 1]]\n        res = [[1], [1, 1]]\n        for i in range(2, numRows):\n            tmp = [1]\n            for j in range(1, i):\n                tmp.append(res[i-1][j-1] + res[i-1][j])\n            tmp.append(1)\n            res.append(tmp)\n        return res\n', '# coding=utf-8\nclass Solution:\n    def generate(self, numRows):\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1, 1]]\n        res = [[1], [1, 1]]\n        for i in range(2, numRows):\n            tmp = [1]\n            for j in range(1, i):\n                tmp.append(res[i-1][j-1] + res[i-1][j])\n            tmp.append(1)\n            res.append(tmp)\n        return res\n']
2022-04-11 21:46:05.596285 size on output set 2
