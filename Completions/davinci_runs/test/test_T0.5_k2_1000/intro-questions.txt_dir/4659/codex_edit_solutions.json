["# coding=utf-8\nclass Solution:\n    def generate(self, numRows):\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1, 1]]\n        res = [[1], [1, 1]]\n        for i in range(2, numRows):\n            tmp = [1]\n            for j in range(1, i):\n                tmp.append(res[i-1][j-1] + res[i-1][j])\n            tmp.append(1)\n            res.append(tmp)\n        return res\n", "from typing import List\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        res = [[1]]\n        for i in range(1, numRows):\n            res.append([])\n            for j in range(i+1):\n                if j == 0 or j == i:\n                    res[i].append(1)\n                else:\n                    res[i].append(res[i-1][j-1] + res[i-1][j])\n        return res\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2020/6/13 20:59\n# @Author  : cai\n# @contact : yuwei.chen@yunzhenxin.com\n# @File    : Q118_generate.py\n# @Note    : https://leetcode-cn.com/problems/pascals-triangle/\nfrom typing import List\n\nclass Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        if numRows == 0:\n            return []\n        res = [[1]]\n        for i in range(1, numRows):\n            res.append([])\n            for j in range(i+1):\n                if j == 0 or j == i:\n                    res[i].append(1)\n                else:\n\n                    res[i].append(res[i-1][j-1] + res[i-1][j])\n        return res\n", "class Solution:\n    def generate(self, numRows):\n        if numRows == 0:\n            return []\n        res = [[1]]\n        for i in range(1, numRows):\n            res.append([])\n            for j in range(i+1):\n                if j == 0 or j == i:\n                    res[i].append(1)\n                else:\n                    res[i].append(res[i-1][j-1] + res[i-1][j])\n        return res\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2020/6/13 20:59\n# @Author  : cai\n# @contact : yuwei.chen@yunzhenxin.com\n# @File    : Q118_generate.py\n# @Note    : https://leetcode-cn.com/problems/pascals-triangle-ii/\n\nclass Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n        res = [1, 1]\n        for i in range(2, rowIndex+1):\n            res.append(1)\n            for j in range(i-1, 0, -1):\n                res[j] = res[j] + res[j-1]\n        return res[:rowIndex+1]\n", "class Solution:\n    def generate(self, numRows):\n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1,1]]\n        res = [[1], [1,1]]\n        for i in range(2, numRows):\n            tmp = [1]\n            for j in range(1, i):\n                tmp.append(res[i-1][j-1] + res[i-1][j])\n            tmp.append(1)\n            res.append(tmp)\n        return res\n"]