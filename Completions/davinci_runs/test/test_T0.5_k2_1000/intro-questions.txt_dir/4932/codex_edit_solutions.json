["\n\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n\n    def get_dog_status(time, aggressive, calm):\n        if time == 0:\n            return 'aggressive'\n        time -= 1\n        if time < aggressive:\n            return 'aggressive'\n        time -= aggressive\n        if time < calm:\n            return 'calm'\n        time -= calm\n        return get_dog_status(time, aggressive, calm)\n\n    def get_dog_attack(time):\n        if get_dog_status(time, A, B) == 'aggressive' and get_dog_status(time, C, D) == 'aggressive':\n            return 'both'\n        elif get_dog_status(time, A, B) == 'aggressive' or get_dog_status(time, C, D) == 'aggressive':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n\n    def get_dog_status(time, aggressive, calm): # \uac01 \uac1c\uc758 \uc0c1\ud0dc\ub97c \ubc18\ud658\ud558\ub294 \ud568\uc218\n        if time == 0:\n            return 'aggressive'\n        time -= 1\n        if time < aggressive:\n            return 'aggressive'\n        time -= aggressive\n        if time < calm:\n            return 'calm'\n        time -= calm\n        return get_dog_status(time, aggressive, calm)\n\n    def get_dog_attack(time): # \uac01 \uc2dc\uac04\ub9c8\ub2e4 \uac1c\uac00 \uacf5\uaca9\ud558\ub294\uc9c0 \uc548\ud558\ub294\uc9c0\ub97c \ubc18\ud658\ud558\ub294 \ud568\uc218\n        if get_dog_status(time, A, B) == 'aggressive' and get_dog_status(time, C, D) == 'aggressive':\n            return 'both'\n        elif get_dog_status(time, A, B) == 'aggressive' or get_dog_status(time, C, D) == 'aggressive':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    agg, calm, agg2, calm2 = [int(n) for n in sys.stdin.readline().split()] # get input\n    p, m, g = [int(n) for n in sys.stdin.readline().split()] # get input\n    if (p - 1) % (agg + calm) < agg and (p - 1) % (agg2 + calm2) < agg2: # if p is aggressive in both\n        print(\"both\") # print both\n    elif (p - 1) % (agg + calm) < agg or (p - 1) % (agg2 + calm2) < agg2: # if p is aggressive in one\n        print(\"one\") # print one\n    else: # if p is aggressive in none\n        print(\"none\") # print none\n    if (m - 1) % (agg + calm) < agg and (m - 1) % (agg2 + calm2) < agg2: # if m is aggressive in both\n        print(\"both\") # print both\n    elif (m - 1) % (agg + calm) < agg or (m - 1) % (agg2 + calm2) < agg2: # if m is aggressive in one\n        print(\"one\") # print one\n    else: # if m is aggressive in none\n        print(\"none\") # print none\n    if (g - 1) % (agg + calm) < agg and (g - 1) % (agg2 + calm2) < agg2: # if g is aggressive in both\n        print(\"both\") # print both\n    elif (g - 1) % (agg + calm) < agg or (g - 1) % (agg2 + calm2) < agg2: # if g is aggressive in one\n        print(\"one\") # print one\n    else: # if g is aggressive in none\n        print(\"none\") # print none\n\nmain() # call main\n", "\n\ndef main():\n    \"\"\"\n    Read the input and output the expected result.\n    \"\"\"\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    #print(a, b, c, d, p, m, g)\n\n    # Aggressive dog A\n    aggressive_dog_a_start = 0\n    aggressive_dog_a_end = a\n    # Aggressive dog B\n    aggressive_dog_b_start = c\n    aggressive_dog_b_end = c + d\n    #print(aggressive_dog_a_start, aggressive_dog_a_end, aggressive_dog_b_start, aggressive_dog_b_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_a_start and p <= aggressive_dog_a_end) \\\n    and (p >= aggressive_dog_b_start and p <= aggressive_dog_b_end):\n        print(\"both\")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_a_start and p <= aggressive_dog_a_end) \\\n    or (p >= aggressive_dog_b_start and p <= aggressive_dog_b_end):\n        print(\"one\")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_a_start and m <= aggressive_dog_a_end) \\\n    and (m >= aggressive_dog_b_start and m <= aggressive_dog_b_end):\n        print(\"both\")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_a_start and m <= aggressive_dog_a_end) \\\n    or (m >= aggressive_dog_b_start and m <= aggressive_dog_b_end):\n        print(\"one\")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_a_start and g <= aggressive_dog_a_end) \\\n    and (g >= aggressive_dog_b_start and g <= aggressive_dog_b_end):\n        print(\"both\")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_a_start and g <= aggressive_dog_a_end) \\\n    or (g >= aggressive_dog_b_start and g <= aggressive_dog_b_end):\n        print(\"one\")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    if A + C > B + D:\n        A, B, C, D = B, A, D, C\n    a = P % (A + B)\n    b = M % (A + B)\n    c = G % (A + B)\n    if a <= A and b <= A and c <= A:\n        print('both', 'both', 'both')\n    elif a > A and b > A and c > A:\n        print('one', 'one', 'one')\n    elif a <= A and b <= A and c > A:\n        print('both', 'both', 'one')\n    elif a <= A and b > A and c <= A:\n        print('both', 'one', 'both')\n    elif a > A and b <= A and c <= A:\n        print('one', 'both', 'both')\n    elif a <= A and b > A and c > A:\n        print('both', 'one', 'one')\n    elif a > A and b <= A and c > A:\n        print('one', 'both', 'one')\n    elif a > A and b > A and c <= A:\n        print('one', 'one', 'both')\n    \nmain()\n", "\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    aggressiveA = A - 1\n    aggressiveC = C - 1\n    for i in [P, M, G]:\n        if i <= aggressiveA:\n            print(\"both\")\n        elif i <= aggressiveA + B:\n            print(\"one\")\n        elif i <= aggressiveA + B + aggressiveC:\n            print(\"both\")\n        elif i <= aggressiveA + B + aggressiveC + D:\n            print(\"one\")\n        else:\n            print(\"none\")\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    p, m, g = map(int, input().split())\n\n    for i in [p, m, g]:\n        if i > a and (i - a) % (b + a) < a:\n            print('both')\n        elif i > a:\n            print('one')\n        elif i <= a:\n            print('both')\n\n        if i > c and (i - c) % (c + d) < c:\n            print('one')\n        elif i > c:\n            print('none')\n        elif i <= c:\n            print('both')\n\n\nif __name__ == '__main__':\n    main()\n", "\nA, B, C, D = map(int, input().split())\nP, M, G = map(int, input().split())\n\ndef get_dog_status(A, B, C, D, t):\n    t = (t) % (A + B + C + D)\n    if t < A:\n        return \"A\"\n    elif t < A + B:\n        return \"B\"\n    elif t < A + B + C:\n        return \"C\"\n    else:\n        return \"D\"\n\ndef get_dog_status_at_time(A, B, C, D, t):\n    if get_dog_status(A, B, C, D, t) == \"A\" or get_dog_status(A, B, C, D, t) == \"C\":\n        return \"aggressive\"\n    else:\n        return \"calm\"\n\ndef get_num_dogs_attacking(A, B, C, D, P):\n    dog1 = get_dog_status_at_time(A, B, C, D, P)\n    dog2 = get_dog_status_at_time(A, B, C, D, P + 2)\n    if dog1 == \"aggressive\" and dog2 == \"aggressive\":\n        return \"both\"\n    elif dog1 == \"aggressive\" or dog2 == \"aggressive\":\n        return \"one\"\n    else:\n        return \"none\"\n\nprint(get_num_dogs_attacking(A, B, C, D, P))\nprint(get_num_dogs_attacking(A, B, C, D, M))\nprint(get_num_dogs_attacking(A, B, C, D, G))\n", "\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n\n    def get_dog_status(time, aggressive, calm): # \uac15\uc544\uc9c0\uc758 \uc0c1\ud0dc\ub97c \ubc18\ud658\ud558\ub294 \ud568\uc218\n        if time == 0:\n            return 'aggressive'\n        time -= 1\n        if time < aggressive:\n            return 'aggressive'\n        time -= aggressive\n        if time < calm:\n            return 'calm'\n        time -= calm\n        return get_dog_status(time, aggressive, calm)\n\n    def get_dog_attack(time): # \uac15\uc544\uc9c0\uac00 \uacf5\uaca9\ud558\ub294\uc9c0 \uc548\ud558\ub294\uc9c0\ub97c \ubc18\ud658\ud558\ub294 \ud568\uc218\n        if get_dog_status(time, A, B) == 'aggressive' and get_dog_status(time, C, D) == 'aggressive':\n            return 'both'\n        elif get_dog_status(time, A, B) == 'aggressive' or get_dog_status(time, C, D) == 'aggressive':\n            return 'one'\n        else:\n            return 'none'\n\n    print(get_dog_attack(P))\n    print(get_dog_attack(M))\n    print(get_dog_attack(G))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    aggressive_A = A * 2\n    aggressive_C = C * 2\n    for i in [P, M, G]:\n        if i <= aggressive_A:\n            print(\"both\")\n        elif i <= aggressive_A + B:\n            print(\"one\")\n        elif i <= aggressive_A + B + aggressive_C:\n            print(\"both\")\n        elif i <= aggressive_A + B + aggressive_C + D:\n            print(\"one\")\n        else:\n            print(\"none\")\n\nmain()\n", "\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    aggressiveA = A + B\n    aggressiveC = C + D\n    for i in [P, M, G]:\n        if i <= aggressiveA:\n            print(\"both\")\n        elif i <= aggressiveA:\n            print(\"one\")\n        elif i <= aggressiveA + aggressiveC:\n            print(\"both\")\n        elif i <= aggressiveA + aggressiveC:\n            print(\"one\")\n        else:\n            print(\"none\")\n\nmain()\n", "\nimport sys\nimport math\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    if A + C <= B + D:\n        a = P % (A + B)\n        b = M % (A + B)\n        c = G % (A + B)\n        if a <= A:\n            print('both')\n        elif a > A:\n            print('one')\n        if b <= A:\n            print('both')\n        elif b > A:\n            print('one')\n        if c <= A:\n            print('both')\n        elif c > A:\n            print('one')\n    else:\n        A, B, C, D = C, D, A, B\n        a = P % (A + B)\n        b = M % (A + B)\n        c = G % (A + B)\n        if a <= A:\n            print('both')\n        elif a > A:\n            print('one')\n        if b <= A:\n            print('both')\n        elif b > A:\n            print('one')\n        if c <= A:\n            print('both')\n        elif c > A:\n            print('one')\n    \nmain()\n", "\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    for i in [p, m, g]:\n        if i > a and (i - a) % (b + a) < a:\n            print('both')\n        else:\n            print('one')\n        if i > c and (i - c) % (c + d) < c:\n            print('both')\n        else:\n            print('one')\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nA, B, C, D = map(int, input().split()) # A, B, C, D are the lengths of the aggressive and calm periods of the dogs\nP, M, G = map(int, input().split()) # P, M, G are the times at which the dogs are observed\n\ndef get_dog_status(A, B, C, D, t): # returns the letter of the dog that is aggressive at time t\n    t = (t - 1) % (A + B + C + D)\n    if t < A:\n        return \"A\"\n    elif t < A + B:\n        return \"B\"\n    elif t < A + B + C:\n        return \"C\"\n    else:\n        return \"D\"\n\ndef get_dog_status_at_time(A, B, C, D, t): # returns the status of the dog at time t\n    if get_dog_status(A, B, C, D, t) == \"A\" or get_dog_status(A, B, C, D, t) == \"C\":\n        return \"aggressive\"\n    else:\n        return \"calm\"\n\ndef get_num_dogs_attacking(A, B, C, D, P): # returns the number of dogs attacking at time P\n    dog1 = get_dog_status_at_time(A, B, C, D, P)\n    dog2 = get_dog_status_at_time(A, B, C, D, P + 1)\n    if dog1 == \"aggressive\" and dog2 == \"aggressive\":\n        return \"both\"\n    elif dog1 == \"aggressive\" or dog2 == \"aggressive\":\n        return \"one\"\n    else:\n        return \"none\"\n\nprint(get_num_dogs_attacking(A, B, C, D, P))\nprint(get_num_dogs_attacking(A, B, C, D, M))\nprint(get_num_dogs_attacking(A, B, C, D, G))\n", "\n\nimport sys\n\ndef main():\n    a, b, c, d = [int(x) for x in sys.stdin.readline().split()]\n    p, m, g = [int(x) for x in sys.stdin.readline().split()]\n    for time in [p, m, g]:\n        dogs = 0\n        if (time - 1) % (a + b) < a:\n            dogs += 1\n        if (time - 1) % (c + d) < c:\n            dogs += 1\n        if dogs == 2:\n            print(\"both\")\n        elif dogs == 1:\n            print(\"one\")\n        else:\n            print(\"none\")\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    agg, calm, agg2, calm2 = [int(n) for n in sys.stdin.readline().split()]\n    p, m, g = [int(n) for n in sys.stdin.readline().split()]\n    if (p - 1) % (agg + calm) < agg and (p - 1) % (agg2 + calm2) < agg2:\n        print(\"both\")\n    elif (p - 1) % (agg + calm) < agg or (p - 1) % (agg2 + calm2) < agg2:\n        print(\"one\")\n    else:\n        print(\"none\")\n    if (m - 1) % (agg + calm) < agg and (m - 1) % (agg2 + calm2) < agg2:\n        print(\"both\")\n    elif (m - 1) % (agg + calm) < agg or (m - 1) % (agg2 + calm2) < agg2:\n        print(\"one\")\n    else:\n        print(\"none\")\n    if (g - 1) % (agg + calm) < agg and (g - 1) % (agg2 + calm2) < agg2:\n        print(\"both\")\n    elif (g - 1) % (agg + calm) < agg or (g - 1) % (agg2 + calm2) < agg2:\n        print(\"one\")\n    else:\n        print(\"none\")\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    for i in [p, m, g]:\n        if i > a:\n            if (i - a) % (b + a) < b:\n                print('both')\n            else:\n                print('one')\n        else:\n            print('both')\n\n        if i > c:\n            if (i - c) % (c + d) < d:\n                print('one')\n            else:\n                print('none')\n        else:\n            print('both')\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    A, B, C, D = map(int, sys.stdin.readline().split())\n    P, M, G = map(int, sys.stdin.readline().split())\n    aggressive_A = A\n    aggressive_C = C\n    for i in [P, M, G]:\n        if i <= aggressive_A:\n            print(\"both\")\n        elif i <= aggressive_A + B:\n            print(\"one\")\n        elif i <= aggressive_A + B + aggressive_C:\n            print(\"both\")\n        elif i <= aggressive_A + B + aggressive_C + D:\n            print(\"one\")\n        else:\n            print(\"none\")\n\nmain()\n", "\n\ndef main():\n    \"\"\"\n    Read the input and output the expected result.\n    \"\"\"\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    #print(a, b, c, d, p, m, g)\n\n    # Aggressive dog A\n    aggressive_dog_a_start = 0\n    aggressive_dog_a_end = a\n    # Aggressive dog B\n    aggressive_dog_b_start = c\n    aggressive_dog_b_end = c + d\n    #print(aggressive_dog_a_start, aggressive_dog_a_end, aggressive_dog_b_start, aggressive_dog_b_end)\n\n    # Check if the postman is attacked by both dogs\n    if (p >= aggressive_dog_a_start and p <= aggressive_dog_a_end) \\\n            and (p >= aggressive_dog_b_start and p <= aggressive_dog_b_end):\n        print(\"both\")\n    # Check if the postman is attacked by one dog\n    elif (p >= aggressive_dog_a_start and p <= aggressive_dog_a_end) \\\n            or (p >= aggressive_dog_b_start and p <= aggressive_dog_b_end):\n        print(\"one\")\n    # Check if the postman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the milkman is attacked by both dogs\n    if (m >= aggressive_dog_a_start and m <= aggressive_dog_a_end) \\\n            and (m >= aggressive_dog_b_start and m <= aggressive_dog_b_end):\n        print(\"both\")\n    # Check if the milkman is attacked by one dog\n    elif (m >= aggressive_dog_a_start and m <= aggressive_dog_a_end) \\\n            or (m >= aggressive_dog_b_start and m <= aggressive_dog_b_end):\n        print(\"one\")\n    # Check if the milkman is attacked by none of the dogs\n    else:\n        print(\"none\")\n\n    # Check if the garbage man is attacked by both dogs\n    if (g >= aggressive_dog_a_start and g <= aggressive_dog_a_end) \\\n            and (g >= aggressive_dog_b_start and g <= aggressive_dog_b_end):\n        print(\"both\")\n    # Check if the garbage man is attacked by one dog\n    elif (g >= aggressive_dog_a_start and g <= aggressive_dog_a_end) \\\n            or (g >= aggressive_dog_b_start and g <= aggressive_dog_b_end):\n        print(\"one\")\n    # Check if the garbage man is attacked by none of the dogs\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Read the input and output the expected result.\n    \"\"\"\n    a, b, c, d = [int(i) for i in input().split()]\n    p, m, g = [int(i) for i in input().split()]\n    #print(a, b, c, d, p, m, g)\n\n    # Aggressive dog 1\n    aggressive_dog_1_start = 0\n    aggressive_dog_1_end = a\n    # Aggressive dog 2\n    aggressive_dog_2_start = c\n    aggressive_dog_2_end = c + d\n    #print(aggressive_dog_1_start, aggressive_dog_1_end, aggressive_dog_2_start, aggressive_dog_2_end)\n\n    # Check if the postman is attacked by both dogs.\n    if (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) and (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the postman is attacked by one dog.\n    elif (p >= aggressive_dog_1_start and p <= aggressive_dog_1_end) or (p >= aggressive_dog_2_start and p <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the postman is attacked by none of the dogs.\n    else:\n        print(\"none\")\n\n    # Check if the milkman is attacked by both dogs.\n    if (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) and (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the milkman is attacked by one dog.\n    elif (m >= aggressive_dog_1_start and m <= aggressive_dog_1_end) or (m >= aggressive_dog_2_start and m <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the milkman is attacked by none of the dogs.\n    else:\n        print(\"none\")\n\n    # Check if the garbage man is attacked by both dogs.\n    if (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) and (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print(\"both\")\n    # Check if the garbage man is attacked by one dog.\n    elif (g >= aggressive_dog_1_start and g <= aggressive_dog_1_end) or (g >= aggressive_dog_2_start and g <= aggressive_dog_2_end):\n        print(\"one\")\n    # Check if the garbage man is attacked by none of the dogs.\n    else:\n        print(\"none\")\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    a, b, c, d = [int(x) for x in sys.stdin.readline().split()]\n    p, m, g = [int(x) for x in sys.stdin.readline().split()]\n    for time in [p, m, g]:\n        dogs = 0\n        if (time - 1) % (a + b) < a and time % (a + b) != 0:\n            dogs += 1\n        if (time - 1) % (c + d) < c and time % (c + d) != 0:\n            dogs += 1\n        if dogs == 2:\n            print(\"both\")\n        elif dogs == 1:\n            print(\"one\")\n        else:\n            print(\"none\")\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    a, b, c, d = [int(x) for x in sys.stdin.readline().split()]\n    p, m, g = [int(x) for x in sys.stdin.readline().split()]\n    for time in [p, m, g]:\n        dogs = 0\n        if (time - 1) % (a + b) < a and (time - 1) % (c + d) < c:\n            print(\"both\")\n        elif (time - 1) % (a + b) < a or (time - 1) % (c + d) < c:\n            print(\"one\")\n        else:\n            print(\"none\")\n        \"\"\"if (time - 1) % (a + b) < a:\n            dogs += 1\n        if (time - 1) % (c + d) < c:\n            dogs += 1\n        if dogs == 2:\n            print(\"both\")\n        elif dogs == 1:\n            print(\"one\")\n        else:\n            print(\"none\")\"\"\"\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    a, b, c, d = map(int, sys.stdin.readline().split())\n    p, m, g = map(int, sys.stdin.readline().split())\n\n    for i in [p, m, g]:\n        if i > a and (i - a) % (b + a) < a:\n            print('both')\n        elif i > c and (i - c) % (c + d) < c:\n            print('both')\n\n\nif __name__ == '__main__':\n    main()\n"]