["\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    code = input()\n    nop_count = 0\n    for index in range(len(code)):\n        if code[index].isupper():\n            if index % 4 != 0:  # no of nops\n                nop_count += 4 - (index % 4)  # no of nops\n    print(nop_count)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef get_instructions(code):\n    instructions = []\n    for index, char in enumerate(code):\n        if char.isupper():\n            instructions.append((char, index))\n    return instructions\n\ndef get_parameters(code):\n    parameters = []\n    for index, char in enumerate(code):\n        if char.islower():\n            parameters.append((char, index))\n    return parameters\n\ndef get_nop_count(instructions):\n    nop_count = 0\n    for inst in instructions:\n        if inst[1] % 4 != 0:\n            nop_count += 4 - inst[1] % 4\n    return nop_count\n\ncode = input()\ninstructions = get_instructions(code)\nparameters = get_parameters(code)\nnop_count = get_nop_count(instructions)\nprint(nop_count)\n", "\n\ndef nop(inp, k):\n    n = len(inp)\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1] + 1\n        if inp[i - 1].isupper():\n            if i % k != 0:\n                dp[i] = min(dp[i], dp[i - 1] + (k - i % k) + 1)\n    return dp[n]\n\ndef main():\n    inp = list(input())\n    k = int(input())\n    print(nop(inp, k))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    for i in range(n):\n        print(i)\n        print(input())\n        print()\n    return\n\n    #s = input()\n    #print(s)\n    #return\n\n    s = input()\n    n = 0\n    for i in range(len(s)):\n        if (i % 4 == 0) and (s[i].isupper()):\n            pass\n        else:\n            n += 1\n    print(n)\n    return\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n = int(input())\n    for i in range(n):\n        print(i)\n        print(input())\n        print(\"\")\n    return\n\n    s = input()\n    print(s)\n    return\n\n    s = input()\n    n = 0\n    for i in range(len(s)):\n        if (i % 4 == 0) and (s[i].isupper()):\n            pass\n        else:\n            n += 1\n    print(n)\n    return\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nfrom sys import stdin\n\ndef main():\n    code = stdin.readline().strip()\n    n = len(code)\n    dp = [0] * (n + 4)\n    dp[0] = dp[1] = dp[2] = dp[3] = 0\n    for i in range(4, n + 1):\n        dp[i] = min(dp[i - 1], dp[i - 2], dp[i - 3], dp[i - 4]) + (1 if code[i - 1].isupper() else 0)\n    print(dp[n])\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    input = sys.stdin.readline().strip()\n    instructions = list(input)\n    parameters = []\n    for i in range(len(instructions)):\n        if instructions[i].isupper():\n            parameters.append(instructions[i+1:i+1+math.ceil(ord(instructions[i])/4.0)].count('a'))\n    print(math.ceil(max(parameters)/4.0))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    code = input()  # Code to be checked\n    nop_count = 0  # Number of NOPs\n    for index in range(len(code)):  # Iterate over the code\n        if code[index].isupper():  # Check if the current character is an uppercase letter\n            if index % 4 != 0:  # Check if the current character is not at the beginning of a line\n                nop_count += 4 - (index % 4)  # Add the number of NOPs needed to make the current character at the beginning of a line\n    print(nop_count)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    code = input()  # Input code\n    nop_count = 0  # Number of NOPs\n    for index in range(len(code)):\n        if code[index].isupper():\n            if index % 4 != 0:\n                nop_count += 4 - (index % 4)\n    print(nop_count)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef get_instructions(code):\n    instructions = []\n    instruction_count = 0\n    for index, char in enumerate(code):\n        if char.isupper():\n            instructions.append((char, index))\n            instruction_count += 1\n    return instructions, instruction_count\n\n\ndef get_parameters(code):\n    parameters = []\n    for index, char in enumerate(code):\n        if char.islower():\n            parameters.append((char, index))\n    return parameters\n\n\ndef get_nop_count(instructions):\n    nop_count = 0\n    for inst in instructions:\n        if inst[1] % 4 != 0:\n            nop_count += 4 - inst[1] % 4\n    return nop_count\n\n\ncode = input()\ninstructions, instruction_count = get_instructions(code)\nparameters = get_parameters(code)\nnop_count = get_nop_count(instructions)\nprint(nop_count)\n", "import sys\n\ndef main():\n    program = sys.stdin.read().strip()\n    nop_needed = 0\n    while len(program) > 0:\n        if len(program) % 4 == 0:\n            program = program[4:]\n        else:\n            program = program[1:]\n            nop_needed += 1\n    print(nop_needed)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef nop(inp, nop):\n    n = len(inp)\n    dp = [0] * (n + 1) + [nop + 1]\n    for i in range(1, n + 1):\n        dp[i] = min(dp[i], dp[i - 1] + 1)\n        if inp[i - 1].isupper():\n            if i % 4 != 0:\n                dp[i] = min(dp[i], dp[i - 1] + (4 - i % 4) + 1)\n    return dp[n]\n\ndef main():\n    inp = list(input())\n    print(nop(inp, len(inp) - 1))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef nop(inp, n):\n    n = len(inp)\n    dp = [0] * (n + 1) + [n]\n    for i in range(1, n + 1):\n        dp[i] = min(dp[i], dp[i - 1])\n        if inp[i - 1].isupper():\n            if i % 4 != 0:\n                dp[i] = min(dp[i], dp[i - 1] + (4 - i % 4))\n    return dp[n]\n\ndef main():\n    inp = list(input())\n    print(nop(inp, len(inp)))\n\nif __name__ == '__main__':\n    main()\n", "from sys import stdin\n\ndef main():\n    code = stdin.readline().strip()\n    n = len(code)\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 0\n    dp[2] = 0\n    dp[3] = 0\n    for i in range(4, n + 1):\n        dp[i] = min(dp[i - 1], dp[i - 2], dp[i - 3], dp[i - 4]) + (1 if code[i - 1] == '1' else 0)\n    print(dp[n])\n\nif __name__ == '__main__':\n    main()\n", "\n\n\ndef main():\n    n = int(input())\n    for i in range(n):\n        print(i)\n        print(input())\n        print(\"\")\n    return\n\n    # s = input()\n    # print(s)\n    # return\n\n    s = input()\n    n = 0\n    for i in range(len(s)):\n        if (i % 4 == 0) and (s[i].isupper()):\n            pass\n        else:\n            n += 1\n    print(n)\n    return\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    program = input()\n    num_nop = 0\n    for i in range(len(program)):\n        if i % 4 == 0 and program[i].isupper():\n            pass\n        elif i % 4 == 0 and program[i].islower():\n            num_nop += 1\n        elif i % 4 == 1 and program[i].isupper():\n            num_nop += 1\n        elif i % 4 == 1 and program[i].islower():\n            pass\n        elif i % 4 == 2 and program[i].isupper():\n            num_nop += 2\n        elif i % 4 == 2 and program[i].islower():\n            pass\n        elif i % 4 == 3 and program[i].isupper():\n            num_nop += 3\n        elif i % 4 == 3 and program[i].islower():\n            pass\n    print(num_nop)\n\nmain()\n", "\nimport sys\n\ndef main():\n    program = sys.stdin.read().strip()\n    nop_needed = 0 \n    while len(program) > 0:\n        if len(program) % 4 == 0:\n            program = program[4:]\n        else:\n            program = program[1:]\n            nop_needed += 1\n    print(nop_needed)\n\nmain()\n", "\n\ndef main():\n    program = input()\n    num_nop = 0  # number of NOP\n    for i in range(len(program)):\n        if i % 4 == 0 and program[i].isupper(): # if the first character is uppercase\n            pass\n        elif i % 4 == 0 and program[i].islower(): # if the first character is lowercase\n            num_nop += 1\n        elif i % 4 == 1 and program[i].isupper(): # if the second character is uppercase\n            num_nop += 1\n        elif i % 4 == 1 and program[i].islower():\n            pass\n        elif i % 4 == 2 and program[i].isupper():\n            num_nop += 2\n        elif i % 4 == 2 and program[i].islower():\n            pass\n        elif i % 4 == 3 and program[i].isupper():\n            num_nop += 3\n        elif i % 4 == 3 and program[i].islower():\n            pass\n    print(num_nop)\n\nmain()\n", "\n\nfrom sys import stdin\n\ndef main():\n    code = stdin.readline().strip()\n    n = len(code)\n    dp = [0] * (n + 1)\n    dp[0] = dp[1] = dp[2] = dp[3] = 0\n    for i in range(4, n + 1):\n        dp[i] = min(dp[i - 1], dp[i - 2], dp[i - 3], dp[i - 4]) + (1 if code[i - 1].isupper() else 0)\n    print(dp[n])\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\n\ndef main():\n    code = stdin.readline().strip()\n    n = len(code)\n    dp = [0] * (n + 4)\n    dp[0] = dp[1] = dp[2] = dp[3] = 0;\n    for i in range(4, n + 1):\n        dp[i] = min(dp[i - 1], dp[i - 2], dp[i - 3], dp[i - 4]) + (1 if code[i - 1].isupper() else 0);\n    print(dp[n])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef get_instructions(code, instruction_count):\n    instructions = []\n    for index, char in enumerate(code):\n        if char.isupper():\n            instructions.append((char, index))\n    return instructions\n\ndef get_parameters(code, instruction_count):\n    parameters = []\n    for index, char in enumerate(code[:instruction_count]):\n        if char.islower():\n            parameters.append((char, index))\n    return parameters\n\ndef get_nop_count(instructions, instruction_count):\n    nop_count = 0 \n    for inst in instructions[:instruction_count]:\n        if inst[1] % 4 != 0:\n            nop_count += 4 - inst[1] % 4\n    return nop_count\n\ncode = input()\ninstruction_count = int(input())\ninstructions = get_instructions(code, instruction_count)\nparameters = get_parameters(code, instruction_count)\nnop_count = get_nop_count(instructions, instruction_count)\nprint(nop_count)\n", "\n\nimport sys\nimport math\n\ndef main():\n    input = sys.stdin.readline().strip()\n    instructions = list(input)\n    parameters = []\n    for i in range(len(instructions)):\n        if instructions[i].isupper():\n            parameters.append(instructions[i+1:i+1+math.ceil(ord(instructions[i])/4)].count('A'))\n    print(math.ceil(max(parameters)/4.0))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    code = input()\n    nop_count = 0  # no of nops \n    for index in range(len(code)):\n        if code[index].isupper():\n            if index % 4 != 0:\n                nop_count += 4 - (index % 4)\n    print(nop_count)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef get_instructions(code):\n    instructions = []\n    instruction_count = 0\n    for index, char in enumerate(code):\n        if char.isupper():\n            instructions.append((char, index))\n            instruction_count += 1\n    return instructions, instruction_count\n\ndef get_parameters(code):\n    parameters = []\n    for index, char in enumerate(code):\n        if char.islower():\n            parameters.append((char, index))\n    return parameters\n\ndef get_nop_count(instructions):\n    nop_count = 0\n    for instruction in instructions:\n        if instruction[1] % 4 != 0:\n            nop_count += 4 - instruction[1] % 4\n    return nop_count\n\ncode = input()\ninstructions, instruction_count = get_instructions(code)\nparameters = get_parameters(code)\nnop_count = get_nop_count(instructions)\nprint(nop_count)\n", "import sys\n\ndef main():\n\tprogram = sys.stdin.read().strip()\n\tnop_needed = 0\n\twhile len(program) > 0:\n\t\tif len(program) % 4 == 0:\n\t\t\tprogram = program[4:]\n\t\telse:\n\t\t\tprogram = program[1:]\n\t\t\tnop_needed += 1\n\tprint(nop_needed)\n\nmain()\n", "\n\ndef main():\n    program = input()\n    num_nop = 0 # number of NOP\n    for i in range(len(program)):\n        if i % 4 == 0 and program[i].isupper(): # if the first character is uppercase\n            pass\n        elif i % 4 == 0 and program[i].islower(): # if the first character is lowercase\n            num_nop += 1\n        elif i % 4 == 1 and program[i].isupper(): # if the second character is uppercase\n            num_nop += 1\n        elif i % 4 == 1 and program[i].islower(): # if the second character is lowercase\n            pass\n        elif i % 4 == 2 and program[i].isupper(): # if the third character is uppercase\n            num_nop += 2\n        elif i % 4 == 2 and program[i].islower(): # if the third character is lowercase\n            pass\n        elif i % 4 == 3 and program[i].isupper(): # if the fourth character is uppercase\n            num_nop += 3\n        elif i % 4 == 3 and program[i].islower():\n            pass\n    print(num_nop)\n\nmain()\n"]