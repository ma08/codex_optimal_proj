["import bisect\n\nn,k=list(map(int,input().split()))\nA=list(map(int,input().split()))\nA.sort()\n\nDP=[[0]*(k+1) for i in range(n)]\n\nfor i in range(n):\n    x=bisect.bisect_right(A,A[i]+5)-1\n    #print(i,x)\n    for j in range(k-1,-1,-1):\n        DP[i][j]=max(DP[i][j],DP[i-1][j])        \n        DP[x][j+1]=max(DP[i-1][j]+x-i+1,DP[x][j+1])\n\nprint(max([DP[i][-1] for i in range(n)]))\n", "dp=[]\nfor i in range(5005):\n    dp.append([0]*5005)    \n\nn,k=map(int,input().split())\na=list(map(int,input().split()))\na.sort()\np=[0]*(n+1)\nfor i in range(n):\n    z=a[i]-5\n    for j in range(i+1):\n        if a[j]>=z:\n            p[i]=j\n            break\nans=-1            \nfor i in range(1,n+1):\n    for j in range(k+1):\n        dp[i][j]=max(dp[i-1][j],dp[p[i-1]][j-1]+(i-p[i-1]))\n        if j!=k:\n            ans=max(ans,dp[i][j])            \nprint(ans)            ", "#!/usr/bin/env python2\n\n\ndef main():\n    n, k = list(map(int, input().split()))\n    a = sorted(int(i) for i in input().split())\n\n    upper_bound = [0] * n\n\n    i, j = 0, 0\n    while j < n:\n        if a[i] + 5 >= a[j]:\n            j += 1\n        else:\n            i += 1\n        upper_bound[i] = j\n\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(n - 1, -1, -1):\n        for j in range(1, k + 1):\n            x = upper_bound[i]\n            dp[i][j] = max(1 + dp[i + 1][j - 1], dp[i + 1][j], x - i + dp[x][j - 1])\n\n    print(dp[0][k])\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n, k = list(map(int, input().split()))\na = sorted(int(i) for i in input().split())\n\nu = [0] * n\n\ni, j = 0, 0\nwhile j < n:\n    if a[i] + 5 >= a[j]:\n        j += 1\n    else:\n        i += 1\n    u[i] = j\n\ndp = [[0] * (k + 1) for i in range(n + 1)]\nfor i in range(n - 1, -1, -1):\n    for j in range(1, k + 1):\n        x = u[i]\n        dp[i][j] = max(1 + dp[i + 1][j - 1], dp[i + 1][j], x - i + dp[x][j - 1])\n\nprint(dp[0][k])\n", "n, K = map(int, input().split())\narr = sorted(map(int, input().split()))\nfreq = {}\nfor x in arr:\n    freq[x] = freq.get(x, 0)+1\narr = sorted(freq.keys())\nfreq = [freq[x] for x in arr]\nn = len(arr)\n\ndp = [[0 for _ in range(n+1)] for _ in range(2)]\nfor k in range(1, K+1):\n    for i in range(n-1, -1, -1):\n        j = i\n        curr = 0\n        curr_ans = dp[k&1][i+1]\n        while j < n and abs(arr[i]-arr[j]) <= 5:\n            curr += freq[j]\n            curr_ans = max(curr_ans, curr+dp[1-(k&1)][j+1])\n            j += 1\n        dp[k&1][i] = curr_ans\nprint(dp[K&1][0])", "n, k = list(map(int, input().split()))\n\na = list(map(int, input().split()))\n\na.sort()\n\ndp = [[0 for j in range(k + 1)] for i in range(n + 1)]\n\nl = [0 for i in range(n + 1)]\n\ni, li = n - 1, n - 1\nwhile i >= 0:\n\twhile li >= 0 and a[i] - 5 <= a[li]:\n\t\tli -= 1\n\tl[i + 1] = li + 1\n\ti -= 1\n\ndp[1][1] = 1\n\nfor i in range(2, n + 1):\n\tfor j in range(1, k + 1):\n\t\tdp[i][j] = max(dp[i - 1][j], dp[l[i]][j - 1] + i - l[i])\n\nprint(max(dp[n][j] for j in range(1, k + 1)))\n", "n,k=list(map(int,input().split()))\na=list(map(int,input().split()))\na.sort()\nl=r=0\nb=[0]*n\nfor _ in range(n):\n    while l<r and a[r]-a[l]>5:\n        l+=1\n    b[r]=l\n    r+=1\ndp=[[0 for _ in range(k+1)] for _ in range(n)]\nfor i in range(1,k+1):\n    dp[0][i]=1\nfor i in range(1,n):\n    for j in range(1,k+1):\n        dp[i][j]=max(dp[i-1][j],(dp[b[i]-1][j-1] if b[i]>=1 else 0)+(i-b[i]+1))\nprint(dp[-1][-1])\n", "# -*- coding: utf-8 -*-\n# @Time    : 2019/3/8 0:18\n# @Author  : LunaFire\n# @Email   : gilgemesh2012@gmail.com\n# @File    : E. K Balanced Teams.py\n\n\ndef main():\n    n, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    a.sort()\n\n    cnt = [0] * n\n    for i in range(n):\n        while i + cnt[i] < n and a[i + cnt[i]] - a[i] <= 5:\n            cnt[i] += 1\n\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(n):\n        for j in range(k + 1):\n            dp[i + 1][j] = max(dp[i + 1][j], dp[i][j])\n            if j + 1 <= k:\n                dp[i + cnt[i]][j + 1] = max(dp[i + cnt[i]][j + 1], dp[i][j] + cnt[i])\n\n    print(dp[n][k])\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n, k = map(int, input().split())\na = sorted(list(map(int, input().split())))\n\ni = 0\nj = 0\nans = 0\n\nstart = [0] * n\n\nfor _ in range(n):\n\twhile j < i and a[i] - a[j] > 5:\n\t\tj += 1\n\n\tstart[i] = j\n\ti += 1\n\ndp = [([0] * (k + 1)) for _ in range(n)]\n\nfor i in range(1, k+1):\n\tdp[0][i] = 1\n\nfor i in range(1, n):\n\tfor j in range(1, k+1):\n\t\tlastgroup = 0\n\t\tif start[i] >= 1:\n\t\t\tlastgroup = dp[start[i]-1][j-1]\n\t\t\n\t\tdp[i][j] = max(dp[i-1][j], lastgroup + (i - start[i]) + 1)\n\n\t\nprint(dp[-1][-1])", "n, k = map(int, input().split())\ndp = [[0 for j in range(k + 1)] for i in  range(n + 1)]\na = sorted([int(i) for i in input().split()])\ncnt = [0 for i in range(n)]\nfor i in range(n):\n\twhile i + cnt[i] < n and a[i + cnt[i]] - a[i] <= 5:\n\t\tcnt[i] += 1\n\n\nfor i in range(n):\n\tfor j in range(k + 1):\n\t\tdp[i + 1][j] = max(dp[i + 1][j], dp[i][j])\n\t\tif j + 1 <= k:\n\t\t\tdp[i + cnt[i]][j + 1] = max(dp[i + cnt[i]][j + 1], dp[i][j] + cnt[i])\n\nprint(dp[n][k])", "import io\nimport os\n#input = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline\nimport sys\n\n\ndef main():\n    n, k = list(map(int, input().split()))\n    a = sorted(list(map(int, input().split())))\n\n    maxFromI = [0] * n  # max students in the team starting from student i with skill a[i]\n    end = -1\n    for i in range(n):\n        while end+1 < n and a[end+1] <= a[i] + 5:\n            end += 1\n        maxFromI[i] = end - i + 1\n\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    for i in range(n):\n        for j in range(k+1):\n            dp[i+1][j] = max(dp[i+1][j], dp[i][j])  # skip the student\n            if j+1 <= k:\n                dp[i+maxFromI[i]][j+1] = max(dp[i+maxFromI[i]][j+1], dp[i][j] + maxFromI[i])\n\n    print(dp[n][k])\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import sys\nfrom collections import Counter\ndef i_ints():\n    return map(int, sys.stdin.readline().split())\n\nn, k = i_ints()\nc = Counter(i_ints())\nc2 = dict()\n\na = sorted(c)\nfor i in sorted(a):\n    c2[i] = sum(c[j] for j in range(i, i + 6))\n\n# a are all possible levels of students\n# c2[i] is maximal group size where lowest level is i\n    \nlen_a = len(a)\nnext_group = [-1] * len(a)\nfor i in range(len_a):\n    for j in range(i + 1, len_a):\n        if a[j] > a[i] + 5:\n            next_group[i] = j\n            break\n        \n# if a group starts with i-th element, \n# then the next possible group starts with next_group[i]-th element\n\nmaxes = [0] * n  # for a maximum of 0 groups\nfor ii in range(k):\n    old_maxes = maxes  \n    old_maxes.append(0)  # access where next_group[...] == -1\n    maxes = []\n    # max number of groups, try to find better maxes each round\n    for i, aa in enumerate(a):\n        maxes.append(c2[a[i]] + old_maxes[next_group[i]])\n    m = 0\n    for i in range(len(a)-1, -1, -1):\n        if maxes[i] > m:\n            m = maxes[i]\n        else:\n            maxes[i] = m\n        \nprint(max(maxes))", "from collections import defaultdict\n\ndef solve(n, k, nums):\n    nums.sort()\n\n    new_nums = [0]\n    for i in range(1, n):\n        x = min(nums[i] - nums[i-1], 6)\n        new_nums.append(new_nums[-1] + x)\n\n    cand_count = new_nums[-1] + 1\n    candidates = [0] * cand_count\n\n    for n in new_nums:\n        for i in range(n-5, n+1):\n            if 0 <= i < cand_count:\n                candidates[i] += 1\n\n    prev = [None] * cand_count\n    max_val = 0\n    for i in range(cand_count):\n        max_val = max(max_val, candidates[i])\n        prev[i] = max_val\n        \n    for ki in range(1, k):\n        new = [None] * cand_count\n        new[0:6] = prev[0:6]\n        for i in range(6, cand_count):\n            new[i] = max(new[i-1], prev[i-6]+candidates[i])\n        prev = new\n        \n    print(prev[-1])\n\n\ndef solve_from_stdin():\n    n, k = map(int, input().split())\n    nums = list(map(int, input().split()))\n    solve(n, k, nums)\n\ndef test():\n    n, k = 1000, 500\n    nums = list(range(n))\n    solve(n, k, nums)\n\nsolve_from_stdin()", "kk=lambda:map(int,input().split())\nll=lambda:list(kk())\nn,k= kk()\nls = sorted(ll())\nvs,ne = [0]*n,[-1]*n\nb = 0\nfor a in range(n):\n\twhile b < n and ls[b] - ls[a] < 6: b+=1\n\tvs[a],ne[a] = b-a, b\ncurr = [0]*(n+1)\n# print(vs)\nfor _ in range(k):\n\t# print(curr)\n\tprev = curr\n\tcurr = [0]*(n+1)\n\tfor i in range(n):\n\t\tcurr[i] = vs[i]+prev[ne[i]]\n\tm = 0\n\tfor i in range(n-1, -1, -1):\n\t\tif m > curr[i]: curr[i]=m\n\t\telse: m = curr[i]\nprint(m)", "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\na.sort()\n# print(a)\ndp = [[0 for i in range(k + 1)] for i in range(n + 1)]\ni, j = 1, 2\nprev_max = [0 for i in range(k + 1)]\nans = 0\nwhile i < n + 1:\n    while j < n + 1 and a[j - 1] - a[i - 1] <= 5:\n        j += 1\n    for c in range(k):\n        dp[j - 1][c + 1] = max(dp[j - 1][c + 1], prev_max[c] + (j - i))\n        ans = max(ans, dp[j - 1][c + 1])\n    for c in range(k):\n        prev_max[c] = max(prev_max[c], dp[i][c])\n    # print(i, j)\n    # print(prev_max)\n    i = i + 1\n# print(dp)\nprint(ans)\n", "n,k=[int(x) for x in input().split()]\na=[int(x) for x in input().split()]\na.sort()\nindex={}\nfor i in range(n):\n    index[a[i]]=i\ndp=[[1]*(k+1) for i in range(n+1)]\nfor i in range(n+1):\n    dp[i][0]=0\nfor i in range(k+1):\n    dp[0][i]=0\nfor i in range(1,n+1):\n    for item in range(5,-1,-1):\n            if a[i-1]+item in index:\n                counter=index[a[i-1]+item]-i+1\n                break\n    for j in range(k+1):\n        if i>0:\n            dp[i][j]=max(dp[i-1][j],dp[i][j])\n        \n        if j<k:\n            dp[i+counter][j+1]=max(dp[i+counter][j+1],dp[i-1][j]+counter+1)\nprint(dp[n][k])\n", "import heapq\narr = input()\nN,K = [int(x) for x in arr.split(' ')]\n \narr = input()\narr = [int(x) for x in arr.split(' ')]\n\narr.sort() \ndata = [[0]*N for _ in range(K)]\n\nleft = 0\nright = 0\n \nres = 0\nwhile left<N and right<N:\n    if arr[right]>arr[left]+5:\n        #res = max(res,right-left)\n        left += 1\n    else:\n        data[0][right] = max(data[0][right-1],right-left+1)\n        right += 1\n \n#res = max(res,right-left)\nfor i in range(K):\n    data[i][0] = 1\n\n#print(data)\n\nfor j in range(1,K):\n    left = 0\n    right = 0\n     \n    res = 0\n    while left<N and right<N:\n        if arr[right]>arr[left]+5:\n            left += 1\n        else:\n            #print(left,right)\n            if left >= 1 and right>=1:\n                data[j][right] = max(data[j][right-1],data[j][right],data[j-1][left-1] + right-left+1)\n            elif left==0 and right>=1:\n                data[j][right] = max(data[j][right-1],data[j][right],right-left+1)\n            right += 1\n\n#print(data)\n\nprint(data[K-1][N-1])", "n, k = list(map(int, input().split()))\narr = list(map(int, input().split()))\narr.sort()\ncnt = [0 for _ in range(n)]\nfor i in range(n):\n    while i+cnt[i] < n and arr[i+cnt[i]] - arr[i] <= 5:\n        cnt[i] += 1  # cnt[i] stores the maximum number of students belonging to a group(with <= 5 constraint)\n        # starting from student i\n\ndp = [[0 for _ in range(k+1)] for _ in range(n+1)]  # dp[i][j] is the maximum no. of students in at most j teams considering first i students\nfor i in range(n):\n    for j in range(k+1):\n        dp[i+1][j] = max(dp[i+1][j], dp[i][j])  # Do not take current student i\n        if j+1 <= k:\n            dp[i+cnt[i]][j+1] = max(dp[i+cnt[i]][j+1], dp[i][j] + cnt[i])\n\nprint(dp[n][k])\n", "n,m = map(int,input().split())\na = list(map(int,input().split()))\na.sort()\ndp = [0]*n\nstart = a[0]\nk,i = 0,0\nwhile i<n:\n\tif a[i]-start>5:\n\t\tdp[k] = i-k\n\t\tk += 1\n\t\tstart = a[k]\n\telse:\n\t\ti+=1\ndp[k] = n-k\nfor i in range(k+1,n):\n\tdp[i] = dp[i-1]-1\n# print (dp)\nif dp[0]==n:\n\tprint (n)\n\treturn\n\ndp2=[[0 for i in range(m+1)] for j in range(n+1)]\nfor i in range(n-1,-1,-1):\n\tfor j in range(1,m+1):\n\t\tdp2[i][j] = max(dp2[i+1][j], dp2[i+1][j-1]+1, dp2[dp[i]+i][j-1]+(dp[i]))\n# print (dp2)\nprint (dp2[0][m])", "n,k=map(int,input().split())\nl=list(map(int,input().split()))\nl.sort()\ndp=[[0 for i in range(k+1)]for j in range(n+1)]\nprev=[0 for i in range(n)]\nfor i in range(n):\n    for j in range(i,-1,-1):\n        if l[i]-l[j]<=5:\n            prev[i]=j\nfor i in range(k+1):\n    dp[0][i]=0\nfor i in range(1,n+1):\n    for j in range(1,k+1):\n        #print(i,j,prev[i])\n        dp[i][j]=max(dp[i-1][j-1]+1,dp[i-1][j],dp[prev[i-1]][j-1]+i-prev[i-1])\nprint(dp[n][k])"]