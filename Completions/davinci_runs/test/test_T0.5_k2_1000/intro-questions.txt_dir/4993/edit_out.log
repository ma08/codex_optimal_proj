2022-04-12 04:51:19.606718 num operations 2
2022-04-12 04:51:19.606762 size on input set 1
2022-04-12 04:51:21.854046 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    parts = set()\n    for i in range(m):\n        parts.add(input())\n        if len(parts) == n:\n            print(i+1)\n            return\n    print('paradox avoided')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    parts = set()\n    for i in range(m):\n        parts.add(input())\n        if len(parts) == n:\n            print(i+1)\n            return\n    print('paradox avoided') \n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649753479,
  "object": "edit"
}
2022-04-12 04:51:21.854300 fix spelling mistakes 2 ["\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    parts = set()\n    for i in range(m):\n        parts.add(input())\n        if len(parts) == n:\n            print(i+1)\n            return\n    print('paradox avoided')\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    parts = set()\n    for i in range(m):\n        parts.add(input())\n        if len(parts) == n:\n            print(i+1)\n            return\n    print('paradox avoided') \n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 04:51:21.854325 size on output set 2
2022-04-12 04:51:21.854331 size on input set 2
2022-04-12 04:51:24.150736 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    parts = set()\n    for i in range(m):\n        parts.add(input())\n        if len(parts) == n:\n            print(i+1)\n            return\n    print('paradox avoided') \n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    parts = set()\n    for i in range(m):\n        parts.add(input())\n        if len(parts) == n:\n            print(i+1)\n            return\n    print('paradox avoided')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649753482,
  "object": "edit"
}
2022-04-12 04:51:24.150949 fix syntax errors 2 ["\n\ndef main():\n    n, m = map(int, input().split())\n    parts = set()\n    for i in range(m):\n        parts.add(input())\n        if len(parts) == n:\n            print(i+1)\n            return\n    print('paradox avoided') \n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    parts = set()\n    for i in range(m):\n        parts.add(input())\n        if len(parts) == n:\n            print(i+1)\n            return\n    print('paradox avoided')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 04:51:27.999593 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(m):\n        parts.add(sys.stdin.readline())\n        if len(parts) == n:\n            print(i+1)\n            return\n    print('paradox avoided')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(m):\n        parts.add(sys.stdin.readline().strip())\n        if len(parts) == n:\n            print(i+1)\n            return\n    print('paradox avoided', file=sys.stderr)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649753484,
  "object": "edit"
}
2022-04-12 04:51:27.999815 fix syntax errors 2 ["\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(m):\n        parts.add(sys.stdin.readline())\n        if len(parts) == n:\n            print(i+1)\n            return\n    print('paradox avoided')\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(m):\n        parts.add(sys.stdin.readline().strip())\n        if len(parts) == n:\n            print(i+1)\n            return\n    print('paradox avoided', file=sys.stderr)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 04:51:27.999852 size on output set 4
2022-04-12 04:51:27.999867 num operations 2
2022-04-12 04:51:27.999876 size on input set 1
2022-04-12 04:51:30.036479 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    print(\"Hello World\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    print(\"Hello World\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649753488,
  "object": "edit"
}
2022-04-12 04:51:30.036579 fix spelling mistakes 2 ['\n\ndef main():\n    print("Hello World")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    print("Hello World")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 04:51:30.036591 size on output set 1
2022-04-12 04:51:30.036595 size on input set 1
2022-04-12 04:51:32.153182 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    print(\"Hello World!\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    print(\"Hello World!\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649753490,
  "object": "edit"
}
2022-04-12 04:51:32.153287 fix syntax errors 2 ['\n\ndef main():\n    print("Hello World!")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    print("Hello World!")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 04:51:32.153298 size on output set 1
2022-04-12 04:51:32.153304 num operations 2
2022-04-12 04:51:32.153307 size on input set 1
2022-04-12 04:51:34.058911 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    parts, days = map(int, input().split())\n    boat_parts = []\n    for _ in range(days):\n        boat_parts.append(input())\n    boat_parts_set = set(boat_parts)\n    if len(boat_parts_set) < parts:\n        print('paradox avoided')\n        return\n    for i, boat_part in enumerate(boat_parts):\n        if boat_part in boat_parts_set:\n            boat_parts_set.remove(boat_part)\n            if not boat_parts_set:\n                print(i+1)\n                return\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    parts, days = map(int, input().split())\n    boat_parts = []\n    for _ in range(days):\n        boat_parts.append(input())\n    boat_parts_set = set(boat_parts)\n    if len(boat_parts_set) < parts:\n        print('paradox avoided')\n        return\n    for i, boat_part in enumerate(boat_parts):\n        if boat_part in boat_parts_set:\n            boat_parts_set.remove(boat_part)\n            if not boat_parts_set:\n                print(i+1)\n                return\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649753492,
  "object": "edit"
}
2022-04-12 04:51:34.059026 fix spelling mistakes 2 ["\ndef main():\n    parts, days = map(int, input().split())\n    boat_parts = []\n    for _ in range(days):\n        boat_parts.append(input())\n    boat_parts_set = set(boat_parts)\n    if len(boat_parts_set) < parts:\n        print('paradox avoided')\n        return\n    for i, boat_part in enumerate(boat_parts):\n        if boat_part in boat_parts_set:\n            boat_parts_set.remove(boat_part)\n            if not boat_parts_set:\n                print(i+1)\n                return\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    parts, days = map(int, input().split())\n    boat_parts = []\n    for _ in range(days):\n        boat_parts.append(input())\n    boat_parts_set = set(boat_parts)\n    if len(boat_parts_set) < parts:\n        print('paradox avoided')\n        return\n    for i, boat_part in enumerate(boat_parts):\n        if boat_part in boat_parts_set:\n            boat_parts_set.remove(boat_part)\n            if not boat_parts_set:\n                print(i+1)\n                return\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 04:51:34.059115 size on output set 1
2022-04-12 04:51:34.059120 size on input set 1
2022-04-12 04:51:36.740862 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    parts, days = map(int, input().split())\n    boat_parts = [input() for _ in range(days)]\n    boat_parts_set = set(boat_parts)\n    if len(boat_parts_set) < parts:\n        print('paradox avoided')\n        return\n    for i, boat_part in enumerate(boat_parts):\n        if boat_part in boat_parts_set:\n            boat_parts_set.remove(boat_part)\n            if not boat_parts_set:\n                print(i+1)\n                return\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "def main():\n    parts, days = map(int, input().split())\n    boat_parts = []\n    for _ in range(days):\n        boat_parts.append(input())\n    boat_parts_set = set(boat_parts)\n    if len(boat_parts_set) < parts:\n        print('paradox avoided')\n        return\n    for i, boat_part in enumerate(boat_parts):\n        if boat_part in boat_parts_set:\n            boat_parts_set.remove(boat_part)\n            if not boat_parts_set:\n                print(i+1)\n                return\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649753494,
  "object": "edit"
}
2022-04-12 04:51:36.741561 fix syntax errors 2 ["\ndef main():\n    parts, days = map(int, input().split())\n    boat_parts = [input() for _ in range(days)]\n    boat_parts_set = set(boat_parts)\n    if len(boat_parts_set) < parts:\n        print('paradox avoided')\n        return\n    for i, boat_part in enumerate(boat_parts):\n        if boat_part in boat_parts_set:\n            boat_parts_set.remove(boat_part)\n            if not boat_parts_set:\n                print(i+1)\n                return\n\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    parts, days = map(int, input().split())\n    boat_parts = []\n    for _ in range(days):\n        boat_parts.append(input())\n    boat_parts_set = set(boat_parts)\n    if len(boat_parts_set) < parts:\n        print('paradox avoided')\n        return\n    for i, boat_part in enumerate(boat_parts):\n        if boat_part in boat_parts_set:\n            boat_parts_set.remove(boat_part)\n            if not boat_parts_set:\n                print(i+1)\n                return\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 04:51:36.741689 size on output set 2
2022-04-12 04:51:36.741710 num operations 2
2022-04-12 04:51:36.741719 size on input set 1
2022-04-12 04:51:39.940635 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nimport math\nimport string\nimport itertools\nimport collections\nimport re\n\ndef main():\n    P, N = [int(i) for i in input().split()]\n    parts = {}\n    i = 1\n    for line in sys.stdin.readlines():\n        line = line.strip()\n        if line in parts:\n            parts[line] = min(parts[line], i)\n        else:\n            parts[line] = i\n        i += 1\n    if len(parts) == P:\n        print(max(parts.values()))\n    else:\n        print(\"paradox avoided\")\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nimport math\nimport string\nimport itertools\nimport collections\nimport re\n\ndef main():\n    P, N = [int(i) for i in sys.stdin.readline().split()]\n    parts = {}\n    i = 1\n    for line in sys.stdin:\n        line = line.strip()\n        if line in parts:\n            parts[line] = min(parts[line], i)\n        else:\n            parts[line] = i\n        i += 1\n    if len(parts) == P:\n        print(max(parts.values()))\n    else:\n        print(\"paradox avoided\")\n\nmain()\n"
    }
  ],
  "created": 1649753496,
  "object": "edit"
}
2022-04-12 04:51:39.940846 fix spelling mistakes 2 ['\n\nimport sys\nimport math\nimport string\nimport itertools\nimport collections\nimport re\n\ndef main():\n    P, N = [int(i) for i in input().split()]\n    parts = {}\n    i = 1\n    for line in sys.stdin.readlines():\n        line = line.strip()\n        if line in parts:\n            parts[line] = min(parts[line], i)\n        else:\n            parts[line] = i\n        i += 1\n    if len(parts) == P:\n        print(max(parts.values()))\n    else:\n        print("paradox avoided")\n\nmain()\n', '\nimport sys\nimport math\nimport string\nimport itertools\nimport collections\nimport re\n\ndef main():\n    P, N = [int(i) for i in sys.stdin.readline().split()]\n    parts = {}\n    i = 1\n    for line in sys.stdin:\n        line = line.strip()\n        if line in parts:\n            parts[line] = min(parts[line], i)\n        else:\n            parts[line] = i\n        i += 1\n    if len(parts) == P:\n        print(max(parts.values()))\n    else:\n        print("paradox avoided")\n\nmain()\n']
2022-04-12 04:51:39.940887 size on output set 2
2022-04-12 04:51:39.940898 size on input set 2
2022-04-12 04:51:41.910855 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\nimport math\nimport string\nimport itertools\nimport collections\nimport re\n\ndef main():\n    P, N = [int(i) for i in input().split()]\n    parts = {}\n    i = 1\n    for line in sys.stdin.readlines():\n        line = line.strip()\n        if line in parts:\n            parts[line] = min(parts[line], i)\n        else:\n            parts[line] = i\n        i += 1\n    if len(parts) == P:\n        print(max(parts.values()))\n    else:\n        print(\"paradox avoided\")\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nimport math\nimport string\nimport itertools\nimport collections\nimport re\n\ndef main():\n    P, N = [int(i) for i in input().split()]\n    parts = {}\n    i = 1\n    for line in sys.stdin.readlines():\n        line = line.strip()\n        if line in parts:\n            parts[line] = min(parts[line], i)\n        else:\n            parts[line] = i\n        i += 1\n    if len(parts) == P:\n        print(max(parts.values()))\n    else:\n        print(\"paradox avoided\")\n\nmain()\n"
    }
  ],
  "created": 1649753500,
  "object": "edit"
}
2022-04-12 04:51:41.911023 fix syntax errors 2 ['import sys\nimport math\nimport string\nimport itertools\nimport collections\nimport re\n\ndef main():\n    P, N = [int(i) for i in input().split()]\n    parts = {}\n    i = 1\n    for line in sys.stdin.readlines():\n        line = line.strip()\n        if line in parts:\n            parts[line] = min(parts[line], i)\n        else:\n            parts[line] = i\n        i += 1\n    if len(parts) == P:\n        print(max(parts.values()))\n    else:\n        print("paradox avoided")\n\nmain()\n', '\nimport sys\nimport math\nimport string\nimport itertools\nimport collections\nimport re\n\ndef main():\n    P, N = [int(i) for i in input().split()]\n    parts = {}\n    i = 1\n    for line in sys.stdin.readlines():\n        line = line.strip()\n        if line in parts:\n            parts[line] = min(parts[line], i)\n        else:\n            parts[line] = i\n        i += 1\n    if len(parts) == P:\n        print(max(parts.values()))\n    else:\n        print("paradox avoided")\n\nmain()\n']
2022-04-12 04:51:47.641171 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef main():\n    P, N = [int(i) for i in sys.stdin.readline().split()]\n    parts = {}\n    i = 1\n    for line in sys.stdin:\n        line = line.strip()\n        if line in parts:\n            parts[line] = min(parts[line], i)\n        else:\n            parts[line] = i\n        i += 1\n    if len(parts) == P:\n        print(max(parts.values()))\n    else:\n        print(\"paradox avoided\") \n\nmain()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    print(\"Hello World\")\n\nmain()\n"
    }
  ],
  "created": 1649753502,
  "object": "edit"
}
2022-04-12 04:51:47.641449 fix syntax errors 2 ['import sys\n\ndef main():\n    P, N = [int(i) for i in sys.stdin.readline().split()]\n    parts = {}\n    i = 1\n    for line in sys.stdin:\n        line = line.strip()\n        if line in parts:\n            parts[line] = min(parts[line], i)\n        else:\n            parts[line] = i\n        i += 1\n    if len(parts) == P:\n        print(max(parts.values()))\n    else:\n        print("paradox avoided") \n\nmain()\n', 'import sys\n\ndef main():\n    print("Hello World")\n\nmain()\n']
2022-04-12 04:51:47.641475 size on output set 4
2022-04-12 04:51:47.641511 num operations 2
2022-04-12 04:51:47.641516 size on input set 1
2022-04-12 04:51:49.778867 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n#\nimport sys\n\ndef main():\n    \"\"\"\n    Main Function\n    \"\"\"\n    num_parts, num_days = map(int, sys.stdin.readline().strip().split())\n    parts = {}\n    for _ in range(num_days):\n        part = sys.stdin.readline().strip()\n        if part in parts:\n            parts[part] += 1\n        else:\n            parts[part] = 1\n    if len(parts) == num_parts:\n        print(num_days)\n    else:\n        print(\"paradox avoided\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    num_parts, num_days = map(int, sys.stdin.readline().strip().split())\n    parts = {}\n    for _ in range(num_days):\n        part = sys.stdin.readline().strip()\n        if part in parts:\n            parts[part] += 1\n        else:\n            parts[part] = 1\n    if len(parts) == num_parts:\n        print(num_days)\n    else:\n        print(\"paradox avoided\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649753507,
  "object": "edit"
}
2022-04-12 04:51:49.779012 fix spelling mistakes 2 ['\n#\nimport sys\n\ndef main():\n    """\n    Main Function\n    """\n    num_parts, num_days = map(int, sys.stdin.readline().strip().split())\n    parts = {}\n    for _ in range(num_days):\n        part = sys.stdin.readline().strip()\n        if part in parts:\n            parts[part] += 1\n        else:\n            parts[part] = 1\n    if len(parts) == num_parts:\n        print(num_days)\n    else:\n        print("paradox avoided")\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    """\n    Main function\n    """\n    num_parts, num_days = map(int, sys.stdin.readline().strip().split())\n    parts = {}\n    for _ in range(num_days):\n        part = sys.stdin.readline().strip()\n        if part in parts:\n            parts[part] += 1\n        else:\n            parts[part] = 1\n    if len(parts) == num_parts:\n        print(num_days)\n    else:\n        print("paradox avoided")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 04:51:49.779037 size on output set 2
2022-04-12 04:51:49.779044 size on input set 2
2022-04-12 04:51:52.077172 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#!/usr/bin/env python3\nimport sys\n\ndef main():\n    \"\"\"\n    Main Function\n    \"\"\"\n    num_parts, num_days = map(int, sys.stdin.readline().strip().split())\n    parts = {}\n    for _ in range(num_days):\n        part = sys.stdin.readline().strip()\n        if part in parts:\n            parts[part] += 1\n        else:\n            parts[part] = 1\n    if len(parts) == num_parts:\n        print(num_days)\n    else:\n        print(\"paradox avoided\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n# https://codeforces.com/problemset/problem/1186/A\nimport sys\n\ndef main():\n    \"\"\"\n    Main Function\n    \"\"\"\n    num_parts, num_days = map(int, sys.stdin.readline().strip().split())\n    parts = {}\n    for _ in range(num_days):\n        part = sys.stdin.readline().strip()\n        if part in parts:\n            parts[part] += 1\n        else:\n            parts[part] = 1\n    if len(parts) == num_parts:\n        print(num_days)\n    else:\n        print(\"paradox avoided\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649753509,
  "object": "edit"
}
2022-04-12 04:51:52.077318 fix syntax errors 2 ['\n#!/usr/bin/env python3\nimport sys\n\ndef main():\n    """\n    Main Function\n    """\n    num_parts, num_days = map(int, sys.stdin.readline().strip().split())\n    parts = {}\n    for _ in range(num_days):\n        part = sys.stdin.readline().strip()\n        if part in parts:\n            parts[part] += 1\n        else:\n            parts[part] = 1\n    if len(parts) == num_parts:\n        print(num_days)\n    else:\n        print("paradox avoided")\n\nif __name__ == "__main__":\n    main()\n', '\n# https://codeforces.com/problemset/problem/1186/A\nimport sys\n\ndef main():\n    """\n    Main Function\n    """\n    num_parts, num_days = map(int, sys.stdin.readline().strip().split())\n    parts = {}\n    for _ in range(num_days):\n        part = sys.stdin.readline().strip()\n        if part in parts:\n            parts[part] += 1\n        else:\n            parts[part] = 1\n    if len(parts) == num_parts:\n        print(num_days)\n    else:\n        print("paradox avoided")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 04:51:57.209658 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    num_parts, num_days = map(int, input().strip().split())\n    parts = set()\n    for _ in range(num_days): parts.add(input().strip())\n    print(num_days if len(parts) == num_parts else \"paradox avoided\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    num_parts, num_days = map(int, sys.stdin.readline().strip().split())\n    parts = {}\n    for _ in range(num_days):\n        part = sys.stdin.readline().strip()\n        if part in parts:\n            parts[part] += 1\n        else:\n            parts[part] = 1\n    if len(parts) == num_parts:\n        print(num_days)\n    else:\n        print(\"paradox avoided\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649753512,
  "object": "edit"
}
2022-04-12 04:51:57.209784 fix syntax errors 2 ['\nimport sys\n\ndef main():\n    """\n    Main function\n    """\n    num_parts, num_days = map(int, input().strip().split())\n    parts = set()\n    for _ in range(num_days): parts.add(input().strip())\n    print(num_days if len(parts) == num_parts else "paradox avoided")\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    """\n    Main function\n    """\n    num_parts, num_days = map(int, sys.stdin.readline().strip().split())\n    parts = {}\n    for _ in range(num_days):\n        part = sys.stdin.readline().strip()\n        if part in parts:\n            parts[part] += 1\n        else:\n            parts[part] = 1\n    if len(parts) == num_parts:\n        print(num_days)\n    else:\n        print("paradox avoided")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 04:51:57.209857 size on output set 4
2022-04-12 04:51:57.209866 num operations 2
2022-04-12 04:51:57.209872 size on input set 1
2022-04-12 04:51:59.148376 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    P, N = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        if part not in parts:\n            parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n\n    print(\"paradox avoided\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    P, N = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        if part not in parts:\n            parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n\n    print(\"paradox avoided\")\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649753517,
  "object": "edit"
}
2022-04-12 04:51:59.148475 fix spelling mistakes 2 ['\nimport sys\n\ndef main():\n    P, N = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        if part not in parts:\n            parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n\n    print("paradox avoided")\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef main():\n    P, N = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        if part not in parts:\n            parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n\n    print("paradox avoided")\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-12 04:51:59.148490 size on output set 1
2022-04-12 04:51:59.148494 size on input set 1
2022-04-12 04:52:02.212037 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    P, N = map(int, input().split())\n    parts = set()\n    for i in range(N):\n        part = input().strip()\n        if part not in parts:\n            parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n\n    print(\"paradox avoided\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    P, N = map(int, input().split())\n    parts = set()\n    for i in range(N):\n        part = input().strip()\n        if part not in parts:\n            parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n\n    print(\"paradox avoided\")\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649753519,
  "object": "edit"
}
2022-04-12 04:52:02.212176 fix syntax errors 2 ['\nimport sys\n\ndef main():\n    P, N = map(int, input().split())\n    parts = set()\n    for i in range(N):\n        part = input().strip()\n        if part not in parts:\n            parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n\n    print("paradox avoided")\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef main():\n    P, N = map(int, input().split())\n    parts = set()\n    for i in range(N):\n        part = input().strip()\n        if part not in parts:\n            parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n\n    print("paradox avoided")\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-12 04:52:02.212201 size on output set 1
2022-04-12 04:52:02.212212 num operations 2
2022-04-12 04:52:02.212218 size on input set 1
2022-04-12 04:52:04.417879 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    P, N = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n    print('paradox avoided') \n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    P, N = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n    print('paradox avoided')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649753522,
  "object": "edit"
}
2022-04-12 04:52:04.417993 fix spelling mistakes 2 ["\n\nimport sys\n\ndef main():\n    P, N = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n    print('paradox avoided') \n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    P, N = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n    print('paradox avoided')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 04:52:04.418011 size on output set 2
2022-04-12 04:52:04.418016 size on input set 2
2022-04-12 04:52:06.622847 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    P, N = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n    print(\"paradox avoided\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    P, N = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n    print('paradox avoided') \n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649753524,
  "object": "edit"
}
2022-04-12 04:52:06.622990 fix syntax errors 2 ['#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    P, N = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n    print("paradox avoided")\n\nif __name__ == \'__main__\':\n    main()\n', "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    P, N = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n    print('paradox avoided') \n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 04:52:09.197630 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    P, N = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n    print('paradox avoided')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    P, N = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n    print('paradox avoided')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649753526,
  "object": "edit"
}
2022-04-12 04:52:09.197908 fix syntax errors 2 ["\n\nimport sys\n\ndef main():\n    P, N = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n    print('paradox avoided')\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    P, N = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n    print('paradox avoided')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 04:52:09.197949 size on output set 4
