["import sys\n\ndef main():\n    P, N = [int(i) for i in sys.stdin.readline().split()]\n    parts = {}\n    i = 1\n    for line in sys.stdin:\n        line = line.strip()\n        if line in parts:\n            parts[line] = min(parts[line], i)\n        else:\n            parts[line] = i\n        i += 1\n    if len(parts) == P:\n        print(max(parts.values()))\n    else:\n        print(\"paradox avoided\") \n\nmain()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    parts = set()\n    for i in range(m):\n        parts.add(input())\n        if len(parts) == n:\n            print(i+1)\n            return\n    print('paradox avoided')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    parts = set()\n    for i in range(m):\n        parts.add(input())\n        if len(parts) == n:\n            print(i+1)\n            return\n    print('paradox avoided') \n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(m):\n        parts.add(sys.stdin.readline().strip())\n        if len(parts) == n:\n            print(i+1)\n            return\n    print('paradox avoided', file=sys.stderr)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\nimport string\nimport itertools\nimport collections\nimport re\n\ndef main():\n    P, N = [int(i) for i in input().split()]\n    parts = {}\n    i = 1\n    for line in sys.stdin.readlines():\n        line = line.strip()\n        if line in parts:\n            parts[line] = min(parts[line], i)\n        else:\n            parts[line] = i\n        i += 1\n    if len(parts) == P:\n        print(max(parts.values()))\n    else:\n        print(\"paradox avoided\")\n\nmain()\n", "\nimport sys\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    num_parts, num_days = map(int, input().strip().split())\n    parts = set()\n    for _ in range(num_days): parts.add(input().strip())\n    print(num_days if len(parts) == num_parts else \"paradox avoided\")\n\nif __name__ == \"__main__\":\n    main()\n", "def main():\n    parts, days = map(int, input().split())\n    boat_parts = []\n    for _ in range(days):\n        boat_parts.append(input())\n    boat_parts_set = set(boat_parts)\n    if len(boat_parts_set) < parts:\n        print('paradox avoided')\n        return\n    for i, boat_part in enumerate(boat_parts):\n        if boat_part in boat_parts_set:\n            boat_parts_set.remove(boat_part)\n            if not boat_parts_set:\n                print(i+1)\n                return\n\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    P, N = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n    print(\"paradox avoided\")\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport math\nimport string\nimport itertools\nimport collections\nimport re\n\ndef main():\n    P, N = [int(i) for i in input().split()]\n    parts = {}\n    i = 1\n    for line in sys.stdin.readlines():\n        line = line.strip()\n        if line in parts:\n            parts[line] = min(parts[line], i)\n        else:\n            parts[line] = i\n        i += 1\n    if len(parts) == P:\n        print(max(parts.values()))\n    else:\n        print(\"paradox avoided\")\n\nmain()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(m):\n        parts.add(sys.stdin.readline())\n        if len(parts) == n:\n            print(i+1)\n            return\n    print('paradox avoided')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    num_parts, num_days = map(int, sys.stdin.readline().strip().split())\n    parts = {}\n    for _ in range(num_days):\n        part = sys.stdin.readline().strip()\n        if part in parts:\n            parts[part] += 1\n        else:\n            parts[part] = 1\n    if len(parts) == num_parts:\n        print(num_days)\n    else:\n        print(\"paradox avoided\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n# https://codeforces.com/problemset/problem/1186/A\nimport sys\n\ndef main():\n    \"\"\"\n    Main Function\n    \"\"\"\n    num_parts, num_days = map(int, sys.stdin.readline().strip().split())\n    parts = {}\n    for _ in range(num_days):\n        part = sys.stdin.readline().strip()\n        if part in parts:\n            parts[part] += 1\n        else:\n            parts[part] = 1\n    if len(parts) == num_parts:\n        print(num_days)\n    else:\n        print(\"paradox avoided\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    P, N = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n    print('paradox avoided')\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    print(\"Hello World\")\n\nmain()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    P, N = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n    print('paradox avoided') \n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    P, N = map(int, sys.stdin.readline().split())\n    parts = set()\n    for i in range(N):\n        part = sys.stdin.readline().strip()\n        parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n    print('paradox avoided')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    print(\"Hello World!\")\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    parts, days = map(int, input().split())\n    boat_parts = [input() for _ in range(days)]\n    boat_parts_set = set(boat_parts)\n    if len(boat_parts_set) < parts:\n        print('paradox avoided')\n        return\n    for i, boat_part in enumerate(boat_parts):\n        if boat_part in boat_parts_set:\n            boat_parts_set.remove(boat_part)\n            if not boat_parts_set:\n                print(i+1)\n                return\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    P, N = map(int, input().split())\n    parts = set()\n    for i in range(N):\n        part = input().strip()\n        if part not in parts:\n            parts.add(part)\n        if len(parts) == P:\n            print(i + 1)\n            return\n\n    print(\"paradox avoided\")\n\nif __name__ == '__main__':\n    main()\n", "\n#!/usr/bin/env python3\nimport sys\n\ndef main():\n    \"\"\"\n    Main Function\n    \"\"\"\n    num_parts, num_days = map(int, sys.stdin.readline().strip().split())\n    parts = {}\n    for _ in range(num_days):\n        part = sys.stdin.readline().strip()\n        if part in parts:\n            parts[part] += 1\n        else:\n            parts[part] = 1\n    if len(parts) == num_parts:\n        print(num_days)\n    else:\n        print(\"paradox avoided\")\n\nif __name__ == \"__main__\":\n    main()\n"]