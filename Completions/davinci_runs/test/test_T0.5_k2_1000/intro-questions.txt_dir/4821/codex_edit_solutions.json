["\n\n#-----import------\nimport sys\n\n#-----main-----\ns = sys.stdin.readline().strip().split(' ')\n\n#-----check-----\nfor i in range(len(s)):\n    if len(s[i]) != 3:\n        print('GRESKA')\n        sys.exit()\n    if s[i][0] not in 'PKHT':\n        print('GRESKA')\n        sys.exit()\n    if s[i][1:3] not in '0123456789':\n        print('GRESKA')\n        sys.exit()\n    if int(s[i][1:3]) > 13 or int(s[i][1:3]) < 1:\n        print('GRESKA')\n        sys.exit()\n\n#-----P-----\np = []\np_missing = 0\nfor i in range(len(s)):\n    if s[i] == 'P':\n        if s[i+1:i+3] not in p:\n            p.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in p:\n            p_missing += 1\n    else:\n        if str(i) not in p:\n            p_missing += 1\n\n#-----K-----\nk = []\nk_missing = 0\nfor i in range(len(s)):\n    if s[i] == 'K':\n        if s[i+1:i+3] not in k:\n            k.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in k:\n            k_missing += 1\n    else:\n        if str(i) not in k:\n            k_missing += 1\n\n#-----H-----\nh = []\nh_missing = 0\nfor i in range(len(s)):\n    if s[i] == 'H':\n        if s[i+1:i+3] not in h:\n            h.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in h:\n            h_missing += 1\n    else:\n        if str(i) not in h:\n            h_missing += 1\n\n#-----T-----\nt = []\nt_missing = 0\nfor i in range(len(s)):\n    if s[i] == 'T':\n        if s[i+1:i+3] not in t:\n            t.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in t:\n            t_missing += 1\n    else:\n        if str(i) not in t:\n            t_missing += 1\n\nprint('{} {} {} {}'.format(p_missing, k_missing, h_missing, t_missing))\n", "\n\n#-----import------\nimport sys\n\n#-----main-----\ns = sys.stdin.readline().strip()\n\n#-----P-----\np = []\np_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'P':\n        if s[i+1:i+3] not in p:\n            p.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1 and '0'+str(i) not in p:\n        p_missing += 1\n    elif str(i) not in p:\n        p_missing += 1\n\n#-----K-----\nk = []\nk_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'K':\n        if s[i+1:i+3] not in k:\n            k.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1 and '0'+str(i) not in k:\n        k_missing += 1\n    elif str(i) not in k:\n        k_missing += 1\n\n#-----H-----\nh = []\nh_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'H':\n        if s[i+1:i+3] not in h:\n            h.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1 and '0'+str(i) not in h:\n        h_missing += 1\n    elif str(i) not in h:\n        h_missing += 1\n\n#-----T-----\nt = []\nt_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'T':\n        if s[i+1:i+3] not in t:\n            t.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1 and '0'+str(i) not in t:\n        t_missing += 1\n    elif str(i) not in t:\n        t_missing += 1\n\nprint('{} {} {} {}'.format(p_missing, k_missing, h_missing, t_missing))\n", "\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef missing_cards(s):\n    cards = {'P': [], 'K': [], 'H': [], 'T': []}\n    suits = ['P', 'K', 'H', 'T']\n    for i in range(0, len(s) - 1, 3):\n        cards[s[i]].append(s[i + 1:i + 3])\n    for suit in suits:\n        if len(cards[suit]) != 13:\n            return 'GRESKA' # error\n        for card in cards[suit]:\n            if cards[suit].count(card) > 1:\n                return 'GRESKA'\n    return ' '.join([str(13 - len(cards[suit])) for suit in suits]) # return the number of missing cards\n\nprint(missing_cards(input()))\n", "\n\ndef main():\n    cards = [0] * 52\n    suits = {\"C\": 0, \"D\": 13, \"H\": 26, \"S\": 39}\n    suit_names = [\"C\", \"D\", \"H\", \"S\"]\n\n    cards_input = input()\n    for i in range(0, len(cards_input), 3):\n        card = cards_input[i:i+3]\n        suit = suits[card[0]]\n        number = int(card[1:])\n        if cards[suit + number - 1] == 1:\n            print(\"GRESKA\")\n            return\n        cards[suit + number - 1] = 1\n\n    for suit in suit_names:\n        print(13 - sum(cards[suits[suit]:suits[suit] + 13]), end=' ')\n\nif __name__ == \"__main__\":\n    main()\n", "\n#-----import-----#\nimport sys\n\n#-----main-----#\ns = sys.stdin.readline().strip()\n\n#-----P-----#\np = []\np_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'P':\n        if s[i+1:i+3] not in p:\n            p.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in p:\n            p_missing += 1\n    else:\n        if str(i) not in p:\n            p_missing += 1\n\n#-----K-----#\nk = []\nk_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'K':\n        if s[i+1:i+3] not in k:\n            k.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in k:\n            k_missing += 1\n    else:\n        if str(i) not in k:\n            k_missing += 1\n\n#-----H-----#\nh = []\nh_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'H':\n        if s[i+1:i+3] not in h:\n            h.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in h:\n            h_missing += 1\n    else:\n        if str(i) not in h:\n            h_missing += 1\n\n#-----T-----#\nt = []\nt_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'T':\n        if s[i+1:i+3] not in t:\n            t.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0'+str(i) not in t:\n            t_missing += 1\n    else:\n        if str(i) not in t:\n            t_missing += 1\n\nprint('{} {} {} {}'.format(p_missing, k_missing, h_missing, t_missing))\n", "\n\ndef main():\n    cards = input()\n    cards = cards.split(\" \")\n    p = [0] * 13\n    k = [0] * 13\n    h = [0] * 13\n    t = [0] * 13\n    for card in cards:\n        if card[0] == \"P\":\n            p[int(card[1:]) - 1] += 1\n        elif card[0] == \"K\":\n            k[int(card[1:]) - 1] += 1\n        elif card[0] == \"H\":\n            h[int(card[1:]) - 1] += 1\n        elif card[0] == \"T\":\n            t[int(card[1:]) - 1] += 1\n    if max(p) > 1 or max(k) > 1 or max(h) > 1 or max(t) > 1:\n        print(\"GRESKA\")\n    else:\n        print(13 - sum(p), 13 - sum(k), 13 - sum(h), 13 - sum(t))\n\nmain()\n", "\n\ndef check(cards):\n    suits = {'P': 0, 'K': 0, 'H': 0, 'T': 0, 'A': 0}\n    numbers = {'P': [], 'K': [], 'H': [], 'T': [], 'A': []}\n\n    for card in cards:\n        suit = card[0]\n        number = card[1:]\n        suits[suit] += 1\n        numbers[suit].append(number)\n\n    for suit in suits:\n        if suits[suit] != 13:\n            print(13 - suits[suit], end=' ')\n        else:\n            if len(set(numbers[suit])) != 13:\n                print('GRESKA')\n                return\n    print()\n\ncheck(input())\n", "\n\n#-----import-----#\nimport sys\n\n#-----main-----#\ns = sys.stdin.readline().strip()\n\n#-----P-----#\np = []\np_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'P':\n        if s[i+1:i+3] not in p:\n            p.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0' + str(i) not in p:\n            p_missing += 1\n    else:\n        if str(i) not in p:\n            p_missing += 1\n\n#-----K-----#\nk = []\nk_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'K':\n        if s[i+1:i+3] not in k:\n            k.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0' + str(i) not in k:\n            k_missing += 1\n    else:\n        if str(i) not in k:\n            k_missing += 1\n\n#-----H-----#\nh = []\nh_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'H':\n        if s[i+1:i+3] not in h:\n            h.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0' + str(i) not in h:\n            h_missing += 1\n    else:\n        if str(i) not in h:\n            h_missing += 1\n\n#-----T-----#\nt = []\nt_missing = 0\nfor i in range(0, len(s), 3):\n    if s[i] == 'T':\n        if s[i+1:i+3] not in t:\n            t.append(s[i+1:i+3])\n        else:\n            print('GRESKA')\n            sys.exit()\nfor i in range(1, 14):\n    if len(str(i)) == 1:\n        if '0' + str(i) not in t:\n            t_missing += 1\n    else:\n        if str(i) not in t:\n            t_missing += 1\n\nprint('{} {} {} {}'.format(p_missing, k_missing, h_missing, t_missing))\n", "\n\ndef main():\n    cards = [0] * 52  # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0438\u0437 52 \u043d\u0443\u043b\u0435\u0439\n    suits = {\"S\": 0, \"H\": 13, \"D\": 26, \"C\": 39}  # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0441 \u043a\u043b\u044e\u0447\u0430\u043c\u0438 \u043c\u0430\u0441\u0442\u0435\u0439 \u0438 \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u043c\u0438 \u043d\u0430\u0447\u0430\u043b\u0430 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u0432 \u043a\u0430\u0440\u0442 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435\n    suit_names = [\"S\", \"H\", \"D\", \"C\"]  # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u043c\u0430\u0441\u0442\u0435\u0439\n\n    cards_input = input()  # \u0412\u0432\u043e\u0434\u0438\u043c \u043a\u0430\u0440\u0442\u044b\n    for i in range(0, len(cards_input), 3):  # \u041f\u0440\u043e\u0445\u043e\u0434\u0438\u043c \u043f\u043e \u0432\u0441\u0435\u043c \u043a\u0430\u0440\u0442\u0430\u043c, \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 \u043d\u0443\u043b\u0435\u0432\u043e\u0439 \u0438 \u043f\u0440\u044b\u0433\u0430\u044f \u043d\u0430 3 \u0441\u0438\u043c\u0432\u043e\u043b\u0430\n        card = cards_input[i:i+3]  # \u0412\u044b\u0434\u0435\u043b\u044f\u0435\u043c \u043a\u0430\u0440\u0442\u0443\n        suit = suits[card[0]]  # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441 \u043d\u0430\u0447\u0430\u043b\u0430 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u0432 \u043a\u0430\u0440\u0442 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0439 \u043c\u0430\u0441\u0442\u0438\n        number = int(card[1:])  # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043d\u043e\u043c\u0435\u0440 \u043a\u0430\u0440\u0442\u044b\n        if cards[suit + number - 1] == 1:  # \u0415\u0441\u043b\u0438 \u043a\u0430\u0440\u0442\u0430 \u0443\u0436\u0435 \u0431\u044b\u043b\u0430 \u0432\u0432\u0435\u0434\u0435\u043d\u0430\n            print(\"GRESKA\")  # \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u043e\u0448\u0438\u0431\u043a\u0443\n            return  # \u0412\u044b\u0445\u043e\u0434\u0438\u043c \u0438\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u0438\n        cards[suit + number - 1] = 1  # \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u043a\u0430\u0440\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 1 \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0439 \u043a\u0430\u0440\u0442\u044b\n\n    for suit in suit_names:  # \u041f\u0440\u043e\u0445\u043e\u0434\u0438\u043c \u043f\u043e \u0432\u0441\u0435\u043c \u043c\u0430\u0441\u0442\u044f\u043c\n        print(13 - sum(cards[suits[suit]:suits[suit] + 13]), end=\" \")  # \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u0440\u0442 \u0434\u0430\u043d\u043d\u043e\u0439 \u043c\u0430\u0441\u0442\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u0432 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0445\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    cards = [0] * 52 # create a list of 52 zeroes\n    suits = {\"S\": 0, \"H\": 13, \"D\": 26, \"C\": 39} # create a dictionary with suits\n    suit_names = [\"S\", \"H\", \"D\", \"C\"] # create a list of suits\n\n    cards_input = input() # get the input\n    for i in range(0, len(cards_input), 3): # loop through the input\n        card = cards_input[i:i+3] # get the card\n        suit = suits[card[0]] # get the suit\n        number = int(card[1:]) # get the number\n        if cards[suit + number - 1] == 1: # check if the card is already in the list\n            print(\"GRESKA\")\n            return # if the card is already in the list, print GRESKA and return\n        cards[suit + number - 1] = 1 # if the card is not in the list, add it\n\n    for suit in suit_names: # loop through the suits\n        print(13 - sum(cards[suits[suit]:suits[suit] + 13]), end=\" \") # print the number of missing cards\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ns = input()\ncards = [0]*52\nfor i in range(0, len(s), 3):\n    cards[int(s[i+1:i+3])-1] += 1\n\nprint(\"GRESKA\" if any(cards[i] > 1 for i in range(52)) else \"{} {} {} {}\".format(*(13-cards[i*13:(i+1)*13].count(1) for i in range(4))))\n", "\n\ndef check(labels):\n    suits = {'P': 0, 'K': 0, 'H': 0, 'T': 0}  # count of suits\n    numbers = {'P': [], 'K': [], 'H': [], 'T': []}  # list of numbers\n\n    for label in labels:\n        # count suits and numbers\n        suit = label[0]\n        # get suit\n        number = label[1:]\n        # get number\n        suits[suit] += 1\n        # count suit\n        numbers[suit].append(number)\n        # add number to list\n\n    for suit in suits:\n        # print missing cards\n        if suits[suit] != 13:\n            # if suit is missing\n            print(13 - suits[suit], end=' ')\n            # print number of missing cards\n        else:\n            # if suit is complete\n            if len(set(numbers[suit])) != 13:\n                # if there are duplicates\n                print('GRESKA')\n                print(error)\n                # print error and stop\n                return\n    print()\n\n# read input\ncheck(input())\n", "\n\ndef main():\n    s = input()\n    d = dict()\n    for i in range(len(s)):\n        if s[i] in d:\n            print(\"ERROR\")\n            return\n        d[s[i]] = True\n    for i in range(4):\n        if chr(ord(\"P\")+i) not in d:\n            print(13, end=\"\")\n        else:\n            print(0, end=\"\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef check(cards, suits, numbers):\n\n    for card in cards:\n        suit = card[0]\n        number = card[1:]\n        suits[suit] += 1\n        numbers[suit].append(number)\n\n    for suit in suits:\n        if suits[suit] != 13:\n            print(13 - suits[suit], end=' ')\n        else:\n            if len(set(numbers[suit])) != 13:\n                print('GRESKA')\n                return\n    print()\n\nsuits = {'P': 0, 'K': 0, 'H': 0, 'T': 0}\nnumbers = {'P': [], 'K': [], 'H': [], 'T': []}\n\ncheck(input(), suits, numbers)\n", "\n\ndef missingCards(s):\n    cards = {'P': set(), 'K': set(), 'H': set(), 'T': set()}\n    suits = ['P', 'K', 'H', 'T']\n    for i in range(0, len(s) - 1, 3):\n        cards[s[i]].add(s[i + 1:i + 3])\n    for suit in suits:\n        if len(cards[suit]) != 13 or len(cards[suit]) != len(set(cards[suit])):\n            return 'GRESKA' \n    return ' '.join([str(13 - len(cards[suit])) for suit in suits])\n\nprint(missingCards(input()))\n", "\n\nfrom sys import stdin\nfrom collections import Counter\n\ndef main():\n    cards = stdin.readline().strip()\n    if len(cards) % 3 != 0:\n        print('ERROR')\n        return\n    suits = Counter()\n    for i in range(0, len(cards), 2):\n        suits[cards[i:i+1]] += 1\n    for i in ['P', 'K', 'H', 'T']:\n        print(13 - suits[i], end=' ')\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    cards = [0] * 52\n    suits = {\"C\": 0, \"D\": 13, \"H\": 26, \"S\": 39}\n    suit_names = [\"C\", \"D\", \"H\", \"S\"]\n\n    cards_input = input()\n    for i in range(0, len(cards_input), 3):\n        card = cards_input[i:i+3]\n        suit = suits[card[0]]\n        number = int(card[1:])\n        if cards[suit + number - 1] == 1:\n            print(\"GRESKA\")\n            return\n        cards[suit + number - 1] = 1\n\n    for suit in suit_names:\n        print(13 - sum(cards[suits[suit]:suits[suit] + 13]), end=\" \")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef check(labels):\n    suits = {'P': 0, 'K': 0, 'H': 0, 'T': 0}\n    # count of suits\n    numbers = {'P': [], 'K': [], 'H': [], 'T': []}\n    # list of numbers\n\n    for label in labels:\n        # count suits and numbers\n        suit = label[0]\n        # get suit\n        number = label[1:]\n        # get number\n        suits[suit] += 1\n        # count suit\n        numbers[suit].append(number)\n        # add number to list\n\n    for suit in suits:\n        # print missing cards\n        if suits[suit] != 13:\n            # if suit is missing\n            print(13 - suits[suit], end=' ')\n            # print number of missing cards\n        else:\n            # if suit is complete\n            if len(set(numbers[suit])) != 13:\n                # if there are duplicates\n                print('GRESKA')\n                print error\n                return\n                stop\n    print()\n\n# read input\ncheck(input())\n", "\n\ndef missingCards(s):\n    cards = {'P': [], 'K': [], 'H': [], 'T': []}\n    suits = ['P', 'K', 'H', 'T']\n    for i in range(0, len(s) - 1, 3):\n        cards[s[i]].append(s[i + 1:i + 3])\n    for suit in suits:\n        if len(cards[suit]) != 13:\n            return 'GRESKA'\n        for card in cards[suit]:\n            if cards[suit].count(card) > 1:\n                return 'GRESKA'\n    return ' '.join([str(13 - len(cards[suit])) for suit in suits]) \n\nprint(missingCards(input()))\n", "\n\ndef main():\n    s = input()\n    d = dict()\n    for i in range(len(s)):\n        if s[i] in d:\n            print(\"ERROR\")\n            return\n        d[s[i]] = True\n    print(13-len(d), end=\" \")\n    print(0, end=\" \")\n    print(0, end=\" \")\n    print(0, end=\" \")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef missing_cards(s):\n    cards = {'P': [], 'K': [], 'H': [], 'T': []}\n    suits = ['P', 'K', 'H', 'T']\n    for i in range(0, len(s) - 1, 3):\n        cards[s[i]].append(s[i + 1:i + 3])\n    for suit in suits:\n        if len(cards[suit]) != 13:\n            return 'GRESKA'  # error\n        for card in cards[suit]:\n            if cards[suit].count(card) > 1:\n                return 'GRESKA'\n    return ' '.join([str(13 - len(cards[suit])) for suit in suits])\n\nprint(missing_cards(input()))\n"]