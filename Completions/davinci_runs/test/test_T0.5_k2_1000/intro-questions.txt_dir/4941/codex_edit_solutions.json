["\n\nfrom collections import defaultdict\n\ndef main():\n    n = int(input())\n    s = input().split()\n    m = int(input())\n    d = defaultdict(list)\n    for i in range(m):\n        dutch, english, correct = input().split()\n        d[dutch].append((english, correct))\n    correct = 0\n    incorrect = 1\n    for word in s:\n        correct += len([c for e, c in d[word] if c == 'correct'])\n        incorrect *= len([c for e, c in d[word] if c == 'incorrect'])\n    print(correct + incorrect)\n\nmain()\n", "\n\nimport collections\n\ndef main():\n    n = int(input())\n    dutch = input().split()\n    m = int(input())\n    dutch_to_english = {}\n    for i in range(m):\n        d, e, c = input().split()\n        if d not in dutch_to_english:\n            dutch_to_english[d] = {}\n        if e not in dutch_to_english[d]:\n            dutch_to_english[d][e] = []\n        dutch_to_english[d][e].append(c)\n    #print(dutch_to_english)\n    english = []\n    for d in dutch:\n        english.append(dutch_to_english[d])\n    #print(english)\n\n    correct = 0\n    incorrect = 0\n    for e in english[0]['when']:\n        if e == 'correct':\n            correct += 1\n        else:\n            incorrect += 1\n    for i in range(1, len(english)):\n        correct_new = 0\n        incorrect_new = 0\n        for e in english[i]['mole']:\n            if e == 'correct':\n                correct_new += correct\n            else:\n                incorrect_new += correct\n        for e in english[i]['destroy']:\n            if e == 'correct':\n                correct_new += incorrect\n            else:\n                incorrect_new += incorrect\n        for e in english[i]['moles']:\n            if e == 'correct':\n                correct_new += incorrect\n            else:\n                incorrect_new += incorrect\n        correct = correct_new\n        incorrect = incorrect_new\n    print(correct, 'correct')\n    print(incorrect, 'incorrect')\n\n\nif __name__ == '__main__':\n    main()\n", "\nfrom sys import stdin\nfrom collections import defaultdict\n\ndef dutch_to_english(dutch_sentence, dutch_to_english, english_to_dutch):\n    # dutch_to_english: dict of dutch word to english word\n    # english_to_dutch: dict of english word to dutch word\n    if len(dutch_sentence) == 0:\n        return [\"\"]\n    english_words = dutch_to_english[dutch_sentence[0]]\n    english_sentences = []\n    for english_word in english_words:\n        english_sentences += [english_word + \" \" + sentence for sentence in dutch_to_english(dutch_sentence[1:], dutch_to_english, english_to_dutch)]\n    return english_sentences\n\ndef english_to_dutch(english_sentence, dutch_to_english, english_to_dutch):\n    # dutch_to_english: dict of dutch word to english word\n    # english_to_dutch: dict of english word to dutch word\n    if len(english_sentence) == 0:\n        return [\"\"]\n    dutch_words = english_to_dutch[english_sentence[0]]\n    dutch_sentences = []\n    for dutch_word in dutch_words:\n        dutch_sentences += [dutch_word + \" \" + sentence for sentence in english_to_dutch(english_sentence[1:], dutch_to_english, english_to_dutch)]\n    return dutch_sentences\n\ndef main():\n    n = int(stdin.readline())\n    dutch_sentence = stdin.readline().split()\n    m = int(stdin.readline())\n    dutch_to_english = defaultdict(set)\n    english_to_dutch = defaultdict(set)\n    for _ in range(m):\n        dutch, english, correct = stdin.readline().split()\n        dutch_to_english[dutch].add(english)\n        english_to_dutch[english].add(dutch)\n    english_sentences = dutch_to_english(dutch_sentence, dutch_to_english, english_to_dutch)[1:]\n    correct_count = 0\n    incorrect_count = 0\n    for english_sentence in english_sentences:\n        if english_sentence in english_to_dutch:\n            correct_count += 1\n        else:\n            incorrect_count += 1\n    print(correct_count, \"correct\")\n    print(incorrect_count, \"incorrect\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# Solution\n\n#The solution is based on the following observation:\n#For each word in the dictionary, the number of ways to translate the sentence is the product of the number of ways to translate the word that comes directly before that word in the sentence and the number of ways to translate the word itself.\n\n#The number of ways to translate a word is simply the number of times that word appears in the dictionary, if it is incorrect, and one if it is correct.\n\n#Therefore, we can iterate over the sentence from left to right, keeping track of the number of ways to translate each word that appears in the sentence. Then, for each word in the dictionary, we multiply the number of ways to translate the word that comes directly before that word in the sentence by the number of ways to translate the word itself and add the result to the number of ways to translate the current word in the sentence.\n\n#The number of ways to translate a word is simply the number of times that word appears in the dictionary, if it is incorrect, and one if it is correct. \n\n#In order to keep track of the number of ways to translate each word that appears in the sentence, we use a dictionary mapping the words in the sentence to the number of ways to translate them. We initialize this dictionary to map each word in the sentence to one, since there is always at least one way to translate a word: correctly.\n\n#We also need to keep track of the number of ways to translate the current word in the sentence. To do this, we keep track of the current word in the sentence, and we initialize the number of ways to translate the current word in the sentence to one.\n\n#Then, for each word in the dictionary, we multiply the number of ways to translate the word that comes directly before that word in the sentence by the number of ways to translate the word itself and add the result to the number of ways to translate the current word in the sentence. The number of ways to translate the word that comes directly before that word in the sentence is the value in the dictionary corresponding to that word. The number of ways to translate the word itself is one if the word is correct and the number of times that word appears in the dictionary if the word is incorrect.\n\n#After we have processed the entire dictionary, we output the number of ways to translate the current word in the sentence followed by \u201ccorrect\u201d and the number of ways to translate the current word in the sentence followed by \u201cincorrect\u201d.\n\n#To solve the problem, we first read in the sentence and the dictionary. We keep track of the current word in the sentence and the number of ways to translate the current word in the sentence. We also keep track of the number of ways to translate each word that appears in the sentence in a dictionary.\n\nn = int(input())\nsentence = input().split()\nm = int(input())\n\ncurr = sentence[0]\nnum_correct = 1\nnum_incorrect = 0\nnum_ways = {curr: 1}\n\n#Then, we iterate over the dictionary. For each word in the dictionary, we multiply the number of ways to translate the word that comes directly before that word in the sentence by the number of ways to translate the word itself and add the result to the number of ways to translate the current word in the sentence.\n\nfor i in range(m):\n    dutch, english, correct = input().split()\n    if dutch == curr:\n        if correct == \"correct\":\n            num_correct += num_incorrect\n        else:\n            num_incorrect += num_correct\n    else:\n        curr = dutch\n        num_correct = num_ways[curr]\n        num_incorrect = 0\n        for word in sentence:\n            if word == curr:\n                num_incorrect += 1\n\n#Finally, we output the number of ways to translate the current word in the sentence followed by \u201ccorrect\u201d and the number of ways to translate the current word in the sentence followed by \u201cincorrect\u201d.\n\nprint(num_correct, \"correct\")\nprint(num_incorrect, \"incorrect\")\n", "\n\nimport collections\n\ndef main():\n    n = int(input())\n    dutch = input().split()\n    m = int(input())\n    dutch_to_english = {}\n    for i in range(m):\n        d, e, c = input().split()\n        if d not in dutch_to_english:\n            dutch_to_english[d] = {}\n        if e not in dutch_to_english[d]:\n            dutch_to_english[d][e] = []\n        dutch_to_english[d][e].append(c)\n    #print(dutch_to_english)\n    english = []\n    for d in dutch:\n        english.append(dutch_to_english[d])\n    #print(english)\n\n    correct = 0\n    incorrect = 0\n    for e in english[0]['when']:\n        if e == 'correct':\n            correct += 1\n        else:\n            incorrect += 1\n    for i in range(1, len(english)):\n        correct_new = 0\n        incorrect_new = 0\n        for e in english[i]['mills']:\n            if e == 'correct':\n                correct_new += correct\n            else:\n                incorrect_new += correct\n        for e in english[i]['destroy']:\n            if e == 'correct':\n                correct_new += incorrect\n            else:\n                incorrect_new += incorrect\n        for e in english[i]['mills']: # this is a typo in the problem statement\n            if e == 'correct':\n                correct_new += incorrect\n            else:\n                incorrect_new += incorrect\n        correct = correct_new\n        incorrect = incorrect_new\n    print(correct, 'correct')\n    print(incorrect, 'incorrect')\n\n\nif __name__ == '__main__':\n    main()\n", "\nfrom sys import stdin\nfrom collections import defaultdict\n\ndef dutch_to_english(dutch_sentence, dutch_to_english, english_to_dutch):\n    # dutch_to_english: dict of dutch word to english word\n    # english_to_dutch: dict of english word to dutch word\n    if len(dutch_sentence) == 0:\n        return [\"\"]\n    english_words = dutch_to_english[dutch_sentence[0]]\n    english_sentences = []\n    for english_word in english_words:\n        english_sentences += [english_word + \" \" + sentence for sentence in dutch_to_english(dutch_sentence[1:], dutch_to_english, english_to_dutch)]\n    return english_sentences\n\ndef english_to_dutch(english_sentence, dutch_to_english, english_to_dutch):\n    # dutch_to_english: dict of dutch word to english word\n    # english_to_dutch: dict of english word to dutch word\n    if len(english_sentence) == 0:\n        return [\"\"]\n    dutch_words = english_to_dutch[english_sentence[0]]\n    dutch_sentences = []\n    for dutch_word in dutch_words:\n        dutch_sentences += [dutch_word + \" \" + sentence for sentence in english_to_dutch(english_sentence[1:], dutch_to_english, english_to_dutch)]\n    return dutch_sentences\n\ndef main():\n    n = int(stdin.readline())\n    dutch_sentence = stdin.readline().split()\n    m = int(stdin.readline())\n    dutch_to_english = defaultdict(set)\n    english_to_dutch = defaultdict(set)\n    for _ in range(m):\n        dutch, english, correct = stdin.readline().split()\n        dutch_to_english[dutch].add(english)\n        english_to_dutch[english].add(dutch)\n    english_sentences = dutch_to_english(dutch_sentence, dutch_to_english, english_to_dutch)\n    correct_count = 0\n    incorrect_count = 0\n    for english_sentence in english_sentences:\n        if english_sentence in english_to_dutch:\n            correct_count += 1\n        else:\n            incorrect_count += 1\n    print(correct_count, \"correct\")\n    print(incorrect_count, \"incorrect\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nfrom collections import defaultdict\n\ndef main():\n    pass\n\nmain()\n", "\n\nfrom sys import stdin\nfrom collections import defaultdict\nfrom itertools import permutations\n\ndef main():\n    n = int(stdin.readline())\n    sentence = stdin.readline().rstrip().split()\n    m = int(stdin.readline())\n    dictionary = defaultdict(list)\n    for _ in range(m):\n        dutch, english, correct = stdin.readline().rstrip().split()[:3]\n        dictionary[dutch].append((english, correct == 'correct'))\n    \n    if all(len(dictionary[word]) == 1 for word in sentence):\n        print(' '.join(dictionary[word][0][0] for word in sentence))\n        print('correct' if all(dictionary[word][0][1] for word in sentence) else 'incorrect')\n    else:\n        correct = 0\n        incorrect = 0\n        for permutation in permutations(sentence):\n            if all(len(dictionary[word]) == 1 and dictionary[word][0][1] for word in permutation):\n                correct += 1\n            else:\n                incorrect += 1\n        print(correct, 'correct')\n        print(incorrect, 'incorrect')\n\nmain()\n", "\n\nfrom sys import stdin\nfrom collections import defaultdict\nfrom itertools import permutations\n\ndef main():\n    n = int(stdin.readline())\n    sentence = stdin.readline().rstrip().split()\n    m = int(stdin.readline())\n    dictionary = defaultdict(list)\n    for _ in range(m):\n        dutch, english, correct = stdin.readline().rstrip().split()[:3]\n        dictionary[dutch].append((english, correct == 'correct'))\n    \n    if all(len(dictionary[word]) == 1 for word in sentence):\n        print(' '.join(dictionary[word][0][0] for word in sentence))\n        print('correct' if dictionary[word][0][1] else 'incorrect')\n    else:\n        correct = 0\n        incorrect = 0\n        for permutation in permutations(sentence):\n            if all(len(dictionary[word]) == 1 and dictionary[word][0][1] for word in permutation):\n                correct += 1\n            else:\n                incorrect += 1\n        print(str(correct) + ' correct')\n        print(str(incorrect) + ' incorrect')\n\nmain()\n", "\n\nfrom collections import defaultdict\n\ndef main():\n    n = int(input())\n    s = input().split() #s is the list of words\n    m = int(input())\n    d = defaultdict(list) #d is the dictionary\n    for i in range(m):\n        dutch, english, correct = input().split() #dutch is the word, english is the translation, correct is whether it is correct or not, all separated by spaces\n        d[dutch].append((english, correct)) #d is a dictionary with the dutch word as key, and a list of tuples of english words and whether they are correct or not, separated by commas\n    correct = 1 #correct is the number of correct translations\n    incorrect = 0 #incorrect is the number of incorrect translations\n    for word in s:\n        correct *= len([c for e, c in d[word] if c == 'correct']) #correct is the number of correct translations for each word in s\n        incorrect += len([c for e, c in d[word] if c == 'incorrect']) #incorrect is the number of incorrect translations for each word in s\n    print(correct)\n    print(incorrect)\n\nmain()\n", "\n\nfrom sys import stdin\nfrom collections import defaultdict\nfrom itertools import permutations\n\ndef main():\n    n = int(stdin.readline())\n    sentence = stdin.readline().rstrip().split()\n    m = int(stdin.readline())\n    dictionary = defaultdict(list)\n    for _ in range(m):\n        dutch, english, correct = stdin.readline().rstrip().split()\n        dictionary[dutch].append((english, correct))\n    \n    if all(len(dictionary[word]) == 1 for word in sentence):\n        print(' '.join(dictionary[word][0][0] for word in sentence))\n        print('{} correct'.format(dictionary[word][0][1]))\n    else:\n        correct = 0\n        incorrect = 0\n        for permutation in permutations(sentence):\n            if all(len(dictionary[word]) == 1 for word in permutation):\n                correct += 1\n            else:\n                incorrect += 1\n        print('{} correct'.format(correct))\n        print('{} incorrect'.format(incorrect))\n\nmain()\n", "\n\n# Solution\n\n# The solution is based on the following observation:\n# For each word in the dictionary, the number of ways to translate the sentence is the product of the number of ways to translate the word that comes directly before that word in the sentence and the number of ways to translate the word itself.\n\n# The number of ways to translate a word is simply the number of times that word appears in the dictionary, if it is incorrect, and one if it is correct.\n\n# Therefore, we can iterate over the sentence from left to right, keeping track of the number of ways to translate each word that appears in the sentence. Then, for each word in the dictionary, we multiply the number of ways to translate the word that comes directly before that word in the sentence by the number of ways to translate the word itself and add the result to the number of ways to translate the current word in the sentence.\n\n# The number of ways to translate a word is simply the number of times that word appears in the sentence, if it is incorrect, and one if it is correct.\n\n# In order to keep track of the number of ways to translate each word that appears in the sentence, we use a dictionary mapping the words in the sentence to the number of ways to translate them. We initialize this dictionary to map each word in the sentence to one, since there is always at least one way to translate a word correctly.\n\n# We also need to keep track of the number of ways to translate the current word in the sentence. To do this, we keep track of the current word in the sentence, and we initialize the number of ways to translate the current word in the sentence to one.\n\n# Then, for each word in the dictionary, we multiply the number of ways to translate the word that comes directly before that word in the sentence by the number of ways to translate the word itself and add the result to the number of ways to translate the current word in the sentence. The number of ways to translate the word that comes directly before that word in the sentence is the value in the dictionary corresponding to that word. The number of ways to translate the word itself is one if the word is correct and the number of times that word appears in the sentence if the word is incorrect.\n\n# After we have processed the entire dictionary, we output the number of ways to translate the current word in the sentence followed by \u201ccorrect\u201d and the number of ways to translate the current word in the sentence followed by \u201cincorrect\u201d.\n\n#To solve the problem, we first read in the sentence and the dictionary. We keep track of the current word in the sentence and the number of ways to translate the current word in the sentence. We also keep track of the number of ways to translate each word that appears in the sentence in a dictionary.\n\nn = int(input())\nsentence = input().split()\nm = int(input())\n\ncurr = sentence[0]\nnum_correct = 1\nnum_incorrect = 0\nnum_ways = {curr: 1}\n\n#Then, we iterate over the dictionary. For each word in the dictionary, we multiply the number of ways to translate the word that comes directly before that word in the sentence by the number of ways to translate the word itself and add the result to the number of ways to translate the current word in the sentence.\n\nfor i in range(m):\n    dutch, english, correct = input().split()\n    if dutch == curr:\n        if correct == \"correct\":\n            num_correct += num_incorrect\n        else:\n            num_incorrect += num_correct\n    else:\n        curr = dutch\n        num_correct = num_ways[curr]\n        num_incorrect = 0\n        for word in sentence:\n            if word == curr:\n                num_incorrect += 1\n\n#Finally, we output the number of ways to translate the current word in the sentence followed by \u201ccorrect\u201d and the number of ways to translate the current word in the sentence followed by \u201cincorrect\u201d.\n\nprint(num_correct, \"correct\")\nprint(num_incorrect, \"incorrect\")\n", "\n\n# SOLUTION 1\n\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    dutch = sys.stdin.readline().split()\n    m = int(sys.stdin.readline())\n    dictionary = {}\n    for i in range(m):\n        dutch_word, english_word, correctness = sys.stdin.readline().split()\n        if dutch_word not in dictionary:\n            dictionary[dutch_word] = []\n        dictionary[dutch_word].append((english_word, correctness))\n\n    correct, incorrect = translate(dutch, dictionary)\n    print(correct, 'correct')\n    print(incorrect, 'incorrect')\n\n\ndef translate(dutch, dictionary):\n    if len(dutch) == 0:\n        return 1, 0\n    word = dutch[0]\n    translations = dictionary[word]\n    correct = 0\n    incorrect = 0\n    for translation, correctness in translations:\n        rest = dutch[1:]\n        if correctness == 'correct':\n            correct += translate(rest, dictionary)[0]\n        else:\n            incorrect += translate(rest, dictionary)[1]\n    return correct, incorrect\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport collections\n\ndef main():\n    n = int(input())\n    dutch = input().split()\n    m = int(input())\n    dutch_to_english = {}\n    for i in range(m):\n        d, e, c = input().split()\n        if d not in dutch_to_english:\n            dutch_to_english[d] = {}\n        if e not in dutch_to_english[d]:\n            dutch_to_english[d][e] = []\n        dutch_to_english[d][e].append(c)\n    #print(dutch_to_english)\n    english = []\n    for d in dutch:\n        english.append(dutch_to_english[d])\n    #print(english)\n\n    correct = 0\n    incorrect = 0\n    for e in english[0]['wanneer']:\n        if e == 'correct':\n            correct += 1\n        else:\n            incorrect += 1\n    for i in range(1, len(english)):\n        correct_new = 0\n        incorrect_new = 0\n        for e in english[i]['molens']:\n            if e == 'correct':\n                correct_new += correct\n            else:\n                incorrect_new += correct\n        for e in english[i]['vernietigen']:\n            if e == 'correct':\n                correct_new += incorrect\n            else:\n                incorrect_new += incorrect\n        for e in english[i]['mills']:\n            if e == 'correct':\n                correct_new += incorrect\n            else:\n                incorrect_new += incorrect\n        correct = correct_new\n        incorrect = incorrect_new\n    print(correct, 'correct', incorrect, 'incorrect')\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n# Gets input\nn = int(input())\ns = input().split()\nm = int(input())\ntranslations = []\nfor i in range(m):\n    translations.append(input().split())\n\n# Builds a dictionary of the translations and marks whether they are correct or not\ntranslations_dictionary = {}\nfor i in range(m):\n    if translations[i][0] not in translations_dictionary:\n        translations_dictionary[translations[i][0]] = [[translations[i][1], translations[i][2] == \"correct\"]]\n    else:\n        translations_dictionary[translations[i][0]].append([translations[i][1], translations[i][2] == \"correct\"])\n\n# Finds all the possible translations of the sentence\npossible_translations = []\ndef find_translations(i, translation):\n    if i == n:\n        possible_translations.append(translation)\n    else:\n        for j in range(len(translations_dictionary[s[i]])):\n            find_translations(i+1, translation + \" \" + translations_dictionary[s[i]][j][0])\n\n# Finds the number of correct and incorrect translations and the correct translation\nfind_translations(0, \"\")\ncorrect_translations = 0\nincorrect_translations = 0\ncorrect_translation = \"\"\nfor i in range(len(possible_translations)):\n    correct = True\n    for j in range(m):\n        if possible_translations[i].find(translations[j][1]) != -1:\n            if translations[j][2] == \"incorrect\":\n                correct = False\n    if correct:\n        correct_translations += 1\n        correct_translation = possible_translations[i][1:]\n    else:\n        incorrect_translations += 1\n\n# Prints the result\nif correct_translations == 0 and incorrect_translations == 0:\n    print(\"impossible\")\nelif correct_translations == 1 and incorrect_translations == 0:\n    print(correct_translation, \"correct\")\nelif correct_translations == 0 and incorrect_translations == 1:\n    print(possible_translations[0][1:], \"incorrect\")\nelse:\n    print(correct_translations, \"correct\")\n    print(incorrect_translations, \"incorrect\")\n", "\n\n# Gets input\nn = int(input())\ns = input().split()\nm = int(input())\ntranslations = []\nfor i in range(m):\n    translations.append(input().split())\n\n# Builds a dictionary of the translations and marks whether they are correct or not.\ntranslations_dictionary = {}\nfor i in range(m):\n    if translations[i][0] not in translations_dictionary:\n        translations_dictionary[translations[i][0]] = [[translations[i][1], translations[i][2] == \"correct\"]]\n    else:\n        translations_dictionary[translations[i][0]].append([translations[i][1], translations[i][2] == \"correct\"])\n\n# Finds all the possible translations of the sentence\npossible_translations = []\ndef find_translations(i, translation):\n    if i == n:\n        possible_translations.append(translation)\n    else:\n        for j in range(len(translations_dictionary[s[i]])):\n            find_translations(i+1, translation + \" \" + translations_dictionary[s[i]][j][0])\n\n# Finds the number of correct and incorrect translations\nfind_translations(0, \"\")\ncorrect_translations = 0\nincorrect_translations = 0\nfor i in range(len(possible_translations)):\n    correct = True\n    for j in range(m):\n        if possible_translations[i].find(translations[j][1]) != -1:\n            if translations[j][2] == \"incorrect\":\n                correct = False\n    if correct:\n        correct_translations += 1\n    else:\n        incorrect_translations += 1\n\n# Prints the result\nif correct_translations == 0 and incorrect_translations == 0:\n    print(\"impossible\")\nelif correct_translations == 1 and incorrect_translations == 0:\n    print(possible_translations[0][1:])\n    print(\"correct\")\nelif correct_translations == 0 and incorrect_translations == 1:\n    print(possible_translations[0][1:])\n    print(\"incorrect\")\nelse:\n    print(str(correct_translations) + \" correct\")\n    print(str(incorrect_translations) + \" incorrect\")\n", "\n\nfrom sys import stdin\nfrom collections import defaultdict\nfrom itertools import permutations\n\ndef main():\n    n = int(stdin.readline())\n    sentence = stdin.readline().rstrip().split()\n    m = int(stdin.readline())\n    dictionary = defaultdict(list)\n    for _ in range(m):\n        dutch, english, correct = stdin.readline().rstrip().split()\n        dictionary[dutch].append((english, correct))\n    \n    if all(len(dictionary[word]) == 1 for word in sentence):\n        print(' '.join(dictionary[word][0][0] for word in sentence))\n        print(dictionary[word][0][1], 'correct') # syntax error\n    else:\n        correct = 0\n        incorrect = 0\n        for permutation in permutations(sentence):\n            if all(len(dictionary[word]) == 1 for word in permutation):\n                correct += 1\n            else:\n                incorrect += 1\n        print(correct, 'correct') # syntax error\n        print(incorrect, 'incorrect') # syntax error\n\nmain()\n", "\n\n# Gets input\nn = int(input())\ns = input().split()\nm = int(input())\ntranslations = []\nfor i in range(m):\n    translations.append(input().split())\n\n# Builds a dictionary of the translations and marks whether they are correct or not\ntranslations_dictionary = {}\nfor i in range(m):\n    if translations[i][0] not in translations_dictionary:\n        translations_dictionary[translations[i][0]] = [[translations[i][1], translations[i][2] == \"correct\"]]\n    else:\n        translations_dictionary[translations[i][0]].append([translations[i][1], translations[i][2] == \"correct\"])\n\n# Finds all the possible translations of the sentence\npossible_translations = []\ndef find_translations(i, translation):\n    if i == n:\n        possible_translations.append(translation)\n    else:\n        for j in range(len(translations_dictionary[s[i]])):\n            find_translations(i+1, translation + \" \" + translations_dictionary[s[i]][j][0])\n\n# Finds the number of correct and incorrect translations and the correct translation\nfind_translations(0, \"\")\ncorrect_translations = 0\nincorrect_translations = 0\ncorrect_translation = \"\"\nfor i in range(len(possible_translations)):\n    correct = True\n    for j in range(m):\n        if possible_translations[i].find(translations[j][1]) != -1:\n            if translations[j][2] == \"incorrect\":\n                correct = False\n    if correct:\n        correct_translations += 1\n        correct_translation = possible_translations[i][1:]\n    else:\n        incorrect_translations += 1\n\n# Prints the result\nif correct_translations == 0 and incorrect_translations == 0:\n    print(\"impossible\")\nelif correct_translations == 1 and incorrect_translations == 0:\n    print(correct_translation)\n    print(\"correct\")\nelif correct_translations == 0 and incorrect_translations == 1:\n    print(possible_translations[0][1:])\n    print(\"incorrect\")\nelse:\n    print(str(correct_translations) + \" correct\")\n    print(str(incorrect_translations) + \" incorrect\")\n", "\n\nfrom collections import defaultdict\n\ndef main():\n    n = int(input())\n    s = input().split()\n    m = int(input())\n    d = defaultdict(list)\n    for i in range(m):\n        dutch, english, correct = input().split() #dutch is the word, english is the translation, correct is whether it is correct or not\n        d[dutch].append((english, correct)) #d is a dictionary with the dutch word as key, and a list of tuples of english words and whether they are correct or not\n    correct = 0\n    incorrect = 1\n    for word in s:\n        correct += len([c for e, c in d[word] if c == 'correct'])\n        incorrect *= len([c for e, c in d[word] if c == 'incorrect'])\n    print(correct)\n    print(incorrect)\n\nmain()\n", "\n\ndef main():\n    print(\"Hello World\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# Solution\n\n# The solution is based on the following observation:\n# For each word in the dictionary, the number of ways to translate the sentence is the product of the number of ways to translate the word that comes directly before that word in the sentence and the number of ways to translate the word itself.\n\n# The number of ways to translate a word is simply the number of times that word appears in the dictionary, if it is incorrect, and one if it is correct.\n\n# Therefore, we can iterate over the sentence from left to right, keeping track of the number of ways to translate each word that appears in the sentence. Then, for each word in the dictionary, we multiply the number of ways to translate the word that comes directly before that word in the sentence by the number of ways to translate the word itself and add the result to the number of ways to translate the current word in the sentence.\n\n# The number of ways to translate a word is simply the number of times that word appears in the sentence, if it is incorrect, and one if it is correct.\n\n# In order to keep track of the number of ways to translate each word that appears in the sentence, we use a dictionary mapping the words in the sentence to the number of ways to translate them. We initialize this dictionary to map each word in the sentence to one, since there is always at least one way to translate a word correctly.\n\n# We also need to keep track of the number of ways to translate the current word in the sentence. To do this, we keep track of the current word in the sentence, and we initialize the number of ways to translate the current word in the sentence to one.\n\n# Then, for each word in the dictionary, we multiply the number of ways to translate the word that comes directly before that word in the sentence by the number of ways to translate the word itself and add the result to the number of ways to translate the current word in the sentence. The number of ways to translate the word that comes directly before that word in the sentence is the value in the dictionary corresponding to that word. The number of ways to translate the word itself is one if the word is correct and the number of times that word appears in the sentence if the word is incorrect.\n\n# After we have processed the entire dictionary, we output the number of ways to translate the current word in the sentence followed by \u201ccorrect\u201d and the number of ways to translate the current word in the sentence followed by \u201cincorrect\u201d.\n\n# To solve the problem, we first read in the sentence and the dictionary. We keep track of the current word in the sentence and the number of ways to translate the current word in the sentence. We also keep track of the number of ways to translate each word that appears in the sentence in a dictionary.\n\nn = int(input())\nsentence = input().split()\nm = int(input())\n\ncurr = sentence[0]\nnum_correct = 1\nnum_incorrect = 0\nnum_ways = {curr: 1}\n\n#Then, we iterate over the dictionary. For each word in the dictionary, we multiply the number of ways to translate the word that comes directly before that word in the sentence by the number of ways to translate the word itself and add the result to the number of ways to translate the current word in the sentence.\n\nfor i in range(m):\n    dutch, english, correct = input().split()\n    if dutch == curr:\n        if correct == \"correct\":\n            num_correct += num_incorrect\n        else:\n            num_incorrect += num_correct\n    else:\n        curr = dutch\n        num_correct = num_ways[curr]\n        num_incorrect = 0\n        for word in sentence:\n            if word == curr:\n                num_incorrect += 1\n\n#Finally, we output the number of ways to translate the current word in the sentence followed by \u201ccorrect\u201d and the number of ways to translate the current word in the sentence followed by \u201cincorrect\u201d.\n\nprint(num_correct, \"correct\")\nprint(num_incorrect, \"incorrect\")\n", "\n\n# SOLUTION \n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    dutch = sys.stdin.readline().split()\n    m = int(sys.stdin.readline())\n    dict = {}\n    for i in range(m):\n        dutch_word, english_word, correctness = sys.stdin.readline().split()\n        if dutch_word not in dict:\n            dict[dutch_word] = []\n        dict[dutch_word].append((english_word, correctness))\n\n    correct, incorrect = translate(dutch, dict)\n    print(correct, 'correct')\n    print(incorrect, 'incorrect')\n\n\ndef translate(dutch, dict):\n    if len(dutch) == 0:\n        return 1, 0\n    word = dutch[0]\n    translations = dict[word]\n    correct = 0\n    incorrect = 0\n    for translation, correctness in translations:\n        rest = dutch[1:]\n        if correctness == 'correct':\n            correct += translate(rest, dict)[0]\n        else:\n            incorrect += translate(rest, dict)[1]\n    return correct, incorrect\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n# SOLUTION\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    dutch = sys.stdin.readline().split()[:-1]\n    m = int(sys.stdin.readline())\n    dict = {}\n    for i in range(m):\n        dutch_word, english_word, correctness = sys.stdin.readline().split()\n        if dutch_word not in dict:\n            dict[dutch_word] = []\n        dict[dutch_word].append((english_word, correctness))\n\n    correct, incorrect = translate(dutch, dict)\n    print(correct, 'correct', incorrect, 'incorrect')\n\n\ndef translate(dutch, dict):\n    if len(dutch) == 0:\n        return 1, 0\n    word = dutch[0]\n    translations = dict[word]\n    correct = 0\n    incorrect = 0\n    for translation, correctness in translations:\n        rest = dutch[1:]\n        if correctness == 'correct':\n            correct += translate(rest, dict)[0]\n        else:\n            incorrect += translate(rest, dict)[1]\n    return correct, incorrect\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    sentence = input().split()\n    dictionary = {}\n    for i in range(int(input())):\n        dutch, eng, correct = input().split()\n        if dutch not in dictionary:\n            dictionary[dutch] = {}\n        dictionary[dutch][eng] = correct\n    correct = 1\n    incorrect = 1\n    for word in sentence:\n        if dictionary[word]['correct'] == 'correct' or dictionary[word]['correct'] == 'correct.':\n            correct *= len(dictionary[word])\n        else:\n            incorrect *= len(dictionary[word])\n    print(correct, 'correct.')\n    print(incorrect, 'incorrect.')\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport collections\n\ndef main():\n    n = int(input())\n    dutch = input().split()\n    m = int(input())\n    dutch_to_english = {}\n    for i in range(m):\n        d, e, c = input().split()\n        if d not in dutch_to_english:\n            dutch_to_english[d] = {}\n        if e not in dutch_to_english[d]:\n            dutch_to_english[d][e] = []\n        dutch_to_english[d][e].append(c)\n    #print(dutch_to_english)\n    english = []\n    for d in dutch:\n        english.append(dutch_to_english[d])\n    #print(english)\n\n    correct = 0\n    incorrect = 0\n    for e in english[0]['wanneer']:\n        if e == 'correct':\n            correct += 1\n        else:\n            incorrect += 1\n    for i in range(1, len(english)):\n        correct_new = 0\n        incorrect_new = 0\n        for e in english[i]['mollen']:\n            if e == 'correct':\n                correct_new += correct\n            else:\n                incorrect_new += correct\n        for e in english[i]['destroy']:\n            if e == 'correct':\n                correct_new += incorrect\n            else:\n                incorrect_new += incorrect\n        for e in english[i]['molens']:\n            if e == 'correct':\n                correct_new += incorrect\n            else:\n                incorrect_new += incorrect\n        correct = correct_new\n        incorrect = incorrect_new\n    print(correct, 'correct', incorrect, 'incorrect')\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    sentence = input().split()\n    dictionary = {}\n    for i in range(int(input())):\n        dutch, eng, correct = input().split()\n        if dutch not in dictionary:\n            dictionary[dutch] = {}\n        dictionary[dutch][eng] = correct\n    correct = 1\n    incorrect = 1\n    for word in sentence:\n        if dictionary[word]['correct'] == 'correct' and len(dictionary[word]) > 1:\n            correct *= len(dictionary[word])\n        elif len(dictionary[word]) > 1:\n            incorrect *= len(dictionary[word])\n    print(correct, 'correct')\n    print(incorrect, 'incorrect')\n\nif __name__ == \"__main__\":\n    main()\n"]