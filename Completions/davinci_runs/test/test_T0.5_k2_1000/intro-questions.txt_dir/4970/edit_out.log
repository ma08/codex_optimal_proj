2022-04-12 04:12:07.276027 num operations 2
2022-04-12 04:12:07.276046 size on input set 1
2022-04-12 04:12:11.530469 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom collections import Counter\n\nn = int(input())\n\ncourse_combinations = []\n\nfor i in range(n):\n    courses = list(map(int, input().split(\" \")))\n    course_combinations.append(tuple(sorted(courses)))\n\nc = Counter(course_combinations)\nmost_common = c.most_common(1)\n\nprint(most_common[0][1])\n"
    }
  ],
  "created": 1649751127,
  "object": "edit"
}
2022-04-12 04:12:11.530601 fix spelling mistakes 2 ['\n', '\n\nfrom collections import Counter\n\nn = int(input())\n\ncourse_combinations = []\n\nfor i in range(n):\n    courses = list(map(int, input().split(" ")))\n    course_combinations.append(tuple(sorted(courses)))\n\nc = Counter(course_combinations)\nmost_common = c.most_common(1)\n\nprint(most_common[0][1])\n']
2022-04-12 04:12:11.530616 size on output set 2
2022-04-12 04:12:11.530620 size on input set 2
2022-04-12 04:12:14.173523 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom collections import Counter\nn = int(input())\ncourse_combinations = []\n\nfor i in range(n):\n    courses = list(map(int, input().split(\" \")))\n    course_combinations.append(tuple(sorted(courses)))\nc = Counter(course_combinations)\nmost_common = c.most_common(1)\nprint(most_common[0][1])\n"
    },
    {
      "index": 1,
      "text": "\nfrom collections import Counter\n\nn = int(input())\n\ncourse_combinations = []\n\nfor i in range(n):\n    courses = list(map(int, input().split(\" \")))\n    course_combinations.append(tuple(sorted(courses)))\n\nc = Counter(course_combinations)\nmost_common = c.most_common(1)\n\nprint(most_common[0][1])\n"
    }
  ],
  "created": 1649751131,
  "object": "edit"
}
2022-04-12 04:12:14.173782 fix syntax errors 2 ['\nfrom collections import Counter\nn = int(input())\ncourse_combinations = []\n\nfor i in range(n):\n    courses = list(map(int, input().split(" ")))\n    course_combinations.append(tuple(sorted(courses)))\nc = Counter(course_combinations)\nmost_common = c.most_common(1)\nprint(most_common[0][1])\n', '\nfrom collections import Counter\n\nn = int(input())\n\ncourse_combinations = []\n\nfor i in range(n):\n    courses = list(map(int, input().split(" ")))\n    course_combinations.append(tuple(sorted(courses)))\n\nc = Counter(course_combinations)\nmost_common = c.most_common(1)\n\nprint(most_common[0][1])\n']
2022-04-12 04:12:50.830853 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/bin/bash\n\n# This script will check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a\n"
    },
    {
      "index": 1,
      "text": "#!/bin/bash\n\n# This script creates a new user on the local system.\n# You must supply a username as an argument to the script.\n# Optionally, you can also provide a comment for the account as an argument.\n# A password will be automatically generated for the account.\n# The username, password, and host for the account will be displayed.\n\n# Make sure the script is being executed with superuser privileges.\nif [[ \"${UID}\" -ne 0 ]]\nthen\n   echo 'Please run with sudo or as root.'\n   exit 1\nfi\n\n# If the user doesn't supply at least one argument, then give them help.\nif [[ \"${#}\" -lt 1 ]]\nthen\n   echo \"Usage: ${0} USER_NAME [COMMENT]...\"\n   echo 'Create an account on the local system with the name of USER_NAME and a comments field of COMMENT.'\n   exit 1\nfi\n\n# The first parameter is the user name.\nUSER_NAME=\"${1}\"\n\n# The rest of the parameters are for the account comments.\nshift\nCOMMENT=\"${@}\"\n\n# Generate a password.\nPASSWORD=$(date +%s%N | sha256sum | head -c48)\n\n# Create the user with the password.\nuseradd -c \"${COMMENT}\" -m ${USER_NAME}\n\n# Check to see if the useradd command succeeded.\n# We don't want to tell the user that an account was created when it hasn't been.\nif [[ \"${?}\" -ne 0 ]]\nthen\n   echo 'The account could not be created.'\n   exit 1\nfi\n\n# Set the password.\necho ${PASSWORD} | passwd --stdin ${USER_NAME}\n\n# Check to see if the passwd command succeeded.\nif [[ \"${?}\" -ne 0 ]]\nthen\n   echo 'The password for the account could not be set.'\n   exit 1\nfi\n\n# Force password change on first login.\npasswd -e ${USER_NAME}\n\n# Display the username, password, and the host where the user was created.\necho\necho 'username:'\necho \"${USER_NAME}\"\necho\necho 'password:'\necho \"${PASSWORD}\"\necho\necho 'host:'\necho \"${HOSTNAME}\"\nexit 0\n"
    }
  ],
  "created": 1649751134,
  "object": "edit"
}
2022-04-12 04:12:50.831138 fix syntax errors 2 ['#!/bin/bash\n\n# This script will check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a message\n# depending on whether it exists or not.\n\n# This script will also check for the existence of a file and then print a\n', '#!/bin/bash\n\n# This script creates a new user on the local system.\n# You must supply a username as an argument to the script.\n# Optionally, you can also provide a comment for the account as an argument.\n# A password will be automatically generated for the account.\n# The username, password, and host for the account will be displayed.\n\n# Make sure the script is being executed with superuser privileges.\nif [[ "${UID}" -ne 0 ]]\nthen\n   echo \'Please run with sudo or as root.\'\n   exit 1\nfi\n\n# If the user doesn\'t supply at least one argument, then give them help.\nif [[ "${#}" -lt 1 ]]\nthen\n   echo "Usage: ${0} USER_NAME [COMMENT]..."\n   echo \'Create an account on the local system with the name of USER_NAME and a comments field of COMMENT.\'\n   exit 1\nfi\n\n# The first parameter is the user name.\nUSER_NAME="${1}"\n\n# The rest of the parameters are for the account comments.\nshift\nCOMMENT="${@}"\n\n# Generate a password.\nPASSWORD=$(date +%s%N | sha256sum | head -c48)\n\n# Create the user with the password.\nuseradd -c "${COMMENT}" -m ${USER_NAME}\n\n# Check to see if the useradd command succeeded.\n# We don\'t want to tell the user that an account was created when it hasn\'t been.\nif [[ "${?}" -ne 0 ]]\nthen\n   echo \'The account could not be created.\'\n   exit 1\nfi\n\n# Set the password.\necho ${PASSWORD} | passwd --stdin ${USER_NAME}\n\n# Check to see if the passwd command succeeded.\nif [[ "${?}" -ne 0 ]]\nthen\n   echo \'The password for the account could not be set.\'\n   exit 1\nfi\n\n# Force password change on first login.\npasswd -e ${USER_NAME}\n\n# Display the username, password, and the host where the user was created.\necho\necho \'username:\'\necho "${USER_NAME}"\necho\necho \'password:\'\necho "${PASSWORD}"\necho\necho \'host:\'\necho "${HOSTNAME}"\nexit 0\n']
2022-04-12 04:12:50.831241 size on output set 4
2022-04-12 04:12:50.831258 num operations 2
2022-04-12 04:12:50.831265 size on input set 1
2022-04-12 04:12:53.126871 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "# coding=utf-8\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    courses = {}\n    for i in range(n):\n        course_list = [int(x) for x in sys.stdin.readline().strip().split()]\n        course_list.sort()\n        course_list = tuple(course_list)\n        if course_list in courses:\n            courses[course_list] += 1\n        else:\n            courses[course_list] = 1\n    max_count = max(courses.values())\n    print(sum([courses[x] for x in courses if courses[x] == max_count]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    courses = {}\n    for i in range(n):\n        course_list = [int(x) for x in sys.stdin.readline().strip().split()]\n        course_list.sort()\n        course_list = tuple(course_list)\n        if course_list in courses:\n            courses[course_list] += 1\n        else:\n            courses[course_list] = 1\n    max_count = max(courses.values())\n    print(sum([courses[x] for x in courses if courses[x] == max_count]))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649751171,
  "object": "edit"
}
2022-04-12 04:12:53.127175 fix spelling mistakes 2 ["# coding=utf-8\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    courses = {}\n    for i in range(n):\n        course_list = [int(x) for x in sys.stdin.readline().strip().split()]\n        course_list.sort()\n        course_list = tuple(course_list)\n        if course_list in courses:\n            courses[course_list] += 1\n        else:\n            courses[course_list] = 1\n    max_count = max(courses.values())\n    print(sum([courses[x] for x in courses if courses[x] == max_count]))\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    courses = {}\n    for i in range(n):\n        course_list = [int(x) for x in sys.stdin.readline().strip().split()]\n        course_list.sort()\n        course_list = tuple(course_list)\n        if course_list in courses:\n            courses[course_list] += 1\n        else:\n            courses[course_list] = 1\n    max_count = max(courses.values())\n    print(sum([courses[x] for x in courses if courses[x] == max_count]))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 04:12:53.127210 size on output set 2
2022-04-12 04:12:53.127217 size on input set 2
2022-04-12 04:12:56.362918 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# coding=utf-8\n\nimport sys\n\ndef main():\n    n = int(input().strip())\n    courses = {}\n    for i in range(n):\n        course_list = [int(x) for x in input().strip().split()]\n        course_list.sort()\n        course_list = tuple(course_list)\n        if course_list in courses:\n            courses[course_list] += 1\n        else:\n            courses[course_list] = 1\n    max_count = max(courses.values())\n    print(sum([courses[x] for x in courses if courses[x] == max_count]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "# coding=utf-8\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    courses = {}\n    for i in range(n):\n        course_list = [int(x) for x in sys.stdin.readline().strip().split()][1:]\n        course_list.sort()\n        course_list = tuple(course_list)\n        if course_list in courses:\n            courses[course_list] += 1\n        else:\n            courses[course_list] = 1\n    max_count = max(courses.values())\n    print(sum([courses[x] for x in courses if courses[x] == max_count]))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649751173,
  "object": "edit"
}
2022-04-12 04:12:56.363278 fix syntax errors 2 ["# coding=utf-8\n\nimport sys\n\ndef main():\n    n = int(input().strip())\n    courses = {}\n    for i in range(n):\n        course_list = [int(x) for x in input().strip().split()]\n        course_list.sort()\n        course_list = tuple(course_list)\n        if course_list in courses:\n            courses[course_list] += 1\n        else:\n            courses[course_list] = 1\n    max_count = max(courses.values())\n    print(sum([courses[x] for x in courses if courses[x] == max_count]))\n\nif __name__ == '__main__':\n    main()\n", "# coding=utf-8\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    courses = {}\n    for i in range(n):\n        course_list = [int(x) for x in sys.stdin.readline().strip().split()][1:]\n        course_list.sort()\n        course_list = tuple(course_list)\n        if course_list in courses:\n            courses[course_list] += 1\n        else:\n            courses[course_list] = 1\n    max_count = max(courses.values())\n    print(sum([courses[x] for x in courses if courses[x] == max_count]))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 04:13:02.760721 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    courses = {}\n    for i in range(n):\n        course_list = tuple(sorted([int(x) for x in sys.stdin.readline().strip().split()]))\n        if course_list in courses.keys():\n            courses[course_list] = courses[course_list] + 1\n        else:\n            courses[course_list] = 1\n    max_count = max(courses.values())\n    print(sum([courses[x] for x in courses if courses[x] == max_count]))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649751176,
  "object": "edit"
}
2022-04-12 04:13:02.760931 fix syntax errors 2 ["#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    courses = {}\n    for i in range(n):\n        course_list = tuple(sorted([int(x) for x in sys.stdin.readline().strip().split()]))\n        if course_list in courses.keys():\n            courses[course_list] = courses[course_list] + 1\n        else:\n            courses[course_list] = 1\n    max_count = max(courses.values())\n    print(sum([courses[x] for x in courses if courses[x] == max_count]))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 04:13:02.761062 size on output set 4
2022-04-12 04:13:02.761082 num operations 2
2022-04-12 04:13:02.761088 size on input set 1
2022-04-12 04:13:05.642001 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    freshman = int(sys.stdin.readline().strip())\n    course_counts = {}\n    for i in range(freshman):\n        course_combination = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        course_counts[course_combination] = course_counts.get(course_combination, 0) + 1\n    print max(course_counts.values())\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    frosh = int(sys.stdin.readline().strip())\n    course_counts = {}\n    for i in range(frosh):\n        course_combination = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        course_counts[course_combination] = course_counts.get(course_combination, 0) + 1\n    print max(course_counts.values())\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649751182,
  "object": "edit"
}
2022-04-12 04:13:05.642123 fix spelling mistakes 2 ["\n\nimport sys\n\ndef main():\n    freshman = int(sys.stdin.readline().strip())\n    course_counts = {}\n    for i in range(freshman):\n        course_combination = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        course_counts[course_combination] = course_counts.get(course_combination, 0) + 1\n    print max(course_counts.values())\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    frosh = int(sys.stdin.readline().strip())\n    course_counts = {}\n    for i in range(frosh):\n        course_combination = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        course_counts[course_combination] = course_counts.get(course_combination, 0) + 1\n    print max(course_counts.values())\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 04:13:05.642212 size on output set 2
2022-04-12 04:13:05.642218 size on input set 2
2022-04-12 04:13:09.166876 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    freshman = int(sys.stdin.readline().strip())\n    course_counts = {}\n    for i in range(freshman):\n        course_combination = tuple(sorted(map(int, sys.stdin.readline().strip().split()))\n        course_counts[course_combination] = course_counts.get(course_combination, 0) + 1\n    print(max(course_counts.values()))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    freshman = int(sys.stdin.readline().strip())\n    course_counts = {}\n    for i in range(freshman):\n        course_combination = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        course_counts[course_combination] = course_counts.get(course_combination, 0) + 1\n    print(max(course_counts.values()))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649751185,
  "object": "edit"
}
2022-04-12 04:13:09.167137 fix syntax errors 2 ["\nimport sys\n\ndef main():\n    freshman = int(sys.stdin.readline().strip())\n    course_counts = {}\n    for i in range(freshman):\n        course_combination = tuple(sorted(map(int, sys.stdin.readline().strip().split()))\n        course_counts[course_combination] = course_counts.get(course_combination, 0) + 1\n    print(max(course_counts.values()))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    freshman = int(sys.stdin.readline().strip())\n    course_counts = {}\n    for i in range(freshman):\n        course_combination = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        course_counts[course_combination] = course_counts.get(course_combination, 0) + 1\n    print(max(course_counts.values()))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 04:13:11.961512 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    frosh = int(sys.stdin.readline().strip())\n    course_counts = {}\n    for i in range(frosh):\n        course_combination = tuple(sorted(map(int, sys.stdin.readline().split())))\n        course_counts[course_combination] = course_counts.get(course_combination, 0) + 1\n    print max(course_counts.values())\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    frosh = int(sys.stdin.readline().strip())\n    course_counts = {}\n    for i in range(frosh):\n        course_combination = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        course_counts[course_combination] = course_counts.get(course_combination, 0) + 1\n    print(max(course_counts.values()))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649751189,
  "object": "edit"
}
2022-04-12 04:13:11.961632 fix syntax errors 2 ["\nimport sys\n\ndef main():\n    frosh = int(sys.stdin.readline().strip())\n    course_counts = {}\n    for i in range(frosh):\n        course_combination = tuple(sorted(map(int, sys.stdin.readline().split())))\n        course_counts[course_combination] = course_counts.get(course_combination, 0) + 1\n    print max(course_counts.values())\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    frosh = int(sys.stdin.readline().strip())\n    course_counts = {}\n    for i in range(frosh):\n        course_combination = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        course_counts[course_combination] = course_counts.get(course_combination, 0) + 1\n    print(max(course_counts.values()))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 04:13:11.961646 size on output set 4
2022-04-12 04:13:11.961652 num operations 2
2022-04-12 04:13:11.961655 size on input set 1
2022-04-12 04:13:14.926935 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    freshman = int(sys.stdin.readline().strip())\n    classes = defaultdict(lambda: 0)\n    for _ in range(freshman):\n        courses = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        classes[courses] += 1\n    print(max(classes.values()))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    freshmen = int(sys.stdin.readline().strip())\n    classes = defaultdict(lambda: 0)\n    for _ in range(freshmen):\n        courses = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        classes[courses] += 1\n    print(max(classes.values()))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649751192,
  "object": "edit"
}
2022-04-12 04:13:14.927195 fix spelling mistakes 2 ['\n\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    freshman = int(sys.stdin.readline().strip())\n    classes = defaultdict(lambda: 0)\n    for _ in range(freshman):\n        courses = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        classes[courses] += 1\n    print(max(classes.values()))\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    freshmen = int(sys.stdin.readline().strip())\n    classes = defaultdict(lambda: 0)\n    for _ in range(freshmen):\n        courses = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        classes[courses] += 1\n    print(max(classes.values()))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 04:13:14.927218 size on output set 2
2022-04-12 04:13:14.927225 size on input set 2
2022-04-12 04:13:18.286598 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    freshmen = int(input().strip())\n    classes = defaultdict(lambda: 0)\n    for _ in range(freshmen):\n        courses = tuple(sorted(map(int, input().strip().split())))\n        classes[courses] += 1\n    print(max(classes.values()))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\nfrom collections import defaultdict\n\ndef main():\n    freshmen = int(sys.stdin.readline().strip())\n    classes = defaultdict(lambda: 0)\n    for _ in range(freshmen):\n        courses = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        classes[courses] += 1\n    print(max(classes.values()))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649751195,
  "object": "edit"
}
2022-04-12 04:13:18.286891 fix syntax errors 2 ['\n\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    freshmen = int(input().strip())\n    classes = defaultdict(lambda: 0)\n    for _ in range(freshmen):\n        courses = tuple(sorted(map(int, input().strip().split())))\n        classes[courses] += 1\n    print(max(classes.values()))\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\nfrom collections import defaultdict\n\ndef main():\n    freshmen = int(sys.stdin.readline().strip())\n    classes = defaultdict(lambda: 0)\n    for _ in range(freshmen):\n        courses = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        classes[courses] += 1\n    print(max(classes.values()))\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 04:13:21.837648 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    freshman = int(sys.stdin.readline().strip())\n    classes = defaultdict(lambda: 0)\n    for _ in range(freshman):\n        courses = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        classes[courses] += 1\n    print(max(classes.values()))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649751198,
  "object": "edit"
}
2022-04-12 04:13:21.837832 fix syntax errors 2 ['\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    freshman = int(sys.stdin.readline().strip())\n    classes = defaultdict(lambda: 0)\n    for _ in range(freshman):\n        courses = tuple(sorted(map(int, sys.stdin.readline().strip().split())))\n        classes[courses] += 1\n    print(max(classes.values()))\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    pass\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 04:13:21.837862 size on output set 4
2022-04-12 04:13:21.837876 num operations 2
2022-04-12 04:13:21.837884 size on input set 1
2022-04-12 04:13:25.310472 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\nfrosh = int(sys.stdin.readline().strip())\ncombos = []\nfor i in range(frosh):\n    combo = sorted(list(map(int, sys.stdin.readline().strip().split())))\n    combos.append(combo)\n\ncombos = sorted(combos)\n\nmax_popularity = 1\npopularity = 1\nfor i in range(1, frosh):\n    if combos[i] == combos[i-1]:\n        popularity += 1\n    else:\n        popularity = 1\n    if popularity > max_popularity:\n        max_popularity = popularity\n\nprint(max_popularity)\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\nfrosh = int(sys.stdin.readline().strip())\ncombos = []\nfor i in range(frosh):\n    combo = sorted(list(map(int, sys.stdin.readline().strip().split())))\n    combos.append(combo)\n\ncombos = sorted(combos)\n\nmax_popularity = 1\npopularity = 1\nfor i in range(1, frosh):\n    if combos[i] == combos[i-1]:\n        popularity += 1\n    else:\n        popularity = 1\n    if popularity > max_popularity:\n        max_popularity = popularity\n\nprint(max_popularity)\n"
    }
  ],
  "created": 1649751202,
  "object": "edit"
}
2022-04-12 04:13:25.310616 fix spelling mistakes 2 ['\n\nimport sys\n\nfrosh = int(sys.stdin.readline().strip())\ncombos = []\nfor i in range(frosh):\n    combo = sorted(list(map(int, sys.stdin.readline().strip().split())))\n    combos.append(combo)\n\ncombos = sorted(combos)\n\nmax_popularity = 1\npopularity = 1\nfor i in range(1, frosh):\n    if combos[i] == combos[i-1]:\n        popularity += 1\n    else:\n        popularity = 1\n    if popularity > max_popularity:\n        max_popularity = popularity\n\nprint(max_popularity)\n', '\n\nimport sys\n\nfrosh = int(sys.stdin.readline().strip())\ncombos = []\nfor i in range(frosh):\n    combo = sorted(list(map(int, sys.stdin.readline().strip().split())))\n    combos.append(combo)\n\ncombos = sorted(combos)\n\nmax_popularity = 1\npopularity = 1\nfor i in range(1, frosh):\n    if combos[i] == combos[i-1]:\n        popularity += 1\n    else:\n        popularity = 1\n    if popularity > max_popularity:\n        max_popularity = popularity\n\nprint(max_popularity)\n']
2022-04-12 04:13:25.310641 size on output set 1
2022-04-12 04:13:25.310649 size on input set 1
2022-04-12 04:14:01.133503 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#\nimport sys\n\nfrosh = int(sys.stdin.readline().strip())\ncombos = []\nfor i in range(frosh):\n    combo = sorted(list(map(int, sys.stdin.readline().strip().split())))\n    combos.append(combo)\n\ncombos = sorted(combos)\n\nmax_popularity = 1\npopularity = 1\nfor i in range(1, frosh):\n    if combos[i] == combos[i-1]:\n        popularity += 1\n    else:\n        popularity = 1\n    if popularity > max_popularity:\n        max_popularity = popularity\n\nprint(max_popularity)\n"
    },
    {
      "index": 1,
      "text": "\nimport os\nimport sys\n\nfrosh = int(sys.stdin.readline().strip())\ncombos = []\nfor i in range(frosh):\n    combo = sorted(list(map(int, sys.stdin.readline().strip().split())))\n    combos.append(combo)\n\ncombos = sorted(combos)\n\nmax_popularity = 1\npopularity = 1\nfor i in range(1, frosh):\n    if combos[i] == combos[i-1]:\n        popularity += 1\n    else:\n        popularity = 1\n    if popularity > max_popularity:\n        max_popularity = popularity\n\nprint(max_popularity)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    }
  ],
  "created": 1649751205,
  "object": "edit"
}
2022-04-12 04:14:01.133604 fix syntax errors 2 ['\n#\nimport sys\n\nfrosh = int(sys.stdin.readline().strip())\ncombos = []\nfor i in range(frosh):\n    combo = sorted(list(map(int, sys.stdin.readline().strip().split())))\n    combos.append(combo)\n\ncombos = sorted(combos)\n\nmax_popularity = 1\npopularity = 1\nfor i in range(1, frosh):\n    if combos[i] == combos[i-1]:\n        popularity += 1\n    else:\n        popularity = 1\n    if popularity > max_popularity:\n        max_popularity = popularity\n\nprint(max_popularity)\n', '\nimport os\nimport sys\n\nfrosh = int(sys.stdin.readline().strip())\ncombos = []\nfor i in range(frosh):\n    combo = sorted(list(map(int, sys.stdin.readline().strip().split())))\n    combos.append(combo)\n\ncombos = sorted(combos)\n\nmax_popularity = 1\npopularity = 1\nfor i in range(1, frosh):\n    if combos[i] == combos[i-1]:\n        popularity += 1\n    else:\n        popularity = 1\n    if popularity > max_popularity:\n        max_popularity = popularity\n\nprint(max_popularity)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n']
2022-04-12 04:14:01.133677 size on output set 2
2022-04-12 04:14:01.133691 num operations 2
2022-04-12 04:14:01.133694 size on input set 1
2022-04-12 04:14:11.889363 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef get_freshman_courses(n):\n    freshman_courses = []\n    for i in range(n):\n        freshman_courses.append(sys.stdin.readline().strip().split())\n    return freshman_courses\n\ndef get_popularities(freshman_courses):\n    popularities = {}\n    for freshman_course in freshman_courses:\n        freshman_course_tuple = tuple(sorted(freshman_course))\n        if freshman_course_tuple in popularities:\n            popularities[freshman_course_tuple] += 1\n        else:\n            popularities[freshman_course_tuple] = 1\n    return popularities\n\ndef get_most_popularities(popularities):\n    most_popularities = []\n    max_popularity = max(popularities.values())\n    for freshman_course_tuple, popularity in popularities.items():\n        if popularity == max_popularity:\n            most_popularities.append(freshman_course_tuple)\n    return most_popularities\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    freshman_courses = get_freshman_courses(n)\n    popularities = get_popularities(freshman_courses)\n    most_popularities = get_most_popularities(popularities)\n    print(len(most_popularities))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef get_frosh_courses(n):\n    frosh_courses = []\n    for i in range(n):\n        frosh_courses.append(sys.stdin.readline().strip().split())\n    return frosh_courses\n\ndef get_popularities(frosh_courses):\n    popularities = {}\n    for frosh_course in frosh_courses:\n        frosh_course_tuple = tuple(sorted(frosh_course))\n        if frosh_course_tuple in popularities:\n            popularities[frosh_course_tuple] += 1\n        else:\n            popularities[frosh_course_tuple] = 1\n    return popularities\n\ndef get_most_popular_courses(popularities):\n    most_popular_courses = []\n    max_popularity = max(popularities.values())\n    for frosh_course_tuple, popularity in popularities.items():\n        if popularity == max_popularity:\n            most_popular_courses.append(frosh_course_tuple)\n    return most_popular_courses\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    frosh_courses = get_frosh_courses(n)\n    popularities = get_popularities(frosh_courses)\n    most_popular_courses = get_most_popular_courses(popularities)\n    print(len(most_popular_courses))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649751241,
  "object": "edit"
}
2022-04-12 04:14:11.889629 fix spelling mistakes 2 ["\n\nimport sys\n\ndef get_freshman_courses(n):\n    freshman_courses = []\n    for i in range(n):\n        freshman_courses.append(sys.stdin.readline().strip().split())\n    return freshman_courses\n\ndef get_popularities(freshman_courses):\n    popularities = {}\n    for freshman_course in freshman_courses:\n        freshman_course_tuple = tuple(sorted(freshman_course))\n        if freshman_course_tuple in popularities:\n            popularities[freshman_course_tuple] += 1\n        else:\n            popularities[freshman_course_tuple] = 1\n    return popularities\n\ndef get_most_popularities(popularities):\n    most_popularities = []\n    max_popularity = max(popularities.values())\n    for freshman_course_tuple, popularity in popularities.items():\n        if popularity == max_popularity:\n            most_popularities.append(freshman_course_tuple)\n    return most_popularities\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    freshman_courses = get_freshman_courses(n)\n    popularities = get_popularities(freshman_courses)\n    most_popularities = get_most_popularities(popularities)\n    print(len(most_popularities))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef get_frosh_courses(n):\n    frosh_courses = []\n    for i in range(n):\n        frosh_courses.append(sys.stdin.readline().strip().split())\n    return frosh_courses\n\ndef get_popularities(frosh_courses):\n    popularities = {}\n    for frosh_course in frosh_courses:\n        frosh_course_tuple = tuple(sorted(frosh_course))\n        if frosh_course_tuple in popularities:\n            popularities[frosh_course_tuple] += 1\n        else:\n            popularities[frosh_course_tuple] = 1\n    return popularities\n\ndef get_most_popular_courses(popularities):\n    most_popular_courses = []\n    max_popularity = max(popularities.values())\n    for frosh_course_tuple, popularity in popularities.items():\n        if popularity == max_popularity:\n            most_popular_courses.append(frosh_course_tuple)\n    return most_popular_courses\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    frosh_courses = get_frosh_courses(n)\n    popularities = get_popularities(frosh_courses)\n    most_popular_courses = get_most_popular_courses(popularities)\n    print(len(most_popular_courses))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 04:14:11.889658 size on output set 2
2022-04-12 04:14:11.889665 size on input set 2
2022-04-12 04:14:22.933161 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef get_frosh_courses(n, courses):\n    for i in range(n):\n        courses.append(sys.stdin.readline().strip().split())\n    return courses\n\ndef get_popularities(courses):\n    popularities = {}\n    for course in courses:\n        course_tuple = tuple(sorted(course))\n        if course_tuple in popularities:\n            popularities[course_tuple] += 1\n        else:\n            popularities[course_tuple] = 1\n    return popularities\n\ndef get_most_popular_courses(popularities):\n    most_popular_courses = []\n    max_popularity = max(popularities.values())\n    for course_tuple, popularity in popularities.items():\n        if popularity == max_popularity:\n            most_popular_courses.append(course_tuple)\n    return most_popular_courses\n\ndef main():\n    courses = []\n    n = int(sys.stdin.readline().strip())\n    courses = get_frosh_courses(n, courses)\n    popularities = get_popularities(courses)\n    most_popular_courses = get_most_popular_courses(popularities)\n    print(len(most_popular_courses))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef get_frosh_courses(n):\n    frosh_courses = []\n    for i in range(n):\n        frosh_courses.append(sys.stdin.readline().strip().split())\n    return frosh_courses\ndef get_popularities(frosh_courses):\n    popularities = {}\n    for frosh_course in frosh_courses:\n        frosh_course_tuple = tuple(sorted(frosh_course))\n        if frosh_course_tuple in popularities:\n            popularities[frosh_course_tuple] += 1\n        else:\n            popularities[frosh_course_tuple] = 1\n    return popularities\ndef get_most_popular_courses(popularities):\n    most_popular_courses = []\n    max_popularity = max(popularities.values())\n    for frosh_course_tuple, popularity in popularities.items():\n        if popularity == max_popularity:\n            most_popular_courses.append(frosh_course_tuple)\n    return most_popular_courses\ndef main():\n    n = int(sys.stdin.readline().strip())\n    frosh_courses = get_frosh_courses(n)\n    popularities = get_popularities(frosh_courses)\n    most_popular_courses = get_most_popular_courses(popularities)\n    print(len(most_popular_courses))\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649751252,
  "object": "edit"
}
2022-04-12 04:14:22.933264 fix syntax errors 2 ["\nimport sys\n\ndef get_frosh_courses(n, courses):\n    for i in range(n):\n        courses.append(sys.stdin.readline().strip().split())\n    return courses\n\ndef get_popularities(courses):\n    popularities = {}\n    for course in courses:\n        course_tuple = tuple(sorted(course))\n        if course_tuple in popularities:\n            popularities[course_tuple] += 1\n        else:\n            popularities[course_tuple] = 1\n    return popularities\n\ndef get_most_popular_courses(popularities):\n    most_popular_courses = []\n    max_popularity = max(popularities.values())\n    for course_tuple, popularity in popularities.items():\n        if popularity == max_popularity:\n            most_popular_courses.append(course_tuple)\n    return most_popular_courses\n\ndef main():\n    courses = []\n    n = int(sys.stdin.readline().strip())\n    courses = get_frosh_courses(n, courses)\n    popularities = get_popularities(courses)\n    most_popular_courses = get_most_popular_courses(popularities)\n    print(len(most_popular_courses))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef get_frosh_courses(n):\n    frosh_courses = []\n    for i in range(n):\n        frosh_courses.append(sys.stdin.readline().strip().split())\n    return frosh_courses\ndef get_popularities(frosh_courses):\n    popularities = {}\n    for frosh_course in frosh_courses:\n        frosh_course_tuple = tuple(sorted(frosh_course))\n        if frosh_course_tuple in popularities:\n            popularities[frosh_course_tuple] += 1\n        else:\n            popularities[frosh_course_tuple] = 1\n    return popularities\ndef get_most_popular_courses(popularities):\n    most_popular_courses = []\n    max_popularity = max(popularities.values())\n    for frosh_course_tuple, popularity in popularities.items():\n        if popularity == max_popularity:\n            most_popular_courses.append(frosh_course_tuple)\n    return most_popular_courses\ndef main():\n    n = int(sys.stdin.readline().strip())\n    frosh_courses = get_frosh_courses(n)\n    popularities = get_popularities(frosh_courses)\n    most_popular_courses = get_most_popular_courses(popularities)\n    print(len(most_popular_courses))\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 04:14:25.026877 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef get_freshman_courses(n):\n    freshman_courses = []\n    for i in range(n):\n        freshman_courses.append(sys.stdin.readline().strip().split())\n    return freshman_courses\n\ndef get_popularities(freshman_courses):\n    popularities = {}\n    for freshman_course in freshman_courses:\n        freshman_course_tuple = tuple(sorted(freshman_course))\n        if freshman_course_tuple in popularities:\n            popularities[freshman_course_tuple] += 1\n        else:\n            popularities[freshman_course_tuple] = 1\n    return popularities\n\ndef get_most_popularities(popularities):\n    most_popularities = []\n    max_popularity = max(popularities.values())\n    for freshman_course_tuple, popularity in popularities.items():\n        if popularity == max_popularity:\n            most_popularities.append(freshman_course_tuple)\n    return most_popularities\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    freshman_courses = get_freshman_courses(n)\n    popularities = get_popularities(freshman_courses)\n    most_popularities = get_most_popularities(popularities)\n    print(len(most_popularities))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n# This is a comment\n\nimport sys\n\ndef get_freshman_courses(n):\n    freshman_courses = []\n    for i in range(n):\n        freshman_courses.append(sys.stdin.readline().strip().split())\n    return freshman_courses\n\ndef get_popularities(freshman_courses):\n    popularities = {}\n    for freshman_course in freshman_courses:\n        freshman_course_tuple = tuple(sorted(freshman_course))\n        if freshman_course_tuple in popularities:\n            popularities[freshman_course_tuple] += 1\n        else:\n            popularities[freshman_course_tuple] = 1\n    return popularities\n\ndef get_most_popularities(popularities):\n    most_popularities = []\n    max_popularity = max(popularities.values())\n    for freshman_course_tuple, popularity in popularities.items():\n        if popularity == max_popularity:\n            most_popularities.append(freshman_course_tuple)\n    return most_popularities\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    freshman_courses = get_freshman_courses(n)\n    popularities = get_popularities(freshman_courses)\n    most_popularities = get_most_popularities(popularities)\n    print(len(most_popularities))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649751263,
  "object": "edit"
}
2022-04-12 04:14:25.027028 fix syntax errors 2 ["\nimport sys\n\ndef get_freshman_courses(n):\n    freshman_courses = []\n    for i in range(n):\n        freshman_courses.append(sys.stdin.readline().strip().split())\n    return freshman_courses\n\ndef get_popularities(freshman_courses):\n    popularities = {}\n    for freshman_course in freshman_courses:\n        freshman_course_tuple = tuple(sorted(freshman_course))\n        if freshman_course_tuple in popularities:\n            popularities[freshman_course_tuple] += 1\n        else:\n            popularities[freshman_course_tuple] = 1\n    return popularities\n\ndef get_most_popularities(popularities):\n    most_popularities = []\n    max_popularity = max(popularities.values())\n    for freshman_course_tuple, popularity in popularities.items():\n        if popularity == max_popularity:\n            most_popularities.append(freshman_course_tuple)\n    return most_popularities\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    freshman_courses = get_freshman_courses(n)\n    popularities = get_popularities(freshman_courses)\n    most_popularities = get_most_popularities(popularities)\n    print(len(most_popularities))\n\nif __name__ == '__main__':\n    main()\n", "\n\n# This is a comment\n\nimport sys\n\ndef get_freshman_courses(n):\n    freshman_courses = []\n    for i in range(n):\n        freshman_courses.append(sys.stdin.readline().strip().split())\n    return freshman_courses\n\ndef get_popularities(freshman_courses):\n    popularities = {}\n    for freshman_course in freshman_courses:\n        freshman_course_tuple = tuple(sorted(freshman_course))\n        if freshman_course_tuple in popularities:\n            popularities[freshman_course_tuple] += 1\n        else:\n            popularities[freshman_course_tuple] = 1\n    return popularities\n\ndef get_most_popularities(popularities):\n    most_popularities = []\n    max_popularity = max(popularities.values())\n    for freshman_course_tuple, popularity in popularities.items():\n        if popularity == max_popularity:\n            most_popularities.append(freshman_course_tuple)\n    return most_popularities\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    freshman_courses = get_freshman_courses(n)\n    popularities = get_popularities(freshman_courses)\n    most_popularities = get_most_popularities(popularities)\n    print(len(most_popularities))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 04:14:25.027134 size on output set 4
2022-04-12 04:14:25.027146 num operations 2
2022-04-12 04:14:25.027152 size on input set 1
2022-04-12 04:14:27.875421 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\n# MAIN\n\n# Read in the input and store it in a dictionary\n# The key is the frosh and the value is the course\nfrosh = {}\n\nfor line in sys.stdin:\n    frosh[line] = frosh.get(line, 0) + 1\n\n# Find the most popular combination of course\n# i.e. the highest value in the dictionary\nmost_popular = max(frosh.values())\n\n# Print the number of frosh who have the most popular combination\nprint(most_popular)\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\n# MAIN\n\n# Read in the input and store it in a dictionary\n# The key is the frosh and the value is the course\nfrosh = {}\n\nfor line in sys.stdin:\n    frosh[line] = frosh.get(line, 0) + 1\n\n# Find the most popular combination of courses\n# i.e. the highest value in the dictionary\nmost_popular = max(frosh.values())\n\n# Print the number of frosh who have the most popular combination\nprint(most_popular)\n"
    }
  ],
  "created": 1649751265,
  "object": "edit"
}
2022-04-12 04:14:27.875569 fix spelling mistakes 2 ['\n\nimport sys\n\n# MAIN\n\n# Read in the input and store it in a dictionary\n# The key is the frosh and the value is the course\nfrosh = {}\n\nfor line in sys.stdin:\n    frosh[line] = frosh.get(line, 0) + 1\n\n# Find the most popular combination of course\n# i.e. the highest value in the dictionary\nmost_popular = max(frosh.values())\n\n# Print the number of frosh who have the most popular combination\nprint(most_popular)\n', '\n\nimport sys\n\n# MAIN\n\n# Read in the input and store it in a dictionary\n# The key is the frosh and the value is the course\nfrosh = {}\n\nfor line in sys.stdin:\n    frosh[line] = frosh.get(line, 0) + 1\n\n# Find the most popular combination of courses\n# i.e. the highest value in the dictionary\nmost_popular = max(frosh.values())\n\n# Print the number of frosh who have the most popular combination\nprint(most_popular)\n']
2022-04-12 04:14:27.875595 size on output set 2
2022-04-12 04:14:27.875603 size on input set 2
2022-04-12 04:14:30.580448 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\n# MAIN \n\n# Read in the input and store it in a dictionary\n# The key is the frosh and the value is the course\nfrosh = {}\n\nfor line in sys.stdin:\n    frosh[line] = frosh.get(line, 0) + 1\n\n# Find the most popular combination of course\n# i.e. the highest value in the dictionary\nmost_popular = max(frosh.values())\n\n# Print the number of frosh who have the most popular combination\nprint(most_popular)\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n# MAIN\n\n# Read in the input and store it in a dictionary\n# The key is the frosh and the value is the course\nfrosh = {}\nfor line in sys.stdin:\n    frosh[line] = frosh.get(line, 0) + 1\n# Find the most popular combination of course\n# i.e. the highest value in the dictionary\nmost_popular = max(frosh.values())\n# Print the number of frosh who have the most popular combination\nprint(most_popular)\n"
    }
  ],
  "created": 1649751268,
  "object": "edit"
}
2022-04-12 04:14:30.580615 fix syntax errors 2 ['\n\nimport sys\n\n# MAIN \n\n# Read in the input and store it in a dictionary\n# The key is the frosh and the value is the course\nfrosh = {}\n\nfor line in sys.stdin:\n    frosh[line] = frosh.get(line, 0) + 1\n\n# Find the most popular combination of course\n# i.e. the highest value in the dictionary\nmost_popular = max(frosh.values())\n\n# Print the number of frosh who have the most popular combination\nprint(most_popular)\n', '\nimport sys\n# MAIN\n\n# Read in the input and store it in a dictionary\n# The key is the frosh and the value is the course\nfrosh = {}\nfor line in sys.stdin:\n    frosh[line] = frosh.get(line, 0) + 1\n# Find the most popular combination of course\n# i.e. the highest value in the dictionary\nmost_popular = max(frosh.values())\n# Print the number of frosh who have the most popular combination\nprint(most_popular)\n']
2022-04-12 04:14:35.353615 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\n# MAIN #\n\n# Read in the input and store it in a dictionary.\n# The key is the frosh and the value is the course.\nfrosh = {}\n\nfor line in sys.stdin:\n    frosh[line] = frosh.get(line, 0) + 1\n\n# Find the most popular combination of courses.\n# i.e. the highest value in the dictionary.\nmost_popular = max(frosh.values())\n\n# Print the number of frosh who have the most popular combination.\nprint(most_popular)\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\n# MAIN\n\n# Read in the input and store it in a dictionary\n# The key is the frosh and the value is the course\nfrosh = {}\n\nfor line in sys.stdin:\n    frosh[line.strip()] = frosh.get(line.strip(), 0) + 1\n\n# Find the most popular combination of courses\n# i.e. the highest value in the dictionary\nmost_popular = max(frosh.values())\n\n# Print the number of frosh who have the most popular combination\nprint(most_popular)\n"
    }
  ],
  "created": 1649751270,
  "object": "edit"
}
2022-04-12 04:14:35.353718 fix syntax errors 2 ['\nimport sys\n\n# MAIN #\n\n# Read in the input and store it in a dictionary.\n# The key is the frosh and the value is the course.\nfrosh = {}\n\nfor line in sys.stdin:\n    frosh[line] = frosh.get(line, 0) + 1\n\n# Find the most popular combination of courses.\n# i.e. the highest value in the dictionary.\nmost_popular = max(frosh.values())\n\n# Print the number of frosh who have the most popular combination.\nprint(most_popular)\n', '\n\nimport sys\n\n# MAIN\n\n# Read in the input and store it in a dictionary\n# The key is the frosh and the value is the course\nfrosh = {}\n\nfor line in sys.stdin:\n    frosh[line.strip()] = frosh.get(line.strip(), 0) + 1\n\n# Find the most popular combination of courses\n# i.e. the highest value in the dictionary\nmost_popular = max(frosh.values())\n\n# Print the number of frosh who have the most popular combination\nprint(most_popular)\n']
2022-04-12 04:14:35.353780 size on output set 4
2022-04-12 04:14:35.353787 num operations 2
2022-04-12 04:14:35.353790 size on input set 1
2022-04-12 04:14:39.002934 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef find_popular_combinations(frosh):\n    combinations = {}\n    for combination in frosh:\n        combination.sort()\n        combination = tuple(combination)\n        if combination in combinations:\n            combinations[combination] += 1\n        else:\n            combinations[combination] = 1\n    most_popular = max(combinations.values())\n    return [combination for combination in combinations if combinations[combination] == most_popular]\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    frosh = []\n    for i in range(n):\n        frosh.append([int(x) for x in sys.stdin.readline().strip().split()])\n    print(len(find_popular_combinations(frosh)))\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef find_popular_combination(n):\n    combinations = {}\n    for i in range(n):\n        combination = frosh[i]\n        combination.sort()\n        combination = tuple(combination)\n        if combination in combinations:\n            combinations[combination] += 1\n        else:\n            combinations[combination] = 1\n    most_popular = max(combinations.values())\n    return [combination for combination in combinations if combinations[combination] == most_popular]\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    frosh = []\n    for i in range(n):\n        frosh.append([int(x) for x in sys.stdin.readline().strip().split()])\n    print(len(find_popular_combination(n)))\n"
    }
  ],
  "created": 1649751275,
  "object": "edit"
}
2022-04-12 04:14:39.003190 fix spelling mistakes 2 ["\nimport sys\n\ndef find_popular_combinations(frosh):\n    combinations = {}\n    for combination in frosh:\n        combination.sort()\n        combination = tuple(combination)\n        if combination in combinations:\n            combinations[combination] += 1\n        else:\n            combinations[combination] = 1\n    most_popular = max(combinations.values())\n    return [combination for combination in combinations if combinations[combination] == most_popular]\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    frosh = []\n    for i in range(n):\n        frosh.append([int(x) for x in sys.stdin.readline().strip().split()])\n    print(len(find_popular_combinations(frosh)))\n", "\nimport sys\n\ndef find_popular_combination(n):\n    combinations = {}\n    for i in range(n):\n        combination = frosh[i]\n        combination.sort()\n        combination = tuple(combination)\n        if combination in combinations:\n            combinations[combination] += 1\n        else:\n            combinations[combination] = 1\n    most_popular = max(combinations.values())\n    return [combination for combination in combinations if combinations[combination] == most_popular]\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    frosh = []\n    for i in range(n):\n        frosh.append([int(x) for x in sys.stdin.readline().strip().split()])\n    print(len(find_popular_combination(n)))\n"]
2022-04-12 04:14:39.003218 size on output set 2
2022-04-12 04:14:39.003226 size on input set 2
2022-04-12 04:14:48.222933 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef find_popular_combinations(frosh):\n\tcombinations = {}\n\tfor combination in frosh:\n\t\tcombination.sort()\n\t\tcombination = tuple(combination)\n\t\tif combination in combinations:\n\t\t\tcombinations[combination] += 1\n\t\telse:\n\t\t\tcombinations[combination] = 1\n\tmost_popular = max(combinations.values())\n\treturn [combination for combination in combinations if combinations[combination] == most_popular]\n\nif __name__ == '__main__':\n\tn = int(sys.stdin.readline().strip())\n\tfrosh = []\n\tfor i in range(n):\n\t\tfrosh.append([int(x) for x in sys.stdin.readline().strip().split()])\n\tprint(len(find_popular_combinations(frosh)))\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef find_popular_combinations(frosh):\n    combinations = {}\n    for combination in frosh:\n        combination.sort()\n        combination = tuple(combination)\n        if combination in combinations:\n            combinations[combination] += 1\n        else:\n            combinations[combination] = 1\n    most_popular = max(combinations.values())\n    return [combination for combination in combinations if combinations[combination] == most_popular]\n\nif __name__ == '__main__':\n    n = int(input().strip())\n    frosh = []\n    for i in range(n):\n        frosh.append([int(x) for x in input().strip().split()])\n    print(len(find_popular_combinations(frosh)))\n"
    }
  ],
  "created": 1649751279,
  "object": "edit"
}
2022-04-12 04:14:48.223054 fix syntax errors 2 ["import sys\n\ndef find_popular_combinations(frosh):\n\tcombinations = {}\n\tfor combination in frosh:\n\t\tcombination.sort()\n\t\tcombination = tuple(combination)\n\t\tif combination in combinations:\n\t\t\tcombinations[combination] += 1\n\t\telse:\n\t\t\tcombinations[combination] = 1\n\tmost_popular = max(combinations.values())\n\treturn [combination for combination in combinations if combinations[combination] == most_popular]\n\nif __name__ == '__main__':\n\tn = int(sys.stdin.readline().strip())\n\tfrosh = []\n\tfor i in range(n):\n\t\tfrosh.append([int(x) for x in sys.stdin.readline().strip().split()])\n\tprint(len(find_popular_combinations(frosh)))\n", "import sys\n\ndef find_popular_combinations(frosh):\n    combinations = {}\n    for combination in frosh:\n        combination.sort()\n        combination = tuple(combination)\n        if combination in combinations:\n            combinations[combination] += 1\n        else:\n            combinations[combination] = 1\n    most_popular = max(combinations.values())\n    return [combination for combination in combinations if combinations[combination] == most_popular]\n\nif __name__ == '__main__':\n    n = int(input().strip())\n    frosh = []\n    for i in range(n):\n        frosh.append([int(x) for x in input().strip().split()])\n    print(len(find_popular_combinations(frosh)))\n"]
2022-04-12 04:14:51.827281 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef find_popular_combination(n):\n    combinations = {}\n    for i in range(n):\n        combination = frosh[i]\n        combination.sort()\n        combination = tuple(combination)\n        if combination in combinations:\n            combinations[combination] += 1\n        else:\n            combinations[combination] = 1\n    most_popular = max(combinations.values())\n    return [combination for combination in combinations if combinations[combination] == most_popular][0]\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    frosh = []\n    for i in range(n):\n        frosh.append([int(x) for x in sys.stdin.readline().strip().split()])\n    print(find_popular_combination(n))\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef find_popular_combination(n):\n    combinations = {}\n    for i in range(n):\n        combination = frosh[i]\n        combination.sort()\n        combination = tuple(combination)\n        if combination in combinations:\n            combinations[combination] += 1\n        else:\n            combinations[combination] = 1\n    most_popular = max(combinations.values())\n    return [combination for combination in combinations if combinations[combination] == most_popular][0]\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    frosh = []\n    for i in range(n):\n        frosh.append([int(x) for x in sys.stdin.readline().strip().split()])\n    print(find_popular_combination(n))\n"
    }
  ],
  "created": 1649751288,
  "object": "edit"
}
2022-04-12 04:14:51.827618 fix syntax errors 2 ["import sys\n\ndef find_popular_combination(n):\n    combinations = {}\n    for i in range(n):\n        combination = frosh[i]\n        combination.sort()\n        combination = tuple(combination)\n        if combination in combinations:\n            combinations[combination] += 1\n        else:\n            combinations[combination] = 1\n    most_popular = max(combinations.values())\n    return [combination for combination in combinations if combinations[combination] == most_popular][0]\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    frosh = []\n    for i in range(n):\n        frosh.append([int(x) for x in sys.stdin.readline().strip().split()])\n    print(find_popular_combination(n))\n", "\nimport sys\n\ndef find_popular_combination(n):\n    combinations = {}\n    for i in range(n):\n        combination = frosh[i]\n        combination.sort()\n        combination = tuple(combination)\n        if combination in combinations:\n            combinations[combination] += 1\n        else:\n            combinations[combination] = 1\n    most_popular = max(combinations.values())\n    return [combination for combination in combinations if combinations[combination] == most_popular][0]\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    frosh = []\n    for i in range(n):\n        frosh.append([int(x) for x in sys.stdin.readline().strip().split()])\n    print(find_popular_combination(n))\n"]
2022-04-12 04:14:51.827674 size on output set 4
