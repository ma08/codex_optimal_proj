["#!/usr/bin/env python3\n\nimport math\n\ndef euler(n):\n    return sum(1 / math.factorial(i) for i in range(n+1))\n\nif __name__ == '__main__':\n    print(euler(int(input())))\n", "\nimport numpy as np\nimport pandas as pd\n\ndef read_data(filename):\n    df = pd.read_csv(filename, sep='\\t', header=None)\n    return df\n\ndef get_data(df):\n    return df.values\n\ndef get_column(df, col):\n    return df.values[:,col]\n\ndef get_row(df, row):\n    return df.values[row,:]\n\ndef get_column_names(df):\n    return df.columns.values\n\ndef get_row_names(df):\n    return df.index.values\n\ndef get_shape(df):\n    return df.shape\n\ndef get_size(df):\n    return df.size\n\ndef get_data_type(df):\n    return df.dtypes\n\ndef get_info(df):\n    return df.info()\n\ndef get_describe(df):\n    return df.describe()\n\ndef get_head(df, n):\n    return df.head(n)\n\ndef get_tail(df, n):\n    return df.tail(n)\n\ndef get_sample(df, n):\n    return df.sample(n)\n\ndef get_unique(df):\n    return df.unique()\n\ndef get_nunique(df):\n    return df.nunique()\n\ndef get_value_counts(df):\n    return df.value_counts()\n\ndef get_sort_values(df, col):\n    return df.sort_values(col)\n\ndef get_sort_index(df):\n    return df.sort_index()\n\ndef get_count(df):\n    return df.count()\n\ndef get_mean(df):\n    return df.mean()\n\ndef get_median(df):\n    return df.median()\n\ndef get_min(df):\n    return df.min()\n\ndef get_max(df):\n    return df.max()\n\ndef get_std(df):\n    return df.std()\n\ndef get_var(df):\n    return df.var()\n\ndef get_skew(df):\n    return df.skew()\n\ndef get_corr(df):\n    return df.corr()\n\ndef get_cov(df):\n    return df.cov()\n\ndef get_abs(df):\n    return df.abs()\n\ndef get_cummin(df):\n    return df.cummin()\n\ndef get_cummax(df):\n    return df.cummax()\n\ndef get_cumsum(df):\n    return df.cumsum()\n\ndef get_cumcount(df):\n    return df.cumcount()\n\ndef get_diff(df):\n    return df.diff()\n\ndef get_pct_change(df):\n    return df.pct_change()\n\ndef get_tshift(df):\n    return df.tshift()\n\ndef get_all(df):\n    return df.all()\n\ndef get_any(df):\n    return df.any()\n\ndef get_idxmax(df):\n    return df.idxmax()\n\ndef get_idxmin(df):\n    return df.idxmin()\n\ndef get_isnull(df):\n    return df.isnull()\n\ndef get_notnull(df):\n    return df.notnull()\n\ndef get_dropna(df):\n    return df.dropna()\n\ndef get_fillna(df):\n    return df.fillna()\n\ndef get_replace(df):\n    return df.replace()\n\ndef get_interpolate(df):\n    return df.interpolate()\n\ndef get_melt(df):\n    return df.melt()\n\ndef get_pivot(df):\n    return df.pivot()\n\ndef get_pivot_table(df):\n    return df.pivot_table()\n\ndef get_stack(df):\n    return df.stack()\n\ndef get_unstack(df):\n    return df.unstack()\n\ndef get_wide_to_long(df):\n    return df.wide_to_long()\n\ndef get_concat(df):\n    return df.concat()\n\ndef get_merge(df):\n    return df.merge()\n\ndef get_join(df):\n    return df.join()\n\ndef get_append(df):\n    return df.append()\n\ndef get_groupby(df):\n    return df.groupby()\n\ndef get_agg(df):\n    return df.agg()\n\ndef get_transform(df):\n    return df.transform()\n\ndef get_apply(df):\n    return df.apply()\n\ndef get_pipe(df):\n    return df.pipe()\n\ndef get_filter(df):\n    return df.filter()\n\ndef get_query(df):\n    return df.query()\n\ndef get_loc(df):\n    return df.loc()\n\ndef get_iloc(df):\n    return df.iloc()\n\ndef get_at(df):\n    return df.at()\n\ndef get_iat(df):\n    return df.iat()\n\ndef get_ix(df):\n    return df.ix()\n\ndef get_get_value(df):\n    return df.get_value()\n\ndef get_set_value(df):\n    return df.set_value()\n\ndef get_to_csv(df):\n    return df.to_csv()\n\ndef get_to_excel(df):\n    return df.to_excel()\n\ndef get_to_hdf(df):\n    return df.to_hdf()\n\ndef get_to_json(df):\n    return df.to_json()\n\ndef get_to_msgpack(df):\n    return df.to_msgpack()\n\ndef get_to_pickle(df):\n    return df.to_pickle()\n\ndef get_to_sql(df):\n    return df.to_sql()\n\ndef get_to_stata(df):\n    return df.to_stata()\n\ndef get_to_sparse(df):\n    return df.to_sparse()\n\ndef get_to_string(df):\n    return df.to_string()\n\ndef get_to_timestamp(df):\n    return df.to_timestamp()\n\ndef get_to_xarray(df):\n    return df.to_xarray()\n\ndef get_to_clipboard(df):\n    return df.to_clipboard()\n\ndef get_to_period(df):\n    return df.to_period()\n\ndef get_to_numpy(df):\n    return df.to_numpy()\n\ndef get_to_records(df):\n    return df.to_records()\n\ndef get_to_dict(df):\n    return df.to_dict()\n", "\n#Solution: \n\nimport math\n\ndef factorial(n):\n    if n == 0:\n        return 1.0\n    return n*factorial(n-1)\n\ndef e_approx(n):\n    approx = 0\n    for i in range(n+1):\n        approx += 1/factorial(i)\n    return approx\n\ndef main():\n    n = int(input())\n    print(e_approx(n))\n\nmain()\n", "\nimport sys\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef euler(n):\n    e = 0\n    for i in range(0, n + 1):\n        e += 1 / factorial(i)\n    return e\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    print(euler(n))\n\nif __name__ == '__main__':\n    main()\n", "import math\n\nn = int(input())\n\ne = 1\nfor i in range(1, n+1):\n    e += 1 / math.factorial(i)\n\nprint(e)\n", "\nimport math\n\nn = int(input())\n\ne = 0\nfor i in range(n+1):\n    e += 1 / math.factorial(i)\n\nprint(round(e, n))\n", "import math\n\n\nn = int(input())\n\ne = 1\nfor n in range(1, n+1):\n    e += 1 / math.factorial(n)\n\nprint(e)\n", "\n#!/usr/bin/env python3\n#Solution: \n\nimport math\n\ndef factorial(x):\n    if x == 0:\n        return 1\n    else:\n        return x*factorial(x-1)\n\ndef e_approx(n):\n    approx = 0\n    for i in range(n+1):\n        approx += 1/factorial(i)\n    return approx\n\ndef main():\n    n = int(input())\n    print(e_approx(n))\n\nmain()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef euler(n):\n    e = 0\n    for i in range(0, n+1): # range(0, n+1) is equivalent to range(n+1)\n        e += 1 / factorial(i)\n    return e\n\ndef main():\n    n = int(sys.stdin.readline().strip()) # read the first line\n    print(euler(n))\n\nif __name__ == '__main__':\n    main()\n", "# This is a comment\nimport sys\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef euler_approx(n):\n    e = 0\n    for i in range(n+1):\n        e += 1/factorial(i)\n    return e\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(euler_approx(n))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef euler_number(n):\n    return sum([1/factorial(x) for x in range(n+1)])\n\nif __name__ == \"__main__\":\n    n = int(sys.stdin.read())\n    print(euler_number(n))\n", "import sys\nimport math\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\nn = int(sys.stdin.readline())\nprint(sum([1/factorial(x) for x in range(n+1)]))\n", "import math\n\ndef factorial(x):\n    if x == 0:\n        return 1\n    else:\n        return x*factorial(x-1)\n\ndef e_approx(n):\n    approx = 0\n    for i in range(n+1):\n        approx += 1/factorial(i)\n    return approx\n\ndef main():\n    n = int(input())\n    print(e_approx(n))\n    \nmain()\n", "\n\nimport math\nprint(sum([1/math.factorial(i) for i in range(int(input())+1)])\n", "import sys\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef euler(n):\n    e = 0\n    for i in range(0, n + 1):\n        e += 1 / factorial(i)\n    return e\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    print(euler(n))\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport math\n\ndef euler(n):\n    return sum(1/math.factorial(i) for i in range(n+1)) # n+1 because range is exclusive\n\nif __name__ == '__main__':\n    print(euler(int(input())))\n", "\n\nimport math\n\ndef euler(n):\n    return sum(1/math.factorial(i) for i in range(n+1))\n\nif __name__ == '__main__':\n    print(euler(int(input())))\n", "import math\n\ndef factorial(x):\n    if x == 0:\n        return 1\n    else:\n        return x*factorial(x-1)\n\ndef e_approx(n):\n    approx = 0\n    for i in range(n+1):\n        approx += 1/factorial(i)\n    return approx\n\ndef main():\n    n = int(input())\n    print(e_approx(n))\n\nmain()\n", "import math\nprint(sum([1/math.factorial(i) for i in range(int(input())+1)]))\n", "\n\nimport math\nprint(sum([1/math.factorial(i) for i in range(int(input()))]))\n", "import math\nprint(sum([1/math.factorial(i) for i in range(int(input()))])) \n", "\nimport sys\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\ndef euler_number(n):\n    return sum([1/factorial(x) for x in range(n+1)])\n\nif __name__ == \"__main__\":\n    n = int(sys.stdin.read())\n    print(euler_number(n))\n", "\nimport sys\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef euler_approximation(n):\n    e = 0\n    for i in range(n+1):\n        e += 1/factorial(i)\n    return e\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(euler_approximation(n))\n\nif __name__ == '__main__':\n    main()\n", "# This is a comment\nimport sys\n\ndef factorial(n):\n    if n == 1: return 1\n    else: return n * factorial(n-1)\n\ndef euler_approx(n):\n    e = 0\n    for i in range(n+1):\n        e += 1/factorial(i)\n    return e\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(euler_approx(n))\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef euler(n):\n    e = 0\n    for i in range(0, n + 1):\n        e += 1 / factorial(i)\n    return e\n\ndef main():\n    n = int(sys.stdin.readline().strip()) # read the first line\n    print(euler(n))\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef euler_approximation(n):\n    e = 0\n    for i in range(n+1):\n        e += 1/factorial(i)\n    return e\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    print(euler_approximation(n))\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport math\n\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\nn = int(sys.stdin.readline())\nprint(sum([1/factorial(x) for x in range(n)]))\n", "\nimport math\nn = int(input())\n\ne = 0\nfor i in range(n+1):\n    e += 1 / math.factorial(i)\nprint(round(e, n))\n"]