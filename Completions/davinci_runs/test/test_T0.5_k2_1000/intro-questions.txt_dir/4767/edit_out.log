2022-04-11 23:22:25.780620 num operations 2
2022-04-11 23:22:25.780656 size on input set 1
2022-04-11 23:22:28.168877 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19]\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19]\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649733746,
  "object": "edit"
}
2022-04-11 23:22:28.169004 fix spelling mistakes 2 ['\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19]\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19]\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-11 23:22:28.169019 size on output set 1
2022-04-11 23:22:28.169023 size on input set 1
2022-04-11 23:22:32.767065 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649733748,
  "object": "edit"
}
2022-04-11 23:22:32.767302 fix syntax errors 2 ['\ndef main():\n    registers = [int(x) for x in input().split()]\n    max_val = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in range(len(registers) - 1, -1, -1):\n        if registers[i] < max_val[i] - 1:\n            registers[i] += 1\n            break\n        else:\n            registers[i] = 0\n    print(sum(max_val) - sum(registers))\n\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    pass\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-11 23:22:32.767335 size on output set 2
2022-04-11 23:22:32.767351 num operations 2
2022-04-11 23:22:32.767360 size on input set 1
2022-04-11 23:22:39.966703 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    # Read in the current state of the registers.\n    registers = [int(i) for i in input().split()]\n\n    # First, find the first non-zero register.\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    # If the first non-zero register is the last register, then the number of\n    # operations that can be performed is the difference between the register\n    # value and the register size.\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    # Otherwise, the number of operations that can be performed is the product\n    # of the register sizes of all registers following the first non-zero\n    # register.\n    print(reduce(lambda x, y: x * y, [registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Read in the current state of the registers.\n    \"\"\"\n    registers = [int(i) for i in input().split()]\n\n    \"\"\"\n    First, find the first non-zero register. \n    \"\"\"\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    \"\"\"\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    \"\"\"\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    \"\"\"\n    Otherwise, the number of operations that can be performed is the product\n    of the register sizes of all registers following the first non-zero\n    register.\n    \"\"\"\n    print(reduce(lambda x, y: x * y, [registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n"
    }
  ],
  "created": 1649733753,
  "object": "edit"
}
2022-04-11 23:22:39.966925 fix spelling mistakes 2 ['\n\ndef main():\n    # Read in the current state of the registers.\n    registers = [int(i) for i in input().split()]\n\n    # First, find the first non-zero register.\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    # If the first non-zero register is the last register, then the number of\n    # operations that can be performed is the difference between the register\n    # value and the register size.\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    # Otherwise, the number of operations that can be performed is the product\n    # of the register sizes of all registers following the first non-zero\n    # register.\n    print(reduce(lambda x, y: x * y, [registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n', '\n\ndef main():\n    """\n    Read in the current state of the registers.\n    """\n    registers = [int(i) for i in input().split()]\n\n    """\n    First, find the first non-zero register. \n    """\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    """\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    """\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    """\n    Otherwise, the number of operations that can be performed is the product\n    of the register sizes of all registers following the first non-zero\n    register.\n    """\n    print(reduce(lambda x, y: x * y, [registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n']
2022-04-11 23:22:39.966981 size on output set 2
2022-04-11 23:22:39.966992 size on input set 2
2022-04-11 23:22:43.774752 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Read in the current state of the registers.\n    \"\"\"\n    registers = [int(i) for i in input().split()]\n\n    \"\"\"\n    First, find the first non-zero register. \n    \"\"\"\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    \"\"\"\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    \"\"\"\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    \"\"\"\n    Otherwise, the number of operations that can be performed is the product\n    of the register sizes of all registers following the first non-zero\n    register.\n    \"\"\"\n    print(reduce(lambda x, y: x * y, [19 - registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Read in the current state of the registers.\n    \"\"\"\n    registers = [int(i) for i in input().split()]\n\n    \"\"\"\n    First, find the first non-zero register. \n    \"\"\"\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    \"\"\"\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    \"\"\"\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    \"\"\"\n    Otherwise, the number of operations that can be performed is the product\n    of the register sizes of all registers following the first non-zero\n    register.\n    \"\"\"\n    print(reduce(lambda x, y: x * y, [19 - registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n"
    }
  ],
  "created": 1649733760,
  "object": "edit"
}
2022-04-11 23:22:43.775260 fix syntax errors 2 ['\n\ndef main():\n    """\n    Read in the current state of the registers.\n    """\n    registers = [int(i) for i in input().split()]\n\n    """\n    First, find the first non-zero register. \n    """\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    """\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    """\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    """\n    Otherwise, the number of operations that can be performed is the product\n    of the register sizes of all registers following the first non-zero\n    register.\n    """\n    print(reduce(lambda x, y: x * y, [19 - registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n', '\n\ndef main():\n    """\n    Read in the current state of the registers.\n    """\n    registers = [int(i) for i in input().split()]\n\n    """\n    First, find the first non-zero register. \n    """\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    """\n    If the first non-zero register is the last register, then the number of\n    operations that can be performed is the difference between the register\n    value and the register size.\n    """\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    """\n    Otherwise, the number of operations that can be performed is the product\n    of the register sizes of all registers following the first non-zero\n    register.\n    """\n    print(reduce(lambda x, y: x * y, [19 - registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n']
2022-04-11 23:22:47.384603 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    # Read in the current state of the registers.\n    registers = [int(i) for i in input().split()]\n\n    # First, find the first non-zero register.\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    # If the first non-zero register is the last register, then the number of\n    # operations that can be performed is the difference between the register\n    # value and the register size.\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    # Otherwise, the number of operations that can be performed is the product\n    # of the register sizes of all registers following the first non-zero\n    # register.\n    print(reduce(lambda x, y: x * y, [19 - registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    # Read in the current state of the registers.\n    registers = [int(i) for i in input().split()]\n\n    # First, find the first non-zero register.\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    # If the first non-zero register is the last register, then the number of\n    # operations that can be performed is the difference between the register\n    # value and the register size.\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    # Otherwise, the number of operations that can be performed is the product\n    # of the register sizes of all registers following the first non-zero\n    # register.\n    print(reduce(lambda x, y: x * y, [19 - registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n"
    }
  ],
  "created": 1649733763,
  "object": "edit"
}
2022-04-11 23:22:47.384738 fix syntax errors 2 ['\n\ndef main():\n    # Read in the current state of the registers.\n    registers = [int(i) for i in input().split()]\n\n    # First, find the first non-zero register.\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    # If the first non-zero register is the last register, then the number of\n    # operations that can be performed is the difference between the register\n    # value and the register size.\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    # Otherwise, the number of operations that can be performed is the product\n    # of the register sizes of all registers following the first non-zero\n    # register.\n    print(reduce(lambda x, y: x * y, [19 - registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n', '\n\ndef main():\n    # Read in the current state of the registers.\n    registers = [int(i) for i in input().split()]\n\n    # First, find the first non-zero register.\n    first_non_zero = 0\n    for i in range(len(registers)):\n        if registers[i] != 0:\n            first_non_zero = i\n            break\n\n    # If the first non-zero register is the last register, then the number of\n    # operations that can be performed is the difference between the register\n    # value and the register size.\n    if first_non_zero == len(registers) - 1:\n        print(19 - registers[first_non_zero])\n        return\n\n    # Otherwise, the number of operations that can be performed is the product\n    # of the register sizes of all registers following the first non-zero\n    # register.\n    print(reduce(lambda x, y: x * y, [19 - registers[i] for i in range(first_non_zero + 1, len(registers))]))\n\nmain()\n']
2022-04-11 23:22:47.384757 size on output set 2
2022-04-11 23:22:47.384773 num operations 2
2022-04-11 23:22:47.384776 size on input set 1
2022-04-11 23:22:49.958359 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 19:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split(' ')]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 20:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split(' ')]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649733767,
  "object": "edit"
}
2022-04-11 23:22:49.958467 fix spelling mistakes 2 ["\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 19:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split(' ')]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 20:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split(' ')]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 23:22:49.958481 size on output set 2
2022-04-11 23:22:49.958484 size on input set 2
2022-04-11 23:22:55.046709 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 20:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split(' ')]\n    count = 0\n    while next_reg(regs, 0) != 0:\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 20:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return 1\n\ndef main():\n    regs = [1 for x in range(int(sys.stdin.readline()))]\n    count = 0\n    while next_reg(regs, 0) == 1:\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649733770,
  "object": "edit"
}
2022-04-11 23:22:55.046844 fix syntax errors 2 ["\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 20:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split(' ')]\n    count = 0\n    while next_reg(regs, 0) != 0:\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 20:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return 1\n\ndef main():\n    regs = [1 for x in range(int(sys.stdin.readline()))]\n    count = 0\n    while next_reg(regs, 0) == 1:\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 23:22:57.636956 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 20:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split(' ')]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 10:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split(' ')]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649733775,
  "object": "edit"
}
2022-04-11 23:22:57.637210 fix syntax errors 2 ["\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 20:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split(' ')]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef next_reg(regs, i):\n    if i == len(regs):\n        return 0\n    elif regs[i] == 10:\n        regs[i] = 0\n        return next_reg(regs, i+1)\n    else:\n        regs[i] += 1\n        return regs\n\ndef main():\n    regs = [int(x) for x in sys.stdin.readline().split(' ')]\n    count = 0\n    while next_reg(regs, 0):\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 23:22:57.637236 size on output set 4
2022-04-11 23:22:57.637249 num operations 2
2022-04-11 23:22:57.637254 size on input set 1
2022-04-11 23:23:00.828280 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()]\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19))\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()]\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19))\n\nmain()\n"
    }
  ],
  "created": 1649733777,
  "object": "edit"
}
2022-04-11 23:23:00.828382 fix spelling mistakes 2 ['\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()]\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19))\n\nmain()\n', '\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()]\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19))\n\nmain()\n']
2022-04-11 23:23:00.828394 size on output set 1
2022-04-11 23:23:00.828398 size on input set 1
2022-04-11 23:23:06.334721 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()] # read input\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19)) # print answer\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()] \n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19)) \n\nmain()\n"
    }
  ],
  "created": 1649733781,
  "object": "edit"
}
2022-04-11 23:23:06.334971 fix syntax errors 2 ['\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()] # read input\n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19)) # print answer\n\nmain()\n', '\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = [int(i) for i in input().split()] \n    print(min(20 - v2, 6 - v3, 4 - v5, 3 - v7, 2 - v11, 2 - v13, 2 - v17, 2 - v19)) \n\nmain()\n']
2022-04-11 23:23:06.335135 size on output set 2
2022-04-11 23:23:06.335146 num operations 2
2022-04-11 23:23:06.335151 size on input set 1
2022-04-11 23:23:11.602723 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef compute(registers):\n    # How many more operations can we do?\n    # If we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # Otherwise, we can do at least one more.\n    # The question is how many more can we do?\n    # We can do as many more as we can increment the least significant register\n    # without overflowing.\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do? if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more. the question is how many more can\n    # we do? we can do as many more as we can increment the least significant\n    # register without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649733786,
  "object": "edit"
}
2022-04-11 23:23:11.602923 fix spelling mistakes 2 ["\n\nimport sys\n\ndef compute(registers):\n    # How many more operations can we do?\n    # If we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # Otherwise, we can do at least one more.\n    # The question is how many more can we do?\n    # We can do as many more as we can increment the least significant register\n    # without overflowing.\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do? if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more. the question is how many more can\n    # we do? we can do as many more as we can increment the least significant\n    # register without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 23:23:11.602964 size on output set 2
2022-04-11 23:23:11.602973 size on input set 2
2022-04-11 23:23:14.190421 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\n\ndef compute(registers):\n    # How many more operations can we do?\n    # If we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # Otherwise, we can do at least one more.\n    # The question is how many more can we do?\n    # We can do as many more as we can increment the least significant register\n    # without overflowing.\n    return 19 - registers[0]\n\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef compute(registers):\n    # How many more operations can we do?\n    # If we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # Otherwise, we can do at least one more.\n    # The question is how many more can we do?\n    # We can do as many more as we can increment the least significant register\n    # without overflowing.\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649733791,
  "object": "edit"
}
2022-04-11 23:23:14.190744 fix syntax errors 2 ["\nimport sys\n\n\ndef compute(registers):\n    # How many more operations can we do?\n    # If we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # Otherwise, we can do at least one more.\n    # The question is how many more can we do?\n    # We can do as many more as we can increment the least significant register\n    # without overflowing.\n    return 19 - registers[0]\n\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef compute(registers):\n    # How many more operations can we do?\n    # If we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # Otherwise, we can do at least one more.\n    # The question is how many more can we do?\n    # We can do as many more as we can increment the least significant register\n    # without overflowing.\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 23:23:18.706756 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef compute(registers):\n    # TODO: implement me\n    return 0\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do? if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more. the question is how many more can\n    # we do? we can do as many more as we can increment the least significant\n    # register without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649733794,
  "object": "edit"
}
2022-04-11 23:23:18.707071 fix syntax errors 2 ["\nimport sys\n\ndef compute(registers):\n    # TODO: implement me\n    return 0\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef compute(registers):\n    # how many more operations can we do? if we can't do any more, we're done\n    if registers[-1] == 18:\n        return 0\n    # otherwise, we can do at least one more. the question is how many more can\n    # we do? we can do as many more as we can increment the least significant\n    # register without overflowing\n    return 19 - registers[0]\n\ndef main():\n    registers = [int(x) for x in sys.stdin.readline().split()]\n    print(compute(registers))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 23:23:18.707100 size on output set 4
2022-04-11 23:23:18.707112 num operations 2
2022-04-11 23:23:18.707116 size on input set 1
2022-04-11 23:23:21.650762 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    out = 0\n    for i in range(8):\n        out += 19 - vals[i]\n    print(out)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()] \n    out = 0\n    for i in range(7, -1, -1):\n        out += 19 - vals[i]\n    print(out)\n\nmain()\n"
    }
  ],
  "created": 1649733798,
  "object": "edit"
}
2022-04-11 23:23:21.651293 fix spelling mistakes 2 ['\n\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    out = 0\n    for i in range(8):\n        out += 19 - vals[i]\n    print(out)\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()] \n    out = 0\n    for i in range(7, -1, -1):\n        out += 19 - vals[i]\n    print(out)\n\nmain()\n']
2022-04-11 23:23:21.651360 size on output set 2
2022-04-11 23:23:21.651368 size on input set 2
2022-04-11 23:23:23.770917 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    out = 0\n    for i in range(8):\n        out += 19 - vals[i]\n    print(out)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/python3\n\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    out = 0\n    for i in range(8):\n        out += 19 - vals[i]\n    print(out)\n\nmain()\n"
    }
  ],
  "created": 1649733801,
  "object": "edit"
}
2022-04-11 23:23:23.771194 fix syntax errors 2 ['#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    out = 0\n    for i in range(8):\n        out += 19 - vals[i]\n    print(out)\n\nmain()\n', '#!/usr/bin/python3\n\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    out = 0\n    for i in range(8):\n        out += 19 - vals[i]\n    print(out)\n\nmain()\n']
2022-04-11 23:23:26.811460 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    out = 0\n    for i in range(7, -1, -1):\n        out += 19 - vals[i]\n    print(out)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    out = 0\n    for i in range(7, -1, -1):\n        out += 19 - vals[i]\n    print(out)\n\nmain()\n"
    }
  ],
  "created": 1649733803,
  "object": "edit"
}
2022-04-11 23:23:26.811875 fix syntax errors 2 ['\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    out = 0\n    for i in range(7, -1, -1):\n        out += 19 - vals[i]\n    print(out)\n\nmain()\n', '\nimport sys\n\ndef main():\n    vals = [int(x) for x in sys.stdin.readline().split()]\n    out = 0\n    for i in range(7, -1, -1):\n        out += 19 - vals[i]\n    print(out)\n\nmain()\n']
2022-04-11 23:23:26.811928 size on output set 3
2022-04-11 23:23:26.811948 num operations 2
2022-04-11 23:23:26.811979 size on input set 1
2022-04-11 23:23:29.093065 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(20)\n    v.append(0)\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6])\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(20)\n    v.append(0)\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6])\n\nmain()\n"
    }
  ],
  "created": 1649733807,
  "object": "edit"
}
2022-04-11 23:23:29.093279 fix spelling mistakes 2 ['\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(20)\n    v.append(0)\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6])\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))\n    v.append(20)\n    v.append(0)\n    v.sort()\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6])\n\nmain()\n']
2022-04-11 23:23:29.093302 size on output set 1
2022-04-11 23:23:29.093307 size on input set 1
2022-04-11 23:23:35.538778 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split())) # read line\n    v.append(20) # append 20\n    v.append(0) # append 0\n    v.sort() # sort\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6]) # print\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))[:6]\n    v.extend([20, 0])\n    v.sort() \n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6]) \n\nmain()\n"
    }
  ],
  "created": 1649733809,
  "object": "edit"
}
2022-04-11 23:23:35.538940 fix syntax errors 2 ['#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split())) # read line\n    v.append(20) # append 20\n    v.append(0) # append 0\n    v.sort() # sort\n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6]) # print\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    v = list(map(int, sys.stdin.readline().split()))[:6]\n    v.extend([20, 0])\n    v.sort() \n    print(v[0]*v[1]*v[2]*v[3]*v[4]*v[5]*v[6]) \n\nmain()\n']
2022-04-11 23:23:35.538963 size on output set 2
2022-04-11 23:23:35.538983 num operations 2
2022-04-11 23:23:35.538989 size on input set 1
2022-04-11 23:23:56.468460 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split()) # input\n    N = 0 # counter\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18: # check if all the variables are back to the original state\n            break\n        else:\n            v2 = (v2 + 1) % 2 # increment the variable\n            if v2 == 1:\n                v3 = (v3 + 1) % 3 # increment the variable\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5 # increment the variable\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7 # increment the variable\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11 # increment the variable\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split()) # v2, v3, v5, v7, v11, v13, v17, v19 = (0, 1, 2, 3, 4, 5, 6, 7)\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n"
    }
  ],
  "created": 1649733815,
  "object": "edit"
}
2022-04-11 23:23:56.468891 fix spelling mistakes 2 ['\n\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split()) # input\n    N = 0 # counter\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18: # check if all the variables are back to the original state\n            break\n        else:\n            v2 = (v2 + 1) % 2 # increment the variable\n            if v2 == 1:\n                v3 = (v3 + 1) % 3 # increment the variable\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5 # increment the variable\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7 # increment the variable\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11 # increment the variable\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split()) # v2, v3, v5, v7, v11, v13, v17, v19 = (0, 1, 2, 3, 4, 5, 6, 7)\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n']
2022-04-11 23:23:56.468963 size on output set 2
2022-04-11 23:23:56.468976 size on input set 2
2022-04-11 23:24:01.625106 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split()) # input\n    N = 0 # counter\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18: # check if all the variables are back to the original state\n            break\n        else:\n            v2 = (v2 + 1) % 2 # increment the variable\n            if v2 == 1:\n                v3 = (v3 + 1) % 3 # increment the variable\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5 # increment the variable\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7 # increment the variable\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11 # increment the variable\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13 # increment the variable\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17 # increment the variable\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split()) # input\n    N = 0 # counter\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18: # check if all the variables are back to the original state\n            break\n        else:\n            v2 = (v2 + 1) % 2 # increment the variable\n            if v2 == 1:\n                v3 = (v3 + 1) % 3 # increment the variable\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5 # increment the variable\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7 # increment the variable\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11 # increment the variable\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13 # increment the variable\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17 # increment the variable\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n"
    }
  ],
  "created": 1649733836,
  "object": "edit"
}
2022-04-11 23:24:01.625222 fix syntax errors 2 ['\n\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split()) # input\n    N = 0 # counter\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18: # check if all the variables are back to the original state\n            break\n        else:\n            v2 = (v2 + 1) % 2 # increment the variable\n            if v2 == 1:\n                v3 = (v3 + 1) % 3 # increment the variable\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5 # increment the variable\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7 # increment the variable\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11 # increment the variable\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13 # increment the variable\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17 # increment the variable\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split()) # input\n    N = 0 # counter\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18: # check if all the variables are back to the original state\n            break\n        else:\n            v2 = (v2 + 1) % 2 # increment the variable\n            if v2 == 1:\n                v3 = (v3 + 1) % 3 # increment the variable\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5 # increment the variable\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7 # increment the variable\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11 # increment the variable\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13 # increment the variable\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17 # increment the variable\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n']
2022-04-11 23:24:06.022823 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n"
    }
  ],
  "created": 1649733841,
  "object": "edit"
}
2022-04-11 23:24:06.022977 fix syntax errors 2 ['\n\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    v2, v3, v5, v7, v11, v13, v17, v19 = map(int, input().split())\n    N = 0\n    while True:\n        if v2 == 1 and v3 == 2 and v5 == 4 and v7 == 6 and v11 == 10 and v13 == 12 and v17 == 16 and v19 == 18:\n            break\n        else:\n            v2 = (v2 + 1) % 2\n            if v2 == 1:\n                v3 = (v3 + 1) % 3\n                if v3 == 2:\n                    v5 = (v5 + 1) % 5\n                    if v5 == 4:\n                        v7 = (v7 + 1) % 7\n                        if v7 == 6:\n                            v11 = (v11 + 1) % 11\n                            if v11 == 10:\n                                v13 = (v13 + 1) % 13\n                                if v13 == 12:\n                                    v17 = (v17 + 1) % 17\n                                    if v17 == 16:\n                                        v19 = (v19 + 1) % 19\n                                        if v19 == 18:\n                                            sys.exit(0)\n        N += 1\n    print(N)\n\nmain()\n']
2022-04-11 23:24:06.023021 size on output set 2
