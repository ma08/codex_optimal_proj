2022-04-11 18:13:42.478242 num operations 2
2022-04-11 18:13:42.478277 size on input set 1
2022-04-11 18:13:46.190051 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef solve(n, m, k, grid):\n    return 0\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)] \n    print(solve(n, m, k, grid))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef solve(n, m, k, grid, dp):\n    return 0\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    dp = [[[0 for _ in range(k + 1)] for _ in range(m + 1)] for _ in range(n + 1)]\n    print(solve(n, m, k, grid, dp))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649715222,
  "object": "edit"
}
2022-04-11 18:13:46.190234 fix spelling mistakes 2 ["\n\ndef solve(n, m, k, grid):\n    return 0\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)] \n    print(solve(n, m, k, grid))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef solve(n, m, k, grid, dp):\n    return 0\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    dp = [[[0 for _ in range(k + 1)] for _ in range(m + 1)] for _ in range(n + 1)]\n    print(solve(n, m, k, grid, dp))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 18:13:46.190266 size on output set 2
2022-04-11 18:13:46.190276 size on input set 2
2022-04-11 18:13:49.760485 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef solve(n, m, k, grid):\n    return 0\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    print(solve(n, m, k, grid))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef solve(n, k, grid):\n    return 0\n\ndef main():\n    n, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)] \n    print(solve(n, k, grid))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649715226,
  "object": "edit"
}
2022-04-11 18:13:49.760813 fix syntax errors 2 ["\n\ndef solve(n, m, k, grid):\n    return 0\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    print(solve(n, m, k, grid))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef solve(n, k, grid):\n    return 0\n\ndef main():\n    n, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)] \n    print(solve(n, k, grid))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 18:13:52.832930 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef solve(n, m, k, grid, dp):\n    return 0\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    dp = [[[0 for _ in range(k + 1)] for _ in range(m + 1)] for _ in range(n + 1)]\n    print(solve(n, m, k, grid, dp) % (10 ** 9 + 7))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef solve(n, m, k, grid, dp):\n    return 0\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    dp = [[[0 for _ in range(k + 1)] for _ in range(m + 1)] for _ in range(n)]\n    print(solve(n, m, k, grid, dp))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649715229,
  "object": "edit"
}
2022-04-11 18:13:52.833240 fix syntax errors 2 ["\n\ndef solve(n, m, k, grid, dp):\n    return 0\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    dp = [[[0 for _ in range(k + 1)] for _ in range(m + 1)] for _ in range(n + 1)]\n    print(solve(n, m, k, grid, dp) % (10 ** 9 + 7))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef solve(n, m, k, grid, dp):\n    return 0\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    dp = [[[0 for _ in range(k + 1)] for _ in range(m + 1)] for _ in range(n)]\n    print(solve(n, m, k, grid, dp))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 18:13:52.833281 size on output set 4
2022-04-11 18:13:52.833310 num operations 2
2022-04-11 18:13:52.833320 size on input set 1
2022-04-11 18:13:55.030120 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Solution by Andrew Xing \n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()]\n  grid = [[int(x) for x in input().split()] for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n  dp[1][1][grid[0][0]] = 1\n  \n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n  \n  print(dp[n][m][k])\n\nif __name__ == \"__main__\":\n  main()\n"
    },
    {
      "index": 1,
      "text": "\n\n# Solution by Andrew Xing \n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()]\n  grid = [[int(x) for x in input().split()] for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n  dp[1][1][grid[0][0]] = 1\n  \n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n  \n  print(dp[n][m][k])\n\nif __name__ == \"__main__\":\n  main()\n"
    }
  ],
  "created": 1649715233,
  "object": "edit"
}
2022-04-11 18:13:55.030642 fix spelling mistakes 2 ['\n\n# Solution by Andrew Xing \n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()]\n  grid = [[int(x) for x in input().split()] for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n  dp[1][1][grid[0][0]] = 1\n  \n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n  \n  print(dp[n][m][k])\n\nif __name__ == "__main__":\n  main()\n', '\n\n# Solution by Andrew Xing \n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()]\n  grid = [[int(x) for x in input().split()] for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n  dp[1][1][grid[0][0]] = 1\n  \n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n  \n  print(dp[n][m][k])\n\nif __name__ == "__main__":\n  main()\n']
2022-04-11 18:13:55.030863 size on output set 1
2022-04-11 18:13:55.030891 size on input set 1
2022-04-11 18:14:07.156262 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Solution by Andrew Xing\n\ndef main():\n\n    n, m, k = [int(x) for x in input().split()]\n    grid = [[int(x) for x in input().split()] for i in range(n)]\n\n    dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n    dp[1][1][grid[0][0]] = 1\n\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i == 1 and j == 1:\n                continue\n            for x in range(k+1):\n                if i > 1:\n                    dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n                if j > 1:\n                    dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n\n    print(dp[n][m][k])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n# Solution by Andrew Xing \n\ndef main():\n\n    n, m, k = [int(x) for x in input().split()]\n    grid = [[int(x) for x in input().split()] for i in range(n)]\n  \n    dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n    dp[1][1][grid[0][0]] = 1\n  \n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i == 1 and j == 1:\n                continue\n            for x in range(k+1):\n                if i > 1:\n                    dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n                if j > 1:\n                    dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n  \n    print(dp[n][m][k])\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649715235,
  "object": "edit"
}
2022-04-11 18:14:07.156446 fix syntax errors 2 ['\n\n# Solution by Andrew Xing\n\ndef main():\n\n    n, m, k = [int(x) for x in input().split()]\n    grid = [[int(x) for x in input().split()] for i in range(n)]\n\n    dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n    dp[1][1][grid[0][0]] = 1\n\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i == 1 and j == 1:\n                continue\n            for x in range(k+1):\n                if i > 1:\n                    dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n                if j > 1:\n                    dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n\n    print(dp[n][m][k])\n\nif __name__ == "__main__":\n    main()\n', '\n# Solution by Andrew Xing \n\ndef main():\n\n    n, m, k = [int(x) for x in input().split()]\n    grid = [[int(x) for x in input().split()] for i in range(n)]\n  \n    dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n    dp[1][1][grid[0][0]] = 1\n  \n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i == 1 and j == 1:\n                continue\n            for x in range(k+1):\n                if i > 1:\n                    dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n                if j > 1:\n                    dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n  \n    print(dp[n][m][k])\n\nif __name__ == "__main__":\n    main()\n']
2022-04-11 18:14:07.156463 size on output set 2
