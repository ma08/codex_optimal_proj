["\n\n#------------------------------------------------------------------------------#\n\ndef solve(n):\n    \"\"\"\n    This function solves the problem for a given value of n.\n    \"\"\"\n    # TODO: Solve the problem\n    pass\n\n#------------------------------------------------------------------------------#\n\n# Read input\nn = int(input())\na = [int(input()) for _ in range(n)]\n\n# Solve queries\nfor a_i in a:\n    print(solve(a_i))\n", "\n\n#------------------------------------------------------------------------------#\n\ndef solve(k):\n    \"\"\"\n    This function solves the problem for a given value of k.\n    \"\"\"\n    # If k is 1, return 1\n    if k == 1:\n        return 1\n    # Otherwise, find the length of the block containing k\n    length = 1\n    while (length+1)**2 <= k:\n        length += 1\n    # Reduce k by the number of digits in all the previous blocks\n    k -= (length**2 + length)//2 + 1\n    # Compute the starting value of the block\n    start = length\n    # Return the digit at the k-th position\n    return int(str(start)[k-1])\n\n#------------------------------------------------------------------------------#\n\n# Read input\nq = int(input())\nk = [int(input()) for _ in range(q)]\n\n# Solve queries\nfor k_i in k:\n    print(solve(k_i))\n", "\n#-----------------------------------------------------------------------------#\n\ndef solve(k):\n    \"\"\"\n    This function solves the problem for a given value of k.\n    \"\"\"\n    # If k is 1, return 1\n    if k == 1:\n        return 1\n    # Otherwise, find the length of the block containing k\n    length = 1\n    while (length + 1) ** 2 < k:\n        length += 1\n    # Reduce k by the number of digits in all the previous blocks\n    k -= (length ** 2 + length) // 2\n    # Compute the starting value of the block\n    start = length\n    # Return the digit at the kth position\n    return int(str(start)[k - 1])\n\n\n# -----------------------------------------------------------------------------#\n\n# Read input\nq = int(input())\nk = [int(input()) for _ in range(q)]\n\n# Solve queries\nfor k_i in k:\n    print(solve(k_i))\n", "\n#-----------------------------------------------------------------------------#\n\ndef solve(k):\n    \"\"\"\n    This function solves the problem for a given value of k.\n    \"\"\"\n    # If k is 1, return 1\n    if k == 1:\n        return 1\n    # Otherwise, find the length of the block containing k\n    length = 1\n    while (length+1)**2 < k:\n        length += 1\n    # Reduce k by the number of digits in all the previous blocks\n    k -= (length**2 + length)//2\n    # Compute the starting value of the block\n    start = length\n    # Return the digit at the kth position\n    return int(str(start)[k-1])\n#-----------------------------------------------------------------------------#\n# Read input\nq = int(input())\nk = [int(input()) for _ in range(q)]\n# Solve queries\nfor k_i in k:\n    print(solve(k_i))\n"]