2022-04-12 00:34:48.029535 num operations 2
2022-04-12 00:34:48.029561 size on input set 1
2022-04-12 00:34:50.250813 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nword = input()\nletters = input()\n\n# create a dictionary of letters and their positions\nletter_dict = {}\nfor i in range(len(word)):\n    if word[i] in letter_dict:\n        letter_dict[word[i]].append(i)\n    else:\n        letter_dict[word[i]] = [i]\n\n# check if wins\nwin = True\nfor letter in letters:\n    if letter in letter_dict:\n        del letter_dict[letter]\n        if not letter_dict:\n            break\n    else:\n        win = False\n        break\n\n# print output\nif win:\n    print(\"WIN\")\nelse:\n    print(\"LOSE\")\n"
    },
    {
      "index": 1,
      "text": "\n\nword = input()\nletters = input()\n\n# create a dictionary of letters and their positions\nletter_dict = {}\nfor i in range(len(word)):\n    if word[i] in letter_dict:\n        letter_dict[word[i]].append(i)\n    else:\n        letter_dict[word[i]] = [i]\n\n# check if the user wins\nwin = True\nfor letter in letters:\n    if letter in letter_dict:\n        del letter_dict[letter]\n        if not letter_dict:\n            break\n    else:\n        win = False\n        break\n\n# print output\nif win:\n    print(\"WIN\")\nelse:\n    print(\"LOSE\")\n"
    }
  ],
  "created": 1649738088,
  "object": "edit"
}
2022-04-12 00:34:50.251170 fix spelling mistakes 2 ['\n\nword = input()\nletters = input()\n\n# create a dictionary of letters and their positions\nletter_dict = {}\nfor i in range(len(word)):\n    if word[i] in letter_dict:\n        letter_dict[word[i]].append(i)\n    else:\n        letter_dict[word[i]] = [i]\n\n# check if wins\nwin = True\nfor letter in letters:\n    if letter in letter_dict:\n        del letter_dict[letter]\n        if not letter_dict:\n            break\n    else:\n        win = False\n        break\n\n# print output\nif win:\n    print("WIN")\nelse:\n    print("LOSE")\n', '\n\nword = input()\nletters = input()\n\n# create a dictionary of letters and their positions\nletter_dict = {}\nfor i in range(len(word)):\n    if word[i] in letter_dict:\n        letter_dict[word[i]].append(i)\n    else:\n        letter_dict[word[i]] = [i]\n\n# check if the user wins\nwin = True\nfor letter in letters:\n    if letter in letter_dict:\n        del letter_dict[letter]\n        if not letter_dict:\n            break\n    else:\n        win = False\n        break\n\n# print output\nif win:\n    print("WIN")\nelse:\n    print("LOSE")\n']
2022-04-12 00:34:50.251205 size on output set 2
2022-04-12 00:34:50.251215 size on input set 2
2022-04-12 00:34:52.710722 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nword = input(\"Enter a word: \")\nletters = input(\"Enter letters: \")\n\n# create a dictionary of letters and their positions\nletter_dict = {}\nfor i in range(len(word)):\n    if word[i] in letter_dict:\n        letter_dict[word[i]].append(i)\n    else:\n        letter_dict[word[i]] = [i]\n\n# check if the user wins\nwin = True\nfor letter in letters:\n    if letter in letter_dict:\n        del letter_dict[letter]\n        if not letter_dict:\n            break\n    else:\n        win = False\n        break\n\n# print output\nif win:\n    print(\"WIN\")\nelse:\n    print(\"LOSE\")\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/python3\n\nword = input()\nletters = input()\n\n# create a dictionary of letters and their positions\nletter_dict = {}\nfor i in range(len(word)):\n    if word[i] in letter_dict:\n        letter_dict[word[i]].append(i)\n    else:\n        letter_dict[word[i]] = [i]\n\n# check if the user wins\nwin = True\nfor letter in letters:\n    if letter in letter_dict:\n        del letter_dict[letter]\n        if not letter_dict:\n            break\n    else:\n        win = False\n        break\n\n# print output\nif win:\n    print(\"WIN\") \nelse:\n    print(\"LOSE\")\n"
    }
  ],
  "created": 1649738090,
  "object": "edit"
}
2022-04-12 00:34:52.710917 fix syntax errors 2 ['\n\nword = input("Enter a word: ")\nletters = input("Enter letters: ")\n\n# create a dictionary of letters and their positions\nletter_dict = {}\nfor i in range(len(word)):\n    if word[i] in letter_dict:\n        letter_dict[word[i]].append(i)\n    else:\n        letter_dict[word[i]] = [i]\n\n# check if the user wins\nwin = True\nfor letter in letters:\n    if letter in letter_dict:\n        del letter_dict[letter]\n        if not letter_dict:\n            break\n    else:\n        win = False\n        break\n\n# print output\nif win:\n    print("WIN")\nelse:\n    print("LOSE")\n', '#!/usr/bin/python3\n\nword = input()\nletters = input()\n\n# create a dictionary of letters and their positions\nletter_dict = {}\nfor i in range(len(word)):\n    if word[i] in letter_dict:\n        letter_dict[word[i]].append(i)\n    else:\n        letter_dict[word[i]] = [i]\n\n# check if the user wins\nwin = True\nfor letter in letters:\n    if letter in letter_dict:\n        del letter_dict[letter]\n        if not letter_dict:\n            break\n    else:\n        win = False\n        break\n\n# print output\nif win:\n    print("WIN") \nelse:\n    print("LOSE")\n']
2022-04-12 00:34:58.681142 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nword = input()\nletters = input()\n\n# create a dictionary of letters and their positions\nletter_dict = {}\nfor i in range(len(word)):\n\tif word[i] in letter_dict:\n\t\tletter_dict[word[i]].append(i)\n\telse:\n\t\tletter_dict[word[i]] = [i]\n\n# check if wins\nwin = True\nfor letter in letters:\n\tif letter in letter_dict:\n\t\tdel letter_dict[letter]\n\t\tif not letter_dict:\n\t\t\tbreak\n\telse:\n\t\twin = False\n\t\tbreak\n\n# print output\nif win:\n\tprint(\"WIN\")\nelse:\n\tprint(\"LOSE\")\n"
    },
    {
      "index": 1,
      "text": "\nword = input()\nletters = input()\n\n# create a dictionary of letters and their positions\nletter_dict = {}\nfor i in range(len(word)):\n    if word[i] in letter_dict:\n        letter_dict[word[i]].append(i)\n    else:\n        letter_dict[word[i]] = [i]\n\n# check if wins\nwin = True\nfor letter in letters:\n    if letter in letter_dict:\n        del letter_dict[letter]\n        if not letter_dict:\n            break\n    else:\n        win = False\n        break\n\n# print output\nif win:\n    print(\"WIN\")\nelse:\n    print(\"LOSE\")\n"
    }
  ],
  "created": 1649738092,
  "object": "edit"
}
2022-04-12 00:34:58.681243 fix syntax errors 2 ['\n\nword = input()\nletters = input()\n\n# create a dictionary of letters and their positions\nletter_dict = {}\nfor i in range(len(word)):\n\tif word[i] in letter_dict:\n\t\tletter_dict[word[i]].append(i)\n\telse:\n\t\tletter_dict[word[i]] = [i]\n\n# check if wins\nwin = True\nfor letter in letters:\n\tif letter in letter_dict:\n\t\tdel letter_dict[letter]\n\t\tif not letter_dict:\n\t\t\tbreak\n\telse:\n\t\twin = False\n\t\tbreak\n\n# print output\nif win:\n\tprint("WIN")\nelse:\n\tprint("LOSE")\n', '\nword = input()\nletters = input()\n\n# create a dictionary of letters and their positions\nletter_dict = {}\nfor i in range(len(word)):\n    if word[i] in letter_dict:\n        letter_dict[word[i]].append(i)\n    else:\n        letter_dict[word[i]] = [i]\n\n# check if wins\nwin = True\nfor letter in letters:\n    if letter in letter_dict:\n        del letter_dict[letter]\n        if not letter_dict:\n            break\n    else:\n        win = False\n        break\n\n# print output\nif win:\n    print("WIN")\nelse:\n    print("LOSE")\n']
2022-04-12 00:34:58.681258 size on output set 4
2022-04-12 00:34:58.681270 num operations 2
2022-04-12 00:34:58.681273 size on input set 1
2022-04-12 00:35:01.290852 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nimport random\n\ndef main():\n    hangman = sys.stdin.readline().strip()\n    alphabet = sys.stdin.readline().strip()\n    guessed = set()\n    components = 0\n    while components < 6:\n        guess = alphabet[0]\n        alphabet = alphabet[1:]\n        if guess not in guessed:\n            guessed.add(guess)\n            if guess not in hangman:\n                components += 1\n            elif all(letter in guessed for letter in hangman):\n                print(\"WIN\")\n                return\n    print(\"LOSE\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nimport random\n\ndef main():\n    hangman = sys.stdin.readline().strip()\n    alphabet = sys.stdin.readline().strip()\n    guessed = set()\n    components = 0\n    while components < 10:\n        guess = random.choice(alphabet)\n        alphabet = alphabet.replace(guess, \"\")\n        if guess not in guessed:\n            guessed.add(guess)\n            if guess not in hangman:\n                components += 1\n            elif all(letter in guessed for letter in hangman):\n                print(\"WIN\")\n                return\n    print(\"LOSE\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649738098,
  "object": "edit"
}
2022-04-12 00:35:01.291481 fix spelling mistakes 2 ['\n\nimport sys\nimport random\n\ndef main():\n    hangman = sys.stdin.readline().strip()\n    alphabet = sys.stdin.readline().strip()\n    guessed = set()\n    components = 0\n    while components < 6:\n        guess = alphabet[0]\n        alphabet = alphabet[1:]\n        if guess not in guessed:\n            guessed.add(guess)\n            if guess not in hangman:\n                components += 1\n            elif all(letter in guessed for letter in hangman):\n                print("WIN")\n                return\n    print("LOSE")\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\nimport random\n\ndef main():\n    hangman = sys.stdin.readline().strip()\n    alphabet = sys.stdin.readline().strip()\n    guessed = set()\n    components = 0\n    while components < 10:\n        guess = random.choice(alphabet)\n        alphabet = alphabet.replace(guess, "")\n        if guess not in guessed:\n            guessed.add(guess)\n            if guess not in hangman:\n                components += 1\n            elif all(letter in guessed for letter in hangman):\n                print("WIN")\n                return\n    print("LOSE")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 00:35:01.291554 size on output set 2
2022-04-12 00:35:01.291684 size on input set 2
2022-04-12 00:35:04.798184 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\nimport sys\nimport random\n\ndef main():\n    hangman = sys.stdin.readline().strip()\n    alphabet = sys.stdin.readline().strip()\n    guessed = set()\n    components = 0\n    while components < 6:\n        guess = alphabet[0]\n        alphabet = alphabet[1:]\n        if guess not in guessed:\n            guessed.add(guess)\n            if guess not in hangman:\n                components += 1\n            elif all(letter in guessed for letter in hangman):\n                print(\"WIN\")\n                return\n    print(\"LOSE\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nimport random\n\ndef main():\n    hangman = sys.stdin.readline().strip()\n    alphabet = sys.stdin.readline().strip()\n    guessed = set()\n    components = 0\n    while components < 6:\n        guess = alphabet[0]\n        alphabet = alphabet[1:]\n        if guess not in guessed:\n            guessed.add(guess)\n            if guess not in hangman:\n                components += 1\n            elif all(letter in guessed for letter in hangman):\n                print(\"WIN\")\n                return\n    print(\"LOSE\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649738101,
  "object": "edit"
}
2022-04-12 00:35:04.798349 fix syntax errors 2 ['#!/usr/bin/env python3\n\nimport sys\nimport random\n\ndef main():\n    hangman = sys.stdin.readline().strip()\n    alphabet = sys.stdin.readline().strip()\n    guessed = set()\n    components = 0\n    while components < 6:\n        guess = alphabet[0]\n        alphabet = alphabet[1:]\n        if guess not in guessed:\n            guessed.add(guess)\n            if guess not in hangman:\n                components += 1\n            elif all(letter in guessed for letter in hangman):\n                print("WIN")\n                return\n    print("LOSE")\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\nimport random\n\ndef main():\n    hangman = sys.stdin.readline().strip()\n    alphabet = sys.stdin.readline().strip()\n    guessed = set()\n    components = 0\n    while components < 6:\n        guess = alphabet[0]\n        alphabet = alphabet[1:]\n        if guess not in guessed:\n            guessed.add(guess)\n            if guess not in hangman:\n                components += 1\n            elif all(letter in guessed for letter in hangman):\n                print("WIN")\n                return\n    print("LOSE")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 00:35:06.850823 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/python3\n\nimport sys\nimport random\n\ndef main():\n    hangman = sys.stdin.readline().strip()\n    alphabet = sys.stdin.readline().strip()\n    guessed = set()\n    components = 0\n    while components < 10:\n        guess = random.choice(alphabet)\n        alphabet = alphabet.replace(guess, \"\")\n        if guess not in guessed:\n            guessed.add(guess)\n            if guess not in hangman:\n                components += 1\n            elif all(letter in guessed for letter in hangman):\n                print(\"WIN\")\n                return\n    print(\"LOSE\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nimport random\n\ndef main():\n    hangman = sys.stdin.readline().strip()\n    alphabet = sys.stdin.readline().strip()\n    guessed = set()\n    components = 0\n    while components < 10:\n        guess = random.choice(alphabet)\n        alphabet = alphabet.replace(guess, \"\")\n        if guess not in guessed:\n            guessed.add(guess)\n            if guess not in hangman:\n                components += 1\n            elif all(letter in guessed for letter in hangman):\n                print(\"WIN\")\n                return\n    print(\"LOSE\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649738105,
  "object": "edit"
}
2022-04-12 00:35:06.851146 fix syntax errors 2 ['#!/usr/bin/python3\n\nimport sys\nimport random\n\ndef main():\n    hangman = sys.stdin.readline().strip()\n    alphabet = sys.stdin.readline().strip()\n    guessed = set()\n    components = 0\n    while components < 10:\n        guess = random.choice(alphabet)\n        alphabet = alphabet.replace(guess, "")\n        if guess not in guessed:\n            guessed.add(guess)\n            if guess not in hangman:\n                components += 1\n            elif all(letter in guessed for letter in hangman):\n                print("WIN")\n                return\n    print("LOSE")\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\nimport random\n\ndef main():\n    hangman = sys.stdin.readline().strip()\n    alphabet = sys.stdin.readline().strip()\n    guessed = set()\n    components = 0\n    while components < 10:\n        guess = random.choice(alphabet)\n        alphabet = alphabet.replace(guess, "")\n        if guess not in guessed:\n            guessed.add(guess)\n            if guess not in hangman:\n                components += 1\n            elif all(letter in guessed for letter in hangman):\n                print("WIN")\n                return\n    print("LOSE")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 00:35:06.851185 size on output set 4
2022-04-12 00:35:06.851202 num operations 2
2022-04-12 00:35:06.851340 size on input set 1
2022-04-12 00:35:09.389727 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    word = sys.stdin.readline().strip()\n    perm = sys.stdin.readline().strip()\n\n    # check if the word is a permutation of the prefix\n    for i in range(len(word)):\n        if word[i] not in perm[:i+1]:\n            print('LOSE')\n            return\n\n    print('WIN')\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    word = sys.stdin.readline().strip()\n    perm = sys.stdin.readline().strip()\n\n    # check if Ned wins\n    for i in range(len(word)):\n        if word[i] not in perm[:i+1]:\n            print('LOSE')\n            return\n\n    print('WIN')\n\nmain()\n"
    }
  ],
  "created": 1649738107,
  "object": "edit"
}
2022-04-12 00:35:09.390017 fix spelling mistakes 2 ["#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    word = sys.stdin.readline().strip()\n    perm = sys.stdin.readline().strip()\n\n    # check if the word is a permutation of the prefix\n    for i in range(len(word)):\n        if word[i] not in perm[:i+1]:\n            print('LOSE')\n            return\n\n    print('WIN')\n\nmain()\n", "\nimport sys\n\ndef main():\n    word = sys.stdin.readline().strip()\n    perm = sys.stdin.readline().strip()\n\n    # check if Ned wins\n    for i in range(len(word)):\n        if word[i] not in perm[:i+1]:\n            print('LOSE')\n            return\n\n    print('WIN')\n\nmain()\n"]
2022-04-12 00:35:09.390048 size on output set 2
2022-04-12 00:35:09.390058 size on input set 2
2022-04-12 00:35:13.428970 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef main():\n    word = sys.stdin.readline().strip().lower()\n    perm = sys.stdin.readline().strip().lower()\n\n    # check if Ned wins\n    for i in range(len(word)):\n        if word[i] not in perm[:i + 1]:\n            print('LOSE')\n            return\n\n\n    print('WIN')\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    word = sys.stdin.readline().strip().lower()\n    perm = sys.stdin.readline().strip().lower()\n\n    # check if Ned wins\n    for i in range(len(word)):\n        if word[i] not in perm[:i + 1]:\n            print('LOSE')\n            return\n\n    print('WIN')\n\nmain()\n"
    }
  ],
  "created": 1649738109,
  "object": "edit"
}
2022-04-12 00:35:13.429156 fix syntax errors 2 ["import sys\n\ndef main():\n    word = sys.stdin.readline().strip().lower()\n    perm = sys.stdin.readline().strip().lower()\n\n    # check if Ned wins\n    for i in range(len(word)):\n        if word[i] not in perm[:i + 1]:\n            print('LOSE')\n            return\n\n\n    print('WIN')\n\nmain()\n", "\nimport sys\n\ndef main():\n    word = sys.stdin.readline().strip().lower()\n    perm = sys.stdin.readline().strip().lower()\n\n    # check if Ned wins\n    for i in range(len(word)):\n        if word[i] not in perm[:i + 1]:\n            print('LOSE')\n            return\n\n    print('WIN')\n\nmain()\n"]
2022-04-12 00:35:16.412763 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    word = sys.stdin.readline().strip().lower()\n    perm = sys.stdin.readline().strip().lower()\n\n    # check if the word is a permutation of the prefix\n    for i in range(len(word)):\n        if word[i] not in perm[:i+1]:\n            print('LOSE')\n            return\n\n    print('WIN')\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    word = sys.stdin.readline().strip().lower()\n    perm = sys.stdin.readline().strip().lower()\n\n    # check if the word is a permutation of the prefix\n    for i in range(len(word)):\n        if word[i] not in perm[:i+1]:\n            print('LOSE')\n            return\n\n    print('WIN')\n\nmain()\n"
    }
  ],
  "created": 1649738113,
  "object": "edit"
}
2022-04-12 00:35:16.412972 fix syntax errors 2 ["#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    word = sys.stdin.readline().strip().lower()\n    perm = sys.stdin.readline().strip().lower()\n\n    # check if the word is a permutation of the prefix\n    for i in range(len(word)):\n        if word[i] not in perm[:i+1]:\n            print('LOSE')\n            return\n\n    print('WIN')\n\nmain()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    word = sys.stdin.readline().strip().lower()\n    perm = sys.stdin.readline().strip().lower()\n\n    # check if the word is a permutation of the prefix\n    for i in range(len(word)):\n        if word[i] not in perm[:i+1]:\n            print('LOSE')\n            return\n\n    print('WIN')\n\nmain()\n"]
2022-04-12 00:35:16.413000 size on output set 3
2022-04-12 00:35:16.413014 num operations 2
2022-04-12 00:35:16.413022 size on input set 1
2022-04-12 00:35:19.189167 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nword = input()\nperm = input()\n\nprint(\"WIN\" if all(map(lambda x: x in perm, word)) else \"LOSE\")\n"
    },
    {
      "index": 1,
      "text": "\n\nword = input()\nperm = input()\n\nprint(\"WIN\" if all(map(lambda x: x in perm, word)) else \"LOSE\") \n"
    }
  ],
  "created": 1649738116,
  "object": "edit"
}
2022-04-12 00:35:19.189411 fix spelling mistakes 2 ['\nword = input()\nperm = input()\n\nprint("WIN" if all(map(lambda x: x in perm, word)) else "LOSE")\n', '\n\nword = input()\nperm = input()\n\nprint("WIN" if all(map(lambda x: x in perm, word)) else "LOSE") \n']
2022-04-12 00:35:19.189432 size on output set 2
2022-04-12 00:35:19.189438 size on input set 2
2022-04-12 00:35:22.204689 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nword = input()\nperm = input()\n\nprint(\"WIN\" if all(map(lambda x: x in perm, word)) else \"LOSE\")\n"
    },
    {
      "index": 1,
      "text": "\nword = input()\nperm = input()\n\nprint(\"WIN\" if all(map(lambda x: x in perm, word)) else \"LOSE\")\n"
    }
  ],
  "created": 1649738119,
  "object": "edit"
}
2022-04-12 00:35:22.204811 fix syntax errors 2 ['\n\nword = input()\nperm = input()\n\nprint("WIN" if all(map(lambda x: x in perm, word)) else "LOSE")\n', '\nword = input()\nperm = input()\n\nprint("WIN" if all(map(lambda x: x in perm, word)) else "LOSE")\n']
2022-04-12 00:35:24.880834 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nword = input()\nperm = input()\n\nprint(\"WIN\" if all(x in perm for x in word) else \"LOSE\")\n"
    },
    {
      "index": 1,
      "text": "\nword = input()\nperm = input()\n\nprint(\"WIN\" if all(x in perm for x in word) else \"LOSE\")\n"
    }
  ],
  "created": 1649738122,
  "object": "edit"
}
2022-04-12 00:35:24.880931 fix syntax errors 2 ['\nword = input()\nperm = input()\n\nprint("WIN" if all(x in perm for x in word) else "LOSE")\n', '\nword = input()\nperm = input()\n\nprint("WIN" if all(x in perm for x in word) else "LOSE")\n']
2022-04-12 00:35:24.880941 size on output set 3
2022-04-12 00:35:24.880955 num operations 2
2022-04-12 00:35:24.880958 size on input set 1
2022-04-12 00:35:28.557469 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    word = input()\n    permu = input()\n    word_set = set(word)\n    permu_set = set(permu)\n    if len(word_set) > len(permu_set):\n        print(\"LOSE\")\n    else:\n        print(\"WIN\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    word = input()\n    # print(word)\n    # print(perm)\n    perm = input()\n    word_set = set(word)\n    perm_set = set(perm)\n    # print(word_set)\n    # print(perm_set)\n    if len(word_set) > len(perm_set) or len(word) > len(perm):\n        print(\"LOSE\")\n    else:\n        print(\"WIN\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649738125,
  "object": "edit"
}
2022-04-12 00:35:28.557572 fix spelling mistakes 2 ['\n\ndef main():\n    word = input()\n    permu = input()\n    word_set = set(word)\n    permu_set = set(permu)\n    if len(word_set) > len(permu_set):\n        print("LOSE")\n    else:\n        print("WIN")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    word = input()\n    # print(word)\n    # print(perm)\n    perm = input()\n    word_set = set(word)\n    perm_set = set(perm)\n    # print(word_set)\n    # print(perm_set)\n    if len(word_set) > len(perm_set) or len(word) > len(perm):\n        print("LOSE")\n    else:\n        print("WIN")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 00:35:28.557646 size on output set 2
2022-04-12 00:35:28.557658 size on input set 2
2022-04-12 00:35:31.485317 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    word = input()\n    perm = input()\n    word_set = set(word)\n    perm_set = set(perm)\n    if len(word_set) > len(perm_set) or len(word) > len(perm):\n        print(\"LOSE\")\n    else:\n        print(\"WIN\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    word = input()\n    perm = input()\n    word_set = set(word)\n    perm_set = set(perm)\n    if len(word_set) > len(perm_set) or len(word) > len(perm):\n        print(\"LOSE\")\n    else:\n        print(\"WIN\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649738128,
  "object": "edit"
}
2022-04-12 00:35:31.485415 fix syntax errors 2 ['\n\ndef main():\n    word = input()\n    perm = input()\n    word_set = set(word)\n    perm_set = set(perm)\n    if len(word_set) > len(perm_set) or len(word) > len(perm):\n        print("LOSE")\n    else:\n        print("WIN")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    word = input()\n    perm = input()\n    word_set = set(word)\n    perm_set = set(perm)\n    if len(word_set) > len(perm_set) or len(word) > len(perm):\n        print("LOSE")\n    else:\n        print("WIN")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 00:35:34.246776 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    word = input().strip()\n    permu = input().strip()\n    word_set = set(word)\n    permu_set = set(permu)\n    if len(word_set) > len(permu_set):\n        print(\"LOSE\")\n    else:\n        print(\"WIN\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    word = input(\"Enter word: \")\n    permu = input(\"Enter permutation: \")\n    word_set = set(word)\n    permu_set = set(permu)\n    if len(word_set) > len(permu_set):\n        print(\"LOSE\")\n    else:\n        print(\"WIN\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649738131,
  "object": "edit"
}
2022-04-12 00:35:34.246986 fix syntax errors 2 ['\n\ndef main():\n    word = input().strip()\n    permu = input().strip()\n    word_set = set(word)\n    permu_set = set(permu)\n    if len(word_set) > len(permu_set):\n        print("LOSE")\n    else:\n        print("WIN")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    word = input("Enter word: ")\n    permu = input("Enter permutation: ")\n    word_set = set(word)\n    permu_set = set(permu)\n    if len(word_set) > len(permu_set):\n        print("LOSE")\n    else:\n        print("WIN")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 00:35:34.247013 size on output set 3
2022-04-12 00:35:34.247033 num operations 2
2022-04-12 00:35:34.247039 size on input set 1
2022-04-12 00:35:37.282709 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nword = input().upper()\npermutation = input().upper()\n\nword_dict = {}\nfor letter in word:\n    if letter not in word_dict:\n        word_dict[letter] = 1\n    else:\n        word_dict[letter] += 1\n\nguesses_left = 8\nfor letter in permutation:\n    if letter in word_dict:\n        word_dict[letter] -= 1\n        if word_dict[letter] == 0:\n            word_dict.pop(letter)\n            if len(word_dict) == 0:\n                print('WIN')\n                break\n    else:\n        guesses_left -= 1\n        if guesses_left == 0:\n            print('LOSE')\n            break\n"
    },
    {
      "index": 1,
      "text": "\n\nword = input().lower()\npermutation = input().lower()\n\nword_dict = {}\nfor letter in word:\n    if letter not in word_dict:\n        word_dict[letter] = 1\n    else:\n        word_dict[letter] += 1\n\nguesses_left = 10\nfor letter in permutation:\n    if letter in word_dict:\n        word_dict[letter] -= 1\n        if word_dict[letter] == 0:\n            word_dict.pop(letter)\n            if len(word_dict) == 0:\n                print('WIN')\n                break\n    else:\n        guesses_left -= 1\n        if guesses_left == 0:\n            print('LOSE')\n            break\n"
    }
  ],
  "created": 1649738134,
  "object": "edit"
}
2022-04-12 00:35:37.282924 fix spelling mistakes 2 ["\n\nword = input().upper()\npermutation = input().upper()\n\nword_dict = {}\nfor letter in word:\n    if letter not in word_dict:\n        word_dict[letter] = 1\n    else:\n        word_dict[letter] += 1\n\nguesses_left = 8\nfor letter in permutation:\n    if letter in word_dict:\n        word_dict[letter] -= 1\n        if word_dict[letter] == 0:\n            word_dict.pop(letter)\n            if len(word_dict) == 0:\n                print('WIN')\n                break\n    else:\n        guesses_left -= 1\n        if guesses_left == 0:\n            print('LOSE')\n            break\n", "\n\nword = input().lower()\npermutation = input().lower()\n\nword_dict = {}\nfor letter in word:\n    if letter not in word_dict:\n        word_dict[letter] = 1\n    else:\n        word_dict[letter] += 1\n\nguesses_left = 10\nfor letter in permutation:\n    if letter in word_dict:\n        word_dict[letter] -= 1\n        if word_dict[letter] == 0:\n            word_dict.pop(letter)\n            if len(word_dict) == 0:\n                print('WIN')\n                break\n    else:\n        guesses_left -= 1\n        if guesses_left == 0:\n            print('LOSE')\n            break\n"]
2022-04-12 00:35:37.282965 size on output set 2
2022-04-12 00:35:37.282976 size on input set 2
2022-04-12 00:35:44.786741 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nword = input().upper()  # input word\npermutation = input().upper()  # input permutation\n\nword_dict = {}  # dictionary of letters in word\nfor letter in word:\n    if letter not in word_dict:\n        word_dict[letter] = 1\n    else:\n        word_dict[letter] += 1\n\nguesses_left = 8  # number of guesses left\nfor letter in permutation:\n    if letter in word_dict:  # if letter is in word\n        word_dict[letter] -= 1\n        if word_dict[letter] == 0:  # if letter is not in word\n            word_dict.pop(letter)\n            if len(word_dict) == 0:  # if word is guessed\n                print('WIN')\n                break\n    else:  # if letter is not in word\n        guesses_left -= 1\n        if guesses_left == 0:  # if no guesses left\n            print('LOSE')\n            break\n"
    },
    {
      "index": 1,
      "text": "\n\nword = input().upper().strip()\npermutation = input().upper().strip()\n\nword_dict = {}\nfor letter in word:\n    if letter not in word_dict:\n        word_dict[letter] = 1\n    else:\n        word_dict[letter] += 1\n\nguesses_left = 8\nfor letter in permutation:\n    if letter in word_dict:\n        word_dict[letter] -= 1\n        if word_dict[letter] == 0:\n            word_dict.pop(letter)\n            if len(word_dict) == 0:\n                print('WIN')\n                exit()\n    else:\n        guesses_left -= 1\n        if guesses_left == 0:\n            print('LOSE')\n            exit()\n"
    }
  ],
  "created": 1649738137,
  "object": "edit"
}
2022-04-12 00:35:44.786980 fix syntax errors 2 ["\n\nword = input().upper()  # input word\npermutation = input().upper()  # input permutation\n\nword_dict = {}  # dictionary of letters in word\nfor letter in word:\n    if letter not in word_dict:\n        word_dict[letter] = 1\n    else:\n        word_dict[letter] += 1\n\nguesses_left = 8  # number of guesses left\nfor letter in permutation:\n    if letter in word_dict:  # if letter is in word\n        word_dict[letter] -= 1\n        if word_dict[letter] == 0:  # if letter is not in word\n            word_dict.pop(letter)\n            if len(word_dict) == 0:  # if word is guessed\n                print('WIN')\n                break\n    else:  # if letter is not in word\n        guesses_left -= 1\n        if guesses_left == 0:  # if no guesses left\n            print('LOSE')\n            break\n", "\n\nword = input().upper().strip()\npermutation = input().upper().strip()\n\nword_dict = {}\nfor letter in word:\n    if letter not in word_dict:\n        word_dict[letter] = 1\n    else:\n        word_dict[letter] += 1\n\nguesses_left = 8\nfor letter in permutation:\n    if letter in word_dict:\n        word_dict[letter] -= 1\n        if word_dict[letter] == 0:\n            word_dict.pop(letter)\n            if len(word_dict) == 0:\n                print('WIN')\n                exit()\n    else:\n        guesses_left -= 1\n        if guesses_left == 0:\n            print('LOSE')\n            exit()\n"]
2022-04-12 00:35:54.426735 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nword = input().lower().strip()\npermutation = input().lower().strip()\n\nword_dict = {}\nfor letter in word:\n    if letter not in word_dict:\n        word_dict[letter] = 1\n    else:\n        word_dict[letter] += 1\n\nguesses_left = 10\nfor letter in permutation:\n    if letter in word_dict:\n        word_dict[letter] -= 1\n        if word_dict[letter] == 0:\n            word_dict.pop(letter)\n            if len(word_dict) == 0:\n                print('WIN')\n                break\n        else:\n            print('WIN')\n    else:\n        guesses_left -= 1\n        if guesses_left == 0:\n            print('LOSE')\n            break\n"
    },
    {
      "index": 1,
      "text": "\n#\n# word = input().lower()\n# permutation = input().lower()\n#\n# word_dict = {}\n# for letter in word:\n#     if letter not in word_dict:\n#         word_dict[letter] = 1\n#     else:\n#         word_dict[letter] += 1\n#\n# guesses_left = 10\n# for letter in permutation:\n#     if letter in word_dict:\n#         word_dict[letter] -= 1\n#         if word_dict[letter] == 0:\n#             word_dict.pop(letter)\n#             if len(word_dict) == 0:\n#                 print('WIN')\n#                 break\n#     else:\n#         guesses_left -= 1\n#         if guesses_left == 0:\n#             print('LOSE')\n#             break\n"
    }
  ],
  "created": 1649738144,
  "object": "edit"
}
2022-04-12 00:35:54.426895 fix syntax errors 2 ["\n\nword = input().lower().strip()\npermutation = input().lower().strip()\n\nword_dict = {}\nfor letter in word:\n    if letter not in word_dict:\n        word_dict[letter] = 1\n    else:\n        word_dict[letter] += 1\n\nguesses_left = 10\nfor letter in permutation:\n    if letter in word_dict:\n        word_dict[letter] -= 1\n        if word_dict[letter] == 0:\n            word_dict.pop(letter)\n            if len(word_dict) == 0:\n                print('WIN')\n                break\n        else:\n            print('WIN')\n    else:\n        guesses_left -= 1\n        if guesses_left == 0:\n            print('LOSE')\n            break\n", "\n#\n# word = input().lower()\n# permutation = input().lower()\n#\n# word_dict = {}\n# for letter in word:\n#     if letter not in word_dict:\n#         word_dict[letter] = 1\n#     else:\n#         word_dict[letter] += 1\n#\n# guesses_left = 10\n# for letter in permutation:\n#     if letter in word_dict:\n#         word_dict[letter] -= 1\n#         if word_dict[letter] == 0:\n#             word_dict.pop(letter)\n#             if len(word_dict) == 0:\n#                 print('WIN')\n#                 break\n#     else:\n#         guesses_left -= 1\n#         if guesses_left == 0:\n#             print('LOSE')\n#             break\n"]
2022-04-12 00:35:54.426924 size on output set 4
2022-04-12 00:35:54.426936 num operations 2
2022-04-12 00:35:54.426942 size on input set 1
2022-04-12 00:36:00.498450 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nimport random\n\nword = input()\npermutation = input()\n\n# Check if Ned wins.\ndef is_win(word, permutation):\n    # Check if word contains letters from permutation.\n    for letter in permutation:\n        if letter in word:\n            return True\n    return False\n\n# Check if Ned loses.\ndef is_lose(word, permutation):\n    # Check if word contains letters not in permutation\n    for letter in word:\n        if letter not in permutation:\n            return True\n    return False\n\n# Print result\nif is_win(word, permutation):\n    print(\"WIN\")\nelif is_lose(word, permutation):\n    print(\"LOSE\")\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nimport random\n\nword = input()\npermutation = input()\n\n# Check if Ned wins.\ndef is_win(word, permutation):\n    # Check if word contains letters from permutation.\n    for letter in permutation:\n        if letter in word:\n            return True\n    return False\n\n# Check if Ned loses.\ndef is_lose(word, permutation):\n    # Check if word contains letters not in permutation\n    for letter in word:\n        if letter not in permutation:\n            return True\n    return False\n\n# Print result\nif is_win(word, permutation):\n    print(\"WIN\")\nelif is_lose(word, permutation):\n    print(\"LOSE\")\n"
    }
  ],
  "created": 1649738154,
  "object": "edit"
}
2022-04-12 00:36:00.498585 fix spelling mistakes 2 ['\n\nimport sys\nimport random\n\nword = input()\npermutation = input()\n\n# Check if Ned wins.\ndef is_win(word, permutation):\n    # Check if word contains letters from permutation.\n    for letter in permutation:\n        if letter in word:\n            return True\n    return False\n\n# Check if Ned loses.\ndef is_lose(word, permutation):\n    # Check if word contains letters not in permutation\n    for letter in word:\n        if letter not in permutation:\n            return True\n    return False\n\n# Print result\nif is_win(word, permutation):\n    print("WIN")\nelif is_lose(word, permutation):\n    print("LOSE")\n', '\n\nimport sys\nimport random\n\nword = input()\npermutation = input()\n\n# Check if Ned wins.\ndef is_win(word, permutation):\n    # Check if word contains letters from permutation.\n    for letter in permutation:\n        if letter in word:\n            return True\n    return False\n\n# Check if Ned loses.\ndef is_lose(word, permutation):\n    # Check if word contains letters not in permutation\n    for letter in word:\n        if letter not in permutation:\n            return True\n    return False\n\n# Print result\nif is_win(word, permutation):\n    print("WIN")\nelif is_lose(word, permutation):\n    print("LOSE")\n']
2022-04-12 00:36:00.498605 size on output set 1
2022-04-12 00:36:00.498610 size on input set 1
2022-04-12 00:36:03.444448 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\nimport random\n\nword = input()\npermutation = input()\n\n# Check if Ned wins.\ndef is_win(word, permutation):\n    # Check if word contains letters from permutation.\n    for letter in permutation:\n        if letter in word:\n            return True\n    return False\n\n# Check if Ned loses.\ndef is_lose(word, permutation):\n    # Check if word contains letters not in permutation\n    for letter in word:\n        if letter not in permutation:\n            return True\n    return False\n\n# Print result\nif is_win(word, permutation):\n    print(\"WIN\")\nelif is_lose(word, permutation):\n    print(\"LOSE\")\n"
    },
    {
      "index": 1,
      "text": "import sys\nimport random\n\nword = input()\npermutation = input()\n\n# Check if Ned wins.\ndef is_win(word, permutation):\n    # Check if word contains letters from permutation.\n    for letter in permutation:\n        if letter in word:\n            return True\n    return False\n\n# Check if Ned loses.\ndef is_lose(word, permutation):\n    # Check if word contains letters not in permutation\n    for letter in word:\n        if letter not in permutation:\n            return True\n    return False\n\n# Print result\nif is_win(word, permutation):\n    print(\"WIN\")\nelif is_lose(word, permutation):\n    print(\"LOSE\")\n"
    }
  ],
  "created": 1649738160,
  "object": "edit"
}
2022-04-12 00:36:03.444680 fix syntax errors 2 ['import sys\nimport random\n\nword = input()\npermutation = input()\n\n# Check if Ned wins.\ndef is_win(word, permutation):\n    # Check if word contains letters from permutation.\n    for letter in permutation:\n        if letter in word:\n            return True\n    return False\n\n# Check if Ned loses.\ndef is_lose(word, permutation):\n    # Check if word contains letters not in permutation\n    for letter in word:\n        if letter not in permutation:\n            return True\n    return False\n\n# Print result\nif is_win(word, permutation):\n    print("WIN")\nelif is_lose(word, permutation):\n    print("LOSE")\n', 'import sys\nimport random\n\nword = input()\npermutation = input()\n\n# Check if Ned wins.\ndef is_win(word, permutation):\n    # Check if word contains letters from permutation.\n    for letter in permutation:\n        if letter in word:\n            return True\n    return False\n\n# Check if Ned loses.\ndef is_lose(word, permutation):\n    # Check if word contains letters not in permutation\n    for letter in word:\n        if letter not in permutation:\n            return True\n    return False\n\n# Print result\nif is_win(word, permutation):\n    print("WIN")\nelif is_lose(word, permutation):\n    print("LOSE")\n']
2022-04-12 00:36:03.444720 size on output set 1
2022-04-12 00:36:03.444730 num operations 2
2022-04-12 00:36:03.444737 size on input set 1
2022-04-12 00:36:07.101745 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nword = input()\npermutation = input()\n\n# word = \"HANGMAN\"\n# permutation = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\nletters = {\n    \"A\": 0,\n    \"B\": 0,\n    \"C\": 0,\n    \"D\": 0,\n    \"E\": 0,\n    \"F\": 0,\n    \"G\": 0,\n    \"H\": 0,\n    \"I\": 0,\n    \"J\": 0,\n    \"K\": 0,\n    \"L\": 0,\n    \"M\": 0,\n    \"N\": 0,\n    \"O\": 0,\n    \"P\": 0,\n    \"Q\": 0,\n    \"R\": 0,\n    \"S\": 0,\n    \"T\": 0,\n    \"U\": 0,\n    \"V\": 0,\n    \"W\": 0,\n    \"X\": 0,\n    \"Y\": 0,\n    \"Z\": 0,\n    }\n\nfor i in word:\n    letters[i] += 1\n\nfor i in permutation:\n    if letters[i] > 0:\n        letters[i] -= 1\n    else:\n        print(\"LOSE\")\n        break\nelse:\n    print(\"WIN\")\n"
    },
    {
      "index": 1,
      "text": "\n\nword = input()\nperm = input()\n\n# word = \"HANGMAN\" # WIN\n# perm = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" # WIN\n# perm = \"ABCDEFGHIJKLMNOPQRSTUVWXYZB\" # LOSE\n\nletters = {\n    \"A\": 0,\n    \"B\": 0,\n    \"C\": 0,\n    \"D\": 0,\n    \"E\": 0,\n    \"F\": 0,\n    \"G\": 0,\n    \"H\": 0,\n    \"I\": 0,\n    \"J\": 0,\n    \"K\": 0,\n    \"L\": 0,\n    \"M\": 0,\n    \"N\": 0,\n    \"O\": 0,\n    \"P\": 0,\n    \"Q\": 0,\n    \"R\": 0,\n    \"S\": 0,\n    \"T\": 0,\n    \"U\": 0,\n    \"V\": 0,\n    \"W\": 0,\n    \"X\": 0,\n    \"Y\": 0,\n    \"Z\": 0,\n    }\n\nfor i in word:\n    letters[i] += 1\n\nfor i in perm:\n    if letters[i] > 0:\n        letters[i] -= 1\n    else:\n        print(\"LOSE\")\n        break\nelse:\n    print(\"WIN\")\n"
    }
  ],
  "created": 1649738163,
  "object": "edit"
}
2022-04-12 00:36:07.101895 fix spelling mistakes 2 ['\n\nword = input()\npermutation = input()\n\n# word = "HANGMAN"\n# permutation = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"\n\nletters = {\n    "A": 0,\n    "B": 0,\n    "C": 0,\n    "D": 0,\n    "E": 0,\n    "F": 0,\n    "G": 0,\n    "H": 0,\n    "I": 0,\n    "J": 0,\n    "K": 0,\n    "L": 0,\n    "M": 0,\n    "N": 0,\n    "O": 0,\n    "P": 0,\n    "Q": 0,\n    "R": 0,\n    "S": 0,\n    "T": 0,\n    "U": 0,\n    "V": 0,\n    "W": 0,\n    "X": 0,\n    "Y": 0,\n    "Z": 0,\n    }\n\nfor i in word:\n    letters[i] += 1\n\nfor i in permutation:\n    if letters[i] > 0:\n        letters[i] -= 1\n    else:\n        print("LOSE")\n        break\nelse:\n    print("WIN")\n', '\n\nword = input()\nperm = input()\n\n# word = "HANGMAN" # WIN\n# perm = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" # WIN\n# perm = "ABCDEFGHIJKLMNOPQRSTUVWXYZB" # LOSE\n\nletters = {\n    "A": 0,\n    "B": 0,\n    "C": 0,\n    "D": 0,\n    "E": 0,\n    "F": 0,\n    "G": 0,\n    "H": 0,\n    "I": 0,\n    "J": 0,\n    "K": 0,\n    "L": 0,\n    "M": 0,\n    "N": 0,\n    "O": 0,\n    "P": 0,\n    "Q": 0,\n    "R": 0,\n    "S": 0,\n    "T": 0,\n    "U": 0,\n    "V": 0,\n    "W": 0,\n    "X": 0,\n    "Y": 0,\n    "Z": 0,\n    }\n\nfor i in word:\n    letters[i] += 1\n\nfor i in perm:\n    if letters[i] > 0:\n        letters[i] -= 1\n    else:\n        print("LOSE")\n        break\nelse:\n    print("WIN")\n']
2022-04-12 00:36:07.101924 size on output set 2
2022-04-12 00:36:07.101932 size on input set 2
2022-04-12 00:36:09.370880 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nword = input()\nperm = input()\n\n# word = \"HANGMAN\" # WIN\n# perm = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" # WIN\n# perm = \"ABCDEFGHIJKLMNOPQRSTUVWXYZB\" # LOSE\n\nletters = {\n    \"A\": 0,\n    \"B\": 0,\n    \"C\": 0,\n    \"D\": 0,\n    \"E\": 0,\n    \"F\": 0,\n    \"G\": 0,\n    \"H\": 0,\n    \"I\": 0,\n    \"J\": 0,\n    \"K\": 0,\n    \"L\": 0,\n    \"M\": 0,\n    \"N\": 0,\n    \"O\": 0,\n    \"P\": 0,\n    \"Q\": 0,\n    \"R\": 0,\n    \"S\": 0,\n    \"T\": 0,\n    \"U\": 0,\n    \"V\": 0,\n    \"W\": 0,\n    \"X\": 0,\n    \"Y\": 0,\n    \"Z\": 0,\n}\n\nfor i in word:\n    letters[i] += 1\n\nfor i in perm:\n    if letters[i] > 0:\n        letters[i] -= 1\n    else:\n        print(\"LOSE\")\n        break\nelse:\n    print(\"WIN\")\n"
    },
    {
      "index": 1,
      "text": "\nword = input()\nperm = input()\n\n# word = \"HANGMAN\" # WIN\n# perm = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" # WIN\n# perm = \"ABCDEFGHIJKLMNOPQRSTUVWXYZB\" # LOSE\n\nletters = {\n    \"A\": 0,\n    \"B\": 0,\n    \"C\": 0,\n    \"D\": 0,\n    \"E\": 0,\n    \"F\": 0,\n    \"G\": 0,\n    \"H\": 0,\n    \"I\": 0,\n    \"J\": 0,\n    \"K\": 0,\n    \"L\": 0,\n    \"M\": 0,\n    \"N\": 0,\n    \"O\": 0,\n    \"P\": 0,\n    \"Q\": 0,\n    \"R\": 0,\n    \"S\": 0,\n    \"T\": 0,\n    \"U\": 0,\n    \"V\": 0,\n    \"W\": 0,\n    \"X\": 0,\n    \"Y\": 0,\n    \"Z\": 0,\n}\n\nfor i in word:\n    letters[i] += 1\n\nfor i in perm:\n    if letters[i] > 0:\n        letters[i] -= 1\n    else:\n        print(\"LOSE\")\n        break\nelse:\n    print(\"WIN\")\n"
    }
  ],
  "created": 1649738167,
  "object": "edit"
}
2022-04-12 00:36:09.371223 fix syntax errors 2 ['\n\nword = input()\nperm = input()\n\n# word = "HANGMAN" # WIN\n# perm = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" # WIN\n# perm = "ABCDEFGHIJKLMNOPQRSTUVWXYZB" # LOSE\n\nletters = {\n    "A": 0,\n    "B": 0,\n    "C": 0,\n    "D": 0,\n    "E": 0,\n    "F": 0,\n    "G": 0,\n    "H": 0,\n    "I": 0,\n    "J": 0,\n    "K": 0,\n    "L": 0,\n    "M": 0,\n    "N": 0,\n    "O": 0,\n    "P": 0,\n    "Q": 0,\n    "R": 0,\n    "S": 0,\n    "T": 0,\n    "U": 0,\n    "V": 0,\n    "W": 0,\n    "X": 0,\n    "Y": 0,\n    "Z": 0,\n}\n\nfor i in word:\n    letters[i] += 1\n\nfor i in perm:\n    if letters[i] > 0:\n        letters[i] -= 1\n    else:\n        print("LOSE")\n        break\nelse:\n    print("WIN")\n', '\nword = input()\nperm = input()\n\n# word = "HANGMAN" # WIN\n# perm = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" # WIN\n# perm = "ABCDEFGHIJKLMNOPQRSTUVWXYZB" # LOSE\n\nletters = {\n    "A": 0,\n    "B": 0,\n    "C": 0,\n    "D": 0,\n    "E": 0,\n    "F": 0,\n    "G": 0,\n    "H": 0,\n    "I": 0,\n    "J": 0,\n    "K": 0,\n    "L": 0,\n    "M": 0,\n    "N": 0,\n    "O": 0,\n    "P": 0,\n    "Q": 0,\n    "R": 0,\n    "S": 0,\n    "T": 0,\n    "U": 0,\n    "V": 0,\n    "W": 0,\n    "X": 0,\n    "Y": 0,\n    "Z": 0,\n}\n\nfor i in word:\n    letters[i] += 1\n\nfor i in perm:\n    if letters[i] > 0:\n        letters[i] -= 1\n    else:\n        print("LOSE")\n        break\nelse:\n    print("WIN")\n']
2022-04-12 00:36:23.580581 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nword = input()\npermutation = input()\n\n# word = \"HANGMAN\"\n# permutation = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\nletters = {\n    \"A\": 0,\n    \"B\": 0,\n    \"C\": 0,\n    \"D\": 0,\n    \"E\": 0,\n    \"F\": 0,\n    \"G\": 0,\n    \"H\": 0,\n    \"I\": 0,\n    \"J\": 0,\n    \"K\": 0,\n    \"L\": 0,\n    \"M\": 0,\n    \"N\": 0,\n    \"O\": 0,\n    \"P\": 0,\n    \"Q\": 0,\n    \"R\": 0,\n    \"S\": 0,\n    \"T\": 0,\n    \"U\": 0,\n    \"V\": 0,\n    \"W\": 0,\n    \"X\": 0,\n    \"Y\": 0,\n    \"Z\": 0,\n}\n\nfor i in word:\n    letters[i] += 1\n\nfor i in permutation:\n    if letters[i] > 0:\n        letters[i] -= 1\n    else:\n        print(\"LOSE\")\n        break\nelse:\n    print(\"WIN\")\n"
    },
    {
      "index": 1,
      "text": "\n#\n# word = input()\n# permutation = input()\n#\n# # word = \"HANGMAN\"\n# # permutation = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n#\n# letters = {\n#     \"A\": 0,\n#     \"B\": 0,\n#     \"C\": 0,\n#     \"D\": 0,\n#     \"E\": 0,\n#     \"F\": 0,\n#     \"G\": 0,\n#     \"H\": 0,\n#     \"I\": 0,\n#     \"J\": 0,\n#     \"K\": 0,\n#     \"L\": 0,\n#     \"M\": 0,\n#     \"N\": 0,\n#     \"O\": 0,\n#     \"P\": 0,\n#     \"Q\": 0,\n#     \"R\": 0,\n#     \"S\": 0,\n#     \"T\": 0,\n#     \"U\": 0,\n#     \"V\": 0,\n#     \"W\": 0,\n#     \"X\": 0,\n#     \"Y\": 0,\n#     \"Z\": 0,\n#     }\n#\n# for i in word:\n#     letters[i] += 1\n#\n# for i in permutation:\n#     if letters[i] > 0:\n#         letters[i] -= 1\n#     else:\n#         print(\"LOSE\")\n#         break\n# else:\n#     print(\"WIN\")\n"
    }
  ],
  "created": 1649738169,
  "object": "edit"
}
2022-04-12 00:36:23.580745 fix syntax errors 2 ['\n\nword = input()\npermutation = input()\n\n# word = "HANGMAN"\n# permutation = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"\n\nletters = {\n    "A": 0,\n    "B": 0,\n    "C": 0,\n    "D": 0,\n    "E": 0,\n    "F": 0,\n    "G": 0,\n    "H": 0,\n    "I": 0,\n    "J": 0,\n    "K": 0,\n    "L": 0,\n    "M": 0,\n    "N": 0,\n    "O": 0,\n    "P": 0,\n    "Q": 0,\n    "R": 0,\n    "S": 0,\n    "T": 0,\n    "U": 0,\n    "V": 0,\n    "W": 0,\n    "X": 0,\n    "Y": 0,\n    "Z": 0,\n}\n\nfor i in word:\n    letters[i] += 1\n\nfor i in permutation:\n    if letters[i] > 0:\n        letters[i] -= 1\n    else:\n        print("LOSE")\n        break\nelse:\n    print("WIN")\n', '\n#\n# word = input()\n# permutation = input()\n#\n# # word = "HANGMAN"\n# # permutation = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"\n#\n# letters = {\n#     "A": 0,\n#     "B": 0,\n#     "C": 0,\n#     "D": 0,\n#     "E": 0,\n#     "F": 0,\n#     "G": 0,\n#     "H": 0,\n#     "I": 0,\n#     "J": 0,\n#     "K": 0,\n#     "L": 0,\n#     "M": 0,\n#     "N": 0,\n#     "O": 0,\n#     "P": 0,\n#     "Q": 0,\n#     "R": 0,\n#     "S": 0,\n#     "T": 0,\n#     "U": 0,\n#     "V": 0,\n#     "W": 0,\n#     "X": 0,\n#     "Y": 0,\n#     "Z": 0,\n#     }\n#\n# for i in word:\n#     letters[i] += 1\n#\n# for i in permutation:\n#     if letters[i] > 0:\n#         letters[i] -= 1\n#     else:\n#         print("LOSE")\n#         break\n# else:\n#     print("WIN")\n']
2022-04-12 00:36:23.580774 size on output set 4
