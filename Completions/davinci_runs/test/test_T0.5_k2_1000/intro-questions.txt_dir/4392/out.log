2022-04-09 19:57:41.622490 """
You are given an array $a$ of length $n$.

You are also given a set of distinct positions $p_1, p_2, \dots, p_m$, where $1 \le p_i < n$. The position $p_i$ means that you can swap elements $a[p_i]$ and $a[p_i + 1]$. You can apply this operation any number of times for each of the given positions.

Your task is to determine if it is possible to sort the initial array in non-decreasing order ($a_1 \le a_2 \le \dots \le a_n$) using only allowed swaps.

For example, if $a = [3, 2, 1]$ and $p = [1, 2]$, then we can first swap elements $a[2]$ and $a[3]$ (because position $2$ is contained in the given set $p$). We get the array $a = [3, 1, 2]$. Then we swap $a[1]$ and $a[2]$ (position $1$ is also contained in $p$). We get the array $a = [1, 3, 2]$. Finally, we swap $a[2]$ and $a[3]$ again and get the array $a = [1, 2, 3]$, sorted in non-decreasing order.

You can see that if $a = [4, 1, 2, 3]$ and $p = [3, 2]$ then you cannot sort the array.

You have to answer $t$ independent test cases.


-----Input-----

The first line of the input contains one integer $t$ ($1 \le t \le 100$) — the number of test cases.

Then $t$ test cases follow. The first line of each test case contains two integers $n$ and $m$ ($1 \le m < n \le 100$) — the number of elements in $a$ and the number of elements in $p$. The second line of the test case contains $n$ integers $a_1, a_2, \dots, a_n$ ($1 \le a_i \le 100$). The third line of the test case contains $m$ integers $p_1, p_2, \dots, p_m$ ($1 \le p_i < n$, all $p_i$ are distinct) — the set of positions described in the problem statement.


-----Output-----

For each test case, print the answer — "YES" (without quotes) if you can sort the initial array in non-decreasing order ($a_1 \le a_2 \le \dots \le a_n$) using only allowed swaps. Otherwise, print "NO".


-----Example-----
Input
6
3 2
3 2 1
1 2
4 2
4 1 2 3
3 2
5 1
1 2 3 4 5
1
4 2
2 1 4 3
1 3
4 2
4 3 2 1
1 3
5 2
2 1 2 3 3
1 4

Output
YES
NO
YES
YES
NO
YES
"""
2022-04-09 19:57:41.622531 --------------------------
2022-04-09 19:58:00.257879 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nt = int(input())\nfor i in range(t):\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    s = set()\n    for j in range(m):\n        s.add(p[j] - 1)\n    for j in range(n - 1):\n        if j in s:\n            if a[j] > a[j + 1]:\n                a[j], a[j + 1] = a[j + 1], a[j]\n    s = True\n    for j in range(n - 1):\n        if a[j] > a[j + 1]:\n            s = False\n            break\n    if s:\n        print(\"YES\")\n    else:\n        print(\"NO\")"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n# SOLUTION\nt = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n\n    # if we can sort the array, then we can only swap the adjacent elements\n    # but we can swap them any number of times\n    # so we can sort the array in 2 steps:\n    # 1. sort the array\n    # 2. swap the adjacent elements in p\n    # if we can sort the array, then we can swap the adjacent elements in p\n    # if we can swap the adjacent elements in p, then we can sort the array\n    a.sort()\n    for i in range(m - 1):\n        if p[i] + 1 == p[i + 1]:\n            a[p[i]], a[p[i] + 1] = a[p[i] + 1], a[p[i]]\n    print(\"YES\" if all(a[i] <= a[i + 1] for i in range(n - 1)) else \"NO\")"
    }
  ],
  "created": 1649548661,
  "id": "cmpl-4vFFVjT3Ak0vDzxN3bVQyXgvboKR7",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 19:58:00.268916 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nt = int(input())\nfor i in range(t):\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    s = set()\n    for j in range(m):\n        s.add(p[j] - 1)\n    for j in range(n - 1):\n        if j in s:\n            if a[j] > a[j + 1]:\n                a[j], a[j + 1] = a[j + 1], a[j]\n    s = True\n    for j in range(n - 1):\n        if a[j] > a[j + 1]:\n            s = False\n            break\n    if s:\n        print(\"YES\")\n    else:\n        print(\"NO\")"
}
2022-04-09 19:58:00.268962 REASON stop
2022-04-09 19:58:00.270080 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n# SOLUTION\nt = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n\n    # if we can sort the array, then we can only swap the adjacent elements\n    # but we can swap them any number of times\n    # so we can sort the array in 2 steps:\n    # 1. sort the array\n    # 2. swap the adjacent elements in p\n    # if we can sort the array, then we can swap the adjacent elements in p\n    # if we can swap the adjacent elements in p, then we can sort the array\n    a.sort()\n    for i in range(m - 1):\n        if p[i] + 1 == p[i + 1]:\n            a[p[i]], a[p[i] + 1] = a[p[i] + 1], a[p[i]]\n    print(\"YES\" if all(a[i] <= a[i + 1] for i in range(n - 1)) else \"NO\")"
}
2022-04-09 19:58:00.270206 REASON stop
