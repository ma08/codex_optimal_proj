["\ndef main():\n    n = int(input()) # \u6574\u6570\u306e\u5165\u529b\n    a = list(map(int, input().split())) # \u6574\u6570\u306e\u914d\u5217\u5165\u529b\n    print(a)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    print(\"Hello World\")\n\nif __name__ == '__main__':\n    main()\n", "\nimport os\nimport sys\n\n\ndef print_usage():\n    print(\"Usage: python3 file.py [OPTION]... [FILE]...\")\n    print(\"List information about the FILEs (the current directory by default).\")\n    print(\"\")\n    print(\"  -a, --all              do not ignore entries starting with .\")\n    print(\"  -l                     use a long listing format\")\n    print(\"  -h, --human-readable   with -l, print sizes in human readable format (e.g., 1K 234M 2G)\")\n    print(\"  -r, --reverse          reverse order while sorting\")\n    print(\"  -S                     sort by file size\")\n    print(\"  -t                     sort by modification time\")\n    print(\"  -u                     with -lt: sort by, and show, access time\")\n    print(\"  -U                     do not sort; list entries in directory order\")\n    print(\"\")\n    print(\"      --help     display this help and exit\")\n    print(\"      --version  output version information and exit\")\n\n\ndef print_version():\n    print(\"file.py v0.1\")\n\n\ndef parse_args(argv):\n    args = {\n        'all': False,\n        'long': False,\n        'human_readable': False,\n        'reverse': False,\n        'size': False,\n        'time': False,\n        'access_time': False,\n        'directory_order': False,\n        'files': []\n    }\n\n    i = 1\n    while i < len(argv):\n        arg = argv[i]\n        if arg == '-a' or arg == '--all':\n            args['all'] = True\n        elif arg == '-l':\n            args['long'] = True\n        elif arg == '-h' or arg == '--human-readable':\n            args['human_readable'] = True\n        elif arg == '-r' or arg == '--reverse':\n            args['reverse'] = True\n        elif arg == '-S':\n            args['size'] = True\n        elif arg == '-t':\n            args['time'] = True\n        elif arg == '-u':\n            args['access_time'] = True\n        elif arg == '-U':\n            args['directory_order'] = True\n        elif arg == '--help':\n            print_usage()\n            sys.exit(0)\n        elif arg == '--version':\n            print_version()\n            sys.exit(0)\n        else:\n            args['files'].append(arg)\n        i += 1\n\n    return args\n\n\ndef print_file(file, args):\n    if not args['long']:\n        print(file)\n    else:\n        print(\"%s %s %s %s %s %s\" % (\n            '-rw-r--r--',\n            '1',\n            'root',\n            'root',\n            '0',\n            file\n        ))\n\n\ndef print_files(files, args):\n    for file in files:\n        print_file(file, args)\n\n\ndef get_files(args):\n    if len(args['files']) == 0:\n        return os.listdir()\n    else:\n        files = []\n        for file in args['files']:\n            if os.path.isdir(file):\n                files += os.listdir(file)\n            else:\n                files.append(file)\n        return files\n\n\ndef main():\n    args = parse_args(sys.argv)\n    files = get_files(args)\n    print_files(files, args)\n\n\nif __name__ == '__main__':\n    main()\n", "from sys import stdin\n\nN = int(stdin.readline())\nS = stdin.readline().rstrip()\n\nx = 0\nmax_x = 0\n\nfor i in range(N):\n    if S[i] == \"I\":\n        x += 1\n    else:\n        x -= 1\n    if x > max_x:\n        max_x = x\n\nprint(max_x)\n", "\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "from sys import stdin\n\nN = int(stdin.readline())  # 1\u884c\u76ee\nS = stdin.readline()  # 2\u884c\u76ee\n\nx = 0\nmax_x = 0\n\nfor i in range(N):\n    if S[i] == 'I':\n        x += 1\n    else:\n        x -= 1\n    if x > max_x:\n        max_x = x\n\nprint(max_x)\n", "\nfrom sys import stdin\n\nN = int(stdin.readline())\nS = stdin.readline()\n\nx = 0\nmax_x = 0\n\nfor i in range(N):\n    if S[i] == 'I':\n        x += 1\n    else:\n        x -= 1\n    if x > max_x:\n        max_x = x\n\nprint(max_x)\n"]