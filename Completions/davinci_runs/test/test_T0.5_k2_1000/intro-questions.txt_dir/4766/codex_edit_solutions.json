["\nimport fileinput\nnum_lines = int(fileinput.input()[0].strip())\n\nfor line in fileinput.input()[:num_lines]:\n    if line.strip()[:11] == 'Simon says':\n        print(line.strip()[11:])\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    for i in range(n):\n        command = sys.stdin.readline()\n        if command[:10] == \"Simon says \":\n            print(command[11:])\n\nmain()\n", "\nimport fileinput\n\nnum_lines = int(input())\n\nfor line in fileinput.input()[:num_lines+1]:\n    if line[:11] == 'Simon says':\n        print(line[11:])\n", "\nn = int(input())\n\nfor i in range(n):\n    line = input()\n    line_list = line.split()\n\n    if len(line_list) > 2 and line_list[0] == \"Simon\" and line_list[1] == \"says\":\n        print(\" \".join(line_list[2:]))\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Tue Jan  7 21:42:42 2020\n\n@author: suryakantkumar\n\"\"\"\n\n'''\nProblem : Simon says is a game where \"Simon\" outputs a sequence of 10 characters (R, G, B, Y) and the user must repeat the sequence. \nCreate a program that plays this game, except that the computer comes up with its own sequences and the user must input the answer.\n'''\n\n\nimport random\n\nn = int(input('Enter number of test cases : '))\n\nfor i in range(1, n+1):\n    print('\\nTest Case : ', i)\n    print('Simon says : ', end = '')\n    for j in range(10):\n        print(random.choice(['R', 'G', 'B', 'Y']), end = '')\n    print()\n    print('You say : ', end = '')\n    for j in range(10):\n        print(random.choice(['R', 'G', 'B', 'Y']), end = '')\n    print()\n    print('\\n')\n", "#!/usr/bin/python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    for _ in range(n):\n        command = sys.stdin.readline().strip()\n        if command[:10] == \"Simon says\": print(command[11:])\n\nmain()\n", "n = int(input())\nfor i in range(n):\n    line = input()\n    if \"Simon says\" in line:\n        print(line[11:])\n", "n = int(input())\nfor i in range(n):\n    line = input()\n    if line.startswith(\"Simon says\"):\n        print(line[11:])\n", "# https://open.kattis.com/problems/simonsays\n\nn = int(input())\nfor i in range(n):\n    line = input()\n    if \"Simon says\" in line:\n        print(line[11:])\n", "import sys\n\nfor _ in range(int(input())):\n    print(input()) if input().startswith(\"Simon says\") else None\n", "\n\nn = int(input())\nfor i in range(n):\n    line = input()\n    if line.startswith(\"Simon says\"):\n        print(line[10:])\n", "n = int(input())\n\nfor i in range(n):\n    line = input()\n    line_list = line.split()\n\n    if len(line_list) > 2 and line_list[0] == \"Simon\" and line_list[1] == \"says\":\n        print(\" \".join(line_list[2:]))\n", "n = int(input())\nfor i in range(n):\n    line = input().strip()\n    if line.startswith(\"Simon says\"):\n        print(line[11:])\n", "\nn = int(input())\nfor i in range(n):\n    line = input()\n    if line.startswith(\"Simon says\"):\n        print(line[11:])\n", "#!/usr/bin/python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    for i in range(n):\n        command = sys.stdin.readline()\n        if command[:11] == \"Simon says\":\n            print(command[11:])\n\nmain()\n", "N = int(input())\nfor i in range(N):\n    line = input()\n    if line.startswith(\"Simon says\"):\n        print(line[11:])\n", "def is_prime(n):\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n < 2:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_primes(n):\n    primes = [2]\n    for i in range(3, n, 2):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\ndef get_prime_factors(n):\n    prime_factors = []\n    primes = get_primes(n)\n    for prime in primes:\n        if n % prime == 0:\n            prime_factors.append(prime)\n    return prime_factors\n\ndef get_prime_factor_counts(n):\n    prime_factors = get_prime_factors(n)\n    prime_factor_counts = []\n    for prime in prime_factors:\n        count = 0\n        while n % prime == 0:\n            count += 1\n            n = n / prime\n        prime_factor_counts.append(count)\n    return prime_factor_counts\n\ndef get_prime_factor_count(n):\n    prime_factor_counts = get_prime_factor_counts(n)\n    prime_factor_count = 1\n    for count in prime_factor_counts:\n        prime_factor_count *= (count + 1)\n    return prime_factor_count\n\ndef get_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n / i:\n                divisors.append(n / i)\n    return divisors\n\ndef get_divisor_count(n):\n    return len(get_divisors(n))\n\ndef get_triangle_number(n):\n    return n * (n + 1) / 2\n\ndef is_triangle_number(n):\n    return (1 + (1 + 8 * n)**0.5) / 2 % 1 == 0\n\ndef get_pentagonal_number(n):\n    return n * (3 * n - 1) / 2\n\ndef is_pentagonal_number(n):\n    return (1 + (1 + 24 * n)**0.5) / 6 % 1 == 0\n\ndef get_hexagonal_number(n):\n    return n * (2 * n - 1)\n\ndef is_hexagonal_number(n):\n    return (1 + (1 + 8 * n)**0.5) / 4 % 1 == 0\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef get_factorial(n):\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial\n\ndef get_combination(n, r):\n    return get_factorial(n) / (get_factorial(r) * get_factorial(n - r))\n\ndef get_permutation(n, r):\n    return get_factorial(n) / get_factorial(n - r)\n\ndef get_fibonacci(n):\n    fibonacci = [0, 1]\n    for i in range(2, n + 1):\n        fibonacci.append(fibonacci[i - 1] + fibonacci[i - 2])\n    return fibonacci\n\ndef get_fibonacci_number(n):\n    return get_fibonacci(n)[-1]\n\ndef is_fibonacci_number(n):\n    return (5 * n**2 + 4)**0.5 % 1 == 0 or (5 * n**2 - 4)**0.5 % 1 == 0\n\ndef get_pythagorean_triples(n):\n    triples = []\n    for a in range(1, n):\n        for b in range(a, n):\n            c = (a**2 + b**2)**0.5\n            if c % 1 == 0 and c <= n:\n                triples.append((a, b, int(c)))\n    return triples\n\ndef get_pythagorean_triple_perimeters(n):\n    perimeters = []\n    for triple in get_pythagorean_triples(n):\n        perimeter = sum(triple)\n        if perimeter <= n:\n            perimeters.append(perimeter)\n    return perimeters\n\ndef get_pythagorean_triple_perimeter_counts(n):\n    perimeters = get_pythagorean_triple_perimeters(n)\n    perimeter_counts = []\n    for i in range(n + 1):\n        perimeter_counts.append(perimeters.count(i))\n    return perimeter_counts\n\ndef get_pythagorean_triple_perimeter_count(n):\n    return get_pythagorean_triple_perimeter_counts(n).count(max(get_pythagorean_triple_perimeter_counts(n)))\n\ndef get_pythagorean_triple_perimeter_max(n):\n    return get_pythagorean_triple_perimeter_counts(n).index(max(get_pythagorean_triple_perimeter_counts(n)))\n", "\nn = int(input())\nfor i in range(n):\n    line = raw_input()\n    if \"Simon says\" in line:\n        print(line[11:])\n", "N = int(input())\nfor i in range(N):\n    command = input().split()\n    if command[0] == \"Simon\" and command[1] == \"says\":\n        print(\" \".join(command[2:]))\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    for i in range(n):\n        command = sys.stdin.readline()\n        if command[:10] == \"Simon says \":\n            print(command[10:])\n\nmain()\n", "\nimport sys\nfor _ in range(int(input())):\n    print(input()) if input().startswith(\"Simon says\") else None\n", "N = int(input())\nfor i in range(N):\n    line = input()\n    if line.startswith(\"Simon says\"): print(line[11:])\n", "\n# https://open.kattis.com/problems/simonsays\nimport fileinput\n\nnum_lines = int(fileinput.input()[0])\n\nfor line in fileinput.input()[:num_lines]:\n    if line[:11] == 'Simon says':\n        print(line[11:])\n", "print(\"hello\")\n", "import sys\n\nfor _ in range(int(input())):\n    print(input()) if input().startswith(\"Simon says\") else print(0)\n", "\nimport fileinput\nnum_lines = int(fileinput.input()[0].strip())\n\nfor line in fileinput.input()[:num_lines+1]:\n    line = line.strip()\n    if line[:11] == 'Simon says':\n        print(line[11:])\n", "for _ in range(int(input())):\n    print(input()) if input().startswith(\"Simon says\") else 0\n"]