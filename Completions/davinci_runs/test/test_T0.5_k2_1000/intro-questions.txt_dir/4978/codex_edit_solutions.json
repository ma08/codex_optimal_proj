["N, M = map(int, input().split())\ngrid = [list(input()) for _ in range(N)]\n\nfor row in range(N):\n    for col in range(M):\n        if grid[row][col] == \"V\":\n            if row == 0:\n                pass\n            elif grid[row-1][col] == \".\":\n                grid[row-1][col] = \"V\"\n            elif grid[row-1][col] == \"#\":\n                if col > 0 and grid[row][col-1] == \".\":\n                    grid[row][col-1] = \"V\"\n                if col < M-1 and grid[row][col+1] == \".\":\n                    grid[row][col+1] = \"V\"\n\nfor row in range(N):\n    print(\"\".join(grid[row]))\n", "\nn, m = map(int, input().split())\ngrid = [list(input()) for _ in range(n)]\n\nfor row in range(n):\n    for col in range(m):\n        if grid[row][col] == \"V\":\n            if row == 0:\n                pass\n            elif grid[row-1][col] == \".\":\n                grid[row-1][col] = \"V\"\n            elif grid[row-1][col] == \"#\":\n                if col > 0 and grid[row][col-1] == \".\":\n                    grid[row][col-1] = \"V\"\n                if col < m-1 and grid[row][col+1] == \".\":\n                    grid[row][col+1] = \"V\"\n\nfor row in range(n):\n    print(\"\".join(grid[row]))\n", "\nfrom sys import stdin\n\n\n\ndef main():\n    N, M = [int(x) for x in stdin.readline().split()]\n    grid = [stdin.readline().rstrip() for _ in range(N)]\n    for i in range(N - 1, -1, -1):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                if i + 1 < N and grid[i + 1][j] == '.':\n                    grid[i + 1] = grid[i + 1][:j] + 'V' + grid[i + 1][j + 1:]\n                if j - 1 >= 0 and grid[i][j - 1] == '.':\n                    grid[i] = grid[i][:j - 1] + 'V' + grid[i][j:]\n                if j + 1 < M and grid[i][j + 1] == '.':\n                    grid[i] = grid[i][:j + 1] + 'V' + grid[i][j + 2:]\n    for row in grid:\n        print(row)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    This is the main function.\n    \"\"\"\n    # Get the input.\n    input_ = input().split()\n    rows = int(input_[0])  # The number of rows in the grid.\n    cols = int(input_[1])  # The number of columns in the grid.\n\n        # The grid.\n    grid = []\n    for i in range(rows):\n        row = input()\n        grid.append(row)\n\n    # This is the main loop.\n    while True:\n        # This variable is used to determine if we should break out of the loop.\n        done = True\n        for i in range(rows):\n            for j in range(cols):\n                if grid[i][j] == 'V':\n                    if i == 0:\n                        done = False\n                        if j > 0 and grid[i][j-1] == '.':\n                            grid[i] = grid[i][:j-1] + 'V' + grid[i][j:]\n                        if j < cols-1 and grid[i][j+1] == '.':\n                            grid[i] = grid[i][:j+1] + 'V' + grid[i][j+2:]\n                    else:\n                        if grid[i-1][j] == '.':\n                            done = False\n                            grid[i-1] = grid[i-1][:j] + 'V' + grid[i-1][j+1:]\n                        elif grid[i-1][j] == '#':\n                            done = False\n                            if j > 0 and grid[i][j-1] == '.':\n                                grid[i] = grid[i][:j-1] + 'V' + grid[i][j:]\n                            if j < cols-1 and grid[i][j+1] == '.':\n                                grid[i] = grid[i][:j+1] + 'V' + grid[i][j+2:]\n\n        if done:\n            break\n\n    # Print the grid.\n    for i in range(rows):\n        print(grid[i])\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef main():\n    n, m = [int(x) for x in sys.stdin.readline().strip().split()]\n    grid = [list(sys.stdin.readline().strip()) for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'V': grid[i][j] = '.'\n            if i < n - 1 and grid[i + 1][j] == '.': grid[i + 1][j] = 'V'\n            if j > 0 and j < m - 1 and grid[i][j - 1] == '.' and grid[i][j + 1] == '.':\n                grid[i][j - 1] = 'V'\n                grid[i][j + 1] = 'V'\n    for i in range(n): print(\"\".join(grid[i]))\n\nmain()\n", "\n\nn = int(input())\nm = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\n\nwhile True:\n    new_grid = [['.' for i in range(m)] for j in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                new_grid[i][j] = '.'\n            elif grid[i][j] == '#':\n                new_grid[i][j] = '#'\n            elif grid[i][j] == 'V':\n                if i == 0:\n                    new_grid[i][j] = 'V'\n                elif grid[i-1][j] == '.':\n                    new_grid[i-1][j] = 'V'\n                elif grid[i-1][j] == '#':\n                    if j > 0:\n                        new_grid[i][j-1] = 'V'\n                    if j < m-1:\n                        new_grid[i][j+1] = 'V'\n                    new_grid[i][j] = 'V'\n    if grid == new_grid:\n        break\n    grid = new_grid\n\nfor row in grid:\n    print(''.join(row))\n", "\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    grid = [list(sys.stdin.readline().strip()) for _ in range(N)]\n    # each cell is either air, stone, or water\n    # water spreads:\n    #   * if water cell is above air cell, air cell turns into water\n    #   * if water cell is above stone cell, air cells to the left or right of water cell turn into water\n    #   * each second\n    #   * water stops spreading\n    # print grid when water stops spreading\n    # assume that all cells outside of the grid behave as air cells\n    #   e.g. if water cell is at bottommost row, water will not spread to sides\n    #\n    # grid is N rows and M columns\n    # 2 <= N, M <= 50\n    #\n    # each of N lines contains a string S of length M\n    # S represents one of the rows in the grid\n    # S consists of the symbols \".\", \"#\", and \"V\"\n    #   * . = air\n    #   * # = stone\n    #   * V = water\n    \n    # spread water\n    for i in range(N-1, -1, -1):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                if i == N-1:\n                    if j == 0:\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j+1] == '.':\n                            grid[i-1][j+1] = 'V'\n                    elif j == M-1:\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j-1] == '.':\n                            grid[i-1][j-1] = 'V'\n                    else:\n                        if grid[i-1][j-1] == '.':\n                            grid[i-1][j-1] = 'V'\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j+1] == '.':\n                            grid[i-1][j+1] = 'V'\n                else:\n                    if grid[i-1][j] == '.':\n                        grid[i-1][j] = 'V'\n                    elif grid[i-1][j] == '#':\n                        if j == 0:\n                            if grid[i][j+1] == '.':\n                                grid[i][j+1] = 'V'\n                        elif j == M-1:\n                            if grid[i][j-1] == '.':\n                                grid[i][j-1] = 'V'\n                        else:\n                            if grid[i][j-1] == '.':\n                                grid[i][j-1] = 'V'\n                            if grid[i][j+1] == '.':\n                                grid[i][j+1] = 'V'\n    \n    # print grid\n    for i in range(N):\n        print(''.join(grid[i]))\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef main():\n    N, M = [int(x) for x in sys.stdin.readline().strip().split()]\n    grid = []\n    for _ in range(N):\n        grid.append(sys.stdin.readline().strip())\n    for row in grid:\n        print(row)\n\nmain()\n", "\n# \nimport sys\n\ndef main():\n    N, M = [int(x) for x in sys.stdin.readline().strip().split()]\n    grid = []\n    for i in range(N):\n        grid.append([x for x in sys.stdin.readline().strip()])\n    for i in range(N):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                grid[i][j] = '.'\n                if i < N - 1 and grid[i + 1][j] == '.':\n                    grid[i + 1][j] = 'V'\n                if j > 0 and j < M - 1 and grid[i][j - 1] == '.' and grid[i][j + 1] == '.':\n                    grid[i][j - 1] = 'V'\n                    grid[i][j + 1] = 'V'\n    for i in range(N):\n        print(\"\".join(grid[i]))\n\nmain()\n", "\n\ndef main():\n    \"\"\"\n    This is the main function.\n    \"\"\"\n    # Get the input\n    input_ = input().split()\n    rows = int(input_[0]) # pylint: disable=invalid-name\n    cols = int(input_[1]) # pylint: disable=invalid-name\n\n    grid = [] # pylint: disable=invalid-name\n    for i in range(rows):\n        row = input() # pylint: disable=invalid-name\n        grid.append(row)\n\n    # This is the main loop.\n    while True:\n        # This variable is used to determine if we should break out of the loop.\n        done = True # pylint: disable=invalid-name\n        for i in range(rows):\n            for j in range(cols):\n                if grid[i][j] == 'V':\n                    if i == 0:\n                        done = False\n                        if j > 0 and grid[i][j-1] == '.':\n                            grid[i] = grid[i][:j-1] + 'V' + grid[i][j:]\n                        if j < cols-1 and grid[i][j+1] == '.':\n                            grid[i] = grid[i][:j+1] + 'V' + grid[i][j+2:]\n                    else:\n                        if grid[i-1][j] == '.':\n                            done = False\n                            grid[i-1] = grid[i-1][:j] + 'V' + grid[i-1][j+1:]\n                        elif grid[i-1][j] == '#':\n                            done = False\n                            if j > 0 and grid[i][j-1] == '.':\n                                grid[i] = grid[i][:j-1] + 'V' + grid[i][j:]\n                            if j < cols-1 and grid[i][j+1] == '.':\n                                grid[i] = grid[i][:j+1] + 'V' + grid[i][j+2:]\n\n        if done:\n            break\n\n    # Print the grid\n    for i in range(rows):\n        print(grid[i])\n\nif __name__ == \"__main__\":\n    main()\n", "\nfrom sys import stdin\n\ndef main():\n    N, M = [int(x) for x in stdin.readline().rstrip().split()]\n    grid = [stdin.readline().rstrip() for _ in range(N)]\n    for r in range(N - 1, -1, -1): # start from the bottom\n        for c in range(M):\n            if grid[r][c] == 'V':\n                if r + 1 < N and grid[r + 1][c] == '.': # move down\n                    grid[r + 1] = grid[r + 1][:c] + 'V' + grid[r + 1][c + 1:]\n                if c - 1 >= 0 and grid[r][c - 1] == '.': # move left\n                    grid[r] = grid[r][:c - 1] + 'V' + grid[r][c:]\n                if c + 1 < M and grid[r][c + 1] == '.':\n                    grid[r] = grid[r][:c + 1] + 'V' + grid[r][c + 2:]\n    for row in grid:\n        print(row)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n,m = map(int,input().split())\n    grid = []\n    for _ in range(n):\n        grid.append(list(input()))\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"V\":\n                grid[i][j] = \"v\"\n    while True:\n        changed = False\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == \"v\":\n                    if i > 0 and grid[i-1][j] == \".\":\n                        grid[i-1][j] = \"v\"\n                        changed = True\n                    if i < n-1 and grid[i+1][j] == \".\":\n                        grid[i+1][j] = \"v\"\n                        changed = True\n                    if j < m-1 and grid[i][j+1] == \".\":\n                        grid[i][j+1] = \"v\"\n                        changed = True\n                    if j > 0 and grid[i][j-1] == \".\":\n                        grid[i][j-1] = \"v\"\n                        changed = True\n        if not changed:\n            break\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"v\":\n                grid[i][j] = \"V\"\n            elif grid[i][j] == \".\":\n                grid[i][j] = \" \"\n    for i in range(n):\n        print(\"\".join(grid[i]))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    This is the main function.\n    \"\"\"\n    # Get the input\n    input_string = input()\n    rows = int(input_string.split()[0])\n    cols = int(input_string.split()[1])\n\n    grid = []\n    for i in range(rows):\n        row = input()\n        grid.append(row)\n\n    # This is the main loop\n    while True:\n        # This variable is used to determine if we should break out of the loop\n        done = True\n        for i in range(rows):\n            for j in range(cols):\n                if grid[i][j] == 'V':\n                    if i == 0:\n                        done = False\n                        if j > 0 and grid[i][j-1] == '.':\n                            grid[i] = grid[i][:j-1] + 'V' + grid[i][j:]\n                        if j < cols-1 and grid[i][j+1] == '.':\n                            grid[i] = grid[i][:j+1] + 'V' + grid[i][j+2:]\n                    else:\n                        if grid[i-1][j] == '.':\n                            done = False\n                            grid[i-1] = grid[i-1][:j] + 'V' + grid[i-1][j+1:]\n                        elif grid[i-1][j] == '#':\n                            done = False\n                            if j > 0 and grid[i][j-1] == '.':\n                                grid[i] = grid[i][:j-1] + 'V' + grid[i][j:]\n                            if j < cols-1 and grid[i][j+1] == '.':\n                                grid[i] = grid[i][:j+1] + 'V' + grid[i][j+2:]\n\n        if done:\n            break\n\n    # Print the grid\n    for i in range(rows):\n        print(grid[i])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    grid = [list(sys.stdin.readline().strip()) for _ in range(N)]\n    # each cell is either air, stone, or water\n    # water spreads:\n    # * if water cell is above air cell, air cell turns into water\n    # * if water cell is above stone cell, air cells to the left or right of water cell turn into water, if possible\n    # * each second\n    # * water stops spreading\n    # print grid when water stops spreading\n    # assume that all cells outside of the grid behave as air cells\n    #   e.g. if water cell is at bottommost row, water will not spread to sides, if possible\n    #\n    # grid is N rows and M columns\n    # 2 <= N, M <= 50\n    # each of N lines contains a string S of length M\n    # S represents one of the rows in the grid\n    # S consists of the symbols \".\", \"#\", and \"V\"\n    #   '.' = air\n    #   '#' = stone\n    #   'V' = water\n    \n    # spread water, if possible\n    for i in range(N-1, -1, -1):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                if i == N-1: # if water cell is at bottommost row\n                    if j == 0:\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j+1] == '.':\n                            grid[i-1][j+1] = 'V'\n                    elif j == M-1:\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j-1] == '.':\n                            grid[i-1][j-1] = 'V'\n                    else:\n                        if grid[i-1][j-1] == '.':\n                            grid[i-1][j-1] = 'V'\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j+1] == '.':\n                            grid[i-1][j+1] = 'V'\n                else: # if water cell is not at bottommost row\n                    if grid[i-1][j] == '.':\n                        grid[i-1][j] = 'V'\n                    elif grid[i-1][j] == '#':\n                        if j == 0:\n                            if grid[i][j+1] == '.':\n                                grid[i][j+1] = 'V'\n                        elif j == M-1:\n                            if grid[i][j-1] == '.':\n                                grid[i][j-1] = 'V'\n                        else:\n                            if grid[i][j-1] == '.':\n                                grid[i][j-1] = 'V'\n                            if grid[i][j+1] == '.':\n                                grid[i][j+1] = 'V'\n    \n    # print grid\n    for i in range(N):\n        print(''.join(grid[i]))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    grid = []\n    for _ in range(n):\n        grid.append(list(input()))\n    print(grid)\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"V\":\n                grid[i][j] = \"v\"\n    print(grid)\n    while True:\n        changed = False\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == \"v\":\n                    if i > 0 and grid[i - 1][j] == \".\":\n                        grid[i - 1][j] = \"v\"\n                        changed = True\n                    if i < n - 1 and grid[i + 1][j] == \".\":\n                        grid[i + 1][j] = \"v\"\n                        changed = True\n                    if j < m - 1 and grid[i][j + 1] == \".\":\n                        grid[i][j + 1] = \"v\"\n                        changed = True\n                    if j > 0 and grid[i][j - 1] == \".\":\n                        grid[i][j - 1] = \"v\"\n                        changed = True\n        if not changed:\n            break\n    print(grid)\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"v\":\n                grid[i][j] = \"V\"\n            elif grid[i][j] == \".\":\n                grid[i][j] = \" \"\n    print(grid)\n    for i in range(n):\n        print(\"\".join(grid[i]))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    grid = [list(sys.stdin.readline().strip()) for _ in range(N)]\n    # each cell is either air, stone, or water\n    # water spreads:\n    # * if water cell is above air cell, air cell turns into water\n    # * if water cell is above stone cell, air cells left or right of water cell turn into water if they exist\n    # * each second\n    # * water stops spreading\n    # print grid when water stops spreading\n    # assume that all cells outside of the grid behave as air cells\n    #   e.g. if water cell is at bottommost row, water will not spread to sides \n    #\n    # grid is N rows and M columns\n    # 2 <= N, M <= 50\n    #\n    # each of N lines contains a string S of length M\n    # S represents one of the rows in the grid\n    # S consists of the symbols \".\", \"#\", and \"V\"\n    #   . = air\n    #   # = stone\n    #   V = water\n    \n    # spread water\n    for i in range(N-1, -1, -1):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                if i == N-1:\n                    if j == 0:\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j+1] == '.':\n                            grid[i-1][j+1] = 'V'\n                    elif j == M-1:\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j-1] == '.':\n                            grid[i-1][j-1] = 'V'\n                    else:\n                        if grid[i-1][j-1] == '.':\n                            grid[i-1][j-1] = 'V'\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j+1] == '.':\n                            grid[i-1][j+1] = 'V'\n                else:\n                    if grid[i-1][j] == '.':\n                        grid[i-1][j] = 'V'\n                    elif grid[i-1][j] == '#':\n                        if j == 0:\n                            if grid[i][j+1] == '.':\n                                grid[i][j+1] = 'V'\n                        elif j == M-1:\n                            if grid[i][j-1] == '.':\n                                grid[i][j-1] = 'V'\n                        else:\n                            if grid[i][j-1] == '.':\n                                grid[i][j-1] = 'V'\n                            if grid[i][j+1] == '.':\n                                grid[i][j+1] = 'V'\n    \n    # print grid\n    for i in range(N):\n        print(''.join(grid[i]))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    This is the main function.\n    \"\"\"\n    # Get the input\n    input_string = input()\n    input_string = input_string.split(\" \")\n    rows = int(input_string[0])\n    cols = int(input_string[1])\n\n    grid = []\n    for i in range(rows):\n        row = input()\n        grid.append(row)\n\n    # This is the main loop\n    while True:\n        # This variable is used to determine if we should break out of the loop\n        done = True\n        for i in range(rows):\n            for j in range(cols):\n                if grid[i][j] == 'V':\n                    if i == 0:\n                        done = False\n                        if j > 0 and grid[i][j-1] == '.':\n                            grid[i] = grid[i][:j-1] + 'V' + grid[i][j:]\n                        if j < cols-1 and grid[i][j+1] == '.':\n                            grid[i] = grid[i][:j+1] + 'V' + grid[i][j+2:]\n                    else:\n                        if grid[i-1][j] == '.':\n                            done = False\n                            grid[i-1] = grid[i-1][:j] + 'V' + grid[i-1][j+1:]\n                        elif grid[i-1][j] == '#':\n                            done = False\n                            if j > 0 and grid[i][j-1] == '.':\n                                grid[i] = grid[i][:j-1] + 'V' + grid[i][j:]\n                            if j < cols-1 and grid[i][j+1] == '.':\n                                grid[i] = grid[i][:j+1] + 'V' + grid[i][j+2:]\n\n        if done:\n            break\n\n    # Print the grid\n    for i in range(rows):\n        print(grid[i])\n\nif __name__ == \"__main__\":\n    main()\n", "n, m = [int(i) for i in input().split()]\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == 'V':\n            if i-1 >= 0:\n                if grid[i-1][j] == '.':\n                    grid[i-1] = grid[i-1][:j] + \"V\" + grid[i-1][j+1:]\n                if grid[i-1][j] == '#':\n                    if (j-1 >= 0) and (grid[i][j-1] == '.'):\n                        grid[i] = grid[i][:j-1] + \"V\" + grid[i][j:]\n                    if (j+1 < m) and (grid[i][j+1] == '.'):\n                        grid[i] = grid[i][:j+1] + \"V\" + grid[i][j+2:]\n\nfor i in range(n):\n    print(grid[i])\n", "\n\nn = int(input())\nm = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\n\nwhile True:\n    new_grid = [['.' for i in range(m)] for j in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                new_grid[i][j] = '.'\n            elif grid[i][j] == '#':\n                new_grid[i][j] = '#'\n            elif grid[i][j] == 'V':\n                if i == 0:\n                    new_grid[i][j] = 'V'\n                elif grid[i-1][j] == '.':\n                    new_grid[i-1][j] = 'V'\n                elif grid[i-1][j] == '#':\n                    if j > 0:\n                        new_grid[i][j-1] = 'V'\n                    if j < m-1:\n                        new_grid[i][j+1] = 'V'\n                else:\n                    new_grid[i][j] = 'V'\n    if grid == new_grid:\n        break\n    grid = new_grid\n\nfor row in grid:\n    print(''.join(row))\n", "\n\nn, m = [int(i) for i in input().split()]\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == 'V':\n            if (i-1 >= 0) and (grid[i-1][j] == '.'):\n                grid[i-1] = grid[i-1][:j] + \"V\" + grid[i-1][j+1:]\n            if (i-1 >= 0) and (grid[i-1][j] == '#'):\n                if (j-1 >= 0) and (grid[i][j-1] == '.'):\n                    grid[i] = grid[i][:j-1] + \"V\" + grid[i][j:]\n                if (j+1 < m) and (grid[i][j+1] == '.'):\n                    grid[i] = grid[i][:j+1] + \"V\" + grid[i][j+2:]\n\nfor i in range(n):\n    print(grid[i])\n", "\nn, m = [int(i) for i in input().split()]\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == 'V':\n            if i-1 >= 0 and grid[i-1][j] == '.':\n                grid[i-1] = grid[i-1][:j] + \"V\" + grid[i-1][j+1:]\n            if i-1 >= 0 and grid[i-1][j] == '#':\n                if (j-1 >= 0) and (grid[i][j-1] == '.'):\n                    grid[i] = grid[i][:j-1] + \"V\" + grid[i][j:]\n                if (j+1 < m) and (grid[i][j+1] == '.'):\n                    grid[i] = grid[i][:j+1] + \"V\" + grid[i][j+2:]\n\nfor i in range(n):\n    print(grid[i])\n", "from sys import stdin\n\ndef main():\n    N, M = [int(x) for x in stdin.readline().split()]\n    grid = [stdin.readline().rstrip() for _ in range(N)]\n    for r in range(N - 1, -1, -1):\n        for c in range(M):\n            if grid[r][c] == 'V':\n                if r + 1 < N and grid[r + 1][c] == '.':\n                    grid[r + 1] = grid[r + 1][:c] + 'V' + grid[r + 1][c + 1:]\n                if c - 1 >= 0 and grid[r][c - 1] == '.':\n                    grid[r] = grid[r][:c - 1] + 'V' + grid[r][c:]\n                if c + 1 < M and grid[r][c + 1] == '.':\n                    grid[r] = grid[r][:c + 1] + 'V' + grid[r][c + 2:]\n    for row in grid:\n        print(row)\n\nif __name__ == '__main__':\n    main()\n", "N, M = map(int, input().split())\ngrid = [list(input()) for _ in range(N)]\n\nfor row in range(N):\n    for col in range(M):\n        if grid[row][col] == \"V\":\n            if row == 0:\n                continue\n            elif grid[row-1][col] == \".\":\n                grid[row-1][col] = \"V\"\n            elif grid[row-1][col] == \"#\":\n                if col > 0 and grid[row][col-1] == \".\":\n                    grid[row][col-1] = \"V\"\n                if col < M-1 and grid[row][col+1] == \".\":\n                    grid[row][col+1] = \"V\"\n\nfor row in range(N):\n    print(\"\".join(grid[row]))\n", "\n\nimport sys\n\ndef main():\n    N, M = map(int, sys.stdin.readline().split())\n    grid = [list(sys.stdin.readline().strip()) for _ in range(N)]\n    # each cell is either air, stone, or water\n    # water spreads:\n    # * if water cell is above air cell, air cell turns into water\n    # * if water cell is above stone cell, air cells left or right of water cell turn into water if they exist\n    # * each second\n    # * water stops spreading\n    # print grid when water stops spreading\n    # assume that all cells outside of the grid behave as air cells\n    #   e.g. if water cell is at bottommost row, water will not spread to sides\n    #\n    # grid is N rows and M columns\n    # 2 <= N, M <= 50\n    #\n    # each of N lines contains a string S of length M\n    # S represents one of the rows in the grid\n    # S consists of the symbols \".\", \"#\", and \"V\"\n    #   . = air\n    #   # = stone\n    #   V = water\n\n    # spread water\n    for i in range(N-1, -1, -1):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                if i == N-1:\n                    if j == 0:\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j+1] == '.':\n                            grid[i-1][j+1] = 'V'\n                    elif j == M-1:\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j-1] == '.':\n                            grid[i-1][j-1] = 'V'\n                    else:\n                        if grid[i-1][j-1] == '.':\n                            grid[i-1][j-1] = 'V'\n                        if grid[i-1][j] == '.':\n                            grid[i-1][j] = 'V'\n                        if grid[i-1][j+1] == '.':\n                            grid[i-1][j+1] = 'V'\n                else:\n                    if grid[i-1][j] == '.':\n                        grid[i-1][j] = 'V'\n                    elif grid[i-1][j] == '#':\n                        if j == 0:\n                            if grid[i][j+1] == '.':\n                                grid[i][j+1] = 'V'\n                        elif j == M-1:\n                            if grid[i][j-1] == '.':\n                                grid[i][j-1] = 'V'\n                        else:\n                            if grid[i][j-1] == '.':\n                                grid[i][j-1] = 'V'\n                            if grid[i][j+1] == '.':\n                                grid[i][j+1] = 'V'\n\n    # print grid\n    for i in range(N):\n        print(''.join(grid[i]))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    grid = []\n    for _ in range(n):\n        grid.append(list(input()))\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"V\":\n                grid[i][j] = \"v\"\n    while True:\n        changed = False\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == \"v\":\n                    if i > 0 and grid[i - 1][j] == \".\":\n                        grid[i - 1][j] = \"v\"\n                        changed = True\n                    if i < n - 1 and grid[i + 1][j] == \".\":\n                        grid[i + 1][j] = \"v\"\n                        changed = True\n                    if j < m - 1 and grid[i][j + 1] == \".\":\n                        grid[i][j + 1] = \"v\"\n                        changed = True\n                    if j > 0 and grid[i][j - 1] == \".\":\n                        grid[i][j - 1] = \"v\"\n                        changed = True\n        if not changed:\n            break\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"v\":\n                grid[i][j] = \"V\"\n            elif grid[i][j] == \".\":\n                grid[i][j] = \" \"\n    for i in range(n):\n        print(\"\".join(grid[i]))\n\nif __name__ == \"__main__\":\n    main()\n", "n, m = [int(i) for i in input().split()]\ngrid = []\nfor i in range(n):\n    grid.append(input())\nfor i in range(n):\n    for j in range(m):\n        if grid[i][j] == 'V':\n            if i-1 >= 0:\n                if grid[i-1][j] == '.':\n                    grid[i-1] = grid[i-1][:j] + \"V\" + grid[i-1][j+1:]\n                if grid[i-1][j] == '#':\n                    if (j-1 >= 0) and (grid[i][j-1] == '.'):\n                        grid[i] = grid[i][:j-1] + \"V\" + grid[i][j:]\n                    if (j+1 < m) and (grid[i][j+1] == '.'):\n                        grid[i] = grid[i][:j+1] + \"V\" + grid[i][j+2:]\nfor i in range(n):\n    print(grid[i])\n", "\n\nimport sys\n\n\ndef main():\n    N, M = [int(x) for x in sys.stdin.readline().split()]\n    grid = [sys.stdin.readline().rstrip() for _ in range(N)]\n    for i in range(N - 1, -1, -1):\n        for j in range(M):\n            if grid[i][j] == 'V':\n                if i + 1 < N and grid[i + 1][j] == '.':\n                    grid[i + 1] = grid[i + 1][:j] + 'V' + grid[i + 1][j + 1:]\n                if j - 1 >= 0 and grid[i][j - 1] == '.':\n                    grid[i] = grid[i][:j - 1] + 'V' + grid[i][j:]\n                if j + 1 < M and grid[i][j + 1] == '.':\n                    grid[i] = grid[i][:j + 1] + 'V' + grid[i][j + 2:]\n    for row in grid:\n        print(row)\n\n\nif __name__ == '__main__':\n    main()\n"]