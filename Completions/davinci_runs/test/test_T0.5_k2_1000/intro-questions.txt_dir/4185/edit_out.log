2022-04-11 18:32:46.229294 num operations 2
2022-04-11 18:32:46.229325 size on input set 1
2022-04-11 18:32:48.315304 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\ndef get_min_moves(matrix):\n    n = len(matrix)\n    m = len(matrix[0])\n\n    moves = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] != (i * m) + j + 1:\n                moves += 1\n    return moves\n\n\nif __name__ == \"__main__\":\n    n, m = list(map(int, input().split()))\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n\n    print(get_min_moves(matrix))\n"
    },
    {
      "index": 1,
      "text": "\ndef get_min_moves(matrix):\n    n = len(matrix)\n    m = len(matrix[0])\n\n    moves = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] != (i * m) + j + 1:\n                moves += 1\n    return moves\n\n\nif __name__ == \"__main__\":\n    n, m = list(map(int, input().split()))\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n\n    print(get_min_moves(matrix))\n"
    }
  ],
  "created": 1649716366,
  "object": "edit"
}
2022-04-11 18:32:48.315690 fix spelling mistakes 2 ['\ndef get_min_moves(matrix):\n    n = len(matrix)\n    m = len(matrix[0])\n\n    moves = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] != (i * m) + j + 1:\n                moves += 1\n    return moves\n\n\nif __name__ == "__main__":\n    n, m = list(map(int, input().split()))\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n\n    print(get_min_moves(matrix))\n', '\ndef get_min_moves(matrix):\n    n = len(matrix)\n    m = len(matrix[0])\n\n    moves = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] != (i * m) + j + 1:\n                moves += 1\n    return moves\n\n\nif __name__ == "__main__":\n    n, m = list(map(int, input().split()))\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n\n    print(get_min_moves(matrix))\n']
2022-04-11 18:32:48.315742 size on output set 1
2022-04-11 18:32:48.315753 size on input set 1
2022-04-11 18:32:51.170658 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef get_min_moves(matrix):\n    n = len(matrix)\n    m = len(matrix[0])\n\n    moves = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] != (i * m) + j + 1:\n                moves += 1\n    return moves\n\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n\n    print(get_min_moves(matrix))\n"
    },
    {
      "index": 1,
      "text": "\ndef get_min_moves(matrix):\n    n = len(matrix)\n    m = len(matrix[0])\n\n    moves = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] != (i * m) + j + 1 and matrix[i][j] != 0:\n                moves += 1\n    return moves\n\n\nif __name__ == \"__main__\":\n    n, m = list(map(int, input().split()))\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n\n    print(get_min_moves(matrix))\n"
    }
  ],
  "created": 1649716368,
  "object": "edit"
}
2022-04-11 18:32:51.170958 fix syntax errors 2 ['\ndef get_min_moves(matrix):\n    n = len(matrix)\n    m = len(matrix[0])\n\n    moves = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] != (i * m) + j + 1:\n                moves += 1\n    return moves\n\n\nif __name__ == "__main__":\n    n, m = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n\n    print(get_min_moves(matrix))\n', '\ndef get_min_moves(matrix):\n    n = len(matrix)\n    m = len(matrix[0])\n\n    moves = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] != (i * m) + j + 1 and matrix[i][j] != 0:\n                moves += 1\n    return moves\n\n\nif __name__ == "__main__":\n    n, m = list(map(int, input().split()))\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n\n    print(get_min_moves(matrix))\n']
2022-04-11 18:32:51.170991 size on output set 2
