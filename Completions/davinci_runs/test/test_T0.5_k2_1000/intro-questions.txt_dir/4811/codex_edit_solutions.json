["\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print(\"1 0\")\n    else:\n        i = 2\n        while i < k:\n            i *= 2\n        print(\"%d %d\" % (i, i // 2))\n\nif __name__ == \"__main__\":\n    main()\n", "\nk = int(input())\n# k = 7\n\n# First, find the smallest power of 2 greater than k\n# For example, if k = 7, then smallest power of 2 is 8\n# If k = 5, then smallest power of 2 is 8\n# If k = 9, then smallest power of 2 is 16\ni = 1\nwhile 2**i < k:\n    i += 1\n\n# This is the smallest power of 2 greater than k\nsmallest_power = 2**i\n\n# If k is a power of 2, then we can just buy a bar of size k\n# and not break it at all\nif smallest_power == k:\n    print(k, 0)\nelse:\n    # Otherwise, we need to break the bar of size smallest_power\n    # into two smaller bars\n    # We can do this repeatedly until we have a bar of size k\n    num_breaks = 1\n    while smallest_power > k:\n        smallest_power = smallest_power // 2\n        num_breaks += 1\n    print(smallest_power, num_breaks)\n", "\nimport sys\n\ndef main():\n    print(\"Hello World\")\n\nif __name__ == '__main__':\n    main()\n", "\n#!/usr/bin/env python3\n\nN = int(input())\n\nmin_size = 1\nmin_breaks = 0\nwhile min_size < N:\n    min_size *= 2\n    min_breaks += 1\n\nprint(min_size, min_breaks)\n", "\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print(1, 0)\n        return\n    b = 1\n    br = 0\n    while b < k:\n        b *= 2\n        br += 1\n    print(b, br) \n\nif __name__ == '__main__':\n    main()\n", "\n\nk = int(input())\n# k = 7\n\n# First, find the smallest power of 2 greater than k.\n# For example, if k = 7, then smallest power of 2 is 8.\n# If k = 5, then smallest power of 2 is 8.\n# If k = 9, then smallest power of 2 is 16.\ni = 1\nwhile 2**i < k:\n    i += 1\n\n# This is the smallest power of 2 greater than k.\nsmallest_power = 2**i\n\n# If k is a power of 2, then we can just buy a bar of size k and not break it at all.\nif smallest_power == k:\n    print(k, 0)\nelse:\n    # Otherwise, we need to break the bar of size smallest_power into two smaller bars.\n    # We can do this repeatedly until we have a bar of size k.\n    num_breaks = 1\n    while smallest_power > k:\n        smallest_power = smallest_power // 2\n        num_breaks += 1\n    print(smallest_power, num_breaks)\n", "\n\ndef main():\n    K = int(input())\n    A = 2\n    while A <= K:\n        A *= 2\n    print(A)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    print(find_bar_size(K), find_breaks(K)) \n\ndef find_bar_size(k):\n    bar_size = 1\n    while bar_size < k:\n        bar_size *= 2\n    return bar_size\n\ndef find_breaks(k):\n    bar_size = find_bar_size(k)\n    breaks = 0\n    while bar_size > k:\n        bar_size /= 2\n        breaks += 1\n    return breaks\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    print(find_bar_size(K), find_breaks(K))\n\ndef find_bar_size(k):\n    bar_size = 1\n    while bar_size < k:\n        bar_size *= 2\n    return bar_size\n\ndef find_breaks(k):\n    bar_size = find_bar_size(k)\n    breaks = 0\n    while bar_size > k:\n        bar_size /= 2\n        breaks += 1\n    return breaks\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# k = int(input())\nk = 7\n# First, find the smallest power of 2 greater than k.\n# For example, if k = 7, then smallest power of 2 is 8.\n# If k = 5, then smallest power of 2 is 8.\n# If k = 9, then smallest power of 2 is 16.\ni = 1\nwhile 2**i < k:\n    i += 1\n# This is the smallest power of 2 greater than k.\nsmallest_power = 2**i\n# If k is a power of 2, then we can just buy a bar of size k and not break it at all.\nif smallest_power == k:\n    print(k, 0)\nelse:\n    # Otherwise, we need to break the bar of size smallest_power into two smaller bars.\n    # We can do this repeatedly until we have a bar of size k.\n    num_breaks = 1\n    while smallest_power > k:\n        smallest_power = smallest_power // 2\n        num_breaks += 1\n    print(smallest_power, num_breaks)\n", "\n\nN = int(input())\n\nmin_size = 1\nmin_breaks = 0\nwhile min_size < N:\n    min_size *= 2\n    min_breaks += 1\n\nprint(min_size, min_breaks)\n", "\n#!/usr/bin/env python3\n\ndef get_bar_size(n):\n    return 2 ** (len(bin(n)) - 3)\n\ndef get_num_breaks(n):\n    bar_size = get_bar_size(n)\n    num_breaks = 0\n    while bar_size != n:\n        bar_size //= 2\n        num_breaks += 1\n    return num_breaks\n\nn = int(input())\nprint('{} {}'.format(get_bar_size(n), get_num_breaks(n)))\n", "\nimport sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    print(find_bar_size(K), find_breaks(K), sep=\" \")\n\ndef find_bar_size(k):\n    bar_size = 1\n    while bar_size < k:\n        bar_size *= 2\n    return bar_size\n\ndef find_breaks(k):\n    bar_size = find_bar_size(k)\n    breaks = 0\n    while bar_size > k:\n        bar_size /= 2\n        breaks += 1\n    return breaks\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\ndef get_bar_size(k): return 2 ** (len(bin(k)) - 3)\n\ndef get_num_breaks(k): return len(bin(k)) - 3\n\nk = int(input())\nprint('{} {}'.format(get_bar_size(k), get_num_breaks(k)))\n", "\n\ndef main():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    a.sort()\n    print(a[n // 2])\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    k = int(sys.stdin.readline().strip())\n    n = 0\n    while 2**n < k:\n        n += 1\n    print(2**n)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print(\"1 0\")\n    else:\n        i = 2\n        while i < k:\n            i *= 2\n        print(\"%d %d\" % (i, i // 2 - 1))\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    print(find_bar_size(K), find_break(K))\n\ndef find_bar_size(k):\n    bar_size = 1\n    while bar_size < k:\n        bar_size *= 2\n    return bar_size\n\ndef find_break(k):\n    bar_size = find_bar_size(k)\n    breaks = 0\n    while bar_size > k:\n        bar_size /= 2\n        breaks += 1\n    return breaks\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\ndef get_bar_length(k):\n    return 2 ** (len(bin(k)) - 3)\n\ndef get_num_cuts(k):\n    bar_length = get_bar_length(k)\n    num_cuts = 0\n    while bar_length != k:\n        bar_length //= 2\n        num_cuts += 1\n    return num_cuts\n\nk = int(input())\nprint('{} {}'.format(get_bar_length(k), get_num_cuts(k)))\n", "N = int(input())\n\nmin_size = 1\nmin_breaks = 0\nwhile min_size < N:\n    min_size *= 2\n    min_breaks += 1\n\nprint(min_breaks)\n", "\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print(\"1 0\")\n    else:\n        i = 2\n        while i < k:\n            i *= 2\n        print(\"%d %d\" % (i, i // 2 - 1)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print(1, 0)\n        return\n    bar = 1\n    breaks = 0\n    while bar < k:\n        bar *= 2\n        breaks += 1\n    print(bar, breaks)\n\nif __name__ == '__main__':\n    main()\n", "\n#\n# k = int(input())\n# # k = 7\n#\n# # First, find the smallest power of 2 greater than k\n# # For example, if k = 7, then smallest power of 2 is 8\n# # If k = 5, then smallest power of 2 is 8\n# # If k = 9, then smallest power of 2 is 16\n# i = 1\n# while 2**i < k:\n#     i += 1\n#\n# # This is the smallest power of 2 greater than k\n# smallest_power = 2**i\n#\n# # If k is a power of 2, then we can just buy a bar of size k\n# # and not break it at all\n# if smallest_power == k:\n#     print(k, 0)\n# else:\n#     # Otherwise, we need to break the bar of size smallest_power\n#     # into two smaller bars\n#     # We can do this repeatedly until we have a bar of size k\n#     num_breaks = 1\n#     while smallest_power > k:\n#         smallest_power = smallest_power // 2\n#         num_breaks += 1\n#     print(smallest_power, num_breaks)\n", "print('Hello world')\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    k = int(sys.stdin.readline().strip())\n    n = 0\n    while 2 ** n < k:\n        n += 1\n    print(2 ** n, n)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    K = int(input())\n    N = 2\n    while N < K:\n        N *= 2\n    print(N, N//2)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    k = int(input())\n    if k == 1:\n        print(1, 0)\n        return\n    bar = 1\n    break_ = 0\n    while bar < k:\n        bar *= 2\n        break_ += 1\n    print(bar, break_)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    K = int(input())\n    A = 2\n    while A < K:\n        A *= 2\n    print(A, A // 2)\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    k = int(sys.stdin.readline().strip())\n    print(k)\n\nif __name__ == '__main__':\n    main()\n"]