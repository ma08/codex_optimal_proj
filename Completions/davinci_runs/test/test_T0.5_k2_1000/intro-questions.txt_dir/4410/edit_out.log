2022-04-11 19:57:58.629016 num operations 2
2022-04-11 19:57:58.629048 size on input set 1
2022-04-11 19:58:03.003372 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# SOLUTION\n# First we find the number of contiguous groups of 1s in the string.\n# We do this by creating a list of the indices of where the 1's occur.\n# Then we create a new list that contains the difference between each element\n# of the first list, and the next. The number of contiguous groups of 1s is\n# then the number of elements in this second list that are greater than k.\n\n# Then we find the number of 1s in the string.\n\n# The answer is the maximum of the two numbers.\n\n# The time complexity of this solution is O(n)\n# The space complexity of this solution is O(n)\n\ndef max_num_tables(n, k, s):\n    indices = [i for i, x in enumerate(s) if x == '1']\n    differences = [indices[i+1] - indices[i] for i in range(len(indices)-1)]\n    num_contiguous_groups = len([x for x in differences if x > k])\n    num_ones = len(indices)\n    return max(num_ones, num_contiguous_groups)\n\nnum_tests = int(input())\nfor _ in range(num_tests):\n    n, k = map(int, input().split())\n    s = input()\n    print(max_num_tables(n, k, s))\n"
    },
    {
      "index": 1,
      "text": "\n\n# SOLUTION\n# First we find the number of contiguous groups of 1s in the string.\n# We do this by creating a list of the indices of where the 1's occur.\n# Then we create a new list that contains the difference between each element\n# of the first list, and the next. The number of contiguous groups of 1s is\n# then the number of elements in this second list that are greater than k.\n\n# Then we find the number of 1s in the string.\n\n# The answer is the maximum of the two numbers.\n\n# The time complexity of this solution is O(n)\n# The space complexity of this solution is O(n)\n\ndef max_num_tables(n, k, s):\n    indices = [i for i, x in enumerate(s) if x == '1']\n    differences = [indices[i+1] - indices[i] for i in range(len(indices)-1)]\n    num_contiguous_groups = len([x for x in differences if x > k])\n    num_ones = len(indices)\n    return max(num_ones, num_contiguous_groups)\n\nnum_tests = int(input())\nfor _ in range(num_tests):\n    n, k = map(int, input().split())\n    s = input()\n    print(max_num_tables(n, k, s))\n"
    }
  ],
  "created": 1649721479,
  "object": "edit"
}
2022-04-11 19:58:03.003933 fix spelling mistakes 2 ["\n\n# SOLUTION\n# First we find the number of contiguous groups of 1s in the string.\n# We do this by creating a list of the indices of where the 1's occur.\n# Then we create a new list that contains the difference between each element\n# of the first list, and the next. The number of contiguous groups of 1s is\n# then the number of elements in this second list that are greater than k.\n\n# Then we find the number of 1s in the string.\n\n# The answer is the maximum of the two numbers.\n\n# The time complexity of this solution is O(n)\n# The space complexity of this solution is O(n)\n\ndef max_num_tables(n, k, s):\n    indices = [i for i, x in enumerate(s) if x == '1']\n    differences = [indices[i+1] - indices[i] for i in range(len(indices)-1)]\n    num_contiguous_groups = len([x for x in differences if x > k])\n    num_ones = len(indices)\n    return max(num_ones, num_contiguous_groups)\n\nnum_tests = int(input())\nfor _ in range(num_tests):\n    n, k = map(int, input().split())\n    s = input()\n    print(max_num_tables(n, k, s))\n", "\n\n# SOLUTION\n# First we find the number of contiguous groups of 1s in the string.\n# We do this by creating a list of the indices of where the 1's occur.\n# Then we create a new list that contains the difference between each element\n# of the first list, and the next. The number of contiguous groups of 1s is\n# then the number of elements in this second list that are greater than k.\n\n# Then we find the number of 1s in the string.\n\n# The answer is the maximum of the two numbers.\n\n# The time complexity of this solution is O(n)\n# The space complexity of this solution is O(n)\n\ndef max_num_tables(n, k, s):\n    indices = [i for i, x in enumerate(s) if x == '1']\n    differences = [indices[i+1] - indices[i] for i in range(len(indices)-1)]\n    num_contiguous_groups = len([x for x in differences if x > k])\n    num_ones = len(indices)\n    return max(num_ones, num_contiguous_groups)\n\nnum_tests = int(input())\nfor _ in range(num_tests):\n    n, k = map(int, input().split())\n    s = input()\n    print(max_num_tables(n, k, s))\n"]
2022-04-11 19:58:03.004009 size on output set 1
2022-04-11 19:58:03.004027 size on input set 1
2022-04-11 19:58:16.759274 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# SOLUTION 1\n# We create a list of the indices of where the 1's occur.\n# Then we create a new list that contains the difference between each element of the first list, and the next.\n# The number of contiguous groups of 1s is then the number of elements in this second list that are greater than k.\n\n# We find the number of 1s in the string.\n\n# The answer is the maximum of the two numbers.\n\n# The time complexity of this solution is O(n)\n# The space complexity of this solution is O(n)\n\n\ndef max_num_tables(n, k, s):\n    indices = [i for i, x in enumerate(s) if x == '1']\n    differences = [indices[i + 1] - indices[i] for i in range(len(indices) - 1)]\n    num_contiguous_groups = len([x for x in differences if x > k])\n    num_ones = len(indices)\n    return max(num_ones, num_contiguous_groups)\n\n\nnum_tests = int(input())\nfor _ in range(num_tests):\n    n, k = map(int, input().split())\n    s = input()\n    print(max_num_tables(n, k, s))\n"
    },
    {
      "index": 1,
      "text": "\n# SOLUTION\n# First we find the number of contiguous groups of 1s in the string.\n# We do this by creating a list of the indices of where the 1's occur.\n# Then we create a new list that contains the difference between each element\n# of the first list, and the next. The number of contiguous groups of 1s is\n# then the number of elements in this second list that are greater than k.\n\n# Then we find the number of 1s in the string.\n\n# The answer is the maximum of the two numbers.\n\n# The time complexity of this solution is O(n)\n# The space complexity of this solution is O(n)\n\ndef max_num_tables(n, k, s):\n    indices = [i for i, x in enumerate(s) if x == '1']\n    differences = [indices[i+1] - indices[i] for i in range(len(indices)-1)]\n    num_contiguous_groups = len([x for x in differences if x > k])\n    num_ones = len(indices)\n    return max(num_ones, num_contiguous_groups)\n\nnum_tests = int(input())\nfor _ in range(num_tests):\n    n, k = map(int, input().split())\n    s = input()\n    print(max_num_tables(n, k, s))\n"
    }
  ],
  "created": 1649721483,
  "object": "edit"
}
2022-04-11 19:58:16.759777 fix syntax errors 2 ["\n\n# SOLUTION 1\n# We create a list of the indices of where the 1's occur.\n# Then we create a new list that contains the difference between each element of the first list, and the next.\n# The number of contiguous groups of 1s is then the number of elements in this second list that are greater than k.\n\n# We find the number of 1s in the string.\n\n# The answer is the maximum of the two numbers.\n\n# The time complexity of this solution is O(n)\n# The space complexity of this solution is O(n)\n\n\ndef max_num_tables(n, k, s):\n    indices = [i for i, x in enumerate(s) if x == '1']\n    differences = [indices[i + 1] - indices[i] for i in range(len(indices) - 1)]\n    num_contiguous_groups = len([x for x in differences if x > k])\n    num_ones = len(indices)\n    return max(num_ones, num_contiguous_groups)\n\n\nnum_tests = int(input())\nfor _ in range(num_tests):\n    n, k = map(int, input().split())\n    s = input()\n    print(max_num_tables(n, k, s))\n", "\n# SOLUTION\n# First we find the number of contiguous groups of 1s in the string.\n# We do this by creating a list of the indices of where the 1's occur.\n# Then we create a new list that contains the difference between each element\n# of the first list, and the next. The number of contiguous groups of 1s is\n# then the number of elements in this second list that are greater than k.\n\n# Then we find the number of 1s in the string.\n\n# The answer is the maximum of the two numbers.\n\n# The time complexity of this solution is O(n)\n# The space complexity of this solution is O(n)\n\ndef max_num_tables(n, k, s):\n    indices = [i for i, x in enumerate(s) if x == '1']\n    differences = [indices[i+1] - indices[i] for i in range(len(indices)-1)]\n    num_contiguous_groups = len([x for x in differences if x > k])\n    num_ones = len(indices)\n    return max(num_ones, num_contiguous_groups)\n\nnum_tests = int(input())\nfor _ in range(num_tests):\n    n, k = map(int, input().split())\n    s = input()\n    print(max_num_tables(n, k, s))\n"]
2022-04-11 19:58:16.760082 size on output set 2
