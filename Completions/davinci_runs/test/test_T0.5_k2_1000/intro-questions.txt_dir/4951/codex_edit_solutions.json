["\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    print(lines)\n    lineCount = 1\n    for line in lines:\n        if line[-2] != \"->\" or line[-1] != \"end\":\n            print(lineCount)\n            break\n        else:\n            for i in range(len(line)-2):\n                if line[i] not in [item for sublist in lines[:lineCount-1] for item in sublist]:\n                    print(lineCount)\n                    break\n        lineCount += 1\n    else:\n        print(\"correct\")\n\nmain()\n", "\n\ndef is_valid(proof):\n    \"\"\"\n    Given a list of lines of a \"proof\", determine whether it is valid.\n    \"\"\"\n    # The set of all previous conclusions\n    prev_conclusions = set()\n\n    for line in proof:\n        # Split the line into assumptions and conclusion\n        split = line.split(\" -> \")\n        assumptions = split[0]\n        conclusion = split[1]\n\n        # If there are no assumptions, the conclusion is an axiom\n        if assumptions == \"\":\n            curr_conclusions.add(conclusion)\n        else:\n            # Otherwise, each assumption must be in the set of previous conclusions\n            for assumption in assumptions.split():\n                if assumption not in prev_conclusions:\n                    return False\n                curr_conclusions.add(conclusion)\n\n        # Add the current assumptions to the set of previous conclusions\n        prev_conclusions.update(curr_conclusions)\n\n    return True\n\n\ndef main():\n    # Read the number of lines in the proof\n    n = int(input())\n    # Read the proof\n    proof = [input() for _ in range(n)]\n\n    # Determine whether the proof is valid\n    valid = is_valid(proof)\n\n    if valid:\n        print(\"correct\")\n    else:\n        # If the proof is not valid, print the line number of the first invalid line\n        for i, line in enumerate(proof):\n            split = line.split(\" -> \")\n            assumptions = split[0]\n            conclusion = split[1]\n\n            if assumptions == \"\":\n                if conclusion not in curr_conclusions:\n                    print(i+1)\n                    break\n            else:\n                for assumption in assumptions.split():\n                    if assumption not in curr_conclusions:\n                        print(i+1)\n                        break\n                else:\n                    continue\n                break\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    n = int(input().strip())\n    lines = []\n    for i in range(n):\n        lines.append(input().strip().split())\n    lineCount = 1\n    for line in lines:\n        if line[-2] != \"->\":\n            print(lineCount)\n            break\n        else:\n            for i in range(len(line)-2):\n                if line[i] not in lines[:lineCount-1]:\n                    print(lineCount)\n                    break\n        lineCount += 1\n    else:\n        print(\"correct\")\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        if line.strip() == \"\":\n            continue\n        else:\n            n = int(line.strip())\n            lines = []\n            for i in range(n):\n                lines.append(sys.stdin.readline().strip().split())\n            for i in range(n):\n                for j in range(i):\n                    if lines[j][-1] in lines[i][:-2]:\n                        continue\n                    else:\n                        print(i + 1)\n                        return\n            print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    lines = []\n    for _ in range(int(sys.stdin.readline().strip())):\n        lines.append(sys.stdin.readline().strip().split(' -> '))\n\n    for i, line in enumerate(lines):\n        if line[0] != '' and line[0] not in [j[1] for j in lines[:i]]:\n            print(i+1)\n            break\n    else:\n        print('Correct')\n\nmain()\n", "\n\ndef is_valid(proof):\n    \"\"\"\n    Given a list of lines of a \"proof\", determine whether it is valid.\n    \"\"\"\n    # The set of all previous conclusions and assumptions\n    prev_conclusions_and_assumptions = set()\n\n    for line in proof:\n        # Split the line into assumptions and conclusion\n        split = line.split(\" -> \")\n        assumptions = split[0]\n        conclusion = split[1]\n\n        # If there are no assumptions, the conclusion is an assumption\n        if assumptions == \"\":\n            prev_conclusions_and_assumptions.add(conclusion)\n        else:\n            # Otherwise, each assumption must be in the set of previous conclusions\n            for assumption in assumptions.split():\n                if assumption not in prev_conclusions:\n                    return False\n                    return False\n\n        prev_conclusions_and_assumptions.add(conclusion)\n\n    return True\n\n\ndef main():\n    # Read the number of lines in the proof\n    n = int(input())\n    # Read the proof\n    proof = [input() for _ in range(n)]\n\n    # Determine whether the proof is valid\n    valid = is_valid(proof)\n\n    if valid:\n        print(\"correct\")\n    else:\n        # If the proof is not valid, print the line number of the first invalid line\n        for i, line in enumerate(proof):\n            split = line.split(\" -> \")\n            assumptions = split[0]\n            conclusion = split[1]\n\n            if assumptions == \"\":\n                if conclusion not in prev_conclusions_and_assumptions:\n                    print(i+1)\n                    break\n            else:\n                for assumption in assumptions.split():\n                    if assumption not in prev_conclusions_and_assumptions:\n                        print(i+1)\n                        break\n                else:\n                    continue\n                break\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())  # read the number of lines\n    lines = []\n    for i in range(n):  # read the lines\n        lines.append(sys.stdin.readline().strip().split())\n    for i in range(n):  # check if the first word is in the rest of the line\n        for j in range(i):\n            if lines[j][-1] in lines[i][:-2]:\n                continue\n            else:\n                print(i + 1)\n                return\n\n    print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n\ndef check_proof(proof_lines):\n    assumptions = []\n    for line in proof_lines:\n        line = line.split('->')\n        if line[0].strip() == '':\n            assumptions.append(line[1].strip())\n        else:\n            for assumption in line[0].split():\n                if assumption not in assumptions:\n                    return proof_lines.index(line) + 1\n            assumptions.append(line[1].strip())\n    return 'correct'\n\n\nif __name__ == '__main__':\n    n = int(input())\n    proof = []\n    for _ in range(n):\n        proof.append(input())\n    print(check_proof(proof))\n", "import sys\n\ndef main():\n    lines = []\n    for i in range(int(sys.stdin.readline().strip())):\n        lines.append(sys.stdin.readline().strip().split(' -> '))\n\n    for i, line in enumerate(lines):\n        if line[0] != '' and line[0] not in [j[1] for j in lines[:i]]:\n            print(i+1)\n            break\n    else:\n        print('Correct')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N = int(input())\n    conclusion_list = [input()]\n    for i in range(N):\n        line = input()\n        if \"->\" in line:\n            conclusion = line.split(\"->\")[1].strip()\n            assumptions = line.split(\"->\")[0].split(\" \")\n            for assumption in assumptions:\n                if assumption not in conclusion_list:\n                    print(i + 1)\n                    return\n        else:\n            print(i + 1)\n            return\n        conclusion_list.append(conclusion)\n\n    print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef main():\n    lines = []\n    for i in range(int(sys.stdin.readline().strip())):\n        lines.append(sys.stdin.readline().strip().split(' -> '))\n\n    print(lines)\n    # for i, line in enumerate(lines):\n    #     if line[0] != '' and line[0] not in [j[1] for j in lines[:i]]:\n    #         print(i+1)\n    #         break\n    # else:\n    #     print('correct')\n\nmain()\n", "\n\ndef is_valid(proof):\n    \"\"\"\n    Given a list of lines of a \"proof\", determine whether it is valid.\n    \"\"\"\n    # The set of all previous conclusions\n    prev_conclusions = set()\n    # The set of all current assumptions\n    curr_assumptions = set()\n\n    for line in proof:\n        # Split the line into assumptions and conclusion\n        split = line.split(\"->\")\n        assumptions = split[0].strip()\n        conclusion = split[1].strip()\n\n        # If there are no assumptions, the conclusion is an assumption\n        if assumptions == \"\":\n            curr_assumptions.add(conclusion)\n        else:\n            # Otherwise, each assumption must be in the set of previous conclusions\n            for assumption in assumptions.split(\" \"):\n                if assumption not in prev_conclusions:\n                    return False\n            curr_assumptions.add(conclusion)\n\n        # Add the current assumptions to the set of previous conclusions\n        prev_conclusions.update(curr_assumptions)\n\n    return True\n\n\ndef main():\n    # Read the number of lines in the proof\n    n = int(input())\n    # Read the proof\n    proof = [input() for _ in range(n)]\n\n    # Determine whether the proof is valid\n    valid = is_valid(proof)\n\n    if valid:\n        print(\"correct\")\n    else:\n        # If the proof is not valid, print the line number of the first invalid line\n        for i, line in enumerate(proof):\n            split = line.split(\"->\")\n            assumptions = split[0].strip()\n            conclusion = split[1].strip()\n\n            if assumptions == \"\":\n                if conclusion not in prev_conclusions:\n                    print(i+1)\n                    break\n            else:\n                for assumption in assumptions.split(\" \"):\n                    if assumption not in prev_conclusions:\n                        print(i+1)\n                        break\n                else:\n                    continue\n                break\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    lines = []\n    for line in sys.stdin.readlines():\n        lines.append(line.strip())\n\n    lines = lines[1:]\n    lines = [line.split() for line in lines]\n    lines = [(line[:-1], line[-1]) for line in lines]\n    lines = [(tuple(line[0]), line[1]) for line in lines]\n\n    for i, line in enumerate(lines):\n        if line[0] == ():\n            continue\n        for assumption in line[0]:\n            if assumption not in [line[1] for line in lines[:i]]:\n                print(i+1)\n                return\n    print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    N = int(input())\n    conclusion_list = []\n    for i in range(N):\n        conclusion_list.append(input())\n\n    for i in range(N):\n        line = conclusion_list[i]\n        if \"->\" in line or \"|-\" in line:\n            if i == 0:\n                print(i + 1)\n                return\n            conclusion = line.split(\"->\")[1].strip().replace(\" \", \"\")\n                    print(i + 1)\n                    return\n        elif \"&\" in line:\n            if i == 0:\n                print(i + 1)\n                return\n            assumptions = line.split(\"&\")\n            for assumption in assumptions:\n                if assumption not in conclusion_list[:i]:\n                    print(i + 1)\n                    return\n        elif \"|\" in line:\n            if i == 0:\n                print(i + 1)\n                return\n            assumptions = line.split(\"|\")\n            for assumption in assumptions:\n                if assumption not in conclusion_list[:i]:\n            assumptions = line.split(\"->\")[0].split(\"&\")\n            for assumption in assumptions:\n                if assumption not in conclusion_list[:i]:\n                    print(i + 1)\n                    return\n        else:\n            print(i + 1)\n            return\n\n    print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    N = int(input())\n    conclusion_list = [None] * N\n    for i in range(N):\n        conclusion_list[i] = input()\n\n    for i in range(N):\n        line = conclusion_list[i]\n        if \"->\" in line:\n            if i == 0:\n                print(i + 1)\n                return\n            conclusion = line.split(\"->\")[1].strip()  # \u0432\u044b\u0432\u043e\u0434\n            assumptions = line.split(\"->\")[0].split(\" \")  # \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f\n            for assumption in assumptions:\n                if assumption not in conclusion_list[:i]:  # \u0435\u0441\u043b\u0438 \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043d\u0435\u0442 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435\n                    print(i + 1)\n                    return\n        else:  # \u0435\u0441\u043b\u0438 \u0432\u044b\u0432\u043e\u0434 \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0439\n            print(i + 1)\n            return\n\n    print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    lines = []\n    for i in range(int(sys.stdin.readline().strip())):\n        lines.append(sys.stdin.readline().strip().split(' -> '))\n\n    for i, line in enumerate(lines):\n        if line[0] != '' and line[0] not in [j[1] for j in lines[:i]] and line[0] not in [j[0] for j in lines[:i]]:\n            print(i+1)\n            break\n    else:\n        print('correct')\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        lines.append(sys.stdin.readline().strip().split())\n    lineCount = 1\n    for line in lines:\n        if line[-2] != \"->\" or line[-1] != \"->\":\n            print(lineCount)\n            break\n        else:\n            for i in range(len(line)-2):\n                if line[i] not in lines[:lineCount-1] and line[i] != \"->\":\n                    print(lineCount)\n                    break\n        lineCount += 1\n    else:\n        print(\"correct\")\n\nmain()\n", "\nimport sys\n\ndef main():\n    n = int(input().strip())\n    lines = []\n    for i in range(n):\n        lines.append(input().strip().split())\n    lineCount = 1\n    for line in lines:\n        if line[-2] != \"->\":\n            print(lineCount)\n            break\n        else:\n            for i in range(len(line)-2):\n                if line[i] not in [line[0] for line in lines[:lineCount-1]]:\n                    print(lineCount)\n                    break\n        lineCount += 1\n    else:\n        print(\"correct\")\n\nmain()\n", "\n\ndef main():\n    n = int(input())\n    assumptions = set()\n    for i in range(n):\n        a, arrow, c = input().split()\n        if a == '':\n            assumptions.add(c)\n        else:\n            for aa in a.split():\n                if aa not in assumptions:\n                    print(i + 1)\n                    return\n            assumptions.add(c)\n    print('correct')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        n = int(line.strip())\n        lines = []\n        for i in range(n):\n            lines.append(sys.stdin.readline().strip().split())\n        for i in range(n):\n            for j in range(i):\n                if lines[j][-1] in lines[i][:-2]:\n                    continue\n                else:\n                    print(i+1)\n                    return\n        print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip()) # read the number of lines\n    lines = []\n    for i in range(n): # read the lines\n        lines.append(sys.stdin.readline().strip().split())\n    for i in range(n): # check if the first word is in the rest of the line\n        for j in range(i):\n            if lines[j][-1] in lines[i][:-2]:\n                continue\n            else:\n                print(i+1)\n                return\n    print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    lines = []\n    for line in sys.stdin.readlines():\n        lines.append(line.strip())\n\n    lines = lines[1:]\n    lines = [line.split() for line in lines]\n    lines = [(line[:-1], line[-1]) for line in lines]\n    lines = [(tuple(line[0]), line[1]) for line in lines if line[0] != []]\n\n    for i, line in enumerate(lines):\n        for assumption in line[0]:\n            if assumption not in [line[1] for line in lines[:i]]:\n                print(i+1)\n                return\n    print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef check_proof(proof_list):\n    assumptions = []\n    for line in proof_list:\n        line = line.split('->')\n        if line[0].strip() == '':\n            assumptions.append(line[1].strip())\n        else:\n            for assumption in line[0].split():\n                if assumption not in assumptions:\n                    return proof_list.index(line) + 1\n            assumptions.append(line[1].strip())\n    return 'correct'\n\nif __name__ == '__main__':\n    n = int(raw_input())\n    proof_list = []\n    for _ in range(n):\n        proof_list.append(raw_input())\n    print(check_proof(proof_list))\n", "\n\ndef check_proof(proof_list):\n    assumptions = []\n    for line in proof_list:\n        line = line.split('->')\n        if line[0].strip() == '':\n            assumptions.append(line[1].strip())\n        else:\n            for assumption in line[0].split():\n                if assumption not in assumptions:\n                    return proof_list.index(line) + 1\n            assumptions.append(line[1].strip())\n    return 'correct'\n\n\nif __name__ == '__main__':\n    n = int(input())\n    proof_list = []\n    for _ in range(n):\n        proof_list.append(input())\n    print(check_proof(proof_list))\n", "\nimport sys\n\n\ndef main():\n    lines = []\n    for line in sys.stdin.readlines():\n        lines.append(line.strip())\n\n    lines = [(tuple(line.split()[:-1]), line.split()[-1]) for line in lines[1:]]\n\n    for i, line in enumerate(lines):\n        if line[0] != ():\n            for assumption in line[0]:\n                if assumption not in [line[1] for line in lines[:i]]:\n                    print(i+1)\n                    return\n    print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    N = int(input())\n    conclusion_list = [None] * N\n    for i in range(N):\n        conclusion_list[i] = input()\n\n    for i in range(N):\n        line = conclusion_list[i]\n        if \"->\" in line:\n            if i == 0:\n                print(i+1)\n                return\n            conclusion = line.split(\"->\")[1].strip()\n            assumptions = line.split(\"->\")[0].split(\" \")\n            for assumption in assumptions:\n                if assumption not in conclusion_list[:i]:\n                    print(i+1)\n                    return\n        else:\n            print(i+1)\n            return\n\n    print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    lines = []\n    for line in sys.stdin.readlines():\n        lines.append(line.strip())\n\n    lines = lines[1:]\n    lines = [line.split() for line in lines]\n    lines = [(line[:-1], line[-1]) for line in lines]\n    lines = [(tuple(line[:-1]), line[-1]) for line in lines]\n\n    for i, line in enumerate(lines):\n        if line[0] == ():\n            continue\n        for assumption in line[0]:\n            if assumption not in [line[1] for line in lines[:i]]:\n                print(i+1)\n                return\n    print(\"correct\")\n\nif __name__ == \"__main__\":\n    main()\n"]