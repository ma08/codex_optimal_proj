["\n\ndef sum_of_digits(n): \n    return sum(map(int, str(n))) \n\ndef min_moves(n, s):\n    moves = 0\n    while sum_of_digits(n) > s:\n        moves += 1\n        n += 1\n    return moves\n\nt = int(input())\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(min_moves(n, s))\n", "\ndef sumOfDigits(n):\n    return sum(map(int,str(n)))\n\ndef minMoves(n, s):\n    moves = 0\n    while sumOfDigits(n) > s:\n        moves += 1\n        n += 1\n    return moves\n\nt = int(input())\nfor i in range(t):\n    n,s = map(int,input().split())\n    print(minMoves(n, s))\n", "\ndef sumOfDigit(n):\n    sum_ = 0\n    for i in n:\n        sum_ += int(i)\n    return sum_\n\ndef getMinMoves(n):\n    n = str(n)\n    n_sum = sumOfDigit(n)\n    if n_sum <= s:\n        return 0\n    else:\n        moves = 0\n        i = 0\n        while n_sum > s:\n            if i == len(n) - 1:\n                n = str(int(n) + 1)\n                i = 0\n                moves += 1\n            else:\n                n = n[:i] + str(int(n[i]) - 1) + n[i+1:]\n                i += 1\n            n_sum = sumOfDigit(n)\n        return moves\n\nt = int(input())\n\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(getMinMoves(n))\n", "\ndef sumOfDigit(n):\n    sum = 0\n    for i in n:\n        sum += int(i)\n    return sum\n\ndef getMinMoves(n):\n    n = str(n)\n    nSum = sumOfDigit(n)\n    if nSum <= s:\n        return 0\n    else:\n        moves = 0\n        i = 0\n        while nSum > s:\n            if i == len(n) - 1:\n                n = str(int(n) + 1)\n                i = 0\n                moves += 1\n            else:\n                n = n[:i] + str(int(n[i]) - 1) + n[i + 1:]\n                i += 1\n            nSum = sumOfDigit(n)\n        return moves\n\n\nt = int(input())\n\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(getMinMoves(n))\n", "\n\n    n = str(n)\ndef sum_of_digits(n):\n    sum = 0\n    for i in n:\n        sum += int(i)\n    return sum\n\ndef get_min_moves(n):\n    n = str(n)\n    nSum = sum_of_digits(n)\n    if nSum <= s:\n        return 0\n    else:\n        moves = 0\n        i = 0\n        while nSum > s:\n            if i == len(n) - 1:\n                n = str(int(n) + 1)\n                i = 0\n                moves += 1\n            else:\n                n = n[:i] + str(int(n[i]) - 1) + n[i+1:]\n                i += 1\n            nSum = sum_of_digits(n)\n        return moves\n\nt = int(input())\n\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(get_min_moves(n))\n", "\ndef sum_of_digits(n):\n    s = 0\n    for i in n:\n        s += int(i)\n    return s\n\ndef get_min_moves(n):\n    n = str(n)\n    n_sum = sum_of_digits(n)\n    if n_sum <= s:\n        return 0\n    else:\n        moves = 0\n        i = 0\n        while n_sum > s:\n            if i == len(n) - 1:\n                n = str(int(n) + 1)\n                i = 0\n                moves += 1\n            else:\n                n = n[:i] + str(int(n[i]) - 1) + n[i+1:]\n                i += 1\n            n_sum = sum_of_digits(n)\n        return moves\n\nt = int(input())\n\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(get_min_moves(n))\n", "\ndef sumOfDigits(n):\n\n    return sum(map(int, str(n)))\n\ndef minMoves(n, s):\n    moves = 0\n    while sumOfDigits(n) > s:\n        moves += 1\n        n += 1\n\n    return moves\n\nt = int(input())\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(minMoves(n, s))\n", "\ndef sum_of_digits(n): \n    return sum(map(int, str(n)))\n\ndef min_moves(n, s):\n    moves = 0\n    while sum_of_digits(n) > s:\n        moves += 1\n        n += 1\n    return moves\n\nt = int(input())\nfor i in range(t):\n    n, s = map(int, input().split())\n    print(min_moves(n, s))\n"]