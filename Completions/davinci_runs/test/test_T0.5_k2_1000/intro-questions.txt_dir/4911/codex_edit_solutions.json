["\n\ndef stable_sort(songs, attribute):\n    return sorted(songs, key=lambda x: x.split()[attribute], reverse=True)\n\ndef main():\n    attributes = input().split()\n    num_songs = int(input())\n    songs = []\n    for i in range(num_songs):\n        songs.append(input())\n    num_sorts = int(input())\n    sorts = []\n    for i in range(num_sorts):\n        sorts.append(input())\n    for sort in sorts:\n        print(' '.join(attributes[::-1]))\n        for song in stable_sort(songs, attributes.index(sort)):\n            print(song)\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"main\"\"\"\n    attr = input().split()\n    m = int(input())\n    songs = []\n    for _ in range(m):\n        songs.append(input().split())\n    n = int(input())\n    for _ in range(n):\n        attr_sort = input().split()\n        sort_index = attr.index(attr_sort[0])\n        songs.sort(key=lambda x: x[sort_index], reverse=True)\n        print(*attr)\n        for song in songs:\n            print(*song)\n        print()\n\nmain()\n", "\n# https://open.kattis.com/problems/file\nimport sys\n\nclass Song:\n    def __init__(self, attributes):\n        self.attributes = attributes\n    def __repr__(self):\n        return ' '.join(self.attributes)\n\ndef stable_sort(songs, attribute):\n    return sorted(songs, key=lambda song: song.attributes[attribute])\n\ndef main():\n    attributes = sys.stdin.readline().strip().split()\n    m = int(sys.stdin.readline())\n    songs = []\n    for _ in range(m):\n        songs.append(Song(sys.stdin.readline().strip().split()))\n    n = int(sys.stdin.readline())\n    for _ in range(n):\n        attribute = sys.stdin.readline().strip()\n        print(' '.join(attributes))\n        for song in stable_sort(songs, attributes.index(attribute)):\n            print(song)\n        print()\n\nif __name__ == '__main__':\n    main()\n", "\nfrom sys import stdin\nfrom operator import itemgetter\n\ndef main():\n    attrs = stdin.readline().strip().split()\n    songs = []\n    for _ in range(int(stdin.readline())):\n        songs.append(stdin.readline().strip().split())\n    for _ in range(int(stdin.readline())):\n        attr = stdin.readline().strip()\n        print(' '.join(attrs), end='\\n')\n        for song in sorted(songs, key=itemgetter(attrs.index(attr))):\n            print(' '.join(song), end='\\n')\n        print(end='\\n')\n\nmain()\n", "import sys\n\nclass Song:\n    def __init__(self, attributes):\n        self.attributes = attributes\n\n    def __repr__(self):\n        return ' '.join(self.attributes)\n\n\ndef stable_sort(songs, attribute):\n    return sorted(songs, key=lambda song: song.attributes[attribute])\n\n\ndef main():\n    attributes = sys.stdin.readline().strip().split()\n    m = int(sys.stdin.readline())\n    songs = []\n    for _ in range(m):\n        songs.append(Song(sys.stdin.readline().strip().split()))\n    n = int(sys.stdin.readline())\n    for _ in range(n):\n        attribute = sys.stdin.readline().strip()\n        print(' '.join(attributes))  # print the header\n        for song in stable_sort(songs, attributes.index(attribute)):\n            print(song)\n        print()\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    print('Hello World!')\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    attributes = sys.stdin.readline().rstrip().split(' ')\n    songs = []\n    for i in range(int(sys.stdin.readline())):\n        songs.append(sys.stdin.readline().rstrip().split(' '))\n    for i in range(int(sys.stdin.readline())):\n        attribute = sys.stdin.readline().rstrip()\n        songs.sort(key=lambda x: x[attributes.index(attribute)])\n        print(' '.join(attributes))\n        for song in songs:\n            print(' '.join(song))\n        print()\n\nmain()\n", "\n\ndef main():\n    \"\"\"main\"\"\"\n    attr = input().split(',')\n    m = int(input())\n    songs = []\n    for _ in range(m):\n        songs.append(input().split(','))\n    n = int(input())\n    for _ in range(n):\n        attr_sort = input()\n        attr_sort_index = attr.index(attr_sort)\n        songs.sort(key=lambda x: x[attr_sort_index])\n        print(*attr)\n        for song in songs:\n            print(*song)\n        print()\n\nmain()\n", "\n\ndef stable_sort(songs, attribute_index):\n    return sorted(songs, key=lambda x: x.split('|')[attribute_index])\n\ndef main():\n    attributes = input().split('|')\n    num_songs = int(input())\n    songs = []\n    for i in range(num_songs):\n        songs.append(input())\n    num_sorts = int(input())\n    sorts = []\n    for i in range(num_sorts):\n        sorts.append(input())\n    for sort in sorts:\n        print('|'.join(attributes))\n        for song in stable_sort(songs, attributes.index(sort)):\n            print(song)\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef stable_sort(songs, attribute_index):\n    return sorted(songs, key=lambda x: x[attribute_index])\n\ndef main():\n    attributes = list(map(str, input().split()))\n    num_songs = int(input())\n    songs = []\n    for i in range(num_songs):\n        songs.append(list(map(str, input().split())))\n    num_sorts = int(input())\n    sorts = []\n    for i in range(num_sorts):\n        sorts.append(str(input()))\n    for sort in sorts:\n        for song in stable_sort(songs, attributes.index(sort) + 1):\n            print(' '.join(song))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    attributes = sys.stdin.readline().rstrip().split()\n    songs = []\n    for i in range(int(sys.stdin.readline().rstrip())):\n        songs.append(sys.stdin.readline().rstrip().split())\n    for i in range(int(sys.stdin.readline().rstrip())):\n        attribute = sys.stdin.readline().rstrip()\n        songs.sort(key=lambda x: x[attributes.index(attribute)])\n        print(' '.join(attributes))\n        for song in songs:\n            print(' '.join(song))\n        print()\n\nmain()\n", "\n\nfrom sys import stdin\nfrom itertools import islice\nfrom operator import itemgetter\n\ndef main():\n    attributes = next(stdin).rstrip().split()\n    n_files = int(next(stdin))\n    files = [dict(zip(attributes, line.rstrip().split())) for line in islice(stdin, n_files)]\n    n_commands = int(next(stdin)) \n    commands = list(islice(stdin, n_commands)) \n    print(' '.join(attributes))\n    for command in commands:\n        files.sort(key=itemgetter(command.rstrip()))\n        print('\\n'.join(' '.join(file[attr] for attr in attributes) for file in files))\n        print()\n\nmain()\n", "import sys\n\nclass Song:\n    def __init__(self, attributes):\n        self.attributes = attributes\n    def __repr__(self):\n        return ' '.join(self.attributes)\n\ndef stable_sort(songs, attribute):\n    return sorted(songs, key=lambda song: song.attributes[attribute])\n\ndef main():\n    attributes = sys.stdin.readline().strip().split()\n    m = int(sys.stdin.readline())\n    songs = []\n    for _ in range(m):\n        songs.append(Song(sys.stdin.readline().strip().split()))\n    n = int(sys.stdin.readline())\n    for _ in range(n):\n        attribute = sys.stdin.readline().strip()\n        print(' '.join(attributes))\n        for song in stable_sort(songs, attributes.index(attribute)):\n            print(song)\n        print()\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    attributes = sys.stdin.readline().rstrip().split() #read the first line, split it and store it in attributes\n    songs = []\n    for i in range(int(sys.stdin.readline())): #read the second line, convert it to int, and loop that many times\n        songs.append(sys.stdin.readline().rstrip().split()) #read the next line, split it and store it in songs\n    for i in range(int(sys.stdin.readline())): #read the third line, convert it to int, and loop that many times\n        attribute = sys.stdin.readline().rstrip() #read the next line and store it in attribute\n        songs.sort(key=lambda x: x[attributes.index(attribute)]) #sort songs by the attribute\n        print(' '.join(attributes)) #print the attributes\n        for song in songs:\n            print(' '.join(song)) #print each song\n        print() #print a blank line\n\nmain()\n", "from sys import stdin\nfrom operator import itemgetter\n\ndef main():\n    attrs = stdin.readline().strip().split()\n    songs = []\n    for _ in range(int(stdin.readline())):\n        songs.append(stdin.readline().strip().split())\n    for _ in range(int(stdin.readline())):\n        attr = stdin.readline().strip()\n        print(' '.join(attrs), end='\\n')\n        for song in sorted(songs, key=itemgetter(attrs.index(attr))):\n            print(' '.join(song), end='\\n')\n        print(end='\\n')\n\nmain()\n", "\n\nfrom sys import stdin\nfrom itertools import islice\nfrom operator import itemgetter\n\ndef main():\n    attributes = next(stdin).rstrip().split()\n    n_files = int(next(stdin))\n    files = [dict(zip(attributes, next(stdin).rstrip().split())) for _ in range(n_files)]\n    n_commands = int(next(stdin))\n    commands = list(islice(stdin, n_commands))\n    print(' '.join(attributes))\n    for command in commands:\n        files.sort(key=itemgetter(command.rstrip()))\n        print('\\n'.join(' '.join(file[attr] for attr in attributes) for file in files))\n        print()\n\nmain()\n", "\n\ndef main():\n    print(\"hello world!\")\n\nif __name__ == '__main__':\n    main()\n", "\n\n#-----main-----#\ndef main():\n    #read input\n    attr_list = raw_input().split(\" \")\n    num_songs = int(input())\n    songs = []\n    for i in range(num_songs):\n        songs.append(raw_input().split(\" \"))\n    num_commands = int(input())\n    commands = []\n    for i in range(num_commands):\n        commands.append(raw_input())\n    #sort\n    for command in commands:\n        songs = sorted(songs, key=lambda x: x[attr_list.index(command)])\n        #print\n        print(\" \".join(attr_list))\n        for song in songs:\n            print(\" \".join(song))\n        print()\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nfrom sys import stdin\nfrom operator import itemgetter\n\ndef main():\n    attributes = stdin.readline().strip().split()\n    songs = []\n    for _ in range(int(stdin.readline())): #pylint: disable=W0612\n        songs.append(stdin.readline().strip().split())\n    for _ in range(int(stdin.readline())): #pylint: disable=W0612\n        attribute = stdin.readline().strip()\n        print(' '.join(attributes))\n        for song in sorted(songs, key=itemgetter(attributes.index(attribute))):\n            print(' '.join(song))\n        print()\n\nmain()\n", "\nimport sys\n\nclass Song:\n    def __init__(self, attrs):\n        self.attrs = attrs\n    def __repr__(self):\n        return ' '.join(self.attrs)\n\ndef stable_sort(songs, attribute):\n    return sorted(songs, key=lambda song: song.attrs[attribute])\n\ndef main():\n    attrs = sys.stdin.readline().strip().split()\n    m = int(sys.stdin.readline())\n    songs = []\n    for _ in range(m):\n        songs.append(Song(sys.stdin.readline().strip().split()))\n    n = int(sys.stdin.readline())\n    for _ in range(n):\n        attr = sys.stdin.readline().strip()\n        print(' '.join(attrs)) # print the header\n        for song in stable_sort(songs, attrs.index(attr)):\n            print(song)\n        print()\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    attributes = sys.stdin.readline().rstrip().split()\n    songs = []\n    for _ in range(int(sys.stdin.readline())):\n        songs.append(sys.stdin.readline().rstrip().split())\n    for _ in range(int(sys.stdin.readline())):\n        attribute = sys.stdin.readline().rstrip()\n        songs.sort(key=lambda x: x[attributes.index(attribute)])\n        print(' '.join(attributes))\n        for song in songs:\n            print(' '.join(song))\n        print()\n\nmain()\n", "\n\ndef main():\n    print(\"Hello World\")\n\nif __name__ == '__main__':\n    main()\n", "from sys import stdin\nfrom operator import itemgetter\n\ndef main():\n    attributes = stdin.readline().strip().split()\n    songs = []\n    for _ in range(int(stdin.readline())):\n        songs.append(stdin.readline().strip().split())\n    for _ in range(int(stdin.readline())):\n        attribute = stdin.readline().strip()\n        print(' '.join(attributes), end='\\n')\n        for song in sorted(songs, key=itemgetter(attributes.index(attribute))):\n            print(' '.join(song), end='\\n')\n        print(end='\\n')\n\nmain()\n"]