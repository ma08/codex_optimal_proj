2022-04-11 20:01:26.580738 num operations 2
2022-04-11 20:01:26.580761 size on input set 1
2022-04-11 20:01:28.822745 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n#this is a file\nfrom sys import stdin\n\ndef mod_max(x,y,n):\n    return n-((n-y)%x)\n\nfor _ in range(int(stdin.readline().strip())):\n    x,y,n=map(int,stdin.readline().strip().split())\n    print(mod_max(x,y,n))\n"
    },
    {
      "index": 1,
      "text": "\n#this is a comment\nfrom sys import stdin\n\ndef mod_max(x,y,n):\n    return n-((n-y)%x)\n\nfor _ in range(int(stdin.readline().strip())):\n    x,y,n=map(int,stdin.readline().strip().split())\n    print(mod_max(x,y,n))\n"
    }
  ],
  "created": 1649721686,
  "object": "edit"
}
2022-04-11 20:01:28.823013 fix spelling mistakes 2 ['\n#this is a file\nfrom sys import stdin\n\ndef mod_max(x,y,n):\n    return n-((n-y)%x)\n\nfor _ in range(int(stdin.readline().strip())):\n    x,y,n=map(int,stdin.readline().strip().split())\n    print(mod_max(x,y,n))\n', '\n#this is a comment\nfrom sys import stdin\n\ndef mod_max(x,y,n):\n    return n-((n-y)%x)\n\nfor _ in range(int(stdin.readline().strip())):\n    x,y,n=map(int,stdin.readline().strip().split())\n    print(mod_max(x,y,n))\n']
2022-04-11 20:01:28.823040 size on output set 2
2022-04-11 20:01:28.823045 size on input set 2
2022-04-11 20:01:33.922016 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# this is a comment\nfrom sys import stdin\n\ndef mod_max(x,y,n):\n    return n-((n-y)%x)\n\nfor _ in range(int(stdin.readline().strip())):\n    x,y,n=map(int,stdin.readline().strip().split())\n    print(mod_max(x,y,n))\n"
    },
    {
      "index": 1,
      "text": "\n# this is a comment\nfrom sys import stdin\n\n\ndef mod_max(x, y, n):\n    return n-((n-y) % x)\n\n\nfor _ in range(int(stdin.readline().strip())):\n    x, y, n = map(int, stdin.readline().strip().split())\n    print(mod_max(x,y,n))\n"
    }
  ],
  "created": 1649721689,
  "object": "edit"
}
2022-04-11 20:01:33.922496 fix syntax errors 2 ['\n# this is a comment\nfrom sys import stdin\n\ndef mod_max(x,y,n):\n    return n-((n-y)%x)\n\nfor _ in range(int(stdin.readline().strip())):\n    x,y,n=map(int,stdin.readline().strip().split())\n    print(mod_max(x,y,n))\n', '\n# this is a comment\nfrom sys import stdin\n\n\ndef mod_max(x, y, n):\n    return n-((n-y) % x)\n\n\nfor _ in range(int(stdin.readline().strip())):\n    x, y, n = map(int, stdin.readline().strip().split())\n    print(mod_max(x,y,n))\n']
2022-04-11 20:01:36.497290 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#this is a file\nfrom sys import stdin\n\ndef mod_max(x,y,n):\n    return n-((n-y)%x)\n\nfor _ in range(int(stdin.readline().strip())):\n    x,y,n=map(int,stdin.readline().strip().split())\n    print(mod_max(x,y,n))\n"
    },
    {
      "index": 1,
      "text": "\n#this is a file\nfrom sys import stdin\n\ndef mod_max(x,y,n):\n    return x*(n//x)+y\n\nfor _ in range(int(stdin.readline().strip())):\n    x,y,n=map(int,stdin.readline().strip().split())\n    print(mod_max(x,y,n))\n"
    }
  ],
  "created": 1649721694,
  "object": "edit"
}
2022-04-11 20:01:36.497508 fix syntax errors 2 ['#this is a file\nfrom sys import stdin\n\ndef mod_max(x,y,n):\n    return n-((n-y)%x)\n\nfor _ in range(int(stdin.readline().strip())):\n    x,y,n=map(int,stdin.readline().strip().split())\n    print(mod_max(x,y,n))\n', '\n#this is a file\nfrom sys import stdin\n\ndef mod_max(x,y,n):\n    return x*(n//x)+y\n\nfor _ in range(int(stdin.readline().strip())):\n    x,y,n=map(int,stdin.readline().strip().split())\n    print(mod_max(x,y,n))\n']
2022-04-11 20:01:36.497535 size on output set 4
2022-04-11 20:01:36.497561 num operations 2
2022-04-11 20:01:36.497571 size on input set 1
2022-04-11 20:01:38.821380 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# cook your dish here.\nt = int(input())\nfor _ in range(t):\n    x, y, n = map(int, input().split())\n    print(n - (n % x) + y)\n"
    },
    {
      "index": 1,
      "text": "\nt = int(input())\nfor _ in range(t):\n    x, y, n = map(int, input().split())\n    print(n - (n % x) + y)\n"
    }
  ],
  "created": 1649721696,
  "object": "edit"
}
2022-04-11 20:01:38.821699 fix spelling mistakes 2 ['\n\n# cook your dish here.\nt = int(input())\nfor _ in range(t):\n    x, y, n = map(int, input().split())\n    print(n - (n % x) + y)\n', '\nt = int(input())\nfor _ in range(t):\n    x, y, n = map(int, input().split())\n    print(n - (n % x) + y)\n']
2022-04-11 20:01:38.821728 size on output set 2
2022-04-11 20:01:38.821733 size on input set 2
2022-04-11 20:01:40.871378 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nt = int(input())\nfor _ in range(t):\n    x, y, n = map(int, input().split())\n    print(n - (n % x) + y)\n"
    },
    {
      "index": 1,
      "text": "\nt = int(input())\nfor _ in range(t):\n    x, y, n = map(int, input().split())\n    print(n - (n % x) + y)\n"
    }
  ],
  "created": 1649721699,
  "object": "edit"
}
2022-04-11 20:01:40.871533 fix syntax errors 2 ['\nt = int(input())\nfor _ in range(t):\n    x, y, n = map(int, input().split())\n    print(n - (n % x) + y)\n', '\nt = int(input())\nfor _ in range(t):\n    x, y, n = map(int, input().split())\n    print(n - (n % x) + y)\n']
2022-04-11 20:01:44.783285 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "t = int(input())\nfor _ in range(t):\n    x, y, n = map(int, input().split())\n    print(n - (n % x) + y)\n"
    },
    {
      "index": 1,
      "text": "import sys\n\nlines = sys.stdin.readlines()\n\nfor line in lines:\n    x, y, n = map(int, line.split())\n    print(n - (n % x) + y, end=' ')\n"
    }
  ],
  "created": 1649721701,
  "object": "edit"
}
2022-04-11 20:01:44.783474 fix syntax errors 2 ['t = int(input())\nfor _ in range(t):\n    x, y, n = map(int, input().split())\n    print(n - (n % x) + y)\n', "import sys\n\nlines = sys.stdin.readlines()\n\nfor line in lines:\n    x, y, n = map(int, line.split())\n    print(n - (n % x) + y, end=' ')\n"]
2022-04-11 20:01:44.783497 size on output set 3
