["\n\ndef is_increasing(arr):\n    for i in range(len(arr)):\n        if i == len(arr) - 1:\n            return True\n        if arr[i] >= arr[i+1]:\n            return False \n\ndef find_increasing_subsequence(arr):\n    max_len = 1\n    max_indices = [1, 1]\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if is_increasing(arr[i:j+1]) and len(arr[i:j+1]) >= max_len:\n                max_len = len(arr[i:j+1])\n                max_indices = [i+1, j+1]\n    return max_len, max_indices\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    arr = list(map(int, input().split()))\n    max_len, max_indices = find_increasing_subsequence(arr)\n    print(max_len)\n    print(\" \".join(map(str, max_indices)))\n", "import sys\n\ndef read_ints():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef main():\n    n = read_int()\n    a = read_ints()\n    a.insert(0, -1)\n\n    dp = [1] * (n + 1)\n    prev = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        for j in range(i - 1, 0, -1):\n            if a[j] < a[i]:\n                if dp[j] + 1 > dp[i]:\n                    dp[i] = dp[j] + 1\n                    prev[i] = j\n\n    max_len = max(dp)\n    max_index = dp.index(max_len)\n\n    ans = [max_index]\n    while prev[max_index] != 0:\n        max_index = prev[max_index]\n        ans.append(max_index)\n\n    print(max_len)\n    print(' '.join(map(str, reversed(ans))))\n\nif __name__ == '__main__':\n    main()\n", "\n", "\nimport sys\n\ndef read_ints():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef main():\n    n = read_int()\n    a = read_ints()\n    a.insert(0, -1)  # a[0] = -1\n\n    dp = [1] * (n + 1)  # dp[i] = length of longest increasing subsequence ending at i\n    prev = [0] * (n + 1)  # prev[i] = previous index of longest increasing subsequence ending at i\n\n    for i in range(1, n + 1):  # iterate over all indices\n        for j in range(i - 1, 0, -1):  # iterate over all previous indices\n            if a[j] < a[i]:  # if previous index is smaller than current index\n                if dp[j] + 1 > dp[i]:  # if longest increasing subsequence ending at j + 1 is longer than longest increasing subsequence ending at i\n                    dp[i] = dp[j] + 1  # update longest increasing subsequence ending at i\n                    prev[i] = j  # update previous index of longest increasing subsequence ending at i\n\n    max_len = max(dp)\n    max_index = dp.index(max_len)\n\n    ans = [max_index]\n    while prev[max_index] != 0:\n        max_index = prev[max_index]\n        ans.append(max_index)\n\n    print(max_len)\n    print(' '.join(map(str, reversed(ans))))\n\nif __name__ == '__main__':\n    main()\n", "\ndef is_increasing(arr):\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            return False\n    return True\n\ndef find_increasing_sub_sequence(arr):\n    max_len = 0\n    max_indices = []\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if is_increasing(arr[i:j+1]) and len(arr[i:j+1]) > max_len:\n                max_len = len(arr[i:j+1])\n                max_indices = [i+1, j+1]\n    return max_len, max_indices\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    arr = list(map(int, input().split()))\n    max_len, max_indices = find_increasing_sub_sequence(arr)\n    print(max_len)\n    print(\" \".join(map(str, max_indices)))\n", "\nimport sys\n\ndef read_ints():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef main():\n    n = read_int()\n    a = read_ints()\n    a.insert(0, -1)  # a[0] = -1, so that we can start from 1\n\n    dp = [1] * (n + 1)  # dp[i] = length of longest increasing subsequence ending at a[i]\n    prev = [0] * (n + 1)  # prev[i] = previous index of longest increasing subsequence ending at a[i]\n\n    for i in range(1, n + 1):  # iterate over all indices\n        for j in range(i - 1, 0, -1):  # iterate over all previous indices\n            if a[j] < a[i]:  # if previous index is smaller than current index\n                if dp[j] + 1 > dp[i]:  # if longest increasing subsequence ending at a[j] is longer than longest increasing subsequence ending at a[i]\n                    dp[i] = dp[j] + 1  # update longest increasing subsequence ending at a[i]\n                    prev[i] = j  # update previous index of longest increasing subsequence ending at a[i]\n\n    max_len = max(dp)\n    max_index = dp.index(max_len)\n\n    ans = [max_index]\n    while prev[max_index] != 0:\n        max_index = prev[max_index]\n        ans.append(max_index)\n\n    print(max_len)\n    print(' '.join(map(str, reversed(ans))))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef read_ints():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef main():\n    n = read_int()\n    a = read_ints()\n    a.insert(0, -1) # dummy\n\n    dp = [1] * (n + 1)\n    prev = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        for j in range(i - 1, 0, -1):\n            if a[j] < a[i]:\n                if dp[j] + 1 > dp[i]:\n                    dp[i] = dp[j] + 1\n                    prev[i] = j\n\n    max_len = max(dp)\n    max_index = dp.index(max_len)\n\n    ans = [max_index]\n    while prev[max_index] != 0:\n        max_index = prev[max_index]\n        ans.append(max_index)\n\n    print(max_len)\n    print(' '.join(map(str, reversed(ans))))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef is_increasing(arr):\n    if len(arr) == 1:\n        return True\n    elif len(arr) == 2:\n        return arr[1] > arr[0]\n    else:\n        for i in range(1, len(arr)):\n            if arr[i] <= arr[i-1]:\n                return False\n        return True\n\ndef find_increasing_sub_sequence(arr):\n    max_len = 1\n    max_indices = []\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if is_increasing(arr[i:j+1]) and len(arr[i:j+1]) > max_len:\n                max_len = len(arr[i:j+1])\n                max_indices = [i+1, j+1]\n    return max_len, max_indices\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    arr = list(map(int, input().split()))\n    max_len, max_indices = find_increasing_sub_sequence(arr)\n    print(max_len)\n    print(\" \".join(map(str, max_indices)))\n"]