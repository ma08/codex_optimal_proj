["import sys\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Pair:\n    def __init__(self, red, blue):\n        self.red = red\n        self.blue = blue\n\ndef main():\n    n = int(sys.stdin.readline())\n    red = []\n    blue = []\n    for _ in range(n):\n        x, y = map(int, sys.stdin.readline().split())\n        red.append(Point(x, y))\n    for _ in range(n):\n        x, y = map(int, sys.stdin.readline().split())\n        blue.append(Point(x, y))\n    pairs = []\n    for i in range(n):\n        for j in range(n):\n            if red[i].x < blue[j].x and red[i].y < blue[j].y:\n                pairs.append(Pair(red[i], blue[j]))\n    print(len(pairs))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\nclass Point:\n    def __init__(self, x, y, c):\n        self.x = x\n        self.y = y\n        self.c = c\n\n    def __lt__(self, other):\n        if self.x == other.x:\n            return self.y < other.y\n        return self.x < other.x\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\n    def __ne__(self, other):\n        return self.x != other.x or self.y != other.y\n\n    def __gt__(self, other):\n        if self.x == other.x:\n            return self.y > other.y\n        return self.x > other.x\n\n    def __le__(self, other):\n        return self < other or self == other\n\n    def __ge__(self, other):\n        return self > other or self == other\n\ndef main():\n    n = int(sys.stdin.readline())\n    points = []\n    for _ in range(n):\n        x, y = map(int, sys.stdin.readline().split())\n        c = sys.stdin.readline().strip()\n        points.append(Point(x, y, c))\n    points.sort()\n    for p in points:\n        print(p.x, p.y, p.c)\n\nif __name__ == '__main__':\n    main()\n", "\nN = int(input())\n\nred = []\nblue = []\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    red.append((x, y))\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    blue.append((x, y))\n\nred.sort(key=lambda x: x[0])\nred.sort(key=lambda x: x[1])\nblue.sort(key=lambda x: x[0])\nblue.sort(key=lambda x: x[1])\n\ncount = 0\nfor r in red:\n    for b in blue:\n        if r[0] < b[0] and r[1] < b[1]:\n            count += 1\n            blue.remove(b)\n            break\n\nprint(count)\n", "\n\nN = int(input())\n\nred = []\nblue = []\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    red.append((x, y))\n\nfor i in range(N):\n    x, y = map(int, input().split())\n    blue.append((x, y))\n\nred.sort(key=lambda x: x[0])\nred.sort(key=lambda x: -x[1])\nblue.sort(key=lambda x: x[0])\nblue.sort(key=lambda x: -x[1])\n\ncount = 0\nfor r in red:\n    for b in blue:\n        if r[0] < b[0] and r[1] < b[1]:\n            count += 1\n            blue.remove(b)\n            break\n\nprint(count)\n"]