["\nN, A, B, C = map(int, input().split())\nls = [int(input()) for _ in range(N)]\n\ndef dfs(cur, a, b, c):\n  if a == A and b == B and c == C:\n    return 0\n  if cur == N:\n    return float('inf')\n  res = float('inf')\n  res = min(res, dfs(cur + 1, a, b, c))\n  res = min(res, dfs(cur + 1, a + ls[cur], b, c) + 10)\n  res = min(res, dfs(cur + 1, a, b + ls[cur], c) + 10)\n  res = min(res, dfs(cur + 1, a, b, c + ls[cur]) + 10)\n  if ls[cur] - 1 >= 0:\n    res = min(res, dfs(cur + 1, a + ls[cur] - 1, b, c) + 9)\n    res = min(res, dfs(cur + 1, a, b + ls[cur] - 1, c) + 9)\n    res = min(res, dfs(cur + 1, a, b, c + ls[cur] - 1) + 9)\n  if ls[cur] - 2 >= 0:\n    res = min(res, dfs(cur + 1, a + ls[cur] - 2, b, c) + 8)\n    res = min(res, dfs(cur + 1, a, b + ls[cur] - 2, c) + 8)\n    res = min(res, dfs(cur + 1, a, b, c + ls[cur] - 2) + 8)\n  return res\n\nprint(dfs(0, 0, 0, 0))\n", "\n\nimport sys\n\nN, A, B, C = list(map(int, sys.stdin.readline().split()))\nl = []\nfor i in range(N):\n    l.append(int(sys.stdin.readline()))\n\nl.sort()\n\ndef dfs(l, a, b, c, mp):\n    if mp >= 0 and (a == A and b == B and c == C):\n        return mp\n    if mp < 0 or (a > A or b > B or c > C):\n        return float('inf')\n    ans = float('inf')\n    for i in range(len(l)):\n        if a < A:\n            ans = min(ans, dfs(l, a+l[i], b, c, mp-(A-a)))\n        if b < B:\n            ans = min(ans, dfs(l, a, b+l[i], c, mp-(B-b)))\n        if c < C:\n            ans = min(ans, dfs(l, a, b, c+l[i], mp-(C-c)))\n        if l[i] >= 2 and i+1 < len(l):  # \u9577\u30552\u4ee5\u4e0a\u306e\u3082\u306e\u30921\u306b\u3059\u308b\n            ans = min(ans, dfs(l[:i]+l[i+1:], a, b, c, mp-1) + 1)\n        if i+1 < len(l):  # \u9577\u30551\u306e\u3082\u306e\u30921\u306b\u3059\u308b\n            l[i+1] += l[i]  # \u9577\u30551\u306e\u3082\u306e\u30921\u306b\u3059\u308b\n        ans = min(ans, dfs(l[i+1:], a, b, c, mp-9) + 9)  # \u9577\u30551\u306e\u3082\u306e\u3092\u6368\u3066\u308b\n    return ans\n\nprint(dfs(l, 0, 0, 0, 100))\n", "import sys\nsys.setrecursionlimit(10**6)\n\n\nN, A, B, C = map(int, input().split())\nL = [int(input()) for _ in range(N)]\n\ndef dfs(cur, a, b, c, cost):\n    if a == A and b == B and c == C:\n        return cost\n    if cur == N:\n        return float('inf')\n    res = float('inf')\n    res = min(res, dfs(cur + 1, a, b, c, cost))\n    res = min(res, dfs(cur + 1, a + L[cur], b, c, cost + 10))\n    res = min(res, dfs(cur + 1, a, b + L[cur], c, cost + 10))\n    res = min(res, dfs(cur + 1, a, b, c + L[cur], cost + 10))\n    if L[cur] - 1 >= 0:\n        res = min(res, dfs(cur + 1, a + L[cur] - 1, b, c, cost + 9))\n        res = min(res, dfs(cur + 1, a, b + L[cur] - 1, c, cost + 9))\n        res = min(res, dfs(cur + 1, a, b, c + L[cur] - 1, cost + 9))\n    if L[cur] - 2 >= 0:\n        res = min(res, dfs(cur + 1, a + L[cur] - 2, b, c, cost + 8))\n        res = min(res, dfs(cur + 1, a, b + L[cur] - 2, c, cost + 8))\n        res = min(res, dfs(cur + 1, a, b, c + L[cur] - 2, cost + 8))\n    return res\n\nprint(dfs(0, 0, 0, 0, 0))\n", "\nimport sys\n\nN, A, B, C = list(map(int, sys.stdin.readline().split()))\nl = []\nfor i in range(N):\n    l.append(int(sys.stdin.readline()))\nl.sort()\ndef dfs(l, a, b, c, mp):\n    if mp >= 0 and (a == A and b == B and c == C):\n        return mp\n    if mp < 0 or (a > A or b > B or c > C):\n        return float('inf')\n    ans = float('inf')\n    for i in range(len(l)):\n        if a < A:\n            ans = min(ans, dfs(l, a+l[i], b, c, mp-(A-a)))\n        if b < B:\n            ans = min(ans, dfs(l, a, b+l[i], c, mp-(B-b)))\n        if c < C:\n            ans = min(ans, dfs(l, a, b, c+l[i], mp-(C-c)))\n        if l[i] >= 2 and i+1 < len(l):\n            ans = min(ans, dfs(l, a, b, c, mp-1) + 1)\n        if i+1 < len(l):\n            l[i+1] += l[i]\n        ans = min(ans, dfs(l[i+1:], a, b, c, mp-9) + 9)\n    return ans\nprint(dfs(l, 0, 0, 0, 100))\n", "\nfrom copy import deepcopy\nimport sys\n\nN, A, B, C = list(map(int, sys.stdin.readline().split()))\nl = []\nfor i in range(N):\n    l.append(int(sys.stdin.readline()))\n\nl.sort()\n\ndef dfs(l, a, b, c, mp, cnt):\n    if mp < 0 or (a > A or b > B or c > C): # mp\u304c\u30de\u30a4\u30ca\u30b9\u306b\u306a\u3063\u305f\u3089\u7d42\u4e86\n        return float('inf')\n    if a == A and b == B and c == C: # \u5168\u3066\u306e\u6750\u6599\u304c\u63c3\u3063\u305f\u3089\u7d42\u4e86\n        return cnt\n    if len(l) == 0: # \u6750\u6599\u304c\u306a\u304f\u306a\u3063\u305f\u3089\u7d42\u4e86\n        return float('inf')\n    if l[0] >= 2 and mp >= 0: # \u6750\u6599\u30922\u3064\u306b\u3059\u308b\n        l[0] -= 2\n        ans = min(ans, dfs(l, a, b, c, mp-1, cnt+1))\n        l[0] += 2\n    if a < A: # \u6750\u6599\u3092A\u306b\u5165\u308c\u308b\n        ans = min(ans, dfs(l, a+l[0], b, c, mp-(A-a), cnt))\n    if b < B: # \u6750\u6599\u3092B\u306b\u5165\u308c\u308b\n        ans = min(ans, dfs(l, a, b+l[0], c, mp-(B-b), cnt))\n    if c < C: # \u6750\u6599\u3092C\u306b\u5165\u308c\u308b\n        ans = min(ans, dfs(l, a, b, c+l[0], mp-(C-c), cnt))\n    if mp >= 0: # \u6750\u6599\u3092\u6368\u3066\u308b\n        ans = min(ans, dfs(l[1:], a, b, c, mp-9, cnt+9))\n    return ans # \u6700\u5c0f\u5024\u3092\u8fd4\u3059\n\nprint(dfs(l, 0, 0, 0, 100))\n", "\nimport sys\n\nN, A, B, C = list(map(int, sys.stdin.readline().split()))\nl = []\nfor i in range(N):\n    l.append(int(sys.stdin.readline()))\nl.sort()\ndef dfs(l, a, b, c, mp):\n    if mp >= 0 and (a == A and b == B and c == C):\n        return mp\n    if mp < 0 or (a > A or b > B or c > C):\n        return float('inf')\n    ans = float('inf')\n    for i in range(len(l)):\n        if a < A:\n            ans = min(ans, dfs(l, a+l[i], b, c, mp-(A-a)))\n        if b < B:\n            ans = min(ans, dfs(l, a, b+l[i], c, mp-(B-b)))\n        if c < C:\n            ans = min(ans, dfs(l, a, b, c+l[i], mp-(C-c)))\n        if l[i] >= 2 and mp >= 0:\n            ans = min(ans, dfs(l, a, b, c, mp-1) + 1)\n        if i+1 < len(l):\n            l[i+1] += l[i]\n        if mp >= 0:\n            ans = min(ans, dfs(l[i+1:], a, b, c, mp-9) + 9)\n    return ans\nprint(dfs(l, 0, 0, 0, 100))\n"]