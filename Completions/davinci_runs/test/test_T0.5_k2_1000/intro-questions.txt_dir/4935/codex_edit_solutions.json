["\n# g: gravity\n# D: distance\n# theta: angle\n\nimport sys\nimport math\n\ndef main():\n    line = sys.stdin.readline()\n    N, g = map(float, line.split())\n\n    for i in range(int(N)):\n        line = sys.stdin.readline()\n        D, theta = map(int, line.split())\n        if i == 0:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)))\n            print(\"%.1f\" % v)\n        else:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)) + v ** 2)\n            print(\"%.1f\" % v)\n\nif __name__ == \"__main__\":\n    main()\n", "\nfrom math import sin, cos, radians\n\nN, g = map(float, input().split())  # N is the number of test cases and g is the gravity.\n\n\n\ndef get_velocity(D, theta):  # D is the distance and theta is the angle.\n    g_theta = g * cos(radians(theta))\n    return ((2 * D * g_theta) / g) ** 0.5\n\nfor i in range(int(N)):\n    D, theta = map(int, input().split())\n    print(get_velocity(D, theta))\n", "\nimport math\n\ndef main():\n    input_line = input()\n    input_line = input_line.split()\n    num_seg = int(input_line[0])\n    g = float(input_line[1])\n    seg_lengths = []\n    seg_angles = []\n    for i in range(num_seg):\n        input_line = input()\n        input_line = input_line.split()\n        seg_lengths.append(int(input_line[0]))\n        seg_angles.append(int(input_line[1]))\n\n    for i in range(num_seg):\n        v = 0\n        for j in range(i, num_seg):\n            v += math.sqrt(2*g*seg_lengths[j]/math.cos(math.radians(seg_angles[j]))**2)\n        print(v)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport math\n\ndef main():\n    input_line = input()\n    input_line = input_line.split()\n    num_seg = int(input_line[0])\n    g = int(input_line[1])\n    seg_lengths = []\n    seg_angles = []\n    for i in range(num_seg):\n        input_line = input()\n        input_line = input_line.split()\n        seg_lengths.append(float(input_line[0]))\n        seg_angles.append(float(input_line[1]))\n\n    for i in range(num_seg):\n        v = 0\n        for j in range(i, num_seg):\n            v += math.sqrt(2*g*seg_lengths[j]/math.cos(math.radians(90-seg_angles[j])))\n        print(v)\n\nif __name__ == \"__main__\":\n    main()\n", "import math\n\n\n\ndef main():\n    num_segments, gravity = map(float, input().split())\n    segment_data = []\n    for _ in range(int(num_segments)):\n        segment_data.append(list(map(float, input().split())))\n    segment_data.reverse()\n    speeds = []\n    segment_data[0].append(0)\n    for i in range(1, int(num_segments)):\n        segment_data[i].append(segment_data[i-1][2] + (segment_data[i-1][0] * math.tan(math.radians(segment_data[i-1][1]))))  # noqa\n    for segment in segment_data:\n        speeds.append(math.sqrt(2 * gravity * segment[2]))\n    speeds.reverse()\n    for speed in speeds:\n        print(speed)\n\nmain()\n", "\n#!/usr/bin/env python3\nimport math\n\ndef get_velocity(dist, angle, gravity):\n    \"\"\"\n    Returns the velocity of an object with a given starting angle, distance,\n    and gravitational acceleration.\n\n    :param dist: The distance of the slope.\n    :param angle: The angle of the slope.\n    :param gravity: The gravitational acceleration.\n    :return: The velocity of the object.\n    \"\"\"\n\n    # Velocity is the square root of the acceleration times the distance of the slope times the sine of the angle\n    velocity = math.sqrt(gravity * dist * math.sin(math.radians(angle)))\n\n    return velocity\n\ndef main():\n\n    # Get the number of segments and the gravitational acceleration.\n    num_segments, gravity = [float(x) for x in input().split()]\n\n    # Create a list to store the velocities.\n    velocities = []\n\n    # Get the distance and angle for each segment.\n    for i in range(int(num_segments)):\n\n        # Get the distance and angle.\n        dist, angle = [int(x) for x in input().split()]\n\n        # Get the velocity and add it to the list.\n        velocities.append(get_velocity(dist, angle, gravity))\n\n    # Print the velocities.\n    for velocity in velocities:\n        print(velocity)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\nimport math\n\ndef main():\n    # Read lines from stdin.\n    lines = [line.strip() for line in sys.stdin]\n\n    # Parse first line.\n    N, g = map(float, lines[0].split())\n\n    # Parse remaining lines.\n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(int, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment.\n    for i in range(int(N)):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n", "from math import sin, cos, radians\n\nN, g = map(float, input().split())  # read N and g\n\n\ndef get_velocity(D, theta):  # get velocity\n    g_theta = g * cos(radians(theta))  # get g * cos(theta)\n    return ((2 * D * g_theta) / g) ** 0.5  # return velocity\n\n\nfor i in range(int(N)):  # loop N times\n    D, theta = map(int, input().split())  # read D and theta\n    print(get_velocity(D, theta))  # print velocity\n", "\n\nimport sys\nimport math\n\ndef main():\n    # Read lines from stdin\n    lines = [line.strip() for line in sys.stdin]\n\n    # Parse first line.\n    N, g = map(int, lines[0].split())\n\n    # Parse remaining lines\n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(float, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment\n    for i in range(N):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n", "import math\n\ndef main():\n    num_seg, g = map(int, input().split())\n    seg_length = []\n    seg_angle = []\n    for i in range(num_seg):\n        seg_length.append(int(input().split()[0]))\n        seg_angle.append(int(input().split()[1]))\n\n    for i in range(num_seg):\n        v = 0\n        for j in range(i, num_seg-1):\n            v += math.sqrt(2*g*seg_length[j]/math.cos(math.radians(seg_angle[j])))\n        print(v)\n\nif __name__ == \"__main__\":\n    main()\n", "import math\n\n\ndef main():\n    num_segments, gravity = map(float, input().split())\n    segment_data = []\n    for _ in range(int(num_segments)):\n        segment_data.append(list(map(float, input().split())))\n    segment_data.reverse()\n    speeds = []\n    segment_data[0].append(0)\n    for i in range(1, int(num_segments)):\n        segment_data[i].append(segment_data[i-1][2] + (segment_data[i-1][0] * math.tan(math.radians(segment_data[i-1][1]))))\n    for segment in segment_data:\n        speeds.append(math.sqrt(2 * gravity * segment[2]))\n    speeds.reverse()\n    for speed in speeds:\n        print(speed)\n\nmain()\n", "\nimport math\n\ndef main():\n    lines = input()\n    lines = lines.split()\n    num_seg = int(lines[0])\n    g = float(lines[1])\n    seg_length = []\n    seg_angle = []\n    for i in range(num_seg):\n        lines = input()\n        lines = lines.split()\n        seg_length.append(int(lines[0]))\n        seg_angle.append(int(lines[1]))\n\n    for i in range(num_seg):\n        v = 0\n        for j in range(i, num_seg):\n            v += math.sqrt(2*g*seg_length[j]/math.cos(math.radians(seg_angle[j])))/2\n        print(v)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Input:\n    - One line containing a positive integer N (1 <= N <= 4), the number of line segments making up the mountain, followed by a space and then a real number g (1 <= g <= 100), the coefficient of acceleration due to gravity.\n    - N more lines each containing two integers D_i and then \u03b8_i (1 <= D <= 10^4; 1 <= \u03b8 <= 89): the sloped distance in metres and absolute angle in degrees of this line segment from the vertical respectively. The segments are ordered from the top of the hill to its bottom.\n    Output:\n    Each of the N lines of output should contain one real number: the velocity of a biker starting at the i-th-most segment from the top and finishing at the foot of the mountain.\n    \"\"\"\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport math\n\ndef get_velocity(dist, angle, gravity):\n    \"\"\"\n    Returns the velocity of an object with a given starting angle, distance,\n    and gravitational acceleration.\n\n    :param dist: The distance of the slope.\n    :param angle: The angle of the slope.\n    :param gravity: The gravitational acceleration.\n    :return: The velocity of the object.\n    \"\"\"\n\n    # Velocity is the square root of the acceleration times the distance of the slope times the sine of the angle\n    velocity = math.sqrt(gravity * dist * math.sin(math.radians(angle)))\n\n    return velocity\n\ndef main():\n\n    # Get the number of segments and the gravitational acceleration.\n    num_segments, gravity = [float(x) for x in input().split()]\n\n    # Create a list to store the velocities.\n    velocities = []\n\n    # Get the distance and angle for each segment.\n    for i in range(int(num_segments)):\n\n        # Get the distance and angle.\n        dist, angle = [int(x) for x in input().split()]\n\n        # Get the velocity and add it to the list.\n        velocities.append(get_velocity(dist, angle, gravity))\n\n    # Print the velocities.\n    for velocity in velocities:\n        print(velocity)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Input:\n    - One line containing a positive integer N (1 <= N <= 4), the number of line segments making up the mountain,\n    followed by a space and then a real number g (1 <= g <= 100), the coefficient of acceleration due to gravity.\n    - N more lines each containing two integers D_i and then theta_i (1 <= D <= 10^4; 1 <= theta <= 89):\n    the sloped distance in metres and absolute angle in degrees of this line segment from the vertical respectively.\n    The segments are ordered from the top of the hill to its bottom.\n    Output:\n    Each of the N lines of output should contain one real number:\n    the velocity of a biker starting at the i-th-most segment from the top and finishing at the foot of the mountain.\n    \"\"\"\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == \"__main__\":\n    main()\n", "from math import sqrt, cos, pi\n\nimport sys\n\n\ndef solve(segments, g):\n    speeds = []\n    for i in range(len(segments)):\n        s = segments[i]\n        if i == 0:\n            speeds.append(sqrt(2 * g * s[0]))\n        else:\n            speeds.append(sqrt(speeds[i - 1] ** 2 + 2 * g * s[0] * (1 - cos(s[1] * pi / 180))))\n    return speeds\n\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        n, g = map(float, line.split())\n        segments = []\n        for line in sys.stdin:\n            segments.append(map(float, line.split()))\n            if len(segments) == n:\n                break\n        print('\\n'.join(map(str, solve(segments, g))))\n", "from math import sin, cos, radians\n\nN, g = map(float, input().split())\n\n\ndef get_velocity(D, theta):\n    g_theta = g * cos(radians(theta))\n    return ((2 * D * g_theta) / g) ** 0.5\n\nfor i in range(int(N)):\n    D, theta = map(int, input().split())\n    print(get_velocity(D, theta))\n", "from math import sqrt, cos, pi\n\nimport sys\n\n\ndef solve(segments, g):\n    speeds = []\n    for i in range(len(segments)):\n        s = segments[i]\n        if i == 0:\n            speeds.append(sqrt(2 * g * s[0]))\n        else:\n            speeds.append(sqrt(speeds[i - 1] ** 2 + 2 * g * s[0] * (1 - cos(s[1] * pi / 180.0))))\n    return speeds\n\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        n, g = map(float, line.split())\n        segments = []\n        for line in sys.stdin:\n            segments.append(map(float, line.split()))\n            if len(segments) == n:\n                break\n        print('\\n'.join(map(str, solve(segments, g))))\n", "\nimport sys\nimport math\n\ndef main():\n    # Read lines from stdin.\n    lines = [line.strip() for line in sys.stdin]\n\n    # Parse first line.\n    N, g = map(float, lines[0].split())\n\n    # Parse remaining lines.\n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(int, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment.\n    for i in range(int(N)):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n", "\nfrom math import sin, cos, radians\n\nN, g = map(float, input().split())  # N is the number of test cases and g is the gravity\n\n\ndef get_velocity(D, theta):  # D is the distance and theta is the angle\n    g_theta = g * cos(radians(theta))\n    return ((2 * D * g_theta) / g) ** 0.5\n\nfor i in range(int(N)):\n    D, theta = map(float, input().split())\n    print(get_velocity(D, theta))\n", "\nimport sys\nimport math\n\ndef main():\n    # Read lines from stdin\n    lines = [line.strip() for line in sys.stdin]\n\n    # Parse first line.\n    N, g = map(float, lines[0].split())\n\n    # Parse remaining lines\n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(int, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment\n    for i in range(int(N)):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n"]