2022-04-12 03:19:07.244418 num operations 2
2022-04-12 03:19:07.244438 size on input set 1
2022-04-12 03:19:09.858749 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# g: gravity\n# D: distance\n# theta: angle\n\nimport sys\nimport math\n\ndef main():\n    line = sys.stdin.readline()\n    N, g = map(float, line.split())\n\n    for i in range(int(N)):\n        line = sys.stdin.readline()\n        D, theta = map(int, line.split())\n        if i == 0:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)))\n            print(\"%.1f\" % v)\n        else:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)) + v ** 2)\n            print(\"%.1f\" % v)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n# g: gravity\n# D: distance\n# theta: angle\n\nimport sys\nimport math\n\ndef main():\n    line = sys.stdin.readline()\n    N, g = map(float, line.split())\n\n    for i in range(int(N)):\n        line = sys.stdin.readline()\n        D, theta = map(int, line.split())\n        if i == 0:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)))\n            print(\"%.1f\" % v)\n        else:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)) + v ** 2)\n            print(\"%.1f\" % v)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649747947,
  "object": "edit"
}
2022-04-12 03:19:09.858943 fix spelling mistakes 2 ['\n\n# g: gravity\n# D: distance\n# theta: angle\n\nimport sys\nimport math\n\ndef main():\n    line = sys.stdin.readline()\n    N, g = map(float, line.split())\n\n    for i in range(int(N)):\n        line = sys.stdin.readline()\n        D, theta = map(int, line.split())\n        if i == 0:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)))\n            print("%.1f" % v)\n        else:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)) + v ** 2)\n            print("%.1f" % v)\n\nif __name__ == "__main__":\n    main()\n', '\n\n# g: gravity\n# D: distance\n# theta: angle\n\nimport sys\nimport math\n\ndef main():\n    line = sys.stdin.readline()\n    N, g = map(float, line.split())\n\n    for i in range(int(N)):\n        line = sys.stdin.readline()\n        D, theta = map(int, line.split())\n        if i == 0:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)))\n            print("%.1f" % v)\n        else:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)) + v ** 2)\n            print("%.1f" % v)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 03:19:09.858979 size on output set 1
2022-04-12 03:19:09.858986 size on input set 1
2022-04-12 03:19:11.782262 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# g: gravity\n# D: distance\n# theta: angle\n\nimport sys\nimport math\n\ndef main():\n    line = sys.stdin.readline()\n    N, g = map(float, line.split())\n\n    for i in range(int(N)):\n        line = sys.stdin.readline()\n        D, theta = map(int, line.split())\n        if i == 0:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)))\n            print(\"%.1f\" % v)\n        else:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)) + v ** 2)\n            print(\"%.1f\" % v)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n# g: gravity\n# D: distance\n# theta: angle\n\nimport sys\nimport math\n\ndef main():\n    line = sys.stdin.readline()\n    N, g = map(float, line.split())\n\n    for i in range(int(N)):\n        line = sys.stdin.readline()\n        D, theta = map(int, line.split())\n        if i == 0:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)))\n            print(\"%.1f\" % v)\n        else:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)) + v ** 2)\n            print(\"%.1f\" % v)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649747950,
  "object": "edit"
}
2022-04-12 03:19:11.782502 fix syntax errors 2 ['\n# g: gravity\n# D: distance\n# theta: angle\n\nimport sys\nimport math\n\ndef main():\n    line = sys.stdin.readline()\n    N, g = map(float, line.split())\n\n    for i in range(int(N)):\n        line = sys.stdin.readline()\n        D, theta = map(int, line.split())\n        if i == 0:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)))\n            print("%.1f" % v)\n        else:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)) + v ** 2)\n            print("%.1f" % v)\n\nif __name__ == "__main__":\n    main()\n', '\n# g: gravity\n# D: distance\n# theta: angle\n\nimport sys\nimport math\n\ndef main():\n    line = sys.stdin.readline()\n    N, g = map(float, line.split())\n\n    for i in range(int(N)):\n        line = sys.stdin.readline()\n        D, theta = map(int, line.split())\n        if i == 0:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)))\n            print("%.1f" % v)\n        else:\n            v = math.sqrt(2 * g * D * math.cos(math.radians(theta)) + v ** 2)\n            print("%.1f" % v)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 03:19:11.782541 size on output set 1
2022-04-12 03:19:11.782560 num operations 2
2022-04-12 03:19:11.782568 size on input set 1
2022-04-12 03:19:14.581161 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport math\n\ndef get_velocity(dist, angle, gravity):\n    \"\"\"\n    Returns the velocity of an object with a given starting angle, distance,\n    and gravitational acceleration.\n\n    :param dist: The distance of the slope.\n    :param angle: The angle of the slope.\n    :param gravity: The gravitational acceleration.\n    :return: The velocity of the object.\n    \"\"\"\n\n    # Velocity is the square root of the acceleration times the distance of the slope times the sine of the angle\n    velocity = math.sqrt(gravity * dist * math.sin(math.radians(angle)))\n\n    return velocity\n\ndef main():\n\n    # Get the number of segments and the gravitational acceleration.\n    num_segments, gravity = [float(x) for x in input().split()]\n\n    # Create a list to store the velocities.\n    velocities = []\n\n    # Get the distance and angle for each segment.\n    for i in range(int(num_segments)):\n\n        # Get the distance and angle.\n        dist, angle = [int(x) for x in input().split()]\n\n        # Get the velocity and add it to the list.\n        velocities.append(get_velocity(dist, angle, gravity))\n\n    # Print the velocities.\n    for velocity in velocities:\n        print(velocity)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport math\n\ndef get_velocity(dist, angle, gravity):\n    \"\"\"\n    Returns the velocity of an object with a given starting angle, distance,\n    and gravitational acceleration.\n\n    :param dist: The distance of the slope.\n    :param angle: The angle of the slope.\n    :param gravity: The gravitational acceleration.\n    :return: The velocity of the object.\n    \"\"\"\n\n    # Velocity is the square root of the acceleration times the distance of the slope times the sine of the angle\n    velocity = math.sqrt(gravity * dist * math.sin(math.radians(angle)))\n\n    return velocity\n\ndef main():\n\n    # Get the number of segments and the gravitational acceleration.\n    num_segments, gravity = [float(x) for x in input().split()]\n\n    # Create a list to store the velocities.\n    velocities = []\n\n    # Get the distance and angle for each segment.\n    for i in range(int(num_segments)):\n\n        # Get the distance and angle.\n        dist, angle = [int(x) for x in input().split()]\n\n        # Get the velocity and add it to the list.\n        velocities.append(get_velocity(dist, angle, gravity))\n\n    # Print the velocities.\n    for velocity in velocities:\n        print(velocity)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649747952,
  "object": "edit"
}
2022-04-12 03:19:14.581472 fix spelling mistakes 2 ['\n\nimport math\n\ndef get_velocity(dist, angle, gravity):\n    """\n    Returns the velocity of an object with a given starting angle, distance,\n    and gravitational acceleration.\n\n    :param dist: The distance of the slope.\n    :param angle: The angle of the slope.\n    :param gravity: The gravitational acceleration.\n    :return: The velocity of the object.\n    """\n\n    # Velocity is the square root of the acceleration times the distance of the slope times the sine of the angle\n    velocity = math.sqrt(gravity * dist * math.sin(math.radians(angle)))\n\n    return velocity\n\ndef main():\n\n    # Get the number of segments and the gravitational acceleration.\n    num_segments, gravity = [float(x) for x in input().split()]\n\n    # Create a list to store the velocities.\n    velocities = []\n\n    # Get the distance and angle for each segment.\n    for i in range(int(num_segments)):\n\n        # Get the distance and angle.\n        dist, angle = [int(x) for x in input().split()]\n\n        # Get the velocity and add it to the list.\n        velocities.append(get_velocity(dist, angle, gravity))\n\n    # Print the velocities.\n    for velocity in velocities:\n        print(velocity)\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport math\n\ndef get_velocity(dist, angle, gravity):\n    """\n    Returns the velocity of an object with a given starting angle, distance,\n    and gravitational acceleration.\n\n    :param dist: The distance of the slope.\n    :param angle: The angle of the slope.\n    :param gravity: The gravitational acceleration.\n    :return: The velocity of the object.\n    """\n\n    # Velocity is the square root of the acceleration times the distance of the slope times the sine of the angle\n    velocity = math.sqrt(gravity * dist * math.sin(math.radians(angle)))\n\n    return velocity\n\ndef main():\n\n    # Get the number of segments and the gravitational acceleration.\n    num_segments, gravity = [float(x) for x in input().split()]\n\n    # Create a list to store the velocities.\n    velocities = []\n\n    # Get the distance and angle for each segment.\n    for i in range(int(num_segments)):\n\n        # Get the distance and angle.\n        dist, angle = [int(x) for x in input().split()]\n\n        # Get the velocity and add it to the list.\n        velocities.append(get_velocity(dist, angle, gravity))\n\n    # Print the velocities.\n    for velocity in velocities:\n        print(velocity)\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-12 03:19:14.581812 size on output set 1
2022-04-12 03:19:14.581843 size on input set 1
2022-04-12 03:19:17.102290 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport math\n\ndef get_velocity(dist, angle, gravity):\n    \"\"\"\n    Returns the velocity of an object with a given starting angle, distance,\n    and gravitational acceleration.\n\n    :param dist: The distance of the slope.\n    :param angle: The angle of the slope.\n    :param gravity: The gravitational acceleration.\n    :return: The velocity of the object.\n    \"\"\"\n\n    # Velocity is the square root of the acceleration times the distance of the slope times the sine of the angle\n    velocity = math.sqrt(gravity * dist * math.sin(math.radians(angle)))\n\n    return velocity\n\ndef main():\n\n    # Get the number of segments and the gravitational acceleration.\n    num_segments, gravity = [float(x) for x in input().split()]\n\n    # Create a list to store the velocities.\n    velocities = []\n\n    # Get the distance and angle for each segment.\n    for i in range(int(num_segments)):\n\n        # Get the distance and angle.\n        dist, angle = [int(x) for x in input().split()]\n\n        # Get the velocity and add it to the list.\n        velocities.append(get_velocity(dist, angle, gravity))\n\n    # Print the velocities.\n    for velocity in velocities:\n        print(velocity)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n#!/usr/bin/env python3\nimport math\n\ndef get_velocity(dist, angle, gravity):\n    \"\"\"\n    Returns the velocity of an object with a given starting angle, distance,\n    and gravitational acceleration.\n\n    :param dist: The distance of the slope.\n    :param angle: The angle of the slope.\n    :param gravity: The gravitational acceleration.\n    :return: The velocity of the object.\n    \"\"\"\n\n    # Velocity is the square root of the acceleration times the distance of the slope times the sine of the angle\n    velocity = math.sqrt(gravity * dist * math.sin(math.radians(angle)))\n\n    return velocity\n\ndef main():\n\n    # Get the number of segments and the gravitational acceleration.\n    num_segments, gravity = [float(x) for x in input().split()]\n\n    # Create a list to store the velocities.\n    velocities = []\n\n    # Get the distance and angle for each segment.\n    for i in range(int(num_segments)):\n\n        # Get the distance and angle.\n        dist, angle = [int(x) for x in input().split()]\n\n        # Get the velocity and add it to the list.\n        velocities.append(get_velocity(dist, angle, gravity))\n\n    # Print the velocities.\n    for velocity in velocities:\n        print(velocity)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649747954,
  "object": "edit"
}
2022-04-12 03:19:17.102424 fix syntax errors 2 ['\nimport math\n\ndef get_velocity(dist, angle, gravity):\n    """\n    Returns the velocity of an object with a given starting angle, distance,\n    and gravitational acceleration.\n\n    :param dist: The distance of the slope.\n    :param angle: The angle of the slope.\n    :param gravity: The gravitational acceleration.\n    :return: The velocity of the object.\n    """\n\n    # Velocity is the square root of the acceleration times the distance of the slope times the sine of the angle\n    velocity = math.sqrt(gravity * dist * math.sin(math.radians(angle)))\n\n    return velocity\n\ndef main():\n\n    # Get the number of segments and the gravitational acceleration.\n    num_segments, gravity = [float(x) for x in input().split()]\n\n    # Create a list to store the velocities.\n    velocities = []\n\n    # Get the distance and angle for each segment.\n    for i in range(int(num_segments)):\n\n        # Get the distance and angle.\n        dist, angle = [int(x) for x in input().split()]\n\n        # Get the velocity and add it to the list.\n        velocities.append(get_velocity(dist, angle, gravity))\n\n    # Print the velocities.\n    for velocity in velocities:\n        print(velocity)\n\nif __name__ == \'__main__\':\n    main()\n', '\n#!/usr/bin/env python3\nimport math\n\ndef get_velocity(dist, angle, gravity):\n    """\n    Returns the velocity of an object with a given starting angle, distance,\n    and gravitational acceleration.\n\n    :param dist: The distance of the slope.\n    :param angle: The angle of the slope.\n    :param gravity: The gravitational acceleration.\n    :return: The velocity of the object.\n    """\n\n    # Velocity is the square root of the acceleration times the distance of the slope times the sine of the angle\n    velocity = math.sqrt(gravity * dist * math.sin(math.radians(angle)))\n\n    return velocity\n\ndef main():\n\n    # Get the number of segments and the gravitational acceleration.\n    num_segments, gravity = [float(x) for x in input().split()]\n\n    # Create a list to store the velocities.\n    velocities = []\n\n    # Get the distance and angle for each segment.\n    for i in range(int(num_segments)):\n\n        # Get the distance and angle.\n        dist, angle = [int(x) for x in input().split()]\n\n        # Get the velocity and add it to the list.\n        velocities.append(get_velocity(dist, angle, gravity))\n\n    # Print the velocities.\n    for velocity in velocities:\n        print(velocity)\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-12 03:19:17.102444 size on output set 2
2022-04-12 03:19:17.102449 num operations 2
2022-04-12 03:19:17.102452 size on input set 1
2022-04-12 03:19:24.825451 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nimport math\n\ndef main():\n    input_line = input()\n    input_line = input_line.split()\n    num_seg = int(input_line[0])\n    g = float(input_line[1])\n    seg_lengths = []\n    seg_angles = []\n    for i in range(num_seg):\n        input_line = input()\n        input_line = input_line.split()\n        seg_lengths.append(int(input_line[0]))\n        seg_angles.append(int(input_line[1]))\n\n    for i in range(num_seg):\n        v = 0\n        for j in range(i, num_seg):\n            v += math.sqrt(2*g*seg_lengths[j]/math.cos(math.radians(seg_angles[j])))\n        print(v)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport math\n\ndef main():\n    input_lines = input()\n    input_lines = input_lines.split()\n    num_seg = int(input_lines[0])\n    g = float(input_lines[1])\n    seg_length = []\n    seg_angle = []\n    for i in range(num_seg):\n        input_lines = input()\n        input_lines = input_lines.split()\n        seg_length.append(int(input_lines[0]))\n        seg_angle.append(int(input_lines[1]))\n\n    for i in range(num_seg):\n        v = 0\n        for j in range(i, num_seg):\n            v += math.sqrt(2*g*seg_length[j]/math.cos(math.radians(seg_angle[j])))\n        print(v)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649747957,
  "object": "edit"
}
2022-04-12 03:19:24.825776 fix spelling mistakes 2 ['\nimport math\n\ndef main():\n    input_line = input()\n    input_line = input_line.split()\n    num_seg = int(input_line[0])\n    g = float(input_line[1])\n    seg_lengths = []\n    seg_angles = []\n    for i in range(num_seg):\n        input_line = input()\n        input_line = input_line.split()\n        seg_lengths.append(int(input_line[0]))\n        seg_angles.append(int(input_line[1]))\n\n    for i in range(num_seg):\n        v = 0\n        for j in range(i, num_seg):\n            v += math.sqrt(2*g*seg_lengths[j]/math.cos(math.radians(seg_angles[j])))\n        print(v)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport math\n\ndef main():\n    input_lines = input()\n    input_lines = input_lines.split()\n    num_seg = int(input_lines[0])\n    g = float(input_lines[1])\n    seg_length = []\n    seg_angle = []\n    for i in range(num_seg):\n        input_lines = input()\n        input_lines = input_lines.split()\n        seg_length.append(int(input_lines[0]))\n        seg_angle.append(int(input_lines[1]))\n\n    for i in range(num_seg):\n        v = 0\n        for j in range(i, num_seg):\n            v += math.sqrt(2*g*seg_length[j]/math.cos(math.radians(seg_angle[j])))\n        print(v)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 03:19:24.825826 size on output set 2
2022-04-12 03:19:24.825836 size on input set 2
2022-04-12 03:19:35.750749 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import math\n\ndef main():\n    num_seg, g = map(int, input().split())\n    seg_length = []\n    seg_angle = []\n    for i in range(num_seg):\n        seg_length.append(int(input().split()[0]))\n        seg_angle.append(int(input().split()[1]))\n\n    for i in range(num_seg):\n        v = 0\n        for j in range(i, num_seg-1):\n            v += math.sqrt(2*g*seg_length[j]/math.cos(math.radians(seg_angle[j])))\n        print(v)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport math\n\ndef main():\n    lines = input()\n    lines = lines.split()\n    num_seg = int(lines[0])\n    g = float(lines[1])\n    seg_length = []\n    seg_angle = []\n    for i in range(num_seg):\n        lines = input()\n        lines = lines.split()\n        seg_length.append(int(lines[0]))\n        seg_angle.append(int(lines[1]))\n\n    for i in range(num_seg):\n        v = 0\n        for j in range(i, num_seg):\n            v += math.sqrt(2*g*seg_length[j]/math.cos(math.radians(seg_angle[j])))/2\n        print(v)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649747965,
  "object": "edit"
}
2022-04-12 03:19:35.750940 fix syntax errors 2 ['import math\n\ndef main():\n    num_seg, g = map(int, input().split())\n    seg_length = []\n    seg_angle = []\n    for i in range(num_seg):\n        seg_length.append(int(input().split()[0]))\n        seg_angle.append(int(input().split()[1]))\n\n    for i in range(num_seg):\n        v = 0\n        for j in range(i, num_seg-1):\n            v += math.sqrt(2*g*seg_length[j]/math.cos(math.radians(seg_angle[j])))\n        print(v)\n\nif __name__ == "__main__":\n    main()\n', '\nimport math\n\ndef main():\n    lines = input()\n    lines = lines.split()\n    num_seg = int(lines[0])\n    g = float(lines[1])\n    seg_length = []\n    seg_angle = []\n    for i in range(num_seg):\n        lines = input()\n        lines = lines.split()\n        seg_length.append(int(lines[0]))\n        seg_angle.append(int(lines[1]))\n\n    for i in range(num_seg):\n        v = 0\n        for j in range(i, num_seg):\n            v += math.sqrt(2*g*seg_length[j]/math.cos(math.radians(seg_angle[j])))/2\n        print(v)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 03:19:41.278711 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport math\n\ndef main():\n    input_line = input()\n    input_line = input_line.split()\n    num_seg = int(input_line[0])\n    g = int(input_line[1])\n    seg_lengths = []\n    seg_angles = []\n    for i in range(num_seg):\n        input_line = input()\n        input_line = input_line.split()\n        seg_lengths.append(float(input_line[0]))\n        seg_angles.append(float(input_line[1]))\n\n    for i in range(num_seg):\n        v = 0\n        for j in range(i, num_seg):\n            v += math.sqrt(2*g*seg_lengths[j]/math.cos(math.radians(90-seg_angles[j])))\n        print(v)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport math\n\ndef main():\n    input_line = input()\n    input_line = input_line.split()\n    num_seg = int(input_line[0])\n    g = float(input_line[1])\n    seg_lengths = []\n    seg_angles = []\n    for i in range(num_seg):\n        input_line = input()\n        input_line = input_line.split()\n        seg_lengths.append(int(input_line[0]))\n        seg_angles.append(int(input_line[1]))\n\n    for i in range(num_seg):\n        v = 0\n        for j in range(i, num_seg):\n            v += math.sqrt(2*g*seg_lengths[j]/math.cos(math.radians(seg_angles[j]))**2)\n        print(v)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649747975,
  "object": "edit"
}
2022-04-12 03:19:41.278877 fix syntax errors 2 ['\nimport math\n\ndef main():\n    input_line = input()\n    input_line = input_line.split()\n    num_seg = int(input_line[0])\n    g = int(input_line[1])\n    seg_lengths = []\n    seg_angles = []\n    for i in range(num_seg):\n        input_line = input()\n        input_line = input_line.split()\n        seg_lengths.append(float(input_line[0]))\n        seg_angles.append(float(input_line[1]))\n\n    for i in range(num_seg):\n        v = 0\n        for j in range(i, num_seg):\n            v += math.sqrt(2*g*seg_lengths[j]/math.cos(math.radians(90-seg_angles[j])))\n        print(v)\n\nif __name__ == "__main__":\n    main()\n', '\nimport math\n\ndef main():\n    input_line = input()\n    input_line = input_line.split()\n    num_seg = int(input_line[0])\n    g = float(input_line[1])\n    seg_lengths = []\n    seg_angles = []\n    for i in range(num_seg):\n        input_line = input()\n        input_line = input_line.split()\n        seg_lengths.append(int(input_line[0]))\n        seg_angles.append(int(input_line[1]))\n\n    for i in range(num_seg):\n        v = 0\n        for j in range(i, num_seg):\n            v += math.sqrt(2*g*seg_lengths[j]/math.cos(math.radians(seg_angles[j]))**2)\n        print(v)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 03:19:41.278905 size on output set 4
2022-04-12 03:19:41.278915 num operations 2
2022-04-12 03:19:41.278922 size on input set 1
2022-04-12 03:19:44.746719 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nimport math\n\ndef main():\n    # Read lines from stdin\n    lines = [line.strip() for line in sys.stdin]\n\n    # Parse first line.\n    N, g = map(float, lines[0].split())\n\n    # Parse remaining lines\n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(int, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment\n    for i in range(int(N)):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nimport math\n\ndef main():\n    # Read lines from stdin.\n    lines = [line.strip() for line in sys.stdin]\n\n    # Parse first line.\n    N, g = map(float, lines[0].split())\n\n    # Parse remaining lines.\n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(int, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment.\n    for i in range(int(N)):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649747981,
  "object": "edit"
}
2022-04-12 03:19:44.746890 fix spelling mistakes 2 ["\n\nimport sys\nimport math\n\ndef main():\n    # Read lines from stdin\n    lines = [line.strip() for line in sys.stdin]\n\n    # Parse first line.\n    N, g = map(float, lines[0].split())\n\n    # Parse remaining lines\n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(int, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment\n    for i in range(int(N)):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    # Read lines from stdin.\n    lines = [line.strip() for line in sys.stdin]\n\n    # Parse first line.\n    N, g = map(float, lines[0].split())\n\n    # Parse remaining lines.\n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(int, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment.\n    for i in range(int(N)):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 03:19:44.746907 size on output set 2
2022-04-12 03:19:44.746910 size on input set 2
2022-04-12 03:19:48.574564 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport math\n\ndef main():\n    # Read lines from stdin.\n    lines = [line.strip() for line in sys.stdin]\n\n    # Parse first line.\n    N, g = map(float, lines[0].split())\n\n    # Parse remaining lines.\n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(int, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment.\n    for i in range(int(N)):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\nimport sys\nimport math\n\ndef main():\n    # Read lines from stdin.\n    lines = [line.strip() for line in sys.stdin]\n\n    # Parse first line.\n    N, g = map(float, lines[0].split())\n\n    # Parse remaining lines.\n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(int, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment.\n    for i in range(int(N)):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649747984,
  "object": "edit"
}
2022-04-12 03:19:48.575002 fix syntax errors 2 ["\nimport sys\nimport math\n\ndef main():\n    # Read lines from stdin.\n    lines = [line.strip() for line in sys.stdin]\n\n    # Parse first line.\n    N, g = map(float, lines[0].split())\n\n    # Parse remaining lines.\n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(int, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment.\n    for i in range(int(N)):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\nimport math\n\ndef main():\n    # Read lines from stdin.\n    lines = [line.strip() for line in sys.stdin]\n\n    # Parse first line.\n    N, g = map(float, lines[0].split())\n\n    # Parse remaining lines.\n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(int, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment.\n    for i in range(int(N)):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 03:19:52.234713 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport math\n\ndef main():\n    # Read lines from stdin\n    lines = [line.strip() for line in sys.stdin]\n\n    # Parse first line.\n    N, g = map(float, lines[0].split())\n\n    # Parse remaining lines\n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(int, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment\n    for i in range(int(N)):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nimport math\n\ndef main():\n    # Read lines from stdin\n    lines = [line.strip() for line in sys.stdin]\n\n    # Parse first line.\n    N, g = map(int, lines[0].split())\n\n    # Parse remaining lines\n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(float, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment\n    for i in range(N):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649747988,
  "object": "edit"
}
2022-04-12 03:19:52.234913 fix syntax errors 2 ["\nimport sys\nimport math\n\ndef main():\n    # Read lines from stdin\n    lines = [line.strip() for line in sys.stdin]\n\n    # Parse first line.\n    N, g = map(float, lines[0].split())\n\n    # Parse remaining lines\n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(int, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment\n    for i in range(int(N)):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    # Read lines from stdin\n    lines = [line.strip() for line in sys.stdin]\n\n    # Parse first line.\n    N, g = map(int, lines[0].split())\n\n    # Parse remaining lines\n    dist, angles = [], []\n    for i in range(1, len(lines)):\n        D, angle = map(float, lines[i].split())\n        dist.append(D)\n        angles.append(angle)\n\n    # Calculate velocity for each segment\n    for i in range(N):\n        v = math.sqrt(2 * g * dist[i] * math.cos(math.radians(angles[i])))\n        print(v)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 03:19:52.234954 size on output set 4
2022-04-12 03:19:52.234969 num operations 2
2022-04-12 03:19:52.234977 size on input set 1
2022-04-12 03:19:59.789497 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    num_segments, gravity = map(float, input().split())\n    segment_data = []\n    for _ in range(int(num_segments)):\n        segment_data.append(list(map(float, input().split())))\n    segment_data.reverse()\n    speeds = []\n    segment_data[0].append(0)\n    for i in range(1, int(num_segments)):\n        segment_data[i].append(segment_data[i-1][2] + (segment_data[i-1][0] * math.tan(math.radians(segment_data[i-1][1]))))\n    for segment in segment_data:\n        speeds.append(math.sqrt(2 * gravity * segment[2]))\n    speeds.reverse()\n    for speed in speeds:\n        print(speed)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    num_segments, gravity = map(float, input().split())\n    segment_data = []\n    for _ in range(int(num_segments)):\n        segment_data.append(list(map(float, input().split())))\n    segment_data.reverse()\n    speeds = []\n    segment_data[0].append(0)\n    for i in range(1, int(num_segments)):\n        segment_data[i].append(segment_data[i-1][2] + (segment_data[i-1][0] * math.tan(math.radians(segment_data[i-1][1]))))\n    for segment in segment_data:\n        speeds.append(math.sqrt(2 * gravity * segment[2]))\n    speeds.reverse()\n    for speed in speeds:\n        print(speed)\n\nmain()\n"
    }
  ],
  "created": 1649747992,
  "object": "edit"
}
2022-04-12 03:19:59.789684 fix spelling mistakes 2 ['\n\ndef main():\n    num_segments, gravity = map(float, input().split())\n    segment_data = []\n    for _ in range(int(num_segments)):\n        segment_data.append(list(map(float, input().split())))\n    segment_data.reverse()\n    speeds = []\n    segment_data[0].append(0)\n    for i in range(1, int(num_segments)):\n        segment_data[i].append(segment_data[i-1][2] + (segment_data[i-1][0] * math.tan(math.radians(segment_data[i-1][1]))))\n    for segment in segment_data:\n        speeds.append(math.sqrt(2 * gravity * segment[2]))\n    speeds.reverse()\n    for speed in speeds:\n        print(speed)\n\nmain()\n', '\n\ndef main():\n    num_segments, gravity = map(float, input().split())\n    segment_data = []\n    for _ in range(int(num_segments)):\n        segment_data.append(list(map(float, input().split())))\n    segment_data.reverse()\n    speeds = []\n    segment_data[0].append(0)\n    for i in range(1, int(num_segments)):\n        segment_data[i].append(segment_data[i-1][2] + (segment_data[i-1][0] * math.tan(math.radians(segment_data[i-1][1]))))\n    for segment in segment_data:\n        speeds.append(math.sqrt(2 * gravity * segment[2]))\n    speeds.reverse()\n    for speed in speeds:\n        print(speed)\n\nmain()\n']
2022-04-12 03:19:59.789698 size on output set 1
2022-04-12 03:19:59.789702 size on input set 1
2022-04-12 03:20:03.697766 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import math\n\n\ndef main():\n    num_segments, gravity = map(float, input().split())\n    segment_data = []\n    for _ in range(int(num_segments)):\n        segment_data.append(list(map(float, input().split())))\n    segment_data.reverse()\n    speeds = []\n    segment_data[0].append(0)\n    for i in range(1, int(num_segments)):\n        segment_data[i].append(segment_data[i-1][2] + (segment_data[i-1][0] * math.tan(math.radians(segment_data[i-1][1]))))\n    for segment in segment_data:\n        speeds.append(math.sqrt(2 * gravity * segment[2]))\n    speeds.reverse()\n    for speed in speeds:\n        print(speed)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "import math\n\n\n\ndef main():\n    num_segments, gravity = map(float, input().split())\n    segment_data = []\n    for _ in range(int(num_segments)):\n        segment_data.append(list(map(float, input().split())))\n    segment_data.reverse()\n    speeds = []\n    segment_data[0].append(0)\n    for i in range(1, int(num_segments)):\n        segment_data[i].append(segment_data[i-1][2] + (segment_data[i-1][0] * math.tan(math.radians(segment_data[i-1][1]))))  # noqa\n    for segment in segment_data:\n        speeds.append(math.sqrt(2 * gravity * segment[2]))\n    speeds.reverse()\n    for speed in speeds:\n        print(speed)\n\nmain()\n"
    }
  ],
  "created": 1649748000,
  "object": "edit"
}
2022-04-12 03:20:03.698015 fix syntax errors 2 ['import math\n\n\ndef main():\n    num_segments, gravity = map(float, input().split())\n    segment_data = []\n    for _ in range(int(num_segments)):\n        segment_data.append(list(map(float, input().split())))\n    segment_data.reverse()\n    speeds = []\n    segment_data[0].append(0)\n    for i in range(1, int(num_segments)):\n        segment_data[i].append(segment_data[i-1][2] + (segment_data[i-1][0] * math.tan(math.radians(segment_data[i-1][1]))))\n    for segment in segment_data:\n        speeds.append(math.sqrt(2 * gravity * segment[2]))\n    speeds.reverse()\n    for speed in speeds:\n        print(speed)\n\nmain()\n', 'import math\n\n\n\ndef main():\n    num_segments, gravity = map(float, input().split())\n    segment_data = []\n    for _ in range(int(num_segments)):\n        segment_data.append(list(map(float, input().split())))\n    segment_data.reverse()\n    speeds = []\n    segment_data[0].append(0)\n    for i in range(1, int(num_segments)):\n        segment_data[i].append(segment_data[i-1][2] + (segment_data[i-1][0] * math.tan(math.radians(segment_data[i-1][1]))))  # noqa\n    for segment in segment_data:\n        speeds.append(math.sqrt(2 * gravity * segment[2]))\n    speeds.reverse()\n    for speed in speeds:\n        print(speed)\n\nmain()\n']
2022-04-12 03:20:03.698039 size on output set 2
2022-04-12 03:20:03.698053 num operations 2
2022-04-12 03:20:03.698059 size on input set 1
2022-04-12 03:20:07.084345 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nfrom math import sqrt\n\n\ndef solve(segments, g):\n    speeds = []\n    for i in range(len(segments)):\n        s = segments[i]\n        if i == 0:\n            speeds.append(sqrt(2 * g * s[0]))\n        else:\n            speeds.append(sqrt(speeds[i - 1] ** 2 + 2 * g * s[0] * (1 - cos(s[1] * pi / 180))))\n    return speeds\n\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        n, g = map(float, line.split())\n        segments = []\n        for line in sys.stdin:\n            segments.append(map(float, line.split()))\n            if len(segments) == n:\n                break\n        print('\\n'.join(map(str, solve(segments, g))))\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nfrom math import sqrt\n\n\ndef solve(segments, g):\n    speeds = []\n    for i in range(len(segments)):\n        s = segments[i]\n        if i == 0:\n            speeds.append(sqrt(2 * g * s[0]))\n        else:\n            speeds.append(sqrt(speeds[i - 1] ** 2 + 2 * g * s[0] * (1 - cos(s[1] * pi / 180))))\n    return speeds\n\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        n, g = map(float, line.split())\n        segments = []\n        for line in sys.stdin:\n            segments.append(map(float, line.split()))\n            if len(segments) == n:\n                break\n        print('\\n'.join(map(str, solve(segments, g))))\n"
    }
  ],
  "created": 1649748003,
  "object": "edit"
}
2022-04-12 03:20:07.084464 fix spelling mistakes 2 ["\n\nimport sys\nfrom math import sqrt\n\n\ndef solve(segments, g):\n    speeds = []\n    for i in range(len(segments)):\n        s = segments[i]\n        if i == 0:\n            speeds.append(sqrt(2 * g * s[0]))\n        else:\n            speeds.append(sqrt(speeds[i - 1] ** 2 + 2 * g * s[0] * (1 - cos(s[1] * pi / 180))))\n    return speeds\n\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        n, g = map(float, line.split())\n        segments = []\n        for line in sys.stdin:\n            segments.append(map(float, line.split()))\n            if len(segments) == n:\n                break\n        print('\\n'.join(map(str, solve(segments, g))))\n", "\n\nimport sys\nfrom math import sqrt\n\n\ndef solve(segments, g):\n    speeds = []\n    for i in range(len(segments)):\n        s = segments[i]\n        if i == 0:\n            speeds.append(sqrt(2 * g * s[0]))\n        else:\n            speeds.append(sqrt(speeds[i - 1] ** 2 + 2 * g * s[0] * (1 - cos(s[1] * pi / 180))))\n    return speeds\n\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        n, g = map(float, line.split())\n        segments = []\n        for line in sys.stdin:\n            segments.append(map(float, line.split()))\n            if len(segments) == n:\n                break\n        print('\\n'.join(map(str, solve(segments, g))))\n"]
2022-04-12 03:20:07.084547 size on output set 1
2022-04-12 03:20:07.084553 size on input set 1
2022-04-12 03:20:13.068778 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "from math import sqrt, cos, pi\n\nimport sys\n\n\ndef solve(segments, g):\n    speeds = []\n    for i in range(len(segments)):\n        s = segments[i]\n        if i == 0:\n            speeds.append(sqrt(2 * g * s[0]))\n        else:\n            speeds.append(sqrt(speeds[i - 1] ** 2 + 2 * g * s[0] * (1 - cos(s[1] * pi / 180.0))))\n    return speeds\n\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        n, g = map(float, line.split())\n        segments = []\n        for line in sys.stdin:\n            segments.append(map(float, line.split()))\n            if len(segments) == n:\n                break\n        print('\\n'.join(map(str, solve(segments, g))))\n"
    },
    {
      "index": 1,
      "text": "from math import sqrt, cos, pi\n\nimport sys\n\n\ndef solve(segments, g):\n    speeds = []\n    for i in range(len(segments)):\n        s = segments[i]\n        if i == 0:\n            speeds.append(sqrt(2 * g * s[0]))\n        else:\n            speeds.append(sqrt(speeds[i - 1] ** 2 + 2 * g * s[0] * (1 - cos(s[1] * pi / 180))))\n    return speeds\n\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        n, g = map(float, line.split())\n        segments = []\n        for line in sys.stdin:\n            segments.append(map(float, line.split()))\n            if len(segments) == n:\n                break\n        print('\\n'.join(map(str, solve(segments, g))))\n"
    }
  ],
  "created": 1649748007,
  "object": "edit"
}
2022-04-12 03:20:13.068954 fix syntax errors 2 ["from math import sqrt, cos, pi\n\nimport sys\n\n\ndef solve(segments, g):\n    speeds = []\n    for i in range(len(segments)):\n        s = segments[i]\n        if i == 0:\n            speeds.append(sqrt(2 * g * s[0]))\n        else:\n            speeds.append(sqrt(speeds[i - 1] ** 2 + 2 * g * s[0] * (1 - cos(s[1] * pi / 180.0))))\n    return speeds\n\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        n, g = map(float, line.split())\n        segments = []\n        for line in sys.stdin:\n            segments.append(map(float, line.split()))\n            if len(segments) == n:\n                break\n        print('\\n'.join(map(str, solve(segments, g))))\n", "from math import sqrt, cos, pi\n\nimport sys\n\n\ndef solve(segments, g):\n    speeds = []\n    for i in range(len(segments)):\n        s = segments[i]\n        if i == 0:\n            speeds.append(sqrt(2 * g * s[0]))\n        else:\n            speeds.append(sqrt(speeds[i - 1] ** 2 + 2 * g * s[0] * (1 - cos(s[1] * pi / 180))))\n    return speeds\n\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        n, g = map(float, line.split())\n        segments = []\n        for line in sys.stdin:\n            segments.append(map(float, line.split()))\n            if len(segments) == n:\n                break\n        print('\\n'.join(map(str, solve(segments, g))))\n"]
2022-04-12 03:20:13.068985 size on output set 2
2022-04-12 03:20:13.068996 num operations 2
2022-04-12 03:20:13.069002 size on input set 1
2022-04-12 03:20:18.261589 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom math import sin, cos, radians\n\nN, g = map(float, input().split())  # N is the number of test cases and g is the gravity\n\n\ndef get_velocity(D, theta):  # D is the distance and theta is the angle\n    g_theta = g * cos(radians(theta))\n    return ((2 * D * g_theta) / g) ** 0.5\n\nfor i in range(int(N)):\n    D, theta = map(int, input().split())\n    print(get_velocity(D, theta))\n"
    },
    {
      "index": 1,
      "text": "\nfrom math import sin, cos, radians\n\nN, g = map(float, input().split())\n\ndef get_velocity(D, theta):\n    g_theta = g * cos(radians(theta))\n    return ((2 * D * g_theta) / g) ** 0.5\n\nfor i in range(int(N)):\n    D, theta = map(int, input().split())\n    print(get_velocity(D, theta))\n"
    }
  ],
  "created": 1649748013,
  "object": "edit"
}
2022-04-12 03:20:18.261687 fix spelling mistakes 2 ['\nfrom math import sin, cos, radians\n\nN, g = map(float, input().split())  # N is the number of test cases and g is the gravity\n\n\ndef get_velocity(D, theta):  # D is the distance and theta is the angle\n    g_theta = g * cos(radians(theta))\n    return ((2 * D * g_theta) / g) ** 0.5\n\nfor i in range(int(N)):\n    D, theta = map(int, input().split())\n    print(get_velocity(D, theta))\n', '\nfrom math import sin, cos, radians\n\nN, g = map(float, input().split())\n\ndef get_velocity(D, theta):\n    g_theta = g * cos(radians(theta))\n    return ((2 * D * g_theta) / g) ** 0.5\n\nfor i in range(int(N)):\n    D, theta = map(int, input().split())\n    print(get_velocity(D, theta))\n']
2022-04-12 03:20:18.261700 size on output set 2
2022-04-12 03:20:18.261704 size on input set 2
2022-04-12 03:20:24.641847 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "from math import sin, cos, radians\n\nN, g = map(float, input().split())\n\n\ndef get_velocity(D, theta):\n    g_theta = g * cos(radians(theta))\n    return ((2 * D * g_theta) / g) ** 0.5\n\nfor i in range(int(N)):\n    D, theta = map(int, input().split())\n    print(get_velocity(D, theta))\n"
    },
    {
      "index": 1,
      "text": "from math import sin, cos, radians\n\nN, g = map(float, input().split())  # read N and g\n\n\ndef get_velocity(D, theta):  # get velocity\n    g_theta = g * cos(radians(theta))  # get g * cos(theta)\n    return ((2 * D * g_theta) / g) ** 0.5  # return velocity\n\n\nfor i in range(int(N)):  # loop N times\n    D, theta = map(int, input().split())  # read D and theta\n    print(get_velocity(D, theta))  # print velocity\n"
    }
  ],
  "created": 1649748018,
  "object": "edit"
}
2022-04-12 03:20:24.642034 fix syntax errors 2 ['from math import sin, cos, radians\n\nN, g = map(float, input().split())\n\n\ndef get_velocity(D, theta):\n    g_theta = g * cos(radians(theta))\n    return ((2 * D * g_theta) / g) ** 0.5\n\nfor i in range(int(N)):\n    D, theta = map(int, input().split())\n    print(get_velocity(D, theta))\n', 'from math import sin, cos, radians\n\nN, g = map(float, input().split())  # read N and g\n\n\ndef get_velocity(D, theta):  # get velocity\n    g_theta = g * cos(radians(theta))  # get g * cos(theta)\n    return ((2 * D * g_theta) / g) ** 0.5  # return velocity\n\n\nfor i in range(int(N)):  # loop N times\n    D, theta = map(int, input().split())  # read D and theta\n    print(get_velocity(D, theta))  # print velocity\n']
2022-04-12 03:20:30.610763 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom math import sin, cos, radians\n\nN, g = map(float, input().split())  # N is the number of test cases and g is the gravity.\n\n\n\ndef get_velocity(D, theta):  # D is the distance and theta is the angle.\n    g_theta = g * cos(radians(theta))\n    return ((2 * D * g_theta) / g) ** 0.5\n\nfor i in range(int(N)):\n    D, theta = map(int, input().split())\n    print(get_velocity(D, theta))\n"
    },
    {
      "index": 1,
      "text": "\nfrom math import sin, cos, radians\n\nN, g = map(float, input().split())  # N is the number of test cases and g is the gravity\n\n\ndef get_velocity(D, theta):  # D is the distance and theta is the angle\n    g_theta = g * cos(radians(theta))\n    return ((2 * D * g_theta) / g) ** 0.5\n\nfor i in range(int(N)):\n    D, theta = map(float, input().split())\n    print(get_velocity(D, theta))\n"
    }
  ],
  "created": 1649748024,
  "object": "edit"
}
2022-04-12 03:20:30.611003 fix syntax errors 2 ['\nfrom math import sin, cos, radians\n\nN, g = map(float, input().split())  # N is the number of test cases and g is the gravity.\n\n\n\ndef get_velocity(D, theta):  # D is the distance and theta is the angle.\n    g_theta = g * cos(radians(theta))\n    return ((2 * D * g_theta) / g) ** 0.5\n\nfor i in range(int(N)):\n    D, theta = map(int, input().split())\n    print(get_velocity(D, theta))\n', '\nfrom math import sin, cos, radians\n\nN, g = map(float, input().split())  # N is the number of test cases and g is the gravity\n\n\ndef get_velocity(D, theta):  # D is the distance and theta is the angle\n    g_theta = g * cos(radians(theta))\n    return ((2 * D * g_theta) / g) ** 0.5\n\nfor i in range(int(N)):\n    D, theta = map(float, input().split())\n    print(get_velocity(D, theta))\n']
2022-04-12 03:20:30.611031 size on output set 4
2022-04-12 03:20:30.611040 num operations 2
2022-04-12 03:20:30.611043 size on input set 1
2022-04-12 03:20:38.897972 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Input:\n    - One line containing a positive integer N (1 <= N <= 4), the number of line segments making up the mountain, followed by a space and then a real number g (1 <= g <= 100), the coefficient of acceleration due to gravity.\n    - N more lines each containing two integers D_i and then theta_i (1 <= D <= 10^4; 1 <= theta <= 89): the sloped distance in metres and absolute angle in degrees of this line segment from the vertical respectively. The segments are ordered from the top of the hill to its bottom.\n    Output:\n    Each of the N lines of output should contain one real number: the velocity of a biker starting at the i-th-most segment from the top and finishing at the foot of the mountain.\n    \"\"\"\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Input:\n    - One line containing a positive integer N (1 \u2264 N \u2264 4), the number of line segments making up the mountain, followed by a space and then a real number g (1 \u2264 g \u2264 100), the coefficient of acceleration due to gravity.\n    - N more lines each containing two integers D_i and then \u03b8_i (1 \u2264 D \u2264 10^4; 1 \u2264 \u03b8 \u2264 89): the sloped distance in metres and absolute angle in degrees of this line segment from the vertical respectively. The segments are ordered from the top of the hill to its bottom.\n    Output:\n    Each of the N lines of output should contain one real number: the velocity of a biker starting at the i-th-most segment from the top and finishing at the foot of the mountain.\n    \"\"\"\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649748030,
  "object": "edit"
}
2022-04-12 03:20:38.898083 fix spelling mistakes 2 ['\n\ndef main():\n    """\n    Input:\n    - One line containing a positive integer N (1 <= N <= 4), the number of line segments making up the mountain, followed by a space and then a real number g (1 <= g <= 100), the coefficient of acceleration due to gravity.\n    - N more lines each containing two integers D_i and then theta_i (1 <= D <= 10^4; 1 <= theta <= 89): the sloped distance in metres and absolute angle in degrees of this line segment from the vertical respectively. The segments are ordered from the top of the hill to its bottom.\n    Output:\n    Each of the N lines of output should contain one real number: the velocity of a biker starting at the i-th-most segment from the top and finishing at the foot of the mountain.\n    """\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Input:\n    - One line containing a positive integer N (1 ≤ N ≤ 4), the number of line segments making up the mountain, followed by a space and then a real number g (1 ≤ g ≤ 100), the coefficient of acceleration due to gravity.\n    - N more lines each containing two integers D_i and then θ_i (1 ≤ D ≤ 10^4; 1 ≤ θ ≤ 89): the sloped distance in metres and absolute angle in degrees of this line segment from the vertical respectively. The segments are ordered from the top of the hill to its bottom.\n    Output:\n    Each of the N lines of output should contain one real number: the velocity of a biker starting at the i-th-most segment from the top and finishing at the foot of the mountain.\n    """\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 03:20:38.898109 size on output set 2
2022-04-12 03:20:38.898113 size on input set 2
2022-04-12 03:20:45.185122 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Input:\n    - One line containing a positive integer N (1 <= N <= 4), the number of line segments making up the mountain, followed by a space and then a real number g (1 <= g <= 100), the coefficient of acceleration due to gravity.\n    - N more lines each containing two integers D_i and then \u03b8_i (1 <= D <= 10^4; 1 <= \u03b8 <= 89): the sloped distance in metres and absolute angle in degrees of this line segment from the vertical respectively. The segments are ordered from the top of the hill to its bottom.\n    Output:\n    Each of the N lines of output should contain one real number: the velocity of a biker starting at the i-th-most segment from the top and finishing at the foot of the mountain.\n    \"\"\"\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Input:\n    - One line containing a positive integer N (1 <= N <= 4), the number of line segments making up the mountain, followed by a space and then a real number g (1 <= g <= 100), the coefficient of acceleration due to gravity.\n    - N more lines each containing two integers D_i and then \u03b8_i (1 <= D <= 10^4; 1 <= \u03b8 <= 89): the sloped distance in metres and absolute angle in degrees of this line segment from the vertical respectively. The segments are ordered from the top of the hill to its bottom.\n    Output:\n    Each of the N lines of output should contain one real number: the velocity of a biker starting at the i-th-most segment from the top and finishing at the foot of the mountain.\n    \"\"\"\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649748039,
  "object": "edit"
}
2022-04-12 03:20:45.185334 fix syntax errors 2 ['\n\ndef main():\n    """\n    Input:\n    - One line containing a positive integer N (1 <= N <= 4), the number of line segments making up the mountain, followed by a space and then a real number g (1 <= g <= 100), the coefficient of acceleration due to gravity.\n    - N more lines each containing two integers D_i and then θ_i (1 <= D <= 10^4; 1 <= θ <= 89): the sloped distance in metres and absolute angle in degrees of this line segment from the vertical respectively. The segments are ordered from the top of the hill to its bottom.\n    Output:\n    Each of the N lines of output should contain one real number: the velocity of a biker starting at the i-th-most segment from the top and finishing at the foot of the mountain.\n    """\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Input:\n    - One line containing a positive integer N (1 <= N <= 4), the number of line segments making up the mountain, followed by a space and then a real number g (1 <= g <= 100), the coefficient of acceleration due to gravity.\n    - N more lines each containing two integers D_i and then θ_i (1 <= D <= 10^4; 1 <= θ <= 89): the sloped distance in metres and absolute angle in degrees of this line segment from the vertical respectively. The segments are ordered from the top of the hill to its bottom.\n    Output:\n    Each of the N lines of output should contain one real number: the velocity of a biker starting at the i-th-most segment from the top and finishing at the foot of the mountain.\n    """\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 03:20:53.370952 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Input:\n    - One line containing a positive integer N (1 <= N <= 4), the number of line segments making up the mountain,\n    followed by a space and then a real number g (1 <= g <= 100), the coefficient of acceleration due to gravity.\n    - N more lines each containing two integers D_i and then theta_i (1 <= D <= 10^4; 1 <= theta <= 89):\n    the sloped distance in metres and absolute angle in degrees of this line segment from the vertical respectively.\n    The segments are ordered from the top of the hill to its bottom.\n    Output:\n    Each of the N lines of output should contain one real number:\n    the velocity of a biker starting at the i-th-most segment from the top and finishing at the foot of the mountain.\n    \"\"\"\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Input:\n    - One line containing a positive integer N (1 <= N <= 4), the number of line segments making up the mountain,\n    followed by a space and then a real number g (1 <= g <= 100), the coefficient of acceleration due to gravity.\n    - N more lines each containing two integers D_i and then theta_i (1 <= D <= 10^4; 1 <= theta <= 89):\n    the sloped distance in metres and absolute angle in degrees of this line segment from the vertical respectively.\n    The segments are ordered from the top of the hill to its bottom.\n    Output:\n    Each of the N lines of output should contain one real number:\n    the velocity of a biker starting at the i-th-most segment from the top and finishing at the foot of the mountain.\n    \"\"\"\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649748045,
  "object": "edit"
}
2022-04-12 03:20:53.371285 fix syntax errors 2 ['\n\ndef main():\n    """\n    Input:\n    - One line containing a positive integer N (1 <= N <= 4), the number of line segments making up the mountain,\n    followed by a space and then a real number g (1 <= g <= 100), the coefficient of acceleration due to gravity.\n    - N more lines each containing two integers D_i and then theta_i (1 <= D <= 10^4; 1 <= theta <= 89):\n    the sloped distance in metres and absolute angle in degrees of this line segment from the vertical respectively.\n    The segments are ordered from the top of the hill to its bottom.\n    Output:\n    Each of the N lines of output should contain one real number:\n    the velocity of a biker starting at the i-th-most segment from the top and finishing at the foot of the mountain.\n    """\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Input:\n    - One line containing a positive integer N (1 <= N <= 4), the number of line segments making up the mountain,\n    followed by a space and then a real number g (1 <= g <= 100), the coefficient of acceleration due to gravity.\n    - N more lines each containing two integers D_i and then theta_i (1 <= D <= 10^4; 1 <= theta <= 89):\n    the sloped distance in metres and absolute angle in degrees of this line segment from the vertical respectively.\n    The segments are ordered from the top of the hill to its bottom.\n    Output:\n    Each of the N lines of output should contain one real number:\n    the velocity of a biker starting at the i-th-most segment from the top and finishing at the foot of the mountain.\n    """\n    from math import radians, cos, sqrt\n    N, g = map(float, input().split())\n    for i in range(int(N)):\n        D, theta = map(int, input().split())\n        print(sqrt(2*g*D*cos(radians(theta))))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 03:20:53.371548 size on output set 2
