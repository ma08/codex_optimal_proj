["\n\ndef main():\n    s = input()\n    print(1 if s.count('b') == s.count('w') or s[0] == s[-1] and s.count(s[0]) == len(s) - 1 else 0)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    data = sys.stdin.read().splitlines()[0]\n    print(data)\n    # b_count = 0\n    # w_count = 0\n    # for i in range(len(s)):\n    #     if s[i] == 'B':\n    #         b_count += 1\n    #     else:\n    #         w_count += 1\n    # if b_count == w_count or b_count - w_count == 1 or w_count - b_count == 1:\n    #     print(1)\n    # else:\n    #     print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    stones = input()  # input string\n    balance = 0\n    for stone in stones:\n        if stone == 'B':\n            balance += 1\n        else:\n            balance -= 1\n    if balance == 0:\n        print(1)\n    else:\n        print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    s = input()\n    if s.count('b') == s.count('w'):\n        print(1)\n        return\n    if s[0] == s[-1] and s.count(s[0]) == len(s) - 1:\n        print(1)\n        return\n    print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\nimport math\n\n# number of test cases\nt = int(input())\n\n# iterate through test cases\nfor i in range(t):\n    # get the string to check\n    s = input()\n    # count the number of white stones\n    w = s.count('W')\n    # count the number of black stones\n    b = s.count('B')\n    # if the number of black and white stones are equal, then we can balance them\n    if w == b:\n        print(1)\n    # otherwise, we cannot balance them\n    else:\n        print(0)\n", "\n\n\"\"\"\nWe will use the following observations to solve this problem: \n1) If there are an odd number of black stones and an odd number of white stones, then it is impossible to balance the stones. \n2) If there are an even number of both black and white stones, then it is always possible to balance the stones. \n3) If there are an even number of black stones and an odd number of white stones (or vice versa), then it is possible to balance the stones if and only if there is a substring of the form wwbwwbwwbwwb...wbwwbwwbwwb. \n\"\"\"\n\nfrom sys import stdin, stdout\n\ns = stdin.readline().strip()\n\n# Check if there are an odd number of both black and white stones\nif s.count('B') % 2 == 1 and s.count('W') % 2 == 1:\n    stdout.write('0')\n# Check if there are an even number of both black and white stones\nelif s.count('B') % 2 == 0 and s.count('W') % 2 == 0:\n    stdout.write('1')\n# Check if there are an even number of black stones and an odd number of white stones\nelif s.count('B') % 2 == 0:\n    if 'WWBWWB' in s or 'BWWBWW' in s or 'WWBWWBWWB' in s or 'BWWBWWBWW' in s:\n        stdout.write('1')\n    else:\n        stdout.write('0')\n# Check if there are an odd number of black stones and an even number of white stones\nelse:\n    if 'WWBWWB' in s or 'BWWBWW' in s or 'WWBWWBWWB' in s or 'BWWBWWBWW' in s:\n        stdout.write('1')\n    else:\n        stdout.write('0')\n", "\n\ndef main():\n    string = input()\n    black_count = 0\n    white_count = 0\n    for i in range(len(string)):\n        if string[i] == 'B':\n            black_count += 1\n        else:\n            white_count += 1\n    if abs(black_count - white_count) > 1:\n        # if the number of black and white is more than 1, there is no possible way to make it valid\n        print(0)\n        return\n    if black_count == white_count:\n        # if the number of black and white is the same, it is always valid\n        print(1)\n        return\n    if black_count > white_count:\n        target = 'B'\n    else:\n        target = 'W'\n    for i in range(len(string)):\n        if string[i] == target:\n            if i == 0:\n                if string[-1] != target and string[1] != target:\n                    print(0)\n                    return\n            elif i == len(string) - 1:\n                if string[-2] != target and string[0] != target:\n                    print(0)\n                    return\n            else:\n                if string[i-1] != target and string[i+1] != target:\n                    print(0)\n                    return\n    print(1)\n\nmain()\n", "import sys\nimport math\n\n#number of test cases\nt = int(input())\n\n#iterate through test cases\nfor i in range(t):\n    #get the string to check.\n    s = input()\n    #count the number of white stones\n    w = s.count('W')\n    #count the number of black stones\n    b = s.count('B')\n    #if the number of black and white stones are equal, then we can balance them\n    if w == b:\n        print(1)\n    #otherwise, we cannot balance them\n    else:\n        print(0)\n", "\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\n# number of test cases\nt = int(input())\n\n# iterate through test cases\nfor i in range(t):\n    # get the string to check\n    s = input()\n    # count the number of white stones\n    w = s.count('W')\n    # count the number of black stones\n    b = s.count('B')\n    # if the number of black and white stones are equal, then we can balance them\n    if w == b:\n        print(1)\n    # otherwise, we cannot balance them\n    else:\n        print(0)\n", "import sys\n\ndef main():\n    data = sys.stdin.read().splitlines()\n    s = data[0]\n    print(s)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    s = sys.stdin.read().splitlines()[0]\n    b_count = 0\n    w_count = 0\n    for i in range(len(s)):\n        if s[i] == 'B':\n            b_count += 1\n        else:\n            w_count += 1\n    print(1 if b_count == w_count or b_count - w_count == 1 or w_count - b_count == 1 else 0)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n\nfrom sys import stdin, stdout\n\ns = stdin.readline().strip()\n\n# Check if there are an odd number of both black and white stones\nif s.count('B') % 2 == 1 and s.count('W') % 2 == 1:\n    stdout.write('0')\n# Check if there are an even number of both black and white stones\nelif s.count('B') % 2 == 0 and s.count('W') % 2 == 0:\n    stdout.write('1')\n# Check if there are an even number of black stones and an odd number of white stones\nelif s.count('B') % 2 == 0:\n    if 'WWBWWB' in s or 'BWWBWW' in s:\n        stdout.write('1')\n    else:\n        stdout.write('0')\n# Check if there are an odd number of black stones and an even number of white stones\nelse:\n    if 'WWBWWB' in s or 'BWWBWW' in s:\n        stdout.write('1')\n    else:\n        stdout.write('0')\n", "\n\ndef main():\n    \"\"\"\n    This is the main function that runs the program.\n\n    Returns:\n        int: 1 if it is possible for Ming to balance the stones with his rules\n        0 otherwise.\n    \"\"\"\n    stones = input()\n    if len(stones) == 1 and stones[0] == '-':\n        return 0\n    if stones[0] == stones[-1] and stones[0] == '-':\n        return 0\n    if len(stones) == 2 and stones[0] == '-' and stones[1] == '+':\n        return 1\n    return 0\n\n\nif __name__ == \"__main__\":\n    print(main())\n", "\n\ndef main():\n    stones = input().strip()\n    balance = 0\n    for stone in stones:\n        if stone == 'B':\n            balance += 1\n        else:\n            balance -= 1\n    if balance == 0:\n        print(1)\n    else:\n        print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    stones = input()  # input string\n    balance = 0\n    for stone in stones:\n        if stone == 'B':\n            balance += 1\n        else:\n            balance -= 1\n    if balance == 0:\n        print(1)\n    else:\n\n        print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n\n\nfrom sys import stdin, stdout\n\ns = stdin.readline().strip()\n\n# Check if there are an even number of both black and white stones\nif s.count('B') % 2 == 0 and s.count('W') % 2 == 0:\n    stdout.write('1')\n# Check if there are an even number of black stones and an odd number of white stones\nelif s.count('B') % 2 == 0:\n    if 'WWBWWB' in s or 'BWWBWW' in s:\n        stdout.write('1')\n    else:\n        stdout.write('0')\n# Check if there are an odd number of black stones and an even number of white stones\nelse:\n    if 'WWBWWB' in s or 'BWWBWW' in s:\n        stdout.write('1')\n    else:\n        stdout.write('0')\n# Check if there are an odd number of both black and white stones\nelse:\n    stdout.write('0')\n", "\n\ndef main():\n    string = input()\n    black_count = 0\n    white_count = 0\n    for i in range(len(string)):\n        if string[i] == 'B':\n            black_count += 1\n        else:\n            white_count += 1\n    if abs(black_count - white_count) > 1:\n        print(0)\n        return\n    if black_count == white_count:  # if same\n        print(1)\n        return\n    if black_count > white_count:  # if black is more than white\n        target = 'B'\n    else:  # if white is more than black\n        target = 'W'\n    for i in range(len(string)):\n        if string[i] == target:\n            if i == 0:\n                if string[-1] != target and string[1] != target:\n                    print(0)\n                    return\n            elif i == len(string) - 1:\n                if string[-2] != target and string[0] != target:\n                    print(0)\n                    return\n            else:\n                if string[i-1] != target and string[i+1] != target:\n                    print(0)\n                    return\n    print(1)\n\nmain()\n", "\n", "#!/bin/python\n\nimport sys\n\ndef solve(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'B':\n            count += 1\n    if count == len(s) or count == 0:\n        return 0\n    else:\n        return 1\n    \ns = input().strip()\nresult = solve(s)\nprint(result)\n", "import sys\n\ndef main():\n    data = sys.stdin.read().splitlines()\n    s = data[0]\n    if len(s) == 1:\n        print(1)\n        return\n    b_count = 0\n    w_count = 0\n    for i in range(len(s)):\n        if s[i] == 'B':\n            b_count += 1\n        else:\n            w_count += 1\n    if b_count == w_count:\n        print(1)\n        return\n    if b_count > w_count:\n        if b_count - w_count == 1:\n            print(1)\n            return\n    if w_count > b_count:\n        if w_count - b_count == 1:\n            print(1)\n            return\n    print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    s = input()\n    if s.count('B') == s.count('W'):\n        print(1)\n        return\n    if s[0] == s[-1] and s.count(s[0]) == len(s) - 1:\n        print(1)\n        return\n    print(0)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    This is the main function that runs the program.\n\n    Returns:\n        int: 1 if it is possible for Ming to balance the stones with his rules\n        0 otherwise.\n    \"\"\"\n    stones = input().strip()\n    if len(stones) == 1:\n        return 0\n    if stones[0] == stones[1]:\n        return 0\n    if len(stones) == 2:\n        return 1\n    return 0\n\n\nif __name__ == \"__main__\":\n    print(main())\n", "\n\ndef main():\n    string = input()  # input string\n    black_count = 0\n    white_count = 0\n    for i in range(len(string)):  # count black and white\n        if string[i] == 'B':\n            black_count += 1\n        else:\n            white_count += 1\n    if abs(black_count - white_count) > 1:  # if difference is more than 1\n        print(0)\n        return\n    if black_count > white_count:  # if black is more than white\n        target = 'B'\n    else:  # if white is more than black\n        target = 'W'\n    if string[0] != target and string[-1] != target:\n        print(0)\n        return\n    print(1)\n\nmain()\n", "\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\nimport math\n\n# number of test cases\nt = int(input())\n\n# iterate through test cases\nfor i in range(t):\n    # get the string to check.\n    s = input()\n    # count the number of white stones\n    w = s.count('W')\n    # count the number of black stones\n    b = s.count('B')\n    # if the number of black and white stones are equal, then we can balance them\n    if w == b:\n        print(1)\n    # otherwise, we cannot balance them\n    else:\n        print(0)\n"]