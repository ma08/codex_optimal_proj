2022-04-12 02:43:43.974012 num operations 2
2022-04-12 02:43:43.974042 size on input set 1
2022-04-12 02:43:46.233181 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#solution:\n\na,b,c = input().split()\na,b,c = int(a),int(b),int(c)\nif a+b==c:\n    print(str(a)+\"+\"+str(b)+\"=\"+str(c))\nelif a-b==c:\n    print(str(a)+\"-\"+str(b)+\"=\"+str(c))\nelif a*b==c:\n    print(str(a)+\"*\"+str(b)+\"=\"+str(c))\nelif a/b==c:\n    print(str(a)+\"/\"+str(b)+\"=\"+str(c))\nelif a==b+c:\n    print(str(a)+\"=\"+str(b)+\"+\"+str(c))\nelif a==b-c:\n    print(str(a)+\"=\"+str(b)+\"-\"+str(c))\nelif a==b*c:\n    print(str(a)+\"=\"+str(b)+\"*\"+str(c))\nelif a==b/c:\n    print(str(a)+\"=\"+str(b)+\"/\"+str(c))\n"
    },
    {
      "index": 1,
      "text": "\n\n#Solution\n\na,b,c = input().split()\na,b,c = int(a),int(b),int(c)\nif a+b==c:\n    print(str(a)+\"+\"+str(b)+\"=\"+str(c))\nelif a-b==c:\n    print(str(a)+\"-\"+str(b)+\"=\"+str(c))\nelif a*b==c:\n    print(str(a)+\"*\"+str(b)+\"=\"+str(c))\nelif a/b==c:\n    print(str(a)+\"/\"+str(b)+\"=\"+str(c))\nelif a==b+c:\n    print(str(a)+\"=\"+str(b)+\"+\"+str(c))\nelif a==b-c:\n    print(str(a)+\"=\"+str(b)+\"-\"+str(c))\nelif a==b*c:\n    print(str(a)+\"=\"+str(b)+\"*\"+str(c))\nelif a==b/c:\n    print(str(a)+\"=\"+str(b)+\"/\"+str(c))\n"
    }
  ],
  "created": 1649745824,
  "object": "edit"
}
2022-04-12 02:43:46.233398 fix spelling mistakes 2 ['\n\n#solution:\n\na,b,c = input().split()\na,b,c = int(a),int(b),int(c)\nif a+b==c:\n    print(str(a)+"+"+str(b)+"="+str(c))\nelif a-b==c:\n    print(str(a)+"-"+str(b)+"="+str(c))\nelif a*b==c:\n    print(str(a)+"*"+str(b)+"="+str(c))\nelif a/b==c:\n    print(str(a)+"/"+str(b)+"="+str(c))\nelif a==b+c:\n    print(str(a)+"="+str(b)+"+"+str(c))\nelif a==b-c:\n    print(str(a)+"="+str(b)+"-"+str(c))\nelif a==b*c:\n    print(str(a)+"="+str(b)+"*"+str(c))\nelif a==b/c:\n    print(str(a)+"="+str(b)+"/"+str(c))\n', '\n\n#Solution\n\na,b,c = input().split()\na,b,c = int(a),int(b),int(c)\nif a+b==c:\n    print(str(a)+"+"+str(b)+"="+str(c))\nelif a-b==c:\n    print(str(a)+"-"+str(b)+"="+str(c))\nelif a*b==c:\n    print(str(a)+"*"+str(b)+"="+str(c))\nelif a/b==c:\n    print(str(a)+"/"+str(b)+"="+str(c))\nelif a==b+c:\n    print(str(a)+"="+str(b)+"+"+str(c))\nelif a==b-c:\n    print(str(a)+"="+str(b)+"-"+str(c))\nelif a==b*c:\n    print(str(a)+"="+str(b)+"*"+str(c))\nelif a==b/c:\n    print(str(a)+"="+str(b)+"/"+str(c))\n']
2022-04-12 02:43:46.233436 size on output set 2
2022-04-12 02:43:46.233446 size on input set 2
2022-04-12 02:43:58.118652 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Solution\n\na, b, c = input().split()\na, b, c = int(a), int(b), int(c)\nif a + b == c:\n    print(str(a) + \"+\" + str(b) + \"=\" + str(c))\nelif a - b == c:\n    print(str(a) + \"-\" + str(b) + \"=\" + str(c))\nelif a * b == c:\n    print(str(a) + \"*\" + str(b) + \"=\" + str(c))\nelif a / b == c:\n    print(str(a) + \"/\" + str(b) + \"=\" + str(c))\nelif a == b + c:\n    print(str(a) + \"=\" + str(b) + \"+\" + str(c))\nelif a == b - c:\n    print(str(a) + \"=\" + str(b) + \"-\" + str(c))\nelif a == b * c:\n    print(str(a) + \"=\" + str(b) + \"*\" + str(c))\nelif a == b / c:\n    print(str(a) + \"=\" + str(b) + \"/\" + str(c))\n"
    },
    {
      "index": 1,
      "text": "\n# Solution\n\na,b,c = input().split()\na,b,c = int(a),int(b),int(c)\nif a+b==c:\n    print(str(a)+\"+\"+str(b)+\"=\"+str(c))\nelif a-b==c:\n    print(str(a)+\"-\"+str(b)+\"=\"+str(c))\nelif a*b==c:\n    print(str(a)+\"*\"+str(b)+\"=\"+str(c))\nelif a/b==c:\n    print(str(a)+\"/\"+str(b)+\"=\"+str(c))\nelif a==b+c:\n    print(str(a)+\"=\"+str(b)+\"+\"+str(c))\nelif a==b-c:\n    print(str(a)+\"=\"+str(b)+\"-\"+str(c))\nelif a==b*c:\n    print(str(a)+\"=\"+str(b)+\"*\"+str(c))\nelif a==b/c:\n    print(str(a)+\"=\"+str(b)+\"/\"+str(c))\n"
    }
  ],
  "created": 1649745826,
  "object": "edit"
}
2022-04-12 02:43:58.118864 fix syntax errors 2 ['\n\n# Solution\n\na, b, c = input().split()\na, b, c = int(a), int(b), int(c)\nif a + b == c:\n    print(str(a) + "+" + str(b) + "=" + str(c))\nelif a - b == c:\n    print(str(a) + "-" + str(b) + "=" + str(c))\nelif a * b == c:\n    print(str(a) + "*" + str(b) + "=" + str(c))\nelif a / b == c:\n    print(str(a) + "/" + str(b) + "=" + str(c))\nelif a == b + c:\n    print(str(a) + "=" + str(b) + "+" + str(c))\nelif a == b - c:\n    print(str(a) + "=" + str(b) + "-" + str(c))\nelif a == b * c:\n    print(str(a) + "=" + str(b) + "*" + str(c))\nelif a == b / c:\n    print(str(a) + "=" + str(b) + "/" + str(c))\n', '\n# Solution\n\na,b,c = input().split()\na,b,c = int(a),int(b),int(c)\nif a+b==c:\n    print(str(a)+"+"+str(b)+"="+str(c))\nelif a-b==c:\n    print(str(a)+"-"+str(b)+"="+str(c))\nelif a*b==c:\n    print(str(a)+"*"+str(b)+"="+str(c))\nelif a/b==c:\n    print(str(a)+"/"+str(b)+"="+str(c))\nelif a==b+c:\n    print(str(a)+"="+str(b)+"+"+str(c))\nelif a==b-c:\n    print(str(a)+"="+str(b)+"-"+str(c))\nelif a==b*c:\n    print(str(a)+"="+str(b)+"*"+str(c))\nelif a==b/c:\n    print(str(a)+"="+str(b)+"/"+str(c))\n']
2022-04-12 02:44:00.578294 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#solution:\n\na,b,c = input().split()\na,b,c = int(a),int(b),int(c)\nif a+b==c:\n    print(str(a)+\"+\"+str(b)+\"=\"+str(c))\nelif a-b==c:\n    print(str(a)+\"-\"+str(b)+\"=\"+str(c))\nelif a*b==c:\n    print(str(a)+\"*\"+str(b)+\"=\"+str(c))\nelif a/b==c:\n    print(str(a)+\"/\"+str(b)+\"=\"+str(c))\nelif a==b+c:\n    print(str(a)+\"=\"+str(b)+\"+\"+str(c))\nelif a==b-c:\n    print(str(a)+\"=\"+str(b)+\"-\"+str(c))\nelif a==b*c:\n    print(str(a)+\"=\"+str(b)+\"*\"+str(c))\nelif a==b/c:\n    print(str(a)+\"=\"+str(b)+\"/\"+str(c))\n"
    },
    {
      "index": 1,
      "text": "\n\n# solution:\n\na,b,c = input().split()\na,b,c = int(a),int(b),int(c)\nif a+b==c:\n    print(str(a)+\"+\"+str(b)+\"=\"+str(c))\nelif a-b==c:\n    print(str(a)+\"-\"+str(b)+\"=\"+str(c))\nelif a*b==c:\n    print(str(a)+\"*\"+str(b)+\"=\"+str(c))\nelif a/b==c:\n    print(str(a)+\"/\"+str(b)+\"=\"+str(c))\nelif a==b+c:\n    print(str(a)+\"=\"+str(b)+\"+\"+str(c))\nelif a==b-c:\n    print(str(a)+\"=\"+str(b)+\"-\"+str(c))\nelif a==b*c:\n    print(str(a)+\"=\"+str(b)+\"*\"+str(c))\nelif a==b/c:\n    print(str(a)+\"=\"+str(b)+\"/\"+str(c))\n"
    }
  ],
  "created": 1649745838,
  "object": "edit"
}
2022-04-12 02:44:00.578555 fix syntax errors 2 ['\n#solution:\n\na,b,c = input().split()\na,b,c = int(a),int(b),int(c)\nif a+b==c:\n    print(str(a)+"+"+str(b)+"="+str(c))\nelif a-b==c:\n    print(str(a)+"-"+str(b)+"="+str(c))\nelif a*b==c:\n    print(str(a)+"*"+str(b)+"="+str(c))\nelif a/b==c:\n    print(str(a)+"/"+str(b)+"="+str(c))\nelif a==b+c:\n    print(str(a)+"="+str(b)+"+"+str(c))\nelif a==b-c:\n    print(str(a)+"="+str(b)+"-"+str(c))\nelif a==b*c:\n    print(str(a)+"="+str(b)+"*"+str(c))\nelif a==b/c:\n    print(str(a)+"="+str(b)+"/"+str(c))\n', '\n\n# solution:\n\na,b,c = input().split()\na,b,c = int(a),int(b),int(c)\nif a+b==c:\n    print(str(a)+"+"+str(b)+"="+str(c))\nelif a-b==c:\n    print(str(a)+"-"+str(b)+"="+str(c))\nelif a*b==c:\n    print(str(a)+"*"+str(b)+"="+str(c))\nelif a/b==c:\n    print(str(a)+"/"+str(b)+"="+str(c))\nelif a==b+c:\n    print(str(a)+"="+str(b)+"+"+str(c))\nelif a==b-c:\n    print(str(a)+"="+str(b)+"-"+str(c))\nelif a==b*c:\n    print(str(a)+"="+str(b)+"*"+str(c))\nelif a==b/c:\n    print(str(a)+"="+str(b)+"/"+str(c))\n']
2022-04-12 02:44:00.578595 size on output set 4
2022-04-12 02:44:00.578621 num operations 2
2022-04-12 02:44:00.578630 size on input set 1
2022-04-12 02:44:07.281155 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nnumbers = input().split()  # \u0432\u0432\u043e\u0434\u0438\u043c \u0447\u0438\u0441\u043b\u0430 \u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0438\u0445 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a\n\nfor i in range(len(numbers)):\n    numbers[i] = int(numbers[i])  # \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0441\u043f\u0438\u0441\u043a\u0430 \u0432 \u0447\u0438\u0441\u043b\u0430\n\nif numbers[0] + numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"+\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[0] - numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"-\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[0] * numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"*\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[0] / numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"/\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[2] + numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"+\" + str(numbers[2]))\nelif numbers[2] - numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"-\" + str(numbers[2]))\nelif numbers[2] * numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"*\" + str(numbers[2]))\nelif numbers[2] / numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"/\" + str(numbers[2]))\n"
    },
    {
      "index": 1,
      "text": "\n#\nnumbers = input().split()\n\nfor i in range(len(numbers)):\n    numbers[i] = int(numbers[i])\n\nif numbers[0] + numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"+\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[0] - numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"-\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[0] * numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"*\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[0] / numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"/\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[2] + numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"+\" + str(numbers[2]))\nelif numbers[2] - numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"-\" + str(numbers[2]))\nelif numbers[2] * numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"*\" + str(numbers[2]))\nelif numbers[2] / numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"/\" + str(numbers[2]))\n"
    }
  ],
  "created": 1649745840,
  "object": "edit"
}
2022-04-12 02:44:07.281466 fix spelling mistakes 2 ['\n\nnumbers = input().split()  # вводим числа и преобразуем их в список\n\nfor i in range(len(numbers)):\n    numbers[i] = int(numbers[i])  # преобразуем элементы списка в числа\n\nif numbers[0] + numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "+" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[0] - numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "-" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[0] * numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "*" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[0] / numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "/" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[2] + numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "+" + str(numbers[2]))\nelif numbers[2] - numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "-" + str(numbers[2]))\nelif numbers[2] * numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "*" + str(numbers[2]))\nelif numbers[2] / numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "/" + str(numbers[2]))\n', '\n#\nnumbers = input().split()\n\nfor i in range(len(numbers)):\n    numbers[i] = int(numbers[i])\n\nif numbers[0] + numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "+" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[0] - numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "-" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[0] * numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "*" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[0] / numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "/" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[2] + numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "+" + str(numbers[2]))\nelif numbers[2] - numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "-" + str(numbers[2]))\nelif numbers[2] * numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "*" + str(numbers[2]))\nelif numbers[2] / numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "/" + str(numbers[2]))\n']
2022-04-12 02:44:07.281529 size on output set 2
2022-04-12 02:44:07.281539 size on input set 2
2022-04-12 02:44:09.306716 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "numbers = input().split()\n\nfor i in range(len(numbers)):\n    numbers[i] = int(numbers[i])\n\nif numbers[0] + numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"+\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[0] - numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"-\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[0] * numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"*\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[0] / numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"/\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[2] + numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"+\" + str(numbers[2]))\nelif numbers[2] - numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"-\" + str(numbers[2]))\nelif numbers[2] * numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"*\" + str(numbers[2]))\nelif numbers[2] / numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"/\" + str(numbers[2]))\n"
    },
    {
      "index": 1,
      "text": "\nnumbers = input().split()\n\nfor i in range(len(numbers)):\n    numbers[i] = int(numbers[i])\n\nif numbers[0] + numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"+\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[0] - numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"-\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[0] * numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"*\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[0] / numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"/\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[2] + numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"+\" + str(numbers[2]))\nelif numbers[2] - numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"-\" + str(numbers[2]))\nelif numbers[2] * numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"*\" + str(numbers[2]))\nelif numbers[2] / numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"/\" + str(numbers[2]))\n"
    }
  ],
  "created": 1649745847,
  "object": "edit"
}
2022-04-12 02:44:09.306875 fix syntax errors 2 ['numbers = input().split()\n\nfor i in range(len(numbers)):\n    numbers[i] = int(numbers[i])\n\nif numbers[0] + numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "+" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[0] - numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "-" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[0] * numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "*" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[0] / numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "/" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[2] + numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "+" + str(numbers[2]))\nelif numbers[2] - numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "-" + str(numbers[2]))\nelif numbers[2] * numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "*" + str(numbers[2]))\nelif numbers[2] / numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "/" + str(numbers[2]))\n', '\nnumbers = input().split()\n\nfor i in range(len(numbers)):\n    numbers[i] = int(numbers[i])\n\nif numbers[0] + numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "+" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[0] - numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "-" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[0] * numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "*" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[0] / numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "/" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[2] + numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "+" + str(numbers[2]))\nelif numbers[2] - numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "-" + str(numbers[2]))\nelif numbers[2] * numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "*" + str(numbers[2]))\nelif numbers[2] / numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "/" + str(numbers[2]))\n']
2022-04-12 02:44:11.449296 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nnumbers = input().split()  # \u0432\u0432\u043e\u0434\u0438\u043c \u0447\u0438\u0441\u043b\u0430 \u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0438\u0445 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a\n\nfor i in range(len(numbers)):\n    numbers[i] = int(numbers[i])  # \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0441\u043f\u0438\u0441\u043a\u0430 \u0432 \u0447\u0438\u0441\u043b\u0430\nif numbers[0] + numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"+\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[0] - numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"-\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[0] * numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"*\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[0] / numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"/\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[2] + numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"+\" + str(numbers[2]))\nelif numbers[2] - numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"-\" + str(numbers[2]))\nelif numbers[2] * numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"*\" + str(numbers[2]))\nelif numbers[2] / numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"/\" + str(numbers[2]))\n"
    },
    {
      "index": 1,
      "text": "\nnumbers = input().split()  # \u0432\u0432\u043e\u0434\u0438\u043c \u0447\u0438\u0441\u043b\u0430 \u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u0438\u0445 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a\n\nfor i in range(len(numbers)):\n    numbers[i] = int(numbers[i])  # \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0441\u043f\u0438\u0441\u043a\u0430 \u0432 \u0447\u0438\u0441\u043b\u0430\nif numbers[0] + numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"+\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[0] - numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"-\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[0] * numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"*\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[0] / numbers[1] == numbers[2]:\n    print(str(numbers[0]) + \"/\" + str(numbers[1]) + \"=\" + str(numbers[2]))\nelif numbers[2] + numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"+\" + str(numbers[2]))\nelif numbers[2] - numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"-\" + str(numbers[2]))\nelif numbers[2] * numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"*\" + str(numbers[2]))\nelif numbers[2] / numbers[1] == numbers[0]:\n    print(str(numbers[0]) + \"=\" + str(numbers[1]) + \"/\" + str(numbers[2]))\n"
    }
  ],
  "created": 1649745849,
  "object": "edit"
}
2022-04-12 02:44:11.449432 fix syntax errors 2 ['\nnumbers = input().split()  # вводим числа и преобразуем их в список\n\nfor i in range(len(numbers)):\n    numbers[i] = int(numbers[i])  # преобразуем элементы списка в числа\nif numbers[0] + numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "+" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[0] - numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "-" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[0] * numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "*" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[0] / numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "/" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[2] + numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "+" + str(numbers[2]))\nelif numbers[2] - numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "-" + str(numbers[2]))\nelif numbers[2] * numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "*" + str(numbers[2]))\nelif numbers[2] / numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "/" + str(numbers[2]))\n', '\nnumbers = input().split()  # вводим числа и преобразуем их в список\n\nfor i in range(len(numbers)):\n    numbers[i] = int(numbers[i])  # преобразуем элементы списка в числа\nif numbers[0] + numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "+" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[0] - numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "-" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[0] * numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "*" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[0] / numbers[1] == numbers[2]:\n    print(str(numbers[0]) + "/" + str(numbers[1]) + "=" + str(numbers[2]))\nelif numbers[2] + numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "+" + str(numbers[2]))\nelif numbers[2] - numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "-" + str(numbers[2]))\nelif numbers[2] * numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "*" + str(numbers[2]))\nelif numbers[2] / numbers[1] == numbers[0]:\n    print(str(numbers[0]) + "=" + str(numbers[1]) + "/" + str(numbers[2]))\n']
2022-04-12 02:44:11.449464 size on output set 3
2022-04-12 02:44:11.449471 num operations 2
2022-04-12 02:44:11.449474 size on input set 1
2022-04-12 02:44:13.906080 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nnums = [int(x) for x in input().split()]\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + \"+\" + str(nums[1]) + \"=\" + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + \"-\" + str(nums[1]) + \"=\" + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + \"*\" + str(nums[1]) + \"=\" + str(nums[2]))\nelse:\n    print(str(nums[0]) + \"/\" + str(nums[1]) + \"=\" + str(nums[2]))\n"
    },
    {
      "index": 1,
      "text": "\n\nnums = [float(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + \"+\" + str(nums[1]) + \"=\" + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + \"-\" + str(nums[1]) + \"=\" + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + \"*\" + str(nums[1]) + \"=\" + str(nums[2]))\nelse:\n    print(str(nums[0]) + \"/\" + str(nums[1]) + \"=\" + str(nums[2]))\n"
    }
  ],
  "created": 1649745851,
  "object": "edit"
}
2022-04-12 02:44:13.906388 fix spelling mistakes 2 ['\nnums = [int(x) for x in input().split()]\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + "+" + str(nums[1]) + "=" + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + "-" + str(nums[1]) + "=" + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + "*" + str(nums[1]) + "=" + str(nums[2]))\nelse:\n    print(str(nums[0]) + "/" + str(nums[1]) + "=" + str(nums[2]))\n', '\n\nnums = [float(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + "+" + str(nums[1]) + "=" + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + "-" + str(nums[1]) + "=" + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + "*" + str(nums[1]) + "=" + str(nums[2]))\nelse:\n    print(str(nums[0]) + "/" + str(nums[1]) + "=" + str(nums[2]))\n']
2022-04-12 02:44:13.906423 size on output set 2
2022-04-12 02:44:13.906433 size on input set 2
2022-04-12 02:44:26.537797 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nnums = [float(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + \"+\" + str(nums[1]) + \"=\" + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + \"-\" + str(nums[1]) + \"=\" + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + \"*\" + str(nums[1]) + \"=\" + str(nums[2]))\nelse:\n    print(str(nums[0]) + \"/\" + str(nums[1]) + \"=\" + str(nums[2]))\n"
    },
    {
      "index": 1,
      "text": "\nnums = [float(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]: print(str(nums[0]) + \"+\" + str(nums[1]) + \"=\" + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]: print(str(nums[0]) + \"-\" + str(nums[1]) + \"=\" + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]: print(str(nums[0]) + \"*\" + str(nums[1]) + \"=\" + str(nums[2]))\nelse:\n    print(str(nums[0]) + \"/\" + str(nums[1]) + \"=\" + str(nums[2]))\n"
    }
  ],
  "created": 1649745854,
  "object": "edit"
}
2022-04-12 02:44:26.537907 fix syntax errors 2 ['\nnums = [float(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + "+" + str(nums[1]) + "=" + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + "-" + str(nums[1]) + "=" + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + "*" + str(nums[1]) + "=" + str(nums[2]))\nelse:\n    print(str(nums[0]) + "/" + str(nums[1]) + "=" + str(nums[2]))\n', '\nnums = [float(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]: print(str(nums[0]) + "+" + str(nums[1]) + "=" + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]: print(str(nums[0]) + "-" + str(nums[1]) + "=" + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]: print(str(nums[0]) + "*" + str(nums[1]) + "=" + str(nums[2]))\nelse:\n    print(str(nums[0]) + "/" + str(nums[1]) + "=" + str(nums[2]))\n']
2022-04-12 02:44:36.038426 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    nums = [int(x) for x in input().split()]\n    if nums[0] + nums[1] == nums[2]:\n        print(str(nums[0]) + \"+\" + str(nums[1]) + \"=\" + str(nums[2]))\n    elif nums[0] - nums[1] == nums[2]:\n        print(str(nums[0]) + \"-\" + str(nums[1]) + \"=\" + str(nums[2]))\n    elif nums[0] * nums[1] == nums[2]:\n        print(str(nums[0]) + \"*\" + str(nums[1]) + \"=\" + str(nums[2]))\n    else:\n        print(str(nums[0]) + \"/\" + str(nums[1]) + \"=\" + str(nums[2]))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "nums = [int(x) for x in input().split()]\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + \"+\" + str(nums[1]) + \"=\" + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + \"-\" + str(nums[1]) + \"=\" + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + \"*\" + str(nums[1]) + \"=\" + str(nums[2]))\nelse:\n    print(str(nums[0]) + \"/\" + str(nums[1]) + \"=\" + str(nums[2]))\n"
    }
  ],
  "created": 1649745866,
  "object": "edit"
}
2022-04-12 02:44:36.038526 fix syntax errors 2 ['\ndef main():\n    nums = [int(x) for x in input().split()]\n    if nums[0] + nums[1] == nums[2]:\n        print(str(nums[0]) + "+" + str(nums[1]) + "=" + str(nums[2]))\n    elif nums[0] - nums[1] == nums[2]:\n        print(str(nums[0]) + "-" + str(nums[1]) + "=" + str(nums[2]))\n    elif nums[0] * nums[1] == nums[2]:\n        print(str(nums[0]) + "*" + str(nums[1]) + "=" + str(nums[2]))\n    else:\n        print(str(nums[0]) + "/" + str(nums[1]) + "=" + str(nums[2]))\n\n\nif __name__ == \'__main__\':\n    main()\n', 'nums = [int(x) for x in input().split()]\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + "+" + str(nums[1]) + "=" + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + "-" + str(nums[1]) + "=" + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + "*" + str(nums[1]) + "=" + str(nums[2]))\nelse:\n    print(str(nums[0]) + "/" + str(nums[1]) + "=" + str(nums[2]))\n']
2022-04-12 02:44:36.038542 size on output set 4
2022-04-12 02:44:36.038548 num operations 2
2022-04-12 02:44:36.038551 size on input set 1
2022-04-12 02:44:39.480820 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nnums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] // nums[1] == nums[2]:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] == nums[1] + nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '+' + str(nums[2]))\nelif nums[0] == nums[1] - nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '-' + str(nums[2]))\nelif nums[0] == nums[1] * nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '*' + str(nums[2]))\nelif nums[0] == nums[1] // nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '/' + str(nums[2]))\n"
    },
    {
      "index": 1,
      "text": "\n\nnums = [float(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] / nums[1] == nums[2]:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] == nums[1] + nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '+' + str(nums[2]))\nelif nums[0] == nums[1] - nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '-' + str(nums[2]))\nelif nums[0] == nums[1] * nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '*' + str(nums[2]))\nelif nums[0] == nums[1] / nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '/' + str(nums[2]))\n"
    }
  ],
  "created": 1649745876,
  "object": "edit"
}
2022-04-12 02:44:39.480977 fix spelling mistakes 2 ["\n\nnums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] // nums[1] == nums[2]:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] == nums[1] + nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '+' + str(nums[2]))\nelif nums[0] == nums[1] - nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '-' + str(nums[2]))\nelif nums[0] == nums[1] * nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '*' + str(nums[2]))\nelif nums[0] == nums[1] // nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '/' + str(nums[2]))\n", "\n\nnums = [float(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] / nums[1] == nums[2]:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] == nums[1] + nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '+' + str(nums[2]))\nelif nums[0] == nums[1] - nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '-' + str(nums[2]))\nelif nums[0] == nums[1] * nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '*' + str(nums[2]))\nelif nums[0] == nums[1] / nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '/' + str(nums[2]))\n"]
2022-04-12 02:44:39.480993 size on output set 2
2022-04-12 02:44:39.480996 size on input set 2
2022-04-12 02:44:41.668365 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nnums = [float(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] / nums[1] == nums[2]:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] == nums[1] + nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '+' + str(nums[2]))\nelif nums[0] == nums[1] - nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '-' + str(nums[2]))\nelif nums[0] == nums[1] * nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '*' + str(nums[2]))\nelif nums[0] == nums[1] / nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '/' + str(nums[2]))\n"
    },
    {
      "index": 1,
      "text": "\nnums = [float(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] / nums[1] == nums[2]:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] == nums[1] + nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '+' + str(nums[2]))\nelif nums[0] == nums[1] - nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '-' + str(nums[2]))\nelif nums[0] == nums[1] * nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '*' + str(nums[2]))\nelif nums[0] == nums[1] / nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '/' + str(nums[2]))\n"
    }
  ],
  "created": 1649745879,
  "object": "edit"
}
2022-04-12 02:44:41.668480 fix syntax errors 2 ["\nnums = [float(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] / nums[1] == nums[2]:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] == nums[1] + nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '+' + str(nums[2]))\nelif nums[0] == nums[1] - nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '-' + str(nums[2]))\nelif nums[0] == nums[1] * nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '*' + str(nums[2]))\nelif nums[0] == nums[1] / nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '/' + str(nums[2]))\n", "\nnums = [float(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] / nums[1] == nums[2]:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] == nums[1] + nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '+' + str(nums[2]))\nelif nums[0] == nums[1] - nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '-' + str(nums[2]))\nelif nums[0] == nums[1] * nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '*' + str(nums[2]))\nelif nums[0] == nums[1] / nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '/' + str(nums[2]))\n"]
2022-04-12 02:44:43.807611 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nnums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] // nums[1] == nums[2]:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] == nums[1] + nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '+' + str(nums[2]))\nelif nums[0] == nums[1] - nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '-' + str(nums[2]))\nelif nums[0] == nums[1] * nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '*' + str(nums[2]))\nelif nums[0] == nums[1] // nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '/' + str(nums[2]))\n"
    },
    {
      "index": 1,
      "text": "\nnums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] // nums[1] == nums[2]:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] == nums[1] + nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '+' + str(nums[2]))\nelif nums[0] == nums[1] - nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '-' + str(nums[2]))\nelif nums[0] == nums[1] * nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '*' + str(nums[2]))\nelif nums[0] == nums[1] // nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '/' + str(nums[2]))\n"
    }
  ],
  "created": 1649745881,
  "object": "edit"
}
2022-04-12 02:44:43.807940 fix syntax errors 2 ["\nnums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] // nums[1] == nums[2]:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] == nums[1] + nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '+' + str(nums[2]))\nelif nums[0] == nums[1] - nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '-' + str(nums[2]))\nelif nums[0] == nums[1] * nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '*' + str(nums[2]))\nelif nums[0] == nums[1] // nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '/' + str(nums[2]))\n", "\nnums = [int(x) for x in input().split()]\n\nif nums[0] + nums[1] == nums[2]:\n    print(str(nums[0]) + '+' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] - nums[1] == nums[2]:\n    print(str(nums[0]) + '-' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] * nums[1] == nums[2]:\n    print(str(nums[0]) + '*' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] // nums[1] == nums[2]:\n    print(str(nums[0]) + '/' + str(nums[1]) + '=' + str(nums[2]))\nelif nums[0] == nums[1] + nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '+' + str(nums[2]))\nelif nums[0] == nums[1] - nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '-' + str(nums[2]))\nelif nums[0] == nums[1] * nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '*' + str(nums[2]))\nelif nums[0] == nums[1] // nums[2]:\n    print(str(nums[0]) + '=' + str(nums[1]) + '/' + str(nums[2]))\n"]
2022-04-12 02:44:43.808019 size on output set 2
2022-04-12 02:44:43.808042 num operations 2
2022-04-12 02:44:43.808054 size on input set 1
2022-04-12 02:44:53.534773 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\n# Read the numbers\nnums = sys.stdin.readline().split()\nnums = [int(num) for num in nums]\n\n# Compute the possible answers\nanswers = []\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            if i < 2:\n                a = eval(str(nums[0]) + [\"+\", \"-\"][i] + str(nums[1]))  # \u6c42\u548c\n            else:\n                a = eval(str(nums[0]) + [\"*\", \"/\"][i-2] + str(nums[1]))\n            if j < 2:\n                b = eval(str(a) + [\"+\", \"-\"][j] + str(nums[2]))  # \u6c42\u548c\n            else:\n                b = eval(str(a) + [\"*\", \"/\"][j-2] + str(nums[2]))\n            if k < 2:\n                c = eval(str(nums[0]) + [\"+\", \"-\"][k] + str(b))  # \u6c42\u548c\n            else:\n                c = eval(str(nums[0]) + [\"*\", \"/\"][k-2] + str(b))  # \u6c42\u548c\n            if c == nums[2]:\n                answers.append([(nums[0], nums[1]), [\"+\", \"-\"][i], (a, nums[2]), [\"+\", \"-\"][j], (nums[0], b), [\"+\", \"-\"][k]])  # \u6c42\u548c\n\n# Print the first answer\nfor answer in answers:\n    if answer[2][0] == answer[4][1] and answer[4][0] == answer[0][0]:\n        print(\"{}{}{}={}{}{}\".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[4][1]))\n        break\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\n# Read the numbers\nnums = sys.stdin.readline().split()\nnums = [int(num) for num in nums]\n\n# Compute the possible answers\nanswers = []\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            if i < 2:\n                a = eval(str(nums[0]) + [\"+\", \"-\"][i] + str(nums[1]))\n            else:\n                a = eval(str(nums[0]) + [\"*\", \"/\"][i-2] + str(nums[1]))\n            if j < 2:\n                b = eval(str(a) + [\"+\", \"-\"][j] + str(nums[2]))\n            else:\n                b = eval(str(a) + [\"*\", \"/\"][j-2] + str(nums[2]))\n            if k < 2:\n                c = eval(str(b) + [\"+\", \"-\"][k] + str(nums[3]))\n            else:\n                c = eval(str(nums[0]) + [\"*\", \"/\"][k-2] + str(b))\n            if c == nums[2]:\n                answers.append([(nums[0], nums[1]), [\"+\", \"-\"][i], (a, nums[2]), [\"+\", \"-\"][j], (nums[0], b), [\"+\", \"-\"][k]])\n\n# Print the first answer\nfor answer in answers:\n    if answer[2][0] == answer[4][1] and answer[4][0] == answer[0][0]:\n        print(\"{}{}{}={}{}{}\".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[4][1]))\n        break\n"
    }
  ],
  "created": 1649745884,
  "object": "edit"
}
2022-04-12 02:44:53.535074 fix spelling mistakes 2 ['\n\nimport sys\n\n# Read the numbers\nnums = sys.stdin.readline().split()\nnums = [int(num) for num in nums]\n\n# Compute the possible answers\nanswers = []\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            if i < 2:\n                a = eval(str(nums[0]) + ["+", "-"][i] + str(nums[1]))  # 求和\n            else:\n                a = eval(str(nums[0]) + ["*", "/"][i-2] + str(nums[1]))\n            if j < 2:\n                b = eval(str(a) + ["+", "-"][j] + str(nums[2]))  # 求和\n            else:\n                b = eval(str(a) + ["*", "/"][j-2] + str(nums[2]))\n            if k < 2:\n                c = eval(str(nums[0]) + ["+", "-"][k] + str(b))  # 求和\n            else:\n                c = eval(str(nums[0]) + ["*", "/"][k-2] + str(b))  # 求和\n            if c == nums[2]:\n                answers.append([(nums[0], nums[1]), ["+", "-"][i], (a, nums[2]), ["+", "-"][j], (nums[0], b), ["+", "-"][k]])  # 求和\n\n# Print the first answer\nfor answer in answers:\n    if answer[2][0] == answer[4][1] and answer[4][0] == answer[0][0]:\n        print("{}{}{}={}{}{}".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[4][1]))\n        break\n', '\n\nimport sys\n\n# Read the numbers\nnums = sys.stdin.readline().split()\nnums = [int(num) for num in nums]\n\n# Compute the possible answers\nanswers = []\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            if i < 2:\n                a = eval(str(nums[0]) + ["+", "-"][i] + str(nums[1]))\n            else:\n                a = eval(str(nums[0]) + ["*", "/"][i-2] + str(nums[1]))\n            if j < 2:\n                b = eval(str(a) + ["+", "-"][j] + str(nums[2]))\n            else:\n                b = eval(str(a) + ["*", "/"][j-2] + str(nums[2]))\n            if k < 2:\n                c = eval(str(b) + ["+", "-"][k] + str(nums[3]))\n            else:\n                c = eval(str(nums[0]) + ["*", "/"][k-2] + str(b))\n            if c == nums[2]:\n                answers.append([(nums[0], nums[1]), ["+", "-"][i], (a, nums[2]), ["+", "-"][j], (nums[0], b), ["+", "-"][k]])\n\n# Print the first answer\nfor answer in answers:\n    if answer[2][0] == answer[4][1] and answer[4][0] == answer[0][0]:\n        print("{}{}{}={}{}{}".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[4][1]))\n        break\n']
2022-04-12 02:44:53.535298 size on output set 2
2022-04-12 02:44:53.535325 size on input set 2
2022-04-12 02:45:03.694746 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\n# Read the numbers\nnums = sys.stdin.readline().split()\nnums = [int(num) for num in nums]\n\n# Compute the possible answers\nanswers = []\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            if i < 2:\n                a = eval(str(nums[0]) + [\"+\", \"-\"][i] + str(nums[1]))\n            else:\n                a = eval(str(nums[0]) + [\"*\", \"/\"][i-2] + str(nums[1]))\n            if j < 2:\n                b = eval(str(a) + [\"+\", \"-\"][j] + str(nums[2]))\n            else:\n                b = eval(str(a) + [\"*\", \"/\"][j-2] + str(nums[2]))\n            if k < 2:\n                c = eval(str(nums[0]) + [\"+\", \"-\"][k] + str(b))\n            else:\n                c = eval(str(nums[0]) + [\"*\", \"/\"][k-2] + str(b))  # \u6c42\u548c\n            if c == nums[2]:\n                answers.append([(nums[0], nums[1]), [\"+\", \"-\"][i], (a, nums[2]), [\"+\", \"-\"][j], (nums[0], b), [\"+\", \"-\"][k]])  # \u6c42\u548c\n\n# Print the first answer\nfor answer in answers:\n    if answer[2][0] == answer[4][1] and answer[4][0] == answer[0][0]:\n        print(\"{}{}{}={}{}{}\".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[4][1]))\n        break\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\n# Read the numbers\nnums = sys.stdin.readline().split()\nnums = [int(num) for num in nums]\n\n# Compute the possible answers\nanswers = []\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            if i < 2:\n                a = eval(str(nums[0]) + [\"+\", \"-\"][i] + str(nums[1]))  # \u6c42\u548c\n            else:\n                a = eval(str(nums[0]) + [\"*\", \"/\"][i-2] + str(nums[1]))\n            if j < 2:\n                b = eval(str(a) + [\"+\", \"-\"][j] + str(nums[2]))  # \u6c42\u548c\n            else:\n                b = eval(str(a) + [\"*\", \"/\"][j-2] + str(nums[2]))\n            if k < 2:\n                c = eval(str(b) + [\"+\", \"-\"][k] + str(nums[3]))  # \u6c42\u548c\n            else:\n                c = eval(str(b) + [\"*\", \"/\"][k-2] + str(nums[3]))  # \u6c42\u548c\n            if c == nums[2]:\n                answers.append([(nums[0], nums[1]), [\"+\", \"-\"][i], (a, nums[2]), [\"+\", \"-\"][j], (b, nums[3]), [\"+\", \"-\"][k]])  # \u6c42\u548c\n\n# Print the first answer\nfor answer in answers:\n    if answer[2][0] == answer[4][0] and answer[4][1] == answer[0][0]:\n        print(\"{}{}{}={}{}{}\".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[4][0]))\n        break\n"
    }
  ],
  "created": 1649745893,
  "object": "edit"
}
2022-04-12 02:45:03.694996 fix syntax errors 2 ['\n\nimport sys\n\n# Read the numbers\nnums = sys.stdin.readline().split()\nnums = [int(num) for num in nums]\n\n# Compute the possible answers\nanswers = []\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            if i < 2:\n                a = eval(str(nums[0]) + ["+", "-"][i] + str(nums[1]))\n            else:\n                a = eval(str(nums[0]) + ["*", "/"][i-2] + str(nums[1]))\n            if j < 2:\n                b = eval(str(a) + ["+", "-"][j] + str(nums[2]))\n            else:\n                b = eval(str(a) + ["*", "/"][j-2] + str(nums[2]))\n            if k < 2:\n                c = eval(str(nums[0]) + ["+", "-"][k] + str(b))\n            else:\n                c = eval(str(nums[0]) + ["*", "/"][k-2] + str(b))  # 求和\n            if c == nums[2]:\n                answers.append([(nums[0], nums[1]), ["+", "-"][i], (a, nums[2]), ["+", "-"][j], (nums[0], b), ["+", "-"][k]])  # 求和\n\n# Print the first answer\nfor answer in answers:\n    if answer[2][0] == answer[4][1] and answer[4][0] == answer[0][0]:\n        print("{}{}{}={}{}{}".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[4][1]))\n        break\n', '\n\nimport sys\n\n# Read the numbers\nnums = sys.stdin.readline().split()\nnums = [int(num) for num in nums]\n\n# Compute the possible answers\nanswers = []\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            if i < 2:\n                a = eval(str(nums[0]) + ["+", "-"][i] + str(nums[1]))  # 求和\n            else:\n                a = eval(str(nums[0]) + ["*", "/"][i-2] + str(nums[1]))\n            if j < 2:\n                b = eval(str(a) + ["+", "-"][j] + str(nums[2]))  # 求和\n            else:\n                b = eval(str(a) + ["*", "/"][j-2] + str(nums[2]))\n            if k < 2:\n                c = eval(str(b) + ["+", "-"][k] + str(nums[3]))  # 求和\n            else:\n                c = eval(str(b) + ["*", "/"][k-2] + str(nums[3]))  # 求和\n            if c == nums[2]:\n                answers.append([(nums[0], nums[1]), ["+", "-"][i], (a, nums[2]), ["+", "-"][j], (b, nums[3]), ["+", "-"][k]])  # 求和\n\n# Print the first answer\nfor answer in answers:\n    if answer[2][0] == answer[4][0] and answer[4][1] == answer[0][0]:\n        print("{}{}{}={}{}{}".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[4][0]))\n        break\n']
2022-04-12 02:45:08.861263 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\n# Read the numbers\nnums = sys.stdin.readline().split()\nnums = [int(num) for num in nums]\n\n# Compute the possible answers\nanswers = []\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            if i < 2:\n                a = eval(str(nums[0]) + [\"+\", \"-\"][i] + str(nums[1]))\n            else:\n                a = eval(str(nums[0]) + [\"*\", \"/\"][i-2] + str(nums[1]))\n            if j < 2:\n                b = eval(str(a) + [\"+\", \"-\"][j] + str(nums[2]))\n            else:\n                b = eval(str(a) + [\"*\", \"/\"][j-2] + str(nums[2]))\n            if k < 2:\n                c = eval(str(b) + [\"+\", \"-\"][k] + str(nums[3]))\n            else:\n                c = eval(str(b) + [\"*\", \"/\"][k-2] + str(nums[3]))\n            if c == nums[2]:\n                answers.append([(nums[0], nums[1]), [\"+\", \"-\"][i], (a, nums[2]), [\"+\", \"-\"][j], (b, nums[3]), [\"+\", \"-\"][k]])\n\n# Print the first answer\nfor answer in answers:\n    if answer[2][0] == answer[4][1] and answer[4][0] == answer[0][0]:\n        print(\"{}{}{}={}{}{}\".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[4][1]))\n        break\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\n# Read the numbers\nnums = sys.stdin.readline().split()\nnums = [int(num) for num in nums]\n\n# Compute the possible answers\nanswers = []\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            if i < 2:\n                a = eval(str(nums[0]) + [\"+\", \"-\"][i] + str(nums[1]))\n            else:\n                a = eval(str(nums[0]) + [\"*\", \"/\"][i-2] + str(nums[1]))\n            if j < 2:\n                b = eval(str(a) + [\"+\", \"-\"][j] + str(nums[2]))\n            else:\n                b = eval(str(a) + [\"*\", \"/\"][j-2] + str(nums[2]))\n            if k < 2:\n                c = eval(str(b) + [\"+\", \"-\"][k] + str(nums[3]))\n            else:\n                c = eval(str(b) + [\"*\", \"/\"][k-2] + str(nums[3]))\n            if c == nums[2]:\n                answers.append([(nums[0], nums[1]), [\"+\", \"-\"][i], (a, nums[2]), [\"+\", \"-\"][j], (b, nums[3]), [\"+\", \"-\"][k]])\n\n# Print the first answer\nfor answer in answers:\n    if answer[2][0] == answer[4][1] and answer[4][0] == answer[0][0]:\n        print(\"{}{}{}={}{}{}\".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[4][1]))\n        break\n"
    }
  ],
  "created": 1649745903,
  "object": "edit"
}
2022-04-12 02:45:08.861641 fix syntax errors 2 ['\n\nimport sys\n\n# Read the numbers\nnums = sys.stdin.readline().split()\nnums = [int(num) for num in nums]\n\n# Compute the possible answers\nanswers = []\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            if i < 2:\n                a = eval(str(nums[0]) + ["+", "-"][i] + str(nums[1]))\n            else:\n                a = eval(str(nums[0]) + ["*", "/"][i-2] + str(nums[1]))\n            if j < 2:\n                b = eval(str(a) + ["+", "-"][j] + str(nums[2]))\n            else:\n                b = eval(str(a) + ["*", "/"][j-2] + str(nums[2]))\n            if k < 2:\n                c = eval(str(b) + ["+", "-"][k] + str(nums[3]))\n            else:\n                c = eval(str(b) + ["*", "/"][k-2] + str(nums[3]))\n            if c == nums[2]:\n                answers.append([(nums[0], nums[1]), ["+", "-"][i], (a, nums[2]), ["+", "-"][j], (b, nums[3]), ["+", "-"][k]])\n\n# Print the first answer\nfor answer in answers:\n    if answer[2][0] == answer[4][1] and answer[4][0] == answer[0][0]:\n        print("{}{}{}={}{}{}".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[4][1]))\n        break\n', '\n\nimport sys\n\n# Read the numbers\nnums = sys.stdin.readline().split()\nnums = [int(num) for num in nums]\n\n# Compute the possible answers\nanswers = []\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            if i < 2:\n                a = eval(str(nums[0]) + ["+", "-"][i] + str(nums[1]))\n            else:\n                a = eval(str(nums[0]) + ["*", "/"][i-2] + str(nums[1]))\n            if j < 2:\n                b = eval(str(a) + ["+", "-"][j] + str(nums[2]))\n            else:\n                b = eval(str(a) + ["*", "/"][j-2] + str(nums[2]))\n            if k < 2:\n                c = eval(str(b) + ["+", "-"][k] + str(nums[3]))\n            else:\n                c = eval(str(b) + ["*", "/"][k-2] + str(nums[3]))\n            if c == nums[2]:\n                answers.append([(nums[0], nums[1]), ["+", "-"][i], (a, nums[2]), ["+", "-"][j], (b, nums[3]), ["+", "-"][k]])\n\n# Print the first answer\nfor answer in answers:\n    if answer[2][0] == answer[4][1] and answer[4][0] == answer[0][0]:\n        print("{}{}{}={}{}{}".format(answer[0][0], answer[1], answer[0][1], answer[2][0], answer[3], answer[4][1]))\n        break\n']
2022-04-12 02:45:08.861714 size on output set 3
2022-04-12 02:45:08.861730 num operations 2
2022-04-12 02:45:08.861736 size on input set 1
2022-04-12 02:45:11.608854 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    # get input\n    inp = input().split()\n    a = int(inp[0])\n    b = int(inp[1])\n    c = int(inp[2])\n    # check for possible operations (with gcd)\n    if c % gcd(a, b) == 0:\n        if c // gcd(a, b) == a + b:\n            print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a - b:\n            print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a * b:\n            print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a // b:\n            print(str(a) + \"/\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == b // a:\n            print(str(b) + \"/\" + str(a) + \"=\" + str(c))\n        elif c // gcd(a, b) == a // lcm(a, b):\n            print(str(a) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n        elif c // gcd(a, b) == b // lcm(a, b):\n            print(str(b) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n    # check for possible operations (without gcd)\n    elif c == a + b:\n        print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n    elif c == a - b:\n        print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n    elif c == a * b:\n        print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n    elif c == a // b:\n        print(str(a) + \"/\" + str(b) + \"=\" + str(c))\n    elif c == b // a:\n        print(str(b) + \"/\" + str(a) + \"=\" + str(c))\n    elif c == a // lcm(a, b):\n        print(str(a) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n    elif c == b // lcm(a, b):\n        print(str(b) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    # get inputs\n    inp = input().split()\n    a = int(inp[0])\n    b = int(inp[1])\n    c = int(inp[2])\n    # check for possible operations \n    if c % gcd(a, b) == 0:\n        if c // gcd(a, b) == a + b:\n            print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a - b:\n            print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a * b:\n            print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a // b:\n            print(str(a) + \"/\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == b // a:\n            print(str(b) + \"/\" + str(a) + \"=\" + str(c))\n        elif c // gcd(a, b) == a // lcm(a, b):\n            print(str(a) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n        elif c // gcd(a, b) == b // lcm(a, b):\n            print(str(b) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n    elif c == a + b:\n        print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n    elif c == a - b:\n        print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n    elif c == a * b:\n        print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n    elif c == a // b:\n        print(str(a) + \"/\" + str(b) + \"=\" + str(c))\n    elif c == b // a:\n        print(str(b) + \"/\" + str(a) + \"=\" + str(c))\n    elif c == a // lcm(a, b):\n        print(str(a) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n    elif c == b // lcm(a, b):\n        print(str(b) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649745909,
  "object": "edit"
}
2022-04-12 02:45:11.609066 fix spelling mistakes 2 ['\n\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    # get input\n    inp = input().split()\n    a = int(inp[0])\n    b = int(inp[1])\n    c = int(inp[2])\n    # check for possible operations (with gcd)\n    if c % gcd(a, b) == 0:\n        if c // gcd(a, b) == a + b:\n            print(str(a) + "+" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a - b:\n            print(str(a) + "-" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a * b:\n            print(str(a) + "*" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a // b:\n            print(str(a) + "/" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == b // a:\n            print(str(b) + "/" + str(a) + "=" + str(c))\n        elif c // gcd(a, b) == a // lcm(a, b):\n            print(str(a) + "/" + str(lcm(a, b)) + "=" + str(c))\n        elif c // gcd(a, b) == b // lcm(a, b):\n            print(str(b) + "/" + str(lcm(a, b)) + "=" + str(c))\n    # check for possible operations (without gcd)\n    elif c == a + b:\n        print(str(a) + "+" + str(b) + "=" + str(c))\n    elif c == a - b:\n        print(str(a) + "-" + str(b) + "=" + str(c))\n    elif c == a * b:\n        print(str(a) + "*" + str(b) + "=" + str(c))\n    elif c == a // b:\n        print(str(a) + "/" + str(b) + "=" + str(c))\n    elif c == b // a:\n        print(str(b) + "/" + str(a) + "=" + str(c))\n    elif c == a // lcm(a, b):\n        print(str(a) + "/" + str(lcm(a, b)) + "=" + str(c))\n    elif c == b // lcm(a, b):\n        print(str(b) + "/" + str(lcm(a, b)) + "=" + str(c))\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    # get inputs\n    inp = input().split()\n    a = int(inp[0])\n    b = int(inp[1])\n    c = int(inp[2])\n    # check for possible operations \n    if c % gcd(a, b) == 0:\n        if c // gcd(a, b) == a + b:\n            print(str(a) + "+" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a - b:\n            print(str(a) + "-" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a * b:\n            print(str(a) + "*" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a // b:\n            print(str(a) + "/" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == b // a:\n            print(str(b) + "/" + str(a) + "=" + str(c))\n        elif c // gcd(a, b) == a // lcm(a, b):\n            print(str(a) + "/" + str(lcm(a, b)) + "=" + str(c))\n        elif c // gcd(a, b) == b // lcm(a, b):\n            print(str(b) + "/" + str(lcm(a, b)) + "=" + str(c))\n    elif c == a + b:\n        print(str(a) + "+" + str(b) + "=" + str(c))\n    elif c == a - b:\n        print(str(a) + "-" + str(b) + "=" + str(c))\n    elif c == a * b:\n        print(str(a) + "*" + str(b) + "=" + str(c))\n    elif c == a // b:\n        print(str(a) + "/" + str(b) + "=" + str(c))\n    elif c == b // a:\n        print(str(b) + "/" + str(a) + "=" + str(c))\n    elif c == a // lcm(a, b):\n        print(str(a) + "/" + str(lcm(a, b)) + "=" + str(c))\n    elif c == b // lcm(a, b):\n        print(str(b) + "/" + str(lcm(a, b)) + "=" + str(c))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 02:45:11.609114 size on output set 2
2022-04-12 02:45:11.609122 size on input set 2
2022-04-12 02:45:25.065371 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    # get inputs\n    inp = input().split()\n    a = int(inp[0])\n    b = int(inp[1])\n    c = int(inp[2])\n    # check for possible operations \n    if c % gcd(a, b) == 0: # check for division\n        if c // gcd(a, b) == a + b: # check for addition\n            print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a - b: # check for subtraction\n            print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a * b: # check for multiplication\n            print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a // b: # check for division\n            print(str(a) + \"/\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == b // a: # check for division\n            print(str(b) + \"/\" + str(a) + \"=\" + str(c))\n        elif c // gcd(a, b) == a // lcm(a, b): # check for division\n            print(str(a) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n        elif c // gcd(a, b) == b // lcm(a, b): # check for division\n            print(str(b) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n    elif c == a + b: # check for addition\n        print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n    elif c == a - b: # check for subtraction\n        print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n    elif c == a * b: # check for multiplication\n        print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n    elif c == a // b: # check for division\n        print(str(a) + \"/\" + str(b) + \"=\" + str(c))\n    elif c == b // a: # check for division\n        print(str(b) + \"/\" + str(a) + \"=\" + str(c))\n    elif c == a // lcm(a, b): # check for division\n        print(str(a) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n    elif c == b // lcm(a, b): # check for division\n        print(str(b) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    # get inputs\n    inp = input().split()\n    a = int(inp[0])\n    b = int(inp[1])\n    c = int(inp[2])\n    # check for possible operations \n    if c % gcd(a, b) == 0:\n        if c // gcd(a, b) == a + b:\n            print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a - b:\n            print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a * b:\n            print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a // b:\n            print(str(a) + \"/\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == b // a:\n            print(str(b) + \"/\" + str(a) + \"=\" + str(c))\n        elif c // gcd(a, b) == a // lcm(a, b):\n            print(str(a) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n        elif c // gcd(a, b) == b // lcm(a, b):\n            print(str(b) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n    elif c == a + b:\n        print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n    elif c == a - b:\n        print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n    elif c == a * b:\n        print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n    elif c == a // b:\n        print(str(a) + \"/\" + str(b) + \"=\" + str(c))\n    elif c == b // a:\n        print(str(b) + \"/\" + str(a) + \"=\" + str(c))\n    elif c == a // lcm(a, b):\n        print(str(a) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n    elif c == b // lcm(a, b):\n        print(str(b) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649745911,
  "object": "edit"
}
2022-04-12 02:45:25.065532 fix syntax errors 2 ['\n\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    # get inputs\n    inp = input().split()\n    a = int(inp[0])\n    b = int(inp[1])\n    c = int(inp[2])\n    # check for possible operations \n    if c % gcd(a, b) == 0: # check for division\n        if c // gcd(a, b) == a + b: # check for addition\n            print(str(a) + "+" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a - b: # check for subtraction\n            print(str(a) + "-" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a * b: # check for multiplication\n            print(str(a) + "*" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a // b: # check for division\n            print(str(a) + "/" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == b // a: # check for division\n            print(str(b) + "/" + str(a) + "=" + str(c))\n        elif c // gcd(a, b) == a // lcm(a, b): # check for division\n            print(str(a) + "/" + str(lcm(a, b)) + "=" + str(c))\n        elif c // gcd(a, b) == b // lcm(a, b): # check for division\n            print(str(b) + "/" + str(lcm(a, b)) + "=" + str(c))\n    elif c == a + b: # check for addition\n        print(str(a) + "+" + str(b) + "=" + str(c))\n    elif c == a - b: # check for subtraction\n        print(str(a) + "-" + str(b) + "=" + str(c))\n    elif c == a * b: # check for multiplication\n        print(str(a) + "*" + str(b) + "=" + str(c))\n    elif c == a // b: # check for division\n        print(str(a) + "/" + str(b) + "=" + str(c))\n    elif c == b // a: # check for division\n        print(str(b) + "/" + str(a) + "=" + str(c))\n    elif c == a // lcm(a, b): # check for division\n        print(str(a) + "/" + str(lcm(a, b)) + "=" + str(c))\n    elif c == b // lcm(a, b): # check for division\n        print(str(b) + "/" + str(lcm(a, b)) + "=" + str(c))\n\nif __name__ == "__main__":\n    main()\n', '\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef main():\n    # get inputs\n    inp = input().split()\n    a = int(inp[0])\n    b = int(inp[1])\n    c = int(inp[2])\n    # check for possible operations \n    if c % gcd(a, b) == 0:\n        if c // gcd(a, b) == a + b:\n            print(str(a) + "+" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a - b:\n            print(str(a) + "-" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a * b:\n            print(str(a) + "*" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a // b:\n            print(str(a) + "/" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == b // a:\n            print(str(b) + "/" + str(a) + "=" + str(c))\n        elif c // gcd(a, b) == a // lcm(a, b):\n            print(str(a) + "/" + str(lcm(a, b)) + "=" + str(c))\n        elif c // gcd(a, b) == b // lcm(a, b):\n            print(str(b) + "/" + str(lcm(a, b)) + "=" + str(c))\n    elif c == a + b:\n        print(str(a) + "+" + str(b) + "=" + str(c))\n    elif c == a - b:\n        print(str(a) + "-" + str(b) + "=" + str(c))\n    elif c == a * b:\n        print(str(a) + "*" + str(b) + "=" + str(c))\n    elif c == a // b:\n        print(str(a) + "/" + str(b) + "=" + str(c))\n    elif c == b // a:\n        print(str(b) + "/" + str(a) + "=" + str(c))\n    elif c == a // lcm(a, b):\n        print(str(a) + "/" + str(lcm(a, b)) + "=" + str(c))\n    elif c == b // lcm(a, b):\n        print(str(b) + "/" + str(lcm(a, b)) + "=" + str(c))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 02:45:35.611382 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b / gcd(a, b)\n\ndef main():\n    # get input\n    inp = input().split()\n    a = int(inp[0])\n    b = int(inp[1])\n    c = int(inp[2])\n    # check for possible operations (with gcd)\n    if c % gcd(a, b) == 0:\n        if c / gcd(a, b) == a + b:\n            print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n        elif c / gcd(a, b) == a - b:\n            print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n        elif c / gcd(a, b) == a * b:\n            print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n        elif c / gcd(a, b) == a / b:\n            print(str(a) + \"/\" + str(b) + \"=\" + str(c))\n        elif c / gcd(a, b) == b / a:\n            print(str(b) + \"/\" + str(a) + \"=\" + str(c))\n        elif c / gcd(a, b) == a / lcm(a, b):\n            print(str(a) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n        elif c / gcd(a, b) == b / lcm(a, b):\n            print(str(b) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n    # check for possible operations (without gcd)\n    elif c == a + b:\n        print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n    elif c == a - b:\n        print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n    elif c == a * b:\n        print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n    elif c == a // b:\n        print(str(a) + \"/\" + str(b) + \"=\" + str(c))\n    elif c == b // a:\n        print(str(b) + \"/\" + str(a) + \"=\" + str(c))\n    elif c == a // lcm(a, b):\n        print(str(a) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n    elif c == b // lcm(a, b):\n        print(str(b) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\ndef main():\n    # get input\n    inp = input().split()\n    a = int(inp[0])\n    b = int(inp[1])\n    c = int(inp[2])\n    # check for possible operations (with gcd)\n    if c % gcd(a, b) == 0:\n        if c // gcd(a, b) == a + b:\n            print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a - b:\n            print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a * b:\n            print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == a // b:\n            print(str(a) + \"/\" + str(b) + \"=\" + str(c))\n        elif c // gcd(a, b) == b // a:\n            print(str(b) + \"/\" + str(a) + \"=\" + str(c))\n        elif c // gcd(a, b) == a // lcm(a, b):\n            print(str(a) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n        elif c // gcd(a, b) == b // lcm(a, b):\n            print(str(b) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n    # check for possible operations (without gcd)\n    elif c == a + b:\n        print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n    elif c == a - b:\n        print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n    elif c == a * b:\n        print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n    elif c == a // b:\n        print(str(a) + \"/\" + str(b) + \"=\" + str(c))\n    elif c == b // a:\n        print(str(b) + \"/\" + str(a) + \"=\" + str(c))\n    elif c == a // lcm(a, b):\n        print(str(a) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\n    elif c == b // lcm(a, b):\n        print(str(b) + \"/\" + str(lcm(a, b)) + \"=\" + str(c))\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649745925,
  "object": "edit"
}
2022-04-12 02:45:35.611936 fix syntax errors 2 ['\n\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b / gcd(a, b)\n\ndef main():\n    # get input\n    inp = input().split()\n    a = int(inp[0])\n    b = int(inp[1])\n    c = int(inp[2])\n    # check for possible operations (with gcd)\n    if c % gcd(a, b) == 0:\n        if c / gcd(a, b) == a + b:\n            print(str(a) + "+" + str(b) + "=" + str(c))\n        elif c / gcd(a, b) == a - b:\n            print(str(a) + "-" + str(b) + "=" + str(c))\n        elif c / gcd(a, b) == a * b:\n            print(str(a) + "*" + str(b) + "=" + str(c))\n        elif c / gcd(a, b) == a / b:\n            print(str(a) + "/" + str(b) + "=" + str(c))\n        elif c / gcd(a, b) == b / a:\n            print(str(b) + "/" + str(a) + "=" + str(c))\n        elif c / gcd(a, b) == a / lcm(a, b):\n            print(str(a) + "/" + str(lcm(a, b)) + "=" + str(c))\n        elif c / gcd(a, b) == b / lcm(a, b):\n            print(str(b) + "/" + str(lcm(a, b)) + "=" + str(c))\n    # check for possible operations (without gcd)\n    elif c == a + b:\n        print(str(a) + "+" + str(b) + "=" + str(c))\n    elif c == a - b:\n        print(str(a) + "-" + str(b) + "=" + str(c))\n    elif c == a * b:\n        print(str(a) + "*" + str(b) + "=" + str(c))\n    elif c == a // b:\n        print(str(a) + "/" + str(b) + "=" + str(c))\n    elif c == b // a:\n        print(str(b) + "/" + str(a) + "=" + str(c))\n    elif c == a // lcm(a, b):\n        print(str(a) + "/" + str(lcm(a, b)) + "=" + str(c))\n    elif c == b // lcm(a, b):\n        print(str(b) + "/" + str(lcm(a, b)) + "=" + str(c))\n\nif __name__ == "__main__":\n    main()\n', '\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\ndef main():\n    # get input\n    inp = input().split()\n    a = int(inp[0])\n    b = int(inp[1])\n    c = int(inp[2])\n    # check for possible operations (with gcd)\n    if c % gcd(a, b) == 0:\n        if c // gcd(a, b) == a + b:\n            print(str(a) + "+" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a - b:\n            print(str(a) + "-" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a * b:\n            print(str(a) + "*" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == a // b:\n            print(str(a) + "/" + str(b) + "=" + str(c))\n        elif c // gcd(a, b) == b // a:\n            print(str(b) + "/" + str(a) + "=" + str(c))\n        elif c // gcd(a, b) == a // lcm(a, b):\n            print(str(a) + "/" + str(lcm(a, b)) + "=" + str(c))\n        elif c // gcd(a, b) == b // lcm(a, b):\n            print(str(b) + "/" + str(lcm(a, b)) + "=" + str(c))\n    # check for possible operations (without gcd)\n    elif c == a + b:\n        print(str(a) + "+" + str(b) + "=" + str(c))\n    elif c == a - b:\n        print(str(a) + "-" + str(b) + "=" + str(c))\n    elif c == a * b:\n        print(str(a) + "*" + str(b) + "=" + str(c))\n    elif c == a // b:\n        print(str(a) + "/" + str(b) + "=" + str(c))\n    elif c == b // a:\n        print(str(b) + "/" + str(a) + "=" + str(c))\n    elif c == a // lcm(a, b):\n        print(str(a) + "/" + str(lcm(a, b)) + "=" + str(c))\n    elif c == b // lcm(a, b):\n        print(str(b) + "/" + str(lcm(a, b)) + "=" + str(c))\nif __name__ == "__main__":\n    main()\n']
2022-04-12 02:45:35.611976 size on output set 4
2022-04-12 02:45:35.611995 num operations 2
2022-04-12 02:45:35.612000 size on input set 1
2022-04-12 02:45:38.748450 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n\tnums = sys.stdin.readline().split()\n\ta = int(nums[0])\n\tb = int(nums[1])\n\tc = int(nums[2])\n\n\tif a + b == c:\n\t\tprint(str(a) + \"+\" + str(b) + \"=\" + str(c))\n\telif a - b == c:\n\t\tprint(str(a) + \"-\" + str(b) + \"=\" + str(c))\n\telif a * b == c:\n\t\tprint(str(a) + \"*\" + str(b) + \"=\" + str(c))\n\telif a == b + c:\n\t\tprint(str(a) + \"=\" + str(b) + \"+\" + str(c))\n\telif a == b - c:\n\t\tprint(str(a) + \"=\" + str(b) + \"-\" + str(c))\n\telif a == b * c:\n\t\tprint(str(a) + \"=\" + str(b) + \"*\" + str(c))\n\telif a == b // c:\n\t\tprint(str(a) + \"=\" + str(b) + \"/\" + str(c))\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n\tnums = sys.stdin.readline().split()\n\ta = int(nums[0])\n\tb = int(nums[1])\n\tc = int(nums[2])\n\n\tif a + b == c:\n\t\tprint(str(a) + \"+\" + str(b) + \"=\" + str(c))\n\telif a - b == c:\n\t\tprint(str(a) + \"-\" + str(b) + \"=\" + str(c))\n\telif a * b == c:\n\t\tprint(str(a) + \"*\" + str(b) + \"=\" + str(c))\n\telif a == b + c:\n\t\tprint(str(a) + \"=\" + str(b) + \"+\" + str(c))\n\telif a == b - c:\n\t\tprint(str(a) + \"=\" + str(b) + \"-\" + str(c))\n\telif a == b * c:\n\t\tprint(str(a) + \"=\" + str(b) + \"*\" + str(c))\n\telif a == b // c:\n\t\tprint(str(a) + \"=\" + str(b) + \"//\" + str(c))\n\nif __name__ == '__main__':\n\tmain()\n"
    }
  ],
  "created": 1649745935,
  "object": "edit"
}
2022-04-12 02:45:38.748747 fix spelling mistakes 2 ['\n\nimport sys\n\ndef main():\n\tnums = sys.stdin.readline().split()\n\ta = int(nums[0])\n\tb = int(nums[1])\n\tc = int(nums[2])\n\n\tif a + b == c:\n\t\tprint(str(a) + "+" + str(b) + "=" + str(c))\n\telif a - b == c:\n\t\tprint(str(a) + "-" + str(b) + "=" + str(c))\n\telif a * b == c:\n\t\tprint(str(a) + "*" + str(b) + "=" + str(c))\n\telif a == b + c:\n\t\tprint(str(a) + "=" + str(b) + "+" + str(c))\n\telif a == b - c:\n\t\tprint(str(a) + "=" + str(b) + "-" + str(c))\n\telif a == b * c:\n\t\tprint(str(a) + "=" + str(b) + "*" + str(c))\n\telif a == b // c:\n\t\tprint(str(a) + "=" + str(b) + "/" + str(c))\n\nif __name__ == \'__main__\':\n\tmain()\n', '\n\nimport sys\n\ndef main():\n\tnums = sys.stdin.readline().split()\n\ta = int(nums[0])\n\tb = int(nums[1])\n\tc = int(nums[2])\n\n\tif a + b == c:\n\t\tprint(str(a) + "+" + str(b) + "=" + str(c))\n\telif a - b == c:\n\t\tprint(str(a) + "-" + str(b) + "=" + str(c))\n\telif a * b == c:\n\t\tprint(str(a) + "*" + str(b) + "=" + str(c))\n\telif a == b + c:\n\t\tprint(str(a) + "=" + str(b) + "+" + str(c))\n\telif a == b - c:\n\t\tprint(str(a) + "=" + str(b) + "-" + str(c))\n\telif a == b * c:\n\t\tprint(str(a) + "=" + str(b) + "*" + str(c))\n\telif a == b // c:\n\t\tprint(str(a) + "=" + str(b) + "//" + str(c))\n\nif __name__ == \'__main__\':\n\tmain()\n']
2022-04-12 02:45:38.748794 size on output set 2
2022-04-12 02:45:38.748807 size on input set 2
2022-04-12 02:45:41.916763 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n\tnums = sys.stdin.readline().split()\n\ta = int(nums[0])\n\tb = int(nums[1])\n\tc = int(nums[2])\n\n\tif a + b == c:\n\t\tprint(str(a) + \"+\" + str(b) + \"=\" + str(c))\n\telif a - b == c:\n\t\tprint(str(a) + \"-\" + str(b) + \"=\" + str(c))\n\telif a * b == c:\n\t\tprint(str(a) + \"*\" + str(b) + \"=\" + str(c))\n\telif a == b + c:\n\t\tprint(str(a) + \"=\" + str(b) + \"+\" + str(c))\n\telif a == b - c:\n\t\tprint(str(a) + \"=\" + str(b) + \"-\" + str(c))\n\telif a == b * c:\n\t\tprint(str(a) + \"=\" + str(b) + \"*\" + str(c))\n\telif a == b / c:\n\t\tprint(str(a) + \"=\" + str(b) + \"/\" + str(c))\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n\tnums = sys.stdin.readline().split()\n\ta = int(nums[0])\n\tb = int(nums[1])\n\tc = int(nums[2])\n\n\tif a + b == c:\n\t\tprint(str(a) + \"+\" + str(b) + \"=\" + str(c))\n\telif a - b == c:\n\t\tprint(str(a) + \"-\" + str(b) + \"=\" + str(c))\n\telif a * b == c:\n\t\tprint(str(a) + \"*\" + str(b) + \"=\" + str(c))\n\telif a == b + c:\n\t\tprint(str(a) + \"=\" + str(b) + \"+\" + str(c))\n\telif a == b - c:\n\t\tprint(str(a) + \"=\" + str(b) + \"-\" + str(c))\n\telif a == b * c:\n\t\tprint(str(a) + \"=\" + str(b) + \"*\" + str(c))\n\telif a == b / c:\n\t\tprint(str(a) + \"=\" + str(b) + \"/\" + str(c))\n\nif __name__ == '__main__':\n\tmain()\n"
    }
  ],
  "created": 1649745938,
  "object": "edit"
}
2022-04-12 02:45:41.916867 fix syntax errors 2 ['\n\nimport sys\n\ndef main():\n\tnums = sys.stdin.readline().split()\n\ta = int(nums[0])\n\tb = int(nums[1])\n\tc = int(nums[2])\n\n\tif a + b == c:\n\t\tprint(str(a) + "+" + str(b) + "=" + str(c))\n\telif a - b == c:\n\t\tprint(str(a) + "-" + str(b) + "=" + str(c))\n\telif a * b == c:\n\t\tprint(str(a) + "*" + str(b) + "=" + str(c))\n\telif a == b + c:\n\t\tprint(str(a) + "=" + str(b) + "+" + str(c))\n\telif a == b - c:\n\t\tprint(str(a) + "=" + str(b) + "-" + str(c))\n\telif a == b * c:\n\t\tprint(str(a) + "=" + str(b) + "*" + str(c))\n\telif a == b / c:\n\t\tprint(str(a) + "=" + str(b) + "/" + str(c))\n\nif __name__ == \'__main__\':\n\tmain()\n', '\n\nimport sys\n\ndef main():\n\tnums = sys.stdin.readline().split()\n\ta = int(nums[0])\n\tb = int(nums[1])\n\tc = int(nums[2])\n\n\tif a + b == c:\n\t\tprint(str(a) + "+" + str(b) + "=" + str(c))\n\telif a - b == c:\n\t\tprint(str(a) + "-" + str(b) + "=" + str(c))\n\telif a * b == c:\n\t\tprint(str(a) + "*" + str(b) + "=" + str(c))\n\telif a == b + c:\n\t\tprint(str(a) + "=" + str(b) + "+" + str(c))\n\telif a == b - c:\n\t\tprint(str(a) + "=" + str(b) + "-" + str(c))\n\telif a == b * c:\n\t\tprint(str(a) + "=" + str(b) + "*" + str(c))\n\telif a == b / c:\n\t\tprint(str(a) + "=" + str(b) + "/" + str(c))\n\nif __name__ == \'__main__\':\n\tmain()\n']
2022-04-12 02:45:54.438729 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n\tnums = sys.stdin.readline().split()\n\ta = int(nums[0])\n\tb = int(nums[1])\n\tc = int(nums[2])\n\n\tif a + b == c:\n\t\tprint(str(a) + \"+\" + str(b) + \"=\" + str(c))\n\telif a - b == c:\n\t\tprint(str(a) + \"-\" + str(b) + \"=\" + str(c))\n\telif a * b == c:\n\t\tprint(str(a) + \"*\" + str(b) + \"=\" + str(c))\n\telif a == b + c:\n\t\tprint(str(a) + \"=\" + str(b) + \"+\" + str(c))\n\telif a == b - c:\n\t\tprint(str(a) + \"=\" + str(b) + \"-\" + str(c))\n\telif a == b * c:\n\t\tprint(str(a) + \"=\" + str(b) + \"*\" + str(c))\n\telif a == b / c:\n\t\tprint(str(a) + \"=\" + str(b) + \"/\" + str(c))\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\n\nimport sys\n\ndef main():\n    nums = sys.stdin.readline().split()\n    a = int(nums[0])\n    b = int(nums[1])\n    c = int(nums[2])\n\n    if a + b == c:\n        print(str(a) + \"+\" + str(b) + \"=\" + str(c))\n    elif a - b == c:\n        print(str(a) + \"-\" + str(b) + \"=\" + str(c))\n    elif a * b == c:\n        print(str(a) + \"*\" + str(b) + \"=\" + str(c))\n    elif a == b + c:\n        print(str(a) + \"=\" + str(b) + \"+\" + str(c))\n    elif a == b - c:\n        print(str(a) + \"=\" + str(b) + \"-\" + str(c))\n    elif a == b * c:\n        print(str(a) + \"=\" + str(b) + \"*\" + str(c))\n    elif a == b // c:\n        print(str(a) + \"=\" + str(b) + \"/\" + str(c))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649745942,
  "object": "edit"
}
2022-04-12 02:45:54.438860 fix syntax errors 2 ['\n\nimport sys\n\ndef main():\n\tnums = sys.stdin.readline().split()\n\ta = int(nums[0])\n\tb = int(nums[1])\n\tc = int(nums[2])\n\n\tif a + b == c:\n\t\tprint(str(a) + "+" + str(b) + "=" + str(c))\n\telif a - b == c:\n\t\tprint(str(a) + "-" + str(b) + "=" + str(c))\n\telif a * b == c:\n\t\tprint(str(a) + "*" + str(b) + "=" + str(c))\n\telif a == b + c:\n\t\tprint(str(a) + "=" + str(b) + "+" + str(c))\n\telif a == b - c:\n\t\tprint(str(a) + "=" + str(b) + "-" + str(c))\n\telif a == b * c:\n\t\tprint(str(a) + "=" + str(b) + "*" + str(c))\n\telif a == b / c:\n\t\tprint(str(a) + "=" + str(b) + "/" + str(c))\n\nif __name__ == \'__main__\':\n\tmain()\n', '#!/usr/bin/env python3\n\n\nimport sys\n\ndef main():\n    nums = sys.stdin.readline().split()\n    a = int(nums[0])\n    b = int(nums[1])\n    c = int(nums[2])\n\n    if a + b == c:\n        print(str(a) + "+" + str(b) + "=" + str(c))\n    elif a - b == c:\n        print(str(a) + "-" + str(b) + "=" + str(c))\n    elif a * b == c:\n        print(str(a) + "*" + str(b) + "=" + str(c))\n    elif a == b + c:\n        print(str(a) + "=" + str(b) + "+" + str(c))\n    elif a == b - c:\n        print(str(a) + "=" + str(b) + "-" + str(c))\n    elif a == b * c:\n        print(str(a) + "=" + str(b) + "*" + str(c))\n    elif a == b // c:\n        print(str(a) + "=" + str(b) + "/" + str(c))\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-12 02:45:54.438978 size on output set 2
2022-04-12 02:45:54.438995 num operations 2
2022-04-12 02:45:54.438999 size on input set 1
2022-04-12 02:45:56.517606 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef Solve(a, b, c):\n    if a + b == c:\n        return '%d+%d=%d' % (a, b, c)\n    if a - b == c:\n        return '%d-%d=%d' % (a, b, c)\n    if a * b == c:\n        return '%d*%d=%d' % (a, b, c)\n    if a == b * c:\n        return '%d=%d*%d' % (a, b, c)\n    if a == b / c:\n        return '%d=%d/%d' % (a, b, c)\n    if a / b == c:\n        return '%d/%d=%d' % (a, b, c)\n\ndef main():\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    print(Solve(a, b, c))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/python\n\nimport sys\n\ndef Solve(a, b, c):\n    if a + b == c:\n        return '%d+%d=%d' % (a, b, c)\n    if a - b == c:\n        return '%d-%d=%d' % (a, b, c)\n    if a * b == c:\n        return '%d*%d=%d' % (a, b, c)\n    if a == b * c:\n        return '%d=%d*%d' % (a, b, c)\n    if a == b / c:\n        return '%d=%d/%d' % (a, b, c)\n    if a / b == c:\n        return '%d/%d=%d' % (a, b, c)\n\ndef main():\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    print(Solve(a, b, c))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649745954,
  "object": "edit"
}
2022-04-12 02:45:56.517751 fix spelling mistakes 2 ["\nimport sys\n\ndef Solve(a, b, c):\n    if a + b == c:\n        return '%d+%d=%d' % (a, b, c)\n    if a - b == c:\n        return '%d-%d=%d' % (a, b, c)\n    if a * b == c:\n        return '%d*%d=%d' % (a, b, c)\n    if a == b * c:\n        return '%d=%d*%d' % (a, b, c)\n    if a == b / c:\n        return '%d=%d/%d' % (a, b, c)\n    if a / b == c:\n        return '%d/%d=%d' % (a, b, c)\n\ndef main():\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    print(Solve(a, b, c))\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/python\n\nimport sys\n\ndef Solve(a, b, c):\n    if a + b == c:\n        return '%d+%d=%d' % (a, b, c)\n    if a - b == c:\n        return '%d-%d=%d' % (a, b, c)\n    if a * b == c:\n        return '%d*%d=%d' % (a, b, c)\n    if a == b * c:\n        return '%d=%d*%d' % (a, b, c)\n    if a == b / c:\n        return '%d=%d/%d' % (a, b, c)\n    if a / b == c:\n        return '%d/%d=%d' % (a, b, c)\n\ndef main():\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    print(Solve(a, b, c))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 02:45:56.517777 size on output set 2
2022-04-12 02:45:56.517783 size on input set 2
2022-04-12 02:45:59.288663 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef Solve(a, b, c):\n    if a + b == c:\n        return '%d+%d=%d' % (a, b, c)\n    if a - b == c:\n        return '%d-%d=%d' % (a, b, c)\n    if a * b == c:\n        return '%d*%d=%d' % (a, b, c)\n    if a == b * c:\n        return '%d=%d*%d' % (a, b, c)\n    if a == b // c:\n        return '%d=%d/%d' % (a, b, c)\n    if a // b == c:\n        return '%d/%d=%d' % (a, b, c)\n\ndef main():\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    print(Solve(a, b, c))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef Solve(a, b, c):\n    if a + b == c:\n        return '%d+%d=%d' % (a, b, c)\n    if a - b == c:\n        return '%d-%d=%d' % (a, b, c)\n    if a * b == c:\n        return '%d*%d=%d' % (a, b, c)\n    if a == b * c:\n        return '%d=%d*%d' % (a, b, c)\n    if a == b // c:\n        return '%d=%d/%d' % (a, b, c)\n    if a // b == c:\n        return '%d/%d=%d' % (a, b, c)\n\ndef main():\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    print(Solve(a, b, c))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649745956,
  "object": "edit"
}
2022-04-12 02:45:59.288812 fix syntax errors 2 ["\nimport sys\n\ndef Solve(a, b, c):\n    if a + b == c:\n        return '%d+%d=%d' % (a, b, c)\n    if a - b == c:\n        return '%d-%d=%d' % (a, b, c)\n    if a * b == c:\n        return '%d*%d=%d' % (a, b, c)\n    if a == b * c:\n        return '%d=%d*%d' % (a, b, c)\n    if a == b // c:\n        return '%d=%d/%d' % (a, b, c)\n    if a // b == c:\n        return '%d/%d=%d' % (a, b, c)\n\ndef main():\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    print(Solve(a, b, c))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef Solve(a, b, c):\n    if a + b == c:\n        return '%d+%d=%d' % (a, b, c)\n    if a - b == c:\n        return '%d-%d=%d' % (a, b, c)\n    if a * b == c:\n        return '%d*%d=%d' % (a, b, c)\n    if a == b * c:\n        return '%d=%d*%d' % (a, b, c)\n    if a == b // c:\n        return '%d=%d/%d' % (a, b, c)\n    if a // b == c:\n        return '%d/%d=%d' % (a, b, c)\n\ndef main():\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    print(Solve(a, b, c))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 02:46:02.130808 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/python\n\nimport sys\n\ndef Solve(a, b, c):\n    if a + b == c:\n        return '%d+%d=%d' % (a, b, c)\n    if a - b == c:\n        return '%d-%d=%d' % (a, b, c)\n    if a * b == c:\n        return '%d*%d=%d' % (a, b, c)\n    if a == b * c:\n        return '%d=%d*%d' % (a, b, c)\n    if a == b // c:\n        return '%d=%d/%d' % (a, b, c)\n    if a // b == c:\n        return '%d/%d=%d' % (a, b, c)\n\ndef main():\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    print(Solve(a, b, c))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/python\n\nimport sys\n\ndef Solve(a, b, c):\n    if a + b == c:\n        return '%d+%d=%d' % (a, b, c)\n    if a - b == c:\n        return '%d-%d=%d' % (a, b, c)\n    if a * b == c:\n        return '%d*%d=%d' % (a, b, c)\n    if a == b * c:\n        return '%d=%d*%d' % (a, b, c)\n    if a == b / float(c):\n        return '%d=%d/%d' % (a, b, c)\n    if a / float(b) == c:\n        return '%d/%d=%d' % (a, b, c)\n\ndef main():\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    print(Solve(a, b, c))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649745959,
  "object": "edit"
}
2022-04-12 02:46:02.131188 fix syntax errors 2 ["#!/usr/bin/python\n\nimport sys\n\ndef Solve(a, b, c):\n    if a + b == c:\n        return '%d+%d=%d' % (a, b, c)\n    if a - b == c:\n        return '%d-%d=%d' % (a, b, c)\n    if a * b == c:\n        return '%d*%d=%d' % (a, b, c)\n    if a == b * c:\n        return '%d=%d*%d' % (a, b, c)\n    if a == b // c:\n        return '%d=%d/%d' % (a, b, c)\n    if a // b == c:\n        return '%d/%d=%d' % (a, b, c)\n\ndef main():\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    print(Solve(a, b, c))\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/python\n\nimport sys\n\ndef Solve(a, b, c):\n    if a + b == c:\n        return '%d+%d=%d' % (a, b, c)\n    if a - b == c:\n        return '%d-%d=%d' % (a, b, c)\n    if a * b == c:\n        return '%d*%d=%d' % (a, b, c)\n    if a == b * c:\n        return '%d=%d*%d' % (a, b, c)\n    if a == b / float(c):\n        return '%d=%d/%d' % (a, b, c)\n    if a / float(b) == c:\n        return '%d/%d=%d' % (a, b, c)\n\ndef main():\n    a, b, c = map(int, sys.stdin.readline().strip().split())\n    print(Solve(a, b, c))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 02:46:02.131508 size on output set 3
