["from bisect import bisect_right\n\n\nN = int(input())\n\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nC = list(map(int, input().split()))\n\nA.sort()\nB.sort()\nC.sort()\n\nans = 0\n\nfor i in range(N):\n    a = bisect_right(B, A[i] + 1)\n    c = bisect_right(C, B[a - 1] + 1)\n    ans += a * c\n\nprint(ans)\n", "from bisect import bisect_left\n\nN = int(input())\n\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nC = list(map(int, input().split()))\n\nA.sort()\nB.sort()\nC.sort()\n\nans = 0\n\nfor i in range(N):\n    a = bisect_left(B, A[i] + 1)\n    c = bisect_left(C, B[i] + 1)\n    ans += a * c\n\nprint(ans)\n", "from bisect import bisect_left, bisect_right\nN = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nC = list(map(int, input().split()))\n\nA.sort()\nB.sort()\nC.sort()\n\ncount = 0\n\nfor b in B:\n    count += bisect_left(A, b) * (N - bisect_right(C, b))\n\nprint(count)\n", "#\n# N = int(input())\n# A = list(map(int, input().split()))\n# B = list(map(int, input().split()))\n# C = list(map(int, input().split()))\n#\n# A.sort()\n# B.sort()\n# C.sort()\n#\n# count = 0\n#\n# for b in B:\n#     count += bisect_left(A, b) * (N - bisect_right(C, b))\n#\n# print(count)\n", "import bisect\n\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\n\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nC = list(map(int, input().split()))\n\nA.sort()\nB.sort()\nC.sort()\n\nans = 0\n\nfor i in range(N):\n    a = bisect_right(B, A[i] + 1)\n    c = bisect_right(C, B[i] + 1)\n    ans += a * c\n\nprint(ans)\n"]