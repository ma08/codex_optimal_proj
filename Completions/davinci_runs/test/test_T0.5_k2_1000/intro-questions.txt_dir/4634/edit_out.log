2022-04-11 21:33:20.645064 num operations 2
2022-04-11 21:33:20.645095 size on input set 1
2022-04-11 21:33:24.031385 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    left, right = -1, -1\n    for i in range(n):\n        if a[i] == 1:\n            left = i\n            break\n    for i in range(n-1, -1, -1):\n        if a[i] == 1:\n            right = i\n            break\n    print(left, right)\n    if left == right:\n        print(0)\n    else:\n        print(a[left:right+1])\n        print(sum(a[left:right+1]))\n        print(right-left - sum(a[left:right+1]))\n"
    },
    {
      "index": 1,
      "text": "\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    left, right = -1, -1\n    for i in range(n):\n        if a[i] == 1:\n            left = i\n            break\n    for i in range(n-1, -1, -1):\n        if a[i] == 1:\n            right = i\n            break\n    # print(left, right) \n    if left == right:\n        print(0)\n    else:\n        # print(a[left:right+1])\n        # print(sum(a[left:right+1]))\n        print(right-left - sum(a[left:right+1]))\n"
    }
  ],
  "created": 1649727201,
  "object": "edit"
}
2022-04-11 21:33:24.031977 fix spelling mistakes 2 ['\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    left, right = -1, -1\n    for i in range(n):\n        if a[i] == 1:\n            left = i\n            break\n    for i in range(n-1, -1, -1):\n        if a[i] == 1:\n            right = i\n            break\n    print(left, right)\n    if left == right:\n        print(0)\n    else:\n        print(a[left:right+1])\n        print(sum(a[left:right+1]))\n        print(right-left - sum(a[left:right+1]))\n', '\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    left, right = -1, -1\n    for i in range(n):\n        if a[i] == 1:\n            left = i\n            break\n    for i in range(n-1, -1, -1):\n        if a[i] == 1:\n            right = i\n            break\n    # print(left, right) \n    if left == right:\n        print(0)\n    else:\n        # print(a[left:right+1])\n        # print(sum(a[left:right+1]))\n        print(right-left - sum(a[left:right+1]))\n']
2022-04-11 21:33:24.032051 size on output set 2
2022-04-11 21:33:24.032062 size on input set 2
2022-04-11 21:33:26.690491 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    left, right = -1, -1\n    for i in range(n):\n        if a[i] == 1:\n            left = i\n            break\n    for i in range(n-1, -1, -1):\n        if a[i] == 1:\n            right = i\n            break\n    if left == right:\n        print(0)\n    else:\n        print(right-left - sum(a[left:right+1]))\n"
    },
    {
      "index": 1,
      "text": "\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    left, right = -1, -1\n    for i in range(n):\n        if a[i] == 1:\n            left = i\n            break\n    for i in range(n-1, -1, -1):\n        if a[i] == 1:\n            right = i\n            break\n    if left == right:\n        print(0)\n    else:\n        print(right-left - sum(a[left:right+1]))\n"
    }
  ],
  "created": 1649727204,
  "object": "edit"
}
2022-04-11 21:33:26.690629 fix syntax errors 2 ['\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    left, right = -1, -1\n    for i in range(n):\n        if a[i] == 1:\n            left = i\n            break\n    for i in range(n-1, -1, -1):\n        if a[i] == 1:\n            right = i\n            break\n    if left == right:\n        print(0)\n    else:\n        print(right-left - sum(a[left:right+1]))\n', '\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    left, right = -1, -1\n    for i in range(n):\n        if a[i] == 1:\n            left = i\n            break\n    for i in range(n-1, -1, -1):\n        if a[i] == 1:\n            right = i\n            break\n    if left == right:\n        print(0)\n    else:\n        print(right-left - sum(a[left:right+1]))\n']
2022-04-11 21:33:28.734372 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    left, right = -1, -1\n    for i in range(n):\n        if a[i] == 1:\n            left = i\n            break\n    for i in range(n-1, -1, -1):\n        if a[i] == 1:\n            right = i\n            break\n    # print(left, right) \n    if left == right:\n        print(0)\n    else:\n        # print(a[left:right+1])\n        # print(sum(a[left:right+1]))\n        print(right-left - sum(a[left:right+1]))\n"
    },
    {
      "index": 1,
      "text": "\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    left, right = -1, -1\n    for i in range(n):\n        if a[i] == 1:\n            left = i\n            break\n    for i in range(n-1, -1, -1):\n        if a[i] == 1:\n            right = i\n            break\n    # print(left, right) \n    if left == right:\n        print(0)\n    else:\n        # print(a[left:right+1])\n        # print(sum(a[left:right+1]))\n        print(right-left - sum(a[left:right+1]))\n"
    }
  ],
  "created": 1649727206,
  "object": "edit"
}
2022-04-11 21:33:28.734616 fix syntax errors 2 ['\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    left, right = -1, -1\n    for i in range(n):\n        if a[i] == 1:\n            left = i\n            break\n    for i in range(n-1, -1, -1):\n        if a[i] == 1:\n            right = i\n            break\n    # print(left, right) \n    if left == right:\n        print(0)\n    else:\n        # print(a[left:right+1])\n        # print(sum(a[left:right+1]))\n        print(right-left - sum(a[left:right+1]))\n', '\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    left, right = -1, -1\n    for i in range(n):\n        if a[i] == 1:\n            left = i\n            break\n    for i in range(n-1, -1, -1):\n        if a[i] == 1:\n            right = i\n            break\n    # print(left, right) \n    if left == right:\n        print(0)\n    else:\n        # print(a[left:right+1])\n        # print(sum(a[left:right+1]))\n        print(right-left - sum(a[left:right+1]))\n']
2022-04-11 21:33:28.734644 size on output set 2
2022-04-11 21:33:28.734677 num operations 2
2022-04-11 21:33:28.734681 size on input set 1
2022-04-11 21:33:34.016230 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# SOLUTION\n# Step 1: find the start and end of the first contiguous segment.\n# Step 2: count the number of 0s between the start and end of the first contiguous segment.\n# Step 3: find the start and end of the next contiguous segment.\n# Step 4: count the number of 0s between the end of the first contiguous segment and the start of the next contiguous segment.\n# Step 5: repeat until all contiguous segments are found.\n\ndef minimum_moves(n, a):\n    moves = 0\n    start = 0\n    end = 0\n    for i in range(n):\n        if a[i] == 1:\n            end = i\n            break\n\n    for i in range(end+1, n):\n        if a[i] == 1:\n            moves += (i - end - 1)\n            end = i\n    return moves\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(minimum_moves(n, a))\n"
    },
    {
      "index": 1,
      "text": "\n\n# SOLUTION\n# Step 1: find the start and end of the first continuous segment\n# Step 2: count the number of 0s between the start and end of the first continuous segment\n# Step 3: find the start and end of the next continuous segment\n# Step 4: count the number of 0s between the end of the first continuous segment and the start of the next continuous segment\n# Step 5: repeat until all continuous segments are found\n\ndef minimum_moves(n, a):\n    moves = 0\n    start = 0\n    end = 0\n    for i in range(n):\n        if a[i] == 1:\n            end = i\n            break\n\n    for i in range(end+1, n):\n        if a[i] == 1:\n            moves += (i - end - 1)\n            end = i\n    return moves\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(minimum_moves(n, a))\n"
    }
  ],
  "created": 1649727209,
  "object": "edit"
}
2022-04-11 21:33:34.016764 fix spelling mistakes 2 ['\n\n# SOLUTION\n# Step 1: find the start and end of the first contiguous segment.\n# Step 2: count the number of 0s between the start and end of the first contiguous segment.\n# Step 3: find the start and end of the next contiguous segment.\n# Step 4: count the number of 0s between the end of the first contiguous segment and the start of the next contiguous segment.\n# Step 5: repeat until all contiguous segments are found.\n\ndef minimum_moves(n, a):\n    moves = 0\n    start = 0\n    end = 0\n    for i in range(n):\n        if a[i] == 1:\n            end = i\n            break\n\n    for i in range(end+1, n):\n        if a[i] == 1:\n            moves += (i - end - 1)\n            end = i\n    return moves\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(minimum_moves(n, a))\n', '\n\n# SOLUTION\n# Step 1: find the start and end of the first continuous segment\n# Step 2: count the number of 0s between the start and end of the first continuous segment\n# Step 3: find the start and end of the next continuous segment\n# Step 4: count the number of 0s between the end of the first continuous segment and the start of the next continuous segment\n# Step 5: repeat until all continuous segments are found\n\ndef minimum_moves(n, a):\n    moves = 0\n    start = 0\n    end = 0\n    for i in range(n):\n        if a[i] == 1:\n            end = i\n            break\n\n    for i in range(end+1, n):\n        if a[i] == 1:\n            moves += (i - end - 1)\n            end = i\n    return moves\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(minimum_moves(n, a))\n']
2022-04-11 21:33:34.016820 size on output set 2
2022-04-11 21:33:34.016835 size on input set 2
2022-04-11 21:33:40.148615 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# SOLUTION:\n# Step 1: find the start and end of the first contiguous segment\n# Step 2: count the number of 0s between the start and end of the first contiguous segment\n# Step 3: find the start and end of the next contiguous segment\n# Step 4: count the number of 0s between the end of the first contiguous segment and the start of the next contiguous segment\n# Step 5: repeat until all contiguous segments are found\n\ndef minimum_moves(n, a):\n    moves, start, end = 0, 0, 0\n    for i in range(n):\n        if a[i] == 1:\n            end = i\n            break\n\n    for i in range(end+1, n):\n        if a[i] == 1:\n            moves += (i - end - 1)\n            end = i\n    return moves\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(minimum_moves(n, a))\n"
    },
    {
      "index": 1,
      "text": "\n\n# SOLUTION\n# Step 1: find the start and end of the first contiguous segment\n# Step 2: count the number of 0s between the start and end of the first contiguous segment\n# Step 3: find the start and end of the next contiguous segment\n# Step 4: count the number of 0s between the end of the first contiguous segment and the start of the next contiguous segment\n# Step 5: repeat until all contiguous segments are found\n\ndef minimum_moves(n, a):\n    moves = 0\n    start = 0\n    end = 0\n    for i in range(n):\n        if a[i] == 1:\n            end = i\n            break\n\n    for i in range(end+1, n):\n        if a[i] == 1:\n            moves += (i - end - 1)\n            end = i\n    return moves\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(minimum_moves(n, a))\n"
    }
  ],
  "created": 1649727214,
  "object": "edit"
}
2022-04-11 21:33:40.148891 fix syntax errors 2 ['\n\n# SOLUTION:\n# Step 1: find the start and end of the first contiguous segment\n# Step 2: count the number of 0s between the start and end of the first contiguous segment\n# Step 3: find the start and end of the next contiguous segment\n# Step 4: count the number of 0s between the end of the first contiguous segment and the start of the next contiguous segment\n# Step 5: repeat until all contiguous segments are found\n\ndef minimum_moves(n, a):\n    moves, start, end = 0, 0, 0\n    for i in range(n):\n        if a[i] == 1:\n            end = i\n            break\n\n    for i in range(end+1, n):\n        if a[i] == 1:\n            moves += (i - end - 1)\n            end = i\n    return moves\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(minimum_moves(n, a))\n', '\n\n# SOLUTION\n# Step 1: find the start and end of the first contiguous segment\n# Step 2: count the number of 0s between the start and end of the first contiguous segment\n# Step 3: find the start and end of the next contiguous segment\n# Step 4: count the number of 0s between the end of the first contiguous segment and the start of the next contiguous segment\n# Step 5: repeat until all contiguous segments are found\n\ndef minimum_moves(n, a):\n    moves = 0\n    start = 0\n    end = 0\n    for i in range(n):\n        if a[i] == 1:\n            end = i\n            break\n\n    for i in range(end+1, n):\n        if a[i] == 1:\n            moves += (i - end - 1)\n            end = i\n    return moves\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(minimum_moves(n, a))\n']
2022-04-11 21:33:45.439673 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\n# SOLUTION\n# Step 1: find the start and end of the first continuous segment\n# Step 2: count the number of 0s between the start and end of the first continuous segment\n# Step 3: find the start and end of the next continuous segment\n# Step 4: count the number of 0s between the end of the first continuous segment and the start of the next continuous segment\n# Step 5: repeat until all continuous segments are found\n\ndef minimum_moves(n, a):\n    moves = 0\n    start = 0\n    end = 0\n    for i in range(n):\n        if a[i] == 1:\n            end = i\n            break\n\n    for i in range(end+1, n):\n        if a[i] == 1:\n            moves += (i - end - 1)\n            end = i\n    return moves\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(minimum_moves(n, a))\n"
    },
    {
      "index": 1,
      "text": "\n\n# SOLUTION\n# Step 1: find the start and end of the first continuous segment of 1s\n# Step 2: count the number of 0s between the start and end of the first continuous segment of 1s\n# Step 3: find the start and end of the next continuous segment of 1s\n# Step 4: count the number of 0s between the end of the first continuous segment of 1s and the start of the next continuous segment of 1s\n# Step 5: repeat until all continuous segments of 1s are found\n\ndef minimum_moves(n, a):\n    moves = 0\n    start = 0\n    end = 0\n    for i in range(n):\n        if a[i] == 1:\n            end = i\n            break\n\n    for i in range(end+1, n):\n        if a[i] == 1:\n            moves += (i - end - 1)\n            end = i\n    return moves\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(minimum_moves(n, a))\n"
    }
  ],
  "created": 1649727220,
  "object": "edit"
}
2022-04-11 21:33:45.440183 fix syntax errors 2 ['#!/usr/bin/env python3\n\n# SOLUTION\n# Step 1: find the start and end of the first continuous segment\n# Step 2: count the number of 0s between the start and end of the first continuous segment\n# Step 3: find the start and end of the next continuous segment\n# Step 4: count the number of 0s between the end of the first continuous segment and the start of the next continuous segment\n# Step 5: repeat until all continuous segments are found\n\ndef minimum_moves(n, a):\n    moves = 0\n    start = 0\n    end = 0\n    for i in range(n):\n        if a[i] == 1:\n            end = i\n            break\n\n    for i in range(end+1, n):\n        if a[i] == 1:\n            moves += (i - end - 1)\n            end = i\n    return moves\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(minimum_moves(n, a))\n', '\n\n# SOLUTION\n# Step 1: find the start and end of the first continuous segment of 1s\n# Step 2: count the number of 0s between the start and end of the first continuous segment of 1s\n# Step 3: find the start and end of the next continuous segment of 1s\n# Step 4: count the number of 0s between the end of the first continuous segment of 1s and the start of the next continuous segment of 1s\n# Step 5: repeat until all continuous segments of 1s are found\n\ndef minimum_moves(n, a):\n    moves = 0\n    start = 0\n    end = 0\n    for i in range(n):\n        if a[i] == 1:\n            end = i\n            break\n\n    for i in range(end+1, n):\n        if a[i] == 1:\n            moves += (i - end - 1)\n            end = i\n    return moves\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(minimum_moves(n, a))\n']
2022-04-11 21:33:45.440259 size on output set 4
