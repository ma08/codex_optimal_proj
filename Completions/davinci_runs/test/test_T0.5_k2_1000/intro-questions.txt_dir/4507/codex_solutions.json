["\n\nfrom heapq import heappop, heappush\n\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\n\nshovels = [(a[i], i) for i in range(n)]\nheap = []\n\nfor _ in range(m):\n    x, y = map(int, input().split())\n    heappush(heap, (x, y))\n\nshovels.sort()\n\nans = 0\n\nwhile k > 0:\n    amount, cost = 0, 0\n    while amount < k and shovels:\n        shovel, shovel_cost = heappop(shovels)\n        amount += 1\n        cost += shovel_cost\n    if not heap:\n        ans += cost\n        break\n    x, y = heappop(heap)\n    if amount <= x:\n        ans += cost\n        k -= amount\n    else:\n        ans += cost - y * shovels[-y][0]\n        k -= x\n\nprint(ans)", "\n\ndef main():\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    offers = []\n    for _ in range(m):\n        offers.append(list(map(int, input().split())))\n    \n    a.sort()\n    b = a[:]\n    for offer in offers:\n        for i in range(offer[1]):\n            b[i] = min(b[i], a[offer[0] - 1 - i])\n    \n    res = sum(a[:k])\n    for i in range(k):\n        res = min(res, sum(b[:i]) + sum(a[i:k]))\n    \n    print(res)\n\nif __name__ == \"__main__\":\n    main()"]