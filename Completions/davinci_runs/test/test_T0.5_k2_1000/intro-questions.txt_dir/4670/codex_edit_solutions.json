["\n\nimport re\n\nif __name__ == '__main__':\n    regex = r\"\"\"\n    ^                            # beginning of string\n    M{0,3}                       # thousands - 0 to 3 Ms\n    (CM|CD|D?C{0,3})             # hundreds - 900 (CM), 400 (CD), 0-300 (0 to 3 Cs), or 500-800 (D, followed by 0 to 3 Cs)\n    (XC|XL|L?X{0,3})             # tens - 90 (XC), 40 (XL), 0-30 (0 to 3 Xs), or 50-80 (L, followed by 0 to 3 Xs)\n    (IX|IV|V?I{0,3})             # ones - 9 (IX), 4 (IV), 0-3 (0 to 3 Is), or 5-8 (V, followed by 0 to 3 Is)\n    $                            # end of string\n    \"\"\"\n\n    pattern = re.compile(regex, re.VERBOSE)\n    for _ in range(int(input())):\n        print(bool(pattern.match(input())))\n", "\n\nregex_pattern = r\"M{0,3}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$\"\t# Do not delete 'r'.\n\nimport re\nprint(str(bool(re.match(regex_pattern, input()))))\n", "\n\nregex_pattern = r\"^M{0,3}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$\"\t# Do not delete 'r'. \n\nimport re\nprint(str(bool(re.match(regex_pattern, input()))))\n"]