2022-04-12 02:52:02.601168 num operations 2
2022-04-12 02:52:02.601187 size on input set 1
2022-04-12 02:52:05.325662 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    times = dict()\n    problems = dict()\n    while True:\n        line = sys.stdin.readline()\n        if line == \"-1\\n\":\n            break\n        time, problem, result = line.split()\n        time = int(time)\n        if problem in problems:\n            if result == \"right\":\n                times[problem] = time\n                problems[problem] = True\n        else:\n            times[problem] = time\n            problems[problem] = result == \"right\"\n    solved = 0\n    time = 0\n    for problem, correct in problems.items():\n        if correct:\n            time += times[problem]\n            solved += 1\n        else:\n            time += 20\n    print(solved, time)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    times = dict()\n    problems = dict()\n    while True:\n        line = sys.stdin.readline()\n        if line == \"-1\\n\":\n            break\n        time, problem, result = line.split()\n        time = int(time)\n        if problem in problems:\n            if result == \"right\":\n                times[problem] = time\n                problems[problem] = True\n        else:\n            times[problem] = time\n            problems[problem] = result == \"right\"\n    solved = 0\n    time = 0\n    for problem, solved_problem in problems.items():\n        if solved_problem:\n            time += times[problem]\n            solved += 1\n        else:\n            time += 20\n    print(solved, time)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649746322,
  "object": "edit"
}
2022-04-12 02:52:05.325777 fix spelling mistakes 2 ['\n\nimport sys\n\ndef main():\n    times = dict()\n    problems = dict()\n    while True:\n        line = sys.stdin.readline()\n        if line == "-1\\n":\n            break\n        time, problem, result = line.split()\n        time = int(time)\n        if problem in problems:\n            if result == "right":\n                times[problem] = time\n                problems[problem] = True\n        else:\n            times[problem] = time\n            problems[problem] = result == "right"\n    solved = 0\n    time = 0\n    for problem, correct in problems.items():\n        if correct:\n            time += times[problem]\n            solved += 1\n        else:\n            time += 20\n    print(solved, time)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    times = dict()\n    problems = dict()\n    while True:\n        line = sys.stdin.readline()\n        if line == "-1\\n":\n            break\n        time, problem, result = line.split()\n        time = int(time)\n        if problem in problems:\n            if result == "right":\n                times[problem] = time\n                problems[problem] = True\n        else:\n            times[problem] = time\n            problems[problem] = result == "right"\n    solved = 0\n    time = 0\n    for problem, solved_problem in problems.items():\n        if solved_problem:\n            time += times[problem]\n            solved += 1\n        else:\n            time += 20\n    print(solved, time)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 02:52:05.325798 size on output set 2
2022-04-12 02:52:05.325801 size on input set 2
2022-04-12 02:52:08.498194 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    times = dict()\n    problems = dict()\n    while True:\n        line = sys.stdin.readline()\n        if line == \"-1\":\n            break\n        time, problem, result = line.split(\" \")\n        time = int(time)\n        if problem in problems:\n            if result == \"right\":\n                times[problem] = time\n                problems[problem] = True\n        else:\n            times[problem] = time\n            problems[problem] = result == \"right\"\n    solved = 0\n    time = 0\n    for problem, correct in problems.items():\n        if correct:\n            time += times[problem]\n            solved += 1\n        else:\n            time += 20\n    print(solved, time)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    times = dict()\n    problems = dict()\n    while True:\n        line = sys.stdin.readline()\n        if line == \"-1\\n\":\n            break\n        time, problem, result = line.split()[:3]\n        time = int(time)\n        if problem in problems:\n            if result == \"right\":\n                times[problem] = time\n                problems[problem] = True\n        else:\n            times[problem] = time\n            problems[problem] = result == \"right\"\n    solved = 0\n    time = 0\n    for problem, correct in problems.items():\n        if correct:\n            time += times[problem]\n            solved += 1\n        else:\n            time += 20 * (times[problem] // 20 + 1)\n    print(solved, time)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649746325,
  "object": "edit"
}
2022-04-12 02:52:08.498322 fix syntax errors 2 ['\nimport sys\n\ndef main():\n    times = dict()\n    problems = dict()\n    while True:\n        line = sys.stdin.readline()\n        if line == "-1":\n            break\n        time, problem, result = line.split(" ")\n        time = int(time)\n        if problem in problems:\n            if result == "right":\n                times[problem] = time\n                problems[problem] = True\n        else:\n            times[problem] = time\n            problems[problem] = result == "right"\n    solved = 0\n    time = 0\n    for problem, correct in problems.items():\n        if correct:\n            time += times[problem]\n            solved += 1\n        else:\n            time += 20\n    print(solved, time)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    times = dict()\n    problems = dict()\n    while True:\n        line = sys.stdin.readline()\n        if line == "-1\\n":\n            break\n        time, problem, result = line.split()[:3]\n        time = int(time)\n        if problem in problems:\n            if result == "right":\n                times[problem] = time\n                problems[problem] = True\n        else:\n            times[problem] = time\n            problems[problem] = result == "right"\n    solved = 0\n    time = 0\n    for problem, correct in problems.items():\n        if correct:\n            time += times[problem]\n            solved += 1\n        else:\n            time += 20 * (times[problem] // 20 + 1)\n    print(solved, time)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 02:52:14.874701 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    times = dict()\n    problems = dict()\n    for line in sys.stdin:\n        if line == \"-1\\n\": break\n        time, problem, result = line.split()\n        time = int(time)\n        if problem in problems:\n            if result == \"right\":\n                times[problem] = time\n                problems[problem] = True\n        else:\n            times[problem] = time\n            problems[problem] = result == \"right\"\n    solved = 0\n    time = 0\n    for problem, solved_problem in problems.items():\n        if solved_problem:\n            time += times[problem]\n            solved += 1\n        else:\n            time += 20\n    print(solved, time)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    times = {}\n    problems = {}\n    while True:\n        line = sys.stdin.readline()\n        if line == \"-1\":\n            break\n        time, problem, result = line.split(\" \")\n        time = int(time)\n        if result == \"right\":\n            times[problem] = time\n            problems[problem] = True\n        elif problem not in problems:\n            problems[problem] = False\n    solved = 0\n    time = 0\n    for problem, solved_problem in problems.items():\n        if solved_problem:\n            time += times[problem]\n            solved += 1\n        else:\n            time += 20 * (times[problem] // 20 + 1)\n    print(solved, time)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649746328,
  "object": "edit"
}
2022-04-12 02:52:14.874870 fix syntax errors 2 ['\n\nimport sys\n\ndef main():\n    times = dict()\n    problems = dict()\n    for line in sys.stdin:\n        if line == "-1\\n": break\n        time, problem, result = line.split()\n        time = int(time)\n        if problem in problems:\n            if result == "right":\n                times[problem] = time\n                problems[problem] = True\n        else:\n            times[problem] = time\n            problems[problem] = result == "right"\n    solved = 0\n    time = 0\n    for problem, solved_problem in problems.items():\n        if solved_problem:\n            time += times[problem]\n            solved += 1\n        else:\n            time += 20\n    print(solved, time)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    times = {}\n    problems = {}\n    while True:\n        line = sys.stdin.readline()\n        if line == "-1":\n            break\n        time, problem, result = line.split(" ")\n        time = int(time)\n        if result == "right":\n            times[problem] = time\n            problems[problem] = True\n        elif problem not in problems:\n            problems[problem] = False\n    solved = 0\n    time = 0\n    for problem, solved_problem in problems.items():\n        if solved_problem:\n            time += times[problem]\n            solved += 1\n        else:\n            time += 20 * (times[problem] // 20 + 1)\n    print(solved, time)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 02:52:14.874886 size on output set 4
2022-04-12 02:52:14.874893 num operations 2
2022-04-12 02:52:14.874896 size on input set 1
2022-04-12 02:52:21.450820 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Main program.\n    \"\"\"\n    # Initialize the submission log and the number of problems solved\n    submission_log = []\n    problems_solved = 0\n    # Read in the submission log\n    while True:\n        submission = input()\n        if submission == \"-1\":\n            break\n        submission_log.append(submission.split())\n    # Initialize the time score\n    time_score = 0\n    # Process the submission log\n    for i in range(len(submission_log)):\n        # If the submission is correct, add the time to the time score\n        if submission_log[i][2] == \"right\":\n            time_score += int(submission_log[i][0])\n            problems_solved += 1\n        # If the submission is wrong, check if the problem was solved\n        else:\n            # If the problem was solved, add the penalty to the time score\n            if submission_log[i][1] in [submission_log[j][1] for j in range(i) if submission_log[j][2] == \"right\"]:\n                time_score += 20\n    # Print the number of problems solved and the time score\n    print(problems_solved, time_score)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Main program.\n    \"\"\"\n    # Initialize the submission log and the number of problems solved\n    submission_log = []\n    problems_solved = 0\n    # Read in the submission log\n    while True:\n        submission = input()\n        if submission == \"-1\":\n            break\n        submission_log.append(submission.split())\n    # Initialize the time score\n    time_score = 0\n    # Process the submission log\n    for i in range(len(submission_log)):\n        # If the submission is correct, add the time to the time score\n        if submission_log[i][2] == \"right\":\n            time_score += int(submission_log[i][0])\n            problems_solved += 1\n        # If the submission is wrong, check if the problem was solved\n        else:\n            # If the problem was solved, add the penalty to the time score\n            if submission_log[i][1] in [submission_log[j][1] for j in range(i) if submission_log[j][2] == \"right\"]:\n                time_score += 20\n    # Print the number of problems solved and the time score\n    print(problems_solved, time_score)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649746335,
  "object": "edit"
}
2022-04-12 02:52:21.451237 fix spelling mistakes 2 ['\n\ndef main():\n    """\n    Main program.\n    """\n    # Initialize the submission log and the number of problems solved\n    submission_log = []\n    problems_solved = 0\n    # Read in the submission log\n    while True:\n        submission = input()\n        if submission == "-1":\n            break\n        submission_log.append(submission.split())\n    # Initialize the time score\n    time_score = 0\n    # Process the submission log\n    for i in range(len(submission_log)):\n        # If the submission is correct, add the time to the time score\n        if submission_log[i][2] == "right":\n            time_score += int(submission_log[i][0])\n            problems_solved += 1\n        # If the submission is wrong, check if the problem was solved\n        else:\n            # If the problem was solved, add the penalty to the time score\n            if submission_log[i][1] in [submission_log[j][1] for j in range(i) if submission_log[j][2] == "right"]:\n                time_score += 20\n    # Print the number of problems solved and the time score\n    print(problems_solved, time_score)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Main program.\n    """\n    # Initialize the submission log and the number of problems solved\n    submission_log = []\n    problems_solved = 0\n    # Read in the submission log\n    while True:\n        submission = input()\n        if submission == "-1":\n            break\n        submission_log.append(submission.split())\n    # Initialize the time score\n    time_score = 0\n    # Process the submission log\n    for i in range(len(submission_log)):\n        # If the submission is correct, add the time to the time score\n        if submission_log[i][2] == "right":\n            time_score += int(submission_log[i][0])\n            problems_solved += 1\n        # If the submission is wrong, check if the problem was solved\n        else:\n            # If the problem was solved, add the penalty to the time score\n            if submission_log[i][1] in [submission_log[j][1] for j in range(i) if submission_log[j][2] == "right"]:\n                time_score += 20\n    # Print the number of problems solved and the time score\n    print(problems_solved, time_score)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 02:52:21.451477 size on output set 1
2022-04-12 02:52:21.451485 size on input set 1
2022-04-12 02:52:31.565386 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Main program.\n    \"\"\"\n    # Initialize the number of problems solved\n    problems_solved = []\n    # Read in the number of problems solved\n    while True:\n        problem = input()\n        if problem == \"-1\":\n            break\n        problems_solved.append(problem)\n    # Initialize the number of problems solved\n    number_of_problems_solved = 0\n    # Process the number of problems solved\n    for i in range(len(problems_solved)):\n        # If the problem was solved, increment the number of problems solved\n        if problems_solved[i] == \"1\":\n            number_of_problems_solved += 1\n    # Print the number of problems solved\n    print(number_of_problems_solved)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Main program.\n    \"\"\"\n    # Initialize the submission log, the number of problems solved, and the time score\n    submission_log = []\n    problems_solved = 0\n    # Read in the submission log\n    while True:\n        submission = input()\n        if submission == \"-1\":\n            break\n        submission_log.append(submission.split())\n    time_score = 0\n    # Process the submission log\n    for i in range(len(submission_log)):\n        # If the submission is correct, add the time to the time score\n        if submission_log[i][2] == \"right\":\n            time_score += int(submission_log[i][0])\n            problems_solved += 1\n        # If the submission is wrong, check if the problem was solved\n        else:\n            # If the problem was solved, add the penalty to the time score and increment the number of problems solved\n            if submission_log[i][1] in [submission_log[j][1] for j in range(i) if submission_log[j][2] == \"right\"]:\n                time_score += 20\n                problems_solved += 1\n    # Print the number of problems solved and the time score\n    print(problems_solved, time_score)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649746341,
  "object": "edit"
}
2022-04-12 02:52:31.565563 fix syntax errors 2 ['\n\ndef main():\n    """\n    Main program.\n    """\n    # Initialize the number of problems solved\n    problems_solved = []\n    # Read in the number of problems solved\n    while True:\n        problem = input()\n        if problem == "-1":\n            break\n        problems_solved.append(problem)\n    # Initialize the number of problems solved\n    number_of_problems_solved = 0\n    # Process the number of problems solved\n    for i in range(len(problems_solved)):\n        # If the problem was solved, increment the number of problems solved\n        if problems_solved[i] == "1":\n            number_of_problems_solved += 1\n    # Print the number of problems solved\n    print(number_of_problems_solved)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Main program.\n    """\n    # Initialize the submission log, the number of problems solved, and the time score\n    submission_log = []\n    problems_solved = 0\n    # Read in the submission log\n    while True:\n        submission = input()\n        if submission == "-1":\n            break\n        submission_log.append(submission.split())\n    time_score = 0\n    # Process the submission log\n    for i in range(len(submission_log)):\n        # If the submission is correct, add the time to the time score\n        if submission_log[i][2] == "right":\n            time_score += int(submission_log[i][0])\n            problems_solved += 1\n        # If the submission is wrong, check if the problem was solved\n        else:\n            # If the problem was solved, add the penalty to the time score and increment the number of problems solved\n            if submission_log[i][1] in [submission_log[j][1] for j in range(i) if submission_log[j][2] == "right"]:\n                time_score += 20\n                problems_solved += 1\n    # Print the number of problems solved and the time score\n    print(problems_solved, time_score)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 02:52:31.565610 size on output set 2
2022-04-12 02:52:31.565625 num operations 2
2022-04-12 02:52:31.565633 size on input set 1
2022-04-12 02:52:35.306777 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\n# Read in the input\ninput = sys.stdin.readlines()\n\n# Parse the input\nlog = []\nfor line in input:\n    if line == \"-1\\n\":\n        break\n    log.append(line.split())\n\n# Create a dictionary of the problems and the number of times they \n# were solved\nproblems = {}\nfor entry in log:\n    problems[entry[1]] = 0\n\n# Create a dictionary of the problems and the number of times they\n# were attempted\nattempts = {}\nfor entry in log:\n    attempts[entry[1]] = 0\n\n# Create a dictionary of the problems and the time it took to solve\n# them\ntimes = {}\nfor entry in log:\n    times[entry[1]] = 0\n\n# Loop through the log and find out how many problems were solved\n# and how many attempts it took to solve them\nfor entry in log:\n    if entry[2] == \"right\":\n        problems[entry[1]] += 1\n        attempts[entry[1]] += 1\n        times[entry[1]] = int(entry[0])\n    else:\n        attempts[entry[1]] += 1\n\n# Count the number of problems solved\nsolved = 0\nfor problem in problems:\n    if problems[problem] == 1:\n        solved += 1\n\n# Calculate the time score\ntimeScore = 0\nfor problem in problems:\n    if problems[problem] == 1:\n        timeScore += times[problem]\n    else:\n        timeScore += (attempts[problem] - 1) * 20\n\n# Print the results\nprint(solved, timeScore)\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\n# Read in the input\ninput = sys.stdin.readlines()\n\n# Parse the input\nlog = []\nfor line in input:\n    if line == \"-1\\n\":\n        break\n    log.append(line.split())\n\n# Create a dictionary of the problems and the number of times it\n# were solved\nproblems = {}\nfor entry in log:\n    problems[entry[1]] = 0\n\n# Create a dictionary of the problems and the number of times it\n# were attempted\nattempts = {}\nfor entry in log:\n    attempts[entry[1]] = 0\n\n# Create a dictionary of the problems and the time it took to solve it\ntimes = {}\nfor entry in log:\n    times[entry[1]] = 0\n\n# Loop through the log and find out how many problems were solved\n# and how many attempts it took to solve them\nfor entry in log:\n    if entry[2] == \"right\":\n        problems[entry[1]] += 1\n        attempts[entry[1]] += 1\n        times[entry[1]] = int(entry[0])\n    else:\n        attempts[entry[1]] += 1\n\n# Count the number of problems solved\nsolved = 0\nfor problem in problems:\n    if problems[problem] == 1:\n        solved += 1\n\n# Calculate the time score\ntimeScore = 0\nfor problem in problems:\n    if problems[problem] == 1:\n        timeScore += times[problem]\n    else:\n        timeScore += (attempts[problem] - 1) * 20\n\n# Print the results\nprint(solved, timeScore)\n"
    }
  ],
  "created": 1649746351,
  "object": "edit"
}
2022-04-12 02:52:35.307032 fix spelling mistakes 2 ['\n\nimport sys\n\n# Read in the input\ninput = sys.stdin.readlines()\n\n# Parse the input\nlog = []\nfor line in input:\n    if line == "-1\\n":\n        break\n    log.append(line.split())\n\n# Create a dictionary of the problems and the number of times they \n# were solved\nproblems = {}\nfor entry in log:\n    problems[entry[1]] = 0\n\n# Create a dictionary of the problems and the number of times they\n# were attempted\nattempts = {}\nfor entry in log:\n    attempts[entry[1]] = 0\n\n# Create a dictionary of the problems and the time it took to solve\n# them\ntimes = {}\nfor entry in log:\n    times[entry[1]] = 0\n\n# Loop through the log and find out how many problems were solved\n# and how many attempts it took to solve them\nfor entry in log:\n    if entry[2] == "right":\n        problems[entry[1]] += 1\n        attempts[entry[1]] += 1\n        times[entry[1]] = int(entry[0])\n    else:\n        attempts[entry[1]] += 1\n\n# Count the number of problems solved\nsolved = 0\nfor problem in problems:\n    if problems[problem] == 1:\n        solved += 1\n\n# Calculate the time score\ntimeScore = 0\nfor problem in problems:\n    if problems[problem] == 1:\n        timeScore += times[problem]\n    else:\n        timeScore += (attempts[problem] - 1) * 20\n\n# Print the results\nprint(solved, timeScore)\n', '\n\nimport sys\n\n# Read in the input\ninput = sys.stdin.readlines()\n\n# Parse the input\nlog = []\nfor line in input:\n    if line == "-1\\n":\n        break\n    log.append(line.split())\n\n# Create a dictionary of the problems and the number of times it\n# were solved\nproblems = {}\nfor entry in log:\n    problems[entry[1]] = 0\n\n# Create a dictionary of the problems and the number of times it\n# were attempted\nattempts = {}\nfor entry in log:\n    attempts[entry[1]] = 0\n\n# Create a dictionary of the problems and the time it took to solve it\ntimes = {}\nfor entry in log:\n    times[entry[1]] = 0\n\n# Loop through the log and find out how many problems were solved\n# and how many attempts it took to solve them\nfor entry in log:\n    if entry[2] == "right":\n        problems[entry[1]] += 1\n        attempts[entry[1]] += 1\n        times[entry[1]] = int(entry[0])\n    else:\n        attempts[entry[1]] += 1\n\n# Count the number of problems solved\nsolved = 0\nfor problem in problems:\n    if problems[problem] == 1:\n        solved += 1\n\n# Calculate the time score\ntimeScore = 0\nfor problem in problems:\n    if problems[problem] == 1:\n        timeScore += times[problem]\n    else:\n        timeScore += (attempts[problem] - 1) * 20\n\n# Print the results\nprint(solved, timeScore)\n']
2022-04-12 02:52:35.307076 size on output set 2
2022-04-12 02:52:35.307083 size on input set 2
2022-04-12 02:52:37.970860 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\n# Read in the input\ninput = sys.stdin.readlines()\n\n# Parse the input\nlog = []\nfor line in input:\n    if line == \"-1\\n\":\n        break\n    log.append(line.split())\n\n# Create a dictionary of the problems and the number of times they\n# were solved\nproblems = {}\nfor entry in log:\n    problems[entry[1]] = 0\n\n# Create a dictionary of the problems and the number of times they\n# were attempted\nattempts = {}\nfor entry in log:\n    attempts[entry[1]] = 0\n\n# Create a dictionary of the problems and the time it took to solve\n# them\ntimes = {}\nfor entry in log:\n    times[entry[1]] = 0\n\n# Loop through the log and find out how many problems were solved\n# and how many attempts it took to solve them\nfor entry in log:\n    if entry[2] == \"right\":\n        problems[entry[1]] += 1\n        attempts[entry[1]] += 1\n        times[entry[1]] = int(entry[0])\n    else:\n        attempts[entry[1]] += 1\n\n# Count the number of problems solved\nsolved = 0\nfor problem in problems:\n    if problems[problem] == 1:\n        solved += 1\n\n# Calculate the time score\ntimeScore = 0\nfor problem in problems:\n    if problems[problem] == 1:\n        timeScore += times[problem]\n    else:\n        timeScore += (attempts[problem] - 1) * 20\n\n# Print the results\nprint(solved, timeScore)\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\n# Read in the input\ninput = sys.stdin.readlines()\n\n# Parse the input\nlog = []\nfor line in input:\n    if line == \"-1\\n\":\n        break\n    log.append(line.split())\n\n# Create a dictionary of the problems and the number of times they\n# were solved\nproblems = {}\nfor entry in log:\n    problems[entry[1]] = 0\n\n# Create a dictionary of the problems and the number of times they\n# were attempted\nattempts = {}\nfor entry in log:\n    attempts[entry[1]] = 0\n\n# Create a dictionary of the problems and the time it took to solve\n# them\ntimes = {}\nfor entry in log:\n    times[entry[1]] = 0\n\n# Loop through the log and find out how many problems were solved\n# and how many attempts it took to solve them\nfor entry in log:\n    if entry[2] == \"right\":\n        problems[entry[1]] += 1\n        attempts[entry[1]] += 1\n        times[entry[1]] = int(entry[0])\n    else:\n        attempts[entry[1]] += 1\n\n# Count the number of problems solved\nsolved = 0\nfor problem in problems:\n    if problems[problem] == 1:\n        solved += 1\n\n# Calculate the time score\ntimeScore = 0\nfor problem in problems:\n    if problems[problem] == 1:\n        timeScore += times[problem]\n    else:\n        timeScore += (attempts[problem] - 1) * 20\n\n# Print the results\nprint(solved, timeScore)\n"
    }
  ],
  "created": 1649746355,
  "object": "edit"
}
2022-04-12 02:52:37.971382 fix syntax errors 2 ['\nimport sys\n\n# Read in the input\ninput = sys.stdin.readlines()\n\n# Parse the input\nlog = []\nfor line in input:\n    if line == "-1\\n":\n        break\n    log.append(line.split())\n\n# Create a dictionary of the problems and the number of times they\n# were solved\nproblems = {}\nfor entry in log:\n    problems[entry[1]] = 0\n\n# Create a dictionary of the problems and the number of times they\n# were attempted\nattempts = {}\nfor entry in log:\n    attempts[entry[1]] = 0\n\n# Create a dictionary of the problems and the time it took to solve\n# them\ntimes = {}\nfor entry in log:\n    times[entry[1]] = 0\n\n# Loop through the log and find out how many problems were solved\n# and how many attempts it took to solve them\nfor entry in log:\n    if entry[2] == "right":\n        problems[entry[1]] += 1\n        attempts[entry[1]] += 1\n        times[entry[1]] = int(entry[0])\n    else:\n        attempts[entry[1]] += 1\n\n# Count the number of problems solved\nsolved = 0\nfor problem in problems:\n    if problems[problem] == 1:\n        solved += 1\n\n# Calculate the time score\ntimeScore = 0\nfor problem in problems:\n    if problems[problem] == 1:\n        timeScore += times[problem]\n    else:\n        timeScore += (attempts[problem] - 1) * 20\n\n# Print the results\nprint(solved, timeScore)\n', '\nimport sys\n\n# Read in the input\ninput = sys.stdin.readlines()\n\n# Parse the input\nlog = []\nfor line in input:\n    if line == "-1\\n":\n        break\n    log.append(line.split())\n\n# Create a dictionary of the problems and the number of times they\n# were solved\nproblems = {}\nfor entry in log:\n    problems[entry[1]] = 0\n\n# Create a dictionary of the problems and the number of times they\n# were attempted\nattempts = {}\nfor entry in log:\n    attempts[entry[1]] = 0\n\n# Create a dictionary of the problems and the time it took to solve\n# them\ntimes = {}\nfor entry in log:\n    times[entry[1]] = 0\n\n# Loop through the log and find out how many problems were solved\n# and how many attempts it took to solve them\nfor entry in log:\n    if entry[2] == "right":\n        problems[entry[1]] += 1\n        attempts[entry[1]] += 1\n        times[entry[1]] = int(entry[0])\n    else:\n        attempts[entry[1]] += 1\n\n# Count the number of problems solved\nsolved = 0\nfor problem in problems:\n    if problems[problem] == 1:\n        solved += 1\n\n# Calculate the time score\ntimeScore = 0\nfor problem in problems:\n    if problems[problem] == 1:\n        timeScore += times[problem]\n    else:\n        timeScore += (attempts[problem] - 1) * 20\n\n# Print the results\nprint(solved, timeScore)\n']
2022-04-12 02:52:55.710774 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\n# Read in the input\ninput = sys.stdin.readlines()\n\n# Parse the input\nlog = []\nfor line in input:\n    if line == \"-1\\n\":\n        break\n    log.append(line.split())\n\n# Create a dictionary of the problems and the number of times it\n# were solved\nproblems = {}\nfor entry in log:\n    problems[entry[1]] = 0  # noqa: E741\n\n# Create a dictionary of the problems and the number of times it\n# were attempted\nattempts = {}\nfor entry in log:\n    attempts[entry[1]] = 0  # noqa: E741\n\n# Create a dictionary of the problems and the time it took to solve it\ntimes = {}\nfor entry in log:\n    times[entry[1]] = 0  # noqa: E741\n\n# Loop through the log and find out how many problems were solved\n# and how many attempts it took to solve them\nfor entry in log:\n    if entry[2] == \"right\":\n        problems[entry[1]] += 1\n        attempts[entry[1]] += 1\n        times[entry[1]] = int(entry[0])  # noqa: E741\n    else:\n        attempts[entry[1]] += 1  # noqa: E741\n\n# Count the number of problems solved\nsolved = 0\nfor problem in problems:\n    if problems[problem] == 1:\n        solved += 1\n\n# Calculate the time score\ntimeScore = 0\nfor problem in problems:\n    if problems[problem] == 1:\n        timeScore += times[problem]\n    else:\n        timeScore += (attempts[problem] - 1) * 20\n\n# Print the results\nprint(solved, timeScore)\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    # Read in the input\n    input = sys.stdin.readlines()\n\n    # Parse the input\n    log = []\n    for line in input:\n        if line == \"-1\\n\":\n            break\n        log.append(line.split())\n\n    # Create a dictionary of the problems and the number of times it\n    # were solved\n    problems = {}\n    for entry in log:\n        problems[entry[1]] = 0\n\n    # Create a dictionary of the problems and the number of times it\n    # were attempted\n    attempts = {}\n    for entry in log:\n        attempts[entry[1]] = 0\n\n    # Create a dictionary of the problems and the time it took to solve it\n    times = {}\n    for entry in log:\n        times[entry[1]] = 0\n\n    # Loop through the log and find out how many problems were solved\n    # and how many attempts it took to solve them\n    for entry in log:\n        if entry[2] == \"right\":\n            problems[entry[1]] += 1\n            attempts[entry[1]] += 1\n            times[entry[1]] = int(entry[0])\n        else:\n            attempts[entry[1]] += 1\n\n    # Count the number of problems solved\n    solved = 0\n    for problem in problems:\n        if problems[problem] == 1:\n            solved += 1\n\n    # Calculate the time score\n    timeScore = 0\n    for problem in problems:\n        if problems[problem] == 1:\n            timeScore += times[problem]\n        else:\n            timeScore += (attempts[problem] - 1) * 20\n\n    # Print the results\n    print(solved, timeScore)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649746358,
  "object": "edit"
}
2022-04-12 02:52:55.711029 fix syntax errors 2 ['\nimport sys\n\n# Read in the input\ninput = sys.stdin.readlines()\n\n# Parse the input\nlog = []\nfor line in input:\n    if line == "-1\\n":\n        break\n    log.append(line.split())\n\n# Create a dictionary of the problems and the number of times it\n# were solved\nproblems = {}\nfor entry in log:\n    problems[entry[1]] = 0  # noqa: E741\n\n# Create a dictionary of the problems and the number of times it\n# were attempted\nattempts = {}\nfor entry in log:\n    attempts[entry[1]] = 0  # noqa: E741\n\n# Create a dictionary of the problems and the time it took to solve it\ntimes = {}\nfor entry in log:\n    times[entry[1]] = 0  # noqa: E741\n\n# Loop through the log and find out how many problems were solved\n# and how many attempts it took to solve them\nfor entry in log:\n    if entry[2] == "right":\n        problems[entry[1]] += 1\n        attempts[entry[1]] += 1\n        times[entry[1]] = int(entry[0])  # noqa: E741\n    else:\n        attempts[entry[1]] += 1  # noqa: E741\n\n# Count the number of problems solved\nsolved = 0\nfor problem in problems:\n    if problems[problem] == 1:\n        solved += 1\n\n# Calculate the time score\ntimeScore = 0\nfor problem in problems:\n    if problems[problem] == 1:\n        timeScore += times[problem]\n    else:\n        timeScore += (attempts[problem] - 1) * 20\n\n# Print the results\nprint(solved, timeScore)\n', '\nimport sys\n\ndef main():\n    # Read in the input\n    input = sys.stdin.readlines()\n\n    # Parse the input\n    log = []\n    for line in input:\n        if line == "-1\\n":\n            break\n        log.append(line.split())\n\n    # Create a dictionary of the problems and the number of times it\n    # were solved\n    problems = {}\n    for entry in log:\n        problems[entry[1]] = 0\n\n    # Create a dictionary of the problems and the number of times it\n    # were attempted\n    attempts = {}\n    for entry in log:\n        attempts[entry[1]] = 0\n\n    # Create a dictionary of the problems and the time it took to solve it\n    times = {}\n    for entry in log:\n        times[entry[1]] = 0\n\n    # Loop through the log and find out how many problems were solved\n    # and how many attempts it took to solve them\n    for entry in log:\n        if entry[2] == "right":\n            problems[entry[1]] += 1\n            attempts[entry[1]] += 1\n            times[entry[1]] = int(entry[0])\n        else:\n            attempts[entry[1]] += 1\n\n    # Count the number of problems solved\n    solved = 0\n    for problem in problems:\n        if problems[problem] == 1:\n            solved += 1\n\n    # Calculate the time score\n    timeScore = 0\n    for problem in problems:\n        if problems[problem] == 1:\n            timeScore += times[problem]\n        else:\n            timeScore += (attempts[problem] - 1) * 20\n\n    # Print the results\n    print(solved, timeScore)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 02:52:55.711077 size on output set 3
2022-04-12 02:52:55.711089 num operations 2
2022-04-12 02:52:55.711095 size on input set 1
2022-04-12 02:52:59.718852 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    numberOfProblems = 1\n    time = 0\n    currentTime = 0\n    currentProblem = \"\"\n    problems = []\n    times = []\n    wrongs = []\n    while True:\n        line = input()\n        if line == \"-1\":\n            break\n        line = line.split(\" \")\n        currentTime = int(line[0])\n        currentProblem = line[1]\n        if line[2] == \"right\":\n            if currentProblem not in problems:\n                time += currentTime\n                problems.append(currentProblem)\n                times.append(currentTime)\n                wrongs.append(0)\n        else:\n            if currentProblem not in problems:\n                problems.append(currentProblem)\n                times.append(currentTime)\n                wrongs.append(1)\n            else:\n                index = problems.index(currentProblem)\n                wrongs[index] += 1\n\n    for i in range(len(problems)):\n        if wrongs[i] > 0:\n            time += wrongs[i] * 20\n\n    print(numberOfProblems, time)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    numberOfProblems = 1\n    time = 0\n    currentTime = 0\n    currentProblem = \"\"\n    problems = []\n    times = []\n    wrongs = []\n    while True:\n        line = input()\n        if line == \"-1\":\n            break\n        line = line.split(\" \")\n        currentTime = int(line[0])\n        currentProblem = line[1]\n        if line[2] == \"right\":\n            if currentProblem not in problems:\n                numberOfProblems += 1.0\n                time += currentTime\n                problems.append(currentProblem)\n                times.append(currentTime)\n                wrongs.append(1)\n        else:\n            if currentProblem not in problems:\n                problems.append(currentProblem)\n                times.append(currentTime)\n                wrongs.append(0)\n            else:\n                index = problems.index(currentProblem)\n                wrongs[index] += 1\n\n    for i in range(len(problems)):\n        if wrongs[i] == 0:\n            time += wrongs[i] * 20\n\n    print(numberOfProblems, time)\n\nmain()\n"
    }
  ],
  "created": 1649746375,
  "object": "edit"
}
2022-04-12 02:52:59.719302 fix spelling mistakes 2 ['\n\ndef main():\n    numberOfProblems = 1\n    time = 0\n    currentTime = 0\n    currentProblem = ""\n    problems = []\n    times = []\n    wrongs = []\n    while True:\n        line = input()\n        if line == "-1":\n            break\n        line = line.split(" ")\n        currentTime = int(line[0])\n        currentProblem = line[1]\n        if line[2] == "right":\n            if currentProblem not in problems:\n                time += currentTime\n                problems.append(currentProblem)\n                times.append(currentTime)\n                wrongs.append(0)\n        else:\n            if currentProblem not in problems:\n                problems.append(currentProblem)\n                times.append(currentTime)\n                wrongs.append(1)\n            else:\n                index = problems.index(currentProblem)\n                wrongs[index] += 1\n\n    for i in range(len(problems)):\n        if wrongs[i] > 0:\n            time += wrongs[i] * 20\n\n    print(numberOfProblems, time)\n\nmain()\n', '\n\ndef main():\n    numberOfProblems = 1\n    time = 0\n    currentTime = 0\n    currentProblem = ""\n    problems = []\n    times = []\n    wrongs = []\n    while True:\n        line = input()\n        if line == "-1":\n            break\n        line = line.split(" ")\n        currentTime = int(line[0])\n        currentProblem = line[1]\n        if line[2] == "right":\n            if currentProblem not in problems:\n                numberOfProblems += 1.0\n                time += currentTime\n                problems.append(currentProblem)\n                times.append(currentTime)\n                wrongs.append(1)\n        else:\n            if currentProblem not in problems:\n                problems.append(currentProblem)\n                times.append(currentTime)\n                wrongs.append(0)\n            else:\n                index = problems.index(currentProblem)\n                wrongs[index] += 1\n\n    for i in range(len(problems)):\n        if wrongs[i] == 0:\n            time += wrongs[i] * 20\n\n    print(numberOfProblems, time)\n\nmain()\n']
2022-04-12 02:52:59.719386 size on output set 2
2022-04-12 02:52:59.719398 size on input set 2
2022-04-12 02:53:02.493349 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    numberOfProblems = 1\n    time = 0\n    currentTime = 0\n    currentProblem = \"\"\n    problems = []\n    times = []\n    wrongs = []\n    while True:\n        line = input()\n        if line == \"-1\":\n            break\n        line = line.split(\" \")\n        currentTime = int(line[0])\n        currentProblem = line[1]\n        if line[2] == \"right\":\n            if currentProblem not in problems:\n                numberOfProblems += 1\n                time += currentTime\n                problems.append(currentProblem)\n                times.append(currentTime)\n                wrongs.append(1)\n        else:\n            if currentProblem not in problems:\n                problems.append(currentProblem)\n                times.append(currentTime)\n                wrongs.append(0)\n            else:\n                index = problems.index(currentProblem)\n                wrongs[index] += 1\n\n    for i in range(len(problems)):\n        if wrongs[i] == 0:\n            time += wrongs[i] * 20\n\n    print(numberOfProblems, time)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    numberOfProblems = 0\n    time = 0\n    currentTime = 0\n    currentProblem = \"\"\n    problems = []\n    times = []\n    wrongs = []\n    while True:\n        line = input()\n        if line == \"-1\":\n            break\n        line = line.split(\" \")\n        currentTime = int(line[0])\n        currentProblem = line[1]\n        if line[2] == \"right\":\n            if currentProblem not in problems:\n                numberOfProblems += 1\n                time += currentTime\n                problems.append(currentProblem)\n                times.append(currentTime)\n                wrongs.append(1)\n        else:\n            if currentProblem not in problems:\n                problems.append(currentProblem)\n                times.append(currentTime)\n                wrongs.append(0)\n            else:\n                index = problems.index(currentProblem)\n                wrongs[index] += 1\n\n    for i in range(len(problems)):\n        if wrongs[i] == 0:\n            time += wrongs[i] * 20\n\n    print(numberOfProblems, time)\n\nmain()\n"
    }
  ],
  "created": 1649746379,
  "object": "edit"
}
2022-04-12 02:53:02.493546 fix syntax errors 2 ['\n\ndef main():\n    numberOfProblems = 1\n    time = 0\n    currentTime = 0\n    currentProblem = ""\n    problems = []\n    times = []\n    wrongs = []\n    while True:\n        line = input()\n        if line == "-1":\n            break\n        line = line.split(" ")\n        currentTime = int(line[0])\n        currentProblem = line[1]\n        if line[2] == "right":\n            if currentProblem not in problems:\n                numberOfProblems += 1\n                time += currentTime\n                problems.append(currentProblem)\n                times.append(currentTime)\n                wrongs.append(1)\n        else:\n            if currentProblem not in problems:\n                problems.append(currentProblem)\n                times.append(currentTime)\n                wrongs.append(0)\n            else:\n                index = problems.index(currentProblem)\n                wrongs[index] += 1\n\n    for i in range(len(problems)):\n        if wrongs[i] == 0:\n            time += wrongs[i] * 20\n\n    print(numberOfProblems, time)\n\nmain()\n', '\n\ndef main():\n    numberOfProblems = 0\n    time = 0\n    currentTime = 0\n    currentProblem = ""\n    problems = []\n    times = []\n    wrongs = []\n    while True:\n        line = input()\n        if line == "-1":\n            break\n        line = line.split(" ")\n        currentTime = int(line[0])\n        currentProblem = line[1]\n        if line[2] == "right":\n            if currentProblem not in problems:\n                numberOfProblems += 1\n                time += currentTime\n                problems.append(currentProblem)\n                times.append(currentTime)\n                wrongs.append(1)\n        else:\n            if currentProblem not in problems:\n                problems.append(currentProblem)\n                times.append(currentTime)\n                wrongs.append(0)\n            else:\n                index = problems.index(currentProblem)\n                wrongs[index] += 1\n\n    for i in range(len(problems)):\n        if wrongs[i] == 0:\n            time += wrongs[i] * 20\n\n    print(numberOfProblems, time)\n\nmain()\n']
2022-04-12 02:53:05.678651 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    numberOfProblems = 0\n    time = 0\n    currentTime = 0\n    currentProblem = \"\"\n    problems = []\n    times = []\n    wrongs = []\n    while True:\n        line = input()\n        if line == \"-1\":\n            break\n        line = line.split(\" \")\n        currentTime = int(line[0])\n        currentProblem = line[1]\n        if line[2] == \"right\":\n            if currentProblem not in problems:\n                time += currentTime\n                problems.append(currentProblem)\n                times.append(currentTime)\n                wrongs.append(0)\n        else:\n            if currentProblem not in problems:\n                problems.append(currentProblem)\n                times.append(currentTime)\n                wrongs.append(1)\n            else:\n                index = problems.index(currentProblem)\n                wrongs[index] += 1\n\n    for i in range(len(problems)):\n        if wrongs[i] > 0:\n            time += wrongs[i] * 20\n\n    print(numberOfProblems, time)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    numberOfProblems = 0\n    time = 0\n    currentTime = 0\n    currentProblem = \"\"\n    problems = []\n    times = []\n    wrongs = []\n    while True:\n        line = input()\n        if line == \"-1\":\n            break\n        line = line.split(\" \")\n        currentTime = int(line[0])\n        currentProblem = line[1]\n        if line[2] == \"right\":\n            if currentProblem not in problems:\n                time += currentTime\n                problems.append(currentProblem)\n                times.append(currentTime)\n                wrongs.append(0)\n                numberOfProblems += 1\n        else:\n            if currentProblem not in problems:\n                problems.append(currentProblem)\n                times.append(currentTime)\n                wrongs.append(1)\n            else:\n                index = problems.index(currentProblem)\n                wrongs[index] += 1\n\n    for i in range(len(problems)):\n        if wrongs[i] > 0:\n            time += wrongs[i] * 20\n\n        print(numberOfProblems, time)\n\nmain()\n"
    }
  ],
  "created": 1649746382,
  "object": "edit"
}
2022-04-12 02:53:05.678864 fix syntax errors 2 ['\n\ndef main():\n    numberOfProblems = 0\n    time = 0\n    currentTime = 0\n    currentProblem = ""\n    problems = []\n    times = []\n    wrongs = []\n    while True:\n        line = input()\n        if line == "-1":\n            break\n        line = line.split(" ")\n        currentTime = int(line[0])\n        currentProblem = line[1]\n        if line[2] == "right":\n            if currentProblem not in problems:\n                time += currentTime\n                problems.append(currentProblem)\n                times.append(currentTime)\n                wrongs.append(0)\n        else:\n            if currentProblem not in problems:\n                problems.append(currentProblem)\n                times.append(currentTime)\n                wrongs.append(1)\n            else:\n                index = problems.index(currentProblem)\n                wrongs[index] += 1\n\n    for i in range(len(problems)):\n        if wrongs[i] > 0:\n            time += wrongs[i] * 20\n\n    print(numberOfProblems, time)\n\nmain()\n', '\n\ndef main():\n    numberOfProblems = 0\n    time = 0\n    currentTime = 0\n    currentProblem = ""\n    problems = []\n    times = []\n    wrongs = []\n    while True:\n        line = input()\n        if line == "-1":\n            break\n        line = line.split(" ")\n        currentTime = int(line[0])\n        currentProblem = line[1]\n        if line[2] == "right":\n            if currentProblem not in problems:\n                time += currentTime\n                problems.append(currentProblem)\n                times.append(currentTime)\n                wrongs.append(0)\n                numberOfProblems += 1\n        else:\n            if currentProblem not in problems:\n                problems.append(currentProblem)\n                times.append(currentTime)\n                wrongs.append(1)\n            else:\n                index = problems.index(currentProblem)\n                wrongs[index] += 1\n\n    for i in range(len(problems)):\n        if wrongs[i] > 0:\n            time += wrongs[i] * 20\n\n        print(numberOfProblems, time)\n\nmain()\n']
2022-04-12 02:53:05.678891 size on output set 4
2022-04-12 02:53:05.678899 num operations 2
2022-04-12 02:53:05.678902 size on input set 1
2022-04-12 02:53:10.154753 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    # Read in the input\n    input_lines = []\n    while True:\n        line = input()\n        if line == '-1':\n            break\n        input_lines.append(line)\n\n    # Split the input into a list of lists\n    input_list = [line.split() for line in input_lines]\n\n    # Create a dictionary to hold the problem and the time\n    problem_dict = {}\n    for entry in input_list:\n        problem_dict[entry[1]] = int(entry[0])\n\n    # Create a dictionary to hold the problem and the number of attempts\n    attempts_dict = {}\n    for entry in input_list:\n        if entry[1] not in attempts_dict.keys():\n            attempts_dict[entry[1]] = 0\n        attempts_dict[entry[1]] += 1\n\n    # Create a dictionary to hold the problem and the number of right/wrong\n    right_wrong_dict = {}\n    for entry in input_list:\n        if entry[1] not in right_wrong_dict.keys():\n            right_wrong_dict[entry[1]] = 0\n        if entry[2] == 'right':\n            right_wrong_dict[entry[1]] += 1\n        else:\n            right_wrong_dict[entry[1]] -= 1\n\n    # Create a dictionary to hold the problem and the penalty\n    penalty_dict = {}\n    for key, value in right_wrong_dict.items():\n        if value > 0:\n            penalty_dict[key] = (attempts_dict[key]-1)*20\n        else:\n            penalty_dict[key] = 0\n\n    # Create a dictionary to hold the problem and the time with penalty\n    time_penalty_dict = {}\n    for key, value in problem_dict.items():\n        time_penalty_dict[key] = value + penalty_dict[key]\n\n    # Create a list of all of the problems that were solved\n    solved_list = []\n    for key, value in right_wrong_dict.items():\n        if value > 0:\n            solved_list.append(key)\n\n    # Calculate the number of problems solved and the total time penalty\n    number_of_problems_solved = len(solved_list)\n    total_time_penalty = sum([time_penalty_dict[problem] for problem in solved_list])\n\n    # Output the results\n    print(number_of_problems_solved, total_time_penalty)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    # Read in the input\n    input_lines = []\n    while True:\n        line = input()\n        if line == '-1':\n            break\n        input_lines.append(line)\n\n    # Split the input into a list of lists\n    input_list = [line.split() for line in input_lines]\n\n    # Create a dictionary to hold the problem and the time\n    problem_dict = {}\n    for entry in input_list:\n        problem_dict[entry[1]] = int(entry[0])\n\n    # Create a dictionary to hold the problem and the number of attempts\n    attempts_dict = {}\n    for entry in input_list:\n        if entry[1] not in attempts_dict.keys():\n            attempts_dict[entry[1]] = 0\n        attempts_dict[entry[1]] += 1\n\n    # Create a dictionary to hold the problem and the number of right/wrong\n    right_wrong_dict = {}\n    for entry in input_list:\n        if entry[1] not in right_wrong_dict.keys():\n            right_wrong_dict[entry[1]] = 0\n        if entry[2] == 'right':\n            right_wrong_dict[entry[1]] += 1\n        else:\n            right_wrong_dict[entry[1]] -= 1\n\n    # Create a dictionary to hold the problem and the penalty\n    penalty_dict = {}\n    for key, value in right_wrong_dict.items():\n        if value > 0:\n            penalty_dict[key] = (attempts_dict[key]-1)*20\n        else:\n            penalty_dict[key] = 0\n\n    # Create a dictionary to hold the problem and the time with penalty\n    time_penalty_dict = {}\n    for key, value in problem_dict.items():\n        time_penalty_dict[key] = value + penalty_dict[key]\n\n    # Create a list of all of the problems that were solved\n    solved_list = []\n    for key, value in right_wrong_dict.items():\n        if value > 0:\n            solved_list.append(key)\n\n    # Calculate the number of problems solved and the total time penalty\n    number_of_problems_solved = len(solved_list)\n    total_time_penalty = sum([time_penalty_dict[problem] for problem in solved_list])\n\n    # Output the results\n    print(number_of_problems_solved, total_time_penalty)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649746385,
  "object": "edit"
}
2022-04-12 02:53:10.155048 fix spelling mistakes 2 ['\n\ndef main():\n    """\n    Main function.\n    """\n    # Read in the input\n    input_lines = []\n    while True:\n        line = input()\n        if line == \'-1\':\n            break\n        input_lines.append(line)\n\n    # Split the input into a list of lists\n    input_list = [line.split() for line in input_lines]\n\n    # Create a dictionary to hold the problem and the time\n    problem_dict = {}\n    for entry in input_list:\n        problem_dict[entry[1]] = int(entry[0])\n\n    # Create a dictionary to hold the problem and the number of attempts\n    attempts_dict = {}\n    for entry in input_list:\n        if entry[1] not in attempts_dict.keys():\n            attempts_dict[entry[1]] = 0\n        attempts_dict[entry[1]] += 1\n\n    # Create a dictionary to hold the problem and the number of right/wrong\n    right_wrong_dict = {}\n    for entry in input_list:\n        if entry[1] not in right_wrong_dict.keys():\n            right_wrong_dict[entry[1]] = 0\n        if entry[2] == \'right\':\n            right_wrong_dict[entry[1]] += 1\n        else:\n            right_wrong_dict[entry[1]] -= 1\n\n    # Create a dictionary to hold the problem and the penalty\n    penalty_dict = {}\n    for key, value in right_wrong_dict.items():\n        if value > 0:\n            penalty_dict[key] = (attempts_dict[key]-1)*20\n        else:\n            penalty_dict[key] = 0\n\n    # Create a dictionary to hold the problem and the time with penalty\n    time_penalty_dict = {}\n    for key, value in problem_dict.items():\n        time_penalty_dict[key] = value + penalty_dict[key]\n\n    # Create a list of all of the problems that were solved\n    solved_list = []\n    for key, value in right_wrong_dict.items():\n        if value > 0:\n            solved_list.append(key)\n\n    # Calculate the number of problems solved and the total time penalty\n    number_of_problems_solved = len(solved_list)\n    total_time_penalty = sum([time_penalty_dict[problem] for problem in solved_list])\n\n    # Output the results\n    print(number_of_problems_solved, total_time_penalty)\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    """\n    Main function.\n    """\n    # Read in the input\n    input_lines = []\n    while True:\n        line = input()\n        if line == \'-1\':\n            break\n        input_lines.append(line)\n\n    # Split the input into a list of lists\n    input_list = [line.split() for line in input_lines]\n\n    # Create a dictionary to hold the problem and the time\n    problem_dict = {}\n    for entry in input_list:\n        problem_dict[entry[1]] = int(entry[0])\n\n    # Create a dictionary to hold the problem and the number of attempts\n    attempts_dict = {}\n    for entry in input_list:\n        if entry[1] not in attempts_dict.keys():\n            attempts_dict[entry[1]] = 0\n        attempts_dict[entry[1]] += 1\n\n    # Create a dictionary to hold the problem and the number of right/wrong\n    right_wrong_dict = {}\n    for entry in input_list:\n        if entry[1] not in right_wrong_dict.keys():\n            right_wrong_dict[entry[1]] = 0\n        if entry[2] == \'right\':\n            right_wrong_dict[entry[1]] += 1\n        else:\n            right_wrong_dict[entry[1]] -= 1\n\n    # Create a dictionary to hold the problem and the penalty\n    penalty_dict = {}\n    for key, value in right_wrong_dict.items():\n        if value > 0:\n            penalty_dict[key] = (attempts_dict[key]-1)*20\n        else:\n            penalty_dict[key] = 0\n\n    # Create a dictionary to hold the problem and the time with penalty\n    time_penalty_dict = {}\n    for key, value in problem_dict.items():\n        time_penalty_dict[key] = value + penalty_dict[key]\n\n    # Create a list of all of the problems that were solved\n    solved_list = []\n    for key, value in right_wrong_dict.items():\n        if value > 0:\n            solved_list.append(key)\n\n    # Calculate the number of problems solved and the total time penalty\n    number_of_problems_solved = len(solved_list)\n    total_time_penalty = sum([time_penalty_dict[problem] for problem in solved_list])\n\n    # Output the results\n    print(number_of_problems_solved, total_time_penalty)\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-12 02:53:10.155128 size on output set 1
2022-04-12 02:53:10.155135 size on input set 1
2022-04-12 02:53:18.306324 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    # Read in the input\n    input_lines = []\n    while True:\n        line = input()\n        if line == '-1':\n            break\n        input_lines.append(line)\n\n    # Split the input into a list of lists\n    input_list = [line.split() for line in input_lines]\n\n    # Create a dictionary to hold the problem and the time\n    problem_dict = {}\n    for entry in input_list:\n        problem_dict[entry[1]] = int(entry[0])\n\n    # Create a dictionary to hold the problem and the number of attempts\n    attempts_dict = {}\n    for entry in input_list:\n        if entry[1] not in attempts_dict.keys():\n            attempts_dict[entry[1]] = 0\n        attempts_dict[entry[1]] += 1\n\n    # Create a dictionary to hold the problem and the number of right/wrong\n    right_wrong_dict = {}\n    for entry in input_list:\n        if entry[1] not in right_wrong_dict.keys():\n            right_wrong_dict[entry[1]] = 0\n        if entry[2] == 'right':\n            right_wrong_dict[entry[1]] += 1\n        else:\n            right_wrong_dict[entry[1]] -= 1\n\n    # Create a dictionary to hold the problem and the penalty\n    penalty_dict = {}\n    for key, value in right_wrong_dict.items():\n        if value > 0:\n            penalty_dict[key] = (attempts_dict[key] - 1) * 20\n        else:\n            penalty_dict[key] = 0\n\n    # Create a dictionary to hold the problem and the time with penalty\n    time_penalty_dict = {}\n    for key, value in problem_dict.items():\n        time_penalty_dict[key] = value + penalty_dict[key]\n\n    # Create a list of all of the problems that were solved\n    solved_list = []\n    for key, value in right_wrong_dict.items():\n        if value > 0:\n            solved_list.append(key)\n\n    # Calculate the number of problems solved and the total time penalty\n    number_of_problems_solved = len(solved_list)\n    total_time_penalty = sum([time_penalty_dict[problem] for problem in solved_list])\n\n    # Output the results\n    print(number_of_problems_solved, total_time_penalty)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    # Read in the input\n    input_lines = []\n    while True:\n        line = input()\n        if line == '-1':\n            break\n        input_lines.append(line)\n\n    # Split the input into a list of lists.\n    input_list = [line.split() for line in input_lines]\n\n    # Create a dictionary to hold the problem and the time.\n    problem_dict = {}\n    for entry in input_list:\n        problem_dict[entry[1]] = int(entry[0])\n\n        # Create a dictionary to hold the problem and the number of attempts.\n    attempts_dict = {}\n    for entry in input_list:\n        if entry[1] not in attempts_dict.keys():\n            attempts_dict[entry[1]] = 0\n        attempts_dict[entry[1]] += 1\n\n        # Create a dictionary to hold the problem and the number of right/wrong.\n    right_wrong_dict = {}\n    for entry in input_list:\n        if entry[1] not in right_wrong_dict.keys():\n            right_wrong_dict[entry[1]] = 0\n        if entry[2] == 'right':\n            right_wrong_dict[entry[1]] += 1\n        else:\n            right_wrong_dict[entry[1]] -= 1\n\n    # Create a dictionary to hold the problem and the penalty.\n    penalty_dict = {}\n    for key, value in right_wrong_dict.items():\n        if value > 0:\n            penalty_dict[key] = (attempts_dict[key]-1)*20\n        else:\n            penalty_dict[key] = 0\n\n    # Create a dictionary to hold the problem and the time with penalty.\n    time_penalty_dict = {}\n    for key, value in problem_dict.items():\n        time_penalty_dict[key] = value + penalty_dict[key]\n\n    # Create a list of all of the problems that were solved\n    solved_list = []\n    for key, value in right_wrong_dict.items():\n        if value > 0:\n            solved_list.append(key)\n\n    # Calculate the number of problems solved and the total time penalty\n    number_of_problems_solved = len(solved_list)\n    total_time_penalty = sum([time_penalty_dict[problem] for problem in solved_list])\n\n    # Output the results\n    print(number_of_problems_solved, total_time_penalty)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649746390,
  "object": "edit"
}
2022-04-12 02:53:18.306535 fix syntax errors 2 ['\n\ndef main():\n    """\n    Main function.\n    """\n    # Read in the input\n    input_lines = []\n    while True:\n        line = input()\n        if line == \'-1\':\n            break\n        input_lines.append(line)\n\n    # Split the input into a list of lists\n    input_list = [line.split() for line in input_lines]\n\n    # Create a dictionary to hold the problem and the time\n    problem_dict = {}\n    for entry in input_list:\n        problem_dict[entry[1]] = int(entry[0])\n\n    # Create a dictionary to hold the problem and the number of attempts\n    attempts_dict = {}\n    for entry in input_list:\n        if entry[1] not in attempts_dict.keys():\n            attempts_dict[entry[1]] = 0\n        attempts_dict[entry[1]] += 1\n\n    # Create a dictionary to hold the problem and the number of right/wrong\n    right_wrong_dict = {}\n    for entry in input_list:\n        if entry[1] not in right_wrong_dict.keys():\n            right_wrong_dict[entry[1]] = 0\n        if entry[2] == \'right\':\n            right_wrong_dict[entry[1]] += 1\n        else:\n            right_wrong_dict[entry[1]] -= 1\n\n    # Create a dictionary to hold the problem and the penalty\n    penalty_dict = {}\n    for key, value in right_wrong_dict.items():\n        if value > 0:\n            penalty_dict[key] = (attempts_dict[key] - 1) * 20\n        else:\n            penalty_dict[key] = 0\n\n    # Create a dictionary to hold the problem and the time with penalty\n    time_penalty_dict = {}\n    for key, value in problem_dict.items():\n        time_penalty_dict[key] = value + penalty_dict[key]\n\n    # Create a list of all of the problems that were solved\n    solved_list = []\n    for key, value in right_wrong_dict.items():\n        if value > 0:\n            solved_list.append(key)\n\n    # Calculate the number of problems solved and the total time penalty\n    number_of_problems_solved = len(solved_list)\n    total_time_penalty = sum([time_penalty_dict[problem] for problem in solved_list])\n\n    # Output the results\n    print(number_of_problems_solved, total_time_penalty)\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    """\n    Main function.\n    """\n    # Read in the input\n    input_lines = []\n    while True:\n        line = input()\n        if line == \'-1\':\n            break\n        input_lines.append(line)\n\n    # Split the input into a list of lists.\n    input_list = [line.split() for line in input_lines]\n\n    # Create a dictionary to hold the problem and the time.\n    problem_dict = {}\n    for entry in input_list:\n        problem_dict[entry[1]] = int(entry[0])\n\n        # Create a dictionary to hold the problem and the number of attempts.\n    attempts_dict = {}\n    for entry in input_list:\n        if entry[1] not in attempts_dict.keys():\n            attempts_dict[entry[1]] = 0\n        attempts_dict[entry[1]] += 1\n\n        # Create a dictionary to hold the problem and the number of right/wrong.\n    right_wrong_dict = {}\n    for entry in input_list:\n        if entry[1] not in right_wrong_dict.keys():\n            right_wrong_dict[entry[1]] = 0\n        if entry[2] == \'right\':\n            right_wrong_dict[entry[1]] += 1\n        else:\n            right_wrong_dict[entry[1]] -= 1\n\n    # Create a dictionary to hold the problem and the penalty.\n    penalty_dict = {}\n    for key, value in right_wrong_dict.items():\n        if value > 0:\n            penalty_dict[key] = (attempts_dict[key]-1)*20\n        else:\n            penalty_dict[key] = 0\n\n    # Create a dictionary to hold the problem and the time with penalty.\n    time_penalty_dict = {}\n    for key, value in problem_dict.items():\n        time_penalty_dict[key] = value + penalty_dict[key]\n\n    # Create a list of all of the problems that were solved\n    solved_list = []\n    for key, value in right_wrong_dict.items():\n        if value > 0:\n            solved_list.append(key)\n\n    # Calculate the number of problems solved and the total time penalty\n    number_of_problems_solved = len(solved_list)\n    total_time_penalty = sum([time_penalty_dict[problem] for problem in solved_list])\n\n    # Output the results\n    print(number_of_problems_solved, total_time_penalty)\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-12 02:53:18.306599 size on output set 2
2022-04-12 02:53:18.306611 num operations 2
2022-04-12 02:53:18.306617 size on input set 1
2022-04-12 02:53:21.945193 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function that reads in input and outputs the solution.\n    \"\"\"\n    problems = {}\n    current_time = 0\n    for line in sys.stdin:\n        if line.strip() == '-1':\n            break\n        time, problem, result = line.strip().split()\n        time = int(time)\n        current_time = time\n        if problem not in problems:\n            problems[problem] = {'solved': False, 'penalty': 0, 'last_submit': current_time}\n        if result == 'right':\n            problems[problem]['solved'] = True\n            problems[problem]['last_submit'] = current_time\n        else:\n            problems[problem]['penalty'] += 20\n    solved = sum([1 if problem['solved'] else 0 for problem in problems.values()])\n    penalty = sum([problem['penalty'] for problem in problems.values()])\n    submit_time = sum([problem['last_submit'] for problem in problems.values() if problem['solved']])\n    print(solved, submit_time + penalty)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function that reads in input and outputs the solution\n    \"\"\"\n    problems = {}\n    current_time = 0\n    for line in sys.stdin:\n        if line.strip() == '-1':\n            break\n        time, problem, result = line.strip().split()\n        time = int(time)\n        current_time = time\n        if problem not in problems:\n            problems[problem] = {'solved': False, 'penalty': 0, 'last_submit': current_time}\n        if result == 'right':\n            problems[problem]['solved'] = True\n            problems[problem]['last_submit'] = current_time\n        else:\n            problems[problem]['penalty'] += 20\n    solved = sum([1 if problem['solved'] else 0 for problem in problems.values()])\n    penalty = sum([problem['penalty'] for problem in problems.values()])\n    submission_time = sum([problem['last_submit'] for problem in problems.values() if problem['solved']])\n    print(solved, submission_time + penalty)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649746398,
  "object": "edit"
}
2022-04-12 02:53:21.945306 fix spelling mistakes 2 ['\n\ndef main():\n    """\n    Main function that reads in input and outputs the solution.\n    """\n    problems = {}\n    current_time = 0\n    for line in sys.stdin:\n        if line.strip() == \'-1\':\n            break\n        time, problem, result = line.strip().split()\n        time = int(time)\n        current_time = time\n        if problem not in problems:\n            problems[problem] = {\'solved\': False, \'penalty\': 0, \'last_submit\': current_time}\n        if result == \'right\':\n            problems[problem][\'solved\'] = True\n            problems[problem][\'last_submit\'] = current_time\n        else:\n            problems[problem][\'penalty\'] += 20\n    solved = sum([1 if problem[\'solved\'] else 0 for problem in problems.values()])\n    penalty = sum([problem[\'penalty\'] for problem in problems.values()])\n    submit_time = sum([problem[\'last_submit\'] for problem in problems.values() if problem[\'solved\']])\n    print(solved, submit_time + penalty)\n\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    """\n    Main function that reads in input and outputs the solution\n    """\n    problems = {}\n    current_time = 0\n    for line in sys.stdin:\n        if line.strip() == \'-1\':\n            break\n        time, problem, result = line.strip().split()\n        time = int(time)\n        current_time = time\n        if problem not in problems:\n            problems[problem] = {\'solved\': False, \'penalty\': 0, \'last_submit\': current_time}\n        if result == \'right\':\n            problems[problem][\'solved\'] = True\n            problems[problem][\'last_submit\'] = current_time\n        else:\n            problems[problem][\'penalty\'] += 20\n    solved = sum([1 if problem[\'solved\'] else 0 for problem in problems.values()])\n    penalty = sum([problem[\'penalty\'] for problem in problems.values()])\n    submission_time = sum([problem[\'last_submit\'] for problem in problems.values() if problem[\'solved\']])\n    print(solved, submission_time + penalty)\n\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-12 02:53:21.945379 size on output set 2
2022-04-12 02:53:21.945384 size on input set 2
2022-04-12 02:53:25.126718 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\n\ndef main():\n    \"\"\"\n    Main function that reads in input and outputs the solution\n    \"\"\"\n    problems = {}\n    current_time = 0\n    for line in sys.stdin:\n        if line.strip() == '-1':\n            break\n        time, problem, result = line.strip().split()\n        time = int(time)\n        current_time = time\n        if problem not in problems:\n            problems[problem] = {'solved': False, 'penalty': 0, 'last_submit': current_time}\n        if result == 'right':\n            problems[problem]['solved'] = True\n            problems[problem]['last_submit'] = current_time\n        else:\n            problems[problem]['penalty'] += 20\n    solved = sum([1 if problem['solved'] is True else 0 for problem in problems.values()])\n    penalty = sum([problem['penalty'] for problem in problems.values()])\n    submission_time = sum([problem['last_submit'] for problem in problems.values() if problem['solved']])\n    print(solved, submission_time + penalty)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\n\ndef main():\n    \"\"\"\n    Main function that reads in input and outputs the solution\n    \"\"\"\n    problems = {}\n    current_time = 0\n    for line in sys.stdin:\n        if line.strip() == '-1':\n            break\n        time, problem, result = line.strip().split()\n        time = int(time)\n        current_time = time\n        if problem not in problems:\n            problems[problem] = {'solved': False, 'penalty': 0, 'last_submit': current_time}\n        if result == 'right':\n            problems[problem]['solved'] = True\n            problems[problem]['last_submit'] = current_time\n        else:\n            problems[problem]['penalty'] += 20\n    solved = sum([1 if problem['solved'] else 0 for problem in problems.values()])\n    penalty = sum([problem['penalty'] for problem in problems.values()])\n    submission_time = sum([problem['last_submit'] for problem in problems.values() if problem['solved']])\n    print(solved, submission_time + penalty)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649746402,
  "object": "edit"
}
2022-04-12 02:53:25.126953 fix syntax errors 2 ['import sys\n\n\ndef main():\n    """\n    Main function that reads in input and outputs the solution\n    """\n    problems = {}\n    current_time = 0\n    for line in sys.stdin:\n        if line.strip() == \'-1\':\n            break\n        time, problem, result = line.strip().split()\n        time = int(time)\n        current_time = time\n        if problem not in problems:\n            problems[problem] = {\'solved\': False, \'penalty\': 0, \'last_submit\': current_time}\n        if result == \'right\':\n            problems[problem][\'solved\'] = True\n            problems[problem][\'last_submit\'] = current_time\n        else:\n            problems[problem][\'penalty\'] += 20\n    solved = sum([1 if problem[\'solved\'] is True else 0 for problem in problems.values()])\n    penalty = sum([problem[\'penalty\'] for problem in problems.values()])\n    submission_time = sum([problem[\'last_submit\'] for problem in problems.values() if problem[\'solved\']])\n    print(solved, submission_time + penalty)\n\n\nif __name__ == \'__main__\':\n    main()\n', 'import sys\n\n\ndef main():\n    """\n    Main function that reads in input and outputs the solution\n    """\n    problems = {}\n    current_time = 0\n    for line in sys.stdin:\n        if line.strip() == \'-1\':\n            break\n        time, problem, result = line.strip().split()\n        time = int(time)\n        current_time = time\n        if problem not in problems:\n            problems[problem] = {\'solved\': False, \'penalty\': 0, \'last_submit\': current_time}\n        if result == \'right\':\n            problems[problem][\'solved\'] = True\n            problems[problem][\'last_submit\'] = current_time\n        else:\n            problems[problem][\'penalty\'] += 20\n    solved = sum([1 if problem[\'solved\'] else 0 for problem in problems.values()])\n    penalty = sum([problem[\'penalty\'] for problem in problems.values()])\n    submission_time = sum([problem[\'last_submit\'] for problem in problems.values() if problem[\'solved\']])\n    print(solved, submission_time + penalty)\n\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-12 02:53:28.445452 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function that reads in input and outputs the solution.\n    \"\"\"\n    problems = {}\n    current_time = 0\n    for line in sys.stdin:\n        if line.strip() == '-1':\n            break\n        time, problem, result = line.strip().split()\n        time = int(time)\n        current_time = time\n        if problem not in problems:\n            problems[problem] = {'solved': False, 'penalty': 0, 'last_submit': current_time}\n        if result == 'right':\n            problems[problem]['solved'] = True\n            problems[problem]['last_submit'] = current_time\n        else:\n            problems[problem]['penalty'] += 20\n    solved = sum([1 if problem['solved'] else 0 for problem in problems.values()])\n    penalty = sum([problem['penalty'] for problem in problems.values()])\n    submit_time = sum([problem['last_submit'] for problem in problems.values() if problem['solved']]) - current_time\n    print(solved, submit_time + penalty)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\n\n\ndef main():\n    \"\"\"\n    Main function that reads in input and outputs the solution.\n    \"\"\"\n    problems = {}\n    current_time = 0\n    for line in sys.stdin:\n        if line.strip() == '-1':\n            break\n        time, problem, result = line.strip().split()\n        time = int(time)\n        current_time = time\n        if problem not in problems:\n            problems[problem] = {'solved': False, 'penalty': 0, 'last_submit': current_time}\n        if result == 'right':\n            problems[problem]['solved'] = True\n            problems[problem]['last_submit'] = current_time\n        else:\n            problems[problem]['penalty'] += 20\n    solved = sum([1 if problem['solved'] is True else 0 for problem in problems.values()])\n    penalty = sum([problem['penalty'] for problem in problems.values()])\n    submit_time = sum([problem['last_submit'] for problem in problems.values() if problem['solved']])\n    print(solved, submit_time + penalty)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649746405,
  "object": "edit"
}
2022-04-12 02:53:28.445732 fix syntax errors 2 ['\n\ndef main():\n    """\n    Main function that reads in input and outputs the solution.\n    """\n    problems = {}\n    current_time = 0\n    for line in sys.stdin:\n        if line.strip() == \'-1\':\n            break\n        time, problem, result = line.strip().split()\n        time = int(time)\n        current_time = time\n        if problem not in problems:\n            problems[problem] = {\'solved\': False, \'penalty\': 0, \'last_submit\': current_time}\n        if result == \'right\':\n            problems[problem][\'solved\'] = True\n            problems[problem][\'last_submit\'] = current_time\n        else:\n            problems[problem][\'penalty\'] += 20\n    solved = sum([1 if problem[\'solved\'] else 0 for problem in problems.values()])\n    penalty = sum([problem[\'penalty\'] for problem in problems.values()])\n    submit_time = sum([problem[\'last_submit\'] for problem in problems.values() if problem[\'solved\']]) - current_time\n    print(solved, submit_time + penalty)\n\n\nif __name__ == \'__main__\':\n    main()\n', 'import sys\n\n\n\ndef main():\n    """\n    Main function that reads in input and outputs the solution.\n    """\n    problems = {}\n    current_time = 0\n    for line in sys.stdin:\n        if line.strip() == \'-1\':\n            break\n        time, problem, result = line.strip().split()\n        time = int(time)\n        current_time = time\n        if problem not in problems:\n            problems[problem] = {\'solved\': False, \'penalty\': 0, \'last_submit\': current_time}\n        if result == \'right\':\n            problems[problem][\'solved\'] = True\n            problems[problem][\'last_submit\'] = current_time\n        else:\n            problems[problem][\'penalty\'] += 20\n    solved = sum([1 if problem[\'solved\'] is True else 0 for problem in problems.values()])\n    penalty = sum([problem[\'penalty\'] for problem in problems.values()])\n    submit_time = sum([problem[\'last_submit\'] for problem in problems.values() if problem[\'solved\']])\n    print(solved, submit_time + penalty)\n\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-12 02:53:28.445783 size on output set 4
2022-04-12 02:53:28.445798 num operations 2
2022-04-12 02:53:28.445806 size on input set 1
2022-04-12 02:53:32.214759 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    The main function.\n    \"\"\"\n    input_line = input()\n    while input_line != '-1':\n        input_line = input_line.split()\n        print(input_line)\n        input_line = input()\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    The main function.\n    \"\"\"\n    input_line = input()\n    while input_line != '-1':\n        input_line = input_line.split()\n        print(input_line)\n        input_line = input()\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649746408,
  "object": "edit"
}
2022-04-12 02:53:32.215066 fix spelling mistakes 2 ['\n\ndef main():\n    """\n    The main function.\n    """\n    input_line = input()\n    while input_line != \'-1\':\n        input_line = input_line.split()\n        print(input_line)\n        input_line = input()\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    """\n    The main function.\n    """\n    input_line = input()\n    while input_line != \'-1\':\n        input_line = input_line.split()\n        print(input_line)\n        input_line = input()\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-12 02:53:32.215106 size on output set 1
2022-04-12 02:53:32.215117 size on input set 1
2022-04-12 02:53:34.494748 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    The main function.\n    \"\"\"\n    input_line = input()\n    while input_line != '-1':\n        input_line = input_line.split()\n        print(input_line[0])\n        input_line = input()\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    The main function.\n    \"\"\"\n    input_line = input()\n    while input_line != '-1': \n        input_line = input_line.split()\n        print(input_line)\n        input_line = input()\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649746412,
  "object": "edit"
}
2022-04-12 02:53:34.494998 fix syntax errors 2 ['\n\ndef main():\n    """\n    The main function.\n    """\n    input_line = input()\n    while input_line != \'-1\':\n        input_line = input_line.split()\n        print(input_line[0])\n        input_line = input()\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    """\n    The main function.\n    """\n    input_line = input()\n    while input_line != \'-1\': \n        input_line = input_line.split()\n        print(input_line)\n        input_line = input()\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-12 02:53:34.495024 size on output set 2
2022-04-12 02:53:34.495037 num operations 2
2022-04-12 02:53:34.495042 size on input set 1
2022-04-12 02:53:37.126711 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef read_input():\n    \"\"\"\n    Reads the input and returns a list of tuples containing the minute, the problem and the answer.\n    \"\"\"\n    contest_log = []\n    while True:\n        line = sys.stdin.readline().strip()\n        if line == '-1':\n            break\n        minute, problem, answer = line.split()\n        contest_log.append((int(minute), problem, answer))\n    return contest_log\n\ndef solve_contest(contest_log):\n    \"\"\"\n    Solves the contest and returns the number of problems solved and the total time measure.\n    \"\"\"\n    problems_solved = 0\n    time_measure = 0\n    problems_wrong = {}\n    for minute, problem, answer in contest_log:\n        if answer == 'right':\n            problems_solved += 1\n            time_measure += minute\n            if problem in problems_wrong:\n                time_measure += problems_wrong[problem] * 20\n                del problems_wrong[problem]\n        else:\n            if problem not in problems_wrong:\n                problems_wrong[problem] = 0\n            problems_wrong[problem] += 1\n    return problems_solved, time_measure\n\ndef print_solution(solution):\n    \"\"\"\n    Prints the solution in the specified format.\n    \"\"\"\n    print(solution[0], solution[1])\n\ndef main():\n    contest_log = read_input()\n    solution = solve_contest(contest_log)\n    print_solution(solution)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef read_input():\n    \"\"\"\n    Reads the input and returns a list of tuples containing the minute, problem and the answer.\n    \"\"\"\n    contest_log = []\n    while True:\n        line = sys.stdin.readline().strip()\n        if line == '-1':\n            break\n        minute, problem, answer = line.split()\n        contest_log.append((int(minute), problem, answer))\n    return contest_log\n\ndef solve_contest(contest_log):\n    \"\"\"\n    Solves the contest and returns the number of problems solved and the total time measure.\n    \"\"\"\n    problems_solved = 0\n    time_measure = 0\n    problems_wrong = {}\n    for minute, problem, answer in contest_log:\n        if answer == 'right':\n            problems_solved += 1\n            time_measure += minute\n            if problem in problems_wrong:\n                time_measure += problems_wrong[problem] * 20\n                del problems_wrong[problem]\n        else:\n            if problem not in problems_wrong:\n                problems_wrong[problem] = 0\n            problems_wrong[problem] += 1\n    return problems_solved, time_measure\n\ndef print_solution(solution):\n    \"\"\"\n    Prints the solution in the specified format.\n    \"\"\"\n    print(solution[0], solution[1])\n\ndef main():\n    contest_log = read_input()\n    solution = solve_contest(contest_log)\n    print_solution(solution)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649746414,
  "object": "edit"
}
2022-04-12 02:53:37.126940 fix spelling mistakes 2 ['\n\nimport sys\n\ndef read_input():\n    """\n    Reads the input and returns a list of tuples containing the minute, the problem and the answer.\n    """\n    contest_log = []\n    while True:\n        line = sys.stdin.readline().strip()\n        if line == \'-1\':\n            break\n        minute, problem, answer = line.split()\n        contest_log.append((int(minute), problem, answer))\n    return contest_log\n\ndef solve_contest(contest_log):\n    """\n    Solves the contest and returns the number of problems solved and the total time measure.\n    """\n    problems_solved = 0\n    time_measure = 0\n    problems_wrong = {}\n    for minute, problem, answer in contest_log:\n        if answer == \'right\':\n            problems_solved += 1\n            time_measure += minute\n            if problem in problems_wrong:\n                time_measure += problems_wrong[problem] * 20\n                del problems_wrong[problem]\n        else:\n            if problem not in problems_wrong:\n                problems_wrong[problem] = 0\n            problems_wrong[problem] += 1\n    return problems_solved, time_measure\n\ndef print_solution(solution):\n    """\n    Prints the solution in the specified format.\n    """\n    print(solution[0], solution[1])\n\ndef main():\n    contest_log = read_input()\n    solution = solve_contest(contest_log)\n    print_solution(solution)\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef read_input():\n    """\n    Reads the input and returns a list of tuples containing the minute, problem and the answer.\n    """\n    contest_log = []\n    while True:\n        line = sys.stdin.readline().strip()\n        if line == \'-1\':\n            break\n        minute, problem, answer = line.split()\n        contest_log.append((int(minute), problem, answer))\n    return contest_log\n\ndef solve_contest(contest_log):\n    """\n    Solves the contest and returns the number of problems solved and the total time measure.\n    """\n    problems_solved = 0\n    time_measure = 0\n    problems_wrong = {}\n    for minute, problem, answer in contest_log:\n        if answer == \'right\':\n            problems_solved += 1\n            time_measure += minute\n            if problem in problems_wrong:\n                time_measure += problems_wrong[problem] * 20\n                del problems_wrong[problem]\n        else:\n            if problem not in problems_wrong:\n                problems_wrong[problem] = 0\n            problems_wrong[problem] += 1\n    return problems_solved, time_measure\n\ndef print_solution(solution):\n    """\n    Prints the solution in the specified format.\n    """\n    print(solution[0], solution[1])\n\ndef main():\n    contest_log = read_input()\n    solution = solve_contest(contest_log)\n    print_solution(solution)\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-12 02:53:37.126969 size on output set 2
2022-04-12 02:53:37.126973 size on input set 2
2022-04-12 02:53:39.772918 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef read_input():\n    \"\"\"\n    Reads the input and returns a list of tuples containing the minute, the problem and the answer.\n    \"\"\"\n    contest_log = []\n    while True:\n        line = input().strip()\n        if line == '-1':\n            break\n        minute, problem, answer = line.split()\n        contest_log.append((int(minute), problem, answer))\n    return contest_log\n\ndef solve_contest(contest_log):\n    \"\"\"\n    Solves the contest and returns the number of problems solved and the total time measure.\n    \"\"\"\n    problems_solved = 0\n    time_measure = 0\n    problems_wrong = {}\n    for minute, problem, answer in contest_log:\n        if answer == 'right':\n            problems_solved += 1\n            time_measure += minute\n            if problem in problems_wrong:\n                time_measure += problems_wrong[problem] * 20\n                del problems_wrong[problem]\n        else:\n            if problem not in problems_wrong:\n                problems_wrong[problem] = 0\n            problems_wrong[problem] += 1\n    return problems_solved, time_measure\n\ndef print_solution(solution):\n    \"\"\"\n    Prints the solution in the specified format.\n    \"\"\"\n    print(solution[0], solution[1])\n\ndef main():\n    contest_log = read_input()\n    solution = solve_contest(contest_log)\n    print_solution(solution)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef read_input():\n    \"\"\"\n    Reads the input and returns a list of tuples containing the minute, the problem and the answer.\n    \"\"\"\n    contest_log = []\n    while True:\n        line = sys.stdin.readline().strip()\n        if line == '-1':\n            break\n        minute, problem, answer = line.split()\n        contest_log.append((int(minute), problem, answer))\n    return contest_log\n\ndef solve_contest(contest_log):\n    \"\"\"\n    Solves the contest and returns the number of problems solved and the total time measure.\n    \"\"\"\n    problems_solved = 0\n    time_measure = 0\n    problems_wrong = {}\n    for minute, problem, answer in contest_log:\n        if answer == 'right':\n            problems_solved += 1\n            time_measure += minute\n            if problem in problems_wrong:\n                time_measure += problems_wrong[problem] * 20\n                del problems_wrong[problem]\n        else:\n            if problem not in problems_wrong:\n                problems_wrong[problem] = 0\n            problems_wrong[problem] += 1\n    return problems_solved, time_measure\n\ndef print_solution(solution):\n    \"\"\"\n    Prints the solution in the specified format.\n    \"\"\"\n    print(solution[0], solution[1])\n\ndef main():\n    contest_log = read_input()\n    solution = solve_contest(contest_log)\n    print_solution(solution)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649746417,
  "object": "edit"
}
2022-04-12 02:53:39.773434 fix syntax errors 2 ['#!/usr/bin/env python3\n\nimport sys\n\ndef read_input():\n    """\n    Reads the input and returns a list of tuples containing the minute, the problem and the answer.\n    """\n    contest_log = []\n    while True:\n        line = input().strip()\n        if line == \'-1\':\n            break\n        minute, problem, answer = line.split()\n        contest_log.append((int(minute), problem, answer))\n    return contest_log\n\ndef solve_contest(contest_log):\n    """\n    Solves the contest and returns the number of problems solved and the total time measure.\n    """\n    problems_solved = 0\n    time_measure = 0\n    problems_wrong = {}\n    for minute, problem, answer in contest_log:\n        if answer == \'right\':\n            problems_solved += 1\n            time_measure += minute\n            if problem in problems_wrong:\n                time_measure += problems_wrong[problem] * 20\n                del problems_wrong[problem]\n        else:\n            if problem not in problems_wrong:\n                problems_wrong[problem] = 0\n            problems_wrong[problem] += 1\n    return problems_solved, time_measure\n\ndef print_solution(solution):\n    """\n    Prints the solution in the specified format.\n    """\n    print(solution[0], solution[1])\n\ndef main():\n    contest_log = read_input()\n    solution = solve_contest(contest_log)\n    print_solution(solution)\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef read_input():\n    """\n    Reads the input and returns a list of tuples containing the minute, the problem and the answer.\n    """\n    contest_log = []\n    while True:\n        line = sys.stdin.readline().strip()\n        if line == \'-1\':\n            break\n        minute, problem, answer = line.split()\n        contest_log.append((int(minute), problem, answer))\n    return contest_log\n\ndef solve_contest(contest_log):\n    """\n    Solves the contest and returns the number of problems solved and the total time measure.\n    """\n    problems_solved = 0\n    time_measure = 0\n    problems_wrong = {}\n    for minute, problem, answer in contest_log:\n        if answer == \'right\':\n            problems_solved += 1\n            time_measure += minute\n            if problem in problems_wrong:\n                time_measure += problems_wrong[problem] * 20\n                del problems_wrong[problem]\n        else:\n            if problem not in problems_wrong:\n                problems_wrong[problem] = 0\n            problems_wrong[problem] += 1\n    return problems_solved, time_measure\n\ndef print_solution(solution):\n    """\n    Prints the solution in the specified format.\n    """\n    print(solution[0], solution[1])\n\ndef main():\n    contest_log = read_input()\n    solution = solve_contest(contest_log)\n    print_solution(solution)\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-12 02:53:41.790701 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef read_input():\n    \"\"\"\n    Reads the input and returns a list of tuples containing the minute, problem and the answer.\n    \"\"\"\n    contest_log = []\n    while True:\n        line = sys.stdin.readline().strip()\n        if line == '-1':\n            break\n        minute, problem, answer = line.split()\n        contest_log.append((int(minute), problem, answer))\n    return contest_log\n\ndef solve_contest(contest_log):\n    \"\"\"\n    Solves the contest and returns the number of problems solved and the total time measure.\n    \"\"\"\n    problems_solved = 0\n    time_measure = 0\n    problems_wrong = {}\n    for minute, problem, answer in contest_log:\n        if answer == 'right':\n            problems_solved += 1\n            time_measure += minute\n            if problem in problems_wrong:\n                time_measure += problems_wrong[problem] * 20\n                del problems_wrong[problem]\n        else:\n            if problem not in problems_wrong:\n                problems_wrong[problem] = 0\n            problems_wrong[problem] += 1\n    return problems_solved, time_measure\n\ndef print_solution(solution):\n    \"\"\"\n    Prints the solution in the specified format.\n    \"\"\"\n    print(solution[0], solution[1])\n\ndef main():\n    contest_log = read_input()\n    solution = solve_contest(contest_log)\n    print_solution(solution)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef read_input():\n    \"\"\"\n    Reads the input and returns a list of tuples containing the minute, problem and the answer.\n    \"\"\"\n    contest_log = []\n    while True:\n        line = sys.stdin.readline().strip()\n        if line == '-1':\n            break\n        minute, problem, answer = line.split()\n        contest_log.append((int(minute), problem, answer))\n    return contest_log\n\ndef solve_contest(contest_log):\n    \"\"\"\n    Solves the contest and returns the number of problems solved and the total time measure.\n    \"\"\"\n    problems_solved = 0\n    time_measure = 0\n    problems_wrong = {}\n    for minute, problem, answer in contest_log:\n        if answer == 'right':\n            problems_solved += 1\n            time_measure += minute\n            if problem in problems_wrong:\n                time_measure += problems_wrong[problem] * 20\n                del problems_wrong[problem]\n        else:\n            if problem not in problems_wrong:\n                problems_wrong[problem] = 0\n            problems_wrong[problem] += 1\n    return problems_solved, time_measure\n\ndef print_solution(solution):\n    \"\"\"\n    Prints the solution in the specified format.\n    \"\"\"\n    print(solution[0], solution[1])\n\ndef main():\n    contest_log = read_input()\n    solution = solve_contest(contest_log)\n    print_solution(solution)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649746419,
  "object": "edit"
}
2022-04-12 02:53:41.790870 fix syntax errors 2 ['\nimport sys\n\ndef read_input():\n    """\n    Reads the input and returns a list of tuples containing the minute, problem and the answer.\n    """\n    contest_log = []\n    while True:\n        line = sys.stdin.readline().strip()\n        if line == \'-1\':\n            break\n        minute, problem, answer = line.split()\n        contest_log.append((int(minute), problem, answer))\n    return contest_log\n\ndef solve_contest(contest_log):\n    """\n    Solves the contest and returns the number of problems solved and the total time measure.\n    """\n    problems_solved = 0\n    time_measure = 0\n    problems_wrong = {}\n    for minute, problem, answer in contest_log:\n        if answer == \'right\':\n            problems_solved += 1\n            time_measure += minute\n            if problem in problems_wrong:\n                time_measure += problems_wrong[problem] * 20\n                del problems_wrong[problem]\n        else:\n            if problem not in problems_wrong:\n                problems_wrong[problem] = 0\n            problems_wrong[problem] += 1\n    return problems_solved, time_measure\n\ndef print_solution(solution):\n    """\n    Prints the solution in the specified format.\n    """\n    print(solution[0], solution[1])\n\ndef main():\n    contest_log = read_input()\n    solution = solve_contest(contest_log)\n    print_solution(solution)\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef read_input():\n    """\n    Reads the input and returns a list of tuples containing the minute, problem and the answer.\n    """\n    contest_log = []\n    while True:\n        line = sys.stdin.readline().strip()\n        if line == \'-1\':\n            break\n        minute, problem, answer = line.split()\n        contest_log.append((int(minute), problem, answer))\n    return contest_log\n\ndef solve_contest(contest_log):\n    """\n    Solves the contest and returns the number of problems solved and the total time measure.\n    """\n    problems_solved = 0\n    time_measure = 0\n    problems_wrong = {}\n    for minute, problem, answer in contest_log:\n        if answer == \'right\':\n            problems_solved += 1\n            time_measure += minute\n            if problem in problems_wrong:\n                time_measure += problems_wrong[problem] * 20\n                del problems_wrong[problem]\n        else:\n            if problem not in problems_wrong:\n                problems_wrong[problem] = 0\n            problems_wrong[problem] += 1\n    return problems_solved, time_measure\n\ndef print_solution(solution):\n    """\n    Prints the solution in the specified format.\n    """\n    print(solution[0], solution[1])\n\ndef main():\n    contest_log = read_input()\n    solution = solve_contest(contest_log)\n    print_solution(solution)\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-12 02:53:41.790945 size on output set 3
