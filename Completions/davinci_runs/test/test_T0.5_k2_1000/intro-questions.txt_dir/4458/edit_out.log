2022-04-11 20:17:25.700290 num operations 2
2022-04-11 20:17:25.700325 size on input set 1
2022-04-11 20:17:33.397115 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    p = list(map(int, input().split()))\n    p_inv = [-1] * (n + 1) # p_inv[i]: i\u756a\u76ee\u306e\u8981\u7d20\u304c\u4f55\u756a\u76ee\u306b\u6765\u308b\u304b\n    for i in range(n):\n        p_inv[p[i]] = i\n    seg_tree = [0] * (4 * n) # \u533a\u9593\u548c\u3092\u6c42\u3081\u308b\u30bb\u30b0\u30e1\u30f3\u30c8\u6728\n    ans = 0\n    for i in range(n):\n        ans += i - get_sum(seg_tree, p_inv[i + 1] + 1, 0, 0, n) # i\u756a\u76ee\u306e\u8981\u7d20\u304c\u6765\u308b\u524d\u306b\u6765\u308b\u8981\u7d20\u306e\u6570\n        update(seg_tree, p_inv[i + 1] + 1, 1, 0, n) # i\u756a\u76ee\u306e\u8981\u7d20\u304c\u6765\u305f\u3053\u3068\u3092\u30bb\u30b0\u30e1\u30f3\u30c8\u6728\u306b\u8a18\u9332\n    print(ans)\n\ndef update(seg_tree, i, x, k, n):\n    seg_tree[k] += x\n    if n == 1:\n        return\n    l, r = k * 2 + 1, k * 2 + 2\n    m = n // 2\n    if i < m:\n        update(seg_tree, i, x, l, m)\n    else:\n        update(seg_tree, i - m, x, r, n - m)\n\ndef get_sum(seg_tree, i, k, l, r):\n    if r <= i:\n        return seg_tree[k]\n    if i <= l:\n        return 0\n    m = (l + r) // 2\n    return get_sum(seg_tree, i, 2 * k + 1, l, m) + get_sum(seg_tree, i, 2 * k + 2, m, r)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n = int(input())\n    p = list(map(int, input().split()))\n    p_inv = [0] * (n + 1)\n    for i in range(n):\n        p_inv[p[i]] = i\n    seg_tree = [0] * (4 * n)\n    ans = 0\n    for i in range(n):\n        ans += i - get_sum(seg_tree, p_inv[i + 1] + 1, 0, 0, n)\n        update(seg_tree, p_inv[i + 1] + 1, 1, 0, n)\n    print(ans)\n\ndef update(seg_tree, i, x, k, n):\n    seg_tree[k] += x\n    if n == 1:\n        return\n    l, r = k * 2 + 1, k * 2 + 2\n    m = n // 2\n    if i < m:\n        update(seg_tree, i, x, l, m)\n    else:\n        update(seg_tree, i - m, x, r, n - m)\n\ndef get_sum(seg_tree, i, k, l, r):\n    if r <= i:\n        return seg_tree[k]\n    if i <= l:\n        return 0\n    m = (l + r) // 2\n    return get_sum(seg_tree, i, 2 * k + 1, l, m) + get_sum(seg_tree, i, 2 * k + 2, m, r)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649722646,
  "object": "edit"
}
2022-04-11 20:17:33.397467 fix spelling mistakes 2 ["\n\ndef main():\n    n = int(input())\n    p = list(map(int, input().split()))\n    p_inv = [-1] * (n + 1) # p_inv[i]: i番目の要素が何番目に来るか\n    for i in range(n):\n        p_inv[p[i]] = i\n    seg_tree = [0] * (4 * n) # 区間和を求めるセグメント木\n    ans = 0\n    for i in range(n):\n        ans += i - get_sum(seg_tree, p_inv[i + 1] + 1, 0, 0, n) # i番目の要素が来る前に来る要素の数\n        update(seg_tree, p_inv[i + 1] + 1, 1, 0, n) # i番目の要素が来たことをセグメント木に記録\n    print(ans)\n\ndef update(seg_tree, i, x, k, n):\n    seg_tree[k] += x\n    if n == 1:\n        return\n    l, r = k * 2 + 1, k * 2 + 2\n    m = n // 2\n    if i < m:\n        update(seg_tree, i, x, l, m)\n    else:\n        update(seg_tree, i - m, x, r, n - m)\n\ndef get_sum(seg_tree, i, k, l, r):\n    if r <= i:\n        return seg_tree[k]\n    if i <= l:\n        return 0\n    m = (l + r) // 2\n    return get_sum(seg_tree, i, 2 * k + 1, l, m) + get_sum(seg_tree, i, 2 * k + 2, m, r)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    p = list(map(int, input().split()))\n    p_inv = [0] * (n + 1)\n    for i in range(n):\n        p_inv[p[i]] = i\n    seg_tree = [0] * (4 * n)\n    ans = 0\n    for i in range(n):\n        ans += i - get_sum(seg_tree, p_inv[i + 1] + 1, 0, 0, n)\n        update(seg_tree, p_inv[i + 1] + 1, 1, 0, n)\n    print(ans)\n\ndef update(seg_tree, i, x, k, n):\n    seg_tree[k] += x\n    if n == 1:\n        return\n    l, r = k * 2 + 1, k * 2 + 2\n    m = n // 2\n    if i < m:\n        update(seg_tree, i, x, l, m)\n    else:\n        update(seg_tree, i - m, x, r, n - m)\n\ndef get_sum(seg_tree, i, k, l, r):\n    if r <= i:\n        return seg_tree[k]\n    if i <= l:\n        return 0\n    m = (l + r) // 2\n    return get_sum(seg_tree, i, 2 * k + 1, l, m) + get_sum(seg_tree, i, 2 * k + 2, m, r)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 20:17:33.397568 size on output set 2
2022-04-11 20:17:33.397584 size on input set 2
2022-04-11 20:17:43.706255 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    p = list(map(int, input().split()))\n    p_inv = [-1] * (n + 1)  # p_inv[i]: i\u756a\u76ee\u306e\u8981\u7d20\u304c\u4f55\u756a\u76ee\u306b\u6765\u308b\u304b\n    for i in range(n):\n        p_inv[p[i]] = i\n    seg_tree = [0] * (4 * n)  # \u533a\u9593\u548c\u3092\u6c42\u3081\u308b\u30bb\u30b0\u30e1\u30f3\u30c8\u6728\n    ans = 0\n    for i in range(n):\n        ans += i - get_sum(seg_tree, p_inv[i + 1] + 1, 0, 0, n)  # i\u756a\u76ee\u306e\u8981\u7d20\u304c\u6765\u308b\u524d\u306b\u6765\u308b\u8981\u7d20\u306e\u6570\n        update(seg_tree, p_inv[i + 1] + 1, 1, 0, n)  # i\u756a\u76ee\u306e\u8981\u7d20\u304c\u6765\u305f\u3053\u3068\u3092\u30bb\u30b0\u30e1\u30f3\u30c8\u6728\u306b\u8a18\u9332\n\n    print(ans)\n\ndef update(seg_tree, i, x, k, n):\n    seg_tree[k] += x\n    if n == 1:\n        return\n    l, r = k * 2 + 1, k * 2 + 2\n    m = n // 2\n    if i < m:\n        update(seg_tree, i, x, l, m)\n    else:\n        update(seg_tree, i - m, x, r, n - m)\n\ndef get_sum(seg_tree, i, k, l, r):\n    if r <= i:\n        return seg_tree[k]\n    if i <= l:\n        return 0\n    m = (l + r) // 2\n    return get_sum(seg_tree, i, 2 * k + 1, l, m) + get_sum(seg_tree, i, 2 * k + 2, m, r)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n = int(input())\n    p = list(map(int, input().split()))\n    p_inv = [-1] * (n + 1)  # p_inv[i]: i\u756a\u76ee\u306e\u8981\u7d20\u304c\u4f55\u756a\u76ee\u306b\u6765\u308b\u304b\n    for i in range(n):\n        p_inv[p[i]] = i\n    seg_tree = [0] * (4 * n)  # \u533a\u9593\u548c\u3092\u6c42\u3081\u308b\u30bb\u30b0\u30e1\u30f3\u30c8\u6728\n    ans = 0\n    for i in range(n):\n        ans += i - get_sum(seg_tree, p_inv[i + 1] + 1, 0, 0, n)  # i\u756a\u76ee\u306e\u8981\u7d20\u304c\u6765\u308b\u524d\u306b\u6765\u308b\u8981\u7d20\u306e\u6570\n        update(seg_tree, p_inv[i + 1] + 1, 1, 0, n)  # i\u756a\u76ee\u306e\u8981\u7d20\u304c\u6765\u305f\u3053\u3068\u3092\u30bb\u30b0\u30e1\u30f3\u30c8\u6728\u306b\u8a18\u9332\n\n    print(ans)\n\ndef update(seg_tree, i, x, k, n):\n    seg_tree[k] += x\n    if n == 1:\n        return\n    l, r = k * 2 + 1, k * 2 + 2\n    m = n // 2\n    if i < m:\n        update(seg_tree, i, x, l, m)\n    else:\n        update(seg_tree, i - m, x, r, n - m)\n\ndef get_sum(seg_tree, i, k, l, r):\n    if r <= i:\n        return seg_tree[k]\n    if i <= l:\n        return 0\n    m = (l + r) // 2\n    return get_sum(seg_tree, i, 2 * k + 1, l, m) + get_sum(seg_tree, i, 2 * k + 2, m, r)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649722653,
  "object": "edit"
}
2022-04-11 20:17:43.706532 fix syntax errors 2 ["\n\ndef main():\n    n = int(input())\n    p = list(map(int, input().split()))\n    p_inv = [-1] * (n + 1)  # p_inv[i]: i番目の要素が何番目に来るか\n    for i in range(n):\n        p_inv[p[i]] = i\n    seg_tree = [0] * (4 * n)  # 区間和を求めるセグメント木\n    ans = 0\n    for i in range(n):\n        ans += i - get_sum(seg_tree, p_inv[i + 1] + 1, 0, 0, n)  # i番目の要素が来る前に来る要素の数\n        update(seg_tree, p_inv[i + 1] + 1, 1, 0, n)  # i番目の要素が来たことをセグメント木に記録\n\n    print(ans)\n\ndef update(seg_tree, i, x, k, n):\n    seg_tree[k] += x\n    if n == 1:\n        return\n    l, r = k * 2 + 1, k * 2 + 2\n    m = n // 2\n    if i < m:\n        update(seg_tree, i, x, l, m)\n    else:\n        update(seg_tree, i - m, x, r, n - m)\n\ndef get_sum(seg_tree, i, k, l, r):\n    if r <= i:\n        return seg_tree[k]\n    if i <= l:\n        return 0\n    m = (l + r) // 2\n    return get_sum(seg_tree, i, 2 * k + 1, l, m) + get_sum(seg_tree, i, 2 * k + 2, m, r)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    p = list(map(int, input().split()))\n    p_inv = [-1] * (n + 1)  # p_inv[i]: i番目の要素が何番目に来るか\n    for i in range(n):\n        p_inv[p[i]] = i\n    seg_tree = [0] * (4 * n)  # 区間和を求めるセグメント木\n    ans = 0\n    for i in range(n):\n        ans += i - get_sum(seg_tree, p_inv[i + 1] + 1, 0, 0, n)  # i番目の要素が来る前に来る要素の数\n        update(seg_tree, p_inv[i + 1] + 1, 1, 0, n)  # i番目の要素が来たことをセグメント木に記録\n\n    print(ans)\n\ndef update(seg_tree, i, x, k, n):\n    seg_tree[k] += x\n    if n == 1:\n        return\n    l, r = k * 2 + 1, k * 2 + 2\n    m = n // 2\n    if i < m:\n        update(seg_tree, i, x, l, m)\n    else:\n        update(seg_tree, i - m, x, r, n - m)\n\ndef get_sum(seg_tree, i, k, l, r):\n    if r <= i:\n        return seg_tree[k]\n    if i <= l:\n        return 0\n    m = (l + r) // 2\n    return get_sum(seg_tree, i, 2 * k + 1, l, m) + get_sum(seg_tree, i, 2 * k + 2, m, r)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 20:17:49.063246 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    p = list(map(int, input().split()))\n    p_inv = [0] * (n)\n    for i in range(n):\n        p_inv[p[i]] = i\n    seg_tree = [0] * (4 * n)\n    ans = 0\n    for i in range(n):\n        ans += i - get_sum(seg_tree, p_inv[i], 0, 0, n)\n        update(seg_tree, p_inv[i], 1, 0, n)\n    print(ans)\n\ndef update(seg_tree, i, x, k, n):\n    seg_tree[k] += x\n    if n == 1:\n        return\n    l, r = k * 2 + 1, k * 2 + 2\n    m = n // 2\n    if i < m:\n        update(seg_tree, i, x, l, m)\n    else:\n        update(seg_tree, i - m, x, r, n - m)\n\ndef get_sum(seg_tree, i, k, l, r):\n    if r <= i:\n        return seg_tree[k]\n    if i <= l:\n        return 0\n    m = (l + r) // 2\n    return get_sum(seg_tree, i, 2 * k + 1, l, m) + get_sum(seg_tree, i, 2 * k + 2, m, r)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n = int(input())\n    p = list(map(int, input().split()))\n    p_inv = [0] * (n + 1)\n    for i in range(n):\n        p_inv[p[i]] = i\n    seg_tree = [0] * (2 * n)\n    ans = 0\n    for i in range(n):\n        ans += i - get_sum(seg_tree, p_inv[i + 1] + 1, 0, 0, n)\n        update(seg_tree, p_inv[i + 1] + 1, 1, 0, n)\n    print(ans)\n\ndef update(seg_tree, i, x, k, n):\n    seg_tree[k] += x\n    if n == 1:\n        return\n    l, r = k * 2 + 1, k * 2 + 2\n    m = n // 2\n    if i < m:\n        update(seg_tree, i, x, l, m)\n    else:\n        update(seg_tree, i - m, x, r, n - m)\n\ndef get_sum(seg_tree, i, k, l, r):\n    if r <= i:\n        return seg_tree[k]\n    if i <= l:\n        return 0\n    m = (l + r) // 2\n    return get_sum(seg_tree, i, 2 * k + 1, l, m) + get_sum(seg_tree, i, 2 * k + 2, m, r)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649722664,
  "object": "edit"
}
2022-04-11 20:17:49.063590 fix syntax errors 2 ["\n\ndef main():\n    n = int(input())\n    p = list(map(int, input().split()))\n    p_inv = [0] * (n)\n    for i in range(n):\n        p_inv[p[i]] = i\n    seg_tree = [0] * (4 * n)\n    ans = 0\n    for i in range(n):\n        ans += i - get_sum(seg_tree, p_inv[i], 0, 0, n)\n        update(seg_tree, p_inv[i], 1, 0, n)\n    print(ans)\n\ndef update(seg_tree, i, x, k, n):\n    seg_tree[k] += x\n    if n == 1:\n        return\n    l, r = k * 2 + 1, k * 2 + 2\n    m = n // 2\n    if i < m:\n        update(seg_tree, i, x, l, m)\n    else:\n        update(seg_tree, i - m, x, r, n - m)\n\ndef get_sum(seg_tree, i, k, l, r):\n    if r <= i:\n        return seg_tree[k]\n    if i <= l:\n        return 0\n    m = (l + r) // 2\n    return get_sum(seg_tree, i, 2 * k + 1, l, m) + get_sum(seg_tree, i, 2 * k + 2, m, r)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    p = list(map(int, input().split()))\n    p_inv = [0] * (n + 1)\n    for i in range(n):\n        p_inv[p[i]] = i\n    seg_tree = [0] * (2 * n)\n    ans = 0\n    for i in range(n):\n        ans += i - get_sum(seg_tree, p_inv[i + 1] + 1, 0, 0, n)\n        update(seg_tree, p_inv[i + 1] + 1, 1, 0, n)\n    print(ans)\n\ndef update(seg_tree, i, x, k, n):\n    seg_tree[k] += x\n    if n == 1:\n        return\n    l, r = k * 2 + 1, k * 2 + 2\n    m = n // 2\n    if i < m:\n        update(seg_tree, i, x, l, m)\n    else:\n        update(seg_tree, i - m, x, r, n - m)\n\ndef get_sum(seg_tree, i, k, l, r):\n    if r <= i:\n        return seg_tree[k]\n    if i <= l:\n        return 0\n    m = (l + r) // 2\n    return get_sum(seg_tree, i, 2 * k + 1, l, m) + get_sum(seg_tree, i, 2 * k + 2, m, r)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 20:17:49.063642 size on output set 3
2022-04-11 20:17:49.063661 num operations 2
2022-04-11 20:17:49.063668 size on input set 1
2022-04-11 20:17:51.075317 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n    N = int(input())\n    P = [int(i) for i in input().split()]\n    ans = 0\n    for i in range(0, N):\n        if P[i] == i + 1:\n            ans += 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n    N = int(input())\n    P = [int(i) for i in input().split()]\n    ans = 0\n    for i in range(0, N):\n        if P[i] == i + 1:\n            ans += 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649722669,
  "object": "edit"
}
2022-04-11 20:17:51.075655 fix spelling mistakes 2 ["\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n    N = int(input())\n    P = [int(i) for i in input().split()]\n    ans = 0\n    for i in range(0, N):\n        if P[i] == i + 1:\n            ans += 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n    N = int(input())\n    P = [int(i) for i in input().split()]\n    ans = 0\n    for i in range(0, N):\n        if P[i] == i + 1:\n            ans += 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 20:17:51.075694 size on output set 1
2022-04-11 20:17:51.075701 size on input set 1
2022-04-11 20:17:53.469540 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n    N = int(input())\n    P = [int(i) for i in input().split()]\n    ans = 0\n    for i in range(N):\n        if P[i] == i + 1:\n            ans += 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n    N = int(input())\n    P = [int(i) for i in input().split()]\n    ans = 0\n    for i in range(N):\n        if P[i] == i + 1:\n            ans += 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649722671,
  "object": "edit"
}
2022-04-11 20:17:53.469941 fix syntax errors 2 ["\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n    N = int(input())\n    P = [int(i) for i in input().split()]\n    ans = 0\n    for i in range(N):\n        if P[i] == i + 1:\n            ans += 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n    N = int(input())\n    P = [int(i) for i in input().split()]\n    ans = 0\n    for i in range(N):\n        if P[i] == i + 1:\n            ans += 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 20:17:53.469981 size on output set 1
