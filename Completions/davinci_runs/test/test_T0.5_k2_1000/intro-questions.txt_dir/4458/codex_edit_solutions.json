["\n\ndef main():\n    n = int(input())\n    p = list(map(int, input().split()))\n    p_inv = [-1] * (n + 1)  # p_inv[i]: i\u756a\u76ee\u306e\u8981\u7d20\u304c\u4f55\u756a\u76ee\u306b\u6765\u308b\u304b\n    for i in range(n):\n        p_inv[p[i]] = i\n    seg_tree = [0] * (4 * n)  # \u533a\u9593\u548c\u3092\u6c42\u3081\u308b\u30bb\u30b0\u30e1\u30f3\u30c8\u6728\n    ans = 0\n    for i in range(n):\n        ans += i - get_sum(seg_tree, p_inv[i + 1] + 1, 0, 0, n)  # i\u756a\u76ee\u306e\u8981\u7d20\u304c\u6765\u308b\u524d\u306b\u6765\u308b\u8981\u7d20\u306e\u6570\n        update(seg_tree, p_inv[i + 1] + 1, 1, 0, n)  # i\u756a\u76ee\u306e\u8981\u7d20\u304c\u6765\u305f\u3053\u3068\u3092\u30bb\u30b0\u30e1\u30f3\u30c8\u6728\u306b\u8a18\u9332\n\n    print(ans)\n\ndef update(seg_tree, i, x, k, n):\n    seg_tree[k] += x\n    if n == 1:\n        return\n    l, r = k * 2 + 1, k * 2 + 2\n    m = n // 2\n    if i < m:\n        update(seg_tree, i, x, l, m)\n    else:\n        update(seg_tree, i - m, x, r, n - m)\n\ndef get_sum(seg_tree, i, k, l, r):\n    if r <= i:\n        return seg_tree[k]\n    if i <= l:\n        return 0\n    m = (l + r) // 2\n    return get_sum(seg_tree, i, 2 * k + 1, l, m) + get_sum(seg_tree, i, 2 * k + 2, m, r)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    input = sys.stdin.readline\n    N = int(input())\n    P = [int(i) for i in input().split()]\n    ans = 0\n    for i in range(N):\n        if P[i] == i + 1:\n            ans += 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    p = list(map(int, input().split()))\n    p_inv = [0] * (n + 1)\n    for i in range(n):\n        p_inv[p[i]] = i\n    seg_tree = [0] * (2 * n)\n    ans = 0\n    for i in range(n):\n        ans += i - get_sum(seg_tree, p_inv[i + 1] + 1, 0, 0, n)\n        update(seg_tree, p_inv[i + 1] + 1, 1, 0, n)\n    print(ans)\n\ndef update(seg_tree, i, x, k, n):\n    seg_tree[k] += x\n    if n == 1:\n        return\n    l, r = k * 2 + 1, k * 2 + 2\n    m = n // 2\n    if i < m:\n        update(seg_tree, i, x, l, m)\n    else:\n        update(seg_tree, i - m, x, r, n - m)\n\ndef get_sum(seg_tree, i, k, l, r):\n    if r <= i:\n        return seg_tree[k]\n    if i <= l:\n        return 0\n    m = (l + r) // 2\n    return get_sum(seg_tree, i, 2 * k + 1, l, m) + get_sum(seg_tree, i, 2 * k + 2, m, r)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    p = list(map(int, input().split()))\n    p_inv = [0] * (n)\n    for i in range(n):\n        p_inv[p[i]] = i\n    seg_tree = [0] * (4 * n)\n    ans = 0\n    for i in range(n):\n        ans += i - get_sum(seg_tree, p_inv[i], 0, 0, n)\n        update(seg_tree, p_inv[i], 1, 0, n)\n    print(ans)\n\ndef update(seg_tree, i, x, k, n):\n    seg_tree[k] += x\n    if n == 1:\n        return\n    l, r = k * 2 + 1, k * 2 + 2\n    m = n // 2\n    if i < m:\n        update(seg_tree, i, x, l, m)\n    else:\n        update(seg_tree, i - m, x, r, n - m)\n\ndef get_sum(seg_tree, i, k, l, r):\n    if r <= i:\n        return seg_tree[k]\n    if i <= l:\n        return 0\n    m = (l + r) // 2\n    return get_sum(seg_tree, i, 2 * k + 1, l, m) + get_sum(seg_tree, i, 2 * k + 2, m, r)\n\nif __name__ == '__main__':\n    main()\n"]