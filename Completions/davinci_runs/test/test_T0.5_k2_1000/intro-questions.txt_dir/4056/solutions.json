["from  math import gcd\nn = int(input())\na=  list(map(int, input().split()))\nk  = 0\nfor i in range(n):\n    k = gcd(a[i], k)\n\nans = 0\n\ndef fact(n):\n    nonlocal ans\n    d = 1\n    while d* d <= n:\n        if n % d == 0:\n            ans += 1\n            if n // d != d:\n                ans += 1\n        d += 1\nfact(k)\nprint(ans)", "from math import gcd\nfrom math import sqrt\n\n\ndef factor(n):\n    potentional_p = 3\n    itog_list = {}\n    if n % 2 == 0:\n        itog_list[2] = 0\n    while n % 2 == 0:\n        n = n // 2\n        itog_list[2] += 1\n    while n - 1:\n        if potentional_p > sqrt(n):\n            if n in itog_list:\n                itog_list[n] += 1\n            else:\n                itog_list[n] = 1\n            return itog_list\n        while n % potentional_p == 0:\n            n = n // potentional_p\n            if potentional_p in itog_list:\n                itog_list[potentional_p] += 1\n            else:\n                itog_list[potentional_p] = 1\n        potentional_p += 2\n    return itog_list\n\n\nn = int(input())\nA = list(map(int, input().split()))\ng = 1\nif n == 1:\n    g = A[0]\nelse:\n    g = gcd(A[0], A[1])\n    for i in range(2, n):\n        g = gcd(g, A[i])\nF = factor(g)\nans = 1\nfor i in F:\n    ans *= (F[i] + 1)\nprint(ans)", "n = int(input())\nA = [int(i) for i in input().split()]\n\ndef gcd(a, b):\n    if b==0:\n        return a\n    return gcd(b, a%b)\n\ng = A[0]\n\nfor i in A:\n    g = gcd(g, i)\n\nfct = []\n\nfor i in range(1, g+1):\n    if i*i > g:\n        break\n    if g%i == 0:\n        fct.append(i)\n        fct.append(g//i)\n\nprint(len(set(fct)))\n", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\nn = int(input())\na = [int(c) for c in input().split()]\n\ng = a[0]\nfor i in range(1, n):\n    g = gcd(g, a[i])\n\nans = 0\nfor i in range(1, int(g ** (0.5)) + 1):\n    if g % i == 0:\n        if g // i != i:\n            ans += 2\n        else:\n            ans += 1\n\nprint(ans)\n", "from math import gcd\n\nn = int(input())\n*l, = map(int, input().split())\n\ntmp = l[0]\nfor i in range(1, n):\n\ttmp = gcd(tmp, l[i])\n\nif tmp != 1:\n\tc = 2\n\tfor i in range(2, int(tmp**.5+1)):\n\t\tif tmp % i == 0:\n\t\t\tc += 2\n\t\t\tif i * i == tmp:\n\t\t\t\tc -= 1\n\tprint(c)\nelse:\n\tprint(1)", "import math\n\n\ndef fnl(n) : \n    c=0\n    ln=(int)(math.sqrt(n))\n    for i in range(1,ln+1) : \n        if (n%i==0) : \n            if(n/i==i) : \n                c+=1\n            else:\n                c+=2         \n    return c \n\n\nN=int(input())\ns=[int(x) for x in input().split()]\nc=s[0]\nfor i in range(1,len(s)):\n    c=math.gcd(c,s[i])\n\nans=fnl(c)\nprint(ans)\n\n\n\n", "from math import gcd\n\n# THis is the main function \ndef main():\n    n = int(input())\n    a = [int(c) for c in input().split()]\n\n    g = a[0]\n    for i in range(1, n):\n        g = gcd(g, a[i])\n\n    final=0\n    for i in range(1, int(g ** (0.5)) + 1):\n        if g % i == 0:\n            if g // i != i:\n                final += 2\n            else:\n                final += 1\n\n    print(final)\n\nmain()\n", "\nimport math\n\ndef divs(x):\n    ans = 0\n    d = 1\n    while d*d <= x:\n        if x%d == 0:\n            ans += 2\n            ans -= (d*d==x)\n        d+= 1\n    return ans\n\nn = int(input())\narr = [int(x) for x in input().split()]\n\ngcd = arr[0]\nfor a in arr:\n    gcd = math.gcd(a,gcd)\n\n\nprint(divs(gcd))\n\n", "def gcd(a, b):\n    if a == 0: return b\n    else: return gcd(b % a, a)\n\n\nn = int(input())\na = list(map(int, input().split()))\ng = 0\nfor x in a:\n    g = gcd(g, x)\nans = 0\nt = 1\nwhile t * t <= g:\n    if g % t == 0:\n        ans += 1\n        if t * t != g:\n            ans += 1\n    t += 1\nprint(ans)", "from sys import stdin, stdout\n\ninput = stdin.readline\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef divisors(x):\n    res = 0\n    d = 1\n    while d * d <= x:\n        if x % d == 0:\n            res += 1\n            res += (d != x / d)\n        d += 1\n\n    return res\n\nn = int(input())\na = [int(i) for i in input().split()]\nnwd = 0\nfor i in a:\n    nwd = gcd(nwd, i)\n\nprint(divisors(nwd))\n", "import math\nfrom functools import reduce\n\nn = int(input())\na = list(map(int, input().split()))\nx = reduce(math.gcd, a)\n\ni = 1\ncnt = 0\nwhile i * i < x:\n\tif x % i == 0:\n\t\tcnt += 2\n\ti += 1\nif i * i == x:\n\tcnt += 1\nprint(cnt)\n", "def gcd(a, b):\n\twhile b:\n\t\ta, b = b, a % b\n\treturn a\n\n\ndef razl(n):\n\tcnt = 0\n\ti = 1\n\twhile (i * i < n):\n\t\tif (n % i == 0):\n\t\t\tcnt += 2\n\t\ti += 1\n\tif (i * i == n):\n\t\tcnt += 1\n\treturn cnt\n\n\nn = int(input())\nans = 0\nfor i in map(int, input().split()):\n\tans = gcd(ans, i)\nprint(razl(ans))", "def gcd(n1,n2):\n    if n2 > n1:\n        return gcd(n2,n1)\n    if n2 == 0:\n        return n1\n    return gcd(n2,n1%n2)\n\ndef factors(n):\n    ans = 0\n    for i in range(1,int(n**0.5)+1):\n        if n%i == 0:\n            ans += 1\n            if i != n//i:\n                ans += 1\n\n    return ans\n\ndef main():\n    n = int(input())\n    arr = list(map(int,input().split()))\n    g = 0\n    for i in arr:\n        g = gcd(i,g)\n    \n    facts = factors(g)\n    print(facts)\n\nmain()\n", "import math\n# helpful:\n# r,g,b=map(int,input().split())\n#list1 = input().split()\n#for i in range(len(list1)):\n#    list1[i] = int(list1[i])\n#print(list1)\n# arr = [[0 for x in range(columns)] for y in range(rows)]\n\nn = int(input())\nlist1 = input().split()\nfor i in range(len(list1)):\n    list1[i] = int(list1[i])\ngcd1 = list1[0]\nfor i in range(n):\n    gcd1 = math.gcd(gcd1,list1[i])\n\nval = 0\n\nif(int(math.sqrt(gcd1))**2 == gcd1):\n    val -= 1\n\nfor i in range(1, int(math.sqrt(gcd1))+ 1):\n    if(gcd1 % i == 0):\n        val += 2\n\nprint(val)\n        \n", "from functools import reduce\n\ndef gcd(a, b):\n    while b: a, b = b, a % b\n    return abs(a)\ndef gcd_mult(numbers):\n    return reduce(gcd, numbers)\ndef primeFactor(N):\n    i, n, ret, d, sq = 2, N, {}, 2, 99\n    while i <= sq:\n        k = 0\n        while n % i == 0: n, k, ret[i] = n//i, k+1, k+1\n        if k > 0 or i == 97: sq = int(n**(1/2)+0.5)\n        if i < 4: i = i * 2 - 1\n        else: i, d = i+d, d^6\n    if n > 1: ret[n] = 1\n    return ret\ndef divisors(N):\n    pf = primeFactor(N)\n    ret = [1]\n    for p in pf:\n        ret_prev = ret\n        ret = []\n        for i in range(pf[p]+1):\n            for r in ret_prev:\n                ret.append(r * (p ** i))\n    return sorted(ret)\n\nN = int(input())\nA = [int(a) for a in input().split()]\nG = gcd_mult(A)\nprint(len(divisors(G)))\n\n\n\n", "import math\ndef countDivisors(n) : \n    cnt = 0\n    for i in range(1, (int)(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n              \n            # If divisors are equal, \n            # count only one \n            if (n / i == i) : \n                cnt = cnt + 1\n            else : # Otherwise count both \n                cnt = cnt + 2\n    return cnt \nx=int(input())\nl=list(map(int,input().split()))\ng=l[0]\nfor i in range(1,x):\n       g=math.gcd(g,l[i])\nprint(countDivisors(g))\n  \n   #t-=1\n", "from math import gcd\n\nt = int(input())\na = list(map(int, input().split()))\n\nn = a[0]\n\nfor c in a:\n\tn = gcd(n, c)\n\n\nans = 1\nfor i in range(2, int(n ** 0.5 + 0.5) + 1):\n\tif n % i == 0:\n\t\tkol = 0\n\t\tfor x in range(100000000):\n\t\t\tif n % i == 0:\n\t\t\t\tkol += 1\n\t\t\t\tn //= i\n\t\t\telse:\n\t\t\t\tbreak\n\t\tans *= (kol + 1)\n\nif n > 1:\n\tans *= 2\n\nprint(ans)\n\n", "import io, sys, atexit, os\nimport math as ma\nfrom decimal import Decimal as dec\nfrom itertools import permutations\nfrom itertools import combinations\n\n\ndef li ():\n\treturn list (map (int, input ().split ()))\n\n\ndef num ():\n\treturn map (int, input ().split ())\n\n\ndef nu ():\n\treturn int (input ())\n\n\ndef find_gcd ( x, y ):\n\twhile (y):\n\t\tx, y = y, x % y\n\treturn x\n\n\ndef lcm ( x, y ):\n\tgg = find_gcd (x, y)\n\treturn (x * y // gg)\n\n\ndef printDivisors ( n ):\n\t# Note that this loop runs till square root\n\ti = 1\n\tcc=0\n\twhile i <= ma.sqrt (n):\n\n\t\tif (n % i == 0):\n\n\t\t\t# If divisors are equal, print only one\n\t\t\tif (n / i == i):\n\t\t\t\tcc+=1\n\t\t\telse:\n\t\t\t\t# Otherwise print both\n\t\t\t\tcc+=2\n\t\ti = i + 1\n\treturn cc\n\nmm = 1000000007\nyp = 0\n\n\ndef solve ():\n\tt = 1\n\tfor tt in range (t):\n\t\tn=nu()\n\t\ta=li()\n\t\tgg=0\n\t\tfor i in range(n):\n\t\t\tgg=find_gcd(gg,a[i])\n\t\tcc=0\n\t\tprint(printDivisors(gg))\n\n\n\n\ndef __starting_point():\n\tsolve ()\n__starting_point()", "#579_C\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\nn = int(input())\n\nln = [int(i) for i in input().split(\" \")]\n\nm = ln[0]\n\nfor i in range(1, len(ln)):\n    m = gcd(m, ln[i])\n\nd = 0\n\nfor i in range(1, int(m ** 0.5) + 1):\n    if m % i == 0:\n        d += 2\n        if i == m ** 0.5:\n            d -= 1\n\nprint(d)\n", "import math\n\ndef find_gcd(x, y): \n\t\n\twhile(y): \n\t\tx, y = y, x % y \n\t\n\treturn x \n \ndef calcDivisors(n) : \n\tans=0\n\ti = 1\n\twhile i <= math.sqrt(n): \n\t\t\n\t\tif (n % i == 0) : \n\t\t\t \n\t\t\tif (n / i == i) : \n\t\t\t\tans=ans+1\n\t\t\telse : \n\t\t\t\tans=ans+2 \n\t\ti = i + 1\n\treturn ans\t\n\n\n\t\t\t \nn=int(input())\t\t\t \nl = [int(i) for i in input().split()] \n\nif n!=1:\n\tgcd = find_gcd(l[0], l[1])\nif n==1:\n\tgcd=l[0] \n\nfor i in range(2, n): \n\tgcd = find_gcd(gcd, l[i]) \n\t\nprint(calcDivisors(gcd)) \n", "  \ndef countDivisors(n) : \n\tcnt = 0\n\tfor i in range(1, int(n**(0.5)) + 1) : \n\t\tif (n % i == 0) : \n\t\t\tif (n / i == i) : \n\t\t\t\tcnt = cnt + 1\n\t\t\telse : \n\t\t\t\tcnt = cnt + 2\n\treturn cnt \n\n\ndef gcd(a,b): \n\tif (b == 0): \n\t\t return a \n\treturn gcd(b, a%b)\n\nn=int(input())\nl=list(map(int,input().split()))\nif n==1:\n\tprint(countDivisors(l[0]))\nelse:\n\thcf=gcd(l[0],l[1])\n\tfor i in range(2,n):\n\t\thcf=gcd(hcf,l[i])\n\tprint(countDivisors(hcf))\n", "import math\nfrom collections import deque, defaultdict\nfrom sys import stdin, stdout\ninput = stdin.readline\n# print = stdout.write\nlistin = lambda : list(map(int, input().split()))\nmapin = lambda : map(int, input().split())\nn = int(input())\na = listin()\nz = a[0]\nfor i in range(1, n):\n    z = math.gcd(z, a[i])\nd = defaultdict(int)\nwhile(z%2 == 0):\n    z//=2\n    d[2]+=1\nfor i in range(3, int(z**0.5) + 1, 2):\n    while(z%i == 0):\n        z//=i\n        d[i]+=1\nif z > 1:\n    d[z]+=1\nans = 1\nfor i in d.values():\n    ans*=(i+1)\nprint(ans)", "import math\nimport collections\n\ndef prime_factor(n):\n    ass = []\n    for i in range(2,int(n**0.5)+1):\n        while n % i==0:\n            ass.append(i)\n            n = n//i\n    if n != 1:\n        ass.append(n)\n    return ass\n\nn = int(input())\nnums = list(map(int, input().split(\" \")))\n\ng = nums[0]\nfor i in range(1, n):\n    g = math.gcd(g, nums[i])\n\nprimes = prime_factor(g)\nc = collections.Counter(primes)\n\nout = 1\nfor val in c.values():\n    out *= (val+1)\n\nprint(out)"]