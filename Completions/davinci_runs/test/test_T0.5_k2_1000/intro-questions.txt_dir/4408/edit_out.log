2022-04-11 19:56:57.335366 num operations 2
2022-04-11 19:56:57.335398 size on input set 1
2022-04-11 19:57:02.425760 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nsys.setrecursionlimit(100000)\n\ndef get_input():\n    inputs = []\n    for i in range(4):\n        inputs.append(list(map(int, input().split())))\n    return inputs\n\ndef get_cards(cards, index, k):\n    return cards[index*k:(index+1)*k]\n\n\ndef get_player_joy(cards, player_fav_numbers, joy_levels):\n    fav_cards = list(filter(lambda x: x == player_fav_numbers, cards))\n    return joy_levels[len(fav_cards)]\n\ndef main():\n    n, k = get_input()[0]\n    cards = get_input()[1]\n    player_fav_numbers = get_input()[2]\n    joy_levels = get_input()[3]\n    max_joy = 0\n    for i in range(n):\n        max_joy += get_player_joy(get_cards(cards, i, k), player_fav_numbers[i], joy_levels)\n    print(max_joy)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nsys.setrecursionlimit(100000)\n\ndef get_input():\n    inputs = []\n    for i in range(4):\n        inputs.append(list(map(int, input().split())))\n    return inputs\n\ndef get_cards(cards, index, k):\n    return cards[index*k:(index+1)*k]\n\n\ndef get_player_joy(cards, player_fav_number, joy_levels, k):\n    fav_cards = list(filter(lambda x: x == player_fav_number, cards[:k]))\n    return joy_levels[len(fav_cards)]\n\ndef main():\n    n, k = get_input()[0]\n    cards = get_input()[1]\n    player_fav_numbers = get_input()[2]\n    joy_levels = get_input()[3]\n    max_joy = 0\n    for i in range(n):\n        max_joy += get_player_joy(get_cards(cards, i, k), player_fav_numbers[i], joy_levels, k)\n    print(max_joy)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649721417,
  "object": "edit"
}
2022-04-11 19:57:02.426136 fix spelling mistakes 2 ['\n\nimport sys\nsys.setrecursionlimit(100000)\n\ndef get_input():\n    inputs = []\n    for i in range(4):\n        inputs.append(list(map(int, input().split())))\n    return inputs\n\ndef get_cards(cards, index, k):\n    return cards[index*k:(index+1)*k]\n\n\ndef get_player_joy(cards, player_fav_numbers, joy_levels):\n    fav_cards = list(filter(lambda x: x == player_fav_numbers, cards))\n    return joy_levels[len(fav_cards)]\n\ndef main():\n    n, k = get_input()[0]\n    cards = get_input()[1]\n    player_fav_numbers = get_input()[2]\n    joy_levels = get_input()[3]\n    max_joy = 0\n    for i in range(n):\n        max_joy += get_player_joy(get_cards(cards, i, k), player_fav_numbers[i], joy_levels)\n    print(max_joy)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\nsys.setrecursionlimit(100000)\n\ndef get_input():\n    inputs = []\n    for i in range(4):\n        inputs.append(list(map(int, input().split())))\n    return inputs\n\ndef get_cards(cards, index, k):\n    return cards[index*k:(index+1)*k]\n\n\ndef get_player_joy(cards, player_fav_number, joy_levels, k):\n    fav_cards = list(filter(lambda x: x == player_fav_number, cards[:k]))\n    return joy_levels[len(fav_cards)]\n\ndef main():\n    n, k = get_input()[0]\n    cards = get_input()[1]\n    player_fav_numbers = get_input()[2]\n    joy_levels = get_input()[3]\n    max_joy = 0\n    for i in range(n):\n        max_joy += get_player_joy(get_cards(cards, i, k), player_fav_numbers[i], joy_levels, k)\n    print(max_joy)\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-11 19:57:02.426170 size on output set 2
2022-04-11 19:57:02.426174 size on input set 2
2022-04-11 19:57:10.019238 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nsys.setrecursionlimit(1000000)\n\ndef get_input():\n    inputs = []\n    for i in range(4):\n        inputs.append(list(map(int, input().split())))\n    return inputs\n\ndef get_cards(cards, index, k, n):\n    return cards[index*k:(index+1)*k] + cards[(index+1)*k:n]\n\n\ndef get_player_joy(cards, player_fav_number, joy_levels, k, n):\n    fav_cards = list(filter(lambda x: x == player_fav_number, cards[:k] + cards[n:]))\n    return joy_levels[len(fav_cards)]\n\ndef main():\n    n, k = get_input()[0]\n    cards = get_input()[1]\n    player_fav_numbers = get_input()[2]\n    joy_levels = get_input()[3]\n    max_joy = 0\n    for i in range(n):\n        max_joy += get_player_joy(get_cards(cards, i, k, n), player_fav_numbers[i], joy_levels, k, n)\n    print(max_joy)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nsys.setrecursionlimit(100000)\ndef get_input():\n    inputs = []\n    for i in range(4):\n        inputs.append(list(map(int, input().split())))\n    return inputs\ndef get_cards(cards, index, k):\n    return cards[index*k:(index+1)*k]\ndef get_player_joy(cards, player_fav_number, joy_levels, k):\n    fav_cards = list(filter(lambda x: x == player_fav_number, cards[:k]))\n    return joy_levels[len(fav_cards)]\ndef main():\n    n, k = get_input()[0]\n    cards = get_input()[1]\n    player_fav_numbers = get_input()[2]\n    joy_levels = get_input()[3]\n    max_joy = 0\n    for i in range(n):\n        max_joy += get_player_joy(get_cards(cards, i, k), player_fav_numbers[i], joy_levels, k)\n    print(max_joy)\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649721422,
  "object": "edit"
}
2022-04-11 19:57:10.019660 fix syntax errors 2 ['\n\nimport sys\nsys.setrecursionlimit(1000000)\n\ndef get_input():\n    inputs = []\n    for i in range(4):\n        inputs.append(list(map(int, input().split())))\n    return inputs\n\ndef get_cards(cards, index, k, n):\n    return cards[index*k:(index+1)*k] + cards[(index+1)*k:n]\n\n\ndef get_player_joy(cards, player_fav_number, joy_levels, k, n):\n    fav_cards = list(filter(lambda x: x == player_fav_number, cards[:k] + cards[n:]))\n    return joy_levels[len(fav_cards)]\n\ndef main():\n    n, k = get_input()[0]\n    cards = get_input()[1]\n    player_fav_numbers = get_input()[2]\n    joy_levels = get_input()[3]\n    max_joy = 0\n    for i in range(n):\n        max_joy += get_player_joy(get_cards(cards, i, k, n), player_fav_numbers[i], joy_levels, k, n)\n    print(max_joy)\n\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\nsys.setrecursionlimit(100000)\ndef get_input():\n    inputs = []\n    for i in range(4):\n        inputs.append(list(map(int, input().split())))\n    return inputs\ndef get_cards(cards, index, k):\n    return cards[index*k:(index+1)*k]\ndef get_player_joy(cards, player_fav_number, joy_levels, k):\n    fav_cards = list(filter(lambda x: x == player_fav_number, cards[:k]))\n    return joy_levels[len(fav_cards)]\ndef main():\n    n, k = get_input()[0]\n    cards = get_input()[1]\n    player_fav_numbers = get_input()[2]\n    joy_levels = get_input()[3]\n    max_joy = 0\n    for i in range(n):\n        max_joy += get_player_joy(get_cards(cards, i, k), player_fav_numbers[i], joy_levels, k)\n    print(max_joy)\nif __name__ == "__main__":\n    main()\n']
2022-04-11 19:57:12.883453 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nsys.setrecursionlimit(100000)\n\ndef get_input():\n    inputs = []\n    for i in range(4):\n        inputs.append(list(map(int, input().split())))\n    return inputs\n\ndef get_cards(cards, index, k):\n    return cards[index*k:(index+1)*k]\n\n\ndef get_player_joy(cards, player_fav_numbers, joy_levels):\n    fav_cards = list(filter(lambda x: x == player_fav_numbers, cards)) \n    return joy_levels[len(fav_cards)]\n\ndef main():\n    n, k = get_input()[0]\n    cards = get_input()[1]\n    player_fav_numbers = get_input()[2]\n    joy_levels = get_input()[3]\n    max_joy = 0\n    for i in range(n):\n        max_joy += get_player_joy(get_cards(cards, i, k), player_fav_numbers[i], joy_levels)\n    print(max_joy)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nsys.setrecursionlimit(100000)\n\ndef get_input():\n    inputs = []\n    for i in range(4):\n        inputs.append(list(map(int, input().split())))\n    return inputs\n\ndef get_cards(cards, index, k):\n    return cards[index*k:(index+1)*k]\n\n\ndef get_player_joy(cards, player_fav_numbers, joy_levels):\n    fav_cards = list(filter(lambda x: x == player_fav_numbers, cards)) \n    return joy_levels[len(fav_cards)]\n\ndef main():\n    n, k = get_input()[0]\n    cards = get_input()[1]\n    player_fav_numbers = get_input()[2]\n    joy_levels = get_input()[3]\n    max_joy = 0\n    for i in range(n):\n        max_joy += get_player_joy(get_cards(cards, i, k), player_fav_numbers[i], joy_levels)\n    print(max_joy)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649721430,
  "object": "edit"
}
2022-04-11 19:57:12.883678 fix syntax errors 2 ['\n\nimport sys\nsys.setrecursionlimit(100000)\n\ndef get_input():\n    inputs = []\n    for i in range(4):\n        inputs.append(list(map(int, input().split())))\n    return inputs\n\ndef get_cards(cards, index, k):\n    return cards[index*k:(index+1)*k]\n\n\ndef get_player_joy(cards, player_fav_numbers, joy_levels):\n    fav_cards = list(filter(lambda x: x == player_fav_numbers, cards)) \n    return joy_levels[len(fav_cards)]\n\ndef main():\n    n, k = get_input()[0]\n    cards = get_input()[1]\n    player_fav_numbers = get_input()[2]\n    joy_levels = get_input()[3]\n    max_joy = 0\n    for i in range(n):\n        max_joy += get_player_joy(get_cards(cards, i, k), player_fav_numbers[i], joy_levels)\n    print(max_joy)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\nsys.setrecursionlimit(100000)\n\ndef get_input():\n    inputs = []\n    for i in range(4):\n        inputs.append(list(map(int, input().split())))\n    return inputs\n\ndef get_cards(cards, index, k):\n    return cards[index*k:(index+1)*k]\n\n\ndef get_player_joy(cards, player_fav_numbers, joy_levels):\n    fav_cards = list(filter(lambda x: x == player_fav_numbers, cards)) \n    return joy_levels[len(fav_cards)]\n\ndef main():\n    n, k = get_input()[0]\n    cards = get_input()[1]\n    player_fav_numbers = get_input()[2]\n    joy_levels = get_input()[3]\n    max_joy = 0\n    for i in range(n):\n        max_joy += get_player_joy(get_cards(cards, i, k), player_fav_numbers[i], joy_levels)\n    print(max_joy)\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-11 19:57:12.883699 size on output set 3
2022-04-11 19:57:12.883709 num operations 2
2022-04-11 19:57:12.883713 size on input set 1
2022-04-11 19:57:26.425979 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    cards = map(int, sys.stdin.readline().split())\n    favs = map(int, sys.stdin.readline().split())\n    joy = map(int, sys.stdin.readline().split())\n\n    fav_cards_count = {}\n    for i, f in enumerate(favs):\n        if f in fav_cards_count:\n            fav_cards_count[f].append(i)\n        else:\n            fav_cards_count[f] = [i]\n\n    fav_cards_count_count = {}\n    for f, c in fav_cards_count.items():\n        fav_cards_count_count[f] = 0\n\n    for c in cards:\n        if c in fav_cards_count:\n            fav_cards_count_count[c] += 1\n\n    cards_per_player = {}\n    for f, c in fav_cards_count.items():\n        cards_per_player[f] = fav_cards_count_count[f] // len(c)\n\n    joy_sum = 0\n    for f, c in fav_cards.items():\n        joy_sum += joy[cards_per_player[f]] * len(c)\n\n    print(joy_sum)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    cards = map(int, sys.stdin.readline().split())\n    favs = map(int, sys.stdin.readline().split())\n    joy = map(int, sys.stdin.readline().split())\n\n    fav_cards = dict()\n    for i, f in enumerate(favs):\n        if f in fav_cards:\n            fav_cards[f].append(i)\n        else:\n            fav_cards[f] = [i]\n\n    fav_cards_count = dict()\n    for f, c in fav_cards.items():\n        fav_cards_count[f] = 0\n\n    for c in cards:\n        if c in fav_cards:\n            fav_cards_count[c] += 1\n\n    cards_per_player = dict()\n    for f, c in fav_cards.items():\n        cards_per_player[f] = fav_cards_count[f] // len(c)\n\n    joy_sum = 0\n    for f, c in fav_cards.items():\n        joy_sum += joy[cards_per_player[f]] * len(c)\n\n    print(joy_sum)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649721433,
  "object": "edit"
}
2022-04-11 19:57:26.426260 fix spelling mistakes 2 ["\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    cards = map(int, sys.stdin.readline().split())\n    favs = map(int, sys.stdin.readline().split())\n    joy = map(int, sys.stdin.readline().split())\n\n    fav_cards_count = {}\n    for i, f in enumerate(favs):\n        if f in fav_cards_count:\n            fav_cards_count[f].append(i)\n        else:\n            fav_cards_count[f] = [i]\n\n    fav_cards_count_count = {}\n    for f, c in fav_cards_count.items():\n        fav_cards_count_count[f] = 0\n\n    for c in cards:\n        if c in fav_cards_count:\n            fav_cards_count_count[c] += 1\n\n    cards_per_player = {}\n    for f, c in fav_cards_count.items():\n        cards_per_player[f] = fav_cards_count_count[f] // len(c)\n\n    joy_sum = 0\n    for f, c in fav_cards.items():\n        joy_sum += joy[cards_per_player[f]] * len(c)\n\n    print(joy_sum)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    cards = map(int, sys.stdin.readline().split())\n    favs = map(int, sys.stdin.readline().split())\n    joy = map(int, sys.stdin.readline().split())\n\n    fav_cards = dict()\n    for i, f in enumerate(favs):\n        if f in fav_cards:\n            fav_cards[f].append(i)\n        else:\n            fav_cards[f] = [i]\n\n    fav_cards_count = dict()\n    for f, c in fav_cards.items():\n        fav_cards_count[f] = 0\n\n    for c in cards:\n        if c in fav_cards:\n            fav_cards_count[c] += 1\n\n    cards_per_player = dict()\n    for f, c in fav_cards.items():\n        cards_per_player[f] = fav_cards_count[f] // len(c)\n\n    joy_sum = 0\n    for f, c in fav_cards.items():\n        joy_sum += joy[cards_per_player[f]] * len(c)\n\n    print(joy_sum)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 19:57:26.426313 size on output set 2
2022-04-11 19:57:26.426326 size on input set 2
2022-04-11 19:57:28.991279 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    cards = map(int, sys.stdin.readline().split())\n    favs = map(int, sys.stdin.readline().split())\n    joy = map(int, sys.stdin.readline().split())\n\n    fav_cards_count = {}\n    for i, f in enumerate(favs):\n        if f in fav_cards_count:\n            fav_cards_count[f].append(i)\n        else:\n            fav_cards_count[f] = [i]\n\n    fav_cards_count_count = {}\n    for f, c in fav_cards_count.items():\n        fav_cards_count_count[f] = 0\n\n    for c in cards:\n        if c in fav_cards_count:\n            fav_cards_count_count[c] += 1\n\n    cards_per_player = {}\n    for f, c in fav_cards_count.items():\n        cards_per_player[f] = fav_cards_count_count[f] // len(c)\n\n    joy_sum = 0\n    for f, c in fav_cards_count.items():\n        joy_sum += joy[cards_per_player[f]] * len(c)\n\n    print(joy_sum)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    cards = map(int, sys.stdin.readline().split())\n    favs = map(int, sys.stdin.readline().split())\n    joy = map(int, sys.stdin.readline().split())\n\n    fav_cards_count = {}\n    for i, f in enumerate(favs):\n        if f in fav_cards_count:\n            fav_cards_count[f].append(i)\n        else:\n            fav_cards_count[f] = [i]\n\n    fav_cards_count_count = {}\n    for f, c in fav_cards_count.items():\n        fav_cards_count_count[f] = 0\n\n    for c in cards:\n        if c in fav_cards_count:\n            fav_cards_count_count[c] += 1\n\n    cards_per_player = {}\n    for f, c in fav_cards_count.items():\n        cards_per_player[f] = fav_cards_count_count[f] // len(c)\n\n    joy_sum = 0\n    for f, c in fav_cards_count.items():\n        joy_sum += joy[cards_per_player[f]] * len(c)\n\n    print(joy_sum)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649721446,
  "object": "edit"
}
2022-04-11 19:57:28.991707 fix syntax errors 2 ["\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    cards = map(int, sys.stdin.readline().split())\n    favs = map(int, sys.stdin.readline().split())\n    joy = map(int, sys.stdin.readline().split())\n\n    fav_cards_count = {}\n    for i, f in enumerate(favs):\n        if f in fav_cards_count:\n            fav_cards_count[f].append(i)\n        else:\n            fav_cards_count[f] = [i]\n\n    fav_cards_count_count = {}\n    for f, c in fav_cards_count.items():\n        fav_cards_count_count[f] = 0\n\n    for c in cards:\n        if c in fav_cards_count:\n            fav_cards_count_count[c] += 1\n\n    cards_per_player = {}\n    for f, c in fav_cards_count.items():\n        cards_per_player[f] = fav_cards_count_count[f] // len(c)\n\n    joy_sum = 0\n    for f, c in fav_cards_count.items():\n        joy_sum += joy[cards_per_player[f]] * len(c)\n\n    print(joy_sum)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    cards = map(int, sys.stdin.readline().split())\n    favs = map(int, sys.stdin.readline().split())\n    joy = map(int, sys.stdin.readline().split())\n\n    fav_cards_count = {}\n    for i, f in enumerate(favs):\n        if f in fav_cards_count:\n            fav_cards_count[f].append(i)\n        else:\n            fav_cards_count[f] = [i]\n\n    fav_cards_count_count = {}\n    for f, c in fav_cards_count.items():\n        fav_cards_count_count[f] = 0\n\n    for c in cards:\n        if c in fav_cards_count:\n            fav_cards_count_count[c] += 1\n\n    cards_per_player = {}\n    for f, c in fav_cards_count.items():\n        cards_per_player[f] = fav_cards_count_count[f] // len(c)\n\n    joy_sum = 0\n    for f, c in fav_cards_count.items():\n        joy_sum += joy[cards_per_player[f]] * len(c)\n\n    print(joy_sum)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 19:57:34.469842 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    cards = list(map(int, sys.stdin.readline().split()))\n    favs = list(map(int, sys.stdin.readline().split()))\n    joy = list(map(int, sys.stdin.readline().split()))\n\n    fav_cards = dict()\n    for i, f in enumerate(favs):\n        if f in fav_cards:\n            fav_cards[f].append(i)\n        else:\n            fav_cards[f] = [i]\n\n    fav_cards_count = dict()\n    for f in fav_cards.keys():\n        fav_cards_count[f] = 0\n\n    for c in cards:\n        if c in fav_cards:\n            fav_cards_count[c] += 1\n\n    cards_per_player = dict()\n    for f, c in fav_cards.items():\n        cards_per_player[f] = fav_cards_count[f] // len(c)\n\n    joy_sum = 0\n    for f in fav_cards.keys():\n        joy_sum += joy[cards_per_player[f]] * len(c)\n\n    print(joy_sum)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    cards = map(int, sys.stdin.readline().split())\n    favs = map(int, sys.stdin.readline().split())\n    joy = map(int, sys.stdin.readline().split())\n\n    fav_cards = dict()\n    for i, f in enumerate(favs):\n        if f in fav_cards:\n            fav_cards[f].append(i)\n        else:\n            fav_cards[f] = [i]\n\n    fav_cards_count = dict()\n    for f in fav_cards.keys():\n        fav_cards_count[f] = 0\n\n    for c in cards:\n        if c in fav_cards:\n            fav_cards_count[c] += 1\n\n    cards_per_player = dict()\n    for f, c in fav_cards.items():\n        cards_per_player[f] = fav_cards_count[f] // len(c)\n\n    joy_sum = 0\n    for f in fav_cards.keys():\n        joy_sum += joy[cards_per_player[f]] * len(c)\n\n    print(joy_sum)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649721449,
  "object": "edit"
}
2022-04-11 19:57:34.470142 fix syntax errors 2 ["\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    cards = list(map(int, sys.stdin.readline().split()))\n    favs = list(map(int, sys.stdin.readline().split()))\n    joy = list(map(int, sys.stdin.readline().split()))\n\n    fav_cards = dict()\n    for i, f in enumerate(favs):\n        if f in fav_cards:\n            fav_cards[f].append(i)\n        else:\n            fav_cards[f] = [i]\n\n    fav_cards_count = dict()\n    for f in fav_cards.keys():\n        fav_cards_count[f] = 0\n\n    for c in cards:\n        if c in fav_cards:\n            fav_cards_count[c] += 1\n\n    cards_per_player = dict()\n    for f, c in fav_cards.items():\n        cards_per_player[f] = fav_cards_count[f] // len(c)\n\n    joy_sum = 0\n    for f in fav_cards.keys():\n        joy_sum += joy[cards_per_player[f]] * len(c)\n\n    print(joy_sum)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    cards = map(int, sys.stdin.readline().split())\n    favs = map(int, sys.stdin.readline().split())\n    joy = map(int, sys.stdin.readline().split())\n\n    fav_cards = dict()\n    for i, f in enumerate(favs):\n        if f in fav_cards:\n            fav_cards[f].append(i)\n        else:\n            fav_cards[f] = [i]\n\n    fav_cards_count = dict()\n    for f in fav_cards.keys():\n        fav_cards_count[f] = 0\n\n    for c in cards:\n        if c in fav_cards:\n            fav_cards_count[c] += 1\n\n    cards_per_player = dict()\n    for f, c in fav_cards.items():\n        cards_per_player[f] = fav_cards_count[f] // len(c)\n\n    joy_sum = 0\n    for f in fav_cards.keys():\n        joy_sum += joy[cards_per_player[f]] * len(c)\n\n    print(joy_sum)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 19:57:34.470179 size on output set 3
