["import sys\n\nsys.setrecursionlimit(10**8)\n\nn, m = map(int, input().split())\nedges = []\n\nparent = [i for i in range(n+1)]\nsize = [1 for _ in range(n+1)]\n\nfor _ in range(m):\n    edges.append(tuple(map(int, input().split())))\n\nedges.sort(key=lambda x: (x[0], x[1]))\n\ndef find(x):\n    if x == parent[x]:\n        return x\n    parent[x] = find(parent[x])\n    return parent[x]\n\ndef union(x, y):\n    x_root = find(x)\n    y_root = find(y)\n\n    if size[x_root] < size[y_root]:\n        x_root, y_root = y_root, x_root\n    \n    parent[y_root] = x_root\n    size[x_root] += size[y_root]\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n        print(edge[0], edge[1])\n", "n, m = map(int, input().split())\nedges = []\n\nfor _ in range(m):\n    edges.append(tuple(map(int, input().split())))\n\nedges.sort(key=lambda x: (x[0], -x[1]))\n\ndef find(x):\n    if x == parent[x]:\n        return x\n    parent[x] = find(parent[x])\n    return parent[x]\n\ndef union(x, y):\n    x_root = find(x)\n    y_root = find(y)\n\n    if size[x_root] < size[y_root]:\n        x_root, y_root = y_root, x_root\n\n    parent[y_root] = x_root\n    size[x_root] += size[y_root]\n\nparent = [i for i in range(n+1)]\nsize = [1 for _ in range(n+1)]\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n        print(edge[0], edge[1])\n", "\n\nn, m = map(int, input().split())\n\nedges = []\n\nfor _ in range(m):\n    edges.append(tuple(map(int, input().split())))\n\nedges.sort(key=lambda x: (x[1], x[0]))\n\ndef find(x):\n    if x == parent[x]:\n        return x\n    parent[x] = find(parent[x])\n    return parent[x]\n\ndef union(x, y):\n    x_root = find(x)\n    y_root = find(y)\n\n    parent[y_root] = x_root\n    size[x_root] += size[y_root]\n\nparent = [i for i in range(n+1)]\nsize = [1 for _ in range(n+1)]\n\"\"\"\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n\"\"\"\n        union(edge[0], edge[1])\n        print(edge[0], edge[1])\n", "\n\nn, m = map(int, input().split())\n\nedges = []\n\nfor _ in range(m):\n    edges.append(tuple(map(int, input().split())))\n\nedges.sort(key=lambda x: (x[1], x[0]))\n\ndef find(x):\n    if x == parent[x]:\n        return x\n    parent[x] = find(parent[x])\n    return parent[x]\n\ndef union(x, y):\n    x_root = find(x)\n    y_root = find(y)\n\n    if x_root != y_root:\n        parent[y_root] = x_root\n        size[x_root] += size[y_root]\n\nparent = [i for i in range(n+1)]\nsize = [1 for _ in range(n+1)]\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n\nfor edge in edges:\n    if find(edge[0]) != find(edge[1]):\n        union(edge[0], edge[1])\n        print(edge[0], edge[1])\n", "import collections\n\n\ndef solution(n, m, edges):\n    \"\"\"\n    >>> solution(5, 5, [[1, 2], [2, 3], [3, 5], [4, 3], [1, 5]])\n    [[3, 5], [2, 1], [3, 2], [3, 4]]\n    >>> solution(4, 6, [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]])\n    [[4, 1], [1, 2], [1, 3]]\n    >>> solution(8, 9, [[1, 2], [2, 3], [2, 5], [1, 6], [3, 4], [6, 5], [4, 5], [2, 7], [5, 8]])\n    [[3, 2], [2, 5], [8, 5], [6, 1], [2, 7], [1, 2], [3, 4]]\n    \"\"\"\n    ans = []\n    visited = [False] * n\n    adj = [[] for _ in range(n)]\n    for v, u in edges:\n        adj[v - 1].append(u - 1)\n        adj[u - 1].append(v - 1)\n    q = collections.deque([0])\n    visited[0] = True\n    while q:\n        v = q.popleft()\n        for u in adj[v]:\n            if not visited[u]:\n                visited[u] = True\n                q.append(u)\n                ans.append([v + 1, u + 1])\n    return ans\n\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    edges = [list(map(int, input().split())) for _ in range(m)]\n    ans = solution(n, m, edges)\n    for v, u in ans:\n        print(v, u)\n"]