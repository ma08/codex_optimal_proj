["from sys import stdin\n\ntt = 1\n\nfor loop in range(tt):\n\n    dic = {}\n    dic[0] = 1\n\n    n = int(stdin.readline())\n\n    a = list(map(int,stdin.readline().split()))\n    now = 0\n    ans = 0\n\n    for i in a:\n        now += i\n        if now in dic:\n            ans += 1\n            dic = {}\n            dic[0] = 1\n            now = i\n            \n        dic[now] = 1\n\n    print (ans)", "n = int(input())\narr = list(map(int, input().split()))\n\nans = 0\npref = [0]\nprefset = {0}\nfor i in range(n):\n    now = pref[-1] + arr[i]\n    if now in prefset:\n        ans += 1\n        pref = [0, arr[i]]\n        prefset = {0, arr[i]}\n    else:\n        pref.append(now)\n        prefset.add(now)\n    # print(pref)\n    # print(prefset)\n\nprint(ans)\n", "# Created by: WeirdBugsButOkay\n# 28-09-2020, 13:52:29\n\nimport math\n\ndef solve() :\n    n = int(input())\n    a = list(map(int, input().split()))\n    dict = {}\n    dict[0] = 1\n    sum, ans = 0, 0\n    for i in range(0, n) :\n        sum += a[i]\n        #print(i, sum)\n        if sum in list(dict.keys()) :\n            ans += 1\n            dict = {}\n            dict[0] = 1\n            sum = a[i]\n            dict[sum] = 1\n            #print(\"haha\")\n        else :\n            dict[sum] = 1\n    print(ans)\n    \n\nt = 1\n#t = int(input())\nfor _ in range (0, t) :\n    solve()\n", "from sys import stdin, stdout\n\ndef find(arr,N):\n    S=set([0])\n    r=0\n    k=0\n    for i in arr:\n        r+=i\n        # print(S,r)\n        if r in S: \n            k+=1\n            S=set([0])\n            r=i\n        S.add(r)\n    return k\n\n\ndef main():\n    # for _ in range(int(stdin.readline())):\n        N=int(stdin.readline())\n        arr=list(map(int, stdin.readline().split()))\n        print(find(arr,N))\nmain()", "# for _ in range(int(input())):\nfor _ in range(1):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    d = dict()\n    lst = -1\n    ans = 0\n    bal = 0\n    d[0] = -1\n    for i in range(n):\n        nbal = bal + arr[i]\n        if nbal in d:\n            k = d[nbal]\n            if k >= lst:\n                ans += 1\n                lst = i - 1\n        bal = nbal\n        d[bal] = i\n    print(ans)\n", "n=int(input())\nl=input().split()\nli=[int(i) for i in l]\nhashi=dict()\npref=0\nans=0\nhashi[pref]=1\nfor i in range(n):\n    pref+=li[i]\n    if(pref in hashi):\n        ans+=1\n        pref=li[i]\n        hashi=dict()\n        hashi[0]=1\n        hashi[pref]=1\n    else:\n        hashi[pref]=1\nprint(ans)\n", "import math\nfor _ in range(1):\n    n=int(input())\n    a=list(map(int,input().split()))\n    ans=0\n    s=0\n    d={0:1}\n    for i in range(n):\n        s+=a[i]\n        if s in d:\n            ans+=1\n            s=a[i]\n            d={0:1}\n            d[s]=1\n        else:\n            d[s]=1\n    print(ans)        ", "n = int(input())\na = list(map(int,input().split()))\n\nprefixes = set()\ncurr = 0\nans = 0\nfor i in range(n):\n\tcurr += a[i]\n\tif curr==0 or curr in prefixes:\n\t\tans += 1\n\t\tcurr = a[i]\n\t\tprefixes.clear()\n\tprefixes.add(curr)\n\nprint(ans)", "import sys\nreadline = sys.stdin.readline\n\nN = int(readline())\nA = list(map(int, readline().split()))\n\nS = set([0])\n\ncnt = 0\nans = 0\nfor a in A:\n    cnt += a\n    if cnt in S:\n        ans += 1\n        S = set([0, a])\n        cnt = a\n    else:\n        S.add(cnt)\nprint(ans)", "n = int(input())\nlst = list(map(int,input().split()))\npref = dict()\nsum = lst[0]\npref[lst[0]] = 1\npref[0] = 1\nres = 0\nfor r in range(1, n):\n    sum += lst[r]\n    if pref.get(sum, 0):\n        pref = dict()\n        pref[0] = 1\n        res += 1\n        sum = lst[r]\n    pref[sum] = 1\nprint(res)", "import sys\ninput = sys.stdin.readline\nn = int(input())\na = list(map(int,input().split()))\ndone = {a[0]:0,0:0}\ns = a[0]\nans = 0\nfor i in range(1,n):\n\ts += a[i]\n\tif s in done:\n\t\tdone = {0:0,a[i]:0}\n\t\tans += 1\n\t\ts = a[i]\n\telse:\n\t\tdone[s] = 0\nprint (ans)\n", "from itertools import accumulate\nfrom collections import defaultdict\n\nn = int(input())\n\na = list(map(int, input().split()))\n\nacc = list(accumulate(a))\n\npositions = defaultdict(lambda: [])\n\nfor i, val in enumerate(acc):\n    positions[val].append(i)\n    \nintervals = []\n    \nfor val, pos_list in list(positions.items()):\n    if val == 0:\n        intervals.append((pos_list[0], 0))\n    for pos1, pos2 in zip(pos_list, pos_list[1:]):\n        intervals.append((pos2, pos1+1))\n        \nintervals.sort()\n\nans = 0\nprev = -10**10\nfor e, s in intervals:\n    if s < prev:\n        continue\n    else:\n        ans += 1\n        prev = e\nprint(ans)\n", "import sys\ninput = sys.stdin.readline\n\nn=int(input())\nA=list(map(int,input().split()))\n\nS=[0]\nfor a in A:\n    S.append(S[-1]+a)\n\nANS=0\nSET=set()\nfor i in range(n+1):\n    if S[i] in SET:\n        ANS+=1\n        SET={S[i],S[i-1]}\n    else:\n        SET.add(S[i])\n\nprint(ANS)\n\n\n", "n = int(input())\na = list(map(int, input().split()))\nm = {0}\nans = 0\nsumm = 0\nfor i in range(n):\n    summ += a[i]\n    if summ == 0 or summ in m:\n        ans += 1\n        m = {a[i]}\n        summ = a[i]\n    else:\n        m.add(summ)\nprint(ans)\n", "from bisect import *\nfrom collections import *\nfrom math import *\nfrom heapq import *\nfrom typing import List\nfrom itertools import *\nfrom operator import *\nfrom functools import *\nimport sys\n'''\n@lru_cache(None)\ndef fact(x):\n    if x<2:\n        return 1\n    return fact(x-1)*x\n\n@lru_cache(None)\ndef per(i,j):\n    return fact(i)//fact(i-j)\n\n@lru_cache(None)\ndef com(i,j):\n    return per(i,j)//fact(j)\n\ndef linc(f,t,l,r):\n    while l<r:\n        mid=(l+r)//2\n        if t>f(mid):\n            l=mid+1\n        else:\n            r=mid\n    return l\n\ndef rinc(f,t,l,r):\n    while l<r:\n        mid=(l+r+1)//2\n        if t<f(mid):\n            r=mid-1\n        else:\n            l=mid\n    return l\n\ndef ldec(f,t,l,r):\n    while l<r:\n        mid=(l+r)//2\n        if t<f(mid):\n            l=mid+1\n        else:\n            r=mid\n    return l\n\ndef rdec(f,t,l,r):\n    while l<r:\n        mid=(l+r+1)//2\n        if t>f(mid):\n            r=mid-1\n        else:\n            l=mid\n    return l\n\ndef isprime(n):\n    for i in range(2,int(n**0.5)+1):\n        if n%i==0:\n            return False\n    return True\n\ndef power2(n):\n    while not n&1:\n        n>>=1\n    return n==1\n'''\n'''\nfor i in range(t):\n    #n,m=map(int,input().split())\n    n,m=1,0\n    graph=defaultdict(set)\n    for i in range(m):\n        u,v=map(int,input().split())\n        graph[u-1].add(v-1)\n    visited=[0]*n\n    ans=[]\n    def delchild(u):\n        for child in graph[u]:\n            visited[child]=1\n            ans.append(child+1)\n    for i in range(n):\n        if not visited[i]:\n            children=graph[i]\n            if len(children)==1:\n                u=children.pop()\n                visited[u]=1\n                delchild(u)\n            elif len(children)==2:\n                u=children.pop()\n                v=children.pop()\n                if u in graph[v]:\n                    delchild(v)\n                    visited[v]=1\n                elif v in graph[u]:\n                    delchild(u)\n                    visited[u]=1\n                else:\n                    delchild(u)\n                    delchild(v)\n                    visited[u]=visited[v]=1\n    print(len(ans))\n    sys.stdout.flush()\n    print(' '.join(map(str,ans)))\n    sys.stdout.flush()\n\nimport time\ns=time.time()\ne=time.time()\nprint(e-s)\n'''\n'''\nt=int(input())\nfor i in range(t):\n    #n,m=map(int,input().split())\n    n=int(input())\n    x=int(sqrt(n))\n    if x*x==n:\n        ans=2*x-2\n    elif x*(x+1)>=n:\n        ans=2*x-1\n    else:\n        ans=2*x\n    print(ans)\n'''\nn=int(input())\narr=list(map(int,input().split()))\nd={0}\npre=0\nans=0\nfor a in arr:\n    pre+=a\n    if pre in d:\n        ans+=1\n        pre=a\n        d={0,a}\n    else:\n        d.add(pre)\nprint(ans)\n                \n    \n\n", "N, = list(map(int, input().split()))\nX = list(map(int, input().split()))\n#print(X)\nfor i in range(1, N):\n    X[i] += X[i-1]\n#print(X)\nd = set([0])\nR = 0\nfor i in range(N):\n    if X[i] in d:\n#        print(i)\n        R += 1\n        d = set()\n    d.add(X[i])\n    if i>0:\n        d.add(X[i-1])\nprint(R)\n", "from math import *\nfrom sys import *\ninput = stdin.readline\n\nfor _ in range(1):\n    \n    n = int(input())\n    a = list(map(int,input().split()))\n    \n    d = {0:1}\n    cn = 0 \n    \n    sn = 0 \n    for i in range(n):\n        sn += a[i]\n        if(d.get(sn,0) == 1):\n            sn = a[i]\n            cn += 1\n            d = {0:1,a[i]:1}\n        else:\n            d[sn] = 1\n    \n    stdout.write(str(cn)+'\\n')", "input()\n\nprefix_sums = set()\nprefix_sums_shift = 1000\nresult = 0\nfor x in map(int, input().split()):\n    if prefix_sums_shift - x in prefix_sums:\n        result += 1\n        prefix_sums = set()\n        prefix_sums_shift = 0\n    prefix_sums_shift -= x\n    prefix_sums.add(x + prefix_sums_shift)\nprint(result)\n", "n=int(input())\nL=[0]\nfor i in map(int,input().split()):L.append(L[-1]+i)\nd=dict()\nct=0\nlast=0\nfor i in L:\n    if i not in d:d[i]=1\n    else:\n        ct+=1\n        d=dict()\n        d[last]=1\n        d[i]=1\n    last=i\nprint(ct)", "from bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom heapq import heappush,heappop,heapify\nimport math\nfrom collections import *\nfrom functools import reduce,cmp_to_key\nimport sys\ninput = sys.stdin.readline\n\nfrom itertools import accumulate\nfrom functools import lru_cache\n\nM = mod = 998244353\ndef factors(n):return sorted(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\ndef inv_mod(n):return pow(n, mod - 2, mod)\n \ndef li():return [int(i) for i in input().rstrip('\\n').split()]\ndef st():return input().rstrip('\\n')\ndef val():return int(input().rstrip('\\n'))\ndef li2():return [i for i in input().rstrip('\\n')]\ndef li3():return [int(i) for i in input().rstrip('\\n')]\n\n\nn = val()\nl = li()\n\n# l = list(accumulate(l))\nd = {0:1}\n\ncurrsum = ans = 0\nfor i in range(n):\n    currsum += l[i]\n    if currsum in d:\n        d = {}\n        d[0] = 1\n        d[l[i]] = 1\n        ans += 1\n        currsum = l[i]\n    else:d[currsum] = 1\n    # print(currsum)\nprint(ans)", "n = int(input())\nA = [int(i) for i in input().split()]\n\ncumm = [A[0]]*n\nd = {A[0]: [0]}\ncount = 0\nlast_idx = -1\nfor i in range(1,n):\n    cumm[i] = cumm[i-1]+A[i]\n\n    if cumm[i] == 0 and last_idx == -1:\n        # print(i)\n        count += 1\n        last_idx = i\n    elif cumm[i] in d:\n        l = d[cumm[i]]\n        if l[-1] >= last_idx-1:\n            # print(i, last_idx)\n            count += 1\n            last_idx = i\n\n    if cumm[i] not in d:\n        d[cumm[i]] = []\n    d[cumm[i]].append(i)\n\nprint(count)\n", "import sys,math\nfrom collections import Counter,deque,defaultdict\nfrom bisect import bisect_left,bisect_right \nmod = 10**9+7\nINF = float('inf')\ndef inp(): return int(sys.stdin.readline())\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\nn = inp()\na = inpl()\nres = 0\nnow = 0\nse = set()\nfor x in a:\n    now += x \n    if now in se or now == 0:\n        res += 1\n        now = x\n        se = set()\n        se.add(now)\n    else:\n        se.add(now)\nprint(res)", "def main():\n    #n, m = map(int, input().split())\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = {0}\n    acc = 0\n    ans = 0\n    for x in a:\n        acc += x\n        if acc in s:\n            ans += 1\n            s = {0, x}\n            acc = x\n        else:\n            s.add(acc)\n    print(ans)\n\n#input = sys.stdin.readline\n\n#sys.setrecursionlimit(2097152)\ntn = 1 #int(input())\nfor _ in range(tn):\n    main()"]