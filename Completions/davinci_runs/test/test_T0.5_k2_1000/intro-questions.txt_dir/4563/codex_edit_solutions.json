["\nimport sys\nfrom fractions import gcd\nfrom functools import reduce\n\ndef lcm(x, y):\n   if x > y:\n       greater = x\n   else:\n       greater = y\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n   return lcm\n\ndef main():\n    N = int(sys.stdin.readline().rstrip())\n    T = []\n    A = []\n    for i in range(N):\n        t,a = map(int, sys.stdin.readline().rstrip().split())\n        T.append(t)\n        A.append(a)\n    ans = 1\n    for i in range(N):\n        if i == 0:\n            ans = T[0] + A[0] - 1\n        else:\n            lcm_num = lcm(T[i],A[i])\n            ans = lcm_num - ans\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\nN = int(input())\nA = []\nfor _ in range(N):\n    T, X = map(int, input().split())\n    A.append([T, X])\n\nl = A[0][0]\nr = A[0][1]\nfor i in range(1, N):\n    l = lcm(l, A[i][0]) % MOD\n    r = lcm(r, A[i][1]) % MOD\n\nprint(l+r)\n", "import sys\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\nN = int(input())\nA = []\nfor _ in range(N):\n    t, a = map(int, input().split())\n    A.append([t, a])\n\nl = A[0][0]\nr = A[0][1]\nfor i in range(1, N):\n    l = lcm(l, A[i][0])\n    r = lcm(r, A[i][1])\n\nprint(l+r)\n", "\nimport sys\nfrom fractions import gcd\nfrom functools import reduce\n\ndef lcm(x, y):\n   if x > y:\n       greater = x\n   else:\n       greater = y\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n   return lcm\n\ndef main():\n    N = int(sys.stdin.readline().rstrip())\n    T = []\n    A = []\n    for i in range(N):\n        t,a = map(int, sys.stdin.readline().rstrip().split())\n        T.append(t)\n        A.append(a)\n    #print(T,A)\n    ans = 1\n    for i in range(N):\n        if i == 0:\n            ans = T[0] + A[0] - 1\n        else:\n            lcm_num = lcm(T[i],A[i])\n            ans = lcm_num - ans\n            #print(i,lcm_num,ans)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nfrom fractions import gcd\nfrom functools import reduce\n\ndef lcm(x, y):\n   if x > y:\n       greater = x\n   else:\n       greater = y\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n   return lcm\n\ndef main():\n    N = int(sys.stdin.readline().rstrip())\n    T = []\n    A = []\n    for i in range(N):\n        t,a = map(int, sys.stdin.readline().rstrip().split())\n        T.append(t)\n        A.append(a)\n    #print(T,A) \n    ans = 1\n    for i in range(N):\n        if i == 0:\n            ans = T[0] + A[0] - 1\n        else:\n            lcm_num = lcm(T[i],A[i])\n            ans = lcm_num + ans\n            #print(i,lcm_num,ans)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "from math import gcd\nN = int(input())\nA = []\nfor _ in range(N):\n    T, X = map(int, input().split())\n    A.append([T, X])\n\nl = A[0][0]\nr = A[0][1]\nfor i in range(1, N):\n    l = l * A[i][0] // gcd(l, A[i][0])\n    r = r * A[i][1] // gcd(r, A[i][1])\n\nprint(l+r)\n", "\nimport sys\n\ndef lcm(x, y):\n   if x > y:\n       greater = x\n   else:\n       greater = y\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n   return lcm\n\ndef main():\n    N = int(sys.stdin.readline().rstrip())\n    T = []\n    A = []\n    for i in range(N):\n        t,a = map(int, sys.stdin.readline().rstrip().split())\n        T.append(t)\n        A.append(a)\n    #print(T,A) \n    ans = 1\n    for i in range(N):\n        if i == 0:\n            ans = T[0] + A[0] - 1\n        else:\n            lcm_num = lcm(T[i],A[i])\n            ans = lcm_num + ans\n            #print(i,lcm_num,ans)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\nN = int(input())\nA = []\nfor _ in range(N):\n    t, a = map(int, input().split())\n    A.append([t, a])\n\nl = A[0][0]\nr = A[0][1]\nfor i in range(1, N):\n    l = lcm(l, A[i][0])\n    r = lcm(r, A[i][1])\n\nprint(l+r)\n"]