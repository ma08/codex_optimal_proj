2022-04-09 20:53:09.585260 """
AtCoDeer the deer is seeing a quick report of election results on TV.
Two candidates are standing for the election: Takahashi and Aoki.
The report shows the ratio of the current numbers of votes the two candidates have obtained, but not the actual numbers of votes.
AtCoDeer has checked the report N times, and when he checked it for the i-th (1≦i≦N) time, the ratio was T_i:A_i.
It is known that each candidate had at least one vote when he checked the report for the first time.
Find the minimum possible total number of votes obtained by the two candidates when he checked the report for the N-th time.
It can be assumed that the number of votes obtained by each candidate never decreases.

-----Constraints-----
 - 1≦N≦1000
 - 1≦T_i,A_i≦1000 (1≦i≦N)
 - T_i and A_i (1≦i≦N) are coprime.
 - It is guaranteed that the correct answer is at most 10^{18}.

-----Input-----
The input is given from Standard Input in the following format:
N
T_1 A_1
T_2 A_2
:
T_N A_N

-----Output-----
Print the minimum possible total number of votes obtained by Takahashi and Aoki when AtCoDeer checked the report for the N-th time.

-----Sample Input-----
3
2 3
1 1
3 2

-----Sample Output-----
10

When the numbers of votes obtained by the two candidates change as 2,3 → 3,3 → 6,4, the total number of votes at the end is 10, which is the minimum possible number.
"""
2022-04-09 20:53:09.585294 --------------------------
2022-04-09 20:53:24.997865 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport sys\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\nN = int(input())\nA = []\nfor _ in range(N):\n    T, A = map(int, input().split())\n    A.append([T, A])\n\nl = A[0][0]\nr = A[0][1]\nfor i in range(1, N):\n    l = lcm(l, A[i][0])\n    r = lcm(r, A[i][1])\n\nprint(l+r)"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\nfrom fractions import gcd\nfrom functools import reduce\n\ndef lcm(x, y):\n   if x > y:\n       greater = x\n   else:\n       greater = y\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n   return lcm\n\ndef main():\n    N = int(sys.stdin.readline().rstrip())\n    T = []\n    A = []\n    for i in range(N):\n        t,a = map(int, sys.stdin.readline().rstrip().split())\n        T.append(t)\n        A.append(a)\n    #print(T,A)\n    ans = 1\n    for i in range(N):\n        if i == 0:\n            ans = T[0] + A[0] - 1\n        else:\n            lcm_num = lcm(T[i],A[i])\n            ans = lcm_num + ans\n            #print(i,lcm_num,ans)\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1649551989,
  "id": "cmpl-4vG7BXZdH2vbUdS7uhBPUnTWXN3Hd",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 20:53:24.998057 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport sys\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\nN = int(input())\nA = []\nfor _ in range(N):\n    T, A = map(int, input().split())\n    A.append([T, A])\n\nl = A[0][0]\nr = A[0][1]\nfor i in range(1, N):\n    l = lcm(l, A[i][0])\n    r = lcm(r, A[i][1])\n\nprint(l+r)"
}
2022-04-09 20:53:24.998094 REASON stop
2022-04-09 20:53:24.999302 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\nfrom fractions import gcd\nfrom functools import reduce\n\ndef lcm(x, y):\n   if x > y:\n       greater = x\n   else:\n       greater = y\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n   return lcm\n\ndef main():\n    N = int(sys.stdin.readline().rstrip())\n    T = []\n    A = []\n    for i in range(N):\n        t,a = map(int, sys.stdin.readline().rstrip().split())\n        T.append(t)\n        A.append(a)\n    #print(T,A)\n    ans = 1\n    for i in range(N):\n        if i == 0:\n            ans = T[0] + A[0] - 1\n        else:\n            lcm_num = lcm(T[i],A[i])\n            ans = lcm_num + ans\n            #print(i,lcm_num,ans)\n    print(ans)\n\nif __name__ == '__main__':\n    main()"
}
2022-04-09 20:53:24.999384 REASON stop
