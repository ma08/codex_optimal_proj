["import sys\ns = input()\n\ndef is_k_periodic(s, k):\n    if len(s) % k != 0:\n        return False \n    for i in range(1, len(s) // k):\n        if s[i * k - 1] != s[i * k]:\n            return False\n    return True\n\nk = 1\nwhile not is_k_periodic(s, k):\n    k += 1\nprint(k)\n", "\ns = input()\n\n# The smallest k for which s is k-periodic is the largest integer k' such that s[i] = s[i+k'] for all i in the range [0, len(s)-k'].\n\n# To find this k', we can use a sliding window of size k' and check that all the characters are equal.\n\n# If a window of size k' satisfies the property, then any window of size > k' will also satisfy the property.\n# Thus, we can use binary search to find the largest k' that satisfies the property.\n\ndef is_periodic(k):\n    for i in range(0, len(s)-k):\n        if s[i] != s[i+k]:\n            return False\n    return True\n\nlo = 1\nhi = len(s)\nwhile lo < hi:\n    mid = (lo + hi) // 2\n    if is_periodic(mid):\n        lo = mid + 1\n    else:\n        hi = mid\nprint(lo-1)\n", "\ndef main():\n    s = input().strip()\n    k = 1\n\n    while k <= len(s):\n        if len(s) % k == 0:\n            i = k\n            while i < len(s):\n                if s[i] != s[i - k]:\n                    break\n                i += 1\n            if i == len(s):\n                break\n        k += 1\n    print(k)\n\nif __name__ == \"__main__\":\n    main()\n", "s = input()\n\ndef is_k_periodic(s, k):\n    if len(s) % k != 0:\n        return False\n    else:\n        for i in range(1, len(s) // k):\n            if s[i * k - 1] != s[i * k]:\n                return False\n        return True\n\nk = 1\nwhile not is_k_periodic(s, k):\n    k += 1\nprint(k)\n", "\nimport sys\n\ndef main():\n    pass\n\nmain()\n", "\n\ndef k_periodic(s):\n    k = 1\n    while k < len(s):\n        if s[:-k] == s[k:]:\n            return k\n        k += 1\n    return len(s)\n\nprint(k_periodic(input()))\n", "\ndef main():\n    s = input().strip()\n    k = 1\n    while k <= len(s):\n        if s[:k] * (len(s) // k) == s:\n            print(k)\n            break\n        k += 1\n\nif __name__ == \"__main__\":\n    main()\n", "\ns = input()\n\n# The smallest k for which s is k-periodic is the largest integer k' such that s[i] = s[i+k'] for all i\n# in the range [0, len(s)-k'].\n\n# To find this k', we can use a sliding window of size k' and check that all the characters are equal.\n\n# If a window of size k' satisfies the property, then any window of size > k' will also satisfy the property.\n# Thus, we can use binary search to find the largest k' that satisfies the property.\n\ndef is_periodic(k):\n    for i in range(0, len(s)-k):\n        if s[i] != s[i+k]:\n            return False\n    return True\n\nlo = 1\nhi = len(s)\nwhile lo < hi:\n    mid = (lo + hi) // 2\n    if is_periodic(mid):\n        lo = mid + 1\n    else:\n        hi = mid\nprint(lo-1)\n", "\n\ns = input()\n\n# The smallest k for which s is k-periodic is the largest integer k such that\n# s[i] == s[i+k] for all i in the range [0, len(s)-k].\n\n# To find this k, we can use a sliding window of size k and check that all the\n# characters are the same.\n\n# If a window of size k' satisfies the property, then any window of size > k'\n# will also satisfy the property. Thus, we can use binary search to find the\n# largest k' that satisfies the property.\n\ndef is_periodic(k):\n    for i in range(len(s)-k):\n        if s[i] != s[i + k]:\n            return False\n    return True\n\nlo = 1\nhi = len(s)\nwhile lo < hi:\n    mid = (lo + hi) // 2\n    if is_periodic(mid):\n        lo = mid + 1\n    else:\n        hi = mid\nprint(lo - 1)\n", "\n\ndef k_periodic_string(s, k):\n    if s[:-k] == s[k:]:\n        return True\n    return False\n\nprint(k_periodic_string(input()))\n", "\n#!/usr/bin/env python3\nimport sys\n\ndef main():\n    string = sys.stdin.readline().strip()\n    for i in range(1, len(string)):\n        if string[:i] * (len(string) // i) == string:\n            print(i)\n            break\n\nmain()\n", "\nimport sys\n\ndef main():\n    print(\"Hello World\")\n\nmain()\n", "\ns = input()\n\n# The smallest k for which s is k-periodic is the largest integer k such that s[i] == s[i+k] for all i\n# in the range [0, len(s)-k].\n\n# To find this k, we can use a sliding window of size k and check that all the characters are the same.\n\n# If a window of size k' satisfies the property, then any window of size > k' will also satisfy the property.\n# Thus, we can use binary search to find the largest k' that satisfies the property.\n\ndef is_periodic(k): \n    for i in range(0, len(s)-k): \n        if s[i] != s[i+k]: \n            return False \n    return True \n\nlo = 1 \nhi = len(s) \nwhile lo < hi: \n    mid = (lo + hi) // 2 \n    if is_periodic(mid): \n        lo = mid + 1 \n    else: \n        hi = mid \nprint(lo-1) \n", "\n\ndef main():\n    s = input()  # input string\n    k = 1\n\n    while k <= len(s):\n        if len(s) % k == 0:\n            i = k\n            while i < len(s):\n                if s[i] != s[i - k]:\n                    break\n                i += 1\n            if i == len(s):\n                break\n\n        k += 1\n    print(k)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef k_periodic_string(string):\n    period = 1\n    while period < len(string):\n        if string[:-period] == string[period:]:\n            return period\n        period += 1\n    return len(string)\n\nprint(k_periodic_string(input()))\n", "s = input()\n\n\ndef is_k_periodic(s, k):\n    if len(s) % k != 0:\n        return False\n    else:\n        for i in range(1, len(s) // k):\n            if s[i * k - 1] != s[i * k]:\n                return False\n        return True\n\nk = 1\nwhile not is_k_periodic(s, k):\n    k += 1\nprint(k)\n", "\ns = input(\"Enter a string: \")\n\ndef is_k_periodic(s, k):\n    if len(s)%k != 0:\n        return False\n    else:\n        for i in range(1, len(s)//k):\n            if s[i*k - 1] != s[i*k]:\n                return False\n        return True\n\nk = 1\nwhile not is_k_periodic(s, k):\n    k += 1\nprint(k)\n", "\n\ndef k_periodic_string(s):\n    for k in range(1, len(s)):\n        if s[:k] == s[k:]:\n            return len(s)//k\n    return len(s) \n\nprint(k_periodic_string(input()))\n", "\n\nimport os\n\ndef get_k(string):\n    for k in range(1, len(string) + 1):\n        if len(string) % k == 0:\n            for i in range(k, len(string), k):\n                if string[i:i+k] != string[i-k:i][-1] + string[i-k:i][:-1]: # \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439\n                    break # \u0435\u0441\u043b\u0438 \u0432\u0441\u0442\u0440\u0435\u0442\u0438\u043b\u0438 \u043d\u0435\u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435, \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435 k\n            else: # \u0435\u0441\u043b\u0438 \u043d\u0435 \u0432\u0441\u0442\u0440\u0435\u0442\u0438\u043b\u0438 \u043d\u0435\u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0439, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c k\n                return k \n    return len(string)\n\ndef main():\n    string = os.read(0, os.fstat(0).st_size).decode()\n    print(get_k(string))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport os\n\ndef get_k(string):\n    for k in range(1, len(string) + 1):\n        if len(string) % k == 0:\n            for i in range(k, len(string), k):\n                if string[i:i+k] != string[i-k:i][-1] + string[i-k:i][:-1]: # \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0447\u0442\u043e \u0441\u0442\u0440\u043e\u043a\u0430 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0438\n                    break # \u0435\u0441\u043b\u0438 \u0432\u0441\u0442\u0440\u0435\u0442\u0438\u043b\u0438 \u043d\u0435\u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435, \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435 k\n            else: # \u0435\u0441\u043b\u0438 \u043d\u0435 \u0432\u0441\u0442\u0440\u0435\u0442\u0438\u043b\u0438 \u043d\u0435\u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0439, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c k\n                return k \n    return len(string)\n\ndef main():\n    string = os.read(0, os.fstat(0).st_size).decode()\n    print(get_k(string))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef k_periodic(s):  # \u043f\u0435\u0440\u0438\u043e\u0434\u0438\u0447\u043d\u043e\u0441\u0442\u044c\n    k = 1\n    while k < len(s):\n        if s[:-k] == s[k:]:\n            return k\n        k += 1\n    return len(s)\n\nprint(k_periodic(input()))\n", "\ndef main():\n    s = raw_input()\n    k = 1\n\n    while k <= len(s):\n        if len(s) % k == 0:\n            i = k\n            while i < len(s):\n                if s[i] != s[i - k]:\n                    break\n                i += 1\n            if i == len(s):\n                break\n        k += 1\n    print(k)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef get_k(s):\n    for k in range(1, len(s) + 1):\n        if len(s) % k == 0:\n            for i in range(k, len(s), k):\n                if s[i:i+k] != s[i-k:i][-1] + s[i-k:i][:-1]\n                    break\n            else:\n                return k\n    return len(s)\n\ndef main():\n    s = sys.stdin.readline().strip()\n    print(get_k(s))\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    s = input()\n    k = 1\n    while k <= len(s):\n        if s[:k] * (len(s) // k) == s and len(s) % k == 0:\n            print(k)\n            break\n        k += 1\n\nif __name__ == \"__main__\":\n    main()\n", "\n# file\nimport sys\n\ndef main():\n    string = sys.stdin.readline().strip()\n    for i in range(1, len(string)):\n        if string[:i] * (len(string) // i) == string:\n            print(i)\n            break\n\nmain()\n", "\ndef k_periodic_string(s):\n    if len(s) == 1:\n        return 1\n    for k in range(1, int(len(s) / 2) + 1):\n        if s[:k] == s[k:k * 2]:\n            return k\n    return len(s)\n\n\nprint(k_periodic_string(input()))\n", "\nimport sys\n\ndef get_k(s):\n    for k in range(1, len(s) + 1):\n        if len(s) % k == 0:\n            for i in range(k, len(s), k):\n                if s[i:i+k] != s[i-k:i][-1] + s[i-k:i][:-1] or s[i:i+k] != s[i-k:i][1:] + s[i-k:i][0]:\n                    break\n            else:\n                return k\n    return len(s)\n\ndef main():\n    s = sys.stdin.readline().strip()\n    print(get_k(s))\n\nif __name__ == '__main__':\n    main()\n"]