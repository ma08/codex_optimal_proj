["from collections import deque\nn, k = map(int, input().split())\nA = list(map(int, input().split()))\nB = deque()\nB.append(A[0])\nnc = {}\nfor i in set(A):\n    nc[i] = 0\nnc[A[0]] = 1\nfor i in range(1, n):\n    if nc[A[i]] == 0:\n        if len(B) == k:\n            nc[B[0]] -= 1\n            B.popleft()\n        B.append(A[i])\n        nc[A[i]] += 1\n    else:\n        pass\nprint(len(B))\nprint(*list(B)[::-1])", "n, k = map(int, input().split())\na = map(int, input().split())\n\nlt = dict()\ntimer = 0\nfor Id in a :\n    if Id not in lt :\n        lt[Id] = -k\n    cur_time = lt[Id]\n    if cur_time <= timer - k :\n        timer += 1\n        lt[Id] = timer\n    \nscreen = list(lt.items())\nscreen.sort(key=(lambda t: -t[1]))\n# print(screen)\nscreen = screen[:min(n, k)]\nprint(len(screen))\nfor v in screen :\n    print(v[0], end=' ')\nprint()\n", "from collections import deque\na, b = map(int, input().split())\nli = list(map(int, input().split()))\ns = set()\nl = deque([])\nle = 0\nfor i in li:\n    if i in s:\n        pass\n    elif le < b:\n        le += 1\n        s.add(i)\n        l.appendleft(i)\n    else:\n        s.remove(l.pop())\n        s.add(i)\n        l.appendleft(i)       \nprint(len(l))\nprint(*list(l))", "from collections import deque\nn,k=map(int,input().split())\nd=deque()\ns=set()\nfor i in map(int,input().split()):\n  if i in s:continue\n  d.appendleft(i);s.add(i)\n  if len(d)>k:s.discard(d.pop())\nprint(len(d))\nprint(*d)", "import sys\ninput = sys.stdin.readline\n\nn,k=list(map(int,input().split()))\nA=list(map(int,input().split()))\n\nSET=set()\n\nfrom collections import deque\n\nQ=deque()\n\nfor a in A:\n    if a in SET:\n        continue\n    else:\n        if len(Q)==k:\n            x=Q.pop()\n            SET.remove(x)\n            Q.appendleft(a)\n            SET.add(a)\n        else:\n            SET.add(a)\n            Q.appendleft(a)\n\nprint(len(Q))\nprint(*Q)\n            \n            \n", "import math\nfrom collections import deque, defaultdict\nfrom sys import stdin, stdout\ninput = stdin.readline\n# print = stdout.write\nlistin = lambda : list(map(int, input().split()))\nmapin = lambda : map(int, input().split())\n\nn, k = mapin()\na = listin()\ns = set([])\nd = deque([])\nfor i in a:\n    if len(d) < k:\n        if i not in s:\n            s.add(i)\n            d.append(i)\n    else:\n        if i not in s:\n            s.remove(d.popleft())\n            d.append(i)\n            s.add(i)\nprint(len(d))\nd = list(d)\nd.reverse()\nprint(*d)", "import heapq\nimport math\n\nimport sys\ninput = sys.stdin.readline\n\ndef li():return [int(i) for i in input().rstrip('\\n').split()]\ndef value():return int(input())\n\nn,k = li()\na = li()\n\ncurr = []\ncurrd = {}\ncurrd2 = {}\nfor i in range(n):\n    if a[i] not in currd2:\n        if len(curr) == k:\n            \n            currd2.pop(currd.pop(heapq.heappop(curr)))\n        heapq.heappush(curr,i)\n        currd[i] = a[i]\n        currd2[a[i]] = i\ncurr.sort(reverse = 1)\nans = []\nfor i in curr:\n    ans.append(currd[i])\nprint(len(ans))\nprint(*ans)", "n, k = map(int, input().split())\na = [*map(int, input().split())]\n\nfrom collections import deque\n\nans = deque()\nins = set()\n\nfor i in a:\n\tif i not in ins:\n\t\tif len(ans) == k:\n\t\t\tins.remove(ans[0])\n\t\t\tans.popleft()\n\t\tans.append(i)\n\t\tins.add(i)\n\nans.reverse()\n\nprint(len(ans))\n\nprint(*ans)", "from collections import deque\nn, k = map(int, input().split())\na = [int(i) for i in input().split()]\nnow = set()\nletters = deque()\nfor i in range(n):\n    if a[i] not in now:\n        now.add(a[i])\n        if len(letters) < k:\n            letters.append(a[i])\n        else:\n            now.remove(letters.popleft())\n            letters.append(a[i])\nprint(len(letters))\nprint(*list(letters)[::-1])", "from collections import deque\nn, k = list(map(int,input().split()))\n\nq = deque()\na = list(map(int, input().split()))\nvis = set()\n\nfor i in range(n):\n    if len(q) < k:\n        if a[i] not in vis:\n            q.append(a[i])\n            vis.add(a[i])\n    else:\n        if a[i] not in vis:\n            q.append(a[i])\n            vis.remove(q.popleft())\n            vis.add(a[i])\n\nprint(len(q))\nprint(str(list(q)[::-1]).replace('[','').replace(']','').replace(', ',' '))\n", "from collections import OrderedDict\nclass LRUCache:\n\n    def __init__(self, capacity):\n        self.capacity = capacity\n        self.cache = OrderedDict()\n\n    def set(self, key, value):\n        if len(self.cache) == self.capacity:\n            self.cache.popitem(last=False)\n        self.cache[key] = value\n\nn, k = map(int, input().strip().split())\nids = map(int, input().strip().split())\nconvs = LRUCache(k)\nfor i in ids:\n    if i in convs.cache:\n        continue\n    else:\n        convs.set(i, None)\nprint(len(convs.cache))\nprint(\" \".join(map(str, reversed(convs.cache.keys()))))", "from collections import defaultdict as df\nimport heapq\nimport bisect \nimport math\nfrom itertools import combinations,permutations\nfrom collections import deque\n\nn,k=list(map(int,input().split()))\na=list(map(int,input().rstrip().split()))\nans=deque()\np=df(int)\nfor i in range(n):\n    p[i]=0\nfor i in a:\n    if p[i]>0:\n        pass\n    \n    else:\n        if len(ans)>=k:\n            g=ans.pop()\n            ans.appendleft(i)\n            p[i]+=1\n            p[g]-=1\n        else:\n            ans.appendleft(i)\n            p[i]+=1\nprint(len(ans))\nprint(*ans)", "a=list(map(int,input().split()))\nsc=a[1]\nm=a[0]\na=list(map(int,input().split()))\nd={}\ns=[]\nfor i in a:\n    if i in d: continue\n    if len(s)<sc: \n        s.append(i)\n        d[i]=1\n    else:\n        d.pop(s.pop(0))\n        s.append(i)\n        d[i]=1\nprint(len(s))\nprint(*s[::-1])", "'''input\n10 4\n2 3 3 1 1 2 1 2 3 3\n'''\nfrom sys import stdin\nfrom collections import deque\nimport math\n\n\n# main starts\nn, k = list(map(int, stdin.readline().split()))\narr = list(map(int, stdin.readline().split()))\nmyq = deque([])\nmyset = set()\nfor i in range(n):\n\tif arr[i] in myset:\n\t\tpass\n\telse:\n\t\tif len(myq) == k:\n\t\t\tel = myq[-1]\n\t\t\tmyset.remove(el)\n\t\t\tmyq.pop()\n\t\tmyq.appendleft(arr[i])\n\t\tmyset.add(arr[i])\n\nprint(len(myq))\n\nprint(*myq)", "from collections import deque\nn, k = list(map(int, input().split()))\ns = set()\nd = deque()\nfor i in map(int, input().split()):\n    if i in s:\n        continue\n    if len(d) == k:\n        s.discard(d.pop())\n    d.appendleft(i)\n    s.add(i)\nprint(len(d))\nprint(*d)\n", "from bisect import *\nfrom collections import *\nfrom itertools import *\nimport functools\nimport sys\nimport math\nfrom decimal import *\nfrom copy import *\nfrom heapq import *\ngetcontext().prec = 30\nMAX = sys.maxsize\nMAXN = 1000010\nMOD = 10**9+7\nspf = [i for i in range(MAXN)]\ndef sieve():\n    for i in range(2,MAXN,2):\n        spf[i] = 2\n    for i in range(3,int(MAXN**0.5)+1):\n        if spf[i]==i:\n            for j in range(i*i,MAXN,i):\n                if spf[j]==j:\n                    spf[j]=i\ndef fib(n,m):\n    if n == 0:\n        return [0, 1]\n    else:\n        a, b = fib(n // 2)\n        c = ((a%m) * ((b%m) * 2 - (a%m)))%m\n        d = ((a%m) * (a%m))%m + ((b)%m * (b)%m)%m\n        if n % 2 == 0:\n            return [c, d]\n        else:\n            return [d, c + d]\n\ndef charIN(x= ' '):\n    return(sys.stdin.readline().strip().split(x))\n\ndef arrIN(x = ' '):\n    return list(map(int,sys.stdin.readline().strip().split(x)))\n\ndef ncr(n,r):\n    num=den=1\n    for i in range(r):\n        num = (num*(n-i))%MOD\n        den = (den*(i+1))%MOD\n\n    return (num*(pow(den,MOD-2,MOD)))%MOD\n\ndef flush():\n    return sys.stdout.flush()\n\n'''*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*'''\n\nn,k = arrIN()\na = arrIN()\nst = []\nls = 0\nf = defaultdict(int)\nj = 0\nfor i in a:\n    if f[i]==0:\n        if ls<k:\n            st.append(i)\n            f[i] = 1\n            ls+=1\n        else:\n            f[st[j]] = 0\n            j+=1\n            st.append(i)\n            f[i] = 1\n    #print(st)\nprint(len(st)-j)\nfor i in range(len(st)-1,j-1,-1):\n    print(st[i],end=' ')\n", "import sys\nfrom collections import deque, defaultdict\n\n# stdin = open(\"testdata.txt\", \"r\")\nn, k = map(int, sys.stdin.readline().split())\n\na = list(map(int, sys.stdin.readline().split()))\ndq = deque()\non_dq = defaultdict(int)\nlength = 0\nfor ele in a:\n\tif not on_dq[ele]:\n\t\ton_dq[ele] = 1\n\t\tlength += 1\n\t\tdq.appendleft(ele)\n\t\tif length > k:\n\t\t\titem = dq.pop()\n\t\t\ton_dq[item] = 0\n\t\t\tlength -= 1\nprint(length)\nprint(*dq)", "N, K = map(int, input().split())\nid_list = list(map(int, input().split()))\n\nfrom collections import deque\n\nque = deque()\nused = set()\n\nfor id in id_list:\n    if id in used:\n        continue\n    else:\n        if len(que) >= K:\n            q = que.pop()\n            used.remove(q)\n        que.appendleft(id)\n        used.add(id)\n\nprint(len(que))\nwhile len(que) != 0:\n      print(que.popleft(), end=\" \")\n", "# -*- coding: utf-8 -*-\n\nimport sys\nfrom collections import deque\n\ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\ndef Yes(): print('Yes')\ndef No(): print('No')\ndef YES(): print('YES')\ndef NO(): print('NO')\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nMOD = 10 ** 9 + 7\n\nN, K = MAP()\nA = LIST()\n\nque = deque()\nS = set()\nfor a in A:\n    if len(que) < K:\n        if a not in S:\n            que.appendleft(a)\n            S.add(a)\n    else:\n        if a not in S:\n            b = que.pop()\n            S.remove(b)\n            que.appendleft(a)\n            S.add(a)\nprint(len(que))\nprint(*que)\n", "n,k = list(map(int,input().split()))\na = list(map(int,input().split()))\nfrom collections import deque\nfrom collections import defaultdict\nb = deque()\nc = defaultdict(int)\nfor i in a:\n    c[i]=0\nl = 0\ni = 0\nwhile i<n:\n    if l<k:\n        if c[a[i]]==1:\n            i=i+1\n            continue\n        else:\n            b.appendleft(a[i])\n            c[a[i]]=1\n            l=l+1\n            i=i+1\n    else:\n        if c[a[i]]==1:\n            i=i+1\n            continue\n        else:\n            e=b.pop()\n            c[e]=0\n            c[a[i]]=1\n            b.appendleft(a[i])\n            i=i+1\nprint(len(b))\nprint(*b)\n", "from queue import Queue\n\ndef main():\n    N, K = map(int, input().split())\n    A = list(map(int, input().split()))\n\n    checked = {}\n    for a in A:\n        checked[a] = False\n\n    q = Queue()\n    for i, a in enumerate(A):\n        if checked[a]:\n            continue\n        else:\n            checked[a] = True\n            q.put(a)\n            if q.qsize() > K:\n                b = q.get()\n                checked[b] = False\n    L = q.qsize()\n    ans = []\n    for i in range(L):\n        a = q.get()\n        ans.append(a)\n    print(L)\n    print(' '.join([str(a) for a in ans[::-1]]))\n\ndef __starting_point():\n    main()\n__starting_point()"]