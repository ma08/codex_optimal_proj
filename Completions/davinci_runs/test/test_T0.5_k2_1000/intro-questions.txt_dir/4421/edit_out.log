2022-04-11 20:01:45.274101 num operations 2
2022-04-11 20:01:45.274157 size on input set 1
2022-04-11 20:01:47.375078 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nn,k = [int(x) for x in input().split()]\nd = [int(x) for x in input().split()]\n\nd.sort()\n\n# build a lookup table for each mod value\nmods = [0] * k\nfor i in d:\n    mods[i%k] += 1\n\n# find the most common mod value\nmax_mod_val = 0\nfor i in range(k):\n    if mods[i] > mods[max_mod_val]:\n        max_mod_val = i\n\n# find the number of pairs that can be made with the most common mod value\nnum_pairs = int(mods[max_mod_val]/2)\n\n# find the number of pairs that can be made with the second most common mod value\nif k%2 == 0:\n    if max_mod_val == int(k/2):\n        num_pairs += int(mods[0]/2)\n    else:\n        num_pairs += int(min(mods[max_mod_val], mods[k-max_mod_val])/2)\n\nprint(2*num_pairs)\n"
    },
    {
      "index": 1,
      "text": "\nn,k = [int(x) for x in input().split()]\nd = [int(x) for x in input().split()]\n\nd.sort()\n\n# build a lookup table for each mod value\nmods = [0] * k\nfor i in d:\n    mods[i%k] += 1\n\n# find the most common mod value\nmax_mod_val = 0\nfor i in range(k):\n    if mods[i] > mods[max_mod_val]:\n        max_mod_val = i\n\n# find the number of pairs that can be made with the most common mod value\nnum_pairs = int(mods[max_mod_val]/2)\n\n# find the number of pairs that can be made with the second most common mod value\nif k%2 == 0:\n    if max_mod_val == int(k/2):\n        num_pairs += int(mods[0]/2)\n    else:\n        num_pairs += int(min(mods[max_mod_val], mods[k-max_mod_val])/2)\n\nprint(2*num_pairs)\n"
    }
  ],
  "created": 1649721705,
  "object": "edit"
}
2022-04-11 20:01:47.375474 fix spelling mistakes 2 ['\nn,k = [int(x) for x in input().split()]\nd = [int(x) for x in input().split()]\n\nd.sort()\n\n# build a lookup table for each mod value\nmods = [0] * k\nfor i in d:\n    mods[i%k] += 1\n\n# find the most common mod value\nmax_mod_val = 0\nfor i in range(k):\n    if mods[i] > mods[max_mod_val]:\n        max_mod_val = i\n\n# find the number of pairs that can be made with the most common mod value\nnum_pairs = int(mods[max_mod_val]/2)\n\n# find the number of pairs that can be made with the second most common mod value\nif k%2 == 0:\n    if max_mod_val == int(k/2):\n        num_pairs += int(mods[0]/2)\n    else:\n        num_pairs += int(min(mods[max_mod_val], mods[k-max_mod_val])/2)\n\nprint(2*num_pairs)\n', '\nn,k = [int(x) for x in input().split()]\nd = [int(x) for x in input().split()]\n\nd.sort()\n\n# build a lookup table for each mod value\nmods = [0] * k\nfor i in d:\n    mods[i%k] += 1\n\n# find the most common mod value\nmax_mod_val = 0\nfor i in range(k):\n    if mods[i] > mods[max_mod_val]:\n        max_mod_val = i\n\n# find the number of pairs that can be made with the most common mod value\nnum_pairs = int(mods[max_mod_val]/2)\n\n# find the number of pairs that can be made with the second most common mod value\nif k%2 == 0:\n    if max_mod_val == int(k/2):\n        num_pairs += int(mods[0]/2)\n    else:\n        num_pairs += int(min(mods[max_mod_val], mods[k-max_mod_val])/2)\n\nprint(2*num_pairs)\n']
2022-04-11 20:01:47.375537 size on output set 1
2022-04-11 20:01:47.375548 size on input set 1
2022-04-11 20:01:53.519072 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "n,k = [int(x) for x in input().split()]\nd = [int(x) for x in input().split()]\n\nd.sort()\n\n# build a lookup table for each mod value\nmods = [0] * k\nfor i in d:\n    mods[i % k] += 1\n\n# find the most common mod value\nmax_mod_val = 0\nfor i in range(k):\n    if mods[i] > mods[max_mod_val]:\n        max_mod_val = i\n\n# find the number of pairs that can be made with the most common mod value\nnum_pairs = int(mods[max_mod_val]/2)\n\n# find the number of pairs that can be made with the second most common mod value\nif k % 2 == 0:\n    if max_mod_val == int(k / 2):\n        num_pairs += int(mods[0] / 2)\n    else:\n        num_pairs += int(min(mods[max_mod_val], mods[k - max_mod_val]) / 2)\n\nprint(2 * num_pairs)\n"
    },
    {
      "index": 1,
      "text": "n,k = [int(x) for x in input().split()]\nd = [int(x) for x in input().split()]\n\nd.sort()\n\n# build a lookup table for each mod value\nmods = [0] * k\nfor i in d:\n    mods[i % k] += 1\n\n# find the most common mod value\nmax_mod_val = 0\nfor i in range(k):\n    if mods[i] > mods[max_mod_val]:\n        max_mod_val = i\n\n# find the number of pairs that can be made with the most common mod value\nnum_pairs = int(mods[max_mod_val]/2)\n\n# find the number of pairs that can be made with the second most common mod value\nif k % 2 == 0:\n    if max_mod_val == int(k / 2):\n        num_pairs += int(mods[0] / 2)\n    else:\n        num_pairs += int(min(mods[max_mod_val], mods[k - max_mod_val]) / 2)\n\nprint(2 * num_pairs)\n"
    }
  ],
  "created": 1649721707,
  "object": "edit"
}
2022-04-11 20:01:53.519441 fix syntax errors 2 ['n,k = [int(x) for x in input().split()]\nd = [int(x) for x in input().split()]\n\nd.sort()\n\n# build a lookup table for each mod value\nmods = [0] * k\nfor i in d:\n    mods[i % k] += 1\n\n# find the most common mod value\nmax_mod_val = 0\nfor i in range(k):\n    if mods[i] > mods[max_mod_val]:\n        max_mod_val = i\n\n# find the number of pairs that can be made with the most common mod value\nnum_pairs = int(mods[max_mod_val]/2)\n\n# find the number of pairs that can be made with the second most common mod value\nif k % 2 == 0:\n    if max_mod_val == int(k / 2):\n        num_pairs += int(mods[0] / 2)\n    else:\n        num_pairs += int(min(mods[max_mod_val], mods[k - max_mod_val]) / 2)\n\nprint(2 * num_pairs)\n', 'n,k = [int(x) for x in input().split()]\nd = [int(x) for x in input().split()]\n\nd.sort()\n\n# build a lookup table for each mod value\nmods = [0] * k\nfor i in d:\n    mods[i % k] += 1\n\n# find the most common mod value\nmax_mod_val = 0\nfor i in range(k):\n    if mods[i] > mods[max_mod_val]:\n        max_mod_val = i\n\n# find the number of pairs that can be made with the most common mod value\nnum_pairs = int(mods[max_mod_val]/2)\n\n# find the number of pairs that can be made with the second most common mod value\nif k % 2 == 0:\n    if max_mod_val == int(k / 2):\n        num_pairs += int(mods[0] / 2)\n    else:\n        num_pairs += int(min(mods[max_mod_val], mods[k - max_mod_val]) / 2)\n\nprint(2 * num_pairs)\n']
2022-04-11 20:01:53.519516 size on output set 1
2022-04-11 20:01:53.519552 num operations 2
2022-04-11 20:01:53.519563 size on input set 1
2022-04-11 20:01:55.469725 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nn, k = map(int, input().split())\nd = list(map(int, input().split()))\n\nd.sort()\n\ndef possible(a, b):\n\treturn (a + b) % k == 0\n\nans = 0\nl, r = 0, n - 1\nwhile l < r:\n\tif possible(d[l], d[r]):\n\t\tans += 2\n\t\tl += 1\n\t\tr -= 1\n\telse:\n\t\tans += 1\n\t\tr -= 1\n\nif l == r:\n\tans += 1\n\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "\nn, k = map(int, input().split())\nd = list(map(int, input().split()))\n\nd.sort()\n\ndef possible(a, b):\n\treturn (a + b) % k == 0\n\nans = 0\nl, r = 0, n - 1\nwhile l < r:\n\tif possible(d[l], d[r]):\n\t\tans += 2\n\t\tl += 1\n\t\tr -= 1\n\telse:\n\t\tans += 1\n\t\tr -= 1\n\nif l == r:\n\tans += 1\n\nprint(ans)\n"
    }
  ],
  "created": 1649721713,
  "object": "edit"
}
2022-04-11 20:01:55.469977 fix spelling mistakes 2 ['\nn, k = map(int, input().split())\nd = list(map(int, input().split()))\n\nd.sort()\n\ndef possible(a, b):\n\treturn (a + b) % k == 0\n\nans = 0\nl, r = 0, n - 1\nwhile l < r:\n\tif possible(d[l], d[r]):\n\t\tans += 2\n\t\tl += 1\n\t\tr -= 1\n\telse:\n\t\tans += 1\n\t\tr -= 1\n\nif l == r:\n\tans += 1\n\nprint(ans)\n', '\nn, k = map(int, input().split())\nd = list(map(int, input().split()))\n\nd.sort()\n\ndef possible(a, b):\n\treturn (a + b) % k == 0\n\nans = 0\nl, r = 0, n - 1\nwhile l < r:\n\tif possible(d[l], d[r]):\n\t\tans += 2\n\t\tl += 1\n\t\tr -= 1\n\telse:\n\t\tans += 1\n\t\tr -= 1\n\nif l == r:\n\tans += 1\n\nprint(ans)\n']
2022-04-11 20:01:55.470017 size on output set 1
2022-04-11 20:01:55.470285 size on input set 1
2022-04-11 20:02:00.538674 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "n, k = map(int, input().split())\nd = list(map(int, input().split()))\n\nd.sort()\n\ndef possible(a, b):\n    return (a + b) % k == 0\n\nans = 0\nl, r = 0, n - 1\nwhile l < r:\n    if possible(d[l], d[r]):\n        ans += 2\n        l += 1\n        r -= 1\n    else:\n        ans += 1\n        r -= 1\n\nif l == r:\n    ans += 1\n\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "print(1)\n"
    }
  ],
  "created": 1649721715,
  "object": "edit"
}
2022-04-11 20:02:00.539040 fix syntax errors 2 ['n, k = map(int, input().split())\nd = list(map(int, input().split()))\n\nd.sort()\n\ndef possible(a, b):\n    return (a + b) % k == 0\n\nans = 0\nl, r = 0, n - 1\nwhile l < r:\n    if possible(d[l], d[r]):\n        ans += 2\n        l += 1\n        r -= 1\n    else:\n        ans += 1\n        r -= 1\n\nif l == r:\n    ans += 1\n\nprint(ans)\n', 'print(1)\n']
2022-04-11 20:02:00.539086 size on output set 2
