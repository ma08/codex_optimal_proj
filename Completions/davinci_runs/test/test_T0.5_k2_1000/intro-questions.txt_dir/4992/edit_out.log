2022-04-12 04:49:27.643167 num operations 2
2022-04-12 04:49:27.643208 size on input set 1
2022-04-12 04:49:30.057455 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + '.in', 'r')\n    sys.stdout = open(pname + '.out', 'w')\n\n    n = int(input())\n    s = input().split()\n    s = [int(i) for i in s]\n    s.reverse()\n\n    if n == 2:\n        if s[0] == s[1]:\n            print('2 1')\n        else:\n            print('impossible')\n    else:\n        is_possible = True\n        for i in range(1, n):\n            if s[i] > s[i-1]:\n                is_possible = False\n        if is_possible:\n            print(' '.join([str(i) for i in range(n, 0, -1)]))\n        else:\n            print('impossible')\n\nif __name__ == \"__main__\":\n    main('sort')\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + '.in', 'r')\n    sys.stdout = open(pname + '.out', 'w')\n\n    n = int(input())\n    s = input().split()\n    s = [int(i) for i in s]\n    s.reverse()\n\n    if n == 2:\n        if s[0] == s[1]:\n            print('2 1')\n        else:\n            print('impossible')\n    else:\n        is_possible = True\n        for i in range(1, n):\n            if s[i] > s[i-1]:\n                is_possible = False\n        if is_possible:\n            print(' '.join([str(i) for i in range(n, 0, -1)]))\n        else:\n            print('impossible')\n\nif __name__ == \"__main__\":\n    main('sort')\n"
    }
  ],
  "created": 1649753368,
  "object": "edit"
}
2022-04-12 04:49:30.057572 fix spelling mistakes 2 ['\n\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + \'.in\', \'r\')\n    sys.stdout = open(pname + \'.out\', \'w\')\n\n    n = int(input())\n    s = input().split()\n    s = [int(i) for i in s]\n    s.reverse()\n\n    if n == 2:\n        if s[0] == s[1]:\n            print(\'2 1\')\n        else:\n            print(\'impossible\')\n    else:\n        is_possible = True\n        for i in range(1, n):\n            if s[i] > s[i-1]:\n                is_possible = False\n        if is_possible:\n            print(\' \'.join([str(i) for i in range(n, 0, -1)]))\n        else:\n            print(\'impossible\')\n\nif __name__ == "__main__":\n    main(\'sort\')\n', '\n\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + \'.in\', \'r\')\n    sys.stdout = open(pname + \'.out\', \'w\')\n\n    n = int(input())\n    s = input().split()\n    s = [int(i) for i in s]\n    s.reverse()\n\n    if n == 2:\n        if s[0] == s[1]:\n            print(\'2 1\')\n        else:\n            print(\'impossible\')\n    else:\n        is_possible = True\n        for i in range(1, n):\n            if s[i] > s[i-1]:\n                is_possible = False\n        if is_possible:\n            print(\' \'.join([str(i) for i in range(n, 0, -1)]))\n        else:\n            print(\'impossible\')\n\nif __name__ == "__main__":\n    main(\'sort\')\n']
2022-04-12 04:49:30.057592 size on output set 1
2022-04-12 04:49:30.057596 size on input set 1
2022-04-12 04:49:34.533380 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + '.in', 'r')\n    sys.stdout = open(pname + '.out', 'w')\n\n    n = int(input())\n    a = input().split()\n    a = [int(i) for i in a]\n    a.reverse()\n\n    if n == 2:\n        if a[0] == a[1]:\n            print('2 1')\n        else:\n            print('impossible')\n    else:\n        is_possible = True\n        for i in range(1, n):\n            if a[i] > a[i-1]:\n                is_possible = False\n        if is_possible:\n            print(' '.join([str(i) for i in range(n, 0, -1)]))\n        else:\n            print('impossible')\n\nif __name__ == \"__main__\":\n    main('sort')\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + '.in', 'r')\n    sys.stdout = open(pname + '.out', 'w')\n\n    n = int(input())\n    a = input().split()\n    a = [int(i) for i in a]\n    a.reverse()\n\n    if n == 2:\n        if a[0] == a[1]:\n            print('2 1')\n        else:\n            print('impossible')\n    else:\n        is_possible = True\n        for i in range(1, n):\n            if a[i] > a[i-1]:\n                is_possible = False\n        if is_possible:\n            print(' '.join([str(i) for i in range(n, 0, -1)]))\n        else:\n            print('impossible')\n\nif __name__ == \"__main__\":\n    main('sort')\n"
    }
  ],
  "created": 1649753370,
  "object": "edit"
}
2022-04-12 04:49:34.533542 fix syntax errors 2 ['\n\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + \'.in\', \'r\')\n    sys.stdout = open(pname + \'.out\', \'w\')\n\n    n = int(input())\n    a = input().split()\n    a = [int(i) for i in a]\n    a.reverse()\n\n    if n == 2:\n        if a[0] == a[1]:\n            print(\'2 1\')\n        else:\n            print(\'impossible\')\n    else:\n        is_possible = True\n        for i in range(1, n):\n            if a[i] > a[i-1]:\n                is_possible = False\n        if is_possible:\n            print(\' \'.join([str(i) for i in range(n, 0, -1)]))\n        else:\n            print(\'impossible\')\n\nif __name__ == "__main__":\n    main(\'sort\')\n', '\nimport sys\n\ndef main(pname):\n    sys.stdin = open(pname + \'.in\', \'r\')\n    sys.stdout = open(pname + \'.out\', \'w\')\n\n    n = int(input())\n    a = input().split()\n    a = [int(i) for i in a]\n    a.reverse()\n\n    if n == 2:\n        if a[0] == a[1]:\n            print(\'2 1\')\n        else:\n            print(\'impossible\')\n    else:\n        is_possible = True\n        for i in range(1, n):\n            if a[i] > a[i-1]:\n                is_possible = False\n        if is_possible:\n            print(\' \'.join([str(i) for i in range(n, 0, -1)]))\n        else:\n            print(\'impossible\')\n\nif __name__ == "__main__":\n    main(\'sort\')\n']
2022-04-12 04:49:34.533574 size on output set 2
2022-04-12 04:49:34.533590 num operations 2
2022-04-12 04:49:34.533597 size on input set 1
2022-04-12 04:49:38.740516 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    First input is the number of rooms\n    Second input is the number of students in each room\n    \"\"\"\n    num_rooms = int(input())\n    students = list(map(int, input().split()))\n    students = students[::-1]\n    # The first room will always be the last room in the sequence\n    order = [num_rooms]\n    # This will keep track of the number of exams in the pile\n    exams = 0\n    for i in range(num_rooms - 1, 0, -1):\n        # If the number of exams in the pile is less than the number of students in the room, then you can't visit the room\n        if exams < students[i]:\n            print(\"impossible\")\n            return\n        # Add the room to the sequence\n        order.append(i)\n        # Add the number of students in the room to the number of exams in the pile\n        exams += students[i]\n    # If the number of exams in the pile is not equal to the number of students in the first room, then you can't visit the room\n    if exams != students[0]:\n        print(\"impossible\")\n        return\n    # Add the first room to the sequence\n    order.append(1)\n    # Print the sequence\n    print(\" \".join(map(str, order)))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    First input is the number of rooms\n    Second input is the number of students in each room\n    \"\"\"\n    num_rooms = int(input())\n    students = list(map(int, input().split()))\n    students = students[::-1]\n    # The first room will always be the last room in the order\n    order = [num_rooms]\n    # This will keep track of the number of exams in the pile\n    exams = 0\n    for i in range(num_rooms - 1, 0, -1):\n        # If the number of exams in the pile is less than the number of students in the room, then you can't visit the room\n        if exams < students[i]:\n            print(\"impossible\")\n            return\n        # Add the room to the order\n        order.append(i)\n        # Add the number of students in the room to the number of exams in the pile\n        exams += students[i]\n    # If the number of exams in the pile is not equal to the number of students in the first room, then you can't visit the first room\n    if exams != students[0]:\n        print(\"impossible\")\n        return\n    # Add the first room to the order\n    order.append(1)\n    # Print the order\n    print(\" \".join(map(str, order)))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649753374,
  "object": "edit"
}
2022-04-12 04:49:38.740713 fix spelling mistakes 2 ['\n\ndef main():\n    """\n    First input is the number of rooms\n    Second input is the number of students in each room\n    """\n    num_rooms = int(input())\n    students = list(map(int, input().split()))\n    students = students[::-1]\n    # The first room will always be the last room in the sequence\n    order = [num_rooms]\n    # This will keep track of the number of exams in the pile\n    exams = 0\n    for i in range(num_rooms - 1, 0, -1):\n        # If the number of exams in the pile is less than the number of students in the room, then you can\'t visit the room\n        if exams < students[i]:\n            print("impossible")\n            return\n        # Add the room to the sequence\n        order.append(i)\n        # Add the number of students in the room to the number of exams in the pile\n        exams += students[i]\n    # If the number of exams in the pile is not equal to the number of students in the first room, then you can\'t visit the room\n    if exams != students[0]:\n        print("impossible")\n        return\n    # Add the first room to the sequence\n    order.append(1)\n    # Print the sequence\n    print(" ".join(map(str, order)))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    First input is the number of rooms\n    Second input is the number of students in each room\n    """\n    num_rooms = int(input())\n    students = list(map(int, input().split()))\n    students = students[::-1]\n    # The first room will always be the last room in the order\n    order = [num_rooms]\n    # This will keep track of the number of exams in the pile\n    exams = 0\n    for i in range(num_rooms - 1, 0, -1):\n        # If the number of exams in the pile is less than the number of students in the room, then you can\'t visit the room\n        if exams < students[i]:\n            print("impossible")\n            return\n        # Add the room to the order\n        order.append(i)\n        # Add the number of students in the room to the number of exams in the pile\n        exams += students[i]\n    # If the number of exams in the pile is not equal to the number of students in the first room, then you can\'t visit the first room\n    if exams != students[0]:\n        print("impossible")\n        return\n    # Add the first room to the order\n    order.append(1)\n    # Print the order\n    print(" ".join(map(str, order)))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 04:49:38.740736 size on output set 2
2022-04-12 04:49:38.740742 size on input set 2
2022-04-12 04:49:42.133764 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    First input is the number of rooms\n    Second input is the number of students in each room\n    \"\"\"\n    num_rooms = int(input())\n    students = list(map(int, input().split()))\n    # The first room will always be the last room in the sequence\n    order = [num_rooms]\n    # This will keep track of the number of exams in the pile\n    exams = 0\n    for i in range(num_rooms - 1, -1, -1):\n        # If the number of exams in the pile is less than the number of students in the room, then you can't visit the room\n        if exams < students[i]:\n            print(\"impossible\")\n            return\n        # Add the room to the sequence\n        order.append(i)\n        # Add the number of students in the room to the number of exams in the pile\n        exams += students[i]\n    # If the number of exams in the pile is not equal to the number of students in the first room, then you can't visit the room\n    if exams != students[0]:\n        print(\"impossible\")\n        return\n    # Add the first room to the sequence\n    order.append(1)\n    # Print the sequence\n    print(\" \".join(map(str, order)))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    # First input is the number of rooms\n    # Second input is the number of students in each room\n    num_rooms = int(input())\n    students = list(map(int, input().split()))\n    students = students[::-1]\n    # The first room will always be the last room in the sequence\n    order = [num_rooms]\n    # This will keep track of the number of exams in the pile\n    exams = 0\n    for i in range(num_rooms - 1, 0, -1):\n        # If the number of exams in the pile is less than the number of students in the room, then you can't visit the room\n        if exams < students[i]:\n            print(\"impossible\")\n            return\n        # Add the room to the sequence\n        order.append(i)\n        # Add the number of students in the room to the number of exams in the pile\n        exams += students[i]\n    # If the number of exams in the pile is not equal to the number of students in the first room, then you can't visit the room\n    if exams != students[0]:\n        print(\"impossible\")\n        return\n    # Add the first room to the sequence\n    order.append(1)\n    # Print the sequence\n    print(\" \".join(map(str, order)))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649753378,
  "object": "edit"
}
2022-04-12 04:49:42.133892 fix syntax errors 2 ['\n\ndef main():\n    """\n    First input is the number of rooms\n    Second input is the number of students in each room\n    """\n    num_rooms = int(input())\n    students = list(map(int, input().split()))\n    # The first room will always be the last room in the sequence\n    order = [num_rooms]\n    # This will keep track of the number of exams in the pile\n    exams = 0\n    for i in range(num_rooms - 1, -1, -1):\n        # If the number of exams in the pile is less than the number of students in the room, then you can\'t visit the room\n        if exams < students[i]:\n            print("impossible")\n            return\n        # Add the room to the sequence\n        order.append(i)\n        # Add the number of students in the room to the number of exams in the pile\n        exams += students[i]\n    # If the number of exams in the pile is not equal to the number of students in the first room, then you can\'t visit the room\n    if exams != students[0]:\n        print("impossible")\n        return\n    # Add the first room to the sequence\n    order.append(1)\n    # Print the sequence\n    print(" ".join(map(str, order)))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    # First input is the number of rooms\n    # Second input is the number of students in each room\n    num_rooms = int(input())\n    students = list(map(int, input().split()))\n    students = students[::-1]\n    # The first room will always be the last room in the sequence\n    order = [num_rooms]\n    # This will keep track of the number of exams in the pile\n    exams = 0\n    for i in range(num_rooms - 1, 0, -1):\n        # If the number of exams in the pile is less than the number of students in the room, then you can\'t visit the room\n        if exams < students[i]:\n            print("impossible")\n            return\n        # Add the room to the sequence\n        order.append(i)\n        # Add the number of students in the room to the number of exams in the pile\n        exams += students[i]\n    # If the number of exams in the pile is not equal to the number of students in the first room, then you can\'t visit the room\n    if exams != students[0]:\n        print("impossible")\n        return\n    # Add the first room to the sequence\n    order.append(1)\n    # Print the sequence\n    print(" ".join(map(str, order)))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 04:49:55.253948 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    First input is the number of rooms\n    Second input is the number of students in each room\n    \"\"\"\n    num_rooms = int(input())\n    students = list(map(int, input().split()))\n    students.reverse()\n    # The first room will always be the last room in the order\n    order = [num_rooms]\n    # This will keep track of the number of exams in the pile\n    exams = 0\n    for i in range(num_rooms - 1, -1, -1):\n        # If the number of exams in the pile is less than the number of students in the room, then you can't visit the room\n        if exams < students[i]:\n            print(\"impossible\")\n            return\n        # Add the room to the order\n        order.append(i)\n        # Add the number of students in the room to the number of exams in the pile\n        exams += students[i]\n    # If the number of exams in the pile is not equal to the number of students in the first room, then you can't visit the first room\n    if exams != students[0]:\n        print(\"impossible\")\n        return\n    # Add the first room to the order\n    order.append(1)\n    # Print the order\n    print(\" \".join(map(str, order)))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    First input is the number of rooms\n    Second input is the number of students in each room\n    \"\"\"\n    num_tests = int(input())\n    for _ in range(num_tests):\n        num_rooms = int(input())\n        students = list(map(int, input().split()))\n        students = students[::-1]\n        # The first room will always be the last room in the order\n        order = [num_rooms]\n        # This will keep track of the number of exams in the pile\n        exams = 0\n        for i in range(num_rooms - 1, 0, -1):\n            # If the number of exams in the pile is less than the number of students in the room, then you can't visit the room\n            if exams < students[i]:\n                print(\"impossible\")\n                break\n            # Add the room to the order\n            order.append(i)\n            # Add the number of students in the room to the number of exams in the pile\n            exams += students[i]\n        else:\n            # If the number of exams in the pile is not equal to the number of students in the first room, then you can't visit the first room\n            if exams != students[0]:\n                print(\"impossible\")\n                continue\n            # Add the first room to the order\n            order.append(1)\n            # Print the order\n            print(\" \".join(map(str, order)))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649753382,
  "object": "edit"
}
2022-04-12 04:49:55.254236 fix syntax errors 2 ['\n\ndef main():\n    """\n    First input is the number of rooms\n    Second input is the number of students in each room\n    """\n    num_rooms = int(input())\n    students = list(map(int, input().split()))\n    students.reverse()\n    # The first room will always be the last room in the order\n    order = [num_rooms]\n    # This will keep track of the number of exams in the pile\n    exams = 0\n    for i in range(num_rooms - 1, -1, -1):\n        # If the number of exams in the pile is less than the number of students in the room, then you can\'t visit the room\n        if exams < students[i]:\n            print("impossible")\n            return\n        # Add the room to the order\n        order.append(i)\n        # Add the number of students in the room to the number of exams in the pile\n        exams += students[i]\n    # If the number of exams in the pile is not equal to the number of students in the first room, then you can\'t visit the first room\n    if exams != students[0]:\n        print("impossible")\n        return\n    # Add the first room to the order\n    order.append(1)\n    # Print the order\n    print(" ".join(map(str, order)))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    First input is the number of rooms\n    Second input is the number of students in each room\n    """\n    num_tests = int(input())\n    for _ in range(num_tests):\n        num_rooms = int(input())\n        students = list(map(int, input().split()))\n        students = students[::-1]\n        # The first room will always be the last room in the order\n        order = [num_rooms]\n        # This will keep track of the number of exams in the pile\n        exams = 0\n        for i in range(num_rooms - 1, 0, -1):\n            # If the number of exams in the pile is less than the number of students in the room, then you can\'t visit the room\n            if exams < students[i]:\n                print("impossible")\n                break\n            # Add the room to the order\n            order.append(i)\n            # Add the number of students in the room to the number of exams in the pile\n            exams += students[i]\n        else:\n            # If the number of exams in the pile is not equal to the number of students in the first room, then you can\'t visit the first room\n            if exams != students[0]:\n                print("impossible")\n                continue\n            # Add the first room to the order\n            order.append(1)\n            # Print the order\n            print(" ".join(map(str, order)))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 04:49:55.254268 size on output set 4
2022-04-12 04:49:55.254283 num operations 2
2022-04-12 04:49:55.254288 size on input set 1
2022-04-12 04:49:57.640417 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    rooms = [int(x) for x in sys.stdin.readline().split()]\n\n    # If the total number of students is less than the number of rooms,\n    # then it is impossible to redistribute the exams safely\n    if sum(rooms) < n:\n        print(\"impossible\")\n        return\n\n    # We can simply use the greedy approach and choose the room with\n    # the most students first. This is always a safe order.\n    rooms = sorted(enumerate(rooms), key=lambda x: x[1], reverse=True)\n    print(\" \".join([str(x[0] + 1) for x in rooms]))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    rooms = [int(x) for x in sys.stdin.readline().split()]\n\n    # If the total number of students is less than the number of rooms,\n    # then it is impossible to redistribute the exams safely\n    if sum(rooms) < n:\n        print(\"impossible\")\n        return\n\n    # We can simply use the greedy approach and choose the room with\n    # the most students first. This is always a safe order.\n    rooms = sorted(enumerate(rooms), key=lambda x: x[1], reverse=True)\n    print(\" \".join([str(x[0] + 1) for x in rooms]))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649753395,
  "object": "edit"
}
2022-04-12 04:49:57.640681 fix spelling mistakes 2 ['\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    rooms = [int(x) for x in sys.stdin.readline().split()]\n\n    # If the total number of students is less than the number of rooms,\n    # then it is impossible to redistribute the exams safely\n    if sum(rooms) < n:\n        print("impossible")\n        return\n\n    # We can simply use the greedy approach and choose the room with\n    # the most students first. This is always a safe order.\n    rooms = sorted(enumerate(rooms), key=lambda x: x[1], reverse=True)\n    print(" ".join([str(x[0] + 1) for x in rooms]))\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    rooms = [int(x) for x in sys.stdin.readline().split()]\n\n    # If the total number of students is less than the number of rooms,\n    # then it is impossible to redistribute the exams safely\n    if sum(rooms) < n:\n        print("impossible")\n        return\n\n    # We can simply use the greedy approach and choose the room with\n    # the most students first. This is always a safe order.\n    rooms = sorted(enumerate(rooms), key=lambda x: x[1], reverse=True)\n    print(" ".join([str(x[0] + 1) for x in rooms]))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 04:49:57.640731 size on output set 1
2022-04-12 04:49:57.640739 size on input set 1
2022-04-12 04:49:59.702920 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    rooms = [int(x) for x in sys.stdin.readline().split()]\n\n    # If the total number of students is less than the number of rooms,\n    # then it is impossible to redistribute the exams safely\n    if sum(rooms) < n:\n        print(\"impossible\")\n        return\n\n    # We can simply use the greedy approach and choose the room with\n    # the most students first. This is always a safe order.\n    rooms = sorted(enumerate(rooms), key=lambda x: x[1], reverse=True)\n    print(\" \".join([str(x[0] + 1) for x in rooms]))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    rooms = [int(x) for x in sys.stdin.readline().split()]\n\n    # If the total number of students is less than the number of rooms,\n    # then it is impossible to redistribute the exams safely\n    if sum(rooms) < n:\n        print(\"impossible\")\n        return\n\n    # We can simply use the greedy approach and choose the room with\n    # the most students first. This is always a safe order.\n    rooms = sorted(enumerate(rooms), key=lambda x: x[1], reverse=True)\n    print(\" \".join([str(x[0] + 1) for x in rooms]))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649753397,
  "object": "edit"
}
2022-04-12 04:49:59.703041 fix syntax errors 2 ['\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    rooms = [int(x) for x in sys.stdin.readline().split()]\n\n    # If the total number of students is less than the number of rooms,\n    # then it is impossible to redistribute the exams safely\n    if sum(rooms) < n:\n        print("impossible")\n        return\n\n    # We can simply use the greedy approach and choose the room with\n    # the most students first. This is always a safe order.\n    rooms = sorted(enumerate(rooms), key=lambda x: x[1], reverse=True)\n    print(" ".join([str(x[0] + 1) for x in rooms]))\n\nif __name__ == "__main__":\n    main()\n', '#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    rooms = [int(x) for x in sys.stdin.readline().split()]\n\n    # If the total number of students is less than the number of rooms,\n    # then it is impossible to redistribute the exams safely\n    if sum(rooms) < n:\n        print("impossible")\n        return\n\n    # We can simply use the greedy approach and choose the room with\n    # the most students first. This is always a safe order.\n    rooms = sorted(enumerate(rooms), key=lambda x: x[1], reverse=True)\n    print(" ".join([str(x[0] + 1) for x in rooms]))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 04:49:59.703057 size on output set 2
2022-04-12 04:49:59.703065 num operations 2
2022-04-12 04:49:59.703068 size on input set 1
2022-04-12 04:50:04.656899 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nimport random\n\ndef check_safe(rooms, order):\n    # Check if the order is safe\n    # If it is, return the order, else return None\n    students = rooms[:]\n    pile = []\n    for i in order:\n        if i == 1:\n            pile.extend(students[i-1])\n        else:\n            if len(pile) < students[i-1]:\n                return None\n            else:\n                pile.extend(students[i-1])\n    return order\n\ndef main(n, rooms):\n    # Generate all possible room orders\n    # Check if any are safe\n    # If so, print one, else print \"impossible\"\n    safe_order = None\n    orders = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    order = [i, j, k, l]\n                    if len(set(order)) == n:\n                        orders.append(order)\n    random.shuffle(orders)\n    for order in orders:\n        if check_safe(rooms, order):\n            safe_order = check_safe(rooms, order)\n            break\n    if safe_order:\n        print(' '.join(map(str, safe_order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(i) for i in sys.stdin.readline().strip().split()]\n    main(n, rooms)\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nimport random\n\ndef check_safe(rooms, order):\n    # Check if the order is safe.\n    # If it is, return the order.\n    # If not, return None.\n    students = rooms[:]\n    pile = []\n    for i in order:\n        if i == 1:\n            pile.extend(students[i-1])\n        else:\n            if len(pile) < students[i-1]:\n                return None\n            else:\n                pile.extend(students[i-1])\n    return order\n\ndef main(n, rooms):\n    # Generate all possible room orders.\n    # Check if any are safe.\n    # If so, print one.\n    # If not, print \"impossible\".\n    safe_order = None\n    orders = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    order = [i, j, k, l]\n                    if len(set(order)) == n:\n                        orders.append(order)\n    random.shuffle(orders)\n    for order in orders:\n        if check_safe(rooms, order):\n            safe_order = check_safe(rooms, order)\n            break\n    if safe_order:\n        print(' '.join(map(str, safe_order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(i) for i in sys.stdin.readline().strip().split()]\n    main(n, rooms)\n"
    }
  ],
  "created": 1649753399,
  "object": "edit"
}
2022-04-12 04:50:04.657077 fix spelling mistakes 2 ['\n\nimport sys\nimport random\n\ndef check_safe(rooms, order):\n    # Check if the order is safe\n    # If it is, return the order, else return None\n    students = rooms[:]\n    pile = []\n    for i in order:\n        if i == 1:\n            pile.extend(students[i-1])\n        else:\n            if len(pile) < students[i-1]:\n                return None\n            else:\n                pile.extend(students[i-1])\n    return order\n\ndef main(n, rooms):\n    # Generate all possible room orders\n    # Check if any are safe\n    # If so, print one, else print "impossible"\n    safe_order = None\n    orders = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    order = [i, j, k, l]\n                    if len(set(order)) == n:\n                        orders.append(order)\n    random.shuffle(orders)\n    for order in orders:\n        if check_safe(rooms, order):\n            safe_order = check_safe(rooms, order)\n            break\n    if safe_order:\n        print(\' \'.join(map(str, safe_order)))\n    else:\n        print(\'impossible\')\n\nif __name__ == \'__main__\':\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(i) for i in sys.stdin.readline().strip().split()]\n    main(n, rooms)\n', '\n\nimport sys\nimport random\n\ndef check_safe(rooms, order):\n    # Check if the order is safe.\n    # If it is, return the order.\n    # If not, return None.\n    students = rooms[:]\n    pile = []\n    for i in order:\n        if i == 1:\n            pile.extend(students[i-1])\n        else:\n            if len(pile) < students[i-1]:\n                return None\n            else:\n                pile.extend(students[i-1])\n    return order\n\ndef main(n, rooms):\n    # Generate all possible room orders.\n    # Check if any are safe.\n    # If so, print one.\n    # If not, print "impossible".\n    safe_order = None\n    orders = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    order = [i, j, k, l]\n                    if len(set(order)) == n:\n                        orders.append(order)\n    random.shuffle(orders)\n    for order in orders:\n        if check_safe(rooms, order):\n            safe_order = check_safe(rooms, order)\n            break\n    if safe_order:\n        print(\' \'.join(map(str, safe_order)))\n    else:\n        print(\'impossible\')\n\nif __name__ == \'__main__\':\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(i) for i in sys.stdin.readline().strip().split()]\n    main(n, rooms)\n']
2022-04-12 04:50:04.657100 size on output set 2
2022-04-12 04:50:04.657104 size on input set 2
2022-04-12 04:50:10.400966 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nimport random\n\ndef check_safe(rooms, order):\n    # Check if the order is safe\n    # If it is, return the order, else return None\n    students = rooms[:]\n    pile = []\n    for i in order:\n        if i == 1:\n            pile.extend(students[i-1:i])\n        else:\n            if len(pile) < students[i-1:i]:\n                return None\n            else:\n                pile.extend(students[i-1])\n    return order\n\ndef main(n, rooms):\n    # Generate all possible room orders\n    # Check if any are safe\n    # If so, print one, else print \"impossible\"\n    safe_order = None\n    orders = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    order = [i, j, k, l]\n                    if len(set(order)) == n:\n                        orders.append(order)\n    random.shuffle(orders)\n    for order in orders:\n        if check_safe(rooms, order):\n            safe_order = check_safe(rooms, order)\n            break\n    if safe_order:\n        print(' '.join(map(str, safe_order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(i) for i in sys.stdin.readline().strip().split()]\n    main(n, rooms)\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nimport random\n\ndef check_safe(rooms, order):\n    # Check if the order is safe\n    # If it is, return the order, else return None\n    students = rooms[:]\n    pile = []\n    for i in order:\n        if i == 1:\n            pile.extend(students[i-1:i])\n        else:\n            if len(pile) < students[i-1:i]:\n                return None\n            else:\n                pile.extend(students[i-1:i])\n    return order\n\ndef main(n, rooms):\n    # Generate all possible room orders\n    # Check if any are safe\n    # If so, print one, else print \"impossible\"\n    safe_order = None\n    orders = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    order = [i, j, k, l]\n                    if len(set(order)) == n:\n                        orders.append(order)\n    random.shuffle(orders)\n    for order in orders:\n        if check_safe(rooms, order):\n            safe_order = check_safe(rooms, order)\n            break\n    if safe_order:\n        print(' '.join(map(str, safe_order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(i) for i in sys.stdin.readline().strip().split()]\n    main(n, rooms)\n"
    }
  ],
  "created": 1649753404,
  "object": "edit"
}
2022-04-12 04:50:10.401149 fix syntax errors 2 ['\n\nimport sys\nimport random\n\ndef check_safe(rooms, order):\n    # Check if the order is safe\n    # If it is, return the order, else return None\n    students = rooms[:]\n    pile = []\n    for i in order:\n        if i == 1:\n            pile.extend(students[i-1:i])\n        else:\n            if len(pile) < students[i-1:i]:\n                return None\n            else:\n                pile.extend(students[i-1])\n    return order\n\ndef main(n, rooms):\n    # Generate all possible room orders\n    # Check if any are safe\n    # If so, print one, else print "impossible"\n    safe_order = None\n    orders = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    order = [i, j, k, l]\n                    if len(set(order)) == n:\n                        orders.append(order)\n    random.shuffle(orders)\n    for order in orders:\n        if check_safe(rooms, order):\n            safe_order = check_safe(rooms, order)\n            break\n    if safe_order:\n        print(\' \'.join(map(str, safe_order)))\n    else:\n        print(\'impossible\')\n\nif __name__ == \'__main__\':\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(i) for i in sys.stdin.readline().strip().split()]\n    main(n, rooms)\n', '\n\nimport sys\nimport random\n\ndef check_safe(rooms, order):\n    # Check if the order is safe\n    # If it is, return the order, else return None\n    students = rooms[:]\n    pile = []\n    for i in order:\n        if i == 1:\n            pile.extend(students[i-1:i])\n        else:\n            if len(pile) < students[i-1:i]:\n                return None\n            else:\n                pile.extend(students[i-1:i])\n    return order\n\ndef main(n, rooms):\n    # Generate all possible room orders\n    # Check if any are safe\n    # If so, print one, else print "impossible"\n    safe_order = None\n    orders = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    order = [i, j, k, l]\n                    if len(set(order)) == n:\n                        orders.append(order)\n    random.shuffle(orders)\n    for order in orders:\n        if check_safe(rooms, order):\n            safe_order = check_safe(rooms, order)\n            break\n    if safe_order:\n        print(\' \'.join(map(str, safe_order)))\n    else:\n        print(\'impossible\')\n\nif __name__ == \'__main__\':\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(i) for i in sys.stdin.readline().strip().split()]\n    main(n, rooms)\n']
2022-04-12 04:50:23.861110 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nimport random\n\ndef check_safe(rooms, order):\n    # Check if the order is safe.\n    # If it is, return the order.\n    # If not, return None.\n    students = rooms[:]\n    pile = []\n    for i in order:\n        if i == 1:\n            pile.extend(students[i-1:i])\n        else:\n            if len(pile) < students[i-1:i]:\n                return None\n            else:\n                pile.extend(students[i-1:i])\n    return order\n\ndef main(n, rooms):\n    # Generate all possible room orders.\n    # Check if any are safe.\n    # If so, print one.\n    # If not, print \"impossible\".\n    safe_order = None\n    orders = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    order = [i, j, k, l]\n                    if len(set(order)) == n:\n                        orders.append(order)\n    random.shuffle(orders)\n    for order in orders:\n        if check_safe(rooms, order):\n            safe_order = check_safe(rooms, order)\n            break\n    if safe_order:\n        print(' '.join(map(str, safe_order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(i) for i in sys.stdin.readline().strip().split()]\n    main(n, rooms)\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nimport random\n\ndef check_safe(rooms, order, n):\n    # Check if the order is safe. If it is, return the order. If not, return None.\n    for i in range(n):\n        if order[i] == 1:\n            pile = rooms[i]\n        else:\n            if len(pile) < rooms[i]:\n                return False\n            pile += rooms[i]\n    return True\n\ndef main(n, rooms):\n    # Generate all possible room orders.\n    # Check if any are safe.\n    # If so, print one.\n    # If not, print \"impossible\".\n    safe_order = None\n    orders = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    order = [i, j, k, l]\n                    if len(set(order)) == n:\n                        orders.append(order)\n    random.shuffle(orders)\n    for order in orders:\n        if check_safe(rooms, order):\n            safe_order = check_safe(rooms, order)\n            break\n    if safe_order:\n        print(' '.join(map(str, safe_order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(i) for i in sys.stdin.readline().strip().split()]\n    main(n, rooms)\n"
    }
  ],
  "created": 1649753410,
  "object": "edit"
}
2022-04-12 04:50:23.861288 fix syntax errors 2 ['\n\nimport sys\nimport random\n\ndef check_safe(rooms, order):\n    # Check if the order is safe.\n    # If it is, return the order.\n    # If not, return None.\n    students = rooms[:]\n    pile = []\n    for i in order:\n        if i == 1:\n            pile.extend(students[i-1:i])\n        else:\n            if len(pile) < students[i-1:i]:\n                return None\n            else:\n                pile.extend(students[i-1:i])\n    return order\n\ndef main(n, rooms):\n    # Generate all possible room orders.\n    # Check if any are safe.\n    # If so, print one.\n    # If not, print "impossible".\n    safe_order = None\n    orders = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    order = [i, j, k, l]\n                    if len(set(order)) == n:\n                        orders.append(order)\n    random.shuffle(orders)\n    for order in orders:\n        if check_safe(rooms, order):\n            safe_order = check_safe(rooms, order)\n            break\n    if safe_order:\n        print(\' \'.join(map(str, safe_order)))\n    else:\n        print(\'impossible\')\n\nif __name__ == \'__main__\':\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(i) for i in sys.stdin.readline().strip().split()]\n    main(n, rooms)\n', '\n\nimport sys\nimport random\n\ndef check_safe(rooms, order, n):\n    # Check if the order is safe. If it is, return the order. If not, return None.\n    for i in range(n):\n        if order[i] == 1:\n            pile = rooms[i]\n        else:\n            if len(pile) < rooms[i]:\n                return False\n            pile += rooms[i]\n    return True\n\ndef main(n, rooms):\n    # Generate all possible room orders.\n    # Check if any are safe.\n    # If so, print one.\n    # If not, print "impossible".\n    safe_order = None\n    orders = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    order = [i, j, k, l]\n                    if len(set(order)) == n:\n                        orders.append(order)\n    random.shuffle(orders)\n    for order in orders:\n        if check_safe(rooms, order):\n            safe_order = check_safe(rooms, order)\n            break\n    if safe_order:\n        print(\' \'.join(map(str, safe_order)))\n    else:\n        print(\'impossible\')\n\nif __name__ == \'__main__\':\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(i) for i in sys.stdin.readline().strip().split()]\n    main(n, rooms)\n']
2022-04-12 04:50:23.861314 size on output set 4
2022-04-12 04:50:23.861321 num operations 2
2022-04-12 04:50:23.861324 size on input set 1
2022-04-12 04:50:25.934841 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n#\nimport sys\n\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id\n        self.num_students = num_students\n        self.num_exams = 0\n        self.num_exams_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_exams)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exam(self, num_exams):\n        self.num_exams += num_exams\n\n    def add_exam_needed(self, num_exams_needed):\n        self.num_exams_needed += num_exams_needed\n\n    def get_num_exams_needed(self):\n        return self.num_exams_needed\n\n    def get_num_exams(self):\n        return self.num_exams\n\n    def get_id(self):\n        return self.id\n\ndef get_num_exams_needed(rooms):\n    num_exams_needed = 0\n    for room in rooms:\n        num_exams_needed += room.get_num_exams_needed()\n    return num_exams_needed\n\ndef get_num_exams(rooms):\n    num_exams = 0\n    for room in rooms:\n        num_exams += room.get_num_exams()\n    return num_exams\n\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_exams_needed(rooms) == get_num_exams(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(room.get_id())\n        for room in rooms:\n            room.add_exam_needed(room.get_num_students())\n        for room in rooms:\n            room.add_exam(room.get_num_students())\n        if room.get_num_exams_needed() > room.get_num_exams():\n            break\n        for room in rooms:\n            room.add_exam_needed(-room.get_num_students())\n            room.add_exam(-room.get_num_students())\n        result = dfs(rooms, visited, order)\n        if result:\n            return result\n        order.pop()\n        visited.remove(i)\n    return None\n\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i + 1, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id\n        self.num_students = num_students\n        self.num_exams = 0\n        self.num_exams_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_exams)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exam(self, num_exams):\n        self.num_exams += num_exams\n\n    def add_exam_needed(self, num_exams_needed):\n        self.num_exams_needed += num_exams_needed\n\n    def get_num_exams_needed(self):\n        return self.num_exams_needed\n\n    def get_num_exams(self):\n        return self.num_exams\n\n    def get_id(self):\n        return self.id\n\ndef get_num_exams_needed(rooms):\n    num_exams_needed = 0\n    for room in rooms:\n        num_exams_needed += room.get_num_exams_needed()\n    return num_exams_needed\n\ndef get_num_exams(rooms):\n    num_exams = 0\n    for room in rooms:\n        num_exams += room.get_num_exams()\n    return num_exams\n\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_exams_needed(rooms) == get_num_exams(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(room.get_id())\n        for room in rooms:\n            room.add_exam_needed(room.get_num_students())\n        for room in rooms:\n            room.add_exam(room.get_num_students())\n        if room.get_num_exams_needed() > room.get_num_exams():\n            break\n        for room in rooms:\n            room.add_exam_needed(-room.get_num_students())\n            room.add_exam(-room.get_num_students())\n        result = dfs(rooms, visited, order)\n        if result:\n            return result\n        order.pop()\n        visited.remove(i)\n    return None\n\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i + 1, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649753424,
  "object": "edit"
}
2022-04-12 04:50:25.935011 fix spelling mistakes 2 ["\n#\nimport sys\n\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id\n        self.num_students = num_students\n        self.num_exams = 0\n        self.num_exams_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_exams)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exam(self, num_exams):\n        self.num_exams += num_exams\n\n    def add_exam_needed(self, num_exams_needed):\n        self.num_exams_needed += num_exams_needed\n\n    def get_num_exams_needed(self):\n        return self.num_exams_needed\n\n    def get_num_exams(self):\n        return self.num_exams\n\n    def get_id(self):\n        return self.id\n\ndef get_num_exams_needed(rooms):\n    num_exams_needed = 0\n    for room in rooms:\n        num_exams_needed += room.get_num_exams_needed()\n    return num_exams_needed\n\ndef get_num_exams(rooms):\n    num_exams = 0\n    for room in rooms:\n        num_exams += room.get_num_exams()\n    return num_exams\n\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_exams_needed(rooms) == get_num_exams(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(room.get_id())\n        for room in rooms:\n            room.add_exam_needed(room.get_num_students())\n        for room in rooms:\n            room.add_exam(room.get_num_students())\n        if room.get_num_exams_needed() > room.get_num_exams():\n            break\n        for room in rooms:\n            room.add_exam_needed(-room.get_num_students())\n            room.add_exam(-room.get_num_students())\n        result = dfs(rooms, visited, order)\n        if result:\n            return result\n        order.pop()\n        visited.remove(i)\n    return None\n\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i + 1, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id\n        self.num_students = num_students\n        self.num_exams = 0\n        self.num_exams_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_exams)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exam(self, num_exams):\n        self.num_exams += num_exams\n\n    def add_exam_needed(self, num_exams_needed):\n        self.num_exams_needed += num_exams_needed\n\n    def get_num_exams_needed(self):\n        return self.num_exams_needed\n\n    def get_num_exams(self):\n        return self.num_exams\n\n    def get_id(self):\n        return self.id\n\ndef get_num_exams_needed(rooms):\n    num_exams_needed = 0\n    for room in rooms:\n        num_exams_needed += room.get_num_exams_needed()\n    return num_exams_needed\n\ndef get_num_exams(rooms):\n    num_exams = 0\n    for room in rooms:\n        num_exams += room.get_num_exams()\n    return num_exams\n\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_exams_needed(rooms) == get_num_exams(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(room.get_id())\n        for room in rooms:\n            room.add_exam_needed(room.get_num_students())\n        for room in rooms:\n            room.add_exam(room.get_num_students())\n        if room.get_num_exams_needed() > room.get_num_exams():\n            break\n        for room in rooms:\n            room.add_exam_needed(-room.get_num_students())\n            room.add_exam(-room.get_num_students())\n        result = dfs(rooms, visited, order)\n        if result:\n            return result\n        order.pop()\n        visited.remove(i)\n    return None\n\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i + 1, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 04:50:25.935043 size on output set 2
2022-04-12 04:50:25.935046 size on input set 2
2022-04-12 04:50:32.577355 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#!/usr/bin/env python3\nimport sys\n\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id\n        self.num_students = num_students\n        self.num_exams = 0\n        self.num_exams_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_exams)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exam(self, num_exams):\n        self.num_exams += num_exams\n\n    def add_exam_needed(self, num_exams_needed):\n        self.num_exams_needed += num_exams_needed\n\n    def get_num_exams_needed(self):\n        return self.num_exams_needed\n\n    def get_num_exams(self):\n        return self.num_exams\n\n    def get_id(self):\n        return self.id\n\ndef get_num_exams_needed(rooms):\n    num_exams_needed = 0\n    for room in rooms:\n        num_exams_needed += room.get_num_exams_needed()\n    return num_exams_needed\n\ndef get_num_exams(rooms):\n    num_exams = 0\n    for room in rooms:\n        num_exams += room.get_num_exams()\n    return num_exams\n\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_exams_needed(rooms) == get_num_exams(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(room.get_id())\n        for r in rooms:\n            r.add_exam_needed(r.get_num_students())\n        for r in rooms:\n            r.add_exam(r.get_num_students())\n        if room.get_num_exams_needed() > room.get_num_exams():\n            break\n        for r in rooms:\n            r.add_exam_needed(-r.get_num_students())\n            r.add_exam(-r.get_num_students())\n        result = dfs(rooms, visited, order)\n        if result:\n            return result\n        order.pop()\n        visited.remove(i)\n    return None\n\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i + 1, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id\n        self.num_students = num_students\n        self.num_exams = 0\n        self.num_exams_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_exams)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exam(self, num_exams):\n        self.num_exams += num_exams\n\n    def add_exam_needed(self, num_exams_needed):\n        self.num_exams_needed += num_exams_needed\n\n    def get_num_exams_needed(self):\n        return self.num_exams_needed\n\n    def get_num_exams(self):\n        return self.num_exams\n\n    def get_id(self):\n        return self.id\n\ndef get_num_exams_needed(rooms):\n    num_exams_needed = 0\n    for room in rooms:\n        num_exams_needed += room.get_num_exams_needed()\n    return num_exams_needed\n\ndef get_num_exams(rooms):\n    num_exams = 0\n    for room in rooms:\n        num_exams += room.get_num_exams()\n    return num_exams\n\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_exams_needed(rooms) == get_num_exams(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(room.get_id())\n        for room in rooms:\n            room.add_exam_needed(room.get_num_students())\n        for room in rooms:\n            room.add_exam(room.get_num_students())\n        if room.get_num_exams_needed() > room.get_num_exams():\n            break\n        for room in rooms:\n            room.add_exam_needed(-room.get_num_students())\n            room.add_exam(-room.get_num_students())\n        result = dfs(rooms, visited, order)\n        if result:\n            return result\n        order.pop()\n        visited.remove(i)\n    return None\n\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i + 1, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649753426,
  "object": "edit"
}
2022-04-12 04:50:32.577660 fix syntax errors 2 ["\n#!/usr/bin/env python3\nimport sys\n\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id\n        self.num_students = num_students\n        self.num_exams = 0\n        self.num_exams_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_exams)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exam(self, num_exams):\n        self.num_exams += num_exams\n\n    def add_exam_needed(self, num_exams_needed):\n        self.num_exams_needed += num_exams_needed\n\n    def get_num_exams_needed(self):\n        return self.num_exams_needed\n\n    def get_num_exams(self):\n        return self.num_exams\n\n    def get_id(self):\n        return self.id\n\ndef get_num_exams_needed(rooms):\n    num_exams_needed = 0\n    for room in rooms:\n        num_exams_needed += room.get_num_exams_needed()\n    return num_exams_needed\n\ndef get_num_exams(rooms):\n    num_exams = 0\n    for room in rooms:\n        num_exams += room.get_num_exams()\n    return num_exams\n\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_exams_needed(rooms) == get_num_exams(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(room.get_id())\n        for r in rooms:\n            r.add_exam_needed(r.get_num_students())\n        for r in rooms:\n            r.add_exam(r.get_num_students())\n        if room.get_num_exams_needed() > room.get_num_exams():\n            break\n        for r in rooms:\n            r.add_exam_needed(-r.get_num_students())\n            r.add_exam(-r.get_num_students())\n        result = dfs(rooms, visited, order)\n        if result:\n            return result\n        order.pop()\n        visited.remove(i)\n    return None\n\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i + 1, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id\n        self.num_students = num_students\n        self.num_exams = 0\n        self.num_exams_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_exams)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exam(self, num_exams):\n        self.num_exams += num_exams\n\n    def add_exam_needed(self, num_exams_needed):\n        self.num_exams_needed += num_exams_needed\n\n    def get_num_exams_needed(self):\n        return self.num_exams_needed\n\n    def get_num_exams(self):\n        return self.num_exams\n\n    def get_id(self):\n        return self.id\n\ndef get_num_exams_needed(rooms):\n    num_exams_needed = 0\n    for room in rooms:\n        num_exams_needed += room.get_num_exams_needed()\n    return num_exams_needed\n\ndef get_num_exams(rooms):\n    num_exams = 0\n    for room in rooms:\n        num_exams += room.get_num_exams()\n    return num_exams\n\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_exams_needed(rooms) == get_num_exams(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(room.get_id())\n        for room in rooms:\n            room.add_exam_needed(room.get_num_students())\n        for room in rooms:\n            room.add_exam(room.get_num_students())\n        if room.get_num_exams_needed() > room.get_num_exams():\n            break\n        for room in rooms:\n            room.add_exam_needed(-room.get_num_students())\n            room.add_exam(-room.get_num_students())\n        result = dfs(rooms, visited, order)\n        if result:\n            return result\n        order.pop()\n        visited.remove(i)\n    return None\n\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i + 1, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 04:50:39.362926 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id\n        self.num_students = num_students\n        self.num_exams = 0\n        self.num_exams_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_exams)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exam(self, num_exams):\n        self.num_exams += num_exams\n\n    def add_exam_needed(self, num_exams_needed):\n        self.num_exams_needed += num_exams_needed\n\n    def get_num_exams_needed(self):\n        return self.num_exams_needed\n\n    def get_num_exams(self):\n        return self.num_exams\n\n    def get_id(self):\n        return self.id\n\ndef get_num_exams_needed(rooms):\n    num_exams_needed = 0\n    for room in rooms:\n        num_exams_needed += room.get_num_exams_needed()\n    return num_exams_needed\n\ndef get_num_exams(rooms):\n    num_exams = 0\n    for room in rooms:\n        num_exams += room.get_num_exams()\n    return num_exams\n\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_exams_needed(rooms) == get_num_exams(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(room.get_id())\n        for r in rooms:\n            r.add_exam_needed(r.get_num_students())\n        for r in rooms:\n            r.add_exam(r.get_num_students())\n        if room.get_num_exams_needed() > room.get_num_exams():\n            break\n        for r in rooms:\n            r.add_exam_needed(-r.get_num_students())\n            r.add_exam(-r.get_num_students())\n        result = dfs(rooms, visited, order)\n        if result:\n            return result\n        order.pop()\n        visited.remove(i)\n    return None\n\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i + 1, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id\n        self.num_students = num_students\n        self.num_exams = 0\n        self.num_exams_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_exams)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exam(self, num_exams):\n        self.num_exams += num_exams\n\n    def add_exam_needed(self, num_exams_needed):\n        self.num_exams_needed += num_exams_needed\n\n    def get_num_exams_needed(self):\n        return self.num_exams_needed\n\n    def get_num_exams(self):\n        return self.num_exams\n\n    def get_id(self):\n        return self.id\n\ndef get_num_exams_needed(rooms):\n    num_exams_needed = 0\n    for room in rooms:\n        num_exams_needed += room.get_num_exams_needed()\n    return num_exams_needed\n\ndef get_num_exams(rooms):\n    num_exams = 0\n    for room in rooms:\n        num_exams += room.get_num_exams()\n    return num_exams\n\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_exams_needed(rooms) == get_num_exams(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(room.get_id())\n        for r in rooms:\n            r.add_exam_needed(r.get_num_students())\n        for r in rooms:\n            r.add_exam(r.get_num_students())\n        if room.get_num_exams_needed() > room.get_num_exams():\n            break\n        for r in rooms:\n            r.add_exam_needed(-r.get_num_students())\n            r.add_exam(-r.get_num_students())\n        result = dfs(rooms, visited, order)\n        if result:\n            return result\n        order.pop()\n        visited.remove(i)\n    return None\n\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i + 1, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649753432,
  "object": "edit"
}
2022-04-12 04:50:39.363535 fix syntax errors 2 ["import sys\n\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id\n        self.num_students = num_students\n        self.num_exams = 0\n        self.num_exams_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_exams)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exam(self, num_exams):\n        self.num_exams += num_exams\n\n    def add_exam_needed(self, num_exams_needed):\n        self.num_exams_needed += num_exams_needed\n\n    def get_num_exams_needed(self):\n        return self.num_exams_needed\n\n    def get_num_exams(self):\n        return self.num_exams\n\n    def get_id(self):\n        return self.id\n\ndef get_num_exams_needed(rooms):\n    num_exams_needed = 0\n    for room in rooms:\n        num_exams_needed += room.get_num_exams_needed()\n    return num_exams_needed\n\ndef get_num_exams(rooms):\n    num_exams = 0\n    for room in rooms:\n        num_exams += room.get_num_exams()\n    return num_exams\n\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_exams_needed(rooms) == get_num_exams(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(room.get_id())\n        for r in rooms:\n            r.add_exam_needed(r.get_num_students())\n        for r in rooms:\n            r.add_exam(r.get_num_students())\n        if room.get_num_exams_needed() > room.get_num_exams():\n            break\n        for r in rooms:\n            r.add_exam_needed(-r.get_num_students())\n            r.add_exam(-r.get_num_students())\n        result = dfs(rooms, visited, order)\n        if result:\n            return result\n        order.pop()\n        visited.remove(i)\n    return None\n\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i + 1, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\nclass Room:\n    def __init__(self, id, num_students):\n        self.id = id\n        self.num_students = num_students\n        self.num_exams = 0\n        self.num_exams_needed = 0\n\n    def __str__(self):\n        return 'Room %d: %d students, %d exams' % (self.id, self.num_students, self.num_exams)\n\n    def __repr__(self):\n        return self.__str__()\n\n    def add_exam(self, num_exams):\n        self.num_exams += num_exams\n\n    def add_exam_needed(self, num_exams_needed):\n        self.num_exams_needed += num_exams_needed\n\n    def get_num_exams_needed(self):\n        return self.num_exams_needed\n\n    def get_num_exams(self):\n        return self.num_exams\n\n    def get_id(self):\n        return self.id\n\ndef get_num_exams_needed(rooms):\n    num_exams_needed = 0\n    for room in rooms:\n        num_exams_needed += room.get_num_exams_needed()\n    return num_exams_needed\n\ndef get_num_exams(rooms):\n    num_exams = 0\n    for room in rooms:\n        num_exams += room.get_num_exams()\n    return num_exams\n\ndef dfs(rooms, visited, order):\n    if len(visited) == len(rooms):\n        if get_num_exams_needed(rooms) == get_num_exams(rooms):\n            return order\n        else:\n            return None\n    for i, room in enumerate(rooms):\n        if i in visited:\n            continue\n        visited.add(i)\n        order.append(room.get_id())\n        for r in rooms:\n            r.add_exam_needed(r.get_num_students())\n        for r in rooms:\n            r.add_exam(r.get_num_students())\n        if room.get_num_exams_needed() > room.get_num_exams():\n            break\n        for r in rooms:\n            r.add_exam_needed(-r.get_num_students())\n            r.add_exam(-r.get_num_students())\n        result = dfs(rooms, visited, order)\n        if result:\n            return result\n        order.pop()\n        visited.remove(i)\n    return None\n\ndef main():\n    num_rooms = int(sys.stdin.readline().strip())\n    rooms = []\n    for i in range(num_rooms):\n        num_students = int(sys.stdin.readline().strip())\n        rooms.append(Room(i + 1, num_students))\n    order = dfs(rooms, set(), [])\n    if order:\n        print(' '.join(map(str, order)))\n    else:\n        print('impossible')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 04:50:39.363649 size on output set 4
2022-04-12 04:50:39.363677 num operations 2
2022-04-12 04:50:39.363690 size on input set 1
2022-04-12 04:50:45.446942 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    if n == 2:\n        if rooms[0] == 1 and rooms[1] == 1:\n            print(\"1 2\")\n        elif rooms[0] == 1 and rooms[1] == 2:\n            print(\"2 1\")\n        elif rooms[0] == 2 and rooms[1] == 1:\n            print(\"1 2\")\n        elif rooms[0] == 2 and rooms[1] == 2:\n            print(\"impossibru\")\n        else:\n            print(\"impossibru\")\n    elif n == 3:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"2 3 1\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"2 1 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"1 3 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"impossibru\")\n        else:\n            print(\"impossibru\")\n    elif n == 4:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"2 3 4 1\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 4 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"impossibru\")\n        else:\n            print(\"impossibru\")\n    else:\n        print(\"impossibru\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    if n == 2:\n        if rooms[0] == 1 and rooms[1] == 1:\n            print(\"1 2\")\n        elif rooms[0] == 1 and rooms[1] == 2:\n            print(\"2 1\")\n        elif rooms[0] == 2 and rooms[1] == 1:\n            print(\"1 2\")\n        elif rooms[0] == 2 and rooms[1] == 2:\n            print(\"Impossible\")\n        else:\n            print(\"Impossible\")\n    elif n == 3:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"2 3 1\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"2 1 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"1 3 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"Impossible\")\n        else:\n            print(\"Impossible\")\n    elif n == 4:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"2 3 4 1\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 4 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"Impossible\")\n        else:\n            print(\"Impossible\")\n    else:\n        print(\"Impossible\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649753439,
  "object": "edit"
}
2022-04-12 04:50:45.447428 fix spelling mistakes 2 ['\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    if n == 2:\n        if rooms[0] == 1 and rooms[1] == 1:\n            print("1 2")\n        elif rooms[0] == 1 and rooms[1] == 2:\n            print("2 1")\n        elif rooms[0] == 2 and rooms[1] == 1:\n            print("1 2")\n        elif rooms[0] == 2 and rooms[1] == 2:\n            print("impossibru")\n        else:\n            print("impossibru")\n    elif n == 3:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2:\n            print("2 3 1")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1:\n            print("1 3 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2:\n            print("2 1 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2:\n            print("1 3 2")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2:\n            print("impossibru")\n        else:\n            print("impossibru")\n    elif n == 4:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print("2 3 4 1")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print("2 1 4 3")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 4 3 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 2 4")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print("2 1 4 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 3 4 2")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 2 4")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print("1 2 4 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 2 4 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print("impossibru")\n        else:\n            print("impossibru")\n    else:\n        print("impossibru")\n\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    if n == 2:\n        if rooms[0] == 1 and rooms[1] == 1:\n            print("1 2")\n        elif rooms[0] == 1 and rooms[1] == 2:\n            print("2 1")\n        elif rooms[0] == 2 and rooms[1] == 1:\n            print("1 2")\n        elif rooms[0] == 2 and rooms[1] == 2:\n            print("Impossible")\n        else:\n            print("Impossible")\n    elif n == 3:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2:\n            print("2 3 1")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1:\n            print("1 3 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2:\n            print("2 1 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2:\n            print("1 3 2")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2:\n            print("Impossible")\n        else:\n            print("Impossible")\n    elif n == 4:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print("2 3 4 1")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print("2 1 4 3")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 4 3 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 2 4")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print("2 1 4 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 3 4 2")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 2 4")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print("1 2 4 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 2 4 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print("Impossible")\n        else:\n            print("Impossible")\n    else:\n        print("Impossible")\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 04:50:45.447501 size on output set 2
2022-04-12 04:50:45.447507 size on input set 2
2022-04-12 04:50:52.842167 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    if n == 2\n        if rooms[0] == 1 and rooms[1] == 1:\n            print(\"1 2\")\n        elif rooms[0] == 1 and rooms[1] == 2:\n            print(\"2 1\")\n        elif rooms[0] == 2 and rooms[1] == 1:\n            print(\"1 2\")\n        elif rooms[0] == 2 and rooms[1] == 2:\n            print(\"impossibru\")\n        else:\n            print(\"impossibru\")\n    elif n == 3\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"2 3 1\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"2 1 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"1 3 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"impossibru\")\n        else:\n            print(\"impossibru\")\n    elif n == 4\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"2 3 4 1\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 4 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"impossibru\")\n        else:\n            print(\"impossibru\")\n    else\n        print(\"impossibru\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    n = int(input().strip())\n    rooms = [int(x) for x in input().strip().split()]\n\n    if n == 2:\n        if rooms[0] == 1 and rooms[1] == 1:\n            print(\"1 2\")\n        elif rooms[0] == 1 and rooms[1] == 2:\n            print(\"2 1\")\n        elif rooms[0] == 2 and rooms[1] == 1:\n            print(\"1 2\")\n        elif rooms[0] == 2 and rooms[1] == 2:\n            print(\"impossible\")\n        else:\n            print(\"impossible\")\n    elif n == 3:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"2 3 1\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"2 1 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"1 3 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"impossible\")\n        else:\n            print(\"impossible\")\n    elif n == 4:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"2 3 4 1\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 4 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"impossible\")\n        else:\n            print(\"impossible\")\n    else:\n        print(\"impossible\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649753445,
  "object": "edit"
}
2022-04-12 04:50:52.842788 fix syntax errors 2 ['\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    if n == 2\n        if rooms[0] == 1 and rooms[1] == 1:\n            print("1 2")\n        elif rooms[0] == 1 and rooms[1] == 2:\n            print("2 1")\n        elif rooms[0] == 2 and rooms[1] == 1:\n            print("1 2")\n        elif rooms[0] == 2 and rooms[1] == 2:\n            print("impossibru")\n        else:\n            print("impossibru")\n    elif n == 3\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2:\n            print("2 3 1")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1:\n            print("1 3 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2:\n            print("2 1 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2:\n            print("1 3 2")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2:\n            print("impossibru")\n        else:\n            print("impossibru")\n    elif n == 4\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print("2 3 4 1")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print("2 1 4 3")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 4 3 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 2 4")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print("2 1 4 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 3 4 2")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 2 4")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print("1 2 4 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 2 4 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print("impossibru")\n        else:\n            print("impossibru")\n    else\n        print("impossibru")\n\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n = int(input().strip())\n    rooms = [int(x) for x in input().strip().split()]\n\n    if n == 2:\n        if rooms[0] == 1 and rooms[1] == 1:\n            print("1 2")\n        elif rooms[0] == 1 and rooms[1] == 2:\n            print("2 1")\n        elif rooms[0] == 2 and rooms[1] == 1:\n            print("1 2")\n        elif rooms[0] == 2 and rooms[1] == 2:\n            print("impossible")\n        else:\n            print("impossible")\n    elif n == 3:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2:\n            print("2 3 1")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1:\n            print("1 3 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2:\n            print("2 1 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2:\n            print("1 3 2")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2:\n            print("impossible")\n        else:\n            print("impossible")\n    elif n == 4:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print("2 3 4 1")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print("2 1 4 3")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 4 3 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 2 4")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print("2 1 4 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 3 4 2")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 2 4")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print("1 2 4 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 2 4 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print("impossible")\n        else:\n            print("impossible")\n    else:\n        print("impossible")\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 04:50:55.650297 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip()) \n    rooms = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    if n == 2:\n        if rooms[0] == 1 and rooms[1] == 1:\n            print(\"1 2\")\n        elif rooms[0] == 1 and rooms[1] == 2:\n            print(\"2 1\")\n        elif rooms[0] == 2 and rooms[1] == 1:\n            print(\"1 2\")\n        elif rooms[0] == 2 and rooms[1] == 2:\n            print(\"Impossible\")\n        else:\n            print(\"Impossible\")\n    elif n == 3:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"2 3 1\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"2 1 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"1 3 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"Impossible\")\n        else:\n            print(\"Impossible\")\n    elif n == 4:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"2 3 4 1\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 4 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"Impossible\")\n        else:\n            print(\"Impossible\")\n    else:\n        print(\"Impossible\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    if n == 2:\n        if rooms[0] == 1 and rooms[1] == 1:\n            print(\"1 2\")\n        elif rooms[0] == 1 and rooms[1] == 2:\n            print(\"2 1\")\n        elif rooms[0] == 2 and rooms[1] == 1:\n            print(\"1 2\")\n        elif rooms[0] == 2 and rooms[1] == 2:\n            print(\"Impossible\")\n        else:\n            print(\"Impossible\")\n    elif n == 3:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"2 3 1\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"2 1 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2:\n            print(\"1 3 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1:\n            print(\"1 2 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2:\n            print(\"Impossible\")\n        else:\n            print(\"Impossible\")\n    elif n == 4:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"2 3 4 1\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 4 3 2\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"2 1 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 3 2 4\")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print(\"1 3 4 2\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print(\"1 2 4 3\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print(\"1 2 3 4\")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print(\"Impossible\")\n        else:\n            print(\"Impossible\")\n    else:\n        print(\"Impossible\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649753453,
  "object": "edit"
}
2022-04-12 04:50:55.650545 fix syntax errors 2 ['\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip()) \n    rooms = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    if n == 2:\n        if rooms[0] == 1 and rooms[1] == 1:\n            print("1 2")\n        elif rooms[0] == 1 and rooms[1] == 2:\n            print("2 1")\n        elif rooms[0] == 2 and rooms[1] == 1:\n            print("1 2")\n        elif rooms[0] == 2 and rooms[1] == 2:\n            print("Impossible")\n        else:\n            print("Impossible")\n    elif n == 3:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2:\n            print("2 3 1")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1:\n            print("1 3 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2:\n            print("2 1 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2:\n            print("1 3 2")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2:\n            print("Impossible")\n        else:\n            print("Impossible")\n    elif n == 4:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print("2 3 4 1")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print("2 1 4 3")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 4 3 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 2 4")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print("2 1 4 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 3 4 2")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 2 4")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print("1 2 4 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 2 4 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print("Impossible")\n        else:\n            print("Impossible")\n    else:\n        print("Impossible")\n\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    rooms = [int(x) for x in sys.stdin.readline().strip().split()]\n\n    if n == 2:\n        if rooms[0] == 1 and rooms[1] == 1:\n            print("1 2")\n        elif rooms[0] == 1 and rooms[1] == 2:\n            print("2 1")\n        elif rooms[0] == 2 and rooms[1] == 1:\n            print("1 2")\n        elif rooms[0] == 2 and rooms[1] == 2:\n            print("Impossible")\n        else:\n            print("Impossible")\n    elif n == 3:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2:\n            print("2 3 1")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1:\n            print("1 3 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2:\n            print("2 1 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2:\n            print("1 3 2")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1:\n            print("1 2 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2:\n            print("Impossible")\n        else:\n            print("Impossible")\n    elif n == 4:\n        if rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print("2 3 4 1")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 1 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print("2 1 4 3")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 4 3 2")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 2 4")\n        elif rooms[0] == 1 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print("2 1 4 3")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 3 4 2")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 3 2 4")\n        elif rooms[0] == 2 and rooms[1] == 1 and rooms[2] == 2 and rooms[3] == 2:\n            print("1 2 4 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 1:\n            print("1 3 4 2")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 1 and rooms[3] == 2:\n            print("1 2 4 3")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 1:\n            print("1 2 3 4")\n        elif rooms[0] == 2 and rooms[1] == 2 and rooms[2] == 2 and rooms[3] == 2:\n            print("Impossible")\n        else:\n            print("Impossible")\n    else:\n        print("Impossible")\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 04:50:55.650627 size on output set 4
2022-04-12 04:50:55.650640 num operations 2
2022-04-12 04:50:55.650646 size on input set 1
2022-04-12 04:50:58.798866 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# This is a combinatorics problem.\n# The only problem is that the solution is not necessarily unique.\n\nimport itertools\n\nn = int(input())\ns = list(map(int, input().split()))\n\ndef is_safe(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n    return True\n\ndef is_safe_unique(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n        if students == sum(s):\n            return True\n    return True\n\nfor order in itertools.permutations(range(1, n+1)):\n    if is_safe(order):\n        print(\" \".join(map(str, order)))\n        break\nelse:\n    print(\"impossible\")\n"
    },
    {
      "index": 1,
      "text": "\n\n#This is a combinatorial problem.\n#The only problem is that the solution is not necessarily unique,\n#so we need to check that the solution is unique.\n\nimport itertools\n\nn = int(input())\ns = list(map(int, input().split()))\n\ndef is_safe(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n    return True\n\ndef is_safe_unique(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n        if students == sum(s):\n            return True\n    return True\n\nfor order in itertools.permutations(range(1, n+1)):\n    if is_safe(order):\n        print(\" \".join(map(str, order)))\n        break\nelse:\n    print(\"impossible\")\n"
    }
  ],
  "created": 1649753455,
  "object": "edit"
}
2022-04-12 04:50:58.799163 fix spelling mistakes 2 ['\n\n# This is a combinatorics problem.\n# The only problem is that the solution is not necessarily unique.\n\nimport itertools\n\nn = int(input())\ns = list(map(int, input().split()))\n\ndef is_safe(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n    return True\n\ndef is_safe_unique(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n        if students == sum(s):\n            return True\n    return True\n\nfor order in itertools.permutations(range(1, n+1)):\n    if is_safe(order):\n        print(" ".join(map(str, order)))\n        break\nelse:\n    print("impossible")\n', '\n\n#This is a combinatorial problem.\n#The only problem is that the solution is not necessarily unique,\n#so we need to check that the solution is unique.\n\nimport itertools\n\nn = int(input())\ns = list(map(int, input().split()))\n\ndef is_safe(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n    return True\n\ndef is_safe_unique(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n        if students == sum(s):\n            return True\n    return True\n\nfor order in itertools.permutations(range(1, n+1)):\n    if is_safe(order):\n        print(" ".join(map(str, order)))\n        break\nelse:\n    print("impossible")\n']
2022-04-12 04:50:58.799207 size on output set 2
2022-04-12 04:50:58.799217 size on input set 2
2022-04-12 04:51:05.030825 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# This is a combinatorial problem.\n# The only problem is that the solution is not necessarily unique,\n# so we need to check that the solution is unique.\n\nimport itertools\n\nn = int(input())\ns = list(map(int, input().split()))\n\n\ndef is_safe(order):\n    students = 0\n    for i in order:\n        students += s[i - 1]\n        if students > sum(s):\n            return False\n    return True\n\n\ndef is_safe_unique(order):\n    students = 0\n    for i in order:\n        students += s[i - 1]\n        if students > sum(s):\n            return False\n        if students == sum(s):\n            return True\n    return True\n\n\nfor order in itertools.permutations(range(1, n + 1)):\n    if is_safe(order):\n        print(\" \".join(map(str, order)))\n        break\nelse:\n    print(\"impossible\")\n"
    },
    {
      "index": 1,
      "text": "\n\n# This is a combinatorial problem.\n# The only problem is that the solution is not necessarily unique,\n# so we need to check that the solution is unique.\n\nimport itertools\n\nn = int(input())\ns = list(map(int, input().split()))\n\ndef is_safe(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n    return True\n\ndef is_safe_unique(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n        if students == sum(s):\n            return True\n    return True\n\nfor order in itertools.permutations(range(1, n+1)):\n    if is_safe(order):\n        print(\" \".join(map(str, order)))\n        break\nelse:\n    print(\"impossible\")\n"
    }
  ],
  "created": 1649753459,
  "object": "edit"
}
2022-04-12 04:51:05.030961 fix syntax errors 2 ['\n\n# This is a combinatorial problem.\n# The only problem is that the solution is not necessarily unique,\n# so we need to check that the solution is unique.\n\nimport itertools\n\nn = int(input())\ns = list(map(int, input().split()))\n\n\ndef is_safe(order):\n    students = 0\n    for i in order:\n        students += s[i - 1]\n        if students > sum(s):\n            return False\n    return True\n\n\ndef is_safe_unique(order):\n    students = 0\n    for i in order:\n        students += s[i - 1]\n        if students > sum(s):\n            return False\n        if students == sum(s):\n            return True\n    return True\n\n\nfor order in itertools.permutations(range(1, n + 1)):\n    if is_safe(order):\n        print(" ".join(map(str, order)))\n        break\nelse:\n    print("impossible")\n', '\n\n# This is a combinatorial problem.\n# The only problem is that the solution is not necessarily unique,\n# so we need to check that the solution is unique.\n\nimport itertools\n\nn = int(input())\ns = list(map(int, input().split()))\n\ndef is_safe(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n    return True\n\ndef is_safe_unique(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n        if students == sum(s):\n            return True\n    return True\n\nfor order in itertools.permutations(range(1, n+1)):\n    if is_safe(order):\n        print(" ".join(map(str, order)))\n        break\nelse:\n    print("impossible")\n']
2022-04-12 04:51:12.617666 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# This is a combinatorics problem.\n# The only problem is that the solution is not necessarily unique.\n\nimport itertools\n\nn = int(input())\ns = list(map(int, input().split()))\n\ndef is_safe(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n    return True\n\ndef is_safe_unique(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n        if students == sum(s):\n            return True\n    return True\n\nfor order in itertools.permutations(range(1, n+1)):\n    if is_safe(order):\n        print(\" \".join(map(str, order)))\n        break\nelse:\n    print(\"impossible\")\n"
    },
    {
      "index": 1,
      "text": "\n"
    }
  ],
  "created": 1649753465,
  "object": "edit"
}
2022-04-12 04:51:12.617851 fix syntax errors 2 ['\n# This is a combinatorics problem.\n# The only problem is that the solution is not necessarily unique.\n\nimport itertools\n\nn = int(input())\ns = list(map(int, input().split()))\n\ndef is_safe(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n    return True\n\ndef is_safe_unique(order):\n    students = 0\n    for i in order:\n        students += s[i-1]\n        if students > sum(s):\n            return False\n        if students == sum(s):\n            return True\n    return True\n\nfor order in itertools.permutations(range(1, n+1)):\n    if is_safe(order):\n        print(" ".join(map(str, order)))\n        break\nelse:\n    print("impossible")\n', '\n']
2022-04-12 04:51:12.617965 size on output set 4
2022-04-12 04:51:12.617980 num operations 2
2022-04-12 04:51:12.617989 size on input set 1
2022-04-12 04:51:14.770412 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Safe order\n    \"\"\"\n    n = int(input())\n    s = list(map(int, input().split()))\n    if s[0] < sum(s[1:]):\n        print(\"impossible\")\n    else:\n        print(\"1\", end=\" \")\n        for i in range(2, n+1):\n            print(i, end=\" \")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Safe order\n    \"\"\"\n    n = int(input())\n    s = list(map(int, input().split()))\n    if s[0] < sum(s[1:]):\n        print(\"impossible\")\n    else:\n        print(\"1\", end=\" \")\n        for i in range(2, n+1):\n            print(i, end=\" \")\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649753472,
  "object": "edit"
}
2022-04-12 04:51:14.770718 fix spelling mistakes 2 ['\n\ndef main():\n    """\n    Safe order\n    """\n    n = int(input())\n    s = list(map(int, input().split()))\n    if s[0] < sum(s[1:]):\n        print("impossible")\n    else:\n        print("1", end=" ")\n        for i in range(2, n+1):\n            print(i, end=" ")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    """\n    Safe order\n    """\n    n = int(input())\n    s = list(map(int, input().split()))\n    if s[0] < sum(s[1:]):\n        print("impossible")\n    else:\n        print("1", end=" ")\n        for i in range(2, n+1):\n            print(i, end=" ")\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-12 04:51:14.770817 size on output set 1
2022-04-12 04:51:14.770831 size on input set 1
2022-04-12 04:51:19.262849 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Safe order\n    \"\"\"\n    n = int(input())\n    s = list(map(int, input().split()))\n    if s[0] < sum(s[1:]):\n        print(\"impossible\")\n    else:\n        print(\"1\", end=\" \")\n        for i in range(2, n + 1):\n            print(i, end=\" \")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Safe order\n    \"\"\"\n    n = int(input()) # number of students\n    s = list(map(int, input().split())) # list of students\n    s.sort()\n    print(s)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649753474,
  "object": "edit"
}
2022-04-12 04:51:19.262951 fix syntax errors 2 ['\n\ndef main():\n    """\n    Safe order\n    """\n    n = int(input())\n    s = list(map(int, input().split()))\n    if s[0] < sum(s[1:]):\n        print("impossible")\n    else:\n        print("1", end=" ")\n        for i in range(2, n + 1):\n            print(i, end=" ")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    """\n    Safe order\n    """\n    n = int(input()) # number of students\n    s = list(map(int, input().split())) # list of students\n    s.sort()\n    print(s)\n\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-12 04:51:19.262965 size on output set 2
