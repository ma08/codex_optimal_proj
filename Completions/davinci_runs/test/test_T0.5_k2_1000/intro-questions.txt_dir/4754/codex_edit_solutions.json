["\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    for i in range(n):\n        line = sys.stdin.readline().strip()\n        if line[0] == '0':\n            print(\"0\")\n        else:\n            print(\"1\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    socks = [int(i) for i in input().split()]\n    socks.sort()\n\n    # If there are socks of the same type, try pairing them.\n    for i in range(0, len(socks), 2):\n        if socks[i] == socks[i+1]:\n            socks.pop(i)\n            socks.pop(i)\n    \n    # If there are no socks left, we are done.\n    if len(socks) == 0:\n        return 0\n    \n    # If there are an odd number of socks left, there is no solution.\n    if len(socks) % 2 == 1:\n        return \"impossible\"\n\n    # Try to pair up the remaining socks.\n    moves = 0\n    while len(socks) > 0:\n        # If the top sock is a match for the bottom sock, pair them.\n        if socks[0] == socks[-1]:\n            socks.pop(0)\n            socks.pop(-1)\n            moves += 2\n            continue\n\n        # If the top sock is not a match for the bottom sock, try pairing it with the second from the bottom sock.\n        if socks[0] == socks[-2]:\n            socks.pop(0)\n            socks.pop(-2)\n            moves += 2\n            continue\n\n        # If the top sock is not a match for any other sock, there is no solution.\n        return \"impossible\"\n\n    return moves\n\nif __name__ == \"__main__\":\n    print(main())\n", "#!/usr/bin/python3\n\nimport sys\nimport collections\n\ndef main():\n    n = int(sys.stdin.readline())\n    socks = map(int, sys.stdin.readline().split())\n    sock_count = collections.Counter(socks)\n    if any(sock_count[x] % 2 for x in sock_count):\n        print(\"impossible\")\n    else:\n        print(int(sum(sock_count[x]/2 - 1 for x in sock_count)))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n = int(input())  # Number of socks\n    socks = [int(x) for x in input().split()]  # List of socks\n\n    # Check if it's impossible to find a solution (odd number of socks)\n    if len(socks) % 2 != 0:\n        print(\"impossible\")\n        return\n\n    # Create a dictionary for the socks (key: sock color, value: number of socks)\n    sock_dict = {}\n    for sock in socks:\n        sock_dict[sock] = sock_dict.get(sock, 0) + 1\n\n    # Count the number of pairs (if the number of socks is even, there is a pair)\n    pairs = 0\n    for sock in sock_dict:\n        pairs += sock_dict[sock] // 2  # Integer division\n\n    # Calculate the number of moves (number of socks - number of pairs)\n    moves = n - pairs\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# SOLUTION 1\n\nfrom collections import Counter\n\npairs = int(input())\nsocks = list(map(int, input().split()))\n\nif len(socks) % 2 != 0:\n    print('impossible')\nelse:\n    sock_count = Counter(socks)\n    pairs_needed = 0\n    for i in sock_count.values():\n        pairs_needed += i // 2\n    if pairs_needed > pairs:\n        print('impossible')\n    else:\n        print(pairs * 2 - pairs_needed)\n", "\n\nimport sys\nimport collections\n\ndef main():\n    n = int(sys.stdin.readline())\n    socks = map(int, sys.stdin.readline().split())\n    sock_count = collections.Counter(socks)\n    if any(sock_count[x] % 2 for x in sock_count):  # if any of the socks are odd\n        print(\"impossible\")\n    else:\n        print(sum(sock_count[x]/2 - 1 for x in sock_count))  # if all socks are even\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n = int(input())\n    socks = [int(x) for x in input().split()]\n\n    # Check if it's impossible\n    if n % 2 != 0:\n        print(\"impossible\")\n        return\n\n    # Create a dictionary for the socks and count the number of pairs\n    sock_dict = {}\n    for sock in socks:\n        sock_dict[sock] = sock_dict.get(sock, 0) + 1\n    pairs = 0\n    for sock in sock_dict:\n        pairs += sock_dict[sock] // 2\n\n    # Calculate the number of moves and print it\n    moves = n - pairs\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n = int(input())  # Number of socks\n    socks = [int(x) for x in input().split()]\n\n    # Create a dictionary for the socks and count the number of pairs\n    sock_dict = {}  # Dictionary to store the socks\n    for sock in socks:\n        sock_dict[sock] = sock_dict.get(sock, 0) + 1  # Add the sock to the dictionary\n\n    pairs = 0  # Number of pairs\n    for sock in sock_dict:\n        pairs += sock_dict[sock] // 2  # Add the number of pairs of the sock to the total number of pairs\n\n    # Calculate the number of moves and print it\n    moves = n - pairs  # Number of moves\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    print(\"Hello World!\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport math\nimport sys\n\ndef main():\n    n = int(input().strip())\n    socks = list(map(int, input().strip().split()))\n\n    # if len(socks) % 2 != 0:\n    #     print(\"impossible\")\n    #     return\n\n    count = 0 \n    # Sort socks by type.\n    socks = sorted(socks) \n    # Count number of socks of each type.\n    socks_count = {} \n    for sock in socks:\n        if sock in socks_count: \n            socks_count[sock] += 1 \n        else: \n            socks_count[sock] = 1 \n    # Count number of moves.\n    for sock, num_socks in socks_count.items(): \n        if num_socks % 2 == 0: \n            count += num_socks \n        else: \n            count += num_socks - 1 \n            if len(socks_count) == 1: \n                print(\"impossible\") \n                return \n    print(count) \n\nif __name__ == \"__main__\": \n    main() \n", "\n\ndef main():\n    n = int(input())\n    socks = [int(x) for x in input().split()]\n\n    # Check if it's impossible to find a solution\n    if len(socks) % 2 != 0:\n        print(\"impossible\")\n        return\n\n    # Create a dictionary for the socks\n    sock_dict = {}\n    for sock in socks:\n        sock_dict[sock] = sock_dict.get(sock, 0) + 1\n\n    # Count the number of pairs\n    pairs = 0\n    for sock in sock_dict:\n        pairs += sock_dict[sock] / 2\n\n    # Calculate the number of moves\n    moves = n - pairs\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    socks = [int(x) for x in sys.stdin.readline().strip().split()]\n    socks = sorted(socks)\n    count = 0\n    print(socks)\n    # for i in range(0, len(socks), 2):\n    #     if socks[i] != socks[i+1]:\n    #         count += 1\n    # if count == 0:\n    #     print(len(socks) // 2)\n    # else:\n    #     print(\"impossible\")\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    n = int(input())\n    socks = [int(i) for i in input().split()][:n]\n    socks.sort()\n\n    # If there are socks of the same type, try pairing them first\n    for i in range(0, len(socks), 2):\n        if socks[i] == socks[i + 1]:\n            socks.pop(i)\n            socks.pop(i)\n            n -= 1\n\n    # If there are no socks left, we are done.\n    if len(socks) == 0:\n        return 0\n\n    # If there are an odd number of socks left, there is no solution.\n    if len(socks) % 2 == 1:\n        return \"impossible\"\n\n    # Try to pair up the remaining socks.\n    moves = 0\n    while len(socks) > 0:\n        # If the top sock is a match for the bottom sock, pair them.\n        if socks[0] == socks[-1]:\n            socks.pop(0)\n            socks.pop(-1)\n            moves += 2\n            continue\n\n        # If the top sock is not a match for the bottom sock, try pairing it with the second from the bottom sock.\n        if socks[0] == socks[-2]:\n            socks.pop(0)\n            socks.pop(-2)\n            moves += 2\n            continue\n\n        # If the top sock is not a match for any other sock, there is no solution.\n        return \"impossible\"\n\n    return moves\n\nif __name__ == \"__main__\":\n    print(main())\n", "#!/usr/bin/env python3\n\nfrom collections import Counter\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    socks = [int(x) for x in sys.stdin.readline().strip().split()] \n    socks = sorted(socks)\n    count = 0\n    for i in range(0, len(socks), 2):\n        if socks[i] != socks[i+1]:\n            count += 1\n    if count == 0:\n        print(len(socks) // 2)\n    else:\n        print(\"impossible\")\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\nfrom collections import Counter\n\ndef main():\n    n = int(input())\n    socks = [int(i) for i in input().split()]\n    if len(socks) % 2 == 1:\n        print(\"impossible\")\n        return\n    socks_dict = Counter(socks)\n    moves = 0\n    while len(socks_dict) > 0:\n        socks_dict = Counter({key: socks_dict[key] - 2 for key in socks_dict if socks_dict[key] >= 2})\n        moves += 1\n    print(moves * 2)\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/python3\n\nimport sys\nimport collections\n\ndef main():\n    n = int(sys.stdin.readline())\n    socks = map(int, sys.stdin.readline().split())\n    sock_count = collections.Counter(socks)\n    if any(sock_count[x] % 2 != 0 for x in sock_count):\n        print(\"impossible\")\n    else:\n        print(sum(sock_count[x]/2 - 1 for x in sock_count) + 1)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"Sock Pairing.\"\"\"\n    n = int(input())\n    data = list(map(int, input().split()))\n    count = [0 for _ in range(1000000001)]\n    for i in data:\n        count[i] += 1\n    sum_ = 0\n    for i in count:\n        if i % 2 == 1:\n            sum_ += 1\n    if sum_ > 2:\n        print(\"impossible\")\n    else:\n        print(n - sum_)\n\nmain()\n", "\n\ndef main():\n    \"\"\"Sock Pairing.\"\"\"\n    n = int(input())\n    data = list(map(int, input().split()))\n    count = [0 for _ in range(1000000)]\n    for i in data:\n        count[i] += 1\n    sum_ = 0\n    for i in count:\n        if i % 2 == 1:\n            sum_ += 1\n    if sum_ > 2:\n        print(\"impossible\")\n    else:\n        print(n - sum_)\n\nmain()\n", "\nimport sys\n\ndef main():\n    n = int(input().strip())\n    socks = list(map(int, input().strip().split()))\n\n    if len(socks) % 2 != 0:\n        print(\"impossible\")\n        return\n\n    count = 0\n    # Sort socks by type\n    socks = sorted(socks)\n    # Count number of socks for each type\n    socks_count = {}\n    for sock in socks:\n        if sock in socks_count:\n            socks_count[sock] += 1\n        else:\n            socks_count[sock] = 1\n    # Count number of moves\n    for sock, num_socks in socks_count.items():\n        if num_socks % 2 == 0:\n            count += num_socks\n        else:\n            count += num_socks - 1\n            if len(socks_count) == 1:\n                print(\"impossible\")\n                return\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "\n# SOLUTION 1\n\nfrom collections import Counter\n\npairs = int(input())\nsocks = list(map(int, input().split()))\n\nif len(socks) % 2 != 0:\n    print('impossible')\nelse:\n    sock_count = Counter(socks)\n    pairs_needed = 0\n    for i in sock_count.values():\n        pairs_needed += i // 2\n    if pairs_needed > pairs:\n        print('impossible')\n    else:\n\n# SOLUTION 2\n\nfrom collections import Counter\n\npairs = int(input())\nsocks = list(map(int, input().split()))\n\nif len(socks) % 2 != 0:\n    print('impossible')\nelse:\n    sock_count = Counter(socks)\n    pairs_needed = 0\n    for i in sock_count.values():\n        pairs_needed += i // 2\n    if pairs_needed > pairs:\n        print('impossible')\n    else:\n        print(pairs * 2 - pairs_needed)\n        print(pairs * 2 - pairs_needed)\n", "\nimport sys\n\ndef main():\n    n = int(input().strip())\n    socks = list(map(int, input().strip().split()))\n\n    if len(socks) % 2 != 0:\n        print(\"impossible\")\n        return\n\n    count = 0\n    # Sort socks by type.\n    socks = sorted(socks)\n    # Count number of socks of each type.\n    socks_count = {}\n    for sock in socks:\n        if sock in socks_count:\n            socks_count[sock] += 1\n        else:\n            socks_count[sock] = 1\n    # Count number of moves.\n    for sock, num_socks in socks_count.items():\n        if num_socks % 2 == 0:\n            count += num_socks\n        else:\n            count += num_socks - 1\n            if len(socks_count) == 1:\n                print(\"impossible\")\n                return\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    socks = list(map(int, sys.stdin.readline().strip().split()))\n\n    count = 0\n    # Count number of socks for each type\n    socks_count = {}\n    for sock in socks:\n        socks_count[sock] = socks_count.get(sock, 0) + 1\n    # Count number of moves\n    for sock, num_socks in socks_count.items():\n        count += num_socks // 2\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n = int(input())\n    socks = [int(i) for i in input().split()]\n    socks.sort()\n\n    # If there are socks of the same type, try pairing them.\n    i = 0\n    while i < len(socks):\n        if socks[i] == socks[i + 1]:\n        else:\n            i += 1\n            socks.pop(i)\n            socks.pop(i)\n            n -= 1\n    \n    # If there are no socks left, we are done.\n    if len(socks) == 0:\n        return 0\n    \n    # If there are an odd number of socks left, there is no solution.\n    if len(socks) % 2 == 1:\n        return \"impossible\"\n\n    # Try to pair up the remaining socks.\n    moves = 0\n    while len(socks) > 0:\n        # If the top sock is a match for the bottom sock, pair them.\n        if socks[0] == socks[-1]:\n            socks.pop(0)\n            socks.pop(-1)\n            moves += 2\n            continue\n\n        # If the top sock is not a match for the bottom sock, try pairing it with the second from the bottom sock.\n        if socks[0] == socks[-2]:\n            socks.pop(0)\n            socks.pop(-2)\n            moves += 2\n            continue\n\n        # If the top sock is not a match for any other sock, there is no solution.\n        return \"impossible\"\n\n    return moves\n\nif __name__ == \"__main__\":\n    print(main())\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    socks = [int(x) for x in sys.stdin.readline().strip().split()]\n    socks = sorted(socks)\n    count = 0\n    for i in range(0, len(socks)-1, 2):\n        if socks[i] != socks[i + 1]:\n            count += 1\n    if count == 0:\n        print(len(socks)//2)\n    else:\n        print(\"impossible\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n = int(input())\n    socks = [int(i) for i in input().split()]\n    socks.sort()\n\n    # If there are socks of the same type, try pairing them first\n    for i in range(0, len(socks), 2):\n        if i+1 < len(socks) and socks[i] == socks[i+1]:\n            socks.pop(i)\n            socks.pop(i)\n            n -= 1\n    \n    # If there are no socks left, we are done.\n    if len(socks) == 0:\n        return n\n    \n    # If there are an odd number of socks left, there is no solution.\n    if len(socks) % 2 == 1:\n        return \"impossible\" + str(n)\n\n    # Try to pair up the remaining socks.\n    moves = 0\n    while len(socks) > 0:\n        # If the top sock is a match for the bottom sock, pair them.\n        if socks[0] == socks[-1]:\n            socks.pop(0)\n            socks.pop(-1)\n            moves += 2\n            continue\n\n        # If the top sock is not a match for the bottom sock, try pairing it with the second from the bottom sock.\n        if socks[0] == socks[-2]:\n            socks.pop(0)\n            socks.pop(-2)\n            moves += 2\n            continue\n\n        # If the top sock is not a match for any other sock, there is no solution.\n        return \"impossible\" + str(n)\n\n    return moves + n\n\nif __name__ == \"__main__\":\n    print(main())\n"]