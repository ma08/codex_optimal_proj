["import math\nmessage = input().strip()\nlength = len(message)\nrows = math.floor(math.sqrt(length))\ncolumns = math.ceil(math.sqrt(length))\n\nmatrix = []\nfor i in range(0, rows):\n    matrix.append([])\n    for j in range(0, columns):\n        matrix[i].append(\"0\")\nfor i in range(0, rows):\n    for j in range(0, columns):\n        if j + (i * columns) < length:\n            matrix[i][j] = message[j + (i * columns)]\noutput = \"\"\nfor j in range(0, columns):\n    for i in range(0, rows):\n        if matrix[i][j] != \"0\":\n            output += matrix[i][j]\nprint(output)\n", "\n# \nmessage = input()\n\nfor n in range(1, len(message) + 1):\n    if len(message) % n == 0:\n        r = n\n        c = int(len(message) / n)\n\nmatrix = [[0 for x in range(c)] for y in range(r)]\n\ncount = 0\nfor i in range(r):\n    for j in range(c):\n        matrix[i][j] = message[count]\n        count += 1\n\nfor i in range(c):\n    for j in range(r):\n        print(matrix[j][i], end=\"\")\n    print()\n", "import math\nmessage = input()\nlength = len(message)\nrows = math.sqrt(length)\ncolumns = math.sqrt(length)\n\nif rows.is_integer():\n    rows = int(rows)\n    columns = int(columns)\nelse:\n    rows = math.floor(rows)\n    columns = math.ceil(columns)\nmatrix = []\n\nfor i in range(0, rows):\n    matrix.append([])\n    for j in range(0, columns):\n        matrix[i].append(\"0\")\n\nfor i in range(0, rows):\n    for j in range(0, columns):\n        if j + (i * columns) < length:\n            matrix[i][j] = message[j + (i * columns)]\n\noutput = \"\"\n\nfor j in range(0, columns):\n    for i in range(0, rows):\n        if matrix[i][j] != \"0\":\n            output += matrix[i][j]\n\nprint(output)\n", "import math\n\ndef decrypt(message):\n    length = len(message)\n    max_rows = int(math.sqrt(length))\n    rows = max_rows\n    columns = max_rows\n    if rows * columns < length:\n        rows += 1\n\n    matrix = [['' for x in range(columns)] for y in range(rows)]\n    for i in range(rows):\n        for j in range(columns):\n            matrix[i][j] = message[i * columns + j]\n\n    decrypted = []\n    for j in range(columns):\n        for i in range(rows):\n            decrypted.append(matrix[i][j])\n\n    return ''.join(decrypted)\n\n\nmessages = input()\nprint(decrypt(messages))\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef decrypt(message):\n    message_len = len(message)\n    rows = 1\n    while rows * rows < message_len:\n        rows += 1\n    columns = message_len // rows\n    if rows * columns < message_len:\n        columns += 1\n    matrix = [[' '] * columns for _ in range(rows)]\n    for i in range(message_len):\n        matrix[i % rows][i // rows] = message[i]\n    return ''.join(c for row in matrix for c in row if c != ' ')\n\ndef main():\n    message = sys.stdin.readline().strip()\n    print(decrypt(message))\n\nif __name__ == '__main__':\n    main()\n", "\n\nmessage = input()\n\n# Get the length of the message\nlength = len(message)\n\n# Get the square root of the length of the message and round it up\nsqrt = math.ceil(length ** 0.5)\n\n# Set the number of rows and columns to the square root\nrows = columns = sqrt\n\n# If the number of rows times the number of columns is not equal to the length of the message,\n# increment the number of rows by 1 and decrement the number of columns by 1\n# until the number of rows times the number of columns is equal to the length of the message\nwhile rows * columns != length:\n    if rows * columns < length:\n        rows += 1\n    else:\n        columns -= 1\n\n# Create a matrix with the number of rows and columns\nmatrix = [[0 for x in range(columns)] for y in range(rows)]\n\n# Create a counter for the message\ncounter = 0\n\n# For each row and column in the matrix, place the character at the counter in the message\n# in the matrix and increment the counter by 1\nfor row in range(rows):\n    for column in range(columns):\n        matrix[row][column] = message[counter]\n        counter += 1\n\n# Create a new string\nnewString = \"\"\n\n# For each column in the matrix, for each row in the matrix, add the character\n# at the row and column in the matrix to the new string\nfor column in range(columns):\n    for row in range(rows):\n        newString += matrix[row][column]\n\n# Print the new string\nprint(newString)\n", "\n\ndef main():\n    message = input()\n    row = int(len(message) ** 0.5)\n    col = int(len(message) / row) + 1\n    for i in range(col):\n        print(message[i::col], end=\"\")\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport math \nmessage = input()\nlength = len(message)\nrows = math.sqrt(length)\n\ncolumns = math.sqrt(length)\n\nif rows.is_integer():\n    rows = int(rows)\n    columns = int(columns)\nelse:\n    rows = math.floor(rows)\n    columns = math.ceil(columns)\n\nmatrix = []\n\nfor i in range(0, rows):\n    matrix.append([])\n    for j in range(0, columns):\n        matrix[i].append(\"0\")\n\nfor i in range(0, rows):\n    for j in range(0, columns):\n        if j + (i * columns) < length:\n            matrix[i][j] = message[j + (i * columns)]\n\noutput = \"\"\n\nfor j in range(0, columns):\n    for i in range(0, rows):\n        if matrix[i][j] != \"0\":\n            output += matrix[i][j]\n\nprint(output)\n", "\n\ndef encrypt(message):\n    length = len(message)\n    max_rows = int(math.sqrt(length))\n    rows = max_rows\n    columns = max_rows\n    if rows * columns < length:\n        rows += 1\n\n    matrix = [['' for x in range(columns)] for y in range(rows)]\n    for i in range(rows):\n        for j in range(columns):\n            matrix[i][j] = message[i * columns + j]\n\n    encrypted = []\n    for j in range(columns):\n        for i in range(rows):\n            encrypted.append(matrix[i][j])\n\n    return ''.join(decrypted)\n\n\nmessage = input()\nprint(encrypt(message))\n", "message = input()\n\nfor n in range(1, len(message) + 1):\n    if len(message) % n == 0:\n        r = n\n        c = int(len(message) / n)\nmatrix = [[0 for x in range(c)] for y in range(r)]\ncount = 0\nfor i in range(r):\n    for j in range(c):\n        matrix[i][j] = message[count]\n        count += 1\nfor i in range(c):\n    for j in range(r):\n        print(matrix[j][i], end=\"\")\n    print()\n", "\n\n#-----main-----#\n\ns = input()\n\n#najdi nejveci ctvercovy podretezec\nmax_ctv = int(len(s)**0.5) + 1\n\n#vypis v ctvercich zleva do prava\nfor i in range(max_ctv,0,-1):\n    if len(s) % i == 0:\n        for j in range(0,len(s),i):\n            print(s[j:j+i])\n        break\n", "\n\ndef main():\n    message = input()\n    row = int(len(message) ** 0.5)\n    c = int(len(message) / row)\n    for i in range(c):\n        print(message[i::c], end=\"\")\n\nif __name__ == \"__main__\":\n    main()\n", "message = input()\n\nfor n in range(1, len(message) + 1):\n    if len(message) % n == 0:\n        r = n\n        c = int(len(message) / n)\n\nmatrix = [[0 for x in range(c)] for y in range(r)]\n\ncount = 0\nfor i in range(r):\n    for j in range(c):\n        matrix[i][j] = message[count]\n        count += 1\n\nfor i in range(c):\n    for j in range(r):\n        print(matrix[j][i], end=\"\")\n    print()\n", "import math\n\ndef encrypt(message):\n    length = len(message)\n    sqrt_length = math.sqrt(length)\n    if sqrt_length == int(sqrt_length):\n        sqrt_length = int(sqrt_length)\n        return encrypt_square(message, sqrt_length)\n    else:\n        sqrt_length = int(sqrt_length)\n        return encrypt_rectangle(message, sqrt_length, sqrt_length+1)\n\ndef encrypt_square(message, sqrt):\n    matrix = [['' for i in range(sqrt)] for j in range(sqrt)]\n    for i in range(sqrt):\n        for j in range(sqrt):\n            matrix[i][j] = message[i*sqrt + j]\n    return ''.join([row[i] for i in range(sqrt) for row in matrix])\n\ndef encrypt_rectangle(message, rows, cols):\n    matrix = [['' for i in range(cols)] for j in range(rows)]\n    for i in range(rows):\n        for j in range(cols):\n            matrix[i][j] = message[i*cols + j]\n    return ''.join([row[i] for i in range(cols) for row in matrix])\n\n\nmessage = input()\nprint(encrypt(message))\n", "import math\n\n\ndef decrypt(message):\n    length = len(message)\n    max_rows = int(math.sqrt(length))\n    rows = max_rows\n    columns = max_rows\n    if rows * columns < length:\n        rows += 1\n\n    matrix = [['' for x in range(columns)] for y in range(rows)]\n    for i in range(rows):\n        for j in range(columns):\n            matrix[i][j] = message[i * columns + j]\n\n    decrypted = []\n    for j in range(columns):\n        for i in range(rows):\n            decrypted.append(matrix[i][j])\n\n    return ''.join(decrypted).strip()\n\n\nmessages = input()\nprint(decrypt(messages))\n", "\n#-----main-----\n\ns = input()\n\n#najdi nejvetsi ctverec\nmax_ctv = int(len(s)**0.5) + 1\n\n#vypis v ctvercich zprava doleva\nfor i in range(max_ctv,0,-1):\n    if len(s) % i == 0:\n        #vypis zprava doleva\n        for j in range(0,len(s),i):\n            print(s[j:j+i])\n        break\n", "\nimport math\n\nmessage = input()\n\nlength = len(message)\n\nrows = math.sqrt(length)\n\ncolumns = math.sqrt(length)\n\nif rows.is_integer():\n    rows = int(rows)\n    columns = int(columns)\nelse:\n    rows = math.floor(rows)\n    columns = math.ceil(columns)\n\nmatrix = []\n\nfor i in range(0, rows):\n    matrix.append([])\n    for j in range(0, columns):\n        matrix[i].append(\"0\")\n\nfor i in range(0, rows):\n    for j in range(0, columns):\n        if j + (i * columns) < length:\n            matrix[i][j] = message[j + (i * columns)]\n\noutput = \"\"\n\nfor j in range(0, columns):\n    for i in range(0, rows):\n        if matrix[i][j] != \"0\":\n            output += matrix[i][j]\n\nprint(output)\n", "\nimport math\n\ndef encrypt(message):\n    length = len(message)\n    sqrt = math.sqrt(length)\n    if sqrt == int(sqrt):\n        sqrt = int(sqrt)\n        return encrypt_square(message, sqrt)\n    else:\n        sqrt = int(sqrt)\n        return encrypt_rectangle(message, sqrt, sqrt + 1)\n\ndef encrypt_square(message, sqrt):\n    matrix = [['' for i in range(sqrt)] for j in range(sqrt)]\n    for i in range(sqrt):\n        for j in range(sqrt):\n            matrix[i][j] = message[i * sqrt + j]\n    return ''.join([row[i] for i in range(sqrt) for row in matrix])\n\ndef encrypt_rectangle(message, rows, cols):\n    matrix = [['' for i in range(cols)] for j in range(rows)]\n    for i in range(rows):\n        for j in range(cols):\n            matrix[i][j] = message[i * cols + j]\n    return ''.join([row[i] for i in range(cols) for row in matrix])\n\n\nmessage = input()\nprint(encrypt(message))\n", "\nimport sys\n\ndef decrypt(message):\n    message_len = len(message)\n    rows = 1\n    while rows * rows < message_len:\n        rows += 1\n    columns = message_len // rows\n    if rows * columns < message_len:\n        columns += 1\n    matrix = [[' '] * columns for _ in range(rows)] \n    for i in range(message_len):\n        matrix[i % rows][i // rows] = message[i]\n    return ''.join(c for row in matrix for c in row if c != ' ')\n\ndef main():\n    message = sys.stdin.readline().strip()\n    print(decrypt(message))\n\nif __name__ == '__main__':\n    main()\n", "\n#-----main-----\ns = input()\n\n#najdi nejvetsi ctverec\nmax_ctv = int(len(s)**0.5) + 1\n#vypis v ctvercich zprava doleva\nfor i in range(max_ctv,0,-1):\n    if len(s) % i == 0:\n        #vypis zprava doleva\n        for j in range(0,len(s),i):\n            print(s[j:j+i])\n        break\n", "\nimport sys\n\ndef decrypt(message):\n    message_len = len(message)\n    rows = 1\n    while rows * rows < message_len:\n        rows += 1\n    columns = message_len // rows\n    if rows * columns < message_len:\n        columns += 1\n    matrix = [[' '] * columns for _ in range(rows)]\n    for i in range(message_len):\n        matrix[i % rows][i // rows] = message[i]\n    return ''.join(c for row in matrix for c in row if c != ' ')\n\ndef main():\n    message = sys.stdin.readline().strip()\n    print(decrypt(message))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef decrypt(message):\n    message_len = len(message)\n    rows = 1\n    while rows * rows < message_len:\n        rows += 1\n    columns = message_len // rows\n    if rows * columns < message_len:\n        columns += 1\n    matrix = [[' '] * columns for _ in range(rows)]\n    for i in range(message_len):\n        matrix[i % rows][i // rows] = message[i]\n    return ''.join(c for row in matrix for c in row if c != ' ')\n\ndef main():\n    message = sys.stdin.readline().strip() \n    print(decrypt(message))\n\nif __name__ == '__main__':\n    main()\n", "\n\nmessage = input(\"Enter a message: \")\n\n# Get the length of the message\nlength = len(message)\n\n# Get the square root of the length of the message\nsqrt = int(length ** 0.5)\n\n# Get the number of rows and columns\nrows = sqrt\ncolumns = sqrt\n\n# If the number of rows times the number of columns is not equal to the length of the message,\n# increment the number of rows by 1 and decrement the number of columns by 1\n# until the number of rows times the number of columns is equal to the length of the message\nif rows * columns < length:\n    rows += 1\n    if rows * columns < length:\n        columns += 1\n\n# Create a matrix with the number of rows and columns\nmatrix = [[0 for x in range(columns)] for y in range(rows)]\n\n# Create a counter for the message\ncounter = 0\n\n# For each row and column in the matrix, place the character at the counter in the message\n# in the matrix and increment the counter by 1\nfor row in range(rows):\n    for column in range(columns):\n        matrix[row][column] = message[counter]\n        counter += 1\n\n# Create a new string\nnewString = \"\"\n\n# For each column in the matrix, for each row in the matrix, add the character\n# at the row and column in the matrix to the new string\nfor column in range(columns):\n    for row in range(rows):\n        if matrix[row][column] != 0:\n            newString += matrix[row][column]\n\n# Print the new string\nprint(newString)\n"]