["\n\n# TODO: solve this problem\n\nn = int(input())\nlanguages = [int(x) for x in input().split()]\n\n# check for duplicate languages\n\nfor i in range(len(languages)):\n    for j in range(i + 1, len(languages)):\n        if languages[i] == languages[j]:\n            # find the distance between i and j\n            distance = abs(i - j)\n            print(distance)\n", "\n\ndef main():\n    n = int(input())\n    langs = [int(i) for i in input().split()]  # O(n)\n    seen = dict()\n    min_dist = n\n    for i, lang in enumerate(langs):  # O(n)\n        if lang in seen:\n            min_dist = min(min_dist, i - seen[lang])\n        seen[lang] = i\n    print(min_dist)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n\n    # All guests are speaking different languages, so the awkwardness level is n\n    if len(set(languages)) == n:\n        print(n)\n        return\n\n    # Sort the languages, and find the position of the first language in the sorted list\n    languages_sorted = sorted(languages)\n    first_language = languages_sorted[0]\n\n    # Find the positions of the first and last occurrence of the first and second language\n    first_language_first_position = languages.index(first_language)\n    first_language_last_position = n - 1 - languages[::-1].index(first_language)\n\n    second_language = languages_sorted[1]\n    second_language_first_position = languages.index(second_language)\n    second_language_last_position = n - 1 - languages[::-1].index(second_language)\n\n    # Find the awkwardness level\n    if first_language_first_position < second_language_first_position:\n        # The first and second language are not adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1\n    else:\n        # The first and second language are adjacent\n        awkwardness_level = min(first_language_last_position - second_language_first_position, second_language_last_position - first_language_first_position) - 1 + 1\n\n    print(awkwardness_level)\n\nif __name__ == '__main__':\n    main()\n", "\n\"\"\"\nWe need to find the minimum distance between two people who speak the same language. This can be done by keeping track of the last positions of each language. We keep track of the last position of each language, and the distance between the current position and the last position of each language. The minimum distance is the minimum of these distances.\n\"\"\"\nn = int(input())\nlanguages = list(map(int, input().split()))\nlast_position = {}\nmin_distance = n\n\nfor i in range(n):\n    if languages[i] in last_position:\n        min_distance = min(min_distance, i - last_position[languages[i]])\n    last_position[languages[i]] = i\nprint(min_distance)\n", "\n#\n\"\"\"\nWe need to find the minimum distance between two people who speak the same language.\n\nThis can be done by keeping track of the last positions of each language.\n\nWe keep track of the last position of each language, and the distance between the current position and the last position of each language.\n\nThe minimum distance is the minimum of these distances.\n\"\"\"\nn = int(input())\nlanguages = list(map(int, input().split()))\nlast_position = {}\nmin_distance = n\n\nfor i in range(n):\n    if languages[i] in last_position:\n        min_distance = min(min_distance, i - last_position[languages[i]])\n    last_position[languages[i]] = i\nprint(min_distance)\n", "\nprint(\"hello world\")\n", "\n\ndef main():\n    n = int(input())\n    langs = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        if langs[i] not in d:\n            d[langs[i]] = [i]\n        else:\n            d[langs[i]].append(i)\n    min_dist = n+1\n    for key in d:\n        l = d[key]\n        for i in range(len(l)-1):\n            min_dist = min(min_dist, l[i+1]-l[i])\n    print(min_dist if min_dist != n+1 else -1)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    languages = list(map(int, sys.stdin.readline().split()))\n\n    # Calculate the maximum distance between the same languages\n    max_distance = 0\n    language_dict = {}\n    for i in range(n):\n        language = languages[i]\n        if language in language_dict:\n            distance = i - language_dict[language]\n            if distance > max_distance:\n                max_distance = distance\n        language_dict[language] = i\n\n    print(max_distance)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n = int(input())\n    langs = list(map(int, input().split()))[:n]\n    d = {}\n    for i in range(n):\n        if langs[i] not in d:\n            d[langs[i]] = [i]\n        else:\n            d[langs[i]].append(i)\n    min_dist = n\n    for key in d:\n        l = d[key]\n        for i in range(len(l)-1):\n            min_dist = min(min_dist, l[i+1]-l[i])\n    print(min_dist)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    languages = list(map(int, sys.stdin.readline().split()))\n\n    # Calculate the maximum distance between the same language\n    max_distance = 0\n    language_dict = {}\n    for i in range(n):\n        language = languages[i]\n        if language in language_dict:\n            distance = i - language_dict[language]\n            if distance > max_distance:\n                max_distance = distance\n        language_dict[language] = i\n\n    print(max_distance)\n\nif __name__ == '__main__':\n    main()\n", "\n# TODO: solve this problem\n\nn = int(input())\nlanguages = [int(x) for x in input().split()]\n\n# check for duplicate languages\n\nfor i in range(len(languages)):\n    for j in range(i + 1, len(languages)):\n        if languages[i] == languages[j]:\n            # find the distance between i and j\n            distance = abs(i - j)\n            print(distance)\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    langs = list(map(int, sys.stdin.readline().strip().split()))\n    seen = dict()\n    for i, lang in enumerate(langs):\n        if lang not in seen:\n            seen[lang] = [i]\n        else:\n            seen[lang].append(i)\n    min_lang_len = min([len(langs) for langs in seen.values()])\n    if min_lang_len == 1:\n        print(n)\n    else:\n        max_distance = 0\n        for langs_pos in seen.values():\n            if len(langs_pos) == 1:\n                continue\n            langs_pos.sort()\n            for i in range(1, len(langs_pos)):\n                distance = langs_pos[i] - langs_pos[i-1] - 1\n                max_distance = max(max_distance, distance)\n        print(max_distance)\n\nif __name__ == '__main__':\n    main()\n", "\n\n# TODO: solve this problem.\n\nn = int(input())\nlanguages = [int(x) for x in input().split()]\n\n# check for duplicate languages\n\nfor i in range(len(languages)):\n    for j in range(i + 1, len(languages)):\n        if languages[i] == languages[j]:\n            # find the distance between i and j\n            distance = abs(i - j)\n            print(distance, end=' ')\n", "\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n    awkwardness = n + 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            if languages[i] == languages[j]:\n                awkwardness = min(awkwardness, j - i)\n    print(awkwardness)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n    awkwardness = n + 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            if languages[i] == languages[j]:\n                awkwardness = min(awkwardness, j - i)\n    if awkwardness == n + 1:\n        print(-1)\n    else:\n        print(awkwardness)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n = int(input())\n\n    languages = list(map(int, input().split()))\n\n    last_position = {}\n\n    min_distance = n\n\n    for i in range(n):\n        if languages[i] in last_position:\n            min_distance = min(min_distance, i - last_position[languages[i]])\n        last_position[languages[i]] = i\n\n    print(min_distance)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n    awkwardness = n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if languages[i] == languages[j]:\n                awkwardness = min(awkwardness, j - i)\n    if awkwardness == n:\n        print(-1)\n    else:\n        print(awkwardness)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    languages = list(map(int, sys.stdin.readline().split()))\n\n    # Calculate the maximum distance between the same language\n    max_distance = 0\n    language_dict = {}\n    for i in range(n):\n        language = languages[i]\n        if language in language_dict:\n            distance = i - language_dict[language]\n            if distance > max_distance:\n                max_distance = distance\n        language_dict[language] = i\n\n    print(max_distance)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    langs = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        if langs[i] not in d:\n            d[langs[i]] = [i]\n        else:\n            d[langs[i]].append(i)\n    min_dist = n + 1\n    for key in d:\n        l = d[key]\n        for i in range(len(l) - 1):\n            min_dist = min(min_dist, l[i + 1] - l[i])\n    print(min_dist)\n\nif __name__ == '__main__':\n    main()\n", "\n\n# TODO: solve this problem\n\nn = int(input())\nlanguages = [int(x) for x in input().split()]\n\n# check for duplicate languages\n\nfor i in range(len(languages)):\n    for j in range(i + 1, len(languages)):\n        if languages[i] == languages[j]:\n            # find the distance between i and j\n            distance = abs(i - j) + 1\n            print(distance, end=' ')\n", "\n\ndef main():\n    n = int(input())\n    langs = [int(i) for i in input().split()]\n    seen = dict()\n    min_dist = n\n    for i, lang in enumerate(langs):\n        if lang in seen:\n            min_dist = min(min_dist, i - seen[lang])\n        seen[lang] = i\n    print(min_dist)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    n = int(input())\n    languages = list(map(int, input().split()))\n\n    # All guests are speaking different languages, so the awkwardness level is n\n    if len(set(languages)) == n:\n        print(n)\n        return\n\n    # Sort the languages, and find the position of the first language in the sorted list\n    languages_sorted = sorted(languages)\n    first_language = languages_sorted[0]\n\n    # Find the positions of the first and last occurrence of the first language\n    first_language_positions = [i for i, x in enumerate(languages) if x == first_language]\n    first_language_first_position = first_language_positions[0]\n    first_language_last_position = first_language_positions[-1]\n\n    # Find the positions of the first and last occurrence of the second language\n    second_language = languages_sorted[1]\n    second_language_positions = [i for i, x in enumerate(languages) if x == second_language]\n    second_language_first_position = second_language_positions[0]\n    second_language_last_position = second_language_positions[-1]\n\n    # Find the awkwardness level.\n    if first_language_first_position < second_language_first_position:\n        # The first and second language are not adjacent.\n        awkwardness_level = min(first_language_last_position - second_language_first_position,\n                                second_language_last_position - first_language_first_position) - 1\n    else:\n        # The first and second language are adjacent.\n        awkwardness_level = min(first_language_last_position - second_language_first_position,\n                                second_language_last_position - first_language_first_position) - 1 + 1\n\n    print(awkwardness_level)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    langs = [int(i) for i in input().split()]\n    seen = {}\n    min_dist = n\n    for i, lang in enumerate(langs):\n        if lang in seen:\n            min_dist = min(min_dist, i - seen[lang])\n        seen[lang] = i\n    print(min_dist)\n\nif __name__ == \"__main__\":\n    main()\n"]