2022-04-11 20:47:44.350332 num operations 2
2022-04-11 20:47:44.350393 size on input set 1
2022-04-11 20:47:49.507460 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    if n == 2:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        for i in range(1, (n // 2) + 1):\n            print(2 * i, end=\" \")\n        for i in range(1, (n // 2) + 1):\n            print(2 * i - 1, end=\" \")\n        print()\n"
    },
    {
      "index": 1,
      "text": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    print(\"YES\")\n    for i in range(1, (n // 2) + 1):\n        print(2 * i, end=\" \")\n    for i in range(1, (n // 2) + 1):\n        print(2 * i - 1, end=\" \")\n    print()\n"
    }
  ],
  "created": 1649724464,
  "object": "edit"
}
2022-04-11 20:47:49.507763 fix spelling mistakes 2 ['\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    if n == 2:\n        print("NO")\n    else:\n        print("YES")\n        for i in range(1, (n // 2) + 1):\n            print(2 * i, end=" ")\n        for i in range(1, (n // 2) + 1):\n            print(2 * i - 1, end=" ")\n        print()\n', 't = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    print("YES")\n    for i in range(1, (n // 2) + 1):\n        print(2 * i, end=" ")\n    for i in range(1, (n // 2) + 1):\n        print(2 * i - 1, end=" ")\n    print()\n']
2022-04-11 20:47:49.507798 size on output set 2
2022-04-11 20:47:49.507807 size on input set 2
2022-04-11 20:48:22.788567 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    if n == 2:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        for i in range(1, n + 1):\n            if i % 2 == 0:\n                print(i, end=\" \")\n        for i in range(1, n + 1):\n            if i % 2 != 0:\n                print(i, end=\" \")\n        print()\n"
    },
    {
      "index": 1,
      "text": "def get_factors(n):\n    factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\ndef get_sum_of_factors(n):\n    factors = get_factors(n)\n    return sum(factors)\n\n\ndef is_perfect_number(n):\n    return n == get_sum_of_factors(n)\n\n\ndef get_perfect_numbers(n):\n    perfect_numbers = []\n    for i in range(1, n + 1):\n        if is_perfect_number(i):\n            perfect_numbers.append(i)\n    return perfect_numbers\n\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef get_prime_numbers(n):\n    primes = []\n    for i in range(1, n + 1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\n\ndef get_prime_factors(n):\n    factors = get_factors(n)\n    primes = get_prime_numbers(n)\n    prime_factors = []\n    for i in factors:\n        if i in primes:\n            prime_factors.append(i)\n    return prime_factors\n\n\ndef get_prime_factorization(n):\n    prime_factors = get_prime_factors(n)\n    prime_factorization = []\n    for i in prime_factors:\n        if n % i == 0:\n            prime_factorization.append(i)\n    return prime_factorization\n\n\ndef get_prime_factorization_with_powers(n):\n    prime_factorization = get_prime_factorization(n)\n    prime_factorization_with_powers = {}\n    for i in prime_factorization:\n        if i in prime_factorization_with_powers:\n            prime_factorization_with_powers[i] += 1\n        else:\n            prime_factorization_with_powers[i] = 1\n    return prime_factorization_with_powers\n\n\ndef get_prime_factorization_with_powers_in_list(n):\n    prime_factorization_with_powers = get_prime_factorization_with_powers(n)\n    prime_factorization_with_powers_in_list = []\n    for i in prime_factorization_with_powers:\n        prime_factorization_with_powers_in_list.append(\n            [i, prime_factorization_with_powers[i]])\n    return prime_factorization_with_powers_in_list\n\n\ndef get_prime_factorization_with_powers_in_list_with_multiplicity(n):\n    prime_factorization_with_powers_in_list = get_prime_factorization_with_powers_in_list(\n        n)\n    prime_factorization_with_powers_in_list_with_multiplicity = []\n    for i in prime_factorization_with_powers_in_list:\n        for j in range(i[1]):\n            prime_factorization_with_powers_in_list_with_multiplicity.append(\n                i[0])\n    return prime_factorization_with_powers_in_list_with_multiplicity\n\n\ndef get_prime_factorization_with_powers_in_list_with_multiplicity_in_string(n):\n    prime_factorization_with_powers_in_list_with_multiplicity = get_prime_factorization_with_powers_in_list_with_multiplicity(\n        n)\n    prime_factorization_with_powers_in_list_with_multiplicity_in_string = \"\"\n    for i in prime_factorization_with_powers_in_list_with_multiplicity:\n        prime_factorization_with_powers_in_list_with_multiplicity_in_string += str(\n            i)\n    return prime_factorization_with_powers_in_list_with_multiplicity_in_string\n\n\ndef get_prime_factorization_in_string(n):\n    prime_factorization = get_prime_factorization(n)\n    prime_factorization_in_string = \"\"\n    for i in prime_factorization:\n        prime_factorization_in_string += str(i)\n    return prime_factorization_in_string\n\n\ndef get_prime_factorization_with_powers_in_string(n):\n    prime_factorization_with_powers = get_prime_factorization_with_powers(n)\n    prime_factorization_with_powers_in_string = \"\"\n    for i in prime_factorization_with_powers:\n        prime_factorization_with_powers_in_string += str(i) + \"^\" + str(\n            prime_factorization_with_powers[i]) + \" \"\n    return prime_factorization_with_powers_in_string\n\n\ndef get_prime_factorization_with_powers_in_list_in_string(n):\n    prime_factorization_with_powers_in_list = get_prime_factorization_with_powers_in_list(\n        n)\n    prime_factorization_with_powers_in_list_in_string = \"\"\n    for i in prime_factorization_with_powers_in_list:\n        prime_factorization_with_powers_in_list_in_string += str(\n            i[0]) + \"^\" + str(i[1]) + \" \"\n    return prime_factorization_with_powers_in_list_in_string\n\n\ndef get_prime_factorization_with_powers_in_list_with_multiplicity_in_string(n):\n    prime_factorization_with_powers_in_list_with_multiplicity = get_prime_factorization_with_powers_in_list_with_multiplicity(\n        n)\n    prime_factorization_with_powers_in_list_with_multiplicity_in_string = \"\"\n    for i in prime_factorization_with_powers_in_list_with_multiplicity:\n        prime_factorization_with_powers_in_list_with_multiplicity_in_string += str(\n            i) + \" \"\n    return prime_factorization_with_powers_in_list_with_multiplicity_in_string\n"
    }
  ],
  "created": 1649724469,
  "object": "edit"
}
2022-04-11 20:48:22.788929 fix syntax errors 2 ['t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    if n == 2:\n        print("NO")\n    else:\n        print("YES")\n        for i in range(1, n + 1):\n            if i % 2 == 0:\n                print(i, end=" ")\n        for i in range(1, n + 1):\n            if i % 2 != 0:\n                print(i, end=" ")\n        print()\n', 'def get_factors(n):\n    factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\ndef get_sum_of_factors(n):\n    factors = get_factors(n)\n    return sum(factors)\n\n\ndef is_perfect_number(n):\n    return n == get_sum_of_factors(n)\n\n\ndef get_perfect_numbers(n):\n    perfect_numbers = []\n    for i in range(1, n + 1):\n        if is_perfect_number(i):\n            perfect_numbers.append(i)\n    return perfect_numbers\n\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef get_prime_numbers(n):\n    primes = []\n    for i in range(1, n + 1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\n\ndef get_prime_factors(n):\n    factors = get_factors(n)\n    primes = get_prime_numbers(n)\n    prime_factors = []\n    for i in factors:\n        if i in primes:\n            prime_factors.append(i)\n    return prime_factors\n\n\ndef get_prime_factorization(n):\n    prime_factors = get_prime_factors(n)\n    prime_factorization = []\n    for i in prime_factors:\n        if n % i == 0:\n            prime_factorization.append(i)\n    return prime_factorization\n\n\ndef get_prime_factorization_with_powers(n):\n    prime_factorization = get_prime_factorization(n)\n    prime_factorization_with_powers = {}\n    for i in prime_factorization:\n        if i in prime_factorization_with_powers:\n            prime_factorization_with_powers[i] += 1\n        else:\n            prime_factorization_with_powers[i] = 1\n    return prime_factorization_with_powers\n\n\ndef get_prime_factorization_with_powers_in_list(n):\n    prime_factorization_with_powers = get_prime_factorization_with_powers(n)\n    prime_factorization_with_powers_in_list = []\n    for i in prime_factorization_with_powers:\n        prime_factorization_with_powers_in_list.append(\n            [i, prime_factorization_with_powers[i]])\n    return prime_factorization_with_powers_in_list\n\n\ndef get_prime_factorization_with_powers_in_list_with_multiplicity(n):\n    prime_factorization_with_powers_in_list = get_prime_factorization_with_powers_in_list(\n        n)\n    prime_factorization_with_powers_in_list_with_multiplicity = []\n    for i in prime_factorization_with_powers_in_list:\n        for j in range(i[1]):\n            prime_factorization_with_powers_in_list_with_multiplicity.append(\n                i[0])\n    return prime_factorization_with_powers_in_list_with_multiplicity\n\n\ndef get_prime_factorization_with_powers_in_list_with_multiplicity_in_string(n):\n    prime_factorization_with_powers_in_list_with_multiplicity = get_prime_factorization_with_powers_in_list_with_multiplicity(\n        n)\n    prime_factorization_with_powers_in_list_with_multiplicity_in_string = ""\n    for i in prime_factorization_with_powers_in_list_with_multiplicity:\n        prime_factorization_with_powers_in_list_with_multiplicity_in_string += str(\n            i)\n    return prime_factorization_with_powers_in_list_with_multiplicity_in_string\n\n\ndef get_prime_factorization_in_string(n):\n    prime_factorization = get_prime_factorization(n)\n    prime_factorization_in_string = ""\n    for i in prime_factorization:\n        prime_factorization_in_string += str(i)\n    return prime_factorization_in_string\n\n\ndef get_prime_factorization_with_powers_in_string(n):\n    prime_factorization_with_powers = get_prime_factorization_with_powers(n)\n    prime_factorization_with_powers_in_string = ""\n    for i in prime_factorization_with_powers:\n        prime_factorization_with_powers_in_string += str(i) + "^" + str(\n            prime_factorization_with_powers[i]) + " "\n    return prime_factorization_with_powers_in_string\n\n\ndef get_prime_factorization_with_powers_in_list_in_string(n):\n    prime_factorization_with_powers_in_list = get_prime_factorization_with_powers_in_list(\n        n)\n    prime_factorization_with_powers_in_list_in_string = ""\n    for i in prime_factorization_with_powers_in_list:\n        prime_factorization_with_powers_in_list_in_string += str(\n            i[0]) + "^" + str(i[1]) + " "\n    return prime_factorization_with_powers_in_list_in_string\n\n\ndef get_prime_factorization_with_powers_in_list_with_multiplicity_in_string(n):\n    prime_factorization_with_powers_in_list_with_multiplicity = get_prime_factorization_with_powers_in_list_with_multiplicity(\n        n)\n    prime_factorization_with_powers_in_list_with_multiplicity_in_string = ""\n    for i in prime_factorization_with_powers_in_list_with_multiplicity:\n        prime_factorization_with_powers_in_list_with_multiplicity_in_string += str(\n            i) + " "\n    return prime_factorization_with_powers_in_list_with_multiplicity_in_string\n']
2022-04-11 20:48:28.748516 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "def main():\n    t = int(input())\n\n    for _ in range(t):\n        n = int(input())\n        print(\"YES\")\n        for i in range(1, (n // 2) + 1):\n            print(2 * i, end=\" \")\n        for i in range(1, (n // 2) + 1):\n            print(2 * i - 1, end=\" \")\n        print()\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    t = int(input())\n\n    for _ in range(t):\n        n = int(input())\n        print(\"YES\")\n        for i in range(1, (n // 2) + 1):\n            print(2 * i, end=\" \")\n        for i in range(1, (n // 2) + 1):\n            print(2 * i - 1, end=\" \")\n        print()\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649724502,
  "object": "edit"
}
2022-04-11 20:48:28.748735 fix syntax errors 2 ['def main():\n    t = int(input())\n\n    for _ in range(t):\n        n = int(input())\n        print("YES")\n        for i in range(1, (n // 2) + 1):\n            print(2 * i, end=" ")\n        for i in range(1, (n // 2) + 1):\n            print(2 * i - 1, end=" ")\n        print()\n\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    t = int(input())\n\n    for _ in range(t):\n        n = int(input())\n        print("YES")\n        for i in range(1, (n // 2) + 1):\n            print(2 * i, end=" ")\n        for i in range(1, (n // 2) + 1):\n            print(2 * i - 1, end=" ")\n        print()\n\nif __name__ == "__main__":\n    main()\n']
2022-04-11 20:48:28.748766 size on output set 4
2022-04-11 20:48:28.748797 num operations 2
2022-04-11 20:48:28.748802 size on input set 1
2022-04-11 20:48:30.968414 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# SOLUTION\n\n#!/usr/bin/env python\n\nfrom sys import stdin, stdout\n\ndef main():\n    t = int(stdin.readline())\n    for i in range(t):\n        n = int(stdin.readline())\n        if n == 2:\n            print('YES')\n            print('1 2')\n        elif n == 4:\n            print('YES')\n            print('2 4 1 3')\n        else:\n            print('YES')\n            print(*(list(range(2, n, 2)) + list(range(1, n, 2))))\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\n# SOLUTION\n\n#!/usr/bin/env python\n\nfrom sys import stdin, stdout\n\ndef main():\n    t = int(stdin.readline())\n    for i in range(t):\n        n = int(stdin.readline())\n        if n == 2:\n            print('YES')\n            print('1 2')\n        elif n == 4:\n            print('YES')\n            print('2 4 1 3')\n        else:\n            print('YES')\n            print(*(list(range(2, n, 2)) + list(range(1, n, 2))))\n\nmain()\n"
    }
  ],
  "created": 1649724508,
  "object": "edit"
}
2022-04-11 20:48:30.969164 fix spelling mistakes 2 ["\n\n# SOLUTION\n\n#!/usr/bin/env python\n\nfrom sys import stdin, stdout\n\ndef main():\n    t = int(stdin.readline())\n    for i in range(t):\n        n = int(stdin.readline())\n        if n == 2:\n            print('YES')\n            print('1 2')\n        elif n == 4:\n            print('YES')\n            print('2 4 1 3')\n        else:\n            print('YES')\n            print(*(list(range(2, n, 2)) + list(range(1, n, 2))))\n\nmain()\n", "\n\n# SOLUTION\n\n#!/usr/bin/env python\n\nfrom sys import stdin, stdout\n\ndef main():\n    t = int(stdin.readline())\n    for i in range(t):\n        n = int(stdin.readline())\n        if n == 2:\n            print('YES')\n            print('1 2')\n        elif n == 4:\n            print('YES')\n            print('2 4 1 3')\n        else:\n            print('YES')\n            print(*(list(range(2, n, 2)) + list(range(1, n, 2))))\n\nmain()\n"]
2022-04-11 20:48:30.969370 size on output set 1
2022-04-11 20:48:30.969382 size on input set 1
2022-04-11 20:48:33.968509 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# SOLUTION\n#!/usr/bin/env python\nfrom sys import stdin, stdout\ndef main():\n    t = int(stdin.readline())\n    for i in range(t):\n        n = int(stdin.readline())\n        if n == 2:\n            print('YES')\n            print('1 2')\n        elif n == 4:\n            print('YES')\n            print('2 4 1 3')\n        else:\n            print('YES')\n            print(*(list(range(2, n, 2)) + list(range(1, n, 2))))\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n# SOLUTION\n\n#!/usr/bin/env python\n\nfrom sys import stdin, stdout\n\ndef main():\n    t = int(stdin.readline())\n    for i in range(t):\n        n = int(stdin.readline())\n        if n == 2:\n            print('YES')\n            print('1 2')\n        elif n == 4:\n            print('YES')\n            print('2 4 1 3')\n        else:\n            print('YES')\n            print(*(list(range(2, n, 2)) + list(range(1, n, 2))), sep=' ')\n\nmain()\n"
    }
  ],
  "created": 1649724511,
  "object": "edit"
}
2022-04-11 20:48:33.968820 fix syntax errors 2 ["\n# SOLUTION\n#!/usr/bin/env python\nfrom sys import stdin, stdout\ndef main():\n    t = int(stdin.readline())\n    for i in range(t):\n        n = int(stdin.readline())\n        if n == 2:\n            print('YES')\n            print('1 2')\n        elif n == 4:\n            print('YES')\n            print('2 4 1 3')\n        else:\n            print('YES')\n            print(*(list(range(2, n, 2)) + list(range(1, n, 2))))\nmain()\n", "\n# SOLUTION\n\n#!/usr/bin/env python\n\nfrom sys import stdin, stdout\n\ndef main():\n    t = int(stdin.readline())\n    for i in range(t):\n        n = int(stdin.readline())\n        if n == 2:\n            print('YES')\n            print('1 2')\n        elif n == 4:\n            print('YES')\n            print('2 4 1 3')\n        else:\n            print('YES')\n            print(*(list(range(2, n, 2)) + list(range(1, n, 2))), sep=' ')\n\nmain()\n"]
2022-04-11 20:48:33.968859 size on output set 2
