2022-04-11 21:48:31.915949 num operations 2
2022-04-11 21:48:31.916006 size on input set 1
2022-04-11 21:48:44.074727 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport math\n\nclass Points(object):\n    def __init__(self, x, y, z, w):\n        self.x = x\n        self.y = y\n        self.w = w\n        self.z = z\n\n    def __sub__(self, other):\n        return Points(self.x - other.x, self.y - other.y, self.z - other.z, self.w - other.w)\n\n    def dot(self, other):\n        return self.x * other.x + self.y * other.y + self.z * other.z + self.w * other.w\n\n    def cross(self, other):\n        return Points(self.y * other.z - self.z * other.y, self.z * other.x - self.x * other.z, self.x * other.y - self.y * other.x)\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2 + self.w ** 2), 0.5)\n\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(5):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n        points.append(a)\n\n    a, b, c, d, e = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3]), Points(*points[4])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c).cross(e - d)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n"
    },
    {
      "index": 1,
      "text": "# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points(self.x - no.x, self.y - no.y, self.z - no.z)\n\n    def dot(self, no):\n        return self.x * no.x + self.y * no.y + self.z * no.z\n\n    def cross(self, no):\n        return Points(self.y * no.z - self.z * no.y, self.z * no.x - self.x * no.z, self.x * no.y - self.y * no.x)\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n"
    }
  ],
  "created": 1649728112,
  "object": "edit"
}
2022-04-11 21:48:44.075161 fix spelling mistakes 2 ['# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport math\n\nclass Points(object):\n    def __init__(self, x, y, z, w):\n        self.x = x\n        self.y = y\n        self.w = w\n        self.z = z\n\n    def __sub__(self, other):\n        return Points(self.x - other.x, self.y - other.y, self.z - other.z, self.w - other.w)\n\n    def dot(self, other):\n        return self.x * other.x + self.y * other.y + self.z * other.z + self.w * other.w\n\n    def cross(self, other):\n        return Points(self.y * other.z - self.z * other.y, self.z * other.x - self.x * other.z, self.x * other.y - self.y * other.x)\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2 + self.w ** 2), 0.5)\n\n\nif __name__ == \'__main__\':\n    points = list()\n    for i in range(5):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n        points.append(a)\n\n    a, b, c, d, e = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3]), Points(*points[4])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c).cross(e - d)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print("%.2f" % math.degrees(angle))\n', '# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points(self.x - no.x, self.y - no.y, self.z - no.z)\n\n    def dot(self, no):\n        return self.x * no.x + self.y * no.y + self.z * no.z\n\n    def cross(self, no):\n        return Points(self.y * no.z - self.z * no.y, self.z * no.x - self.x * no.z, self.x * no.y - self.y * no.x)\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\n\nif __name__ == \'__main__\':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print("%.2f" % math.degrees(angle))\n']
2022-04-11 21:48:44.075234 size on output set 2
2022-04-11 21:48:44.075243 size on input set 2
2022-04-11 21:48:46.277419 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport math\n\nclass Points(object):\n    def __init__(self, x, y, z, w):\n        self.x = x\n        self.y = y\n        self.w = w\n        self.z = z\n\n    def __sub__(self, other):\n        return Points(self.x - other.x, self.y - other.y, self.z - other.z, self.w - other.w)\n\n    def dot(self, other):\n        return self.x * other.x + self.y * other.y + self.z * other.z + self.w * other.w\n\n    def cross(self, other):\n        return Points(self.y * other.z - self.z * other.y, self.z * other.x - self.x * other.z, self.x * other.y - self.y * other.x)\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2 + self.w ** 2), 0.5)\n\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(5):\n        a = list(map(float, input().split()))\n\n        points.append(a)\n\n    a, b, c, d, e = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3]), Points(*points[4])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c).cross(e - d)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n"
    },
    {
      "index": 1,
      "text": "# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport math\n\nclass Points(object):\n    def __init__(self, x, y, z, w):\n        self.x = x\n        self.y = y\n        self.w = w\n        self.z = z\n\n    def __sub__(self, other):\n        return Points(self.x - other.x, self.y - other.y, self.z - other.z, self.w - other.w)\n\n    def dot(self, other):\n        return self.x * other.x + self.y * other.y + self.z * other.z + self.w * other.w\n\n    def cross(self, other):\n        return Points(self.y * other.z - self.z * other.y, self.z * other.x - self.x * other.z, self.x * other.y - self.y * other.x)\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2 + self.w ** 2), 0.5)\n\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(5):\n        a = list(map(float, input().split()))\n\n        points.append(a)\n\n    a, b, c, d, e = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3]), Points(*points[4])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c).cross(e - d)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n"
    }
  ],
  "created": 1649728124,
  "object": "edit"
}
2022-04-11 21:48:46.277734 fix syntax errors 2 ['# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport math\n\nclass Points(object):\n    def __init__(self, x, y, z, w):\n        self.x = x\n        self.y = y\n        self.w = w\n        self.z = z\n\n    def __sub__(self, other):\n        return Points(self.x - other.x, self.y - other.y, self.z - other.z, self.w - other.w)\n\n    def dot(self, other):\n        return self.x * other.x + self.y * other.y + self.z * other.z + self.w * other.w\n\n    def cross(self, other):\n        return Points(self.y * other.z - self.z * other.y, self.z * other.x - self.x * other.z, self.x * other.y - self.y * other.x)\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2 + self.w ** 2), 0.5)\n\n\nif __name__ == \'__main__\':\n    points = list()\n    for i in range(5):\n        a = list(map(float, input().split()))\n\n        points.append(a)\n\n    a, b, c, d, e = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3]), Points(*points[4])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c).cross(e - d)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print("%.2f" % math.degrees(angle))\n', '# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport math\n\nclass Points(object):\n    def __init__(self, x, y, z, w):\n        self.x = x\n        self.y = y\n        self.w = w\n        self.z = z\n\n    def __sub__(self, other):\n        return Points(self.x - other.x, self.y - other.y, self.z - other.z, self.w - other.w)\n\n    def dot(self, other):\n        return self.x * other.x + self.y * other.y + self.z * other.z + self.w * other.w\n\n    def cross(self, other):\n        return Points(self.y * other.z - self.z * other.y, self.z * other.x - self.x * other.z, self.x * other.y - self.y * other.x)\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2 + self.w ** 2), 0.5)\n\n\nif __name__ == \'__main__\':\n    points = list()\n    for i in range(5):\n        a = list(map(float, input().split()))\n\n        points.append(a)\n\n    a, b, c, d, e = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3]), Points(*points[4])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c).cross(e - d)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print("%.2f" % math.degrees(angle))\n']
2022-04-11 21:48:53.967248 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, other):\n        return Points(self.x - other.x, self.y - other.y, self.z - other.z)\n\n    def dot(self, other):\n        return self.x * other.x + self.y * other.y + self.z * other.z\n\n    def cross(self, other):\n        return Points(self.y * other.z - self.z * other.y, self.z * other.x - self.x * other.z, self.x * other.y - self.y * other.x)\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n"
    },
    {
      "index": 1,
      "text": "# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points(self.x - no.x, self.y - no.y, self.z - no.z)\n\n    def dot(self, no):\n        return self.x * no.x + self.y * no.y + self.z * no.z\n\n    def cross(self, no):\n        return Points(self.y * no.z - self.z * no.y,\n                      self.z * no.x - self.x * no.z,\n                      self.x * no.y - self.y * no.x)\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), \\\n                 Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n"
    }
  ],
  "created": 1649728126,
  "object": "edit"
}
2022-04-11 21:48:53.967719 fix syntax errors 2 ['import math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, other):\n        return Points(self.x - other.x, self.y - other.y, self.z - other.z)\n\n    def dot(self, other):\n        return self.x * other.x + self.y * other.y + self.z * other.z\n\n    def cross(self, other):\n        return Points(self.y * other.z - self.z * other.y, self.z * other.x - self.x * other.z, self.x * other.y - self.y * other.x)\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\n\nif __name__ == \'__main__\':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print("%.2f" % math.degrees(angle))\n', '# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nimport math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, no):\n        return Points(self.x - no.x, self.y - no.y, self.z - no.z)\n\n    def dot(self, no):\n        return self.x * no.x + self.y * no.y + self.z * no.z\n\n    def cross(self, no):\n        return Points(self.y * no.z - self.z * no.y,\n                      self.z * no.x - self.x * no.z,\n                      self.x * no.y - self.y * no.x)\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\n\nif __name__ == \'__main__\':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), \\\n                 Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print("%.2f" % math.degrees(angle))\n']
2022-04-11 21:48:53.967789 size on output set 3
2022-04-11 21:48:53.967832 num operations 2
2022-04-11 21:48:53.967844 size on input set 1
2022-04-11 21:49:02.104674 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nimport math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, other):\n        return Points((self.x - other.x), (self.y - other.y), (self.z - other.z))\n\n    def dot(self, other):\n        return (self.x * other.x) + (self.y * other.y) + (self.z * other.z)\n\n    def cross(self, other):\n        return Points((self.y * other.z - self.z * other.y), (self.z * other.x - self.x * other.z), (self.x * other.y - self.y * other.x))\n        \n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n"
    },
    {
      "index": 1,
      "text": "\nimport math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, other):\n        return Points((self.x - other.x), (self.y - other.y), (self.z - other.z))\n\n    def dot(self, other):\n        return (self.x * other.x) + (self.y * other.y) + (self.z * other.z)\n\n    def cross(self, no):\n        return Points((self.y * no.z - self.z * no.y), (self.z * no.x - self.x * no.z), (self.x * no.y - self.y * no.x))\n        \n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n"
    }
  ],
  "created": 1649728134,
  "object": "edit"
}
2022-04-11 21:49:02.105039 fix spelling mistakes 2 ['\nimport math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, other):\n        return Points((self.x - other.x), (self.y - other.y), (self.z - other.z))\n\n    def dot(self, other):\n        return (self.x * other.x) + (self.y * other.y) + (self.z * other.z)\n\n    def cross(self, other):\n        return Points((self.y * other.z - self.z * other.y), (self.z * other.x - self.x * other.z), (self.x * other.y - self.y * other.x))\n        \n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == \'__main__\':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print("%.2f" % math.degrees(angle))\n', '\nimport math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, other):\n        return Points((self.x - other.x), (self.y - other.y), (self.z - other.z))\n\n    def dot(self, other):\n        return (self.x * other.x) + (self.y * other.y) + (self.z * other.z)\n\n    def cross(self, no):\n        return Points((self.y * no.z - self.z * no.y), (self.z * no.x - self.x * no.z), (self.x * no.y - self.y * no.x))\n        \n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == \'__main__\':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print("%.2f" % math.degrees(angle))\n']
2022-04-11 21:49:02.105071 size on output set 2
2022-04-11 21:49:02.105077 size on input set 2
2022-04-11 21:49:07.299878 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, other):\n        return Points(self.x - other.x, self.y - other.y, self.z - other.z)\n\n    def dot(self, other):\n        return (self.x * other.x) + (self.y * other.y) + (self.z * other.z)\n\n    def cross(self, other):\n        return Points(self.y * other.z - self.z * other.y, self.z * other.x - self.x * other.z, self.x * other.y - self.y * other.x)\n        \n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n"
    },
    {
      "index": 1,
      "text": "import math\n\nclass Points(object):\n    def __init__(self, x, y, z): #constructor\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, other): #subtraction\n        return Points((self.x - other.x), (self.y - other.y), (self.z - other.z))\n\n    def dot(self, other): #dot product\n        return (self.x * other.x) + (self.y * other.y) + (self.z * other.z)\n\n    def cross(self, other): #cross product\n        return Points((self.y * other.z - self.z * other.y), (self.z * other.x - self.x * other.z), (self.x * other.y - self.y * other.x))\n        \n    def absolute(self): #absolute value\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n"
    }
  ],
  "created": 1649728142,
  "object": "edit"
}
2022-04-11 21:49:07.300134 fix syntax errors 2 ['import math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, other):\n        return Points(self.x - other.x, self.y - other.y, self.z - other.z)\n\n    def dot(self, other):\n        return (self.x * other.x) + (self.y * other.y) + (self.z * other.z)\n\n    def cross(self, other):\n        return Points(self.y * other.z - self.z * other.y, self.z * other.x - self.x * other.z, self.x * other.y - self.y * other.x)\n        \n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == \'__main__\':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print("%.2f" % math.degrees(angle))\n', 'import math\n\nclass Points(object):\n    def __init__(self, x, y, z): #constructor\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, other): #subtraction\n        return Points((self.x - other.x), (self.y - other.y), (self.z - other.z))\n\n    def dot(self, other): #dot product\n        return (self.x * other.x) + (self.y * other.y) + (self.z * other.z)\n\n    def cross(self, other): #cross product\n        return Points((self.y * other.z - self.z * other.y), (self.z * other.x - self.x * other.z), (self.x * other.y - self.y * other.x))\n        \n    def absolute(self): #absolute value\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == \'__main__\':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print("%.2f" % math.degrees(angle))\n']
2022-04-11 21:49:09.433055 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, other):\n        return Points((self.x - other.x), (self.y - other.y), (self.z - other.z))\n\n    def dot(self, other):\n        return (self.x * other.x) + (self.y * other.y) + (self.z * other.z)\n\n    def cross(self, no):\n        return Points((self.y * no.z - self.z * no.y), (self.z * no.x - self.x * no.z), (self.x * no.y - self.y * no.x))\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n"
    },
    {
      "index": 1,
      "text": "import math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, other):\n        return Points((self.x - other.x), (self.y - other.y), (self.z - other.z))\n\n    def dot(self, other):\n        return (self.x * other.x) + (self.y * other.y) + (self.z * other.z)\n\n    def cross(self, no):\n        return Points((self.y * no.z - self.z * no.y), (self.z * no.x - self.x * no.z), (self.x * no.y - self.y * no.x))\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == '__main__':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print(\"%.2f\" % math.degrees(angle))\n"
    }
  ],
  "created": 1649728147,
  "object": "edit"
}
2022-04-11 21:49:09.433234 fix syntax errors 2 ['import math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, other):\n        return Points((self.x - other.x), (self.y - other.y), (self.z - other.z))\n\n    def dot(self, other):\n        return (self.x * other.x) + (self.y * other.y) + (self.z * other.z)\n\n    def cross(self, no):\n        return Points((self.y * no.z - self.z * no.y), (self.z * no.x - self.x * no.z), (self.x * no.y - self.y * no.x))\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == \'__main__\':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print("%.2f" % math.degrees(angle))\n', 'import math\n\nclass Points(object):\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def __sub__(self, other):\n        return Points((self.x - other.x), (self.y - other.y), (self.z - other.z))\n\n    def dot(self, other):\n        return (self.x * other.x) + (self.y * other.y) + (self.z * other.z)\n\n    def cross(self, no):\n        return Points((self.y * no.z - self.z * no.y), (self.z * no.x - self.x * no.z), (self.x * no.y - self.y * no.x))\n\n    def absolute(self):\n        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)\n\nif __name__ == \'__main__\':\n    points = list()\n    for i in range(4):\n        a = list(map(float, input().split()))\n        points.append(a)\n\n    a, b, c, d = Points(*points[0]), Points(*points[1]), Points(*points[2]), Points(*points[3])\n    x = (b - a).cross(c - b)\n    y = (c - b).cross(d - c)\n    angle = math.acos(x.dot(y) / (x.absolute() * y.absolute()))\n\n    print("%.2f" % math.degrees(angle))\n']
2022-04-11 21:49:09.433275 size on output set 3
