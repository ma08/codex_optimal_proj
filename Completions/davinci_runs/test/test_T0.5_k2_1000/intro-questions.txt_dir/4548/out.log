2022-04-09 20:50:25.470072 """
There are N + 1 squares arranged in a row, numbered 0, 1, ..., N from left to right.
Initially, you are in Square X.
You can freely travel between adjacent squares. Your goal is to reach Square 0 or Square N.
However, for each i = 1, 2, ..., M, there is a toll gate in Square A_i, and traveling to Square A_i incurs a cost of 1.
It is guaranteed that there is no toll gate in Square 0, Square X and Square N.
Find the minimum cost incurred before reaching the goal.

-----Constraints-----
 - 1 \leq N \leq 100
 - 1 \leq M \leq 100
 - 1 \leq X \leq N - 1
 - 1 \leq A_1 < A_2 < ... < A_M \leq N
 - A_i \neq X
 - All values in input are integers.

-----Input-----
Input is given from Standard Input in the following format:
N M X
A_1 A_2 ... A_M

-----Output-----
Print the minimum cost incurred before reaching the goal.

-----Sample Input-----
5 3 3
1 2 4

-----Sample Output-----
1

The optimal solution is as follows:
 - First, travel from Square 3 to Square 4. Here, there is a toll gate in Square 4, so the cost of 1 is incurred.
 - Then, travel from Square 4 to Square 5. This time, no cost is incurred.
 - Now, we are in Square 5 and we have reached the goal.
In this case, the total cost incurred is 1.
"""
2022-04-09 20:50:25.470101 --------------------------
2022-04-09 20:50:36.506748 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n\ndef main():\n    N, M, X = map(int, input().split())\n    A = list(map(int, input().split()))\n    if X == 0 or X == N:\n        print(0)\n        exit()\n\n    # \u5de6\u304b\u3089\u3001\u53f3\u306b\u884c\u304f\u305f\u3081\u306e\u30b3\u30b9\u30c8\n    left = 0\n    # \u53f3\u304b\u3089\u3001\u5de6\u306b\u884c\u304f\u305f\u3081\u306e\u30b3\u30b9\u30c8\n    right = 0\n    # \u30b3\u30b9\u30c8\u3092\u8a08\u7b97\u3059\u308b\n    for i in range(X):\n        if i in A:\n            left += 1\n    for i in range(X, N):\n        if i in A:\n            right += 1\n    print(min(left, right))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nn, m, x = map(int, input().split())\na_list = list(map(int, input().split()))\n\ncost = 0\nfor i in range(x, 0, -1):\n    if i in a_list:\n        cost += 1\n\nfor i in range(x, n + 1):\n    if i in a_list:\n        cost += 1\n\nprint(cost)"
    }
  ],
  "created": 1649551825,
  "id": "cmpl-4vG4XorlJ7n4IboIpDdqZ4CMXeoBY",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 20:50:36.507053 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n\ndef main():\n    N, M, X = map(int, input().split())\n    A = list(map(int, input().split()))\n    if X == 0 or X == N:\n        print(0)\n        exit()\n\n    # \u5de6\u304b\u3089\u3001\u53f3\u306b\u884c\u304f\u305f\u3081\u306e\u30b3\u30b9\u30c8\n    left = 0\n    # \u53f3\u304b\u3089\u3001\u5de6\u306b\u884c\u304f\u305f\u3081\u306e\u30b3\u30b9\u30c8\n    right = 0\n    # \u30b3\u30b9\u30c8\u3092\u8a08\u7b97\u3059\u308b\n    for i in range(X):\n        if i in A:\n            left += 1\n    for i in range(X, N):\n        if i in A:\n            right += 1\n    print(min(left, right))\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-09 20:50:36.507104 REASON stop
2022-04-09 20:50:36.519465 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nn, m, x = map(int, input().split())\na_list = list(map(int, input().split()))\n\ncost = 0\nfor i in range(x, 0, -1):\n    if i in a_list:\n        cost += 1\n\nfor i in range(x, n + 1):\n    if i in a_list:\n        cost += 1\n\nprint(cost)"
}
2022-04-09 20:50:36.519676 REASON stop
