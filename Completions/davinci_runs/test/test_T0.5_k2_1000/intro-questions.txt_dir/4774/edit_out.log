2022-04-11 23:34:08.757865 num operations 2
2022-04-11 23:34:08.757888 size on input set 1
2022-04-11 23:34:11.670810 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nsys.stdin = open(\"sample_input.txt\",\"r\")\n\na,b,c,d = map(int,input().split())\n\nif a*b == c*d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' * '+str(d))\nif a+b == c+d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' + '+str(d))\nif a-b == c-d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' - '+str(d))\nif a*b == c+d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' + '+str(d))\nif a+b == c*d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' * '+str(d))\nif a-b == c+d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' + '+str(d))\nif a-b == c*d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' * '+str(d))\nif a*b == c-d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' - '+str(d))\nif a/b == c/d and b!=0 and d!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' / '+str(d))\nif a+b == c/d and d!=0:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' / '+str(d))\nif a-b == c/d and d!=0:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' / '+str(d))\nif a*b == c/d and d!=0:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' / '+str(d))\nif a/b == c+d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' + '+str(d))\nif a/b == c-d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' - '+str(d))\nif a+b == c-d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' - '+str(d))\nif a/b == c*d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' * '+str(d))\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nsys.stdin = open(\"sample_input.txt\",\"r\")\n\na,b,c,d = map(int,input().split())\n\nif a*b == c*d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' * '+str(d))\nif a+b == c+d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' + '+str(d))\nif a-b == c-d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' - '+str(d))\nif a*b == c+d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' + '+str(d))\nif a+b == c*d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' * '+str(d))\nif a-b == c+d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' + '+str(d))\nif a-b == c*d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' * '+str(d))\nif a*b == c-d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' - '+str(d))\nif a/b == c/d and b!=0 and d!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' / '+str(d))\nif a+b == c/d and d!=0:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' / '+str(d))\nif a-b == c/d and d!=0:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' / '+str(d))\nif a*b == c/d and d!=0:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' / '+str(d))\nif a/b == c+d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' + '+str(d))\nif a/b == c-d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' - '+str(d))\nif a+b == c-d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' - '+str(d))\nif a/b == c*d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' * '+str(d))\n"
    }
  ],
  "created": 1649734449,
  "object": "edit"
}
2022-04-11 23:34:11.671174 fix spelling mistakes 2 ['\n\nimport sys\nsys.stdin = open("sample_input.txt","r")\n\na,b,c,d = map(int,input().split())\n\nif a*b == c*d:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\nif a+b == c+d:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a-b == c-d:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a*b == c+d:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a+b == c*d:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\nif a-b == c+d:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a-b == c*d:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\nif a*b == c-d:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a/b == c/d and b!=0 and d!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a+b == c/d and d!=0:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a-b == c/d and d!=0:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a*b == c/d and d!=0:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a/b == c+d and b!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a/b == c-d and b!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a+b == c-d:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a/b == c*d and b!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\n', '\n\nimport sys\nsys.stdin = open("sample_input.txt","r")\n\na,b,c,d = map(int,input().split())\n\nif a*b == c*d:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\nif a+b == c+d:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a-b == c-d:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a*b == c+d:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a+b == c*d:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\nif a-b == c+d:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a-b == c*d:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\nif a*b == c-d:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a/b == c/d and b!=0 and d!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a+b == c/d and d!=0:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a-b == c/d and d!=0:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a*b == c/d and d!=0:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a/b == c+d and b!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a/b == c-d and b!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a+b == c-d:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a/b == c*d and b!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\n']
2022-04-11 23:34:11.671268 size on output set 1
2022-04-11 23:34:11.671283 size on input set 1
2022-04-11 23:34:14.482719 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nsys.stdin = open(\"input.txt\",\"r\")\n\na,b,c,d = map(int,input().split())\n\nif a*b == c*d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' * '+str(d))\nif a+b == c+d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' + '+str(d))\nif a-b == c-d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' - '+str(d))\nif a*b == c+d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' + '+str(d))\nif a+b == c*d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' * '+str(d))\nif a-b == c+d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' + '+str(d))\nif a-b == c*d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' * '+str(d))\nif a*b == c-d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' - '+str(d))\nif a/b == c/d and b!=0 and d!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' / '+str(d))\nif a+b == c/d and d!=0:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' / '+str(d))\nif a-b == c/d and d!=0:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' / '+str(d))\nif a*b == c/d and d!=0:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' / '+str(d))\nif a/b == c+d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' + '+str(d))\nif a/b == c-d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' - '+str(d))\nif a+b == c-d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' - '+str(d))\nif a/b == c*d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' * '+str(d))\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nsys.stdin = open(\"sample_input.txt\",\"r\")\n#\na,b,c,d = map(int,input().split())\n\nif a*b == c*d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' * '+str(d))\nif a+b == c+d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' + '+str(d))\nif a-b == c-d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' - '+str(d))\nif a*b == c+d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' + '+str(d))\nif a+b == c*d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' * '+str(d))\nif a-b == c+d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' + '+str(d))\nif a-b == c*d:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' * '+str(d))\nif a*b == c-d:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' - '+str(d))\nif a/b == c/d and b!=0 and d!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' / '+str(d))\nif a+b == c/d and d!=0:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' / '+str(d))\nif a-b == c/d and d!=0:\n    print(str(a)+' - '+str(b)+' = '+str(c)+' / '+str(d))\nif a*b == c/d and d!=0:\n    print(str(a)+' * '+str(b)+' = '+str(c)+' / '+str(d))\nif a/b == c+d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' + '+str(d))\nif a/b == c-d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' - '+str(d))\nif a+b == c-d:\n    print(str(a)+' + '+str(b)+' = '+str(c)+' - '+str(d))\nif a/b == c*d and b!=0:\n    print(str(a)+' / '+str(b)+' = '+str(c)+' * '+str(d))\n"
    }
  ],
  "created": 1649734451,
  "object": "edit"
}
2022-04-11 23:34:14.482905 fix syntax errors 2 ['\nimport sys\nsys.stdin = open("input.txt","r")\n\na,b,c,d = map(int,input().split())\n\nif a*b == c*d:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\nif a+b == c+d:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a-b == c-d:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a*b == c+d:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a+b == c*d:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\nif a-b == c+d:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a-b == c*d:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\nif a*b == c-d:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a/b == c/d and b!=0 and d!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a+b == c/d and d!=0:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a-b == c/d and d!=0:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a*b == c/d and d!=0:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a/b == c+d and b!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a/b == c-d and b!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a+b == c-d:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a/b == c*d and b!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\n', '\n\nimport sys\nsys.stdin = open("sample_input.txt","r")\n#\na,b,c,d = map(int,input().split())\n\nif a*b == c*d:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\nif a+b == c+d:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a-b == c-d:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a*b == c+d:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a+b == c*d:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\nif a-b == c+d:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a-b == c*d:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\nif a*b == c-d:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a/b == c/d and b!=0 and d!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a+b == c/d and d!=0:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a-b == c/d and d!=0:\n    print(str(a)+\' - \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a*b == c/d and d!=0:\n    print(str(a)+\' * \'+str(b)+\' = \'+str(c)+\' / \'+str(d))\nif a/b == c+d and b!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' + \'+str(d))\nif a/b == c-d and b!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a+b == c-d:\n    print(str(a)+\' + \'+str(b)+\' = \'+str(c)+\' - \'+str(d))\nif a/b == c*d and b!=0:\n    print(str(a)+\' / \'+str(b)+\' = \'+str(c)+\' * \'+str(d))\n']
2022-04-11 23:34:14.482924 size on output set 2
2022-04-11 23:34:14.482931 num operations 2
2022-04-11 23:34:14.482934 size on input set 1
2022-04-11 23:34:28.068707 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom itertools import permutations\n\ndef is_valid(a, b, c, d, op1, op2):\n    if op1 == '+':\n        if op2 == '+':\n            return a + b == c + d\n        if op2 == '-':\n            return a + b == c - d\n        if op2 == '*':\n            return a + b == c * d\n        if op2 == '/':\n            return a + b == c // d\n    if op1 == '-':\n        if op2 == '+':\n            return a - b == c + d\n        if op2 == '-':\n            return a - b == c - d\n        if op2 == '*':\n            return a - b == c * d\n        if op2 == '/':\n            return a - b == c // d\n    if op1 == '*':\n        if op2 == '+':\n            return a * b == c + d\n        if op2 == '-':\n            return a * b == c - d\n        if op2 == '*':\n            return a * b == c * d\n        if op2 == '/':\n            return a * b == c // d\n    if op1 == '/':\n        if op2 == '+':\n            return a // b == c + d\n        if op2 == '-':\n            return a // b == c - d\n        if op2 == '*':\n            return a // b == c * d\n        if op2 == '/':\n            return a // b == c // d\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    ops = ['+', '-', '*', '/']\n    valid = []\n    for op1, op2 in permutations(ops, 2):\n        if is_valid(a, b, c, d, op1, op2):\n            valid.append(f'{a} {op1} {b} = {c} {op2} {d}')\n    if not valid:\n        print('problems ahead')\n    else:\n        for e in sorted(valid):\n            print(e)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nfrom itertools import permutations\n\ndef is_valid(a, b, c, d, op1, op2):\n    if op1 == '*' and op2 == '+':\n        return a * b == c + d\n    if op1 == '*' and op2 == '-':\n        return a * b == c - d\n    if op1 == '*' and op2 == '/':\n        return a * b == c // d\n    if op1 == '+' and op2 == '*':\n        return a + b == c * d\n    if op1 == '+' and op2 == '-':\n        return a + b == c - d\n    if op1 == '+' and op2 == '/':\n        return a + b == c // d\n    if op1 == '-' and op2 == '*':\n        return a - b == c * d\n    if op1 == '-' and op2 == '+':\n        return a - b == c + d\n    if op1 == '-' and op2 == '/':\n        return a - b == c // d\n    if op1 == '/' and op2 == '*':\n        return a // b == c * d\n    if op1 == '/' and op2 == '+':\n        return a // b == c + d\n    if op1 == '/' and op2 == '-':\n        return a // b == c - d\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    ops = ['+', '-', '*', '/']\n    valid = []\n    for op1, op2 in permutations(ops, 2):\n        if is_valid(a, b, c, d, op1, op2):\n            valid.append(f'{a} {op1} {b} = {c} {op2} {d}')\n    if not valid:\n        print('problem ahead')\n    else:\n        for e in sorted(valid):\n            print(e)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649734454,
  "object": "edit"
}
2022-04-11 23:34:28.069157 fix spelling mistakes 2 ['\nfrom itertools import permutations\n\ndef is_valid(a, b, c, d, op1, op2):\n    if op1 == \'+\':\n        if op2 == \'+\':\n            return a + b == c + d\n        if op2 == \'-\':\n            return a + b == c - d\n        if op2 == \'*\':\n            return a + b == c * d\n        if op2 == \'/\':\n            return a + b == c // d\n    if op1 == \'-\':\n        if op2 == \'+\':\n            return a - b == c + d\n        if op2 == \'-\':\n            return a - b == c - d\n        if op2 == \'*\':\n            return a - b == c * d\n        if op2 == \'/\':\n            return a - b == c // d\n    if op1 == \'*\':\n        if op2 == \'+\':\n            return a * b == c + d\n        if op2 == \'-\':\n            return a * b == c - d\n        if op2 == \'*\':\n            return a * b == c * d\n        if op2 == \'/\':\n            return a * b == c // d\n    if op1 == \'/\':\n        if op2 == \'+\':\n            return a // b == c + d\n        if op2 == \'-\':\n            return a // b == c - d\n        if op2 == \'*\':\n            return a // b == c * d\n        if op2 == \'/\':\n            return a // b == c // d\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    ops = [\'+\', \'-\', \'*\', \'/\']\n    valid = []\n    for op1, op2 in permutations(ops, 2):\n        if is_valid(a, b, c, d, op1, op2):\n            valid.append(f\'{a} {op1} {b} = {c} {op2} {d}\')\n    if not valid:\n        print(\'problems ahead\')\n    else:\n        for e in sorted(valid):\n            print(e)\n\nif __name__ == "__main__":\n    main()\n', '\nfrom itertools import permutations\n\ndef is_valid(a, b, c, d, op1, op2):\n    if op1 == \'*\' and op2 == \'+\':\n        return a * b == c + d\n    if op1 == \'*\' and op2 == \'-\':\n        return a * b == c - d\n    if op1 == \'*\' and op2 == \'/\':\n        return a * b == c // d\n    if op1 == \'+\' and op2 == \'*\':\n        return a + b == c * d\n    if op1 == \'+\' and op2 == \'-\':\n        return a + b == c - d\n    if op1 == \'+\' and op2 == \'/\':\n        return a + b == c // d\n    if op1 == \'-\' and op2 == \'*\':\n        return a - b == c * d\n    if op1 == \'-\' and op2 == \'+\':\n        return a - b == c + d\n    if op1 == \'-\' and op2 == \'/\':\n        return a - b == c // d\n    if op1 == \'/\' and op2 == \'*\':\n        return a // b == c * d\n    if op1 == \'/\' and op2 == \'+\':\n        return a // b == c + d\n    if op1 == \'/\' and op2 == \'-\':\n        return a // b == c - d\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    ops = [\'+\', \'-\', \'*\', \'/\']\n    valid = []\n    for op1, op2 in permutations(ops, 2):\n        if is_valid(a, b, c, d, op1, op2):\n            valid.append(f\'{a} {op1} {b} = {c} {op2} {d}\')\n    if not valid:\n        print(\'problem ahead\')\n    else:\n        for e in sorted(valid):\n            print(e)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-11 23:34:28.069194 size on output set 2
2022-04-11 23:34:28.069201 size on input set 2
2022-04-11 23:34:35.774282 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom itertools import permutations\n\ndef is_valid(a, b, c, d, op1, op2):\n    if op1 == '+':\n        if op2 == '+':\n            return a + b == c + d\n        if op2 == '-':\n            return a + b == c - d\n        if op2 == '*':\n            return a + b == c * d\n        if op2 == '/':\n            return a + b == c / d\n    if op1 == '-':\n        if op2 == '+':\n            return a - b == c + d\n        if op2 == '-':\n            return a - b == c - d\n        if op2 == '*':\n            return a - b == c * d\n        if op2 == '/':\n            return a - b == c / d\n    if op1 == '*':\n        if op2 == '+':\n            return a * b == c + d\n        if op2 == '-':\n            return a * b == c - d\n        if op2 == '*':\n            return a * b == c * d\n        if op2 == '/':\n            return a * b == c / d\n    if op1 == '/':\n        if op2 == '+':\n            return a / b == c + d\n        if op2 == '-':\n            return a / b == c - d\n        if op2 == '*':\n            return a / b == c * d\n        if op2 == '/':\n            return a / b == c / d\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    ops = ['+', '-', '*', '/']\n    valid = []\n    for op1, op2 in permutations(ops, 2):\n        if is_valid(a, b, c, d, op1, op2):\n            valid.append(f'{a} {op1} {b} = {c} {op2} {d}')\n    if not valid:\n        print('problems ahead')\n    else:\n        for e in sorted(valid):\n            print(e)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "from itertools import permutations\n\ndef is_valid(a, b, c, d, op1, op2):\n    if op2 == '/' and d == 0:\n        return False\n    if op1 == '+':\n        if op2 == '+':\n            return a + b == c + d\n        if op2 == '-':\n            return a + b == c - d\n        if op2 == '*':\n            return a + b == c * d\n        if op2 == '/':\n            return a + b == c / d\n    if op1 == '-':\n        if op2 == '+':\n            return a - b == c + d\n        if op2 == '-':\n            return a - b == c - d\n        if op2 == '*':\n            return a - b == c * d\n        if op2 == '/':\n            return a - b == c / d\n    if op1 == '*':\n        if op2 == '+':\n            return a * b == c + d\n        if op2 == '-':\n            return a * b == c - d\n        if op2 == '*':\n            return a * b == c * d\n        if op2 == '/':\n            return a * b == c / d\n    if op1 == '/':\n        if op2 == '+':\n            return a / b == c + d\n        if op2 == '-':\n            return a / b == c - d\n        if op2 == '*':\n            return a / b == c * d\n        if op2 == '/':\n            return a / b == c / d\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    ops = ['+', '-', '*', '/']\n    valid = []\n    for op1, op2 in permutations(ops, 2):\n        if is_valid(a, b, c, d, op1, op2):\n            valid.append(f'{a} {op1} {b} = {c} {op2} {d} = 24')\n    if not valid:\n        print('problems ahead')\n    else:\n        for e in sorted(valid):\n            print(e)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649734468,
  "object": "edit"
}
2022-04-11 23:34:35.774970 fix syntax errors 2 ['\nfrom itertools import permutations\n\ndef is_valid(a, b, c, d, op1, op2):\n    if op1 == \'+\':\n        if op2 == \'+\':\n            return a + b == c + d\n        if op2 == \'-\':\n            return a + b == c - d\n        if op2 == \'*\':\n            return a + b == c * d\n        if op2 == \'/\':\n            return a + b == c / d\n    if op1 == \'-\':\n        if op2 == \'+\':\n            return a - b == c + d\n        if op2 == \'-\':\n            return a - b == c - d\n        if op2 == \'*\':\n            return a - b == c * d\n        if op2 == \'/\':\n            return a - b == c / d\n    if op1 == \'*\':\n        if op2 == \'+\':\n            return a * b == c + d\n        if op2 == \'-\':\n            return a * b == c - d\n        if op2 == \'*\':\n            return a * b == c * d\n        if op2 == \'/\':\n            return a * b == c / d\n    if op1 == \'/\':\n        if op2 == \'+\':\n            return a / b == c + d\n        if op2 == \'-\':\n            return a / b == c - d\n        if op2 == \'*\':\n            return a / b == c * d\n        if op2 == \'/\':\n            return a / b == c / d\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    ops = [\'+\', \'-\', \'*\', \'/\']\n    valid = []\n    for op1, op2 in permutations(ops, 2):\n        if is_valid(a, b, c, d, op1, op2):\n            valid.append(f\'{a} {op1} {b} = {c} {op2} {d}\')\n    if not valid:\n        print(\'problems ahead\')\n    else:\n        for e in sorted(valid):\n            print(e)\n\nif __name__ == "__main__":\n    main()\n', 'from itertools import permutations\n\ndef is_valid(a, b, c, d, op1, op2):\n    if op2 == \'/\' and d == 0:\n        return False\n    if op1 == \'+\':\n        if op2 == \'+\':\n            return a + b == c + d\n        if op2 == \'-\':\n            return a + b == c - d\n        if op2 == \'*\':\n            return a + b == c * d\n        if op2 == \'/\':\n            return a + b == c / d\n    if op1 == \'-\':\n        if op2 == \'+\':\n            return a - b == c + d\n        if op2 == \'-\':\n            return a - b == c - d\n        if op2 == \'*\':\n            return a - b == c * d\n        if op2 == \'/\':\n            return a - b == c / d\n    if op1 == \'*\':\n        if op2 == \'+\':\n            return a * b == c + d\n        if op2 == \'-\':\n            return a * b == c - d\n        if op2 == \'*\':\n            return a * b == c * d\n        if op2 == \'/\':\n            return a * b == c / d\n    if op1 == \'/\':\n        if op2 == \'+\':\n            return a / b == c + d\n        if op2 == \'-\':\n            return a / b == c - d\n        if op2 == \'*\':\n            return a / b == c * d\n        if op2 == \'/\':\n            return a / b == c / d\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    ops = [\'+\', \'-\', \'*\', \'/\']\n    valid = []\n    for op1, op2 in permutations(ops, 2):\n        if is_valid(a, b, c, d, op1, op2):\n            valid.append(f\'{a} {op1} {b} = {c} {op2} {d} = 24\')\n    if not valid:\n        print(\'problems ahead\')\n    else:\n        for e in sorted(valid):\n            print(e)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-11 23:34:48.737237 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom itertools import permutations\n\ndef is_valid(a, b, c, d, op1, op2):\n    return eval(f'{a}{op1}{b}') == eval(f'{c}{op2}{d}')\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    ops = ['+', '-', '*', '/']\n    valid = []\n    for op1, op2 in permutations(ops, 2):\n        if is_valid(a, b, c, d, op1, op2):\n            valid.append(f'{a} {op1} {b} = {c} {op2} {d}')\n    if not valid:\n        print('problem ahead')\n    else:\n        for e in sorted(valid):\n            print(e)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "from itertools import permutations\n\ndef is_valid(a, b, c, d, op1, op2):\n    if op1 == '*':\n        if op2 == '+':\n            return a * b == c + d\n        if op2 == '-':\n            return a * b == c - d\n        if op2 == '/':\n            return a * b == c // d\n    if op1 == '+':\n        if op2 == '*':\n            return a + b == c * d\n        if op2 == '-':\n            return a + b == c - d\n        if op2 == '/':\n            return a + b == c // d\n    if op1 == '-':\n        if op2 == '*':\n            return a - b == c * d\n        if op2 == '+':\n            return a - b == c + d\n        if op2 == '/':\n            return a - b == c // d\n    if op1 == '/':\n        if op2 == '*':\n            return a // b == c * d\n        if op2 == '+':\n            return a // b == c + d\n        if op2 == '-':\n            return a // b == c - d\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    ops = ['+', '-', '*', '/']\n    valid = []\n    for op1, op2 in permutations(ops, 2):\n        if is_valid(a, b, c, d, op1, op2):\n            valid.append(f'{a} {op1} {b} = {c} {op2} {d}')\n    if not valid:\n        print('problem ahead')\n    else:\n        for e in sorted(valid):\n            print(e)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649734475,
  "object": "edit"
}
2022-04-11 23:34:48.737481 fix syntax errors 2 ['\nfrom itertools import permutations\n\ndef is_valid(a, b, c, d, op1, op2):\n    return eval(f\'{a}{op1}{b}\') == eval(f\'{c}{op2}{d}\')\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    ops = [\'+\', \'-\', \'*\', \'/\']\n    valid = []\n    for op1, op2 in permutations(ops, 2):\n        if is_valid(a, b, c, d, op1, op2):\n            valid.append(f\'{a} {op1} {b} = {c} {op2} {d}\')\n    if not valid:\n        print(\'problem ahead\')\n    else:\n        for e in sorted(valid):\n            print(e)\n\nif __name__ == "__main__":\n    main()\n', 'from itertools import permutations\n\ndef is_valid(a, b, c, d, op1, op2):\n    if op1 == \'*\':\n        if op2 == \'+\':\n            return a * b == c + d\n        if op2 == \'-\':\n            return a * b == c - d\n        if op2 == \'/\':\n            return a * b == c // d\n    if op1 == \'+\':\n        if op2 == \'*\':\n            return a + b == c * d\n        if op2 == \'-\':\n            return a + b == c - d\n        if op2 == \'/\':\n            return a + b == c // d\n    if op1 == \'-\':\n        if op2 == \'*\':\n            return a - b == c * d\n        if op2 == \'+\':\n            return a - b == c + d\n        if op2 == \'/\':\n            return a - b == c // d\n    if op1 == \'/\':\n        if op2 == \'*\':\n            return a // b == c * d\n        if op2 == \'+\':\n            return a // b == c + d\n        if op2 == \'-\':\n            return a // b == c - d\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    ops = [\'+\', \'-\', \'*\', \'/\']\n    valid = []\n    for op1, op2 in permutations(ops, 2):\n        if is_valid(a, b, c, d, op1, op2):\n            valid.append(f\'{a} {op1} {b} = {c} {op2} {d}\')\n    if not valid:\n        print(\'problem ahead\')\n    else:\n        for e in sorted(valid):\n            print(e)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-11 23:34:48.737507 size on output set 4
2022-04-11 23:34:48.737518 num operations 2
2022-04-11 23:34:48.737525 size on input set 1
2022-04-11 23:34:50.958431 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\ndef solve(a, b, c, d):\n    if a == c and b == d:\n        return [\"%d + %d = %d + %d\" % (a, b, c, d)]\n    elif a > c or (a == c and b > d):\n        return [\"%d - %d = %d - %d\" % (a, b, c, d)]\n    elif a*b == c*d:\n        return [\"%d * %d = %d * %d\" % (a, b, c, d)]\n    elif a*d == b*c:\n        return [\"%d / %d = %d / %d\" % (a, b, c, d)]\n    return [\"problems ahead\"]\n\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    for ans in solve(a, b, c, d):\n        print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef solve(a, b, c, d):\n    if a == c and b == d:\n        return [\"%d + %d = %d + %d\" % (a, b, c, d)]\n    elif a > c or (a == c and b > d):\n        return [\"%d - %d = %d - %d\" % (a, b, c, d)]\n    elif a*b == c*d:\n        return [\"%d * %d = %d * %d\" % (a, b, c, d)]\n    elif a*d == b*c:\n        return [\"%d / %d = %d / %d\" % (a, b, c, d)]\n    return [\"problems ahead\"]\n\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    for ans in solve(a, b, c, d):\n        print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649734489,
  "object": "edit"
}
2022-04-11 23:34:50.958584 fix spelling mistakes 2 ['\ndef solve(a, b, c, d):\n    if a == c and b == d:\n        return ["%d + %d = %d + %d" % (a, b, c, d)]\n    elif a > c or (a == c and b > d):\n        return ["%d - %d = %d - %d" % (a, b, c, d)]\n    elif a*b == c*d:\n        return ["%d * %d = %d * %d" % (a, b, c, d)]\n    elif a*d == b*c:\n        return ["%d / %d = %d / %d" % (a, b, c, d)]\n    return ["problems ahead"]\n\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    for ans in solve(a, b, c, d):\n        print(ans)\n\nif __name__ == "__main__":\n    main()\n', '\ndef solve(a, b, c, d):\n    if a == c and b == d:\n        return ["%d + %d = %d + %d" % (a, b, c, d)]\n    elif a > c or (a == c and b > d):\n        return ["%d - %d = %d - %d" % (a, b, c, d)]\n    elif a*b == c*d:\n        return ["%d * %d = %d * %d" % (a, b, c, d)]\n    elif a*d == b*c:\n        return ["%d / %d = %d / %d" % (a, b, c, d)]\n    return ["problems ahead"]\n\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    for ans in solve(a, b, c, d):\n        print(ans)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-11 23:34:50.958599 size on output set 1
2022-04-11 23:34:50.958603 size on input set 1
2022-04-11 23:34:57.248437 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef solve(a, b, c, d):\n    if a == c and b == d:\n        return [\"%d + %d = %d + %d\" % (a, b, c, d)]  # noqa\n    elif a > c or (a == c and b > d):\n        return [\"%d - %d = %d - %d\" % (a, b, c, d)]  # noqa\n    elif a*b == c*d:\n        return [\"%d * %d = %d * %d\" % (a, b, c, d)]  # noqa\n    elif a*d == b*c:\n        return [\"%d / %d = %d / %d\" % (a, b, c, d)]  # noqa\n    return [\"problems ahead\"]\n\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    for ans in solve(a, b, c, d):\n        print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef solve(a, b, c, d):\n    if a == c and b == d:\n        return [\"%d + %d = %d + %d\" % (a, b, c, d)]  # noqa\n    elif a > c or (a == c and b > d):\n        return [\"%d - %d = %d - %d\" % (a, b, c, d)]  # noqa\n    elif a*b == c*d:\n        return [\"%d * %d = %d * %d\" % (a, b, c, d)]  # noqa\n    elif a*d == b*c:\n        return [\"%d / %d = %d / %d\" % (a, b, c, d)]  # noqa\n    return [\"problems ahead\"]\n\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    for ans in solve(a, b, c, d):\n        print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649734491,
  "object": "edit"
}
2022-04-11 23:34:57.248611 fix syntax errors 2 ['\ndef solve(a, b, c, d):\n    if a == c and b == d:\n        return ["%d + %d = %d + %d" % (a, b, c, d)]  # noqa\n    elif a > c or (a == c and b > d):\n        return ["%d - %d = %d - %d" % (a, b, c, d)]  # noqa\n    elif a*b == c*d:\n        return ["%d * %d = %d * %d" % (a, b, c, d)]  # noqa\n    elif a*d == b*c:\n        return ["%d / %d = %d / %d" % (a, b, c, d)]  # noqa\n    return ["problems ahead"]\n\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    for ans in solve(a, b, c, d):\n        print(ans)\n\nif __name__ == "__main__":\n    main()\n', '\ndef solve(a, b, c, d):\n    if a == c and b == d:\n        return ["%d + %d = %d + %d" % (a, b, c, d)]  # noqa\n    elif a > c or (a == c and b > d):\n        return ["%d - %d = %d - %d" % (a, b, c, d)]  # noqa\n    elif a*b == c*d:\n        return ["%d * %d = %d * %d" % (a, b, c, d)]  # noqa\n    elif a*d == b*c:\n        return ["%d / %d = %d / %d" % (a, b, c, d)]  # noqa\n    return ["problems ahead"]\n\n\ndef main():\n    a, b, c, d = map(int, input().split())\n    for ans in solve(a, b, c, d):\n        print(ans)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-11 23:34:57.248751 size on output set 1
2022-04-11 23:34:57.248773 num operations 2
2022-04-11 23:34:57.248778 size on input set 1
2022-04-11 23:34:59.514351 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\nlines = sys.stdin.readlines()\n\na, b, c, d = [int(x) for x in lines[0].split()]\n\nvalid = []\n\n# a + b = c + d\nif a + b == c + d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))\n\n# a - b = c - d\nif a - b == c - d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))\n\n# a * b = c * d\nif a * b == c * d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n\n# a / b = c / d\nif b != 0 and d != 0 and a / b == c / d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\n\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('problems ahead!')\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\nlines = sys.stdin.readlines()\n\na, b, c, d = [int(x) for x in lines[0].split()]\n\nvalid = []\n\n# a + b = c + d\nif a + b == c + d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))\n\n# a - b = c - d\nif a - b == c - d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))\n\n# a * b = c * d\nif a * b == c * d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n\n# a / b = c / d\nif b != 0 and d != 0 and a / b == c / d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\n\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('problem ahead')\n"
    }
  ],
  "created": 1649734497,
  "object": "edit"
}
2022-04-11 23:34:59.514554 fix spelling mistakes 2 ["\n\nimport sys\n\nlines = sys.stdin.readlines()\n\na, b, c, d = [int(x) for x in lines[0].split()]\n\nvalid = []\n\n# a + b = c + d\nif a + b == c + d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))\n\n# a - b = c - d\nif a - b == c - d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))\n\n# a * b = c * d\nif a * b == c * d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n\n# a / b = c / d\nif b != 0 and d != 0 and a / b == c / d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\n\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('problems ahead!')\n", "\n\nimport sys\n\nlines = sys.stdin.readlines()\n\na, b, c, d = [int(x) for x in lines[0].split()]\n\nvalid = []\n\n# a + b = c + d\nif a + b == c + d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))\n\n# a - b = c - d\nif a - b == c - d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))\n\n# a * b = c * d\nif a * b == c * d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n\n# a / b = c / d\nif b != 0 and d != 0 and a / b == c / d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\n\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('problem ahead')\n"]
2022-04-11 23:34:59.514591 size on output set 2
2022-04-11 23:34:59.514601 size on input set 2
2022-04-11 23:35:05.842750 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nlines = sys.stdin.readlines()\na, b, c, d = [int(x) for x in lines[0].split()]\nvalid = []\n\n# a + b = c + d\nif a + b == c + d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))\n# a - b = c - d\nif a - b == c - d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))\n# a * b = c * d\nif a * b == c * d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n# a / b = c / d\nif b != 0 and d != 0 and a / b == c / d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('problem ahead')\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\nlines = sys.stdin.readlines()\n\na, b, c, d = [int(x) for x in lines[0].split()]\n\nvalid = []\n\n# a + b = c + d\nif a + b == c + d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))  # noqa: E231\n\n# a - b = c - d\nif a - b == c - d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))  # noqa: E231\n\n# a * b = c * d\nif a * b == c * d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n\n# a / b = c / d\nif b != 0 and d != 0 and a / b == c / d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\n\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('problem ahead')\n"
    }
  ],
  "created": 1649734499,
  "object": "edit"
}
2022-04-11 23:35:05.842939 fix syntax errors 2 ["\nimport sys\nlines = sys.stdin.readlines()\na, b, c, d = [int(x) for x in lines[0].split()]\nvalid = []\n\n# a + b = c + d\nif a + b == c + d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))\n# a - b = c - d\nif a - b == c - d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))\n# a * b = c * d\nif a * b == c * d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n# a / b = c / d\nif b != 0 and d != 0 and a / b == c / d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('problem ahead')\n", "\nimport sys\n\nlines = sys.stdin.readlines()\n\na, b, c, d = [int(x) for x in lines[0].split()]\n\nvalid = []\n\n# a + b = c + d\nif a + b == c + d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))  # noqa: E231\n\n# a - b = c - d\nif a - b == c - d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))  # noqa: E231\n\n# a * b = c * d\nif a * b == c * d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n\n# a / b = c / d\nif b != 0 and d != 0 and a / b == c / d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\n\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('problem ahead')\n"]
2022-04-11 23:35:07.834799 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\nlines = sys.stdin.readlines()\n\na, b, c, d = [int(x) for x in lines[0].split()]\n\nvalid = []\n\n# a + b = c + d\nif a + b == c + d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))\n\n# a - b = c - d\nif a - b == c - d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))\n\n# a * b = c * d\nif a * b == c * d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n\n# a / b = c / d\nif b != 0 and d != 0 and a / b == c / d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\n\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('problems ahead!')\n"
    },
    {
      "index": 1,
      "text": "import sys\n\nlines = sys.stdin.readlines()\n\na, b, c, d = [int(x) for x in lines[0].split()]\n\nvalid = []\n\n# a + b = c + d\nif a + b == c + d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))\n\n# a - b = c - d\nif a - b == c - d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))\n\n# a * b = c * d\nif a * b == c * d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n\n# a / b = c / d\nif b != 0 and d != 0 and a / b == c / d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\n\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('problems ahead!')\n"
    }
  ],
  "created": 1649734506,
  "object": "edit"
}
2022-04-11 23:35:07.835222 fix syntax errors 2 ["\nimport sys\n\nlines = sys.stdin.readlines()\n\na, b, c, d = [int(x) for x in lines[0].split()]\n\nvalid = []\n\n# a + b = c + d\nif a + b == c + d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))\n\n# a - b = c - d\nif a - b == c - d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))\n\n# a * b = c * d\nif a * b == c * d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n\n# a / b = c / d\nif b != 0 and d != 0 and a / b == c / d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\n\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('problems ahead!')\n", "import sys\n\nlines = sys.stdin.readlines()\n\na, b, c, d = [int(x) for x in lines[0].split()]\n\nvalid = []\n\n# a + b = c + d\nif a + b == c + d:\n    valid.append('{} + {} = {} + {}'.format(a, b, c, d))\n\n# a - b = c - d\nif a - b == c - d:\n    valid.append('{} - {} = {} - {}'.format(a, b, c, d))\n\n# a * b = c * d\nif a * b == c * d:\n    valid.append('{} * {} = {} * {}'.format(a, b, c, d))\n\n# a / b = c / d\nif b != 0 and d != 0 and a / b == c / d:\n    valid.append('{} / {} = {} / {}'.format(a, b, c, d))\n\nif len(valid) > 0:\n    print('\\n'.join(sorted(valid)))\nelse:\n    print('problems ahead!')\n"]
2022-04-11 23:35:07.835260 size on output set 4
2022-04-11 23:35:07.835277 num operations 2
2022-04-11 23:35:07.835285 size on input set 1
2022-04-11 23:35:10.838750 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "import itertools\na, b, c, d = map(int, input().split())\ndef check(a, b, c, d, op1, op2):\n    if op1 == '*':\n        if op2 == '*':\n            if a * b == c * d:\n                return True\n        elif op2 == '+':\n            if a * b == c + d:\n                return True\n        elif op2 == '-':\n            if a * b == c - d:\n                return True\n        elif op2 == '/':\n            if a * b == c / d:\n                return True\n    elif op1 == '+':\n        if op2 == '*':\n            if a + b == c * d:\n                return True\n        elif op2 == '+':\n            if a + b == c + d:\n                return True\n        elif op2 == '-':\n            if a + b == c - d:\n                return True\n        elif op2 == '/':\n            if a + b == c / d:\n                return True\n    elif op1 == '-':\n        if op2 == '*':\n            if a - b == c * d:\n                return True\n        elif op2 == '+':\n            if a - b == c + d:\n                return True\n        elif op2 == '-':\n            if a - b == c - d:\n                return True\n        elif op2 == '/':\n            if a - b == c / d:\n                return True\n    elif op1 == '/':\n        if op2 == '*':\n            if a / b == c * d:\n                return True\n        elif op2 == '+':\n            if a / b == c + d:\n                return True\n        elif op2 == '-':\n            if a / b == c - d:\n                return True\n        elif op2 == '/':\n            if a / b == c / d:\n                return True\n    return False\n\ndef main():\n    operators = ['*', '+', '-', '/']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n    if len(output) == 0:\n        print('problems ahead')\n    else:\n        for line in sorted(output):\n            print(line)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import itertools\n\na, b, c, d = map(int, input().split())\n\ndef check(a, b, c, d, op1, op2):\n    if op1 == '*':\n        if op2 == '*':\n            if a * b == c * d:\n                return True\n        elif op2 == '+':\n            if a * b == c + d:\n                return True\n        elif op2 == '-':\n            if a * b == c - d:\n                return True\n        elif op2 == '/':\n            if a * b == c / d:\n                return True\n    elif op1 == '+':\n        if op2 == '*':\n            if a + b == c * d:\n                return True\n        elif op2 == '+':\n            if a + b == c + d:\n                return True\n        elif op2 == '-':\n            if a + b == c - d:\n                return True\n        elif op2 == '/':\n            if a + b == c / d:\n                return True\n    elif op1 == '-':\n        if op2 == '*':\n            if a - b == c * d:\n                return True\n        elif op2 == '+':\n            if a - b == c + d:\n                return True\n        elif op2 == '-':\n            if a - b == c - d:\n                return True\n        elif op2 == '/':\n            if a - b == c / d:\n                return True\n    elif op1 == '/':\n        if op2 == '*':\n            if a / b == c * d:\n                return True\n        elif op2 == '+':\n            if a / b == c + d:\n                return True\n        elif op2 == '-':\n            if a / b == c - d:\n                return True\n        elif op2 == '/':\n            if a / b == c / d:\n                return True\n    return False\n\ndef main():\n    operators = ['*', '+', '-', '/']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n    if len(output) == 0:\n        print('problems ahead')\n    else:\n        for line in sorted(output):\n            print(line)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649734508,
  "object": "edit"
}
2022-04-11 23:35:10.839014 fix spelling mistakes 2 ["import itertools\na, b, c, d = map(int, input().split())\ndef check(a, b, c, d, op1, op2):\n    if op1 == '*':\n        if op2 == '*':\n            if a * b == c * d:\n                return True\n        elif op2 == '+':\n            if a * b == c + d:\n                return True\n        elif op2 == '-':\n            if a * b == c - d:\n                return True\n        elif op2 == '/':\n            if a * b == c / d:\n                return True\n    elif op1 == '+':\n        if op2 == '*':\n            if a + b == c * d:\n                return True\n        elif op2 == '+':\n            if a + b == c + d:\n                return True\n        elif op2 == '-':\n            if a + b == c - d:\n                return True\n        elif op2 == '/':\n            if a + b == c / d:\n                return True\n    elif op1 == '-':\n        if op2 == '*':\n            if a - b == c * d:\n                return True\n        elif op2 == '+':\n            if a - b == c + d:\n                return True\n        elif op2 == '-':\n            if a - b == c - d:\n                return True\n        elif op2 == '/':\n            if a - b == c / d:\n                return True\n    elif op1 == '/':\n        if op2 == '*':\n            if a / b == c * d:\n                return True\n        elif op2 == '+':\n            if a / b == c + d:\n                return True\n        elif op2 == '-':\n            if a / b == c - d:\n                return True\n        elif op2 == '/':\n            if a / b == c / d:\n                return True\n    return False\n\ndef main():\n    operators = ['*', '+', '-', '/']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n    if len(output) == 0:\n        print('problems ahead')\n    else:\n        for line in sorted(output):\n            print(line)\n\nif __name__ == '__main__':\n    main()\n", "import itertools\n\na, b, c, d = map(int, input().split())\n\ndef check(a, b, c, d, op1, op2):\n    if op1 == '*':\n        if op2 == '*':\n            if a * b == c * d:\n                return True\n        elif op2 == '+':\n            if a * b == c + d:\n                return True\n        elif op2 == '-':\n            if a * b == c - d:\n                return True\n        elif op2 == '/':\n            if a * b == c / d:\n                return True\n    elif op1 == '+':\n        if op2 == '*':\n            if a + b == c * d:\n                return True\n        elif op2 == '+':\n            if a + b == c + d:\n                return True\n        elif op2 == '-':\n            if a + b == c - d:\n                return True\n        elif op2 == '/':\n            if a + b == c / d:\n                return True\n    elif op1 == '-':\n        if op2 == '*':\n            if a - b == c * d:\n                return True\n        elif op2 == '+':\n            if a - b == c + d:\n                return True\n        elif op2 == '-':\n            if a - b == c - d:\n                return True\n        elif op2 == '/':\n            if a - b == c / d:\n                return True\n    elif op1 == '/':\n        if op2 == '*':\n            if a / b == c * d:\n                return True\n        elif op2 == '+':\n            if a / b == c + d:\n                return True\n        elif op2 == '-':\n            if a / b == c - d:\n                return True\n        elif op2 == '/':\n            if a / b == c / d:\n                return True\n    return False\n\ndef main():\n    operators = ['*', '+', '-', '/']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n    if len(output) == 0:\n        print('problems ahead')\n    else:\n        for line in sorted(output):\n            print(line)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 23:35:10.839198 size on output set 2
2022-04-11 23:35:10.839205 size on input set 2
2022-04-11 23:35:34.776878 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import itertools\n\na, b, c, d = map(int, input().split())\n\ndef check(a, b, c, d, op1, op2, output):\n    if op1 == '*':\n        if op2 == '*':\n            if a * b == c * d:\n                output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n        elif op2 == '+':\n            if a * b == c + d:\n                output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n        elif op2 == '-':\n            if a * b == c - d:\n                output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n        elif op2 == '/':\n            if a * b == c / d:\n                return True\n    elif op1 == '+':\n        if op2 == '*':\n            if a + b == c * d:\n                return True\n        elif op2 == '+':\n            if a + b == c + d:\n                return True\n        elif op2 == '-':\n            if a + b == c - d:\n                return True\n        elif op2 == '/':\n            if a + b == c / d:\n                return True\n    elif op1 == '-':\n        if op2 == '*':\n            if a - b == c * d:\n                return True\n        elif op2 == '+':\n            if a - b == c + d:\n                return True\n        elif op2 == '-':\n            if a - b == c - d:\n                return True\n        elif op2 == '/':\n            if a - b == c / d:\n                return True\n    elif op1 == '/':\n        if op2 == '*':\n            if a / b == c * d:\n                return True\n        elif op2 == '+':\n            if a / b == c + d:\n                return True\n        elif op2 == '-':\n            if a / b == c - d:\n                return True\n        elif op2 == '/':\n            if a / b == c / d:\n                return True\n    return False\n\ndef main():\n    operators = ['*', '+', '-', '/']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n    if len(output) == 0:\n        print('problems ahead')\n    else:\n        for line in sorted(output):\n            print(line)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import itertools\n\na, b, c, d = map(int, input().split())\n\ndef check(a, b, c, d, op1, op2):\n    if op1 == '*':\n        if op2 == '*':\n            if a * b == c * d:\n                return True\n        elif op2 == '+':\n            if a * b == c + d:\n                return True\n        elif op2 == '-':\n            if a * b == c - d:\n                return True\n        elif op2 == '/':\n            if a * b == c // d:\n                return True\n    elif op1 == '+':\n        if op2 == '*':\n            if a + b == c * d:\n                return True\n        elif op2 == '+':\n            if a + b == c + d:\n                return True\n        elif op2 == '-':\n            if a + b == c - d:\n                return True\n        elif op2 == '/':\n            if a + b == c // d:\n                return True\n    elif op1 == '-':\n        if op2 == '*':\n            if a - b == c * d:\n                return True\n        elif op2 == '+':\n            if a - b == c + d:\n                return True\n        elif op2 == '-':\n            if a - b == c - d:\n                return True\n        elif op2 == '/':\n            if a - b == c // d:\n                return True\n    elif op1 == '/':\n        if op2 == '*':\n            if a // b == c * d:\n                return True\n        elif op2 == '+':\n            if a // b == c + d:\n                return True\n        elif op2 == '-':\n            if a // b == c - d:\n                return True\n        elif op2 == '/':\n            if a // b == c // d:\n                return True\n    return False\n\ndef main():\n    operators = ['*', '+', '-', '/']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n    if len(output) == 0:\n        print('problems ahead')\n    else:\n        for line in sorted(output):\n            print(line)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649734511,
  "object": "edit"
}
2022-04-11 23:35:34.777108 fix syntax errors 2 ["import itertools\n\na, b, c, d = map(int, input().split())\n\ndef check(a, b, c, d, op1, op2, output):\n    if op1 == '*':\n        if op2 == '*':\n            if a * b == c * d:\n                output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n        elif op2 == '+':\n            if a * b == c + d:\n                output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n        elif op2 == '-':\n            if a * b == c - d:\n                output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n        elif op2 == '/':\n            if a * b == c / d:\n                return True\n    elif op1 == '+':\n        if op2 == '*':\n            if a + b == c * d:\n                return True\n        elif op2 == '+':\n            if a + b == c + d:\n                return True\n        elif op2 == '-':\n            if a + b == c - d:\n                return True\n        elif op2 == '/':\n            if a + b == c / d:\n                return True\n    elif op1 == '-':\n        if op2 == '*':\n            if a - b == c * d:\n                return True\n        elif op2 == '+':\n            if a - b == c + d:\n                return True\n        elif op2 == '-':\n            if a - b == c - d:\n                return True\n        elif op2 == '/':\n            if a - b == c / d:\n                return True\n    elif op1 == '/':\n        if op2 == '*':\n            if a / b == c * d:\n                return True\n        elif op2 == '+':\n            if a / b == c + d:\n                return True\n        elif op2 == '-':\n            if a / b == c - d:\n                return True\n        elif op2 == '/':\n            if a / b == c / d:\n                return True\n    return False\n\ndef main():\n    operators = ['*', '+', '-', '/']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n    if len(output) == 0:\n        print('problems ahead')\n    else:\n        for line in sorted(output):\n            print(line)\n\nif __name__ == '__main__':\n    main()\n", "import itertools\n\na, b, c, d = map(int, input().split())\n\ndef check(a, b, c, d, op1, op2):\n    if op1 == '*':\n        if op2 == '*':\n            if a * b == c * d:\n                return True\n        elif op2 == '+':\n            if a * b == c + d:\n                return True\n        elif op2 == '-':\n            if a * b == c - d:\n                return True\n        elif op2 == '/':\n            if a * b == c // d:\n                return True\n    elif op1 == '+':\n        if op2 == '*':\n            if a + b == c * d:\n                return True\n        elif op2 == '+':\n            if a + b == c + d:\n                return True\n        elif op2 == '-':\n            if a + b == c - d:\n                return True\n        elif op2 == '/':\n            if a + b == c // d:\n                return True\n    elif op1 == '-':\n        if op2 == '*':\n            if a - b == c * d:\n                return True\n        elif op2 == '+':\n            if a - b == c + d:\n                return True\n        elif op2 == '-':\n            if a - b == c - d:\n                return True\n        elif op2 == '/':\n            if a - b == c // d:\n                return True\n    elif op1 == '/':\n        if op2 == '*':\n            if a // b == c * d:\n                return True\n        elif op2 == '+':\n            if a // b == c + d:\n                return True\n        elif op2 == '-':\n            if a // b == c - d:\n                return True\n        elif op2 == '/':\n            if a // b == c // d:\n                return True\n    return False\n\ndef main():\n    operators = ['*', '+', '-', '/']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n    if len(output) == 0:\n        print('problems ahead')\n    else:\n        for line in sorted(output):\n            print(line)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 23:35:45.553486 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import itertools\na, b, c, d = map(int, input().split())\ndef check(a, b, c, d, op1, op2):\n    if op1 == '*':\n        if op2 == '*':\n            if a * b == c * d:\n                return True\n        elif op2 == '+':\n            if a * b == c + d:\n                return True\n        elif op2 == '-':\n            if a * b == c - d:\n                return True\n        elif op2 == '/':\n            if a * b == c // d:\n                return True\n    elif op1 == '+':\n        if op2 == '*':\n            if a + b == c * d:\n                return True\n        elif op2 == '+':\n            if a + b == c + d:\n                return True\n        elif op2 == '-':\n            if a + b == c - d:\n                return True\n        elif op2 == '/':\n            if a + b == c // d:\n                return True\n    elif op1 == '-':\n        if op2 == '*':\n            if a - b == c * d:\n                return True\n        elif op2 == '+':\n            if a - b == c + d:\n                return True\n        elif op2 == '-':\n            if a - b == c - d:\n                return True\n        elif op2 == '/':\n            if a - b == c // d:\n                return True\n    elif op1 == '/':\n        if op2 == '*':\n            if a / b == c * d:\n                return True\n        elif op2 == '+':\n            if a / b == c + d:\n                return True\n        elif op2 == '-':\n            if a / b == c - d:\n                return True\n        elif op2 == '/':\n            if a / b == c // d:\n                return True\n    return False\n\ndef main():\n    operators = ['*', '+', '-', '/']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n    if len(output) == 0:\n        print('problems ahead')\n    else:\n        for line in sorted(output):\n            print(line)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import itertools\na, b, c, d = map(int, input().split())\ndef check(a, b, c, d, op1, op2):\n    return eval(str(a) + op1 + str(b)) == eval(str(c) + op2 + str(d))\n\ndef main():\n    operators = ['*', '+', '-', '/']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n    if len(output) == 0:\n        print('problems ahead')\n    else:\n        for line in sorted(output):\n            print(line)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649734534,
  "object": "edit"
}
2022-04-11 23:35:45.553798 fix syntax errors 2 ["import itertools\na, b, c, d = map(int, input().split())\ndef check(a, b, c, d, op1, op2):\n    if op1 == '*':\n        if op2 == '*':\n            if a * b == c * d:\n                return True\n        elif op2 == '+':\n            if a * b == c + d:\n                return True\n        elif op2 == '-':\n            if a * b == c - d:\n                return True\n        elif op2 == '/':\n            if a * b == c // d:\n                return True\n    elif op1 == '+':\n        if op2 == '*':\n            if a + b == c * d:\n                return True\n        elif op2 == '+':\n            if a + b == c + d:\n                return True\n        elif op2 == '-':\n            if a + b == c - d:\n                return True\n        elif op2 == '/':\n            if a + b == c // d:\n                return True\n    elif op1 == '-':\n        if op2 == '*':\n            if a - b == c * d:\n                return True\n        elif op2 == '+':\n            if a - b == c + d:\n                return True\n        elif op2 == '-':\n            if a - b == c - d:\n                return True\n        elif op2 == '/':\n            if a - b == c // d:\n                return True\n    elif op1 == '/':\n        if op2 == '*':\n            if a / b == c * d:\n                return True\n        elif op2 == '+':\n            if a / b == c + d:\n                return True\n        elif op2 == '-':\n            if a / b == c - d:\n                return True\n        elif op2 == '/':\n            if a / b == c // d:\n                return True\n    return False\n\ndef main():\n    operators = ['*', '+', '-', '/']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n    if len(output) == 0:\n        print('problems ahead')\n    else:\n        for line in sorted(output):\n            print(line)\n\nif __name__ == '__main__':\n    main()\n", "import itertools\na, b, c, d = map(int, input().split())\ndef check(a, b, c, d, op1, op2):\n    return eval(str(a) + op1 + str(b)) == eval(str(c) + op2 + str(d))\n\ndef main():\n    operators = ['*', '+', '-', '/']\n    output = []\n    for op1, op2 in itertools.product(operators, repeat=2):\n        if check(a, b, c, d, op1, op2):\n            output.append(str(a) + ' ' + op1 + ' ' + str(b) + ' = ' + str(c) + ' ' + op2 + ' ' + str(d))\n    if len(output) == 0:\n        print('problems ahead')\n    else:\n        for line in sorted(output):\n            print(line)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 23:35:45.553984 size on output set 4
2022-04-11 23:35:45.554000 num operations 2
2022-04-11 23:35:45.554005 size on input set 1
2022-04-11 23:35:47.914727 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# TODO: Make this faster.\n\nfrom itertools import permutations\n\na, b, c, d = map(int, input().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x / y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    if ops[p[0]](a, b) == ops[p[1]](c, d):\n        valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n"
    },
    {
      "index": 1,
      "text": "\n\n# TODO: Make this faster, but it's already fast enough\n\nfrom itertools import permutations\n\na, b, c, d = map(int, input().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x / y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    if ops[p[0]](a, b) == ops[p[1]](c, d):\n        valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n"
    }
  ],
  "created": 1649734545,
  "object": "edit"
}
2022-04-11 23:35:47.914916 fix spelling mistakes 2 ["\n\n# TODO: Make this faster.\n\nfrom itertools import permutations\n\na, b, c, d = map(int, input().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x / y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    if ops[p[0]](a, b) == ops[p[1]](c, d):\n        valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n", "\n\n# TODO: Make this faster, but it's already fast enough\n\nfrom itertools import permutations\n\na, b, c, d = map(int, input().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x / y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    if ops[p[0]](a, b) == ops[p[1]](c, d):\n        valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n"]
2022-04-11 23:35:47.914932 size on output set 2
2022-04-11 23:35:47.914936 size on input set 2
2022-04-11 23:35:51.602144 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# TODO: Make this faster, but it's already fast enough\n\nfrom itertools import permutations\n\na, b, c, d = map(int, input().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x / y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    if ops[p[0]](a, b) == ops[p[1]](c, d):\n        valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n"
    },
    {
      "index": 1,
      "text": "\n\n# TODO: Make this faster, but it's already fast enough\n\nfrom itertools import permutations\n\na, b, c, d = map(int, input().split())\n\nops = {\n    '+': lambda x, y: x + y\n    '-': lambda x, y: x - y\n    '*': lambda x, y: x * y\n    '/': lambda x, y: x / y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    if ops[p[0]](a, b) == ops[p[1]](c, d):\n        valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n"
    }
  ],
  "created": 1649734548,
  "object": "edit"
}
2022-04-11 23:35:51.602248 fix syntax errors 2 ["\n# TODO: Make this faster, but it's already fast enough\n\nfrom itertools import permutations\n\na, b, c, d = map(int, input().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x / y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    if ops[p[0]](a, b) == ops[p[1]](c, d):\n        valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n", "\n\n# TODO: Make this faster, but it's already fast enough\n\nfrom itertools import permutations\n\na, b, c, d = map(int, input().split())\n\nops = {\n    '+': lambda x, y: x + y\n    '-': lambda x, y: x - y\n    '*': lambda x, y: x * y\n    '/': lambda x, y: x / y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    if ops[p[0]](a, b) == ops[p[1]](c, d):\n        valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n"]
2022-04-11 23:35:54.428784 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n# TODO: Make this faster.\n\nfrom itertools import permutations\n\na, b, c, d = map(int, sys.stdin.readline().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x / y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    if ops[p[0]](a, b) == ops[p[1]](c, d):\n        valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n"
    },
    {
      "index": 1,
      "text": "\n\n# TODO: Make this faster\n\nfrom itertools import permutations\n\na, b, c, d = map(int, input().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x / y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    if ops[p[0]](a, b) == ops[p[1]](c, d):\n        valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n"
    }
  ],
  "created": 1649734551,
  "object": "edit"
}
2022-04-11 23:35:54.429015 fix syntax errors 2 ["\nimport sys\n# TODO: Make this faster.\n\nfrom itertools import permutations\n\na, b, c, d = map(int, sys.stdin.readline().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x / y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    if ops[p[0]](a, b) == ops[p[1]](c, d):\n        valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n", "\n\n# TODO: Make this faster\n\nfrom itertools import permutations\n\na, b, c, d = map(int, input().split())\n\nops = {\n    '+': lambda x, y: x + y,\n    '-': lambda x, y: x - y,\n    '*': lambda x, y: x * y,\n    '/': lambda x, y: x / y\n}\n\nvalid = []\n\nfor p in permutations(list(ops.keys()), 2):\n    if ops[p[0]](a, b) == ops[p[1]](c, d):\n        valid.append(str(a) + ' ' + p[0] + ' ' + str(b) + ' = ' + str(c) + ' ' + p[1] + ' ' + str(d))\n\nif len(valid) == 0:\n    print('problems ahead')\nelse:\n    for v in valid:\n        print(v)\n"]
2022-04-11 23:35:54.429047 size on output set 4
2022-04-11 23:35:54.429059 num operations 2
2022-04-11 23:35:54.429062 size on input set 1
2022-04-11 23:35:56.749322 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom itertools import product\na,b,c,d = map(int,input().split())\nvalid = []\nfor p in product(['+','-','*','/'],repeat=2):\n    if eval(f\"{a}{p[0]}{b} == {c}{p[1]}{d}\"):\n        valid.append(f\"{a} {p[0]} {b} = {c} {p[1]} {d}\")\nvalid.sort()\nif valid:\n    for v in valid:\n        print(v)\nelse:\n    print(\"problem ahead\")\n"
    },
    {
      "index": 1,
      "text": "from itertools import product\na,b,c,d = map(int,input().split())\nvalid = []\nfor p in product(['+','-','*','/'],repeat=2):\n    if eval(f\"{a}{p[0]}{b} == {c}{p[1]}{d}\"):\n        valid.append(f\"{a} {p[0]} {b} = {c} {p[1]} {d}\")\nvalid.sort()\nif valid:\n    for v in valid:\n        print(v)\nelse:\n    print(\"problems ahead!\")\n"
    }
  ],
  "created": 1649734554,
  "object": "edit"
}
2022-04-11 23:35:56.749540 fix spelling mistakes 2 ['\nfrom itertools import product\na,b,c,d = map(int,input().split())\nvalid = []\nfor p in product([\'+\',\'-\',\'*\',\'/\'],repeat=2):\n    if eval(f"{a}{p[0]}{b} == {c}{p[1]}{d}"):\n        valid.append(f"{a} {p[0]} {b} = {c} {p[1]} {d}")\nvalid.sort()\nif valid:\n    for v in valid:\n        print(v)\nelse:\n    print("problem ahead")\n', 'from itertools import product\na,b,c,d = map(int,input().split())\nvalid = []\nfor p in product([\'+\',\'-\',\'*\',\'/\'],repeat=2):\n    if eval(f"{a}{p[0]}{b} == {c}{p[1]}{d}"):\n        valid.append(f"{a} {p[0]} {b} = {c} {p[1]} {d}")\nvalid.sort()\nif valid:\n    for v in valid:\n        print(v)\nelse:\n    print("problems ahead!")\n']
2022-04-11 23:35:56.749565 size on output set 2
2022-04-11 23:35:56.749572 size on input set 2
2022-04-11 23:36:01.099729 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "from itertools import product\na,b,c,d = map(int,input().split())\nvalid = []\nfor p in product(['+','-','*','/'],repeat=2):\n    if eval(\"{}{}{} == {}{}{}\".format(a,p[0],b,c,p[1],d)):\n        valid.append(\"{} {} {} = {} {} {}\".format(a,p[0],b,c,p[1],d))\nvalid.sort()\nif valid:\n    for v in valid:\n        print(v)\nelse:\n    print(\"problems ahead!\")\n"
    },
    {
      "index": 1,
      "text": "from itertools import product\na,b,c,d = map(int,input().split())\nvalid = []\nfor p in product(['+','-','*','/'],repeat=2):\n    if eval(\"{}{}{} == {}{}{}\".format(a,p[0],b,c,p[1],d)):\n        valid.append(\"{} {} {} = {} {} {}\".format(a,p[0],b,c,p[1],d))\nvalid.sort()\nif valid:\n    for v in valid:\n        print(v)\nelse:\n    print(\"problems ahead!\")\n"
    }
  ],
  "created": 1649734557,
  "object": "edit"
}
2022-04-11 23:36:01.100059 fix syntax errors 2 ['from itertools import product\na,b,c,d = map(int,input().split())\nvalid = []\nfor p in product([\'+\',\'-\',\'*\',\'/\'],repeat=2):\n    if eval("{}{}{} == {}{}{}".format(a,p[0],b,c,p[1],d)):\n        valid.append("{} {} {} = {} {} {}".format(a,p[0],b,c,p[1],d))\nvalid.sort()\nif valid:\n    for v in valid:\n        print(v)\nelse:\n    print("problems ahead!")\n', 'from itertools import product\na,b,c,d = map(int,input().split())\nvalid = []\nfor p in product([\'+\',\'-\',\'*\',\'/\'],repeat=2):\n    if eval("{}{}{} == {}{}{}".format(a,p[0],b,c,p[1],d)):\n        valid.append("{} {} {} = {} {} {}".format(a,p[0],b,c,p[1],d))\nvalid.sort()\nif valid:\n    for v in valid:\n        print(v)\nelse:\n    print("problems ahead!")\n']
2022-04-11 23:36:05.430513 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom itertools import product\na,b,c,d = map(int,input().split())\nvalid = []\nfor p in product(['+','-','*','/'],repeat=2):\n    if eval(\"{}{}{} == {}{}{}\".format(a,p[0],b,c,p[1],d)):\n        valid.append(\"{} {} {} = {} {} {}\".format(a,p[0],b,c,p[1],d))\nvalid.sort()\nif valid:\n    for v in valid:\n        print(v)\nelse:\n    print(\"problem ahead\")\n"
    },
    {
      "index": 1,
      "text": "\nfrom itertools import product\na,b,c,d = map(int,input().split())\nvalid = []\nfor p in product(['+','-','*','/'],repeat=2):\n    if eval(\"{}{}{} == {}{}{}\".format(a,p[0],b,c,p[1],d)):\n        valid.append(\"{} {} {} = {} {} {}\".format(a,p[0],b,c,p[1],d))\nvalid.sort()\nif valid:\n    for v in valid:\n        print(v)\nelse:\n    print(\"problem ahead\")\n"
    }
  ],
  "created": 1649734561,
  "object": "edit"
}
2022-04-11 23:36:05.430613 fix syntax errors 2 ['\nfrom itertools import product\na,b,c,d = map(int,input().split())\nvalid = []\nfor p in product([\'+\',\'-\',\'*\',\'/\'],repeat=2):\n    if eval("{}{}{} == {}{}{}".format(a,p[0],b,c,p[1],d)):\n        valid.append("{} {} {} = {} {} {}".format(a,p[0],b,c,p[1],d))\nvalid.sort()\nif valid:\n    for v in valid:\n        print(v)\nelse:\n    print("problem ahead")\n', '\nfrom itertools import product\na,b,c,d = map(int,input().split())\nvalid = []\nfor p in product([\'+\',\'-\',\'*\',\'/\'],repeat=2):\n    if eval("{}{}{} == {}{}{}".format(a,p[0],b,c,p[1],d)):\n        valid.append("{} {} {} = {} {} {}".format(a,p[0],b,c,p[1],d))\nvalid.sort()\nif valid:\n    for v in valid:\n        print(v)\nelse:\n    print("problem ahead")\n']
2022-04-11 23:36:05.430629 size on output set 2
2022-04-11 23:36:05.430635 num operations 2
2022-04-11 23:36:05.430639 size on input set 1
2022-04-11 23:36:09.512539 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# The solution is pretty straightforward.\n# We use a list of operators, and then use a list comprehension to generate all possible expressions.\n# Then, we filter out the ones that are not valid.\n# Finally, we sort them alphabetically, and print them.\n\na,b,c,d = [int(x) for x in input().split()]\n\noperators = [\"+\",\"-\",\"*\",\"/\"]\n\nexpressions = [f\"{a} {i} {b} = {c} {j} {d}\" for i in operators for j in operators]\n\nexpressions = [x for x in expressions if eval(x.replace(\"=\",\"==\"))]\n\nif len(expressions) == 0:\n    print(\"problems ahead\")\nelse:\n    print(\"\\n\".join(sorted(expressions)))\n"
    },
    {
      "index": 1,
      "text": "\n\n# The solution is pretty straightforward.\n# We use a list of operators, and then use a list comprehension to generate all possible expressions.\n# Then, we filter out the ones that are not valid.\n# Finally, we sort them alphabetically, and print them.\n\na,b,c,d = [int(x) for x in input().split()]\n\noperators = [\"+\",\"-\",\"*\",\"/\"]\n\nexpressions = [f\"{a} {i} {b} = {c} {j} {d}\" for i in operators for j in operators]\n\nexpressions = [x for x in expressions if eval(x.replace(\"=\",\"==\"))]\n\nif len(expressions) == 0:\n    print(\"problems ahead\")\nelse:\n    print(\"\\n\".join(sorted(expressions)))\n"
    }
  ],
  "created": 1649734565,
  "object": "edit"
}
2022-04-11 23:36:09.512755 fix spelling mistakes 2 ['\n\n# The solution is pretty straightforward.\n# We use a list of operators, and then use a list comprehension to generate all possible expressions.\n# Then, we filter out the ones that are not valid.\n# Finally, we sort them alphabetically, and print them.\n\na,b,c,d = [int(x) for x in input().split()]\n\noperators = ["+","-","*","/"]\n\nexpressions = [f"{a} {i} {b} = {c} {j} {d}" for i in operators for j in operators]\n\nexpressions = [x for x in expressions if eval(x.replace("=","=="))]\n\nif len(expressions) == 0:\n    print("problems ahead")\nelse:\n    print("\\n".join(sorted(expressions)))\n', '\n\n# The solution is pretty straightforward.\n# We use a list of operators, and then use a list comprehension to generate all possible expressions.\n# Then, we filter out the ones that are not valid.\n# Finally, we sort them alphabetically, and print them.\n\na,b,c,d = [int(x) for x in input().split()]\n\noperators = ["+","-","*","/"]\n\nexpressions = [f"{a} {i} {b} = {c} {j} {d}" for i in operators for j in operators]\n\nexpressions = [x for x in expressions if eval(x.replace("=","=="))]\n\nif len(expressions) == 0:\n    print("problems ahead")\nelse:\n    print("\\n".join(sorted(expressions)))\n']
2022-04-11 23:36:09.512782 size on output set 1
2022-04-11 23:36:09.512787 size on input set 1
2022-04-11 23:36:13.610710 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# The solution is pretty straightforward. We use a list of operators, and then use a list comprehension to generate all possible expressions. Then, we filter out the ones that are not valid. Finally, we sort them alphabetically, and print them.\n\na,b,c,d = [int(x) for x in input().split()]\n\noperators = [\"+\",\"-\",\"*\",\"/\"]\n\nexpressions = [f\"{a} {i} {b} = {c} {j} {d}\" for i in operators for j in operators]\n\nexpressions = [x for x in expressions if eval(x.replace(\"=\",\"==\"))]\n\nif len(expressions) == 0:\n    print(\"problems ahead\")\nelse:\n    print(\"\\n\".join(sorted(expressions)))\n"
    },
    {
      "index": 1,
      "text": "\n\n# The solution is pretty straightforward.\n# We use a list of operators, and then use a list comprehension to generate all possible expressions.\n# Then, we filter out the ones that are not valid.\n# Finally, we sort them alphabetically, and print them.\n\na,b,c,d = [int(x) for x in input().split()]\n\noperators = [\"+\",\"-\",\"*\",\"/\"]\n\nexpressions = [\"{} {} {} = {} {} {}\".format(a,i,b,c,j,d) for i in operators for j in operators]\n\nexpressions = [x for x in expressions if eval(x.replace(\"=\",\"==\"))]\n\nif len(expressions) == 0:\n    print(\"problems ahead\")\nelse:\n    print(\"\\n\".join(sorted(expressions)))\n"
    }
  ],
  "created": 1649734569,
  "object": "edit"
}
2022-04-11 23:36:13.610849 fix syntax errors 2 ['\n\n# The solution is pretty straightforward. We use a list of operators, and then use a list comprehension to generate all possible expressions. Then, we filter out the ones that are not valid. Finally, we sort them alphabetically, and print them.\n\na,b,c,d = [int(x) for x in input().split()]\n\noperators = ["+","-","*","/"]\n\nexpressions = [f"{a} {i} {b} = {c} {j} {d}" for i in operators for j in operators]\n\nexpressions = [x for x in expressions if eval(x.replace("=","=="))]\n\nif len(expressions) == 0:\n    print("problems ahead")\nelse:\n    print("\\n".join(sorted(expressions)))\n', '\n\n# The solution is pretty straightforward.\n# We use a list of operators, and then use a list comprehension to generate all possible expressions.\n# Then, we filter out the ones that are not valid.\n# Finally, we sort them alphabetically, and print them.\n\na,b,c,d = [int(x) for x in input().split()]\n\noperators = ["+","-","*","/"]\n\nexpressions = ["{} {} {} = {} {} {}".format(a,i,b,c,j,d) for i in operators for j in operators]\n\nexpressions = [x for x in expressions if eval(x.replace("=","=="))]\n\nif len(expressions) == 0:\n    print("problems ahead")\nelse:\n    print("\\n".join(sorted(expressions)))\n']
2022-04-11 23:36:13.610868 size on output set 2
