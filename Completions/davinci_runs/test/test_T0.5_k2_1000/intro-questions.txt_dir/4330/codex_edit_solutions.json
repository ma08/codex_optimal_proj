["\n\nimport sys\n\ndef main():\n    a = int(sys.stdin.readline())\n    b = int(sys.stdin.readline())\n    print(a + b)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    a = int(sys.stdin.readline())\n    b = int(sys.stdin.readline())\n    print(a + b)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    a, b = map(int, sys.stdin.readline().rstrip().split())\n    if a < b:\n        a, b = b, a\n    if a - b == 0:\n        print(0)\n    elif a - b < b:\n        print(a - b)\n    else:\n        print(\"IMPOSSIBLE\")\n\nif __name__ == '__main__':\n    main()\n", "\n# Read input \nA, B = map(int, input().split())\n\n# Compute\nK = (A + B) // 2\n\n# Check if K satisfies the condition \nif abs(A - K) == abs(B - K):\n    print(K)\nelse:\n    print(\"IMPOSSIBLE\") \n", "\n# Read input \nA, B = map(int, input().split())\n\n# Compute\nK = (A + B) // 2\n\n# Check if K satisfies the condition\nif abs(A - K) == abs(B - K):\n    print(K)\nelse:\n    print(\"IMPOSSIBLE\")\n", "import sys\n\ndef main():\n    a, b = map(int, sys.stdin.readline().rstrip().split())\n    if a < b:\n        a, b = b, a\n    if a - b == 0:\n        print(0)\n    elif a - b < b:\n        print(a - b)\n    else:\n        print(\"IMPOSSIBLE\")\n\nif __name__ == '__main__':\n    main()\n", "\n\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Mon Jan 27 10:32:15 2020\n\n@author: j-bd\n\"\"\"\n\n# Check if K satisfies the conditions\nif abs(A - K) == abs(B - K):\n    print(K)\nelse:\n    print(\"IMPOSSIBLE\")\n", "\n\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Fri Jul  3 15:09:31 2020\n\n@author: krishna\n\"\"\"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Importing the dataset\ndataset = pd.read_csv('Data.csv')\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, 3].values\n\n# Taking care of missing data\nfrom sklearn.impute import SimpleImputer\nimputer = SimpleImputer(missing_values = np.nan, strategy = 'mean')\nimputer = imputer.fit(X[:, 1:3])\nX[:, 1:3] = imputer.transform(X[:, 1:3])\n\n# Encoding categorical data\n# Encoding the Independent Variable\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [0])], remainder='passthrough')\nX = np.array(ct.fit_transform(X))\n# Encoding the Dependent Variable\nfrom sklearn.preprocessing import LabelEncoder\ny = LabelEncoder().fit_transform(y)\n\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)\n"]