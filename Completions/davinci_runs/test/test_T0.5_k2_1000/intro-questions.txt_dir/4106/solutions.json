["import sys\nfrom math import *\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn map(int, minp().split())\n\nn, k, x = mints()\na = list(mints())\nd = [None]*(n+1)\np = [None]*(n+1)\nfor i in range(0,k):\n\td[i] = a[i]\nfor xx in range(2,x+1):\n\td,p = p,d\n\tfor nn in range(n):\n\t\tm = None\n\t\tfor i in range(max(0,nn-k),nn):\n\t\t\tif p[i] != None:\n\t\t\t\tif m == None:\n\t\t\t\t\tm = p[i]\n\t\t\t\telse:\n\t\t\t\t\tm = max(m, p[i])\n\t\tif m != None:\n\t\t\td[nn] = m + a[nn]\n\t\telse:\n\t\t\td[nn] = None\nm = -1\nfor i in range(n-k,n):\n\tif d[i] != None:\n\t\tm = max(m, d[i])\nprint(m)", "# -*- coding: utf-8 -*-\n\nimport math\nimport collections\nimport bisect\nimport heapq\nimport time\nimport itertools\nimport sys\n\n\"\"\"\ncreated by shhuan at 2018/11/17 00:27\n\n\n\"\"\"\n\nN, K, X = map(int, input().split())\nA = [0] + [int(x) for x in input().split()]\n\ndp = [[float('-inf') for _ in range(X+1)] for _ in range(N+1)]\ndp[0][X] = 0\n\nfor i in range(1, N+1):\n    for x in range(X):\n        for p in range(1, K+1):\n            if i-p < 0:\n                break\n            if dp[i-p][x+1] < 0:\n                continue\n            dp[i][x] = max(dp[i][x], dp[i-p][x+1] + A[i])\n\nans = max([max(v) for v in dp[N-K+1:]])\nif ans < 0:\n    print(-1)\nelse:\n    print(ans)", "N,K,X = list(map(int,input().split()))\narr = [0] + [int(i) for i in input().split()]\n\ndp = [[float('-inf') for _ in range(X+1)] for _ in range(N+1)]\ndp[0][X] = 0\n\nfor i in range(1,N+1):\n    for x in range(X):\n        for p in range(1,K+1):\n            if i - p < 0:\n                break\n            if dp[i-p][x+1] < 0:\n                continue\n            dp[i][x] = max(dp[i][x], dp[i-p][x+1] + arr[i])\n\nans = max([max(v) for v in dp[N-K+1:]])\n\nif ans < 0:\n    print(-1)\nelse:\n    print(ans)\n", "n, k, x = list(map(int, input().split()))\na = [None] + list(map(int, input().split()))\ndp = [[-1] * (n + 1) for i in range(x + 1)]\ndp[0][0] = 0\nfor i in range(1, x + 1):\n    for j in range(1, n + 1):\n        dp[i][j] = max(dp[i - 1][j2] for j2 in range(max(0, j - k), j))\n        if dp[i][j] != -1: dp[i][j] += a[j]\nans = max(dp[x][j] for j in range(n - k + 1, n + 1))\nprint(ans)\n", "n, k, x = map(int, input().split())\na = [None] + list(map(int, input().split()))\ndp = [[-1] * (n + 1) for i in range(x + 1)]\ndp[0][0] = 0\nfor i in range(1, x + 1):\n    for j in range(1, n + 1):\n        dp[i][j] = max(dp[i - 1][max(0, j - k):j])\n        if dp[i][j] != -1: dp[i][j] += a[j]\nans = max(dp[x][n - k + 1:n + 1])\nprint(ans)", "from functools import lru_cache\n\nn, k, x = list(map(int, input().split()))\n\narr = list(map(int, input().split()))\n\n@lru_cache(maxsize=50000)\ndef dp(i,y):\n    if i>=0 and i<k and y==0:\n        return 0\n    elif i < 0 or y<= 0:\n        return -1000000000001\n    return max(dp(i-delta-1, y-1) + arr[i-delta-1] for delta in range(min(k,i+1)))\n\nprint(max(dp(n,x),-1))\n", "from sys import stdin, stdout\nimport collections\n\n#T = int(input())\n#s = input()\nN,K,X = [int(x) for x in stdin.readline().split()]\narr = [int(x) for x in stdin.readline().split()]\n\nif X < N//K:\n    print(-1)\n    quit()\n    \ndp = [[0]*N for _ in range(X)]\n\nfor i in range(K):\n    dp[0][i] = arr[i]\n    \nfor i in range(X-1):\n    for j in range(N):\n        if dp[i][j]!=0:\n            for z in range(j+1,min(j+K+1,N)):\n                #print(i,j,i+1,z)\n                dp[i+1][z] = max(dp[i+1][z], dp[i][j] + arr[z])\n                \n\nres = 0        \nfor i in range(N-K,N):\n    res = max(res,dp[X-1][i])\n    \nprint(res)", "import sys\nS = sys.stdin.read()\nS = list([list(map(int, x)) for x in list([x.split() for x in [x for x in S.split('\\n') if len(x) > 1]])])\nn, k, x, B = S[0][0], S[0][1], S[0][2], S[1]\n\nX = [[-1 for i in range(x+1)] for i in range(n+1)]\nX[0][0] = 0\nfor i in range(1, n+1): \n    for j in range(1, x+1): \n        X[i][j] = max([X[i][j], max([-1] + [X[i-l][j-1]+B[i-1] for l in range(1, min([i, k])+1) if X[i-l][j-1] != -1])])\nprint(max(list(map(max, X[n-k+1:n+1]))))\n", "# -*- coding: utf-8 -*-\n\nimport sys\n\ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\ndef Yes(): print('Yes')\ndef No(): print('No')\ndef YES(): print('YES')\ndef NO(): print('NO')\nINF = 10 ** 18\nMOD = 10 ** 9 + 7\n\nN, K, X = MAP()\nA = LIST()\n\ndp = list2d(X+1, N+1, -1)\ndp[0][0] = 0\nfor i in range(X):\n    for j in range(N):\n        if dp[i][j] == -1:\n            continue\n        for k in range(j, min(j+K, N)):\n            dp[i+1][k+1] = max(dp[i+1][k+1], dp[i][j] + A[k])\nans = max(dp[X][-K:])\nprint(ans)\n", "# -*- coding: utf-8 -*-\n\nimport sys\n\ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\ndef Yes(): print('Yes')\ndef No(): print('No')\ndef YES(): print('YES')\ndef NO(): print('NO')\nINF = 10 ** 18\nMOD = 10 ** 9 + 7\n\nN, K, X = MAP()\nA = [0] + LIST()\n\ndp = list2d(X+1, N+1, -1)\ndp[0][0] = 0\nfor i in range(X):\n    for j in range(N):\n        if dp[i][j] == -1:\n            continue\n        for k in range(j+1, min(j+K+1, N+1)):\n            dp[i+1][k] = max(dp[i+1][k], dp[i][j] + A[k])\nans = max(dp[X][-K:])\nprint(ans)\n", "# -*- coding: utf-8 -*-\n\nimport sys\n\ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef INT(): return int(input())\ndef MAP(): return list(map(int, input().split()))\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\ndef Yes(): print('Yes')\ndef No(): print('No')\ndef YES(): print('YES')\ndef NO(): print('NO')\nINF = 10 ** 18\nMOD = 10 ** 9 + 7\n\nN, K, X = MAP()\nA = [0] + LIST()\n\ndp = list2d(X+1, N+1, -1)\ndp[0][0] = 0\nfor i in range(X):\n    for j in range(i, N):\n        if dp[i][j] == -1:\n            continue\n        for k in range(j+1, min(j+K+1, N+1)):\n            dp[i+1][k] = max(dp[i+1][k], dp[i][j] + A[k])\nans = max(dp[X][-K:])\nprint(ans)\n"]