["N, M = map(int, input().split())\ngrid = [input() for _ in range(N)]\n\ncount = 0\nfor i in range(N):\n    for j in range(M):\n        if grid[i][j] == '_':\n            count += 1\nprint(count)\n", "n, m = map(int, input().split())\n\ndance = []\nfor _ in range(n):\n    dance.append(input())\n\ncount = 0\nfor i in range(m):\n    if dance[0][i] == '$':\n        count += 1\n        while i < m and dance[0][i] == '$':\n            i += 1\n\nprint(count)\n", "N, M = map(int, input().split())\ngrid = [input() for _ in range(N)]\n\ncount = 0\nfor i in range(M):\n    if grid[0][i] == '_':\n        count += 1\nprint(count)\n", "\n# \nimport sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    grid = []\n    for i in range(n):\n        grid.append(sys.stdin.readline().strip())\n    count = 0\n    for j in range(m):\n        if grid[0][j] == '_':\n            count += 1\n            while j < m and grid[0][j] == '_':\n                j += 1\n    print(count)\n\nmain()\n", "import sys\n\ndef main():\n    n, m = [int(i) for i in input().split()]\n    grid = []\n    for i in range(n):\n        grid.append(input().strip())\n    count = 0\n    for i in range(n):\n        if grid[i][0] == '_':\n            count += 1\n            while i < n and grid[i][0] == '_':\n                i += 1\n    print(count)\n\nmain()\n", "# https://codeforces.com/problemset/problem/1238/B\n\nfrom collections import defaultdict\n\ndef solve():\n    n = int(input())\n    s = input()\n    d = defaultdict(int)\n    for i in range(n):\n        d[s[i]] += 1\n\n    if len(d) == 1:\n        print(0)\n        return\n\n    min_count = n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if s[i] != s[j]:\n                count = 0\n                for k in range(i, j + 1):\n                    if s[k] != s[i] and s[k] != s[j]:\n                        count += 1\n                min_count = min(min_count, count)\n\n    print(min_count)\n\nt = int(input())\nfor _ in range(t):\n    solve()\n", "\n#----Solution----#\n#----Solution----#\n#----Solution----#\n\ndef main():\n    n, m = map(int, input().split())\n    l = []\n    count = 0\n    for i in range(n):\n        l.append(input())\n    for i in range(m):\n        if l[0][i] == '_':\n            count += 1\n    print(count)\n\nmain()\n", "import sys\n\ndef main():\n    # n, m = [int(i) for i in sys.stdin.readline().split()]\n    # grid = []\n    # for i in range(n):\n    #     grid.append(sys.stdin.readline().strip())\n    # count = 0\n    # for j in range(m):\n    #     if grid[0][j] == '_':\n    #         count += 1\n    #         while j < m and grid[0][j] == '_':\n    #             j += 1\n    # print(count)\n    print(sys.stdin.readline())\n\nmain()\n", "\n\n# Written by: Eric Wright\n# Date: 1/28/2020\n\nimport sys\n\ndef main():\n    # get input from stdin\n    N, M = [int(x) for x in input().split()]\n    grid = []\n    for i in range(N):\n        grid.append(input())\n    # get the number of columns that are not blank\n    count = 0\n    for i in range(M):\n        # if the column is not blank, increment count\n        if grid[0][i] == '$':\n            count += 1\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "# https://codeforces.com/problemset/problem/1238/A\n\nfor _ in range(int(input())):\n    n, m = map(int, input().split())\n    dance = []\n    for _ in range(n):\n        dance.append(input())\n    count = 0\n    for i in range(m):\n        if dance[0][i] == '$':\n            count += 1\n            while i < m and dance[0][i] == '$':\n                i += 1\n    print(count)\n", "\n# Written by: Eric Wright\n# Date: 1/29/2020\n\nimport sys\n\ndef main():\n    # get input from stdin\n    N, M = [int(x) for x in input().split()]\n    grid = []\n    for i in range(N):\n        grid.append(input())\n    # get the number of columns that are not blank\n    count = 0\n    for i in range(M):\n        # if the column is not blank, increment count\n        if grid[0][i] == '$':\n            count += 1\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    input()\n    N, M = map(int, input().split())\n    grid = []\n    for _ in range(N):\n        grid.append(input().strip() + '_')\n    moves = 0\n    for i in range(M):\n        if grid[0][i] == '_':\n            moves += 1\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n", "\n#----Solution----#\n\ndef main():\n    n, m = map(int, input().split()) #inputs the number of rows and columns\n    l = [] #creates a list\n    count = 0 #initializes count\n    for i in range(n): #iterates through the rows\n        l.append(input()) #appends the input to the list\n    for i in range(m): #iterates through the columns\n        if l[0][i] == '_': #checks if the first row's column is a '_'\n            count += 1 #increments count\n    print(count) #prints count\n\nmain()\n", "\nprint(\"hello world\")\n", "n, m = map(int, input().split())\nd = []\nfor i in range(n):\n    d.append(input())\n\nt = 0\nfor i in range(m):\n    if d[0][i] == '_':\n        t += 1\nprint(t)\n", "\n\n# Written by: Eric Wright\n# Date: 1/29/2020\n\nimport sys\n\ndef main():\n    # get input from stdin\n    # N, M = [int(x) for x in input().split()]\n    # grid = []\n    # for i in range(N):\n    #     grid.append(input())\n    # # get the number of columns that are not blank\n    # count = 0\n    # for i in range(M):\n    #     # if the column is not blank, increment count\n    #     if grid[0][i] == '$':\n    #         count += 1\n    # print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# Written by: Eric Wright and Eric Zavala\n# Date: 1/28/2020\n\nimport sys\n\ndef main():\n    # get input from stdin\n    N, M = [int(x) for x in sys.stdin.readline().split()]\n    grid = []\n    for i in range(N):\n        grid.append(sys.stdin.readline())\n    # get the number of columns that are not blank\n    count = 0\n    for i in range(M):\n        # if the column is not blank, increment count\n        if grid[0][i] == '$':\n            count += 1\n    print(count)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    input = sys.stdin.readline\n    N, M = map(int, input().split())\n    grid = []\n    for _ in range(N):\n        grid.append(input().rstrip())\n    moves = 0\n    for i in range(M):\n        if grid[0][i] == '_':\n            moves += 1\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef main():\n    n, m = [int(i) for i in sys.stdin.readline().split()]\n    grid = []\n    for i in range(n):\n        grid.append(sys.stdin.readline().strip())\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '_':\n                count += 1\n                while j < m and grid[i][j] == '_':\n                    j += 1\n    print(count)\n\nmain()\n", "\nn = int(input())\n\na = list(map(int, input().split()))\n\nb = list(map(int, input().split()))\n\nc = list(map(int, input().split()))\n\na.sort()\nb.sort()\nc.sort()\n\nans = 0\n\nfor i in range(n):\n    for j in range(n):\n        if b[j] > a[i]:\n            break\n        for k in range(n):\n            if c[k] > b[j]:\n                break\n            ans += 1\n\nprint(ans)\n", "import sys\n\ndef main():\n    input = sys.stdin.readline()\n    N, M = map(int, input().split())\n    grid = []\n    for _ in range(N):\n        grid.append(input().strip())\n    moves = 0\n    for i in range(M):\n        if grid[0][i] == '_':\n            moves += 1\n    print(moves)\n\nif __name__ == \"__main__\":\n    main()\n"]