2022-04-12 01:10:31.631030 num operations 2
2022-04-12 01:10:31.631060 size on input set 1
2022-04-12 01:10:33.910827 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# TODO: implement the solution.\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n# TODO: implement the solution here\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649740231,
  "object": "edit"
}
2022-04-12 01:10:33.911096 fix spelling mistakes 2 ['\n\n# TODO: implement the solution.\n\ndef main():\n    pass\n\nif __name__ == "__main__":\n    main()\n', '\n\n# TODO: implement the solution here\n\ndef main():\n    pass\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 01:10:33.911147 size on output set 2
2022-04-12 01:10:33.911155 size on input set 2
2022-04-12 01:10:36.178290 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#\n# TODO: implement the solution here\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n# TODO: implement the solution here\n\ndef main():\n    print(\"Hello World\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649740234,
  "object": "edit"
}
2022-04-12 01:10:36.178580 fix syntax errors 2 ['\n#\n# TODO: implement the solution here\n\ndef main():\n    pass\n\nif __name__ == "__main__":\n    main()\n', '\n# TODO: implement the solution here\n\ndef main():\n    print("Hello World")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 01:10:38.434731 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# TODO: implement the solution\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n# TODO: implement the solution\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649740236,
  "object": "edit"
}
2022-04-12 01:10:38.434870 fix syntax errors 2 ['\n\n# TODO: implement the solution\n\ndef main():\n    pass\n\nif __name__ == "__main__":\n    main()\n', '\n\n# TODO: implement the solution\n\ndef main():\n    pass\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 01:10:38.434887 size on output set 3
2022-04-12 01:10:38.434905 num operations 2
2022-04-12 01:10:38.434911 size on input set 1
2022-04-12 01:11:19.265852 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\nclass Node:\n\tdef __init__(self, x, y):\n\t\tself.x = x\n\t\tself.y = y\n\t\tself.neighbors = []\n\t\tself.visited = False\n\t\tself.parent = None\n\n\tdef add_neighbor(self, neighbor):\n\t\tself.neighbors.append(neighbor)\n\n\tdef __str__(self):\n\t\treturn \"({}, {})\".format(self.x, self.y)\n\ndef solve(t, grid):\n\tnodes = []\n\tfor i in range(len(grid)):\n\t\tfor j in range(len(grid[0])):\n\t\t\tif grid[i][j] != \"1\":\n\t\t\t\tnodes.append(Node(i, j))\n\n\tfor node in nodes:\n\t\tx, y = node.x, node.y\n\t\tif grid[x][y] == \"S\":\n\t\t\tstart = node\n\t\telif grid[x][y] == \"0\":\n\t\t\tif x > 0 and grid[x-1][y] != \"1\":\n\t\t\t\tnode.add_neighbor(nodes[(x-1) * len(grid[0]) + y])\n\t\t\tif x < len(grid) - 1 and grid[x+1][y] != \"1\":\n\t\t\t\tnode.add_neighbor(nodes[(x+1) * len(grid[0]) + y])\n\t\t\tif y > 0 and grid[x][y-1] != \"1\":\n\t\t\t\tnode.add_neighbor(nodes[x * len(grid[0]) + y - 1])\n\t\t\tif y < len(grid[0]) - 1 and grid[x][y+1] != \"1\":\n\t\t\t\tnode.add_neighbor(nodes[x * len(grid[0]) + y + 1])\n\t\telif grid[x][y] == \"U\":\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\tif x > 0 and grid[x-1][y] != \"1\":\n\t\t\t\tnode.add_neighbor(nodes[(x-1) * len(grid[0]) + y])\n\t\telif grid[x][y] == \"D\":\n\t\t\tif x < len(grid) - 1 and grid[x+1][y] != \"1\":\n\t\t\t\tnode.add_neighbor(nodes[(x+1) * len(grid[0]) + y])\n\t\telif grid[x][y] == \"L\":\n\t\t\tif y > 0 and grid[x][y-1] != \"1\":\n\t\t\t\tnode.add_neighbor(nodes[x * len(grid[0]) + y - 1])\n\t\telif grid[x][y] == \"R\":\n\t\t\tif y < len(grid[0]) - 1 and grid[x][y+1] != \"1\":\n\t\t\t\tnode.add_neighbor(nodes[x * len(grid[0]) + y + 1])\n\n\tqueue = [start]\n\tstart.visited = True\n\twhile len(queue) > 0:\n\t\tcurr = queue.pop(0)\n\t\tif curr.x == 0 or curr.x == len(grid) - 1 or curr.y == 0 or curr.y == len(grid[0]) - 1:\n\t\t\tif t >= 1:\n\t\t\t\treturn 1\n\t\t\telse:\n\t\t\t\treturn 0\n\t\tfor neighbor in curr.neighbors:\n\t\t\tif not neighbor.visited:\n\t\t\t\tneighbor.visited = True\n\t\t\t\tneighbor.parent = curr\n\t\t\t\tqueue.append(neighbor)\n\n\treturn -1\n\ndef main():\n\tt, n, m = map(int, sys.stdin.readline().strip().split())\n\tgrid = []\n\tfor _ in range(n):\n\t\tgrid.append(list(sys.stdin.readline().strip()))\n\t\n\tprint(solve(t, grid))\n\nif __name__ == \"__main__\":\n\tmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\nclass Node:\n\tdef __init__(self, x, y):\n\t\tself.x = x\n\t\tself.y = y\n\t\tself.neighbors = []\n\t\tself.visited = False\n\t\tself.parent = None\n\n\tdef add_neighbor(self, neighbor):\n\t\tself.neighbors.append(neighbor)\n\n\tdef __str__(self):\n\t\treturn \"({}, {})\".format(self.x, self.y)\n\ndef solve(t, grid):\n\tnodes = []\n\tfor i in range(len(grid)):\n\t\tfor j in range(len(grid[0])):\n\t\t\tif grid[i][j] != \"1\":\n\t\t\t\tnodes.append(Node(i, j))\n\n\tfor node in nodes:\n\t\tx, y = node.x, node.y\n\t\tif grid[x][y] == \"S\":\n\t\t\tstart = node\n\t\telif grid[x][y] == \"0\":\n\t\t\tif x > 0 and grid[x-1][y] != \"1\":\n\t\t\t\tnode.add_neighbor(nodes[(x-1) * len(grid[0]) + y])\n\t\t\tif x < len(grid) - 1 and grid[x+1][y] != \"1\":\n\t\t\t\tnode.add_neighbor(nodes[(x+1) * len(grid[0]) + y])\n\t\t\tif y > 0 and grid[x][y-1] != \"1\":\n\t\t\t\tnode.add_neighbor(nodes[x * len(grid[0]) + y - 1])\n\t\t\tif y < len(grid[0]) - 1 and grid[x][y+1] != \"1\":\n\t\t\t\tnode.add_neighbor(nodes[x * len(grid[0]) + y + 1])\n\t\telif grid[x][y] == \"U\":\n\t\t\tif x > 0 and grid[x-1][y] != \"1\":\n\t\t\t\tnode.add_neighbor(nodes[(x-1) * len(grid[0]) + y])\n\t\telif grid[x][y] == \"D\":\n\t\t\tif x < len(grid) - 1 and grid[x+1][y] != \"1\":\n\t\t\t\tnode.add_neighbor(nodes[(x+1) * len(grid[0]) + y])\n\t\telif grid[x][y] == \"L\":\n\t\t\tif y > 0 and grid[x][y-1] != \"1\":\n\t\t\t\tnode.add_neighbor(nodes[x * len(grid[0]) + y - 1])\n\t\telif grid[x][y] == \"R\":\n\t\t\tif y < len(grid[0]) - 1 and grid[x][y+1] != \"1\":\n\t\t\t\tnode.add_neighbor(nodes[x * len(grid[0]) + y + 1])\n\n\tqueue = [start]\n\tstart.visited = True\n\twhile len(queue) > 0:\n\t\tcurr = queue.pop(0)\n\t\tif curr.x == 0 or curr.x == len(grid) - 1 or curr.y == 0 or curr.y == len(grid[0]) - 1:\n\t\t\tif t >= 1:\n\t\t\t\treturn \"YES\"\n\t\t\telse:\n\t\t\t\treturn \"NO\"\n\t\tfor neighbor in curr.neighbors:\n\t\t\tif not neighbor.visited:\n\t\t\t\tneighbor.visited = True\n\t\t\t\tneighbor.parent = curr\n\t\t\t\tqueue.append(neighbor)\n\n\treturn -1\n\ndef main():\n\tt, n, m = map(int, sys.stdin.readline().strip().split())\n\tgrid = []\n\tfor _ in range(n):\n\t\tgrid.append(list(sys.stdin.readline().strip()))\n\t\n\tprint(solve(t, grid))\n\nif __name__ == \"__main__\":\n\tmain()\n"
    }
  ],
  "created": 1649740238,
  "object": "edit"
}
2022-04-12 01:11:19.266449 fix spelling mistakes 2 ['\n\nimport sys\n\nclass Node:\n\tdef __init__(self, x, y):\n\t\tself.x = x\n\t\tself.y = y\n\t\tself.neighbors = []\n\t\tself.visited = False\n\t\tself.parent = None\n\n\tdef add_neighbor(self, neighbor):\n\t\tself.neighbors.append(neighbor)\n\n\tdef __str__(self):\n\t\treturn "({}, {})".format(self.x, self.y)\n\ndef solve(t, grid):\n\tnodes = []\n\tfor i in range(len(grid)):\n\t\tfor j in range(len(grid[0])):\n\t\t\tif grid[i][j] != "1":\n\t\t\t\tnodes.append(Node(i, j))\n\n\tfor node in nodes:\n\t\tx, y = node.x, node.y\n\t\tif grid[x][y] == "S":\n\t\t\tstart = node\n\t\telif grid[x][y] == "0":\n\t\t\tif x > 0 and grid[x-1][y] != "1":\n\t\t\t\tnode.add_neighbor(nodes[(x-1) * len(grid[0]) + y])\n\t\t\tif x < len(grid) - 1 and grid[x+1][y] != "1":\n\t\t\t\tnode.add_neighbor(nodes[(x+1) * len(grid[0]) + y])\n\t\t\tif y > 0 and grid[x][y-1] != "1":\n\t\t\t\tnode.add_neighbor(nodes[x * len(grid[0]) + y - 1])\n\t\t\tif y < len(grid[0]) - 1 and grid[x][y+1] != "1":\n\t\t\t\tnode.add_neighbor(nodes[x * len(grid[0]) + y + 1])\n\t\telif grid[x][y] == "U":\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\tif x > 0 and grid[x-1][y] != "1":\n\t\t\t\tnode.add_neighbor(nodes[(x-1) * len(grid[0]) + y])\n\t\telif grid[x][y] == "D":\n\t\t\tif x < len(grid) - 1 and grid[x+1][y] != "1":\n\t\t\t\tnode.add_neighbor(nodes[(x+1) * len(grid[0]) + y])\n\t\telif grid[x][y] == "L":\n\t\t\tif y > 0 and grid[x][y-1] != "1":\n\t\t\t\tnode.add_neighbor(nodes[x * len(grid[0]) + y - 1])\n\t\telif grid[x][y] == "R":\n\t\t\tif y < len(grid[0]) - 1 and grid[x][y+1] != "1":\n\t\t\t\tnode.add_neighbor(nodes[x * len(grid[0]) + y + 1])\n\n\tqueue = [start]\n\tstart.visited = True\n\twhile len(queue) > 0:\n\t\tcurr = queue.pop(0)\n\t\tif curr.x == 0 or curr.x == len(grid) - 1 or curr.y == 0 or curr.y == len(grid[0]) - 1:\n\t\t\tif t >= 1:\n\t\t\t\treturn 1\n\t\t\telse:\n\t\t\t\treturn 0\n\t\tfor neighbor in curr.neighbors:\n\t\t\tif not neighbor.visited:\n\t\t\t\tneighbor.visited = True\n\t\t\t\tneighbor.parent = curr\n\t\t\t\tqueue.append(neighbor)\n\n\treturn -1\n\ndef main():\n\tt, n, m = map(int, sys.stdin.readline().strip().split())\n\tgrid = []\n\tfor _ in range(n):\n\t\tgrid.append(list(sys.stdin.readline().strip()))\n\t\n\tprint(solve(t, grid))\n\nif __name__ == "__main__":\n\tmain()\n', '\n\nimport sys\n\nclass Node:\n\tdef __init__(self, x, y):\n\t\tself.x = x\n\t\tself.y = y\n\t\tself.neighbors = []\n\t\tself.visited = False\n\t\tself.parent = None\n\n\tdef add_neighbor(self, neighbor):\n\t\tself.neighbors.append(neighbor)\n\n\tdef __str__(self):\n\t\treturn "({}, {})".format(self.x, self.y)\n\ndef solve(t, grid):\n\tnodes = []\n\tfor i in range(len(grid)):\n\t\tfor j in range(len(grid[0])):\n\t\t\tif grid[i][j] != "1":\n\t\t\t\tnodes.append(Node(i, j))\n\n\tfor node in nodes:\n\t\tx, y = node.x, node.y\n\t\tif grid[x][y] == "S":\n\t\t\tstart = node\n\t\telif grid[x][y] == "0":\n\t\t\tif x > 0 and grid[x-1][y] != "1":\n\t\t\t\tnode.add_neighbor(nodes[(x-1) * len(grid[0]) + y])\n\t\t\tif x < len(grid) - 1 and grid[x+1][y] != "1":\n\t\t\t\tnode.add_neighbor(nodes[(x+1) * len(grid[0]) + y])\n\t\t\tif y > 0 and grid[x][y-1] != "1":\n\t\t\t\tnode.add_neighbor(nodes[x * len(grid[0]) + y - 1])\n\t\t\tif y < len(grid[0]) - 1 and grid[x][y+1] != "1":\n\t\t\t\tnode.add_neighbor(nodes[x * len(grid[0]) + y + 1])\n\t\telif grid[x][y] == "U":\n\t\t\tif x > 0 and grid[x-1][y] != "1":\n\t\t\t\tnode.add_neighbor(nodes[(x-1) * len(grid[0]) + y])\n\t\telif grid[x][y] == "D":\n\t\t\tif x < len(grid) - 1 and grid[x+1][y] != "1":\n\t\t\t\tnode.add_neighbor(nodes[(x+1) * len(grid[0]) + y])\n\t\telif grid[x][y] == "L":\n\t\t\tif y > 0 and grid[x][y-1] != "1":\n\t\t\t\tnode.add_neighbor(nodes[x * len(grid[0]) + y - 1])\n\t\telif grid[x][y] == "R":\n\t\t\tif y < len(grid[0]) - 1 and grid[x][y+1] != "1":\n\t\t\t\tnode.add_neighbor(nodes[x * len(grid[0]) + y + 1])\n\n\tqueue = [start]\n\tstart.visited = True\n\twhile len(queue) > 0:\n\t\tcurr = queue.pop(0)\n\t\tif curr.x == 0 or curr.x == len(grid) - 1 or curr.y == 0 or curr.y == len(grid[0]) - 1:\n\t\t\tif t >= 1:\n\t\t\t\treturn "YES"\n\t\t\telse:\n\t\t\t\treturn "NO"\n\t\tfor neighbor in curr.neighbors:\n\t\t\tif not neighbor.visited:\n\t\t\t\tneighbor.visited = True\n\t\t\t\tneighbor.parent = curr\n\t\t\t\tqueue.append(neighbor)\n\n\treturn -1\n\ndef main():\n\tt, n, m = map(int, sys.stdin.readline().strip().split())\n\tgrid = []\n\tfor _ in range(n):\n\t\tgrid.append(list(sys.stdin.readline().strip()))\n\t\n\tprint(solve(t, grid))\n\nif __name__ == "__main__":\n\tmain()\n']
2022-04-12 01:11:19.266563 size on output set 2
2022-04-12 01:11:19.266573 size on input set 2
