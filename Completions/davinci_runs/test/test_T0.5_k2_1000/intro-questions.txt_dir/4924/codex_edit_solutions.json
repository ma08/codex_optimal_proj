["\n\nif __name__ == \"__main__\":\n    current_time = [int(i) for i in input().split(\":\")]\n    time_to_explode = [int(i) for i in input().split(\":\")]\n    current_time_in_seconds = current_time[0] * 3600 + current_time[1] * 60 + current_time[2]\n    time_to_explode_in_seconds = time_to_explode[0] * 3600 + time_to_explode[1] * 60 + time_to_explode[2]\n    if time_to_explode_in_seconds < current_time_in_seconds:\n        time_to_explode_in_seconds += 24 * 3600\n    time_to_explode_in_seconds -= current_time_in_seconds\n    hours = time_to_explode_in_seconds // 3600\n    time_to_explode_in_seconds %= 3600\n    minutes = time_to_explode_in_seconds // 60\n    time_to_explode_in_seconds %= 60\n    seconds = time_to_explode_in_seconds\n    print(str(hours).zfill(2) + \":\" + str(minutes).zfill(2) + \":\" + str(seconds).zfill(2))\n", "import sys\n\n\n\ncur_time = sys.stdin.readline().strip().split(':')\nexp_time = sys.stdin.readline().strip().split(':')\n\n# convert to seconds\ncur_time = int(cur_time[0])*3600 + int(cur_time[1])*60 + int(cur_time[2])\nexp_time = int(exp_time[0])*3600 + int(exp_time[1])*60 + int(exp_time[2])\n\n# if the expiry time is less than current time, add 24 hours\nif exp_time < cur_time:\n    exp_time += 24*3600\n\n# convert back to hh:mm:ss format\nexp_time = exp_time - cur_time\nhours = exp_time//3600\nminutes = exp_time%3600//60\nseconds = exp_time%3600%60\n\n# print out the result\nprint(str(hours).zfill(2) + ':' + str(minutes).zfill(2) + ':' + str(seconds).zfill(2))\n", "\n\ndef parse_time(time_str):\n    h, m, s = time_str.split(\":\")\n    return int(h), int(m), int(s)\n\ndef get_time_diff(current_time, desired_time):\n    h1, m1, s1 = parse_time(current_time)\n    h2, m2, s2 = parse_time(desired_time)\n    h_diff = h2 - h1\n    m_diff = m2 - m1\n    s_diff = s2 - s1\n    if s_diff < 0:\n        s_diff += 60\n        m_diff -= 1\n    if m_diff < 0:\n        m_diff += 60\n        h_diff -= 1\n    if h_diff < 0:\n        h_diff += 24\n    return h_diff, m_diff, s_diff\n\ndef format_time(h, m, s):\n    return \"{:02}:{:02}:{:02}\".format(h, m, s)\n\ndef main():\n    current_time = input()\n    desired_time = input()\n    h, m, s = get_time_diff(current_time, desired_time)\n    print(format_time(h, m, s))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef calcTime(currTime, targetTime):\n    # calculate the difference between the current time and the target time\n    # if the difference is negative, add 24 hours\n    # this will give us the time until the target time\n    # if the difference is greater than 24 hours, subtract 24 hours\n    # this will give us the time until the target time\n    # return the time until the target time\n    currTime = currTime.split(':') # split the current time into hours, minutes, seconds\n    targetTime = targetTime.split(':') # split the target time into hours, minutes, seconds\n    currTime = [int(currTime[0]), int(currTime[1]), int(currTime[2])] # convert the hours, minutes, seconds to integers\n    targetTime = [int(targetTime[0]), int(targetTime[1]), int(targetTime[2])] # convert the hours, minutes, seconds to integers\n    diff = [targetTime[0] - currTime[0], targetTime[1] - currTime[1], targetTime[2] - currTime[2]] # calculate the difference between the current time and the target time\n    if diff[0] < 0: # if the difference is negative, add 24 hours\n        diff[0] += 24 # add 24 hours\n    if diff[1] < 0: # if the difference is negative, add 60 minutes\n        diff[0] -= 1 # subtract 1 hour\n        diff[1] += 60 # add 60 minutes\n    if diff[2] < 0: # if the difference is negative, add 60 seconds\n        diff[1] -= 1 # subtract 1 minute\n        diff[2] += 60 # add 60 seconds\n    if diff[0] > 24: # if the difference is greater than 24 hours, subtract 24 hours\n        diff[0] -= 24 # subtract 24 hours\n    return ':'.join(map(str, diff)) # return the time until the target time\n\ndef main():\n    currTime = sys.stdin.readline().strip() # read in the current time\n    targetTime = sys.stdin.readline().strip() # read in the target time\n    print(calcTime(currTime, targetTime)) # print the time until the target time\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom datetime import datetime\n\ndef main():\n    current_time = datetime.strptime(input(), '%H:%M:%S')  # \u0447\u0430\u0441\u044b:\u043c\u0438\u043d\u0443\u0442\u044b:\u0441\u0435\u043a\u0443\u043d\u0434\u044b\n    explosion_time = datetime.strptime(input(), '%H:%M:%S')  # \u0447\u0430\u0441\u044b:\u043c\u0438\u043d\u0443\u0442\u044b:\u0441\u0435\u043a\u0443\u043d\u0434\u044b\n    explosion_time += (current_time - datetime.strptime('00:00:00', '%H:%M:%S'))  # \u043f\u0440\u0438\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043a \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u0437\u0440\u044b\u0432\u0430 \u0432\u0440\u0435\u043c\u044f \u043e\u0442 \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u043d\u044f \u0434\u043e \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043c\u043e\u043c\u0435\u043d\u0442\u0430, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0432\u0440\u0435\u043c\u044f \u0432\u0437\u0440\u044b\u0432\u0430 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u043d\u044f\n    print(explosion_time.strftime('%H:%M:%S'))  # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0432\u0440\u0435\u043c\u044f \u0432\u0437\u0440\u044b\u0432\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \u0447\u0430\u0441\u044b:\u043c\u0438\u043d\u0443\u0442\u044b:\u0441\u0435\u043a\u0443\u043d\u0434\u044b\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef parseTime(time_str):\n    h, m, s = time_str.split(\":\")\n    return int(h), int(m), int(s)\n\ndef getTimeDiff(current_time, target_time):\n    h1, m1, s1 = parseTime(current_time)\n    h2, m2, s2 = parseTime(target_time)\n    h_diff = h2 - h1\n    m_diff = m2 - m1\n    s_diff = s2 - s1\n    if s_diff < 0:\n        s_diff += 60\n        m_diff -= 1\n    if m_diff < 0:\n        m_diff += 60\n        h_diff -= 1\n    if h_diff < 0:\n        h_diff += 24\n    return h_diff, m_diff, s_diff\n\ndef formatTime(h, m, s):\n    return \"{:02}:{:02}:{:02}\".format(h, m, s)\n\ndef main():\n    current_time = input()\n    target_time = input()\n    h, m, s = getTimeDiff(current_time, target_time)\n    print(formatTime(h, m, s))\n\nif __name__ == \"__main__\":\n    main()\n", "\ncurrent_time = input()\nexplosion_time = input()\n\ncurrent_hour, current_minute, current_second = map(int, current_time.split(':'))\nexplosion_hour, explosion_minute, explosion_second = map(int, explosion_time.split(':'))\n\nif explosion_hour < current_hour:\n    explosion_hour += 24\n\nif explosion_hour == current_hour and explosion_minute < current_minute:\n    explosion_hour += 24\n\nif explosion_hour == current_hour and explosion_minute == current_minute and explosion_second < current_second:\n    explosion_hour += 24\n\nexplosion_hour -= current_hour\nexplosion_minute -= current_minute\nexplosion_second -= current_second\n\nif explosion_second < 0:\n    explosion_second += 60\n    explosion_minute -= 1\n\nif explosion_minute < 0:\n    explosion_minute += 60\n    explosion_hour -= 1\n\nprint(str(explosion_hour) + ':' + str(explosion_minute) + ':' + str(explosion_second))\n", "\n\ndef parse_time(time_str):\n    h, m, s = time_str.split(\":\")\n    return int(h), int(m), int(s)\n\n\ndef get_time_diff(current_time, desired_time):\n    h1, m1, s1 = parse_time(current_time)\n    h2, m2, s2 = parse_time(desired_time)\n    h_diff = h2 - h1\n    m_diff = m2 - m1\n    s_diff = s2 - s1\n    if s_diff < 0:\n        s_diff += 60\n        m_diff -= 1\n    if m_diff < 0:\n        m_diff += 60\n        h_diff -= 1\n    if h_diff < 0:\n        h_diff += 24\n    return h_diff, m_diff, s_diff\n\n\ndef format_time(h, m, s):\n    return \"{:02}:{:02}:{:02}\".format(h, m, s)\n\n\ndef main():\n    current_time = input()\n    desired_time = input()\n    h, m, s = get_time_diff(current_time, desired_time)\n    print(format_time(h, m, s))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n#-----main-----#\n\ncurrent_time = input()\nexplosion_time = input()\n\ncurrent_hour, current_minute, current_second = map(int, current_time.split(\":\"))\nexplosion_hour, explosion_minute, explosion_second = map(int, explosion_time.split(\":\"))\n\nif explosion_hour<current_hour:\n    explosion_hour += 24\n\nif explosion_hour == current_hour and explosion_minute < current_minute:\n    explosion_hour += 24\n\nif explosion_hour == current_hour and explosion_minute == current_minute and explosion_second < current_second:\n    explosion_hour += 24\n\nexplosion_hour -= current_hour\nexplosion_minute -= current_minute\nexplosion_second -= current_second\n\nif explosion_second < 0:\n    explosion_second += 60\n    explosion_minute -= 1\n\nif explosion_minute < 0:\n    explosion_minute += 60\n    explosion_hour -= 1\n\nprint(str(explosion_hour) + \":\" + str(explosion_minute) + \":\" + str(explosion_second))\n", "if __name__ == \"__main__\":\n    current_time = [int(i) for i in input().split(\":\")]\n    time_to_explode = [int(i) for i in input().split(\":\")]\n    current_time_in_seconds = current_time[0]*3600 + current_time[1]*60 + current_time[2]\n    time_to_explode_in_seconds = time_to_explode[0]*3600 + time_to_explode[1]*60 + time_to_explode[2]\n    if time_to_explode_in_seconds < current_time_in_seconds:\n        time_to_explode_in_seconds += 24*3600\n    time_to_explode_in_seconds -= current_time_in_seconds\n    hours = time_to_explode_in_seconds // 3600\n    time_to_explode_in_seconds %= 3600\n    minutes = time_to_explode_in_seconds // 60\n    time_to_explode_in_seconds %= 60\n    seconds = time_to_explode_in_seconds\n    print(str(hours).zfill(2) + \":\" + str(minutes).zfill(2) + \":\" + str(seconds).zfill(2))\n", "#!/usr/bin/env python3\n\nimport sys\nimport datetime\n\ndef main():\n    current_time = [int(x) for x in sys.stdin.readline().strip().split(':')]\n    desired_time = [int(x) for x in sys.stdin.readline().strip().split(':')]\n    current_time = datetime.datetime(2000, 1, 1, current_time[0], current_time[1], current_time[2])\n    desired_time = datetime.datetime(2000, 1, 1, desired_time[0], desired_time[1], desired_time[2])\n    if desired_time <= current_time:\n        desired_time += datetime.timedelta(days=1)\n    else:\n        pass\n    print((desired_time - current_time).total_seconds())\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport datetime\n\ndef main():\n    current_time = [int(x) for x in input().strip().split(':')]\n    desired_time = [int(x) for x in input().strip().split(':')]\n    current_time = datetime.datetime(2000, 1, 1, current_time[0], current_time[1], current_time[2])\n    desired_time = datetime.datetime(2000, 1, 1, desired_time[0], desired_time[1], desired_time[2])\n    if desired_time <= current_time:\n        desired_time = datetime.datetime.combine(datetime.date.today() + datetime.timedelta(days=1), desired_time.time())\n    else:\n        desired_time = datetime.datetime.combine(datetime.date.today(), desired_time.time())\n    print(str(desired_time - current_time))\n\nif __name__ == '__main__':\n    main()\n", "\n#-----main-----\n\ncurrent_time = input()\nexplosion_time = input()\n\ncurrent_hour, current_minute, current_second = map(int, current_time.split(\":\"))\nexplosion_hour, explosion_minute, explosion_second = map(int, explosion_time.split(\":\"))\n\nif explosion_hour < current_hour:\n    explosion_hour += 24\n\nif explosion_hour == current_hour and explosion_minute < current_minute:\n    explosion_hour += 24\n\nif explosion_hour == current_hour and explosion_minute == current_minute and explosion_second < current_second:\n    explosion_hour += 24\n\nexplosion_hour -= current_hour\nexplosion_minute -= current_minute\nexplosion_second -= current_second\n\nif explosion_second < 0:\n    explosion_second += 60\n    explosion_minute -= 1\n\nif explosion_minute < 0:\n    explosion_minute += 60\n    explosion_hour -= 1\n\nprint(str(explosion_hour) + \":\" + str(explosion_minute) + \":\" + str(explosion_second))\n", "\n\nimport sys\n\ndef calcTime(currTime, targetTime):\n    #calculate the difference between the current time and the target time\n    #if the difference is negative, add 24 hours\n    #this will give us the time until the target time\n    #if the difference is greater than or equal to 24 hours, subtract 24 hours\n    #this will give us the time until the target time\n    #return the time until the target time\n    currTime = currTime.split(':')\n    targetTime = targetTime.split(':')\n    currTime = [int(currTime[0]), int(currTime[1]), int(currTime[2])]\n    targetTime = [int(targetTime[0]), int(targetTime[1]), int(targetTime[2])]\n    diff = [targetTime[0] - currTime[0], targetTime[1] - currTime[1], targetTime[2] - currTime[2]]\n    if diff[0] < 0:\n        diff[0] += 24\n    if diff[1] < 0:\n        diff[0] -= 1\n        diff[1] += 60\n    if diff[2] < 0:\n        diff[1] -= 1\n        diff[2] += 60\n    if diff[0] >= 24:\n        diff[0] -= 24\n    return ':'.join(map(str, diff))\n\ndef main():\n    currTime = sys.stdin.readline().strip()\n    targetTime = sys.stdin.readline().strip()\n    print(calcTime(currTime, targetTime))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    time_now = sys.stdin.readline()\n    time_now = time_now.strip().split(\":\")\n    time_now = [int(x) for x in time_now]\n\n    time_explode = sys.stdin.readline()\n    time_explode = time_explode.strip().split(\":\")\n    time_explode = [int(x) for x in time_explode]\n\n    if time_explode[0] < time_now[0]:\n        time_explode[0] += 24\n\n    if time_explode[1] < time_now[1]:\n        time_explode[0] -= 1\n        time_explode[1] += 60\n\n    if time_explode[2] < time_now[2]:\n        time_explode[1] -= 1\n        time_explode[2] += 60\n\n    time_explode = [str(x) for x in time_explode]\n    print(\":\".join(time_explode))\n\nmain()\n", "\n#-----main-----#\n\ncurrent_time = input()\nexplosion_time = input()\n\ncurrent_hour, current_minute, current_second = map(int,current_time.split(\":\"))\nexplosion_hour, explosion_minute, explosion_second = map(int,explosion_time.split(\":\"))\n\nif explosion_hour<current_hour:\n    explosion_hour+=24\n\nif explosion_hour==current_hour and explosion_minute<current_minute:\n    explosion_hour+=24\n\nif explosion_hour==current_hour and explosion_minute==current_minute and explosion_second<current_second:\n    explosion_hour+=24\n\nexplosion_hour-=current_hour\nexplosion_minute-=current_minute\nexplosion_second-=current_second\n\nif explosion_second<0:\n    explosion_second+=60\n    explosion_minute-=1\n\nif explosion_minute<0:\n    explosion_minute+=60\n    explosion_hour-=1\n\nprint(str(explosion_hour)+\":\"+str(explosion_minute)+\":\"+str(explosion_second))\n", "\nimport sys\n\ncur_time = sys.stdin.readline().strip().split(':')\nexp_time = sys.stdin.readline().strip().split(':')\n\n# convert to seconds\ncur_time = int(cur_time[0])*3600 + int(cur_time[1])*60 + int(cur_time[2])\nexp_time = int(exp_time[0])*3600 + int(exp_time[1])*60 + int(exp_time[2])\n\n# if the expiry time is less than current time, add 24 hours\nif exp_time < cur_time:\n    exp_time += 24*3600\n\n# convert back to hh:mm:ss format\nexp_time = exp_time - cur_time\nhours = exp_time//3600\nminutes = exp_time%3600//60\nseconds = exp_time%3600%60\n\n# print out the result\nprint(str(hours).zfill(2) + ':' + str(minutes).zfill(2) + ':' + str(seconds).zfill(2))\n", "\n\nfrom datetime import datetime\n\ndef main():\n    current_time = datetime.strptime(input(), '%H:%M:%S')\n    explosion_time = datetime.strptime(input(), '%H:%M:%S') + (current_time - datetime.strptime('00:00:00', '%H:%M:%S')) + datetime.strptime('00:00:00', '%H:%M:%S')\n    print(explosion_time.strftime('%X'))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport datetime\n\ndef main():\n    current_time = [int(x) for x in input().strip().split(':')] # split the input by :\n    desired_time = [int(x) for x in input().strip().split(':')] # split the input by :\n    current_time = datetime.datetime(2000, 1, 1, current_time[0], current_time[1], current_time[2])\n    desired_time = datetime.datetime(2000, 1, 1, desired_time[0], desired_time[1], desired_time[2])\n    if desired_time <= current_time: # if the desired time is less than or equal to the current time\n        desired_time += datetime.timedelta(days=1)\n    else:\n        pass\n    print(desired_time - current_time)\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom datetime import datetime\n\ndef main():\n    current_time = datetime.strptime(input(), '%H:%M:%S')\n    explosion_time = datetime.strptime(input(), '%H:%M:%S') + (current_time - datetime.strptime('00:00:00', '%H:%M:%S')) + (current_time - datetime.strptime('00:00:00', '%H:%M:%S'))\n    print(explosion_time.strftime('%X'))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport datetime\n\ndef main():\n    current_time = [int(x) for x in sys.stdin.readline().strip().split(':')]\n    desired_time = [int(x) for x in sys.stdin.readline().strip().split(':')]\n    current_time = datetime.datetime(2000, 1, 1, current_time[0], current_time[1], current_time[2])\n    desired_time = datetime.datetime(2000, 1, 1, desired_time[0], desired_time[1], desired_time[2])\n    if desired_time <= current_time:\n        desired_time = datetime.datetime.combine(datetime.date.today() + datetime.timedelta(days=1), desired_time.time())\n    else:\n        desired_time = datetime.datetime.combine(datetime.date.today(), desired_time.time())\n    print(desired_time - current_time)\n\nif __name__ == '__main__':\n    main()\n", "\nif __name__ == \"__main__\":\n    current_time = [int(i) for i in input().split(\":\")]\n    time_to_explode = [int(i) for i in input().split(\":\")]\n    current_time_in_seconds = current_time[0]*3600 + current_time[1]*60 + current_time[2]\n    time_to_explode_in_seconds = time_to_explode[0]*3600 + time_to_explode[1]*60 + time_to_explode[2]\n    if time_to_explode_in_seconds < current_time_in_seconds:\n        time_to_explode_in_seconds += 24*3600\n    time_to_explode_in_seconds -= current_time_in_seconds\n    hours = time_to_explode_in_seconds // 3600\n    time_to_explode_in_seconds %= 3600\n    minutes = time_to_explode_in_seconds // 60\n    time_to_explode_in_seconds %= 60\n    seconds = time_to_explode_in_seconds\n    print(str(hours).zfill(2) + \":\" + str(minutes).zfill(2) + \":\" + str(seconds).zfill(2))\n", "\n\nimport sys\n\ndef calcTime(currTime, targetTime):\n    # calculate the difference between the current time and the target time\n    # if the difference is negative, add 24 hours\n    # this will give us the time until the target time\n    # if the difference is greater than 24 hours, subtract 24 hours\n    # this will give us the time until the target time\n    # return the time until the target time\n    currTime = currTime.split(':')\n    targetTime = targetTime.split(':')\n    currTime = [int(currTime[0]), int(currTime[1]), int(currTime[2])]\n    targetTime = [int(targetTime[0]), int(targetTime[1]), int(targetTime[2])]\n    diff = [targetTime[0] - currTime[0], targetTime[1] - currTime[1], targetTime[2] - currTime[2]]\n    if diff[0] < 0:\n        diff[0] += 24\n    if diff[1] < 0:\n        diff[0] -= 1\n        diff[1] += 60\n    if diff[2] < 0:\n        diff[1] -= 1\n        diff[2] += 60\n    if diff[0] >= 24:\n        diff[0] -= 24\n    return ':'.join(map(str, diff))\n\ndef main():\n    currTime = sys.stdin.readline().strip()\n    targetTime = sys.stdin.readline().strip()\n    print(calcTime(currTime, targetTime))\n\nif __name__ == '__main__':\n    main()\n", "\ndef parseTime(time_str):\n    h, m, s = time_str.split(\":\")\n    return int(h), int(m), int(s)\n\n\ndef getTimeDiff(current_time, target_time):\n    h1, m1, s1 = parseTime(current_time)\n    h2, m2, s2 = parseTime(target_time)\n    h_diff = h2 - h1\n    m_diff = m2 - m1\n    s_diff = s2 - s1\n    if s_diff < 0:\n        s_diff += 60\n        m_diff -= 1\n    if m_diff < 0:\n        m_diff += 60\n        h_diff -= 1\n    if h_diff < 0:\n        h_diff += 24\n    return h_diff, m_diff, s_diff\n\n\ndef formatTime(h, m, s):\n    return \"{:02}:{:02}:{:02}\".format(h, m, s)\n\n\ndef main():\n    current_time = input()\n    target_time = input()\n    h, m, s = getTimeDiff(current_time, target_time)\n    print(formatTime(h, m, s))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nfrom datetime import datetime\n\ndef main():\n    current_time = datetime.strptime(input(), '%H:%M:%S')  # \u0447\u0430\u0441\u044b:\u043c\u0438\u043d\u0443\u0442\u044b:\u0441\u0435\u043a\u0443\u043d\u0434\u044b\n    explosion_time = datetime.strptime(input(), '%H:%M:%S')  # \u0447\u0430\u0441\u044b:\u043c\u0438\u043d\u0443\u0442\u044b:\u0441\u0435\u043a\u0443\u043d\u0434\u044b\n    explosion_time += (current_time - datetime.strptime('00:00:00', '%H:%M:%S'))  # \u043f\u0440\u0438\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043a \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u0437\u0440\u044b\u0432\u0430\n    # \u0432\u0440\u0435\u043c\u044f \u043e\u0442 \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u043d\u044f \u0434\u043e \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043c\u043e\u043c\u0435\u043d\u0442\u0430\n    print(explosion_time.strftime('%H:%M:%S'))  # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0432\u0440\u0435\u043c\u044f \u0432\u0437\u0440\u044b\u0432\u0430 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \u0447\u0430\u0441\u044b:\u043c\u0438\u043d\u0443\u0442\u044b:\u0441\u0435\u043a\u0443\u043d\u0434\u044b\n\nif __name__ == '__main__':\n    main()\n"]