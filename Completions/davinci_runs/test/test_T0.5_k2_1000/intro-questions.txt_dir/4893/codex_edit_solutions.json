["\n\ndef main():\n    n, p = map(int, input().split())\n    dist = list(map(int, input().split()))\n    dist.sort()\n\n    for i in range(n - 1):\n        if dist[i] + p * (i + 2) > dist[i + 1]:\n            print(dist[i] + p * (i + 2))\n            break\n    else:\n        print(dist[-1] + p * (n + 1))\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\n\n#print n, p, distances\n\nmax_distance = max(distances)\n\nmin_distance = max_distance\n\nfor i in range(len(distances)):\n    if distances[i] <= (i+1)*p:\n        min_distance = min(min_distance, distances[i])\n    else:\n        break\n\nprint min_distance\n", "\n\ndef main():\n    n, p = map(int, input().split())\n    d = [int(x) for x in input().split()]\n    d.sort()\n    min_dist = d[0]\n    for i in range(1, n):\n        if d[i] - d[i - 1] < p * (i + 1):\n            min_dist = d[i - 1] + p * (i + 1)\n    print(min_dist)\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\n\n#print(n, p, distances)\n\nmax_distance = max(distances)\n\nmin_distance = max_distance\n\nfor i in range(len(distances)):\n\tif distances[i] <= (i+1)*p:\n\t\tmin_distance = min(min_distance, distances[i])\n\telse:\n\t\tbreak\n\nprint(min_distance)\n", "\n\ndef main():\n    n, p = map(int, input().split())  # n is number of points, p is the distance between points.\n    d = [int(x) for x in input().split()]  # d is the list of distances.\n    d.sort()  # sort the list.\n    min_dist = d[0]  # min_dist is the minimum distance.\n    for i in range(1, n):\n        if d[i] - d[i - 1] < p * (i + 1):  # if the distance between two points is less than p * (i + 1).\n            min_dist = d[i - 1] + p * (i + 1)  # set the min_dist to d[i - 1] + p * (i + 1).\n    print(min_dist)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# ==================================================================\n# ============================CODE==================================\n# ==================================================================\n\n\nimport sys\n\ndef main():\n    input_line = sys.stdin.readline().split()\n    n = int(input_line[0])\n    p = int(input_line[1])\n    input_line = sys.stdin.readline().split()\n    cars = [int(i) for i in input_line]\n    cars.sort()\n    # print(cars)\n    min_dist = cars[0]\n    for i in range(1, n):\n        if cars[i] - cars[i-1] < min_dist:\n            min_dist = cars[i] - cars[i-1]\n    print(min_dist)\n\nmain()\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\n\n# print n, p, distances\n\nmax_distance = max(distances)\n\nmin_distance = max_distance\n\nfor i in range(len(distances)):\n    if distances[i] <= (i+1)*p:\n        min_distance = min(min_distance, distances[i])\n    else:\n        break\n\nprint min_distance\n", "\nimport sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\ni = 0\nwhile i < n:\n    if i + p - 1 < n and distances[i] != distances[i + p - 1]:\n        print(distances[i + p - 1])\n        break\n    i += 1\n", "\n\ndef main():\n    n, p = map(int, input().split())\n    d = [int(x) for x in input().split()]\n    d.sort()\n    min_dist = d[0]\n    for i in range(1, n):\n        if d[i] - d[i - 1] < p * i - (i - 1):\n            min_dist = d[i - 1] + p * i - (i - 1)\n    print(min_dist)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# ==================================================================\n# ============================CODE==================================\n# ==================================================================\n\n\nimport sys\n\ndef main():\n    # input = sys.stdin.readline().split()\n    # n = int(input[0])\n    # p = int(input[1])\n    # input = sys.stdin.readline().split()\n    # cars = [int(i) for i in input]\n    # cars.sort()\n    # # print(cars)\n    # min_dist = cars[0]\n    # for i in range(1, n):\n    #     if cars[i] - cars[i-1] < min_dist:\n    #         min_dist = cars[i] - cars[i-1]\n    # print(min_dist)\n    print(\"Hello World\")\n\nmain()\n", "import sys\n\nn, p = map(int, sys.stdin.readline().split())  # n = number of houses, p = number of people\ndistances = sorted(map(int, sys.stdin.readline().split()))  # distances of houses from the hospital\n\nif p == 1:\n    print(1)\nelse:\n    i = 0  # index\n    while i < n:  # while index is less than the number of houses\n        if i + p - 1 < n:  # if index + number of people - 1 is less than the number of houses\n            if distances[i] != distances[i + p - 1]:  # if the distance of the house at the index is not equal to the distance of the house at the index + number of people - 1\n                print(distances[i + p - 1])  # print the distance of the house at the index + number of people - 1\n                break  # break the while loop\n        i += 1  # increment the index\n", "\n\ndef min_distance(n, p, distances):\n\tdistances = sorted(distances)\n\tresult = distances[0]\n\tfor i in range(1, n-1):\n\t\tif distances[i] - distances[i-1] > result + p*i:\n\t\t\tresult = distances[i] - p*i\n\treturn result\n\nn, p = map(int, raw_input().split())\ndistances = map(int, raw_input().split())\nprint min_distance(n, p, distances)\n", "\ndef main():\n    n, p = map(int, input().split())\n    dist = sorted(map(int, input().split()))\n\n    for i in range(n - 1):\n        if dist[i] + p * (i + 2) > dist[i + 1]:\n            print(dist[i] + p * (i + 2))\n            break\n    else:\n        print(dist[-1] + p * (n + 1))\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\nn, k = map(int, sys.stdin.readline().split())\ndistances = list(map(int, sys.stdin.readline().split()))\n\ndef find_max_dist(n, k, distances):\n    max_dist = 0\n    for i in range(n - k + 1):\n        if distances[i + k - 1] - distances[i] > max_dist:\n            max_dist = distances[i + k - 1] - distances[i]\n    return max_dist\n\nprint(find_max_dist(n, k, distances))\n", "\n\ndef main():\n    n, p = [int(x) for x in input().split()] # n is number of houses and p is number of pipes\n    distances = [int(x) for x in input().split()] # distances between houses\n\n    distances.sort() # sort distances in ascending order\n    min_distance = distances[1] - distances[0] # set the minimum distance to the first distance\n    for i in range(1, n):\n        if distances[i] - distances[i - 1] < min_distance: # if the current distance is less than the minimum distance\n            min_distance = distances[i] - distances[i - 1]\n\n    print(min_distance)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef min_distance(n, p, distances_):\n\tdistances_ = sorted(distances_)\n\tresult = distances_[0]\n\tfor i in range(1, n):\n\t\tif distances_[i] - distances_[i-1] > result + p*(i-1):\n\t\t\tresult = distances_[i] - p*(i-1)\n\treturn result\n\nn, p = map(int, raw_input().split())\ndistances_ = map(int, raw_input().split())\nprint min_distance(n, p, distances_)\n", "\n\ndef min_distance(n, p, distances, i=0):\n    distances = sorted(distances)\n    result = distances[0]\n    for i in range(1, n-1):\n        if distances[i] - distances[i-1] > result + p*(i-1):\n            result = distances[i] - p*(i-1)\n    return result\n\nn, p = map(int, raw_input().split())\ndistances = map(int, raw_input().split())\nprint min_distance(n, p, distances)\n", "\n\ndef main():\n    n, p = map(int, input().split())\n    d = [int(x) for x in input().split()]\n    d.sort()\n    min_dist = d[0] + p * (1) - 1\n    for i in range(1, n):\n        if d[i] - d[i - 1] < p * (i + 1) - i:\n            min_dist = d[i - 1] + p * (i + 1) - i\n    print(min_dist)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n#===============================================================================\n#=============================CODE==============================================\n#===============================================================================\n\n\nimport sys\n\ndef main():\n    input = sys.stdin.readline().split()\n    n = int(input[0])\n    p = int(input[1])\n    input = sys.stdin.readline().split()\n    cars = [int(i) for i in input]\n    cars.sort()\n    #print(cars)\n    min_dist = cars[0]\n    for i in range(1, n):\n        if cars[i] - cars[i-1] < min_dist:\n            min_dist = cars[i] - cars[i-1]\n    print(min_dist)\n\nmain()\n", "\n\ndef min_distance(n, p, distances_):\n    distances_ = sorted(distances_)\n    result = distances_[0]\n    for i in range(1, n):\n        if distances_[i] - distances_[i-1] > result + p*i:\n            result = distances_[i] - p*i\n    return result\n\nn, p = map(int, raw_input().split())\ndistances_ = map(int, raw_input().split())\nprint min_distance(n, p, distances_)\n", "\ndef main():\n    n, p = [int(x) for x in input().split()]  # n is the number of houses and p is the number of people\n    distances = [int(x) for x in input().split()]  # distances is the list of distances between houses\n\n    distances.sort()\n    min_distance = distances[1] - distances[0]  # min_distance is the minimum distance between houses\n\n    for i in range(1, n):\n        if distances[i] - distances[i - 1] < min_distance:\n            min_distance = distances[i] - distances[i - 1]\n\n    print(min_distance)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, p = map(int, input().split())\n    distances = list(map(int, input().split()))\n    distances.sort()\n    print(min([distances[i] - distances[i - 1] for i in range(1, n)]))\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, p = map(int, input().split())\n    distances = list(map(int, input().split()))\n    distances.sort()\n    print(min([distances[i] - distances[i-1] for i in range(1, n)]))  # noqa\n\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\nn, p = map(int, sys.stdin.readline().strip().split())\ndistances = sorted(map(int, sys.stdin.readline().strip().split()))\n\nif p == 1:\n    print(distances[0])\nelse:\n    for i in range(n - p + 1):\n        if distances[i] != distances[i + p - 1]:\n            print(distances[i + p - 1])\n            break\n", "\nimport sys\n\nn, p = map(int, sys.stdin.readline().split())\ndistances = sorted(map(int, sys.stdin.readline().split()))\n\n# print(n, p, distances)\n\nmax_distance = max(distances)\n\nmin_distance = max_distance\n\nfor i in range(len(distances)):\n    if distances[i] <= (i+1)*p:\n        min_distance = min(min_distance, distances[i])\n    else:\n        break\n\nprint(min_distance)\n", "\n\n#==============================================================================\n#=============================CODE=============================================\n#==============================================================================\n\n\nimport sys\n\ndef main():\n    input_line = sys.stdin.readline().split()\n    n = int(input_line[0])\n    p = int(input_line[1])\n    input_line = sys.stdin.readline().split()\n    cars = [int(i) for i in input_line]\n    cars.sort()\n    #print(cars)\n    min_dist = cars[0]\n    for i in range(1, n):\n        if cars[i] - cars[i-1] < min_dist:\n            min_dist = cars[i] - cars[i-1]\n    print(min_dist)\n\nmain()\n"]