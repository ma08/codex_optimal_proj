["\n\nimport sys\nsys.stdin = open('input.txt', 'r')\n\nboard = []\nfor i in range(8):\n    board.append(list(input()))\n\nwhite = []\nblack = []\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            white.append('Ke1')\n        elif board[i][j] == 'Q':\n            white.append('Qd1')\n        elif board[i][j] == 'R':\n            white.append('Ra1')\n        elif board[i][j] == 'B':\n            white.append('Bc1')\n        elif board[i][j] == 'N':\n            white.append('Nb1')\n        elif board[i][j] == 'P':\n            white.append('a2')\n        elif board[i][j] == 'k':\n            black.append('Ke8')\n        elif board[i][j] == 'q':\n            black.append('Qd8')\n        elif board[i][j] == 'r':\n            black.append('Ra8')\n        elif board[i][j] == 'b':\n            black.append('Bc8')\n        elif board[i][j] == 'n':\n            black.append('Nb8')\n        elif board[i][j] == 'p':\n            black.append('a7')\n\nprint('White:', ','.join(white))\nprint('Black:', ','.join(black))\n", "\n\nfrom sys import stdin\n\ndef main():\n\tboard = []\n\tfor line in stdin:\n\t\tboard.append(line.rstrip())\n\twhite = []\n\tblack = []\n\tfor i in range(1,9):\n\t\tfor j in range(1,9):\n\t\t\tpiece = board[i-1][j-1]\n\t\t\tif piece.isupper():\n\t\t\t\twhite.append((piece, j, i))\n\t\t\telif piece.islower():\n\t\t\t\tblack.append((piece, j, i))\n\twhite.sort(key=lambda x: (x[1], x[2]))\n\tblack.sort(key=lambda x: (x[1], -x[2]))\n\twhite = [x[0] + chr(x[1]+96) + str(x[2]) for x in white] # chr(x[1]+96) is the same as chr(x[1]+ord('a')-1)\n\tblack = [x[0] + chr(x[1]+96) + str(x[2]) for x in black] # chr(x[1]+96) is the same as chr(x[1]+ord('a')-1)\n\tprint('White: ' + ','.join(white))\n\tprint('Black: ' + ','.join(black))\n\nif __name__ == '__main__':\n\tmain()\n", "\nimport sys\nimport string\n\n# Read the input\ninput_lines = sys.stdin.readlines()\n\n# Initialise the board\nboard = []\nfor i in range(8):\n    board.append(input_lines[i + 1][1:9])\n\n# Initialize the board positions\npieces = {'K': 'K', 'Q': 'Q', 'R': 'R', 'B': 'B', 'N': 'N', 'P': '', 'k': 'k', 'q': 'q', 'r': 'r', 'b': 'b', 'n': 'n',\n          'p': ''}\n\n# Initialize the white pieces\nwhite_pieces = []\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] in pieces.keys():\n            if board[i][j] in ['K', 'Q', 'R', 'B', 'N', 'P']:\n                white_pieces.append(pieces[board[i][j]] + string.lowercase[j] + str(8 - i))\n\n# Initialize the black pieces\nblack_pieces = []\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] in pieces.keys():\n            if board[i][j] in ['k', 'q', 'r', 'b', 'n', 'p']:\n                black_pieces.append(pieces[board[i][j]] + string.lowercase[j] + str(8 - i))\n\n# Print the output\nprint \"White: \" + ','.join(white_pieces)\nprint \"Black: \" + ','.join(black_pieces)\n", "\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    # Read input.\n    board = []\n    for _ in range(0, 8):\n        board.append(input())\n\n    # Find the pieces\n    pieces = {}\n    for row in range(0, 8):\n        for col in range(0, 8):\n            if board[row][col] != \".\" and board[row][col] != \":\":\n                pieces[board[row][col]] = (row, col)\n\n    # Print the output.\n    white = \"White: \"\n    black = \"Black: \"\n    for piece in \"KQRBNPkqrbnp\":\n        if piece in pieces:\n            if piece.isupper():\n                # White piece.\n                white += piece\n                white += chr(ord('a') + pieces[piece][1])\n                white += str(8 - pieces[piece][0])\n                white += \",\"\n            else:\n                # Black piece.\n                black += piece.upper()\n                black += chr(ord('a') + pieces[piece][1])\n                black += str(8 - pieces[piece][0])\n                black += \",\"\n\n    # Remove the last comma and print.\n    print(white[:-1])\n    print(black[:-1])\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    board = []\n    for line in sys.stdin:\n        board.append(line.strip())\n\n    white = \"\"\n    black = \"\"\n\n    for i, row in enumerate(board):\n        for j, pos in enumerate(row):\n            if pos == '.':\n                continue\n            if pos.isupper():\n                white += pos.lower() + chr(j + ord('a')) + str(8 - i) + ','\n            else:\n                black += pos.upper() + chr(j + ord('a')) + str(8 - i) + ','\n\n    print('White: ' + white[:-1])\n    print('Black: ' + black[:-1])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n\n    # Read input.\n    white = []\n    black = []\n    for i in range(8):\n        line = input()\n        for j in range(8):\n            if line[4*j + 1] != \".\":\n                if line[4*j + 1].isupper():\n                    white.append((line[4*j + 1], chr(ord(\"a\") + j) + str(8 - i))) # noqa\n                else:\n                    black.append((line[4*j + 1], chr(ord(\"a\") + j) + str(8 - i))) # noqa\n\n    # Sort lists.\n    white = sorted(white)\n    black = sorted(black, reverse = True)\n\n    # Print output.\n    print(\"White:\", \", \".join([x[0] + x[1] for x in white]))\n    print(\"Black:\", \", \".join([x[0] + x[1] for x in black]))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    # Read input.\n    board = []\n    for _ in range(0, 8):\n        board.append(input())\n\n    # Find the peaces.\n    peaces = {}\n    for row in range(0, 8):\n        for col in range(0, 8):\n            if board[row][col] != \".\" and board[row][col] != \":\":\n                peaces[board[row][col]] = (row, col)\n\n    # Print the output.\n    white = \"White: \"\n    black = \"Black: \"\n    for peace in \"KQRBNP\":\n        if peace in peaces:\n            if peace.isupper():\n                # White piece.\n                white += peace\n                white += chr(ord('a') + peaces[peace][1])\n                white += str(8 - peaces[peace][0])\n                white += \",\"\n            else:\n                # Black piece.\n                black += peace.upper()\n                black += chr(ord('a') + peaces[peace][1])\n                black += str(8 - peaces[peace][0])\n                black += \",\"\n\n    # Remove the last comma and print.\n    print(white[:-1])\n    print(black[:-1])\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport string\n\ndef main():\n    # Read the input\n    input_lines = sys.stdin.readlines()\n\n    # Initialise the board\n    board = []\n    for i in range(8):\n        board.append(input_lines[i+1][1:9])\n\n    # Initialize the board positions\n    pieces = {'K': 'K', 'Q': 'Q', 'R': 'R', 'B': 'B', 'N': 'N', 'P': '', 'k': 'k', 'q': 'q', 'r': 'r', 'b': 'b', 'n': 'n', 'p': ''}\n\n    # Initialize the white pieces\n    white_pieces = []\n    for i in range(8):\n        for j in range(8):\n            if board[i][j] in pieces.keys():\n                if board[i][j] in ['K', 'Q', 'R', 'B', 'N', 'P']:\n                    white_pieces.append(pieces[board[i][j]] + string.lowercase[j] + str(8-i))\n\n    # Initialize the black pieces\n    black_pieces = []\n    for i in range(8):\n        for j in range(8):\n            if board[i][j] in pieces.keys():\n                if board[i][j] in ['k', 'q', 'r', 'b', 'n', 'p']:\n                    black_pieces.append(pieces[board[i][j]] + string.lowercase[j] + str(8-i))\n\n    # Print the output\n    print \"White: \" + ','.join(white_pieces)\n    print \"Black: \" + ','.join(black_pieces)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    # Read input.\n    board = []\n    for _ in range(0, 8):\n        board.append(input())\n\n    # Find the peaces.\n    peaces = {}\n    for row in range(0, 8):\n        for col in range(0, 8):\n            if board[row][col] != \".\" and board[row][col] != \":\":\n                peaces[board[row][col]] = (row, col)\n\n    # Print the output.\n    white = \"White: \"\n    black = \"Black: \"\n    for piece in \"KQRBNP\":\n        if piece in peaces:\n            if piece.isupper():\n                # White piece.\n                white += piece\n                white += chr(ord('a') + peaces[piece][1])\n                white += str(8 - peaces[piece][0])\n                white += \",\"\n            else:\n                # Black piece.\n                black += piece.upper()\n                black += chr(ord('a') + peaces[piece][1])\n                black += str(8 - peaces[piece][0])\n                black += \",\"\n\n    # Remove the last comma and print.\n    print(white[:-1])\n    print(black[:-1])\n\nif __name__ == '__main__':\n    main()\n", "\n\nfrom sys import stdin\n\ndef main():\n\tboard = []\n\tfor line in stdin:\n\t\tboard.append(line.rstrip())\n\twhite = []\n\tblack = []\n\tfor i in range(1,9):\n\t\tfor j in range(1,9):\n\t\t\tpiece = board[i-1][j-1]\n\t\t\tif piece.isupper():\n\t\t\t\twhite.append((piece, j, i))\n\t\t\telif piece.islower():\n\t\t\t\tblack.append((piece, j, i))\n\twhite.sort(key=lambda x: (x[1], x[2]))\n\tblack.sort(key=lambda x: (x[1], -x[2]))\n\twhite = [x[0] + chr(x[1]+96) + str(x[2]) for x in white] # chr(97) = 'a'\n\tblack = [x[0] + chr(x[1]+96) + str(x[2]) for x in black] # chr(97) = 'a'\n\tprint('White: ' + ','.join(white))\n\tprint('Black: ' + ','.join(black))\n\nif __name__ == '__main__':\n\tmain()\n", "\ndef main():\n\n    \"\"\"\n    Main function.\n    \"\"\"\n    # Read input\n    board = []\n    for _ in range(0, 8):\n        board.append(input())\n\n    # Find the pieces.\n    pieces = {}\n    for row in range(0, 8):\n        for col in range(0, 8):\n            if board[row][col] != \".\" and board[row][col] != \":\":\n                pieces[board[row][col]] = (row, col)\n\n    # Print the output\n    white = \"White: \"\n    black = \"Black: \"\n    for piece in \"KQRBNP\":\n        if piece in pieces:\n            if piece.isupper():\n                # White piece.\n                white += piece\n                white += chr(ord('a') + pieces[piece][1])\n                white += str(8 - pieces[piece][0])\n                white += \",\"\n            else:\n                # Black piece.\n                black += piece.upper()\n                black += chr(ord('a') + pieces[piece][1])\n                black += str(8 - pieces[piece][0])\n                black += \",\"\n\n    # Remove the last comma and print.\n    print(white[:-1])\n    print(black[:-1])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n\n    # Read input.\n    white = []\n    black = []\n    for i in range(8):\n        line = input()\n        for j in range(8):\n            if line[4*j + 1] != \".\":\n                if line[4*j + 1].isupper():\n                    white.append((line[4*j + 1], chr(ord(\"a\") + j) + str(8 - i)))\n                else:\n                    black.append((line[4*j + 1], chr(ord(\"a\") + j) + str(8 - i)))\n\n    # Sort lists.\n    white = sorted(white)\n    black = sorted(black, reverse = True)\n\n    # Print output.\n    print(\"White:\", \", \".join(x[0] + x[1] for x in white))\n    print(\"Black:\", \", \".join(x[0] + x[1] for x in black))\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\nsys.stdin = open('input.txt', 'r')\n\nboard = []\nfor i in range(8):\n    board.append(list(input()))\n\nwhite = []\nblack = []\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            white.append('Kd8')\n        elif board[i][j] == 'Q':\n            white.append('Qe8')\n        elif board[i][j] == 'R':\n            white.append('Rh8')\n        elif board[i][j] == 'B':\n            white.append('Bf8')\n        elif board[i][j] == 'N':\n            white.append('Nb8')\n        elif board[i][j] == 'P':\n            white.append('a2')\n        elif board[i][j] == 'k':\n            black.append('Kd1')\n        elif board[i][j] == 'q':\n            black.append('Qe1')\n        elif board[i][j] == 'r':\n            black.append('Rh1')\n        elif board[i][j] == 'b':\n            black.append('Bf1')\n        elif board[i][j] == 'n':\n            black.append('Ng1')\n        elif board[i][j] == 'p':\n            black.append('a7')\n\nprint('White:', ','.join(white))\nprint('Black:', ','.join(black))\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n\n    # Read input\n    white = []\n    black = []\n    for i in range(8):\n        line = input()\n        for j in range(8):\n            if line[4*j + 1] != \".\":\n                if line[4*j + 1].isupper():\n                    white.append((line[4*j + 1], chr(ord(\"a\") + j) + str(8 - i)))\n                else:\n                    black.append((line[4*j + 1], chr(ord(\"a\") + j) + str(8 - i)))\n\n    # Sort lists\n    white = sorted(white)\n    black = sorted(black, reverse = True)\n\n    # Print output\n    print(\"White:\", \", \".join([x[0] + x[1] for x in white]))\n    print(\"Black:\", \", \".join([x[0] + x[1] for x in black]))\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\n# Solution\n\nimport sys\n\ndef main():\n    board = []\n    for i in range(8):\n        board.append(list(input()))\n    pieces = {\"K\": [], \"Q\": [], \"R\": [], \"B\": [], \"N\": [], \"P\": []}\n    for i in range(8):\n        for j in range(8):\n            if board[i][j] != \":\":\n                pieces[board[i][j]].append((i, j))\n    white = \"White: \"\n    black = \"Black: \"\n    for piece in \"KQRBNP\":\n        for pos in pieces[piece]:\n            if pos[0] < 8:\n                white += piece + chr(ord(\"a\") + pos[1]) + str(8 - pos[0]) + \",\"\n            else:\n                black += piece + chr(ord(\"a\") + pos[1]) + str(8 - pos[0]) + \",\"\n    print(white[:-1])\n    print(black[:-1])\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\nimport string\n\n# Read the input\ninput_lines = sys.stdin.readlines()\n\n# Initialize the board\nboard = []\nfor i in range(8):\n    board.append(input_lines[i+1][1:9])\n\n# Initialize the board positions\npieces = {'K': 'K', 'Q': 'Q', 'R': 'R', 'B': 'B', 'N': 'N', 'P': '', 'k': 'k', 'q': 'q', 'r': 'r', 'b': 'b', 'n': 'n', 'p': ''}\n\n# Initialize the white pieces\nwhite_pieces = []\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] in pieces.keys():\n            if board[i][j] in ['K', 'Q', 'R', 'B', 'N', 'P']:\n                white_pieces.append(pieces[board[i][j]] + string.lowercase[j] + str(8-i))\n\n# Initialize the black pieces\nblack_pieces = []\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] in pieces.keys():\n            if board[i][j] in ['k', 'q', 'r', 'b', 'n', 'p']:\n                black_pieces.append(pieces[board[i][j]] + string.lowercase[j] + str(8-i))\n\n# Print the output\nprint(\"White: \" + ','.join(white_pieces))\nprint(\"Black: \" + ','.join(black_pieces))\n", "\nimport sys\nimport string\n\n# Read the input\ninput_lines = sys.stdin.readlines()\n\n# Initialize the board\nboard = []\nfor i in range(8):\n    board.append(input_lines[i+1][1:9])\n\n# Initialize the board positions\npieces = {'K': 'K', 'Q': 'Q', 'R': 'R', 'B': 'B', 'N': 'N', 'P': '', 'k': 'k', 'q': 'q', 'r': 'r', 'b': 'b', 'n': 'n', 'p': ''}\n\n# Initialize the white pieces\nwhite_pieces = []\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] in pieces.keys():\n            if board[i][j] in ['K', 'Q', 'R', 'B', 'N', 'P']:\n                white_pieces.append(pieces[board[i][j]] + string.lowercase[j] + str(8-i))\n\n# Initialize the black pieces\nblack_pieces = []\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] in pieces.keys():\n            if board[i][j] in ['k', 'q', 'r', 'b', 'n', 'p']:\n                black_pieces.append(pieces[board[i][j]] + string.lowercase[j] + str(8-i))\n\n# Print the output\nprint \"White: \" + ','.join(white_pieces)\nprint \"Black: \" + ','.join(black_pieces)\n", "\n# Solution\n\nimport sys\n\ndef main():\n    board = []\n    for i in range(8):\n        board.append(list(input()))\n    for i in range(8):\n        board.append(list(input()))\n    pieces = {\"K\": [], \"Q\": [], \"R\": [], \"B\": [], \"N\": [], \"P\": []}\n    for i in range(8):\n        for j in range(8):\n            if board[i][j] != \":\":\n                pieces[board[i][j]].append((i, j))\n    white = \"White: \"\n    black = \"Black: \"\n    for piece in \"KQRBNP\":\n        for pos in pieces[piece]:\n            if pos[0] < 8:\n                white += piece + chr(ord(\"a\") + pos[1]) + str(8 - pos[0]) + \",\"\n            else:\n                black += piece + chr(ord(\"a\") + pos[1]) + str(8 - pos[0]) + \",\"\n    print(white[:-1])\n    print(black[:-1])\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\nsys.stdin = open('input.txt', 'r')\n\nboard = []\nfor i in range(8):\n    board.append(list(input()))\n\nwhite = []\nblack = []\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            white.append('Ke1')\n        elif board[i][j] == 'Q':\n            white.append('Qd1')\n        elif board[i][j] == 'R':\n            white.append('Ra1')\n        elif board[i][j] == 'B':\n            white.append('Bc1')\n        elif board[i][j] == 'N':\n            white.append('Nb1')\n        elif board[i][j] == 'P':\n            white.append('a2')\n        elif board[i][j] == 'k':\n            black.append('Ke8')\n        elif board[i][j] == 'q':\n            black.append('Qd8')\n        elif board[i][j] == 'r':\n            black.append('Ra8')\n        elif board[i][j] == 'b':\n            black.append('Bc8')\n        elif board[i][j] == 'n':\n            black.append('Ng8')\n        elif board[i][j] == 'p':\n            black.append('a7')\n\nprint('White:', ','.join(white))\nprint('Black:', ','.join(black))\n", "import sys\n\nboard = []\n\nfor line in sys.stdin:\n    board.append(line[:-1])\n\nwhite = []\nblack = []\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == '.':\n            continue\n        piece = board[i][j]\n        if piece.isupper():\n            white.append(piece + chr(97 + j) + str(8 - i))\n        else:\n            black.append(piece.upper() + chr(97 + j) + str(8 - i))\n\nprint(\"White:\", \", \".join(white))\nprint(\"Black:\", \", \".join(black))\n"]