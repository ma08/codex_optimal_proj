["\nimport fileinput\nlines = fileinput.input()\n\nk = int(lines[0])\ndesks = list(map(int, lines[1:k+1]))\n# Sort the desks in ascending order\ndesks.sort()\n# Find the maximum number of passes through the line\n# by finding the maximum distance between two adjacent desk numbers\nprint(max(desks[i] - desks[i-1] for i in range(1, k)))\n", "\n\ndef main():\n    k = int(input())\n    d = list(map(int, input().split()))\n    d.sort()\n    print(min(d[i] - d[i - 1] for i in range(1, len(d)))) \n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    k = int(input())\n    d = list(map(int, input().split()))\n    d.sort()\n    print(max(d[i] - d[i - 1] for i in range(1, len(d))))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    desks = [int(sys.stdin.readline().strip()) for i in range(K)]\n    desk_positions = {desk: i for i, desk in enumerate(desks)}\n    min_passes = 0\n    for i in range(K):\n        min_passes = max(min_passes, desk_positions[desks[i]] - i)\n    print(min_passes)\n    \nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    desks = [int(sys.stdin.readline()) for _ in range(n)]\n    current_desk = 1\n    passes = 0\n    for desk in desks:\n        if desk > current_desk:\n            passes = passes + (desk - current_desk)\n        current_desk = desk\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    K = int(input())\n    desks = list(map(int, input().split()))\n    pos = 1\n    passes = 0\n    while pos <= K:\n        for i in range(pos, K):\n            if desks[i] == i+1:\n                break\n                pos += 1\n        passes += 1\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    pass\n\nmain()\n", "\n\nimport sys\n\ndef main():\n\tn = int(sys.stdin.readline())\n\tdesks = [int(sys.stdin.readline()) for _ in range(n)] # list comprehension\n\tcurrent_desk = 1\n\tpasses = 0\n\tfor desk in desks:\n\t\tif desk > current_desk:\n\t\t\tpasses = passes + (desk - current_desk)\n\t\tcurrent_desk = desk\n\tprint(passes)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\n\ndef swap(a, b):\n    return b, a\n\n\ndef sort(desks):\n    for i in range(len(desks)):\n        for j in range(len(desks)):\n            if desks[i] < desks[j]:\n                desks[i], desks[j] = swap(desks[i], desks[j])\n    return desks\n\n\ndef main():\n    K = int(input())\n    desks = list(map(int, input().split()))\n    desks = sort(desks)\n    pos = 0\n    passes = 1\n    while pos < K:\n        for i in range(pos, K):\n            if desks[i] == i+1:\n                pos += 1\n        passes += 1\n    print(passes)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    clerks = [] # list of clerks\n    for i in range(K):\n        clerks.append(int(sys.stdin.readline().strip()))\n    clerks.sort()\n    max_val = max(clerks)\n    max_index = clerks.index(max_val)\n    passes = max_index\n    for i in range(max_index+1, K):\n        if clerks[i] - clerks[i-1] > 1:\n            passes += 1\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    K = int(input())\n    desks = [int(input()) for i in range(K)]\n    current_pass = 1\n    passes = 0\n    while any(d > current_pass for d in desks):\n        current_pass = max(d for d in desks if d <= current_pass)\n        passes += 1\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    a.sort()\n    print(a[n-1] - a[0])\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    clerks = [int(sys.stdin.readline().strip()) for i in range(K)]\n    desk_positions = {desk: i for i, desk in enumerate(clerks)\n    max_passes = 0\n    for i in range(K):\n        max_passes = max(max_passes, desk_positions[clerks[i]] - i)\n    print(max_passes)\n    \nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    K = int(input())\n    desks = list(map(int, input().split()))\n    pos = 0\n    passes = 1\n    while pos < K:\n        for i in range(pos, K):\n            if desks[i] == i+1:\n                pos += 1\n        passes += 1\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport math\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    clerks = [0]\n    for i in range(K):\n        clerks.append(int(sys.stdin.readline().strip()))\n    clerks.sort()\n    max_val = max(clerks)\n    max_index = clerks.index(max_val)\n    passes = max_index\n    for i in range(max_index+1, K+1):\n        if clerks[i] - clerks[i-1] > 1:\n            passes += 1\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "\nimport fileinput\n\nlines = fileinput.input()\n\nk = int(lines[0])\ndesks = list(map(int, lines[1: k+1]))\n\n# Sort the desks in ascending order\ndesks.sort()\n\n# Find the maximum number of passes through the line\n# by finding the maximum distance between two adjacent desk numbers\nprint(max(desks[i] - desks[i-1] for i in range(1, k)))\n", "\n\ndef main():\n    K = int(input())\n    desks = list(map(int, input().split()))\n    pos = 1\n    passes = 0\n    for i in range(K):\n        if desks[i] == pos:\n            pos += 1\n        passes += 1\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "import fileinput\nfrom itertools import groupby\n\n\nlines = list(fileinput.input())\n\nn = int(lines[0])\ndesks = list(map(int, lines[1:n+1]))\n\n# Sort the desks in descending order\ndesks.sort(reverse=True)\n\n# Sort the desks in ascending order\ndesks.sort()\n\n# Find the minimum number of passes through the line.\n# by finding the maximum distance between two adjacent desk numbers\nprint(max(desks[i] - desks[i-1] for i in range(1, k)))\n", "#!/usr/bin/env python3\n\nimport sys\nimport math\n\ndef main():\n    K = int(sys.stdin.readline().strip()) # number of clerks\n    clerks = [] # list of clerks\n    for i in range(K):\n        clerks.append(int(sys.stdin.readline().strip()))\n    clerks.sort()\n    max_val = max(clerks)\n    max_index = clerks.index(max_val)\n    passes = max_index\n    for i in range(max_index+1, K):\n        if clerks[i] - clerks[i-1] > 1:\n            passes += 1\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "\nimport fileinput\n\nlines = fileinput.input()\n\nk = int(lines[0])\ndesks = list(map(int, lines[1:k+1]))\n\n# Sort the desks in ascending order\ndesks.sort()\n\n# Find the minimum number of passes through the line.\n# by finding the maximum distance between two adjacent desk numbers\nprint(max(desks[i] - desks[i-1] for i in range(1, k)))\n", "\nimport sys\nimport math\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    clerks = []\n    for i in range(K):\n        clerks.append(int(sys.stdin.readline().strip()))\n    clerks.sort()\n    if K == 1:\n        print(1)\n    else:\n        max_val = max(clerks)\n        max_index = clerks.index(max_val)\n        passes = max_index\n        for i in range(max_index+1, K):\n            if clerks[i] - clerks[i-1] > 1:\n                passes += 1\n        print(passes)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    k = int(sys.stdin.readline())\n    desks = [int(sys.stdin.readline()) for _ in range(k)]\n    current_desk = 1\n    passes = 0\n    for desk in desks:\n        if desk > current_desk:\n            passes = passes + (desk - current_desk)\n        current_desk = desk\n    print(passes)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    desks = [int(sys.stdin.readline().strip()) for _ in range(K)]\n    desks.sort()\n    count = 0\n    for i in range(K):\n        count += 1\n        if desks[i] < i+1:\n            count += i - desks[i]\n    print(count)\n\nmain()\n", "\n\nimport sys\nimport math\n\ndef main():\n    K = int(sys.stdin.readline().strip())\n    desks = [int(sys.stdin.readline().strip()) for i in range(K)]\n    desk_positions = {desk: i for i, desk in enumerate(desks)} \n    min_passes = 0\n    for i in range(K):\n        min_passes = max(min_passes, desk_positions[desks[i]] - i)\n    print(min_passes)\n    \nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\n\ndef main():\n    N = int(sys.stdin.readline().strip())\n    for i in range(N):\n        print(i)\n\nif __name__ == '__main__':\n    main()\n"]