["\nimport sys\n\ndef main():\n    # Read in the input\n    q, x = map(int, sys.stdin.readline().strip().split(' '))\n    queries = []\n    for i in range(0, q):\n        queries.append(int(sys.stdin.readline().strip()))\n\n    # Initialize the array\n    arr = []\n\n    # Iterate through the queries\n    for i in range(0, len(queries)):\n        # Append the new element to the array\n        arr.append(queries[i])\n        \n        # Calculate the MEX and print it\n        print(calculate_mex(arr, x), end=' ')\n\ndef calculate_mex(arr, x):\n    # Sort the array\n    arr.sort()\n\n    # Initialize the MEX as 0\n    mex = 0\n    \n    # Iterate through the array\n    for i in range(0, len(arr)):\n        # If the current element is smaller than the MEX, we can increase it to the MEX\n        if arr[i] < mex:\n            arr[i] += x\n        # If the current element is equal to the MEX, we need to increase the MEX\n        elif arr[i] == mex:\n            mex += 1\n        # If the current element is greater than the MEX, we can do nothing\n        else:\n            pass\n    \n    # Return the MEX\n    return mex\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef solve(queries, x):\n    \"\"\"\n    >>> solve([0, 1, 2, 2, 0, 0, 10], 3)\n    [1, 2, 3, 3, 4, 4, 7]\n    >>> solve([1, 2, 1, 2], 3)\n    [0, 0, 0, 0]\n    \"\"\"\n    res = []\n    current_mex = 0\n    for query in queries:\n        if query == current_mex:\n            current_mex += 1\n        res.append(current_mex)\n    return res\n\nif __name__ == '__main__':\n    q, x = map(int, sys.stdin.readline().split())\n    queries = []\n    for _ in range(q):\n        queries.append(int(sys.stdin.readline()))\n    print('\\n'.join(map(str, solve(queries, x))))\n", "\nimport sys\n\ndef main():\n    # Read in the input and parse it\n    q, x = map(int, input().split())\n    queries = [int(input()) for i in range(q)]\n\n    # Initialize the array and the MEX\n    arr = [0]\n    mex = 0\n\n    # Iterate through the queries\n    for i in range(0, len(queries)):\n        # If the new element is smaller than the MEX, we can increase it to the MEX + 1\n        if queries[i] < mex:\n            queries[i] += x\n        # If the new element is equal to the MEX, we need to increase the MEX\n        elif queries[i] == mex:\n            mex += 1\n        # If the new element is greater than the MEX, we can do nothing\n        elif queries[i] > mex:\n            pass\n        # Append the new element to the array and sort it\n        arr.append(queries[i])\n        arr.sort()\n        # Print the MEX\n        print(mex)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef solve(queries, x):\n    \"\"\"\n    >>> solve([0, 1, 2, 2, 0, 0, 10], 3) == [1, 2, 3, 3, 4, 4, 10]\n    True\n    >>> solve([1, 2, 1, 2], 3) == [0, 0, 0, 0]\n    True\n    \"\"\"\n    res = []\n    current_mex = 0\n    for query in queries:\n        if query == current_mex:\n            current_mex += 1\n        res.append(current_mex)\n    return res\n\nif __name__ == '__main__':\n    q, x = map(int, sys.stdin.readline().split())\n    queries = []\n    for _ in range(q):\n        queries.append(int(sys.stdin.readline()))\n    print('\\n'.join(map(str, solve(queries, x))))\n", "\n\nimport sys\n\ndef main():\n    # # Read in the input\n    # q, x = map(int, sys.stdin.readline().strip().split(' '))\n    # queries = []\n    # for i in range(0, q):\n    #     queries.append(int(sys.stdin.readline().strip()))\n\n    # # Initialize the array\n    # arr = []\n\n    # # Iterate through the queries\n    # for i in range(0, len(queries)):\n    #     # Append the new element to the array\n    #     arr.append(queries[i])\n        \n    #     # Calculate the MEX and print it\n    #     print(calculate_mex(arr, x), end=' ')\n\n# def calculate_mex(arr, x):\n#     # Sort the array\n#     arr.sort()\n\n    # # Initialize the MEX as 0\n    # mex = 0\n    \n    # # Iterate through the array\n    # for i in range(0, len(arr)):\n    #     # If the current element is smaller than the MEX, we can increase it to the MEX\n    #     if arr[i] < mex:\n    #         arr[i] += x\n    #     # If the current element is equal to the MEX, we need to increase the MEX\n    #     elif arr[i] == mex:\n    #         mex += 1\n    #     # If the current element is greater than the MEX, we can do nothing\n    #     else:\n    #         pass\n    \n    # # Return the MEX\n    # return mex\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n\t# Read in the input\n\tq, x = map(int, sys.stdin.readline().strip().split(' '))\n\tqueries = []\n\tfor i in range(0, q):\n\t\tqueries.append(int(sys.stdin.readline().strip()))\n\n\t# Initialize the array\n\tarr = []\n\n\t# Iterate through the queries\n\tfor i in range(0, len(queries)):\n\t\t# Append the new element to the array\n\t\tarr.append(queries[i])\n\t\t\n\t\t# Calculate the MEX\n\t\tprint(calculate_mex(arr, x))\n\ndef calculate_mex(arr, x):\n\t# Sort the array\n\tarr.sort()\n\n\t# Initialize the MEX as 0\n\tmex = 0\n\t\n\t# Iterate through the array\n\tfor i in range(0, len(arr)):\n\t\t# If the current element is smaller than the MEX, we can increase it to the MEX + 1\n\t\tif arr[i] < mex:\n\t\t\tarr[i] += x\n\t\t# If the current element is equal to the MEX, we need to increase the MEX\n\t\telif arr[i] == mex:\n\t\t\tmex += 1\n\t\t# If the current element is greater than the MEX, we can do nothing\n\t\telse:\n\t\t\tpass\n\t\n\t# Return the MEX\n\treturn mex\n\nif __name__ == '__main__':\n\tmain()\n", "\n\nimport sys\n\ndef solve(queries, x):\n    res = []\n    current_mex = 0\n    for query in queries:\n        if query == current_mex:\n            current_mex += 1\n        res.append(current_mex)\n    return res\n\nif __name__ == '__main__':\n    q, x = map(int, sys.stdin.readline().split())\n    queries = []\n    for _ in range(q):\n        queries.append(int(sys.stdin.readline()))\n    print('\\n'.join(map(str, solve(queries, x))))\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef solve(queries, x):\n    \"\"\"\n    >>> solve([0, 1, 2, 2, 0, 0, 10], 3)\n    [1, 2, 3, 3, 1, 1, 10]\n    >>> solve([1, 2, 1, 2], 3)\n    [0, 1, 0, 1]\n    \"\"\"\n    res = []\n    current_mex = 1\n    for query in queries:\n        if query == current_mex % x:\n            current_mex += 1\n        res.append(current_mex)\n    return res\n\nif __name__ == '__main__':\n    q, x = map(int, sys.stdin.readline().split())\n    queries = []\n    for _ in range(q):\n        queries.append(int(sys.stdin.readline()))\n    print('\\n'.join(map(str, solve(queries, x))) + '\\n')\n"]