["\ndef main(inp):\n    if len(inp) <= 2: return 0\n    freq = {}\n    for char in inp: freq[char] = freq.get(char, 0) + 1\n    if len(freq) <= 2: return 0\n    freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n    if freq[2][1] == 1: return len(inp) - 2\n    else: return len(inp) - 1 - freq[1][1] - freq[2][1]\n", "\n\n# The idea is to find the most frequent character, and then delete all other characters\n\n# If the most frequent character occurs more than n/2 times, then the string will have simplicity 1 after the deletions.\n# If the most frequent character occurs less than n/2 times, then the string will have simplicity 2 after the deletions.\n\n# The complexity of this algorithm is O(n).\n\n\ndef simplify(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    most_freq_char = max(char_count, key=char_count.get)\n    num_erase = len(string) - char_count[most_freq_char]\n\n    return num_erase\n\n\ndef main():\n    string = input()\n    print(simplify(string))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef simplify(s):\n    \"\"\"Simplify a string of lowercase letters.\n\n    >>> simplify('aabbcc')\n    3\n    >>> simplify('aabbccc')\n    3\n    >>> simplify('aabbcccc')\n    3\n    >>> simplify('aabbccccc')\n    4\n    >>> simplify('aabbcccccc')\n    4\n    >>> simplify('aabbccccccc')\n    5\n    >>> simplify('aabbcccccccc')\n    5\n    >>> simplify('aabbccccccccc')\n    6\n    >>> simplify('aabbcccccccccc')\n    6\n    >>> simplify('aabbccccccccccc')\n    7\n    >>> simplify('aabbcccccccccccc')\n    7\n    >>> simplify('aabbccccccccccccc')\n    8\n    >>> simplify('aabbcccccccccccccc')\n    8\n    >>> simplify('aabbccccccccccccccc')\n    9\n    >>> simplify('aabbcccccccccccccccc')\n    9\n    >>> simplify('aabbccccccccccccccccc')\n    10\n    >>> simplify('aabbcccccccccccccccccc')\n    10\n    >>> simplify('aabbccccccccccccccccccc')\n    11\n    >>> simplify('aabbcccccccccccccccccccc')\n    11\n    >>> simplify('aabbccccccccccccccccccccc')\n    12\n    >>> simplify('aabbcccccccccccccccccccccc')\n    12\n    >>> simplify('aabbccccccccccccccccccccccc')\n    13\n    >>> simplify('aabbcccccccccccccccccccccccc')\n    13\n    >>> simplify('aabbccccccccccccccccccccccccc')\n    14\n    >>> simplify('aabbcccccccccccccccccccccccccc')\n    14\n    >>> simplify('aabbccccccccccccccccccccccccccc')\n    15\n    >>> simplify('aabbcccccccccccccccccccccccccccc')\n    15\n    >>> simplify('aabbccccccccccccccccccccccccccccc')\n    16\n    >>> simplify('aabbcccccccccccccccccccccccccccccc')\n    16\n    >>> simplify('aabbccccccccccccccccccccccccccccccc')\n    17\n    >>> simplify('aabbcccccccccccccccccccccccccccccccc')\n    17\n    >>> simplify('aabbccccccccccccccccccccccccccccccccc')\n    18\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccc')\n    18\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccc')\n    19\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccc')\n    19\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccc')\n    20\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccc')\n    20\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccc')\n    21\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccc')\n    21\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccc')\n    22\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccc')\n    22\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccc')\n    23\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccc')\n    23\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccc')\n    24\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccc')\n    24\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccc')\n    25\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccc')\n    25\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccccc')\n    26\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccccc')\n    26\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    27\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    27\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    28\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    28\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    29\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    29\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    30\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    30\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    31\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    31\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    32\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    32\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    33\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    33\n    \"\"\"\n    return len(set(s))\n\ndef erase(s):\n    \"\"\"Find minimum number of letters to erase to simplify a string.\n\n    >>> erase('aabbcc')\n    0\n    >>> erase('aabbccc')\n    0\n    \"\"\"\n        return 0\n    if simplify(string) < 3:\n        return 0\n    for i in range(len(string)):\n        if simplify(string[:i] + string[i + 1:]) < 3:\n            return 1\n    return 2\n\nprint(erase(input()))\n", "\ndef min_erase(s):\n    min_erase = len(s)\n    for i in range(len(s)):\n        s_ = s[:i] + s[i + 1:]\n        min_erase = min(min_erase, len(s) - simplicity(s_) - 1)\n\n    return min_erase\n\ndef simplicity(s):\n    return len(set(s))\n\nprint(min_erase(input()))\n", "\nimport sys\n\ndef main():\n    inp = sys.stdin.readline().strip()\n    if len(inp) <= 2:\n        print(0)\n    else:\n        chars = set()\n        for i in range(len(inp)):\n            if inp[i] not in chars:\n                chars.add(inp[i])\n            if len(chars) > 2:\n                print(i)\n                return\n        print(len(inp))\n\nif __name__ == '__main__':\n    main()\n", "\nimport re\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        line = re.sub(r'[^a-zA-Z]', ' ', line)\n        print(line)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef simplify(s):\n    \"\"\"Simplify a string of lowercase letters.\n\n    >>> simplify('aabbcc')\n    3\n    >>> simplify('aabbccc')\n    3\n    >>> simplify('aabbcccc')\n    3\n    >>> simplify('aabbccccc')\n    4\n    >>> simplify('aabbcccccc')\n    4\n    >>> simplify('aabbccccccc')\n    5\n    >>> simplify('aabbcccccccc')\n    5\n    >>> simplify('aabbccccccccc')\n    6\n    >>> simplify('aabbcccccccccc')\n    6\n    >>> simplify('aabbccccccccccc')\n    7\n    >>> simplify('aabbcccccccccccc')\n    7\n    >>> simplify('aabbccccccccccccc')\n    8\n    >>> simplify('aabbcccccccccccccc')\n    8\n    >>> simplify('aabbccccccccccccccc')\n    9\n    >>> simplify('aabbcccccccccccccccc')\n    9\n    >>> simplify('aabbccccccccccccccccc')\n    10\n    >>> simplify('aabbcccccccccccccccccc')\n    10\n    >>> simplify('aabbccccccccccccccccccc')\n    11\n    >>> simplify('aabbcccccccccccccccccccc')\n    11\n    >>> simplify('aabbccccccccccccccccccccc')\n    12\n    >>> simplify('aabbcccccccccccccccccccccc')\n    12\n    >>> simplify('aabbccccccccccccccccccccccc')\n    13\n    >>> simplify('aabbcccccccccccccccccccccccc')\n    13\n    >>> simplify('aabbccccccccccccccccccccccccc')\n    14\n    >>> simplify('aabbcccccccccccccccccccccccccc')\n    14\n    >>> simplify('aabbccccccccccccccccccccccccccc')\n    15\n    >>> simplify('aabbcccccccccccccccccccccccccccc')\n    15\n    >>> simplify('aabbccccccccccccccccccccccccccccc')\n    16\n    >>> simplify('aabbcccccccccccccccccccccccccccccc')\n    16\n    >>> simplify('aabbccccccccccccccccccccccccccccccc')\n    17\n    >>> simplify('aabbcccccccccccccccccccccccccccccccc')\n    17\n    >>> simplify('aabbccccccccccccccccccccccccccccccccc')\n    18\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccc')\n    18\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccc')\n    19\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccc')\n    19\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccc')\n    20\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccc')\n    20\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccc')\n    21\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccc')\n    21\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccc')\n    22\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccc')\n    22\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccc')\n    23\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccc')\n    23\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccc')\n    24\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccc')\n    24\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccc')\n    25\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccc')\n    25\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccccc')\n    26\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccccc')\n    26\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    27\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    27\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    28\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    28\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    29\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    29\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    30\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    30\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    31\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    31\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    32\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    32\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    33\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    33\n    \"\"\"\n    return len(set(s))\n\ndef erase(s):\n    \"\"\"Find minimum number of letters to erase to simplify a string.\n\n    >>> erase('aabbcc')\n    0\n    >>> erase('aabbccc')\n    0\n    \"\"\"\n    if simplify(string) < 3:\n        return 0\n    for i in range(len(string)):\n        if simplify(string[:i] + string[i + 1:]) < 3:\n            return 1\n    return 2\n\nprint(erase(input()))\n", "\nimport sys\n\ndef main():\n    input = sys.stdin.readline().strip()\n    if len(input) <= 2:\n        print(len(input))\n    else:\n        chars = set()\n        for i in range(len(input)-1):\n            if input[i] not in chars:\n                chars.add(input[i])\n            if len(chars) > 2:\n                print(i+1)\n                return\n        print(len(input))\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        res = 0\n        count = [0] * 26\n        for i in line:\n            count[ord(i) - ord('a')] += 1\n        for i in count:\n            if i > 2:\n                res += i - 2\n        print(res)\n\nmain()\n", "\n\ndef main():\n    word = input()\n    if len(set(word)) == 2:\n        print(0)\n    else:\n        print(len(word) - 2) \n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        res = 0\n        count = [0]*26\n        for i in line:\n            count[ord(i)-ord('a')] += 1\n        for i in count:\n            if i > 2:\n                res += i-2\n        print(res)\n\nmain()\n", "\n\ndef simplicity(s):\n    return len(set(s))\n\ndef min_erase_count(s):\n    min_count = len(s)\n    for i in range(len(s)):\n        s_ = s[:i] + s[i+1:]\n        min_count = min(min_count, len(s) - simplicity(s_))\n    return min_count\n\nprint(min_erase_count(input()))\n", "\ndef simplify(string):\n    \"\"\"Simplify a string of lowercase letters\"\"\"\n    return len(set(string))\n\ndef erase(string):\n    \"\"\"Find minimum number of letters to erase to simplify a string\"\"\"\n    if len(string) < 3:\n        return 0\n    if simplify(string) < 3:\n        return 0\n    for i in range(len(string)):\n        if simplify(string[:i] + string[i + 1:]) < 3:\n            return 1\n    return 2\n\nprint(erase(input()))\n", "\n#!/usr/bin/env python3\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        res = 0\n        count = [0]*26\n        for i in line:\n            count[ord(i)-ord('a')] += 1\n        for i in count:\n            if i > 2:\n                res += i-2\n        print(res)\n\nmain()\n", "\n\ndef simplify(string):\n    \"\"\"Simplify a string of lowercase letters\"\"\"\n    return len(set(string)) == 2\n\ndef erase(string):\n    \"\"\"Find minimum number of letters to erase to simplify a string\"\"\"\n    if len(string) < 3:\n        return 0\n    if simplify(string):\n        return 0\n    for i in range(len(string)):\n        if simplify(string[:i] + string[i + 1:]):\n            return 1\n    return 2\n\nprint(erase(input()))\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        res = 0\n        count = [0]*26\n        for i in line:\n            if ord('a') <= ord(i) <= ord('z'):\n                count[ord(i)-ord('a')] += 1\n        for i in count:\n            if i > 2:\n                res += i-2\n        print(res)\n\nmain()\n", "\n\n# The idea is to find the most frequent character and then delete all other characters.\n\n# If the most frequent character occurs more than n/2 times, then the string will have simplicity 1 after the deletion.\n# If the most frequent character occurs less than n/2 times, then the string will have simplicity 2 after the deletion.\n\n# The complexity of this algorithm is O(n).\n\ndef simplify(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    most_freq_char = max(char_count, key=char_count.get)\n    num_erase = len(string) - char_count[most_freq_char]\n\n    return num_erase\n\ndef main():\n    string = input()\n    print(simplify(string))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    inp = sys.stdin.readline().strip()\n    if len(inp) < 2:\n        print(0)\n        return\n    freq = {}\n    for char in inp:\n        if char not in freq:\n            freq[char] = 1\n        else:\n            freq[char] += 1\n    if len(freq) <= 2:\n        print(0)\n        return\n    else:\n        freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n        if freq[2][1] == 1:\n            print(len(inp) - 2)\n            return\n        else:\n            print(len(inp) - 1 - freq[1][1] - freq[2][1])\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    input_str = sys.stdin.readline().strip()\n    if len(input_str) < 2:\n        print(0)\n        return\n    freq = {}\n    for char in input_str:\n        if char not in freq:\n            freq[char] = 1\n        else:\n            freq[char] += 1\n    if len(freq) <= 2:\n        print(0)\n        return\n    else:\n        freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n        if freq[2][1] == 1:\n            print(len(input_str) - 2)\n            return\n        else:\n            print(len(input_str) - 1 - freq[1][1] - freq[2][1])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    word = input()\n    if len(set(word)) == 1:\n        print(0)\n    else:\n        print(len(word) - 2)\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef min_erase(s):\n    min_erase = len(s)\n    for i in range(len(s)):\n        s_ = s[:i] + s[i+1:]\n        min_erase = min(min_erase, len(s) - simplicity(s_))\n    return min_erase\n\ndef simplicity(s):\n    return len(set(s))\n\nprint(min_erase(input()))\n", "\ndef simplicity(s):\n    return len(set(s))\n\ndef min_erase_count(s):\n    min_erase_count = len(s)\n    for i in range(len(s)):\n        s_ = s[:i] + s[i+1:]\n        min_erase_count = min(min_erase_count, len(s) - simplicity(s_))\n    return min_erase_count\n\nprint(min_erase_count(input()))\n", "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    for i in range(n):\n        inp = sys.stdin.readline().strip()\n        if len(inp) <= 2:\n            print(0)\n        else:\n            chars = set()\n            for i in range(len(inp)):\n                if inp[i] not in chars:\n                    chars.add(inp[i])\n                if len(chars) > 2:\n                    print(i)\n                    break\n            else:\n                print(len(inp))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if len(line) <= 2:\n            print(0)\n        elif len(set(line)) <= 1:\n            print(0)\n        else:\n            print(len(line) - 2)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if len(line) <= 2:\n            print(0)\n        elif len(set(line)) <= 2:\n            print(0)\n        else:\n            print(len(line) - 2)\n\nif __name__ == '__main__':\n    main()\n", "\nimport re\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        line = re.sub(r'[^a-zA-Z]', '', line)\n        print(line.lower())\n\nif __name__ == '__main__':\n    main()\n", "\n\n# The idea is to find the most frequent character, and then delete all other characters\n\n# If the most frequent character occurs more than n/2 times, then the string will have simplicity 1 after the deletions.\n# If the most frequent character occurs less than n/2 times, then the string will have simplicity 2 after the deletions.\n\n# The complexity of this algorithm is O(n).\n\ndef simplify(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    most_freq_char = max(char_count, key=char_count.get)\n    num_erase = len(string) - char_count[most_freq_char]\n\n    return num_erase\n\n\ndef main():\n    string = input()\n    print(simplify(string))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    word = input()\n    if len(set(word)) < 3:\n        print(0)\n    else:\n        print(len(word) - 2)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport math\nimport sys\n\ndef main():\n    inp = sys.stdin.readline().strip().split()\n    n = int(inp[0])\n    m = int(inp[1])\n    for i in range(m):\n        inp = sys.stdin.readline().strip().split()\n        a = int(inp[0])\n        b = int(inp[1])\n        c = int(inp[2])\n        print(math.ceil(n / a) * math.ceil(n / b) * math.ceil(n / c))\nif __name__ == '__main__':\n    main()\n"]