2022-04-11 22:08:51.408405 num operations 2
2022-04-11 22:08:51.408429 size on input set 1
2022-04-11 22:08:53.749260 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        res = 0\n        count = [0]*26\n        for i in line:\n            count[ord(i)-ord('a')] += 1\n        for i in count:\n            if i > 2:\n                res += i-2\n        print(res)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n#\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        res = 0\n        count = [0]*26\n        for i in line:\n            count[ord(i)-ord('a')] += 1\n        for i in count:\n            if i > 2:\n                res += i-2\n        print(res)\n\nmain()\n"
    }
  ],
  "created": 1649729331,
  "object": "edit"
}
2022-04-11 22:08:53.749604 fix spelling mistakes 2 ["#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        res = 0\n        count = [0]*26\n        for i in line:\n            count[ord(i)-ord('a')] += 1\n        for i in count:\n            if i > 2:\n                res += i-2\n        print(res)\n\nmain()\n", "\n#\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        res = 0\n        count = [0]*26\n        for i in line:\n            count[ord(i)-ord('a')] += 1\n        for i in count:\n            if i > 2:\n                res += i-2\n        print(res)\n\nmain()\n"]
2022-04-11 22:08:53.749646 size on output set 2
2022-04-11 22:08:53.749652 size on input set 2
2022-04-11 22:08:55.784225 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#!/usr/bin/env python3\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        res = 0\n        count = [0]*26\n        for i in line:\n            count[ord(i)-ord('a')] += 1\n        for i in count:\n            if i > 2:\n                res += i-2\n        print(res)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        res = 0\n        count = [0]*26\n        for i in line:\n            count[ord(i)-ord('a')] += 1\n        for i in count:\n            if i > 2:\n                res += i-2\n        print(res)\n\nmain()\n"
    }
  ],
  "created": 1649729334,
  "object": "edit"
}
2022-04-11 22:08:55.784606 fix syntax errors 2 ["\n#!/usr/bin/env python3\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        res = 0\n        count = [0]*26\n        for i in line:\n            count[ord(i)-ord('a')] += 1\n        for i in count:\n            if i > 2:\n                res += i-2\n        print(res)\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        res = 0\n        count = [0]*26\n        for i in line:\n            count[ord(i)-ord('a')] += 1\n        for i in count:\n            if i > 2:\n                res += i-2\n        print(res)\n\nmain()\n"]
2022-04-11 22:08:59.211243 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        res = 0\n        count = [0] * 26\n        for i in line:\n            count[ord(i) - ord('a')] += 1\n        for i in count:\n            if i > 2:\n                res += i - 2\n        print(res)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        res = 0\n        count = [0]*26\n        for i in line:\n            if ord('a') <= ord(i) <= ord('z'):\n                count[ord(i)-ord('a')] += 1\n        for i in count:\n            if i > 2:\n                res += i-2\n        print(res)\n\nmain()\n"
    }
  ],
  "created": 1649729336,
  "object": "edit"
}
2022-04-11 22:08:59.211653 fix syntax errors 2 ["#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        res = 0\n        count = [0] * 26\n        for i in line:\n            count[ord(i) - ord('a')] += 1\n        for i in count:\n            if i > 2:\n                res += i - 2\n        print(res)\n\nmain()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        res = 0\n        count = [0]*26\n        for i in line:\n            if ord('a') <= ord(i) <= ord('z'):\n                count[ord(i)-ord('a')] += 1\n        for i in count:\n            if i > 2:\n                res += i-2\n        print(res)\n\nmain()\n"]
2022-04-11 22:08:59.211681 size on output set 4
2022-04-11 22:08:59.211703 num operations 2
2022-04-11 22:08:59.211710 size on input set 1
2022-04-11 22:09:04.491234 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#The idea is to find the most frequent character, and then delete all other characters\n\n#If the most frequent character occurs more than n/2 times, then the string will have simplicity 1 after the deletions.\n#If the most frequent character occurs less than n/2 times, then the string will have simplicity 2 after the deletions.\n\n#The complexity of this algorithm is O(n).\n\ndef simplify(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    most_freq_char = max(char_count, key=char_count.get)\n    num_erase = len(string) - char_count[most_freq_char]\n\n    return num_erase\n\ndef main():\n    string = input()\n    print(simplify(string))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n#The idea is to find the most frequent character and then delete all other characters.\n\n#If the most frequent character occurs more than n/2 times, then the string will have simplicity 1 after the deletion.\n#If the most frequent character occurs less than n/2 times, then the string will have simplicity 2 after the deletion.\n\n#The complexity of this algorithm is O(n).\n\ndef simplify(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    most_freq_char = max(char_count, key=char_count.get)\n    num_erase = len(string) - char_count[most_freq_char]\n\n    return num_erase\n\ndef main():\n    string = input()\n    print(simplify(string))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649729339,
  "object": "edit"
}
2022-04-11 22:09:04.491526 fix spelling mistakes 2 ['\n\n#The idea is to find the most frequent character, and then delete all other characters\n\n#If the most frequent character occurs more than n/2 times, then the string will have simplicity 1 after the deletions.\n#If the most frequent character occurs less than n/2 times, then the string will have simplicity 2 after the deletions.\n\n#The complexity of this algorithm is O(n).\n\ndef simplify(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    most_freq_char = max(char_count, key=char_count.get)\n    num_erase = len(string) - char_count[most_freq_char]\n\n    return num_erase\n\ndef main():\n    string = input()\n    print(simplify(string))\n\nif __name__ == "__main__":\n    main()\n', '\n\n#The idea is to find the most frequent character and then delete all other characters.\n\n#If the most frequent character occurs more than n/2 times, then the string will have simplicity 1 after the deletion.\n#If the most frequent character occurs less than n/2 times, then the string will have simplicity 2 after the deletion.\n\n#The complexity of this algorithm is O(n).\n\ndef simplify(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    most_freq_char = max(char_count, key=char_count.get)\n    num_erase = len(string) - char_count[most_freq_char]\n\n    return num_erase\n\ndef main():\n    string = input()\n    print(simplify(string))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-11 22:09:04.491771 size on output set 2
2022-04-11 22:09:04.491780 size on input set 2
2022-04-11 22:09:09.683158 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# The idea is to find the most frequent character and then delete all other characters.\n\n# If the most frequent character occurs more than n/2 times, then the string will have simplicity 1 after the deletion.\n# If the most frequent character occurs less than n/2 times, then the string will have simplicity 2 after the deletion.\n\n# The complexity of this algorithm is O(n).\n\ndef simplify(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    most_freq_char = max(char_count, key=char_count.get)\n    num_erase = len(string) - char_count[most_freq_char]\n\n    return num_erase\n\ndef main():\n    string = input()\n    print(simplify(string))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n# The idea is to find the most frequent character and then delete all other characters.\n\n# If the most frequent character occurs more than n/2 times, then the string will have simplicity 1 after the deletion.\n# If the most frequent character occurs less than n/2 times, then the string will have simplicity 2 after the deletion.\n\n# The complexity of this algorithm is O(n).\n\ndef simplify(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    most_freq_char = max(char_count, key=char_count.get)\n    num_erase = len(string) - char_count[most_freq_char]\n\n    return num_erase\n\ndef main():\n    string = input()\n    print(simplify(string))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649729344,
  "object": "edit"
}
2022-04-11 22:09:09.683479 fix syntax errors 2 ['\n\n# The idea is to find the most frequent character and then delete all other characters.\n\n# If the most frequent character occurs more than n/2 times, then the string will have simplicity 1 after the deletion.\n# If the most frequent character occurs less than n/2 times, then the string will have simplicity 2 after the deletion.\n\n# The complexity of this algorithm is O(n).\n\ndef simplify(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    most_freq_char = max(char_count, key=char_count.get)\n    num_erase = len(string) - char_count[most_freq_char]\n\n    return num_erase\n\ndef main():\n    string = input()\n    print(simplify(string))\n\nif __name__ == "__main__":\n    main()\n', '\n\n# The idea is to find the most frequent character and then delete all other characters.\n\n# If the most frequent character occurs more than n/2 times, then the string will have simplicity 1 after the deletion.\n# If the most frequent character occurs less than n/2 times, then the string will have simplicity 2 after the deletion.\n\n# The complexity of this algorithm is O(n).\n\ndef simplify(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    most_freq_char = max(char_count, key=char_count.get)\n    num_erase = len(string) - char_count[most_freq_char]\n\n    return num_erase\n\ndef main():\n    string = input()\n    print(simplify(string))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-11 22:09:15.392129 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# The idea is to find the most frequent character, and then delete all other characters\n\n# If the most frequent character occurs more than n/2 times, then the string will have simplicity 1 after the deletions.\n# If the most frequent character occurs less than n/2 times, then the string will have simplicity 2 after the deletions.\n\n# The complexity of this algorithm is O(n).\n\ndef simplify(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    most_freq_char = max(char_count, key=char_count.get)\n    num_erase = len(string) - char_count[most_freq_char]\n\n    return num_erase\n\n\ndef main():\n    string = input()\n    print(simplify(string))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n# The idea is to find the most frequent character, and then delete all other characters\n\n# If the most frequent character occurs more than n/2 times, then the string will have simplicity 1 after the deletions.\n# If the most frequent character occurs less than n/2 times, then the string will have simplicity 2 after the deletions.\n\n# The complexity of this algorithm is O(n).\n\n\ndef simplify(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    most_freq_char = max(char_count, key=char_count.get)\n    num_erase = len(string) - char_count[most_freq_char]\n\n    return num_erase\n\n\ndef main():\n    string = input()\n    print(simplify(string))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649729349,
  "object": "edit"
}
2022-04-11 22:09:15.392386 fix syntax errors 2 ['\n\n# The idea is to find the most frequent character, and then delete all other characters\n\n# If the most frequent character occurs more than n/2 times, then the string will have simplicity 1 after the deletions.\n# If the most frequent character occurs less than n/2 times, then the string will have simplicity 2 after the deletions.\n\n# The complexity of this algorithm is O(n).\n\ndef simplify(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    most_freq_char = max(char_count, key=char_count.get)\n    num_erase = len(string) - char_count[most_freq_char]\n\n    return num_erase\n\n\ndef main():\n    string = input()\n    print(simplify(string))\n\n\nif __name__ == "__main__":\n    main()\n', '\n\n# The idea is to find the most frequent character, and then delete all other characters\n\n# If the most frequent character occurs more than n/2 times, then the string will have simplicity 1 after the deletions.\n# If the most frequent character occurs less than n/2 times, then the string will have simplicity 2 after the deletions.\n\n# The complexity of this algorithm is O(n).\n\n\ndef simplify(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    most_freq_char = max(char_count, key=char_count.get)\n    num_erase = len(string) - char_count[most_freq_char]\n\n    return num_erase\n\n\ndef main():\n    string = input()\n    print(simplify(string))\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-11 22:09:15.392534 size on output set 3
2022-04-11 22:09:15.392547 num operations 2
2022-04-11 22:09:15.392552 size on input set 1
2022-04-11 22:09:17.812049 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    word = input()\n    if len(set(word)) == 2:\n        print(0)\n    else:\n        print(len(word) - 2)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    word = input()\n    if len(set(word)) < 2:\n        print(0)\n    else:\n        print(len(word) - 2)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649729355,
  "object": "edit"
}
2022-04-11 22:09:17.812252 fix spelling mistakes 2 ['\n\ndef main():\n    word = input()\n    if len(set(word)) == 2:\n        print(0)\n    else:\n        print(len(word) - 2)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    word = input()\n    if len(set(word)) < 2:\n        print(0)\n    else:\n        print(len(word) - 2)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-11 22:09:17.812277 size on output set 2
2022-04-11 22:09:17.812287 size on input set 2
2022-04-11 22:09:20.211157 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    word = input()\n    if len(set(word)) == 1:\n        print(0)\n    else:\n        print(len(word) - 2)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    word = input()\n    if len(set(word)) < 3:\n        print(0)\n    else:\n        print(len(word) - 2)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649729358,
  "object": "edit"
}
2022-04-11 22:09:20.211274 fix syntax errors 2 ['\n\ndef main():\n    word = input()\n    if len(set(word)) == 1:\n        print(0)\n    else:\n        print(len(word) - 2)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    word = input()\n    if len(set(word)) < 3:\n        print(0)\n    else:\n        print(len(word) - 2)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-11 22:09:22.546271 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    word = input()\n    if len(set(word)) == 2:\n        print(0)\n    else:\n        print(len(word) - 2) \n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    word = input()\n    if len(set(word)) == 1:\n        print(0)\n    else:\n        print(len(word) - 2)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649729360,
  "object": "edit"
}
2022-04-11 22:09:22.546500 fix syntax errors 2 ['\n\ndef main():\n    word = input()\n    if len(set(word)) == 2:\n        print(0)\n    else:\n        print(len(word) - 2) \n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    word = input()\n    if len(set(word)) == 1:\n        print(0)\n    else:\n        print(len(word) - 2)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-11 22:09:22.546526 size on output set 3
2022-04-11 22:09:22.546559 num operations 2
2022-04-11 22:09:22.546564 size on input set 1
2022-04-11 22:10:02.645831 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef simplify(string):\n    \"\"\"Simplify a string of lowercase letters\"\"\"\n    return len(set(string))\n\ndef erase(string):\n    \"\"\"Find minimum number of letters to erase to simplify a string\"\"\"\n    if len(string) < 3:\n        return 0\n    if simplify(string) < 3:\n        return 0\n    for i in range(len(string)):\n        if simplify(string[:i] + string[i + 1:]) < 3:\n            return 1\n    return 2\n\nprint(erase(input()))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef simplify(s):\n    \"\"\"Simplify a string of lowercase letters.\n\n    >>> simplify('aabbcc')\n    3\n    >>> simplify('aabbccc')\n    3\n    >>> simplify('aabbcccc')\n    3\n    >>> simplify('aabbccccc')\n    4\n    >>> simplify('aabbcccccc')\n    4\n    >>> simplify('aabbccccccc')\n    5\n    >>> simplify('aabbcccccccc')\n    5\n    >>> simplify('aabbccccccccc')\n    6\n    >>> simplify('aabbcccccccccc')\n    6\n    >>> simplify('aabbccccccccccc')\n    7\n    >>> simplify('aabbcccccccccccc')\n    7\n    >>> simplify('aabbccccccccccccc')\n    8\n    >>> simplify('aabbcccccccccccccc')\n    8\n    >>> simplify('aabbccccccccccccccc')\n    9\n    >>> simplify('aabbcccccccccccccccc')\n    9\n    >>> simplify('aabbccccccccccccccccc')\n    10\n    >>> simplify('aabbcccccccccccccccccc')\n    10\n    >>> simplify('aabbccccccccccccccccccc')\n    11\n    >>> simplify('aabbcccccccccccccccccccc')\n    11\n    >>> simplify('aabbccccccccccccccccccccc')\n    12\n    >>> simplify('aabbcccccccccccccccccccccc')\n    12\n    >>> simplify('aabbccccccccccccccccccccccc')\n    13\n    >>> simplify('aabbcccccccccccccccccccccccc')\n    13\n    >>> simplify('aabbccccccccccccccccccccccccc')\n    14\n    >>> simplify('aabbcccccccccccccccccccccccccc')\n    14\n    >>> simplify('aabbccccccccccccccccccccccccccc')\n    15\n    >>> simplify('aabbcccccccccccccccccccccccccccc')\n    15\n    >>> simplify('aabbccccccccccccccccccccccccccccc')\n    16\n    >>> simplify('aabbcccccccccccccccccccccccccccccc')\n    16\n    >>> simplify('aabbccccccccccccccccccccccccccccccc')\n    17\n    >>> simplify('aabbcccccccccccccccccccccccccccccccc')\n    17\n    >>> simplify('aabbccccccccccccccccccccccccccccccccc')\n    18\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccc')\n    18\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccc')\n    19\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccc')\n    19\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccc')\n    20\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccc')\n    20\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccc')\n    21\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccc')\n    21\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccc')\n    22\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccc')\n    22\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccc')\n    23\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccc')\n    23\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccc')\n    24\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccc')\n    24\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccc')\n    25\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccc')\n    25\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccccc')\n    26\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccccc')\n    26\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    27\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    27\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    28\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    28\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    29\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    29\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    30\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    30\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    31\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    31\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    32\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    32\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    33\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    33\n    \"\"\"\n    return len(set(s))\n\ndef erase(s):\n    \"\"\"Find minimum number of letters to erase to simplify a string.\n\n    >>> erase('aabbcc')\n    0\n    >>> erase('aabbccc')\n    0\n        return 0\n    if simplify(string) < 3:\n        return 0\n    for i in range(len(string)):\n        if simplify(string[:i] + string[i + 1:]) < 3:\n            return 1\n    return 2\n\nprint(erase(input()))\n"
    }
  ],
  "created": 1649729362,
  "object": "edit"
}
2022-04-11 22:10:02.646366 fix spelling mistakes 2 ['\n\ndef simplify(string):\n    """Simplify a string of lowercase letters"""\n    return len(set(string))\n\ndef erase(string):\n    """Find minimum number of letters to erase to simplify a string"""\n    if len(string) < 3:\n        return 0\n    if simplify(string) < 3:\n        return 0\n    for i in range(len(string)):\n        if simplify(string[:i] + string[i + 1:]) < 3:\n            return 1\n    return 2\n\nprint(erase(input()))\n', '\n\ndef simplify(s):\n    """Simplify a string of lowercase letters.\n\n    >>> simplify(\'aabbcc\')\n    3\n    >>> simplify(\'aabbccc\')\n    3\n    >>> simplify(\'aabbcccc\')\n    3\n    >>> simplify(\'aabbccccc\')\n    4\n    >>> simplify(\'aabbcccccc\')\n    4\n    >>> simplify(\'aabbccccccc\')\n    5\n    >>> simplify(\'aabbcccccccc\')\n    5\n    >>> simplify(\'aabbccccccccc\')\n    6\n    >>> simplify(\'aabbcccccccccc\')\n    6\n    >>> simplify(\'aabbccccccccccc\')\n    7\n    >>> simplify(\'aabbcccccccccccc\')\n    7\n    >>> simplify(\'aabbccccccccccccc\')\n    8\n    >>> simplify(\'aabbcccccccccccccc\')\n    8\n    >>> simplify(\'aabbccccccccccccccc\')\n    9\n    >>> simplify(\'aabbcccccccccccccccc\')\n    9\n    >>> simplify(\'aabbccccccccccccccccc\')\n    10\n    >>> simplify(\'aabbcccccccccccccccccc\')\n    10\n    >>> simplify(\'aabbccccccccccccccccccc\')\n    11\n    >>> simplify(\'aabbcccccccccccccccccccc\')\n    11\n    >>> simplify(\'aabbccccccccccccccccccccc\')\n    12\n    >>> simplify(\'aabbcccccccccccccccccccccc\')\n    12\n    >>> simplify(\'aabbccccccccccccccccccccccc\')\n    13\n    >>> simplify(\'aabbcccccccccccccccccccccccc\')\n    13\n    >>> simplify(\'aabbccccccccccccccccccccccccc\')\n    14\n    >>> simplify(\'aabbcccccccccccccccccccccccccc\')\n    14\n    >>> simplify(\'aabbccccccccccccccccccccccccccc\')\n    15\n    >>> simplify(\'aabbcccccccccccccccccccccccccccc\')\n    15\n    >>> simplify(\'aabbccccccccccccccccccccccccccccc\')\n    16\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccc\')\n    16\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccc\')\n    17\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccc\')\n    17\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccc\')\n    18\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccc\')\n    18\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccc\')\n    19\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccc\')\n    19\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccccc\')\n    20\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccccc\')\n    20\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccccccc\')\n    21\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccccccc\')\n    21\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccccccccc\')\n    22\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccccccccc\')\n    22\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccccccccccc\')\n    23\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccccccccccc\')\n    23\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccccccccccccc\')\n    24\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccccccccccccc\')\n    24\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccccccccccccccc\')\n    25\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccccccccccccccc\')\n    25\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    26\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    26\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    27\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    27\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    28\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    28\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    29\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    29\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    30\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    30\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    31\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    31\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    32\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    32\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    33\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    33\n    """\n    return len(set(s))\n\ndef erase(s):\n    """Find minimum number of letters to erase to simplify a string.\n\n    >>> erase(\'aabbcc\')\n    0\n    >>> erase(\'aabbccc\')\n    0\n        return 0\n    if simplify(string) < 3:\n        return 0\n    for i in range(len(string)):\n        if simplify(string[:i] + string[i + 1:]) < 3:\n            return 1\n    return 2\n\nprint(erase(input()))\n']
2022-04-11 22:10:02.646494 size on output set 2
2022-04-11 22:10:02.646508 size on input set 2
2022-04-11 22:10:06.241295 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef simplify(string):\n    \"\"\"Simplify a string of lowercase letters\"\"\"\n    return len(set(string)) == 2\n\ndef erase(string):\n    \"\"\"Find minimum number of letters to erase to simplify a string\"\"\"\n    if len(string) < 3:\n        return 0\n    if simplify(string):\n        return 0\n    for i in range(len(string)):\n        if simplify(string[:i] + string[i + 1:]):\n            return 1\n    return 2\n\nprint(erase(input()))\n"
    },
    {
      "index": 1,
      "text": "\ndef simplify(string):\n    \"\"\"Simplify a string of lowercase letters\"\"\"\n    return len(set(string))\n\ndef erase(string):\n    \"\"\"Find minimum number of letters to erase to simplify a string\"\"\"\n    if len(string) < 3:\n        return 0\n    if simplify(string) < 3:\n        return 0\n    for i in range(len(string)):\n        if simplify(string[:i] + string[i + 1:]) < 3:\n            return 1\n    return 2\n\nprint(erase(input()))\n"
    }
  ],
  "created": 1649729402,
  "object": "edit"
}
2022-04-11 22:10:06.241424 fix syntax errors 2 ['\n\ndef simplify(string):\n    """Simplify a string of lowercase letters"""\n    return len(set(string)) == 2\n\ndef erase(string):\n    """Find minimum number of letters to erase to simplify a string"""\n    if len(string) < 3:\n        return 0\n    if simplify(string):\n        return 0\n    for i in range(len(string)):\n        if simplify(string[:i] + string[i + 1:]):\n            return 1\n    return 2\n\nprint(erase(input()))\n', '\ndef simplify(string):\n    """Simplify a string of lowercase letters"""\n    return len(set(string))\n\ndef erase(string):\n    """Find minimum number of letters to erase to simplify a string"""\n    if len(string) < 3:\n        return 0\n    if simplify(string) < 3:\n        return 0\n    for i in range(len(string)):\n        if simplify(string[:i] + string[i + 1:]) < 3:\n            return 1\n    return 2\n\nprint(erase(input()))\n']
2022-04-11 22:10:08.813433 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef simplify(s):\n    \"\"\"Simplify a string of lowercase letters.\n\n    >>> simplify('aabbcc')\n    3\n    >>> simplify('aabbccc')\n    3\n    >>> simplify('aabbcccc')\n    3\n    >>> simplify('aabbccccc')\n    4\n    >>> simplify('aabbcccccc')\n    4\n    >>> simplify('aabbccccccc')\n    5\n    >>> simplify('aabbcccccccc')\n    5\n    >>> simplify('aabbccccccccc')\n    6\n    >>> simplify('aabbcccccccccc')\n    6\n    >>> simplify('aabbccccccccccc')\n    7\n    >>> simplify('aabbcccccccccccc')\n    7\n    >>> simplify('aabbccccccccccccc')\n    8\n    >>> simplify('aabbcccccccccccccc')\n    8\n    >>> simplify('aabbccccccccccccccc')\n    9\n    >>> simplify('aabbcccccccccccccccc')\n    9\n    >>> simplify('aabbccccccccccccccccc')\n    10\n    >>> simplify('aabbcccccccccccccccccc')\n    10\n    >>> simplify('aabbccccccccccccccccccc')\n    11\n    >>> simplify('aabbcccccccccccccccccccc')\n    11\n    >>> simplify('aabbccccccccccccccccccccc')\n    12\n    >>> simplify('aabbcccccccccccccccccccccc')\n    12\n    >>> simplify('aabbccccccccccccccccccccccc')\n    13\n    >>> simplify('aabbcccccccccccccccccccccccc')\n    13\n    >>> simplify('aabbccccccccccccccccccccccccc')\n    14\n    >>> simplify('aabbcccccccccccccccccccccccccc')\n    14\n    >>> simplify('aabbccccccccccccccccccccccccccc')\n    15\n    >>> simplify('aabbcccccccccccccccccccccccccccc')\n    15\n    >>> simplify('aabbccccccccccccccccccccccccccccc')\n    16\n    >>> simplify('aabbcccccccccccccccccccccccccccccc')\n    16\n    >>> simplify('aabbccccccccccccccccccccccccccccccc')\n    17\n    >>> simplify('aabbcccccccccccccccccccccccccccccccc')\n    17\n    >>> simplify('aabbccccccccccccccccccccccccccccccccc')\n    18\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccc')\n    18\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccc')\n    19\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccc')\n    19\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccc')\n    20\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccc')\n    20\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccc')\n    21\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccc')\n    21\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccc')\n    22\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccc')\n    22\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccc')\n    23\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccc')\n    23\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccc')\n    24\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccc')\n    24\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccc')\n    25\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccc')\n    25\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccccc')\n    26\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccccc')\n    26\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    27\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    27\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    28\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    28\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    29\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    29\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    30\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    30\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    31\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    31\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    32\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    32\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    33\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    33\n    \"\"\"\n    return len(set(s))\n\ndef erase(s):\n    \"\"\"Find minimum number of letters to erase to simplify a string.\n\n    >>> erase('aabbcc')\n    0\n    >>> erase('aabbccc')\n    0\n    \"\"\"\n    if simplify(string) < 3:\n        return 0\n    for i in range(len(string)):\n        if simplify(string[:i] + string[i + 1:]) < 3:\n            return 1\n    return 2\n\nprint(erase(input()))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef simplify(s):\n    \"\"\"Simplify a string of lowercase letters.\n\n    >>> simplify('aabbcc')\n    3\n    >>> simplify('aabbccc')\n    3\n    >>> simplify('aabbcccc')\n    3\n    >>> simplify('aabbccccc')\n    4\n    >>> simplify('aabbcccccc')\n    4\n    >>> simplify('aabbccccccc')\n    5\n    >>> simplify('aabbcccccccc')\n    5\n    >>> simplify('aabbccccccccc')\n    6\n    >>> simplify('aabbcccccccccc')\n    6\n    >>> simplify('aabbccccccccccc')\n    7\n    >>> simplify('aabbcccccccccccc')\n    7\n    >>> simplify('aabbccccccccccccc')\n    8\n    >>> simplify('aabbcccccccccccccc')\n    8\n    >>> simplify('aabbccccccccccccccc')\n    9\n    >>> simplify('aabbcccccccccccccccc')\n    9\n    >>> simplify('aabbccccccccccccccccc')\n    10\n    >>> simplify('aabbcccccccccccccccccc')\n    10\n    >>> simplify('aabbccccccccccccccccccc')\n    11\n    >>> simplify('aabbcccccccccccccccccccc')\n    11\n    >>> simplify('aabbccccccccccccccccccccc')\n    12\n    >>> simplify('aabbcccccccccccccccccccccc')\n    12\n    >>> simplify('aabbccccccccccccccccccccccc')\n    13\n    >>> simplify('aabbcccccccccccccccccccccccc')\n    13\n    >>> simplify('aabbccccccccccccccccccccccccc')\n    14\n    >>> simplify('aabbcccccccccccccccccccccccccc')\n    14\n    >>> simplify('aabbccccccccccccccccccccccccccc')\n    15\n    >>> simplify('aabbcccccccccccccccccccccccccccc')\n    15\n    >>> simplify('aabbccccccccccccccccccccccccccccc')\n    16\n    >>> simplify('aabbcccccccccccccccccccccccccccccc')\n    16\n    >>> simplify('aabbccccccccccccccccccccccccccccccc')\n    17\n    >>> simplify('aabbcccccccccccccccccccccccccccccccc')\n    17\n    >>> simplify('aabbccccccccccccccccccccccccccccccccc')\n    18\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccc')\n    18\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccc')\n    19\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccc')\n    19\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccc')\n    20\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccc')\n    20\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccc')\n    21\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccc')\n    21\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccc')\n    22\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccc')\n    22\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccc')\n    23\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccc')\n    23\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccc')\n    24\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccc')\n    24\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccc')\n    25\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccc')\n    25\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccccc')\n    26\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccccc')\n    26\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    27\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    27\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    28\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    28\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    29\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    29\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    30\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    30\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    31\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    31\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    32\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    32\n    >>> simplify('aabbccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    33\n    >>> simplify('aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc')\n    33\n    \"\"\"\n    return len(set(s))\n\ndef erase(s):\n    \"\"\"Find minimum number of letters to erase to simplify a string.\n\n    >>> erase('aabbcc')\n    0\n    >>> erase('aabbccc')\n    0\n    \"\"\"\n        return 0\n    if simplify(string) < 3:\n        return 0\n    for i in range(len(string)):\n        if simplify(string[:i] + string[i + 1:]) < 3:\n            return 1\n    return 2\n\nprint(erase(input()))\n"
    }
  ],
  "created": 1649729406,
  "object": "edit"
}
2022-04-11 22:10:08.813731 fix syntax errors 2 ['\n\ndef simplify(s):\n    """Simplify a string of lowercase letters.\n\n    >>> simplify(\'aabbcc\')\n    3\n    >>> simplify(\'aabbccc\')\n    3\n    >>> simplify(\'aabbcccc\')\n    3\n    >>> simplify(\'aabbccccc\')\n    4\n    >>> simplify(\'aabbcccccc\')\n    4\n    >>> simplify(\'aabbccccccc\')\n    5\n    >>> simplify(\'aabbcccccccc\')\n    5\n    >>> simplify(\'aabbccccccccc\')\n    6\n    >>> simplify(\'aabbcccccccccc\')\n    6\n    >>> simplify(\'aabbccccccccccc\')\n    7\n    >>> simplify(\'aabbcccccccccccc\')\n    7\n    >>> simplify(\'aabbccccccccccccc\')\n    8\n    >>> simplify(\'aabbcccccccccccccc\')\n    8\n    >>> simplify(\'aabbccccccccccccccc\')\n    9\n    >>> simplify(\'aabbcccccccccccccccc\')\n    9\n    >>> simplify(\'aabbccccccccccccccccc\')\n    10\n    >>> simplify(\'aabbcccccccccccccccccc\')\n    10\n    >>> simplify(\'aabbccccccccccccccccccc\')\n    11\n    >>> simplify(\'aabbcccccccccccccccccccc\')\n    11\n    >>> simplify(\'aabbccccccccccccccccccccc\')\n    12\n    >>> simplify(\'aabbcccccccccccccccccccccc\')\n    12\n    >>> simplify(\'aabbccccccccccccccccccccccc\')\n    13\n    >>> simplify(\'aabbcccccccccccccccccccccccc\')\n    13\n    >>> simplify(\'aabbccccccccccccccccccccccccc\')\n    14\n    >>> simplify(\'aabbcccccccccccccccccccccccccc\')\n    14\n    >>> simplify(\'aabbccccccccccccccccccccccccccc\')\n    15\n    >>> simplify(\'aabbcccccccccccccccccccccccccccc\')\n    15\n    >>> simplify(\'aabbccccccccccccccccccccccccccccc\')\n    16\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccc\')\n    16\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccc\')\n    17\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccc\')\n    17\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccc\')\n    18\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccc\')\n    18\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccc\')\n    19\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccc\')\n    19\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccccc\')\n    20\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccccc\')\n    20\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccccccc\')\n    21\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccccccc\')\n    21\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccccccccc\')\n    22\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccccccccc\')\n    22\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccccccccccc\')\n    23\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccccccccccc\')\n    23\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccccccccccccc\')\n    24\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccccccccccccc\')\n    24\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccccccccccccccc\')\n    25\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccccccccccccccc\')\n    25\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    26\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    26\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    27\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    27\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    28\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    28\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    29\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    29\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    30\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    30\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    31\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    31\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    32\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    32\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    33\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    33\n    """\n    return len(set(s))\n\ndef erase(s):\n    """Find minimum number of letters to erase to simplify a string.\n\n    >>> erase(\'aabbcc\')\n    0\n    >>> erase(\'aabbccc\')\n    0\n    """\n    if simplify(string) < 3:\n        return 0\n    for i in range(len(string)):\n        if simplify(string[:i] + string[i + 1:]) < 3:\n            return 1\n    return 2\n\nprint(erase(input()))\n', '\n\ndef simplify(s):\n    """Simplify a string of lowercase letters.\n\n    >>> simplify(\'aabbcc\')\n    3\n    >>> simplify(\'aabbccc\')\n    3\n    >>> simplify(\'aabbcccc\')\n    3\n    >>> simplify(\'aabbccccc\')\n    4\n    >>> simplify(\'aabbcccccc\')\n    4\n    >>> simplify(\'aabbccccccc\')\n    5\n    >>> simplify(\'aabbcccccccc\')\n    5\n    >>> simplify(\'aabbccccccccc\')\n    6\n    >>> simplify(\'aabbcccccccccc\')\n    6\n    >>> simplify(\'aabbccccccccccc\')\n    7\n    >>> simplify(\'aabbcccccccccccc\')\n    7\n    >>> simplify(\'aabbccccccccccccc\')\n    8\n    >>> simplify(\'aabbcccccccccccccc\')\n    8\n    >>> simplify(\'aabbccccccccccccccc\')\n    9\n    >>> simplify(\'aabbcccccccccccccccc\')\n    9\n    >>> simplify(\'aabbccccccccccccccccc\')\n    10\n    >>> simplify(\'aabbcccccccccccccccccc\')\n    10\n    >>> simplify(\'aabbccccccccccccccccccc\')\n    11\n    >>> simplify(\'aabbcccccccccccccccccccc\')\n    11\n    >>> simplify(\'aabbccccccccccccccccccccc\')\n    12\n    >>> simplify(\'aabbcccccccccccccccccccccc\')\n    12\n    >>> simplify(\'aabbccccccccccccccccccccccc\')\n    13\n    >>> simplify(\'aabbcccccccccccccccccccccccc\')\n    13\n    >>> simplify(\'aabbccccccccccccccccccccccccc\')\n    14\n    >>> simplify(\'aabbcccccccccccccccccccccccccc\')\n    14\n    >>> simplify(\'aabbccccccccccccccccccccccccccc\')\n    15\n    >>> simplify(\'aabbcccccccccccccccccccccccccccc\')\n    15\n    >>> simplify(\'aabbccccccccccccccccccccccccccccc\')\n    16\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccc\')\n    16\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccc\')\n    17\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccc\')\n    17\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccc\')\n    18\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccc\')\n    18\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccc\')\n    19\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccc\')\n    19\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccccc\')\n    20\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccccc\')\n    20\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccccccc\')\n    21\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccccccc\')\n    21\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccccccccc\')\n    22\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccccccccc\')\n    22\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccccccccccc\')\n    23\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccccccccccc\')\n    23\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccccccccccccc\')\n    24\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccccccccccccc\')\n    24\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccccccccccccccc\')\n    25\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccccccccccccccc\')\n    25\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    26\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    26\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    27\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    27\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    28\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    28\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    29\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    29\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    30\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    30\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    31\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    31\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    32\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    32\n    >>> simplify(\'aabbccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    33\n    >>> simplify(\'aabbcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\')\n    33\n    """\n    return len(set(s))\n\ndef erase(s):\n    """Find minimum number of letters to erase to simplify a string.\n\n    >>> erase(\'aabbcc\')\n    0\n    >>> erase(\'aabbccc\')\n    0\n    """\n        return 0\n    if simplify(string) < 3:\n        return 0\n    for i in range(len(string)):\n        if simplify(string[:i] + string[i + 1:]) < 3:\n            return 1\n    return 2\n\nprint(erase(input()))\n']
2022-04-11 22:10:08.813912 size on output set 4
2022-04-11 22:10:08.813930 num operations 2
2022-04-11 22:10:08.813937 size on input set 1
2022-04-11 22:10:13.924157 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    input = sys.stdin.readline().strip()\n    if len(input) < 2:\n        print(0)\n        return\n    freq = {}\n    for char in input:\n        if char not in freq:\n            freq[char] = 1\n        else:\n            freq[char] += 1\n    if len(freq) <= 2:\n        print(0)\n        return\n    else:\n        freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n        if freq[2][1] == 1:\n            print(len(input) - 2)\n            return\n        else:\n            print(len(input) - 1 - freq[1][1] - freq[2][1])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    inp = sys.stdin.readline().strip()\n    if len(inp) <= 2:\n        print(0)\n        return\n    freq = {}\n    for char in inp:\n        if char not in freq:\n            freq[char] = 1\n        else:\n            freq[char] += 1\n    if len(freq) <= 2:\n        print(0)\n        return\n    else:\n        freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n        if freq[2][1] == 1:\n            print(len(inp) - 2)\n            return\n        else:\n            print(len(inp) - 1 - freq[1][1] - freq[2][1])\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649729408,
  "object": "edit"
}
2022-04-11 22:10:13.924489 fix spelling mistakes 2 ["\n\nimport sys\n\ndef main():\n    input = sys.stdin.readline().strip()\n    if len(input) < 2:\n        print(0)\n        return\n    freq = {}\n    for char in input:\n        if char not in freq:\n            freq[char] = 1\n        else:\n            freq[char] += 1\n    if len(freq) <= 2:\n        print(0)\n        return\n    else:\n        freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n        if freq[2][1] == 1:\n            print(len(input) - 2)\n            return\n        else:\n            print(len(input) - 1 - freq[1][1] - freq[2][1])\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    inp = sys.stdin.readline().strip()\n    if len(inp) <= 2:\n        print(0)\n        return\n    freq = {}\n    for char in inp:\n        if char not in freq:\n            freq[char] = 1\n        else:\n            freq[char] += 1\n    if len(freq) <= 2:\n        print(0)\n        return\n    else:\n        freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n        if freq[2][1] == 1:\n            print(len(inp) - 2)\n            return\n        else:\n            print(len(inp) - 1 - freq[1][1] - freq[2][1])\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 22:10:13.924532 size on output set 2
2022-04-11 22:10:13.924543 size on input set 2
2022-04-11 22:10:19.552864 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    inp = sys.stdin.readline().strip()\n    if len(inp) < 2:\n        print(0)\n        return\n    freq = {}\n    for char in inp:\n        if char not in freq:\n            freq[char] = 1\n        else:\n            freq[char] += 1\n    if len(freq) <= 2:\n        print(0)\n        return\n    else:\n        freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n        if freq[2][1] == 1:\n            print(len(inp) - 2)\n            return\n        else:\n            print(len(inp) - 1 - freq[1][1] - freq[2][1])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    input_str = sys.stdin.readline().strip()\n    if len(input_str) < 2:\n        print(0)\n        return\n    freq = {}\n    for char in input_str:\n        if char not in freq:\n            freq[char] = 1\n        else:\n            freq[char] += 1\n    if len(freq) <= 2:\n        print(0)\n        return\n    else:\n        freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n        if freq[2][1] == 1:\n            print(len(input_str) - 2)\n            return\n        else:\n            print(len(input_str) - 1 - freq[1][1] - freq[2][1])\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649729414,
  "object": "edit"
}
2022-04-11 22:10:19.553063 fix syntax errors 2 ["\n\nimport sys\n\ndef main():\n    inp = sys.stdin.readline().strip()\n    if len(inp) < 2:\n        print(0)\n        return\n    freq = {}\n    for char in inp:\n        if char not in freq:\n            freq[char] = 1\n        else:\n            freq[char] += 1\n    if len(freq) <= 2:\n        print(0)\n        return\n    else:\n        freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n        if freq[2][1] == 1:\n            print(len(inp) - 2)\n            return\n        else:\n            print(len(inp) - 1 - freq[1][1] - freq[2][1])\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    input_str = sys.stdin.readline().strip()\n    if len(input_str) < 2:\n        print(0)\n        return\n    freq = {}\n    for char in input_str:\n        if char not in freq:\n            freq[char] = 1\n        else:\n            freq[char] += 1\n    if len(freq) <= 2:\n        print(0)\n        return\n    else:\n        freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n        if freq[2][1] == 1:\n            print(len(input_str) - 2)\n            return\n        else:\n            print(len(input_str) - 1 - freq[1][1] - freq[2][1])\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 22:10:28.085047 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport math\nimport sys\n\ndef main():\n    inp = sys.stdin.readline().strip().split()\n    n = int(inp[0])\n    m = int(inp[1])\n    for i in range(m):\n        inp = sys.stdin.readline().strip().split()\n        a = int(inp[0])\n        b = int(inp[1])\n        c = int(inp[2])\n        print(math.ceil(n / a) * math.ceil(n / b) * math.ceil(n / c))\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main(inp):\n    if len(inp) <= 2: return 0\n    freq = {}\n    for char in inp: freq[char] = freq.get(char, 0) + 1\n    if len(freq) <= 2: return 0\n    freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n    if freq[2][1] == 1: return len(inp) - 2\n    else: return len(inp) - 1 - freq[1][1] - freq[2][1]\n"
    }
  ],
  "created": 1649729419,
  "object": "edit"
}
2022-04-11 22:10:28.085260 fix syntax errors 2 ["\nimport math\nimport sys\n\ndef main():\n    inp = sys.stdin.readline().strip().split()\n    n = int(inp[0])\n    m = int(inp[1])\n    for i in range(m):\n        inp = sys.stdin.readline().strip().split()\n        a = int(inp[0])\n        b = int(inp[1])\n        c = int(inp[2])\n        print(math.ceil(n / a) * math.ceil(n / b) * math.ceil(n / c))\nif __name__ == '__main__':\n    main()\n", '\ndef main(inp):\n    if len(inp) <= 2: return 0\n    freq = {}\n    for char in inp: freq[char] = freq.get(char, 0) + 1\n    if len(freq) <= 2: return 0\n    freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n    if freq[2][1] == 1: return len(inp) - 2\n    else: return len(inp) - 1 - freq[1][1] - freq[2][1]\n']
2022-04-11 22:10:28.085288 size on output set 4
2022-04-11 22:10:28.085301 num operations 2
2022-04-11 22:10:28.085306 size on input set 1
2022-04-11 22:10:32.577858 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    input = sys.stdin.readline().strip()\n    if len(input) <= 2:\n        print(0)\n    else:\n        chars = set()\n        for i in range(len(input)):\n            if input[i] not in chars:\n                chars.add(input[i])\n            if len(chars) > 2:\n                print(i)\n                return\n        print(len(input))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    inp = sys.stdin.readline().strip()\n    if len(inp) <= 2:\n        print(0)\n    else:\n        chars = set()\n        for i in range(len(inp)):\n            if inp[i] not in chars:\n                chars.add(inp[i])\n            if len(chars) > 2:\n                print(i)\n                return\n        print(len(inp))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649729428,
  "object": "edit"
}
2022-04-11 22:10:32.578303 fix spelling mistakes 2 ["\nimport sys\n\ndef main():\n    input = sys.stdin.readline().strip()\n    if len(input) <= 2:\n        print(0)\n    else:\n        chars = set()\n        for i in range(len(input)):\n            if input[i] not in chars:\n                chars.add(input[i])\n            if len(chars) > 2:\n                print(i)\n                return\n        print(len(input))\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    inp = sys.stdin.readline().strip()\n    if len(inp) <= 2:\n        print(0)\n    else:\n        chars = set()\n        for i in range(len(inp)):\n            if inp[i] not in chars:\n                chars.add(inp[i])\n            if len(chars) > 2:\n                print(i)\n                return\n        print(len(inp))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 22:10:32.578333 size on output set 2
2022-04-11 22:10:32.578339 size on input set 2
2022-04-11 22:10:37.281815 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    input = sys.stdin.readline().strip()\n    if len(input) <= 2:\n        print(len(input))\n    else:\n        chars = set()\n        for i in range(len(input)-1):\n            if input[i] not in chars:\n                chars.add(input[i])\n            if len(chars) > 2:\n                print(i+1)\n                return\n        print(len(input))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    inp = sys.stdin.readline().strip()\n    if len(inp) <= 2:\n        print(0)\n    else:\n        chars = set()\n        for i in range(len(inp)):\n            if inp[i] not in chars:\n                chars.add(inp[i])\n            if len(chars) > 2:\n                print(i)\n                return\n        print(len(inp))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649729432,
  "object": "edit"
}
2022-04-11 22:10:37.282044 fix syntax errors 2 ["\nimport sys\n\ndef main():\n    input = sys.stdin.readline().strip()\n    if len(input) <= 2:\n        print(len(input))\n    else:\n        chars = set()\n        for i in range(len(input)-1):\n            if input[i] not in chars:\n                chars.add(input[i])\n            if len(chars) > 2:\n                print(i+1)\n                return\n        print(len(input))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    inp = sys.stdin.readline().strip()\n    if len(inp) <= 2:\n        print(0)\n    else:\n        chars = set()\n        for i in range(len(inp)):\n            if inp[i] not in chars:\n                chars.add(inp[i])\n            if len(chars) > 2:\n                print(i)\n                return\n        print(len(inp))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 22:10:43.584359 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    for i in range(n):\n        inp = sys.stdin.readline().strip()\n        if len(inp) <= 2:\n            print(0)\n        else:\n            chars = set()\n            for i in range(len(inp)):\n                if inp[i] not in chars:\n                    chars.add(inp[i])\n                if len(chars) > 2:\n                    print(i)\n                    break\n            else:\n                print(len(inp))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    inp = sys.stdin.readline().strip()\n    if len(inp) <= 2:\n        print(0)\n    else:\n        chars = set()\n        for i in range(len(inp)):\n            if inp[i] not in chars:\n                chars.add(inp[i])\n            if len(chars) > 2:\n                print(i)\n                return\n        print(len(inp))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649729437,
  "object": "edit"
}
2022-04-11 22:10:43.584645 fix syntax errors 2 ["\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    for i in range(n):\n        inp = sys.stdin.readline().strip()\n        if len(inp) <= 2:\n            print(0)\n        else:\n            chars = set()\n            for i in range(len(inp)):\n                if inp[i] not in chars:\n                    chars.add(inp[i])\n                if len(chars) > 2:\n                    print(i)\n                    break\n            else:\n                print(len(inp))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    inp = sys.stdin.readline().strip()\n    if len(inp) <= 2:\n        print(0)\n    else:\n        chars = set()\n        for i in range(len(inp)):\n            if inp[i] not in chars:\n                chars.add(inp[i])\n            if len(chars) > 2:\n                print(i)\n                return\n        print(len(inp))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 22:10:43.584679 size on output set 3
2022-04-11 22:10:43.584708 num operations 2
2022-04-11 22:10:43.584712 size on input set 1
2022-04-11 22:10:47.233886 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nimport re\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        line = re.sub(r'[^a-zA-Z]', '', line)\n        print(line)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if len(line) <= 2:\n            print(0)\n        elif len(set(line)) <= 2:\n            print(0)\n        else:\n            print(len(line) - 2)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649729443,
  "object": "edit"
}
2022-04-11 22:10:47.234194 fix spelling mistakes 2 ["\nimport re\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        line = re.sub(r'[^a-zA-Z]', '', line)\n        print(line)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if len(line) <= 2:\n            print(0)\n        elif len(set(line)) <= 2:\n            print(0)\n        else:\n            print(len(line) - 2)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 22:10:47.234232 size on output set 2
2022-04-11 22:10:47.234244 size on input set 2
2022-04-11 22:10:50.179771 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport re\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        line = re.sub(r'[^a-zA-Z]', '', line)\n        print(line.lower())\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport re\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        line = re.sub(r'[^a-zA-Z]', ' ', line)\n        print(line)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649729447,
  "object": "edit"
}
2022-04-11 22:10:50.180024 fix syntax errors 2 ["\nimport re\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        line = re.sub(r'[^a-zA-Z]', '', line)\n        print(line.lower())\n\nif __name__ == '__main__':\n    main()\n", "\nimport re\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        line = re.sub(r'[^a-zA-Z]', ' ', line)\n        print(line)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 22:10:52.481570 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if len(line) <= 2:\n            print(0)\n        elif len(set(line)) <= 1:\n            print(0)\n        else:\n            print(len(line) - 2)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if len(line) <= 2:\n            print(0)\n        elif len(set(line)) <= 2:\n            print(0)\n        else:\n            print(len(line) - 2)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649729450,
  "object": "edit"
}
2022-04-11 22:10:52.481748 fix syntax errors 2 ["\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if len(line) <= 2:\n            print(0)\n        elif len(set(line)) <= 1:\n            print(0)\n        else:\n            print(len(line) - 2)\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if len(line) <= 2:\n            print(0)\n        elif len(set(line)) <= 2:\n            print(0)\n        else:\n            print(len(line) - 2)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 22:10:52.481792 size on output set 4
2022-04-11 22:10:52.481810 num operations 2
2022-04-11 22:10:52.481820 size on input set 1
2022-04-11 22:10:57.961671 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef min_erase(s):\n    min_erase = len(s)\n    for i in range(len(s)):\n        s_ = s[:i] + s[i+1:]\n        min_erase = min(min_erase, len(s) - simplicity(s_))\n    return min_erase\n\ndef simplicity(s):\n    return len(set(s))\n\nprint(min_erase(input()))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef simplicity(s):\n    return len(set(s))\n\ndef min_erase_count(s):\n    min_erase_count = len(s)\n    for i in range(len(s)):\n        s_ = s[:i] + s[i+1:]\n        min_erase_count = min(min_erase_count, len(s) - simplicity(s_))\n    return min_erase_count\n\nprint(min_erase_count(input()))\n"
    }
  ],
  "created": 1649729453,
  "object": "edit"
}
2022-04-11 22:10:57.961860 fix spelling mistakes 2 ['\n\ndef min_erase(s):\n    min_erase = len(s)\n    for i in range(len(s)):\n        s_ = s[:i] + s[i+1:]\n        min_erase = min(min_erase, len(s) - simplicity(s_))\n    return min_erase\n\ndef simplicity(s):\n    return len(set(s))\n\nprint(min_erase(input()))\n', '\n\ndef simplicity(s):\n    return len(set(s))\n\ndef min_erase_count(s):\n    min_erase_count = len(s)\n    for i in range(len(s)):\n        s_ = s[:i] + s[i+1:]\n        min_erase_count = min(min_erase_count, len(s) - simplicity(s_))\n    return min_erase_count\n\nprint(min_erase_count(input()))\n']
2022-04-11 22:10:57.961890 size on output set 2
2022-04-11 22:10:57.961894 size on input set 2
2022-04-11 22:11:01.361859 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef simplicity(s):\n    return len(set(s))\n\ndef min_erase_count(s):\n    min_count = len(s)\n    for i in range(len(s)):\n        s_ = s[:i] + s[i+1:]\n        min_count = min(min_count, len(s) - simplicity(s_))\n    return min_count\n\nprint(min_erase_count(input()))\n"
    },
    {
      "index": 1,
      "text": "\ndef simplicity(s):\n    return len(set(s))\n\ndef min_erase_count(s):\n    min_erase_count = len(s)\n    for i in range(len(s)):\n        s_ = s[:i] + s[i+1:]\n        min_erase_count = min(min_erase_count, len(s) - simplicity(s_))\n    return min_erase_count\n\nprint(min_erase_count(input()))\n"
    }
  ],
  "created": 1649729458,
  "object": "edit"
}
2022-04-11 22:11:01.362023 fix syntax errors 2 ['\n\ndef simplicity(s):\n    return len(set(s))\n\ndef min_erase_count(s):\n    min_count = len(s)\n    for i in range(len(s)):\n        s_ = s[:i] + s[i+1:]\n        min_count = min(min_count, len(s) - simplicity(s_))\n    return min_count\n\nprint(min_erase_count(input()))\n', '\ndef simplicity(s):\n    return len(set(s))\n\ndef min_erase_count(s):\n    min_erase_count = len(s)\n    for i in range(len(s)):\n        s_ = s[:i] + s[i+1:]\n        min_erase_count = min(min_erase_count, len(s) - simplicity(s_))\n    return min_erase_count\n\nprint(min_erase_count(input()))\n']
2022-04-11 22:11:07.206142 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef min_erase(s):\n    min_erase = len(s)\n    for i in range(len(s)):\n        s_ = s[:i] + s[i+1:]\n        min_erase = min(min_erase, len(s) - simplicity(s_))\n    return min_erase\n\ndef simplicity(s):\n    return len(set(s))\n\nprint(min_erase(input()))\n"
    },
    {
      "index": 1,
      "text": "\ndef min_erase(s):\n    min_erase = len(s)\n    for i in range(len(s)):\n        s_ = s[:i] + s[i + 1:]\n        min_erase = min(min_erase, len(s) - simplicity(s_) - 1)\n\n    return min_erase\n\ndef simplicity(s):\n    return len(set(s))\n\nprint(min_erase(input()))\n"
    }
  ],
  "created": 1649729461,
  "object": "edit"
}
2022-04-11 22:11:07.206336 fix syntax errors 2 ['\ndef min_erase(s):\n    min_erase = len(s)\n    for i in range(len(s)):\n        s_ = s[:i] + s[i+1:]\n        min_erase = min(min_erase, len(s) - simplicity(s_))\n    return min_erase\n\ndef simplicity(s):\n    return len(set(s))\n\nprint(min_erase(input()))\n', '\ndef min_erase(s):\n    min_erase = len(s)\n    for i in range(len(s)):\n        s_ = s[:i] + s[i + 1:]\n        min_erase = min(min_erase, len(s) - simplicity(s_) - 1)\n\n    return min_erase\n\ndef simplicity(s):\n    return len(set(s))\n\nprint(min_erase(input()))\n']
2022-04-11 22:11:07.206359 size on output set 4
