["\n\ndef main():\n    # # Get inputs\n    # n, t = [int(x) for x in input().split()]\n    # times = [int(x) for x in input().split()]\n    # # Iterate through tasks and see if they can be completed\n    # total = 0\n    # for time in times:\n    #     total += time\n    #     if total > t:\n    #         print(times.index(time))\n    #         break\n    # else:\n    #     print(n)\n    print(\"Hello world\")\n\nif __name__ == '__main__':\n    main()\n", "\nn, m = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\na.reverse()\n\nans = 0\nfor i in range(m):\n    if a[i] > 0:\n        ans += a[i]\n    else:\n        break \n\nprint(ans)\n", "n, T = map(int, input().split())\ntimes = list(map(int, input().split()))\ncurr_time = 0\nnum_tasks = 0\nfor i in range(n):\n    if curr_time + times[i] <= T:\n        num_tasks += 1\n        curr_time += times[i]\n    else:\n        break\nprint(num_tasks)\n", "n, T = map(int, input().split())\ntasks = map(int, input().split())\n\ncount = 0\ntime = 0\nfor i in range(n):\n    if time + tasks[i] <= T:\n        count += 1\n        time += tasks[i]\n    else:\n        break\n\nprint(count)\n", "\n# Read input.\nN, T = map(int, input().split())\ntasks = list(map(int, input().split()))\n\n# Solve\ncompleted = 0\ntime = 0\nfor task in tasks:\n    if time + task <= T:\n        time += task\n        completed += 1\nprint(completed)\n", "\n\ndef main():\n    # Get inputs\n    n, t = [int(x) for x in input().split()]  # n = number of tasks, t = time limit\n    times = [int(x) for x in input().split()]  # times = list of task times\n    # Iterate through tasks and see if they can be completed\n    total = 0\n    for time in times:\n        total += time\n        if total > t:\n            print(times.index(time))  # print the index of the task that was not completed\n            break\n    else:\n        print(n)  # if all tasks are completed, print n\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    n, T = map(int, input().split())\n    times = map(int, input().split())\n    acc = 0\n    for i in range(n):\n        acc += times[i]\n        if acc > T:\n            print i\n            return\n    print n\n\nif __name__ == '__main__':\n    main()\n", "\n# Read input.\nn, T = map(int, input().split())\ntasks = list(map(int, input().split()))\n\n# Solve.\ncompleted = 0\ntime = 0\nfor task in tasks:\n    if time + task <= T:\n        time += task\n        completed += 1\nprint(completed)\n", "\nn, t = map(int, input().split()) # n = number of tasks, t = time limit\ntasks = list(map(int, input().split())) # list of tasks\n\ntasks_done = 0\ntime_used = 0\nfor task in tasks:\n    if time_used + task <= t:\n        time_used += task\n        tasks_done += 1\n    else:\n        break\n\nprint(tasks_done)\n", "\nimport sys\n\ndef main():\n    n, T = map(int, sys.stdin.readline().split())\n    times = list(map(int, sys.stdin.readline().split()))\n    acc = 0\n    for i in range(n):\n        acc += times[i]\n        if acc > T:\n            print i\n            return\n    print n\n\nif __name__ == '__main__':\n    main()\n", "# Read input\nn, T = map(int, input().split())  # n = number of tasks, T = time limit\ntasks = list(map(int, input().split()))  # list of tasks\n\n# Solve\ncompleted = 0  # number of completed tasks\ntime = 0  # time spent on completed tasks\nfor task in tasks:\n    if time + task <= T:\n        time += task\n        completed += 1\n\nprint(completed)\n", "\n\nn, T = map(int, input().split())\ntimes = list(map(int, input().split()))\ncurr_time = 0\nnum_tasks = 0\n\nfor i in range(n):\n    if curr_time + times[i] <= T:\n        num_tasks += 1\n        curr_time += times[i]\n    else:\n        break\n\n\nprint(num_tasks)\n", "\n# Read input.\nn, T = map(int, input().split())\ntasks = list(map(int, input().split()))\n\n# Solve problem.\ncompleted = 0\ntime = 0\nfor t in tasks:\n    if time + t <= T:\n        time += t\n        completed += 1\n    else:\n        break\n\n# Print output.\nprint(completed)\n", "n, T = map(int, input().split())\ntasks = list(map(int, input().split()))\n\ncount = 0\ntime = 0\nfor i in range(n):\n    if time + tasks[i] <= T:\n        count += 1\n        time += tasks[i]\n    else:\n        break\n\nprint(count)\n", "\nn, T = map(int, input().split())\ntasks = list(map(int, input().split()))\n\nt = 0\ni = 0\nwhile t <= T and i < n:\n    t += tasks[i]\n    i += 1\n\nprint(i)\n", "\nn, T = map(int, input().split())\ntasks = list(map(int, input().split()))\n\nt = 0\ni = 0\nwhile t < T and i < n:\n    t += tasks[i]\n    i += 1\n\nprint(i)\n", "\n\ndef main():\n    # Get input.\n    n, m = [int(x) for x in input().split()]\n    # Create a list of the numbers.\n    nums = [int(x) for x in input().split()]\n    # Create a list of the queries.\n    queries = []\n    for i in range(m):\n        queries.append([int(x) for x in input().split()])\n    # Iterate through the queries.\n    for query in queries:\n        # Get the query numbers.\n        a, b = query\n        # Get the minimum number in the range.\n        print(min(nums[a-1:b]))\n\nif __name__ == '__main__':\n    main()\n", "#\n\nn, T = map(int, input().split())\ntimes = list(map(int, input().split()))\ncurr_time = 0\nnum_tasks = 0\n\nfor i in range(n):\n    if curr_time + times[i] <= T:\n        num_tasks += 1\n        curr_time += times[i]\n    else:\n        break\n\nprint(num_tasks)\n", "# Read input\nn, T = map(int, input().split())\ntasks = list(map(int, input().split()))\n\n# Solve\ncompleted = 0\ntime = 0\nfor task in tasks:\n    if time + task <= T:\n        time += task\n        completed += 1\nprint(completed)\n", "\n\ndef main():\n    # Get input\n    n, t = [int(x) for x in raw_input().split()]\n    times = [int(x) for x in raw_input().split()]\n    # Iterate through tasks and see if they can be completed.\n    total = 0\n    for time in times:\n        total += time\n        if total > t:\n            print(times.index(time))\n            break\n    else:\n        print(n)\n\nif __name__ == '__main__':\n    main()\n", "n, t = map(int, input().split())\ntasks = list(map(int, input().split()))\n\ntasks_done = 0\ntime_used = 0\nfor task in tasks:\n    if time_used + task <= t:\n        time_used += task\n        tasks_done += 1\n    else:\n        break\n\nprint(tasks_done)\n"]