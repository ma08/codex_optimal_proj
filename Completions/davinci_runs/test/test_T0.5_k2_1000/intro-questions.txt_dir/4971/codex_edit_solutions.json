["\n\nimport sys\n\ndef main():\n    m = int(sys.stdin.readline())\n    bus_numbers = set()\n    cubes = set()\n    cube_sums = set()\n    i = 1\n    while True:\n        cube = i**3\n        cubes.add(cube)\n        new_sums = set(map(lambda x: x + cube, cube_sums))\n        for s in new_sums:\n            if s in cubes:\n                bus_numbers.add(s)\n        cube_sums = cube_sums.union(new_sums)\n        if cube > m:\n            break\n        i += 1\n    bus_numbers = list(bus_numbers)\n    bus_numbers.sort()\n    if bus_numbers[-1] <= m:\n        print(bus_numbers[-1])\n    else:\n        print(\"none\")\n        \nif __name__ == \"__main__\":\n    main()\n", "\n\n#Program:\n\nm = int(input(\"Enter a number: \"))\n\ndef generate_taxi_numbers(m):\n    taxi = []\n    for i in range(1, int(m**0.5)+1):\n        for j in range(i, int(m**0.5)+1):\n            if i != j:\n                n = i**3 + j**3\n                if n < m:\n                    taxi.append(n)\n    return taxi\n\ntaxi_numbers = generate_taxi_numbers(m)\n\nbus_numbers = []\nfor n in taxi_numbers:\n    if taxi_numbers.count(n) > 1:\n        bus_numbers.append(n)\n\nif len(bus_numbers) > 0:\n    print(max(bus_numbers))\nelse:\n    print(\"No bus numbers\")\n", "\nfrom sys import stdin, stdout\n\ndef isCube(x):\n    return round(x**(1/3))**3 == x\n\ndef busca(m):\n    max = 0\n    for i in range(1, m + 1):\n        for j in range(i, m + 1):\n            if isCube(i) and isCube(j):\n                if i + j <= m:\n                    if i + j > max:\n                        max = i + j\n    return max\n\nstdout.write(str(busca(int(stdin.readline()))))\n", "\n\nimport sys\n\ndef main():\n    m = int(sys.stdin.readline().strip()) # read the input\n    x = 1\n    while x <= m: # loop through all possible values of x\n        if len(set([a**3 + b**3 for a in range(1, x) for b in range(1, x)])) == x:\n            return x # return the first value of x that satisfies the condition\n        x += 1\n    return 'none' # return none if no value of x satisfies the condition\n\nprint(main())\n", "import sys\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    for x in range(1, m+1):\n        if len(set([a**3 + b**3 for a in range(1, x) for b in range(1, x)])) == x-1:\n            return x-1\n    return 'None'\n\nprint(main())\n", "\n\n# Programming\n\nimport sys\nimport math\n\ndef main():\n    m = int(sys.stdin.readline())\n\n    # Generate a list of all the cubes up to the limit\n    cubes = [i**3 for i in range(1, int(m ** (1/3)) + 1)]\n\n    # Generate a list of all the sums of two cubes\n    sums = [cubes[i] + cubes[j] for i in range(len(cubes)) for j in range(i, len(cubes))]\n\n    # Count the number of times each sum appears\n    sums.sort()\n    counts = []\n    count = 1\n    for i in range(1, len(sums)):\n        if sums[i] == sums[i-1]:\n            count += 1\n        else:\n            counts.append(count)\n            count = 1\n    counts.append(count)\n\n    # Find the largest sum that appears at least twice\n    for i in range(len(sums)-1, -1, -1):\n        if counts[i] > 1 and sums[i] <= m:\n            print(sums[i])\n            break\n    else:\n        print(\"none\")\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    x = 1\n    while x <= m:\n        if len(set([a**3 + b**3 for a in range(1, x) for b in range(1, x+1)])) == x:\n            return x\n        x += 1\n    return 'none'\n\nprint(main())\n", "\n\n#Program\n\nimport sys\nimport math\n\ndef main():\n    m = int(sys.stdin.readline())\n\n    # Generate a list of all the cubes up to the limit\n    cubes = [i**3 for i in range(1, int(m ** (1/3)) + 1)]\n\n    # Generate a list of all the sums of two cubes\n    sums = [cubes[i] + cubes[j] for i in range(len(cubes)) for j in range(i, len(cubes))]\n\n    # Count the number of times each sum appears\n    sums.sort()\n    counts = []\n    count = 1\n    for i in range(1, len(sums)):\n        if sums[i] == sums[i-1]:\n            count += 1\n        else:\n            counts.append(count)\n            count = 1\n    counts.append(count)\n\n    # Find the largest sum that appears at least twice\n    for i in range(len(sums)-1, -1, -1):\n        if counts[i] > 1 and sums[i] <= m:\n            print(sums[i])\n            break\n    else:\n        print(\"none\")\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    bus_numbers = []\n    cubes = set()\n    cube_sums = set()\n    i = 1\n    while True:\n        cube = i**3\n        cubes.add(cube)\n        new_sums = set(map(lambda x: x + cube, cube_sums))\n        for s in new_sums:\n            if s in cubes:\n                bus_numbers.append(s)\n        cube_sums = cube_sums.union(new_sums)\n        if cube > m:\n            break\n        i += 1\n    bus_numbers.sort()\n    if len(bus_numbers) > 0 and bus_numbers[-1] <= m:\n        print(bus_numbers[-1])\n    else:\n        print(\"none\")\n        \nif __name__ == \"__main__\":\n    main()\n", "\n\n# Programming\n\nimport sys\nimport math\n\ndef main():\n    m = int(input())\n\n    # Generate a list of all the cubes up to the limit\n    cubes = [i**3 for i in range(1, int(m ** (1/3)) + 1)]\n\n    # Generate a list of all the sums of two cubes\n    sums = [cubes[i] + cubes[j] for i in range(len(cubes)) for j in range(i, len(cubes))]\n\n    # Count the number of times each sum appears\n    sums.sort()\n    counts = []\n    count = 1\n    for i in range(1, len(sums)):\n        if sums[i] == sums[i - 1]:\n            count += 1\n        else:\n            counts.append(count)\n            count = 1\n    counts.append(count)\n\n    # Find the largest sum that appears at least twice\n    for i in range(len(sums) - 1, -1, -1):\n        if counts[i] > 1 and sums[i] <= m:\n            print(sums[i])\n            break\n    else:\n\n        print(\"none\")\n\nmain()\n", "\n\nfrom collections import defaultdict\n\ndef main():\n    \"\"\"\n    This solution is based on the fact that the taxicab numbers are known to be\n    of the form a^3 + b^3 = c^3 + d^3, where a != c and b != d. This can be\n    proved using the fact that a^3 + b^3 = c^3 + d^3 is equivalent to\n    (a - c)(a^2 + ac + c^2) = (b - d)(b^2 + bd + d^2).\n\n    The above equation can be shown to have no solutions for a = c or b = d by\n    considering the cases where a = c = 0 or b = d = 0 or a = c = 1 or b = d =\n    1.\n\n    Since a != c and b != d, the equation can be rewritten as a^3 + b^3 = a^3 +\n    b^3 + c^3 - c^3. This can be further simplified to a^3 - c^3 = c^3 - a^3.\n    This equation has solutions for a != c and a, c >= 0.\n\n    This solution works by generating all the possible a^3 - c^3 values for a\n    != c and a, c >= 0. It then uses a dictionary to store the number of ways\n    that a number can be expressed as the sum of two positive cubes. The\n    largest taxicab number that is less than the input is then printed. \n    \"\"\"\n    m = int(raw_input())\n\n    # Generate all the possible values of a^3 - c^3\n    a3_c3 = defaultdict(int)\n    for a in range(0, int(m ** (1.0 / 3.0)) + 1):\n        for c in range(0, int(m ** (1.0 / 3.0)) + 1):\n            if a != c:\n                a3_c3[a ** 3 - c ** 3] += 1\n\n    # Find the largest taxicab number that is less than the input\n    max_taxicab_num = -1\n    for num, count in a3_c3.iteritems():\n        if count >= 2 and num <= m:\n            max_taxicab_num = max(max_taxicab_num, num)\n\n    if max_taxicab_num == -1:\n        print \"none\"\n    else:\n        print max_taxicab_num\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\nimport math\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    x = -1\n    for a in range(1,int(math.ceil(m**(1/3)))):\n        for b in range(1,int(math.ceil(m**(1/3)))):\n            if (a**3 + b**3) <= m:\n                x = max(x,a**3 + b**3)\n    if x == -1:\n        print(\"none\")\n    else:\n        print(x)\nmain()\n", "\n\nfrom collections import defaultdict\n\ndef main():\n    \"\"\"\n    This solution is based on the fact that the taxicab numbers are known to be\n    of the form a^3 + b^3 = c^3 + d^3, where a != c and b != d. This can\n    be proved using the fact that a^3 + b^3 = c^3 + d^3 is equivalent to\n    (a - c)(a^2 + ac + c^2) = (b - d)(b^2 + bd + d^2).\n\n    The above equation can be shown to have no solutions for $a = c$ or $b = d$ \n    by considering the cases where $a = c = 0$ or $b = d = 0$ or $a = c = 1$ or\n    $b = d = 1$.\n\n    Since $a \\ne c$ and $b \\ne d$, the equation can be rewritten as\n    $a^3 + b^3 = a^3 + b^3 + c^3 - c^3$. This can be further simplified to\n    $a^3 - c^3 = c^3 - a^3$. This equation has solutions for $a \\ne c$ and $a, c\n    \\ge 0$.\n\n    This solution works by generating all the possible $a^3 - c^3$ values for \n    $a \\ne c$ and $a, c \\ge 0$. It then uses a dictionary to store the number \n    of ways that a number can be expressed as the sum of two positive cubes. \n    The largest bus number that is less than the input is then printed.\n    \"\"\"\n    m = int(raw_input())\n\n    # Generate all the possible values of a^3 - c^3\n    a3_c3 = defaultdict(int)\n    for a in range(0, int(m ** (1.0 / 3.0)) + 1):\n        for c in range(0, int(m ** (1.0 / 3.0)) + 1):\n            if a != c:\n                a3_c3[a ** 3 - c ** 3] += 1\n\n    # Find the largest taxicab number that is less than the input\n    max_bus_num = -1\n    for num, count in a3_c3.iteritems():\n        if count >= 2 and num <= m:\n            max_bus_num = max(max_bus_num, num)\n\n    if max_bus_num == -1:\n        print \"none\"\n    else:\n        print max_bus_num\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef is_cube(n):\n    return round(n**(1./3.)) ** 3 == n\n\ndef find_cubes(max_n):\n    cubes = []\n    for i in range(1, max_n+1):\n        if is_cube(i):\n            cubes.append(i)\n    return cubes\n\ndef find_bus_numbers(m): \n    cubes = find_cubes(m)\n    numbers = {}\n    for c1 in cubes:\n        for c2 in cubes:\n            if c1 + c2 <= m:\n                if c1 + c2 in numbers:\n                    numbers[c1 + c2] += 1\n                else:\n                    numbers[c1 + c2] = 1\n    return numbers\n\ndef find_max_bus_number(numbers):\n    max_bus_number = 0\n    for number in numbers:\n        if numbers[number] >= 2 and number > max_bus_number:\n            max_bus_number = number\n    return max_bus_number\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    numbers = find_bus_numbers(m)\n    max_bus_number = find_max_bus_number(numbers)\n    if max_bus_number == 0:\n        print(\"none\")\n    else:\n        print(max_bus_number)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    m = int(sys.stdin.readline())\n    bus_numbers = set([])\n    cubes = set()\n    cube_sums = set([])\n    i = 1\n    while True:\n        cube = i**3\n        cubes.add(cube)\n        new_sums = set(map(lambda x: x + cube, cube_sums))\n        for s in new_sums:\n            if s in cubes:\n                bus_numbers.add(s)\n        cube_sums = cube_sums.union(new_sums)\n        if cube > m:\n            break\n        i += 1\n    bus_numbers = list(bus_numbers)\n    bus_numbers.sort()\n    if bus_numbers[-1] <= m:\n        print(bus_numbers[-1])\n    else:\n        print(\"none\")\n        \nif __name__ == \"__main__\":\n    main()\n", "\n\nfrom collections import defaultdict\n\ndef main():\n    \"\"\"\n    This solution is based on the fact that the taxicab numbers are known to be\n    of the form a^3 + b^3 = c^3 + d^3, where a != c and b != d. This can be\n    proved using the fact that a^3 + b^3 = c^3 + d^3 is equivalent to\n    (a - c)(a^2 + ac + c^2) = (b - d)(b^2 + bd + d^2).\n\n    The above equation can be shown to have no solutions for a = c or b = d by\n    considering the cases where a = c = 0 or b = d = 0 or a = c = 1 or b = d = 1.\n\n    Since a != c and b != d, the equation can be rewritten as\n    a^3 + b^3 = a^3 + b^3 + c^3 - c^3. This can be further simplified to\n    a^3 - c^3 = c^3 - a^3. This equation has solutions for a != c and a, c >= 0.\n\n    This solution works by generating all the possible a^3 - c^3 values for a\n    != c and a, c >= 0. It then uses a dictionary to store the number of ways\n    that a number can be expressed as the sum of two positive cubes. The largest\n    taxicab number that is less than the input is then printed.\n    \"\"\"\n    m = int(raw_input())\n\n    # Generate all the possible values of a^3 - c^3\n    a3_c3 = defaultdict(int)\n    for a in range(0, int(m ** (1.0 / 3.0)) + 1):\n        for c in range(0, int(m ** (1.0 / 3.0)) + 1):\n            if a != c:\n                a3_c3[a ** 3 - c ** 3] += 1\n\n    # Find the largest taxicab number that is less than the input\n    max_taxicab_num = -1\n    for num, count in a3_c3.iteritems():\n        if count >= 2 and num <= m:\n            max_taxicab_num = max(max_taxicab_num, num)\n\n    if max_taxicab_num == -1:\n        print \"none\"\n    else:\n        print max_taxicab_num\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    m = int(sys.stdin.readline())\n    bus_numbers = []\n    cubes = set()\n    cube_sums = set()\n    i = 1\n    while True:\n        cube = i**3\n        cubes.add(cube)\n        new_sums = set(map(lambda x: x + cube, cube_sums))\n        for s in new_sums:\n            if s in cubes:\n                bus_numbers.append(s)\n        cube_sums = cube_sums.union(new_sums)\n        if cube > m:\n            break\n        i += 1\n    bus_numbers.sort()\n    if bus_numbers[-1] <= m:\n        print(bus_numbers[-1])\n    else:\n        print(\"none\")\n        \nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef is_cube(n):\n    return round(n**(1./3.)) ** 3 == n\n\ndef find_cubes(max_n):\n    cubes = []\n    for i in range(1, max_n+1):\n        if is_cube(i):\n            cubes.append(i)\n    return cubes\n\ndef find_bus_numbers(m):\n    cubes = find_cubes(m)\n    numbers = {}\n    for c1 in cubes:\n        for c2 in cubes:\n            if c1 + c2 <= m:\n                if c1 + c2 in numbers:\n                    numbers[c1 + c2] += 1\n                else:\n                    numbers[c1 + c2] = 1\n    return numbers\n\ndef find_max_bus_number(numbers):\n    max_bus_number = 0\n    for number in numbers:\n        if numbers[number] >= 2 and number > max_bus_number:\n            max_bus_number = number\n    return max_bus_number\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    numbers = find_bus_numbers(m)\n    max_bus_number = find_max_bus_number(numbers)\n    if max_bus_number == 0:\n        print(\"none\")\n    else:\n        print(max_bus_number)\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef is_cube(n):\n\treturn round(n**(1.0/3.0)) ** 3 == n\n\ndef find_cubes(max_n):\n\tcubes = []\n\tfor i in range(1, max_n+1):\n\t\tif is_cube(i):\n\t\t\tcubes.append(i)\n\treturn cubes\n\ndef find_bus_numbers(m):\n\tcubes = find_cubes(m)\n\tnumbers = {}\n\tfor c1 in cubes:\n\t\tfor c2 in cubes:\n\t\t\tif c1 + c2 <= m:\n\t\t\t\tif c1 + c2 in numbers:\n\t\t\t\t\tnumbers[c1 + c2] += 1\n\t\t\t\telse:\n\t\t\t\t\tnumbers[c1 + c2] = 1\n\treturn numbers\n\ndef find_max_bus_number(numbers):\n\tmax_bus_number = 0\n\tfor number in numbers:\n\t\tif numbers[number] >= 2 and number > max_bus_number:\n\t\t\tmax_bus_number = number\n\treturn max_bus_number\n\ndef main():\n\tm = int(sys.stdin.readline().strip())\n\tnumbers = find_bus_numbers(m)\n\tmax_bus_number = find_max_bus_number(numbers)\n\tif max_bus_number == 0:\n\t\tprint(\"none\")\n\telse:\n\t\tprint(max_bus_number)\n\nif __name__ == \"__main__\":\n\tmain()\n", "\nimport sys\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    x = 1\n    while x <= m:\n        if len(set([a**3 + b**3 for a in range(1, x) for b in range(1, x)])) >= x:\n            return x\n        x += 1\n    return 'none'\n\nprint(main())\n", "\n\n# Program: Taxi and Bus Numbers\n\nm = int(input())\n\ndef generate_taxi_numbers(m):\n    taxi = []\n    for i in range(1, int(m**0.5)+1):\n        for j in range(i, int(m**0.5)+1):\n            if i != j:\n                n = i**3 + j**3\n                if n < m:\n                    taxi.append(n)\n    return taxi\n\ntaxi_numbers = generate_taxi_numbers(m)\n\nbus_numbers = []\nfor n in taxi_numbers:\n    if taxi_numbers.count(n) > 1:\n        bus_numbers.append(n)\n\nif len(bus_numbers) > 0:\n    print(max(bus_numbers))\nelse:\n    print(\"none\")\n", "#!/usr/bin/python3\n\nimport sys\nimport math\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    x = -1\n    for a in range(1,math.ceil(m**(1/3))):\n        for b in range(1,math.ceil(m**(1/3))):\n            if (a**3 + b**3) <= m:\n                x = max(x,a**3 + b**3)\n    if x == -1:\n        print(\"none\")\n    else:\n        print(x)\nmain()\n", "#\n\nimport sys\nimport math\n\ndef main():\n    m = int(sys.stdin.readline().strip())\n    x = -1\n    for a in range(1,int(math.ceil(m**(1/3)))):\n        for b in range(1,int(math.ceil(m**(1/3)))):\n            if (a**3 + b**3) <= m:\n                x = max(x,a**3 + b**3)\n    if x == -1:\n        print(\"none\")\n    else:\n        print(x)\nmain()\n", "\n\n#Program:\n\ndef generate_taxi_numbers(m):\n    taxi = set()\n    for i in range(1, int(m**0.5)+1):\n        for j in range(i, int(m**0.5)+1):\n            n = i**3 + j**3\n            if n < m:\n                taxi.add(n)\n    return taxi\n\n\ndef generate_bus_numbers(taxi_numbers):\n    bus_numbers = set()\n    for n in taxi_numbers:\n        if taxi_numbers.count(n) > 1:\n            bus_numbers.add(n)\n    return bus_numbers\n\n\ndef main():\n    m = int(input())\n    taxi_numbers = generate_taxi_numbers(m)\n    bus_numbers = generate_bus_numbers(taxi_numbers)\n    if len(bus_numbers) > 0:\n        print(max(bus_numbers))\n    else:\n        print(\"none\")\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nfrom sys import stdin, stdout\n\ndef isCube(x):\n    return round(x**(1/3))**3 == x\n\ndef busca(m):\n    maximo = 0\n    for i in range(1, m + 1):\n        for j in range(i, m + 1):\n            if isCube(i) and isCube(j):\n                if i + j <= m:\n                    if i + j > maximo:\n                        maximo = i + j\n    return maximo\n\nstdout.write(str(busca(int(stdin.readline()))))\n"]