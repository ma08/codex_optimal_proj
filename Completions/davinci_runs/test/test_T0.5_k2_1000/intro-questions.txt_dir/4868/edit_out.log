2022-04-12 01:57:28.495273 num operations 2
2022-04-12 01:57:28.495312 size on input set 1
2022-04-12 01:57:34.922496 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n#\nboard = [['.'] * 8 for i in range(8)]\n\nfor i in range(2):\n    color = input().split(':')[0].strip()\n    pieces = input().split(':')[1].strip().split(',')\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n        elif piece[0] == 'a':\n            board[int(piece[1]) - 1][0] = 'P'\n        elif piece[0] == 'b':\n            board[int(piece[1]) - 1][1] = 'P'\n        elif piece[0] == 'c':\n            board[int(piece[1]) - 1][2] = 'P'\n        elif piece[0] == 'd':\n            board[int(piece[1]) - 1][3] = 'P'\n        elif piece[0] == 'e':\n            board[int(piece[1]) - 1][4] = 'P'\n        elif piece[0] == 'f':\n            board[int(piece[1]) - 1][5] = 'P'\n        elif piece[0] == 'g':\n            board[int(piece[1]) - 1][6] = 'P'\n        elif piece[0] == 'h':\n            board[int(piece[1]) - 1][7] = 'P'\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('|' + ':'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n"
    },
    {
      "index": 1,
      "text": "\n\nboard = [['.'] * 8 for i in range(8)]\n\nfor i in range(2):\n    color = input().split(':')[0].strip()\n    pieces = input().split(':')[1].strip().split(',')\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n        elif piece[0] == 'A':\n            board[int(piece[1]) - 1][0] = 'P'\n        elif piece[0] == 'B':\n            board[int(piece[1]) - 1][1] = 'P'\n        elif piece[0] == 'C':\n            board[int(piece[1]) - 1][2] = 'P'\n        elif piece[0] == 'D':\n            board[int(piece[1]) - 1][3] = 'P'\n        elif piece[0] == 'E':\n            board[int(piece[1]) - 1][4] = 'P'\n        elif piece[0] == 'F':\n            board[int(piece[1]) - 1][5] = 'P'\n        elif piece[0] == 'G':\n            board[int(piece[1]) - 1][6] = 'P'\n        elif piece[0] == 'H':\n            board[int(piece[1]) - 1][7] = 'P'\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('|' + ':'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n"
    }
  ],
  "created": 1649743048,
  "object": "edit"
}
2022-04-12 01:57:34.922617 fix spelling mistakes 2 ["\n#\nboard = [['.'] * 8 for i in range(8)]\n\nfor i in range(2):\n    color = input().split(':')[0].strip()\n    pieces = input().split(':')[1].strip().split(',')\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n        elif piece[0] == 'a':\n            board[int(piece[1]) - 1][0] = 'P'\n        elif piece[0] == 'b':\n            board[int(piece[1]) - 1][1] = 'P'\n        elif piece[0] == 'c':\n            board[int(piece[1]) - 1][2] = 'P'\n        elif piece[0] == 'd':\n            board[int(piece[1]) - 1][3] = 'P'\n        elif piece[0] == 'e':\n            board[int(piece[1]) - 1][4] = 'P'\n        elif piece[0] == 'f':\n            board[int(piece[1]) - 1][5] = 'P'\n        elif piece[0] == 'g':\n            board[int(piece[1]) - 1][6] = 'P'\n        elif piece[0] == 'h':\n            board[int(piece[1]) - 1][7] = 'P'\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('|' + ':'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n", "\n\nboard = [['.'] * 8 for i in range(8)]\n\nfor i in range(2):\n    color = input().split(':')[0].strip()\n    pieces = input().split(':')[1].strip().split(',')\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n        elif piece[0] == 'A':\n            board[int(piece[1]) - 1][0] = 'P'\n        elif piece[0] == 'B':\n            board[int(piece[1]) - 1][1] = 'P'\n        elif piece[0] == 'C':\n            board[int(piece[1]) - 1][2] = 'P'\n        elif piece[0] == 'D':\n            board[int(piece[1]) - 1][3] = 'P'\n        elif piece[0] == 'E':\n            board[int(piece[1]) - 1][4] = 'P'\n        elif piece[0] == 'F':\n            board[int(piece[1]) - 1][5] = 'P'\n        elif piece[0] == 'G':\n            board[int(piece[1]) - 1][6] = 'P'\n        elif piece[0] == 'H':\n            board[int(piece[1]) - 1][7] = 'P'\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('|' + ':'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n"]
2022-04-12 01:57:34.922742 size on output set 2
2022-04-12 01:57:34.922758 size on input set 2
2022-04-12 01:57:41.038713 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nboard = [['.'] * 8 for i in range(8)]\n\nfor i in range(2):\n    color = input().split(':')[0].strip()\n    pieces = input().split(':')[1].strip().split(',')\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n        elif piece[0] == 'A':\n            board[int(piece[1]) - 1][0] = 'P'\n        elif piece[0] == 'I':\n            board[int(piece[1]) - 1][1] = 'P'\n        elif piece[0] == 'J':\n            board[int(piece[1]) - 1][2] = 'P'\n        elif piece[0] == 'K':\n            board[int(piece[1]) - 1][3] = 'P'\n        elif piece[0] == 'L':\n            board[int(piece[1]) - 1][4] = 'P'\n        elif piece[0] == 'M':\n            board[int(piece[1]) - 1][5] = 'P'\n        elif piece[0] == 'N':\n            board[int(piece[1]) - 1][6] = 'P'\n        elif piece[0] == 'O':\n            board[int(piece[1]) - 1][7] = 'P'\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('|' + ':'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n"
    },
    {
      "index": 1,
      "text": "\n\nboard = [['.'] * 8 for i in range(8)]\n\nfor i in range(2):\n    color = input().split(':')[0].strip()\n    pieces = input().split(':')[1].strip().split(',')\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n        elif piece[0] == 'A':\n            board[int(piece[1]) - 1][0] = 'P'\n        elif piece[0] == 'I':\n            board[int(piece[1]) - 1][1] = 'P'\n        elif piece[0] == 'J':\n            board[int(piece[1]) - 1][2] = 'P'\n        elif piece[0] == 'K':\n            board[int(piece[1]) - 1][3] = 'P'\n        elif piece[0] == 'L':\n            board[int(piece[1]) - 1][4] = 'P'\n        elif piece[0] == 'M':\n            board[int(piece[1]) - 1][5] = 'P'\n        elif piece[0] == 'N':\n            board[int(piece[1]) - 1][6] = 'P'\n        elif piece[0] == 'O':\n            board[int(piece[1]) - 1][7] = 'P'\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('|' + ':'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n"
    }
  ],
  "created": 1649743055,
  "object": "edit"
}
2022-04-12 01:57:41.038920 fix syntax errors 2 ["\n\nboard = [['.'] * 8 for i in range(8)]\n\nfor i in range(2):\n    color = input().split(':')[0].strip()\n    pieces = input().split(':')[1].strip().split(',')\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n        elif piece[0] == 'A':\n            board[int(piece[1]) - 1][0] = 'P'\n        elif piece[0] == 'I':\n            board[int(piece[1]) - 1][1] = 'P'\n        elif piece[0] == 'J':\n            board[int(piece[1]) - 1][2] = 'P'\n        elif piece[0] == 'K':\n            board[int(piece[1]) - 1][3] = 'P'\n        elif piece[0] == 'L':\n            board[int(piece[1]) - 1][4] = 'P'\n        elif piece[0] == 'M':\n            board[int(piece[1]) - 1][5] = 'P'\n        elif piece[0] == 'N':\n            board[int(piece[1]) - 1][6] = 'P'\n        elif piece[0] == 'O':\n            board[int(piece[1]) - 1][7] = 'P'\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('|' + ':'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n", "\n\nboard = [['.'] * 8 for i in range(8)]\n\nfor i in range(2):\n    color = input().split(':')[0].strip()\n    pieces = input().split(':')[1].strip().split(',')\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n        elif piece[0] == 'A':\n            board[int(piece[1]) - 1][0] = 'P'\n        elif piece[0] == 'I':\n            board[int(piece[1]) - 1][1] = 'P'\n        elif piece[0] == 'J':\n            board[int(piece[1]) - 1][2] = 'P'\n        elif piece[0] == 'K':\n            board[int(piece[1]) - 1][3] = 'P'\n        elif piece[0] == 'L':\n            board[int(piece[1]) - 1][4] = 'P'\n        elif piece[0] == 'M':\n            board[int(piece[1]) - 1][5] = 'P'\n        elif piece[0] == 'N':\n            board[int(piece[1]) - 1][6] = 'P'\n        elif piece[0] == 'O':\n            board[int(piece[1]) - 1][7] = 'P'\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('|' + ':'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n"]
2022-04-12 01:57:43.306791 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# \nboard = [['.'] * 8 for i in range(8)]\n\nfor i in range(2):\n    color = input().split(':')[0].strip()\n    pieces = input().split(':')[1].strip().split(',')\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n        elif piece[0] == 'a':\n            board[int(piece[1]) - 1][0] = 'P'\n        elif piece[0] == 'b':\n            board[int(piece[1]) - 1][1] = 'P'\n        elif piece[0] == 'c':\n            board[int(piece[1]) - 1][2] = 'P'\n        elif piece[0] == 'd':\n            board[int(piece[1]) - 1][3] = 'P'\n        elif piece[0] == 'e':\n            board[int(piece[1]) - 1][4] = 'P'\n        elif piece[0] == 'f':\n            board[int(piece[1]) - 1][5] = 'P'\n        elif piece[0] == 'g':\n            board[int(piece[1]) - 1][6] = 'P'\n        elif piece[0] == 'h':\n            board[int(piece[1]) - 1][7] = 'P'\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('|' + ':'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n"
    },
    {
      "index": 1,
      "text": "board = [['.'] * 8 for i in range(8)]\n\nfor i in range(2):\n    color = input().split(':')[0].strip()\n    pieces = input().split(':')[1].strip().split(',')\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n        elif piece[0] == 'a':\n            board[int(piece[1]) - 1][0] = 'P'\n        elif piece[0] == 'b':\n            board[int(piece[1]) - 1][1] = 'P'\n        elif piece[0] == 'c':\n            board[int(piece[1]) - 1][2] = 'P'\n        elif piece[0] == 'd':\n            board[int(piece[1]) - 1][3] = 'P'\n        elif piece[0] == 'e':\n            board[int(piece[1]) - 1][4] = 'P'\n        elif piece[0] == 'f':\n            board[int(piece[1]) - 1][5] = 'P'\n        elif piece[0] == 'g':\n            board[int(piece[1]) - 1][6] = 'P'\n        elif piece[0] == 'h':\n            board[int(piece[1]) - 1][7] = 'P'\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('|' + ':'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n"
    }
  ],
  "created": 1649743061,
  "object": "edit"
}
2022-04-12 01:57:43.306990 fix syntax errors 2 ["\n# \nboard = [['.'] * 8 for i in range(8)]\n\nfor i in range(2):\n    color = input().split(':')[0].strip()\n    pieces = input().split(':')[1].strip().split(',')\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n        elif piece[0] == 'a':\n            board[int(piece[1]) - 1][0] = 'P'\n        elif piece[0] == 'b':\n            board[int(piece[1]) - 1][1] = 'P'\n        elif piece[0] == 'c':\n            board[int(piece[1]) - 1][2] = 'P'\n        elif piece[0] == 'd':\n            board[int(piece[1]) - 1][3] = 'P'\n        elif piece[0] == 'e':\n            board[int(piece[1]) - 1][4] = 'P'\n        elif piece[0] == 'f':\n            board[int(piece[1]) - 1][5] = 'P'\n        elif piece[0] == 'g':\n            board[int(piece[1]) - 1][6] = 'P'\n        elif piece[0] == 'h':\n            board[int(piece[1]) - 1][7] = 'P'\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('|' + ':'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n", "board = [['.'] * 8 for i in range(8)]\n\nfor i in range(2):\n    color = input().split(':')[0].strip()\n    pieces = input().split(':')[1].strip().split(',')\n    for piece in pieces:\n        if piece[0] == 'K':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'K'\n        elif piece[0] == 'Q':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'Q'\n        elif piece[0] == 'R':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'R'\n        elif piece[0] == 'B':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'B'\n        elif piece[0] == 'N':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'N'\n        elif piece[0] == 'P':\n            board[int(piece[2]) - 1][ord(piece[1]) - ord('a')] = 'P'\n        elif piece[0] == 'a':\n            board[int(piece[1]) - 1][0] = 'P'\n        elif piece[0] == 'b':\n            board[int(piece[1]) - 1][1] = 'P'\n        elif piece[0] == 'c':\n            board[int(piece[1]) - 1][2] = 'P'\n        elif piece[0] == 'd':\n            board[int(piece[1]) - 1][3] = 'P'\n        elif piece[0] == 'e':\n            board[int(piece[1]) - 1][4] = 'P'\n        elif piece[0] == 'f':\n            board[int(piece[1]) - 1][5] = 'P'\n        elif piece[0] == 'g':\n            board[int(piece[1]) - 1][6] = 'P'\n        elif piece[0] == 'h':\n            board[int(piece[1]) - 1][7] = 'P'\n\nfor i in range(8):\n    for j in range(8):\n        if board[i][j] == 'K':\n            board[i][j] = 'k'\n        elif board[i][j] == 'Q':\n            board[i][j] = 'q'\n        elif board[i][j] == 'R':\n            board[i][j] = 'r'\n        elif board[i][j] == 'B':\n            board[i][j] = 'b'\n        elif board[i][j] == 'N':\n            board[i][j] = 'n'\n        elif board[i][j] == 'P':\n            board[i][j] = 'p'\n\nprint('+---+---+---+---+---+---+---+---+')\nfor i in range(8):\n    print('|' + ':'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n"]
2022-04-12 01:57:43.307092 size on output set 3
2022-04-12 01:57:43.307112 num operations 2
2022-04-12 01:57:43.307115 size on input set 1
2022-04-12 01:57:47.925051 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    white = input().split(\": \")\n    black = input().split(\": \")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append(\"...\")\n    for i in range(1, len(white)):\n        chessboard[int(white[i][2])-1][ord(white[i][1])-97] = white[i][0].lower()\n    for i in range(1, len(black)):\n        chessboard[int(black[i][2])-1][ord(black[i][1])-97] = black[i][0].lower()\n    print(\"+---+---+---+---+---+---+---+---+\")\n    for i in range(8):\n        print(\"|\"+\"|\".join(chessboard[i])+\"|\")\n        print(\"+---+---+---+---+---+---+---+---+\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    white = input().split(\":\")\n    black = input().split(\":\")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append(\"...\")\n    for i in range(1, len(white)):\n        chessboard[int(white[i][2])-1][ord(white[i][1])-97] = white[i][0].lower()+\"w\"\n    for i in range(1, len(black)):\n        chessboard[int(black[i][2])-1][ord(black[i][1])-97] = black[i][0].lower()+\"b\"\n    print(\"+---+---+---+---+---+---+---+---+\")\n    for i in range(8):\n        print(\"|\"+\"|\".join(chessboard[i])+\"|\")\n        print(\"+---+---+---+---+---+---+---+---+\")\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649743063,
  "object": "edit"
}
2022-04-12 01:57:47.925244 fix spelling mistakes 2 ['\n\ndef main():\n    white = input().split(": ")\n    black = input().split(": ")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append("...")\n    for i in range(1, len(white)):\n        chessboard[int(white[i][2])-1][ord(white[i][1])-97] = white[i][0].lower()\n    for i in range(1, len(black)):\n        chessboard[int(black[i][2])-1][ord(black[i][1])-97] = black[i][0].lower()\n    print("+---+---+---+---+---+---+---+---+")\n    for i in range(8):\n        print("|"+"|".join(chessboard[i])+"|")\n        print("+---+---+---+---+---+---+---+---+")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    white = input().split(":")\n    black = input().split(":")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append("...")\n    for i in range(1, len(white)):\n        chessboard[int(white[i][2])-1][ord(white[i][1])-97] = white[i][0].lower()+"w"\n    for i in range(1, len(black)):\n        chessboard[int(black[i][2])-1][ord(black[i][1])-97] = black[i][0].lower()+"b"\n    print("+---+---+---+---+---+---+---+---+")\n    for i in range(8):\n        print("|"+"|".join(chessboard[i])+"|")\n        print("+---+---+---+---+---+---+---+---+")\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-12 01:57:47.925283 size on output set 2
2022-04-12 01:57:47.925293 size on input set 2
2022-04-12 01:57:56.613055 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    white = input().split(':')\n    black = input().split(':')\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append('...')\n    for i in range(1, len(white)):\n        chessboard[int(white[i][2])-1][ord(white[i][1])-97] = white[i][0].lower()+'w'\n    for i in range(1, len(black)):\n        chessboard[int(black[i][2])-1][ord(black[i][1])-97] = black[i][0].lower()+'b'\n    print('+---+---+---+---+---+---+---+---+')\n    for i in range(8):\n        print('|'+'|'.join(chessboard[i])+'|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    white = input().split(\": \")\n    black = input().split(\": \")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append(\"...\")\n    for i in range(1, len(white)):\n        chessboard[int(white[i][2])-1][ord(white[i][1])-97] = white[i][0].lower() + \"w\"\n    for i in range(1, len(black)):\n        chessboard[int(black[i][2])-1][ord(black[i][1])-97] = black[i][0].lower() + \"b\"\n    print(\"+---+---+---+---+---+---+---+---+\")\n    for i in range(8):\n        print(\"|\"+\"|\".join(chessboard[i])+\"|\")\n        print(\"+---+---+---+---+---+---+---+---+\")\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649743068,
  "object": "edit"
}
2022-04-12 01:57:56.613359 fix syntax errors 2 ["\n\ndef main():\n    white = input().split(':')\n    black = input().split(':')\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append('...')\n    for i in range(1, len(white)):\n        chessboard[int(white[i][2])-1][ord(white[i][1])-97] = white[i][0].lower()+'w'\n    for i in range(1, len(black)):\n        chessboard[int(black[i][2])-1][ord(black[i][1])-97] = black[i][0].lower()+'b'\n    print('+---+---+---+---+---+---+---+---+')\n    for i in range(8):\n        print('|'+'|'.join(chessboard[i])+'|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", '\n\ndef main():\n    white = input().split(": ")\n    black = input().split(": ")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append("...")\n    for i in range(1, len(white)):\n        chessboard[int(white[i][2])-1][ord(white[i][1])-97] = white[i][0].lower() + "w"\n    for i in range(1, len(black)):\n        chessboard[int(black[i][2])-1][ord(black[i][1])-97] = black[i][0].lower() + "b"\n    print("+---+---+---+---+---+---+---+---+")\n    for i in range(8):\n        print("|"+"|".join(chessboard[i])+"|")\n        print("+---+---+---+---+---+---+---+---+")\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-12 01:58:02.164883 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    white = input().split(\": \")\n    black = input().split(\": \")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append(\"...\")\n    for i in range(1, len(white)):  # white\n        chessboard[int(white[i][2])-1][ord(white[i][1])-97] = white[i][0]\n    for i in range(1, len(black)):  # black\n        chessboard[int(black[i][2])-1][ord(black[i][1])-97] = black[i][0].upper()\n    print(\"+---+---+---+---+---+---+---+---+\")\n    for i in range(8):\n        print(\"|\"+\"|\".join(chessboard[i])+\"|\")\n        print(\"+---+---+---+---+---+---+---+---+\")\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    white = input().split(\": \")\n    black = input().split(\": \")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append(\"...\")\n    for i in range(1, len(white)):\n        chessboard[int(white[i][2])-1][ord(white[i][1])-97] = white[i][0]\n    for i in range(1, len(black)):\n        chessboard[int(black[i][2])-1][ord(black[i][1])-97] = black[i][0]\n    print(\"+---+---+---+---+---+---+---+---+\")\n    for i in range(8):\n        print(\"|\"+\"|\".join(chessboard[i])+\"|\")\n        print(\"+---+---+---+---+---+---+---+---+\")\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649743076,
  "object": "edit"
}
2022-04-12 01:58:02.165036 fix syntax errors 2 ['\n\ndef main():\n    white = input().split(": ")\n    black = input().split(": ")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append("...")\n    for i in range(1, len(white)):  # white\n        chessboard[int(white[i][2])-1][ord(white[i][1])-97] = white[i][0]\n    for i in range(1, len(black)):  # black\n        chessboard[int(black[i][2])-1][ord(black[i][1])-97] = black[i][0].upper()\n    print("+---+---+---+---+---+---+---+---+")\n    for i in range(8):\n        print("|"+"|".join(chessboard[i])+"|")\n        print("+---+---+---+---+---+---+---+---+")\n\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    white = input().split(": ")\n    black = input().split(": ")\n    chessboard = []\n    for i in range(8):\n        chessboard.append([])\n        for j in range(8):\n            chessboard[i].append("...")\n    for i in range(1, len(white)):\n        chessboard[int(white[i][2])-1][ord(white[i][1])-97] = white[i][0]\n    for i in range(1, len(black)):\n        chessboard[int(black[i][2])-1][ord(black[i][1])-97] = black[i][0]\n    print("+---+---+---+---+---+---+---+---+")\n    for i in range(8):\n        print("|"+"|".join(chessboard[i])+"|")\n        print("+---+---+---+---+---+---+---+---+")\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-12 01:58:02.165067 size on output set 4
2022-04-12 01:58:02.165079 num operations 2
2022-04-12 01:58:02.165085 size on input set 1
2022-04-12 01:58:21.098743 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    board = [['.' for i in range(8)] for j in range(8)]\n    board[7][0] = board[7][7] = 'R'\n    board[0][0] = board[0][7] = 'r'\n    board[7][1] = board[7][6] = 'N'\n    board[0][1] = board[0][6] = 'n'\n    board[7][2] = board[7][5] = 'B'\n    board[0][2] = board[0][5] = 'b'\n    board[7][3] = 'Q'\n    board[0][3] = 'q'\n    board[7][4] = 'K'\n    board[0][4] = 'k'\n    for i in range(8):\n        board[1][i] = 'P'\n        board[6][i] = 'p'\n    \n    for line in sys.stdin:\n        for piece in line.split(',')[1:]:\n            color = piece[0]\n            piece = piece[1:]\n            piece_type = piece[0]\n            row = int(piece[1]) - 1\n            column = ord(piece[2]) - ord('a')\n            if piece_type == 'K':\n                board[row][column] = 'k' if color == 'W' else 'K'\n            elif piece_type == 'Q':\n                board[row][column] = 'q' if color == 'W' else 'Q'\n            elif piece_type == 'R':\n                board[row][column] = 'r' if color == 'W' else 'R'\n            elif piece_type == 'B':\n                board[row][column] = 'b' if color == 'W' else 'B'\n            elif piece_type == 'N':\n                board[row][column] = 'n' if color == 'W' else 'N'\n            elif piece_type == 'P':\n                board[row][column] = 'p' if color == 'W' else 'P'\n            elif piece_type == 'a':\n                board[row][0] = 'p' if color == 'W' else 'P'\n            elif piece_type == 'h':\n                board[row][7] = 'p' if color == 'W' else 'P'\n    \n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([':' + p.lower() + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    board = [['.' for i in range(8)] for j in range(8)]\n    board[7][0] = board[7][7] = 'R'\n    board[0][0] = board[0][7] = 'r'\n    board[7][1] = board[7][6] = 'N'\n    board[0][1] = board[0][6] = 'n'\n    board[7][2] = board[7][5] = 'B'\n    board[0][2] = board[0][5] = 'b'\n    board[7][3] = 'Q'\n    board[0][3] = 'q'\n    board[7][4] = 'K'\n    board[0][4] = 'k'\n    for i in range(8):\n        board[1][i] = 'P'\n        board[6][i] = 'p'\n    \n    for line in sys.stdin:\n        for piece in line.split(',')[1:]:\n            color = piece[0]\n            piece = piece[1:]\n            piece_type = piece[0]\n            row = int(piece[1]) - 1\n            column = ord(piece[2]) - ord('a')\n            if piece_type == 'K':\n                board[row][column] = 'k' if color == 'W' else 'K'\n            elif piece_type == 'Q':\n                board[row][column] = 'q' if color == 'W' else 'Q'\n            elif piece_type == 'R':\n                board[row][column] = 'r' if color == 'W' else 'R'\n            elif piece_type == 'B':\n                board[row][column] = 'b' if color == 'W' else 'B'\n            elif piece_type == 'N':\n                board[row][column] = 'n' if color == 'W' else 'N'\n            elif piece_type == 'P':\n                board[row][column] = 'p' if color == 'W' else 'P'\n            elif piece_type == 'a':\n                board[row][0] = 'p' if color == 'W' else 'P'\n            elif piece_type == 'h':\n                board[row][7] = 'p' if color == 'W' else 'P'\n    \n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([':' + p.lower() + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649743082,
  "object": "edit"
}
2022-04-12 01:58:21.099007 fix spelling mistakes 2 ["\n\nimport sys\n\ndef main():\n    board = [['.' for i in range(8)] for j in range(8)]\n    board[7][0] = board[7][7] = 'R'\n    board[0][0] = board[0][7] = 'r'\n    board[7][1] = board[7][6] = 'N'\n    board[0][1] = board[0][6] = 'n'\n    board[7][2] = board[7][5] = 'B'\n    board[0][2] = board[0][5] = 'b'\n    board[7][3] = 'Q'\n    board[0][3] = 'q'\n    board[7][4] = 'K'\n    board[0][4] = 'k'\n    for i in range(8):\n        board[1][i] = 'P'\n        board[6][i] = 'p'\n    \n    for line in sys.stdin:\n        for piece in line.split(',')[1:]:\n            color = piece[0]\n            piece = piece[1:]\n            piece_type = piece[0]\n            row = int(piece[1]) - 1\n            column = ord(piece[2]) - ord('a')\n            if piece_type == 'K':\n                board[row][column] = 'k' if color == 'W' else 'K'\n            elif piece_type == 'Q':\n                board[row][column] = 'q' if color == 'W' else 'Q'\n            elif piece_type == 'R':\n                board[row][column] = 'r' if color == 'W' else 'R'\n            elif piece_type == 'B':\n                board[row][column] = 'b' if color == 'W' else 'B'\n            elif piece_type == 'N':\n                board[row][column] = 'n' if color == 'W' else 'N'\n            elif piece_type == 'P':\n                board[row][column] = 'p' if color == 'W' else 'P'\n            elif piece_type == 'a':\n                board[row][0] = 'p' if color == 'W' else 'P'\n            elif piece_type == 'h':\n                board[row][7] = 'p' if color == 'W' else 'P'\n    \n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([':' + p.lower() + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    board = [['.' for i in range(8)] for j in range(8)]\n    board[7][0] = board[7][7] = 'R'\n    board[0][0] = board[0][7] = 'r'\n    board[7][1] = board[7][6] = 'N'\n    board[0][1] = board[0][6] = 'n'\n    board[7][2] = board[7][5] = 'B'\n    board[0][2] = board[0][5] = 'b'\n    board[7][3] = 'Q'\n    board[0][3] = 'q'\n    board[7][4] = 'K'\n    board[0][4] = 'k'\n    for i in range(8):\n        board[1][i] = 'P'\n        board[6][i] = 'p'\n    \n    for line in sys.stdin:\n        for piece in line.split(',')[1:]:\n            color = piece[0]\n            piece = piece[1:]\n            piece_type = piece[0]\n            row = int(piece[1]) - 1\n            column = ord(piece[2]) - ord('a')\n            if piece_type == 'K':\n                board[row][column] = 'k' if color == 'W' else 'K'\n            elif piece_type == 'Q':\n                board[row][column] = 'q' if color == 'W' else 'Q'\n            elif piece_type == 'R':\n                board[row][column] = 'r' if color == 'W' else 'R'\n            elif piece_type == 'B':\n                board[row][column] = 'b' if color == 'W' else 'B'\n            elif piece_type == 'N':\n                board[row][column] = 'n' if color == 'W' else 'N'\n            elif piece_type == 'P':\n                board[row][column] = 'p' if color == 'W' else 'P'\n            elif piece_type == 'a':\n                board[row][0] = 'p' if color == 'W' else 'P'\n            elif piece_type == 'h':\n                board[row][7] = 'p' if color == 'W' else 'P'\n    \n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([':' + p.lower() + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 01:58:21.099062 size on output set 1
2022-04-12 01:58:21.099069 size on input set 1
2022-04-12 01:58:23.878460 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    board = [['.' for i in range(8)] for j in range(8)]\n    board[7][0] = board[7][7] = 'R'\n    board[0][0] = board[0][7] = 'r'\n    board[7][1] = board[7][6] = 'N'\n    board[0][1] = board[0][6] = 'n'\n    board[7][2] = board[7][5] = 'B'\n    board[0][2] = board[0][5] = 'b'\n    board[7][3] = 'Q'\n    board[0][3] = 'q'\n    board[7][4] = 'K'\n    board[0][4] = 'k'\n    for i in range(8):\n        board[1][i] = 'P'\n        board[6][i] = 'p'\n\n    for line in sys.stdin:\n        for piece in line.split(',')[1:]:\n            color = piece[0]\n            piece = piece[1:]\n            piece_type = piece[0]\n            row = int(piece[1]) - 1\n            column = ord(piece[2]) - ord('a')\n            if piece_type == 'K':\n                board[row][column] = 'k' if color == 'W' else 'K'\n            elif piece_type == 'Q':\n                board[row][column] = 'q' if color == 'W' else 'Q'\n            elif piece_type == 'R':\n                board[row][column] = 'r' if color == 'W' else 'R'\n            elif piece_type == 'B':\n                board[row][column] = 'b' if color == 'W' else 'B'\n            elif piece_type == 'N':\n                board[row][column] = 'n' if color == 'W' else 'N'\n            elif piece_type == 'P':\n                board[row][column] = 'p' if color == 'W' else 'P'\n            elif piece_type == 'a':\n                board[row][0] = 'p' if color == 'W' else 'P'\n            elif piece_type == 'h':\n                board[row][7] = 'p' if color == 'W' else 'P'\n\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([':' + p.lower() + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    board = [['.' for i in range(8)] for j in range(8)]\n    board[7][0] = board[7][7] = 'R'\n    board[0][0] = board[0][7] = 'r'\n    board[7][1] = board[7][6] = 'N'\n    board[0][1] = board[0][6] = 'n'\n    board[7][2] = board[7][5] = 'B'\n    board[0][2] = board[0][5] = 'b'\n    board[7][3] = 'Q'\n    board[0][3] = 'q'\n    board[7][4] = 'K'\n    board[0][4] = 'k'\n    for i in range(8):\n        board[1][i] = 'P'\n        board[6][i] = 'p'\n    \n    for line in sys.stdin:\n        for piece in line.split(',')[1:]:\n            color = piece[0]\n            piece = piece[1:]\n            piece_type = piece[0]\n            row = int(piece[1]) - 1\n            column = ord(piece[2]) - ord('a')\n            if piece_type == 'K':\n                board[row][column] = 'k' if color == 'W' else 'K'\n            elif piece_type == 'Q':\n                board[row][column] = 'q' if color == 'W' else 'Q'\n            elif piece_type == 'R':\n                board[row][column] = 'r' if color == 'W' else 'R'\n            elif piece_type == 'B':\n                board[row][column] = 'b' if color == 'W' else 'B'\n            elif piece_type == 'N':\n                board[row][column] = 'n' if color == 'W' else 'N'\n            elif piece_type == 'P':\n                board[row][column] = 'p' if color == 'W' else 'P'\n            elif piece_type == 'a':\n                board[row][0] = 'p' if color == 'W' else 'P'\n            elif piece_type == 'h':\n                board[row][7] = 'p' if color == 'W' else 'P'\n    \n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([':' + p.lower() + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649743101,
  "object": "edit"
}
2022-04-12 01:58:23.878798 fix syntax errors 2 ["\nimport sys\n\ndef main():\n    board = [['.' for i in range(8)] for j in range(8)]\n    board[7][0] = board[7][7] = 'R'\n    board[0][0] = board[0][7] = 'r'\n    board[7][1] = board[7][6] = 'N'\n    board[0][1] = board[0][6] = 'n'\n    board[7][2] = board[7][5] = 'B'\n    board[0][2] = board[0][5] = 'b'\n    board[7][3] = 'Q'\n    board[0][3] = 'q'\n    board[7][4] = 'K'\n    board[0][4] = 'k'\n    for i in range(8):\n        board[1][i] = 'P'\n        board[6][i] = 'p'\n\n    for line in sys.stdin:\n        for piece in line.split(',')[1:]:\n            color = piece[0]\n            piece = piece[1:]\n            piece_type = piece[0]\n            row = int(piece[1]) - 1\n            column = ord(piece[2]) - ord('a')\n            if piece_type == 'K':\n                board[row][column] = 'k' if color == 'W' else 'K'\n            elif piece_type == 'Q':\n                board[row][column] = 'q' if color == 'W' else 'Q'\n            elif piece_type == 'R':\n                board[row][column] = 'r' if color == 'W' else 'R'\n            elif piece_type == 'B':\n                board[row][column] = 'b' if color == 'W' else 'B'\n            elif piece_type == 'N':\n                board[row][column] = 'n' if color == 'W' else 'N'\n            elif piece_type == 'P':\n                board[row][column] = 'p' if color == 'W' else 'P'\n            elif piece_type == 'a':\n                board[row][0] = 'p' if color == 'W' else 'P'\n            elif piece_type == 'h':\n                board[row][7] = 'p' if color == 'W' else 'P'\n\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([':' + p.lower() + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\ndef main():\n    board = [['.' for i in range(8)] for j in range(8)]\n    board[7][0] = board[7][7] = 'R'\n    board[0][0] = board[0][7] = 'r'\n    board[7][1] = board[7][6] = 'N'\n    board[0][1] = board[0][6] = 'n'\n    board[7][2] = board[7][5] = 'B'\n    board[0][2] = board[0][5] = 'b'\n    board[7][3] = 'Q'\n    board[0][3] = 'q'\n    board[7][4] = 'K'\n    board[0][4] = 'k'\n    for i in range(8):\n        board[1][i] = 'P'\n        board[6][i] = 'p'\n    \n    for line in sys.stdin:\n        for piece in line.split(',')[1:]:\n            color = piece[0]\n            piece = piece[1:]\n            piece_type = piece[0]\n            row = int(piece[1]) - 1\n            column = ord(piece[2]) - ord('a')\n            if piece_type == 'K':\n                board[row][column] = 'k' if color == 'W' else 'K'\n            elif piece_type == 'Q':\n                board[row][column] = 'q' if color == 'W' else 'Q'\n            elif piece_type == 'R':\n                board[row][column] = 'r' if color == 'W' else 'R'\n            elif piece_type == 'B':\n                board[row][column] = 'b' if color == 'W' else 'B'\n            elif piece_type == 'N':\n                board[row][column] = 'n' if color == 'W' else 'N'\n            elif piece_type == 'P':\n                board[row][column] = 'p' if color == 'W' else 'P'\n            elif piece_type == 'a':\n                board[row][0] = 'p' if color == 'W' else 'P'\n            elif piece_type == 'h':\n                board[row][7] = 'p' if color == 'W' else 'P'\n    \n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join([':' + p.lower() + ':' if p.isupper() else '.' + p + '.' for p in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 01:58:23.878867 size on output set 2
2022-04-12 01:58:23.878880 num operations 2
2022-04-12 01:58:23.878886 size on input set 1
2022-04-12 01:58:27.253811 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport math\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    for i in range(2):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 1 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i][0:8]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    for i in range(2):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 0 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i][0:8]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649743104,
  "object": "edit"
}
2022-04-12 01:58:27.254160 fix spelling mistakes 2 ["\nimport sys\nimport math\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    for i in range(2):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 1 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i][0:8]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    for i in range(2):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 0 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i][0:8]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 01:58:27.254186 size on output set 2
2022-04-12 01:58:27.254192 size on input set 2
2022-04-12 01:58:30.218362 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    for i in range(2):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 0 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('| ' + ' | '.join(board[i][0:8]) + ' |')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    for i in range(2):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 0 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649743107,
  "object": "edit"
}
2022-04-12 01:58:30.218640 fix syntax errors 2 ["\nimport sys\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    for i in range(2):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 0 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('| ' + ' | '.join(board[i][0:8]) + ' |')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    for i in range(2):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 0 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 01:58:40.169649 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport math\n\ndef main():\n    board = [['.'] * 8 for _ in range(8)]\n    for i in range(2):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 1 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i][:8]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nimport math\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    line = sys.stdin.readline().split(':')\n    for j in range(1, len(line)):\n        piece = line[j].split(',')\n        for k in range(len(piece)):\n            if piece[k] == '':\n                continue\n            if piece[k][0] != ' ':\n                piece[k] = ' ' + piece[k]\n            row = int(piece[k][2]) - 1\n            if piece[k][3].isalpha():\n                col = ord(piece[k][3]) - ord('a')\n            else:\n                col = int(piece[k][3]) - 1\n            board[row][col] = piece[k][1].lower()\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i][0:8]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649743110,
  "object": "edit"
}
2022-04-12 01:58:40.169839 fix syntax errors 2 ["\nimport sys\nimport math\n\ndef main():\n    board = [['.'] * 8 for _ in range(8)]\n    for i in range(2):\n        line = sys.stdin.readline().split(':')\n        for j in range(1, len(line)):\n            piece = line[j].split(',')\n            for k in range(len(piece)):\n                if piece[k] == '':\n                    continue\n                if piece[k][0] != ' ':\n                    piece[k] = ' ' + piece[k]\n                row = int(piece[k][2]) - 1\n                if piece[k][3].isalpha():\n                    col = ord(piece[k][3]) - ord('a')\n                else:\n                    col = int(piece[k][3]) - 1\n                board[row][col] = piece[k][1].lower() if i == 1 else piece[k][1]\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i][:8]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    board = [['.'] * 8 for i in range(8)]\n    line = sys.stdin.readline().split(':')\n    for j in range(1, len(line)):\n        piece = line[j].split(',')\n        for k in range(len(piece)):\n            if piece[k] == '':\n                continue\n            if piece[k][0] != ' ':\n                piece[k] = ' ' + piece[k]\n            row = int(piece[k][2]) - 1\n            if piece[k][3].isalpha():\n                col = ord(piece[k][3]) - ord('a')\n            else:\n                col = int(piece[k][3]) - 1\n            board[row][col] = piece[k][1].lower()\n    for i in range(8):\n        print('+---+---+---+---+---+---+---+---+')\n        print('|' + '|'.join(board[i][0:8]) + '|')\n    print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 01:58:40.169857 size on output set 4
2022-04-12 01:58:40.169864 num operations 2
2022-04-12 01:58:40.169867 size on input set 1
2022-04-12 01:58:46.478046 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom sys import stdin, stdout\n\ndef solve(white_pieces, black_pieces):\n    board = [[\".\" for i in range(8)] for j in range(8)]\n    for piece in white_pieces.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].lower()\n    for piece in black_pieces.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].upper()\n    for line in board:\n        stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n        for piece in line:\n            stdout.write(\"|\")\n            if piece == \".\":\n                stdout.write(\":::\")\n            else:\n                stdout.write(\":%s:\" % piece)\n        stdout.write(\"|\\n\")\n    stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n\ndef main():\n    white_pieces = stdin.readline().strip().split(\":\")[1].strip()\n    black_pieces = stdin.readline().strip().split(\":\")[1].strip()\n    solve(white_pieces, black_pieces)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import stdin, stdout\n\ndef solve(white, black):\n    board = [[\".\" for i in range(8)] for j in range(8)]\n    for piece in white.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].lower()\n    for piece in black.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].upper()\n    for line in board:\n        stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n        for piece in line:\n            stdout.write(\"|\")\n            if piece == \".\":\n                stdout.write(\":::\")\n            else:\n                stdout.write(\":%s:\" % piece)\n        stdout.write(\"|\\n\")\n    stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n\ndef main():\n    white = stdin.readline().strip().split(\":\")[1].strip().lower()\n    black = stdin.readline().strip().split(\":\")[1].strip().lower()\n    solve(white, black)\n\nmain()\n"
    }
  ],
  "created": 1649743120,
  "object": "edit"
}
2022-04-12 01:58:46.478268 fix spelling mistakes 2 ['\n\nfrom sys import stdin, stdout\n\ndef solve(white_pieces, black_pieces):\n    board = [["." for i in range(8)] for j in range(8)]\n    for piece in white_pieces.split(","):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].lower()\n    for piece in black_pieces.split(","):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].upper()\n    for line in board:\n        stdout.write("+---+---+---+---+---+---+---+---+\\n")\n        for piece in line:\n            stdout.write("|")\n            if piece == ".":\n                stdout.write(":::")\n            else:\n                stdout.write(":%s:" % piece)\n        stdout.write("|\\n")\n    stdout.write("+---+---+---+---+---+---+---+---+\\n")\n\ndef main():\n    white_pieces = stdin.readline().strip().split(":")[1].strip()\n    black_pieces = stdin.readline().strip().split(":")[1].strip()\n    solve(white_pieces, black_pieces)\n\nmain()\n', '\n\nfrom sys import stdin, stdout\n\ndef solve(white, black):\n    board = [["." for i in range(8)] for j in range(8)]\n    for piece in white.split(","):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].lower()\n    for piece in black.split(","):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].upper()\n    for line in board:\n        stdout.write("+---+---+---+---+---+---+---+---+\\n")\n        for piece in line:\n            stdout.write("|")\n            if piece == ".":\n                stdout.write(":::")\n            else:\n                stdout.write(":%s:" % piece)\n        stdout.write("|\\n")\n    stdout.write("+---+---+---+---+---+---+---+---+\\n")\n\ndef main():\n    white = stdin.readline().strip().split(":")[1].strip().lower()\n    black = stdin.readline().strip().split(":")[1].strip().lower()\n    solve(white, black)\n\nmain()\n']
2022-04-12 01:58:46.478297 size on output set 2
2022-04-12 01:58:46.478303 size on input set 2
2022-04-12 01:58:53.688918 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom sys import stdin, stdout\n\ndef solve(white_pieces, black_pieces):\n    board = [[\".\" for i in range(8)] for j in range(8)]\n    for piece in white_pieces.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].lower()\n    for piece in black_pieces.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].upper()\n    for line in board:\n        stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n        for piece in line:\n            stdout.write(\"|\")\n            if piece == \".\":\n                stdout.write(\":::\")\n            else:\n                stdout.write(\":%s:\" % piece)\n        stdout.write(\"|\\n\")\n    stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n\ndef main():\n    white_pieces = stdin.readline().strip().split(\":\")[1].strip()\n    black_pieces = stdin.readline().strip().split(\":\")[1].strip()\n    solve(white_pieces, black_pieces)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import stdin, stdout\n\ndef solve(white_pieces, black_pieces):\n    board = [[\".\" for i in range(8)] for j in range(8)]\n    for piece in white_pieces.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0]\n    for piece in black_pieces.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].upper() \n    for line in board:\n        stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n        for piece in line:\n            stdout.write(\"|\")\n            if piece == \".\":\n                stdout.write(\":::\")\n            else:\n                stdout.write(\":%s:\" % piece)\n        stdout.write(\"|\\n\")\n    stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n\ndef main():\n    white_pieces = stdin.readline().strip().split(\":\")[1].strip()\n    black_pieces = stdin.readline().strip().split(\":\")[1].strip()\n    solve(white_pieces, black_pieces)\n\nmain()\n"
    }
  ],
  "created": 1649743126,
  "object": "edit"
}
2022-04-12 01:58:53.689233 fix syntax errors 2 ['\nfrom sys import stdin, stdout\n\ndef solve(white_pieces, black_pieces):\n    board = [["." for i in range(8)] for j in range(8)]\n    for piece in white_pieces.split(","):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].lower()\n    for piece in black_pieces.split(","):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].upper()\n    for line in board:\n        stdout.write("+---+---+---+---+---+---+---+---+\\n")\n        for piece in line:\n            stdout.write("|")\n            if piece == ".":\n                stdout.write(":::")\n            else:\n                stdout.write(":%s:" % piece)\n        stdout.write("|\\n")\n    stdout.write("+---+---+---+---+---+---+---+---+\\n")\n\ndef main():\n    white_pieces = stdin.readline().strip().split(":")[1].strip()\n    black_pieces = stdin.readline().strip().split(":")[1].strip()\n    solve(white_pieces, black_pieces)\n\nmain()\n', '\n\nfrom sys import stdin, stdout\n\ndef solve(white_pieces, black_pieces):\n    board = [["." for i in range(8)] for j in range(8)]\n    for piece in white_pieces.split(","):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0]\n    for piece in black_pieces.split(","):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].upper() \n    for line in board:\n        stdout.write("+---+---+---+---+---+---+---+---+\\n")\n        for piece in line:\n            stdout.write("|")\n            if piece == ".":\n                stdout.write(":::")\n            else:\n                stdout.write(":%s:" % piece)\n        stdout.write("|\\n")\n    stdout.write("+---+---+---+---+---+---+---+---+\\n")\n\ndef main():\n    white_pieces = stdin.readline().strip().split(":")[1].strip()\n    black_pieces = stdin.readline().strip().split(":")[1].strip()\n    solve(white_pieces, black_pieces)\n\nmain()\n']
2022-04-12 01:59:00.218537 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python\n\nfrom sys import stdin, stdout\n\ndef solve(white, black):\n    board = [[\".\" for i in range(8)] for j in range(8)]\n    for piece in white.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].lower()\n    for piece in black.split(\",\"):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].upper()\n    for line in board:\n        stdout.write(\"+---+---+---+---+---+---+---+---+\\n|\")\n        for piece in line:\n            stdout.write(\"|\")\n            if piece == \".\":\n                stdout.write(\":::\")\n            else:\n                stdout.write(\":%s:\" % piece)\n        stdout.write(\"|\\n\")\n    stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n\ndef main():\n    white = stdin.readline().strip().split(\":\")[1].strip().lower()\n    black = stdin.readline().strip().split(\":\")[1].strip().lower()\n    solve(white, black)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nfrom sys import stdin, stdout\n\ndef solve(white, black):\n    board = [[\".\" for i in range(8)] for j in range(8)]\n    for piece in white.split(\",\"): board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].lower()\n    for piece in black.split(\",\"): board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].upper()\n    for line in board:\n        stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n        for piece in line: stdout.write(\"|\")\n        if piece == \".\": stdout.write(\":::\")\n        else: stdout.write(\":%s:\" % piece)\n        stdout.write(\"|\\n\")\n    stdout.write(\"+---+---+---+---+---+---+---+---+\\n\")\n\ndef main():\n    white = stdin.readline().strip().split(\":\")[1].strip().lower()\n    black = stdin.readline().strip().split(\":\")[1].strip().lower()\n    solve(white, black)\n\nmain()\n"
    }
  ],
  "created": 1649743133,
  "object": "edit"
}
2022-04-12 01:59:00.218652 fix syntax errors 2 ['#!/usr/bin/env python\n\nfrom sys import stdin, stdout\n\ndef solve(white, black):\n    board = [["." for i in range(8)] for j in range(8)]\n    for piece in white.split(","):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].lower()\n    for piece in black.split(","):\n        board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].upper()\n    for line in board:\n        stdout.write("+---+---+---+---+---+---+---+---+\\n|")\n        for piece in line:\n            stdout.write("|")\n            if piece == ".":\n                stdout.write(":::")\n            else:\n                stdout.write(":%s:" % piece)\n        stdout.write("|\\n")\n    stdout.write("+---+---+---+---+---+---+---+---+\\n")\n\ndef main():\n    white = stdin.readline().strip().split(":")[1].strip().lower()\n    black = stdin.readline().strip().split(":")[1].strip().lower()\n    solve(white, black)\n\nmain()\n', '\nfrom sys import stdin, stdout\n\ndef solve(white, black):\n    board = [["." for i in range(8)] for j in range(8)]\n    for piece in white.split(","): board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].lower()\n    for piece in black.split(","): board[int(piece[2]) - 1][ord(piece[1]) - 97] = piece[0].upper()\n    for line in board:\n        stdout.write("+---+---+---+---+---+---+---+---+\\n")\n        for piece in line: stdout.write("|")\n        if piece == ".": stdout.write(":::")\n        else: stdout.write(":%s:" % piece)\n        stdout.write("|\\n")\n    stdout.write("+---+---+---+---+---+---+---+---+\\n")\n\ndef main():\n    white = stdin.readline().strip().split(":")[1].strip().lower()\n    black = stdin.readline().strip().split(":")[1].strip().lower()\n    solve(white, black)\n\nmain()\n']
2022-04-12 01:59:00.218734 size on output set 4
2022-04-12 01:59:00.218756 num operations 2
2022-04-12 01:59:00.218760 size on input set 1
2022-04-12 01:59:04.810773 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef get_pos(piece):\n    \"\"\"\n    Returns the row and column of a piece.\n    \"\"\"\n    return piece[2:3], piece[3:4]\n\ndef get_piece(piece):\n    \"\"\"\n    Returns the piece type.\n    \"\"\"\n    return piece[0:1]\n\ndef get_color(piece):\n    \"\"\"\n    Returns the color of the piece.\n    \"\"\"\n    return piece[1:2]\n\ndef get_index(row, col):\n    \"\"\"\n    Returns the index of a position.\n    \"\"\"\n    return (int(row) - 1) * 8 + (ord(col) - ord('a'))\n\ndef get_pos_from_index(index):\n    \"\"\"\n    Returns the position of a piece.\n    \"\"\"\n    return str((index / 8) + 1), chr(index % 8 + ord('a'))\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    white = sys.stdin.readline().split(',')\n    black = sys.stdin.readline().split(',')\n    board = ['' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == 'b' else get_piece(piece)\n\n    print '+---+---+---+---+---+---+---+---+'\n    for i in range(8):\n        print '|' + '|'.join(board[i*8:(i+1)*8]) + '|'\n        print '+---+---+---+---+---+---+---+---+'\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef get_pos(piece):\n    \"\"\"\n    Returns the row and column of a piece.\n    \"\"\"\n    return piece[2:3], piece[3:4]\n\ndef get_piece(piece):\n    \"\"\"\n    Returns the piece type.\n    \"\"\"\n    return piece[0:1]\n\ndef get_color(piece):\n    \"\"\"\n    Returns the color of the piece.\n    \"\"\"\n    return piece[1:2]\n\ndef get_index(row, col):\n    \"\"\"\n    Returns the index of a position.\n    \"\"\"\n    return (int(row) - 1) * 8 + (ord(col) - ord('a'))\n\ndef get_pos_from_index(index):\n    \"\"\"\n    Returns the position of a piece.\n    \"\"\"\n    return str((index / 8) + 1), chr(index % 8 + ord('a'))\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    white = sys.stdin.readline().split(',')\n    black = sys.stdin.readline().split(',')\n    board = ['' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == 'b' else get_piece(piece)\n\n    print '+---+---+---+---+---+---+---+---+'\n    for i in range(8):\n        print '|' + '|'.join(board[i*8:(i+1)*8]) + '|'\n        print '+---+---+---+---+---+---+---+---+'\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649743140,
  "object": "edit"
}
2022-04-12 01:59:04.811509 fix spelling mistakes 2 ['\n\nimport sys\n\ndef get_pos(piece):\n    """\n    Returns the row and column of a piece.\n    """\n    return piece[2:3], piece[3:4]\n\ndef get_piece(piece):\n    """\n    Returns the piece type.\n    """\n    return piece[0:1]\n\ndef get_color(piece):\n    """\n    Returns the color of the piece.\n    """\n    return piece[1:2]\n\ndef get_index(row, col):\n    """\n    Returns the index of a position.\n    """\n    return (int(row) - 1) * 8 + (ord(col) - ord(\'a\'))\n\ndef get_pos_from_index(index):\n    """\n    Returns the position of a piece.\n    """\n    return str((index / 8) + 1), chr(index % 8 + ord(\'a\'))\n\ndef main():\n    """\n    Main function.\n    """\n    white = sys.stdin.readline().split(\',\')\n    black = sys.stdin.readline().split(\',\')\n    board = [\'\' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == \'b\' else get_piece(piece)\n\n    print \'+---+---+---+---+---+---+---+---+\'\n    for i in range(8):\n        print \'|\' + \'|\'.join(board[i*8:(i+1)*8]) + \'|\'\n        print \'+---+---+---+---+---+---+---+---+\'\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef get_pos(piece):\n    """\n    Returns the row and column of a piece.\n    """\n    return piece[2:3], piece[3:4]\n\ndef get_piece(piece):\n    """\n    Returns the piece type.\n    """\n    return piece[0:1]\n\ndef get_color(piece):\n    """\n    Returns the color of the piece.\n    """\n    return piece[1:2]\n\ndef get_index(row, col):\n    """\n    Returns the index of a position.\n    """\n    return (int(row) - 1) * 8 + (ord(col) - ord(\'a\'))\n\ndef get_pos_from_index(index):\n    """\n    Returns the position of a piece.\n    """\n    return str((index / 8) + 1), chr(index % 8 + ord(\'a\'))\n\ndef main():\n    """\n    Main function.\n    """\n    white = sys.stdin.readline().split(\',\')\n    black = sys.stdin.readline().split(\',\')\n    board = [\'\' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == \'b\' else get_piece(piece)\n\n    print \'+---+---+---+---+---+---+---+---+\'\n    for i in range(8):\n        print \'|\' + \'|\'.join(board[i*8:(i+1)*8]) + \'|\'\n        print \'+---+---+---+---+---+---+---+---+\'\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-12 01:59:04.811597 size on output set 1
2022-04-12 01:59:04.811607 size on input set 1
2022-04-12 01:59:08.508146 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef get_pos(piece):\n    \"\"\"\n    Returns the row and column of a piece.\n    \"\"\"\n    return piece[2], piece[3]\n\ndef get_piece(piece):\n    \"\"\"\n    Returns the piece type.\n    \"\"\"\n    return piece[0]\n\ndef get_color(piece):\n    \"\"\"\n    Returns the color of the piece.\n    \"\"\"\n    return piece[1]\n\ndef get_index(row, col):\n    \"\"\"\n    Returns the index of a position.\n    \"\"\"\n    return (int(row) - 1) * 8 + (ord(col) - ord('a'))\n\ndef get_pos_from_index(index):\n    \"\"\"\n    Returns the position of a piece.\n    \"\"\"\n    return str((index / 8) + 1), chr(index % 8 + ord('a'))\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    white = sys.stdin.readline().split(',')\n    black = sys.stdin.readline().split(',')\n    board = ['' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == 'b' else get_piece(piece)\n\n    print '+---+---+---+---+---+---+---+---+'\n    for i in range(8):\n        print '|' + '|'.join(board[i*8:(i+1)*8]) + '|'\n        print '+---+---+---+---+---+---+---+---+'\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef get_pos(piece):\n    \"\"\"\n    Returns the row and column of a piece.\n    \"\"\"\n    return piece[2:3], piece[3:4]\n\ndef get_piece(piece):\n    \"\"\"\n    Returns the piece type.\n    \"\"\"\n    return piece[0:1]\n\ndef get_color(piece):\n    \"\"\"\n    Returns the color of the piece.\n    \"\"\"\n    return piece[1:2]\n\ndef get_index(row, col):\n    \"\"\"\n    Returns the index of a position.\n    \"\"\"\n    return (int(row) - 1) * 8 + (ord(col) - ord('a'))\n\ndef get_pos_from_index(index):\n    \"\"\"\n    Returns the position of a piece.\n    \"\"\"\n    return str((index / 8) + 1), chr(index % 8 + ord('a'))\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    white = sys.stdin.readline().split(',')\n    black = sys.stdin.readline().split(',')\n    board = ['' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == 'b' else get_piece(piece)\n\n        print '+---+---+---+---+---+---+---+---+'\n    for i in range(8):\n        print '|' + '|'.join(board[i*8:(i+1)*8]) + '|'\n        print '+---+---+---+---+---+---+---+---+'\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649743145,
  "object": "edit"
}
2022-04-12 01:59:08.508415 fix syntax errors 2 ['\n\nimport sys\n\ndef get_pos(piece):\n    """\n    Returns the row and column of a piece.\n    """\n    return piece[2], piece[3]\n\ndef get_piece(piece):\n    """\n    Returns the piece type.\n    """\n    return piece[0]\n\ndef get_color(piece):\n    """\n    Returns the color of the piece.\n    """\n    return piece[1]\n\ndef get_index(row, col):\n    """\n    Returns the index of a position.\n    """\n    return (int(row) - 1) * 8 + (ord(col) - ord(\'a\'))\n\ndef get_pos_from_index(index):\n    """\n    Returns the position of a piece.\n    """\n    return str((index / 8) + 1), chr(index % 8 + ord(\'a\'))\n\ndef main():\n    """\n    Main function.\n    """\n    white = sys.stdin.readline().split(\',\')\n    black = sys.stdin.readline().split(\',\')\n    board = [\'\' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == \'b\' else get_piece(piece)\n\n    print \'+---+---+---+---+---+---+---+---+\'\n    for i in range(8):\n        print \'|\' + \'|\'.join(board[i*8:(i+1)*8]) + \'|\'\n        print \'+---+---+---+---+---+---+---+---+\'\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef get_pos(piece):\n    """\n    Returns the row and column of a piece.\n    """\n    return piece[2:3], piece[3:4]\n\ndef get_piece(piece):\n    """\n    Returns the piece type.\n    """\n    return piece[0:1]\n\ndef get_color(piece):\n    """\n    Returns the color of the piece.\n    """\n    return piece[1:2]\n\ndef get_index(row, col):\n    """\n    Returns the index of a position.\n    """\n    return (int(row) - 1) * 8 + (ord(col) - ord(\'a\'))\n\ndef get_pos_from_index(index):\n    """\n    Returns the position of a piece.\n    """\n    return str((index / 8) + 1), chr(index % 8 + ord(\'a\'))\n\ndef main():\n    """\n    Main function.\n    """\n    white = sys.stdin.readline().split(\',\')\n    black = sys.stdin.readline().split(\',\')\n    board = [\'\' for _ in range(64)]\n\n    for piece in white + black:\n        row, col = get_pos(piece)\n        index = get_index(row, col)\n        board[index] = get_piece(piece).lower() if get_color(piece) == \'b\' else get_piece(piece)\n\n        print \'+---+---+---+---+---+---+---+---+\'\n    for i in range(8):\n        print \'|\' + \'|\'.join(board[i*8:(i+1)*8]) + \'|\'\n        print \'+---+---+---+---+---+---+---+---+\'\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-12 01:59:08.508668 size on output set 2
2022-04-12 01:59:08.508696 num operations 2
2022-04-12 01:59:08.508702 size on input set 1
2022-04-12 01:59:14.088280 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    white_pieces = input().split(': ')[1].split(', ')\n    white_pieces = [piece[0].lower() + piece[1].lower() for piece in white_pieces]\n    black_pieces = input().split(': ')[1].split(', ')\n    black_pieces = [piece[0].lower() + piece[1].lower() for piece in black_pieces]\n    board = [list('........') for _ in range(8)]\n    for piece in white_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].upper()\n    for piece in black_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].lower()\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join(['.' + piece + '.' if piece != '.' else ':::' for piece in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    white_pieces = input().split(': ')[1].split(', ')\n    white_pieces = [piece[0].lower() + piece[1] for piece in white_pieces]\n    black_pieces = input().split(': ')[1].split(', ')\n    black_pieces = [piece[0].lower() + piece[1] for piece in black_pieces]\n    board = [list('........') for _ in range(8)]\n    for piece in white_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].upper()\n    for piece in black_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].lower()\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join(['.' + piece + '.' if piece != '.' else ':::' for piece in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649743148,
  "object": "edit"
}
2022-04-12 01:59:14.088383 fix spelling mistakes 2 ["\n\ndef main():\n    white_pieces = input().split(': ')[1].split(', ')\n    white_pieces = [piece[0].lower() + piece[1].lower() for piece in white_pieces]\n    black_pieces = input().split(': ')[1].split(', ')\n    black_pieces = [piece[0].lower() + piece[1].lower() for piece in black_pieces]\n    board = [list('........') for _ in range(8)]\n    for piece in white_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].upper()\n    for piece in black_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].lower()\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join(['.' + piece + '.' if piece != '.' else ':::' for piece in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    white_pieces = input().split(': ')[1].split(', ')\n    white_pieces = [piece[0].lower() + piece[1] for piece in white_pieces]\n    black_pieces = input().split(': ')[1].split(', ')\n    black_pieces = [piece[0].lower() + piece[1] for piece in black_pieces]\n    board = [list('........') for _ in range(8)]\n    for piece in white_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].upper()\n    for piece in black_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].lower()\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join(['.' + piece + '.' if piece != '.' else ':::' for piece in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 01:59:14.088401 size on output set 2
2022-04-12 01:59:14.088404 size on input set 2
2022-04-12 01:59:17.801037 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    white_pieces = input().split(':')[1].split(', ')\n    white_pieces = [piece[0].lower() + piece[1] for piece in white_pieces]\n    black_pieces = input().split(':')[1].split(', ')\n    black_pieces = [piece[0].lower() + piece[1] for piece in black_pieces]\n    board = [list('........') for _ in range(8)]\n    for piece in white_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].upper()\n    for piece in black_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].lower()\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join(['.' + piece + '.' if piece != '.' else ':::' for piece in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    white_pieces = input().split(':')[1].split(', ')\n    white_pieces = [piece[0].lower() + piece[1] for piece in white_pieces]\n    black_pieces = input().split(':')[1].split(', ')\n    black_pieces = [piece[0].lower() + piece[1] for piece in black_pieces]\n    board = [list('........') for _ in range(8)]\n    for piece in white_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].upper()\n    for piece in black_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].lower()\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join(['.' + piece + '.' if piece != '.' else ':::' for piece in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649743154,
  "object": "edit"
}
2022-04-12 01:59:17.801226 fix syntax errors 2 ["\n\ndef main():\n    white_pieces = input().split(':')[1].split(', ')\n    white_pieces = [piece[0].lower() + piece[1] for piece in white_pieces]\n    black_pieces = input().split(':')[1].split(', ')\n    black_pieces = [piece[0].lower() + piece[1] for piece in black_pieces]\n    board = [list('........') for _ in range(8)]\n    for piece in white_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].upper()\n    for piece in black_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].lower()\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join(['.' + piece + '.' if piece != '.' else ':::' for piece in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    white_pieces = input().split(':')[1].split(', ')\n    white_pieces = [piece[0].lower() + piece[1] for piece in white_pieces]\n    black_pieces = input().split(':')[1].split(', ')\n    black_pieces = [piece[0].lower() + piece[1] for piece in black_pieces]\n    board = [list('........') for _ in range(8)]\n    for piece in white_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].upper()\n    for piece in black_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].lower()\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join(['.' + piece + '.' if piece != '.' else ':::' for piece in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 01:59:27.898218 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    white_pieces = input().split(': ')[1].split(', ') # split on ': ' and then on ', '\n    white_pieces = [piece[0].lower() + piece[1].lower() for piece in white_pieces] # convert to lowercase\n    black_pieces = input().split(': ')[1].split(', ') # split on ': ' and then on ', '\n    black_pieces = [piece[0].lower() + piece[1].lower() for piece in black_pieces] # convert to lowercase\n    board = [list('........') for _ in range(8)]\n    for piece in white_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].upper()\n    for piece in black_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].lower()\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join(['.' + piece + '.' if piece != '.' else ':::' for piece in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    white_pieces = input().split(': ')[1].split(', ')\n    white_pieces = [piece[0].lower() + str(int(piece[1])) for piece in white_pieces]\n    black_pieces = input().split(': ')[1].split(', ')\n    black_pieces = [piece[0].lower() + str(int(piece[1])) for piece in black_pieces]\n    board = [list('........') for _ in range(8)]\n    for piece in white_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].upper()\n    for piece in black_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].lower()\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join(['.' + piece + '.' if piece != '.' else ':::' for piece in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649743158,
  "object": "edit"
}
2022-04-12 01:59:27.898512 fix syntax errors 2 ["\n\ndef main():\n    white_pieces = input().split(': ')[1].split(', ') # split on ': ' and then on ', '\n    white_pieces = [piece[0].lower() + piece[1].lower() for piece in white_pieces] # convert to lowercase\n    black_pieces = input().split(': ')[1].split(', ') # split on ': ' and then on ', '\n    black_pieces = [piece[0].lower() + piece[1].lower() for piece in black_pieces] # convert to lowercase\n    board = [list('........') for _ in range(8)]\n    for piece in white_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].upper()\n    for piece in black_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].lower()\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join(['.' + piece + '.' if piece != '.' else ':::' for piece in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    white_pieces = input().split(': ')[1].split(', ')\n    white_pieces = [piece[0].lower() + str(int(piece[1])) for piece in white_pieces]\n    black_pieces = input().split(': ')[1].split(', ')\n    black_pieces = [piece[0].lower() + str(int(piece[1])) for piece in black_pieces]\n    board = [list('........') for _ in range(8)]\n    for piece in white_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].upper()\n    for piece in black_pieces:\n        board[int(piece[1]) - 1][ord(piece[0]) - ord('a')] = piece[0].lower()\n    print('+---+---+---+---+---+---+---+---+')\n    for row in board:\n        print('|' + '|'.join(['.' + piece + '.' if piece != '.' else ':::' for piece in row]) + '|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 01:59:27.898928 size on output set 3
2022-04-12 01:59:27.899043 num operations 2
2022-04-12 01:59:27.899052 size on input set 1
2022-04-12 01:59:32.280835 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n#\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == \"\":\n            break\n        pieces = line.split(\":\")\n        board = [['.' for i in range(8)] for j in range(8)]\n        for i in range(1, len(pieces)):\n            for piece in pieces[i].split(\",\"):\n                if piece == \"\":\n                    continue\n                board[ord(piece[2]) - ord('1')][ord(piece[1]) - ord('a')] = piece[0].lower()\n                if piece[0].isupper():\n                    board[ord(piece[2]) - ord('1')][ord(piece[1]) - ord('a')] = piece[0].upper()\n        print('+---+---+---+---+---+---+---+---+')\n        for i in range(8):\n            print('|', end='')\n            for j in range(8):\n                print(board[i][j] + ':' if (i + j) % 2 == 0 else '.', end='')\n            print('|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == \"\":\n            break\n        pieces = line.split(\":\")\n        board = [['.' for i in range(8)] for j in range(8)]\n        for i in range(1, len(pieces)):\n            for piece in pieces[i].split(\",\"):\n                if piece == \"\":\n                    continue\n                board[ord(piece[1]) - ord('1')][ord(piece[0]) - ord('a')] = piece[2].lower()\n                if piece[0].isupper():\n                    board[ord(piece[1]) - ord('1')][ord(piece[0]) - ord('a')] = piece[2].upper()\n        print('+---+---+---+---+---+---+---+---+')\n        for i in range(8):\n            print('|', end='')\n            for j in range(8):\n                print(board[i][j] + ':' if (i + j) % 2 == 0 else '.', end='')\n            print('|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649743168,
  "object": "edit"
}
2022-04-12 01:59:32.280981 fix spelling mistakes 2 ['\n#\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == "":\n            break\n        pieces = line.split(":")\n        board = [[\'.\' for i in range(8)] for j in range(8)]\n        for i in range(1, len(pieces)):\n            for piece in pieces[i].split(","):\n                if piece == "":\n                    continue\n                board[ord(piece[2]) - ord(\'1\')][ord(piece[1]) - ord(\'a\')] = piece[0].lower()\n                if piece[0].isupper():\n                    board[ord(piece[2]) - ord(\'1\')][ord(piece[1]) - ord(\'a\')] = piece[0].upper()\n        print(\'+---+---+---+---+---+---+---+---+\')\n        for i in range(8):\n            print(\'|\', end=\'\')\n            for j in range(8):\n                print(board[i][j] + \':\' if (i + j) % 2 == 0 else \'.\', end=\'\')\n            print(\'|\')\n        print(\'+---+---+---+---+---+---+---+---+\')\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == "":\n            break\n        pieces = line.split(":")\n        board = [[\'.\' for i in range(8)] for j in range(8)]\n        for i in range(1, len(pieces)):\n            for piece in pieces[i].split(","):\n                if piece == "":\n                    continue\n                board[ord(piece[1]) - ord(\'1\')][ord(piece[0]) - ord(\'a\')] = piece[2].lower()\n                if piece[0].isupper():\n                    board[ord(piece[1]) - ord(\'1\')][ord(piece[0]) - ord(\'a\')] = piece[2].upper()\n        print(\'+---+---+---+---+---+---+---+---+\')\n        for i in range(8):\n            print(\'|\', end=\'\')\n            for j in range(8):\n                print(board[i][j] + \':\' if (i + j) % 2 == 0 else \'.\', end=\'\')\n            print(\'|\')\n        print(\'+---+---+---+---+---+---+---+---+\')\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-12 01:59:32.281079 size on output set 2
2022-04-12 01:59:32.281086 size on input set 2
2022-04-12 01:59:34.569029 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == \"\":\n            break\n        pieces = line.split(\":\")\n        board = [['.' for i in range(8)] for j in range(8)]\n        for i in range(1, len(pieces)):\n            for piece in pieces[i].split(\",\"):\n                if piece == \"\":\n                    continue\n                board[ord(piece[1]) - ord('1')][ord(piece[0]) - ord('a')] = piece[2].lower()\n                if piece[2].isupper():\n                    board[ord(piece[1]) - ord('1')][ord(piece[0]) - ord('a')] = piece[2].upper()\n        print('+---+---+---+---+---+---+---+---+')\n        for i in range(8):\n            print('|', end='')\n            for j in range(8):\n                print(board[i][j] + ':' if (i + j) % 2 == 0 else '.', end='')\n            print('|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == \"\":\n            break\n        pieces = line.split(\":\")\n        board = [['.' for i in range(8)] for j in range(8)]\n        for i in range(1, len(pieces)):\n            for piece in pieces[i].split(\",\"):\n                if piece == \"\":\n                    continue\n                board[ord(piece[1]) - ord('1')][ord(piece[0]) - ord('a')] = piece[2].lower()\n                if piece[0].isupper():\n                    board[ord(piece[1]) - ord('1')][ord(piece[0]) - ord('a')] = piece[2].upper()\n        print('+---+---+---+---+---+---+---+---+')\n        for i in range(8):\n            print('|', end='')\n            for j in range(8):\n                print(board[i][j] + ':' if (i + j) % 2 == 0 else '.', end='')\n            print('|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649743172,
  "object": "edit"
}
2022-04-12 01:59:34.569186 fix syntax errors 2 ['\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == "":\n            break\n        pieces = line.split(":")\n        board = [[\'.\' for i in range(8)] for j in range(8)]\n        for i in range(1, len(pieces)):\n            for piece in pieces[i].split(","):\n                if piece == "":\n                    continue\n                board[ord(piece[1]) - ord(\'1\')][ord(piece[0]) - ord(\'a\')] = piece[2].lower()\n                if piece[2].isupper():\n                    board[ord(piece[1]) - ord(\'1\')][ord(piece[0]) - ord(\'a\')] = piece[2].upper()\n        print(\'+---+---+---+---+---+---+---+---+\')\n        for i in range(8):\n            print(\'|\', end=\'\')\n            for j in range(8):\n                print(board[i][j] + \':\' if (i + j) % 2 == 0 else \'.\', end=\'\')\n            print(\'|\')\n        print(\'+---+---+---+---+---+---+---+---+\')\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == "":\n            break\n        pieces = line.split(":")\n        board = [[\'.\' for i in range(8)] for j in range(8)]\n        for i in range(1, len(pieces)):\n            for piece in pieces[i].split(","):\n                if piece == "":\n                    continue\n                board[ord(piece[1]) - ord(\'1\')][ord(piece[0]) - ord(\'a\')] = piece[2].lower()\n                if piece[0].isupper():\n                    board[ord(piece[1]) - ord(\'1\')][ord(piece[0]) - ord(\'a\')] = piece[2].upper()\n        print(\'+---+---+---+---+---+---+---+---+\')\n        for i in range(8):\n            print(\'|\', end=\'\')\n            for j in range(8):\n                print(board[i][j] + \':\' if (i + j) % 2 == 0 else \'.\', end=\'\')\n            print(\'|\')\n        print(\'+---+---+---+---+---+---+---+---+\')\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-12 01:59:41.066766 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == \"\":\n            break\n        pieces = line.split(\":\")\n        board = [['.' for i in range(8)] for j in range(8)]\n        for i in range(1, len(pieces)):\n            for piece in pieces[i].split(\",\"):\n                if piece == \"\":\n                    continue\n                board[ord(piece[2]) - ord('1')][ord(piece[1]) - ord('a')] = piece[0].lower()\n                if piece[0].isupper():\n                    board[ord(piece[2]) - ord('1')][ord(piece[1]) - ord('a')] = piece[0].upper()\n        print('+---+---+---+---+---+---+---+---+', file=sys.stderr)\n        for i in range(8):\n            print('|', end='', file=sys.stderr)\n            for j in range(8):\n                print(board[i][j] + ':' if (i + j) % 2 == 0 else '.', end='', file=sys.stderr)\n            print('|', file=sys.stderr)\n        print('+---+---+---+---+---+---+---+---+', file=sys.stderr)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n#\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == \"\":\n            break\n        pieces = line.split(\":\")\n        board = [['.' for i in range(8)] for j in range(8)]\n        for i in range(1, len(pieces)):\n            for piece in pieces[i].split(\",\"):\n                if piece == \"\":\n                    continue\n                board[ord(piece[2]) - ord('1')][ord(piece[1]) - ord('a')] = piece[0].lower()\n                if piece[0].isupper():\n                    board[ord(piece[2]) - ord('1')][ord(piece[1]) - ord('a')] = piece[0].upper()\n        print('+---+---+---+---+---+---+---+---+')  # noqa\n        for i in range(8):\n            print('|', end='')\n            for j in range(8):\n                print(board[i][j] + ':' if (i + j) % 2 == 0 else '.', end='')  # noqa\n            print('|')\n        print('+---+---+---+---+---+---+---+---+')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649743174,
  "object": "edit"
}
2022-04-12 01:59:41.067083 fix syntax errors 2 ['\n#\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == "":\n            break\n        pieces = line.split(":")\n        board = [[\'.\' for i in range(8)] for j in range(8)]\n        for i in range(1, len(pieces)):\n            for piece in pieces[i].split(","):\n                if piece == "":\n                    continue\n                board[ord(piece[2]) - ord(\'1\')][ord(piece[1]) - ord(\'a\')] = piece[0].lower()\n                if piece[0].isupper():\n                    board[ord(piece[2]) - ord(\'1\')][ord(piece[1]) - ord(\'a\')] = piece[0].upper()\n        print(\'+---+---+---+---+---+---+---+---+\', file=sys.stderr)\n        for i in range(8):\n            print(\'|\', end=\'\', file=sys.stderr)\n            for j in range(8):\n                print(board[i][j] + \':\' if (i + j) % 2 == 0 else \'.\', end=\'\', file=sys.stderr)\n            print(\'|\', file=sys.stderr)\n        print(\'+---+---+---+---+---+---+---+---+\', file=sys.stderr)\n\nif __name__ == \'__main__\':\n    main()\n', '\n#\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == "":\n            break\n        pieces = line.split(":")\n        board = [[\'.\' for i in range(8)] for j in range(8)]\n        for i in range(1, len(pieces)):\n            for piece in pieces[i].split(","):\n                if piece == "":\n                    continue\n                board[ord(piece[2]) - ord(\'1\')][ord(piece[1]) - ord(\'a\')] = piece[0].lower()\n                if piece[0].isupper():\n                    board[ord(piece[2]) - ord(\'1\')][ord(piece[1]) - ord(\'a\')] = piece[0].upper()\n        print(\'+---+---+---+---+---+---+---+---+\')  # noqa\n        for i in range(8):\n            print(\'|\', end=\'\')\n            for j in range(8):\n                print(board[i][j] + \':\' if (i + j) % 2 == 0 else \'.\', end=\'\')  # noqa\n            print(\'|\')\n        print(\'+---+---+---+---+---+---+---+---+\')\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-12 01:59:41.067142 size on output set 4
