2022-04-11 15:30:45.983027 num operations 2
2022-04-11 15:30:45.983052 size on input set 1
2022-04-11 15:30:58.081844 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nt = int(input())\n\nfor i in range(t):\n    n, m = [int(x) for x in input().split()]\n    \n    tiles = [[] for x in range(n)]\n    \n    for j in range(n):\n        tiles[j] = [int(x) for x in input().split()]\n        \n    for j in range(n):\n        tiles[j] += [int(x) for x in input().split()]\n    \n    tiles.sort(key=lambda x: x[0])\n    \n    for j in range(n):\n        for k in range(n):\n            if tiles[j][0] == tiles[k][2] and tiles[j][2] == tiles[k][0] and tiles[j][1] == tiles[k][3] and tiles[j][3] == tiles[k][1]:\n                tiles[j], tiles[k] = tiles[k], tiles[j]\n\n    if m % 2 == 0:\n        if m == 2:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"YES\")\n    else:\n        if m == 1:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n"
    },
    {
      "index": 1,
      "text": "\n\nt = int(input()) \n\nfor i in range(t):\n    n, m = [int(x) for x in input().split()]\n    \n    tiles = []\n    \n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n        \n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n    \n    tiles.sort()\n    \n    for j in range(n):\n        for k in range(n):\n            if tiles[j][0] == tiles[k][2] and tiles[j][2] == tiles[k][0]:\n                tiles[j][0], tiles[k][0] = tiles[k][0], tiles[j][0]\n                tiles[j][2], tiles[k][2] = tiles[k][2], tiles[j][2]\n            if tiles[j][1] == tiles[k][3] and tiles[j][3] == tiles[k][1]:\n                tiles[j][1], tiles[k][1] = tiles[k][1], tiles[j][1]\n                tiles[j][3], tiles[k][3] = tiles[k][3], tiles[j][3]\n\n    if m % 2 == 0:\n        if m == 2:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"YES\")\n    else:\n        if m == 1:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n"
    }
  ],
  "created": 1649705446,
  "object": "edit"
}
2022-04-11 15:30:58.082164 fix spelling mistakes 2 ['\n\nt = int(input())\n\nfor i in range(t):\n    n, m = [int(x) for x in input().split()]\n    \n    tiles = [[] for x in range(n)]\n    \n    for j in range(n):\n        tiles[j] = [int(x) for x in input().split()]\n        \n    for j in range(n):\n        tiles[j] += [int(x) for x in input().split()]\n    \n    tiles.sort(key=lambda x: x[0])\n    \n    for j in range(n):\n        for k in range(n):\n            if tiles[j][0] == tiles[k][2] and tiles[j][2] == tiles[k][0] and tiles[j][1] == tiles[k][3] and tiles[j][3] == tiles[k][1]:\n                tiles[j], tiles[k] = tiles[k], tiles[j]\n\n    if m % 2 == 0:\n        if m == 2:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print("YES")\n            else:\n                print("NO")\n        else:\n            print("YES")\n    else:\n        if m == 1:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print("YES")\n            else:\n                print("NO")\n        else:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print("YES")\n            else:\n                print("NO")\n', '\n\nt = int(input()) \n\nfor i in range(t):\n    n, m = [int(x) for x in input().split()]\n    \n    tiles = []\n    \n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n        \n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n    \n    tiles.sort()\n    \n    for j in range(n):\n        for k in range(n):\n            if tiles[j][0] == tiles[k][2] and tiles[j][2] == tiles[k][0]:\n                tiles[j][0], tiles[k][0] = tiles[k][0], tiles[j][0]\n                tiles[j][2], tiles[k][2] = tiles[k][2], tiles[j][2]\n            if tiles[j][1] == tiles[k][3] and tiles[j][3] == tiles[k][1]:\n                tiles[j][1], tiles[k][1] = tiles[k][1], tiles[j][1]\n                tiles[j][3], tiles[k][3] = tiles[k][3], tiles[j][3]\n\n    if m % 2 == 0:\n        if m == 2:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print("YES")\n            else:\n                print("NO")\n        else:\n            print("YES")\n    else:\n        if m == 1:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print("YES")\n            else:\n                print("NO")\n        else:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print("YES")\n            else:\n                print("NO")\n']
2022-04-11 15:30:58.082222 size on output set 2
2022-04-11 15:30:58.082230 size on input set 2
2022-04-11 15:31:10.356290 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nt = int(input()) # number of test cases\n\nfor i in range(t):\n    n, m = [int(x) for x in input().split()] # n = number of tiles, m = number of rotations\n    \n    tiles = [[] for x in range(n)] # list of tiles\n    \n    for j in range(n):\n        tiles[j] = [int(x) for x in input().split()] # first half of tile\n        \n    for j in range(n):\n        tiles[j] += [int(x) for x in input().split()] # second half of tile\n    \n    tiles.sort(key=lambda x: x[0]) # sort tiles by first element\n    \n    for j in range(n):\n            # check if tiles are the same\n        for k in range(n):\n            if tiles[j][0] == tiles[k][2] and tiles[j][2] == tiles[k][0] and tiles[j][1] == tiles[k][3] and tiles[j][3] == tiles[k][1]:\n                # swap tiles\n                tiles[j], tiles[k] = tiles[k], tiles[j]\n\n            # check if all tiles are the same\n    if m % 2 == 0:\n        if m == 2:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"YES\")\n            # check if all tiles are the same\n    else:\n        if m == 1:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                # check if all tiles are the same\n                print(\"YES\")\n            else:\n                print(\"NO\")\n"
    },
    {
      "index": 1,
      "text": "\n\nt = int(input())\n\nfor i in range(t):\n    n, m = [int(x) for x in input().split()]\n    \n    tiles = [[] for x in range(n)]\n    \n    for j in range(n):\n        tiles[j] = [int(x) for x in input().split()]\n        \n    for j in range(n):\n        tiles[j] += [int(x) for x in input().split()]\n    \n    tiles.sort(key=lambda x: x[0])\n    \n    for j in range(n):\n        for k in range(n):\n            if tiles[j][0] == tiles[k][2] and tiles[j][2] == tiles[k][0] and tiles[j][1] == tiles[k][3] and tiles[j][3] == tiles[k][1]:\n                tiles[j], tiles[k] = tiles[k], tiles[j]\n\n    if m == 1:\n        if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n            print(\"NO\")\n    elif m == 2:\n        if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n    else:\n        print(\"YES\")\n"
    }
  ],
  "created": 1649705458,
  "object": "edit"
}
2022-04-11 15:31:10.356629 fix syntax errors 2 ['\n\nt = int(input()) # number of test cases\n\nfor i in range(t):\n    n, m = [int(x) for x in input().split()] # n = number of tiles, m = number of rotations\n    \n    tiles = [[] for x in range(n)] # list of tiles\n    \n    for j in range(n):\n        tiles[j] = [int(x) for x in input().split()] # first half of tile\n        \n    for j in range(n):\n        tiles[j] += [int(x) for x in input().split()] # second half of tile\n    \n    tiles.sort(key=lambda x: x[0]) # sort tiles by first element\n    \n    for j in range(n):\n            # check if tiles are the same\n        for k in range(n):\n            if tiles[j][0] == tiles[k][2] and tiles[j][2] == tiles[k][0] and tiles[j][1] == tiles[k][3] and tiles[j][3] == tiles[k][1]:\n                # swap tiles\n                tiles[j], tiles[k] = tiles[k], tiles[j]\n\n            # check if all tiles are the same\n    if m % 2 == 0:\n        if m == 2:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print("YES")\n            else:\n                print("NO")\n        else:\n            print("YES")\n            # check if all tiles are the same\n    else:\n        if m == 1:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print("YES")\n            else:\n                print("NO")\n        else:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                # check if all tiles are the same\n                print("YES")\n            else:\n                print("NO")\n', '\n\nt = int(input())\n\nfor i in range(t):\n    n, m = [int(x) for x in input().split()]\n    \n    tiles = [[] for x in range(n)]\n    \n    for j in range(n):\n        tiles[j] = [int(x) for x in input().split()]\n        \n    for j in range(n):\n        tiles[j] += [int(x) for x in input().split()]\n    \n    tiles.sort(key=lambda x: x[0])\n    \n    for j in range(n):\n        for k in range(n):\n            if tiles[j][0] == tiles[k][2] and tiles[j][2] == tiles[k][0] and tiles[j][1] == tiles[k][3] and tiles[j][3] == tiles[k][1]:\n                tiles[j], tiles[k] = tiles[k], tiles[j]\n\n    if m == 1:\n        if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n            print("NO")\n    elif m == 2:\n        if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n            print("YES")\n        else:\n            print("NO")\n        else:\n            print("YES")\n    else:\n        print("YES")\n']
2022-04-11 15:31:27.430002 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nt = int(input())\n\nfor i in range(t):\n    n, m = [int(x) for x in input().split()]\n\n    tiles = []\n\n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n\n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n\n    tiles.sort()\n\n    for j in range(n):\n        for k in range(n):\n            if tiles[j][0] == tiles[k][2] and tiles[j][2] == tiles[k][0]:\n                tiles[j][0], tiles[k][0] = tiles[k][0], tiles[j][0]\n                tiles[j][2], tiles[k][2] = tiles[k][2], tiles[j][2]\n            if tiles[j][1] == tiles[k][3] and tiles[j][3] == tiles[k][1]:\n                tiles[j][1], tiles[k][1] = tiles[k][1], tiles[j][1]\n                tiles[j][3], tiles[k][3] = tiles[k][3], tiles[j][3]\n\n    if m % 2 == 0:\n        if m == 2:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0] and tiles[0][0] == tiles[1][0] and tiles[1][0] == tiles[1][1] and tiles[1][1] == tiles[1][2] and tiles[1][2] == tiles[1][3] and tiles[1][3] == tiles[1][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"YES\")\n    else:\n        if m == 1:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0] and tiles[0][0] == tiles[1][0] and tiles[1][0] == tiles[1][1] and tiles[1][1] == tiles[1][2] and tiles[1][2] == tiles[1][3] and tiles[1][3] == tiles[1][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0] and tiles[0][0] == tiles[1][0] and tiles[1][0] == tiles[1][1] and tiles[1][1] == tiles[1][2] and tiles[1][2] == tiles[1][3] and tiles[1][3] == tiles[1][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n"
    },
    {
      "index": 1,
      "text": "\n\nt = int(input())\n\nfor i in range(t):\n    n, m = [int(x) for x in input().split()]\n\n    tiles = []\n\n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n\n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n\n    tiles.sort()\n\n    for j in range(n):\n        for k in range(n):\n            if tiles[j][0] == tiles[k][2] and tiles[j][2] == tiles[k][0]:\n                tiles[j][0], tiles[k][0] = tiles[k][0], tiles[j][0]\n                tiles[j][2], tiles[k][2] = tiles[k][2], tiles[j][2]\n            if tiles[j][1] == tiles[k][3] and tiles[j][3] == tiles[k][1]:\n                tiles[j][1], tiles[k][1] = tiles[k][1], tiles[j][1]\n                tiles[j][3], tiles[k][3] = tiles[k][3], tiles[j][3]\n\n    if m % 2 == 0:\n        if m == 2:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0] and tiles[1][0] == tiles[1][1] and tiles[1][1] == tiles[1][2] and tiles[1][2] == tiles[1][3] and tiles[1][3] == tiles[1][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"YES\")\n    else:\n        if m == 1:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0] and tiles[1][0] == tiles[1][1] and tiles[1][1] == tiles[1][2] and tiles[1][2] == tiles[1][3] and tiles[1][3] == tiles[1][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0] and tiles[1][0] == tiles[1][1] and tiles[1][1] == tiles[1][2] and tiles[1][2] == tiles[1][3] and tiles[1][3] == tiles[1][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n"
    }
  ],
  "created": 1649705470,
  "object": "edit"
}
2022-04-11 15:31:27.430253 fix syntax errors 2 ['\n\nt = int(input())\n\nfor i in range(t):\n    n, m = [int(x) for x in input().split()]\n\n    tiles = []\n\n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n\n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n\n    tiles.sort()\n\n    for j in range(n):\n        for k in range(n):\n            if tiles[j][0] == tiles[k][2] and tiles[j][2] == tiles[k][0]:\n                tiles[j][0], tiles[k][0] = tiles[k][0], tiles[j][0]\n                tiles[j][2], tiles[k][2] = tiles[k][2], tiles[j][2]\n            if tiles[j][1] == tiles[k][3] and tiles[j][3] == tiles[k][1]:\n                tiles[j][1], tiles[k][1] = tiles[k][1], tiles[j][1]\n                tiles[j][3], tiles[k][3] = tiles[k][3], tiles[j][3]\n\n    if m % 2 == 0:\n        if m == 2:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0] and tiles[0][0] == tiles[1][0] and tiles[1][0] == tiles[1][1] and tiles[1][1] == tiles[1][2] and tiles[1][2] == tiles[1][3] and tiles[1][3] == tiles[1][0]:\n                print("YES")\n            else:\n                print("NO")\n        else:\n            print("YES")\n    else:\n        if m == 1:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0] and tiles[0][0] == tiles[1][0] and tiles[1][0] == tiles[1][1] and tiles[1][1] == tiles[1][2] and tiles[1][2] == tiles[1][3] and tiles[1][3] == tiles[1][0]:\n                print("YES")\n            else:\n                print("NO")\n        else:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0] and tiles[0][0] == tiles[1][0] and tiles[1][0] == tiles[1][1] and tiles[1][1] == tiles[1][2] and tiles[1][2] == tiles[1][3] and tiles[1][3] == tiles[1][0]:\n                print("YES")\n            else:\n                print("NO")\n', '\n\nt = int(input())\n\nfor i in range(t):\n    n, m = [int(x) for x in input().split()]\n\n    tiles = []\n\n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n\n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n\n    tiles.sort()\n\n    for j in range(n):\n        for k in range(n):\n            if tiles[j][0] == tiles[k][2] and tiles[j][2] == tiles[k][0]:\n                tiles[j][0], tiles[k][0] = tiles[k][0], tiles[j][0]\n                tiles[j][2], tiles[k][2] = tiles[k][2], tiles[j][2]\n            if tiles[j][1] == tiles[k][3] and tiles[j][3] == tiles[k][1]:\n                tiles[j][1], tiles[k][1] = tiles[k][1], tiles[j][1]\n                tiles[j][3], tiles[k][3] = tiles[k][3], tiles[j][3]\n\n    if m % 2 == 0:\n        if m == 2:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0] and tiles[1][0] == tiles[1][1] and tiles[1][1] == tiles[1][2] and tiles[1][2] == tiles[1][3] and tiles[1][3] == tiles[1][0]:\n                print("YES")\n            else:\n                print("NO")\n        else:\n            print("YES")\n    else:\n        if m == 1:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0] and tiles[1][0] == tiles[1][1] and tiles[1][1] == tiles[1][2] and tiles[1][2] == tiles[1][3] and tiles[1][3] == tiles[1][0]:\n                print("YES")\n            else:\n                print("NO")\n        else:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0] and tiles[1][0] == tiles[1][1] and tiles[1][1] == tiles[1][2] and tiles[1][2] == tiles[1][3] and tiles[1][3] == tiles[1][0]:\n                print("YES")\n            else:\n                print("NO")\n']
2022-04-11 15:31:27.430330 size on output set 4
2022-04-11 15:31:27.430456 num operations 2
2022-04-11 15:31:27.430522 size on input set 1
2022-04-11 15:31:53.170340 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef check_square(tiles, board):\n    for i in range(len(board)):\n        for j in range(len(board)):\n            if board[i][j] == 0:\n                for tile in tiles:\n                    if check_tile(tile, board, i, j):\n                        board[i][j] = tile[0][0]\n                        board[i][j+1] = tile[0][1]\n                        board[i+1][j] = tile[1][0]\n                        board[i+1][j+1] = tile[1][1]\n                        break\n                else:\n                    return False\n    return True\n\n    if board[i][j] == 0 and board[i][j+1] == 0 and board[i+1][j] == 0 and board[i+1][j+1] == 0:\n        if i+1 < len(board) and j+1 < len(board):\n            if board[i][j+1] == tile[0][0] and board[i+1][j+1] == tile[1][0] and board[i+1][j] == tile[0][1] and board[i][j] == tile[1][1]:\n                return True\n            if board[i+1][j] == tile[0][0] and board[i+1][j+1] == tile[1][0] and board[i][j+1] == tile[0][1] and board[i][j] == tile[1][1]:\n                return True\n            if board[i][j] == tile[0][0] and board[i][j+1] == tile[1][0] and board[i+1][j+1] == tile[0][1] and board[i+1][j] == tile[1][1]:\n                return True\n            if board[i][j] == tile[0][0] and board[i+1][j] == tile[1][0] and board[i][j+1] == tile[0][1] and board[i+1][j+1] == tile[1][1]:\n                return True\n    return False\n\ndef main():\n    cases = int(input())\n    for case in range(cases):\n        n, m = map(int, input().split())\n        tiles = []\n        for i in range(n):\n            tiles.append([list(map(int, input().split())) for i in range(2)])\n        board = [[0 for i in range(m)] for j in range(m)]\n        if check_square(tiles, board):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef check_square(tiles, square, n, m):\n    for i in range(len(square)):\n        for j in range(len(square)):\n            if square[i][j] == 0:\n                for tile in tiles:\n                    if check_tile(tile, square, i, j, n, m):\n                        square[i][j] = tile[0][0]\n                        square[i][j+1] = tile[0][1]\n                        square[i+1][j] = tile[1][0]\n                        square[i+1][j+1] = tile[1][1]\n                        break\n                else:\n                    return False\n    return True\n\ndef check_tile(tile, square, i, j, n, m):\n    if square[i][j] == 0 and square[i][j+1] == 0 and square[i+1][j] == 0 and square[i+1][j+1] == 0:\n        if i+1 < n and j+1 < m:\n            if square[i][j+1] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i+1][j] == tile[0][1] and square[i][j] == tile[1][1]:\n                return True\n            if square[i+1][j] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i][j] == tile[1][1]:\n                return True\n            if square[i][j] == tile[0][0] and square[i][j+1] == tile[1][0] and square[i+1][j+1] == tile[0][1] and square[i+1][j] == tile[1][1]:\n                return True\n            if square[i][j] == tile[0][0] and square[i+1][j] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i+1][j+1] == tile[1][1]:\n                return True\n    return False\n\ndef main():\n    cases = int(input())\n    for case in range(cases):\n        n, m = map(int, input().split())\n        tiles = []\n        for i in range(n):\n            tiles.append([list(map(int, input().split())) for i in range(2)])\n        square = [[0 for i in range(m)] for j in range(m)]\n        if check_square(tiles, square, n, m):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649705487,
  "object": "edit"
}
2022-04-11 15:31:53.170460 fix spelling mistakes 2 ['\n\ndef check_square(tiles, board):\n    for i in range(len(board)):\n        for j in range(len(board)):\n            if board[i][j] == 0:\n                for tile in tiles:\n                    if check_tile(tile, board, i, j):\n                        board[i][j] = tile[0][0]\n                        board[i][j+1] = tile[0][1]\n                        board[i+1][j] = tile[1][0]\n                        board[i+1][j+1] = tile[1][1]\n                        break\n                else:\n                    return False\n    return True\n\n    if board[i][j] == 0 and board[i][j+1] == 0 and board[i+1][j] == 0 and board[i+1][j+1] == 0:\n        if i+1 < len(board) and j+1 < len(board):\n            if board[i][j+1] == tile[0][0] and board[i+1][j+1] == tile[1][0] and board[i+1][j] == tile[0][1] and board[i][j] == tile[1][1]:\n                return True\n            if board[i+1][j] == tile[0][0] and board[i+1][j+1] == tile[1][0] and board[i][j+1] == tile[0][1] and board[i][j] == tile[1][1]:\n                return True\n            if board[i][j] == tile[0][0] and board[i][j+1] == tile[1][0] and board[i+1][j+1] == tile[0][1] and board[i+1][j] == tile[1][1]:\n                return True\n            if board[i][j] == tile[0][0] and board[i+1][j] == tile[1][0] and board[i][j+1] == tile[0][1] and board[i+1][j+1] == tile[1][1]:\n                return True\n    return False\n\ndef main():\n    cases = int(input())\n    for case in range(cases):\n        n, m = map(int, input().split())\n        tiles = []\n        for i in range(n):\n            tiles.append([list(map(int, input().split())) for i in range(2)])\n        board = [[0 for i in range(m)] for j in range(m)]\n        if check_square(tiles, board):\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef check_square(tiles, square, n, m):\n    for i in range(len(square)):\n        for j in range(len(square)):\n            if square[i][j] == 0:\n                for tile in tiles:\n                    if check_tile(tile, square, i, j, n, m):\n                        square[i][j] = tile[0][0]\n                        square[i][j+1] = tile[0][1]\n                        square[i+1][j] = tile[1][0]\n                        square[i+1][j+1] = tile[1][1]\n                        break\n                else:\n                    return False\n    return True\n\ndef check_tile(tile, square, i, j, n, m):\n    if square[i][j] == 0 and square[i][j+1] == 0 and square[i+1][j] == 0 and square[i+1][j+1] == 0:\n        if i+1 < n and j+1 < m:\n            if square[i][j+1] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i+1][j] == tile[0][1] and square[i][j] == tile[1][1]:\n                return True\n            if square[i+1][j] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i][j] == tile[1][1]:\n                return True\n            if square[i][j] == tile[0][0] and square[i][j+1] == tile[1][0] and square[i+1][j+1] == tile[0][1] and square[i+1][j] == tile[1][1]:\n                return True\n            if square[i][j] == tile[0][0] and square[i+1][j] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i+1][j+1] == tile[1][1]:\n                return True\n    return False\n\ndef main():\n    cases = int(input())\n    for case in range(cases):\n        n, m = map(int, input().split())\n        tiles = []\n        for i in range(n):\n            tiles.append([list(map(int, input().split())) for i in range(2)])\n        square = [[0 for i in range(m)] for j in range(m)]\n        if check_square(tiles, square, n, m):\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-11 15:31:53.170487 size on output set 2
2022-04-11 15:31:53.170491 size on input set 2
2022-04-11 15:32:10.122010 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef check_square(tiles, board):\n    for i in range(len(board)):\n        for j in range(len(board)):\n            if board[i][j] == 0:\n                for tile in tiles:\n                    if check_tile(tile, board, i, j):\n                        board[i][j] = tile[0][0]\n                        board[i][j+1] = tile[0][1]\n                        board[i+1][j] = tile[1][0]\n                        board[i+1][j+1] = tile[1][1]\n                        break\n                else:\n                    return False\n    return True\n\n    # if board[i][j] == 0 and board[i][j+1] == 0 and board[i+1][j] == 0 and board[i+1][j+1] == 0:\n    #     if i+1 < len(board) and j+1 < len(board):\n    #         if board[i][j+1] == tile[0][0] and board[i+1][j+1] == tile[1][0] and board[i+1][j] == tile[0][1] and board[i][j] == tile[1][1]:\n    #             return True\n    #         if board[i+1][j] == tile[0][0] and board[i+1][j+1] == tile[1][0] and board[i][j+1] == tile[0][1] and board[i][j] == tile[1][1]:\n    #             return True\n    #         if board[i][j] == tile[0][0] and board[i][j+1] == tile[1][0] and board[i+1][j+1] == tile[0][1] and board[i+1][j] == tile[1][1]:\n    #             return True\n    #         if board[i][j] == tile[0][0] and board[i+1][j] == tile[1][0] and board[i][j+1] == tile[0][1] and board[i+1][j+1] == tile[1][1]:\n    #             return True\n    # return False\n\ndef main():\n    cases = int(input())\n    for case in range(cases):\n        n, m = map(int, input().split())\n        tiles = []\n        for i in range(n):\n            tiles.append([list(map(int, input().split())) for i in range(2)])\n        board = [[0 for i in range(m)] for j in range(m)]\n        if check_square(tiles, board):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef check_square(tiles, board):\n    for i in range(len(board)):\n        for j in range(len(board)):\n            if board[i][j] == 0:\n                for tile in tiles:\n                    if check_tile(tile, board, i, j):\n                        board[i][j] = tile[0][0]\n                        board[i][j+1] = tile[0][1]\n                        board[i+1][j] = tile[1][0]\n                        board[i+1][j+1] = tile[1][1]\n                        break\n                else:\n                    return False\n    return True\n\n    # if board[i][j] == 0 and board[i][j+1] == 0 and board[i+1][j] == 0 and board[i+1][j+1] == 0:\n    #     if i+1 < len(board) and j+1 < len(board):\n    #         if board[i][j+1] == tile[0][0] and board[i+1][j+1] == tile[1][0] and board[i+1][j] == tile[0][1] and board[i][j] == tile[1][1]:\n    #             return True\n    #         if board[i+1][j] == tile[0][0] and board[i+1][j+1] == tile[1][0] and board[i][j+1] == tile[0][1] and board[i][j] == tile[1][1]:\n    #             return True\n    #         if board[i][j] == tile[0][0] and board[i][j+1] == tile[1][0] and board[i+1][j+1] == tile[0][1] and board[i+1][j] == tile[1][1]:\n    #             return True\n    #         if board[i][j] == tile[0][0] and board[i+1][j] == tile[1][0] and board[i][j+1] == tile[0][1] and board[i+1][j+1] == tile[1][1]:\n    #             return True\n    # return False\n\ndef main():\n    cases = int(input())\n    for case in range(cases):\n        n, m = map(int, input().split())\n        tiles = []\n        for i in range(n):\n            tiles.append([list(map(int, input().split())) for i in range(2)])\n        board = [[0 for i in range(m)] for j in range(m)]\n        if check_square(tiles, board):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649705513,
  "object": "edit"
}
2022-04-11 15:32:10.122308 fix syntax errors 2 ['\n\ndef check_square(tiles, board):\n    for i in range(len(board)):\n        for j in range(len(board)):\n            if board[i][j] == 0:\n                for tile in tiles:\n                    if check_tile(tile, board, i, j):\n                        board[i][j] = tile[0][0]\n                        board[i][j+1] = tile[0][1]\n                        board[i+1][j] = tile[1][0]\n                        board[i+1][j+1] = tile[1][1]\n                        break\n                else:\n                    return False\n    return True\n\n    # if board[i][j] == 0 and board[i][j+1] == 0 and board[i+1][j] == 0 and board[i+1][j+1] == 0:\n    #     if i+1 < len(board) and j+1 < len(board):\n    #         if board[i][j+1] == tile[0][0] and board[i+1][j+1] == tile[1][0] and board[i+1][j] == tile[0][1] and board[i][j] == tile[1][1]:\n    #             return True\n    #         if board[i+1][j] == tile[0][0] and board[i+1][j+1] == tile[1][0] and board[i][j+1] == tile[0][1] and board[i][j] == tile[1][1]:\n    #             return True\n    #         if board[i][j] == tile[0][0] and board[i][j+1] == tile[1][0] and board[i+1][j+1] == tile[0][1] and board[i+1][j] == tile[1][1]:\n    #             return True\n    #         if board[i][j] == tile[0][0] and board[i+1][j] == tile[1][0] and board[i][j+1] == tile[0][1] and board[i+1][j+1] == tile[1][1]:\n    #             return True\n    # return False\n\ndef main():\n    cases = int(input())\n    for case in range(cases):\n        n, m = map(int, input().split())\n        tiles = []\n        for i in range(n):\n            tiles.append([list(map(int, input().split())) for i in range(2)])\n        board = [[0 for i in range(m)] for j in range(m)]\n        if check_square(tiles, board):\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef check_square(tiles, board):\n    for i in range(len(board)):\n        for j in range(len(board)):\n            if board[i][j] == 0:\n                for tile in tiles:\n                    if check_tile(tile, board, i, j):\n                        board[i][j] = tile[0][0]\n                        board[i][j+1] = tile[0][1]\n                        board[i+1][j] = tile[1][0]\n                        board[i+1][j+1] = tile[1][1]\n                        break\n                else:\n                    return False\n    return True\n\n    # if board[i][j] == 0 and board[i][j+1] == 0 and board[i+1][j] == 0 and board[i+1][j+1] == 0:\n    #     if i+1 < len(board) and j+1 < len(board):\n    #         if board[i][j+1] == tile[0][0] and board[i+1][j+1] == tile[1][0] and board[i+1][j] == tile[0][1] and board[i][j] == tile[1][1]:\n    #             return True\n    #         if board[i+1][j] == tile[0][0] and board[i+1][j+1] == tile[1][0] and board[i][j+1] == tile[0][1] and board[i][j] == tile[1][1]:\n    #             return True\n    #         if board[i][j] == tile[0][0] and board[i][j+1] == tile[1][0] and board[i+1][j+1] == tile[0][1] and board[i+1][j] == tile[1][1]:\n    #             return True\n    #         if board[i][j] == tile[0][0] and board[i+1][j] == tile[1][0] and board[i][j+1] == tile[0][1] and board[i+1][j+1] == tile[1][1]:\n    #             return True\n    # return False\n\ndef main():\n    cases = int(input())\n    for case in range(cases):\n        n, m = map(int, input().split())\n        tiles = []\n        for i in range(n):\n            tiles.append([list(map(int, input().split())) for i in range(2)])\n        board = [[0 for i in range(m)] for j in range(m)]\n        if check_square(tiles, board):\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-11 15:32:24.965721 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef check_square(tiles, square, n, m):\n    for i in range(len(square)):\n        for j in range(len(square)):\n            if square[i][j] == 0:\n                for tile in tiles:\n                    if check_tile(tile, square, i, j, n, m):\n                        square[i][j] = tile[0][0]\n                        square[i][j+1] = tile[0][1]\n                        square[i+1][j] = tile[1][0]\n                        square[i+1][j+1] = tile[1][1]\n                        break\n                else:\n                    return False\n    return True\n\ndef check_tile(tile, square, i, j, n, m):\n    if square[i][j] == 0 and square[i][j+1] == 0 and square[i+1][j] == 0 and square[i+1][j+1] == 0:\n        if i+1 < n and j+1 < m:\n            if square[i][j] == tile[0][0] and square[i][j+1] == tile[1][0] and square[i+1][j+1] == tile[0][1] and square[i+1][j] == tile[1][1]:\n                return True\n            if square[i][j] == tile[0][0] and square[i+1][j] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i+1][j+1] == tile[1][1]:\n                return True\n            if square[i+1][j] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i][j] == tile[1][1]:\n                return True\n            if square[i][j+1] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i+1][j] == tile[0][1] and square[i][j] == tile[1][1]:\n                return True\n    return False\n\ndef main():\n    cases = int(input())\n    for case in range(cases):\n        n, m = map(int, input().split())\n        tiles = []\n        for i in range(n):\n            tiles.append([list(map(int, input().split())) for i in range(2)])\n        square = [[0 for i in range(m)] for j in range(m)]\n        if check_square(tiles, square, n, m):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef check_square(tiles, square, n, m):\n    for i in range(len(square)):\n        for j in range(len(square)):\n            if square[i][j] == 0:\n                for tile in tiles:\n                    if check_tile(tile, square, i, j, n, m):\n                        square[i][j] = tile[0][0]\n                        square[i][j+1] = tile[0][1]\n                        square[i+1][j] = tile[1][0]\n                        square[i+1][j+1] = tile[1][1]\n                        break\n                else:\n                    return False\n    return True\n\ndef check_tile(tile, square, i, j, n, m):\n    if square[i][j] == 0 and square[i][j+1] == 0 and square[i+1][j] == 0 and square[i+1][j+1] == 0:\n        if i+1 < n and j+1 < m:\n            if square[i][j+1] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i+1][j] == tile[1][1] and square[i][j] == tile[0][1]:\n                return True\n            if square[i+1][j] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i][j+1] == tile[1][1] and square[i][j] == tile[0][1]:\n                return True\n            if square[i][j] == tile[0][0] and square[i][j+1] == tile[1][0] and square[i+1][j+1] == tile[1][1] and square[i+1][j] == tile[0][1]:\n                return True\n            if square[i][j] == tile[0][0] and square[i+1][j] == tile[1][0] and square[i][j+1] == tile[1][1] and square[i+1][j+1] == tile[0][1]:\n                return True\n    return False\n\ndef main():\n    cases = int(input())\n    for case in range(cases):\n        n, m = map(int, input().split())\n        tiles = []\n        for i in range(n):\n            tiles.append([list(map(int, input().split())) for i in range(2)])\n        square = [[0 for i in range(m)] for j in range(m)]\n        if check_square(tiles, square, n, m):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649705530,
  "object": "edit"
}
2022-04-11 15:32:24.966248 fix syntax errors 2 ['\n\ndef check_square(tiles, square, n, m):\n    for i in range(len(square)):\n        for j in range(len(square)):\n            if square[i][j] == 0:\n                for tile in tiles:\n                    if check_tile(tile, square, i, j, n, m):\n                        square[i][j] = tile[0][0]\n                        square[i][j+1] = tile[0][1]\n                        square[i+1][j] = tile[1][0]\n                        square[i+1][j+1] = tile[1][1]\n                        break\n                else:\n                    return False\n    return True\n\ndef check_tile(tile, square, i, j, n, m):\n    if square[i][j] == 0 and square[i][j+1] == 0 and square[i+1][j] == 0 and square[i+1][j+1] == 0:\n        if i+1 < n and j+1 < m:\n            if square[i][j] == tile[0][0] and square[i][j+1] == tile[1][0] and square[i+1][j+1] == tile[0][1] and square[i+1][j] == tile[1][1]:\n                return True\n            if square[i][j] == tile[0][0] and square[i+1][j] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i+1][j+1] == tile[1][1]:\n                return True\n            if square[i+1][j] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i][j] == tile[1][1]:\n                return True\n            if square[i][j+1] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i+1][j] == tile[0][1] and square[i][j] == tile[1][1]:\n                return True\n    return False\n\ndef main():\n    cases = int(input())\n    for case in range(cases):\n        n, m = map(int, input().split())\n        tiles = []\n        for i in range(n):\n            tiles.append([list(map(int, input().split())) for i in range(2)])\n        square = [[0 for i in range(m)] for j in range(m)]\n        if check_square(tiles, square, n, m):\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef check_square(tiles, square, n, m):\n    for i in range(len(square)):\n        for j in range(len(square)):\n            if square[i][j] == 0:\n                for tile in tiles:\n                    if check_tile(tile, square, i, j, n, m):\n                        square[i][j] = tile[0][0]\n                        square[i][j+1] = tile[0][1]\n                        square[i+1][j] = tile[1][0]\n                        square[i+1][j+1] = tile[1][1]\n                        break\n                else:\n                    return False\n    return True\n\ndef check_tile(tile, square, i, j, n, m):\n    if square[i][j] == 0 and square[i][j+1] == 0 and square[i+1][j] == 0 and square[i+1][j+1] == 0:\n        if i+1 < n and j+1 < m:\n            if square[i][j+1] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i+1][j] == tile[1][1] and square[i][j] == tile[0][1]:\n                return True\n            if square[i+1][j] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i][j+1] == tile[1][1] and square[i][j] == tile[0][1]:\n                return True\n            if square[i][j] == tile[0][0] and square[i][j+1] == tile[1][0] and square[i+1][j+1] == tile[1][1] and square[i+1][j] == tile[0][1]:\n                return True\n            if square[i][j] == tile[0][0] and square[i+1][j] == tile[1][0] and square[i][j+1] == tile[1][1] and square[i+1][j+1] == tile[0][1]:\n                return True\n    return False\n\ndef main():\n    cases = int(input())\n    for case in range(cases):\n        n, m = map(int, input().split())\n        tiles = []\n        for i in range(n):\n            tiles.append([list(map(int, input().split())) for i in range(2)])\n        square = [[0 for i in range(m)] for j in range(m)]\n        if check_square(tiles, square, n, m):\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-11 15:32:24.966374 size on output set 3
