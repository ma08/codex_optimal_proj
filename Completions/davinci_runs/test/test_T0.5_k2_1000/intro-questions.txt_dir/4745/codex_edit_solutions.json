["#!/usr/bin/env python3\n\nn, x = map(int, input().split())\nprices = list(map(int, input().split()))\n\nprices.sort()\n\n# If the smallest two elements are less than x, we can't mark anything\nif prices[0] + prices[1] < x:\n    print(0)\n    exit()\n\n# If the smallest two elements are greater than x, we can mark everything\nif prices[0] + prices[1] > x:\n    print(n)\n    exit()\n\n# Otherwise, we can mark everything except the smallest element\nprint(n - 1)\n", "\nimport sys\nimport sys\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "\n\n# solution\nn, x = map(int, input().split())\nprices = list(map(int, input().split()))\nprices.sort()\n\nleft = 0\nright = n - 1\n\nresult = 0\nwhile left < right:\n    if prices[left] + prices[right] > x:\n        result += 1\n    right -= 1\n    if prices[left] + prices[right] > x:\n        result += 1\n    left += 1\n\nif left == right and prices[left] > x:\n    result += 1\n\nprint(result)\n", "\n\ndef main():\n    \"\"\"find the maximum number of items that can be marked as part of the special offer\"\"\"\n    n, x = map(int, input().split())\n    prices = list(map(int, input().split()))\n    prices.sort()\n    total = 0\n    count = 0\n    for i in prices:\n        if i + total > x:\n            break\n        total += i\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\n# SOLUTION \nn, X = map(int, input().split())\nprices = list(map(int, input().split()))\n\n# sort the prices and keep track of the original index\nprices_with_indices = list(enumerate(prices))\nprices_with_indices.sort(key = lambda x: x[1])\n\n# create a list of all indices\nindices = [x[0] for x in prices_with_indices]\n\n# create a list of all prices\nprices = [x[1] for x in prices_with_indices]\n\n# create a list of all possible pairs of prices\npairs = [(prices[i], prices[j]) for i in range(len(prices)) for j in range(i+1, len(prices))]\n\n# filter out all pairs with sum less than X\npairs = list(filter(lambda x: x[0] + x[1] > X, pairs))\n\n# sort the pairs by the first entry in descending order\npairs.sort(key = lambda x: x[0], reverse = True)\n\n# create a set of all used indices\nused_indices = set()\n\n# go through all pairs\nfor pair in pairs:\n    # if the first index is not used, add it to the used indices\n    if indices[prices.index(pair[0])] not in used_indices:\n        used_indices.add(indices[prices.index(pair[0])])\n    # if the second index is not used, add it to the used indices\n    if indices[prices.index(pair[1])] not in used_indices:\n        used_indices.add(indices[prices.index(pair[1])])\n\nprint(len(used_indices))\n", "\n\nn,x=map(int,input().split())\na=list(map(int,input().split()))\na.sort()\ncount=0\nfor i in range(n):\n    for j in range(i+1,n):\n        if a[i]+a[j]>x:\n            count=max(count,i+1)\n            break\nprint(count)\n", "n, X = map(int, input().split())\nprices = list(map(int, input().split()))\n\nprices.sort()\n\ncount = 0\n\nfor i in range(n):\n    for j in range(i+1, n):\n        if prices[i] + prices[j] > X:\n            count += 1\n\nprint(count)\n", "\n\n# # Solution 1:\n# import sys\n# raw_input = sys.stdin.readline\n\n# n, X = map(int, raw_input().split())\n# prices = map(int, raw_input().split())\n\nprices.sort()\n\ncount = 0\nfor i in range(n):\n    if prices[i] >= X:\n        break\n    for j in range(i + 1, n):\n        if prices[i] + prices[j] > X:\n            count += 1\n\nprint(n - count)\n\n# Solution 2:\nimport sys\nraw_input = sys.stdin.readline\n\nn, X = map(int, raw_input().split())\nprices = map(int, raw_input().split())\n\nprices.sort()\n\ncount = 0\nfor i in range(n):\n    if prices[i] >= X:\n        break\n    for j in range(i + 1, n):\n        if prices[i] + prices[j] > X:\n            count += 1\n\nprint(n - count)\n", "\n# Solution\n\nn, x = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\ncount = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        if a[i]+a[j] > x:\n            count = max(count, i+1)\n            break\nprint(count)\n", "#!/usr/bin/env python3\n\nn, x = map(int, input().split())\nprices = list(map(int, input().split()))\n\nprices.sort()\n\n# If the smallest two elements are less than x, we can't mark any thing\nif prices[0] + prices[1] < x:\n    print(0)\n    exit()\n\n# If the smallest two elements are greater than x, we can mark everything\nif prices[0] + prices[1] > x:\n    print(n)\n    exit()\n\n# Otherwise, we can mark everything except the smallest element\nprint(n - 1)\n", "\n\n#SOLUTION\n\nn, X = map(int, input().split())\nprices = list(map(int, input().split()))\n\n# sort the prices and keep track of the original index\nprices_with_indices = list(enumerate(prices))\nprices_with_indices.sort(key = lambda x: x[1])\n\n# create a list of all indices\nindices = [x[0] for x in prices_with_indices]\n\n# create a list of all prices\nprices = [x[1] for x in prices_with_indices]\n\n# create a list of all possible pairs of prices\npairs = [(prices[i], prices[j]) for i in range(len(prices)) for j in range(i+1, len(prices))]\n\n# filter out all pairs with sum less than X\npairs = list(filter(lambda x: x[0] + x[1] > X, pairs))\n\n# sort the pairs by the first entry in descending order\npairs.sort(key = lambda x: x[0], reverse = True)\n\n# create a set of all used indices\nused_indices = set()\n\n# go through all pairs\nfor pair in pairs:\n    # if the first index is not used, add it to the used indices\n    if indices[prices.index(pair[0])] not in used_indices:\n        used_indices.add(indices[prices.index(pair[0])])\n    # if the second index is not used, add it to the used indices\n    if indices[prices.index(pair[1])] not in used_indices:\n        used_indices.add(indices[prices.index(pair[1])])\n\nprint(len(used_indices))\n", "\n\n# SOLUTION\nn, X = map(int, input().split())\nprices = list(map(int, input().split()))\n\n# sort the prices and keep track of the original index\nprices_with_indices = list(enumerate(prices))\nprices_with_indices.sort(key = lambda x: x[1])\n\n# create a list of all indices\nindices = [x[0] for x in prices_with_indices]\n\n# create a list of all prices\nprices = [x[1] for x in prices_with_indices]\n\n# create a list of all possible pairs of prices \npairs = [(prices[i], prices[j]) for i in range(len(prices)) for j in range(i+1, len(prices))]\n\n# filter out all pairs with sum less than X\npairs = list(filter(lambda x: x[0] + x[1] > X, pairs))\n\n# sort the pairs by the first entry in descending order\npairs.sort(key = lambda x: x[0], reverse = True)\n\n# create a set of all used indices\nused_indices = set()\n\n# go through all pairs\nfor pair in pairs:\n    # if the first index is not used, add it to the used indices\n    if indices[prices.index(pair[0])] not in used_indices:\n        used_indices.add(indices[prices.index(pair[0])])\n    # if the second index is not used, add it to the used indices\n    if indices[prices.index(pair[1])] not in used_indices:\n        used_indices.add(indices[prices.index(pair[1])])\n\nprint(len(used_indices))\n", "\n\ndef main():\n    \"\"\"Find the maximum number of items that can be marked as part of the special offer.\"\"\"\n    n, x = map(int, input().split())\n    prices = list(map(int, input().split()))\n    prices.sort()\n    total = 0\n    count = 0\n    for i in prices:\n        if i + total > x:\n            break\n        total += i\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, x = list(map(int, sys.stdin.readline().split()))\n    prices = list(map(int, sys.stdin.readline().split()))\n\n    prices.sort()\n\n    if prices[-1] + prices[-2] <= x:\n        print(n)\n        return\n\n    if prices[0] + prices[1] > x:\n        print(0)\n        return\n\n    left = 0\n    right = n - 1\n\n    while left < right:\n        if prices[left] + prices[right] > x:\n            right -= 1\n        else:\n            left += 1\n\n    print(n - (right + 1))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, X = map(int, sys.stdin.readline().split())\n    prices = list(map(int, sys.stdin.readline().split()))\n\n    prices.sort()\n\n    if prices[-1] + prices[-2] <= X:\n        print(n)\n        return\n\n    if prices[0] + prices[1] > X:\n        print(0)\n        return\n\n    left = 0\n    right = n-1\n\n    while left < right:\n        if prices[left] + prices[right] > X:\n            right -= 1\n        else:\n            left += 1\n\n    print(n - (right + 1))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, X = list(map(int, sys.stdin.readline().split())) # n, X = [int(x) for x in input().split()]\n    prices = list(map(int, sys.stdin.readline().split())) # prices = [int(x) for x in input().split()]\n\n    prices.sort()\n\n    if prices[-1] + prices[-2] <= X:\n        print(n)\n        return\n\n    if prices[0] + prices[1] > X:\n        print(0)\n        return\n\n    left = 0\n    right = n-1\n\n    while left < right:\n        if prices[left] + prices[right] > X:\n            right -= 1\n        else:\n            left += 1\n\n    print(n - (right + 1))\n\nif __name__ == '__main__':\n    main()\n", "\n\nn, x = map(int, input().split())\nprices = list(map(int, input().split()))\n\nprices.sort()\n\n# If the smallest two elements are less than x, we can't mark anything\nif prices[0] + prices[1] < x:\n    print(0)\n    exit()\n\n# If the smallest two elements are greater than x, we can mark everything\nif prices[0] + prices[1] > x:\n    print(n)\n    exit()\n\n# Otherwise, we can mark everything except the smallest element\nprint(n - 1)\n", "\nn,x=map(int,input().split())\na=list(map(int,input().split()))\na.sort()\ncount=0\nfor i in range(n):\n    for j in range(i+1,n):\n        if a[i]+a[j]>x:\n            count=max(count,i+1)\n            break\nprint(count)\n", "\n\ndef main():\n    \"\"\"Find the maximum number of items that can be marked as part of the special offer.\"\"\"\n    pass\n\nif __name__ == '__main__':\n    main()\n", "\nprint(\"Hello World\")\n", "\n\nimport sys\nraw_input = sys.stdin.readline\n\nn, X = map(int, raw_input().split())\nprices = list(map(int, raw_input().split()))\n\n# Solution 1 - O(n^2)\n# prices.sort()\n\n# count = 0\n# for i in range(n):\n#     if prices[i] >= X:\n#         break\n#     for j in range(i + 1, n):\n#         if prices[i] + prices[j] > X:\n#             count += 1\n\n# print(n - count)\n\n# Solution 2 - O(n)\nimport sys\nraw_input = sys.stdin.readline\n\nn, X = map(int, raw_input().split())\nprices = list(map(int, raw_input().split()))\n\n# Solution 2 - O(n)\n# prices.sort()\n\n# count = 0\n# for i in range(n):\n#     if prices[i] >= X:\n#         break\n#     for j in range(i + 1, n):\n#         if prices[i] + prices[j] > X:\n#             count += 1\n\n# print(n - count)\n", "\nimport sys\nraw_input = sys.stdin.readline\n\nn, X = map(int, raw_input().split())\nprices = map(int, raw_input().split())\n\nprices.sort()\n\ncount = 0\nfor i in range(n):\n    if prices[i] >= X:\n        break\n    for j in range(i + 1, n):\n        if prices[i] + prices[j] > X:\n            count += 1\n\nprint(n - count)\n", "\ndef main():\n    \"\"\"find the maximum number of items that can be marked as part of the special offer.\"\"\"\n    n, x = map(int, input().split())\n    prices = list(map(int, input().split()))\n    prices.sort()\n    total = 0\n    count = 0\n    for i in prices:\n        if i + total > x:\n            break\n        total += i\n        count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\n# SOLUTION for the problem\nn, x = map(int, input().split())\nprices = list(map(int, input().split()))\nprices.sort()\n\nleft = 0\nright = n - 1\n\nresult = 0\nwhile left < right:\n    if prices[left] + prices[right] > x:\n        result += 1\n    right -= 1\n    if prices[left] + prices[right] > x:\n        result += 1\n    left += 1\n\nif left == right and prices[left] > x:\n    result += 1\n\nprint(result)\n", "\nn, X = map(int, input().split())\nprices = list(map(int, input().split()))\nprices.sort()\ncount = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        if prices[i] + prices[j] > X:\n            count += 1\n\nprint(count)\n", "\n\nn, X = map(int, input().split())\nprices = list(map(int, input().split()))\n\n# sort the prices and keep track of the original index\nprices_with_indices = list(enumerate(prices))\nprices_with_indices.sort(key = lambda x: x[1])\n\n# create a list of all indices\nindices = [x[0] for x in prices_with_indices]\n\n# create a list of all prices\nprices = [x[1] for x in prices_with_indices]\n\n# create a list of all possible pairs of prices \npairs = [(prices[i], prices[j]) for i in range(len(prices)) for j in range(i+1, len(prices))]\n\n# filter out all pairs with sum less than X\npairs = list(filter(lambda x: x[0] + x[1] > X, pairs))\n\n# sort the pairs by the first entry in descending order\npairs.sort(key = lambda x: x[0], reverse = True)\n\n# create a set of all used indices\nused_indices = set()\n\n# go through all pairs\nfor pair in pairs:\n    # if the first index is not used, add it to the used indices\n    if indices[prices.index(pair[0])] not in used_indices:\n        used_indices.add(indices[prices.index(pair[0])])\n    # if the second index is not used, add it to the used indices\n    if indices[prices.index(pair[1])] not in used_indices:\n        used_indices.add(indices[prices.index(pair[1])])\n\nprint(len(used_indices))\n", "\n# Solution 1:\nimport sys\nraw_input = sys.stdin.readline\n\nn, X = map(int, raw_input().split())\nprices = map(int, raw_input().split())\n\nprices.sort()\n\ncount = 0\nfor i in range(n):\n    if prices[i] >= X:\n        break\n    for j in range(i + 1, n):\n        if prices[i] + prices[j] > X:\n            count += 1\n\nprint(n - count)\n\n# Solution 2:\nimport sys\nraw_input = sys.stdin.readline\n\nn, X = map(int, raw_input().split())\nprices = map(int, raw_input().split())\n\nprices.sort()\n\ncount = 0\nfor i in range(n):\n    if prices[i] >= X:\n        break\n    for j in range(i + 1, n):\n        if prices[i] + prices[j] > X:\n            count += 1\n\nprint(n - count)\n"]