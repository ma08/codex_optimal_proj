2022-04-12 01:12:28.797167 num operations 2
2022-04-12 01:12:28.797194 size on input set 1
2022-04-12 01:12:33.028373 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nimport math\n\ndef main():\n    rounds = int(sys.stdin.readline())\n    sven_symbols = sys.stdin.readline().strip()\n    friends = int(sys.stdin.readline())\n    friends_symbols = []\n    for i in range(friends):\n        friends_symbols.append(sys.stdin.readline().strip())\n    actual_score = 0\n    largest_score = 0\n    for i in range(rounds):\n        rock = 0\n        paper = 0\n        scissors = 0\n        for j in range(friends):\n            if friends_symbols[j][i] == \"R\":\n                rock += 1\n            elif friends_symbols[j][i] == \"P\":\n                paper += 1\n            else:\n                scissors += 1\n        if sven_symbols[i] == \"R\":\n            actual_score += rock\n            largest_score += friends - max(rock, paper, scissors)\n        elif sven_symbols[i] == \"P\":\n            actual_score += paper\n            largest_score += friends - max(rock, paper, scissors)\n        else:\n            actual_score += scissors\n            largest_score += friends - max(rock, paper, scissors)\n    print(actual_score)\n    print(actual_score + largest_score)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nimport math\n\ndef main():\n    rounds = int(sys.stdin.readline())\n    sven_symbols = sys.stdin.readline().strip()\n    friends = int(sys.stdin.readline())\n    friends_symbols = []\n    for i in range(friends):\n        friends_symbols.append(sys.stdin.readline().strip())\n    actual_score = 0\n    largest_score = 0\n    for i in range(rounds):\n        rock = 0\n        paper = 0\n        scissors = 0\n        for j in range(friends):\n            if friends_symbols[j][i] == \"R\":\n                rock += 1\n            elif friends_symbols[j][i] == \"P\":\n                paper += 1\n            else:\n                scissors += 1\n        if sven_symbols[i] == \"R\":\n            actual_score += rock\n            largest_score += friends - max(rock, paper, scissors)\n        elif sven_symbols[i] == \"P\":\n            actual_score += paper\n            largest_score += friends - max(rock, paper, scissors)\n        else:\n            actual_score += scissors\n            largest_score += friends - max(rock, paper, scissors)\n    print(actual_score)\n    print(actual_score + largest_score)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649740349,
  "object": "edit"
}
2022-04-12 01:12:33.028724 fix spelling mistakes 2 ['\n\nimport sys\nimport math\n\ndef main():\n    rounds = int(sys.stdin.readline())\n    sven_symbols = sys.stdin.readline().strip()\n    friends = int(sys.stdin.readline())\n    friends_symbols = []\n    for i in range(friends):\n        friends_symbols.append(sys.stdin.readline().strip())\n    actual_score = 0\n    largest_score = 0\n    for i in range(rounds):\n        rock = 0\n        paper = 0\n        scissors = 0\n        for j in range(friends):\n            if friends_symbols[j][i] == "R":\n                rock += 1\n            elif friends_symbols[j][i] == "P":\n                paper += 1\n            else:\n                scissors += 1\n        if sven_symbols[i] == "R":\n            actual_score += rock\n            largest_score += friends - max(rock, paper, scissors)\n        elif sven_symbols[i] == "P":\n            actual_score += paper\n            largest_score += friends - max(rock, paper, scissors)\n        else:\n            actual_score += scissors\n            largest_score += friends - max(rock, paper, scissors)\n    print(actual_score)\n    print(actual_score + largest_score)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\nimport math\n\ndef main():\n    rounds = int(sys.stdin.readline())\n    sven_symbols = sys.stdin.readline().strip()\n    friends = int(sys.stdin.readline())\n    friends_symbols = []\n    for i in range(friends):\n        friends_symbols.append(sys.stdin.readline().strip())\n    actual_score = 0\n    largest_score = 0\n    for i in range(rounds):\n        rock = 0\n        paper = 0\n        scissors = 0\n        for j in range(friends):\n            if friends_symbols[j][i] == "R":\n                rock += 1\n            elif friends_symbols[j][i] == "P":\n                paper += 1\n            else:\n                scissors += 1\n        if sven_symbols[i] == "R":\n            actual_score += rock\n            largest_score += friends - max(rock, paper, scissors)\n        elif sven_symbols[i] == "P":\n            actual_score += paper\n            largest_score += friends - max(rock, paper, scissors)\n        else:\n            actual_score += scissors\n            largest_score += friends - max(rock, paper, scissors)\n    print(actual_score)\n    print(actual_score + largest_score)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 01:12:33.028780 size on output set 1
2022-04-12 01:12:33.028791 size on input set 1
2022-04-12 01:12:42.198492 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\n\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nimport math\n\ndef main():\n    rounds = int(sys.stdin.readline())\n    sven_symbols = sys.stdin.readline().strip().split()\n    friends = int(sys.stdin.readline())\n    friends_symbols = []\n    for i in range(friends):\n        friends_symbols.append(sys.stdin.readline().strip().split())\n    actual_score = 0\n    largest_score = 0\n    for i in range(rounds):\n        rock = 0\n        paper = 0\n        scissors = 0\n        for j in range(friends):\n            if friends_symbols[j][i] == \"R\\n\":\n                rock += 1\n            elif friends_symbols[j][i] == \"P\\n\":\n                paper += 1\n            else:\n                scissors += 1\n        if sven_symbols[i] == \"R\\n\":\n            actual_score += rock\n            largest_score += friends - max(rock, paper, scissors)\n        elif sven_symbols[i] == \"P\\n\":\n            actual_score += paper\n            largest_score += friends - max(rock, paper, scissors)\n        else:\n            actual_score += scissors\n            largest_score += friends - max(rock, paper, scissors)\n    print(actual_score)\n    print(actual_score + largest_score)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649740353,
  "object": "edit"
}
2022-04-12 01:12:42.198956 fix syntax errors 2 ['import sys\n\n\n\ndef main():\n    pass\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\nimport math\n\ndef main():\n    rounds = int(sys.stdin.readline())\n    sven_symbols = sys.stdin.readline().strip().split()\n    friends = int(sys.stdin.readline())\n    friends_symbols = []\n    for i in range(friends):\n        friends_symbols.append(sys.stdin.readline().strip().split())\n    actual_score = 0\n    largest_score = 0\n    for i in range(rounds):\n        rock = 0\n        paper = 0\n        scissors = 0\n        for j in range(friends):\n            if friends_symbols[j][i] == "R\\n":\n                rock += 1\n            elif friends_symbols[j][i] == "P\\n":\n                paper += 1\n            else:\n                scissors += 1\n        if sven_symbols[i] == "R\\n":\n            actual_score += rock\n            largest_score += friends - max(rock, paper, scissors)\n        elif sven_symbols[i] == "P\\n":\n            actual_score += paper\n            largest_score += friends - max(rock, paper, scissors)\n        else:\n            actual_score += scissors\n            largest_score += friends - max(rock, paper, scissors)\n    print(actual_score)\n    print(actual_score + largest_score)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 01:12:42.199025 size on output set 2
2022-04-12 01:12:42.199044 num operations 2
2022-04-12 01:12:42.199054 size on input set 1
2022-04-12 01:13:00.285604 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    rounds = int(sys.stdin.readline().strip())\n    Sven = sys.stdin.readline().strip()\n    friends = int(sys.stdin.readline().strip())\n\n    Sven_score = 0\n    Sven_max_score = 0\n    for i in range(friends):\n        friend = sys.stdin.readline().strip()\n        Sven_score += compare(Sven, friend)\n        Sven_max_score += max_compare(Sven, friend)\n    print(Sven_score)\n    print(Sven_max_score)\n\ndef compare(Sven, friend):\n    score = 0\n    for i in range(len(Sven)):\n        if Sven[i] == friend[i]:\n            score += 1\n        elif Sven[i] == \"R\" and friend[i] == \"S\":\n            score += 2\n        elif Sven[i] == \"S\" and friend[i] == \"P\":\n            score += 2\n        elif Sven[i] == \"P\" and friend[i] == \"R\":\n            score += 2\n    return score\n\ndef max_compare(Sven, friend):\n    score = 0\n    for i in range(len(Sven)):\n        if Sven[i] == friend[i]:\n            score += 1\n        elif Sven[i] == \"R\" and friend[i] == \"S\":\n            score += 2\n        elif Sven[i] == \"S\" and friend[i] == \"P\":\n            score += 2\n        elif Sven[i] == \"P\" and friend[i] == \"R\":\n            score += 2\n        elif Sven[i] == \"R\" and friend[i] == \"P\":\n            score += 0\n        elif Sven[i] == \"S\" and friend[i] == \"R\":\n            score += 0\n        elif Sven[i] == \"P\" and friend[i] == \"S\":\n            score += 0\n    return score\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    rounds = int(sys.stdin.readline().strip())\n    Sven = sys.stdin.readline().strip()\n    friends = int(sys.stdin.readline().strip())\n\n    Sven_score = 0\n    Sven_max_score = 0\n    for i in range(friends):\n        friend = sys.stdin.readline().strip()\n        Sven_score += compare(Sven, friend)\n        Sven_max_score += max_compare(Sven, friend)\n    print(Sven_score)\n    print(Sven_max_score)\n\ndef compare(Sven, friend):\n    score = 0\n    for i in range(len(Sven)):\n        if Sven[i] == friend[i]:\n            score += 1\n        elif Sven[i] == \"R\" and friend[i] == \"S\":\n            score += 2\n        elif Sven[i] == \"S\" and friend[i] == \"P\":\n            score += 2\n        elif Sven[i] == \"P\" and friend[i] == \"R\":\n            score += 2\n    return score\n\ndef max_compare(Sven, friend):\n    score = 0\n    for i in range(len(Sven)):\n        if Sven[i] == friend[i]:\n            score += 1\n        elif Sven[i] == \"R\" and friend[i] == \"S\":\n            score += 2\n        elif Sven[i] == \"S\" and friend[i] == \"P\":\n            score += 2\n        elif Sven[i] == \"P\" and friend[i] == \"R\":\n            score += 2\n        elif Sven[i] == \"R\" and friend[i] == \"P\":\n            score += 0\n        elif Sven[i] == \"S\" and friend[i] == \"R\":\n            score += 0\n        elif Sven[i] == \"P\" and friend[i] == \"S\":\n            score += 0\n    return score\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649740362,
  "object": "edit"
}
2022-04-12 01:13:00.285919 fix spelling mistakes 2 ['\n\nimport sys\n\ndef main():\n    rounds = int(sys.stdin.readline().strip())\n    Sven = sys.stdin.readline().strip()\n    friends = int(sys.stdin.readline().strip())\n\n    Sven_score = 0\n    Sven_max_score = 0\n    for i in range(friends):\n        friend = sys.stdin.readline().strip()\n        Sven_score += compare(Sven, friend)\n        Sven_max_score += max_compare(Sven, friend)\n    print(Sven_score)\n    print(Sven_max_score)\n\ndef compare(Sven, friend):\n    score = 0\n    for i in range(len(Sven)):\n        if Sven[i] == friend[i]:\n            score += 1\n        elif Sven[i] == "R" and friend[i] == "S":\n            score += 2\n        elif Sven[i] == "S" and friend[i] == "P":\n            score += 2\n        elif Sven[i] == "P" and friend[i] == "R":\n            score += 2\n    return score\n\ndef max_compare(Sven, friend):\n    score = 0\n    for i in range(len(Sven)):\n        if Sven[i] == friend[i]:\n            score += 1\n        elif Sven[i] == "R" and friend[i] == "S":\n            score += 2\n        elif Sven[i] == "S" and friend[i] == "P":\n            score += 2\n        elif Sven[i] == "P" and friend[i] == "R":\n            score += 2\n        elif Sven[i] == "R" and friend[i] == "P":\n            score += 0\n        elif Sven[i] == "S" and friend[i] == "R":\n            score += 0\n        elif Sven[i] == "P" and friend[i] == "S":\n            score += 0\n    return score\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef main():\n    rounds = int(sys.stdin.readline().strip())\n    Sven = sys.stdin.readline().strip()\n    friends = int(sys.stdin.readline().strip())\n\n    Sven_score = 0\n    Sven_max_score = 0\n    for i in range(friends):\n        friend = sys.stdin.readline().strip()\n        Sven_score += compare(Sven, friend)\n        Sven_max_score += max_compare(Sven, friend)\n    print(Sven_score)\n    print(Sven_max_score)\n\ndef compare(Sven, friend):\n    score = 0\n    for i in range(len(Sven)):\n        if Sven[i] == friend[i]:\n            score += 1\n        elif Sven[i] == "R" and friend[i] == "S":\n            score += 2\n        elif Sven[i] == "S" and friend[i] == "P":\n            score += 2\n        elif Sven[i] == "P" and friend[i] == "R":\n            score += 2\n    return score\n\ndef max_compare(Sven, friend):\n    score = 0\n    for i in range(len(Sven)):\n        if Sven[i] == friend[i]:\n            score += 1\n        elif Sven[i] == "R" and friend[i] == "S":\n            score += 2\n        elif Sven[i] == "S" and friend[i] == "P":\n            score += 2\n        elif Sven[i] == "P" and friend[i] == "R":\n            score += 2\n        elif Sven[i] == "R" and friend[i] == "P":\n            score += 0\n        elif Sven[i] == "S" and friend[i] == "R":\n            score += 0\n        elif Sven[i] == "P" and friend[i] == "S":\n            score += 0\n    return score\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-12 01:13:00.285980 size on output set 1
2022-04-12 01:13:00.285990 size on input set 1
2022-04-12 01:13:17.168817 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    rounds = int(sys.stdin.readline().strip())\n    sven = sys.stdin.readline().strip()\n    friends = int(sys.stdin.readline().strip())\n\n    sven_score = 0\n    sven_max_score = 0\n    for i in range(friends):\n        friend = sys.stdin.readline().strip()\n        sven_score += compare(sven, friend)\n        sven_max_score += max_compare(sven, friend)\n    print(sven_score)\n    print(sven_max_score)\n\ndef compare(sven, friend):\n    score = 0\n    for i in range(len(sven)):\n        if sven[i] == friend[i]:\n            score += 1\n        elif sven[i] == \"R\" and friend[i] == \"S\":\n            score += 2\n        elif sven[i] == \"S\" and friend[i] == \"P\":\n            score += 2\n        elif sven[i] == \"P\" and friend[i] == \"R\":\n            score += 2\n    return score\n\ndef max_compare(sven, friend):\n    score = 0\n    for i in range(len(sven)):\n        if sven[i] == friend[i]:\n            score += 1\n        elif sven[i] == \"R\" and friend[i] == \"S\":\n            score += 2\n        elif sven[i] == \"S\" and friend[i] == \"P\":\n            score += 2\n        elif sven[i] == \"P\" and friend[i] == \"R\":\n            score += 2\n        elif sven[i] == \"R\" and friend[i] == \"P\":\n            score += 0\n        elif sven[i] == \"S\" and friend[i] == \"R\":\n            score += 0\n        elif sven[i] == \"P\" and friend[i] == \"S\":\n            score += 0\n    return score\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    rounds = int(sys.stdin.readline().strip())\n    Sven = sys.stdin.readline().strip()\n    friends = int(sys.stdin.readline().strip())\n\n    Sven_score = 0\n    Sven_max_score = 0\n    for i in range(friends):\n        friend = sys.stdin.readline().strip()\n        Sven_score += compare(Sven, friend)\n        Sven_max_score += max_compare(Sven, friend)\n    print(Sven_score)\n    print(Sven_max_score)\n\ndef compare(Sven, friend):\n    score = 0\n    for i in range(len(Sven)):\n        if Sven[i] == friend[i]:\n            score += 1\n        elif Sven[i] == \"R\" and friend[i] == \"S\":\n            score += 2\n        elif Sven[i] == \"S\" and friend[i] == \"P\":\n            score += 2\n        elif Sven[i] == \"P\" and friend[i] == \"R\":\n            score += 2\n    return score\n\ndef max_compare(Sven, friend):\n    score = 0\n    for i in range(len(Sven)):\n        if Sven[i] == friend[i]:\n            score += 1\n        elif Sven[i] == \"R\" and friend[i] == \"S\":\n            score += 2\n        elif Sven[i] == \"S\" and friend[i] == \"P\":\n            score += 2\n        elif Sven[i] == \"P\" and friend[i] == \"R\":\n            score += 2\n        elif Sven[i] == \"R\" and friend[i] == \"P\":\n            score += 0\n        elif Sven[i] == \"S\" and friend[i] == \"R\":\n            score += 0\n        elif Sven[i] == \"P\" and friend[i] == \"S\":\n            score += 0\n    return score\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649740380,
  "object": "edit"
}
2022-04-12 01:13:17.168999 fix syntax errors 2 ['\n\nimport sys\n\ndef main():\n    rounds = int(sys.stdin.readline().strip())\n    sven = sys.stdin.readline().strip()\n    friends = int(sys.stdin.readline().strip())\n\n    sven_score = 0\n    sven_max_score = 0\n    for i in range(friends):\n        friend = sys.stdin.readline().strip()\n        sven_score += compare(sven, friend)\n        sven_max_score += max_compare(sven, friend)\n    print(sven_score)\n    print(sven_max_score)\n\ndef compare(sven, friend):\n    score = 0\n    for i in range(len(sven)):\n        if sven[i] == friend[i]:\n            score += 1\n        elif sven[i] == "R" and friend[i] == "S":\n            score += 2\n        elif sven[i] == "S" and friend[i] == "P":\n            score += 2\n        elif sven[i] == "P" and friend[i] == "R":\n            score += 2\n    return score\n\ndef max_compare(sven, friend):\n    score = 0\n    for i in range(len(sven)):\n        if sven[i] == friend[i]:\n            score += 1\n        elif sven[i] == "R" and friend[i] == "S":\n            score += 2\n        elif sven[i] == "S" and friend[i] == "P":\n            score += 2\n        elif sven[i] == "P" and friend[i] == "R":\n            score += 2\n        elif sven[i] == "R" and friend[i] == "P":\n            score += 0\n        elif sven[i] == "S" and friend[i] == "R":\n            score += 0\n        elif sven[i] == "P" and friend[i] == "S":\n            score += 0\n    return score\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef main():\n    rounds = int(sys.stdin.readline().strip())\n    Sven = sys.stdin.readline().strip()\n    friends = int(sys.stdin.readline().strip())\n\n    Sven_score = 0\n    Sven_max_score = 0\n    for i in range(friends):\n        friend = sys.stdin.readline().strip()\n        Sven_score += compare(Sven, friend)\n        Sven_max_score += max_compare(Sven, friend)\n    print(Sven_score)\n    print(Sven_max_score)\n\ndef compare(Sven, friend):\n    score = 0\n    for i in range(len(Sven)):\n        if Sven[i] == friend[i]:\n            score += 1\n        elif Sven[i] == "R" and friend[i] == "S":\n            score += 2\n        elif Sven[i] == "S" and friend[i] == "P":\n            score += 2\n        elif Sven[i] == "P" and friend[i] == "R":\n            score += 2\n    return score\n\ndef max_compare(Sven, friend):\n    score = 0\n    for i in range(len(Sven)):\n        if Sven[i] == friend[i]:\n            score += 1\n        elif Sven[i] == "R" and friend[i] == "S":\n            score += 2\n        elif Sven[i] == "S" and friend[i] == "P":\n            score += 2\n        elif Sven[i] == "P" and friend[i] == "R":\n            score += 2\n        elif Sven[i] == "R" and friend[i] == "P":\n            score += 0\n        elif Sven[i] == "S" and friend[i] == "R":\n            score += 0\n        elif Sven[i] == "P" and friend[i] == "S":\n            score += 0\n    return score\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-12 01:13:17.169037 size on output set 2
2022-04-12 01:13:17.169055 num operations 2
2022-04-12 01:13:17.169061 size on input set 1
2022-04-12 01:13:22.386724 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nimport math\n\n# Grab the pellets as fast as you can!\n\ndef get_score(sven, friends, rounds):\n    if len(sven) != rounds:\n        print('Error: Sven and friends have different numbers of rounds')\n        return -1\n    else:\n        rounds = len(sven)\n    score = 0\n    for i in range(len(sven)):\n        if sven[i] == 'S':\n            if friends[i] == 'P':\n                score += 1\n            elif friends[i] == 'R':\n                score += 2\n        elif sven[i] == 'P':\n            if friends[i] == 'R':\n                score += 1\n            elif friends[i] == 'S':\n                score += 2\n        elif sven[i] == 'R':\n            if friends[i] == 'S':\n                score += 1\n            elif friends[i] == 'P':\n                score += 2\n    return score\n\ndef get_max_score(sven, friends):\n    max_score = 0\n    for i in range(len(sven)):\n        if sven[i] == 'S':\n            if friends[i] == 'R':\n                max_score += 2\n            elif friends[i] == 'P':\n                max_score += 1\n        elif sven[i] == 'P':\n            if friends[i] == 'S':\n                max_score += 2\n            elif friends[i] == 'R':\n                max_score += 1\n        elif sven[i] == 'R':\n            if friends[i] == 'P':\n                max_score += 2\n            elif friends[i] == 'S':\n                max_score += 1\n    return max_score\n\ndef main():\n    rounds = int(input())\n    sven = str(input())\n    friends_num = int(input())\n    friends = []\n    for i in range(friends_num):\n        friends.append(str(input()))\n    score = get_score(sven, friends, rounds)\n    max_score = get_max_score(sven, friends)\n    print(score)\n    print(max_score)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nimport math\n\n# Grab the pellets as fast as you can! \n\ndef get_score(sven, friends):\n    #if len(sven) != len(friends[0]):\n    #    print('Error: Sven and friends have different numbers of rounds')\n    #    return -1\n    #else:\n    #    rounds = len(sven)\n    score = 0\n    for i in range(len(sven)):\n        if sven[i] == 'S':\n            if friends[i] == 'P':\n                score += 1\n            elif friends[i] == 'R':\n                score += 2\n        elif sven[i] == 'P':\n            if friends[i] == 'R':\n                score += 1\n            elif friends[i] == 'S':\n                score += 2\n        elif sven[i] == 'R':\n            if friends[i] == 'S':\n                score += 1\n            elif friends[i] == 'P':\n                score += 2\n    return score\n\ndef get_max_score(sven, friends):\n    max_score = 0\n    for i in range(len(sven)):\n        if sven[i] == 'S':\n            if friends[i] == 'R':\n                max_score += 2\n            elif friends[i] == 'P':\n                max_score += 1\n        elif sven[i] == 'P':\n            if friends[i] == 'S':\n                max_score += 2\n            elif friends[i] == 'R':\n                max_score += 1\n        elif sven[i] == 'R':\n            if friends[i] == 'P':\n                max_score += 2\n            elif friends[i] == 'S':\n                max_score += 1\n    return max_score\n\ndef main():\n    rounds = int(input())\n    sven = str(input())\n    friends_num = int(input())\n    friends = []\n    for i in range(friends_num):\n        friends.append(str(input()))\n    score = get_score(sven, friends)\n    max_score = get_max_score(sven, friends)\n    print(score)\n    print(max_score)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649740397,
  "object": "edit"
}
2022-04-12 01:13:22.387030 fix spelling mistakes 2 ['\n\nimport sys\nimport math\n\n# Grab the pellets as fast as you can!\n\ndef get_score(sven, friends, rounds):\n    if len(sven) != rounds:\n        print(\'Error: Sven and friends have different numbers of rounds\')\n        return -1\n    else:\n        rounds = len(sven)\n    score = 0\n    for i in range(len(sven)):\n        if sven[i] == \'S\':\n            if friends[i] == \'P\':\n                score += 1\n            elif friends[i] == \'R\':\n                score += 2\n        elif sven[i] == \'P\':\n            if friends[i] == \'R\':\n                score += 1\n            elif friends[i] == \'S\':\n                score += 2\n        elif sven[i] == \'R\':\n            if friends[i] == \'S\':\n                score += 1\n            elif friends[i] == \'P\':\n                score += 2\n    return score\n\ndef get_max_score(sven, friends):\n    max_score = 0\n    for i in range(len(sven)):\n        if sven[i] == \'S\':\n            if friends[i] == \'R\':\n                max_score += 2\n            elif friends[i] == \'P\':\n                max_score += 1\n        elif sven[i] == \'P\':\n            if friends[i] == \'S\':\n                max_score += 2\n            elif friends[i] == \'R\':\n                max_score += 1\n        elif sven[i] == \'R\':\n            if friends[i] == \'P\':\n                max_score += 2\n            elif friends[i] == \'S\':\n                max_score += 1\n    return max_score\n\ndef main():\n    rounds = int(input())\n    sven = str(input())\n    friends_num = int(input())\n    friends = []\n    for i in range(friends_num):\n        friends.append(str(input()))\n    score = get_score(sven, friends, rounds)\n    max_score = get_max_score(sven, friends)\n    print(score)\n    print(max_score)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\nimport math\n\n# Grab the pellets as fast as you can! \n\ndef get_score(sven, friends):\n    #if len(sven) != len(friends[0]):\n    #    print(\'Error: Sven and friends have different numbers of rounds\')\n    #    return -1\n    #else:\n    #    rounds = len(sven)\n    score = 0\n    for i in range(len(sven)):\n        if sven[i] == \'S\':\n            if friends[i] == \'P\':\n                score += 1\n            elif friends[i] == \'R\':\n                score += 2\n        elif sven[i] == \'P\':\n            if friends[i] == \'R\':\n                score += 1\n            elif friends[i] == \'S\':\n                score += 2\n        elif sven[i] == \'R\':\n            if friends[i] == \'S\':\n                score += 1\n            elif friends[i] == \'P\':\n                score += 2\n    return score\n\ndef get_max_score(sven, friends):\n    max_score = 0\n    for i in range(len(sven)):\n        if sven[i] == \'S\':\n            if friends[i] == \'R\':\n                max_score += 2\n            elif friends[i] == \'P\':\n                max_score += 1\n        elif sven[i] == \'P\':\n            if friends[i] == \'S\':\n                max_score += 2\n            elif friends[i] == \'R\':\n                max_score += 1\n        elif sven[i] == \'R\':\n            if friends[i] == \'P\':\n                max_score += 2\n            elif friends[i] == \'S\':\n                max_score += 1\n    return max_score\n\ndef main():\n    rounds = int(input())\n    sven = str(input())\n    friends_num = int(input())\n    friends = []\n    for i in range(friends_num):\n        friends.append(str(input()))\n    score = get_score(sven, friends)\n    max_score = get_max_score(sven, friends)\n    print(score)\n    print(max_score)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 01:13:22.387060 size on output set 2
2022-04-12 01:13:22.387065 size on input set 2
2022-04-12 01:13:44.550781 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport math\n\n# Don't let the machines win. You are humanity's last hope...\n\nwidth = int(input())  # the number of cells on the X axis\nheight = int(input())  # the number of cells on the Y axis\ngrid = []\nfor i in range(height):\n    line = input()  # width characters, each either 0 or .\n    grid.append(line)\n\ndef get_neighbors(grid, x, y):\n    neighbors = []\n    if x > 0:\n        neighbors.append((x-1, y))\n    if x < len(grid[0]) - 1:\n        neighbors.append((x+1, y))\n    if y > 0:\n        neighbors.append((x, y-1))\n    if y < len(grid) - 1:\n        neighbors.append((x, y+1))\n    return neighbors\n\ndef main():\n    for y in range(len(grid)):\n        for x in range(len(grid[0])):\n            if grid[y][x] == '0':\n                print(x, y, end=' ')\n                neighbors = get_neighbors(grid, x, y)\n                for neighbor in neighbors:\n                    if grid[neighbor[1]][neighbor[0]] == '0':\n                        print(neighbor[0], neighbor[1], end=' ')\n                    else:\n                        print(-1, -1, end=' ')\n                print()\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nimport math\n\n# Don't let the machines win. You are humanity's last hope...\n\nwidth = int(input())  # the number of cells on the X axis\nheight = int(input())  # the number of cells on the Y axis\ngrid = []\nfor i in range(height):\n    line = str(input())  # width characters, each either 0 or .\n    grid.append(line)\n\n# Write an action using print\n# To debug: print(\"Debug messages...\", file=sys.stderr)\n\n# Three coordinates: a node, its right neighbor, its bottom neighbor\nfor i in range(height):\n    for j in range(width):\n        if grid[i][j] == '0':\n            print(str(j) + ' ' + str(i) + ' ', end='')\n            if j < width - 1:\n                for k in range(j + 1, width):\n                    if grid[i][k] == '0':\n                        print(str(k) + ' ' + str(i) + ' ', end='')\n                        break\n            else:\n                print('-1 -1 ', end='')\n            if i < height - 1:\n                for k in range(i + 1, height):\n                    if grid[k][j] == '0':\n                        print(str(j) + ' ' + str(k))\n                        break\n            else:\n                print('-1 -1')\n            break\n\n# Three coordinates: a node, its right neighbor, its bottom neighbor\n# print('0 0 1 0 0 1')\n# print('0 0 0 0 1 0')\n# print('0 0 0 0 0 0')\n# print('0 0 0 0 0 0')\n# print('0 0 0 0 0 0')\n# print('0 0 0 0 0 0')\n"
    }
  ],
  "created": 1649740402,
  "object": "edit"
}
2022-04-12 01:13:44.551022 fix syntax errors 2 ['\nimport sys\nimport math\n\n# Don\'t let the machines win. You are humanity\'s last hope...\n\nwidth = int(input())  # the number of cells on the X axis\nheight = int(input())  # the number of cells on the Y axis\ngrid = []\nfor i in range(height):\n    line = input()  # width characters, each either 0 or .\n    grid.append(line)\n\ndef get_neighbors(grid, x, y):\n    neighbors = []\n    if x > 0:\n        neighbors.append((x-1, y))\n    if x < len(grid[0]) - 1:\n        neighbors.append((x+1, y))\n    if y > 0:\n        neighbors.append((x, y-1))\n    if y < len(grid) - 1:\n        neighbors.append((x, y+1))\n    return neighbors\n\ndef main():\n    for y in range(len(grid)):\n        for x in range(len(grid[0])):\n            if grid[y][x] == \'0\':\n                print(x, y, end=\' \')\n                neighbors = get_neighbors(grid, x, y)\n                for neighbor in neighbors:\n                    if grid[neighbor[1]][neighbor[0]] == \'0\':\n                        print(neighbor[0], neighbor[1], end=\' \')\n                    else:\n                        print(-1, -1, end=\' \')\n                print()\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\nimport math\n\n# Don\'t let the machines win. You are humanity\'s last hope...\n\nwidth = int(input())  # the number of cells on the X axis\nheight = int(input())  # the number of cells on the Y axis\ngrid = []\nfor i in range(height):\n    line = str(input())  # width characters, each either 0 or .\n    grid.append(line)\n\n# Write an action using print\n# To debug: print("Debug messages...", file=sys.stderr)\n\n# Three coordinates: a node, its right neighbor, its bottom neighbor\nfor i in range(height):\n    for j in range(width):\n        if grid[i][j] == \'0\':\n            print(str(j) + \' \' + str(i) + \' \', end=\'\')\n            if j < width - 1:\n                for k in range(j + 1, width):\n                    if grid[i][k] == \'0\':\n                        print(str(k) + \' \' + str(i) + \' \', end=\'\')\n                        break\n            else:\n                print(\'-1 -1 \', end=\'\')\n            if i < height - 1:\n                for k in range(i + 1, height):\n                    if grid[k][j] == \'0\':\n                        print(str(j) + \' \' + str(k))\n                        break\n            else:\n                print(\'-1 -1\')\n            break\n\n# Three coordinates: a node, its right neighbor, its bottom neighbor\n# print(\'0 0 1 0 0 1\')\n# print(\'0 0 0 0 1 0\')\n# print(\'0 0 0 0 0 0\')\n# print(\'0 0 0 0 0 0\')\n# print(\'0 0 0 0 0 0\')\n# print(\'0 0 0 0 0 0\')\n']
2022-04-12 01:13:50.728346 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport math\n\n# Grab the pellets as fast as you can!\n\ndef get_score(sven, friends):\n    if len(sven) != len(friends[0]):\n        print('Error: Sven and friends have different numbers of rounds')\n        return -1\n    else:\n        rounds = len(sven)\n    score = 0\n    for i in range(rounds):\n        if sven[i] == 'S':\n            if friends[i] == 'P':\n                score += 1\n            elif friends[i] == 'R':\n                score += 2\n        elif sven[i] == 'P':\n            if friends[i] == 'R':\n                score += 1\n            elif friends[i] == 'S':\n                score += 2\n        elif sven[i] == 'R':\n            if friends[i] == 'S':\n                score += 1\n            elif friends[i] == 'P':\n                score += 2\n    return score\n\ndef get_max_score(sven, friends):\n    max_score = 0\n    for i in range(rounds):\n        if sven[i] == 'S':\n            if friends[i] == 'R':\n                max_score += 2\n            elif friends[i] == 'P':\n                max_score += 1\n        elif sven[i] == 'P':\n            if friends[i] == 'S':\n                max_score += 2\n            elif friends[i] == 'R':\n                max_score += 1\n        elif sven[i] == 'R':\n            if friends[i] == 'P':\n                max_score += 2\n            elif friends[i] == 'S':\n                max_score += 1\n    return max_score\n\ndef main():\n    rounds = int(input())\n    sven = str(input())\n    friends_num = int(input())\n    friends = []\n    for i in range(friends_num):\n        friends.append(str(input()))\n    score = get_score(sven, friends)\n    max_score = get_max_score(sven, friends)\n    print(score)\n    print(max_score)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nimport math\n\n# Grab the pellets as fast as you can! \n\ndef get_score(sven, friends):\n    if len(sven) != len(friends[0]):\n        print('Error: Sven and friends have different numbers of rounds')\n        return -1\n    else:\n        rounds = len(sven)\n    score = 0\n    for i in range(len(sven)):\n        if sven[i] == 'S':\n            if friends[i] == 'P':\n                score += 1\n            elif friends[i] == 'R':\n                score += 2\n        elif sven[i] == 'P':\n            if friends[i] == 'R':\n                score += 1\n            elif friends[i] == 'S':\n                score += 2\n        elif sven[i] == 'R':\n            if friends[i] == 'S':\n                score += 1\n            elif friends[i] == 'P':\n                score += 2\n    return score\n\ndef get_max_score(sven, friends):\n    max_score = 0\n    for i in range(len(sven)):\n        if sven[i] == 'S':\n            if friends[i] == 'R':\n                max_score += 2\n            elif friends[i] == 'P':\n                max_score += 1\n        elif sven[i] == 'P':\n            if friends[i] == 'S':\n                max_score += 2\n            elif friends[i] == 'R':\n                max_score += 1\n        elif sven[i] == 'R':\n            if friends[i] == 'P':\n                max_score += 2\n            elif friends[i] == 'S':\n                max_score += 1\n    return max_score\n\ndef main():\n    rounds = int(input())\n    sven = str(input())\n    friends_num = int(input())\n    friends = []\n    for i in range(friends_num):\n        friends.append(str(input()))\n    score = get_score(sven, friends)\n    max_score = get_max_score(sven, friends)\n    print(score)\n    print(max_score)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649740424,
  "object": "edit"
}
2022-04-12 01:13:50.728545 fix syntax errors 2 ['\nimport sys\nimport math\n\n# Grab the pellets as fast as you can!\n\ndef get_score(sven, friends):\n    if len(sven) != len(friends[0]):\n        print(\'Error: Sven and friends have different numbers of rounds\')\n        return -1\n    else:\n        rounds = len(sven)\n    score = 0\n    for i in range(rounds):\n        if sven[i] == \'S\':\n            if friends[i] == \'P\':\n                score += 1\n            elif friends[i] == \'R\':\n                score += 2\n        elif sven[i] == \'P\':\n            if friends[i] == \'R\':\n                score += 1\n            elif friends[i] == \'S\':\n                score += 2\n        elif sven[i] == \'R\':\n            if friends[i] == \'S\':\n                score += 1\n            elif friends[i] == \'P\':\n                score += 2\n    return score\n\ndef get_max_score(sven, friends):\n    max_score = 0\n    for i in range(rounds):\n        if sven[i] == \'S\':\n            if friends[i] == \'R\':\n                max_score += 2\n            elif friends[i] == \'P\':\n                max_score += 1\n        elif sven[i] == \'P\':\n            if friends[i] == \'S\':\n                max_score += 2\n            elif friends[i] == \'R\':\n                max_score += 1\n        elif sven[i] == \'R\':\n            if friends[i] == \'P\':\n                max_score += 2\n            elif friends[i] == \'S\':\n                max_score += 1\n    return max_score\n\ndef main():\n    rounds = int(input())\n    sven = str(input())\n    friends_num = int(input())\n    friends = []\n    for i in range(friends_num):\n        friends.append(str(input()))\n    score = get_score(sven, friends)\n    max_score = get_max_score(sven, friends)\n    print(score)\n    print(max_score)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\nimport math\n\n# Grab the pellets as fast as you can! \n\ndef get_score(sven, friends):\n    if len(sven) != len(friends[0]):\n        print(\'Error: Sven and friends have different numbers of rounds\')\n        return -1\n    else:\n        rounds = len(sven)\n    score = 0\n    for i in range(len(sven)):\n        if sven[i] == \'S\':\n            if friends[i] == \'P\':\n                score += 1\n            elif friends[i] == \'R\':\n                score += 2\n        elif sven[i] == \'P\':\n            if friends[i] == \'R\':\n                score += 1\n            elif friends[i] == \'S\':\n                score += 2\n        elif sven[i] == \'R\':\n            if friends[i] == \'S\':\n                score += 1\n            elif friends[i] == \'P\':\n                score += 2\n    return score\n\ndef get_max_score(sven, friends):\n    max_score = 0\n    for i in range(len(sven)):\n        if sven[i] == \'S\':\n            if friends[i] == \'R\':\n                max_score += 2\n            elif friends[i] == \'P\':\n                max_score += 1\n        elif sven[i] == \'P\':\n            if friends[i] == \'S\':\n                max_score += 2\n            elif friends[i] == \'R\':\n                max_score += 1\n        elif sven[i] == \'R\':\n            if friends[i] == \'P\':\n                max_score += 2\n            elif friends[i] == \'S\':\n                max_score += 1\n    return max_score\n\ndef main():\n    rounds = int(input())\n    sven = str(input())\n    friends_num = int(input())\n    friends = []\n    for i in range(friends_num):\n        friends.append(str(input()))\n    score = get_score(sven, friends)\n    max_score = get_max_score(sven, friends)\n    print(score)\n    print(max_score)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 01:13:50.728575 size on output set 4
2022-04-12 01:13:50.728584 num operations 2
2022-04-12 01:13:50.728589 size on input set 1
2022-04-12 01:13:57.498583 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    r = int(sys.stdin.readline().strip())\n    svens = sys.stdin.readline().strip()\n    n = int(sys.stdin.readline().strip())\n    friends = []\n    for i in range(n):\n        friends.append(sys.stdin.readline().strip())\n\n    # Actual score\n    score = 0\n    for i in range(r):\n        for friend in friends:\n            if svens[i] == 'R':\n                if friend[i] == 'S':\n                    score += 2\n                elif friend[i] == 'P':\n                    score += 1\n            elif svens[i] == 'S':\n                if friend[i] == 'P':\n                    score += 2\n                elif friend[i] == 'R':\n                    score += 1\n            elif svens[i] == 'P':\n                if friend[i] == 'R':\n                    score += 2\n                elif friend[i] == 'S':\n                    score += 1\n    print(score)\n\n    # Max score\n    score = 0\n    for i in range(r):\n        for friend in friends:\n            if svens[i] == 'R':\n                if friend[i] == 'S':\n                    score += 2\n            elif svens[i] == 'S':\n                if friend[i] == 'P':\n                    score += 2\n            elif svens[i] == 'P':\n                if friend[i] == 'R':\n                    score += 2\n    score += r\n    print(score)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    r = int(sys.stdin.readline().strip())\n    svens = sys.stdin.readline().strip()\n    n = int(sys.stdin.readline().strip())\n    friends = []\n    for i in range(n):\n        friends.append(sys.stdin.readline().strip())\n\n    # Actual score\n    score = 0\n    for i in range(r):\n        for friend in friends:\n            if svens[i] == 'R':\n                if friend[i] == 'S':\n                    score += 2\n                elif friend[i] == 'P':\n                    score += 1\n            elif svens[i] == 'S':\n                if friend[i] == 'P':\n                    score += 2\n                elif friend[i] == 'R':\n                    score += 1\n            elif svens[i] == 'P':\n                if friend[i] == 'R':\n                    score += 2\n                elif friend[i] == 'S':\n                    score += 1\n    print(score)\n\n    # Max score\n    score = 0\n    for i in range(r):\n        for friend in friends:\n            if svens[i] == 'R':\n                if friend[i] == 'S':\n                    score += 2\n            elif svens[i] == 'S':\n                if friend[i] == 'P':\n                    score += 2\n            elif svens[i] == 'P':\n                if friend[i] == 'R':\n                    score += 2\n    score += r\n    print(score)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649740430,
  "object": "edit"
}
2022-04-12 01:13:57.499135 fix spelling mistakes 2 ['\n\nimport sys\n\ndef main():\n    r = int(sys.stdin.readline().strip())\n    svens = sys.stdin.readline().strip()\n    n = int(sys.stdin.readline().strip())\n    friends = []\n    for i in range(n):\n        friends.append(sys.stdin.readline().strip())\n\n    # Actual score\n    score = 0\n    for i in range(r):\n        for friend in friends:\n            if svens[i] == \'R\':\n                if friend[i] == \'S\':\n                    score += 2\n                elif friend[i] == \'P\':\n                    score += 1\n            elif svens[i] == \'S\':\n                if friend[i] == \'P\':\n                    score += 2\n                elif friend[i] == \'R\':\n                    score += 1\n            elif svens[i] == \'P\':\n                if friend[i] == \'R\':\n                    score += 2\n                elif friend[i] == \'S\':\n                    score += 1\n    print(score)\n\n    # Max score\n    score = 0\n    for i in range(r):\n        for friend in friends:\n            if svens[i] == \'R\':\n                if friend[i] == \'S\':\n                    score += 2\n            elif svens[i] == \'S\':\n                if friend[i] == \'P\':\n                    score += 2\n            elif svens[i] == \'P\':\n                if friend[i] == \'R\':\n                    score += 2\n    score += r\n    print(score)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    r = int(sys.stdin.readline().strip())\n    svens = sys.stdin.readline().strip()\n    n = int(sys.stdin.readline().strip())\n    friends = []\n    for i in range(n):\n        friends.append(sys.stdin.readline().strip())\n\n    # Actual score\n    score = 0\n    for i in range(r):\n        for friend in friends:\n            if svens[i] == \'R\':\n                if friend[i] == \'S\':\n                    score += 2\n                elif friend[i] == \'P\':\n                    score += 1\n            elif svens[i] == \'S\':\n                if friend[i] == \'P\':\n                    score += 2\n                elif friend[i] == \'R\':\n                    score += 1\n            elif svens[i] == \'P\':\n                if friend[i] == \'R\':\n                    score += 2\n                elif friend[i] == \'S\':\n                    score += 1\n    print(score)\n\n    # Max score\n    score = 0\n    for i in range(r):\n        for friend in friends:\n            if svens[i] == \'R\':\n                if friend[i] == \'S\':\n                    score += 2\n            elif svens[i] == \'S\':\n                if friend[i] == \'P\':\n                    score += 2\n            elif svens[i] == \'P\':\n                if friend[i] == \'R\':\n                    score += 2\n    score += r\n    print(score)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 01:13:57.499299 size on output set 1
2022-04-12 01:13:57.499325 size on input set 1
2022-04-12 01:14:09.926713 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    r = int(sys.stdin.readline().strip())\n    svens = sys.stdin.readline().strip()\n    n = int(sys.stdin.readline().strip())\n    friends = []\n    for i in range(n):\n        friends.append(sys.stdin.readline().strip())\n\n    # Actual score\n    score = 0\n    for i in range(r):\n        for friend in friends:\n            if svens[i] == 'R':\n                if friend[i] == 'S':\n                    score += 2\n                elif friend[i] == 'P':\n                    score += 1\n            elif svens[i] == 'S':\n                if friend[i] == 'P':\n                    score += 2\n                elif friend[i] == 'R':\n                    score += 1\n            elif svens[i] == 'P':\n                if friend[i] == 'R':\n                    score += 2\n                elif friend[i] == 'S':\n                    score += 1\n    print(score, end=\" \")\n\n    # Max score\n    score = 0\n    for i in range(r):\n        for friend in friends:\n            if svens[i] == 'R':\n                if friend[i] == 'S':\n                    score += 2\n            elif svens[i] == 'S':\n                if friend[i] == 'P':\n                    score += 2\n            elif svens[i] == 'P':\n                if friend[i] == 'R':\n                    score += 2\n    score += r\n    print(score, end=\" \")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    r = int(sys.stdin.readline().strip())\n    svens = sys.stdin.readline().strip()\n    n = int(sys.stdin.readline().strip())\n    friends = []\n    for i in range(n):\n        friends.append(sys.stdin.readline().strip())\n\n    # Actual score\n    # score = 0\n    # for i in range(r):\n    #     for friend in friends:\n    #         if svens[i] == 'R':\n    #             if friend[i] == 'S':\n    #                 score += 2\n    #             elif friend[i] == 'P':\n    #                 score += 1\n    #         elif svens[i] == 'S':\n    #             if friend[i] == 'P':\n    #                 score += 2\n    #             elif friend[i] == 'R':\n    #                 score += 1\n    #         elif svens[i] == 'P':\n    #             if friend[i] == 'R':\n    #                 score += 2\n    #             elif friend[i] == 'S':\n    #                 score += 1\n    # print(score)\n\n    # Max score\n    score = 0\n    for friend in friends:\n        for i in range(r):\n            if svens[i] == 'R' and friend[i] == 'S':\n                score += 2\n            elif svens[i] == 'S' and friend[i] == 'P':\n                score += 2\n            elif svens[i] == 'P' and friend[i] == 'R':\n                score += 2\n    score += r\n    print(score)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649740437,
  "object": "edit"
}
2022-04-12 01:14:09.927027 fix syntax errors 2 ['\n\nimport sys\n\ndef main():\n    r = int(sys.stdin.readline().strip())\n    svens = sys.stdin.readline().strip()\n    n = int(sys.stdin.readline().strip())\n    friends = []\n    for i in range(n):\n        friends.append(sys.stdin.readline().strip())\n\n    # Actual score\n    score = 0\n    for i in range(r):\n        for friend in friends:\n            if svens[i] == \'R\':\n                if friend[i] == \'S\':\n                    score += 2\n                elif friend[i] == \'P\':\n                    score += 1\n            elif svens[i] == \'S\':\n                if friend[i] == \'P\':\n                    score += 2\n                elif friend[i] == \'R\':\n                    score += 1\n            elif svens[i] == \'P\':\n                if friend[i] == \'R\':\n                    score += 2\n                elif friend[i] == \'S\':\n                    score += 1\n    print(score, end=" ")\n\n    # Max score\n    score = 0\n    for i in range(r):\n        for friend in friends:\n            if svens[i] == \'R\':\n                if friend[i] == \'S\':\n                    score += 2\n            elif svens[i] == \'S\':\n                if friend[i] == \'P\':\n                    score += 2\n            elif svens[i] == \'P\':\n                if friend[i] == \'R\':\n                    score += 2\n    score += r\n    print(score, end=" ")\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    r = int(sys.stdin.readline().strip())\n    svens = sys.stdin.readline().strip()\n    n = int(sys.stdin.readline().strip())\n    friends = []\n    for i in range(n):\n        friends.append(sys.stdin.readline().strip())\n\n    # Actual score\n    # score = 0\n    # for i in range(r):\n    #     for friend in friends:\n    #         if svens[i] == \'R\':\n    #             if friend[i] == \'S\':\n    #                 score += 2\n    #             elif friend[i] == \'P\':\n    #                 score += 1\n    #         elif svens[i] == \'S\':\n    #             if friend[i] == \'P\':\n    #                 score += 2\n    #             elif friend[i] == \'R\':\n    #                 score += 1\n    #         elif svens[i] == \'P\':\n    #             if friend[i] == \'R\':\n    #                 score += 2\n    #             elif friend[i] == \'S\':\n    #                 score += 1\n    # print(score)\n\n    # Max score\n    score = 0\n    for friend in friends:\n        for i in range(r):\n            if svens[i] == \'R\' and friend[i] == \'S\':\n                score += 2\n            elif svens[i] == \'S\' and friend[i] == \'P\':\n                score += 2\n            elif svens[i] == \'P\' and friend[i] == \'R\':\n                score += 2\n    score += r\n    print(score)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 01:14:09.927089 size on output set 2
2022-04-12 01:14:09.927101 num operations 2
2022-04-12 01:14:09.927107 size on input set 1
2022-04-12 01:14:12.974208 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    rounds = int(input())\n    sven = input()\n    friends = int(input())\n    friends_symbols = [input() for i in range(friends)]\n    for i in range(friends):\n        friends_symbols.append(input()\n    actual_score = 0\n    max_score = 0\n    for i in range(rounds):\n        sven_symbol = sven[i]\n        friends_symbols_in_round = list(map(lambda x: x[i], friends_symbols))\n        win_count = friends_symbols_in_round.count(beat_symbol(sven_symbol))\n        tie_count = friends_symbols_in_round.count(sven_symbol)\n        actual_score += win_count * 2 + tie_count\n        max_score += win_count * 2 + (friends - win_count - tie_count)\n    print(actual_score)\n    print(max_score)\n\ndef beat_symbol(symbol):\n    if symbol == \"R\":\n        return \"P\"\n    elif symbol == \"P\":\n        return \"S\"\n    else:\n        return \"R\"\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    rounds = int(input())\n    sven_symbols = input()\n    friends = int(input())\n    friends_symbols = []\n    for i in range(friends):\n        friends_symbols.append(input())\n    actual_score = 0\n    max_score = 0\n    for i in range(rounds):\n        sven_symbol = sven_symbols[i]\n        friends_symbols_in_round = list(map(lambda x: x[i], friends_symbols))\n        win_count = friends_symbols_in_round.count(beat_symbol(sven_symbol))\n        tie_count = friends_symbols_in_round.count(sven_symbol)\n        actual_score += win_count * 2 + tie_count\n        max_score += win_count * 2 + (friends - win_count - tie_count)\n    print(actual_score)\n    print(max_score)\n\ndef beat_symbol(symbol):\n    if symbol == \"R\":\n        return \"P\"\n    elif symbol == \"P\":\n        return \"S\"\n    else:\n        return \"R\"\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649740450,
  "object": "edit"
}
2022-04-12 01:14:12.974425 fix spelling mistakes 2 ['\n\ndef main():\n    rounds = int(input())\n    sven = input()\n    friends = int(input())\n    friends_symbols = [input() for i in range(friends)]\n    for i in range(friends):\n        friends_symbols.append(input()\n    actual_score = 0\n    max_score = 0\n    for i in range(rounds):\n        sven_symbol = sven[i]\n        friends_symbols_in_round = list(map(lambda x: x[i], friends_symbols))\n        win_count = friends_symbols_in_round.count(beat_symbol(sven_symbol))\n        tie_count = friends_symbols_in_round.count(sven_symbol)\n        actual_score += win_count * 2 + tie_count\n        max_score += win_count * 2 + (friends - win_count - tie_count)\n    print(actual_score)\n    print(max_score)\n\ndef beat_symbol(symbol):\n    if symbol == "R":\n        return "P"\n    elif symbol == "P":\n        return "S"\n    else:\n        return "R"\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    rounds = int(input())\n    sven_symbols = input()\n    friends = int(input())\n    friends_symbols = []\n    for i in range(friends):\n        friends_symbols.append(input())\n    actual_score = 0\n    max_score = 0\n    for i in range(rounds):\n        sven_symbol = sven_symbols[i]\n        friends_symbols_in_round = list(map(lambda x: x[i], friends_symbols))\n        win_count = friends_symbols_in_round.count(beat_symbol(sven_symbol))\n        tie_count = friends_symbols_in_round.count(sven_symbol)\n        actual_score += win_count * 2 + tie_count\n        max_score += win_count * 2 + (friends - win_count - tie_count)\n    print(actual_score)\n    print(max_score)\n\ndef beat_symbol(symbol):\n    if symbol == "R":\n        return "P"\n    elif symbol == "P":\n        return "S"\n    else:\n        return "R"\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 01:14:12.974550 size on output set 2
2022-04-12 01:14:12.974560 size on input set 2
2022-04-12 01:14:15.361543 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    rounds = int(input())\n    sven = input()\n    friends = int(input())\n    friends_symbols = [input() for i in range(friends)]\n    for i in range(friends):\n        friends_symbols.append(input())\n    actual_score = 0\n    max_score = 0\n    for i in range(rounds):\n        sven_symbol = sven[i]\n        friends_symbols_in_round = list(map(lambda x: x[i], friends_symbols))\n        win_count = friends_symbols_in_round.count(beat_symbol(sven_symbol))\n        tie_count = friends_symbols_in_round.count(sven_symbol)\n        actual_score += win_count * 2 + tie_count\n        max_score += win_count * 2 + (friends - win_count - tie_count)\n    print(actual_score)\n    print(max_score)\n\ndef beat_symbol(symbol):\n    if symbol == \"R\":\n        return \"P\"\n    elif symbol == \"P\":\n        return \"S\"\n    else:\n        return \"R\"\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    rounds = int(input())\n    sven = input()\n    friends = int(input())\n    friends_symbols = [input() for i in range(friends)]\n    for i in range(friends):\n        friends_symbols.append(input())\n    actual_score = 0\n    max_score = 0\n    for i in range(rounds):\n        sven_symbol = sven[i]\n        friends_symbols_in_round = list(map(lambda x: x[i], friends_symbols))\n        win_count = friends_symbols_in_round.count(beat_symbol(sven_symbol))\n        tie_count = friends_symbols_in_round.count(sven_symbol)\n        actual_score += win_count * 2 + tie_count\n        max_score += win_count * 2 + (friends - win_count - tie_count)\n    print(actual_score)\n    print(max_score)\n\ndef beat_symbol(symbol):\n    if symbol == \"R\":\n        return \"P\"\n    elif symbol == \"P\":\n        return \"S\"\n    else:\n        return \"R\"\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649740453,
  "object": "edit"
}
2022-04-12 01:14:15.361691 fix syntax errors 2 ['\n\ndef main():\n    rounds = int(input())\n    sven = input()\n    friends = int(input())\n    friends_symbols = [input() for i in range(friends)]\n    for i in range(friends):\n        friends_symbols.append(input())\n    actual_score = 0\n    max_score = 0\n    for i in range(rounds):\n        sven_symbol = sven[i]\n        friends_symbols_in_round = list(map(lambda x: x[i], friends_symbols))\n        win_count = friends_symbols_in_round.count(beat_symbol(sven_symbol))\n        tie_count = friends_symbols_in_round.count(sven_symbol)\n        actual_score += win_count * 2 + tie_count\n        max_score += win_count * 2 + (friends - win_count - tie_count)\n    print(actual_score)\n    print(max_score)\n\ndef beat_symbol(symbol):\n    if symbol == "R":\n        return "P"\n    elif symbol == "P":\n        return "S"\n    else:\n        return "R"\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    rounds = int(input())\n    sven = input()\n    friends = int(input())\n    friends_symbols = [input() for i in range(friends)]\n    for i in range(friends):\n        friends_symbols.append(input())\n    actual_score = 0\n    max_score = 0\n    for i in range(rounds):\n        sven_symbol = sven[i]\n        friends_symbols_in_round = list(map(lambda x: x[i], friends_symbols))\n        win_count = friends_symbols_in_round.count(beat_symbol(sven_symbol))\n        tie_count = friends_symbols_in_round.count(sven_symbol)\n        actual_score += win_count * 2 + tie_count\n        max_score += win_count * 2 + (friends - win_count - tie_count)\n    print(actual_score)\n    print(max_score)\n\ndef beat_symbol(symbol):\n    if symbol == "R":\n        return "P"\n    elif symbol == "P":\n        return "S"\n    else:\n        return "R"\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 01:14:22.734806 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    rounds = int(input())\n    sven_symbols = list(input())\n    friends = int(input())\n    friends_symbols = []\n    for i in range(friends):\n        friends_symbols.append(input())\n    actual_score = 0\n    max_score = 0\n    for i in range(rounds):\n        sven_symbol = sven_symbols[i]\n        friends_symbols_in_round = list(map(lambda x: x[i], friends_symbols))  # noqa: E501\n        win_count = friends_symbols_in_round.count(beat_symbol(sven_symbol))\n        tie_count = friends_symbols_in_round.count(sven_symbol)\n        actual_score += win_count * 2 + tie_count\n        max_score += win_count * 2 + (friends - win_count - tie_count)\n    print(actual_score)\n    print(max_score)\n\ndef beat_symbol(symbol):\n    if symbol == \"R\":\n        return \"P\"\n    elif symbol == \"P\":\n        return \"S\"\n    else:\n        return \"R\"\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649740455,
  "object": "edit"
}
2022-04-12 01:14:22.735081 fix syntax errors 2 ['\n\ndef main():\n    pass\n\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    rounds = int(input())\n    sven_symbols = list(input())\n    friends = int(input())\n    friends_symbols = []\n    for i in range(friends):\n        friends_symbols.append(input())\n    actual_score = 0\n    max_score = 0\n    for i in range(rounds):\n        sven_symbol = sven_symbols[i]\n        friends_symbols_in_round = list(map(lambda x: x[i], friends_symbols))  # noqa: E501\n        win_count = friends_symbols_in_round.count(beat_symbol(sven_symbol))\n        tie_count = friends_symbols_in_round.count(sven_symbol)\n        actual_score += win_count * 2 + tie_count\n        max_score += win_count * 2 + (friends - win_count - tie_count)\n    print(actual_score)\n    print(max_score)\n\ndef beat_symbol(symbol):\n    if symbol == "R":\n        return "P"\n    elif symbol == "P":\n        return "S"\n    else:\n        return "R"\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 01:14:22.735109 size on output set 3
2022-04-12 01:14:22.735121 num operations 2
2022-04-12 01:14:22.735128 size on input set 1
2022-04-12 01:14:37.660067 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    # read input\n    R = int(input())\n    Sven = input()\n    N = int(input())\n    friends = []\n    for i in range(N):\n        friends.append(input())\n\n    # calculate score\n    score = 0\n    for i in range(R):\n        if Sven[i] == 'S':\n            if 'P' in friends:\n                score += 2\n            elif 'S' in friends:\n                score += 1\n        elif Sven[i] == 'P':\n            if 'R' in friends:\n                score += 2\n            elif 'P' in friends:\n                score += 1\n        elif Sven[i] == 'R':\n            if 'S' in friends:\n                score += 2\n            elif 'R' in friends:\n                score += 1\n\n    # calculate max score\n    max_score = 0\n    for i in range(R):\n        if Sven[i] == 'S':\n            if 'P' not in friends:\n                max_score += 2\n            elif 'S' not in friends:\n                max_score += 1\n        elif Sven[i] == 'P':\n            if 'R' not in friends:\n                max_score += 2\n            elif 'P' not in friends:\n                max_score += 1\n        elif Sven[i] == 'R':\n            if 'S' not in friends:\n                max_score += 2\n            elif 'R' not in friends:\n                max_score += 1\n\n    print(score)\n    print(max_score)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    # read input\n    R = int(input())\n    Sven = input()\n    N = int(input())\n    Friends = []\n    for i in range(N):\n        Friends.append(input())\n\n    # calculate score\n    Score = 0\n    for i in range(R):\n        if Sven[i] == 'S':\n            if 'P' in Friends:\n                Score += 2\n            elif 'S' in Friends:\n                Score += 1\n        elif Sven[i] == 'P':\n            if 'R' in Friends:\n                Score += 2\n            elif 'P' in Friends:\n                Score += 1\n        elif Sven[i] == 'R':\n            if 'S' in Friends:\n                Score += 2\n            elif 'R' in Friends:\n                Score += 1\n\n    # calculate max score\n    Max_score = 0\n    for i in range(R):\n        if Sven[i] == 'S':\n            if 'P' not in Friends:\n                Max_score += 2\n            elif 'S' not in Friends:\n                Max_score += 1\n        elif Sven[i] == 'P':\n            if 'R' not in Friends:\n                Max_score += 2\n            elif 'P' not in Friends:\n                Max_score += 1\n        elif Sven[i] == 'R':\n            if 'S' not in Friends:\n                Max_score += 2\n            elif 'R' not in Friends:\n                Max_score += 1\n\n    print(Score)\n    print(Max_score)\n\nmain()\n"
    }
  ],
  "created": 1649740462,
  "object": "edit"
}
2022-04-12 01:14:37.660347 fix spelling mistakes 2 ["\n\ndef main():\n    # read input\n    R = int(input())\n    Sven = input()\n    N = int(input())\n    friends = []\n    for i in range(N):\n        friends.append(input())\n\n    # calculate score\n    score = 0\n    for i in range(R):\n        if Sven[i] == 'S':\n            if 'P' in friends:\n                score += 2\n            elif 'S' in friends:\n                score += 1\n        elif Sven[i] == 'P':\n            if 'R' in friends:\n                score += 2\n            elif 'P' in friends:\n                score += 1\n        elif Sven[i] == 'R':\n            if 'S' in friends:\n                score += 2\n            elif 'R' in friends:\n                score += 1\n\n    # calculate max score\n    max_score = 0\n    for i in range(R):\n        if Sven[i] == 'S':\n            if 'P' not in friends:\n                max_score += 2\n            elif 'S' not in friends:\n                max_score += 1\n        elif Sven[i] == 'P':\n            if 'R' not in friends:\n                max_score += 2\n            elif 'P' not in friends:\n                max_score += 1\n        elif Sven[i] == 'R':\n            if 'S' not in friends:\n                max_score += 2\n            elif 'R' not in friends:\n                max_score += 1\n\n    print(score)\n    print(max_score)\n\nmain()\n", "\n\ndef main():\n    # read input\n    R = int(input())\n    Sven = input()\n    N = int(input())\n    Friends = []\n    for i in range(N):\n        Friends.append(input())\n\n    # calculate score\n    Score = 0\n    for i in range(R):\n        if Sven[i] == 'S':\n            if 'P' in Friends:\n                Score += 2\n            elif 'S' in Friends:\n                Score += 1\n        elif Sven[i] == 'P':\n            if 'R' in Friends:\n                Score += 2\n            elif 'P' in Friends:\n                Score += 1\n        elif Sven[i] == 'R':\n            if 'S' in Friends:\n                Score += 2\n            elif 'R' in Friends:\n                Score += 1\n\n    # calculate max score\n    Max_score = 0\n    for i in range(R):\n        if Sven[i] == 'S':\n            if 'P' not in Friends:\n                Max_score += 2\n            elif 'S' not in Friends:\n                Max_score += 1\n        elif Sven[i] == 'P':\n            if 'R' not in Friends:\n                Max_score += 2\n            elif 'P' not in Friends:\n                Max_score += 1\n        elif Sven[i] == 'R':\n            if 'S' not in Friends:\n                Max_score += 2\n            elif 'R' not in Friends:\n                Max_score += 1\n\n    print(Score)\n    print(Max_score)\n\nmain()\n"]
2022-04-12 01:14:37.660404 size on output set 2
2022-04-12 01:14:37.660413 size on input set 2
2022-04-12 01:14:55.478450 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    # read input\n    R = int(input())\n    Sven = input()\n    N = int(input())\n    Friends = []\n    for i in range(N):\n        Friends.append(input())\n\n    # calculate score\n    Score = 0\n    for i in range(R):\n        if Sven[i] == 'S':\n            if 'P' in Friends[i]:\n                Score += 2\n            elif 'S' in Friends[i]:\n                Score += 1\n        elif Sven[i] == 'P':\n            if 'R' in Friends[i]:\n                Score += 2\n            elif 'P' in Friends[i]:\n                Score += 1\n        elif Sven[i] == 'R':\n            if 'S' in Friends[i]:\n                Score += 2\n            elif 'R' in Friends[i]:\n                Score += 1\n\n    # calculate max score\n    Max_score = 0\n    for i in range(R):\n        if Sven[i] == 'S':\n            if 'P' not in Friends[i]:\n                Max_score += 2\n            elif 'S' not in Friends[i]:\n                Max_score += 1\n        elif Sven[i] == 'P':\n            if 'R' not in Friends[i]:\n                Max_score += 2\n            elif 'P' not in Friends[i]:\n                Max_score += 1\n        elif Sven[i] == 'R':\n            if 'S' not in Friends[i]:\n                Max_score += 2\n            elif 'R' not in Friends[i]:\n                Max_score += 1\n\n    print(Score)\n    print(Max_score)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    # read input\n    R = int(input())\n    Sven = input()\n    N = int(input())\n    Friends = []\n    for i in range(N):\n        Friends.append(input())\n\n    # calculate score\n    Score = 0\n    for i in range(R):\n        if Sven[i] == 'S':\n            for j in range(N):\n                if Friends[j][i] == 'P':\n                    Score += 2\n                    break\n                elif Friends[j][i] == 'S':\n                    Score += 1\n                    break\n        elif Sven[i] == 'P':\n            for j in range(N):\n                if Friends[j][i] == 'R':\n                    Score += 2\n                    break\n                elif Friends[j][i] == 'P':\n                    Score += 1\n                    break\n        elif Sven[i] == 'R':\n            if 'S' in Friends:\n                Score += 2\n            elif 'R' in Friends:\n                Score += 1\n\n    # calculate max score\n    Max_score = 0\n    for i in range(R):\n        if Sven[i] == 'S':\n            if 'P' not in Friends:\n                Max_score += 2\n            elif 'S' not in Friends:\n                Max_score += 1\n        elif Sven[i] == 'P':\n            if 'R' not in Friends:\n                Max_score += 2\n            elif 'P' not in Friends:\n                Max_score += 1\n        elif Sven[i] == 'R':\n            if 'S' not in Friends:\n                Max_score += 2\n            elif 'R' not in Friends:\n                Max_score += 1\n\n    print(Score)\n    print(Max_score)\n\nmain()\n"
    }
  ],
  "created": 1649740477,
  "object": "edit"
}
2022-04-12 01:14:55.478687 fix syntax errors 2 ["\n\ndef main():\n    # read input\n    R = int(input())\n    Sven = input()\n    N = int(input())\n    Friends = []\n    for i in range(N):\n        Friends.append(input())\n\n    # calculate score\n    Score = 0\n    for i in range(R):\n        if Sven[i] == 'S':\n            if 'P' in Friends[i]:\n                Score += 2\n            elif 'S' in Friends[i]:\n                Score += 1\n        elif Sven[i] == 'P':\n            if 'R' in Friends[i]:\n                Score += 2\n            elif 'P' in Friends[i]:\n                Score += 1\n        elif Sven[i] == 'R':\n            if 'S' in Friends[i]:\n                Score += 2\n            elif 'R' in Friends[i]:\n                Score += 1\n\n    # calculate max score\n    Max_score = 0\n    for i in range(R):\n        if Sven[i] == 'S':\n            if 'P' not in Friends[i]:\n                Max_score += 2\n            elif 'S' not in Friends[i]:\n                Max_score += 1\n        elif Sven[i] == 'P':\n            if 'R' not in Friends[i]:\n                Max_score += 2\n            elif 'P' not in Friends[i]:\n                Max_score += 1\n        elif Sven[i] == 'R':\n            if 'S' not in Friends[i]:\n                Max_score += 2\n            elif 'R' not in Friends[i]:\n                Max_score += 1\n\n    print(Score)\n    print(Max_score)\n\nmain()\n", "\n\ndef main():\n    # read input\n    R = int(input())\n    Sven = input()\n    N = int(input())\n    Friends = []\n    for i in range(N):\n        Friends.append(input())\n\n    # calculate score\n    Score = 0\n    for i in range(R):\n        if Sven[i] == 'S':\n            for j in range(N):\n                if Friends[j][i] == 'P':\n                    Score += 2\n                    break\n                elif Friends[j][i] == 'S':\n                    Score += 1\n                    break\n        elif Sven[i] == 'P':\n            for j in range(N):\n                if Friends[j][i] == 'R':\n                    Score += 2\n                    break\n                elif Friends[j][i] == 'P':\n                    Score += 1\n                    break\n        elif Sven[i] == 'R':\n            if 'S' in Friends:\n                Score += 2\n            elif 'R' in Friends:\n                Score += 1\n\n    # calculate max score\n    Max_score = 0\n    for i in range(R):\n        if Sven[i] == 'S':\n            if 'P' not in Friends:\n                Max_score += 2\n            elif 'S' not in Friends:\n                Max_score += 1\n        elif Sven[i] == 'P':\n            if 'R' not in Friends:\n                Max_score += 2\n            elif 'P' not in Friends:\n                Max_score += 1\n        elif Sven[i] == 'R':\n            if 'S' not in Friends:\n                Max_score += 2\n            elif 'R' not in Friends:\n                Max_score += 1\n\n    print(Score)\n    print(Max_score)\n\nmain()\n"]
2022-04-12 01:15:12.866334 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    # read input\n    # R = int(input())\n    # Sven = input()\n    # N = int(input())\n    # friends = []\n    # for i in range(N):\n    #     friends.append(input())\n\n    # # calculate score\n    # score = 0\n    # for i in range(R):\n    #     if Sven[i] == 'S':\n    #         if 'P' in friends:\n    #             score += 2\n    #         elif 'S' in friends:\n    #             score += 1\n    #     elif Sven[i] == 'P':\n    #         if 'R' in friends:\n    #             score += 2\n    #         elif 'P' in friends:\n    #             score += 1\n    #     elif Sven[i] == 'R':\n    #         if 'S' in friends:\n    #             score += 2\n    #         elif 'R' in friends:\n    #             score += 1\n\n    # # calculate max score\n    # max_score = 0\n    # for i in range(R):\n    #     if Sven[i] == 'S':\n    #         if 'P' not in friends:\n    #             max_score += 2\n    #         elif 'S' not in friends:\n    #             max_score += 1\n    #     elif Sven[i] == 'P':\n    #         if 'R' not in friends:\n    #             max_score += 2\n    #         elif 'P' not in friends:\n    #             max_score += 1\n    #     elif Sven[i] == 'R':\n    #         if 'S' not in friends:\n    #             max_score += 2\n    #         elif 'R' not in friends:\n    #             max_score += 1\n\n    # print(score)\n    # print(max_score)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    # read input\n    R = int(input())\n    Sven = input()\n    N = int(input())\n    friends = []\n    for i in range(N):\n        friends.append(input())\n\n    # calculate score\n    score = 0\n    for i in range(R):\n        if Sven[i] == 'S':\n            if 'P' in friends[i]:\n                score += 2\n            elif 'S' in friends[i]:\n                score += 1\n        elif Sven[i] == 'P':\n            if 'R' in friends[i]:\n                score += 2\n            elif 'P' in friends[i]:\n                score += 1\n        elif Sven[i] == 'R':\n            if 'S' in friends[i]:\n                score += 2\n            elif 'R' in friends[i]:\n                score += 1\n\n    # calculate max score\n    max_score = 0\n    for i in range(R):\n        if Sven[i] == 'S':\n            if 'P' not in friends[i]:\n                max_score += 2\n            elif 'S' not in friends[i]:\n                max_score += 1\n        elif Sven[i] == 'P':\n            if 'R' not in friends[i]:\n                max_score += 2\n            elif 'P' not in friends[i]:\n                max_score += 1\n        elif Sven[i] == 'R':\n            if 'S' not in friends[i]:\n                max_score += 2\n            elif 'R' not in friends[i]:\n                max_score += 1\n\n    print(score)\n    print(max_score)\n\nmain()\n"
    }
  ],
  "created": 1649740495,
  "object": "edit"
}
2022-04-12 01:15:12.866606 fix syntax errors 2 ["\n\ndef main():\n    # read input\n    # R = int(input())\n    # Sven = input()\n    # N = int(input())\n    # friends = []\n    # for i in range(N):\n    #     friends.append(input())\n\n    # # calculate score\n    # score = 0\n    # for i in range(R):\n    #     if Sven[i] == 'S':\n    #         if 'P' in friends:\n    #             score += 2\n    #         elif 'S' in friends:\n    #             score += 1\n    #     elif Sven[i] == 'P':\n    #         if 'R' in friends:\n    #             score += 2\n    #         elif 'P' in friends:\n    #             score += 1\n    #     elif Sven[i] == 'R':\n    #         if 'S' in friends:\n    #             score += 2\n    #         elif 'R' in friends:\n    #             score += 1\n\n    # # calculate max score\n    # max_score = 0\n    # for i in range(R):\n    #     if Sven[i] == 'S':\n    #         if 'P' not in friends:\n    #             max_score += 2\n    #         elif 'S' not in friends:\n    #             max_score += 1\n    #     elif Sven[i] == 'P':\n    #         if 'R' not in friends:\n    #             max_score += 2\n    #         elif 'P' not in friends:\n    #             max_score += 1\n    #     elif Sven[i] == 'R':\n    #         if 'S' not in friends:\n    #             max_score += 2\n    #         elif 'R' not in friends:\n    #             max_score += 1\n\n    # print(score)\n    # print(max_score)\n\nmain()\n", "\n\ndef main():\n    # read input\n    R = int(input())\n    Sven = input()\n    N = int(input())\n    friends = []\n    for i in range(N):\n        friends.append(input())\n\n    # calculate score\n    score = 0\n    for i in range(R):\n        if Sven[i] == 'S':\n            if 'P' in friends[i]:\n                score += 2\n            elif 'S' in friends[i]:\n                score += 1\n        elif Sven[i] == 'P':\n            if 'R' in friends[i]:\n                score += 2\n            elif 'P' in friends[i]:\n                score += 1\n        elif Sven[i] == 'R':\n            if 'S' in friends[i]:\n                score += 2\n            elif 'R' in friends[i]:\n                score += 1\n\n    # calculate max score\n    max_score = 0\n    for i in range(R):\n        if Sven[i] == 'S':\n            if 'P' not in friends[i]:\n                max_score += 2\n            elif 'S' not in friends[i]:\n                max_score += 1\n        elif Sven[i] == 'P':\n            if 'R' not in friends[i]:\n                max_score += 2\n            elif 'P' not in friends[i]:\n                max_score += 1\n        elif Sven[i] == 'R':\n            if 'S' not in friends[i]:\n                max_score += 2\n            elif 'R' not in friends[i]:\n                max_score += 1\n\n    print(score)\n    print(max_score)\n\nmain()\n"]
2022-04-12 01:15:12.866634 size on output set 4
2022-04-12 01:15:12.866644 num operations 2
2022-04-12 01:15:12.866648 size on input set 1
2022-04-12 01:15:17.165877 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    rounds = int(sys.stdin.readline().strip())\n    sven = sys.stdin.readline().strip() # Sven's strategy\n    friends = int(sys.stdin.readline().strip())\n    max_score = 0\n    score = 0\n    for i in range(friends):\n        friend = sys.stdin.readline().strip() # friend's strategy\n        for j in range(rounds):\n            if sven[j] == friend[j]:\n                score += 1\n            elif (sven[j] == \"R\" and friend[j] == \"S\") or (sven[j] == \"S\" and friend[j] == \"P\") or (sven[j] == \"P\" and friend[j] == \"R\"):\n                score += 2\n        max_score += 2 * rounds # max possible score\n        print(score) # print score\n        print(max_score) # print max score\n        score = 0\n        max_score = 0\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    rounds = int(sys.stdin.readline().strip())\n    sven = sys.stdin.readline().strip()\n    friends = int(sys.stdin.readline().strip())\n    max_score = 0\n    score = 0\n    for i in range(friends):\n        friend = sys.stdin.readline().strip()\n        for j in range(rounds):\n            if sven[j] == friend[j]:\n                score += 1\n            elif (sven[j] == \"R\" and friend[j] == \"S\") or (sven[j] == \"S\" and friend[j] == \"P\") or (sven[j] == \"P\" and friend[j] == \"R\"):\n                score += 2\n    print(score)\n    print(max_score)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649740513,
  "object": "edit"
}
2022-04-12 01:15:17.165980 fix spelling mistakes 2 ['\n\nimport sys\n\ndef main():\n    rounds = int(sys.stdin.readline().strip())\n    sven = sys.stdin.readline().strip() # Sven\'s strategy\n    friends = int(sys.stdin.readline().strip())\n    max_score = 0\n    score = 0\n    for i in range(friends):\n        friend = sys.stdin.readline().strip() # friend\'s strategy\n        for j in range(rounds):\n            if sven[j] == friend[j]:\n                score += 1\n            elif (sven[j] == "R" and friend[j] == "S") or (sven[j] == "S" and friend[j] == "P") or (sven[j] == "P" and friend[j] == "R"):\n                score += 2\n        max_score += 2 * rounds # max possible score\n        print(score) # print score\n        print(max_score) # print max score\n        score = 0\n        max_score = 0\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    rounds = int(sys.stdin.readline().strip())\n    sven = sys.stdin.readline().strip()\n    friends = int(sys.stdin.readline().strip())\n    max_score = 0\n    score = 0\n    for i in range(friends):\n        friend = sys.stdin.readline().strip()\n        for j in range(rounds):\n            if sven[j] == friend[j]:\n                score += 1\n            elif (sven[j] == "R" and friend[j] == "S") or (sven[j] == "S" and friend[j] == "P") or (sven[j] == "P" and friend[j] == "R"):\n                score += 2\n    print(score)\n    print(max_score)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 01:15:17.166049 size on output set 2
2022-04-12 01:15:17.166053 size on input set 2
2022-04-12 01:15:24.478174 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    rounds = int(sys.stdin.readline().strip())\n    sven = sys.stdin.readline().strip()  # Sven's strategy\n    friends = int(sys.stdin.readline().strip())\n    max_score = 0\n    score = 0\n    for i in range(friends):\n        friend = sys.stdin.readline().strip()  # friend's strategy\n        for j in range(rounds):\n            if sven[j] == friend[j]:\n                score += 1\n            elif (sven[j] == \"R\" and friend[j] == \"S\") or (sven[j] == \"S\" and friend[j] == \"P\") or (\n                    sven[j] == \"P\" and friend[j] == \"R\"):\n                score += 2\n        max_score += 2 * rounds  # max possible score\n        print(score)  # print score\n        print(max_score)  # print max score\n        score = 0\n        max_score = 0\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    rounds = int(sys.stdin.readline().strip())\n    sven = sys.stdin.readline().strip() # Sven's strategy\n    friends = int(sys.stdin.readline().strip())\n    max_score = 0\n    score = 0\n    for i in range(friends):\n        friend = sys.stdin.readline().strip() # friend's strategy\n        for j in range(rounds):\n            if sven[j] == friend[j]:\n                score += 1\n            elif (sven[j] == \"R\" and friend[j] == \"S\") or (sven[j] == \"S\" and friend[j] == \"P\") or (sven[j] == \"P\" and friend[j] == \"R\"):\n                score += 2\n        max_score = 2 * rounds # max possible score\n        print(score) # print score\n        print(max_score) # print max score\n        score = 0\n        max_score = 0\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649740517,
  "object": "edit"
}
2022-04-12 01:15:24.478277 fix syntax errors 2 ['\n\nimport sys\n\ndef main():\n    rounds = int(sys.stdin.readline().strip())\n    sven = sys.stdin.readline().strip()  # Sven\'s strategy\n    friends = int(sys.stdin.readline().strip())\n    max_score = 0\n    score = 0\n    for i in range(friends):\n        friend = sys.stdin.readline().strip()  # friend\'s strategy\n        for j in range(rounds):\n            if sven[j] == friend[j]:\n                score += 1\n            elif (sven[j] == "R" and friend[j] == "S") or (sven[j] == "S" and friend[j] == "P") or (\n                    sven[j] == "P" and friend[j] == "R"):\n                score += 2\n        max_score += 2 * rounds  # max possible score\n        print(score)  # print score\n        print(max_score)  # print max score\n        score = 0\n        max_score = 0\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    rounds = int(sys.stdin.readline().strip())\n    sven = sys.stdin.readline().strip() # Sven\'s strategy\n    friends = int(sys.stdin.readline().strip())\n    max_score = 0\n    score = 0\n    for i in range(friends):\n        friend = sys.stdin.readline().strip() # friend\'s strategy\n        for j in range(rounds):\n            if sven[j] == friend[j]:\n                score += 1\n            elif (sven[j] == "R" and friend[j] == "S") or (sven[j] == "S" and friend[j] == "P") or (sven[j] == "P" and friend[j] == "R"):\n                score += 2\n        max_score = 2 * rounds # max possible score\n        print(score) # print score\n        print(max_score) # print max score\n        score = 0\n        max_score = 0\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 01:15:26.861690 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    rounds = int(sys.stdin.readline().strip())\n    sven = sys.stdin.readline().strip()\n    friends = int(sys.stdin.readline().strip())\n    score = 0\n    for i in range(friends):\n        friend = sys.stdin.readline().strip()\n        for j in range(rounds):\n            if sven[j] == friend[j]:\n                score += 1\n            elif (sven[j] == \"R\" and friend[j] == \"S\") or (sven[j] == \"S\" and friend[j] == \"P\") or (sven[j] == \"P\" and friend[j] == \"R\"):\n                score += 2\n    print(score)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    rounds = int(sys.stdin.readline().strip())\n    sven = sys.stdin.readline().strip()\n    friends = int(sys.stdin.readline().strip())\n    max_score = 0\n    score = 0\n    for i in range(friends):\n        friend = sys.stdin.readline().strip()\n        for j in range(rounds):\n            if sven[j] == friend[j]:\n                score += 1\n            elif (sven[j] == \"R\" and friend[j] == \"S\") or (sven[j] == \"S\" and friend[j] == \"P\") or (sven[j] == \"P\" and friend[j] == \"R\"):\n                score += 2\n    print(max_score, score)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649740524,
  "object": "edit"
}
2022-04-12 01:15:26.861790 fix syntax errors 2 ['\n\nimport sys\n\ndef main():\n    rounds = int(sys.stdin.readline().strip())\n    sven = sys.stdin.readline().strip()\n    friends = int(sys.stdin.readline().strip())\n    score = 0\n    for i in range(friends):\n        friend = sys.stdin.readline().strip()\n        for j in range(rounds):\n            if sven[j] == friend[j]:\n                score += 1\n            elif (sven[j] == "R" and friend[j] == "S") or (sven[j] == "S" and friend[j] == "P") or (sven[j] == "P" and friend[j] == "R"):\n                score += 2\n    print(score)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    rounds = int(sys.stdin.readline().strip())\n    sven = sys.stdin.readline().strip()\n    friends = int(sys.stdin.readline().strip())\n    max_score = 0\n    score = 0\n    for i in range(friends):\n        friend = sys.stdin.readline().strip()\n        for j in range(rounds):\n            if sven[j] == friend[j]:\n                score += 1\n            elif (sven[j] == "R" and friend[j] == "S") or (sven[j] == "S" and friend[j] == "P") or (sven[j] == "P" and friend[j] == "R"):\n                score += 2\n    print(max_score, score)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 01:15:26.861805 size on output set 4
2022-04-12 01:15:26.861812 num operations 2
2022-04-12 01:15:26.861815 size on input set 1
2022-04-12 01:15:46.368781 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    rounds = int(input())\n    sven_symbols = input()\n    friends = int(input())\n    friend_symbols = []\n    for i in range(friends):\n        friend_symbols.append(input())\n    actual_score = 0\n    for round in range(rounds):\n        wins = 0\n        ties = 0\n        for friend_symbol in friend_symbols:\n            if sven_symbols[round] == friend_symbol[round]:\n                ties += 1\n            elif sven_symbols[round] == \"P\" and friend_symbol[round] == \"R\":\n                wins += 1\n            elif sven_symbols[round] == \"R\" and friend_symbol[round] == \"S\":\n                wins += 1\n            elif sven_symbols[round] == \"S\" and friend_symbol[round] == \"P\":\n                wins += 1\n        actual_score += wins * 2 + ties\n    largest_score = 0\n    for round in range(rounds):\n        sven_wins = 0\n        sven_ties = 0\n        for friend_symbol in friend_symbols:\n            if sven_symbols[round] == friend_symbol[round]:\n                sven_ties += 1\n            elif sven_symbols[round] == \"P\" and friend_symbol[round] == \"R\":\n                sven_wins += 1\n            elif sven_symbols[round] == \"R\" and friend_symbol[round] == \"S\":\n                sven_wins += 1\n            elif sven[round] == \"S\" and friend_symbol[round] == \"P\":\n                sven_wins += 1\n        largest_score += sven_wins * 2 + sven_ties\n    print(actual_score)\n    print(largest_score)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    rounds = int(input())\n    svens = input()\n    friends = int(input())\n    friend_symbols = []\n    for i in range(friends):\n        friend_symbols.append(input())\n    actual_score = 0\n    for round in range(rounds):\n        wins = 0\n        ties = 0\n        for friend_symbol in friend_symbols:\n            if svens[round] == friend_symbol[round]:\n                ties += 1\n            elif svens[round] == \"P\" and friend_symbol[round] == \"R\":\n                wins += 1\n            elif svens[round] == \"R\" and friend_symbol[round] == \"S\":\n                wins += 1\n            elif svens[round] == \"S\" and friend_symbol[round] == \"P\":\n                wins += 1\n        actual_score += wins * 2 + ties\n    largest_score = 0\n    for round in range(rounds):\n        sven_wins = 0\n        sven_ties = 0\n        for friend_symbol in friend_symbols:\n            if svens[round] == friend_symbol[round]:\n                sven_ties += 1\n            elif svens[round] == \"P\" and friend_symbol[round] == \"R\":\n                sven_wins += 1\n            elif svens[round] == \"R\" and friend_symbol[round] == \"S\":\n                sven_wins += 1\n            elif svens[round] == \"S\" and friend_symbol[round] == \"P\":\n                sven_wins += 1\n        largest_score += sven_wins * 2 + sven_ties\n    print(actual_score)\n    print(largest_score)\n\nmain()\n"
    }
  ],
  "created": 1649740527,
  "object": "edit"
}
2022-04-12 01:15:46.368967 fix spelling mistakes 2 ['\n\ndef main():\n    rounds = int(input())\n    sven_symbols = input()\n    friends = int(input())\n    friend_symbols = []\n    for i in range(friends):\n        friend_symbols.append(input())\n    actual_score = 0\n    for round in range(rounds):\n        wins = 0\n        ties = 0\n        for friend_symbol in friend_symbols:\n            if sven_symbols[round] == friend_symbol[round]:\n                ties += 1\n            elif sven_symbols[round] == "P" and friend_symbol[round] == "R":\n                wins += 1\n            elif sven_symbols[round] == "R" and friend_symbol[round] == "S":\n                wins += 1\n            elif sven_symbols[round] == "S" and friend_symbol[round] == "P":\n                wins += 1\n        actual_score += wins * 2 + ties\n    largest_score = 0\n    for round in range(rounds):\n        sven_wins = 0\n        sven_ties = 0\n        for friend_symbol in friend_symbols:\n            if sven_symbols[round] == friend_symbol[round]:\n                sven_ties += 1\n            elif sven_symbols[round] == "P" and friend_symbol[round] == "R":\n                sven_wins += 1\n            elif sven_symbols[round] == "R" and friend_symbol[round] == "S":\n                sven_wins += 1\n            elif sven[round] == "S" and friend_symbol[round] == "P":\n                sven_wins += 1\n        largest_score += sven_wins * 2 + sven_ties\n    print(actual_score)\n    print(largest_score)\n\nmain()\n', '\n\ndef main():\n    rounds = int(input())\n    svens = input()\n    friends = int(input())\n    friend_symbols = []\n    for i in range(friends):\n        friend_symbols.append(input())\n    actual_score = 0\n    for round in range(rounds):\n        wins = 0\n        ties = 0\n        for friend_symbol in friend_symbols:\n            if svens[round] == friend_symbol[round]:\n                ties += 1\n            elif svens[round] == "P" and friend_symbol[round] == "R":\n                wins += 1\n            elif svens[round] == "R" and friend_symbol[round] == "S":\n                wins += 1\n            elif svens[round] == "S" and friend_symbol[round] == "P":\n                wins += 1\n        actual_score += wins * 2 + ties\n    largest_score = 0\n    for round in range(rounds):\n        sven_wins = 0\n        sven_ties = 0\n        for friend_symbol in friend_symbols:\n            if svens[round] == friend_symbol[round]:\n                sven_ties += 1\n            elif svens[round] == "P" and friend_symbol[round] == "R":\n                sven_wins += 1\n            elif svens[round] == "R" and friend_symbol[round] == "S":\n                sven_wins += 1\n            elif svens[round] == "S" and friend_symbol[round] == "P":\n                sven_wins += 1\n        largest_score += sven_wins * 2 + sven_ties\n    print(actual_score)\n    print(largest_score)\n\nmain()\n']
2022-04-12 01:15:46.368990 size on output set 2
2022-04-12 01:15:46.368994 size on input set 2
2022-04-12 01:15:49.326810 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    rounds = int(input())\n    sven_symbols = input()\n    friends = int(input())\n    friend_symbols = []\n    for i in range(friends):\n        friend_symbols.append(input())\n    actual_score = 0\n    for round in range(rounds):\n        wins = 0\n        ties = 0\n        for friend_symbol in friend_symbols:\n            if sven_symbols[round] == friend_symbol[round]:\n                ties += 1\n            elif sven_symbols[round] == \"P\" and friend_symbol[round] == \"R\":\n                wins += 1\n            elif sven_symbols[round] == \"R\" and friend_symbol[round] == \"S\":\n                wins += 1\n            elif sven_symbols[round] == \"S\" and friend_symbol[round] == \"P\":\n                wins += 1\n        actual_score += wins * 2 + ties\n    largest_score = 0\n    for round in range(rounds):\n        sven_wins = 0\n        sven_ties = 0\n        for friend_symbol in friend_symbols:\n            if sven_symbols[round] == friend_symbol[round]:\n                sven_ties += 1\n            elif sven_symbols[round] == \"P\" and friend_symbol[round] == \"R\":\n                sven_wins += 1\n            elif sven_symbols[round] == \"R\" and friend_symbol[round] == \"S\":\n                sven_wins += 1\n            elif sven_symbols[round] == \"S\" and friend_symbol[round] == \"P\":\n                sven_wins += 1\n        largest_score += sven_wins * 2 + sven_ties\n    print(actual_score)\n    print(largest_score)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    rounds = int(input())\n    sven_symbols = input()\n    friends = int(input())\n    friend_symbols = []\n    for i in range(friends):\n        friend_symbols.append(input())\n    actual_score = 0\n    for round in range(rounds):\n        wins = 0\n        ties = 0\n        for friend_symbol in friend_symbols:\n            if sven_symbols[round] == friend_symbol[round]:\n                ties += 1\n            elif sven_symbols[round] == \"P\" and friend_symbol[round] == \"R\":\n                wins += 1\n            elif sven_symbols[round] == \"R\" and friend_symbol[round] == \"S\":\n                wins += 1\n            elif sven_symbols[round] == \"S\" and friend_symbol[round] == \"P\":\n                wins += 1\n        actual_score += wins * 2 + ties\n    largest_score = 0\n    for round in range(rounds):\n        sven_wins = 0\n        sven_ties = 0\n        for friend_symbol in friend_symbols:\n            if sven_symbols[round] == friend_symbol[round]:\n                sven_ties += 1\n            elif sven_symbols[round] == \"P\" and friend_symbol[round] == \"R\":\n                sven_wins += 1\n            elif sven_symbols[round] == \"R\" and friend_symbol[round] == \"S\":\n                sven_wins += 1\n            elif sven_symbols[round] == \"S\" and friend_symbol[round] == \"P\":\n                sven_wins += 1\n        largest_score += sven_wins * 2 + sven_ties\n    print(actual_score)\n    print(largest_score)\n\nmain()\n"
    }
  ],
  "created": 1649740546,
  "object": "edit"
}
2022-04-12 01:15:49.327008 fix syntax errors 2 ['\n\ndef main():\n    rounds = int(input())\n    sven_symbols = input()\n    friends = int(input())\n    friend_symbols = []\n    for i in range(friends):\n        friend_symbols.append(input())\n    actual_score = 0\n    for round in range(rounds):\n        wins = 0\n        ties = 0\n        for friend_symbol in friend_symbols:\n            if sven_symbols[round] == friend_symbol[round]:\n                ties += 1\n            elif sven_symbols[round] == "P" and friend_symbol[round] == "R":\n                wins += 1\n            elif sven_symbols[round] == "R" and friend_symbol[round] == "S":\n                wins += 1\n            elif sven_symbols[round] == "S" and friend_symbol[round] == "P":\n                wins += 1\n        actual_score += wins * 2 + ties\n    largest_score = 0\n    for round in range(rounds):\n        sven_wins = 0\n        sven_ties = 0\n        for friend_symbol in friend_symbols:\n            if sven_symbols[round] == friend_symbol[round]:\n                sven_ties += 1\n            elif sven_symbols[round] == "P" and friend_symbol[round] == "R":\n                sven_wins += 1\n            elif sven_symbols[round] == "R" and friend_symbol[round] == "S":\n                sven_wins += 1\n            elif sven_symbols[round] == "S" and friend_symbol[round] == "P":\n                sven_wins += 1\n        largest_score += sven_wins * 2 + sven_ties\n    print(actual_score)\n    print(largest_score)\n\nmain()\n', '\n\ndef main():\n    rounds = int(input())\n    sven_symbols = input()\n    friends = int(input())\n    friend_symbols = []\n    for i in range(friends):\n        friend_symbols.append(input())\n    actual_score = 0\n    for round in range(rounds):\n        wins = 0\n        ties = 0\n        for friend_symbol in friend_symbols:\n            if sven_symbols[round] == friend_symbol[round]:\n                ties += 1\n            elif sven_symbols[round] == "P" and friend_symbol[round] == "R":\n                wins += 1\n            elif sven_symbols[round] == "R" and friend_symbol[round] == "S":\n                wins += 1\n            elif sven_symbols[round] == "S" and friend_symbol[round] == "P":\n                wins += 1\n        actual_score += wins * 2 + ties\n    largest_score = 0\n    for round in range(rounds):\n        sven_wins = 0\n        sven_ties = 0\n        for friend_symbol in friend_symbols:\n            if sven_symbols[round] == friend_symbol[round]:\n                sven_ties += 1\n            elif sven_symbols[round] == "P" and friend_symbol[round] == "R":\n                sven_wins += 1\n            elif sven_symbols[round] == "R" and friend_symbol[round] == "S":\n                sven_wins += 1\n            elif sven_symbols[round] == "S" and friend_symbol[round] == "P":\n                sven_wins += 1\n        largest_score += sven_wins * 2 + sven_ties\n    print(actual_score)\n    print(largest_score)\n\nmain()\n']
2022-04-12 01:16:02.098539 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    rounds = int(input())\n    svens = input()\n    friends = int(input())\n    friend_symbols = []\n    for i in range(friends):\n        friend_symbols.append(input())\n    actual_score = 0\n    for round_number in range(rounds):\n        wins = 0\n        ties = 0\n        for friend_symbol in friend_symbols:\n            if svens[round_number] == friend_symbol[round_number]:\n                ties += 1\n            elif svens[round_number] == \"P\" and friend_symbol[round_number] == \"R\":\n                wins += 1\n            elif svens[round_number] == \"R\" and friend_symbol[round_number] == \"S\":\n                wins += 1\n            elif svens[round_number] == \"S\" and friend_symbol[round_number] == \"P\":\n                wins += 1\n        actual_score += wins * 2 + ties\n    largest_score = 0\n    for round_number in range(rounds):\n        sven_wins = 0\n        sven_ties = 0\n        for friend_symbol in friend_symbols:\n            if svens[round_number] == friend_symbol[round_number]:\n                sven_ties += 1\n            elif svens[round_number] == \"P\" and friend_symbol[round_number] == \"R\":\n                sven_wins += 1\n            elif svens[round_number] == \"R\" and friend_symbol[round_number] == \"S\":\n                sven_wins += 1\n            elif svens[round_number] == \"S\" and friend_symbol[round_number] == \"P\":\n                sven_wins += 1\n        largest_score += sven_wins * 2 + sven_ties\n    print(actual_score)\n    print(largest_score)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    pass\n\nmain()\n"
    }
  ],
  "created": 1649740549,
  "object": "edit"
}
2022-04-12 01:16:02.098649 fix syntax errors 2 ['\n\ndef main():\n    rounds = int(input())\n    svens = input()\n    friends = int(input())\n    friend_symbols = []\n    for i in range(friends):\n        friend_symbols.append(input())\n    actual_score = 0\n    for round_number in range(rounds):\n        wins = 0\n        ties = 0\n        for friend_symbol in friend_symbols:\n            if svens[round_number] == friend_symbol[round_number]:\n                ties += 1\n            elif svens[round_number] == "P" and friend_symbol[round_number] == "R":\n                wins += 1\n            elif svens[round_number] == "R" and friend_symbol[round_number] == "S":\n                wins += 1\n            elif svens[round_number] == "S" and friend_symbol[round_number] == "P":\n                wins += 1\n        actual_score += wins * 2 + ties\n    largest_score = 0\n    for round_number in range(rounds):\n        sven_wins = 0\n        sven_ties = 0\n        for friend_symbol in friend_symbols:\n            if svens[round_number] == friend_symbol[round_number]:\n                sven_ties += 1\n            elif svens[round_number] == "P" and friend_symbol[round_number] == "R":\n                sven_wins += 1\n            elif svens[round_number] == "R" and friend_symbol[round_number] == "S":\n                sven_wins += 1\n            elif svens[round_number] == "S" and friend_symbol[round_number] == "P":\n                sven_wins += 1\n        largest_score += sven_wins * 2 + sven_ties\n    print(actual_score)\n    print(largest_score)\n\nmain()\n', '\n\ndef main():\n    pass\n\nmain()\n']
2022-04-12 01:16:02.098786 size on output set 3
