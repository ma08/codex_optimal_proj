2022-04-11 20:26:42.640587 num operations 2
2022-04-11 20:26:42.640643 size on input set 1
2022-04-11 20:26:44.923229 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        A.sort()\n        i = 0\n        while K > 0 and i < len(A):\n            if A[i] < 0:\n                A[i] = -A[i]\n                K -= 1\n                i += 1\n            else:\n                break\n        if K > 0 and K % 2 == 1:\n            A.sort()\n            A[0] = -A[0]\n        return sum(A)\n"
    },
    {
      "index": 1,
      "text": "# leetcode 1005\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        A.sort()\n        i = 0\n        while K > 0 and i < len(A):\n            if A[i] < 0:\n                A[i] = -A[i]\n                K -= 1\n                i += 1\n            else:\n                break\n        if K > 0 and K % 2 == 1:\n            A.sort()\n            A[0] = -A[0]\n        return sum(A)\n"
    }
  ],
  "created": 1649723202,
  "object": "edit"
}
2022-04-11 20:26:44.923464 fix spelling mistakes 2 ['\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        A.sort()\n        i = 0\n        while K > 0 and i < len(A):\n            if A[i] < 0:\n                A[i] = -A[i]\n                K -= 1\n                i += 1\n            else:\n                break\n        if K > 0 and K % 2 == 1:\n            A.sort()\n            A[0] = -A[0]\n        return sum(A)\n', '# leetcode 1005\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        A.sort()\n        i = 0\n        while K > 0 and i < len(A):\n            if A[i] < 0:\n                A[i] = -A[i]\n                K -= 1\n                i += 1\n            else:\n                break\n        if K > 0 and K % 2 == 1:\n            A.sort()\n            A[0] = -A[0]\n        return sum(A)\n']
2022-04-11 20:26:44.923498 size on output set 2
2022-04-11 20:26:44.923507 size on input set 2
2022-04-11 20:26:47.860235 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# leetcode 1005\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A, K):\n        A.sort()\n        i = 0\n        while K > 0 and i < len(A):\n            if A[i] < 0:\n                A[i] = -A[i]\n                K -= 1\n                i += 1\n            else:\n                break\n        if K > 0 and K % 2 == 1:\n            A.sort()\n            A[0] = -A[0]\n        return sum(A)\n"
    },
    {
      "index": 1,
      "text": "# leetcode 1005\nfrom typing import List\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        A.sort()\n        i = 0\n        while K > 0 and i < len(A):\n            if A[i] < 0:\n                A[i] = -A[i]\n                K -= 1\n                i += 1\n            else:\n                break\n        if K > 0 and K % 2 == 1:\n            A.sort()\n            A[0] = -A[0]\n        return sum(A)\n"
    }
  ],
  "created": 1649723205,
  "object": "edit"
}
2022-04-11 20:26:47.860411 fix syntax errors 2 ['# leetcode 1005\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A, K):\n        A.sort()\n        i = 0\n        while K > 0 and i < len(A):\n            if A[i] < 0:\n                A[i] = -A[i]\n                K -= 1\n                i += 1\n            else:\n                break\n        if K > 0 and K % 2 == 1:\n            A.sort()\n            A[0] = -A[0]\n        return sum(A)\n', '# leetcode 1005\nfrom typing import List\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        A.sort()\n        i = 0\n        while K > 0 and i < len(A):\n            if A[i] < 0:\n                A[i] = -A[i]\n                K -= 1\n                i += 1\n            else:\n                break\n        if K > 0 and K % 2 == 1:\n            A.sort()\n            A[0] = -A[0]\n        return sum(A)\n']
2022-04-11 20:26:49.885601 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "from typing import List\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        A.sort()\n        i = 0\n        while K > 0 and i < len(A):\n            if A[i] < 0:\n                A[i] = -A[i]\n                K -= 1\n                i += 1\n            else:\n                break\n        if K > 0 and K % 2 == 1:\n            A.sort()\n            A[0] = -A[0]\n        return sum(A)\n"
    },
    {
      "index": 1,
      "text": "from typing import List\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        A.sort()\n        i = 0\n        while K > 0 and i < len(A):\n            if A[i] < 0:\n                A[i] = -A[i]\n                K -= 1\n                i += 1\n            else:\n                break\n        if K > 0 and K % 2 == 1:\n            A.sort()\n            A[0] = -A[0]\n        return sum(A)\n"
    }
  ],
  "created": 1649723208,
  "object": "edit"
}
2022-04-11 20:26:49.885901 fix syntax errors 2 ['from typing import List\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        A.sort()\n        i = 0\n        while K > 0 and i < len(A):\n            if A[i] < 0:\n                A[i] = -A[i]\n                K -= 1\n                i += 1\n            else:\n                break\n        if K > 0 and K % 2 == 1:\n            A.sort()\n            A[0] = -A[0]\n        return sum(A)\n', 'from typing import List\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        A.sort()\n        i = 0\n        while K > 0 and i < len(A):\n            if A[i] < 0:\n                A[i] = -A[i]\n                K -= 1\n                i += 1\n            else:\n                break\n        if K > 0 and K % 2 == 1:\n            A.sort()\n            A[0] = -A[0]\n        return sum(A)\n']
2022-04-11 20:26:49.885938 size on output set 3
2022-04-11 20:26:49.885964 num operations 2
2022-04-11 20:26:49.885973 size on input set 1
2022-04-11 20:26:51.927203 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "import heapq\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        heapq.heapify(A)\n        for _ in range(K):\n            heapq.heappush(A, heapq.heappop(A) * -1)\n        return sum(A)\n"
    },
    {
      "index": 1,
      "text": "import heapq\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        heapq.heapify(A)\n        for _ in range(K):\n            heapq.heappush(A, heapq.heappop(A) * -1)\n        return sum(A)\n"
    }
  ],
  "created": 1649723210,
  "object": "edit"
}
2022-04-11 20:26:51.927521 fix spelling mistakes 2 ['import heapq\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        heapq.heapify(A)\n        for _ in range(K):\n            heapq.heappush(A, heapq.heappop(A) * -1)\n        return sum(A)\n', 'import heapq\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        heapq.heapify(A)\n        for _ in range(K):\n            heapq.heappush(A, heapq.heappop(A) * -1)\n        return sum(A)\n']
2022-04-11 20:26:51.927568 size on output set 1
2022-04-11 20:26:51.927580 size on input set 1
2022-04-11 20:26:56.532968 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "class Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        A.sort()\n        for _ in range(K):\n            A[0] = -A[0]\n            A.sort()\n        return sum(A)\n"
    },
    {
      "index": 1,
      "text": "def find_max_min(numbers):\n    numbers.sort()\n    return numbers[0], numbers[-1]\n"
    }
  ],
  "created": 1649723212,
  "object": "edit"
}
2022-04-11 20:26:56.533216 fix syntax errors 2 ['class Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n        A.sort()\n        for _ in range(K):\n            A[0] = -A[0]\n            A.sort()\n        return sum(A)\n', 'def find_max_min(numbers):\n    numbers.sort()\n    return numbers[0], numbers[-1]\n']
2022-04-11 20:26:56.533380 size on output set 2
