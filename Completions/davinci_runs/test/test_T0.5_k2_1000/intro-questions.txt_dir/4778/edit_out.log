2022-04-11 23:41:08.144996 num operations 2
2022-04-11 23:41:08.145025 size on input set 1
2022-04-11 23:41:21.486531 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef solve(input):\n    \"\"\"\n    >>> solve('5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98')\n    'B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693'\n    >>> solve('4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99')\n    'A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372'\n    \"\"\"\n    P, D = [int(x) for x in input.split()[0:2]]\n    precincts = []\n    for i in range(P):\n        precincts.append([int(x) for x in input.split()[2:5]])\n    districts = {}\n    for precinct in precincts:\n        if precinct[0] not in districts:\n            districts[precinct[0]] = [[precinct[1], precinct[2]]]\n        else:\n            districts[precinct[0]].append([precinct[1], precinct[2]])\n    districts_results = []\n    for district in districts:\n        votes = districts[district]\n        votes_a = sum([v[0] for v in votes])\n        votes_b = sum([v[1] for v in votes])\n        if votes_a > votes_b:\n            districts_results.append(['A', votes_a - (votes_a + votes_b) / 2 - 1, votes_b])\n        else:\n            districts_results.append(['B', votes_a, votes_b - (votes_a + votes_b) / 2 - 1])\n    total_votes = sum([districts_results[i][1] + districts_results[i][2] for i in range(len(districts_results))])\n    total_wasted_a = sum([districts_results[i][1] for i in range(len(districts_results))])\n    total_wasted_b = sum([districts_results[i][2] for i in range(len(districts_results))])\n    output = ''\n    for district in districts_results:\n        output = output + district[0] + ' ' + str(district[1]) + ' ' + str(district[2]) + '\\n'\n    output = output + str(abs(total_wasted_a - total_wasted_b) / float(total_votes))\n    return output\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef solve(input):\n    \"\"\"\n    >>> solve('5 3\\\\n1 100 200\\\\n2 100 99\\\\n3 100 50\\\\n4 100 50\\\\n5 100 98')\n    'B 100 49\\\\nA 1 197\\\\nA 49 100\\\\n0.1965897693'\n    >>> solve('4 4\\\\n3 100 99\\\\n2 100 99\\\\n1 100 99\\\\n4 100 99\\\\n5 100 99')\n    'A 0 99\\\\nA 0 99\\\\nA 0 99\\\\nA 0 99\\\\n0.4974874372'\n    \"\"\"\n    P, D = [int(x) for x in input.split()[0:2]]  # P - number of precincts, D - number of districts\n    precincts = []\n    for i in range(P):\n        precincts.append([int(x) for x in input.split()[2:5]])  # list of precincts\n    districts = {}\n    for precinct in precincts:\n        if precinct[0] not in districts:  # precinct[0] - number of district\n            districts[precinct[0]] = [[precinct[1], precinct[2]]]\n        else:\n            districts[precinct[0]].append([precinct[1], precinct[2]])\n    districts_results = []  # list of districts results\n    for district in districts:\n        votes = districts[district]  # list of votes in district\n        votes_a = sum([v[0] for v in votes])\n        votes_b = sum([v[1] for v in votes])\n        if votes_a > votes_b:\n            districts_results.append(['A', votes_a - (votes_a + votes_b) / 2 - 1, votes_b])\n        else:\n            districts_results.append(['B', votes_a, votes_b - (votes_a + votes_b) / 2 - 1])\n    total_votes = sum([districts_results[i][1] + districts_results[i][2] for i in range(len(districts_results))])  # total votes\n    total_wasted_a = sum([districts_results[i][1] for i in range(len(districts_results))])  # total wasted votes for A\n    total_wasted_b = sum([districts_results[i][2] for i in range(len(districts_results))])  # total wasted votes for B\n    output = ''\n    for district in districts_results:\n        output = output + district[0] + ' ' + str(district[1]) + ' ' + str(district[2]) + '\\\\n'\n    output = output + str(abs(total_wasted_a - total_wasted_b) / float(total_votes))\n    return output\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n"
    }
  ],
  "created": 1649734868,
  "object": "edit"
}
2022-04-11 23:41:21.486755 fix spelling mistakes 2 ['\n\ndef solve(input):\n    """\n    >>> solve(\'5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\')\n    \'B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\'\n    >>> solve(\'4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\')\n    \'A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372\'\n    """\n    P, D = [int(x) for x in input.split()[0:2]]\n    precincts = []\n    for i in range(P):\n        precincts.append([int(x) for x in input.split()[2:5]])\n    districts = {}\n    for precinct in precincts:\n        if precinct[0] not in districts:\n            districts[precinct[0]] = [[precinct[1], precinct[2]]]\n        else:\n            districts[precinct[0]].append([precinct[1], precinct[2]])\n    districts_results = []\n    for district in districts:\n        votes = districts[district]\n        votes_a = sum([v[0] for v in votes])\n        votes_b = sum([v[1] for v in votes])\n        if votes_a > votes_b:\n            districts_results.append([\'A\', votes_a - (votes_a + votes_b) / 2 - 1, votes_b])\n        else:\n            districts_results.append([\'B\', votes_a, votes_b - (votes_a + votes_b) / 2 - 1])\n    total_votes = sum([districts_results[i][1] + districts_results[i][2] for i in range(len(districts_results))])\n    total_wasted_a = sum([districts_results[i][1] for i in range(len(districts_results))])\n    total_wasted_b = sum([districts_results[i][2] for i in range(len(districts_results))])\n    output = \'\'\n    for district in districts_results:\n        output = output + district[0] + \' \' + str(district[1]) + \' \' + str(district[2]) + \'\\n\'\n    output = output + str(abs(total_wasted_a - total_wasted_b) / float(total_votes))\n    return output\n\n\nif __name__ == \'__main__\':\n    import doctest\n    doctest.testmod()\n', '\n\ndef solve(input):\n    """\n    >>> solve(\'5 3\\\\n1 100 200\\\\n2 100 99\\\\n3 100 50\\\\n4 100 50\\\\n5 100 98\')\n    \'B 100 49\\\\nA 1 197\\\\nA 49 100\\\\n0.1965897693\'\n    >>> solve(\'4 4\\\\n3 100 99\\\\n2 100 99\\\\n1 100 99\\\\n4 100 99\\\\n5 100 99\')\n    \'A 0 99\\\\nA 0 99\\\\nA 0 99\\\\nA 0 99\\\\n0.4974874372\'\n    """\n    P, D = [int(x) for x in input.split()[0:2]]  # P - number of precincts, D - number of districts\n    precincts = []\n    for i in range(P):\n        precincts.append([int(x) for x in input.split()[2:5]])  # list of precincts\n    districts = {}\n    for precinct in precincts:\n        if precinct[0] not in districts:  # precinct[0] - number of district\n            districts[precinct[0]] = [[precinct[1], precinct[2]]]\n        else:\n            districts[precinct[0]].append([precinct[1], precinct[2]])\n    districts_results = []  # list of districts results\n    for district in districts:\n        votes = districts[district]  # list of votes in district\n        votes_a = sum([v[0] for v in votes])\n        votes_b = sum([v[1] for v in votes])\n        if votes_a > votes_b:\n            districts_results.append([\'A\', votes_a - (votes_a + votes_b) / 2 - 1, votes_b])\n        else:\n            districts_results.append([\'B\', votes_a, votes_b - (votes_a + votes_b) / 2 - 1])\n    total_votes = sum([districts_results[i][1] + districts_results[i][2] for i in range(len(districts_results))])  # total votes\n    total_wasted_a = sum([districts_results[i][1] for i in range(len(districts_results))])  # total wasted votes for A\n    total_wasted_b = sum([districts_results[i][2] for i in range(len(districts_results))])  # total wasted votes for B\n    output = \'\'\n    for district in districts_results:\n        output = output + district[0] + \' \' + str(district[1]) + \' \' + str(district[2]) + \'\\\\n\'\n    output = output + str(abs(total_wasted_a - total_wasted_b) / float(total_votes))\n    return output\n\n\nif __name__ == \'__main__\':\n    import doctest\n    doctest.testmod()\n']
2022-04-11 23:41:21.486812 size on output set 2
2022-04-11 23:41:21.486820 size on input set 2
2022-04-11 23:41:28.046722 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef solve(input):\n    \"\"\"\n    >>> solve('5 3\\\\n1 100 200\\\\n2 100 99\\\\n3 100 50\\\\n4 100 50\\\\n5 100 98')\\\\n'\n    'B 100 49\\\\nA 1 197\\\\nA 49 100\\\\n0.1965897693\\\\n'\n    >>> solve('4 4\\\\n3 100 99\\\\n2 100 99\\\\n1 100 99\\\\n4 100 99\\\\n5 100 99')\\\\n'\n    'A 0 99\\\\nA 0 99\\\\nA 0 99\\\\nA 0 99\\\\n0.4974874372\\\\n'\n    \"\"\"\n    P, D = [int(x) for x in input.split()[0:2]]  # P - number of precincts, D - number of districts\n    precincts = []\n    for i in range(P):\n        precincts.append([int(x) for x in input.split()[2:5]])  # list of precincts\n    districts = {}\n    for precinct in precincts:\n        if precinct[0] not in districts:  # precinct[0] - number of district\n            districts[precinct[0]] = [[precinct[1], precinct[2]]]\n        else:\n            districts[precinct[0]].append([precinct[1], precinct[2]])\n    districts_results = []  # list of districts results\n    for district in districts:\n        votes = districts[district]  # list of votes in district\n        votes_a = sum([v[0] for v in votes])\n        votes_b = sum([v[1] for v in votes])\n        if votes_a > votes_b:\n            districts_results.append(['A', votes_a - (votes_a + votes_b) / 2 - 1, votes_b])\n        else:\n            districts_results.append(['B', votes_a, votes_b - (votes_a + votes_b) / 2 - 1])\n    total_votes = sum([districts_results[i][1] + districts_results[i][2] for i in range(len(districts_results))])  # total votes\n    total_wasted_a = sum([districts_results[i][1] for i in range(len(districts_results))])  # total wasted votes for A\n    total_wasted_b = sum([districts_results[i][2] for i in range(len(districts_results))])  # total wasted votes for B\n    output = ''\n    for district in districts_results:\n        output = output + district[0] + ' ' + str(district[1]) + ' ' + str(district[2]) + '\\\\n'\n    output = output + str(abs(total_wasted_a - total_wasted_b) / float(total_votes))\n    return output\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef solve(input):\n    \"\"\"\n    >>> solve('5 3\\\\n1 100 200\\\\n2 100 99\\\\n3 100 50\\\\n4 100 50\\\\n5 100 98')\\\\n\n    'B 100 49\\\\nA 1 197\\\\nA 49 100\\\\n0.1965897693'\\\\n\n    >>> solve('4 4\\\\n3 100 99\\\\n2 100 99\\\\n1 100 99\\\\n4 100 99\\\\n5 100 99')\\\\n\n    'A 0 99\\\\nA 0 99\\\\nA 0 99\\\\nA 0 99\\\\n0.4974874372'\\\\n\n    \"\"\"\n    P, D = [int(x) for x in input.split()[0:2]]  # P - number of precincts, D - number of districts\n    precincts = []\n    for i in range(P):\n        precincts.append([int(x) for x in input.split()[2:5]])  # list of precincts\n    districts = {}\n    for precinct in precincts:\n        if precinct[0] not in districts:  # precinct[0] - number of district\n            districts[precinct[0]] = [[precinct[1], precinct[2]]]\n        else:\n            districts[precinct[0]].append([precinct[1], precinct[2]])\n    districts_results = []  # list of districts results\n    for district in districts:\n        votes = districts[district]  # list of votes in district\n        votes_a = sum([v[0] for v in votes])\n        votes_b = sum([v[1] for v in votes])\n        if votes_a > votes_b:\n            districts_results.append(['A', votes_a - (votes_a + votes_b) / 2 - 1, votes_b])\n        else:\n            districts_results.append(['B', votes_a, votes_b - (votes_a + votes_b) / 2 - 1])\n    total_votes = sum([districts_results[i][1] + districts_results[i][2] for i in range(len(districts_results))])  # total votes\n    total_wasted_a = sum([districts_results[i][1] for i in range(len(districts_results))])  # total wasted votes for A\n    total_wasted_b = sum([districts_results[i][2] for i in range(len(districts_results))])  # total wasted votes for B\n    output = ''\n    for district in districts_results:\n        output = output + district[0] + ' ' + str(district[1]) + ' ' + str(district[2]) + '\\\\n'\n    output = output + str(abs(total_wasted_a - total_wasted_b) / float(total_votes))\n    return output\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n"
    }
  ],
  "created": 1649734881,
  "object": "edit"
}
2022-04-11 23:41:28.046982 fix syntax errors 2 ['\n\ndef solve(input):\n    """\n    >>> solve(\'5 3\\\\n1 100 200\\\\n2 100 99\\\\n3 100 50\\\\n4 100 50\\\\n5 100 98\')\\\\n\'\n    \'B 100 49\\\\nA 1 197\\\\nA 49 100\\\\n0.1965897693\\\\n\'\n    >>> solve(\'4 4\\\\n3 100 99\\\\n2 100 99\\\\n1 100 99\\\\n4 100 99\\\\n5 100 99\')\\\\n\'\n    \'A 0 99\\\\nA 0 99\\\\nA 0 99\\\\nA 0 99\\\\n0.4974874372\\\\n\'\n    """\n    P, D = [int(x) for x in input.split()[0:2]]  # P - number of precincts, D - number of districts\n    precincts = []\n    for i in range(P):\n        precincts.append([int(x) for x in input.split()[2:5]])  # list of precincts\n    districts = {}\n    for precinct in precincts:\n        if precinct[0] not in districts:  # precinct[0] - number of district\n            districts[precinct[0]] = [[precinct[1], precinct[2]]]\n        else:\n            districts[precinct[0]].append([precinct[1], precinct[2]])\n    districts_results = []  # list of districts results\n    for district in districts:\n        votes = districts[district]  # list of votes in district\n        votes_a = sum([v[0] for v in votes])\n        votes_b = sum([v[1] for v in votes])\n        if votes_a > votes_b:\n            districts_results.append([\'A\', votes_a - (votes_a + votes_b) / 2 - 1, votes_b])\n        else:\n            districts_results.append([\'B\', votes_a, votes_b - (votes_a + votes_b) / 2 - 1])\n    total_votes = sum([districts_results[i][1] + districts_results[i][2] for i in range(len(districts_results))])  # total votes\n    total_wasted_a = sum([districts_results[i][1] for i in range(len(districts_results))])  # total wasted votes for A\n    total_wasted_b = sum([districts_results[i][2] for i in range(len(districts_results))])  # total wasted votes for B\n    output = \'\'\n    for district in districts_results:\n        output = output + district[0] + \' \' + str(district[1]) + \' \' + str(district[2]) + \'\\\\n\'\n    output = output + str(abs(total_wasted_a - total_wasted_b) / float(total_votes))\n    return output\n\n\nif __name__ == \'__main__\':\n    import doctest\n    doctest.testmod()\n', '\n\ndef solve(input):\n    """\n    >>> solve(\'5 3\\\\n1 100 200\\\\n2 100 99\\\\n3 100 50\\\\n4 100 50\\\\n5 100 98\')\\\\n\n    \'B 100 49\\\\nA 1 197\\\\nA 49 100\\\\n0.1965897693\'\\\\n\n    >>> solve(\'4 4\\\\n3 100 99\\\\n2 100 99\\\\n1 100 99\\\\n4 100 99\\\\n5 100 99\')\\\\n\n    \'A 0 99\\\\nA 0 99\\\\nA 0 99\\\\nA 0 99\\\\n0.4974874372\'\\\\n\n    """\n    P, D = [int(x) for x in input.split()[0:2]]  # P - number of precincts, D - number of districts\n    precincts = []\n    for i in range(P):\n        precincts.append([int(x) for x in input.split()[2:5]])  # list of precincts\n    districts = {}\n    for precinct in precincts:\n        if precinct[0] not in districts:  # precinct[0] - number of district\n            districts[precinct[0]] = [[precinct[1], precinct[2]]]\n        else:\n            districts[precinct[0]].append([precinct[1], precinct[2]])\n    districts_results = []  # list of districts results\n    for district in districts:\n        votes = districts[district]  # list of votes in district\n        votes_a = sum([v[0] for v in votes])\n        votes_b = sum([v[1] for v in votes])\n        if votes_a > votes_b:\n            districts_results.append([\'A\', votes_a - (votes_a + votes_b) / 2 - 1, votes_b])\n        else:\n            districts_results.append([\'B\', votes_a, votes_b - (votes_a + votes_b) / 2 - 1])\n    total_votes = sum([districts_results[i][1] + districts_results[i][2] for i in range(len(districts_results))])  # total votes\n    total_wasted_a = sum([districts_results[i][1] for i in range(len(districts_results))])  # total wasted votes for A\n    total_wasted_b = sum([districts_results[i][2] for i in range(len(districts_results))])  # total wasted votes for B\n    output = \'\'\n    for district in districts_results:\n        output = output + district[0] + \' \' + str(district[1]) + \' \' + str(district[2]) + \'\\\\n\'\n    output = output + str(abs(total_wasted_a - total_wasted_b) / float(total_votes))\n    return output\n\n\nif __name__ == \'__main__\':\n    import doctest\n    doctest.testmod()\n']
2022-04-11 23:41:38.754803 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef solve(input):\n    \"\"\"\n    >>> solve('5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98')\n    'B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693'\n    >>> solve('4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99')\n    'A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372'\n    \"\"\"\n    P, D = [int(x) for x in input.split()[0:2]]  # P = precincts, D = districts\n    precincts = []\n    for i in range(P):\n        precincts.append([int(x) for x in input.split()[2 + i * 3:5 + i * 3]])\n    districts = {}\n    for precinct in precincts:\n        if precinct[0] not in districts:\n            districts[precinct[0]] = [[precinct[1], precinct[2]]]\n        else:\n            districts[precinct[0]].append([precinct[1], precinct[2]])\n    districts_results = []\n    for district in districts:\n        votes = districts[district]\n        votes_a = sum([v[0] for v in votes])\n        votes_b = sum([v[1] for v in votes])\n        if votes_a > votes_b:\n            districts_results.append(['A', votes_a - (votes_a + votes_b) / 2 - 1, votes_b])\n        else:\n            districts_results.append(['B', votes_a, votes_b - (votes_a + votes_b) / 2 - 1])\n    total_votes = sum([districts_results[i][1] + districts_results[i][2] for i in range(len(districts_results))])  # total votes\n    total_wasted_a = sum([districts_results[i][1] for i in range(len(districts_results))])  # total wasted votes for A\n    total_wasted_b = sum([districts_results[i][2] for i in range(len(districts_results))])  # total wasted votes for B\n    output = ''\n    for district in districts_results:\n        output = output + district[0] + ' ' + str(district[1]) + ' ' + str(district[2]) + '\\n'\n    output = output + str(abs(total_wasted_a - total_wasted_b) / float(total_votes))\n    return output\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef solve(input):\n    \"\"\"\n    >>> solve('5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98')\n    'B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693'\n    >>> solve('4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99')\n    'A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372'\n    \"\"\"\n    P, D = [int(x) for x in input.split()[0:2]]  # P = number of precincts, D = number of districts\n    precincts = []\n    for i in range(P):\n        precincts.append([int(x) for x in input.split()[2:5]])\n    districts = {}\n    for precinct in precincts:\n        if precinct[0] not in districts:\n            districts[precinct[0]] = [[precinct[1], precinct[2]]]\n        else:\n            districts[precinct[0]].append([precinct[1], precinct[2]])\n    districts_results = []  # [['A', wasted votes A, wasted votes B], ['B', wasted votes A, wasted votes B], ...]\n    for district in districts:\n        votes = districts[district]  # [[votes A, votes B], [votes A, votes B], ...]\n        votes_a = sum([v[0] for v in votes])  # total votes A\n        votes_b = sum([v[1] for v in votes])  # total votes B\n        if votes_a > votes_b:\n            districts_results.append(['A', votes_a - (votes_a + votes_b) / 2 - 1, votes_b])\n        else:\n            districts_results.append(['B', votes_a, votes_b - (votes_a + votes_b) / 2 - 1])\n    total_votes = sum([districts_results[i][1] + districts_results[i][2] for i in range(len(districts_results))])  # total votes\n    total_wasted_a = sum([districts_results[i][1] for i in range(len(districts_results))])  # total wasted votes A\n    total_wasted_b = sum([districts_results[i][2] for i in range(len(districts_results))])  # total wasted votes B\n    output = ''\n    for district in districts_results:\n        output = output + district[0] + ' ' + str(district[1]) + ' ' + str(district[2]) + '\\n'\n    output = output + str(abs(total_wasted_a - total_wasted_b) / float(total_votes))\n    return output\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n"
    }
  ],
  "created": 1649734888,
  "object": "edit"
}
2022-04-11 23:41:38.755397 fix syntax errors 2 ['\n\ndef solve(input):\n    """\n    >>> solve(\'5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\')\n    \'B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\'\n    >>> solve(\'4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\')\n    \'A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372\'\n    """\n    P, D = [int(x) for x in input.split()[0:2]]  # P = precincts, D = districts\n    precincts = []\n    for i in range(P):\n        precincts.append([int(x) for x in input.split()[2 + i * 3:5 + i * 3]])\n    districts = {}\n    for precinct in precincts:\n        if precinct[0] not in districts:\n            districts[precinct[0]] = [[precinct[1], precinct[2]]]\n        else:\n            districts[precinct[0]].append([precinct[1], precinct[2]])\n    districts_results = []\n    for district in districts:\n        votes = districts[district]\n        votes_a = sum([v[0] for v in votes])\n        votes_b = sum([v[1] for v in votes])\n        if votes_a > votes_b:\n            districts_results.append([\'A\', votes_a - (votes_a + votes_b) / 2 - 1, votes_b])\n        else:\n            districts_results.append([\'B\', votes_a, votes_b - (votes_a + votes_b) / 2 - 1])\n    total_votes = sum([districts_results[i][1] + districts_results[i][2] for i in range(len(districts_results))])  # total votes\n    total_wasted_a = sum([districts_results[i][1] for i in range(len(districts_results))])  # total wasted votes for A\n    total_wasted_b = sum([districts_results[i][2] for i in range(len(districts_results))])  # total wasted votes for B\n    output = \'\'\n    for district in districts_results:\n        output = output + district[0] + \' \' + str(district[1]) + \' \' + str(district[2]) + \'\\n\'\n    output = output + str(abs(total_wasted_a - total_wasted_b) / float(total_votes))\n    return output\n\n\nif __name__ == \'__main__\':\n    import doctest\n    doctest.testmod()\n', '\n\ndef solve(input):\n    """\n    >>> solve(\'5 3\\n1 100 200\\n2 100 99\\n3 100 50\\n3 100 50\\n2 100 98\')\n    \'B 100 49\\nA 1 197\\nA 49 100\\n0.1965897693\'\n    >>> solve(\'4 4\\n3 100 99\\n2 100 99\\n1 100 99\\n4 100 99\')\n    \'A 0 99\\nA 0 99\\nA 0 99\\nA 0 99\\n0.4974874372\'\n    """\n    P, D = [int(x) for x in input.split()[0:2]]  # P = number of precincts, D = number of districts\n    precincts = []\n    for i in range(P):\n        precincts.append([int(x) for x in input.split()[2:5]])\n    districts = {}\n    for precinct in precincts:\n        if precinct[0] not in districts:\n            districts[precinct[0]] = [[precinct[1], precinct[2]]]\n        else:\n            districts[precinct[0]].append([precinct[1], precinct[2]])\n    districts_results = []  # [[\'A\', wasted votes A, wasted votes B], [\'B\', wasted votes A, wasted votes B], ...]\n    for district in districts:\n        votes = districts[district]  # [[votes A, votes B], [votes A, votes B], ...]\n        votes_a = sum([v[0] for v in votes])  # total votes A\n        votes_b = sum([v[1] for v in votes])  # total votes B\n        if votes_a > votes_b:\n            districts_results.append([\'A\', votes_a - (votes_a + votes_b) / 2 - 1, votes_b])\n        else:\n            districts_results.append([\'B\', votes_a, votes_b - (votes_a + votes_b) / 2 - 1])\n    total_votes = sum([districts_results[i][1] + districts_results[i][2] for i in range(len(districts_results))])  # total votes\n    total_wasted_a = sum([districts_results[i][1] for i in range(len(districts_results))])  # total wasted votes A\n    total_wasted_b = sum([districts_results[i][2] for i in range(len(districts_results))])  # total wasted votes B\n    output = \'\'\n    for district in districts_results:\n        output = output + district[0] + \' \' + str(district[1]) + \' \' + str(district[2]) + \'\\n\'\n    output = output + str(abs(total_wasted_a - total_wasted_b) / float(total_votes))\n    return output\n\n\nif __name__ == \'__main__\':\n    import doctest\n    doctest.testmod()\n']
2022-04-11 23:41:38.755495 size on output set 4
2022-04-11 23:41:38.755539 num operations 2
2022-04-11 23:41:38.755564 size on input set 1
2022-04-11 23:41:47.542701 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef efficiency_gap(precincts, districts):\n    # A is party A, B is party B\n    A, B = 0, 0\n    for d in range(1, districts+1):\n        # Find the winning party\n        votesA, votesB = 0, 0\n        for p in precincts:\n            if p[0] == d:\n                votesA += p[1]\n                votesB += p[2]\n        if votesA > votesB:\n            A += 1\n        else:\n            B += 1\n        # Find the wasted votes\n        if votesA > votesB:\n            print(\"A\", votesB, votesA-votesB-1)\n        else:\n            print(\"B\", votesA, votesB-votesA-1)\n    V = sum([sum(p[1:3]) for p in precincts])\n    wA = sum([p[2] for p in precincts if p[1] > p[2]])\n    wB = sum([p[1] for p in precincts if p[1] < p[2]])\n    print(\"{0:.10f}\".format(abs(wA-wB)/V))\n\nefficiency_gap([[1, 100, 200], [2, 100, 99], [3, 100, 50], [3, 100, 50], [2, 100, 98]], 3)\nefficiency_gap([[3, 100, 99], [2, 100, 99], [1, 100, 99], [4, 100, 99]], 4)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef efficiency_gap(precincts, districts):\n    # A is party A, B is party B\n    A, B = 0, 0\n    for d in range(1, districts + 1):\n        # Find the winning party\n        votesA, votesB = 0, 0\n        for p in precincts:\n            if p[0] == d:\n                votesA += p[1]\n                votesB += p[2]\n        if votesA > votesB:\n            A += 1\n        else:\n            B += 1\n        # Find the wasted votes\n        #     print(\"A\", votesB, votesA-votesB-1)\n        # else:\n        #     print(\"B\", votesA, votesB-votesA-1)\n    V = sum([sum(p[1:3]) for p in precincts])\n    wA = sum([p[2] for p in precincts if p[1] > p[2]])\n    wB = sum([p[1] for p in precincts if p[1] < p[2]])\n    print(\"{0:.10f}\".format(abs(wA - wB) / V))\n\n\nefficiency_gap([[1, 100, 200], [2, 100, 99], [3, 100, 50], [3, 100, 50], [2, 100, 98]], 3)\nefficiency_gap([[3, 100, 99], [2, 100, 99], [1, 100, 99], [4, 100, 99]], 4)\n"
    }
  ],
  "created": 1649734898,
  "object": "edit"
}
2022-04-11 23:41:47.542821 fix spelling mistakes 2 ['\n\ndef efficiency_gap(precincts, districts):\n    # A is party A, B is party B\n    A, B = 0, 0\n    for d in range(1, districts+1):\n        # Find the winning party\n        votesA, votesB = 0, 0\n        for p in precincts:\n            if p[0] == d:\n                votesA += p[1]\n                votesB += p[2]\n        if votesA > votesB:\n            A += 1\n        else:\n            B += 1\n        # Find the wasted votes\n        if votesA > votesB:\n            print("A", votesB, votesA-votesB-1)\n        else:\n            print("B", votesA, votesB-votesA-1)\n    V = sum([sum(p[1:3]) for p in precincts])\n    wA = sum([p[2] for p in precincts if p[1] > p[2]])\n    wB = sum([p[1] for p in precincts if p[1] < p[2]])\n    print("{0:.10f}".format(abs(wA-wB)/V))\n\nefficiency_gap([[1, 100, 200], [2, 100, 99], [3, 100, 50], [3, 100, 50], [2, 100, 98]], 3)\nefficiency_gap([[3, 100, 99], [2, 100, 99], [1, 100, 99], [4, 100, 99]], 4)\n', '\n\ndef efficiency_gap(precincts, districts):\n    # A is party A, B is party B\n    A, B = 0, 0\n    for d in range(1, districts + 1):\n        # Find the winning party\n        votesA, votesB = 0, 0\n        for p in precincts:\n            if p[0] == d:\n                votesA += p[1]\n                votesB += p[2]\n        if votesA > votesB:\n            A += 1\n        else:\n            B += 1\n        # Find the wasted votes\n        #     print("A", votesB, votesA-votesB-1)\n        # else:\n        #     print("B", votesA, votesB-votesA-1)\n    V = sum([sum(p[1:3]) for p in precincts])\n    wA = sum([p[2] for p in precincts if p[1] > p[2]])\n    wB = sum([p[1] for p in precincts if p[1] < p[2]])\n    print("{0:.10f}".format(abs(wA - wB) / V))\n\n\nefficiency_gap([[1, 100, 200], [2, 100, 99], [3, 100, 50], [3, 100, 50], [2, 100, 98]], 3)\nefficiency_gap([[3, 100, 99], [2, 100, 99], [1, 100, 99], [4, 100, 99]], 4)\n']
2022-04-11 23:41:47.542840 size on output set 2
2022-04-11 23:41:47.542844 size on input set 2
2022-04-11 23:42:00.541256 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef efficiency_gap(precincts, districts):\n    # A is party A, B is party B\n    A, B = 0, 0\n    # Find the winning party\n    votesA, votesB = 0, 0\n    for p in precincts:\n        votesA += p[1]\n        votesB += p[2]\n    if votesA > votesB:\n        A += 1\n    else:\n        B += 1\n    # Find the wasted votes\n    if votesA > votesB:\n        print(\"A\", votesB, votesA-votesB-1)\n    else:\n        print(\"B\", votesA, votesB-votesA-1)\n    V = sum([sum(p[1:3]) for p in precincts])\n    wA = sum([p[2] for p in precincts if p[1] > p[2]])\n    wB = sum([p[1] for p in precincts if p[1] < p[2]])\n    print(\"{0:.10f}\".format(abs(wA-wB)/V))\n\nefficiency_gap([[1, 100, 200], [2, 100, 99], [3, 100, 50], [3, 100, 50], [2, 100, 98]], 3)\nefficiency_gap([[3, 100, 99], [2, 100, 99], [1, 100, 99], [4, 100, 99]], 4)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef efficiency_gap(precincts, districts, partyA, partyB):\n    # A is party A, B is party B\n    A = 0\n    B = 0\n    for d in range(1, districts+1):\n        # Find the winning party\n        votesA = 0\n        votesB = 0\n        for p in precincts:\n            if p[0] == d:\n                votesA += p[partyA]\n                votesB += p[partyB]\n        if votesA > votesB:\n            A += 1\n        else:\n            B += 1\n        # Find the wasted votes\n            print(\"A\", votesB, votesA - votesB - 1)\n        else: \n            print(\"B\", votesA, votesB - votesA - 1)\n    V = sum([sum(p[partyA:partyB+1]) for p in precincts])\n    wA = sum([p[partyB] for p in precincts if p[partyA] > p[partyB]])\n    wB = sum([p[partyA] for p in precincts if p[partyA] < p[partyB]])\n    print(\"{0:.10f}\".format(abs(wA - wB) / V))\n\nefficiency_gap([[1, 100, 200], [2, 100, 99], [3, 100, 50], [3, 100, 50], [2, 100, 98]], 3, 1, 2)\nefficiency_gap([[3, 100, 99], [2, 100, 99], [1, 100, 99], [4, 100, 99]], 4, 1, 2)\n"
    }
  ],
  "created": 1649734907,
  "object": "edit"
}
2022-04-11 23:42:00.541451 fix syntax errors 2 ['\n\ndef efficiency_gap(precincts, districts):\n    # A is party A, B is party B\n    A, B = 0, 0\n    # Find the winning party\n    votesA, votesB = 0, 0\n    for p in precincts:\n        votesA += p[1]\n        votesB += p[2]\n    if votesA > votesB:\n        A += 1\n    else:\n        B += 1\n    # Find the wasted votes\n    if votesA > votesB:\n        print("A", votesB, votesA-votesB-1)\n    else:\n        print("B", votesA, votesB-votesA-1)\n    V = sum([sum(p[1:3]) for p in precincts])\n    wA = sum([p[2] for p in precincts if p[1] > p[2]])\n    wB = sum([p[1] for p in precincts if p[1] < p[2]])\n    print("{0:.10f}".format(abs(wA-wB)/V))\n\nefficiency_gap([[1, 100, 200], [2, 100, 99], [3, 100, 50], [3, 100, 50], [2, 100, 98]], 3)\nefficiency_gap([[3, 100, 99], [2, 100, 99], [1, 100, 99], [4, 100, 99]], 4)\n', '\n\ndef efficiency_gap(precincts, districts, partyA, partyB):\n    # A is party A, B is party B\n    A = 0\n    B = 0\n    for d in range(1, districts+1):\n        # Find the winning party\n        votesA = 0\n        votesB = 0\n        for p in precincts:\n            if p[0] == d:\n                votesA += p[partyA]\n                votesB += p[partyB]\n        if votesA > votesB:\n            A += 1\n        else:\n            B += 1\n        # Find the wasted votes\n            print("A", votesB, votesA - votesB - 1)\n        else: \n            print("B", votesA, votesB - votesA - 1)\n    V = sum([sum(p[partyA:partyB+1]) for p in precincts])\n    wA = sum([p[partyB] for p in precincts if p[partyA] > p[partyB]])\n    wB = sum([p[partyA] for p in precincts if p[partyA] < p[partyB]])\n    print("{0:.10f}".format(abs(wA - wB) / V))\n\nefficiency_gap([[1, 100, 200], [2, 100, 99], [3, 100, 50], [3, 100, 50], [2, 100, 98]], 3, 1, 2)\nefficiency_gap([[3, 100, 99], [2, 100, 99], [1, 100, 99], [4, 100, 99]], 4, 1, 2)\n']
2022-04-11 23:42:07.221767 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef efficiency_gap(precincts, districts):\n    # A is party A, B is party B\n    A, B = 0, 0\n    for d in range(1, districts + 1):\n        # Find the winning party\n        votesA, votesB = 0, 0\n        for p in precincts:\n            if p[0] == d:\n                votesA += p[1]\n                votesB += p[2]\n        if votesA > votesB:\n            A += 1\n        else:\n            B += 1\n        # Find the wasted votes\n        # print(\"A\", votesB, votesA-votesB-1)\n        # print(\"B\", votesA, votesB-votesA-1)\n    V = sum([sum(p[1:3]) for p in precincts])\n    wA = sum([p[2] for p in precincts if p[1] > p[2]])\n    wB = sum([p[1] for p in precincts if p[1] < p[2]])\n    print(\"{0:.10f}\".format(abs(wA - wB) / V))\n\n\nefficiency_gap([[1, 100, 200], [2, 100, 99], [3, 100, 50], [3, 100, 50], [2, 100, 98]], 3)\nefficiency_gap([[3, 100, 99], [2, 100, 99], [1, 100, 99], [4, 100, 99]], 4)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef efficiency_gap(precincts, districts):\n    # A is party A, B is party B\n    A, B = 0, 0\n    for d in range(1, districts + 1):\n        # Find the winning party\n        votesA, votesB = 0, 0\n        for p in precincts:\n            if p[0] == d:\n                votesA += p[1]\n                votesB += p[2]\n        if votesA > votesB:\n            A += 1\n        else:\n            B += 1\n        # Find the wasted votes\n        #     print(\"A\", votesB, votesA-votesB-1)\n        # else:\n        #     print(\"B\", votesA, votesB-votesA-1)\n    V = sum([sum(p[1:3]) for p in precincts])\n    wA = sum([p[2] for p in precincts if p[1] < p[2]])\n    wB = sum([p[1] for p in precincts if p[1] > p[2]])\n    print(\"{0:.10f}\".format(abs(wA - wB) / V))\n\n\nefficiency_gap([[1, 100, 200], [2, 100, 99], [3, 100, 50], [3, 100, 50], [2, 100, 98]], 3)  # 0.5\nefficiency_gap([[3, 100, 99], [2, 100, 99], [1, 100, 99], [4, 100, 99]], 4)  # 0.25\n"
    }
  ],
  "created": 1649734920,
  "object": "edit"
}
2022-04-11 23:42:07.221893 fix syntax errors 2 ['\n\ndef efficiency_gap(precincts, districts):\n    # A is party A, B is party B\n    A, B = 0, 0\n    for d in range(1, districts + 1):\n        # Find the winning party\n        votesA, votesB = 0, 0\n        for p in precincts:\n            if p[0] == d:\n                votesA += p[1]\n                votesB += p[2]\n        if votesA > votesB:\n            A += 1\n        else:\n            B += 1\n        # Find the wasted votes\n        # print("A", votesB, votesA-votesB-1)\n        # print("B", votesA, votesB-votesA-1)\n    V = sum([sum(p[1:3]) for p in precincts])\n    wA = sum([p[2] for p in precincts if p[1] > p[2]])\n    wB = sum([p[1] for p in precincts if p[1] < p[2]])\n    print("{0:.10f}".format(abs(wA - wB) / V))\n\n\nefficiency_gap([[1, 100, 200], [2, 100, 99], [3, 100, 50], [3, 100, 50], [2, 100, 98]], 3)\nefficiency_gap([[3, 100, 99], [2, 100, 99], [1, 100, 99], [4, 100, 99]], 4)\n', '\n\ndef efficiency_gap(precincts, districts):\n    # A is party A, B is party B\n    A, B = 0, 0\n    for d in range(1, districts + 1):\n        # Find the winning party\n        votesA, votesB = 0, 0\n        for p in precincts:\n            if p[0] == d:\n                votesA += p[1]\n                votesB += p[2]\n        if votesA > votesB:\n            A += 1\n        else:\n            B += 1\n        # Find the wasted votes\n        #     print("A", votesB, votesA-votesB-1)\n        # else:\n        #     print("B", votesA, votesB-votesA-1)\n    V = sum([sum(p[1:3]) for p in precincts])\n    wA = sum([p[2] for p in precincts if p[1] < p[2]])\n    wB = sum([p[1] for p in precincts if p[1] > p[2]])\n    print("{0:.10f}".format(abs(wA - wB) / V))\n\n\nefficiency_gap([[1, 100, 200], [2, 100, 99], [3, 100, 50], [3, 100, 50], [2, 100, 98]], 3)  # 0.5\nefficiency_gap([[3, 100, 99], [2, 100, 99], [1, 100, 99], [4, 100, 99]], 4)  # 0.25\n']
2022-04-11 23:42:07.221914 size on output set 4
2022-04-11 23:42:07.221922 num operations 2
2022-04-11 23:42:07.221927 size on input set 1
2022-04-11 23:42:13.686713 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom sys import stdin, stdout\nfrom math import floor\n\ndef main():\n    P, D = [int(i) for i in stdin.readline().split()] # P = number of precincts, D = number of districts\n    districts = [[] for i in range(0, D)] # list of districts\n    for i in range(0, P):\n        district, A, B = [int(i) for i in stdin.readline().split()]\n        districts[district-1].append([A, B])\n    totalVotes = 0\n    wA, wB = 0, 0\n    for district in districts:\n        totalVotes += sum([sum(precinct) for precinct in district])\n        votesA, votesB = sum([precinct[0] for precinct in district]), sum([precinct[1] for precinct in district])\n        if votesA > votesB:\n            stdout.write(\"A\\n\")\n            wA += votesB\n            wB += votesA - floor((votesA+votesB)/2) - 1\n        else:\n            stdout.write(\"B\\n\")\n            wA += votesA\n            wB += votesB - floor((votesA+votesB)/2) - 1\n    stdout.write(\"{0} {1}\\n\".format(wA, wB))\n    stdout.write(\"{0}\\n\".format(abs(wA-wB)/totalVotes))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import stdin, stdout\nfrom math import floor\n\ndef main():\n    P, D = [int(i) for i in stdin.readline().split()]\n    precincts = [[] for i in range(0, D)]\n    for i in range(0, P):\n        precinct, A, B = [int(i) for i in stdin.readline().split()]\n        precincts[precinct-1].append([A, B])\n    totalVotes = 0\n    wA, wB = 0, 0\n    for precinct in precincts:\n        totalVotes += sum([sum(vote) for vote in precinct])\n        votesA, votesB = sum([vote[0] for vote in precinct]), sum([vote[1] for vote in precinct])\n        if votesA > votesB:\n            stdout.write(\"A\\n\")\n            wA += votesB\n            wB += votesA - floor((votesA+votesB)/2) - 1\n        else:\n            stdout.write(\"B\\n\")\n            wA += votesA\n            wB += votesB - floor((votesA+votesB)/2) - 1\n    stdout.write(\"{0} {1}\\n\".format(wA, wB))\n    stdout.write(\"{0}\\n\".format(abs(wA-wB)/totalVotes))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649734927,
  "object": "edit"
}
2022-04-11 23:42:13.687014 fix spelling mistakes 2 ['\n\nfrom sys import stdin, stdout\nfrom math import floor\n\ndef main():\n    P, D = [int(i) for i in stdin.readline().split()] # P = number of precincts, D = number of districts\n    districts = [[] for i in range(0, D)] # list of districts\n    for i in range(0, P):\n        district, A, B = [int(i) for i in stdin.readline().split()]\n        districts[district-1].append([A, B])\n    totalVotes = 0\n    wA, wB = 0, 0\n    for district in districts:\n        totalVotes += sum([sum(precinct) for precinct in district])\n        votesA, votesB = sum([precinct[0] for precinct in district]), sum([precinct[1] for precinct in district])\n        if votesA > votesB:\n            stdout.write("A\\n")\n            wA += votesB\n            wB += votesA - floor((votesA+votesB)/2) - 1\n        else:\n            stdout.write("B\\n")\n            wA += votesA\n            wB += votesB - floor((votesA+votesB)/2) - 1\n    stdout.write("{0} {1}\\n".format(wA, wB))\n    stdout.write("{0}\\n".format(abs(wA-wB)/totalVotes))\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom sys import stdin, stdout\nfrom math import floor\n\ndef main():\n    P, D = [int(i) for i in stdin.readline().split()]\n    precincts = [[] for i in range(0, D)]\n    for i in range(0, P):\n        precinct, A, B = [int(i) for i in stdin.readline().split()]\n        precincts[precinct-1].append([A, B])\n    totalVotes = 0\n    wA, wB = 0, 0\n    for precinct in precincts:\n        totalVotes += sum([sum(vote) for vote in precinct])\n        votesA, votesB = sum([vote[0] for vote in precinct]), sum([vote[1] for vote in precinct])\n        if votesA > votesB:\n            stdout.write("A\\n")\n            wA += votesB\n            wB += votesA - floor((votesA+votesB)/2) - 1\n        else:\n            stdout.write("B\\n")\n            wA += votesA\n            wB += votesB - floor((votesA+votesB)/2) - 1\n    stdout.write("{0} {1}\\n".format(wA, wB))\n    stdout.write("{0}\\n".format(abs(wA-wB)/totalVotes))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-11 23:42:13.687067 size on output set 2
2022-04-11 23:42:13.687076 size on input set 2
2022-04-11 23:42:16.614760 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom sys import stdin, stdout\nfrom math import floor\n\ndef main():\n    P, D = [int(i) for i in stdin.readline().split()]\n    precincts = [[] for i in range(0, D)]\n    for i in range(0, P):\n        precinct, A, B = [int(i) for i in stdin.readline().split()]\n        precincts[precinct-1].append([A, B])\n    totalVotes = 0\n    wA, wB = 0, 0\n    for precinct in precincts:\n        totalVotes += sum([sum(vote) for vote in precinct])\n        votesA, votesB = sum([vote[0] for vote in precinct]), sum([vote[1] for vote in precinct])\n        if votesA > votesB:\n            stdout.write(\"A\\n\")\n            wA += votesB\n            wB += votesA - floor((votesA+votesB)/2) - 1\n        else:\n            stdout.write(\"B\\n\")\n            wA += votesA\n            wB += votesB - floor((votesA+votesB)/2) - 1\n    stdout.write(\"{0} {1}\\n\".format(wA, wB))\n    stdout.write(\"{0}\\n\".format(abs(wA-wB)/float(totalVotes)))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import stdin, stdout\nfrom math import floor\n\ndef main():\n    P, D = [int(i) for i in stdin.readline().split()]\n    precincts = [[] for i in range(0, D)]\n    for i in range(0, P):\n        precinct, A, B = [int(i) for i in stdin.readline().split()]\n        precincts[precinct-1].append([A, B])\n    totalVotes = 0\n    wA, wB = 0, 0\n    for precinct in precincts:\n        totalVotes += sum([sum(vote) for vote in precinct])\n        votesA, votesB = sum([vote[0] for vote in precinct]), sum([vote[1] for vote in precinct])\n        if votesA > votesB:\n            stdout.write(\"A\\n\")\n            wA += votesB\n            wB += votesA - floor((votesA+votesB)/2) - 1\n        else:\n            stdout.write(\"B\\n\")\n            wA += votesA\n            wB += votesB - floor((votesA+votesB)/2) - 1\n    stdout.write(\"{0} {1}\\n\".format(wA, wB))\n    stdout.write(\"{0}\\n\".format(abs(wA-wB)/float(totalVotes)))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649734933,
  "object": "edit"
}
2022-04-11 23:42:16.615432 fix syntax errors 2 ['\n\nfrom sys import stdin, stdout\nfrom math import floor\n\ndef main():\n    P, D = [int(i) for i in stdin.readline().split()]\n    precincts = [[] for i in range(0, D)]\n    for i in range(0, P):\n        precinct, A, B = [int(i) for i in stdin.readline().split()]\n        precincts[precinct-1].append([A, B])\n    totalVotes = 0\n    wA, wB = 0, 0\n    for precinct in precincts:\n        totalVotes += sum([sum(vote) for vote in precinct])\n        votesA, votesB = sum([vote[0] for vote in precinct]), sum([vote[1] for vote in precinct])\n        if votesA > votesB:\n            stdout.write("A\\n")\n            wA += votesB\n            wB += votesA - floor((votesA+votesB)/2) - 1\n        else:\n            stdout.write("B\\n")\n            wA += votesA\n            wB += votesB - floor((votesA+votesB)/2) - 1\n    stdout.write("{0} {1}\\n".format(wA, wB))\n    stdout.write("{0}\\n".format(abs(wA-wB)/float(totalVotes)))\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom sys import stdin, stdout\nfrom math import floor\n\ndef main():\n    P, D = [int(i) for i in stdin.readline().split()]\n    precincts = [[] for i in range(0, D)]\n    for i in range(0, P):\n        precinct, A, B = [int(i) for i in stdin.readline().split()]\n        precincts[precinct-1].append([A, B])\n    totalVotes = 0\n    wA, wB = 0, 0\n    for precinct in precincts:\n        totalVotes += sum([sum(vote) for vote in precinct])\n        votesA, votesB = sum([vote[0] for vote in precinct]), sum([vote[1] for vote in precinct])\n        if votesA > votesB:\n            stdout.write("A\\n")\n            wA += votesB\n            wB += votesA - floor((votesA+votesB)/2) - 1\n        else:\n            stdout.write("B\\n")\n            wA += votesA\n            wB += votesB - floor((votesA+votesB)/2) - 1\n    stdout.write("{0} {1}\\n".format(wA, wB))\n    stdout.write("{0}\\n".format(abs(wA-wB)/float(totalVotes)))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-11 23:42:19.534703 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom sys import stdin, stdout\nfrom math import floor\n\ndef main():\n    P, D = [int(i) for i in stdin.readline().split()] # P = number of precincts, D = number of districts\n    districts = [[] for i in range(0, D)] # list of districts\n    for i in range(0, P):\n        district, A, B = [int(i) for i in stdin.readline().split()]\n        districts[district-1].append([A, B])\n    totalVotes = 0\n    wA, wB = 0, 0\n    for district in districts:\n        totalVotes += sum([sum(precinct) for precinct in district])\n        votesA, votesB = sum([precinct[0] for precinct in district]), sum([precinct[1] for precinct in district])\n        if votesA > votesB:\n            stdout.write(\"A\\n\")\n            wA += votesB\n            wB += votesA - floor((votesA+votesB)/2) - 1\n        else:\n            stdout.write(\"B\\n\")\n            wA += votesA\n            wB += votesB - floor((votesA+votesB)/2) - 1\n    stdout.write(\"{0} {1}\\n\".format(wA, wB))\n    stdout.write(\"{0}\\n\".format(abs(wA-wB)/float(totalVotes)))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import stdin, stdout\nfrom math import floor\n\ndef main():\n    P, D = [int(i) for i in stdin.readline().split()] # P = number of precincts, D = number of districts\n    districts = [[] for i in range(0, D)] # list of districts\n    for i in range(0, P):\n        district, A, B = [int(i) for i in stdin.readline().split()]\n        districts[district-1].append([A, B])\n    totalVotes = 0\n    wA, wB = 0, 0\n    for district in districts:\n        totalVotes += sum([sum(precinct) for precinct in district])\n        votesA, votesB = sum([precinct[0] for precinct in district]), sum([precinct[1] for precinct in district])\n        if votesA > votesB:\n            stdout.write(\"A\\n\")\n            wA += votesB\n            wB += votesA - floor((votesA+votesB)/2) - 1\n        else:\n            stdout.write(\"B\\n\")\n            wA += votesA\n            wB += votesB - floor((votesA+votesB)/2) - 1\n    stdout.write(\"{0} {1}\\n\".format(wA, wB))\n    stdout.write(\"{0}\\n\".format(abs(wA-wB)/float(totalVotes)))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649734936,
  "object": "edit"
}
2022-04-11 23:42:19.534835 fix syntax errors 2 ['\n\nfrom sys import stdin, stdout\nfrom math import floor\n\ndef main():\n    P, D = [int(i) for i in stdin.readline().split()] # P = number of precincts, D = number of districts\n    districts = [[] for i in range(0, D)] # list of districts\n    for i in range(0, P):\n        district, A, B = [int(i) for i in stdin.readline().split()]\n        districts[district-1].append([A, B])\n    totalVotes = 0\n    wA, wB = 0, 0\n    for district in districts:\n        totalVotes += sum([sum(precinct) for precinct in district])\n        votesA, votesB = sum([precinct[0] for precinct in district]), sum([precinct[1] for precinct in district])\n        if votesA > votesB:\n            stdout.write("A\\n")\n            wA += votesB\n            wB += votesA - floor((votesA+votesB)/2) - 1\n        else:\n            stdout.write("B\\n")\n            wA += votesA\n            wB += votesB - floor((votesA+votesB)/2) - 1\n    stdout.write("{0} {1}\\n".format(wA, wB))\n    stdout.write("{0}\\n".format(abs(wA-wB)/float(totalVotes)))\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom sys import stdin, stdout\nfrom math import floor\n\ndef main():\n    P, D = [int(i) for i in stdin.readline().split()] # P = number of precincts, D = number of districts\n    districts = [[] for i in range(0, D)] # list of districts\n    for i in range(0, P):\n        district, A, B = [int(i) for i in stdin.readline().split()]\n        districts[district-1].append([A, B])\n    totalVotes = 0\n    wA, wB = 0, 0\n    for district in districts:\n        totalVotes += sum([sum(precinct) for precinct in district])\n        votesA, votesB = sum([precinct[0] for precinct in district]), sum([precinct[1] for precinct in district])\n        if votesA > votesB:\n            stdout.write("A\\n")\n            wA += votesB\n            wB += votesA - floor((votesA+votesB)/2) - 1\n        else:\n            stdout.write("B\\n")\n            wA += votesA\n            wB += votesB - floor((votesA+votesB)/2) - 1\n    stdout.write("{0} {1}\\n".format(wA, wB))\n    stdout.write("{0}\\n".format(abs(wA-wB)/float(totalVotes)))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-11 23:42:19.534856 size on output set 2
2022-04-11 23:42:19.534864 num operations 2
2022-04-11 23:42:19.534868 size on input set 1
2022-04-11 23:42:35.330373 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef efficiency_gap(votes):\n    \"\"\"\n    votes: a list of tuples of the form (district, party_a_votes, party_b_votes)\n    \"\"\"\n    # Get the total votes\n    total_votes = sum([votes[i][1] + votes[i][2] for i in range(len(votes))])\n    # Get the total votes for each party\n    total_votes_a = sum([votes[i][1] for i in range(len(votes))])\n    total_votes_b = sum([votes[i][2] for i in range(len(votes))])\n    # Get the total votes for each precinct\n    district_votes = {}\n    for i in range(len(votes)):\n        district = votes[i][0]\n        if district not in district_votes:\n            district_votes[district] = votes[i][1] + votes[i][2]\n        else:\n            district_votes[district] += votes[i][1] + votes[i][2]\n    # Get the winner and wasted votes in each precinct\n    district_results = {}\n    for district in district_votes:\n        votes_a = sum([votes[i][1] for i in range(len(votes)) if votes[i][0] == district])\n        votes_b = sum([votes[i][2] for i in range(len(votes)) if votes[i][0] == district])\n        if votes_a > votes_b:\n            district_results[district] = ('A', votes_b, votes_a - (district_votes[district] // 2) - 1)\n        else:\n            district_results[district] = ('B', votes_a, votes_b - (district_votes[district] // 2) - 1)\n    # Get the wasted votes for each party\n    wasted_votes_a = sum([district_results[district][1] for district in district_results])\n    wasted_votes_b = sum([district_results[district][2] for district in district_results])\n    # Print the results\n    for district in sorted(district_results):\n        print(district_results[district][0], district_results[district][1], district_results[district][2])\n    print(abs(wasted_votes_a - wasted_votes_b) / total_votes)\n\ndef main():\n    # Read the input\n    lines = sys.stdin.readlines()\n    votes = []\n    for i in range(1, len(lines)):\n        votes.append(tuple(map(int, lines[i].split(' '))))\n    # Get the efficiency gap\n    efficiency_gap(votes)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef efficiency_gap(votes):\n    \"\"\"\n    votes: a list of tuples of the form (district, party_a_votes, party_b_votes)\n    \"\"\"\n    # Get the total votes\n    total_votes = sum([votes[i][1] + votes[i][2] for i in range(len(votes))])\n    # Get the total votes for each party\n    total_votes_a = sum([votes[i][1] for i in range(len(votes))])\n    total_votes_b = sum([votes[i][2] for i in range(len(votes))])\n    # Get the total votes for each district and the winner\n    district_votes = {}\n    for i in range(len(votes)):\n        district = votes[i][0]\n        if district not in district_votes:\n            district_votes[district] = votes[i][1] + votes[i][2]\n        else:\n            district_votes[district] += votes[i][1] + votes[i][2]\n    # Get the wasted votes in each district\n    district_results = {}\n    for district in district_votes:\n        votes_a = sum([votes[i][1] for i in range(len(votes)) if votes[i][0] == district])\n        votes_b = sum([votes[i][2] for i in range(len(votes)) if votes[i][0] == district])\n        if votes_a > votes_b:\n            district_results[district] = ('A', votes_b, votes_a - (district_votes[district] // 2) - 1)\n        else:\n            district_results[district] = ('B', votes_a, votes_b - (district_votes[district] // 2) - 1)\n    # Get the wasted votes for each party\n    wasted_votes_a = sum([district_results[district][1] for district in district_results])\n    wasted_votes_b = sum([district_results[district][2] for district in district_results])\n    # Print the results\n    for district in sorted(district_results):\n        print(district_results[district][0], district_results[district][1], district_results[district][2])\n    print(abs(wasted_votes_a - wasted_votes_b) / total_votes)\n\ndef main():\n    # Read the input\n    lines = sys.stdin.readlines()\n    votes = []\n    for i in range(1, len(lines)):\n        votes.append(tuple(map(int, lines[i].split(' '))))\n    # Get the efficiency gap\n    efficiency_gap(votes)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649734939,
  "object": "edit"
}
2022-04-11 23:42:35.331168 fix spelling mistakes 2 ['\n\nimport sys\n\ndef efficiency_gap(votes):\n    """\n    votes: a list of tuples of the form (district, party_a_votes, party_b_votes)\n    """\n    # Get the total votes\n    total_votes = sum([votes[i][1] + votes[i][2] for i in range(len(votes))])\n    # Get the total votes for each party\n    total_votes_a = sum([votes[i][1] for i in range(len(votes))])\n    total_votes_b = sum([votes[i][2] for i in range(len(votes))])\n    # Get the total votes for each precinct\n    district_votes = {}\n    for i in range(len(votes)):\n        district = votes[i][0]\n        if district not in district_votes:\n            district_votes[district] = votes[i][1] + votes[i][2]\n        else:\n            district_votes[district] += votes[i][1] + votes[i][2]\n    # Get the winner and wasted votes in each precinct\n    district_results = {}\n    for district in district_votes:\n        votes_a = sum([votes[i][1] for i in range(len(votes)) if votes[i][0] == district])\n        votes_b = sum([votes[i][2] for i in range(len(votes)) if votes[i][0] == district])\n        if votes_a > votes_b:\n            district_results[district] = (\'A\', votes_b, votes_a - (district_votes[district] // 2) - 1)\n        else:\n            district_results[district] = (\'B\', votes_a, votes_b - (district_votes[district] // 2) - 1)\n    # Get the wasted votes for each party\n    wasted_votes_a = sum([district_results[district][1] for district in district_results])\n    wasted_votes_b = sum([district_results[district][2] for district in district_results])\n    # Print the results\n    for district in sorted(district_results):\n        print(district_results[district][0], district_results[district][1], district_results[district][2])\n    print(abs(wasted_votes_a - wasted_votes_b) / total_votes)\n\ndef main():\n    # Read the input\n    lines = sys.stdin.readlines()\n    votes = []\n    for i in range(1, len(lines)):\n        votes.append(tuple(map(int, lines[i].split(\' \'))))\n    # Get the efficiency gap\n    efficiency_gap(votes)\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef efficiency_gap(votes):\n    """\n    votes: a list of tuples of the form (district, party_a_votes, party_b_votes)\n    """\n    # Get the total votes\n    total_votes = sum([votes[i][1] + votes[i][2] for i in range(len(votes))])\n    # Get the total votes for each party\n    total_votes_a = sum([votes[i][1] for i in range(len(votes))])\n    total_votes_b = sum([votes[i][2] for i in range(len(votes))])\n    # Get the total votes for each district and the winner\n    district_votes = {}\n    for i in range(len(votes)):\n        district = votes[i][0]\n        if district not in district_votes:\n            district_votes[district] = votes[i][1] + votes[i][2]\n        else:\n            district_votes[district] += votes[i][1] + votes[i][2]\n    # Get the wasted votes in each district\n    district_results = {}\n    for district in district_votes:\n        votes_a = sum([votes[i][1] for i in range(len(votes)) if votes[i][0] == district])\n        votes_b = sum([votes[i][2] for i in range(len(votes)) if votes[i][0] == district])\n        if votes_a > votes_b:\n            district_results[district] = (\'A\', votes_b, votes_a - (district_votes[district] // 2) - 1)\n        else:\n            district_results[district] = (\'B\', votes_a, votes_b - (district_votes[district] // 2) - 1)\n    # Get the wasted votes for each party\n    wasted_votes_a = sum([district_results[district][1] for district in district_results])\n    wasted_votes_b = sum([district_results[district][2] for district in district_results])\n    # Print the results\n    for district in sorted(district_results):\n        print(district_results[district][0], district_results[district][1], district_results[district][2])\n    print(abs(wasted_votes_a - wasted_votes_b) / total_votes)\n\ndef main():\n    # Read the input\n    lines = sys.stdin.readlines()\n    votes = []\n    for i in range(1, len(lines)):\n        votes.append(tuple(map(int, lines[i].split(\' \'))))\n    # Get the efficiency gap\n    efficiency_gap(votes)\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-11 23:42:35.331258 size on output set 2
2022-04-11 23:42:35.331267 size on input set 2
2022-04-11 23:42:55.598800 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef efficiency_gap(votes):\n    \"\"\"\n    votes: a list of tuples of the form (district, party_a_votes, party_b_votes)\n    \"\"\"\n    # Get the total votes\n    total_votes = sum([votes[i][1] + votes[i][2] for i in range(len(votes))]) \n    # Get the total votes for each party\n    total_votes_a = sum([votes[i][1] for i in range(len(votes))])\n    total_votes_b = sum([votes[i][2] for i in range(len(votes))]) \n    # Get the total votes for each precinct\n    district_votes = {}\n    for i in range(len(votes)):\n        district = votes[i][0] \n        if district not in district_votes:\n            district_votes[district] = votes[i][1] + votes[i][2] \n        else:\n            district_votes[district] += votes[i][1] + votes[i][2] \n    # Get the winner and wasted votes in each precinct\n    district_results = {}\n    for district in district_votes:\n        votes_a = sum([votes[i][1] for i in range(len(votes)) if votes[i][0] == district]) \n        votes_b = sum([votes[i][2] for i in range(len(votes)) if votes[i][0] == district]) \n        if votes_a > votes_b:\n            district_results[district] = ('A', votes_b, votes_a - (district_votes[district] // 2) - 1) \n        else:\n            district_results[district] = ('B', votes_a, votes_b - (district_votes[district] // 2) - 1) \n    # Get the wasted votes for each party\n    wasted_votes_a = sum([district_results[district][1] for district in district_results]) \n    wasted_votes_b = sum([district_results[district][2] for district in district_results]) \n    # Print the results\n    for district in sorted(district_results):\n        print(district_results[district][0], district_results[district][1], district_results[district][2]) \n    print(abs(wasted_votes_a - wasted_votes_b) / total_votes) \n\ndef main():\n    # Read the input\n    lines = sys.stdin.readlines() \n    votes = [] \n    for i in range(1, len(lines)):\n        votes.append(tuple(map(int, lines[i].split(' ')))) \n    # Get the efficiency gap\n    efficiency_gap(votes) \n\nif __name__ == '__main__':\n    main() \n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef efficiency_gap(votes):\n    \"\"\"\n    votes: a list of tuples of the form (district, party_a_votes, party_b_votes)\n    \"\"\"\n    # Get the total votes\n    total_votes = sum([votes[i][1] + votes[i][2] for i in range(len(votes))])\n    # Get the total votes for each party\n    total_votes_a = sum([votes[i][1] for i in range(len(votes))])\n    total_votes_b = sum([votes[i][2] for i in range(len(votes))])\n    # Get the total votes for each precinct\n    district_votes = {}\n    for i in range(len(votes)):\n        district = votes[i][0]\n        if district not in district_votes:\n            district_votes[district] = votes[i][1] + votes[i][2]\n        else:\n            district_votes[district] += votes[i][1] + votes[i][2]\n    # Get the winner and wasted votes in each precinct\n    district_results = {}\n    for district in district_votes:\n        votes_a = sum([votes[i][1] for i in range(len(votes)) if votes[i][0] == district])\n        votes_b = sum([votes[i][2] for i in range(len(votes)) if votes[i][0] == district])\n        if votes_a > votes_b:\n            district_results[district] = ('A', votes_b, votes_a - (district_votes[district] // 2) - 1)\n        else:\n            district_results[district] = ('B', votes_a, votes_b - (district_votes[district] // 2) - 1)\n    # Get the wasted votes for each party\n    wasted_votes_a = sum([district_results[district][1] for district in district_results])\n    wasted_votes_b = sum([district_results[district][2] for district in district_results])\n    # Print the results\n    for district in sorted(district_results):\n        print(district_results[district][0], district_results[district][1], district_results[district][2])\n    print(abs(wasted_votes_a - wasted_votes_b) / total_votes)\n\ndef main():\n    # Read the input\n    lines = sys.stdin.readlines()\n    votes = []\n    for i in range(1, len(lines)):\n        votes.append(tuple(map(int, lines[i].split(' '))))\n    # Get the efficiency gap\n    efficiency_gap(votes)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649734955,
  "object": "edit"
}
2022-04-11 23:42:55.599182 fix syntax errors 2 ['\nimport sys\n\ndef efficiency_gap(votes):\n    """\n    votes: a list of tuples of the form (district, party_a_votes, party_b_votes)\n    """\n    # Get the total votes\n    total_votes = sum([votes[i][1] + votes[i][2] for i in range(len(votes))]) \n    # Get the total votes for each party\n    total_votes_a = sum([votes[i][1] for i in range(len(votes))])\n    total_votes_b = sum([votes[i][2] for i in range(len(votes))]) \n    # Get the total votes for each precinct\n    district_votes = {}\n    for i in range(len(votes)):\n        district = votes[i][0] \n        if district not in district_votes:\n            district_votes[district] = votes[i][1] + votes[i][2] \n        else:\n            district_votes[district] += votes[i][1] + votes[i][2] \n    # Get the winner and wasted votes in each precinct\n    district_results = {}\n    for district in district_votes:\n        votes_a = sum([votes[i][1] for i in range(len(votes)) if votes[i][0] == district]) \n        votes_b = sum([votes[i][2] for i in range(len(votes)) if votes[i][0] == district]) \n        if votes_a > votes_b:\n            district_results[district] = (\'A\', votes_b, votes_a - (district_votes[district] // 2) - 1) \n        else:\n            district_results[district] = (\'B\', votes_a, votes_b - (district_votes[district] // 2) - 1) \n    # Get the wasted votes for each party\n    wasted_votes_a = sum([district_results[district][1] for district in district_results]) \n    wasted_votes_b = sum([district_results[district][2] for district in district_results]) \n    # Print the results\n    for district in sorted(district_results):\n        print(district_results[district][0], district_results[district][1], district_results[district][2]) \n    print(abs(wasted_votes_a - wasted_votes_b) / total_votes) \n\ndef main():\n    # Read the input\n    lines = sys.stdin.readlines() \n    votes = [] \n    for i in range(1, len(lines)):\n        votes.append(tuple(map(int, lines[i].split(\' \')))) \n    # Get the efficiency gap\n    efficiency_gap(votes) \n\nif __name__ == \'__main__\':\n    main() \n', '\nimport sys\n\ndef efficiency_gap(votes):\n    """\n    votes: a list of tuples of the form (district, party_a_votes, party_b_votes)\n    """\n    # Get the total votes\n    total_votes = sum([votes[i][1] + votes[i][2] for i in range(len(votes))])\n    # Get the total votes for each party\n    total_votes_a = sum([votes[i][1] for i in range(len(votes))])\n    total_votes_b = sum([votes[i][2] for i in range(len(votes))])\n    # Get the total votes for each precinct\n    district_votes = {}\n    for i in range(len(votes)):\n        district = votes[i][0]\n        if district not in district_votes:\n            district_votes[district] = votes[i][1] + votes[i][2]\n        else:\n            district_votes[district] += votes[i][1] + votes[i][2]\n    # Get the winner and wasted votes in each precinct\n    district_results = {}\n    for district in district_votes:\n        votes_a = sum([votes[i][1] for i in range(len(votes)) if votes[i][0] == district])\n        votes_b = sum([votes[i][2] for i in range(len(votes)) if votes[i][0] == district])\n        if votes_a > votes_b:\n            district_results[district] = (\'A\', votes_b, votes_a - (district_votes[district] // 2) - 1)\n        else:\n            district_results[district] = (\'B\', votes_a, votes_b - (district_votes[district] // 2) - 1)\n    # Get the wasted votes for each party\n    wasted_votes_a = sum([district_results[district][1] for district in district_results])\n    wasted_votes_b = sum([district_results[district][2] for district in district_results])\n    # Print the results\n    for district in sorted(district_results):\n        print(district_results[district][0], district_results[district][1], district_results[district][2])\n    print(abs(wasted_votes_a - wasted_votes_b) / total_votes)\n\ndef main():\n    # Read the input\n    lines = sys.stdin.readlines()\n    votes = []\n    for i in range(1, len(lines)):\n        votes.append(tuple(map(int, lines[i].split(\' \'))))\n    # Get the efficiency gap\n    efficiency_gap(votes)\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-11 23:43:09.094793 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef efficiency_gap(votes):\n    \"\"\"\n    votes: a list of tuples of the form (district, party_a_votes, party_b_votes)\n    \"\"\"\n    # Get the total votes\n    total_votes = sum([votes[i][1] + votes[i][2] for i in range(len(votes))]) // 2\n    # Get the total votes for each party\n    total_votes_a = sum([votes[i][1] for i in range(len(votes))]) // 2\n    total_votes_b = sum([votes[i][2] for i in range(len(votes))]) // 2\n    # Get the total votes for each district and the winner\n    district_votes = {}\n    for i in range(len(votes)):\n        district = votes[i][0]\n        if district not in district_votes:\n            district_votes[district] = votes[i][1] + votes[i][2] // 2\n        else:\n            district_votes[district] += votes[i][1] + votes[i][2] // 2\n    # Get the wasted votes in each district\n    district_results = {}\n    for district in district_votes:\n        votes_a = sum([votes[i][1] for i in range(len(votes)) if votes[i][0] == district]) // 2\n        votes_b = sum([votes[i][2] for i in range(len(votes)) if votes[i][0] == district]) // 2\n        if votes_a > votes_b:\n            district_results[district] = ('A', votes_b, votes_a - (district_votes[district] // 2))\n        else:\n            district_results[district] = ('B', votes_a, votes_b - (district_votes[district] // 2))\n    # Get the wasted votes for each party\n    wasted_votes_a = sum([district_results[district][1] for district in district_results])\n    wasted_votes_b = sum([district_results[district][2] for district in district_results])\n    # Print the results\n    for district in sorted(district_results):\n        print(district_results[district][0], district_results[district][1], district_results[district][2])\n    print(abs(wasted_votes_a - wasted_votes_b) / total_votes, file=sys.stderr)\n\ndef main():\n    # Read the input\n    lines = sys.stdin.readlines()\n    votes = []\n    for i in range(1, len(lines)):\n        votes.append(tuple(map(int, lines[i].split(' '))))\n    # Get the efficiency gap\n    efficiency_gap(votes)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef efficiency_gap(votes):\n    \"\"\"\n    votes: a list of tuples of the form (district, party_a_votes, party_b_votes)\n    \"\"\"\n    # Get the total votes\n    total_votes = sum([votes[i][1] + votes[i][2] for i in range(len(votes))])\n    # Get the total votes for each party\n    total_votes_a = sum([votes[i][1] for i in range(len(votes))])\n    total_votes_b = sum([votes[i][2] for i in range(len(votes))])\n    # Get the total votes for each district and the winner\n    district_votes = {}\n    for i in range(len(votes)):\n        district = votes[i][0]\n        if district not in district_votes:\n            district_votes[district] = votes[i][1] + votes[i][2]\n        else:\n            district_votes[district] += votes[i][1] + votes[i][2]\n    # Get the wasted votes in each district\n    district_results = {}\n    for district in district_votes:\n        votes_a = sum([votes[i][1] for i in range(len(votes)) if votes[i][0] == district])\n        votes_b = sum([votes[i][2] for i in range(len(votes)) if votes[i][0] == district])\n        if votes_a > votes_b:\n            district_results[district] = ('A', votes_b, votes_a - (district_votes[district] // 2) - 1)\n        else:\n            district_results[district] = ('B', votes_a, votes_b - (district_votes[district] // 2) - 1)\n    # Get the wasted votes for each party\n    wasted_votes_a = sum([district_results[district][1] for district in district_results])\n    wasted_votes_b = sum([district_results[district][2] for district in district_results])\n    # Print the results\n    for district in sorted(district_results):\n        print(district_results[district][0], district_results[district][1], district_results[district][2])\n    print(abs(wasted_votes_a - wasted_votes_b) / total_votes)\n\ndef main():\n    # Read the input\n    lines = sys.stdin.readlines()\n    votes = []\n    for i in range(1, len(lines)):\n        votes.append(tuple(map(int, lines[i].split(' '))))\n    # Get the efficiency gap\n    efficiency_gap(votes)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649734975,
  "object": "edit"
}
2022-04-11 23:43:09.095258 fix syntax errors 2 ['\n\nimport sys\n\ndef efficiency_gap(votes):\n    """\n    votes: a list of tuples of the form (district, party_a_votes, party_b_votes)\n    """\n    # Get the total votes\n    total_votes = sum([votes[i][1] + votes[i][2] for i in range(len(votes))]) // 2\n    # Get the total votes for each party\n    total_votes_a = sum([votes[i][1] for i in range(len(votes))]) // 2\n    total_votes_b = sum([votes[i][2] for i in range(len(votes))]) // 2\n    # Get the total votes for each district and the winner\n    district_votes = {}\n    for i in range(len(votes)):\n        district = votes[i][0]\n        if district not in district_votes:\n            district_votes[district] = votes[i][1] + votes[i][2] // 2\n        else:\n            district_votes[district] += votes[i][1] + votes[i][2] // 2\n    # Get the wasted votes in each district\n    district_results = {}\n    for district in district_votes:\n        votes_a = sum([votes[i][1] for i in range(len(votes)) if votes[i][0] == district]) // 2\n        votes_b = sum([votes[i][2] for i in range(len(votes)) if votes[i][0] == district]) // 2\n        if votes_a > votes_b:\n            district_results[district] = (\'A\', votes_b, votes_a - (district_votes[district] // 2))\n        else:\n            district_results[district] = (\'B\', votes_a, votes_b - (district_votes[district] // 2))\n    # Get the wasted votes for each party\n    wasted_votes_a = sum([district_results[district][1] for district in district_results])\n    wasted_votes_b = sum([district_results[district][2] for district in district_results])\n    # Print the results\n    for district in sorted(district_results):\n        print(district_results[district][0], district_results[district][1], district_results[district][2])\n    print(abs(wasted_votes_a - wasted_votes_b) / total_votes, file=sys.stderr)\n\ndef main():\n    # Read the input\n    lines = sys.stdin.readlines()\n    votes = []\n    for i in range(1, len(lines)):\n        votes.append(tuple(map(int, lines[i].split(\' \'))))\n    # Get the efficiency gap\n    efficiency_gap(votes)\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef efficiency_gap(votes):\n    """\n    votes: a list of tuples of the form (district, party_a_votes, party_b_votes)\n    """\n    # Get the total votes\n    total_votes = sum([votes[i][1] + votes[i][2] for i in range(len(votes))])\n    # Get the total votes for each party\n    total_votes_a = sum([votes[i][1] for i in range(len(votes))])\n    total_votes_b = sum([votes[i][2] for i in range(len(votes))])\n    # Get the total votes for each district and the winner\n    district_votes = {}\n    for i in range(len(votes)):\n        district = votes[i][0]\n        if district not in district_votes:\n            district_votes[district] = votes[i][1] + votes[i][2]\n        else:\n            district_votes[district] += votes[i][1] + votes[i][2]\n    # Get the wasted votes in each district\n    district_results = {}\n    for district in district_votes:\n        votes_a = sum([votes[i][1] for i in range(len(votes)) if votes[i][0] == district])\n        votes_b = sum([votes[i][2] for i in range(len(votes)) if votes[i][0] == district])\n        if votes_a > votes_b:\n            district_results[district] = (\'A\', votes_b, votes_a - (district_votes[district] // 2) - 1)\n        else:\n            district_results[district] = (\'B\', votes_a, votes_b - (district_votes[district] // 2) - 1)\n    # Get the wasted votes for each party\n    wasted_votes_a = sum([district_results[district][1] for district in district_results])\n    wasted_votes_b = sum([district_results[district][2] for district in district_results])\n    # Print the results\n    for district in sorted(district_results):\n        print(district_results[district][0], district_results[district][1], district_results[district][2])\n    print(abs(wasted_votes_a - wasted_votes_b) / total_votes)\n\ndef main():\n    # Read the input\n    lines = sys.stdin.readlines()\n    votes = []\n    for i in range(1, len(lines)):\n        votes.append(tuple(map(int, lines[i].split(\' \'))))\n    # Get the efficiency gap\n    efficiency_gap(votes)\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-11 23:43:09.095343 size on output set 4
2022-04-11 23:43:09.095364 num operations 2
2022-04-11 23:43:09.095374 size on input set 1
2022-04-11 23:43:11.734782 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    The main entry point for the script.\n    \"\"\"\n    # Read the input data.\n    precincts, districts = [int(x) for x in input().split()]\n    data = [[int(x) for x in input().split()] for _ in range(precincts)]\n\n    # Get the total votes per district.\n    total_votes = [[0, 0] for _ in range(districts)]\n    for precinct in data:\n        total_votes[precinct[0] - 1][0] += precinct[1]\n        total_votes[precinct[0] - 1][1] += precinct[2]\n\n    # Get the winners and wasted votes in each district.\n    winners = []\n    wasted_votes = [[0, 0] for _ in range(districts)]\n    for district in range(districts):\n        if total_votes[district][0] > total_votes[district][1]:\n            winners.append('A')\n            wasted_votes[district][0] = total_votes[district][0] - (total_votes[district][0] // 2 + 1)\n            wasted_votes[district][1] = total_votes[district][1]\n        else:\n            winners.append('B')\n            wasted_votes[district][0] = total_votes[district][0]\n            wasted_votes[district][1] = total_votes[district][1] - (total_votes[district][1] // 2 + 1)\n\n    # Print the output.\n    for district in range(districts):\n        print(winners[district], wasted_votes[district][0], wasted_votes[district][1])\n\n    # Calculate and print the efficiency gap.\n    efficiency_gap = sum([wasted_votes[district][0] for district in range(districts)]) - sum([wasted_votes[district][1] for district in range(districts)])\n    efficiency_gap /= sum([total_votes[district][0] + total_votes[district][1] for district in range(districts)])\n    print(abs(efficiency_gap))\n\n# Execute the main function.\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    The main entry point for the script.\n    \"\"\"\n    # Read the input data.\n    precincts, districts = [int(x) for x in input().split()]\n    data = [[int(x) for x in input().split()] for _ in range(precincts)]\n\n    # Get the total votes per district. \n    total_votes = [[0, 0] for _ in range(districts)]\n    for precinct in data:\n        total_votes[precinct[0] - 1][0] += precinct[1]\n        total_votes[precinct[0] - 1][1] += precinct[2]\n\n    # Get the winners and wasted votes per district.\n    winners = []\n    wasted_votes = [[0, 0] for _ in range(districts)]\n    for district in range(districts):\n        if total_votes[district][0] > total_votes[district][1]:\n            winners.append('A')\n            wasted_votes[district][0] = total_votes[district][0] - (total_votes[district][0] // 2 + 1)\n            wasted_votes[district][1] = total_votes[district][1]\n        else:\n            winners.append('B')\n            wasted_votes[district][0] = total_votes[district][0]\n            wasted_votes[district][1] = total_votes[district][1] - (total_votes[district][1] // 2 + 1)\n\n    # Print the output.\n    for district in range(districts):\n        print(winners[district], wasted_votes[district][0], wasted_votes[district][1])\n\n    # Calculate and print the efficiency gap.\n    efficiency_gap = sum([wasted_votes[district][0] for district in range(districts)]) - sum([wasted_votes[district][1] for district in range(districts)])\n    efficiency_gap /= sum([total_votes[district][0] + total_votes[district][1] for district in range(districts)])\n    print(abs(efficiency_gap))\n\n# Execute the main function.\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649734989,
  "object": "edit"
}
2022-04-11 23:43:11.735029 fix spelling mistakes 2 ['\n\ndef main():\n    """\n    The main entry point for the script.\n    """\n    # Read the input data.\n    precincts, districts = [int(x) for x in input().split()]\n    data = [[int(x) for x in input().split()] for _ in range(precincts)]\n\n    # Get the total votes per district.\n    total_votes = [[0, 0] for _ in range(districts)]\n    for precinct in data:\n        total_votes[precinct[0] - 1][0] += precinct[1]\n        total_votes[precinct[0] - 1][1] += precinct[2]\n\n    # Get the winners and wasted votes in each district.\n    winners = []\n    wasted_votes = [[0, 0] for _ in range(districts)]\n    for district in range(districts):\n        if total_votes[district][0] > total_votes[district][1]:\n            winners.append(\'A\')\n            wasted_votes[district][0] = total_votes[district][0] - (total_votes[district][0] // 2 + 1)\n            wasted_votes[district][1] = total_votes[district][1]\n        else:\n            winners.append(\'B\')\n            wasted_votes[district][0] = total_votes[district][0]\n            wasted_votes[district][1] = total_votes[district][1] - (total_votes[district][1] // 2 + 1)\n\n    # Print the output.\n    for district in range(districts):\n        print(winners[district], wasted_votes[district][0], wasted_votes[district][1])\n\n    # Calculate and print the efficiency gap.\n    efficiency_gap = sum([wasted_votes[district][0] for district in range(districts)]) - sum([wasted_votes[district][1] for district in range(districts)])\n    efficiency_gap /= sum([total_votes[district][0] + total_votes[district][1] for district in range(districts)])\n    print(abs(efficiency_gap))\n\n# Execute the main function.\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    """\n    The main entry point for the script.\n    """\n    # Read the input data.\n    precincts, districts = [int(x) for x in input().split()]\n    data = [[int(x) for x in input().split()] for _ in range(precincts)]\n\n    # Get the total votes per district. \n    total_votes = [[0, 0] for _ in range(districts)]\n    for precinct in data:\n        total_votes[precinct[0] - 1][0] += precinct[1]\n        total_votes[precinct[0] - 1][1] += precinct[2]\n\n    # Get the winners and wasted votes per district.\n    winners = []\n    wasted_votes = [[0, 0] for _ in range(districts)]\n    for district in range(districts):\n        if total_votes[district][0] > total_votes[district][1]:\n            winners.append(\'A\')\n            wasted_votes[district][0] = total_votes[district][0] - (total_votes[district][0] // 2 + 1)\n            wasted_votes[district][1] = total_votes[district][1]\n        else:\n            winners.append(\'B\')\n            wasted_votes[district][0] = total_votes[district][0]\n            wasted_votes[district][1] = total_votes[district][1] - (total_votes[district][1] // 2 + 1)\n\n    # Print the output.\n    for district in range(districts):\n        print(winners[district], wasted_votes[district][0], wasted_votes[district][1])\n\n    # Calculate and print the efficiency gap.\n    efficiency_gap = sum([wasted_votes[district][0] for district in range(districts)]) - sum([wasted_votes[district][1] for district in range(districts)])\n    efficiency_gap /= sum([total_votes[district][0] + total_votes[district][1] for district in range(districts)])\n    print(abs(efficiency_gap))\n\n# Execute the main function.\nif __name__ == \'__main__\':\n    main()\n']
2022-04-11 23:43:11.735182 size on output set 2
2022-04-11 23:43:11.735194 size on input set 2
2022-04-11 23:43:16.962592 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    The main entry point for the script.\n    \"\"\"\n    # Read the input data.\n    precincts, districts = [int(x) for x in raw_input().split()]\n    data = [[int(x) for x in input().split()] for _ in range(precincts)]\n\n    # Get the total votes per district.\n    total_votes = [[0, 0] for _ in range(districts)]\n    for precinct in data:\n        total_votes[precinct[0] - 1][0] += precinct[1]\n        total_votes[precinct[0] - 1][1] += precinct[2]\n\n    # Get the winners and wasted votes in each district.\n    winners = []\n    wasted_votes = [[0, 0] for _ in range(districts)]\n    for district in range(districts):\n        if total_votes[district][0] > total_votes[district][1]:\n            winners.append('A')\n            wasted_votes[district][0] = total_votes[district][0] - (total_votes[district][0] // 2 + 1)\n            wasted_votes[district][1] = total_votes[district][1]\n        else:\n            winners.append('B')\n            wasted_votes[district][0] = total_votes[district][0]\n            wasted_votes[district][1] = total_votes[district][1] - (total_votes[district][1] // 2 + 1)\n\n    # Print the output.\n    for district in range(districts):\n        print(winners[district], wasted_votes[district][0], wasted_votes[district][1])\n\n    # Calculate and print the efficiency gap.\n    efficiency_gap = sum([wasted_votes[district][0] for district in range(districts)]) - sum([wasted_votes[district][1] for district in range(districts)])\n    efficiency_gap /= sum([total_votes[district][0] + total_votes[district][1] for district in range(districts)])\n    print(abs(efficiency_gap) * 100)\n\n# Execute the main function.\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    The main entry point for the script.\n    \"\"\"\n    # Read the input data.\n    precincts, districts = [int(x) for x in input().split()]\n    data = [[int(x) for x in input().split()] for _ in range(precincts)]\n\n    # Get the total votes per district.\n    total_votes = [[0, 0] for _ in range(districts)]\n    for precinct in data:\n        total_votes[precinct[0] - 1][0] += precinct[1]\n        total_votes[precinct[0] - 1][1] += precinct[2]\n\n    # Get the winners and wasted votes in each district.\n    winners = []\n    wasted_votes = [[0, 0] for _ in range(districts)]\n    for district in range(districts):\n        if total_votes[district][0] > total_votes[district][1]:\n            winners.append('A')\n            wasted_votes[district][0] = total_votes[district][0] - (total_votes[district][0] // 2 + 1)\n            wasted_votes[district][1] = total_votes[district][1]\n        else:\n            winners.append('B')\n            wasted_votes[district][0] = total_votes[district][0]\n            wasted_votes[district][1] = total_votes[district][1] - (total_votes[district][1] // 2 + 1)\n\n    # Print the output.\n    for district in range(districts):\n        print(winners[district], wasted_votes[district][0], wasted_votes[district][1])\n\n    # Calculate and print the efficiency gap.\n    efficiency_gap = sum([wasted_votes[district][0] for district in range(districts)]) - \\\n                     sum([wasted_votes[district][1] for district in range(districts)])\n    efficiency_gap /= sum([total_votes[district][0] + total_votes[district][1]\n                           for district in range(districts)])\n    print(abs(efficiency_gap))\n\n# Execute the main function.\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649734991,
  "object": "edit"
}
2022-04-11 23:43:16.962848 fix syntax errors 2 ['\n\ndef main():\n    """\n    The main entry point for the script.\n    """\n    # Read the input data.\n    precincts, districts = [int(x) for x in raw_input().split()]\n    data = [[int(x) for x in input().split()] for _ in range(precincts)]\n\n    # Get the total votes per district.\n    total_votes = [[0, 0] for _ in range(districts)]\n    for precinct in data:\n        total_votes[precinct[0] - 1][0] += precinct[1]\n        total_votes[precinct[0] - 1][1] += precinct[2]\n\n    # Get the winners and wasted votes in each district.\n    winners = []\n    wasted_votes = [[0, 0] for _ in range(districts)]\n    for district in range(districts):\n        if total_votes[district][0] > total_votes[district][1]:\n            winners.append(\'A\')\n            wasted_votes[district][0] = total_votes[district][0] - (total_votes[district][0] // 2 + 1)\n            wasted_votes[district][1] = total_votes[district][1]\n        else:\n            winners.append(\'B\')\n            wasted_votes[district][0] = total_votes[district][0]\n            wasted_votes[district][1] = total_votes[district][1] - (total_votes[district][1] // 2 + 1)\n\n    # Print the output.\n    for district in range(districts):\n        print(winners[district], wasted_votes[district][0], wasted_votes[district][1])\n\n    # Calculate and print the efficiency gap.\n    efficiency_gap = sum([wasted_votes[district][0] for district in range(districts)]) - sum([wasted_votes[district][1] for district in range(districts)])\n    efficiency_gap /= sum([total_votes[district][0] + total_votes[district][1] for district in range(districts)])\n    print(abs(efficiency_gap) * 100)\n\n# Execute the main function.\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    """\n    The main entry point for the script.\n    """\n    # Read the input data.\n    precincts, districts = [int(x) for x in input().split()]\n    data = [[int(x) for x in input().split()] for _ in range(precincts)]\n\n    # Get the total votes per district.\n    total_votes = [[0, 0] for _ in range(districts)]\n    for precinct in data:\n        total_votes[precinct[0] - 1][0] += precinct[1]\n        total_votes[precinct[0] - 1][1] += precinct[2]\n\n    # Get the winners and wasted votes in each district.\n    winners = []\n    wasted_votes = [[0, 0] for _ in range(districts)]\n    for district in range(districts):\n        if total_votes[district][0] > total_votes[district][1]:\n            winners.append(\'A\')\n            wasted_votes[district][0] = total_votes[district][0] - (total_votes[district][0] // 2 + 1)\n            wasted_votes[district][1] = total_votes[district][1]\n        else:\n            winners.append(\'B\')\n            wasted_votes[district][0] = total_votes[district][0]\n            wasted_votes[district][1] = total_votes[district][1] - (total_votes[district][1] // 2 + 1)\n\n    # Print the output.\n    for district in range(districts):\n        print(winners[district], wasted_votes[district][0], wasted_votes[district][1])\n\n    # Calculate and print the efficiency gap.\n    efficiency_gap = sum([wasted_votes[district][0] for district in range(districts)]) - \\\n                     sum([wasted_votes[district][1] for district in range(districts)])\n    efficiency_gap /= sum([total_votes[district][0] + total_votes[district][1]\n                           for district in range(districts)])\n    print(abs(efficiency_gap))\n\n# Execute the main function.\nif __name__ == \'__main__\':\n    main()\n']
2022-04-11 23:43:22.029958 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    The main entry point for the script.\n    \"\"\"\n    # Read the input data.\n    precincts, districts = [int(x) for x in input().split()]\n    data = [[int(x) for x in input().split()] for _ in range(precincts)]\n\n    # Get the total votes per district. \n    total_votes = [[0, 0] for _ in range(districts)]\n    for precinct in data:\n        total_votes[precinct[0] - 1][0] += precinct[1]\n        total_votes[precinct[0] - 1][1] += precinct[2]\n\n    # Get the winners and wasted votes per district.\n    winners = []\n    wasted_votes = [[0, 0] for _ in range(districts)]\n    for district in range(districts):\n        if total_votes[district][0] > total_votes[district][1]:\n            winners.append('A')\n            wasted_votes[district][0] = total_votes[district][0] - (total_votes[district][0] // 2 + 1)\n            wasted_votes[district][1] = total_votes[district][1]\n        else:\n            winners.append('B')\n            wasted_votes[district][0] = total_votes[district][0]\n            wasted_votes[district][1] = total_votes[district][1] - (total_votes[district][1] // 2 + 1)\n\n    # Print the output.\n    for district in range(districts):\n        print(winners[district], wasted_votes[district][0], wasted_votes[district][1])\n\n    # Calculate and print the efficiency gap.\n    efficiency_gap = (sum([wasted_votes[district][0] for district in range(districts)]) - sum([wasted_votes[district][1] for district in range(districts)])) / sum([total_votes[district][0] + total_votes[district][1] for district in range(districts)])\n    print(abs(efficiency_gap))\n\n# Execute the main function.\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    The main entry point for the script.\n    \"\"\"\n    # Read the input data.\n    precincts, districts = [int(x) for x in input().split()]\n    data = [[int(x) for x in input().split()] for _ in range(precincts)]\n\n    # Get the total votes per district. \n    total_votes = [[0, 0] for _ in range(districts)]\n    for precinct in data:\n        total_votes[precinct[0] - 1][0] += precinct[1]\n        total_votes[precinct[0] - 1][1] += precinct[2]\n\n    # Get the winners and wasted votes per district.\n    winners = []\n    wasted_votes = [[0, 0] for _ in range(districts)]\n    for district in range(districts):\n        if total_votes[district][0] > total_votes[district][1]:\n            winners.append('A')\n            wasted_votes[district][0] = total_votes[district][0] - (total_votes[district][0] // 2 + 1)\n            wasted_votes[district][1] = total_votes[district][1]\n        else:\n            winners.append('B')\n            wasted_votes[district][0] = total_votes[district][0]\n            wasted_votes[district][1] = total_votes[district][1] - (total_votes[district][1] // 2 + 1)\n\n    # Print the output.\n    for district in range(districts):\n        print(winners[district], wasted_votes[district][0], wasted_votes[district][1])\n\n    # Calculate and print the efficiency gap.\n    efficiency_gap = sum([wasted_votes[district][0] for district in range(districts)]) - sum([wasted_votes[district][1] for district in range(districts)]) / sum([total_votes[district][0] + total_votes[district][1] for district in range(districts)])\n    print(abs(efficiency_gap))\n\n# Execute the main function.\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649734997,
  "object": "edit"
}
2022-04-11 23:43:22.030091 fix syntax errors 2 ['\n\ndef main():\n    """\n    The main entry point for the script.\n    """\n    # Read the input data.\n    precincts, districts = [int(x) for x in input().split()]\n    data = [[int(x) for x in input().split()] for _ in range(precincts)]\n\n    # Get the total votes per district. \n    total_votes = [[0, 0] for _ in range(districts)]\n    for precinct in data:\n        total_votes[precinct[0] - 1][0] += precinct[1]\n        total_votes[precinct[0] - 1][1] += precinct[2]\n\n    # Get the winners and wasted votes per district.\n    winners = []\n    wasted_votes = [[0, 0] for _ in range(districts)]\n    for district in range(districts):\n        if total_votes[district][0] > total_votes[district][1]:\n            winners.append(\'A\')\n            wasted_votes[district][0] = total_votes[district][0] - (total_votes[district][0] // 2 + 1)\n            wasted_votes[district][1] = total_votes[district][1]\n        else:\n            winners.append(\'B\')\n            wasted_votes[district][0] = total_votes[district][0]\n            wasted_votes[district][1] = total_votes[district][1] - (total_votes[district][1] // 2 + 1)\n\n    # Print the output.\n    for district in range(districts):\n        print(winners[district], wasted_votes[district][0], wasted_votes[district][1])\n\n    # Calculate and print the efficiency gap.\n    efficiency_gap = (sum([wasted_votes[district][0] for district in range(districts)]) - sum([wasted_votes[district][1] for district in range(districts)])) / sum([total_votes[district][0] + total_votes[district][1] for district in range(districts)])\n    print(abs(efficiency_gap))\n\n# Execute the main function.\nif __name__ == \'__main__\':\n    main()\n', '\n\ndef main():\n    """\n    The main entry point for the script.\n    """\n    # Read the input data.\n    precincts, districts = [int(x) for x in input().split()]\n    data = [[int(x) for x in input().split()] for _ in range(precincts)]\n\n    # Get the total votes per district. \n    total_votes = [[0, 0] for _ in range(districts)]\n    for precinct in data:\n        total_votes[precinct[0] - 1][0] += precinct[1]\n        total_votes[precinct[0] - 1][1] += precinct[2]\n\n    # Get the winners and wasted votes per district.\n    winners = []\n    wasted_votes = [[0, 0] for _ in range(districts)]\n    for district in range(districts):\n        if total_votes[district][0] > total_votes[district][1]:\n            winners.append(\'A\')\n            wasted_votes[district][0] = total_votes[district][0] - (total_votes[district][0] // 2 + 1)\n            wasted_votes[district][1] = total_votes[district][1]\n        else:\n            winners.append(\'B\')\n            wasted_votes[district][0] = total_votes[district][0]\n            wasted_votes[district][1] = total_votes[district][1] - (total_votes[district][1] // 2 + 1)\n\n    # Print the output.\n    for district in range(districts):\n        print(winners[district], wasted_votes[district][0], wasted_votes[district][1])\n\n    # Calculate and print the efficiency gap.\n    efficiency_gap = sum([wasted_votes[district][0] for district in range(districts)]) - sum([wasted_votes[district][1] for district in range(districts)]) / sum([total_votes[district][0] + total_votes[district][1] for district in range(districts)])\n    print(abs(efficiency_gap))\n\n# Execute the main function.\nif __name__ == \'__main__\':\n    main()\n']
2022-04-11 23:43:22.030238 size on output set 4
2022-04-11 23:43:22.030251 num operations 2
2022-04-11 23:43:22.030258 size on input set 1
2022-04-11 23:43:24.696450 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    p, d = [int(x) for x in input().split()]\n    precincts = []\n    for i in range(p):\n        precincts.append([int(x) for x in input().split()])\n    # Get the districts and the votes\n    districts = []\n    for i in range(d):\n        districts.append([])\n    for precinct in precincts:\n        districts[precinct[0]-1].append(precinct)\n    # Get the results and the efficiency gap\n    results = []\n    for district in districts:\n        a_votes = sum([precinct[1] for precinct in district])\n        b_votes = sum([precinct[2] for precinct in district])\n        if a_votes > b_votes:\n            winner = 'A'\n            lost_votes = b_votes\n            excess_votes = a_votes - (len(district)//2 + 1)\n        else:\n            winner = 'B'\n            lost_votes = a_votes\n            excess_votes = b_votes - (len(district)//2 + 1)\n        results.append([winner, lost_votes, excess_votes])\n    # Print the results\n    for result in results:\n        print(result[0], result[1], result[2])\n    # Print the efficiency gap\n    total_votes = sum([sum([precinct[1] + precinct[2] for precinct in district]) for district in districts])\n    total_lost_votes = sum([result[1] for result in results])\n    total_excess_votes = sum([result[2] for result in results])\n    print(abs(total_lost_votes - total_excess_votes)/total_votes)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    p, d = [int(x) for x in input().split()]\n    precincts = []\n    for i in range(p):\n        precincts.append([int(x) for x in input().split()])\n    # Get the districts and compute the results\n    districts = []\n    for i in range(d):\n        districts.append([])\n    for precinct in precincts:\n        districts[precinct[0]-1].append(precinct)\n    results = []\n    for district in districts:\n        a_votes = sum([precinct[1] for precinct in district])\n        b_votes = sum([precinct[2] for precinct in district])\n        if a_votes > b_votes:\n            winner = 'A'\n            lost_votes = b_votes\n            excess_votes = a_votes - (len(district)//2 + 1)\n        else:\n            winner = 'B'\n            lost_votes = a_votes\n            excess_votes = b_votes - (len(district)//2 + 1)\n        results.append([winner, lost_votes, excess_votes])\n    # Print the results\n    for result in results:\n        print(result[0], result[1], result[2])\n    # Print the efficiency gap\n    total_votes = sum([sum([precinct[1] + precinct[2] for precinct in district]) for district in districts])\n    total_lost_votes = sum([result[1] for result in results])\n    total_excess_votes = sum([result[2] for result in results])\n    print(abs(total_lost_votes - total_excess_votes)/total_votes)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649735002,
  "object": "edit"
}
2022-04-11 23:43:24.696736 fix spelling mistakes 2 ['\n\ndef main():\n    """\n    Main function\n    """\n    # Get input\n    p, d = [int(x) for x in input().split()]\n    precincts = []\n    for i in range(p):\n        precincts.append([int(x) for x in input().split()])\n    # Get the districts and the votes\n    districts = []\n    for i in range(d):\n        districts.append([])\n    for precinct in precincts:\n        districts[precinct[0]-1].append(precinct)\n    # Get the results and the efficiency gap\n    results = []\n    for district in districts:\n        a_votes = sum([precinct[1] for precinct in district])\n        b_votes = sum([precinct[2] for precinct in district])\n        if a_votes > b_votes:\n            winner = \'A\'\n            lost_votes = b_votes\n            excess_votes = a_votes - (len(district)//2 + 1)\n        else:\n            winner = \'B\'\n            lost_votes = a_votes\n            excess_votes = b_votes - (len(district)//2 + 1)\n        results.append([winner, lost_votes, excess_votes])\n    # Print the results\n    for result in results:\n        print(result[0], result[1], result[2])\n    # Print the efficiency gap\n    total_votes = sum([sum([precinct[1] + precinct[2] for precinct in district]) for district in districts])\n    total_lost_votes = sum([result[1] for result in results])\n    total_excess_votes = sum([result[2] for result in results])\n    print(abs(total_lost_votes - total_excess_votes)/total_votes)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Main function\n    """\n    # Get input\n    p, d = [int(x) for x in input().split()]\n    precincts = []\n    for i in range(p):\n        precincts.append([int(x) for x in input().split()])\n    # Get the districts and compute the results\n    districts = []\n    for i in range(d):\n        districts.append([])\n    for precinct in precincts:\n        districts[precinct[0]-1].append(precinct)\n    results = []\n    for district in districts:\n        a_votes = sum([precinct[1] for precinct in district])\n        b_votes = sum([precinct[2] for precinct in district])\n        if a_votes > b_votes:\n            winner = \'A\'\n            lost_votes = b_votes\n            excess_votes = a_votes - (len(district)//2 + 1)\n        else:\n            winner = \'B\'\n            lost_votes = a_votes\n            excess_votes = b_votes - (len(district)//2 + 1)\n        results.append([winner, lost_votes, excess_votes])\n    # Print the results\n    for result in results:\n        print(result[0], result[1], result[2])\n    # Print the efficiency gap\n    total_votes = sum([sum([precinct[1] + precinct[2] for precinct in district]) for district in districts])\n    total_lost_votes = sum([result[1] for result in results])\n    total_excess_votes = sum([result[2] for result in results])\n    print(abs(total_lost_votes - total_excess_votes)/total_votes)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-11 23:43:24.696883 size on output set 2
2022-04-11 23:43:24.696898 size on input set 2
2022-04-11 23:43:29.361472 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    p, d = [int(x) for x in input().split()]\n    precincts = []\n    for i in range(p):\n        precincts.append([int(x) for x in input().split()])\n    # Get the districts and compute the results\n    districts = []\n    for i in range(d):\n        districts.append([])\n    for precinct in precincts:\n        districts[precinct[0]-1].append(precinct)\n    results = []\n    for district in districts:\n        a_votes = sum([precinct[1] for precinct in district])\n        b_votes = sum([precinct[2] for precinct in district])\n        if a_votes > b_votes:\n            winner = 'A'\n            lost_votes = b_votes\n            excess_votes = a_votes - (len(district)//2 + 1)\n        else:\n            winner = 'B'\n            lost_votes = a_votes\n            excess_votes = b_votes - (len(district)//2 + 1)\n        results.append([winner, lost_votes, excess_votes])\n    # Print the results\n    for result in results:\n        print(result[0], result[1], result[2])\n    # Print the efficiency gap\n    total_votes = sum([sum([precinct[1] + precinct[2] for precinct in district]) for district in districts])\n    total_lost_votes = sum([result[1] for result in results])\n    total_excess_votes = sum([result[2] for result in results])\n    print(abs(total_lost_votes - total_excess_votes) / total_votes)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    p, d = map(int, input().split())\n    precincts = []\n    for i in range(p):\n        precincts.append(list(map(int, input().split())))\n    # Get the districts and compute the results\n    districts = []\n    for i in range(d):\n        districts.append([])\n    for precinct in precincts:\n        districts[precinct[0]-1].append(precinct)\n    results = []\n    for district in districts:\n        a_votes = sum([precinct[1] for precinct in district])\n        b_votes = sum([precinct[2] for precinct in district])\n        if a_votes > b_votes:\n            winner = 'A'\n            lost_votes = b_votes\n            excess_votes = a_votes - (len(district)//2 + 1)\n        else:\n            winner = 'B'\n            lost_votes = a_votes\n            excess_votes = b_votes - (len(district)//2 + 1)\n        results.append([winner, lost_votes, excess_votes])\n    # Print the results\n    for result in results:\n        print(result[0], result[1], result[2])\n    # Print the efficiency gap\n    total_votes = sum([sum([precinct[1] + precinct[2] for precinct in district])\n                       for district in districts])\n    total_lost_votes = sum([result[1] for result in results])\n    total_excess_votes = sum([result[2] for result in results])\n    print(abs(total_lost_votes - total_excess_votes)/total_votes)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649735004,
  "object": "edit"
}
2022-04-11 23:43:29.361601 fix syntax errors 2 ['\n\ndef main():\n    """\n    Main function\n    """\n    # Get input\n    p, d = [int(x) for x in input().split()]\n    precincts = []\n    for i in range(p):\n        precincts.append([int(x) for x in input().split()])\n    # Get the districts and compute the results\n    districts = []\n    for i in range(d):\n        districts.append([])\n    for precinct in precincts:\n        districts[precinct[0]-1].append(precinct)\n    results = []\n    for district in districts:\n        a_votes = sum([precinct[1] for precinct in district])\n        b_votes = sum([precinct[2] for precinct in district])\n        if a_votes > b_votes:\n            winner = \'A\'\n            lost_votes = b_votes\n            excess_votes = a_votes - (len(district)//2 + 1)\n        else:\n            winner = \'B\'\n            lost_votes = a_votes\n            excess_votes = b_votes - (len(district)//2 + 1)\n        results.append([winner, lost_votes, excess_votes])\n    # Print the results\n    for result in results:\n        print(result[0], result[1], result[2])\n    # Print the efficiency gap\n    total_votes = sum([sum([precinct[1] + precinct[2] for precinct in district]) for district in districts])\n    total_lost_votes = sum([result[1] for result in results])\n    total_excess_votes = sum([result[2] for result in results])\n    print(abs(total_lost_votes - total_excess_votes) / total_votes)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Main function\n    """\n    # Get input\n    p, d = map(int, input().split())\n    precincts = []\n    for i in range(p):\n        precincts.append(list(map(int, input().split())))\n    # Get the districts and compute the results\n    districts = []\n    for i in range(d):\n        districts.append([])\n    for precinct in precincts:\n        districts[precinct[0]-1].append(precinct)\n    results = []\n    for district in districts:\n        a_votes = sum([precinct[1] for precinct in district])\n        b_votes = sum([precinct[2] for precinct in district])\n        if a_votes > b_votes:\n            winner = \'A\'\n            lost_votes = b_votes\n            excess_votes = a_votes - (len(district)//2 + 1)\n        else:\n            winner = \'B\'\n            lost_votes = a_votes\n            excess_votes = b_votes - (len(district)//2 + 1)\n        results.append([winner, lost_votes, excess_votes])\n    # Print the results\n    for result in results:\n        print(result[0], result[1], result[2])\n    # Print the efficiency gap\n    total_votes = sum([sum([precinct[1] + precinct[2] for precinct in district])\n                       for district in districts])\n    total_lost_votes = sum([result[1] for result in results])\n    total_excess_votes = sum([result[2] for result in results])\n    print(abs(total_lost_votes - total_excess_votes)/total_votes)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-11 23:43:32.874825 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    p, d = [int(x) for x in raw_input().split()]\n    precincts = []\n    for i in range(p):\n        precincts.append([int(x) for x in raw_input().split()])\n    # Get the districts and the votes\n    districts = []\n    for i in range(d):\n        districts.append([])\n    for precinct in precincts:\n        districts[precinct[0]-1].append(precinct)\n    # Get the results and the efficiency gap\n    results = []\n    for district in districts:\n        a_votes = sum([precinct[1] for precinct in district])\n        b_votes = sum([precinct[2] for precinct in district])\n        if a_votes > b_votes:\n            winner = 'A'\n            lost_votes = b_votes\n            excess_votes = a_votes - (len(district)//2 + 1)\n        else:\n            winner = 'B'\n            lost_votes = a_votes\n            excess_votes = b_votes - (len(district)//2 + 1)\n        results.append([winner, lost_votes, excess_votes])\n    # Print the results\n    for result in results:\n        print(result[0], result[1], result[2])\n    # Print the efficiency gap\n    total_votes = sum([sum([precinct[1] + precinct[2] for precinct in district]) for district in districts])\n    total_lost_votes = sum([result[1] for result in results])\n    total_excess_votes = sum([result[2] for result in results])\n    print(abs(total_lost_votes - total_excess_votes)/total_votes)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    p, d = [int(x) for x in input().split()]\n    precincts = []\n    for i in range(p):\n        precincts.append([int(x) for x in input().split()])\n    # Get the districts and the votes\n    districts = []\n    for i in range(d):\n        districts.append([])\n    for precinct in precincts:\n        districts[precinct[0]-1].append(precinct)\n    # Get the results\n    results = []\n    for district in districts:\n        a_votes = sum([precinct[1] for precinct in district])\n        b_votes = sum([precinct[2] for precinct in district])\n        if a_votes > b_votes:\n            winner = 'A'\n            lost_votes = b_votes\n            excess_votes = a_votes - (len(district)//2 + 1)\n        else:\n            winner = 'B'\n            lost_votes = a_votes\n            excess_votes = b_votes - (len(district)//2 + 1)\n        results.append([winner, lost_votes, excess_votes])\n    # Print the results\n    for result in results:\n        print(result[0], result[1], result[2])\n    # Get the efficiency gap\n    total_votes = sum([sum([precinct[1] + precinct[2] for precinct in district]) for district in districts])\n    total_lost_votes = sum([result[1] for result in results])\n    total_excess_votes = sum([result[2] for result in results])\n    print(abs(total_lost_votes - total_excess_votes)/total_votes)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649735009,
  "object": "edit"
}
2022-04-11 23:43:32.875088 fix syntax errors 2 ['\n\ndef main():\n    """\n    Main function\n    """\n    # Get input\n    p, d = [int(x) for x in raw_input().split()]\n    precincts = []\n    for i in range(p):\n        precincts.append([int(x) for x in raw_input().split()])\n    # Get the districts and the votes\n    districts = []\n    for i in range(d):\n        districts.append([])\n    for precinct in precincts:\n        districts[precinct[0]-1].append(precinct)\n    # Get the results and the efficiency gap\n    results = []\n    for district in districts:\n        a_votes = sum([precinct[1] for precinct in district])\n        b_votes = sum([precinct[2] for precinct in district])\n        if a_votes > b_votes:\n            winner = \'A\'\n            lost_votes = b_votes\n            excess_votes = a_votes - (len(district)//2 + 1)\n        else:\n            winner = \'B\'\n            lost_votes = a_votes\n            excess_votes = b_votes - (len(district)//2 + 1)\n        results.append([winner, lost_votes, excess_votes])\n    # Print the results\n    for result in results:\n        print(result[0], result[1], result[2])\n    # Print the efficiency gap\n    total_votes = sum([sum([precinct[1] + precinct[2] for precinct in district]) for district in districts])\n    total_lost_votes = sum([result[1] for result in results])\n    total_excess_votes = sum([result[2] for result in results])\n    print(abs(total_lost_votes - total_excess_votes)/total_votes)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Main function\n    """\n    # Get input\n    p, d = [int(x) for x in input().split()]\n    precincts = []\n    for i in range(p):\n        precincts.append([int(x) for x in input().split()])\n    # Get the districts and the votes\n    districts = []\n    for i in range(d):\n        districts.append([])\n    for precinct in precincts:\n        districts[precinct[0]-1].append(precinct)\n    # Get the results\n    results = []\n    for district in districts:\n        a_votes = sum([precinct[1] for precinct in district])\n        b_votes = sum([precinct[2] for precinct in district])\n        if a_votes > b_votes:\n            winner = \'A\'\n            lost_votes = b_votes\n            excess_votes = a_votes - (len(district)//2 + 1)\n        else:\n            winner = \'B\'\n            lost_votes = a_votes\n            excess_votes = b_votes - (len(district)//2 + 1)\n        results.append([winner, lost_votes, excess_votes])\n    # Print the results\n    for result in results:\n        print(result[0], result[1], result[2])\n    # Get the efficiency gap\n    total_votes = sum([sum([precinct[1] + precinct[2] for precinct in district]) for district in districts])\n    total_lost_votes = sum([result[1] for result in results])\n    total_excess_votes = sum([result[2] for result in results])\n    print(abs(total_lost_votes - total_excess_votes)/total_votes)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-11 23:43:32.875268 size on output set 4
2022-04-11 23:43:32.875285 num operations 2
2022-04-11 23:43:32.875291 size on input set 1
2022-04-11 23:43:35.721224 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    line = sys.stdin.readline()\n    P, D = list(map(int, line.split()))\n    precincts = [None] * P\n    for i in range(P):\n        line = sys.stdin.readline()\n        d, a, b = list(map(int, line.split()))\n        precincts[i] = (d, a, b)\n    districts = [None] * D\n    for i in range(D):\n        districts[i] = []\n    for i in range(P):\n        districts[precincts[i][0] - 1].append(precincts[i])\n    efficiency_gap = 0\n    for i in range(D):\n        district = districts[i]\n        P = len(district)\n        V = 0\n        w_A = 0\n        w_B = 0\n        for j in range(P):\n            V += district[j][1] + district[j][2]\n        A_votes = 0\n        B_votes = 0\n        for j in range(P):\n            A_votes += district[j][1]\n            B_votes += district[j][2]\n        if A_votes > B_votes:\n            w_B = B_votes\n            if A_votes > V/2 + 1:\n                w_A = A_votes - V/2 - 1\n            else:\n                w_A = 0\n            print('A', int(w_A), int(w_B))\n        else:\n            w_A = A_votes\n            if B_votes > V/2 + 1:\n                w_B = B_votes - V/2 - 1\n            else:\n                w_B = 0\n            print('B', int(w_A), int(w_B))\n        efficiency_gap += abs(w_A - w_B)\n    efficiency_gap /= V\n    print('{:.12f}'.format(efficiency_gap))\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    line = sys.stdin.readline()\n    P, D = list(map(int, line.split()))\n    precincts = []\n    for i in range(P):\n        line = sys.stdin.readline()\n        d, a, b = list(map(int, line.split()))\n        precincts.append((d, a, b))\n    districts = [None] * D\n    for i in range(D):\n        districts[i] = []\n    for i in range(P):\n        districts[precincts[i][0] - 1].append(precincts[i])\n    efficiency_gap = 0\n    for i in range(D):\n        district = districts[i]\n        P = len(district)\n        V = 0\n        w_A = 0\n        w_B = 0\n        for j in range(P):\n            V += district[j][1] + district[j][2]\n        A_votes = 0\n        B_votes = 0\n        for j in range(P):\n            A_votes += district[j][1]\n            B_votes += district[j][2]\n        if A_votes > B_votes:\n            w_B = B_votes\n            if A_votes > V/2 + 1:\n                w_A = A_votes - V/2 - 1\n            else:\n                w_A = 0\n            print('A', int(w_A), int(w_B))\n        else:\n            w_A = A_votes\n            if B_votes > V/2 + 1:\n                w_B = B_votes - V/2 - 1\n            else:\n                w_B = 0\n            print('B', int(w_A), int(w_B))\n        efficiency_gap += abs(w_A - w_B)\n    efficiency_gap /= D\n    print('{:.12f}'.format(efficiency_gap))\n\nmain()\n"
    }
  ],
  "created": 1649735013,
  "object": "edit"
}
2022-04-11 23:43:35.721384 fix spelling mistakes 2 ["\n\nimport sys\n\ndef main():\n    line = sys.stdin.readline()\n    P, D = list(map(int, line.split()))\n    precincts = [None] * P\n    for i in range(P):\n        line = sys.stdin.readline()\n        d, a, b = list(map(int, line.split()))\n        precincts[i] = (d, a, b)\n    districts = [None] * D\n    for i in range(D):\n        districts[i] = []\n    for i in range(P):\n        districts[precincts[i][0] - 1].append(precincts[i])\n    efficiency_gap = 0\n    for i in range(D):\n        district = districts[i]\n        P = len(district)\n        V = 0\n        w_A = 0\n        w_B = 0\n        for j in range(P):\n            V += district[j][1] + district[j][2]\n        A_votes = 0\n        B_votes = 0\n        for j in range(P):\n            A_votes += district[j][1]\n            B_votes += district[j][2]\n        if A_votes > B_votes:\n            w_B = B_votes\n            if A_votes > V/2 + 1:\n                w_A = A_votes - V/2 - 1\n            else:\n                w_A = 0\n            print('A', int(w_A), int(w_B))\n        else:\n            w_A = A_votes\n            if B_votes > V/2 + 1:\n                w_B = B_votes - V/2 - 1\n            else:\n                w_B = 0\n            print('B', int(w_A), int(w_B))\n        efficiency_gap += abs(w_A - w_B)\n    efficiency_gap /= V\n    print('{:.12f}'.format(efficiency_gap))\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    line = sys.stdin.readline()\n    P, D = list(map(int, line.split()))\n    precincts = []\n    for i in range(P):\n        line = sys.stdin.readline()\n        d, a, b = list(map(int, line.split()))\n        precincts.append((d, a, b))\n    districts = [None] * D\n    for i in range(D):\n        districts[i] = []\n    for i in range(P):\n        districts[precincts[i][0] - 1].append(precincts[i])\n    efficiency_gap = 0\n    for i in range(D):\n        district = districts[i]\n        P = len(district)\n        V = 0\n        w_A = 0\n        w_B = 0\n        for j in range(P):\n            V += district[j][1] + district[j][2]\n        A_votes = 0\n        B_votes = 0\n        for j in range(P):\n            A_votes += district[j][1]\n            B_votes += district[j][2]\n        if A_votes > B_votes:\n            w_B = B_votes\n            if A_votes > V/2 + 1:\n                w_A = A_votes - V/2 - 1\n            else:\n                w_A = 0\n            print('A', int(w_A), int(w_B))\n        else:\n            w_A = A_votes\n            if B_votes > V/2 + 1:\n                w_B = B_votes - V/2 - 1\n            else:\n                w_B = 0\n            print('B', int(w_A), int(w_B))\n        efficiency_gap += abs(w_A - w_B)\n    efficiency_gap /= D\n    print('{:.12f}'.format(efficiency_gap))\n\nmain()\n"]
2022-04-11 23:43:35.721476 size on output set 2
2022-04-11 23:43:35.721483 size on input set 2
2022-04-11 23:43:52.188281 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    line = sys.stdin.readline()\n    P, D = list(map(int, line.split())) # P = number of precincts, D = number of districts\n    precincts = []\n    for i in range(P):\n        line = sys.stdin.readline()\n        d, a, b = list(map(int, line.split())) # d = district number, a = votes for A, b = votes for B\n        precincts.append((d, a, b)) # precincts is a list of tuples\n    districts = [None] * D\n    for i in range(D):\n        districts[i] = [] # districts is a list of lists\n    for i in range(P):\n        districts[precincts[i][0] - 1].append(precincts[i]) # precincts are added to their respective districts\n    efficiency_gap = 0\n    for i in range(D):\n        district = districts[i]\n        P = len(district) # number of precincts in district\n        V = 0 # total votes in district\n        w_A = 0 # wasted votes for A\n        w_B = 0 # wasted votes for B\n        for j in range(P):\n            V += district[j][1] + district[j][2] # V = sum of votes for A and votes for B\n        A_votes = 0 # votes for A\n        B_votes = 0 # votes for B\n        for j in range(P):\n            A_votes += district[j][1] # A_votes = sum of votes for A\n            B_votes += district[j][2] # B_votes = sum of votes for B\n        if A_votes > B_votes:\n            w_B = B_votes # wasted votes for B = votes for B\n            if A_votes > V/2 + 1:\n                w_A = A_votes - V/2 - 1 # wasted votes for A = votes for A - (V/2 + 1)\n            else:\n                w_A = 0 # wasted votes for A = 0\n            print('A', int(w_A), int(w_B))\n        else:\n            w_A = A_votes # wasted votes for A = votes for A\n            if B_votes > V/2 + 1:\n                w_B = B_votes - V/2 - 1 # wasted votes for B = votes for B - (V/2 + 1)\n            else:\n                w_B = 0 # wasted votes for B = 0\n            print('B', int(w_A), int(w_B))\n        efficiency_gap += abs(w_A - w_B) # efficiency_gap = sum of absolute value of wasted votes for A - wasted votes for B\n    efficiency_gap /= D # efficiency_gap = efficiency_gap / D\n    print('{:.12f}'.format(efficiency_gap))\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    line = sys.stdin.readline()\n    P, D = list(map(int, line.split()))\n    precincts = []\n    for i in range(P):\n        line = sys.stdin.readline()\n        d, a, b = list(map(int, line.split()))\n        precincts.append((d, a, b))\n    districts = [None] * D\n    for i in range(D):\n        districts[i] = []\n    for i in range(P)\n        districts[precincts[i][0] - 1].append(precincts[i])\n    efficiency_gap = 0\n    for i in range(D):\n        district = districts[i]\n        P = len(district)\n        V = 0\n        w_A = 0\n        w_B = 0\n        for j in range(P):\n            V += district[j][1] + district[j][2]\n        A_votes = 0\n        B_votes = 0\n        for j in range(P):\n            A_votes += district[j][1]\n            B_votes += district[j][2]\n        if A_votes > B_votes:\n            w_B = B_votes\n            if A_votes > V/2 + 1:\n                w_A = A_votes - V/2 - 1\n            else:\n                w_A = 0\n            print('A', int(w_A), int(w_B))\n        else:\n            w_A = A_votes\n            if B_votes > V/2 + 1:\n                w_B = B_votes - V/2 - 1\n            else:\n                w_B = 0\n            print('B', int(w_A), int(w_B))\n        efficiency_gap += abs(w_A - w_B)\n    efficiency_gap /= D\n    print('{:.12f}'.format(efficiency_gap))\n\nmain()\n"
    }
  ],
  "created": 1649735015,
  "object": "edit"
}
2022-04-11 23:43:52.188389 fix syntax errors 2 ["\n\nimport sys\n\ndef main():\n    line = sys.stdin.readline()\n    P, D = list(map(int, line.split())) # P = number of precincts, D = number of districts\n    precincts = []\n    for i in range(P):\n        line = sys.stdin.readline()\n        d, a, b = list(map(int, line.split())) # d = district number, a = votes for A, b = votes for B\n        precincts.append((d, a, b)) # precincts is a list of tuples\n    districts = [None] * D\n    for i in range(D):\n        districts[i] = [] # districts is a list of lists\n    for i in range(P):\n        districts[precincts[i][0] - 1].append(precincts[i]) # precincts are added to their respective districts\n    efficiency_gap = 0\n    for i in range(D):\n        district = districts[i]\n        P = len(district) # number of precincts in district\n        V = 0 # total votes in district\n        w_A = 0 # wasted votes for A\n        w_B = 0 # wasted votes for B\n        for j in range(P):\n            V += district[j][1] + district[j][2] # V = sum of votes for A and votes for B\n        A_votes = 0 # votes for A\n        B_votes = 0 # votes for B\n        for j in range(P):\n            A_votes += district[j][1] # A_votes = sum of votes for A\n            B_votes += district[j][2] # B_votes = sum of votes for B\n        if A_votes > B_votes:\n            w_B = B_votes # wasted votes for B = votes for B\n            if A_votes > V/2 + 1:\n                w_A = A_votes - V/2 - 1 # wasted votes for A = votes for A - (V/2 + 1)\n            else:\n                w_A = 0 # wasted votes for A = 0\n            print('A', int(w_A), int(w_B))\n        else:\n            w_A = A_votes # wasted votes for A = votes for A\n            if B_votes > V/2 + 1:\n                w_B = B_votes - V/2 - 1 # wasted votes for B = votes for B - (V/2 + 1)\n            else:\n                w_B = 0 # wasted votes for B = 0\n            print('B', int(w_A), int(w_B))\n        efficiency_gap += abs(w_A - w_B) # efficiency_gap = sum of absolute value of wasted votes for A - wasted votes for B\n    efficiency_gap /= D # efficiency_gap = efficiency_gap / D\n    print('{:.12f}'.format(efficiency_gap))\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    line = sys.stdin.readline()\n    P, D = list(map(int, line.split()))\n    precincts = []\n    for i in range(P):\n        line = sys.stdin.readline()\n        d, a, b = list(map(int, line.split()))\n        precincts.append((d, a, b))\n    districts = [None] * D\n    for i in range(D):\n        districts[i] = []\n    for i in range(P)\n        districts[precincts[i][0] - 1].append(precincts[i])\n    efficiency_gap = 0\n    for i in range(D):\n        district = districts[i]\n        P = len(district)\n        V = 0\n        w_A = 0\n        w_B = 0\n        for j in range(P):\n            V += district[j][1] + district[j][2]\n        A_votes = 0\n        B_votes = 0\n        for j in range(P):\n            A_votes += district[j][1]\n            B_votes += district[j][2]\n        if A_votes > B_votes:\n            w_B = B_votes\n            if A_votes > V/2 + 1:\n                w_A = A_votes - V/2 - 1\n            else:\n                w_A = 0\n            print('A', int(w_A), int(w_B))\n        else:\n            w_A = A_votes\n            if B_votes > V/2 + 1:\n                w_B = B_votes - V/2 - 1\n            else:\n                w_B = 0\n            print('B', int(w_A), int(w_B))\n        efficiency_gap += abs(w_A - w_B)\n    efficiency_gap /= D\n    print('{:.12f}'.format(efficiency_gap))\n\nmain()\n"]
2022-04-11 23:43:54.958731 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    line = sys.stdin.readline()\n    P, D = list(map(int, line.split()))\n    precincts = [None] * P\n    for i in range(P):\n        line = sys.stdin.readline()\n        d, a, b = list(map(int, line.split()))\n        precincts[i] = (d, a, b)\n    districts = [None] * D\n    for i in range(D):\n        districts[i] = []\n    for i in range(P):\n        districts[precincts[i][0] - 1].append(precincts[i])\n    efficiency_gap = 0\n    for i in range(D):\n        district = districts[i]\n        P = len(district)\n        V = 0\n        w_A = 0\n        w_B = 0\n        for j in range(P):\n            V += district[j][1] + district[j][2]\n        A_votes = 0\n        B_votes = 0\n        for j in range(P):\n            A_votes += district[j][1]\n            B_votes += district[j][2]\n        if A_votes > B_votes:\n            w_B = B_votes\n            if A_votes > V/2 + 1:\n                w_A = A_votes - V/2 - 1\n            else:\n                w_A = 0\n        else:\n            w_A = A_votes\n            if B_votes > V/2 + 1:\n                w_B = B_votes - V/2 - 1\n            else:\n                w_B = 0\n        efficiency_gap += abs(w_A - w_B)\n    efficiency_gap /= V\n    print('{:.12f}'.format(efficiency_gap))\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    line = sys.stdin.readline()\n    P, D = list(map(int, line.split()))\n    precincts = [None] * P\n    for i in range(P):\n        line = sys.stdin.readline()\n        d, a, b = list(map(int, line.split()))\n        precincts[i] = (d, a, b)\n    districts = [None] * D\n    for i in range(D):\n        districts[i] = []\n    for i in range(P):\n        districts[precincts[i][0] - 1].append(precincts[i])\n    efficiency_gap = 0\n    for i in range(D):\n        district = districts[i]\n        P = len(district)\n        V = 0\n        w_A = 0\n        w_B = 0\n        for j in range(P):\n            V += district[j][1] + district[j][2]\n        A_votes = 0\n        B_votes = 0\n        for j in range(P):\n            A_votes += district[j][1]\n            B_votes += district[j][2]\n        if A_votes > B_votes:\n            w_B = B_votes\n            if A_votes > V/2 + 1:\n                w_A = A_votes - V/2 - 1\n            else:\n                w_A = 0\n            print('A', int(w_A), int(w_B))\n        else:\n            w_A = A_votes\n            if B_votes > V/2 + 1:\n                w_B = B_votes - V/2 - 1\n            else:\n                w_B = 0\n            print('B', int(w_A), int(w_B))\n        efficiency_gap += abs(w_A - w_B)\n    efficiency_gap /= D\n    print('{:.12f}'.format(efficiency_gap))\n\nmain()\n"
    }
  ],
  "created": 1649735032,
  "object": "edit"
}
2022-04-11 23:43:54.958959 fix syntax errors 2 ["\n\nimport sys\n\ndef main():\n    line = sys.stdin.readline()\n    P, D = list(map(int, line.split()))\n    precincts = [None] * P\n    for i in range(P):\n        line = sys.stdin.readline()\n        d, a, b = list(map(int, line.split()))\n        precincts[i] = (d, a, b)\n    districts = [None] * D\n    for i in range(D):\n        districts[i] = []\n    for i in range(P):\n        districts[precincts[i][0] - 1].append(precincts[i])\n    efficiency_gap = 0\n    for i in range(D):\n        district = districts[i]\n        P = len(district)\n        V = 0\n        w_A = 0\n        w_B = 0\n        for j in range(P):\n            V += district[j][1] + district[j][2]\n        A_votes = 0\n        B_votes = 0\n        for j in range(P):\n            A_votes += district[j][1]\n            B_votes += district[j][2]\n        if A_votes > B_votes:\n            w_B = B_votes\n            if A_votes > V/2 + 1:\n                w_A = A_votes - V/2 - 1\n            else:\n                w_A = 0\n        else:\n            w_A = A_votes\n            if B_votes > V/2 + 1:\n                w_B = B_votes - V/2 - 1\n            else:\n                w_B = 0\n        efficiency_gap += abs(w_A - w_B)\n    efficiency_gap /= V\n    print('{:.12f}'.format(efficiency_gap))\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    line = sys.stdin.readline()\n    P, D = list(map(int, line.split()))\n    precincts = [None] * P\n    for i in range(P):\n        line = sys.stdin.readline()\n        d, a, b = list(map(int, line.split()))\n        precincts[i] = (d, a, b)\n    districts = [None] * D\n    for i in range(D):\n        districts[i] = []\n    for i in range(P):\n        districts[precincts[i][0] - 1].append(precincts[i])\n    efficiency_gap = 0\n    for i in range(D):\n        district = districts[i]\n        P = len(district)\n        V = 0\n        w_A = 0\n        w_B = 0\n        for j in range(P):\n            V += district[j][1] + district[j][2]\n        A_votes = 0\n        B_votes = 0\n        for j in range(P):\n            A_votes += district[j][1]\n            B_votes += district[j][2]\n        if A_votes > B_votes:\n            w_B = B_votes\n            if A_votes > V/2 + 1:\n                w_A = A_votes - V/2 - 1\n            else:\n                w_A = 0\n            print('A', int(w_A), int(w_B))\n        else:\n            w_A = A_votes\n            if B_votes > V/2 + 1:\n                w_B = B_votes - V/2 - 1\n            else:\n                w_B = 0\n            print('B', int(w_A), int(w_B))\n        efficiency_gap += abs(w_A - w_B)\n    efficiency_gap /= D\n    print('{:.12f}'.format(efficiency_gap))\n\nmain()\n"]
2022-04-11 23:43:54.959118 size on output set 4
2022-04-11 23:43:54.959162 num operations 2
2022-04-11 23:43:54.959177 size on input set 1
2022-04-11 23:43:59.073212 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom collections import defaultdict\n\ndef efficiency_gap(precincts):\n    \"\"\"\n    The efficiency gap is a measure of how fair the districting is. \n    It is the difference between the total number of wasted votes for\n    the party that won the most seats and the party that won the fewest\n    seats, divided by the total number of votes cast.\n    \"\"\"\n    num_votes = sum(sum(p) for p in precincts.values())\n    wasted_votes = defaultdict(int)\n    for district, precinct_votes in precincts.items():\n        if precinct_votes[0] > precinct_votes[1]:\n            wasted_votes[district] = precinct_votes[0] - (sum(precinct_votes) // 2 + 1)\n        else:\n            wasted_votes[district] = precinct_votes[1] - (sum(precinct_votes) // 2 + 1)\n    if sum(wasted_votes.values()) == 0:\n        return 0\n    return abs(sum(wasted_votes.values())) / num_votes\n\n\ndef main():\n    P, D = [int(x) for x in input().strip().split()]\n    precincts = defaultdict(list)\n    for i in range(P):\n        d, a, b = [int(x) for x in input().strip().split()]\n        precincts[d].append((a, b))\n\n    for district, precinct_votes in precincts.items():\n        votes_a = sum(p[0] for p in precinct_votes)\n        votes_b = sum(p[1] for p in precinct_votes)\n        if votes_a > votes_b:\n            print('A', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1))\n        else:\n            print('B', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1))\n\n    print(efficiency_gap(precincts))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom collections import defaultdict\n\ndef efficiency_gap(precincts):\n    \"\"\"\n    The efficiency gap is a measure of how fair the districting is.\n    It is the difference between the total number of wasted votes for\n    the party that won the most seats and the party that won the fewest\n    seats, divided by the total number of votes cast.\n    \"\"\"\n    num_votes = sum(sum(p) for p in precincts.values())\n    wasted_votes = defaultdict(int)\n    for district, precinct_votes in precincts.items():\n        if precinct_votes[0] > precinct_votes[1]:\n            wasted_votes[district] = precinct_votes[0] - (sum(precinct_votes) // 2 + 1)\n        else:\n            wasted_votes[district] = precinct_votes[1] - (sum(precinct_votes) // 2 + 1)\n    if sum(wasted_votes.values()) == 0:\n        return 0\n    return abs(sum(wasted_votes.values())) / num_votes\n\n\ndef main():\n    P, D = [int(x) for x in input().strip().split()]\n    precincts = defaultdict(list) # key is district, value is list of tuples (a, b)\n    for i in range(P):\n        d, a, b = [int(x) for x in input().strip().split()]\n        precincts[d].append((a, b))\n\n    for district, precinct_votes in precincts.items():\n        votes_a = sum(p[0] for p in precinct_votes)\n        votes_b = sum(p[1] for p in precinct_votes)\n        if votes_a > votes_b:\n            print('A', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1)) # wasted votes for A, wasted votes for B\n        else:\n            print('B', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1))\n\n    print(efficiency_gap(precincts))\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649735035,
  "object": "edit"
}
2022-04-11 23:43:59.073494 fix spelling mistakes 2 ['\n\nfrom collections import defaultdict\n\ndef efficiency_gap(precincts):\n    """\n    The efficiency gap is a measure of how fair the districting is. \n    It is the difference between the total number of wasted votes for\n    the party that won the most seats and the party that won the fewest\n    seats, divided by the total number of votes cast.\n    """\n    num_votes = sum(sum(p) for p in precincts.values())\n    wasted_votes = defaultdict(int)\n    for district, precinct_votes in precincts.items():\n        if precinct_votes[0] > precinct_votes[1]:\n            wasted_votes[district] = precinct_votes[0] - (sum(precinct_votes) // 2 + 1)\n        else:\n            wasted_votes[district] = precinct_votes[1] - (sum(precinct_votes) // 2 + 1)\n    if sum(wasted_votes.values()) == 0:\n        return 0\n    return abs(sum(wasted_votes.values())) / num_votes\n\n\ndef main():\n    P, D = [int(x) for x in input().strip().split()]\n    precincts = defaultdict(list)\n    for i in range(P):\n        d, a, b = [int(x) for x in input().strip().split()]\n        precincts[d].append((a, b))\n\n    for district, precinct_votes in precincts.items():\n        votes_a = sum(p[0] for p in precinct_votes)\n        votes_b = sum(p[1] for p in precinct_votes)\n        if votes_a > votes_b:\n            print(\'A\', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1))\n        else:\n            print(\'B\', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1))\n\n    print(efficiency_gap(precincts))\n\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nfrom collections import defaultdict\n\ndef efficiency_gap(precincts):\n    """\n    The efficiency gap is a measure of how fair the districting is.\n    It is the difference between the total number of wasted votes for\n    the party that won the most seats and the party that won the fewest\n    seats, divided by the total number of votes cast.\n    """\n    num_votes = sum(sum(p) for p in precincts.values())\n    wasted_votes = defaultdict(int)\n    for district, precinct_votes in precincts.items():\n        if precinct_votes[0] > precinct_votes[1]:\n            wasted_votes[district] = precinct_votes[0] - (sum(precinct_votes) // 2 + 1)\n        else:\n            wasted_votes[district] = precinct_votes[1] - (sum(precinct_votes) // 2 + 1)\n    if sum(wasted_votes.values()) == 0:\n        return 0\n    return abs(sum(wasted_votes.values())) / num_votes\n\n\ndef main():\n    P, D = [int(x) for x in input().strip().split()]\n    precincts = defaultdict(list) # key is district, value is list of tuples (a, b)\n    for i in range(P):\n        d, a, b = [int(x) for x in input().strip().split()]\n        precincts[d].append((a, b))\n\n    for district, precinct_votes in precincts.items():\n        votes_a = sum(p[0] for p in precinct_votes)\n        votes_b = sum(p[1] for p in precinct_votes)\n        if votes_a > votes_b:\n            print(\'A\', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1)) # wasted votes for A, wasted votes for B\n        else:\n            print(\'B\', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1))\n\n    print(efficiency_gap(precincts))\n\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-11 23:43:59.073684 size on output set 2
2022-04-11 23:43:59.073697 size on input set 2
2022-04-11 23:44:05.261596 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nfrom collections import defaultdict\n\ndef efficiency_gap(precincts):\n    \"\"\"\n    The efficiency gap is a measure of how fair the districting is. \n    It is the difference between the total number of wasted votes for\n    the party that won the most seats and the party that won the fewest\n    seats, divided by the total number of votes cast.\n    \"\"\"\n    num_votes = sum(sum(p) for p in precincts.values())\n    wasted_votes = defaultdict(int)\n    for district, precinct_votes in precincts.items():\n        if precinct_votes[0] > precinct_votes[1]:\n            wasted_votes[district] = precinct_votes[0] - (sum(precinct_votes) // 2 + 1)\n        else:\n            wasted_votes[district] = precinct_votes[1] - (sum(precinct_votes) // 2 + 1)\n    if sum(wasted_votes.values()) == 0:\n        return 0\n    return abs(sum(wasted_votes.values())) / num_votes\n\n\ndef main():\n    P, D = [int(x) for x in sys.stdin.readline().strip().split()]\n    precincts = defaultdict(list)\n    for i in range(P):\n        d, a, b = [int(x) for x in sys.stdin.readline().strip().split()]\n        precincts[d].append((a, b))\n\n    for district, precinct_votes in precincts.items():\n        votes_a = sum(p[0] for p in precinct_votes)\n        votes_b = sum(p[1] for p in precinct_votes)\n        if votes_a > votes_b:\n            print('A', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1))\n        else:\n            print('B', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1))\n\n    print(efficiency_gap(precincts))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom collections import defaultdict\n\ndef efficiency_gap(precincts):\n    \"\"\"\n    The efficiency gap is a measure of how fair the districting is. \n    It is the difference between the total number of wasted votes for\n    the party that won the most seats and the party that won the fewest\n    seats, divided by the total number of votes cast.\n    \"\"\"\n    num_votes = sum(sum(p) for p in precincts.values() for p in p)\n    wasted_votes = defaultdict(int)\n    for district, precinct_votes in precincts.items():\n        if precinct_votes[0] > precinct_votes[1]:\n            wasted_votes[district] = precinct_votes[0] - (sum(precinct_votes) // 2 + 1) + wasted_votes[district]\n        else:\n            wasted_votes[district] = precinct_votes[1] - (sum(precinct_votes) // 2 + 1) + wasted_votes[district]\n    if sum(wasted_votes.values()) == 0:\n        return 0\n    return abs(sum(wasted_votes.values())) / num_votes\n\n\ndef main():\n    P, D = [int(x) for x in input().strip().split()]\n    precincts = defaultdict(list)\n    for i in range(P):\n        d, a, b = [int(x) for x in input().strip().split()]\n        precincts[d].append((a, b))\n\n    for district, precinct_votes in precincts.items():\n        votes_a = sum(p[0] for p in precinct_votes)\n        votes_b = sum(p[1] for p in precinct_votes)\n        if votes_a > votes_b:\n            print('A', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1))\n        else:\n            print('B', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1))\n\n    print(efficiency_gap(precincts))\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649735039,
  "object": "edit"
}
2022-04-11 23:44:05.261705 fix syntax errors 2 ['\nimport sys\nfrom collections import defaultdict\n\ndef efficiency_gap(precincts):\n    """\n    The efficiency gap is a measure of how fair the districting is. \n    It is the difference between the total number of wasted votes for\n    the party that won the most seats and the party that won the fewest\n    seats, divided by the total number of votes cast.\n    """\n    num_votes = sum(sum(p) for p in precincts.values())\n    wasted_votes = defaultdict(int)\n    for district, precinct_votes in precincts.items():\n        if precinct_votes[0] > precinct_votes[1]:\n            wasted_votes[district] = precinct_votes[0] - (sum(precinct_votes) // 2 + 1)\n        else:\n            wasted_votes[district] = precinct_votes[1] - (sum(precinct_votes) // 2 + 1)\n    if sum(wasted_votes.values()) == 0:\n        return 0\n    return abs(sum(wasted_votes.values())) / num_votes\n\n\ndef main():\n    P, D = [int(x) for x in sys.stdin.readline().strip().split()]\n    precincts = defaultdict(list)\n    for i in range(P):\n        d, a, b = [int(x) for x in sys.stdin.readline().strip().split()]\n        precincts[d].append((a, b))\n\n    for district, precinct_votes in precincts.items():\n        votes_a = sum(p[0] for p in precinct_votes)\n        votes_b = sum(p[1] for p in precinct_votes)\n        if votes_a > votes_b:\n            print(\'A\', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1))\n        else:\n            print(\'B\', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1))\n\n    print(efficiency_gap(precincts))\n\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nfrom collections import defaultdict\n\ndef efficiency_gap(precincts):\n    """\n    The efficiency gap is a measure of how fair the districting is. \n    It is the difference between the total number of wasted votes for\n    the party that won the most seats and the party that won the fewest\n    seats, divided by the total number of votes cast.\n    """\n    num_votes = sum(sum(p) for p in precincts.values() for p in p)\n    wasted_votes = defaultdict(int)\n    for district, precinct_votes in precincts.items():\n        if precinct_votes[0] > precinct_votes[1]:\n            wasted_votes[district] = precinct_votes[0] - (sum(precinct_votes) // 2 + 1) + wasted_votes[district]\n        else:\n            wasted_votes[district] = precinct_votes[1] - (sum(precinct_votes) // 2 + 1) + wasted_votes[district]\n    if sum(wasted_votes.values()) == 0:\n        return 0\n    return abs(sum(wasted_votes.values())) / num_votes\n\n\ndef main():\n    P, D = [int(x) for x in input().strip().split()]\n    precincts = defaultdict(list)\n    for i in range(P):\n        d, a, b = [int(x) for x in input().strip().split()]\n        precincts[d].append((a, b))\n\n    for district, precinct_votes in precincts.items():\n        votes_a = sum(p[0] for p in precinct_votes)\n        votes_b = sum(p[1] for p in precinct_votes)\n        if votes_a > votes_b:\n            print(\'A\', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1))\n        else:\n            print(\'B\', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1))\n\n    print(efficiency_gap(precincts))\n\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-11 23:44:17.062700 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom collections import defaultdict\n\ndef efficiency_gap(precincts):\n    \"\"\"\n    The efficiency gap is a measure of how fair the districting is.\n    It is the difference between the total number of wasted votes for\n    the party that won the most seats and the party that won the fewest\n    seats, divided by the total number of votes cast.\n    \"\"\"\n    num_votes = sum(sum(p) for p in precincts.values())\n    wasted_votes = defaultdict(int)\n    for district, precinct_votes in precincts.items():\n        if precinct_votes[0] > precinct_votes[1]:\n            wasted_votes[district] = precinct_votes[0] - (sum(precinct_votes) // 2 + 1)\n        else:\n            wasted_votes[district] = precinct_votes[1] - (sum(precinct_votes) // 2 + 1)\n    if sum(wasted_votes.values()) == 0:\n        return 0\n    return abs(sum(wasted_votes.values())) / num_votes\n\n\ndef main():\n    P, D = [int(x) for x in input().strip().split()]\n    precincts = defaultdict(list) # key is district, value is list of tuples (a, b)\n    for i in range(P):\n        d, a, b = [int(x) for x in input().strip().split()]\n        precincts[d].append((a, b))\n\n    for district, precinct_votes in precincts.items():\n        votes_a = sum(p[0] for p in precinct_votes)\n        votes_b = sum(p[1] for p in precinct_votes)\n        if votes_a > votes_b:\n            print('A', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1)) # wasted votes for A, wasted votes for B, district\n        else:\n            print('B', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1)) # wasted votes for A, wasted votes for B, district\n\n    print(efficiency_gap(precincts))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom collections import defaultdict\n\ndef efficiency_gap(precincts):\n    \"\"\"\n    The efficiency gap is a measure of how fair the districting is.\n    It is the difference between the total number of wasted votes for\n    the party that won the most seats and the party that won the fewest\n    seats, divided by the total number of votes cast.\n    \"\"\"\n    num_votes = sum(sum(p) for p in precincts.values())\n    wasted_votes = defaultdict(int)\n    for district, precinct_votes in precincts.items():\n        if precinct_votes[0] > precinct_votes[1]:\n            wasted_votes[district] = precinct_votes[0] - (sum(precinct_votes) // 2 + 1) # sum(precinct_votes) // 2 + 1 is the number of votes needed to win a district\n        else:\n            wasted_votes[district] = precinct_votes[1] - (sum(precinct_votes) // 2 + 1) # sum(precinct_votes) // 2 + 1 is the number of votes needed to win a district\n    if sum(wasted_votes.values()) == 0:\n        return 0\n    return abs(sum(wasted_votes.values())) / num_votes\n\n\ndef main():\n    P, D = [int(x) for x in input().strip().split()]\n    precincts = defaultdict(list) # key is district, value is list of tuples (a, b) where a is votes for A and b is votes for B\n    for i in range(P):\n        d, a, b = [int(x) for x in input().strip().split()]\n        precincts[d].append((a, b))\n\n    for district, precinct_votes in precincts.items():\n        votes_a = sum(p[0] for p in precinct_votes)\n        votes_b = sum(p[1] for p in precinct_votes)\n        if votes_a > votes_b:\n            print('A', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1)) # wasted votes for A, wasted votes for B, votes_a // 2 + 1 is the number of votes needed to win a district\n        else:\n            print('B', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1)) # wasted votes for A, wasted votes for B, votes_b // 2 + 1 is the number of votes needed to win a district\n\n    print(efficiency_gap(precincts))\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649735045,
  "object": "edit"
}
2022-04-11 23:44:17.062807 fix syntax errors 2 ['\n\nfrom collections import defaultdict\n\ndef efficiency_gap(precincts):\n    """\n    The efficiency gap is a measure of how fair the districting is.\n    It is the difference between the total number of wasted votes for\n    the party that won the most seats and the party that won the fewest\n    seats, divided by the total number of votes cast.\n    """\n    num_votes = sum(sum(p) for p in precincts.values())\n    wasted_votes = defaultdict(int)\n    for district, precinct_votes in precincts.items():\n        if precinct_votes[0] > precinct_votes[1]:\n            wasted_votes[district] = precinct_votes[0] - (sum(precinct_votes) // 2 + 1)\n        else:\n            wasted_votes[district] = precinct_votes[1] - (sum(precinct_votes) // 2 + 1)\n    if sum(wasted_votes.values()) == 0:\n        return 0\n    return abs(sum(wasted_votes.values())) / num_votes\n\n\ndef main():\n    P, D = [int(x) for x in input().strip().split()]\n    precincts = defaultdict(list) # key is district, value is list of tuples (a, b)\n    for i in range(P):\n        d, a, b = [int(x) for x in input().strip().split()]\n        precincts[d].append((a, b))\n\n    for district, precinct_votes in precincts.items():\n        votes_a = sum(p[0] for p in precinct_votes)\n        votes_b = sum(p[1] for p in precinct_votes)\n        if votes_a > votes_b:\n            print(\'A\', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1)) # wasted votes for A, wasted votes for B, district\n        else:\n            print(\'B\', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1)) # wasted votes for A, wasted votes for B, district\n\n    print(efficiency_gap(precincts))\n\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nfrom collections import defaultdict\n\ndef efficiency_gap(precincts):\n    """\n    The efficiency gap is a measure of how fair the districting is.\n    It is the difference between the total number of wasted votes for\n    the party that won the most seats and the party that won the fewest\n    seats, divided by the total number of votes cast.\n    """\n    num_votes = sum(sum(p) for p in precincts.values())\n    wasted_votes = defaultdict(int)\n    for district, precinct_votes in precincts.items():\n        if precinct_votes[0] > precinct_votes[1]:\n            wasted_votes[district] = precinct_votes[0] - (sum(precinct_votes) // 2 + 1) # sum(precinct_votes) // 2 + 1 is the number of votes needed to win a district\n        else:\n            wasted_votes[district] = precinct_votes[1] - (sum(precinct_votes) // 2 + 1) # sum(precinct_votes) // 2 + 1 is the number of votes needed to win a district\n    if sum(wasted_votes.values()) == 0:\n        return 0\n    return abs(sum(wasted_votes.values())) / num_votes\n\n\ndef main():\n    P, D = [int(x) for x in input().strip().split()]\n    precincts = defaultdict(list) # key is district, value is list of tuples (a, b) where a is votes for A and b is votes for B\n    for i in range(P):\n        d, a, b = [int(x) for x in input().strip().split()]\n        precincts[d].append((a, b))\n\n    for district, precinct_votes in precincts.items():\n        votes_a = sum(p[0] for p in precinct_votes)\n        votes_b = sum(p[1] for p in precinct_votes)\n        if votes_a > votes_b:\n            print(\'A\', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1)) # wasted votes for A, wasted votes for B, votes_a // 2 + 1 is the number of votes needed to win a district\n        else:\n            print(\'B\', votes_a - (votes_a // 2 + 1), votes_b - (votes_b // 2 + 1)) # wasted votes for A, wasted votes for B, votes_b // 2 + 1 is the number of votes needed to win a district\n\n    print(efficiency_gap(precincts))\n\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-11 23:44:17.062885 size on output set 4
