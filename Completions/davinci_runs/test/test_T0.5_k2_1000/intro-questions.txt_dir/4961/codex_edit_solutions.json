["import sys\nlines = sys.stdin.readlines()\nR, S = [int(x) for x in lines[0].split()]\nseating = [list(s.strip()) for s in lines[1:]]\ndef handshakes(seating):\n    count = 0\n    for row in range(R):\n        for seat in range(S):\n            if seating[row][seat] == \"o\":\n                # Check left\n                if seat > 0 and seating[row][seat - 1] == \"o\":\n                    count += 1\n                # Check right\n                if seat < S - 1 and seating[row][seat + 1] == \"o\":\n                    count += 1\n                # Check up\n                if row > 0 and seating[row - 1][seat] == \"o\":\n                    count += 1\n                # Check down\n                if row < R - 1 and seating[row + 1][seat] == \"o\":\n                    count += 1\n                # Check up left\n                if seat > 0 and row > 0 and seating[row - 1][seat - 1] == \"o\":\n                    count += 1\n                # Check up right\n                if seat < S - 1 and row > 0 and seating[row - 1][seat + 1] == \"o\":\n                    count += 1\n                # Check down left\n                if seat > 0 and row < R - 1 and seating[row + 1][seat - 1] == \"o\":\n                    count += 1\n                # Check down right\n                if seat < S - 1 and row < R - 1 and seating[row + 1][seat + 1] == \"o\":\n                    count += 1\n    return count\nprint(handshakes(seating))\n", "\n# Get input from user\ninput_list = []\n\nwhile True:\n    try:\n        input_list.append(input())\n    except:\n        break\n\n# Parse input\nR, S = input_list[0].split()\nR = int(R)\nS = int(S)\n\n# Initialize number of handshakes and number of people\nnum_handshakes = num_people = 0\n\n# Iterate through matrix\nfor i in range(1, R+1):\n    for j in range(0, S):\n        if input_list[i][j] == 'o':\n            num_people += 1\n            if i < R and input_list[i+1][j] == 'o':\n                num_handshakes += 1\n            if i > 1 and input_list[i-1][j] == 'o':\n                num_handshakes += 1\n            if j < S-1 and input_list[i][j+1] == 'o':\n                num_handshakes += 1\n            if j > 0 and input_list[i][j-1] == 'o':\n                num_handshakes += 1\n            if i < R and j < S-1 and input_list[i+1][j+1] == 'o':\n                num_handshakes += 1\n            if i > 1 and j > 0 and input_list[i-1][j-1] == 'o':\n                num_handshakes += 1\n            if i < R and j > 0 and input_list[i+1][j-1] == 'o':\n                num_handshakes += 1\n            if i > 1 and j < S-1 and input_list[i-1][j+1] == 'o':\n                num_handshakes += 1\n\n# Calculate number of handshakes\nnum_handshakes = num_people * (num_people - 1) / 2\n\n# Print result\nprint(num_handshakes)\n", "import sys\nlines = sys.stdin.readlines()\nR, S = [int(x) for x in lines[0].split()]\nseating = [list(s.strip()) for s in lines[1:]]\ndef handshakes(seating):\n    count = 0\n    for row in range(R):\n        for seat in range(S):\n            if seating[row][seat] == \"o\":\n                # Check left\n                if seat > 0 and seating[row][seat - 1] == \"o\":\n                    count += 1\n                # Check right\n                if seat < S - 1 and seating[row][seat + 1] == \"o\":\n                    count += 1\n                # Check up\n                if row > 0 and seating[row - 1][seat] == \"o\":\n                    count += 1\n                # Check down\n                if row < R - 1 and seating[row + 1][seat] == \"o\":\n                    count += 1\n                # Check up left\n                if seat > 0 and row > 0 and seating[row - 1][seat - 1] == \"o\":\n                    count += 1\n                # Check up right\n                if seat < S - 1 and row > 0 and seating[row - 1][seat + 1] == \"o\":\n                    count += 1\n                # Check down left\n                if seat > 0 and row < R - 1 and seating[row + 1][seat - 1] == \"o\":\n                    count += 1\n                # Check down right\n                if seat < S - 1 and row < R - 1 and seating[row + 1][seat + 1] == \"o\":\n                    count += 1\n    return count\n\nprint(handshakes(seating))\n", "import sys\n\ndef main():\n    rows, cols = map(int, sys.stdin.readline().strip().split())\n    seats = []\n    for i in range(rows):\n        seats.append(list(sys.stdin.readline().strip()))\n    count = 0\n    for r in range(rows):\n        for c in range(cols):\n            if seats[r][c] == 'o':\n                if r-1 >= 0 and seats[r-1][c] == 'o':\n                    count += 1\n                if r+1 < rows and seats[r+1][c] == 'o':\n                    count += 1\n                if c-1 >= 0 and seats[r][c-1] == 'o':\n                    count += 1\n                if c+1 < cols and seats[r][c+1] == 'o':\n                    count += 1\n                if r-1 >= 0 and c-1 >= 0 and seats[r-1][c-1] == 'o':\n                    count += 1\n                if r-1 >= 0 and c+1 < cols and seats[r-1][c+1] == 'o':\n                    count += 1\n                if r+1 < rows and c-1 >= 0 and seats[r+1][c-1] == 'o':\n                    count += 1\n                if r+1 < rows and c+1 < cols and seats[r+1][c+1] == 'o':\n                    count += 1\n    print count\n\nmain()\n", "\n\nimport sys\n\nimport math\n\ndef readline():\n    return sys.stdin.readline().strip()\n\n\ndef main():\n    R, S = [int(x) for x in readline().split()] # R = rows, S = seats\n    seats = []\n    for _ in range(R):\n        seats.append(list(readline()))\n\n    handshakes = 0\n    for x in range(R):\n        for y in range(S):\n            if seats[x][y] == \"o\":\n                if x > 0:\n                    if y > 0:\n                        if seats[x - 1][y - 1] == \"o\":\n                            handshakes += 1\n                    if seats[x - 1][y] == \"o\":\n                        handshakes += 1\n                    if y + 1 < S:\n                        if seats[x - 1][y + 1] == \"o\":\n                            handshakes += 1\n                if y > 0:\n                    if seats[x][y - 1] == \"o\":\n                        handshakes += 1\n                if y + 1 < S:\n                    if seats[x][y + 1] == \"o\":\n                        handshakes += 1\n                if x + 1 < R:\n                    if y > 0:\n                        if seats[x + 1][y - 1] == \"o\":\n                            handshakes += 1\n                    if seats[x + 1][y] == \"o\":\n                        handshakes += 1\n                    if y + 1 < S:\n                        if seats[x + 1][y + 1] == \"o\":\n                            handshakes += 1\n    print(handshakes)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport sys\n\ndef main():\n    rows, cols = map(int, sys.stdin.readline().strip().split())\n    seats = []\n    for i in range(rows):\n        seats.append(list(sys.stdin.readline().strip()))\n    count = 0\n    for r in range(rows):\n        for c in range(cols):\n            if seats[r][c] == 'o':\n                if r-1 >= 0 and seats[r-1][c] == 'o':\n                    count += 1\n                if r+1 < rows and seats[r+1][c] == 'o':\n                    count += 1\n                if c-1 >= 0 and seats[r][c-1] == 'o':\n                    count += 1\n                if c+1 < cols and seats[r][c+1] == 'o':\n                    count += 1\n                if r-1 >= 0 and c-1 >= 0 and seats[r-1][c-1] == 'o':\n                    count += 1\n                if r-1 >= 0 and c+1 < cols and seats[r-1][c+1] == 'o':\n                    count += 1\n                if r+1 < rows and c-1 >= 0 and seats[r+1][c-1] == 'o':\n                    count += 1\n                if r+1 < rows and c+1 < cols and seats[r+1][c+1] == 'o':\n                    count += 1\n    print count\n\nmain()\n", "\nr, s = map(int, input().split())\nmatrix = []\n\nfor i in range(r):\n    matrix.append(list(input()))\n\ncount = 0\n\nfor i in range(r):\n    for j in range(s):\n        if matrix[i][j] == 'o':\n            if i != 0 and matrix[i - 1][j] == 'o':\n                count += 1\n            if i != r - 1 and matrix[i + 1][j] == 'o':\n                count += 1\n            if j != 0 and matrix[i][j - 1] == 'o':\n                count += 1\n            if j != s - 1 and matrix[i][j + 1] == 'o':\n                count += 1\n\nprint(count)\n", "\n\nr,s = map(int,input().split())\n\nmatrix = []\n\nfor i in range(r):\n    matrix.append(list(input()))\n\ncount = 0\n\nfor i in range(r):\n    for j in range(s):\n        if matrix[i][j] == 'o':\n            if i != 0 and matrix[i-1][j] == 'o':\n                count += 1\n            if i != r-1 and matrix[i+1][j] == 'o':\n                count += 1\n            if j != 0 and matrix[i][j-1] == 'o':\n                count += 1\n            if j != s-1 and matrix[i][j+1] == 'o':\n                count += 1\n\nprint(count)\n", "\nr, s = [int(i) for i in input().split()] \n\nmatrix = []\nfor _ in range(r):\n    matrix.append(input())\n\nhandshakes = 0\nfor i in range(r):\n    for j in range(s):\n        if matrix[i][j] == 'o':\n            if i > 0 and matrix[i-1][j] == 'o':\n                handshakes += 1\n            if i < r - 1 and matrix[i+1][j] == 'o':\n                handshakes += 1\n            if j > 0 and matrix[i][j-1] == 'o':\n                handshakes += 1\n            if j < s - 1 and matrix[i][j+1] == 'o':\n                handshakes += 1\n            if i > 0 and j > 0 and matrix[i-1][j-1] == 'o':\n                handshakes += 1\n            if i > 0 and j < s - 1 and matrix[i-1][j+1] == 'o':\n                handshakes += 1\n            if i < r - 1 and j > 0 and matrix[i+1][j-1] == 'o':\n                handshakes += 1\n            if i < r - 1 and j < s - 1 and matrix[i+1][j+1] == 'o':\n                handshakes += 1\nprint(handshakes)\n", "\nimport sys\nimport math\n\ndef readline():\n    return sys.stdin.readline().strip()\n\ndef main():\n    R, S = [int(x) for x in readline().split()]\n    seats = []\n    for _ in range(R):\n        seats.append(list(readline()))\n\n    handshakes = 0\n    for x in range(R):\n        for y in range(S):\n            if seats[x][y] == \"o\":\n                if x > 0:\n                    if y > 0:\n                        if seats[x-1][y-1] == \"o\":\n                            handshakes += 1\n                    if seats[x-1][y] == \"o\":\n                        handshakes += 1\n                    if y+1 < S:\n                        if seats[x-1][y+1] == \"o\":\n                            handshakes += 1\n                if y > 0:\n                    if seats[x][y-1] == \"o\":\n                        handshakes += 1\n                if y+1 < S:\n                    if seats[x][y+1] == \"o\":\n                        handshakes += 1\n                if x+1 < R:\n                    if y > 0:\n                        if seats[x+1][y-1] == \"o\":\n                            handshakes += 1\n                    if seats[x+1][y] == \"o\":\n                        handshakes += 1\n                    if y+1 < S:\n                        if seats[x+1][y+1] == \"o\":\n                            handshakes += 1\n    print(handshakes)\n\nif __name__ == \"__main__\":\n    main()\n", "\n# https://atcoder.jp/contests/abc071/tasks/arc081_a\n\nr, s = map(int, input().split())\n\nseats = []\nfor _ in range(r):\n    line = input()\n    seats.append(line)\n\n# print(seats)\n\ncount = 0\nfor i in range(r):\n    for j in range(s):\n        if seats[i][j] == 'o':\n            if j > 0 and seats[i][j-1] == 'o':\n                count += 1\n            if j < s-1 and seats[i][j+1] == 'o':\n                count += 1\n            if i > 0 and seats[i-1][j] == 'o':\n                count += 1\n            if i < r-1 and seats[i+1][j] == 'o':\n                count += 1\n            if i > 0 and j > 0 and seats[i-1][j-1] == 'o':\n                count += 1\n            if i < r-1 and j < s-1 and seats[i+1][j+1] == 'o':\n                count += 1\n            if i > 0 and j < s-1 and seats[i-1][j+1] == 'o':\n                count += 1\n            if i < r-1 and j > 0 and seats[i+1][j-1] == 'o':\n                count += 1\n\nprint(count)\n", "import sys\nlines = sys.stdin.readlines()\nR, S = [int(x) for x in lines[0].split()]\nseating = [list(s.strip()) for s in lines[1:]]\n\ndef handshakes(seating):\n    count = 0\n    for row in range(len(seating)):\n        for seat in range(len(seating[row])):\n            if seating[row][seat] == \"o\":\n                # Check left\n                if seat > 0 and seating[row][seat - 1] == \"o\":\n                    count += 1\n                # Check right\n                if seat < len(seating[row]) - 1 and seating[row][seat + 1] == \"o\":\n                    count += 1\n                # Check up\n                if row > 0 and seating[row - 1][seat] == \"o\":\n                    count += 1\n                # Check down\n                if row < len(seating) - 1 and seating[row + 1][seat] == \"o\":\n                    count += 1\n                # Check up left\n                if seat > 0 and row > 0 and seating[row - 1][seat - 1] == \"o\":\n                    count += 1\n                # Check up right\n                if seat < len(seating[row]) - 1 and row > 0 and seating[row - 1][seat + 1] == \"o\":\n                    count += 1\n                # Check down left\n                if seat > 0 and row < len(seating) - 1 and seating[row + 1][seat - 1] == \"o\":\n                    count += 1\n                # Check down right\n                if seat < len(seating[row]) - 1 and row < len(seating) - 1 and seating[row + 1][seat + 1] == \"o\":\n                    count += 1\n    return count\nprint(handshakes(seating))\n", "\nr, s = map(int, input().split())\n\nseats = []\nfor _ in range(r):\n    line = input()\n    seats.append(line)\n\n# print(seats)\n\ncount = 0\nfor i in range(r):\n    for j in range(s):\n        if seats[i][j] == 'o':\n            if j > 0 and seats[i][j-1] == 'o':\n                count += 1\n            if j < s-1 and seats[i][j+1] == 'o':\n                count += 1\n            if i > 0 and seats[i-1][j] == 'o':\n                count += 1\n            if i < r-1 and seats[i+1][j] == 'o':\n                count += 1\n            if i > 0 and j > 0 and seats[i-1][j-1] == 'o':\n                count += 1\n            if i < r-1 and j < s-1 and seats[i+1][j+1] == 'o':\n                count += 1\n            if i > 0 and j < s-1 and seats[i-1][j+1] == 'o':\n                count += 1\n            if i < r-1 and j > 0 and seats[i+1][j-1] == 'o':\n                count += 1\n\nprint(count)\n", "\n\n# Get input from user\ninput_list = []\n\nwhile True:\n    try:\n        input_list.append(input())\n    except:\n        break\n\n# Parse input\nR, S = input_list[0].split()\nR = int(R)\nS = int(S)\n\n# Initialize number of handshakes\nnum_handshakes = 0\n\n# Iterate through grid\nfor i in range(1, R+1):\n    for j in range(0, S-1):\n        if input_list[i][j] == 'o':\n            if i < R and input_list[i+1][j] == 'o':\n                num_handshakes += 1\n            if i > 1 and input_list[i-1][j] == 'o':\n                num_handshakes += 1\n            if j < S-1 and input_list[i][j+1] == 'o':\n                num_handshakes += 1\n            if j > 0 and input_list[i][j-1] == 'o':\n                num_handshakes += 1\n            if i < R and j < S-1 and input_list[i+1][j+1] == 'o':\n                num_handshakes += 1\n            if i > 1 and j > 0 and input_list[i-1][j-1] == 'o':\n                num_handshakes += 1\n            if i < R and j > 0 and input_list[i+1][j-1] == 'o':\n                num_handshakes += 1\n            if i > 1 and j < S-1 and input_list[i-1][j+1] == 'o':\n                num_handshakes += 1\n\n# Print result\nprint(num_handshakes)\n", "\n\ndef solve(seats):\n    # Complete this function\n    R, S = len(seats), len(seats[0])\n    directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]\n    result = 0\n    for i in range(R):\n        for j in range(S):\n            if seats[i][j] == \"o\":\n                for d in directions:\n                    if 0 <= i + d[0] < R and 0 <= j + d[1] < S:\n                        if seats[i + d[0]][j + d[1]] == \"o\":\n                            result += 1\n    return result // 2\n\nif __name__ == \"__main__\":\n    R, S = map(int, input().strip().split(' '))\n    seats = []\n    for _ in range(R):\n        seats.append(list(input().strip()))\n    result = solve(seats)\n    print(result)\n", "\nr, s = map(int, input().split())\n\nmatrix = []\n\nfor i in range(r):\n    matrix.append(list(input()))\n\ncount = 0\n\nfor i in range(r):\n    for j in range(s):\n        if matrix[i][j] == 'o':\n            if i != 0 and matrix[i - 1][j] == 'o':\n                count += 1\n            if i != r - 1 and matrix[i + 1][j] == 'o':\n                count += 1\n            if j != 0 and matrix[i][j - 1] == 'o':\n                count += 1\n            if j != s - 1 and matrix[i][j + 1] == 'o':\n                count += 1\n\nprint(count)\n", "\nimport sys\nimport math\n\ndef readline():\n    return sys.stdin.readline().strip()\n\ndef main():\n    R, S = [int(x) for x in readline().split()]\n    seats = []\n    for _ in range(R):\n        seats.append(list(readline()))\n    #print(seats)\n    #print(R, S)\n\n    handshakes = 0\n    for x in range(R):\n        for y in range(S):\n            #print(x, y)\n            if seats[x][y] == \"o\":\n                #print(\"o\")\n                if x > 0:\n                    if y > 0:\n                        if seats[x-1][y-1] == \"o\":\n                            handshakes += 1\n                    if seats[x-1][y] == \"o\":\n                        handshakes += 1\n                    if y+1 < S:\n                        if seats[x-1][y+1] == \"o\":\n                            handshakes += 1\n                if y > 0:\n                    if seats[x][y-1] == \"o\":\n                        handshakes += 1\n                if y+1 < S:\n                    if seats[x][y+1] == \"o\":\n                        handshakes += 1\n                if x+1 < R:\n                    if y > 0:\n                        if seats[x+1][y-1] == \"o\":\n                            handshakes += 1\n                    if seats[x+1][y] == \"o\":\n                        handshakes += 1\n                    if y+1 < S:\n                        if seats[x+1][y+1] == \"o\":\n                            handshakes += 1\n    print(handshakes)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef solve(seats, R, S):\n    # Complete this function\n    directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]  # 8 directions\n    result = 0\n    for i in range(R):\n        for j in range(S):\n            if seats[i][j] == \"o\":  # if there is a person\n                for d in directions:\n                    if 0 <= i + d[0] < R and 0 <= j + d[1] < S:  # if the direction is valid\n                        if seats[i + d[0]][j + d[1]] == \"o\":  # if there is a person\n                            result += 1\n    return result // 2\n\nif __name__ == \"__main__\":\n    R, S = map(int, input().strip().split(' '))\n    seats = []\n    for _ in range(R):\n        seats.append(list(input().strip()))\n    result = solve(seats, R, S)\n    print(result)\n", "\n\nimport sys\nimport math\n\ndef readline():\n    return sys.stdin.readline().strip()\n\ndef main():\n    R, S = [int(x) for x in readline().split()]\n    seats = []\n    for _ in range(R):\n        seats.append(list(readline()))\n\n    handshakes = 0\n    for x in range(R):\n        for y in range(S):\n            if seats[x][y] == \"o\":\n                if x > 0:\n                    if y > 0:\n                        if seats[x-1][y-1] == \"o\":\n                            handshakes += 1\n                    if seats[x-1][y] == \"o\":\n                        handshakes += 1\n                    if y+1 < S:\n                        if seats[x-1][y+1] == \"o\":\n                            handshakes += 1\n                if y > 0:\n                    if seats[x][y-1] == \"o\":\n                        handshakes += 1\n                if y+1 < S:\n                    if seats[x][y+1] == \"o\":\n                        handshakes += 1\n                if x+1 < R:\n                    if y > 0:\n                        if seats[x+1][y-1] == \"o\":\n                            handshakes += 1\n                    if seats[x+1][y] == \"o\":\n                        handshakes += 1\n                    if y+1 < S:\n                        if seats[x+1][y+1] == \"o\":\n                            handshakes += 1\n    print(handshakes)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef solve(seats):\n    # Complete this function\n    directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]\n    result = 0\n    for i in range(len(seats)):\n        for j in range(len(seats[0])):\n            if seats[i][j] == \"o\":\n                for d in directions:\n                    if 0 <= i + d[0] < len(seats) and 0 <= j + d[1] < len(seats[0]):\n                        if seats[i + d[0]][j + d[1]] == \"o\":\n                            result += 1\n    return result // 2\n\nif __name__ == \"__main__\":\n    R, C = map(int, input().strip().split(' '))\n    seats = []\n    for _ in range(R):\n        seats.append(list(input().strip()))\n    result = solve(seats)\n    print(result)\n", "\n\n# Get input from user\ninput_list = []\nwhile True:\n    try:\n        input_list.append(input())\n    except:\n        break\n\n# Parse input\nR, S = input_list[0].split()\nR = int(R)\nS = int(S)\n\n# Initialize number of people\nnum_people = 0\n\n# Iterate through matrix\nfor i in range(1, R+1):\n    for j in range(0, S):\n        if input_list[i][j] == 'o':\n            num_people += 1\n            if i < R and input_list[i+1][j] == 'o':\n                num_people += 1\n            if i > 1 and input_list[i-1][j] == 'o':\n                num_people += 1\n            if j < S-1 and input_list[i][j+1] == 'o':\n                num_people += 1\n            if j > 0 and input_list[i][j-1] == 'o':\n                num_people += 1\n            if i < R and j < S-1 and input_list[i+1][j+1] == 'o':\n                num_people += 1\n            if i > 1 and j > 0 and input_list[i-1][j-1] == 'o':\n                num_people += 1\n            if i < R and j > 0 and input_list[i+1][j-1] == 'o':\n                num_people += 1\n            if i > 1 and j < S-1 and input_list[i-1][j+1] == 'o':\n                num_people += 1\n\n# Calculate number of handshakes\nnum_handshakes = num_people * (num_people - 1) // 2\n\n# Print result\nprint(num_handshakes)\n", "\n\n# Get input from user\ninput_list = []\n\nwhile True:\n    try:\n        input_list.append(input())\n    except EOFError:\n        break\n\n# Parse input\nR, S = input_list[0].split()\nR = int(R)\nS = int(S)\n\n# Initialize number of handshakes\nnum_handshakes = 0\n\n# Iterate through grid\nfor i in range(1, R+1):\n    for j in range(0, S):\n        if input_list[i][j] == 'o':\n            if i < R and input_list[i+1][j] == 'o':\n                num_handshakes += 1\n            if i > 1 and input_list[i-1][j] == 'o':\n                num_handshakes += 1\n            if j < S-1 and input_list[i][j+1] == 'o':\n                num_handshakes += 1\n            if j > 0 and input_list[i][j-1] == 'o':\n                num_handshakes += 1\n            if i < R and j < S-1 and input_list[i+1][j+1] == 'o':\n                num_handshakes += 1\n            if i > 1 and j > 0 and input_list[i-1][j-1] == 'o':\n                num_handshakes += 1\n            if i < R and j > 0 and input_list[i+1][j-1] == 'o':\n                num_handshakes += 1\n            if i > 1 and j < S-1 and input_list[i-1][j+1] == 'o':\n                num_handshakes += 1\n\n# Print result\nprint(num_handshakes)\n", "\n\nr, s = map(int, input().split()) #input the size of the matrix\n\nmatrix = [] #initialize an empty matrix\n\nfor i in range(r):\n    matrix.append(list(input()))\n\ncount = 0\n\nfor i in range(r):\n    for j in range(s):\n        if matrix[i][j] == 'o':\n            if i != 0 and matrix[i - 1][j] == 'o':\n                count += 1\n            if i != r - 1 and matrix[i + 1][j] == 'o':\n                count += 1\n            if j != 0 and matrix[i][j - 1] == 'o':\n                count += 1\n            if j != s - 1 and matrix[i][j + 1] == 'o':\n                count += 1\n\nprint(count)\n", "\nimport sys\n\ndef main():\n    rows, cols = map(int, sys.stdin.readline().strip().split())\n    seats = []\n    for i in range(rows):\n        seats.append(list(sys.stdin.readline().strip()))\n    count = 0\n    for r in range(rows):\n        for c in range(cols):\n            if seats[r][c] == 'o':\n                if r-1 >= 0 and seats[r-1][c] == 'o':\n                    count += 1\n                if r+1 < rows and seats[r+1][c] == 'o':\n                    count += 1\n                if c-1 >= 0 and seats[r][c-1] == 'o':\n                    count += 1\n                if c+1 < cols and seats[r][c+1] == 'o':\n                    count += 1\n                if r-1 >= 0 and c-1 >= 0 and seats[r-1][c-1] == 'o':\n                    count += 1\n                if r-1 >= 0 and c+1 < cols and seats[r-1][c+1] == 'o':\n                    count += 1\n                if r+1 < rows and c-1 >= 0 and seats[r+1][c-1] == 'o':\n                    count += 1\n                if r+1 < rows and c+1 < cols and seats[r+1][c+1] == 'o':\n                    count += 1\n    print(count)\n\nmain()\n", "\nr, s = [int(i) for i in input().split()]\n\nmatrix = []\nfor _ in range(r):\n    matrix.append(input())\nhandshakes = 0 \nfor i in range(r):\n    for j in range(s):\n        if matrix[i][j] == 'o':\n            if i > 0 and matrix[i-1][j] == 'o':\n                handshakes += 1\n            if i < r - 1 and matrix[i+1][j] == 'o':\n                handshakes += 1\n            if j > 0 and matrix[i][j-1] == 'o':\n                handshakes += 1\n            if j < s - 1 and matrix[i][j+1] == 'o':\n                handshakes += 1\n            if i > 0 and j > 0 and matrix[i-1][j-1] == 'o':\n                handshakes += 1\n            if i > 0 and j < s - 1 and matrix[i-1][j+1] == 'o':\n                handshakes += 1\n            if i < r - 1 and j > 0 and matrix[i+1][j-1] == 'o':\n                handshakes += 1\n            if i < r - 1 and j < s - 1 and matrix[i+1][j+1] == 'o':\n                handshakes += 1\nprint(handshakes)\n", "from collections import deque\n\ndef bfs(graph, start, end):\n    queue = deque()\n    queue.append([start])\n    while queue:\n        path = queue.popleft()\n        node = path[-1]\n        if node == end:\n            return path\n        for adjacent in graph.get(node, []):\n            new_path = list(path)\n            new_path.append(adjacent)\n            queue.append(new_path)\n\ngraph = {'A': ['B', 'C'],\n         'B': ['A', 'D', 'E'],\n         'C': ['A', 'F'],\n         'D': ['B'],\n         'E': ['B', 'F'],\n         'F': ['C', 'E']}\n\nprint(bfs(graph, 'A', 'F'))\n", "\n\nr, c = map(int, input().split())\n\nseats = []\nfor _ in range(r):\n    line = input()\n    seats.append(line)\n\n# print(seats)\n\ncount = 0\nfor i in range(r):\n    for j in range(c):\n        if seats[i][j] == 'o':\n            if j > 0 and seats[i][j-1] == 'o':\n                count += 1\n            if j < c-1 and seats[i][j+1] == 'o':\n                count += 1\n            if i > 0 and seats[i-1][j] == 'o':\n                count += 1\n            if i < r-1 and seats[i+1][j] == 'o':\n                count += 1\n            if i > 0 and j > 0 and seats[i-1][j-1] == 'o':\n                count += 1\n            if i < r-1 and j < c-1 and seats[i+1][j+1] == 'o':\n                count += 1\n            if i > 0 and j < c-1 and seats[i-1][j+1] == 'o':\n                count += 1\n            if i < r-1 and j > 0 and seats[i+1][j-1] == 'o': \n                count += 1\n\nprint(count)\n"]