["print('hello')\n", "# input\n\nmessage = input()\nmessage = message.split(\" \")\n\nfor i in range(0, len(message)):\n    message[i] = int(message[i])\n\nmessage.sort()\n\n# print(message)\n\ncount = 1\n\nfor i in range(0, len(message)):\n    if i != len(message) - 1:\n        if message[i] == message[i + 1]:\n            count += 1\n        else:\n            print(message[i], end=\" \")\n            count = 1\n    else:\n        print(message[i], end=\" \")\n", "#!/usr/bin/env python3\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\n\nprint(' '.join(map(str, res)))\n", "\n\ndef main():\n    n, c = map(int, input().split())\n    nums = list(map(int, input().split()))\n    freq = [0] * (c + 1)\n    for i in nums:\n        freq[i] += 1\n    for i in range(1, c + 1):\n        print((str(i) + ' ') * freq[i], end='')\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    N, C = map(int, sys.stdin.readline().rstrip().split())\n    message = list(map(int, sys.stdin.readline().rstrip().split()))\n\n    # Create a list of lists where each element represents a number and its \n    # frequency. The list is sorted in descending order of frequency.\n    count = [[0, 0] for _ in range(C + 1)]\n    for i in range(N):\n        count[message[i]][0] = message[i]\n        count[message[i]][1] += 1\n    count.sort(key=lambda x: x[1], reverse=True)\n\n    # Append each number to the output in order of frequency.\n    output = []\n    for i in range(C + 1):\n        if count[i][1] > 0:\n            output.extend([count[i][0]] * count[i][1])\n\n    print(\" \".join(map(str, output)))\n\nif __name__ == '__main__':\n    main()\n", "n, c = map(int, input().split())\narr = list(map(int, input().split()))\n\nfreq = [0] * (c + 1)\nfor i in range(n):\n    freq[arr[i]] += 1\n\nfor i in range(c + 1):\n    if freq[i] > 0:\n        print((str(i) + ' ') * freq[i], end='')\n", "\nimport sys\n\ndef main():\n    N, C = map(int, sys.stdin.readline().rstrip().split())\n    message = list(map(int, sys.stdin.readline().rstrip().split()))\n\n    # Create a list of lists where each element represents a number and its\n    # frequency. The list is sorted in descending order of frequency.\n    count = [[0] * 2 for _ in range(C + 1)]\n    for i in range(N):\n        count[message[i]][0] = message[i]\n        count[message[i]][1] += 1\n    count.sort(key=lambda x: x[1], reverse=True)\n\n    # Append each number to the output in order of frequency.\n    output = []\n    for i in range(C + 1):\n        if count[i][1] > 0:\n            output.extend([count[i][0]] * count[i][1])\n\n    print(\" \".join(map(str, output)))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, c = map(int, input().split())  # n is the number of elements in the array, c is the number of colors\n    nums = list(map(int, input().split()))\n    freq = [0] * (c + 1)  # frequency of each color\n    for i in nums:\n        freq[i] += 1  # incrementing the frequency of the color\n    for i in range(1, c + 1):\n        print((str(i) + \" \") * freq[i], end=\"\")  # printing the color i freq[i] times\n    print()\n\nif __name__ == '__main__':\n    main()\n", "import sys\nn, c = map(int, sys.stdin.readline().split())\nmessage = list(map(int, sys.stdin.readline().split()))\nfreq = [0] * (c + 1)\n\nfor i in message:\n    freq[i] += 1\nfor i in range(len(freq)):\n    if freq[i] > 0:\n        print(str(i) * freq[i], end=' ')\n", "# https://open.kattis.com/problems/trik\n\ndef main():\n    moves = input()\n    cup = 1\n    for i in moves:\n        if i == \"A\":\n            if cup == 1:\n                cup = 2\n            elif cup == 2:\n                cup = 1\n        elif i == \"B\":\n            if cup == 2:\n                cup = 3\n            elif cup == 3:\n                cup = 2\n        elif i == \"C\":\n            if cup == 1:\n                cup = 3\n            elif cup == 3:\n                cup = 1\n    print(cup)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nn, c = map(int, sys.stdin.readline().split())\n\nmessage = list(map(int, sys.stdin.readline().split()))\n\nfreq = [0] * (c + 1)\n\nfor i in message:\n    freq[i] += 1\n\nfor i in range(len(freq)):\n    if freq[i] > 0:\n        print(str(i) * freq[i], end=' ')\n", "\n[n, c] = [int(i) for i in input().split()]\nseq = [int(i) for i in input().split()]\n\nfreq_dict = {}\n\nfor i in range(c+1):\n    freq_dict[i] = 0\n\nfor i in seq:\n    freq_dict[i] += 1\n\nnew_seq = []\n\nfor key in freq_dict:\n    if freq_dict[key] != 0:\n        new_seq.extend([key]*freq_dict[key])\n\nprint(\" \".join([str(i) for i in new_seq]))\n", "\nimport sys\nn, c = map(int, sys.stdin.readline().split())\nmessage = list(map(int, sys.stdin.readline().split()))\nfreq = [0] * (c + 1)\n\nfor i in message:\n    freq[i] += 1\nfor i in range(len(freq)):\n    if freq[i] > 0:\n        print(str(i) * freq[i], end=' ')\n", "\n\nmessages = input()\nmessages = messages.split(\" \")\n\nfor i in range(0,len(messages)):\n    messages[i] = int(messages[i])\n\nmessages.sort()\n\n#print(messages)\n\ncount = 1\n\n    if messages[i] == messages[i+1]:\n        count += 1\n    else:\n        print(messages[i], end = \" \") \n        count = 1\n", "# https://open.kattis.com/problems/r2\n\ndef main():\n    r1, s = list(map(int, input().split()))\n    print(s * 2 - r1)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nn, c = map(int, sys.stdin.readline().split())\nmessage = list(map(int, sys.stdin.readline().split()))\nfreq = [0] * (c + 1)\nfor i in message:\n    freq[i] += 1\nfor i in range(len(freq)):\n    if freq[i] > 0:\n        print(str(i) * freq[i], end=' ')\n", "#!/usr/bin/env python3\n\nn, c = map(int, input().split())\nmsg = list(map(int, input().split()))\n\ncount = [0] * (c + 1)\nfor m in msg:\n    count[m] += 1\n\nres = []\nfor i in range(c + 1):\n    res += [i] * count[i]\n\nprint(' '.join(map(str, res)))\n", "\nimport sys\n\ndef main():\n    # read the input\n    N, C = sys.stdin.readline().split()\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split()\n    # convert to integers\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    # create a list of lists\n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=\" \")\n    print(\"\")\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    # read the input file\n    N, C = sys.stdin.readline().split(\" \")\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split(\" \")\n    # convert to integers\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    # create a list of lists\n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=\" \")\n    print(\"\")\n\nmain()\n", "\n\n\ndef main():\n    [n, c] = [int(i) for i in input().split()]\n    seq = [int(i) for i in input().split()]\n\n    freq_dict = {}\n\n    for i in range(c+1):\n        freq_dict[i] = 0\n\n    for i in seq:\n        freq_dict[i] += 1\n\n    new_seq = []\n\n    for key in freq_dict:\n        if freq_dict[key] != 0:\n            new_seq.extend([key]*freq_dict[key])\n\n    print(\" \".join([str(i) for i in new_seq]))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    # read the input file\n    N, C = sys.stdin.readline().split() # N = number of elements, C = number of cases\n    N = int(N)\n    C = int(C)\n    seq = sys.stdin.readline().split() # sequence of integers\n    # convert to integers\n    for i in range(N):\n        seq[i] = int(seq[i])\n    # create a dictionary of counts\n    counts = {}\n    for i in range(N):\n        if seq[i] not in counts:\n            counts[seq[i]] = 1\n        else:\n            counts[seq[i]] += 1\n    # sort the dictionary by value\n    sorted_counts = sorted(counts.items(), key=lambda tup: tup[1], reverse=True)\n    # create a list of lists\n    sorted_seq = []\n    for i in range(len(sorted_counts)):\n        sorted_seq.append([])\n        for j in range(N):\n            if seq[j] == sorted_counts[i][0]:\n                sorted_seq[i].append(seq[j])\n    # flatten the list\n    sorted_seq = [item for sublist in sorted_seq for item in sublist]\n    # print the output\n    for i in range(N):\n        print(sorted_seq[i], end=\" \")\n    print(\"\")\n\nmain()\n", "\n\n# WORKS\n\n[n, c] = [int(i) for i in input().split()]\nseq = [int(i) for i in input().split()]\n\nfreq_dict = {}\n\nfor i in range(c+1):\n    freq_dict[i] = 0\n\nfor i in seq:\n    freq_dict[i] += 1\n\nnew_seq = []\n\nfor key in freq_dict:\n    if freq_dict[key] != 0:\n        new_seq.extend([key]*freq_dict[key])\n\nprint(\" \".join([str(i) for i in new_seq]))\n"]