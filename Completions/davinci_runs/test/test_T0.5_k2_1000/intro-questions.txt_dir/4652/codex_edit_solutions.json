["# SOLUTION\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    p = list(map(int, input().split()))\n    if n == 1:\n        print(\"YES\")\n        continue\n    if n == 2:\n        if p[0] == 1 and p[1] == 2:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        continue\n    if p[0] == 1:\n        start = 1\n        if p[1] == 2:\n            direction = 1\n        else:\n            direction = -1\n    else:\n        start = p.index(1)\n        if p[start - 1] == n:\n            direction = 1\n        else:\n            direction = -1\n    for i in range(n):\n        if p[(start + direction * i) % n] != (i + 1) % n + 1:\n            print(\"NO\")\n            break\n    else:\n        print(\"YES\")\n", "\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    p = list(map(int, input().split()))\n    if n == 1:\n        print(\"YES\")\n        continue\n    if n == 2:\n        if p[0] == 1 and p[1] == 2:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        continue\n    if p[0] == 1:\n        start = 1\n        if p[1] == 2:\n            direction = 1\n        else:\n            direction = -1\n    else:\n        start = p.index(1)\n        if p[start - 1] == n:\n            direction = 1\n        else:\n            direction = -1\n    for i in range(n):\n        if p[(start + direction * i) % n] != (i + 1) % n + 1:\n            print(\"NO\")\n            break\n    else:\n        print(\"YES\")\n", "\n\nif __name__ == \"__main__\":\n    pass\n", "\n\n# SOLUTION\nq = int(input())\nfor _ in range(q):\n    n = int(input())\n    p = list(map(int, input().split()))\n    if n == 1:\n        print(\"YES\")\n        continue\n    if n == 2:\n        if p[0] == 1 and p[1] == 2:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        continue\n    if p[0] == 1:\n        start = 1\n        if p[1] == 2:\n            direction = 1\n        else:\n            direction = -1\n    else:\n        start = p.index(1)\n        if p[start - 1] == n:\n            direction = 1\n        else:\n            direction = -1\n    for i in range(n):\n        if p[(start + direction * i) % n] != (i + 1) % n + 1:\n            print(\"NO\")\n            break\n    else:\n        print(\"YES\")\n", "\n\ndef isDancePossible(n, permutation):\n    if n == 1:\n        return True\n    permutation = [i - 1 for i in permutation]\n    for i in range(1, n):\n        if abs(permutation[i] - permutation[i - 1]) != 1 and abs(permutation[i] - permutation[i - 1]) != n - 1:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        permutation = list(map(int, input().split()))\n        print(\"YES\" if isDancePossible(n, permutation) else \"NO\")\n", "\n\ndef is_dance_possible(n, perm, k):\n    if k == 1:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        perm = list(map(int, input().split()))\n        k = int(input())\n        print(is_dance_possible(n, perm, k))\n", "#!/bin/python3\nimport sys\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\ndef get_prime_factors(n):\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            if is_prime(i):\n                factors.append(i)\n    return factors\ndef get_prime_factors_count(n):\n    factors = get_prime_factors(n)\n    factors_count = []\n    for i in factors:\n        count = 0\n        while n % i == 0:\n            count += 1\n            n /= i\n        factors_count.append(count)\n    return factors_count\ndef get_factorial_factors_count(n):\n    factors_count = []\n    for i in range(2, n + 1):\n        factors = get_prime_factors_count(i)\n        for j in range(len(factors)):\n            if j < len(factors_count):\n                factors_count[j] += factors[j]\n            else:\n                factors_count.append(factors[j])\n    return factors_count\ndef get_factorial_factors_count_upto(n):\n    factors_count = []\n    for i in range(2, n + 1):\n        factors = get_prime_factors_count(i)\n        for j in range(len(factors)):\n            if j < len(factors_count):\n                factors_count[j] += factors[j]\n            else:\n                factors_count.append(factors[j])\n    return factors_count\ndef get_factorial_factors_count_upto_modulo(n, modulo):\n    factors_count = []\n    for i in range(2, n + 1):\n        factors = get_prime_factors_count(i)\n        for j in range(len(factors)):\n            if j < len(factors_count):\n                factors_count[j] = (factors_count[j] + factors[j]) % modulo\n            else:\n                factors_count.append(factors[j] % modulo)\n    return factors_count\ndef get_factorial_factors_count_upto_modulo_factorial(n, modulo):\n    factors_count = []\n    for i in range(2, n + 1):\n        factors = get_prime_factors_count(i)\n        for j in range(len(factors)):\n            if j < len(factors_count):\n                factors_count[j] = (factors_count[j] * pow(factors[j], modulo - 2, modulo)) % modulo\n            else:\n                factors_count.append(pow(factors[j], modulo - 2, modulo))\n    return factors_count\ndef get_factorial_factors_count_upto_modulo_factorial_factorial(n, modulo):\n    factors_count = []\n    for i in range(2, n + 1):\n        factors = get_prime_factors_count(i)\n        for j in range(len(factors)):\n            if j < len(factors_count):\n                factors_count[j] = (factors_count[j] * pow(factors[j], modulo - 2, modulo)) % modulo\n            else:\n                factors_count.append(pow(factors[j], modulo - 2, modulo))\n    return factors_count\ndef get_factorial_factors_count_upto_modulo_factorial_factorial_factorial(n, modulo):\n    factors_count = []\n    for i in range(2, n + 1):\n        factors = get_prime_factors_count(i)\n        for j in range(len(factors)):\n            if j < len(factors_count):\n                factors_count[j] = (factors_count[j] * pow(factors[j], modulo - 2, modulo)) % modulo\n            else:\n                factors_count.append(pow(factors[j], modulo - 2, modulo))\n    return factors_count\ndef get_factorial_factors_count_upto_modulo_factorial_factorial_factorial_factorial(n, modulo):\n    factors_count = []\n    for i in range(2, n + 1):\n        factors = get_prime_factors_count(i)\n        for j in range(len(factors)):\n            if j < len(factors_count):\n                factors_count[j] = (factors_count[j] * pow(factors[j], modulo - 2, modulo)) % modulo\n            else:\n                factors_count.append(pow(factors[j], modulo - 2, modulo))\n    return factors_count\ndef get_factorial_factors_count_upto_modulo_factorial_factorial_factorial_factorial_factorial(n, modulo):\n    factors_count = []\n    for i in range(2, n + 1):\n        factors = get_prime_factors_count(i)\n        for j in range(len(factors)):\n            if j < len(factors_count):\n                factors_count[j] = (factors_count[j] * pow(factors[j], modulo - 2, modulo)) % modulo\n            else:\n                factors_count.append(pow(factors[j], modulo - 2, modulo))\n    return factors_count\n"]