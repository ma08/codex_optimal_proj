["b, d, c, l = [int(x) for x in input().split()] \nsolutions = []\n\nfor i in range(l // b + 1):\n    for j in range(l // d + 1):\n        for k in range(l // c + 1):\n            if i * b + j * d + k * c == l:\n                solutions.append((i, j, k))\nif len(solutions) == 0:\n    print(\"impossible\")\nelse:\n    for solution in sorted(solutions):\n        print(\" \".join([str(x) for x in solution]))\n", "import sys\n\nb, d, c, l = map(int, sys.stdin.readline().split())  # b - birds, d - dogs, c - cats, l - length of the rope\n\nif l % 2 != 0:  # if the length of the rope is odd, then it is impossible to tie the animals\n    print('impossible')\n    sys.exit()\n\nanswers = []\n\nfor birds in range(l // b + 1):\n    for dogs in range(l // d + 1):\n        for cats in range(l // c + 1):\n            if birds * b + dogs * d + cats * c == l:\n                answers.append([birds, dogs, cats])\n\nif len(answers) == 0:\n    print('impossible')\nelse:\n    for answer in sorted(answers):\n        print(*answer)\n", "import sys\n\ndef main():\n    b, d, c, l = [int(x) for x in input().split()] #read in the input\n    solutions = []\n    for num_birds in range(l//b + 1): #iterate through all possible combinations of animals\n        for num_dogs in range(l//d + 1):\n            for num_cats in range(l//c + 1):\n                if num_birds*b + num_dogs*d + num_cats*c == l: #check if the combination is a solution\n                    solutions.append([num_birds, num_dogs, num_cats])\n    if solutions:\n        solutions.sort()\n        for sol in solutions:\n            print(\" \".join([str(x) for x in sol]))\n    else:\n        print(\"impossible\")\n\nmain()\n", "\nfrom itertools import product\n\na, b, c, l = map(int, input().split())\n\nfor i, j, k in product(range(l//a + 1), range(l//b + 1), range(l//c + 1)):\n    if i*a + j*b + k*c == l:\n        print(i, j, k)\n", "import sys\n\ndef main():\n    b, d, c, l = [int(x) for x in sys.stdin.readline().split()] # b = birds, d = dogs, c = cats, l = limit\n    solutions = []\n    for num_birds in range(l//b + 1):\n        for num_dogs in range(l//d + 1):\n            for num_cats in range(l//c + 1):\n                if num_birds*b + num_dogs*d + num_cats*c == l:\n                    solutions.append([num_birds, num_dogs, num_cats])\n    if solutions:\n        solutions.sort()\n        for sol in solutions:\n            print(\" \".join([str(x) for x in sol]))\n    else:\n        print(\"impossible\")\n\nmain()\n", "#!/usr/bin/env python3\n\nfrom itertools import product\n\na, b, c, l = map(int, input().split())\n\nfor i, j, k in product(range(l // a + 1), range(l // b + 1), range(l // c + 1)):\n    if i * a + j * b + k * c == l:\n        print(i, j, k, sep=' ')\n", "\nimport sys\n\ndef main():\n    b, d, c, l = map(int, sys.stdin.readline().split()) # b = number of 1-meter boards, d = number of 2-meter boards, c = number of 3-meter boards, l = length of the fence\n    if l % 2 == 1 or l < b or l < d or l < c or l > b + d + c * 2: # if the length of the fence is odd or the number of boards is not enough to build the fence, print impossible\n        print(\"impossible\")\n        return\n    for i in range(0, l // b + 1): # iterate through all possible combinations of 1-meter boards\n        for j in range(0, l // d + 1): # iterate through all possible combinations of 2-meter boards\n            for k in range(0, l // c + 1): # iterate through all possible combinations of 3-meter boards\n                if i * b + j * d + k * c == l: # if the combination of boards equals the length of the fence, print the combination\n                    print(i, j, k) \n\nif __name__ == (\"__main__\"):\n    main()\n", "\nimport sys\n\ndef main():\n    b, d, c, l = map(int, sys.stdin.readline().split())\n    if l % 2 == 1 or l < b or l < d or l < c or l > b + d + c * 2 or l == b + d + c:\n        print(\"impossible\")\n        return\n    for i in range(0, l // b + 1):\n        for j in range(0, l // d + 1):\n            for k in range(0, l // c + 1):\n                if i * b + j * d + k * c == l:\n                    print(i, j, k)\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    b, d, c, l = map(int, sys.stdin.readline().split())\n    if l % 2 == 1 or l < b or l < d or l < c or l > b + d + c * 2:\n        print(\"impossible\")\n        return\n    for i in range(0, l // b + 1):\n        for j in range(0, l // d + 1):\n            for k in range(0, l // c + 1):\n                if i * b + j * d + k * c == l:\n                    print(i, j, k)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef possible(b, d, c, l, m):\n    for i in range(0, m/b + 1):\n        for j in range(0, m/d + 1):\n            for k in range(0, m/c + 1):\n                if i*b + j*d + k*c == m:\n                    print i, j, k\n\ndef main():\n    lines = sys.stdin.readlines()\n    b, d, c, l, m = map(int, lines[0].strip().split(' '))\n    possible(b, d, c, l, m)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    b, d, c, l = map(int, sys.stdin.readline().split()) # b = number of 1-meter boards, d = number of 2-meter boards, c = number of 3-meter boards, l = length of the fence.\n    if l % 2 == 1 or l < b or l < c or l < d or l > b + d + c * 2: # if the length of the fence is odd or the number of boards is not enough to build the fence, print impossible.\n        print(\"impossible\")\n        return\n    for i in range(0, l // b + 1): # iterate through all possible combinations of boards.\n        for j in range(0, l // d + 1):\n            for k in range(0, l // c + 1):\n                if i * b + j * d + k * c == l:\n                    print(i, j, k)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n#This solution is incredibly slow, but it works. It uses brute force to find all possible combinations.\n\nb, d, c, l = map(int, input().split())\n\ndef solve(b, d, c, l):\n    if b + d + c > l:\n        return None\n    if b + d + c == l:\n        return [b, d, c]\n    for i in range(l//b + 1):\n        for j in range(l//d + 1):\n            for k in range(l//c + 1):\n                if i * b + j * d + k * c == l:\n                    return [i, j, k]\n    return None\n\nsolutions = []\nfor i in range(l//b + 1):\n    for j in range(l//d + 1):\n        for k in range(l//c + 1):\n            if i * b + j * d + k * c == l:\n                solutions.append([i, j, k])\n\nif len(solutions) == 0:\n    print(\"impossible\")\nelse:\n    for i in sorted(solutions):\n        print(i[0], i[1], i[2])\n", "\nimport sys\nb, d, c, l = map(int, sys.stdin.readline().split())  # b - birds, d - dogs, c - cats, l - length of the rope\n\nif l % 2 != 0:  # if the length of the rope is odd, then it is impossible to tie the animals\n    print('impossible')\n    sys.exit()\nanswers = []\nfor birds in range(l // b + 1):\n    for dogs in range(l // d + 1):\n        for cats in range(l // c + 1):\n            if birds * b + dogs * d + cats * c == l:\n                answers.append([birds, dogs, cats])\n\nif len(answers) == 0:\n    print('impossible')\nelse:\n    for answer in sorted(answers):\n        print(*answer)\n", "\nimport sys\n\nb, d, c, l = map(int, sys.stdin.readline().split())  # b - birds, d - dogs, c - cats, l - length of the fence,\n# map(int, sys.stdin.readline().split()) - read input from console and split it by spaces\n\nif l % 2 != 0:  # if the length of the fence is odd, it is impossible to make a fence\n    print('impossible')\n    sys.exit()\n\nanswers = []\n\nfor birds in range(l // b + 1):\n    for dogs in range(l // d + 1):\n        for cats in range(l // c + 1):\n            if birds * b + dogs * d + cats * c == l:\n                answers.append([birds, dogs, cats])\n\nif len(answers) == 0:\n    print('impossible')\nelse:\n    for answer in sorted(answers):\n        print(*answer)\n", "\n\nimport sys\n\ndef legs(b, d, c, legs):\n    if legs < 0:\n        return\n    if b == 0 and d == 0 and c == 0:\n        print(\"{} {} {}\".format(b, d, c), end=\" \")\n        return\n    if b > 0:\n        legs(b - 1, d, c, legs - b)\n    if d > 0:\n        legs(b, d - 1, c, legs - d)\n    if c > 0:\n        legs(b, d, c - 1, legs - c)\n\ndef main():\n    data = sys.stdin.readline().split()\n    b = int(data[0])\n    d = int(data[1])\n    c = int(data[2])\n    legs = int(data[3])\n    legs(b, d, c, legs)\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef main():\n    b, d, c, l = [int(x) for x in sys.stdin.readline().split()] #read in the input\n    solutions = []\n    for num_birds in range(l//b + 1): #iterate through all possible combinations of animals (b, d, and c are the weights of the animals)\n        for num_dogs in range(l//d + 1): #l is the limit\n            for num_cats in range(l//c + 1): #the number of each animal is the number of times the limit can be divided by the weight of the animal\n                if num_birds*b + num_dogs*d + num_cats*c == l: #check if the combination is a solution\n                    solutions.append([num_birds, num_dogs, num_cats])\n    if solutions:\n        solutions.sort()\n        for sol in solutions:\n            print(\" \".join([str(x) for x in sol]))\n    else:\n        print(\"impossible\")\n\nmain()\n", "\nb, d, c, l = map(int, input().split())\n\nsolutions = []\nfor i in range(l//b + 1):\n    for j in range(l//d + 1):\n        for k in range(l//c + 1):\n            if i * b + j * d + k * c == l:\n                solutions.append([i, j, k])\n\nif len(solutions) == 0:\n    print(\"impossible\")\nelse:\n    for i in sorted(solutions):\n        print(i[0], i[1], i[2])\n", "\nimport sys\n\ndef legs(b, d, c, l):\n    if l < 0:\n        return\n    if b == 0 and d == 0 and c == 0 and l == 0:\n        print(\"{} {} {}\".format(b, d, c))\n        return\n    legs(b - 1, d, c, l - b)\n    legs(b, d - 1, c, l - d)\n    legs(b, d, c - 1, l - c)\n\ndef main():\n    data = sys.stdin.readline().split()\n    b = int(data[0])\n    d = int(data[1])\n    c = int(data[2])\n    l = int(data[3])\n    legs(b, d, c, l)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef possible(b, d, c, l, m):\n    for i in range(0, m//b + 1):\n        for j in range(0, m//d + 1):\n            for k in range(0, m//c + 1):\n                if i*b + j*d + k*c == m:\n                    print i, j, k\n\ndef main():\n    lines = sys.stdin.readlines()\n    b, d, c, l = map(int, lines[0].strip().split(' '))\n    possible(b, d, c, l, l)\n\nif __name__ == '__main__':\n    main()\n", "\nfrom itertools import product\n\nb, d, c, l = map(int, input().split())  # \u0432\u0432\u043e\u0434 \u0434\u0430\u043d\u043d\u044b\u0445 \n\nfor i, j, k in product(range(l//b + 1), range(l//d + 1), range(l//c + 1)):  # \u043f\u0435\u0440\u0435\u0431\u043e\u0440 \u0432\u0441\u0435\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \n    if i*b + j*d + k*c == l:  # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \n        print(i, j, k)\n", "\n\nimport sys\n\ndef possible(b, d, c, l, m):\n    for i in range(0, m/b + 1):\n        for j in range(0, m/d + 1):\n            for k in range(0, m/c + 1):\n                if i*b + j*d + k*c == m:\n                    print i, j, k\n\ndef main():\n    lines = sys.stdin.readlines()\n    b, d, c, l = map(int, lines[0].strip().split(' '))\n    possible(b, d, c, l, l)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nb, d, c, l = map(int, sys.stdin.readline().split())  # b - birds, d - dogs, c - cats, l - length of the fence\n\nif l % 2 != 0:  # if the length of the fence is odd, it is impossible to make a fence\n    print('impossible')\n    sys.exit()\nanswers = []\nfor birds in range(l // b + 1):\n    for dogs in range(l // d + 1):\n        for cats in range(l // c + 1):\n            if birds * b + dogs * d + cats * c == l:\n                answers.append([birds, dogs, cats])\n\nif len(answers) == 0:\n    print('impossible')\nelse:\n    for answer in sorted(answers):\n        print(*answer)\n", "\n\nfrom itertools import product\n\nb, d, c, l = map(int, input().split())  # \u0432\u0432\u043e\u0434 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0439 \u0442\u0438\u043f\n\nfor i, j, k in product(range(l//b + 1), range(l//d + 1), range(l//c + 1)):  # \u043f\u0435\u0440\u0435\u0431\u043e\u0440 \u0432\u0441\u0435\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432\n    if i*b + j*d + k*c == l:  # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435\n        print(i, j, k)\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    b, d, c, l = [int(x) for x in sys.stdin.readline().split()] # b = birds, d = dogs, c = cats, l = limit\n    solutions = []\n    for num_birds in range(l//b + 1):\n        for num_dogs in range(l//d + 1):\n            for num_cats in range(l//c + 1):\n                if num_birds*b + num_dogs*d + num_cats*c == l:\n                    solutions.append([num_birds, num_dogs, num_cats])\n    if solutions:\n        solutions.sort()\n        for sol in solutions:\n            print(\" \".join([str(x) for x in sol]))\n    else:\n        print(\"impossible\")\n\nmain()\n"]