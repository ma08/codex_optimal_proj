["#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\n[N, S, R] = map(int, sys.stdin.readline().split())\ndamaged = map(int, sys.stdin.readline().split())\nreserve = map(int, sys.stdin.readline().split())\n\ndef check(reserve, damaged):\n    for i in damaged:\n        if i-1 in reserve:\n            reserve.remove(i-1)\n            damaged.remove(i)\n        elif i+1 in reserve:\n            reserve.remove(i+1)\n            damaged.remove(i)\n        else:\n            return -1\n    return len(damaged)\n\nprint check(reserve, damaged)\n", "\n\ndef main():\n    n, s, r = map(int, input().split())  # n is number of seats, s is number of damaged seats, r is number of reserved seats\n    damaged = set(map(int, input().split()))\n    reserved = set(map(int, input().split()))\n    count = 0\n    for i in range(1, n+1):\n        if i in damaged:\n            if i-1 in reserved and i+1 in reserved:\n                reserved.remove(i-1)\n                reserved.remove(i+1)\n            elif i-1 in reserved:\n                reserved.remove(i-1)\n            elif i+1 in reserved:\n                reserved.remove(i+1)\n            else:\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, s, r = (int(x) for x in sys.stdin.readline().split())\n    damaged = set(int(x) for x in sys.stdin.readline().split())\n    reserve = set(int(x) for x in sys.stdin.readline().split())\n    print(max(0, s - len(reserve.intersection(damaged.union({x - 1 for x in damaged}).union({x + 1 for x in damaged}))))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    \"\"\"\n    The main function\n    \"\"\"\n    # Read the input\n    num_teams, num_teams_damaged, num_teams_reserve = map(int, input().split())  # pylint: disable=unused-variable\n    teams_damaged = list(map(int, input().split()))\n    teams_reserve = list(map(int, input().split()))\n\n    # Sort the lists\n    teams_damaged.sort()\n    teams_reserve.sort()\n\n    # Check if the team with the reserve is damaged\n    for team in teams_reserve:\n        if team in teams_damaged:\n            teams_damaged.remove(team)\n\n    # Check if the team with the damaged kayak is next to the team with the reserve kayak\n    for team in teams_damaged:\n        if team + 1 in teams_reserve or team - 1 in teams_reserve:\n            teams_damaged.remove(team)\n\n    print(len(teams_damaged))\n\nmain()\n", "\n\n# Get input\nN, S, R = [int(x) for x in input().split()]\ndmg = [int(x) for x in input().split()]\nrsv = [int(x) for x in input().split()]\n\n# Find the number of teams that can't start\n# Start with the number of teams with damaged kayaks\n# Subtract the number of teams with reserve kayaks\n# Add the number of teams that can be helped by reserve kayaks (this is 0)\n# Subtract the number of teams that are helped by reserve kayaks\n#   but are not next to the team with the reserve kayak (this is 0)\n# Subtract the number of teams that are helped by a reserve kayak\n#   but are not next to any team with a damaged kayak (this is 0)\n# Subtract the number of teams that are helped by a reserve kayak\n#   but are not next to any other team with a reserve kayak\n# Add the number of teams that are helped by a reserve kayak\n#   and are next to a team with a damaged kayak\n# Add the number of teams that are helped by a reserve kayak\n#   and are next to another team with a reserve kayak\n# Add the number of teams that are helped by a reserve kayak\n#   and are next to a team with a damaged kayak and a team with a reserve kayak\ncantStart = S - R\ncantStart -= sum([1 for x in dmg if x - 1 not in rsv and x + 1 not in rsv])\ncantStart -= sum([1 for x in rsv if x - 1 not in dmg and x + 1 not in dmg])\ncantStart -= sum([1 for x in rsv if x - 1 not in rsv and x + 1 not in rsv])\ncantStart += sum([1 for x in dmg if x - 1 in rsv or x + 1 in rsv])\ncantStart += sum([1 for x in rsv if x - 1 in rsv or x + 1 in rsv])\ncantStart += sum([1 for x in dmg if (x - 1 in rsv or x + 1 in rsv) and (x - 1 in dmg or x + 1 in dmg)])\n\n# Print the result\nprint(cantStart)\n", "\nimport sys\n\ndef main():\n    n, s, r = [int(i) for i in sys.stdin.readline().split()]  # n = number of seats, s = number of broken seats, r = number of reserve seats\n    broken = [int(i) for i in sys.stdin.readline().split()]\n    reserve = [int(i) for i in sys.stdin.readline().split()]\n    total = 0\n    for i in broken:\n        if i == 1:\n            if 2 in reserve:\n                reserve.remove(2)\n            else:\n                total += 1\n        elif i == n:\n            if n - 1 in reserve:\n                reserve.remove(n - 1)\n            else:\n                total += 1\n        else:\n            if i - 1 in reserve:\n                reserve.remove(i - 1)\n            elif i + 1 in reserve:\n                reserve.remove(i + 1)\n            else:\n                total += 1\n    print(total)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nN, S, R = map(int, input().split())\nD = set(map(int, input().split()))  # damaged\nB = set(map(int, input().split()))  # broken\n\nc = 0\n\nfor i in range(1, N + 1):\n    if i in D:\n        if i - 1 in B:\n            B.remove(i - 1)\n        elif i + 1 in B:\n            B.remove(i + 1)\n        else:\n            c += 1\nprint(c)\n", "import sys\n\ndef main():\n    n, s, r = [int(i) for i in sys.stdin.readline().split()]\n    broken = [int(i) for i in sys.stdin.readline().split()]\n    reserve = [int(i) for i in sys.stdin.readline().split()]\n    total = 0 # number of people who cannot sit\n    for i in broken:\n        # if the broken seat is the first or last seat\n        if i == 1:\n            if 2 in reserve:\n                reserve.remove(2)\n            else:\n                total += 1\n        elif i == n:\n            if n-1 in reserve:\n                reserve.remove(n-1)\n            else:\n                total += 1\n        # if the broken seat is not the first or last seat\n        else:\n            if i-1 in reserve:\n                reserve.remove(i-1)\n            elif i+1 in reserve:\n                reserve.remove(i+1)\n            else:\n                total += 1\n    print(total)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, s, r = [int(x) for x in sys.stdin.readline().split()]\n    damaged = [int(x) for x in sys.stdin.readline().split()]\n    reserve = [int(x) for x in sys.stdin.readline().split()]\n    damaged = set(damaged)\n    reserve = set(reserve)\n    if len(damaged) != s or len(reserve) != r:\n        return 'ERROR'\n    if n < 2 or n > 10 or s < 1 or s > n or r < 1 or r > n or s + r > n:\n        return 'ERROR'\n    for x in damaged:\n        if x < 1 or x > n:\n            return 'ERROR'\n    for x in reserve:\n        if x < 1 or x > n:\n            return 'ERROR'\n    for x in damaged:\n        if x - 1 in reserve and x + 1 in reserve:\n            reserve.remove(x - 1)\n            reserve.remove(x + 1)\n            damaged.remove(x)\n        elif x - 1 in reserve:\n            reserve.remove(x - 1)\n            damaged.remove(x)\n        elif x + 1 in reserve:\n            reserve.remove(x + 1)\n            damaged.remove(x)\n    return len(damaged)\n\nif __name__ == '__main__':\n    print(main())\n", "\n\n# Get input\nN, S, R = [int(x) for x in input().split()]\ndmg = [int(x) for x in input().split()]\nrsv = [int(x) for x in input().split()]\n\n# Find the number of teams that can't start\n# Start with the number of teams with damaged kayaks\n# Subtract the number of teams with reserve kayaks\n# Add the number of teams that can be helped by reserve kayaks\n# Subtract the number of teams that are helped by reserve kayaks but are not next to the team with the reserve kayak\n# Subtract the number of teams that are helped by a reserve kayak but are not next to any team with a damaged kayak\n# Subtract the number of teams that are helped by a reserve kayak but are not next to any other team with a reserve kayak\n# Add the number of teams that are helped by a reserve kayak and are next to a team with a damaged kayak\n# Add the number of teams that are helped by a reserve kayak and are next to another team with a reserve kayak\n# Add the number of teams that are helped by a reserve kayak and are next to a team with a damaged kayak and a team with a reserve kayak\ncantStart = S - R\ncantStart -= sum([1 for x in dmg if x - 1 not in rsv and x + 1 not in rsv])\ncantStart -= sum([1 for x in rsv if x - 1 not in dmg and x + 1 not in dmg])\ncantStart -= sum([1 for x in rsv if x - 1 not in rsv and x + 1 not in rsv])\ncantStart += sum([1 for x in dmg if x - 1 in rsv or x + 1 in rsv])\ncantStart += sum([1 for x in rsv if x - 1 in rsv or x + 1 in rsv])\ncantStart += sum([1 for x in dmg if (x - 1 in rsv or x + 1 in rsv) and (x - 1 in dmg or x + 1 in dmg)])\n\n# Print the result\nprint(cantStart)\n", "\n\ndef main():\n    \"\"\"\n    The main function\n    \"\"\"\n    # Read the input\n    num_teams, num_teams_damaged, num_teams_reserves = \\\n        map(int, input().split())\n    teams_damaged = list(map(int, input().split()))\n    teams_reserves = list(map(int, input().split()))\n\n    # Sort the lists\n    teams_damaged.sort()\n    teams_reserves.sort()\n\n    # Check if the team with the reserve is damaged\n    for team in teams_reserves:\n        if team in teams_damaged:\n            teams_damaged.remove(team)\n\n    # Check if the team with the damaged kayak is next to the team with the\n    # reserve\n    for team in teams_damaged:\n        if team + 1 in teams_reserves or team - 1 in teams_reserves:\n            teams_damaged.remove(team)\n\n    print(len(teams_damaged))\n\nmain()\n", "\n\ndef main():\n    \"\"\"\n    The main function\n    \"\"\"\n    # Read the input\n    num_teams, num_teams_damaged, num_teams_reserve = map(int, input().split())\n    teams_damaged = list(map(int, input().split()))\n    teams_reserve = list(map(int, input().split()))\n\n    # Sort the lists\n    teams_damaged.sort()\n    teams_reserve.sort()\n\n    # Check if the team with the reserve is damaged\n    for team in teams_reserve:\n        if team in teams_damaged:\n            teams_damaged.remove(team)\n\n    # Check if the team with the damaged kayak is next to the team with the reserve kayak\n    for team in teams_damaged:\n        if team + 1 in teams_reserve or team - 1 in teams_reserve:\n            teams_damaged.remove(team)\n\n\n    print(len(teams_damaged))\n\nmain()\n", "\nimport sys\n\ndef main():\n    n, s, r = [int(x) for x in sys.stdin.readline().split()]\n    damaged = [int(x) for x in sys.stdin.readline().split()]\n    reserve = [int(x) for x in sys.stdin.readline().split()]\n    damaged = set(damaged)\n    reserve = set(reserve)\n    if len(damaged) != s or len(reserve) != r:\n        return 'ERROR'\n    if n < 2 or n > 10 or s < 1 or s > n or r < 1 or r > n:\n        return 'ERROR'\n    for x in damaged:\n        if x < 1 or x > n:\n            return 'ERROR'\n    for x in reserve:\n        if x < 1 or x > n:\n            return 'ERROR'\n    for x in damaged:\n        if x - 1 in reserve:\n            reserve.discard(x - 1)\n            damaged.discard(x)\n        if x + 1 in reserve:\n            reserve.discard(x + 1)\n            damaged.discard(x)\n    return len(damaged)\n\nif __name__ == '__main__':\n    print(main())\n", "\n\ndef main():\n    n, s, r = map(int, input().split())  # n: number of seats, s: number of damaged seats, r: number of reserve seats\n    damaged = set(map(int, input().split()))\n    reserve = set(map(int, input().split()))\n    count = 0  # count the number of people who cannot sit\n    for i in range(1, n + 1):\n        if i in damaged:  # if the seat is damaged\n            if i-1 in reserve and i+1 in reserve:  # if the seats in the left and right are reserve seats\n                reserve.remove(i-1)  # remove the seat in the left\n                reserve.remove(i+1)  # remove the seat in the right\n            elif i-1 in reserve:  # if the seat in the left is reserve seat\n                reserve.remove(i-1)  # remove the seat in the left\n            elif i+1 in reserve:  # if the seat in the right is reserve seat\n                reserve.remove(i+1)  # remove the seat in the right\n            else:\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, s, r = [int(x) for x in sys.stdin.readline().split()]\n    damaged = [int(x) for x in sys.stdin.readline().split()]\n    reserve = [int(x) for x in sys.stdin.readline().split()]\n    damaged = set(damaged)\n    reserve = set(reserve)\n    try:\n        if len(damaged) != s or len(reserve) != r:\n            return 'ERROR'\n        if n < 2 or n > 10 or s < 1 or s > n or r < 1 or r > n:\n            return 'ERROR'\n        for x in damaged:\n            if x < 1 or x > n:\n                return 'ERROR'\n        for x in reserve:\n            if x < 1 or x > n:\n                return 'ERROR'\n        for x in damaged:\n            if x - 1 in reserve and x + 1 in reserve:\n                reserve.remove(x - 1)\n                reserve.remove(x + 1)\n                damaged.remove(x)\n            elif x - 1 in reserve:\n                reserve.remove(x - 1)\n                damaged.remove(x)\n            elif x + 1 in reserve:\n                reserve.remove(x + 1)\n                damaged.remove(x)\n        return len(damaged)\n    except:\n        return 'ERROR'\n\nif __name__ == '__main__':\n    print(main())\n", "\nN = int(input())\nA = list(map(int, input().split()))\n\nans = 0\n\nfor i in range(N):\n    ans += A[i] - 1\n\nprint(ans)\n", "\n\nimport sys\n\ndef main():\n    n, s, r = (int(x) for x in sys.stdin.readline().split())\n    damaged = set(int(x) for x in sys.stdin.readline().split())\n    reserve = set(int(x) for x in sys.stdin.readline().split())\n    print(max(0, s - len(reserve.intersection(damaged.union({x - 1 for x in damaged}).union({x + 1 for x in damaged}))))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\n[N, M] = map(int, sys.stdin.readline().split())\nA = map(int, sys.stdin.readline().split())\nB = map(int, sys.stdin.readline().split())\n\ndef check(A, B):\n    for i in A:\n        if i in B:\n            A.remove(i)\n            B.remove(i)\n    return len(A)\n\nprint check(A, B)\n", "\n\ndef main():\n    \"\"\"\n    The main function\n    \"\"\"\n    # Read the input\n    num_teams, num_teams_damaged, num_teams_reserves = map(\n        int, input().split())\n    teams_damaged = list(map(int, input().split()))\n    teams_reserves = list(map(int, input().split()))\n\n    # Sort the lists\n    teams_damaged.sort()\n    teams_reserves.sort()\n\n    # Check if the team with the reserve is damaged\n    for team in teams_reserves:\n        if team in teams_damaged:\n            teams_damaged.remove(team)\n\n    # Check if the team with the damaged kayak is next to the team with the\n    # reserve\n    for team in teams_damaged:\n        if team + 1 in teams_reserves or team - 1 in teams_reserves:\n            teams_damaged.remove(team)\n\n    print(len(teams_damaged))\n\nmain()\n", "#\n# N, S, R = map(int, input().split())\n# D = set(map(int, input().split()))\n# B = set(map(int, input().split()))\n#\n# c = 0\n#\n# for i in range(1, N+1):\n#     if i in D:\n#         if i-1 in B:\n#             B.remove(i-1)\n#         elif i+1 in B:\n#             B.remove(i+1)\n#         else:\n#             c += 1\n# print(c)\n", "\n\nimport sys, math\n\n[N, M] = map(int, sys.stdin.readline().split())\nA = map(int, sys.stdin.readline().split())\nB = map(int, sys.stdin.readline().split())\n\ndef check(A, B):\n    for i in A:\n        if i in B:\n            A.remove(i)\n            B.remove(i)\n    return len(A)\n\nprint check(A, B)\n", "\nimport sys\n\ndef main():\n    n, s, r = [int(x) for x in sys.stdin.readline().split()]\n    damaged = [int(x) for x in sys.stdin.readline().split()]\n    reserve = [int(x) for x in sys.stdin.readline().split()]\n    damaged = set(damaged) # make set of damaged bikes\n    reserve = set(reserve) # make set of reserve bikes\n    if len(damaged) != s or len(reserve) != r:\n        return 'ERROR' # check if number of bikes is correct\n    if n < 2 or n > 10 or s < 2 or s > n or r < 1 or r > n:\n        return 'ERROR' # check if number of bikes is correct\n    for x in damaged:\n        if x < 1 or x > n:\n            return 'ERROR' # check if bike number is correct\n    for x in reserve:\n        if x < 1 or x > n:\n            return 'ERROR' # check if bike number is correct\n    for x in damaged:\n        if x - 1 in reserve and x + 1 in reserve:\n            reserve.remove(x - 1) # remove reserve bike\n            reserve.remove(x + 1) # remove reserve bike\n            damaged.remove(x) # remove damaged bike\n        elif x - 1 in reserve:\n            reserve.remove(x - 1) # remove reserve bike\n            damaged.remove(x) # remove damaged bike\n        elif x + 1 in reserve:\n            reserve.remove(x + 1) # remove reserve bike\n            damaged.remove(x) # remove damaged bike\n    return len(damaged)\n\nif __name__ == '__main__':\n    print(main())\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\n[N, S, R] = map(int, sys.stdin.readline().split())\ndamaged = map(int, sys.stdin.readline().split())\nreserve = map(int, sys.stdin.readline().split())\n\ndef check(reserve, damaged):\n    for i in damaged:\n        if i-1 in reserve:\n            reserve.remove(i - 1)\n            damaged.remove(i)\n        elif i+1 in reserve:\n            reserve.remove(i + 1)\n            damaged.remove(i)\n    return len(damaged)\n\nprint check(reserve, damaged)\n", "\n\ndef main():\n    n, s, r = map(int, input().split())  # n: number of seats, s: number of damaged seats, r: number of reserved seats\n    damaged = set(map(int, input().split()))\n    reserve = set(map(int, input().split()))\n    count = 0  # count the number of people who cannot sit\n    for i in range(1, n+1):\n        if i in damaged:  # if the seat is damaged\n            if i-1 in reserve and i+1 in reserve:  # if the seats in the left and right are reserved seats\n                reserve.remove(i-1)  # remove the seat in the left\n                reserve.remove(i+1)  # remove the seat in the right\n            elif i-1 in reserve:  # if the seat in the left is reserved seat\n                reserve.remove(i-1)  # remove the seat in the left\n            elif i+1 in reserve:  # if the seat in the right is reserved seat\n                reserve.remove(i+1)  # remove the seat in the right\n            else:\n                count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    n, s, r = [int(i) for i in sys.stdin.readline().split()]\n    broken = [int(i) for i in sys.stdin.readline().split()]\n    reserve = [int(i) for i in sys.stdin.readline().split()]\n    total = 0 # number of people who can't sit\n    for i in broken:\n        if i == 1:\n            if 2 in reserve:\n                reserve.remove(2)\n            else:\n                total += 1\n        elif i == n:\n            if n-1 in reserve:\n                reserve.remove(n-1)\n            else:\n                total += 1\n        else:\n            if i-1 in reserve:\n                reserve.remove(i-1)\n            elif i+1 in reserve:\n                reserve.remove(i+1)\n            else:\n                total += 1\n    print(total)\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef main():\n    n, s, r = [int(i) for i in sys.stdin.readline().split()]\n    broken = [int(i) for i in sys.stdin.readline().split()]\n    reserve = [int(i) for i in sys.stdin.readline().split()]\n    total = 0\n    for i in broken:\n        if i == 1:\n            if 2 in reserve:\n                reserve.remove(2)\n            else:\n                total += 1\n        elif i == n:\n            if n - 1 in reserve:\n                reserve.remove(n - 1)\n            else:\n                total += 1\n        else:\n            if i - 1 in reserve:\n                reserve.remove(i - 1)\n            elif i + 1 in reserve:\n                reserve.remove(i + 1)\n            else:\n                total += 1\n    print(total)\n\nif __name__ == \"__main__\":\n    main()\n"]