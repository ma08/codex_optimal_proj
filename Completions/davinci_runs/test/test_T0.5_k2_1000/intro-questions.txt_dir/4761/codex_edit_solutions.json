["\ndef is_valid(c, l, h):\n    if c < l or c > h:\n        return False\n    if len(set(str(c))) != 6:\n        return False\n    if any(c % int(d) != 0 for d in str(c)):\n        return False\n    return True\n\ndef num_valid(l, h):\n    return sum(1 for c in range(l, h+1) if is_valid(c, l, h))\n\ndef main():\n    l, h = map(int, input().split())\n    print(num_valid(l, h))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef count_combinations(L, H):\n    count = 0\n    for c in range(L, H + 1):\n        c_list = [int(d) for d in str(c)]\n        if len(c_list) == len(set(c_list)) and all([c % d == 0 for d in c_list]):\n            count += 1\n    return count\n\n\ndef main():\n    L, H = [int(x) for x in input().split()]\n    print(count_combinations(L, H))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n#!/usr/bin/python3\nimport sys\n\ndef check(n):\n    n = str(n)\n    if len(set(n)) != 6:\n        return False\n    for i in n:\n        if int(n) % int(i) != 0:\n            return False\n    return True\n\ndef main():\n    L, H = map(int, sys.stdin.readline().split())\n    count = 0\n    for i in range(L, H+1):\n        if check(i):\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "import fileinput\nimport itertools\n\ndef is_valid_combination(combination):\n    combination = [int(i) for i in list(combination)]\n    if len(combination) != 6:\n        return False\n    if len(set(combination)) != 6:\n        return False\n    for i in combination:\n        if combination[0] % i != 0:\n            return False\n    return True\n\ndef main():\n    for line in fileinput.input():\n        line = line.split()\n        L = int(line[0])\n        H = int(line[1])\n        count = 0\n        for i in range(L, H + 1):\n            if is_valid_combination(str(i)):\n                count += 1\n        print(count)\n\nif __name__ == '__main__':\n    main()\n", "\ndef is_valid(c, l, h):  \n    if c < l or c > h:  \n        return False  \n    if len(set(str(c))) != 6:  \n        return False  \n    if any(int(c) % int(d) != 0 for d in str(c)):  \n        return False  \n    return True  \n  \ndef num_valid(l, h):  \n    return sum(1 for c in range(l, h+1) if is_valid(c, l, h))  \n  \ndef main():  \n    l, h = map(int, input().split())  \n    print(num_valid(l, h))  \n  \nif __name__ == \"__main__\":  \n    main()  \n", "\n\ndef count_combinations(l, h):\n    count = 0\n    for c in range(l, h + 1):\n        c_list = [int(d) for d in str(c)]\n        if len(c_list) == len(set(c_list)) and all([c % d == 0 for d in c_list if d != 0]):\n            count += 1\n    return count\n\n\ndef main():\n    l, h = [int(x) for x in input().split()]\n    print(count_combinations(l, h))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport fileinput\n\ndef is_valid_combination(combination, L, H):\n    if combination[0] < L or combination[0] > H:\n        return False\n    combination = [int(i) for i in list(combination)]\n    if len(combination) != 6:\n        return False\n    if len(set(combination)) != 6:\n        return False\n    for i in combination:\n        if combination[0] % i != 0:\n            return False\n    return True\n\ndef main():\n    for line in fileinput.input():\n        line = line.split()\n        L = int(line[0])\n        H = int(line[1])\n        count = 0\n        for i in range(L, H + 1):\n            if is_valid_combination(str(i), L, H):\n                count += 1\n        print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    l, h = map(int, input().split())\n    count = 0\n    for i in range(l, h + 1):\n        if len(set(str(i))) == 6 and i % 2 != 0 and i % 5 != 0:\n            if i % 1 == 0 and i % 3 == 0 and i % 4 == 0 and i % 6 == 0 and i % 7 == 0 and i % 8 == 0 and i % 9 == 0:\n                count += 1\n    print(count)\n\nmain()\n", "\n\ndef main():\n    l, h = [int(x) for x in input().split()] # input is a string\n    count = 0\n    for i in range(l, h + 1): # range is a function\n        if is_valid(str(i)): # str is a function\n            count += 1\n\n    print(count)\n\ndef is_valid(c):\n    if len(c) != 6 or any([x == '0' for x in c]): # len is a function\n        return False\n    if len(set(c)) != 6:\n        return False\n    for i in c:\n        if int(c) % int(i) != 0: # int is a function\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    print(n)\n\n\nmain()\n", "\ndef main():\n    \"\"\"\n    1. Get input numbers\n    2. Create a list of all numbers between them\n    3. Filter out numbers that are not divisible by each of their digits (except 0)\n    4. Filter out numbers that have repeating digits\n    5. Print the length of the list\n    \"\"\"\n    low, high = map(int, input().split())\n    numbers = list(range(low, high + 1))\n\n    def is_divisible(number):\n        digits = [int(c) for c in str(number)]\n        for d in digits:\n            if d == 0 or number % d != 0:\n                return False\n        return True\n\n    def has_repeats(number):\n        digits = [int(c) for c in str(number)]\n        return len(set(digits)) != len(digits)\n\n    numbers = list(filter(is_divisible, numbers))\n    numbers = list(filter(has_repeats, numbers))\n    print(len(numbers))\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef check(n):\n    n = str(n)\n    if len(set(n)) != len(n):\n        return False\n    for i in n:\n        if int(n) % int(i) != 0:\n            return False\n    return True\n\ndef main():\n    L, H = map(int, sys.stdin.readline().split())\n    count = 0\n    for i in range(L, H+1):\n        if check(i):\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    L, H = map(int, input().split())\n    count = 0\n    for i in range(L, H + 1):\n        if len(set(str(i))) == 6 and i % 2 != 0 and i % 5 != 0 and i % 1 == 0 and i % 2 == 0 and i % 3 == 0 and i % 4 == 0 and i % 6 == 0 and i % 7 == 0 and i % 8 == 0 and i % 9 == 0 and i % 10 == 0:\n                count += 1\n    print(count)\n\nmain()\n", "\n\ndef count_combinations(l, h):\n    count = 0\n    for c in range(l, h + 1):\n        c_list = [int(d) for d in str(c)]\n        if len(c_list) == len(set(c_list)) and all([c % d == 0 for d in c_list]) and c_list[0] != 0:\n            count += 1\n    return count\n\n\ndef main():\n    l, h = [int(x) for x in input().split()]\n    print(count_combinations(l, h))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    l, h = [int(x) for x in input().split()]  # l = lower bound, h = higher bound\n    count = 0\n    for i in range(l, h + 1):\n        if is_valid(str(i)):  # check if the number is valid\n            count += 1\n\n    print(count)\n\ndef is_valid(c):\n    if len(c) != 6 or any([x == '0' for x in c]):  # check for length and if there are zeros\n        return False\n    if len(set(c)) != 6:  # check if all the digits are unique\n        return False\n    for i in c:  # check if the number is divisible by each digit\n        if int(c) % int(i) != 0:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    \"\"\"\n    \"\"\"\n    l, h = [int(x) for x in input().split()]\n    count = 0\n    for i in range(l, h + 1):\n        if is_valid(str(i)):\n            count += 1\n\n    print(count)\n\ndef is_valid(c):\n    \"\"\"\n    \"\"\"\n    if len(c) != 6 or any([x == '0' for x in c]):  # check if the length is 6 and if there are any zeros\n        return False\n    if len(set(c)) != 6:  # check if there are any repeating digits\n        return False\n    for i in c:\n        if int(c) % int(i) != 0:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    print(\"Hello World\")\n\n\nmain()\n", "\n# \nimport sys\n\ndef check(n):\n    n = str(n)\n    if len(set(n)) != 6:\n        return False\n    for i in n:\n        if int(n) % int(i) != 0:\n            return False\n    return True\n\ndef main():\n    L, H = map(int, sys.stdin.readline().split())\n    count = 0\n    for i in range(L, H+1):\n        if check(i):\n            count += 1\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "import fileinput\n\ndef is_valid_combination(combination):\n    combination = [int(i) for i in list(combination)]\n    if len(combination) != 6:\n        return False\n    if len(set(combination)) != 6:\n        return False\n    for i in range(1, len(combination)):\n        if combination[i] % combination[0] != 0:\n            return False\n    return True\n\ndef main():\n    for line in fileinput.input():\n        line = line.split()\n        L = int(line[0])\n        H = int(line[1])\n        count = 0\n        for i in range(L, H + 1):\n            if is_valid_combination(str(i)):\n                count += 1\n        print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    low, high = [int(x) for x in input().split()]  # get the range\n    num_combinations = 0\n    for i in range(low, high + 1):  # iterate through the range\n        if is_valid(i):  # if the number is valid\n            num_combinations += 1\n\n    print(num_combinations)\n\ndef is_valid(n):\n    n = str(n)\n    if len(n) != 6:\n        return False\n    if len(set(n)) != 6:\n        return False\n    for i in range(1, 10):\n        if n.count(str(i)) > 1:\n            return False\n    for i in n:\n        if int(n) % int(i) != 0:\n            return False\n    return True\n\n\nmain()\n", "\n\ndef main():\n    low, high = [int(x) for x in input().split()]  # get the range\n    num_combinations = 0\n    for i in range(low, high + 1):  # iterate through the range\n        if is_valid(i):  # if the number is valid\n            num_combinations += 1\n    print(num_combinations)\n\n\ndef is_valid(n):\n    pass\n\n\nmain()\n", "\n\ndef count_combinations(L, H):\n    pass\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport fileinput\n\ndef is_valid_combination(combination, L, H):\n    if combination[0] < L or combination[0] > H: return False\n    combination = [int(i) for i in list(combination)]\n    if len(combination) != 6:\n        return False \n    if len(set(combination)) != 6:\n        return False \n    for i in combination:\n        if combination[0] % i != 0:\n            return False \n    return True\n\ndef main():\n    for line in fileinput.input():\n        line = line.split()\n        L = int(line[0])\n        H = int(line[1])\n        count = 0\n        for i in range(L, H + 1):\n            if is_valid_combination(str(i), L, H):\n                count += 1\n        print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef check(n):\n    n = str(n) \n    if len(set(n)) != len(n): \n        return False \n    for i in n: \n        if int(n) % int(i) != 0: \n            return False \n    return True \n\ndef main():\n    L, H = map(int, sys.stdin.readline().split()) \n    count = 0 \n    for i in range(L, H+1): \n        if check(i): \n            count += 1 \n    print(count) \n\nif __name__ == '__main__':\n    main()\n", "\n\ndef is_valid(c, l, h):\n    if c < l or c > h:\n        return False\n    if len(set(str(c))) != 7:\n        return False\n    if any(c % int(d) != 0 for d in str(c)):\n        return False\n    return True\n\ndef num_valid(l, h):\n    return sum(1 for c in range(l, h+1) if is_valid(c, l, h))\n\ndef main():\n    l, h = map(int, input().split())\n    print(num_valid(l, h))\n\nif __name__ == \"__main__\":\n    main()\n"]