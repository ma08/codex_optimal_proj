2022-04-11 20:05:47.305136 num operations 2
2022-04-11 20:05:47.305165 size on input set 1
2022-04-11 20:05:50.887500 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef get_input():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        yield n, i\n\ndef solve(n, i):\n    if n == 1:\n        return 0\n    return (n - 1)**2\n\nif __name__ == '__main__':\n    for n, i in get_input():\n        print(\"Case #{}: {}\".format(i + 1, solve(n, i)))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef get_input():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        yield n\n\ndef solve(n):\n    if n == 1:\n        return 0\n    return (n - 1) ** 2\n\nif __name__ == '__main__':\n    for n in get_input():\n        print(solve(n))\n"
    }
  ],
  "created": 1649721947,
  "object": "edit"
}
2022-04-11 20:05:50.887722 fix spelling mistakes 2 ['\n\ndef get_input():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        yield n, i\n\ndef solve(n, i):\n    if n == 1:\n        return 0\n    return (n - 1)**2\n\nif __name__ == \'__main__\':\n    for n, i in get_input():\n        print("Case #{}: {}".format(i + 1, solve(n, i)))\n', "\n\ndef get_input():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        yield n\n\ndef solve(n):\n    if n == 1:\n        return 0\n    return (n - 1) ** 2\n\nif __name__ == '__main__':\n    for n in get_input():\n        print(solve(n))\n"]
2022-04-11 20:05:50.887756 size on output set 2
2022-04-11 20:05:50.887766 size on input set 2
2022-04-11 20:05:53.430551 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef get_input():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        yield n\n\ndef solve(n):\n    if n == 1:\n        return 0\n    return (n - 1) * (n - 1)\n\nif __name__ == '__main__':\n    for n in get_input():\n        print(solve(n))\n"
    },
    {
      "index": 1,
      "text": "\nfrom math import sqrt\n\ndef get_input():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        yield n\n\ndef solve(n):\n    if n == 1:\n        return 0\n    return int((n - 1) ** 2)\n\nif __name__ == '__main__':\n    for n in get_input():\n        print(solve(n))\n"
    }
  ],
  "created": 1649721951,
  "object": "edit"
}
2022-04-11 20:05:53.431054 fix syntax errors 2 ["\n\ndef get_input():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        yield n\n\ndef solve(n):\n    if n == 1:\n        return 0\n    return (n - 1) * (n - 1)\n\nif __name__ == '__main__':\n    for n in get_input():\n        print(solve(n))\n", "\nfrom math import sqrt\n\ndef get_input():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        yield n\n\ndef solve(n):\n    if n == 1:\n        return 0\n    return int((n - 1) ** 2)\n\nif __name__ == '__main__':\n    for n in get_input():\n        print(solve(n))\n"]
2022-04-11 20:05:57.850484 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef get_input():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        yield n, i\n\ndef solve(n, i):\n    if n == 1:\n        return 0\n    return (n - 1)**2\n\nif __name__ == '__main__':\n    for n, i in get_input():\n        print(\"Case #{}: {}\".format(i + 1, solve(n, i)))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef get_input():\n    n = int(input())\n    return n\n\ndef solve(n):\n    return n\n\nif __name__ == '__main__':\n    print(solve(get_input()))\n"
    }
  ],
  "created": 1649721953,
  "object": "edit"
}
2022-04-11 20:05:57.850753 fix syntax errors 2 ['\ndef get_input():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        yield n, i\n\ndef solve(n, i):\n    if n == 1:\n        return 0\n    return (n - 1)**2\n\nif __name__ == \'__main__\':\n    for n, i in get_input():\n        print("Case #{}: {}".format(i + 1, solve(n, i)))\n', "\n\ndef get_input():\n    n = int(input())\n    return n\n\ndef solve(n):\n    return n\n\nif __name__ == '__main__':\n    print(solve(get_input()))\n"]
2022-04-11 20:05:57.850791 size on output set 4
2022-04-11 20:05:57.851013 num operations 2
2022-04-11 20:05:57.851047 size on input set 1
2022-04-11 20:06:02.861211 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# SOLUTION\n# The problem can be solved with a greedy algorithm.\n# The idea is to start from the center and move the figures to the nearest cells.\n# If the center is not empty, we can move the figures in the center to the nearest cells\n# and then move the figures in the nearest cells to the center.\n# We can repeat the process until all the figures are in the center. Because we move the figures to the nearest cells, the number of moves is minimized.\n# The time complexity is O(n^2), which is the size of the board.\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    print(n * (n // 2) ** 2)\n"
    },
    {
      "index": 1,
      "text": "\n\n# SOLUTION\n# The problem can be solved with a greedy algorithm.\n# The idea is to start from the center and move the figures to the closest squares.\n# If the center is not empty, we can move the figures in the center to the closest squares\n# and then move the figures in the closest squares to the center.\n# We can repeat the process until all the figures are in the center square.\n# Because we move the figures to the closest squares, the number of moves is minimized.\n# The time complexity is O(n^2), which is the size of the board.\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    print(n * (n // 2) ** 2)\n"
    }
  ],
  "created": 1649721958,
  "object": "edit"
}
2022-04-11 20:06:02.861552 fix spelling mistakes 2 ['\n\n# SOLUTION\n# The problem can be solved with a greedy algorithm.\n# The idea is to start from the center and move the figures to the nearest cells.\n# If the center is not empty, we can move the figures in the center to the nearest cells\n# and then move the figures in the nearest cells to the center.\n# We can repeat the process until all the figures are in the center. Because we move the figures to the nearest cells, the number of moves is minimized.\n# The time complexity is O(n^2), which is the size of the board.\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    print(n * (n // 2) ** 2)\n', '\n\n# SOLUTION\n# The problem can be solved with a greedy algorithm.\n# The idea is to start from the center and move the figures to the closest squares.\n# If the center is not empty, we can move the figures in the center to the closest squares\n# and then move the figures in the closest squares to the center.\n# We can repeat the process until all the figures are in the center square.\n# Because we move the figures to the closest squares, the number of moves is minimized.\n# The time complexity is O(n^2), which is the size of the board.\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    print(n * (n // 2) ** 2)\n']
2022-04-11 20:06:02.861611 size on output set 2
2022-04-11 20:06:02.861621 size on input set 2
2022-04-11 20:06:08.722320 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# SOLUTION\n# The problem can be solved with a greedy algorithm. The idea is to start from the center and move the figures to the closest squares. If the center is not empty, we can move the figures in the center to the closest squares and then move the figures in the closest squares to the center. We can repeat the process until all the figures are in the center square. Because we move the figures to the closest squares, the number of moves is minimized. The time complexity is O(n^2), which is the size of the board.\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    print(n * (n // 2) ** 2)\n"
    },
    {
      "index": 1,
      "text": "\n\n# SOLUTION\n# The problem can be solved with a greedy algorithm. The idea is to start from the center and move the figures to the closest squares. If the center is not empty, we can move the figures in the center to the closest squares and then move the figures in the closest squares to the center. We can repeat the process until all the figures are in the center square. Because we move the figures to the closest squares, the number of moves is minimized. The time complexity is O(n^2), which is the size of the board.\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    print(n * (n // 2) ** 2)\n"
    }
  ],
  "created": 1649721963,
  "object": "edit"
}
2022-04-11 20:06:08.722748 fix syntax errors 2 ['\n\n# SOLUTION\n# The problem can be solved with a greedy algorithm. The idea is to start from the center and move the figures to the closest squares. If the center is not empty, we can move the figures in the center to the closest squares and then move the figures in the closest squares to the center. We can repeat the process until all the figures are in the center square. Because we move the figures to the closest squares, the number of moves is minimized. The time complexity is O(n^2), which is the size of the board.\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    print(n * (n // 2) ** 2)\n', '\n\n# SOLUTION\n# The problem can be solved with a greedy algorithm. The idea is to start from the center and move the figures to the closest squares. If the center is not empty, we can move the figures in the center to the closest squares and then move the figures in the closest squares to the center. We can repeat the process until all the figures are in the center square. Because we move the figures to the closest squares, the number of moves is minimized. The time complexity is O(n^2), which is the size of the board.\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    print(n * (n // 2) ** 2)\n']
2022-04-11 20:06:11.666412 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# SOLUTION\n# The problem can be solved with a greedy algorithm.\n# The idea is to start from the center and move the figures to the nearest cells.\n# If the center is not empty, we can move the figures in the center to the nearest cells\n# and then move the figures in the nearest cells to the center.\n# We can repeat the process until all the figures are in the center.\n# Because we move the figures to the nearest cells, the number of moves is minimized.\n# The time complexity is O(n^2), which is the size of the board.\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    print(n * (n // 2) ** 2)\n"
    },
    {
      "index": 1,
      "text": "\n\n# SOLUTION\n# The problem can be solved with a greedy algorithm.\n# The idea is to start from the center and move the figures to the nearest cells.\n# If the center is not empty, we can move the figures in the center to the nearest cells\n# and then move the figures in the nearest cells to the center.\n# We can repeat the process until all the figures are in the center.\n# Because we move the figures to the nearest cells, the number of moves is minimized.\n# The time complexity is O(n^2), which is the size of the board.\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    print(n * (n // 2) ** 2)\n"
    }
  ],
  "created": 1649721968,
  "object": "edit"
}
2022-04-11 20:06:11.666699 fix syntax errors 2 ['\n\n# SOLUTION\n# The problem can be solved with a greedy algorithm.\n# The idea is to start from the center and move the figures to the nearest cells.\n# If the center is not empty, we can move the figures in the center to the nearest cells\n# and then move the figures in the nearest cells to the center.\n# We can repeat the process until all the figures are in the center.\n# Because we move the figures to the nearest cells, the number of moves is minimized.\n# The time complexity is O(n^2), which is the size of the board.\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    print(n * (n // 2) ** 2)\n', '\n\n# SOLUTION\n# The problem can be solved with a greedy algorithm.\n# The idea is to start from the center and move the figures to the nearest cells.\n# If the center is not empty, we can move the figures in the center to the nearest cells\n# and then move the figures in the nearest cells to the center.\n# We can repeat the process until all the figures are in the center.\n# Because we move the figures to the nearest cells, the number of moves is minimized.\n# The time complexity is O(n^2), which is the size of the board.\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    print(n * (n // 2) ** 2)\n']
2022-04-11 20:06:11.666723 size on output set 2
