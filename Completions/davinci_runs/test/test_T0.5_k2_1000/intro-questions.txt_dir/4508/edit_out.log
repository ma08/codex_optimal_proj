2022-04-11 20:38:52.288169 num operations 2
2022-04-11 20:38:52.288223 size on input set 1
2022-04-11 20:38:54.608729 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport math\nfrom collections import defaultdict\n\nsys.setrecursionlimit(10**6)\n\ndef read_list():\n    return [int(i) for i in input().split()]\n\ndef read_single_int():\n    return int(input())\n\ndef read_single_str():\n    return input()\n\ndef add_edge(adj, u, v):\n    adj[u].append(v)\n    adj[v].append(u)\n\ndef dfs(adj, u, par):\n    for v in adj[u]:\n        if v != par:\n            dfs(adj, v, u)\n\ndef solve(adj, n):\n    dfs(adj, 1, 0)\n    count = 0\n    for u in adj:\n        if len(adj[u]) == 1:\n            count += 1\n    if count == 2:\n        return 0\n    else:\n        return math.ceil((count - 2)/2)\n\ndef main():\n    n = read_single_int()\n    adj = defaultdict(list)\n    for _ in range(n - 1):\n        u, v = read_list()\n        add_edge(adj, u, v)\n    print(solve(adj, n))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nimport math\nfrom collections import defaultdict\n\nsys.setrecursionlimit(10**6)\n\ndef read_list():\n    return [int(i) for i in input().split()]\n\ndef read_single_int():\n    return int(input())\n\ndef read_single_str():\n    return input()\n\ndef add_edge(adj, u, v):\n    adj[u].append(v)\n    adj[v].append(u)\n\ndef dfs(adj, u, par):\n    for v in adj[u]:\n        if v != par:\n            dfs(adj, v, u)\n\ndef solve(adj, n):\n    dfs(adj, 1, 0)\n    count = 0\n    for u in adj:\n        if len(adj[u]) == 1:\n            count += 1\n    if count == 2:\n        return 0\n    else:\n        return math.ceil((count - 2)/2)\n\ndef main():\n    n = read_single_int()\n    adj = defaultdict(list)\n    for _ in range(n - 1):\n        u, v = read_list()\n        add_edge(adj, u, v)\n    print(solve(adj, n))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649723932,
  "object": "edit"
}
2022-04-11 20:38:54.609108 fix spelling mistakes 2 ["\nimport sys\nimport math\nfrom collections import defaultdict\n\nsys.setrecursionlimit(10**6)\n\ndef read_list():\n    return [int(i) for i in input().split()]\n\ndef read_single_int():\n    return int(input())\n\ndef read_single_str():\n    return input()\n\ndef add_edge(adj, u, v):\n    adj[u].append(v)\n    adj[v].append(u)\n\ndef dfs(adj, u, par):\n    for v in adj[u]:\n        if v != par:\n            dfs(adj, v, u)\n\ndef solve(adj, n):\n    dfs(adj, 1, 0)\n    count = 0\n    for u in adj:\n        if len(adj[u]) == 1:\n            count += 1\n    if count == 2:\n        return 0\n    else:\n        return math.ceil((count - 2)/2)\n\ndef main():\n    n = read_single_int()\n    adj = defaultdict(list)\n    for _ in range(n - 1):\n        u, v = read_list()\n        add_edge(adj, u, v)\n    print(solve(adj, n))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\nfrom collections import defaultdict\n\nsys.setrecursionlimit(10**6)\n\ndef read_list():\n    return [int(i) for i in input().split()]\n\ndef read_single_int():\n    return int(input())\n\ndef read_single_str():\n    return input()\n\ndef add_edge(adj, u, v):\n    adj[u].append(v)\n    adj[v].append(u)\n\ndef dfs(adj, u, par):\n    for v in adj[u]:\n        if v != par:\n            dfs(adj, v, u)\n\ndef solve(adj, n):\n    dfs(adj, 1, 0)\n    count = 0\n    for u in adj:\n        if len(adj[u]) == 1:\n            count += 1\n    if count == 2:\n        return 0\n    else:\n        return math.ceil((count - 2)/2)\n\ndef main():\n    n = read_single_int()\n    adj = defaultdict(list)\n    for _ in range(n - 1):\n        u, v = read_list()\n        add_edge(adj, u, v)\n    print(solve(adj, n))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 20:38:54.609156 size on output set 1
2022-04-11 20:38:54.609165 size on input set 1
2022-04-11 20:39:01.523595 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport math\nfrom collections import defaultdict\n\nsys.setrecursionlimit(10**6)\n\ndef read_list():\n    return [int(x) for x in input().split()]\n\ndef read_single_int():\n    return int(read_single_str())\n\ndef read_single_str():\n    return sys.stdin.readline().rstrip()\n\ndef add_edge(adj, u, v):\n    adj[u].append(v)\n    adj[v].append(u)\n\ndef dfs(adj, u, par):\n    for v in adj[u]:\n        if v != par:\n            dfs(adj, v, u)\n\ndef solve(adj, n):\n    dfs(adj, 1, 0)\n    count = 0\n    for u in range(1, n + 1):\n        if len(adj[u]) == 1 and u != 1:\n            count += 1\n    return math.ceil((count - 2)/2)\n\ndef main():\n    n = read_single_int()\n    adj = defaultdict(list)\n    for _ in range(n - 1):\n        u, v = read_list()\n        add_edge(adj, u, v)\n    print(solve(adj, n))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\nimport math\nfrom collections import defaultdict\nsys.setrecursionlimit(10**6)\ndef read_list():\n    return [int(i) for i in input().split()]\ndef read_single_int():\n    return int(input())\ndef read_single_str():\n    return input()\ndef add_edge(adj, u, v):\n    adj[u].append(v)\n    adj[v].append(u)\ndef dfs(adj, u, par):\n    for v in adj[u]:\n        if v != par:\n            dfs(adj, v, u)\ndef solve(adj, n):\n    dfs(adj, 1, 0)\n    count = 0\n    for u in adj:\n        if len(adj[u]) == 1:\n            count += 1\n    if count == 2:\n        return 0\n    else:\n        return math.ceil((count - 2)/2)\ndef main():\n    n = read_single_int()\n    adj = defaultdict(list)\n    for _ in range(n - 1):\n        u, v = read_list()\n        add_edge(adj, u, v)\n    print(solve(adj, n))\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649723934,
  "object": "edit"
}
2022-04-11 20:39:01.523902 fix syntax errors 2 ["\nimport sys\nimport math\nfrom collections import defaultdict\n\nsys.setrecursionlimit(10**6)\n\ndef read_list():\n    return [int(x) for x in input().split()]\n\ndef read_single_int():\n    return int(read_single_str())\n\ndef read_single_str():\n    return sys.stdin.readline().rstrip()\n\ndef add_edge(adj, u, v):\n    adj[u].append(v)\n    adj[v].append(u)\n\ndef dfs(adj, u, par):\n    for v in adj[u]:\n        if v != par:\n            dfs(adj, v, u)\n\ndef solve(adj, n):\n    dfs(adj, 1, 0)\n    count = 0\n    for u in range(1, n + 1):\n        if len(adj[u]) == 1 and u != 1:\n            count += 1\n    return math.ceil((count - 2)/2)\n\ndef main():\n    n = read_single_int()\n    adj = defaultdict(list)\n    for _ in range(n - 1):\n        u, v = read_list()\n        add_edge(adj, u, v)\n    print(solve(adj, n))\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport math\nfrom collections import defaultdict\nsys.setrecursionlimit(10**6)\ndef read_list():\n    return [int(i) for i in input().split()]\ndef read_single_int():\n    return int(input())\ndef read_single_str():\n    return input()\ndef add_edge(adj, u, v):\n    adj[u].append(v)\n    adj[v].append(u)\ndef dfs(adj, u, par):\n    for v in adj[u]:\n        if v != par:\n            dfs(adj, v, u)\ndef solve(adj, n):\n    dfs(adj, 1, 0)\n    count = 0\n    for u in adj:\n        if len(adj[u]) == 1:\n            count += 1\n    if count == 2:\n        return 0\n    else:\n        return math.ceil((count - 2)/2)\ndef main():\n    n = read_single_int()\n    adj = defaultdict(list)\n    for _ in range(n - 1):\n        u, v = read_list()\n        add_edge(adj, u, v)\n    print(solve(adj, n))\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 20:39:01.523937 size on output set 2
2022-04-11 20:39:01.523954 num operations 2
2022-04-11 20:39:01.523959 size on input set 1
2022-04-11 20:39:03.888547 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# solution\n\n# python3\n\nimport sys\nimport threading\n\nsys.setrecursionlimit(10 ** 7)  # max depth of recursion\nthreading.stack_size(2 ** 27)  # new thread will get stack of such size\n\n\nclass TreeHeight:\n    def __init__(self):\n        self.n = 0\n        self.parent = []\n        self.depth = []\n\n    def read(self):\n        self.n = int(sys.stdin.readline())\n        self.parent = list(map(int, sys.stdin.readline().split()))\n        self.depth = [0] * self.n\n\n    def compute_height(self):\n        for vertex in range(self.n):\n            i = vertex\n            while i != -1:\n                if self.depth[i] != 0:\n                    break\n                self.depth[i] = self.depth[self.parent[i]] + 1\n                i = self.parent[i]\n        return max(self.depth)\n\n\ndef main():\n    tree = TreeHeight()\n    tree.read()\n    print(tree.compute_height())\n\nthreading.Thread(target=main).start()\n"
    },
    {
      "index": 1,
      "text": "\n\n# solution\n\n# python3\n\nimport sys\nimport threading\n\nsys.setrecursionlimit(10 ** 7)  # max depth of recursion\nthreading.stack_size(2 ** 27)  # new thread will get stack of such size\n\n\nclass TreeHeight:\n    def __init__(self):\n        self.n = 0\n        self.parent = []\n        self.depth = []\n\n    def read(self):\n        self.n = int(sys.stdin.readline())\n        self.parent = list(map(int, sys.stdin.readline().split()))\n        self.depth = [0] * self.n\n\n    def compute_height(self):\n        for vertex in range(self.n):\n            i = vertex\n            while i != -1:\n                if self.depth[i] != 0:\n                    break\n                self.depth[i] = self.depth[self.parent[i]] + 1\n                i = self.parent[i]\n        return max(self.depth)\n\n\ndef main():\n    tree = TreeHeight()\n    tree.read()\n    print(tree.compute_height())\n\nthreading.Thread(target=main).start()\n"
    }
  ],
  "created": 1649723941,
  "object": "edit"
}
2022-04-11 20:39:03.888994 fix spelling mistakes 2 ['\n\n# solution\n\n# python3\n\nimport sys\nimport threading\n\nsys.setrecursionlimit(10 ** 7)  # max depth of recursion\nthreading.stack_size(2 ** 27)  # new thread will get stack of such size\n\n\nclass TreeHeight:\n    def __init__(self):\n        self.n = 0\n        self.parent = []\n        self.depth = []\n\n    def read(self):\n        self.n = int(sys.stdin.readline())\n        self.parent = list(map(int, sys.stdin.readline().split()))\n        self.depth = [0] * self.n\n\n    def compute_height(self):\n        for vertex in range(self.n):\n            i = vertex\n            while i != -1:\n                if self.depth[i] != 0:\n                    break\n                self.depth[i] = self.depth[self.parent[i]] + 1\n                i = self.parent[i]\n        return max(self.depth)\n\n\ndef main():\n    tree = TreeHeight()\n    tree.read()\n    print(tree.compute_height())\n\nthreading.Thread(target=main).start()\n', '\n\n# solution\n\n# python3\n\nimport sys\nimport threading\n\nsys.setrecursionlimit(10 ** 7)  # max depth of recursion\nthreading.stack_size(2 ** 27)  # new thread will get stack of such size\n\n\nclass TreeHeight:\n    def __init__(self):\n        self.n = 0\n        self.parent = []\n        self.depth = []\n\n    def read(self):\n        self.n = int(sys.stdin.readline())\n        self.parent = list(map(int, sys.stdin.readline().split()))\n        self.depth = [0] * self.n\n\n    def compute_height(self):\n        for vertex in range(self.n):\n            i = vertex\n            while i != -1:\n                if self.depth[i] != 0:\n                    break\n                self.depth[i] = self.depth[self.parent[i]] + 1\n                i = self.parent[i]\n        return max(self.depth)\n\n\ndef main():\n    tree = TreeHeight()\n    tree.read()\n    print(tree.compute_height())\n\nthreading.Thread(target=main).start()\n']
2022-04-11 20:39:03.889035 size on output set 1
2022-04-11 20:39:03.889047 size on input set 1
2022-04-11 20:39:08.459234 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# solution\n# python3\n\nimport sys\nimport threading\nsys.setrecursionlimit(10 ** 7)  # max depth of recursion\nthreading.stack_size(2 ** 27)  # new thread will get stack of such size\n\nclass TreeHeight:\n    def __init__(self):\n        self.n = 0\n        self.parent = []\n        self.depth = []\n\n    def read(self):\n        self.n = int(sys.stdin.readline())\n        self.parent = list(map(int, sys.stdin.readline().split()))\n        self.depth = [0] * self.n\n\n    def compute_height(self):\n        for vertex in range(self.n):\n            i = vertex\n            while i != -1:\n                if self.depth[i] != 0:\n                    break\n                self.depth[i] = self.depth[self.parent[i]] + 1\n                i = self.parent[i]\n        return max(self.depth)\n\ndef main():\n    tree = TreeHeight()\n    tree.read()\n    print(tree.compute_height())\n\nthreading.Thread(target=main).start()\n"
    },
    {
      "index": 1,
      "text": "\n# solution\n# python3\n\nimport sys\nimport threading\nsys.setrecursionlimit(10 ** 7)  # max depth of recursion\nthreading.stack_size(2 ** 27)  # new thread will get stack of such size\n\nclass TreeHeight:\n    def __init__(self):\n        self.n = 0\n        self.parent = []\n        self.depth = []\n\n    def read(self):\n        self.n = int(sys.stdin.readline())\n        self.parent = list(map(int, sys.stdin.readline().split()))\n        self.depth = [0] * self.n\n\n    def compute_height(self):\n        for vertex in range(self.n):\n            i = vertex\n            while i != -1:\n                if self.depth[i] != 0:\n                    break\n                self.depth[i] = self.depth[self.parent[i]] + 1\n                i = self.parent[i]\n        return max(self.depth)\n\ndef main():\n    tree = TreeHeight()\n    tree.read()\n    print(tree.compute_height())\n\nthreading.Thread(target=main).start()\n"
    }
  ],
  "created": 1649723944,
  "object": "edit"
}
2022-04-11 20:39:08.459547 fix syntax errors 2 ['\n# solution\n# python3\n\nimport sys\nimport threading\nsys.setrecursionlimit(10 ** 7)  # max depth of recursion\nthreading.stack_size(2 ** 27)  # new thread will get stack of such size\n\nclass TreeHeight:\n    def __init__(self):\n        self.n = 0\n        self.parent = []\n        self.depth = []\n\n    def read(self):\n        self.n = int(sys.stdin.readline())\n        self.parent = list(map(int, sys.stdin.readline().split()))\n        self.depth = [0] * self.n\n\n    def compute_height(self):\n        for vertex in range(self.n):\n            i = vertex\n            while i != -1:\n                if self.depth[i] != 0:\n                    break\n                self.depth[i] = self.depth[self.parent[i]] + 1\n                i = self.parent[i]\n        return max(self.depth)\n\ndef main():\n    tree = TreeHeight()\n    tree.read()\n    print(tree.compute_height())\n\nthreading.Thread(target=main).start()\n', '\n# solution\n# python3\n\nimport sys\nimport threading\nsys.setrecursionlimit(10 ** 7)  # max depth of recursion\nthreading.stack_size(2 ** 27)  # new thread will get stack of such size\n\nclass TreeHeight:\n    def __init__(self):\n        self.n = 0\n        self.parent = []\n        self.depth = []\n\n    def read(self):\n        self.n = int(sys.stdin.readline())\n        self.parent = list(map(int, sys.stdin.readline().split()))\n        self.depth = [0] * self.n\n\n    def compute_height(self):\n        for vertex in range(self.n):\n            i = vertex\n            while i != -1:\n                if self.depth[i] != 0:\n                    break\n                self.depth[i] = self.depth[self.parent[i]] + 1\n                i = self.parent[i]\n        return max(self.depth)\n\ndef main():\n    tree = TreeHeight()\n    tree.read()\n    print(tree.compute_height())\n\nthreading.Thread(target=main).start()\n']
2022-04-11 20:39:08.459596 size on output set 1
