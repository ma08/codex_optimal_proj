["\n\ndef main():\n    message = input()\n    half1 = message[:len(message) / 2]\n    half2 = message[len(message) / 2:]\n    \n    sum1 = 0\n    sum2 = 0\n    for i in range(len(half1)):\n        sum1 += ord(half1[i]) - ord('a')\n        sum2 += ord(half2[i]) - ord('a')\n    sum1 = sum1 % 26\n    sum2 = sum2 % 26\n    \n    new1 = \"\"\n    new2 = \"\"\n    for i in range(len(half1)):\n        new1 += chr(((ord(half1[i]) - ord('a') + sum1) % 26) + ord('a'))\n        new2 += chr(((ord(half2[i]) - ord('a') + sum2) % 26) + ord('a'))\n    \n    final = \"\"\n    for i in range(len(new1)):\n        final += chr(((ord(new1[i]) - ord('a') + ord(new2[i]) - ord('a')) % 26) + ord('a'))\n    \n    print(final)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    message = input()\n    left = message[:len(message)//2]\n    right = message[len(message)//2:]\n    left_rotate = sum([(ord(char) - ord('A')) for char in left])\n    right_rotate = sum([(ord(char) - ord('A')) for char in right])\n\n    decrypted = ''\n    for i in range(len(left)):\n        left_char = ord(left[i]) - ord('A')\n        right_char = ord(right[i]) - ord('A')\n        decrypted += chr(((left_char + right_char + right_rotate) % 26) + ord('A'))\n\n    print(decrypted)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef rotate(string, rotationValue):\n\tnewString = \"\"\n\tfor c in string:\n\t\tnewString += chr(((ord(c) - ord('A') + rotationValue) % 26) + ord('A'))\n\treturn newString\n\ndef merge(string1, string2):\n\tnewString = \"\"\n\tfor i in range(len(string1)):\n\t\tnewString += chr(((ord(string1[i]) - ord('A') + ord(string2[i]) - ord('A')) % 26) + ord('A'))\n\treturn newString\n\ndef decrypt(string):\n\tif len(string) % 2 != 0:\n\t\tprint(\"String length must be even\")\n\t\treturn\n\thalf1 = string[:len(string)//2]\n\thalf2 = string[len(string)//2:]\n\trotationValue1 = sum([ord(c) - ord('A') for c in half1])\n\trotationValue2 = sum([ord(c) - ord('A') for c in half2])\n\thalf1 = rotate(half1, rotationValue1)\n\thalf2 = rotate(half2, rotationValue2)\n\treturn merge(half1, half2)\n\ndef main():\n\tfor line in sys.stdin:\n\t\tprint(decrypt(line.strip()))\n\nif __name__ == '__main__':\n\tmain()\n", "\nimport sys\n\ndef rotate(string, rotationValue):\n\tnewString = \"\"\n\tfor c in string:\n\t\tnewString += chr(((ord(c) - ord('A') + rotationValue) % 26) + ord('A'))\n\treturn newString\n\ndef merge(string1, string2):\n\tnewString = \"\"\n\tfor i in range(len(string1)):\n\t\tnewString += chr(((ord(string1[i]) - ord('A') + ord(string2[i]) - ord('A')) % 26) + ord('A'))\n\treturn newString\n\ndef decrypt(string):\n\tif len(string) % 2 != 0:\n\t\tprint(\"String length must be even\")\n\t\treturn\n\thalf1 = string[:len(string)//2]\n\thalf2 = string[len(string)//2:]\n\trotationValue1 = sum([ord(c) - ord('A') for c in half1])\n\trotationValue2 = sum([ord(c) - ord('A') for c in half2])\n\thalf1 = rotate(half1, rotationValue1)\n\thalf2 = rotate(half2, rotationValue2)\n\treturn merge(half1, half2)\n\ndef main():\n\tfor line in sys.stdin:\n\t\tprint(decrypt(line.strip()))\n\nif __name__ == '__main__':\n\tmain()\n", "\n\nimport sys\n\ndef main():\n    message = sys.stdin.readline().rstrip()\n    half = int(len(message)/2)\n    rotate_1 = rotate_2 = 0\n    for i in range(half):\n        rotate_1 += ord(message[i]) - 65\n        rotate_2 += ord(message[half+i]) - 65\n    rotate_1 %= 26\n    rotate_2 %= 26\n    for i in range(half):\n        message = message[:i] + chr((ord(message[i]) - 65 + rotate_1) % 26 + 65) + message[i+1:]\n        message = message[:half+i] + chr((ord(message[half+i]) - 65 + rotate_2) % 26 + 65) + message[half+i+1:]\n    for i in range(half):\n        message = message[:i] + chr((ord(message[i]) - 65 + ord(message[half+i]) - 65) % 26 + 65) + message[i+1:]\n    print(message[:half])\n\nmain()\n", "\nimport sys\nimport math\n\ndef main():\n    message = sys.stdin.readline().strip()\n    half1 = message[:len(message)//2]\n    half2 = message[len(message)//2:]\n    rotate1 = rotate_message(half1)\n    rotate2 = rotate_message(half2)\n    merge_message = merge(rotate1, rotate2)\n    print(merge_message)\n\ndef rotate_message(s):\n    rotate = 0\n    for i in range(len(s)):\n        rotate += ord(s[i]) - ord('A')\n    rotate = rotate % 26\n    rotate_message = ''\n    for i in range(len(s)):\n        rotate_message += chr((ord(s[i]) - ord('A') + rotate) % 26 + ord('A'))\n    return rotate_message\n\ndef merge(s1, s2):\n    merge_message = ''\n    for i in range(len(s1)):\n        merge_message += chr((ord(s1[i]) - ord('A') + ord(s2[i]) - ord('A')) % 26 + ord('A'))\n    return merge_message\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    message = input()\n    message_length = len(message)\n    half_message_length = int(message_length / 2)\n    half_message_1 = message[0:half_message_length]\n    half_message_2 = message[half_message_length:message_length]\n\n    half_message_1_shift = 0\n    half_message_2_shift = 0\n\n    for message_char in half_message_1:\n        half_message_1_shift += ord(message_char) - 65\n    for message_char in half_message_2:\n        half_message_2_shift += ord(message_char) - 65\n\n    half_message_1_shift = half_message_1_shift % 26\n    half_message_2_shift = half_message_2_shift % 26\n\n    half_message_1_shifted = \"\"\n    half_message_2_shifted = \"\"\n\n    for message_char in half_message_1:\n        half_message_1_shifted += chr((ord(message_char) - 65 + half_message_1_shift) % 26 + 65)  # noqa\n    for message_char in half_message_2:\n        half_message_2_shifted += chr((ord(message_char) - 65 + half_message_2_shift) % 26 + 65)  # noqa\n\n    decrypted_message = \"\"\n\n    for i in range(half_message_length):\n        decrypted_message += chr((ord(half_message_1_rotated[i]) - 65 + ord(half_message_2_rotated[i]) - 65) % 26 + 65)\n\n    print(decrypted_message)\n\nif __name__ == '__main__':\n    main()\n", "\ndef divide(text):\n    return text[:len(text) // 2], text[len(text) // 2:]\n\n\ndef rotate(text):\n    total = 0\n    for c in text:\n        total += ord(c) - ord('A')\n\n    return total\n\ndef merge(text1, text2):\n    output = \"\"\n    for i in range(len(text1)):\n        output += chr((ord(text1[i]) - ord('A') + ord(text2[i]) - ord('A')) % 26 + ord('A'))\n    return output\n\nmessage = input()\n\na, b = divide(message)\na = rotate(a)\nb = rotate(b)\nprint(merge(a, b))\n", "import sys\n\ndef main():\n    message = sys.stdin.readline().strip()\n    half1 = message[:len(message) // 2]\n    half2 = message[len(message) // 2:]\n    rotate1 = rotate(half1)\n    rotate2 = rotate(half2)\n    merge = merge(rotate1, rotate2)\n\n    print(merge)\n\ndef rotate(s):\n    rotate_num = 0\n    for i in range(len(s)):\n        rotate_num += ord(s[i]) - ord('A')\n    rotate_num = rotate_num % 26\n    rotate_message = ''\n    for i in range(len(s)):\n        rotate_message += chr((ord(s[i]) - ord('A') + rotate_num) % 26 + ord('A'))\n    return rotate_message\n\n\ndef merge(s1, s2):\n    merge_message = ''\n    for i in range(len(s1)):\n        merge_message += chr((ord(s1[i]) - ord('A') + ord(s2[i]) - ord('A')) % 26 + ord('A'))\n    return merge_message\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    ciphertext = input()\n    ciphertext_length = len(ciphertext)\n    half_ciphertext_length = int(ciphertext_length / 2)\n    half_ciphertext_1 = ciphertext[:half_ciphertext_length]\n    half_ciphertext_2 = ciphertext[half_ciphertext_length:]\n\n    half_ciphertext_1_rotation = 0\n    half_ciphertext_2_rotation = 0\n\n    for ciphertext_char in half_ciphertext_1:\n        half_ciphertext_1_rotation += ord(ciphertext_char) - 65\n    for ciphertext_char in half_ciphertext_2:\n        half_ciphertext_2_rotation += ord(ciphertext_char) - 65\n\n    half_ciphertext_1_rotation = half_ciphertext_1_rotation % 26\n    half_ciphertext_2_rotation = half_ciphertext_2_rotation % 26\n\n    half_ciphertext_1_rotated = \"\"\n    half_ciphertext_2_rotated = \"\"\n\n    for ciphertext_char in half_ciphertext_1:\n        half_ciphertext_1_rotated += chr((ord(ciphertext_char) - 65 + half_ciphertext_1_rotation) % 26 + 65)\n    for ciphertext_char in half_ciphertext_2:\n        half_ciphertext_2_rotated += chr((ord(ciphertext_char) - 65 + half_ciphertext_2_rotation) % 26 + 65)\n\n    plaintext = \"\"\n\n    for i in range(half_ciphertext_length):\n        plaintext += chr((ord(half_ciphertext_1_rotated[i]) - 65 + ord(half_ciphertext_2_rotated[i]) - 65) % 26 + 65)\n\n    print(plaintext)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    message = input()\n    half1 = message[:len(message) // 2]\n    half2 = message[len(message) // 2:]\n    \n    sum1 = 0\n    sum2 = 0\n    for i in range(len(half1)):\n        sum1 += ord(half1[i]) - ord('a')\n        sum2 += ord(half2[i]) - ord('a')\n    sum1 = sum1 % 26\n    sum2 = sum2 % 26\n    \n    new1 = \"\"\n    new2 = \"\"\n    for i in range(len(half1)):\n        new1 += chr(((ord(half1[i]) - ord('a') + sum1) % 26) + ord('a'))\n        new2 += chr(((ord(half2[i]) - ord('a') + sum2) % 26) + ord('a'))\n    \n    final = \"\"\n    for i in range(len(new1)):\n        final += chr(((ord(new1[i]) - ord('a') + ord(new2[i]) - ord('a')) % 26) + ord('a'))\n    \n    print(final)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef divide(text):\n    return text[:len(text)//2], text[len(text)//2:] \n\ndef rotate(text):\n    total = 0\n    for c in text:\n        total += ord(c) - ord('A')\n    return total \n\ndef merge(text1, text2):\n    output = \"\"\n    for i in range(len(text1)):\n        output += chr((ord(text1[i]) - ord('A') + ord(text2[i]) - ord('A')) % 26 + ord('A'))\n    return output \n\nmessage = input() \n\na, b = divide(message) \na = rotate(a) \nb = rotate(b) \nprint(merge(a, b)) \n", "\nimport sys\n\ndef main():\n    message = sys.stdin.readline().rstrip()\n    half = int(len(message)/2)\n    rotate_1 = rotate_2 = 0 \n    for i in range(half):\n        rotate_1 += ord(message[i]) - 65\n        rotate_2 += ord(message[half+i]) - 65\n    rotate_1 %= 26\n    rotate_2 %= 26\n    for i in range(half):\n        message = message[:i] + chr((ord(message[i]) - 65 + rotate_1) % 26 + 65) + message[i+1:]\n        message = message[:half+i] + chr((ord(message[half+i]) - 65 + rotate_2) % 26 + 65) + message[half+i+1:]\n    for i in range(half):\n        message = message[:i] + chr((ord(message[i]) - 65 + ord(message[half+i]) - 65) % 26 + 65) + message[i+1:]\n    print(message[:half])\n\nmain()\n", "\nimport sys\n\ndef rotate(string, rotationValue):\n\tnewString = \"\"\n\tfor c in string:\n\t\tnewString += chr(((ord(c) - ord('A') + rotationValue) % 26) + ord('A')\n\treturn newString\n\ndef merge(string1, string2):\n\tnewString = \"\"\n\tfor i in range(len(string1)):\n\t\tnewString += chr(((ord(string1[i]) - ord('A') + ord(string2[i]) - ord('A')) % 26) + ord('A'))\t\n\treturn newString\n\ndef decrypt(string):\n\tif len(string) % 2 != 0:\n\t\tprint(\"String length must be even.\")\n\t\treturn\n\thalf1 = string[:len(string)//2]\n\thalf2 = string[len(string)//2:]\n\trotationValue1 = sum([ord(c) - ord('A') for c in half1])\n\trotationValue2 = sum([ord(c) - ord('A') for c in half2])\n\thalf1 = rotate(half1, rotationValue1)\n\thalf2 = rotate(half2, rotationValue2)\n\treturn merge(half1, half2)\n\ndef main():\n\tfor line in sys.stdin:\n\t\tprint(decrypt(line.strip()))\n\nif __name__ == '__main__':\n\tmain()\n", "\n\ndef main():\n    ciphertext = input(\"Enter ciphertext: \")\n    ciphertext_length = len(ciphertext)\n    half_ciphertext_length = int(ciphertext_length / 2)\n    half_ciphertext_1 = ciphertext[0:half_ciphertext_length]\n    half_ciphertext_2 = ciphertext[half_ciphertext_length:ciphertext_length]\n\n    half_ciphertext_1_rotation = 0\n    half_ciphertext_2_rotation = 0\n\n    for ciphertext_char in half_ciphertext_1:\n        half_ciphertext_1_rotation += ord(ciphertext_char) - 65\n    for ciphertext_char in half_ciphertext_2:\n        half_ciphertext_2_rotation += ord(ciphertext_char) - 65\n\n    half_ciphertext_1_rotation = half_ciphertext_1_rotation % 26\n    half_ciphertext_2_rotation = half_ciphertext_2_rotation % 26\n\n    half_ciphertext_1_rotated = \"\"\n    half_ciphertext_2_rotated = \"\"\n\n    for ciphertext_char in half_ciphertext_1:\n        half_ciphertext_1_rotated += chr((ord(ciphertext_char) - 65 + half_ciphertext_1_rotation) % 26 + 65)\n    for ciphertext_char in half_ciphertext_2:\n        half_ciphertext_2_rotated += chr((ord(ciphertext_char) - 65 + half_ciphertext_2_rotation) % 26 + 65)\n\n    plaintext = \"\"\n\n    for i in range(half_ciphertext_length):\n        plaintext += chr((ord(half_ciphertext_1_rotated[i]) - 65 + ord(half_ciphertext_2_rotated[i]) - 65) % 26 + 65)\n\n    print(plaintext)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef divide(string):\n    return string[:len(string)//2], string[len(string)//2:]\n\ndef rotate(string):\n    total = 0\n    for c in string:\n        total += ord(c) - ord('A')\n    return total\n\ndef merge(string1, string2):\n    output = \"\"\n    for i in range(len(string1)):\n        output += chr((ord(string1[i]) - ord('A') + ord(string2[i]) - ord('A')) % 26 + ord('A'))\n    return output\n\nmessage = input()\n\na, b = divide(message)\na = rotate(a)\nb = rotate(b)\nprint(merge(a, b))\n", "\ndef main():\n    message = input()\n    left = message[:len(message)//2]\n    right = message[len(message)//2:]\n    left_rotate = sum([(ord(char) - ord('A')) for char in left]) % 26\n    right_rotate = sum([(ord(char) - ord('A')) for char in right]) % 26\n\n    decrypted = ''\n    for i in range(len(left)):\n        left_char = (ord(left[i]) - ord('A') - left_rotate) % 26\n        right_char = (ord(right[i]) - ord('A') - right_rotate) % 26\n        decrypted += chr(((left_char + right_char) % 26) + ord('A'))\n\n    print(decrypted)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    message = input()\n    left = message[:len(message) // 2]\n    right = message[len(message) // 2:]\n    left_rotate = sum([(ord(char) - ord('A')) for char in left]) % 26\n    right_rotate = sum([(ord(char) - ord('A')) for char in right]) % 26\n\n    decrypted = ''\n    for i in range(len(left)):\n        left_char = ord(left[i]) - ord('A')\n        right_char = ord(right[i]) - ord('A')\n\n        decrypted += chr(((left_char + right_char + right_rotate) % 26) + ord('A'))\n\n    print(decrypted)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    message = input()\n    half1 = message[:len(message) // 2]\n    half2 = message[len(message) // 2:]\n    \n    sum1 = 0\n    sum2 = 0\n    for i in range(len(half1)):\n        sum1 += ord(half1[i]) - ord('A')\n        sum2 += ord(half2[i]) - ord('A')\n    sum1 = sum1 % 26 + 1\n    sum2 = sum2 % 26 + 1\n    \n    new1 = \"\"\n    new2 = \"\"\n    for i in range(len(half1)):\n        new1 += chr(((ord(half1[i]) - ord('A') + sum1) % 26) + ord('A'))\n        new2 += chr(((ord(half2[i]) - ord('A') + sum2) % 26) + ord('A'))\n    \n    final = \"\"\n    for i in range(len(new1)):\n        final += chr(((ord(new1[i]) - ord('A') + ord(new2[i]) - ord('A')) % 26) + ord('A'))\n    \n    print(final)\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef main():\n    message = sys.stdin.readline().rstrip()\n    half = int(len(message)/2)\n    rotate_1 = rotate_2 = 0 \n    for i in range(half):\n        rotate_1 += ord(message[i]) - 65\n        rotate_2 += ord(message[half+i]) - 65\n    rotate_1 %= 26\n    rotate_2 %= 26\n    for i in range(half):\n        message = message[:i] + chr((ord(message[i]) - 65 + rotate_1) % 26 + 65) + message[i+1:]\n        message = message[:half+i] + chr((ord(message[half+i]) - 65 + rotate_2) % 26 + 65) + message[half+i+1:]\n    for i in range(half):\n        message = message[:i] + chr((ord(message[i]) - 65 + ord(message[half+i]) - 65) % 26 + 65) + message[i+1:]\n    print(message[:half])\n\nmain()\n", "\n\ndef main():\n    message = raw_input()\n    half1 = message[:len(message)//2]\n    half2 = message[len(message)//2:]\n    \n    sum1 = 0\n    sum2 = 0\n    for i in range(len(half1)):\n        sum1 += ord(half1[i]) - ord('A')\n        sum2 += ord(half2[i]) - ord('A')\n    sum1 = sum1 % 26 + 1\n    sum2 = sum2 % 26 + 1\n    \n    new1 = \"\"\n    new2 = \"\"\n    for i in range(len(half1)):\n        new1 += chr(((ord(half1[i]) - ord('A') + sum1) % 26) + ord('A'))\n        new2 += chr(((ord(half2[i]) - ord('A') + sum2) % 26) + ord('A'))\n    \n    final = \"\"\n    for i in range(len(new1)):\n        final += chr(((ord(new1[i]) - ord('A') + ord(new2[i]) - ord('A')) % 26) + ord('A'))\n    \n    print(final)\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef rotate(string, rotationValue):\n\tnewString = \"\"\n\tfor c in string:\n\t\tnewString += chr(((ord(c) - ord('A') + rotationValue) % 26) + ord('A')) \n\treturn newString\n\ndef merge(string1, string2):\n\tnewString = \"\"\n\tfor i in range(len(string1)):\n\t\tnewString += chr(((ord(string1[i]) - ord('A') + ord(string2[i]) - ord('A')) % 26) + ord('A')) \n\treturn newString\n\ndef decrypt(string):\n\tif len(string) % 2 != 0:\n\t\tprint(\"String length must be even.\")\n\t\treturn\n\thalf1 = string[:len(string)//2]\n\thalf2 = string[len(string)//2:]\n\trotationValue1 = sum([ord(c) - ord('A') for c in half1])\n\trotationValue2 = sum([ord(c) - ord('A') for c in half2])\n\thalf1 = rotate(half1, rotationValue1)\n\thalf2 = rotate(half2, rotationValue2)\n\treturn merge(half1, half2)\n\ndef main():\n\tfor line in sys.stdin:\n\t\tprint(decrypt(line.strip()))\n\nif __name__ == '__main__':\n\tmain()\n", "\n\ndef encrypt(msg):\n    msg_len = len(msg)\n    half = msg_len // 2\n    msg1 = msg[:half]\n    msg2 = msg[half:]\n\n    rotation1 = 0\n    for c in msg1:\n        rotation1 += ord(c) - ord('A')\n    rotation1 %= 26\n\n    rotation2 = 0\n    for c in msg2:\n        rotation2 += ord(c) - ord('A')\n    rotation2 %= 26\n\n    msg1 = ''.join(chr((ord(c) - ord('A') + rotation1) % 26 + ord('A')) for c in msg1)\n    msg2 = ''.join(chr((ord(c) - ord('A') + rotation2) % 26 + ord('A')) for c in msg2)\n\n\n    return ''.join(chr((ord(c1) - ord('A') + ord(c2) - ord('A')) % 26 + ord('A')) for c1, c2 in zip(msg1, msg2))\n\ndef main():\n    msg = input()\n    print(encrypt(msg))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    message = input()\n    message_length = len(message)\n    half_message_length = int(message_length / 2)\n    half_message_1 = message[0:half_message_length]\n    half_message_2 = message[half_message_length:message_length]\n\n    half_message_1_shift = 0\n    half_message_2_shift = 0\n\n    for message_char in half_message_1:\n        half_message_1_shift += ord(message_char) - 65\n    for message_char in half_message_2:\n        half_message_2_shift += ord(message_char) - 65\n\n    half_message_1_shift = half_message_1_shift % 26\n    half_message_2_shift = half_message_2_shift % 26\n\n    half_message_1_shifted = \"\"\n    half_message_2_shifted = \"\"\n\n    for message_char in half_message_1:\n        half_message_1_shifted += chr((ord(message_char) - 65 + half_message_1_shift) % 26 + 65) \n    for message_char in half_message_2:\n        half_message_2_shifted += chr((ord(message_char) - 65 + half_message_2_shift) % 26 + 65)\n\n    decrypted_message = \"\"\n\n    for i in range(half_message_length): \n        decrypted_message += chr((ord(half_message_1_shifted[i]) - 65 + ord(half_message_2_shifted[i]) - 65) % 26 + 65)\n\n    print(decrypted_message)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    message = sys.stdin.readline().rstrip()\n    half = int(len(message)/2)\n    rotate_1 = rotate_2 = 0\n    for i in range(half):\n        rotate_1 += ord(message[i]) - 65\n        rotate_2 += ord(message[half+i]) - 65\n    rotate_1 %= 26\n    rotate_2 %= 26\n    for i in range(half):\n        message = message[:i] + chr((ord(message[i]) - 65 + rotate_1) % 26 + 65) + message[i+1:]\n        message = message[:half+i] + chr((ord(message[half+i]) - 65 + rotate_2) % 26 + 65) + message[half+i+1:]\n    for i in range(half): \n        message = message[:i] + chr((ord(message[i]) - 65 + ord(message[half+i]) - 65) % 26 + 65) + message[i+1:]\n    print(message[:half])\n\nmain()\n", "\n\ndef main():\n    message = input()\n    left = message[:len(message)//2]\n    right = message[len(message)//2:]\n    left_rotate = sum([ord(char) - ord('A') for char in left]) % 26\n    right_rotate = sum([ord(char) - ord('A') for char in right]) % 26\n\n    decrypted = ''\n    for i in range(len(left)):\n        left_char = (ord(left[i]) - ord('A') - left_rotate) % 26\n        right_char = (ord(right[i]) - ord('A') - right_rotate) % 26\n        decrypted += chr(((left_char + right_char) % 26) + ord('A'))\n\n    print(decrypted)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef encrypt(msg):\n    msg_len = len(msg)  # length of the message\n    half = msg_len // 2  # half of the message\n    msg1 = msg[:half]  # first half of the message\n    msg2 = msg[half:]  # second half of the message\n\n    rotation1 = 0  # rotation for the first half\n    for c in msg1:\n        rotation1 += ord(c) - ord('A')\n    rotation1 %= 26\n\n    rotation2 = 0  # rotation for the second half\n    for c in msg2:\n        rotation2 += ord(c) - ord('A')\n    rotation2 %= 26\n\n    msg1 = ''.join(chr((ord(c) - ord('A') + rotation1) % 26 + ord('A')) for c in msg1)\n    msg2 = ''.join(chr((ord(c) - ord('A') + rotation2) % 26 + ord('A')) for c in msg2)\n\n\n    return ''.join(chr((ord(c1) - ord('A') + ord(c2) - ord('A')) % 26 + ord('A')) for c1, c2 in zip(msg1, msg2))  # return the encrypted message\n\ndef main():\n    msg = input()  # get the message\n    print(encrypt(msg))  # print the encrypted message\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    message = sys.stdin.readline().strip()\n    half1 = message[:len(message)//2]\n    half2 = message[len(message)//2:]\n    rotate1 = rotate(half1, half2)\n    rotate2 = rotate(half2, half1)\n    merge = merge(rotate1, rotate2, half1, half2)\n\n    print(merge)\n\ndef rotate(s1, s2):\n    rotate = 0\n    for i in range(len(s1)):\n        rotate += ord(s1[i]) - ord('A')\n    rotate = rotate % 26\n    rotate_message = ''\n    for i in range(len(s1)):\n        rotate_message += chr((ord(s1[i]) - ord('A') + rotate) % 26 + ord('A'))\n    return rotate_message\n\n\n\ndef merge(s1, s2, s3, s4):\n    merge_message = ''\n    for i in range(len(s3)):\n        merge_message += chr((ord(s1[i]) - ord('A') + ord(s2[i]) - ord('A')) % 26 + ord('A') + ord(s3[i]) - ord('A') + ord(s4[i]) - ord('A'))\n    return merge_message\n\n\nif __name__ == '__main__':\n    main()\n"]