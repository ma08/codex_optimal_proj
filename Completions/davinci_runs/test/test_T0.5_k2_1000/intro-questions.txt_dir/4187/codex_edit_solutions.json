["n = int(input())\na = list(map(int, input().split()))\n\nmax_rest = 0\nrest = 0\nfor i in a:\n    if i == 0:\n        max_rest = max(max_rest, rest)\n        rest = 0\n    else:\n        rest += 1\n\nmax_rest = max(max_rest, rest)\nprint(max_rest)\n", "\n\nn = int(input())\na = list(map(int, input().split()))\n\n# Find the first 0\ni = 0\nwhile a[i] == 1:\n    i += 1\n\n# Find the maximum length of 1s\nmax_length = 0\nlength = 0\nfor j in range(i, n):\n    if a[j] == 1:\n        length += 1\n    else:\n        max_length = max(max_length, length)\n        length = 0\nmax_length = max(max_length, length)\n\n# Add the rest of the 1s\nmax_length += sum(a[:i])\n\nprint(max_length)\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Thu Jul  2 18:16:50 2020\n\n\n@author: karanwaghela\n\"\"\"\n\ndef max_subarray(A):\n    max_ending_here = max_so_far = A[0]\n    for x in A[1:]:\n        max_ending_here = max(x, max_ending_here + x)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n\n\ndef max_subarray_circular(A):\n    max_subarray_val = max_subarray(A)\n    \n    circular_sum = 0\n    for i in range(len(A)):\n        circular_sum += A[i]\n        A[i] = -A[i]\n    circular_sum += max_subarray(A)\n    \n    if circular_sum > max_subarray_val and circular_sum != 0:\n        return circular_sum\n    else:\n        return max_subarray_val\n\n\nif __name__ == \"__main__\":\n    A = [2, -2, 2, 7, 8, 0]\n    print(max_subarray_circular(A))\n", "n = int(input())\na = list(map(int, input().split()))\n\nmax_rest = 0\nrest = 0\n\nfor i in a:\n    if i == 0:\n        max_rest = max(max_rest, rest)\n        rest = 0\n    else:\n        rest += 1\n\nmax_rest = max(max_rest, rest)\nprint(max_rest)\n\n\n"]