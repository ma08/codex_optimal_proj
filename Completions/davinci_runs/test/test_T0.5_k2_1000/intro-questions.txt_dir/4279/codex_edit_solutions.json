["\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        k = int(input())\n        print(find(k, 0))\n\ndef find(k, num):\n    if k == 1:\n        return 1\n    if k == 2:\n        return 1\n    if k == 3:\n        return 2\n\n    while num < k:\n        num += 1\n        if num == k:\n            return 1\n        num += 1\n        if num == k:\n            return 1\n        num += 1\n        if num == k:\n            return 2\n        num += 1\n        if num == k:\n            return 3\n        num += 1\n        if num == k:\n            return 3\n        num += 1\n        if num == k:\n            return 4\n        num += 1\n        if num == k:\n            return 4\n        num += 1\n        if num == k:\n            return 5\n        num += 1\n        if num == k:\n            return 5\n        num += 1\n        if num == k:\n            return 6\n    \n    return find(k - num + 1, num)\n\nif __name__ == '__main__':\n    main()\n", "import math\n\ndef count_digits(n):\n    digits = 0\n    while n > 0:\n        n = n // 10\n        digits += 1\n    return digits\n\ndef find_digit(n):\n    if n == 1:\n        return 1\n    digits = count_digits(n)\n    group_len = 9 * 10**(digits - 1) * digits\n    groups = math.ceil(n / group_len)\n    group_num = n % group_len\n    if group_num == 0:\n        group_num = group_len\n    num = group_num - 1\n    num_in_group = math.ceil(num / digits)\n    num_in_group_pos = num % digits\n    if num_in_group_pos == 0:\n        num_in_group_pos = digits\n    return int(str(num_in_group)[num_in_group_pos-1])\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        print(find_digit(n))\n", "\nimport math\n\ndef count_digits(n):\n    digits = 0\n    while n > 0:\n        n = n // 10\n        digits += 1\n    return digits\n\ndef find_digit(n):\n    if n == 1:\n        return 1\n    digits = count_digits(n)\n    group_size = 9 * 10 ** (digits - 1) * digits\n    groups = math.ceil(n / group_size)\n    group_number = n % group_size\n    if group_number == 0:\n        group_number = group_size\n    num = group_number - 1\n    num_in_group = math.ceil(num / digits)\n    num_in_group_pos = num % digits\n    if num_in_group_pos == 0:\n        num_in_group_pos = digits\n    return int(str(num_in_group)[num_in_group_pos - 1])\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        print(find_digit(n))\n", "\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(find(a))\n\ndef find(a):\n    return 1\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    q = int(input())\n    for i in range(q):\n        k = int(input())\n        print(find(k, 1))\n\ndef find(k, i):\n    if k == 1:\n        return i\n    if k == 2:\n        return i\n    if k == 3:\n        return i + 1\n    \n    if k <= i * 6:\n        return find(k, i)\n    else:\n        return find(k - i * 6, i + 1)\n    \n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\ndef count_digits(n):\n    digits = 0\n    while n > 0:\n        n = n // 10\n        digits += 1\n    return digits\n\ndef find_digit(n):\n    if n == 1:\n        return 1\n    digits = count_digits(n)\n    group_len = 9 * 10 ** (digits - 1) * digits\n    groups = math.ceil(n / group_len)\n    group_num = n % group_len + 1\n    if group_num == 0:\n        group_num = group_len\n    num = group_num\n    num_in_group = math.ceil(num / digits)\n    num_in_group_pos = num % digits\n    if num_in_group_pos == 0:\n        num_in_group_pos = digits\n    return int(str(num_in_group)[num_in_group_pos - 1])\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        print(find_digit(n))\n", "\n\ndef main():\n    n = int(input())\n    for i in range(n):\n        s = input()\n        print(find(s))\n\ndef find(s):\n    return s\n\nif __name__ == '__main__':\n    main()\n"]