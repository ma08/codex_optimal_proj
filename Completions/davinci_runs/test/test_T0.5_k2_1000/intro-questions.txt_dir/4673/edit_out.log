2022-04-11 21:51:06.414049 num operations 2
2022-04-11 21:51:06.414075 size on input set 1
2022-04-11 21:51:08.845638 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "from operator import itemgetter\ndef person_lister(f):\n    def inner(people):\n        return map(f,sorted(people,key=lambda x: int(x[2])))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return (\"Mr. \" if person[3] == \"M\" else \"Ms. \") + person[0] + \" \" + person[1]\nif __name__ == '__main__':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep='\\n')\n"
    },
    {
      "index": 1,
      "text": "#decorator\nfrom operator import itemgetter\ndef person_lister(f):\n    def inner(people):\n        return map(f,sorted(people,key=lambda x: int(x[2])))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return (\"Mr. \" if person[3] == \"M\" else \"Ms. \") + person[0] + \" \" + person[1]\n\nif __name__ == '__main__':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep='\\n')\n"
    }
  ],
  "created": 1649728267,
  "object": "edit"
}
2022-04-11 21:51:08.845880 fix spelling mistakes 2 ['from operator import itemgetter\ndef person_lister(f):\n    def inner(people):\n        return map(f,sorted(people,key=lambda x: int(x[2])))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return ("Mr. " if person[3] == "M" else "Ms. ") + person[0] + " " + person[1]\nif __name__ == \'__main__\':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep=\'\\n\')\n', '#decorator\nfrom operator import itemgetter\ndef person_lister(f):\n    def inner(people):\n        return map(f,sorted(people,key=lambda x: int(x[2])))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return ("Mr. " if person[3] == "M" else "Ms. ") + person[0] + " " + person[1]\n\nif __name__ == \'__main__\':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep=\'\\n\')\n']
2022-04-11 21:51:08.845917 size on output set 2
2022-04-11 21:51:08.845925 size on input set 2
2022-04-11 21:51:19.498085 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#decorator 2\nclass Person:\n    def __init__(self, firstName, lastName, idNumber):\n        self.firstName = firstName\n        self.lastName = lastName\n        self.idNumber = idNumber\n    def printPerson(self):\n        print(\"Name:\", self.lastName + \",\", self.firstName)\n        print(\"ID:\", self.idNumber)\n\nclass Student(Person):\n    def __init__(self, firstName, lastName, idNumber, scores):\n        Person.__init__(self, firstName, lastName, idNumber)\n        self.scores = scores\n    def calculate(self):\n        avg = sum(scores) / len(scores)\n        if avg >= 90:\n            return 'O'\n        elif avg >= 80:\n            return 'E'\n        elif avg >= 70:\n            return 'A'\n        elif avg >= 55:\n            return 'P'\n        elif avg >= 40:\n            return 'D'\n        else:\n            return 'T'\n\nif __name__ == '__main__':\n    line = input().split()\n    firstName = line[0]\n    lastName = line[1]\n    idNum = line[2]\n    numScores = int(input()) # not needed for Python\n    scores = list( map(int, input().split()) )\n    s = Student(firstName, lastName, idNum, scores)\n    s.printPerson()\n    print(\"Grade:\", s.calculate())\n"
    },
    {
      "index": 1,
      "text": "#decorator \nfrom operator import itemgetter\ndef person_lister(f):\n    def inner(people):\n        return map(f,sorted(people,key=lambda x: int(x[2])))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return (\"Mr. \" if person[3] == \"M\" else \"Ms. \") + person[0] + \" \" + person[1]\n\nif __name__ == '__main__':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep='\\n')\n"
    }
  ],
  "created": 1649728269,
  "object": "edit"
}
2022-04-11 21:51:19.498310 fix syntax errors 2 ['#decorator 2\nclass Person:\n    def __init__(self, firstName, lastName, idNumber):\n        self.firstName = firstName\n        self.lastName = lastName\n        self.idNumber = idNumber\n    def printPerson(self):\n        print("Name:", self.lastName + ",", self.firstName)\n        print("ID:", self.idNumber)\n\nclass Student(Person):\n    def __init__(self, firstName, lastName, idNumber, scores):\n        Person.__init__(self, firstName, lastName, idNumber)\n        self.scores = scores\n    def calculate(self):\n        avg = sum(scores) / len(scores)\n        if avg >= 90:\n            return \'O\'\n        elif avg >= 80:\n            return \'E\'\n        elif avg >= 70:\n            return \'A\'\n        elif avg >= 55:\n            return \'P\'\n        elif avg >= 40:\n            return \'D\'\n        else:\n            return \'T\'\n\nif __name__ == \'__main__\':\n    line = input().split()\n    firstName = line[0]\n    lastName = line[1]\n    idNum = line[2]\n    numScores = int(input()) # not needed for Python\n    scores = list( map(int, input().split()) )\n    s = Student(firstName, lastName, idNum, scores)\n    s.printPerson()\n    print("Grade:", s.calculate())\n', '#decorator \nfrom operator import itemgetter\ndef person_lister(f):\n    def inner(people):\n        return map(f,sorted(people,key=lambda x: int(x[2])))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return ("Mr. " if person[3] == "M" else "Ms. ") + person[0] + " " + person[1]\n\nif __name__ == \'__main__\':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep=\'\\n\')\n']
2022-04-11 21:51:23.451955 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "def person_lister(f):\n    def inner(people):\n        return map(f,sorted(people,key=lambda x: int(x[2])))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return (\"Mr. \" if person[3] == \"M\" else \"Ms. \") + person[0] + \" \" + person[1] \nif __name__ == '__main__':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep='\\n')\n"
    },
    {
      "index": 1,
      "text": "from operator import itemgetter\ndef person_lister(f):\n    def inner(people):\n        return map(f, sorted(people, key=lambda x: int(x[2])))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return (\"Mr. \" if person[3] == \"M\" else \"Ms. \") + person[0] + \" \" + person[1]\n\nif __name__ == '__main__':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep='\\n')\n"
    }
  ],
  "created": 1649728280,
  "object": "edit"
}
2022-04-11 21:51:23.452254 fix syntax errors 2 ['def person_lister(f):\n    def inner(people):\n        return map(f,sorted(people,key=lambda x: int(x[2])))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return ("Mr. " if person[3] == "M" else "Ms. ") + person[0] + " " + person[1] \nif __name__ == \'__main__\':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep=\'\\n\')\n', 'from operator import itemgetter\ndef person_lister(f):\n    def inner(people):\n        return map(f, sorted(people, key=lambda x: int(x[2])))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return ("Mr. " if person[3] == "M" else "Ms. ") + person[0] + " " + person[1]\n\nif __name__ == \'__main__\':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep=\'\\n\')\n']
2022-04-11 21:51:23.452301 size on output set 4
2022-04-11 21:51:23.452333 num operations 2
2022-04-11 21:51:23.452343 size on input set 1
2022-04-11 21:51:26.575263 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef person_lister(f):\n    def inner(people):\n        # complete the function\n        return map(f, sorted(people, key=lambda x: int(x[2])))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return (\"Mr. \" if person[3] == \"M\" else \"Ms. \") + person[0] + \" \" + person[1]\n\nif __name__ == '__main__':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep='\\n')\n"
    },
    {
      "index": 1,
      "text": "\n\ndef person_lister(f):\n    def inner(people):\n        # complete the function\n        return map(f,sorted(people,key=lambda x: int(x[2])))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return (\"Mr. \" if person[3] == \"M\" else \"Ms. \") + person[0] + \" \" + person[1] \n\nif __name__ == '__main__':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep='\\n')\n"
    }
  ],
  "created": 1649728283,
  "object": "edit"
}
2022-04-11 21:51:26.575758 fix spelling mistakes 2 ['\n\ndef person_lister(f):\n    def inner(people):\n        # complete the function\n        return map(f, sorted(people, key=lambda x: int(x[2])))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return ("Mr. " if person[3] == "M" else "Ms. ") + person[0] + " " + person[1]\n\nif __name__ == \'__main__\':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep=\'\\n\')\n', '\n\ndef person_lister(f):\n    def inner(people):\n        # complete the function\n        return map(f,sorted(people,key=lambda x: int(x[2])))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return ("Mr. " if person[3] == "M" else "Ms. ") + person[0] + " " + person[1] \n\nif __name__ == \'__main__\':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep=\'\\n\')\n']
2022-04-11 21:51:26.575801 size on output set 2
2022-04-11 21:51:26.575811 size on input set 2
2022-04-11 21:51:30.798320 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef person_lister(f):\n    def inner(people):\n        # complete the function\n        return map(f, sorted(people, key=lambda x: int(x[2])))\n\n    return inner\n\n@person_lister\ndef name_format(person):\n    return (\"Mr. \" if person[3] == \"M\" else \"Ms. \") + person[0] + \" \" + person[1]\n\n\nif __name__ == '__main__':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep='\\n')\n"
    },
    {
      "index": 1,
      "text": "\n\ndef person_lister(f):\n    def inner(people):\n        # complete the function\n        return map(f, sorted(people, key=lambda x: int(x[2])))\n\n    return inner\n\n@person_lister\ndef name_format(person):\n    return (\"Mr. \" if person[3] == \"M\" else \"Ms. \") + person[0] + \" \" + person[1]\n\n\nif __name__ == '__main__':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep='\\n')\n"
    }
  ],
  "created": 1649728286,
  "object": "edit"
}
2022-04-11 21:51:30.798736 fix syntax errors 2 ['\n\ndef person_lister(f):\n    def inner(people):\n        # complete the function\n        return map(f, sorted(people, key=lambda x: int(x[2])))\n\n    return inner\n\n@person_lister\ndef name_format(person):\n    return ("Mr. " if person[3] == "M" else "Ms. ") + person[0] + " " + person[1]\n\n\nif __name__ == \'__main__\':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep=\'\\n\')\n', '\n\ndef person_lister(f):\n    def inner(people):\n        # complete the function\n        return map(f, sorted(people, key=lambda x: int(x[2])))\n\n    return inner\n\n@person_lister\ndef name_format(person):\n    return ("Mr. " if person[3] == "M" else "Ms. ") + person[0] + " " + person[1]\n\n\nif __name__ == \'__main__\':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep=\'\\n\')\n']
2022-04-11 21:51:33.935942 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef person_lister(f):\n    def inner(people):\n        # complete the function\n        return list(map(f, sorted(people, key=lambda x: int(x[2]))))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return (\"Mr. \" if person[3] == \"M\" else \"Ms. \") + person[0] + \" \" + person[1]\n\nif __name__ == '__main__':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep='\\n')\n"
    },
    {
      "index": 1,
      "text": "\n\ndef person_lister(f):\n    def inner(people):\n        # complete the function\n        return map(f, sorted(people, key=lambda x: int(x[2])))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return (\"Mr. \" if person[3] == \"M\" else \"Ms. \") + person[0] + \" \" + person[1] \n\nif __name__ == '__main__':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep='\\n')\n"
    }
  ],
  "created": 1649728290,
  "object": "edit"
}
2022-04-11 21:51:33.936155 fix syntax errors 2 ['\n\ndef person_lister(f):\n    def inner(people):\n        # complete the function\n        return list(map(f, sorted(people, key=lambda x: int(x[2]))))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return ("Mr. " if person[3] == "M" else "Ms. ") + person[0] + " " + person[1]\n\nif __name__ == \'__main__\':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep=\'\\n\')\n', '\n\ndef person_lister(f):\n    def inner(people):\n        # complete the function\n        return map(f, sorted(people, key=lambda x: int(x[2])))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return ("Mr. " if person[3] == "M" else "Ms. ") + person[0] + " " + person[1] \n\nif __name__ == \'__main__\':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep=\'\\n\')\n']
2022-04-11 21:51:33.936189 size on output set 3
