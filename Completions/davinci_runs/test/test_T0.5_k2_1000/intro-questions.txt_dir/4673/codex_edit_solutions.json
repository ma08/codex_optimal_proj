["#decorator 2\nclass Person:\n    def __init__(self, firstName, lastName, idNumber):\n        self.firstName = firstName\n        self.lastName = lastName\n        self.idNumber = idNumber\n    def printPerson(self):\n        print(\"Name:\", self.lastName + \",\", self.firstName)\n        print(\"ID:\", self.idNumber)\n\nclass Student(Person):\n    def __init__(self, firstName, lastName, idNumber, scores):\n        Person.__init__(self, firstName, lastName, idNumber)\n        self.scores = scores\n    def calculate(self):\n        avg = sum(scores) / len(scores)\n        if avg >= 90:\n            return 'O'\n        elif avg >= 80:\n            return 'E'\n        elif avg >= 70:\n            return 'A'\n        elif avg >= 55:\n            return 'P'\n        elif avg >= 40:\n            return 'D'\n        else:\n            return 'T'\n\nif __name__ == '__main__':\n    line = input().split()\n    firstName = line[0]\n    lastName = line[1]\n    idNum = line[2]\n    numScores = int(input()) # not needed for Python\n    scores = list( map(int, input().split()) )\n    s = Student(firstName, lastName, idNum, scores)\n    s.printPerson()\n    print(\"Grade:\", s.calculate())\n", "\n\ndef person_lister(f):\n    def inner(people):\n        # complete the function\n        return map(f, sorted(people, key=lambda x: int(x[2])))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return (\"Mr. \" if person[3] == \"M\" else \"Ms. \") + person[0] + \" \" + person[1] \n\nif __name__ == '__main__':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep='\\n')\n", "\n\ndef person_lister(f):\n    def inner(people):\n        # complete the function\n        return map(f, sorted(people, key=lambda x: int(x[2])))\n\n    return inner\n\n@person_lister\ndef name_format(person):\n    return (\"Mr. \" if person[3] == \"M\" else \"Ms. \") + person[0] + \" \" + person[1]\n\n\nif __name__ == '__main__':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep='\\n')\n", "#decorator \nfrom operator import itemgetter\ndef person_lister(f):\n    def inner(people):\n        return map(f,sorted(people,key=lambda x: int(x[2])))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return (\"Mr. \" if person[3] == \"M\" else \"Ms. \") + person[0] + \" \" + person[1]\n\nif __name__ == '__main__':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep='\\n')\n", "from operator import itemgetter\ndef person_lister(f):\n    def inner(people):\n        return map(f, sorted(people, key=lambda x: int(x[2])))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return (\"Mr. \" if person[3] == \"M\" else \"Ms. \") + person[0] + \" \" + person[1]\n\nif __name__ == '__main__':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep='\\n')\n", "\n\ndef person_lister(f):\n    def inner(people):\n        # complete the function\n        return list(map(f, sorted(people, key=lambda x: int(x[2]))))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return (\"Mr. \" if person[3] == \"M\" else \"Ms. \") + person[0] + \" \" + person[1]\n\nif __name__ == '__main__':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep='\\n')\n", "def person_lister(f):\n    def inner(people):\n        return map(f,sorted(people,key=lambda x: int(x[2])))\n    return inner\n\n@person_lister\ndef name_format(person):\n    return (\"Mr. \" if person[3] == \"M\" else \"Ms. \") + person[0] + \" \" + person[1] \nif __name__ == '__main__':\n    people = [input().split() for i in range(int(input()))]\n    print(*name_format(people), sep='\\n')\n"]