["\n\nfrom collections import defaultdict\n\n\ndef find_ladica(ladice, i):\n    if ladice[i[0]] == 0:\n        return i[0]\n    elif ladice[i[1]] == 0:\n        return i[1]\n    else:\n        return 0\n\n\ndef find_possible_ladica(ladice, i):\n    for k in range(len(ladice)):\n        if ladice[k] == 0:\n            continue\n        if ladice[k] == i[0]:\n            return k\n        elif ladice[k] == i[1]:\n            return k\n        else:\n            continue\n    return 0\n\n\ndef find_ladica_from_ladica(ladice, i):\n    a = i[0]\n    b = i[1]\n    while True:\n        if ladice[a] == 0:\n            return a\n        elif ladice[b] == 0:\n            return b\n        else:\n            a = ladice[a]\n            b = ladice[b]\n            if a == b:\n                return 0\n            continue\n\n\ndef find_ladica_from_ladica2(ladice, i):\n    a = i[0]\n    b = i[1]\n    while True:\n        if ladice[a] == 0:\n            return a\n        elif ladice[b] == 0:\n            return b\n        else:\n            if ladice[a] == i[0]:\n                return a\n            elif ladice[b] == i[1]:\n                return b\n            else:\n                a = ladice[a]\n                b = ladice[b]\n                if a == b:\n                    return 0\n                continue\n\n\ndef find_ladica_from_ladica3(ladice, i):\n    a = i[0]\n    b = i[1]\n    while True:\n        if ladice[a] == 0:\n            return a\n        elif ladice[b] == 0:\n            return b\n        else:\n            if ladice[ladice[a]] == 0:\n                return ladice[a]\n            elif ladice[ladice[b]] == 0:\n                return ladice[b]\n            else:\n                a = ladice[a]\n                b = ladice[b]\n                if a == b:\n                    return 0\n                continue\n\n\ndef find_ladica_from_ladica4(ladice, i):\n    a = i[0]\n    b = i[1]\n    while True:\n        if ladice[a] == 0:\n            return a\n        elif ladice[b] == 0:\n            return b\n        else:\n            if ladice[ladice[a]] == a:\n                return ladice[a]\n            elif ladice[ladice[b]] == b:\n                return ladice[b]\n            else:\n                a = ladice[a]\n                b = ladice[b]\n                if a == b:\n                    return 0\n                continue\n\n\ndef find_ladica_from_ladica5(ladice, i):\n    a = i[0]\n    b = i[1]\n    while True:\n        if ladice[a] == 0:\n            return a\n        elif ladice[b] == 0:\n            return b\n        else:\n            if ladice[ladice[a]] == a and ladice[a] != i[0]:\n                return ladice[a]\n            elif ladice[ladice[b]] == b and ladice[b] != i[1]:\n                return ladice[b]\n            else:\n                a = ladice[a]\n                b = ladice[b]\n                if a == b:\n                    return 0\n                continue\n\n\ndef find_ladica_from_ladica6(ladice, i):\n    a = i[0]\n    b = i[1]\n    while True:\n        if ladice[a] == 0:\n            return a\n        elif ladice[b] == 0:\n            return b\n        else:\n            if ladice[ladice[a]] == a and ladice[a] != i[0] and ladice[a] != i[1]:\n                return ladice[a]\n            elif ladice[ladice[b]] == b and ladice[b] != i[0] and ladice[b] != i[1]:\n                return ladice[b]\n            else:\n                a = ladice[a]\n                b = ladice[b]\n                if a == b:\n                    return 0\n                continue\n\n\ndef find_ladica_from_ladica7(ladice, i):\n    a = i[0]\n    b = i[1]\n    while True:\n        if ladice[a] == 0:\n            return a\n        elif ladice[b] == 0:\n            return b\n        else:\n            if ladice[ladice[a]] == a and ladice[a] != i[0] and ladice[a] != i[1] and ladice[a] != ladice[b]:\n                return ladice[a]\n            elif ladice[ladice[b]] == b and ladice[b] != i[0] and ladice[b] != i[1] and ladice[a] != ladice[b]:\n                return ladice[b]\n            else:\n                a = ladice[a]\n                b = ladice[b]\n                if a == b:\n                    return 0\n                continue\n\n\ndef find_ladica_from_ladica8(ladice, i):\n    a = i[0]\n    b = i[1]\n    while True:\n        if ladice[a] == 0:\n            return a\n        elif ladice[b] == 0:\n            return b\n        else:\n            if ladice[ladice[a]] == a and ladice[a] != i[0] and ladice[a] != i[1] and ladice[a] != ladice[b] and ladice[ladice[a]] != ladice[b]:\n                return ladice[a]\n            elif ladice[ladice[b]] == b and ladice[b] != i[0] and ladice[b] != i[1] and ladice[a] != ladice[b] and ladice[ladice[a]] != ladice[b]:\n                return ladice[b]\n            else:\n                a = ladice[a]\n                b = ladice[b]\n                if a == b:\n                    return 0\n                continue\n\n\ndef find_ladica_from_ladica9(ladice, i):\n    a = i[0]\n    b = i[1]\n    while True:\n        if ladice[a] == 0:\n            return a\n        elif ladice[b] == 0:\n            return b\n        else:\n            if ladice[ladice[a]] == a and ladice[a] != i[0] and ladice[a] != i[1] and ladice[a] != ladice[b] and ladice[ladice[a]] != ladice[b] and ladice[ladice[a]] != ladice[a]:\n                return ladice[a]\n            elif ladice[ladice[b]] == b and ladice[b] != i[0] and ladice[b] != i[1] and ladice[a] != ladice[b] and ladice[ladice[a]] != ladice[b] and ladice[ladice[b]] != ladice[b]:\n                return ladice[b]\n            else:\n                a = ladice[a]\n                b = ladice[b]\n                if a == b:\n                    return 0\n                continue\n\n\ndef find_ladica_from_ladica10(ladice, i):\n    a = i[0]\n    b = i[1]\n    while True:\n        if ladice[a] == 0:\n            return a\n        elif ladice[b] == 0:\n            return b\n        else:\n            if ladice[ladice[a]] == a and ladice[a] != i[0] and ladice[a] != i[1] and ladice[a] != ladice[b] and ladice[ladice[a]] != ladice[b] and ladice[ladice[a]] != ladice[a] and ladice[ladice[a]] != i[0] and ladice[ladice[a]] != i[1]:\n                return ladice[a]\n            elif ladice[ladice[b]] == b and ladice[b] != i[0] and ladice[b] != i[1] and ladice[a] != ladice[b] and ladice[ladice[a]] != ladice[b] and ladice[ladice[b]] != ladice[b] and ladice[ladice[b]] != i[0] and ladice[ladice[b]] != i[1]:\n                return ladice[b]\n            else:\n                a = ladice[a]\n                b = ladice[b]\n                if a == b:\n                    return 0\n                continue\n\n\nN, L = map(int, input().split())\nladice = [0] * L\nfor i in range(N):\n    A, B = map(int, input().split())\n    if find_ladica(ladice, (A, B)) != 0:\n        ladica = find_ladica(ladice, (A, B))\n        ladice[ladica] = i + 1\n        print(\"LADICA\")\n        continue\n    elif find_ladica_from_ladica(ladice, (A, B)) != 0:\n        ladica = find_ladica_from_ladica(ladice, (A, B))\n        ladice[ladica] = i + 1\n        print(\"LADICA\")\n        continue\n    elif find_ladica_from_ladica2(ladice, (A, B)) != 0:\n        ladica = find_ladica_from_ladica2(ladice, (A, B))\n        ladice[ladica] = i + 1\n        print(\"LADICA\")\n        continue\n    elif find_ladica_from_ladica3(ladice, (A, B)) != 0:\n        ladica = find_ladica_from_ladica3(ladice, (A, B))\n        ladice[ladica] = i + 1\n        print(\"LADICA\")\n        continue\n    elif find_ladica_from_ladica4(ladice, (A, B)) != 0:\n        ladica = find_ladica_from_ladica4(ladice, (A, B))\n        ladice[ladica] = i + 1\n        print(\"LADICA\")\n        continue\n    elif find_ladica_from_ladica5(ladice, (A, B)) != 0:\n        ladica = find_ladica_from_ladica5(ladice, (A, B))\n        ladice[ladica] = i + 1\n        print(\"LADICA\")\n        continue\n    elif find_ladica_from_ladica6(ladice, (A, B)) != 0:\n        ladica = find_ladica_from_ladica6(ladice, (A, B))\n        ladice[ladica] = i + 1\n        print(\"LADICA\")\n        continue\n    elif find_ladica_from_ladica7(ladice, (A, B)) != 0:\n        ladica = find_ladica_from_ladica7(ladice, (A, B))\n        ladice[ladica] = i + 1\n        print(\"LADICA\")\n        continue\n    elif find_ladica_from_ladica8(ladice, (A, B)) != 0:\n        ladica = find_ladica_from_ladica8(ladice, (A, B))\n        ladice[ladica] = i + 1\n        print(\"LADICA\")\n        continue\n    elif find_ladica_from_ladica9(ladice, (A, B)) != 0:\n        ladica = find_ladica_from_ladica9(ladice, (A, B))\n        ladice[ladica] = i + 1\n        print(\"LADICA\")\n        continue\n    elif find_ladica_from_ladica10(ladice, (A, B)) != 0:\n        ladica = find_ladica_from_ladica10(ladice, (A, B))\n        ladice[ladica] = i + 1\n        print(\"LADICA\")\n        continue\n    else:\n        print(\"SMECE\")\n        continue", "\n\nN, L = map(int, input().split())\n\ndrawers = [[] for _ in range(L)]\n\nfor i in range(N):\n    A, B = map(int, input().split())\n    drawers[A-1].append(i)\n    drawers[B-1].append(i)\n\nvisited = [False] * N\nstored = [False] * N\n\ndef move(i, drawer):\n    while drawers[drawer-1] != []:\n        previous = drawers[drawer-1][-1]\n        if visited[previous]:\n            return False\n        visited[previous] = True\n        drawer = A[previous] if drawer == B[previous] else B[previous]\n    return True\n\nfor i in range(N):\n    if stored[i]:\n        continue\n    if drawers[A[i]-1] == []:\n        stored[i] = True\n        continue\n    if drawers[B[i]-1] == []:\n        stored[i] = True\n        continue\n    visited[i] = True\n    if move(i, A[i]):\n        stored[i] = True\n        continue\n    if move(i, B[i]):\n        stored[i] = True\n        continue\n\nfor i in range(N):\n    if stored[i]:\n        print(\"LADICA\")\n    else:\n        print(\"SMECE\")", "\n\nimport sys\nimport heapq\n\ndef main():\n    N, L = map(int, sys.stdin.readline().split())\n    drawers = [[] for i in range(L)]\n    for i in range(N):\n        A, B = map(int, sys.stdin.readline().split())\n        drawers[A-1].append(B-1)\n        drawers[B-1].append(A-1)\n    heap = []\n    for i in range(L):\n        heapq.heappush(heap, (-len(drawers[i]), i))\n    items = []\n    while heap:\n        count, index = heapq.heappop(heap)\n        if count < -1:\n            heapq.heappush(heap, (count+1, index))\n            continue\n        items.append(index)\n        for i in drawers[index]:\n            if i not in items:\n                heapq.heappush(heap, (-len(drawers[i]), i))\n    for i in range(N):\n        A, B = map(int, sys.stdin.readline().split())\n        A, B = A-1, B-1\n        if A in items:\n            print(\"LADICA\")\n        elif B in items:\n            print(\"LADICA\")\n        else:\n            print(\"SMECE\")\n\nmain()", "\n\nimport sys\n\ndef main():\n    N, L = map(int, sys.stdin.readline().split())\n    drawers = [None for _ in range(L + 1)]\n    for i in range(1, N + 1):\n        A, B = map(int, sys.stdin.readline().split())\n        if drawers[A] == None:\n            drawers[A] = i\n        elif drawers[B] == None:\n            drawers[B] = i\n        else:\n            A_i = A\n            A_i_moved = False\n            B_i = B\n            B_i_moved = False\n            while True:\n                if not A_i_moved:\n                    A_i_moved = True\n                    if drawers[A_i] == i:\n                        print(\"SMECE\")\n                        break\n                    if drawers[A_i] == None:\n                        drawers[A_i] = i\n                        print(\"LADICA\")\n                        break\n                    if drawers[drawers[A_i]] == None:\n                        drawers[drawers[A_i]] = i\n                        print(\"LADICA\")\n                        break\n                    A_i = drawers[A_i]\n                elif not B_i_moved:\n                    B_i_moved = True\n                    if drawers[B_i] == i:\n                        print(\"SMECE\")\n                        break\n                    if drawers[B_i] == None:\n                        drawers[B_i] = i\n                        print(\"LADICA\")\n                        break\n                    if drawers[drawers[B_i]] == None:\n                        drawers[drawers[B_i]] = i\n                        print(\"LADICA\")\n                        break\n                    B_i = drawers[B_i]\n                else:\n                    print(\"SMECE\")\n                    break\n\nif __name__ == \"__main__\":\n    main()", "\n\ndef main():\n    n, l = map(int, input().split())\n    drawers = [None] * l\n    for _ in range(n):\n        a, b = map(int, input().split())\n        a -= 1\n        b -= 1\n        if drawers[a] is None:\n            drawers[a] = b\n            print('LADICA')\n        elif drawers[b] is None:\n            drawers[b] = a\n            print('LADICA')\n        else:\n            visited = set()\n            while True:\n                if drawers[a] is None:\n                    drawers[a] = b\n                    print('LADICA')\n                    break\n                elif drawers[b] is None:\n                    drawers[b] = a\n                    print('LADICA')\n                    break\n                elif (a, b) in visited:\n                    print('SMECE')\n                    break\n                else:\n                    visited.add((a, b))\n                    a, b = drawers[a], drawers[b]\n\n\nif __name__ == '__main__':\n    main()", "\n\nN, L = map(int, input().split())\n\ndrawers = [None] * L\n\nfor _ in range(N):\n    A, B = map(int, input().split())\n    if drawers[A - 1] is None:\n        drawers[A - 1] = 1\n        print(\"LADICA\")\n    elif drawers[B - 1] is None:\n        drawers[B - 1] = 1\n        print(\"LADICA\")\n    else:\n        i = A - 1\n        seen = set()\n        while i != B - 1 and i not in seen:\n            seen.add(i)\n            if drawers[i] == 1:\n                i = drawers[i]\n            else:\n                i = drawers[i]\n        if i == B - 1:\n            print(\"SMECE\")\n        else:\n            drawers[i] = 1\n            print(\"LADICA\")", "\n\n#import sys\n#import os\n\n#sys.stdin = open(os.path.join(sys.path[0], 'in.txt'))\n\ndef main():\n    n, l = map(int, input().split())\n    drawers = [None] * l\n    for i in range(n):\n        a, b = map(int, input().split())\n        if drawers[a - 1] is None:\n            drawers[a - 1] = i + 1\n        elif drawers[b - 1] is None:\n            drawers[b - 1] = i + 1\n        else:\n            current = drawers[a - 1]\n            next = drawers[current - 1]\n            while next != current:\n                if drawers[next - 1] is None:\n                    drawers[next - 1] = i + 1\n                    break\n                current = next\n                next = drawers[current - 1]\n            else:\n                current = drawers[b - 1]\n                next = drawers[current - 1]\n                while next != current:\n                    if drawers[next - 1] is None:\n                        drawers[next - 1] = i + 1\n                        break\n                    current = next\n                    next = drawers[current - 1]\n                else:\n                    print(\"SMECE\")\n                    continue\n        print(\"LADICA\")\n\nmain()", "\n\nimport sys\n\n# TODO: Finish this.\n\ndef main():\n    line = sys.stdin.readline().split()\n    N = int(line[0])\n    L = int(line[1])\n    drawers = [[] for _ in range(L)]\n    for _ in range(N):\n        line = sys.stdin.readline().split()\n        drawers[int(line[0]) - 1].append(int(line[1]) - 1)\n        drawers[int(line[1]) - 1].append(int(line[0]) - 1)\n    move_count = 0\n    while True:\n        move_count += 1\n        for drawer in drawers:\n            if len(drawer) == 2:\n                if len(drawers[drawer[0]]) > 1 and len(drawers[drawer[1]]) > 1:\n                    drawers[drawer[0]].remove(drawer[1])\n                    drawers[drawer[1]].remove(drawer[0])\n                    drawers[drawer[0]].append(drawer[0])\n                    drawers[drawer[1]].append(drawer[1])\n                    break\n            elif len(drawer) == 1:\n                for other in drawers[drawer[0]]:\n                    if len(drawers[other]) == 1:\n                        drawers[other].append(other)\n                        drawers[drawer[0]].remove(other)\n                        break\n                else:\n                    break\n        else:\n            break\n    for drawer in drawers:\n        if len(drawer) == 2:\n            print(\"LADICA\")\n        else:\n            print(\"SMECE\")\n\nif __name__ == \"__main__\":\n    main()"]