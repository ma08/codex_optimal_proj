2022-04-09 20:19:58.251206 """
You are given an integer $n$.

You can perform any of the following operations with this number an arbitrary (possibly, zero) number of times:   Replace $n$ with $\frac{n}{2}$ if $n$ is divisible by $2$;  Replace $n$ with $\frac{2n}{3}$ if $n$ is divisible by $3$;  Replace $n$ with $\frac{4n}{5}$ if $n$ is divisible by $5$. 

For example, you can replace $30$ with $15$ using the first operation, with $20$ using the second operation or with $24$ using the third operation.

Your task is to find the minimum number of moves required to obtain $1$ from $n$ or say that it is impossible to do it.

You have to answer $q$ independent queries.


-----Input-----

The first line of the input contains one integer $q$ ($1 \le q \le 1000$) â€” the number of queries.

The next $q$ lines contain the queries. For each query you are given the integer number $n$ ($1 \le n \le 10^{18}$).


-----Output-----

Print the answer for each query on a new line. If it is impossible to obtain $1$ from $n$, print -1. Otherwise, print the minimum number of moves required to do it.


-----Example-----
Input
7
1
10
25
30
14
27
1000000000000000000

Output
0
4
6
6
-1
6
72
"""
2022-04-09 20:19:58.251223 --------------------------
2022-04-09 20:20:15.992761 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nimport math\n\ndef calculate(n):\n    if n == 1:\n        return 0\n\n    if n % 2 == 0:\n        return 1 + calculate(n/2)\n    if n % 3 == 0:\n        return 1 + calculate(2*n/3)\n    if n % 5 == 0:\n        return 1 + calculate(4*n/5)\n    return -1\n\nq = int(input())\n\nfor i in range(q):\n    n = int(input())\n    print(calculate(n))"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\n# TODO\n# def solve(n):\n#     if n == 1:\n#         return 0\n#     if n % 2 == 0:\n#         return 1 + solve(n / 2)\n#     if n % 3 == 0:\n#         return 1 + solve(2 * n / 3)\n#     if n % 5 == 0:\n#         return 1 + solve(4 * n / 5)\n#     return -1\n\n# def solve(n):\n#     if n == 1:\n#         return 0\n#     if n % 2 == 0:\n#         return 1 + solve(n / 2)\n#     if n % 3 == 0:\n#         return 1 + solve(2 * n / 3)\n#     if n % 5 == 0:\n#         return 1 + solve(4 * n / 5)\n#     return -1\n\ndef solve(n):\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return 1 + solve(n / 2)\n    if n % 3 == 0:\n        return 1 + solve(2 * n / 3)\n    if n % 5 == 0:\n        return 1 + solve(4 * n / 5)\n    return -1\n\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        print(solve(n))\n\n\nif __name__ == '__main__':\n    main()"
    }
  ],
  "created": 1649549998,
  "id": "cmpl-4vFb4h3oe5wMCmlprHYdb2uBZSgbV",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 20:20:15.993021 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nimport math\n\ndef calculate(n):\n    if n == 1:\n        return 0\n\n    if n % 2 == 0:\n        return 1 + calculate(n/2)\n    if n % 3 == 0:\n        return 1 + calculate(2*n/3)\n    if n % 5 == 0:\n        return 1 + calculate(4*n/5)\n    return -1\n\nq = int(input())\n\nfor i in range(q):\n    n = int(input())\n    print(calculate(n))"
}
2022-04-09 20:20:15.993070 REASON stop
2022-04-09 20:20:15.994244 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\n# TODO\n# def solve(n):\n#     if n == 1:\n#         return 0\n#     if n % 2 == 0:\n#         return 1 + solve(n / 2)\n#     if n % 3 == 0:\n#         return 1 + solve(2 * n / 3)\n#     if n % 5 == 0:\n#         return 1 + solve(4 * n / 5)\n#     return -1\n\n# def solve(n):\n#     if n == 1:\n#         return 0\n#     if n % 2 == 0:\n#         return 1 + solve(n / 2)\n#     if n % 3 == 0:\n#         return 1 + solve(2 * n / 3)\n#     if n % 5 == 0:\n#         return 1 + solve(4 * n / 5)\n#     return -1\n\ndef solve(n):\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return 1 + solve(n / 2)\n    if n % 3 == 0:\n        return 1 + solve(2 * n / 3)\n    if n % 5 == 0:\n        return 1 + solve(4 * n / 5)\n    return -1\n\n\ndef main():\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        print(solve(n))\n\n\nif __name__ == '__main__':\n    main()"
}
2022-04-09 20:20:15.994315 REASON stop
