["# compute the area of the triangle\nimport sys\n\n\ndef area(a, b, c):\n    return abs(a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2\n\n\n# check if the point P is inside the triangle\n\ndef contains(a, b, c, p):\n    return area(a, b, c) == area(a, b, p) + area(a, p, c) + area(p, b, c)\n\n\na = tuple(map(int, sys.stdin.readline().split()))\nb = tuple(map(int, sys.stdin.readline().split()))\nc = tuple(map(int, sys.stdin.readline().split()))\n\nN = int(sys.stdin.readline())\n\ncount = 0\nfor i in range(N):\n    p = tuple(map(int, sys.stdin.readline().split()))\n    if contains(a, b, c, p):\n        count += 1\n\nprint(\"%.1f\" % area(a, b, c))\nprint(count)\n", "\n\ndef point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n    if (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0 and (x3 - x2) * (y - y2) - (x - x2) * (y3 - y2) > 0 and (x1 - x3) * (y - y3) - (x - x3) * (y1 - y3) > 0:\n        return True\n\n    return False\n\ndef main():\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    x3, y3 = map(int, input().split())\n    n = int(input())\n    count = 0\n    for _ in range(n):\n        x, y = map(int, input().split())\n        if point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2)\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\ndef area(x1, y1, x2, y2, x3, y3):\n    return abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2.0\n\ndef inside(x1, y1, x2, y2, x3, y3, x, y):\n    A = area(x1, y1, x2, y2, x3, y3)\n    A1 = area(x, y, x2, y2, x3, y3)\n    A2 = area(x1, y1, x, y, x3, y3)\n    A3 = area(x1, y1, x2, y2, x, y)\n    return A == A1 + A2 + A3\n\nx1, y1 = [int(i) for i in input().split()]\nx2, y2 = [int(i) for i in input().split()]\nx3, y3 = [int(i) for i in input().split()]\n\nn = int(input())\ntrees = []\nfor i in range(n):\n    x, y = [int(i) for i in input().split()]\n    trees.append((x, y))\n\nA = area(x1, y1, x2, y2, x3, y3)\ncount = 0\nfor x, y in trees:\n    if inside(x1, y1, x2, y2, x3, y3, x, y):\n        count += 1\n\nprint(\"%.1f\" % A)\nprint(count)\n", "\n\nimport sys\nimport math\n\ndef is_inside(x, y, x1, y1, x2, y2, x3, y3):\n    area1 = abs(x*(y2-y3) + x2*(y3-y) + x3*(y-y2))/2\n    area2 = abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n    area3 = abs(x1*(y-y3) + x*(y3-y1) + x3*(y1-y))/2\n    area4 = abs(x1*(y2-y) + x2*(y-y1) + x*(y1-y2))/2\n    if (area1 + area2 + area3 + area4) == math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2:\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, sys.stdin.readline().rstrip().split())\n    x2, y2 = map(int, sys.stdin.readline().rstrip().split())\n    x3, y3 = map(int, sys.stdin.readline().rstrip().split())\n    n = int(sys.stdin.readline().rstrip())\n    count = 0\n    for i in range(n):\n        x, y = map(int, sys.stdin.readline().rstrip().split())\n        if is_inside(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2.0)\n    print(count)\n\nmain()\n", "\ndef point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n    # print(x, y, x1, y1, x2, y2, x3, y3)\n    if (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0 and (x3 - x2) * (y - y2) - (x - x2) * (y3 - y2) > 0 and (x1 - x3) * (y - y3) - (x - x3) * (y1 - y3) > 0:\n        return True\n\n    return False\n\ndef main():\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    x3, y3 = map(int, input().split())\n    n = int(input())\n    count = 0\n    for _ in range(n):\n        x, y = map(int, input().split())\n        if point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2.0)\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n    if (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0 and \\\n    (x3 - x2) * (y - y2) - (x - x2) * (y3 - y2) > 0 and \\\n    (x1 - x3) * (y - y3) - (x - x3) * (y1 - y3) > 0:\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    x3, y3 = map(int, input().split())\n    n = int(input())\n    count = 0\n    for _ in range(n):\n        x, y = map(int, input().split())\n        if point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2)\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef compute_area_triangle(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2.0)\n\ndef is_inside(a, b, c, tree):\n    area = compute_area_triangle(a, b, c)\n    area_a = compute_area_triangle(a, b, tree)\n    area_b = compute_area_triangle(a, c, tree)\n    area_c = compute_area_triangle(b, c, tree)\n    if area == area_a + area_b + area_c:\n        return True\n    return False\n\ndef main():\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    n = int(input())\n    trees = []\n    for i in range(n):\n        trees.append([int(x) for x in input().split()])\n    count = 0\n    for tree in trees:\n        if is_inside(a, b, c, tree):\n            count += 1\n    area = compute_area_triangle(a, b, c)\n    print(\"{:.1f}\".format(area), end=\" \")\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nfrom sys import stdin\nfrom math import fabs\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2\n\ndef main():\n    x1, y1 = [float(x) for x in stdin.readline().split()]\n    x2, y2 = [float(x) for x in stdin.readline().split()]\n    x3, y3 = [float(x) for x in stdin.readline().split()]\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        x, y = [float(x) for x in stdin.readline().split()]\n        a1 = area(x1, y1, x2, y2, x, y)\n        a2 = area(x1, y1, x3, y3, x, y)\n        a3 = area(x2, y2, x3, y3, x, y)\n        a = area(x1, y1, x2, y2, x3, y3)\n        if a1 + a2 + a3 == a:\n            count += 1\n    print(\"%.1f\" % a)\n    print(count)\n\nmain()\n", "\n\nfrom sys import stdin, stdout\nimport math\n\ndef is_on_line(p1, p2, p3):\n    return math.fabs((p2[1] - p1[1]) * (p3[0] - p2[0]) - (p3[1] - p2[1]) * (p2[0] - p1[0])) < 1e-5\n\ndef is_in_triangle(p1, p2, p3, p):\n    return is_on_line(p1, p2, p) or is_on_line(p2, p3, p) or is_on_line(p3, p1, p)\n\ndef main():\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        p = list(map(int, stdin.readline().split()))\n        if is_in_triangle(a, b, c, p):\n            count += 1\n    s = math.fabs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n    stdout.write('{:.1f}\\n{}\\n'.format(s, count))\n\nif __name__ == '__main__':\n    main()\n", "\n# comment 2\nfrom sys import stdin\n\ndef area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n\ndef point_in_triangle(a, b, c, p):\n    a1 = area(a, b, p)\n    a2 = area(a, c, p)\n    a3 = area(b, c, p)\n    return abs(a1 + a2 + a3 - area(a, b, c)) < 0.000001\n\na = tuple(map(int, stdin.readline().split()))\nb = tuple(map(int, stdin.readline().split()))\nc = tuple(map(int, stdin.readline().split()))\n\nn = int(stdin.readline())\n\ntrees = 0\nfor _ in range(n):\n    p = tuple(map(int, stdin.readline().split()))\n    if point_in_triangle(a, b, c, p):\n        trees += 1\n\nprint(\"{:.1f}\".format(area(a, b, c)))\nprint(trees)\n", "\n\nfrom sys import stdin, stdout\nimport math\n\ndef is_on_line(p1, p2, p3, eps=1e-5):\n    return math.fabs((p2[1] - p1[1]) * (p3[0] - p2[0]) - (p3[1] - p2[1]) * (p2[0] - p1[0])) < eps\n\ndef is_in_triangle(p1, p2, p3, p4, eps=1e-5):\n    return is_on_line(p1, p2, p4, eps) or is_on_line(p2, p3, p4, eps) or is_on_line(p3, p1, p4, eps)\n\ndef main():\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        p = list(map(int, stdin.readline().split()))\n        if is_in_triangle(a, b, c, p, eps=1e-1):\n            count += 1\n    s = math.fabs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n    stdout.write('{:.1f}\\n{}\\n'.format(s, count))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef compute_area(a, b, c):  # \u8ba1\u7b97\u4e09\u89d2\u5f62\u9762\u79ef\uff0c\u8f93\u5165\u4e3a\u4e09\u4e2a\u70b9\u7684\u5750\u6807\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n\ndef is_inside(a, b, c, tree):  # \u5224\u65ad\u6811\u662f\u5426\u5728\u4e09\u89d2\u5f62\u5185\n    area = compute_area(a, b, c)\n    area_a = compute_area(a, b, tree)\n    area_b = compute_area(a, c, tree)\n    area_c = compute_area(b, c, tree)\n    if area == area_a + area_b + area_c:\n        return True\n    return False\n\ndef main():\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    n = int(input())\n    trees = []\n    for i in range(n):\n        trees.append([int(x) for x in input().split()])\n    count = 0\n    for tree in trees:\n        if is_inside(a, b, c, tree):\n            count += 1\n    area = compute_area(a, b, c)\n    print(\"{:.1f}\".format(area))\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\nfrom sys import stdin\nfrom math import fabs\n\ndef area(x1, y1, x2, y2, x3, y3):\n    return fabs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2\n\ndef main():\n    x1, y1 = [int(x) for x in stdin.readline().split()]\n    x2, y2 = [int(x) for x in stdin.readline().split()]\n    x3, y3 = [int(x) for x in stdin.readline().split()]\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        x, y = [int(x) for x in stdin.readline().split()]\n        a1 = area(x1, y1, x2, y2, x, y)\n        a2 = area(x1, y1, x3, y3, x, y)\n        a3 = area(x2, y2, x3, y3, x, y)\n        a = area(x1, y1, x2, y2, x3, y3)\n        if a1 + a2 + a3 == a:\n            count += 1\n    print(\"%.1f\" % (a))\n    print(count)\n\nmain()\n", "\nfrom sys import stdin\ndef area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\ndef point_inside_triangle(a, b, c, p):\n    a1 = area(a, b, p)\n    a2 = area(a, c, p)\n    a3 = area(b, c, p)\n    return abs(a1 + a2 + a3 - area(a, b, c)) < 0.000001\n\na = tuple(map(int, stdin.readline().split()))\nb = tuple(map(int, stdin.readline().split()))\nc = tuple(map(int, stdin.readline().split()))\n\nn = int(stdin.readline())\n\ntrees = 0\nfor _ in range(n):\n    p = tuple(map(int, stdin.readline().split()))\n    if point_inside_triangle(a, b, c, p):\n        trees += 1\n\nprint(\"{:.1f}\".format(area(a, b, c)))\nprint(trees)\n", "\n\ndef area(x1, y1, x2, y2, x3, y3): \n    return abs((x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2.0) \n\ndef inside(x1, y1, x2, y2, x3, y3, x, y): \n    A = area(x1, y1, x2, y2, x3, y3) \n    A1 = area(x, y, x2, y2, x3, y3) \n    A2 = area(x1, y1, x, y, x3, y3) \n    A3 = area(x1, y1, x2, y2, x, y) \n    if(A == A1 + A2 + A3): \n        return True\n    else: \n        return False\n\nx1, y1 = [int(i) for i in input().split()]\nx2, y2 = [int(i) for i in input().split()]\nx3, y3 = [int(i) for i in input().split()]\n\nn = int(input())\ntrees = []\nfor i in range(n):\n    x, y = [int(i) for i in input().split()]\n    trees.append((x, y))\n\nA = area(x1, y1, x2, y2, x3, y3)\ncount = 0\nfor x, y in trees:\n    if inside(x1, y1, x2, y2, x3, y3, x, y):\n        count += 1\n\nprint(\"%.1f\" % A)\nprint(count)\n", "\nfrom sys import stdin\n\ndef area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n\ndef point_inside_triangle(a, b, c, p):\n    a1 = area(a, b, p)\n    a2 = area(a, c, p)\n    a3 = area(b, c, p)\n    return abs(a1 + a2 + a3 - area(a, b, c)) < 0.000001\n\na = tuple(map(int, stdin.readline().split()))\nb = tuple(map(int, stdin.readline().split()))\nc = tuple(map(int, stdin.readline().split()))\n\nn = int(stdin.readline())\n\ntrees = 0\nfor _ in range(n):\n    p = tuple(map(int, stdin.readline().split()))\n    if point_inside_triangle(a, b, c, p):\n        trees += 1\n\nprint(\"{:.1f}\".format(area(a, b, c)))\nprint(trees)\n", "\nimport sys\nimport math\n\ndef is_inside(x, y, x1, y1, x2, y2, x3, y3):\n    area1 = abs(x*(y2-y3) + x2*(y3-y) + x3*(y-y2))/2\n    area2 = abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n    area3 = abs(x1*(y-y3) + x*(y3-y1) + x3*(y1-y))/2\n    area4 = abs(x1*(y2-y) + x2*(y-y1) + x*(y1-y2))/2\n    if (area1 + area2 + area3 + area4) == math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2: # TODO: fix syntax error\n        return True\n    return False\n\ndef main():\n    x1, y1 = map(int, sys.stdin.readline().rstrip().split())\n    x2, y2 = map(int, sys.stdin.readline().rstrip().split())\n    x3, y3 = map(int, sys.stdin.readline().rstrip().split())\n    n = int(sys.stdin.readline().rstrip())\n    count = 0\n    for i in range(n):\n        x, y = map(int, sys.stdin.readline().rstrip().split())\n        if is_inside(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(math.fabs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2) # TODO: fix syntax error\n    print(count)\n\nmain()\n", "\n\ndef point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n    # print(x, y, x1, y1, x2, y2, x3, y3)\n    if (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0 and (x3 - x2) * (y - y2) - (x - x2) * (y3 - y2) > 0 and (x1 - x3) * (y - y3) - (x - x3) * (y1 - y3) > 0:\n        return True\n\n    return False\n\ndef main():\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    x3, y3 = map(int, input().split())\n    n = int(input())\n    count = 0\n    for _ in range(n):\n        x, y = map(int, input().split())\n        if point_in_triangle(x, y, x1, y1, x2, y2, x3, y3):\n            count += 1\n    print(abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2.0)\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef compute_area(a, b, c):  # \u8ba1\u7b97\u4e09\u89d2\u5f62\u9762\u79ef\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2)\n\ndef is_inside(a, b, c, tree):  # \u5224\u65ad\u6811\u662f\u5426\u5728\u4e09\u89d2\u5f62\u5185\n    area = compute_area(a, b, c)\n    area_a = compute_area(a, b, tree)\n    area_b = compute_area(a, c, tree)\n    area_c = compute_area(b, c, tree)\n    if area == area_a + area_b + area_c:\n        return True\n    return False\n\ndef main():\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    n = int(input())\n    trees = []\n    for i in range(n):\n        trees.append([int(x) for x in input().split()])\n    count = 0\n    for tree in trees:\n        if is_inside(a, b, c, tree):\n            count += 1\n    print(\"{:.1f}\".format(compute_area(a, b, c)))\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\ndef area(x1, y1, x2, y2, x3, y3): \n    return abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2.0)\n\n\ndef inside(x1, y1, x2, y2, x3, y3, x, y):\n    A = area(x1, y1, x2, y2, x3, y3)\n    A1 = area(x, y, x2, y2, x3, y3)\n    A2 = area(x1, y1, x, y, x3, y3)\n    A3 = area(x1, y1, x2, y2, x, y)\n    if A == A1 + A2 + A3:\n        return True\n    else:\n        return False\n\nx1, y1 = [int(i) for i in input().split()]\nx2, y2 = [int(i) for i in input().split()]\nx3, y3 = [int(i) for i in input().split()]\n\nn = int(input())\ntrees = []\nfor i in range(n):\n    x, y = [int(i) for i in input().split()]\n    trees.append((x, y))\n\nA = area(x1, y1, x2, y2, x3, y3)\ncount = 0\nfor x, y in trees:\n    if inside(x1, y1, x2, y2, x3, y3, x, y):\n        count += 1\n\nprint(\"%.1f\" % A)\nprint(count)\n", "\n# file\nimport sys\n\ndef area(A, B, C):\n    return abs(A[0]*(B[1] - C[1]) + B[0]*(C[1] - A[1]) + C[0]*(A[1] - B[1]))/2\n\ndef contains(A, B, C, P):\n    return area(A, B, C) == area(A, B, P) + area(A, P, C) + area(P, B, C)\n\nA = tuple(map(int, sys.stdin.readline().split()))\nB = tuple(map(int, sys.stdin.readline().split()))\nC = tuple(map(int, sys.stdin.readline().split()))\n\nN = int(sys.stdin.readline())\n\ncount = 0\nfor i in range(N):\n    P = tuple(map(int, sys.stdin.readline().split()))\n    if contains(A, B, C, P):\n        count += 1\n\nprint(\"%.1f\" % area(A, B, C))\nprint(count)\n", "def area(x1, y1, x2, y2, x3, y3):\n    return abs(x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2\n\ndef inside(x1, y1, x2, y2, x3, y3, x, y):\n    A = area(x1, y1, x2, y2, x3, y3)\n    A1 = area(x, y, x2, y2, x3, y3)\n    A2 = area(x1, y1, x, y, x3, y3)\n    A3 = area(x1, y1, x2, y2, x, y)\n    return A == A1 + A2 + A3\n\nx1, y1 = [int(i) for i in input().split()]\nx2, y2 = [int(i) for i in input().split()]\nx3, y3 = [int(i) for i in input().split()]\n\nn = int(input())\ntrees = []\nfor i in range(n):\n    x, y = [int(i) for i in input().split()]\n    trees.append((x, y))\n\nA = area(x1, y1, x2, y2, x3, y3)\ncount = 0\nfor x, y in trees:\n    if inside(x1, y1, x2, y2, x3, y3, x, y):\n        count += 1\n\nprint(\"%.1f\" % A)\nprint(count)\n", "# compute the area of the triangle\nimport sys\n\ndef area(A, B, C):\n    return abs(A[0]*(B[1] - C[1]) + B[0]*(C[1] - A[1]) + C[0]*(A[1] - B[1]))/2\n# check if the point P is inside the triangle\n\ndef contains(A, B, C, P):\n    return area(A, B, C) == area(A, B, P) + area(A, P, C) + area(P, B, C)\n\nA = tuple(map(int, sys.stdin.readline().split()))\nB = tuple(map(int, sys.stdin.readline().split()))\nC = tuple(map(int, sys.stdin.readline().split()))\n\nN = int(sys.stdin.readline())\n\ncount = 0\nfor i in range(N):\n    P = tuple(map(int, sys.stdin.readline().split()))\n    if contains(A, B, C, P):\n        count += 1\n\nprint(\"%.1f\" % area(A, B, C))\nprint(count)\n", "\n\ndef compute_area_triangle(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2.0)\n\ndef is_inside(a, b, c, tree):\n    area = compute_area_triangle(a, b, c)\n    area_a = compute_area_triangle(a, b, tree)\n    area_b = compute_area_triangle(a, c, tree)\n    area_c = compute_area_triangle(b, c, tree)\n    if area == area_a + area_b + area_c:\n        return True\n    return False\n\ndef main():\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    n = int(input())\n    trees = []\n    for i in range(n):\n        trees.append([int(x) for x in input().split()])\n    count = 0\n    for tree in trees:\n        if is_inside(a, b, c, tree):\n            count += 1\n    area = compute_area_triangle(a, b, c)\n    print(\"{:.1f}\".format(area))\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n# coding: utf-8\n\nimport sys\n\ndef area(A, B, C):\n    return abs(A[0]*(B[1] - C[1]) + B[0]*(C[1] - A[1]) + C[0]*(A[1] - B[1]))/2.0\n\ndef contains(A, B, C, P):\n    return area(A, B, C) == area(A, B, P) + area(A, P, C) + area(P, B, C)\n\nA = tuple(map(int, sys.stdin.readline().split()))\nB = tuple(map(int, sys.stdin.readline().split()))\nC = tuple(map(int, sys.stdin.readline().split()))\n\nN = int(sys.stdin.readline())\n\ncount = 0\nfor i in range(N):\n    P = tuple(map(int, sys.stdin.readline().split()))\n    if contains(A, B, C, P):\n        count += 1\n\nprint(\"%.1f\" % area(A, B, C))\nprint(count)\n", "# comment\nfrom sys import stdin\n\ndef area(a, b, c):\n    return abs((a[0] * (b[1] - c[1]) + b[0] * (c[1] - a[1]) + c[0] * (a[1] - b[1])) / 2.0)\n\ndef point_in_triangle(a, b, c, p):\n    a1 = area(a, b, p)\n    a2 = area(a, c, p)\n    a3 = area(b, c, p)\n    return abs(a1 + a2 + a3 - area(a, b, c)) < 0.000001 * area(a, b, c)\n\na = tuple(map(int, stdin.readline().split()))\nb = tuple(map(int, stdin.readline().split()))\nc = tuple(map(int, stdin.readline().split()))\n\nn = int(stdin.readline())\n\ntrees = 0\nfor _ in range(n):\n    p = tuple(map(int, stdin.readline().split()))\n    if point_in_triangle(a, b, c, p):\n        trees += 1\n\nprint(\"{:.1f}\".format(area(a, b, c)))\nprint(trees)\n"]