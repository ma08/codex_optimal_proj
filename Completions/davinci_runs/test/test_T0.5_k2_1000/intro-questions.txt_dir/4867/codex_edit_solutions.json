["\n# Solution\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u + n))\nprint('.' * (l + r + n) + '#' * (d + u + n))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u + n))\nprint('#' * (l + r + n) + '.' * (d + u + n))\n", "\nimport sys\n\n# Grab the pellets as fast as you can!!\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small\nif width < 10 or height < 10:\n    print(\"The maze is too small!\", file=sys.stderr)\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: Pac-Man's x position\n    # y: Pac-Man's y position\n    # pac_id: Pac-Man's unique id\n    # mine: true if this Pac-Man is powered up, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacs and enemy pacs in sight\n    # mine_count: number of visible pellets in sight\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: pac number (unique within a team)\n        # mine: true if this pac is yours\n        # x: position in the grid\n        # y: position in the grid\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = input().split()\n        pac_id = int(pac_id)\n        mine = mine != \"0\"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    pellets = []\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        x, y, value = [int(j) for j in input().split()]\n        pellets.append((x, y, value))\n\n    # Write an action using print\n    # To debug: print(\"Debug messages...\", file=sys.stderr)\n\n    # MOVE <pacId> <x> <y>\n    print(\"MOVE %d %d %d\" % (pac_id, x + 1, y))\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get inputs\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top\n    print(\"#\" * (n + l + r) + \".\" * (l + r), end=\"\\n\")\n    for _ in range(u):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r), end=\"\\n\")\n    for i in range(m):\n        # Print left\n        print(\".\" * (l + r), end=\"\")\n        # Print puzzle\n        print(\"\".join(puzzle[i]), end=\"\")\n        # Print right\n        print(\".\" * (l + r), end=\"\\n\")\n    for _ in range(d):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r), end=\"\\n\")\n    # Print bottom\n    print(\"#\" * (n + l + r) + \".\" * (l + r), end=\"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main(m, n, u, l, r, d):\n    # m = rows, n = columns, u = up, l = left, r = right, d = down\n    out = \"\"\n    for i in range(u):\n        out += \"#.\" * (l + n + r) + \"#\\n\"\n    for i in range(m):\n        out += \"#.\" + \".\".join(input()) + \".#\\n\"\n    for i in range(d):\n        out += \"#.\" * (l + n + r) + \"#\\n\"\n    print(out)\n\n\nif __name__ == \"__main__\":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n", "m, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\npuzzle = [list(input()) for _ in range(m)]\n\nfor i in range(u):\n    print('#' + '.' * (n + l + r) + '#')\nfor i in range(m):\n    print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#')\nfor i in range(d):\n    print('#' + '.' * (n + l + r) + '#')\n", "import sys\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint(\"#\"*(l+r+n)+\".\"*(m+u+d))\nfor _ in range(u):\n    print(\"#\"*(l+r+n)+\".\"*(m+u+d))\nfor _ in range(m):\n    print(\"#\"*l+sys.stdin.readline()+\"#\"*r)\nfor _ in range(d):\n    print(\"#\"*(l+r+n)+\".\"*(m+u+d))\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top\n    print(\"#\" * (n + l + r) + \".\" * (l + r))\n    for _ in range(u):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r))\n    for i in range(m):\n        # Print left\n        print(\".\" * (l + r), end=\"\", flush=True)\n        # Print puzzle\n        print(\"\".join(puzzle[i]), end=\"\", flush=True)\n        # Print right\n        print(\".\" * (l + r), end=\"\", flush=True)\n    for _ in range(d):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r))\n    # Print bottom\n    print(\"#\" * (n + l + r) + \".\" * (l + r))\n\nif __name__ == \"__main__\":\n    main()\n", "\n#\n# # SOLUTION\n#\n# m, n = map(int, input().split())\n# u, l, r, d = map(int, input().split())\n#\n# for i in range(u):\n#     print(\"#.\" * n + \"#\" + \".\" * r)\n#\n# for i in range(m):\n#     print(\"#\" + input() + \"#\" + \".\" * r)\n#\n# for i in range(d):\n#     print(\"#.\" * n + \"#\" + \".\" * r)\n", "#!/usr/bin/env python3\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint(\"#\"*(l+r+n)+\".\"*(m+l+r))\nfor _ in range(u):\n    print(\"#\"*(l+r+n)+\".\"*(m+l+r))\nfor _ in range(m):\n    print(\"#\"*l+input()+\"#\"*r)\nfor _ in range(d):\n    print(\"#\"*(l+r+n)+\".\"*(m+l+r))\n", "\n\ndef main(m, n, u, l, r, d):\n    out = \"\"\n    for i in range(u):\n        out += \"#.\" * (l + n + r) + \"#\\n\"\n    for i in range(m):\n        out += \"#.\" + \".\".join(input()) + \".#\\n\"\n    for i in range(d):\n        out += \"#.\" * (l + n + r) + \"#\\n\"\n    print(out)\n\nif __name__ == \"__main__\":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n", "\ndef main():\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = [list(input()) for _ in range(m)]\n\n    for i in range(u):\n        print('#' + '.' * (n + l + r) + '#')\n    for i in range(m):\n        print('#' + '.' * l + ''.join(puzzle[i]) + '.' * r + '#')\n    for i in range(d):\n        print('#' + '.' * (n + l + r) + '#')\n\n\nif __name__ == '__main__':\n    main()\n", "\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor _ in range(u):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n\nfor _ in range(m):\n    print(\"#\" + input() + \"#\" + \".\" * r)\n\nfor _ in range(d):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n", "\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint(\"#\"*(l+r+n)+\".\"*(m+u+d), end=\"\\n\")\nfor _ in range(u):\n    print(\"#\"*(l+r+n)+\".\"*(m+u+d), end=\"\\n\")\nfor _ in range(m):\n    print(\"#\"*l+input()+\"#\"*r, end=\"\\n\")\nfor _ in range(d):\n    print(\"#\"*(l+r+n)+\".\"*(m+u+d), end=\"\\n\")\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get inputs\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top\n    print(\"#\" * (n + l + r) + \".\" * (l + r), end=\"\")\n    for _ in range(u):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r))\n    for i in range(m):\n        # Print left\n        print(\".\" * (l + r), end=\"\")\n        # Print puzzle\n        print(\"\".join(puzzle[i]), end=\"\")\n        # Print right\n        print(\".\" * (l + r))\n    for _ in range(d):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r))\n    # Print bottom\n    print(\"#\" * (n + l + r) + \".\" * (l + r), end=\"\")\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sun Dec  8 10:54:28 2019\n\n@author: nishanth\n\"\"\"\n\n# Getting input\nM, N = [int(x) for x in input().split()]  # M = no of rows, N = no of columns\nU, L, R, D = [int(x) for x in input().split()]  # U = no of rows above, L = no of columns on left, R = no of columns on right, D = no of rows below\n\n# Creating the crossword\ncrossword = [input() for x in range(M)]  # crossword = list of rows\n\n# Creating the frame\nframe = []\nfor i in range(U):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\nframe.append(\".\"*L+crossword[0]+\".\"*R)\nfor i in range(1,M):\n    frame.append(\".\"*L+crossword[i]+\".\"*R)\nfor i in range(D):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\n\n# Printing the frame\nfor line in frame:\n    print(line)\n", "\n\n# Solution 1\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u))\nprint('.' * (l + r + n) + '#' * (d + u))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u))\n\n# Solution 2\n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint('#' * (l + r + n) + '.' * (d + u))\nprint('.' * (l + r + n) + '#' * (d + u))\nfor i in range(m):\n    print('#' * l + input() + '#' * r)\nprint('.' * (l + r + n) + '#' * (d + u))\nprint('#' * (l + r + n) + '.' * (d + u))\nprint('#' * (l + r + n) + '.' * (d + u))\n", "\n\nimport sys\nimport math\n\n# Grab the pellets as fast as you can!\n\n# width: size of the grid\n# height: top left corner is (x=0, y=0)\nwidth, height = [int(i) for i in input().split()]\n\n# Print an error message, because the maze is too small\nif width < 10 or height < 10:\n    print(\"The maze is too small!\")\n    sys.exit(0)\n\n# game loop\nwhile True:\n    # x: Pac-Man's x position\n    # y: Pac-Man's y position\n    # pac_id: Pac-Man's unique id\n    # mine: true if this Pac-Man is powered up, false otherwise\n    x, y, pac_id, mine = [int(j) for j in input().split()]\n\n    # visible_pac_count: all your pacs and enemy pacs in sight\n    # mine_count: number of visible pellets in sight\n    visible_pac_count, mine_count = [int(i) for i in input().split()]\n    for i in range(visible_pac_count):\n        # pac_id: pac number (unique within a team)\n        # mine: true if this pac is yours\n        # x: position in the grid\n        # y: position in the grid\n        # type_id: unused in wood leagues\n        # speed_turns_left: unused in wood leagues\n        # ability_cooldown: unused in wood leagues\n        pac_id, mine, x, y, type_id, speed_turns_left, ability_cooldown = input().split()\n        pac_id = int(pac_id)\n        mine = mine != \"0\"\n        x = int(x)\n        y = int(y)\n        speed_turns_left = int(speed_turns_left)\n        ability_cooldown = int(ability_cooldown)\n\n    # visible_pellet_count: all pellets in sight\n    visible_pellet_count = int(input())\n    pellets = []\n    for i in range(visible_pellet_count):\n        # value: amount of points this pellet is worth\n        x, y, value = [int(j) for j in input().split()]\n        pellets.append((x, y, value))\n\n    # Write an action using print\n    # To debug: print(\"Debug messages...\", file=sys.stderr)\n\n    # MOVE <pacId> <x> <y>\n    print(\"MOVE %d %d %d\" % (pac_id, x+1, y))\n", "\n\n#SOLUTION 1 \n\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nfor i in range(u):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n\nfor i in range(m):\n    print(\"#\" + input() + \"#\" + \".\" * r)\n\nfor i in range(d):\n    print(\"#.\" * n + \"#\" + \".\" * r)\n", "\n# Getting input\nM, N = [int(x) for x in input().split()]\nU, L, R, D = [int(x) for x in input().split()]\n\n# Creating the crossword\ncrossword = [input() for x in range(M)]\n\n# Creating the frame\nframe = []\nfor i in range(U):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\nframe.append(\".\"*L+crossword[0]+\".\"*R)\nfor i in range(1,M):\n    frame.append(\".\"*L+crossword[i]+\".\"*R)\nfor i in range(D):\n    frame.append(\"#.\"*(N+L+R-1)+\"#\")\n\n# Printing the frame\nfor line in frame:\n    print(line)\n", "\nm, n = map(int, input().split())\nu, l, r, d = map(int, input().split())\n\nprint(\"#\"*(l+r+n)+\".\"*(m+l+r+n))\nfor _ in range(u):\n    print(\"#\"*(l+r+n)+\".\"*(m+l+r+n))\nfor _ in range(m):\n    print(\"#\"*l+input()+\"#\"*r)\nfor _ in range(d):\n    print(\"#\"*(l+r+n)+\".\"*(m+l+r+n))\n", "\n\n# SOLUTION\n\nm, n = map(int, input().split())  # m rows, n columns\nu, l, r, d = map(int, input().split())  # u top, l left, r right, d bottom\n\nfor i in range(u):  # top\n    print(\"#.\" * n + \"#\" + \".\" * r)  # print top\n\nfor i in range(m):  # middle\n    print(\"#\" + input() + \"#\" + \".\" * r)  # print middle\n\nfor i in range(d):  # bottom\n    print(\"#.\" * n + \"#\" + \".\" * r)  # print bottom\n", "\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get input\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    puzzle = []\n    for _ in range(m):\n        puzzle.append(list(input()))\n\n    # Print top\n    print(\"#\" * (n + l + r) + \".\" * (l + r))\n    for _ in range(u):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r))\n    for i in range(m):\n        # Print left\n        print(\".\" * (l + r), end=\"\")  # noqa\n        # Print puzzle\n        print(\"\".join(puzzle[i]), end=\"\")\n        # Print right\n        print(\".\" * (l + r), end=\"\")  # noqa\n    for _ in range(d):\n        print(\".\" * (l + r) + \"#\" * (n + l + r) + \".\" * (l + r))\n    # Print bottom\n    print(\"#\" * (n + l + r) + \".\" * (l + r))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main(m, n, u, l, r, d):  # m = rows, n = columns, u = up, l = left, r = right, d = down\n    out = \"\"\n    for i in range(u):\n        out += \"#.\" * (l + n + r) + \"#\\n\"\n    for i in range(m):\n        out += \"#.\" + \".\".join(input().split()) + \".#\\n\"\n    for i in range(d):\n        out += \"#.\" * (l + n + r) + \"#\\n\"\n    print(out)\n\nif __name__ == \"__main__\":\n    m, n = map(int, input().split())\n    u, l, r, d = map(int, input().split())\n    main(m, n, u, l, r, d)\n"]