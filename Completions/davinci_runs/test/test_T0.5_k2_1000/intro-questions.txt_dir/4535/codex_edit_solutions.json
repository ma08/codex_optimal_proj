["\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        n = n & 0xffffffff  # \u53d632\u4f4d\uff0c\u4e3a\u4e86\u5904\u7406\u8d1f\u6570\n        count = 0\n        while n > 0:\n            n &= n - 1\n            count += 1\n        return count\n\n    def hammingWeight_bit_operation(self, n: int) -> int:\n        n = n & 0xffffffff  # \u53d632\u4f4d\uff0c\u4e3a\u4e86\u5904\u7406\u8d1f\u6570\n        count = 0\n        while n > 0:\n            if n & 1 == 1:\n                count += 1\n            n >>= 1\n        return count\n\n    def hammingWeight_bin(self, n: int) -> int:\n        return bin(n & 0xffffffff).count(\"1\")  # \u53d632\u4f4d\uff0c\u4e3a\u4e86\u5904\u7406\u8d1f\u6570\n", "def hammingWeight(self, n: int) -> int:\n    n = n & 0xffffffff\n    count = 0\n    while n > 0:\n        n &= n - 1\n        count += 1\n    return count\n\n\n    def hammingWeight_bit_operation(self, n: int) -> int:\n        n = n & 0xffffffff\n        count = 0\n        while n > 0:\n            if n & 1 == 1:\n                count += 1\n            n >>= 1\n        return count\n\n    def hammingWeight_bin(self, n: int) -> int:\n        return bin(n & 0xffffffff).count(\"1\")\n", "\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        n = n & 0xffffffff  # \u53d632\u4f4d\n        count = 0\n        while n > 0:\n            n &= n - 1\n            count += 1\n        return count\n\n    def hammingWeight_bit_operation(self, n: int) -> int:\n        n = n & 0xffffffff  # \u53d632\u4f4d\n        count = 0\n        while n > 0:\n            if n & 1 == 1:\n                count += 1\n            n >>= 1\n        return count\n\n    def hammingWeight_bin(self, n: int) -> int:\n        return bin(n & 0xffffffff).count(\"1\")  # \u53d632\u4f4d\n", "\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        n = n & 0xffffffff\n        count = 0\n        while n > 0:\n            n &= n - 1\n            count += 1\n        return count\n\n    def hammingWeight_bit_operation(self, n: int) -> int:\n        n = n & 0xffffffff\n        count = 0\n        while n > 0:\n            if n & 1 == 1:\n                count += 1\n            n >>= 1\n        return count\n\n    def hammingWeight_bin(self, n: int) -> int:\n        return bin(n & 0xffffffff).count(\"1\")\n", "class Solution:\n    def hammingWeight(self, n: int) -> int:\n        return bin(n).count('1')\n"]