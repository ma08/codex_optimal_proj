["#!/usr/bin/env python3\n\n# SOLUTION \nn = int(input())\nd = {}\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k-1])\n", "\n\n# SOLUTION \nn = int(input())\n\nd = {}\n\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country not in d:\n        d[country] = []\n    d[country].append(year)\n\nq = int(input())\n\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(d[country][k-1])\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(input())\n    trips = {}\n    for _ in range(n):\n        country, year = input().split()\n        if country in trips:\n            trips[country].append(year)\n        else:\n            trips[country] = [year]\n    q = int(input())\n    for _ in range(q):\n        country, k = input().split()\n        print(trips[country][int(k) - 1])\n\nif __name__ == \"__main__\":\n    main()\n", "\n# SOLUTION \nn = int(input())\nd = {}\n\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country not in d:\n        d[country] = []\n    d[country].append(year)\nq = int(input())\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(d[country][k-1])\n", "# SOLUTION\nn = int(input())\nd = {}\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country not in d:\n        d[country] = []\n    d[country].append(year)\nq = int(input())\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(d[country][k-1])\n", "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    trips = {}\n    for _ in range(n):\n        country, year = sys.stdin.readline().split()\n        if country in trips:\n            trips[country].append(year)\n        else:\n            trips[country] = [year]\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        country, k = sys.stdin.readline().split()\n        print(trips[country][int(k) - 1]) \n\nif __name__ == \"__main__\":\n    main()\n", "\nn = int(input())\nd = {}\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k-1])\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    trips = {}\n    for _ in range(n):\n        country, year = sys.stdin.readline().split()\n        if country in trips:\n            trips[country].append(year)\n        else:\n            trips[country] = [year]\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        country, k = sys.stdin.readline().split()\n        try:\n            print(trips[country][int(k) - 1])\n        except IndexError:\n            print(\"-1\")\n\nif __name__ == \"__main__\":\n    main()\n", "def get_input():\n    n = int(input())\n\n    trips = {}\n    for i in range(n):\n        country, year = input().split()\n        if country in trips:\n            trips[country].append(int(year))\n        else:\n            trips[country] = [int(year)]\n\n    q = int(input())\n    for i in range(q):\n        country, k = input().split()\n        print(sorted(trips[country])[int(k)-1])\n\n\nif __name__ == '__main__':\n    get_input()\n", "from collections import defaultdict\n\nn = int(input())\ntrips = defaultdict(list)\n\nfor _ in range(n):\n    c, y = input().split()\n    trips[c].append(int(y))\n\nq = int(input())\n\nfor _ in range(q):\n    c, k = input().split()\n    print(trips[c][int(k) - 1] if len(trips[c]) >= int(k) else -1)\n", "n = int(input())\nd = dict()\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k-1])\n", "\nn = int(input())\ntrips = []\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    trips.append((country, year))\n\nq = int(input())\nqueries = []\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    queries.append((country, k))\n\nfor query in queries:\n    country, k = query\n    trips_to_country = sorted([trip for trip in trips if trip[0] == country], key=lambda t: t[1], reverse=True)\n    print(trips_to_country[k - 1][1] if k <= len(trips_to_country) else -1)\n", "n = int(input().strip())\n\ntrips = {}\nfor i in range(n):\n    country, year = input().strip().split()\n    if country in trips:\n        trips[country].append(int(year))\n    else:\n        trips[country] = [int(year)]\n\nq = int(input().strip())\nfor i in range(q):\n    country, k = input().strip().split()\n    print(sorted(trips[country])[int(k)-1])\n", "#\n# # SOLUTION\n#\n# n = int(input())\n#\n# d = {}\n#\n# for i in range(n):\n#     country, year = input().split()\n#     year = int(year)\n#     if country not in d:\n#         d[country] = []\n#     d[country].append(year)\n#\n# q = int(input())\n#\n# for i in range(q):\n#     country, k = input().split()\n#     k = int(k)\n#     print(d[country][k-1])\n", "\n# n = int(input())\n# trips = []\n# for i in range(n):\n#     country, year = input().split()\n#     year = int(year)\n#     trips.append((country, year))\n\n# q = int(input())\n# queries = []\n# for i in range(q):\n#     country, k = input().split()\n#     k = int(k)\n#     queries.append((country, k))\n\n# for query in queries:\n#     country, k = query\n#     trips_to_country = [trip for trip in trips if trip[0] == country]\n#     trips_to_country.sort(key=lambda t: t[1], reverse=True)\n#     print(trips_to_country[k - 1][1])\n\n\n# def fib(n):\n#     if n == 0:\n#         return 0\n#     elif n == 1:\n#         return 1\n#     else:\n#         return fib(n - 1) + fib(n - 2)\n\n\n# def fib_memoized(n):\n#     memo = [0, 1]\n#     if n >= len(memo):\n#         for i in range(len(memo), n + 1):\n#             memo.append(memo[i - 1] + memo[i - 2])\n#     return memo[n]\n\n\n# def fib_memoized_with_dict(n):\n#     memo = {0: 0, 1: 1}\n#     if n not in memo:\n#         memo[n] = fib_memoized_with_dict(n - 1) + fib_memoized_with_dict(n - 2)\n#     return memo[n]\n\n\n# def fib_iterative(n):\n#     if n == 0:\n#         return 0\n#     elif n == 1:\n#         return 1\n#     else:\n#         a = 0\n#         b = 1\n#         for i in range(n):\n#             a, b = b, a + b\n#         return a\n\n\n# print(fib_iterative(10))\n\n\n# def fib_iterative_with_dict(n):\n#     memo = {0: 0, 1: 1}\n#     for i in range(2, n + 1):\n#         memo[i] = memo[i - 1] + memo[i - 2]\n#     return memo[n]\n\n\n# print(fib_iterative_with_dict(10))\n\n\n# def fib_iterative_with_list(n):\n#     memo = [0, 1]\n#     for i in range(2, n + 1):\n#         memo.append(memo[i - 1] + memo[i - 2])\n#     return memo[n]\n\n\n# print(fib_iterative_with_list(10))\n\n\n# def fib_iterative_with_list_and_tuple(n):\n#     memo = [0, 1]\n#     for i in range(2, n + 1):\n#         memo.append(sum(memo[-2:]))\n#     return memo[n]\n\n\n# print(fib_iterative_with_list_and_tuple(10))\n\n\n# def fib_iterative_with_tuple(n):\n#     memo = (0, 1)\n#     for i in range(2, n + 1):\n#         memo = (memo[1], sum(memo))\n#     return memo[1]\n\n\n# print(fib_iterative_with_tuple(10))\n\n\n# def fib_iterative_with_tuple_and_list(n):\n#     memo = (0, 1)\n#     for i in range(2, n + 1):\n#         memo = (memo[1], sum(list(memo)))\n#     return memo[1]\n\n\n# print(fib_iterative_with_tuple_and_list(10))\n\n\n# def fib_iterative_with_tuple_and_list_and_tuple(n):\n#     memo = (0, 1)\n#     for i in range(2, n + 1):\n#         memo = (memo[1], sum(list(memo)))\n#     return memo[1]\n\n\n# print(fib_iterative_with_tuple_and_list_and_tuple(10))\n\n\n# def fib_iterative_with_tuple_and_tuple(n):\n#     memo = (0, 1)\n#     for i in range(2, n + 1):\n#         memo = (memo[1], sum(memo))\n#     return memo[1]\n\n\n# print(fib_iterative_with_tuple_and_tuple(10))\n\n\n# def fib_iterative_with_tuple_and_tuple_and_list(n):\n#     memo = (0, 1)\n#     for i in range(2, n + 1):\n#         memo = (memo[1], sum(list(memo)))\n#     return memo[1]\n\n\n# print(fib_iterative_with_tuple_and_tuple_and_list(10))\n\n\n# def fib_iterative_with_tuple_and_tuple_and_tuple(n):\n#     memo = (0, 1)\n#     for i in range(2, n + 1):\n#         memo = (memo[1], sum(memo))\n#     return memo[1]\n\n\n# print(fib_iterative_with_tuple_and_tuple_and_tuple(10))\n\n\n# def fib_iterative_with_tuple_and_tuple_and_tuple_and_list(n):\n#     memo = (0, 1)\n#     for i in range(2, n + 1):\n#         memo = (memo[1], sum(list(memo)))\n#     return memo[1]\n\n\n# print(fib_iterative_with_tuple_and_tuple_and_tuple_and_list(10))\n", "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    trips = {}\n    for _ in range(n):\n        country, year = sys.stdin.readline().split()\n        if country in trips:\n            trips[country].append(year)\n        else:\n            trips[country] = [year]\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        country, k = sys.stdin.readline().split()\n        print(trips[country][int(k) - 1])\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# SOLUTION 1\nn = int(input())\nd = {}\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n\n# SOLUTION 2\nn = int(input())\nd = {}\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k-1])\n", "#!/usr/bin/env python3\n\nn = int(input())\ntrips = []\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    trips.append((country, year))\n\nq = int(input())\nqueries = []\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    queries.append((country, k))\n\nfor query in queries:\n    country, k = query\n    trips_to_country = sorted(\n        [trip for trip in trips if trip[0] == country],\n        key=lambda t: t[1],\n        reverse=True\n    )\n    if k > len(trips_to_country) or len(trips_to_country) == 0:\n        print('-1')\n    else:\n        print(trips_to_country[k - 1][1])\n", "\nn = int(input())\nd = dict()\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k - 1])\n", "#!/usr/bin/env python3\n\nn = int(input())\ntrips = []\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    trips.append((country, year))\n\nq = int(input())\nqueries = []\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    queries.append((country, k))\n\nfor query in queries:\n    country, k = query\n    trips_to_country = sorted([trip for trip in trips if trip[0] == country], key=lambda t: t[1], reverse=True)\n    if k > len(trips_to_country) or k == 0:\n        print('-1')\n    else:\n        print(trips_to_country[k - 1][1])\n", "n = int(input())\nd = dict()\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k - 1])\n"]