2022-04-12 02:58:56.546663 num operations 2
2022-04-12 02:58:56.546700 size on input set 1
2022-04-12 02:58:58.750712 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# SOLUTION \n\nn = int(input())\n\nd = {}\n\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country not in d:\n        d[country] = []\n    d[country].append(year)\n\nq = int(input())\n\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(d[country][k-1])\n"
    },
    {
      "index": 1,
      "text": "\n# SOLUTION\n\nn = int(input())\n\nd = {}\n\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country not in d:\n        d[country] = []\n    d[country].append(year)\n\nq = int(input())\n\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(d[country][k-1])\n"
    }
  ],
  "created": 1649746736,
  "object": "edit"
}
2022-04-12 02:58:58.750834 fix spelling mistakes 2 ['\n\n# SOLUTION \n\nn = int(input())\n\nd = {}\n\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country not in d:\n        d[country] = []\n    d[country].append(year)\n\nq = int(input())\n\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(d[country][k-1])\n', '\n# SOLUTION\n\nn = int(input())\n\nd = {}\n\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country not in d:\n        d[country] = []\n    d[country].append(year)\n\nq = int(input())\n\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(d[country][k-1])\n']
2022-04-12 02:58:58.750849 size on output set 2
2022-04-12 02:58:58.750852 size on input set 2
2022-04-12 02:59:01.285587 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# SOLUTION \nn = int(input())\nd = {}\n\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country not in d:\n        d[country] = []\n    d[country].append(year)\nq = int(input())\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(d[country][k-1])\n"
    },
    {
      "index": 1,
      "text": "\n\n# SOLUTION \nn = int(input())\n\nd = {}\n\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country not in d:\n        d[country] = []\n    d[country].append(year)\n\nq = int(input())\n\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(d[country][k-1])\n"
    }
  ],
  "created": 1649746738,
  "object": "edit"
}
2022-04-12 02:59:01.285759 fix syntax errors 2 ['\n# SOLUTION \nn = int(input())\nd = {}\n\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country not in d:\n        d[country] = []\n    d[country].append(year)\nq = int(input())\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(d[country][k-1])\n', '\n\n# SOLUTION \nn = int(input())\n\nd = {}\n\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country not in d:\n        d[country] = []\n    d[country].append(year)\n\nq = int(input())\n\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(d[country][k-1])\n']
2022-04-12 02:59:07.821266 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#\n# # SOLUTION\n#\n# n = int(input())\n#\n# d = {}\n#\n# for i in range(n):\n#     country, year = input().split()\n#     year = int(year)\n#     if country not in d:\n#         d[country] = []\n#     d[country].append(year)\n#\n# q = int(input())\n#\n# for i in range(q):\n#     country, k = input().split()\n#     k = int(k)\n#     print(d[country][k-1])\n"
    },
    {
      "index": 1,
      "text": "# SOLUTION\nn = int(input())\nd = {}\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country not in d:\n        d[country] = []\n    d[country].append(year)\nq = int(input())\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(d[country][k-1])\n"
    }
  ],
  "created": 1649746741,
  "object": "edit"
}
2022-04-12 02:59:07.821422 fix syntax errors 2 ['#\n# # SOLUTION\n#\n# n = int(input())\n#\n# d = {}\n#\n# for i in range(n):\n#     country, year = input().split()\n#     year = int(year)\n#     if country not in d:\n#         d[country] = []\n#     d[country].append(year)\n#\n# q = int(input())\n#\n# for i in range(q):\n#     country, k = input().split()\n#     k = int(k)\n#     print(d[country][k-1])\n', '# SOLUTION\nn = int(input())\nd = {}\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country not in d:\n        d[country] = []\n    d[country].append(year)\nq = int(input())\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(d[country][k-1])\n']
2022-04-12 02:59:07.821447 size on output set 4
2022-04-12 02:59:07.821458 num operations 2
2022-04-12 02:59:07.821464 size on input set 1
2022-04-12 02:59:12.325617 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# SOLUTION \nn = int(input())\nd = {}\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k-1])\n"
    },
    {
      "index": 1,
      "text": "\n\n# SOLUTION 1\nn = int(input())\nd = {}\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n\n# SOLUTION 2\nn = int(input())\nd = {}\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k-1])\n    print(sorted(d[country])[k-1])\n"
    }
  ],
  "created": 1649746748,
  "object": "edit"
}
2022-04-12 02:59:12.325801 fix spelling mistakes 2 ['\n\n# SOLUTION \nn = int(input())\nd = {}\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k-1])\n', '\n\n# SOLUTION 1\nn = int(input())\nd = {}\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n\n# SOLUTION 2\nn = int(input())\nd = {}\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k-1])\n    print(sorted(d[country])[k-1])\n']
2022-04-12 02:59:12.325836 size on output set 2
2022-04-12 02:59:12.325845 size on input set 2
2022-04-12 02:59:14.400982 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\n# SOLUTION \nn = int(input())\nd = {}\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k-1])\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\nd = {}\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k-1])\n"
    }
  ],
  "created": 1649746752,
  "object": "edit"
}
2022-04-12 02:59:14.401211 fix syntax errors 2 ['#!/usr/bin/env python3\n\n# SOLUTION \nn = int(input())\nd = {}\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k-1])\n', '\nn = int(input())\nd = {}\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k-1])\n']
2022-04-12 02:59:16.678772 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# SOLUTION 1\nn = int(input())\nd = {}\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n\n# SOLUTION 2\nn = int(input())\nd = {}\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k-1])\n"
    },
    {
      "index": 1,
      "text": "\n\n# SOLUTION 1\nn = int(input())\nd = {}\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n\n# SOLUTION 2\nn = int(input())\nd = {}\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k-1])\n"
    }
  ],
  "created": 1649746754,
  "object": "edit"
}
2022-04-12 02:59:16.678922 fix syntax errors 2 ['\n\n# SOLUTION 1\nn = int(input())\nd = {}\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n\n# SOLUTION 2\nn = int(input())\nd = {}\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k-1])\n', '\n\n# SOLUTION 1\nn = int(input())\nd = {}\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n\n# SOLUTION 2\nn = int(input())\nd = {}\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k-1])\n']
2022-04-12 02:59:16.678949 size on output set 3
2022-04-12 02:59:16.678960 num operations 2
2022-04-12 02:59:16.678966 size on input set 1
2022-04-12 02:59:18.585086 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom collections import defaultdict\n\nn = int(input())\ntrips = defaultdict(list)\n\nfor _ in range(n):\n    c, y = input().split()\n    trips[c].append(int(y))\n\nq = int(input())\n\nfor _ in range(q):\n    c, k = input().split()\n    print(trips[c][int(k) - 1])\n"
    },
    {
      "index": 1,
      "text": "\nfrom collections import defaultdict\n\nn = int(input())\ntrips = defaultdict(list)\n\nfor _ in range(n):\n    c, y = input().split()\n    trips[c].append(int(y))\n\nq = int(input())\n\nfor _ in range(q):\n    c, k = input().split()\n    print(trips[c][int(k) - 1])\n"
    }
  ],
  "created": 1649746756,
  "object": "edit"
}
2022-04-12 02:59:18.585367 fix spelling mistakes 2 ['\nfrom collections import defaultdict\n\nn = int(input())\ntrips = defaultdict(list)\n\nfor _ in range(n):\n    c, y = input().split()\n    trips[c].append(int(y))\n\nq = int(input())\n\nfor _ in range(q):\n    c, k = input().split()\n    print(trips[c][int(k) - 1])\n', '\nfrom collections import defaultdict\n\nn = int(input())\ntrips = defaultdict(list)\n\nfor _ in range(n):\n    c, y = input().split()\n    trips[c].append(int(y))\n\nq = int(input())\n\nfor _ in range(q):\n    c, k = input().split()\n    print(trips[c][int(k) - 1])\n']
2022-04-12 02:59:18.585403 size on output set 1
2022-04-12 02:59:18.585416 size on input set 1
2022-04-12 02:59:21.530833 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "from collections import defaultdict\n\nn = int(input())\ntrips = defaultdict(list)\n\nfor _ in range(n):\n    c, y = input().split()\n    trips[c].append(int(y))\n\nq = int(input())\n\nfor _ in range(q):\n    c, k = input().split()\n    print(trips[c][int(k) - 1] if len(trips[c]) >= int(k) else -1)\n"
    },
    {
      "index": 1,
      "text": "from collections import defaultdict\n\nn = int(input())\ntrips = defaultdict(list)\n\nfor _ in range(n):\n    c, y = input().split()\n    trips[c].append(int(y))\n\nq = int(input())\n\nfor _ in range(q):\n    c, k = input().split()\n    print(trips[c][int(k) - 1] if len(trips[c]) >= int(k) else -1)\n"
    }
  ],
  "created": 1649746758,
  "object": "edit"
}
2022-04-12 02:59:21.531205 fix syntax errors 2 ['from collections import defaultdict\n\nn = int(input())\ntrips = defaultdict(list)\n\nfor _ in range(n):\n    c, y = input().split()\n    trips[c].append(int(y))\n\nq = int(input())\n\nfor _ in range(q):\n    c, k = input().split()\n    print(trips[c][int(k) - 1] if len(trips[c]) >= int(k) else -1)\n', 'from collections import defaultdict\n\nn = int(input())\ntrips = defaultdict(list)\n\nfor _ in range(n):\n    c, y = input().split()\n    trips[c].append(int(y))\n\nq = int(input())\n\nfor _ in range(q):\n    c, k = input().split()\n    print(trips[c][int(k) - 1] if len(trips[c]) >= int(k) else -1)\n']
2022-04-12 02:59:21.531238 size on output set 1
2022-04-12 02:59:21.531252 num operations 2
2022-04-12 02:59:21.531259 size on input set 1
2022-04-12 02:59:23.614738 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    trips = {}\n    for _ in range(n):\n        country, year = sys.stdin.readline().split()\n        if country in trips:\n            trips[country].append(year)\n        else:\n            trips[country] = [year]\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        country, k = sys.stdin.readline().split()\n        print(trips[country][int(k) - 1])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    trips = {}\n    for _ in range(n):\n        country, year = sys.stdin.readline().split()\n        if country in trips:\n            trips[country].append(year)\n        else:\n            trips[country] = [year]\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        country, k = sys.stdin.readline().split()\n        print(trips[country][int(k) - 1])\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649746761,
  "object": "edit"
}
2022-04-12 02:59:23.615124 fix spelling mistakes 2 ['\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    trips = {}\n    for _ in range(n):\n        country, year = sys.stdin.readline().split()\n        if country in trips:\n            trips[country].append(year)\n        else:\n            trips[country] = [year]\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        country, k = sys.stdin.readline().split()\n        print(trips[country][int(k) - 1])\n\nif __name__ == "__main__":\n    main()\n', '#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    trips = {}\n    for _ in range(n):\n        country, year = sys.stdin.readline().split()\n        if country in trips:\n            trips[country].append(year)\n        else:\n            trips[country] = [year]\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        country, k = sys.stdin.readline().split()\n        print(trips[country][int(k) - 1])\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 02:59:23.615151 size on output set 2
2022-04-12 02:59:23.615157 size on input set 2
2022-04-12 02:59:27.785183 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    trips = {}\n    for _ in range(n):\n        country, year = sys.stdin.readline().split()\n        if country in trips:\n            trips[country].append(year)\n        else:\n            trips[country] = [year]\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        country, k = sys.stdin.readline().split()\n        try:\n            print(trips[country][int(k) - 1])\n        except IndexError:\n            print(\"-1\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(input())\n    trips = {}\n    for _ in range(n):\n        country, year = input().split()\n        if country in trips:\n            trips[country].append(year)\n        else:\n            trips[country] = [year]\n    q = int(input())\n    for _ in range(q):\n        country, k = input().split()\n        print(trips[country][int(k) - 1])\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649746763,
  "object": "edit"
}
2022-04-12 02:59:27.785326 fix syntax errors 2 ['#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    trips = {}\n    for _ in range(n):\n        country, year = sys.stdin.readline().split()\n        if country in trips:\n            trips[country].append(year)\n        else:\n            trips[country] = [year]\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        country, k = sys.stdin.readline().split()\n        try:\n            print(trips[country][int(k) - 1])\n        except IndexError:\n            print("-1")\n\nif __name__ == "__main__":\n    main()\n', '#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n = int(input())\n    trips = {}\n    for _ in range(n):\n        country, year = input().split()\n        if country in trips:\n            trips[country].append(year)\n        else:\n            trips[country] = [year]\n    q = int(input())\n    for _ in range(q):\n        country, k = input().split()\n        print(trips[country][int(k) - 1])\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 02:59:30.574742 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    trips = {}\n    for _ in range(n):\n        country, year = sys.stdin.readline().split()\n        if country in trips:\n            trips[country].append(year)\n        else:\n            trips[country] = [year]\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        country, k = sys.stdin.readline().split()\n        print(trips[country][int(k) - 1]) \n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    trips = {}\n    for _ in range(n):\n        country, year = sys.stdin.readline().split()\n        if country in trips:\n            trips[country].append(year)\n        else:\n            trips[country] = [year]\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        country, k = sys.stdin.readline().split()\n        print(trips[country][int(k) - 1])\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649746767,
  "object": "edit"
}
2022-04-12 02:59:30.575000 fix syntax errors 2 ['import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    trips = {}\n    for _ in range(n):\n        country, year = sys.stdin.readline().split()\n        if country in trips:\n            trips[country].append(year)\n        else:\n            trips[country] = [year]\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        country, k = sys.stdin.readline().split()\n        print(trips[country][int(k) - 1]) \n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    trips = {}\n    for _ in range(n):\n        country, year = sys.stdin.readline().split()\n        if country in trips:\n            trips[country].append(year)\n        else:\n            trips[country] = [year]\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        country, k = sys.stdin.readline().split()\n        print(trips[country][int(k) - 1])\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 02:59:30.575028 size on output set 4
2022-04-12 02:59:30.575043 num operations 2
2022-04-12 02:59:30.575048 size on input set 1
2022-04-12 02:59:33.097964 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\nd = dict()\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k - 1])\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\nd = dict()\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k-1])\n"
    }
  ],
  "created": 1649746770,
  "object": "edit"
}
2022-04-12 02:59:33.098203 fix spelling mistakes 2 ['\n\nn = int(input())\nd = dict()\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k - 1])\n', '\nn = int(input())\nd = dict()\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k-1])\n']
2022-04-12 02:59:33.098326 size on output set 2
2022-04-12 02:59:33.098333 size on input set 2
2022-04-12 02:59:35.650748 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "n = int(input())\nd = dict()\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k-1])\n"
    },
    {
      "index": 1,
      "text": "n = int(input())\nd = dict()\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k - 1])\n"
    }
  ],
  "created": 1649746773,
  "object": "edit"
}
2022-04-12 02:59:35.651085 fix syntax errors 2 ['n = int(input())\nd = dict()\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k-1])\n', 'n = int(input())\nd = dict()\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k - 1])\n']
2022-04-12 02:59:37.610810 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\nd = dict()\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k - 1])\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\nd = dict()\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k - 1])\n"
    }
  ],
  "created": 1649746775,
  "object": "edit"
}
2022-04-12 02:59:37.611110 fix syntax errors 2 ['\nn = int(input())\nd = dict()\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k - 1])\n', '\nn = int(input())\nd = dict()\nfor _ in range(n):\n    country, year = input().split()\n    year = int(year)\n    if country in d:\n        d[country].append(year)\n    else:\n        d[country] = [year]\n\nq = int(input())\nfor _ in range(q):\n    country, k = input().split()\n    k = int(k)\n    print(sorted(d[country])[k - 1])\n']
2022-04-12 02:59:37.611144 size on output set 3
2022-04-12 02:59:37.611162 num operations 2
2022-04-12 02:59:37.611169 size on input set 1
2022-04-12 02:59:39.560775 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "n = int(input())\n\ntrips = {}\nfor i in range(n):\n    country, year = input().split()\n    if country in trips:\n        trips[country].append(int(year))\n    else:\n        trips[country] = [int(year)]\n\nq = int(input())\nfor i in range(q):\n    country, k = input().split()\n    print(sorted(trips[country])[int(k)-1])\n"
    },
    {
      "index": 1,
      "text": "n = int(input())\n\ntrips = {}\nfor i in range(n):\n    country, year = input().split()\n    if country in trips:\n        trips[country].append(int(year))\n    else:\n        trips[country] = [int(year)]\n\nq = int(input())\nfor i in range(q):\n    country, k = input().split()\n    print(sorted(trips[country])[int(k)-1])\n"
    }
  ],
  "created": 1649746777,
  "object": "edit"
}
2022-04-12 02:59:39.560870 fix spelling mistakes 2 ['n = int(input())\n\ntrips = {}\nfor i in range(n):\n    country, year = input().split()\n    if country in trips:\n        trips[country].append(int(year))\n    else:\n        trips[country] = [int(year)]\n\nq = int(input())\nfor i in range(q):\n    country, k = input().split()\n    print(sorted(trips[country])[int(k)-1])\n', 'n = int(input())\n\ntrips = {}\nfor i in range(n):\n    country, year = input().split()\n    if country in trips:\n        trips[country].append(int(year))\n    else:\n        trips[country] = [int(year)]\n\nq = int(input())\nfor i in range(q):\n    country, k = input().split()\n    print(sorted(trips[country])[int(k)-1])\n']
2022-04-12 02:59:39.560884 size on output set 1
2022-04-12 02:59:39.560888 size on input set 1
2022-04-12 02:59:46.161099 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "n = int(input().strip())\n\ntrips = {}\nfor i in range(n):\n    country, year = input().strip().split()\n    if country in trips:\n        trips[country].append(int(year))\n    else:\n        trips[country] = [int(year)]\n\nq = int(input().strip())\nfor i in range(q):\n    country, k = input().strip().split()\n    print(sorted(trips[country])[int(k)-1])\n"
    },
    {
      "index": 1,
      "text": "def get_input():\n    n = int(input())\n\n    trips = {}\n    for i in range(n):\n        country, year = input().split()\n        if country in trips:\n            trips[country].append(int(year))\n        else:\n            trips[country] = [int(year)]\n\n    q = int(input())\n    for i in range(q):\n        country, k = input().split()\n        print(sorted(trips[country])[int(k)-1])\n\n\nif __name__ == '__main__':\n    get_input()\n"
    }
  ],
  "created": 1649746779,
  "object": "edit"
}
2022-04-12 02:59:46.161199 fix syntax errors 2 ['n = int(input().strip())\n\ntrips = {}\nfor i in range(n):\n    country, year = input().strip().split()\n    if country in trips:\n        trips[country].append(int(year))\n    else:\n        trips[country] = [int(year)]\n\nq = int(input().strip())\nfor i in range(q):\n    country, k = input().strip().split()\n    print(sorted(trips[country])[int(k)-1])\n', "def get_input():\n    n = int(input())\n\n    trips = {}\n    for i in range(n):\n        country, year = input().split()\n        if country in trips:\n            trips[country].append(int(year))\n        else:\n            trips[country] = [int(year)]\n\n    q = int(input())\n    for i in range(q):\n        country, k = input().split()\n        print(sorted(trips[country])[int(k)-1])\n\n\nif __name__ == '__main__':\n    get_input()\n"]
2022-04-12 02:59:46.161213 size on output set 2
2022-04-12 02:59:46.161218 num operations 2
2022-04-12 02:59:46.161221 size on input set 1
2022-04-12 02:59:49.488754 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\ntrips = []\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    trips.append((country, year))\n\nq = int(input())\nqueries = []\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    queries.append((country, k))\n\nfor query in queries:\n    country, k = query\n    trips_to_country = [trip for trip in trips if trip[0] == country]\n    trips_to_country.sort(key=lambda t: t[1], reverse=True)\n    print(trips_to_country[k - 1][1])\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\nn = int(input())\ntrips = []\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    trips.append((country, year))\n\nq = int(input())\nqueries = []\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    queries.append((country, k))\n\nfor query in queries:\n    country, k = query\n    trips_to_country = [trip for trip in trips if trip[0] == country]\n    trips_to_country.sort(key=lambda t: t[1], reverse=True)\n    if k > len(trips_to_country):\n        print('-1')\n    else:\n        print(trips_to_country[k - 1][1])\n"
    }
  ],
  "created": 1649746786,
  "object": "edit"
}
2022-04-12 02:59:49.488936 fix spelling mistakes 2 ['\nn = int(input())\ntrips = []\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    trips.append((country, year))\n\nq = int(input())\nqueries = []\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    queries.append((country, k))\n\nfor query in queries:\n    country, k = query\n    trips_to_country = [trip for trip in trips if trip[0] == country]\n    trips_to_country.sort(key=lambda t: t[1], reverse=True)\n    print(trips_to_country[k - 1][1])\n', "#!/usr/bin/env python3\n\nn = int(input())\ntrips = []\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    trips.append((country, year))\n\nq = int(input())\nqueries = []\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    queries.append((country, k))\n\nfor query in queries:\n    country, k = query\n    trips_to_country = [trip for trip in trips if trip[0] == country]\n    trips_to_country.sort(key=lambda t: t[1], reverse=True)\n    if k > len(trips_to_country):\n        print('-1')\n    else:\n        print(trips_to_country[k - 1][1])\n"]
2022-04-12 02:59:49.488953 size on output set 2
2022-04-12 02:59:49.488956 size on input set 2
2022-04-12 02:59:53.780576 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\nn = int(input())\ntrips = []\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    trips.append((country, year))\n\nq = int(input())\nqueries = []\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    queries.append((country, k))\n\nfor query in queries:\n    country, k = query\n    trips_to_country = sorted(\n        [trip for trip in trips if trip[0] == country],\n        key=lambda t: t[1],\n        reverse=True\n    )\n    if k > len(trips_to_country) or len(trips_to_country) == 0:\n        print('-1')\n    else:\n        print(trips_to_country[k - 1][1])\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\nn = int(input())\ntrips = []\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    trips.append((country, year))\n\nq = int(input())\nqueries = []\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    queries.append((country, k))\n\nfor query in queries:\n    country, k = query\n    trips_to_country = sorted([trip for trip in trips if trip[0] == country], key=lambda t: t[1], reverse=True)\n    if k > len(trips_to_country) or k == 0:\n        print('-1')\n    else:\n        print(trips_to_country[k - 1][1])\n"
    }
  ],
  "created": 1649746789,
  "object": "edit"
}
2022-04-12 02:59:53.780782 fix syntax errors 2 ["#!/usr/bin/env python3\n\nn = int(input())\ntrips = []\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    trips.append((country, year))\n\nq = int(input())\nqueries = []\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    queries.append((country, k))\n\nfor query in queries:\n    country, k = query\n    trips_to_country = sorted(\n        [trip for trip in trips if trip[0] == country],\n        key=lambda t: t[1],\n        reverse=True\n    )\n    if k > len(trips_to_country) or len(trips_to_country) == 0:\n        print('-1')\n    else:\n        print(trips_to_country[k - 1][1])\n", "#!/usr/bin/env python3\n\nn = int(input())\ntrips = []\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    trips.append((country, year))\n\nq = int(input())\nqueries = []\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    queries.append((country, k))\n\nfor query in queries:\n    country, k = query\n    trips_to_country = sorted([trip for trip in trips if trip[0] == country], key=lambda t: t[1], reverse=True)\n    if k > len(trips_to_country) or k == 0:\n        print('-1')\n    else:\n        print(trips_to_country[k - 1][1])\n"]
2022-04-12 03:00:27.010839 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# n = int(input())\n# trips = []\n# for i in range(n):\n#     country, year = input().split()\n#     year = int(year)\n#     trips.append((country, year))\n\n# q = int(input())\n# queries = []\n# for i in range(q):\n#     country, k = input().split()\n#     k = int(k)\n#     queries.append((country, k))\n\n# for query in queries:\n#     country, k = query\n#     trips_to_country = [trip for trip in trips if trip[0] == country]\n#     trips_to_country.sort(key=lambda t: t[1], reverse=True)\n#     print(trips_to_country[k - 1][1])\n\n\n# def fib(n):\n#     if n == 0:\n#         return 0\n#     elif n == 1:\n#         return 1\n#     else:\n#         return fib(n - 1) + fib(n - 2)\n\n\n# def fib_memoized(n):\n#     memo = [0, 1]\n#     if n >= len(memo):\n#         for i in range(len(memo), n + 1):\n#             memo.append(memo[i - 1] + memo[i - 2])\n#     return memo[n]\n\n\n# def fib_memoized_with_dict(n):\n#     memo = {0: 0, 1: 1}\n#     if n not in memo:\n#         memo[n] = fib_memoized_with_dict(n - 1) + fib_memoized_with_dict(n - 2)\n#     return memo[n]\n\n\n# def fib_iterative(n):\n#     if n == 0:\n#         return 0\n#     elif n == 1:\n#         return 1\n#     else:\n#         a = 0\n#         b = 1\n#         for i in range(n):\n#             a, b = b, a + b\n#         return a\n\n\n# print(fib_iterative(10))\n\n\n# def fib_iterative_with_dict(n):\n#     memo = {0: 0, 1: 1}\n#     for i in range(2, n + 1):\n#         memo[i] = memo[i - 1] + memo[i - 2]\n#     return memo[n]\n\n\n# print(fib_iterative_with_dict(10))\n\n\n# def fib_iterative_with_list(n):\n#     memo = [0, 1]\n#     for i in range(2, n + 1):\n#         memo.append(memo[i - 1] + memo[i - 2])\n#     return memo[n]\n\n\n# print(fib_iterative_with_list(10))\n\n\n# def fib_iterative_with_list_and_tuple(n):\n#     memo = [0, 1]\n#     for i in range(2, n + 1):\n#         memo.append(sum(memo[-2:]))\n#     return memo[n]\n\n\n# print(fib_iterative_with_list_and_tuple(10))\n\n\n# def fib_iterative_with_tuple(n):\n#     memo = (0, 1)\n#     for i in range(2, n + 1):\n#         memo = (memo[1], sum(memo))\n#     return memo[1]\n\n\n# print(fib_iterative_with_tuple(10))\n\n\n# def fib_iterative_with_tuple_and_list(n):\n#     memo = (0, 1)\n#     for i in range(2, n + 1):\n#         memo = (memo[1], sum(list(memo)))\n#     return memo[1]\n\n\n# print(fib_iterative_with_tuple_and_list(10))\n\n\n# def fib_iterative_with_tuple_and_list_and_tuple(n):\n#     memo = (0, 1)\n#     for i in range(2, n + 1):\n#         memo = (memo[1], sum(list(memo)))\n#     return memo[1]\n\n\n# print(fib_iterative_with_tuple_and_list_and_tuple(10))\n\n\n# def fib_iterative_with_tuple_and_tuple(n):\n#     memo = (0, 1)\n#     for i in range(2, n + 1):\n#         memo = (memo[1], sum(memo))\n#     return memo[1]\n\n\n# print(fib_iterative_with_tuple_and_tuple(10))\n\n\n# def fib_iterative_with_tuple_and_tuple_and_list(n):\n#     memo = (0, 1)\n#     for i in range(2, n + 1):\n#         memo = (memo[1], sum(list(memo)))\n#     return memo[1]\n\n\n# print(fib_iterative_with_tuple_and_tuple_and_list(10))\n\n\n# def fib_iterative_with_tuple_and_tuple_and_tuple(n):\n#     memo = (0, 1)\n#     for i in range(2, n + 1):\n#         memo = (memo[1], sum(memo))\n#     return memo[1]\n\n\n# print(fib_iterative_with_tuple_and_tuple_and_tuple(10))\n\n\n# def fib_iterative_with_tuple_and_tuple_and_tuple_and_list(n):\n#     memo = (0, 1)\n#     for i in range(2, n + 1):\n#         memo = (memo[1], sum(list(memo)))\n#     return memo[1]\n\n\n# print(fib_iterative_with_tuple_and_tuple_and_tuple_and_list(10))\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\ntrips = []\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    trips.append((country, year))\n\nq = int(input())\nqueries = []\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    queries.append((country, k))\n\nfor query in queries:\n    country, k = query\n    trips_to_country = sorted([trip for trip in trips if trip[0] == country], key=lambda t: t[1], reverse=True)\n    print(trips_to_country[k - 1][1] if k <= len(trips_to_country) else -1)\n"
    }
  ],
  "created": 1649746793,
  "object": "edit"
}
2022-04-12 03:00:27.011443 fix syntax errors 2 ['\n# n = int(input())\n# trips = []\n# for i in range(n):\n#     country, year = input().split()\n#     year = int(year)\n#     trips.append((country, year))\n\n# q = int(input())\n# queries = []\n# for i in range(q):\n#     country, k = input().split()\n#     k = int(k)\n#     queries.append((country, k))\n\n# for query in queries:\n#     country, k = query\n#     trips_to_country = [trip for trip in trips if trip[0] == country]\n#     trips_to_country.sort(key=lambda t: t[1], reverse=True)\n#     print(trips_to_country[k - 1][1])\n\n\n# def fib(n):\n#     if n == 0:\n#         return 0\n#     elif n == 1:\n#         return 1\n#     else:\n#         return fib(n - 1) + fib(n - 2)\n\n\n# def fib_memoized(n):\n#     memo = [0, 1]\n#     if n >= len(memo):\n#         for i in range(len(memo), n + 1):\n#             memo.append(memo[i - 1] + memo[i - 2])\n#     return memo[n]\n\n\n# def fib_memoized_with_dict(n):\n#     memo = {0: 0, 1: 1}\n#     if n not in memo:\n#         memo[n] = fib_memoized_with_dict(n - 1) + fib_memoized_with_dict(n - 2)\n#     return memo[n]\n\n\n# def fib_iterative(n):\n#     if n == 0:\n#         return 0\n#     elif n == 1:\n#         return 1\n#     else:\n#         a = 0\n#         b = 1\n#         for i in range(n):\n#             a, b = b, a + b\n#         return a\n\n\n# print(fib_iterative(10))\n\n\n# def fib_iterative_with_dict(n):\n#     memo = {0: 0, 1: 1}\n#     for i in range(2, n + 1):\n#         memo[i] = memo[i - 1] + memo[i - 2]\n#     return memo[n]\n\n\n# print(fib_iterative_with_dict(10))\n\n\n# def fib_iterative_with_list(n):\n#     memo = [0, 1]\n#     for i in range(2, n + 1):\n#         memo.append(memo[i - 1] + memo[i - 2])\n#     return memo[n]\n\n\n# print(fib_iterative_with_list(10))\n\n\n# def fib_iterative_with_list_and_tuple(n):\n#     memo = [0, 1]\n#     for i in range(2, n + 1):\n#         memo.append(sum(memo[-2:]))\n#     return memo[n]\n\n\n# print(fib_iterative_with_list_and_tuple(10))\n\n\n# def fib_iterative_with_tuple(n):\n#     memo = (0, 1)\n#     for i in range(2, n + 1):\n#         memo = (memo[1], sum(memo))\n#     return memo[1]\n\n\n# print(fib_iterative_with_tuple(10))\n\n\n# def fib_iterative_with_tuple_and_list(n):\n#     memo = (0, 1)\n#     for i in range(2, n + 1):\n#         memo = (memo[1], sum(list(memo)))\n#     return memo[1]\n\n\n# print(fib_iterative_with_tuple_and_list(10))\n\n\n# def fib_iterative_with_tuple_and_list_and_tuple(n):\n#     memo = (0, 1)\n#     for i in range(2, n + 1):\n#         memo = (memo[1], sum(list(memo)))\n#     return memo[1]\n\n\n# print(fib_iterative_with_tuple_and_list_and_tuple(10))\n\n\n# def fib_iterative_with_tuple_and_tuple(n):\n#     memo = (0, 1)\n#     for i in range(2, n + 1):\n#         memo = (memo[1], sum(memo))\n#     return memo[1]\n\n\n# print(fib_iterative_with_tuple_and_tuple(10))\n\n\n# def fib_iterative_with_tuple_and_tuple_and_list(n):\n#     memo = (0, 1)\n#     for i in range(2, n + 1):\n#         memo = (memo[1], sum(list(memo)))\n#     return memo[1]\n\n\n# print(fib_iterative_with_tuple_and_tuple_and_list(10))\n\n\n# def fib_iterative_with_tuple_and_tuple_and_tuple(n):\n#     memo = (0, 1)\n#     for i in range(2, n + 1):\n#         memo = (memo[1], sum(memo))\n#     return memo[1]\n\n\n# print(fib_iterative_with_tuple_and_tuple_and_tuple(10))\n\n\n# def fib_iterative_with_tuple_and_tuple_and_tuple_and_list(n):\n#     memo = (0, 1)\n#     for i in range(2, n + 1):\n#         memo = (memo[1], sum(list(memo)))\n#     return memo[1]\n\n\n# print(fib_iterative_with_tuple_and_tuple_and_tuple_and_list(10))\n', '\nn = int(input())\ntrips = []\nfor i in range(n):\n    country, year = input().split()\n    year = int(year)\n    trips.append((country, year))\n\nq = int(input())\nqueries = []\nfor i in range(q):\n    country, k = input().split()\n    k = int(k)\n    queries.append((country, k))\n\nfor query in queries:\n    country, k = query\n    trips_to_country = sorted([trip for trip in trips if trip[0] == country], key=lambda t: t[1], reverse=True)\n    print(trips_to_country[k - 1][1] if k <= len(trips_to_country) else -1)\n']
2022-04-12 03:00:27.011522 size on output set 4
