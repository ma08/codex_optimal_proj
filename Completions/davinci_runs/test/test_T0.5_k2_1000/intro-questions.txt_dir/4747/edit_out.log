2022-04-11 22:49:36.822819 num operations 2
2022-04-11 22:49:36.822842 size on input set 1
2022-04-11 22:49:42.518763 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k))\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n/2 + 0.5 # n/2 + 1/2\n    else:\n        numerator = 0\n        for i in range(1, n+1):\n            numerator += i * (k-1) / (n**k - 1)\n        return numerator\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k)) # expected score\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n/2 + 0.5 # expected score\n    else:\n        numerator = 0 # expected score\n        for i in range(1, n+1):\n            numerator += i * (k-1) / (n**k - 1) # expected score\n        return numerator # expected score\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649731777,
  "object": "edit"
}
2022-04-11 22:49:42.518946 fix spelling mistakes 2 ['\n\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k))\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n/2 + 0.5 # n/2 + 1/2\n    else:\n        numerator = 0\n        for i in range(1, n+1):\n            numerator += i * (k-1) / (n**k - 1)\n        return numerator\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k)) # expected score\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n/2 + 0.5 # expected score\n    else:\n        numerator = 0 # expected score\n        for i in range(1, n+1):\n            numerator += i * (k-1) / (n**k - 1) # expected score\n        return numerator # expected score\n\nif __name__ == "__main__":\n    main()\n']
2022-04-11 22:49:42.518973 size on output set 2
2022-04-11 22:49:42.518980 size on input set 2
2022-04-11 22:49:48.754404 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k))\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n/2 + 0.5\n    else:\n        numerator = 0\n        for i in range(1, n+1):\n            numerator += i * (k-1) / (n**k - 1)\n        return numerator\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(calc_expected_score(n))\n\ndef calc_expected_score(n):\n    numerator = 0\n    for i in range(1, n+1):\n        numerator += i * (n-1) / (n**n - 1)\n    return numerator\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649731782,
  "object": "edit"
}
2022-04-11 22:49:48.754726 fix syntax errors 2 ['\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k))\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n/2 + 0.5\n    else:\n        numerator = 0\n        for i in range(1, n+1):\n            numerator += i * (k-1) / (n**k - 1)\n        return numerator\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(calc_expected_score(n))\n\ndef calc_expected_score(n):\n    numerator = 0\n    for i in range(1, n+1):\n        numerator += i * (n-1) / (n**n - 1)\n    return numerator\n\nif __name__ == "__main__":\n    main()\n']
2022-04-11 22:49:53.086803 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k)) # expected score\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n/2 + 0.5\n    else:\n        numerator = 0\n        for i in range(1, n+1):\n            numerator += i * (k-1) / (n**k - 1)\n        return numerator\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k)) # expected score\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n/2 + 0.5\n    else:\n        numerator = 0\n        for i in range(1, n+1):\n            numerator += i * (k-1) / (n**k - 1)\n        return numerator\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649731788,
  "object": "edit"
}
2022-04-11 22:49:53.086916 fix syntax errors 2 ['\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k)) # expected score\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n/2 + 0.5\n    else:\n        numerator = 0\n        for i in range(1, n+1):\n            numerator += i * (k-1) / (n**k - 1)\n        return numerator\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k)) # expected score\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n/2 + 0.5\n    else:\n        numerator = 0\n        for i in range(1, n+1):\n            numerator += i * (k-1) / (n**k - 1)\n        return numerator\n\nif __name__ == "__main__":\n    main()\n']
2022-04-11 22:49:53.086930 size on output set 3
2022-04-11 22:49:53.086943 num operations 2
2022-04-11 22:49:53.086946 size on input set 1
2022-04-11 22:50:00.302761 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    # Read the input\n    n, k = map(int, sys.stdin.readline().split())\n    \n    # Compute the expected score.\n    expectedScore = 0\n    for i in range(1, n+1):\n        # Compute the probability of rolling i.\n        probability = 1/float(n)\n        \n        # Compute the expected score of rolling i.\n        score = i\n        \n        # If we can roll again, compute the expected score for that roll.\n        if k > 1:\n            for j in range(1, n+1):\n                # Compute the probability of rolling j.\n                probability *= 1/float(n)\n                \n                # Compute the expected score of rolling j.\n                score += j\n        \n        # Add the expected score of this roll to the total expected score.\n        expectedScore += probability*score\n    \n    # Print the expected score.\n    print(expectedScore)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    # Read the input\n    n, k = map(int, sys.stdin.readline().split())\n    \n    # Compute the expected score\n    expectedScore = 0\n    for i in range(1, n+1):\n        # Compute the probability of rolling i\n        probability = 1/float(n)\n        \n        # Compute the expected score of rolling i\n        score = i\n        \n        # If we can roll again, compute the expected score for that roll\n        if k > 1:\n            for j in range(1, n+1):\n                # Compute the probability of rolling j\n                probability *= 1/float(n)\n                \n                # Compute the expected score of rolling j\n                score += j\n        \n        # Add the expected score of this roll to the total expected score\n        expectedScore += probability*score\n    \n    # Print the expected score\n    print(expectedScore)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649731793,
  "object": "edit"
}
2022-04-11 22:50:00.302975 fix spelling mistakes 2 ["\n\nimport sys\n\ndef main():\n    # Read the input\n    n, k = map(int, sys.stdin.readline().split())\n    \n    # Compute the expected score.\n    expectedScore = 0\n    for i in range(1, n+1):\n        # Compute the probability of rolling i.\n        probability = 1/float(n)\n        \n        # Compute the expected score of rolling i.\n        score = i\n        \n        # If we can roll again, compute the expected score for that roll.\n        if k > 1:\n            for j in range(1, n+1):\n                # Compute the probability of rolling j.\n                probability *= 1/float(n)\n                \n                # Compute the expected score of rolling j.\n                score += j\n        \n        # Add the expected score of this roll to the total expected score.\n        expectedScore += probability*score\n    \n    # Print the expected score.\n    print(expectedScore)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    # Read the input\n    n, k = map(int, sys.stdin.readline().split())\n    \n    # Compute the expected score\n    expectedScore = 0\n    for i in range(1, n+1):\n        # Compute the probability of rolling i\n        probability = 1/float(n)\n        \n        # Compute the expected score of rolling i\n        score = i\n        \n        # If we can roll again, compute the expected score for that roll\n        if k > 1:\n            for j in range(1, n+1):\n                # Compute the probability of rolling j\n                probability *= 1/float(n)\n                \n                # Compute the expected score of rolling j\n                score += j\n        \n        # Add the expected score of this roll to the total expected score\n        expectedScore += probability*score\n    \n    # Print the expected score\n    print(expectedScore)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 22:50:00.303187 size on output set 2
2022-04-11 22:50:00.303194 size on input set 2
2022-04-11 22:50:13.326725 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    # Read the input\n    n, k = map(int, sys.stdin.readline().split())\n    \n    # Compute the expected score\n    expectedScore = 0\n    for i in range(1, n+1):\n        # Compute the probability of rolling i\n        probability = 1.0/n\n        \n        # Compute the expected score of rolling i\n        score = i\n        \n        # If we can roll again, compute the expected score for that roll\n        if k > 1:\n            for j in range(1, n+1):\n                # Compute the probability of rolling j\n                probability *= 1.0/n\n                \n                # Compute the expected score of rolling j\n                score += j\n        \n        # Add the expected score of this roll to the total expected score\n        expectedScore += probability*score\n    \n    # Print the expected score\n    print(expectedScore)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n\t# Read the input\n\tn, k = map(int, sys.stdin.readline().split())\n\t\n\t# Compute the expected score\n\texpectedScore = 0\n\tfor i in range(1, n+1):\n\t\t# Compute the probability of rolling i\n\t\tprobability = 1/float(n)\n\t\t\n\t\t# Compute the expected score of rolling i\n\t\tscore = i\n\t\t\n\t\t# If we can roll again, compute the expected score for that roll\n\t\tif k > 1:\n\t\t\tfor j in range(1, n+1):\n\t\t\t\t# Compute the probability of rolling j\n\t\t\t\tprobability *= 1/float(n)\n\t\t\t\t\n\t\t\t\t# Compute the expected score of rolling j\n\t\t\t\tscore += j\n\t\t\n\t\t# Add the expected score of this roll to the total expected score\n\t\texpectedScore += probability*score\n\t\n\t# Print the expected score\n\tprint(expectedScore)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649731800,
  "object": "edit"
}
2022-04-11 22:50:13.326859 fix syntax errors 2 ["\nimport sys\n\ndef main():\n    # Read the input\n    n, k = map(int, sys.stdin.readline().split())\n    \n    # Compute the expected score\n    expectedScore = 0\n    for i in range(1, n+1):\n        # Compute the probability of rolling i\n        probability = 1.0/n\n        \n        # Compute the expected score of rolling i\n        score = i\n        \n        # If we can roll again, compute the expected score for that roll\n        if k > 1:\n            for j in range(1, n+1):\n                # Compute the probability of rolling j\n                probability *= 1.0/n\n                \n                # Compute the expected score of rolling j\n                score += j\n        \n        # Add the expected score of this roll to the total expected score\n        expectedScore += probability*score\n    \n    # Print the expected score\n    print(expectedScore)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n\t# Read the input\n\tn, k = map(int, sys.stdin.readline().split())\n\t\n\t# Compute the expected score\n\texpectedScore = 0\n\tfor i in range(1, n+1):\n\t\t# Compute the probability of rolling i\n\t\tprobability = 1/float(n)\n\t\t\n\t\t# Compute the expected score of rolling i\n\t\tscore = i\n\t\t\n\t\t# If we can roll again, compute the expected score for that roll\n\t\tif k > 1:\n\t\t\tfor j in range(1, n+1):\n\t\t\t\t# Compute the probability of rolling j\n\t\t\t\tprobability *= 1/float(n)\n\t\t\t\t\n\t\t\t\t# Compute the expected score of rolling j\n\t\t\t\tscore += j\n\t\t\n\t\t# Add the expected score of this roll to the total expected score\n\t\texpectedScore += probability*score\n\t\n\t# Print the expected score\n\tprint(expectedScore)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 22:50:17.217408 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    # Read the input\n    n, k = map(int, sys.stdin.readline().split())\n    \n    # Compute the expected score.\n    expectedScore = 0\n    for i in range(1, n+1):\n        # Compute the probability of rolling i.\n        probability = 1/float(n)\n        \n        # Compute the expected score of rolling i.\n        score = i\n        \n        # If we can roll again, compute the expected score for that roll.\n        if k > 1:\n            for j in range(1, n+1):\n                # Compute the probability of rolling j.\n                probability *= 1/float(n)\n                \n                # Compute the expected score of rolling j.\n                score += j\n        \n        # Add the expected score of this roll to the total expected score.\n        expectedScore += probability*score\n    \n    # Print the expected score.\n    print(expectedScore)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python\n\nimport sys\n\ndef main():\n    # Read the input\n    n, k = map(int, sys.stdin.readline().split())\n\n    # Compute the expected score.\n    expectedScore = 0\n    for i in range(1, n+1):\n        # Compute the probability of rolling i.\n        probability = 1/float(n)\n\n        # Compute the expected score of rolling i.\n        score = i\n\n        # If we can roll again, compute the expected score for that roll.\n        if k > 1:\n            for j in range(1, n+1):\n                # Compute the probability of rolling j.\n                probability *= 1/float(n)\n\n                # Compute the expected score of rolling j.\n                score += j\n\n        # Add the expected score of this roll to the total expected score.\n        expectedScore += probability*score\n\n    # Print the expected score.\n    print(expectedScore)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649731813,
  "object": "edit"
}
2022-04-11 22:50:17.217762 fix syntax errors 2 ["\nimport sys\n\ndef main():\n    # Read the input\n    n, k = map(int, sys.stdin.readline().split())\n    \n    # Compute the expected score.\n    expectedScore = 0\n    for i in range(1, n+1):\n        # Compute the probability of rolling i.\n        probability = 1/float(n)\n        \n        # Compute the expected score of rolling i.\n        score = i\n        \n        # If we can roll again, compute the expected score for that roll.\n        if k > 1:\n            for j in range(1, n+1):\n                # Compute the probability of rolling j.\n                probability *= 1/float(n)\n                \n                # Compute the expected score of rolling j.\n                score += j\n        \n        # Add the expected score of this roll to the total expected score.\n        expectedScore += probability*score\n    \n    # Print the expected score.\n    print(expectedScore)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python\n\nimport sys\n\ndef main():\n    # Read the input\n    n, k = map(int, sys.stdin.readline().split())\n\n    # Compute the expected score.\n    expectedScore = 0\n    for i in range(1, n+1):\n        # Compute the probability of rolling i.\n        probability = 1/float(n)\n\n        # Compute the expected score of rolling i.\n        score = i\n\n        # If we can roll again, compute the expected score for that roll.\n        if k > 1:\n            for j in range(1, n+1):\n                # Compute the probability of rolling j.\n                probability *= 1/float(n)\n\n                # Compute the expected score of rolling j.\n                score += j\n\n        # Add the expected score of this roll to the total expected score.\n        expectedScore += probability*score\n\n    # Print the expected score.\n    print(expectedScore)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 22:50:17.217947 size on output set 4
2022-04-11 22:50:17.217963 num operations 2
2022-04-11 22:50:17.217967 size on input set 1
2022-04-11 22:50:22.870701 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef get_expected(n, k, dp):\n    if k == 1:\n        return n/2\n    if n == 1:\n        return 1\n    if dp[n][k] != -1:\n        return dp[n][k]\n    dp[n][k] = (n/2) + get_expected(n, k-1, dp)\n    return dp[n][k]\n\ndef main():\n    n, k = map(int, input().split())\n    dp = [[-1 for i in range(k+1)] for j in range(n+1)]\n    print(get_expected(n, k, dp))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef get_expected(n, k, d):\n    if k == 1:\n        return n/d\n    if n == 1:\n        return 1\n    return (n/d) + get_expected(n, k-1, d)\n\ndef main():\n    n, k = map(int, input().split())\n    print(get_expected(n, k, 2))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649731817,
  "object": "edit"
}
2022-04-11 22:50:22.871069 fix spelling mistakes 2 ["\n\ndef get_expected(n, k, dp):\n    if k == 1:\n        return n/2\n    if n == 1:\n        return 1\n    if dp[n][k] != -1:\n        return dp[n][k]\n    dp[n][k] = (n/2) + get_expected(n, k-1, dp)\n    return dp[n][k]\n\ndef main():\n    n, k = map(int, input().split())\n    dp = [[-1 for i in range(k+1)] for j in range(n+1)]\n    print(get_expected(n, k, dp))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef get_expected(n, k, d):\n    if k == 1:\n        return n/d\n    if n == 1:\n        return 1\n    return (n/d) + get_expected(n, k-1, d)\n\ndef main():\n    n, k = map(int, input().split())\n    print(get_expected(n, k, 2))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 22:50:22.871110 size on output set 2
2022-04-11 22:50:22.871120 size on input set 2
2022-04-11 22:50:24.872895 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef get_expected(n, k, dp):\n    if k == 1:\n        return n/2\n    if n == 1:\n        return 1\n    if dp[n][k] != -1:\n        return dp[n][k]\n    dp[n][k] = (n/2) + get_expected(n, k-1, dp)\n    return dp[n][k]\n\ndef main():\n    n, k = map(int, input().split())\n    dp = [[-1 for i in range(k+1)] for j in range(n+1)]\n    print(get_expected(n, k, dp))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef get_expected(n, k, dp):\n    if k == 1:\n        return n/2\n    if n == 1:\n        return 1\n    if dp[n][k] != -1:\n        return dp[n][k]\n    dp[n][k] = (n/2) + get_expected(n, k-1, dp)\n    return dp[n][k]\n\ndef main():\n    n, k = map(int, input().split())\n    dp = [[-1 for i in range(k+1)] for j in range(n+1)]\n    print(get_expected(n, k, dp))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649731823,
  "object": "edit"
}
2022-04-11 22:50:24.873241 fix syntax errors 2 ["\ndef get_expected(n, k, dp):\n    if k == 1:\n        return n/2\n    if n == 1:\n        return 1\n    if dp[n][k] != -1:\n        return dp[n][k]\n    dp[n][k] = (n/2) + get_expected(n, k-1, dp)\n    return dp[n][k]\n\ndef main():\n    n, k = map(int, input().split())\n    dp = [[-1 for i in range(k+1)] for j in range(n+1)]\n    print(get_expected(n, k, dp))\n\nif __name__ == '__main__':\n    main()\n", "\ndef get_expected(n, k, dp):\n    if k == 1:\n        return n/2\n    if n == 1:\n        return 1\n    if dp[n][k] != -1:\n        return dp[n][k]\n    dp[n][k] = (n/2) + get_expected(n, k-1, dp)\n    return dp[n][k]\n\ndef main():\n    n, k = map(int, input().split())\n    dp = [[-1 for i in range(k+1)] for j in range(n+1)]\n    print(get_expected(n, k, dp))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 22:50:29.883049 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef get_expected(n, k, d):\n    if k == 1:\n        return n/d\n    if n == 1:\n        return 1\n    return (n/d) + get_expected(n-1, k-1, d)\n\ndef main():\n    n, k = map(int, input().split())\n    print(get_expected(n, k, 2))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef get_expected(n, k):\n    if k == 0:\n        return n\n    if n == 0:\n        return 0\n    return (n/2) + get_expected(n, k-1)\n\ndef main():\n    n, k = map(int, input().split())\n    print(get_expected(n, k))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649731825,
  "object": "edit"
}
2022-04-11 22:50:29.883234 fix syntax errors 2 ["\n\ndef get_expected(n, k, d):\n    if k == 1:\n        return n/d\n    if n == 1:\n        return 1\n    return (n/d) + get_expected(n-1, k-1, d)\n\ndef main():\n    n, k = map(int, input().split())\n    print(get_expected(n, k, 2))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef get_expected(n, k):\n    if k == 0:\n        return n\n    if n == 0:\n        return 0\n    return (n/2) + get_expected(n, k-1)\n\ndef main():\n    n, k = map(int, input().split())\n    print(get_expected(n, k))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-11 22:50:29.883263 size on output set 3
2022-04-11 22:50:29.883277 num operations 2
2022-04-11 22:50:29.883285 size on input set 1
2022-04-11 22:50:32.457557 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\nn, k = map(int, input().split())\n\ndef solve(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return (n + 1) / 2\n    else:\n        return (solve(n, k - 1) + n) / 2\n\nprint(solve(n, k))\n"
    },
    {
      "index": 1,
      "text": "\ndef solve(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return (n + 1) / 2\n    else:\n        return (solve(n, k - 1) + n) / 2\n"
    }
  ],
  "created": 1649731830,
  "object": "edit"
}
2022-04-11 22:50:32.457658 fix spelling mistakes 2 ['#!/usr/bin/env python3\n\nn, k = map(int, input().split())\n\ndef solve(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return (n + 1) / 2\n    else:\n        return (solve(n, k - 1) + n) / 2\n\nprint(solve(n, k))\n', '\ndef solve(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return (n + 1) / 2\n    else:\n        return (solve(n, k - 1) + n) / 2\n']
2022-04-11 22:50:32.457670 size on output set 2
2022-04-11 22:50:32.457742 size on input set 2
2022-04-11 22:50:35.924652 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\nn, k = map(int, input().split())\n\ndef solve(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return (n + 1) // 2\n    else:\n        return (solve(n, k - 1) + n) // 2\n\nprint(solve(n, k))\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\nn, k = map(int, input().split())\n\ndef solve(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return (n + 1) // 2\n    else:\n        return (solve(n, k - 1) + n) // 2\n\nprint(solve(n, k))\n"
    }
  ],
  "created": 1649731832,
  "object": "edit"
}
2022-04-11 22:50:35.924755 fix syntax errors 2 ['#!/usr/bin/env python3\n\nn, k = map(int, input().split())\n\ndef solve(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return (n + 1) // 2\n    else:\n        return (solve(n, k - 1) + n) // 2\n\nprint(solve(n, k))\n', '#!/usr/bin/env python3\n\nn, k = map(int, input().split())\n\ndef solve(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return (n + 1) // 2\n    else:\n        return (solve(n, k - 1) + n) // 2\n\nprint(solve(n, k))\n']
2022-04-11 22:50:39.334842 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef solve(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return (n + 1) // 2\n    else:\n        return (solve(n, k - 1) + n) // 2\n"
    },
    {
      "index": 1,
      "text": "\ndef solve(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return (n + 1) / 2.0\n    else:\n        return (solve(n, k - 1) + n) / 2.0\n"
    }
  ],
  "created": 1649731836,
  "object": "edit"
}
2022-04-11 22:50:39.335136 fix syntax errors 2 ['\ndef solve(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return (n + 1) // 2\n    else:\n        return (solve(n, k - 1) + n) // 2\n', '\ndef solve(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return (n + 1) / 2.0\n    else:\n        return (solve(n, k - 1) + n) / 2.0\n']
2022-04-11 22:50:39.335158 size on output set 3
2022-04-11 22:50:39.335171 num operations 2
2022-04-11 22:50:39.335177 size on input set 1
2022-04-11 22:50:44.675087 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef run(input):\n    n, k = [int(x) for x in input.readline().strip().split()] \n    return (n + 1) / 2.0 + (n - 1) * ((k - 1) / (2.0 * k)) * (n + 1) / 2.0 \n"
    },
    {
      "index": 1,
      "text": "\n\ndef run(input):\n    n, k = [int(x) for x in input.readline().strip().split()]\n    if k == 1:\n        return n\n    if k == 2:\n        return (n + 1) / 2.0 + (n - 1) / 2.0\n    return (n + 1) / 2.0 + (n - 1) * ((k - 2) / (2.0 * k)) * (n + 1) / 2.0\n"
    }
  ],
  "created": 1649731839,
  "object": "edit"
}
2022-04-11 22:50:44.675376 fix spelling mistakes 2 ['\n\ndef run(input):\n    n, k = [int(x) for x in input.readline().strip().split()] \n    return (n + 1) / 2.0 + (n - 1) * ((k - 1) / (2.0 * k)) * (n + 1) / 2.0 \n', '\n\ndef run(input):\n    n, k = [int(x) for x in input.readline().strip().split()]\n    if k == 1:\n        return n\n    if k == 2:\n        return (n + 1) / 2.0 + (n - 1) / 2.0\n    return (n + 1) / 2.0 + (n - 1) * ((k - 2) / (2.0 * k)) * (n + 1) / 2.0\n']
2022-04-11 22:50:44.675405 size on output set 2
2022-04-11 22:50:44.675416 size on input set 2
2022-04-11 22:50:48.496405 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef run(input):\n    n, k = [int(x) for x in input.readline().strip().split()] \n    return (n + 1) / 2.0 + (n - 1) * ((k - 1) / (2.0 * k)) * (n + 1) / 2.0\n"
    },
    {
      "index": 1,
      "text": "\n\ndef run(input):\n    n, k = [int(x) for x in input.readline().strip().split()] \n    return (n + 1) / 2.0 + (n - 1) * ((k - 1) / (2.0 * k)) * (n + 1) / 2.0\n"
    }
  ],
  "created": 1649731844,
  "object": "edit"
}
2022-04-11 22:50:48.496660 fix syntax errors 2 ['\n\ndef run(input):\n    n, k = [int(x) for x in input.readline().strip().split()] \n    return (n + 1) / 2.0 + (n - 1) * ((k - 1) / (2.0 * k)) * (n + 1) / 2.0\n', '\n\ndef run(input):\n    n, k = [int(x) for x in input.readline().strip().split()] \n    return (n + 1) / 2.0 + (n - 1) * ((k - 1) / (2.0 * k)) * (n + 1) / 2.0\n']
2022-04-11 22:50:53.074728 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef run(input):\n    n, k = [int(x) for x in input.readline().strip().split()]\n    if k == 1:\n        return n\n    if k == 2:\n        return (n + 1) / 2.0 + (n - 1) / 2.0 * k\n    return (n + 1) / 2.0 + (n - 1) * ((k - 2) / (2.0 * k)) * (n + 1) / 2.0 * k\n"
    },
    {
      "index": 1,
      "text": "\n\ndef run(input):\n    n, k = [int(x) for x in input.readline().strip().split()]\n    if k == 1:\n        return n\n    if k == 2:\n        return (n + 1) / 2.0 + (n - 1) / 2.0 * k\n    return (n + 1) / 2.0 + (n - 1) * ((k - 2) / (2.0 * k)) * (n + 1) / 2.0 * k\n"
    }
  ],
  "created": 1649731848,
  "object": "edit"
}
2022-04-11 22:50:53.074844 fix syntax errors 2 ['\n\ndef run(input):\n    n, k = [int(x) for x in input.readline().strip().split()]\n    if k == 1:\n        return n\n    if k == 2:\n        return (n + 1) / 2.0 + (n - 1) / 2.0 * k\n    return (n + 1) / 2.0 + (n - 1) * ((k - 2) / (2.0 * k)) * (n + 1) / 2.0 * k\n', '\n\ndef run(input):\n    n, k = [int(x) for x in input.readline().strip().split()]\n    if k == 1:\n        return n\n    if k == 2:\n        return (n + 1) / 2.0 + (n - 1) / 2.0 * k\n    return (n + 1) / 2.0 + (n - 1) * ((k - 2) / (2.0 * k)) * (n + 1) / 2.0 * k\n']
2022-04-11 22:50:53.074858 size on output set 2
2022-04-11 22:50:53.074864 num operations 2
2022-04-11 22:50:53.074867 size on input set 1
2022-04-11 22:50:58.442698 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef solve(n, k):\n    \"\"\"\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 1)\n    1.0\n    >>> solve(2, 2)\n    1.5\n    >>> solve(3, 2)\n    2.0\n    \"\"\"\n    res = 0\n    for i in xrange(1, n+1):\n        for j in xrange(1, k+1):\n            res += i * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n)\n    return res\n\nif __name__ == '__main__':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef solve(n, k):\n    \"\"\"\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 2)\n    1.5\n    >>> solve(6, 2)\n    4.0\n    \"\"\"\n    res = 0\n    for i in xrange(1, n+1):\n        for j in xrange(1, k+1):\n            res += i * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n)\n    return res\n\nif __name__ == '__main__':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n"
    }
  ],
  "created": 1649731853,
  "object": "edit"
}
2022-04-11 22:50:58.442896 fix spelling mistakes 2 ['\n\nimport sys\n\ndef solve(n, k):\n    """\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 1)\n    1.0\n    >>> solve(2, 2)\n    1.5\n    >>> solve(3, 2)\n    2.0\n    """\n    res = 0\n    for i in xrange(1, n+1):\n        for j in xrange(1, k+1):\n            res += i * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n)\n    return res\n\nif __name__ == \'__main__\':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n', '\n\nimport sys\n\ndef solve(n, k):\n    """\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 2)\n    1.5\n    >>> solve(6, 2)\n    4.0\n    """\n    res = 0\n    for i in xrange(1, n+1):\n        for j in xrange(1, k+1):\n            res += i * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n)\n    return res\n\nif __name__ == \'__main__\':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n']
2022-04-11 22:50:58.443014 size on output set 2
2022-04-11 22:50:58.443020 size on input set 2
2022-04-11 22:51:02.866881 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef solve(n, k):\n    \"\"\"\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 2)\n    1.5\n    >>> solve(6, 2)\n    4.0\n    \"\"\"\n    res = 0\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            res += i * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n)\n    return res\n\nif __name__ == '__main__':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef solve(n, k):\n    \"\"\"\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 2)\n    1.5\n    >>> solve(6, 2)\n    4.0\n    \"\"\"\n    res = 0\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            res += i * (1.0 / n) ** 5\n    return res\n\nif __name__ == '__main__':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n"
    }
  ],
  "created": 1649731858,
  "object": "edit"
}
2022-04-11 22:51:02.867310 fix syntax errors 2 ['\nimport sys\n\ndef solve(n, k):\n    """\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 2)\n    1.5\n    >>> solve(6, 2)\n    4.0\n    """\n    res = 0\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            res += i * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n)\n    return res\n\nif __name__ == \'__main__\':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n', '\nimport sys\n\ndef solve(n, k):\n    """\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 2)\n    1.5\n    >>> solve(6, 2)\n    4.0\n    """\n    res = 0\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            res += i * (1.0 / n) ** 5\n    return res\n\nif __name__ == \'__main__\':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n']
2022-04-11 22:51:06.166733 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef solve(n, k):\n    \"\"\"\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 1)\n    1.0\n    >>> solve(2, 2)\n    1.5\n    >>> solve(3, 2)\n    2.0\n    \"\"\"\n    res = 0\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            res += i * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n)\n    return res\n\nif __name__ == '__main__':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef solve(n, k):\n    \"\"\"\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 1)\n    1.0\n    >>> solve(2, 2)\n    1.5\n    >>> solve(3, 2)\n    2.0\n    \"\"\"\n    res = 0\n    for i in xrange(1, n+1):\n        for j in xrange(1, k+1):\n            res += i * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n)\n    return res\n\nif __name__ == '__main__':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n"
    }
  ],
  "created": 1649731863,
  "object": "edit"
}
2022-04-11 22:51:06.167421 fix syntax errors 2 ['\nimport sys\n\ndef solve(n, k):\n    """\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 1)\n    1.0\n    >>> solve(2, 2)\n    1.5\n    >>> solve(3, 2)\n    2.0\n    """\n    res = 0\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            res += i * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n)\n    return res\n\nif __name__ == \'__main__\':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n', 'import sys\n\ndef solve(n, k):\n    """\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 1)\n    1.0\n    >>> solve(2, 2)\n    1.5\n    >>> solve(3, 2)\n    2.0\n    """\n    res = 0\n    for i in xrange(1, n+1):\n        for j in xrange(1, k+1):\n            res += i * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n)\n    return res\n\nif __name__ == \'__main__\':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n']
2022-04-11 22:51:06.167480 size on output set 4
2022-04-11 22:51:06.167498 num operations 2
2022-04-11 22:51:06.167504 size on input set 1
2022-04-11 22:51:09.986831 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split()\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n,k))\n\ndef calculate(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return (n+1)/2 + ((n-1)/n)*(k-1)*calculate(n-1,k-1)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split()\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n,k))\n\ndef calculate(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return (n+1)/2 + ((n-1)/n)*(k-1)*calculate(n-1,k-1)\n\nmain()\n"
    }
  ],
  "created": 1649731866,
  "object": "edit"
}
2022-04-11 22:51:09.987095 fix spelling mistakes 2 ['\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split()\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n,k))\n\ndef calculate(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return (n+1)/2 + ((n-1)/n)*(k-1)*calculate(n-1,k-1)\n\nmain()\n', '\n\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split()\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n,k))\n\ndef calculate(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return (n+1)/2 + ((n-1)/n)*(k-1)*calculate(n-1,k-1)\n\nmain()\n']
2022-04-11 22:51:09.987123 size on output set 2
2022-04-11 22:51:09.987132 size on input set 2
2022-04-11 22:51:15.017140 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split()\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n,k))\n\ndef calculate(n,k):\n    if k == 1:\n        return (n+1.0)/2\n    else:\n        return (n+1.0)/2 + ((n-1.0)/n)*(k-1)*calculate(n-1,k-1)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split(' ')\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n,k))\n\ndef calculate(n,k):\n    if k == 1:\n        return (n+1)/2.0\n    else:\n        return (n+1)/2.0 + ((n-1)/n)*(k-1)*calculate(n-1,k-1)\n\nmain()\n"
    }
  ],
  "created": 1649731870,
  "object": "edit"
}
2022-04-11 22:51:15.017491 fix syntax errors 2 ['\n\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split()\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n,k))\n\ndef calculate(n,k):\n    if k == 1:\n        return (n+1.0)/2\n    else:\n        return (n+1.0)/2 + ((n-1.0)/n)*(k-1)*calculate(n-1,k-1)\n\nmain()\n', "\n\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split(' ')\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n,k))\n\ndef calculate(n,k):\n    if k == 1:\n        return (n+1)/2.0\n    else:\n        return (n+1)/2.0 + ((n-1)/n)*(k-1)*calculate(n-1,k-1)\n\nmain()\n"]
2022-04-11 22:51:19.193041 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split()\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n,k))\n\ndef calculate(n,k):\n    if k == 1:\n        return (n+1.0)/2\n    else:\n        return (n+1.0)/2 + ((n-1.0)/n)*(k-1)*calculate(n-1,k-1)\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split()\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n,k))\n\ndef calculate(n,k):\n    if k == 1:\n        return (n+1.0)/2\n    else:\n        return (n+1.0)/2 + ((n-1.0)/n)*(k-1)*calculate(n-1,k-1)\n\nmain()\n"
    }
  ],
  "created": 1649731875,
  "object": "edit"
}
2022-04-11 22:51:19.193202 fix syntax errors 2 ['\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split()\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n,k))\n\ndef calculate(n,k):\n    if k == 1:\n        return (n+1.0)/2\n    else:\n        return (n+1.0)/2 + ((n-1.0)/n)*(k-1)*calculate(n-1,k-1)\n\nmain()\n', '\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split()\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n,k))\n\ndef calculate(n,k):\n    if k == 1:\n        return (n+1.0)/2\n    else:\n        return (n+1.0)/2 + ((n-1.0)/n)*(k-1)*calculate(n-1,k-1)\n\nmain()\n']
2022-04-11 22:51:19.193227 size on output set 3
2022-04-11 22:51:19.193239 num operations 2
2022-04-11 22:51:19.193247 size on input set 1
2022-04-11 22:51:21.497036 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#Die, k-times.\n\nfrom math import factorial\n\ndef n_choose_k(n,k):\n    return factorial(n)/(factorial(n-k)*factorial(k))\n\ndef expected_value(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))\n"
    },
    {
      "index": 1,
      "text": "\n\n#Die, k-times (expected value)\n\nfrom math import factorial\n\ndef n_choose_k(n,k):\n    return factorial(n)/(factorial(n-k)*factorial(k))\n\ndef expected_value(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))\n"
    }
  ],
  "created": 1649731879,
  "object": "edit"
}
2022-04-11 22:51:21.497341 fix spelling mistakes 2 ['\n\n#Die, k-times.\n\nfrom math import factorial\n\ndef n_choose_k(n,k):\n    return factorial(n)/(factorial(n-k)*factorial(k))\n\ndef expected_value(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))\n', '\n\n#Die, k-times (expected value)\n\nfrom math import factorial\n\ndef n_choose_k(n,k):\n    return factorial(n)/(factorial(n-k)*factorial(k))\n\ndef expected_value(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))\n']
2022-04-11 22:51:21.497367 size on output set 2
2022-04-11 22:51:21.497374 size on input set 2
2022-04-11 22:51:23.961336 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#Die, k-times (expected value) \n\nfrom math import factorial\n\ndef n_choose_k(n,k):\n    return factorial(n)/(factorial(n-k)*factorial(k))\n\ndef expected_value(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))\n"
    },
    {
      "index": 1,
      "text": "\n\n#Die, k-times (expected value) \n\nfrom math import factorial\n\ndef n_choose_k(n,k):\n    return factorial(n)/(factorial(n-k)*factorial(k))\n\ndef expected_value(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))\n"
    }
  ],
  "created": 1649731881,
  "object": "edit"
}
2022-04-11 22:51:23.961859 fix syntax errors 2 ['\n\n#Die, k-times (expected value) \n\nfrom math import factorial\n\ndef n_choose_k(n,k):\n    return factorial(n)/(factorial(n-k)*factorial(k))\n\ndef expected_value(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))\n', '\n\n#Die, k-times (expected value) \n\nfrom math import factorial\n\ndef n_choose_k(n,k):\n    return factorial(n)/(factorial(n-k)*factorial(k))\n\ndef expected_value(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))\n']
2022-04-11 22:51:26.734166 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#Die, k-times. \n\nfrom math import factorial\n\ndef n_choose_k(n,k):\n    return factorial(n)/(factorial(n-k)*factorial(k))\n\ndef expected_value(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))\n"
    },
    {
      "index": 1,
      "text": "\n\n#Die, k-times\n\nfrom math import factorial\n\ndef n_choose_k(n,k):\n    return factorial(n)/(factorial(n-k)*factorial(k))\n\ndef expected_value(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))\n"
    }
  ],
  "created": 1649731884,
  "object": "edit"
}
2022-04-11 22:51:26.734399 fix syntax errors 2 ['\n\n#Die, k-times. \n\nfrom math import factorial\n\ndef n_choose_k(n,k):\n    return factorial(n)/(factorial(n-k)*factorial(k))\n\ndef expected_value(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))\n', '\n\n#Die, k-times\n\nfrom math import factorial\n\ndef n_choose_k(n,k):\n    return factorial(n)/(factorial(n-k)*factorial(k))\n\ndef expected_value(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))\n']
2022-04-11 22:51:26.734542 size on output set 3
