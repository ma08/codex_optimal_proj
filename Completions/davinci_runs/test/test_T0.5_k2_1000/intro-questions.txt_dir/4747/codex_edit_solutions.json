["\nimport sys\n\ndef main():\n    # Read the input\n    n, k = map(int, sys.stdin.readline().split())\n    \n    # Compute the expected score.\n    expectedScore = 0\n    for i in range(1, n+1):\n        # Compute the probability of rolling i.\n        probability = 1/float(n)\n        \n        # Compute the expected score of rolling i.\n        score = i\n        \n        # If we can roll again, compute the expected score for that roll.\n        if k > 1:\n            for j in range(1, n+1):\n                # Compute the probability of rolling j.\n                probability *= 1/float(n)\n                \n                # Compute the expected score of rolling j.\n                score += j\n        \n        # Add the expected score of this roll to the total expected score.\n        expectedScore += probability*score\n    \n    # Print the expected score.\n    print(expectedScore)\n\nif __name__ == '__main__':\n    main()\n", "\ndef get_expected(n, k, dp):\n    if k == 1:\n        return n/2\n    if n == 1:\n        return 1\n    if dp[n][k] != -1:\n        return dp[n][k]\n    dp[n][k] = (n/2) + get_expected(n, k-1, dp)\n    return dp[n][k]\n\ndef main():\n    n, k = map(int, input().split())\n    dp = [[-1 for i in range(k+1)] for j in range(n+1)]\n    print(get_expected(n, k, dp))\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python\n\nimport sys\n\ndef main():\n    # Read the input\n    n, k = map(int, sys.stdin.readline().split())\n\n    # Compute the expected score.\n    expectedScore = 0\n    for i in range(1, n+1):\n        # Compute the probability of rolling i.\n        probability = 1/float(n)\n\n        # Compute the expected score of rolling i.\n        score = i\n\n        # If we can roll again, compute the expected score for that roll.\n        if k > 1:\n            for j in range(1, n+1):\n                # Compute the probability of rolling j.\n                probability *= 1/float(n)\n\n                # Compute the expected score of rolling j.\n                score += j\n\n        # Add the expected score of this roll to the total expected score.\n        expectedScore += probability*score\n\n    # Print the expected score.\n    print(expectedScore)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef run(input):\n    n, k = [int(x) for x in input.readline().strip().split()] \n    return (n + 1) / 2.0 + (n - 1) * ((k - 1) / (2.0 * k)) * (n + 1) / 2.0\n", "import sys\n\ndef solve(n, k):\n    \"\"\"\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 1)\n    1.0\n    >>> solve(2, 2)\n    1.5\n    >>> solve(3, 2)\n    2.0\n    \"\"\"\n    res = 0\n    for i in xrange(1, n+1):\n        for j in xrange(1, k+1):\n            res += i * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n)\n    return res\n\nif __name__ == '__main__':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n", "\nimport sys\n\ndef solve(n, k):\n    \"\"\"\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 1)\n    1.0\n    >>> solve(2, 2)\n    1.5\n    >>> solve(3, 2)\n    2.0\n    \"\"\"\n    res = 0\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            res += i * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n)\n    return res\n\nif __name__ == '__main__':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n", "\n\ndef get_expected(n, k):\n    if k == 0:\n        return n\n    if n == 0:\n        return 0\n    return (n/2) + get_expected(n, k-1)\n\ndef main():\n    n, k = map(int, input().split())\n    print(get_expected(n, k))\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nn, k = map(int, input().split())\n\ndef solve(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return (n + 1) // 2\n    else:\n        return (solve(n, k - 1) + n) // 2\n\nprint(solve(n, k))\n", "\n\ndef get_expected(n, k, d):\n    if k == 1:\n        return n/d\n    if n == 1:\n        return 1\n    return (n/d) + get_expected(n-1, k-1, d)\n\ndef main():\n    n, k = map(int, input().split())\n    print(get_expected(n, k, 2))\n\nif __name__ == '__main__':\n    main()\n", "\n\n#Die, k-times. \n\nfrom math import factorial\n\ndef n_choose_k(n,k):\n    return factorial(n)/(factorial(n-k)*factorial(k))\n\ndef expected_value(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))\n", "\n\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split()\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n,k))\n\ndef calculate(n,k):\n    if k == 1:\n        return (n+1.0)/2\n    else:\n        return (n+1.0)/2 + ((n-1.0)/n)*(k-1)*calculate(n-1,k-1)\n\nmain()\n", "\n\n#Die, k-times (expected value) \n\nfrom math import factorial\n\ndef n_choose_k(n,k):\n    return factorial(n)/(factorial(n-k)*factorial(k))\n\ndef expected_value(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))\n", "\ndef solve(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return (n + 1) // 2\n    else:\n        return (solve(n, k - 1) + n) // 2\n", "\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k))\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n/2 + 0.5\n    else:\n        numerator = 0\n        for i in range(1, n+1):\n            numerator += i * (k-1) / (n**k - 1)\n        return numerator\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef solve(n, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return (n + 1) / 2.0\n    else:\n        return (solve(n, k - 1) + n) / 2.0\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    print(calc_expected_score(n))\n\ndef calc_expected_score(n):\n    numerator = 0\n    for i in range(1, n+1):\n        numerator += i * (n-1) / (n**n - 1)\n    return numerator\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef solve(n, k):\n    \"\"\"\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 2)\n    1.5\n    >>> solve(6, 2)\n    4.0\n    \"\"\"\n    res = 0\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            res += i * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n) * (1.0 / n)\n    return res\n\nif __name__ == '__main__':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n", "\n\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split(' ')\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n,k))\n\ndef calculate(n,k):\n    if k == 1:\n        return (n+1)/2.0\n    else:\n        return (n+1)/2.0 + ((n-1)/n)*(k-1)*calculate(n-1,k-1)\n\nmain()\n", "\nimport sys\n\ndef main():\n\t# Read the input\n\tn, k = map(int, sys.stdin.readline().split())\n\t\n\t# Compute the expected score\n\texpectedScore = 0\n\tfor i in range(1, n+1):\n\t\t# Compute the probability of rolling i\n\t\tprobability = 1/float(n)\n\t\t\n\t\t# Compute the expected score of rolling i\n\t\tscore = i\n\t\t\n\t\t# If we can roll again, compute the expected score for that roll\n\t\tif k > 1:\n\t\t\tfor j in range(1, n+1):\n\t\t\t\t# Compute the probability of rolling j\n\t\t\t\tprobability *= 1/float(n)\n\t\t\t\t\n\t\t\t\t# Compute the expected score of rolling j\n\t\t\t\tscore += j\n\t\t\n\t\t# Add the expected score of this roll to the total expected score\n\t\texpectedScore += probability*score\n\t\n\t# Print the expected score\n\tprint(expectedScore)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef run(input):\n    n, k = [int(x) for x in input.readline().strip().split()]\n    if k == 1:\n        return n\n    if k == 2:\n        return (n + 1) / 2.0 + (n - 1) / 2.0 * k\n    return (n + 1) / 2.0 + (n - 1) * ((k - 2) / (2.0 * k)) * (n + 1) / 2.0 * k\n", "\nimport sys\n\ndef solve(n, k):\n    \"\"\"\n    >>> solve(1, 1)\n    1\n    >>> solve(2, 2)\n    1.5\n    >>> solve(6, 2)\n    4.0\n    \"\"\"\n    res = 0\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            res += i * (1.0 / n) ** 5\n    return res\n\nif __name__ == '__main__':\n    if len(sys.argv) > 1:\n        import doctest\n        doctest.testmod()\n    else:\n        n, k = map(int, sys.stdin.readline().split())\n        print solve(n, k)\n", "\n\n#Die, k-times\n\nfrom math import factorial\n\ndef n_choose_k(n,k):\n    return factorial(n)/(factorial(n-k)*factorial(k))\n\ndef expected_value(n,k):\n    if k == 1:\n        return (n+1)/2\n    else:\n        return ((n+1)/2)*(1-n_choose_k(n,k)/n_choose_k(n+k-1,k)) + expected_value(n,k-1)\n\nn, k = [int(x) for x in input().split()]\nprint(expected_value(n,k))\n", "\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().split())\n    print(calc_expected_score(n, k)) # expected score\n\ndef calc_expected_score(n, k):\n    if k == 1:\n        return n/2 + 0.5\n    else:\n        numerator = 0\n        for i in range(1, n+1):\n            numerator += i * (k-1) / (n**k - 1)\n        return numerator\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    # Read the input\n    n, k = map(int, sys.stdin.readline().split())\n    \n    # Compute the expected score\n    expectedScore = 0\n    for i in range(1, n+1):\n        # Compute the probability of rolling i\n        probability = 1.0/n\n        \n        # Compute the expected score of rolling i\n        score = i\n        \n        # If we can roll again, compute the expected score for that roll\n        if k > 1:\n            for j in range(1, n+1):\n                # Compute the probability of rolling j\n                probability *= 1.0/n\n                \n                # Compute the expected score of rolling j\n                score += j\n        \n        # Add the expected score of this roll to the total expected score\n        expectedScore += probability*score\n    \n    # Print the expected score\n    print(expectedScore)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, k = sys.stdin.readline().split()\n    n = int(n)\n    k = int(k)\n\n    print(calculate(n,k))\n\ndef calculate(n,k):\n    if k == 1:\n        return (n+1.0)/2\n    else:\n        return (n+1.0)/2 + ((n-1.0)/n)*(k-1)*calculate(n-1,k-1)\n\nmain()\n"]