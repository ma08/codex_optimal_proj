["\n\ndef check_password(password, message):\n    password = list(password)\n    for i in range(len(password)):  # check if password is in message\n        try:\n            index = message.index(password[i])\n        except ValueError:\n            return \"FAIL\"\n        message = message[index+1:]\n    return \"PASS\"\n\nprint(check_password(input(), input()))\n", "\n\n# Get the input from the user\npassword = input().strip()\nmessage = input().strip()\n\n# Set up the variables for the for loop\nj = 0\ni = 0\n\n# For loop that loops until the end of the password is reached\nwhile i < len(password):\n\n    # If the character at index i is found in the message, it sets the variable j to that index and add 1 to i\n    if password[i] in message[j:]:\n        j = message[j:].index(password[i]) + j + 1\n        i += 1\n\n    # If the character at index i is not found in the message, it prints fail and breaks out of the loop\n    else:\n        print(\"FAIL\")\n        break\n\n# If the loop completes, it prints pass\nelse:\n    print(\"PASS\")\n", "\n\nimport sys\n\ndef main():\n    password, msg = sys.stdin.readline().split(',')\n    password_i = 0\n    for i in range(len(msg)):\n        if password_i < len(password) and msg[i] == password[password_i]:\n            password_i += 1\n    if password_i == len(password):\n        print('PASS')\n    else:\n        print('FAIL')\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    pass_str, message_str = input().split(' ')\n    pass_ind = 0\n    for char in message_str:\n        if char == pass_str[pass_ind]:\n            pass_ind += 1\n        if pass_ind == len(pass_str):\n            print('PASS')\n            return\n    print('FAIL')\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# SOLUTION 1\n\np, s = input().split()\ni = 0\nfor c in p:\n    i = s.find(c, i)\n    if i == -1:\n        print('FAIL')\n        break\nelse:\n    print('PASS')\n", "\n\ndef main():\n    password = input()\n    message = input()\n\n    # Check if the password is valid or not\n    password_validity = check_password_validity(password)\n    if not password_validity:\n        print(\"FAIL\")\n        return\n\n    # Check if the message is valid or not\n    message_validity = check_message_validity(password, message)\n    print(\"PASS\" if message_validity else \"FAIL\")\n\ndef check_password_validity(password):\n    # Check if the password is valid or not\n    if len(password) < 3 or len(password) > 8:\n        return False\n    return True\n\ndef check_message_validity(password, message):\n    # Check if the message is valid or not\n    if len(message) < 10 or len(message) > 40:\n        return False\n\n\n    # Check if the message is valid for the password or not\n    password_index = 0\n    for character in message:\n        if character == password[password_index]:\n            password_index += 1\n            if password_index == len(password):\n                return True\n    return False\n\nmain()\n", "\n\ndef main():\n    pass_str, message_str = input().split(' ')\n    pass_ind = 0\n    for char in message_str:\n        if char == pass_str[pass_ind]:\n            pass_ind += 1\n        if pass_ind == len(pass_str):\n            print('PASS')\n            return\n    print('FAIL')\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    password, msg = sys.stdin.readline().split()\n    password_i = 0\n    for i in range(len(msg)):\n        if password_i < len(password) and msg[i] == password[password_i]:\n            password_i += 1\n    if password_i == len(password):\n        print('PASS')\n    else:\n        print('FAIL')\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    password = input()\n    message = input()\n\n    # Check if the password is valid or not\n    password_validity = check_password_validity(password)\n    if not password_validity:\n        print(\"FAIL\")\n        return\n\n    # Check if the message is valid or not\n    message_validity = check_message_validity(password, message)\n    if message_validity:\n        print(\"PASS\")\n    else:\n        print(\"FAIL\")\n\ndef check_password_validity(password):\n    # Check if the password is valid or not\n    if len(password) < 3 or len(password) > 8:\n        return False\n    return True\n\ndef check_message_validity(password, message):\n    # Check if the message is valid or not\n    if len(message) < 10 or len(message) > 40:\n        return False\n        return False \n\n    # Check if the message is valid for the password or not\n    password_index = 0\n    for character in message:\n        if character == password[password_index]:\n            password_index += 1\n            if password_index == len(password):\n                return True\n    return False\n\nmain()\n", "\n# Gets the input from the user\npassword = input().strip()\nmessage = input().strip()\n\n# Sets up the variables for the for loop\nj = 0\ni = 0\n\n# While loop that loops until the end of the password is reached\nwhile i < len(password):\n\n    # If the character at index i is found in the message, it sets the variable j to that index and adds 1 to i\n    if password[i] in message[j:]:\n        j = message[j:].index(password[i]) + j + 1\n        i += 1\n\n    # If the character at index i is not found in the message, it prints fail and breaks out of the loop\n    else:\n        print(\"FAIL\")\n        break\n\n# If the loop completes, it prints pass\nelse:\n    print(\"PASS\")\n", "\n\ndef check_password(password, message):  # check if password is in message\n    password = list(password)  # convert password to list\n    for i in range(len(password)):\n        try:\n            index = message.index(password[i])  # get index of first occurrence of password character\n        except ValueError:\n            return \"FAIL\"  # if character is not in message, return FAIL\n        message = message[index+1:]  # remove characters before index of character\n    return \"PASS\"  # if all characters are in message, return PASS\n\nprint(check_password(input(), input()))\n", "\n# \nimport fileinput\n\ndef main():\n    for line in fileinput.input():\n        line = line.strip()\n        password, message = line.split()\n        if is_valid_message(password, message):\n            print(\"PASS\")\n        else:\n            print(\"FAIL\")\n\ndef is_valid_message(password, message):\n    for letter in password:\n        if letter not in message:\n            return False\n    for i in range(len(password)-1):\n        if message.index(password[i])>message.index(password[i+1]):\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    main()\n", "\npassword, message = input().split(', ')\n\nfor i in range(len(password)):\n    if message.find(password[i]) == -1:\n        print(\"FAIL\")\n        break\n    else:\n        message = message[message.find(password[i])+1:]\nelse:\n    print(\"PASS\")\n", "\npassword, message = input().split() \n\nfor i in range(len(password)):\n    if message.find(password[i]) == -1:\n        print(\"FAIL\")\n        break\n    else:\n        message = message[message.find(password[i])+1:]\nelse:\n    print(\"PASS\")\n", "\n\ndef main():\n    password = input(\"Enter a password: \")\n    message = input(\"Enter a message: \")\n\n    # Check if the password is valid.\n    password_validity = check_password_validity(password)\n    if not password_validity:\n        print(\"FAIL\")\n        return\n\n    # Check if the message is valid.\n    message_validity = check_message_validity(password, message)\n    if message_validity:\n        print(\"PASS\")\n    else:\n        print(\"FAIL\")\n\ndef check_password_validity(password):\n    # Check if the password is valid.\n    if len(password) < 3 or len(password) > 8:\n        return False\n    return True\n\ndef check_message_validity(password, message):\n    # Check if the message is valid\n    if len(message) < 10 or len(message) > 40:\n        return False\n\n    # Check if the message is valid for the password\n    password_index = 0\n    for character in message:\n        if character == password[password_index]:\n            password_index += 1\n            if password_index == len(password):\n                return True\n    return False\n\nmain()\n", "\nimport sys\n\ndef main():\n    password, msg = sys.stdin.readline().split(' ')\n    password_i = 0\n    for i in range(len(msg)):\n        if password_i < len(password) and msg[i] == password[password_i]:\n            password_i += 1\n    if password_i == len(password):\n        print('PASS')\n    else:\n        print('FAIL')\n\n\nif __name__ == '__main__':\n    main()\n", "\n#!/usr/bin/env python\nimport fileinput\n\ndef main():\n    for line in fileinput.input():\n        line = line.strip()\n        password, message = line.split()\n        if is_valid_message(password, message):\n            print(\"PASS\")\n        else:\n            print(\"FAIL\")\n\ndef is_valid_message(password, message):\n    for letter in password:\n        if letter not in message:\n            return False\n    for i in range(len(password)-1):\n        if message.index(password[i]) > message.index(password[i+1]):\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# Get the input from the user\npassword = input().strip()\nmessage = input().strip()\n\n# Set up the variables for the for loop\nj = 0\ni = 0\n\n# For loop that loops until the end of the password is reached\nwhile i < len(password):\n\n    # If the character at index i is found in the message, it sets the variable j to that index and adds 1 to i\n    if password[i] in message[j:]:\n        j = message[j:].index(password[i]) + j + 1\n        i += 1\n\n    # If the character at index i is not found in the message, it prints fail and breaks out of the loop\n    else:\n        print(\"FAIL\")\n        break\n\n# If the loop completes, it prints pass\nelse:\n    print(\"PASS\")\n", "\nimport fileinput\n\ndef main():\n    for line in fileinput.input():\n        line = line.strip()\n        password, message = line.split()\n        if is_valid_message(password, message):\n            print(\"PASS\")\n        else:\n            print(\"FAIL\")\n\ndef is_valid_message(password, message):\n    for letter in password:\n        if letter not in message:\n            return False\n    for i in range(len(password)-1):\n        if message.index(password[i]) > message.index(password[i+1]):\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    pass_string, message_string = input().split()  # \u0432\u0432\u043e\u0434\u0438\u043c \u043f\u0430\u0440\u043e\u043b\u044c \u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b\n    pass_index = 0  # \u0438\u043d\u0434\u0435\u043a\u0441 \u043f\u0430\u0440\u043e\u043b\u044f\n    for char in message_string:  # \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c \u043f\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044e\n        if char == pass_string[pass_index]:  # \u0435\u0441\u043b\u0438 \u0441\u0438\u043c\u0432\u043e\u043b \u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442 \u0441 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u043c \u043f\u0430\u0440\u043e\u043b\u044f\n            pass_index += 1  # \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043c \u043a \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c\u0443 \u0441\u0438\u043c\u0432\u043e\u043b\u0443 \u043f\u0430\u0440\u043e\u043b\u044f\n        if pass_index == len(pass_string):  # \u0435\u0441\u043b\u0438 \u0434\u043e\u0448\u043b\u0438 \u0434\u043e \u043a\u043e\u043d\u0446\u0430 \u043f\u0430\u0440\u043e\u043b\u044f\n            print('PASS')  # \u0432\u044b\u0432\u043e\u0434\u0438\u043c PASS\n            return\n    print('FAIL')  # \u0438\u043d\u0430\u0447\u0435 \u0432\u044b\u0432\u043e\u0434\u0438\u043c FAIL\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    pass_string, message_string = input().split()  # \u0432\u0432\u043e\u0434\u0438\u043c \u043f\u0430\u0440\u043e\u043b\u044c \u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \n    pass_index = 0  # \u0438\u043d\u0434\u0435\u043a\u0441 \u043f\u0430\u0440\u043e\u043b\u044f\n    for char in message_string:  # \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c \u043f\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044e\n        if char == pass_string[pass_index]:  # \u0435\u0441\u043b\u0438 \u0441\u0438\u043c\u0432\u043e\u043b \u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442 \u0441 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u043c \u043f\u0430\u0440\u043e\u043b\u044f\n            pass_index += 1  # \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043c \u043a \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c\u0443 \u0441\u0438\u043c\u0432\u043e\u043b\u0443 \u043f\u0430\u0440\u043e\u043b\u044f\n        if pass_index == len(pass_string):  # \u0435\u0441\u043b\u0438 \u0434\u043e\u0448\u043b\u0438 \u0434\u043e \u043a\u043e\u043d\u0446\u0430 \u043f\u0430\u0440\u043e\u043b\u044f\n            print('PASS')  # \u0432\u044b\u0432\u043e\u0434\u0438\u043c PASS\n            return\n    print('FAIL')  # \u0438\u043d\u0430\u0447\u0435 \u0432\u044b\u0432\u043e\u0434\u0438\u043c FAIL\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef check_passcode(passcode, message):\n    for i in range(len(passcode)):\n        try:\n            index = message.index(passcode[i])\n        except ValueError:\n            return \"FAIL\"\n        message = message[index+1:]\n    return \"PASS\"\n\nprint(check_passcode(input(), input()))\n", "\n\ndef main():\n    password = input(\"Enter password: \")\n    message = input(\"Enter message: \")\n\n    # Check if the password is valid.\n    password_validity = check_password_validity(password)\n    if not password_validity:\n        print(\"FAIL\")\n        return\n\n    # Check if the message is valid.\n    message_validity = check_message_validity(password, message)\n    if message_validity == True:\n        print(\"PASS\")\n    else:\n        print(\"FAIL\")\n\ndef check_password_validity(password):\n    # Check if the password is valid.\n    if len(password) < 3 or len(password) > 8:\n        return False\n    return True\n\ndef check_message_validity(password, message):\n    # Check if the message is valid\n    if len(message) < 10 or len(message) > 40:\n        return False\n\n    # Check if the message is valid for the password\n    password_index = 0\n    for character in message:\n        if character == password[password_index]:\n            password_index += 1\n            if password_index == len(password):\n                return True\n    return False\n\nmain()\n", "\n\n#SOLUTION \n\np,s = input().split()\ni = 0\nfor c in p:\n    i = s.find(c, i)\n    if i == -1:\n        print('FAIL')\n        break\nelse:\n    print('PASS')\n", "\n\npassword, message = input().split()\n\nfor i in range(len(password)):\n    if message.find(password[i]) == -1:\n        print(\"FAIL\")\n        break\n    else:\n        message = message[message.find(password[i])+1:]\nelse:\n    print(\"PASS\")\n", "\nimport fileinput\n\ndef main():\n    for line in fileinput.input():\n        line = line.strip()\n        password, message = line.split()\n        if is_valid_message(password, message):\n            print(\"PASS\")\n        else:\n            print(\"FAIL\")\ndef is_valid_message(password, message):\n    for letter in password:\n        if letter not in message:\n            return False\n    for i in range(len(password)-1):\n        if message.index(password[i]) > message.index(password[i+1]):\n            return False\n    return True\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef check_passcode(passcode, message):\n    passcode = list(passcode)  # convert to list\n    for i in range(len(passcode)):\n        try:\n            index = message.index(passcode[i])  # find the index of the passcode in the message\n        except ValueError:\n            return \"FAIL\"\n        message = message[index+1:]  # remove the found passcode from the message\n    return \"PASS\"\n\nprint(check_passcode(input(), input()))\n", "\n\n# # Gets the input from the user\n# password = input().strip()\n# message = input().strip()\n\n# # Sets up the variables for the for loop\n# j = 0\n# i = 0\n\n# # While loop that loops until the end of the password is reached\n# while i < len(password):\n\n#     # If the character at index i is found in the message, it sets the variable j to that index and adds 1 to i\n#     if password[i] in message[j:]:\n#         j = message[j:].index(password[i]) + j + 1\n#         i += 1\n\n#     # If the character at index i is not found in the message, it prints fail and breaks out of the loop\n#     else:\n#         print(\"FAIL\")\n#         break\n\n# # If the loop completes, it prints pass\n# else:\n#     print(\"PASS\")\n\n\n# def is_prime(n):\n#     for i in range(2, n):\n#         if n % i == 0:\n#             return False\n#     return True\n\n# print(is_prime(9))\n\n\n# def is_prime(n):\n#     if n == 2:\n#         return True\n#     if n % 2 == 0:\n#         return False\n#     for i in range(3, n, 2):\n#         if n % i == 0:\n#             return False\n#     return True\n\n# print(is_prime(9))\n\n\n# def is_prime(n):\n#     if n == 2:\n#         return True\n#     if n % 2 == 0:\n#         return False\n#     for i in range(3, int(n ** 0.5) + 1, 2):\n#         if n % i == 0:\n#             return False\n#     return True\n\n# print(is_prime(9))\n\n\n# def is_prime(n):\n#     if n == 2:\n#         return True\n#     if n % 2 == 0:\n#         return False\n#     for i in range(3, int(n ** 0.5) + 1, 2):\n#         if n % i == 0:\n#             return False\n#     return True\n\n# print(is_prime(9))\n\n\n# def is_prime(n):\n#     if n == 2:\n#         return True\n#     if n % 2 == 0:\n#         return False\n#     for i in range(3, int(n ** 0.5) + 1, 2):\n#         if n % i == 0:\n#             return False\n#     return True\n\n# print(is_prime(9))\n\n\n# def is_prime(n):\n#     if n == 2:\n#         return True\n#     if n % 2 == 0:\n#         return False\n#     for i in range(3, int(n ** 0.5) + 1, 2):\n#         if n % i == 0:\n#             return False\n#     return True\n\n# print(is_prime(9))\n\n\n# def is_prime(n):\n#     if n == 2:\n#         return True\n#     if n % 2 == 0:\n#         return False\n#     for i in range(3, int(n ** 0.5) + 1, 2):\n#         if n % i == 0:\n#             return False\n#     return True\n\n# print(is_prime(9))\n\n\n# def is_prime(n):\n#     if n == 2:\n#         return True\n#     if n % 2 == 0:\n#         return False\n#     for i in range(3, int(n ** 0.5) + 1, 2):\n#         if n % i == 0:\n#             return False\n#     return True\n\n# print(is_prime(9))\n\n\n# def is_prime(n):\n#     if n == 2:\n#         return True\n#     if n % 2 == 0:\n#         return False\n#     for i in range(3, int(n ** 0.5) + 1, 2):\n#         if n % i == 0:\n#             return False\n#     return True\n\n# print(is_prime(9))\n\n\n# def is_prime(n):\n#     if n == 2:\n#         return True\n#     if n % 2 == 0:\n#         return False\n#     for i in range(3, int(n ** 0.5) + 1, 2):\n#         if n % i == 0:\n#             return False\n#     return True\n\n# print(is_prime(9))\n\n\n# def is_prime(n):\n#     if n == 2:\n#         return True\n#     if n % 2 == 0:\n#         return False\n#     for i in range(3, int(n ** 0.5) + 1, 2):\n#         if n % i == 0:\n#             return False\n#     return True\n\n# print(is_prime(9))\n\n\n# def is_prime(n):\n#     if n == 2:\n#         return True\n#     if n % 2 == 0:\n#         return False\n#     for i in range(3, int(n ** 0.5) + 1, 2):\n#         if n % i == 0:\n#             return False\n#     return True\n\n# print(is_prime(9))\n"]