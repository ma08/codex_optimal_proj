["\nbinary = input()\nbinary = binary[::-1]\n\noctal = []\nfor i in range(0, len(binary), 3):\n    if i+3 > len(binary):\n        octal.append(binary[i:])\n    else:\n        octal.append(binary[i:i+3])\n\noctal = [str(int(x, 2)) for x in octal]\noctal = \"\".join(octal[::-1])\nprint(octal)\n", "\n\nbinary = input() #get binary number\nbinary = binary[::-1] #reverse binary number\nbinary = binary + (3 - len(binary) % 3) * '0' #add 0 to the end of the binary number\noctal = '' #create octal number\nfor i in range(0, len(binary), 3): #convert binary number to the octal number\n    octal += str(int(binary[i:i + 3], 2)) #convert binary number to the octal number\n\nprint(int(octal[::-1]))\n", "\n\ndef binary_to_octal(bin):\n    bin = \"0\" * (3 - len(bin) % 3) + bin\n    res = \"\"\n    for i in range(0, len(bin), 3):\n        res += str(int(bin[i:i + 3], 2))\n    return res\n\n\nprint(binary_to_octal(input()))\n", "\ndef convert(number):\n    if number == \"000\":\n        return \"0\"\n    elif number == \"001\":\n        return \"1\"\n    elif number == \"010\":\n        return \"2\"\n    elif number == \"011\":\n        return \"3\"\n    elif number == \"100\":\n        return \"4\"\n    elif number == \"101\":\n        return \"5\"\n    elif number == \"110\":\n        return \"6\"\n    elif number == \"111\":\n        return \"7\"\n\ndef main():\n    binary = input()\n    octa = \"\"\n    while len(binary) % 3 != 0:\n        binary = \"0\" + binary\n    for i in range(0, len(binary), 3):\n        octa += convert(binary[i:i+3])\n    print(octa)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nbinary = input()  # get binary number\nbinary = binary[::-1]  # reverse binary number\nbinary = binary + (3 - len(binary) % 3) * '0'  # add 0 to the end of binary number\noctal = ''  # create octal number\nfor i in range(0, len(binary), 3):  # convert binary number to octal number\n    octal += str(int(binary[i:i + 3], 2))  # convert binary number to octal number\n\nprint(int(octal[::-1]))\n", "\n\nbinary = input(\"enter binary: \")\nbinary = binary[::-1] #reverse the binary\n \noctal = []\nfor i in range(0, len(binary), 3):\n    if i+3 > len(binary): #if the length of the binary is not divisible by 3\n        octal.append(binary[i:])\n    else:\n        octal.append(binary[i:i+3])\n\noctal = [str(int(x, 2)) for x in octal]\noctal = \"\".join(octal[::-1])\nprint(octal)\n", "\n\ndef convert_octal(num):\n    octal = \"\"\n    num = \"0\"*(3-len(num) % 3) + num\n    for i in range(0, len(num), 3):\n        octal += str(int(num[i:i+3], 2))\n    return octal\n\nprint(convert_octal(input()))\n", "\nbinary = input()\n\nn = len(binary)\n\noctal = \"\"\n\nfor i in range(0, n, 3):\n    octal += str(int(binary[i:i + 3], 2))\n\nprint(octal)\n", "\ndef binary_to_octal(binary_number):\n    binary_number = \"0\"*(3-len(binary_number)%3) + binary_number\n    res = \"\"\n    for i in range(0, len(binary_number), 3):\n        res += str(int(binary_number[i:i+3], 2))\n    return res\n\nprint(binary_to_octal(input()))\n", "\n\n#-----main-----#\ndef main():\n\tbinNum = input() #get input\n\tnum = len(binNum) #get length of input\n\tif num % 3 == 1:\n\t\tbinNum = \"00\" + binNum #add two 0s to the front\n\telif num % 3 == 2:\n\t\tbinNum = \"0\" + binNum\n\toctNum = \"\"\n\tfor i in range(0, num, 3):\n\t\toctNum += str(int(binNum[i:i+3], 2))\n\tprint(octNum)\n\nmain()\n", "\n\nbinNumber = input()\noctNumber = ''\n\nwhile len(binNumber) % 3 != 0:\n    binNumber = '0' + binNumber\n\nfor i in range(0, len(binNumber), 3):\n    octNumber += str(int(binNumber[i:i+3], 2))\n\nprint(octNumber)\n\n# %%\n", "\n\ndef binary_to_octal(binary):\n    binary = \"0\"*(3-len(binary)%3) + binary\n    res = \"\"\n    for i in range(0, len(binary), 3):\n        res += str(int(binary[i:i+3], 2))\n    return res\n\nprint(binary_to_octal(input()))\n", "\ndef convert_octal(num):\n    octal = \"\"\n    num = \"0\"*(3-len(num)%3) + num\n    for i in range(0, len(num), 3):\n        octal += str(int(num[i:i+3], 2))\n    return octal\n\nprint(convert_octal(input()))\n", "#!/usr/bin/env python3\n\n\nbinary = input()\nbinary = binary[::-1]\nbinary = binary + (3 - len(binary) % 3) * '0'  # padding\noctal = ''\nfor i in range(0, len(binary), 3):\n    octal += str(int(binary[i:i + 3], 2))\n\nprint(int(octal[::-1]))\n", "\ndef binary_to_octal(binary_number):\n    binary_number = \"0\"*(3-len(binary_number) % 3) + binary_number\n    res = \"\"\n    for i in range(0, len(binary_number), 3):\n        res += str(int(binary_number[i:i + 3], 2))\n    return res\n\n\nprint(binary_to_octal(input()))\n", "#!/usr/bin/env python3\n\n\nbinary = input()\nbinary = binary[::-1]\nbinary += (3 - len(binary) % 3) * '0'\noctal = ''\nfor i in range(0, len(binary), 3):\n    octal += str(int(binary[i:i + 3], 2))\n\nprint(int(octal[::-1]))\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Mon Mar  2 19:59:06 2020\n\n@author: jing\n\"\"\"\n\n\nbinary = input(\"Enter a binary number: \")\nbinary = binary[::-1]\n\noctal = []\nfor i in range(0, len(binary), 3):\n    if i+3 > len(binary):\n        octal.append(binary[i:])\n    else:\n        octal.append(binary[i:i+3])\n\noctal = [str(int(x, 2)) for x in octal]\noctal = \"\".join(octal[::-1])\nprint(octal)\n", "\ndef convert(number):\n    if number == \"000\":\n        return \"0\"\n    elif number == \"001\":\n        return \"1\"\n    elif number == \"010\":\n        return \"2\"\n    elif number == \"011\":\n        return \"3\"\n    elif number == \"100\":\n        return \"4\"\n    elif number == \"101\":\n        return \"5\"\n    elif number == \"110\":\n        return \"6\"\n    elif number == \"111\":\n        return \"7\"\n\n\ndef main():\n    binary = input()\n    octa = \"\"\n    while len(binary) % 3 != 0:\n        binary = \"0\" + binary\n    for i in range(0, len(binary), 3):\n        octa += convert(binary[i:i+3])\n    print(octa)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\nbinNumber = input()\noctNumber = ''\n\nwhile len(binNumber) % 3 != 0:\n    binNumber = '0' + binNumber\n\nfor i in range(0, len(binNumber), 3):\n    octNumber += str(int(binNumber[i:i+3], 2))\n\nprint(octNumber)\n\n# %%\n", "\n\n#-----main-----#\ndef main():\n    binNum = input()\n    num = len(binNum)\n    if num % 3 == 1:\n        binNum = \"00\" + binNum\n    elif num % 3 == 2:\n        binNum = \"0\" + binNum\n    octNum = \"\"\n    for i in range(0, num, 3):\n        octNum += str(int(binNum[i:i+3], 2))\n    print(octNum)\n\nmain()\n", "\ndef convert(number):\n    return {\n        \"000\": \"0\",\n        \"001\": \"1\",\n        \"010\": \"2\",\n        \"011\": \"3\",\n        \"100\": \"4\",\n        \"101\": \"5\",\n        \"110\": \"6\",\n        \"111\": \"7\",\n    }[number]\n\n\ndef main():\n    binary = input(\"Enter the binary number: \")\n    octal = \"\"\n    while len(binary) % 3 != 0:\n        binary = \"0\" + binary\n    for i in range(0, len(binary), 3):\n        octal += convert(binary[i:i + 3])\n    print(octal)\n\n\nif __name__ == \"__main__\":\n    main()\n", "binary = input()\nn = len(binary)\noctal = \"\"\n\nfor i in range(0, n, 3):\n    octal += str(int(binary[i:i+3], 2))\nprint(octal)\n", "\n\ndef convert(number):\n    if number == \"000\": return \"0\"\n    elif number == \"001\": return \"1\"\n    elif number == \"010\": return \"2\"\n    elif number == \"011\": return \"3\"\n    elif number == \"100\": return \"4\"\n    elif number == \"101\": return \"5\"\n    elif number == \"110\": return \"6\"\n    elif number == \"111\": return \"7\"\n\ndef main():\n    binary = input(\"Enter the binary number: \")\n    octal = \"\"\n    while len(binary) % 3 != 0:\n        binary = \"0\" + binary\n    for i in range(0, len(binary), 3):\n        octal += convert(binary[i:i+3])\n    print(octal)\n\nif __name__ == \"__main__\":\n    main()\n"]