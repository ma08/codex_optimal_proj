2022-04-12 01:41:11.292862 num operations 2
2022-04-12 01:41:11.292894 size on input set 1
2022-04-12 01:41:19.958726 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nM, N, C = input().split()\nM = int(M)\nN = int(N)\n\nframe1 = [input() for i in range(M)]\ninput()\nframe2 = [input() for i in range(M)]\n\ndef findFalcon(frame, c):\n    for i in range(M):\n        for j in range(N):\n            if frame[i][j] == c:\n                return i, j\n\ndef shift(frame1, frame2, c):\n    x1, y1 = findFalcon(frame1, c)\n    x2, y2 = findFalcon(frame2, c)\n    return x1 - x2, y1 - y2\n\ndef shiftFrame(frame, dx, dy):\n    return [frame[i][:dy] + ' '*(N - dy) for i in range(M - dx)] + ['']*dx\n\ndef solve(frame1, frame2, c):\n    dx, dy = shift(frame1, frame2, c)\n    shiftedFrame1 = shiftFrame(frame1, dx, dy)\n    shiftedFrame2 = shiftFrame(frame2, dx, dy)\n    for i in range(M):\n        for j in range(N):\n            if frame2[i][j] == c:\n                shiftedFrame1[i] = shiftedFrame1[i][:j] + c + shiftedFrame1[i][j+1:]\n    return shiftedFrame1\n\nprint('\\n'.join(solve(frame1, frame2, C)))\nprint()\n"
    },
    {
      "index": 1,
      "text": "\n\nM, N, C = input().split()\nM = int(M)\nN = int(N)\n\nframe1 = [input() for i in range(M)]\ninput()\nframe2 = [input() for i in range(M)]\n\ndef findFalcon(frame, c):\n    for i in range(M):\n        for j in range(N):\n            if frame[i][j] == c:\n                return i, j\n\ndef shift(frame1, frame2, c):\n    x1, y1 = findFalcon(frame1, c)\n    x2, y2 = findFalcon(frame2, c)\n    return x1 - x2, y1 - y2\n\ndef shiftFrame(frame, dx, dy):\n    return [frame[i][:dy] + ' '*(N - dy) for i in range(M - dx)] + ['']*dx\n\ndef solve(frame1, frame2, c):\n    dx, dy = shift(frame1, frame2, c)\n    shiftedFrame1 = shiftFrame(frame1, dx, dy)\n    shiftedFrame2 = shiftFrame(frame2, dx, dy)\n    for i in range(M):\n        for j in range(N):\n            if frame2[i][j] == c:\n                shiftedFrame1[i] = shiftedFrame1[i][:j] + c + shiftedFrame1[i][j+1:]\n    return shiftedFrame1\n\nprint('\\n'.join(solve(frame1, frame2, C)))\nprint()\n"
    }
  ],
  "created": 1649742071,
  "object": "edit"
}
2022-04-12 01:41:19.958850 fix spelling mistakes 2 ["\n\nM, N, C = input().split()\nM = int(M)\nN = int(N)\n\nframe1 = [input() for i in range(M)]\ninput()\nframe2 = [input() for i in range(M)]\n\ndef findFalcon(frame, c):\n    for i in range(M):\n        for j in range(N):\n            if frame[i][j] == c:\n                return i, j\n\ndef shift(frame1, frame2, c):\n    x1, y1 = findFalcon(frame1, c)\n    x2, y2 = findFalcon(frame2, c)\n    return x1 - x2, y1 - y2\n\ndef shiftFrame(frame, dx, dy):\n    return [frame[i][:dy] + ' '*(N - dy) for i in range(M - dx)] + ['']*dx\n\ndef solve(frame1, frame2, c):\n    dx, dy = shift(frame1, frame2, c)\n    shiftedFrame1 = shiftFrame(frame1, dx, dy)\n    shiftedFrame2 = shiftFrame(frame2, dx, dy)\n    for i in range(M):\n        for j in range(N):\n            if frame2[i][j] == c:\n                shiftedFrame1[i] = shiftedFrame1[i][:j] + c + shiftedFrame1[i][j+1:]\n    return shiftedFrame1\n\nprint('\\n'.join(solve(frame1, frame2, C)))\nprint()\n", "\n\nM, N, C = input().split()\nM = int(M)\nN = int(N)\n\nframe1 = [input() for i in range(M)]\ninput()\nframe2 = [input() for i in range(M)]\n\ndef findFalcon(frame, c):\n    for i in range(M):\n        for j in range(N):\n            if frame[i][j] == c:\n                return i, j\n\ndef shift(frame1, frame2, c):\n    x1, y1 = findFalcon(frame1, c)\n    x2, y2 = findFalcon(frame2, c)\n    return x1 - x2, y1 - y2\n\ndef shiftFrame(frame, dx, dy):\n    return [frame[i][:dy] + ' '*(N - dy) for i in range(M - dx)] + ['']*dx\n\ndef solve(frame1, frame2, c):\n    dx, dy = shift(frame1, frame2, c)\n    shiftedFrame1 = shiftFrame(frame1, dx, dy)\n    shiftedFrame2 = shiftFrame(frame2, dx, dy)\n    for i in range(M):\n        for j in range(N):\n            if frame2[i][j] == c:\n                shiftedFrame1[i] = shiftedFrame1[i][:j] + c + shiftedFrame1[i][j+1:]\n    return shiftedFrame1\n\nprint('\\n'.join(solve(frame1, frame2, C)))\nprint()\n"]
2022-04-12 01:41:19.958871 size on output set 1
2022-04-12 01:41:19.958875 size on input set 1
2022-04-12 01:41:29.820681 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nM, N, C = input().split()\nM = int(M)\nN = int(N)\n\nframe1 = [input() for _ in range(M)]\ninput()\nframe2 = [input() for _ in range(M)]\n\ndef findFalcon(frame, c):\n    for i, row in enumerate(frame):\n        for j, col in enumerate(row):\n            if col == c:\n                return i, j\n\ndef shift(frame1, frame2, c):\n    x1, y1 = findFalcon(frame1, c)\n    x2, y2 = findFalcon(frame2, c)\n    return x1 - x2, y1 - y2\n\ndef shiftFrame(frame, dx, dy):\n    return [row[:dy] + ' '*(N - dy) for row in frame[:M - dx]] + ['']*dx\n\ndef solve(frame1, frame2, c):\n    dx, dy = shift(frame1, frame2, c)\n    shiftedFrame1 = shiftFrame(frame1, dx, dy)\n    shiftedFrame2 = shiftFrame(frame2, dx, dy)\n    for i, row in enumerate(frame2):\n        for j, col in enumerate(row):\n            if col == c:\n                shiftedFrame1[i] = shiftedFrame1[i][:j] + col + shiftedFrame1[i][j+1:]\n    return shiftedFrame1\n\nprint('\\n'.join(solve(frame1, frame2, C)))\nprint()\n"
    },
    {
      "index": 1,
      "text": "\nM, N, C = input().split()\nM = int(M)\nN = int(N)\n\nframe1 = [input() for _ in range(M)]\ninput()\nframe2 = [input() for _ in range(M)]\n\ndef findFalcon(frame, c):\n    for i in range(M) :\n        for j in range(N) :\n            if frame[i][j] == c:\n                return i, j\n\ndef shift(frame1, frame2, c):\n    x1, y1 = findFalcon(frame1, c)\n    x2, y2 = findFalcon(frame2, c)\n    return x1 - x2, y1 - y2\n\ndef shiftFrame(frame, dx, dy):\n    return [frame[i][:dy] + ' '*(N - dy) for i in range(M - dx)] + [''] * dx\n\ndef solve(frame1, frame2, c):\n    dx, dy = shift(frame1, frame2, c)\n    shiftedFrame1 = shiftFrame(frame1, dx, dy)\n    shiftedFrame2 = shiftFrame(frame2, dx, dy)\n    for i in range(M) :\n        for j in range(N) :\n            if frame2[i][j] == c:\n                shiftedFrame1[i] = shiftedFrame1[i][:j] + c + shiftedFrame1[i][j+1:]\n    return shiftedFrame1\n\nprint('\\n'.join(solve(frame1, frame2, C)))\nprint()\n"
    }
  ],
  "created": 1649742080,
  "object": "edit"
}
2022-04-12 01:41:29.820968 fix syntax errors 2 ["\nM, N, C = input().split()\nM = int(M)\nN = int(N)\n\nframe1 = [input() for _ in range(M)]\ninput()\nframe2 = [input() for _ in range(M)]\n\ndef findFalcon(frame, c):\n    for i, row in enumerate(frame):\n        for j, col in enumerate(row):\n            if col == c:\n                return i, j\n\ndef shift(frame1, frame2, c):\n    x1, y1 = findFalcon(frame1, c)\n    x2, y2 = findFalcon(frame2, c)\n    return x1 - x2, y1 - y2\n\ndef shiftFrame(frame, dx, dy):\n    return [row[:dy] + ' '*(N - dy) for row in frame[:M - dx]] + ['']*dx\n\ndef solve(frame1, frame2, c):\n    dx, dy = shift(frame1, frame2, c)\n    shiftedFrame1 = shiftFrame(frame1, dx, dy)\n    shiftedFrame2 = shiftFrame(frame2, dx, dy)\n    for i, row in enumerate(frame2):\n        for j, col in enumerate(row):\n            if col == c:\n                shiftedFrame1[i] = shiftedFrame1[i][:j] + col + shiftedFrame1[i][j+1:]\n    return shiftedFrame1\n\nprint('\\n'.join(solve(frame1, frame2, C)))\nprint()\n", "\nM, N, C = input().split()\nM = int(M)\nN = int(N)\n\nframe1 = [input() for _ in range(M)]\ninput()\nframe2 = [input() for _ in range(M)]\n\ndef findFalcon(frame, c):\n    for i in range(M) :\n        for j in range(N) :\n            if frame[i][j] == c:\n                return i, j\n\ndef shift(frame1, frame2, c):\n    x1, y1 = findFalcon(frame1, c)\n    x2, y2 = findFalcon(frame2, c)\n    return x1 - x2, y1 - y2\n\ndef shiftFrame(frame, dx, dy):\n    return [frame[i][:dy] + ' '*(N - dy) for i in range(M - dx)] + [''] * dx\n\ndef solve(frame1, frame2, c):\n    dx, dy = shift(frame1, frame2, c)\n    shiftedFrame1 = shiftFrame(frame1, dx, dy)\n    shiftedFrame2 = shiftFrame(frame2, dx, dy)\n    for i in range(M) :\n        for j in range(N) :\n            if frame2[i][j] == c:\n                shiftedFrame1[i] = shiftedFrame1[i][:j] + c + shiftedFrame1[i][j+1:]\n    return shiftedFrame1\n\nprint('\\n'.join(solve(frame1, frame2, C)))\nprint()\n"]
2022-04-12 01:41:29.821131 size on output set 2
2022-04-12 01:41:29.821145 num operations 2
2022-04-12 01:41:29.821149 size on input set 1
2022-04-12 01:41:31.968500 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\nimport sys\n\ndef main():\n    while True:\n        line = sys.stdin.readline()\n        if line == \"\":\n            break\n        M, N, C = line.split()\n        M = int(M)\n        N = int(N)\n        first = []\n        for i in range(M):\n            first.append(sys.stdin.readline())\n        sys.stdin.readline()\n        second = []\n        for i in range(M):\n            second.append(sys.stdin.readline())\n        for i in range(M):\n            for j in range(N):\n                if second[i][j] == C:\n                    sys.stdout.write(first[i][j])\n                else:\n                    sys.stdout.write(second[i][j])\n            sys.stdout.write(\"\\n\")\n        sys.stdout.write(\"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    while True:\n        line = sys.stdin.readline()\n        if line == \"\":\n            break\n        M, N, C = line.split()\n        M = int(M)\n        N = int(N)\n        first = []\n        for i in range(M):\n            first.append(sys.stdin.readline())\n        sys.stdin.readline()\n        second = []\n        for i in range(M):\n            second.append(sys.stdin.readline())\n        for i in range(M):\n            for j in range(N):\n                if second[i][j] == C:\n                    sys.stdout.write(first[i][j])\n                else:\n                    sys.stdout.write(second[i][j])\n            sys.stdout.write(\"\\n\")\n        sys.stdout.write(\"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649742090,
  "object": "edit"
}
2022-04-12 01:41:31.968743 fix spelling mistakes 2 ['\n\n\nimport sys\n\ndef main():\n    while True:\n        line = sys.stdin.readline()\n        if line == "":\n            break\n        M, N, C = line.split()\n        M = int(M)\n        N = int(N)\n        first = []\n        for i in range(M):\n            first.append(sys.stdin.readline())\n        sys.stdin.readline()\n        second = []\n        for i in range(M):\n            second.append(sys.stdin.readline())\n        for i in range(M):\n            for j in range(N):\n                if second[i][j] == C:\n                    sys.stdout.write(first[i][j])\n                else:\n                    sys.stdout.write(second[i][j])\n            sys.stdout.write("\\n")\n        sys.stdout.write("\\n")\n\nif __name__ == "__main__":\n    main()\n', '#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    while True:\n        line = sys.stdin.readline()\n        if line == "":\n            break\n        M, N, C = line.split()\n        M = int(M)\n        N = int(N)\n        first = []\n        for i in range(M):\n            first.append(sys.stdin.readline())\n        sys.stdin.readline()\n        second = []\n        for i in range(M):\n            second.append(sys.stdin.readline())\n        for i in range(M):\n            for j in range(N):\n                if second[i][j] == C:\n                    sys.stdout.write(first[i][j])\n                else:\n                    sys.stdout.write(second[i][j])\n            sys.stdout.write("\\n")\n        sys.stdout.write("\\n")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 01:41:31.968782 size on output set 2
2022-04-12 01:41:31.968791 size on input set 2
2022-04-12 01:41:33.958716 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef main():\n    while True:\n        line = sys.stdin.readline()\n        if line == \"\":\n            break\n        M, N, C = line.split()\n        M = int(M)\n        N = int(N)\n        first = []\n        for i in range(M):\n            first.append(sys.stdin.readline())\n        sys.stdin.readline()\n        second = []\n        for i in range(M):\n            second.append(sys.stdin.readline())\n        for i in range(M):\n            for j in range(N):\n                if second[i][j] == C:\n                    sys.stdout.write(first[i][j])\n                else:\n                    sys.stdout.write(second[i][j])\n            sys.stdout.write(\"\\n\")\n        sys.stdout.write(\"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    while True:\n        line = sys.stdin.readline()\n        if line == \"\":\n            break\n        M, N, C = line.split()\n        M = int(M)\n        N = int(N)\n        first = []\n        for i in range(M):\n            first.append(sys.stdin.readline())\n        sys.stdin.readline()\n        second = []\n        for i in range(M):\n            second.append(sys.stdin.readline())\n        for i in range(M):\n            for j in range(N):\n                if second[i][j] == C:\n                    sys.stdout.write(first[i][j])\n                else:\n                    sys.stdout.write(second[i][j])\n            sys.stdout.write(\"\\n\")\n        sys.stdout.write(\"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649742092,
  "object": "edit"
}
2022-04-12 01:41:33.958841 fix syntax errors 2 ['import sys\n\ndef main():\n    while True:\n        line = sys.stdin.readline()\n        if line == "":\n            break\n        M, N, C = line.split()\n        M = int(M)\n        N = int(N)\n        first = []\n        for i in range(M):\n            first.append(sys.stdin.readline())\n        sys.stdin.readline()\n        second = []\n        for i in range(M):\n            second.append(sys.stdin.readline())\n        for i in range(M):\n            for j in range(N):\n                if second[i][j] == C:\n                    sys.stdout.write(first[i][j])\n                else:\n                    sys.stdout.write(second[i][j])\n            sys.stdout.write("\\n")\n        sys.stdout.write("\\n")\n\nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    while True:\n        line = sys.stdin.readline()\n        if line == "":\n            break\n        M, N, C = line.split()\n        M = int(M)\n        N = int(N)\n        first = []\n        for i in range(M):\n            first.append(sys.stdin.readline())\n        sys.stdin.readline()\n        second = []\n        for i in range(M):\n            second.append(sys.stdin.readline())\n        for i in range(M):\n            for j in range(N):\n                if second[i][j] == C:\n                    sys.stdout.write(first[i][j])\n                else:\n                    sys.stdout.write(second[i][j])\n            sys.stdout.write("\\n")\n        sys.stdout.write("\\n")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 01:41:39.406724 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    while True:\n        line = sys.stdin.readline()\n        if line == \"\": # EOF\n            break\n        M, N, C = line.split() # M: number of rows, N: number of columns, C: character to be replaced\n        M = int(M)\n        N = int(N)\n        first = [] # first matrix\n        for i in range(M):\n            first.append(sys.stdin.readline())\n        sys.stdin.readline()\n        second = [] # second matrix\n        for i in range(M):\n            second.append(sys.stdin.readline())\n        for i in range(M):\n            for j in range(N):\n                if second[i][j] == C: # replace\n                    sys.stdout.write(first[i][j])\n                else:\n                    sys.stdout.write(second[i][j])\n            sys.stdout.write(\"\\n\")\n        sys.stdout.write(\"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    while True:\n        line = sys.stdin.readline()\n        if line == '':\n            break\n        M, N, C = line.split(' ')\n        M = int(M)\n        N = int(N)\n        first = []\n        for i in range(M):\n            first.append(sys.stdin.readline())\n        sys.stdin.readline()\n        second = []\n        for i in range(M):\n            second.append(sys.stdin.readline())\n        for i in range(M):\n            for j in range(N):\n                if second[i][j] == C[0]:\n                    sys.stdout.write(first[i][j])\n                else:\n                    sys.stdout.write(second[i][j])\n            sys.stdout.write(\"\\n\")\n        sys.stdout.write(\"\\n\")\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649742094,
  "object": "edit"
}
2022-04-12 01:41:39.407034 fix syntax errors 2 ['#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    while True:\n        line = sys.stdin.readline()\n        if line == "": # EOF\n            break\n        M, N, C = line.split() # M: number of rows, N: number of columns, C: character to be replaced\n        M = int(M)\n        N = int(N)\n        first = [] # first matrix\n        for i in range(M):\n            first.append(sys.stdin.readline())\n        sys.stdin.readline()\n        second = [] # second matrix\n        for i in range(M):\n            second.append(sys.stdin.readline())\n        for i in range(M):\n            for j in range(N):\n                if second[i][j] == C: # replace\n                    sys.stdout.write(first[i][j])\n                else:\n                    sys.stdout.write(second[i][j])\n            sys.stdout.write("\\n")\n        sys.stdout.write("\\n")\n\nif __name__ == "__main__":\n    main()\n', '#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    while True:\n        line = sys.stdin.readline()\n        if line == \'\':\n            break\n        M, N, C = line.split(\' \')\n        M = int(M)\n        N = int(N)\n        first = []\n        for i in range(M):\n            first.append(sys.stdin.readline())\n        sys.stdin.readline()\n        second = []\n        for i in range(M):\n            second.append(sys.stdin.readline())\n        for i in range(M):\n            for j in range(N):\n                if second[i][j] == C[0]:\n                    sys.stdout.write(first[i][j])\n                else:\n                    sys.stdout.write(second[i][j])\n            sys.stdout.write("\\n")\n        sys.stdout.write("\\n")\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-12 01:41:39.407079 size on output set 3
2022-04-12 01:41:39.407092 num operations 2
2022-04-12 01:41:39.407098 size on input set 1
2022-04-12 01:41:44.288822 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef read_input(path):\n    with open(path) as f:\n        lines = [line.strip() for line in f.readlines()]\n    return lines\n\ndef write_output(path, output):\n    with open(path, 'w') as f:\n        f.write(output)\n\ndef solve(lines):\n    M, N, C = lines[0].split()\n    M, N = int(M), int(N)\n    # print(M, N, C)\n    # print(lines[1:M+1])\n    # print(lines[M+1:2*M+1])\n    first_frame = lines[1:M+1]\n    second_frame = lines[M+1:2*M+1]\n    result = []\n    for i in range(M):\n        result.append('')\n        for j in range(N):\n            if first_frame[i][j] == C:\n                if second_frame[i][j] == C:\n                    result[i] += C\n                else:\n                    result[i] += second_frame[i][j]\n            else:\n                result[i] += first_frame[i][j]\n    return '\\n'.join(result)\n\ndef main():\n    lines = read_input(sys.argv[1])\n    output = solve(lines)\n    write_output(sys.argv[2], output)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef read_input(path):\n    with open(path) as f:\n        lines = [line.strip() for line in f.readlines()]\n    return lines\n\ndef write_output(path, output):\n    with open(path, 'w') as f:\n        f.write(output)\n\ndef solve(lines):\n    M, N, C = lines[0].split()\n    M, N = int(M), int(N)\n    # print(M, N, C)\n    # print(lines[1:M+1]) # first frame\n    # print(lines[M+1:3*M+1]) # second frame\n    first_frame = lines[1:M+1]\n    second_frame = lines[M+1:3*M+1]\n    result = []\n    for i in range(M):\n        result.append('')\n        for j in range(N):\n            if first_frame[i][j] == C:\n                if second_frame[i][j] == C:\n                    result[i] += C\n                else:\n                    result[i] += second_frame[i][j]\n            else:\n                result[i] += first_frame[i][j]\n    return '\\n'.join(result)\n\ndef main():\n    lines = read_input(sys.argv[1])\n    output = solve(lines)\n    write_output(sys.argv[2], output)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649742099,
  "object": "edit"
}
2022-04-12 01:41:44.289091 fix spelling mistakes 2 ["\n\nimport sys\n\ndef read_input(path):\n    with open(path) as f:\n        lines = [line.strip() for line in f.readlines()]\n    return lines\n\ndef write_output(path, output):\n    with open(path, 'w') as f:\n        f.write(output)\n\ndef solve(lines):\n    M, N, C = lines[0].split()\n    M, N = int(M), int(N)\n    # print(M, N, C)\n    # print(lines[1:M+1])\n    # print(lines[M+1:2*M+1])\n    first_frame = lines[1:M+1]\n    second_frame = lines[M+1:2*M+1]\n    result = []\n    for i in range(M):\n        result.append('')\n        for j in range(N):\n            if first_frame[i][j] == C:\n                if second_frame[i][j] == C:\n                    result[i] += C\n                else:\n                    result[i] += second_frame[i][j]\n            else:\n                result[i] += first_frame[i][j]\n    return '\\n'.join(result)\n\ndef main():\n    lines = read_input(sys.argv[1])\n    output = solve(lines)\n    write_output(sys.argv[2], output)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef read_input(path):\n    with open(path) as f:\n        lines = [line.strip() for line in f.readlines()]\n    return lines\n\ndef write_output(path, output):\n    with open(path, 'w') as f:\n        f.write(output)\n\ndef solve(lines):\n    M, N, C = lines[0].split()\n    M, N = int(M), int(N)\n    # print(M, N, C)\n    # print(lines[1:M+1]) # first frame\n    # print(lines[M+1:3*M+1]) # second frame\n    first_frame = lines[1:M+1]\n    second_frame = lines[M+1:3*M+1]\n    result = []\n    for i in range(M):\n        result.append('')\n        for j in range(N):\n            if first_frame[i][j] == C:\n                if second_frame[i][j] == C:\n                    result[i] += C\n                else:\n                    result[i] += second_frame[i][j]\n            else:\n                result[i] += first_frame[i][j]\n    return '\\n'.join(result)\n\ndef main():\n    lines = read_input(sys.argv[1])\n    output = solve(lines)\n    write_output(sys.argv[2], output)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 01:41:44.289282 size on output set 2
2022-04-12 01:41:44.289299 size on input set 2
2022-04-12 01:41:46.310646 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef read_input(path):\n    with open(path) as f:\n        lines = [line.strip() for line in f.readlines()]\n    return lines\n\ndef write_output(path, output):\n    with open(path, 'w') as f:\n        f.write(output)\n\ndef solve(lines):\n    M, N, C = lines[0].split()\n    M, N = int(M), int(N)\n    # print(M, N, C)\n    # print(lines[1:M+1])\n    # print(lines[M+1:2*M+1])\n    first_frame = lines[1:M+1]\n    second_frame = lines[M+1:2*M+1]\n    result = []\n    for i in range(M):\n        result.append('')\n        for j in range(N):\n            if first_frame[i][j] == C:\n                if second_frame[i][j] == C:\n                    result[i] += C\n                else:\n                    result[i] += second_frame[i][j]\n            else:\n                result[i] += first_frame[i][j]\n    return '\\n'.join(result)\n\ndef main():\n    lines = read_input(sys.argv[1])\n    output = solve(lines)\n    write_output(sys.argv[2], output)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef read_input(path):\n    with open(path) as f:\n        lines = [line.strip() for line in f.readlines()]\n    return lines\n\ndef write_output(path, output):\n    with open(path, 'w') as f:\n        f.write(output)\n\ndef solve(lines):\n    M, N, C = lines[0].split()\n    M, N = int(M), int(N)\n    # print(M, N, C)\n    # print(lines[1:M+1])\n    # print(lines[M+1:2*M+1])\n    first_frame = lines[1:M+1]\n    second_frame = lines[M+1:2*M+1]\n    result = []\n    for i in range(M):\n        result.append('')\n        for j in range(N):\n            if first_frame[i][j] == C:\n                if second_frame[i][j] == C:\n                    result[i] += C\n                else:\n                    result[i] += second_frame[i][j]\n            else:\n                result[i] += first_frame[i][j]\n    return '\\n'.join(result)\n\ndef main():\n    lines = read_input(sys.argv[1])\n    output = solve(lines)\n    write_output(sys.argv[2], output)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649742104,
  "object": "edit"
}
2022-04-12 01:41:46.310801 fix syntax errors 2 ["\nimport sys\n\ndef read_input(path):\n    with open(path) as f:\n        lines = [line.strip() for line in f.readlines()]\n    return lines\n\ndef write_output(path, output):\n    with open(path, 'w') as f:\n        f.write(output)\n\ndef solve(lines):\n    M, N, C = lines[0].split()\n    M, N = int(M), int(N)\n    # print(M, N, C)\n    # print(lines[1:M+1])\n    # print(lines[M+1:2*M+1])\n    first_frame = lines[1:M+1]\n    second_frame = lines[M+1:2*M+1]\n    result = []\n    for i in range(M):\n        result.append('')\n        for j in range(N):\n            if first_frame[i][j] == C:\n                if second_frame[i][j] == C:\n                    result[i] += C\n                else:\n                    result[i] += second_frame[i][j]\n            else:\n                result[i] += first_frame[i][j]\n    return '\\n'.join(result)\n\ndef main():\n    lines = read_input(sys.argv[1])\n    output = solve(lines)\n    write_output(sys.argv[2], output)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef read_input(path):\n    with open(path) as f:\n        lines = [line.strip() for line in f.readlines()]\n    return lines\n\ndef write_output(path, output):\n    with open(path, 'w') as f:\n        f.write(output)\n\ndef solve(lines):\n    M, N, C = lines[0].split()\n    M, N = int(M), int(N)\n    # print(M, N, C)\n    # print(lines[1:M+1])\n    # print(lines[M+1:2*M+1])\n    first_frame = lines[1:M+1]\n    second_frame = lines[M+1:2*M+1]\n    result = []\n    for i in range(M):\n        result.append('')\n        for j in range(N):\n            if first_frame[i][j] == C:\n                if second_frame[i][j] == C:\n                    result[i] += C\n                else:\n                    result[i] += second_frame[i][j]\n            else:\n                result[i] += first_frame[i][j]\n    return '\\n'.join(result)\n\ndef main():\n    lines = read_input(sys.argv[1])\n    output = solve(lines)\n    write_output(sys.argv[2], output)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 01:41:48.346729 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef read_input(path):\n    with open(path) as f:\n        lines = [line.strip() for line in f.readlines()]\n    return lines\n\ndef write_output(path, output):\n    with open(path, 'w') as f:\n        f.write(output)\n\ndef solve(lines):\n    M, N, C = lines[0].split()\n    M, N = int(M), int(N)\n    # print(M, N, C)\n    # print(lines[1:M+1]) # first frame\n    # print(lines[M+1:3*M+1]) # second frame\n    first_frame = lines[1:M+1]\n    second_frame = lines[M+1:3*M+1]\n    result = []\n    for i in range(M):\n        result.append('')\n        for j in range(N):\n            if first_frame[i][j] == C:\n                if second_frame[i][j] == C:\n                    result[i] += C\n                else:\n                    result[i] += second_frame[i][j]\n            else:\n                result[i] += first_frame[i][j]\n    return '\\n'.join(result)\n\ndef main():\n    lines = read_input(sys.argv[1])\n    output = solve(lines)\n    write_output(sys.argv[2], output)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef read_input(path):\n    with open(path) as f:\n        lines = [line.strip() for line in f.readlines()]\n    return lines\n\ndef write_output(path, output):\n    with open(path, 'w') as f:\n        f.write(output)\n\ndef solve(lines):\n    M, N, C = lines[0].split()\n    M, N = int(M), int(N)\n    # print(M, N, C)\n    # print(lines[1:M+1]) # first frame\n    # print(lines[M+1:3*M+1]) # second frame\n    first_frame = lines[1:M+1]\n    second_frame = lines[M+1:3*M+1]\n    result = []\n    for i in range(M):\n        result.append('')\n        for j in range(N):\n            if first_frame[i][j] == C:\n                if second_frame[i][j] == C:\n                    result[i] += C\n                else:\n                    result[i] += second_frame[i][j]\n            else:\n                result[i] += first_frame[i][j]\n    return '\\n'.join(result)\n\ndef main():\n    lines = read_input(sys.argv[1])\n    output = solve(lines)\n    write_output(sys.argv[2], output)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649742106,
  "object": "edit"
}
2022-04-12 01:41:48.347119 fix syntax errors 2 ["\nimport sys\n\ndef read_input(path):\n    with open(path) as f:\n        lines = [line.strip() for line in f.readlines()]\n    return lines\n\ndef write_output(path, output):\n    with open(path, 'w') as f:\n        f.write(output)\n\ndef solve(lines):\n    M, N, C = lines[0].split()\n    M, N = int(M), int(N)\n    # print(M, N, C)\n    # print(lines[1:M+1]) # first frame\n    # print(lines[M+1:3*M+1]) # second frame\n    first_frame = lines[1:M+1]\n    second_frame = lines[M+1:3*M+1]\n    result = []\n    for i in range(M):\n        result.append('')\n        for j in range(N):\n            if first_frame[i][j] == C:\n                if second_frame[i][j] == C:\n                    result[i] += C\n                else:\n                    result[i] += second_frame[i][j]\n            else:\n                result[i] += first_frame[i][j]\n    return '\\n'.join(result)\n\ndef main():\n    lines = read_input(sys.argv[1])\n    output = solve(lines)\n    write_output(sys.argv[2], output)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef read_input(path):\n    with open(path) as f:\n        lines = [line.strip() for line in f.readlines()]\n    return lines\n\ndef write_output(path, output):\n    with open(path, 'w') as f:\n        f.write(output)\n\ndef solve(lines):\n    M, N, C = lines[0].split()\n    M, N = int(M), int(N)\n    # print(M, N, C)\n    # print(lines[1:M+1]) # first frame\n    # print(lines[M+1:3*M+1]) # second frame\n    first_frame = lines[1:M+1]\n    second_frame = lines[M+1:3*M+1]\n    result = []\n    for i in range(M):\n        result.append('')\n        for j in range(N):\n            if first_frame[i][j] == C:\n                if second_frame[i][j] == C:\n                    result[i] += C\n                else:\n                    result[i] += second_frame[i][j]\n            else:\n                result[i] += first_frame[i][j]\n    return '\\n'.join(result)\n\ndef main():\n    lines = read_input(sys.argv[1])\n    output = solve(lines)\n    write_output(sys.argv[2], output)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 01:41:48.347142 size on output set 2
2022-04-12 01:41:48.347163 num operations 2
2022-04-12 01:41:48.347174 size on input set 1
2022-04-12 01:41:56.047966 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    m, n, c = input().split()\n    m = int(m)\n    n = int(n)\n    first = []\n    second = []\n    for i in range(m):\n        first.append(list(input()))\n    for i in range(m):\n        second.append(list(input()))\n    for i in range(m):\n        for j in range(n):\n            if first[i][j] != C:\n                first[i][j] = '.'\n            else:\n                first[i][j] = 'X'\n            if second[i][j] != C:\n                second[i][j] = '.'\n            else:\n                second[i][j] = 'X'\n    for i in range(m):\n        for j in range(n):\n            if second[i][j] == 'X' and first[i][j] != 'X':\n                second[i][j] = '^'\n    for i in range(m):\n        for j in range(n):\n            if second[i][j] == '^':\n                second[i][j] = '.'\n            if second[i][j] == 'X':\n                second[i][j] = C\n    for i in range(m):\n        print(''.join(second[i]))\n    print()\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    m, n, c = input().split()\n    m = int(m)\n    n = int(n)\n    first = []\n    second = []\n    for i in range(m):\n        first.append(list(input()))\n    for i in range(m):\n        second.append(list(input()))\n    for i in range(m):\n        for j in range(n):\n            if first[i][j] != C:\n                first[i][j] = '.'\n            else:\n                first[i][j] = 'X'\n            if second[i][j] != C:\n                second[i][j] = '.'\n            else:\n                second[i][j] = 'X'\n    for i in range(m):\n        for j in range(n):\n            if second[i][j] == 'X' and first[i][j] != 'X':\n                second[i][j] = '^'\n    for i in range(m):\n        for j in range(n):\n            if second[i][j] == '^':\n                second[i][j] = '.'\n            if second[i][j] == 'X':\n                second[i][j] = C\n    for i in range(m):\n        print(''.join(second[i]))\n    print()\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649742108,
  "object": "edit"
}
2022-04-12 01:41:56.048167 fix spelling mistakes 2 ["\n\ndef main():\n    m, n, c = input().split()\n    m = int(m)\n    n = int(n)\n    first = []\n    second = []\n    for i in range(m):\n        first.append(list(input()))\n    for i in range(m):\n        second.append(list(input()))\n    for i in range(m):\n        for j in range(n):\n            if first[i][j] != C:\n                first[i][j] = '.'\n            else:\n                first[i][j] = 'X'\n            if second[i][j] != C:\n                second[i][j] = '.'\n            else:\n                second[i][j] = 'X'\n    for i in range(m):\n        for j in range(n):\n            if second[i][j] == 'X' and first[i][j] != 'X':\n                second[i][j] = '^'\n    for i in range(m):\n        for j in range(n):\n            if second[i][j] == '^':\n                second[i][j] = '.'\n            if second[i][j] == 'X':\n                second[i][j] = C\n    for i in range(m):\n        print(''.join(second[i]))\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    m, n, c = input().split()\n    m = int(m)\n    n = int(n)\n    first = []\n    second = []\n    for i in range(m):\n        first.append(list(input()))\n    for i in range(m):\n        second.append(list(input()))\n    for i in range(m):\n        for j in range(n):\n            if first[i][j] != C:\n                first[i][j] = '.'\n            else:\n                first[i][j] = 'X'\n            if second[i][j] != C:\n                second[i][j] = '.'\n            else:\n                second[i][j] = 'X'\n    for i in range(m):\n        for j in range(n):\n            if second[i][j] == 'X' and first[i][j] != 'X':\n                second[i][j] = '^'\n    for i in range(m):\n        for j in range(n):\n            if second[i][j] == '^':\n                second[i][j] = '.'\n            if second[i][j] == 'X':\n                second[i][j] = C\n    for i in range(m):\n        print(''.join(second[i]))\n    print()\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 01:41:56.048303 size on output set 1
2022-04-12 01:41:56.048314 size on input set 1
2022-04-12 01:41:59.840558 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    m, n, c = input().split()\n    m = int(m)\n    n = int(n)\n    first = []\n    second = []\n    for i in range(m):\n        first.append(list(input()))\n    for i in range(m):\n        second.append(list(input()))\n    for i in range(m):\n        for j in range(n):\n            if first[i][j] != c:\n                first[i][j] = '.'\n            else:\n                first[i][j] = 'X'\n            if second[i][j] != c:\n                second[i][j] = '.'\n            else:\n                second[i][j] = 'X'\n    for i in range(m):\n        for j in range(n):\n            if second[i][j] == 'X' and first[i][j] != 'X':\n                second[i][j] = '^'\n    for i in range(m):\n        for j in range(n):\n            if second[i][j] == '^':\n                second[i][j] = '.'\n            if second[i][j] == 'X':\n                second[i][j] = c\n    for i in range(m):\n        print(''.join(second[i]))\n    print()\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    m, n, c = input().split()\n    m = int(m)\n    n = int(n)\n    first = []\n    second = []\n    for i in range(m):\n        first.append(list(input()))\n    for i in range(m):\n        second.append(list(input()))\n    for i in range(m):\n        for j in range(n):\n            if first[i][j] != c:\n                first[i][j] = '.'\n            else:\n                first[i][j] = 'X'\n            if second[i][j] != c:\n                second[i][j] = '.'\n            else:\n                second[i][j] = 'X'\n    for i in range(m):\n        for j in range(n):\n            if second[i][j] == 'X' and first[i][j] != 'X':\n                second[i][j] = '^'\n    for i in range(m):\n        for j in range(n):\n            if second[i][j] == '^':\n                second[i][j] = '.'\n            if second[i][j] == 'X':\n                second[i][j] = c\n    for i in range(m):\n        print(''.join(second[i]))\n    print()\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649742116,
  "object": "edit"
}
2022-04-12 01:41:59.840677 fix syntax errors 2 ["\n\ndef main():\n    m, n, c = input().split()\n    m = int(m)\n    n = int(n)\n    first = []\n    second = []\n    for i in range(m):\n        first.append(list(input()))\n    for i in range(m):\n        second.append(list(input()))\n    for i in range(m):\n        for j in range(n):\n            if first[i][j] != c:\n                first[i][j] = '.'\n            else:\n                first[i][j] = 'X'\n            if second[i][j] != c:\n                second[i][j] = '.'\n            else:\n                second[i][j] = 'X'\n    for i in range(m):\n        for j in range(n):\n            if second[i][j] == 'X' and first[i][j] != 'X':\n                second[i][j] = '^'\n    for i in range(m):\n        for j in range(n):\n            if second[i][j] == '^':\n                second[i][j] = '.'\n            if second[i][j] == 'X':\n                second[i][j] = c\n    for i in range(m):\n        print(''.join(second[i]))\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    m, n, c = input().split()\n    m = int(m)\n    n = int(n)\n    first = []\n    second = []\n    for i in range(m):\n        first.append(list(input()))\n    for i in range(m):\n        second.append(list(input()))\n    for i in range(m):\n        for j in range(n):\n            if first[i][j] != c:\n                first[i][j] = '.'\n            else:\n                first[i][j] = 'X'\n            if second[i][j] != c:\n                second[i][j] = '.'\n            else:\n                second[i][j] = 'X'\n    for i in range(m):\n        for j in range(n):\n            if second[i][j] == 'X' and first[i][j] != 'X':\n                second[i][j] = '^'\n    for i in range(m):\n        for j in range(n):\n            if second[i][j] == '^':\n                second[i][j] = '.'\n            if second[i][j] == 'X':\n                second[i][j] = c\n    for i in range(m):\n        print(''.join(second[i]))\n    print()\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 01:41:59.840695 size on output set 1
2022-04-12 01:41:59.840701 num operations 2
2022-04-12 01:41:59.840704 size on input set 1
2022-04-12 01:42:03.349093 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        m, n, c = line.split()\n        m = int(m)\n        n = int(n)\n        \n        frame1 = []\n        for i in range(m):\n            frame1.append(sys.stdin.readline().strip())\n        \n        sys.stdin.readline()\n        \n        frame2 = []\n        for i in range(m):\n            frame2.append(sys.stdin.readline().strip())\n        \n        frame3 = []\n        for i in range(m):\n            frame3.append('')\n            for j in range(n):\n                if frame1[i][j] == c:\n                    frame3[i] += c\n                elif frame2[i][j] == c:\n                    frame3[i] += c\n                else:\n                    frame3[i] += '.'\n        \n        for i in range(m):\n            print(frame3[i])\n        \n        print()\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        m, n, c = line.split()\n        m = int(m)\n        n = int(n)\n\n        frame1 = []\n        for i in range(m):\n            frame1.append(sys.stdin.readline().strip())\n\n        sys.stdin.readline()\n\n        frame2 = []\n        for i in range(m):\n            frame2.append(sys.stdin.readline().strip())\n\n        frame3 = []\n        for i in range(m):\n            frame3.append('')\n            for j in range(n):\n                if frame1[i][j] == c:\n                    frame3[i] += c\n                elif frame2[i][j] == c:\n                    frame3[i] += c\n                else:\n                    frame3[i] += '.'\n\n        for i in range(m):\n            print(frame3[i])\n\n        print()\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649742120,
  "object": "edit"
}
2022-04-12 01:42:03.349456 fix spelling mistakes 2 ["#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        m, n, c = line.split()\n        m = int(m)\n        n = int(n)\n        \n        frame1 = []\n        for i in range(m):\n            frame1.append(sys.stdin.readline().strip())\n        \n        sys.stdin.readline()\n        \n        frame2 = []\n        for i in range(m):\n            frame2.append(sys.stdin.readline().strip())\n        \n        frame3 = []\n        for i in range(m):\n            frame3.append('')\n            for j in range(n):\n                if frame1[i][j] == c:\n                    frame3[i] += c\n                elif frame2[i][j] == c:\n                    frame3[i] += c\n                else:\n                    frame3[i] += '.'\n        \n        for i in range(m):\n            print(frame3[i])\n        \n        print()\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        m, n, c = line.split()\n        m = int(m)\n        n = int(n)\n\n        frame1 = []\n        for i in range(m):\n            frame1.append(sys.stdin.readline().strip())\n\n        sys.stdin.readline()\n\n        frame2 = []\n        for i in range(m):\n            frame2.append(sys.stdin.readline().strip())\n\n        frame3 = []\n        for i in range(m):\n            frame3.append('')\n            for j in range(n):\n                if frame1[i][j] == c:\n                    frame3[i] += c\n                elif frame2[i][j] == c:\n                    frame3[i] += c\n                else:\n                    frame3[i] += '.'\n\n        for i in range(m):\n            print(frame3[i])\n\n        print()\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 01:42:03.349493 size on output set 2
2022-04-12 01:42:03.349499 size on input set 2
2022-04-12 01:42:05.377616 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        m, n, c = line.split()\n        m = int(m)\n        n = int(n)\n\n        frame1 = []\n        for i in range(m):\n            frame1.append(sys.stdin.readline().strip())\n\n        sys.stdin.readline()\n\n        frame2 = []\n        for i in range(m):\n            frame2.append(sys.stdin.readline().strip())\n\n        frame3 = []\n        for i in range(m):\n            frame3.append('')\n            for j in range(n):\n                if frame1[i][j] == c:\n                    frame3[i] += c\n                elif frame2[i][j] == c:\n                    frame3[i] += c\n                else:\n                    frame3[i] += '.'\n\n        for i in range(m):\n            print(frame3[i])\n\n        print()\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        m, n, c = line.split()\n        m = int(m)\n        n = int(n)\n\n        frame1 = []\n        for i in range(m):\n            frame1.append(sys.stdin.readline().strip())\n\n        sys.stdin.readline()\n\n        frame2 = []\n        for i in range(m):\n            frame2.append(sys.stdin.readline().strip())\n\n        frame3 = []\n        for i in range(m):\n            frame3.append('')\n            for j in range(n):\n                if frame1[i][j] == c:\n                    frame3[i] += c\n                elif frame2[i][j] == c:\n                    frame3[i] += c\n                else:\n                    frame3[i] += '.'\n\n        for i in range(m):\n            print(frame3[i])\n\n        print()\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649742123,
  "object": "edit"
}
2022-04-12 01:42:05.377737 fix syntax errors 2 ["\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        m, n, c = line.split()\n        m = int(m)\n        n = int(n)\n\n        frame1 = []\n        for i in range(m):\n            frame1.append(sys.stdin.readline().strip())\n\n        sys.stdin.readline()\n\n        frame2 = []\n        for i in range(m):\n            frame2.append(sys.stdin.readline().strip())\n\n        frame3 = []\n        for i in range(m):\n            frame3.append('')\n            for j in range(n):\n                if frame1[i][j] == c:\n                    frame3[i] += c\n                elif frame2[i][j] == c:\n                    frame3[i] += c\n                else:\n                    frame3[i] += '.'\n\n        for i in range(m):\n            print(frame3[i])\n\n        print()\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        m, n, c = line.split()\n        m = int(m)\n        n = int(n)\n\n        frame1 = []\n        for i in range(m):\n            frame1.append(sys.stdin.readline().strip())\n\n        sys.stdin.readline()\n\n        frame2 = []\n        for i in range(m):\n            frame2.append(sys.stdin.readline().strip())\n\n        frame3 = []\n        for i in range(m):\n            frame3.append('')\n            for j in range(n):\n                if frame1[i][j] == c:\n                    frame3[i] += c\n                elif frame2[i][j] == c:\n                    frame3[i] += c\n                else:\n                    frame3[i] += '.'\n\n        for i in range(m):\n            print(frame3[i])\n\n        print()\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 01:42:08.514751 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        m, n, c = line.strip().split()\n        m = int(m)\n        n = int(n)\n        \n        frame1 = []\n        for i in range(m):\n            frame1.append(sys.stdin.readline().strip())\n        \n        sys.stdin.readline().strip()\n        \n        frame2 = []\n        for i in range(m):\n            frame2.append(sys.stdin.readline().strip())\n        \n        frame3 = []\n        for i in range(m):\n            frame3.append('')\n            for j in range(n):\n                if frame1[i][j] == c:\n                    frame3[i] += c\n                elif frame2[i][j] == c:\n                    frame3[i] += c\n                else:\n                    frame3[i] += '.'\n        \n        for i in range(m):\n            print(frame3[i])\n        \n        print()\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        m, n, c = line.split()\n        m = int(m)\n        n = int(n)\n        \n        frame1 = []\n        for i in range(m):\n            frame1.append(sys.stdin.readline().strip())\n        \n        sys.stdin.readline() # blank line\n        \n        frame2 = []\n        for i in range(m):\n            frame2.append(sys.stdin.readline().strip())\n        \n        frame3 = []\n        for i in range(m):\n            frame3.append('')\n            for j in range(n):\n                if frame1[i][j] == c:\n                    frame3[i] += c\n                elif frame2[i][j] == c:\n                    frame3[i] += c\n                else:\n                    frame3[i] += '.'\n        \n        for i in range(m):\n            print(frame3[i])\n        \n        print() # blank line\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649742125,
  "object": "edit"
}
2022-04-12 01:42:08.515223 fix syntax errors 2 ["#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        m, n, c = line.strip().split()\n        m = int(m)\n        n = int(n)\n        \n        frame1 = []\n        for i in range(m):\n            frame1.append(sys.stdin.readline().strip())\n        \n        sys.stdin.readline().strip()\n        \n        frame2 = []\n        for i in range(m):\n            frame2.append(sys.stdin.readline().strip())\n        \n        frame3 = []\n        for i in range(m):\n            frame3.append('')\n            for j in range(n):\n                if frame1[i][j] == c:\n                    frame3[i] += c\n                elif frame2[i][j] == c:\n                    frame3[i] += c\n                else:\n                    frame3[i] += '.'\n        \n        for i in range(m):\n            print(frame3[i])\n        \n        print()\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    for line in sys.stdin:\n        m, n, c = line.split()\n        m = int(m)\n        n = int(n)\n        \n        frame1 = []\n        for i in range(m):\n            frame1.append(sys.stdin.readline().strip())\n        \n        sys.stdin.readline() # blank line\n        \n        frame2 = []\n        for i in range(m):\n            frame2.append(sys.stdin.readline().strip())\n        \n        frame3 = []\n        for i in range(m):\n            frame3.append('')\n            for j in range(n):\n                if frame1[i][j] == c:\n                    frame3[i] += c\n                elif frame2[i][j] == c:\n                    frame3[i] += c\n                else:\n                    frame3[i] += '.'\n        \n        for i in range(m):\n            print(frame3[i])\n        \n        print() # blank line\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 01:42:08.515258 size on output set 3
2022-04-12 01:42:08.515275 num operations 2
2022-04-12 01:42:08.515280 size on input set 1
2022-04-12 01:42:15.280759 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    m, n, c = input().split()\n    m, n = int(m), int(n)\n    frame1 = [input().strip() for _ in range(m)]\n    input()\n    frame2 = [input().strip() for _ in range(m)]\n\n    frame3 = []\n    for i in range(m):\n        frame3.append(\"\")\n        for j in range(n):\n            if frame1[i][j] == frame2[i][j]:\n                frame3[i] += frame2[i][j]\n            elif frame1[i][j] == c:\n                frame3[i] += frame1[i][j]\n            else:\n                frame3[i] += frame2[i][j]\n\n    for line in frame3:\n        print(line)\n    print()\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    M, N, C = input().split()\n    M, N = int(M), int(N)\n    frame1 = [input().rstrip() for _ in range(M)]\n    input()\n    frame2 = [input().rstrip() for _ in range(M)]\n\n    frame3 = []\n    for i in range(M):\n        frame3.append(\"\")\n        for j in range(N):\n            if frame1[i][j] == frame2[i][j]:\n                frame3[i] += frame2[i][j]\n            elif frame1[i][j] == C:\n                frame3[i] += frame1[i][j]\n            else:\n                frame3[i] += frame2[i][j]\n\n    for line in frame3:\n        print(line)\n    print()\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649742128,
  "object": "edit"
}
2022-04-12 01:42:15.280988 fix spelling mistakes 2 ['\n\nimport sys\n\ndef main():\n    m, n, c = input().split()\n    m, n = int(m), int(n)\n    frame1 = [input().strip() for _ in range(m)]\n    input()\n    frame2 = [input().strip() for _ in range(m)]\n\n    frame3 = []\n    for i in range(m):\n        frame3.append("")\n        for j in range(n):\n            if frame1[i][j] == frame2[i][j]:\n                frame3[i] += frame2[i][j]\n            elif frame1[i][j] == c:\n                frame3[i] += frame1[i][j]\n            else:\n                frame3[i] += frame2[i][j]\n\n    for line in frame3:\n        print(line)\n    print()\n\nif __name__ == \'__main__\':\n    main()\n', '\n\nimport sys\n\ndef main():\n    M, N, C = input().split()\n    M, N = int(M), int(N)\n    frame1 = [input().rstrip() for _ in range(M)]\n    input()\n    frame2 = [input().rstrip() for _ in range(M)]\n\n    frame3 = []\n    for i in range(M):\n        frame3.append("")\n        for j in range(N):\n            if frame1[i][j] == frame2[i][j]:\n                frame3[i] += frame2[i][j]\n            elif frame1[i][j] == C:\n                frame3[i] += frame1[i][j]\n            else:\n                frame3[i] += frame2[i][j]\n\n    for line in frame3:\n        print(line)\n    print()\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-12 01:42:15.281031 size on output set 2
2022-04-12 01:42:15.281041 size on input set 2
2022-04-12 01:42:20.141251 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\ndef main():\n    m, n, c = sys.stdin.readline().split()\n    m, n = int(m), int(n)\n    frame1 = [sys.stdin.readline().strip() for _ in range(m)]\n    sys.stdin.readline()\n    frame2 = [sys.stdin.readline().strip() for _ in range(m)]\n\n    frame3 = []\n    for i in range(m):\n        frame3.append(\"\")\n        for j in range(n):\n            if frame1[i][j] == frame2[i][j]:\n                frame3[i] += frame2[i][j]\n            elif frame1[i][j] == c:\n                frame3[i] += frame1[i][j]\n            else:\n                frame3[i] += frame2[i][j]\n\n    for line in frame3:\n        print(line)\n    print()\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    m, n, c = input().split()\n    m, n = int(m), int(n)\n    frame1 = [input().strip() for _ in range(m)]\n    input()\n    frame2 = [input().strip() for _ in range(m)]\n\n    frame3 = []\n    for i in range(m):\n        frame3.append(\"\")\n        for j in range(n):\n            if frame1[i][j] == frame2[i][j]:\n                frame3[i] += frame2[i][j]\n            elif frame1[i][j] == c:\n                frame3[i] += frame1[i][j]\n            else:\n                frame3[i] += frame2[i][j]\n\n    for line in frame3:\n        print(line)\n    print()\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649742135,
  "object": "edit"
}
2022-04-12 01:42:20.141463 fix syntax errors 2 ['import sys\n\ndef main():\n    m, n, c = sys.stdin.readline().split()\n    m, n = int(m), int(n)\n    frame1 = [sys.stdin.readline().strip() for _ in range(m)]\n    sys.stdin.readline()\n    frame2 = [sys.stdin.readline().strip() for _ in range(m)]\n\n    frame3 = []\n    for i in range(m):\n        frame3.append("")\n        for j in range(n):\n            if frame1[i][j] == frame2[i][j]:\n                frame3[i] += frame2[i][j]\n            elif frame1[i][j] == c:\n                frame3[i] += frame1[i][j]\n            else:\n                frame3[i] += frame2[i][j]\n\n    for line in frame3:\n        print(line)\n    print()\n\nif __name__ == \'__main__\':\n    main()\n', 'import sys\n\ndef main():\n    m, n, c = input().split()\n    m, n = int(m), int(n)\n    frame1 = [input().strip() for _ in range(m)]\n    input()\n    frame2 = [input().strip() for _ in range(m)]\n\n    frame3 = []\n    for i in range(m):\n        frame3.append("")\n        for j in range(n):\n            if frame1[i][j] == frame2[i][j]:\n                frame3[i] += frame2[i][j]\n            elif frame1[i][j] == c:\n                frame3[i] += frame1[i][j]\n            else:\n                frame3[i] += frame2[i][j]\n\n    for line in frame3:\n        print(line)\n    print()\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-12 01:42:27.850865 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    m, n, c = input().split()\n    m, n = int(m), int(n)\n    frame1 = [input().rstrip() for _ in range(m)]\n    input()\n    frame2 = [input().rstrip() for _ in range(m)]\n\n    frame3 = []\n    for i in range(m):\n        frame3.append(\"\")\n        for j in range(n):\n            if frame1[i][j] == frame2[i][j]:\n                frame3[i] += frame2[i][j]\n            elif frame1[i][j] == c:\n                frame3[i] += frame1[i][j]\n            else:\n                frame3[i] += frame2[i][j]\n\n    for line in frame3:\n        print(line)\n    print()\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    M, N, C = sys.stdin.readline().rstrip().split()\n    M, N = int(M), int(N) \n    frame1 = [sys.stdin.readline().rstrip() for _ in range(M)]\n    sys.stdin.readline()\n    frame2 = [sys.stdin.readline().rstrip() for _ in range(M)]\n\n    frame3 = []\n    for i in range(M):\n        frame3.append(\"\")\n        for j in range(N):\n            if frame1[i][j] == frame2[i][j]:\n                frame3[i] += frame2[i][j]\n            elif frame1[i][j] == C:\n                frame3[i] += frame1[i][j]\n            else:\n                frame3[i] += frame2[i][j]\n\n    for line in frame3:\n        sys.stdout.write(line + '\\n')\n    sys.stdout.write('\\n')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649742140,
  "object": "edit"
}
2022-04-12 01:42:27.851164 fix syntax errors 2 ['\nimport sys\n\ndef main():\n    m, n, c = input().split()\n    m, n = int(m), int(n)\n    frame1 = [input().rstrip() for _ in range(m)]\n    input()\n    frame2 = [input().rstrip() for _ in range(m)]\n\n    frame3 = []\n    for i in range(m):\n        frame3.append("")\n        for j in range(n):\n            if frame1[i][j] == frame2[i][j]:\n                frame3[i] += frame2[i][j]\n            elif frame1[i][j] == c:\n                frame3[i] += frame1[i][j]\n            else:\n                frame3[i] += frame2[i][j]\n\n    for line in frame3:\n        print(line)\n    print()\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef main():\n    M, N, C = sys.stdin.readline().rstrip().split()\n    M, N = int(M), int(N) \n    frame1 = [sys.stdin.readline().rstrip() for _ in range(M)]\n    sys.stdin.readline()\n    frame2 = [sys.stdin.readline().rstrip() for _ in range(M)]\n\n    frame3 = []\n    for i in range(M):\n        frame3.append("")\n        for j in range(N):\n            if frame1[i][j] == frame2[i][j]:\n                frame3[i] += frame2[i][j]\n            elif frame1[i][j] == C:\n                frame3[i] += frame1[i][j]\n            else:\n                frame3[i] += frame2[i][j]\n\n    for line in frame3:\n        sys.stdout.write(line + \'\\n\')\n    sys.stdout.write(\'\\n\')\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-12 01:42:27.851204 size on output set 4
2022-04-12 01:42:27.851222 num operations 2
2022-04-12 01:42:27.851230 size on input set 1
2022-04-12 01:42:32.505121 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    # read input\n    n, m, char = sys.stdin.readline().split()\n    n = int(n)\n    m = int(m)\n    char = char[1]\n    image = ['']*n\n    for i in range(n):\n        image[i] = sys.stdin.readline().rstrip()\n    sys.stdin.readline() # empty line\n    for i in range(n):\n        image[i] += sys.stdin.readline().rstrip()\n\n    # find the falcon\n    falcon = []\n    for i in range(n):\n        for j in range(m*2):\n            if image[i][j] == char:\n                falcon.append((i,j))\n\n                # find the leftmost and rightmost points\n                # the points are needed to be able to calculate the center of the falcon\n    left = falcon[0]\n    right = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][1] < left[1]:\n            left = falcon[i]\n        if falcon[i][1] > right[1]:\n            right = falcon[i]\n\n    # calculate the center of the falcon\n    center = (left[0], left[1] + (right[1] - left[1])//2)\n\n    # find the topmost and bottommost points of the falcon\n    # the points are needed to be able to calculate the vertical shift of the falcon\n    top = falcon[0]\n    bottom = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][0] < top[0]:\n            top = falcon[i]\n        if falcon[i][0] > bottom[0]:\n            bottom = falcon[i]\n\n    # calculate the vertical shift\n    shift = (bottom[0] - top[0])//2\n\n    # create the result image\n    result = ['']*n\n    for i in range(n):\n        result[i] = image[i][:m]\n\n    # shift the falcon vertically\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m] = char\n\n    # shift the falcon horizontally\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m+1] = char\n\n    # print the result\n    for i in range(n):\n        print(result[i])\n    print()\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    # read input\n    n, m, char = sys.stdin.readline().split()\n    n = int(n)\n    m = int(m)\n    char = char[1]\n    image = ['']*n\n    for i in range(n):\n        image[i] = sys.stdin.readline().rstrip()\n    sys.stdin.readline() # empty line\n    for i in range(n):\n        image[i] += sys.stdin.readline().rstrip()\n\n    # find the falcon\n    falcon = []\n    for i in range(n):\n        for j in range(m*2):\n            if image[i][j] == char:\n                falcon.append((i,j))\n\n                # find the leftmost and rightmost points\n                # the points are needed to be able to calculate the center of the falcon\n    left = falcon[0]\n    right = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][1] < left[1]:\n            left = falcon[i]\n        if falcon[i][1] > right[1]:\n            right = falcon[i]\n\n    # calculate the center of the falcon\n    center = (left[0], left[1] + (right[1] - left[1])//2)\n\n        # find the topmost and bottommost points\n        # the points are needed to be able to calculate the vertical shift\n    top = falcon[0]\n    bottom = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][0] < top[0]:\n            top = falcon[i]\n        if falcon[i][0] > bottom[0]:\n            bottom = falcon[i]\n\n    # calculate the vertical shift\n    shift = (bottom[0] - top[0])//2\n\n    # create the result image\n    result = ['']*n\n    for i in range(n):\n        result[i] = image[i][:m]\n\n    # shift the falcon vertically\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m] = char\n\n    # shift the falcon horizontally\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m+1] = char\n\n    # print the result\n    for i in range(n):\n        print(result[i])\n    print()\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649742148,
  "object": "edit"
}
2022-04-12 01:42:32.505416 fix spelling mistakes 2 ["\n\nimport sys\n\ndef main():\n    # read input\n    n, m, char = sys.stdin.readline().split()\n    n = int(n)\n    m = int(m)\n    char = char[1]\n    image = ['']*n\n    for i in range(n):\n        image[i] = sys.stdin.readline().rstrip()\n    sys.stdin.readline() # empty line\n    for i in range(n):\n        image[i] += sys.stdin.readline().rstrip()\n\n    # find the falcon\n    falcon = []\n    for i in range(n):\n        for j in range(m*2):\n            if image[i][j] == char:\n                falcon.append((i,j))\n\n                # find the leftmost and rightmost points\n                # the points are needed to be able to calculate the center of the falcon\n    left = falcon[0]\n    right = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][1] < left[1]:\n            left = falcon[i]\n        if falcon[i][1] > right[1]:\n            right = falcon[i]\n\n    # calculate the center of the falcon\n    center = (left[0], left[1] + (right[1] - left[1])//2)\n\n    # find the topmost and bottommost points of the falcon\n    # the points are needed to be able to calculate the vertical shift of the falcon\n    top = falcon[0]\n    bottom = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][0] < top[0]:\n            top = falcon[i]\n        if falcon[i][0] > bottom[0]:\n            bottom = falcon[i]\n\n    # calculate the vertical shift\n    shift = (bottom[0] - top[0])//2\n\n    # create the result image\n    result = ['']*n\n    for i in range(n):\n        result[i] = image[i][:m]\n\n    # shift the falcon vertically\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m] = char\n\n    # shift the falcon horizontally\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m+1] = char\n\n    # print the result\n    for i in range(n):\n        print(result[i])\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # read input\n    n, m, char = sys.stdin.readline().split()\n    n = int(n)\n    m = int(m)\n    char = char[1]\n    image = ['']*n\n    for i in range(n):\n        image[i] = sys.stdin.readline().rstrip()\n    sys.stdin.readline() # empty line\n    for i in range(n):\n        image[i] += sys.stdin.readline().rstrip()\n\n    # find the falcon\n    falcon = []\n    for i in range(n):\n        for j in range(m*2):\n            if image[i][j] == char:\n                falcon.append((i,j))\n\n                # find the leftmost and rightmost points\n                # the points are needed to be able to calculate the center of the falcon\n    left = falcon[0]\n    right = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][1] < left[1]:\n            left = falcon[i]\n        if falcon[i][1] > right[1]:\n            right = falcon[i]\n\n    # calculate the center of the falcon\n    center = (left[0], left[1] + (right[1] - left[1])//2)\n\n        # find the topmost and bottommost points\n        # the points are needed to be able to calculate the vertical shift\n    top = falcon[0]\n    bottom = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][0] < top[0]:\n            top = falcon[i]\n        if falcon[i][0] > bottom[0]:\n            bottom = falcon[i]\n\n    # calculate the vertical shift\n    shift = (bottom[0] - top[0])//2\n\n    # create the result image\n    result = ['']*n\n    for i in range(n):\n        result[i] = image[i][:m]\n\n    # shift the falcon vertically\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m] = char\n\n    # shift the falcon horizontally\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m+1] = char\n\n    # print the result\n    for i in range(n):\n        print(result[i])\n    print()\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 01:42:32.505485 size on output set 2
2022-04-12 01:42:32.505495 size on input set 2
2022-04-12 01:42:51.270121 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    # read input \n    n, m, char = sys.stdin.readline().split()\n    n = int(n)\n    m = int(m)\n    char = char[1]\n    image = ['']*n\n    for i in range(n):\n        image[i] = sys.stdin.readline().rstrip()\n    sys.stdin.readline() # empty line\n    for i in range(n):\n        image[i] += sys.stdin.readline().rstrip()\n\n    # find the falcon\n    falcon = []\n    for i in range(n):\n        for j in range(m*2):\n            if image[i][j] == char:\n                falcon.append((i,j))\n\n                # find the leftmost and rightmost points\n                # the points are needed to be able to calculate the center of the falcon\n    left = falcon[0]\n    right = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][1] < left[1]:\n            left = falcon[i]\n        if falcon[i][1] > right[1]:\n            right = falcon[i]\n\n    # calculate the center of the falcon\n    center = (left[0], left[1] + (right[1] - left[1])//2)\n\n        # find the topmost and bottommost points\n        # the points are needed to be able to calculate the vertical shift\n    top = falcon[0]\n    bottom = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][0] < top[0]:\n            top = falcon[i]\n        if falcon[i][0] > bottom[0]:\n            bottom = falcon[i]\n\n    # calculate the vertical shift\n    shift = (bottom[0] - top[0])//2\n\n    # create the result image\n    result = ['']*n\n    for i in range(n):\n        result[i] = image[i][:m]\n\n    # shift the falcon vertically\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m] = char\n\n    # shift the falcon horizontally\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m+1] = char\n\n    # print the result\n    for i in range(n):\n        print(result[i])\n    print()\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    # read input\n    n, m, char = sys.stdin.readline().split()\n    n = int(n)\n    m = int(m)\n    char = char[1]\n    image = ['']*n\n    for i in range(n):\n        image[i] = sys.stdin.readline().rstrip()\n    sys.stdin.readline() # empty line\n    for i in range(n):\n        image[i] += sys.stdin.readline().rstrip()\n\n    # find the falcon\n    falcon = []\n    for i in range(n):\n        for j in range(m*2):\n            if image[i][j] == char:\n                falcon.append((i,j))\n\n                # find the leftmost and rightmost points\n                # the points are needed to be able to calculate the center of the falcon\n    left = falcon[0]\n    right = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][1] < left[1]:\n            left = falcon[i]\n        if falcon[i][1] > right[1]:\n            right = falcon[i]\n\n    # calculate the center of the falcon\n    center = (left[0], left[1] + (right[1] - left[1])//2)\n\n        # find the topmost and bottommost points\n        # the points are needed to be able to calculate the vertical shift\n    top = falcon[0]\n    bottom = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][0] < top[0]:\n            top = falcon[i]\n        if falcon[i][0] > bottom[0]:\n            bottom = falcon[i]\n\n    # calculate the vertical shift\n    shift = (bottom[0] - top[0])//2\n\n    # create the result image\n    result = ['']*n\n    for i in range(n):\n        result[i] = image[i][:m]\n\n    # shift the falcon vertically\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m] = char\n\n    # shift the falcon horizontally\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m+1] = char\n\n    # print the result\n    for i in range(n):\n        print(result[i])\n    print()\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649742152,
  "object": "edit"
}
2022-04-12 01:42:51.270295 fix syntax errors 2 ["\n\nimport sys\n\ndef main():\n    # read input \n    n, m, char = sys.stdin.readline().split()\n    n = int(n)\n    m = int(m)\n    char = char[1]\n    image = ['']*n\n    for i in range(n):\n        image[i] = sys.stdin.readline().rstrip()\n    sys.stdin.readline() # empty line\n    for i in range(n):\n        image[i] += sys.stdin.readline().rstrip()\n\n    # find the falcon\n    falcon = []\n    for i in range(n):\n        for j in range(m*2):\n            if image[i][j] == char:\n                falcon.append((i,j))\n\n                # find the leftmost and rightmost points\n                # the points are needed to be able to calculate the center of the falcon\n    left = falcon[0]\n    right = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][1] < left[1]:\n            left = falcon[i]\n        if falcon[i][1] > right[1]:\n            right = falcon[i]\n\n    # calculate the center of the falcon\n    center = (left[0], left[1] + (right[1] - left[1])//2)\n\n        # find the topmost and bottommost points\n        # the points are needed to be able to calculate the vertical shift\n    top = falcon[0]\n    bottom = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][0] < top[0]:\n            top = falcon[i]\n        if falcon[i][0] > bottom[0]:\n            bottom = falcon[i]\n\n    # calculate the vertical shift\n    shift = (bottom[0] - top[0])//2\n\n    # create the result image\n    result = ['']*n\n    for i in range(n):\n        result[i] = image[i][:m]\n\n    # shift the falcon vertically\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m] = char\n\n    # shift the falcon horizontally\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m+1] = char\n\n    # print the result\n    for i in range(n):\n        print(result[i])\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    # read input\n    n, m, char = sys.stdin.readline().split()\n    n = int(n)\n    m = int(m)\n    char = char[1]\n    image = ['']*n\n    for i in range(n):\n        image[i] = sys.stdin.readline().rstrip()\n    sys.stdin.readline() # empty line\n    for i in range(n):\n        image[i] += sys.stdin.readline().rstrip()\n\n    # find the falcon\n    falcon = []\n    for i in range(n):\n        for j in range(m*2):\n            if image[i][j] == char:\n                falcon.append((i,j))\n\n                # find the leftmost and rightmost points\n                # the points are needed to be able to calculate the center of the falcon\n    left = falcon[0]\n    right = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][1] < left[1]:\n            left = falcon[i]\n        if falcon[i][1] > right[1]:\n            right = falcon[i]\n\n    # calculate the center of the falcon\n    center = (left[0], left[1] + (right[1] - left[1])//2)\n\n        # find the topmost and bottommost points\n        # the points are needed to be able to calculate the vertical shift\n    top = falcon[0]\n    bottom = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][0] < top[0]:\n            top = falcon[i]\n        if falcon[i][0] > bottom[0]:\n            bottom = falcon[i]\n\n    # calculate the vertical shift\n    shift = (bottom[0] - top[0])//2\n\n    # create the result image\n    result = ['']*n\n    for i in range(n):\n        result[i] = image[i][:m]\n\n    # shift the falcon vertically\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m] = char\n\n    # shift the falcon horizontally\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m+1] = char\n\n    # print the result\n    for i in range(n):\n        print(result[i])\n    print()\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 01:43:01.821795 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    # read input\n    n, m, char = sys.stdin.readline().split()\n    n = int(n)\n    m = int(m)\n    char = char[1]\n    image = ['']*n\n    for i in range(n):\n        image[i] = sys.stdin.readline().rstrip()\n    sys.stdin.readline() # empty line\n    for i in range(n):\n        image[i] += sys.stdin.readline().rstrip()\n\n    # find the falcon\n    falcon = []\n    for i in range(n):\n        for j in range(m*2):\n            if image[i][j] == char:\n                falcon.append((i,j))\n\n                # find the leftmost and rightmost points\n                # the points are needed to be able to calculate the center of the falcon\n    left = falcon[0]\n    right = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][1] < left[1]:\n            left = falcon[i]\n        if falcon[i][1] > right[1]:\n            right = falcon[i]\n\n    # calculate the center of the falcon\n    center = (left[0], left[1] + (right[1] - left[1])//2)\n\n    # find the topmost and bottommost points of the falcon\n    # the points are needed to be able to calculate the vertical shift of the falcon\n    top = falcon[0]\n    bottom = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][0] < top[0]:\n            top = falcon[i]\n        if falcon[i][0] > bottom[0]:\n            bottom = falcon[i]\n\n    # calculate the vertical shift\n    shift = (bottom[0] - top[0])//2\n\n    # create the result image\n    result = ['']*n\n    for i in range(n):\n        result[i] = image[i][:m]\n\n    # shift the falcon vertically\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m] = char\n\n    # shift the falcon horizontally\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m+1] = char\n\n    # print the result\n    for i in range(n):\n        print(result[i])\n    print()\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    # read input\n    n, m, char = sys.stdin.readline().split()\n    n = int(n)\n    m = int(m)\n    char = char[1]\n    image = ['']*n\n    for i in range(n):\n        image[i] = sys.stdin.readline().rstrip()\n    sys.stdin.readline() # empty line\n    for i in range(n):\n        image[i] += sys.stdin.readline().rstrip()\n\n    # find the falcon\n    falcon = []\n    for i in range(n):\n        for j in range(m*2):\n            if image[i][j] == char:\n                falcon.append((i,j))\n\n                # find the leftmost and rightmost points\n                # the points are needed to be able to calculate the center of the falcon\n    left = falcon[0]\n    right = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][1] < left[1]:\n            left = falcon[i]\n        if falcon[i][1] > right[1]:\n            right = falcon[i]\n\n    # calculate the center of the falcon\n    center = (left[0], left[1] + (right[1] - left[1])//2)\n\n    # find the topmost and bottommost points of the falcon\n    # the points are needed to be able to calculate the vertical shift of the falcon\n    top = falcon[0]\n    bottom = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][0] < top[0]:\n            top = falcon[i]\n        if falcon[i][0] > bottom[0]:\n            bottom = falcon[i]\n\n    # calculate the vertical shift\n    shift = (bottom[0] - top[0])//2\n\n    # create the result image\n    result = ['']*n\n    for i in range(n):\n        result[i] = image[i][:m]\n\n    # shift the falcon vertically\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m] = char\n\n    # shift the falcon horizontally\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m+1] = char\n\n    # print the result\n    for i in range(n):\n        print(result[i])\n    print()\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649742171,
  "object": "edit"
}
2022-04-12 01:43:01.821953 fix syntax errors 2 ["\nimport sys\n\ndef main():\n    # read input\n    n, m, char = sys.stdin.readline().split()\n    n = int(n)\n    m = int(m)\n    char = char[1]\n    image = ['']*n\n    for i in range(n):\n        image[i] = sys.stdin.readline().rstrip()\n    sys.stdin.readline() # empty line\n    for i in range(n):\n        image[i] += sys.stdin.readline().rstrip()\n\n    # find the falcon\n    falcon = []\n    for i in range(n):\n        for j in range(m*2):\n            if image[i][j] == char:\n                falcon.append((i,j))\n\n                # find the leftmost and rightmost points\n                # the points are needed to be able to calculate the center of the falcon\n    left = falcon[0]\n    right = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][1] < left[1]:\n            left = falcon[i]\n        if falcon[i][1] > right[1]:\n            right = falcon[i]\n\n    # calculate the center of the falcon\n    center = (left[0], left[1] + (right[1] - left[1])//2)\n\n    # find the topmost and bottommost points of the falcon\n    # the points are needed to be able to calculate the vertical shift of the falcon\n    top = falcon[0]\n    bottom = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][0] < top[0]:\n            top = falcon[i]\n        if falcon[i][0] > bottom[0]:\n            bottom = falcon[i]\n\n    # calculate the vertical shift\n    shift = (bottom[0] - top[0])//2\n\n    # create the result image\n    result = ['']*n\n    for i in range(n):\n        result[i] = image[i][:m]\n\n    # shift the falcon vertically\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m] = char\n\n    # shift the falcon horizontally\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m+1] = char\n\n    # print the result\n    for i in range(n):\n        print(result[i])\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    # read input\n    n, m, char = sys.stdin.readline().split()\n    n = int(n)\n    m = int(m)\n    char = char[1]\n    image = ['']*n\n    for i in range(n):\n        image[i] = sys.stdin.readline().rstrip()\n    sys.stdin.readline() # empty line\n    for i in range(n):\n        image[i] += sys.stdin.readline().rstrip()\n\n    # find the falcon\n    falcon = []\n    for i in range(n):\n        for j in range(m*2):\n            if image[i][j] == char:\n                falcon.append((i,j))\n\n                # find the leftmost and rightmost points\n                # the points are needed to be able to calculate the center of the falcon\n    left = falcon[0]\n    right = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][1] < left[1]:\n            left = falcon[i]\n        if falcon[i][1] > right[1]:\n            right = falcon[i]\n\n    # calculate the center of the falcon\n    center = (left[0], left[1] + (right[1] - left[1])//2)\n\n    # find the topmost and bottommost points of the falcon\n    # the points are needed to be able to calculate the vertical shift of the falcon\n    top = falcon[0]\n    bottom = falcon[0]\n    for i in range(1, len(falcon)):\n        if falcon[i][0] < top[0]:\n            top = falcon[i]\n        if falcon[i][0] > bottom[0]:\n            bottom = falcon[i]\n\n    # calculate the vertical shift\n    shift = (bottom[0] - top[0])//2\n\n    # create the result image\n    result = ['']*n\n    for i in range(n):\n        result[i] = image[i][:m]\n\n    # shift the falcon vertically\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m] = char\n\n    # shift the falcon horizontally\n    for i in range(len(falcon)):\n        result[falcon[i][0]][falcon[i][1]-m+1] = char\n\n    # print the result\n    for i in range(n):\n        print(result[i])\n    print()\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 01:43:01.821978 size on output set 3
2022-04-12 01:43:01.821985 num operations 2
2022-04-12 01:43:01.821988 size on input set 1
2022-04-12 01:43:10.202756 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    M, N, C = input().split()\n    M = int(M)\n    N = int(N)\n\n    frame1 = []\n    frame2 = []\n    for i in range(M):\n        frame1.append(input())\n    input()\n    for i in range(M):\n        frame2.append(input())\n\n    #print(frame1)\n    #print(frame2)\n\n    # find the falcon in the first frame\n    falcon1 = []\n    for i in range(M):\n        for j in range(N):\n            if frame1[i][j] == C:\n                falcon1.append((i, j))\n\n    # find the falcon in the second frame\n    falcon2 = []\n    for i in range(M):\n        for j in range(N):\n            if frame2[i][j] == C:\n                falcon2.append((i, j))\n\n    # find the centroid of the falcon in the first frame\n    cx1 = 0\n    cy1 = 0\n    for point in falcon1:\n        cx1 += point[0]\n        cy1 += point[1]\n    cx1 = int(cx1/len(falcon1))\n    cy1 = int(cy1/len(falcon1))\n    #print(cx1, cy1)\n\n    # find the centroid of the falcon in the second frame\n    cx2 = 0\n    cy2 = 0\n    for point in falcon2:\n        cx2 += point[0]\n        cy2 += point[1]\n    cx2 = int(cx2/len(falcon2))\n    cy2 = int(cy2/len(falcon2))\n    #print(cx2, cy2)\n\n    # find the distance between the centroids\n    distance = ((cx1-cx2)**2 + (cy1-cy2)**2)**0.5\n    #print(distance)\n\n    # find the direction of the falcon\n    direction = [cx2-cx1, cy2-cy1]\n    #print(direction)\n\n    # find the movement of the falcon\n    movement = [int(direction[0]/distance), int(direction[1]/distance)]\n    #print(movement)\n\n    # find the new position of the falcon\n    cx3 = cx2 + movement[0]\n    cy3 = cy2 + movement[1]\n    #print(cx3, cy3)\n\n    # create the new frame\n    frame3 = []\n    for i in range(M):\n        frame3.append(frame2[i])\n\n    # move the falcon\n    for point in falcon2:\n        frame3[point[0]][point[1]] = '.'\n        frame3[point[0]+movement[0]][point[1]+movement[1]] = C\n\n    #print(frame3)\n    for line in frame3:\n        print(line)\n    print()\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    M, N, C = input().split()\n    M = int(M)\n    N = int(N)\n\n    frame1 = []\n    frame2 = []\n    for i in range(M):\n        frame1.append(input())\n    input()\n    for i in range(M):\n        frame2.append(input())\n\n    #print(frame1)\n    #print(frame2)\n\n    # find the falcon in the first frame\n    falcon1 = []\n    for i in range(M):\n        for j in range(N):\n            if frame1[i][j] == C:\n                falcon1.append((i, j))\n\n    # find the falcon in the second frame\n    falcon2 = []\n    for i in range(M):\n        for j in range(N):\n            if frame2[i][j] == C:\n                falcon2.append((i, j))\n\n    # find the centroid of the falcon in the first frame\n    cx1 = 0\n    cy1 = 0\n    for point in falcon1:\n        cx1 += point[0]\n        cy1 += point[1]\n    cx1 = int(cx1/len(falcon1))\n    cy1 = int(cy1/len(falcon1))\n    #print(cx1, cy1)\n\n    # find the centroid of the falcon in the second frame\n    cx2 = 0\n    cy2 = 0\n    for point in falcon2:\n        cx2 += point[0]\n        cy2 += point[1]\n    cx2 = int(cx2/len(falcon2))\n    cy2 = int(cy2/len(falcon2))\n    #print(cx2, cy2)\n\n    # find the distance between the centroids\n    distance = ((cx1-cx2)**2 + (cy1-cy2)**2)**0.5\n    #print(distance)\n\n    # find the direction of the falcon\n    direction = [cx2-cx1, cy2-cy1]\n    #print(direction)\n\n    # find the movement of the falcon\n    movement = [int(direction[0]/distance), int(direction[1]/distance)]\n    #print(movement)\n\n    # find the new position of the falcon\n    cx3 = cx2 + movement[0]\n    cy3 = cy2 + movement[1]\n    #print(cx3, cy3)\n\n    # create the new frame\n    frame3 = []\n    for i in range(M):\n        frame3.append(frame2[i])\n\n    # move the falcon\n    for point in falcon2:\n        frame3[point[0]][point[1]] = '.'\n        frame3[point[0]+movement[0]][point[1]+movement[1]] = C\n\n    #print(frame3)\n    for line in frame3:\n        print(line)\n    print()\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649742182,
  "object": "edit"
}
2022-04-12 01:43:10.202977 fix spelling mistakes 2 ["\n\ndef main():\n    M, N, C = input().split()\n    M = int(M)\n    N = int(N)\n\n    frame1 = []\n    frame2 = []\n    for i in range(M):\n        frame1.append(input())\n    input()\n    for i in range(M):\n        frame2.append(input())\n\n    #print(frame1)\n    #print(frame2)\n\n    # find the falcon in the first frame\n    falcon1 = []\n    for i in range(M):\n        for j in range(N):\n            if frame1[i][j] == C:\n                falcon1.append((i, j))\n\n    # find the falcon in the second frame\n    falcon2 = []\n    for i in range(M):\n        for j in range(N):\n            if frame2[i][j] == C:\n                falcon2.append((i, j))\n\n    # find the centroid of the falcon in the first frame\n    cx1 = 0\n    cy1 = 0\n    for point in falcon1:\n        cx1 += point[0]\n        cy1 += point[1]\n    cx1 = int(cx1/len(falcon1))\n    cy1 = int(cy1/len(falcon1))\n    #print(cx1, cy1)\n\n    # find the centroid of the falcon in the second frame\n    cx2 = 0\n    cy2 = 0\n    for point in falcon2:\n        cx2 += point[0]\n        cy2 += point[1]\n    cx2 = int(cx2/len(falcon2))\n    cy2 = int(cy2/len(falcon2))\n    #print(cx2, cy2)\n\n    # find the distance between the centroids\n    distance = ((cx1-cx2)**2 + (cy1-cy2)**2)**0.5\n    #print(distance)\n\n    # find the direction of the falcon\n    direction = [cx2-cx1, cy2-cy1]\n    #print(direction)\n\n    # find the movement of the falcon\n    movement = [int(direction[0]/distance), int(direction[1]/distance)]\n    #print(movement)\n\n    # find the new position of the falcon\n    cx3 = cx2 + movement[0]\n    cy3 = cy2 + movement[1]\n    #print(cx3, cy3)\n\n    # create the new frame\n    frame3 = []\n    for i in range(M):\n        frame3.append(frame2[i])\n\n    # move the falcon\n    for point in falcon2:\n        frame3[point[0]][point[1]] = '.'\n        frame3[point[0]+movement[0]][point[1]+movement[1]] = C\n\n    #print(frame3)\n    for line in frame3:\n        print(line)\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    M, N, C = input().split()\n    M = int(M)\n    N = int(N)\n\n    frame1 = []\n    frame2 = []\n    for i in range(M):\n        frame1.append(input())\n    input()\n    for i in range(M):\n        frame2.append(input())\n\n    #print(frame1)\n    #print(frame2)\n\n    # find the falcon in the first frame\n    falcon1 = []\n    for i in range(M):\n        for j in range(N):\n            if frame1[i][j] == C:\n                falcon1.append((i, j))\n\n    # find the falcon in the second frame\n    falcon2 = []\n    for i in range(M):\n        for j in range(N):\n            if frame2[i][j] == C:\n                falcon2.append((i, j))\n\n    # find the centroid of the falcon in the first frame\n    cx1 = 0\n    cy1 = 0\n    for point in falcon1:\n        cx1 += point[0]\n        cy1 += point[1]\n    cx1 = int(cx1/len(falcon1))\n    cy1 = int(cy1/len(falcon1))\n    #print(cx1, cy1)\n\n    # find the centroid of the falcon in the second frame\n    cx2 = 0\n    cy2 = 0\n    for point in falcon2:\n        cx2 += point[0]\n        cy2 += point[1]\n    cx2 = int(cx2/len(falcon2))\n    cy2 = int(cy2/len(falcon2))\n    #print(cx2, cy2)\n\n    # find the distance between the centroids\n    distance = ((cx1-cx2)**2 + (cy1-cy2)**2)**0.5\n    #print(distance)\n\n    # find the direction of the falcon\n    direction = [cx2-cx1, cy2-cy1]\n    #print(direction)\n\n    # find the movement of the falcon\n    movement = [int(direction[0]/distance), int(direction[1]/distance)]\n    #print(movement)\n\n    # find the new position of the falcon\n    cx3 = cx2 + movement[0]\n    cy3 = cy2 + movement[1]\n    #print(cx3, cy3)\n\n    # create the new frame\n    frame3 = []\n    for i in range(M):\n        frame3.append(frame2[i])\n\n    # move the falcon\n    for point in falcon2:\n        frame3[point[0]][point[1]] = '.'\n        frame3[point[0]+movement[0]][point[1]+movement[1]] = C\n\n    #print(frame3)\n    for line in frame3:\n        print(line)\n    print()\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 01:43:10.203046 size on output set 1
2022-04-12 01:43:10.203051 size on input set 1
2022-04-12 01:43:16.774781 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    M, N, C = input().split()\n    M = int(M)\n    N = int(N)\n\n    frame1 = []\n    frame2 = []\n    for i in range(M):\n        frame1.append(input())\n    input()\n    for i in range(M):\n        frame2.append(input())\n\n    # print(frame1)\n    # print(frame2)\n\n    # find the falcon in the first frame\n    falcon1 = []\n    for i in range(M):\n        for j in range(N):\n            if frame1[i][j] == C:\n                falcon1.append((i, j))\n\n    # find the falcon in the second frame\n    falcon2 = []\n    for i in range(M):\n        for j in range(N):\n            if frame2[i][j] == C:\n                falcon2.append((i, j))\n\n    # find the centroid of the falcon in the first frame\n    cx1 = 0\n    cy1 = 0\n    for point in falcon1:\n        cx1 += point[0]\n        cy1 += point[1]\n    cx1 = int(cx1/len(falcon1))\n    cy1 = int(cy1/len(falcon1))\n    # print(cx1, cy1)\n\n    # find the centroid of the falcon in the second frame\n    cx2 = 0\n    cy2 = 0\n    for point in falcon2:\n        cx2 += point[0]\n        cy2 += point[1]\n    cx2 = int(cx2/len(falcon2))\n    cy2 = int(cy2/len(falcon2))\n    # print(cx2, cy2)\n\n    # find the distance between the centroids\n    distance = ((cx1-cx2)**2 + (cy1-cy2)**2)**0.5\n    # print(distance)\n\n    # find the direction of the falcon\n    direction = [cx2-cx1, cy2-cy1]\n    # print(direction)\n\n    # find the movement of the falcon\n    movement = [int(direction[0]/distance), int(direction[1]/distance)]\n    # print(movement)\n\n    # find the new position of the falcon\n    cx3 = cx2 + movement[0]\n    cy3 = cy2 + movement[1]\n    # print(cx3, cy3)\n\n    # create the new frame\n    frame3 = []\n    for i in range(M):\n        frame3.append(frame2[i])\n\n    # move the falcon\n    for point in falcon2:\n        frame3[point[0]][point[1]] = '.'\n        frame3[point[0]+movement[0]][point[1]+movement[1]] = C\n\n    # print(frame3)\n    for line in frame3:\n        print(line)\n    print()\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    M, N, C = input().split()\n    M = int(M)\n    N = int(N)\n\n    frame1 = []\n    frame2 = []\n    for i in range(M):\n        frame1.append(input())\n    input()\n    for i in range(M):\n        frame2.append(input())\n\n    # print(frame1)\n    # print(frame2)\n\n    # find the falcon in the first frame\n    falcon1 = []\n    for i in range(M):\n        for j in range(N):\n            if frame1[i][j] == C:\n                falcon1.append((i, j))\n\n    # find the falcon in the second frame\n    falcon2 = []\n    for i in range(M):\n        for j in range(N):\n            if frame2[i][j] == C:\n                falcon2.append((i, j))\n\n    # find the centroid of the falcon in the first frame\n    cx1 = 0\n    cy1 = 0\n    for point in falcon1:\n        cx1 += point[0]\n        cy1 += point[1]\n    cx1 = int(cx1/len(falcon1))\n    cy1 = int(cy1/len(falcon1))\n    # print(cx1, cy1)\n\n    # find the centroid of the falcon in the second frame\n    cx2 = 0\n    cy2 = 0\n    for point in falcon2:\n        cx2 += point[0]\n        cy2 += point[1]\n    cx2 = int(cx2/len(falcon2))\n    cy2 = int(cy2/len(falcon2))\n    # print(cx2, cy2)\n\n    # find the distance between the centroids\n    distance = ((cx1-cx2)**2 + (cy1-cy2)**2)**0.5\n    # print(distance)\n\n    # find the direction of the falcon\n    direction = [cx2-cx1, cy2-cy1]\n    # print(direction)\n\n    # find the movement of the falcon\n    movement = [int(direction[0]/distance), int(direction[1]/distance)]\n    # print(movement)\n\n    # find the new position of the falcon\n    cx3 = cx2 + movement[0]\n    cy3 = cy2 + movement[1]\n    # print(cx3, cy3)\n\n    # create the new frame\n    frame3 = []\n    for i in range(M):\n        frame3.append(frame2[i])\n\n    # move the falcon\n    for point in falcon2:\n        frame3[point[0]][point[1]] = '.'\n        frame3[point[0]+movement[0]][point[1]+movement[1]] = C\n\n    # print(frame3)\n    for line in frame3:\n        print(line)\n    print()\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649742190,
  "object": "edit"
}
2022-04-12 01:43:16.775259 fix syntax errors 2 ["\n\ndef main():\n    M, N, C = input().split()\n    M = int(M)\n    N = int(N)\n\n    frame1 = []\n    frame2 = []\n    for i in range(M):\n        frame1.append(input())\n    input()\n    for i in range(M):\n        frame2.append(input())\n\n    # print(frame1)\n    # print(frame2)\n\n    # find the falcon in the first frame\n    falcon1 = []\n    for i in range(M):\n        for j in range(N):\n            if frame1[i][j] == C:\n                falcon1.append((i, j))\n\n    # find the falcon in the second frame\n    falcon2 = []\n    for i in range(M):\n        for j in range(N):\n            if frame2[i][j] == C:\n                falcon2.append((i, j))\n\n    # find the centroid of the falcon in the first frame\n    cx1 = 0\n    cy1 = 0\n    for point in falcon1:\n        cx1 += point[0]\n        cy1 += point[1]\n    cx1 = int(cx1/len(falcon1))\n    cy1 = int(cy1/len(falcon1))\n    # print(cx1, cy1)\n\n    # find the centroid of the falcon in the second frame\n    cx2 = 0\n    cy2 = 0\n    for point in falcon2:\n        cx2 += point[0]\n        cy2 += point[1]\n    cx2 = int(cx2/len(falcon2))\n    cy2 = int(cy2/len(falcon2))\n    # print(cx2, cy2)\n\n    # find the distance between the centroids\n    distance = ((cx1-cx2)**2 + (cy1-cy2)**2)**0.5\n    # print(distance)\n\n    # find the direction of the falcon\n    direction = [cx2-cx1, cy2-cy1]\n    # print(direction)\n\n    # find the movement of the falcon\n    movement = [int(direction[0]/distance), int(direction[1]/distance)]\n    # print(movement)\n\n    # find the new position of the falcon\n    cx3 = cx2 + movement[0]\n    cy3 = cy2 + movement[1]\n    # print(cx3, cy3)\n\n    # create the new frame\n    frame3 = []\n    for i in range(M):\n        frame3.append(frame2[i])\n\n    # move the falcon\n    for point in falcon2:\n        frame3[point[0]][point[1]] = '.'\n        frame3[point[0]+movement[0]][point[1]+movement[1]] = C\n\n    # print(frame3)\n    for line in frame3:\n        print(line)\n    print()\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    M, N, C = input().split()\n    M = int(M)\n    N = int(N)\n\n    frame1 = []\n    frame2 = []\n    for i in range(M):\n        frame1.append(input())\n    input()\n    for i in range(M):\n        frame2.append(input())\n\n    # print(frame1)\n    # print(frame2)\n\n    # find the falcon in the first frame\n    falcon1 = []\n    for i in range(M):\n        for j in range(N):\n            if frame1[i][j] == C:\n                falcon1.append((i, j))\n\n    # find the falcon in the second frame\n    falcon2 = []\n    for i in range(M):\n        for j in range(N):\n            if frame2[i][j] == C:\n                falcon2.append((i, j))\n\n    # find the centroid of the falcon in the first frame\n    cx1 = 0\n    cy1 = 0\n    for point in falcon1:\n        cx1 += point[0]\n        cy1 += point[1]\n    cx1 = int(cx1/len(falcon1))\n    cy1 = int(cy1/len(falcon1))\n    # print(cx1, cy1)\n\n    # find the centroid of the falcon in the second frame\n    cx2 = 0\n    cy2 = 0\n    for point in falcon2:\n        cx2 += point[0]\n        cy2 += point[1]\n    cx2 = int(cx2/len(falcon2))\n    cy2 = int(cy2/len(falcon2))\n    # print(cx2, cy2)\n\n    # find the distance between the centroids\n    distance = ((cx1-cx2)**2 + (cy1-cy2)**2)**0.5\n    # print(distance)\n\n    # find the direction of the falcon\n    direction = [cx2-cx1, cy2-cy1]\n    # print(direction)\n\n    # find the movement of the falcon\n    movement = [int(direction[0]/distance), int(direction[1]/distance)]\n    # print(movement)\n\n    # find the new position of the falcon\n    cx3 = cx2 + movement[0]\n    cy3 = cy2 + movement[1]\n    # print(cx3, cy3)\n\n    # create the new frame\n    frame3 = []\n    for i in range(M):\n        frame3.append(frame2[i])\n\n    # move the falcon\n    for point in falcon2:\n        frame3[point[0]][point[1]] = '.'\n        frame3[point[0]+movement[0]][point[1]+movement[1]] = C\n\n    # print(frame3)\n    for line in frame3:\n        print(line)\n    print()\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 01:43:16.775317 size on output set 1
