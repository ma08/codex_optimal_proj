["\n#\n# Translations\ntrans_dict = {}\n\n# Input\nm, n = [int(x) for x in input().split()]\nfor _ in range(m):\n    a, b = input().split()\n    if a not in trans_dict:\n        trans_dict[a] = []\n    trans_dict[a].append(b)\n\nfor _ in range(n):\n    w1, w2 = input().split()\n    if len(w1) != len(w2):\n        print('no')\n        continue\n    # Check if words match\n    for a, b in zip(w1, w2):\n        if a in trans_dict:\n            if b not in trans_dict[a]:\n                print('no')\n                break\n        elif a != b:\n            print('no')\n            break\n    else:\n        print('yes')\n", "\n# coding: utf-8\n\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    codes = {}\n    for i in range(m):\n        line = sys.stdin.readline().split()\n        codes[line[0]] = line[1]\n    for i in range(n):\n        line = sys.stdin.readline().split()\n        if translate(line[0], codes) == translate(line[1], codes):\n            print(\"yes\")\n        else:\n            print(\"no\")\n\ndef translate(word, codes):\n    res = \"\"\n    for char in word:\n        if char in codes:\n            res += codes[char]\n        else:\n            res += char\n    return res\n\nif __name__ == \"__main__\":\n    main()\n", "from collections import defaultdict\nimport sys\nfrom collections import deque\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = defaultdict(list)\n    for _ in range(m):\n        a, b = input().split()\n        d[a].append(b)\n    for _ in range(n):\n        a, b = input().split()\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        a = list(a)\n        b = list(b)\n        q = deque([(0, a[0], b[0])])\n        visited = set()\n        while q:\n            i, c1, c2 = q.popleft()\n            if i == len(a) - 1:\n                if c1 == c2:\n                    print(\"yes\")\n                    break\n                else:\n                    print(\"no\")\n                    break\n            if (i, c1, c2) in visited:\n                continue\n            visited.add((i, c1, c2))\n            if c1 == c2:\n                q.append((i + 1, a[i + 1], b[i + 1]))\n            else:\n                for c in d[c1]:\n                    q.append((i, c, c2))\n                for c in d[c2]:\n                    q.append((i, c1, c))\n\nmain()\n", "from collections import defaultdict\nimport sys\nfrom collections import deque\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = defaultdict(list)\n    for _ in range(m):\n        a, b = sys.stdin.readline().split()\n        d[a].append(b)\n    for _ in range(n):\n        a, b = sys.stdin.readline().split()\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        a = list(a)\n        b = list(b)\n        q = deque([(0, a[0], b[0])])\n        visited = set()\n        while q:\n            i, c1, c2 = q.popleft()\n            if i == len(a) - 1:\n                if c1 == c2:\n                    print(\"yes\")\n                    break\n                else:\n                    print(\"no\")\n                    break\n            if (i, c1, c2) in visited:\n                continue\n            visited.add((i, c1, c2))\n            if c1 == c2:\n                q.append((i + 1, a[i + 1], b[i + 1]))\n            else:\n                for c in d[c1]:\n                    q.append((i, c, c2))\n                for c in d[c2]:\n                    q.append((i, c1, c))\n\nmain()\n", "\n# -*- coding: utf-8 -*-\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    codes = {}\n    for i in range(m):\n        line = sys.stdin.readline().split()\n        codes[line[0]] = line[1]\n    for i in range(n):\n        line = sys.stdin.readline().split()\n        if translate(line[0], codes) == translate(line[1], codes):\n            print(\"yes\")\n        else:\n            print(\"no\")\n\ndef translate(word, codes):\n    res = \"\"\n    for char in word:\n        if char in codes:\n            res += codes[char]\n        else:\n            res += char\n    return res\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = dict()\n    for _ in range(m):\n        a, b = sys.stdin.readline().split()\n        d[a] = b\n    for _ in range(n):\n        a, b = sys.stdin.readline().split()\n        if len(a) != len(b):\n            print('no')\n            continue\n        flag = True\n        for i in range(len(a)):\n            if a[i] not in d or b[i] not in d or d[a[i]] != b[i]:\n                flag = False\n                break\n        if flag:\n            print('yes')\n        else:\n            print('no')\n\nif __name__ == \"__main__\":\n    main()\n", "\n# This is a comment\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    m = int(lines[0].split()[0])\n    n = int(lines[0].split()[1])\n    translations = {}\n    for i in range(1, m+1):\n        translations[lines[i][0]] = lines[i][2].strip()\n        translations[lines[i][2].strip()] = lines[i][0]\n    for i in range(m+1, m+1+n):\n        word1 = lines[i].split()[0].strip()\n        word2 = lines[i].split()[1].strip()\n        if len(word1) != len(word2):\n            print(\"no\")\n            continue\n        else:\n            for j in range(len(word1)):\n                if word1[j].strip() != word2[j].strip():\n                    # Try to translate\n                    if word1[j].strip() in translations:\n                        if translations[word1[j].strip()] == word2[j].strip():\n                            continue\n                        else:\n                            print(\"no\")\n                            break\n                    else:\n                        print(\"no\")\n                        break\n                else:\n                    continue\n            else:\n                print(\"yes\")\n\nmain()\n", "\nimport sys\n\ndef main():\n    m, n = map(int, input().split())\n    d = {}\n    for i in range(m):\n        a, b = input().split()\n        if a not in d:\n            d[a] = [b]\n        else:\n            d[a].append(b)\n    for i in range(n):\n        a, b = input().split()\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        if a[0] in d:\n            if b[0] in d[a[0]]:\n                print(\"yes\")\n            else:\n                print(\"no\")\n                break\n        else:\n            print(\"yes\")\n\nmain()\n", "import sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = dict()\n    for _ in range(m):\n        a, b = sys.stdin.readline().split()\n        d[a] = b\n    for _ in range(n):\n        a, b = sys.stdin.readline().split()\n        if len(a) != len(b):\n            print('no')\n            continue\n        flag = True\n        for i in range(len(a)):\n            if a[i] not in d or b[i] not in d or d[a[i]] != b[i]:\n                flag = False\n                break\n        if flag:\n            print('yes')\n        else:\n            print('no')\n\nif __name__ == \"__main__\":\n    main()\n", "#!/usr/bin/env python3\n\n# Translations\ntrans_dict = {}\n\n# Input\nm, n = [int(x) for x in input().split()]\nfor _ in range(m):\n    a, b = input().split()\n    if a not in trans_dict:\n        trans_dict[a] = []\n    trans_dict[a].append(b)\n\nfor _ in range(n):\n    w1, w2 = input().split()\n    if len(w1) != len(w2):\n        print('no')\n        continue\n    # Check if words match\n    for a, b in zip(w1, w2):\n        if a in trans_dict:\n            if b not in trans_dict[a]:\n                print('no')\n                break\n        elif a != b:\n            print('no')\n            break\n    else:\n        print('yes')\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    translations = {}\n    for i in range(m):\n        a, b = input().split()\n        translations[a] = b\n    for i in range(n):\n        a, b = map(str, input().split())\n        match = True\n        if len(a) != len(b):\n            match = False\n        else:\n            for j in range(len(a)):\n                if a[j] not in translations and a[j] != b[j]:\n                    match = False\n                    break\n                elif a[j] in translations and translations[a[j]] != b[j]:\n                    match = False\n                    break\n        if match:\n            print(\"yes\")\n        else:\n            print(\"no\")\n\nif __name__ == '__main__':\n    main()\n", "\nimport string\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    m = int(lines[0].split()[0])\n    n = int(lines[0].split()[1])\n    translations = dict.fromkeys(string.ascii_lowercase, \"\")\n    for i in range(1, m+1):\n        translations[lines[i][0]] = lines[i][2]\n        translations[lines[i][2]] = lines[i][0]\n    for i in range(m+1, m+1+n):\n        word1 = lines[i].split()[0]\n        word2 = lines[i].split()[1]\n        if len(word1) != len(word2):\n            print(\"no\")\n            continue\n        else:\n            for j in range(len(word1)):\n                if word1[j] != word2[j]:\n                    # Try to translate\n                    if translations[word1[j]] == word2[j]:\n                        continue\n                    else:\n                        print(\"no\")\n                        break\n            else:\n                print(\"yes\")\n\nmain()\n", "import sys\n\ndef main():\n    n, m = map(int, input().split())\n    lookup = {}\n    for _ in range(n):\n        a, b = input().split()\n        lookup[a] = b\n    for _ in range(m):\n        a, b = input().split()\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        for i in range(len(a)):\n            if a[i] not in lookup or lookup[a[i]] != b[i]:\n                print(\"no\")\n                break\n        else:\n            print(\"yes\")\n\nmain()\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Mon Apr  6 16:06:13 2020\n\n@author: krishna\n\"\"\"\n\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split()) # read the first line\n    codes = {}\n    for i in range(m):\n        line = sys.stdin.readline().split() # read the code line\n        codes[line[0]] = line[1]\n    for i in range(n):\n        line = sys.stdin.readline().split() # read the word line\n        if translate(line[0], codes) == translate(line[1], codes):\n            print(\"yes\")\n        else:\n            print(\"no\")\n\ndef translate(word, codes):\n    res = \"\"\n    for char in word:\n        if char in codes:\n            res += codes[char]\n        else:\n            res += char\n    return res\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    m = int(lines[0].split()[0])\n    n = int(lines[0].split()[1])\n    translations = {}\n    for i in range(1, m+1):\n        translations[lines[i][0]] = lines[i][2].strip() # a -> b\n        translations[lines[i][2].strip()] = lines[i][0] # b -> a\n    for i in range(m+1, m+1+n):\n        word1 = lines[i].split()[0].strip() # aa\n        word2 = lines[i].split()[1].strip() # bb\n        if len(word1) != len(word2):\n            print(\"no\")\n            continue\n        else:\n            for j in range(len(word1)):\n                if word1[j] != word2[j]:\n                    # Try to translate\n                    if word1[j] in translations:\n                        if translations[word1[j]] == word2[j]:\n                            continue\n                        else:\n                            print(\"no\")\n                            break\n                    else:\n                        print(\"no\")\n                        break\n                else:\n                    continue\n            else:\n                print(\"yes\")\n\nmain()\n", "\n\ndef main():\n    m, n = [int(x) for x in input().split()]  # m is number of translations, n is number of words to check.\n    translations = {}\n    for i in range(m):\n        a, b = input().split()\n        translations[a] = b  # a is the original word, b is the translated word.\n    for i in range(n):\n        a, b = input().split()\n        match = True  # match is true if the two words are the same.\n        if len(a) != len(b):\n            match = False  # if the two words aren't the same length, they can't be the same.\n        else:\n            for j in range(len(a)):\n                if a[j] not in translations and a[j] != b[j]:  # if the letter is not in the translation dictionary and is not the same as the other word, then they are not the same.\n                    match = False\n                    break\n                elif a[j] in translations and translations[a[j]] != b[j]:  # if the letter is in the translation dictionary and is not the same as the other word, then they are not the same.\n                    match = False\n                    break\n        if match:\n            print(\"yes\")\n        else:\n            print(\"no\")\n\nif __name__ == '__main__':\n    main()\n", "\n# This is a comment\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    m = int(lines[0].split()[0])\n    n = int(lines[0].split()[1])\n    translations = {}\n    for i in range(1, m+1):\n        translations[lines[i][0]] = lines[i][2].strip()\n        translations[lines[i][2].strip()] = lines[i][0]\n    for i in range(m+1, m+1+n):\n        word1 = lines[i].split()[0].strip()\n        word2 = lines[i].split()[1].strip()\n        if len(word1) != len(word2):\n            print(\"no\")\n            continue\n        else:\n            for j in range(len(word1)):\n                if word1[j] != word2[j]:\n                    # Try to translate\n                    if word1[j] in translations:\n                        if translations[word1[j]] == word2[j]:\n                            continue\n                        else:\n                            print(\"no\")\n                            break\n                    else:\n                        print(\"no\")\n                        break\n                else:\n                    continue\n            else:\n                print(\"yes\")\n\nmain()\n", "\ndef main():\n    n, m = [int(x) for x in input().split()]\n    translations = {}\n    for i in range(m):\n        a, b = input().split()\n        translations[a] = b\n    for i in range(n):\n        a, b = input().split()\n        match = True\n        if len(a) != len(b):\n            match = False\n        else:\n            for j in range(len(a)):\n                if a[j] not in translations and a[j] != b[j]:\n                    match = False\n                    break\n                elif a[j] in translations and translations[a[j]] != b[j]:\n                    match = False\n                    break\n        if match:\n            print(\"yes\")\n        else:\n            print(\"no\")\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    m, n = [int(x) for x in input().split()]  # m is number of translations, n is number of words to check.\n    translations = {}\n    for i in range(m):\n        a, b = input().split()\n        translations[a] = b  # a is the original word, b is the translated word.\n    for i in range(n):\n        a, b = input().split()\n        match = True  # match is true if the two words are the same.\n        if len(a) != len(b):\n            match = False  # if the two words aren't the same length, they can't be the same.\n        else:\n            for j in range(len(a)):\n                if a[j] not in translations and a[j] != b[j]:  # if the letter is not in the translation dictionary and is not the same as the other word, then they are not the same.\n                    match = False\n                    break\n                elif a[j] in translations and translations[a[j]] != b[j]:  # if the letter is in the translation dictionary and is not the same as the other word, then they are not the same\n                    match = False\n                    break\n        if match:\n            print(\"yes\")\n        else:\n            print(\"no\")\n\nif __name__ == '__main__':\n    main()\n", "\n#\n# Translations\ntrans_dict = {}  # {word: [translations]}\n\n# Input\nm, n = [int(x) for x in input().split()]\nfor _ in range(m):\n    a, b = input().split()\n    if a not in trans_dict:\n        trans_dict[a] = []\n    trans_dict[a].append(b)\n\nfor _ in range(n):\n    w1, w2 = input().split()\n    if len(w1) != len(w2):\n        print('no')\n        continue\n    # Check if words match (one-to-one)\n    for a, b in zip(w1, w2):\n        if a in trans_dict:\n            if b not in trans_dict[a]:\n                print('no')\n                break\n        elif a != b:\n            print('no')\n            break\n    else:\n        print('yes')\n", "\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = {}\n    for i in range(m):\n        a, b = sys.stdin.readline().split()\n        if a not in d:\n            d[a] = [b]\n        else:\n            d[a].append(b)\n    for i in range(n):\n        a, b = sys.stdin.readline().split()\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        if a[0] in d:\n            if b[0] in d[a[0]]:\n                print(\"yes\")\n            else:\n                print(\"no\")\n        else:\n            print(\"yes\")\n\nmain()\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Mon Apr  6 16:06:13 2020\n\n@author: krishna\n\"\"\"\n\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    codes = {}\n    for i in range(m):\n        line = sys.stdin.readline().split()\n        codes[line[0]] = line[1]\n    for i in range(n):\n        line = sys.stdin.readline().split()\n        if translate(line[0], codes) == translate(line[1], codes): #if the translated words are equal\n            print(\"yes\")\n        else:\n            print(\"no\")\n\ndef translate(word, codes): #function to translate words\n    res = \"\"\n    for char in word:\n        if char in codes:\n            res += codes[char]\n        else:\n            res += char\n    return res\n\nif __name__ == \"__main__\":\n    main()\n", "from collections import defaultdict\nimport sys\n\nfrom collections import deque\n\n\ndef main():\n    input = sys.stdin.readline\n    m, n = map(int, input().split())\n    d = defaultdict(set)\n    for _ in range(m):\n        a, b = input().split()\n        d[a].add(b)\n    for _ in range(n):\n        a, b = input().split()\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        a = list(a)\n        b = list(b)\n        q = deque()\n        visited = set()\n        q.append((0, a[0], b[0]))\n        while q:\n            i, c1, c2 = q.popleft()\n            if i == len(a) - 1:\n                if c1 == c2:\n                    print(\"yes\")\n                    break\n                else:\n                    print(\"no\")\n                    break\n            if (i, c1, c2) in visited:\n                continue\n            visited.add((i, c1, c2))\n            if c1 == c2:\n                q.append((i + 1, a[i + 1], b[i + 1]))\n            else:\n                if c1 in d:\n                    for c in d[c1]:\n                        q.append((i, c, c2))\n                if c2 in d:\n                    for c in d[c2]:\n                        q.append((i, c1, c))\n\n\nmain()\n", "\nimport sys\n\ndef main():\n    input = sys.stdin.readline()\n    m, n = map(int, input().split())\n    d = dict()\n    for _ in range(m):\n        a, b = input().split()\n        d[a] = b\n    for _ in range(n):\n        a, b = input().split()\n        if len(a) != len(b):\n            print('no')\n            continue\n        flag = True\n        for i in range(len(a)):\n            if a[i] not in d or b[i] not in d or d[a[i]] != b[i]:\n                flag = False\n                break\n        if flag:\n            print('yes')\n        else:\n            print('no')\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\n\ndef main():\n    input = sys.stdin.readline()\n    m, n = map(int, input().split())\n    d = dict()\n    for _ in range(m):\n        a, b = input().split()\n        d[a] = b\n    for _ in range(n):\n        a, b = input().split()\n        if len(a) != len(b):\n            print('no')\n            continue\n        flag = True\n        for i in range(len(a)):\n            if a[i] not in d or b[i] not in d or d[a[i]] != b[i]:\n                flag = False\n                break\n        if flag:\n            print('yes')\n        else:\n            print('no')\n\nif __name__ == \"__main__\":\n    main()\n", "from collections import defaultdict\nimport sys\nfrom collections import deque\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = defaultdict(set)\n    for _ in range(m):\n        a, b = sys.stdin.readline().split()\n        d[a].add(b)\n    for _ in range(n):\n        a, b = sys.stdin.readline().split()\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        a = list(a)\n        b = list(b)\n        q = deque()\n        visited = set()\n        q.append((0, a[0], b[0]))\n        while q:\n            i, c1, c2 = q.popleft()\n            if i == len(a) - 1:\n                if c1 == c2:\n                    print(\"yes\")\n                    break\n                else:\n                    print(\"no\")\n                    break\n            if (i, c1, c2) in visited:\n                continue\n            visited.add((i, c1, c2))\n            if c1 == c2:\n                q.append((i + 1, a[i + 1], b[i + 1]))\n            else:\n                if c1 in d:\n                    for c in d[c1]:\n                        q.append((i, c, c2))\n                if c2 in d:\n                    for c in d[c2]:\n                        q.append((i, c1, c))\n\n\nmain()\n", "\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = {}\n    for i in range(m):\n        a, b = sys.stdin.readline().split()\n        if a not in d:\n            d[a] = [b]\n        else:\n            d[a].append(b)\n    for i in range(n):\n        a, b = sys.stdin.readline().split()\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        a = list(a)\n        b = list(b)\n        for i in range(len(a)):\n            if a[i] in d:\n                if b[i] in d[a[i]]:\n                    continue\n                else:\n                    print(\"no\")\n                    break\n            else:\n                print(\"no\")\n                break\n        else:\n            print(\"yes\")\n\nmain()\n", "\n# https://open.kattis.com/problems/filefixit\nimport sys\n\ndef main():\n    m, n = map(int, sys.stdin.readline().split())\n    d = {}\n    for i in range(m):\n        a, b = sys.stdin.readline().split()\n        if a not in d:\n            d[a] = [b]\n        else:\n            d[a].append(b)\n    for i in range(n):\n        a, b = sys.stdin.readline().split()\n        if len(a) != len(b):\n            print(\"no\")\n            continue\n        a = list(a)\n        b = list(b)\n        for i in range(len(a)):\n            if a[i] in d:\n                if b[i] in d[a[i]]:\n                    continue\n                else:\n                    print(\"no\")\n                    break\n            else:\n                print(\"no\")\n                break\n        else:\n            print(\"yes\")\n\nmain()\n"]