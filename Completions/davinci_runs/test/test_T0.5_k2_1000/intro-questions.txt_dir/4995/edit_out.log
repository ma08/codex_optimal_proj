2022-04-12 04:53:55.231678 num operations 2
2022-04-12 04:53:55.231703 size on input set 1
2022-04-12 04:53:57.280191 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nN = int(input())\n\ntotal_time = 0\ntotal_minutes = 0\nfor i in range(N):\n    M, S = map(int, input().split())\n    total_time += S\n    total_minutes += M\n\nif total_minutes == 0:\n    print(\"measurement error\")\nelse:\n    print(total_time/total_minutes)\n"
    },
    {
      "index": 1,
      "text": "\nN = int(input())\n\ntotal_time = 0\ntotal_minutes = 0\nfor i in range(N):\n    M, S = map(int, input().split())\n    total_time += S\n    total_minutes += M\n\nif total_minutes == 0:\n    print(\"measurement error\")\nelse:\n    print(total_time/total_minutes)\n"
    }
  ],
  "created": 1649753635,
  "object": "edit"
}
2022-04-12 04:53:57.280329 fix spelling mistakes 2 ['\nN = int(input())\n\ntotal_time = 0\ntotal_minutes = 0\nfor i in range(N):\n    M, S = map(int, input().split())\n    total_time += S\n    total_minutes += M\n\nif total_minutes == 0:\n    print("measurement error")\nelse:\n    print(total_time/total_minutes)\n', '\nN = int(input())\n\ntotal_time = 0\ntotal_minutes = 0\nfor i in range(N):\n    M, S = map(int, input().split())\n    total_time += S\n    total_minutes += M\n\nif total_minutes == 0:\n    print("measurement error")\nelse:\n    print(total_time/total_minutes)\n']
2022-04-12 04:53:57.280351 size on output set 1
2022-04-12 04:53:57.280355 size on input set 1
2022-04-12 04:53:59.178864 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "N = int(input())\n\ntotal_time = 0\ntotal_minutes = 0\nfor i in range(N):\n    M, S = map(int, input().split())\n    total_time += S\n    total_minutes += M\n\nif total_minutes == 0:\n    print(\"measurement error\")\nelse:\n    print(total_time/total_minutes)\n"
    },
    {
      "index": 1,
      "text": "N = int(input())\n\ntotal_time = 0\ntotal_minutes = 0\nfor i in range(N):\n    M, S = map(int, input().split())\n    total_time += S\n    total_minutes += M\n\nif total_minutes == 0:\n    print(\"measurement error\")\nelse:\n    print(total_time/total_minutes)\n"
    }
  ],
  "created": 1649753637,
  "object": "edit"
}
2022-04-12 04:53:59.179005 fix syntax errors 2 ['N = int(input())\n\ntotal_time = 0\ntotal_minutes = 0\nfor i in range(N):\n    M, S = map(int, input().split())\n    total_time += S\n    total_minutes += M\n\nif total_minutes == 0:\n    print("measurement error")\nelse:\n    print(total_time/total_minutes)\n', 'N = int(input())\n\ntotal_time = 0\ntotal_minutes = 0\nfor i in range(N):\n    M, S = map(int, input().split())\n    total_time += S\n    total_minutes += M\n\nif total_minutes == 0:\n    print("measurement error")\nelse:\n    print(total_time/total_minutes)\n']
2022-04-12 04:53:59.179026 size on output set 1
2022-04-12 04:53:59.179044 num operations 2
2022-04-12 04:53:59.179051 size on input set 1
2022-04-12 04:54:01.533114 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\n# define function\ndef avg_min(n, M, S):\n    # initialize variables\n    sum_min = 0\n    avg = 0\n    # loop through all the observations\n    for i in range(n):\n        # convert the seconds to minutes\n        sum_min += S[i]/60\n        # calculate the average\n        avg = sum_min/M[i]\n    # check if the average is less than a minute\n    if avg <= 1:\n        return \"measurement error\"\n    else:\n        return avg\n\n# define main function\ndef main():\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize variables\n    M = []\n    S = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n    # print the average length of an SL minute in minutes\n    print(avg_min(n, M, S))\n\n# run main function\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\n# define function to calculate average length of an SL minute\ndef avg_min(n, M, S):\n    # initialize variables\n    sum_min = 0\n    avg = 0\n    # loop through all the observations\n    for i in range(n):\n        # convert the seconds to minutes\n        sum_min += S[i]/60\n        # calculate the average\n        avg = sum_min/M[i]\n    # check if the average is less than a minute\n    if avg <= 1:\n        return \"measurement error\"\n    else:\n        return avg\n\n# define main function\ndef main():\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize variables\n    M = []\n    S = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n    # print the average length of an SL minute\n    print(avg_min(n, M, S))\n\n# run main function\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649753639,
  "object": "edit"
}
2022-04-12 04:54:01.533221 fix spelling mistakes 2 ['\n\nimport sys\n\n# define function\ndef avg_min(n, M, S):\n    # initialize variables\n    sum_min = 0\n    avg = 0\n    # loop through all the observations\n    for i in range(n):\n        # convert the seconds to minutes\n        sum_min += S[i]/60\n        # calculate the average\n        avg = sum_min/M[i]\n    # check if the average is less than a minute\n    if avg <= 1:\n        return "measurement error"\n    else:\n        return avg\n\n# define main function\ndef main():\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize variables\n    M = []\n    S = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n    # print the average length of an SL minute in minutes\n    print(avg_min(n, M, S))\n\n# run main function\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\n# define function to calculate average length of an SL minute\ndef avg_min(n, M, S):\n    # initialize variables\n    sum_min = 0\n    avg = 0\n    # loop through all the observations\n    for i in range(n):\n        # convert the seconds to minutes\n        sum_min += S[i]/60\n        # calculate the average\n        avg = sum_min/M[i]\n    # check if the average is less than a minute\n    if avg <= 1:\n        return "measurement error"\n    else:\n        return avg\n\n# define main function\ndef main():\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize variables\n    M = []\n    S = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n    # print the average length of an SL minute\n    print(avg_min(n, M, S))\n\n# run main function\nif __name__ == "__main__":\n    main()\n']
2022-04-12 04:54:01.533241 size on output set 2
2022-04-12 04:54:01.533245 size on input set 2
2022-04-12 04:54:03.488983 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\n# define function to calculate average length of an SL minute\ndef avg_min(n, M, S):\n    # initialize variables\n    sum_min = 0\n    avg = 0\n    # loop through all the observations\n    for i in range(n):\n        # convert the seconds to minutes\n        sum_min += S[i]/60\n        # calculate the average\n        avg = sum_min/M[i]\n    # check if the average is less than a minute\n    if avg <= 1:\n        return \"measurement error\"\n    else:\n        return avg\n\n# define main function\ndef main():\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize variables\n    M = []\n    S = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n    # print the average length of an SL minute\n    print(avg_min(n, M, S))\n\n# run main function\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\n# define function to calculate average length of an SL minute\ndef avg_min(n, M, S):\n    # initialize variables\n    sum_min = 0\n    avg = 0\n    # loop through all the observations\n    for i in range(n):\n        # convert the seconds to minutes\n        sum_min += S[i]/60\n        # calculate the average\n        avg = sum_min/M[i]\n    # check if the average is less than a minute\n    if avg <= 1:\n        return \"measurement error\"\n    else:\n        return avg\n\n# define main function\ndef main():\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize variables\n    M = []\n    S = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n    # print the average length of an SL minute\n    print(avg_min(n, M, S))\n\n# run main function\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649753641,
  "object": "edit"
}
2022-04-12 04:54:03.489464 fix syntax errors 2 ['\nimport sys\n\n# define function to calculate average length of an SL minute\ndef avg_min(n, M, S):\n    # initialize variables\n    sum_min = 0\n    avg = 0\n    # loop through all the observations\n    for i in range(n):\n        # convert the seconds to minutes\n        sum_min += S[i]/60\n        # calculate the average\n        avg = sum_min/M[i]\n    # check if the average is less than a minute\n    if avg <= 1:\n        return "measurement error"\n    else:\n        return avg\n\n# define main function\ndef main():\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize variables\n    M = []\n    S = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n    # print the average length of an SL minute\n    print(avg_min(n, M, S))\n\n# run main function\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\n# define function to calculate average length of an SL minute\ndef avg_min(n, M, S):\n    # initialize variables\n    sum_min = 0\n    avg = 0\n    # loop through all the observations\n    for i in range(n):\n        # convert the seconds to minutes\n        sum_min += S[i]/60\n        # calculate the average\n        avg = sum_min/M[i]\n    # check if the average is less than a minute\n    if avg <= 1:\n        return "measurement error"\n    else:\n        return avg\n\n# define main function\ndef main():\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize variables\n    M = []\n    S = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n    # print the average length of an SL minute\n    print(avg_min(n, M, S))\n\n# run main function\nif __name__ == "__main__":\n    main()\n']
2022-04-12 04:54:06.474242 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# import sys library\n\nimport sys\n\n# define function\ndef avg_min(n, M, S):\n    # initialize variables\n    sum_min = 0\n    avg = 0\n    # loop through all the observations\n    for i in range(n):\n        # convert the seconds to minutes\n        sum_min += S[i]/60\n        # calculate the average\n        avg = sum_min/M[i]\n    # check if the average is less than a minute\n    if avg <= 1:\n        return \"measurement error\"\n    else:\n        return avg\n\n# define main function\ndef main():\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize variables\n    M = []\n    S = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n    # print the average length of an SL minute in minutes\n    print(avg_min(n, M, S))\n\n# run main function\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\n# define function\ndef avg_min(n, M, S):\n    # initialize variables\n    sum_min = 0\n    avg = 0\n    # loop through all the observations\n    for i in range(n):\n        # convert the seconds to minutes\n        sum_min += S[i]/60\n        # calculate the average\n        avg = sum_min/M[i]\n    # check if the average is less than a minute\n    if avg <= 1:\n        return \"measurement error\"\n    else:\n        return avg\n\n# define main function\ndef main():\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize variables\n    M = []\n    S = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n    # print the average length of an SL minute in minutes\n    print(avg_min(n, M, S))\n\n# run main function\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649753643,
  "object": "edit"
}
2022-04-12 04:54:06.474351 fix syntax errors 2 ['# import sys library\n\nimport sys\n\n# define function\ndef avg_min(n, M, S):\n    # initialize variables\n    sum_min = 0\n    avg = 0\n    # loop through all the observations\n    for i in range(n):\n        # convert the seconds to minutes\n        sum_min += S[i]/60\n        # calculate the average\n        avg = sum_min/M[i]\n    # check if the average is less than a minute\n    if avg <= 1:\n        return "measurement error"\n    else:\n        return avg\n\n# define main function\ndef main():\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize variables\n    M = []\n    S = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n    # print the average length of an SL minute in minutes\n    print(avg_min(n, M, S))\n\n# run main function\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\n# define function\ndef avg_min(n, M, S):\n    # initialize variables\n    sum_min = 0\n    avg = 0\n    # loop through all the observations\n    for i in range(n):\n        # convert the seconds to minutes\n        sum_min += S[i]/60\n        # calculate the average\n        avg = sum_min/M[i]\n    # check if the average is less than a minute\n    if avg <= 1:\n        return "measurement error"\n    else:\n        return avg\n\n# define main function\ndef main():\n    # get the number of observations\n    n = int(sys.stdin.readline().strip())\n    # initialize variables\n    M = []\n    S = []\n    # loop through all the observations\n    for i in range(n):\n        # get the minutes and seconds\n        m, s = map(int, sys.stdin.readline().strip().split())\n        # add the minutes to the list\n        M.append(m)\n        # add the seconds to the list\n        S.append(s)\n    # print the average length of an SL minute in minutes\n    print(avg_min(n, M, S))\n\n# run main function\nif __name__ == "__main__":\n    main()\n']
2022-04-12 04:54:06.474417 size on output set 3
2022-04-12 04:54:06.474430 num operations 2
2022-04-12 04:54:06.474433 size on input set 1
2022-04-12 04:54:08.402920 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    wait_time = []\n    for i in range(N):\n        M, S = map(int, sys.stdin.readline().split())\n        wait_time.append(S/M)\n    print(sum(wait_time)/N)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    wait_time = []\n    for i in range(N):\n        M, S = map(int, sys.stdin.readline().split())\n        wait_time.append(S/M)\n    print(sum(wait_time)/N)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649753646,
  "object": "edit"
}
2022-04-12 04:54:08.403331 fix spelling mistakes 2 ['\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    wait_time = []\n    for i in range(N):\n        M, S = map(int, sys.stdin.readline().split())\n        wait_time.append(S/M)\n    print(sum(wait_time)/N)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    wait_time = []\n    for i in range(N):\n        M, S = map(int, sys.stdin.readline().split())\n        wait_time.append(S/M)\n    print(sum(wait_time)/N)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 04:54:08.403371 size on output set 1
2022-04-12 04:54:08.403383 size on input set 1
2022-04-12 04:54:11.457142 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    wait_time = 0\n    for i in range(N):\n        M, S = map(int, sys.stdin.readline().split())\n        wait_time += (S/M)\n    print(wait_time/N)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    wait_time = 0\n    for i in range(N):\n        M, S = map(int, sys.stdin.readline().split())\n        wait_time += S/M\n    print(wait_time/N)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649753648,
  "object": "edit"
}
2022-04-12 04:54:11.457247 fix syntax errors 2 ['\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    wait_time = 0\n    for i in range(N):\n        M, S = map(int, sys.stdin.readline().split())\n        wait_time += (S/M)\n    print(wait_time/N)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    N = int(sys.stdin.readline())\n    wait_time = 0\n    for i in range(N):\n        M, S = map(int, sys.stdin.readline().split())\n        wait_time += S/M\n    print(wait_time/N)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 04:54:11.457260 size on output set 2
2022-04-12 04:54:11.457265 num operations 2
2022-04-12 04:54:11.457268 size on input set 1
2022-04-12 04:54:13.634343 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\n\nminutes = 0\nseconds = 0\n\nfor i in range(n):\n    m, s = map(int, input().split())\n    minutes += m\n    seconds += s\n\nif seconds/minutes > 60:\n    print(\"measurement error\") \nelse:\n    print(seconds/minutes)\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\n\nminutes = 0\nseconds = 0\n\nfor i in range(n):\n    m, s = map(int, input().split())\n    minutes += m\n    seconds += s\n\nif seconds/minutes > 60:\n    print(\"measurement error\")\nelse:\n    print(seconds/minutes)\n"
    }
  ],
  "created": 1649753651,
  "object": "edit"
}
2022-04-12 04:54:13.634526 fix spelling mistakes 2 ['\n\nn = int(input())\n\nminutes = 0\nseconds = 0\n\nfor i in range(n):\n    m, s = map(int, input().split())\n    minutes += m\n    seconds += s\n\nif seconds/minutes > 60:\n    print("measurement error") \nelse:\n    print(seconds/minutes)\n', '\nn = int(input())\n\nminutes = 0\nseconds = 0\n\nfor i in range(n):\n    m, s = map(int, input().split())\n    minutes += m\n    seconds += s\n\nif seconds/minutes > 60:\n    print("measurement error")\nelse:\n    print(seconds/minutes)\n']
2022-04-12 04:54:13.634554 size on output set 2
2022-04-12 04:54:13.634563 size on input set 2
2022-04-12 04:54:16.642125 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input(\"n: \"))\n\nminutes = 0\nseconds = 0\n\nfor i in range(n):\n    m, s = map(int, input(\"m, s: \").split())\n    minutes += m\n    seconds += s\n\nif seconds/minutes > 60:\n    print(\"measurement error\")\nelse:\n    print(seconds/minutes)\n"
    },
    {
      "index": 1,
      "text": "n = int(input())\n\nminutes = 0\nseconds = 0\n\nfor i in range(n):\n    m, s = map(int, input().split())\n    minutes += m\n    seconds += s\n\nif seconds / minutes > 60:\n    print(\"measurement error\")\nelse:\n    print(seconds / minutes)\n"
    }
  ],
  "created": 1649753653,
  "object": "edit"
}
2022-04-12 04:54:16.642277 fix syntax errors 2 ['\nn = int(input("n: "))\n\nminutes = 0\nseconds = 0\n\nfor i in range(n):\n    m, s = map(int, input("m, s: ").split())\n    minutes += m\n    seconds += s\n\nif seconds/minutes > 60:\n    print("measurement error")\nelse:\n    print(seconds/minutes)\n', 'n = int(input())\n\nminutes = 0\nseconds = 0\n\nfor i in range(n):\n    m, s = map(int, input().split())\n    minutes += m\n    seconds += s\n\nif seconds / minutes > 60:\n    print("measurement error")\nelse:\n    print(seconds / minutes)\n']
2022-04-12 04:54:19.721314 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\n\nminutes = 0\nseconds = 0\n\nfor i in range(n):\n    m, s = map(int, input().split())\n    minutes += m\n    seconds += s\n\nif seconds / minutes > 60:\n    print(\"measurement error\")\nelse:\n    print(seconds / minutes)\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\n\nminutes = 0\nseconds = 0\n\nfor i in range(n):\n    m, s = map(int, input().split())\n    minutes += m\n    seconds += s\n\nif seconds/minutes > 60:\n    print(\"measurement error\")\nelse:\n    print(seconds/minutes)\n"
    }
  ],
  "created": 1649753656,
  "object": "edit"
}
2022-04-12 04:54:19.721609 fix syntax errors 2 ['\nn = int(input())\n\nminutes = 0\nseconds = 0\n\nfor i in range(n):\n    m, s = map(int, input().split())\n    minutes += m\n    seconds += s\n\nif seconds / minutes > 60:\n    print("measurement error")\nelse:\n    print(seconds / minutes)\n', '\nn = int(input())\n\nminutes = 0\nseconds = 0\n\nfor i in range(n):\n    m, s = map(int, input().split())\n    minutes += m\n    seconds += s\n\nif seconds/minutes > 60:\n    print("measurement error")\nelse:\n    print(seconds/minutes)\n']
2022-04-12 04:54:19.721644 size on output set 4
2022-04-12 04:54:19.721656 num operations 2
2022-04-12 04:54:19.721664 size on input set 1
2022-04-12 04:54:22.650523 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n\tn = int(input())\n\ts = 0\n\tfor i in range(n):\n\t\tm, s1 = map(int, input().split())\n\t\ts += m * 60 - s1\n\tif s <= 0:\n\t\tprint(\"measurement error\") \n\telse:\n\t\tprint(s / (n * 60))\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n\tn = int(input())\n\ts = 0\n\tfor i in range(n):\n\t\tm, s1 = map(int, input().split()) # m - minutes, s1 - seconds\n\t\ts += m * 60 - s1 # s - seconds\n\tif s <= 0:\n\t\tprint(\"measurement error\")\n\telse:\n\t\tprint(s / (n * 60))\n\nif __name__ == '__main__':\n\tmain()\n"
    }
  ],
  "created": 1649753659,
  "object": "edit"
}
2022-04-12 04:54:22.650660 fix spelling mistakes 2 ['\n\ndef main():\n\tn = int(input())\n\ts = 0\n\tfor i in range(n):\n\t\tm, s1 = map(int, input().split())\n\t\ts += m * 60 - s1\n\tif s <= 0:\n\t\tprint("measurement error") \n\telse:\n\t\tprint(s / (n * 60))\n\nif __name__ == \'__main__\':\n\tmain()\n', '\n\ndef main():\n\tn = int(input())\n\ts = 0\n\tfor i in range(n):\n\t\tm, s1 = map(int, input().split()) # m - minutes, s1 - seconds\n\t\ts += m * 60 - s1 # s - seconds\n\tif s <= 0:\n\t\tprint("measurement error")\n\telse:\n\t\tprint(s / (n * 60))\n\nif __name__ == \'__main__\':\n\tmain()\n']
2022-04-12 04:54:22.650677 size on output set 2
2022-04-12 04:54:22.650681 size on input set 2
2022-04-12 04:54:24.933606 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n\tn = int(input())\n\ts = 0\n\tfor i in range(n):\n\t\tm, s1 = map(int, input().split())\n\t\ts += m * 60 - s1\n\tif s <= 0:\n\t\tprint(\"measurement error\")\n\telse:\n\t\tprint(s / (n * 60))\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n\tn = int(input())\n\ts = 0\n\tfor i in range(n):\n\t\tm, s1 = map(int, input().split())\n\t\ts += m * 60 - s1\n\tif s <= 0:\n\t\tprint(\"measurement error\")\n\telse:\n\t\tprint(s / (n * 60))\n\nif __name__ == '__main__':\n\tmain()\n"
    }
  ],
  "created": 1649753662,
  "object": "edit"
}
2022-04-12 04:54:24.933705 fix syntax errors 2 ['\n\ndef main():\n\tn = int(input())\n\ts = 0\n\tfor i in range(n):\n\t\tm, s1 = map(int, input().split())\n\t\ts += m * 60 - s1\n\tif s <= 0:\n\t\tprint("measurement error")\n\telse:\n\t\tprint(s / (n * 60))\n\nif __name__ == \'__main__\':\n\tmain()\n', '\n\ndef main():\n\tn = int(input())\n\ts = 0\n\tfor i in range(n):\n\t\tm, s1 = map(int, input().split())\n\t\ts += m * 60 - s1\n\tif s <= 0:\n\t\tprint("measurement error")\n\telse:\n\t\tprint(s / (n * 60))\n\nif __name__ == \'__main__\':\n\tmain()\n']
2022-04-12 04:54:28.129721 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n\tn = int(input())\n\ts = 0\n\tfor i in range(n):\n\t\tm, s1 = map(int, input().split())  # m - minutes, s1 - seconds\n\t\ts += m * 60 - s1  # s - seconds\n\tif s <= 0:\n\t\tprint(\"measurement error\")\n\telse:\n\t\tprint(s / (n * 60))\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n\tn = int(input())\n\ts = 0\n\tfor i in range(n):\n\t\tm, s1 = map(int, input().split())  # m - minutes, s1 - seconds\n\t\ts += m * 60 - s1  # s - seconds\n\tif s <= 0:\n\t\tprint(\"measurement error\")\n\telse:\n\t\tprint(s / (n * 60))\n\nif __name__ == '__main__':\n\tmain()\n"
    }
  ],
  "created": 1649753665,
  "object": "edit"
}
2022-04-12 04:54:28.129843 fix syntax errors 2 ['\n\ndef main():\n\tn = int(input())\n\ts = 0\n\tfor i in range(n):\n\t\tm, s1 = map(int, input().split())  # m - minutes, s1 - seconds\n\t\ts += m * 60 - s1  # s - seconds\n\tif s <= 0:\n\t\tprint("measurement error")\n\telse:\n\t\tprint(s / (n * 60))\n\nif __name__ == \'__main__\':\n\tmain()\n', '\n\ndef main():\n\tn = int(input())\n\ts = 0\n\tfor i in range(n):\n\t\tm, s1 = map(int, input().split())  # m - minutes, s1 - seconds\n\t\ts += m * 60 - s1  # s - seconds\n\tif s <= 0:\n\t\tprint("measurement error")\n\telse:\n\t\tprint(s / (n * 60))\n\nif __name__ == \'__main__\':\n\tmain()\n']
2022-04-12 04:54:28.129858 size on output set 2
2022-04-12 04:54:28.129866 num operations 2
2022-04-12 04:54:28.129871 size on input set 1
2022-04-12 04:54:32.182832 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Workaround to input() in Code Forces\ndef read_ints():\n    temp = input().split()\n    temp_ints = [int(t) for t in temp]\n    return temp_ints\n\ndef calculate_average_length_of_minute(number_of_minutes, seconds):\n    return seconds / number_of_minutes\n\ndef main():\n    number_of_observations = read_ints()[0]\n    number_of_minutes_and_seconds = []\n    for i in range(number_of_observations):\n        number_of_minutes_and_seconds.append(read_ints())\n    \n    for i in number_of_minutes_and_seconds:\n        average_length_of_minute = calculate_average_length_of_minute(i[0], i[1])\n        if average_length_of_minute <= 1:\n            print(\"measurement error\")\n        else:\n            print(average_length_of_minute)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n# Workaround to input() in CodeForces\ndef read_ints():\n    temp = input().split()\n    temp_ints = [int(t) for t in temp]\n    return temp_ints\n\ndef calculate_average_length_of_minute(number_of_minutes, second):\n    return seconds / number_of_minutes\n\ndef main():\n    number_of_observation = read_ints()[0]\n    number_of_minutes_and_seconds = []\n    for i in range(number_of_observation):\n        number_of_minutes_and_seconds.append(read_ints())\n    \n    for i in number_of_minutes_and_seconds:\n        average_length_of_minute = calculate_average_length_of_minute(i[0], i[1])\n        if average_length_of_minute <= 1:\n            print(\"measurement error\")\n        else:\n            print(average_length_of_minute)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649753668,
  "object": "edit"
}
2022-04-12 04:54:32.182934 fix spelling mistakes 2 ['\n\n# Workaround to input() in Code Forces\ndef read_ints():\n    temp = input().split()\n    temp_ints = [int(t) for t in temp]\n    return temp_ints\n\ndef calculate_average_length_of_minute(number_of_minutes, seconds):\n    return seconds / number_of_minutes\n\ndef main():\n    number_of_observations = read_ints()[0]\n    number_of_minutes_and_seconds = []\n    for i in range(number_of_observations):\n        number_of_minutes_and_seconds.append(read_ints())\n    \n    for i in number_of_minutes_and_seconds:\n        average_length_of_minute = calculate_average_length_of_minute(i[0], i[1])\n        if average_length_of_minute <= 1:\n            print("measurement error")\n        else:\n            print(average_length_of_minute)\n\nif __name__ == "__main__":\n    main()\n', '\n\n# Workaround to input() in CodeForces\ndef read_ints():\n    temp = input().split()\n    temp_ints = [int(t) for t in temp]\n    return temp_ints\n\ndef calculate_average_length_of_minute(number_of_minutes, second):\n    return seconds / number_of_minutes\n\ndef main():\n    number_of_observation = read_ints()[0]\n    number_of_minutes_and_seconds = []\n    for i in range(number_of_observation):\n        number_of_minutes_and_seconds.append(read_ints())\n    \n    for i in number_of_minutes_and_seconds:\n        average_length_of_minute = calculate_average_length_of_minute(i[0], i[1])\n        if average_length_of_minute <= 1:\n            print("measurement error")\n        else:\n            print(average_length_of_minute)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 04:54:32.183000 size on output set 2
2022-04-12 04:54:32.183004 size on input set 2
2022-04-12 04:54:34.546846 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Workaround to input() in CodeForces\ndef read_ints():\n    temp = input().split()\n    temp_ints = [int(t) for t in temp]\n    return temp_ints\n\ndef calculate_average_length_of_minute(number_of_minutes, second):\n    return second / number_of_minutes\n\ndef main():\n    number_of_observation = read_ints()[0]\n    number_of_minutes_and_seconds = []\n    for i in range(number_of_observation):\n        number_of_minutes_and_seconds.append(read_ints())\n    \n    for i in number_of_minutes_and_seconds:\n        average_length_of_minute = calculate_average_length_of_minute(i[0], i[1])\n        if average_length_of_minute <= 1:\n            print(\"measurement error\")\n        else:\n            print(average_length_of_minute)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n# Workaround to input() in CodeForces\ndef read_ints():\n    temp = input().split()\n    temp_ints = [int(t) for t in temp]\n    return temp_ints\n\ndef calculate_average_length_of_minute(number_of_minutes, second):\n    return second / number_of_minutes\n\ndef main():\n    number_of_observation = read_ints()[0]\n    number_of_minutes_and_seconds = []\n    for i in range(number_of_observation):\n        number_of_minutes_and_seconds.append(read_ints())\n    \n    for i in number_of_minutes_and_seconds:\n        average_length_of_minute = calculate_average_length_of_minute(i[0], i[1])\n        if average_length_of_minute <= 1:\n            print(\"measurement error\")\n        else:\n            print(average_length_of_minute)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649753672,
  "object": "edit"
}
2022-04-12 04:54:34.547048 fix syntax errors 2 ['\n\n# Workaround to input() in CodeForces\ndef read_ints():\n    temp = input().split()\n    temp_ints = [int(t) for t in temp]\n    return temp_ints\n\ndef calculate_average_length_of_minute(number_of_minutes, second):\n    return second / number_of_minutes\n\ndef main():\n    number_of_observation = read_ints()[0]\n    number_of_minutes_and_seconds = []\n    for i in range(number_of_observation):\n        number_of_minutes_and_seconds.append(read_ints())\n    \n    for i in number_of_minutes_and_seconds:\n        average_length_of_minute = calculate_average_length_of_minute(i[0], i[1])\n        if average_length_of_minute <= 1:\n            print("measurement error")\n        else:\n            print(average_length_of_minute)\n\nif __name__ == "__main__":\n    main()\n', '\n\n# Workaround to input() in CodeForces\ndef read_ints():\n    temp = input().split()\n    temp_ints = [int(t) for t in temp]\n    return temp_ints\n\ndef calculate_average_length_of_minute(number_of_minutes, second):\n    return second / number_of_minutes\n\ndef main():\n    number_of_observation = read_ints()[0]\n    number_of_minutes_and_seconds = []\n    for i in range(number_of_observation):\n        number_of_minutes_and_seconds.append(read_ints())\n    \n    for i in number_of_minutes_and_seconds:\n        average_length_of_minute = calculate_average_length_of_minute(i[0], i[1])\n        if average_length_of_minute <= 1:\n            print("measurement error")\n        else:\n            print(average_length_of_minute)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 04:54:40.587018 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Workaround to input() in Code Forces\ndef read_ints(number_of_inputs):\n    return [int(input()) for i in range(number_of_inputs)]\n\ndef calculate_average_length_of_minute(number_of_minutes, seconds):\n    return seconds / number_of_minutes\n\ndef main():\n    number_of_observations = read_ints(1)[0]\n    number_of_minutes_and_seconds = []\n    for i in range(number_of_observations):\n        number_of_minutes_and_seconds.append(read_ints())\n    \n    for i in number_of_minutes_and_seconds:\n        average_length_of_minute = calculate_average_length_of_minute(i[0], i[1])\n        if average_length_of_minute <= 1:\n            print(\"measurement error\")\n        else:\n            print(average_length_of_minute)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n# Workaround to input() in Code Forces\ndef read_ints():\n    temp = input().split()\n    temp_ints = [int(t) for t in temp]\n    return temp_ints\n\ndef calculate_average_length_of_minute(number_of_minutes, seconds):\n    return seconds / number_of_minutes\n\ndef main():\n    number_of_observations = read_ints()[0] # number of observations\n    number_of_minutes_and_seconds = []\n    for i in range(number_of_observations):\n        number_of_minutes_and_seconds.append(read_ints())\n    \n    for i in number_of_minutes_and_seconds:\n        average_length_of_minute = calculate_average_length_of_minute(i[0], i[1])\n        if average_length_of_minute <= 1:\n            print(\"measurement error\")\n        else:\n            print(average_length_of_minute)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649753674,
  "object": "edit"
}
2022-04-12 04:54:40.587220 fix syntax errors 2 ['\n\n# Workaround to input() in Code Forces\ndef read_ints(number_of_inputs):\n    return [int(input()) for i in range(number_of_inputs)]\n\ndef calculate_average_length_of_minute(number_of_minutes, seconds):\n    return seconds / number_of_minutes\n\ndef main():\n    number_of_observations = read_ints(1)[0]\n    number_of_minutes_and_seconds = []\n    for i in range(number_of_observations):\n        number_of_minutes_and_seconds.append(read_ints())\n    \n    for i in number_of_minutes_and_seconds:\n        average_length_of_minute = calculate_average_length_of_minute(i[0], i[1])\n        if average_length_of_minute <= 1:\n            print("measurement error")\n        else:\n            print(average_length_of_minute)\n\nif __name__ == "__main__":\n    main()\n', '\n\n# Workaround to input() in Code Forces\ndef read_ints():\n    temp = input().split()\n    temp_ints = [int(t) for t in temp]\n    return temp_ints\n\ndef calculate_average_length_of_minute(number_of_minutes, seconds):\n    return seconds / number_of_minutes\n\ndef main():\n    number_of_observations = read_ints()[0] # number of observations\n    number_of_minutes_and_seconds = []\n    for i in range(number_of_observations):\n        number_of_minutes_and_seconds.append(read_ints())\n    \n    for i in number_of_minutes_and_seconds:\n        average_length_of_minute = calculate_average_length_of_minute(i[0], i[1])\n        if average_length_of_minute <= 1:\n            print("measurement error")\n        else:\n            print(average_length_of_minute)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 04:54:40.587356 size on output set 3
2022-04-12 04:54:40.587373 num operations 2
2022-04-12 04:54:40.587381 size on input set 1
2022-04-12 04:54:45.670683 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Number of observations.\nN = int(input())\n\n# List of tuples (minutes, seconds).\ndata = []\n\n# Get data from user.\nfor i in range(N):\n    data.append(tuple(int(x) for x in input().split()))\n\n# Calculate average length of an S.L. minute.\ntotal = 0\nfor i in data:\n    total += i[1]\n\n# If average length is shorter than or equal to a normal minute, print \"measurement error\".\nif total/N <= 60:\n    print(\"measurement error\")\nelse:\n    print(total/N/60)\n"
    },
    {
      "index": 1,
      "text": "\n\n# Number of observations\nN = int(input())\n\n# List of tuples (minutes, seconds)\ndata = []\n\n# Get data from user\nfor i in range(N):\n    data.append(tuple(int(x) for x in input().split()))\n\n# Calculate average length of an SL minute\ntotal = 0\nfor i in data:\n    total += i[1]\n\n# If average length is shorter than or equal to a normal minute, print \"measurement error\"\nif total/N <= 60:\n    print(\"measurement error\")\nelse:\n    print(total/N/60)\n"
    }
  ],
  "created": 1649753680,
  "object": "edit"
}
2022-04-12 04:54:45.670862 fix spelling mistakes 2 ['\n\n# Number of observations.\nN = int(input())\n\n# List of tuples (minutes, seconds).\ndata = []\n\n# Get data from user.\nfor i in range(N):\n    data.append(tuple(int(x) for x in input().split()))\n\n# Calculate average length of an S.L. minute.\ntotal = 0\nfor i in data:\n    total += i[1]\n\n# If average length is shorter than or equal to a normal minute, print "measurement error".\nif total/N <= 60:\n    print("measurement error")\nelse:\n    print(total/N/60)\n', '\n\n# Number of observations\nN = int(input())\n\n# List of tuples (minutes, seconds)\ndata = []\n\n# Get data from user\nfor i in range(N):\n    data.append(tuple(int(x) for x in input().split()))\n\n# Calculate average length of an SL minute\ntotal = 0\nfor i in data:\n    total += i[1]\n\n# If average length is shorter than or equal to a normal minute, print "measurement error"\nif total/N <= 60:\n    print("measurement error")\nelse:\n    print(total/N/60)\n']
2022-04-12 04:54:45.670891 size on output set 2
2022-04-12 04:54:45.670899 size on input set 2
2022-04-12 04:54:50.150966 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Number of observations\nN = int(input())\n\n# List of tuples (minutes, seconds)\ndata = []\n\n# Get data from user\nfor i in range(N):\n    data.append(tuple(int(x) for x in input().split()))\n\ndef average(data):\n    total = 0\n    for i in data:\n        total += i[1]\n    return total/N\n\n# If average length is shorter than or equal to a normal minute, print \"measurement error\"\nif total/N <= 60:\n    print(\"measurement error\")\nelse:\n    print(total/N/60)\n"
    },
    {
      "index": 1,
      "text": "\n\n# Number of observations.\nN = int(input())\n\n# List of tuples (minutes, seconds).\ndata = []\n\n# Get data from user.\nfor i in range(N):\n    data.append(tuple(int(x) for x in input().split()))\n\n# Calculate average length of an SL minute.\ntotal = 0\nfor i in data:\n    total += i[1]\n\n# If average length is shorter than or equal to a normal minute, print \"measurement error\".\nif total/N <= 60:\n    print(\"measurement error\")\nelse:\n    print(total/N/60)\n"
    }
  ],
  "created": 1649753685,
  "object": "edit"
}
2022-04-12 04:54:50.151175 fix syntax errors 2 ['\n\n# Number of observations\nN = int(input())\n\n# List of tuples (minutes, seconds)\ndata = []\n\n# Get data from user\nfor i in range(N):\n    data.append(tuple(int(x) for x in input().split()))\n\ndef average(data):\n    total = 0\n    for i in data:\n        total += i[1]\n    return total/N\n\n# If average length is shorter than or equal to a normal minute, print "measurement error"\nif total/N <= 60:\n    print("measurement error")\nelse:\n    print(total/N/60)\n', '\n\n# Number of observations.\nN = int(input())\n\n# List of tuples (minutes, seconds).\ndata = []\n\n# Get data from user.\nfor i in range(N):\n    data.append(tuple(int(x) for x in input().split()))\n\n# Calculate average length of an SL minute.\ntotal = 0\nfor i in data:\n    total += i[1]\n\n# If average length is shorter than or equal to a normal minute, print "measurement error".\nif total/N <= 60:\n    print("measurement error")\nelse:\n    print(total/N/60)\n']
2022-04-12 04:54:54.902855 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Number of observations.\nN = int(input())\n\n# List of tuples (minutes, seconds).\ndata = []\n\n# Get data from user.\nfor i in range(N):\n    data.append(tuple(int(x) for x in input().split()))\n\n# Calculate average length of an S.L. minute.\ntotal = 0\nfor i in data:\n    total += i[1]\n\n# If average length is shorter than or equal to a normal minute, print \"measurement error\"\nif total/N <= 60:\n    print(\"measurement error\")\nelse:\n    print(total/N/60)\n"
    },
    {
      "index": 1,
      "text": "\n\n# Number of observations\nN = int(input())  # Number of observations\n\n# List of tuples (minutes, seconds)\ndata = []\n\n# Get data from user\nfor i in range(N):\n    data.append(tuple(int(x) for x in input().split()))\n\n# Calculate average length of an S.L. minute\ntotal = 0\nfor i in data:\n    total += i[1]\n\n# If average length is shorter than or equal to a normal minute, print \"measurement error\"\nif total/N <= 60:\n    print(\"measurement error\")\nelse:\n    print(total/N/60)\n"
    }
  ],
  "created": 1649753690,
  "object": "edit"
}
2022-04-12 04:54:54.902977 fix syntax errors 2 ['\n# Number of observations.\nN = int(input())\n\n# List of tuples (minutes, seconds).\ndata = []\n\n# Get data from user.\nfor i in range(N):\n    data.append(tuple(int(x) for x in input().split()))\n\n# Calculate average length of an S.L. minute.\ntotal = 0\nfor i in data:\n    total += i[1]\n\n# If average length is shorter than or equal to a normal minute, print "measurement error"\nif total/N <= 60:\n    print("measurement error")\nelse:\n    print(total/N/60)\n', '\n\n# Number of observations\nN = int(input())  # Number of observations\n\n# List of tuples (minutes, seconds)\ndata = []\n\n# Get data from user\nfor i in range(N):\n    data.append(tuple(int(x) for x in input().split()))\n\n# Calculate average length of an S.L. minute\ntotal = 0\nfor i in data:\n    total += i[1]\n\n# If average length is shorter than or equal to a normal minute, print "measurement error"\nif total/N <= 60:\n    print("measurement error")\nelse:\n    print(total/N/60)\n']
2022-04-12 04:54:54.903047 size on output set 4
2022-04-12 04:54:54.903055 num operations 2
2022-04-12 04:54:54.903058 size on input set 1
2022-04-12 04:54:58.329821 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    total_minutes = 0\n    total_seconds = 0\n    for i in range(n):\n        m, s = map(int, sys.stdin.readline().strip().split())\n        total_minutes += m\n        total_seconds += s\n    avg_sec = total_seconds/total_minutes\n    if avg_sec <= 60:\n        print(\"measurement error\")\n    else:\n        print(avg_sec)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    total_minutes = 0\n    total_seconds = 0\n    for i in range(n):\n        m, s = map(int, sys.stdin.readline().strip().split())\n        total_minutes += m\n        total_seconds += s\n    avg_sec = total_seconds/total_minutes\n    if avg_sec <= 60:\n        print(\"measurement error\")\n    else:\n        print(avg_sec)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649753695,
  "object": "edit"
}
2022-04-12 04:54:58.330027 fix spelling mistakes 2 ['\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    total_minutes = 0\n    total_seconds = 0\n    for i in range(n):\n        m, s = map(int, sys.stdin.readline().strip().split())\n        total_minutes += m\n        total_seconds += s\n    avg_sec = total_seconds/total_minutes\n    if avg_sec <= 60:\n        print("measurement error")\n    else:\n        print(avg_sec)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    total_minutes = 0\n    total_seconds = 0\n    for i in range(n):\n        m, s = map(int, sys.stdin.readline().strip().split())\n        total_minutes += m\n        total_seconds += s\n    avg_sec = total_seconds/total_minutes\n    if avg_sec <= 60:\n        print("measurement error")\n    else:\n        print(avg_sec)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 04:54:58.330045 size on output set 1
2022-04-12 04:54:58.330050 size on input set 1
2022-04-12 04:55:00.857156 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    total_minutes = 0\n    total_seconds = 0\n    for i in range(n):\n        m, s = map(int, sys.stdin.readline().strip().split())\n        total_minutes += m\n        total_seconds += s\n    avg_sec = total_seconds/total_minutes*60\n    if avg_sec <= 60:\n        print(\"measurement error\")\n    else:\n        print(avg_sec)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    total_minutes = 0\n    total_seconds = 0\n    for i in range(n):\n        m, s = map(int, sys.stdin.readline().strip().split())\n        total_minutes += m\n        total_seconds += s\n    avg_sec = total_seconds/n\n    if avg_sec <= 60:\n        print(\"measurement error\")\n    else:\n        print(avg_sec)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649753698,
  "object": "edit"
}
2022-04-12 04:55:00.857301 fix syntax errors 2 ['\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    total_minutes = 0\n    total_seconds = 0\n    for i in range(n):\n        m, s = map(int, sys.stdin.readline().strip().split())\n        total_minutes += m\n        total_seconds += s\n    avg_sec = total_seconds/total_minutes*60\n    if avg_sec <= 60:\n        print("measurement error")\n    else:\n        print(avg_sec)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    total_minutes = 0\n    total_seconds = 0\n    for i in range(n):\n        m, s = map(int, sys.stdin.readline().strip().split())\n        total_minutes += m\n        total_seconds += s\n    avg_sec = total_seconds/n\n    if avg_sec <= 60:\n        print("measurement error")\n    else:\n        print(avg_sec)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 04:55:00.857328 size on output set 2
