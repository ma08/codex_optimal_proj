2022-04-11 22:54:13.686132 num operations 2
2022-04-11 22:54:13.686160 size on input set 1
2022-04-11 22:54:17.518800 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# Check for the same number of black and white squares in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check for the same number of black and white squares in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# Check for the same number of black and white squares in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check for the same number of black and white squares in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n"
    }
  ],
  "created": 1649732054,
  "object": "edit"
}
2022-04-11 22:54:17.518929 fix spelling mistakes 2 ["\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# Check for the same number of black and white squares in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check for the same number of black and white squares in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n", "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# Check for the same number of black and white squares in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check for the same number of black and white squares in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n"]
2022-04-11 22:54:17.518953 size on output set 1
2022-04-11 22:54:17.518957 size on input set 1
2022-04-11 22:54:20.286840 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# Check for the same number of black and white squares in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check for the same number of black and white squares in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# Check for the same number of black and white squares in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check for the same number of black and white squares in each row and column.\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n"
    }
  ],
  "created": 1649732057,
  "object": "edit"
}
2022-04-11 22:54:20.286997 fix syntax errors 2 ["\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# Check for the same number of black and white squares in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check for the same number of black and white squares in each row and column\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n", "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(input())\n\n# Check for the same number of black and white squares in each row and column\nrow_count = []\ncol_count = []\nfor i in range(n):\n    row_count.append(grid[i].count('B'))\n    col_count.append(0)\n    for j in range(n):\n        col_count[i] += 1 if grid[j][i] == 'B' else 0\n\n# Check for adjacent squares of the same color\nfor i in range(n):\n    if grid[i].count('BBB') > 0 or grid[i].count('WWW') > 0:\n        print(0)\n        exit()\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check for the same number of black and white squares in each row and column.\nfor i in range(n):\n    if row_count[i] != n//2:\n        print(0)\n        exit()\n    if col_count[i] != n//2:\n        print(0)\n        exit()\n\nprint(1)\n"]
2022-04-11 22:54:20.287021 size on output set 2
2022-04-11 22:54:20.287052 num operations 2
2022-04-11 22:54:20.287056 size on input set 1
2022-04-11 22:54:22.506754 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/python3\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = \"\"\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\n\nif check_grid():\n    print(1)\nelse:\n    print(0)\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = \"\"\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\n\nif check_grid():\n    print(1)\nelse:\n    print(0)\n"
    }
  ],
  "created": 1649732060,
  "object": "edit"
}
2022-04-11 22:54:22.507045 fix spelling mistakes 2 ['#!/usr/bin/python3\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = ""\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\n\nif check_grid():\n    print(1)\nelse:\n    print(0)\n', '\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = ""\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\n\nif check_grid():\n    print(1)\nelse:\n    print(0)\n']
2022-04-11 22:54:22.507087 size on output set 2
2022-04-11 22:54:22.507093 size on input set 2
2022-04-11 22:54:30.657788 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/python3\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\ndef check_row(row):\n    for i in range(n - 2):\n        if row[i] == row[i + 1] == row[i + 2]:\n            return False\n    return True    \n\ndef check_column(column):\n    for i in range(n - 2):\n        if column[i] == column[i + 1] == column[i + 2]:\n            return False\n    return True    \n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = []\n        for j in range(n):\n            column.append(grid[j][i])\n        if not check_column(column):\n            return False\n    return True\n\nif check_grid():\n    print(1)\nelse:\n    print(0)\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/python3\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = \"\"\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\n\nif check_grid():\n    print('1')\nelse:\n    print('0')\n"
    }
  ],
  "created": 1649732062,
  "object": "edit"
}
2022-04-11 22:54:30.657983 fix syntax errors 2 ['#!/usr/bin/python3\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\ndef check_row(row):\n    for i in range(n - 2):\n        if row[i] == row[i + 1] == row[i + 2]:\n            return False\n    return True    \n\ndef check_column(column):\n    for i in range(n - 2):\n        if column[i] == column[i + 1] == column[i + 2]:\n            return False\n    return True    \n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = []\n        for j in range(n):\n            column.append(grid[j][i])\n        if not check_column(column):\n            return False\n    return True\n\nif check_grid():\n    print(1)\nelse:\n    print(0)\n', '#!/usr/bin/python3\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = ""\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\n\nif check_grid():\n    print(\'1\')\nelse:\n    print(\'0\')\n']
2022-04-11 22:54:36.578786 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "n = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = \"\"\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\n\nif check_grid():\n    print(1)\nelse:\n    print(0)\n"
    },
    {
      "index": 1,
      "text": "n = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\n\ndef check_row(row, n):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_column(column, n):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i], n):\n            return False\n        column = []\n        for j in range(n):\n            column.append(grid[j][i])\n        if not check_column(column, n):\n            return False\n    return True\n\nif check_grid():\n    print(1)\nelse:\n    print(0)\n"
    }
  ],
  "created": 1649732070,
  "object": "edit"
}
2022-04-11 22:54:36.579205 fix syntax errors 2 ['n = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\ndef check_row(row):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_column(column):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i]):\n            return False\n        column = ""\n        for j in range(n):\n            column += grid[j][i]\n        if not check_column(column):\n            return False\n    return True\n\nif check_grid():\n    print(1)\nelse:\n    print(0)\n', 'n = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\n\ndef check_row(row, n):\n    color = row[0]\n    count = 0\n    for i in range(n):\n        if row[i] == color:\n            count += 1\n        else:\n            color = row[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_column(column, n):\n    color = column[0]\n    count = 0\n    for i in range(n):\n        if column[i] == color:\n            count += 1\n        else:\n            color = column[i]\n            count = 1\n        if count == 3:\n            return False\n    return True\n\ndef check_grid():\n    for i in range(n):\n        if not check_row(grid[i], n):\n            return False\n        column = []\n        for j in range(n):\n            column.append(grid[j][i])\n        if not check_column(column, n):\n            return False\n    return True\n\nif check_grid():\n    print(1)\nelse:\n    print(0)\n']
2022-04-11 22:54:36.579246 size on output set 4
2022-04-11 22:54:36.579261 num operations 2
2022-04-11 22:54:36.579270 size on input set 1
2022-04-11 22:54:39.061516 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check row\nfor row in grid:\n    count = 0\n    for i in range(n-1):\n        if row[i] == row[i+1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# check column\nfor i in range(n):\n    count = 0\n    for j in range(n-1):\n        if grid[j][i] == grid[j+1][i]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check rows\nfor row in grid:\n    count = 0\n    for i in range(n-1):\n        if row[i] == row[i+1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# check columns\nfor i in range(n):\n    count = 0\n    for j in range(n-1):\n        if grid[j][i] == grid[j+1][i]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied.\nprint(1)\n"
    }
  ],
  "created": 1649732076,
  "object": "edit"
}
2022-04-11 22:54:39.061719 fix spelling mistakes 2 ['\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check row\nfor row in grid:\n    count = 0\n    for i in range(n-1):\n        if row[i] == row[i+1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# check column\nfor i in range(n):\n    count = 0\n    for j in range(n-1):\n        if grid[j][i] == grid[j+1][i]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied\nprint(1)\n', '\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check rows\nfor row in grid:\n    count = 0\n    for i in range(n-1):\n        if row[i] == row[i+1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# check columns\nfor i in range(n):\n    count = 0\n    for j in range(n-1):\n        if grid[j][i] == grid[j+1][i]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied.\nprint(1)\n']
2022-04-11 22:54:39.061767 size on output set 2
2022-04-11 22:54:39.061777 size on input set 2
2022-04-11 22:54:41.030208 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check rows\nfor row in grid:\n    count = 0\n    for i in range(n-1):\n        if row[i] == row[i+1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# check columns\nfor i in range(n):\n    count = 0\n    for j in range(n-1):\n        if grid[j][i] == grid[j+1][i]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied.\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check rows\nfor row in grid:\n    count = 0\n    for i in range(n-1):\n        if row[i] == row[i+1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# check columns\nfor i in range(n):\n    count = 0\n    for j in range(n-1):\n        if grid[j][i] == grid[j+1][i]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied.\nprint(1)\n"
    }
  ],
  "created": 1649732079,
  "object": "edit"
}
2022-04-11 22:54:41.030454 fix syntax errors 2 ['\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check rows\nfor row in grid:\n    count = 0\n    for i in range(n-1):\n        if row[i] == row[i+1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# check columns\nfor i in range(n):\n    count = 0\n    for j in range(n-1):\n        if grid[j][i] == grid[j+1][i]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied.\nprint(1)\n', '\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check rows\nfor row in grid:\n    count = 0\n    for i in range(n-1):\n        if row[i] == row[i+1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# check columns\nfor i in range(n):\n    count = 0\n    for j in range(n-1):\n        if grid[j][i] == grid[j+1][i]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied.\nprint(1)\n']
2022-04-11 22:54:43.010780 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check row\nfor row in grid:\n    count = 0\n    for i in range(n-1):\n        if row[i] == row[i+1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# check column\nfor i in range(n):\n    count = 0\n    for j in range(n-1):\n        if grid[j][i] == grid[j+1][i]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check row\nfor row in grid:\n    count = 0\n    for i in range(n-1):\n        if row[i] == row[i+1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# check column\nfor i in range(n):\n    count = 0\n    for j in range(n-1):\n        if grid[j][i] == grid[j+1][i]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied\nprint(1)\n"
    }
  ],
  "created": 1649732081,
  "object": "edit"
}
2022-04-11 22:54:43.011165 fix syntax errors 2 ['\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check row\nfor row in grid:\n    count = 0\n    for i in range(n-1):\n        if row[i] == row[i+1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# check column\nfor i in range(n):\n    count = 0\n    for j in range(n-1):\n        if grid[j][i] == grid[j+1][i]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied\nprint(1)\n', '\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# check row\nfor row in grid:\n    count = 0\n    for i in range(n-1):\n        if row[i] == row[i+1]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# check column\nfor i in range(n):\n    count = 0\n    for j in range(n-1):\n        if grid[j][i] == grid[j+1][i]:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            print(0)\n            exit()\n\n# if all conditions are satisfied\nprint(1)\n']
2022-04-11 22:54:43.011197 size on output set 2
2022-04-11 22:54:43.011213 num operations 2
2022-04-11 22:54:43.011218 size on input set 1
2022-04-11 22:54:46.937537 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column.\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column.\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same colour in any row or column\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n"
    }
  ],
  "created": 1649732083,
  "object": "edit"
}
2022-04-11 22:54:46.937834 fix spelling mistakes 2 ["\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column.\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column.\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n", "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same colour in any row or column\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n"]
2022-04-11 22:54:46.937863 size on output set 2
2022-04-11 22:54:46.937870 size on input set 2
2022-04-11 22:54:58.316614 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column.\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column.\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column.\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column.\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] and grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] and grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] and grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] and grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] and grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n"
    }
  ],
  "created": 1649732087,
  "object": "edit"
}
2022-04-11 22:54:58.317072 fix syntax errors 2 ["\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column.\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column.\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n", "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column.\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same color in any row or column.\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] and grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] and grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] and grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] and grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] and grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n"]
2022-04-11 22:55:09.572970 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same colour in any row or column\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] and grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] and grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] and grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] and grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] and grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)]) # sum([True, False, True]) = 2\n    num_white = sum([grid[j][i] == 'W' for j in range(n)]) # sum([False, True, False]) = 1\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same colour in any row or column\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n"
    }
  ],
  "created": 1649732098,
  "object": "edit"
}
2022-04-11 22:55:09.573423 fix syntax errors 2 ["\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)])\n    num_white = sum([grid[j][i] == 'W' for j in range(n)])\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same colour in any row or column\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] and grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] and grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] and grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] and grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] and grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n", "\n\nn = int(input())\n\ngrid = []\nfor _ in range(n):\n    grid.append(list(input()))\n\n# Check for equal number of black and white squares in each row and column\nnum_black = sum([grid[i].count('B') for i in range(n)])\nnum_white = sum([grid[i].count('W') for i in range(n)])\nif (num_black != num_white):\n    print(0)\n    exit()\n\nfor i in range(n):\n    num_black = sum([grid[j][i] == 'B' for j in range(n)]) # sum([True, False, True]) = 2\n    num_white = sum([grid[j][i] == 'W' for j in range(n)]) # sum([False, True, False]) = 1\n    if (num_black != num_white):\n        print(0)\n        exit()\n\n# Check for 3 consecutive squares of the same colour in any row or column\nfor i in range(n):\n    if (grid[i][0] == grid[i][1] == grid[i][2]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[i][j] == grid[i][j+1] == grid[i][j+2]):\n            print(0)\n            exit()\n    if (grid[i][n-3] == grid[i][n-2] == grid[i][n-1]):\n        print(0)\n        exit()\n\nfor i in range(n):\n    if (grid[0][i] == grid[1][i] == grid[2][i]):\n        print(0)\n        exit()\n    for j in range(n-2):\n        if (grid[j][i] == grid[j+1][i] == grid[j+2][i]):\n            print(0)\n            exit()\n    if (grid[n-3][i] == grid[n-2][i] == grid[n-1][i]):\n        print(0)\n        exit()\n\nprint(1)\n"]
2022-04-11 22:55:09.573468 size on output set 4
2022-04-11 22:55:09.573485 num operations 2
2022-04-11 22:55:09.573490 size on input set 1
2022-04-11 22:55:13.826725 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# read the input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition (the number of black and white cells must be equal)\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the second condition (the number of black and white cells in each row and column must be equal)\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the third condition (there must be no 3 consecutive cells of the same color in a row or column)\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n            exit()\n\n# if the grid is correct, print 1\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\n\n# read the input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition: the number of black cells should be equal to the number of white cells\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the second condition: the number of black cells in each row should be equal to the number of white cells in each row\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the third condition\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n            exit()\n\n# if the grid is correct, print 1\nprint(1)\n"
    }
  ],
  "created": 1649732109,
  "object": "edit"
}
2022-04-11 22:55:13.827066 fix spelling mistakes 2 ["\n\n# read the input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition (the number of black and white cells must be equal)\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the second condition (the number of black and white cells in each row and column must be equal)\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the third condition (there must be no 3 consecutive cells of the same color in a row or column)\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n            exit()\n\n# if the grid is correct, print 1\nprint(1)\n", "\n\n# read the input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition: the number of black cells should be equal to the number of white cells\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the second condition: the number of black cells in each row should be equal to the number of white cells in each row\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the third condition\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n            exit()\n\n# if the grid is correct, print 1\nprint(1)\n"]
2022-04-11 22:55:13.827264 size on output set 2
2022-04-11 22:55:13.827274 size on input set 2
2022-04-11 22:55:18.413143 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# read the input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition: the number of black cells should be equal to the number of white cells\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the second condition: the number of black cells in each row should be equal to the number of white cells in each row\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the third condition\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[j] for row in grid][i] == [row[j+1] for row in grid][i] == [row[j+2] for row in grid][i]:\n            print(0)\n            exit()\n\n# if the grid is correct, print 1\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\n# read the input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition: the number of black cells should be equal to the number of white cells\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the second condition: the number of black cells in each row should be equal to the number of white cells in each row\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the third condition\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n            exit()\n\n# if the grid is correct, print 1\nprint(1)\n"
    }
  ],
  "created": 1649732114,
  "object": "edit"
}
2022-04-11 22:55:18.413468 fix syntax errors 2 ["\n\n# read the input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition: the number of black cells should be equal to the number of white cells\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the second condition: the number of black cells in each row should be equal to the number of white cells in each row\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the third condition\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[j] for row in grid][i] == [row[j+1] for row in grid][i] == [row[j+2] for row in grid][i]:\n            print(0)\n            exit()\n\n# if the grid is correct, print 1\nprint(1)\n", "\n# read the input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition: the number of black cells should be equal to the number of white cells\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the second condition: the number of black cells in each row should be equal to the number of white cells in each row\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the third condition\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n            exit()\n\n# if the grid is correct, print 1\nprint(1)\n"]
2022-04-11 22:55:20.422713 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# read the input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition (the number of black and white cells must be equal)\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the second condition (the number of black and white cells in each row and column must be equal)\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the third condition (there must be no 3 consecutive cells of the same color in a row or column)\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n            exit()\n\n# if the grid is correct, print 1\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\n# read the input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition (the number of black and white cells must be equal)\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the second condition (the number of black and white cells in each row and column must be equal)\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the third condition (there must be no 3 consecutive cells of the same color in a row or column)\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n            exit()\n\n# if the grid is correct, print 1\nprint(1)\n"
    }
  ],
  "created": 1649732118,
  "object": "edit"
}
2022-04-11 22:55:20.422879 fix syntax errors 2 ["\n# read the input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition (the number of black and white cells must be equal)\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the second condition (the number of black and white cells in each row and column must be equal)\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the third condition (there must be no 3 consecutive cells of the same color in a row or column)\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n            exit()\n\n# if the grid is correct, print 1\nprint(1)\n", "\n# read the input data\nn = int(input())\ngrid = [list(input()) for i in range(n)]\n\n# check the first condition (the number of black and white cells must be equal)\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += grid[i].count('B') - grid[i].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the second condition (the number of black and white cells in each row and column must be equal)\nblack_white_count = 0\nfor i in range(n):\n    black_white_count += [row[i] for row in grid].count('B') - [row[i] for row in grid].count('W')\nif black_white_count != 0:\n    print(0)\n    exit()\n\n# check the third condition (there must be no 3 consecutive cells of the same color in a row or column)\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] == grid[i][j+2] or [row[i] for row in grid][j] == [row[i] for row in grid][j+1] == [row[i] for row in grid][j+2]:\n            print(0)\n            exit()\n\n# if the grid is correct, print 1\nprint(1)\n"]
2022-04-11 22:55:20.422904 size on output set 3
2022-04-11 22:55:20.422911 num operations 2
2022-04-11 22:55:20.422915 size on input set 1
2022-04-11 22:55:22.846716 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\ngrid = [input() for _ in range(n)]\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\ngrid = [input() for _ in range(n)]\n\n# check rows\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check columns\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n"
    }
  ],
  "created": 1649732120,
  "object": "edit"
}
2022-04-11 22:55:22.846923 fix spelling mistakes 2 ["\nn = int(input())\ngrid = [input() for _ in range(n)]\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n", "\n\nn = int(input())\ngrid = [input() for _ in range(n)]\n\n# check rows\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check columns\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n"]
2022-04-11 22:55:22.846953 size on output set 2
2022-04-11 22:55:22.846961 size on input set 2
2022-04-11 22:55:25.060649 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "n = int(input())\ngrid = [input() for _ in range(n)]\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "n = int(input())\ngrid = [input() for _ in range(n)]\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n"
    }
  ],
  "created": 1649732123,
  "object": "edit"
}
2022-04-11 22:55:25.061131 fix syntax errors 2 ["n = int(input())\ngrid = [input() for _ in range(n)]\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n", "n = int(input())\ngrid = [input() for _ in range(n)]\n\n# check row\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check column\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n"]
2022-04-11 22:55:28.292501 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn = int(input())\ngrid = [input() for _ in range(n)]\n\n# check rows\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n - 2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check columns\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n - 2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\ngrid = [input() for _ in range(n)]\n\n# check rows\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check columns\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n"
    }
  ],
  "created": 1649732125,
  "object": "edit"
}
2022-04-11 22:55:28.292770 fix syntax errors 2 ["\nn = int(input())\ngrid = [input() for _ in range(n)]\n\n# check rows\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n - 2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check columns\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n - 2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n", "\nn = int(input())\ngrid = [input() for _ in range(n)]\n\n# check rows\nfor row in grid:\n    # check color\n    if row.count('B') != row.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if row[i] == row[i+1] == row[i+2]:\n            print(0)\n            exit()\n\n# check columns\nfor j in range(n):\n    column = [grid[i][j] for i in range(n)]\n    # check color\n    if column.count('B') != column.count('W'):\n        print(0)\n        exit()\n    # check consecutive\n    for i in range(n-2):\n        if column[i] == column[i+1] == column[i+2]:\n            print(0)\n            exit()\n\nprint(1)\n"]
2022-04-11 22:55:28.292799 size on output set 3
2022-04-11 22:55:28.292812 num operations 2
2022-04-11 22:55:28.292816 size on input set 1
2022-04-11 22:55:31.598726 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef is_correct(grid):\n    n = len(grid)\n    # check if each row has equal number of black and white squares\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n    # check if each column has equal number of black and white squares\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n            return False\n    # check if no more than two consecutive squares of the same color\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef is_correct(grid):\n    n = len(grid)\n    # check if rows have equal number of black and white squares\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n    # check if columns have equal number of black and white squares\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n            return False\n    # check if no more than two consecutive squares of the same color\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n"
    }
  ],
  "created": 1649732128,
  "object": "edit"
}
2022-04-11 22:55:31.598866 fix spelling mistakes 2 ["\n\ndef is_correct(grid):\n    n = len(grid)\n    # check if each row has equal number of black and white squares\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n    # check if each column has equal number of black and white squares\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n            return False\n    # check if no more than two consecutive squares of the same color\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n", "\n\ndef is_correct(grid):\n    n = len(grid)\n    # check if rows have equal number of black and white squares\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n    # check if columns have equal number of black and white squares\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n            return False\n    # check if no more than two consecutive squares of the same color\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n"]
2022-04-11 22:55:31.598949 size on output set 2
2022-04-11 22:55:31.598955 size on input set 2
2022-04-11 22:55:41.757678 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef is_correct(n, grid):\n    # check if each row has equal number of black and white squares and no more than two consecutive squares of the same color\n    if all(row.count('B') == row.count('W') and 'BBB' not in row and 'WWW' not in row for row in grid):\n        # check if each column has equal number of black and white squares and no more than two consecutive squares of the same color\n        if all(column.count('B') == column.count('W') and 'BBB' not in column and 'WWW' not in column for column in zip(*grid)):\n            return True\n    return False\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(n, grid):\n        print(1)\n    else:\n        print(0)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef is_correct(grid):\n    pass\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n"
    }
  ],
  "created": 1649732131,
  "object": "edit"
}
2022-04-11 22:55:41.757951 fix syntax errors 2 ["\n\ndef is_correct(n, grid):\n    # check if each row has equal number of black and white squares and no more than two consecutive squares of the same color\n    if all(row.count('B') == row.count('W') and 'BBB' not in row and 'WWW' not in row for row in grid):\n        # check if each column has equal number of black and white squares and no more than two consecutive squares of the same color\n        if all(column.count('B') == column.count('W') and 'BBB' not in column and 'WWW' not in column for column in zip(*grid)):\n            return True\n    return False\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(n, grid):\n        print(1)\n    else:\n        print(0)\n", "\n\ndef is_correct(grid):\n    pass\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n"]
2022-04-11 22:55:48.648592 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef is_correct(grid):\n    n = len(grid)\n    # check if rows have equal number of black and white squares\n    for row in grid:\n        if row.count('B') != row.count('W') or 'BBB' in row or 'WWW' in row:\n            return False\n    # check if columns have equal number of black and white squares\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W') or 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n"
    },
    {
      "index": 1,
      "text": "\ndef is_correct(grid):\n    n = len(grid)\n    # check if rows have equal number of black and white squares\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n    # check if columns have equal number of black and white squares\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n            return False\n    # check if no more than two consecutive squares of the same color\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n"
    }
  ],
  "created": 1649732141,
  "object": "edit"
}
2022-04-11 22:55:48.648777 fix syntax errors 2 ["\ndef is_correct(grid):\n    n = len(grid)\n    # check if rows have equal number of black and white squares\n    for row in grid:\n        if row.count('B') != row.count('W') or 'BBB' in row or 'WWW' in row:\n            return False\n    # check if columns have equal number of black and white squares\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W') or 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n", "\ndef is_correct(grid):\n    n = len(grid)\n    # check if rows have equal number of black and white squares\n    for row in grid:\n        if row.count('B') != row.count('W'):\n            return False\n    # check if columns have equal number of black and white squares\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if column.count('B') != column.count('W'):\n            return False\n    # check if no more than two consecutive squares of the same color\n    for row in grid:\n        if 'BBB' in row or 'WWW' in row:\n            return False\n    for i in range(n):\n        column = [row[i] for row in grid]\n        if 'BBB' in column or 'WWW' in column:\n            return False\n    return True\n\nif __name__ == '__main__':\n    n = int(input())\n    grid = [input() for _ in range(n)]\n    if is_correct(grid):\n        print(1)\n    else:\n        print(0)\n"]
2022-04-11 22:55:48.648815 size on output set 4
2022-04-11 22:55:48.648834 num operations 2
2022-04-11 22:55:48.648840 size on input set 1
2022-04-11 22:55:53.800783 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i].count('B') + grid[i].count('W') != n:\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW or countB + countW != n:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W'):\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares of the same color\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares of the same color\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n"
    }
  ],
  "created": 1649732148,
  "object": "edit"
}
2022-04-11 22:55:53.800993 fix spelling mistakes 2 ["\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i].count('B') + grid[i].count('W') != n:\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW or countB + countW != n:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n", "\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W'):\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares of the same color\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares of the same color\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n"]
2022-04-11 22:55:53.801014 size on output set 2
2022-04-11 22:55:53.801018 size on input set 2
2022-04-11 22:56:35.830754 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i].count('B') + grid[i].count('W') != n or grid[i].count('B') + grid[i].count('W') + grid[i].count('.') != n:\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW or countB + countW != n or countB + countW + grid[i].count('.') != n:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\n\n# n = int(input())\n# n2 = n * n\n\n# grid = []\n# for i in range(n):\n#     grid.append(input())\n\n# # Check rows\n# for i in range(n):\n#     if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i].count('B') + grid[i].count('W') != n:\n#         print(0)\n#         exit()\n\n# # Check columns\n# for j in range(n):\n#     countB = 0\n#     countW = 0\n#     for i in range(n):\n#         if grid[i][j] == 'B':\n#             countB += 1\n#         elif grid[i][j] == 'W':\n#             countW += 1\n#     if countB != n // 2 or countB != countW or countB + countW != n:\n#         print(0)\n#         exit()\n\n# # Check rows for consecutive squares\n# for i in range(n):\n#     for j in range(n-2):\n#         if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n#             print(0)\n#             exit()\n\n# # Check columns for consecutive squares\n# for j in range(n):\n#     for i in range(n-2):\n#         if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n#             print(0)\n#             exit()\n\n# print(1)\n\n\n# n = int(input())\n# n2 = n * n\n\n# grid = []\n# for i in range(n):\n#     grid.append(input())\n\n# # Check rows\n# for i in range(n):\n#     if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i].count('B') + grid[i].count('W') != n:\n#         print(0)\n#         exit()\n\n# # Check columns\n# for j in range(n):\n#     countB = 0\n#     countW = 0\n#     for i in range(n):\n#         if grid[i][j] == 'B':\n#             countB += 1\n#         elif grid[i][j] == 'W':\n#             countW += 1\n#     if countB != n // 2 or countB != countW or countB + countW != n:\n#         print(0)\n#         exit()\n\n# # Check rows for consecutive squares\n# for i in range(n):\n#     for j in range(n-2):\n#         if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n#             print(0)\n#             exit()\n\n# # Check columns for consecutive squares\n# for j in range(n):\n#     for i in range(n-2):\n#         if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n#             print(0)\n#             exit()\n\n# print(1)\n\n\n# n = int(input())\n# n2 = n * n\n\n# grid = []\n# for i in range(n):\n#     grid.append(input())\n\n# # Check rows\n# for i in range(n):\n#     if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i].count('B') + grid[i].count('W') != n:\n#         print(0)\n#         exit()\n\n# # Check columns\n# for j in range(n):\n#     countB = 0\n#     countW = 0\n#     for i in range(n):\n#         if grid[i][j] == 'B':\n#             countB += 1\n#         elif grid[i][j] == 'W':\n#             countW += 1\n#     if countB != n // 2 or countB != countW or countB + countW != n:\n#         print(0)\n#         exit()\n\n# # Check rows for consecutive squares\n# for i in range(n):\n#     for j in range(n-2):\n#         if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n#             print(0)\n#             exit()\n\n# # Check columns for consecutive squares\n# for j in range(n):\n#     for i in range(n-2):\n#         if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n#             print(0)\n#             exit()\n\n# print(1)\n\n\n# n = int(input())\n# n2 = n * n\n\n# grid = []\n# for i in range(n):\n#     grid.append(input())\n\n# # Check rows\n# for i in range(n):\n#     if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i].count('B') + grid[i].count('W') != n:\n#         print(0)\n#         exit()\n\n# # Check columns\n# for j in range(n):\n#     countB = 0\n#     countW = 0\n#     for i in range(n):\n#         if grid[i][j] == 'B':\n#             countB += 1\n#         elif grid[i][j] == 'W':\n#             countW += 1\n#     if countB != n // 2 or countB != countW or countB + countW != n:\n#         print(0)\n#         exit()\n\n# # Check rows for consecutive squares\n# for i in range(n):\n#     for j in range(n-2):\n#         if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n#             print(0)\n#             exit()\n\n# # Check columns for consecutive squares\n# for j in range(n):\n#     for i in range(n-2):\n#         if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n#             print(0)\n#             exit()\n\n# print(1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i].count('B') + grid[i].count('W') != n:\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW or countB + countW != n:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n"
    }
  ],
  "created": 1649732154,
  "object": "edit"
}
2022-04-11 22:56:35.831222 fix syntax errors 2 ["\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i].count('B') + grid[i].count('W') != n or grid[i].count('B') + grid[i].count('W') + grid[i].count('.') != n:\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW or countB + countW != n or countB + countW + grid[i].count('.') != n:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n", "\n\n# n = int(input())\n# n2 = n * n\n\n# grid = []\n# for i in range(n):\n#     grid.append(input())\n\n# # Check rows\n# for i in range(n):\n#     if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i].count('B') + grid[i].count('W') != n:\n#         print(0)\n#         exit()\n\n# # Check columns\n# for j in range(n):\n#     countB = 0\n#     countW = 0\n#     for i in range(n):\n#         if grid[i][j] == 'B':\n#             countB += 1\n#         elif grid[i][j] == 'W':\n#             countW += 1\n#     if countB != n // 2 or countB != countW or countB + countW != n:\n#         print(0)\n#         exit()\n\n# # Check rows for consecutive squares\n# for i in range(n):\n#     for j in range(n-2):\n#         if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n#             print(0)\n#             exit()\n\n# # Check columns for consecutive squares\n# for j in range(n):\n#     for i in range(n-2):\n#         if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n#             print(0)\n#             exit()\n\n# print(1)\n\n\n# n = int(input())\n# n2 = n * n\n\n# grid = []\n# for i in range(n):\n#     grid.append(input())\n\n# # Check rows\n# for i in range(n):\n#     if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i].count('B') + grid[i].count('W') != n:\n#         print(0)\n#         exit()\n\n# # Check columns\n# for j in range(n):\n#     countB = 0\n#     countW = 0\n#     for i in range(n):\n#         if grid[i][j] == 'B':\n#             countB += 1\n#         elif grid[i][j] == 'W':\n#             countW += 1\n#     if countB != n // 2 or countB != countW or countB + countW != n:\n#         print(0)\n#         exit()\n\n# # Check rows for consecutive squares\n# for i in range(n):\n#     for j in range(n-2):\n#         if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n#             print(0)\n#             exit()\n\n# # Check columns for consecutive squares\n# for j in range(n):\n#     for i in range(n-2):\n#         if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n#             print(0)\n#             exit()\n\n# print(1)\n\n\n# n = int(input())\n# n2 = n * n\n\n# grid = []\n# for i in range(n):\n#     grid.append(input())\n\n# # Check rows\n# for i in range(n):\n#     if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i].count('B') + grid[i].count('W') != n:\n#         print(0)\n#         exit()\n\n# # Check columns\n# for j in range(n):\n#     countB = 0\n#     countW = 0\n#     for i in range(n):\n#         if grid[i][j] == 'B':\n#             countB += 1\n#         elif grid[i][j] == 'W':\n#             countW += 1\n#     if countB != n // 2 or countB != countW or countB + countW != n:\n#         print(0)\n#         exit()\n\n# # Check rows for consecutive squares\n# for i in range(n):\n#     for j in range(n-2):\n#         if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n#             print(0)\n#             exit()\n\n# # Check columns for consecutive squares\n# for j in range(n):\n#     for i in range(n-2):\n#         if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n#             print(0)\n#             exit()\n\n# print(1)\n\n\n# n = int(input())\n# n2 = n * n\n\n# grid = []\n# for i in range(n):\n#     grid.append(input())\n\n# # Check rows\n# for i in range(n):\n#     if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i].count('B') + grid[i].count('W') != n:\n#         print(0)\n#         exit()\n\n# # Check columns\n# for j in range(n):\n#     countB = 0\n#     countW = 0\n#     for i in range(n):\n#         if grid[i][j] == 'B':\n#             countB += 1\n#         elif grid[i][j] == 'W':\n#             countW += 1\n#     if countB != n // 2 or countB != countW or countB + countW != n:\n#         print(0)\n#         exit()\n\n# # Check rows for consecutive squares\n# for i in range(n):\n#     for j in range(n-2):\n#         if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n#             print(0)\n#             exit()\n\n# # Check columns for consecutive squares\n# for j in range(n):\n#     for i in range(n-2):\n#         if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n#             print(0)\n#             exit()\n\n# print(1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i].count('B') + grid[i].count('W') != n:\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW or countB + countW != n:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n"]
2022-04-11 22:56:41.146753 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i].count('B') != grid[i].count('W'):\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW or countB != countW:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares of the same color\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares of the same color\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i].count('B') != grid[i].count('W'):\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares of the same color\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares of the same color\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n"
    }
  ],
  "created": 1649732196,
  "object": "edit"
}
2022-04-11 22:56:41.147212 fix syntax errors 2 ["\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i].count('B') != grid[i].count('W'):\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW or countB != countW:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares of the same color\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares of the same color\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n", "\n\nn = int(input())\nn2 = n * n\n\ngrid = []\nfor i in range(n):\n    grid.append(input())\n\n# Check rows\nfor i in range(n):\n    if grid[i].count('B') != n // 2 or grid[i].count('B') != grid[i].count('W') or grid[i].count('B') != grid[i].count('W'):\n        print(0)\n        exit()\n\n# Check columns\nfor j in range(n):\n    countB = 0\n    countW = 0\n    for i in range(n):\n        if grid[i][j] == 'B':\n            countB += 1\n        elif grid[i][j] == 'W':\n            countW += 1\n    if countB != n // 2 or countB != countW:\n        print(0)\n        exit()\n\n# Check rows for consecutive squares of the same color\nfor i in range(n):\n    for j in range(n-2):\n        if grid[i][j] == grid[i][j+1] and grid[i][j+1] == grid[i][j+2]:\n            print(0)\n            exit()\n\n# Check columns for consecutive squares of the same color\nfor j in range(n):\n    for i in range(n-2):\n        if grid[i][j] == grid[i+1][j] and grid[i+1][j] == grid[i+2][j]:\n            print(0)\n            exit()\n\nprint(1)\n"]
2022-04-11 22:56:41.147251 size on output set 4
