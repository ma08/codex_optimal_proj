["\n\nclass Solution:\n    def canThreePartsEqualSum(self, A) -> bool:\n        total = sum(A)\n        if total % 3 != 0:\n            return False\n        target = total // 3\n        cur = 0\n        count = 0\n        for num in A:\n            cur += num\n            if cur == target:\n                count += 1\n                cur = 0\n        return count == 3\n", "\nclass Solution:\n    def canThreePartsEqualSum(self, A) -> bool:\n        total = sum(A)\n        if total % 3 != 0:\n            return False\n        part_sum = total // 3\n        i, cur_sum = 0, 0\n        while i < len(A):\n            cur_sum += A[i]\n            if cur_sum == part_sum:\n                break\n            i += 1\n        if cur_sum != part_sum:\n            return False\n        j, cur_sum = i + 1, 0\n        while j < len(A):\n            cur_sum += A[j]\n            if cur_sum == part_sum:\n                break\n            j += 1\n        if cur_sum != part_sum:\n            return False\n        return True\n\n\nif __name__ == '__main__':\n    A = [0, 2, 1, -6, 6, -7, 9, 1, 2, 0, 1]\n    print(Solution().canThreePartsEqualSum(A))\n", "class Solution:\n    def canThreePartsEqualSum(self, A) -> bool:\n        total = sum(A)\n        if total % 3 != 0:\n            return False\n        target = total // 3\n        cur = 0\n        count = 0\n        for num in A:\n            cur += num\n            if cur == target:\n                count += 1\n                cur = 0\n        return count == 3\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2019/10/23 11:40\n# @Author  : tc\n# @File    : 1013.PartitionArrayIntoThreePartsWithEqualSum.py\n\"\"\"\n\u9898\u53f7 1013 \u5c06\u6570\u7ec4\u5206\u6210\u548c\u76f8\u7b49\u7684\u4e09\u4e2a\u90e8\u5206\n\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\u00a0A\uff0c\u53ea\u6709\u53ef\u4ee5\u5c06\u5176\u5212\u5206\u4e3a\u4e09\u4e2a\u548c\u76f8\u7b49\u7684\u975e\u7a7a\u90e8\u5206\u65f6\u624d\u8fd4\u56de\u00a0true\uff0c\u5426\u5219\u8fd4\u56de false\u3002\n\n\u5f62\u5f0f\u4e0a\uff0c\u5982\u679c\u53ef\u4ee5\u627e\u51fa\u7d22\u5f15\u00a0i+1 < j\u00a0\u4e14\u6ee1\u8db3\u00a0(A[0] + A[1] + ... + A[i] == A[i+1] + A[i+2] + ... + A[j-1] == A[j] + A[j-1] + ... + A[A.length - 1])\u00a0\u5c31\u53ef\u4ee5\u5c06\u6570\u7ec4\u4e09\u7b49\u5206\u3002\n\n\u793a\u4f8b 1\uff1a\n\n\u8f93\u51fa\uff1a[0,2,1,-6,6,-7,9,1,2,0,1]\n\u8f93\u51fa\uff1atrue\n\u89e3\u91ca\uff1a0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1\n\u793a\u4f8b 2\uff1a\n\n\u8f93\u5165\uff1a[0,2,1,-6,6,7,9,-1,2,0,1]\n\u8f93\u51fa\uff1afalse\n\u793a\u4f8b 3\uff1a\n\n\u8f93\u5165\uff1a[3,3,6,5,-2,2,5,1,-9,4]\n\u8f93\u51fa\uff1atrue\n\u89e3\u91ca\uff1a3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4\n\n\u63d0\u793a\uff1a\n\n3 <= A.length <= 50000\n-10^4\u00a0<= A[i] <= 10^4\n\n\u53c2\u8003:https://leetcode-cn.com/problems/partition-array-into-three-parts-with-equal-sum/solution/fen-ge-shu-zu-wei-san-ge-deng-de-bu-fen-by-leetco/\n\n\"\"\"\nfrom typing import List\n\nclass Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        total = sum(A)\n        if total % 3 != 0:\n            return False\n        target = total // 3\n        cur = 0\n        count = 0\n        for num in A:\n            cur += num\n            if cur == target:\n                count += 1\n                cur = 0\n        return count == 3\n", "\n\n\nclass Solution:\n    def canThreePartsEqualSum(self, A) -> bool:\n        total = sum(A)\n        if total % 3 != 0:\n            return False\n        part_sum = total // 3\n        i, cur_sum = 0, 0\n        while i < len(A):\n            cur_sum += A[i]\n            if cur_sum == part_sum:\n                break\n            i += 1\n        if cur_sum != part_sum:\n            return False\n        j, cur_sum = i + 1, 0\n        while j < len(A):\n            cur_sum += A[j]\n            if cur_sum == part_sum:\n                break\n            j += 1\n        if cur_sum != part_sum:\n            return False\n        return True\n\n\nif __name__ == '__main__':\n    A = [0, 2, 1, -6, 6, -7, 9, 1, 2, 0, 1]\n    print(Solution().canThreePartsEqualSum(A))\n", "\nclass Solution:\n    def canThreePartsEqualSum(self, A) -> bool:\n        total = sum(A)\n        if total % 3 != 0:\n            return False\n        target = total // 3\n        cur = 0\n        count = 0\n        for num in A:\n            cur += num\n            if cur == target:\n                count += 1\n                cur = 0\n        return count == 3 \n", "\n# \n\nclass Solution:\n    def canThreePartsEqualSum(self, A) -> bool:\n        total = sum(A)\n        if total % 3 != 0:\n            return False\n        part_sum = total // 3\n        i, cur_sum = 0, 0\n        while i < len(A):\n            cur_sum += A[i]\n            if cur_sum == part_sum:\n                break\n            i += 1\n        if cur_sum != part_sum:\n            return False\n        j, cur_sum = i + 1, 0\n        while j < len(A):\n            cur_sum += A[j]\n            if cur_sum == part_sum:\n                break\n            j += 1\n        if cur_sum != part_sum:\n            return False\n        return True\n\n\nif __name__ == '__main__':\n    A = [0, 2, 1, -6, 6, -7, 9, 1, 2, 0, 1]\n    print(Solution().canThreePartsEqualSum(A))\n"]