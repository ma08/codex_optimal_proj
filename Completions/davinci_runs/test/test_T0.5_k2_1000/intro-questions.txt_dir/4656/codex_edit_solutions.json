["\n# SOLUTION\n# For each letter, find the largest substring that contains that letter and is K-beautiful. The answer is the max of these lengths\n# Time: O(n^2) Space: O(1)\ndef get_beautiful_substring(s, k):\n    if len(s) == 1:\n        return len(s)\n    if len(set(s)) == 1:\n        return len(s)\n    max_len = 1\n    for i in range(len(s)):\n        for j in range(len(s)-1, i, -1):\n            if len(set(s[i:j+1])) == 1:\n                if (j-i+1)%k == 0:\n                    max_len = max(j-i+1, max_len)\n    return max_len\n\nT = int(input())\nfor _ in range(T):\n    n, k = map(int, input().split())\n    s = input()\n    print(get_beautiful_substring(s, k))\n", "\ndef main():\n    print(\"hello world\")\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n# SOLUTION\n# For each letter, find the largest substring that contains that letter and is K-beautiful.\n# The answer is the max of these lengths\n\n# Time: O(n^2)\n# Space: O(1)\n\ndef get_beautiful_substring(s, k):\n    if len(s) == 1:\n        return len(s)\n    if len(set(s)) == 1:\n        return len(s)\n    max_len = 1\n    for i in range(len(s)):\n        for j in range(len(s)-1, i, -1):\n            if len(set(s[i:j+1])) == 1:\n                if (j-i+1)%k == 0:\n                    max_len = max(j-i+1, max_len)\n    return max_len\n\nT = int(input())\nfor _ in range(T):\n    n, k = map(int, input().split())\n    s = input()\n    print(get_beautiful_substring(s, k))\n", "import sys\n\n\ndef main():\n    print(sys.argv)\n\n\nif __name__ == \"__main__\":\n    main()\n", "import os\nimport sys\nimport re\nimport shutil\nimport argparse\nimport logging\nimport subprocess\nimport configparser\nimport tempfile\nimport time\nimport datetime\nimport json\nimport requests\nimport xml.etree.ElementTree as ET\n\n\ndef get_args():\n    parser = argparse.ArgumentParser(description='Script to get the file from the server')\n    parser.add_argument('--file', help='File to get', required=True)\n    parser.add_argument('--dest', help='Destination to save the file', required=True)\n    parser.add_argument('--url', help='URL to get the file', required=True)\n    args = parser.parse_args()\n    return args\n\n\ndef get_file(file, dest, url):\n    try:\n        r = requests.get(url + file)\n        with open(dest + file, 'wb') as f:\n            f.write(r.content)\n        return True\n    except Exception as e:\n        logging.error(e)\n        return False\n\n\ndef main():\n    args = get_args()\n    file = args.file\n    dest = args.dest\n    url = args.url\n    if get_file(file, dest, url):\n        print(\"File downloaded\")\n    else:\n        print(\"File not downloaded\")\n\n\n\nif __name__ == \"__main__\":\n    main()\n"]