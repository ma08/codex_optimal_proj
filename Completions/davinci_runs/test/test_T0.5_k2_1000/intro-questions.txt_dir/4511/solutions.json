["import sys\nimport math\nimport cProfile\n\nDEBUG = False\ndef log(s):\n    if DEBUG and False:\n        print(s)\n        \ndef calc_dmg(num, arr):\n    maximum = 0\n    if num - len(arr) < 0:\n        maximum = max(arr)\n    return sum(arr) + maximum\n\nif DEBUG:\n    sys.stdin = open('input.txt')\n    pr = cProfile.Profile()\n    pr.enable()\n\nn = sys.stdin.readline()\nn = int(n)\n\ndmg = [-sys.maxsize for _ in range(10)]\n\nfor i in range(n):\n    log(dmg)\n    cards = [_[:] for _ in [[-sys.maxsize] * 3] * 4]\n\n    k = sys.stdin.readline()\n    k = int(k)\n    for _ in range(k):\n        c, d = sys.stdin.readline().split()\n        c = int(c)\n        d = int(d)\n        cards[c].append(d)\n    cards[1].sort(reverse=True)\n    cards[2].sort(reverse=True)\n    cards[3].sort(reverse=True)\n    log(cards)\n\n    # dmg[j] = max(dmg[j],\n    #              dmg[j - 1] + D(one card),\n    #              dmg[j - 2] + D(two cards),\n    #              dmg[j - 3] + D(three cards))\n    # Plus, if 1 <= j <= 3, dmg[j] = max(dmg[j], D(cards))\n    new_dmg = []\n    for j in range(10):\n        use1 = max(cards[1][0], cards[2][0], cards[3][0])\n        use2 = max(cards[1][0] + cards[1][1],\n                   cards[1][0] + cards[2][0])\n        use3 = cards[1][0] + cards[1][1] + cards[1][2]\n\n        maximum = dmg[j]\n        if use1 > 0:\n            maximum = max(maximum, dmg[j - 1] + calc_dmg(j, [use1]))\n            if j == 1:\n                maximum = max(maximum, use1)\n        if use2 > 0:\n            maximum = max(maximum, dmg[j - 2] +\n                          calc_dmg(j, [cards[1][0], cards[1][1]]\n                          if cards[1][0] + cards[1][1] == use2\n                          else [cards[1][0], cards[2][0]]))\n            if j == 2:\n                maximum = max(maximum, use2)\n        if use3 > 0:\n            maximum = max(maximum, dmg[j - 3] +\n                          calc_dmg(j, [cards[1][0], cards[1][1], cards[1][2]]))\n            if j == 3:\n                maximum = max(maximum, use3)\n        new_dmg.append(maximum)\n    dmg = new_dmg\n\nlog(dmg)\nprint(max(dmg))\n\nif DEBUG:\n    pr.disable()\n    pr.print_stats()"]