2022-04-11 21:50:26.409534 num operations 2
2022-04-11 21:50:26.409573 size on input set 1
2022-04-11 21:50:28.805374 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "#!/bin/python3\n\nif __name__ == '__main__':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n    marks = student_marks.get(query_name)\n    print(\"{:.2f}\".format(sum(marks)/len(marks)))\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\nif __name__ == '__main__':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n    marks = student_marks.get(query_name)\n    print(\"{:.2f}\".format(sum(marks)/len(marks)))\n"
    }
  ],
  "created": 1649728226,
  "object": "edit"
}
2022-04-11 21:50:28.805563 fix spelling mistakes 2 ['#!/bin/python3\n\nif __name__ == \'__main__\':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n    marks = student_marks.get(query_name)\n    print("{:.2f}".format(sum(marks)/len(marks)))\n', '#!/usr/bin/env python3\n\nif __name__ == \'__main__\':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n    marks = student_marks.get(query_name)\n    print("{:.2f}".format(sum(marks)/len(marks)))\n']
2022-04-11 21:50:28.805589 size on output set 2
2022-04-11 21:50:28.805593 size on input set 2
2022-04-11 21:50:57.673401 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/bin/python3\n\nif __name__ == '__main__':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n    marks = student_marks[query_name]\n    print(\"{:.2f}\".format(sum(marks)/len(marks)))\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\n\nn = int(input().strip())\narr = [int(arr_temp) for arr_temp in input().strip().split(' ')]\n\n\ndef bubble_sort(arr):\n    for i in range(len(arr)):\n        for j in range(len(arr) - 1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\n\ndef insertion_sort(arr):\n    for i in range(1, len(arr)):\n        j = i\n        while j > 0 and arr[j-1] > arr[j]:\n            arr[j], arr[j-1] = arr[j-1], arr[j]\n            j -= 1\n    return arr\n\n\ndef selection_sort(arr):\n    for i in range(len(arr)):\n        min_index = i\n        for j in range(i+1, len(arr)):\n            if arr[min_index] > arr[j]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n    return arr\n\n\ndef merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr)//2\n        left = arr[:mid]\n        right = arr[mid:]\n\n        merge_sort(left)\n        merge_sort(right)\n\n        i = j = k = 0\n\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                i += 1\n            else:\n                arr[k] = right[j]\n                j += 1\n            k += 1\n\n        while i < len(left):\n            arr[k] = left[i]\n            i += 1\n            k += 1\n\n        while j < len(right):\n            arr[k] = right[j]\n            j += 1\n            k += 1\n    return arr\n\n\ndef quick_sort(arr, low, high):\n    if low < high:\n        pi = partition(arr, low, high)\n        quick_sort(arr, low, pi-1)\n        quick_sort(arr, pi+1, high)\n    return arr\n\n\ndef partition(arr, low, high):\n    i = low - 1\n    pivot = arr[high]\n\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n    arr[i+1], arr[high] = arr[high], arr[i+1]\n    return i+1\n\n\ndef heap_sort(arr):\n    n = len(arr)\n    for i in range(n, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n    return arr\n\n\ndef heapify(arr, n, i):\n    largest = i\n    l = 2*i + 1\n    r = 2*i + 2\n\n    if l < n and arr[i] < arr[l]:\n        largest = l\n\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\n\ndef counting_sort(arr):\n    max_val = max(arr)\n    min_val = min(arr)\n    size = max_val - min_val + 1\n    count = [0] * size\n\n    for i in range(len(arr)):\n        count[arr[i] - min_val] += 1\n\n    j = 0\n    for i in range(size):\n        for k in range(count[i]):\n            arr[j] = i + min_val\n            j += 1\n    return arr\n\n\ndef radix_sort(arr):\n    max_val = max(arr)\n\n    exp = 1\n    while max_val//exp > 0:\n        counting_sort(arr, exp)\n        exp *= 10\n    return arr\n\n\ndef counting_sort(arr, exp):\n    size = len(arr)\n    output = [0] * size\n    count = [0] * 10\n\n    for i in range(size):\n        index = arr[i]//exp\n        count[index % 10] += 1\n\n    for i in range(1, 10):\n        count[i] += count[i-1]\n\n    i = size - 1\n    while i >= 0:\n        index = arr[i]//exp\n        output[count[index % 10] - 1] = arr[i]\n        count[index % 10] -= 1\n        i -= 1\n\n    for i in range(size):\n        arr[i] = output[i]\n\n\nprint(bubble_sort(arr))\nprint(insertion_sort(arr))\nprint(selection_sort(arr))\nprint(merge_sort(arr))\nprint(quick_sort(arr, 0, len(arr)-1))\nprint(heap_sort(arr))\nprint(counting_sort(arr))\nprint(radix_sort(arr))\n"
    }
  ],
  "created": 1649728229,
  "object": "edit"
}
2022-04-11 21:50:57.673701 fix syntax errors 2 ['#!/bin/python3\n\nif __name__ == \'__main__\':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n    marks = student_marks[query_name]\n    print("{:.2f}".format(sum(marks)/len(marks)))\n', "#!/usr/bin/env python3\n\nimport sys\n\n\nn = int(input().strip())\narr = [int(arr_temp) for arr_temp in input().strip().split(' ')]\n\n\ndef bubble_sort(arr):\n    for i in range(len(arr)):\n        for j in range(len(arr) - 1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\n\ndef insertion_sort(arr):\n    for i in range(1, len(arr)):\n        j = i\n        while j > 0 and arr[j-1] > arr[j]:\n            arr[j], arr[j-1] = arr[j-1], arr[j]\n            j -= 1\n    return arr\n\n\ndef selection_sort(arr):\n    for i in range(len(arr)):\n        min_index = i\n        for j in range(i+1, len(arr)):\n            if arr[min_index] > arr[j]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n    return arr\n\n\ndef merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr)//2\n        left = arr[:mid]\n        right = arr[mid:]\n\n        merge_sort(left)\n        merge_sort(right)\n\n        i = j = k = 0\n\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                arr[k] = left[i]\n                i += 1\n            else:\n                arr[k] = right[j]\n                j += 1\n            k += 1\n\n        while i < len(left):\n            arr[k] = left[i]\n            i += 1\n            k += 1\n\n        while j < len(right):\n            arr[k] = right[j]\n            j += 1\n            k += 1\n    return arr\n\n\ndef quick_sort(arr, low, high):\n    if low < high:\n        pi = partition(arr, low, high)\n        quick_sort(arr, low, pi-1)\n        quick_sort(arr, pi+1, high)\n    return arr\n\n\ndef partition(arr, low, high):\n    i = low - 1\n    pivot = arr[high]\n\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n    arr[i+1], arr[high] = arr[high], arr[i+1]\n    return i+1\n\n\ndef heap_sort(arr):\n    n = len(arr)\n    for i in range(n, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n    return arr\n\n\ndef heapify(arr, n, i):\n    largest = i\n    l = 2*i + 1\n    r = 2*i + 2\n\n    if l < n and arr[i] < arr[l]:\n        largest = l\n\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\n\ndef counting_sort(arr):\n    max_val = max(arr)\n    min_val = min(arr)\n    size = max_val - min_val + 1\n    count = [0] * size\n\n    for i in range(len(arr)):\n        count[arr[i] - min_val] += 1\n\n    j = 0\n    for i in range(size):\n        for k in range(count[i]):\n            arr[j] = i + min_val\n            j += 1\n    return arr\n\n\ndef radix_sort(arr):\n    max_val = max(arr)\n\n    exp = 1\n    while max_val//exp > 0:\n        counting_sort(arr, exp)\n        exp *= 10\n    return arr\n\n\ndef counting_sort(arr, exp):\n    size = len(arr)\n    output = [0] * size\n    count = [0] * 10\n\n    for i in range(size):\n        index = arr[i]//exp\n        count[index % 10] += 1\n\n    for i in range(1, 10):\n        count[i] += count[i-1]\n\n    i = size - 1\n    while i >= 0:\n        index = arr[i]//exp\n        output[count[index % 10] - 1] = arr[i]\n        count[index % 10] -= 1\n        i -= 1\n\n    for i in range(size):\n        arr[i] = output[i]\n\n\nprint(bubble_sort(arr))\nprint(insertion_sort(arr))\nprint(selection_sort(arr))\nprint(merge_sort(arr))\nprint(quick_sort(arr, 0, len(arr)-1))\nprint(heap_sort(arr))\nprint(counting_sort(arr))\nprint(radix_sort(arr))\n"]
2022-04-11 21:51:00.832085 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\nif __name__ == '__main__':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n    marks = student_marks[query_name]\n    print(\"{:.2f}\".format(sum(marks) / len(marks)))\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\ndef calculate_average(marks):\n    return sum(marks)/len(marks)\n\nif __name__ == '__main__':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n    marks = student_marks.get(query_name)\n    print(\"{:.2f}\".format(calculate_average(marks)))\n"
    }
  ],
  "created": 1649728258,
  "object": "edit"
}
2022-04-11 21:51:00.832337 fix syntax errors 2 ['#!/usr/bin/env python3\n\nif __name__ == \'__main__\':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n    marks = student_marks[query_name]\n    print("{:.2f}".format(sum(marks) / len(marks)))\n', '#!/usr/bin/env python3\n\ndef calculate_average(marks):\n    return sum(marks)/len(marks)\n\nif __name__ == \'__main__\':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n    marks = student_marks.get(query_name)\n    print("{:.2f}".format(calculate_average(marks)))\n']
2022-04-11 21:51:00.832361 size on output set 4
2022-04-11 21:51:00.832383 num operations 2
2022-04-11 21:51:00.832387 size on input set 1
2022-04-11 21:51:03.321380 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT.\n\ndef average(array):\n    return sum(array)/len(array)\n\nif __name__ == '__main__':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n    print(\"{0:.2f}\".format(average(student_marks[query_name])))\n"
    },
    {
      "index": 1,
      "text": "\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT.\n\ndef average(array):\n    return sum(array)/len(array)\n\nif __name__ == '__main__':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n    print(\"{0:.2f}\".format(average(student_marks[query_name])))\n"
    }
  ],
  "created": 1649728261,
  "object": "edit"
}
2022-04-11 21:51:03.321564 fix spelling mistakes 2 ['\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT.\n\ndef average(array):\n    return sum(array)/len(array)\n\nif __name__ == \'__main__\':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n    print("{0:.2f}".format(average(student_marks[query_name])))\n', '\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT.\n\ndef average(array):\n    return sum(array)/len(array)\n\nif __name__ == \'__main__\':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n    print("{0:.2f}".format(average(student_marks[query_name])))\n']
2022-04-11 21:51:03.321582 size on output set 1
2022-04-11 21:51:03.321589 size on input set 1
2022-04-11 21:51:05.883869 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\ndef average(array):\n    return sum(array)/len(array)\n\nif __name__ == '__main__':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n    print(\"{0:.2f}\".format(average(student_marks[query_name])))\n"
    },
    {
      "index": 1,
      "text": "\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\ndef average(array):\n    return sum(array)/len(array)\n\nif __name__ == '__main__':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n    print(\"{0:.2f}\".format(average(student_marks[query_name])))\n"
    }
  ],
  "created": 1649728263,
  "object": "edit"
}
2022-04-11 21:51:05.884300 fix syntax errors 2 ['\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\ndef average(array):\n    return sum(array)/len(array)\n\nif __name__ == \'__main__\':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n    print("{0:.2f}".format(average(student_marks[query_name])))\n', '\n\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\ndef average(array):\n    return sum(array)/len(array)\n\nif __name__ == \'__main__\':\n    n = int(input())\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n    print("{0:.2f}".format(average(student_marks[query_name])))\n']
2022-04-11 21:51:05.884366 size on output set 1
