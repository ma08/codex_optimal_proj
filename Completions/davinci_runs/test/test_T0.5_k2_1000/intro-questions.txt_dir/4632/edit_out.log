2022-04-11 21:32:39.923246 num operations 2
2022-04-11 21:32:39.923278 size on input set 1
2022-04-11 21:32:42.127014 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split())) for j in range(num_packages)]\n        print(\"YES\" if is_possible(packages) else \"NO\")\n\ndef is_possible(packages):\n    packages.sort()\n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split())) for j in range(num_packages)]\n        print(\"YES\" if is_possible(packages) else \"NO\")\n\ndef is_possible(packages):\n    packages.sort()\n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649727160,
  "object": "edit"
}
2022-04-11 21:32:42.127434 fix spelling mistakes 2 ['\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split())) for j in range(num_packages)]\n        print("YES" if is_possible(packages) else "NO")\n\ndef is_possible(packages):\n    packages.sort()\n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:\n            return False\n    return True\n\nif __name__ == \'__main__\':\n    main()\n', '\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split())) for j in range(num_packages)]\n        print("YES" if is_possible(packages) else "NO")\n\ndef is_possible(packages):\n    packages.sort()\n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:\n            return False\n    return True\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-11 21:32:42.127488 size on output set 1
2022-04-11 21:32:42.127500 size on input set 1
2022-04-11 21:32:45.335664 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split()))\n                    for j in range(num_packages)]\n        print(\"YES\" if is_possible(packages) else \"NO\")\n\ndef is_possible(packages):\n    packages.sort()\n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split())) for j in range(num_packages)]\n        print(\"YES\" if is_possible(packages) else \"NO\") \n\ndef is_possible(packages):\n    packages.sort()\n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:\n            return False\n    return True\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649727162,
  "object": "edit"
}
2022-04-11 21:32:45.336059 fix syntax errors 2 ['\nimport sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split()))\n                    for j in range(num_packages)]\n        print("YES" if is_possible(packages) else "NO")\n\ndef is_possible(packages):\n    packages.sort()\n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:\n            return False\n    return True\n\nif __name__ == \'__main__\':\n    main()\n', 'import sys\n\ndef main():\n    lines = sys.stdin.readlines()\n    num_cases = int(lines[0])\n    for i in range(num_cases):\n        num_packages = int(lines[2 * i + 1])\n        packages = [tuple(map(int, lines[2 * i + 2 + j].split())) for j in range(num_packages)]\n        print("YES" if is_possible(packages) else "NO") \n\ndef is_possible(packages):\n    packages.sort()\n    for i in range(len(packages)):\n        if packages[i][0] < i or packages[i][1] < i:\n            return False\n    return True\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-11 21:32:45.336117 size on output set 2
2022-04-11 21:32:45.336137 num operations 2
2022-04-11 21:32:45.336146 size on input set 1
2022-04-11 21:32:47.727788 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    num_cases = int(input())\n    for i in range(num_cases):\n        num_packages = int(input())\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(' ')\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n        if packages[0][1] > 0:\n            print(\"NO\")\n            continue\n\n        last_x = 0\n        last_y = 0\n        path = \"\"\n        for p in packages:\n            if p[0] < last_x or p[1] < last_y:\n                print(\"NO\")\n                break\n\n            path += \"R\" * (p[0] - last_x)\n            path += \"U\" * (p[1] - last_y)\n            last_x = p[0]\n            last_y = p[1]\n        else:\n            print(\"YES\")\n            print(path)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    num_cases = int(input())\n    for i in range(num_cases):\n        num_packages = int(input())\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(' ')\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n        if packages[0][1] > 0:\n            print(\"NO\")\n            continue\n\n        last_x = 0\n        last_y = 0\n        path = \"\"\n        for p in packages:\n            if p[0] < last_x or p[1] < last_y:\n                print(\"NO\")\n                break\n\n            path += \"R\" * (p[0] - last_x)\n            path += \"U\" * (p[1] - last_y)\n            last_x = p[0]\n            last_y = p[1]\n        else:\n            print(\"YES\")\n            print(path)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649727165,
  "object": "edit"
}
2022-04-11 21:32:47.728182 fix spelling mistakes 2 ['\n\ndef main():\n    num_cases = int(input())\n    for i in range(num_cases):\n        num_packages = int(input())\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(\' \')\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n        if packages[0][1] > 0:\n            print("NO")\n            continue\n\n        last_x = 0\n        last_y = 0\n        path = ""\n        for p in packages:\n            if p[0] < last_x or p[1] < last_y:\n                print("NO")\n                break\n\n            path += "R" * (p[0] - last_x)\n            path += "U" * (p[1] - last_y)\n            last_x = p[0]\n            last_y = p[1]\n        else:\n            print("YES")\n            print(path)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    num_cases = int(input())\n    for i in range(num_cases):\n        num_packages = int(input())\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(\' \')\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n        if packages[0][1] > 0:\n            print("NO")\n            continue\n\n        last_x = 0\n        last_y = 0\n        path = ""\n        for p in packages:\n            if p[0] < last_x or p[1] < last_y:\n                print("NO")\n                break\n\n            path += "R" * (p[0] - last_x)\n            path += "U" * (p[1] - last_y)\n            last_x = p[0]\n            last_y = p[1]\n        else:\n            print("YES")\n            print(path)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-11 21:32:47.728431 size on output set 1
2022-04-11 21:32:47.728439 size on input set 1
2022-04-11 21:32:54.782392 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    num_cases = int(input())\n    for i in range(num_cases):\n        num_packages = int(input())\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(' ')\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n        if packages[0][1] < 0:\n            print(\"NO\")\n            continue\n\n        last_x = 0\n        last_y = 0\n        path = \"\"\n        for p in packages:\n            if p[0] < last_x or p[1] < last_y:\n                print(\"NO\")\n                break\n\n            path += \"R\" * (p[0] - last_x)\n            path += \"U\" * (p[1] - last_y)\n            last_x = p[0]\n            last_y = p[1]\n        else:\n            print(\"YES\")\n            print(path)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    num_cases = int(input())\n    for i in range(num_cases):\n        num_packages = int(input())\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(' ')\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n        if packages[0][1] > 0:\n            print(\"NO\")\n            continue\n\n        last_x = 0\n        last_y = 0\n        path = \"\"\n        for p in packages:\n            if p[0] < last_x or p[1] < last_y:\n                print(\"NO\")\n                break\n\n            path += \"R\" * (p[0] - last_x)\n            path += \"U\" * (p[1] - last_y)\n            last_x = p[0]\n            last_y = p[1]\n        else:\n            print(\"YES\")\n            print(path)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649727167,
  "object": "edit"
}
2022-04-11 21:32:54.782568 fix syntax errors 2 ['\n\ndef main():\n    num_cases = int(input())\n    for i in range(num_cases):\n        num_packages = int(input())\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(\' \')\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n        if packages[0][1] < 0:\n            print("NO")\n            continue\n\n        last_x = 0\n        last_y = 0\n        path = ""\n        for p in packages:\n            if p[0] < last_x or p[1] < last_y:\n                print("NO")\n                break\n\n            path += "R" * (p[0] - last_x)\n            path += "U" * (p[1] - last_y)\n            last_x = p[0]\n            last_y = p[1]\n        else:\n            print("YES")\n            print(path)\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    num_cases = int(input())\n    for i in range(num_cases):\n        num_packages = int(input())\n        packages = []\n        for j in range(num_packages):\n            coords = input().split(\' \')\n            packages.append((int(coords[0]), int(coords[1])))\n\n        packages.sort(key=lambda x: (x[0], x[1]))\n        if packages[0][1] > 0:\n            print("NO")\n            continue\n\n        last_x = 0\n        last_y = 0\n        path = ""\n        for p in packages:\n            if p[0] < last_x or p[1] < last_y:\n                print("NO")\n                break\n\n            path += "R" * (p[0] - last_x)\n            path += "U" * (p[1] - last_y)\n            last_x = p[0]\n            last_y = p[1]\n        else:\n            print("YES")\n            print(path)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-11 21:32:54.782613 size on output set 2
