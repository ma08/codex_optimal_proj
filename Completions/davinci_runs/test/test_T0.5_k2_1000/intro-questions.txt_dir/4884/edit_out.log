2022-04-12 02:12:38.530820 num operations 2
2022-04-12 02:12:38.530859 size on input set 1
2022-04-12 02:12:41.574810 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ncontestants, hufflepuffs = map(int, input().split())\n\nprint(hufflepuffs)\n"
    },
    {
      "index": 1,
      "text": "\n\ncontestants, hufflepuffs = map(int, input().split())\n\nprint(hufflepuffs)\n"
    }
  ],
  "created": 1649743958,
  "object": "edit"
}
2022-04-12 02:12:41.575085 fix spelling mistakes 2 ['\n\ncontestants, hufflepuffs = map(int, input().split())\n\nprint(hufflepuffs)\n', '\n\ncontestants, hufflepuffs = map(int, input().split())\n\nprint(hufflepuffs)\n']
2022-04-12 02:12:41.575110 size on output set 1
2022-04-12 02:12:41.575117 size on input set 1
2022-04-12 02:12:44.108228 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ncontestants, hufflepuffs = map(int, input().split()) # map(int, input().split())\n\nprint(hufflepuffs)\n"
    },
    {
      "index": 1,
      "text": "\n\ncontestants, hufflepuffs = map(int, input().split()) #input\n\nprint(hufflepuffs)\n"
    }
  ],
  "created": 1649743961,
  "object": "edit"
}
2022-04-12 02:12:44.108405 fix syntax errors 2 ['\n\ncontestants, hufflepuffs = map(int, input().split()) # map(int, input().split())\n\nprint(hufflepuffs)\n', '\n\ncontestants, hufflepuffs = map(int, input().split()) #input\n\nprint(hufflepuffs)\n']
2022-04-12 02:12:44.108428 size on output set 2
2022-04-12 02:12:44.108448 num operations 2
2022-04-12 02:12:44.108456 size on input set 1
2022-04-12 02:12:46.122783 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    carrots = 0 \n    n, p = map(int, sys.stdin.readline().split())\n    for i in range(n):\n        sys.stdin.readline()\n        carrots += p\n    print carrots\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    carrots = 0\n    n, p = map(int, sys.stdin.readline().split())\n    for i in range(n):\n        sys.stdin.readline()\n        carrots += p\n    print carrots\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649743964,
  "object": "edit"
}
2022-04-12 02:12:46.123008 fix spelling mistakes 2 ["\n\nimport sys\n\ndef main():\n    carrots = 0 \n    n, p = map(int, sys.stdin.readline().split())\n    for i in range(n):\n        sys.stdin.readline()\n        carrots += p\n    print carrots\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    carrots = 0\n    n, p = map(int, sys.stdin.readline().split())\n    for i in range(n):\n        sys.stdin.readline()\n        carrots += p\n    print carrots\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 02:12:46.123037 size on output set 2
2022-04-12 02:12:46.123047 size on input set 2
2022-04-12 02:12:48.141916 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    carrots = 0\n    n, p = map(int, sys.stdin.readline().split())\n    for i in range(n):\n        sys.stdin.readline()\n        carrots += p\n    print(carrots)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    carrots = 0\n    n, p = map(int, sys.stdin.readline().split())\n    for i in range(n):\n        sys.stdin.readline()\n        carrots += p\n    print(carrots)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649743966,
  "object": "edit"
}
2022-04-12 02:12:48.142058 fix syntax errors 2 ["\nimport sys\n\ndef main():\n    carrots = 0\n    n, p = map(int, sys.stdin.readline().split())\n    for i in range(n):\n        sys.stdin.readline()\n        carrots += p\n    print(carrots)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    carrots = 0\n    n, p = map(int, sys.stdin.readline().split())\n    for i in range(n):\n        sys.stdin.readline()\n        carrots += p\n    print(carrots)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 02:12:51.170573 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    carrots = 0\n    n, p = map(int, sys.stdin.readline().split())\n    for i in range(n):\n        sys.stdin.readline()\n        carrots += p\n    print carrots\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649743968,
  "object": "edit"
}
2022-04-12 02:12:51.171034 fix syntax errors 2 ["\n\nimport sys\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    carrots = 0\n    n, p = map(int, sys.stdin.readline().split())\n    for i in range(n):\n        sys.stdin.readline()\n        carrots += p\n    print carrots\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 02:12:51.171078 size on output set 3
2022-04-12 02:12:51.171094 num operations 2
2022-04-12 02:12:51.171099 size on input set 1
2022-04-12 02:12:54.564713 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n\tn, p = [int(i) for i in input().split()]\n\tfor _ in range(n):\n\t\tinput()\n\tprint(p)\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n, p = [int(i) for i in input().split()]\n    for _ in range(n):\n        input()\n    print(p)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649743971,
  "object": "edit"
}
2022-04-12 02:12:54.564863 fix spelling mistakes 2 ["\ndef main():\n\tn, p = [int(i) for i in input().split()]\n\tfor _ in range(n):\n\t\tinput()\n\tprint(p)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\ndef main():\n    n, p = [int(i) for i in input().split()]\n    for _ in range(n):\n        input()\n    print(p)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 02:12:54.564882 size on output set 2
2022-04-12 02:12:54.564889 size on input set 2
2022-04-12 02:12:57.118276 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n, p = map(int, input().split())\n    for _ in range(n):\n        input()\n    print(p)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n, p = [int(i) for i in input().split()]  # noqa\n    for _ in range(n):\n        input()\n    print(p)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649743974,
  "object": "edit"
}
2022-04-12 02:12:57.118446 fix syntax errors 2 ["\n\ndef main():\n    n, p = map(int, input().split())\n    for _ in range(n):\n        input()\n    print(p)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, p = [int(i) for i in input().split()]  # noqa\n    for _ in range(n):\n        input()\n    print(p)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 02:13:00.714781 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    n, p = [int(i) for i in input().split()]\n    for _ in range(n):\n        input()\n    print(p)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    n, p = [int(i) for i in input().split()]\n    for _ in range(n):\n        input()\n    print(p)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1649743977,
  "object": "edit"
}
2022-04-12 02:13:00.714967 fix syntax errors 2 ["\ndef main():\n    n, p = [int(i) for i in input().split()]\n    for _ in range(n):\n        input()\n    print(p)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, p = [int(i) for i in input().split()]\n    for _ in range(n):\n        input()\n    print(p)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-12 02:13:00.714997 size on output set 3
2022-04-12 02:13:00.715011 num operations 2
2022-04-12 02:13:00.715021 size on input set 1
2022-04-12 02:13:03.918740 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef carrots(N, C):\n    carrots = C\n    for i in range(N):\n        input()\n    print(carrots)\n\nN, C = map(int, input().split())\ncarrots(N, C)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef carrots(N, C):\n    carrots = C\n    for i in range(N):\n        input()\n    print(carrots)\n\nN, C = map(int, input().split())\ncarrots(N, C)\n"
    }
  ],
  "created": 1649743980,
  "object": "edit"
}
2022-04-12 02:13:03.918968 fix spelling mistakes 2 ['\n\ndef carrots(N, C):\n    carrots = C\n    for i in range(N):\n        input()\n    print(carrots)\n\nN, C = map(int, input().split())\ncarrots(N, C)\n', '\n\ndef carrots(N, C):\n    carrots = C\n    for i in range(N):\n        input()\n    print(carrots)\n\nN, C = map(int, input().split())\ncarrots(N, C)\n']
2022-04-12 02:13:03.918987 size on output set 1
2022-04-12 02:13:03.918994 size on input set 1
2022-04-12 02:13:08.078742 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef carrots(n, c):\n    carrots = c\n    for i in range(n):\n        input()\n    print(carrots)\n\nN, C = map(int, input().split())\ncarrots(N, C)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    N, C = map(int, input().split())\n    for i in range(N):\n        input() # read the line\n    print(C)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649743984,
  "object": "edit"
}
2022-04-12 02:13:08.078842 fix syntax errors 2 ['\n\ndef carrots(n, c):\n    carrots = c\n    for i in range(n):\n        input()\n    print(carrots)\n\nN, C = map(int, input().split())\ncarrots(N, C)\n', '\n\ndef main():\n    N, C = map(int, input().split())\n    for i in range(N):\n        input() # read the line\n    print(C)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 02:13:08.078852 size on output set 2
2022-04-12 02:13:08.078858 num operations 2
2022-04-12 02:13:08.078861 size on input set 1
2022-04-12 02:13:10.476634 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef carrots_():\n\tn, p = [int(x) for x in input().split()]\n\tfor i in range(n):\n\t\tinput()\n\tprint(p)\n\ncarrots_()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef file():\n\tn, p = [int(x) for x in input().split()]\n\tfor i in range(n):\n\t\tinput()\n\tprint(p)\n\nfile()\n"
    }
  ],
  "created": 1649743988,
  "object": "edit"
}
2022-04-12 02:13:10.476813 fix spelling mistakes 2 ['\n\ndef carrots_():\n\tn, p = [int(x) for x in input().split()]\n\tfor i in range(n):\n\t\tinput()\n\tprint(p)\n\ncarrots_()\n', '\n\ndef file():\n\tn, p = [int(x) for x in input().split()]\n\tfor i in range(n):\n\t\tinput()\n\tprint(p)\n\nfile()\n']
2022-04-12 02:13:10.476837 size on output set 2
2022-04-12 02:13:10.476846 size on input set 2
2022-04-12 02:13:15.878619 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef carrots():\n    n, p = [int(x) for x in input().split()]\n    for i in range(n):\n        input()\n    print(p)\n\ncarrots_()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef carrots():\n    n, p = [int(x) for x in input().split()]\n    for i in range(n):\n        input()\n    print(p)\n\ncarrots()\n"
    }
  ],
  "created": 1649743990,
  "object": "edit"
}
2022-04-12 02:13:15.878788 fix syntax errors 2 ['\n\ndef carrots():\n    n, p = [int(x) for x in input().split()]\n    for i in range(n):\n        input()\n    print(p)\n\ncarrots_()\n', '\n\ndef carrots():\n    n, p = [int(x) for x in input().split()]\n    for i in range(n):\n        input()\n    print(p)\n\ncarrots()\n']
2022-04-12 02:13:19.057605 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef file():\n    n, p = [int(x) for x in input().split()]\n    for i in range(n):\n        input()\n    print(p)\n\nfile()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef file():\n    n, p = [int(x) for x in input().split()]\n    for i in range(n):\n        input()\n    print(p)\n\nfile()\n"
    }
  ],
  "created": 1649743996,
  "object": "edit"
}
2022-04-12 02:13:19.057727 fix syntax errors 2 ['\n\ndef file():\n    n, p = [int(x) for x in input().split()]\n    for i in range(n):\n        input()\n    print(p)\n\nfile()\n', '\n\ndef file():\n    n, p = [int(x) for x in input().split()]\n    for i in range(n):\n        input()\n    print(p)\n\nfile()\n']
2022-04-12 02:13:19.057742 size on output set 3
2022-04-12 02:13:19.057751 num operations 2
2022-04-12 02:13:19.057756 size on input set 1
2022-04-12 02:13:22.817503 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Main method to be called at runtime.\n    \"\"\"\n    contest_info = input().split(\" \")\n    num_contestants = int(contest_info[0])\n    num_problems = int(contest_info[1])\n    carrots = 0\n    for i in range(0, num_contestants):\n        contestant = input()\n        if \"carrot\" in contestant:\n            carrots += 1\n        else:\n            carrots += 0\n    print(carrots)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Main method to be called at runtime.\n    \"\"\"\n    contest_info = input().split(\" \")\n    num_contestants = int(contest_info[0])\n    num_problems = contest_info[1]\n    carrots = 0\n    for i in range(0, num_contestants):\n        contestant = input()\n        if \"carrot\" in contestant:\n            carrots += 1\n        else:\n            carrots += 0\n    print(carrots)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649743999,
  "object": "edit"
}
2022-04-12 02:13:22.817736 fix spelling mistakes 2 ['\n\ndef main():\n    """\n    Main method to be called at runtime.\n    """\n    contest_info = input().split(" ")\n    num_contestants = int(contest_info[0])\n    num_problems = int(contest_info[1])\n    carrots = 0\n    for i in range(0, num_contestants):\n        contestant = input()\n        if "carrot" in contestant:\n            carrots += 1\n        else:\n            carrots += 0\n    print(carrots)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Main method to be called at runtime.\n    """\n    contest_info = input().split(" ")\n    num_contestants = int(contest_info[0])\n    num_problems = contest_info[1]\n    carrots = 0\n    for i in range(0, num_contestants):\n        contestant = input()\n        if "carrot" in contestant:\n            carrots += 1\n        else:\n            carrots += 0\n    print(carrots)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 02:13:22.817758 size on output set 2
2022-04-12 02:13:22.817770 size on input set 2
2022-04-12 02:13:26.766720 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Main method to be called at runtime.\n    \"\"\"\n    contest_info = input().split()\n    num_contestants = contest_info[0]\n    num_problems = contest_info[1]\n    carrots = 0\n    for i in range(0, int(num_contestants)):\n        contestant = input()\n        if \"carrot\" in contestant:\n            carrots += 1\n        else:\n            carrots += 0\n    print(carrots)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Main method to be called at runtime.\n    \"\"\"\n    contest_info = input().split(\" \")\n    num_contestants = int(contest_info[0])\n    num_problems = int(contest_info[1])\n    carrots = 0\n    for _ in range(0, num_contestants):\n        contestant = input()\n        if \"carrot\" in contestant:\n            carrots += 1\n        else:\n            carrots += 0\n    print(carrots)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649744003,
  "object": "edit"
}
2022-04-12 02:13:26.766889 fix syntax errors 2 ['\n\ndef main():\n    """\n    Main method to be called at runtime.\n    """\n    contest_info = input().split()\n    num_contestants = contest_info[0]\n    num_problems = contest_info[1]\n    carrots = 0\n    for i in range(0, int(num_contestants)):\n        contestant = input()\n        if "carrot" in contestant:\n            carrots += 1\n        else:\n            carrots += 0\n    print(carrots)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Main method to be called at runtime.\n    """\n    contest_info = input().split(" ")\n    num_contestants = int(contest_info[0])\n    num_problems = int(contest_info[1])\n    carrots = 0\n    for _ in range(0, num_contestants):\n        contestant = input()\n        if "carrot" in contestant:\n            carrots += 1\n        else:\n            carrots += 0\n    print(carrots)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 02:13:29.948369 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"\n    Main method to be called at runtime.\n    \"\"\"\n    contest_info = input().split(\" \")\n    num_contestants = int(contest_info[0])\n    num_problems = int(contest_info[1])\n    carrots = 0\n    for i in range(0, num_contestants):\n        contestant = input()\n        if \"carrot\" in contestant:\n            carrots += 1\n        else:\n            carrots += 0\n    print(carrots)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"\n    Main method to be called at runtime.\n    \"\"\"\n    contest_info = input().split(\" \")\n    num_contestants = int(contest_info[0])\n    num_problems = int(contest_info[1])\n    carrots = 0\n    for i in range(0, num_contestants):\n        contestant = input().split(\" \")\n        if \"carrots\" in contestant:\n            carrots += 1\n        else:\n            carrots += 0\n    print(carrots)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1649744006,
  "object": "edit"
}
2022-04-12 02:13:29.948511 fix syntax errors 2 ['\n\ndef main():\n    """\n    Main method to be called at runtime.\n    """\n    contest_info = input().split(" ")\n    num_contestants = int(contest_info[0])\n    num_problems = int(contest_info[1])\n    carrots = 0\n    for i in range(0, num_contestants):\n        contestant = input()\n        if "carrot" in contestant:\n            carrots += 1\n        else:\n            carrots += 0\n    print(carrots)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    """\n    Main method to be called at runtime.\n    """\n    contest_info = input().split(" ")\n    num_contestants = int(contest_info[0])\n    num_problems = int(contest_info[1])\n    carrots = 0\n    for i in range(0, num_contestants):\n        contestant = input().split(" ")\n        if "carrots" in contestant:\n            carrots += 1\n        else:\n            carrots += 0\n    print(carrots)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-12 02:13:29.948536 size on output set 4
2022-04-12 02:13:29.948546 num operations 2
2022-04-12 02:13:29.948552 size on input set 1
2022-04-12 02:13:31.848294 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nn, p = map(int, input().split())\n\nprint(p)\n"
    },
    {
      "index": 1,
      "text": "\nn, p = map(int, input().split())\n\nprint(p)\n"
    }
  ],
  "created": 1649744010,
  "object": "edit"
}
2022-04-12 02:13:31.848448 fix spelling mistakes 2 ['\nn, p = map(int, input().split())\n\nprint(p)\n', '\nn, p = map(int, input().split())\n\nprint(p)\n']
2022-04-12 02:13:31.848465 size on output set 1
2022-04-12 02:13:31.848470 size on input set 1
2022-04-12 02:13:34.666758 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn, p = map(int, input().split())  # n = number of pages, p = page to print\n\nprint(p)  # print the page\n"
    },
    {
      "index": 1,
      "text": "n, p = map(int, input().split())\n\nprint(p)\n"
    }
  ],
  "created": 1649744012,
  "object": "edit"
}
2022-04-12 02:13:34.666936 fix syntax errors 2 ['\nn, p = map(int, input().split())  # n = number of pages, p = page to print\n\nprint(p)  # print the page\n', 'n, p = map(int, input().split())\n\nprint(p)\n']
2022-04-12 02:13:34.666958 size on output set 2
2022-04-12 02:13:34.666973 num operations 2
2022-04-12 02:13:34.666981 size on input set 1
2022-04-12 02:13:36.544644 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nn, p = map(int, input().split())\n\nfor i in range(n):\n    input()\n\nprint(p)\n"
    },
    {
      "index": 1,
      "text": "\nn, p = map(int, input().split())\n\nfor i in range(n):\n    input()\n\nprint(p)\n"
    }
  ],
  "created": 1649744014,
  "object": "edit"
}
2022-04-12 02:13:36.544863 fix spelling mistakes 2 ['\nn, p = map(int, input().split())\n\nfor i in range(n):\n    input()\n\nprint(p)\n', '\nn, p = map(int, input().split())\n\nfor i in range(n):\n    input()\n\nprint(p)\n']
2022-04-12 02:13:36.544888 size on output set 1
2022-04-12 02:13:36.544898 size on input set 1
2022-04-12 02:13:40.934796 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn, p = map(int, input().split()) # n is the number of pages, p is the page to print\n\nfor i in range(n): # skip the first n lines\n    input()\n\nprint(p)\n"
    },
    {
      "index": 1,
      "text": "n, p = map(int, input().split())\nfor i in range(n):\n    input()\n\nprint(p)\n"
    }
  ],
  "created": 1649744016,
  "object": "edit"
}
2022-04-12 02:13:40.935072 fix syntax errors 2 ['\nn, p = map(int, input().split()) # n is the number of pages, p is the page to print\n\nfor i in range(n): # skip the first n lines\n    input()\n\nprint(p)\n', 'n, p = map(int, input().split())\nfor i in range(n):\n    input()\n\nprint(p)\n']
2022-04-12 02:13:40.935097 size on output set 2
