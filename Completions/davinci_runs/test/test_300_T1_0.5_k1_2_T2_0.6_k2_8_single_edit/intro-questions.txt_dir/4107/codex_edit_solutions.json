["\n\ndef main():\n    # Read input\n    n, k = list(map(int, input().split()))\n    s = list(input())\n\n    # Initialize the array to store the cost of placing a router in the room\n    cost = [0] * n\n    for i in range(n):\n        if s[i] == '1':\n            cost[i] = i + 1\n\n    # Update the cost based on the routers' range\n    for i in range(k, n):\n        cost[i] = min(cost[i], cost[i - k] + i + 1)\n\n    # Sum the cost\n    total_cost = sum(cost)\n\n    # Output\n    print(total_cost)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    # Read input\n    n, k = [int(i) for i in input().split()]\n    s = input()\n\n    # Initialize the array to store the cost of placing a router in the room\n    cost = [0] * n\n    for i in range(1, n + 1):\n        if s[i] == '1':\n            cost[i] = i + 1\n\n    # Update the cost based on the routers' range\n    for i in range(k + 1, n + 1):\n        cost[i] = min(cost[i], cost[i - k] + i + 1)\n\n    # Sum the cost\n    total_cost = sum(cost)\n\n    # Output\n    print(total_cost)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    # Read input\n    # n, k = [int(i) for i in input().split()]\n    # s = input()\n    n = 0\n    k = 0\n    s = '1'\n\n    # Initialize the array to store the cost of placing a router in the room\n    cost = [0] * n\n    for i in range(n):\n        if s[i] == '1':\n            cost[i] = i + 1\n\n    # Update the cost based on the routers' range\n    for i in range(k, n):\n        cost[i] = min(cost[i], cost[i - k] + i + 1)\n\n    # Sum the cost\n    total_cost = sum(cost)\n\n    # Output\n    print(total_cost)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    # Read input\n    n, k = [int(i) for i in input().split()]\n    s = input()\n\n    # Initialize the array to store the cost of placing a router in the room\n    cost = [0] * n\n    for i, c in enumerate(s):\n        if c == '1':\n            cost[i] = i + 1 - k\n\n    # Update the cost based on the routers' range\n    for i in range(1, n):\n        cost[i] = min(cost[i], cost[i - 1] + 1)\n\n    # Sum the cost\n    total_cost = sum(cost)\n\n    # Output\n    print(total_cost)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n# Solution from https://codeforces.com/contest/1336/submission/75505951\n\nn, k = [int(x) for x in input().split()]\ns = input()\n\ncost = 0\nfor i in range(1, n + 1):\n    if s[i - 1] == '1':\n        cost += i\n        continue\n    if i - k - 1 >= 0 and s[i - k - 1] == '1':\n        continue\n    if i + k - 1 < n and s[i + k - 1] == '1':\n        continue\n    cost += i\n\nprint(cost)\n", "\n\ndef main():\n    # Read input\n    n, k = [int(i) for i in input().split()]\n    s = input()\n\n    # Initialize the array to store the cost of placing a router in the room\n    cost = [0 for i in range(n)]\n    for i in range(n):\n        if s[i] == '1':\n            cost[i] = i + 1\n\n    # Update the cost based on the routers' range\n    for i in range(k, n):\n        cost[i] = min(cost[i], cost[i - k] + i + 1)\n\n    # Sum the cost\n    total_cost = sum(cost)\n\n    # Output\n    print(total_cost)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nn, k = [int(x) for x in input().split()]\ns = input()\n\ncost = 0\nfor i in range(1, n + 1):\n    if s[i - 1] == '1':\n        cost += i\n        continue\n    if i - k - 1 >= 0 and s[i - k - 1] == '1':\n        continue\n    if i + k - 1 < n and s[i + k - 1] == '1':\n        continue\n    cost += i\n\nprint(cost)\n", "\n# Solution\n\nn, k = [int(x) for x in input().split()]\ns = input()\n\ncost = 0\nfor i in range(1, n + 1):\n    if s[i - 1] == '1':\n        cost += i\n        continue\n    if i - k - 1 >= 0 and s[i - k - 1] == '1':\n        continue\n    if i + k - 1 < n and s[i + k - 1] == '1':\n        continue\n    cost += i\n\nprint(cost)\n", "\n\n# Solution\n\nn, k = [int(x) for x in input().split()]\ns = input()\n\ncost = 0\nfor i in range(1, n + 1):\n    if s[i - 1] == '1':\n        cost += i\n        continue\n    if i - k >= 0 and s[i - k] == '1':\n        continue\n    if i + k < n and s[i + k] == '1':\n        continue\n    cost += i\n\nprint(cost)\n", "# Solution\n\nn, k = [int(x) for x in input().split()]\ns = input()\n\ncost = 0\nfor i in range(1, n + 1):\n    if s[i - 1] == '1':\n        cost += i\n        continue\n    if i - k - 1 >= 0 and s[i - k - 1] == '1':\n        continue\n    if i + k - 1 < n and s[i + k - 1] == '1':\n        continue\n    cost += i\n\nprint(cost)\n", "import sys\n\n\n\ndef main():\n    # Read input from file\n    with open('input.txt') as f:\n        n, k = [int(i) for i in f.readline().split()]\n        s = f.readline()\n\n    # Initialize the array to store the cost of placing a router in the room\n    cost = [0] * n\n    for i in range(n):\n        if s[i] == '1':\n            cost[i] = i + 1\n\n    # Update the cost based on the routers' range\n    for i in range(k, n):\n        cost[i] = min(cost[i], cost[i - k] + i + 1)\n\n    # Sum the cost\n    total_cost = sum(cost)\n\n    # Output\n    print(str(total_cost), file=sys.stdout)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n# Solution\n\nn, k = [int(x) for x in input().split()]\ns = input()\n\ncost = 0\nfor i in range(1, n + 1):\n    if s[i - 1] == '1':\n        cost += i\n        continue\n    if i - k - 1 >= 0 and s[i - k - 1] == '1':  # prev\n        continue\n    if i + k - 1 < n and s[i + k - 1] == '1':  # next\n        continue\n    cost += i\n\nprint(cost)\n", "\n\ndef main():\n    # Read the input\n    n, k = [int(i) for i in input().split()]  # n: number of rooms, k: range of router\n    s = input()  # s: available routers\n\n    # Initialize the array to store the cost of placing a router in the room\n    cost = [0] * n\n    for i in range(n):\n        if s[i] == '1':\n            cost[i] = i + 1\n\n    # Update the cost based on the routers' range\n    for i in range(k, n):\n        cost[i] = min(cost[i], cost[i - k] + i + 1)\n\n    # Sum the cost\n    total_cost = sum(cost)\n\n    # Output\n    print(total_cost)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    # TODO: Read input\n\n    # TODO: Write the logic\n\n    # TODO: Output\n\n\nif __name__ == \"__main__\":\n    main()\n"]