2022-04-22 11:11:35.626695 num operations 1
2022-04-22 11:11:35.626713 size on input set 1
2022-04-22 11:11:35.626877 using api key jaanu
2022-04-22 11:12:05.221592 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nN = int(input())  # \u5165\u529b\nS = list(input())  # \u5165\u529b\n\n# \u8d64\u3001\u767d\u3001\u9752\u306e\u6570\u3092\u30ab\u30a6\u30f3\u30c8\u3059\u308b\nr_count = 0\nw_count = 0\nb_count = 0\nfor i in range(N):  # S\u306e\u8981\u7d20\u6570\u3060\u3051\u7e70\u308a\u8fd4\u3059\n    if S[i] == 'R':\n        r_count += 1\n    elif S[i] == 'W':\n        w_count += 1\n    else:\n        b_count += 1\n\n# \u8d64\u3001\u767d\u3001\u9752\u3092\u305d\u308c\u305e\u308c\u306e\u6587\u5b57\u6570\u3060\u3051\u7e70\u308a\u8fd4\u3059\nr_list = ['R']*r_count\nw_list = ['W']*w_count\nb_list = ['B']*b_count\n\nans = 0\nfor r in range(r_count+1):\n    for w in range(w_count+1):\n        # \u8d64\u3001\u767d\u3001\u9752\u306e\u6570\u3092\u6c42\u3081\u308b\n        r_num = r\n        w_num = w\n        b_num = N-r-w\n\n        # \u8d64\u3001\u767d\u3001\u9752\u3092\u305d\u308c\u305e\u308c\u306e\u6587\u5b57\u6570\u3060\u3051\u7e70\u308a\u8fd4\u3057\u305f\u30ea\u30b9\u30c8\u306e\u4e2d\u304b\u3089\n        # \u8d64\u3001\u767d\u3001\u9752\u306e\u6570\u3092\u62bd\u51fa\u3059\u308b\n        r_list_sub = r_list[:r_num]\n        w_list_sub = w_list[:w_num]\n        b_list_sub = b_list[:b_num]\n\n        # \u8d64\u3001\u767d\u3001\u9752\u3092\u305d\u308c\u305e\u308c\u306e\u6587\u5b57\u6570\u3060\u3051\u7e70\u308a\u8fd4\u3057\u305f\u30ea\u30b9\u30c8\u306e\u4e2d\u304b\u3089\n        # \u8d64\u3001\u767d\u3001\u9752\u306e\u6570\u3092\u62bd\u51fa\u3057\u305f\u3082\u306e\u3092\u7d50\u5408\u3057\u3066\u3044\u304f\n        sub_list = r_list_sub + w_list_sub + b_list_sub\n\n        # \u8d64\u3001\u767d\u3001\u9752\u3092\u305d\u308c\u305e\u308c\u306e\u6587\u5b57\u6570\u3060\u3051\u7e70\u308a\u8fd4\u3057\u305f\u30ea\u30b9\u30c8\u306e\u4e2d\u304b\u3089\n        # \u8d64\u3001\u767d\u3001\u9752\u306e\u6570\u3092\u62bd\u51fa\u3057\u3066\u3044\u304f\n        sub_list_2 = [r_list[r_num]] + [w_list[w_num]] + [b_list[b_num]]\n\n        # \u8d64\u3001\u767d\u3001\u9752\u3092\u305d\u308c\u305e\u308c\u306e\u6587\u5b57\u6570\u3060\u3051\u7e70\u308a\u8fd4\u3057\u305f\u30ea\u30b9\u30c8\u306e\u4e2d\u304b\u3089\n        # \u8d64\u3001\u767d\u3001\u9752\u306e\u6570\u3092\u62bd\u51fa\u3057\u3066\u3044\u304f\n        sub_list_3 = r_list[r_num+1:] + w_list[w_num+1:] + b_list[b_num+1:]\n\n        # \u8d64\u3001\u767d\u3001\u9752\u3092\u305d\u308c\u305e\u308c\u306e\u6587\u5b57\u6570\u3060\u3051\u7e70\u308a\u8fd4\u3057\u305f\u30ea\u30b9\u30c8\u306e\u4e2d\u304b\u3089\n        # \u8d64\u3001\u767d\u3001\u9752\u306e\u6570\u3092\u62bd\u51fa\u3057\u305f\u3082\u306e\u3092\u7d50\u5408\u3057\u3066\u3044\u304f\n        sub_list_4 = sub_list + sub_list_2 + sub_list_3\n\n        # \u4e00\u81f4\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\n        if sub_list_4 == S:\n            ans += 1\n\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "\n\nN = int(input())\nA = list(map(int, input().split()))\n\n# 2\u6b21\u5143\u914d\u5217\u306b\u307e\u3068\u3081\u308b \nA_list = []\nfor i in range(N):\n    A_list.append([A[i], i])\n\n# \u5c0f\u3055\u3044\u9806\u306b\u30bd\u30fc\u30c8\u3059\u308b\nA_list.sort(key=lambda x:x[0])\n\n# \u6700\u5c0f\u5024\u3068\u6700\u5927\u5024\u306e\u7d76\u5bfe\u5024\u3092\u6c42\u3081\u308b\nmin_value = A_list[0][1]\nmax_value = A_list[-1][1]\n\nprint(max(max_value-min_value, N-1-min_value+max_value))\n"
    },
    {
      "index": 2,
      "text": "\n\nN = int(input())\nA = list(map(int, input().split()))\n\n# 2\u6b21\u5143\u914d\u5217\u306b\u307e\u3068\u3081\u308b\uff08\u5024\uff0c\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\uff09\nA_list = []\nfor i in range(N):\n    A_list.append([A[i], i])\n\n# \u5024\u3067\u5c0f\u3055\u3044\u9806\u306b\u30bd\u30fc\u30c8\u3059\u308b\nA_list.sort(key=lambda x:x[0])\n\n# \u6700\u5c0f\u5024\u3068\u6700\u5927\u5024\u306e\u7d76\u5bfe\u5024\u3092\u6c42\u3081\u308b\nmin_value = A_list[0][1]\nmax_value = A_list[-1][1]\n\nprint(max(max_value-min_value, N-1-min_value+max_value))\n"
    },
    {
      "index": 3,
      "text": "\n\nN = int(input())\nA = list(map(int, input().split()))\n\n# 2\u6b21\u5143\u914d\u5217\u306b\u307e\u3068\u3081\u308b\nA_list = []\nfor i in range(N):\n    A_list.append([A[i], i])\n\n# \u5c0f\u3055\u3044\u9806\u306b\u30bd\u30fc\u30c8\u3059\u308b\nA_list.sort(key=lambda x:x[0])\n\n# \u6700\u5c0f\u5024\u3068\u6700\u5927\u5024\u306e\u7d76\u5bfe\u5024\u3092\u6c42\u3081\u308b\nmin_value = A_list[0][1]\nmax_value = A_list[-1][1]\n\nprint(max(max_value-min_value, N-min_value+max_value-1))\n"
    },
    {
      "index": 4,
      "text": "\nN = int(input())\nA = list(map(int, input().split()))\n\n# 2\u6b21\u5143\u914d\u5217\u306b\u307e\u3068\u3081\u308b\nA_list = []\nfor i in range(N):\n    A_list.append([A[i], i])\n\n# \u5c0f\u3055\u3044\u9806\u306b\u30bd\u30fc\u30c8\u3059\u308b\nA_list.sort(key=lambda x:x[0])\n\n# \u6700\u5c0f\u5024\u3068\u6700\u5927\u5024\u306e\u7d76\u5bfe\u5024\u3092\u6c42\u3081\u308b\nmin_value = A_list[0][1]\nmax_value = A_list[-1][1]\n\nprint(max(max_value-min_value, N-1-min_value+max_value))\n"
    },
    {
      "index": 5,
      "text": "\n\nN = int(input())\nA = list(map(int, input().split()))\n\n# 2\u6b21\u5143\u914d\u5217\u306b\u307e\u3068\u3081\u308b\nA_list = []\nfor i in range(N):\n    A_list.append([A[i], i])\n\n# \u5c0f\u3055\u3044\u9806\u306b\u30bd\u30fc\u30c8\u3059\u308b\nA_list.sort(key=lambda x:x[0])\n\n# \u6700\u5c0f\u5024\u3068\u6700\u5927\u5024\u306e\u7d76\u5bfe\u5024\u3092\u6c42\u3081\u308b\nmin_value = A_list[0][1]\nmax_value = A_list[-1][1]\n\n\n\n\nN = int(input())\nA = list(map(int, input().split()))\n\n# 2\u6b21\u5143\u914d\u5217\u306b\u307e\u3068\u3081\u308b\nA_list = []\nfor i in range(N):\n    A_list.append([A[i], i])\n\n# \u5c0f\u3055\u3044\u9806\u306b\u30bd\u30fc\u30c8\u3059\u308b\nA_list.sort(key=lambda x:x[0])\n\n# \u6700\u5c0f\u5024\u3068\u6700\u5927\u5024\u306e\u7d76\u5bfe\u5024\u3092\u6c42\u3081\u308b\nmin_value = A_list[0][1]\nmax_value = A_list[-1][1]\n\nprint(max(max_value-min_value, N-1-min_value+max_value))\nprint(max(max_value-min_value, N-1-min_value+max_value))\n"
    },
    {
      "index": 6,
      "text": "\nimport math\nprint(math.ceil(5/4))\n"
    },
    {
      "index": 7,
      "text": "\n\nN = int(input())\nA = list(map(int, input().split()))\n\n# 2\u6b21\u5143\u914d\u5217\u306b\u307e\u3068\u3081\u308b\uff08\u5024\u304c\u540c\u3058\u6570\u5b57\u304c\u3042\u308b\u5834\u5408\u306b\u305d\u308c\u3092\u5224\u5225\u3067\u304d\u308b\u3088\u3046\u306b\uff09\nA_list = []\nfor i in range(N):\n    A_list.append([A[i], i])\n\n# \u5c0f\u3055\u3044\u9806\u306b\u30bd\u30fc\u30c8\u3059\u308b\nA_list.sort(key=lambda x:x[0])\n\n# \u6700\u5c0f\u5024\u3068\u6700\u5927\u5024\u306e\u7d76\u5bfe\u5024\u3092\u6c42\u3081\u308b\nmin_value = A_list[0][1]\nmax_value = A_list[-1][1]\n\nprint(max(max_value-min_value, N-1-min_value+max_value))\n"
    }
  ],
  "created": 1650625895,
  "object": "edit"
}
2022-04-22 11:12:05.221920 fix syntax errors 8 ["\n\nN = int(input())  # 入力\nS = list(input())  # 入力\n\n# 赤、白、青の数をカウントする\nr_count = 0\nw_count = 0\nb_count = 0\nfor i in range(N):  # Sの要素数だけ繰り返す\n    if S[i] == 'R':\n        r_count += 1\n    elif S[i] == 'W':\n        w_count += 1\n    else:\n        b_count += 1\n\n# 赤、白、青をそれぞれの文字数だけ繰り返す\nr_list = ['R']*r_count\nw_list = ['W']*w_count\nb_list = ['B']*b_count\n\nans = 0\nfor r in range(r_count+1):\n    for w in range(w_count+1):\n        # 赤、白、青の数を求める\n        r_num = r\n        w_num = w\n        b_num = N-r-w\n\n        # 赤、白、青をそれぞれの文字数だけ繰り返したリストの中から\n        # 赤、白、青の数を抽出する\n        r_list_sub = r_list[:r_num]\n        w_list_sub = w_list[:w_num]\n        b_list_sub = b_list[:b_num]\n\n        # 赤、白、青をそれぞれの文字数だけ繰り返したリストの中から\n        # 赤、白、青の数を抽出したものを結合していく\n        sub_list = r_list_sub + w_list_sub + b_list_sub\n\n        # 赤、白、青をそれぞれの文字数だけ繰り返したリストの中から\n        # 赤、白、青の数を抽出していく\n        sub_list_2 = [r_list[r_num]] + [w_list[w_num]] + [b_list[b_num]]\n\n        # 赤、白、青をそれぞれの文字数だけ繰り返したリストの中から\n        # 赤、白、青の数を抽出していく\n        sub_list_3 = r_list[r_num+1:] + w_list[w_num+1:] + b_list[b_num+1:]\n\n        # 赤、白、青をそれぞれの文字数だけ繰り返したリストの中から\n        # 赤、白、青の数を抽出したものを結合していく\n        sub_list_4 = sub_list + sub_list_2 + sub_list_3\n\n        # 一致しているかどうかを判定\n        if sub_list_4 == S:\n            ans += 1\n\nprint(ans)\n", '\n\nN = int(input())\nA = list(map(int, input().split()))\n\n# 2次元配列にまとめる \nA_list = []\nfor i in range(N):\n    A_list.append([A[i], i])\n\n# 小さい順にソートする\nA_list.sort(key=lambda x:x[0])\n\n# 最小値と最大値の絶対値を求める\nmin_value = A_list[0][1]\nmax_value = A_list[-1][1]\n\nprint(max(max_value-min_value, N-1-min_value+max_value))\n', '\n\nN = int(input())\nA = list(map(int, input().split()))\n\n# 2次元配列にまとめる（値，インデックス）\nA_list = []\nfor i in range(N):\n    A_list.append([A[i], i])\n\n# 値で小さい順にソートする\nA_list.sort(key=lambda x:x[0])\n\n# 最小値と最大値の絶対値を求める\nmin_value = A_list[0][1]\nmax_value = A_list[-1][1]\n\nprint(max(max_value-min_value, N-1-min_value+max_value))\n', '\n\nN = int(input())\nA = list(map(int, input().split()))\n\n# 2次元配列にまとめる\nA_list = []\nfor i in range(N):\n    A_list.append([A[i], i])\n\n# 小さい順にソートする\nA_list.sort(key=lambda x:x[0])\n\n# 最小値と最大値の絶対値を求める\nmin_value = A_list[0][1]\nmax_value = A_list[-1][1]\n\nprint(max(max_value-min_value, N-min_value+max_value-1))\n', '\nN = int(input())\nA = list(map(int, input().split()))\n\n# 2次元配列にまとめる\nA_list = []\nfor i in range(N):\n    A_list.append([A[i], i])\n\n# 小さい順にソートする\nA_list.sort(key=lambda x:x[0])\n\n# 最小値と最大値の絶対値を求める\nmin_value = A_list[0][1]\nmax_value = A_list[-1][1]\n\nprint(max(max_value-min_value, N-1-min_value+max_value))\n', '\n\nN = int(input())\nA = list(map(int, input().split()))\n\n# 2次元配列にまとめる\nA_list = []\nfor i in range(N):\n    A_list.append([A[i], i])\n\n# 小さい順にソートする\nA_list.sort(key=lambda x:x[0])\n\n# 最小値と最大値の絶対値を求める\nmin_value = A_list[0][1]\nmax_value = A_list[-1][1]\n\n\n\n\nN = int(input())\nA = list(map(int, input().split()))\n\n# 2次元配列にまとめる\nA_list = []\nfor i in range(N):\n    A_list.append([A[i], i])\n\n# 小さい順にソートする\nA_list.sort(key=lambda x:x[0])\n\n# 最小値と最大値の絶対値を求める\nmin_value = A_list[0][1]\nmax_value = A_list[-1][1]\n\nprint(max(max_value-min_value, N-1-min_value+max_value))\nprint(max(max_value-min_value, N-1-min_value+max_value))\n', '\nimport math\nprint(math.ceil(5/4))\n', '\n\nN = int(input())\nA = list(map(int, input().split()))\n\n# 2次元配列にまとめる（値が同じ数字がある場合にそれを判別できるように）\nA_list = []\nfor i in range(N):\n    A_list.append([A[i], i])\n\n# 小さい順にソートする\nA_list.sort(key=lambda x:x[0])\n\n# 最小値と最大値の絶対値を求める\nmin_value = A_list[0][1]\nmax_value = A_list[-1][1]\n\nprint(max(max_value-min_value, N-1-min_value+max_value))\n']
2022-04-22 11:12:05.222112 size on output set 8
2022-04-22 11:12:05.222127 num operations 1
2022-04-22 11:12:05.222134 size on input set 1
2022-04-22 11:12:05.222273 using api key soukgp
2022-04-22 11:12:15.000775 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\nA = list(map(int, sys.stdin.readline().rstrip().split())) # A = [1, 2, 3, 4]\n\nA.sort() # A = [1, 2, 3, 4]\n\nprint(A[N-1] - A[0]) # 4 - 1 = 3\n"
    },
    {
      "index": 1,
      "text": "\n\nwith open('hightemp.txt') as f:\n    lines = f.readlines()\n\nprint(len(lines))\n\n# wc -l hightemp.txt\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\nA = list(map(int, sys.stdin.readline().rstrip().split()))\n\nA.sort()\n\nprint(A[N-1] - A[0])\n"
    },
    {
      "index": 3,
      "text": "\na = [1, 2, 3, 4, 5]\nprint(a[0:3])\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\nA = list(map(int, sys.stdin.readline().rstrip().split()))\n\nA.sort()\nprint(A[-1] - A[0])\n"
    },
    {
      "index": 5,
      "text": "\nn = input()\nl = list(map(int, input().split()))\nl.sort()\nprint(l[-1] - l[0])\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\nA = list(map(int, sys.stdin.readline().rstrip().split()))\n\nA.sort()\n\nprint(A[N-1] - A[0])\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\n\nA = list(map(int, sys.stdin.readline().rstrip().split()))\n\nA.sort()\n\nprint(A[N-1] - A[0])\n\n\n"
    }
  ],
  "created": 1650625925,
  "object": "edit"
}
2022-04-22 11:12:15.001114 fix syntax errors 8 ['\n\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\nA = list(map(int, sys.stdin.readline().rstrip().split())) # A = [1, 2, 3, 4]\n\nA.sort() # A = [1, 2, 3, 4]\n\nprint(A[N-1] - A[0]) # 4 - 1 = 3\n', "\n\nwith open('hightemp.txt') as f:\n    lines = f.readlines()\n\nprint(len(lines))\n\n# wc -l hightemp.txt\n", '\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\nA = list(map(int, sys.stdin.readline().rstrip().split()))\n\nA.sort()\n\nprint(A[N-1] - A[0])\n', '\na = [1, 2, 3, 4, 5]\nprint(a[0:3])\n', '\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\nA = list(map(int, sys.stdin.readline().rstrip().split()))\n\nA.sort()\nprint(A[-1] - A[0])\n', '\nn = input()\nl = list(map(int, input().split()))\nl.sort()\nprint(l[-1] - l[0])\n', '\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\nA = list(map(int, sys.stdin.readline().rstrip().split()))\n\nA.sort()\n\nprint(A[N-1] - A[0])\n', '\nimport sys\n\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\n\nA = list(map(int, sys.stdin.readline().rstrip().split()))\n\nA.sort()\n\nprint(A[N-1] - A[0])\n\n\n']
2022-04-22 11:12:15.001169 size on output set 7
