2022-04-22 11:15:22.849317 num operations 1
2022-04-22 11:15:22.849333 size on input set 1
2022-04-22 11:15:22.849495 using api key soukgp
2022-04-22 11:15:31.713081 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nk = input()\ns = input()\n\nif len(s) <= k:\n    print(s)\nelse:\n    print(s[:k] + \"...\")\n"
    },
    {
      "index": 1,
      "text": "\nk = int(input())\ns = input()\n\nif len(s) <= k:\n    print(s)\nelse:\n    print(s[:k] + \"...\")\n"
    },
    {
      "index": 2,
      "text": "\nk = int(input())\ns = input()\n\nif len(s) <= k:\n    print(s)\nelse:\n    print(s[:k] + \"...\")\n"
    },
    {
      "index": 3,
      "text": "\na, b = map(int, input().split())\nprint(a * b)\n"
    },
    {
      "index": 4,
      "text": "\n\nprint(\"Hello World!\")\n"
    },
    {
      "index": 5,
      "text": "\n\nk = int(input())\ns = input()\n\nif len(s) <= k:\n    print(s)\nelse:\n    print(s[:k] + \"...\") \n"
    },
    {
      "index": 6,
      "text": "\nk = int(input())\ns = input()\n\nif len(s) <= k:\n    print(s)\nelse:\n    print(s[:k] + \"...\")\n"
    },
    {
      "index": 7,
      "text": "\n#\n# k = int(input())\n# s = input()\n#\n# if len(s) <= k:\n#     print(s)\n# else:\n#     print(s[:k] + \"...\")\n"
    }
  ],
  "created": 1650626123,
  "object": "edit"
}
2022-04-22 11:15:31.713394 fix syntax errors 8 ['\n\nk = input()\ns = input()\n\nif len(s) <= k:\n    print(s)\nelse:\n    print(s[:k] + "...")\n', '\nk = int(input())\ns = input()\n\nif len(s) <= k:\n    print(s)\nelse:\n    print(s[:k] + "...")\n', '\nk = int(input())\ns = input()\n\nif len(s) <= k:\n    print(s)\nelse:\n    print(s[:k] + "...")\n', '\na, b = map(int, input().split())\nprint(a * b)\n', '\n\nprint("Hello World!")\n', '\n\nk = int(input())\ns = input()\n\nif len(s) <= k:\n    print(s)\nelse:\n    print(s[:k] + "...") \n', '\nk = int(input())\ns = input()\n\nif len(s) <= k:\n    print(s)\nelse:\n    print(s[:k] + "...")\n', '\n#\n# k = int(input())\n# s = input()\n#\n# if len(s) <= k:\n#     print(s)\n# else:\n#     print(s[:k] + "...")\n']
2022-04-22 11:15:31.713437 size on output set 6
2022-04-22 11:15:31.713465 num operations 1
2022-04-22 11:15:31.713471 size on input set 1
2022-04-22 11:15:31.713615 using api key derek
2022-04-22 11:15:52.659303 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nK = int(input(\"\"))\nS = input(\"\")\n\nif len(S) > K:\n    print(S[:K] + '...' )\nelse:\n    print(S)\n"
    },
    {
      "index": 1,
      "text": "\nK = int(input())\nS = input()\nif len(S) > K:\n    print(S[:K] + '...')\nelse:\n    print(S)\n"
    },
    {
      "index": 2,
      "text": "\nK = int(input())\nS = input()\n\nif len(S) > K:\n    print(S[:K] + '...')\nelse:\n    print(S)\n"
    },
    {
      "index": 3,
      "text": "\nK = int(input())\nS = input()\n\nif len(S) > K:\n    print(S[:K] + '...')  \nelse:\n    print(S)\n"
    },
    {
      "index": 4,
      "text": "\nK = int(input())\nS = input()\n\nif len(S) > K:\n    print(S[:K] + '...')\nelse:\n    print(S)\n"
    },
    {
      "index": 5,
      "text": "\nK = int(input())\nS = input()\n\nif len(S) > K:\n    print(S[:K] + '...')\nelse:\n    print(S)\n"
    },
    {
      "index": 6,
      "text": "\nK = int(input())\nS = input()\n\nif len(S) > K:\n    print(S[:K] + '...')\nelse:\n    print(S)\n"
    },
    {
      "index": 7,
      "text": "#!/usr/bin/env python\n# coding: utf-8\n\n# In[1]:\n\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nget_ipython().run_line_magic('matplotlib', 'inline')\n\n\n# In[2]:\n\n\ndf = pd.read_csv('kyphosis.csv')\n\n\n# In[3]:\n\n\ndf.head()\n\n\n# In[4]:\n\n\ndf.info()\n\n\n# In[5]:\n\n\nsns.pairplot(df,hue='Kyphosis',palette='Set1')\n\n\n# In[6]:\n\n\nfrom sklearn.cross_validation import train_test_split\n\n\n# In[7]:\n\n\nX = df.drop('Kyphosis',axis=1)\ny = df['Kyphosis']\n\n\n# In[8]:\n\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30)\n\n\n# In[9]:\n\n\nfrom sklearn.tree import DecisionTreeClassifier\n\n\n# In[10]:\n\n\ndtree = DecisionTreeClassifier()\n\n\n# In[11]:\n\n\ndtree.fit(X_train,y_train)\n\n\n# In[12]:\n\n\npredictions = dtree.predict(X_test)\n\n\n# In[13]:\n\n\nfrom sklearn.metrics import classification_report,confusion_matrix\n\n\n# In[14]:\n\n\nprint(classification_report(y_test,predictions))\n\n\n# In[15]:\n\n\nprint(confusion_matrix(y_test,predictions))\n\n\n# In[16]:\n\n\nfrom sklearn.ensemble import RandomForestClassifier\n\n\n# In[17]:\n\n\nrfc = RandomForestClassifier(n_estimators=100)\n\n\n# In[18]:\n\n\nrfc.fit(X_train, y_train)\n\n\n# In[19]:\n\n\nrfc_pred = rfc.predict(X_test)\n\n\n# In[20]:\n\n\nprint(confusion_matrix(y_test,rfc_pred))\n\n\n# In[21]:\n\n\nprint(classification_report(y_test,rfc_pred))\n\n\n# In[ ]:\n\n\n\n\n\n\nK = int(input())\nS = input()\n\nif len(S) > K:\n    print(S[:K] + '...')\nelse:\n    print(S)\n"
    }
  ],
  "created": 1650626131,
  "object": "edit"
}
2022-04-22 11:15:52.659691 fix syntax errors 8 ['\n\nK = int(input(""))\nS = input("")\n\nif len(S) > K:\n    print(S[:K] + \'...\' )\nelse:\n    print(S)\n', "\nK = int(input())\nS = input()\nif len(S) > K:\n    print(S[:K] + '...')\nelse:\n    print(S)\n", "\nK = int(input())\nS = input()\n\nif len(S) > K:\n    print(S[:K] + '...')\nelse:\n    print(S)\n", "\nK = int(input())\nS = input()\n\nif len(S) > K:\n    print(S[:K] + '...')  \nelse:\n    print(S)\n", "\nK = int(input())\nS = input()\n\nif len(S) > K:\n    print(S[:K] + '...')\nelse:\n    print(S)\n", "\nK = int(input())\nS = input()\n\nif len(S) > K:\n    print(S[:K] + '...')\nelse:\n    print(S)\n", "\nK = int(input())\nS = input()\n\nif len(S) > K:\n    print(S[:K] + '...')\nelse:\n    print(S)\n", "#!/usr/bin/env python\n# coding: utf-8\n\n# In[1]:\n\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nget_ipython().run_line_magic('matplotlib', 'inline')\n\n\n# In[2]:\n\n\ndf = pd.read_csv('kyphosis.csv')\n\n\n# In[3]:\n\n\ndf.head()\n\n\n# In[4]:\n\n\ndf.info()\n\n\n# In[5]:\n\n\nsns.pairplot(df,hue='Kyphosis',palette='Set1')\n\n\n# In[6]:\n\n\nfrom sklearn.cross_validation import train_test_split\n\n\n# In[7]:\n\n\nX = df.drop('Kyphosis',axis=1)\ny = df['Kyphosis']\n\n\n# In[8]:\n\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30)\n\n\n# In[9]:\n\n\nfrom sklearn.tree import DecisionTreeClassifier\n\n\n# In[10]:\n\n\ndtree = DecisionTreeClassifier()\n\n\n# In[11]:\n\n\ndtree.fit(X_train,y_train)\n\n\n# In[12]:\n\n\npredictions = dtree.predict(X_test)\n\n\n# In[13]:\n\n\nfrom sklearn.metrics import classification_report,confusion_matrix\n\n\n# In[14]:\n\n\nprint(classification_report(y_test,predictions))\n\n\n# In[15]:\n\n\nprint(confusion_matrix(y_test,predictions))\n\n\n# In[16]:\n\n\nfrom sklearn.ensemble import RandomForestClassifier\n\n\n# In[17]:\n\n\nrfc = RandomForestClassifier(n_estimators=100)\n\n\n# In[18]:\n\n\nrfc.fit(X_train, y_train)\n\n\n# In[19]:\n\n\nrfc_pred = rfc.predict(X_test)\n\n\n# In[20]:\n\n\nprint(confusion_matrix(y_test,rfc_pred))\n\n\n# In[21]:\n\n\nprint(classification_report(y_test,rfc_pred))\n\n\n# In[ ]:\n\n\n\n\n\n\nK = int(input())\nS = input()\n\nif len(S) > K:\n    print(S[:K] + '...')\nelse:\n    print(S)\n"]
2022-04-22 11:15:52.659737 size on output set 5
