2022-04-22 11:47:39.492165 num operations 1
2022-04-22 11:47:39.492183 size on input set 1
2022-04-22 11:47:39.492363 using api key soukgp
2022-04-22 11:47:47.137386 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nchmod +x file\n#-----Solution-----\n\n#-----Test-----\n"
    },
    {
      "index": 1,
      "text": "\n\n#-----Solution-----#\n\n#-----Test-----#\n"
    },
    {
      "index": 2,
      "text": "\n\n# -----Solution-----\n\n# -----Test-----\n"
    },
    {
      "index": 3,
      "text": "\n#-----Test------\n"
    },
    {
      "index": 4,
      "text": "\n#!/usr/bin/python\n#-----Solution-----\n\n#-----Test-----\n"
    },
    {
      "index": 5,
      "text": "\n\n#-----Solution-----\n\n\nif __name__ == \"__main__\":\n    pass\n#-----Test-----\n"
    },
    {
      "index": 6,
      "text": "\ndef file()\n  puts \"this is a test\"\nend\n#-----Solution-----\n\nfile()\n#-----Test-----\n"
    },
    {
      "index": 7,
      "text": "\ndef solution(number):\n    return sum([i for i in range(number) if i % 3 == 0 or i % 5 == 0])\n#-----Solution-----\n\nprint(solution(10))\n#-----Test-----\n"
    }
  ],
  "created": 1650628059,
  "object": "edit"
}
2022-04-22 11:47:47.137698 fix syntax errors 8 ['\nchmod +x file\n#-----Solution-----\n\n#-----Test-----\n', '\n\n#-----Solution-----#\n\n#-----Test-----#\n', '\n\n# -----Solution-----\n\n# -----Test-----\n', '\n#-----Test------\n', '\n#!/usr/bin/python\n#-----Solution-----\n\n#-----Test-----\n', '\n\n#-----Solution-----\n\n\nif __name__ == "__main__":\n    pass\n#-----Test-----\n', '\ndef file()\n  puts "this is a test"\nend\n#-----Solution-----\n\nfile()\n#-----Test-----\n', '\ndef solution(number):\n    return sum([i for i in range(number) if i % 3 == 0 or i % 5 == 0])\n#-----Solution-----\n\nprint(solution(10))\n#-----Test-----\n']
2022-04-22 11:47:47.137730 size on output set 8
2022-04-22 11:47:47.137742 num operations 1
2022-04-22 11:47:47.137748 size on input set 1
2022-04-22 11:47:47.137881 using api key derek
2022-04-22 11:47:59.429458 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    a, n, m = map(int, input().split())\n    rain = []\n    for _ in xrange(n):\n        rain.append(list(map(int, input().split())))\n    umbrellas = []\n    for _ in xrange(m):\n        umbrellas.append(list(map(int, input().split())))\n\n    # dp[i][j]: minimum fatigue at x=i, using umbrellas up to index j\n    dp = [[0] * (m+1) for _ in xrange(a+1)]\n    for i in xrange(1, a+1):\n        for j in xrange(m+1):\n            if any(map(lambda x: x[0] <= i-1 and i <= x[1], rain)): # raining at i-1\n                min_fatigue = float('inf')\n                for k in xrange(1, j+1):\n                    min_fatigue = min(min_fatigue, dp[i-1][k] + umbrellas[k-1][1])\n                dp[i][j] = min_fatigue\n            else:\n                dp[i][j] = dp[i-1][j]\n    print(dp[-1][-1])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    a, n, m = map(int, input().split())\n    rain = []\n    for _ in xrange(n):\n        rain.append(map(int, input().split()))\n    umbrellas = []\n    for _ in xrange(m):\n        umbrellas.append(map(int, input().split()))\n\n    # dp[i][j]: minimum fatigue at x=i, using umbrellas up to index j\n    dp = [[0] * (m+1) for _ in xrange(a+1)]\n    for i in xrange(1, a+1):\n        for j in xrange(m+1):\n            if any(map(lambda x: x[0] <= i-1 and i <= x[1], rain)): # raining at i-1\n                min_fatigue = float('inf')\n                for k in xrange(1, j+1):\n                    min_fatigue = min(min_fatigue, dp[i-1][k] + umbrellas[k-1][1])\n                dp[i][j] = min_fatigue\n            else:\n                dp[i][j] = dp[i-1][j]\n    print(dp[-1][-1])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    a, n, m = map(int, input().split())\n    rain = []\n    for _ in xrange(n):\n        rain.append(list(map(int, input().split())))\n    umbrellas = []\n    for _ in xrange(m):\n        umbrellas.append(list(map(int, input().split())))\n\n    # dp[i][j]: minimum fatigue at x=i, using umbrellas up to index j\n    dp = [[0] * (m+1) for _ in xrange(a+1)]\n    for i in xrange(1, a+1):\n        for j in xrange(m+1):\n            if any(map(lambda x: x[0] <= i-1 and i <= x[1], rain)): # raining at i-1\n                min_fatigue = float('inf')\n                for k in xrange(1, j+1):\n                    min_fatigue = min(min_fatigue, dp[i-1][k] + umbrellas[k-1][1])\n                dp[i][j] = min_fatigue\n            else:\n                dp[i][j] = dp[i-1][j]\n    print dp[-1][-1]\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    a, n, m = map(int, input().split())\n    rain = []\n    for _ in xrange(n):\n        rain.append(list(map(int, input().split())))\n    umbrellas = []\n    for _ in xrange(m):\n        umbrellas.append(list(map(int, input().split())))\n\n    # dp[i][j]: minimum fatigue at x=i, using umbrellas up to index j\n    dp = [[0] * (m+1) for _ in xrange(a+1)]\n    for i in xrange(1, a+1):\n        for j in xrange(m+1):\n            if any(map(lambda x: x[0] <= i-1 and i <= x[1], rain)): # raining at i-1\n                min_fatigue = float('inf')\n                for k in xrange(1, j+1):\n                    min_fatigue = min(min_fatigue, dp[i-1][k] + umbrellas[k-1][1])\n                dp[i][j] = min_fatigue\n            else:\n                dp[i][j] = dp[i-1][j]\n    print(dp[-1][-1])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    a, n, m = map(int, input().split())\n    rain = []\n    for _ in xrange(n):\n        rain.append(map(int, input().split()))\n    umbrellas = []\n    for _ in xrange(m):\n        umbrellas.append(map(int, input().split()))\n\n    # dp[i][j]: minimum fatigue at x=i, using umbrellas up to index j\n    dp = [[0] * (m+1) for _ in xrange(a+1)]\n    for i in xrange(1, a+1):\n        for j in xrange(m+1):\n            if any(map(lambda x: x[0] <= i-1 and i <= x[1], rain)): # raining at i-1\n                min_fatigue = float('inf')\n                for k in xrange(1, j+1):\n                    min_fatigue = min(min_fatigue, dp[i-1][k] + umbrellas[k-1][1])\n                dp[i][j] = min_fatigue\n            else:\n                dp[i][j] = dp[i-1][j]\n    print(dp[-1][-1])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    a, n, m = map(int, raw_input().split())\n    rain = []\n    for _ in xrange(n):\n        rain.append(map(int, raw_input().split()))\n    umbrellas = []\n    for _ in xrange(m):\n        umbrellas.append(map(int, raw_input().split()))\n\n    # dp[i][j]: minimum fatigue at x=i, using umbrellas up to index j\n    dp = [[0] * (m+1) for _ in xrange(a+1)]\n    for i in xrange(1, a+1):\n        for j in xrange(m+1):\n            if any(map(lambda x: x[0] <= i-1 and i <= x[1], rain)): # raining at i-1\n                min_fatigue = float('inf')\n                for k in xrange(1, j+1):\n                    min_fatigue = min(min_fatigue, dp[i-1][k] + umbrellas[k-1][1])\n                dp[i][j] = min_fatigue\n            else:\n                dp[i][j] = dp[i-1][j]\n    print(dp[-1][-1])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    a, n, m = map(int, input().split())\n    rain = []\n    for _ in xrange(n):\n        rain.append(list(map(int, input().split())))\n    umbrellas = []\n    for _ in xrange(m):\n        umbrellas.append(list(map(int, input().split())))\n\n    # dp[i][j]: minimum fatigue at x=i, using umbrellas up to index j\n    dp = [[0] * (m+1) for _ in xrange(a+1)]\n    for i in xrange(1, a+1):\n        for j in xrange(m+1):\n            if any(map(lambda x: x[0] <= i-1 and i <= x[1], rain)): # raining at i-1\n                min_fatigue = float('inf')\n                for k in xrange(1, j+1):\n                    min_fatigue = min(min_fatigue, dp[i-1][k] + umbrellas[k-1][1])\n                dp[i][j] = min_fatigue\n            else:\n                dp[i][j] = dp[i-1][j]\n    print(dp[-1][-1])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    a, n, m = map(int, raw_input().split())\n    rain = []\n    for _ in xrange(n):\n        rain.append(map(int, raw_input().split()))[1:]\n    umbrellas = []\n    for _ in xrange(m):\n        umbrellas.append(map(int, raw_input().split()))[1:]\n\n    # dp[i][j]: minimum fatigue at x=i, using umbrellas up to index j\n    dp = [[0] * (m+1) for _ in xrange(a+1)]\n    for i in xrange(1, a+1):\n        for j in xrange(m+1):\n            if any(map(lambda x: x[0] <= i-1 and i <= x[1], rain)): # raining at i-1\n                min_fatigue = float('inf')\n                for k in xrange(1, j+1):\n                    min_fatigue = min(min_fatigue, dp[i-1][k] + umbrellas[k-1][1])\n                dp[i][j] = min_fatigue\n            else:\n                dp[i][j] = dp[i-1][j]\n    print dp[a][m]\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650628067,
  "object": "edit"
}
2022-04-22 11:47:59.429885 fix syntax errors 8 ["\n\ndef main():\n    a, n, m = map(int, input().split())\n    rain = []\n    for _ in xrange(n):\n        rain.append(list(map(int, input().split())))\n    umbrellas = []\n    for _ in xrange(m):\n        umbrellas.append(list(map(int, input().split())))\n\n    # dp[i][j]: minimum fatigue at x=i, using umbrellas up to index j\n    dp = [[0] * (m+1) for _ in xrange(a+1)]\n    for i in xrange(1, a+1):\n        for j in xrange(m+1):\n            if any(map(lambda x: x[0] <= i-1 and i <= x[1], rain)): # raining at i-1\n                min_fatigue = float('inf')\n                for k in xrange(1, j+1):\n                    min_fatigue = min(min_fatigue, dp[i-1][k] + umbrellas[k-1][1])\n                dp[i][j] = min_fatigue\n            else:\n                dp[i][j] = dp[i-1][j]\n    print(dp[-1][-1])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    a, n, m = map(int, input().split())\n    rain = []\n    for _ in xrange(n):\n        rain.append(map(int, input().split()))\n    umbrellas = []\n    for _ in xrange(m):\n        umbrellas.append(map(int, input().split()))\n\n    # dp[i][j]: minimum fatigue at x=i, using umbrellas up to index j\n    dp = [[0] * (m+1) for _ in xrange(a+1)]\n    for i in xrange(1, a+1):\n        for j in xrange(m+1):\n            if any(map(lambda x: x[0] <= i-1 and i <= x[1], rain)): # raining at i-1\n                min_fatigue = float('inf')\n                for k in xrange(1, j+1):\n                    min_fatigue = min(min_fatigue, dp[i-1][k] + umbrellas[k-1][1])\n                dp[i][j] = min_fatigue\n            else:\n                dp[i][j] = dp[i-1][j]\n    print(dp[-1][-1])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    a, n, m = map(int, input().split())\n    rain = []\n    for _ in xrange(n):\n        rain.append(list(map(int, input().split())))\n    umbrellas = []\n    for _ in xrange(m):\n        umbrellas.append(list(map(int, input().split())))\n\n    # dp[i][j]: minimum fatigue at x=i, using umbrellas up to index j\n    dp = [[0] * (m+1) for _ in xrange(a+1)]\n    for i in xrange(1, a+1):\n        for j in xrange(m+1):\n            if any(map(lambda x: x[0] <= i-1 and i <= x[1], rain)): # raining at i-1\n                min_fatigue = float('inf')\n                for k in xrange(1, j+1):\n                    min_fatigue = min(min_fatigue, dp[i-1][k] + umbrellas[k-1][1])\n                dp[i][j] = min_fatigue\n            else:\n                dp[i][j] = dp[i-1][j]\n    print dp[-1][-1]\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    a, n, m = map(int, input().split())\n    rain = []\n    for _ in xrange(n):\n        rain.append(list(map(int, input().split())))\n    umbrellas = []\n    for _ in xrange(m):\n        umbrellas.append(list(map(int, input().split())))\n\n    # dp[i][j]: minimum fatigue at x=i, using umbrellas up to index j\n    dp = [[0] * (m+1) for _ in xrange(a+1)]\n    for i in xrange(1, a+1):\n        for j in xrange(m+1):\n            if any(map(lambda x: x[0] <= i-1 and i <= x[1], rain)): # raining at i-1\n                min_fatigue = float('inf')\n                for k in xrange(1, j+1):\n                    min_fatigue = min(min_fatigue, dp[i-1][k] + umbrellas[k-1][1])\n                dp[i][j] = min_fatigue\n            else:\n                dp[i][j] = dp[i-1][j]\n    print(dp[-1][-1])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    a, n, m = map(int, input().split())\n    rain = []\n    for _ in xrange(n):\n        rain.append(map(int, input().split()))\n    umbrellas = []\n    for _ in xrange(m):\n        umbrellas.append(map(int, input().split()))\n\n    # dp[i][j]: minimum fatigue at x=i, using umbrellas up to index j\n    dp = [[0] * (m+1) for _ in xrange(a+1)]\n    for i in xrange(1, a+1):\n        for j in xrange(m+1):\n            if any(map(lambda x: x[0] <= i-1 and i <= x[1], rain)): # raining at i-1\n                min_fatigue = float('inf')\n                for k in xrange(1, j+1):\n                    min_fatigue = min(min_fatigue, dp[i-1][k] + umbrellas[k-1][1])\n                dp[i][j] = min_fatigue\n            else:\n                dp[i][j] = dp[i-1][j]\n    print(dp[-1][-1])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    a, n, m = map(int, raw_input().split())\n    rain = []\n    for _ in xrange(n):\n        rain.append(map(int, raw_input().split()))\n    umbrellas = []\n    for _ in xrange(m):\n        umbrellas.append(map(int, raw_input().split()))\n\n    # dp[i][j]: minimum fatigue at x=i, using umbrellas up to index j\n    dp = [[0] * (m+1) for _ in xrange(a+1)]\n    for i in xrange(1, a+1):\n        for j in xrange(m+1):\n            if any(map(lambda x: x[0] <= i-1 and i <= x[1], rain)): # raining at i-1\n                min_fatigue = float('inf')\n                for k in xrange(1, j+1):\n                    min_fatigue = min(min_fatigue, dp[i-1][k] + umbrellas[k-1][1])\n                dp[i][j] = min_fatigue\n            else:\n                dp[i][j] = dp[i-1][j]\n    print(dp[-1][-1])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    a, n, m = map(int, input().split())\n    rain = []\n    for _ in xrange(n):\n        rain.append(list(map(int, input().split())))\n    umbrellas = []\n    for _ in xrange(m):\n        umbrellas.append(list(map(int, input().split())))\n\n    # dp[i][j]: minimum fatigue at x=i, using umbrellas up to index j\n    dp = [[0] * (m+1) for _ in xrange(a+1)]\n    for i in xrange(1, a+1):\n        for j in xrange(m+1):\n            if any(map(lambda x: x[0] <= i-1 and i <= x[1], rain)): # raining at i-1\n                min_fatigue = float('inf')\n                for k in xrange(1, j+1):\n                    min_fatigue = min(min_fatigue, dp[i-1][k] + umbrellas[k-1][1])\n                dp[i][j] = min_fatigue\n            else:\n                dp[i][j] = dp[i-1][j]\n    print(dp[-1][-1])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    a, n, m = map(int, raw_input().split())\n    rain = []\n    for _ in xrange(n):\n        rain.append(map(int, raw_input().split()))[1:]\n    umbrellas = []\n    for _ in xrange(m):\n        umbrellas.append(map(int, raw_input().split()))[1:]\n\n    # dp[i][j]: minimum fatigue at x=i, using umbrellas up to index j\n    dp = [[0] * (m+1) for _ in xrange(a+1)]\n    for i in xrange(1, a+1):\n        for j in xrange(m+1):\n            if any(map(lambda x: x[0] <= i-1 and i <= x[1], rain)): # raining at i-1\n                min_fatigue = float('inf')\n                for k in xrange(1, j+1):\n                    min_fatigue = min(min_fatigue, dp[i-1][k] + umbrellas[k-1][1])\n                dp[i][j] = min_fatigue\n            else:\n                dp[i][j] = dp[i-1][j]\n    print dp[a][m]\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-22 11:47:59.429967 size on output set 5
