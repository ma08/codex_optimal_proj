["\n\nimport sys\n\nimport math\n\ndef main():\n    input = sys.stdin.readline\n    n, m = map(int, input().split())\n    p = list(map(int, input().split()))\n    print(solve(n, m, p))\n\ndef solve(n, m, p):\n    left, right = 1, n\n    mid = (left + right) // 2\n    count = 0\n    while left <= right:\n        c = 0\n        for i in range(n):\n            if p[i] == mid:\n                c += 1\n        if c == m:\n            count += 1\n            for i in range(n):\n                if p[i] == mid:\n                    for j in range(n):\n                        if p[j] == mid:\n                            count += (i - j + 1)\n                            break\n                    break\n            break\n        elif c > m:\n            right = mid - 1\n        else:\n            left = mid + 1\n        mid = (left + right) // 2\n    return count\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef median(nums):\n    if len(nums) % 2 != 0:\n        med = (nums[len(nums)//2] + nums[len(nums)//2 - 1]) // 2\n    else:\n        med = nums[len(nums)//2]\n    return med\n\ndef main():\n    n, m = map(int, input().split())\n    seq = list(map(int, input().split()))\n    c = 0\n    for i in range(n):\n        for j in range(i, n):\n            if median(seq[i:j+1]) == m:\n                c += 1\n    print(c)\n\nif __name__ == '__main__':\n    main()\n", "\ndef median(nums):\n    if len(nums) % 2 == 0:\n        med = (nums[len(nums)//2] + nums[len(nums)//2 - 1])/2\n    else:\n        med = nums[len(nums)//2]\n    return med\n\ndef main():\n    n, m = map(int, input().split())\n    seq = list(map(int, input().split()))\n    c = 0\n    for i in range(n):\n        for j in range(i, n):\n            if median(seq[i:j+1]) == m:\n                c += 1\n    print(c)\n\nif __name__ == '__main__':\n    main()\n", "\n\n\ndef median(numbers):\n    if len(numbers) % 2 == 0:\n        med = numbers[len(numbers)//2] + numbers[len(numbers)//2 - 1]\n    else:\n        med = numbers[len(numbers)//2]\n    return med\n\n\ndef main():\n    n, m = map(int, input().split())  # number of numbers and the target number\n    numbers = list(map(int, input().split()))  # the list of numbers\n    counter = 0\n    for i in range(n):  # iterate through the list\n        for j in range(i, n):  # iterate through the sublist\n            if median(numbers[i:j+1]) == m:  # check if the median of the sublist is equal to the target\n                counter += 1\n    print(counter)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef median(nums):\n    if len(nums) % 2 == 0:\n        med = (nums[len(nums)//2] + nums[len(nums)//2 - 1])/2\n    else:\n        med = nums[len(nums)//2]\n    return med\n\ndef main():\n    n, m = map(int, input().split())\n    seq = list(map(int, input().split()))\n    c = 0\n    for i in range(n):\n        for j in range(i, n):\n            if median(seq[i:j+1]) == m:\n                c += 1\n    print(c)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef median(lst):\n    lst.sort()\n    if len(lst) % 2 == 0:\n        med = (lst[len(lst)//2] + lst[len(lst)//2 - 1])/2\n    else: med = lst[len(lst)//2]\n    return(med)\n\ndef main():\n    n, m = map(int, input().split())\n    seq = list(map(int, input().split()))[:n]\n    c = 0\n    for i in range(n):\n        for j in range(i, n+1):\n            if median(seq[i:j]) == m:\n                c += 1\n    print(c)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    p = list(map(int, sys.stdin.readline().split()))\n    print(solve(n, m, p))\n\ndef solve(n, m, p):\n    left, right = 1, n\n    mid = (left + right) // 2\n    count = 0\n    while left <= right:\n        c = 0\n        for i in range(n):\n            if p[i] == mid:\n                c += 1\n        if c == m:\n            count += 1\n            for i in range(n):\n                if p[i] == mid:\n                    for j in range(n):\n                        if p[j] == mid:\n                            count += (i - j + 1)\n                            break\n                    break\n            break\n        elif c > m:\n            right = mid - 1\n        else:\n            left = mid + 1\n        mid = (left + right) // 2\n    return count\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\nimport math\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    p = list(map(int, sys.stdin.readline().split()))\n    print(solve(n, m, p))\n\ndef solve(n, m, p):\n    left, right = 1, n\n    mid = (left + right) // 2\n    count = 0\n    while left <= right:\n        c = 0\n        for i in range(n):\n            if p[i] == mid:\n                c += 1\n        if c == m:\n            count += 1\n            for i in range(n):\n                if p[i] == mid:\n                    for j in range(n):\n                        if p[j] == mid:\n                            count += (i - j + 1)\n                            break\n                    break\n            break\n        elif c > m:\n            right = mid - 1\n        else:\n            left = mid + 1\n        mid = (left + right) // 2\n    return count\n\nif __name__ == \"__main__\":\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    input = sys.stdin.readline\n    n, m = map(int, input().split())\n    p = list(map(int, input().split()))\n    print(solve(n, m, p))\n\ndef solve(n, m, p):\n    left, right = 1, n\n    mid = (left + right) // 2\n    count = 0\n    while left <= right:\n        c = 0\n        for i in range(n):\n            if p[i] == mid:\n                c += 1\n        if c == m:\n            count += 1\n            for i in range(n):\n                if p[i] == mid:\n                    for j in range(n):\n                        if p[j] == mid:\n                            count += (i - j + 1)\n                            break\n                    break\n            break\n        elif c > m:\n            right = mid - 1\n        else:\n            left = mid + 1\n        mid = (left + right) // 2\n    return count\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef median(nums):\n    if (len(nums) % 2) == 0:\n        med = nums[len(nums)//2] + nums[len(nums)//2 - 1]\n    else:\n        med = nums[len(nums)//2]\n    return med\n\ndef main():\n    n, m = map(int, input().split())\n    seq = list(map(int, input().split()))\n    c = 0\n    for i in range(n):\n        for j in range(i, n):\n            if median(seq[i:j+1]) == m: \n                c += 1\n    print(c)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nimport math\n\ndef main():\n    input = sys.stdin.readline\n    n, m = map(int, input().split())\n    p = list(map(int, input().split()))\n    print(solve(n, m, p))\n\ndef solve(n, m, p):\n    left, right = 1, n\n    mid = (left + right) // 2\n    count = 0\n    while left <= right:\n        c = 0\n        for i in range(n):\n            if p[i] == mid:\n                c += 1\n        if c == m:\n            count += 1\n            for i in range(n):\n                if p[i] == mid:\n                    for j in range(n):\n                        if p[j] == mid:\n                            count += (n - j) * (j - i + 1)\n                            break\n                    break\n            break\n        elif c > m:\n            right = mid - 1\n        else:\n            left = mid + 1\n        mid = (left + right) // 2\n    return count\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef median(nums):\n    if len(nums) % 2 == 0:\n        med = (nums[len(nums)//2] + nums[len(nums)//2 - 1])/2\n    else:\n        med = nums[len(nums)//2]\n    return med\n\ndef main():\n    n, m = map(int, input().split())\n    seq = list(map(float, input().split()))\n    c = 0\n    for i in range(n):\n        for j in range(i, n):\n            if median(seq[i:j+1]) == m:\n                c += 1\n    print(c)\n\nif __name__ == '__main__':\n    main()\n", "import sys\nimport math\n\ndef main():\n    input = sys.stdin.readline\n    n, m = map(int, input().split())\n    p = list(map(int, input().split()))\n    print(solve(n, m, p))\n\ndef solve(n, m, p):\n    left, right = 1, n\n    mid = (left + right) // 2\n    count = 0\n    while left <= right:\n        c = 0\n        for i in range(n):\n            if p[i] == mid:\n                c += 1\n        if c == m:\n            count += 1\n            for i in range(n):\n                if p[i] == mid:\n                    for j in range(n):\n                        if p[j] == mid:\n                            count += (i - j + 1)\n                            break\n                    break\n            break\n        elif c > m:\n            right = mid - 1\n        else:\n            left = mid + 1\n        mid = (left + right) // 2\n    return count\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef median(nums):\n    if len(nums) % 2 == 0:\n        med /= 2\n        med = nums[len(nums)//2] + nums[len(nums)//2 - 1]\n    else:\n        med = nums[len(nums)//2]\n    return med\n\ndef main():\n    n, m = map(int, raw_input().split())\n    seq = list(map(int, raw_input().split()))\n    c = 0\n    for i in range(n):\n        for j in range(i, n):\n            if median(seq[i:j+1]) == m:\n                c += 1\n    print(c)\n\nif __name__ == '__main__':\n    main()\n"]