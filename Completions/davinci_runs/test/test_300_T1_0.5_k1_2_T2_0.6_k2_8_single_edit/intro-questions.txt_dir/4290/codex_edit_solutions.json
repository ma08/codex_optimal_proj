["\n\nN, M = map(int, input().split())\n\n\n\n\n\nprint(N * M)\n", "\n", "\nimport sys\nimport math\nargv = sys.argv\nprint(int(argv[1]) + int(argv[2]))\n", "\nN, M = map(int, input().split())\n\nprint(N * (M - 1) + 1)\n", "\n\nN, M = map(int, input().split())\nif 1 <= N <= 1000 and 1 <= M <= 1000:\n    print(N * M)\n", "\n\ndef sum_even_rows(N, M):\n    return N * M\n\nN, M = [int(x) for x in input().split()]\nprint(sum_even_ways(N, M))\n", "N, M = map(int, input().split())\nprint(N * M)\n", "\n\ndef sum_even_ways(N, M, A):\n    return N*M*A\n\nN, M = [int(x) for x in input().split()]\nA = [int(x) for x in input().split()]\nprint(sum_even_ways(N, M, A))\n", "\n\ndef sum_even_ways(n, m):\n    return n * m\n\nn, m = [int(x) for x in input().split()]\nprint(sum_even_ways(n, m))\n", "N, M = map(int, input().split())\n\nprint(N * M)\n", "\n# coding: utf-8\n\nN, M = map(int, input().split())\n\nif N == 1 and M == 1:\n    print(1)\nelif N == 1 and M >= 2:\n    print(M - 2)\nelif N >= 2 and M == 1:\n    print(N - 2)\nelse:\n    print((N - 2) * (M - 2))\n", "\nN, M = [int(x) for x in input().split()]\nprint(N*M)\n", "\ndef sum_even_ways(N, M):\n    return N*M\n\nN, M = [int(x) for x in input().split()]\nprint(sum_even_ways(N, M))\n", "\nN, M = map(int, input().split())\n\nprint(N * M)\n", "\n\ndef sum_even_ways(N, M):\n    return N * M\n\n\nN, M = [int(x) for x in input().split(' ')]\nprint(sum_even_ways(N, M))\n"]