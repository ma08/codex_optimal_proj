


#!/usr/bin/env python3
# -*- coding: utf-8 -*-


# Сформировать из введенного числа обратное по порядку входящих в него цифр и вывести на экран. Например, если введено число 3486, надо вывести 6843.

n = int(input())

while n > 0:
    print(n % 10, end='')
    n //= 10


# Датчик принимает сигнал, состоящий из 0 и 1. Известно, что сигнал имеет периодичность, не превышающей натурального числа n. Напишите код, который вычисляет периодичность сигнала. Считайте, что 3 < n < 1000, а общая длина сигнала значительно превышает n.

s = input()
n = len(s)

for i in range(n):
    if s[:i] == s[i:2*i]:
        print(i)
        break


# Напишите программу, на вход которой подается прямоугольная матрица в виде последовательности строк, заканчивающихся строкой, содержащей только строку "end" (без кавычек)

# Программа должна вывести матрицу того же размера, у которой каждый элемент в позиции i, j равен сумме элементов первой матрицы на позициях (i-1, j), (i+1, j), (i, j-1), (i, j+1). У крайних символов соседний элемент находится с противоположной стороны матрицы.

# В случае одной строки/столбца элемент сам себе является соседом по соответствующему направлению.

a = []

while True:
    s = input()
    if s == 'end':
        break
    a.append([int(i) for i in s.split()])

for i in range(len(a)):
    for j in range(len(a[i])):
        print(a[i - 1][j] + a[(i + 1) % len(a)][j] + a[i][j - 1] + a[i][(j + 1) % len(a[i])], end=' ')
    print()


# В институте биоинформатики по офису передвигается робот. Недавно студенты из группы программистов написали для него программу, по которой робот, когда заходит в комнату, считает количество программистов в ней и произносит его вслух: "n программистов".

# Для того, чтобы это звучало правильно, для каждого n нужно использовать верное окончание слова.

# Напишите программу, считывающую с пользовательского ввода целое число n (неотрицательное), выводящее это число в консоль вместе с правильным образом изменённым словом "программист", для того, чтобы робот мог нормально общаться с людьми, например: 1 программист, 2 программиста, 5 программистов.

# В комнате может быть очень много программистов. Проверьте, что
# Solution

n, k = map(int, input().split())
a = list(map(int, input().split()))

if k == 1:
    print(max(a))
else:
    print(max(a) - min(a) + 1)
