["\n\n# Import\nimport sys\nimport math\n\n# Functions\ndef input():\n    return sys.stdin.readline().strip()\n\n# Main\nN = int(input())\nd = list(map(int, input().split()))\n\n# Sorting\nd.sort()\n\n# Number of problems\ncount = 0\n\n# Solve\nfor i in range(N//2):\n    if d[i] == d[N//2]:\n        count += 1\n    elif d[i] < d[N//2]:\n        break\n\n# Print\nprint(count)\n", "\n\n# input\nN = int(input())\nA = list(map(int, input().split()))\n\n# sort\nA.sort()\n\n# output\nprint(A[N//2] - A[N//2 - 1])\n", "\nn = int(input())\nd = list(map(int, input().split()))\n\nd.sort(reverse=True)\n\ncnt = 0\nfor i in range(n//2):\n    if d[i] == d[i+n//2]:\n        cnt += 1\n    else:\n        break\nprint(n//2 + cnt)\n", "\n\n# Import\nimport sys\nimport heapq\nimport collections\nimport bisect\nimport random\nimport fractions\nimport copy\nimport functools\nimport itertools\nimport pprint\nimport numpy as np\nimport scipy as sp\nimport scipy.misc\nimport scipy.ndimage\nimport scipy.optimize\nimport scipy.stats\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport networkx as nx\nimport pandas as pd\nimport tqdm\nimport sklearn\nimport sklearn.decomposition\nimport sklearn.metrics\nimport sklearn.cluster\nimport sklearn.datasets\nimport sklearn.manifold\nimport sklearn.neighbors\nimport sklearn.ensemble\nimport sklearn.tree\nimport sklearn.svm\nimport sklearn.discriminant_analysis\nimport sklearn.naive_bayes\nimport sklearn.linear_model\nimport sklearn.multiclass\nimport sklearn.neural_network\nimport sklearn.pipeline\nimport sklearn.preprocessing\nimport math\n\n# Functions\ndef input():\n    return sys.stdin.readline().strip()\n\n# Main\nN = int(input())\nd = list(map(int, input().split()))\n\n# Sorting\nd.sort()\n\n# Number of problems\ncount = 0\n\n# Solve\nfor i in range(N//2):\n    if d[i] == d[N//2]:\n        count += 1\n    elif d[i] < d[N//2]:\n        break\n\nprint(count)\n", "\nprint(\"hello\")\n", "\nn, h = map(int, input().split())\na, b, c, d, e = map(int, input().split())\n", "\n\n# Import\nimport sys\nimport os\nimport sys\nimport re\nimport time\nimport numpy as np\nimport pandas as pd\nimport random\nimport scipy.stats as stats\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nfrom collections import Counter\nfrom sklearn import datasets\nfrom sklearn import svm\nfrom sklearn import metrics\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import confusion_matrix, precision_recall_curve, auc, roc_auc_score, roc_curve, recall_score, classification_report\nfrom sklearn.metrics import precision_score, accuracy_score, f1_score, roc_auc_score, recall_score, classification_report, confusion_matrix\nfrom sklearn.metrics import roc_curve\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import ShuffleSplit\nfrom sklearn.model_selection import learning_curve\nfrom sklearn.model_selection import validation_curve\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\nfrom sklearn.datasets import load_digits\nfrom sklearn.feature_selection import SelectKBest, chi2\nfrom sklearn.feature_selection import RFE\nfrom sklearn.decomposition import PCA\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import f_classif\nfrom sklearn.feature_selection import mutual_info_classif\nfrom sklearn.metrics import accuracy_score, log_loss\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import confusion_matrix, precision_score, recall_score, f1_score, roc_auc_score, accuracy_score, classification_report\nimport math\n\n# Functions\ndef input():\n    return sys.stdin.readline().strip()\n\n# Main\nN = int(input())\nd = list(map(int, input().split()))\n\n# Sorting\nd.sort()\n\n# Number of problems\ncount = 0\n\n# Solve\nfor i in range(N//2):\n    if d[i] == d[N//2]:\n        count += 1\n    elif d[i] < d[N//2]:\n        break\n\nprint(count)\n", "\n# Import\nimport sys\nimport math\n\n# Functions\ndef input():\n    return sys.stdin.readline().strip()\n\n# Main\nN = int(input())\nd = list(map(int, input().split()))\n\n# Sorting\nd.sort()\n\n# Number of problems\ncount = 0\n\n# Solve\nfor i in range(N // 2):\n    if d[i] == d[N // 2]:\n        count += 1\n    elif d[i] < d[N // 2]:\n        break\n\nprint(count)\n", "import math\n\nn = int(input())\na = list(map(int, input().split()))\n\na.sort(reverse=True)\n\ncnt = 0\nif a[0] == a[n - 1]:\n    print(math.factorial(n) % (10 ** 9 + 7))\nelse:\n    for i in range(n // 2):\n        if a[i] == a[i + n // 2]:\n            cnt += 1\n        else:\n            break\n    print(math.factorial(n // 2 + cnt) % (10 ** 9 + 7))\n", "\n# Import\nimport sys\nimport math\n\n# Functions\ndef input():\n    return sys.stdin.readline().strip()\n\n# Main\nN = int(input())\nd = list(map(int, input().split()))\n\n# Sorting\nd.sort()\n\n# Number of problems\ncount = 0\n\n# Solve\nfor i in range(N//2):\n    if d[i] == d[N//2]:\n        count += 1\n    elif d[i] < d[N//2]:\n        break\n\nprint(count)\n", "# coding: utf-8\n\nn = int(input())\nd = list(map(int, input().split()))\n\nd.sort(reverse=True)\n\ncnt = 0\nfor i in range(n//2):\n    if d[i] == d[i+n//2]:\n        cnt += 1\n    else:\n        break\nprint(n//2 + cnt)\n"]