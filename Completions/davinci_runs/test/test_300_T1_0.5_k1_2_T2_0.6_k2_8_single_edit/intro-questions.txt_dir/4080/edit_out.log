2022-04-22 10:10:35.538617 num operations 1
2022-04-22 10:10:35.538635 size on input set 1
2022-04-22 10:10:35.538780 using api key jaanu
2022-04-22 10:10:57.293095 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    segs = []\n\n    for i in range(m):\n        l, r = map(int, sys.stdin.readline().split())\n        segs.append((l, r))\n\n    segs.sort(key=lambda x: x[1])\n\n    # print n, m\n    # print a\n    # print segs\n\n    b = a[:]\n    s = set()\n    cur = 0\n    while cur < m:\n        # print 'cur', cur\n        # print 's', s\n        # print 'b', b\n        if len(s) == 0 or segs[cur][0] > segs[s[-1]][1]:\n            s.add(cur)\n            for i in range(segs[cur][0], segs[cur][1]+1):\n                b[i-1] -= 1\n        cur += 1\n\n    print max(b) - min(b)\n    print len(s)\n    for i in s:\n        print i+1,\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n#\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = map(int, sys.stdin.readline().split())\n    segs = []\n\n    for i in range(m):\n        l, r = map(int, sys.stdin.readline().split())\n        segs.append((l, r))\n\n    segs.sort(key=lambda x: x[1])\n\n    # print n, m\n    # print a\n    # print segs\n\n    b = a[:]\n    s = set()\n    cur = 0\n    while cur < m:\n        # print 'cur', cur\n        # print 's', s\n        # print 'b', b\n        if len(s) == 0 or segs[cur][0] > segs[s[-1]][1]:\n            s.add(cur)\n            for i in range(segs[cur][0], segs[cur][1]+1):\n                b[i-1] -= 1\n        cur += 1\n\n    print max(b) - min(b)\n    print len(s)\n    for i in s:\n        print i+1,\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "error": {
        "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
        "type": "invalid_edit"
      },
      "index": 2
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    segs = []\n\n    for i in range(m):\n        l, r = list(map(int, sys.stdin.readline().split()))\n        segs.append((l, r))\n\n    segs.sort(key=lambda x: x[1])\n\n    # print n, m\n    # print a\n    # print segs\n\n    b = a[:]\n    s = []\n    cur = 0\n    while cur < m:\n        # print 'cur', cur\n        # print 's', s\n        # print 'b', b\n        if len(s) == 0 or segs[cur][0] > segs[s[-1]][1]:\n            s.append(cur)\n            for i in range(segs[cur][0], segs[cur][1]+1):\n                b[i-1] -= 1\n        cur += 1\n\n    print max(b) - min(b)\n    print len(s)\n    for i in s:\n        print i+1,\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = map(int, sys.stdin.readline().split())\n    segs = []\n\n    for i in range(m):\n        l, r = map(int, sys.stdin.readline().split())\n        segs.append((l, r))\n\n    segs.sort(key=lambda x: x[1])\n\n    # print n, m\n    # print a\n    # print segs\n\n    b = a[:]\n    s = set()\n    cur = 0\n    while cur < m:\n        # print 'cur', cur\n        # print 's', s\n        # print 'b', b\n        if len(s) == 0 or segs[cur][0] > segs[s[-1]][1]:\n            s.add(cur)\n            for i in range(segs[cur][0], segs[cur][1]+1):\n                b[i-1] -= 1\n        cur += 1\n\n    print(max(b) - min(b))\n    print(len(s))\n    for i in s:\n        print (i+1, end='')\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    segs = []\n\n    for i in range(m):\n        l, r = map(int, sys.stdin.readline().split())\n        segs.append((l, r))\n\n    segs.sort(key=lambda x: x[1])\n\n    # print n, m\n    # print a\n    # print segs\n\n    b = a[:]\n    s = set()\n    cur = 0\n    while cur < m:\n        # print 'cur', cur\n        # print 's', s\n        # print 'b', b\n        if len(s) == 0 or segs[cur][0] > segs[s[-1]][1]:\n            s.add(cur)\n            for i in range(segs[cur][0], segs[cur][1]+1):\n                b[i-1] -= 1\n        cur += 1\n\n    print max(b) - min(b)\n    print len(s)\n    for i in s:\n        print i+1,\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = map(int, sys.stdin.readline().split())\n    segs = []\n\n    for i in range(m):\n        l, r = map(int, sys.stdin.readline().split())\n        segs.append((l, r))\n\n    segs.sort(key=lambda x: x[1])\n\n    # print n, m\n    # print a\n    # print segs\n\n    b = a[:]\n    s = set()\n    cur = 0\n    while cur < m:\n        # print 'cur', cur\n        # print 's', s\n        # print 'b', b\n        if len(s) == 0 or segs[cur][0] > segs[max(s)][1]:\n            s.add(cur)\n            for i in range(segs[cur][0], segs[cur][1]+1):\n                b[i-1] -= 1\n        cur += 1\n\n    print max(b) - min(b)\n    print len(s)\n    for i in s:\n        print i+1,\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n#\n# import sys\n#\n# def main():\n#     n, m = map(int, sys.stdin.readline().split())\n#     a = map(int, sys.stdin.readline().split())\n#     segs = []\n#\n#     for i in range(m):\n#         l, r = map(int, sys.stdin.readline().split())\n#         segs.append((l, r))\n#\n#     segs.sort(key=lambda x: x[1])\n#\n#     # print n, m\n#     # print a\n#     # print segs\n#\n#     b = a[:]\n#     s = set()\n#     cur = 0\n#     while cur < m:\n#         # print 'cur', cur\n#         # print 's', s\n#         # print 'b', b\n#         if len(s) == 0 or segs[cur][0] > segs[s[-1]][1]:\n#             s.add(cur)\n#             for i in range(segs[cur][0], segs[cur][1]+1):\n#                 b[i-1] -= 1\n#         cur += 1\n#\n#     print max(b) - min(b)\n#     print len(s)\n#     for i in s:\n#         print i+1,\n#\n# if __name__ == \"__main__\":\n#     main()\n"
    }
  ],
  "created": 1650622235,
  "object": "edit"
}
2022-04-22 10:10:57.293481 NO RESULT
2022-04-22 10:10:57.293494 {
  "error": {
    "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
    "type": "invalid_edit"
  },
  "index": 2
}
2022-04-22 10:10:57.293547 fix syntax errors 7 ['\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    segs = []\n\n    for i in range(m):\n        l, r = map(int, sys.stdin.readline().split())\n        segs.append((l, r))\n\n    segs.sort(key=lambda x: x[1])\n\n    # print n, m\n    # print a\n    # print segs\n\n    b = a[:]\n    s = set()\n    cur = 0\n    while cur < m:\n        # print \'cur\', cur\n        # print \'s\', s\n        # print \'b\', b\n        if len(s) == 0 or segs[cur][0] > segs[s[-1]][1]:\n            s.add(cur)\n            for i in range(segs[cur][0], segs[cur][1]+1):\n                b[i-1] -= 1\n        cur += 1\n\n    print max(b) - min(b)\n    print len(s)\n    for i in s:\n        print i+1,\n\nif __name__ == "__main__":\n    main()\n', '\n#\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = map(int, sys.stdin.readline().split())\n    segs = []\n\n    for i in range(m):\n        l, r = map(int, sys.stdin.readline().split())\n        segs.append((l, r))\n\n    segs.sort(key=lambda x: x[1])\n\n    # print n, m\n    # print a\n    # print segs\n\n    b = a[:]\n    s = set()\n    cur = 0\n    while cur < m:\n        # print \'cur\', cur\n        # print \'s\', s\n        # print \'b\', b\n        if len(s) == 0 or segs[cur][0] > segs[s[-1]][1]:\n            s.add(cur)\n            for i in range(segs[cur][0], segs[cur][1]+1):\n                b[i-1] -= 1\n        cur += 1\n\n    print max(b) - min(b)\n    print len(s)\n    for i in s:\n        print i+1,\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    segs = []\n\n    for i in range(m):\n        l, r = list(map(int, sys.stdin.readline().split()))\n        segs.append((l, r))\n\n    segs.sort(key=lambda x: x[1])\n\n    # print n, m\n    # print a\n    # print segs\n\n    b = a[:]\n    s = []\n    cur = 0\n    while cur < m:\n        # print \'cur\', cur\n        # print \'s\', s\n        # print \'b\', b\n        if len(s) == 0 or segs[cur][0] > segs[s[-1]][1]:\n            s.append(cur)\n            for i in range(segs[cur][0], segs[cur][1]+1):\n                b[i-1] -= 1\n        cur += 1\n\n    print max(b) - min(b)\n    print len(s)\n    for i in s:\n        print i+1,\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = map(int, sys.stdin.readline().split())\n    segs = []\n\n    for i in range(m):\n        l, r = map(int, sys.stdin.readline().split())\n        segs.append((l, r))\n\n    segs.sort(key=lambda x: x[1])\n\n    # print n, m\n    # print a\n    # print segs\n\n    b = a[:]\n    s = set()\n    cur = 0\n    while cur < m:\n        # print \'cur\', cur\n        # print \'s\', s\n        # print \'b\', b\n        if len(s) == 0 or segs[cur][0] > segs[s[-1]][1]:\n            s.add(cur)\n            for i in range(segs[cur][0], segs[cur][1]+1):\n                b[i-1] -= 1\n        cur += 1\n\n    print(max(b) - min(b))\n    print(len(s))\n    for i in s:\n        print (i+1, end=\'\')\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().split()))\n    segs = []\n\n    for i in range(m):\n        l, r = map(int, sys.stdin.readline().split())\n        segs.append((l, r))\n\n    segs.sort(key=lambda x: x[1])\n\n    # print n, m\n    # print a\n    # print segs\n\n    b = a[:]\n    s = set()\n    cur = 0\n    while cur < m:\n        # print \'cur\', cur\n        # print \'s\', s\n        # print \'b\', b\n        if len(s) == 0 or segs[cur][0] > segs[s[-1]][1]:\n            s.add(cur)\n            for i in range(segs[cur][0], segs[cur][1]+1):\n                b[i-1] -= 1\n        cur += 1\n\n    print max(b) - min(b)\n    print len(s)\n    for i in s:\n        print i+1,\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    n, m = map(int, sys.stdin.readline().split())\n    a = map(int, sys.stdin.readline().split())\n    segs = []\n\n    for i in range(m):\n        l, r = map(int, sys.stdin.readline().split())\n        segs.append((l, r))\n\n    segs.sort(key=lambda x: x[1])\n\n    # print n, m\n    # print a\n    # print segs\n\n    b = a[:]\n    s = set()\n    cur = 0\n    while cur < m:\n        # print \'cur\', cur\n        # print \'s\', s\n        # print \'b\', b\n        if len(s) == 0 or segs[cur][0] > segs[max(s)][1]:\n            s.add(cur)\n            for i in range(segs[cur][0], segs[cur][1]+1):\n                b[i-1] -= 1\n        cur += 1\n\n    print max(b) - min(b)\n    print len(s)\n    for i in s:\n        print i+1,\n\nif __name__ == "__main__":\n    main()\n', '\n#\n# import sys\n#\n# def main():\n#     n, m = map(int, sys.stdin.readline().split())\n#     a = map(int, sys.stdin.readline().split())\n#     segs = []\n#\n#     for i in range(m):\n#         l, r = map(int, sys.stdin.readline().split())\n#         segs.append((l, r))\n#\n#     segs.sort(key=lambda x: x[1])\n#\n#     # print n, m\n#     # print a\n#     # print segs\n#\n#     b = a[:]\n#     s = set()\n#     cur = 0\n#     while cur < m:\n#         # print \'cur\', cur\n#         # print \'s\', s\n#         # print \'b\', b\n#         if len(s) == 0 or segs[cur][0] > segs[s[-1]][1]:\n#             s.add(cur)\n#             for i in range(segs[cur][0], segs[cur][1]+1):\n#                 b[i-1] -= 1\n#         cur += 1\n#\n#     print max(b) - min(b)\n#     print len(s)\n#     for i in s:\n#         print i+1,\n#\n# if __name__ == "__main__":\n#     main()\n']
2022-04-22 10:10:57.293726 size on output set 6
2022-04-22 10:10:57.293740 num operations 1
2022-04-22 10:10:57.293747 size on input set 1
2022-04-22 10:10:57.293890 using api key sunu
2022-04-22 10:11:09.899910 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef solve(n, m, a, l, r):\n    # Write your code here\n    # To print results to the standard output you can use print\n    # Example: print \"Hello world!\"\n    pass\n\nif __name__ == '__main__':\n    n, m = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    l = []\n    r = []\n    for i in range(m):\n        l.append(int(input().split()[0]))\n        r.append(int(input().split()[1]))\n    solve(n, m, a, l, r)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef solve(n, m, a, l, r):\n    # Write your code here\n    # To print results to the standard output you can use print\n    # Example: print \"Hello world!\"\n    pass\n\nif __name__ == '__main__':\n    n, m = [int(i) for i in raw_input().split()]\n    a = [int(i) for i in raw_input().split()]\n    l, r = [], []\n    for i in range(m):\n        l.append(int(raw_input().split()[0]))\n        r.append(int(raw_input().split()[1]))\n    solve(n, m, a, l, r)\n"
    },
    {
      "index": 2,
      "text": "\n\ndef solve(n, m, a, l, r):\n    # Write your code here\n    # To print results to the standard output you can use print\n    # Example: print \"Hello world!\"\n    pass\n\nif __name__ == '__main__':\n    n, m = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    l = []\n    r = []\n    for i in range(m):\n        l.append(int(input().split()[0]))\n        r.append(int(input().split()[1]))\n    solve(n, m, a, l, r)\n"
    },
    {
      "error": {
        "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
        "type": "invalid_edit"
      },
      "index": 3
    },
    {
      "index": 4,
      "text": "import math\n\n\ndef solve(n, m, a, l, r, primes):\n    for i in range(m):\n        print(primes[r[i]]-primes[l[i]-1])\n\ndef get_primes(n, primes):\n    for i in range(2, n):\n        prime = True\n        for j in range(i):\n            if primes[j] > math.sqrt(i):\n                break\n            if i % primes[j] == 0:\n                prime = False\n                break\n        if prime:\n            primes.append(i)\n\nif __name__ == '__main__':\n    n, m = [int(i) for i in raw_input().split()]\n    a = [int(i) for i in raw_input().split()]\n    l = []\n    r = []\n    for i in range(m):\n        l.append(int(raw_input().split()[0]))\n        r.append(int(raw_input().split()[1]))\n    primes = [2]\n    get_primes(max(a), primes)\n    solve(n, m, a, l, r, primes)\n"
    },
    {
      "index": 5,
      "text": "\n\ndef solve(n, m, a, l, r):\n    # Write your code here\n    # To print results to the standard output you can use print\n    # Example: print \"Hello world!\"\n    pass\n\nif __name__ == '__main__':\n    n, m = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    l = []\n    r = []\n    for i in range(m):\n        l.append(int(input().split()[0]))\n        r.append(int(input().split()[1]))\n    solve(n, m, a, l, r)\n"
    },
    {
      "index": 6,
      "text": "\n\ndef solve(n, m, a, l, r):\n    # Write your code here\n    # To print results to the standard output you can use print\n    # Example: print \"Hello world!\"\n    pass\n\nif __name__ == '__main__':\n    n, m = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    l = []\n    r = []\n    for i in range(m):\n        l.append(int(input().split()[0]))\n        r.append(int(input().split()[1]))\n    solve(n, m, a, l, r)\n"
    },
    {
      "index": 7,
      "text": "\n\ndef solve(n, m, a, l, r):\n    # Write your code here\n    # To print results to the standard output you can use print\n    # Example: print \"Hello world!\"\n    pass\n\nif __name__ == '__main__':\n    n, m = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    l = []\n    r = []\n    for i in range(m):\n        l.append(int(input().split()[0]))\n        r.append(int(input().split()[1]))\n    solve(n, m, a, l, r)\n"
    }
  ],
  "created": 1650622257,
  "object": "edit"
}
2022-04-22 10:11:09.900234 NO RESULT
2022-04-22 10:11:09.900244 {
  "error": {
    "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
    "type": "invalid_edit"
  },
  "index": 3
}
2022-04-22 10:11:09.900290 fix syntax errors 7 ['\n\ndef solve(n, m, a, l, r):\n    # Write your code here\n    # To print results to the standard output you can use print\n    # Example: print "Hello world!"\n    pass\n\nif __name__ == \'__main__\':\n    n, m = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    l = []\n    r = []\n    for i in range(m):\n        l.append(int(input().split()[0]))\n        r.append(int(input().split()[1]))\n    solve(n, m, a, l, r)\n', '\n\ndef solve(n, m, a, l, r):\n    # Write your code here\n    # To print results to the standard output you can use print\n    # Example: print "Hello world!"\n    pass\n\nif __name__ == \'__main__\':\n    n, m = [int(i) for i in raw_input().split()]\n    a = [int(i) for i in raw_input().split()]\n    l, r = [], []\n    for i in range(m):\n        l.append(int(raw_input().split()[0]))\n        r.append(int(raw_input().split()[1]))\n    solve(n, m, a, l, r)\n', '\n\ndef solve(n, m, a, l, r):\n    # Write your code here\n    # To print results to the standard output you can use print\n    # Example: print "Hello world!"\n    pass\n\nif __name__ == \'__main__\':\n    n, m = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    l = []\n    r = []\n    for i in range(m):\n        l.append(int(input().split()[0]))\n        r.append(int(input().split()[1]))\n    solve(n, m, a, l, r)\n', "import math\n\n\ndef solve(n, m, a, l, r, primes):\n    for i in range(m):\n        print(primes[r[i]]-primes[l[i]-1])\n\ndef get_primes(n, primes):\n    for i in range(2, n):\n        prime = True\n        for j in range(i):\n            if primes[j] > math.sqrt(i):\n                break\n            if i % primes[j] == 0:\n                prime = False\n                break\n        if prime:\n            primes.append(i)\n\nif __name__ == '__main__':\n    n, m = [int(i) for i in raw_input().split()]\n    a = [int(i) for i in raw_input().split()]\n    l = []\n    r = []\n    for i in range(m):\n        l.append(int(raw_input().split()[0]))\n        r.append(int(raw_input().split()[1]))\n    primes = [2]\n    get_primes(max(a), primes)\n    solve(n, m, a, l, r, primes)\n", '\n\ndef solve(n, m, a, l, r):\n    # Write your code here\n    # To print results to the standard output you can use print\n    # Example: print "Hello world!"\n    pass\n\nif __name__ == \'__main__\':\n    n, m = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    l = []\n    r = []\n    for i in range(m):\n        l.append(int(input().split()[0]))\n        r.append(int(input().split()[1]))\n    solve(n, m, a, l, r)\n', '\n\ndef solve(n, m, a, l, r):\n    # Write your code here\n    # To print results to the standard output you can use print\n    # Example: print "Hello world!"\n    pass\n\nif __name__ == \'__main__\':\n    n, m = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    l = []\n    r = []\n    for i in range(m):\n        l.append(int(input().split()[0]))\n        r.append(int(input().split()[1]))\n    solve(n, m, a, l, r)\n', '\n\ndef solve(n, m, a, l, r):\n    # Write your code here\n    # To print results to the standard output you can use print\n    # Example: print "Hello world!"\n    pass\n\nif __name__ == \'__main__\':\n    n, m = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    l = []\n    r = []\n    for i in range(m):\n        l.append(int(input().split()[0]))\n        r.append(int(input().split()[1]))\n    solve(n, m, a, l, r)\n']
2022-04-22 10:11:09.900410 size on output set 3
