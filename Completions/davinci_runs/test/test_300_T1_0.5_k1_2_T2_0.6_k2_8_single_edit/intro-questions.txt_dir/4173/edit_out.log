2022-04-22 10:54:53.364225 num operations 1
2022-04-22 10:54:53.364242 size on input set 1
2022-04-22 10:54:53.364402 using api key kouti
2022-04-22 10:55:03.356767 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/bin/python3\n\n#Solution\nfor _ in range(int(input())):\n    n,a,b=map(int,input().split())\n    x=n//2\n    y=n%2\n    cost=x*min(a*2,b)+y*a\n    print(cost)\n"
    },
    {
      "index": 1,
      "text": "#Question\n#Chef has found a new game to play at the restaurant he is working at. There are N children (numbered 1 through N) sitting at a table. Each child has a cup of ice cream in front of them. Chef has Q queries of the following type:\n#1 i j: Chef gives ice cream i to child i and ice cream j to child j\n#2 i j: Print the number of children sitting between child i and child j inclusive, who have ice cream with a higher number written on it than the one written on the ice cream that child i has.\n#Help Chef with performing the queries.\n\n#Solution\nfor _ in range(int(input())):\n    n,a,b=map(int,input().split())\n    x=n//2\n    y=n%2\n    cost=x*min(a*2,b)+y*a\n    print(cost)\n"
    },
    {
      "index": 2,
      "text": "#Solution\nfor _ in range(int(input())):\n    n,a,b=map(int,input().split())\n    x=n//2\n    y=n%2\n    cost=x*min(a*2,b)+y*a\n    print(cost)\n"
    },
    {
      "index": 3,
      "text": "\n#Solution\nfor _ in range(int(input())):\n    n,a,b=map(int,input().split())\n    x=n//2\n    y=n%2\n    cost=x*min(a*2,b)+y*a\n    print(cost)\n"
    },
    {
      "index": 4,
      "text": "\n#Solution\nfor _ in range(int(input())):\n    n,a,b=map(int,input().split())\n    x=n//2\n    y=n%2\n    cost=x*min(a*2,b)+y*a\n    print(cost)\n"
    },
    {
      "index": 5,
      "text": "\n#Solution\nfor _ in range(int(input())):\n    n,a,b=map(int,input().split()) #input the number of days, the cost of a single toy and the cost of a single box\n    x=n//2 #calculate the number of boxes needed to buy\n    y=n%2 #calculate the number of toys needed to buy\n    cost=x*min(a*2,b)+y*a #calculate the total cost\n    print(cost) #print the total cost\n"
    },
    {
      "index": 6,
      "text": "\n# Solution\nfor _ in range(int(input())):\n    n,a,b=map(int,input().split())\n    x=n//2\n    y=n%2\n    cost=x*min(a*2,b)+y*a\n    print(cost)\n"
    },
    {
      "index": 7,
      "text": "\nfor _ in range(int(input())):\n    n,a,b=int(input().split())\n    print(n*a if n*a<b else (n//2)*b+(n%2)*a)\n"
    }
  ],
  "created": 1650624893,
  "object": "edit"
}
2022-04-22 10:55:03.357125 fix syntax errors 8 ['#!/bin/python3\n\n#Solution\nfor _ in range(int(input())):\n    n,a,b=map(int,input().split())\n    x=n//2\n    y=n%2\n    cost=x*min(a*2,b)+y*a\n    print(cost)\n', '#Question\n#Chef has found a new game to play at the restaurant he is working at. There are N children (numbered 1 through N) sitting at a table. Each child has a cup of ice cream in front of them. Chef has Q queries of the following type:\n#1 i j: Chef gives ice cream i to child i and ice cream j to child j\n#2 i j: Print the number of children sitting between child i and child j inclusive, who have ice cream with a higher number written on it than the one written on the ice cream that child i has.\n#Help Chef with performing the queries.\n\n#Solution\nfor _ in range(int(input())):\n    n,a,b=map(int,input().split())\n    x=n//2\n    y=n%2\n    cost=x*min(a*2,b)+y*a\n    print(cost)\n', '#Solution\nfor _ in range(int(input())):\n    n,a,b=map(int,input().split())\n    x=n//2\n    y=n%2\n    cost=x*min(a*2,b)+y*a\n    print(cost)\n', '\n#Solution\nfor _ in range(int(input())):\n    n,a,b=map(int,input().split())\n    x=n//2\n    y=n%2\n    cost=x*min(a*2,b)+y*a\n    print(cost)\n', '\n#Solution\nfor _ in range(int(input())):\n    n,a,b=map(int,input().split())\n    x=n//2\n    y=n%2\n    cost=x*min(a*2,b)+y*a\n    print(cost)\n', '\n#Solution\nfor _ in range(int(input())):\n    n,a,b=map(int,input().split()) #input the number of days, the cost of a single toy and the cost of a single box\n    x=n//2 #calculate the number of boxes needed to buy\n    y=n%2 #calculate the number of toys needed to buy\n    cost=x*min(a*2,b)+y*a #calculate the total cost\n    print(cost) #print the total cost\n', '\n# Solution\nfor _ in range(int(input())):\n    n,a,b=map(int,input().split())\n    x=n//2\n    y=n%2\n    cost=x*min(a*2,b)+y*a\n    print(cost)\n', '\nfor _ in range(int(input())):\n    n,a,b=int(input().split())\n    print(n*a if n*a<b else (n//2)*b+(n%2)*a)\n']
2022-04-22 10:55:03.357187 size on output set 7
2022-04-22 10:55:03.357203 num operations 1
2022-04-22 10:55:03.357212 size on input set 1
2022-04-22 10:55:03.357406 using api key sunu
2022-04-22 10:55:20.616771 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nq = int(input())\n\nfor i in range(q):\n    n, a, b = [int(x) for x in input().split()]\n    \n    min_bottles = n//2\n    min_cost = min_bottles * b + (n%2)*a\n    if a > b:\n        min_cost = min(min_cost, (n//2)*a + (n%2)*b)\n    \n    print(min_cost)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef bsearch(arr, t):\n    l = 0\n    r = len(arr) -1\n    while l <= r:\n        mid = (l+r)//2\n        if arr[mid] == t:\n            return mid\n        elif arr[mid] < t:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return -1\n\n\ndef merge(arr1, arr2):\n    i = 0\n    j = 0\n    res = []\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            res.append(arr1[i])\n            i += 1\n        else:\n            res.append(arr2[j])\n            j += 1\n    res += arr1[i:]\n    res += arr2[j:]\n    return res\n\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr)//2\n    arr = merge(merge_sort(arr[:mid]), merge_sort(arr[mid:]))\n    return arr\n\n\ndef quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    left = [x for x in arr if x < pivot]\n    right = [x for x in arr if x > pivot]\n    return quick_sort(left) + [pivot] + quick_sort(right)\n"
    },
    {
      "index": 2,
      "text": "\n\nq = int(input())\n\nfor i in range(q):\n    n, a, b = [int(x) for x in input().split()]\n\n    min_bottles = n // 2\n    min_cost = min_bottles * b + (n % 2) * a\n    if a > b:\n        min_cost = min(min_cost, (n // 2) * a + (n % 2) * b)\n\n    print(min_cost)\n"
    },
    {
      "index": 3,
      "text": "\nq = int(input())\n\nfor i in range(q):\n    n, a, b = [int(x) for x in input().split()]\n    \n    min_bottles = n//2\n    min_cost = min_bottles * b + (n%2)*a\n    if a > b:\n        min_cost = min(min_cost, (n//2)*a + (n%2)*b)\n    \n    print(min_cost)\n"
    },
    {
      "index": 4,
      "text": "\n\nq = int(input())  # number of queries\n\nfor i in range(q):\n    n, a, b = [int(x) for x in input().split()]  # n = number of bottles, a = cost of one bottle, b = cost of two bottles\n    \n    min_bottles = n//2\n    min_cost = min_bottles * b + (n%2)*a\n    if a > b:\n        min_cost = min(min_cost, (n//2)*a + (n%2)*b)\n    \n    print(min_cost)\n"
    },
    {
      "index": 5,
      "text": "\ns = input()\nprint(s)\n"
    },
    {
      "index": 6,
      "text": "\n\nq = int(input())\n\nfor i in range(q):\n    n, a, b = [int(x) for x in input().split()]\n\n    min_bottles = n//2\n    min_cost = min_bottles * b + (n % 2) * a\n    if a > b:\n        min_cost = min(min_cost, (n // 2) * a + (n % 2) * b)\n\n    print(min_cost)\n"
    },
    {
      "index": 7,
      "text": "\n\nq = int(input())\n\nfor i in range(q):\n    n, a, b = [int(x) for x in input().split()]\n    \n    min_bottles = n//2\n    min_cost = min_bottles * b + (n % 2) * a\n    if a > b:\n        min_cost = min(min_cost, (n // 2) * a + (n % 2) * b)\n    \n    print(min_cost)\n"
    }
  ],
  "created": 1650624903,
  "object": "edit"
}
2022-04-22 10:55:20.617087 fix syntax errors 8 ['\nq = int(input())\n\nfor i in range(q):\n    n, a, b = [int(x) for x in input().split()]\n    \n    min_bottles = n//2\n    min_cost = min_bottles * b + (n%2)*a\n    if a > b:\n        min_cost = min(min_cost, (n//2)*a + (n%2)*b)\n    \n    print(min_cost)\n', '\n\ndef bsearch(arr, t):\n    l = 0\n    r = len(arr) -1\n    while l <= r:\n        mid = (l+r)//2\n        if arr[mid] == t:\n            return mid\n        elif arr[mid] < t:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return -1\n\n\ndef merge(arr1, arr2):\n    i = 0\n    j = 0\n    res = []\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            res.append(arr1[i])\n            i += 1\n        else:\n            res.append(arr2[j])\n            j += 1\n    res += arr1[i:]\n    res += arr2[j:]\n    return res\n\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr)//2\n    arr = merge(merge_sort(arr[:mid]), merge_sort(arr[mid:]))\n    return arr\n\n\ndef quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    left = [x for x in arr if x < pivot]\n    right = [x for x in arr if x > pivot]\n    return quick_sort(left) + [pivot] + quick_sort(right)\n', '\n\nq = int(input())\n\nfor i in range(q):\n    n, a, b = [int(x) for x in input().split()]\n\n    min_bottles = n // 2\n    min_cost = min_bottles * b + (n % 2) * a\n    if a > b:\n        min_cost = min(min_cost, (n // 2) * a + (n % 2) * b)\n\n    print(min_cost)\n', '\nq = int(input())\n\nfor i in range(q):\n    n, a, b = [int(x) for x in input().split()]\n    \n    min_bottles = n//2\n    min_cost = min_bottles * b + (n%2)*a\n    if a > b:\n        min_cost = min(min_cost, (n//2)*a + (n%2)*b)\n    \n    print(min_cost)\n', '\n\nq = int(input())  # number of queries\n\nfor i in range(q):\n    n, a, b = [int(x) for x in input().split()]  # n = number of bottles, a = cost of one bottle, b = cost of two bottles\n    \n    min_bottles = n//2\n    min_cost = min_bottles * b + (n%2)*a\n    if a > b:\n        min_cost = min(min_cost, (n//2)*a + (n%2)*b)\n    \n    print(min_cost)\n', '\ns = input()\nprint(s)\n', '\n\nq = int(input())\n\nfor i in range(q):\n    n, a, b = [int(x) for x in input().split()]\n\n    min_bottles = n//2\n    min_cost = min_bottles * b + (n % 2) * a\n    if a > b:\n        min_cost = min(min_cost, (n // 2) * a + (n % 2) * b)\n\n    print(min_cost)\n', '\n\nq = int(input())\n\nfor i in range(q):\n    n, a, b = [int(x) for x in input().split()]\n    \n    min_bottles = n//2\n    min_cost = min_bottles * b + (n % 2) * a\n    if a > b:\n        min_cost = min(min_cost, (n // 2) * a + (n % 2) * b)\n    \n    print(min_cost)\n']
2022-04-22 10:55:20.617260 size on output set 7
