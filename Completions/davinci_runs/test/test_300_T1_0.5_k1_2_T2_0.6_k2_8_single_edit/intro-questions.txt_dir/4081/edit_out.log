2022-04-22 10:11:10.297629 num operations 1
2022-04-22 10:11:10.297650 size on input set 1
2022-04-22 10:11:10.297791 using api key kouti
2022-04-22 10:11:45.471745 fix syntax errors {
  "choices": [
    {
      "error": {
        "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
        "type": "invalid_edit"
      },
      "index": 0
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    assert len(a) == n\n\n    left = [0] * n\n    right = [0] * n\n\n    left[0] = 1\n    right[n-1] = 1\n\n    for i in range(1, n-1):\n        left[i] = left[i-1]\n        if a[i] > a[i-1]:\n            left[i] += 1\n\n    for i in range(n-2, -1, -1):\n        right[i] = right[i+1]\n        if a[i] < a[i+1]:\n            right[i] += 1\n\n    max_len = 0\n    max_len_idx = -1\n    for i in range(n):\n        if left[i] + right[i] > max_len:\n            max_len = left[i] + right[i]\n            max_len_idx = i\n\n    print(max_len)\n    seq = []\n    for i in range(max_len_idx, -1, -1):\n        if left[i] == 1:\n            break\n        seq.append('L')\n\n    for i in range(max_len_idx, n):\n        if right[i] == 1:\n            break\n        seq.append('R')\n\n    print(''.join(seq))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "from collections import defaultdict\nimport sys\n\n\nclass Graph:\n    def __init__(self):\n        self.adj = defaultdict(list)\n        self.visited = defaultdict(bool)\n        self.start = None\n        self.end = None\n\n    def add_edge(self, u, v, w):\n        self.adj[u].append((v, w))\n\n    def dfs(self, src):\n        self.visited[src] = True\n\n        if src == self.end:\n            return 0\n\n        min_dist = sys.maxsize\n        for v, w in sorted(self.adj[src], key=lambda x: x[1]):\n            if not self.visited[v]:\n                dist = self.dfs(v) + w\n                if dist < min_dist:\n                    min_dist = dist\n\n        return min_dist\n\n    def get_min_dist(self, start, end):\n        self.start = start\n        self.end = end\n        return self.dfs(start)\n\n\ndef main():\n    g = Graph()\n    n, m = [int(x) for x in input().split()]\n    for _ in range(m):\n        u, v, w = [int(x) for x in input().split()]\n        g.add_edge(u, v, w)\n\n    q = int(input())\n    for _ in range(q):\n        u, v = [int(x) for x in input().split()]\n        print(g.get_min_dist(u, v))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\nfrom collections import deque\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    assert len(a) == n\n\n    left = [0] * n\n    right = [0] * n\n\n    left[0] = 1\n    right[n-1] = 1\n\n    for i in range(1, n):\n        left[i] = left[i-1]\n        if a[i] > a[i-1]:\n            left[i] += 1\n\n    for i in range(n-2, -1, -1):\n        right[i] = right[i+1]\n        if a[i] < a[i+1]:\n            right[i] += 1\n\n    max_len = 0\n    max_len_idx = -1\n    for i in range(n):\n        if left[i] + right[i] > max_len:\n            max_len = left[i] + right[i]\n            max_len_idx = i\n\n    print(max_len)\n    seq = deque()\n    for i in range(max_len_idx - 1, -1, -1):\n        if left[i] != 1:\n            seq.appendleft('L')\n\n    for i in range(max_len_idx, n):\n        if right[i] == 1:\n            break\n        seq.append('R')\n\n    print(''.join(seq))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        a = []\n        for _ in range(n):\n            a.append(int(input()))\n\n        ans = []\n\n        for i in range(n):\n            if i == 0:\n                ans.append(a[i])\n            else:\n                ans.append(a[i] ^ ans[-1])\n\n        for i in range(n):\n            print(ans[i])\n\n        if int(input()) != -1:\n            raise Exception('Wrong Answer')\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    assert len(a) == n\n\n    left = [0] * n\n    right = [0] * n\n\n    left[0] = 1\n    right[n-1] = 1\n\n    for i in range(1, n):\n        left[i] = left[i-1]\n        if a[i] > a[i-1]:\n            left[i] += 1\n\n    for i in range(n-2, -1, -1):\n        right[i] = right[i+1]\n        if a[i] < a[i+1]:\n            right[i] += 1\n\n    max_len = 0\n    max_len_idx = -1\n    for i in range(n):\n        if left[i] + right[i] > max_len:\n            max_len = left[i] + right[i]\n            max_len_idx = i\n\n    print(max_len)\n    seq = []\n    for i in range(max_len_idx, -1, -1):  # !!!!\n        if left[i] == 1:\n            break\n        seq.append('L')\n\n    for i in range(max_len_idx, n):  # !!!\n        if right[i] == 1:\n            break\n        seq.append('R')\n\n    print(''.join(seq))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    assert len(a) == n\n\n    left = [0] * n\n    right = [0] * n\n\n    left[0] = 1\n    right[n-1] = 1\n\n    for i in range(1, n-1):\n        left[i] = left[i-1]\n        if a[i] > a[i-1]:\n            left[i] += 1\n\n    for i in range(n-2, -1, -1):\n        right[i] = right[i+1]\n        if a[i] < a[i+1]:\n            right[i] += 1\n\n    max_len = 0\n    max_len_idx = -1\n    for i in range(n):\n        if left[i] + right[i] > max_len:\n            max_len = left[i] + right[i]\n            max_len_idx = i\n\n    print(max_len)\n    seq = []\n    for i in range(max_len_idx, -1, -1): # from max_len_idx to 0\n        if left[i] == 1:\n            break\n        seq.append('L')\n\n    for i in range(max_len_idx, n):\n        if right[i] == 1:\n            break\n        seq.append('R')\n\n    print(''.join(seq))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\n\ndef main():\n    n = int(sys.stdin.readline())\n    a = [int(x) for x in sys.stdin.readline().split()]\n    assert len(a) == n\n\n    left = [0] * n\n    right = [0] * n\n\n    left[0] = 1\n    right[n-1] = 1\n\n    for i in range(1, n):\n        left[i] = left[i-1]\n        if a[i] > a[i-1]:\n            left[i] += 1\n\n    for i in range(n-2, -1, -1):\n        right[i] = right[i+1]\n        if a[i] < a[i+1]:\n            right[i] += 1\n\n    max_len = 0\n    max_len_idx = -1\n    for i in range(n):\n        if left[i] + right[i] > max_len:\n            max_len = left[i] + right[i]\n            max_len_idx = i\n\n    sys.stdout.write(str(max_len)+'\\n')\n    seq = []\n    for i in range(max_len_idx, -1, -1):\n        if left[i] == 1:\n            break\n        seq.append('L')\n\n    for i in range(max_len_idx, n):\n        if right[i] == 1:\n            break\n        seq.append('R')\n\n    sys.stdout.write(''.join(seq)+'\\n')\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650622270,
  "object": "edit"
}
2022-04-22 10:11:45.472065 NO RESULT
2022-04-22 10:11:45.472074 {
  "error": {
    "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
    "type": "invalid_edit"
  },
  "index": 0
}
2022-04-22 10:11:45.472123 fix syntax errors 7 ["\nimport sys\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    assert len(a) == n\n\n    left = [0] * n\n    right = [0] * n\n\n    left[0] = 1\n    right[n-1] = 1\n\n    for i in range(1, n-1):\n        left[i] = left[i-1]\n        if a[i] > a[i-1]:\n            left[i] += 1\n\n    for i in range(n-2, -1, -1):\n        right[i] = right[i+1]\n        if a[i] < a[i+1]:\n            right[i] += 1\n\n    max_len = 0\n    max_len_idx = -1\n    for i in range(n):\n        if left[i] + right[i] > max_len:\n            max_len = left[i] + right[i]\n            max_len_idx = i\n\n    print(max_len)\n    seq = []\n    for i in range(max_len_idx, -1, -1):\n        if left[i] == 1:\n            break\n        seq.append('L')\n\n    for i in range(max_len_idx, n):\n        if right[i] == 1:\n            break\n        seq.append('R')\n\n    print(''.join(seq))\n\nif __name__ == '__main__':\n    main()\n", "from collections import defaultdict\nimport sys\n\n\nclass Graph:\n    def __init__(self):\n        self.adj = defaultdict(list)\n        self.visited = defaultdict(bool)\n        self.start = None\n        self.end = None\n\n    def add_edge(self, u, v, w):\n        self.adj[u].append((v, w))\n\n    def dfs(self, src):\n        self.visited[src] = True\n\n        if src == self.end:\n            return 0\n\n        min_dist = sys.maxsize\n        for v, w in sorted(self.adj[src], key=lambda x: x[1]):\n            if not self.visited[v]:\n                dist = self.dfs(v) + w\n                if dist < min_dist:\n                    min_dist = dist\n\n        return min_dist\n\n    def get_min_dist(self, start, end):\n        self.start = start\n        self.end = end\n        return self.dfs(start)\n\n\ndef main():\n    g = Graph()\n    n, m = [int(x) for x in input().split()]\n    for _ in range(m):\n        u, v, w = [int(x) for x in input().split()]\n        g.add_edge(u, v, w)\n\n    q = int(input())\n    for _ in range(q):\n        u, v = [int(x) for x in input().split()]\n        print(g.get_min_dist(u, v))\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\nfrom collections import deque\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    assert len(a) == n\n\n    left = [0] * n\n    right = [0] * n\n\n    left[0] = 1\n    right[n-1] = 1\n\n    for i in range(1, n):\n        left[i] = left[i-1]\n        if a[i] > a[i-1]:\n            left[i] += 1\n\n    for i in range(n-2, -1, -1):\n        right[i] = right[i+1]\n        if a[i] < a[i+1]:\n            right[i] += 1\n\n    max_len = 0\n    max_len_idx = -1\n    for i in range(n):\n        if left[i] + right[i] > max_len:\n            max_len = left[i] + right[i]\n            max_len_idx = i\n\n    print(max_len)\n    seq = deque()\n    for i in range(max_len_idx - 1, -1, -1):\n        if left[i] != 1:\n            seq.appendleft('L')\n\n    for i in range(max_len_idx, n):\n        if right[i] == 1:\n            break\n        seq.append('R')\n\n    print(''.join(seq))\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        a = []\n        for _ in range(n):\n            a.append(int(input()))\n\n        ans = []\n\n        for i in range(n):\n            if i == 0:\n                ans.append(a[i])\n            else:\n                ans.append(a[i] ^ ans[-1])\n\n        for i in range(n):\n            print(ans[i])\n\n        if int(input()) != -1:\n            raise Exception('Wrong Answer')\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    assert len(a) == n\n\n    left = [0] * n\n    right = [0] * n\n\n    left[0] = 1\n    right[n-1] = 1\n\n    for i in range(1, n):\n        left[i] = left[i-1]\n        if a[i] > a[i-1]:\n            left[i] += 1\n\n    for i in range(n-2, -1, -1):\n        right[i] = right[i+1]\n        if a[i] < a[i+1]:\n            right[i] += 1\n\n    max_len = 0\n    max_len_idx = -1\n    for i in range(n):\n        if left[i] + right[i] > max_len:\n            max_len = left[i] + right[i]\n            max_len_idx = i\n\n    print(max_len)\n    seq = []\n    for i in range(max_len_idx, -1, -1):  # !!!!\n        if left[i] == 1:\n            break\n        seq.append('L')\n\n    for i in range(max_len_idx, n):  # !!!\n        if right[i] == 1:\n            break\n        seq.append('R')\n\n    print(''.join(seq))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    assert len(a) == n\n\n    left = [0] * n\n    right = [0] * n\n\n    left[0] = 1\n    right[n-1] = 1\n\n    for i in range(1, n-1):\n        left[i] = left[i-1]\n        if a[i] > a[i-1]:\n            left[i] += 1\n\n    for i in range(n-2, -1, -1):\n        right[i] = right[i+1]\n        if a[i] < a[i+1]:\n            right[i] += 1\n\n    max_len = 0\n    max_len_idx = -1\n    for i in range(n):\n        if left[i] + right[i] > max_len:\n            max_len = left[i] + right[i]\n            max_len_idx = i\n\n    print(max_len)\n    seq = []\n    for i in range(max_len_idx, -1, -1): # from max_len_idx to 0\n        if left[i] == 1:\n            break\n        seq.append('L')\n\n    for i in range(max_len_idx, n):\n        if right[i] == 1:\n            break\n        seq.append('R')\n\n    print(''.join(seq))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\n\ndef main():\n    n = int(sys.stdin.readline())\n    a = [int(x) for x in sys.stdin.readline().split()]\n    assert len(a) == n\n\n    left = [0] * n\n    right = [0] * n\n\n    left[0] = 1\n    right[n-1] = 1\n\n    for i in range(1, n):\n        left[i] = left[i-1]\n        if a[i] > a[i-1]:\n            left[i] += 1\n\n    for i in range(n-2, -1, -1):\n        right[i] = right[i+1]\n        if a[i] < a[i+1]:\n            right[i] += 1\n\n    max_len = 0\n    max_len_idx = -1\n    for i in range(n):\n        if left[i] + right[i] > max_len:\n            max_len = left[i] + right[i]\n            max_len_idx = i\n\n    sys.stdout.write(str(max_len)+'\\n')\n    seq = []\n    for i in range(max_len_idx, -1, -1):\n        if left[i] == 1:\n            break\n        seq.append('L')\n\n    for i in range(max_len_idx, n):\n        if right[i] == 1:\n            break\n        seq.append('R')\n\n    sys.stdout.write(''.join(seq)+'\\n')\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-22 10:11:45.472329 size on output set 7
2022-04-22 10:11:45.472343 num operations 1
2022-04-22 10:11:45.472349 size on input set 1
2022-04-22 10:11:45.472505 using api key kouti
2022-04-22 10:12:16.393804 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef problem_C2():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    d = [0] * (m + 1)\n    for i in a:\n        d[i] += 1\n    d[0] = 1\n    d[-1] = 1\n    p = [0] * (m + 1)\n    for i in range(1, m + 1):\n        p[i] = p[i - 1] + d[i]\n    ans = []\n\n    def f(x):\n        if x == 0:\n            return 0\n        if x == p[m]:\n            return m\n        l, r = 0, m\n        while l < r:\n            mid = (l + r) // 2\n            if p[mid] < x:\n                l = mid + 1\n            else:\n                r = mid\n        return l\n\n    now = 0\n    for i in range(n):\n        if a[i] > now:\n            ans.append('R')\n            now = a[i]\n        else:\n            x = f(p[now] - i)\n            if x > now:\n                ans.append('R')\n                now = x\n            else:\n                ans.append('L')\n    print(len(ans))\n    print(''.join(ans))\n\n\nproblem_C2()\n"
    },
    {
      "index": 1,
      "text": "\n\n# SOLUTION\n\n\ndef problem_C2():\n    n, a, b = map(int, input().split())\n    ans = a + b\n    if n == 1:\n        if ans == 0:\n            print(0)\n        else:\n            print(1)\n        return\n    if ans == 0:\n        print(-1)\n        return\n    if ans > n:\n        print(-1)\n        return\n    d = []\n    if a < b:\n        d.append(1)\n        d.append(n)\n    else:\n        d.append(n)\n        d.append(1)\n    a -= 1\n    b -= 1\n    if a > 0:\n        if a < b:\n            for i in range(2, a + 1):\n                d.append(i)\n        else:\n            for i in range(n - 1, n - a - 1, -1):\n                d.append(i)\n    if b > 0:\n        if a < b:\n            for i in range(n - 1, n - b - 1, -1):\n                d.append(i)\n        else:\n            for i in range(2, b + 1):\n                d.append(i)\n\n    for i in range(n - ans - 1):\n        d.append(n - i)\n\n    now = 0\n    for i in range(n):\n        if a[i] > now:\n            ans.append('R')\n            now = a[i]\n        else:\n            x = f(p[now] - i)\n            if x > now:\n                ans.append('R')\n                now = x\n            else:\n                ans.append('L')\n    print(len(ans))\n    print(''.join(ans))\n\n\nproblem_C2()\n"
    },
    {
      "index": 2,
      "text": "\n\n# SOLUTION 1\n\ndef problem_C2():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    d = [0] * (m + 1)\n    for i in a:\n        d[i] += 1\n    d[0] = 1\n    d[-1] = 1\n    p = [0] * (m + 1)\n    for i in range(1, m + 1):\n        p[i] = p[i - 1] + d[i]\n    ans = []\n\n    def f(x):\n        if x == 0:\n            return 0\n        if x == p[m]:\n            return m\n        l, r = 0, m\n        while l < r:\n            mid = (l + r) // 2\n            if p[mid] < x:\n                l = mid + 1\n            else:\n                r = mid\n        return l\n\n    now = 0\n    for i in range(n):\n        if a[i] > now:\n            ans.append('R')\n            now = a[i]\n        else:\n            x = f(p[now] - i)\n            if x > now:\n                ans.append('R')\n                now = x\n            else:\n                ans.append('L')\n    print(len(ans))\n    print(''.join(ans))\n\n\nproblem_C2()\n"
    },
    {
      "index": 3,
      "text": "\n\n# SOLUTION\n\ndef problem_C1():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    d = [0] * (m + 1)\n    for i in a:\n        d[i] += 1\n    d[0] = 1\n    d[-1] = 1\n    p = [0] * (m + 1)\n    for i in range(1, m + 1):\n        p[i] = p[i - 1] + d[i]\n    ans = []\n\n    def f(x):\n        if x == 0:\n            return 0\n        if x == p[m]:\n            return m\n        l, r = 0, m\n        while l < r:\n            mid = (l + r) // 2\n            if p[mid] < x:\n                l = mid + 1\n            else:\n                r = mid\n        return l\n\n    now = 0\n    for i in range(n):\n        if a[i] > now:\n            ans.append('R')\n            now = a[i]\n        else:\n            x = f(p[now] - i)\n            if x > now:\n                ans.append('R')\n                now = x\n            else:\n                ans.append('L')\n    print(len(ans))\n    print(''.join(ans))\n\n\nproblem_C1()\n"
    },
    {
      "index": 4,
      "text": "# SOLUTION\n\ndef problem_C2():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    d = [0] * (m + 1)\n    for i in a:\n        d[i] += 1\n    d[0] = 1\n    d[-1] = 1\n    p = [0] * (m + 1)\n    for i in range(1, m + 1):\n        p[i] = p[i - 1] + d[i]\n    ans = []\n\n    def f(x):\n        if x == 0:\n            return 0\n        if x == p[m]:\n            return m\n        l, r = 0, m\n        while l < r:\n            mid = (l + r) // 2\n            if p[mid] < x:\n                l = mid + 1\n            else:\n                r = mid\n        return l\n\n    now = 0\n    for i in range(n):\n        if a[i] > now:\n            ans.append('R')\n            now = a[i]\n        else:\n            x = f(p[now] - i)\n            if x > now:\n                ans.append('R')\n                now = x\n            else:\n                ans.append('L')\n    print(len(ans))\n    print(''.join(ans))\n\n\nproblem_C2()\n"
    },
    {
      "index": 5,
      "text": "\n\n# SOLUTIONS\n\ndef problem_C2():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    d = [0] * (m + 1)\n    for i in a:\n        d[i] += 1\n    d[0] = 1\n    d[-1] = 1\n    p = [0] * (m + 1)\n    for i in range(1, m + 1):\n        p[i] = p[i - 1] + d[i]\n    ans = []\n\n    def f(x):\n        if x == 0:\n            return 0\n        if x == p[m]:\n            return m\n        l, r = 0, m\n        while l < r:\n            mid = (l + r) // 2\n            if p[mid] < x:\n                l = mid + 1\n            else:\n                r = mid\n        return l\n\n    now = 0\n    for i in range(n):\n        if a[i] > now:\n            ans.append('R')\n            now = a[i]\n        else:\n            x = f(p[now] - i)\n            if x > now:\n                ans.append('R')\n                now = x\n            else:\n                ans.append('L')\n    print(len(ans))\n    print(''.join(ans))\n\n\nproblem_C2()\n"
    },
    {
      "index": 6,
      "text": "\n\n# SOLUTION\n\ndef problem_C():\n    for _ in range(int(input())):\n        n = int(input())\n        a = list(map(int, input().split()))\n        m = max(a)\n        d = [0] * (m + 1)\n        for i in a:\n            d[i] += 1\n        d[0] = 1\n        d[-1] = 1\n        p = [0] * (m + 1)\n        for i in range(1, m + 1):\n            p[i] = p[i - 1] + d[i]\n        ans = []\n\n        def f(x):\n            if x == 0:\n                return 0\n            if x == p[m]:\n                return m\n            l, r = 0, m\n            while l < r:\n                mid = (l + r) // 2\n                if p[mid] < x:\n                    l = mid + 1\n                else:\n                    r = mid\n            return l\n\n        now = 0\n        for i in range(n):\n            if a[i] > now:\n                ans.append('R')\n                now = a[i]\n            else:\n                x = f(p[now] - i)\n                if x > now:\n                    ans.append('R')\n                    now = x\n                else:\n                    ans.append('L')\n        print(len(ans))\n        print(''.join(ans))\n\nproblem_C()\n"
    },
    {
      "index": 7,
      "text": "\ndef problem_C2():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    d = [0] * (m + 1)\n    for i in a:\n        d[i] += 1\n    d[0] = 1\n    d[-1] = 1\n    p = [0] * (m + 1)\n    for i in range(1, m + 1):\n        p[i] = p[i - 1] + d[i]\n    ans = []\n\n    def f(x):\n        if x == 0:\n            return 0\n        if x == p[m]:\n            return m\n        l, r = 0, m\n        while l < r:\n            mid = (l + r) // 2\n            if p[mid] < x:\n                l = mid + 1\n            else:\n                r = mid\n        return l\n\n    now = 0\n    for i in range(n):\n        if a[i] > now:\n            ans.append('R')\n            now = a[i]\n        else:\n            x = f(p[now] - i)\n            if x > now:\n                ans.append('R')\n                now = x\n            else:\n                ans.append('L')\n    print(len(ans))\n    print(''.join(ans))\n"
    }
  ],
  "created": 1650622305,
  "object": "edit"
}
2022-04-22 10:12:16.394203 fix syntax errors 8 ["\n\nimport sys\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef problem_C2():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    d = [0] * (m + 1)\n    for i in a:\n        d[i] += 1\n    d[0] = 1\n    d[-1] = 1\n    p = [0] * (m + 1)\n    for i in range(1, m + 1):\n        p[i] = p[i - 1] + d[i]\n    ans = []\n\n    def f(x):\n        if x == 0:\n            return 0\n        if x == p[m]:\n            return m\n        l, r = 0, m\n        while l < r:\n            mid = (l + r) // 2\n            if p[mid] < x:\n                l = mid + 1\n            else:\n                r = mid\n        return l\n\n    now = 0\n    for i in range(n):\n        if a[i] > now:\n            ans.append('R')\n            now = a[i]\n        else:\n            x = f(p[now] - i)\n            if x > now:\n                ans.append('R')\n                now = x\n            else:\n                ans.append('L')\n    print(len(ans))\n    print(''.join(ans))\n\n\nproblem_C2()\n", "\n\n# SOLUTION\n\n\ndef problem_C2():\n    n, a, b = map(int, input().split())\n    ans = a + b\n    if n == 1:\n        if ans == 0:\n            print(0)\n        else:\n            print(1)\n        return\n    if ans == 0:\n        print(-1)\n        return\n    if ans > n:\n        print(-1)\n        return\n    d = []\n    if a < b:\n        d.append(1)\n        d.append(n)\n    else:\n        d.append(n)\n        d.append(1)\n    a -= 1\n    b -= 1\n    if a > 0:\n        if a < b:\n            for i in range(2, a + 1):\n                d.append(i)\n        else:\n            for i in range(n - 1, n - a - 1, -1):\n                d.append(i)\n    if b > 0:\n        if a < b:\n            for i in range(n - 1, n - b - 1, -1):\n                d.append(i)\n        else:\n            for i in range(2, b + 1):\n                d.append(i)\n\n    for i in range(n - ans - 1):\n        d.append(n - i)\n\n    now = 0\n    for i in range(n):\n        if a[i] > now:\n            ans.append('R')\n            now = a[i]\n        else:\n            x = f(p[now] - i)\n            if x > now:\n                ans.append('R')\n                now = x\n            else:\n                ans.append('L')\n    print(len(ans))\n    print(''.join(ans))\n\n\nproblem_C2()\n", "\n\n# SOLUTION 1\n\ndef problem_C2():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    d = [0] * (m + 1)\n    for i in a:\n        d[i] += 1\n    d[0] = 1\n    d[-1] = 1\n    p = [0] * (m + 1)\n    for i in range(1, m + 1):\n        p[i] = p[i - 1] + d[i]\n    ans = []\n\n    def f(x):\n        if x == 0:\n            return 0\n        if x == p[m]:\n            return m\n        l, r = 0, m\n        while l < r:\n            mid = (l + r) // 2\n            if p[mid] < x:\n                l = mid + 1\n            else:\n                r = mid\n        return l\n\n    now = 0\n    for i in range(n):\n        if a[i] > now:\n            ans.append('R')\n            now = a[i]\n        else:\n            x = f(p[now] - i)\n            if x > now:\n                ans.append('R')\n                now = x\n            else:\n                ans.append('L')\n    print(len(ans))\n    print(''.join(ans))\n\n\nproblem_C2()\n", "\n\n# SOLUTION\n\ndef problem_C1():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    d = [0] * (m + 1)\n    for i in a:\n        d[i] += 1\n    d[0] = 1\n    d[-1] = 1\n    p = [0] * (m + 1)\n    for i in range(1, m + 1):\n        p[i] = p[i - 1] + d[i]\n    ans = []\n\n    def f(x):\n        if x == 0:\n            return 0\n        if x == p[m]:\n            return m\n        l, r = 0, m\n        while l < r:\n            mid = (l + r) // 2\n            if p[mid] < x:\n                l = mid + 1\n            else:\n                r = mid\n        return l\n\n    now = 0\n    for i in range(n):\n        if a[i] > now:\n            ans.append('R')\n            now = a[i]\n        else:\n            x = f(p[now] - i)\n            if x > now:\n                ans.append('R')\n                now = x\n            else:\n                ans.append('L')\n    print(len(ans))\n    print(''.join(ans))\n\n\nproblem_C1()\n", "# SOLUTION\n\ndef problem_C2():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    d = [0] * (m + 1)\n    for i in a:\n        d[i] += 1\n    d[0] = 1\n    d[-1] = 1\n    p = [0] * (m + 1)\n    for i in range(1, m + 1):\n        p[i] = p[i - 1] + d[i]\n    ans = []\n\n    def f(x):\n        if x == 0:\n            return 0\n        if x == p[m]:\n            return m\n        l, r = 0, m\n        while l < r:\n            mid = (l + r) // 2\n            if p[mid] < x:\n                l = mid + 1\n            else:\n                r = mid\n        return l\n\n    now = 0\n    for i in range(n):\n        if a[i] > now:\n            ans.append('R')\n            now = a[i]\n        else:\n            x = f(p[now] - i)\n            if x > now:\n                ans.append('R')\n                now = x\n            else:\n                ans.append('L')\n    print(len(ans))\n    print(''.join(ans))\n\n\nproblem_C2()\n", "\n\n# SOLUTIONS\n\ndef problem_C2():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    d = [0] * (m + 1)\n    for i in a:\n        d[i] += 1\n    d[0] = 1\n    d[-1] = 1\n    p = [0] * (m + 1)\n    for i in range(1, m + 1):\n        p[i] = p[i - 1] + d[i]\n    ans = []\n\n    def f(x):\n        if x == 0:\n            return 0\n        if x == p[m]:\n            return m\n        l, r = 0, m\n        while l < r:\n            mid = (l + r) // 2\n            if p[mid] < x:\n                l = mid + 1\n            else:\n                r = mid\n        return l\n\n    now = 0\n    for i in range(n):\n        if a[i] > now:\n            ans.append('R')\n            now = a[i]\n        else:\n            x = f(p[now] - i)\n            if x > now:\n                ans.append('R')\n                now = x\n            else:\n                ans.append('L')\n    print(len(ans))\n    print(''.join(ans))\n\n\nproblem_C2()\n", "\n\n# SOLUTION\n\ndef problem_C():\n    for _ in range(int(input())):\n        n = int(input())\n        a = list(map(int, input().split()))\n        m = max(a)\n        d = [0] * (m + 1)\n        for i in a:\n            d[i] += 1\n        d[0] = 1\n        d[-1] = 1\n        p = [0] * (m + 1)\n        for i in range(1, m + 1):\n            p[i] = p[i - 1] + d[i]\n        ans = []\n\n        def f(x):\n            if x == 0:\n                return 0\n            if x == p[m]:\n                return m\n            l, r = 0, m\n            while l < r:\n                mid = (l + r) // 2\n                if p[mid] < x:\n                    l = mid + 1\n                else:\n                    r = mid\n            return l\n\n        now = 0\n        for i in range(n):\n            if a[i] > now:\n                ans.append('R')\n                now = a[i]\n            else:\n                x = f(p[now] - i)\n                if x > now:\n                    ans.append('R')\n                    now = x\n                else:\n                    ans.append('L')\n        print(len(ans))\n        print(''.join(ans))\n\nproblem_C()\n", "\ndef problem_C2():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    d = [0] * (m + 1)\n    for i in a:\n        d[i] += 1\n    d[0] = 1\n    d[-1] = 1\n    p = [0] * (m + 1)\n    for i in range(1, m + 1):\n        p[i] = p[i - 1] + d[i]\n    ans = []\n\n    def f(x):\n        if x == 0:\n            return 0\n        if x == p[m]:\n            return m\n        l, r = 0, m\n        while l < r:\n            mid = (l + r) // 2\n            if p[mid] < x:\n                l = mid + 1\n            else:\n                r = mid\n        return l\n\n    now = 0\n    for i in range(n):\n        if a[i] > now:\n            ans.append('R')\n            now = a[i]\n        else:\n            x = f(p[now] - i)\n            if x > now:\n                ans.append('R')\n                now = x\n            else:\n                ans.append('L')\n    print(len(ans))\n    print(''.join(ans))\n"]
2022-04-22 10:12:16.394320 size on output set 8
