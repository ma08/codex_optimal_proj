["\n\nN = int(input())\nS = input()\nK = int(input())\n\nfor c in S:\n    if c.islower():\n        print(chr(((ord(c) - ord('a') + K) % 26) + ord('a')), end='')\n    elif c.isupper():\n        print(chr(((ord(c) - ord('A') + K) % 26) + ord('A')), end='')\n    else:\n        print(c, end='')\nprint()\n", "\ns = input()\nt = input()\n\ndef get_lcs(s,t):\n    # Create a DP matrix\n    dp = [[0 for i in range(len(s)+1)] for j in range(len(t)+1)]\n    \n    # Populate the matrix\n    for i in range(1, len(t)+1):\n        for j in range(1, len(s)+1):\n            if t[i-1] == s[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[-1][-1]\n\nprint(len(s) - get_lcs(s,t))\n", "\ndef main():\n    inp = input()\n    sub = input()\n    \n    # Initialize a 2d array of size len(inp) + 1 x len(sub) + 1\n    # Each element represents the length of the longest subsequence of the sub\n    # in a substring of inp\n    dp = [[0 for _ in range(len(sub)+1)] for _ in range(len(inp)+1)]\n    \n    for i in range(1, len(inp)+1):\n        for j in range(1, len(sub)+1):\n            if inp[i-1] == sub[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    print(len(inp) - dp[-1][-1])\n    \nif __name__ == '__main__':\n    main()\n", "\ninp = input()\nsub = input()\n\nprint(len(inp) - len(sub))\n", "\ninp = input()\nsub = input()\n\n# Initialize a 2d array of size len(inp) + 1 x len(sub) + 1\n# Each element represents the length of the longest subsequence of the sub\n# in a substring of inp\ndp = [[0 for _ in range(len(sub)+1)] for _ in range(len(inp)+1)]\n\nfor i in range(1, len(inp)+1):\n    for j in range(1, len(sub)+1):\n        if inp[i-1] == sub[j-1]:\n            dp[i][j] = dp[i-1][j-1] + 1\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\nprint(len(inp) - dp[-1][-1])\n", "\ns = input()\nt = input()\n\n\ndef get_lcs(s, t):\n    # Create a DP matrix\n    dp = [[0 for i in range(len(s) + 1)] for j in range(len(t) + 1)]\n\n    # Populate the matrix\n    for i in range(1, len(t)+1):\n        for j in range(1, len(s)+1):\n            if t[i-1] == s[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[-1][-1]\n\nprint(len(s) - get_lcs(s,t))\n", "\n\ninp = input()\nsub = input()\n\n# Initialize a 2d array of size len(inp) + 1 x len(sub) + 1 Each element represents\n# the length of the longest subsequence of the sub in a substring of inp\ndp = [[0 for _ in range(len(sub) + 1)] for _ in range(len(inp) + 1)]\n\nfor i in range(1, len(inp) + 1):\n    for j in range(1, len(sub) + 1):\n        if inp[i - 1] == sub[j - 1]:\n            dp[i][j] = dp[i - 1][j - 1] + 1\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\nprint(len(inp) - dp[-1][-1])\n", "\n\ndef get_lcs(s,t):\n    # Create a DP matrix\n    dp = [[0 for i in range(len(s)+1)] for j in range(len(t)+1)]\n    \n    # Populate the matrix\n    for i in range(1, len(t)+1):\n        for j in range(1, len(s)+1):\n            if t[i-1] == s[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[-1][-1]\n\nif __name__ == '__main__':\n    s = input()\n    t = input()\n    print(len(s) - get_lcs(s,t))\n", "#!/usr/bin/env python3\n\n\nimport sys\n\n\ndef main():\n    s = sys.stdin.readline().strip()\n    t = sys.stdin.readline().strip()\n\n    print(get_lcs(s, t))\n\n\ndef get_lcs(s, t):\n    # Create a DP matrix\n    dp = [[0 for i in range(len(s)+1)] for j in range(len(t)+1)]\n    \n    # Populate the matrix\n    for i in range(1, len(t)+1):\n        for j in range(1, len(s)+1):\n            if t[i-1] == s[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[-1][-1]\n\n\nif __name__ == \"__main__\":\n    main()\n", "#!/bin/python\n\ns = input()\nt = input()\n\ndef get_lcs(s,t):\n    # Create a DP matrix\n    dp = [[0 for i in range(len(s)+1)] for j in range(len(t)+1)]\n    \n    # Populate the matrix\n    for i in range(1, len(t)+1):\n        for j in range(1, len(s)+1):\n            if t[i-1] == s[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[-1][-1]\n\nprint(len(s) - get_lcs(s,t))\n", "\n\ninp = input()\nsub = input()\n \n# Initialize a 2d array of size len(inp) + 1 x len(sub) + 1\n# Each element represents the length of the longest subsequence of the sub\n# in a substring of inp\ndp = [[0 for _ in range(len(sub)+1)] for _ in range(len(inp)+1)]\n\nfor i in range(1, len(inp)+1):\n    for j in range(1, len(sub)+1):\n        if inp[i-1] == sub[j-1]:\n            dp[i][j] = dp[i-1][j-1] + 1\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\nprint(len(inp) - dp[-1][-1])\n", "\n\nprint('Hello World')\n", "\n\ns = raw_input()\nt = raw_input()\n\ndef get_lcs(s,t):\n    # Create a DP matrix\n    dp = [[0 for i in range(len(s)+1)] for j in range(len(t)+1)]\n    \n    # Populate the matrix\n    for i in range(1, len(t)+1):\n        for j in range(1, len(s)+1):\n            if t[i-1] == s[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[-1][-1]\n\nprint(len(s) - get_lcs(s,t))\n"]