2022-04-22 09:46:29.159509 num operations 1
2022-04-22 09:46:29.159548 size on input set 1
2022-04-22 09:46:29.159729 using api key sunu
2022-04-22 09:46:43.152757 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport math\n\na, b = map(float, input().split())\n\nfor i in range(1, math.ceil(b / 0.1)+1):\n    if math.floor(i * 0.08) == a and math.ceil(i * 0.1) == b:\n        print(i)\n        exit()\nprint(-1)\n"
    },
    {
      "index": 1,
      "text": "\nimport math\n\na, b = map(int, input().split())\n\nfor i in range(1, a+1):\n    if math.floor(i * 0.08) == a and math.floor(i * 0.1) == b:\n        print(i)\n        exit()\nprint(-1)\n"
    },
    {
      "index": 2,
      "text": "\nimport math\n\na, b = map(int, input().split())\n\nfor i in range(1, a+1):\n    if math.floor(i * 0.08) == a and math.floor(i * 0.1) == b:\n        print(i)\n        exit()\nprint(-1)\n"
    },
    {
      "index": 3,
      "text": "\ndef solve(s):\n    if s[0] == 'R' and s[1] == 'R' and s[2] == 'R':\n        return 3\n    elif s[0] == 'R' and s[1] == 'R' and s[2] == 'S':\n        return 2\n    elif s[0] == 'R' and s[1] == 'S' and s[2] == 'S':\n        return 1\n    elif s[0] == 'S' and s[1] == 'S' and s[2] == 'S':\n        return 0\n    elif s[0] == 'S' and s[1] == 'S' and s[2] == 'R':\n        return 1\n    elif s[0] == 'S' and s[1] == 'R' and s[2] == 'R':\n        return 2\n    elif s[0] == 'R' and s[1] == 'S' and s[2] == 'R':\n        return 2\n    elif s[0] == 'S' and s[1] == 'R' and s[2] == 'S':\n        return 2\n    else:\n        return -1\n"
    },
    {
      "index": 4,
      "text": "#!/usr/bin/env python\n# coding: utf-8\n# Author: Olga Romanenko\n# Created: 02.12.2018\n\nimport math\n\na, b = map(int, input().split())\n\nfor i in range(1, a+1):\n    if math.floor(i * 0.08) == a and math.floor(i * 0.1) == b:\n        print(i)\n        exit()\nprint(-1)\n"
    },
    {
      "index": 5,
      "text": "import math\n\na, b = map(int, input().split())\n\nfor i in range(1, a+1):\n    if math.floor(i * 0.08) == a and math.floor(i * 0.1) == b:\n        print(i)\n        exit()\nprint(-1)\n"
    },
    {
      "index": 6,
      "text": "\nimport math\n\na, b = map(int, input().split())\n\nfor i in range(1, a+1):\n    if math.floor(i * 0.08) == a and math.floor(i * 0.1) == b:\n        print(i)\n        exit()\nprint(-1)\n"
    },
    {
      "index": 7,
      "text": "import math\n\na, b = map(int, input().split())\n\nfor i in range(1, a + 1):\n    if math.floor(i * 0.08) == a and math.floor(i * 0.1) == b:\n        print(i)\n        exit()\nprint(-1)\n"
    }
  ],
  "created": 1650620789,
  "object": "edit"
}
2022-04-22 09:46:43.153056 fix syntax errors 8 ['\n\nimport math\n\na, b = map(float, input().split())\n\nfor i in range(1, math.ceil(b / 0.1)+1):\n    if math.floor(i * 0.08) == a and math.ceil(i * 0.1) == b:\n        print(i)\n        exit()\nprint(-1)\n', '\nimport math\n\na, b = map(int, input().split())\n\nfor i in range(1, a+1):\n    if math.floor(i * 0.08) == a and math.floor(i * 0.1) == b:\n        print(i)\n        exit()\nprint(-1)\n', '\nimport math\n\na, b = map(int, input().split())\n\nfor i in range(1, a+1):\n    if math.floor(i * 0.08) == a and math.floor(i * 0.1) == b:\n        print(i)\n        exit()\nprint(-1)\n', "\ndef solve(s):\n    if s[0] == 'R' and s[1] == 'R' and s[2] == 'R':\n        return 3\n    elif s[0] == 'R' and s[1] == 'R' and s[2] == 'S':\n        return 2\n    elif s[0] == 'R' and s[1] == 'S' and s[2] == 'S':\n        return 1\n    elif s[0] == 'S' and s[1] == 'S' and s[2] == 'S':\n        return 0\n    elif s[0] == 'S' and s[1] == 'S' and s[2] == 'R':\n        return 1\n    elif s[0] == 'S' and s[1] == 'R' and s[2] == 'R':\n        return 2\n    elif s[0] == 'R' and s[1] == 'S' and s[2] == 'R':\n        return 2\n    elif s[0] == 'S' and s[1] == 'R' and s[2] == 'S':\n        return 2\n    else:\n        return -1\n", '#!/usr/bin/env python\n# coding: utf-8\n# Author: Olga Romanenko\n# Created: 02.12.2018\n\nimport math\n\na, b = map(int, input().split())\n\nfor i in range(1, a+1):\n    if math.floor(i * 0.08) == a and math.floor(i * 0.1) == b:\n        print(i)\n        exit()\nprint(-1)\n', 'import math\n\na, b = map(int, input().split())\n\nfor i in range(1, a+1):\n    if math.floor(i * 0.08) == a and math.floor(i * 0.1) == b:\n        print(i)\n        exit()\nprint(-1)\n', '\nimport math\n\na, b = map(int, input().split())\n\nfor i in range(1, a+1):\n    if math.floor(i * 0.08) == a and math.floor(i * 0.1) == b:\n        print(i)\n        exit()\nprint(-1)\n', 'import math\n\na, b = map(int, input().split())\n\nfor i in range(1, a + 1):\n    if math.floor(i * 0.08) == a and math.floor(i * 0.1) == b:\n        print(i)\n        exit()\nprint(-1)\n']
2022-04-22 09:46:43.153105 size on output set 6
2022-04-22 09:46:43.153118 num operations 1
2022-04-22 09:46:43.153124 size on input set 1
2022-04-22 09:46:43.153263 using api key derek
2022-04-22 09:46:51.867367 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport unittest\nimport math\n\ndef main(A, B):\n    if B % A == 0:\n        return B / A\n    else:\n        return -1\n\nclass TestMain(unittest.TestCase):\n    def test_main(self):\n        self.assertEqual(main(2, 2), 1)\n        self.assertEqual(main(8, 9), -1)\n\nif __name__ == '__main__':\n    unittest.main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport unittest\n\ndef main(a, b):\n    if b % a == 0:\n        return b // a\n    else:\n        return -1\n\nclass TestMain(unittest.TestCase):\n    def test_main(self):\n        self.assertEqual(main(2, 2), 1)\n        self.assertEqual(main(8, 9), -1)\n\nif __name__ == '__main__':\n    unittest.main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport unittest\nimport math\n\ndef main(A, B):\n    if B % A == 0:\n        return B // A\n    else:\n        return -1\n\nclass TestMain(unittest.TestCase):\n    def test_main(self):\n        self.assertEqual(main(2, 4), 2)\n        self.assertEqual(main(8, 9), -1)\n\nif __name__ == '__main__':\n    unittest.main()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport unittest\nimport math\n\ndef main(A, B):\n    if B % A == 0:\n        return B // A\n    else:\n        return -1\n\nclass TestMain(unittest.TestCase):\n    def test_main(self):\n        self.assertEqual(main(2, 2), 1)\n        self.assertEqual(main(8, 9), -1)\n\nif __name__ == '__main__':\n    unittest.main()\n"
    },
    {
      "index": 4,
      "text": "\n\nimport unittest\nimport math\n\ndef main(A, B):\n    if B % A == 0:\n        return B // A\n    else:\n        return -1\n\nclass TestMain(unittest.TestCase):\n    def test_main(self):\n        self.assertEqual(main(2, 4), 2)\n        self.assertEqual(main(8, 9), -1)\n\nif __name__ == '__main__':\n    unittest.main()\n"
    },
    {
      "index": 5,
      "text": "\n\nimport unittest\nimport math\n\ndef main(A, B):\n    if B % A == 0:\n        return B / A\n    else:\n        return -1\n\nclass TestMain(unittest.TestCase):\n    def test_main(self):\n        self.assertEqual(main(2, 2), 1)\n        self.assertEqual(main(8, 9), -1)\n\nif __name__ == '__main__':\n    unittest.main()\n"
    },
    {
      "index": 6,
      "text": "\n\nimport unittest\nimport math\n\ndef main(A, B):\n    if B % A != 0:\n    return B // A\n\n        return -1\n\nclass TestMain(unittest.TestCase):\n    def test_main(self):\n        self.assertEqual(main(2, 2), 25)\n        self.assertEqual(main(8, 9), -1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n"
    },
    {
      "index": 7,
      "text": "\nimport unittest\n\ndef main(A, B):\n    if B % A == 0:\n        return B // A\n    else:\n        return -1\n\nclass TestMain(unittest.TestCase):\n    def test_main(self):\n        self.assertEqual(main(2, 4), 2)\n        self.assertEqual(main(8, 9), -1)\n\nif __name__ == '__main__':\n    unittest.main()\n"
    }
  ],
  "created": 1650620803,
  "object": "edit"
}
2022-04-22 09:46:51.867665 fix syntax errors 8 ["\n\nimport unittest\nimport math\n\ndef main(A, B):\n    if B % A == 0:\n        return B / A\n    else:\n        return -1\n\nclass TestMain(unittest.TestCase):\n    def test_main(self):\n        self.assertEqual(main(2, 2), 1)\n        self.assertEqual(main(8, 9), -1)\n\nif __name__ == '__main__':\n    unittest.main()\n", "\n\nimport unittest\n\ndef main(a, b):\n    if b % a == 0:\n        return b // a\n    else:\n        return -1\n\nclass TestMain(unittest.TestCase):\n    def test_main(self):\n        self.assertEqual(main(2, 2), 1)\n        self.assertEqual(main(8, 9), -1)\n\nif __name__ == '__main__':\n    unittest.main()\n", "\n\nimport unittest\nimport math\n\ndef main(A, B):\n    if B % A == 0:\n        return B // A\n    else:\n        return -1\n\nclass TestMain(unittest.TestCase):\n    def test_main(self):\n        self.assertEqual(main(2, 4), 2)\n        self.assertEqual(main(8, 9), -1)\n\nif __name__ == '__main__':\n    unittest.main()\n", "\n\nimport unittest\nimport math\n\ndef main(A, B):\n    if B % A == 0:\n        return B // A\n    else:\n        return -1\n\nclass TestMain(unittest.TestCase):\n    def test_main(self):\n        self.assertEqual(main(2, 2), 1)\n        self.assertEqual(main(8, 9), -1)\n\nif __name__ == '__main__':\n    unittest.main()\n", "\n\nimport unittest\nimport math\n\ndef main(A, B):\n    if B % A == 0:\n        return B // A\n    else:\n        return -1\n\nclass TestMain(unittest.TestCase):\n    def test_main(self):\n        self.assertEqual(main(2, 4), 2)\n        self.assertEqual(main(8, 9), -1)\n\nif __name__ == '__main__':\n    unittest.main()\n", "\n\nimport unittest\nimport math\n\ndef main(A, B):\n    if B % A == 0:\n        return B / A\n    else:\n        return -1\n\nclass TestMain(unittest.TestCase):\n    def test_main(self):\n        self.assertEqual(main(2, 2), 1)\n        self.assertEqual(main(8, 9), -1)\n\nif __name__ == '__main__':\n    unittest.main()\n", "\n\nimport unittest\nimport math\n\ndef main(A, B):\n    if B % A != 0:\n    return B // A\n\n        return -1\n\nclass TestMain(unittest.TestCase):\n    def test_main(self):\n        self.assertEqual(main(2, 2), 25)\n        self.assertEqual(main(8, 9), -1)\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "\nimport unittest\n\ndef main(A, B):\n    if B % A == 0:\n        return B // A\n    else:\n        return -1\n\nclass TestMain(unittest.TestCase):\n    def test_main(self):\n        self.assertEqual(main(2, 4), 2)\n        self.assertEqual(main(8, 9), -1)\n\nif __name__ == '__main__':\n    unittest.main()\n"]
2022-04-22 09:46:51.867789 size on output set 6
