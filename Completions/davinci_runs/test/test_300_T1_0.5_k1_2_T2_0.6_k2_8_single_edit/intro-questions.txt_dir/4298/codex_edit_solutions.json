["\n\nimport math\nimport collections\nimport bisect\nimport sys\nimport copy\nimport fractions\nimport random\nimport string\nimport itertools\nsys.setrecursionlimit(10 ** 9)\nmod = 10 ** 9 + 7\ninf = 10 ** 19\n\nN, D = map(int, input().split())\n\ndef main():\n    if N <= D:\n        print(1)\n    else:\n        print(math.ceil((N - D) / (2 * D + 1)) + 1)\n\nmain()\n", "\n\na, b = map(int, input().split())\nprint(a + b)\n", "\n\na = int(input())\nb = int(input())\n\nprint(a+b)\nprint(a-b)\nprint(a*b)\n", "\nN, D = map(int, input().split())\nprint(N // (D * 2 + 1))\n", "\nimport math\nimport itertools\n\ndef main():\n    N, D = map(int, input().split())\n    if N <= D:\n        print(1)\n    else:\n        print(math.ceil((N - D) / (2 * D + 1)) + 1)\n\nif __name__ == \"__main__\":\n    main()\n", "\nN, D = map(int, input().split())\n\nprint(N//(D*2+1))\n", "\n\nimport math\n\ndef main():\n    N, D = map(int, input().split())\n    if N <= D:\n        print(1)\n    else:\n        print(math.ceil((N - D) / (2 * D + 1)) + 1)\n\nif __name__ == \"__main__\":\n    main()\n", "\n", "\n\nN, D = map(int, input().split())\n\nprint(N // (D * 2 + 1))\n", "\n\nN, D = map(int, input().split())\n\nprint(N//(D*2+1) + 1)\n", "\n\nN = int(input())\n\nprint(N//2)\n", "\nimport math\n\n\ndef main():\n    N, D = map(int, input().split())\n    if N <= D:\n        print(1)\n    else:\n        print(math.ceil((N - D) / (2 * D + 1)) + 1)\n\nif __name__ == \"__main__\":\n    main()\n", "import math\nimport itertools\n\ndef main():\n    N, D = map(int, input().split())\n    if N <= D:\n        print(1)\n    else:\n        print(math.ceil((N - D) / (2 * D + 1)) + 1)\n\nif __name__ == \"__main__\":\n    main()\n"]