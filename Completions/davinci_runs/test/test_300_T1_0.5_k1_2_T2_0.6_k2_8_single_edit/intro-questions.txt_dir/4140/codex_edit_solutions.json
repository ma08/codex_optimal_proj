["\n# https://atcoder.jp/contests/abc113/tasks/abc113_a\n#-----main-----\n\nS = input()\n\n# \u5165\u529b\nX, Y = map(int, input().split())\n\n# \u51e6\u7406\nans = X + Y // 2\n\n# \u51fa\u529b\nprint(ans)\n", "\n\n#-----main-----#\n\nS = input()\n\n# black, white count\nb_cnt = 0\nw_cnt = 0\n\n# count black and white\nfor i in S:\n    if i == '0':\n        b_cnt += 1\n    else:\n        w_cnt += 1\n\n# output\nprint(min(b_cnt, w_cnt))\n", "# https://atcoder.jp/contests/abc037/tasks/abc037_a\n\n#-----main-----\n\nS = input()\n\n# black, white count\nb_cnt = 0\nw_cnt = 0\n\n# count black and white\nfor i in S:\n    if i == '0':\n        b_cnt += 1\n    else:\n        w_cnt += 1\n\n# output\nprint(min(b_cnt, w_cnt))\n", "\n\nfrom sys import stdin\n\ns = stdin.readline().strip()\n\n# the number of tiles to be repainted\n# so we just need to count the number of adjacent tiles with the same color\ncount = 0\nprev = s[0]\nfor i in range(1, len(s)):\n    if prev != s[i]:\n        prev = s[i]\n    else:\n        count += 1\n\nprint(count)\n", "'''\n\nfrom sys import stdin\n\ns = stdin.readline().strip()\n\n# the number of tiles to be repainted\n# is the number of adjacent tiles with the same color\n# so we just need to count the number of adjacent tiles with the same color\n\ncount = 0\nprev = s[0]\nfor i in range(1, len(s)):\n    if prev != s[i]:\n        prev = s[i]\n    else:\n        count += 1\n\n'''\n\n\nfrom sys import stdin\n\ns = stdin.readline().strip()\n\n# the number of tiles to be repainted\n# is the number of adjacent tiles with the same color\n# so we just need to count the number of adjacent tiles with the same color\n\ncount = 0\nprev = s[0]\nfor i in range(1, len(s)):\n    if prev != s[i]:\n        prev = s[i]\n    else:\n        count += 1\n\nprint(count)\nprint(count)\n", "\n\nfrom sys import stdin\n\ns = stdin.readline().strip()\n\n# the number of tiles to be repainted\n# is the number of adjacent tiles with the same color\n# so we just need to count the number of adjacent tiles with the same color\n#\ncount = 0\nprev = s[0]\nfor i in range(1, len(s)):\n    if prev != s[i]:\n        prev = s[i]\n    else:\n        count += 1\n\nprint(count)\n", "\n#-----main-----\n\nS = input()\n\n# black, white count\nb_cnt = 0\nw_cnt = 0\n\n# count black and white\nfor i in S:\n    if i == '0':\n        b_cnt += 1\n    else:\n        w_cnt += 1\n\n# output\nprint(min(b_cnt, w_cnt))\n", "\nfrom sys import stdin\ns = stdin.readline().strip()\n\n# the number of tiles to be repainted\n# is the number of adjacent tiles with the same color\n# so we just need to count the number of adjacent tiles with the same color\ncount = 0\nprev = s[0]\nfor i in range(1, len(s)):\n    if prev != s[i]:\n        prev = s[i]\n    else:\n        count += 1\nprint(count)\n", "\n\nfrom sys import stdin, stdout\n\nn, m = map(int, stdin.readline().strip().split())\n\n# adjacency matrix\nadj = [[0] * n for _ in range(n)]\nfor i in range(m):\n    u, v = map(int, stdin.readline().strip().split())\n    u -= 1\n    v -= 1\n    adj[u][v] = 1\n    adj[v][u] = 1\n\n# calculate all the colorings\n# we use a bitmask to represent the colorings\n# for example, 11001 represents that vertices 1, 2, and 4 are colored red,\n# while vertices 3 and 5 are colored blue\n# use dp with bitmask to represent state\ndp = [[0] * (2 ** n) for _ in range(n)]\ndp[0][1] = 1\n\nMOD = 10**9 + 7\nfor i in range(1, 2 ** n):\n    for u in range(n):\n        if i & (1 << u) == 0:\n            continue\n        for v in range(n):\n            if i & (1 << v) != 0 or adj[u][v] == 0:\n                continue\n            # add number of ways to color v\n            dp[v][i | (1 << v)] += dp[u][i]\n            dp[v][i | (1 << v)] %= MOD\n\n# sum up all the possible colorings\nans = 0\nfor i in range(1, 2 ** n):\n    ans += dp[n - 1][i]\n    ans %= MOD\n\nstdout.write(str(ans))\n", "\nS = input()\nS = S.replace(\"0\", \"x\")\nS = S.replace(\"1\", \"0\")\nS = S.replace(\"x\", \"1\")\nprint(S.count(\"1\"))\n", "from sys import stdin\n\ns = stdin.readline().strip()\n\n# the number of tiles to be repainted\n# is the number of adjacent tiles with the same color\n# so we just need to count the number of adjacent tiles with the same color\n\ncount = 0\nprev = s[0]\nfor i in range(1, len(s)):\n    if prev != s[i]:\n        prev = s[i]\n    else:\n        count += 1\n\nprint(count)\n"]