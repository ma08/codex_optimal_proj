["\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline())\n    skill_list = [int(x) for x in stdin.readline().split()]\n    min_skill = min(skill_list)\n\n    # create a list of tuples of each skill and the number of students\n    # with that skill \n    skill_counts = []\n    for i in range(min_skill, max(skill_list) + 1):\n        skill_counts.append((i, skill_list.count(i)))\n\n    # sort the skill counts by the number of students with that skill\n    skill_counts.sort(key=lambda x: x[1])\n\n    # find the minimum number of students needed to form a team\n    # of each skill level\n    min_students = 0\n    for i, count in skill_counts:\n        if count <= n:\n            min_students += (n - count)\n            n = count\n        else:\n            min_students += n\n            break\n\n    print(min_students)\n\nmain()\n", "\n\nn = int(input())\na = list(map(int, input().split()))\n\ns = set()\nfor i in a:\n    s.add(i)\n\nans = 0\nfor i in s:\n    ans += n - 2\n\nprint(ans)\n", "\n\nn = int(input())\na = list(map(int, input().split()))\n\nd = {}\nfor i in a:\n    if i in d:\n        d[i] += 1\n    else:\n        d[i] = 1\n\nans = 0\nfor i in d:\n    ans += d[i] - 2\n\n\nprint(ans)\n", "\n\nn = int(input())\na = list(map(int, input().split()))\n\nd = {}\nfor i in a:\n    if i in d:\n        d[i] += 1\n    else:\n        d[i] = 1\n\nans = 0\nfor i in d:\n    ans += d[i] // 2\n\nprint(ans)\n", "# https://atcoder.jp/contests/abc133/tasks/abc133_a\n\nn = int(input())\na = list(map(int, input().split()))\n\nd = {}\nfor i in a:\n    if i in d:\n        d[i] += 1\n    else:\n        d[i] = 1\n\nans = 0\nfor i in d:\n    ans += d[i] - 2\n\n\n# https://atcoder.jp/contests/abc133/tasks/abc133_b\nn, d = map(int, input().split())\nx = [list(map(int, input().split())) for _ in range(n)]\n\nans = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        dist = 0\n        for k in range(d):\n            dist += (x[i][k] - x[j][k]) ** 2\n        if dist ** 0.5 == int(dist ** 0.5):\n            ans += 1\nprint(ans)\n\n# https://atcoder.jp/contests/abc133/tasks/abc133_c\nl, r = map(int, input().split())\n\nif r - l >= 2019:\n    print(0)\nelse:\n    ans = 10**10\n    for i in range(l, r):\n        for j in range(i+1, r+1):\n            ans = min(ans, i*j%2019)\n    print(ans)\n\n\n# https://atcoder.jp/contests/abc133/tasks/abc133_d\nn = int(input())\na = list(map(int, input().split()))\n\nb = [0] * n\nfor i in range(n):\n    if i % 2 == 0:\n        b[0] += a[i]\n    else:\n        b[0] -= a[i]\n\nfor i in range(1, n):\n    b[i] = 2 * a[i-1] - b[i-1]\n\nprint(\" \".join(map(str, b)))\n\n# https://atcoder.jp/contests/abc133/tasks/abc133_e\nfrom collections import deque\n\nn, k = map(int, input().split())\n\ng = [[] for _ in range(n)]\nfor _ in range(n-1):\n    a, b = map(int, input().split())\n    a, b = a-1, b-1\n    g[a].append(b)\n    g[b].append(a)\n\nq = deque([0])\nused = [False] * n\nused[0] = True\n\nwhile len(q) > 0:\n    x = q.popleft()\n    for i in g[x]:\n        if not used[i]:\n            used[i] = True\n            q.append(i)\n\nprint(\"Yes\" if used.count(True) == n else \"No\")\nprint(ans)\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nn = int(input())\na = list(map(int, input().split()))\n\nd = {}\nfor i in a:\n    if i in d:\n        d[i] += 1\n    else:\n        d[i] = 1\n\nans = 0\nfor i in d:\n    ans += d[i] - 2\n\nprint(ans)\n", "\n\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline())\n    skill_list = [int(x) for x in stdin.readline().split()]\n    min_skill = min(skill_list)\n\n    # create a list of tuples of each skill and the number of students\n    # with that skill\n    skill_counts = []\n    for i in range(min_skill, max(skill_list) + 1):\n        skill_counts.append((i, skill_list.count(i)))\n\n    # sort the skill counts by the number of students with that skill\n    skill_counts.sort(key=lambda x: x[1])\n\n    # find the minimum number of students needed to form a team\n    # of each skill level\n    min_students = 0\n    for i, count in skill_counts:\n        if count < n:\n            min_students += (n - count)\n            n = count\n        else:\n            min_students += n\n            break\n\n    print(min_students)\n\nmain()\n", "\nn = int(input())\na = list(map(int, input().split()))\n\nd = {}\nfor i in a:\n    if i in d:\n        d[i] += 1\n    else:\n        d[i] = 1\n\nans = 0\nfor i in d:\n    ans += d[i] - 2\n\nprint(ans)\n", "\n\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline())\n    skill_list = [int(x) for x in input().split()]\n    min_skill = min(skill_list)\n\n    # create a list of tuples of each skill and the number of students\n    # with that skill\n    skill_counts = []\n    for i in range(min_skill, max(skill_list) + 1):\n        skill_counts.append((i, skill_list.count(i)))\n\n    # sort the skill counts by the number of students with that skill\n    skill_counts.sort(key=lambda x: x[1])\n\n    # find the minimum number of students needed to form a team\n    # of each skill level\n    min_students = 0\n    for i, count in skill_counts:\n        if count <= n:\n            min_students += (n - count)\n            n = count\n        else:\n            min_students += n\n            break\n\n    print(min_students, end='')\n\nmain()\n", "\n\nimport sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    skill_list = [int(x) for x in sys.stdin.readline().split()]\n    min_skill = min(skill_list)\n\n    # create a list of tuples of each skill and the number of students\n    # with that skill\n    skill_counts = []\n    for i in range(min_skill, max(skill_list) + 1):\n        skill_counts.append((i, skill_list.count(i)))\n\n    # sort the skill counts by the number of students with that skill\n    skill_counts.sort(key=lambda x: x[1])\n\n    # find the minimum number of students needed to form a team\n    # of each skill level\n    min_students = 0\n    for i, count in skill_counts:\n        if count <= n:\n            min_students += (n - count)\n            n = count\n        else:\n            min_students += n\n            break\n\n    print(min_students)\n\nmain()\n", "\n\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline())\n    skill_list = [int(x) for x in stdin.readline().split()]\n    min_skill = min(skill_list)\n\n    # create a list of tuples of each skill and the number of students\n    # with that skill\n    skill_counts = []\n    for i in range(min_skill, max(skill_list) + 1):\n        skill_counts.append((i, skill_list.count(i)))\n\n    # sort the skill counts by the number of students with that skill\n    skill_counts.sort(key=lambda x: x[1])\n\n    # find the minimum number of students needed to form a team\n    # of each skill level\n    min_students = 0\n    for skill, count in skill_counts:\n        if count <= n:\n            min_students += (n - count)\n            n = count\n        else:\n            min_students += n\n            break\n\n    print(min_students)\n\nmain()\n", "\n\nfrom sys import stdin\n\ndef main():\n    n = int(stdin.readline())\n    skill_list = [int(x) for x in stdin.readline().split()]\n    min_skill = min(skill_list)\n\n    # create a list of tuples of each skill and the number of students with that skill\n    skill_counts = []\n    for i in range(min_skill, max(skill_list) + 1):\n        skill_counts.append((i, skill_list.count(i)))\n\n    # sort the skill counts by the number of students with that skill in ascending order\n    skill_counts.sort(key=lambda x: x[1])\n\n    # find the minimum number of students needed to form a team of each skill level\n    min_students = 0\n    for i, count in skill_counts:\n        if count <= n:\n            min_students += (n - count)\n            n = count\n        else:\n            min_students += n\n            break\n\n    print(min_students)\n\nmain()\n"]