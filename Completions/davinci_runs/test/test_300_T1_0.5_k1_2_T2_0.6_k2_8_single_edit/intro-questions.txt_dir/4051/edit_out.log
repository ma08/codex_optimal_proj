2022-04-22 09:55:16.069559 num operations 1
2022-04-22 09:55:16.069594 size on input set 1
2022-04-22 09:55:16.069772 using api key derek
2022-04-22 09:55:26.740914 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport os\n\ndef check_sorted(a):\n    return \"YES\" if sorted(a) == a else \"NO\"\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print(\"#\", end=\"\")\n            else:\n                print(\" \", end=\"\")\n        print(\"\")\n    print(a)\n    print(check_sorted(a))\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print(\"#\", end=\"\")\n            else:\n                print(\" \", end=\"\")\n        print(\"\")\n    print(\"YES\" if sorted(a) == a else \"NO\")\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "# coding: utf-8\n\n    \"\"\"\n    \u6a2a\u5e45\u3092\u53d7\u3051\u53d6\u3063\u3066\uff0c\u6a2a\u5e45\u306b\u5fdc\u3058\u3066\u5927\u304d\u3055\u3092\u5909\u3048\u305f\u4e09\u89d2\u5f62\u3092\u51fa\u529b\u3059\u308b\n    \"\"\"\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    sort_a = sorted(a)\n\n    for i in range(n):\n        print(\" \" * (sort_a[i] - 1) + \"#\" * sort_a[i])\n\nmain()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print(\"#\", end=\"\")\n            else:\n                print(\" \", end=\"\")\n        print(\"\")\n    print(a)\n    print(\"YES\" if sorted(a) == a else \"NO\") \n\nmain()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print(\"#\", end=\"\")\n            else:\n                print(\" \", end=\"\")\n        print(\"\")\n    print(\"YES\" if sorted(a) == a else \"NO\")\n\nmain()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    s = input()\n    print(s)\n\nmain()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a) + 1\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print(\"#\", end=\"\")\n            else:\n                print(\" \", end=\"\")\n        print(\"\")\n    print(\"YES\" if sorted(a) == a else \"NO\")\n\nmain()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print(\"#\", end=\"\")\n            else:\n                print(\" \", end=\"\")\n        print(\"\")\n    print(\"YES\" if sorted(a) == a else \"NO\")\n\nmain()\n"
    }
  ],
  "created": 1650621316,
  "object": "edit"
}
2022-04-22 09:55:26.741279 fix syntax errors 8 ['\nimport os\n\ndef check_sorted(a):\n    return "YES" if sorted(a) == a else "NO"\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print("#", end="")\n            else:\n                print(" ", end="")\n        print("")\n    print(a)\n    print(check_sorted(a))\n\nmain()\n', '\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print("#", end="")\n            else:\n                print(" ", end="")\n        print("")\n    print("YES" if sorted(a) == a else "NO")\n\nmain()\n', '# coding: utf-8\n\n    """\n    横幅を受け取って，横幅に応じて大きさを変えた三角形を出力する\n    """\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    sort_a = sorted(a)\n\n    for i in range(n):\n        print(" " * (sort_a[i] - 1) + "#" * sort_a[i])\n\nmain()\n', '\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print("#", end="")\n            else:\n                print(" ", end="")\n        print("")\n    print(a)\n    print("YES" if sorted(a) == a else "NO") \n\nmain()\n', '\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print("#", end="")\n            else:\n                print(" ", end="")\n        print("")\n    print("YES" if sorted(a) == a else "NO")\n\nmain()\n', '\n\ndef main():\n    s = input()\n    print(s)\n\nmain()\n', '\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a) + 1\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print("#", end="")\n            else:\n                print(" ", end="")\n        print("")\n    print("YES" if sorted(a) == a else "NO")\n\nmain()\n', '\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    for i in range(m):\n        for j in range(n):\n            if a[j] >= m - i:\n                print("#", end="")\n            else:\n                print(" ", end="")\n        print("")\n    print("YES" if sorted(a) == a else "NO")\n\nmain()\n']
2022-04-22 09:55:26.741349 size on output set 6
2022-04-22 09:55:26.741363 num operations 1
2022-04-22 09:55:26.741370 size on input set 1
2022-04-22 09:55:26.741510 using api key jaanu
2022-04-22 09:55:46.463515 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\narr = list(map(int, input().split()))\n\ndef sort_ravioli(arr):\n    sorted_array = []\n    stacks = []\n    for i in range(len(arr)):\n        stacks.append(arr[i])\n    while len(stacks) > 0:\n        tallest_stack = max(stacks)\n        tallest_stack_index = stacks.index(tallest_stack)\n        sorted_array.append(tallest_stack)\n        del stacks[tallest_stack_index]\n    return sorted_array\n\ndef check_ravioli_sort(arr):\n    if sort_ravioli(arr) == sorted(arr):\n        return \"YES\"\n    else:\n        return \"NO\"\n\nprint(check_ravioli_sort(arr))\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\narr = list(map(int, input().split()))\n\ndef sort_ravioli(arr):\n    sorted_array = []\n    stacks = []\n    for i in range(len(arr)):\n        stacks.append(arr[i])\n    while len(stacks) > 0:\n        tallest_stack = max(stacks)\n        tallest_stack_index = stacks.index(tallest_stack)\n        sorted_array.append(tallest_stack)\n        del stacks[tallest_stack_index]\n    return sorted_array\n\ndef check_ravioli_sort(arr):\n    if sort_ravioli(arr) == sorted(arr):\n        return \"YES\"\n    else:\n        return \"NO\"\n\nprint(check_ravioli_sort(arr))\n"
    },
    {
      "index": 2,
      "text": "import sys\nimport math\n\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef nth_prime(n):\n    numbers_list = [2]\n    number = 3\n    while len(numbers_list) < n:\n        if is_prime(number):\n            numbers_list.append(number)\n        number += 2\n    return numbers_list[-1]\n\nprint(nth_prime(10001))\n\n# def nth_prime(n):\n#     if n == 1:\n#         return 2\n#     if n == 2:\n#         return 3\n#     counter = 3\n#     number = 5\n#     while counter < n:\n#         number += 2\n#         if is_prime(number):\n#             counter += 1\n#     return number\n#\n# print(nth_prime(10001))\n\n# def nth_prime(n):\n#     if n == 1:\n#         return 2\n#     if n == 2:\n#         return 3\n#     counter = 2\n#     number = 3\n#     while counter < n:\n#         number += 2\n#         if is_prime(number):\n#             counter += 1\n#     return number\n#\n# print(nth_prime(10001))\n\n# def nth_prime(n):\n#     if n == 1:\n#         return 2\n#     if n == 2:\n#         return 3\n#     counter = 2\n#     number = 3\n#     while counter < n:\n#         number += 2\n#         if is_prime(number):\n#             counter += 1\n#     return number\n#\n# print(nth_prime(10001))\n"
    },
    {
      "index": 3,
      "text": "import sys\n\nn = int(input())\narr = list(map(int, input().split()))\n\ndef sort_ravioli(arr):\n    sorted_array = []\n    stacks = []\n    for i in range(len(arr)):\n        stacks.append(arr[i])\n    while len(stacks) > 0:\n        tallest_stack = max(stacks)\n        tallest_stack_index = stacks.index(tallest_stack)\n        sorted_array.append(tallest_stack)\n        del stacks[tallest_stack_index]\n    return sorted_array\n\ndef check_ravioli_sort(arr):\n    if sort_ravioli(arr) == sorted(arr):\n        return \"YES\"\n    else:\n        return \"NO\"\n\nprint(check_ravioli_sort(arr))\n"
    },
    {
      "index": 4,
      "text": "\n\nimport sys\n\ndef sort_ravioli(arr):\n    sorted_array = []\n    stacks = []\n    for i in range(len(arr)):\n        stacks.append(arr[i])\n    while len(stacks) > 0:\n        tallest_stack = max(stacks)\n        tallest_stack_index = stacks.index(tallest_stack)\n        sorted_array.append(tallest_stack)\n        del stacks[tallest_stack_index]\n    return sorted_array\n\ndef check_ravioli_sort(arr):\n    if sort_ravioli(arr) == sorted(arr):\n        return \"YES\"\n    else:\n        return \"NO\"\n\nn = int(input())\narr = list(map(int, input().split()))\n\nprint(check_ravioli_sort(arr)\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\nn = int(input())\narr = list(map(int, input().split()))\n\ndef sort_ravioli():\n    pass\n\nprint(arr)\n"
    },
    {
      "index": 6,
      "text": "\n\ndef check_ravioli_sort(arr):\n    if sort_ravioli(arr) == sorted(arr):\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef sort_ravioli(arr):\n    sorted_array = []\n    stacks = []\n    for i in range(len(arr)):\n        stacks.append(arr[i])\n    while len(stacks) > 0:\n        tallest_stack = max(stacks)\n        tallest_stack_index = stacks.index(tallest_stack)\n        sorted_array.append(tallest_stack)\n        del stacks[tallest_stack_index]\n    return sorted_array\n\nn = int(input())\narr = list(map(int, input().split()))\n\nprint(check_ravioli_sort(arr))\n"
    },
    {
      "index": 7,
      "text": "import sys\n\nn = int(input())\narr = list(map(int, input().split()))\ndef sort_ravioli(arr):\n    sorted_array = []\n    stacks = []\n    for i in range(len(arr)):\n        stacks.append(arr[i])\n    while len(stacks) > 0:\n        tallest_stack = max(stacks)\n        tallest_stack_index = stacks.index(tallest_stack)\n        sorted_array.append(tallest_stack)\n        del stacks[tallest_stack_index]\n    return sorted_array\ndef check_ravioli_sort(arr):\n    if sort_ravioli(arr) == sorted(arr):\n        return \"YES\"\n    else:\n        return \"NO\"\n\nprint(check_ravioli_sort(arr))\n"
    }
  ],
  "created": 1650621326,
  "object": "edit"
}
2022-04-22 09:55:46.463938 fix syntax errors 8 ['\n\nn = int(input())\narr = list(map(int, input().split()))\n\ndef sort_ravioli(arr):\n    sorted_array = []\n    stacks = []\n    for i in range(len(arr)):\n        stacks.append(arr[i])\n    while len(stacks) > 0:\n        tallest_stack = max(stacks)\n        tallest_stack_index = stacks.index(tallest_stack)\n        sorted_array.append(tallest_stack)\n        del stacks[tallest_stack_index]\n    return sorted_array\n\ndef check_ravioli_sort(arr):\n    if sort_ravioli(arr) == sorted(arr):\n        return "YES"\n    else:\n        return "NO"\n\nprint(check_ravioli_sort(arr))\n', '\n\nn = int(input())\narr = list(map(int, input().split()))\n\ndef sort_ravioli(arr):\n    sorted_array = []\n    stacks = []\n    for i in range(len(arr)):\n        stacks.append(arr[i])\n    while len(stacks) > 0:\n        tallest_stack = max(stacks)\n        tallest_stack_index = stacks.index(tallest_stack)\n        sorted_array.append(tallest_stack)\n        del stacks[tallest_stack_index]\n    return sorted_array\n\ndef check_ravioli_sort(arr):\n    if sort_ravioli(arr) == sorted(arr):\n        return "YES"\n    else:\n        return "NO"\n\nprint(check_ravioli_sort(arr))\n', 'import sys\nimport math\n\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef nth_prime(n):\n    numbers_list = [2]\n    number = 3\n    while len(numbers_list) < n:\n        if is_prime(number):\n            numbers_list.append(number)\n        number += 2\n    return numbers_list[-1]\n\nprint(nth_prime(10001))\n\n# def nth_prime(n):\n#     if n == 1:\n#         return 2\n#     if n == 2:\n#         return 3\n#     counter = 3\n#     number = 5\n#     while counter < n:\n#         number += 2\n#         if is_prime(number):\n#             counter += 1\n#     return number\n#\n# print(nth_prime(10001))\n\n# def nth_prime(n):\n#     if n == 1:\n#         return 2\n#     if n == 2:\n#         return 3\n#     counter = 2\n#     number = 3\n#     while counter < n:\n#         number += 2\n#         if is_prime(number):\n#             counter += 1\n#     return number\n#\n# print(nth_prime(10001))\n\n# def nth_prime(n):\n#     if n == 1:\n#         return 2\n#     if n == 2:\n#         return 3\n#     counter = 2\n#     number = 3\n#     while counter < n:\n#         number += 2\n#         if is_prime(number):\n#             counter += 1\n#     return number\n#\n# print(nth_prime(10001))\n', 'import sys\n\nn = int(input())\narr = list(map(int, input().split()))\n\ndef sort_ravioli(arr):\n    sorted_array = []\n    stacks = []\n    for i in range(len(arr)):\n        stacks.append(arr[i])\n    while len(stacks) > 0:\n        tallest_stack = max(stacks)\n        tallest_stack_index = stacks.index(tallest_stack)\n        sorted_array.append(tallest_stack)\n        del stacks[tallest_stack_index]\n    return sorted_array\n\ndef check_ravioli_sort(arr):\n    if sort_ravioli(arr) == sorted(arr):\n        return "YES"\n    else:\n        return "NO"\n\nprint(check_ravioli_sort(arr))\n', '\n\nimport sys\n\ndef sort_ravioli(arr):\n    sorted_array = []\n    stacks = []\n    for i in range(len(arr)):\n        stacks.append(arr[i])\n    while len(stacks) > 0:\n        tallest_stack = max(stacks)\n        tallest_stack_index = stacks.index(tallest_stack)\n        sorted_array.append(tallest_stack)\n        del stacks[tallest_stack_index]\n    return sorted_array\n\ndef check_ravioli_sort(arr):\n    if sort_ravioli(arr) == sorted(arr):\n        return "YES"\n    else:\n        return "NO"\n\nn = int(input())\narr = list(map(int, input().split()))\n\nprint(check_ravioli_sort(arr)\n', '\nimport sys\n\nn = int(input())\narr = list(map(int, input().split()))\n\ndef sort_ravioli():\n    pass\n\nprint(arr)\n', '\n\ndef check_ravioli_sort(arr):\n    if sort_ravioli(arr) == sorted(arr):\n        return "YES"\n    else:\n        return "NO"\n\ndef sort_ravioli(arr):\n    sorted_array = []\n    stacks = []\n    for i in range(len(arr)):\n        stacks.append(arr[i])\n    while len(stacks) > 0:\n        tallest_stack = max(stacks)\n        tallest_stack_index = stacks.index(tallest_stack)\n        sorted_array.append(tallest_stack)\n        del stacks[tallest_stack_index]\n    return sorted_array\n\nn = int(input())\narr = list(map(int, input().split()))\n\nprint(check_ravioli_sort(arr))\n', 'import sys\n\nn = int(input())\narr = list(map(int, input().split()))\ndef sort_ravioli(arr):\n    sorted_array = []\n    stacks = []\n    for i in range(len(arr)):\n        stacks.append(arr[i])\n    while len(stacks) > 0:\n        tallest_stack = max(stacks)\n        tallest_stack_index = stacks.index(tallest_stack)\n        sorted_array.append(tallest_stack)\n        del stacks[tallest_stack_index]\n    return sorted_array\ndef check_ravioli_sort(arr):\n    if sort_ravioli(arr) == sorted(arr):\n        return "YES"\n    else:\n        return "NO"\n\nprint(check_ravioli_sort(arr))\n']
2022-04-22 09:55:46.464010 size on output set 7
