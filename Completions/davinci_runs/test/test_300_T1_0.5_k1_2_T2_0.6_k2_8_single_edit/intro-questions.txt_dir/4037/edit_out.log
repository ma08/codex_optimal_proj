2022-04-22 09:47:15.431865 num operations 1
2022-04-22 09:47:15.431905 size on input set 1
2022-04-22 09:47:15.432096 using api key derek
2022-04-22 09:47:35.897530 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n, r = map(int, input().split())\n    projects = []\n    for i in range(n):\n        a, b = map(int, input().split())\n        projects.append((a, b))\n\n    projects.sort(key = lambda x: x[0])\n\n    count = 0\n    for project in projects:\n        if r >= project[0]:\n            r += project[1]\n            count += 1\n        else:\n            break\n\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "error": {
        "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
        "type": "invalid_edit"
      },
      "index": 1
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n\tn, r = map(int, input().split())\n\n\tprojects = []\n\tfor i in range(n):\n\t\ta, b = map(int, input().split())\n\t\tprojects.append((a, b))\n\n\tprojects.sort(key = lambda x: x[0])\n\n\tcount = 0\n\tfor project in projects:\n\t\tif r >= project[0]:\n\t\t\tr += project[1]\n\t\t\tcount += 1\n\t\telse:\n\t\t\tbreak\n\n\tprint(count)\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n\tn, r = map(int, input().split())\n\tprojects = []\n\tfor i in range(n):\n\t\ta, b = map(int, input().split())\n\t\tprojects.append((a, b))\n\n\tprojects.sort(key = lambda x: x[0])\n\n\tcount = 0\n\tfor project in projects:\n\t\tif project[0] <= r:\n\t\t\tr += project[1]\n\t\t\tcount += 1\n\t\telse:\n\t\t\tbreak\n\n\tprint(count)\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n\tn, r = map(int, input().split())\n\tprojects = []\n\tfor i in range(n):\n\t\tb, a = map(int, input().split())\n\t\tprojects.append((b, a))\n\n\tprojects.sort(key = lambda x: x[0])\n\n\tcount = 0\n\tfor project in projects:\n\t\tif r >= project[0]:\n\t\t\tr += project[1]\n\t\t\tcount += 1\n\t\telse:\n\t\t\tbreak\n\n\tprint(count)\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n\tn, r = map(int, input().split()) # n is the number of projects and r is the initial amount of money\n\tprojects = []\n\tfor i in range(n):\n\t\ta, b = map(int, input().split())\n\t\tprojects.append((a, b))\n\n\tprojects.sort(key = lambda x: x[0])\n\n\tcount = 0\n\tfor project in projects:\n\t\tif r >= project[0]:\n\t\t\tr += project[1]\n\t\t\tcount += 1\n\t\telse:\n\t\t\tbreak\n\n\tprint(count)\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    n, r = map(int, input().split())\n    projects = []\n    for i in range(n):\n        a, b = map(int, input().split())\n        projects.append((a, b))\n\n    projects.sort(key=lambda x: x[0])\n\n    count = 0\n    for project in projects:\n        if r >= project[0]:\n            r += project[1]\n            count += 1\n        else:\n            break\n\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "error": {
        "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
        "type": "invalid_edit"
      },
      "index": 7
    }
  ],
  "created": 1650620835,
  "object": "edit"
}
2022-04-22 09:47:35.897859 NO RESULT
2022-04-22 09:47:35.897868 {
  "error": {
    "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
    "type": "invalid_edit"
  },
  "index": 1
}
2022-04-22 09:47:35.897903 NO RESULT
2022-04-22 09:47:35.897908 {
  "error": {
    "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
    "type": "invalid_edit"
  },
  "index": 7
}
2022-04-22 09:47:35.897945 fix syntax errors 6 ["\n\ndef main():\n    n, r = map(int, input().split())\n    projects = []\n    for i in range(n):\n        a, b = map(int, input().split())\n        projects.append((a, b))\n\n    projects.sort(key = lambda x: x[0])\n\n    count = 0\n    for project in projects:\n        if r >= project[0]:\n            r += project[1]\n            count += 1\n        else:\n            break\n\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n\tn, r = map(int, input().split())\n\n\tprojects = []\n\tfor i in range(n):\n\t\ta, b = map(int, input().split())\n\t\tprojects.append((a, b))\n\n\tprojects.sort(key = lambda x: x[0])\n\n\tcount = 0\n\tfor project in projects:\n\t\tif r >= project[0]:\n\t\t\tr += project[1]\n\t\t\tcount += 1\n\t\telse:\n\t\t\tbreak\n\n\tprint(count)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\ndef main():\n\tn, r = map(int, input().split())\n\tprojects = []\n\tfor i in range(n):\n\t\ta, b = map(int, input().split())\n\t\tprojects.append((a, b))\n\n\tprojects.sort(key = lambda x: x[0])\n\n\tcount = 0\n\tfor project in projects:\n\t\tif project[0] <= r:\n\t\t\tr += project[1]\n\t\t\tcount += 1\n\t\telse:\n\t\t\tbreak\n\n\tprint(count)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\ndef main():\n\tn, r = map(int, input().split())\n\tprojects = []\n\tfor i in range(n):\n\t\tb, a = map(int, input().split())\n\t\tprojects.append((b, a))\n\n\tprojects.sort(key = lambda x: x[0])\n\n\tcount = 0\n\tfor project in projects:\n\t\tif r >= project[0]:\n\t\t\tr += project[1]\n\t\t\tcount += 1\n\t\telse:\n\t\t\tbreak\n\n\tprint(count)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\ndef main():\n\tn, r = map(int, input().split()) # n is the number of projects and r is the initial amount of money\n\tprojects = []\n\tfor i in range(n):\n\t\ta, b = map(int, input().split())\n\t\tprojects.append((a, b))\n\n\tprojects.sort(key = lambda x: x[0])\n\n\tcount = 0\n\tfor project in projects:\n\t\tif r >= project[0]:\n\t\t\tr += project[1]\n\t\t\tcount += 1\n\t\telse:\n\t\t\tbreak\n\n\tprint(count)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\ndef main():\n    n, r = map(int, input().split())\n    projects = []\n    for i in range(n):\n        a, b = map(int, input().split())\n        projects.append((a, b))\n\n    projects.sort(key=lambda x: x[0])\n\n    count = 0\n    for project in projects:\n        if r >= project[0]:\n            r += project[1]\n            count += 1\n        else:\n            break\n\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-22 09:47:35.897990 size on output set 6
2022-04-22 09:47:35.898003 num operations 1
2022-04-22 09:47:35.898008 size on input set 1
2022-04-22 09:47:35.898160 using api key soukgp
2022-04-22 09:47:43.224976 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# 1st solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ncount = 0\nfor i in range(n):\n    if projects[i][0] <= r:\n        r += projects[i][1]\n        count += 1\n    else:\n        break\n\nprint(count)\n\n# 2nd solution\n\n\"\"\"\n# \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0432 \u0441\u0442\u0438\u043b\u0435 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0438\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ndp = [0] * (r + 1)\n\nfor i in range(n):\n    for j in range(r, projects[i][0] - 1, -1):\n        if dp[j] < dp[j - projects[i][0]] + projects[i][1] and j - projects[i][0] >= 0:\n            dp[j] = dp[j - projects[i][0]] + projects[i][1]\n\nprint(dp[r])\n\"\"\"\n"
    },
    {
      "index": 1,
      "text": "\n\n\"\"\"\n\n# 1st solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ncount = 0\nfor i in range(n):\n    if projects[i][0] <= r:\n        r += projects[i][1]\n        count += 1\n    else:\n        break\n\nprint(count)\n\"\"\"\n\n# 2nd solution\n\n\n# \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0432 \u0441\u0442\u0438\u043b\u0435 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0438\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ndp = [0] * (r + 1)\n\nfor i in range(n):\n    for j in range(r, projects[i][0] - 1, -1):\n        if dp[j] < dp[j - projects[i][0]] + projects[i][1] and j - projects[i][0] >= 0:\n            dp[j] = dp[j - projects[i][0]] + projects[i][1]\n\nprint(dp[r])\n"
    },
    {
      "index": 2,
      "text": "\n\"\"\"\n# 1st solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ncount = 0\nfor i in range(n):\n    if projects[i][0] <= r:\n        r += projects[i][1]\n        count += 1\n    else:\n        break\n\nprint(count)\n\"\"\"\n# 2nd solution\n\n\n# \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0432 \u0441\u0442\u0438\u043b\u0435 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0438\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ndp = [0] * (r + 1)\n\nfor i in range(n):\n    for j in range(r, projects[i][0] - 1, -1):\n        if dp[j] < dp[j - projects[i][0]] + projects[i][1] and j - projects[i][0] >= 0:\n            dp[j] = dp[j - projects[i][0]] + projects[i][1]\n\nprint(dp[r])\n"
    },
    {
      "index": 3,
      "text": "\n\"\"\"\n# 1st solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ncount = 0\nfor i in range(n):\n    if projects[i][0] <= r:\n        r += projects[i][1]\n        count += 1\n    else:\n        break\n\nprint(count)\n\"\"\"\n# 2nd solution\n\n\"\"\"\n# \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0432 \u0441\u0442\u0438\u043b\u0435 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0438\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ndp = [0] * (r + 1)\n\nfor i in range(n):\n    for j in range(r, projects[i][0] - 1, -1):\n        if dp[j] < dp[j - projects[i][0]] + projects[i][1] and j - projects[i][0] >= 0:\n            dp[j] = dp[j - projects[i][0]] + projects[i][1]\n\nprint(dp[r])\n\"\"\"\n"
    },
    {
      "index": 4,
      "text": "\n\"\"\"\n# 1st solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ncount = 0\nfor i in range(n):\n    if projects[i][0] <= r:\n        r += projects[i][1]\n        count += 1\n    else:\n        break\n\nprint(count)\n\"\"\"\n# 2nd solution\n\n\n# \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0432 \u0441\u0442\u0438\u043b\u0435 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0438\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ndp = [0] * (r + 1)\n\nfor i in range(n):\n    for j in range(r, projects[i][0] - 1, -1):\n        if dp[j] < dp[j - projects[i][0]] + projects[i][1] and j - projects[i][0] >= 0:\n            dp[j] = dp[j - projects[i][0]] + projects[i][1]\n\nprint(dp[r])\n"
    },
    {
      "index": 5,
      "text": "\n\"\"\"\n# 1st solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ncount = 0\nfor i in range(n):\n    if projects[i][0] <= r:\n        r += projects[i][1]\n        count += 1\n    else:\n        break\n\nprint(count)\n\"\"\"\n\n# 2nd solution\n\n# \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0432 \u0441\u0442\u0438\u043b\u0435 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0438\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ndp = [0] * (r + 1)\n\nfor i in range(n):\n    for j in range(r, projects[i][0] - 1, -1):\n        if dp[j] < dp[j - projects[i][0]] + projects[i][1] and j - projects[i][0] >= 0:\n            dp[j] = dp[j - projects[i][0]] + projects[i][1]\n\nprint(dp[r])\n"
    },
    {
      "index": 6,
      "text": "\n\"\"\"\n# 1st solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ncount = 0\nfor i in range(n):\n    if projects[i][0] <= r:\n        r += projects[i][1]\n        count += 1\n    else:\n        break\n\nprint(count)\n\"\"\"\n# 2nd solution\n\n\n# \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0432 \u0441\u0442\u0438\u043b\u0435 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0438\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ndp = [0] * (r + 1)\n\nfor i in range(n):\n    for j in range(r, projects[i][0] - 1, -1):\n        if dp[j] < dp[j - projects[i][0]] + projects[i][1] and j - projects[i][0] >= 0:\n            dp[j] = dp[j - projects[i][0]] + projects[i][1]\n\nprint(dp[r])\n"
    },
    {
      "index": 7,
      "text": "\n\"\"\"\n# 1st solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ncount = 0\nfor i in range(n):\n    if projects[i][0] <= r:\n        r += projects[i][1]\n        count += 1\n    else:\n        break\n\nprint(count)\n\"\"\"\n# 2nd solution\n\"\"\"\n# \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0432 \u0441\u0442\u0438\u043b\u0435 \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0438\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ndp = [0] * (r + 1)\n\nfor i in range(n):\n    for j in range(r, projects[i][0] - 1, -1):\n        if dp[j] < dp[j - projects[i][0]] + projects[i][1] and j - projects[i][0] >= 0:\n            dp[j] = dp[j - projects[i][0]] + projects[i][1]\n\nprint(dp[r])\n\"\"\"\n"
    }
  ],
  "created": 1650620855,
  "object": "edit"
}
2022-04-22 09:47:43.225458 fix syntax errors 8 ['\n# 1st solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ncount = 0\nfor i in range(n):\n    if projects[i][0] <= r:\n        r += projects[i][1]\n        count += 1\n    else:\n        break\n\nprint(count)\n\n# 2nd solution\n\n"""\n# Решение в стиле динамики\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ndp = [0] * (r + 1)\n\nfor i in range(n):\n    for j in range(r, projects[i][0] - 1, -1):\n        if dp[j] < dp[j - projects[i][0]] + projects[i][1] and j - projects[i][0] >= 0:\n            dp[j] = dp[j - projects[i][0]] + projects[i][1]\n\nprint(dp[r])\n"""\n', '\n\n"""\n\n# 1st solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ncount = 0\nfor i in range(n):\n    if projects[i][0] <= r:\n        r += projects[i][1]\n        count += 1\n    else:\n        break\n\nprint(count)\n"""\n\n# 2nd solution\n\n\n# Решение в стиле динамики\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ndp = [0] * (r + 1)\n\nfor i in range(n):\n    for j in range(r, projects[i][0] - 1, -1):\n        if dp[j] < dp[j - projects[i][0]] + projects[i][1] and j - projects[i][0] >= 0:\n            dp[j] = dp[j - projects[i][0]] + projects[i][1]\n\nprint(dp[r])\n', '\n"""\n# 1st solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ncount = 0\nfor i in range(n):\n    if projects[i][0] <= r:\n        r += projects[i][1]\n        count += 1\n    else:\n        break\n\nprint(count)\n"""\n# 2nd solution\n\n\n# Решение в стиле динамики\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ndp = [0] * (r + 1)\n\nfor i in range(n):\n    for j in range(r, projects[i][0] - 1, -1):\n        if dp[j] < dp[j - projects[i][0]] + projects[i][1] and j - projects[i][0] >= 0:\n            dp[j] = dp[j - projects[i][0]] + projects[i][1]\n\nprint(dp[r])\n', '\n"""\n# 1st solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ncount = 0\nfor i in range(n):\n    if projects[i][0] <= r:\n        r += projects[i][1]\n        count += 1\n    else:\n        break\n\nprint(count)\n"""\n# 2nd solution\n\n"""\n# Решение в стиле динамики\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ndp = [0] * (r + 1)\n\nfor i in range(n):\n    for j in range(r, projects[i][0] - 1, -1):\n        if dp[j] < dp[j - projects[i][0]] + projects[i][1] and j - projects[i][0] >= 0:\n            dp[j] = dp[j - projects[i][0]] + projects[i][1]\n\nprint(dp[r])\n"""\n', '\n"""\n# 1st solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ncount = 0\nfor i in range(n):\n    if projects[i][0] <= r:\n        r += projects[i][1]\n        count += 1\n    else:\n        break\n\nprint(count)\n"""\n# 2nd solution\n\n\n# Решение в стиле динамики\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ndp = [0] * (r + 1)\n\nfor i in range(n):\n    for j in range(r, projects[i][0] - 1, -1):\n        if dp[j] < dp[j - projects[i][0]] + projects[i][1] and j - projects[i][0] >= 0:\n            dp[j] = dp[j - projects[i][0]] + projects[i][1]\n\nprint(dp[r])\n', '\n"""\n# 1st solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ncount = 0\nfor i in range(n):\n    if projects[i][0] <= r:\n        r += projects[i][1]\n        count += 1\n    else:\n        break\n\nprint(count)\n"""\n\n# 2nd solution\n\n# Решение в стиле динамики\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ndp = [0] * (r + 1)\n\nfor i in range(n):\n    for j in range(r, projects[i][0] - 1, -1):\n        if dp[j] < dp[j - projects[i][0]] + projects[i][1] and j - projects[i][0] >= 0:\n            dp[j] = dp[j - projects[i][0]] + projects[i][1]\n\nprint(dp[r])\n', '\n"""\n# 1st solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ncount = 0\nfor i in range(n):\n    if projects[i][0] <= r:\n        r += projects[i][1]\n        count += 1\n    else:\n        break\n\nprint(count)\n"""\n# 2nd solution\n\n\n# Решение в стиле динамики\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ndp = [0] * (r + 1)\n\nfor i in range(n):\n    for j in range(r, projects[i][0] - 1, -1):\n        if dp[j] < dp[j - projects[i][0]] + projects[i][1] and j - projects[i][0] >= 0:\n            dp[j] = dp[j - projects[i][0]] + projects[i][1]\n\nprint(dp[r])\n', '\n"""\n# 1st solution\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ncount = 0\nfor i in range(n):\n    if projects[i][0] <= r:\n        r += projects[i][1]\n        count += 1\n    else:\n        break\n\nprint(count)\n"""\n# 2nd solution\n"""\n# Решение в стиле динамики\n\nn, r = map(int, input().split())\n\nprojects = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\n\ndp = [0] * (r + 1)\n\nfor i in range(n):\n    for j in range(r, projects[i][0] - 1, -1):\n        if dp[j] < dp[j - projects[i][0]] + projects[i][1] and j - projects[i][0] >= 0:\n            dp[j] = dp[j - projects[i][0]] + projects[i][1]\n\nprint(dp[r])\n"""\n']
2022-04-22 09:47:43.225567 size on output set 6
