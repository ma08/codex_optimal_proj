2022-04-22 11:29:02.413033 num operations 1
2022-04-22 11:29:02.413056 size on input set 1
2022-04-22 11:29:02.413242 using api key jaanu
2022-04-22 11:29:36.420587 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# SOLUTION\n\n# The solution is getting the most frequent element in the array and then going through the array to find the most frequent element in the subarray\n# We will use a hashmap to store the frequency of the elements and then use a sliding window technique to find the maximum frequency element in the subarray\n\nimport sys\nimport collections\n\ndef max_freq_subarray(n,k,s):\n\n    # Make a hashmap to store the frequency of the elements\n    freq = collections.defaultdict(int)\n    \n    # Store the frequency of the elements\n    for i in s:\n        freq[i] += 1\n    \n    # Get the most frequent element in the array\n    max_freq = max(freq.values())\n    \n    # Get the element with the maximum frequency\n    max_freq_elem = [k for k,v in freq.items() if v==max_freq]\n    \n    # Get the first element that has the maximum frequency\n    max_freq_elem = max_freq_elem[0]\n    \n    # Get the first k elements of the array\n    t = s[:k]\n    \n    # Initialize the result\n    result = []\n    \n    # Initialize the maximum frequency\n    max_freq = 0\n    \n    # Initialize the maximum frequency element\n    max_freq_elem = 0\n    \n    # Initialize the window\n    window_start = 0\n    \n    # Get the frequency of the first k elements\n    for i in t:\n        freq[i] -= 1\n    \n    # Get the maximum frequency\n    max_freq = max(freq.values())\n    \n    # Get the element with the maximum frequency\n    max_freq_elem = [k for k,v in freq.items() if v==max_freq]\n    \n    # Get the first element that has the maximum frequency\n    max_freq_elem = max_freq_elem[0]\n    \n    # Store the maximum frequency element in the result\n    result.append(max_freq_elem)\n    \n    # Iterate through the array\n    for window_end in range(k,n):\n        # Remove the element from the window\n        freq[s[window_start]] += 1\n        # Increment the window start\n        window_start += 1\n        # Subtract the frequency of the element in the window\n        freq[s[window_end]] -= 1\n        # Get the maximum frequency\n        max_freq = max(freq.values())\n        # Get the element with the maximum frequency\n        max_freq_elem = [k for k,v in freq.items() if v==max_freq]\n        # Get the first element that has the maximum frequency\n        max_freq_elem = max_freq_elem[0]\n        # Store the maximum frequency element in the result\n        result.append(max_freq_elem)\n    \n    # Print the result\n    print(*result)\n    \nif __name__ == '__main__':\n    # Get the input\n    n,k = map(int, sys.stdin.readline().split())\n    s = list(map(int, sys.stdin.readline().split()))\n    max_freq_subarray(n,k,s)\n"
    },
    {
      "index": 1,
      "text": "\n\n# Solution\n\n# The solution is getting the most frequent element in the array and then going through the array to find the most frequent element in the subarray\n# We will use a hashmap to store the frequency of the elements and then use a sliding window technique to find the maximum frequency element in the subarray\n\nimport sys\nimport collections\n\n# Get the input\nn,k = map(int, sys.stdin.readline().split())\ns = list(map(int, sys.stdin.readline().split()))\n\n# Make a hashmap to store the frequency of the elements\nfreq = collections.defaultdict(int)\n\n# Store the frequency of the elements\nfor i in s:\n    freq[i] += 1\n\n# Get the most frequent element in the array\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Get the first k elements of the array\nt = s[:k]\n\n# Initialize the result\nresult = []\n\n# Initialize the maximum frequency\nmax_freq = 0\n\n# Initialize the maximum frequency element\nmax_freq_elem = 0\n\n# Initialize the window\nwindow_start = 0\n\n# Get the frequency of the first k elements\nfor i in t:\n    freq[i] -= 1\n\n# Get the maximum frequency\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Store the maximum frequency element in the result\nresult.append(max_freq_elem)\n\n# Iterate through the array\nfor window_end in range(k,n):\n    # Remove the element from the window\n    freq[s[window_start]] += 1\n    # Increment the window start\n    window_start += 1\n    # Subtract the frequency of the element in the window\n    freq[s[window_end]] -= 1\n    # Get the maximum frequency\n    max_freq = max(freq.values())\n    # Get the element with the maximum frequency\n    max_freq_elem = [k for k,v in freq.items() if v==max_freq]\n    # Get the first element that has the maximum frequency\n    max_freq_elem = max_freq_elem[0]\n    # Store the maximum frequency element in the result\n    result.append(max_freq_elem)\n\n# Print the result\nprint(*result)\n"
    },
    {
      "index": 2,
      "text": "\n\n# SOLUTION\n\n# The solution is getting the most frequent element in the array and then going through the array to find the most frequent element in the sub array\n# We will use a hashmap to store the frequency of the elements and then use a sliding window technique to find the maximum frequency element in the sub array\n\nimport sys\nimport collections\n\n# Get the input\nn,k = map(int, sys.stdin.readline().split())\ns = list(map(int, sys.stdin.readline().split()))\n\n# Make a hashmap to store the frequency of the elements\nfreq = collections.defaultdict(int)\n\n# Store the frequency of the elements\nfor i in s:\n    freq[i] += 1\n\n# Get the most frequent element in the array\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Get the first k elements of the array\nt = s[:k]\n\n# Initialize the result\nresult = []\n\n# Initialize the maximum frequency\nmax_freq = 0\n\n# Initialize the maximum frequency element\nmax_freq_elem = 0\n\n# Initialize the window\nwindow_start = 0\n\n# Get the frequency of the first k elements\nfor i in t:\n    freq[i] -= 1\n\n# Get the maximum frequency\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Store the maximum frequency element in the result\nresult.append(max_freq_elem)\n\n# Iterate through the array\nfor window_end in range(k,n):\n    # Remove the element from the window\n    freq[s[window_start]] += 1\n    # Increment the window start\n    window_start += 1\n    # Subtract the frequency of the element in the window\n    freq[s[window_end]] -= 1\n    # Get the maximum frequency\n    max_freq = max(freq.values())\n    # Get the element with the maximum frequency\n    max_freq_elem = [k for k,v in freq.items() if v==max_freq]\n    # Get the first element that has the maximum frequency\n    max_freq_elem = max_freq_elem[0]\n    # Store the maximum frequency element in the result\n    result.append(max_freq_elem)\n\n# Print the result\nprint(*result)\n"
    },
    {
      "index": 3,
      "text": "\n\n# SOLUTION\n\n# The solution is getting the most frequent element in the array and then going\n# through the array to find the most frequent element in the subarray.\n# We will use a hashmap to store the frequency of the elements and then use a\n# sliding window technique to find the maximum frequency element in the subarray\n\nimport sys\nimport collections\n\n# Get the input\nn,k = map(int, sys.stdin.readline().split())\ns = list(map(int, sys.stdin.readline().split()))\n\n# Make a hashmap to store the frequency of the elements\nfreq = collections.defaultdict(int)\n\n# Store the frequency of the elements\nfor i in s:\n    freq[i] += 1\n\n# Get the most frequent element in the array\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k, v in freq.items() if v == max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Get the first k elements of the array\nt = s[:k]\n\n# Initialize the result\nresult = []\n\n# Initialize the maximum frequency\nmax_freq = 0\n\n# Initialize the maximum frequency element\nmax_freq_elem = 0\n\n# Initialize the window\nwindow_start = 0\n\n# Get the frequency of the first k elements\nfor i in t:\n    freq[i] -= 1\n\n# Get the maximum frequency\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k, v in freq.items() if v == max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Store the maximum frequency element in the result\nresult.append(max_freq_elem)\n\n# Iterate through the array\nfor window_end in range(k, n):\n    # Remove the element from the window\n    freq[s[window_start]] += 1\n    # Increment the window start\n    window_start += 1\n    # Subtract the frequency of the element in the window\n    freq[s[window_end]] -= 1\n    # Get the maximum frequency\n    max_freq = max(freq.values())\n    # Get the element with the maximum frequency\n    max_freq_elem = [k for k,v in freq.items() if v==max_freq]\n    # Get the first element that has the maximum frequency\n    max_freq_elem = max_freq_elem[0]\n    # Store the maximum frequency element in the result\n    result.append(max_freq_elem)\n\n# Print the result\nprint(*result)\n"
    },
    {
      "index": 4,
      "text": "\n\n# SOLUTION\n\n# The solution is getting the most frequent element in the array and then going through the array to find the most frequent element in the subarray\n# We will use a hashmap to store the frequency of the elements and then use a sliding window technique to find the most frequent element in the subarray\n\nimport sys\nimport collections\n\n# Get the input\nn,k = map(int, sys.stdin.readline().split())\ns = list(map(int, sys.stdin.readline().split()))\n\n# Make a hashmap to store the frequency of the elements\nfreq = collections.defaultdict(int)\n\n# Store the frequency of the elements\nfor i in s:\n    freq[i] += 1\n\n# Get the most frequent element in the array\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Initialize the result\nresult = []\n\n# Initialize the maximum frequency\nmax_freq = 0\n\n# Initialize the maximum frequency element\nmax_freq_elem = 0\n\n# Initialize the window\nwindow_start = 0\n\n# Get the frequency of the first k elements of the array\nfor i in s[:k]:\n    freq[i] -= 1\n\n# Get the maximum frequency\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Store the maximum frequency element in the result\nresult.append(max_freq_elem)\n\n# Iterate through the array\nfor window_end in range(k,n):\n    # Remove the element from the window\n    freq[s[window_start]] += 1\n    # Increment the window start\n    window_start += 1\n    # Subtract the frequency of the element in the window\n    freq[s[window_end]] -= 1\n    # Get the maximum frequency\n    max_freq = max(freq.values())\n    # Get the element with the maximum frequency\n    max_freq_elem = [k for k,v in freq.items() if v==max_freq]\n    # Get the first element that has the maximum frequency\n    max_freq_elem = max_freq_elem[0]\n    # Store the maximum frequency element in the result\n    result.append(max_freq_elem)\n\n# Print the result\nprint(*result)\n"
    },
    {
      "index": 5,
      "text": "\n\n# SOLUTION\n\n# The solution is getting the most frequent element in the array and then going through the array to find the most frequent element in the subarray.\n# We will use a hashmap to store the frequency of the elements and then use a sliding window technique to find the maximum frequency element in the subarray.\n\nimport sys\nimport collections\n\n# Get the input\nn,k = map(int, sys.stdin.readline().split())\ns = list(map(int, sys.stdin.readline().split()))\n\n# Make a hashmap to store the frequency of the elements\nfreq = collections.defaultdict(int)\n\n# Store the frequency of the elements\nfor i in s:\n    freq[i] += 1\n\n# Get the most frequent element in the array\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Get the first k elements of the array\nt = s[:k]\n\n# Initialize the result\nresult = []\n\n# Initialize the maximum frequency\nmax_freq = 0\n\n# Initialize the maximum frequency element\nmax_freq_elem = 0\n\n# Initialize the window\nwindow_start = 0\n\n# Get the frequency of the first k elements\nfor i in t:\n    freq[i] -= 1\n\n# Get the maximum frequency\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Store the maximum frequency element in the result\nresult.append(max_freq_elem)\n\n# Iterate through the array\nfor window_end in range(k,n):\n    # Remove the element from the window\n    freq[s[window_start]] += 1\n    # Increment the window start\n    window_start += 1\n    # Subtract the frequency of the element in the window\n    freq[s[window_end]] -= 1\n    # Get the maximum frequency\n    max_freq = max(freq.values())\n    # Get the element with the maximum frequency\n    max_freq_elem = [k for k,v in freq.items() if v==max_freq]\n    # Get the first element that has the maximum frequency\n    max_freq_elem = max_freq_elem[0]\n    # Store the maximum frequency element in the result\n    result.append(max_freq_elem)\n\n# Print the result\nprint(*result)\n"
    },
    {
      "index": 6,
      "text": "\n\n# SOLUTION\n\n# The solution is getting the most frequent element in the array \n# and then going through the array to find the most frequent element in the subarray\n# We will use a hashmap to store the frequency of the elements \n# and then use a sliding window technique to find the maximum frequency element in the subarray\n\nimport sys\nimport collections\n\n# Get the input\nn,k = map(int, sys.stdin.readline().split())\ns = list(map(int, sys.stdin.readline().split()))\n\n# Make a hashmap to store the frequency of the elements\nfreq = collections.defaultdict(int)\n\n# Store the frequency of the elements\nfor i in s:\n    freq[i] += 1\n\n# Get the most frequent element in the array\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Get the first k elements of the array\nt = s[:k]\n\n# Initialize the result\nresult = []\n\n# Initialize the maximum frequency\nmax_freq = 0\n\n# Initialize the maximum frequency element\nmax_freq_elem = 0\n\n# Initialize the window\nwindow_start = 0\n\n# Get the frequency of the first k elements\nfor i in t:\n    freq[i] -= 1\n\n# Get the maximum frequency\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Store the maximum frequency element in the result\nresult.append(max_freq_elem)\n\n# Iterate through the array\nfor window_end in range(k,n):\n    # Remove the element from the window\n    freq[s[window_start]] += 1\n    # Increment the window start\n    window_start += 1\n    # Subtract the frequency of the element in the window\n    freq[s[window_end]] -= 1\n    # Get the maximum frequency\n    max_freq = max(freq.values())\n    # Get the element with the maximum frequency\n    max_freq_elem = [k for k,v in freq.items() if v==max_freq]\n    # Get the first element that has the maximum frequency\n    max_freq_elem = max_freq_elem[0]\n    # Store the maximum frequency element in the result\n    result.append(max_freq_elem)\n\n# Print the result\nprint(*result)\n"
    },
    {
      "index": 7,
      "text": "\n\n# SOLUTION\n\n# The solution is getting the most frequent element in the array and then going through the array to find the most frequent element in the subarray.\n# We will use a hashmap to store the frequency of the elements and then use a sliding window technique to find the maximum frequency element in the subarray\n\nimport sys\nimport collections\n\n# Get the input\nn,k = map(int, sys.stdin.readline().split())\ns = list(map(int, sys.stdin.readline().split()))\n\n# Make a hashmap to store the frequency of the elements\nfreq = collections.defaultdict(int)\n\n# Store the frequency of the elements\nfor i in s:\n    freq[i] += 1\n\n# Get the most frequent element in the array\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Get the first k elements of the array\nt = s[:k]\n\n# Initialize the result\nresult = []\n\n# Initialize the maximum frequency\nmax_freq = 0\n\n# Initialize the maximum frequency element\nmax_freq_elem = 0\n\n# Initialize the window\nwindow_start = 0\n\n# Get the frequency of the first k elements\nfor i in t:\n    freq[i] -= 1\n\n# Get the maximum frequency\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Store the maximum frequency element in the result\nresult.append(max_freq_elem)\n\n# Iterate through the array\nfor window_end in range(k,n):\n    # Remove the element from the window\n    freq[s[window_start]] += 1\n    # Increment the window start\n    window_start += 1\n    # Subtract the frequency of the element in the window\n    freq[s[window_end]] -= 1\n    # Get the maximum frequency\n    max_freq = max(freq.values())\n    # Get the element with the maximum frequency\n    max_freq_elem = [k for k,v in freq.items() if v==max_freq]\n    # Get the first element that has the maximum frequency\n    max_freq_elem = max_freq_elem[0]\n    # Store the maximum frequency element in the result\n    result.append(max_freq_elem)\n\n# Print the result\nprint(*result)\n"
    }
  ],
  "created": 1650626942,
  "object": "edit"
}
2022-04-22 11:29:36.421110 fix syntax errors 8 ["\n\n# SOLUTION\n\n# The solution is getting the most frequent element in the array and then going through the array to find the most frequent element in the subarray\n# We will use a hashmap to store the frequency of the elements and then use a sliding window technique to find the maximum frequency element in the subarray\n\nimport sys\nimport collections\n\ndef max_freq_subarray(n,k,s):\n\n    # Make a hashmap to store the frequency of the elements\n    freq = collections.defaultdict(int)\n    \n    # Store the frequency of the elements\n    for i in s:\n        freq[i] += 1\n    \n    # Get the most frequent element in the array\n    max_freq = max(freq.values())\n    \n    # Get the element with the maximum frequency\n    max_freq_elem = [k for k,v in freq.items() if v==max_freq]\n    \n    # Get the first element that has the maximum frequency\n    max_freq_elem = max_freq_elem[0]\n    \n    # Get the first k elements of the array\n    t = s[:k]\n    \n    # Initialize the result\n    result = []\n    \n    # Initialize the maximum frequency\n    max_freq = 0\n    \n    # Initialize the maximum frequency element\n    max_freq_elem = 0\n    \n    # Initialize the window\n    window_start = 0\n    \n    # Get the frequency of the first k elements\n    for i in t:\n        freq[i] -= 1\n    \n    # Get the maximum frequency\n    max_freq = max(freq.values())\n    \n    # Get the element with the maximum frequency\n    max_freq_elem = [k for k,v in freq.items() if v==max_freq]\n    \n    # Get the first element that has the maximum frequency\n    max_freq_elem = max_freq_elem[0]\n    \n    # Store the maximum frequency element in the result\n    result.append(max_freq_elem)\n    \n    # Iterate through the array\n    for window_end in range(k,n):\n        # Remove the element from the window\n        freq[s[window_start]] += 1\n        # Increment the window start\n        window_start += 1\n        # Subtract the frequency of the element in the window\n        freq[s[window_end]] -= 1\n        # Get the maximum frequency\n        max_freq = max(freq.values())\n        # Get the element with the maximum frequency\n        max_freq_elem = [k for k,v in freq.items() if v==max_freq]\n        # Get the first element that has the maximum frequency\n        max_freq_elem = max_freq_elem[0]\n        # Store the maximum frequency element in the result\n        result.append(max_freq_elem)\n    \n    # Print the result\n    print(*result)\n    \nif __name__ == '__main__':\n    # Get the input\n    n,k = map(int, sys.stdin.readline().split())\n    s = list(map(int, sys.stdin.readline().split()))\n    max_freq_subarray(n,k,s)\n", '\n\n# Solution\n\n# The solution is getting the most frequent element in the array and then going through the array to find the most frequent element in the subarray\n# We will use a hashmap to store the frequency of the elements and then use a sliding window technique to find the maximum frequency element in the subarray\n\nimport sys\nimport collections\n\n# Get the input\nn,k = map(int, sys.stdin.readline().split())\ns = list(map(int, sys.stdin.readline().split()))\n\n# Make a hashmap to store the frequency of the elements\nfreq = collections.defaultdict(int)\n\n# Store the frequency of the elements\nfor i in s:\n    freq[i] += 1\n\n# Get the most frequent element in the array\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Get the first k elements of the array\nt = s[:k]\n\n# Initialize the result\nresult = []\n\n# Initialize the maximum frequency\nmax_freq = 0\n\n# Initialize the maximum frequency element\nmax_freq_elem = 0\n\n# Initialize the window\nwindow_start = 0\n\n# Get the frequency of the first k elements\nfor i in t:\n    freq[i] -= 1\n\n# Get the maximum frequency\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Store the maximum frequency element in the result\nresult.append(max_freq_elem)\n\n# Iterate through the array\nfor window_end in range(k,n):\n    # Remove the element from the window\n    freq[s[window_start]] += 1\n    # Increment the window start\n    window_start += 1\n    # Subtract the frequency of the element in the window\n    freq[s[window_end]] -= 1\n    # Get the maximum frequency\n    max_freq = max(freq.values())\n    # Get the element with the maximum frequency\n    max_freq_elem = [k for k,v in freq.items() if v==max_freq]\n    # Get the first element that has the maximum frequency\n    max_freq_elem = max_freq_elem[0]\n    # Store the maximum frequency element in the result\n    result.append(max_freq_elem)\n\n# Print the result\nprint(*result)\n', '\n\n# SOLUTION\n\n# The solution is getting the most frequent element in the array and then going through the array to find the most frequent element in the sub array\n# We will use a hashmap to store the frequency of the elements and then use a sliding window technique to find the maximum frequency element in the sub array\n\nimport sys\nimport collections\n\n# Get the input\nn,k = map(int, sys.stdin.readline().split())\ns = list(map(int, sys.stdin.readline().split()))\n\n# Make a hashmap to store the frequency of the elements\nfreq = collections.defaultdict(int)\n\n# Store the frequency of the elements\nfor i in s:\n    freq[i] += 1\n\n# Get the most frequent element in the array\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Get the first k elements of the array\nt = s[:k]\n\n# Initialize the result\nresult = []\n\n# Initialize the maximum frequency\nmax_freq = 0\n\n# Initialize the maximum frequency element\nmax_freq_elem = 0\n\n# Initialize the window\nwindow_start = 0\n\n# Get the frequency of the first k elements\nfor i in t:\n    freq[i] -= 1\n\n# Get the maximum frequency\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Store the maximum frequency element in the result\nresult.append(max_freq_elem)\n\n# Iterate through the array\nfor window_end in range(k,n):\n    # Remove the element from the window\n    freq[s[window_start]] += 1\n    # Increment the window start\n    window_start += 1\n    # Subtract the frequency of the element in the window\n    freq[s[window_end]] -= 1\n    # Get the maximum frequency\n    max_freq = max(freq.values())\n    # Get the element with the maximum frequency\n    max_freq_elem = [k for k,v in freq.items() if v==max_freq]\n    # Get the first element that has the maximum frequency\n    max_freq_elem = max_freq_elem[0]\n    # Store the maximum frequency element in the result\n    result.append(max_freq_elem)\n\n# Print the result\nprint(*result)\n', '\n\n# SOLUTION\n\n# The solution is getting the most frequent element in the array and then going\n# through the array to find the most frequent element in the subarray.\n# We will use a hashmap to store the frequency of the elements and then use a\n# sliding window technique to find the maximum frequency element in the subarray\n\nimport sys\nimport collections\n\n# Get the input\nn,k = map(int, sys.stdin.readline().split())\ns = list(map(int, sys.stdin.readline().split()))\n\n# Make a hashmap to store the frequency of the elements\nfreq = collections.defaultdict(int)\n\n# Store the frequency of the elements\nfor i in s:\n    freq[i] += 1\n\n# Get the most frequent element in the array\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k, v in freq.items() if v == max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Get the first k elements of the array\nt = s[:k]\n\n# Initialize the result\nresult = []\n\n# Initialize the maximum frequency\nmax_freq = 0\n\n# Initialize the maximum frequency element\nmax_freq_elem = 0\n\n# Initialize the window\nwindow_start = 0\n\n# Get the frequency of the first k elements\nfor i in t:\n    freq[i] -= 1\n\n# Get the maximum frequency\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k, v in freq.items() if v == max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Store the maximum frequency element in the result\nresult.append(max_freq_elem)\n\n# Iterate through the array\nfor window_end in range(k, n):\n    # Remove the element from the window\n    freq[s[window_start]] += 1\n    # Increment the window start\n    window_start += 1\n    # Subtract the frequency of the element in the window\n    freq[s[window_end]] -= 1\n    # Get the maximum frequency\n    max_freq = max(freq.values())\n    # Get the element with the maximum frequency\n    max_freq_elem = [k for k,v in freq.items() if v==max_freq]\n    # Get the first element that has the maximum frequency\n    max_freq_elem = max_freq_elem[0]\n    # Store the maximum frequency element in the result\n    result.append(max_freq_elem)\n\n# Print the result\nprint(*result)\n', '\n\n# SOLUTION\n\n# The solution is getting the most frequent element in the array and then going through the array to find the most frequent element in the subarray\n# We will use a hashmap to store the frequency of the elements and then use a sliding window technique to find the most frequent element in the subarray\n\nimport sys\nimport collections\n\n# Get the input\nn,k = map(int, sys.stdin.readline().split())\ns = list(map(int, sys.stdin.readline().split()))\n\n# Make a hashmap to store the frequency of the elements\nfreq = collections.defaultdict(int)\n\n# Store the frequency of the elements\nfor i in s:\n    freq[i] += 1\n\n# Get the most frequent element in the array\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Initialize the result\nresult = []\n\n# Initialize the maximum frequency\nmax_freq = 0\n\n# Initialize the maximum frequency element\nmax_freq_elem = 0\n\n# Initialize the window\nwindow_start = 0\n\n# Get the frequency of the first k elements of the array\nfor i in s[:k]:\n    freq[i] -= 1\n\n# Get the maximum frequency\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Store the maximum frequency element in the result\nresult.append(max_freq_elem)\n\n# Iterate through the array\nfor window_end in range(k,n):\n    # Remove the element from the window\n    freq[s[window_start]] += 1\n    # Increment the window start\n    window_start += 1\n    # Subtract the frequency of the element in the window\n    freq[s[window_end]] -= 1\n    # Get the maximum frequency\n    max_freq = max(freq.values())\n    # Get the element with the maximum frequency\n    max_freq_elem = [k for k,v in freq.items() if v==max_freq]\n    # Get the first element that has the maximum frequency\n    max_freq_elem = max_freq_elem[0]\n    # Store the maximum frequency element in the result\n    result.append(max_freq_elem)\n\n# Print the result\nprint(*result)\n', '\n\n# SOLUTION\n\n# The solution is getting the most frequent element in the array and then going through the array to find the most frequent element in the subarray.\n# We will use a hashmap to store the frequency of the elements and then use a sliding window technique to find the maximum frequency element in the subarray.\n\nimport sys\nimport collections\n\n# Get the input\nn,k = map(int, sys.stdin.readline().split())\ns = list(map(int, sys.stdin.readline().split()))\n\n# Make a hashmap to store the frequency of the elements\nfreq = collections.defaultdict(int)\n\n# Store the frequency of the elements\nfor i in s:\n    freq[i] += 1\n\n# Get the most frequent element in the array\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Get the first k elements of the array\nt = s[:k]\n\n# Initialize the result\nresult = []\n\n# Initialize the maximum frequency\nmax_freq = 0\n\n# Initialize the maximum frequency element\nmax_freq_elem = 0\n\n# Initialize the window\nwindow_start = 0\n\n# Get the frequency of the first k elements\nfor i in t:\n    freq[i] -= 1\n\n# Get the maximum frequency\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Store the maximum frequency element in the result\nresult.append(max_freq_elem)\n\n# Iterate through the array\nfor window_end in range(k,n):\n    # Remove the element from the window\n    freq[s[window_start]] += 1\n    # Increment the window start\n    window_start += 1\n    # Subtract the frequency of the element in the window\n    freq[s[window_end]] -= 1\n    # Get the maximum frequency\n    max_freq = max(freq.values())\n    # Get the element with the maximum frequency\n    max_freq_elem = [k for k,v in freq.items() if v==max_freq]\n    # Get the first element that has the maximum frequency\n    max_freq_elem = max_freq_elem[0]\n    # Store the maximum frequency element in the result\n    result.append(max_freq_elem)\n\n# Print the result\nprint(*result)\n', '\n\n# SOLUTION\n\n# The solution is getting the most frequent element in the array \n# and then going through the array to find the most frequent element in the subarray\n# We will use a hashmap to store the frequency of the elements \n# and then use a sliding window technique to find the maximum frequency element in the subarray\n\nimport sys\nimport collections\n\n# Get the input\nn,k = map(int, sys.stdin.readline().split())\ns = list(map(int, sys.stdin.readline().split()))\n\n# Make a hashmap to store the frequency of the elements\nfreq = collections.defaultdict(int)\n\n# Store the frequency of the elements\nfor i in s:\n    freq[i] += 1\n\n# Get the most frequent element in the array\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Get the first k elements of the array\nt = s[:k]\n\n# Initialize the result\nresult = []\n\n# Initialize the maximum frequency\nmax_freq = 0\n\n# Initialize the maximum frequency element\nmax_freq_elem = 0\n\n# Initialize the window\nwindow_start = 0\n\n# Get the frequency of the first k elements\nfor i in t:\n    freq[i] -= 1\n\n# Get the maximum frequency\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Store the maximum frequency element in the result\nresult.append(max_freq_elem)\n\n# Iterate through the array\nfor window_end in range(k,n):\n    # Remove the element from the window\n    freq[s[window_start]] += 1\n    # Increment the window start\n    window_start += 1\n    # Subtract the frequency of the element in the window\n    freq[s[window_end]] -= 1\n    # Get the maximum frequency\n    max_freq = max(freq.values())\n    # Get the element with the maximum frequency\n    max_freq_elem = [k for k,v in freq.items() if v==max_freq]\n    # Get the first element that has the maximum frequency\n    max_freq_elem = max_freq_elem[0]\n    # Store the maximum frequency element in the result\n    result.append(max_freq_elem)\n\n# Print the result\nprint(*result)\n', '\n\n# SOLUTION\n\n# The solution is getting the most frequent element in the array and then going through the array to find the most frequent element in the subarray.\n# We will use a hashmap to store the frequency of the elements and then use a sliding window technique to find the maximum frequency element in the subarray\n\nimport sys\nimport collections\n\n# Get the input\nn,k = map(int, sys.stdin.readline().split())\ns = list(map(int, sys.stdin.readline().split()))\n\n# Make a hashmap to store the frequency of the elements\nfreq = collections.defaultdict(int)\n\n# Store the frequency of the elements\nfor i in s:\n    freq[i] += 1\n\n# Get the most frequent element in the array\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Get the first k elements of the array\nt = s[:k]\n\n# Initialize the result\nresult = []\n\n# Initialize the maximum frequency\nmax_freq = 0\n\n# Initialize the maximum frequency element\nmax_freq_elem = 0\n\n# Initialize the window\nwindow_start = 0\n\n# Get the frequency of the first k elements\nfor i in t:\n    freq[i] -= 1\n\n# Get the maximum frequency\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Store the maximum frequency element in the result\nresult.append(max_freq_elem)\n\n# Iterate through the array\nfor window_end in range(k,n):\n    # Remove the element from the window\n    freq[s[window_start]] += 1\n    # Increment the window start\n    window_start += 1\n    # Subtract the frequency of the element in the window\n    freq[s[window_end]] -= 1\n    # Get the maximum frequency\n    max_freq = max(freq.values())\n    # Get the element with the maximum frequency\n    max_freq_elem = [k for k,v in freq.items() if v==max_freq]\n    # Get the first element that has the maximum frequency\n    max_freq_elem = max_freq_elem[0]\n    # Store the maximum frequency element in the result\n    result.append(max_freq_elem)\n\n# Print the result\nprint(*result)\n']
2022-04-22 11:29:36.421378 size on output set 8
2022-04-22 11:29:36.421394 num operations 1
2022-04-22 11:29:36.421401 size on input set 1
2022-04-22 11:29:36.421545 using api key kouti
2022-04-22 11:29:45.657385 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#\n"
    },
    {
      "index": 1,
      "text": "\n\n#Solution\n\n#!/bin/python3\n\nimport numpy as np\n\nn, k = map(int, input().split())\ns = np.array(list(map(int, input().split())))\n\ns_unique, s_counts = np.unique(s, return_counts=True)\ns_indices = np.argsort(-s_counts)\n\nt = s_unique[s_indices[:k]]\nprint(*t)\n"
    },
    {
      "index": 2,
      "text": "\n\n# Solution\n\n#!/usr/bin/env python3\n\nimport sys\nimport numpy as np\n\nn, k = map(int, input().split())\ns = np.array(list(map(int, input().split())))\n\ns_unique, s_counts = np.unique(s, return_counts=True)\ns_indices = np.argsort(-s_counts)\n\nt = s_unique[s_indices[:k]]\n\n# Above code is the solution\nprint(*t)\n"
    },
    {
      "index": 3,
      "text": "\n\n#Solution\n\n#!/usr/bin/python3\n\nimport sys\nimport numpy as np\n\nn, k = map(int, input().split())\ns = np.array(list(map(int, input().split())))\n\ns_unique, s_counts = np.unique(s, return_counts=True)\ns_indices = np.argsort(-s_counts)\n\nt = s_unique[s_indices[:k]]\nprint(*t)\n"
    },
    {
      "index": 4,
      "text": "\n\n#Solution\n\n#!/usr/bin/env python\n\nimport sys\nimport numpy as np\n\nn, k = map(int, input().split())\ns = np.array(list(map(int, input().split())))\n\ns_unique, s_counts = np.unique(s, return_counts=True)\ns_indices = np.argsort(-s_counts)\n\nt = s_unique[s_indices[:k]]\nprint(*t)\n"
    },
    {
      "index": 5,
      "text": "\n\n# Solution\n\n#!/usr/bin/env python3\n\nimport numpy as np\n\nn, k = map(int, input().split())\ns = np.array(list(map(int, input().split())), dtype=int)\n\ns_unique, s_count = np.unique(s, return_counts=True)\ns_indices = np.argsort(-s_count)\n\nt = s_unique[s_indices[:k]]\nprint(*t)\n"
    },
    {
      "index": 6,
      "text": "\n\n# Solution\n\n#!/usr/bin/env python3\n\nimport sys\nimport numpy as np\n\nn, k = map(int, input().split())\ns = np.array(list(map(int, input().split())))\n\ns_unique, s_counts = np.unique(s, return_counts=True)\ns_indices = np.argsort(-s_counts)\n\nt = s_unique[s_indices[:k]]\n\nprint(*t)\n"
    },
    {
      "index": 7,
      "text": "\n\n#Solution\n\n#!/bin/python3\n\nimport sys\nimport numpy as np\n\nn, k = map(int, input().split())\ns = np.array(list(map(int, input().split())))\n\ns_unique, s_counts = np.unique(s, return_counts=True)\ns_indices = np.argsort(-s_counts)\n\nt = s_unique[s_indices[:k]]\nprint(*t)\n"
    }
  ],
  "created": 1650626976,
  "object": "edit"
}
2022-04-22 11:29:45.657699 fix syntax errors 8 ['\n#\n', '\n\n#Solution\n\n#!/bin/python3\n\nimport numpy as np\n\nn, k = map(int, input().split())\ns = np.array(list(map(int, input().split())))\n\ns_unique, s_counts = np.unique(s, return_counts=True)\ns_indices = np.argsort(-s_counts)\n\nt = s_unique[s_indices[:k]]\nprint(*t)\n', '\n\n# Solution\n\n#!/usr/bin/env python3\n\nimport sys\nimport numpy as np\n\nn, k = map(int, input().split())\ns = np.array(list(map(int, input().split())))\n\ns_unique, s_counts = np.unique(s, return_counts=True)\ns_indices = np.argsort(-s_counts)\n\nt = s_unique[s_indices[:k]]\n\n# Above code is the solution\nprint(*t)\n', '\n\n#Solution\n\n#!/usr/bin/python3\n\nimport sys\nimport numpy as np\n\nn, k = map(int, input().split())\ns = np.array(list(map(int, input().split())))\n\ns_unique, s_counts = np.unique(s, return_counts=True)\ns_indices = np.argsort(-s_counts)\n\nt = s_unique[s_indices[:k]]\nprint(*t)\n', '\n\n#Solution\n\n#!/usr/bin/env python\n\nimport sys\nimport numpy as np\n\nn, k = map(int, input().split())\ns = np.array(list(map(int, input().split())))\n\ns_unique, s_counts = np.unique(s, return_counts=True)\ns_indices = np.argsort(-s_counts)\n\nt = s_unique[s_indices[:k]]\nprint(*t)\n', '\n\n# Solution\n\n#!/usr/bin/env python3\n\nimport numpy as np\n\nn, k = map(int, input().split())\ns = np.array(list(map(int, input().split())), dtype=int)\n\ns_unique, s_count = np.unique(s, return_counts=True)\ns_indices = np.argsort(-s_count)\n\nt = s_unique[s_indices[:k]]\nprint(*t)\n', '\n\n# Solution\n\n#!/usr/bin/env python3\n\nimport sys\nimport numpy as np\n\nn, k = map(int, input().split())\ns = np.array(list(map(int, input().split())))\n\ns_unique, s_counts = np.unique(s, return_counts=True)\ns_indices = np.argsort(-s_counts)\n\nt = s_unique[s_indices[:k]]\n\nprint(*t)\n', '\n\n#Solution\n\n#!/bin/python3\n\nimport sys\nimport numpy as np\n\nn, k = map(int, input().split())\ns = np.array(list(map(int, input().split())))\n\ns_unique, s_counts = np.unique(s, return_counts=True)\ns_indices = np.argsort(-s_counts)\n\nt = s_unique[s_indices[:k]]\nprint(*t)\n']
2022-04-22 11:29:45.657739 size on output set 8
