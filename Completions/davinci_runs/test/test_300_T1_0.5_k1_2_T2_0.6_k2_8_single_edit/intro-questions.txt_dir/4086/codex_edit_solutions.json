["\ndef remove_duplicates(a):\n    b = []\n    for i in range(len(a)):\n        if a[i] in b:\n            continue\n        else:\n            b.append(a[i])\n    return b\n\nb = remove_duplicates(a)\nprint(len(b))\nprint(*b)\n", "\nn = int(input())\na = [int(x) for x in input().split()]\n\ndef remove_duplicates(a):\n    b = []\n    for i in range(len(a)):\n        if a[i] in b:\n            continue\n        else:\n            b.append(a[i])\n    return b\n\nb = remove_duplicates(a)\nprint(len(b))\nprint(*b)\n", "\n\nn = int(input())\na = [int(x) for x in input().split()]\n\ndef remove_duplicates(a):\n    b = []\n    for i in range(1, len(a)):\n        if a[i] in b:\n            continue\n        else:\n            b.append(a[i])\n    return b\n\nb = remove_duplicates(a)\nprint(len(b))\nprint(*b)\n", "\n\nfrom collections import deque\n\ndef main():\n    n = int(input())\n    nums = []\n    for i in range(n):\n        nums.append(input())\n    nums = set(nums)\n    nums = list(nums)\n    print(len(nums))\n    print(*nums)\n\nmain()\n", "\nn = int(input())\na = [int(x) for x in input().split()]\n\n\nb = remove_duplicates(a)\nprint(len(b))\nprint(*b)\n", "\n\nfrom collections import deque\n\ndef main():\n    n = input()\n    nums = deque()\n    for i in range(int(n)):\n        nums.append(input())\n    nums = list(dict.fromkeys(nums))\n    print(len(nums))\n    print(*nums)\n\nmain()\n", "\n\nfrom collections import deque\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(\"The number is: \", n)\n\nmain()\n", "\n\nfrom collections import deque\n\ndef main():\n    n = int(input())        # n => num of input\n    nums = deque()          # nums => nums from input\n    for i in range(n):      # append nums to nums\n        nums.append(int(input())) \n    nums = list(dict.fromkeys(nums)) # remove duplicated nums\n    print(len(nums))        # print length of nums\n    print(*nums)            # print nums without brackets\n\nmain()\n", "\n\ndef remove_duplicates(a):\n    b = []\n    for i in range(len(a)):\n        if a[i] in b:\n            continue\n        else:\n            b.append(a[i])\n    return len(b)\n\nprint(remove_duplicates([int(x) for x in input().split()]))\n", "\nfrom collections import deque\n\ndef main():\n    n = int(input())\n    nums = deque()\n    for i in range(n):\n        nums.append(int(input()))\n    nums = list(dict.fromkeys(nums))\n    print(len(nums))\n    print(*nums)\n\nmain()\n", "# import sys\n# sys.stdin = open(\"input.txt\")\n# sys.stdout = open(\"output.txt\", \"w\")\n\nn = int(input())\n\na = [int(x) for x in input().split()]\n\ndef remove_duplicates(a):\n    b = []\n    for i in range(len(a)):\n        if a[i] in b:\n            continue\n        else:\n            b.append(a[i])\n    return b\n\nb = remove_duplicates(a)\nprint(len(b))\nfor i in range(len(b)):\n    print(b[i], end=\" \")\n", "\n\nfrom collections import deque\n\ndef main():\n    n = int(input())\n    nums = deque()\n    for i in range(n):\n        nums.append(int(input()))\n    nums = list(set(nums))\n    print(len(nums))\n    print(*nums)\n\nmain()\n", "import sys\nimport os\nimport hashlib\n\n\ndef file_hash(filename):\n    h = hashlib.sha1()\n    with open(filename,'rb') as file:\n        chunk = 0\n        while chunk != b'':\n            chunk = file.read(1024)\n            h.update(chunk)\n    return h.hexdigest()\n\ndef remove_duplicates(a):\n    b = []\n    for i in range(len(a)):\n        if a[i] in b:\n            continue\n        else:\n            b.append(a[i])\n    return b\n\nb = remove_duplicates(a)\nprint(len(b))\nprint(*b)\n", "# \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0445\u0441\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430\n\nn = int(input())\na = [int(x) for x in input().split()]\n\ndef remove_duplicates(a):\n    b = []\n    for i in range(len(a)):\n        if a[i] in b:\n            continue\n        else:\n            b.append(a[i])\n    return b\n\nb = remove_duplicates(a)\nprint(len(b))\nprint(*b)\n"]