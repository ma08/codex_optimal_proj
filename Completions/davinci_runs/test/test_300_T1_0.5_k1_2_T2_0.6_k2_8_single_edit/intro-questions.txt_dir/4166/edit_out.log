2022-04-22 10:51:03.395324 num operations 1
2022-04-22 10:51:03.395345 size on input set 1
2022-04-22 10:51:03.395546 using api key kouti
2022-04-22 10:51:32.760115 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\npossible_numbers = [str(i) for i in range(10)]  # \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\n\nfor i in range(m):\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# itertools.product(*possible_numbers)\u306f\u3001possible_numbers\u306e\u8981\u7d20\u3092\u305d\u308c\u305e\u308c\u53d6\u308a\u51fa\u3057\u3001\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\u5168\u3066\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5217\u6319\u3059\u308b\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "\n\n# My code \nimport itertools\n \nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n \n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\n# \u3053\u3053\u3067\u306f\u30010~9\u307e\u3067\u306e\u5168\u3066\u306e\u6570\u5b57\u304c\u5165\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3068\u3059\u308b\npossible_numbers = [str(i) for i in range(10)]\n \n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\nfor i in range(m):\n    # s_i-1: s_i\u756a\u76ee\u306e\u6841\u3092\u8868\u3059\n    # c_i: \u6841\u306b\u5165\u308b\u6570\u5b57\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]\u306b\u306f\u3001s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u304c\u5165\u3063\u3066\u3044\u308b\n    # \u3053\u3053\u3067\u306f\u3001c_i\u3092s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u306b\u8ffd\u52a0\u3057\u3001\n    # \u305d\u308c\u4ee5\u5916\u306e\u6570\u5b57\u3092\u524a\u9664\u3059\u308b\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n \n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u305f\u306e\u3067\u3001\n# \u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001n\u6841\u306e\u6570\u5b57\u3092\u4f5c\u308b\n# itertools.product(*possible_numbers)\u306f\u3001\n# possible_numbers\u306e\u8981\u7d20\u3092\u305d\u308c\u305e\u308c\u53d6\u308a\u51fa\u3057\u3001\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\n# \u5168\u3066\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5217\u6319\u3059\u308b\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n \n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n"
    },
    {
      "index": 2,
      "text": "\n\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\n# \u3053\u3053\u3067\u306f\u30010~9\u307e\u3067\u306e\u5168\u3066\u306e\u6570\u5b57\u304c\u5165\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3068\u3059\u308b\npossible_numbers = [str(i) for i in range(10)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\nfor i in range(m):\n    # s_i-1: s_i\u756a\u76ee\u306e\u6841\u3092\u8868\u3059\n    # c_i: \u6841\u306b\u5165\u308b\u6570\u5b57\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]\u306b\u306f\u3001s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u304c\u5165\u3063\u3066\u3044\u308b\n    # \u3053\u3053\u3067\u306f\u3001c_i\u3092s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u306b\u8ffd\u52a0\u3057\u3001\n    # \u305d\u308c\u4ee5\u5916\u306e\u6570\u5b57\u3092\u524a\u9664\u3059\u308b\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u305f\u306e\u3067\u3001\n# \u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001n\u6841\u306e\u6570\u5b57\u3092\u4f5c\u308b\n# itertools.product(*possible_numbers)\u306f\u3001\n# possible_numbers\u306e\u8981\u7d20\u3092\u305d\u308c\u305e\u308c\u53d6\u308a\u51fa\u3057\u3001\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\n# \u5168\u3066\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5217\u6319\u3059\u308b\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n"
    },
    {
      "index": 3,
      "text": "\n\n# My code\nimport sys\n\nsys.setrecursionlimit(10**8)\n\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\n# \u3053\u3053\u3067\u306f\u30010~9\u307e\u3067\u306e\u5168\u3066\u306e\u6570\u5b57\u304c\u5165\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3068\u3059\u308b\npossible_numbers = [str(i) for i in range(10)]\n\n\ndef dfs(n, m, q, possible_numbers):\n    if len(possible_numbers) == n:\n        return possible_numbers\n    # \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\n    for i in range(m):\n        # s_i-1: s_i\u756a\u76ee\u306e\u6841\u3092\u8868\u3059\n        # c_i: \u6841\u306b\u5165\u308b\u6570\u5b57\n        s_i, c_i = q[i][0] - 1, str(q[i][1])\n        # possible_numbers[s_i]\u306b\u306f\u3001s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u304c\u5165\u3063\u3066\u3044\u308b\n        # \u3053\u3053\u3067\u306f\u3001c_i\u3092s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u306b\u8ffd\u52a0\u3057\u3001\n        # \u305d\u308c\u4ee5\u5916\u306e\u6570\u5b57\u3092\u524a\u9664\u3059\u308b\n        possible_numbers[s_i] = c_i\n        for j in range(10):\n            if str(j) != c_i:\n                possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n    return dfs(n, m, q, possible_numbers)\n\n\npossible_numbers = dfs(n, m, q, possible_numbers)\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u305f\u306e\u3067\u3001\n# \u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001n\u6841\u306e\u6570\u5b57\u3092\u4f5c\u308b\n# itertools.product(*possible_numbers)\u306f\u3001\n# possible_numbers\u306e\u8981\u7d20\u3092\u305d\u308c\u305e\u308c\u53d6\u308a\u51fa\u3057\u3001\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\n# \u5168\u3066\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5217\u6319\u3059\u308b\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n"
    },
    {
      "index": 4,
      "text": "\n\n# \u5168\u3066\u306e\u6570\u5b57\u304c\u5165\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3068\u3059\u308b\npossible_numbers = [str(i) for i in range(10)]\n\n# \u5165\u529b\n# ex.\n# 2 3\n# 1 9\n# 2 1\n# 2 0\nn, m = 2, 3\nq = [[1, 9], [2, 1], [2, 0]]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\nfor i in range(m):\n    # s_i-1: s_i\u756a\u76ee\u306e\u6841\u3092\u8868\u3059\n    # c_i: \u6841\u306b\u5165\u308b\u6570\u5b57\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]\u306b\u306f\u3001s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u304c\u5165\u3063\u3066\u3044\u308b\n    # \u3053\u3053\u3067\u306f\u3001c_i\u3092s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u306b\u8ffd\u52a0\u3057\u3001\n    # \u305d\u308c\u4ee5\u5916\u306e\u6570\u5b57\u3092\u524a\u9664\u3059\u308b\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u305f\u306e\u3067\u3001\n# \u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001n\u6841\u306e\u6570\u5b57\u3092\u4f5c\u308b\n# possible_numbers = [['9'], ['1', '0']]\n# itertools.product(*possible_numbers)\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\n# [('9', '1'), ('9', '0')]\npossible_numbers = ['9', '1', '0']\nprint(possible_numbers)\nprint(list(itertools.product(*possible_numbers)))\n"
    },
    {
      "index": 5,
      "text": "\n\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\n# \u3053\u3053\u3067\u306f\u30010~9\u307e\u3067\u306e\u5168\u3066\u306e\u6570\u5b57\u304c\u5165\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3068\u3059\u308b\npossible_numbers = [str(i) for i in range(10)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\nfor i in range(m):\n    # s_i-1: s_i\u756a\u76ee\u306e\u6841\u3092\u8868\u3059\n    # c_i: \u6841\u306b\u5165\u308b\u6570\u5b57\n    s_i, c_i = q[i][0]-1, str(q[i][1])\n    # possible_numbers[s_i]\u306b\u306f\u3001s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u304c\u5165\u3063\u3066\u3044\u308b\n    # \u3053\u3053\u3067\u306f\u3001c_i\u3092s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u306b\u8ffd\u52a0\u3057\u3001\n    # \u305d\u308c\u4ee5\u5916\u306e\u6570\u5b57\u3092\u524a\u9664\u3059\u308b\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u305f\u306e\u3067\u3001\n# \u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001n\u6841\u306e\u6570\u5b57\u3092\u4f5c\u308b\n# itertools.product(*possible_numbers)\u306f\u3001\n# possible_numbers\u306e\u8981\u7d20\u3092\u305d\u308c\u305e\u308c\u53d6\u308a\u51fa\u3057\u3001\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\n# \u5168\u3066\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5217\u6319\u3059\u308b\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0 and i <= 10**n-1:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(10**(n-1), 10**n):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n"
    },
    {
      "index": 6,
      "text": "\n\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\n# \u3053\u3053\u3067\u306f\u30010~9\u307e\u3067\u306e\u5168\u3066\u306e\u6570\u5b57\u304c\u5165\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3068\u3059\u308b\npossible_numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\npossible_numbers = [str(i) for i in range(10)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\nfor i in range(m):\n    # s_i-1: s_i\u756a\u76ee\u306e\u6841\u3092\u8868\u3059\n    # c_i: \u6841\u306b\u5165\u308b\u6570\u5b57\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]\u306b\u306f\u3001s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u304c\u5165\u3063\u3066\u3044\u308b\n    # \u3053\u3053\u3067\u306f\u3001c_i\u3092s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u306b\u8ffd\u52a0\u3057\u3001\n    # \u305d\u308c\u4ee5\u5916\u306e\u6570\u5b57\u3092\u524a\u9664\u3059\u308b\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u305f\u306e\u3067\u3001\n# \u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001n\u6841\u306e\u6570\u5b57\u3092\u4f5c\u308b\n# itertools.product(*possible_numbers)\u306f\u3001\n# possible_numbers\u306e\u8981\u7d20\u3092\u305d\u308c\u305e\u308c\u53d6\u308a\u51fa\u3057\u3001\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\n# \u5168\u3066\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5217\u6319\u3059\u308b\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n"
    },
    {
      "index": 7,
      "text": "\n\n\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\n# \u3053\u3053\u3067\u306f\u30010~9\u307e\u3067\u306e\u5168\u3066\u306e\u6570\u5b57\u304c\u5165\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3068\u3059\u308b\npossible_numbers = [str(i) for i in range(10)]\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u308b\nfor i in range(m):\n    # s_i-1: s_i\u756a\u76ee\u306e\u6841\u3092\u8868\u3059\n    # c_i: \u6841\u306b\u5165\u308b\u6570\u5b57\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]\u306b\u306f\u3001s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u304c\u5165\u3063\u3066\u3044\u308b\n    # \u3053\u3053\u3067\u306f\u3001c_i\u3092s_i\u756a\u76ee\u306e\u6841\u306b\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u306b\u8ffd\u52a0\u3057\u3001\n    # \u305d\u308c\u4ee5\u5916\u306e\u6570\u5b57\u3092\u524a\u9664\u3059\u308b\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# \u5168\u3066\u306e\u6841\u306b\u3064\u3044\u3066\u3001c_i\u304c\u5165\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u6570\u5b57\u3092\u6c7a\u3081\u305f\u306e\u3067\u3001\n# \u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001n\u6841\u306e\u6570\u5b57\u3092\u4f5c\u308b\n# itertools.product(*possible_numbers)\u306f\u3001\n# possible_numbers\u306e\u8981\u7d20\u3092\u305d\u308c\u305e\u308c\u53d6\u308a\u51fa\u3057\u3001\u305d\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\n# \u5168\u3066\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5217\u6319\u3059\u308b\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n"
    }
  ],
  "created": 1650624663,
  "object": "edit"
}
2022-04-22 10:51:32.760696 fix syntax errors 8 ["\n\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\npossible_numbers = [str(i) for i in range(10)]  # 全ての桁について、c_iが入る可能性のある数字を決める\n\nfor i in range(m):\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# itertools.product(*possible_numbers)は、possible_numbersの要素をそれぞれ取り出し、それらを組み合わせて、全ての組み合わせを列挙する\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n", "\n\n# My code \nimport itertools\n \nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n \n# 全ての桁について、c_iが入る可能性のある数字を決める\n# ここでは、0~9までの全ての数字が入る可能性があるとする\npossible_numbers = [str(i) for i in range(10)]\n \n# 全ての桁について、c_iが入る可能性のある数字を決める\nfor i in range(m):\n    # s_i-1: s_i番目の桁を表す\n    # c_i: 桁に入る数字\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]には、s_i番目の桁に入る可能性のある数字が入っている\n    # ここでは、c_iをs_i番目の桁に入る可能性のある数字に追加し、\n    # それ以外の数字を削除する\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n \n# 全ての桁について、c_iが入る可能性のある数字を決めたので、\n# それらを組み合わせて、n桁の数字を作る\n# itertools.product(*possible_numbers)は、\n# possible_numbersの要素をそれぞれ取り出し、それらを組み合わせて、\n# 全ての組み合わせを列挙する\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n \n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n", "\n\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# 全ての桁について、c_iが入る可能性のある数字を決める\n# ここでは、0~9までの全ての数字が入る可能性があるとする\npossible_numbers = [str(i) for i in range(10)]\n\n# 全ての桁について、c_iが入る可能性のある数字を決める\nfor i in range(m):\n    # s_i-1: s_i番目の桁を表す\n    # c_i: 桁に入る数字\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]には、s_i番目の桁に入る可能性のある数字が入っている\n    # ここでは、c_iをs_i番目の桁に入る可能性のある数字に追加し、\n    # それ以外の数字を削除する\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# 全ての桁について、c_iが入る可能性のある数字を決めたので、\n# それらを組み合わせて、n桁の数字を作る\n# itertools.product(*possible_numbers)は、\n# possible_numbersの要素をそれぞれ取り出し、それらを組み合わせて、\n# 全ての組み合わせを列挙する\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n", "\n\n# My code\nimport sys\n\nsys.setrecursionlimit(10**8)\n\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# 全ての桁について、c_iが入る可能性のある数字を決める\n# ここでは、0~9までの全ての数字が入る可能性があるとする\npossible_numbers = [str(i) for i in range(10)]\n\n\ndef dfs(n, m, q, possible_numbers):\n    if len(possible_numbers) == n:\n        return possible_numbers\n    # 全ての桁について、c_iが入る可能性のある数字を決める\n    for i in range(m):\n        # s_i-1: s_i番目の桁を表す\n        # c_i: 桁に入る数字\n        s_i, c_i = q[i][0] - 1, str(q[i][1])\n        # possible_numbers[s_i]には、s_i番目の桁に入る可能性のある数字が入っている\n        # ここでは、c_iをs_i番目の桁に入る可能性のある数字に追加し、\n        # それ以外の数字を削除する\n        possible_numbers[s_i] = c_i\n        for j in range(10):\n            if str(j) != c_i:\n                possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n    return dfs(n, m, q, possible_numbers)\n\n\npossible_numbers = dfs(n, m, q, possible_numbers)\n\n# 全ての桁について、c_iが入る可能性のある数字を決めたので、\n# それらを組み合わせて、n桁の数字を作る\n# itertools.product(*possible_numbers)は、\n# possible_numbersの要素をそれぞれ取り出し、それらを組み合わせて、\n# 全ての組み合わせを列挙する\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n", "\n\n# 全ての数字が入る可能性があるとする\npossible_numbers = [str(i) for i in range(10)]\n\n# 入力\n# ex.\n# 2 3\n# 1 9\n# 2 1\n# 2 0\nn, m = 2, 3\nq = [[1, 9], [2, 1], [2, 0]]\n\n# 全ての桁について、c_iが入る可能性のある数字を決める\nfor i in range(m):\n    # s_i-1: s_i番目の桁を表す\n    # c_i: 桁に入る数字\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]には、s_i番目の桁に入る可能性のある数字が入っている\n    # ここでは、c_iをs_i番目の桁に入る可能性のある数字に追加し、\n    # それ以外の数字を削除する\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# 全ての桁について、c_iが入る可能性のある数字を決めたので、\n# それらを組み合わせて、n桁の数字を作る\n# possible_numbers = [['9'], ['1', '0']]\n# itertools.product(*possible_numbers)は、以下のようなリストを返す\n# [('9', '1'), ('9', '0')]\npossible_numbers = ['9', '1', '0']\nprint(possible_numbers)\nprint(list(itertools.product(*possible_numbers)))\n", "\n\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# 全ての桁について、c_iが入る可能性のある数字を決める\n# ここでは、0~9までの全ての数字が入る可能性があるとする\npossible_numbers = [str(i) for i in range(10)]\n\n# 全ての桁について、c_iが入る可能性のある数字を決める\nfor i in range(m):\n    # s_i-1: s_i番目の桁を表す\n    # c_i: 桁に入る数字\n    s_i, c_i = q[i][0]-1, str(q[i][1])\n    # possible_numbers[s_i]には、s_i番目の桁に入る可能性のある数字が入っている\n    # ここでは、c_iをs_i番目の桁に入る可能性のある数字に追加し、\n    # それ以外の数字を削除する\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# 全ての桁について、c_iが入る可能性のある数字を決めたので、\n# それらを組み合わせて、n桁の数字を作る\n# itertools.product(*possible_numbers)は、\n# possible_numbersの要素をそれぞれ取り出し、それらを組み合わせて、\n# 全ての組み合わせを列挙する\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0 and i <= 10**n-1:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(10**(n-1), 10**n):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n", "\n\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# 全ての桁について、c_iが入る可能性のある数字を決める\n# ここでは、0~9までの全ての数字が入る可能性があるとする\npossible_numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\npossible_numbers = [str(i) for i in range(10)]\n\n# 全ての桁について、c_iが入る可能性のある数字を決める\nfor i in range(m):\n    # s_i-1: s_i番目の桁を表す\n    # c_i: 桁に入る数字\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]には、s_i番目の桁に入る可能性のある数字が入っている\n    # ここでは、c_iをs_i番目の桁に入る可能性のある数字に追加し、\n    # それ以外の数字を削除する\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# 全ての桁について、c_iが入る可能性のある数字を決めたので、\n# それらを組み合わせて、n桁の数字を作る\n# itertools.product(*possible_numbers)は、\n# possible_numbersの要素をそれぞれ取り出し、それらを組み合わせて、\n# 全ての組み合わせを列挙する\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n", "\n\n\n# My code\nimport itertools\n\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\n# 全ての桁について、c_iが入る可能性のある数字を決める\n# ここでは、0~9までの全ての数字が入る可能性があるとする\npossible_numbers = [str(i) for i in range(10)]\n\n# 全ての桁について、c_iが入る可能性のある数字を決める\nfor i in range(m):\n    # s_i-1: s_i番目の桁を表す\n    # c_i: 桁に入る数字\n    s_i, c_i = q[i][0] - 1, str(q[i][1])\n    # possible_numbers[s_i]には、s_i番目の桁に入る可能性のある数字が入っている\n    # ここでは、c_iをs_i番目の桁に入る可能性のある数字に追加し、\n    # それ以外の数字を削除する\n    possible_numbers[s_i] = c_i\n    for j in range(10):\n        if str(j) != c_i:\n            possible_numbers[s_i] = possible_numbers[s_i].replace(str(j), '')\n\n# 全ての桁について、c_iが入る可能性のある数字を決めたので、\n# それらを組み合わせて、n桁の数字を作る\n# itertools.product(*possible_numbers)は、\n# possible_numbersの要素をそれぞれ取り出し、それらを組み合わせて、\n# 全ての組み合わせを列挙する\nans = -1\nfor i in itertools.product(*possible_numbers):\n    i = int(''.join(i))\n    if len(str(i)) == n and i >= 0:\n        if ans == -1:\n            ans = i\n        else:\n            ans = min(ans, i)\nprint(ans)\n\n# Reference code\nn, m = map(int, input().split())\nq = [list(map(int, input().split())) for i in range(m)]\n\nans = -1\nfor i in range(1000, 10000):\n    s = str(i)\n    ok = True\n    for j in range(m):\n        if s[q[j][0]-1] != str(q[j][1]):\n            ok = False\n    if ok:\n        ans = i\n        break\nprint(ans)\n"]
2022-04-22 10:51:32.760951 size on output set 8
2022-04-22 10:51:32.760966 num operations 1
2022-04-22 10:51:32.760974 size on input set 1
2022-04-22 10:51:32.761124 using api key soukgp
2022-04-22 10:52:02.848765 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nprint(\"test\")\n"
    },
    {
      "index": 1,
      "text": "# ABC085C\n\nN, M = map(int, input().split())\n\ns = []\nc = []\n\nfor i in range(M):\n    tmp = list(map(int, input().split()))\n    s.append(tmp[0])\n    c.append(tmp[1])\n\nmin_num = 0\nmax_num = 10**N\n\nfor i in range(min_num, max_num):\n    num_str = str(i)\n    if len(num_str) != N:\n        continue\n    is_match = True\n    for j in range(M):\n        if int(num_str[s[j]-1]) != c[j]:\n            is_match = False\n            break\n    if is_match:\n        print(i)\n        exit()\n\nprint(-1)\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\nsys.setrecursionlimit(10**7)\n\n\ndef dfs(i, n, s, c, min_num, max_num):\n    if i == n:\n        if min_num <= int(''.join(s)) <= max_num:\n            print(int(''.join(s)))\n            exit()\n        else:\n            return\n\n    if c[i] != -1:\n        s[i] = str(c[i])\n        dfs(i+1, n, s, c, min_num, max_num)\n    else:\n        if i == 0:\n            s[i] = str(1)\n            dfs(i+1, n, s, c, min_num, max_num)\n            s[i] = str(0)\n            dfs(i+1, n, s, c, min_num, max_num)\n        else:\n            s[i] = str(0)\n            dfs(i+1, n, s, c, min_num, max_num)\n            s[i] = str(9)\n            dfs(i+1, n, s, c, min_num, max_num)\n\n\ndef solve():\n    n, m = map(int, input().split())\n    s = [-1] * n\n    c = [-1] * n\n    for i in range(m):\n        tmp = list(map(int, input().split()))\n        s[tmp[0]-1] = tmp[1]\n        c[tmp[0]-1] = tmp[1]\n\n    min_num = 0\n    max_num = 10**n - 1\n    dfs(0, n, s, c, min_num, max_num)\n    print(-1)\n\n\nif __name__ == '__main__':\n    solve()\n\n\n\"\"\"\n\nN, M = map(int, input().split())\n\ns = []\nc = []\n\nfor i in range(M):\n    tmp = list(map(int, input().split()))\n    s.append(tmp[0])\n    c.append(tmp[1])\n\nmin_num = 0\nmax_num = 10**N\n\nfor i in range(min_num, max_num):\n    num_str = str(i)\n    if len(num_str) != N:\n        continue\n    is_match = True\n    for j in range(M):\n        if int(num_str[s[j]-1]) != c[j]:\n            is_match = False\n            break\n    if is_match:\n        print(i)\n        exit()\n\nprint(-1)\n\"\"\"\n"
    },
    {
      "index": 3,
      "text": "\nN, M = map(int, input().split(' '))\n\ns = []\nc = []\n\nfor i in range(M):\n    tmp = list(map(int, input().split(' ')))\n    s.append(tmp[0])\n    c.append(tmp[1])\n\nmin_num = 0\nmax_num = 10 ** N\n\nfor i in range(min_num, max_num):\n    num_str = str(i)\n    if len(num_str) != N:\n        continue\n    is_match = True\n    for j in range(M):\n        if int(num_str[s[j] - 1]) != c[j]:\n            is_match = False\n            break\n    if is_match:\n        print(i)\n        exit()\n\nprint(-1)\n"
    },
    {
      "index": 4,
      "text": "\nN, M = map(int, input().split())\n\ns = []\nc = []\n\nfor i in range(M):\n    tmp = list(map(int, input().split()))\n    s.append(tmp[0])\n    c.append(tmp[1])\n\nmin_num = 0\nmax_num = 10**N\n\nfor i in range(min_num, max_num):\n    num_str = str(i)\n    if len(num_str) != N:\n        continue\n    is_match = True\n    for j in range(M):\n        if int(num_str[s[j]-1]) != c[j]:\n            is_match = False\n            break\n    if is_match:\n        print(i)\n        exit()\n\nprint(-1)\n"
    },
    {
      "index": 5,
      "text": "\nN, M = map(int, input().split())\n\ns = []\nc = []\n\nfor i in range(M):\n    tmp = list(map(int, input().split()))\n    s.append(tmp[0])\n    c.append(tmp[1])\n\nmin_num = 0\nmax_num = 10**N\n\nfor i in range(min_num, max_num):\n    num_str = str(i)\n    if len(num_str) != N:\n        continue\n    is_match = True\n    for j in range(M):\n        if int(num_str[s[j]-1]) != c[j]:\n            is_match = False\n            break\n    if is_match:\n        print(i)\n        exit()\n\nprint(-1)\n"
    },
    {
      "index": 6,
      "text": "\nN, M = map(int, input().split())\n\ns = []\nc = []\n\nfor i in range(M):\n    tmp = list(map(int, input().split()))\n    s.append(tmp[0])\n    c.append(tmp[1])\n\nmin_num = 0\nmax_num = 10**N\n\nfor i in range(min_num, max_num):\n    num_str = str(i)\n    if len(num_str) != N:\n        continue\n    is_match = True\n    for j in range(M):\n        if int(num_str[s[j]-1]) != c[j]:\n            is_match = False\n            break\n    if is_match:\n        print(i)\n        exit()\n\nprint(-1)\n"
    },
    {
      "index": 7,
      "text": "\n\n"
    }
  ],
  "created": 1650624692,
  "object": "edit"
}
2022-04-22 10:52:02.849108 fix syntax errors 8 ['\nprint("test")\n', '# ABC085C\n\nN, M = map(int, input().split())\n\ns = []\nc = []\n\nfor i in range(M):\n    tmp = list(map(int, input().split()))\n    s.append(tmp[0])\n    c.append(tmp[1])\n\nmin_num = 0\nmax_num = 10**N\n\nfor i in range(min_num, max_num):\n    num_str = str(i)\n    if len(num_str) != N:\n        continue\n    is_match = True\n    for j in range(M):\n        if int(num_str[s[j]-1]) != c[j]:\n            is_match = False\n            break\n    if is_match:\n        print(i)\n        exit()\n\nprint(-1)\n', '\nimport sys\nsys.setrecursionlimit(10**7)\n\n\ndef dfs(i, n, s, c, min_num, max_num):\n    if i == n:\n        if min_num <= int(\'\'.join(s)) <= max_num:\n            print(int(\'\'.join(s)))\n            exit()\n        else:\n            return\n\n    if c[i] != -1:\n        s[i] = str(c[i])\n        dfs(i+1, n, s, c, min_num, max_num)\n    else:\n        if i == 0:\n            s[i] = str(1)\n            dfs(i+1, n, s, c, min_num, max_num)\n            s[i] = str(0)\n            dfs(i+1, n, s, c, min_num, max_num)\n        else:\n            s[i] = str(0)\n            dfs(i+1, n, s, c, min_num, max_num)\n            s[i] = str(9)\n            dfs(i+1, n, s, c, min_num, max_num)\n\n\ndef solve():\n    n, m = map(int, input().split())\n    s = [-1] * n\n    c = [-1] * n\n    for i in range(m):\n        tmp = list(map(int, input().split()))\n        s[tmp[0]-1] = tmp[1]\n        c[tmp[0]-1] = tmp[1]\n\n    min_num = 0\n    max_num = 10**n - 1\n    dfs(0, n, s, c, min_num, max_num)\n    print(-1)\n\n\nif __name__ == \'__main__\':\n    solve()\n\n\n"""\n\nN, M = map(int, input().split())\n\ns = []\nc = []\n\nfor i in range(M):\n    tmp = list(map(int, input().split()))\n    s.append(tmp[0])\n    c.append(tmp[1])\n\nmin_num = 0\nmax_num = 10**N\n\nfor i in range(min_num, max_num):\n    num_str = str(i)\n    if len(num_str) != N:\n        continue\n    is_match = True\n    for j in range(M):\n        if int(num_str[s[j]-1]) != c[j]:\n            is_match = False\n            break\n    if is_match:\n        print(i)\n        exit()\n\nprint(-1)\n"""\n', "\nN, M = map(int, input().split(' '))\n\ns = []\nc = []\n\nfor i in range(M):\n    tmp = list(map(int, input().split(' ')))\n    s.append(tmp[0])\n    c.append(tmp[1])\n\nmin_num = 0\nmax_num = 10 ** N\n\nfor i in range(min_num, max_num):\n    num_str = str(i)\n    if len(num_str) != N:\n        continue\n    is_match = True\n    for j in range(M):\n        if int(num_str[s[j] - 1]) != c[j]:\n            is_match = False\n            break\n    if is_match:\n        print(i)\n        exit()\n\nprint(-1)\n", '\nN, M = map(int, input().split())\n\ns = []\nc = []\n\nfor i in range(M):\n    tmp = list(map(int, input().split()))\n    s.append(tmp[0])\n    c.append(tmp[1])\n\nmin_num = 0\nmax_num = 10**N\n\nfor i in range(min_num, max_num):\n    num_str = str(i)\n    if len(num_str) != N:\n        continue\n    is_match = True\n    for j in range(M):\n        if int(num_str[s[j]-1]) != c[j]:\n            is_match = False\n            break\n    if is_match:\n        print(i)\n        exit()\n\nprint(-1)\n', '\nN, M = map(int, input().split())\n\ns = []\nc = []\n\nfor i in range(M):\n    tmp = list(map(int, input().split()))\n    s.append(tmp[0])\n    c.append(tmp[1])\n\nmin_num = 0\nmax_num = 10**N\n\nfor i in range(min_num, max_num):\n    num_str = str(i)\n    if len(num_str) != N:\n        continue\n    is_match = True\n    for j in range(M):\n        if int(num_str[s[j]-1]) != c[j]:\n            is_match = False\n            break\n    if is_match:\n        print(i)\n        exit()\n\nprint(-1)\n', '\nN, M = map(int, input().split())\n\ns = []\nc = []\n\nfor i in range(M):\n    tmp = list(map(int, input().split()))\n    s.append(tmp[0])\n    c.append(tmp[1])\n\nmin_num = 0\nmax_num = 10**N\n\nfor i in range(min_num, max_num):\n    num_str = str(i)\n    if len(num_str) != N:\n        continue\n    is_match = True\n    for j in range(M):\n        if int(num_str[s[j]-1]) != c[j]:\n            is_match = False\n            break\n    if is_match:\n        print(i)\n        exit()\n\nprint(-1)\n', '\n\n']
2022-04-22 10:52:02.849272 size on output set 6
