2022-04-22 11:45:10.238979 num operations 1
2022-04-22 11:45:10.239002 size on input set 1
2022-04-22 11:45:10.239145 using api key derek
2022-04-22 11:45:31.626685 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#-----Solution-----\n\n#The solution is to compute the number of first type turns that can be played and the number of second type turns that can be played. The maximum will be the maximum of the two.\n\n#The number of first type turns that can be played is the maximum n such that k-n*a >= 0\n\n#The number of second type turns that can be played is the maximum n such that k-n*b >= 0\n\n#If the maximum of the two is less than n, then the answer is -1. Otherwise, the\n#answer is the maximum of the two.\n\nimport math\n\ndef max_turns(k, n, a, b):\n    max_turns_1 = math.floor(k/a)\n    max_turns_2 = math.floor(k/b)\n    if max(max_turns_1, max_turns_2) < n:\n        return -1\n    return max(max_turns_1, max_turns_2)\n\nq = int(input())\nfor _ in range(q):\n    k, n, a, b = map(int, input().split())\n    print(max_turns(k, n, a, b))\n"
    },
    {
      "index": 1,
      "text": "#-----Solution-----\n\n\n#The solution is to split the number into the number of elements of the first\n#type and the number of elements of the second type. Then, the answer is the\n#minimum of the number of elements that can be removed from the first type and\n#the number of elements that can be removed from the second type.\n\n#The number of elements that can be removed from the first type is the maximum\n#number of elements of the second type that can be added such that the number of\n#elements of the second type is less than or equal to the target number of\n#elements of the second type.\n\n#The number of elements that can be removed from the second type is the maximum\n#number of elements of the first type that can be added such that the number of\n#elements of the second type is less than or equal to the target number of\n#elements of the second type.\n\n#If the minimum of the two is less than n, then the answer is -1. Otherwise, the\n#answer is the minimum of the two.\n\ndef max_turns(n, a, b, c, d):\n    max_turns_1 = d//b - a\n    max_turns_2 = c//a - b\n    if min(max_turns_1, max_turns_2) < n:\n        return -1\n    return min(max_turns_1, max_turns_2)\n\nq = int(input())\nfor _ in range(q):\n    n, a, b, c, d = map(int, input().split())\n    print(max_turns(n, a, b, c, d))\n\n#The solution is to compute the number of first type turns that can be played\n#and the number of second type turns that can be played. The maximum will be the\n#maximum of the two.\n\n#The number of first type turns that can be played is the maximum n such that\n#k-n*a >= 0\n\n#The number of second type turns that can be played is the maximum n such that\n#k-n*b >= 0\n\n#If the maximum of the two is less than n, then the answer is -1. Otherwise, the\n#answer is the maximum of the two.\n\nimport math\n#\n# def max_turns(k, n, a, b):\n#     max_turns_1 = math.floor(k/a)\n#     max_turns_2 = math.floor(k/b)\n#     if max(max_turns_1, max_turns_2) < n:\n#         return -1\n#     return max(max_turns_1, max_turns_2)\n#\n# q = int(input())\n# for _ in range(q):\n#     k, n, a, b = map(int, input().split())\n#     print(max_turns(k, n, a, b))\n"
    },
    {
      "index": 2,
      "text": "\n\n#-----Solution-----\n\n#The solution is to compute the number of first type turns that can be played\n#and the number of second type turns that can be played. The maximum will be the\n#maximum of the two.\n\n#The number of first type turns that can be played is the maximum n such that\n#k-n*a >= 0\n\n#The number of second type turns that can be played is the maximum n such that\n#k-n*b >= 0\n\n#If the maximum of the two is less than n, then the answer is -1.\n#Otherwise, the answer is the maximum of the two.\n\nimport math\n\ndef max_turns(k, n, a, b):\n    max_turns_1 = math.floor(k/a)\n    max_turns_2 = math.floor(k/b)\n    if max(max_turns_1, max_turns_2) < n:\n        return -1\n    return max(max_turns_1, max_turns_2)\n\nq = int(input())\nfor _ in range(q):\n    k, n, a, b = map(int, input().split())\n    print(max_turns(k, n, a, b))\n"
    },
    {
      "index": 3,
      "text": "\n\n#-----Solution-----\n\n#The solution is to compute the number of first type turns that can be played\n#and the number of second type turns that can be played. The maximum will be the\n#maximum of the two.\n\n#The number of first type turns that can be played is the maximum n such that\n#k-n*a >= 0.\n\n#The number of second type turns that can be played is the maximum n such that\n#k-n*b >= 0.\n\n#If the maximum of the two is less than n, then the answer is -1. Otherwise, the\n#answer is the maximum of the two.\n\nimport math\n\ndef max_turns(k, n, a, b):\n    max_turns_1 = math.floor(k/a)\n    max_turns_2 = math.floor(k/b)\n    if max(max_turns_1, max_turns_2) < n:\n        return -1\n    return max(max_turns_1, max_turns_2)\n\nq = int(input())\nfor _ in range(q):\n    k, n, a, b = map(int, input().split())\n    print(max_turns(k, n, a, b))\n"
    },
    {
      "index": 4,
      "text": "\n\n#-----Solution-----\n"
    },
    {
      "index": 5,
      "text": "\n\n#-----Solution-----\n\n#The solution is to compute the number of first type turns that can be played\n#and the number of second type turns that can be played. The maximum will be the\n#maximum of the two.\n\n#The number of first type turns that can be played is the maximum n such that\n#k-n*a >= 0.\n\n#The number of second type turns that can be played is the maximum n such that\n#k-n*b >= 0.\n\n#If the maximum of the two is less than n, then the answer is -1. If the maximum\n#of the two is 0, then the answer is 0. Otherwise, the answer is the maximum of\n#the two.\n\nimport math\n\ndef max_turns(k, n, a, b):\n    max_turns_1 = math.floor(k/a)\n    max_turns_2 = math.floor(k/b)\n    if max(max_turns_1, max_turns_2) == 0:\n        return 0\n    if max(max_turns_1, max_turns_2) < n:\n        return -1\n    return max(max_turns_1, max_turns_2)\n\nq = int(input())\nfor _ in range(q):\n    k, n, a, b = map(int, input().split())\n    print(max_turns(k, n, a, b))\n"
    },
    {
      "index": 6,
      "text": "\nfor i in range(int(input())):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    b = list(map(int, input().split()))\n    b.sort()\n    for j in range(n):\n        for k in range(n):\n            if (a[j]+b[k] < k):\n                print(\"No\")\n                break\n        else:\n            continue\n        break\n    else:\n        print(\"Yes\")\n"
    },
    {
      "index": 7,
      "text": "\n\n#-----Solution-----\n\n#The solution is to compute the number of first type turns that can be played\n#and the number of second type turns that can be played. The maximum will be the\n#maximum of the two.\n\n#The number of first type turns that can be played is the maximum n such that\n#k-n*a >= 0\n\n#The number of second type turns that can be played is the maximum n such that\n#k-n*b >= 0\n\n#If the maximum of the two is less than n, then the answer is -1. Otherwise the\n#answer is the maximum of the two.\n\nimport math\n\ndef max_turns(k, n, a, b):\n    max_turns_1 = math.floor(k/a)\n    max_turns_2 = math.floor(k/b)\n    if max(max_turns_1, max_turns_2) < n:\n        return -1\n    return max(max_turns_1, max_turns_2)\n\nq = int(input())\nfor _ in range(q):\n    k, n, a, b = map(int, input().split())\n    print(max_turns(k, n, a, b))\n"
    }
  ],
  "created": 1650627910,
  "object": "edit"
}
2022-04-22 11:45:31.627033 fix syntax errors 8 ['\n\n#-----Solution-----\n\n#The solution is to compute the number of first type turns that can be played and the number of second type turns that can be played. The maximum will be the maximum of the two.\n\n#The number of first type turns that can be played is the maximum n such that k-n*a >= 0\n\n#The number of second type turns that can be played is the maximum n such that k-n*b >= 0\n\n#If the maximum of the two is less than n, then the answer is -1. Otherwise, the\n#answer is the maximum of the two.\n\nimport math\n\ndef max_turns(k, n, a, b):\n    max_turns_1 = math.floor(k/a)\n    max_turns_2 = math.floor(k/b)\n    if max(max_turns_1, max_turns_2) < n:\n        return -1\n    return max(max_turns_1, max_turns_2)\n\nq = int(input())\nfor _ in range(q):\n    k, n, a, b = map(int, input().split())\n    print(max_turns(k, n, a, b))\n', '#-----Solution-----\n\n\n#The solution is to split the number into the number of elements of the first\n#type and the number of elements of the second type. Then, the answer is the\n#minimum of the number of elements that can be removed from the first type and\n#the number of elements that can be removed from the second type.\n\n#The number of elements that can be removed from the first type is the maximum\n#number of elements of the second type that can be added such that the number of\n#elements of the second type is less than or equal to the target number of\n#elements of the second type.\n\n#The number of elements that can be removed from the second type is the maximum\n#number of elements of the first type that can be added such that the number of\n#elements of the second type is less than or equal to the target number of\n#elements of the second type.\n\n#If the minimum of the two is less than n, then the answer is -1. Otherwise, the\n#answer is the minimum of the two.\n\ndef max_turns(n, a, b, c, d):\n    max_turns_1 = d//b - a\n    max_turns_2 = c//a - b\n    if min(max_turns_1, max_turns_2) < n:\n        return -1\n    return min(max_turns_1, max_turns_2)\n\nq = int(input())\nfor _ in range(q):\n    n, a, b, c, d = map(int, input().split())\n    print(max_turns(n, a, b, c, d))\n\n#The solution is to compute the number of first type turns that can be played\n#and the number of second type turns that can be played. The maximum will be the\n#maximum of the two.\n\n#The number of first type turns that can be played is the maximum n such that\n#k-n*a >= 0\n\n#The number of second type turns that can be played is the maximum n such that\n#k-n*b >= 0\n\n#If the maximum of the two is less than n, then the answer is -1. Otherwise, the\n#answer is the maximum of the two.\n\nimport math\n#\n# def max_turns(k, n, a, b):\n#     max_turns_1 = math.floor(k/a)\n#     max_turns_2 = math.floor(k/b)\n#     if max(max_turns_1, max_turns_2) < n:\n#         return -1\n#     return max(max_turns_1, max_turns_2)\n#\n# q = int(input())\n# for _ in range(q):\n#     k, n, a, b = map(int, input().split())\n#     print(max_turns(k, n, a, b))\n', '\n\n#-----Solution-----\n\n#The solution is to compute the number of first type turns that can be played\n#and the number of second type turns that can be played. The maximum will be the\n#maximum of the two.\n\n#The number of first type turns that can be played is the maximum n such that\n#k-n*a >= 0\n\n#The number of second type turns that can be played is the maximum n such that\n#k-n*b >= 0\n\n#If the maximum of the two is less than n, then the answer is -1.\n#Otherwise, the answer is the maximum of the two.\n\nimport math\n\ndef max_turns(k, n, a, b):\n    max_turns_1 = math.floor(k/a)\n    max_turns_2 = math.floor(k/b)\n    if max(max_turns_1, max_turns_2) < n:\n        return -1\n    return max(max_turns_1, max_turns_2)\n\nq = int(input())\nfor _ in range(q):\n    k, n, a, b = map(int, input().split())\n    print(max_turns(k, n, a, b))\n', '\n\n#-----Solution-----\n\n#The solution is to compute the number of first type turns that can be played\n#and the number of second type turns that can be played. The maximum will be the\n#maximum of the two.\n\n#The number of first type turns that can be played is the maximum n such that\n#k-n*a >= 0.\n\n#The number of second type turns that can be played is the maximum n such that\n#k-n*b >= 0.\n\n#If the maximum of the two is less than n, then the answer is -1. Otherwise, the\n#answer is the maximum of the two.\n\nimport math\n\ndef max_turns(k, n, a, b):\n    max_turns_1 = math.floor(k/a)\n    max_turns_2 = math.floor(k/b)\n    if max(max_turns_1, max_turns_2) < n:\n        return -1\n    return max(max_turns_1, max_turns_2)\n\nq = int(input())\nfor _ in range(q):\n    k, n, a, b = map(int, input().split())\n    print(max_turns(k, n, a, b))\n', '\n\n#-----Solution-----\n', '\n\n#-----Solution-----\n\n#The solution is to compute the number of first type turns that can be played\n#and the number of second type turns that can be played. The maximum will be the\n#maximum of the two.\n\n#The number of first type turns that can be played is the maximum n such that\n#k-n*a >= 0.\n\n#The number of second type turns that can be played is the maximum n such that\n#k-n*b >= 0.\n\n#If the maximum of the two is less than n, then the answer is -1. If the maximum\n#of the two is 0, then the answer is 0. Otherwise, the answer is the maximum of\n#the two.\n\nimport math\n\ndef max_turns(k, n, a, b):\n    max_turns_1 = math.floor(k/a)\n    max_turns_2 = math.floor(k/b)\n    if max(max_turns_1, max_turns_2) == 0:\n        return 0\n    if max(max_turns_1, max_turns_2) < n:\n        return -1\n    return max(max_turns_1, max_turns_2)\n\nq = int(input())\nfor _ in range(q):\n    k, n, a, b = map(int, input().split())\n    print(max_turns(k, n, a, b))\n', '\nfor i in range(int(input())):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    b = list(map(int, input().split()))\n    b.sort()\n    for j in range(n):\n        for k in range(n):\n            if (a[j]+b[k] < k):\n                print("No")\n                break\n        else:\n            continue\n        break\n    else:\n        print("Yes")\n', '\n\n#-----Solution-----\n\n#The solution is to compute the number of first type turns that can be played\n#and the number of second type turns that can be played. The maximum will be the\n#maximum of the two.\n\n#The number of first type turns that can be played is the maximum n such that\n#k-n*a >= 0\n\n#The number of second type turns that can be played is the maximum n such that\n#k-n*b >= 0\n\n#If the maximum of the two is less than n, then the answer is -1. Otherwise the\n#answer is the maximum of the two.\n\nimport math\n\ndef max_turns(k, n, a, b):\n    max_turns_1 = math.floor(k/a)\n    max_turns_2 = math.floor(k/b)\n    if max(max_turns_1, max_turns_2) < n:\n        return -1\n    return max(max_turns_1, max_turns_2)\n\nq = int(input())\nfor _ in range(q):\n    k, n, a, b = map(int, input().split())\n    print(max_turns(k, n, a, b))\n']
2022-04-22 11:45:31.627225 size on output set 8
2022-04-22 11:45:31.627239 num operations 1
2022-04-22 11:45:31.627245 size on input set 1
2022-04-22 11:45:31.627432 using api key sunu
2022-04-22 11:45:45.580017 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        k, n, a, b = map(int, sys.stdin.readline().split())\n        if a <= b:\n            print(-1)\n            continue\n        if k < a:\n            print(0)\n            continue\n        if k >= a:\n            print(n)\n            continue\n        ans = 0\n        while k >= a:\n            k -= a\n            ans += 1\n        if k < a:\n            print(ans)\n        else:\n            print(ans + 1)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        k, n, a, b = map(int, sys.stdin.readline().split())\n        if a <= b:\n            print(-1)\n            continue\n        if k <= a:\n            print(0)\n            continue\n        if k >= a + b:\n            print(n)\n            continue\n        ans = 0\n        while k >= a + b:\n            k -= a\n            ans += 1\n        if k <= a:\n            print(ans)\n        else:\n            print(ans + 1)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport collections\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    d = collections.defaultdict(list)\n    for i in range(n):\n        a, b = map(int, input().split())\n        d[a].append(b)\n    for a in d:\n        d[a].sort()\n    for _ in range(m):\n        a, b = map(int, input().split())\n        if not d[a]:\n            print(-1)\n            continue\n        if b > d[a][-1]:\n            print(-1)\n            continue\n        l = 0\n        r = len(d[a]) - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if d[a][mid] == b:\n                print(mid + 1)\n                break\n            elif d[a][mid] > b:\n                r = mid - 1\n            else:\n                l = mid + 1\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\nimport sys\n\ndef main():\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        k, n, a, b = map(int, sys.stdin.readline().split())\n        if a <= b:\n            print(\"-1\")\n            continue\n        if k < a:\n            print(\"0\")\n            continue\n        if k >= a + b:\n            print(\"n\")\n            continue\n        ans = 0\n        while k >= a + b:\n            k -= a\n            ans += 1\n        if k < a:\n            print(\"ans\")\n        else:\n            print(\"ans + 1\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\ndef main():\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        k, n, a, b = map(int, sys.stdin.readline().split())\n        if a <= b:\n            print(-1)\n            continue\n        if k < a:\n            print(0)\n            continue\n        if k >= a + b:\n            print(n)\n            continue\n        ans = 0\n        while k >= a + b:\n            k -= a\n            ans += 1\n        if k < a:\n            print(ans)\n        else:\n            print(ans + 1)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\ndef main():\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        k, n, a, b = map(int, sys.stdin.readline().split())\n        if a <= b:\n            print(-1)\n            continue\n        if k < a:\n            print(0)\n            continue\n        if k >= a + b:\n            print(n)\n            continue\n        ans = 0\n        while k >= a + b:\n            k -= a\n            ans += 1\n        if k < a:\n            print(ans)\n        else:\n            print(ans + 1)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\ndef main():\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        k, n, a, b = map(int, sys.stdin.readline().split())\n        if a <= b:\n            print(-1)\n            continue\n        if k < a:\n            print(0)\n            continue\n        if k >= a + b:\n            print(n)\n            continue\n        ans = 0\n        while k >= a + b:\n            k -= a\n            ans += 1\n        if k < a:\n            print(ans)\n        else:\n            print(ans + 1)\n            \nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "import sys\n\ndef main():\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        k, n, a, b = map(int, sys.stdin.readline().split())\n        if a <= b:\n            print(-1)\n            continue\n        if k < a:\n            print(0)\n            continue\n        if k >= a + b:\n            print(n)\n            continue\n        ans = 0\n        while k >= a + b:\n            k -= a\n            ans += 1\n        if k < a:\n            print(ans)\n        else:\n            print(ans + 1)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650627931,
  "object": "edit"
}
2022-04-22 11:45:45.580301 fix syntax errors 8 ['\n\nimport sys\n\ndef main():\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        k, n, a, b = map(int, sys.stdin.readline().split())\n        if a <= b:\n            print(-1)\n            continue\n        if k < a:\n            print(0)\n            continue\n        if k >= a:\n            print(n)\n            continue\n        ans = 0\n        while k >= a:\n            k -= a\n            ans += 1\n        if k < a:\n            print(ans)\n        else:\n            print(ans + 1)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef main():\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        k, n, a, b = map(int, sys.stdin.readline().split())\n        if a <= b:\n            print(-1)\n            continue\n        if k <= a:\n            print(0)\n            continue\n        if k >= a + b:\n            print(n)\n            continue\n        ans = 0\n        while k >= a + b:\n            k -= a\n            ans += 1\n        if k <= a:\n            print(ans)\n        else:\n            print(ans + 1)\n\nif __name__ == "__main__":\n    main()\n', "\nimport collections\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    d = collections.defaultdict(list)\n    for i in range(n):\n        a, b = map(int, input().split())\n        d[a].append(b)\n    for a in d:\n        d[a].sort()\n    for _ in range(m):\n        a, b = map(int, input().split())\n        if not d[a]:\n            print(-1)\n            continue\n        if b > d[a][-1]:\n            print(-1)\n            continue\n        l = 0\n        r = len(d[a]) - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if d[a][mid] == b:\n                print(mid + 1)\n                break\n            elif d[a][mid] > b:\n                r = mid - 1\n            else:\n                l = mid + 1\n\nif __name__ == '__main__':\n    main()\n", '\n\nimport sys\n\ndef main():\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        k, n, a, b = map(int, sys.stdin.readline().split())\n        if a <= b:\n            print("-1")\n            continue\n        if k < a:\n            print("0")\n            continue\n        if k >= a + b:\n            print("n")\n            continue\n        ans = 0\n        while k >= a + b:\n            k -= a\n            ans += 1\n        if k < a:\n            print("ans")\n        else:\n            print("ans + 1")\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        k, n, a, b = map(int, sys.stdin.readline().split())\n        if a <= b:\n            print(-1)\n            continue\n        if k < a:\n            print(0)\n            continue\n        if k >= a + b:\n            print(n)\n            continue\n        ans = 0\n        while k >= a + b:\n            k -= a\n            ans += 1\n        if k < a:\n            print(ans)\n        else:\n            print(ans + 1)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        k, n, a, b = map(int, sys.stdin.readline().split())\n        if a <= b:\n            print(-1)\n            continue\n        if k < a:\n            print(0)\n            continue\n        if k >= a + b:\n            print(n)\n            continue\n        ans = 0\n        while k >= a + b:\n            k -= a\n            ans += 1\n        if k < a:\n            print(ans)\n        else:\n            print(ans + 1)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef main():\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        k, n, a, b = map(int, sys.stdin.readline().split())\n        if a <= b:\n            print(-1)\n            continue\n        if k < a:\n            print(0)\n            continue\n        if k >= a + b:\n            print(n)\n            continue\n        ans = 0\n        while k >= a + b:\n            k -= a\n            ans += 1\n        if k < a:\n            print(ans)\n        else:\n            print(ans + 1)\n            \nif __name__ == "__main__":\n    main()\n', 'import sys\n\ndef main():\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        k, n, a, b = map(int, sys.stdin.readline().split())\n        if a <= b:\n            print(-1)\n            continue\n        if k < a:\n            print(0)\n            continue\n        if k >= a + b:\n            print(n)\n            continue\n        ans = 0\n        while k >= a + b:\n            k -= a\n            ans += 1\n        if k < a:\n            print(ans)\n        else:\n            print(ans + 1)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-22 11:45:45.580477 size on output set 7
