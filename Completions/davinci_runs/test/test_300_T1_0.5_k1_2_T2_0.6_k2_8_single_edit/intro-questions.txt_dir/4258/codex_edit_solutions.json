["\ndef main():\n    A, B, T = map(int, input().split())  # A:\u521d\u671f\u4f4d\u7f6e\u3001B:\u79fb\u52d5\u8ddd\u96e2\u3001T:\u6642\u9593\n    print(B * (T // A + 1))\n\n\nif __name__ == '__main__':\n    main()\n", "var fs = require(\"fs\");\n\n// Asynchronous read\nfs.readFile('input.txt', function (err, data) {\n   if (err) {\n      return console.error(err);\n   }\n   console.log(\"Asynchronous read: \" + data.toString());\n});\n\n// Synchronous read\nvar data = fs.readFileSync('input.txt');\nconsole.log(\"Synchronous read: \" + data.toString());\n\nconsole.log(\"Program Ended\");\n", "{\n  \"command\": \"create\",\n  \"type\": \"file\",\n  \"data\" : {\n    \"name\": \"file name\",\n    \"content\": \"file content\"\n  }\n}\n\n{\n  \"command\": \"create\",\n  \"type\": \"file\",\n  \"data\" : {\n    \"name\": \"file name\",\n    \"content\": \"file content\"\n  }\n}\n", "<?php\n\nnamespace App\\Controller;\n\nuse App\\Entity\\File;\nuse App\\Form\\FileType;\nuse App\\Repository\\FileRepository;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\n/**\n * @Route(\"/file\")\n */\nclass FileController extends AbstractController\n{\n    /**\n     * @Route(\"/\", name=\"file_index\", methods={\"GET\"})\n     */\n    public function index(FileRepository $fileRepository): Response\n    {\n        return $this->render('file/index.html.twig', [\n            'files' => $fileRepository->findAll(),\n        ]);\n    }\n\n    /**\n     * @Route(\"/new\", name=\"file_new\", methods={\"GET\",\"POST\"})\n     */\n    public function new(Request $request): Response\n    {\n        $file = new File();\n        $form = $this->createForm(FileType::class, $file);\n        $form->handleRequest($request);\n\n        if ($form->isSubmitted() && $form->isValid()) {\n            $entityManager = $this->getDoctrine()->getManager();\n            $entityManager->persist($file);\n            $entityManager->flush();\n\n            return $this->redirectToRoute('file_index');\n        }\n\n        return $this->render('file/new.html.twig', [\n            'file' => $file,\n            'form' => $form->createView(),\n        ]);\n    }\n\n    /**\n     * @Route(\"/{id}\", name=\"file_show\", methods={\"GET\"})\n     */\n    public function show(File $file): Response\n    {\n        return $this->render('file/show.html.twig', [\n            'file' => $file,\n        ]);\n    }\n\n    /**\n     * @Route(\"/{id}/edit\", name=\"file_edit\", methods={\"GET\",\"POST\"})\n     */\n    public function edit(Request $request, File $file): Response\n    {\n        $form = $this->createForm(FileType::class, $file);\n        $form->handleRequest($request);\n\n        if ($form->isSubmitted() && $form->isValid()) {\n            $this->getDoctrine()->getManager()->flush();\n\n            return $this->redirectToRoute('file_index');\n        }\n\n        return $this->render('file/edit.html.twig', [\n            'file' => $file,\n            'form' => $form->createView(),\n        ]);\n    }\n\n    /**\n     * @Route(\"/{id}\", name=\"file_delete\", methods={\"DELETE\"})\n     */\n    public function delete(Request $request, File $file): Response\n    {\n        if ($this->isCsrfTokenValid('delete'.$file->getId(), $request->request->get('_token'))) {\n            $entityManager = $this->getDoctrine()->getManager();\n            $entityManager->remove($file);\n            $entityManager->flush();\n        }\n\n        return $this->redirectToRoute('file_index');\n    }\n}\n", "var fs = require('fs');\n\n// Sync\nconsole.log(1);\nvar data = fs.readFileSync('data.txt', {encoding:'utf8'});\nconsole.log(data);\n\n// Async\nconsole.log(2);\nfs.readFile('data.txt', {encoding:'utf8'}, function(err, data){\n\tconsole.log(3);\n\tconsole.log(data);\n});\nconsole.log(4);\n\n//\n// \ud30c\uc77c \uc77d\uae30\n//\n// \ub3d9\uae30\uc2dd \uc77d\uae30\nvar data = fs.readFileSync('data.txt', {encoding:'utf8'});\nconsole.log(data);\n\n// \ube44\ub3d9\uae30\uc2dd \uc77d\uae30\nfs.readFile('data.txt', {encoding:'utf8'}, function(err, data){\n\tconsole.log(data);\n});\n\n//\n// \ud30c\uc77c \uc4f0\uae30\n//\n// \ub3d9\uae30\uc2dd \uc4f0\uae30\n//\nvar data = \"Hello World...\\n\";\nfs.writeFileSync('data2.txt', data);\n\n// \ube44\ub3d9\uae30\uc2dd \uc4f0\uae30\nvar data = \"Hello World...\\n\";\nfs.writeFile('data2.txt', data);\n\n//\n// \ud30c\uc77c \uc0ad\uc81c\n//\n// \ub3d9\uae30\uc2dd \uc0ad\uc81c\nfs.unlinkSync('data2.txt');\n\n// \ube44\ub3d9\uae30\uc2dd \uc0ad\uc81c\nfs.unlink('data2.txt');\n\n//\n// \ud3f4\ub354 \uc0dd\uc131\n//\n// \ub3d9\uae30\uc2dd \uc0dd\uc131\nfs.mkdirSync('docs');\nfs.mkdirSync('docs/node');\n\n// \ube44\ub3d9\uae30\uc2dd \uc0dd\uc131\nfs.mkdir('docs');\nfs.mkdir('docs/node');\n\n//\n// \ud3f4\ub354 \uc0ad\uc81c\n//\n// \ub3d9\uae30\uc2dd \uc0ad\uc81c\nfs.rmdirSync('docs/node');\nfs.rmdirSync('docs');\n\n// \ube44\ub3d9\uae30\uc2dd \uc0ad\uc81c\nfs.rmdir('docs/node');\nfs.rmdir('docs');\n\n//\n// \ud30c\uc77c\uc774\ub3d9\n//\n// \ub3d9\uae30\uc2dd \uc774\ub3d9\nfs.renameSync('data.txt', 'node.txt');\n\n// \ube44\ub3d9\uae30\uc2dd \uc774\ub3d9\nfs.rename('data.txt', 'node.txt');\n\n//\n// \ud30c\uc77c \ubcf5\uc0ac\n//\n// \ub3d9\uae30\uc2dd \ubcf5\uc0ac\nfs.copyFileSync('node.txt', 'node2.txt');\n\n// \ube44\ub3d9\uae30\uc2dd \ubcf5\uc0ac\nfs.copyFile('node.txt', 'node2.txt');\n", "def main():\n    A, B, T = map(int, input().split())\n    print(B * (T // A))\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    A, B, T = map(int, input().split())\n    print(B * (T // A + 1))\n\n\nif __name__ == '__main__':\n    main()\n", "#this is a file\n", "from urllib.request import Request, urlopen\nfrom bs4 import BeautifulSoup\nimport requests\nimport time\n\n\n# url = 'https://www.google.com/search?q=hello&rlz=1C1GCEA_enUS788US788&oq=hello&aqs=chrome..69i57j0l5.4270j0j4&sourceid=chrome&ie=UTF-8'\n# word = input(\"Enter a word: \")\n#\n# url = 'https://www.google.com/search?q=' + word + '&rlz=1C1GCEA_enUS788US788&oq=' + word + '&aqs=chrome..69i57j0l5.4270j0j4&sourceid=chrome&ie=UTF-8'\n#\n# print(url)\n\n\n\n# url = 'https://www.google.com/search?q=hello&rlz=1C1GCEA_enUS788US788&oq=hello&aqs=chrome..69i57j0l5.4270j0j4&sourceid=chrome&ie=UTF-8'\n\n\n\ndef main():\n    word = input(\"Enter a word: \")\n\n    url = 'https://www.google.com/search?q=' + word + '&rlz=1C1GCEA_enUS788US788&oq=' + word + '&aqs=chrome..69i57j0l5.4270j0j4&sourceid=chrome&ie=UTF-8'\n\n    r = requests.get(url)\n    soup = BeautifulSoup(r.content, \"html.parser\")\n\n\n    with open('test.txt', 'w') as file:\n        for link in soup.find_all('a'):\n            print(link.get('href'))\n            file.write(str(link.get('href')))\n            file.write('\\n')\n\n    time.sleep(10)\n\n\n\n\nif __name__ == '__main__':\n    main()\n\n\n\n", "import os\nimport re\n\n# path = rn", "def main():\n    A, B, T = map(int, input().split())\n    print(B * (T // A + 1))\n\n\nif __name__ == '__main__':\n    main()\n"]