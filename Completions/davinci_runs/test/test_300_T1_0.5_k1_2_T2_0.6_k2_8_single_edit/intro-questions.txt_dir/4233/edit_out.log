2022-04-22 11:21:03.759977 num operations 1
2022-04-22 11:21:03.759998 size on input set 1
2022-04-22 11:21:03.760182 using api key derek
2022-04-22 11:21:29.423721 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef stars(n,m,grid):\n    #print(grid)\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                s = 1\n                while i+s < n and i-s >=0 and j+s < m and j-s >= 0:\n                    if grid[i+s][j] == '*' and grid[i-s][j] == '*' and grid[i][j+s] == '*' and grid[i][j-s] == '*':\n                        grid[i+s][j] = '.'\n                        grid[i-s][j] = '.'\n                        grid[i][j+s] = '.'\n                        grid[i][j-s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i+1,j+1,s)\n    if k == 0:\n        print(-1)\n\n\nn,m = map(int,input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n,m,grid)\n"
    },
    {
      "index": 1,
      "text": "print(0)\n"
    },
    {
      "index": 2,
      "text": "\n\ndef stars(n,m,grid):\n    #print(grid)\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                s = 1\n                while i+s < n and i-s >= 0 and j+s < m and j-s >= 0:\n                    if grid[i+s][j] == '*' and grid[i-s][j] == '*' and grid[i][j+s] == '*' and grid[i][j-s] == '*': \n                        grid[i+s][j] = '.'\n                        grid[i-s][j] = '.'\n                        grid[i][j+s] = '.'\n                        grid[i][j-s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i+1,j+1,s-1)\n    if k == 0:\n        print(-1)\n\n\nn,m = map(int,input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n,m,grid)\n"
    },
    {
      "index": 3,
      "text": "\n\ndef stars(n,m,grid):\n    #print(grid)\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                s = 1\n                while i+s < n and i-s >=0 and j+s < m and j-s >= 0:\n                    if grid[i+s][j] == '*' and grid[i-s][j] == '*' and grid[i][j+s] == '*' and grid[i][j-s] == '*':\n                        grid[i+s][j] = '.'\n                        grid[i-s][j] = '.'\n                        grid[i][j+s] = '.'\n                        grid[i][j-s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i+1,j+1,s-1,sep=\" \")\n    if k == 0:\n        print(-1)\n\n\nn, m = map(int, input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n, m, grid)\n"
    },
    {
      "index": 4,
      "text": "def stars(n, m, grid):\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                s = 1\n                while i+s < n and i-s >= 0 and j+s < m and j-s >= 0:\n                    if grid[i+s][j] == '*' and grid[i-s][j] == '*' and grid[i][j+s] == '*' and grid[i][j-s] == '*':\n                        grid[i+s][j] = '.'\n                        grid[i-s][j] = '.'\n                        grid[i][j+s] = '.'\n                        grid[i][j-s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i+1, j+1, s-1)\n    if k == 0:\n        print(-1)\n\n\nn, m = map(int, input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n,m,grid)\n"
    },
    {
      "index": 5,
      "text": "\n\ndef stars(n,m,grid):\n    #print(grid)\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                s = 1\n                while i+s < n and i-s >=0 and j+s < m and j-s >= 0: #condition to check if star is in the middle of the grid\n                    if grid[i+s][j] == '*' and grid[i-s][j] == '*' and grid[i][j+s] == '*' and grid[i][j-s] == '*':\n                        grid[i+s][j] = '.'\n                        grid[i-s][j] = '.'\n                        grid[i][j+s] = '.'\n                        grid[i][j-s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i+1,j+1,s-1)\n    if k == 0:\n        print(-1)\n\n\nn,m = map(int,input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n,m,grid)\n"
    },
    {
      "index": 6,
      "text": "\n\ndef stars(n,m,grid):\n    #print(grid)\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                s = 1\n                while i+s < n and i-s >=0 and j+s < m and j-s >= 0:\n                    if grid[i+s][j] == '*' and grid[i-s][j] == '*' and grid[i][j+s] == '*' and grid[i][j-s] == '*':\n                        grid[i+s][j] = '.'\n                        grid[i-s][j] = '.'\n                        grid[i][j+s] = '.'\n                        grid[i][j-s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i+1,j+1,s-1)\n    if k == 0:\n        print('-1')\n\n\nn,m = map(int,input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n,m,grid)\n"
    },
    {
      "index": 7,
      "text": "\ndef stars(n,m,grid):\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                s = 1\n                    if grid[i + s][j] == '*' and grid[i - s][j] == '*' and grid[i][j + s] == '*' and grid[i][j - s] == '*':\n                        grid[i + s][j] = '.'\n                        grid[i - s][j] = '.'\n                        grid[i][j + s] = '.'\n                        grid[i][j - s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i + 1, j + 1, s - 1)\n    if k == 0:\n        print(-1)\n\n\n\nn, m = map(int, input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n, m, grid)\n"
    }
  ],
  "created": 1650626463,
  "object": "edit"
}
2022-04-22 11:21:29.424066 fix syntax errors 8 ["\n\ndef stars(n,m,grid):\n    #print(grid)\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                s = 1\n                while i+s < n and i-s >=0 and j+s < m and j-s >= 0:\n                    if grid[i+s][j] == '*' and grid[i-s][j] == '*' and grid[i][j+s] == '*' and grid[i][j-s] == '*':\n                        grid[i+s][j] = '.'\n                        grid[i-s][j] = '.'\n                        grid[i][j+s] = '.'\n                        grid[i][j-s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i+1,j+1,s)\n    if k == 0:\n        print(-1)\n\n\nn,m = map(int,input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n,m,grid)\n", 'print(0)\n', "\n\ndef stars(n,m,grid):\n    #print(grid)\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                s = 1\n                while i+s < n and i-s >= 0 and j+s < m and j-s >= 0:\n                    if grid[i+s][j] == '*' and grid[i-s][j] == '*' and grid[i][j+s] == '*' and grid[i][j-s] == '*': \n                        grid[i+s][j] = '.'\n                        grid[i-s][j] = '.'\n                        grid[i][j+s] = '.'\n                        grid[i][j-s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i+1,j+1,s-1)\n    if k == 0:\n        print(-1)\n\n\nn,m = map(int,input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n,m,grid)\n", '\n\ndef stars(n,m,grid):\n    #print(grid)\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \'*\':\n                k += 1\n                grid[i][j] = \'.\'\n                s = 1\n                while i+s < n and i-s >=0 and j+s < m and j-s >= 0:\n                    if grid[i+s][j] == \'*\' and grid[i-s][j] == \'*\' and grid[i][j+s] == \'*\' and grid[i][j-s] == \'*\':\n                        grid[i+s][j] = \'.\'\n                        grid[i-s][j] = \'.\'\n                        grid[i][j+s] = \'.\'\n                        grid[i][j-s] = \'.\'\n                        s += 1\n                    else:\n                        break\n                print(i+1,j+1,s-1,sep=" ")\n    if k == 0:\n        print(-1)\n\n\nn, m = map(int, input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n, m, grid)\n', "def stars(n, m, grid):\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                s = 1\n                while i+s < n and i-s >= 0 and j+s < m and j-s >= 0:\n                    if grid[i+s][j] == '*' and grid[i-s][j] == '*' and grid[i][j+s] == '*' and grid[i][j-s] == '*':\n                        grid[i+s][j] = '.'\n                        grid[i-s][j] = '.'\n                        grid[i][j+s] = '.'\n                        grid[i][j-s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i+1, j+1, s-1)\n    if k == 0:\n        print(-1)\n\n\nn, m = map(int, input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n,m,grid)\n", "\n\ndef stars(n,m,grid):\n    #print(grid)\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                s = 1\n                while i+s < n and i-s >=0 and j+s < m and j-s >= 0: #condition to check if star is in the middle of the grid\n                    if grid[i+s][j] == '*' and grid[i-s][j] == '*' and grid[i][j+s] == '*' and grid[i][j-s] == '*':\n                        grid[i+s][j] = '.'\n                        grid[i-s][j] = '.'\n                        grid[i][j+s] = '.'\n                        grid[i][j-s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i+1,j+1,s-1)\n    if k == 0:\n        print(-1)\n\n\nn,m = map(int,input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n,m,grid)\n", "\n\ndef stars(n,m,grid):\n    #print(grid)\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                s = 1\n                while i+s < n and i-s >=0 and j+s < m and j-s >= 0:\n                    if grid[i+s][j] == '*' and grid[i-s][j] == '*' and grid[i][j+s] == '*' and grid[i][j-s] == '*':\n                        grid[i+s][j] = '.'\n                        grid[i-s][j] = '.'\n                        grid[i][j+s] = '.'\n                        grid[i][j-s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i+1,j+1,s-1)\n    if k == 0:\n        print('-1')\n\n\nn,m = map(int,input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n,m,grid)\n", "\ndef stars(n,m,grid):\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                s = 1\n                    if grid[i + s][j] == '*' and grid[i - s][j] == '*' and grid[i][j + s] == '*' and grid[i][j - s] == '*':\n                        grid[i + s][j] = '.'\n                        grid[i - s][j] = '.'\n                        grid[i][j + s] = '.'\n                        grid[i][j - s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i + 1, j + 1, s - 1)\n    if k == 0:\n        print(-1)\n\n\n\nn, m = map(int, input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n, m, grid)\n"]
2022-04-22 11:21:29.424246 size on output set 8
2022-04-22 11:21:29.424261 num operations 1
2022-04-22 11:21:29.424267 size on input set 1
2022-04-22 11:21:29.424411 using api key sunu
2022-04-22 11:21:53.517191 fix syntax errors {
  "choices": [
    {
      "error": {
        "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
        "type": "invalid_edit"
      },
      "index": 0
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n,m = map(int,input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if (grid[i][j] == '*'):\n                if (i>0 and j>0 and grid[i-1][j-1] == '*') or (i>0 and grid[i-1][j] == '*') or (i>0 and j<m-1 and grid[i-1][j+1] == '*') or (j>0 and grid[i][j-1] == '*') or (j<m-1 and grid[i][j+1] == '*') or (i<n-1 and j>0 and grid[i+1][j-1] == '*') or (i<n-1 and grid[i+1][j] == '*') or (i<n-1 and j<m-1 and grid[i+1][j+1] == '*'):\n                    stars.append([i+1, j+1, 1])\n                else:\n                    flag = True\n                    r = 0\n                    while(flag):\n                        r += 1\n                        if (i-r < 0 or j-r < 0 or i+r >= n or j+r >= m):\n                            flag = False\n                        else:\n                            if (grid[i-r][j-r] == '*' and grid[i-r][j+r] == '*' and grid[i+r][j-r] == '*' and grid[i+r][j+r] == '*'):\n                                stars.append([i+1, j+1, r+1])\n                            else:\n                                flag = False\n    if (len(stars) == 0):\n        print(\"-1\")\n    else:\n        print(len(stars))\n        for i in range(len(stars)):\n            print(stars[i][0], stars[i][1], stars[i][2])\nmain()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    n,m = map(int,input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if (grid[i][j] == '*'):\n                if (i>0 and j>0 and grid[i-1][j-1] == '*') or (i>0 and grid[i-1][j] == '*') or (i>0 and j<m-1 and grid[i-1][j+1] == '*') or (j>0 and grid[i][j-1] == '*') or (j<m-1 and grid[i][j+1] == '*') or (i<n-1 and j>0 and grid[i+1][j-1] == '*') or (i<n-1 and grid[i+1][j] == '*') or (i<n-1 and j<m-1 and grid[i+1][j+1] == '*'):\n                    stars.append([i+1,j+1,1])\n                else:\n                    flag = True\n                    r = 0\n                    while(flag):\n                        r += 1\n                        if (i-r<0 or j-r<0 or i+r>=n or j+r>=m):\n                            flag = False\n                        else:\n                            if (grid[i-r][j-r] == '*' and grid[i-r][j+r] == '*' and grid[i+r][j-r] == '*' and grid[i+r][j+r] == '*'):\n                                stars.append([i+1,j+1,r+1])\n                            else:\n                                flag = False\n    if (len(stars) == 0):\n        print(\"-1\")\n    else:\n        print(len(stars))\n        for i in range(len(stars)):\n            print(stars[i][0],stars[i][1],stars[i][2])\nmain()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    a = int(input())\n    b = int(input())\n    print(a+b)\n    print(a-b)\n    print(a*b)\nmain()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    stars = []\n    for i in range(n):\n        for j in range(m):\n                if (i > 0 and j > 0 and grid[i - 1][j - 1] == '*') or (i > 0 and grid[i - 1][j] == '*') or (\n                        i > 0 and j < m - 1 and grid[i - 1][j + 1] == '*') or (j > 0 and grid[i][j - 1] == '*') or (\n                        j < m - 1 and grid[i][j + 1] == '*') or (i < n - 1 and j > 0 and grid[i + 1][j - 1] == '*') or (\n                        i < n - 1 and grid[i + 1][j] == '*') or (i < n - 1 and j < m - 1 and grid[i + 1][j + 1] == '*'):\n                    stars.append([i + 1, j + 1, 1])\n                else:\n                    flag = True\n                    r = 0\n                    while (flag):\n                        r += 1\n                        if (i - r < 0 or j - r < 0 or i + r >= n or j + r >= m):\n                            flag = False\n                        else:\n                            if (grid[i - r][j - r] == '*' and grid[i - r][j + r] == '*' and grid[i + r][j - r] == '*' and grid[i + r][j + r] == '*'):\n                                stars.append([i + 1, j + 1, r + 1])\n                            else:\n                                flag = False\n    if (len(stars) == 0):\n        print(\"-1\")\n    else:\n        print(len(stars))\n        for i in range(len(stars)):\n            print(stars[i][0], stars[i][1], stars[i][2])\n\n\nmain()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    n,m = map(int,input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                if i>0 and j>0 and grid[i-1][j-1] == '*' or i>0 and grid[i-1][j] == '*' or i>0 and j<m-1 and grid[i-1][j+1] == '*' or j>0 and grid[i][j-1] == '*' or j<m-1 and grid[i][j+1] == '*' or i<n-1 and j>0 and grid[i+1][j-1] == '*' or i<n-1 and grid[i+1][j] == '*' or i<n-1 and j<m-1 and grid[i+1][j+1] == '*':\n                    stars.append([i+1,j+1,1])\n                else:\n                    flag = True\n                    r = 0\n                    while flag:\n                        r += 1\n                        if i-r<0 or j-r<0 or i+r>=n or j+r>=m:\n                            flag = False\n                        else:\n                            if grid[i-r][j-r] == '*' and grid[i-r][j+r] == '*' and grid[i+r][j-r] == '*' and grid[i+r][j+r] == '*':\n                                stars.append([i+1,j+1,r+1])\n                            else:\n                                flag = False\n    if len(stars) == 0:\n        print(\"-1\")\n    else:\n        print(len(stars))\n        for i in range(len(stars)):\n            print(stars[i][0],stars[i][1],stars[i][2])\nmain()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    n,m = map(int,input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if (grid[i][j] == '*'):\n                if (i>0 and j>0 and grid[i-1][j-1] == '*') or (i>0 and grid[i-1][j] == '*') or (i>0 and j<m-1 and grid[i-1][j+1] == '*') or (j>0 and grid[i][j-1] == '*') or (j<m-1 and grid[i][j+1] == '*') or (i<n-1 and j>0 and grid[i+1][j-1] == '*') or (i<n-1 and grid[i+1][j] == '*') or (i<n-1 and j<m-1 and grid[i+1][j+1] == '*'):\n                    stars.append([i+1,j+1,1])\n                else:\n                    flag = True\n                    r = 0\n                    while(flag):\n                        r += 1\n                        if (i-r<0 or j-r<0 or i+r>=n or j+r>=m):\n                            flag = False\n                        else:\n                            if (grid[i-r][j-r] == '*' and grid[i-r][j+r] == '*' and grid[i+r][j-r] == '*' and grid[i+r][j+r] == '*'):\n                                stars.append([i+1,j+1,r+1])\n                            else:\n                                flag = False\n    if (len(stars) == 0):\n        print(\"-1\")\n    else:\n        print(len(stars))\n        for i in range(len(stars)):\n            print(stars[i][0],stars[i][1],stars[i][2])\nmain()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    n,m = map(int,input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    stars = []\n    for i in range(n):\n        for j in range(m):\n                if (i>0 and j>0 and grid[i-1][j-1] == '*') or (i>0 and grid[i-1][j] == '*') or (i>0 and j<m-1 and grid[i-1][j+1] == '*') or (j>0 and grid[i][j-1] == '*') or (j<m-1 and grid[i][j+1] == '*') or (i<n-1 and j>0 and grid[i+1][j-1] == '*') or (i<n-1 and grid[i+1][j] == '*') or (i<n-1 and j<m-1 and grid[i+1][j+1] == '*') or (i==0 and j==0) or (i==0 and j==m-1) or (i==n-1 and j==0) or (i==n-1 and j==m-1):\n                    stars.append([i+1,j+1,1])\n                else:\n                    flag = True\n                    r = 0\n                    while(flag):\n                        r += 1\n                        if (i-r<0 or j-r<0 or i+r>=n or j+r>=m):\n                            flag = False\n                        else:\n                            if (grid[i-r][j-r] == '*' and grid[i-r][j+r] == '*' and grid[i+r][j-r] == '*' and grid[i+r][j+r] == '*'):\n                                stars.append([i+1,j+1,r+1])\n                            else:\n                                flag = False\n    if (len(stars) == 0):\n        print(\"-1\")\n    else:\n        print(len(stars))\n        for i in range(len(stars)):\n            print(stars[i][0],stars[i][1],stars[i][2])\nmain()\n"
    }
  ],
  "created": 1650626489,
  "object": "edit"
}
2022-04-22 11:21:53.517598 NO RESULT
2022-04-22 11:21:53.517608 {
  "error": {
    "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
    "type": "invalid_edit"
  },
  "index": 0
}
2022-04-22 11:21:53.517660 fix syntax errors 7 ['\n\ndef main():\n    n,m = map(int,input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if (grid[i][j] == \'*\'):\n                if (i>0 and j>0 and grid[i-1][j-1] == \'*\') or (i>0 and grid[i-1][j] == \'*\') or (i>0 and j<m-1 and grid[i-1][j+1] == \'*\') or (j>0 and grid[i][j-1] == \'*\') or (j<m-1 and grid[i][j+1] == \'*\') or (i<n-1 and j>0 and grid[i+1][j-1] == \'*\') or (i<n-1 and grid[i+1][j] == \'*\') or (i<n-1 and j<m-1 and grid[i+1][j+1] == \'*\'):\n                    stars.append([i+1, j+1, 1])\n                else:\n                    flag = True\n                    r = 0\n                    while(flag):\n                        r += 1\n                        if (i-r < 0 or j-r < 0 or i+r >= n or j+r >= m):\n                            flag = False\n                        else:\n                            if (grid[i-r][j-r] == \'*\' and grid[i-r][j+r] == \'*\' and grid[i+r][j-r] == \'*\' and grid[i+r][j+r] == \'*\'):\n                                stars.append([i+1, j+1, r+1])\n                            else:\n                                flag = False\n    if (len(stars) == 0):\n        print("-1")\n    else:\n        print(len(stars))\n        for i in range(len(stars)):\n            print(stars[i][0], stars[i][1], stars[i][2])\nmain()\n', '\ndef main():\n    n,m = map(int,input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if (grid[i][j] == \'*\'):\n                if (i>0 and j>0 and grid[i-1][j-1] == \'*\') or (i>0 and grid[i-1][j] == \'*\') or (i>0 and j<m-1 and grid[i-1][j+1] == \'*\') or (j>0 and grid[i][j-1] == \'*\') or (j<m-1 and grid[i][j+1] == \'*\') or (i<n-1 and j>0 and grid[i+1][j-1] == \'*\') or (i<n-1 and grid[i+1][j] == \'*\') or (i<n-1 and j<m-1 and grid[i+1][j+1] == \'*\'):\n                    stars.append([i+1,j+1,1])\n                else:\n                    flag = True\n                    r = 0\n                    while(flag):\n                        r += 1\n                        if (i-r<0 or j-r<0 or i+r>=n or j+r>=m):\n                            flag = False\n                        else:\n                            if (grid[i-r][j-r] == \'*\' and grid[i-r][j+r] == \'*\' and grid[i+r][j-r] == \'*\' and grid[i+r][j+r] == \'*\'):\n                                stars.append([i+1,j+1,r+1])\n                            else:\n                                flag = False\n    if (len(stars) == 0):\n        print("-1")\n    else:\n        print(len(stars))\n        for i in range(len(stars)):\n            print(stars[i][0],stars[i][1],stars[i][2])\nmain()\n', '\n\ndef main():\n    a = int(input())\n    b = int(input())\n    print(a+b)\n    print(a-b)\n    print(a*b)\nmain()\n', '\n\ndef main():\n    n, m = map(int, input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    stars = []\n    for i in range(n):\n        for j in range(m):\n                if (i > 0 and j > 0 and grid[i - 1][j - 1] == \'*\') or (i > 0 and grid[i - 1][j] == \'*\') or (\n                        i > 0 and j < m - 1 and grid[i - 1][j + 1] == \'*\') or (j > 0 and grid[i][j - 1] == \'*\') or (\n                        j < m - 1 and grid[i][j + 1] == \'*\') or (i < n - 1 and j > 0 and grid[i + 1][j - 1] == \'*\') or (\n                        i < n - 1 and grid[i + 1][j] == \'*\') or (i < n - 1 and j < m - 1 and grid[i + 1][j + 1] == \'*\'):\n                    stars.append([i + 1, j + 1, 1])\n                else:\n                    flag = True\n                    r = 0\n                    while (flag):\n                        r += 1\n                        if (i - r < 0 or j - r < 0 or i + r >= n or j + r >= m):\n                            flag = False\n                        else:\n                            if (grid[i - r][j - r] == \'*\' and grid[i - r][j + r] == \'*\' and grid[i + r][j - r] == \'*\' and grid[i + r][j + r] == \'*\'):\n                                stars.append([i + 1, j + 1, r + 1])\n                            else:\n                                flag = False\n    if (len(stars) == 0):\n        print("-1")\n    else:\n        print(len(stars))\n        for i in range(len(stars)):\n            print(stars[i][0], stars[i][1], stars[i][2])\n\n\nmain()\n', '\n\ndef main():\n    n,m = map(int,input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \'*\':\n                if i>0 and j>0 and grid[i-1][j-1] == \'*\' or i>0 and grid[i-1][j] == \'*\' or i>0 and j<m-1 and grid[i-1][j+1] == \'*\' or j>0 and grid[i][j-1] == \'*\' or j<m-1 and grid[i][j+1] == \'*\' or i<n-1 and j>0 and grid[i+1][j-1] == \'*\' or i<n-1 and grid[i+1][j] == \'*\' or i<n-1 and j<m-1 and grid[i+1][j+1] == \'*\':\n                    stars.append([i+1,j+1,1])\n                else:\n                    flag = True\n                    r = 0\n                    while flag:\n                        r += 1\n                        if i-r<0 or j-r<0 or i+r>=n or j+r>=m:\n                            flag = False\n                        else:\n                            if grid[i-r][j-r] == \'*\' and grid[i-r][j+r] == \'*\' and grid[i+r][j-r] == \'*\' and grid[i+r][j+r] == \'*\':\n                                stars.append([i+1,j+1,r+1])\n                            else:\n                                flag = False\n    if len(stars) == 0:\n        print("-1")\n    else:\n        print(len(stars))\n        for i in range(len(stars)):\n            print(stars[i][0],stars[i][1],stars[i][2])\nmain()\n', '\n\ndef main():\n    n,m = map(int,input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if (grid[i][j] == \'*\'):\n                if (i>0 and j>0 and grid[i-1][j-1] == \'*\') or (i>0 and grid[i-1][j] == \'*\') or (i>0 and j<m-1 and grid[i-1][j+1] == \'*\') or (j>0 and grid[i][j-1] == \'*\') or (j<m-1 and grid[i][j+1] == \'*\') or (i<n-1 and j>0 and grid[i+1][j-1] == \'*\') or (i<n-1 and grid[i+1][j] == \'*\') or (i<n-1 and j<m-1 and grid[i+1][j+1] == \'*\'):\n                    stars.append([i+1,j+1,1])\n                else:\n                    flag = True\n                    r = 0\n                    while(flag):\n                        r += 1\n                        if (i-r<0 or j-r<0 or i+r>=n or j+r>=m):\n                            flag = False\n                        else:\n                            if (grid[i-r][j-r] == \'*\' and grid[i-r][j+r] == \'*\' and grid[i+r][j-r] == \'*\' and grid[i+r][j+r] == \'*\'):\n                                stars.append([i+1,j+1,r+1])\n                            else:\n                                flag = False\n    if (len(stars) == 0):\n        print("-1")\n    else:\n        print(len(stars))\n        for i in range(len(stars)):\n            print(stars[i][0],stars[i][1],stars[i][2])\nmain()\n', '\n\ndef main():\n    n,m = map(int,input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    stars = []\n    for i in range(n):\n        for j in range(m):\n                if (i>0 and j>0 and grid[i-1][j-1] == \'*\') or (i>0 and grid[i-1][j] == \'*\') or (i>0 and j<m-1 and grid[i-1][j+1] == \'*\') or (j>0 and grid[i][j-1] == \'*\') or (j<m-1 and grid[i][j+1] == \'*\') or (i<n-1 and j>0 and grid[i+1][j-1] == \'*\') or (i<n-1 and grid[i+1][j] == \'*\') or (i<n-1 and j<m-1 and grid[i+1][j+1] == \'*\') or (i==0 and j==0) or (i==0 and j==m-1) or (i==n-1 and j==0) or (i==n-1 and j==m-1):\n                    stars.append([i+1,j+1,1])\n                else:\n                    flag = True\n                    r = 0\n                    while(flag):\n                        r += 1\n                        if (i-r<0 or j-r<0 or i+r>=n or j+r>=m):\n                            flag = False\n                        else:\n                            if (grid[i-r][j-r] == \'*\' and grid[i-r][j+r] == \'*\' and grid[i+r][j-r] == \'*\' and grid[i+r][j+r] == \'*\'):\n                                stars.append([i+1,j+1,r+1])\n                            else:\n                                flag = False\n    if (len(stars) == 0):\n        print("-1")\n    else:\n        print(len(stars))\n        for i in range(len(stars)):\n            print(stars[i][0],stars[i][1],stars[i][2])\nmain()\n']
2022-04-22 11:21:53.517770 size on output set 7
