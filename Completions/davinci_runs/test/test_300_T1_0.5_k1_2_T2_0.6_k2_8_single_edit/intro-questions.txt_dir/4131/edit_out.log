2022-04-22 10:35:08.284956 num operations 1
2022-04-22 10:35:08.284976 size on input set 1
2022-04-22 10:35:08.285122 using api key derek
2022-04-22 10:35:25.468436 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "n, m = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\nprint(a[n-1] - a[0])\n\nN, M = map(int, input().split())\ncities = []\nfor i in range(M):\n    cities.append(list(map(int, input().split())))\n\ncities.sort(key=lambda x: x[1])\n\nprefectures = [[] for _ in range(N+1)]\n\nfor city in cities:\n    prefectures[city[0]].append(city[1])\nfor i in range(1, N + 1):\n    for j in range(len(prefectures[i])):\n        print(str(i).zfill(6) + str(j + 1).zfill(6))\n"
    },
    {
      "index": 1,
      "text": "\nN, M = map(int, input().split())\ncities = []\nfor i in range(M):\n    cities.append(list(map(int, input().split())))\n\ncities.sort(key=lambda x: x[1])\n\nprefectures = [[] for _ in range(N+1)]\n\nfor city in cities:\n    prefectures[city[0]].append(city[1])\n\nfor i, pref in enumerate(prefectures):\n    if (i != 0):\n        for j, city in enumerate(pref):\n            print(str(i).zfill(6) + str(j+1).zfill(6))\n"
    },
    {
      "index": 2,
      "text": "\n\nN, M = map(int, input().split())\ncities = []\nfor i in range(M):\n    cities.append(list(map(int, input().split())))\ncities.sort(key=lambda x: x[1])\n\nprefectures = [[] for _ in range(N+1)]\n\nfor city in cities:\n    prefectures[city[0]].append(city[1])\n\nfor i in range(1, N+1):\n    for j in range(len(prefectures[i])):\n        print(str(i).zfill(6) + str(j+1).zfill(6))\n"
    },
    {
      "index": 3,
      "text": "\n\na = int(input())\nfor b in range(1, a+1):\n    print(b)\n"
    },
    {
      "index": 4,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nans = 0\nfor i in range(n):\n    if a[i] > b[i]:\n        ans += b[i]\n        a[i] -= b[i]\n        b[i] = 0\n    else:\n        ans += a[i]\n        b[i] -= a[i]\n        a[i] = 0\n\n    if a[i] > 0 and b[i+1] > 0:\n        b[i+1] -= min(a[i], b[i+1])\n        ans += min(a[i], b[i+1])\n\nprint(ans)\n"
    },
    {
      "index": 5,
      "text": "\nN, M = map(int, input().split())\ncities = []\nfor i in range(M):\n    cities.append(list(map(int, input().split())))\n\ncities.sort(key=lambda x: x[0])\n\nprefectures = [[] for _ in range(N+1)]\n\nfor city in cities:\n    prefectures[city[0]].append(city[1])\n\nfor i in range(1, N+1):\n    for j in range(len(prefectures[i])):\n        print(str(i).zfill(6) + str(j+1).zfill(6))\n"
    },
    {
      "index": 6,
      "text": "import sys\n\n\ninput = sys.stdin.readline\n\nn = int(input())\na = list(map(int, input().split()))\n\npos = [0] * (n + 1)\n\nfor i in range(n):\n    pos[a[i]] = i\n\nl, r = 0, n\n\nwhile l < r:\n    m = (l + r) // 2\n    c = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if pos[i] < m:\n            c[i] = 1\n    cc = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if pos[i] < m:\n            cc[i] = 1\n        else:\n            cc[i] = -1\n    for i in range(1, n + 1):\n        cc[i] += cc[i - 1]\n    if max(cc) == 0:\n        l = m + 1\n    else:\n        r = m\n\nans = [0] * (n + 1)\n\nfor i in range(1, n + 1):\n    if pos[i] < l:\n        ans[i] = 1\n\nprint(l)\nprint(*ans[1:])\n"
    },
    {
      "index": 7,
      "text": "\nN, M = map(int, input().split())\ncities = []\nfor i in range(M):\n    cities.append(list(map(int, input().split())))\n\ncities.sort(key=lambda x: x[1])\n\nprefectures = [[] for _ in range(N+1)]\n\nfor city in cities:\n    prefectures[city[0]].append(city[1])\n\nfor i in range(1, N+1):\n    for j in range(len(prefectures[i])):\n        print(str(i).zfill(6) + str(j+1).zfill(6))\n"
    }
  ],
  "created": 1650623708,
  "object": "edit"
}
2022-04-22 10:35:25.468941 fix syntax errors 8 ['n, m = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\nprint(a[n-1] - a[0])\n\nN, M = map(int, input().split())\ncities = []\nfor i in range(M):\n    cities.append(list(map(int, input().split())))\n\ncities.sort(key=lambda x: x[1])\n\nprefectures = [[] for _ in range(N+1)]\n\nfor city in cities:\n    prefectures[city[0]].append(city[1])\nfor i in range(1, N + 1):\n    for j in range(len(prefectures[i])):\n        print(str(i).zfill(6) + str(j + 1).zfill(6))\n', '\nN, M = map(int, input().split())\ncities = []\nfor i in range(M):\n    cities.append(list(map(int, input().split())))\n\ncities.sort(key=lambda x: x[1])\n\nprefectures = [[] for _ in range(N+1)]\n\nfor city in cities:\n    prefectures[city[0]].append(city[1])\n\nfor i, pref in enumerate(prefectures):\n    if (i != 0):\n        for j, city in enumerate(pref):\n            print(str(i).zfill(6) + str(j+1).zfill(6))\n', '\n\nN, M = map(int, input().split())\ncities = []\nfor i in range(M):\n    cities.append(list(map(int, input().split())))\ncities.sort(key=lambda x: x[1])\n\nprefectures = [[] for _ in range(N+1)]\n\nfor city in cities:\n    prefectures[city[0]].append(city[1])\n\nfor i in range(1, N+1):\n    for j in range(len(prefectures[i])):\n        print(str(i).zfill(6) + str(j+1).zfill(6))\n', '\n\na = int(input())\nfor b in range(1, a+1):\n    print(b)\n', '\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nans = 0\nfor i in range(n):\n    if a[i] > b[i]:\n        ans += b[i]\n        a[i] -= b[i]\n        b[i] = 0\n    else:\n        ans += a[i]\n        b[i] -= a[i]\n        a[i] = 0\n\n    if a[i] > 0 and b[i+1] > 0:\n        b[i+1] -= min(a[i], b[i+1])\n        ans += min(a[i], b[i+1])\n\nprint(ans)\n', '\nN, M = map(int, input().split())\ncities = []\nfor i in range(M):\n    cities.append(list(map(int, input().split())))\n\ncities.sort(key=lambda x: x[0])\n\nprefectures = [[] for _ in range(N+1)]\n\nfor city in cities:\n    prefectures[city[0]].append(city[1])\n\nfor i in range(1, N+1):\n    for j in range(len(prefectures[i])):\n        print(str(i).zfill(6) + str(j+1).zfill(6))\n', 'import sys\n\n\ninput = sys.stdin.readline\n\nn = int(input())\na = list(map(int, input().split()))\n\npos = [0] * (n + 1)\n\nfor i in range(n):\n    pos[a[i]] = i\n\nl, r = 0, n\n\nwhile l < r:\n    m = (l + r) // 2\n    c = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if pos[i] < m:\n            c[i] = 1\n    cc = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if pos[i] < m:\n            cc[i] = 1\n        else:\n            cc[i] = -1\n    for i in range(1, n + 1):\n        cc[i] += cc[i - 1]\n    if max(cc) == 0:\n        l = m + 1\n    else:\n        r = m\n\nans = [0] * (n + 1)\n\nfor i in range(1, n + 1):\n    if pos[i] < l:\n        ans[i] = 1\n\nprint(l)\nprint(*ans[1:])\n', '\nN, M = map(int, input().split())\ncities = []\nfor i in range(M):\n    cities.append(list(map(int, input().split())))\n\ncities.sort(key=lambda x: x[1])\n\nprefectures = [[] for _ in range(N+1)]\n\nfor city in cities:\n    prefectures[city[0]].append(city[1])\n\nfor i in range(1, N+1):\n    for j in range(len(prefectures[i])):\n        print(str(i).zfill(6) + str(j+1).zfill(6))\n']
2022-04-22 10:35:25.469010 size on output set 8
2022-04-22 10:35:25.469023 num operations 1
2022-04-22 10:35:25.469029 size on input set 1
2022-04-22 10:35:25.469177 using api key kouti
2022-04-22 10:35:36.049623 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    prefecture_cities = [[] for _ in range(N)]\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefecture_cities[P - 1].append(Y)\n    for P, cities in prefecture_cities.items():\n        cities.sort()\n        for i, city in enumerate(cities):\n            print('{:>06}{:>06}'.format(P + 1, i + 1))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "from collections import defaultdict\n\ndef main():\n    N, M = map(int, input().split())\n    # prefecture_cities = [[] for _ in range(N)]\n    prefecture_cities = defaultdict(list)\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefecture_cities[P].append(Y)\n    for P, cities in prefecture_cities.items():\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:>06}{:>06}'.format(P, i), flush=True)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    N, M = map(int, input().split())\n    # prefecture_cities = [[] for _ in range(N)]\n    prefecture_cities = {}\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        if P in prefecture_cities:\n            prefecture_cities[P].append(Y)\n        else:\n            prefecture_cities[P] = [Y]\n    for prefecture, cities in prefecture_cities.items():\n        for i, city in enumerate(sorted(cities), 1):\n            print('{:>06}{:>06}'.format(prefecture, i))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "from collections import defaultdict\n\ndef main():\n    N, M = map(int, input().split())\n    # prefecture_cities = [[] for _ in range(N)]\n    prefecture_cities = defaultdict(list)\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefecture_cities[P].append(Y)\n    for P, cities in prefecture_cities.items():\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:>06}{:>06}'.format(P, i))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nfrom collections import defaultdict\n\ndef main():\n    N, M = map(int, input().split())\n    prefecture_cities = defaultdict(list)\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefecture_cities[P].append(Y)\n    for P, cities in prefecture_cities.items():\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:>06}{:>06}'.format(P, i))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "from collections import defaultdict\n\n\n\ndef main():\n    N, M = map(int, input().split())\n    # prefecture_cities = [[] for _ in range(N)]\n    prefecture_cities = defaultdict(list)\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefecture_cities[P].append(Y)\n    for P, cities in prefecture_cities.items():\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:>06}{:>06}'.format(P, i))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    prefecture_cities = defaultdict(list)\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefecture_cities[P].append(Y)\n    for P, cities in prefecture_cities.items():\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:>06}{:>06}'.format(P, i))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "from collections import defaultdict\n\ndef main():\n    N, M = map(int, input().split())\n    prefecture_cities = defaultdict(list)\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefecture_cities[P].append(Y)\n    for P, cities in prefecture_cities.items():\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:06}{:06}'.format(P, i))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650623725,
  "object": "edit"
}
2022-04-22 10:35:36.050042 fix syntax errors 8 ["\n\ndef main():\n    N, M = map(int, input().split())\n    prefecture_cities = [[] for _ in range(N)]\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefecture_cities[P - 1].append(Y)\n    for P, cities in prefecture_cities.items():\n        cities.sort()\n        for i, city in enumerate(cities):\n            print('{:>06}{:>06}'.format(P + 1, i + 1))\n\nif __name__ == '__main__':\n    main()\n", "from collections import defaultdict\n\ndef main():\n    N, M = map(int, input().split())\n    # prefecture_cities = [[] for _ in range(N)]\n    prefecture_cities = defaultdict(list)\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefecture_cities[P].append(Y)\n    for P, cities in prefecture_cities.items():\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:>06}{:>06}'.format(P, i), flush=True)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    N, M = map(int, input().split())\n    # prefecture_cities = [[] for _ in range(N)]\n    prefecture_cities = {}\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        if P in prefecture_cities:\n            prefecture_cities[P].append(Y)\n        else:\n            prefecture_cities[P] = [Y]\n    for prefecture, cities in prefecture_cities.items():\n        for i, city in enumerate(sorted(cities), 1):\n            print('{:>06}{:>06}'.format(prefecture, i))\n\nif __name__ == '__main__':\n    main()\n", "from collections import defaultdict\n\ndef main():\n    N, M = map(int, input().split())\n    # prefecture_cities = [[] for _ in range(N)]\n    prefecture_cities = defaultdict(list)\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefecture_cities[P].append(Y)\n    for P, cities in prefecture_cities.items():\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:>06}{:>06}'.format(P, i))\n\nif __name__ == '__main__':\n    main()\n", "\nfrom collections import defaultdict\n\ndef main():\n    N, M = map(int, input().split())\n    prefecture_cities = defaultdict(list)\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefecture_cities[P].append(Y)\n    for P, cities in prefecture_cities.items():\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:>06}{:>06}'.format(P, i))\n\nif __name__ == '__main__':\n    main()\n", "from collections import defaultdict\n\n\n\ndef main():\n    N, M = map(int, input().split())\n    # prefecture_cities = [[] for _ in range(N)]\n    prefecture_cities = defaultdict(list)\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefecture_cities[P].append(Y)\n    for P, cities in prefecture_cities.items():\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:>06}{:>06}'.format(P, i))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N, M = map(int, input().split())\n    prefecture_cities = defaultdict(list)\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefecture_cities[P].append(Y)\n    for P, cities in prefecture_cities.items():\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:>06}{:>06}'.format(P, i))\n\nif __name__ == '__main__':\n    main()\n", "from collections import defaultdict\n\ndef main():\n    N, M = map(int, input().split())\n    prefecture_cities = defaultdict(list)\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefecture_cities[P].append(Y)\n    for P, cities in prefecture_cities.items():\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:06}{:06}'.format(P, i))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-22 10:35:36.050104 size on output set 8
