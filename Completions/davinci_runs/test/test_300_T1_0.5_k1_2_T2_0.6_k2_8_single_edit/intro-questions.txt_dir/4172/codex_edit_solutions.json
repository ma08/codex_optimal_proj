["# Coder: Alka Wadhwa\n\n# Q2. Input:\n# n = 3, k = 2\n# arr = [1, 4, 7]\n# Output:\n# 6\n# Explanation:\n# The minimum amount of moves required to make all elements equal is 6.\n# Here's our sequence of moves:\n# [1, 4, 7] => [2, 3, 6] => [1, 2, 5] => [2, 3, 4] => [1, 2, 3] => [2, 3, 4]\n\n# Q3. Input:\n# n = 5, k = 2\n# arr = [1, 5, 8, 9, 11]\n# Output:\n# 15\n# Explanation:\n# The minimum amount of moves required to make all elements equal is 15.\n# Here's our sequence of moves:\n# [1, 5, 8, 9, 11] => [2, 4, 7, 10, 12] => [1, 3, 6, 9, 11] => [2, 4, 7, 8, 10] => [3, 5, 6, 8, 9] => [4, 5, 7, 8, 9] => [3, 4, 6, 7, 8]\n\n# Q4. Input:\n# n = 7, k = 3\n# arr = [1, 2, 3, 4, 5, 6, 7]\n# Output:\n# 0\n\n# Q5. Input:\n# n = 5, k = 3\n# arr = [1, 2, 3, 4, 5]\n# Output:\n# 4\n\n# Q6. Input:\n# n = 5, k = 2\n# arr = [1, 2, 3, 4, 5]\n# Output:\n# 4\n\n# Q7. Input:\n# n = 5, k = 4\n# arr = [1, 2, 3, 4, 5]\n# Output:\n# 0\n\nn, k = map(int, input().split())\n\na = list(map(int, input().split()))\n\na.sort()\n\nmoves = 0\n\nif k == n:\n    print(a[-1] - a[0])\nelse:\n    while a[-1] != a[0]:\n        a[-1] -= 1\n        a[0] += 1\n        moves += 1\n        a.sort()\n    print(moves)\n", "\nimport sys\n\ndef min_moves(a, k):\n    a.sort()\n    moves = 0\n    i = 0\n    j = len(a) - 1\n    while i < j:\n        if a[i] == a[i + 1]:\n            i += 1\n        elif a[j] == a[j - 1]:\n            j -= 1\n        elif a[i] + 1 < a[j]:\n            a[i] += 1\n            a[j] -= 1\n            moves += 1\n        else:\n            i += 1\n            j -= 1\n    if len(set(a)) > 1:\n        moves += len(a) - k\n    return moves\n\ndef main():\n    n, k = map(int, sys.stdin.readline().strip().split())\n    a = list(map(int, sys.stdin.readline().strip().split()))\n    print(min_moves(a, k))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef min_moves(a, k):\n    a.sort()\n    moves = 0\n    i = 0\n    j = len(a) - 1\n    while i < j:\n        if a[i] == a[i + 1]:\n            i += 1\n        elif a[j] == a[j - 1]:\n            j -= 1\n        elif a[i] + 1 < a[j]:\n            a[i] += 1\n            a[j] -= 1\n            moves += 1\n        else:\n            i += 1\n            j -= 1\n    if len(set(a)) > k:\n        moves += len(a) - k\n    return moves\n\ndef main():\n    n, k = map(int, sys.stdin.readline().strip().split())\n    a = list(map(int, sys.stdin.readline().strip().split()))\n    print(min_moves(a, k))\n\nif __name__ == '__main__':\n    main()\n", "\nn, k = map(int, input().split())\n\na = list(map(int, input().split()))\n\na.sort()\n\nmoves = 0\n\nwhile a[-1] != a[0]:\n    a[-1] -= 1\n    a[0] += 1\n    moves += 1\n    a.sort()\n\nprint(moves)\n", "\nfor i in range(int(input())):\n    print(\"Case #{}: \".format(i + 1), end = \"\")\n    a, b = map(int, input().split())\n    if a == b:\n        print(0)\n    elif a < b:\n        if (b - a) % 2 == 0:\n            print(2)\n        else:\n            print(1)\n    else:\n        if (a - b) % 2 == 1:\n            print(2)\n        else:\n            print(1)\n", "\n\nn, k = map(int, input().split())\n\na = list(map(int, input().split()))\n\na.sort()\n \nmoves = 0\n\nif k == n:\n    print(a[-1] - a[0])\nelse:\n    while a[-1] != a[0]:\n        a[-1] -= 1\n        a[0] += 1\n        moves += 1\n        a.sort()\n    print(moves)\n", "\nn, k = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\n\nmoves = 0\n\nif k == n:\n    print(a[-1] - a[0])\nelse:\n    while a[-1] != a[0]:\n        a[-1] -= 1\n        a[0] += 1\n        moves += 1\n        a.sort()\n    print(moves)\n", "n, k = map(int, input().split()) a = list(map(int, input().split())) a.sort() moves = 0 if k == n: print(a[-1] - a[0]) else: while a[-1] != a[0]: a[-1] -= 1 a[0] += 1 moves += 1 a.sort() print(moves)\n", "def sum_of_digits(num):\n    if num < 10:\n        return num\n    else:\n        return num % 10 + sum_of_digits(num // 10)\n\n\nprint(sum_of_digits(123))\n", "\n#\n# import sys\n#\n# def min_moves(a, k):\n#     a.sort()\n#     moves = 0\n#     i = 0\n#     j = len(a) - 1\n#     while i < j:\n#         if a[i] == a[i + 1]:\n#             i += 1\n#         elif a[j] == a[j - 1]:\n#             j -= 1\n#         elif a[i] + 1 < a[j]:\n#             a[i] += 1\n#             a[j] -= 1\n#             moves += 1\n#         else:\n#             i += 1\n#             j -= 1\n#     if len(set(a)) > 1:\n#         moves += len(a) - k\n#     return moves\n#\n# def main():\n#     n, k = map(int, sys.stdin.readline().strip().split())\n#     a = list(map(int, sys.stdin.readline().strip().split()))\n#     print(min_moves(a, k))\n#\n# if __name__ == '__main__':\n#     main()\n", "class Solution:\n    def minMoves(self, nums: List[int]) -> int:\n        return sum(nums) - min(nums) * len(nums)\n\n\n    def minMoves(self, nums: List[int]) -> int:\n        min_num = min(nums)\n        return sum(num - min_num for num in nums)\n", "\nn,k=map(int,input().split())\na=list(map(int,input().split()))\nif k==1:\n    print(0)\nelif k==2:\n    print(abs(a[0]-a[n-1]))\nelse:print(a[n-1]-a[0])\n", "\n\nn, k = map(int, input().split())\n\na = list(map(int, input().split())) # get the array\n\na.sort() # sort the array\n\nmoves = 0 # initialize the moves\n\nif k == n:\n    print(a[-1] - a[0])\nelse:\n    while a[-1] != a[0]:\n        a[-1] -= 1\n        a[0] += 1\n        moves += 1\n        a.sort()\n    print(moves)\n"]