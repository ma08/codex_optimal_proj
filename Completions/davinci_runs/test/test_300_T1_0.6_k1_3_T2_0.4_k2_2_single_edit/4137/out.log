2022-04-18 02:45:27.704704 """
In this problem you will write a simple generator of Brainfuck (https://en.wikipedia.org/wiki/Brainfuck) calculators.

You are given an arithmetic expression consisting of integers from 0 to 255 and addition/subtraction signs between them. Output a Brainfuck program which, when executed, will print the result of evaluating this expression.

We use a fairly standard Brainfuck interpreter for checking the programs:



 30000 memory cells.

 memory cells store integers from 0 to 255 with unsigned 8-bit wraparound.

 console input (, command) is not supported, but it's not needed for this problem.


-----Input-----

The only line of input data contains the arithmetic expression. The expression will contain between 2 and 10 operands, separated with arithmetic signs plus and/or minus. Each operand will be an integer between 0 and 255, inclusive. The calculations result is guaranteed to be an integer between 0 and 255, inclusive (results of intermediary calculations might be outside of these boundaries).


-----Output-----

Output a Brainfuck program which, when executed, will print the result of evaluating this expression. The program must be at most 5000000 characters long (including the non-command characters), and its execution must be complete in at most 50000000 steps.


-----Examples-----
Input
2+3

Output
++>
+++>
<[<+>-]<
++++++++++++++++++++++++++++++++++++++++++++++++.

Input
9-7

Output
+++++++++>
+++++++>
<[<->-]<
++++++++++++++++++++++++++++++++++++++++++++++++.



-----Note-----

You can download the source code of the Brainfuck interpreter by the link http://assets.codeforces.com/rounds/784/bf.cpp. We use this code to interpret outputs.
"""
2022-04-18 02:45:27.704722 --------------------------
2022-04-18 02:47:03.227371 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nif __name__ == \"__main__\":\n    pass"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\nimport sys\nimport re\n\ndef bf(n):\n    if n == 0:\n        return ''\n    if n > 0:\n        return '+' + bf(n-1)\n    return '-' + bf(n+1)\n\ndef calculator(string):\n    \"\"\"returns the brainfuck program\"\"\"\n    string = re.sub('\\s', '', string)\n    numbers = [int(n) for n in re.findall('\\d+', string)]\n    signs = re.findall('[+-]', string)\n    result = numbers[0]\n    program = ''\n    for i in range(len(numbers[1:])):\n        program += bf(numbers[i+1] - result)\n        result += numbers[i+1]\n        program += '>'\n    program += bf(numbers[-1] - result)\n    result += numbers[-1]\n    program += '>'\n    program += bf(-result)\n    program += '<'\n    program += '[<'\n    for i in range(len(signs)):\n        program += bf(0 - result)\n        if signs[i] == '+':\n            result += 0\n            program += '+'\n        else:\n            result -= 0\n            program += '-'\n        program += '>-]<'\n    program += bf(0 - result)\n    result += 0\n    program += '>'\n    program += '.'\n    return program\n\nif __name__ == '__main__':\n    print(calculator(sys.stdin.read()))"
    },
    {
      "finish_reason": "length",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport re\n\n# Solution:\n#\n# We can't do this problem without some understanding of Brainfuck.\n#\n# First, let's look at how a number is stored in Brainfuck. It's stored as a sequence of memory cells, each of which contains a single digit.\n#\n# The first cell stores the least significant digit, the second one stores the next digit, and so on. Each cell can hold values from 0 to 255, so it takes 2 cells to store a number between 100 and 255, and 3 cells to store a number between 1000 and 255.\n#\n# Here's how we can store the number 123 in three cells:\n#\n#     ++++++++\n#     >\n#     ++++++++\n#     >\n#     ++++++\n#\n# Here's how we can store the number 255 in two cells:\n#\n#     +++++++++++++++++++++++++++++++++++++++++++++++++\n#     >\n#     +++++++++++++\n#\n# Now, let's look at how we can add two numbers.\n#\n# First, we store the first number in the memory. Then we move the instruction pointer to the right, so that it points to the first digit of the second number. Then we add the first digit of the second number to the first digit of the first number, and we keep adding the digits of the second number to the digits of the first number, and we keep moving to the right, until we reach the end of the numbers.\n#\n# Let's add 123 and 255.\n#\n# First, we store 123:\n#\n#     ++++++++\n#     >\n#     ++++++++\n#     >\n#     ++++++\n#\n# Then we move to the right, so that the instruction pointer points to the first digit of 255:\n#\n#     ++++++++\n#     >\n#     ++++++++\n#     >\n#     ++++++\n#     >\n#     >\n#     >\n#\n# Then we add the first digit of 255 to the first digit of 123, and we keep moving to the right and adding the digits:\n#\n#     ++++++++\n#     >\n#     ++++++++\n#     >\n#     ++++++\n#     >\n#     >\n#     >\n#     +++++++++++++++++++++++++++++++++++++++++++++++++\n#     >\n#     +++++++++++++\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     +++++++++++++++++++++++++++++++++++++++++++++++++\n#\n# Finally, we move back to the left and print the result:\n#\n#     ++++++++\n#     >\n#     ++++++++\n#     >\n#     ++++++\n#     >\n#     >\n#     >\n#     +++++++++++++++++++++++++++++++++++++++++++++++++\n#     >\n#     +++++++++++++\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     +++++++++++++++++++++++++++++++++++++++++++++++++\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n"
    }
  ],
  "created": 1650249927,
  "id": "cmpl-4yBgFimWtbjV6nS0Na0ygTgylqPO9",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-18 02:47:03.227753 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nif __name__ == \"__main__\":\n    pass"
}
2022-04-18 02:47:03.227820 REASON stop
2022-04-18 02:47:03.280650 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\nimport sys\nimport re\n\ndef bf(n):\n    if n == 0:\n        return ''\n    if n > 0:\n        return '+' + bf(n-1)\n    return '-' + bf(n+1)\n\ndef calculator(string):\n    \"\"\"returns the brainfuck program\"\"\"\n    string = re.sub('\\s', '', string)\n    numbers = [int(n) for n in re.findall('\\d+', string)]\n    signs = re.findall('[+-]', string)\n    result = numbers[0]\n    program = ''\n    for i in range(len(numbers[1:])):\n        program += bf(numbers[i+1] - result)\n        result += numbers[i+1]\n        program += '>'\n    program += bf(numbers[-1] - result)\n    result += numbers[-1]\n    program += '>'\n    program += bf(-result)\n    program += '<'\n    program += '[<'\n    for i in range(len(signs)):\n        program += bf(0 - result)\n        if signs[i] == '+':\n            result += 0\n            program += '+'\n        else:\n            result -= 0\n            program += '-'\n        program += '>-]<'\n    program += bf(0 - result)\n    result += 0\n    program += '>'\n    program += '.'\n    return program\n\nif __name__ == '__main__':\n    print(calculator(sys.stdin.read()))"
}
2022-04-18 02:47:03.280763 REASON stop
2022-04-18 02:47:03.281492 2 {
  "finish_reason": "length",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport re\n\n# Solution:\n#\n# We can't do this problem without some understanding of Brainfuck.\n#\n# First, let's look at how a number is stored in Brainfuck. It's stored as a sequence of memory cells, each of which contains a single digit.\n#\n# The first cell stores the least significant digit, the second one stores the next digit, and so on. Each cell can hold values from 0 to 255, so it takes 2 cells to store a number between 100 and 255, and 3 cells to store a number between 1000 and 255.\n#\n# Here's how we can store the number 123 in three cells:\n#\n#     ++++++++\n#     >\n#     ++++++++\n#     >\n#     ++++++\n#\n# Here's how we can store the number 255 in two cells:\n#\n#     +++++++++++++++++++++++++++++++++++++++++++++++++\n#     >\n#     +++++++++++++\n#\n# Now, let's look at how we can add two numbers.\n#\n# First, we store the first number in the memory. Then we move the instruction pointer to the right, so that it points to the first digit of the second number. Then we add the first digit of the second number to the first digit of the first number, and we keep adding the digits of the second number to the digits of the first number, and we keep moving to the right, until we reach the end of the numbers.\n#\n# Let's add 123 and 255.\n#\n# First, we store 123:\n#\n#     ++++++++\n#     >\n#     ++++++++\n#     >\n#     ++++++\n#\n# Then we move to the right, so that the instruction pointer points to the first digit of 255:\n#\n#     ++++++++\n#     >\n#     ++++++++\n#     >\n#     ++++++\n#     >\n#     >\n#     >\n#\n# Then we add the first digit of 255 to the first digit of 123, and we keep moving to the right and adding the digits:\n#\n#     ++++++++\n#     >\n#     ++++++++\n#     >\n#     ++++++\n#     >\n#     >\n#     >\n#     +++++++++++++++++++++++++++++++++++++++++++++++++\n#     >\n#     +++++++++++++\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     +++++++++++++++++++++++++++++++++++++++++++++++++\n#\n# Finally, we move back to the left and print the result:\n#\n#     ++++++++\n#     >\n#     ++++++++\n#     >\n#     ++++++\n#     >\n#     >\n#     >\n#     +++++++++++++++++++++++++++++++++++++++++++++++++\n#     >\n#     +++++++++++++\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     +++++++++++++++++++++++++++++++++++++++++++++++++\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n#     <\n"
}
2022-04-18 02:47:03.281651 REASON length
