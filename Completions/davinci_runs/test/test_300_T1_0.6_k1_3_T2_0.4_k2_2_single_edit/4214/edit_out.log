2022-04-20 12:10:19.273689 num operations 1
2022-04-20 12:10:19.273708 size on input set 1
2022-04-20 12:10:19.273903 using api key kouti
2022-04-20 12:10:21.593443 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport itertools\nimport math\n\nN = int(input())\ncoordinate = []\nfor i in range(N):\n    coordinate.append(list(map(int, input().split())))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u3092\u4f5c\u308b\nall_path = list(itertools.permutations(coordinate))\ntotal_length = 0\n\nfor path in all_path:\n    for i in range(N-1):\n        total_length += math.sqrt(\n            (path[i][0]-path[i+1][0])**2 + (path[i][1]-path[i+1][1])**2)\n\nprint(total_length/len(all_path))\n"
    },
    {
      "index": 1,
      "text": "\n\nimport math\n\nimport itertools\nimport sys\n\nN = int(input())\ncoordinate = []\nfor i in range(N):\n    coordinate.append(list(map(int, input().split())))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u3092\u4f5c\u308b\nall_path = list(itertools.permutations(coordinate))\ntotal_length = 0\n\nfor path in all_path:\n    for i in range(N-1):\n        total_length += math.sqrt(\n            (path[i][0]-path[i+1][0])**2 + (path[i][1]-path[i+1][1])**2)\n\nprint(total_length/len(all_path))\n"
    }
  ],
  "created": 1650456619,
  "object": "edit"
}
2022-04-20 12:10:21.593691 fix syntax errors 2 ['\nimport itertools\nimport math\n\nN = int(input())\ncoordinate = []\nfor i in range(N):\n    coordinate.append(list(map(int, input().split())))\n\n# 全組み合わせを作る\nall_path = list(itertools.permutations(coordinate))\ntotal_length = 0\n\nfor path in all_path:\n    for i in range(N-1):\n        total_length += math.sqrt(\n            (path[i][0]-path[i+1][0])**2 + (path[i][1]-path[i+1][1])**2)\n\nprint(total_length/len(all_path))\n', '\n\nimport math\n\nimport itertools\nimport sys\n\nN = int(input())\ncoordinate = []\nfor i in range(N):\n    coordinate.append(list(map(int, input().split())))\n\n# 全組み合わせを作る\nall_path = list(itertools.permutations(coordinate))\ntotal_length = 0\n\nfor path in all_path:\n    for i in range(N-1):\n        total_length += math.sqrt(\n            (path[i][0]-path[i+1][0])**2 + (path[i][1]-path[i+1][1])**2)\n\nprint(total_length/len(all_path))\n']
2022-04-20 12:10:21.593729 size on output set 2
2022-04-20 12:10:21.593739 num operations 1
2022-04-20 12:10:21.593745 size on input set 1
2022-04-20 12:10:21.593915 using api key sunu
2022-04-20 12:10:24.712465 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport itertools\nimport math\n\ndef calc_length(path):\n    length = 0\n    for i in range(len(path)-1):\n        length += math.sqrt((path[i][0]-path[i+1][0])**2 + (path[i][1]-path[i+1][1])**2)\n    return length\n\ndef main():\n    n = int(input())\n    towns = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        towns.append((x, y))\n    # print(towns)\n\n    routes = list(itertools.permutations(towns))\n    # print(routes)\n\n    lengths = []\n    for route in routes:\n        lengths.append(calc_length(route))\n    # print(lengths)\n\n    print(sum(lengths)/len(lengths))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom itertools import permutations\nimport math\n\ndef calc_length(path):\n    length = 0\n    for i in range(len(path)-1):\n        length += math.sqrt((path[i][0]-path[i+1][0])**2 + (path[i][1]-path[i+1][1])**2)\n    return length\n\ndef main():\n    n = int(input())\n    towns = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        towns.append((x, y))\n    # print(towns)\n\n    routes = list(permutations(towns))\n    # print(routes)\n\n    lengths = []\n    for route in routes:\n        lengths.append(calc_length(route))\n    # print(lengths)\n\n    print(sum(lengths)/len(lengths))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650456621,
  "object": "edit"
}
2022-04-20 12:10:24.712667 fix syntax errors 2 ['\nimport itertools\nimport math\n\ndef calc_length(path):\n    length = 0\n    for i in range(len(path)-1):\n        length += math.sqrt((path[i][0]-path[i+1][0])**2 + (path[i][1]-path[i+1][1])**2)\n    return length\n\ndef main():\n    n = int(input())\n    towns = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        towns.append((x, y))\n    # print(towns)\n\n    routes = list(itertools.permutations(towns))\n    # print(routes)\n\n    lengths = []\n    for route in routes:\n        lengths.append(calc_length(route))\n    # print(lengths)\n\n    print(sum(lengths)/len(lengths))\n\nif __name__ == "__main__":\n    main()\n', '\n\nfrom itertools import permutations\nimport math\n\ndef calc_length(path):\n    length = 0\n    for i in range(len(path)-1):\n        length += math.sqrt((path[i][0]-path[i+1][0])**2 + (path[i][1]-path[i+1][1])**2)\n    return length\n\ndef main():\n    n = int(input())\n    towns = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        towns.append((x, y))\n    # print(towns)\n\n    routes = list(permutations(towns))\n    # print(routes)\n\n    lengths = []\n    for route in routes:\n        lengths.append(calc_length(route))\n    # print(lengths)\n\n    print(sum(lengths)/len(lengths))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 12:10:24.712735 size on output set 2
2022-04-20 12:10:24.712751 num operations 1
2022-04-20 12:10:24.712757 size on input set 1
2022-04-20 12:10:24.712916 using api key gabby
2022-04-20 12:10:30.319914 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport math\n\ndef dist(x1, y1, x2, y2):\n    return math.sqrt( (x1 - x2) ** 2 + (y1 - y2) ** 2 )\n\ndef main():\n    n = int(input())\n    xy_list = [tuple(map(int, input().split())) for i in range(n)]\n\n    # n!\n    n_factorial = math.factorial(n)\n\n    # All possible paths\n    paths = []\n    def inner(path):\n        if len(path) == n:\n            paths.append(path)\n        else:\n            for i in range(n):\n                if i not in path:\n                    inner(path + [i])\n    inner([])\n\n    # All lengths of paths\n    lengths = [0] * n_factorial\n    for i, path in enumerate(paths):\n        for j in range(n - 1):\n            lengths[i] += dist(xy_list[path[j]][0], xy_list[path[j]][1], xy_list[path[j + 1]][0], xy_list[path[j + 1]][1])\n\n    # Average length\n    avg_length = sum(lengths) / n_factorial\n    print(avg_length)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport math\n\ndef dist(x1, y1, x2, y2):\n    return math.sqrt( (x1 - x2) ** 2 + (y1 - y2) ** 2 )\n\ndef main():\n    n = int(input())\n    x_y_list = list(map(int, input().split()))\n\n    # n!\n    n_factorial = math.factorial(n)\n\n    # All possible paths\n    paths = []\n    def inner(path):\n        if len(path) == n:\n            paths.append(path)\n        else:\n            for i in range(n):\n                if i not in path:\n                    inner(path + [i])\n    inner([])\n\n    # All lengths of paths\n        length = 0\n    lengths = []\n    for i, path in enumerate(paths):\n        for j in range(n - 1):\n            length += dist(x_y_list[path[j] * 2], x_y_list[path[j] * 2 + 1], x_y_list[path[j + 1] * 2], x_y_list[path[j + 1] * 2 + 1])\n        lengths.append(length)\n\n    # Average length\n    avg_length = sum(lengths) / n_factorial\n    print(avg_length)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650456624,
  "object": "edit"
}
2022-04-20 12:10:30.320127 fix syntax errors 2 ["\nimport math\n\ndef dist(x1, y1, x2, y2):\n    return math.sqrt( (x1 - x2) ** 2 + (y1 - y2) ** 2 )\n\ndef main():\n    n = int(input())\n    xy_list = [tuple(map(int, input().split())) for i in range(n)]\n\n    # n!\n    n_factorial = math.factorial(n)\n\n    # All possible paths\n    paths = []\n    def inner(path):\n        if len(path) == n:\n            paths.append(path)\n        else:\n            for i in range(n):\n                if i not in path:\n                    inner(path + [i])\n    inner([])\n\n    # All lengths of paths\n    lengths = [0] * n_factorial\n    for i, path in enumerate(paths):\n        for j in range(n - 1):\n            lengths[i] += dist(xy_list[path[j]][0], xy_list[path[j]][1], xy_list[path[j + 1]][0], xy_list[path[j + 1]][1])\n\n    # Average length\n    avg_length = sum(lengths) / n_factorial\n    print(avg_length)\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\ndef dist(x1, y1, x2, y2):\n    return math.sqrt( (x1 - x2) ** 2 + (y1 - y2) ** 2 )\n\ndef main():\n    n = int(input())\n    x_y_list = list(map(int, input().split()))\n\n    # n!\n    n_factorial = math.factorial(n)\n\n    # All possible paths\n    paths = []\n    def inner(path):\n        if len(path) == n:\n            paths.append(path)\n        else:\n            for i in range(n):\n                if i not in path:\n                    inner(path + [i])\n    inner([])\n\n    # All lengths of paths\n        length = 0\n    lengths = []\n    for i, path in enumerate(paths):\n        for j in range(n - 1):\n            length += dist(x_y_list[path[j] * 2], x_y_list[path[j] * 2 + 1], x_y_list[path[j + 1] * 2], x_y_list[path[j + 1] * 2 + 1])\n        lengths.append(length)\n\n    # Average length\n    avg_length = sum(lengths) / n_factorial\n    print(avg_length)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 12:10:30.320261 size on output set 2
