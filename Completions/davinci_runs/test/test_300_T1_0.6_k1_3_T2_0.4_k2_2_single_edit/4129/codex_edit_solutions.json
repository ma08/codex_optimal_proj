["#include <stdio.h>\n#include <stdlib.h>\n\nint main(int argc, char *argv[]) {\n    if (argc != 2) {\n        fprintf(stderr, \"Usage: %s filename\\n\", argv[0]);\n        return 1;\n    }\n\n    FILE *fp = fopen(argv[1], \"r\");\n    if (!fp) {\n        fprintf(stderr, \"Error: Cannot open file %s\\n\", argv[1]);\n        return 1;\n    }\n\n    char line[256];\n    while (fgets(line, sizeof(line), fp)) {\n        fputs(line, stdout);\n    }\n\n    fclose(fp);\n\n    return 0;\n}\n", "\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    edges = defaultdict(list)\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        edges[u].append(v)\n    visited = set()\n    q = [s]\n    while q:\n        node = q.pop()\n        visited.add(node)\n        for edge in edges[node]:\n            if edge not in visited:\n                q.append(edge)\n    print(n - len(visited))\n\nmain()\n", "#!/usr/bin/env ruby\n\n#\n# This script is used to detect the type of a file.\n#\n# Usage:\n#\n#   file.rb <file>\n#\n# Example:\n#\n#   file.rb test.txt\n#\n\nrequire 'filemagic'\n\ndef usage\n  puts \"Usage: #{$0} <file>\"\n  exit 1\nend\n\nusage if ARGV.empty?\n\nfilename = ARGV.first\n\nif File.exist?(filename)\n  mime = FileMagic.new(FileMagic::MAGIC_MIME)\n  puts mime.file(filename)\nelse\n  puts \"File '#{filename}' does not exist.\"\nend\n", "\n\n#---------------------------------------------------------------------------------\n\nimport sys\nimport numpy as np\nfrom collections import defaultdict\n\ndef dfs(s, visited, graph):\n    visited[s] = True\n    for i in graph[s]:\n        if not visited[i]:\n            dfs(i, visited, graph)\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    graph = defaultdict(list)\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        graph[u].append(v)\n    print(graph)\n    visited = np.zeros(n + 1)\n    dfs(s, visited, graph)\n\n    res = 0\n    for i in range(1, n + 1):\n        if not visited[i]:\n            dfs(i, visited, graph)\n            res += 1\n    print(res)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nfrom collections import defaultdict\n\ndef main():\n    n, m, s = sys.stdin.readline().split()\n    n, m, s = int(n), int(m), int(s)\n    edges = defaultdict(list)\n    for i in range(m):\n        u, v = sys.stdin.readline().split()\n        u, v = int(u), int(v)\n        edges[u].append(v)\n    visited = set()\n    q = [s]\n    while q:\n        node = q.pop()\n        visited.add(node)\n        for edge in edges[node]:\n            if edge not in visited:\n                q.append(edge)\n    print(n - len(visited))\n\nmain()\n", "\n\n#-------------------------------------------------------------------------------\n\nimport sys\nimport numpy as np\nfrom collections import defaultdict\n\ndef dfs(s, visited, graph):\n    visited[s] = True\n    for i in graph[s]:\n        if not visited[i]:\n            dfs(i, visited, graph)\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().split())\n    graph = defaultdict(list)\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().split())\n        graph[u].append(v)\n\n    visited = np.zeros(n + 1)\n    dfs(s, visited, graph)\n\n    res = 0\n    for i in range(1, n + 1):\n        if not visited[i]:\n            dfs(i, visited, graph)\n            res += 1\n    print(res)\n\nif __name__ == '__main__':\n    main()\n"]