2022-04-20 11:35:06.620050 num operations 1
2022-04-20 11:35:06.620087 size on input set 1
2022-04-20 11:35:06.620286 using api key sunu
2022-04-20 11:35:11.538801 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\ntotal = sum(a)\n\nif total % n == 0:\n    avg = total // n\nelse:\n    avg = total // n + 1\n\n# print(\"avg:\", avg)\n\n# find the longest subarray where sum is evenly divisible by avg\n# keep track of the length of each subarray as we find it\nlengths = [[0, 0]]\ns = a[0]\n\nfor i in range(1, n):\n    if s == avg:\n        lengths.append([i-1, i-1])\n        s = 0\n    elif s > avg:\n        s -= a[i-1]\n    s += a[i]\n\nif s == avg:\n    lengths.append([n-1, n-1])\n\n# print(\"lengths:\", lengths)\n\n# create block list\nblocks = []\n\nfor i in range(len(lengths)):\n    for j in range(lengths[i][0], lengths[i][1]+1):\n        blocks.append([j, j])\n\n# print(\"blocks:\", blocks)\n\n# remove overlapping block\nfor i in range(len(blocks)):\n    for j in range(i+1, len(blocks)):\n        if blocks[j][0] <= blocks[i][1]:\n            blocks[j][0] = blocks[i][1] + 1\n            if blocks[j][0] > blocks[j][1]:\n                blocks.pop(j)\n\nprint(len(blocks))\n\nfor i in range(len(blocks)):\n    print(blocks[i][0]+1, blocks[i][1]+1)\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\na = list(map(int, input().split()))\n\ntotal = sum(a)\n\nif total % n == 0:\n    avg = total // n\nelse:\n    avg = total // n + 1\n\nprint(\"avg:\", avg)\n\n# find the longest subarray where sum is evenly divisible by avg\n# keep track of the length of each subarray as we find it\nlengths = [[0, 0]]\nsum = a[0]\n\nfor i in range(1, n):\n    if sum == avg:\n        lengths.append([i-1, i-1])\n        sum = 0\n    elif sum > avg:\n        sum -= a[i-1]\n    sum += a[i]\n\nif sum == avg:\n    lengths.append([n-1, n-1])\n\nprint(\"lengths:\", lengths)\n\n# create block list\nblocks = []\n\nfor i in range(len(lengths)):\n    for j in range(lengths[i][0], lengths[i][1]+1):\n        blocks.append([j, j])\n\nprint(\"blocks:\", blocks)\n\n# remove overlapping block\nfor i in range(len(blocks)):\n    for j in range(i+1, len(blocks)):\n        if blocks[j][0] <= blocks[i][1]:\n            blocks[j][0] = blocks[i][1] + 1\n            if blocks[j][0] > blocks[j][1]:\n                blocks.pop(j)\n\nprint(len(blocks))\n\nfor i in range(len(blocks)):\n    print(blocks[i][0]+1, blocks[i][1]+1)\n"
    }
  ],
  "created": 1650454506,
  "object": "edit"
}
2022-04-20 11:35:11.539057 fix syntax errors 2 ['\n\nn = int(input())\na = list(map(int, input().split()))\n\ntotal = sum(a)\n\nif total % n == 0:\n    avg = total // n\nelse:\n    avg = total // n + 1\n\n# print("avg:", avg)\n\n# find the longest subarray where sum is evenly divisible by avg\n# keep track of the length of each subarray as we find it\nlengths = [[0, 0]]\ns = a[0]\n\nfor i in range(1, n):\n    if s == avg:\n        lengths.append([i-1, i-1])\n        s = 0\n    elif s > avg:\n        s -= a[i-1]\n    s += a[i]\n\nif s == avg:\n    lengths.append([n-1, n-1])\n\n# print("lengths:", lengths)\n\n# create block list\nblocks = []\n\nfor i in range(len(lengths)):\n    for j in range(lengths[i][0], lengths[i][1]+1):\n        blocks.append([j, j])\n\n# print("blocks:", blocks)\n\n# remove overlapping block\nfor i in range(len(blocks)):\n    for j in range(i+1, len(blocks)):\n        if blocks[j][0] <= blocks[i][1]:\n            blocks[j][0] = blocks[i][1] + 1\n            if blocks[j][0] > blocks[j][1]:\n                blocks.pop(j)\n\nprint(len(blocks))\n\nfor i in range(len(blocks)):\n    print(blocks[i][0]+1, blocks[i][1]+1)\n', '\n\nn = int(input())\na = list(map(int, input().split()))\n\ntotal = sum(a)\n\nif total % n == 0:\n    avg = total // n\nelse:\n    avg = total // n + 1\n\nprint("avg:", avg)\n\n# find the longest subarray where sum is evenly divisible by avg\n# keep track of the length of each subarray as we find it\nlengths = [[0, 0]]\nsum = a[0]\n\nfor i in range(1, n):\n    if sum == avg:\n        lengths.append([i-1, i-1])\n        sum = 0\n    elif sum > avg:\n        sum -= a[i-1]\n    sum += a[i]\n\nif sum == avg:\n    lengths.append([n-1, n-1])\n\nprint("lengths:", lengths)\n\n# create block list\nblocks = []\n\nfor i in range(len(lengths)):\n    for j in range(lengths[i][0], lengths[i][1]+1):\n        blocks.append([j, j])\n\nprint("blocks:", blocks)\n\n# remove overlapping block\nfor i in range(len(blocks)):\n    for j in range(i+1, len(blocks)):\n        if blocks[j][0] <= blocks[i][1]:\n            blocks[j][0] = blocks[i][1] + 1\n            if blocks[j][0] > blocks[j][1]:\n                blocks.pop(j)\n\nprint(len(blocks))\n\nfor i in range(len(blocks)):\n    print(blocks[i][0]+1, blocks[i][1]+1)\n']
2022-04-20 11:35:11.539102 size on output set 2
2022-04-20 11:35:11.539114 num operations 1
2022-04-20 11:35:11.539120 size on input set 1
2022-04-20 11:35:11.539277 using api key kouti
2022-04-20 11:35:13.443351 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    sums = dict()\n    ret = 1\n    for i in range(n):\n        for j in range(i, n):\n            s = sum(arr[i:j + 1])\n            sums[s] = sums.get(s, 0) + 1\n            ret = max(ret, sums[s])\n    print(ret)\n    for i in range(n):\n        for j in range(i, n):\n            s = sum(arr[i:j + 1])\n            if sums[s] == ret:\n                ret -= 1\n                print(i + 1, j + 1)\n                break\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    sums = {}\n    ret = 0\n    for i in range(n):\n        for j in range(i, n):\n            s = sum(arr[i:j + 1])\n            sums[s] = sums.get(s, 0) + 1\n            ret = max(ret, sums[s])\n    print(ret)\n    for i in range(n):\n        for j in range(i, n):\n            s = sum(arr[i:j + 1])\n            if sums[s] == ret:\n                ret -= 1\n                print(i + 1, j + 1)\n                break\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650454511,
  "object": "edit"
}
2022-04-20 11:35:13.443567 fix syntax errors 2 ["\n\ndef main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    sums = dict()\n    ret = 1\n    for i in range(n):\n        for j in range(i, n):\n            s = sum(arr[i:j + 1])\n            sums[s] = sums.get(s, 0) + 1\n            ret = max(ret, sums[s])\n    print(ret)\n    for i in range(n):\n        for j in range(i, n):\n            s = sum(arr[i:j + 1])\n            if sums[s] == ret:\n                ret -= 1\n                print(i + 1, j + 1)\n                break\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    sums = {}\n    ret = 0\n    for i in range(n):\n        for j in range(i, n):\n            s = sum(arr[i:j + 1])\n            sums[s] = sums.get(s, 0) + 1\n            ret = max(ret, sums[s])\n    print(ret)\n    for i in range(n):\n        for j in range(i, n):\n            s = sum(arr[i:j + 1])\n            if sums[s] == ret:\n                ret -= 1\n                print(i + 1, j + 1)\n                break\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 11:35:13.443598 size on output set 2
2022-04-20 11:35:13.443612 num operations 1
2022-04-20 11:35:13.443618 size on input set 1
2022-04-20 11:35:13.443792 using api key soukgp
2022-04-20 11:35:16.478982 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef find_blocks(l):\n    if len(l) == 0:\n        return 0\n    elif len(l) == 1:\n        return 1\n    else:\n        total = sum(l)\n        if total % 2 == 0:\n            possible_total = total / 2\n            left = 0\n            right = len(l) - 1\n            while left != right:\n                if l[left] > possible_total:\n                    return 0\n                elif l[left] == possible_total:\n                    return 1\n                elif sum(l[left:right]) == possible_total:\n                    return 2\n                elif sum(l[left:right]) < possible_total:\n                    left += 1\n                else:\n                    right -= 1\n            return 0\n        else:\n            return 0\n\n\ndef main():\n    n = input()\n    l = list(map(int, input().split()))\n    blocks = []\n    for i in range(n):\n        for j in range(i, n):\n            result = find_blocks(l[i:j])\n            if result == 2:\n                blocks.append([i, j])\n    print(len(blocks))\n    for i in blocks:\n        print(i[0] + 1, i[1])\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef find_blocks(l):\n    if len(l) == 0:\n        return 0\n    elif len(l) == 1:\n        return 1\n    else:\n        total = sum(l)\n        if total % 2 == 0:\n            possible_total = total / 2\n            left = 0\n            right = len(l) - 1\n            while left != right:\n                if l[left] > possible_total:\n                    return 0\n                elif l[left] == possible_total:\n                    return 1\n                elif sum(l[left:right]) == possible_total:\n                    return 2\n                elif sum(l[left:right]) < possible_total:\n                    left += 1\n                else:\n                    right -= 1\n            return 0\n        else:\n            return 0\n\n\ndef main():\n    n = input()\n    l = list(map(int, input().split()))\n    blocks = []\n    for i in range(n):\n        for j in range(i, n):\n            result = find_blocks(l[i:j])\n            if result == 2:\n                blocks.append([i, j])\n    print len(blocks)\n    for i in blocks:\n        print i[0] + 1, i[1]\n\nmain()\n"
    }
  ],
  "created": 1650454513,
  "object": "edit"
}
2022-04-20 11:35:16.479298 fix syntax errors 2 ['\n\ndef find_blocks(l):\n    if len(l) == 0:\n        return 0\n    elif len(l) == 1:\n        return 1\n    else:\n        total = sum(l)\n        if total % 2 == 0:\n            possible_total = total / 2\n            left = 0\n            right = len(l) - 1\n            while left != right:\n                if l[left] > possible_total:\n                    return 0\n                elif l[left] == possible_total:\n                    return 1\n                elif sum(l[left:right]) == possible_total:\n                    return 2\n                elif sum(l[left:right]) < possible_total:\n                    left += 1\n                else:\n                    right -= 1\n            return 0\n        else:\n            return 0\n\n\ndef main():\n    n = input()\n    l = list(map(int, input().split()))\n    blocks = []\n    for i in range(n):\n        for j in range(i, n):\n            result = find_blocks(l[i:j])\n            if result == 2:\n                blocks.append([i, j])\n    print(len(blocks))\n    for i in blocks:\n        print(i[0] + 1, i[1])\n\nmain()\n', '\n\ndef find_blocks(l):\n    if len(l) == 0:\n        return 0\n    elif len(l) == 1:\n        return 1\n    else:\n        total = sum(l)\n        if total % 2 == 0:\n            possible_total = total / 2\n            left = 0\n            right = len(l) - 1\n            while left != right:\n                if l[left] > possible_total:\n                    return 0\n                elif l[left] == possible_total:\n                    return 1\n                elif sum(l[left:right]) == possible_total:\n                    return 2\n                elif sum(l[left:right]) < possible_total:\n                    left += 1\n                else:\n                    right -= 1\n            return 0\n        else:\n            return 0\n\n\ndef main():\n    n = input()\n    l = list(map(int, input().split()))\n    blocks = []\n    for i in range(n):\n        for j in range(i, n):\n            result = find_blocks(l[i:j])\n            if result == 2:\n                blocks.append([i, j])\n    print len(blocks)\n    for i in blocks:\n        print i[0] + 1, i[1]\n\nmain()\n']
2022-04-20 11:35:16.479343 size on output set 2
