["\n\n# Version 1\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return int(nums[0])\n\n# Version 2\n\ndef solution(n):\n    # Your code here\n    nums = list(str(n))\n    while len(nums) > 1:\n        next_sum = 0\n        for i in nums:\n            next_sum += int(i) ** 2\n        nums = list(str(next_sum))\n    return int(nums[0])\n", "\n\ndef chess_knight(n):\n    if n == 1 or n == 2:\n        return n-1\n    else:\n        if n % 2 == 0:\n            return chess_knight(n//2) + 1\n        elif n % 2 != 0:\n            return chess_knight(((n+1)//2)) + 1\n\n\nif __name__ == '__main__':\n    print(chess_knight(int(input())))\n", "\ndef get_sum_of_digits(n):\n    s = 0\n    while n > 0:\n        s += n % 10\n        n = n // 10\n\n    return s\n\ndef get_sum_of_digits_of_powers(n):\n    p = 1\n    s = 0\n    while p <= n:\n        s += get_sum_of_digits(p)\n        p *= 2\n    return s\n\n\ndef main():\n    n = int(input())\n    print(get_sum_of_digits_of_powers(n))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n# Version 1 \n\ndef solution(nums):\n    # Your code here \n    nums.sort()\n    for i in range(len(nums)):\n        if nums[i] == i:\n            continue\n        else:\n            return i\n    return len(nums)\n\n# Version 2\n\ndef solution(nums):\n    # Your code here \n    nums.sort()\n    for i in range(len(nums)):\n        if nums[i] == i:\n            continue\n        else:\n            return i\n    return len(nums)\n", "\n\ndef chess_knight(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 3\n    if n % 2 == 0:\n        return chess_knight(n // 2) + 1\n    if n % 2 != 0:\n        return chess_knight(((n + 1) // 2)) + 1\n\n\nif __name__ == '__main__':\n    print(chess_knight(int(input())))\n", "\n\ndef get_sum_of_digits(n):\n    s = 0\n    while n > 0:\n        s += n % 10\n        n = n // 10\n    return s\n\ndef get_sum_of_digits_of_powers(n):\n    p = 1\n    s = 0\n    while p <= n:\n        s += get_sum_of_digits(p)\n        p *= 2\n    return s\n\ndef main():\n    n = int(input())\n    print(get_sum_of_digits_of_powers(n)\n\nif __name__ == '__main__':\n    main()\n"]