2022-04-20 11:36:18.417427 num operations 1
2022-04-20 11:36:18.417463 size on input set 1
2022-04-20 11:36:18.417665 using api key soukgp
2022-04-20 11:36:24.576443 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\"\"\"\nThis is a template for the file module.\n\"\"\"\n\n\ndef main():\n    \"\"\"Driver function.\"\"\"\n    pass\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef is_prime(n):\n    \"\"\"\n    Tests if n is prime.\n    \"\"\"\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n\n    return True\n\ndef main():\n    \"\"\"\n    Driver function.\n    \"\"\"\n    nums = [int(i) for i in input().split()]\n    count = 0\n    for num in nums:\n        if is_prime(num):\n            count += 1\n    print(count)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650454578,
  "object": "edit"
}
2022-04-20 11:36:24.576755 fix syntax errors 2 ['"""\nThis is a template for the file module.\n"""\n\n\ndef main():\n    """Driver function."""\n    pass\n\nif __name__ == \'__main__\':\n    main()\n', '\ndef is_prime(n):\n    """\n    Tests if n is prime.\n    """\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n\n    return True\n\ndef main():\n    """\n    Driver function.\n    """\n    nums = [int(i) for i in input().split()]\n    count = 0\n    for num in nums:\n        if is_prime(num):\n            count += 1\n    print(count)\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 11:36:24.576794 size on output set 2
2022-04-20 11:36:24.576805 num operations 1
2022-04-20 11:36:24.576810 size on input set 1
2022-04-20 11:36:24.576969 using api key gabby
2022-04-20 11:36:26.245688 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    print(1) \n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    print(2)\n\nmain()\n"
    }
  ],
  "created": 1650454584,
  "object": "edit"
}
2022-04-20 11:36:26.245898 fix syntax errors 2 ['\n\ndef main():\n    print(1) \n\nmain()\n', '\n\ndef main():\n    print(2)\n\nmain()\n']
2022-04-20 11:36:26.245918 size on output set 2
2022-04-20 11:36:26.245930 num operations 1
2022-04-20 11:36:26.245936 size on input set 1
2022-04-20 11:36:26.246088 using api key soukgp
2022-04-20 11:36:29.062708 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# dp[i][j] = max(dp[i][j-1], dp[i-a[j]][j-1] + 1)\n\ndef main():\n    a = map(int, raw_input().split())\n    dp = [[0 for _ in xrange(len(a) + 1)] for _ in xrange(max(a) + 1)]\n    for i in xrange(len(a)):\n        for j in xrange(1, max(a) + 1):\n            dp[j][i+1] = dp[j][i]\n            if a[i] <= j:\n                dp[j][i+1] = max(dp[j][i+1], dp[j - a[i]][i] + 1)\n    print max(dp[max(a)])\n    return 0\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n# dp[i][j] = max(dp[i][j-1], dp[i-a[j]][j-1] + 1)\n\ndef main():\n    a = map(int, raw_input().split())\n    dp = [[0 for _ in xrange(len(a) + 1)] for _ in xrange(max(a) + 1)]\n    for i in xrange(len(a)):\n        for j in xrange(1, max(a) + 1):\n            dp[j][i+1] = dp[j][i]\n            if a[i] <= j:\n                dp[j][i+1] = max(dp[j][i+1], dp[j - a[i]][i] + 1)\n    print max(dp[max(a)])\n    return 0\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650454586,
  "object": "edit"
}
2022-04-20 11:36:29.062925 fix syntax errors 2 ['\n\n# dp[i][j] = max(dp[i][j-1], dp[i-a[j]][j-1] + 1)\n\ndef main():\n    a = map(int, raw_input().split())\n    dp = [[0 for _ in xrange(len(a) + 1)] for _ in xrange(max(a) + 1)]\n    for i in xrange(len(a)):\n        for j in xrange(1, max(a) + 1):\n            dp[j][i+1] = dp[j][i]\n            if a[i] <= j:\n                dp[j][i+1] = max(dp[j][i+1], dp[j - a[i]][i] + 1)\n    print max(dp[max(a)])\n    return 0\n\n\nif __name__ == "__main__":\n    main()\n', '\n\n# dp[i][j] = max(dp[i][j-1], dp[i-a[j]][j-1] + 1)\n\ndef main():\n    a = map(int, raw_input().split())\n    dp = [[0 for _ in xrange(len(a) + 1)] for _ in xrange(max(a) + 1)]\n    for i in xrange(len(a)):\n        for j in xrange(1, max(a) + 1):\n            dp[j][i+1] = dp[j][i]\n            if a[i] <= j:\n                dp[j][i+1] = max(dp[j][i+1], dp[j - a[i]][i] + 1)\n    print max(dp[max(a)])\n    return 0\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 11:36:29.062956 size on output set 1
