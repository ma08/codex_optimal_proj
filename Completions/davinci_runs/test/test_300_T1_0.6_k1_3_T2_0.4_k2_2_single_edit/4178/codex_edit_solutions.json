["\n\nn = int(input())\nh = list(map(int, input().split()))\n\nans = True\nfor i in range(1, n):\n    if h[i - 1] > h[i]:  # \u524d\u306e\u30de\u30b9\u304c\u9ad8\u3044\n        h[i] = h[i - 1]\n    elif h[i - 1] == h[i]:  # \u524d\u306e\u30de\u30b9\u304c\u540c\u3058\u9ad8\u3055\n        continue\n    elif h[i - 1] + 1 < h[i]:\n        ans = False\n        break\n\nif ans:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n", "\n\nimport sys\n\nsys.setrecursionlimit(10 ** 8)\n\n\ndef read_ints():\n    return list(map(int, sys.stdin.readline().split()))\n\n\ndef read_a_int():\n    return int(sys.stdin.readline())\n\n\ndef read_tuple(H):\n    '''\n    H is number of rows\n    '''\n    ret = []\n    for _ in range(H):\n        ret.append(tuple(map(int, sys.stdin.readline().split())))\n    return ret\n\n\ndef read_col(H):\n    '''\n    H is number of rows\n    A\u5217\u3001B\u5217\u304c\u4e0e\u3048\u3089\u308c\u308b\u3088\u3046\u306a\u3068\u304d\n    ex1)A,B=read_col(H)    ex2) A,=read_col(H) #\u4e00\u5217\u306e\u5834\u5408\n    '''\n    ret = []\n    for _ in range(H):\n        ret.append(list(map(int, sys.stdin.readline().split())))\n    return tuple(map(list, zip(*ret)))\n\n\ndef read_matrix(H):\n    '''\n    H is number of rows\n    '''\n    ret = []\n    for _ in range(H):\n        ret.append(list(map(int, sys.stdin.readline().split())))\n    return ret\n\n\ndef read_map(H):\n    '''\n    H is number of rows\n    \u6587\u5b57\u5217\u3067\u4e0e\u3048\u3089\u308c\u305f\u76e4\u9762\u3092\u8aad\u307f\u53d6\u308b\u7528\n    '''\n    return [sys.stdin.readline().strip() for _ in range(H)]\n\n\ndef read_map_as_int(H):\n    '''\n    #\u21921,.\u21920\u3068\u3057\u3066\u8aad\u307f\u8fbc\u3080\n    '''\n    ret = []\n    for _ in range(H):\n        ret.append([1 if s == '#' else 0 for s in sys.stdin.readline().strip()])\n    return ret\n\n\ndef read_map_as_char(H):\n    '''\n    \u6587\u5b57\u3067\u4e0e\u3048\u3089\u308c\u305f\u76e4\u9762\u3092\u8aad\u307f\u53d6\u308b\u7528\n    '''\n    ret = []\n    for _ in range(H):\n        ret.append([c for c in sys.stdin.readline().strip()])\n    return ret\n\n\ndef read_matrix(H):\n    '''\n    H is number of rows\n    '''\n    ret = []\n    for _ in range(H):\n        ret.append(list(map(int, sys.stdin.readline().split())))\n    return ret\n\n\ndef read_tuple(H):\n    '''\n    H is number of rows\n    '''\n    ret = []\n    for _ in range(H):\n        ret.append(tuple(map(int, sys.stdin.readline().split())))\n    return ret\n\n\ndef read_col(H):\n    '''\n    H is number of rows\n    A\u5217\u3001B\u5217\u304c\u4e0e\u3048\u3089\u308c\u308b\u3088\u3046\u306a\u3068\u304d\n    ex1)A,B=read_col(H)    ex2) A,=read_col(H) #\u4e00\u5217\u306e\u5834\u5408\n    '''\n    ret = []\n    for _ in range(H):\n        ret.append(list(map(int, sys.stdin.readline().split())))\n    return tuple(map(list, zip(*ret)))\n\n\ndef read_col_tuple(H):\n    '''\n    H is number of rows\n    '''\n    ret = []\n    for _ in range(H):\n        ret.append(tuple(map(int, sys.stdin.readline().split())))\n    return tuple(map(list, zip(*ret)))\n\n\ndef read_col_tuple_as_int(H):\n    '''\n    H is number of rows\n    '''\n    ret = []\n    for _ in range(H):\n        ret.append([1 if s == '#' else 0 for s in sys.stdin.readline().split()])\n    return tuple(map(list, zip(*ret)))\n\n\ndef read_matrix(H):\n    '''\n    H is number of rows\n    '''\n    ret = []\n    for _ in range(H):\n        ret.append(list(map(int, sys.stdin.readline().split())))\n    return ret\n\n\nMOD = 10**9 + 7\nINF = 2**31  # 2147483648 > 10**9\n# default import\nfrom collections import defaultdict, Counter, deque\nfrom operator import itemgetter\nfrom itertools import product, permutations, combinations\nfrom bisect import bisect_left, bisect_right  # , insort_left, insort_right\n\n# https://atcoder.jp/contests/abc141/tasks/abc141_e\n# \u53f3\u306b\u4f38\u3070\u3057\u3066\u3044\u3063\u3066\u3001\u305d\u306e\u3068\u304d\u306b\u4f55\u500b\u304b\u3076\u3063\u3066\u3044\u308b\u304b\u3092\u6c42\u3081\u308b\n# \u540c\u3058\u6587\u5b57\u304c\u3044\u304f\u3064\u304b\u3076\u3063\u3066\u3044\u308b\u3068\u304d\u306f\u3001\u305d\u308c\u3089\u306e\u4e2d\u3067\u6700\u3082\u5de6\u306b\u3042\u308b\u3082\u306e\u3092\u63a1\u7528\u3059\u308b\n# \u305d\u306e\u6700\u3082\u5de6\u306b\u3042\u308b\u3082\u306e\u3092\u63a1\u7528\u3059\u308b\u3068\u304d\u3001\u305d\u306e\u6587\u5b57\u5217\u306e\u9577\u3055\u304c\u6700\u5927\u306b\u306a\u308b\n\nN = read_a_int()\nS = read_map_as_char(N)\n\n# dp[i][j] := S[i]\u3068S[j]\u304c\u4e00\u81f4\u3057\u3066\u3044\u308b\u304b\ndp = [[0] * N for _ in range(N)]\n\nfor i in range(N):\n    for j in range(N):\n        if S[i][j] == S[i][j]:\n            dp[i][j] = 1\n\n# print(dp)\n\nans = 0\nfor i in range(N):\n    for j in range(i + 1, N):\n        for k in range(j + 1, N):\n            if dp[i][j] and dp[j][k]:\n                ans = max(ans, k - i)\nprint(ans)\n\nans = True\n", "\n\nn = int(input())\nheights = list(map(int, input().split()))\n\nfor i in range(1, n - 1):\n    if heights[i] > heights[i - 1] and heights[i] > heights[i + 1]:\n        print('No')\n        exit()\n\nprint('Yes')\n", "\nn = int(input())  # \u5165\u529b\na = list(map(int, input().split()))  # \u5165\u529b\na.sort()  # \u6607\u9806\u306b\u4e26\u3073\u66ff\u3048\nprint(a[n//2] - a[n//2 - 1])  # \u4e2d\u592e\u5024\u306e\u5dee\n", "\nn = int(input())\nheights = list(map(int, input().split()))\n\nfor i in range(1, n):\n    if heights[i] < heights[i - 1]:\n        heights[i] = heights[i - 1]\n\nprint('Yes')\n", "\n\nn = int(input())\nh = list(map(int, input().split()))\nif n == 1:\n    print('YES')\nelse:\n    flag = True\n    for i in range(1, n):\n        if h[i] < h[i-1]:\n            if h[i] < h[i-1] - 1:\n                flag = False\n                break\n            else:\n                h[i] = h[i-1]\n    if flag:\n        print('YES')\n    else:\n        print('NO')\n"]