2022-04-20 11:33:04.074299 num operations 1
2022-04-20 11:33:04.074359 size on input set 1
2022-04-20 11:33:04.074628 using api key soukgp
2022-04-20 11:33:05.993917 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# this is the \"easy\" version of the problem\n# the \"hard\" version has a longer string\n\n# get the input \ns = input()\nt = input()\n\n# start with no characters removed\nremoved = 0\n\n# start at the beginning of the string\nleft = 0\nright = 0\n\n# go until the end of the string\nwhile right < len(s):\n    # if the current character is in the target string,\n    # move the left pointer up to the current spot\n    if s[right] in t:\n        left = right\n    # if the current character is not in the target string,\n    # add one to the number of characters removed\n    else:\n        removed += 1\n    # move the right pointer up\n    right += 1\n\n# output the answer\nprint(removed)\n"
    },
    {
      "index": 1,
      "text": "\n\n# this is the \"easy\" version of the problem\n# the \"hard\" version has a longer string\n\n# get the input\ns = input()\nt = input()\n\n# start with no characters removed\nremoved = 0\n\n# start at the beginning of the string\nleft = 0\nright = 0\n\n# go until the end of the string\nwhile right < len(s):\n    # if the current character is in the target string,\n    # move the left pointer up to the current spot\n    if t[right] in s:\n        left = right\n    # if the current character is not in the target string,\n    # add one to the number of characters removed\n    else:\n        removed += 1\n    # move the right pointer up\n    right += 1\n\n# output the answer\nprint(removed)\n"
    }
  ],
  "created": 1650454384,
  "object": "edit"
}
2022-04-20 11:33:05.994193 fix syntax errors 2 ['\n\n# this is the "easy" version of the problem\n# the "hard" version has a longer string\n\n# get the input \ns = input()\nt = input()\n\n# start with no characters removed\nremoved = 0\n\n# start at the beginning of the string\nleft = 0\nright = 0\n\n# go until the end of the string\nwhile right < len(s):\n    # if the current character is in the target string,\n    # move the left pointer up to the current spot\n    if s[right] in t:\n        left = right\n    # if the current character is not in the target string,\n    # add one to the number of characters removed\n    else:\n        removed += 1\n    # move the right pointer up\n    right += 1\n\n# output the answer\nprint(removed)\n', '\n\n# this is the "easy" version of the problem\n# the "hard" version has a longer string\n\n# get the input\ns = input()\nt = input()\n\n# start with no characters removed\nremoved = 0\n\n# start at the beginning of the string\nleft = 0\nright = 0\n\n# go until the end of the string\nwhile right < len(s):\n    # if the current character is in the target string,\n    # move the left pointer up to the current spot\n    if t[right] in s:\n        left = right\n    # if the current character is not in the target string,\n    # add one to the number of characters removed\n    else:\n        removed += 1\n    # move the right pointer up\n    right += 1\n\n# output the answer\nprint(removed)\n']
2022-04-20 11:33:05.994234 size on output set 2
2022-04-20 11:33:05.994245 num operations 1
2022-04-20 11:33:05.994251 size on input set 1
2022-04-20 11:33:05.994460 using api key kouti
2022-04-20 11:33:11.672861 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef solve(s, t, n):\n    # dp[i][j] = length of the longest common subsequence from first i chars of s and first j chars of t\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return n - dp[-1][-1]\n\ns = input()\nt = input()\nprint(solve(s, t, len(s)))\n"
    },
    {
      "index": 1,
      "text": "def solve(s, t):\n    # dp[i][j] = length of the longest common subsequence from first i chars of s and first j chars of t\n    dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n    for i in range(1, len(s) + 1):\n        for j in range(1, len(t) + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return len(s) - dp[-1][-1]\n\ns = input()\nt = input()\nprint(solve(s, t))\n"
    }
  ],
  "created": 1650454386,
  "object": "edit"
}
2022-04-20 11:33:11.673136 fix syntax errors 2 ['\ndef solve(s, t, n):\n    # dp[i][j] = length of the longest common subsequence from first i chars of s and first j chars of t\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return n - dp[-1][-1]\n\ns = input()\nt = input()\nprint(solve(s, t, len(s)))\n', 'def solve(s, t):\n    # dp[i][j] = length of the longest common subsequence from first i chars of s and first j chars of t\n    dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n    for i in range(1, len(s) + 1):\n        for j in range(1, len(t) + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return len(s) - dp[-1][-1]\n\ns = input()\nt = input()\nprint(solve(s, t))\n']
2022-04-20 11:33:11.673170 size on output set 2
