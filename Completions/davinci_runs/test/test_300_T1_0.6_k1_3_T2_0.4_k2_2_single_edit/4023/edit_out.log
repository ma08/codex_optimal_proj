2022-04-20 11:29:55.773453 num operations 1
2022-04-20 11:29:55.773481 size on input set 1
2022-04-20 11:29:55.773654 using api key gabby
2022-04-20 11:29:57.245727 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#-----Solution-----\n\na = input().split()\nb = input().split()\n\nn = int(a[0])\nm = int(b[0])\n\nif n != m:\n    print('NO')\n    exit()\n\nfor i in range(n-1):\n    if b[i] != b[i+1]:\n        print('NO')\n        exit()\n\nprint('YES')\n"
    },
    {
      "index": 1,
      "text": "\n#-----Solution-----\n\na = input().split()\nb = input().split()\n\nn = int(a[0])\nm = int(b[0])\n\nif n != m:\n    print('NO')\n    exit()\n\nfor i in range(n-1):\n    if b[i] != b[i+1]:\n        print('NO')\n        exit()\n\nprint('YES')\n"
    }
  ],
  "created": 1650454195,
  "object": "edit"
}
2022-04-20 11:29:57.245971 fix syntax errors 2 ["\n#-----Solution-----\n\na = input().split()\nb = input().split()\n\nn = int(a[0])\nm = int(b[0])\n\nif n != m:\n    print('NO')\n    exit()\n\nfor i in range(n-1):\n    if b[i] != b[i+1]:\n        print('NO')\n        exit()\n\nprint('YES')\n", "\n#-----Solution-----\n\na = input().split()\nb = input().split()\n\nn = int(a[0])\nm = int(b[0])\n\nif n != m:\n    print('NO')\n    exit()\n\nfor i in range(n-1):\n    if b[i] != b[i+1]:\n        print('NO')\n        exit()\n\nprint('YES')\n"]
2022-04-20 11:29:57.245999 size on output set 1
2022-04-20 11:29:57.246011 num operations 1
2022-04-20 11:29:57.246017 size on input set 1
2022-04-20 11:29:57.246172 using api key jaanu
2022-04-20 11:30:00.563939 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef test_vova_and_his_girlfriend():\n    \"\"\"Tests the solution to the problem described in the docstring\"\"\"\n    assert solve(5, [2, 1, 1, 2, 5]) == \"YES\" # True\n    assert solve(3, [4, 5, 3]) == \"NO\" # False\n    assert solve(2, [10, 10]) == \"YES\" # True\n\nif __name__ == \"__main__\":\n    N = int(input())\n    A = list(map(int, input().split()))\n    print(solve(N, A))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef test_vova_and_his_girlfriend():\n    assert solve(5, [2, 1, 1, 2, 5]) == \"YES\"\n    assert solve(3, [4, 5, 3]) == \"NO\"\n    assert solve(2, [10, 10]) == \"NO\"\n\nif __name__ == \"__main__\":\n    N = int(input())\n    A = list(map(int, input().split()))\n    print(solve(N, A))\n"
    }
  ],
  "created": 1650454197,
  "object": "edit"
}
2022-04-20 11:30:00.564169 fix syntax errors 2 ['\n\ndef test_vova_and_his_girlfriend():\n    """Tests the solution to the problem described in the docstring"""\n    assert solve(5, [2, 1, 1, 2, 5]) == "YES" # True\n    assert solve(3, [4, 5, 3]) == "NO" # False\n    assert solve(2, [10, 10]) == "YES" # True\n\nif __name__ == "__main__":\n    N = int(input())\n    A = list(map(int, input().split()))\n    print(solve(N, A))\n', '\n\ndef test_vova_and_his_girlfriend():\n    assert solve(5, [2, 1, 1, 2, 5]) == "YES"\n    assert solve(3, [4, 5, 3]) == "NO"\n    assert solve(2, [10, 10]) == "NO"\n\nif __name__ == "__main__":\n    N = int(input())\n    A = list(map(int, input().split()))\n    print(solve(N, A))\n']
2022-04-20 11:30:00.564196 size on output set 2
2022-04-20 11:30:00.564207 num operations 1
2022-04-20 11:30:00.564213 size on input set 1
2022-04-20 11:30:00.564388 using api key derek
2022-04-20 11:30:00.601915 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 11:30:02.103887 using api key soukgp
2022-04-20 11:30:04.965613 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef solve(n, wall):\n    # Complete this function\n    if (len(set(wall)) == 1):\n        return \"YES\"\n    elif (len(set(wall)) == 2):\n        a = wall.count(max(wall))\n        b = wall.count(min(wall))\n        if (a == 1 and b == 1):\n            return \"NO\"\n        else:\n            return \"YES\"\n    else:\n        return \"NO\"\n\nn = int(input().strip())\nwall = list(map(int, input().strip().split(' ')))\nprint(solve(n, wall))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef solve(n, wall):\n    # Complete this function\n    if len(set(wall)) == 1:\n        return \"YES\"\n    elif len(set(wall)) == 2:\n        a = wall.count(max(wall))\n        b = wall.count(min(wall))\n        if a == 1 and b == 1:\n            return \"NO\"\n        else:\n            return \"YES\"\n    else:\n        return \"NO\"\n\nn = int(input().strip())\nwall = list(map(int, input().strip().split(' ')))\nprint(solve(n, wall))\n"
    }
  ],
  "created": 1650454202,
  "object": "edit"
}
2022-04-20 11:30:04.965836 fix syntax errors 2 ['\ndef solve(n, wall):\n    # Complete this function\n    if (len(set(wall)) == 1):\n        return "YES"\n    elif (len(set(wall)) == 2):\n        a = wall.count(max(wall))\n        b = wall.count(min(wall))\n        if (a == 1 and b == 1):\n            return "NO"\n        else:\n            return "YES"\n    else:\n        return "NO"\n\nn = int(input().strip())\nwall = list(map(int, input().strip().split(\' \')))\nprint(solve(n, wall))\n', '\n\ndef solve(n, wall):\n    # Complete this function\n    if len(set(wall)) == 1:\n        return "YES"\n    elif len(set(wall)) == 2:\n        a = wall.count(max(wall))\n        b = wall.count(min(wall))\n        if a == 1 and b == 1:\n            return "NO"\n        else:\n            return "YES"\n    else:\n        return "NO"\n\nn = int(input().strip())\nwall = list(map(int, input().strip().split(\' \')))\nprint(solve(n, wall))\n']
2022-04-20 11:30:04.965867 size on output set 2
