["\n\n# -*- coding: utf-8 -*-\n\n# AtCoder Beginner Contest 052\n# Problem A\n\nif __name__ == '__main__':\n    a, b, c, d = list(map(int, input().split()))\n    print(max(a * b, c * d))\n", "\nn = int(input())\na = list(map(int,input().split()))\nans = 1\nfor i in a:\n    ans *= i\n    if ans > 10**18:\n        print(-1)\n        exit()\nprint(ans)\n", "\nimport sys\ninput = sys.stdin.readline\n\ndef main():\n    ans = 0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            if s[i:j].upper() == s[i:j]:\n                ans = max(ans,j-i)\n    print(ans)\n\nif __name__ == '__main__':\n    s = input()\n    main()\n", "\n\n# -*- coding: utf-8 -*- \n\n# AtCoder Beginner Contest \n# Problem B \n\nif __name__ == '__main__':\n    N = int(input())\n    A = list(map(int, input().split()))\n    count = 0\n\n    for i in range(N):\n        while A[i] % 2 == 0:\n            A[i] = A[i] // 2\n            count += 1\n\n    print(count)\n", "\ns = input()\n\n# create a list of substrings of s that are only A, C, G, and T\nacgt_strings = []\nfor i in range(len(s)):\n    for j in range(i+1, len(s)+1):\n        acgt_string = s[i:j]\n        if \"A\" in acgt_string and \"C\" in acgt_string and \"G\" in acgt_string and \"T\" in acgt_string:\n            acgt_strings.append(acgt_string)\n\n# print the length of the longest substring\nprint(max([len(acgt_string) for acgt_string in acgt_strings]))\n", "\ns = input()\n\n\n# create a list of substrings of s that are only A, C, G, and T\nacgt_strings = []\nfor i in range(len(s)):\n    for j in range(i + 1, len(s) + 1):\n        acgt_string = s[i:j]\n        if \"A\" in acgt_string and \"C\" in acgt_string and \"G\" in acgt_string and \"T\" in acgt_string:  # noqa\n            acgt_strings.append(acgt_string)\n\n# print the length of the longest substring\nprint(max([len(acgt_string) for acgt_string in acgt_strings]))\n"]