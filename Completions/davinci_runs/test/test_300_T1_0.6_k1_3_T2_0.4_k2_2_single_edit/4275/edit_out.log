2022-04-20 12:22:23.704223 num operations 1
2022-04-20 12:22:23.704244 size on input set 1
2022-04-20 12:22:23.704418 using api key sourya
2022-04-20 12:22:26.894827 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\n# Get Input\ns = sys.stdin.readline().rstrip()\n\n# Split Input\ns1 = s[0:3]\ns2 = s[3:6]\n\n# Check if coffee-like\nif s1[1] == s1[2] and s2[0] == s2[1]:\n    print('Yes')\nelse:\n    print('No')\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\n# Get Input\ns = sys.stdin.readline().rstrip() # rstrip() removes the newline character\n\n# Split Input\ns1 = s[0:3] # first three characters\ns2 = s[3:6] # last three characters\n\n# Check if coffee-like\nif s1[1] == s1[2] and s2[0] == s2[1]:\n    print('Yes')\nelse:\n    print('No')\n"
    }
  ],
  "created": 1650457343,
  "object": "edit"
}
2022-04-20 12:22:26.895100 fix syntax errors 2 ["\nimport sys\n\n# Get Input\ns = sys.stdin.readline().rstrip()\n\n# Split Input\ns1 = s[0:3]\ns2 = s[3:6]\n\n# Check if coffee-like\nif s1[1] == s1[2] and s2[0] == s2[1]:\n    print('Yes')\nelse:\n    print('No')\n", "\nimport sys\n\n# Get Input\ns = sys.stdin.readline().rstrip() # rstrip() removes the newline character\n\n# Split Input\ns1 = s[0:3] # first three characters\ns2 = s[3:6] # last three characters\n\n# Check if coffee-like\nif s1[1] == s1[2] and s2[0] == s2[1]:\n    print('Yes')\nelse:\n    print('No')\n"]
2022-04-20 12:22:26.895128 size on output set 2
2022-04-20 12:22:26.895140 num operations 1
2022-04-20 12:22:26.895146 size on input set 1
2022-04-20 12:22:26.895316 using api key sourya
2022-04-20 12:22:29.121688 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nS = input()\nif S[2] == S[3] and S[4] == S[5]:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"
    },
    {
      "index": 1,
      "text": "\ns = input()\nif s[2] == s[3] and s[4] == s[5]:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"
    }
  ],
  "created": 1650457346,
  "object": "edit"
}
2022-04-20 12:22:29.121894 fix syntax errors 2 ['\nS = input()\nif S[2] == S[3] and S[4] == S[5]:\n    print("Yes")\nelse:\n    print("No")\n', '\ns = input()\nif s[2] == s[3] and s[4] == s[5]:\n    print("Yes")\nelse:\n    print("No")\n']
2022-04-20 12:22:29.121915 size on output set 2
2022-04-20 12:22:29.121928 num operations 1
2022-04-20 12:22:29.121934 size on input set 1
2022-04-20 12:22:29.122098 using api key gabby
2022-04-20 12:22:30.851111 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    # input\n    S = input()\n\n    if S[2] == S[3] and S[4] == S[5]:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "# https://atcoder.jp/contests/abc083/tasks/abc083_a\n\n\ndef main():\n    # input\n    S = input()\n\n    if S[2] == S[3] and S[4] == S[5]:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650457349,
  "object": "edit"
}
2022-04-20 12:22:30.851319 fix syntax errors 2 ['\ndef main():\n    # input\n    S = input()\n\n    if S[2] == S[3] and S[4] == S[5]:\n        print("Yes")\n    else:\n        print("No")\n\n\nif __name__ == "__main__":\n    main()\n', '# https://atcoder.jp/contests/abc083/tasks/abc083_a\n\n\ndef main():\n    # input\n    S = input()\n\n    if S[2] == S[3] and S[4] == S[5]:\n        print("Yes")\n    else:\n        print("No")\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 12:22:30.851343 size on output set 2
