2022-04-20 12:04:15.861433 num operations 1
2022-04-20 12:04:15.861459 size on input set 1
2022-04-20 12:04:15.861655 using api key kouti
2022-04-20 12:04:24.384504 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "const fs = require('fs')\n\n// fs.writeFile('example.txt', \"this is an example\", (err) => {\n//     if (err) {\n//         console.log(err)\n//     } else {\n//         console.log('file successfully created')\n//         fs.readFile('example.txt', 'utf8', (err, file) => {\n//             if (err) {\n//                 console.log(err)\n//             } else {\n//                 console.log(file)\n//             }\n//         })\n//     }\n// })\n\n// fs.rename('example.txt', 'example2.txt', (err) => {\n//     if (err) {\n//         console.log(err)\n//     } else {\n//         console.log('successfully renamed the file')\n//     }\n// })\n\n// fs.appendFile('example2.txt', 'Some data being appended', (err) => {\n//     if (err) {\n//         console.log(err)\n//     } else {\n//         console.log('successfully appended data to file')\n//     }\n// })\n\n// fs.unlink('example2.txt', (err) => {\n//     if (err) {\n//         console.log(err)\n//     } else {\n//         console.log('successfully deleted the file')\n//     }\n// })\n"
    },
    {
      "index": 1,
      "text": "import sys\n\ndef main(argv):\n    print(\"Hello World!\")\n\nif __name__ == \"__main__\":\n    main(sys.argv)\n"
    }
  ],
  "created": 1650456256,
  "object": "edit"
}
2022-04-20 12:04:24.384816 fix syntax errors 2 ['const fs = require(\'fs\')\n\n// fs.writeFile(\'example.txt\', "this is an example", (err) => {\n//     if (err) {\n//         console.log(err)\n//     } else {\n//         console.log(\'file successfully created\')\n//         fs.readFile(\'example.txt\', \'utf8\', (err, file) => {\n//             if (err) {\n//                 console.log(err)\n//             } else {\n//                 console.log(file)\n//             }\n//         })\n//     }\n// })\n\n// fs.rename(\'example.txt\', \'example2.txt\', (err) => {\n//     if (err) {\n//         console.log(err)\n//     } else {\n//         console.log(\'successfully renamed the file\')\n//     }\n// })\n\n// fs.appendFile(\'example2.txt\', \'Some data being appended\', (err) => {\n//     if (err) {\n//         console.log(err)\n//     } else {\n//         console.log(\'successfully appended data to file\')\n//     }\n// })\n\n// fs.unlink(\'example2.txt\', (err) => {\n//     if (err) {\n//         console.log(err)\n//     } else {\n//         console.log(\'successfully deleted the file\')\n//     }\n// })\n', 'import sys\n\ndef main(argv):\n    print("Hello World!")\n\nif __name__ == "__main__":\n    main(sys.argv)\n']
2022-04-20 12:04:24.384860 size on output set 2
2022-04-20 12:04:24.384871 num operations 1
2022-04-20 12:04:24.384877 size on input set 1
2022-04-20 12:04:24.385045 using api key sourya
2022-04-20 12:04:29.598225 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n\n    soft = []\n    hard = []\n\n    for i in range(n):\n        a, b = input().split()\n        if b == \"soft\":\n            soft.append(a)\n        else:\n            hard.append(a)\n\n    soft.sort()\n    hard.sort()\n\n    if len(soft) > len(hard):\n        print(len(soft))\n    else:\n        print(len(soft))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    n = int(input())\n\n    soft = 0\n    hard = 0\n\n    for i in range(n):\n        a, b = input().split()\n        if b == \"soft\":\n            soft.append(a)\n        else:\n            hard.append(a)\n\n    soft.sort()\n    hard.sort()\n\n    if len(soft) > len(hard):\n        print(len(hard))\n    else:\n        print(len(soft))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650456264,
  "object": "edit"
}
2022-04-20 12:04:29.598464 fix syntax errors 2 ['\n\ndef main():\n    n = int(input())\n\n    soft = []\n    hard = []\n\n    for i in range(n):\n        a, b = input().split()\n        if b == "soft":\n            soft.append(a)\n        else:\n            hard.append(a)\n\n    soft.sort()\n    hard.sort()\n\n    if len(soft) > len(hard):\n        print(len(soft))\n    else:\n        print(len(soft))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef main():\n    n = int(input())\n\n    soft = 0\n    hard = 0\n\n    for i in range(n):\n        a, b = input().split()\n        if b == "soft":\n            soft.append(a)\n        else:\n            hard.append(a)\n\n    soft.sort()\n    hard.sort()\n\n    if len(soft) > len(hard):\n        print(len(hard))\n    else:\n        print(len(soft))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 12:04:29.598496 size on output set 2
2022-04-20 12:04:29.598509 num operations 1
2022-04-20 12:04:29.598515 size on input set 1
2022-04-20 12:04:29.598684 using api key sourya
2022-04-20 12:04:31.667954 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef cheese_board():\n    num_cheeses = int(input())\n    cheeses = []\n    while num_cheeses > 0:\n        line = input().split()\n        cheeses.append(line[1])\n        num_cheeses -= 1\n\n    cheeses.sort()\n    cheeses.append(\"\")\n    i = 0\n    count = 0\n    while i < len(cheeses) - 1:\n        if cheeses[i] != cheeses[i+1]:\n            count += 1\n        i += 1\n    print(count)\n\n\ncheese_board()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef cheese_board():\n    num_cheeses = int(input())\n    cheeses = []\n    while num_cheeses > 0:\n        line = input().split()\n        cheeses.append(line[1])\n        num_cheeses -= 1\n\n    cheeses.sort()\n    cheeses.append(\" \")\n    i = 0\n    count = 0\n    while i < len(cheeses) - 1:\n        if cheeses[i] != cheeses[i + 1]:\n            count += 1\n        i += 1\n    print(count)\n\n\ncheese_board()\n"
    }
  ],
  "created": 1650456269,
  "object": "edit"
}
2022-04-20 12:04:31.668188 fix syntax errors 2 ['\n\ndef cheese_board():\n    num_cheeses = int(input())\n    cheeses = []\n    while num_cheeses > 0:\n        line = input().split()\n        cheeses.append(line[1])\n        num_cheeses -= 1\n\n    cheeses.sort()\n    cheeses.append("")\n    i = 0\n    count = 0\n    while i < len(cheeses) - 1:\n        if cheeses[i] != cheeses[i+1]:\n            count += 1\n        i += 1\n    print(count)\n\n\ncheese_board()\n', '\n\ndef cheese_board():\n    num_cheeses = int(input())\n    cheeses = []\n    while num_cheeses > 0:\n        line = input().split()\n        cheeses.append(line[1])\n        num_cheeses -= 1\n\n    cheeses.sort()\n    cheeses.append(" ")\n    i = 0\n    count = 0\n    while i < len(cheeses) - 1:\n        if cheeses[i] != cheeses[i + 1]:\n            count += 1\n        i += 1\n    print(count)\n\n\ncheese_board()\n']
2022-04-20 12:04:31.668219 size on output set 2
