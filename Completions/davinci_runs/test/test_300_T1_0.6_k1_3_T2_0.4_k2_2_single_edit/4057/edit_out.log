2022-04-20 11:36:53.554579 num operations 1
2022-04-20 11:36:53.554614 size on input set 1
2022-04-20 11:36:53.554814 using api key derek
2022-04-20 11:36:53.716638 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 11:36:55.218552 using api key jaanu
2022-04-20 11:36:58.055624 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Solution\n\n# Number of coins\nn = int(input())\n# Value of coins\na = list(map(int, input().split()))\n\na.sort()\n\n# To determine the minimum number of pockets, we will keep track of the last pocket assigned to each coin value.\n\n# Pocket number assigned to each coin value\nlast_pocket = {}\n\n# Number of pockets used\nnum_pockets = 0\n\nfor i in range(n):\n    val = a[i]\n    # If there is no pocket assigned to this value, assign a new pocket to the value\n    if val not in last_pocket:\n        last_pocket[val] = num_pockets\n        num_pockets += 1\n    # If there is a pocket assigned to this value, assign the next pocket to the value\n    else:\n        last_pocket[val] += 1\n\nprint(num_pockets)\n"
    },
    {
      "index": 1,
      "text": "\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sun Nov 17 00:35:14 2019\n@author: ryan\n\"\"\"\n\n# Number of coins\nn = int(input())\n# Value of coins\na = list(map(int, input().split()))\n\na.sort()\n\n# To determine the minimum number of pockets, we will keep track of the last pocket assigned to each coin value.\n\n# Pocket number assigned to each coin value\nlast_pocket = {}\n\n# Number of pockets used\nnum_pockets = 0\n\nfor i in range(n):\n    val = a[i]\n    # If there is no pocket assigned to this value, assign a new pocket to the value\n    if val not in last_pocket:\n        last_pocket[val] = num_pockets\n        num_pockets += 1\n    # If there is a pocket assigned to this value, assign the next pocket to the value\n    else:\n        last_pocket[val] += 1\n\nprint(num_pockets)\n"
    }
  ],
  "created": 1650454615,
  "object": "edit"
}
2022-04-20 11:36:58.055873 fix syntax errors 2 ['\n# Solution\n\n# Number of coins\nn = int(input())\n# Value of coins\na = list(map(int, input().split()))\n\na.sort()\n\n# To determine the minimum number of pockets, we will keep track of the last pocket assigned to each coin value.\n\n# Pocket number assigned to each coin value\nlast_pocket = {}\n\n# Number of pockets used\nnum_pockets = 0\n\nfor i in range(n):\n    val = a[i]\n    # If there is no pocket assigned to this value, assign a new pocket to the value\n    if val not in last_pocket:\n        last_pocket[val] = num_pockets\n        num_pockets += 1\n    # If there is a pocket assigned to this value, assign the next pocket to the value\n    else:\n        last_pocket[val] += 1\n\nprint(num_pockets)\n', '\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n"""\nCreated on Sun Nov 17 00:35:14 2019\n@author: ryan\n"""\n\n# Number of coins\nn = int(input())\n# Value of coins\na = list(map(int, input().split()))\n\na.sort()\n\n# To determine the minimum number of pockets, we will keep track of the last pocket assigned to each coin value.\n\n# Pocket number assigned to each coin value\nlast_pocket = {}\n\n# Number of pockets used\nnum_pockets = 0\n\nfor i in range(n):\n    val = a[i]\n    # If there is no pocket assigned to this value, assign a new pocket to the value\n    if val not in last_pocket:\n        last_pocket[val] = num_pockets\n        num_pockets += 1\n    # If there is a pocket assigned to this value, assign the next pocket to the value\n    else:\n        last_pocket[val] += 1\n\nprint(num_pockets)\n']
2022-04-20 11:36:58.055910 size on output set 2
2022-04-20 11:36:58.055922 num operations 1
2022-04-20 11:36:58.055929 size on input set 1
2022-04-20 11:36:58.056083 using api key kouti
2022-04-20 11:37:02.032160 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input())\narr = list(map(int, input().split()))\n\n# n = 6\n# arr = [1, 2, 4, 3, 3, 2]\n\ndef get_min_pockets(n, arr):\n  d = {}\n  for i in arr:\n    if i in d:\n      d[i] += 1\n    else:\n      d[i] = 1\n  return len(d)\n\nprint(get_min_pockets(n, arr))\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\narr = list(map(int, input().split()))\n\n# n = 6\n# arr = [1, 2, 4, 3, 3, 2]\n\ndef get_min_pockets(n, arr):\n  d = {}\n  for i in arr:\n    if i in d:\n      d[i] += 1\n    else:\n      d[i] = 1\n  return len(d)\n\nprint(get_min_pockets(n, arr))\n"
    }
  ],
  "created": 1650454618,
  "object": "edit"
}
2022-04-20 11:37:02.032376 fix syntax errors 2 ['\n\nn = int(input())\narr = list(map(int, input().split()))\n\n# n = 6\n# arr = [1, 2, 4, 3, 3, 2]\n\ndef get_min_pockets(n, arr):\n  d = {}\n  for i in arr:\n    if i in d:\n      d[i] += 1\n    else:\n      d[i] = 1\n  return len(d)\n\nprint(get_min_pockets(n, arr))\n', '\n\nn = int(input())\narr = list(map(int, input().split()))\n\n# n = 6\n# arr = [1, 2, 4, 3, 3, 2]\n\ndef get_min_pockets(n, arr):\n  d = {}\n  for i in arr:\n    if i in d:\n      d[i] += 1\n    else:\n      d[i] = 1\n  return len(d)\n\nprint(get_min_pockets(n, arr))\n']
2022-04-20 11:37:02.032408 size on output set 1
2022-04-20 11:37:02.032423 num operations 1
2022-04-20 11:37:02.032431 size on input set 1
2022-04-20 11:37:02.032669 using api key kouti
2022-04-20 11:37:03.504766 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "n = int(input())\na = [int(x) for x in input().split()]\nprint(len(set(a)))\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\na = [int(x) for x in input().split()]\nprint(len(set(a)))\n"
    }
  ],
  "created": 1650454622,
  "object": "edit"
}
2022-04-20 11:37:03.505003 fix syntax errors 2 ['n = int(input())\na = [int(x) for x in input().split()]\nprint(len(set(a)))\n', '\nn = int(input())\na = [int(x) for x in input().split()]\nprint(len(set(a)))\n']
2022-04-20 11:37:03.505039 size on output set 2
