["\ndef solve(s, t):\n    n = len(s)\n    m = len(t)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][0] = i\n    for j in range(1, m + 1):\n        dp[0][j] = j\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i - 1][j] + 1, dp[i][j - 1] + 1)\n    return dp[n][m]\n\ns = input()\nt = input()\nprint(solve(s, t))\n", "\n\ndef solve(s, t):\n    if s == t:\n        return 0\n    else:\n        return abs(len(s) - len(t))\n\nif __name__ == '__main__':\n    s = input()\n    t = input()\n    print(solve(s, t))\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    pass\n\n\nif __name__ == '__main__':\n    sys.exit(main())\n", "\n\ndef solve():\n    return 0\n\nif __name__ == '__main__':\n    print(solve())\n", "\ndef solve(s, t):\n    n = len(s)\n    m = len(t)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][0] = i\n    for j in range(1, m + 1):\n        dp[0][j] = j\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i - 1][j] + 1, dp[i][j - 1] + 1)\n    return dp[n][m]\n\n\ndef main():\n    s = input()\n    t = input()\n    print(solve(s, t))\n\n\nif __name__ == '__main__':\n    main()\n", "var fs = require('fs');\n\nvar file = process.argv[2];\n\nfs.readFile(file, function (err, contents) {\n  if (err) {\n    return console.log(err)\n  }\n  // fs.readFile(file, 'utf8', callback) can also be used\n  var lines = contents.toString().split('\\n').length - 1\n  console.log(lines)\n})\n"]