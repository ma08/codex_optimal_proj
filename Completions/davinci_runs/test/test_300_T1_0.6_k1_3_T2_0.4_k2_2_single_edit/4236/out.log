2022-04-18 03:42:52.242256 """
You are given a set of $n$ segments on the axis $Ox$, each segment has integer endpoints between $1$ and $m$ inclusive. Segments may intersect, overlap or even coincide with each other. Each segment is characterized by two integers $l_i$ and $r_i$ ($1 \le l_i \le r_i \le m$) — coordinates of the left and of the right endpoints. 

Consider all integer points between $1$ and $m$ inclusive. Your task is to print all such points that don't belong to any segment. The point $x$ belongs to the segment $[l; r]$ if and only if $l \le x \le r$.


-----Input-----

The first line of the input contains two integers $n$ and $m$ ($1 \le n, m \le 100$) — the number of segments and the upper bound for coordinates.

The next $n$ lines contain two integers each $l_i$ and $r_i$ ($1 \le l_i \le r_i \le m$) — the endpoints of the $i$-th segment. Segments may intersect, overlap or even coincide with each other. Note, it is possible that $l_i=r_i$, i.e. a segment can degenerate to a point.


-----Output-----

In the first line print one integer $k$ — the number of points that don't belong to any segment.

In the second line print exactly $k$ integers in any order — the points that don't belong to any segment. All points you print should be distinct.

If there are no such points at all, print a single integer $0$ in the first line and either leave the second line empty or do not print it at all.


-----Examples-----
Input
3 5
2 2
1 2
5 5

Output
2
3 4 

Input
1 7
1 7

Output
0




-----Note-----

In the first example the point $1$ belongs to the second segment, the point $2$ belongs to the first and the second segments and the point $5$ belongs to the third segment. The points $3$ and $4$ do not belong to any segment.

In the second example all the points from $1$ to $7$ belong to the first segment.
"""
2022-04-18 03:42:52.242280 --------------------------
2022-04-18 03:43:23.942114 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nn, m = map(int, input().split())\nsegments = []\nfor i in range(n):\n    segments.append(list(map(int, input().split())))\n\nl = []\nfor i in range(n):\n    for j in range(segments[i][0], segments[i][1] + 1):\n        l.append(j)\n\nl = list(set(l))\nl.sort()\n\ni = 0\nwhile i < len(l):\n    if l[i] in range(segments[i][0], segments[i][1] + 1):\n        l.pop(i)\n    else:\n        i += 1\n\nprint(len(l))\nfor i in l:\n    print(i, end=' ')"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nn, m = [int(i) for i in input().split()]\n\nsegments = []\n\nfor i in range(n):\n    segments.append([int(i) for i in input().split()])\n\nsegments.sort(key=lambda x: x[1])\n\nk = 0\n\nfor i in range(m):\n    if i+1 not in range(segments[k][0], segments[k][1]+1):\n        print(i+1, end=' ')\n    elif k+1 < len(segments) and i+1 == segments[k][1]:\n        k += 1\n\nprint()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\n# SOLUTION\n\n# \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u043e\u043f\u0430\u0434\u0430\u043d\u0438\u044f \u0447\u0438\u0441\u043b\u0430 \u0432 \u043e\u0434\u0438\u043d \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u0432\ndef check(point, intervals):\n    for i in intervals:\n        if i[0] <= point <= i[1]:\n            return True\n    return False\n\nn, m = map(int, input().split())\nintervals = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    intervals.append((l, r))\n# \u043f\u0435\u0440\u0435\u0431\u043e\u0440 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430 [1, m]\npoints = [i for i in range(1, m + 1)]\n# \u043e\u0442\u0441\u0435\u0438\u0432\u0430\u0435\u043c \u0442\u0435 \u0447\u0438\u0441\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043f\u0430\u0434\u0430\u044e\u0442 \u0432 \u043e\u0434\u0438\u043d \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u0432\npoints = [i for i in points if not check(i, intervals)]\nprint(len(points))\nprint(*points)"
    }
  ],
  "created": 1650253372,
  "id": "cmpl-4yCZoqCuolFOflE7YN2UJ7p15evkV",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-18 03:43:23.942348 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\nn, m = map(int, input().split())\nsegments = []\nfor i in range(n):\n    segments.append(list(map(int, input().split())))\n\nl = []\nfor i in range(n):\n    for j in range(segments[i][0], segments[i][1] + 1):\n        l.append(j)\n\nl = list(set(l))\nl.sort()\n\ni = 0\nwhile i < len(l):\n    if l[i] in range(segments[i][0], segments[i][1] + 1):\n        l.pop(i)\n    else:\n        i += 1\n\nprint(len(l))\nfor i in l:\n    print(i, end=' ')"
}
2022-04-18 03:43:23.942404 REASON stop
2022-04-18 03:43:23.965237 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nn, m = [int(i) for i in input().split()]\n\nsegments = []\n\nfor i in range(n):\n    segments.append([int(i) for i in input().split()])\n\nsegments.sort(key=lambda x: x[1])\n\nk = 0\n\nfor i in range(m):\n    if i+1 not in range(segments[k][0], segments[k][1]+1):\n        print(i+1, end=' ')\n    elif k+1 < len(segments) and i+1 == segments[k][1]:\n        k += 1\n\nprint()"
}
2022-04-18 03:43:23.965307 REASON stop
2022-04-18 03:43:23.965768 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\n# SOLUTION\n\n# \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u043e\u043f\u0430\u0434\u0430\u043d\u0438\u044f \u0447\u0438\u0441\u043b\u0430 \u0432 \u043e\u0434\u0438\u043d \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u0432\ndef check(point, intervals):\n    for i in intervals:\n        if i[0] <= point <= i[1]:\n            return True\n    return False\n\nn, m = map(int, input().split())\nintervals = []\nfor i in range(n):\n    l, r = map(int, input().split())\n    intervals.append((l, r))\n# \u043f\u0435\u0440\u0435\u0431\u043e\u0440 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430 [1, m]\npoints = [i for i in range(1, m + 1)]\n# \u043e\u0442\u0441\u0435\u0438\u0432\u0430\u0435\u043c \u0442\u0435 \u0447\u0438\u0441\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043f\u0430\u0434\u0430\u044e\u0442 \u0432 \u043e\u0434\u0438\u043d \u0438\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u0432\npoints = [i for i in points if not check(i, intervals)]\nprint(len(points))\nprint(*points)"
}
2022-04-18 03:43:23.965824 REASON stop
