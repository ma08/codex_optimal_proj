2022-04-20 11:38:23.939401 num operations 1
2022-04-20 11:38:23.939433 size on input set 1
2022-04-20 11:38:23.939624 using api key sunu
2022-04-20 11:38:26.003216 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef solve_dp(n, h, l, r, a):\n    dp = [[0] * h for _ in range(n)]\n    dp[0][a[0]] = 1\n    for i in range(n - 1):\n        for j in range(h):\n            if dp[i][j] == 0:\n                continue\n            if (j + a[i + 1]) % h >= l and (j + a[i + 1]) % h <= r:\n                dp[i + 1][(j + a[i + 1]) % h] = max(dp[i + 1][(j + a[i + 1]) % h], dp[i][j] + 1)\n            if (j + a[i + 1] - 1) % h >= l and (j + a[i + 1] - 1) % h <= r:\n                dp[i + 1][(j + a[i + 1] - 1) % h] = max(dp[i + 1][(j + a[i + 1] - 1) % h], dp[i][j] + 1)\n    return max(dp[n - 1])\n\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve_dp(n, h, l, r, a))\n"
    },
    {
      "index": 1,
      "text": "\ndef solve_dp(n, h, l, r, a):\n    dp = [[0] * h for i in range(n)]\n    dp[0][a[0]] = 1\n    for i in range(n - 1):\n        for j in range(h):\n            if dp[i][j] == 0:\n                continue\n            if (j + a[i + 1]) % h >= l and (j + a[i + 1]) % h <= r:\n                dp[i + 1][(j + a[i + 1]) % h] = max(dp[i + 1][(j + a[i + 1]) % h], dp[i][j] + 1)\n            if (j + a[i + 1] - 1) % h >= l and (j + a[i + 1] - 1) % h <= r:\n                dp[i + 1][(j + a[i + 1] - 1) % h] = max(dp[i + 1][(j + a[i + 1] - 1) % h], dp[i][j] + 1)\n    return max(dp[n - 1])\n\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve_dp(n, h, l, r, a))\n"
    }
  ],
  "created": 1650454704,
  "object": "edit"
}
2022-04-20 11:38:26.003511 fix syntax errors 2 ['\n\ndef solve_dp(n, h, l, r, a):\n    dp = [[0] * h for _ in range(n)]\n    dp[0][a[0]] = 1\n    for i in range(n - 1):\n        for j in range(h):\n            if dp[i][j] == 0:\n                continue\n            if (j + a[i + 1]) % h >= l and (j + a[i + 1]) % h <= r:\n                dp[i + 1][(j + a[i + 1]) % h] = max(dp[i + 1][(j + a[i + 1]) % h], dp[i][j] + 1)\n            if (j + a[i + 1] - 1) % h >= l and (j + a[i + 1] - 1) % h <= r:\n                dp[i + 1][(j + a[i + 1] - 1) % h] = max(dp[i + 1][(j + a[i + 1] - 1) % h], dp[i][j] + 1)\n    return max(dp[n - 1])\n\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve_dp(n, h, l, r, a))\n', '\ndef solve_dp(n, h, l, r, a):\n    dp = [[0] * h for i in range(n)]\n    dp[0][a[0]] = 1\n    for i in range(n - 1):\n        for j in range(h):\n            if dp[i][j] == 0:\n                continue\n            if (j + a[i + 1]) % h >= l and (j + a[i + 1]) % h <= r:\n                dp[i + 1][(j + a[i + 1]) % h] = max(dp[i + 1][(j + a[i + 1]) % h], dp[i][j] + 1)\n            if (j + a[i + 1] - 1) % h >= l and (j + a[i + 1] - 1) % h <= r:\n                dp[i + 1][(j + a[i + 1] - 1) % h] = max(dp[i + 1][(j + a[i + 1] - 1) % h], dp[i][j] + 1)\n    return max(dp[n - 1])\n\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\nprint(solve_dp(n, h, l, r, a))\n']
2022-04-20 11:38:26.003554 size on output set 2
2022-04-20 11:38:26.003566 num operations 1
2022-04-20 11:38:26.003572 size on input set 1
2022-04-20 11:38:26.003735 using api key soukgp
2022-04-20 11:38:46.560513 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# n, h, l, r = map(int, input().split())\n# a = list(map(int, input().split()))\n#\n# dp = [[0, 0] for i in range(n)]\n#\n# if a[0] > l and a[0] < r:\n#     dp[0][0] = 1\n# else:\n#     dp[0][0] = 0\n# if a[0] - 1 > l and a[0] - 1 < r:\n#     dp[0][1] = 1\n# else:\n#     dp[0][1] = 0\n#\n# for i in range(1, n):\n#     dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\n#     if a[i] > l and a[i] < r:\n#         dp[i][0] += 1\n#     dp[i][1] = max(dp[i - 1][0], dp[i - 1][1])\n#     if a[i] - 1 > l and a[i] - 1 < r:\n#         dp[i][1] += 1\n#\n# print(max(dp[n - 1][0], dp[n - 1][1]))\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0] * h for i in range(n)]\n\ndp[0][a[0]] = 1\n\nfor i in range(1, n):\n    for j in range(h):\n        if j > l and j < r:\n            dp[i][j] = max(dp[i - 1][j - 1], dp[i - 1][j + 1]) + 1\n        else:\n            dp[i][j] = max(dp[i - 1][j - 1], dp[i - 1][j + 1])\n\nprint(max(dp[n - 1][0], dp[n - 1][1]))\n"
    },
    {
      "index": 1,
      "text": "\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0, 0] for i in range(n)]\n\nif a[0] > l and a[0] < r:\n    dp[0][0] = 1\nelse:\n    dp[0][0] = 0\nif a[0] - 1 > l and a[0] - 1 < r:\n    dp[0][1] = 1\nelse:\n    dp[0][1] = 0\n\nfor i in range(1, n):\n    dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\n    if a[i] > l and a[i] < r:\n        dp[i][0] += 1\n    dp[i][1] = max(dp[i - 1][0], dp[i - 1][1])\n    if a[i] - 1 > l and a[i] - 1 < r:\n        dp[i][1] += 1\n\nprint(max(dp[n - 1][0], dp[n - 1][1]))\n"
    }
  ],
  "created": 1650454706,
  "object": "edit"
}
2022-04-20 11:38:46.560767 fix syntax errors 2 ['\n\n# n, h, l, r = map(int, input().split())\n# a = list(map(int, input().split()))\n#\n# dp = [[0, 0] for i in range(n)]\n#\n# if a[0] > l and a[0] < r:\n#     dp[0][0] = 1\n# else:\n#     dp[0][0] = 0\n# if a[0] - 1 > l and a[0] - 1 < r:\n#     dp[0][1] = 1\n# else:\n#     dp[0][1] = 0\n#\n# for i in range(1, n):\n#     dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\n#     if a[i] > l and a[i] < r:\n#         dp[i][0] += 1\n#     dp[i][1] = max(dp[i - 1][0], dp[i - 1][1])\n#     if a[i] - 1 > l and a[i] - 1 < r:\n#         dp[i][1] += 1\n#\n# print(max(dp[n - 1][0], dp[n - 1][1]))\n\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0] * h for i in range(n)]\n\ndp[0][a[0]] = 1\n\nfor i in range(1, n):\n    for j in range(h):\n        if j > l and j < r:\n            dp[i][j] = max(dp[i - 1][j - 1], dp[i - 1][j + 1]) + 1\n        else:\n            dp[i][j] = max(dp[i - 1][j - 1], dp[i - 1][j + 1])\n\nprint(max(dp[n - 1][0], dp[n - 1][1]))\n', '\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0, 0] for i in range(n)]\n\nif a[0] > l and a[0] < r:\n    dp[0][0] = 1\nelse:\n    dp[0][0] = 0\nif a[0] - 1 > l and a[0] - 1 < r:\n    dp[0][1] = 1\nelse:\n    dp[0][1] = 0\n\nfor i in range(1, n):\n    dp[i][0] = max(dp[i - 1][0], dp[i - 1][1])\n    if a[i] > l and a[i] < r:\n        dp[i][0] += 1\n    dp[i][1] = max(dp[i - 1][0], dp[i - 1][1])\n    if a[i] - 1 > l and a[i] - 1 < r:\n        dp[i][1] += 1\n\nprint(max(dp[n - 1][0], dp[n - 1][1]))\n']
2022-04-20 11:38:46.560810 size on output set 2
2022-04-20 11:38:46.560822 num operations 1
2022-04-20 11:38:46.560828 size on input set 1
2022-04-20 11:38:46.561001 using api key kouti
2022-04-20 11:38:55.789646 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    n, h, l, r = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = [[0 for _ in range(h)] for _ in range(n)]\n    dp[0][0] = 1\n    for i in range(1, n):\n        for j in range(h):\n            if j - a[i] >= 0:\n                dp[i][j] = max(dp[i - 1][j - a[i]], dp[i - 1][j - a[i] + 1])\n            else:\n                dp[i][j] = dp[i - 1][j - a[i] + 1]\n    ans = 0\n    for i in range(l, r + 1):\n        ans = max(ans, dp[n - 1][i])\n    print(ans)\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0 for _ in range(h)] for _ in range(n + 1)]\n\ndp[0][0] = 1\nfor i in range(1, n):\n    for j in range(h + 1):\n        dp[i][j] = max(dp[i - 1][j - a[i]] + (l <= j - a[i] <= r), dp[i - 1][j - a[i] + 1] + (l <= j - a[i] + 1 <= r))\n\nprint(max(dp[n]))\n"
    }
  ],
  "created": 1650454726,
  "object": "edit"
}
2022-04-20 11:38:55.789882 fix syntax errors 2 ['\ndef main():\n    n, h, l, r = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = [[0 for _ in range(h)] for _ in range(n)]\n    dp[0][0] = 1\n    for i in range(1, n):\n        for j in range(h):\n            if j - a[i] >= 0:\n                dp[i][j] = max(dp[i - 1][j - a[i]], dp[i - 1][j - a[i] + 1])\n            else:\n                dp[i][j] = dp[i - 1][j - a[i] + 1]\n    ans = 0\n    for i in range(l, r + 1):\n        ans = max(ans, dp[n - 1][i])\n    print(ans)\nif __name__ == "__main__":\n    main()\n', '\nn, h, l, r = map(int, input().split())\na = list(map(int, input().split()))\n\ndp = [[0 for _ in range(h)] for _ in range(n + 1)]\n\ndp[0][0] = 1\nfor i in range(1, n):\n    for j in range(h + 1):\n        dp[i][j] = max(dp[i - 1][j - a[i]] + (l <= j - a[i] <= r), dp[i - 1][j - a[i] + 1] + (l <= j - a[i] + 1 <= r))\n\nprint(max(dp[n]))\n']
2022-04-20 11:38:55.790008 size on output set 2
