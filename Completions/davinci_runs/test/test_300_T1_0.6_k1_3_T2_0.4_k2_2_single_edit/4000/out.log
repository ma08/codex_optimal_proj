2022-04-18 01:31:05.352845 """
You are given an unweighted tree with $n$ vertices. Recall that a tree is a connected undirected graph without cycles.

Your task is to choose three distinct vertices $a, b, c$ on this tree such that the number of edges which belong to at least one of the simple paths between $a$ and $b$, $b$ and $c$, or $a$ and $c$ is the maximum possible. See the notes section for a better understanding.

The simple path is the path that visits each vertex at most once.


-----Input-----

The first line contains one integer number $n$ ($3 \le n \le 2 \cdot 10^5$) — the number of vertices in the tree. 

Next $n - 1$ lines describe the edges of the tree in form $a_i, b_i$ ($1 \le a_i$, $b_i \le n$, $a_i \ne b_i$). It is guaranteed that given graph is a tree.


-----Output-----

In the first line print one integer $res$ — the maximum number of edges which belong to at least one of the simple paths between $a$ and $b$, $b$ and $c$, or $a$ and $c$.

In the second line print three integers $a, b, c$ such that $1 \le a, b, c \le n$ and $a \ne, b \ne c, a \ne c$.

If there are several answers, you can print any.


-----Example-----
Input
8
1 2
2 3
3 4
4 5
4 6
3 7
3 8

Output
5
1 8 6



-----Note-----

The picture corresponding to the first example (and another one correct answer):

[Image]

If you choose vertices $1, 5, 6$ then the path between $1$ and $5$ consists of edges $(1, 2), (2, 3), (3, 4), (4, 5)$, the path between $1$ and $6$ consists of edges $(1, 2), (2, 3), (3, 4), (4, 6)$ and the path between $5$ and $6$ consists of edges $(4, 5), (4, 6)$. The union of these paths is $(1, 2), (2, 3), (3, 4), (4, 5), (4, 6)$ so the answer is $5$. It can be shown that there is no better answer.
"""
2022-04-18 01:31:05.352876 --------------------------
2022-04-18 01:31:51.071766 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\ndef main():\n    n = int(input())\n    adj = [ [] for _ in range(n+1) ]\n    for _ in range(n-1):\n        a, b = map(int, input().split())\n        adj[a].append(b)\n        adj[b].append(a)\n    \n    parent = [0] * (n+1)\n    depth = [0] * (n+1)\n    def dfs(cur, par, dep):\n        parent[cur] = par\n        depth[cur] = dep\n        for child in adj[cur]:\n            if child != par:\n                dfs(child, cur, dep+1)\n    \n    dfs(1, 0, 0)\n    \n    def lca(a, b):\n        if depth[a] > depth[b]:\n            a, b = b, a\n        while depth[a] < depth[b]:\n            b = parent[b]\n        while a != b:\n            a = parent[a]\n            b = parent[b]\n        return a\n    \n    def solve(x, y, z):\n        # x -> y -> z\n        p1 = lca(x, y)\n        p2 = lca(y, z)\n        p3 = lca(x, z)\n        d1 = depth[x] + depth[y] - 2 * depth[p1]\n        d2 = depth[y] + depth[z] - 2 * depth[p2]\n        d3 = depth[x] + depth[z] - 2 * depth[p3]\n        return max(d1, d2, d3)\n    \n    ans = 0\n    x, y, z = 0, 0, 0\n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                t = solve(i, j, k)\n                if t > ans:\n                    ans = t\n                    x, y, z = i, j, k\n    print(ans)\n    print(x, y, z)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nimport sys\nimport queue\n\ndef main():\n    n = int(sys.stdin.readline())\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        a, b = map(int, sys.stdin.readline().split())\n        graph[a].append(b)\n        graph[b].append(a)\n    res = 0\n    for i in range(1, n + 1):\n        max_1, max_2 = 0, 0\n        dist_1 = [0] * (n + 1)\n        q = queue.Queue()\n        q.put(i)\n        while not q.empty():\n            u = q.get()\n            for v in graph[u]:\n                if dist_1[v] == 0:\n                    dist_1[v] = dist_1[u] + 1\n                    if dist_1[v] > max_1:\n                        max_2 = max_1\n                        max_1 = dist_1[v]\n                    elif dist_1[v] > max_2:\n                        max_2 = dist_1[v]\n                    q.put(v)\n        for j in range(1, n + 1):\n            if dist_1[j] == max_2:\n                max_3 = 0\n                dist_2 = [0] * (n + 1)\n                q = queue.Queue()\n                q.put(j)\n                while not q.empty():\n                    u = q.get()\n                    for v in graph[u]:\n                        if dist_2[v] == 0:\n                            dist_2[v] = dist_2[u] + 1\n                            if dist_2[v] > max_3:\n                                max_3 = dist_2[v]\n                            q.put(v)\n                if max_1 + max_2 + max_3 - 3 > res:\n                    res = max_1 + max_2 + max_3 - 3\n                    a = i\n                    b = j\n                    c = 0\n                    for k in range(1, n + 1):\n                        if dist_2[k] == max_3:\n                            c = k\n                            break\n    print(res)\n    print(a, b, c)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 2,
      "logprobs": null,
      "text": "\n\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\n\ndef dfs(v, parent = -1):\n    for u in g[v]:\n        if u != parent:\n            dfs(u, v)\n            dp1[v] += dp2[u]\n            dp2[v] += max(dp1[u], dp2[u])\n\nn = int(input())\ng = [set() for _ in range(n + 1)]\nfor _ in range(n - 1):\n    a, b = map(int, input().split())\n    g[a].add(b)\n    g[b].add(a)\n\ndp1 = [0] * (n + 1)\ndp2 = [1] * (n + 1)\ndfs(1)\n\nprint(max(dp1[1], dp2[1]))\nfor v in range(1, n + 1):\n    if dp1[v] == max(dp1[1], dp2[1]) and v != 1:\n        print(1, v)\n        break\nfor v in range(1, n + 1):\n    if dp2[v] == max(dp1[1], dp2[1]) and v != 1:\n        print(v)\n        break"
    }
  ],
  "created": 1650245466,
  "id": "cmpl-4yAWI54EvTWalRowTdEtgBckrcKsB",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-18 01:31:51.072053 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\ndef main():\n    n = int(input())\n    adj = [ [] for _ in range(n+1) ]\n    for _ in range(n-1):\n        a, b = map(int, input().split())\n        adj[a].append(b)\n        adj[b].append(a)\n    \n    parent = [0] * (n+1)\n    depth = [0] * (n+1)\n    def dfs(cur, par, dep):\n        parent[cur] = par\n        depth[cur] = dep\n        for child in adj[cur]:\n            if child != par:\n                dfs(child, cur, dep+1)\n    \n    dfs(1, 0, 0)\n    \n    def lca(a, b):\n        if depth[a] > depth[b]:\n            a, b = b, a\n        while depth[a] < depth[b]:\n            b = parent[b]\n        while a != b:\n            a = parent[a]\n            b = parent[b]\n        return a\n    \n    def solve(x, y, z):\n        # x -> y -> z\n        p1 = lca(x, y)\n        p2 = lca(y, z)\n        p3 = lca(x, z)\n        d1 = depth[x] + depth[y] - 2 * depth[p1]\n        d2 = depth[y] + depth[z] - 2 * depth[p2]\n        d3 = depth[x] + depth[z] - 2 * depth[p3]\n        return max(d1, d2, d3)\n    \n    ans = 0\n    x, y, z = 0, 0, 0\n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                t = solve(i, j, k)\n                if t > ans:\n                    ans = t\n                    x, y, z = i, j, k\n    print(ans)\n    print(x, y, z)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nif __name__ == \"__main__\":\n    main()"
}
2022-04-18 01:31:51.072097 REASON stop
2022-04-18 01:31:51.111674 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nimport sys\nimport queue\n\ndef main():\n    n = int(sys.stdin.readline())\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        a, b = map(int, sys.stdin.readline().split())\n        graph[a].append(b)\n        graph[b].append(a)\n    res = 0\n    for i in range(1, n + 1):\n        max_1, max_2 = 0, 0\n        dist_1 = [0] * (n + 1)\n        q = queue.Queue()\n        q.put(i)\n        while not q.empty():\n            u = q.get()\n            for v in graph[u]:\n                if dist_1[v] == 0:\n                    dist_1[v] = dist_1[u] + 1\n                    if dist_1[v] > max_1:\n                        max_2 = max_1\n                        max_1 = dist_1[v]\n                    elif dist_1[v] > max_2:\n                        max_2 = dist_1[v]\n                    q.put(v)\n        for j in range(1, n + 1):\n            if dist_1[j] == max_2:\n                max_3 = 0\n                dist_2 = [0] * (n + 1)\n                q = queue.Queue()\n                q.put(j)\n                while not q.empty():\n                    u = q.get()\n                    for v in graph[u]:\n                        if dist_2[v] == 0:\n                            dist_2[v] = dist_2[u] + 1\n                            if dist_2[v] > max_3:\n                                max_3 = dist_2[v]\n                            q.put(v)\n                if max_1 + max_2 + max_3 - 3 > res:\n                    res = max_1 + max_2 + max_3 - 3\n                    a = i\n                    b = j\n                    c = 0\n                    for k in range(1, n + 1):\n                        if dist_2[k] == max_3:\n                            c = k\n                            break\n    print(res)\n    print(a, b, c)\n\nif __name__ == \"__main__\":\n    main()"
}
2022-04-18 01:31:51.111784 REASON stop
2022-04-18 01:31:51.112290 2 {
  "finish_reason": "stop",
  "index": 2,
  "logprobs": null,
  "text": "\n\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\n\ndef dfs(v, parent = -1):\n    for u in g[v]:\n        if u != parent:\n            dfs(u, v)\n            dp1[v] += dp2[u]\n            dp2[v] += max(dp1[u], dp2[u])\n\nn = int(input())\ng = [set() for _ in range(n + 1)]\nfor _ in range(n - 1):\n    a, b = map(int, input().split())\n    g[a].add(b)\n    g[b].add(a)\n\ndp1 = [0] * (n + 1)\ndp2 = [1] * (n + 1)\ndfs(1)\n\nprint(max(dp1[1], dp2[1]))\nfor v in range(1, n + 1):\n    if dp1[v] == max(dp1[1], dp2[1]) and v != 1:\n        print(1, v)\n        break\nfor v in range(1, n + 1):\n    if dp2[v] == max(dp1[1], dp2[1]) and v != 1:\n        print(v)\n        break"
}
2022-04-18 01:31:51.112341 REASON stop
