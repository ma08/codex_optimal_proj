2022-04-20 11:24:00.529288 num operations 1
2022-04-20 11:24:00.529361 size on input set 1
2022-04-20 11:24:00.529570 using api key gabby
2022-04-20 11:24:07.465037 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\n\ndef dfs(v, parent = -1):\n    for u in g[v]:\n        if u != parent:\n            dfs(u, v)\n            dp1[v] += dp2[u]\n            dp2[v] += max(dp1[u], dp2[u])\n\nn = int(input())\ng = [set() for _ in range(n + 1)]\nfor _ in range(n - 1):\n    a, b = map(int, input().split())\n    g[a].add(b)\n    g[b].add(a)\n\ndp1 = [0] * (n + 1)\ndp2 = [1] * (n + 1)\ndfs(1)\n\nprint(max(dp1[1], dp2[1]))\nfor v in range(1, n + 1):\n    if dp1[v] == max(dp1[1], dp2[1]) and v != 1:\n        print(1, v)\n        break\nfor v in range(1, n + 1):\n    if dp2[v] == max(dp1[1], dp2[1]) and v != 1:\n        print(v)\n        break\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n"
    }
  ],
  "created": 1650453840,
  "object": "edit"
}
2022-04-20 11:24:07.465304 fix syntax errors 2 ['\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\n\ndef dfs(v, parent = -1):\n    for u in g[v]:\n        if u != parent:\n            dfs(u, v)\n            dp1[v] += dp2[u]\n            dp2[v] += max(dp1[u], dp2[u])\n\nn = int(input())\ng = [set() for _ in range(n + 1)]\nfor _ in range(n - 1):\n    a, b = map(int, input().split())\n    g[a].add(b)\n    g[b].add(a)\n\ndp1 = [0] * (n + 1)\ndp2 = [1] * (n + 1)\ndfs(1)\n\nprint(max(dp1[1], dp2[1]))\nfor v in range(1, n + 1):\n    if dp1[v] == max(dp1[1], dp2[1]) and v != 1:\n        print(1, v)\n        break\nfor v in range(1, n + 1):\n    if dp2[v] == max(dp1[1], dp2[1]) and v != 1:\n        print(v)\n        break\n', '\nimport sys\n']
2022-04-20 11:24:07.465333 size on output set 2
2022-04-20 11:24:07.465345 num operations 1
2022-04-20 11:24:07.465351 size on input set 1
2022-04-20 11:24:07.465538 using api key jaanu
2022-04-20 11:24:13.223481 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python3\n\nimport sys\nimport queue\n\ndef main():\n    n = int(sys.stdin.readline())\n    graph = [[] for _ in range(n + 1)] # graph[i] is a list of nodes that are adjacent to node i\n    for _ in range(n - 1):\n        a, b = map(int, sys.stdin.readline().split())\n        graph[a].append(b) # node a is adjacent to node b\n        graph[b].append(a) # node b is adjacent to node a\n    res = 0\n    for i in range(1, n + 1):\n        max_1, max_2 = 0, 0 # max_1 is the maximum distance from node i, max_2 is the second maximum distance from node i\n        dist_1 = [0] * (n + 1)\n        q = queue.Queue() # use bfs to find the maximum distance from node i\n        q.put(i)\n        while not q.empty():\n            u = q.get()\n            for v in graph[u]:\n                if dist_1[v] == 0:\n                    dist_1[v] = dist_1[u] + 1\n                    if dist_1[v] > max_1:\n                        max_2 = max_1\n                        max_1 = dist_1[v]\n                    elif dist_1[v] > max_2:\n                        max_2 = dist_1[v]\n                    q.put(v)\n        for j in range(1, n + 1):\n            if dist_1[j] == max_2:\n                max_3 = 0\n                dist_2 = [0] * (n + 1)\n                q = queue.Queue()\n                q.put(j)\n                while not q.empty():\n                    u = q.get()\n                    for v in graph[u]:\n                        if dist_2[v] == 0:\n                            dist_2[v] = dist_2[u] + 1\n                            if dist_2[v] > max_3:\n                                max_3 = dist_2[v]\n                            q.put(v)\n                if max_1 + max_2 + max_3 - 3 > res:\n                    res = max_1 + max_2 + max_3 - 3\n                    a = i\n                    b = j\n                    c = 0\n                    for k in range(1, n + 1):\n                        if dist_2[k] == max_3:\n                            c = k\n                            break\n    print(res)\n    print(a, b, c)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\nimport queue\n\ndef main():\n    n = int(sys.stdin.readline())\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        a, b = map(int, sys.stdin.readline().split())\n        graph[a].append(b)\n        graph[b].append(a)\n    res = 0\n    for i in range(1, n + 1):\n        max_1, max_2 = 0, 0\n        dist_1 = [0] * (n + 1)\n        q = queue.Queue()\n        q.put(i)\n        while not q.empty():\n            u = q.get()\n            for v in graph[u]:\n                if dist_1[v] == 0:\n                    dist_1[v] = dist_1[u] + 1\n                    if dist_1[v] > max_1:\n                        max_2 = max_1\n                        max_1 = dist_1[v]\n                    elif dist_1[v] > max_2:\n                        max_2 = dist_1[v]\n                    q.put(v)\n        for j in range(1, n + 1):\n            if dist_1[j] == max_2:\n                max_3 = 0\n                dist_2 = [0] * (n + 1)\n                q = queue.Queue()\n                q.put(j)\n                while not q.empty():\n                    u = q.get()\n                    for v in graph[u]:\n                        if dist_2[v] == 0:\n                            dist_2[v] = dist_2[u] + 1\n                            if dist_2[v] > max_3:\n                                max_3 = dist_2[v]\n                            q.put(v)\n                if max_1 + max_2 + max_3 - 3 > res:\n                    res = max_1 + max_2 + max_3 - 3\n                    a = i\n                    b = j\n                    c = 0\n                    for k in range(1, n + 1):\n                        if dist_2[k] == max_3:\n                            c = k\n                            break\n    print(res)\n    print(a, b, c)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650453847,
  "object": "edit"
}
2022-04-20 11:24:13.223718 fix syntax errors 2 ['#!/usr/bin/env python3\n\nimport sys\nimport queue\n\ndef main():\n    n = int(sys.stdin.readline())\n    graph = [[] for _ in range(n + 1)] # graph[i] is a list of nodes that are adjacent to node i\n    for _ in range(n - 1):\n        a, b = map(int, sys.stdin.readline().split())\n        graph[a].append(b) # node a is adjacent to node b\n        graph[b].append(a) # node b is adjacent to node a\n    res = 0\n    for i in range(1, n + 1):\n        max_1, max_2 = 0, 0 # max_1 is the maximum distance from node i, max_2 is the second maximum distance from node i\n        dist_1 = [0] * (n + 1)\n        q = queue.Queue() # use bfs to find the maximum distance from node i\n        q.put(i)\n        while not q.empty():\n            u = q.get()\n            for v in graph[u]:\n                if dist_1[v] == 0:\n                    dist_1[v] = dist_1[u] + 1\n                    if dist_1[v] > max_1:\n                        max_2 = max_1\n                        max_1 = dist_1[v]\n                    elif dist_1[v] > max_2:\n                        max_2 = dist_1[v]\n                    q.put(v)\n        for j in range(1, n + 1):\n            if dist_1[j] == max_2:\n                max_3 = 0\n                dist_2 = [0] * (n + 1)\n                q = queue.Queue()\n                q.put(j)\n                while not q.empty():\n                    u = q.get()\n                    for v in graph[u]:\n                        if dist_2[v] == 0:\n                            dist_2[v] = dist_2[u] + 1\n                            if dist_2[v] > max_3:\n                                max_3 = dist_2[v]\n                            q.put(v)\n                if max_1 + max_2 + max_3 - 3 > res:\n                    res = max_1 + max_2 + max_3 - 3\n                    a = i\n                    b = j\n                    c = 0\n                    for k in range(1, n + 1):\n                        if dist_2[k] == max_3:\n                            c = k\n                            break\n    print(res)\n    print(a, b, c)\n\nif __name__ == "__main__":\n    main()\n', 'import sys\nimport queue\n\ndef main():\n    n = int(sys.stdin.readline())\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        a, b = map(int, sys.stdin.readline().split())\n        graph[a].append(b)\n        graph[b].append(a)\n    res = 0\n    for i in range(1, n + 1):\n        max_1, max_2 = 0, 0\n        dist_1 = [0] * (n + 1)\n        q = queue.Queue()\n        q.put(i)\n        while not q.empty():\n            u = q.get()\n            for v in graph[u]:\n                if dist_1[v] == 0:\n                    dist_1[v] = dist_1[u] + 1\n                    if dist_1[v] > max_1:\n                        max_2 = max_1\n                        max_1 = dist_1[v]\n                    elif dist_1[v] > max_2:\n                        max_2 = dist_1[v]\n                    q.put(v)\n        for j in range(1, n + 1):\n            if dist_1[j] == max_2:\n                max_3 = 0\n                dist_2 = [0] * (n + 1)\n                q = queue.Queue()\n                q.put(j)\n                while not q.empty():\n                    u = q.get()\n                    for v in graph[u]:\n                        if dist_2[v] == 0:\n                            dist_2[v] = dist_2[u] + 1\n                            if dist_2[v] > max_3:\n                                max_3 = dist_2[v]\n                            q.put(v)\n                if max_1 + max_2 + max_3 - 3 > res:\n                    res = max_1 + max_2 + max_3 - 3\n                    a = i\n                    b = j\n                    c = 0\n                    for k in range(1, n + 1):\n                        if dist_2[k] == max_3:\n                            c = k\n                            break\n    print(res)\n    print(a, b, c)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 11:24:13.223897 size on output set 2
2022-04-20 11:24:13.223912 num operations 1
2022-04-20 11:24:13.223919 size on input set 1
2022-04-20 11:24:13.224079 using api key sunu
2022-04-20 11:24:23.275678 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n = int(input())\n    adj = [[] for _ in range(n+1)]\n    for _ in range(n-1):\n        a, b = map(int, input().split())  # noqa\n        adj[a].append(b)\n        adj[b].append(a)\n\n    parent = [0] * (n+1)\n    depth = [0] * (n+1)\n    def dfs(cur, par, dep):\n        parent[cur] = par\n        depth[cur] = dep\n        for child in adj[cur]:\n            if child != par:\n                dfs(child, cur, dep+1)\n\n    dfs(1, 0, 0)\n\n    def lca(a, b):\n        if depth[a] > depth[b]:\n            a, b = b, a\n        while depth[a] < depth[b]:\n            b = parent[b]\n        while a != b:\n            a = parent[a]\n            b = parent[b]\n        return a\n    \n    def solve(x, y, z):\n        # x -> y -> z\n        p1 = lca(x, y)\n        p2 = lca(y, z)\n        p3 = lca(x, z)\n        d1 = depth[x] + depth[y] - 2 * depth[p1]\n        d2 = depth[y] + depth[z] - 2 * depth[p2]\n        d3 = depth[x] + depth[z] - 2 * depth[p3]\n        return max(d1, d2, d3)\n    \n    ans = 0\n    x, y, z = 0, 0, 0\n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                t = solve(i, j, k)\n                if t > ans:\n                    ans = t\n                    x, y, z = i, j, k\n    print(ans)\n    print(x, y, z)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef lca(a, b):\n    if depth[a] > depth[b]:\n        a, b = b, a\n    while depth[a] < depth[b]:\n        b = parent[b]\n    while a != b:\n        a = parent[a]\n        b = parent[b]\n    return a\n\ndef solve(x, y, z):\n    # x -> y -> z\n    p1 = lca(x, y)\n    p2 = lca(y, z)\n    p3 = lca(x, z)\n    d1 = depth[x] + depth[y] - 2 * depth[p1]\n    d2 = depth[y] + depth[z] - 2 * depth[p2]\n    d3 = depth[x] + depth[z] - 2 * depth[p3]\n    return max(d1, d2, d3)\n\ndef main():\n    n = int(input())\n    adj = [ [] for _ in range(n+1) ]\n    for _ in range(n-1):\n        a, b = map(int, input().split())\n        adj[a].append(b)\n        adj[b].append(a)\n    \n    parent = [0] * (n+1)\n    depth = [0] * (n+1)\n    def dfs(cur, par, dep):\n        parent[cur] = par\n        depth[cur] = dep\n        for child in adj[cur]:\n            if child != par:\n                dfs(child, cur, dep+1)\n    \n    dfs(1, 0, 0)\n    \n    ans = 0\n    x, y, z = 0, 0, 0\n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                t = solve(i, j, k)\n                if t > ans:\n                    ans = t\n                    x, y, z = i, j, k\n    print(ans)\n    print(x, y, z)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650453853,
  "object": "edit"
}
2022-04-20 11:24:23.275924 fix syntax errors 2 ['\n\ndef main():\n    n = int(input())\n    adj = [[] for _ in range(n+1)]\n    for _ in range(n-1):\n        a, b = map(int, input().split())  # noqa\n        adj[a].append(b)\n        adj[b].append(a)\n\n    parent = [0] * (n+1)\n    depth = [0] * (n+1)\n    def dfs(cur, par, dep):\n        parent[cur] = par\n        depth[cur] = dep\n        for child in adj[cur]:\n            if child != par:\n                dfs(child, cur, dep+1)\n\n    dfs(1, 0, 0)\n\n    def lca(a, b):\n        if depth[a] > depth[b]:\n            a, b = b, a\n        while depth[a] < depth[b]:\n            b = parent[b]\n        while a != b:\n            a = parent[a]\n            b = parent[b]\n        return a\n    \n    def solve(x, y, z):\n        # x -> y -> z\n        p1 = lca(x, y)\n        p2 = lca(y, z)\n        p3 = lca(x, z)\n        d1 = depth[x] + depth[y] - 2 * depth[p1]\n        d2 = depth[y] + depth[z] - 2 * depth[p2]\n        d3 = depth[x] + depth[z] - 2 * depth[p3]\n        return max(d1, d2, d3)\n    \n    ans = 0\n    x, y, z = 0, 0, 0\n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                t = solve(i, j, k)\n                if t > ans:\n                    ans = t\n                    x, y, z = i, j, k\n    print(ans)\n    print(x, y, z)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nif __name__ == "__main__":\n    main()\n', '\n\ndef lca(a, b):\n    if depth[a] > depth[b]:\n        a, b = b, a\n    while depth[a] < depth[b]:\n        b = parent[b]\n    while a != b:\n        a = parent[a]\n        b = parent[b]\n    return a\n\ndef solve(x, y, z):\n    # x -> y -> z\n    p1 = lca(x, y)\n    p2 = lca(y, z)\n    p3 = lca(x, z)\n    d1 = depth[x] + depth[y] - 2 * depth[p1]\n    d2 = depth[y] + depth[z] - 2 * depth[p2]\n    d3 = depth[x] + depth[z] - 2 * depth[p3]\n    return max(d1, d2, d3)\n\ndef main():\n    n = int(input())\n    adj = [ [] for _ in range(n+1) ]\n    for _ in range(n-1):\n        a, b = map(int, input().split())\n        adj[a].append(b)\n        adj[b].append(a)\n    \n    parent = [0] * (n+1)\n    depth = [0] * (n+1)\n    def dfs(cur, par, dep):\n        parent[cur] = par\n        depth[cur] = dep\n        for child in adj[cur]:\n            if child != par:\n                dfs(child, cur, dep+1)\n    \n    dfs(1, 0, 0)\n    \n    ans = 0\n    x, y, z = 0, 0, 0\n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                t = solve(i, j, k)\n                if t > ans:\n                    ans = t\n                    x, y, z = i, j, k\n    print(ans)\n    print(x, y, z)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nif __name__ == "__main__":\n    main()\n']
2022-04-20 11:24:23.275977 size on output set 2
