2022-04-20 11:48:33.142072 num operations 1
2022-04-20 11:48:33.142094 size on input set 1
2022-04-20 11:48:33.142265 using api key jaanu
2022-04-20 11:48:35.924258 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# SOLUTION\nimport sys\n\ndata = sys.stdin.read().split()\nn, k, x = map(int, data[:3])\na = list(map(int, data[3:]))\n\nif x < k:\n    print(-1)\n    sys.exit(0)\n\nresult = sum(a[:k])\n\nfor i in range(k, n):\n    result += a[i] - a[i - k]\n\n\nprint(result)\n"
    },
    {
      "index": 1,
      "text": "\n# SOLUTION\nimport sys\n\nn, k, x = map(int, sys.stdin.read().split())\na = list(map(int, sys.stdin.read().split()))\n\nif x < k:\n    print(-1)\n    sys.exit(0)\n\nresult = sum(a[:k])\n\nfor i in range(k, n):\n    result += a[i] - a[i - k]\n\nprint(result)\n"
    }
  ],
  "created": 1650455313,
  "object": "edit"
}
2022-04-20 11:48:35.924503 fix syntax errors 2 ['\n# SOLUTION\nimport sys\n\ndata = sys.stdin.read().split()\nn, k, x = map(int, data[:3])\na = list(map(int, data[3:]))\n\nif x < k:\n    print(-1)\n    sys.exit(0)\n\nresult = sum(a[:k])\n\nfor i in range(k, n):\n    result += a[i] - a[i - k]\n\n\nprint(result)\n', '\n# SOLUTION\nimport sys\n\nn, k, x = map(int, sys.stdin.read().split())\na = list(map(int, sys.stdin.read().split()))\n\nif x < k:\n    print(-1)\n    sys.exit(0)\n\nresult = sum(a[:k])\n\nfor i in range(k, n):\n    result += a[i] - a[i - k]\n\nprint(result)\n']
2022-04-20 11:48:35.924531 size on output set 2
2022-04-20 11:48:35.924542 num operations 1
2022-04-20 11:48:35.924548 size on input set 1
2022-04-20 11:48:35.924762 using api key gabby
2022-04-20 11:48:46.180129 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn,k,x = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\ndef brute_force(n, k, x, a):\n    if x == 0:\n        return 0\n    if n == k:\n        return sum(a)\n    max_sum = -1\n    for i in range(n-k+1):\n        curr_sum = sum(a[i:i+k])\n        curr_sum += brute_force(n-k, k, x-1, a[i+k:])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\ndef dp(n, k, x, a):\n    if x == 0:\n        return 0\n    if n == k:\n        return sum(a)\n\n    dp = [[[-1 for _ in range(x+1)] for _ in range(k)] for _ in range(n)]\n\n    for i in range(n):\n        for j in range(k):\n            if i+j >= n:\n                break\n            dp[i][j][1] = sum(a[i:i+j+1])\n    \n    for i in range(n):\n        for j in range(k):\n            if i+j >= n:\n                break\n            for l in range(2, x+1):\n                for m in range(i+j+1, n):\n                    if j+m-i+1 >= k:\n                        dp[i][j][l] = max(dp[i][j][l], sum(a[i:i+j+1])+dp[m][j+m-i+1-k][l-1])\n    \n    return max([max(x) for x in dp[0][0]])\n#print(brute_force(n,k,x,a))\nprint(dp(n,k,x,a))\n"
    },
    {
      "index": 1,
      "text": "\n\nn,k,x = [int(x) for x in input().split()] # n = length of array, k = length of subarray, x = number of swaps\na = [int(x) for x in input().split()] # array\n\ndef brute_force(n, k, x, a): # time limit exceeded\n    if x == 0:\n        return 0\n    if n == k:\n        return sum(a)\n    max_sum = -1\n    for i in range(n-k+1):\n        curr_sum = sum(a[i:i+k])\n        curr_sum += brute_force(n-k, k, x-1, a[i+k:])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n\ndef dp(n, k, x, a): # accepted\n    if x == 0:\n        return 0\n    if n == k:\n        return sum(a)\n\n    dp = [[[-1 for _ in range(x+1)] for _ in range(k)] for _ in range(n)] # dp[i][j][l] = max sum of subarrays of length j starting from index i with l swaps\n\n    for i in range(n):\n        for j in range(k):\n            if i+j >= n:\n                break\n            dp[i][j][1] = sum(a[i:i+j+1]) # base case\n    \n    for i in range(n):\n        for j in range(k):\n            if i+j >= n:\n                break\n            for l in range(2, x+1):\n                for m in range(i+j+1, n):\n                    if j+m-i+1 >= k:\n                        dp[i][j][l] = max(dp[i][j][l], sum(a[i:i+j+1])+dp[m][j+m-i+1-k][l-1]) # recursive case\n    \n    return max([max(x) for x in dp[0][0]]) # return max sum of subarrays of length 0 starting from index 0 with l swaps\n\n#print(brute_force(n,k,x,a))\nprint(dp(n,k,x,a))\n"
    }
  ],
  "created": 1650455315,
  "object": "edit"
}
2022-04-20 11:48:46.180362 fix syntax errors 2 ['\nn,k,x = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\ndef brute_force(n, k, x, a):\n    if x == 0:\n        return 0\n    if n == k:\n        return sum(a)\n    max_sum = -1\n    for i in range(n-k+1):\n        curr_sum = sum(a[i:i+k])\n        curr_sum += brute_force(n-k, k, x-1, a[i+k:])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\ndef dp(n, k, x, a):\n    if x == 0:\n        return 0\n    if n == k:\n        return sum(a)\n\n    dp = [[[-1 for _ in range(x+1)] for _ in range(k)] for _ in range(n)]\n\n    for i in range(n):\n        for j in range(k):\n            if i+j >= n:\n                break\n            dp[i][j][1] = sum(a[i:i+j+1])\n    \n    for i in range(n):\n        for j in range(k):\n            if i+j >= n:\n                break\n            for l in range(2, x+1):\n                for m in range(i+j+1, n):\n                    if j+m-i+1 >= k:\n                        dp[i][j][l] = max(dp[i][j][l], sum(a[i:i+j+1])+dp[m][j+m-i+1-k][l-1])\n    \n    return max([max(x) for x in dp[0][0]])\n#print(brute_force(n,k,x,a))\nprint(dp(n,k,x,a))\n', '\n\nn,k,x = [int(x) for x in input().split()] # n = length of array, k = length of subarray, x = number of swaps\na = [int(x) for x in input().split()] # array\n\ndef brute_force(n, k, x, a): # time limit exceeded\n    if x == 0:\n        return 0\n    if n == k:\n        return sum(a)\n    max_sum = -1\n    for i in range(n-k+1):\n        curr_sum = sum(a[i:i+k])\n        curr_sum += brute_force(n-k, k, x-1, a[i+k:])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n\ndef dp(n, k, x, a): # accepted\n    if x == 0:\n        return 0\n    if n == k:\n        return sum(a)\n\n    dp = [[[-1 for _ in range(x+1)] for _ in range(k)] for _ in range(n)] # dp[i][j][l] = max sum of subarrays of length j starting from index i with l swaps\n\n    for i in range(n):\n        for j in range(k):\n            if i+j >= n:\n                break\n            dp[i][j][1] = sum(a[i:i+j+1]) # base case\n    \n    for i in range(n):\n        for j in range(k):\n            if i+j >= n:\n                break\n            for l in range(2, x+1):\n                for m in range(i+j+1, n):\n                    if j+m-i+1 >= k:\n                        dp[i][j][l] = max(dp[i][j][l], sum(a[i:i+j+1])+dp[m][j+m-i+1-k][l-1]) # recursive case\n    \n    return max([max(x) for x in dp[0][0]]) # return max sum of subarrays of length 0 starting from index 0 with l swaps\n\n#print(brute_force(n,k,x,a))\nprint(dp(n,k,x,a))\n']
2022-04-20 11:48:46.180430 size on output set 2
2022-04-20 11:48:46.180442 num operations 1
2022-04-20 11:48:46.180448 size on input set 1
2022-04-20 11:48:46.180603 using api key sunu
2022-04-20 11:48:51.594137 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nn, k, x = map(int, input().split())\narr = list(map(int, input().split()))\n\nif k > x:\n    print(-1)\n    exit()\n\n# For each index i, dp[i] is the max sum of beauty values of pictures that\n# can be posted from index i to the end of the array\ndp = [0] * (n+1)\ndp[-1] = arr[-1]\nfor i in range(n-1, -1, -1):\n    dp[i] = max(dp[i+1], dp[max(0, i+k)] + arr[i])\n\nprint(dp[0])\n"
    },
    {
      "index": 1,
      "text": "\na,b=map(int,input().split())\nc=a*b\nfor i in range(0,c+1):\n    if(i**2==c):\n        print(\"yes\")\n        break\nelse:\n    print(\"no\")\n"
    }
  ],
  "created": 1650455326,
  "object": "edit"
}
2022-04-20 11:48:51.594356 fix syntax errors 2 ['\nn, k, x = map(int, input().split())\narr = list(map(int, input().split()))\n\nif k > x:\n    print(-1)\n    exit()\n\n# For each index i, dp[i] is the max sum of beauty values of pictures that\n# can be posted from index i to the end of the array\ndp = [0] * (n+1)\ndp[-1] = arr[-1]\nfor i in range(n-1, -1, -1):\n    dp[i] = max(dp[i+1], dp[max(0, i+k)] + arr[i])\n\nprint(dp[0])\n', '\na,b=map(int,input().split())\nc=a*b\nfor i in range(0,c+1):\n    if(i**2==c):\n        print("yes")\n        break\nelse:\n    print("no")\n']
2022-04-20 11:48:51.594474 size on output set 2
