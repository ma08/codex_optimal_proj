2022-04-20 12:00:21.202851 num operations 1
2022-04-20 12:00:21.202872 size on input set 1
2022-04-20 12:00:21.203042 using api key kouti
2022-04-20 12:00:28.693342 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef solve(n, c_lib, c_road, cities):\n    return 0\n\nq = int(raw_input().strip())\nfor a0 in xrange(q):\n    n, m, c_lib, c_road = raw_input().strip().split(' ')\n    n, m, c_lib, c_road = [int(n), int(m), int(c_lib), int(c_road)]\n    cities = []\n    for cities_i in xrange(m):\n        cities_temp = map(int,raw_input().strip().split(' '))\n        cities.append(cities_temp)\n    print solve(n, c_lib, c_road, cities)\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\n\ndef solve(n, a, b, c):\n    a, b = min(a, b), max(a, b)\n    if a == b:\n        return n * a\n    if n % 2 == 0:\n        return (a * (n//2)) + (b * (n//2))\n    else:\n        return (a * (n//2)) + (b * (n//2)) + a\n\nq = int(raw_input().strip())\nfor a0 in xrange(q):\n    n, a, b, c = raw_input().strip().split(' ')\n    n, a, b, c = [int(n), int(a), int(b), int(c)]\n    print solve(n, a, b, c)\n"
    }
  ],
  "created": 1650456021,
  "object": "edit"
}
2022-04-20 12:00:28.693586 fix syntax errors 2 ["\nimport sys\n\ndef solve(n, c_lib, c_road, cities):\n    return 0\n\nq = int(raw_input().strip())\nfor a0 in xrange(q):\n    n, m, c_lib, c_road = raw_input().strip().split(' ')\n    n, m, c_lib, c_road = [int(n), int(m), int(c_lib), int(c_road)]\n    cities = []\n    for cities_i in xrange(m):\n        cities_temp = map(int,raw_input().strip().split(' '))\n        cities.append(cities_temp)\n    print solve(n, c_lib, c_road, cities)\n", "\nimport sys\n\n\ndef solve(n, a, b, c):\n    a, b = min(a, b), max(a, b)\n    if a == b:\n        return n * a\n    if n % 2 == 0:\n        return (a * (n//2)) + (b * (n//2))\n    else:\n        return (a * (n//2)) + (b * (n//2)) + a\n\nq = int(raw_input().strip())\nfor a0 in xrange(q):\n    n, a, b, c = raw_input().strip().split(' ')\n    n, a, b, c = [int(n), int(a), int(b), int(c)]\n    print solve(n, a, b, c)\n"]
2022-04-20 12:00:28.693617 size on output set 2
2022-04-20 12:00:28.693627 num operations 1
2022-04-20 12:00:28.693633 size on input set 1
2022-04-20 12:00:28.693785 using api key derek
2022-04-20 12:00:28.729062 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 12:00:30.230938 using api key gabby
2022-04-20 12:00:32.132648 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "def minimum_cost_bottles(n, a, b):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return a\n    elif n == 2:\n        return min(2*a, b)\n    else:\n        return min(n*a, n//2*b + n%2*a)\n\ndef main():\n    q = int(input())\n    queries = []\n    for i in range(q):\n        queries.append(list(map(int, input().split())))\n    for query in queries:\n        print(minimum_cost_bottles(query[0], query[1], query[2]))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef minimum_cost_bottles(n, a, b):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return a\n    elif n == 2:\n        return min(2*a, b)\n    else:\n        return min(n*a, n//2*b + n%2*a)\n\n\ndef main():\n    q = int(input())\n    queries = []\n    for i in range(q):\n        queries.append(list(map(int, input().split())))\n    for query in queries:\n        print(minimum_cost_bottles(query[0], query[1], query[2]))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650456030,
  "object": "edit"
}
2022-04-20 12:00:32.132906 fix syntax errors 2 ['def minimum_cost_bottles(n, a, b):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return a\n    elif n == 2:\n        return min(2*a, b)\n    else:\n        return min(n*a, n//2*b + n%2*a)\n\ndef main():\n    q = int(input())\n    queries = []\n    for i in range(q):\n        queries.append(list(map(int, input().split())))\n    for query in queries:\n        print(minimum_cost_bottles(query[0], query[1], query[2]))\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef minimum_cost_bottles(n, a, b):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return a\n    elif n == 2:\n        return min(2*a, b)\n    else:\n        return min(n*a, n//2*b + n%2*a)\n\n\ndef main():\n    q = int(input())\n    queries = []\n    for i in range(q):\n        queries.append(list(map(int, input().split())))\n    for query in queries:\n        print(minimum_cost_bottles(query[0], query[1], query[2]))\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 12:00:32.132941 size on output set 2
2022-04-20 12:00:32.132953 num operations 1
2022-04-20 12:00:32.132958 size on input set 1
2022-04-20 12:00:32.133116 using api key jaanu
2022-04-20 12:00:33.606415 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    q = int(input())\n    for _ in range(q):\n        n, a, b = map(int, input().split())\n        if b < 2*a:\n            print((n//2) * b + (n%2) * a)\n        else:\n            print(n*a)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    q = int(input())\n    for _ in range(q):\n        n, a, b = map(int, input().split())\n        if b < 2*a:\n            print((n//2) * b + (n%2) * a)\n        else:\n            print(n*a)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650456032,
  "object": "edit"
}
2022-04-20 12:00:33.606621 fix syntax errors 2 ["\ndef main():\n    q = int(input())\n    for _ in range(q):\n        n, a, b = map(int, input().split())\n        if b < 2*a:\n            print((n//2) * b + (n%2) * a)\n        else:\n            print(n*a)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    q = int(input())\n    for _ in range(q):\n        n, a, b = map(int, input().split())\n        if b < 2*a:\n            print((n//2) * b + (n%2) * a)\n        else:\n            print(n*a)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 12:00:33.606648 size on output set 1
