2022-04-20 11:33:27.067812 num operations 1
2022-04-20 11:33:27.067859 size on input set 1
2022-04-20 11:33:27.068048 using api key sunu
2022-04-20 11:33:31.357189 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\na, b, x = map(int, raw_input().split())\n\nif (a - x) >= b:\n    print(\"0\" * x + \"1\" * b)\nelif (b - x) >= a:\n    print(\"1\" * x + \"0\" * a)\nelse:\n    zeros = a - (x - b)\n    print(\"1\" * (x - zeros) + \"0\" * zeros + \"1\" * b)\n"
    },
    {
      "index": 1,
      "text": "\n\na, b, x = map(int, input().split())\n\nif (a - x) >= b:\n    print(\"0\" * x + \"1\" * b)\nelif (b - x) >= a:\n    print(\"1\" * x + \"0\" * a)\nelse:\n    zeros = a - (x - b)\n    print(\"1\" * (x - zeros) + \"0\" * zeros + \"1\" * b)\n"
    }
  ],
  "created": 1650454407,
  "object": "edit"
}
2022-04-20 11:33:31.357440 fix syntax errors 2 ['\n\na, b, x = map(int, raw_input().split())\n\nif (a - x) >= b:\n    print("0" * x + "1" * b)\nelif (b - x) >= a:\n    print("1" * x + "0" * a)\nelse:\n    zeros = a - (x - b)\n    print("1" * (x - zeros) + "0" * zeros + "1" * b)\n', '\n\na, b, x = map(int, input().split())\n\nif (a - x) >= b:\n    print("0" * x + "1" * b)\nelif (b - x) >= a:\n    print("1" * x + "0" * a)\nelse:\n    zeros = a - (x - b)\n    print("1" * (x - zeros) + "0" * zeros + "1" * b)\n']
2022-04-20 11:33:31.357467 size on output set 2
2022-04-20 11:33:31.357478 num operations 1
2022-04-20 11:33:31.357484 size on input set 1
2022-04-20 11:33:31.357651 using api key sourya
2022-04-20 11:33:34.654516 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#Solution\n\n#!/usr/bin/env python\n\nif __name__ == '__main__':\n    n = int(raw_input())\n    arr = map(int, raw_input().split())\n    arr.sort()\n    print arr[len(arr)-2]\n"
    },
    {
      "index": 1,
      "text": "\n\n# Solution\n\n#!/usr/bin/env python\n\nif __name__ == '__main__':\n    a, b, x = map(int, raw_input().split())\n    n = a + b\n    s = ''\n    for i in range(n):\n        if (i < x):\n            s += '0'\n        else:\n            s += '1'\n    print s\n"
    }
  ],
  "created": 1650454411,
  "object": "edit"
}
2022-04-20 11:33:34.654739 fix syntax errors 2 ["\n#Solution\n\n#!/usr/bin/env python\n\nif __name__ == '__main__':\n    n = int(raw_input())\n    arr = map(int, raw_input().split())\n    arr.sort()\n    print arr[len(arr)-2]\n", "\n\n# Solution\n\n#!/usr/bin/env python\n\nif __name__ == '__main__':\n    a, b, x = map(int, raw_input().split())\n    n = a + b\n    s = ''\n    for i in range(n):\n        if (i < x):\n            s += '0'\n        else:\n            s += '1'\n    print s\n"]
2022-04-20 11:33:34.654764 size on output set 2
2022-04-20 11:33:34.654778 num operations 1
2022-04-20 11:33:34.654784 size on input set 1
2022-04-20 11:33:34.654935 using api key derek
2022-04-20 11:33:34.693663 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 11:33:36.195566 using api key gabby
2022-04-20 11:33:52.911223 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Use A[i] to represent the number of 0s required in the first i bits\n# Use B[i] to represent the number of 1s required in the first i bits\n# Use C[i] to represent the number of transitions required in the first i bits\n# Initially, A[0] = a, B[0] = b, C[0] = 0\n# At each step, we have 2 options:\n# 1) Add 0 to the string: A[i] = A[i-1] - 1, B[i] = B[i-1], C[i] = C[i-1] + 1\n# 2) Add 1 to the string: A[i] = A[i-1], B[i] = B[i-1] - 1, C[i] = C[i-1] + 1\n# When adding 0 to the string, if A[i-1] == 0, then there is no more 0s left to add, we have to add 1\n# When adding 1 to the string, if B[i-1] == 0, then there is no more 1s left to add, we have to add 0\n# At each step, we choose the option that will give us C[i] == x\n# If C[i] > x, then we need to add 0 to the string\n# If C[i] < x, then we need to add 1 to the string\n# If C[i] == x, then we have 2 options, we can add 0 or 1, but if A[i-1] == 0, then we have to add 1\n# If B[i-1] == 0, then we have to add 0\n\ndef solve(a, b, x):\n    A = [a, a - 1]\n    B = [b, b]\n    C = [0, 1]\n    for _ in range(a + b - 1):\n        if C[-2] > x:\n            A.append(A[-2] - 1)\n            B.append(B[-2])\n            C.append(C[-2] + 1)\n        elif C[-2] < x:\n            A.append(A[-2])\n            B.append(B[-2] - 1)\n            C.append(C[-2] + 1)\n        else:\n            if A[-2] == 0:\n                A.append(A[-2])\n                B.append(B[-2] - 1)\n                C.append(C[-2] + 1)\n            elif B[-2] == 0:\n                A.append(A[-2] - 1)\n                B.append(B[-2])\n                C.append(C[-2] + 1)\n            else:\n                A.append(A[-2] - 1)\n                B.append(B[-2])\n                C.append(C[-2] + 1)\n    ans = []\n    for i in range(a + b):\n        if A[i] > 0:\n            ans.append('0')\n        else:\n            ans.append('1')\n    if ans[0] == '0':\n        ans.append('1')\n    else:\n        ans.append('0')\n    return \"\".join(ans)\n\na, b, x = map(int, input().split())\nprint(solve(a, b, x))\n"
    },
    {
      "index": 1,
      "text": "\n\n# Use A[i] to represent the number of 0s required in the first i bits.\n# Use B[i] to represent the number of 1s required in the first i bits.\n# Use C[i] to represent the number of transitions required in the first i bits.\n# Initially, A[0] = a, B[0] = b, C[0] = 0.\n# At each step, we have 2 options:.\n# 1) Add 0 to the string: A[i] = A[i-1] - 1, B[i] = B[i-1], C[i] = C[i-1] + 1.\n# 2) Add 1 to the string: A[i] = A[i-1], B[i] = B[i-1] - 1, C[i] = C[i-1] + 1.\n# When adding 0 to the string, if A[i-1] == 0, then there is no more 0s left to add, we have to add 1.\n# When adding 1 to the string, if B[i-1] == 0, then there is no more 1s left to add, we have to add 0.\n# At each step, we choose the option that will give us C[i] == x.\n# If C[i] > x, then we need to add 0 to the string.\n# If C[i] < x, then we need to add 1 to the string.\n# If C[i] == x, then we have 2 options, we can add 0 or 1, but if A[i-1] == 0, then we have to add 1.\n# If B[i-1] == 0, then we have to add 0.\n\ndef solve(a, b, x):\n    A = [a]\n    B = [b]\n    C = [0]\n    for _ in range(a + b - 1):\n        if C[-1] > x:\n            A.append(A[-1] - 1)\n            B.append(B[-1])\n            C.append(C[-1] + 1)\n        elif C[-1] < x:\n            A.append(A[-1])\n            B.append(B[-1] - 1)\n            C.append(C[-1] + 1)\n        else:\n            if A[-1] == 0:\n                A.append(A[-1])\n                B.append(B[-1] - 1)\n                C.append(C[-1] + 1)\n            elif B[-1] == 0:\n                A.append(A[-1] - 1)\n                B.append(B[-1])\n                C.append(C[-1] + 1)\n            else:\n                A.append(A[-1] - 1)\n                B.append(B[-1])\n                C.append(C[-1] + 1)\n    ans = []\n    for i in range(a + b - 1):\n        if A[i] > 0:\n            ans.append('0')\n        else:\n            ans.append('1')\n    if ans[0] == '0':\n        ans.append('1')\n    else:\n        ans.append('0')\n    return \"\".join(ans)\n\na, b, x = map(int, input().split())\nprint(solve(a, b, x))\n"
    }
  ],
  "created": 1650454416,
  "object": "edit"
}
2022-04-20 11:33:52.911488 fix syntax errors 2 ['\n\n# Use A[i] to represent the number of 0s required in the first i bits\n# Use B[i] to represent the number of 1s required in the first i bits\n# Use C[i] to represent the number of transitions required in the first i bits\n# Initially, A[0] = a, B[0] = b, C[0] = 0\n# At each step, we have 2 options:\n# 1) Add 0 to the string: A[i] = A[i-1] - 1, B[i] = B[i-1], C[i] = C[i-1] + 1\n# 2) Add 1 to the string: A[i] = A[i-1], B[i] = B[i-1] - 1, C[i] = C[i-1] + 1\n# When adding 0 to the string, if A[i-1] == 0, then there is no more 0s left to add, we have to add 1\n# When adding 1 to the string, if B[i-1] == 0, then there is no more 1s left to add, we have to add 0\n# At each step, we choose the option that will give us C[i] == x\n# If C[i] > x, then we need to add 0 to the string\n# If C[i] < x, then we need to add 1 to the string\n# If C[i] == x, then we have 2 options, we can add 0 or 1, but if A[i-1] == 0, then we have to add 1\n# If B[i-1] == 0, then we have to add 0\n\ndef solve(a, b, x):\n    A = [a, a - 1]\n    B = [b, b]\n    C = [0, 1]\n    for _ in range(a + b - 1):\n        if C[-2] > x:\n            A.append(A[-2] - 1)\n            B.append(B[-2])\n            C.append(C[-2] + 1)\n        elif C[-2] < x:\n            A.append(A[-2])\n            B.append(B[-2] - 1)\n            C.append(C[-2] + 1)\n        else:\n            if A[-2] == 0:\n                A.append(A[-2])\n                B.append(B[-2] - 1)\n                C.append(C[-2] + 1)\n            elif B[-2] == 0:\n                A.append(A[-2] - 1)\n                B.append(B[-2])\n                C.append(C[-2] + 1)\n            else:\n                A.append(A[-2] - 1)\n                B.append(B[-2])\n                C.append(C[-2] + 1)\n    ans = []\n    for i in range(a + b):\n        if A[i] > 0:\n            ans.append(\'0\')\n        else:\n            ans.append(\'1\')\n    if ans[0] == \'0\':\n        ans.append(\'1\')\n    else:\n        ans.append(\'0\')\n    return "".join(ans)\n\na, b, x = map(int, input().split())\nprint(solve(a, b, x))\n', '\n\n# Use A[i] to represent the number of 0s required in the first i bits.\n# Use B[i] to represent the number of 1s required in the first i bits.\n# Use C[i] to represent the number of transitions required in the first i bits.\n# Initially, A[0] = a, B[0] = b, C[0] = 0.\n# At each step, we have 2 options:.\n# 1) Add 0 to the string: A[i] = A[i-1] - 1, B[i] = B[i-1], C[i] = C[i-1] + 1.\n# 2) Add 1 to the string: A[i] = A[i-1], B[i] = B[i-1] - 1, C[i] = C[i-1] + 1.\n# When adding 0 to the string, if A[i-1] == 0, then there is no more 0s left to add, we have to add 1.\n# When adding 1 to the string, if B[i-1] == 0, then there is no more 1s left to add, we have to add 0.\n# At each step, we choose the option that will give us C[i] == x.\n# If C[i] > x, then we need to add 0 to the string.\n# If C[i] < x, then we need to add 1 to the string.\n# If C[i] == x, then we have 2 options, we can add 0 or 1, but if A[i-1] == 0, then we have to add 1.\n# If B[i-1] == 0, then we have to add 0.\n\ndef solve(a, b, x):\n    A = [a]\n    B = [b]\n    C = [0]\n    for _ in range(a + b - 1):\n        if C[-1] > x:\n            A.append(A[-1] - 1)\n            B.append(B[-1])\n            C.append(C[-1] + 1)\n        elif C[-1] < x:\n            A.append(A[-1])\n            B.append(B[-1] - 1)\n            C.append(C[-1] + 1)\n        else:\n            if A[-1] == 0:\n                A.append(A[-1])\n                B.append(B[-1] - 1)\n                C.append(C[-1] + 1)\n            elif B[-1] == 0:\n                A.append(A[-1] - 1)\n                B.append(B[-1])\n                C.append(C[-1] + 1)\n            else:\n                A.append(A[-1] - 1)\n                B.append(B[-1])\n                C.append(C[-1] + 1)\n    ans = []\n    for i in range(a + b - 1):\n        if A[i] > 0:\n            ans.append(\'0\')\n        else:\n            ans.append(\'1\')\n    if ans[0] == \'0\':\n        ans.append(\'1\')\n    else:\n        ans.append(\'0\')\n    return "".join(ans)\n\na, b, x = map(int, input().split())\nprint(solve(a, b, x))\n']
2022-04-20 11:33:52.911654 size on output set 2
