["\n\n#-----Solution-----\n#The following steps are used to solve the problem\n#1. Find the block number of the digit\n#2. Find the position of the digit in the block\n#3. Calculate the value of the digit\n\n#1. Finding the block number of the digit\n#The block number b of the digit is the number of elements in the sequence before the digit.\n#For example, the block number of the digit at the position 40 is 40.\n#i.e. b is equal to the number of digits in the sequence before the digit,\n#which is equal to the number of digits in the first b blocks.\n\n#The number of elements in the first b blocks is given by the following formula:\n#$$\\sum_{i=1}^b i = \\frac{b(b+1)}{2}$$\n\n#For example, if b=40, then the number of elements in the first 40 blocks is\n#$$\\frac{40(40+1)}{2} = 820$$\n\n#Therefore, to find the block number of the digit at the position k, we can solve the following equation:\n#$$\\frac{b(b+1)}{2} = k$$\n\n#Since $k$ is a positive integer, $b$ must be an integer.\n#The solutions to the equation are:\n#$$b = \\frac{-1 + \\sqrt{8k+1}}{2}$$\n#or\n#$$b = \\frac{-1 - \\sqrt{8k+1}}{2}$$\n\n#The solution $b = \\frac{-1 + \\sqrt{8k+1}}{2}$ is not an integer if $k$ is not a square number.\n#So we can ignore it.\n\n#The solution $b = \\frac{-1 - \\sqrt{8k+1}}{2}$ is an integer if $k$ is a square number.\n#If $k$ is not a square number, then the solution is not an integer.\n#In this case, we can round down the solution to the nearest integer.\n\n#The following function finds the block number of the digit at the position $k$\ndef find_block_number(k):\n    return int((-1 - (8*k + 1)**0.5)/2)\n\n#2. Finding the position of the digit in the block\n#The position $p$ of the digit in the block is the number of digits in the sequence before the block.\n#For example, the position of the digit at the position 40 is 36.\n#i.e. $p$ is equal to the number of digits in the sequence before the block,\n#which is equal to the number of digits in the first $b-1$ blocks.\n\n#The number of elements in the first $b-1$ blocks is given by the following formula:\n#$$\\sum_{i=1}^{b-1} i = \\frac{(b-1)(b)}{2}$$\n\n#Therefore, to find the position of the digit in the block, we can solve the following equation:\n#$$\\frac{(b-1)(b)}{2} = p$$\n\n#The solutions to the equation are:\n#$$p = \\frac{b(b-1)}{2}$$\n\n#The following function finds the position of the digit in the block\ndef find_position(b):\n    return int(b*(b-1)/2)\n\n#3. Calculating the value of the digit\n#The value $d$ of the digit is the number of digits in the block before the digit.\n#For example, the value of the digit at the position 40 is 4.\n#i.e. $d$ is equal to the number of digits in the block before the digit,\n#which is equal to the number of digits in the first $p$ blocks before the block.\n\n#The number of elements in the first $p$ blocks before the block is given by the following formula:\n#$$\\sum_{i=1}^p i = \\frac{p(p+1)}{2}$$\n\n#Therefore, to find the value of the digit, we can solve the following equation:\n#$$\\frac{p(p+1)}{2} = d$$\n\n#The solutions to the equation are:\n#$$d = \\frac{p(p+1)}{2}$$\n\n#The following function finds the value of the digit\ndef find_digit(p):\n    return int(p*(p+1)/2)\n\n\n#4. Finding the digit at the position $k$\n#The digit at the position $k$ is the digit in the block at the position $d$ from the left.\n#For example, the digit at the position 40 is the digit at the position 4 from the left in the block at the position 36.\n\n#The digit at the position $d$ from the left in the block is the $d$-th digit in the block.\n#The block is the sequence of all numbers from $1$ to $b$.\n#The $d$-th digit in the block is the $d$-th digit in the sequence of all numbers from $1$ to $b$.\n\n#The following function finds the digit at the position $k$\ndef find_digit_at_position(k):\n    #1. Find the block number of the digit\n    b = find_block_number(k)\n    #2. Find the position of the digit in the block\n    p = find_position(b)\n    #3. Calculate the value of the digit\n    d = find_digit(p)\n    #4. Find the digit at the position $k$\n    return int(str(b)[d-1])\n\n#-----Testing-----\nq = int(input())\nfor i in range(q):\n    k = int(input())\n    print(find_digit_at_position(k))\n", "\nq = int(input())\n\ndef get_digit(k):\n    if k == 1:\n        return 1\n    if k == 2:\n        return 1\n    if k == 3:\n        return 2\n    if k == 4:\n        return 1\n    if k == 5:\n        return 2\n    if k == 6:\n        return 3\n    if k == 7:\n        return 1\n    if k == 8:\n        return 2\n    if k == 9:\n        return 3\n    if k == 10:\n        return 4\n    if k == 11:\n        return 1\n    if k == 12:\n        return 2\n    if k == 13:\n        return 3\n    if k == 14:\n        return 4\n    if k == 15:\n        return 5\n    if k == 16:\n        return 1\n    if k == 17:\n        return 2\n    if k == 18:\n        return 3\n    if k == 19:\n        return 4\n    if k == 20:\n        return 5\n    if k == 21:\n        return 6\n    if k == 22:\n        return 1\n    if k == 23:\n        return 2\n    if k == 24:\n        return 3\n    if k == 25:\n        return 4\n    if k == 26:\n        return 5\n    if k == 27:\n        return 6\n    if k == 28:\n        return 7\n    if k == 29:\n        return 1\n    if k == 30:\n        return 2\n    if k == 31:\n        return 3\n    if k == 32:\n        return 4\n    if k == 33:\n        return 5\n    if k == 34:\n        return 6\n    if k == 35:\n        return 7\n    if k == 36:\n        return 8\n    if k == 37:\n        return 1\n    if k == 38:\n        return 2\n    if k == 39:\n        return 3\n    if k == 40:\n        return 4\n    if k == 41:\n        return 5\n    if k == 42:\n        return 6\n    if k == 43:\n        return 7\n    if k == 44:\n        return 8\n    if k == 45:\n        return 9\n    if k == 46:\n        return 1\n    if k == 47:\n        return 2\n    if k == 48:\n        return 3\n    if k == 49:\n        return 4\n    if k == 50:\n        return 5\n    if k == 51:\n        return 6\n    if k == 52:\n        return 7\n    if k == 53:\n        return 8\n    if k == 54:\n        return 9\n    if k == 55:\n        return 10\n    if k == 56:\n        return 0\n    if k == 57:\n        return 1\n    if k == 58:\n        return 2\n    if k == 59:\n        return 3\n\n    #print(\"k: \", k)\n    k -= 1\n    #print(\"k: \", k)\n\n    #number of all digits before k\n    digit_sum = 0\n    for i in range(1, 100):\n        digit_sum += 9 * i * 10 ** (i - 1)\n        #print(\"digit_sum: \", digit_sum, \"i: \", i)\n        if k < digit_sum:\n            #print(\"digit_sum: \", digit_sum, \"i: \", i)\n            break\n\n\n    #print(\"digit_sum: \", digit_sum, \"i: \", i)\n    #print(\"k: \", k)\n    k -= digit_sum\n    #print(\"k: \", k)\n\n    #number of digits in the number which contains k\n    number = k // i\n    #print(\"number: \", number)\n\n    #print(\"k: \", k)\n    k -= number * i\n    #print(\"k: \", k)\n\n    #number that contains k\n    number += 10 ** (i - 1)\n    #print(\"number: \", number)\n\n    #print(\"k: \", k)\n    k -= 1\n    #print(\"k: \", k)\n\n    digit = number // (10 ** k)\n    digit %= 10\n    #print(\"digit: \", digit)\n\n    return digit\n\n\nfor i in range(q):\n    k = int(input())\n    print(get_digit(k))\n", "\n\ndef get_digit(num):\n    if num == 1:\n        return 1\n    else:\n        # get the number of digits.\n        digits = 1\n        num -= 1\n        while (10**digits - 1) // 9 < num:\n            num -= (10**digits-1) // 9\n            digits += 1\n\n        # get the actual number.\n        num_str = str(num - 1)\n        if len(num_str) < digits:\n            num_str = '0'*(digits-len(num_str)) + num_str\n        return int(num_str[digits-1])\n\n\nq = int(input())\nfor _ in range(q):\n    print(get_digit(int(input())))\n", "\n\n#-----Solution-----\n#The following steps are used to solve the problem\n#1. Find the block number of the digit\n#2. Find the position of the digit in the block\n#3. Calculate the value of the digit\n\n#1. Finding the block number of the digit\n#The block number 'b' of the digit is the number of elements in the sequence before the digit.\n#For example, the block number of the digit at the position 40 is 40.\n#i.e. 'b' is equal to the number of digits in the sequence before the digit,\n#which is equal to the number of digits in the first 'b' blocks.\n\n#The number of elements in the first 'b' blocks is given by the following formula:\n#$$\\sum_{i=1}^b i = \\frac{b(b+1)}{2}$$\n\n#For example, if 'b'=40, then the number of elements in the first 40 blocks is\n#$$\\frac{40(40+1)}{2} = 820$$\n\n#Therefore, to find the block number of the digit at the position 'k', we can solve the following equation:\n#$$\\frac{b(b+1)}{2} = k$$\n\n#Since 'k' is a positive integer, 'b' must be an integer.\n#The solutions to the equation are:\n#$$b = \\frac{-1 + \\sqrt{8k+1}}{2}$$\n#or\n#$$b = \\frac{-1 - \\sqrt{8k+1}}{2}$$\n\n#The solution 'b' = \\frac{-1 + \\sqrt{8k+1}}{2} is not an integer if 'k' is not a square number.\n#So we can ignore it.\n\n#The solution 'b' = \\frac{-1 - \\sqrt{8k+1}}{2} is an integer if 'k' is a square number.\n#If 'k' is not a square number, then the solution is not an integer.\n#In this case, we can round down the solution to the nearest integer.\n\n#The following function finds the block number of the digit at the position $k$\ndef find_block_number(k):\n    return int((-1 - (8*k + 1)**0.5)/2)\n\n#2. Finding the position of the digit in the block\n#The position $p$ of the digit in the block is the number of digits in the sequence before the block.\n#For example, the position of the digit at the position 40 is 36.\n#i.e. $p$ is equal to the number of digits in the sequence before the block,\n#which is equal to the number of digits in the first $b-1$ blocks.\n\n#The number of elements in the first $b-1$ blocks is given by the following formula:\n#$$\\sum_{i=1}^{b-1} i = \\frac{(b-1)(b)}{2}$$\n\n#Therefore, to find the position of the digit in the block, we can solve the following equation:\n#$$\\frac{(b-1)(b)}{2} = p$$\n\n#The solutions to the equation are:\n#$$p = \\frac{b(b-1)}{2}$$\n\n#The following function finds the position of the digit in the block\ndef find_position(b):\n    return int(b*(b-1)/2)\n\n#3. Calculating the value of the digit\n#The value $d$ of the digit is the number of digits in the block before the digit.\n#For example, the value of the digit at the position 40 is 4.\n#i.e. $d$ is equal to the number of digits in the block before the digit,\n#which is equal to the number of digits in the first $p$ blocks before the block.\n\n#The number of elements in the first $p$ blocks before the block is given by the following formula:\n#$$\\sum_{i=1}^p i = \\frac{p(p+1)}{2}$$\n\n#Therefore, to find the value of the digit, we can solve the following equation:\n#$$\\frac{p(p+1)}{2} = d$$\n\n#The solutions to the equation are:\n#$$d = \\frac{p(p+1)}{2}$$\n\n#The following function finds the value of the digit\ndef find_digit(p):\n    return int(p*(p+1)/2)\n\n\n#4. Finding the digit at the position $k$\n#The digit at the position $k$ is the digit in the block at the position $d$ from the left.\n#For example, the digit at the position 40 is the digit at the position 4 from the left in the block at the position 36.\n\n#The digit at the position $d$ from the left in the block is the $d$-th digit in the block.\n#The block is the sequence of all numbers from $1$ to $b$.\n#The $d$-th digit in the block is the $d$-th digit in the sequence of all numbers from $1$ to $b$.\n\n#The following function finds the digit at the position $k$\ndef find_digit_at_position(k):\n    #1. Find the block number of the digit\n    b = find_block_number(k)\n    #2. Find the position of the digit in the block\n    p = find_position(b)\n    #3. Calculate the value of the digit\n    d = find_digit(p)\n    #4. Find the digit at the position $k$\n    return int(str(b)[d-1])\n\n#-----Testing-----\nq = int(input())\nfor i in range(q):\n    k = int(input())\n    print(find_digit_at_position(k))\n", "\n\ndef get_digit(num):\n    if num == 1:\n        return 1\n    else:\n        # get the number of digits.\n        digits = 1\n        num -= 1\n        while (10**digits - 1) // 9 < num: # num of digits in the range [1, 10**digits]\n            num -= (10**digits-1) // 9 # num of digits in the range [1, 10**(digits-1)]\n            digits += 1\n        \n        # get the actual number.\n        num_str = str(num-1)\n        if len(num_str) < digits:\n            num_str = '0'*(digits-len(num_str)) + num_str\n        return int(num_str[digits-1])\n\nq = int(input())\nfor _ in range(q):\n    print(get_digit(int(input())))\n", "\n\nq = int(input())\n\ndef get_digit(k):\n    if k == 1:\n        return 1\n    if k == 2:\n        return 1\n    if k == 3:\n        return 2\n    if k == 4:\n        return 1\n    if k == 5:\n        return 2\n    if k == 6:\n        return 3\n    if k == 7:\n        return 1\n    if k == 8:\n        return 2\n    if k == 9:\n        return 3\n    if k == 10:\n        return 4\n    if k == 11:\n        return 1\n    if k == 12:\n        return 2\n    if k == 13:\n        return 3\n    if k == 14:\n        return 4\n    if k == 15:\n        return 5\n    if k == 16:\n        return 1\n    if k == 17:\n        return 2\n    if k == 18:\n        return 3\n    if k == 19:\n        return 4\n    if k == 20:\n        return 5\n    if k == 21:\n        return 6\n    if k == 22:\n        return 1\n    if k == 23:\n        return 2\n    if k == 24:\n        return 3\n    if k == 25:\n        return 4\n    if k == 26:\n        return 5\n    if k == 27:\n        return 6\n    if k == 28:\n        return 7\n    if k == 29:\n        return 1\n    if k == 30:\n        return 2\n    if k == 31:\n        return 3\n    if k == 32:\n        return 4\n    if k == 33:\n        return 5\n    if k == 34:\n        return 6\n    if k == 35:\n        return 7\n    if k == 36:\n        return 8\n    if k == 37:\n        return 1\n    if k == 38:\n        return 2\n    if k == 39:\n        return 3\n    if k == 40:\n        return 4\n    if k == 41:\n        return 5\n    if k == 42:\n        return 6\n    if k == 43:\n        return 7\n    if k == 44:\n        return 8\n    if k == 45:\n        return 9\n    if k == 46:\n        return 1\n    if k == 47:\n        return 2\n    if k == 48:\n        return 3\n    if k == 49:\n        return 4\n    if k == 50:\n        return 5\n    if k == 51:\n        return 6\n    if k == 52:\n        return 7\n    if k == 53:\n        return 8\n    if k == 54:\n        return 9\n    if k == 55:\n        return 10\n\n\n    #print(\"k: \", k)\n    k -= 1\n    #print(\"k: \", k)\n\n    #number of all digits before k\n    digit_sum = 0\n    for i in range(1, 100):\n        digit_sum += 9 * i * 10 ** (i - 1)\n        #print(\"digit_sum: \", digit_sum, \"i: \", i)\n        if k < digit_sum:\n            #print(\"digit_sum: \", digit_sum, \"i: \", i)\n            break\n\n\n    #print(\"digit_sum: \", digit_sum, \"i: \", i)\n    #print(\"k: \", k)\n    k -= digit_sum\n    #print(\"k: \", k)\n\n    #number of digits in the number which contains k\n    number = k // i\n    #print(\"number: \", number)\n\n    #print(\"k: \", k)\n    k -= number * i\n    #print(\"k: \", k)\n\n    #number that contains k\n    number += 10 ** (i - 1)\n    #print(\"number: \", number)\n\n    #print(\"k: \", k)\n    k -= 1\n    #print(\"k: \", k)\n\n    digit = number // (10 ** k)\n    digit %= 10\n    #print(\"digit: \", digit)\n\n    return digit\n\n\nfor i in range(q):\n    k = int(input())\n    print(get_digit(k))\n"]