2022-04-20 12:27:31.817171 num operations 1
2022-04-20 12:27:31.817191 size on input set 1
2022-04-20 12:27:31.817369 using api key soukgp
2022-04-20 12:27:34.174653 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import math\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N/(2*D+1))) \n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "import math\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N/(2*D+1)))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650457651,
  "object": "edit"
}
2022-04-20 12:27:34.174901 fix syntax errors 2 ['import math\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N/(2*D+1))) \n\nif __name__ == "__main__":\n    main()\n', 'import math\n\ndef main():\n    N, D = map(int, input().split())\n    print(math.ceil(N/(2*D+1)))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 12:27:34.174926 size on output set 2
2022-04-20 12:27:34.174938 num operations 1
2022-04-20 12:27:34.174944 size on input set 1
2022-04-20 12:27:34.175126 using api key sourya
2022-04-20 12:27:36.528048 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1, N+1):\n        if i < D or i > N - D:\n            Inspectors.append(i)\n        else:\n            Inspectors.append(i)\n            Inspectors.append(i)\n            break\n    print(len(Inspectors))\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1,N+1):\n        if i < D or i > N - D:\n            Inspectors.append(i)\n    print(len(Inspectors))\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650457654,
  "object": "edit"
}
2022-04-20 12:27:36.528262 fix syntax errors 2 ['\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1, N+1):\n        if i < D or i > N - D:\n            Inspectors.append(i)\n        else:\n            Inspectors.append(i)\n            Inspectors.append(i)\n            break\n    print(len(Inspectors))\n\nif __name__ == "__main__":\n    main()\n', '\n\nInspectors = []\n\ndef main():\n    N, D = map(int, input().split())\n    for i in range(1,N+1):\n        if i < D or i > N - D:\n            Inspectors.append(i)\n    print(len(Inspectors))\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 12:27:36.528294 size on output set 2
2022-04-20 12:27:36.528306 num operations 1
2022-04-20 12:27:36.528312 size on input set 1
2022-04-20 12:27:36.528486 using api key sourya
2022-04-20 12:27:42.479449 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn = int(input().split()[0])\nd = int(input().split()[1])\n\ndef main():\n    num_inspectors = 0\n    start = 1\n    while start <= n:\n        num_inspectors += 1\n        start += 2 * d + 1\n    return num_inspectors\n\nprint(main())\n\n# assert (main(6, 2) == 2)\n# assert (main(15, 4) == 4)\n# assert (main(20, 5) == 4)\n# assert (main(1, 1) == 1)\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input().split()[0])\nd = int(input().split()[1])\n\ndef main():\n    # n = int(input().split()[0])\n    # d = int(input().split()[1])\n    num_inspectors = 0\n    start = 1\n    while start <= n:\n        num_inspectors += 1\n        start += 2 * d + 1\n    return num_inspectors\n\n# assert (main(6, 2) == 2)\n# assert (main(15, 4) == 4)\n# assert (main(20, 5) == 4)\n# assert (main(1, 1) == 1)\n"
    }
  ],
  "created": 1650457656,
  "object": "edit"
}
2022-04-20 12:27:42.479661 fix syntax errors 2 ['\n\nn = int(input().split()[0])\nd = int(input().split()[1])\n\ndef main():\n    num_inspectors = 0\n    start = 1\n    while start <= n:\n        num_inspectors += 1\n        start += 2 * d + 1\n    return num_inspectors\n\nprint(main())\n\n# assert (main(6, 2) == 2)\n# assert (main(15, 4) == 4)\n# assert (main(20, 5) == 4)\n# assert (main(1, 1) == 1)\n', '\n\nn = int(input().split()[0])\nd = int(input().split()[1])\n\ndef main():\n    # n = int(input().split()[0])\n    # d = int(input().split()[1])\n    num_inspectors = 0\n    start = 1\n    while start <= n:\n        num_inspectors += 1\n        start += 2 * d + 1\n    return num_inspectors\n\n# assert (main(6, 2) == 2)\n# assert (main(15, 4) == 4)\n# assert (main(20, 5) == 4)\n# assert (main(1, 1) == 1)\n']
2022-04-20 12:27:42.479688 size on output set 2
