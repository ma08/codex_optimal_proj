["n, m, k = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\n\ndp = [[0] * (m + 1) for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if j <= m // 2:\n            dp[i][j] = max(\n                dp[i][j - 1],\n                dp[i - 1][j],\n                (dp[i - 1][j - 1] + a[i - 1][j - 1]) % k\n            )\n        else:\n            dp[i][j] = dp[i - 1][j]\n\nprint(dp[-1][-1])\n", "def solve(n, m, k, A):\n    # dp[i][j] = max sum of first i rows, with j columns chosen\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j <= m // 2:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1] + A[i - 1][j - 1])\n            else:\n                dp[i][j] = dp[i][j - 1]\n\n    return dp[n][m // 2] // k * k\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(n)]\n\n    print(solve(n, m, k, A))\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef solve(n, m, k, A):\n    # dp[i][j] = max sum of first i rows, with j columns chosen\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            dp[i][j] = max(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1] + A[i - 1][j - 1])\n\n    return dp[n][m // 2] // k * k\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    A = [list(map(int, input().split())) for _ in range(n)]\n\n    print(solve(n, m, k, A))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        if i == 0:\n            ans += b[a[i] - 1]\n        else:\n            if a[i] == a[i - 1] + 1:\n                ans += b[a[i] - 1] + c[a[i - 1] - 1]\n            else:\n                ans += b[a[i] - 1]\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n", "n, m, k = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\n\ndp = [[0] * (m + 1) for _ in range(n + 1)]\n\nfor i in range(1, n + 1):\n    for j in range(1, m + 1):\n        if j <= m // 2:\n            dp[i][j] = max(\n                dp[i][j - 1],\n                dp[i - 1][j],\n                (dp[i - 1][j - 1] + a[i - 1][j - 1]) % k,\n            )\n        else:\n            dp[i][j] = dp[i - 1][j]\n\nprint(dp[-1][-1])\n", "\n\ndef main():\n    n, m, k = map(int, input().split()) # n: \ud589, m: \uc5f4, k: \ubc18\uc2dc\uacc4\ubc29\ud5a5 \ud68c\uc804 \ud69f\uc218\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    dp = [[0 for i in range(k)] for j in range(m + 1)] # dp[i][j] : i\ubc88\uc9f8 \uc5f4\uae4c\uc9c0 \ubc18\uc2dc\uacc4\ubc29\ud5a5\uc73c\ub85c j\ubc88 \ud68c\uc804\ud55c \uc0c1\ud0dc\uc5d0\uc11c \uc5bb\uc744 \uc218 \uc788\ub294 \ucd5c\ub300 \ud569\n    for i in range(1, m + 1): # i\ubc88\uc9f8 \uc5f4\n        for j in range(k): # \ubc18\uc2dc\uacc4\ubc29\ud5a5 \ud68c\uc804 \ud69f\uc218\n            for r in range(n): # \ud589\n                dp[i][j] = max(dp[i][j], dp[i - 1][j] + matrix[r][i - 1]) # \uc774\uc804 \uc5f4\uc758 \ucd5c\ub300 \ud569\uc5d0 \ud604\uc7ac \uc5f4\uc758 \ud569\uc744 \ub354\ud568\n                dp[i][(j - matrix[r][i - 1]) % k] = max(dp[i][(j - matrix[r][i - 1]) % k], dp[i - 1][j] + matrix[r][i - 1]) # \uc774\uc804 \uc5f4\uc758 \ucd5c\ub300 \ud569\uc5d0 \ud604\uc7ac \uc5f4\uc758 \ud569\uc744 \ub354\ud558\uace0 \ubc18\uc2dc\uacc4\ubc29\ud5a5 \ud68c\uc804 \ud69f\uc218\ub97c 1 \ub298\ub9bc\n    print(max(dp[m][0], dp[m][k // 2])) # \ub9c8\uc9c0\ub9c9 \uc5f4\uae4c\uc9c0 \ubc18\uc2dc\uacc4\ubc29\ud5a5 \ud68c\uc804 \ud69f\uc218\uac00 0\uc774\uac70\ub098 k // 2\uc778 \uc0c1\ud0dc\uc5d0\uc11c \uc5bb\uc744 \uc218 \uc788\ub294 \ucd5c\ub300 \ud569\n\nif __name__ == \"__main__\":\n    main()\n"]