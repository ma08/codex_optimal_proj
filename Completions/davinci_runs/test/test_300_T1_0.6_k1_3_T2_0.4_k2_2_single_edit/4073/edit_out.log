2022-04-20 11:40:40.382185 num operations 1
2022-04-20 11:40:40.382206 size on input set 1
2022-04-20 11:40:40.382372 using api key jaanu
2022-04-20 11:40:41.966716 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Read input\nn = int(input())\na = list(map(int, input().split()))\n\n# Compute and print answer\nprint(sum(a) - n)\n"
    },
    {
      "index": 1,
      "text": "\n# Read input\nn = int(input())\na = list(map(int, input().split()))\n\n# Compute and print answer\nprint(sum(a) - n)\n"
    }
  ],
  "created": 1650454840,
  "object": "edit"
}
2022-04-20 11:40:41.966964 fix syntax errors 2 ['\n# Read input\nn = int(input())\na = list(map(int, input().split()))\n\n# Compute and print answer\nprint(sum(a) - n)\n', '\n# Read input\nn = int(input())\na = list(map(int, input().split()))\n\n# Compute and print answer\nprint(sum(a) - n)\n']
2022-04-20 11:40:41.966988 size on output set 1
2022-04-20 11:40:41.966999 num operations 1
2022-04-20 11:40:41.967005 size on input set 1
2022-04-20 11:40:41.967159 using api key kouti
2022-04-20 11:40:53.145255 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# for each possible number of people,\n# determine whether it is possible to have\n# exactly that many people\n\ndef solve(a):\n\tn = len(a)\n\tb = [0]\n\tfor i in range(n):\n\t\tb.append(b[i] + a[i])\n\t\tb.append(b[i] - a[i])\n\tb.sort()\n\tc = [0]\n\tfor i in range(1, len(b)):\n\t\tif b[i] != b[i-1]:\n\t\t\tc.append(b[i])\n\tm = len(c)\n\t# dp[i][j] = whether it's possible to have j people\n\t# and use people from the first i groups\n\tdp = [[False] * m for i in range(n)]\n\tfor i in range(n):\n\t\tdp[i][0] = True\n\tfor i in range(n):\n\t\tfor j in range(1, m):\n\t\t\tdp[i][j] = dp[i][j-1] or (dp[i-1][j-1] and c[j] == c[j-1] + a[i])\n\tfor j in range(m):\n\t\tif dp[n-1][j]:\n\t\t\treturn j + 1\n\nn = int(raw_input())\na = map(int, raw_input().split())\nprint solve(a)\n"
    },
    {
      "index": 1,
      "text": "\n\n# for each possible number of people,\n# determine whether it is possible to have\n# exactly that many people\n\ndef solve(a):\n    n = len(a)\n    b = [0]\n    for i in range(n):\n        b.append(b[i] + a[i])\n        b.append(b[i] - a[i])\n    b.sort()\n    c = [0]\n    for i in range(1, len(b)):\n        if b[i] != b[i-1]:\n            c.append(b[i])\n    m = len(c)\n    # dp[i][j] = whether it's possible to have j people\n    # and use people from the first i groups\n    dp = [[False for j in range(m)] for i in range(n)]\n    for i in range(n):\n        dp[i][0] = True\n    for i in range(n):\n        for j in range(1, m):\n            dp[i][j] = dp[i][j-1] or (dp[i-1][j-1] and c[j] == c[j-1] + a[i])\n    for j in range(m):\n        if dp[n-1][j]:\n            return j + 1\n            \nn = int(raw_input())\na = map(int, raw_input().split())\nprint solve(a)\n"
    }
  ],
  "created": 1650454842,
  "object": "edit"
}
2022-04-20 11:40:53.145520 fix syntax errors 2 ["\n\n# for each possible number of people,\n# determine whether it is possible to have\n# exactly that many people\n\ndef solve(a):\n\tn = len(a)\n\tb = [0]\n\tfor i in range(n):\n\t\tb.append(b[i] + a[i])\n\t\tb.append(b[i] - a[i])\n\tb.sort()\n\tc = [0]\n\tfor i in range(1, len(b)):\n\t\tif b[i] != b[i-1]:\n\t\t\tc.append(b[i])\n\tm = len(c)\n\t# dp[i][j] = whether it's possible to have j people\n\t# and use people from the first i groups\n\tdp = [[False] * m for i in range(n)]\n\tfor i in range(n):\n\t\tdp[i][0] = True\n\tfor i in range(n):\n\t\tfor j in range(1, m):\n\t\t\tdp[i][j] = dp[i][j-1] or (dp[i-1][j-1] and c[j] == c[j-1] + a[i])\n\tfor j in range(m):\n\t\tif dp[n-1][j]:\n\t\t\treturn j + 1\n\nn = int(raw_input())\na = map(int, raw_input().split())\nprint solve(a)\n", "\n\n# for each possible number of people,\n# determine whether it is possible to have\n# exactly that many people\n\ndef solve(a):\n    n = len(a)\n    b = [0]\n    for i in range(n):\n        b.append(b[i] + a[i])\n        b.append(b[i] - a[i])\n    b.sort()\n    c = [0]\n    for i in range(1, len(b)):\n        if b[i] != b[i-1]:\n            c.append(b[i])\n    m = len(c)\n    # dp[i][j] = whether it's possible to have j people\n    # and use people from the first i groups\n    dp = [[False for j in range(m)] for i in range(n)]\n    for i in range(n):\n        dp[i][0] = True\n    for i in range(n):\n        for j in range(1, m):\n            dp[i][j] = dp[i][j-1] or (dp[i-1][j-1] and c[j] == c[j-1] + a[i])\n    for j in range(m):\n        if dp[n-1][j]:\n            return j + 1\n            \nn = int(raw_input())\na = map(int, raw_input().split())\nprint solve(a)\n"]
2022-04-20 11:40:53.145562 size on output set 2
2022-04-20 11:40:53.145575 num operations 1
2022-04-20 11:40:53.145582 size on input set 1
2022-04-20 11:40:53.145744 using api key soukgp
2022-04-20 11:40:55.287090 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    result = 2\n    for i in range(1, n):\n        if a[i-1] + 1 == a[i]:\n            result += 1\n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    result = 2\n    for i in range(1, n):\n        if a[i - 1] + 1 == a[i]:\n            result += 1\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650454853,
  "object": "edit"
}
2022-04-20 11:40:55.287344 fix syntax errors 2 ['\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    result = 2\n    for i in range(1, n):\n        if a[i-1] + 1 == a[i]:\n            result += 1\n    print(result)\n\nif __name__ == "__main__":\n    main()\n', '\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    result = 2\n    for i in range(1, n):\n        if a[i - 1] + 1 == a[i]:\n            result += 1\n    print(result)\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 11:40:55.287372 size on output set 2
