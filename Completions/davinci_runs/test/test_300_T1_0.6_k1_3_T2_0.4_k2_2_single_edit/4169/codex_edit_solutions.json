["\ninf = 1000000000000\n#-----Constants-----\n\n#-----Input and Setup-----\nn, m = map(int, input().split())\nstores = []\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    stores.append([a, b])\ndp = [[inf for j in range(m+1)] for i in range(n+1)]\ndp[0][0] = 0\nfor i in range(n):\n    for j in range(m+1):\n        if j >= stores[i][0]:\n            dp[i+1][j] = min(dp[i][j], dp[i+1][j-stores[i][0]] + stores[i][1])\n        else:\n            dp[i+1][j] = dp[i][j]\nprint(dp[n][m])\n#-----Solve-----\n\n#-----Display-----\n", "\nimport math\n#-----Constants-----\n\n#-----Input and Setup-----\nn, m = map(int, input().split()) #n is number of stores, m is number of houses\nstores = [] #stores[i] = [distance, cost]\nhouses = [] #houses[i] = distance\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    stores.append([a, b]) #stores[i] = [distance, cost]\n\nfor i in range(m):\n    c = int(input())\n    houses.append(c) #houses[i] = distance\n\n#for each house, find the closest store\n#for each house, find the cheapest store\n#for each house, find the cheapest store within range\n\n#for each store, find the closest house\n#for each store, find the house that needs the least amount of items\n#for each store, find the house that needs the least amount of items within range\n\n\n#find the closest store to each house\nfor house in houses:\n    min_dist = math.inf\n    for store in stores:\n        dist = abs(house - store[0])\n        if dist < min_dist:\n            min_dist = dist\n    print(min_dist)\n#-----Solve-----\n\n#-----Display-----\n", "\n# n = number of stores\n# m = number of energy drinks\n# a = price of one energy drink at a store\n# b = max number of energy drinks we can buy at a store\nn, m = map(int, input().split())\na = []\nb = []\nfor i in range(n):\n    ai, bi = map(int, input().split())\n    a.append(ai)\n    b.append(bi)\n\n# binary search\n# if we can buy m energy drinks with money x, then we can also buy m energy drinks with money y where y > x\n# if we cannot buy m energy drinks with money x, then we cannot buy m energy drinks with money y where y < x\n# therefore, we can use binary search to find the minimum money we need to buy m energy drinks\nok = 10**9*10**5 + 1\nng = 0\nwhile abs(ok - ng) > 1:\n    mid = (ok + ng) // 2\n    # if we can buy m energy drinks with money mid, then ok = mid\n    # otherwise, ng = mid\n    total = 0\n    for i in range(n):\n        total += min(mid // a[i], b[i])\n    if total >= m:\n        ok = mid\n    else:\n        ng = mid\n\nprint(ok)\n", "\n\n# https://atcoder.jp/contests/abc065/tasks/arc076_a\n\nimport sys\n\ninput = sys.stdin.readline\n\nN, M = map(int, input().rstrip().split())\nA, B = map(int, input().rstrip().split())\n\nif M == 1:\n    print(0)\n    sys.exit()\n\nif A > B:\n    print(0)\n    sys.exit()\n\nprint(total)\n", "\nimport sys\ninput = sys.stdin.readline\n\nN, M = map(int, input().split())\nstores = []\nfor _ in range(N):\n    A, B = map(int, input().split())\n    stores.append([A, B])\n\nstores = sorted(stores, key=lambda x: x[0])\n\ntotal = 0\nfor i in range(N):\n    if M <= stores[i][1]:\n        total += stores[i][0] * M\n        break\n    else:\n        total += stores[i][0] * stores[i][1]\n        M -= stores[i][1]\n\nprint(total)\n"]