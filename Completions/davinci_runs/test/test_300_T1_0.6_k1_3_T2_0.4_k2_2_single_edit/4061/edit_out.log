2022-04-20 11:37:18.660166 num operations 1
2022-04-20 11:37:18.660202 size on input set 1
2022-04-20 11:37:18.660422 using api key kouti
2022-04-20 11:37:20.688462 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom sys import stdin\n\nline = stdin.readline()\ns = line.rstrip()\n\nline = stdin.readline()\nt = line.rstrip()\n\ni = 0\nj = 0\nres = 0\n\nwhile i < len(s):\n    if s[i] == t[j]:\n        j += 1\n        i += 1\n    else:\n        res += 1\n        i += 1\n\nres += len(s) - len(t) + i\n\nprint(res)\n"
    },
    {
      "index": 1,
      "text": "\nfrom sys import stdin\n\nline = stdin.readline()\ns = line.rstrip()\n\nline = stdin.readline()\nt = line.rstrip()\n\ni = 0\nj = 0\nres = 0\n\nwhile i < len(s):\n    if s[i] == t[j]:\n        j += 1\n        i += 1\n    else:\n        res += 1\n        i += 1\n\nres += len(s) - len(t) - i\n\nprint(res)\n"
    }
  ],
  "created": 1650454638,
  "object": "edit"
}
2022-04-20 11:37:20.688756 fix syntax errors 2 ['\n\nfrom sys import stdin\n\nline = stdin.readline()\ns = line.rstrip()\n\nline = stdin.readline()\nt = line.rstrip()\n\ni = 0\nj = 0\nres = 0\n\nwhile i < len(s):\n    if s[i] == t[j]:\n        j += 1\n        i += 1\n    else:\n        res += 1\n        i += 1\n\nres += len(s) - len(t) + i\n\nprint(res)\n', '\nfrom sys import stdin\n\nline = stdin.readline()\ns = line.rstrip()\n\nline = stdin.readline()\nt = line.rstrip()\n\ni = 0\nj = 0\nres = 0\n\nwhile i < len(s):\n    if s[i] == t[j]:\n        j += 1\n        i += 1\n    else:\n        res += 1\n        i += 1\n\nres += len(s) - len(t) - i\n\nprint(res)\n']
2022-04-20 11:37:20.688791 size on output set 2
2022-04-20 11:37:20.688803 num operations 1
2022-04-20 11:37:20.688809 size on input set 1
2022-04-20 11:37:20.688966 using api key sunu
2022-04-20 11:37:24.095928 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef find_longest_substring(s, t):\n    \"\"\"\n    :type s: str\n    :type t: str\n    :rtype: int\n    \"\"\"\n    if len(s) == len(t):\n        return 0\n\n    left, right = 0, len(s) - 1\n    while right - left > 1:\n        mid = (left + right) // 2\n        if all(c in s[mid:] for c in t):\n            left = mid\n        else:\n            right = mid\n\n    if all(c in s[right:] for c in t):\n        return len(s) - right\n    else:\n        return len(s) - left\n\nif __name__ == \"__main__\":\n    s = raw_input()\n    t = raw_input()\n    print find_longest_substring(s, t)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef findLongestSubstring(s, t):\n    \"\"\"\n    :type s: str\n    :type t: str\n    :rtype: int\n    \"\"\"\n    if len(s) <= len(t):\n        return 0\n\n    left, right = 0, len(s) - 1\n    while right - left > 1:  # binary search\n        mid = (left + right) // 2\n        if all(c in s[mid:] for c in t):  # check if all chars in t are in s[mid:]\n            left = mid\n        else:\n            right = mid\n\n    if all(c in s[right:] for c in t):\n        return len(s) - right\n    else:\n        return len(s) - left\n\nif __name__ == \"__main__\":\n    s = raw_input()\n    t = raw_input()\n    print findLongestSubstring(s, t)\n"
    }
  ],
  "created": 1650454640,
  "object": "edit"
}
2022-04-20 11:37:24.096147 fix syntax errors 2 ['\n\ndef find_longest_substring(s, t):\n    """\n    :type s: str\n    :type t: str\n    :rtype: int\n    """\n    if len(s) == len(t):\n        return 0\n\n    left, right = 0, len(s) - 1\n    while right - left > 1:\n        mid = (left + right) // 2\n        if all(c in s[mid:] for c in t):\n            left = mid\n        else:\n            right = mid\n\n    if all(c in s[right:] for c in t):\n        return len(s) - right\n    else:\n        return len(s) - left\n\nif __name__ == "__main__":\n    s = raw_input()\n    t = raw_input()\n    print find_longest_substring(s, t)\n', '\n\ndef findLongestSubstring(s, t):\n    """\n    :type s: str\n    :type t: str\n    :rtype: int\n    """\n    if len(s) <= len(t):\n        return 0\n\n    left, right = 0, len(s) - 1\n    while right - left > 1:  # binary search\n        mid = (left + right) // 2\n        if all(c in s[mid:] for c in t):  # check if all chars in t are in s[mid:]\n            left = mid\n        else:\n            right = mid\n\n    if all(c in s[right:] for c in t):\n        return len(s) - right\n    else:\n        return len(s) - left\n\nif __name__ == "__main__":\n    s = raw_input()\n    t = raw_input()\n    print findLongestSubstring(s, t)\n']
2022-04-20 11:37:24.096182 size on output set 2
2022-04-20 11:37:24.096193 num operations 1
2022-04-20 11:37:24.096200 size on input set 1
2022-04-20 11:37:24.096355 using api key derek
2022-04-20 11:37:24.135470 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 11:37:25.637352 using api key sunu
2022-04-20 11:37:29.169993 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "print(input().replace(input(), \"\"))\n"
    },
    {
      "index": 1,
      "text": "s = input()\nt = input()\n\ncnt = 0\n\nfor i in range(len(s)):\n    if s[i] == t[0]:\n        cnt += 1\n        t = t[1:]\n    if len(t) == 0:\n        break\n\nif len(t) == 0:\n    print(len(s) - cnt)\nelse:\n    print(len(s))\n"
    }
  ],
  "created": 1650454645,
  "object": "edit"
}
2022-04-20 11:37:29.170221 fix syntax errors 2 ['print(input().replace(input(), ""))\n', 's = input()\nt = input()\n\ncnt = 0\n\nfor i in range(len(s)):\n    if s[i] == t[0]:\n        cnt += 1\n        t = t[1:]\n    if len(t) == 0:\n        break\n\nif len(t) == 0:\n    print(len(s) - cnt)\nelse:\n    print(len(s))\n']
2022-04-20 11:37:29.170244 size on output set 2
