["\n\n# Solution\n\nn, k = [int(x) for x in input().split()]\ns = input()\n\ncost = 0\nfor i in range(n):\n    if s[i] == '1':\n        continue  # already covered\n    if i - k >= 0 and s[i - k] == '1':\n        continue  # covered by previous\n    if i + k < n and s[i + k] == '1':\n        continue  # covered by next\n    cost += i + 1  # covered by i+1th\n\nprint(cost)\n", "\n\ndef main():\n    # Read input\n    n, k = [int(i) for i in input().split()]\n    s = input()\n\n    # Initialize the array to store the cost of placing a router in the room\n    cost = [0] * (n + 1)\n    for i in range(n):\n        if s[i] == '1':\n            cost[i] = i\n\n    # Update the cost based on the routers' range\n    for i in range(k, n + 1):\n        cost[i] = min(cost[i], cost[i - k] + i)\n\n    # Sum the cost\n    total_cost = sum(cost)\n\n    # Output\n    print(total_cost)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    # Read input\n    n, k = [int(i) for i in input().split()]  # n: number of rooms, k: range of router\n    s = input()\n\n    # Initialize the array to store the cost of placing a router in the room\n    cost = [0] * n\n    for i in range(n):\n        if s[i] == '1':  # there is a router in the room\n            cost[i] = i + 1\n\n    # Update the cost based on the routers' range\n    for i in range(k, n):  # start from the k-th room\n        cost[i] = min(cost[i], cost[i - k] + i + 1)\n\n    # Sum the cost\n    total_cost = sum(cost)  # sum the cost of placing routers in all rooms\n\n    # Output\n    print(total_cost)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    # Read input\n    n, k = [int(i) for i in input().split()]\n    s = input()\n\n    # Initialize the array to store the cost of placing a router in the room\n    cost = [0] * (n + 1)\n    for i in range(n):\n        if s[i] == '1':\n            cost[i] = i + 1\n\n    # Update the cost based on the routers' range\n    for i in range(k, n + 1):\n        cost[i] = min(cost[i], cost[i - k] + i + 1)\n\n    # Sum the cost\n    total_cost = sum(cost)\n\n    # Output\n    print(total_cost)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n# Solution\n\nn, k = [int(x) for x in input().split()]\ns = input()\n\ncost = 0\nfor i in range(1, n + 1):\n    if s[i - 1] == '1':\n        cost += i\n        continue\n    if i - k - 1 >= 0 and s[i - k - 1] == '1':\n        continue\n    if i + k - 1 < n and s[i + k - 1] == '1':\n        continue\n    cost += i\n\nprint(cost)\n", "\n\ndef main():\n    # Read input\n    n, k = [int(i) for i in input().split()]  # number of rooms and router range\n    s = input()  # rooms with routers already installed\n\n    # Initialize the array to store the cost of placing a router in the room\n    cost = [0] * n  # cost of placing a router in the room\n    for i in range(n):\n        if s[i] == '1':  # if router is already installed, cost is 0\n            cost[i] = i + 1\n\n    # Update the cost based on the routers' range\n    for i in range(k, n):\n        cost[i] = min(cost[i], cost[i - k] + i + 1)\n\n    # Sum the cost\n    total_cost = sum(cost)\n\n    # Output\n    print(total_cost)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n#\ndef main():\n    # Read input\n    n, k = [int(i) for i in input().split()]\n    s = input()\n\n    # Initialize the array to store the cost of placing a router in the room\n    cost = [0] * n\n    for i in range(n):\n        if s[i] == '1':\n            cost[i] = i + 1\n\n    # Update the cost based on the routers' range\n    for i in range(k, n):\n        cost[i] = min(cost[i], cost[i - k] + i + 1)\n\n    # Sum the cost\n    total_cost = sum(cost)\n\n    # Output\n    print(total_cost)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    # # Read input\n    # n, k = [int(i) for i in input().split()]\n    # s = input()\n\n    # # Initialize the array to store the cost of placing a router in the room\n    # cost = [0] * n\n    # for i in range(n):\n    #     if s[i] == '1':\n    #         cost[i] = i + 1\n\n    # # Update the cost based on the routers' range\n    # for i in range(k, n):\n    #     cost[i] = min(cost[i], cost[i - k] + i + 1)\n\n    # # Sum the cost\n    # total_cost = sum(cost)\n\n    # # Output\n    # print(total_cost)\n\n    print(sum([i for i in range(10)]))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    # Read input from file\n    with open('input.txt', 'r') as f:\n        n, k = [int(i) for i in f.readline().split()]\n        s = f.readline()\n\n    # Initialize the array to store the cost of placing a router in the room\n    cost = [0] * n\n    for i in range(n):\n        if s[i] == '1':\n            cost[i] = i + 1\n\n    # Update the cost based on the routers' range\n    for i in range(k, n):\n        cost[i] = min(cost[i], cost[i - k] + i + 1)\n\n    # Sum the cost\n    total_cost = sum(cost)\n\n    # Output to file\n    with open('output.txt', 'w') as f:\n        f.write(str(total_cost))\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n# Solution\n\nn, k = [int(x) for x in input().split()]\ns = input()\n\ncost = 0\nfor i in range(1, n + 1):\n    if s[i - 1] == '1' and i - k - 1 >= 0 and s[i - k - 1] == '1':\n        continue\n    if s[i - 1] == '1' and i + k - 1 < n and s[i + k - 1] == '1':\n        continue\n    if s[i - 1] == '1':\n        cost += i\n        continue\n    cost += i\n\nprint(cost)\n", "\n\ndef main():\n    print(\"Hello World!\")\n\n\nif __name__ == \"__main__\":\n    main()\n", "# Solution\n\nn, k = [int(x) for x in input().split()]\ns = input()\ncost = 0\nfor i in range(1, n + 1):\n    if s[i - 1] == '1':\n        cost += i\n        continue\n    if i - k - 1 >= 0 and s[i - k - 1] == '1':\n        continue\n    if i + k - 1 < n and s[i + k - 1] == '1':\n        continue\n    cost += i\nprint(cost)\n", "\n\n# Solution\n\nn, k = [int(x) for x in input().split()]\n\nif n == 1 and s[0] == '0':\n    print(1)\n    exit(0)\ns = input()\n\ncost = 0\nfor i in range(1, n + 1):\n    if s[i - 1] == '1':\n        cost += i\n        continue\n    if i - k - 1 >= 0 and s[i - k - 1] == '1':\n        continue\n    if i + k - 1 < n and s[i + k - 1] == '1':\n        continue\n    cost += i\n\nprint(cost)\n"]