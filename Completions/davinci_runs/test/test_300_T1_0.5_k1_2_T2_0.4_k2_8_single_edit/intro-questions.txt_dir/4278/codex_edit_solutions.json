["\n# My code here\ndef main():\n    N = int(input())\n    S_sort = [''.join(sorted(input())) for _ in range(N)]\n    from collections import Counter\n    C = Counter(S_sort)\n    ans = 0\n    for c in C.values():\n        ans += c * (c-1) // 2\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n'''\n# my solution\nimport sys\n\n# read input\nn = int(sys.stdin.readline().rstrip())\ns = []\nfor i in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\n# create a dictionary of anagrams\nanagrams = {}\nfor i in range(n):\n    # sort characters\n    chars = list(s[i])\n    chars.sort()\n    # create a key for the dictionary\n    key = \"\".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n\n# count the number of pairs\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\n# print the result\nprint(count)\n'''\n\n# a better solution\nimport sys\n\nn = int(sys.stdin.readline())\n\ns = []\nfor _ in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\nm = dict()\nfor i in range(n):\n    m.setdefault(\"\".join(sorted(s[i])), []).append(i)\n\nans = 0\nfor i in m.values():\n    ans += len(i) * (len(i) - 1) // 2\n\nprint(ans)\n", "# anagrams\n\n# my solution\nimport sys\n\n# read input\nn = int(sys.stdin.readline().rstrip())\ns = []\nfor i in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\n# create a dictionary of anagrams\nanagrams = {}\nfor i in range(n):\n    # sort characters\n    chars = list(s[i])\n    chars.sort()\n    # create a key for the dictionary\n    key = \"\".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n\n# count the number of pairs\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\n# print the result\nprint(count)\n\n# a better solution (a bit faster)\n# import sys\n\n# n = int(sys.stdin.readline())\n\n# s = []\n# for _ in range(n):\n#     s.append(sys.stdin.readline().rstrip())\n\n# m = dict()\n# for i in range(n):\n#     m.setdefault(\"\".join(sorted(s[i])), []).append(i)\n\n# ans = 0\n# for i in m.values():\n#     ans += len(i) * (len(i) - 1) // 2\n\n# print(ans)\n", "\n\nimport sys\n\nn = int(sys.stdin.readline().rstrip())\ns = []\nfor i in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\nanagrams = {}\nfor i in range(n):\n    chars = list(s[i])\n    chars.sort()\n    key = \"\".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\nprint(count)\n", "\n\n# My code here\ndef main():\n    N = int(input())\n    S = []\n    for _ in range(N):\n        s = input()\n        S.append(s)\n    S_sort = []  # \u6587\u5b57\u5217\u3092\u30bd\u30fc\u30c8\u3057\u305f\u3082\u306e\u3092\u683c\u7d0d\u3059\u308b\n    for s in S:\n    # Counter\u3092\u4f7f\u3063\u3066\u5404\u6587\u5b57\u5217\u306e\u30bd\u30fc\u30c8\u3057\u305f\u3082\u306e\u306e\u51fa\u73fe\u56de\u6570\u3092\u6570\u3048\u308b\n        S_sort.append(''.join(sorted(s)))\n    from collections import Counter\n    C = Counter(S_sort)\n    ans = 0\n    for c in C.values():\n        ans += c * (c-1) // 2\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n#!/usr/bin/env python3\n\n\n# my solution\nimport sys\n\n# read input\nn = int(sys.stdin.readline().rstrip())\ns = []\nfor i in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\n# create a dictionary of anagrams\nanagrams = {}\nfor i in range(n):\n    # sort characters\n    chars = list(s[i])\n    chars.sort()\n    # create a key for the dictionary\n    key = \"\".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n\n# count the number of pairs\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\n# print the result\nprint(count)\n\n# a better solution\n#!/usr/bin/env python3\n\nimport sys\n\nn = int(sys.stdin.readline())\n\ns = []\nfor _ in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\nm = dict()\nfor i in range(n):\n    m.setdefault(\"\".join(sorted(s[i])), []).append(i)\n\nans = 0\nfor i in m.values():\n    ans += len(i) * (len(i) - 1) // 2\n\nprint(ans)\n", "# My code here\ndef main():\n    N = int(input())\n    s_list = []\n    for _ in range(N):\n        s = input()\n        s_list.append(s)\n    s_sort_list = []\n    for s in s_list:\n        s_sort_list.append(''.join(sorted(s)))\n    from collections import Counter\n    c = Counter(s_sort_list)\n    ans = 0\n        ans += c * (c - 1) // 2\n    print(ans)\n    \n\nif __name__ == '__main__':\n    main()\n", "\n\n# my solution, doesn't work\nimport sys\n\n# read input\nn = int(sys.stdin.readline().rstrip())\ns = []\nfor i in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\n# create a dictionary of anagrams\nanagrams = {}\nfor i in range(n):\n    # sort characters\n    chars = list(s[i])\n    chars.sort()\n    # create a key for the dictionary\n    key = \"\".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n\n# count the number of pairs\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\n# print the result\nprint(count)\n\n# a better solution, works\nimport sys\n\nn = int(sys.stdin.readline())\n\ns = []\nfor _ in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\nm = dict()\nfor i in range(n):\n    m.setdefault(\"\".join(sorted(s[i])), []).append(i)\n\nans = 0\nfor i in m.values():\n    ans += len(i) * (len(i) - 1) // 2\n\nprint(ans)\n", "\n# my solution\nimport sys\n\n# read input\nn = int(sys.stdin.readline().rstrip())\ns = []\nfor i in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\n# create a dictionary of anagrams\nanagrams = {}\nfor i in range(n):\n    # sort characters\n    chars = list(s[i])\n    chars.sort()\n    # create a key for the dictionary\n    key = \"\".join(chars)\n    if key in anagrams:\n        anagrams[key].append(i)\n    else:\n        anagrams[key] = [i]\n\n# count the number of pairs\ncount = 0\nfor key in anagrams:\n    if len(anagrams[key]) >= 2:\n        count += len(anagrams[key]) * (len(anagrams[key]) - 1) // 2\n\n# print the result\nprint(count)\n\n# a better solution\nimport sys\n\nn = int(sys.stdin.readline())\n\ns = []\nfor _ in range(n):\n    s.append(sys.stdin.readline().rstrip())\n\nm = dict()\nfor i in range(n):\n    m.setdefault(\"\".join(sorted(s[i])), []).append(i)\n\nans = 0\nfor i in m.values():\n    ans += len(i) * (len(i) - 1) // 2\n\nprint(ans)\n", "\n\n# My code here\ndef main():\n    N = int(input())\n    S = []\n    for _ in range(N):\n        s = input()\n        S.append(s)\n    S_sort = []\n    for s in S:\n        S_sort.append(''.join(sorted(s)))\n    from collections import Counter\n    C = Counter(S_sort)\n    ans = 0\n    for c in C.values():\n        ans += c * (c - 1) // 2\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n# My code here\ndef main():\n    N = int(input())\n    S = []\n    for _ in range(N):\n        s = input()\n        S.append(s)\n    S_sort = []\n    for s in S:\n        S_sort.append(''.join(sorted(s)))\n    from collections import Counter\n    C = Counter(S_sort)\n    ans = 0\n    for c in C.values():\n        ans += c * (c-1) // 2\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    N = int(input())\n    S = [input() for _ in range(N)]\n    S_sort = [''.join(sorted(s)) for s in S]\n    print(sum([c * (c-1) // 2 for c in collections.Counter(S_sort).values()]))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N = int(input())\n    S = []\n    for _ in range(N):\n        s = input()\n        S.append(s)\n    S_sort = []\n    for s in S:\n        S_sort.append(''.join(sorted(s)))\n    from collections import Counter\n    C = Counter(S_sort)\n    ans = 0\n    for c in C.values():\n        ans += c * (c-1) // 2\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"]