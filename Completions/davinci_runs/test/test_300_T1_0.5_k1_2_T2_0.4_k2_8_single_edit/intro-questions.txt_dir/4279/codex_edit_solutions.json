["\nimport math\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    print(find(n, a))\n\ndef find(n, a):\n    res = 0\n    for i in range(n):\n        res = max(res, a[i])\n    return res\n\nif __name__ == '__main__':\n    main()\n", "\"\"\"\nhttps://www.hackerrank.com/challenges/beautiful-days-at-the-movies/problem\n\"\"\"\n\nimport math\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        k = int(input())\n        print(find(k))\n\ndef find(k):\n    if k == 1:\n        return 1\n    if k == 2:\n        return 1\n    if k == 3:\n        return 2\n    \n    num = 3\n    start = 3\n    end = 6\n    while num < k:\n        num += 1\n        if num == k:\n            return 1\n        num += 1\n        if num == k:\n            return 1\n        num += 1\n        if num == k:\n            return 2\n        num += 1\n        if num == k:\n            return 3\n        num += 1\n        if num == k:\n            return 3\n        num += 1\n        if num == k:\n            return 4\n        num += 1\n        if num == k:\n            return 4\n        num += 1\n        if num == k:\n            return 5\n        num += 1\n        if num == k:\n            return 5\n        num += 1\n        if num == k:\n            return 6\n    \n    return find(k - num + 1)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport math\n\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        k = int(input())\n\n        print(find(k))\n\ndef find(k):\n    if k == 1:\n        return 1\n    if k == 2:\n        return 1\n    if k == 3:\n        return 2\n\n    num = 3\n    start = 3\n    end = 6\n    while num < k:\n        num += 1\n        if num == k:\n            return 1\n        num += 1\n        if num == k:\n            return 1\n        num += 1\n        if num == k:\n            return 2\n        num += 1\n        if num == k:\n            return 3\n        num += 1\n        if num == k:\n            return 3\n        num += 1\n        if num == k:\n            return 4\n        num += 1\n        if num == k:\n            return 4\n        num += 1\n        if num == k:\n            return 5\n        num += 1\n        if num == k:\n            return 5\n        num += 1\n        if num == k:\n            return 6\n\n    return find(k - num + 1)\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\ndef main():\n    print(find(10))\n\ndef find(k):\n    if k == 1:\n        return 1\n    if k == 2:\n        return 1\n    if k == 3:\n        return 2\n    \n    if k == 4:\n        return 2\n    if k == 5:\n        return 3\n    if k == 6:\n        return 3\n    if k == 7:\n        return 4\n    if k == 8:\n        return 4\n    if k == 9:\n        return 5\n    if k == 10:\n        return 5\n    \n    return find(k - 10 + 1)\n\nif __name__ == '__main__':\n    main()\n", "import math\n\ndef count_digits(n):\n    digits = 0\n    while n > 0:\n        n = n // 10\n        digits += 1\n    return digits\n\n\ndef find_digit(n):\n    if n == 1:\n        return 1\n    digits = count_digits(n)\n    # print(digits)\n    group_len = 9 * 10 ** (digits - 1) * digits\n    # print(group_len)\n    groups = math.ceil(n / group_len)\n    # print(groups)\n    group_num = n % group_len\n    if group_num == 0:\n        group_num = group_len\n    # print(group_num)\n    num = group_num - 1\n    # print(num)\n    num_in_group = math.ceil(num / digits)\n    # print(num_in_group)\n    num_in_group_pos = num % digits\n    if num_in_group_pos == 0:\n        num_in_group_pos = digits\n    # print(num_in_group_pos)\n    return int(str(num_in_group)[num_in_group_pos - 1])\n\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        print(find_digit(n))\n", "\nimport math\n\ndef count_digits(n):\n    digits = 0\n    while n > 0:\n        n = n // 10\n        digits += 1\n    return digits\n\ndef find_digit(n):\n    if n == 1:\n        return 1\n    digits = count_digits(n)\n    group_len = 9 * 10 ** (digits - 1) * digits\n    groups = math.ceil(n / group_len)\n    group_num = n % group_len\n    if group_num == 0:\n        group_num = group_len\n    num = group_num - 1\n    num_in_group = math.ceil(num / digits)\n    num_in_group_pos = num % digits\n    if num_in_group_pos == 0:\n        num_in_group_pos = digits\n    return int(str(num_in_group)[num_in_group_pos - 1])\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        print(find_digit(n))\n", "\nimport math\n\ndef count_digits(n):\n    digits = 0\n    while n > 0:\n        n = n // 10\n        digits += 1\n    return digits\n\ndef find_digit(n):\n    if n == 1:\n        return 1\n    digits = count_digits(n)\n    # print(digits)\n    group_len = 9 * 10 ** (digits - 1) * digits\n    # print(group_len)\n    groups = math.ceil(n / group_len)\n    # print(groups)\n    group_num = n % group_len + 1\n    if group_num == 0:\n        group_num = group_len\n    # print(group_num)\n    num = group_num\n    # print(num)\n    num_in_group = math.ceil(num / digits)\n    # print(num_in_group)\n    num_in_group_pos = num % digits\n    if num_in_group_pos == 0:\n        num_in_group_pos = digits\n    # print(num_in_group_pos)\n    return int(str(num_in_group)[num_in_group_pos - 1])\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        print(find_digit(n))\n", "# \n# import math\n# \n# def count_digits(n):\n#     digits = 0\n#     while n > 0:\n#         n = n // 10\n#         digits += 1\n#     return digits\n# \n# def find_digit(n):\n#     if n == 1:\n#         return 1\n#     digits = count_digits(n)\n#     # print(digits)\n#     group_len = 9 * 10 ** (digits - 1) * digits\n#     # print(group_len)\n#     groups = math.ceil(n / group_len)\n#     # print(groups)\n#     group_num = n % group_len\n#     if group_num == 0:\n#         group_num = group_len\n#     # print(group_num)\n#     num = group_num - 1\n#     # print(num)\n#     num_in_group = math.ceil(num / digits)\n#     # print(num_in_group)\n#     num_in_group_pos = num % digits\n#     if num_in_group_pos == 0:\n#         num_in_group_pos = digits\n#     # print(num_in_group_pos)\n#     return int(str(num_in_group)[num_in_group_pos - 1])\n# \n# if __name__ == \"__main__\":\n#     q = int(input())\n#     for _ in range(q):\n#         n = int(input())\n#         print(find_digit(n))\n", "\n\ndef main():\n    n = int(input())\n    for i in range(n):\n        s = input()\n        print(find(s))\n\ndef find(s):\n    if len(s) % 2 == 0:\n        return -1\n    if len(s) == 1:\n        return 0\n    if len(s) == 3:\n        if s == 'aba':\n            return 0\n        else:\n            return -1\n\n    for i in range(len(s)):\n        if i == 0:\n            continue\n        if i % 2 == 0:\n            if s[:i] == s[i:i*2]:\n                return i\n    return -1\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport math\n\ndef main():\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    print(find(n, arr))\n\ndef find(n, arr):\n    return 0\n\nif __name__ == '__main__':\n    main()\n", "import math\n\ndef count_digits(n):\n    digits = 0\n    while n > 0:\n        n = n // 10\n        digits += 1\n    return digits\n\ndef find_digit(n):\n    if n == 1:\n        return 1\n    digits = count_digits(n)\n    group_len = 9 * 10 ** (digits - 1) * digits\n    groups = math.ceil(n / group_len)\n    group_num = n % group_len\n    if group_num == 0:\n        group_num = group_len\n    num = group_num - 1\n    num_in_group = math.ceil(num / digits)\n    num_in_group_pos = num % digits\n    if num_in_group_pos == 0:\n        num_in_group_pos = digits\n    return int(str(num_in_group)[num_in_group_pos - 1])\n\nif __name__ == \"__main__\":\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        print(find_digit(n))\n", "\n\nimport math\n\ndef main():\n    q = int(input())\n    for i in range(q):\n        k = int(input())\n        print(find(k))\n\ndef find(k):\n    if k == 1:\n        return 1\n    if k == 2:\n        return 1\n    if k == 3:\n        return 2\n    \n    num = 3\n    start = 3\n    end = 6\n    while num < k:\n        num += 1\n        if num == k:\n            return 1\n        num += 1\n        if num == k:\n            return 1\n        num += 1\n        if num == k:\n            return 2\n        num += 1\n        if num == k:\n            return 3\n        num += 1\n        if num == k:\n            return 3\n        num += 1\n        if num == k:\n            return 4\n        num += 1\n        if num == k:\n            return 4\n        num += 1\n        if num == k:\n            return 5\n        num += 1\n        if num == k:\n            return 5\n        num += 1\n        if num == k:\n            return 6\n    \n    return find(k - num + start)\n\nif __name__ == '__main__':\n    main()\n"]