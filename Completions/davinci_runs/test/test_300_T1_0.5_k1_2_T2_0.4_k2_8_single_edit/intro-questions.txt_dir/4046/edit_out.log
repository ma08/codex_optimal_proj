2022-04-20 01:51:51.046661 num operations 1
2022-04-20 01:51:51.046679 size on input set 1
2022-04-20 01:51:51.046869 using api key derek
2022-04-20 01:51:51.204241 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 01:51:52.706075 using api key jaanu
2022-04-20 01:51:58.988048 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef get_input():\n    n = int(input())\n    q = [int(x) for x in input().split()]\n    return n, q\n\ndef check_permutation(n, q):\n    if len(q) != n - 1:\n        return False\n    if n == 1:\n        return True\n    for i in q:\n        if abs(i) >= n:\n            return False\n    return True\n\ndef create_permutation(n, q):\n    if n == 1:\n        return [1]\n    p = [0] * n\n    p[0] = q[0]\n    p[1] = q[0] + q[1]\n    for i in range(2, n):\n        p[i] = p[i-1] + q[i-1]\n    return p\n\ndef print_permutation(p):\n    print(\" \".join([str(x) for x in p]))\n\ndef main():\n    n, q = get_input()\n    if not check_permutation(n, q):\n        print(-1)\n        return\n    p = create_permutation(n, q)\n    print_permutation(p)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef get_input():\n    n = int(input())\n    q = [int(x) for x in input().split()]\n    return n, q\n\ndef check_permutation(n, q):\n    if len(q) != n - 1:\n        return False\n    if n == 1:\n        return True\n    for i in q:\n        if abs(i) >= n:\n            return False\n    return True\n\ndef create_permutation(n, q):\n    if n == 1:\n        return [1]\n    p = [0] * n\n    p[0] = 1\n    p[1] = 1 + q[0]\n    for i in range(2, n):\n        p[i] = p[i-1] + q[i-1]\n    return p\n\ndef print_permutation(p):\n    print(\" \".join([str(x) for x in p]))\n\ndef main():\n    n, q = get_input()\n    if not check_permutation(n, q):\n        print(-1)\n        return\n    p = create_permutation(n, q)\n    print_permutation(p)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef get_input():\n    n = int(input())\n    q = [int(x) for x in input().split()]\n    return n, q\n\ndef check_permutation(n, q):\n    if len(q) != n - 1:\n        return False\n    if n == 1:\n        return True\n    for i in q:\n        if abs(i) >= n:\n            return False\n    return True\n\ndef create_permutation(n, q):\n    if n == 1:\n        return [1]\n    p = [0] * n\n    p[0] = q[0]\n    p[1] = q[0] + q[1]\n    for i in range(2, n):\n        p[i] = p[i-1] + q[i-1]\n    return p\n\ndef print_permutation(p):\n    print(\" \".join([str(x) for x in p]))\n\ndef main():\n    n, q = get_input()\n    if not check_permutation(n, q):\n        print(-1)\n        return\n    p = create_permutation(n, q)\n    print_permutation(p)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef get_input():\n    n = int(input())\n    q = list(map(int, input().split()))\n    return n, q\n\ndef check_permutation(n, q):\n    if len(q) != n - 1:\n        return False\n    if n == 1:\n        return True\n    for i in q:\n        if abs(i) >= n:\n            return False\n    return True\n\ndef create_permutation(n, q):\n    if n == 1:\n        return [1]\n    p = [0] * n\n    p[0] = q[0]\n    p[1] = q[0] + q[1]\n    for i in range(2, n):\n        p[i] = p[i-1] + q[i-1]\n    return p\n\ndef print_permutation(p):\n    print(\" \".join(map(str, p)))\n\ndef main():\n    n, q = get_input()\n    if not check_permutation(n, q):\n        print(-1)\n        return\n    p = create_permutation(n, q)\n    print_permutation(p)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\ndef get_input():\n    n = int(input())\n    q = list(map(int, input().split()))\n    return n, q\n\ndef check_permutation(n, q):\n    if len(q) != n - 1:\n        return False\n    if n == 1:\n        return True\n    for i in q:\n        if abs(i) >= n:\n            return False\n    return True\n\ndef create_permutation(n, q):\n    if n == 1:\n        return [1]\n    p = [0] * n\n    p[0] = q[0]\n    p[1] = q[0] + q[1]\n    for i in range(2, n):\n        p[i] = p[i-1] + q[i-1]\n    return p\n\ndef print_permutation(p):\n    print(*p)\n\ndef main():\n    n, q = get_input()\n    if not check_permutation(n, q):\n        print(-1)\n        return\n    p = create_permutation(n, q)\n    print_permutation(p)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\nimport sys\n\ndef get_input():\n    n = int(sys.stdin.readline())\n    q = [int(x) for x in sys.stdin.readline().split()]\n    return n, q\n\ndef check_permutation(n, q):\n    if len(q) != n - 1:\n        return False\n    if n == 1:\n        return True\n    for i in q:\n        if abs(i) >= n:\n            return False\n    return True\n\ndef create_permutation(n, q):\n    if n == 1:\n        return [1]\n    p = [0] * n\n    p[0] = q[0]\n    p[1] = q[0] + q[1]\n    for i in range(2, n):\n        p[i] = p[i-1] + q[i-1]\n    return p\n\ndef print_permutation(p):\n    print(\" \".join([str(x) for x in p]))\n\ndef main():\n    n, q = get_input()\n    if not check_permutation(n, q):\n        print(-1)\n        return\n    p = create_permutation(n, q)\n    print_permutation(p)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef get_input():\n    n = int(input())\n    q = [int(x) for x in input().split()]\n    return n, q\n\ndef check_permutation(n, q):\n    if len(q) != n - 1:\n        return False\n    if n == 1:\n        return True\n    for i in q:\n        if abs(i) >= n:\n            return False\n    return True\n\ndef create_permutation(n, q):\n    if n == 1:\n        return [1]\n    p = [0] * n\n    p[0] = q[0]\n    p[1] = q[0] + q[1]\n    for i in range(2, n):\n        p[i] = p[i-1] + q[i-1]\n    return p\n\ndef print_permutation(p):\n    print(\" \".join([str(x) for x in p]))\n\ndef main():\n    n, q = get_input()\n    if not check_permutation(n, q):\n        print(-1)\n        return\n    p = create_permutation(n, q)\n    print_permutation(p)\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\nimport sys\n\ndef get_input():\n    n = int(input())\n    q = [int(x) for x in sys.stdin.readline().split()]\n    return n, q\n\ndef check_permutation(n, q):\n    if len(q) != n - 1:\n        return False\n    if n == 1:\n        return True\n    for i in q:\n        if abs(i) >= n:\n            return False\n    return True\n\ndef create_permutation(n, q):\n    if n == 1:\n        return [1]\n    p = [0] * n\n    p[0] = q[0]\n    p[1] = q[0] + q[1]\n    for i in range(2, n):\n        p[i] = p[i-1] + q[i-1]\n    return p\n\ndef print_permutation(p):\n    print(\" \".join([str(x) for x in p]))\n\ndef main():\n    n, q = get_input()\n    if not check_permutation(n, q):\n        print(-1)\n        return\n    p = create_permutation(n, q)\n    print_permutation(p)\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650419512,
  "object": "edit"
}
2022-04-20 01:51:58.988369 fix syntax errors 8 ['\n\ndef get_input():\n    n = int(input())\n    q = [int(x) for x in input().split()]\n    return n, q\n\ndef check_permutation(n, q):\n    if len(q) != n - 1:\n        return False\n    if n == 1:\n        return True\n    for i in q:\n        if abs(i) >= n:\n            return False\n    return True\n\ndef create_permutation(n, q):\n    if n == 1:\n        return [1]\n    p = [0] * n\n    p[0] = q[0]\n    p[1] = q[0] + q[1]\n    for i in range(2, n):\n        p[i] = p[i-1] + q[i-1]\n    return p\n\ndef print_permutation(p):\n    print(" ".join([str(x) for x in p]))\n\ndef main():\n    n, q = get_input()\n    if not check_permutation(n, q):\n        print(-1)\n        return\n    p = create_permutation(n, q)\n    print_permutation(p)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef get_input():\n    n = int(input())\n    q = [int(x) for x in input().split()]\n    return n, q\n\ndef check_permutation(n, q):\n    if len(q) != n - 1:\n        return False\n    if n == 1:\n        return True\n    for i in q:\n        if abs(i) >= n:\n            return False\n    return True\n\ndef create_permutation(n, q):\n    if n == 1:\n        return [1]\n    p = [0] * n\n    p[0] = 1\n    p[1] = 1 + q[0]\n    for i in range(2, n):\n        p[i] = p[i-1] + q[i-1]\n    return p\n\ndef print_permutation(p):\n    print(" ".join([str(x) for x in p]))\n\ndef main():\n    n, q = get_input()\n    if not check_permutation(n, q):\n        print(-1)\n        return\n    p = create_permutation(n, q)\n    print_permutation(p)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef get_input():\n    n = int(input())\n    q = [int(x) for x in input().split()]\n    return n, q\n\ndef check_permutation(n, q):\n    if len(q) != n - 1:\n        return False\n    if n == 1:\n        return True\n    for i in q:\n        if abs(i) >= n:\n            return False\n    return True\n\ndef create_permutation(n, q):\n    if n == 1:\n        return [1]\n    p = [0] * n\n    p[0] = q[0]\n    p[1] = q[0] + q[1]\n    for i in range(2, n):\n        p[i] = p[i-1] + q[i-1]\n    return p\n\ndef print_permutation(p):\n    print(" ".join([str(x) for x in p]))\n\ndef main():\n    n, q = get_input()\n    if not check_permutation(n, q):\n        print(-1)\n        return\n    p = create_permutation(n, q)\n    print_permutation(p)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef get_input():\n    n = int(input())\n    q = list(map(int, input().split()))\n    return n, q\n\ndef check_permutation(n, q):\n    if len(q) != n - 1:\n        return False\n    if n == 1:\n        return True\n    for i in q:\n        if abs(i) >= n:\n            return False\n    return True\n\ndef create_permutation(n, q):\n    if n == 1:\n        return [1]\n    p = [0] * n\n    p[0] = q[0]\n    p[1] = q[0] + q[1]\n    for i in range(2, n):\n        p[i] = p[i-1] + q[i-1]\n    return p\n\ndef print_permutation(p):\n    print(" ".join(map(str, p)))\n\ndef main():\n    n, q = get_input()\n    if not check_permutation(n, q):\n        print(-1)\n        return\n    p = create_permutation(n, q)\n    print_permutation(p)\n\nif __name__ == "__main__":\n    main()\n', '\nimport sys\n\ndef get_input():\n    n = int(input())\n    q = list(map(int, input().split()))\n    return n, q\n\ndef check_permutation(n, q):\n    if len(q) != n - 1:\n        return False\n    if n == 1:\n        return True\n    for i in q:\n        if abs(i) >= n:\n            return False\n    return True\n\ndef create_permutation(n, q):\n    if n == 1:\n        return [1]\n    p = [0] * n\n    p[0] = q[0]\n    p[1] = q[0] + q[1]\n    for i in range(2, n):\n        p[i] = p[i-1] + q[i-1]\n    return p\n\ndef print_permutation(p):\n    print(*p)\n\ndef main():\n    n, q = get_input()\n    if not check_permutation(n, q):\n        print(-1)\n        return\n    p = create_permutation(n, q)\n    print_permutation(p)\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef get_input():\n    n = int(sys.stdin.readline())\n    q = [int(x) for x in sys.stdin.readline().split()]\n    return n, q\n\ndef check_permutation(n, q):\n    if len(q) != n - 1:\n        return False\n    if n == 1:\n        return True\n    for i in q:\n        if abs(i) >= n:\n            return False\n    return True\n\ndef create_permutation(n, q):\n    if n == 1:\n        return [1]\n    p = [0] * n\n    p[0] = q[0]\n    p[1] = q[0] + q[1]\n    for i in range(2, n):\n        p[i] = p[i-1] + q[i-1]\n    return p\n\ndef print_permutation(p):\n    print(" ".join([str(x) for x in p]))\n\ndef main():\n    n, q = get_input()\n    if not check_permutation(n, q):\n        print(-1)\n        return\n    p = create_permutation(n, q)\n    print_permutation(p)\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef get_input():\n    n = int(input())\n    q = [int(x) for x in input().split()]\n    return n, q\n\ndef check_permutation(n, q):\n    if len(q) != n - 1:\n        return False\n    if n == 1:\n        return True\n    for i in q:\n        if abs(i) >= n:\n            return False\n    return True\n\ndef create_permutation(n, q):\n    if n == 1:\n        return [1]\n    p = [0] * n\n    p[0] = q[0]\n    p[1] = q[0] + q[1]\n    for i in range(2, n):\n        p[i] = p[i-1] + q[i-1]\n    return p\n\ndef print_permutation(p):\n    print(" ".join([str(x) for x in p]))\n\ndef main():\n    n, q = get_input()\n    if not check_permutation(n, q):\n        print(-1)\n        return\n    p = create_permutation(n, q)\n    print_permutation(p)\n\n\nif __name__ == "__main__":\n    main()\n', '\n\nimport sys\n\ndef get_input():\n    n = int(input())\n    q = [int(x) for x in sys.stdin.readline().split()]\n    return n, q\n\ndef check_permutation(n, q):\n    if len(q) != n - 1:\n        return False\n    if n == 1:\n        return True\n    for i in q:\n        if abs(i) >= n:\n            return False\n    return True\n\ndef create_permutation(n, q):\n    if n == 1:\n        return [1]\n    p = [0] * n\n    p[0] = q[0]\n    p[1] = q[0] + q[1]\n    for i in range(2, n):\n        p[i] = p[i-1] + q[i-1]\n    return p\n\ndef print_permutation(p):\n    print(" ".join([str(x) for x in p]))\n\ndef main():\n    n, q = get_input()\n    if not check_permutation(n, q):\n        print(-1)\n        return\n    p = create_permutation(n, q)\n    print_permutation(p)\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 01:51:58.988558 size on output set 8
2022-04-20 01:51:58.988571 num operations 1
2022-04-20 01:51:58.988577 size on input set 1
2022-04-20 01:51:58.988766 using api key derek
2022-04-20 01:51:59.026710 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 01:52:00.528604 using api key sourya
2022-04-20 01:52:08.296113 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef solve(n, q):\n    p = [1]\n    for i in range(n - 1):\n        if p[-1] + q[i] > 0 and p[-1] + q[i] <= n:\n            p.append(p[-1] + q[i])\n        else:\n            return -1\n    return p\n\n\ndef main():\n    n = int(input())\n    q = list(map(int, input().split()))\n    print(*solve(n, q))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef solve(n, q):\n    p = [1]\n    for i in range(n - 1):\n        if 0 < p[-1] + q[i] <= n:\n            p.append(p[-1] + q[i])\n        else:\n            return -1\n    return p\n\n\ndef main():\n    n = int(input())\n    q = list(map(int, input().split()))\n    print(*solve(n, q))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef solve(n, q):\n    p = [1]\n    for i in range(n - 1):\n        if p[-1] + q[i] > 0 and p[-1] + q[i] <= n:\n            p.append(p[-1] + q[i])\n        else:\n            return -1\n    return p\n\n\ndef main():\n    n = int(input())\n    q = list(map(int, input().split()))\n    print(*solve(n, q))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\ndef solve(n, q):\n    p = [1]\n    for i in range(n - 1):\n        if p[-1] + q[i] > 0 and p[-1] + q[i] <= n:\n            p.append(p[-1] + q[i])\n        else:\n            return -1\n    return p\n\n\ndef main():\n    n = int(input())\n    q = list(map(int, input().split()))\n    print(*solve(n, q))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\ndef solve(n, q):\n    a = [1]\n    for i in range(n-1):\n        if a[-1] + q[i] > 0 and a[-1] + q[i] <= n:\n            a.append(a[-1] + q[i])\n        else:\n            return -1\n    return a\n\n\n\n\ndef main():\n    n = int(input())\n    q = list(map(int, input().split()))\n    print(*solve(n, q))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\ndef solve(n, q):\n    p = [1]\n    for i in range(n - 1):\n        if p[-1] + q[i] > 0 and p[-1] + q[i] <= n:\n            p.append(p[-1] + q[i])\n        else:\n            return -1\n    return p\n\n\ndef main():\n    n = int(input())\n    q = list(map(int, input().split()))\n    print(*solve(n, q))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\ndef solve(n, q):\n    p = [1]\n    for i in range(n - 1):\n        if p[-1] + q[i] > 0 and p[-1] + q[i] <= n:\n            p.append(p[-1] + q[i])\n        else:\n            return -1\n    return p\n\n\ndef main():\n    n = int(input())\n    q = list(map(int, input().split()))\n    print(*solve(n, q))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\ndef solve(n, q):\n    p = [1]\n    for i in range(n - 1):\n        if p[-1] + q[i] > 0 and p[-1] + q[i] <= n:\n            p.append(p[-1] + q[i])\n        else:\n            return -1\n    return p\n\n\ndef main():\n    n = int(input())\n    q = list(map(int, input().split()))\n    print(*solve(n, q))\n\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650419520,
  "object": "edit"
}
2022-04-20 01:52:08.296413 fix syntax errors 8 ['\ndef solve(n, q):\n    p = [1]\n    for i in range(n - 1):\n        if p[-1] + q[i] > 0 and p[-1] + q[i] <= n:\n            p.append(p[-1] + q[i])\n        else:\n            return -1\n    return p\n\n\ndef main():\n    n = int(input())\n    q = list(map(int, input().split()))\n    print(*solve(n, q))\n\n\nif __name__ == "__main__":\n    main()\n', '\ndef solve(n, q):\n    p = [1]\n    for i in range(n - 1):\n        if 0 < p[-1] + q[i] <= n:\n            p.append(p[-1] + q[i])\n        else:\n            return -1\n    return p\n\n\ndef main():\n    n = int(input())\n    q = list(map(int, input().split()))\n    print(*solve(n, q))\n\n\nif __name__ == "__main__":\n    main()\n', '\ndef solve(n, q):\n    p = [1]\n    for i in range(n - 1):\n        if p[-1] + q[i] > 0 and p[-1] + q[i] <= n:\n            p.append(p[-1] + q[i])\n        else:\n            return -1\n    return p\n\n\ndef main():\n    n = int(input())\n    q = list(map(int, input().split()))\n    print(*solve(n, q))\n\n\nif __name__ == "__main__":\n    main()\n', '\ndef solve(n, q):\n    p = [1]\n    for i in range(n - 1):\n        if p[-1] + q[i] > 0 and p[-1] + q[i] <= n:\n            p.append(p[-1] + q[i])\n        else:\n            return -1\n    return p\n\n\ndef main():\n    n = int(input())\n    q = list(map(int, input().split()))\n    print(*solve(n, q))\n\n\nif __name__ == "__main__":\n    main()\n', '\ndef solve(n, q):\n    a = [1]\n    for i in range(n-1):\n        if a[-1] + q[i] > 0 and a[-1] + q[i] <= n:\n            a.append(a[-1] + q[i])\n        else:\n            return -1\n    return a\n\n\n\n\ndef main():\n    n = int(input())\n    q = list(map(int, input().split()))\n    print(*solve(n, q))\n\n\nif __name__ == "__main__":\n    main()\n', '\ndef solve(n, q):\n    p = [1]\n    for i in range(n - 1):\n        if p[-1] + q[i] > 0 and p[-1] + q[i] <= n:\n            p.append(p[-1] + q[i])\n        else:\n            return -1\n    return p\n\n\ndef main():\n    n = int(input())\n    q = list(map(int, input().split()))\n    print(*solve(n, q))\n\n\nif __name__ == "__main__":\n    main()\n', '\ndef solve(n, q):\n    p = [1]\n    for i in range(n - 1):\n        if p[-1] + q[i] > 0 and p[-1] + q[i] <= n:\n            p.append(p[-1] + q[i])\n        else:\n            return -1\n    return p\n\n\ndef main():\n    n = int(input())\n    q = list(map(int, input().split()))\n    print(*solve(n, q))\n\n\nif __name__ == "__main__":\n    main()\n', '\ndef solve(n, q):\n    p = [1]\n    for i in range(n - 1):\n        if p[-1] + q[i] > 0 and p[-1] + q[i] <= n:\n            p.append(p[-1] + q[i])\n        else:\n            return -1\n    return p\n\n\ndef main():\n    n = int(input())\n    q = list(map(int, input().split()))\n    print(*solve(n, q))\n\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 01:52:08.296460 size on output set 3
