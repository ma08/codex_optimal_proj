["\ndef f(n):\n    n += 1\n    while n % 10 == 0:\n        n = n // 10\n    return n\n\ndef main():\n    n = int(input())\n    memo = set()\n    while n not in memo:\n        memo.add(n)\n        n = f(n)\n    print(len(memo))\n\nif __name__ == \"__main__\":\n    main()\n", "import sys\nimport heapq\nfrom operator import itemgetter\nfrom collections import deque, defaultdict\nfrom bisect import bisect_left, bisect_right\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 7)\nMOD = 10**9 + 7\n\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef f(n):\n    n = n + 1\n    while n % 10 == 0 and n > 0:\n        n = n // 10\n    return n\n\ndef main():\n    n = int(input())\n    memo = set()\n    while n not in memo:\n        memo.add(n)\n        n = f(n)\n    print(len(memo))\n\nif __name__ == \"__main__\":\n    main()\n", "def f(n):\n    n += 1\n    while n % 10 == 0:\n        n //= 10\n    return n\n\ndef main():\n    n = int(input('n: '))\n    memo = set()\n    while n not in memo:\n        memo.add(n)\n        n = f(n)\n    print('length:', len(memo))\n\nif __name__ == \"__main__\":\n    main()\n", "def f(n):\n    n = n + 1\n    while n % 10 == 0:\n        n = n // 10\n    return n\n\ndef main():\n    n = int(input())\n    memo = set()\n    while n not in memo:\n        memo.add(n)\n        n = f(n)\n    print(len(memo))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    f_in = open(\"f.in\", \"r\")\n    n = int(f_in.readline())\n    print(count_reachable(n))\n\ndef count_reachable(n):\n    if n == 1:\n        return 2\n    return count_reachable(n-1) + is_reachable(n-1, n-1)\n\ndef is_reachable(n, m):\n    if n == m:\n        return 1\n    if n < 1:\n        return 0\n    if n % 10 == 0:\n        return is_reachable(n//10, m)\n    return is_reachable(n-1, m)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    f_in = open(\"file.in\", \"r\")\n    n = int(f_in.readline())\n\n    print(count_reachable(n))\n\ndef count_reachable(n):\n    if n == 1:\n        return 2\n    return count_reachable(n-1) + is_reachable(n-1, n)\n\n\ndef is_reachable(n, m):\n    if n == m:\n        return 1\n    if n < 1:\n        return 0\n        return is_reachable(n-1, m)\n    else:\n    if n % 10 == 0:\n        return is_reachable(n//10, m)\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    f_in = open(\"f.in\", 'r')\n    n = int(f_in.readline())\n    print(count_reachable(n))\n\ndef count_reachable(n):\n    if n == 1:\n        return 2\n    return count_reachable(n-1) + is_reachable(n-1, n)\n\ndef is_reachable(n, m):\n    if n == m:\n        return 1\n    if n < 1:\n        return 0\n    if n % 10 == 0:\n        return is_reachable(n//10, m)\n    return is_reachable(n-1, m)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    f_in = open(\"f.in\", \"r\") # open file for reading\n    n = int(f_in.readline()) # read first line\n    print(count_reachable(n)) # print output\n# count number of reachable numbers\n\ndef count_reachable(n):\n    if n == 1: # base case\n        return 2\n    return count_reachable(n-1) + is_reachable(n-1, n) # recursive call\n# check if n is reachable from m\n\ndef is_reachable(n, m):\n    if n == m: # base case\n        return 1\n    if n < 1: # base case\n        return 0\n    if n % 10 == 0: # recursive call\n        return is_reachable(n//10, m)\n    return is_reachable(n-1, m) # recursive call\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef f(n):\n    n = n + 1\n    while n % 10 == 0:\n        n = n // 10\n    return n\n\ndef main():\n    n = int(input())  # type: int\n    memo = set()\n    while n not in memo:\n        memo.add(n)\n        n = f(n)\n    print(len(memo))\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef main():\n    f_in = open(\"file.in\", \"r\")\n    n = int(f_in.readline())\n    f_out = open(\"file.out\", \"w\")\n    f_out.write(str(count_reachable(n)))\n\ndef count_reachable(n):\n    if n == 1:\n        return 2\n    return count_reachable(n-1) + is_reachable(n-1, n-1)\n\ndef is_reachable(n, m):\n    if n == m:\n        return 1\n    if n < 1:\n        return 0\n    if n % 10 == 0:\n        return is_reachable(n//10, m)\n    return is_reachable(n-1, m)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    f_in = open(\"file.in\", \"r\")\n    n = int(f_in.readline())\n    print(count_reachable(n))\n\ndef count_reachable(n):\n    if n == 1:\n        return 2\n    return count_reachable(n-1) + is_reachable(n-1, n)\n\ndef is_reachable(n, m):\n    if n == m:\n        return 1\n    if n < 1:\n        return 0\n    if n % 10 == 0:\n        return is_reachable(n//10, m)\n    return is_reachable(n-1, m)\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef main():\n    f_in = open(\"f.in\", \"r\")  # open file\n    n = int(f_in.readline())\n    print(count_reachable(n))  # print result\n\n\ndef count_reachable(n):  # count reachable numbers\n    if n == 1:\n        return 2\n    return count_reachable(n-1) + is_reachable(n-1, n)  # recursive call\n\n\ndef is_reachable(n, m):  # check if n is reachable from m\n    if n == m:\n        return 1\n    if n < 1:\n        return 0\n    if n % 10 == 0:\n        return is_reachable(n//10, m)  # recursive call\n    return is_reachable(n-1, m)  # recursive call\n\n\nif __name__ == \"__main__\":\n    main()\n"]