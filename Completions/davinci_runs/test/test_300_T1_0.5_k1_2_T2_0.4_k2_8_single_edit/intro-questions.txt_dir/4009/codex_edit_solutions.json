["\n\nn, x, y = map(int, input().split())\nn = list(input())\nprint(n.count('0') if n[y] == '0' else n.count('0')+1)\n", "\n\nn, x, y = map(int, input().split())\nn = list(map(int, input().split()))\n\nif n[y-1] == 0:\n    n[y-1] = 1\nelse:\n    n[y-1] = 0\n    for i in range(y, x):\n        if n[i] == 0:\n            n[i] = 1\n            break\n        else:\n            n[i] = 0\n\nprint(n.count(0))\n", "\n\nn, x, y = map(int, input().split())\nn = list(input())\n\nif n[y] == '0':\n    n[y] = '1'\nelse:\n    n[y] = '0'\n    for i in range(y+1, x+1):\n        if n[i] == '0':\n            n[i] = '1'\n            break\n        else:\n            n[i] = '0'\n\nprint(n.count('0'))\n", "\n\ndef solve(n, x, y, number):\n    operations = 0\n    for i in range(n-x+1):\n        if number[i] != number[i+x-y-1]:\n            operations += 1\n    return operations\n\ndef main():\n    n, x, y = map(int, input().split())\n    number = input()\n    print(solve(n, x, y, number))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef solve(n, x, y, s):\n    operations = 0\n    for i in range(n-x):\n        if s[i] != s[i+x-y]:\n            operations += 1\n    return operations\n\ndef main():\n    n, x, y = map(int, input().split())\n    s = input()\n    print(solve(n, x, y, s))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\nn, x, y = map(int, input().split())\nn = list(input())\n\nfor i in range(y+1, x):\n    if n[i] == '0':\n        n[i] = '1'\n        break\n    else:\n        n[i] = '0'\n\nprint(n.count('0'))\n", "\n\nn, x, y = map(int, input().split())\nn = list(str(input()))\n\nif n[y] == '0':\n    n[y] = '1'\nelse:\n    n[y] = '0'\n    for i in range(y+1, x):\n        if n[i] == '0':\n            n[i] = '1'\n            break\n        else:\n            n[i] = '0'\n\nprint(n.count('0'))\n", "\n\ndef solve(n, m, a, b):\n    if n == 1:\n        return a\n    if m == 1:\n        return b\n    if n == 2:\n        return min(2*a, b)\n    if m == 2:\n        return min(2*b, a)\n    return min(2*a, 2*b, a+b)\n\ndef main():\n    n, m = map(int, input().split())\n    a, b = map(int, input().split())\n    print(solve(n, m, a, b))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef solve(n, m, a, b, c):\n    return 1\n\ndef main():\n    n, m, a, b, c = map(int, input().split())\n    print(solve(n, m, a, b, c))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef solve(n, x, y, number):\n    operations = 0\n    for i in range(n-x):\n        if number[i] != number[i+x]:\n            operations += 1\n    return operations\n\ndef main():\n    n, x, y = map(int, input().split())\n    number = input()\n    print(solve(n, x, y, number))\n\nif __name__ == \"__main__\":\n    main()\n", "\nn, x, y = map(int, input().split())\nn = list(input())\n\nif n[y] == '0':\n    n[y] = '1'\nelse:\n    n[y] = '0'\n    for i in range(y+1, x):\n        if n[i] == '0':\n            n[i] = '1'\n            break\n        else:\n            n[i] = '0'\n\nprint(n.count('0'))\n", "\n\ndef solve(n, x, y, number, operations):\n    operations = 0\n    for i in range(n):\n        if number[i] != number[i+x]:\n            operations += 1 \n    return operations \n\n\ndef main():\n    n, x, y = map(int, input().split())\n    number = input()\n    operations = 0\n    print(solve(n, x, y, number, operations))\n\nif __name__ == \"__main__\":\n    main()\n", "\nprint(\"hello\")\n", "\n\ndef solve(n, x, y, number, operations):\n    operations = 0\n    for i in range(x, n):\n        if number[i] != number[i-x+y]:\n            operations += 1\n    return min(operations, operations+1)\n\ndef main():\n    n, x, y = map(int, input().split())\n    number = input()\n    operations = 0\n    print(solve(n, x, y, number, operations))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef solve(n, x, y, number):\n    operations = 0\n    for i in range(n-x+1):\n        if number[i] != number[i+x-y]:\n            operations += 1\n    return operations\n\ndef main():\n    n, x, y = map(int, input().split())\n    number = input()\n    print(solve(n, x, y, number))\n\nif __name__ == \"__main__\":\n    main()\n"]