["\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    switches = [list(map(int, input().split())) for _ in range(m)]\n    states = list(map(int, input().split()))\n    bulbs = [[False] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(1, switches[i][0] + 1):\n            bulbs[i][switches[i][j] - 1] = True\n    # print(bulbs)\n    cnt = 0\n    for i in range(2 ** n):\n        flag = True\n        for j in range(m):\n            c = 0\n            for k in range(n):\n                if bulbs[j][k] and ((i >> k) & 1):\n                    c += 1\n            if c % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\nk_list = [int(sys.stdin.readline().split()[0]) for _ in range(M)]\ns_list = [list(map(int, sys.stdin.readline().split())) for _ in range(M)]\np_list = list(map(int, sys.stdin.readline().split()))\n\ndef make_light(state):\n    # print(state)\n    for i in range(M):\n        odd_even = 0\n        for j in range(k_list[i]):\n            if state[s_list[i][j]-1] == 1:\n                odd_even += 1\n        if odd_even % 2 != p_list[i]:\n            return False\n    return True\n\ndef make_state(state, n):\n    if n == N:\n        if make_light(state):\n            return 1\n        else:\n            return 0\n    else:\n        return make_state(state + [1], n+1) + make_state(state + [0], n+1)\n\nprint(make_state([], 0))\n", "\nimport sys\n\nN, M = map(int, input().split())\n\nk_list = []\ns_list = []\nfor i in range(M):\n    k_list.append(int(input().split()[0]))\n    s_list.append(list(map(int, input().split())))\n\np_list = list(map(int, input().split()))\n\n# print(N, M)\n# print(k_list)\n# print(s_list)\n# print(p_list)\n\ndef make_light(state):\n    # print(state)\n    for i in range(M):\n        odd_even = 0\n        for j in range(k_list[i]):\n            if state[s_list[i][j]-1] == 1:\n                odd_even += 1\n        if odd_even % 2 != p_list[i]:\n            return False\n    return True\n\ndef make_state(state, n):\n    if n == N:\n        if make_light(state):\n            return 1\n        else:\n            return 0\n    else:\n        return make_state(state + [1], n+1) + make_state(state + [0], n+1)\n\nprint(make_state([], 0))\n", "\n\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\n\nk_list = []\ns_list = []\nfor i in range(M):\n    k_list.append(int(sys.stdin.readline().split()[0]))\n    s_list.append(list(map(int, sys.stdin.readline().split())))\n\np_list = list(map(int, sys.stdin.readline().split()))\n\n# print(N, M)\n# print(k_list)\n# print(s_list)\n# print(p_list)\n\ndef make_light(state):\n    # print(state)\n    for i in range(M):\n        odd_even = 0\n        for j in range(k_list[i]):\n            if state[s_list[i][j]-1] == 1:\n                odd_even += 1\n        if odd_even % 2 != p_list[i]:\n            return False\n    return True\n\ndef make_state(state, n, count):\n    if n == N:\n        if make_light(state):\n            count += 1\n        else:\n            pass\n    else:\n        count = make_state(state + [1], n+1, count) + make_state(state + [0], n+1, count)\n    return count\n\nprint(make_state([], 0, 0))\n", "\n\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\n\nk_list = []\ns_list = []\nfor i in range(M):\n    k_list.append(int(sys.stdin.readline().split()[0])\n    s_list.append(list(map(int, sys.stdin.readline().split())))\n\np_list = list(map(int, sys.stdin.readline().split()))\n\n# print(N, M)\n# print(k_list)\n# print(s_list)\n# print(p_list)\n\ndef make_light(state):\n    # print(state)\n    for i in range(M):\n        odd_even = 0\n        for j in range(k_list[i]):\n            if state[s_list[i][j]-1] == 1:\n                odd_even += 1\n        if odd_even % 2 != p_list[i]:\n            return False\n    return True\n\ndef make_state(state, n):\n    if n == N:\n        if make_light(state):\n            return 1\n        else:\n            return 0\n    else:\n        return make_state(state + [1], n+1) + make_state(state + [0], n+1\n\nprint(make_state([], 0))\n", "\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\n\nk_list = []\ns_list = []\nfor i in range(M):\n    k_list.append(int(sys.stdin.readline().strip()))\n    s_list.append(list(map(int, sys.stdin.readline().strip().split())))\n\np_list = list(map(int, sys.stdin.readline().strip().split()))\n\n# print(N, M)\n# print(k_list)\n# print(s_list)\n# print(p_list)\n\ndef make_light(state):\n    print(state)\n    for i in range(M):\n        odd_even = 0\n        for j in range(k_list[i]):\n            if state[s_list[i][j]-1] == 1:\n                odd_even += 1\n        print(odd_even)\n        if odd_even % 2 != p_list[i]:\n            print('false')\n            return False\n    print('true')\n    return True\n\ndef make_state(state, n):\n    if n == N:\n        if make_light(state):\n            return 1\n        else:\n            return 0\n    else:\n        return make_state(state + [1], n+1) + make_state(state + [0], n+1) % (10**9 + 7)\n\nprint(make_state([], 0))\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    bulbs = [list(map(int, input().split())) for _ in range(m)]\n    states = list(map(int, input().split()))\n    switches = [[False] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(1, bulbs[i][0] + 1):\n            switches[i][bulbs[i][j] - 1] = True\n    # print(switches)\n    cnt = 0\n    for i in range(2 ** n):\n        flag = True\n        for j in range(m):\n            c = 0\n            for k in range(n):\n                if switches[j][k] and ((i >> k) & 1):\n                    c += 1\n            if c % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    n, m = map(int, input().split())\n    bulbs = [list(map(int, input().split())) for _ in range(m)]\n    states = list(map(int, input().split()))\n    switches = [[False] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(1, bulbs[i][0] + 1):\n            switches[i][bulbs[i][j] - 1] = True\n    # print(switches)\n    cnt = 0\n    for i in range(2 ** n):\n        flag = True\n        for j in range(m):\n            c = 0\n            for k in range(n):\n                if switches[j][k] and ((i >> k) & 1):\n                    c += 1\n            if c % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m = map(int, input().split())\n    bulbs = [list(map(int, input().split())) for _ in range(m)]\n    states = list(map(int, input().split()))\n    switches = [[False] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(1, bulbs[i][0] + 1):\n            switches[i][bulbs[i][j] - 1] = True\n    # print(switches)\n    cnt = 0\n    for i in range(2 ** n):\n        flag = True\n        for j in range(m):\n            c = 0\n            for k in range(n):\n                if switches[j][k] and ((i >> k) & 1):\n                    c += 1\n            if c % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\n\nk_list = []\ns_list = []\nfor i in range(M):\n    k_list.append(int(sys.stdin.readline().split()[0]))  # \u30dc\u30bf\u30f3\u306e\u6570\n    s_list.append(list(map(int, sys.stdin.readline().split())))  # \u30dc\u30bf\u30f3\u304c\u3064\u306a\u304c\u3063\u3066\u3044\u308b\u96fb\u7403\u306e\u756a\u53f7\n\np_list = list(map(int, sys.stdin.readline().split()))  # \u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3068\u304d\u306e\u30d1\u30bf\u30fc\u30f3\n\n# \u96fb\u7403\u306e\u72b6\u614b\u304c\u6761\u4ef6\u3092\u6e80\u305f\u3057\u3066\u3044\u308b\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\ndef check_light(state):\n    for i in range(M):\n        odd_even = 0\n        for j in range(k_list[i]):\n            if state[s_list[i][j]-1] == 1:\n                odd_even += 1\n        if odd_even % 2 != p_list[i]:\n            return False\n    return True\n\ndef make_state(state, n):\n    if n == N:\n        if check_light(state):\n            return 1\n        else:\n            return 0\n    else:\n        return make_state(state + [1], n+1) + make_state(state + [0], n+1)\n\nprint(make_state([], 0))\n", "\nimport sys\n\nN, M = map(int, sys.stdin.readline().split())\n\nk_list = list()\ns_list = list()\nfor i in range(M):\n    k_list.append(int(sys.stdin.readline().split()[0]))  # k_list\u306b\u5404\u30b9\u30a4\u30c3\u30c1\u306e\u30dc\u30bf\u30f3\u6570\u3092\u683c\u7d0d\n    s_list.append(list(map(int, sys.stdin.readline().split())))  # s_list\u306b\u5404\u30b9\u30a4\u30c3\u30c1\u306e\u30dc\u30bf\u30f3\u306e\u756a\u53f7\u3092\u683c\u7d0d\n\np_list = list(map(int, sys.stdin.readline().split()))  # p_list\u306b\u5404\u96fb\u7403\u304c\u70b9\u706f\u3059\u308b\u30b9\u30a4\u30c3\u30c1\u306e\u30dc\u30bf\u30f3\u306e\u6570\u304c\u5947\u6570\u306a\u30891, \u5076\u6570\u306a\u30890\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\n\n# print(N, M)  # \u30dc\u30bf\u30f3\u306e\u6570\u3068\u30b9\u30a4\u30c3\u30c1\u306e\u6570\n# print(k_list)  # \u5404\u30b9\u30a4\u30c3\u30c1\u306e\u30dc\u30bf\u30f3\u306e\u6570\n# print(s_list)  # \u5404\u30b9\u30a4\u30c3\u30c1\u306e\u30dc\u30bf\u30f3\u306e\u756a\u53f7\n# print(p_list)  # \u5404\u96fb\u7403\u304c\u70b9\u706f\u3059\u308b\u30b9\u30a4\u30c3\u30c1\u306e\u30dc\u30bf\u30f3\u306e\u6570\u304c\u5947\u6570\u306a\u30891, \u5076\u6570\u306a\u30890\n\ndef make_light(state):\n    # print(state)\n    for i in range(M):\n        odd_even = 0\n        for j in range(k_list[i]):\n            if state[s_list[i][j]-1] == 1:\n                odd_even += 1\n        if odd_even % 2 != p_list[i]:\n            return False\n    return True\n\ndef make_state(state, n):\n    if n == N:\n        if make_light(state):\n            return 1\n        else:\n            return 0\n    else:\n        return make_state(state + [1], n+1) + make_state(state + [0], n+1)\n\nprint(make_state([], 0))\n", "\nimport sys\nN, M = map(int, sys.stdin.readline().split())\n\nk_list = []\ns_list = []\nfor i in range(M):\n    k_list.append(int(sys.stdin.readline().split()[0]))\n    s_list.append(list(map(int, sys.stdin.readline().split())))\np_list = list(map(int, sys.stdin.readline().split()))\n# print(N, M)\n# print(k_list)\n# print(s_list)\n# print(p_list)\ndef make_light(state):\n    # print(state)\n    for i in range(M):\n        odd_even = 0\n        for j in range(k_list[i]):\n            if state[s_list[i][j]-1] == 1:\n                odd_even += 1\n        if odd_even % 2 != p_list[i]:\n            return False\n    return True\ndef make_state(state, n):\n    if n == N:\n        if make_light(state):\n            return 1\n        else:\n            return 0\n    else:\n        return make_state(state + [1], n+1) + make_state(state + [0], n+1)\nprint(make_state([], 0))\n", "\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    bulbs = [list(map(int, input().split())) for _ in range(m)]\n    states = list(map(int, input().split()))\n    switches = [[False] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(1, bulbs[i][0] + 1):\n            switches[i][bulbs[i][j] - 1] = True\n    cnt = 0\n    for i in range(2 ** n):\n        flag = True\n        for j in range(m):\n            c = 0\n            for k in range(n):\n                if switches[j][k] and ((i >> k) & 1):\n                    c += 1\n            if c % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    n, m = map(int, input().split())\n    bulbs = [list(map(int, input().split())) for _ in range(m)]\n    states = list(map(int, input().split()))  # \u5404\u96fb\u7403\u304c\u70b9\u706f\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\n    switches = [[False] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(1, bulbs[i][0] + 1):\n            switches[i][bulbs[i][j] - 1] = True\n    # print(switches)\n    cnt = 0\n    for i in range(2 ** n):\n        flag = True\n        for j in range(m):\n            c = 0\n            for k in range(n):\n                if switches[j][k] and ((i >> k) & 1):\n                    c += 1\n            if c % 2 != states[j]:\n                flag = False\n                break\n        if flag:\n            cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    main()\n"]