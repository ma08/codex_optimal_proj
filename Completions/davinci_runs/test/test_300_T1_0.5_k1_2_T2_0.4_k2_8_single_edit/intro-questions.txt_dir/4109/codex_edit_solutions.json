["\ndef solve(N, M, X, C, A):\n    # dp[i][j]: the minimum cost to achieve the goal when we have already read the first i books and the understanding level of the j-th algorithm is M\n    dp = [[float('inf')] * (N + 1) for _ in range(M + 1)]\n    dp[0][0] = 0\n    for i in range(1, N + 1):\n        for j in range(M + 1):\n            if j + A[i - 1] <= M:\n                dp[j + A[i - 1]][i] = min(dp[j + A[i - 1]][i], dp[j][i - 1] + C[i - 1])\n            dp[j][i] = min(dp[j][i], dp[j][i - 1])\n    if dp[M][N] == float('inf'):\n        return -1\n    return dp[M][N]\n\n\ndef main():\n    N, M, X = map(int, input().split())\n    C = [0] * N\n    A = [[0] * M for _ in range(N)]\n    for i in range(N):\n        C[i], *A[i] = map(int, input().split())\n    print(solve(N, M, X, C, A))\n\n\ndef test():\n    assert solve(3, 2, 10, [10, 2, 5], [[3, 2], [4, 1], [1, 4]]) == 7\n    assert solve(4, 3, 10, [6, 2, 3, 5], [[4, 2, 3], [3, 3, 2], [2, 3, 4], [4, 2, 1]]) == -1\n    assert solve(3, 4, 10, [5, 4, 3], [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]) == 12\n    assert solve(1, 1, 10, [100], [[10]]) == 100\n\n\nif __name__ == \"__main__\":\n    test()\n    main()\n", "\n\n# \u5168\u63a2\u7d22\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u306f\u3001\u5404\u66f8\u7c4d\u306e\u30b3\u30b9\u30c8\u306e\u7dcf\u548c\u304cX\u4ee5\u4e0a\u306b\u306a\u308b\u304b\u3069\u3046\u304b\u3067\u5224\u5b9a\u3067\u304d\u308b\n# \u3059\u3079\u3066\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u30ec\u30d9\u30eb\u304cX\u4ee5\u4e0a\u306b\u306a\u308c\u3070\u3001\u30b3\u30b9\u30c8\u304c\u6700\u5c0f\u5024\u306b\u306a\u308b\nN, M, X = map(int, input().split())  # N:\u66f8\u7c4d\u306e\u6570, M:\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u6570, X:\u6700\u4f4e\u9650\u5fc5\u8981\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u30ec\u30d9\u30eb\nA = []  # \u5404\u66f8\u7c4d\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u30ec\u30d9\u30eb\nC = []  # \u5404\u66f8\u7c4d\u306e\u30b3\u30b9\u30c8\nfor _ in range(N):  # \u5404\u66f8\u7c4d\u306b\u3064\u3044\u3066\n    c, *a = map(int, input().split())  # \u5404\u66f8\u7c4d\u306e\u30b3\u30b9\u30c8\u3068\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u30ec\u30d9\u30eb\u3092\u53d6\u5f97\n    A.append(a)  # \u5404\u66f8\u7c4d\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u30ec\u30d9\u30eb\u3092\u8ffd\u52a0\n    C.append(c)  # \u5404\u66f8\u7c4d\u306e\u30b3\u30b9\u30c8\u3092\u8ffd\u52a0\n\nfor i in range(1 << N):  # \u5168\u63a2\u7d22\n    # \u5404\u66f8\u7c4d\u306b\u3064\u3044\u3066\u3001\u30d3\u30c3\u30c8\u304c\u7acb\u3063\u3066\u3044\u308b\u3068\u8cfc\u5165\u3059\u308b\u3001\u7acb\u3063\u3066\u3044\u306a\u3044\u3068\u8cfc\u5165\u3057\u306a\u3044(\u8cb7\u3046/\u8cb7\u308f\u306a\u3044\u30922\u901a\u308a)\n    # \u3053\u306e\u6642\u3001\u5404\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3064\u3044\u3066\u3001\u8cfc\u5165\u3057\u305f\u66f8\u7c4d\u306e\u5185\u3001\u5404\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u30ec\u30d9\u30eb\u304c\u6700\u3082\u9ad8\u3044\u3082\u306e\u3092\u8db3\u3057\u5408\u308f\u305b\u308b(\u8cb7\u3046/\u8cb7\u308f\u306a\u3044\u30922\u901a\u308a)\n    # \u3053\u308c\u304cX\u4ee5\u4e0a\u306b\u306a\u308c\u3070OK(\u8cb7\u3046/\u8cb7\u308f\u306a\u3044\u30922\u901a\u308a)\n    cost = 0\n    level = [0] * M\n    for j in range(N):  # \u5404\u66f8\u7c4d\u306b\u3064\u3044\u3066\n        if i & (1 << j):  # \u8cfc\u5165\u3059\u308b\u66f8\u7c4d\u304b\u3069\u3046\u304b\n            cost += C[j]\n            for k in range(M):  # \u5404\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3064\u3044\u3066\n                level[k] = max(level[k], A[j][k])\n    if all(x >= X for x in level):  # \u3059\u3079\u3066\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u30ec\u30d9\u30eb\u304cX\u4ee5\u4e0a\u3067\u3042\u308c\u3070\n        ans = min(ans, cost)\nif ans == 10**10:\n    print(-1)\nelse:\n    print(ans)\n", "# coding: utf-8\n\n# \u5168\u63a2\u7d22\n# \u5168\u63a2\u7d22\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u306f\u3001\u5404\u66f8\u7c4d\u306e\u30b3\u30b9\u30c8\u306e\u7dcf\u548c\u304cX\u4ee5\u4e0a\u306b\u306a\u308b\u304b\u3069\u3046\u304b\u3067\u5224\u5b9a\u3067\u304d\u308b\nN, M, X = map(int, input().split())\nA = []\nC = []\nfor _ in range(N):\n    c, *a = map(int, input().split())\n    A.append(a)\n    C.append(c)\n\nans = 10**10\nfor i in range(1 << N):\n    # \u5404\u66f8\u7c4d\u306b\u3064\u3044\u3066\u3001\u30d3\u30c3\u30c8\u304c\u7acb\u3063\u3066\u3044\u308b\u3068\u8cfc\u5165\u3059\u308b\u3001\u7acb\u3063\u3066\u3044\u306a\u3044\u3068\u8cfc\u5165\u3057\u306a\u3044\n    # \u3053\u306e\u6642\u3001\u5404\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3064\u3044\u3066\u3001\u8cfc\u5165\u3057\u305f\u66f8\u7c4d\u306e\u5185\u3001\u5404\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u30ec\u30d9\u30eb\u304c\u6700\u3082\u9ad8\u3044\u3082\u306e\u3092\u8db3\u3057\u5408\u308f\u305b\u308b\n    # \u3053\u308c\u304cX\u4ee5\u4e0a\u306b\u306a\u308c\u3070OK\n    cost = 0\n    level = [0] * M\n    for j in range(N):\n        # \u8cfc\u5165\u3059\u308b\u66f8\u7c4d\n        if i & (1 << j):\n            cost += C[j]\n            for k in range(M):\n                level[k] = max(level[k], A[j][k])\n    # \u3059\u3079\u3066\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u30ec\u30d9\u30eb\u304cX\u4ee5\u4e0a\u3067\u3042\u308c\u3070\u3001\u30b3\u30b9\u30c8\u306e\u6700\u5c0f\u5024\u3092\u66f4\u65b0\u3059\u308b\n    if all(x >= X for x in level):\n        ans = min(ans, cost)\n\n# \u3059\u3079\u3066\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u30ec\u30d9\u30eb\u304cX\u4ee5\u4e0a\u306b\u306a\u308c\u3070\u3001\u30b3\u30b9\u30c8\u304c\u6700\u5c0f\u5024\u306b\u306a\u308b\nif ans == 10**10:\n    print(-1)\nelse:\n    print(ans)\n", "\n\n#\n", "\n\nimport heapq\n\n\ndef solve(N, M, X, C, A):\n    # dp[i][j]: the minimum cost to achieve the goal when we have already read the first j books and the understanding level of the i-th algorithm is x\n    dp = [[float('inf')] * (N + 1) for _ in range(M + 1)]\n    dp[0][0] = 0\n    for i in range(1, N + 1):\n        for j in range(M + 1):\n            if j + A[i - 1] <= M:\n                dp[j + A[i - 1]][i] = min(dp[j + A[i - 1]][i], dp[j][i - 1] + C[i - 1])\n            dp[j][i] = min(dp[j][i], dp[j][i - 1])\n    if dp[M][N] == float('inf'):\n        return -1\n    return dp[M][N]\n\n\ndef main():\n    N, M, X = map(int, input().split())\n    C = [0] * N\n    A = [0] * N\n    for i in range(N):\n        C[i], *A[i] = map(int, input().split())[1:]\n    print(solve(N, M, X, C, A))\n\n\ndef test():\n    assert solve(3, 2, 10, [10, 2, 5], [[3, 2], [4, 1], [1, 4]]) == 7\n    assert solve(4, 3, 10, [6, 2, 3, 5], [[4, 2, 3], [3, 3, 2], [2, 3, 4], [4, 2, 1]]) == -1\n    assert solve(3, 4, 10, [5, 4, 3], [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]) == 12\n    assert solve(1, 1, 10, [100], [[10]]) == 100\n\n\nif __name__ == \"__main__\":\n    test()\n    main()\n", "\n\nimport heapq\n\n\ndef solve(N, M, X, C, A):\n    # dp[i][j]: the minimum cost to achieve the goal when we have already read the first i books and the understanding level of the j-th algorithm is x\n    dp = [[float('inf')] * (N + 1) for _ in range(M + 1)]\n    dp[0][0] = 0\n    for i in range(1, N + 1):\n        for j in range(M + 1):\n            if j + A[i - 1] <= M:\n                dp[j + A[i - 1]][i] = min(dp[j + A[i - 1]][i], dp[j][i - 1] + C[i - 1])\n            dp[j][i] = min(dp[j][i], dp[j][i - 1])\n    if dp[M][N] == float('inf'):\n        return -1\n    return dp[M][N]\n\n\ndef main():\n    N, M, X = map(int, input().split())\n    C = [0] * N\n    A = [0] * N\n    for i in range(N):\n        C[i], *A_i = map(int, input().split())\n        A[i] = sum(A_i)\n    print(solve(N, M, X, C, A))\n\n\ndef test():\n    assert solve(3, 2, 10, [10, 2, 5], [[3, 2], [4, 1], [1, 4]]) == 7\n    assert solve(4, 3, 10, [6, 2, 3, 5], [[4, 2, 3], [3, 3, 2], [2, 3, 4], [4, 2, 1]]) == -1\n    assert solve(3, 4, 10, [5, 4, 3], [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]) == 12\n    assert solve(1, 1, 10, [100], [[10]]) == 100\n\n\nif __name__ == \"__main__\":\n    test()\n    main()\n", "\n\nimport heapq\n\n\ndef solve(N, M, X, C, A):\n    # dp[i][j]: the minimum cost to achieve the goal when we have already read the first i books and the understanding level of the j-th algorithm is M\n    dp = [[float('inf')] * (N + 1) for _ in range(M + 1)]\n    dp[0][0] = 0\n    for i in range(1, N + 1):\n        for j in range(M + 1):\n            if j + A[i - 1] <= M:\n                dp[j + A[i - 1]][i] = min(dp[j + A[i - 1]][i], dp[j][i - 1] + C[i - 1])\n            dp[j][i] = min(dp[j][i], dp[j][i - 1])\n    if dp[M][N] == float('inf'):\n        return -1\n    return dp[M][N]\n\n\ndef main():\n    N, M, X = map(int, input().split())\n    C = [0] * N\n    A = [0] * N\n    for i in range(N):\n        C[i], *A[i] = map(int, input().split())  # A[i] is a list\n    print(solve(N, M, X, C, A))\n\n\ndef test():\n    assert solve(3, 2, 10, [10, 2, 5], [[3, 2], [4, 1], [1, 4]]) == 7\n    assert solve(4, 3, 10, [6, 2, 3, 5], [[4, 2, 3], [3, 3, 2], [2, 3, 4], [4, 2, 1]]) == -1\n    assert solve(3, 4, 10, [5, 4, 3], [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]) == 12\n    assert solve(1, 1, 10, [100], [[10]]) == 100\n\n\nif __name__ == \"__main__\":\n    test()\n    main()\n", "\n\ndef solve(N, M, X, C, A, S):\n    # dp[i][j]: the minimum cost to achieve the goal when we have already read the first i books and the understanding level of the j-th algorithm is x\n    dp = [[float('inf')] * (M + 1) for _ in range(N + 1)]\n    dp[0][0] = 0\n    for i in range(1, N + 1):\n        for j in range(M + 1):\n            if j + S[i - 1] <= M:\n                dp[i][j + S[i - 1]] = min(dp[i][j + S[i - 1]], dp[i - 1][j] + C[i - 1])\n            dp[j][i] = min(dp[j][i], dp[j][i - 1])\n    if dp[N][M] == float('inf'):\n        return -1\n    return dp[N][M]\n\n\ndef main():\n    N, M, X = map(int, input().split())\n    C = [0] * N\n    A = [0] * N\n    S = [0] * N\n    for i in range(N):\n        C[i], *A[i] = map(int, input().split())[:M]\n        for j in range(M):\n            if A[i][j] >= X:\n                S[i] += 1\n    print(solve(N, M, X, C, A, S))\n\n\ndef test():\n    assert solve(3, 2, 10, [10, 2, 5], [[3, 2], [4, 1], [1, 4]], [1, 1, 0]) == 7\n    assert solve(4, 3, 10, [6, 2, 3, 5], [[4, 2, 3], [3, 3, 2], [2, 3, 4], [4, 2, 1]], [1, 1, 0, 1]) == -1\n    assert solve(3, 4, 10, [5, 4, 3], [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], [1, 1, 1]) == 12\n    assert solve(1, 1, 10, [100], [[10]], [1]) == 100\n\n\nif __name__ == \"__main__\":\n    test()\n    main()\n", "\n\nimport heapq\n\n\ndef solve(N, M, X, C, A):\n    # dp[i][j]: the minimum cost to achieve the goal when we have already read the first j books and the understanding level of the i-th algorithm is x\n    dp = [[float('inf')] * (N + 1) for _ in range(M + 1)]\n    dp[0][0] = 0\n    for i in range(1, N + 1):\n        for j in range(M + 1):\n            if j + A[i - 1] <= M:\n                dp[j + A[i - 1]][i] = min(dp[j + A[i - 1]][i], dp[j][i - 1] + C[i - 1])\n            dp[j][i] = min(dp[j][i], dp[j][i - 1])\n    if dp[M][N] == float('inf'):\n        return -1\n    return dp[M][N]\n\n\ndef main():\n    N, M, X = map(int, input().split())\n    C = [0] * N\n    A = [[0] * M for _ in range(N)]\n    for i in range(N):\n        C[i], *A[i] = map(int, input().split())\n    print(solve(N, M, X, C, A))\n\n\ndef test():\n    assert solve(3, 2, 10, [10, 2, 5], [[3, 2], [4, 1], [1, 4]]) == 7\n    assert solve(4, 3, 10, [6, 2, 3, 5], [[4, 2, 3], [3, 3, 2], [2, 3, 4], [4, 2, 1]]) == -1\n    assert solve(3, 4, 10, [5, 4, 3], [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]) == 12\n    assert solve(1, 1, 10, [100], [[10]]) == 100\n\n\nif __name__ == \"__main__\":\n    test()\n    main()\n", "\n\n# \u5168\u63a2\u7d22\n# \u5168\u63a2\u7d22\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u306f\u3001\u5404\u66f8\u7c4d\u306e\u30b3\u30b9\u30c8\u306e\u7dcf\u548c\u304cX\u4ee5\u4e0b\u306b\u306a\u308b\u304b\u3069\u3046\u304b\u3067\u5224\u5b9a\u3067\u304d\u308b\nN, M, X = map(int, input().split())\nA = []\nC = []\nfor _ in range(N):\n    c, *a = map(int, input().split())\n    A.append(a)\n    C.append(c)\n\nans = 10**10\nfor i in range(1 << N):\n    # \u5404\u66f8\u7c4d\u306b\u3064\u3044\u3066\u3001\u30d3\u30c3\u30c8\u304c\u7acb\u3063\u3066\u3044\u308b\u3068\u8cfc\u5165\u3059\u308b\u3001\u7acb\u3063\u3066\u3044\u306a\u3044\u3068\u8cfc\u5165\u3057\u306a\u3044\n    # \u3053\u306e\u6642\u3001\u5404\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3064\u3044\u3066\u3001\u8cfc\u5165\u3057\u305f\u66f8\u7c4d\u306e\u5185\u3001\u5404\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u30ec\u30d9\u30eb\u304c\u6700\u3082\u9ad8\u3044\u3082\u306e\u3092\u8db3\u3057\u5408\u308f\u305b\u308b\n    # \u3053\u308c\u304cX\u4ee5\u4e0b\u306b\u306a\u308c\u3070OK\n    cost = 0\n    level = [0] * M\n    for j in range(N):\n        # \u8cfc\u5165\u3059\u308b\u66f8\u7c4d\n        if i & (1 << j):\n            cost += C[j]\n            for k in range(M):\n                level[k] = max(level[k], A[j][k])\n    # \u3059\u3079\u3066\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u30ec\u30d9\u30eb\u304cX\u4ee5\u4e0b\u3067\u3042\u308c\u3070\u3001\u30b3\u30b9\u30c8\u306e\u6700\u5c0f\u5024\u3092\u66f4\u65b0\u3059\u308b\n    if all(x <= X for x in level):\n        ans = min(ans, cost)\n\n# \u3059\u3079\u3066\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u30ec\u30d9\u30eb\u304cX\u4ee5\u4e0b\u306b\u306a\u308c\u3070\u3001\u30b3\u30b9\u30c8\u304c\u6700\u5c0f\u5024\u306b\u306a\u308b\nif ans == 10**10:\n    print(-1)\nelse:\n    print(ans)\n", "\n# \u5168\u63a2\u7d22\n# \u5168\u63a2\u7d22\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u306f\u3001\u5404\u66f8\u7c4d\u306e\u30b3\u30b9\u30c8\u306e\u7dcf\u548c\u304cX\u4ee5\u4e0a\u306b\u306a\u308b\u304b\u3069\u3046\u304b\u3067\u5224\u5b9a\u3067\u304d\u308b\nN, M, X = map(int, input().split())\nA = []\nC = []\nfor _ in range(N):\n    c, *a = map(int, input().split())  # c\u306f\u30b3\u30b9\u30c8\u3001a\u306f\u5404\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u30ec\u30d9\u30eb\n    A.append(a)\n    C.append(c)\n\nans = 10**10\nfor i in range(1 << N):\n    # \u5404\u66f8\u7c4d\u306b\u3064\u3044\u3066\u3001\u30d3\u30c3\u30c8\u304c\u7acb\u3063\u3066\u3044\u308b\u3068\u8cfc\u5165\u3059\u308b\u3001\u7acb\u3063\u3066\u3044\u306a\u3044\u3068\u8cfc\u5165\u3057\u306a\u3044\n    # \u3053\u306e\u6642\u3001\u5404\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3064\u3044\u3066\u3001\u8cfc\u5165\u3057\u305f\u66f8\u7c4d\u306e\u5185\u3001\u5404\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u30ec\u30d9\u30eb\u304c\u6700\u3082\u9ad8\u3044\u3082\u306e\u3092\u8db3\u3057\u5408\u308f\u305b\u308b\n    # \u3053\u308c\u304cX\u4ee5\u4e0a\u306b\u306a\u308c\u3070OK\n    cost = 0\n    level = [0] * M\n    for j in range(N):\n        # \u8cfc\u5165\u3059\u308b\u66f8\u7c4d\n        if i & (1 << j):\n            cost += C[j]\n            for k in range(M):\n                level[k] = max(level[k], A[j][k])\n    # \u3059\u3079\u3066\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u30ec\u30d9\u30eb\u304cX\u4ee5\u4e0a\u3067\u3042\u308c\u3070\u3001\u30b3\u30b9\u30c8\u306e\u6700\u5c0f\u5024\u3092\u66f4\u65b0\u3059\u308b\n    if all(x >= X for x in level):\n        ans = min(ans, cost)\n\n# \u3059\u3079\u3066\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u30ec\u30d9\u30eb\u304cX\u4ee5\u4e0a\u306b\u306a\u308c\u3070\u3001\u30b3\u30b9\u30c8\u304c\u6700\u5c0f\u5024\u306b\u306a\u308b\nif ans == 10**10:\n    print(-1)\nelse:\n    print(ans)\n", "\n\n\ndef solve(N, M, X, C, A):\n    # dp[i][j]: the minimum cost to achieve the goal when we have already read the first i books and the understanding level of the j-th algorithm is x\n    dp = [[float('inf')] * (N + 1) for _ in range(M + 1)]\n    dp[0][0] = 0\n    for i in range(1, N + 1):\n        for j in range(M + 1):\n            if j + A[i - 1] <= M:\n                dp[j + A[i - 1]][i] = min(dp[j + A[i - 1]][i], dp[j][i - 1] + C[i - 1])\n            dp[j][i] = min(dp[j][i], dp[j][i - 1])\n    if dp[M][N] == float('inf'):\n        return -1\n    return dp[M][N]\n\n\ndef main():\n    N, M, X = map(int, input().split())\n    C = [0] * N\n    A = [[0] * M for _ in range(N)]\n    for i in range(N):\n        C[i], *A[i] = map(int, input().split())\n    print(solve(N, M, X, C, A))\n\n\ndef test():\n    assert solve(3, 2, 10, [10, 2, 5], [[3, 2], [4, 1], [1, 4]]) == 7\n    assert solve(4, 3, 10, [6, 2, 3, 5], [[4, 2, 3], [3, 3, 2], [2, 3, 4], [4, 2, 1]]) == -1\n    assert solve(3, 4, 10, [5, 4, 3], [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]) == 12\n    assert solve(1, 1, 10, [100], [[10]]) == 100\n\n\nif __name__ == \"__main__\":\n    test()\n    main()\n", "\n\n# \u5168\u63a2\u7d22\n# \u3059\u3079\u3066\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u30ec\u30d9\u30eb\u304cX\u4ee5\u4e0a\u306b\u306a\u308c\u3070\u3001\u30b3\u30b9\u30c8\u304c\u6700\u5c0f\u5024\u306b\u306a\u308b\n# \u5168\u63a2\u7d22\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u306f\u3001\u5404\u66f8\u7c4d\u306e\u30b3\u30b9\u30c8\u306e\u7dcf\u548c\u304cX\u4ee5\u4e0a\u306b\u306a\u308b\u304b\u3069\u3046\u304b\u3067\u5224\u5b9a\u3067\u304d\u308b\nN, M, X = map(int, input().split())\nA = []\nC = []\nfor _ in range(N):\n    c, *a = map(int, input().split())\n    A.append(a)\n    C.append(c)\n\nans = 10**10\nfor i in range(1 << N):\n    # \u5404\u66f8\u7c4d\u306b\u3064\u3044\u3066\u3001\u30d3\u30c3\u30c8\u304c\u7acb\u3063\u3066\u3044\u308b\u3068\u8cfc\u5165\u3059\u308b\u3001\u7acb\u3063\u3066\u3044\u306a\u3044\u3068\u8cfc\u5165\u3057\u306a\u3044\n    # \u3053\u306e\u6642\u3001\u5404\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3064\u3044\u3066\u3001\u8cfc\u5165\u3057\u305f\u66f8\u7c4d\u306e\u5185\u3001\u5404\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u30ec\u30d9\u30eb\u304c\u6700\u3082\u9ad8\u3044\u3082\u306e\u3092\u8db3\u3057\u5408\u308f\u305b\u308b\n    # \u3053\u308c\u304cX\u4ee5\u4e0a\u306b\u306a\u308c\u3070OK\n    cost = 0\n    level = [0] * M\n    for j in range(N):\n        # \u8cfc\u5165\u3059\u308b\u66f8\u7c4d\n        if i & (1 << j):\n            cost += C[j]\n            for k in range(M):\n                level[k] = max(level[k], A[j][k])\n    # \u3059\u3079\u3066\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u30ec\u30d9\u30eb\u304cX\u4ee5\u4e0a\u3067\u3042\u308c\u3070\u3001\u30b3\u30b9\u30c8\u306e\u6700\u5c0f\u5024\u3092\u66f4\u65b0\u3059\u308b\n    if all(x >= X for x in level):\n        ans = min(ans, cost)\n\nif ans == 10**10:\n    print(-1)\nelse:\n    print(ans)\n", "\n# \u5168\u63a2\u7d22\n# \u5168\u63a2\u7d22\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u306f\u3001\u5404\u66f8\u7c4d\u306e\u30b3\u30b9\u30c8\u306e\u7dcf\u548c\u304cX\u4ee5\u4e0a\u306b\u306a\u308b\u304b\u3069\u3046\u304b\u3067\u5224\u5b9a\u3067\u304d\u308b\nN, M, X = map(int, input().split())\nA = []\nC = []\nfor _ in range(N):\n    c, *a = map(int, input().split())\n    A.append(a)\n    C.append(c)\n\nans = 10**10\nfor i in range(1 << N):\n    # \u5404\u66f8\u7c4d\u306b\u3064\u3044\u3066\u3001\u30d3\u30c3\u30c8\u304c\u7acb\u3063\u3066\u3044\u308b\u3068\u8cfc\u5165\u3059\u308b\u3001\u7acb\u3063\u3066\u3044\u306a\u3044\u3068\u8cfc\u5165\u3057\u306a\u3044\n    # \u3053\u306e\u6642\u3001\u5404\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3064\u3044\u3066\u3001\u8cfc\u5165\u3057\u305f\u66f8\u7c4d\u306e\u5185\u3001\u5404\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u30ec\u30d9\u30eb\u304c\u6700\u3082\u9ad8\u3044\u3082\u306e\u3092\u8db3\u3057\u5408\u308f\u305b\u308b\n    # \u3053\u308c\u304cX\u4ee5\u4e0a\u306b\u306a\u308c\u3070OK\n    cost = 0\n    level = [0] * M\n    for j in range(N):\n        # \u8cfc\u5165\u3059\u308b\u66f8\u7c4d\n        if i & (1 << j):\n            cost += C[j]\n            for k in range(M):\n                level[k] = max(level[k], A[j][k])\n    # \u3059\u3079\u3066\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u30ec\u30d9\u30eb\u304cX\u4ee5\u4e0a\u3067\u3042\u308c\u3070\u3001\u30b3\u30b9\u30c8\u306e\u6700\u5c0f\u5024\u3092\u66f4\u65b0\u3059\u308b\n    if all(x >= X for x in level):\n        ans = min(ans, cost)\n\n# \u3059\u3079\u3066\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u30ec\u30d9\u30eb\u304cX\u4ee5\u4e0a\u306b\u306a\u308c\u3070\u3001\u30b3\u30b9\u30c8\u304c\u6700\u5c0f\u5024\u306b\u306a\u308b\nif ans == 10**10:\n    print(-1)\nelse:\n    print(ans)\n", "\n\ndef solve(N, M, C, A):\n    # dp[i][j]: the minimum cost to achieve the goal when we have already read the first i books and the understanding level of the j-th algorithm is x\n    dp = [[float('inf')] * (N + 1) for _ in range(M + 1)]\n    dp[0][0] = 0\n    for i in range(1, N + 1):\n        for j in range(M + 1):\n            if j + A[i - 1] <= M:\n                dp[j + A[i - 1]][i] = min(dp[j + A[i - 1]][i], dp[j][i - 1] + C[i - 1])\n            dp[j][i] = min(dp[j][i], dp[j][i - 1])\n    if dp[M][N] == float('inf') or dp[M][N] == 0:\n        return -1\n    return dp[M][N]\n\n\ndef main():\n    N, M = map(int, input().split())\n    C = [0] * N\n    A = [[0] * M for _ in range(N)]\n    for i in range(N):\n        C[i], *A[i] = map(int, input().split())\n    print(solve(N, M, X, C, A))\n\n\ndef test():\n    assert solve(3, 2, [10, 2, 5], [[3, 2], [4, 1], [1, 4]]) == 7\n    assert solve(4, 3, [6, 2, 3, 5], [[4, 2, 3], [3, 3, 2], [2, 3, 4], [4, 2, 1]]) == -1\n    assert solve(3, 4, [5, 4, 3], [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]) == 12\n    assert solve(1, 1, [100], [[10]]) == 100\n\n\nif __name__ == \"__main__\":\n    test()\n    main()\n", "\n\n# \u5168\u63a2\u7d22\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u306f\u3001\u5404\u66f8\u7c4d\u306e\u30b3\u30b9\u30c8\u306e\u7dcf\u548c\u304cX\u4ee5\u4e0a\u306b\u306a\u308b\u304b\u3069\u3046\u304b\u3067\u5224\u5b9a\u3067\u304d\u308b\nN, M, X = map(int, input().split())\nA = []\nC = []\nfor _ in range(N):\n    c, *a = map(int, input().split())\n    A.append(a)\n    C.append(c)\n\nans = 10**10\nfor i in range(1 << N):\n    # \u5404\u66f8\u7c4d\u306b\u3064\u3044\u3066\u3001\u30d3\u30c3\u30c8\u304c\u7acb\u3063\u3066\u3044\u308b\u3068\u8cfc\u5165\u3059\u308b\u3001\u7acb\u3063\u3066\u3044\u306a\u3044\u3068\u8cfc\u5165\u3057\u306a\u3044\n    # \u3053\u306e\u6642\u3001\u5404\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3064\u3044\u3066\u3001\u8cfc\u5165\u3057\u305f\u66f8\u7c4d\u306e\u5185\u3001\u5404\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u30ec\u30d9\u30eb\u304c\u6700\u3082\u9ad8\u3044\u3082\u306e\u3092\u8db3\u3057\u5408\u308f\u305b\u308b\n    # \u3053\u308c\u304cX\u4ee5\u4e0a\u306b\u306a\u308c\u3070OK\n    cost = 0\n    level = [0] * M\n    for j in range(N):\n        # \u8cfc\u5165\u3059\u308b\u66f8\u7c4d\n        if i & (1 << j):\n            cost += C[j]\n            for k in range(M):\n                level[k] = max(level[k], A[j][k])\n    # \u3059\u3079\u3066\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u30ec\u30d9\u30eb\u304cX\u4ee5\u4e0a\u3067\u3042\u308c\u3070\u3001\u30b3\u30b9\u30c8\u306e\u6700\u5c0f\u5024\u3092\u66f4\u65b0\u3059\u308b\n    if all(x >= X for x in level):\n        ans = min(ans, cost)\n\n# \u3059\u3079\u3066\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u30ec\u30d9\u30eb\u304cX\u4ee5\u4e0a\u306b\u306a\u308c\u3070\u3001\u30b3\u30b9\u30c8\u304c\u6700\u5c0f\u5024\u306b\u306a\u308b\nif ans == 10**10:\n    print(-1)\nelse:\n    print(ans)\n"]