2022-04-20 02:59:31.155494 num operations 1
2022-04-20 02:59:31.155514 size on input set 1
2022-04-20 02:59:31.155718 using api key gabby
2022-04-20 02:59:37.995133 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline()) # number of people\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest people\n    max_honest_people = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest people\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest people\n    max_honest_people = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest people\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest people\n    max_honest_people = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest people\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest people\n    max_honest_people = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest people\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest people\n    max_honest_people = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest people\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest people\n    max_honest_people = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest people\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest people\n    max_honest_people = 0\n    for i in range(1 << n):\n        # check if it is possible to have i honest people\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest people\n    max_honest_people = 0\n    for i in range(1 << n):\n        # check if it is possible to have i honest people\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650423571,
  "object": "edit"
}
2022-04-20 02:59:37.995710 fix syntax errors 8 ["\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline()) # number of people\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest people\n    max_honest_people = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest people\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest people\n    max_honest_people = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest people\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest people\n    max_honest_people = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest people\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest people\n    max_honest_people = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest people\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest people\n    max_honest_people = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest people\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest people\n    max_honest_people = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest people\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest people\n    max_honest_people = 0\n    for i in range(1 << n):\n        # check if it is possible to have i honest people\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest people\n    max_honest_people = 0\n    for i in range(1 << n):\n        # check if it is possible to have i honest people\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 02:59:37.995931 size on output set 4
2022-04-20 02:59:37.995950 num operations 1
2022-04-20 02:59:37.995960 size on input set 1
2022-04-20 02:59:37.996214 using api key derek
2022-04-20 02:59:38.037030 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 02:59:39.539000 using api key jaanu
2022-04-20 02:59:45.728809 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    \"\"\"main function\"\"\"\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    \"\"\"solve function\"\"\"\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    \"\"\"is_honest function\"\"\"\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"main function\"\"\"\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    \"\"\"solve function\"\"\"\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    \"\"\"is_honest function\"\"\"\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    \"\"\"main function.\"\"\"\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    \"\"\"solve function.\"\"\"\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    \"\"\"is_honest function.\"\"\"\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    \"\"\"main function.\"\"\"\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    \"\"\"solve function.\"\"\"\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    \"\"\"is_honest function.\"\"\"\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    \"\"\"main function\"\"\"\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    \"\"\"solve function\"\"\"\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    \"\"\"is_honest function\"\"\"\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited.copy()):\n            return False\n    return True\n\nmain()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    \"\"\"main function.\"\"\"\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    \"\"\"solve function.\"\"\"\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    \"\"\"is_honest function.\"\"\"\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    \"\"\"main function.\"\"\"\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    \"\"\"solve function.\"\"\"\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    \"\"\"is_honest function.\"\"\"\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n"
    }
  ],
  "created": 1650423579,
  "object": "edit"
}
2022-04-20 02:59:45.729222 fix syntax errors 8 ['\ndef main():\n    """main function"""\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    """solve function"""\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    """is_honest function"""\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n', '\n\ndef main():\n    """main function"""\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    """solve function"""\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    """is_honest function"""\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n', '\n\ndef main():\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n', '\n\ndef main():\n    """main function."""\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    """solve function."""\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    """is_honest function."""\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n', '\n\ndef main():\n    """main function."""\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    """solve function."""\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    """is_honest function."""\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n', '\n\ndef main():\n    """main function"""\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    """solve function"""\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    """is_honest function"""\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited.copy()):\n            return False\n    return True\n\nmain()\n', '\n\ndef main():\n    """main function."""\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    """solve function."""\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    """is_honest function."""\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n', '\n\ndef main():\n    """main function."""\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    """solve function."""\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    """is_honest function."""\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n']
2022-04-20 02:59:45.729483 size on output set 5
