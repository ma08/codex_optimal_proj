["import os\nimport sys\n\ndef write_file(filename, data):\n    with open(filename, 'w') as f:\n        f.write(data)\n\ndef read_file(filename):\n    with open(filename, 'r') as f:\n        return f.read()\n\ndef append_file(filename, data):\n    with open(filename, 'a') as f:\n        f.write(data)\n\ndef create_file(filename):\n    with open(filename, 'w') as f:\n        pass\n\ndef delete_file(filename):\n    os.remove(filename)\n\ndef main():\n    if len(sys.argv) < 2:\n        print('Usage: python file.py [create|read|write|append|delete] [filename]')\n        sys.exit(1)\n\n    command = sys.argv[1]\n    filename = sys.argv[2]\n\n    if command == 'create':\n        create_file(filename)\n    elif command == 'read':\n        print(read_file(filename))\n    elif command == 'write':\n        data = sys.argv[3]\n        write_file(filename, data)\n    elif command == 'append':\n        data = sys.argv[3]\n        append_file(filename, data)\n    elif command == 'delete':\n        delete_file(filename)\n    else:\n        print('Unknown command: {}'.format(command))\n\nif __name__ == '__main__':\n    main()\n", "const fs = require('fs');\n\n// fs.writeFileSync('file.txt', 'Hello from node.js');\n// console.log(fs.readFileSync('file.txt').toString());\n\nfs.writeFile('file.txt', 'Hello from node.js', (err) => {\n    if (err) throw err;\n    console.log('The file has been saved!');\n});\n\nfs.readFile('file.txt', (err, data) => {\n    if (err) throw err;\n    console.log(data.toString());\n});\n", "function file() {\n    return 'file';\n}\n", "\ndef main():\n    A, B, T = map(int, input().split())\n    print(B * (T // A + 1))\n\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport os\nimport sys\nimport time\n\ndef file_info(f):\n    try:\n        stat = os.stat(f)\n        return stat\n    except OSError, e:\n        sys.stderr.write(\"%s\\n\" % e)\n        return None\n\ndef file_list(d):\n    try:\n        return os.listdir(d)\n    except OSError, e:\n        sys.stderr.write(\"%s\\n\" % e)\n        return None\n\ndef file_stat(f):\n    try:\n        stat = os.stat(f)\n        mode = stat.st_mode\n        return mode\n    except OSError, e:\n        sys.stderr.write(\"%s\\n\" % e)\n        return None\n\ndef file_type(f):\n    try:\n        mode = os.stat(f).st_mode\n        if os.path.isfile(f):\n            return \"file\"\n        elif os.path.isdir(f):\n            return \"dir\"\n        elif os.path.islink(f):\n            return \"link\"\n        elif os.path.ismount(f):\n            return \"mount\"\n        elif mode & 0o170000 == 0o120000:\n            return \"socket\"\n        elif mode & 0o170000 == 0o140000:\n            return \"fifo\"\n        elif mode & 0o170000 == 0o100000:\n            return \"char_device\"\n        elif mode & 0o170000 == 0o200000:\n            return \"block_device\"\n        else:\n            return \"unknown\"\n    except OSError, e:\n        sys.stderr.write(\"%s\\n\" % e)\n        return None\n\ndef file_size(f):\n    try:\n        stat = os.stat(f)\n        return stat.st_size\n    except OSError, e:\n        sys.stderr.write(\"%s\\n\" % e)\n        return None\n\ndef file_mtime(f):\n    try:\n        stat = os.stat(f)\n        return stat.st_mtime\n    except OSError, e:\n        sys.stderr.write(\"%s\\n\" % e)\n        return None\n\ndef file_ctime(f):\n    try:\n        stat = os.stat(f)\n        return stat.st_ctime\n    except OSError, e:\n        sys.stderr.write(\"%s\\n\" % e)\n        return None\n\ndef file_atime(f):\n    try:\n        stat = os.stat(f)\n        return stat.st_atime\n    except OSError, e:\n        sys.stderr.write(\"%s\\n\" % e)\n        return None\n\ndef file_owner(f):\n    try:\n        stat = os.stat(f)\n        return stat.st_uid\n    except OSError, e:\n        sys.stderr.write(\"%s\\n\" % e)\n        return None\n\ndef file_group(f):\n    try:\n        stat = os.stat(f)\n        return stat.st_gid\n    except OSError, e:\n        sys.stderr.write(\"%s\\n\" % e)\n        return None\n\ndef file_mode(f):\n    try:\n        stat = os.stat(f)\n        return stat.st_mode\n    except OSError, e:\n        sys.stderr.write(\"%s\\n\" % e)\n        return None\n\ndef file_inode(f):\n    try:\n        stat = os.stat(f)\n        return stat.st_ino\n    except OSError, e:\n        sys.stderr.write(\"%s\\n\" % e)\n        return None\n\ndef file_dev(f):\n    try:\n        stat = os.stat(f)\n        return stat.st_dev\n    except OSError, e:\n        sys.stderr.write(\"%s\\n\" % e)\n        return None\n\ndef file_nlink(f):\n    try:\n        stat = os.stat(f)\n        return stat.st_nlink\n    except OSError, e:\n        sys.stderr.write(\"%s\\n\" % e)\n        return None\n\ndef file_block_size(f):\n    try:\n        stat = os.stat(f)\n        return stat.st_blksize\n    except OSError, e:\n        sys.stderr.write(\"%s\\n\" % e)\n        return None\n\ndef file_blocks(f):\n    try:\n        stat = os.stat(f)\n        return stat.st_blocks\n    except OSError, e:\n        sys.stderr.write(\"%s\\n\" % e)\n        return None\n\ndef file_readable(f):\n    try:\n        mode = os.stat(f).st_mode\n        if mode & 0o400 == 0o400:\n            return True\n        else:\n            return False\n    except OSError, e:\n        sys.stderr.write(\"%s\\n\" % e)\n        return None\n\ndef file_writable(f):\n    try:\n        mode = os.stat(f).st_mode\n        if mode & 0o200 == 0o200:\n            return True\n        else:\n            return False\n    except OSError, e:\n        sys.stderr.write(\"%s\\n\" % e)\n        return None\n\ndef file_executable(f):\n    try:\n        mode = os.stat(f).st_mode\n        if mode & 0o100 == 0o100:\n            return True\n        else:\n            return False\n    except OSError, e:\n        sys.stderr.write(\"%s\\n\" % e)\n        return None\n\ndef file_exists(f):\n    try:\n        os.stat(f)\n        return True\n    except OSError, e:\n        sys.stderr.write(\"%s\\n\" % e)\n        return False\n\ndef file_is_file(f):\n    try:\n        return os.path.isfile(f)\n    except OSError, e:\n        sys.stderr.write(\"%s\\n\" % e)\n        return False\n\ndef file_is_dir(f):\n    try:\n        return os.path.isdir(f)\n    except OSError, e:\n        sys.stderr.write(\"%s\\n\" % e)\n        return False\n\ndef file_is_link(f):\n    try:\n        return os.path.islink(f)\n    except OSError, e:\n        sys.stderr.write(\"%s\\n\" % e)\n        return False\n\ndef file_is_mount(f):\n    try:\n        return os.path.ismount(f)\n    except OSError, e:\n        sys.stderr.write(\"%s\\n\" % e)\n        return False\n", "#!/bin/sh\n\n# this is a comment\n\necho \"Hello World!\"\necho \"Hello      World!\"\necho \"Hello\" World!\"\necho \"Hello * World!\"\necho Hello * World!\necho Hello      World!\necho \"Hello\" World!\necho \"Hello\"*\"World!\"\necho `hello` world!\necho 'hello' world!\n", "// const fs = require('fs');\n// const path = require('path');\n// const dir = process.argv[2];\n// const ext = process.argv[3];\n\n// fs.readdir(dir, (err, list) => {\n// \tif (err) return console.log(err);\n// \tlist.forEach(file => {\n// \t\tif (path.extname(file) === `.${ext}`) {\n// \t\t\tconsole.log(file);\n// \t\t}\n// \t});\n// });\n\nconst fs = require('fs');\nconst path = require('path');\nconst dir = process.argv[2];\nconst ext = process.argv[3];\n\nfs.readdir(dir, (err, list) => {\n\tif (err) return console.log(err);\n\tlist.forEach(file => {\n\t\tif (path.extname(file) === `.${ext}`) {\n\t\t\tconsole.log(file);\n\t\t}\n\t});\n});\n", "import os\n\nos.chdir('/Users/david/Desktop')\n\nprint(os.getcwd())\n\nprint(os.listdir())\n\nos.mkdir('new_dir')\n\nos.makedirs('new_dir2/new_dir3')\n\nos.rename('new_dir2/new_dir3', 'new_dir2/new_dir4')\n\nos.rmdir('new_dir')\n\nos.removedirs('new_dir2/new_dir4')\n\nos.stat('file.py')\n\nos.stat('file.py').st_size\n\nos.stat('file.py').st_mtime\n\nfrom datetime import datetime\n\nmod_time = os.stat('file.py').st_mtime\n\nprint(datetime.fromtimestamp(mod_time))\n\nos.chdir('/Users/david/Desktop')\n\nfor dirpath, dirnames, filenames in os.walk('/Users/david/Desktop'):\n    print('Current Path:', dirpath)\n    print('Directories:', dirnames)\n    print('Files:', filenames)\n    print()\n\nprint(os.environ.get('HOME'))\n\nfile_path = os.path.join(os.environ.get('HOME'), 'test.txt')\n\nprint(file_path)\n\nos.path.basename('/tmp/test.txt')\n\nos.path.dirname('/tmp/test.txt')\n\nos.path.split('/tmp/test.txt')\n\nos.path.exists('/tmp/test.txt')\n\nos.path.isdir('/tmp/test.txt')\n\nos.path.isfile('/tmp/test.txt')\n\nos.path.splitext('/tmp/test.txt')\n\ndir(os.path)\n"]