2022-04-20 02:57:12.438775 num operations 1
2022-04-20 02:57:12.438795 size on input set 1
2022-04-20 02:57:12.439017 using api key gabby
2022-04-20 02:57:25.874685 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n, m, q = map(int, input().split())\n    abcd = [list(map(int, input().split())) for _ in range(q)]\n    abcd.sort(key=lambda x: (x[1], -x[0]))\n    dp = [[0 for _ in range(m)] for _ in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(m):\n            dp[i][j] = dp[i-1][j]\n\n    for a, b, c, d in abcd[::-1]:\n        for j in range(0, m-c+1):\n            dp[b][j] = max(dp[b][j], dp[a][j+c] + d)\n\n    print(max(dp[n]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\n\ndef main():\n    #input = sys.stdin.readline\n    N, M = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n\n    dp = [[0] * (M+1) for _ in range(N+1)]\n\n    for i in range(N):\n        for j in range(M):\n            if A[i] == B[j]:\n                dp[i+1][j+1] = dp[i][j] + 1\n            else:\n                dp[i+1][j+1] = max(dp[i+1][j], dp[i][j+1])\n\n    print(dp[N][M])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n, m, q = map(int, input().split())\n    abcd = [list(map(int, input().split())) for i in range(q)]\n    abcd.sort(key=lambda x: x[1])\n    dp = [[0 for j in range(m)] for i in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(m):\n            dp[i][j] = dp[i-1][j]\n\n    for a, b, c, d in abcd:  # a < b, c <= d\n        for j in range(m-1, c-1, -1):\n            dp[b][j] = max(dp[b][j], dp[a][j-c] + d)\n\n    print(max(dp[n]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n\ndef main():\n    n, m, q = map(int, input().split())\n    abcd = [list(map(int, input().split())) for _ in range(q)]\n    abcd.sort(key=lambda x: (x[1], -x[0]))\n    dp = [[0 for _ in range(m)] for _ in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(m):\n            dp[i][j] = dp[i-1][j]\n\n    for a, b, c, d in abcd:\n        for j in range(c, m):\n            dp[b][j] = max(dp[b][j], dp[a][j-c] + d)\n\n    print(max(dp[n]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef main():\n    n, m, q = map(int, input().split())\n    abcd = [list(map(int, input().split())) for _ in range(q)]\n    abcd.sort(key=lambda x: (x[1], -x[0]))\n    dp = [[0 for _ in range(m)] for _ in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(m):\n            dp[i][j] = dp[i-1][j]\n\n    for a, b, c, d in abcd:\n        for j in range(c, m):\n            dp[b][j] = max(dp[b][j], dp[a][j-c] + d)\n\n    print(max(dp[n]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef main():\n    n, m, q = map(int, input().split())\n    abcd = [list(map(int, input().split())) for _ in range(n)]\n    abcd.sort(key=lambda x: (x[1], x[0], x[2], x[3]))\n    dp = [[0 for _ in range(m)] for _ in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(m):\n            dp[i][j] = dp[i-1][j]\n\n    for a, b, c, d in abcd[::-1]:\n        for j in range(c, m):\n            dp[b][j] = max(dp[b][j], dp[a][j-c] + d)\n\n    print(max(dp[n]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef main():\n    n, m, q = map(int, input().split())\n    abcd = [list(map(int, input().split())) for _ in range(q)]\n    abcd.sort(key=lambda x: (x[1], x[0]))  # b\u3067\u30bd\u30fc\u30c8\u3057\u3066a\u3067\u30bd\u30fc\u30c8\n    dp = [[0 for _ in range(m)] for _ in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(m):\n            dp[i][j] = dp[i-1][j]\n\n    for a, b, c, d in abcd:  # dp\u30c6\u30fc\u30d6\u30eb\u3092\u66f4\u65b0\n        for j in range(c, m):\n            dp[b][j] = max(dp[b][j], dp[a][j-c] + d)\n\n    print(max(dp[n]))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = a[i]\n    for i in range(n-1):\n        dp[i][i+1] = max(a[i], a[i+1])\n    for k in range(2, n):\n        for i in range(n-k):\n            j = i + k\n            dp[i][j] = max(a[i] + min(dp[i+2][j], dp[i+1][j-1]), a[j] + min(dp[i+1][j-1], dp[i][j-2]))\n    print(dp[0][n-1])\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650423432,
  "object": "edit"
}
2022-04-20 02:57:25.875177 fix syntax errors 8 ["\n\ndef main():\n    n, m, q = map(int, input().split())\n    abcd = [list(map(int, input().split())) for _ in range(q)]\n    abcd.sort(key=lambda x: (x[1], -x[0]))\n    dp = [[0 for _ in range(m)] for _ in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(m):\n            dp[i][j] = dp[i-1][j]\n\n    for a, b, c, d in abcd[::-1]:\n        for j in range(0, m-c+1):\n            dp[b][j] = max(dp[b][j], dp[a][j+c] + d)\n\n    print(max(dp[n]))\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\n\ndef main():\n    #input = sys.stdin.readline\n    N, M = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n\n    dp = [[0] * (M+1) for _ in range(N+1)]\n\n    for i in range(N):\n        for j in range(M):\n            if A[i] == B[j]:\n                dp[i+1][j+1] = dp[i][j] + 1\n            else:\n                dp[i+1][j+1] = max(dp[i+1][j], dp[i][j+1])\n\n    print(dp[N][M])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m, q = map(int, input().split())\n    abcd = [list(map(int, input().split())) for i in range(q)]\n    abcd.sort(key=lambda x: x[1])\n    dp = [[0 for j in range(m)] for i in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(m):\n            dp[i][j] = dp[i-1][j]\n\n    for a, b, c, d in abcd:  # a < b, c <= d\n        for j in range(m-1, c-1, -1):\n            dp[b][j] = max(dp[b][j], dp[a][j-c] + d)\n\n    print(max(dp[n]))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m, q = map(int, input().split())\n    abcd = [list(map(int, input().split())) for _ in range(q)]\n    abcd.sort(key=lambda x: (x[1], -x[0]))\n    dp = [[0 for _ in range(m)] for _ in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(m):\n            dp[i][j] = dp[i-1][j]\n\n    for a, b, c, d in abcd:\n        for j in range(c, m):\n            dp[b][j] = max(dp[b][j], dp[a][j-c] + d)\n\n    print(max(dp[n]))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m, q = map(int, input().split())\n    abcd = [list(map(int, input().split())) for _ in range(q)]\n    abcd.sort(key=lambda x: (x[1], -x[0]))\n    dp = [[0 for _ in range(m)] for _ in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(m):\n            dp[i][j] = dp[i-1][j]\n\n    for a, b, c, d in abcd:\n        for j in range(c, m):\n            dp[b][j] = max(dp[b][j], dp[a][j-c] + d)\n\n    print(max(dp[n]))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m, q = map(int, input().split())\n    abcd = [list(map(int, input().split())) for _ in range(n)]\n    abcd.sort(key=lambda x: (x[1], x[0], x[2], x[3]))\n    dp = [[0 for _ in range(m)] for _ in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(m):\n            dp[i][j] = dp[i-1][j]\n\n    for a, b, c, d in abcd[::-1]:\n        for j in range(c, m):\n            dp[b][j] = max(dp[b][j], dp[a][j-c] + d)\n\n    print(max(dp[n]))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n, m, q = map(int, input().split())\n    abcd = [list(map(int, input().split())) for _ in range(q)]\n    abcd.sort(key=lambda x: (x[1], x[0]))  # bでソートしてaでソート\n    dp = [[0 for _ in range(m)] for _ in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(m):\n            dp[i][j] = dp[i-1][j]\n\n    for a, b, c, d in abcd:  # dpテーブルを更新\n        for j in range(c, m):\n            dp[b][j] = max(dp[b][j], dp[a][j-c] + d)\n\n    print(max(dp[n]))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = a[i]\n    for i in range(n-1):\n        dp[i][i+1] = max(a[i], a[i+1])\n    for k in range(2, n):\n        for i in range(n-k):\n            j = i + k\n            dp[i][j] = max(a[i] + min(dp[i+2][j], dp[i+1][j-1]), a[j] + min(dp[i+1][j-1], dp[i][j-2]))\n    print(dp[0][n-1])\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 02:57:25.875414 size on output set 7
