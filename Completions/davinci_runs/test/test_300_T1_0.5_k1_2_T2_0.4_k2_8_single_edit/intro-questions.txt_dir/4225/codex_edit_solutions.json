["# coding: utf-8\n\nfrom operator import itemgetter\n\ndef get_max_possible_sum(cards, K):\n    cards.sort(key=itemgetter(0), reverse=True)\n    return sum(card[0] for card in cards[:K])\n\nA, B, C, K = map(int, input().split())\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards, K))\n", "import sys\nsys.setrecursionlimit(1 << 25)\nread = sys.stdin.readline\nra = range\nenu = enumerate\n\nfrom operator import itemgetter\n\ndef get_max_possible_sum(cards):\n    cards.sort(key=itemgetter(1), reverse=True)\n    return sum(card[1] for card in cards[:K])\n\nA, B, C, K = map(int, input().split())\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards))\n", "\n# A, B, C, K = map(int, input().split())\n\n# A, B, C, K = map(int, input().split())\nA, B, C, K = 2, 1, 1, 3\n\nif K <= A:\n    print(K)\nelif K <= A + B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n", "\n\n\nfrom operator import itemgetter\n\ndef get_max_possible_sum(cards):\n    cards.sort(key=itemgetter(1), reverse=True)\n    return sum(card[1] for card in cards[:K])\n\n\nA, B, C, K = map(int, input().split())\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards))\n", "\n\nfrom collections import deque\n\ndef main():\n    N, K = map(int, input().split())\n    A = list(map(int, input().split()))\n    queue = deque([])\n\n    for i in range(N):\n        while queue and queue[-1] < A[i]:\n            queue.pop()\n        queue.append(A[i])\n        if i >= K and queue[0] == A[i - K]:\n            queue.popleft()\n        if i >= K - 1:\n            print(queue[0], end=' ')\n\nif __name__ == '__main__':\n    main()\n", "\n\nA, B, C, K = map(int, input().split())\n# A, B, C, K = 2, 1, 1, 3\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n", "\nfrom operator import itemgetter\n\ndef get_max_possible_sum(cards):\n    cards.sort(key=itemgetter(1), reverse=True)\n    return sum(card[1] for card in cards[:k])\n\na, b, c, k = map(int, input().split())\ncards = [('A', a), ('B', b), ('C', c)]\nprint(get_max_possible_sum(cards))\n", "\n\nA, B, C, K = map(int, input().split())\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n", "\nfrom operator import itemgetter\n\ndef get_max_possible_sum(cards):\n    cards.sort(key=itemgetter(1), reverse=True)\n    return sum(card[1] for card in cards[:K]) \n\nA, B, C, K = map(int, input().split())\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards))\n", "\n# A, B, C, K = map(int, input().split())\nA, B, C, K = 2, 1, 1, 3\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n", "\nfrom operator import itemgetter\n\ndef get_max_possible_sum(cards):\n    cards.sort(key=itemgetter(1), reverse=True)\n    return sum(card[1] for card in cards[:K])  # K\u756a\u76ee\u307e\u3067\u306e\u5408\u8a08\n\nA, B, C, K = map(int, input().split())\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards))\n", "\n# A, B, C, K = map(int, input().split())\nA, B, C, K = 2, 1, 1, 4\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n"]