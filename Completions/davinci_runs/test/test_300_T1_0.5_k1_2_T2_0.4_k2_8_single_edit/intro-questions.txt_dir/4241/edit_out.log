2022-04-20 03:07:26.633960 num operations 1
2022-04-20 03:07:26.633983 size on input set 1
2022-04-20 03:07:26.634226 using api key kouti
2022-04-20 03:07:34.772786 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# \u6587\u5b57\u5217\u306e\u90e8\u5206\u6587\u5b57\u5217\u3092\u6c42\u3081\u308b\u554f\u984c\u3067\u306f\uff0c\u6a2a\u65b9\u5411\u306e\u30eb\u30fc\u30d7\u3092\u7e26\u65b9\u5411\u306e\u30eb\u30fc\u30d7\u3068\u3059\u308b\u3053\u3068\u3067\uff0c\u52b9\u7387\u7684\u306b\u89e3\u304f\u3053\u3068\u304c\u3067\u304d\u308b\uff0e\n\nS = input()\nT = input()\n\nans = len(S)\nfor i in range(len(S)-len(T)+1):\n    count = 0\n    for j in range(len(T)):\n        if S[i+j] != T[j]:\n            count += 1\n    ans = min(ans, count)\n\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "\nS = input()\nT = input()\n\nans = len(S)\nfor i in range(len(S) - len(T) + 1):\n    count = 0\n    for j in range(len(T)):\n        if S[i + j] != T[j]:\n            count += 1\n    ans = min(ans, count)\n\nprint(ans)\n\n# \u6587\u5b57\u5217\u306e\u90e8\u5206\u6587\u5b57\u5217\u3092\u6c42\u3081\u308b\u554f\u984c\u3067\u306f\uff0c\u6a2a\u65b9\u5411\u306e\u30eb\u30fc\u30d7\u3092\u7e26\u65b9\u5411\u306e\u30eb\u30fc\u30d7\u3068\u3059\u308b\u3053\u3068\u3067\uff0c\u52b9\u7387\u7684\u306b\u89e3\u304f\u3053\u3068\u304c\u3067\u304d\u308b\uff0e\n"
    },
    {
      "index": 2,
      "text": "\nS = input()\nT = input()\n\nans = len(S)\nfor i in range(len(S)-len(T)+1):\n    count = 0\n    for j in range(len(T)):\n        if S[i+j] != T[j]:\n            count += 1\n    ans = min(ans, count)\nprint(ans)\n# \u6587\u5b57\u5217\u306e\u90e8\u5206\u6587\u5b57\u5217\u3092\u6c42\u3081\u308b\u554f\u984c\u3067\u306f\uff0c\u6a2a\u65b9\u5411\u306e\u30eb\u30fc\u30d7\u3092\u7e26\u65b9\u5411\u306e\u30eb\u30fc\u30d7\u3068\u3059\u308b\u3053\u3068\u3067\uff0c\u52b9\u7387\u7684\u306b\u89e3\u304f\u3053\u3068\u304c\u3067\u304d\u308b\uff0e\n"
    },
    {
      "index": 3,
      "text": "\nS = input()\nT = input()\n\nans = len(S)\nfor i in range(len(S) - len(T) + 1):\n    count = 0\n    for j in range(len(T)):\n        if S[i + j] != T[j]:\n            count += 1\n    ans = min(ans, count)\n\nprint(ans)\n\n# \u6587\u5b57\u5217\u306e\u90e8\u5206\u6587\u5b57\u5217\u3092\u6c42\u3081\u308b\u554f\u984c\u3067\u306f\uff0c\u6a2a\u65b9\u5411\u306e\u30eb\u30fc\u30d7\u3092\u7e26\u65b9\u5411\u306e\u30eb\u30fc\u30d7\u3068\u3059\u308b\u3053\u3068\u3067\uff0c\u52b9\u7387\u7684\u306b\u89e3\u304f\u3053\u3068\u304c\u3067\u304d\u308b\uff0e\n"
    },
    {
      "index": 4,
      "text": "\nS = input()\nT = input()\n\nans = len(S)\nfor i in range(len(S)-len(T)+1):\n    count = 0\n    for j in range(len(T)):\n        if S[i+j] != T[j]:\n            count += 1\n    ans = min(ans, count)\n\nprint(ans)\n\n# \u6587\u5b57\u5217\u306e\u90e8\u5206\u6587\u5b57\u5217\u3092\u6c42\u3081\u308b\u554f\u984c\u3067\u306f\uff0c\u6a2a\u65b9\u5411\u306e\u30eb\u30fc\u30d7\u3092\u7e26\u65b9\u5411\u306e\u30eb\u30fc\u30d7\u3068\u3059\u308b\u3053\u3068\u3067\uff0c\u52b9\u7387\u7684\u306b\u89e3\u304f\u3053\u3068\u304c\u3067\u304d\u308b\uff0e\n"
    },
    {
      "index": 5,
      "text": "\nS = input()\nT = input()\n\nans = len(S)\nfor i in range(len(S) - len(T) + 1):\n    count = 0\n    for j in range(len(T)):\n        if S[i + j] != T[j]:\n            count += 1\n    ans = min(ans, count)\n\nprint(ans)\n\n# \u6587\u5b57\u5217\u306e\u90e8\u5206\u6587\u5b57\u5217\u3092\u6c42\u3081\u308b\u554f\u984c\u3067\u306f\uff0c\u6a2a\u65b9\u5411\u306e\u30eb\u30fc\u30d7\u3092\u7e26\u65b9\u5411\u306e\u30eb\u30fc\u30d7\u3068\u3059\u308b\u3053\u3068\u3067\uff0c\u52b9\u7387\u7684\u306b\u89e3\u304f\u3053\u3068\u304c\u3067\u304d\u308b\uff0e\n"
    },
    {
      "index": 6,
      "text": "\n\nS = input()\nT = input()\n\nans = len(S)\nfor i in range(len(S)-len(T)+1):\n    count = 0\n    for j in range(len(T)):\n        if S[i+j] != T[j]:\n            count += 1\n    ans = min(ans, count)\n\nprint(ans)\n"
    },
    {
      "index": 7,
      "text": "\nS = input()\nT = input()\n\nans = len(S)\nfor i in range(len(S)-len(T)+1):\n    count = 0\n    for j in range(len(T)):\n        if S[i+j] != T[j]:\n            count += 1\n    ans = min(ans, count)\n\nprint(ans)\n\n# \u6587\u5b57\u5217\u306e\u90e8\u5206\u6587\u5b57\u5217\u3092\u6c42\u3081\u308b\u554f\u984c\u3067\u306f\uff0c\u6a2a\u65b9\u5411\u306e\u30eb\u30fc\u30d7\u3092\u7e26\u65b9\u5411\u306e\u30eb\u30fc\u30d7\u3068\u3059\u308b\u3053\u3068\u3067\uff0c\u52b9\u7387\u7684\u306b\u89e3\u304f\u3053\u3068\u304c\u3067\u304d\u308b\uff0e\n"
    }
  ],
  "created": 1650424046,
  "object": "edit"
}
2022-04-20 03:07:34.773190 fix syntax errors 8 ['\n# 文字列の部分文字列を求める問題では，横方向のループを縦方向のループとすることで，効率的に解くことができる．\n\nS = input()\nT = input()\n\nans = len(S)\nfor i in range(len(S)-len(T)+1):\n    count = 0\n    for j in range(len(T)):\n        if S[i+j] != T[j]:\n            count += 1\n    ans = min(ans, count)\n\nprint(ans)\n', '\nS = input()\nT = input()\n\nans = len(S)\nfor i in range(len(S) - len(T) + 1):\n    count = 0\n    for j in range(len(T)):\n        if S[i + j] != T[j]:\n            count += 1\n    ans = min(ans, count)\n\nprint(ans)\n\n# 文字列の部分文字列を求める問題では，横方向のループを縦方向のループとすることで，効率的に解くことができる．\n', '\nS = input()\nT = input()\n\nans = len(S)\nfor i in range(len(S)-len(T)+1):\n    count = 0\n    for j in range(len(T)):\n        if S[i+j] != T[j]:\n            count += 1\n    ans = min(ans, count)\nprint(ans)\n# 文字列の部分文字列を求める問題では，横方向のループを縦方向のループとすることで，効率的に解くことができる．\n', '\nS = input()\nT = input()\n\nans = len(S)\nfor i in range(len(S) - len(T) + 1):\n    count = 0\n    for j in range(len(T)):\n        if S[i + j] != T[j]:\n            count += 1\n    ans = min(ans, count)\n\nprint(ans)\n\n# 文字列の部分文字列を求める問題では，横方向のループを縦方向のループとすることで，効率的に解くことができる．\n', '\nS = input()\nT = input()\n\nans = len(S)\nfor i in range(len(S)-len(T)+1):\n    count = 0\n    for j in range(len(T)):\n        if S[i+j] != T[j]:\n            count += 1\n    ans = min(ans, count)\n\nprint(ans)\n\n# 文字列の部分文字列を求める問題では，横方向のループを縦方向のループとすることで，効率的に解くことができる．\n', '\nS = input()\nT = input()\n\nans = len(S)\nfor i in range(len(S) - len(T) + 1):\n    count = 0\n    for j in range(len(T)):\n        if S[i + j] != T[j]:\n            count += 1\n    ans = min(ans, count)\n\nprint(ans)\n\n# 文字列の部分文字列を求める問題では，横方向のループを縦方向のループとすることで，効率的に解くことができる．\n', '\n\nS = input()\nT = input()\n\nans = len(S)\nfor i in range(len(S)-len(T)+1):\n    count = 0\n    for j in range(len(T)):\n        if S[i+j] != T[j]:\n            count += 1\n    ans = min(ans, count)\n\nprint(ans)\n', '\nS = input()\nT = input()\n\nans = len(S)\nfor i in range(len(S)-len(T)+1):\n    count = 0\n    for j in range(len(T)):\n        if S[i+j] != T[j]:\n            count += 1\n    ans = min(ans, count)\n\nprint(ans)\n\n# 文字列の部分文字列を求める問題では，横方向のループを縦方向のループとすることで，効率的に解くことができる．\n']
2022-04-20 03:07:34.773279 size on output set 5
2022-04-20 03:07:34.773299 num operations 1
2022-04-20 03:07:34.773308 size on input set 1
2022-04-20 03:07:34.773558 using api key jaanu
2022-04-20 03:07:42.828810 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef min_changes(s, t):\n    count = 0\n    for i in range(len(s)):\n        if s[i] != t[i] and t[i] != '?':\n            count += 1\n\n    return count\n\ndef main():\n    s = input()\n    t = input()\n    print(min_changes(s, t))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef min_changes(s, t, k):\n    if k < abs(len(s) - len(t)):\n        return -1\n    else:\n        count = 0\n        for i in range(len(t)):\n            if s[i] != t[i]:\n                count += 1\n        return count\n\ndef main():\n    s = input()\n    t = input()\n    k = int(input())\n    print(min_changes(s, t, k))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef min_changes(s, t):\n    return sum(s[i] != t[i] for i in range(len(t)))\n\n\ndef main():\n    s = input()\n    t = input()\n    print(min_changes(s, t))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 3,
      "text": "#!/usr/bin/env python3\n\ndef min_changes(s, t):\n    count = 0\n    for i in range(len(t)):\n        if s[i] != t[i]:\n            count += 1\n    return count\n\ndef main():\n    s = input()\n    t = input()\n    print(min_changes(s, t))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef min_changes(s, t):\n    count = 0\n    for i in range(len(s)):\n        if s[i] != t[i] and s[i] != '?' and t[i] != '?':\n            count += 1\n    return count\n\ndef main():\n    s = input()\n    t = input()\n    print(min_changes(s, t))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 5,
      "text": "\ndef min_changes(s, t):\n    count = 0\n    for i in range(len(t)):\n        if s[i] != t[i]:\n            count += 1\n    return count\n\ndef main():\n    s = input() # input string\n    t = input() # target string\n    print(min_changes(s, t))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 6,
      "text": "\ndef min_changes(s, t):\n    count = 0\n    for i in range(len(t)):\n        if s[i] != t[i]:\n            count += 1\n    return count\n\ndef main():\n    s = input()\n    t = input()\n    print(min_changes(s, t))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 7,
      "text": "\ndef min_changes(s, t):\n    count = 0\n    for i in range(len(t)):\n        if s[i] != t[i]:\n            count += 1\n    return count\n\ndef main():\n    s = input()\n    t = input()\n    print(min_changes(s, t))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650424054,
  "object": "edit"
}
2022-04-20 03:07:42.829296 fix syntax errors 8 ["\n\ndef min_changes(s, t):\n    count = 0\n    for i in range(len(s)):\n        if s[i] != t[i] and t[i] != '?':\n            count += 1\n\n    return count\n\ndef main():\n    s = input()\n    t = input()\n    print(min_changes(s, t))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef min_changes(s, t, k):\n    if k < abs(len(s) - len(t)):\n        return -1\n    else:\n        count = 0\n        for i in range(len(t)):\n            if s[i] != t[i]:\n                count += 1\n        return count\n\ndef main():\n    s = input()\n    t = input()\n    k = int(input())\n    print(min_changes(s, t, k))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef min_changes(s, t):\n    return sum(s[i] != t[i] for i in range(len(t)))\n\n\ndef main():\n    s = input()\n    t = input()\n    print(min_changes(s, t))\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\ndef min_changes(s, t):\n    count = 0\n    for i in range(len(t)):\n        if s[i] != t[i]:\n            count += 1\n    return count\n\ndef main():\n    s = input()\n    t = input()\n    print(min_changes(s, t))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef min_changes(s, t):\n    count = 0\n    for i in range(len(s)):\n        if s[i] != t[i] and s[i] != '?' and t[i] != '?':\n            count += 1\n    return count\n\ndef main():\n    s = input()\n    t = input()\n    print(min_changes(s, t))\n\nif __name__ == '__main__':\n    main()\n", "\ndef min_changes(s, t):\n    count = 0\n    for i in range(len(t)):\n        if s[i] != t[i]:\n            count += 1\n    return count\n\ndef main():\n    s = input() # input string\n    t = input() # target string\n    print(min_changes(s, t))\n\nif __name__ == '__main__':\n    main()\n", "\ndef min_changes(s, t):\n    count = 0\n    for i in range(len(t)):\n        if s[i] != t[i]:\n            count += 1\n    return count\n\ndef main():\n    s = input()\n    t = input()\n    print(min_changes(s, t))\n\nif __name__ == '__main__':\n    main()\n", "\ndef min_changes(s, t):\n    count = 0\n    for i in range(len(t)):\n        if s[i] != t[i]:\n            count += 1\n    return count\n\ndef main():\n    s = input()\n    t = input()\n    print(min_changes(s, t))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 03:07:42.829370 size on output set 7
