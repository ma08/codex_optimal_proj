["\nN, M = map(int, input().split())\nprint(N * M)\n", "\ndef sum_even_ways(N, M):\n    return N * M\n\nN, M = [int(x) for x in input().split()]\nprint(sum_even_ways(N, M))\n", "\ndef sum_even_ways(N, M):\n    return N*M\n\nN, M = [int(x) for x in input().split()]\nprint(sum_even_ways(N, M))\n", "\n#\nN, M = map(int, input().split())\n\nprint(N * M)\n", "\nn, m = map(int, input().split())\nprint(n * m)\n", "\n\ndef sum_even_ways(N):\n    return N*(N+1)//2\n\nN = int(input())\nprint(sum_even_ways(N))\n", "\n\ndef sum_even_ways(N, M):\n    return (N*M)\n\nN, M = [int(x) for x in input().split()]\nprint(sum_even_ways(N, M))\n", "import sys\n\nN, M = map(int, input().split())\nif N == 0 or M == 0:\n    sys.exit()\n\n\nprint(N * M)\n", "\n\ndef sum_even_ways(N, M):\n    return N * M\n\n\nN, M = [int(x) for x in input().split()]\nprint(sum_even_ways(N, M))\n", "\n\ndef sum_even_ways(N, M):\n    return N*M+1\n\nN, M = [int(x) for x in input().split()]\nprint(sum_even_ways(N, M))\n", "\n\ndef sum_even_ways(N, M):\n    return N * M\n\n\nN, M = [int(x) for x in input().split()]\nprint(sum_even_ways(N, M)\n", "\nN, M = map(int, input().split())\n\nprint(N * M)\n", "\n\ndef sum_even_ways(n, m):\n    return n*m\n\nn, m = [int(x) for x in input().split()]\nprint(sum_even_ways(n, m))\n"]