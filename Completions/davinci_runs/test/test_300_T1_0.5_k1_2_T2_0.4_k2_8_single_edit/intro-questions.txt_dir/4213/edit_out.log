2022-04-20 02:57:26.508936 num operations 1
2022-04-20 02:57:26.508962 size on input set 1
2022-04-20 02:57:26.509210 using api key jaanu
2022-04-20 02:57:34.962603 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nN = int(input())\nA = list(map(int, input().split()))\n\n# 2\u6b21\u5143\u914d\u5217\u306b\u307e\u3068\u3081\u308b\nA_list = []\nfor i in range(N):\n    A_list.append([A[i], i])\n\n# \u5c0f\u3055\u3044\u9806\u306b\u30bd\u30fc\u30c8\u3059\u308b\nA_list.sort(key=lambda x:x[0])\n\n# \u6700\u5c0f\u5024\u3068\u6700\u5927\u5024\u306e\u7d76\u5bfe\u5024\u3092\u6c42\u3081\u308b\nmin_value = A_list[0][1]\nmax_value = A_list[-1][1]\n\nprint(max(max_value - min_value, N - 1 - min_value + max_value))\n"
    },
    {
      "index": 1,
      "text": "\n# \u6a19\u6e96\u5165\u529b\u304b\u3089\u6570\u5024\u3092\u53d7\u3051\u53d6\u308b\n\n# \u6a19\u6e96\u5165\u529b\u304b\u3089\u6570\u5024\u3092\u53d7\u3051\u53d6\u308b\nN = int(input())\nA = list(map(int, input().split()))\n\n# 2\u6b21\u5143\u914d\u5217\u306b\u307e\u3068\u3081\u308b(A[i], i)\nA_list = []\nfor i in range(N):\n    A_list.append([A[i], i])\n\n# \u5c0f\u3055\u3044\u9806\u306b\u30bd\u30fc\u30c8\u3059\u308b\nA_list.sort(key=lambda x:x[0])\n\n# \u6700\u5c0f\u5024\u3068\u6700\u5927\u5024\u306e\u7d76\u5bfe\u5024\u3092\u6c42\u3081\u308b\nmin_value = A_list[0][1]\nmax_value = A_list[-1][1]\n\nprint(max(max_value-min_value, N-1-min_value+max_value))\n"
    },
    {
      "index": 2,
      "text": "\nN = int(input())\nA = list(map(int, input().split()))\n\n# 2\u6b21\u5143\u914d\u5217\u306b\u307e\u3068\u3081\u308b\nA_list = []\nfor i in range(N):\n    A_list.append([A[i], i])\n\n# \u5c0f\u3055\u3044\u9806\u306b\u30bd\u30fc\u30c8\u3059\u308b\nA_list.sort(key=lambda x:x[0])\n\n# \u6700\u5c0f\u5024\u3068\u6700\u5927\u5024\u306e\u7d76\u5bfe\u5024\u3092\u6c42\u3081\u308b\nmin_value = A_list[0][1]\nmax_value = A_list[-1][1]\n\nprint(max(max_value-min_value, N-1-min_value+max_value))\n"
    },
    {
      "index": 3,
      "text": "\nN = int(input())\nA = list(map(int, input().split()))\n\n# 2\u6b21\u5143\u914d\u5217\u306b\u307e\u3068\u3081\u308b\nA_list = []\nfor i in range(N):\n    A_list.append([A[i], i])\n\n# \u5c0f\u3055\u3044\u9806\u306b\u30bd\u30fc\u30c8\u3059\u308b\nA_list.sort(key=lambda x:x[0])\n\n# \u6700\u5c0f\u5024\u3068\u6700\u5927\u5024\u306e\u7d76\u5bfe\u5024\u3092\u6c42\u3081\u308b\nmin_value = A_list[0][1]\nmax_value = A_list[-1][1]\n\nprint(max(max_value-min_value, N-1-min_value+max_value))\n"
    },
    {
      "index": 4,
      "text": "\nN = int(input())\nA = list(map(int, input().split()))\n\n# 2\u6b21\u5143\u914d\u5217\u306b\u307e\u3068\u3081\u308b\nA_list = []\nfor i in range(N):\n    A_list.append([A[i], i])\n\n# \u5c0f\u3055\u3044\u9806\u306b\u30bd\u30fc\u30c8\u3059\u308b\nA_list.sort(key=lambda x:x[0])\n\n# \u6700\u5c0f\u5024\u3068\u6700\u5927\u5024\u306e\u7d76\u5bfe\u5024\u3092\u6c42\u3081\u308b\nmin_value = A_list[0][1]\nmax_value = A_list[-1][1]\n\nprint(max(max_value-min_value, N-1-min_value+max_value))\n"
    },
    {
      "index": 5,
      "text": "\nN = int(input())\nA = list(map(int, input().split()))\n\n# 2\u6b21\u5143\u914d\u5217\u306b\u307e\u3068\u3081\u308b\nA_list = []\nfor i in range(N):\n    A_list.append([A[i], i])\n\n# \u5c0f\u3055\u3044\u9806\u306b\u30bd\u30fc\u30c8\u3059\u308b\nA_list.sort(key=lambda x:x[0])\n\n# \u6700\u5c0f\u5024\u3068\u6700\u5927\u5024\u306e\u7d76\u5bfe\u5024\u3092\u6c42\u3081\u308b\nmin_value = A_list[0][1]\nmax_value = A_list[-1][1]\n\nprint(max(max_value-min_value, N-1-min_value+max_value))\n"
    },
    {
      "index": 6,
      "text": "\nN = int(input())\nA = list(map(int, input().split()))\n\n# 2\u6b21\u5143\u914d\u5217\u306b\u307e\u3068\u3081\u308b\nA_list = []\nfor i in range(N):\n    A_list.append([A[i], i])\n\n# \u5c0f\u3055\u3044\u9806\u306b\u30bd\u30fc\u30c8\u3059\u308b\nA_list.sort(key=lambda x:x[0])\n\n# \u6700\u5c0f\u5024\u3068\u6700\u5927\u5024\u306e\u7d76\u5bfe\u5024\u3092\u6c42\u3081\u308b\nmin_value = A_list[0][1]\nmax_value = A_list[-1][1]\n\nprint(max(max_value-min_value, N-1-min_value+max_value))\n"
    },
    {
      "index": 7,
      "text": "\nN = int(input())\nA = list(map(int, input().split()))\n\n# 2\u6b21\u5143\u914d\u5217\u306b\u307e\u3068\u3081\u308b\nA_list = []\nfor i in range(N):\n    A_list.append([A[i], i])\n\n# \u5c0f\u3055\u3044\u9806\u306b\u30bd\u30fc\u30c8\u3059\u308b\nA_list.sort(key=lambda x:x[0])\n\n# \u6700\u5c0f\u5024\u3068\u6700\u5927\u5024\u306e\u7d76\u5bfe\u5024\u3092\u6c42\u3081\u308b\nmin_value = A_list[0][1]\nmax_value = A_list[-1][1]\n\nprint(max(max_value-min_value, N-1-min_value+max_value))\n"
    }
  ],
  "created": 1650423446,
  "object": "edit"
}
2022-04-20 02:57:34.963030 fix syntax errors 8 ['\n\nN = int(input())\nA = list(map(int, input().split()))\n\n# 2次元配列にまとめる\nA_list = []\nfor i in range(N):\n    A_list.append([A[i], i])\n\n# 小さい順にソートする\nA_list.sort(key=lambda x:x[0])\n\n# 最小値と最大値の絶対値を求める\nmin_value = A_list[0][1]\nmax_value = A_list[-1][1]\n\nprint(max(max_value - min_value, N - 1 - min_value + max_value))\n', '\n# 標準入力から数値を受け取る\n\n# 標準入力から数値を受け取る\nN = int(input())\nA = list(map(int, input().split()))\n\n# 2次元配列にまとめる(A[i], i)\nA_list = []\nfor i in range(N):\n    A_list.append([A[i], i])\n\n# 小さい順にソートする\nA_list.sort(key=lambda x:x[0])\n\n# 最小値と最大値の絶対値を求める\nmin_value = A_list[0][1]\nmax_value = A_list[-1][1]\n\nprint(max(max_value-min_value, N-1-min_value+max_value))\n', '\nN = int(input())\nA = list(map(int, input().split()))\n\n# 2次元配列にまとめる\nA_list = []\nfor i in range(N):\n    A_list.append([A[i], i])\n\n# 小さい順にソートする\nA_list.sort(key=lambda x:x[0])\n\n# 最小値と最大値の絶対値を求める\nmin_value = A_list[0][1]\nmax_value = A_list[-1][1]\n\nprint(max(max_value-min_value, N-1-min_value+max_value))\n', '\nN = int(input())\nA = list(map(int, input().split()))\n\n# 2次元配列にまとめる\nA_list = []\nfor i in range(N):\n    A_list.append([A[i], i])\n\n# 小さい順にソートする\nA_list.sort(key=lambda x:x[0])\n\n# 最小値と最大値の絶対値を求める\nmin_value = A_list[0][1]\nmax_value = A_list[-1][1]\n\nprint(max(max_value-min_value, N-1-min_value+max_value))\n', '\nN = int(input())\nA = list(map(int, input().split()))\n\n# 2次元配列にまとめる\nA_list = []\nfor i in range(N):\n    A_list.append([A[i], i])\n\n# 小さい順にソートする\nA_list.sort(key=lambda x:x[0])\n\n# 最小値と最大値の絶対値を求める\nmin_value = A_list[0][1]\nmax_value = A_list[-1][1]\n\nprint(max(max_value-min_value, N-1-min_value+max_value))\n', '\nN = int(input())\nA = list(map(int, input().split()))\n\n# 2次元配列にまとめる\nA_list = []\nfor i in range(N):\n    A_list.append([A[i], i])\n\n# 小さい順にソートする\nA_list.sort(key=lambda x:x[0])\n\n# 最小値と最大値の絶対値を求める\nmin_value = A_list[0][1]\nmax_value = A_list[-1][1]\n\nprint(max(max_value-min_value, N-1-min_value+max_value))\n', '\nN = int(input())\nA = list(map(int, input().split()))\n\n# 2次元配列にまとめる\nA_list = []\nfor i in range(N):\n    A_list.append([A[i], i])\n\n# 小さい順にソートする\nA_list.sort(key=lambda x:x[0])\n\n# 最小値と最大値の絶対値を求める\nmin_value = A_list[0][1]\nmax_value = A_list[-1][1]\n\nprint(max(max_value-min_value, N-1-min_value+max_value))\n', '\nN = int(input())\nA = list(map(int, input().split()))\n\n# 2次元配列にまとめる\nA_list = []\nfor i in range(N):\n    A_list.append([A[i], i])\n\n# 小さい順にソートする\nA_list.sort(key=lambda x:x[0])\n\n# 最小値と最大値の絶対値を求める\nmin_value = A_list[0][1]\nmax_value = A_list[-1][1]\n\nprint(max(max_value-min_value, N-1-min_value+max_value))\n']
2022-04-20 02:57:34.963142 size on output set 3
2022-04-20 02:57:34.963159 num operations 1
2022-04-20 02:57:34.963168 size on input set 1
2022-04-20 02:57:34.963426 using api key gabby
2022-04-20 02:57:46.828367 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\nA = list(map(int, sys.stdin.readline().rstrip().split()))\n\nA.sort()\n\nprint(A[N-1] - A[0])\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\nA = list(map(int, sys.stdin.readline().rstrip().split()))\nA.sort()\nprint(A[N-1] - A[0])\n"
    },
    {
      "index": 2,
      "text": "\n\nfrom collections import deque\n\nN, M = map(int, input().split())\n\ngraph = [[] for _ in range(N)]\nfor _ in range(M):\n    a, b = map(int, input().split())\n    graph[a-1].append(b-1)\n    graph[b-1].append(a-1)\n\ndist = [-1] * N\ndist[0] = 0\nq = deque([0])\nwhile q:\n    v = q.popleft()\n    for nv in graph[v]:\n        if dist[nv] != -1:\n            continue\n        dist[nv] = v\n        q.append(nv)\n\nif -1 in dist:\n    print('No')\n    exit()\n\nprint('Yes')\nfor d in dist[1:]:\n    print(d+1)\n"
    },
    {
      "index": 3,
      "text": "\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\nA = list(map(int, sys.stdin.readline().rstrip().split()))\n\nA.sort()\nprint(A[N - 1] - A[0])\n"
    },
    {
      "index": 4,
      "text": "\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\nA = list(map(int, sys.stdin.readline().rstrip().split()))\n\nA.sort()\n\nprint(A[N-1] - A[0])\n"
    },
    {
      "index": 5,
      "text": "\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\nA = list(map(int, sys.stdin.readline().rstrip().split()))\n\nA.sort()\n\nprint(A[N - 1] - A[0])\n"
    },
    {
      "index": 6,
      "text": "\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\nA = list(map(int, sys.stdin.readline().rstrip().split()))\nA.sort()\nprint(A[N-1] - A[0])\n"
    },
    {
      "index": 7,
      "text": "\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\nA = list(map(int, sys.stdin.readline().rstrip().split()))\n\nA.sort()\n\nprint(A[N-1] - A[0])\n"
    }
  ],
  "created": 1650423455,
  "object": "edit"
}
2022-04-20 02:57:46.828875 fix syntax errors 8 ['\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\nA = list(map(int, sys.stdin.readline().rstrip().split()))\n\nA.sort()\n\nprint(A[N-1] - A[0])\n', '\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\nA = list(map(int, sys.stdin.readline().rstrip().split()))\nA.sort()\nprint(A[N-1] - A[0])\n', "\n\nfrom collections import deque\n\nN, M = map(int, input().split())\n\ngraph = [[] for _ in range(N)]\nfor _ in range(M):\n    a, b = map(int, input().split())\n    graph[a-1].append(b-1)\n    graph[b-1].append(a-1)\n\ndist = [-1] * N\ndist[0] = 0\nq = deque([0])\nwhile q:\n    v = q.popleft()\n    for nv in graph[v]:\n        if dist[nv] != -1:\n            continue\n        dist[nv] = v\n        q.append(nv)\n\nif -1 in dist:\n    print('No')\n    exit()\n\nprint('Yes')\nfor d in dist[1:]:\n    print(d+1)\n", '\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\nA = list(map(int, sys.stdin.readline().rstrip().split()))\n\nA.sort()\nprint(A[N - 1] - A[0])\n', '\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\nA = list(map(int, sys.stdin.readline().rstrip().split()))\n\nA.sort()\n\nprint(A[N-1] - A[0])\n', '\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\nA = list(map(int, sys.stdin.readline().rstrip().split()))\n\nA.sort()\n\nprint(A[N - 1] - A[0])\n', '\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\nA = list(map(int, sys.stdin.readline().rstrip().split()))\nA.sort()\nprint(A[N-1] - A[0])\n', '\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\nA = list(map(int, sys.stdin.readline().rstrip().split()))\n\nA.sort()\n\nprint(A[N-1] - A[0])\n']
2022-04-20 02:57:46.828944 size on output set 5
