2022-04-20 01:43:36.170469 num operations 1
2022-04-20 01:43:36.170490 size on input set 1
2022-04-20 01:43:36.170707 using api key sunu
2022-04-20 01:43:56.413199 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nt = int(input())\n\nfor i in range(t):\n    n, m = [int(x) for x in input().split()]\n    \n    tiles = []\n    \n    for j in range(n * 2):\n        tiles.append([int(x) for x in input().split()])\n    \n    tiles.sort()\n    \n    for j in range(n):\n        for k in range(n):\n            if tiles[j][0] == tiles[k][2] and tiles[j][2] == tiles[k][0]:\n                tiles[j][0], tiles[k][0] = tiles[k][0], tiles[j][0]\n                tiles[j][2], tiles[k][2] = tiles[k][2], tiles[j][2]\n            if tiles[j][1] == tiles[k][3] and tiles[j][3] == tiles[k][1]:\n                tiles[j][1], tiles[k][1] = tiles[k][1], tiles[j][1]\n                tiles[j][3], tiles[k][3] = tiles[k][3], tiles[j][3]\n\n    if m % 2 == 0:\n        if m == 2:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"YES\")\n    else:\n        if m == 1:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n"
    },
    {
      "index": 1,
      "text": "\n\nt = int(input(\"\"))\n\nfor i in range(t):\n    n, m = [int(x) for x in input(\"\").split()]\n    \n    tiles = []\n    \n    for j in range(n):\n        tiles.append([int(x) for x in input(\"\").split()])\n        \n    for j in range(n):\n        tiles.append([int(x) for x in input(\"\").split()])\n    \n    tiles.sort()\n    \n    for j in range(n):\n        for k in range(n):\n            if tiles[j][0] == tiles[k][2] and tiles[j][2] == tiles[k][0]:\n                tiles[j][0], tiles[k][0] = tiles[k][0], tiles[j][0]\n                tiles[j][2], tiles[k][2] = tiles[k][2], tiles[j][2]\n            if tiles[j][1] == tiles[k][3] and tiles[j][3] == tiles[k][1]:\n                tiles[j][1], tiles[k][1] = tiles[k][1], tiles[j][1]\n                tiles[j][3], tiles[k][3] = tiles[k][3], tiles[j][3]\n\n    if m % 2 == 0:\n        if m == 2:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print(\"YES\", end = \"\\n\")\n            else:\n                print(\"NO\", end = \"\\n\")\n        else:\n            print(\"YES\", end = \"\\n\")\n    else:\n        if m == 1:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print(\"YES\", end = \"\\n\")\n            else:\n                print(\"NO\")\n        else:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print(\"YES\", end = \"\\n\")\n            else:\n                print(\"NO\", end = \"\\n\")\n"
    },
    {
      "index": 2,
      "text": "\nt = int(input())\n\nfor i in range(t):\n    n, m = [int(x) for x in input().split()]\n\n    tiles = []\n\n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n\n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n\n    tiles.sort()\n\n    for j in range(n):\n        for k in range(n):\n            if tiles[j][0] == tiles[k][2] and tiles[j][2] == tiles[k][0]:\n                tiles[j][0], tiles[k][0] = tiles[k][0], tiles[j][0]\n                tiles[j][2], tiles[k][2] = tiles[k][2], tiles[j][2]\n            if tiles[j][1] == tiles[k][3] and tiles[j][3] == tiles[k][1]:\n                tiles[j][1], tiles[k][1] = tiles[k][1], tiles[j][1]\n                tiles[j][3], tiles[k][3] = tiles[k][3], tiles[j][3]\n\n    if m % 2 == 0:\n        if m == 2:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"YES\")\n    else:\n        if m == 1:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n"
    },
    {
      "index": 3,
      "text": "\n\nt = int(input())\n\nfor i in range(t):\n    n, m = [int(x) for x in input().split()]\n    \n    tiles = []\n    \n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n        \n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n    \n    for j in range(n):\n        for k in range(n):\n            if tiles[j][0] == tiles[k][2]:\n                tiles[j][0], tiles[k][2] = tiles[k][2], tiles[j][0]\n            if tiles[j][1] == tiles[k][3]:\n                tiles[j][1], tiles[k][3] = tiles[k][3], tiles[j][1]\n            if tiles[j][2] == tiles[k][0]:\n                tiles[j][2], tiles[k][0] = tiles[k][0], tiles[j][2]\n            if tiles[j][3] == tiles[k][1]:\n                tiles[j][3], tiles[k][1] = tiles[k][1], tiles[j][3]\n\n    if m % 2 == 0:\n        if m == 2:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"YES\")\n    else:\n        if m == 1:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n"
    },
    {
      "index": 4,
      "text": "\n\nt = int(input())\n\nfor i in range(t):\n    n, m = map(int, input().split())\n    \n    tiles = []\n    \n    for j in range(n):\n        tiles.append(list(map(int, input().split())))\n        \n    for j in range(n):\n        tiles.append(list(map(int, input().split())))\n    \n    tiles.sort()\n    \n    for j in range(n):\n        for k in range(n):\n            if tiles[j][0] == tiles[k][2] and tiles[j][2] == tiles[k][0]:\n                tiles[j][0], tiles[k][0] = tiles[k][0], tiles[j][0]\n                tiles[j][2], tiles[k][2] = tiles[k][2], tiles[j][2]\n            if tiles[j][1] == tiles[k][3] and tiles[j][3] == tiles[k][1]:\n                tiles[j][1], tiles[k][1] = tiles[k][1], tiles[j][1]\n                tiles[j][3], tiles[k][3] = tiles[k][3], tiles[j][3]\n\n    if m % 2 == 0:\n        if m == 2:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"YES\")\n    else:\n        if m == 1:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n"
    },
    {
      "index": 5,
      "text": "\n\nt = int(input())\n\nfor i in range(t):\n    n, m = [int(x) for x in input().split()]\n    \n    tiles = []\n    \n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n        \n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n    \n    tiles.sort()\n    \n    for j in range(n):\n        for k in range(n):\n            if tiles[j][0] == tiles[k][2] and tiles[j][2] == tiles[k][0]:\n                tiles[j][0], tiles[k][0] = tiles[k][0], tiles[j][0]\n                tiles[j][2], tiles[k][2] = tiles[k][2], tiles[j][2]\n            if tiles[j][1] == tiles[k][3] and tiles[j][3] == tiles[k][1]:\n                tiles[j][1], tiles[k][1] = tiles[k][1], tiles[j][1]\n                tiles[j][3], tiles[k][3] = tiles[k][3], tiles[j][3]\n\n    if m == 1:\n        if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"YES\")\n"
    },
    {
      "index": 6,
      "text": "\n\nt = int(input())\n\nfor i in range(t):\n    n, m = [int(x) for x in input().split()]\n    \n    tiles = []\n    \n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n        \n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n    \n    tiles.sort()\n    \n    for j in range(n):\n        for k in range(n):\n            if tiles[j][0] == tiles[k][2] and tiles[j][2] == tiles[k][0]:\n                tiles[j][0], tiles[k][0] = tiles[k][0], tiles[j][0]\n                tiles[j][2], tiles[k][2] = tiles[k][2], tiles[j][2]\n            if tiles[j][1] == tiles[k][3] and tiles[j][3] == tiles[k][1]:\n                tiles[j][1], tiles[k][1] = tiles[k][1], tiles[j][1]\n                tiles[j][3], tiles[k][3] = tiles[k][3], tiles[j][3]\n\n    if m % 2 == 0:\n        if m == 2:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0] and tiles[0][0] == tiles[0][2]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"YES\")\n    else:\n        if m == 1:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0] and tiles[0][0] == tiles[0][2]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0] and tiles[0][0] == tiles[0][2]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n"
    },
    {
      "index": 7,
      "text": "\n\nt = int(input())\n\nfor i in range(t):\n    n, m = [int(x) for x in input().split()]\n    \n    tiles = []\n    \n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n        \n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n    \n    tiles.sort(key=lambda x: (x[0], x[1], x[2], x[3]))\n    \n        print(tiles[j])\n    for j in range(n):\n            print(tiles[k])\n        for k in range(n):\n            if tiles[j][0] == tiles[k][2] and tiles[j][2] == tiles[k][0]:\n                tiles[j][0], tiles[k][0] = tiles[k][0], tiles[j][0]\n                tiles[j][2], tiles[k][2] = tiles[k][2], tiles[j][2]\n                print(tiles[j])\n                print(tiles[k])\n            if tiles[j][1] == tiles[k][3] and tiles[j][3] == tiles[k][1]:\n                tiles[j][1], tiles[k][1] = tiles[k][1], tiles[j][1]\n                tiles[j][3], tiles[k][3] = tiles[k][3], tiles[j][3]\n                print(tiles[j])\n                print(tiles[k])\n                tiles[j][3], tiles[k][3] = tiles[k][3], tiles[j][3]\n\n    if m % 2 == 0:\n        if m == 2:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"YES\")\n    else:\n        if m == 1:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n"
    }
  ],
  "created": 1650419016,
  "object": "edit"
}
2022-04-20 01:43:56.413671 fix syntax errors 8 ['\n\nt = int(input())\n\nfor i in range(t):\n    n, m = [int(x) for x in input().split()]\n    \n    tiles = []\n    \n    for j in range(n * 2):\n        tiles.append([int(x) for x in input().split()])\n    \n    tiles.sort()\n    \n    for j in range(n):\n        for k in range(n):\n            if tiles[j][0] == tiles[k][2] and tiles[j][2] == tiles[k][0]:\n                tiles[j][0], tiles[k][0] = tiles[k][0], tiles[j][0]\n                tiles[j][2], tiles[k][2] = tiles[k][2], tiles[j][2]\n            if tiles[j][1] == tiles[k][3] and tiles[j][3] == tiles[k][1]:\n                tiles[j][1], tiles[k][1] = tiles[k][1], tiles[j][1]\n                tiles[j][3], tiles[k][3] = tiles[k][3], tiles[j][3]\n\n    if m % 2 == 0:\n        if m == 2:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print("YES")\n            else:\n                print("NO")\n        else:\n            print("YES")\n    else:\n        if m == 1:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print("YES")\n            else:\n                print("NO")\n        else:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print("YES")\n            else:\n                print("NO")\n', '\n\nt = int(input(""))\n\nfor i in range(t):\n    n, m = [int(x) for x in input("").split()]\n    \n    tiles = []\n    \n    for j in range(n):\n        tiles.append([int(x) for x in input("").split()])\n        \n    for j in range(n):\n        tiles.append([int(x) for x in input("").split()])\n    \n    tiles.sort()\n    \n    for j in range(n):\n        for k in range(n):\n            if tiles[j][0] == tiles[k][2] and tiles[j][2] == tiles[k][0]:\n                tiles[j][0], tiles[k][0] = tiles[k][0], tiles[j][0]\n                tiles[j][2], tiles[k][2] = tiles[k][2], tiles[j][2]\n            if tiles[j][1] == tiles[k][3] and tiles[j][3] == tiles[k][1]:\n                tiles[j][1], tiles[k][1] = tiles[k][1], tiles[j][1]\n                tiles[j][3], tiles[k][3] = tiles[k][3], tiles[j][3]\n\n    if m % 2 == 0:\n        if m == 2:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print("YES", end = "\\n")\n            else:\n                print("NO", end = "\\n")\n        else:\n            print("YES", end = "\\n")\n    else:\n        if m == 1:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print("YES", end = "\\n")\n            else:\n                print("NO")\n        else:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print("YES", end = "\\n")\n            else:\n                print("NO", end = "\\n")\n', '\nt = int(input())\n\nfor i in range(t):\n    n, m = [int(x) for x in input().split()]\n\n    tiles = []\n\n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n\n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n\n    tiles.sort()\n\n    for j in range(n):\n        for k in range(n):\n            if tiles[j][0] == tiles[k][2] and tiles[j][2] == tiles[k][0]:\n                tiles[j][0], tiles[k][0] = tiles[k][0], tiles[j][0]\n                tiles[j][2], tiles[k][2] = tiles[k][2], tiles[j][2]\n            if tiles[j][1] == tiles[k][3] and tiles[j][3] == tiles[k][1]:\n                tiles[j][1], tiles[k][1] = tiles[k][1], tiles[j][1]\n                tiles[j][3], tiles[k][3] = tiles[k][3], tiles[j][3]\n\n    if m % 2 == 0:\n        if m == 2:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print("YES")\n            else:\n                print("NO")\n        else:\n            print("YES")\n    else:\n        if m == 1:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print("YES")\n            else:\n                print("NO")\n        else:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print("YES")\n            else:\n                print("NO")\n', '\n\nt = int(input())\n\nfor i in range(t):\n    n, m = [int(x) for x in input().split()]\n    \n    tiles = []\n    \n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n        \n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n    \n    for j in range(n):\n        for k in range(n):\n            if tiles[j][0] == tiles[k][2]:\n                tiles[j][0], tiles[k][2] = tiles[k][2], tiles[j][0]\n            if tiles[j][1] == tiles[k][3]:\n                tiles[j][1], tiles[k][3] = tiles[k][3], tiles[j][1]\n            if tiles[j][2] == tiles[k][0]:\n                tiles[j][2], tiles[k][0] = tiles[k][0], tiles[j][2]\n            if tiles[j][3] == tiles[k][1]:\n                tiles[j][3], tiles[k][1] = tiles[k][1], tiles[j][3]\n\n    if m % 2 == 0:\n        if m == 2:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3]:\n                print("YES")\n            else:\n                print("NO")\n        else:\n            print("YES")\n    else:\n        if m == 1:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3]:\n                print("YES")\n            else:\n                print("NO")\n        else:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3]:\n                print("YES")\n            else:\n                print("NO")\n', '\n\nt = int(input())\n\nfor i in range(t):\n    n, m = map(int, input().split())\n    \n    tiles = []\n    \n    for j in range(n):\n        tiles.append(list(map(int, input().split())))\n        \n    for j in range(n):\n        tiles.append(list(map(int, input().split())))\n    \n    tiles.sort()\n    \n    for j in range(n):\n        for k in range(n):\n            if tiles[j][0] == tiles[k][2] and tiles[j][2] == tiles[k][0]:\n                tiles[j][0], tiles[k][0] = tiles[k][0], tiles[j][0]\n                tiles[j][2], tiles[k][2] = tiles[k][2], tiles[j][2]\n            if tiles[j][1] == tiles[k][3] and tiles[j][3] == tiles[k][1]:\n                tiles[j][1], tiles[k][1] = tiles[k][1], tiles[j][1]\n                tiles[j][3], tiles[k][3] = tiles[k][3], tiles[j][3]\n\n    if m % 2 == 0:\n        if m == 2:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print("YES")\n            else:\n                print("NO")\n        else:\n            print("YES")\n    else:\n        if m == 1:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print("YES")\n            else:\n                print("NO")\n        else:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print("YES")\n            else:\n                print("NO")\n', '\n\nt = int(input())\n\nfor i in range(t):\n    n, m = [int(x) for x in input().split()]\n    \n    tiles = []\n    \n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n        \n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n    \n    tiles.sort()\n    \n    for j in range(n):\n        for k in range(n):\n            if tiles[j][0] == tiles[k][2] and tiles[j][2] == tiles[k][0]:\n                tiles[j][0], tiles[k][0] = tiles[k][0], tiles[j][0]\n                tiles[j][2], tiles[k][2] = tiles[k][2], tiles[j][2]\n            if tiles[j][1] == tiles[k][3] and tiles[j][3] == tiles[k][1]:\n                tiles[j][1], tiles[k][1] = tiles[k][1], tiles[j][1]\n                tiles[j][3], tiles[k][3] = tiles[k][3], tiles[j][3]\n\n    if m == 1:\n        if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n            print("YES")\n        else:\n            print("NO")\n    else:\n        print("YES")\n', '\n\nt = int(input())\n\nfor i in range(t):\n    n, m = [int(x) for x in input().split()]\n    \n    tiles = []\n    \n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n        \n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n    \n    tiles.sort()\n    \n    for j in range(n):\n        for k in range(n):\n            if tiles[j][0] == tiles[k][2] and tiles[j][2] == tiles[k][0]:\n                tiles[j][0], tiles[k][0] = tiles[k][0], tiles[j][0]\n                tiles[j][2], tiles[k][2] = tiles[k][2], tiles[j][2]\n            if tiles[j][1] == tiles[k][3] and tiles[j][3] == tiles[k][1]:\n                tiles[j][1], tiles[k][1] = tiles[k][1], tiles[j][1]\n                tiles[j][3], tiles[k][3] = tiles[k][3], tiles[j][3]\n\n    if m % 2 == 0:\n        if m == 2:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0] and tiles[0][0] == tiles[0][2]:\n                print("YES")\n            else:\n                print("NO")\n        else:\n            print("YES")\n    else:\n        if m == 1:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0] and tiles[0][0] == tiles[0][2]:\n                print("YES")\n            else:\n                print("NO")\n        else:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0] and tiles[0][0] == tiles[0][2]:\n                print("YES")\n            else:\n                print("NO")\n', '\n\nt = int(input())\n\nfor i in range(t):\n    n, m = [int(x) for x in input().split()]\n    \n    tiles = []\n    \n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n        \n    for j in range(n):\n        tiles.append([int(x) for x in input().split()])\n    \n    tiles.sort(key=lambda x: (x[0], x[1], x[2], x[3]))\n    \n        print(tiles[j])\n    for j in range(n):\n            print(tiles[k])\n        for k in range(n):\n            if tiles[j][0] == tiles[k][2] and tiles[j][2] == tiles[k][0]:\n                tiles[j][0], tiles[k][0] = tiles[k][0], tiles[j][0]\n                tiles[j][2], tiles[k][2] = tiles[k][2], tiles[j][2]\n                print(tiles[j])\n                print(tiles[k])\n            if tiles[j][1] == tiles[k][3] and tiles[j][3] == tiles[k][1]:\n                tiles[j][1], tiles[k][1] = tiles[k][1], tiles[j][1]\n                tiles[j][3], tiles[k][3] = tiles[k][3], tiles[j][3]\n                print(tiles[j])\n                print(tiles[k])\n                tiles[j][3], tiles[k][3] = tiles[k][3], tiles[j][3]\n\n    if m % 2 == 0:\n        if m == 2:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print("YES")\n            else:\n                print("NO")\n        else:\n            print("YES")\n    else:\n        if m == 1:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print("YES")\n            else:\n                print("NO")\n        else:\n            if tiles[0][0] == tiles[0][1] and tiles[0][1] == tiles[0][2] and tiles[0][2] == tiles[0][3] and tiles[0][3] == tiles[0][0]:\n                print("YES")\n            else:\n                print("NO")\n']
2022-04-20 01:43:56.413824 size on output set 8
2022-04-20 01:43:56.413838 num operations 1
2022-04-20 01:43:56.413844 size on input set 1
2022-04-20 01:43:56.414003 using api key gabby
2022-04-20 01:44:20.733467 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef check_square(tiles, square):\n    for i in range(len(square)):\n        for j in range(len(square)):\n            if square[i][j] == 0:\n                for tile in tiles:\n                    if check_tile(tile, square, i, j):\n                        square[i][j] = tile[0][0]\n                        square[i][j+1] = tile[0][1]\n                        square[i+1][j] = tile[1][0]\n                        square[i+1][j+1] = tile[1][1]\n                        break\n                else:\n                    return False\n    return True\n\ndef check_tile(tile, square, i, j):\n    if i+1 < len(square) and j+1 < len(square):\n        if square[i][j+1] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i+1][j] == tile[0][1] and square[i][j] == tile[1][1]:\n            return True\n        if square[i+1][j] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i][j] == tile[1][1]:\n            return True\n        if square[i][j] == tile[0][0] and square[i][j+1] == tile[1][0] and square[i+1][j+1] == tile[0][1] and square[i+1][j] == tile[1][1]:\n            return True\n        if square[i][j] == tile[0][0] and square[i+1][j] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i+1][j+1] == tile[1][1]:\n            return True\n    return False\n\ndef main():\n    cases = int(input())\n    for case in range(cases):\n        n, m = map(int, input().split())\n        tiles = []\n        for i in range(n):\n            tiles.append([list(map(int, input().split())) for i in range(2)])\n        square = [[0 for i in range(m)] for j in range(m)]\n        if check_square(tiles, square):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef check_square(tiles, square, n):\n    for i in range(len(square)):\n        for j in range(len(square)):\n            if square[i][j] == 0:\n                for tile in tiles:\n                    if check_tile(tile, square, i, j, n):\n                        square[i][j] = tile[0][0]\n                        square[i][j+1] = tile[0][1]\n                        square[i+1][j] = tile[1][0]\n                        square[i+1][j+1] = tile[1][1]\n                        break\n                else:\n                    return False\n    return True\n\ndef check_tile(tile, square, i, j, n):\n    if square[i][j] == 0 and square[i][j+1] == 0 and square[i+1][j] == 0 and square[i+1][j+1] == 0:\n        if i+1 < n and j+1 < n:\n            if square[i][j+1] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i+1][j] == tile[0][1] and square[i][j] == tile[1][1] or square[i+1][j] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i][j] == tile[1][1] or square[i][j] == tile[0][0] and square[i][j+1] == tile[1][0] and square[i+1][j+1] == tile[0][1] and square[i+1][j] == tile[1][1] or square[i][j] == tile[0][0] and square[i+1][j] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i+1][j+1] == tile[1][1]:\n                return True \n    return False\n\ndef main():\n    cases = int(input())\n    for case in range(cases):\n        n, m = map(int, input().split())\n        tiles = []\n        for i in range(n):\n            tiles.append([list(map(int, input().split())) for i in range(2)])\n        square = [[0 for i in range(m)] for j in range(m)]\n        if check_square(tiles, square, m):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "error": {
        "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
        "type": "invalid_edit"
      },
      "index": 2
    },
    {
      "index": 3,
      "text": "\n\ndef check_square(tiles, square):\n    for i in range(len(square)-1):\n        for j in range(len(square)-1):\n            if square[i][j] == 0:\n                for tile in tiles:\n                    if check_tile(tile, square, i, j):\n                        square[i][j] = tile[0][0]\n                        square[i][j + 1] = tile[0][1]\n                        square[i + 1][j] = tile[1][0]\n                        square[i + 1][j + 1] = tile[1][1]\n                        break\n                else:\n                    return False\n    return True\n\ndef check_tile(tile, square, i, j):\n    if square[i][j] == 0 and square[i][j + 1] == 0 and square[i + 1][j] == 0 and square[i + 1][j + 1] == 0:\n        if i + 1 < len(square) and j + 1 < len(square):\n            if square[i][j + 1] == tile[0][0] and square[i + 1][j + 1] == tile[1][0] and square[i + 1][j] == tile[0][1] and square[i][j] == tile[1][1]:\n                return True\n            if square[i + 1][j] == tile[0][0] and square[i + 1][j + 1] == tile[1][0] and square[i][j + 1] == tile[0][1] and square[i][j] == tile[1][1]:\n                return True\n            if square[i][j] == tile[0][0] and square[i][j + 1] == tile[1][0] and square[i + 1][j + 1] == tile[0][1] and square[i + 1][j] == tile[1][1]:\n                return True\n            if square[i][j] == tile[0][0] and square[i + 1][j] == tile[1][0] and square[i][j + 1] == tile[0][1] and square[i + 1][j + 1] == tile[1][1]:\n                return True\n    return False\n\ndef main():\n    cases = int(input())\n    for case in range(cases):\n        n, m = map(int, input().split())\n        tiles = []\n        for i in range(n):\n            tiles.append([list(map(int, input().split())) for i in range(2)])\n        square = [[0 for i in range(m)] for j in range(m)]\n        if check_square(tiles, square):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\ndef check_square(tiles, square):\n    for i in range(len(square)):\n        for j in range(len(square)):\n            if square[i][j] == 0:\n                for tile in tiles:\n                    if check_tile(tile, square, i, j):\n                        square[i][j] = tile[0][0]\n                        square[i][j+1] = tile[0][1]\n                        square[i+1][j] = tile[1][0]\n                        square[i+1][j+1] = tile[1][1]\n                        break\n                else:\n                    return False\n    return True\n\ndef check_tile(tile, square, i, j):\n    if square[i][j] == 0 and square[i][j+1] == 0 and square[i+1][j] == 0 and square[i+1][j+1] == 0:\n        if i+1 < len(square) and j+1 < len(square):\n            if square[i][j] == tile[0][0] and square[i][j+1] == tile[1][0] and square[i+1][j+1] == tile[0][1] and square[i+1][j] == tile[1][1]:\n                return True\n            if square[i][j] == tile[0][0] and square[i+1][j] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i+1][j+1] == tile[1][1]:\n                return True\n            if square[i][j+1] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i+1][j] == tile[0][1] and square[i][j] == tile[1][1]:\n                return True\n            if square[i+1][j] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i][j] == tile[1][1]:\n                return True\n    return False\n\ndef main():\n    cases = int(input())\n    for case in range(cases):\n        n, m = map(int, input().split())\n        tiles = []\n        for i in range(n):\n            tiles.append([list(map(int, input().split())) for i in range(2)])\n        square = [[0 for i in range(m)] for j in range(m)]\n        if check_square(tiles, square):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "\n\ndef check_square(tiles, square):\n    for i in range(len(square)):\n        for j in range(len(square)):\n            if square[i][j] == 0:\n                for tile in tiles:\n                    if check_tile(tile, square, i, j):\n                        square[i][j] = tile[0][0]\n                        square[i][j+1] = tile[0][1]\n                        square[i+1][j] = tile[1][0]\n                        square[i+1][j+1] = tile[1][1]\n                        break\n                else:\n                    return False\n    return True\n\ndef check_tile(tile, square, i, j):\n    if square[i][j] == 0 and square[i][j+1] == 0 and square[i+1][j] == 0 and square[i+1][j+1] == 0:\n        if i+1 < len(square) and j+1 < len(square):\n            if square[i][j] == tile[0][0] and square[i+1][j] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i+1][j+1] == tile[1][1]:\n                return True\n            if square[i+1][j] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i][j] == tile[1][1]:\n                return True\n            if square[i][j+1] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i+1][j] == tile[0][1] and square[i][j] == tile[1][1]:\n                return True\n            if square[i][j] == tile[0][0] and square[i][j+1] == tile[1][0] and square[i+1][j+1] == tile[0][1] and square[i+1][j] == tile[1][1]:\n                return True\n    return False\n\ndef main():\n    cases = int(input())\n    for case in range(cases):\n        n, m = map(int, input().split())\n        tiles = []\n        for i in range(n):\n            tiles.append([list(map(int, input().split())) for i in range(2)])\n        square = [[0 for i in range(m)] for j in range(m)]\n        if check_square(tiles, square):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n\ndef check_square(tiles, square):\n    for i in range(len(square)):\n        for j in range(len(square)):\n            if square[i][j] == 0:\n                for tile in tiles:\n                    if check_tile(tile, square, i, j):\n                        square[i][j] = tile[0][0]\n                        square[i][j+1] = tile[0][1]\n                        square[i+1][j] = tile[1][0]\n                        square[i+1][j+1] = tile[1][1]\n                        break\n                else:\n                    return False\n    return True\n\ndef check_tile(tile, square, i, j):\n    if square[i][j] == 0 and square[i][j+1] == 0 and square[i+1][j] == 0 and square[i+1][j+1] == 0:\n        if i+1 < len(square) and j+1 < len(square):\n            if square[i][j] == tile[0][0] and square[i][j+1] == tile[1][0] and square[i+1][j+1] == tile[0][1] and square[i+1][j] == tile[1][1]:\n                return True\n            if square[i][j] == tile[0][0] and square[i+1][j] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i+1][j+1] == tile[1][1]:\n                return True\n            if square[i][j+1] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i+1][j] == tile[0][1] and square[i][j] == tile[1][1]:\n                return True\n            if square[i+1][j] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i][j] == tile[1][1]:\n                return True\n    return False\n\ndef main():\n    cases = int(input())\n    for case in range(cases):\n        n, m = map(int, input().split())\n        tiles = []\n        for i in range(n):\n            tiles.append([list(map(int, input().split())) for i in range(2)])\n        square = [[0 for i in range(m)] for j in range(m)]\n        if check_square(tiles, square):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n\ndef check_square(tiles, square):\n    for i in range(len(square)):\n        for j in range(len(square[i])):\n            if square[i][j] == 0:\n                for tile in tiles:\n                    if check_tile(tile, square, i, j):\n                        square[i][j] = tile[0][0]\n                        square[i][j+1] = tile[0][1]\n                        square[i+1][j] = tile[1][0]\n                        square[i+1][j+1] = tile[1][1]\n                        break\n                else:\n                    return False\n    return True\n\ndef check_tile(tile, square, i, j):\n    if square[i][j] == 0 and square[i][j+1] == 0 and square[i+1][j] == 0 and square[i+1][j+1] == 0:\n        if i+1 < len(square) and j+1 < len(square):\n            if square[i][j+1] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i+1][j] == tile[0][1] and square[i][j] == tile[1][1] and square[i+1][j] == tile[1][1]:\n                return True\n            if square[i+1][j] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i][j] == tile[1][1] and square[i][j+1] == tile[1][1]:\n                return True\n            if square[i][j] == tile[0][0] and square[i][j+1] == tile[1][0] and square[i+1][j+1] == tile[0][1] and square[i+1][j] == tile[1][1] and square[i][j] == tile[1][1]:\n                return True\n            if square[i][j] == tile[0][0] and square[i+1][j] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i+1][j+1] == tile[1][1] and square[i][j] == tile[1][1]:\n                return True\n    return False\n\ndef main():\n    tiles = []\n    cases = int(input())\n    for case in range(cases):\n        n, m = map(int, input().split())\n        for i in range(n):\n            tiles.append([list(map(int, input().split())) for i in range(2)])\n        print(tiles)\n        square = [[0 for i in range(m)] for j in range(m)]\n        if check_square(tiles, square):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650419036,
  "object": "edit"
}
2022-04-20 01:44:20.733880 NO RESULT
2022-04-20 01:44:20.733892 {
  "error": {
    "message": "Could not edit text. Please sample again or try with a different temperature setting, input, or instruction.",
    "type": "invalid_edit"
  },
  "index": 2
}
2022-04-20 01:44:20.733943 fix syntax errors 7 ['\n\ndef check_square(tiles, square):\n    for i in range(len(square)):\n        for j in range(len(square)):\n            if square[i][j] == 0:\n                for tile in tiles:\n                    if check_tile(tile, square, i, j):\n                        square[i][j] = tile[0][0]\n                        square[i][j+1] = tile[0][1]\n                        square[i+1][j] = tile[1][0]\n                        square[i+1][j+1] = tile[1][1]\n                        break\n                else:\n                    return False\n    return True\n\ndef check_tile(tile, square, i, j):\n    if i+1 < len(square) and j+1 < len(square):\n        if square[i][j+1] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i+1][j] == tile[0][1] and square[i][j] == tile[1][1]:\n            return True\n        if square[i+1][j] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i][j] == tile[1][1]:\n            return True\n        if square[i][j] == tile[0][0] and square[i][j+1] == tile[1][0] and square[i+1][j+1] == tile[0][1] and square[i+1][j] == tile[1][1]:\n            return True\n        if square[i][j] == tile[0][0] and square[i+1][j] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i+1][j+1] == tile[1][1]:\n            return True\n    return False\n\ndef main():\n    cases = int(input())\n    for case in range(cases):\n        n, m = map(int, input().split())\n        tiles = []\n        for i in range(n):\n            tiles.append([list(map(int, input().split())) for i in range(2)])\n        square = [[0 for i in range(m)] for j in range(m)]\n        if check_square(tiles, square):\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef check_square(tiles, square, n):\n    for i in range(len(square)):\n        for j in range(len(square)):\n            if square[i][j] == 0:\n                for tile in tiles:\n                    if check_tile(tile, square, i, j, n):\n                        square[i][j] = tile[0][0]\n                        square[i][j+1] = tile[0][1]\n                        square[i+1][j] = tile[1][0]\n                        square[i+1][j+1] = tile[1][1]\n                        break\n                else:\n                    return False\n    return True\n\ndef check_tile(tile, square, i, j, n):\n    if square[i][j] == 0 and square[i][j+1] == 0 and square[i+1][j] == 0 and square[i+1][j+1] == 0:\n        if i+1 < n and j+1 < n:\n            if square[i][j+1] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i+1][j] == tile[0][1] and square[i][j] == tile[1][1] or square[i+1][j] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i][j] == tile[1][1] or square[i][j] == tile[0][0] and square[i][j+1] == tile[1][0] and square[i+1][j+1] == tile[0][1] and square[i+1][j] == tile[1][1] or square[i][j] == tile[0][0] and square[i+1][j] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i+1][j+1] == tile[1][1]:\n                return True \n    return False\n\ndef main():\n    cases = int(input())\n    for case in range(cases):\n        n, m = map(int, input().split())\n        tiles = []\n        for i in range(n):\n            tiles.append([list(map(int, input().split())) for i in range(2)])\n        square = [[0 for i in range(m)] for j in range(m)]\n        if check_square(tiles, square, m):\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef check_square(tiles, square):\n    for i in range(len(square)-1):\n        for j in range(len(square)-1):\n            if square[i][j] == 0:\n                for tile in tiles:\n                    if check_tile(tile, square, i, j):\n                        square[i][j] = tile[0][0]\n                        square[i][j + 1] = tile[0][1]\n                        square[i + 1][j] = tile[1][0]\n                        square[i + 1][j + 1] = tile[1][1]\n                        break\n                else:\n                    return False\n    return True\n\ndef check_tile(tile, square, i, j):\n    if square[i][j] == 0 and square[i][j + 1] == 0 and square[i + 1][j] == 0 and square[i + 1][j + 1] == 0:\n        if i + 1 < len(square) and j + 1 < len(square):\n            if square[i][j + 1] == tile[0][0] and square[i + 1][j + 1] == tile[1][0] and square[i + 1][j] == tile[0][1] and square[i][j] == tile[1][1]:\n                return True\n            if square[i + 1][j] == tile[0][0] and square[i + 1][j + 1] == tile[1][0] and square[i][j + 1] == tile[0][1] and square[i][j] == tile[1][1]:\n                return True\n            if square[i][j] == tile[0][0] and square[i][j + 1] == tile[1][0] and square[i + 1][j + 1] == tile[0][1] and square[i + 1][j] == tile[1][1]:\n                return True\n            if square[i][j] == tile[0][0] and square[i + 1][j] == tile[1][0] and square[i][j + 1] == tile[0][1] and square[i + 1][j + 1] == tile[1][1]:\n                return True\n    return False\n\ndef main():\n    cases = int(input())\n    for case in range(cases):\n        n, m = map(int, input().split())\n        tiles = []\n        for i in range(n):\n            tiles.append([list(map(int, input().split())) for i in range(2)])\n        square = [[0 for i in range(m)] for j in range(m)]\n        if check_square(tiles, square):\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef check_square(tiles, square):\n    for i in range(len(square)):\n        for j in range(len(square)):\n            if square[i][j] == 0:\n                for tile in tiles:\n                    if check_tile(tile, square, i, j):\n                        square[i][j] = tile[0][0]\n                        square[i][j+1] = tile[0][1]\n                        square[i+1][j] = tile[1][0]\n                        square[i+1][j+1] = tile[1][1]\n                        break\n                else:\n                    return False\n    return True\n\ndef check_tile(tile, square, i, j):\n    if square[i][j] == 0 and square[i][j+1] == 0 and square[i+1][j] == 0 and square[i+1][j+1] == 0:\n        if i+1 < len(square) and j+1 < len(square):\n            if square[i][j] == tile[0][0] and square[i][j+1] == tile[1][0] and square[i+1][j+1] == tile[0][1] and square[i+1][j] == tile[1][1]:\n                return True\n            if square[i][j] == tile[0][0] and square[i+1][j] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i+1][j+1] == tile[1][1]:\n                return True\n            if square[i][j+1] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i+1][j] == tile[0][1] and square[i][j] == tile[1][1]:\n                return True\n            if square[i+1][j] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i][j] == tile[1][1]:\n                return True\n    return False\n\ndef main():\n    cases = int(input())\n    for case in range(cases):\n        n, m = map(int, input().split())\n        tiles = []\n        for i in range(n):\n            tiles.append([list(map(int, input().split())) for i in range(2)])\n        square = [[0 for i in range(m)] for j in range(m)]\n        if check_square(tiles, square):\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef check_square(tiles, square):\n    for i in range(len(square)):\n        for j in range(len(square)):\n            if square[i][j] == 0:\n                for tile in tiles:\n                    if check_tile(tile, square, i, j):\n                        square[i][j] = tile[0][0]\n                        square[i][j+1] = tile[0][1]\n                        square[i+1][j] = tile[1][0]\n                        square[i+1][j+1] = tile[1][1]\n                        break\n                else:\n                    return False\n    return True\n\ndef check_tile(tile, square, i, j):\n    if square[i][j] == 0 and square[i][j+1] == 0 and square[i+1][j] == 0 and square[i+1][j+1] == 0:\n        if i+1 < len(square) and j+1 < len(square):\n            if square[i][j] == tile[0][0] and square[i+1][j] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i+1][j+1] == tile[1][1]:\n                return True\n            if square[i+1][j] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i][j] == tile[1][1]:\n                return True\n            if square[i][j+1] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i+1][j] == tile[0][1] and square[i][j] == tile[1][1]:\n                return True\n            if square[i][j] == tile[0][0] and square[i][j+1] == tile[1][0] and square[i+1][j+1] == tile[0][1] and square[i+1][j] == tile[1][1]:\n                return True\n    return False\n\ndef main():\n    cases = int(input())\n    for case in range(cases):\n        n, m = map(int, input().split())\n        tiles = []\n        for i in range(n):\n            tiles.append([list(map(int, input().split())) for i in range(2)])\n        square = [[0 for i in range(m)] for j in range(m)]\n        if check_square(tiles, square):\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef check_square(tiles, square):\n    for i in range(len(square)):\n        for j in range(len(square)):\n            if square[i][j] == 0:\n                for tile in tiles:\n                    if check_tile(tile, square, i, j):\n                        square[i][j] = tile[0][0]\n                        square[i][j+1] = tile[0][1]\n                        square[i+1][j] = tile[1][0]\n                        square[i+1][j+1] = tile[1][1]\n                        break\n                else:\n                    return False\n    return True\n\ndef check_tile(tile, square, i, j):\n    if square[i][j] == 0 and square[i][j+1] == 0 and square[i+1][j] == 0 and square[i+1][j+1] == 0:\n        if i+1 < len(square) and j+1 < len(square):\n            if square[i][j] == tile[0][0] and square[i][j+1] == tile[1][0] and square[i+1][j+1] == tile[0][1] and square[i+1][j] == tile[1][1]:\n                return True\n            if square[i][j] == tile[0][0] and square[i+1][j] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i+1][j+1] == tile[1][1]:\n                return True\n            if square[i][j+1] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i+1][j] == tile[0][1] and square[i][j] == tile[1][1]:\n                return True\n            if square[i+1][j] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i][j] == tile[1][1]:\n                return True\n    return False\n\ndef main():\n    cases = int(input())\n    for case in range(cases):\n        n, m = map(int, input().split())\n        tiles = []\n        for i in range(n):\n            tiles.append([list(map(int, input().split())) for i in range(2)])\n        square = [[0 for i in range(m)] for j in range(m)]\n        if check_square(tiles, square):\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n    main()\n', '\n\ndef check_square(tiles, square):\n    for i in range(len(square)):\n        for j in range(len(square[i])):\n            if square[i][j] == 0:\n                for tile in tiles:\n                    if check_tile(tile, square, i, j):\n                        square[i][j] = tile[0][0]\n                        square[i][j+1] = tile[0][1]\n                        square[i+1][j] = tile[1][0]\n                        square[i+1][j+1] = tile[1][1]\n                        break\n                else:\n                    return False\n    return True\n\ndef check_tile(tile, square, i, j):\n    if square[i][j] == 0 and square[i][j+1] == 0 and square[i+1][j] == 0 and square[i+1][j+1] == 0:\n        if i+1 < len(square) and j+1 < len(square):\n            if square[i][j+1] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i+1][j] == tile[0][1] and square[i][j] == tile[1][1] and square[i+1][j] == tile[1][1]:\n                return True\n            if square[i+1][j] == tile[0][0] and square[i+1][j+1] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i][j] == tile[1][1] and square[i][j+1] == tile[1][1]:\n                return True\n            if square[i][j] == tile[0][0] and square[i][j+1] == tile[1][0] and square[i+1][j+1] == tile[0][1] and square[i+1][j] == tile[1][1] and square[i][j] == tile[1][1]:\n                return True\n            if square[i][j] == tile[0][0] and square[i+1][j] == tile[1][0] and square[i][j+1] == tile[0][1] and square[i+1][j+1] == tile[1][1] and square[i][j] == tile[1][1]:\n                return True\n    return False\n\ndef main():\n    tiles = []\n    cases = int(input())\n    for case in range(cases):\n        n, m = map(int, input().split())\n        for i in range(n):\n            tiles.append([list(map(int, input().split())) for i in range(2)])\n        print(tiles)\n        square = [[0 for i in range(m)] for j in range(m)]\n        if check_square(tiles, square):\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n    main()\n']
2022-04-20 01:44:20.734098 size on output set 6
