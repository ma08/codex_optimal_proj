2022-04-09 18:42:38.334244 """
There are N cities on a number line. The i-th city is located at coordinate x_i.
Your objective is to visit all these cities at least once.
In order to do so, you will first set a positive integer D.
Then, you will depart from coordinate X and perform Move 1 and Move 2 below, as many times as you like:
 - Move 1: travel from coordinate y to coordinate y + D.
 - Move 2: travel from coordinate y to coordinate y - D.
Find the maximum value of D that enables you to visit all the cities.
Here, to visit a city is to travel to the coordinate where that city is located.

-----Constraints-----
 - All values in input are integers.
 - 1 \leq N \leq 10^5
 - 1 \leq X \leq 10^9
 - 1 \leq x_i \leq 10^9
 - x_i are all different.
 - x_1, x_2, ..., x_N \neq X

-----Input-----
Input is given from Standard Input in the following format:
N X
x_1 x_2 ... x_N

-----Output-----
Print the maximum value of D that enables you to visit all the cities.

-----Sample Input-----
3 3
1 7 11

-----Sample Output-----
2

Setting D = 2 enables you to visit all the cities as follows, and this is the maximum value of such D.
 - Perform Move 2 to travel to coordinate 1.
 - Perform Move 1 to travel to coordinate 3.
 - Perform Move 1 to travel to coordinate 5.
 - Perform Move 1 to travel to coordinate 7.
 - Perform Move 1 to travel to coordinate 9.
 - Perform Move 1 to travel to coordinate 11.
"""
2022-04-09 18:42:38.334290 --------------------------
2022-04-09 18:42:54.077072 {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# @Author: Shuailong\n# @Email: liangshuailong@gmail.com\n# @Date: 2019-05-14 16:49:37\n# @Last Modified by: Shuailong\n# @Last Modified time: 2019-05-14 16:50:34\n\nimport sys\n\ndef solve(x, xs):\n    xs = sorted(xs)\n    x_min = xs[0]\n    x_max = xs[-1]\n    if x < x_min:\n        x_max = x_max + (x_min - x)\n    elif x > x_max:\n        x_min = x_min - (x - x_max)\n    return x_max - x_min\n\ndef main():\n    n, x = map(int, sys.stdin.readline().split())\n    xs = list(map(int, sys.stdin.readline().split()))\n    print(solve(x, xs))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "finish_reason": "stop",
      "index": 1,
      "logprobs": null,
      "text": "\n\nN, X = list(map(int, input().split()))\nx = list(map(int, input().split()))\n\nx.sort()\n\ndist = []\nfor i in range(N):\n    dist.append(abs(X - x[i]))\ndist.sort()\n\nans = 0\nfor i in range(1, N):\n    ans = max(ans, (dist[i] - dist[i - 1]) // 2)\n\nprint(ans)"
    }
  ],
  "created": 1649544158,
  "id": "cmpl-4vE4sZ9MyW0RUFcj0XM9Ffwh2XdZc",
  "model": "code-davinci:002",
  "object": "text_completion"
}
2022-04-09 18:42:54.077474 0 {
  "finish_reason": "stop",
  "index": 0,
  "logprobs": null,
  "text": "\n\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# @Author: Shuailong\n# @Email: liangshuailong@gmail.com\n# @Date: 2019-05-14 16:49:37\n# @Last Modified by: Shuailong\n# @Last Modified time: 2019-05-14 16:50:34\n\nimport sys\n\ndef solve(x, xs):\n    xs = sorted(xs)\n    x_min = xs[0]\n    x_max = xs[-1]\n    if x < x_min:\n        x_max = x_max + (x_min - x)\n    elif x > x_max:\n        x_min = x_min - (x - x_max)\n    return x_max - x_min\n\ndef main():\n    n, x = map(int, sys.stdin.readline().split())\n    xs = list(map(int, sys.stdin.readline().split()))\n    print(solve(x, xs))\n\nif __name__ == '__main__':\n    main()"
}
2022-04-09 18:42:54.077601 REASON stop
2022-04-09 18:42:54.096366 1 {
  "finish_reason": "stop",
  "index": 1,
  "logprobs": null,
  "text": "\n\nN, X = list(map(int, input().split()))\nx = list(map(int, input().split()))\n\nx.sort()\n\ndist = []\nfor i in range(N):\n    dist.append(abs(X - x[i]))\ndist.sort()\n\nans = 0\nfor i in range(1, N):\n    ans = max(ans, (dist[i] - dist[i - 1]) // 2)\n\nprint(ans)"
}
2022-04-09 18:42:54.096481 REASON stop
