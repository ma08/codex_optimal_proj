2022-04-20 01:37:50.244535 num operations 1
2022-04-20 01:37:50.244553 size on input set 1
2022-04-20 01:37:50.244765 using api key kouti
2022-04-20 01:37:55.787651 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Solution\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n# Solution\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\n# Solution\n\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 3,
      "text": "\n# Solution\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 4,
      "text": "\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 5,
      "text": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\n# Solution\n\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 6,
      "text": "\n# Solution\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 7,
      "text": "\n# Solution\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nif __name__ == \"__main__\":\n\n    main()\n"
    }
  ],
  "created": 1650418670,
  "object": "edit"
}
2022-04-20 01:37:55.787946 fix syntax errors 8 ['\n# Solution\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n    main()\n', '\n# Solution\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n    main()\n', '\n\n# Solution\n\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n    main()\n', '\n# Solution\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n    main()\n', '\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n    main()\n', '#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\n# Solution\n\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n    main()\n', '\n# Solution\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n    main()\n', '\n# Solution\n\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a[0] == a[-1]:\n            print("YES")\n        else:\n            print("NO")\n\nif __name__ == "__main__":\n\n    main()\n']
2022-04-20 01:37:55.787993 size on output set 5
2022-04-20 01:37:55.788007 num operations 1
2022-04-20 01:37:55.788012 size on input set 1
2022-04-20 01:37:55.788166 using api key sunu
2022-04-20 01:38:09.766804 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\ndef get_input():\n    return open(\"input.txt\", \"r\")\ndef get_output():\n    return open(\"output.txt\", \"w\")\n\n\ndef get_number_of_test_cases():\n    return int(input())\n\n\ndef get_array_length(test_case_number):\n    return int(input())\n\n\ndef get_array(array_length):\n    return [int(x) for x in input().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return \"YES\"\n    return \"NO\"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(test_case_number)\n        array = get_array(array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        print(output)\n\n\nsolve_problem()\n"
    },
    {
      "index": 1,
      "text": "\ndef get_input():\n    return open('input.txt', 'r')\n\n\ndef get_output():\n    return open('output.txt', 'w')\n\n\ndef get_number_of_test_cases():\n    return int(input())\n\n\ndef get_array_length(test_case_number):\n    return int(input())\n\n\ndef get_array(array_length):\n    return [int(x) for x in input().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return 'YES'\n    return 'NO'\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(test_case_number)\n        array = get_array(array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        print(output)\n\n\nsolve_problem()\n"
    },
    {
      "index": 2,
      "text": "\ndef get_input():\n    return open(\"input.txt\", \"r\")\n\n\ndef get_output():\n    return open(\"output.txt\", \"w\")\n\n\ndef get_number_of_test_cases():\n    return int(get_input().readline())\n\n\ndef get_array_length(test_case_number):\n    return int(get_input().readline())\n\n\ndef get_array(array_length):\n    return [int(x) for x in get_input().readline().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return \"YES\"\n    return \"NO\"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(test_case_number)\n        array = get_array(array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        print(output, file=get_output())\n\n\nsolve_problem()\n"
    },
    {
      "index": 3,
      "text": "\ndef get_input():\n    return open(\"input.txt\", \"r\").read()\n\n\ndef get_output():\n    return open(\"output.txt\", \"w\")\n\n\ndef get_number_of_test_cases(input):\n    return int(input.pop(0))\n\n\ndef get_array_length(input):\n    return int(input.pop(0))\n\n\ndef get_array(input, array_length):\n    return [int(x) for x in input.pop(0).split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return \"YES\"\n    return \"NO\"\n\n\ndef solve_problem():\n    input = get_input().split(\"\\n\")\n    output = get_output()\n    number_of_test_cases = get_number_of_test_cases(input)\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(input)\n        array = get_array(input, array_length)\n        output.write(solve_test_case(array))\n        output.write(\"\\n\")\n\n\nsolve_problem()\n"
    },
    {
      "index": 4,
      "text": "\n\n\ndef get_input():\n    return open(\"input.txt\", \"r\").readlines()\n\n\ndef get_output():\n    return open(\"output.txt\", \"w\")\n\n\ndef get_number_of_test_cases():\n    return int(get_input()[0])\n\n\ndef get_array_length(test_case_number):\n    return int(get_input()[test_case_number])\n\n\ndef get_array(array_length):\n    return [int(x) for x in get_input()[test_case_number + 1].split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return \"YES\"\n    return \"NO\"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(test_case_number)\n        array = get_array(array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        get_output().write(output)\n\n\nsolve_problem()\n"
    },
    {
      "index": 5,
      "text": "\ndef get_input():\n    return open(\"input.txt\", \"r\").readlines()\n\n\ndef get_output():\n    return open(\"output.txt\", \"w\")\n\n\ndef get_number_of_test_cases(lines):\n    return int(lines[0])\n\n\ndef get_array_length(lines, test_case_number):\n    return int(lines[test_case_number])\n\n\ndef get_array(lines, test_case_number, array_length):\n    return [int(x) for x in lines[test_case_number + 1].split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return \"YES\"\n    return \"NO\"\n\n\ndef solve_problem():\n    lines = get_input()\n    number_of_test_cases = get_number_of_test_cases(lines)\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(lines, test_case_number)\n        array = get_array(lines, test_case_number, array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        print(output)\n\n\nsolve_problem()\n"
    },
    {
      "index": 6,
      "text": "\n\n\ndef get_input():\n    return open(\"input.txt\", \"r\").read()\ndef get_output():\n    return open(\"output.txt\", \"w\")\n\n\ndef get_number_of_test_cases():\n    return int(get_input())\n\n\ndef get_array_length(test_case_number):\n    return int(get_input())\n\n\ndef get_array(array_length):\n    return [int(x) for x in get_input().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return \"YES\"\n    return \"NO\"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(test_case_number)\n        array = get_array(array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        get_output().write(output)\n\n\nsolve_problem()\n"
    },
    {
      "index": 7,
      "text": "\n\n\ndef get_input():\n    return open(\"input.txt\", \"r\").read()\n\n\ndef get_output():\n    return open(\"output.txt\", \"w\").write()\n\n\ndef get_number_of_test_cases():\n    return int(get_input().split()[test_case_number - 1])\n\n\ndef get_array_length(test_case_number):\n    return int(get_input().split()[0])\n\n\ndef get_array(array_length):\n    return [int(x) for x in get_input().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return \"YES\"\n    return \"NO\"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(test_case_number)\n        array = get_array(array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        get_output(output)\n\n\nsolve_problem()\n"
    }
  ],
  "created": 1650418675,
  "object": "edit"
}
2022-04-20 01:38:09.767271 fix syntax errors 8 ['\n\n\ndef get_input():\n    return open("input.txt", "r")\ndef get_output():\n    return open("output.txt", "w")\n\n\ndef get_number_of_test_cases():\n    return int(input())\n\n\ndef get_array_length(test_case_number):\n    return int(input())\n\n\ndef get_array(array_length):\n    return [int(x) for x in input().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return "YES"\n    return "NO"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(test_case_number)\n        array = get_array(array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        print(output)\n\n\nsolve_problem()\n', "\ndef get_input():\n    return open('input.txt', 'r')\n\n\ndef get_output():\n    return open('output.txt', 'w')\n\n\ndef get_number_of_test_cases():\n    return int(input())\n\n\ndef get_array_length(test_case_number):\n    return int(input())\n\n\ndef get_array(array_length):\n    return [int(x) for x in input().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return 'YES'\n    return 'NO'\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(test_case_number)\n        array = get_array(array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        print(output)\n\n\nsolve_problem()\n", '\ndef get_input():\n    return open("input.txt", "r")\n\n\ndef get_output():\n    return open("output.txt", "w")\n\n\ndef get_number_of_test_cases():\n    return int(get_input().readline())\n\n\ndef get_array_length(test_case_number):\n    return int(get_input().readline())\n\n\ndef get_array(array_length):\n    return [int(x) for x in get_input().readline().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return "YES"\n    return "NO"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(test_case_number)\n        array = get_array(array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        print(output, file=get_output())\n\n\nsolve_problem()\n', '\ndef get_input():\n    return open("input.txt", "r").read()\n\n\ndef get_output():\n    return open("output.txt", "w")\n\n\ndef get_number_of_test_cases(input):\n    return int(input.pop(0))\n\n\ndef get_array_length(input):\n    return int(input.pop(0))\n\n\ndef get_array(input, array_length):\n    return [int(x) for x in input.pop(0).split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return "YES"\n    return "NO"\n\n\ndef solve_problem():\n    input = get_input().split("\\n")\n    output = get_output()\n    number_of_test_cases = get_number_of_test_cases(input)\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(input)\n        array = get_array(input, array_length)\n        output.write(solve_test_case(array))\n        output.write("\\n")\n\n\nsolve_problem()\n', '\n\n\ndef get_input():\n    return open("input.txt", "r").readlines()\n\n\ndef get_output():\n    return open("output.txt", "w")\n\n\ndef get_number_of_test_cases():\n    return int(get_input()[0])\n\n\ndef get_array_length(test_case_number):\n    return int(get_input()[test_case_number])\n\n\ndef get_array(array_length):\n    return [int(x) for x in get_input()[test_case_number + 1].split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return "YES"\n    return "NO"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(test_case_number)\n        array = get_array(array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        get_output().write(output)\n\n\nsolve_problem()\n', '\ndef get_input():\n    return open("input.txt", "r").readlines()\n\n\ndef get_output():\n    return open("output.txt", "w")\n\n\ndef get_number_of_test_cases(lines):\n    return int(lines[0])\n\n\ndef get_array_length(lines, test_case_number):\n    return int(lines[test_case_number])\n\n\ndef get_array(lines, test_case_number, array_length):\n    return [int(x) for x in lines[test_case_number + 1].split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return "YES"\n    return "NO"\n\n\ndef solve_problem():\n    lines = get_input()\n    number_of_test_cases = get_number_of_test_cases(lines)\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(lines, test_case_number)\n        array = get_array(lines, test_case_number, array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        print(output)\n\n\nsolve_problem()\n', '\n\n\ndef get_input():\n    return open("input.txt", "r").read()\ndef get_output():\n    return open("output.txt", "w")\n\n\ndef get_number_of_test_cases():\n    return int(get_input())\n\n\ndef get_array_length(test_case_number):\n    return int(get_input())\n\n\ndef get_array(array_length):\n    return [int(x) for x in get_input().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return "YES"\n    return "NO"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(test_case_number)\n        array = get_array(array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        get_output().write(output)\n\n\nsolve_problem()\n', '\n\n\ndef get_input():\n    return open("input.txt", "r").read()\n\n\ndef get_output():\n    return open("output.txt", "w").write()\n\n\ndef get_number_of_test_cases():\n    return int(get_input().split()[test_case_number - 1])\n\n\ndef get_array_length(test_case_number):\n    return int(get_input().split()[0])\n\n\ndef get_array(array_length):\n    return [int(x) for x in get_input().split()]\n\n\ndef is_array_palindrome(array):\n    return array == array[::-1]\n\n\ndef get_all_subsequences(array):\n    return [array[i:j] for i in range(len(array)) for j in range(i + 1, len(array) + 1)]\n\n\ndef solve_test_case(test_case_number, array_length, array):\n    for subsequence in get_all_subsequences(array):\n        if len(subsequence) >= 3 and is_array_palindrome(subsequence):\n            return "YES"\n    return "NO"\n\n\ndef solve_problem():\n    number_of_test_cases = get_number_of_test_cases()\n    for test_case_number in range(1, number_of_test_cases + 1):\n        array_length = get_array_length(test_case_number)\n        array = get_array(array_length)\n        output = solve_test_case(test_case_number, array_length, array)\n        get_output(output)\n\n\nsolve_problem()\n']
2022-04-20 01:38:09.767395 size on output set 8
