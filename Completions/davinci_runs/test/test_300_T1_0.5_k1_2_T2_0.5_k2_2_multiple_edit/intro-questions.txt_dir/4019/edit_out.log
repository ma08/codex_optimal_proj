2022-04-24 05:34:03.772368 num operations 2
2022-04-24 05:34:03.772391 size on input set 1
2022-04-24 05:34:03.772575 using api key kouti
2022-04-24 05:34:09.524155 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom collections import defaultdict\n\n\ndef dfs(u, p):\n    for v in adj[u]:\n        if v != p:\n            dfs(v, u)\n            dp[u] += dp[v]\n\n\ndef solve(n, m, d):\n    global adj, dp\n    adj = defaultdict(list)\n    for _ in range(m):\n        u, v = map(int, input().split())\n        adj[u].append(v)\n        adj[v].append(u)\n\n    dp = [1] * (n + 1)\n    dfs(1, -1)\n\n    for i in range(1, n + 1):\n        if dp[i] == d:\n            break\n    else:\n        return \"NO\"\n\n    ans = [\"YES\"]\n    for u in range(1, n + 1):\n        for v in adj[u]:\n            if u < v and dp[v] != d:\n                ans.append(f'{u} {v}')\n\n    return '\\n'.join(ans)\n\n\ndef main():\n    n, m, d = map(int, input().split())\n    print(solve(n, m, d))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nfrom collections import defaultdict\n\n\ndef dfs(u, p):\n    for v in adj[u]:\n        if v != p:\n            dfs(v, u)\n            dp[u] += dp[v]\n\n\ndef solve(n, m, d):\n    global adj, dp\n    adj = defaultdict(list)\n    for _ in range(m):\n        u, v = map(int, input().split())\n        adj[u].append(v)\n        adj[v].append(u)\n\n    dp = [1] * (n + 1)\n    dfs(1, -1)\n\n    for i in range(1, n + 1):\n        if dp[i] == d:\n            break\n    else:\n        return \"NO\"\n\n    ans = [\"YES\"]\n    for u in range(1, n + 1):\n        for v in adj[u]:\n            if u < v and dp[v] != d:\n                ans.append(f'{u} {v}')\n\n    return '\\n'.join(ans)\n\n\ndef main():\n    n, m, d = map(int, input().split())\n    print(solve(n, m, d))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650778443,
  "object": "edit"
}
2022-04-24 05:34:09.524381 fix spelling mistakes 2 ['\nfrom collections import defaultdict\n\n\ndef dfs(u, p):\n    for v in adj[u]:\n        if v != p:\n            dfs(v, u)\n            dp[u] += dp[v]\n\n\ndef solve(n, m, d):\n    global adj, dp\n    adj = defaultdict(list)\n    for _ in range(m):\n        u, v = map(int, input().split())\n        adj[u].append(v)\n        adj[v].append(u)\n\n    dp = [1] * (n + 1)\n    dfs(1, -1)\n\n    for i in range(1, n + 1):\n        if dp[i] == d:\n            break\n    else:\n        return "NO"\n\n    ans = ["YES"]\n    for u in range(1, n + 1):\n        for v in adj[u]:\n            if u < v and dp[v] != d:\n                ans.append(f\'{u} {v}\')\n\n    return \'\\n\'.join(ans)\n\n\ndef main():\n    n, m, d = map(int, input().split())\n    print(solve(n, m, d))\n\n\nif __name__ == \'__main__\':\n    main()\n', '\nfrom collections import defaultdict\n\n\ndef dfs(u, p):\n    for v in adj[u]:\n        if v != p:\n            dfs(v, u)\n            dp[u] += dp[v]\n\n\ndef solve(n, m, d):\n    global adj, dp\n    adj = defaultdict(list)\n    for _ in range(m):\n        u, v = map(int, input().split())\n        adj[u].append(v)\n        adj[v].append(u)\n\n    dp = [1] * (n + 1)\n    dfs(1, -1)\n\n    for i in range(1, n + 1):\n        if dp[i] == d:\n            break\n    else:\n        return "NO"\n\n    ans = ["YES"]\n    for u in range(1, n + 1):\n        for v in adj[u]:\n            if u < v and dp[v] != d:\n                ans.append(f\'{u} {v}\')\n\n    return \'\\n\'.join(ans)\n\n\ndef main():\n    n, m, d = map(int, input().split())\n    print(solve(n, m, d))\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-24 05:34:09.524422 size on output set 2
2022-04-24 05:34:09.524429 size on input set 2
2022-04-24 05:34:09.524549 using api key sunu
2022-04-24 05:34:24.190227 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "from collections import defaultdict\n\n\ndef dfs(u, p):\n    for v in adj[u]:\n        if v != p:\n            dfs(v, u)\n            dp[u] += dp[v]\n\n\ndef solve(n, m, d):\n    global adj, dp\n    adj = defaultdict(list)\n    for _ in range(m):\n        u, v = map(int, input().split())\n        adj[u].append(v)\n        adj[v].append(u)\n\n    dp = [1] * (n + 1)\n    dfs(1, -1)\n\n    for i in range(1, n + 1):\n        if dp[i] == d:\n            break\n    else:\n        return \"NO\"\n\n    ans = [\"YES\"]\n    for u in range(1, n + 1):\n        for v in adj[u]:\n            if u < v and dp[v] != d:\n                ans.append(f'{u} {v}')\n\n    return '\\n'.join(ans)\n\n\ndef main():\n    n, m, d = map(int, input().split())\n    print(solve(n, m, d))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "def solve():\n    pass\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650778449,
  "object": "edit"
}
2022-04-24 05:34:24.190404 fix syntax errors 2 ['from collections import defaultdict\n\n\ndef dfs(u, p):\n    for v in adj[u]:\n        if v != p:\n            dfs(v, u)\n            dp[u] += dp[v]\n\n\ndef solve(n, m, d):\n    global adj, dp\n    adj = defaultdict(list)\n    for _ in range(m):\n        u, v = map(int, input().split())\n        adj[u].append(v)\n        adj[v].append(u)\n\n    dp = [1] * (n + 1)\n    dfs(1, -1)\n\n    for i in range(1, n + 1):\n        if dp[i] == d:\n            break\n    else:\n        return "NO"\n\n    ans = ["YES"]\n    for u in range(1, n + 1):\n        for v in adj[u]:\n            if u < v and dp[v] != d:\n                ans.append(f\'{u} {v}\')\n\n    return \'\\n\'.join(ans)\n\n\ndef main():\n    n, m, d = map(int, input().split())\n    print(solve(n, m, d))\n\nif __name__ == \'__main__\':\n    main()\n', "def solve():\n    pass\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-24 05:34:24.190556 using api key derek
2022-04-24 05:34:36.019770 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "print(1, 2, 3, sep='\\n', end='\\n')\n"
    },
    {
      "index": 1,
      "text": "\nfrom collections import defaultdict\n\n\ndef dfs(u, p):\n    for v in adj[u]:\n        if v != p:\n            dfs(v, u)\n            dp[u] += dp[v]\n\n\ndef solve(n, m, k):\n    global adj, dp\n    adj = defaultdict(list)\n    for _ in range(m):\n        u, v = map(int, input().split())\n        adj[u].append(v)\n        adj[v].append(u)\n\n    dp = [1] * (n+1)\n    dfs(1, -1)\n\n    for i in range(1, n+1):\n        if dp[i] == k:\n            break\n    else:\n        return \"NO\"\n\n    ans = [\"YES\"]\n    for u in range(1, n+1):\n        for v in adj[u]:\n            if u < v and dp[v] != k:\n                ans.append(f'{u} {v}')\n\n    return '\\n'.join(ans)\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    print(solve(n, m, k))\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650778464,
  "object": "edit"
}
2022-04-24 05:34:36.019956 fix syntax errors 2 ["print(1, 2, 3, sep='\\n', end='\\n')\n", '\nfrom collections import defaultdict\n\n\ndef dfs(u, p):\n    for v in adj[u]:\n        if v != p:\n            dfs(v, u)\n            dp[u] += dp[v]\n\n\ndef solve(n, m, k):\n    global adj, dp\n    adj = defaultdict(list)\n    for _ in range(m):\n        u, v = map(int, input().split())\n        adj[u].append(v)\n        adj[v].append(u)\n\n    dp = [1] * (n+1)\n    dfs(1, -1)\n\n    for i in range(1, n+1):\n        if dp[i] == k:\n            break\n    else:\n        return "NO"\n\n    ans = ["YES"]\n    for u in range(1, n+1):\n        for v in adj[u]:\n            if u < v and dp[v] != k:\n                ans.append(f\'{u} {v}\')\n\n    return \'\\n\'.join(ans)\n\n\ndef main():\n    n, m, k = map(int, input().split())\n    print(solve(n, m, k))\n\n\nif __name__ == \'__main__\':\n    main()\n']
2022-04-24 05:34:36.019983 size on output set 4
2022-04-24 05:34:36.019996 num operations 2
2022-04-24 05:34:36.020001 size on input set 1
2022-04-24 05:34:36.020123 using api key sunu
2022-04-24 05:34:46.600698 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nn, m, d = [int(x) for x in input().split()]\nedges = []\nfor i in range(m):\n    v, u = [int(x) for x in input().split()]\n    edges.append((v, u))\n    edges.append((u, v))\n\nif d > n - 1 or d < 1 or not m >= n - 1:\n    print(\"NO\")\n    exit()\n\nif d == 1:\n    print(\"YES\")\n    for i in range(n - 1):\n        print(edges[i][0], edges[i][1])\n    exit()\n\nif d == n - 1:\n    print(\"YES\")\n    for i in range(n - 1):\n        print(edges[i][1], edges[i][0])\n    exit()\n\n# d = 2\nif d == 2:\n    if n == 3:\n        print(\"YES\")\n        print(edges[0][0], edges[0][1])\n        print(edges[1][0], edges[1][1])\n        exit()\n    if n == 4:\n        if m == 3:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[3][0], edges[3][1])\n            exit()\n\n# d = 3\nif d == 3:\n    if n == 4:\n        if m == 3:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            exit()\n    if n == 5:\n        if m == 4:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n    if n == 6:\n        if m == 5:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[5][0], edges[5][1])\n            exit()\n\n# d = 4\nif d == 4:\n    if n == 5:\n        if m == 4:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            exit()\n    if n == 6:\n        if m == 5:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n\n# d = 5\nif d == 5:\n    if n == 6:\n        if m == 5:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n"
    },
    {
      "index": 1,
      "text": "\n\nn, m, D = [int(x) for x in input().split()]\nedges = []\nfor i in range(m):\n    v, u = [int(x) for x in input().split()]\n    edges.append((v, u))\n    edges.append((u, v))\n\nif D > n - 1 or D < 1 or m < n - 1:\n    print(\"NO\")\n    exit()\n\nif D == 1:\n    print(\"YES\")\n    for i in range(n - 1):\n        print(edges[i][0], edges[i][1])\n    exit()\n\nif D == n - 1:\n    print(\"YES\")\n    for i in range(n - 1):\n        print(edges[i][1], edges[i][0])\n    exit()\n\n# D = 2\nif D == 2:\n    if n == 3:\n        print(\"YES\")\n        print(edges[0][0], edges[0][1])\n        print(edges[1][0], edges[1][1])\n        exit()\n    if n == 4:\n        if m == 3:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[3][0], edges[3][1])\n            exit()\n\n# D = 3\nif D == 3:\n    if n == 4:\n        if m == 3:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            exit()\n    if n == 5:\n        if m == 4:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n    if n == 6:\n        if m == 5:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[5][0], edges[5][1])\n            exit()\n\n# D = 4\nif D == 4:\n    if n == 5:\n        if m == 4:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            exit()\n    if n == 6:\n        if m == 5:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n\n# D = 5\nif D == 5:\n    if n == 6:\n        if m == 5:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n"
    }
  ],
  "created": 1650778476,
  "object": "edit"
}
2022-04-24 05:34:46.600997 fix spelling mistakes 2 ['\nn, m, d = [int(x) for x in input().split()]\nedges = []\nfor i in range(m):\n    v, u = [int(x) for x in input().split()]\n    edges.append((v, u))\n    edges.append((u, v))\n\nif d > n - 1 or d < 1 or not m >= n - 1:\n    print("NO")\n    exit()\n\nif d == 1:\n    print("YES")\n    for i in range(n - 1):\n        print(edges[i][0], edges[i][1])\n    exit()\n\nif d == n - 1:\n    print("YES")\n    for i in range(n - 1):\n        print(edges[i][1], edges[i][0])\n    exit()\n\n# d = 2\nif d == 2:\n    if n == 3:\n        print("YES")\n        print(edges[0][0], edges[0][1])\n        print(edges[1][0], edges[1][1])\n        exit()\n    if n == 4:\n        if m == 3:\n            print("NO")\n            exit()\n        else:\n            print("YES")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[3][0], edges[3][1])\n            exit()\n\n# d = 3\nif d == 3:\n    if n == 4:\n        if m == 3:\n            print("NO")\n            exit()\n        else:\n            print("YES")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            exit()\n    if n == 5:\n        if m == 4:\n            print("NO")\n            exit()\n        else:\n            print("YES")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n    if n == 6:\n        if m == 5:\n            print("NO")\n            exit()\n        else:\n            print("YES")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[5][0], edges[5][1])\n            exit()\n\n# d = 4\nif d == 4:\n    if n == 5:\n        if m == 4:\n            print("NO")\n            exit()\n        else:\n            print("YES")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            exit()\n    if n == 6:\n        if m == 5:\n            print("NO")\n            exit()\n        else:\n            print("YES")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n\n# d = 5\nif d == 5:\n    if n == 6:\n        if m == 5:\n            print("NO")\n            exit()\n        else:\n            print("YES")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n', '\n\nn, m, D = [int(x) for x in input().split()]\nedges = []\nfor i in range(m):\n    v, u = [int(x) for x in input().split()]\n    edges.append((v, u))\n    edges.append((u, v))\n\nif D > n - 1 or D < 1 or m < n - 1:\n    print("NO")\n    exit()\n\nif D == 1:\n    print("YES")\n    for i in range(n - 1):\n        print(edges[i][0], edges[i][1])\n    exit()\n\nif D == n - 1:\n    print("YES")\n    for i in range(n - 1):\n        print(edges[i][1], edges[i][0])\n    exit()\n\n# D = 2\nif D == 2:\n    if n == 3:\n        print("YES")\n        print(edges[0][0], edges[0][1])\n        print(edges[1][0], edges[1][1])\n        exit()\n    if n == 4:\n        if m == 3:\n            print("NO")\n            exit()\n        else:\n            print("YES")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[3][0], edges[3][1])\n            exit()\n\n# D = 3\nif D == 3:\n    if n == 4:\n        if m == 3:\n            print("NO")\n            exit()\n        else:\n            print("YES")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            exit()\n    if n == 5:\n        if m == 4:\n            print("NO")\n            exit()\n        else:\n            print("YES")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n    if n == 6:\n        if m == 5:\n            print("NO")\n            exit()\n        else:\n            print("YES")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[5][0], edges[5][1])\n            exit()\n\n# D = 4\nif D == 4:\n    if n == 5:\n        if m == 4:\n            print("NO")\n            exit()\n        else:\n            print("YES")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            exit()\n    if n == 6:\n        if m == 5:\n            print("NO")\n            exit()\n        else:\n            print("YES")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n\n# D = 5\nif D == 5:\n    if n == 6:\n        if m == 5:\n            print("NO")\n            exit()\n        else:\n            print("YES")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n']
2022-04-24 05:34:46.601066 size on output set 2
2022-04-24 05:34:46.601073 size on input set 2
2022-04-24 05:34:46.601196 using api key jaanu
2022-04-24 05:34:53.660870 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#! /usr/bin/env python3\n\nn, m, D = [int(x) for x in input().split()]\nedges = []\nfor i in range(m):\n    v, u = [int(x) for x in input().split()]\n    edges.append((v, u))\n    edges.append((u, v))\n\nif D > n - 1 or D < 1 or m < n - 1:\n    print(\"NO\")\n    exit()\n\nif D == 1:\n    print(\"YES\")\n    for i in range(n - 1):\n        print(edges[i][0], edges[i][1])\n    exit()\n\nif D == n - 1:\n    print(\"YES\")\n    for i in range(n - 1):\n        print(edges[i][1], edges[i][0])\n    exit()\n\n# D = 2\nif D == 2:\n    if n == 3:\n        print(\"YES\")\n        print(edges[0][0], edges[0][1])\n        print(edges[1][0], edges[1][1])\n        exit()\n    if n == 4:\n        if m == 3:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[3][0], edges[3][1])\n            exit()\n\n# D = 3\nif D == 3:\n    if n == 4:\n        if m == 3:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            exit()\n    if n == 5:\n        if m == 4:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n    if n == 6:\n        if m == 5:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[5][0], edges[5][1])\n            exit()\n\n# D = 4\nif D == 4:\n    if n == 5:\n        if m == 4:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            exit()\n    if n == 6:\n        if m == 5:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n\n# D = 5\nif D == 5:\n    if n == 6:\n        if m == 5:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n"
    },
    {
      "index": 1,
      "text": "\nn, m, D = map(int, input().split())\nedges = []\nfor i in range(m):\n    v, u = map(int, input().split())\n    edges.append((v, u))\n    edges.append((u, v))\n\nif D > n - 1 or D < 1 or m < n - 1:\n    print(\"NO\")\n    exit()\n\nif D == 1:\n    print(\"YES\")\n    for i in range(n - 1):\n        print(edges[i][0], edges[i][1])\n    exit()\n\nif D == n - 1:\n    print(\"YES\")\n    for i in range(n - 1):\n        print(edges[i][1], edges[i][0])\n    exit()\n\n# D = 2\nif D == 2:\n    if n == 3:\n        print(\"YES\")\n        print(edges[0][0], edges[0][1])\n        print(edges[1][0], edges[1][1])\n        exit()\n    if n == 4:\n        if m == 3:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[3][0], edges[3][1])\n            exit()\n\n# D = 3\nif D == 3:\n    if n == 4:\n        if m == 3:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            exit()\n    if n == 5:\n        if m == 4:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n    if n == 6:\n        if m == 5:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[5][0], edges[5][1])\n            exit()\n\n# D = 4\nif D == 4:\n    if n == 5:\n        if m == 4:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            exit()\n    if n == 6:\n        if m == 5:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n\n# D = 5\nif D == 5:\n    if n == 6:\n        if m == 5:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n"
    }
  ],
  "created": 1650778486,
  "object": "edit"
}
2022-04-24 05:34:53.661197 fix syntax errors 2 ['#! /usr/bin/env python3\n\nn, m, D = [int(x) for x in input().split()]\nedges = []\nfor i in range(m):\n    v, u = [int(x) for x in input().split()]\n    edges.append((v, u))\n    edges.append((u, v))\n\nif D > n - 1 or D < 1 or m < n - 1:\n    print("NO")\n    exit()\n\nif D == 1:\n    print("YES")\n    for i in range(n - 1):\n        print(edges[i][0], edges[i][1])\n    exit()\n\nif D == n - 1:\n    print("YES")\n    for i in range(n - 1):\n        print(edges[i][1], edges[i][0])\n    exit()\n\n# D = 2\nif D == 2:\n    if n == 3:\n        print("YES")\n        print(edges[0][0], edges[0][1])\n        print(edges[1][0], edges[1][1])\n        exit()\n    if n == 4:\n        if m == 3:\n            print("NO")\n            exit()\n        else:\n            print("YES")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[3][0], edges[3][1])\n            exit()\n\n# D = 3\nif D == 3:\n    if n == 4:\n        if m == 3:\n            print("NO")\n            exit()\n        else:\n            print("YES")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            exit()\n    if n == 5:\n        if m == 4:\n            print("NO")\n            exit()\n        else:\n            print("YES")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n    if n == 6:\n        if m == 5:\n            print("NO")\n            exit()\n        else:\n            print("YES")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[5][0], edges[5][1])\n            exit()\n\n# D = 4\nif D == 4:\n    if n == 5:\n        if m == 4:\n            print("NO")\n            exit()\n        else:\n            print("YES")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            exit()\n    if n == 6:\n        if m == 5:\n            print("NO")\n            exit()\n        else:\n            print("YES")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n\n# D = 5\nif D == 5:\n    if n == 6:\n        if m == 5:\n            print("NO")\n            exit()\n        else:\n            print("YES")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n', '\nn, m, D = map(int, input().split())\nedges = []\nfor i in range(m):\n    v, u = map(int, input().split())\n    edges.append((v, u))\n    edges.append((u, v))\n\nif D > n - 1 or D < 1 or m < n - 1:\n    print("NO")\n    exit()\n\nif D == 1:\n    print("YES")\n    for i in range(n - 1):\n        print(edges[i][0], edges[i][1])\n    exit()\n\nif D == n - 1:\n    print("YES")\n    for i in range(n - 1):\n        print(edges[i][1], edges[i][0])\n    exit()\n\n# D = 2\nif D == 2:\n    if n == 3:\n        print("YES")\n        print(edges[0][0], edges[0][1])\n        print(edges[1][0], edges[1][1])\n        exit()\n    if n == 4:\n        if m == 3:\n            print("NO")\n            exit()\n        else:\n            print("YES")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[3][0], edges[3][1])\n            exit()\n\n# D = 3\nif D == 3:\n    if n == 4:\n        if m == 3:\n            print("NO")\n            exit()\n        else:\n            print("YES")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            exit()\n    if n == 5:\n        if m == 4:\n            print("NO")\n            exit()\n        else:\n            print("YES")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n    if n == 6:\n        if m == 5:\n            print("NO")\n            exit()\n        else:\n            print("YES")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[5][0], edges[5][1])\n            exit()\n\n# D = 4\nif D == 4:\n    if n == 5:\n        if m == 4:\n            print("NO")\n            exit()\n        else:\n            print("YES")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            exit()\n    if n == 6:\n        if m == 5:\n            print("NO")\n            exit()\n        else:\n            print("YES")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n\n# D = 5\nif D == 5:\n    if n == 6:\n        if m == 5:\n            print("NO")\n            exit()\n        else:\n            print("YES")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n']
2022-04-24 05:34:53.661388 using api key kouti
2022-04-24 05:34:59.319549 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "n, m, d = [int(x) for x in input().split()]\nedges = []\nfor i in range(m):\n    v, u = [int(x) for x in input().split()]\n    edges.append((v, u))\n    edges.append((u, v))\n\nif d > n - 1 or d < 1 or not m >= n - 1:\n    print(\"NO\")\n    exit()\n\nif d == 1:\n    print(\"YES\")\n    for i in range(n - 1):\n        print(edges[i][0], edges[i][1])\n    exit()\n\nif d == n - 1:\n    print(\"YES\")\n    for i in range(n - 1):\n        print(edges[i][1], edges[i][0])\n    exit()\n\n# d = 2\nif d == 2:\n    if n == 3:\n        print(\"YES\")\n        print(edges[0][0], edges[0][1])\n        print(edges[1][0], edges[1][1])\n        exit()\n    if n == 4:\n        if m == 3:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[3][0], edges[3][1])\n            exit()\n\n# d = 3\nif d == 3:\n    if n == 4:\n        if m == 3:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            exit()\n    if n == 5:\n        if m == 4:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n    if n == 6:\n        if m == 5:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[5][0], edges[5][1])\n            exit()\n\n# d = 4\nif d == 4:\n    if n == 5:\n        if m == 4:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            exit()\n    if n == 6:\n        if m == 5:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n\n# d = 5\nif d == 5:\n    if n == 6:\n        if m == 5:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n"
    },
    {
      "index": 1,
      "text": "n, m, d = [int(x) for x in input().split()]\nedges = []\nfor i in range(m):\n    v, u = [int(x) for x in input().split()]\n    edges.append((v, u))\n    edges.append((u, v))\n\nif d > n - 1 or d < 1 or not m >= n - 1:\n    print(\"NO\")\n    exit()\n\nif d == 1:\n    print(\"YES\")\n    for i in range(n - 1):\n        print(edges[i][0], edges[i][1])\n    exit()\n\nif d == n - 1:\n    print(\"YES\")\n    for i in range(n - 1):\n        print(edges[i][1], edges[i][0])\n    exit()\n\n# d = 2\nif d == 2:\n    if n == 3:\n        print(\"YES\")\n        print(edges[0][0], edges[0][1])\n        print(edges[1][0], edges[1][1])\n        exit()\n    if n == 4:\n        if m == 3:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[3][0], edges[3][1])\n            exit()\n\n# d = 3\nif d == 3:\n    if n == 4:\n        if m == 3:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            exit()\n    if n == 5:\n        if m == 4:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n    if n == 6:\n        if m == 5:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[5][0], edges[5][1])\n            exit()\n\n# d = 4\nif d == 4:\n    if n == 5:\n        if m == 4:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            exit()\n    if n == 6:\n        if m == 5:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n\n# d = 5\nif d == 5:\n    if n == 6:\n        if m == 5:\n            print(\"NO\")\n            exit()\n        else:\n            print(\"YES\")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n"
    }
  ],
  "created": 1650778493,
  "object": "edit"
}
2022-04-24 05:34:59.319878 fix syntax errors 2 ['n, m, d = [int(x) for x in input().split()]\nedges = []\nfor i in range(m):\n    v, u = [int(x) for x in input().split()]\n    edges.append((v, u))\n    edges.append((u, v))\n\nif d > n - 1 or d < 1 or not m >= n - 1:\n    print("NO")\n    exit()\n\nif d == 1:\n    print("YES")\n    for i in range(n - 1):\n        print(edges[i][0], edges[i][1])\n    exit()\n\nif d == n - 1:\n    print("YES")\n    for i in range(n - 1):\n        print(edges[i][1], edges[i][0])\n    exit()\n\n# d = 2\nif d == 2:\n    if n == 3:\n        print("YES")\n        print(edges[0][0], edges[0][1])\n        print(edges[1][0], edges[1][1])\n        exit()\n    if n == 4:\n        if m == 3:\n            print("NO")\n            exit()\n        else:\n            print("YES")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[3][0], edges[3][1])\n            exit()\n\n# d = 3\nif d == 3:\n    if n == 4:\n        if m == 3:\n            print("NO")\n            exit()\n        else:\n            print("YES")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            exit()\n    if n == 5:\n        if m == 4:\n            print("NO")\n            exit()\n        else:\n            print("YES")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n    if n == 6:\n        if m == 5:\n            print("NO")\n            exit()\n        else:\n            print("YES")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[5][0], edges[5][1])\n            exit()\n\n# d = 4\nif d == 4:\n    if n == 5:\n        if m == 4:\n            print("NO")\n            exit()\n        else:\n            print("YES")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            exit()\n    if n == 6:\n        if m == 5:\n            print("NO")\n            exit()\n        else:\n            print("YES")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n\n# d = 5\nif d == 5:\n    if n == 6:\n        if m == 5:\n            print("NO")\n            exit()\n        else:\n            print("YES")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n', 'n, m, d = [int(x) for x in input().split()]\nedges = []\nfor i in range(m):\n    v, u = [int(x) for x in input().split()]\n    edges.append((v, u))\n    edges.append((u, v))\n\nif d > n - 1 or d < 1 or not m >= n - 1:\n    print("NO")\n    exit()\n\nif d == 1:\n    print("YES")\n    for i in range(n - 1):\n        print(edges[i][0], edges[i][1])\n    exit()\n\nif d == n - 1:\n    print("YES")\n    for i in range(n - 1):\n        print(edges[i][1], edges[i][0])\n    exit()\n\n# d = 2\nif d == 2:\n    if n == 3:\n        print("YES")\n        print(edges[0][0], edges[0][1])\n        print(edges[1][0], edges[1][1])\n        exit()\n    if n == 4:\n        if m == 3:\n            print("NO")\n            exit()\n        else:\n            print("YES")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[3][0], edges[3][1])\n            exit()\n\n# d = 3\nif d == 3:\n    if n == 4:\n        if m == 3:\n            print("NO")\n            exit()\n        else:\n            print("YES")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            exit()\n    if n == 5:\n        if m == 4:\n            print("NO")\n            exit()\n        else:\n            print("YES")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n    if n == 6:\n        if m == 5:\n            print("NO")\n            exit()\n        else:\n            print("YES")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[5][0], edges[5][1])\n            exit()\n\n# d = 4\nif d == 4:\n    if n == 5:\n        if m == 4:\n            print("NO")\n            exit()\n        else:\n            print("YES")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            exit()\n    if n == 6:\n        if m == 5:\n            print("NO")\n            exit()\n        else:\n            print("YES")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n\n# d = 5\nif d == 5:\n    if n == 6:\n        if m == 5:\n            print("NO")\n            exit()\n        else:\n            print("YES")\n            print(edges[0][0], edges[0][1])\n            print(edges[1][0], edges[1][1])\n            print(edges[2][0], edges[2][1])\n            print(edges[3][0], edges[3][1])\n            print(edges[4][0], edges[4][1])\n            exit()\n']
2022-04-24 05:34:59.319976 size on output set 3
