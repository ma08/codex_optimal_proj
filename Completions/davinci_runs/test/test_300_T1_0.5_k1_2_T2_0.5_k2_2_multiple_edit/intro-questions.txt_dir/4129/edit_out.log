2022-04-24 07:10:26.772398 num operations 2
2022-04-24 07:10:26.772418 size on input set 1
2022-04-24 07:10:26.772561 using api key soukgp
2022-04-24 07:10:34.280954 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nfrom collections import defaultdict\n\ndef dfs(v, visited):\n\tvisited[v] = True\n\tfor u in adj_list[v]:\n\t\tif not visited[u]:\n\t\t\tdfs(u, visited)\n\ndef main():\n\tn, m, s = map(int, sys.stdin.readline().split())\n\tadj_list = defaultdict(list)\n\tfor _ in range(m):\n\t\tu, v = map(int, sys.stdin.readline().split())\n\t\tadj_list[u].append(v)\n\tvisited = [False] * (n + 1)\n\tdfs(s, visited)\n\tcount = 0\n\tfor v in range(1, n + 1):\n\t\tif not visited[v]:\n\t\t\tfor u in adj_list[v]:\n\t\t\t\tif visited[u]:\n\t\t\t\t\tcount += 1\n\t\t\t\t\tbreak\n\tprint count\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nfrom collections import defaultdict\n\ndef dfs(v, visited):\n\tvisited[v] = True\n\tfor u in rev_adj_list[v]:\n\t\tif not visited[u]:\n\t\t\tdfs(u, visited)\n\ndef main():\n\tglobal rev_adj_list\n\tn, m, s = map(int, sys.stdin.readline().split())\n\tadj_list = defaultdict(list)\n\trev_adj_list = defaultdict(list)\n\tfor _ in range(m):\n\t\tu, v = map(int, sys.stdin.readline().split())\n\t\tadj_list[u].append(v)\n\t\trev_adj_list[v].append(u)\n\tvisited = [False] * (n + 1)\n\tdfs(s, visited)\n\tcount = 0\n\tfor v in range(1, n + 1):\n\t\tif not visited[v]:\n\t\t\tfor u in adj_list[v]:\n\t\t\t\tif not visited[u]:\n\t\t\t\t\tcount += 1\n\t\t\t\t\tbreak\n\tprint count\n\nif __name__ == '__main__':\n\tmain()\n"
    }
  ],
  "created": 1650784226,
  "object": "edit"
}
2022-04-24 07:10:34.281211 fix spelling mistakes 2 ["\n\nimport sys\nfrom collections import defaultdict\n\ndef dfs(v, visited):\n\tvisited[v] = True\n\tfor u in adj_list[v]:\n\t\tif not visited[u]:\n\t\t\tdfs(u, visited)\n\ndef main():\n\tn, m, s = map(int, sys.stdin.readline().split())\n\tadj_list = defaultdict(list)\n\tfor _ in range(m):\n\t\tu, v = map(int, sys.stdin.readline().split())\n\t\tadj_list[u].append(v)\n\tvisited = [False] * (n + 1)\n\tdfs(s, visited)\n\tcount = 0\n\tfor v in range(1, n + 1):\n\t\tif not visited[v]:\n\t\t\tfor u in adj_list[v]:\n\t\t\t\tif visited[u]:\n\t\t\t\t\tcount += 1\n\t\t\t\t\tbreak\n\tprint count\n\nif __name__ == '__main__':\n\tmain()\n", "\n\nimport sys\nfrom collections import defaultdict\n\ndef dfs(v, visited):\n\tvisited[v] = True\n\tfor u in rev_adj_list[v]:\n\t\tif not visited[u]:\n\t\t\tdfs(u, visited)\n\ndef main():\n\tglobal rev_adj_list\n\tn, m, s = map(int, sys.stdin.readline().split())\n\tadj_list = defaultdict(list)\n\trev_adj_list = defaultdict(list)\n\tfor _ in range(m):\n\t\tu, v = map(int, sys.stdin.readline().split())\n\t\tadj_list[u].append(v)\n\t\trev_adj_list[v].append(u)\n\tvisited = [False] * (n + 1)\n\tdfs(s, visited)\n\tcount = 0\n\tfor v in range(1, n + 1):\n\t\tif not visited[v]:\n\t\t\tfor u in adj_list[v]:\n\t\t\t\tif not visited[u]:\n\t\t\t\t\tcount += 1\n\t\t\t\t\tbreak\n\tprint count\n\nif __name__ == '__main__':\n\tmain()\n"]
2022-04-24 07:10:34.281248 size on output set 2
2022-04-24 07:10:34.281256 size on input set 2
2022-04-24 07:10:34.281379 using api key derek
2022-04-24 07:10:40.830066 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\nfrom collections import defaultdict\n\ndef dfs(v, visited):\n\tvisited[v] = True\n\tfor u in rev_adj_list[v]:\n\t\tif not visited[u]:\n\t\t\tdfs(u, visited)\n\ndef main():\n\tglobal rev_adj_list\n\tn, m, s = map(int, sys.stdin.readline().split())\n\tadj_list = defaultdict(list)\n\trev_adj_list = defaultdict(list)\n\tfor _ in range(m):\n\t\tu, v = map(int, sys.stdin.readline().split())[:2]\n\t\tadj_list[u].append(v)\n\t\trev_adj_list[v].append(u)\n\tvisited = [False] * (n + 1)\n\tdfs(s, visited)\n\tcount = 0\n\tfor v in range(1, n + 1):\n\t\tif not visited[v]:\n\t\t\tfor u in adj_list[v]:\n\t\t\t\tif not visited[u]:\n\t\t\t\t\tcount += 1\n\t\t\t\t\tbreak\n\tprint count\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nfrom collections import defaultdict\n\ndef dfs(v, visited):\n\tvisited[v] = True\n\tfor u in rev_adj_list[v]:\n\t\tif not visited[u]:\n\t\t\tdfs(u, visited)\n\ndef main():\n\tglobal rev_adj_list\n\tn, m, s = map(int, sys.stdin.readline().split())\n\tadj_list = defaultdict(list)\n\trev_adj_list = defaultdict(list)\n\tfor _ in range(m):\n\t\tu, v = map(int, sys.stdin.readline().split())\n\t\tadj_list[u].append(v)\n\t\trev_adj_list[v].append(u)\n\tvisited = [False] * (n + 1)\n\tdfs(s, visited)\n\tcount = 0\n\tfor v in range(1, n + 1):\n\t\tif not visited[v]:\n\t\t\tfor u in adj_list[v]:\n\t\t\t\tif not visited[u]:\n\t\t\t\t\tcount += 1\n\t\t\t\t\tbreak\n\tprint count\n\nif __name__ == '__main__':\n\tmain()\n"
    }
  ],
  "created": 1650784234,
  "object": "edit"
}
2022-04-24 07:10:40.830254 fix syntax errors 2 ["\n\nimport sys\nfrom collections import defaultdict\n\ndef dfs(v, visited):\n\tvisited[v] = True\n\tfor u in rev_adj_list[v]:\n\t\tif not visited[u]:\n\t\t\tdfs(u, visited)\n\ndef main():\n\tglobal rev_adj_list\n\tn, m, s = map(int, sys.stdin.readline().split())\n\tadj_list = defaultdict(list)\n\trev_adj_list = defaultdict(list)\n\tfor _ in range(m):\n\t\tu, v = map(int, sys.stdin.readline().split())[:2]\n\t\tadj_list[u].append(v)\n\t\trev_adj_list[v].append(u)\n\tvisited = [False] * (n + 1)\n\tdfs(s, visited)\n\tcount = 0\n\tfor v in range(1, n + 1):\n\t\tif not visited[v]:\n\t\t\tfor u in adj_list[v]:\n\t\t\t\tif not visited[u]:\n\t\t\t\t\tcount += 1\n\t\t\t\t\tbreak\n\tprint count\n\nif __name__ == '__main__':\n\tmain()\n", "\nimport sys\nfrom collections import defaultdict\n\ndef dfs(v, visited):\n\tvisited[v] = True\n\tfor u in rev_adj_list[v]:\n\t\tif not visited[u]:\n\t\t\tdfs(u, visited)\n\ndef main():\n\tglobal rev_adj_list\n\tn, m, s = map(int, sys.stdin.readline().split())\n\tadj_list = defaultdict(list)\n\trev_adj_list = defaultdict(list)\n\tfor _ in range(m):\n\t\tu, v = map(int, sys.stdin.readline().split())\n\t\tadj_list[u].append(v)\n\t\trev_adj_list[v].append(u)\n\tvisited = [False] * (n + 1)\n\tdfs(s, visited)\n\tcount = 0\n\tfor v in range(1, n + 1):\n\t\tif not visited[v]:\n\t\t\tfor u in adj_list[v]:\n\t\t\t\tif not visited[u]:\n\t\t\t\t\tcount += 1\n\t\t\t\t\tbreak\n\tprint count\n\nif __name__ == '__main__':\n\tmain()\n"]
2022-04-24 07:10:40.830400 using api key kouti
2022-04-24 07:10:49.637001 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#!/usr/bin/env python\n\nimport sys\nfrom collections import defaultdict\n\ndef dfs(v, visited):\n\tvisited[v] = True\n\tfor u in adj_list[v]:\n\t\tif not visited[u]:\n\t\t\tdfs(u, visited)\n\ndef main():\n\tn, m, s = map(int, sys.stdin.readline().split())\n\tadj_list = defaultdict(list)\n\tfor _ in range(m):\n\t\tu, v = map(int, sys.stdin.readline().split())\n\t\tadj_list[u].append(v)\n\tvisited = [False] * (n + 1)\n\tdfs(s, visited)\n\tcount = 0\n\tfor v in range(1, n + 1):\n\t\tif not visited[v]:\n\t\t\tfor u in adj_list[v]:\n\t\t\t\tif visited[u]:\n\t\t\t\t\tcount += 1\n\t\t\t\t\tbreak\n\tprint count\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nfrom collections import defaultdict\n\ndef dfs(v, visited):\n\tvisited[v] = True\n\tfor u in adj_list[v]:\n\t\tif not visited[u]:\n\t\t\tdfs(u, visited)\n\ndef main():\n\tn, m, s = map(int, sys.stdin.readline().split())\n\tadj_list = defaultdict(list)\n\tfor _ in range(m):\n\t\tu, v = map(int, sys.stdin.readline().split())\n\t\tadj_list[u].append(v)\n\tvisited = [False] * (n + 1)\n\tdfs(s, visited)\n\tcount = 0\n\tfor v in range(1, n + 1):\n\t\tif not visited[v]:\n\t\t\tfor u in adj_list[v]:\n\t\t\t\tif visited[u]:\n\t\t\t\t\tcount += 1\n\t\t\t\t\tbreak\n\tprint count\n\nif __name__ == '__main__':\n\tmain()\n"
    }
  ],
  "created": 1650784240,
  "object": "edit"
}
2022-04-24 07:10:49.637190 fix syntax errors 2 ["#!/usr/bin/env python\n\nimport sys\nfrom collections import defaultdict\n\ndef dfs(v, visited):\n\tvisited[v] = True\n\tfor u in adj_list[v]:\n\t\tif not visited[u]:\n\t\t\tdfs(u, visited)\n\ndef main():\n\tn, m, s = map(int, sys.stdin.readline().split())\n\tadj_list = defaultdict(list)\n\tfor _ in range(m):\n\t\tu, v = map(int, sys.stdin.readline().split())\n\t\tadj_list[u].append(v)\n\tvisited = [False] * (n + 1)\n\tdfs(s, visited)\n\tcount = 0\n\tfor v in range(1, n + 1):\n\t\tif not visited[v]:\n\t\t\tfor u in adj_list[v]:\n\t\t\t\tif visited[u]:\n\t\t\t\t\tcount += 1\n\t\t\t\t\tbreak\n\tprint count\n\nif __name__ == '__main__':\n\tmain()\n", "\nimport sys\nfrom collections import defaultdict\n\ndef dfs(v, visited):\n\tvisited[v] = True\n\tfor u in adj_list[v]:\n\t\tif not visited[u]:\n\t\t\tdfs(u, visited)\n\ndef main():\n\tn, m, s = map(int, sys.stdin.readline().split())\n\tadj_list = defaultdict(list)\n\tfor _ in range(m):\n\t\tu, v = map(int, sys.stdin.readline().split())\n\t\tadj_list[u].append(v)\n\tvisited = [False] * (n + 1)\n\tdfs(s, visited)\n\tcount = 0\n\tfor v in range(1, n + 1):\n\t\tif not visited[v]:\n\t\t\tfor u in adj_list[v]:\n\t\t\t\tif visited[u]:\n\t\t\t\t\tcount += 1\n\t\t\t\t\tbreak\n\tprint count\n\nif __name__ == '__main__':\n\tmain()\n"]
2022-04-24 07:10:49.637298 size on output set 4
2022-04-24 07:10:49.637312 num operations 2
2022-04-24 07:10:49.637317 size on input set 1
2022-04-24 07:10:49.637442 using api key soukgp
2022-04-24 07:10:55.264022 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\nimport os\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split())\n        roads.append((u, v))\n\n    # Graph\n    graph = [[] for i in range(n+1)]\n    for (u, v) in roads:\n        graph[u].append(v)\n\n    # DFS\n    visited = [False for i in range(n+1)]\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append(v)\n\n    # Count\n    res = 0\n    for i in range(1, n+1):\n        if i == s:\n            continue\n        if not visited[i]:\n            res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\nimport os\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split())\n        roads.append((u, v))\n\n    # Graph\n    graph = [[] for i in range(n+1)]\n    for (u, v) in roads:\n        graph[u].append(v)\n\n    # DFS\n    visited = [False for i in range(n+1)]\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append(v)\n\n    # Counting\n    res = 0\n    for i in range(1, n+1):\n        if i == s:\n            continue\n        if not visited[i]:\n            res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650784249,
  "object": "edit"
}
2022-04-24 07:10:55.264224 fix spelling mistakes 2 ["\n\nimport sys\n\nimport os\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split())\n        roads.append((u, v))\n\n    # Graph\n    graph = [[] for i in range(n+1)]\n    for (u, v) in roads:\n        graph[u].append(v)\n\n    # DFS\n    visited = [False for i in range(n+1)]\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append(v)\n\n    # Count\n    res = 0\n    for i in range(1, n+1):\n        if i == s:\n            continue\n        if not visited[i]:\n            res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\nimport os\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split())\n        roads.append((u, v))\n\n    # Graph\n    graph = [[] for i in range(n+1)]\n    for (u, v) in roads:\n        graph[u].append(v)\n\n    # DFS\n    visited = [False for i in range(n+1)]\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append(v)\n\n    # Counting\n    res = 0\n    for i in range(1, n+1):\n        if i == s:\n            continue\n        if not visited[i]:\n            res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-24 07:10:55.264260 size on output set 2
2022-04-24 07:10:55.264269 size on input set 2
2022-04-24 07:10:55.264410 using api key soukgp
2022-04-24 07:11:01.825684 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import sys\n\nimport os\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split())\n        roads.append((u, v))\n\n    # Graph\n    graph = [[] for i in range(n+1)]\n    for (u, v) in roads:\n        graph[u].append(v)\n\n    # DFS\n    visited = [False for i in range(n+1)]\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append(v)\n\n    # Count\n    res = 0\n    for i in range(1, n+1):\n        if i == s:\n            continue\n        if not visited[i]:\n            res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "import sys\n\nimport os\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split())\n        roads.append((u, v))\n\n    # Graph\n    graph = [[] for i in range(n+1)]\n    for (u, v) in roads:\n        graph[u].append(v)\n\n    # DFS\n    visited = [False for i in range(n+1)]\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append(v)\n\n    # Count\n    res = 0\n    for i in range(1, n+1):\n        if i == s:\n            continue\n        if not visited[i]:\n            res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650784255,
  "object": "edit"
}
2022-04-24 07:11:01.825885 fix syntax errors 2 ["import sys\n\nimport os\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split())\n        roads.append((u, v))\n\n    # Graph\n    graph = [[] for i in range(n+1)]\n    for (u, v) in roads:\n        graph[u].append(v)\n\n    # DFS\n    visited = [False for i in range(n+1)]\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append(v)\n\n    # Count\n    res = 0\n    for i in range(1, n+1):\n        if i == s:\n            continue\n        if not visited[i]:\n            res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\nimport os\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split())\n        roads.append((u, v))\n\n    # Graph\n    graph = [[] for i in range(n+1)]\n    for (u, v) in roads:\n        graph[u].append(v)\n\n    # DFS\n    visited = [False for i in range(n+1)]\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append(v)\n\n    # Count\n    res = 0\n    for i in range(1, n+1):\n        if i == s:\n            continue\n        if not visited[i]:\n            res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-24 07:11:01.826099 using api key soukgp
2022-04-24 07:11:07.280702 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\nimport os\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split())\n        roads.append((u, v))\n\n    # Graph\n    graph = [[] for i in range(n+1)]\n    for (u, v) in roads:\n        graph[u].append(v)\n\n    # DFS\n    visited = [False for i in range(n+1)]\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append(v)\n\n    # Counting\n    res = 0\n    for i in range(1, n+1):\n        if i == s:\n            continue\n        if not visited[i]:\n            res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n\nimport sys\nimport os\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split())\n        roads.append((u, v))\n\n    # Graph\n    graph = [[] for i in range(n+1)]\n    for (u, v) in roads:\n        graph[u].append(v)\n\n    # DFS\n    visited = [False for i in range(n+1)]\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append(v)\n\n    # Counting\n    res = 0\n    for i in range(1, n+1):\n        if i == s:\n            continue\n        if not visited[i]:\n            res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650784261,
  "object": "edit"
}
2022-04-24 07:11:07.280945 fix syntax errors 2 ["\nimport sys\nimport os\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split())\n        roads.append((u, v))\n\n    # Graph\n    graph = [[] for i in range(n+1)]\n    for (u, v) in roads:\n        graph[u].append(v)\n\n    # DFS\n    visited = [False for i in range(n+1)]\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append(v)\n\n    # Counting\n    res = 0\n    for i in range(1, n+1):\n        if i == s:\n            continue\n        if not visited[i]:\n            res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n\nimport sys\nimport os\n\ndef main():\n    n, m, s = map(int, sys.stdin.readline().strip().split())\n    roads = []\n    for i in range(m):\n        u, v = map(int, sys.stdin.readline().strip().split())\n        roads.append((u, v))\n\n    # Graph\n    graph = [[] for i in range(n+1)]\n    for (u, v) in roads:\n        graph[u].append(v)\n\n    # DFS\n    visited = [False for i in range(n+1)]\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        visited[u] = True\n        for v in graph[u]:\n            if not visited[v]:\n                stack.append(v)\n\n    # Counting\n    res = 0\n    for i in range(1, n+1):\n        if i == s:\n            continue\n        if not visited[i]:\n            res += 1\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-24 07:11:07.280982 size on output set 3
