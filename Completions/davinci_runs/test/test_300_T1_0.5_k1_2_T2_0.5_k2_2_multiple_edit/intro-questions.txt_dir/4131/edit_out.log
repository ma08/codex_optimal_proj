2022-04-24 07:11:51.948754 num operations 2
2022-04-24 07:11:51.948783 size on input set 1
2022-04-24 07:11:51.948913 using api key jaanu
2022-04-24 07:11:59.360672 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nN, M = map(int, input().split())\ncities = []\nfor i in range(M):\n    cities.append(list(map(int, input().split())))\n\ncities.sort(key=lambda x: x[1])\n\nprefectures = [[] for _ in range(N)]\n\nfor city in cities:\n    prefectures[city[0]-1].append(city[1])\n\nfor i in range(N):\n    for j in range(len(prefectures[i])):\n        print(str(i).zfill(6) + str(j+1).zfill(6))\n"
    },
    {
      "index": 1,
      "text": "\n\nN, M = map(int, input().split())\ncities = []\nfor i in range(M):\n    cities.append(list(map(int, input().split())))\n\ncities.sort(key=lambda x: x[1])\n\nprefecture = [[] for _ in range(N+1)]\n\nfor city in cities:\n    prefecture[city[0]].append(city[1])\n\nfor i in range(1, N+1):\n    for j in range(len(prefecture[i])):\n        print(str(i).zfill(6) + str(j+1).zfill(6))\n"
    }
  ],
  "created": 1650784312,
  "object": "edit"
}
2022-04-24 07:11:59.360888 fix spelling mistakes 2 ['\n\nN, M = map(int, input().split())\ncities = []\nfor i in range(M):\n    cities.append(list(map(int, input().split())))\n\ncities.sort(key=lambda x: x[1])\n\nprefectures = [[] for _ in range(N)]\n\nfor city in cities:\n    prefectures[city[0]-1].append(city[1])\n\nfor i in range(N):\n    for j in range(len(prefectures[i])):\n        print(str(i).zfill(6) + str(j+1).zfill(6))\n', '\n\nN, M = map(int, input().split())\ncities = []\nfor i in range(M):\n    cities.append(list(map(int, input().split())))\n\ncities.sort(key=lambda x: x[1])\n\nprefecture = [[] for _ in range(N+1)]\n\nfor city in cities:\n    prefecture[city[0]].append(city[1])\n\nfor i in range(1, N+1):\n    for j in range(len(prefecture[i])):\n        print(str(i).zfill(6) + str(j+1).zfill(6))\n']
2022-04-24 07:11:59.360916 size on output set 2
2022-04-24 07:11:59.360923 size on input set 2
2022-04-24 07:11:59.361043 using api key jaanu
2022-04-24 07:12:07.600197 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nN, M = map(int, input().split())\nprefecture = [[] for _ in range(N+1)]\n\nfor i in range(M):\n    P, Y = map(int, input().split())\n    prefecture[P].append(Y)\n\n    prefecture[i].sort()\nfor i in range(1, N+1):\n    for j in range(len(prefecture[i])):\n        print(str(i).zfill(6) + str(j+1).zfill(6))\n"
    },
    {
      "index": 1,
      "text": "\nN, M = map(int, input().split())\ncities = []\nfor i in range(M):\n    cities.append(list(map(int, input().split())))\n\ncities.sort(key=lambda x: x[1])\n\nprefecture = [[] for _ in range(N+1)]\n\nfor city in cities:\n    prefecture[city[0]].append(city[1])\n\nfor i in range(1, N+1):\n    for j in range(len(prefecture[i])):\n        print(str(i).zfill(6) + str(j+1).zfill(6))\n"
    }
  ],
  "created": 1650784319,
  "object": "edit"
}
2022-04-24 07:12:07.600384 fix syntax errors 2 ['\n\nN, M = map(int, input().split())\nprefecture = [[] for _ in range(N+1)]\n\nfor i in range(M):\n    P, Y = map(int, input().split())\n    prefecture[P].append(Y)\n\n    prefecture[i].sort()\nfor i in range(1, N+1):\n    for j in range(len(prefecture[i])):\n        print(str(i).zfill(6) + str(j+1).zfill(6))\n', '\nN, M = map(int, input().split())\ncities = []\nfor i in range(M):\n    cities.append(list(map(int, input().split())))\n\ncities.sort(key=lambda x: x[1])\n\nprefecture = [[] for _ in range(N+1)]\n\nfor city in cities:\n    prefecture[city[0]].append(city[1])\n\nfor i in range(1, N+1):\n    for j in range(len(prefecture[i])):\n        print(str(i).zfill(6) + str(j+1).zfill(6))\n']
2022-04-24 07:12:07.600524 using api key jaanu
2022-04-24 07:12:13.976167 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nN, M = map(int, input().split())\ncities = []\nfor i in range(M):\n    cities.append(list(map(int, input().split())))\ncities.sort(key=lambda x: x[1])\n\nprefectures = [[] for _ in range(N)]\n\nfor city in cities:\n    prefectures[city[0]-1].append(city[1])\n\nfor i in range(N):\n    for j in range(len(prefectures[i])):\n        print(str(i).zfill(6) + str(j+1).zfill(6))\n"
    },
    {
      "index": 1,
      "text": "\n\nN, M = map(int, input().split())\ncities = []\nfor i in range(M):\n    cities.append(list(map(int, input().split())))\n\ncities.sort(key=lambda x: x[1])\n\nprefectures = [[] for _ in range(N)]\n\nfor city in cities:\n    prefectures[city[0]-1].append(city[1])\n\nfor i in range(N):\n    for j in range(len(prefectures[i])):\n        print(str(i+1).zfill(6) + str(j+1).zfill(6))\n"
    }
  ],
  "created": 1650784327,
  "object": "edit"
}
2022-04-24 07:12:13.976407 fix syntax errors 2 ['\n\nN, M = map(int, input().split())\ncities = []\nfor i in range(M):\n    cities.append(list(map(int, input().split())))\ncities.sort(key=lambda x: x[1])\n\nprefectures = [[] for _ in range(N)]\n\nfor city in cities:\n    prefectures[city[0]-1].append(city[1])\n\nfor i in range(N):\n    for j in range(len(prefectures[i])):\n        print(str(i).zfill(6) + str(j+1).zfill(6))\n', '\n\nN, M = map(int, input().split())\ncities = []\nfor i in range(M):\n    cities.append(list(map(int, input().split())))\n\ncities.sort(key=lambda x: x[1])\n\nprefectures = [[] for _ in range(N)]\n\nfor city in cities:\n    prefectures[city[0]-1].append(city[1])\n\nfor i in range(N):\n    for j in range(len(prefectures[i])):\n        print(str(i+1).zfill(6) + str(j+1).zfill(6))\n']
2022-04-24 07:12:13.976435 size on output set 4
2022-04-24 07:12:13.976447 num operations 2
2022-04-24 07:12:13.976453 size on input set 1
2022-04-24 07:12:13.976579 using api key jaanu
2022-04-24 07:12:22.045731 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    # prefectures_cities = [[] for _ in range(N)]\n    prefectures_cities = defaultdict(list)\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefectures_cities[P].append(Y)\n    for P, cities in prefectures_cities.items():\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:>06}{:>06}'.format(P, i))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    # prefecture_cities = [[] for _ in range(N)] # \u3053\u308c\u3060\u3068\u3001\u90fd\u9053\u5e9c\u770c\u3054\u3068\u306b\u7a7a\u914d\u5217\u3092N\u500b\u4f5c\u3063\u3066\u3057\u307e\u3046\n    prefecture_cities = defaultdict(list) # \u3053\u3063\u3061\u306e\u307b\u3046\u304c\u3001\u90fd\u9053\u5e9c\u770c\u3054\u3068\u306b\u7a7a\u914d\u5217\u3092\u4f5c\u308b\u3068\u304d\u306b\u305d\u306e\u5206\u3060\u3051\u30e1\u30e2\u30ea\u3092\u4f7f\u3046\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefecture_cities[P].append(Y)\n    for P, cities in prefecture_cities.items():\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:>06}{:>06}'.format(P, i))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650784334,
  "object": "edit"
}
2022-04-24 07:12:22.045910 fix spelling mistakes 2 ["\n\ndef main():\n    N, M = map(int, input().split())\n    # prefectures_cities = [[] for _ in range(N)]\n    prefectures_cities = defaultdict(list)\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefectures_cities[P].append(Y)\n    for P, cities in prefectures_cities.items():\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:>06}{:>06}'.format(P, i))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N, M = map(int, input().split())\n    # prefecture_cities = [[] for _ in range(N)] # これだと、都道府県ごとに空配列をN個作ってしまう\n    prefecture_cities = defaultdict(list) # こっちのほうが、都道府県ごとに空配列を作るときにその分だけメモリを使う\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefecture_cities[P].append(Y)\n    for P, cities in prefecture_cities.items():\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:>06}{:>06}'.format(P, i))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-24 07:12:22.046020 size on output set 2
2022-04-24 07:12:22.046028 size on input set 2
2022-04-24 07:12:22.046149 using api key kouti
2022-04-24 07:12:32.049431 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    # prefecture_cities = [[] for _ in range(N)] # \u3053\u308c\u3060\u3068\u3001\u90fd\u9053\u5e9c\u770c\u3054\u3068\u306b\u7a7a\u914d\u5217\u3092N\u500b\u4f5c\u3063\u3066\u3057\u307e\u3046\u3002\u3053\u3063\u3061\u306e\u307b\u3046\u304c\u3001\u90fd\u9053\u5e9c\u770c\u3054\u3068\u306b\u7a7a\u914d\u5217\u3092\u4f5c\u308b\u3068\u304d\u306b\u305d\u306e\u5206\u3060\u3051\u30e1\u30e2\u30ea\u3092\u4f7f\u3046\n    prefecture_cities = defaultdict(list)\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefecture_cities[P].append(Y)\n    for P, cities in prefecture_cities.items():\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:>06}{:>06}'.format(P, i))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    N, M = map(int, input().split())\n    # prefecture_cities = [[] for _ in range(N)]  # \u3053\u308c\u3060\u3068\u3001\u90fd\u9053\u5e9c\u770c\u3054\u3068\u306b\u7a7a\u914d\u5217\u3092N\u500b\u4f5c\u3063\u3066\u3057\u307e\u3046\n    prefecture_cities = defaultdict(list)  # \u3053\u3063\u3061\u306e\u307b\u3046\u304c\u3001\u90fd\u9053\u5e9c\u770c\u3054\u3068\u306b\u7a7a\u914d\u5217\u3092\u4f5c\u308b\u3068\u304d\u306b\u305d\u306e\u5206\u3060\u3051\u30e1\u30e2\u30ea\u3092\u4f7f\u3046\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefecture_cities[P].append(Y)\n    for P, cities in prefecture_cities.items():\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:>06}{:>06}'.format(P, i))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650784342,
  "object": "edit"
}
2022-04-24 07:12:32.049620 fix syntax errors 2 ["\n\ndef main():\n    N, M = map(int, input().split())\n    # prefecture_cities = [[] for _ in range(N)] # これだと、都道府県ごとに空配列をN個作ってしまう。こっちのほうが、都道府県ごとに空配列を作るときにその分だけメモリを使う\n    prefecture_cities = defaultdict(list)\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefecture_cities[P].append(Y)\n    for P, cities in prefecture_cities.items():\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:>06}{:>06}'.format(P, i))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N, M = map(int, input().split())\n    # prefecture_cities = [[] for _ in range(N)]  # これだと、都道府県ごとに空配列をN個作ってしまう\n    prefecture_cities = defaultdict(list)  # こっちのほうが、都道府県ごとに空配列を作るときにその分だけメモリを使う\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefecture_cities[P].append(Y)\n    for P, cities in prefecture_cities.items():\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:>06}{:>06}'.format(P, i))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-24 07:12:32.049816 using api key kouti
2022-04-24 07:12:37.658432 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom collections import defaultdict\n\ndef main():\n    N, M = map(int, input().split())\n    # prefectures_cities = [[] for _ in range(N)]\n    prefectures_cities = defaultdict(list)\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefectures_cities[P].append(Y)\n    for P, cities in prefectures_cities.items():\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:>06}{:>06}'.format(P, i))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "from collections import defaultdict\n\ndef main():\n    N, M = map(int, input().split())\n    # prefectures_cities = [[] for _ in range(N)]\n    prefectures_cities = defaultdict(list)\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefectures_cities[P].append(Y)\n    for P, cities in prefectures_cities.items():\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:>06}{:>06}'.format(P, i))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650784352,
  "object": "edit"
}
2022-04-24 07:12:37.658618 fix syntax errors 2 ["\nfrom collections import defaultdict\n\ndef main():\n    N, M = map(int, input().split())\n    # prefectures_cities = [[] for _ in range(N)]\n    prefectures_cities = defaultdict(list)\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefectures_cities[P].append(Y)\n    for P, cities in prefectures_cities.items():\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:>06}{:>06}'.format(P, i))\n\nif __name__ == '__main__':\n    main()\n", "from collections import defaultdict\n\ndef main():\n    N, M = map(int, input().split())\n    # prefectures_cities = [[] for _ in range(N)]\n    prefectures_cities = defaultdict(list)\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefectures_cities[P].append(Y)\n    for P, cities in prefectures_cities.items():\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:>06}{:>06}'.format(P, i))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-24 07:12:37.658646 size on output set 4
