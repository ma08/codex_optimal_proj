2022-04-24 07:14:27.043163 num operations 2
2022-04-24 07:14:27.043183 size on input set 1
2022-04-24 07:14:27.043336 using api key jaanu
2022-04-24 07:14:34.666923 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef solve(n, m, k, grid,):\n    return 0\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    print(solve(n, m, k, grid))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef solve(n, m, k, grid, dp):\n    if dp[n][m][k] != -1:\n        return dp[n][m][k]\n    return 0\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    dp = [[[-1 for _ in range(k+1)] for _ in range(m+1)] for _ in range(n+1)]\n    print(solve(n, m, k, grid, dp))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650784467,
  "object": "edit"
}
2022-04-24 07:14:34.667133 fix spelling mistakes 2 ["\n\ndef solve(n, m, k, grid,):\n    return 0\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    print(solve(n, m, k, grid))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef solve(n, m, k, grid, dp):\n    if dp[n][m][k] != -1:\n        return dp[n][m][k]\n    return 0\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    dp = [[[-1 for _ in range(k+1)] for _ in range(m+1)] for _ in range(n+1)]\n    print(solve(n, m, k, grid, dp))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-24 07:14:34.667158 size on output set 2
2022-04-24 07:14:34.667166 size on input set 2
2022-04-24 07:14:34.667287 using api key derek
2022-04-24 07:14:42.724419 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef solve(n, m, k, grid, dp):\n    if dp[n][m][k] != -1: # if dp table is not empty\n    # do dp\n        return dp[n][m][k]\n    return 0\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    dp = [[[-1 for _ in range(k+1)] for _ in range(m+1)] for _ in range(n+1)]\n    print(solve(n, m, k, grid, dp))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef solve(n, m, k, grid, dp):\n    if dp[n][m][k] is not None:\n        return dp[n][m][k] + 1\n    return 0\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    dp = [[[None for _ in range(k+1)] for _ in range(m+1)] for _ in range(n+1)]\n    print(solve(n, m, k, grid, dp))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650784474,
  "object": "edit"
}
2022-04-24 07:14:42.724604 fix syntax errors 2 ["\n\ndef solve(n, m, k, grid, dp):\n    if dp[n][m][k] != -1: # if dp table is not empty\n    # do dp\n        return dp[n][m][k]\n    return 0\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    dp = [[[-1 for _ in range(k+1)] for _ in range(m+1)] for _ in range(n+1)]\n    print(solve(n, m, k, grid, dp))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef solve(n, m, k, grid, dp):\n    if dp[n][m][k] is not None:\n        return dp[n][m][k] + 1\n    return 0\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    dp = [[[None for _ in range(k+1)] for _ in range(m+1)] for _ in range(n+1)]\n    print(solve(n, m, k, grid, dp))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-24 07:14:42.724754 using api key jaanu
2022-04-24 07:14:48.638916 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef solve(n, m, k, grid):\n    return 0\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    print(solve(n, m, k, grid))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef solve(n, m, k, grid):\n    return 0\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    print(solve(n, m, k, grid))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650784482,
  "object": "edit"
}
2022-04-24 07:14:48.639130 fix syntax errors 2 ["\n\ndef solve(n, m, k, grid):\n    return 0\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    print(solve(n, m, k, grid))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef solve(n, m, k, grid):\n    return 0\n\ndef main():\n    n, m, k = map(int, input().split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    print(solve(n, m, k, grid))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-24 07:14:48.639154 size on output set 3
2022-04-24 07:14:48.639165 num operations 2
2022-04-24 07:14:48.639170 size on input set 1
2022-04-24 07:14:48.639296 using api key derek
2022-04-24 07:14:54.404389 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Solution by Andrew Xing \n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()]\n  grid = [[int(x) for x in input().split()] for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n  dp[1][1][grid[0][0]] = 1\n  \n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n  \n  print(dp[n][m][k])\n\nif __name__ == \"__main__\":\n  main()\n"
    },
    {
      "index": 1,
      "text": "\n\n# Solution by Andrew Xing \n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()]\n  grid = [[int(x) for x in input().split()] for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n  dp[1][1][grid[0][0]] = 1\n  \n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n  \n  print(dp[n][m][k])\n\nif __name__ == \"__main__\":\n  main()\n"
    }
  ],
  "created": 1650784488,
  "object": "edit"
}
2022-04-24 07:14:54.404576 fix spelling mistakes 2 ['\n\n# Solution by Andrew Xing \n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()]\n  grid = [[int(x) for x in input().split()] for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n  dp[1][1][grid[0][0]] = 1\n  \n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n  \n  print(dp[n][m][k])\n\nif __name__ == "__main__":\n  main()\n', '\n\n# Solution by Andrew Xing \n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()]\n  grid = [[int(x) for x in input().split()] for i in range(n)]\n  \n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n  dp[1][1][grid[0][0]] = 1\n  \n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n  \n  print(dp[n][m][k])\n\nif __name__ == "__main__":\n  main()\n']
2022-04-24 07:14:54.404606 size on output set 1
2022-04-24 07:14:54.404613 size on input set 1
2022-04-24 07:14:54.404765 using api key sunu
2022-04-24 07:15:09.140719 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Solution by Andrew Xing \n\ndef main():\n\n    n, m, k = [int(x) for x in input().split()]\n    grid = [[int(x) for x in input().split()] for i in range(n)]\n    \n    dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n    dp[1][1][grid[0][0]] = 1\n    \n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i == 1 and j == 1:\n                continue\n            for x in range(k+1):\n                if i > 1:\n                    dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n                if j > 1:\n                    dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n    \n    print(dp[n][m][k])\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "index": 1,
      "text": "# Solution by Andrew Xing\n\n\n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()]\n  grid = [[int(x) for x in input().split()] for i in range(n)]\n\n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n  dp[1][1][grid[0][0]] = 1\n\n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n\n  print(dp[n][m][k])\n\nif __name__ == \"__main__\":\n  main()\n"
    }
  ],
  "created": 1650784494,
  "object": "edit"
}
2022-04-24 07:15:09.141019 fix syntax errors 2 ['\n# Solution by Andrew Xing \n\ndef main():\n\n    n, m, k = [int(x) for x in input().split()]\n    grid = [[int(x) for x in input().split()] for i in range(n)]\n    \n    dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n    dp[1][1][grid[0][0]] = 1\n    \n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i == 1 and j == 1:\n                continue\n            for x in range(k+1):\n                if i > 1:\n                    dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n                if j > 1:\n                    dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n    \n    print(dp[n][m][k])\n\nif __name__ == "__main__":\n    main()\n', '# Solution by Andrew Xing\n\n\n\ndef main():\n\n  n, m, k = [int(x) for x in input().split()]\n  grid = [[int(x) for x in input().split()] for i in range(n)]\n\n  dp = [[[0 for x in range(k+1)] for y in range(m+1)] for z in range(n+1)]\n  dp[1][1][grid[0][0]] = 1\n\n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if i == 1 and j == 1:\n        continue\n      for x in range(k+1):\n        if i > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i-1][j][x]\n        if j > 1:\n          dp[i][j][x^grid[i-1][j-1]] += dp[i][j-1][x]\n\n  print(dp[n][m][k])\n\nif __name__ == "__main__":\n  main()\n']
2022-04-24 07:15:09.141059 size on output set 2
