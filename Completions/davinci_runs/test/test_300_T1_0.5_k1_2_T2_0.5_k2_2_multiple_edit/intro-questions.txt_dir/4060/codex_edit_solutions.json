["\n\ndef solution(n, s):\n    count = 0\n    for i in range(n):\n        if s[i] == ')':\n            if i > 0:\n                s[i - 1] = '(' if s[i - 1] == ')' else ')'\n                if is_regular(s):\n                    count += 1\n                s[i - 1] = '(' if s[i - 1] == ')' else ')'  # \uc6d0\uc0c1\ubcf5\uad6c\n        else:\n            if i < n - 1:\n                s[i + 1] = '(' if s[i + 1] == ')' else ')'\n                if is_regular(s):\n                    count += 1\n                s[i + 1] = '(' if s[i + 1] == ')' else ')'  # \uc6d0\uc0c1\ubcf5\uad6c\n    return count\n\n\ndef is_regular(s):\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n\nn = int(input())\ns = list(input())\nprint(solution(n, s))\n", "\ndef solution(n, s):\n    count = 0\n    for i in range(n):\n        if s[i] == ')':\n            if i > 0:\n                s[i - 1] = '(' if s[i - 1] == ')' else ')'\n                if is_regular(s):\n                    count += 1\n                s[i - 1] = '(' if s[i - 1] == '(' else ')'\n        else:\n            if i < n - 1:\n                s[i + 1] = '(' if s[i + 1] == ')' else ')'\n                if is_regular(s):\n                    count += 1\n                s[i + 1] = '(' if s[i + 1] == '(' else ')'\n    return count\n\n\ndef is_regular(s):\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n\nn = int(input())\ns = list(input())\nprint(solution(n, s))\n", "\n\nn = int(input())\ns = input()\n\n# check if the sequence is already regular\ndef is_regular(s):\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    if stack:\n        return False\n    return True\n\n# count the number of open and closed brackets and the number of changes\ndef count_changes(s):\n    open_ = s.count('(')\n    close_ = s.count(')')\n    if open_ == close_:\n        return 0\n    if open_ > close_:\n        return open_ - close_\n    return close_ - open_\n\n\nprint(count_changes(s))\n", "\n\ns = input()\n\n# check if the sequence is already regular\ndef is_regular(s):\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    if stack:\n        return False\n    return True\n\n# count the number of open and closed brackets\ndef count_brackets(s):\n    open_ = 0\n    closed_ = 0\n    for char in s:\n        if char == '(':\n            open_ += 1\n        else:\n            closed_ += 1\n    return open_, closed_\n\ndef count_changes(s):\n    if is_regular(s):\n        return 0\n    open_, closed_ = count_brackets(s)\n    if open_ == closed_:\n        return 0\n    return open_ + closed_ - abs(open_ - closed_)\n\nprint(count_changes(s))\n", "\ndef solution(n, s):\n    count = 0\n    for i in range(n):\n        if s[i] == ')':\n            if i > 0:\n                s[i - 1] = '(' if s[i - 1] == ')' else ')'\n                if is_regular(s):\n                    count += 1\n                    s[i - 1] = '(' if s[i - 1] == '(' else ')'\n        else:\n            if i < n - 1:\n                s[i + 1] = '(' if s[i + 1] == ')' else ')'\n                if is_regular(s):\n                    count += 1\n                    s[i + 1] = '(' if s[i + 1] == '(' else ')'\n    return count\n\n\ndef is_regular(s):\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n\nn = int(input())\ns = list(input())\nprint(solution(n, s))\n", "\nn = int(input())\ns = input()\n\n\ndef is_regular(s):\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    if stack:\n        return False\n    return True\n\n# count the number of open and closed brackets\ndef count_brackets(s):\n    open_ = 0\n    closed_ = 0\n    for char in s:\n        if char == '(':\n            open_ += 1\n        else:\n            closed_ += 1\n    return open_, closed_\n\ndef count_changes(s):\n    if is_regular(s):\n        return 0\n    open_, closed_ = count_brackets(s)\n    if open_ == closed_:\n        return 0\n    return open_ + closed_ - abs(open_ - closed_)\n\nprint(count_changes(s))\n", "\nn = int(input())\ns = input()\n\n# check if the sequence is already regular\ndef is_regular(s):\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    if stack:\n        return False\n    return True\n\n# count the number of open and closed brackets\ndef count_brackets(s):\n    open_ = 0\n    close_ = 0\n    for char in s:\n        if char == '(':\n            open_ += 1\n        else:\n            close_ += 1\n    return open_, close_\n\ndef count_changes(s):\n    if is_regular(s):\n        return 0\n    open_, close_ = count_brackets(s)\n    if open_ == close_:\n        return 0\n    return open_ + close_ - abs(open_ - close_)\n\nprint(count_changes(s))\n"]