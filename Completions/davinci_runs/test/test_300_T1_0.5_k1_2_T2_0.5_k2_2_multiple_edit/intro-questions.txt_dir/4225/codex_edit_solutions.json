["from operator import itemgetter\n\ndef get_max_possible_sum(cards):\n    cards.sort(key=itemgetter(1), reverse=True) # sort by second element in tuple\n    return sum(card[1] for card in cards[:K])\n\nA, B, C, K = map(int, input().split())\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards))\n", "\nfrom operator import itemgetter\n\ndef get_max_possible_sum(numbers):\n    numbers.sort(key=itemgetter(1), reverse=True)\n    return sum(number[1] for number in numbers[:k])\n\na, b, c, k = map(int, input().split())\nnumbers = [('A', a), ('B', b), ('C', c)]\nprint(get_max_possible_sum(numbers))\n", "\n\n# A, B, C, K = map(int, input().split())\nA, B, C, K = 2, 1, 1, 3\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n", "\n\nA, B, C, K = map(int, input().split())\n# A, B, C, K = 2, 1, 1, 3\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B) )\n", "\nA, B, C, D = map(int, input().split())\n\nif C <= B:\n    print(0)\nelse:\n    print(min(A, D) - max(B, C))\n", "\n\nfrom operator import itemgetter\n\ndef get_max_possible_sum(cards):\n    cards.sort(key=itemgetter(1), reverse=True)\n    return sum(card[1] for card in cards[:K])\n\nA, B, C, K = map(int, input().split())\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards))\n", "\nfrom operator import itemgetter\n\ndef get_max_possible_sum(numbers):\n    numbers.sort(key=itemgetter(1), reverse=True)\n    return sum(number[1] for number in numbers[:k])\n\na, b, c, k = map(int, input().split())\nnumbers = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(numbers))\n"]