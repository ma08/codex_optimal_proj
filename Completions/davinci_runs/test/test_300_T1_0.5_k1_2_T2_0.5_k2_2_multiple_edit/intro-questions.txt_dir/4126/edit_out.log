2022-04-24 07:08:30.784849 num operations 2
2022-04-24 07:08:30.784869 size on input set 1
2022-04-24 07:08:30.785009 using api key kouti
2022-04-24 07:08:38.279539 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#imports script, filename\nfrom sys import argv\nscript, filename = argv\n\n#sets txt to open filename\ntxt = open(filename)\n\n#sets line to read txt\nline = txt.read()\n\n#sets ln to length of line\nln = len(line)\n\n#sets first to first half of line (if odd, it will be rounded down)\nfirst = line[:ln/2]\n\n#sets second to second half of line (if odd, it will be rounded up)\nsecond = line[ln/2+1:]\n\n#reverses second\nsecond = second[::-1]\n\n#reverses first\nfirst = first[::-1]\n\n#sets middle to middle of line\nmiddle = line[ln/2]\n\n#if first and second are the same and line is the same as reversed line\nif first == second and line == line[::-1]:\n    print \"Yes\"\nelse:\n    print \"No\"\n"
    },
    {
      "index": 1,
      "text": "\n\n#imports script, filename\nfrom sys import argv\nscript, filename = argv\n\n#sets txt to open filename\ntxt = open(filename)\n\n#sets line to read txt\nline = txt.read()\n\n#sets ln to length of line\nln = len(line)\n\n#sets first to first half of line\nfirst = line[:ln/2]\n\n#sets second to second half of line\nsecond = line[ln/2+1:]\n\n#sets second to reversed second (from end to start)\nsecond = second[::-1]\n\n#sets first to reversed first (from end to start)\nfirst = first[::-1]\n\n#sets middle to middle of line\nmiddle = line[ln/2]\n\n#if first and second are the same and line is the same as reversed line\nif first == second and line == line[::-1]:\n    print \"Yes\"\nelse:\n    print \"No\"\n"
    }
  ],
  "created": 1650784110,
  "object": "edit"
}
2022-04-24 07:08:38.279753 fix spelling mistakes 2 ['\n\n#imports script, filename\nfrom sys import argv\nscript, filename = argv\n\n#sets txt to open filename\ntxt = open(filename)\n\n#sets line to read txt\nline = txt.read()\n\n#sets ln to length of line\nln = len(line)\n\n#sets first to first half of line (if odd, it will be rounded down)\nfirst = line[:ln/2]\n\n#sets second to second half of line (if odd, it will be rounded up)\nsecond = line[ln/2+1:]\n\n#reverses second\nsecond = second[::-1]\n\n#reverses first\nfirst = first[::-1]\n\n#sets middle to middle of line\nmiddle = line[ln/2]\n\n#if first and second are the same and line is the same as reversed line\nif first == second and line == line[::-1]:\n    print "Yes"\nelse:\n    print "No"\n', '\n\n#imports script, filename\nfrom sys import argv\nscript, filename = argv\n\n#sets txt to open filename\ntxt = open(filename)\n\n#sets line to read txt\nline = txt.read()\n\n#sets ln to length of line\nln = len(line)\n\n#sets first to first half of line\nfirst = line[:ln/2]\n\n#sets second to second half of line\nsecond = line[ln/2+1:]\n\n#sets second to reversed second (from end to start)\nsecond = second[::-1]\n\n#sets first to reversed first (from end to start)\nfirst = first[::-1]\n\n#sets middle to middle of line\nmiddle = line[ln/2]\n\n#if first and second are the same and line is the same as reversed line\nif first == second and line == line[::-1]:\n    print "Yes"\nelse:\n    print "No"\n']
2022-04-24 07:08:38.279788 size on output set 2
2022-04-24 07:08:38.279795 size on input set 2
2022-04-24 07:08:38.279915 using api key derek
2022-04-24 07:08:47.634007 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#imports script, filename\nfrom sys import argv\nscript, filename = argv\n\n#sets txt to open filename\ntxt = open(filename)\n\n#sets line to read txt\nline = txt.read()\n\n#sets ln to length of line\nln = len(line)\n\n#sets first to first half of line (if odd, it will be rounded up)\nfirst = line[:ln/2+1]\n\n#sets second to second half of line (if odd, it will be rounded up)\nsecond = line[ln/2:]\n\n#reverses second\nsecond = second[::-1]\n\n#reverses first\nfirst = first[::-1]\n\n#sets middle to middle of line\nmiddle = line[ln/2]\n\n#if first and second are the same and line is the same as reversed line\nif first == second and line == line[::-1]:\n    print \"Yes\"\nelse:\n    print \"No\"\n"
    },
    {
      "index": 1,
      "text": "\n\n#imports script, filename\nfrom sys import argv\nscript, filename = argv\n\n#sets txt to open filename\ntxt = open(filename)\n\n#sets line to read txt\nline = txt.read()\n\n#sets ln to length of line\nln = len(line)\n\n#sets first to first half of line (if odd, it will be rounded down) \nfirst = line[:ln/2] \n\n#sets second to second half of line (if odd, it will be rounded up) \nsecond = line[ln/2+1:]\n\n#reverses second \nsecond = second[::-1]\n\n#reverses first \nfirst = first[::-1]\n\n#sets middle to middle of line \nmiddle = line[ln/2]\n\n#if first and second are the same and line is the same as reversed line \nif first == second and line == line[::-1]:\n    print \"Yes\"\nelse:\n    print \"No\"\n"
    }
  ],
  "created": 1650784118,
  "object": "edit"
}
2022-04-24 07:08:47.634192 fix syntax errors 2 ['\n\n#imports script, filename\nfrom sys import argv\nscript, filename = argv\n\n#sets txt to open filename\ntxt = open(filename)\n\n#sets line to read txt\nline = txt.read()\n\n#sets ln to length of line\nln = len(line)\n\n#sets first to first half of line (if odd, it will be rounded up)\nfirst = line[:ln/2+1]\n\n#sets second to second half of line (if odd, it will be rounded up)\nsecond = line[ln/2:]\n\n#reverses second\nsecond = second[::-1]\n\n#reverses first\nfirst = first[::-1]\n\n#sets middle to middle of line\nmiddle = line[ln/2]\n\n#if first and second are the same and line is the same as reversed line\nif first == second and line == line[::-1]:\n    print "Yes"\nelse:\n    print "No"\n', '\n\n#imports script, filename\nfrom sys import argv\nscript, filename = argv\n\n#sets txt to open filename\ntxt = open(filename)\n\n#sets line to read txt\nline = txt.read()\n\n#sets ln to length of line\nln = len(line)\n\n#sets first to first half of line (if odd, it will be rounded down) \nfirst = line[:ln/2] \n\n#sets second to second half of line (if odd, it will be rounded up) \nsecond = line[ln/2+1:]\n\n#reverses second \nsecond = second[::-1]\n\n#reverses first \nfirst = first[::-1]\n\n#sets middle to middle of line \nmiddle = line[ln/2]\n\n#if first and second are the same and line is the same as reversed line \nif first == second and line == line[::-1]:\n    print "Yes"\nelse:\n    print "No"\n']
2022-04-24 07:08:47.634340 using api key derek
2022-04-24 07:08:53.719572 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#imports script, filename\nfrom sys import argv\nscript, filename = argv\n\n#sets txt to open filename\ntxt = open(filename)\n\n#sets line to read txt\nline = txt.read()\n\n#sets ln to length of line\nln = len(line)\n\n#sets first to first half of line\nfirst = line[:ln/2]\n\n#sets second to second half of line\nsecond = line[ln/2+1:]\n\n#sets second to reversed second (from end to start)\nsecond = second[::-1]\n\n#sets first to reversed first (from end to start)\nfirst = first[::-1]\n\n#sets middle to middle of line\nmiddle = line[ln/2]\n\n#if first and second are the same and line is the same as reversed line\nif first == second and middle == line[::-1]:\n    print \"Yes\"\nelse:\n    print \"No\"\n"
    },
    {
      "index": 1,
      "text": "\n\n#imports script, filename\nfrom sys import argv\nscript, filename = argv\n\n#sets txt to open filename\ntxt = open(filename)\n\n#sets line to read txt\nline = txt.read()\n\n#sets ln to length of line\nln = len(line)\n\n#sets first to first half of line\nfirst = line[:ln/2]\n\n#sets second to second half of line\nsecond = line[ln/2+1:]\n\n#sets second to reversed second (from end to start)\nsecond = second[::-1]\n\n#sets first to reversed first (from end to start)\nfirst = first[::-1]\n\n#if first and second are the same and line is the same as reversed line\nif first == second and line == line[::-1]:\n    print \"Yes\"\nelse:\n    print \"No\"\n"
    }
  ],
  "created": 1650784127,
  "object": "edit"
}
2022-04-24 07:08:53.719769 fix syntax errors 2 ['\n\n#imports script, filename\nfrom sys import argv\nscript, filename = argv\n\n#sets txt to open filename\ntxt = open(filename)\n\n#sets line to read txt\nline = txt.read()\n\n#sets ln to length of line\nln = len(line)\n\n#sets first to first half of line\nfirst = line[:ln/2]\n\n#sets second to second half of line\nsecond = line[ln/2+1:]\n\n#sets second to reversed second (from end to start)\nsecond = second[::-1]\n\n#sets first to reversed first (from end to start)\nfirst = first[::-1]\n\n#sets middle to middle of line\nmiddle = line[ln/2]\n\n#if first and second are the same and line is the same as reversed line\nif first == second and middle == line[::-1]:\n    print "Yes"\nelse:\n    print "No"\n', '\n\n#imports script, filename\nfrom sys import argv\nscript, filename = argv\n\n#sets txt to open filename\ntxt = open(filename)\n\n#sets line to read txt\nline = txt.read()\n\n#sets ln to length of line\nln = len(line)\n\n#sets first to first half of line\nfirst = line[:ln/2]\n\n#sets second to second half of line\nsecond = line[ln/2+1:]\n\n#sets second to reversed second (from end to start)\nsecond = second[::-1]\n\n#sets first to reversed first (from end to start)\nfirst = first[::-1]\n\n#if first and second are the same and line is the same as reversed line\nif first == second and line == line[::-1]:\n    print "Yes"\nelse:\n    print "No"\n']
2022-04-24 07:08:53.719893 size on output set 4
2022-04-24 07:08:53.719905 num operations 2
2022-04-24 07:08:53.719911 size on input set 1
2022-04-24 07:08:53.720033 using api key derek
2022-04-24 07:08:59.802534 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ninput_str = input() \n\nis_palindrome = True \nfor i in range(int(len(input_str) / 2)):\n    if input_str[i] != input_str[-i - 1]:\n        is_palindrome = False\n\nif is_palindrome:\n    print('Yes')\nelse:\n    print('No')\n"
    },
    {
      "index": 1,
      "text": "\ninput_str = input()\n\nis_palindrome = True\nfor i in range(int(len(input_str) / 2)):\n    if input_str[i] != input_str[-i - 1]:\n        is_palindrome = False\n\nif is_palindrome:\n    print('Yes')\nelse:\n    print('No')\n"
    }
  ],
  "created": 1650784133,
  "object": "edit"
}
2022-04-24 07:08:59.802709 fix spelling mistakes 2 ["\n\ninput_str = input() \n\nis_palindrome = True \nfor i in range(int(len(input_str) / 2)):\n    if input_str[i] != input_str[-i - 1]:\n        is_palindrome = False\n\nif is_palindrome:\n    print('Yes')\nelse:\n    print('No')\n", "\ninput_str = input()\n\nis_palindrome = True\nfor i in range(int(len(input_str) / 2)):\n    if input_str[i] != input_str[-i - 1]:\n        is_palindrome = False\n\nif is_palindrome:\n    print('Yes')\nelse:\n    print('No')\n"]
2022-04-24 07:08:59.802734 size on output set 2
2022-04-24 07:08:59.802741 size on input set 2
2022-04-24 07:08:59.802878 using api key derek
2022-04-24 07:09:08.527250 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ninput_str = input() \n\n#is_palindrome = True \n#for i in range(int(len(input_str) / 2)):\n#    if input_str[i] != input_str[-i - 1]:\n#        is_palindrome = False\n\n#if is_palindrome:\n#    print('Yes')\n#else:\n#    print('No')\n\nprint(input_str[::-1])\n"
    },
    {
      "index": 1,
      "text": "\ninput_str = input() \n\nis_palindrome = True\nfor i in range(int(len(input_str) / 2)):\n    if input_str[i] != input_str[-i - 1]:\n        is_palindrome = False\n\nif is_palindrome:\n    print('Yes')\nelse:\n    print('No')\n"
    }
  ],
  "created": 1650784139,
  "object": "edit"
}
2022-04-24 07:09:08.527464 fix syntax errors 2 ["\n\ninput_str = input() \n\n#is_palindrome = True \n#for i in range(int(len(input_str) / 2)):\n#    if input_str[i] != input_str[-i - 1]:\n#        is_palindrome = False\n\n#if is_palindrome:\n#    print('Yes')\n#else:\n#    print('No')\n\nprint(input_str[::-1])\n", "\ninput_str = input() \n\nis_palindrome = True\nfor i in range(int(len(input_str) / 2)):\n    if input_str[i] != input_str[-i - 1]:\n        is_palindrome = False\n\nif is_palindrome:\n    print('Yes')\nelse:\n    print('No')\n"]
2022-04-24 07:09:08.527628 using api key soukgp
2022-04-24 07:09:14.657216 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "input_str = input()\n\nis_palindrome = True\nfor i in range(int(len(input_str) / 2)):\n    if input_str[i] != input_str[-i - 1]:\n        is_palindrome = False\n\nif is_palindrome:\n    print('Yes')\nelse:\n    print('No')\n"
    },
    {
      "index": 1,
      "text": "\ninput_str = input()\n\nis_palindrome = True\nfor i in range(int(len(input_str) // 2)):\n    if input_str[i] != input_str[-i - 1]:\n        is_palindrome = False\n\nif is_palindrome:\n    print('Yes')\nelse:\n    print('No')\n"
    }
  ],
  "created": 1650784148,
  "object": "edit"
}
2022-04-24 07:09:14.657399 fix syntax errors 2 ["input_str = input()\n\nis_palindrome = True\nfor i in range(int(len(input_str) / 2)):\n    if input_str[i] != input_str[-i - 1]:\n        is_palindrome = False\n\nif is_palindrome:\n    print('Yes')\nelse:\n    print('No')\n", "\ninput_str = input()\n\nis_palindrome = True\nfor i in range(int(len(input_str) // 2)):\n    if input_str[i] != input_str[-i - 1]:\n        is_palindrome = False\n\nif is_palindrome:\n    print('Yes')\nelse:\n    print('No')\n"]
2022-04-24 07:09:14.657423 size on output set 4
