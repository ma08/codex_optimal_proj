2022-04-24 06:59:48.337055 num operations 2
2022-04-24 06:59:48.337077 size on input set 1
2022-04-24 06:59:48.337222 using api key soukgp
2022-04-24 06:59:54.027450 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom itertools import combinations\n\nN = int(input())\nL = list(map(int, input().split()))\n\ncomb = combinations(L, 3)\n\ncount = 0\nfor c in list(comb):\n    if c[0] + c[1] > c[2] and c[1] + c[2] > c[0] and c[2] + c[0] > c[1]:\n        count += 1\n\n\n\nprint(count)\n"
    },
    {
      "index": 1,
      "text": "\n#\nfrom itertools import combinations\n\nN = int(input())\nL = list(map(int, input().split()))\n\ncomb = combinations(L, 3)\n\ncount = 0\nfor c in list(comb):\n    if c[0] + c[1] > c[2] and c[1] + c[2] > c[0] and c[2] + c[0] > c[1]:\n        count += 1\n\nprint(count)\n"
    }
  ],
  "created": 1650783588,
  "object": "edit"
}
2022-04-24 06:59:54.027667 fix spelling mistakes 2 ['\n\nfrom itertools import combinations\n\nN = int(input())\nL = list(map(int, input().split()))\n\ncomb = combinations(L, 3)\n\ncount = 0\nfor c in list(comb):\n    if c[0] + c[1] > c[2] and c[1] + c[2] > c[0] and c[2] + c[0] > c[1]:\n        count += 1\n\n\n\nprint(count)\n', '\n#\nfrom itertools import combinations\n\nN = int(input())\nL = list(map(int, input().split()))\n\ncomb = combinations(L, 3)\n\ncount = 0\nfor c in list(comb):\n    if c[0] + c[1] > c[2] and c[1] + c[2] > c[0] and c[2] + c[0] > c[1]:\n        count += 1\n\nprint(count)\n']
2022-04-24 06:59:54.027692 size on output set 2
2022-04-24 06:59:54.027699 size on input set 2
2022-04-24 06:59:54.027851 using api key derek
2022-04-24 06:59:59.943028 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom itertools import combinations\n\nN = int(input())\nL = list(map(int, input().split()))\n\ncomb = combinations(L, 3)\n\ncount = 0\nfor c in list(comb):\n    if c[0] + c[1] > c[2] and c[1] + c[2] > c[0] and c[2] + c[0] > c[1]:\n        count += 1\n\nprint(count)\n"
    },
    {
      "index": 1,
      "text": "\n# https://atcoder.jp/contests/abc133/tasks/abc133_d\nfrom itertools import combinations\n\nN = int(input())\nL = list(map(int, input().split()))\n\ncomb = combinations(L, 3)\n\ncount = 0\nfor c in list(comb):\n    if c[0] + c[1] > c[2] and c[1] + c[2] > c[0] and c[2] + c[0] > c[1]:\n        count += 1\n\nprint(count)\n"
    }
  ],
  "created": 1650783594,
  "object": "edit"
}
2022-04-24 06:59:59.943207 fix syntax errors 2 ['\n\nfrom itertools import combinations\n\nN = int(input())\nL = list(map(int, input().split()))\n\ncomb = combinations(L, 3)\n\ncount = 0\nfor c in list(comb):\n    if c[0] + c[1] > c[2] and c[1] + c[2] > c[0] and c[2] + c[0] > c[1]:\n        count += 1\n\nprint(count)\n', '\n# https://atcoder.jp/contests/abc133/tasks/abc133_d\nfrom itertools import combinations\n\nN = int(input())\nL = list(map(int, input().split()))\n\ncomb = combinations(L, 3)\n\ncount = 0\nfor c in list(comb):\n    if c[0] + c[1] > c[2] and c[1] + c[2] > c[0] and c[2] + c[0] > c[1]:\n        count += 1\n\nprint(count)\n']
2022-04-24 06:59:59.943355 using api key derek
2022-04-24 07:00:05.862133 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "# -*- coding: utf-8 -*-\n\nfrom itertools import combinations\n\nN = int(input())\nL = list(map(int, input().split()))\n\ncomb = combinations(L, 3)\n\ncount = 0\nfor c in list(comb):\n    if c[0] + c[1] > c[2] and c[1] + c[2] > c[0] and c[2] + c[0] > c[1]:\n        count += 1\n\nprint(count)\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom itertools import combinations\n\nN = int(input())\nL = list(map(int, input().split()))\n\ncomb = combinations(L, 3)\n\ncount = 0\nfor c in list(comb):\n    if c[0] + c[1] > c[2] and c[1] + c[2] > c[0] and c[2] + c[0] > c[1]:\n        count += 1\nprint(count)\n"
    }
  ],
  "created": 1650783599,
  "object": "edit"
}
2022-04-24 07:00:05.862320 fix syntax errors 2 ['# -*- coding: utf-8 -*-\n\nfrom itertools import combinations\n\nN = int(input())\nL = list(map(int, input().split()))\n\ncomb = combinations(L, 3)\n\ncount = 0\nfor c in list(comb):\n    if c[0] + c[1] > c[2] and c[1] + c[2] > c[0] and c[2] + c[0] > c[1]:\n        count += 1\n\nprint(count)\n', '\n\nfrom itertools import combinations\n\nN = int(input())\nL = list(map(int, input().split()))\n\ncomb = combinations(L, 3)\n\ncount = 0\nfor c in list(comb):\n    if c[0] + c[1] > c[2] and c[1] + c[2] > c[0] and c[2] + c[0] > c[1]:\n        count += 1\nprint(count)\n']
2022-04-24 07:00:05.862346 size on output set 4
2022-04-24 07:00:05.862357 num operations 2
2022-04-24 07:00:05.862363 size on input set 1
2022-04-24 07:00:05.862482 using api key kouti
2022-04-24 07:00:14.263672 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# from itertools import combinations\n\n# n = int(input())\n# l = sorted(list(map(int, input().split())))\n\n# count = 0\n# for i in combinations(l, 3):\n#     if i[0] + i[1] > i[2]:\n#         count += 1\n\n# print(count)\n"
    },
    {
      "index": 1,
      "text": "\nfrom itertools import combinations\n\nn = int(input())\nl = sorted(list(map(int, input().split())))\n\ncount = 0\nfor i in combinations(l, 3):\n    if i[0] + i[1] > i[2]:\n        count += 1\n\nprint(count)\n"
    }
  ],
  "created": 1650783605,
  "object": "edit"
}
2022-04-24 07:00:14.263842 fix spelling mistakes 2 ['\n\n# from itertools import combinations\n\n# n = int(input())\n# l = sorted(list(map(int, input().split())))\n\n# count = 0\n# for i in combinations(l, 3):\n#     if i[0] + i[1] > i[2]:\n#         count += 1\n\n# print(count)\n', '\nfrom itertools import combinations\n\nn = int(input())\nl = sorted(list(map(int, input().split())))\n\ncount = 0\nfor i in combinations(l, 3):\n    if i[0] + i[1] > i[2]:\n        count += 1\n\nprint(count)\n']
2022-04-24 07:00:14.263864 size on output set 2
2022-04-24 07:00:14.263872 size on input set 2
2022-04-24 07:00:14.264010 using api key derek
2022-04-24 07:00:49.206784 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom itertools import combinations\n\nn = int(input())\nl = sorted(list(map(int, input().split())))\n\ncount = 0\nfor i in combinations(l, 3):\n    if i[0] + i[1] > i[2]:\n        count += 1\n\nprint(count)\n"
    },
    {
      "index": 1,
      "text": "\n\n# from itertools import combinations\n\n# n = int(input())\n# l = sorted(list(map(int, input().split())))\n\n# count = 0\n# for i in combinations(l, 3):\n#     if i[0] + i[1] > i[2]:\n#         count += 1\n\n\n\n# def count_substring(string, sub_string):\n#     count = 0\n#     for i in range(len(string)):\n#         if string[i:i + len(sub_string)] == sub_string:\n#             count += 1\n#     return count\n\n\n# if __name__ == '__main__':\n#     string = input().strip()\n#     sub_string = input().strip()\n\n#     count = count_substring(string, sub_string)\n#     print(count)\n\n\n# def count_substring(string, sub_string):\n#     count = 0\n#     for i in range(len(string)):\n#         if string[i:i + len(sub_string)] == sub_string:\n#             count += 1\n#     return count\n\n\n# if __name__ == '__main__':\n#     string = input().strip()\n#     sub_string = input().strip()\n\n#     count = count_substring(string, sub_string)\n#     print(count)\n\n\n# def string_validators(s):\n#     print(any(char.isalnum() for char in s))\n#     print(any(char.isalpha() for char in s))\n#     print(any(char.isdigit() for char in s))\n#     print(any(char.islower() for char in s))\n#     print(any(char.isupper() for char in s))\n\n\n# if __name__ == '__main__':\n#     s = input()\n#     string_validators(s)\n\n\n# def minion_game(string):\n#     vowels = \"AEIOU\"\n#     kevin = 0\n#     stuart = 0\n#     for i in range(len(string)):\n#         if string[i] in vowels:\n#             kevin += len(string) - i\n#         else:\n#             stuart += len(string) - i\n\n#     if kevin > stuart:\n#         print(\"Kevin\", kevin)\n#     elif kevin < stuart:\n#         print(\"Stuart\", stuart)\n#     else:\n#         print(\"Draw\")\n\n\n# if __name__ == '__main__':\n#     s = input()\n#     minion_game(s)\n\n\n# def minion_game(string):\n#     vowels = \"AEIOU\"\n#     kevin = 0\n#     stuart = 0\n#     for i in range(len(string)):\n#         if string[i] in vowels:\n#             kevin += len(string) - i\n#         else:\n#             stuart += len(string) - i\n\n#     if kevin > stuart:\n#         print(\"Kevin\", kevin)\n#     elif kevin < stuart:\n#         print(\"Stuart\", stuart)\n#     else:\n#         print(\"Draw\")\n\n\n# if __name__ == '__main__':\n#     s = input()\n#     minion_game(s)\n\n\n# def minion_game(string):\n#     vowels = \"AEIOU\"\n#     kevin = 0\n#     stuart = 0\n#     for i in range(len(string)):\n#         if string[i] in vowels:\n#             kevin += len(string) - i\n#         else:\n#             stuart += len(string) - i\n\n#     if kevin > stuart:\n#         print(\"Kevin\", kevin)\n#     elif kevin < stuart:\n#         print(\"Stuart\", stuart)\n#     else:\n#         print(\"Draw\")\n\n\n# if __name__ == '__main__':\n#     s = input()\n#     minion_game(s)\n\n\n# def minion_game(string):\n#     vowels = \"AEIOU\"\n#     kevin = 0\n#     stuart = 0\n#     for i in range(len(string)):\n#         if string[i] in vowels:\n#             kevin += len(string) - i\n#         else:\n#             stuart += len(string) - i\n\n#     if kevin > stuart:\n#         print(\"Kevin\", kevin)\n#     elif kevin < stuart:\n#         print(\"Stuart\", stuart)\n#     else:\n#         print(\"Draw\")\n\n\n# if __name__ == '__main__':\n#     s = input()\n#     minion_game(s)\n\n\n# def minion_game(string):\n#     vowels = \"AEIOU\"\n#     kevin = 0\n#     stuart = 0\n#     for i in range(len(string)):\n#         if string[i] in vowels:\n#             kevin += len(string) - i\n#         else:\n#             stuart += len(string) - i\n\n#     if kevin > stuart:\n#         print(\"Kevin\", kevin)\n#     elif kevin < stuart:\n#         print(\"Stuart\", stuart)\n#     else:\n#         print(\"Draw\")\n\n\n# if __name__ == '__main__':\n#     s = input()\n#     minion_game(s)\n\n\n# def minion_game(string):\n#     vowels = \"AEIOU\"\n#     kevin = 0\n#     stuart = 0\n#     for i in range(len(string)):\n#         if string[i] in vowels:\n#             kevin += len(string) - i\n#         else:\n#             stuart += len(string) - i\n\n#     if kevin > stuart:\n#         print(\"Kevin\", kevin)\n#     elif kevin < stuart:\n#         print(\"Stuart\", stuart)\n#     else:\n#         print(\"Draw\")\n\n\n# if __name__ == '__main__':\n#     s = input()\n#     minion_game(s)\n# print(count)\n"
    }
  ],
  "created": 1650783614,
  "object": "edit"
}
2022-04-24 07:00:49.207065 fix syntax errors 2 ['\n\nfrom itertools import combinations\n\nn = int(input())\nl = sorted(list(map(int, input().split())))\n\ncount = 0\nfor i in combinations(l, 3):\n    if i[0] + i[1] > i[2]:\n        count += 1\n\nprint(count)\n', '\n\n# from itertools import combinations\n\n# n = int(input())\n# l = sorted(list(map(int, input().split())))\n\n# count = 0\n# for i in combinations(l, 3):\n#     if i[0] + i[1] > i[2]:\n#         count += 1\n\n\n\n# def count_substring(string, sub_string):\n#     count = 0\n#     for i in range(len(string)):\n#         if string[i:i + len(sub_string)] == sub_string:\n#             count += 1\n#     return count\n\n\n# if __name__ == \'__main__\':\n#     string = input().strip()\n#     sub_string = input().strip()\n\n#     count = count_substring(string, sub_string)\n#     print(count)\n\n\n# def count_substring(string, sub_string):\n#     count = 0\n#     for i in range(len(string)):\n#         if string[i:i + len(sub_string)] == sub_string:\n#             count += 1\n#     return count\n\n\n# if __name__ == \'__main__\':\n#     string = input().strip()\n#     sub_string = input().strip()\n\n#     count = count_substring(string, sub_string)\n#     print(count)\n\n\n# def string_validators(s):\n#     print(any(char.isalnum() for char in s))\n#     print(any(char.isalpha() for char in s))\n#     print(any(char.isdigit() for char in s))\n#     print(any(char.islower() for char in s))\n#     print(any(char.isupper() for char in s))\n\n\n# if __name__ == \'__main__\':\n#     s = input()\n#     string_validators(s)\n\n\n# def minion_game(string):\n#     vowels = "AEIOU"\n#     kevin = 0\n#     stuart = 0\n#     for i in range(len(string)):\n#         if string[i] in vowels:\n#             kevin += len(string) - i\n#         else:\n#             stuart += len(string) - i\n\n#     if kevin > stuart:\n#         print("Kevin", kevin)\n#     elif kevin < stuart:\n#         print("Stuart", stuart)\n#     else:\n#         print("Draw")\n\n\n# if __name__ == \'__main__\':\n#     s = input()\n#     minion_game(s)\n\n\n# def minion_game(string):\n#     vowels = "AEIOU"\n#     kevin = 0\n#     stuart = 0\n#     for i in range(len(string)):\n#         if string[i] in vowels:\n#             kevin += len(string) - i\n#         else:\n#             stuart += len(string) - i\n\n#     if kevin > stuart:\n#         print("Kevin", kevin)\n#     elif kevin < stuart:\n#         print("Stuart", stuart)\n#     else:\n#         print("Draw")\n\n\n# if __name__ == \'__main__\':\n#     s = input()\n#     minion_game(s)\n\n\n# def minion_game(string):\n#     vowels = "AEIOU"\n#     kevin = 0\n#     stuart = 0\n#     for i in range(len(string)):\n#         if string[i] in vowels:\n#             kevin += len(string) - i\n#         else:\n#             stuart += len(string) - i\n\n#     if kevin > stuart:\n#         print("Kevin", kevin)\n#     elif kevin < stuart:\n#         print("Stuart", stuart)\n#     else:\n#         print("Draw")\n\n\n# if __name__ == \'__main__\':\n#     s = input()\n#     minion_game(s)\n\n\n# def minion_game(string):\n#     vowels = "AEIOU"\n#     kevin = 0\n#     stuart = 0\n#     for i in range(len(string)):\n#         if string[i] in vowels:\n#             kevin += len(string) - i\n#         else:\n#             stuart += len(string) - i\n\n#     if kevin > stuart:\n#         print("Kevin", kevin)\n#     elif kevin < stuart:\n#         print("Stuart", stuart)\n#     else:\n#         print("Draw")\n\n\n# if __name__ == \'__main__\':\n#     s = input()\n#     minion_game(s)\n\n\n# def minion_game(string):\n#     vowels = "AEIOU"\n#     kevin = 0\n#     stuart = 0\n#     for i in range(len(string)):\n#         if string[i] in vowels:\n#             kevin += len(string) - i\n#         else:\n#             stuart += len(string) - i\n\n#     if kevin > stuart:\n#         print("Kevin", kevin)\n#     elif kevin < stuart:\n#         print("Stuart", stuart)\n#     else:\n#         print("Draw")\n\n\n# if __name__ == \'__main__\':\n#     s = input()\n#     minion_game(s)\n\n\n# def minion_game(string):\n#     vowels = "AEIOU"\n#     kevin = 0\n#     stuart = 0\n#     for i in range(len(string)):\n#         if string[i] in vowels:\n#             kevin += len(string) - i\n#         else:\n#             stuart += len(string) - i\n\n#     if kevin > stuart:\n#         print("Kevin", kevin)\n#     elif kevin < stuart:\n#         print("Stuart", stuart)\n#     else:\n#         print("Draw")\n\n\n# if __name__ == \'__main__\':\n#     s = input()\n#     minion_game(s)\n# print(count)\n']
2022-04-24 07:00:49.207266 using api key sunu
2022-04-24 07:00:57.365165 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "from itertools import combinations\n\nn = int(input())  # number of sticks\nl = sorted(list(map(int, input().split())))  # list of stick lengths\n\ncount = 0\nfor i in combinations(l, 3):\n    if i[0] + i[1] > i[2]:\n        count += 1\n\nprint(count)\n"
    },
    {
      "index": 1,
      "text": "\nfrom itertools import combinations, permutations\n\nn = int(input())\nl = sorted(list(map(int, input().split())))\n\ncount = 0\nfor i in permutations(l, 3):\n    if i[0] + i[1] > i[2]:\n        count += 1\n\nprint(count)\n"
    }
  ],
  "created": 1650783649,
  "object": "edit"
}
2022-04-24 07:00:57.365345 fix syntax errors 2 ['from itertools import combinations\n\nn = int(input())  # number of sticks\nl = sorted(list(map(int, input().split())))  # list of stick lengths\n\ncount = 0\nfor i in combinations(l, 3):\n    if i[0] + i[1] > i[2]:\n        count += 1\n\nprint(count)\n', '\nfrom itertools import combinations, permutations\n\nn = int(input())\nl = sorted(list(map(int, input().split())))\n\ncount = 0\nfor i in permutations(l, 3):\n    if i[0] + i[1] > i[2]:\n        count += 1\n\nprint(count)\n']
2022-04-24 07:00:57.365367 size on output set 4
