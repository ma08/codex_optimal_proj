2022-04-24 08:55:53.468517 num operations 2
2022-04-24 08:55:53.468537 size on input set 1
2022-04-24 08:55:53.468683 using api key kouti
2022-04-24 08:56:02.129690 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    num_ingredient = int(input())\n    ingredient = list(map(int, input().split()))\n    ingredient.sort()\n\n    while len(ingredient) > 1:\n        ingredient[0] = (ingredient[0] + ingredient[1]) / 2\n        ingredient.pop(1)\n        ingredient.sort()\n\n    print(ingredient[0])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    num_ingredient = int(input())\n    ingredients = list(map(int, input().split()))\n    ingredients.sort()\n\n    while len(ingredients) > 1:\n        ingredients[0] = (ingredients[0] + ingredients[1]) / 2\n        ingredients.pop(1)\n        ingredients.sort()\n\n    print(ingredients[0])\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650790553,
  "object": "edit"
}
2022-04-24 08:56:02.129917 fix spelling mistakes 2 ["\n\ndef main():\n    num_ingredient = int(input())\n    ingredient = list(map(int, input().split()))\n    ingredient.sort()\n\n    while len(ingredient) > 1:\n        ingredient[0] = (ingredient[0] + ingredient[1]) / 2\n        ingredient.pop(1)\n        ingredient.sort()\n\n    print(ingredient[0])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    num_ingredient = int(input())\n    ingredients = list(map(int, input().split()))\n    ingredients.sort()\n\n    while len(ingredients) > 1:\n        ingredients[0] = (ingredients[0] + ingredients[1]) / 2\n        ingredients.pop(1)\n        ingredients.sort()\n\n    print(ingredients[0])\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-24 08:56:02.129951 size on output set 2
2022-04-24 08:56:02.129961 size on input set 2
2022-04-24 08:56:02.130166 using api key sunu
2022-04-24 08:56:11.017106 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    ingredients = list(map(int, input().split()))\n    ingredients.sort()\n\n    while len(ingredients) > 1:\n        ingredients[0] = (ingredients[0] + ingredients[1]) / 2\n        ingredients.pop(1)\n        ingredients.sort()\n\n    print(ingredients[0])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    num_ingredients = int(input())\n    ingredient_list = list(map(int, input().split()))\n    ingredient_list.sort()\n\n    while len(ingredient_list) > 1:\n        ingredient_list[0] = (ingredient_list[0] + ingredient_list[1]) / 2\n        ingredient_list.pop(1)\n        ingredient_list.sort()\n\n    print(ingredient_list[0])\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650790562,
  "object": "edit"
}
2022-04-24 08:56:11.017282 fix syntax errors 2 ["\n\ndef main():\n    ingredients = list(map(int, input().split()))\n    ingredients.sort()\n\n    while len(ingredients) > 1:\n        ingredients[0] = (ingredients[0] + ingredients[1]) / 2\n        ingredients.pop(1)\n        ingredients.sort()\n\n    print(ingredients[0])\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    num_ingredients = int(input())\n    ingredient_list = list(map(int, input().split()))\n    ingredient_list.sort()\n\n    while len(ingredient_list) > 1:\n        ingredient_list[0] = (ingredient_list[0] + ingredient_list[1]) / 2\n        ingredient_list.pop(1)\n        ingredient_list.sort()\n\n    print(ingredient_list[0])\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-24 08:56:11.017435 using api key jaanu
2022-04-24 08:56:17.053700 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    num_ingredient = int(input())\n    ingredient = list(map(int, input().split()))\n    ingredient.sort()\n\n    while len(ingredient) > 1:\n        ingredient[0] = (ingredient[0] + ingredient[1]) // 2\n        ingredient.pop(1)\n        ingredient.sort()\n\n    print(ingredient[0])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    num_ingredient = int(input())\n    ingredient = list(map(int, input().split()))\n    ingredient.sort()\n\n    while len(ingredient) > 1:\n        ingredient[0] = (ingredient[0] + ingredient[1]) / 2\n        ingredient.pop(1)\n        ingredient.sort()\n\n    print(ingredient[0])\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650790571,
  "object": "edit"
}
2022-04-24 08:56:17.053920 fix syntax errors 2 ["\n\ndef main():\n    num_ingredient = int(input())\n    ingredient = list(map(int, input().split()))\n    ingredient.sort()\n\n    while len(ingredient) > 1:\n        ingredient[0] = (ingredient[0] + ingredient[1]) // 2\n        ingredient.pop(1)\n        ingredient.sort()\n\n    print(ingredient[0])\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    num_ingredient = int(input())\n    ingredient = list(map(int, input().split()))\n    ingredient.sort()\n\n    while len(ingredient) > 1:\n        ingredient[0] = (ingredient[0] + ingredient[1]) / 2\n        ingredient.pop(1)\n        ingredient.sort()\n\n    print(ingredient[0])\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-24 08:56:17.053943 size on output set 4
2022-04-24 08:56:17.053954 num operations 2
2022-04-24 08:56:17.053959 size on input set 1
2022-04-24 08:56:17.054080 using api key sunu
2022-04-24 08:56:22.488287 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "import sys\nimport heapq\n\nnum = int(sys.stdin.readline())\nv = list(map(int, sys.stdin.readline().split()))\nheapq.heapify(v)\n\nfor i in range(num-1):\n    x = heapq.heappop(v)\n    y = heapq.heappop(v)\n    heapq.heappush(v, (x+y)/2)\n\nprint(v[0])\n"
    },
    {
      "index": 1,
      "text": "#\n\nimport sys\nimport heapq\n\nnum = int(sys.stdin.readline())\nv = list(map(int, sys.stdin.readline().split()))\nheapq.heapify(v)\n\nfor i in range(num-1):\n    x = heapq.heappop(v)\n    y = heapq.heappop(v)\n    heapq.heappush(v, (x+y)/2)\n\nprint(v[0])\n"
    }
  ],
  "created": 1650790577,
  "object": "edit"
}
2022-04-24 08:56:22.488473 fix spelling mistakes 2 ['import sys\nimport heapq\n\nnum = int(sys.stdin.readline())\nv = list(map(int, sys.stdin.readline().split()))\nheapq.heapify(v)\n\nfor i in range(num-1):\n    x = heapq.heappop(v)\n    y = heapq.heappop(v)\n    heapq.heappush(v, (x+y)/2)\n\nprint(v[0])\n', '#\n\nimport sys\nimport heapq\n\nnum = int(sys.stdin.readline())\nv = list(map(int, sys.stdin.readline().split()))\nheapq.heapify(v)\n\nfor i in range(num-1):\n    x = heapq.heappop(v)\n    y = heapq.heappop(v)\n    heapq.heappush(v, (x+y)/2)\n\nprint(v[0])\n']
2022-04-24 08:56:22.488494 size on output set 2
2022-04-24 08:56:22.488501 size on input set 2
2022-04-24 08:56:22.488637 using api key soukgp
2022-04-24 08:56:28.911835 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#\n\nimport sys\nimport heapq\nimport math\n\nnum = int(sys.stdin.readline())\nv = list(map(int, sys.stdin.readline().split()))\nheapq.heapify(v)\n\nfor i in range(num-1):\n    x = heapq.heappop(v)\n    y = heapq.heappop(v)\n    heapq.heappush(v, math.floor((x+y)/2))\n\nprint(v[0])\n"
    },
    {
      "index": 1,
      "text": "#\n\nimport sys\nimport heapq\n\nnum = int(sys.stdin.readline())\nv = list(map(int, sys.stdin.readline().split()))\nheapq.heapify(v)\n\nfor i in range(num-1):\n    x = heapq.heappop(v)\n    y = heapq.heappop(v)\n    heapq.heappush(v, int((x+y)/2))\n\nprint(v[0])\n"
    }
  ],
  "created": 1650790582,
  "object": "edit"
}
2022-04-24 08:56:28.912013 fix syntax errors 2 ['#\n\nimport sys\nimport heapq\nimport math\n\nnum = int(sys.stdin.readline())\nv = list(map(int, sys.stdin.readline().split()))\nheapq.heapify(v)\n\nfor i in range(num-1):\n    x = heapq.heappop(v)\n    y = heapq.heappop(v)\n    heapq.heappush(v, math.floor((x+y)/2))\n\nprint(v[0])\n', '#\n\nimport sys\nimport heapq\n\nnum = int(sys.stdin.readline())\nv = list(map(int, sys.stdin.readline().split()))\nheapq.heapify(v)\n\nfor i in range(num-1):\n    x = heapq.heappop(v)\n    y = heapq.heappop(v)\n    heapq.heappush(v, int((x+y)/2))\n\nprint(v[0])\n']
2022-04-24 08:56:28.912245 using api key soukgp
2022-04-24 08:56:39.310587 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "from collections import defaultdict\nfrom itertools import combinations\n\n# N = int(input())\n# A = list(map(int, input().split()))\n\nN = 5\nA = [1, 5, 3, 3, 2]\n\nd = defaultdict(int)\nfor i in A:\n    d[i] += 1\n\nans = 0\nfor k, v in d.items():\n    if v >= k:\n        ans += v - k\n    else:\n        ans += v\n\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "import sys\nimport heapq\n\nnum = int(sys.stdin.readline())\nv = list(map(int, sys.stdin.readline().split()))\nheapq.heapify(v)  # heapify()\ub294 \ub9ac\uc2a4\ud2b8\ub97c \ud799 \ud615\ud0dc\ub85c \ubc14\uafd4\uc90c\n\nfor i in range(num-1):\n    x = heapq.heappop(v)  # heappop()\uc740 \uac00\uc7a5 \uc791\uc740 \uac12\uc744 \ube7c\uc90c\n    y = heapq.heappop(v)\n    heapq.heappush(v, (x+y)/2)  # heappush()\ub294 \uac12\uc744 \ub123\uc5b4\uc90c\n\nprint(v[0])\n"
    }
  ],
  "created": 1650790588,
  "object": "edit"
}
2022-04-24 08:56:39.310759 fix syntax errors 2 ['from collections import defaultdict\nfrom itertools import combinations\n\n# N = int(input())\n# A = list(map(int, input().split()))\n\nN = 5\nA = [1, 5, 3, 3, 2]\n\nd = defaultdict(int)\nfor i in A:\n    d[i] += 1\n\nans = 0\nfor k, v in d.items():\n    if v >= k:\n        ans += v - k\n    else:\n        ans += v\n\nprint(ans)\n', 'import sys\nimport heapq\n\nnum = int(sys.stdin.readline())\nv = list(map(int, sys.stdin.readline().split()))\nheapq.heapify(v)  # heapify()는 리스트를 힙 형태로 바꿔줌\n\nfor i in range(num-1):\n    x = heapq.heappop(v)  # heappop()은 가장 작은 값을 빼줌\n    y = heapq.heappop(v)\n    heapq.heappush(v, (x+y)/2)  # heappush()는 값을 넣어줌\n\nprint(v[0])\n']
2022-04-24 08:56:39.310790 size on output set 4
