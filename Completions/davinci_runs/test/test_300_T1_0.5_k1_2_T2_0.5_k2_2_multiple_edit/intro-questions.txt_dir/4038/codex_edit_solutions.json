["#!/usr/bin/env python3\n\nn = int(input())\na = [int(x) for x in input().split()]  # noqa: E741\n\nif n == 1:\n    print('YES')\n    print(a[0])\nelse:\n    if len(set(a)) != n * n:\n        print('NO')\n    else:\n        n1 = n // 2  # noqa: E741\n        n2 = n - n1  # noqa: E741\n        a2 = a[n1 * n1:n * n]\n        a1 = a[0:n1 * n1]\n        a1.sort()\n        a2.sort()\n        a2.reverse()\n        if a1 == a2:\n            print('YES')\n            for i in range(n):\n                for j in range(n):\n                    print(a[i * n + j], end=' ')\n                print()\n        else:\n            print('NO')\n", "#!/usr/bin/env python3\n\nn = int(input())\na = [int(x) for x in input().split(' ')]\n\nif n == 1:\n    print('YES')\n    print(a[0])\nelse:\n    if len(set(a)) != n ** 2:\n        print('NO')\n    else:\n        n1 = n // 2\n        n2 = n - n1\n        a2 = a[n1 ** 2:n ** 2]\n        a1 = a[0:n1 ** 2]\n        a1.sort()\n        a2.sort()\n        a2.reverse()\n        if a1 == a2:\n            print('YES')\n            for i in range(n):\n                for j in range(n):\n                    print(a[i ** n + j], end=' ')\n                print()\n        else:\n            print('NO')\n", "import sys\nimport math\nimport random\n\n\ndef is_prime(n):\n    if n % 2 == 0 and n > 2:\n        return False\n    return all(n % i for i in range(3, int(math.sqrt(n)) + 1, 2))\n\ndef get_prime(n):\n    if n < 2:\n        return 2\n    if n % 2 == 0:\n        n += 1\n    while not is_prime(n):\n        n += 2\n    return n\n\ndef get_random(a, b):\n    return random.randint(a, b)\n\ndef get_random_prime(a, b):\n    return get_prime(get_random(a, b))\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b / gcd(a, b)\n\ndef gen_keys():\n    p = get_random_prime(100, 200)\n    q = get_random_prime(300, 400)\n    n = p * q\n    f = (p - 1) * (q - 1)\n    d = get_random(1, f)\n    while gcd(f, d) != 1:\n        d = get_random(1, f)\n    e = d\n    while gcd(f, e) != 1:\n        e += 1\n    return (e, n), (d, n)\n\ndef encrypt(s, key):\n    e, n = key\n    c = []\n    for i in s:\n        c.append(ord(i) ** e % n)\n    return c\n\ndef decrypt(c, key):\n    d, n = key\n    s = []\n    for i in c:\n        s.append(chr(i ** d % n))\n    return ''.join(s)\n\ndef main():\n    s = input('Enter string to encrypt: ')\n    public_key, private_key = gen_keys()\n    print('Public key: ', public_key)\n    print('Private key: ', private_key)\n    c = encrypt(s, public_key)\n    print('Encrypted string: ', c)\n    s = decrypt(c, private_key)\n    print('Decrypted string: ', s)\n\nif __name__ == '__main__':\n    main()\n", "\n\nn = int(input())\na = [int(x) for x in input().split()]\n\nif n == 1:\n    print('YES')\n    print(a[0])\nelse:\n    if len(set(a)) != n**2:\n        print('NO')\n    else:\n        n1 = n//2\n        n2 = n-n1\n        a2 = a[n1**2:n**2+1]\n        a1 = a[0:n1**2+1]\n        a1.sort()\n        a2.sort()\n        a2.reverse()\n        if a1 == a2:\n            print('YES')\n            for i in range(n):\n                for j in range(n):\n                    print(a[i*n+j],end=' ')\n                print()\n        else:\n            print('NO')\n"]