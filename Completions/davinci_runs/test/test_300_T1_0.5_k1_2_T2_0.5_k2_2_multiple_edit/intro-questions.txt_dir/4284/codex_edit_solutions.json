["\n\n#-----Solution-----\n\n#The solution is to compute the number of first type turns that can be played\n#and the number of second type turns that can be played. The maximum will be the\n#maximum of the two.\n\n#The number of first type turns that can be played is the maximum n such that\n#k-n*a >= 0. The number of second type turns that can be played is the maximum n\n#such that k-n*b >= 0.\n\n#If the maximum of the two is less than n, then the answer is -1. Otherwise, the answer\n#is the maximum of the two.\n\nimport math\n\ndef max_turns(k, n, a, b):\n    max_turns_1 = math.floor(k/a)\n    max_turns_2 = math.floor(k/b)\n    if max(max_turns_1, max_turns_2) < n:\n        return -1\n    return max(max_turns_1, max_turns_2)\n\nq = int(input())\nfor _ in range(q):\n    k, n, a, b = map(int, input().split())\n    print(max_turns(k, n, a, b))\n", "import sys\n\ndef main():\n    q = int(sys.stdin.readline())\n    for _ in range(q):\n        k, n, a, b = map(int, sys.stdin.readline().split())\n        if a <= b:\n            print(-1)\n            continue\n        if k < a:\n            print(0)\n            continue\n        if k >= a + b:\n            print(n)\n            continue\n        print((k - a) // (a - b))\n\nif __name__ == \"__main__\":\n    main()\n", "\n\n#-----Solution-----\n\n#The solution is to compute the number of first type turns that can be played\n#and the number of second type turns that can be played. The maximum will be the\n#maximum of the two.\n\n#The number of first type turns that can be played is the maximum n such that\n#k-n*a >= 0\n\n#The number of second type turns that can be played is the maximum n such that\n#k-n*b >= 0\n\n#If the maximum of the two is less than n, then the answer is -1. Otherwise, the answer is the maximum of the two.\n\nimport math\n\ndef max_turns(k, n, a, b):\n    max_turns_1 = math.floor(k/a)\n    max_turns_2 = math.floor(k/b)\n    if max(max_turns_1, max_turns_2) < n:\n        return -1\n    return max(max_turns_1, max_turns_2)\n\nq = int(input())\nfor _ in range(q):\n    k, n, a, b = map(int, input().split())\n    print(max_turns(k, n, a, b))\n", "\n\n#-----Solution-----\n\n#The solution is to compute the number of first type turns that can be played\n#and the number of second type turns that can be played. The maximum will be the\n#maximum of the two.\n\n#The number of first type turns that can be played is the maximum n such that\n#k-n*a >= 0. The number of second type turns that can be played is the maximum n\n#such that k-n*b >= 0.\n\n#If the maximum of the two is less than n, then the answer is -1. Otherwise, the answer is the maximum of the two.\n\nimport math\n\ndef max_turns(k, n, a, b):\n    max_turns_1 = math.floor(k/a)\n    max_turns_2 = math.floor(k/b)\n    if max(max_turns_1, max_turns_2) < n:\n        return -1\n    return max(max_turns_1, max_turns_2)\n\nq = int(input())\nfor _ in range(q):\n    k, n, a, b = map(int, input().split())\n    print(max_turns(k, n, a, b))\n", "import sys\n\ndef main():\n\tq = int(sys.stdin.readline())\n\tfor _ in range(q):\n\t\tk, n, a, b = map(int, sys.stdin.readline().split())\n\t\tif a <= b:\n\t\t\tprint(-1)\n\t\t\tcontinue\n\t\tif k < a:\n\t\t\tprint(0)\n\t\t\tcontinue\n\t\tif k >= a + b:\n\t\t\tprint(n)\n\t\t\tcontinue\n\t\tans = 0\n\t\twhile k >= a + b:\n\t\t\tk -= a\n\t\t\tans += 1\n\t\tif k < a:\n\t\t\tprint(ans)\n\t\telse:\n\t\t\tprint(ans + 1)\n\nif __name__ == \"__main__\":\n\tmain()\n", "\n\n# -----Solution-----\n\n# The solution is to compute the number of first type turns that can be played\n# and the number of second type turns that can be played. The maximum will be the\n# maximum of the two.\n\n# The number of first type turns that can be played is the maximum n such that\n# k-n*a >= 0\n\n# The number of second type turns that can be played is the maximum n such that\n# k-n*b >= 0\n\n# If the maximum of the two is less than n, then the answer is -1. Otherwise, the\n# answer is the maximum of the two.\n\nimport math\n\n\ndef max_turns(k, n, a, b):\n    max_turns_1 = math.floor(k / a)\n    max_turns_2 = math.floor(k / b)\n    if max(max_turns_1, max_turns_2) < n:\n        return -1\n    return max(max_turns_1, max_turns_2)\n\nq = int(input())\nfor _ in range(q):\n    k, n, a, b = map(int, input().split())\n    print(max_turns(k, n, a, b))\n"]