["\n\nimport sys\n\ndef main():\n    x, k, d = map(int, sys.stdin.readline().rstrip().split())\n    if abs(x) < k * d:\n        print(abs(x - (x // d) * d))\n    else:\n        print(abs(x) - (k * d))\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\n\ndef main():\n    x, k, d = map(int, sys.stdin.readline().rstrip().split())\n    if abs(x) < k * d:\n        print(abs(x - (x // d) * d))\n    else:\n        print(abs(x) - (k * d))\n\n\nif __name__ == '__main__':\n    main()\n", "\n#\n# The point is to find the smallest possible absolute value of the coordinate of the destination.\n# First, find the absolute value of (X - K * D) if X < 0.\n# Then, find the remainder of (X - K * D) / (2 * D) and the quotient of (X - K * D) / (2 * D).\n# If the remainder is 0, the distance is the quotient.\n# If the remainder is 1, the distance is the quotient + 1.\n\nX, K, D = map(int, input().split())\n\nif X < 0:\n    X = -X\n\nif X < K * D:\n    K = K - (X + K * D) // (2 * D)\n    X = (X + K * D) % (2 * D)\n\nif X % (2 * D) == 0:\n    print(X // (2 * D))\nelse:\n    print(X // (2 * D) + 1)\n", "\n\nX, K, D = map(int, input().split())\nX = abs(X)\n\nif X < 0:\n    X = abs(X)\n\nK = K - (X + K * D) // (2 * D)\nX = (X + K * D) % (2 * D)\n\nif X % (2 * D) == 0:\n    print(X // (2 * D))\nelse:\n    print(X // (2 * D) + 1)\n", "\n\nimport sys\n\ndef main():\n    x, k, d = map(int, sys.stdin.readline().rstrip().split())\n    if abs(x) <= k * d:\n        print(abs(x - (x // d) * d))\n    else:\n        print(abs(x) - (k * d))\n\nif __name__ == '__main__':\n    main()\n", "\n\n# The point is to find the smallest possible absolute value of the coordinates of the destination.\n# First, find the absolute value of (X - K * D).\n# Then, find the remainder of (X - K * D) / (2 * D).\n# If the remainder is 0, the distance is (X - K * D) / 2.\n\n# If the remainder is 1, the distance is (X - K * D) / 2 + 1.\n\nX, K, D = map(int, input().split())\n\nif X < 0:\n    X = -X\n\nif X < K * D:\n    K = K - (X + K * D) // (2 * D)\n    X = (X + K * D) % (2 * D)\n\nif X % (2 * D) == 0:\n    print(X // (2 * D))\nelse:\n    print(X // (2 * D) + 1)\n", "\nimport sys\n\ndef main():\n    n, k = map(int, sys.stdin.readline().rstrip().split())\n    a = list(map(int, sys.stdin.readline().rstrip().split()))\n    a.sort()\n    print(a)\n\nif __name__ == '__main__':\n    main()\n", "\n\n# The point is to find the smallest possible absolute value of the coordinates of the destination. First, find the absolute value of (X - K * D). Then, find the remainder of (X - K * D) / (2 * D). If the remainder is 0, the distance is (X - K * D) / 2. If the remainder is 1, the distance is (X - K * D) / 2 + 1.\n\nx, k, d = map(int, input().split())\n\nif x < 0:\n    x = -x\n\nif x < k * d:\n    k = k - (x + k * d) // (2 * d)\n    x = (x + k * d) % (2 * d)\n\nif x % (2 * d) == 0:\n    print(x // (2 * d))\nelse:\n    print(x // (2 * d) + 1)\n"]