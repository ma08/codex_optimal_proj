2022-04-24 08:04:07.541550 num operations 2
2022-04-24 08:04:07.541571 size on input set 1
2022-04-24 08:04:07.541744 using api key derek
2022-04-24 08:04:14.087681 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef paint_black(H, W, K):\n\tans = 0\n\tfor i in range(2 ** H):\n\t\th = bin(i)[2:].zfill(H)\n\t\tfor j in range(2 ** W):\n\t\t\tw = bin(j)[2:].zfill(W)\n\t\t\tif h.count('1') + w.count('1') == K:\n\t\t\t\tans += 1\n\treturn ans\n\nH, W, K = map(int, input().split())\n\nprint(paint_black(H, W, K))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef paint_black(H, W, K):\n\tans = 0\n\tfor i in range(2 ** H):\n\t\th = bin(i)[2:].zfill(H)\n\t\tfor j in range(2 ** W):\n\t\t\tw = bin(j)[2:].zfill(W)\n\t\t\tif h.count('1') + w.count('1') == K:\n\t\t\t\tans += 1\n\treturn ans\n\nH, W, K = map(int, input().split())\n\nprint(paint_black(H, W, K))\n"
    }
  ],
  "created": 1650787447,
  "object": "edit"
}
2022-04-24 08:04:14.087912 fix spelling mistakes 2 ["\n\ndef paint_black(H, W, K):\n\tans = 0\n\tfor i in range(2 ** H):\n\t\th = bin(i)[2:].zfill(H)\n\t\tfor j in range(2 ** W):\n\t\t\tw = bin(j)[2:].zfill(W)\n\t\t\tif h.count('1') + w.count('1') == K:\n\t\t\t\tans += 1\n\treturn ans\n\nH, W, K = map(int, input().split())\n\nprint(paint_black(H, W, K))\n", "\n\ndef paint_black(H, W, K):\n\tans = 0\n\tfor i in range(2 ** H):\n\t\th = bin(i)[2:].zfill(H)\n\t\tfor j in range(2 ** W):\n\t\t\tw = bin(j)[2:].zfill(W)\n\t\t\tif h.count('1') + w.count('1') == K:\n\t\t\t\tans += 1\n\treturn ans\n\nH, W, K = map(int, input().split())\n\nprint(paint_black(H, W, K))\n"]
2022-04-24 08:04:14.087945 size on output set 1
2022-04-24 08:04:14.087954 size on input set 1
2022-04-24 08:04:14.088079 using api key derek
2022-04-24 08:04:23.171004 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef paint_black(H, W, K):\n    ans = 0\n    for i in range(2 ** H):\n        h = bin(i)[2:].zfill(H)\n        for j in range(2 ** W):\n            w = bin(j)[2:].zfill(W)\n            if h.count('1') + w.count('1') == K:\n                ans += 1\n    return ans\n\nH, W, K = map(int, input().split())\n\nprint(paint_black(H, W, K))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef paint_black(H, W, K):\n    ans = 0\n    for i in range(2 ** H):\n        h = bin(i)[2:].zfill(H)\n        for j in range(2 ** W):\n            w = bin(j)[2:].zfill(W)\n            if h.count('1') + w.count('1') == K:\n                ans += 1\n    return ans\n\nH, W, K = map(int, input().split())\n\nprint(paint_black(H, W, K))\n"
    }
  ],
  "created": 1650787454,
  "object": "edit"
}
2022-04-24 08:04:23.171189 fix syntax errors 2 ["\ndef paint_black(H, W, K):\n    ans = 0\n    for i in range(2 ** H):\n        h = bin(i)[2:].zfill(H)\n        for j in range(2 ** W):\n            w = bin(j)[2:].zfill(W)\n            if h.count('1') + w.count('1') == K:\n                ans += 1\n    return ans\n\nH, W, K = map(int, input().split())\n\nprint(paint_black(H, W, K))\n", "\n\ndef paint_black(H, W, K):\n    ans = 0\n    for i in range(2 ** H):\n        h = bin(i)[2:].zfill(H)\n        for j in range(2 ** W):\n            w = bin(j)[2:].zfill(W)\n            if h.count('1') + w.count('1') == K:\n                ans += 1\n    return ans\n\nH, W, K = map(int, input().split())\n\nprint(paint_black(H, W, K))\n"]
2022-04-24 08:04:23.171216 size on output set 2
2022-04-24 08:04:23.171226 num operations 2
2022-04-24 08:04:23.171232 size on input set 1
2022-04-24 08:04:23.171352 using api key sunu
2022-04-24 08:04:31.606140 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    H, W, K = map(int, input().split())\n    c = [input() for _ in range(H)]\n    ans = 0\n    for mask_row in range(1 << H):\n        for mask_col in range(1 << W):\n            cnt = 0\n            for i in range(H):\n                for j in range(W):\n                    if c[i][j] == '#' and ((mask_row >> i) & 1) == 1 and ((mask_col >> j) & 1) == 1:\n                        cnt += 1\n            if cnt == K:\n                ans += 1\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n\n\ndef test():\n    import io\n    from unittest.mock import patch\n\n    inp = \"\"\"\\\n2 3 2\n..#\n###\n\"\"\"\n    out = \"\"\"\\\n5\n\"\"\"\n\n    with patch('sys.stdin.readline', side_effect=io.StringIO(inp).readline):\n        with patch('sys.stdout', new=io.StringIO()) as fake_out:\n            main()\n            assert fake_out.getvalue() == out\n\n\n# tests\ntest()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    H, W, K = map(int, input().split())\n    c = [input() for _ in range(H)]\n    ans = 0\n    for mask_row in range(1 << H):\n        for mask_col in range(1 << W):\n            cnt = 0\n            for i in range(H):\n                for j in range(W):\n                    if c[i][j] == '#' and ((mask_row >> i) & 1) == 1 and ((mask_col >> j) & 1) == 1:\n                        cnt += 1\n            if cnt == K:\n                ans += 1\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n\n\ndef test():\n    import io, sys\n    from unittest.mock import patch\n\n    inp = \"\"\"\\\n2 3 2\n..#\n###\n\"\"\"\n    out = \"\"\"\\\n5\n\"\"\"\n\n    with patch('sys.stdin.readline', side_effect=io.StringIO(inp).readline):\n        with patch('sys.stdout', new=io.StringIO()) as fake_out:\n            main()\n            assert fake_out.getvalue() == out\n\n\n# tests\ntest()\n"
    }
  ],
  "created": 1650787463,
  "object": "edit"
}
2022-04-24 08:04:31.606344 fix spelling mistakes 2 ['\ndef main():\n    H, W, K = map(int, input().split())\n    c = [input() for _ in range(H)]\n    ans = 0\n    for mask_row in range(1 << H):\n        for mask_col in range(1 << W):\n            cnt = 0\n            for i in range(H):\n                for j in range(W):\n                    if c[i][j] == \'#\' and ((mask_row >> i) & 1) == 1 and ((mask_col >> j) & 1) == 1:\n                        cnt += 1\n            if cnt == K:\n                ans += 1\n    print(ans)\n\n\nif __name__ == \'__main__\':\n    main()\n\n\ndef test():\n    import io\n    from unittest.mock import patch\n\n    inp = """\\\n2 3 2\n..#\n###\n"""\n    out = """\\\n5\n"""\n\n    with patch(\'sys.stdin.readline\', side_effect=io.StringIO(inp).readline):\n        with patch(\'sys.stdout\', new=io.StringIO()) as fake_out:\n            main()\n            assert fake_out.getvalue() == out\n\n\n# tests\ntest()\n', '\ndef main():\n    H, W, K = map(int, input().split())\n    c = [input() for _ in range(H)]\n    ans = 0\n    for mask_row in range(1 << H):\n        for mask_col in range(1 << W):\n            cnt = 0\n            for i in range(H):\n                for j in range(W):\n                    if c[i][j] == \'#\' and ((mask_row >> i) & 1) == 1 and ((mask_col >> j) & 1) == 1:\n                        cnt += 1\n            if cnt == K:\n                ans += 1\n    print(ans)\n\n\nif __name__ == \'__main__\':\n    main()\n\n\ndef test():\n    import io, sys\n    from unittest.mock import patch\n\n    inp = """\\\n2 3 2\n..#\n###\n"""\n    out = """\\\n5\n"""\n\n    with patch(\'sys.stdin.readline\', side_effect=io.StringIO(inp).readline):\n        with patch(\'sys.stdout\', new=io.StringIO()) as fake_out:\n            main()\n            assert fake_out.getvalue() == out\n\n\n# tests\ntest()\n']
2022-04-24 08:04:31.606382 size on output set 2
2022-04-24 08:04:31.606389 size on input set 2
2022-04-24 08:04:31.606509 using api key jaanu
2022-04-24 08:04:39.182394 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    H, W, K = map(int, input().split())\n    c = [input() for _ in range(H)]\n    ans = 0\n    for mask_row in range(1 << H):\n        for mask_col in range(1 << W):\n            cnt = 0\n            for i in range(H):\n                for j in range(W):\n                    if c[i][j] == '#' and ((mask_row >> i) & 1) == 1 and ((mask_col >> j) & 1) == 1:\n                        cnt += 1\n            if cnt == K:\n                ans += 1\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n\n\ndef test():\n    import io, sys\n    from unittest.mock import patch\n\n    inp = '''\\\n    2 3 2\n    ..#\n    ###\n    '''\n    out = '''\\\n    5\n    '''\n\n    with patch('sys.stdin.readline', side_effect=io.StringIO(inp).readline):\n        with patch('sys.stdout', new=io.StringIO()) as fake_out:\n            main()\n            assert fake_out.getvalue() == out\n\n\n# tests\ntest()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    H, W, K = map(int, input().split())\n    C = [input() for _ in range(H)]\n    ans = 0\n    for mask_row in range(1 << H):\n        for mask_col in range(1 << W):\n            cnt = 0\n            for i in range(H):\n                for j in range(W):\n                    if C[i][j] == '#' and ((mask_row >> i) & 1) == 1 and ((mask_col >> j) & 1) == 1:\n                        cnt += 1\n            if cnt == K:\n                ans += 1\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n\n\ndef test():\n    import io, sys\n    from unittest.mock import patch\n\n    inp = \"\"\"\\\n2 3 2\n..#\n###\n\"\"\"\n    out = \"\"\"\\\n5\n\"\"\"\n\n    with patch('sys.stdin.readline', side_effect=io.StringIO(inp).readline):\n        with patch('sys.stdout', new=io.StringIO()) as fake_out:\n            main()\n            assert fake_out.getvalue() == out\n\n\n# tests\ntest()\n"
    }
  ],
  "created": 1650787471,
  "object": "edit"
}
2022-04-24 08:04:39.182666 fix syntax errors 2 ["\ndef main():\n    H, W, K = map(int, input().split())\n    c = [input() for _ in range(H)]\n    ans = 0\n    for mask_row in range(1 << H):\n        for mask_col in range(1 << W):\n            cnt = 0\n            for i in range(H):\n                for j in range(W):\n                    if c[i][j] == '#' and ((mask_row >> i) & 1) == 1 and ((mask_col >> j) & 1) == 1:\n                        cnt += 1\n            if cnt == K:\n                ans += 1\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n\n\ndef test():\n    import io, sys\n    from unittest.mock import patch\n\n    inp = '''\\\n    2 3 2\n    ..#\n    ###\n    '''\n    out = '''\\\n    5\n    '''\n\n    with patch('sys.stdin.readline', side_effect=io.StringIO(inp).readline):\n        with patch('sys.stdout', new=io.StringIO()) as fake_out:\n            main()\n            assert fake_out.getvalue() == out\n\n\n# tests\ntest()\n", '\ndef main():\n    H, W, K = map(int, input().split())\n    C = [input() for _ in range(H)]\n    ans = 0\n    for mask_row in range(1 << H):\n        for mask_col in range(1 << W):\n            cnt = 0\n            for i in range(H):\n                for j in range(W):\n                    if C[i][j] == \'#\' and ((mask_row >> i) & 1) == 1 and ((mask_col >> j) & 1) == 1:\n                        cnt += 1\n            if cnt == K:\n                ans += 1\n    print(ans)\n\n\nif __name__ == \'__main__\':\n    main()\n\n\ndef test():\n    import io, sys\n    from unittest.mock import patch\n\n    inp = """\\\n2 3 2\n..#\n###\n"""\n    out = """\\\n5\n"""\n\n    with patch(\'sys.stdin.readline\', side_effect=io.StringIO(inp).readline):\n        with patch(\'sys.stdout\', new=io.StringIO()) as fake_out:\n            main()\n            assert fake_out.getvalue() == out\n\n\n# tests\ntest()\n']
2022-04-24 08:04:39.182835 using api key soukgp
2022-04-24 08:04:47.883966 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    h, w, k = map(int, input().split())\n    c = [input() for _ in range(h)]\n    ans = 0\n    for mask_row in range(1 << h):\n        for mask_col in range(1 << w):\n            cnt = 0\n            for i in range(h):\n                for j in range(w):\n                    if c[i][j] == '#' and ((mask_row >> i) & 1) == 1 and ((mask_col >> j) & 1) == 1:\n                        cnt += 1\n            if cnt == k:\n                ans += 1\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n\n\ndef test():\n    import io\n    from unittest.mock import patch\n\n    inp = \"\"\"\\\n2 3 2\n..#\n###\n\"\"\"\n    out = \"\"\"\\\n5\n\"\"\"\n\n    with patch('sys.stdin.readline', side_effect=io.StringIO(inp).readline):\n        with patch('sys.stdout', new=io.StringIO()) as fake_out:\n            main()\n            assert fake_out.getvalue() == out\n\n\n# tests\ntest()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    H, W, K = map(int, input().split())\n    c = [input() for _ in range(H)]\n    ans = 0\n    for mask_row in range(1 << H):\n        for mask_col in range(1 << W):\n            cnt = 0\n            for i in range(H):\n                for j in range(W):\n                    if c[i][j] == '#' and ((mask_row >> i) & 1) == 1 and ((mask_col >> j) & 1) == 1:\n                        cnt += 1\n            if cnt == K:\n                ans += 1\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n\n\ndef test():\n    import io\n    from unittest.mock import patch\n\n    inp = \"\"\"\\\n2 3 2\n..#\n###\n\"\"\"  # noqa\n    out = \"\"\"\\\n5\n\"\"\"\n\n    with patch('sys.stdin.readline', side_effect=io.StringIO(inp).readline):\n        with patch('sys.stdout', new=io.StringIO()) as fake_out:\n            main()\n            assert fake_out.getvalue() == out\n\n\n# tests\ntest()\n"
    }
  ],
  "created": 1650787479,
  "object": "edit"
}
2022-04-24 08:04:47.884165 fix syntax errors 2 ['\ndef main():\n    h, w, k = map(int, input().split())\n    c = [input() for _ in range(h)]\n    ans = 0\n    for mask_row in range(1 << h):\n        for mask_col in range(1 << w):\n            cnt = 0\n            for i in range(h):\n                for j in range(w):\n                    if c[i][j] == \'#\' and ((mask_row >> i) & 1) == 1 and ((mask_col >> j) & 1) == 1:\n                        cnt += 1\n            if cnt == k:\n                ans += 1\n    print(ans)\n\n\nif __name__ == \'__main__\':\n    main()\n\n\ndef test():\n    import io\n    from unittest.mock import patch\n\n    inp = """\\\n2 3 2\n..#\n###\n"""\n    out = """\\\n5\n"""\n\n    with patch(\'sys.stdin.readline\', side_effect=io.StringIO(inp).readline):\n        with patch(\'sys.stdout\', new=io.StringIO()) as fake_out:\n            main()\n            assert fake_out.getvalue() == out\n\n\n# tests\ntest()\n', '\ndef main():\n    H, W, K = map(int, input().split())\n    c = [input() for _ in range(H)]\n    ans = 0\n    for mask_row in range(1 << H):\n        for mask_col in range(1 << W):\n            cnt = 0\n            for i in range(H):\n                for j in range(W):\n                    if c[i][j] == \'#\' and ((mask_row >> i) & 1) == 1 and ((mask_col >> j) & 1) == 1:\n                        cnt += 1\n            if cnt == K:\n                ans += 1\n    print(ans)\n\n\nif __name__ == \'__main__\':\n    main()\n\n\ndef test():\n    import io\n    from unittest.mock import patch\n\n    inp = """\\\n2 3 2\n..#\n###\n"""  # noqa\n    out = """\\\n5\n"""\n\n    with patch(\'sys.stdin.readline\', side_effect=io.StringIO(inp).readline):\n        with patch(\'sys.stdout\', new=io.StringIO()) as fake_out:\n            main()\n            assert fake_out.getvalue() == out\n\n\n# tests\ntest()\n']
2022-04-24 08:04:47.884203 size on output set 4
