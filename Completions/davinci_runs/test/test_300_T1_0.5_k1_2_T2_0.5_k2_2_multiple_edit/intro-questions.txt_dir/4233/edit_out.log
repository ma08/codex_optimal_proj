2022-04-24 08:28:08.691754 num operations 2
2022-04-24 08:28:08.691774 size on input set 1
2022-04-24 08:28:08.691908 using api key sunu
2022-04-24 08:28:14.670725 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "def stars(n,m,grid):\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                s = 1\n                while i+s < n and i-s >=0 and j+s < m and j-s >= 0:\n                    if grid[i+s][j] == '*' and grid[i-s][j] == '*' and grid[i][j+s] == '*' and grid[i][j-s] == '*':\n                        grid[i+s][j] = '.'\n                        grid[i-s][j] = '.'\n                        grid[i][j+s] = '.'\n                        grid[i][j-s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i+1,j+1,s-1)\n    if k == 0:\n        print(-1)\n\n\nn,m = map(int,input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n,m,grid)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef stars(n,m,grid):\n    #print(grid)\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                #checking for the stars in the cross\n                s = 1\n                while i+s < n and i-s >=0 and j+s < m and j-s >= 0:\n                    if grid[i+s][j] == '*' and grid[i-s][j] == '*' and grid[i][j+s] == '*' and grid[i][j-s] == '*':\n                        grid[i+s][j] = '.'\n                        grid[i-s][j] = '.'\n                        grid[i][j+s] = '.'\n                        grid[i][j-s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i+1,j+1,s-1)\n    #if there are no stars\n    if k == 0:\n        print(-1)\n\n\nn,m = map(int,input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n,m,grid)\n"
    }
  ],
  "created": 1650788888,
  "object": "edit"
}
2022-04-24 08:28:14.670961 fix spelling mistakes 2 ["def stars(n,m,grid):\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                s = 1\n                while i+s < n and i-s >=0 and j+s < m and j-s >= 0:\n                    if grid[i+s][j] == '*' and grid[i-s][j] == '*' and grid[i][j+s] == '*' and grid[i][j-s] == '*':\n                        grid[i+s][j] = '.'\n                        grid[i-s][j] = '.'\n                        grid[i][j+s] = '.'\n                        grid[i][j-s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i+1,j+1,s-1)\n    if k == 0:\n        print(-1)\n\n\nn,m = map(int,input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n,m,grid)\n", "\n\ndef stars(n,m,grid):\n    #print(grid)\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                #checking for the stars in the cross\n                s = 1\n                while i+s < n and i-s >=0 and j+s < m and j-s >= 0:\n                    if grid[i+s][j] == '*' and grid[i-s][j] == '*' and grid[i][j+s] == '*' and grid[i][j-s] == '*':\n                        grid[i+s][j] = '.'\n                        grid[i-s][j] = '.'\n                        grid[i][j+s] = '.'\n                        grid[i][j-s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i+1,j+1,s-1)\n    #if there are no stars\n    if k == 0:\n        print(-1)\n\n\nn,m = map(int,input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n,m,grid)\n"]
2022-04-24 08:28:14.670998 size on output set 2
2022-04-24 08:28:14.671005 size on input set 2
2022-04-24 08:28:14.671146 using api key jaanu
2022-04-24 08:28:33.904472 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef stars(n,m,grid):\n    # print(grid)\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                # checking for the stars in the cross\n                s = 1\n                while i + s < n and i - s >= 0 and j + s < m and j - s >= 0:\n                    if grid[i + s][j] == '*' and grid[i - s][j] == '*' and grid[i][j + s] == '*' and grid[i][j - s] == '*':\n                        grid[i + s][j] = '.'\n                        grid[i - s][j] = '.'\n                        grid[i][j + s] = '.'\n                        grid[i][j - s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i + 1, j + 1, s - 1)\n    # if there are no stars\n    if k == 0:\n        print(-1)\n\n\n\nn, m = map(int, input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n,m,grid)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef stars(n,m,grid):\n    #print(grid)\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                #checking for the stars in the cross\n                s = 1\n                while i+s < n and i-s >=0 and j+s < m and j-s >= 0:\n                    if grid[i+s][j] == '*' and grid[i-s][j] == '*' and grid[i][j+s] == '*' and grid[i][j-s] == '*':\n                        grid[i+s][j] = '.'\n                        grid[i-s][j] = '.'\n                        grid[i][j+s] = '.'\n                        grid[i][j-s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i+1,j+1,s-1) \n    #if there are no stars\n    if k == 0:\n        print(-1)\n\n\nn,m = map(int,input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n,m,grid)\n"
    }
  ],
  "created": 1650788894,
  "object": "edit"
}
2022-04-24 08:28:33.904655 fix syntax errors 2 ["\n\ndef stars(n,m,grid):\n    # print(grid)\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                # checking for the stars in the cross\n                s = 1\n                while i + s < n and i - s >= 0 and j + s < m and j - s >= 0:\n                    if grid[i + s][j] == '*' and grid[i - s][j] == '*' and grid[i][j + s] == '*' and grid[i][j - s] == '*':\n                        grid[i + s][j] = '.'\n                        grid[i - s][j] = '.'\n                        grid[i][j + s] = '.'\n                        grid[i][j - s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i + 1, j + 1, s - 1)\n    # if there are no stars\n    if k == 0:\n        print(-1)\n\n\n\nn, m = map(int, input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n,m,grid)\n", "\n\ndef stars(n,m,grid):\n    #print(grid)\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                #checking for the stars in the cross\n                s = 1\n                while i+s < n and i-s >=0 and j+s < m and j-s >= 0:\n                    if grid[i+s][j] == '*' and grid[i-s][j] == '*' and grid[i][j+s] == '*' and grid[i][j-s] == '*':\n                        grid[i+s][j] = '.'\n                        grid[i-s][j] = '.'\n                        grid[i][j+s] = '.'\n                        grid[i][j-s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i+1,j+1,s-1) \n    #if there are no stars\n    if k == 0:\n        print(-1)\n\n\nn,m = map(int,input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n,m,grid)\n"]
2022-04-24 08:28:33.904885 using api key jaanu
2022-04-24 08:28:46.185710 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "def stars(n, m, grid):\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                s = 1\n                while i + s < n and i - s >= 0 and j + s < m and j - s >= 0:\n                    if grid[i + s][j] == '*' and grid[i - s][j] == '*' and grid[i][j + s] == '*' and grid[i][j - s] == '*':\n                        grid[i + s][j] = '.'\n                        grid[i - s][j] = '.'\n                        grid[i][j + s] = '.'\n                        grid[i][j - s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i + 1, j + 1, s - 1)\n    if k == 0:\n        print(-1)\n\n\n\nn, m = map(int, input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n, m, grid)\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python3\n\n\ndef stars(n,m,grid):\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                s = 1\n                while i+s < n and i-s >=0 and j+s < m and j-s >= 0:\n                    if grid[i+s][j] == '*' and grid[i-s][j] == '*' and grid[i][j+s] == '*' and grid[i][j-s] == '*':\n                        grid[i+s][j] = '.'\n                        grid[i-s][j] = '.'\n                        grid[i][j+s] = '.'\n                        grid[i][j-s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i+1,j+1,s-1)\n    if k == 0:\n        print(-1)\n\n\nn,m = map(int,input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n,m,grid)\n"
    }
  ],
  "created": 1650788913,
  "object": "edit"
}
2022-04-24 08:28:46.185892 fix syntax errors 2 ["def stars(n, m, grid):\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                s = 1\n                while i + s < n and i - s >= 0 and j + s < m and j - s >= 0:\n                    if grid[i + s][j] == '*' and grid[i - s][j] == '*' and grid[i][j + s] == '*' and grid[i][j - s] == '*':\n                        grid[i + s][j] = '.'\n                        grid[i - s][j] = '.'\n                        grid[i][j + s] = '.'\n                        grid[i][j - s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i + 1, j + 1, s - 1)\n    if k == 0:\n        print(-1)\n\n\n\nn, m = map(int, input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n, m, grid)\n", "#!/usr/bin/env python3\n\n\ndef stars(n,m,grid):\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                s = 1\n                while i+s < n and i-s >=0 and j+s < m and j-s >= 0:\n                    if grid[i+s][j] == '*' and grid[i-s][j] == '*' and grid[i][j+s] == '*' and grid[i][j-s] == '*':\n                        grid[i+s][j] = '.'\n                        grid[i-s][j] = '.'\n                        grid[i][j+s] = '.'\n                        grid[i][j-s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i+1,j+1,s-1)\n    if k == 0:\n        print(-1)\n\n\nn,m = map(int,input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n,m,grid)\n"]
2022-04-24 08:28:46.185942 size on output set 4
2022-04-24 08:28:46.185953 num operations 2
2022-04-24 08:28:46.185960 size on input set 1
2022-04-24 08:28:46.186082 using api key soukgp
2022-04-24 08:28:52.268858 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n,m = map(int,input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if (grid[i][j] == '*'):\n                if (i>0 and j>0 and grid[i-1][j-1] == '*') or (i>0 and grid[i-1][j] == '*') or (i>0 and j<m-1 and grid[i-1][j+1] == '*') or (j>0 and grid[i][j-1] == '*') or (j<m-1 and grid[i][j+1] == '*') or (i<n-1 and j>0 and grid[i+1][j-1] == '*') or (i<n-1 and grid[i+1][j] == '*') or (i<n-1 and j<m-1 and grid[i+1][j+1] == '*'):\n                    stars.append([i+1,j+1,1])\n                else:\n                    flag = True\n                    r = 0\n                    while(flag):\n                        r += 1\n                        if (i-r<0 or j-r<0 or i+r>=n or j+r>=m):\n                            flag = False\n                        else:\n                            if (grid[i-r][j-r] == '*' and grid[i-r][j+r] == '*' and grid[i+r][j-r] == '*' and grid[i+r][j+r] == '*'):\n                                stars.append([i+1,j+1,r])\n                            else:\n                                flag = False\n    if (len(stars) == 0):\n        print(\"-1\")\n    else:\n        print(len(stars))\n        for i in range(len(stars)):\n            print(stars[i][0],stars[i][1],stars[i][2])\nmain()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    n,m = map(int,input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if (grid[i][j] == '*'):\n                if (i>0 and j>0 and grid[i-1][j-1] == '*') or (i>0 and grid[i-1][j] == '*') or (i>0 and j<m-1 and grid[i-1][j+1] == '*') or (j>0 and grid[i][j-1] == '*') or (j<m-1 and grid[i][j+1] == '*') or (i<n-1 and j>0 and grid[i+1][j-1] == '*') or (i<n-1 and grid[i+1][j] == '*') or (i<n-1 and j<m-1 and grid[i+1][j+1] == '*'):\n                    stars.append([i+1,j+1,1])\n                else:\n                    flag = True\n                    r = 0\n                    while(flag):\n                        r += 1\n                        if (i-r<0 or j-r<0 or i+r>=n or j+r>=m):\n                            flag = False\n                        else:\n                            if (grid[i-r][j-r] == '*' and grid[i-r][j+r] == '*' and grid[i+r][j-r] == '*' and grid[i+r][j+r] == '*'):\n                                stars.append([i+1,j+1,r+1])\n                            else:\n                                flag = False\n    if (len(stars) == 0):\n        print(\"-1\")\n    else:\n        print(len(stars))\n        for i in range(len(stars)):\n            print(stars[i][0],stars[i][1],stars[i][2])\nmain()\n"
    }
  ],
  "created": 1650788926,
  "object": "edit"
}
2022-04-24 08:28:52.269045 fix spelling mistakes 2 ['\n\ndef main():\n    n,m = map(int,input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if (grid[i][j] == \'*\'):\n                if (i>0 and j>0 and grid[i-1][j-1] == \'*\') or (i>0 and grid[i-1][j] == \'*\') or (i>0 and j<m-1 and grid[i-1][j+1] == \'*\') or (j>0 and grid[i][j-1] == \'*\') or (j<m-1 and grid[i][j+1] == \'*\') or (i<n-1 and j>0 and grid[i+1][j-1] == \'*\') or (i<n-1 and grid[i+1][j] == \'*\') or (i<n-1 and j<m-1 and grid[i+1][j+1] == \'*\'):\n                    stars.append([i+1,j+1,1])\n                else:\n                    flag = True\n                    r = 0\n                    while(flag):\n                        r += 1\n                        if (i-r<0 or j-r<0 or i+r>=n or j+r>=m):\n                            flag = False\n                        else:\n                            if (grid[i-r][j-r] == \'*\' and grid[i-r][j+r] == \'*\' and grid[i+r][j-r] == \'*\' and grid[i+r][j+r] == \'*\'):\n                                stars.append([i+1,j+1,r])\n                            else:\n                                flag = False\n    if (len(stars) == 0):\n        print("-1")\n    else:\n        print(len(stars))\n        for i in range(len(stars)):\n            print(stars[i][0],stars[i][1],stars[i][2])\nmain()\n', '\ndef main():\n    n,m = map(int,input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if (grid[i][j] == \'*\'):\n                if (i>0 and j>0 and grid[i-1][j-1] == \'*\') or (i>0 and grid[i-1][j] == \'*\') or (i>0 and j<m-1 and grid[i-1][j+1] == \'*\') or (j>0 and grid[i][j-1] == \'*\') or (j<m-1 and grid[i][j+1] == \'*\') or (i<n-1 and j>0 and grid[i+1][j-1] == \'*\') or (i<n-1 and grid[i+1][j] == \'*\') or (i<n-1 and j<m-1 and grid[i+1][j+1] == \'*\'):\n                    stars.append([i+1,j+1,1])\n                else:\n                    flag = True\n                    r = 0\n                    while(flag):\n                        r += 1\n                        if (i-r<0 or j-r<0 or i+r>=n or j+r>=m):\n                            flag = False\n                        else:\n                            if (grid[i-r][j-r] == \'*\' and grid[i-r][j+r] == \'*\' and grid[i+r][j-r] == \'*\' and grid[i+r][j+r] == \'*\'):\n                                stars.append([i+1,j+1,r+1])\n                            else:\n                                flag = False\n    if (len(stars) == 0):\n        print("-1")\n    else:\n        print(len(stars))\n        for i in range(len(stars)):\n            print(stars[i][0],stars[i][1],stars[i][2])\nmain()\n']
2022-04-24 08:28:52.269203 size on output set 2
2022-04-24 08:28:52.269217 size on input set 2
2022-04-24 08:28:52.269382 using api key sunu
2022-04-24 08:29:11.715655 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n, m = map(int, input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if (grid[i][j] == '*'):\n                if (i > 0 and j > 0 and grid[i-1][j-1] == '*') or (i > 0 and grid[i-1][j] == '*') or (i > 0 and j < m-1 and grid[i-1][j+1] == '*') or (j > 0 and grid[i][j-1] == '*') or (j < m-1 and grid[i][j+1] == '*') or (i < n-1 and j > 0 and grid[i+1][j-1] == '*') or (i < n-1 and grid[i+1][j] == '*') or (i < n-1 and j < m-1 and grid[i+1][j+1] == '*'):\n                    stars.append([i+1, j+1, 1])\n                else:\n                    flag = True\n                    r = 0\n                    while flag:\n                        r += 1\n                        if (i-r < 0 or j-r < 0 or i+r >= n or j+r >= m):\n                            flag = False\n                        else:\n                            if (grid[i-r][j-r] == '*' and grid[i-r][j+r] == '*' and grid[i+r][j-r] == '*' and\n                                    grid[i+r][j+r] == '*'):\n                                stars.append([i+1, j+1, r])\n                            else:\n                                flag = False\n    if (len(stars) == 0):\n        print(\"-1\")\n    else:\n        print(len(stars))\n        for i in range(len(stars)):\n            print(stars[i][0], stars[i][1], stars[i][2])\n\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\ns = input()\ns = s.lower()\ns = s.replace('a','')\ns = s.replace('o','')\ns = s.replace('y','')\ns = s.replace('e','')\ns = s.replace('u','')\ns = s.replace('i','')\nfor i in range(len(s)):\n    print('.',end='')\n    print(s[i],end='')\nprint()\n"
    }
  ],
  "created": 1650788932,
  "object": "edit"
}
2022-04-24 08:29:11.715845 fix syntax errors 2 ['\n\ndef main():\n    n, m = map(int, input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if (grid[i][j] == \'*\'):\n                if (i > 0 and j > 0 and grid[i-1][j-1] == \'*\') or (i > 0 and grid[i-1][j] == \'*\') or (i > 0 and j < m-1 and grid[i-1][j+1] == \'*\') or (j > 0 and grid[i][j-1] == \'*\') or (j < m-1 and grid[i][j+1] == \'*\') or (i < n-1 and j > 0 and grid[i+1][j-1] == \'*\') or (i < n-1 and grid[i+1][j] == \'*\') or (i < n-1 and j < m-1 and grid[i+1][j+1] == \'*\'):\n                    stars.append([i+1, j+1, 1])\n                else:\n                    flag = True\n                    r = 0\n                    while flag:\n                        r += 1\n                        if (i-r < 0 or j-r < 0 or i+r >= n or j+r >= m):\n                            flag = False\n                        else:\n                            if (grid[i-r][j-r] == \'*\' and grid[i-r][j+r] == \'*\' and grid[i+r][j-r] == \'*\' and\n                                    grid[i+r][j+r] == \'*\'):\n                                stars.append([i+1, j+1, r])\n                            else:\n                                flag = False\n    if (len(stars) == 0):\n        print("-1")\n    else:\n        print(len(stars))\n        for i in range(len(stars)):\n            print(stars[i][0], stars[i][1], stars[i][2])\n\n\nmain()\n', "\ns = input()\ns = s.lower()\ns = s.replace('a','')\ns = s.replace('o','')\ns = s.replace('y','')\ns = s.replace('e','')\ns = s.replace('u','')\ns = s.replace('i','')\nfor i in range(len(s)):\n    print('.',end='')\n    print(s[i],end='')\nprint()\n"]
2022-04-24 08:29:11.715998 using api key kouti
2022-04-24 08:29:32.754833 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "def main():\n    n, m = map(int, input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                if (i > 0 and j > 0 and grid[i-1][j-1] == '*') or (i > 0 and grid[i-1][j] == '*') or (i > 0 and j < m-1 and grid[i-1][j+1] == '*') or (j > 0 and grid[i][j-1] == '*') or (j < m-1 and grid[i][j+1] == '*') or (i < n-1 and j > 0 and grid[i+1][j-1] == '*') or (i < n-1 and grid[i+1][j] == '*') or (i < n-1 and j < m-1 and grid[i+1][j+1] == '*'):\n                    stars.append([i+1, j+1, 1])\n                else:\n                    flag = True\n                    r = 0\n                    while(flag):\n                        r += 1\n                        if (i-r<0 or j-r<0 or i+r>=n or j+r>=m):\n                            flag = False\n                        else:\n                            if (grid[i-r][j-r] == '*' and grid[i-r][j+r] == '*' and grid[i+r][j-r] == '*' and grid[i+r][j+r] == '*'):\n                                stars.append([i+1,j+1,r+1])\n                            else:\n                                flag = False\n    if (len(stars) == 0):\n        print(\"-1\")\n    else:\n        print(len(stars))\n        for i in range(len(stars)):\n            print(stars[i][0],stars[i][1],stars[i][2])\nmain()\n"
    },
    {
      "index": 1,
      "text": "def main():\n    n, m = map(int, input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if (grid[i][j] == '*'):\n                if (i > 0 and j > 0 and grid[i-1][j-1] == '*') or (i > 0 and grid[i-1][j] == '*') or (i > 0 and j < m-1 and grid[i-1][j+1] == '*') or (j > 0 and grid[i][j-1] == '*') or (j < m-1 and grid[i][j+1] == '*') or (i < n-1 and j > 0 and grid[i+1][j-1] == '*') or (i < n-1 and grid[i+1][j] == '*') or (i < n-1 and j < m-1 and grid[i+1][j+1] == '*'):\n                    stars.append([i+1, j+1, 1])\n                else:\n                    flag = True\n                    r = 0\n                    while(flag):\n                        r += 1\n                        if (i-r<0 or j-r<0 or i+r>=n or j+r>=m):\n                            flag = False\n                        else:\n                            if (grid[i-r][j-r] == '*' and grid[i-r][j+r] == '*' and grid[i+r][j-r] == '*' and grid[i+r][j+r] == '*'):\n                                stars.append([i+1,j+1,r+1])\n                            else:\n                                flag = False\n    if (len(stars) == 0):\n        print(\"-1\")\n    else:\n        print(len(stars))\n        for i in range(len(stars)):\n            print(stars[i][0],stars[i][1],stars[i][2])\nmain()\n"
    }
  ],
  "created": 1650788951,
  "object": "edit"
}
2022-04-24 08:29:32.755022 fix syntax errors 2 ['def main():\n    n, m = map(int, input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \'*\':\n                if (i > 0 and j > 0 and grid[i-1][j-1] == \'*\') or (i > 0 and grid[i-1][j] == \'*\') or (i > 0 and j < m-1 and grid[i-1][j+1] == \'*\') or (j > 0 and grid[i][j-1] == \'*\') or (j < m-1 and grid[i][j+1] == \'*\') or (i < n-1 and j > 0 and grid[i+1][j-1] == \'*\') or (i < n-1 and grid[i+1][j] == \'*\') or (i < n-1 and j < m-1 and grid[i+1][j+1] == \'*\'):\n                    stars.append([i+1, j+1, 1])\n                else:\n                    flag = True\n                    r = 0\n                    while(flag):\n                        r += 1\n                        if (i-r<0 or j-r<0 or i+r>=n or j+r>=m):\n                            flag = False\n                        else:\n                            if (grid[i-r][j-r] == \'*\' and grid[i-r][j+r] == \'*\' and grid[i+r][j-r] == \'*\' and grid[i+r][j+r] == \'*\'):\n                                stars.append([i+1,j+1,r+1])\n                            else:\n                                flag = False\n    if (len(stars) == 0):\n        print("-1")\n    else:\n        print(len(stars))\n        for i in range(len(stars)):\n            print(stars[i][0],stars[i][1],stars[i][2])\nmain()\n', 'def main():\n    n, m = map(int, input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if (grid[i][j] == \'*\'):\n                if (i > 0 and j > 0 and grid[i-1][j-1] == \'*\') or (i > 0 and grid[i-1][j] == \'*\') or (i > 0 and j < m-1 and grid[i-1][j+1] == \'*\') or (j > 0 and grid[i][j-1] == \'*\') or (j < m-1 and grid[i][j+1] == \'*\') or (i < n-1 and j > 0 and grid[i+1][j-1] == \'*\') or (i < n-1 and grid[i+1][j] == \'*\') or (i < n-1 and j < m-1 and grid[i+1][j+1] == \'*\'):\n                    stars.append([i+1, j+1, 1])\n                else:\n                    flag = True\n                    r = 0\n                    while(flag):\n                        r += 1\n                        if (i-r<0 or j-r<0 or i+r>=n or j+r>=m):\n                            flag = False\n                        else:\n                            if (grid[i-r][j-r] == \'*\' and grid[i-r][j+r] == \'*\' and grid[i+r][j-r] == \'*\' and grid[i+r][j+r] == \'*\'):\n                                stars.append([i+1,j+1,r+1])\n                            else:\n                                flag = False\n    if (len(stars) == 0):\n        print("-1")\n    else:\n        print(len(stars))\n        for i in range(len(stars)):\n            print(stars[i][0],stars[i][1],stars[i][2])\nmain()\n']
2022-04-24 08:29:32.755139 size on output set 4
