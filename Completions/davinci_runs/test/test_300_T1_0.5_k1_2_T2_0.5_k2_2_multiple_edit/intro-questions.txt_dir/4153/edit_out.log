2022-04-24 07:28:21.117112 num operations 2
2022-04-24 07:28:21.117132 size on input set 1
2022-04-24 07:28:21.117259 using api key jaanu
2022-04-24 07:28:37.228963 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\nS = raw_input()\n\n# The number of cubes that can be removed is the maximum number of zeros that are adjacent to ones.\n# Since there can be at most 10^5 cubes, we can solve this problem in O(N) time, where N is the number of cubes.\n\n# The number of zeros adjacent to ones is the number of zeros minus the number of zeros that are not adjacent to ones.\n# The number of zeros that are not adjacent to ones is the number of zeros that are adjacent to other zeros.\n# The number of zeros that are adjacent to other zeros is the number of zeros minus the number of zeros that are not adjacent to other zeros.\n# The number of zeros that are not adjacent to other zeros is the number of zeros that are at the beginning or end of the string.\n\n# This means that the number of cubes that can be removed is the number of zeros minus the number of zeros that are at the beginning or end of the string.\n\nzeros = S.count(\"0\")\nzeros_at_beginning_or_end = len(S) - len(S.lstrip(\"0\").rstrip(\"0\"))\nprint zeros - zeros_at_beginning_or_end\n"
    },
    {
      "index": 1,
      "text": "\nS = raw_input()\n\n# The number of cubes that can be removed is the maximum number of zeroes that are adjacent to ones.\n# Since there can be at most 10^5 cubes, we can solve this problem in O(N) time, where N is the number of cubes.\n\n# The number of zeroes adjacent to ones is the number of zeroes minus the number of zeroes that are not adjacent to ones. The number of zeroes that are not adjacent to ones is the number of zeroes that are adjacent to other zeroes.\n# The number of zeroes that are adjacent to other zeroes is the number of zeroes minus the number of zeroes that are not adjacent to other zeroes. The number of zeroes that are not adjacent to other zeroes is the number of zeroes that are at the beginning or end of the string.\n\n# This means that the number of cubes that can be removed is the number of zeroes minus the number of zeroes that are at the beginning or end of the string.\n\nzeroes = S.count(\"0\")\nzeroes_at_beginning_or_end = len(S) - len(S.lstrip(\"0\").rstrip(\"0\"))\nprint zeroes - zeroes_at_beginning_or_end\n"
    }
  ],
  "created": 1650785301,
  "object": "edit"
}
2022-04-24 07:28:37.229204 fix spelling mistakes 2 ['\nS = raw_input()\n\n# The number of cubes that can be removed is the maximum number of zeros that are adjacent to ones.\n# Since there can be at most 10^5 cubes, we can solve this problem in O(N) time, where N is the number of cubes.\n\n# The number of zeros adjacent to ones is the number of zeros minus the number of zeros that are not adjacent to ones.\n# The number of zeros that are not adjacent to ones is the number of zeros that are adjacent to other zeros.\n# The number of zeros that are adjacent to other zeros is the number of zeros minus the number of zeros that are not adjacent to other zeros.\n# The number of zeros that are not adjacent to other zeros is the number of zeros that are at the beginning or end of the string.\n\n# This means that the number of cubes that can be removed is the number of zeros minus the number of zeros that are at the beginning or end of the string.\n\nzeros = S.count("0")\nzeros_at_beginning_or_end = len(S) - len(S.lstrip("0").rstrip("0"))\nprint zeros - zeros_at_beginning_or_end\n', '\nS = raw_input()\n\n# The number of cubes that can be removed is the maximum number of zeroes that are adjacent to ones.\n# Since there can be at most 10^5 cubes, we can solve this problem in O(N) time, where N is the number of cubes.\n\n# The number of zeroes adjacent to ones is the number of zeroes minus the number of zeroes that are not adjacent to ones. The number of zeroes that are not adjacent to ones is the number of zeroes that are adjacent to other zeroes.\n# The number of zeroes that are adjacent to other zeroes is the number of zeroes minus the number of zeroes that are not adjacent to other zeroes. The number of zeroes that are not adjacent to other zeroes is the number of zeroes that are at the beginning or end of the string.\n\n# This means that the number of cubes that can be removed is the number of zeroes minus the number of zeroes that are at the beginning or end of the string.\n\nzeroes = S.count("0")\nzeroes_at_beginning_or_end = len(S) - len(S.lstrip("0").rstrip("0"))\nprint zeroes - zeroes_at_beginning_or_end\n']
2022-04-24 07:28:37.229243 size on output set 2
2022-04-24 07:28:37.229257 size on input set 2
2022-04-24 07:28:37.229380 using api key sunu
2022-04-24 07:28:50.077194 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nS = raw_input()\n\n# The number of cubes that can be removed is the maximum number of zeros that are adjacent to ones.\n# Since there can be at most 10^5 cubes, we can solve this problem in O(N) time, where N is the number of cubes.\n\n# The number of zeros adjacent to ones is the number of zeros minus the number of zeros that are not adjacent to ones.\n# The number of zeros that are not adjacent to ones is the number of zeros that are adjacent to other zeros.\n# The number of zeros that are adjacent to other zeros is the number of zeros minus the number of zeros that are not adjacent to other zeros.\n# The number of zeros that are not adjacent to other zeros is the number of zeros that are at the beginning or end of the string.\n\n# This means that the number of cubes that can be removed is the number of zeros minus the number of zeros that are at the beginning or end of the string.\n\nzeros = S.count(\"0\")\nzeros_at_beginning_or_end = len(S) - len(S.lstrip(\"0\").rstrip(\"0\"))\nprint(zeros - zeros_at_beginning_or_end)\n"
    },
    {
      "index": 1,
      "text": "\nS = raw_input()\n\n# The number of cubes that can be removed is the maximum number of zeros that are adjacent to ones\n# Since there can be at most 10^5 cubes, we can solve this problem in O(N) time, where N is the number of cubes\n\n# The number of zeros adjacent to ones is the number of zeros minus the number of zeros that are not adjacent to ones\n# The number of zeros that are not adjacent to ones is the number of zeros that are adjacent to other zeros\n# The number of zeros that are adjacent to other zeros is the number of zeros minus the number of zeros that are not adjacent to other zeros\n# The number of zeros that are not adjacent to other zeros is the number of zeros that are at the beginning or end of the string\n\n# This means that the number of cubes that can be removed is the number of zeros minus the number of zeros that are at the beginning or end of the string\n\nzeros = S.count(\"0\")\nzeros_at_beginning_or_end = len(S) - len(S.lstrip(\"0\").rstrip(\"0\"))\nprint zeros - zeros_at_beginning_or_end\n"
    }
  ],
  "created": 1650785317,
  "object": "edit"
}
2022-04-24 07:28:50.077385 fix syntax errors 2 ['\nS = raw_input()\n\n# The number of cubes that can be removed is the maximum number of zeros that are adjacent to ones.\n# Since there can be at most 10^5 cubes, we can solve this problem in O(N) time, where N is the number of cubes.\n\n# The number of zeros adjacent to ones is the number of zeros minus the number of zeros that are not adjacent to ones.\n# The number of zeros that are not adjacent to ones is the number of zeros that are adjacent to other zeros.\n# The number of zeros that are adjacent to other zeros is the number of zeros minus the number of zeros that are not adjacent to other zeros.\n# The number of zeros that are not adjacent to other zeros is the number of zeros that are at the beginning or end of the string.\n\n# This means that the number of cubes that can be removed is the number of zeros minus the number of zeros that are at the beginning or end of the string.\n\nzeros = S.count("0")\nzeros_at_beginning_or_end = len(S) - len(S.lstrip("0").rstrip("0"))\nprint(zeros - zeros_at_beginning_or_end)\n', '\nS = raw_input()\n\n# The number of cubes that can be removed is the maximum number of zeros that are adjacent to ones\n# Since there can be at most 10^5 cubes, we can solve this problem in O(N) time, where N is the number of cubes\n\n# The number of zeros adjacent to ones is the number of zeros minus the number of zeros that are not adjacent to ones\n# The number of zeros that are not adjacent to ones is the number of zeros that are adjacent to other zeros\n# The number of zeros that are adjacent to other zeros is the number of zeros minus the number of zeros that are not adjacent to other zeros\n# The number of zeros that are not adjacent to other zeros is the number of zeros that are at the beginning or end of the string\n\n# This means that the number of cubes that can be removed is the number of zeros minus the number of zeros that are at the beginning or end of the string\n\nzeros = S.count("0")\nzeros_at_beginning_or_end = len(S) - len(S.lstrip("0").rstrip("0"))\nprint zeros - zeros_at_beginning_or_end\n']
2022-04-24 07:28:50.077626 using api key derek
2022-04-24 07:29:01.006597 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nS = raw_input()\n\n# The number of cubes that can be removed is the maximum number of zeroes that are adjacent to ones.\n# Since there can be at most 10^5 cubes, we can solve this problem in O(N) time, where N is the number of cubes.\n\n# The number of zeroes adjacent to ones is the number of zeroes minus the number of zeroes that are not adjacent to ones. The number of zeroes that are not adjacent to ones is the number of zeroes that are adjacent to other zeroes.\n# The number of zeroes that are adjacent to other zeroes is the number of zeroes minus the number of zeroes that are not adjacent to other zeroes. The number of zeroes that are not adjacent to other zeroes is the number of zeroes that are at the beginning or end of the string.\n\n# This means that the number of cubes that can be removed is the number of zeroes minus the number of zeroes that are at the beginning or end of the string.\n\nzeroes = S.count(\"0\")\nzeroes_at_beginning_or_end = len(S) - len(S.lstrip(\"0\").rstrip(\"0\"))\nprint(zeroes - zeroes_at_beginning_or_end)\n"
    },
    {
      "index": 1,
      "text": "def main():\n    print \"Hello world!\"\n    \nif __name__ == \"__main__\":\n    main()\n"
    }
  ],
  "created": 1650785330,
  "object": "edit"
}
2022-04-24 07:29:01.006795 fix syntax errors 2 ['\nS = raw_input()\n\n# The number of cubes that can be removed is the maximum number of zeroes that are adjacent to ones.\n# Since there can be at most 10^5 cubes, we can solve this problem in O(N) time, where N is the number of cubes.\n\n# The number of zeroes adjacent to ones is the number of zeroes minus the number of zeroes that are not adjacent to ones. The number of zeroes that are not adjacent to ones is the number of zeroes that are adjacent to other zeroes.\n# The number of zeroes that are adjacent to other zeroes is the number of zeroes minus the number of zeroes that are not adjacent to other zeroes. The number of zeroes that are not adjacent to other zeroes is the number of zeroes that are at the beginning or end of the string.\n\n# This means that the number of cubes that can be removed is the number of zeroes minus the number of zeroes that are at the beginning or end of the string.\n\nzeroes = S.count("0")\nzeroes_at_beginning_or_end = len(S) - len(S.lstrip("0").rstrip("0"))\nprint(zeroes - zeroes_at_beginning_or_end)\n', 'def main():\n    print "Hello world!"\n    \nif __name__ == "__main__":\n    main()\n']
2022-04-24 07:29:01.006823 size on output set 4
2022-04-24 07:29:01.006833 num operations 2
2022-04-24 07:29:01.006839 size on input set 1
2022-04-24 07:29:01.006964 using api key soukgp
2022-04-24 07:29:06.709713 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n#\nimport sys\n\ndef main():\n\ts = sys.stdin.readline().rstrip()\n\tstack = []\n\tans = 0\n\tfor c in s:\n\t\tif c == '0':\n\t\t\tif len(stack) > 0 and stack[-1] == '1':\n\t\t\t\tstack.pop()\n\t\t\t\tans += 1\n\t\t\telse:\n\t\t\t\tstack.append(c)\n\t\telse:\n\t\t\tstack.append(c)\n\tprint(ans)\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n\ts = sys.stdin.readline().rstrip()\n\tstack = []\n\tans = 0\n\tfor c in s:\n\t\tif c == '0':\n\t\t\tif len(stack) > 0 and stack[-1] == '1':\n\t\t\t\tstack.pop()\n\t\t\t\tans += 2\n\t\t\telse:\n\t\t\t\tstack.append(c)\n\t\telse:\n\t\t\tstack.append(c)\n\tprint(ans)\n\nif __name__ == '__main__':\n\tmain()\n"
    }
  ],
  "created": 1650785341,
  "object": "edit"
}
2022-04-24 07:29:06.709916 fix spelling mistakes 2 ["\n#\nimport sys\n\ndef main():\n\ts = sys.stdin.readline().rstrip()\n\tstack = []\n\tans = 0\n\tfor c in s:\n\t\tif c == '0':\n\t\t\tif len(stack) > 0 and stack[-1] == '1':\n\t\t\t\tstack.pop()\n\t\t\t\tans += 1\n\t\t\telse:\n\t\t\t\tstack.append(c)\n\t\telse:\n\t\t\tstack.append(c)\n\tprint(ans)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\nimport sys\n\ndef main():\n\ts = sys.stdin.readline().rstrip()\n\tstack = []\n\tans = 0\n\tfor c in s:\n\t\tif c == '0':\n\t\t\tif len(stack) > 0 and stack[-1] == '1':\n\t\t\t\tstack.pop()\n\t\t\t\tans += 2\n\t\t\telse:\n\t\t\t\tstack.append(c)\n\t\telse:\n\t\t\tstack.append(c)\n\tprint(ans)\n\nif __name__ == '__main__':\n\tmain()\n"]
2022-04-24 07:29:06.709953 size on output set 2
2022-04-24 07:29:06.709964 size on input set 2
2022-04-24 07:29:06.710140 using api key jaanu
2022-04-24 07:29:12.704626 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ALDS1_3_A&lang=jp\nimport sys\n\ndef main():\n\ts = sys.stdin.readline().rstrip()\n\tstack = []\n\tans = 0\n\tfor c in s:\n\t\tif c == '0':\n\t\t\tif len(stack) > 0 and stack[-1] == '1':\n\t\t\t\tstack.pop()\n\t\t\t\tans += 1\n\t\t\telse:\n\t\t\t\tstack.append(c)\n\t\telse:\n\t\t\tstack.append(c)\n\tprint(ans)\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n\ts = sys.stdin.readline().rstrip()\n\tstack = []\n\tans = 0\n\tfor c in s:\n\t\tif c == '0':\n\t\t\tif len(stack) > 0 and stack[-1] == '1':\n\t\t\t\tstack.pop()\n\t\t\t\tans += 1\n\t\t\telse:\n\t\t\t\tstack.append(c)\n\t\telse:\n\t\t\tstack.append(c)\n\tprint(ans)\n\nif __name__ == '__main__':\n\tmain()\n"
    }
  ],
  "created": 1650785346,
  "object": "edit"
}
2022-04-24 07:29:12.704798 fix syntax errors 2 ["\n# http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ALDS1_3_A&lang=jp\nimport sys\n\ndef main():\n\ts = sys.stdin.readline().rstrip()\n\tstack = []\n\tans = 0\n\tfor c in s:\n\t\tif c == '0':\n\t\t\tif len(stack) > 0 and stack[-1] == '1':\n\t\t\t\tstack.pop()\n\t\t\t\tans += 1\n\t\t\telse:\n\t\t\t\tstack.append(c)\n\t\telse:\n\t\t\tstack.append(c)\n\tprint(ans)\n\nif __name__ == '__main__':\n\tmain()\n", "\nimport sys\n\ndef main():\n\ts = sys.stdin.readline().rstrip()\n\tstack = []\n\tans = 0\n\tfor c in s:\n\t\tif c == '0':\n\t\t\tif len(stack) > 0 and stack[-1] == '1':\n\t\t\t\tstack.pop()\n\t\t\t\tans += 1\n\t\t\telse:\n\t\t\t\tstack.append(c)\n\t\telse:\n\t\t\tstack.append(c)\n\tprint(ans)\n\nif __name__ == '__main__':\n\tmain()\n"]
2022-04-24 07:29:12.704943 using api key soukgp
2022-04-24 07:29:23.016824 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "import math\n\nimport sys\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n    stack = []\n    ans = 0\n    for c in s:\n        if c == '0':\n            if len(stack) > 0 and stack[-1] == '1':\n                stack.pop()\n                ans += 2\n            else:\n                stack.append(c)\n        else:\n            stack.append(c)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n\nimport sys\n\ndef main():\n\ts = sys.stdin.readline().rstrip()\n\tstack = []\n\tans = 0\n\tfor c in s:\n\t\tif c == '0':\n\t\t\tif len(stack) > 0 and stack[-1] == '1':\n\t\t\t\tstack.pop()\n\t\t\t\tans += 2\n\t\t\telse:\n\t\t\t\tstack.append(c)\n\t\telse:\n\t\t\tstack.append(c)\n\tprint(ans)\n\nif __name__ == '__main__':\n\tmain()\n"
    }
  ],
  "created": 1650785352,
  "object": "edit"
}
2022-04-24 07:29:23.016998 fix syntax errors 2 ["import math\n\nimport sys\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n    stack = []\n    ans = 0\n    for c in s:\n        if c == '0':\n            if len(stack) > 0 and stack[-1] == '1':\n                stack.pop()\n                ans += 2\n            else:\n                stack.append(c)\n        else:\n            stack.append(c)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n", "\n\n\nimport sys\n\ndef main():\n\ts = sys.stdin.readline().rstrip()\n\tstack = []\n\tans = 0\n\tfor c in s:\n\t\tif c == '0':\n\t\t\tif len(stack) > 0 and stack[-1] == '1':\n\t\t\t\tstack.pop()\n\t\t\t\tans += 2\n\t\t\telse:\n\t\t\t\tstack.append(c)\n\t\telse:\n\t\t\tstack.append(c)\n\tprint(ans)\n\nif __name__ == '__main__':\n\tmain()\n"]
2022-04-24 07:29:23.017027 size on output set 4
