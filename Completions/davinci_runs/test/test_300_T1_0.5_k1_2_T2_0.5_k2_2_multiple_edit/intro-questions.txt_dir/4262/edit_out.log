2022-04-24 08:49:06.517304 num operations 2
2022-04-24 08:49:06.517326 size on input set 1
2022-04-24 08:49:06.517459 using api key soukgp
2022-04-24 08:49:15.212960 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\ndef main():\n    N = int(input())\n    print(N)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef swap(p, q):\n    temp = p\n    p = q\n    q = temp\n    return p, q\n\n\ndef main():\n    N = int(input())\n    P = list(map(int, input().split()))\n    Q = list(map(int, input().split()))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if P[i] > P[j]:\n                P[i], P[j] = swap(P[i], P[j])\n                count += 1\n            if Q[i] > Q[j]:\n                Q[i], Q[j] = swap(Q[i], Q[j])\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650790146,
  "object": "edit"
}
2022-04-24 08:49:15.213179 fix spelling mistakes 2 ["\n\n\ndef main():\n    N = int(input())\n    print(N)\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef swap(p, q):\n    temp = p\n    p = q\n    q = temp\n    return p, q\n\n\ndef main():\n    N = int(input())\n    P = list(map(int, input().split()))\n    Q = list(map(int, input().split()))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if P[i] > P[j]:\n                P[i], P[j] = swap(P[i], P[j])\n                count += 1\n            if Q[i] > Q[j]:\n                Q[i], Q[j] = swap(Q[i], Q[j])\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-24 08:49:15.213207 size on output set 2
2022-04-24 08:49:15.213214 size on input set 2
2022-04-24 08:49:15.213357 using api key soukgp
2022-04-24 08:49:21.047692 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    N = int(input())\n    print(N)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\n\ndef main():\n    n = int(input())\n    print(n)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650790155,
  "object": "edit"
}
2022-04-24 08:49:21.047860 fix syntax errors 2 ["\n\ndef main():\n    N = int(input())\n    print(N)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n\ndef main():\n    n = int(input())\n    print(n)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-24 08:49:21.047997 using api key derek
2022-04-24 08:49:30.623000 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef swap(p, q):\n    temp = p\n    p = q\n    q = temp\n    return p, q\n\n\ndef main():\n    N = int(input())\n    P = list(map(int, input().split()))\n    Q = list(map(int, input().split()))\n    count = 1\n    for i in range(N):\n        for j in range(i+1, N):\n            if P[i] > P[j]:\n                P[i], P[j] = swap(P[i], P[j])\n                count += 1\n            if Q[i] > Q[j]:\n                Q[i], Q[j] = swap(Q[i], Q[j])\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "def main():\n    N = int(input())\n    S = input()\n    T = input()\n    print(S)\n    print(T)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650790161,
  "object": "edit"
}
2022-04-24 08:49:30.623173 fix syntax errors 2 ["\ndef swap(p, q):\n    temp = p\n    p = q\n    q = temp\n    return p, q\n\n\ndef main():\n    N = int(input())\n    P = list(map(int, input().split()))\n    Q = list(map(int, input().split()))\n    count = 1\n    for i in range(N):\n        for j in range(i+1, N):\n            if P[i] > P[j]:\n                P[i], P[j] = swap(P[i], P[j])\n                count += 1\n            if Q[i] > Q[j]:\n                Q[i], Q[j] = swap(Q[i], Q[j])\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    N = int(input())\n    S = input()\n    T = input()\n    print(S)\n    print(T)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-24 08:49:30.623199 size on output set 4
2022-04-24 08:49:30.623210 num operations 2
2022-04-24 08:49:30.623216 size on input set 1
2022-04-24 08:49:30.623349 using api key kouti
2022-04-24 08:49:38.576695 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# My answer\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutation of size N\npermutations = []\nfor i in range(N):\n    permutations.append(i+1)\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q in permutation\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == P:\n        P_order = i+1\n    if permutations[i] == Q:\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n"
    },
    {
      "index": 1,
      "text": "\n\n# My answer\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of size N\npermutations = []\nfor i in range(N):\n    permutations.append(i+1)\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)-1):\n    if permutations[i] == P: # P_order\n        P_order = i+1 # 0-index\n    if permutations[i] == Q: # Q_order\n        Q_order = i+1 # 0-index\n\nprint(abs(P_order-Q_order))\n"
    }
  ],
  "created": 1650790170,
  "object": "edit"
}
2022-04-24 08:49:38.576877 fix spelling mistakes 2 ['\n\n# My answer\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutation of size N\npermutations = []\nfor i in range(N):\n    permutations.append(i+1)\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q in permutation\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == P:\n        P_order = i+1\n    if permutations[i] == Q:\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n', '\n\n# My answer\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of size N\npermutations = []\nfor i in range(N):\n    permutations.append(i+1)\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)-1):\n    if permutations[i] == P: # P_order\n        P_order = i+1 # 0-index\n    if permutations[i] == Q: # Q_order\n        Q_order = i+1 # 0-index\n\nprint(abs(P_order-Q_order))\n']
2022-04-24 08:49:38.576911 size on output set 2
2022-04-24 08:49:38.576918 size on input set 2
2022-04-24 08:49:38.577037 using api key sunu
2022-04-24 08:49:55.357054 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# My answer\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutation of size N\npermutations = [0]*N\nfor i in range(N):\n    permutations[i] = i+1\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):  # range(start, stop, step)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q in permutation\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == P:\n        P_order = i+1\n    if permutations[i] == Q:\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n"
    },
    {
      "index": 1,
      "text": "\n\n# My answer\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutation of size N\npermutations = list(range(1, N+1))\n\ndef permutation(n):\n    if n == 1:\n        return permutations\n    permutation(n-1)\n    for i in range(n-1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n    return permutations\n\npermutation(N, N)\n\n# Counting the order of P and Q in permutation\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == P:\n        P_order = i+1\n    if permutations[i] == Q:\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n"
    }
  ],
  "created": 1650790178,
  "object": "edit"
}
2022-04-24 08:49:55.357352 fix syntax errors 2 ['\n\n# My answer\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutation of size N\npermutations = [0]*N\nfor i in range(N):\n    permutations[i] = i+1\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):  # range(start, stop, step)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q in permutation\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == P:\n        P_order = i+1\n    if permutations[i] == Q:\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n', '\n\n# My answer\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutation of size N\npermutations = list(range(1, N+1))\n\ndef permutation(n):\n    if n == 1:\n        return permutations\n    permutation(n-1)\n    for i in range(n-1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n    return permutations\n\npermutation(N, N)\n\n# Counting the order of P and Q in permutation\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == P:\n        P_order = i+1\n    if permutations[i] == Q:\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n']
2022-04-24 08:49:55.357510 using api key soukgp
2022-04-24 08:50:02.313686 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# My answer\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of size N\npermutations = []\nfor i in range(N):\n    permutations.append(i+1)\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)-1):\n    if permutations[i] == P:\n        P_order = i+1 # 0-index\n    if permutations[i] == Q:\n        Q_order = i+1 # 0-index\n\nprint(abs(P_order-Q_order))\n"
    },
    {
      "index": 1,
      "text": "\n\n# My answer\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of size N\npermutations = []\nfor i in range(N):\n    permutations.append(i+1)\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)-1):\n    if permutations[i] == P:\n        P_order = i+1 # 0-index\n    if permutations[i] == Q:\n        Q_order = i+1 # 0-index\n\nprint(abs(P_order-Q_order))\n"
    }
  ],
  "created": 1650790195,
  "object": "edit"
}
2022-04-24 08:50:02.313879 fix syntax errors 2 ['\n\n# My answer\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of size N\npermutations = []\nfor i in range(N):\n    permutations.append(i+1)\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)-1):\n    if permutations[i] == P:\n        P_order = i+1 # 0-index\n    if permutations[i] == Q:\n        Q_order = i+1 # 0-index\n\nprint(abs(P_order-Q_order))\n', '\n\n# My answer\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of size N\npermutations = []\nfor i in range(N):\n    permutations.append(i+1)\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)-1):\n    if permutations[i] == P:\n        P_order = i+1 # 0-index\n    if permutations[i] == Q:\n        Q_order = i+1 # 0-index\n\nprint(abs(P_order-Q_order))\n']
2022-04-24 08:50:02.313926 size on output set 3
