["\n\n# My answer\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of size N\npermutations = []\nfor i in range(N):\n    permutations.append(i+1)\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)-1):\n    if permutations[i] == P:\n        P_order = i+1 # 0-index\n    if permutations[i] == Q:\n        Q_order = i+1 # 0-index\n\nprint(abs(P_order-Q_order))\n", "\ndef swap(p, q):\n    temp = p\n    p = q\n    q = temp\n    return p, q\n\n\ndef main():\n    N = int(input())\n    P = list(map(int, input().split()))\n    Q = list(map(int, input().split()))\n    count = 1\n    for i in range(N):\n        for j in range(i+1, N):\n            if P[i] > P[j]:\n                P[i], P[j] = swap(P[i], P[j])\n                count += 1\n            if Q[i] > Q[j]:\n                Q[i], Q[j] = swap(Q[i], Q[j])\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n# My answer\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutation of size N\npermutations = [0]*N\nfor i in range(N):\n    permutations[i] = i+1\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):  # range(start, stop, step)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q in permutation\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == P:\n        P_order = i+1\n    if permutations[i] == Q:\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n", "\n\n# My answer\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutation of size N\npermutations = list(range(1, N+1))\n\ndef permutation(n):\n    if n == 1:\n        return permutations\n    permutation(n-1)\n    for i in range(n-1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n    return permutations\n\npermutation(N, N)\n\n# Counting the order of P and Q in permutation\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == P:\n        P_order = i+1\n    if permutations[i] == Q:\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n", "\n\n\ndef main():\n    n = int(input())\n    print(n)\n\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef main():\n    N = int(input())\n    print(N)\n\n\nif __name__ == '__main__':\n    main()\n", "def main():\n    N = int(input())\n    S = input()\n    T = input()\n    print(S)\n    print(T)\n\n\nif __name__ == '__main__':\n    main()\n"]