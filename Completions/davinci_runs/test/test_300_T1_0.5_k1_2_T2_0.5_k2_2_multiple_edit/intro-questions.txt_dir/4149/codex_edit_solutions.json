["\n\ndef get_primes():\n    primes = [2]\n    yield primes\n    i = 3\n    while True:\n        is_prime = True\n        for prime in primes:\n            if i % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n            yield primes\n        i += 2\n\ndef get_prime_index(primes, n):\n    return primes.index(n) + 1\n\ndef solve(n, b):\n    primes = get_primes()\n    a = [0] * n\n    for i in range(n):\n        if i % 2 == 1:\n            next(primes)\n        primes_list = next(primes)\n        if b[i] in primes_list:\n            a[i] = get_prime_index(primes_list, b[i])\n        else:\n            a[i] = b[i]\n    return a\n\ndef main():\n    n = int(input())\n    b = [int(i) for i in input().split(' ')]\n    a = solve(n, b)\n    print(' '.join([str(i) for i in a]))\n\nif __name__ == '__main__':\n    main()\n", "#!/usr/bin/env python3\n\n\ndef solve(n, b):\n    \"\"\"\n    >>> solve(3, [3, 5, 2, 3, 2, 4])\n    [3, 4, 2]\n    >>> solve(1, [2750131, 199999])\n    [199999]\n    >>> solve(1, [3, 6])\n    [6]\n    \"\"\"\n    # The first n elements of b are the elements of a.\n    # The remaining n elements of b are the divisors of the elements of a.\n    # If an element of a is prime, it is replaced by the n-th prime number.\n    # Thus the elements of b can be sorted and the second half of b can be used to find the elements of a.\n    # The elements of a are the elements of b that are not in the second half of b.\n    b.sort()\n    a = [b[i] for i in range(n) if b[i] not in b[n:]]\n    return a\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    b = list(map(int, input().split()))\n    print(*solve(n, b))\n", "\ndef solve(n, b):\n    \"\"\"\n    >>> solve(3, [3, 5, 2, 3, 2, 4])\n    [3, 4, 2]\n    >>> solve(1, [2750131, 199999])\n    [199999]\n    >>> solve(1, [3, 6])\n    [6]\n    \"\"\"\n    # The first n elements of b are the elements of a. The remaining n elements of b are the divisors of the elements of a. If an element of a is prime, it is replaced by the n-th prime number. Thus the elements of b can be sorted and the second half of the elements of b can be used to find the elements of a. The elements of a are the elements of b that are not in the second half of b.\n    b.sort()\n    a = [i for i in b if i not in b[n:]]\n    return a\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    b = list(map(int, input().split()))\n    print(*solve(n, b))\n", "\ndef solve(n, b):\n    \"\"\"\n    >>> solve(3, [3, 5, 2, 3, 2, 4])\n    [3, 4, 2]\n    >>> solve(1, [2750131, 199999])\n    [199999]\n    >>> solve(1, [3, 6])\n    [6]\n    \"\"\"\n    # The first n elements of b are the elements of a.\n    # The remaining n elements of b are the divisors of the elements of a.\n    # If an element of a is prime, it is replaced by the n-th prime number.\n    # Thus the elements of b can be sorted and the second half of the elements of b can be used to find the elements of a. The elements of a are the elements of b that are not in the second half of b.\n    b.sort()\n    a = [i for i in b if i not in b[n:]]\n    return a\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    b = list(map(int, input().split()))\n    print(*solve(n, b))\n", "\n\ndef convert_to_primes(n):\n    primes = []\n    i = 2\n    while len(primes) < n:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n    return primes\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef solve(n, b):\n    primes = convert_to_primes(n)\n    a = []\n    for i, val in enumerate(b):\n        if i % 2 == 0:\n            a.append(val)\n        else:\n            if val in primes:\n                a.append(primes.index(val) + 1)\n            else:\n                a.append(val)\n    return a\n\ndef main():\n    n = int(input())\n    b = [int(i) for i in input().split(' ')]\n    a = solve(n, b)\n    print(' '.join([str(i) for i in a]))\n\nif __name__ == '__main__':\n    main()\n", "\ndef convert_to_prime(n):\n    primes = []\n    i = 2\n    while len(primes) < n:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n    return primes\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef solve(n, b):\n    primes = convert_to_prime(n)\n    a = []\n    for i, val in enumerate(b):\n        if i % 2 == 0:\n            a.append(val)\n        else:\n            if val in primes:\n                a.append(primes.index(val) + 1)\n            else:\n                a.append(val)\n    return a\n\ndef main():\n    n = int(input())\n    b = [int(i) for i in input().split(' ')]\n    a = solve(n, b)\n    print(' '.join([str(i) for i in a]))\n\nif __name__ == '__main__':\n    main()\n", "\n\n\ndef solve(n, b):\n    \"\"\"\n    >>> solve(3, [3, 5, 2, 3, 2, 4])\n    [3, 2, 4]\n    >>> solve(1, [2750131, 199999])\n    [199999]\n    >>> solve(1, [3, 6])\n    [6]\n    \"\"\"\n    # The first n elements of b are the elements of a.\n    # The remaining n elements of b are the divisors of the elements of a.\n    # If an element of a is prime, it is replaced by the n-th prime number.\n    # Thus the elements of b can be sorted and the second half of b can be used to find the elements of a,\n    # which are the elements of b that are not in the second half of b.\n    b.sort()\n    a = [i for i in b if i not in b[n:]]\n    return a\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    b = list(map(int, input().split()))\n    print(*solve(n, b))\n"]