["\n\ndef solution(matrix, N, M):\n    max_diff = 0\n    for j in range(M):\n        column = [matrix[i][j] for i in range(N)]\n        column.sort()\n        for i in range(N-1):\n            diff = column[i+1] - column[i]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n\nif __name__ == '__main__':\n    N, M = map(int, input().split())\n    matrix = []\n    for _ in range(N):\n        matrix.append(list(map(int, input().split())))\n    print(solution(matrix, N, M))\n", "def main():\n    n, m = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    print(solve(matrix))\n\ndef solve(matrix):\n    n = len(matrix)\n    m = len(matrix[0])\n    # First, find the minimum value in each row\n    min_vals = [min(row) for row in matrix]\n    # Now, the max k is the max difference between any two elements in min_vals (i.e. any two rows)\n    max_k = 0\n    for i in range(m - 1):\n        max_k = max(max_k, abs(min_vals[i] - min_vals[i + 1]))\n    return max_k\n\nif __name__ == \"__main__\":\n    main()\n", "\ndef solution(matrix, n, m):  # O(n*m*log(n))\n    max_diff = 0\n    for j in range(m):\n        column = [matrix[i][j] for i in range(n)]\n        column.sort()\n        for i in range(n-1):\n            diff = column[i+1] - column[i]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n\nif __name__ == '__main__':\n    n, m = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    print(solution(matrix, n, m))\n", "\ndef main():\n    n, m = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    print(solve(n, m, matrix))\n\ndef solve(n, m, matrix):\n    # First, find the minimum value in each column\n    min_vals = [min([row[i] for row in matrix]) for i in range(m)]\n    # Now, the max k is the max difference between any two adjacent elements in min_vals\n    max_k = 0\n    for i in range(m - 1):\n        max_k = max(max_k, abs(min_vals[i] - min_vals[i + 1]))\n    return max_k\n\nif __name__ == \"__main__\":\n    main()\n", "import math\n\ndef main():\n    n, m = map(int, input().split()) # n = num rows, m = num cols\n    matrix = [] # matrix[i] = ith row of matrix\n    for _ in range(n): # read in the matrix\n        matrix.append(list(map(int, input().split()))) # matrix[i][j] = element in ith row, jth col\n    print(solve(n, m, matrix)) # solve the problem\n\ndef solve(n, m, matrix):\n    # First, find the minimum value in each col\n    min_vals = [min(row[i] for row in matrix) for i in range(m)] # min_vals[i] = min val in ith col\n    # Now, the max k is the max difference between any two elements in min_vals (i.e. any two cols)\n    max_k = 0\n    for i in range(m - 1): # iterate through all pairs of cols\n        max_k = max(max_k, abs(min_vals[i] - min_vals[i + 1])) # update max_k\n    return max_k\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef solution(matrix, n, m):  # O(n*m*log(n)) time complexity\n    max_diff = 0\n    for j in range(m):\n        column = [matrix[i][j] for i in range(n)]\n        column.sort()\n        for i in range(n-1):\n            diff = column[i+1] - column[i]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n\nif __name__ == '__main__':\n    n, m = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    print(solution(matrix, n, m))\n", "\ndef solution(matrix, N, M):\n    max_diff = 0\n    for j in range(M):\n        column = [matrix[i][j] for i in range(N)]\n        column.sort()\n        for i in range(N - 1):\n            diff = column[i + 1] - column[i]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n\nif __name__ == '__main__':\n    N, M = map(int, input().split())\n    matrix = []\n    for _ in range(N):\n        matrix.append(list(map(int, input().split())))\n    print(solution(matrix, N, M))\n", "\ndef main():\n    n, m = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    print(solve(n, m, matrix))\n\ndef solve(n, m, matrix):\n    # First, find the minimum value in each column\n    min_vals = [min(row[i] for row in matrix) for i in range(m)]\n    # Now, the max k is the max difference between any two adjacent\n    # elements in min_vals\n    max_k = 0\n    for i in range(m - 1):\n        max_k = max(max_k, abs(min_vals[i] - min_vals[i + 1]))\n    return max_k\n\nif __name__ == \"__main__\":\n    main()\n"]