2022-04-24 05:31:08.928353 num operations 2
2022-04-24 05:31:08.928372 size on input set 1
2022-04-24 05:31:08.928502 using api key soukgp
2022-04-24 05:31:19.631567 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef get_input():\n    return [int(x) for x in input().split()]\n\n\ndef solve(n: int, m: int) -> int:\n    if n == m:\n        return 0\n    if n > m:\n        return -1\n    if m % n != 0:\n        return -1\n    return solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef get_input():\n    return [int(x) for x in input().split()]\n\n\ndef solve(a, b):\n    if a == b:\n        return 0\n    if a > b:\n        return -1\n    if b % a != 0:\n        return -1\n    return solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n"
    }
  ],
  "created": 1650778269,
  "object": "edit"
}
2022-04-24 05:31:19.631798 fix spelling mistakes 2 ["\n\ndef get_input():\n    return [int(x) for x in input().split()]\n\n\ndef solve(n: int, m: int) -> int:\n    if n == m:\n        return 0\n    if n > m:\n        return -1\n    if m % n != 0:\n        return -1\n    return solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n", "\n\ndef get_input():\n    return [int(x) for x in input().split()]\n\n\ndef solve(a, b):\n    if a == b:\n        return 0\n    if a > b:\n        return -1\n    if b % a != 0:\n        return -1\n    return solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n"]
2022-04-24 05:31:19.631826 size on output set 2
2022-04-24 05:31:19.631833 size on input set 2
2022-04-24 05:31:19.631956 using api key jaanu
2022-04-24 05:31:27.565257 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef get_input():\n    return [int(x) for x in sys.stdin.readline().split()]\n\n\ndef solve(n: int, m: int) -> int:\n    if n == m:\n        return 0\n    if n > m:\n        return -1\n    if m % n != 0:\n        return -1\n    return solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    sys.stdout.write(str(solve(n, m)))\n"
    },
    {
      "index": 1,
      "text": "\ndef get_input():\n    return [int(x) for x in input().split()]\n\n\ndef solve(n: int, m: int) -> int:\n    return 0 if n == m else -1 if n > m or m % n != 0 else solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n"
    }
  ],
  "created": 1650778279,
  "object": "edit"
}
2022-04-24 05:31:27.565428 fix syntax errors 2 ["\n\nimport sys\n\ndef get_input():\n    return [int(x) for x in sys.stdin.readline().split()]\n\n\ndef solve(n: int, m: int) -> int:\n    if n == m:\n        return 0\n    if n > m:\n        return -1\n    if m % n != 0:\n        return -1\n    return solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    sys.stdout.write(str(solve(n, m)))\n", "\ndef get_input():\n    return [int(x) for x in input().split()]\n\n\ndef solve(n: int, m: int) -> int:\n    return 0 if n == m else -1 if n > m or m % n != 0 else solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n"]
2022-04-24 05:31:27.565567 using api key sunu
2022-04-24 05:31:34.396260 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef get_input():\n    return [int(x) for x in input().split()]\n\n\ndef solve(a, b):\n    if a == b:\n        return 0\n    if a > b:\n        return -1\n    if b % a != 0:\n        return -1\n    return solve(a * 2, b) + 1 if b % (a * 2) == 0 else solve(a * 3, b) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef get_input():\n    return [int(x) for x in input().split()]\n\n\ndef solve(a, b):\n    if a == b:\n        return 0\n    if a > b:\n        return -1\n    if b % a != 0:\n        return -1\n    return solve(a * 2, b) + 1 if b % (a * 2) == 0 else solve(a * 3, b) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n"
    }
  ],
  "created": 1650778287,
  "object": "edit"
}
2022-04-24 05:31:34.396451 fix syntax errors 2 ["\n\ndef get_input():\n    return [int(x) for x in input().split()]\n\n\ndef solve(a, b):\n    if a == b:\n        return 0\n    if a > b:\n        return -1\n    if b % a != 0:\n        return -1\n    return solve(a * 2, b) + 1 if b % (a * 2) == 0 else solve(a * 3, b) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n", "\n\ndef get_input():\n    return [int(x) for x in input().split()]\n\n\ndef solve(a, b):\n    if a == b:\n        return 0\n    if a > b:\n        return -1\n    if b % a != 0:\n        return -1\n    return solve(a * 2, b) + 1 if b % (a * 2) == 0 else solve(a * 3, b) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n"]
2022-04-24 05:31:34.396480 size on output set 3
2022-04-24 05:31:34.396493 num operations 2
2022-04-24 05:31:34.396499 size on input set 1
2022-04-24 05:31:34.396634 using api key jaanu
2022-04-24 05:31:42.097252 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#-----Solution-----\n\n# This is a greedy algorithm.\n# The idea is to greedily multiply by 3 until the number is greater than m.\n# Then, multiply by 2 as many times as possible, until the number is greater than m.\n# If the number is not m, then the answer is -1.\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\nelif m % 2 == 0 and n % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while n < m:\n        if n * 3 <= m:\n            n *= 3\n        else:\n            n *= 2\n        steps += 1\n    if n == m:\n        print(steps)\n    else:\n        print(-1)\n"
    },
    {
      "index": 1,
      "text": "\n\n#-----Solution-----\n\n#This is a greedy algorithm.\n#The idea is to greedily multiply by 3 until the number is greater than or equal to m.\n#Then, multiply by 2 as many times as possible, until the number is greater than or equal to m.\n#If the number is not m, then the answer is -1.\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\nelif m % 2 == 0 and n % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while n < m:\n        if n * 3 <= m:\n            n *= 3\n        else:\n            n *= 2\n        steps += 1\n    if n == m:\n        print(steps)\n    else:\n        print(-1)\n"
    }
  ],
  "created": 1650778294,
  "object": "edit"
}
2022-04-24 05:31:42.097437 fix spelling mistakes 2 ['\n\n#-----Solution-----\n\n# This is a greedy algorithm.\n# The idea is to greedily multiply by 3 until the number is greater than m.\n# Then, multiply by 2 as many times as possible, until the number is greater than m.\n# If the number is not m, then the answer is -1.\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\nelif m % 2 == 0 and n % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while n < m:\n        if n * 3 <= m:\n            n *= 3\n        else:\n            n *= 2\n        steps += 1\n    if n == m:\n        print(steps)\n    else:\n        print(-1)\n', '\n\n#-----Solution-----\n\n#This is a greedy algorithm.\n#The idea is to greedily multiply by 3 until the number is greater than or equal to m.\n#Then, multiply by 2 as many times as possible, until the number is greater than or equal to m.\n#If the number is not m, then the answer is -1.\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\nelif m % 2 == 0 and n % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while n < m:\n        if n * 3 <= m:\n            n *= 3\n        else:\n            n *= 2\n        steps += 1\n    if n == m:\n        print(steps)\n    else:\n        print(-1)\n']
2022-04-24 05:31:42.097603 size on output set 2
2022-04-24 05:31:42.097618 size on input set 2
2022-04-24 05:31:42.097771 using api key jaanu
2022-04-24 05:31:47.527207 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#-----Solution-----\n\n# This is a greedy algorithm.\n# The idea is to greedily multiply by 3 until the number is greater than m.\n# Then, multiply by 2 as many times as possible, until the number is greater than m.\n# If the number is not m, then the answer is -1.\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\nelif m % 2 == 0 and n % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while n < m:\n        if n * 3 <= m:\n            n *= 3\n        else:\n            n *= 2\n        steps += 1\n    if n == m:\n        print(steps)\n    else:\n        print(-1)\n"
    },
    {
      "index": 1,
      "text": "\n#-----Solution-----\n\n# This is a greedy algorithm.\n# The idea is to greedily multiply by 3 until the number is greater than m.\n# Then, multiply by 2 as many times as possible, until the number is greater than m.\n# If the number is not m, then the answer is -1.\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\nelif m % 2 == 0 and n % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while n < m:\n        if n * 3 <= m:\n            n *= 3\n        else:\n            n *= 2\n        steps += 1\n    if n == m:\n        print(steps)\n    else:\n        print(-1)\n"
    }
  ],
  "created": 1650778302,
  "object": "edit"
}
2022-04-24 05:31:47.527398 fix syntax errors 2 ['\n#-----Solution-----\n\n# This is a greedy algorithm.\n# The idea is to greedily multiply by 3 until the number is greater than m.\n# Then, multiply by 2 as many times as possible, until the number is greater than m.\n# If the number is not m, then the answer is -1.\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\nelif m % 2 == 0 and n % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while n < m:\n        if n * 3 <= m:\n            n *= 3\n        else:\n            n *= 2\n        steps += 1\n    if n == m:\n        print(steps)\n    else:\n        print(-1)\n', '\n#-----Solution-----\n\n# This is a greedy algorithm.\n# The idea is to greedily multiply by 3 until the number is greater than m.\n# Then, multiply by 2 as many times as possible, until the number is greater than m.\n# If the number is not m, then the answer is -1.\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\nelif m % 2 == 0 and n % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while n < m:\n        if n * 3 <= m:\n            n *= 3\n        else:\n            n *= 2\n        steps += 1\n    if n == m:\n        print(steps)\n    else:\n        print(-1)\n']
2022-04-24 05:31:47.527544 using api key kouti
2022-04-24 05:31:55.873759 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\nelif m % 2 == 0 and n % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while n < m:\n        if n * 3 <= m:\n            n *= 3\n        else:\n            n *= 2\n        steps += 1\n    if n == m:\n        print(steps)\n    else:\n        print(-1)\n"
    },
    {
      "index": 1,
      "text": "\n#-----Solution-----\n\n#This is a greedy algorithm.\n#The idea is to greedily multiply by 3 until the number is greater than or equal to m.\n#Then, multiply by 2 as many times as possible, until the number is greater than or equal to m.\n#If the number is not m, then the answer is -1.\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\nelif m % 2 == 0 and n % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while n < m:\n        if n * 3 <= m:\n            n *= 3\n        else:\n            n *= 2\n        steps += 1\n    if n == m:\n        print(steps)\n    else:\n        print(-1)\n"
    }
  ],
  "created": 1650778307,
  "object": "edit"
}
2022-04-24 05:31:55.873942 fix syntax errors 2 ['\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\nelif m % 2 == 0 and n % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while n < m:\n        if n * 3 <= m:\n            n *= 3\n        else:\n            n *= 2\n        steps += 1\n    if n == m:\n        print(steps)\n    else:\n        print(-1)\n', '\n#-----Solution-----\n\n#This is a greedy algorithm.\n#The idea is to greedily multiply by 3 until the number is greater than or equal to m.\n#Then, multiply by 2 as many times as possible, until the number is greater than or equal to m.\n#If the number is not m, then the answer is -1.\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\nelif m % 2 == 0 and n % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while n < m:\n        if n * 3 <= m:\n            n *= 3\n        else:\n            n *= 2\n        steps += 1\n    if n == m:\n        print(steps)\n    else:\n        print(-1)\n']
2022-04-24 05:31:55.873971 size on output set 3
