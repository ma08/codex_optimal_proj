["\nimport sys\n\nA, B = map(int, sys.stdin.readline().rstrip().split())\nprint(B // A + (B % A != 0)) \n", "\n\nimport math\n\ndef minPowerStrips(A, B):\n    return math.ceil(B / A)\n\ndef main():\n    line = input().split()\n    A = int(line[0])\n    B = int(line[1])\n    print(minPowerStrips(A, B))\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\ndef minPowerStrips(A, B): # A: power per strip, B: total power required\n    return math.ceil(B/A)\n\ndef main():\n    line = input().split()\n    A = int(line[0])\n    B = int(line[1])\n    print(minPowerStrips(A, B))\n\nif __name__ == '__main__':\n    main()\n", "\nimport math\n\n\ndef minPowerStrips(A, B):  # A: power per strip, B: total power required\n\n    return math.ceil(B / A)\n\ndef main():\n    line = input().split()\n    A = int(line[0])\n    B = int(line[1])\n    print(minPowerStrips(A, B))\n\n\nif __name__ == '__main__':\n    main()\n", "import sys\n\nA, B = map(int, sys.stdin.readline().rstrip().split())\nprint(B // A + (B % A != 0))\n", "# coding=utf-8\n\nimport sys\n\na, b = map(int, sys.stdin.readline().rstrip().split())\nprint(b // a + (b % a != 0))\n", "# coding=utf-8\n\nimport sys\n\nA, B, C = map(int, sys.stdin.readline().rstrip().split())\nprint(C // A + (C % A != 0))\n"]