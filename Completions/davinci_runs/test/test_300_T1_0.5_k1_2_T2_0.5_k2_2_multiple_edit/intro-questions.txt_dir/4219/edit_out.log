2022-04-24 08:16:21.724597 num operations 2
2022-04-24 08:16:21.724616 size on input set 1
2022-04-24 08:16:21.724775 using api key kouti
2022-04-24 08:16:38.324957 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest persons\n    max_honest_persons = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest persons\n        honest_persons = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_persons += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_persons = -1\n                    break\n            if honest_persons == -1:\n                break\n        if honest_persons == -1:\n            continue\n        max_honest_persons = max(max_honest_persons, honest_persons)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n        # find max honest people\n    max_honest_people = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest people\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650788181,
  "object": "edit"
}
2022-04-24 08:16:38.325192 fix spelling mistakes 2 ["\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest persons\n    max_honest_persons = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest persons\n        honest_persons = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_persons += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_persons = -1\n                    break\n            if honest_persons == -1:\n                break\n        if honest_persons == -1:\n            continue\n        max_honest_persons = max(max_honest_persons, honest_persons)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n        # find max honest people\n    max_honest_people = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest people\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-24 08:16:38.325233 size on output set 2
2022-04-24 08:16:38.325240 size on input set 2
2022-04-24 08:16:38.325364 using api key jaanu
2022-04-24 08:16:55.785330 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n        # find max honest people\n    max_honest_people = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest people\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\n\ndef main():\n\t# read input\n\tn = int(sys.stdin.readline())\n\ttestimonies = []\n\tfor i in range(n):\n\t\ta = int(sys.stdin.readline())\n\t\ttestimonies.append([])\n\t\tfor j in range(a):\n\t\t\ttestimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n\t# find max honest people\n\tmax_honest_people = 0\n\tfor i in range(2**n):\n\t\t# check if it is possible to have i honest people\n\t\thonest_people = 0\n\t\tfor j in range(n):\n\t\t\tif (i & (1 << j)) == 0:\n\t\t\t\tcontinue\n\t\t\thonest_people += 1\n\t\t\tfor testimony in testimonies[j]:\n\t\t\t\tif (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n\t\t\t\t\thonest_people = -1\n\t\t\t\t\tbreak\n\t\t\tif honest_people == -1:\n\t\t\t\tbreak\n\t\tif honest_people == -1:\n\t\t\tcontinue\n\t\tmax_honest_people = max(max_honest_people, honest_people)\n\n\tprint(max_honest_people)\n\nif __name__ == '__main__':\n\tmain()\n"
    }
  ],
  "created": 1650788198,
  "object": "edit"
}
2022-04-24 08:16:55.785532 fix syntax errors 2 ["\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n        # find max honest people\n    max_honest_people = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest people\n        honest_people = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_people += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_people = -1\n                    break\n            if honest_people == -1:\n                break\n        if honest_people == -1:\n            continue\n        max_honest_people = max(max_honest_people, honest_people)\n\n    print(max_honest_people)\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\n\ndef main():\n\t# read input\n\tn = int(sys.stdin.readline())\n\ttestimonies = []\n\tfor i in range(n):\n\t\ta = int(sys.stdin.readline())\n\t\ttestimonies.append([])\n\t\tfor j in range(a):\n\t\t\ttestimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n\t# find max honest people\n\tmax_honest_people = 0\n\tfor i in range(2**n):\n\t\t# check if it is possible to have i honest people\n\t\thonest_people = 0\n\t\tfor j in range(n):\n\t\t\tif (i & (1 << j)) == 0:\n\t\t\t\tcontinue\n\t\t\thonest_people += 1\n\t\t\tfor testimony in testimonies[j]:\n\t\t\t\tif (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n\t\t\t\t\thonest_people = -1\n\t\t\t\t\tbreak\n\t\t\tif honest_people == -1:\n\t\t\t\tbreak\n\t\tif honest_people == -1:\n\t\t\tcontinue\n\t\tmax_honest_people = max(max_honest_people, honest_people)\n\n\tprint(max_honest_people)\n\nif __name__ == '__main__':\n\tmain()\n"]
2022-04-24 08:16:55.785850 using api key derek
2022-04-24 08:17:01.665287 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest persons\n    max_honest_persons = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest persons\n        honest_persons = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_persons += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_persons = -1\n                    break\n            if honest_persons == -1:\n                break\n        if honest_persons == -1:\n            continue\n        max_honest_persons = max(max_honest_persons, honest_persons)\n\n    print(max_honest_persons)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest persons\n    max_honest_persons = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest persons\n        honest_persons = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_persons += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_persons = -1\n                    break\n            if honest_persons == -1:\n                break\n        if honest_persons == -1:\n            continue\n        max_honest_persons = max(max_honest_persons, honest_persons)\n\n    print(max_honest_persons)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650788215,
  "object": "edit"
}
2022-04-24 08:17:01.665472 fix syntax errors 2 ["\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest persons\n    max_honest_persons = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest persons\n        honest_persons = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_persons += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_persons = -1\n                    break\n            if honest_persons == -1:\n                break\n        if honest_persons == -1:\n            continue\n        max_honest_persons = max(max_honest_persons, honest_persons)\n\n    print(max_honest_persons)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # read input\n    n = int(sys.stdin.readline())\n    testimonies = []\n    for i in range(n):\n        a = int(sys.stdin.readline())\n        testimonies.append([])\n        for j in range(a):\n            testimonies[i].append([int(x) for x in sys.stdin.readline().split()])\n\n    # find max honest persons\n    max_honest_persons = 0\n    for i in range(2**n):\n        # check if it is possible to have i honest persons\n        honest_persons = 0\n        for j in range(n):\n            if (i & (1 << j)) == 0:\n                continue\n            honest_persons += 1\n            for testimony in testimonies[j]:\n                if (i & (1 << (testimony[0] - 1))) != 0 and testimony[1] == 0:\n                    honest_persons = -1\n                    break\n            if honest_persons == -1:\n                break\n        if honest_persons == -1:\n            continue\n        max_honest_persons = max(max_honest_persons, honest_persons)\n\n    print(max_honest_persons)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-24 08:17:01.665510 size on output set 3
2022-04-24 08:17:01.665520 num operations 2
2022-04-24 08:17:01.665526 size on input set 1
2022-04-24 08:17:01.665683 using api key jaanu
2022-04-24 08:17:08.133708 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"main function.\"\"\"\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    \"\"\"solve function.\"\"\"\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    \"\"\"is_honest function.\"\"\"\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    \"\"\"main function\"\"\"\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    \"\"\"solve function.\"\"\"\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    \"\"\"is_honest function.\"\"\"\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n"
    }
  ],
  "created": 1650788221,
  "object": "edit"
}
2022-04-24 08:17:08.133906 fix spelling mistakes 2 ['\n\ndef main():\n    """main function."""\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    """solve function."""\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    """is_honest function."""\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n', '\n\ndef main():\n    """main function"""\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    """solve function."""\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    """is_honest function."""\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n']
2022-04-24 08:17:08.134014 size on output set 2
2022-04-24 08:17:08.134022 size on input set 2
2022-04-24 08:17:08.134149 using api key jaanu
2022-04-24 08:17:14.742906 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"main function\"\"\"\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    \"\"\"solve function\"\"\"\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    \"\"\"is_honest function\"\"\"\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    \"\"\"main function.\"\"\"\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\n\ndef solve(graph):\n    \"\"\"solve function.\"\"\"\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\n\ndef is_honest(graph, person, visited=set()):\n    \"\"\"is_honest function.\"\"\"\n    if person in visited:\n        return False\n\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n\n    return True\n\n\nmain()\n"
    }
  ],
  "created": 1650788228,
  "object": "edit"
}
2022-04-24 08:17:14.743121 fix syntax errors 2 ['\n\ndef main():\n    """main function"""\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\ndef solve(graph):\n    """solve function"""\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    """is_honest function"""\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n', '\ndef main():\n    """main function."""\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\n\ndef solve(graph):\n    """solve function."""\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\n\ndef is_honest(graph, person, visited=set()):\n    """is_honest function."""\n    if person in visited:\n        return False\n\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n\n    return True\n\n\nmain()\n']
2022-04-24 08:17:14.743299 using api key kouti
2022-04-24 08:17:24.788204 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    \"\"\"main function\"\"\"\n    num_person = int(input())\n    graph = [[] for _ in range(num_person + 1)]\n    for _ in range(num_person):\n        num_testimony = int(input())\n        for __ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[x_ij].append((x_ij, y_ij))\n    print(solve(graph, num_person))\n\ndef solve(graph):\n    \"\"\"solve function.\"\"\"\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    \"\"\"is_honest function.\"\"\"\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    \"\"\"main function\"\"\"\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\n\ndef solve(graph):\n    \"\"\"solve function.\"\"\"\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\n\ndef is_honest(graph, person, visited=set()):\n    \"\"\"is_honest function.\"\"\"\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\n\nmain()\n"
    }
  ],
  "created": 1650788234,
  "object": "edit"
}
2022-04-24 08:17:24.788392 fix syntax errors 2 ['\n\ndef main():\n    """main function"""\n    num_person = int(input())\n    graph = [[] for _ in range(num_person + 1)]\n    for _ in range(num_person):\n        num_testimony = int(input())\n        for __ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[x_ij].append((x_ij, y_ij))\n    print(solve(graph, num_person))\n\ndef solve(graph):\n    """solve function."""\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\ndef is_honest(graph, person, visited=set()):\n    """is_honest function."""\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\nmain()\n', '\ndef main():\n    """main function"""\n    num_person = int(input())\n    graph = {}\n    for person in range(num_person):\n        graph[person + 1] = []\n        num_testimony = int(input())\n        for _ in range(num_testimony):\n            x_ij, y_ij = map(int, input().split())\n            graph[person + 1].append((x_ij, y_ij))\n    print(solve(graph))\n\n\ndef solve(graph):\n    """solve function."""\n    num_honest = 0\n    for person in graph:\n        if is_honest(graph, person):\n            num_honest += 1\n    return num_honest\n\n\ndef is_honest(graph, person, visited=set()):\n    """is_honest function."""\n    if person in visited:\n        return False\n    visited.add(person)\n    for x_ij, y_ij in graph[person]:\n        if y_ij == 0:\n            continue\n        if not is_honest(graph, x_ij, visited):\n            return False\n    return True\n\n\nmain()\n']
2022-04-24 08:17:24.788427 size on output set 4
