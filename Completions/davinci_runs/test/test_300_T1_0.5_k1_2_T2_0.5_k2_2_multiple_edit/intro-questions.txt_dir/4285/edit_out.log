2022-04-24 09:06:59.812718 num operations 2
2022-04-24 09:06:59.812738 size on input set 1
2022-04-24 09:06:59.812886 using api key derek
2022-04-24 09:07:06.254372 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    # read number of chars\n    n = int(sys.stdin.readline())\n    # read chars\n    s = sys.stdin.readline().strip()\n\n    # count number of a, b, c, ?\n    na = s.count('a')\n    nb = s.count('b')\n    nc = s.count('c')\n    nq = s.count('?')\n\n    # if there are no ? in s, check if there is a subsequence abc\n    if nq == 0:\n        if 'abc' in s:\n            print(1)\n        else:\n            print(0)\n        return\n\n    # if there are no a, b, c in s, count number of subsequences abc\n    if na == 0 and nb == 0 and nc == 0:\n        print(3 ** nq)\n        return\n\n    # prepare a list of possible positions of ?\n    qs = [i for i in range(n) if s[i] == '?']\n\n    # count number of substrings abc\n    count = 0\n\n    for i in range(3 ** nq):\n        # replace ? with a, b, c\n        t = s\n        for j, q in enumerate(qs):\n            t = t[:q] + 'abc'[i // (3 ** (nq - j - 1)) % 3] + t[q + 1:]\n\n        # count number of substrings abc\n        if 'abc' in t:\n            count += 1\n\n    # print result\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    # read number of characters\n    n = int(sys.stdin.readline())\n    # read chars\n    s = sys.stdin.readline().strip()\n\n    # count number of a, b, c, ?\n    na = s.count('a')\n    nb = s.count('b')\n    nc = s.count('c')\n    nq = s.count('?')\n\n    # if there are no ? in s, check if there is a subsequence abc\n    if nq == 0:\n        if 'abc' in s:\n            print(1)\n        else:\n            print(0)\n        return\n\n    # if there are no a, b, c in s, count number of subsequences abc\n    if na == 0 and nb == 0 and nc == 0:\n        print(3 ** nq)\n        return\n\n    # prepare a list of possible positions of ?\n    qs = [i for i in range(n) if s[i] == '?']\n\n    # count number of subsequences abc\n    count = 0\n\n    for i in range(3 ** nq):\n        # replace ? with a, b, c\n        t = s\n        for j, q in enumerate(qs):\n            t = t[:q] + 'abc'[i // (3 ** (nq - j - 1)) % 3] + t[q + 1:]\n\n        # count number of subsequences abc\n        if 'abc' in t:\n            count += 1\n\n    # print result\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650791219,
  "object": "edit"
}
2022-04-24 09:07:06.254586 fix spelling mistakes 2 ["\n\nimport sys\n\ndef main():\n    # read number of chars\n    n = int(sys.stdin.readline())\n    # read chars\n    s = sys.stdin.readline().strip()\n\n    # count number of a, b, c, ?\n    na = s.count('a')\n    nb = s.count('b')\n    nc = s.count('c')\n    nq = s.count('?')\n\n    # if there are no ? in s, check if there is a subsequence abc\n    if nq == 0:\n        if 'abc' in s:\n            print(1)\n        else:\n            print(0)\n        return\n\n    # if there are no a, b, c in s, count number of subsequences abc\n    if na == 0 and nb == 0 and nc == 0:\n        print(3 ** nq)\n        return\n\n    # prepare a list of possible positions of ?\n    qs = [i for i in range(n) if s[i] == '?']\n\n    # count number of substrings abc\n    count = 0\n\n    for i in range(3 ** nq):\n        # replace ? with a, b, c\n        t = s\n        for j, q in enumerate(qs):\n            t = t[:q] + 'abc'[i // (3 ** (nq - j - 1)) % 3] + t[q + 1:]\n\n        # count number of substrings abc\n        if 'abc' in t:\n            count += 1\n\n    # print result\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # read number of characters\n    n = int(sys.stdin.readline())\n    # read chars\n    s = sys.stdin.readline().strip()\n\n    # count number of a, b, c, ?\n    na = s.count('a')\n    nb = s.count('b')\n    nc = s.count('c')\n    nq = s.count('?')\n\n    # if there are no ? in s, check if there is a subsequence abc\n    if nq == 0:\n        if 'abc' in s:\n            print(1)\n        else:\n            print(0)\n        return\n\n    # if there are no a, b, c in s, count number of subsequences abc\n    if na == 0 and nb == 0 and nc == 0:\n        print(3 ** nq)\n        return\n\n    # prepare a list of possible positions of ?\n    qs = [i for i in range(n) if s[i] == '?']\n\n    # count number of subsequences abc\n    count = 0\n\n    for i in range(3 ** nq):\n        # replace ? with a, b, c\n        t = s\n        for j, q in enumerate(qs):\n            t = t[:q] + 'abc'[i // (3 ** (nq - j - 1)) % 3] + t[q + 1:]\n\n        # count number of subsequences abc\n        if 'abc' in t:\n            count += 1\n\n    # print result\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-24 09:07:06.254628 size on output set 2
2022-04-24 09:07:06.254635 size on input set 2
2022-04-24 09:07:06.254759 using api key kouti
2022-04-24 09:07:13.282050 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nimport sys\n\ndef main():\n    # read number of characters and chars\n    n = int(sys.stdin.readline())\n    s = sys.stdin.readline().strip()\n\n    # count number of a, b, c, ?\n    na = s.count('a')\n    nb = s.count('b')\n    nc = s.count('c')\n    nq = s.count('?')\n\n    # if there are no ? in s, check if there is a subsequence abc\n    if nq == 0:\n        if 'abc' in s:\n            print(1)\n        else:\n            print(0)\n        return\n\n    # if there are no a, b, c in s, count number of subsequences abc\n    if na == 0 and nb == 0 and nc == 0:\n        print(3 ** nq)\n        return\n\n    # prepare a list of possible positions of ?\n    qs = [i for i in range(n) if s[i] == '?']\n\n    # count number of subsequences abc by replacing ? with a, b, c\n    count = 0\n\n    for i in range(3 ** nq):\n        t = s\n        for j, q in enumerate(qs):\n            t = t[:q] + 'abc'[i // (3 ** (nq - j - 1)) % 3] + t[q + 1:]\n\n        # count number of subsequences abc\n        if 'abc' in t:\n            count += 1\n\n    # print result\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    # read number of characters\n    n = int(sys.stdin.readline())\n    # read chars\n    s = sys.stdin.readline().strip()\n\n    # count number of a, b, c, ?\n    na = s.count('a')\n    nb = s.count('b')\n    nc = s.count('c')\n    nq = s.count('?')\n\n    # if there are no ? in s, check if there is a subsequence abc\n    if nq == 0:\n        if 'abc' in s:\n            print(1)\n        else:\n            print(0)\n        return\n\n    # if there are no a, b, c in s, count number of subsequences abc\n    if na == 0 and nb == 0 and nc == 0:\n        print(3 ** nq)\n        return\n\n    # prepare a list of possible positions of ?\n    qs = [i for i in range(n) if s[i] == '?']\n\n    # count number of subsequences abc\n    count = 0\n    for i in range(3 ** nq):\n        # replace ? with a, b, c\n        t = s\n        for j, q in enumerate(qs):\n            t = t[:q] + 'abc'[i // (3 ** (nq - j - 1)) % 3] + t[q + 1:]\n\n        # count number of subsequences abc\n        if 'abc' in t:\n            count += 1\n\n    # print result\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650791226,
  "object": "edit"
}
2022-04-24 09:07:13.282264 fix syntax errors 2 ["\n\nimport sys\n\ndef main():\n    # read number of characters and chars\n    n = int(sys.stdin.readline())\n    s = sys.stdin.readline().strip()\n\n    # count number of a, b, c, ?\n    na = s.count('a')\n    nb = s.count('b')\n    nc = s.count('c')\n    nq = s.count('?')\n\n    # if there are no ? in s, check if there is a subsequence abc\n    if nq == 0:\n        if 'abc' in s:\n            print(1)\n        else:\n            print(0)\n        return\n\n    # if there are no a, b, c in s, count number of subsequences abc\n    if na == 0 and nb == 0 and nc == 0:\n        print(3 ** nq)\n        return\n\n    # prepare a list of possible positions of ?\n    qs = [i for i in range(n) if s[i] == '?']\n\n    # count number of subsequences abc by replacing ? with a, b, c\n    count = 0\n\n    for i in range(3 ** nq):\n        t = s\n        for j, q in enumerate(qs):\n            t = t[:q] + 'abc'[i // (3 ** (nq - j - 1)) % 3] + t[q + 1:]\n\n        # count number of subsequences abc\n        if 'abc' in t:\n            count += 1\n\n    # print result\n    print(count)\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\ndef main():\n    # read number of characters\n    n = int(sys.stdin.readline())\n    # read chars\n    s = sys.stdin.readline().strip()\n\n    # count number of a, b, c, ?\n    na = s.count('a')\n    nb = s.count('b')\n    nc = s.count('c')\n    nq = s.count('?')\n\n    # if there are no ? in s, check if there is a subsequence abc\n    if nq == 0:\n        if 'abc' in s:\n            print(1)\n        else:\n            print(0)\n        return\n\n    # if there are no a, b, c in s, count number of subsequences abc\n    if na == 0 and nb == 0 and nc == 0:\n        print(3 ** nq)\n        return\n\n    # prepare a list of possible positions of ?\n    qs = [i for i in range(n) if s[i] == '?']\n\n    # count number of subsequences abc\n    count = 0\n    for i in range(3 ** nq):\n        # replace ? with a, b, c\n        t = s\n        for j, q in enumerate(qs):\n            t = t[:q] + 'abc'[i // (3 ** (nq - j - 1)) % 3] + t[q + 1:]\n\n        # count number of subsequences abc\n        if 'abc' in t:\n            count += 1\n\n    # print result\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-24 09:07:13.282520 using api key sunu
2022-04-24 09:07:34.411897 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport sys\n\ndef main():\n\t# read number of chars\n\tn = int(sys.stdin.readline())\n\t# read chars\n\ts = sys.stdin.readline().strip()\n\n\t# count number of a, b, c, ?\n\tna = s.count('a')\n\tnb = s.count('b')\n\tnc = s.count('c')\n\tnq = s.count('?')\n\n\t# if there are no ? in s, check if there is a subsequence abc\n\tif nq == 0:\n\t\tif 'abc' in s:\n\t\t\tprint(1)\n\t\telse:\n\t\t\tprint(0)\n\t\treturn\n\n\t# if there are no a, b, c in s, count number of subsequences abc\n\tif na == 0 and nb == 0 and nc == 0:\n\t\tprint(3 ** nq)\n\t\treturn\n\n\t# prepare a list of possible positions of ?\n\tqs = [i for i in range(n) if s[i] == '?']\n\n\t# count number of substrings abc\n\tcount = 0\n\n\tfor i in range(3 ** nq):\n\t\t# replace ? with a, b, c\n\t\tt = s\n\t\tfor j, q in enumerate(qs):\n\t\t\tt = t[:q] + 'abc'[i // (3 ** (nq - j - 1)) % 3] + t[q + 1:]\n\n\t\t# count number of substrings abc\n\t\tif 'abc' in t:\n\t\t\tcount += 1\n\n\t# print result\n\tprint(count)\n\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
      "index": 1,
      "text": "\n\nimport sys\n\ndef main():\n    # read number of chars\n    n = int(input())\n    # read chars\n    s = input().strip()\n\n    # count number of a, b, c, ?\n    na = s.count('a')\n    nb = s.count('b')\n    nc = s.count('c')\n    nq = s.count('?')\n\n    # if there are no ? in s, check if there is a subsequence abc\n    if nq == 0:\n        if 'abc' in s:\n            print(1)\n        else:\n            print(0)\n        return\n\n    # if there are no a, b, c in s, count number of subsequences abc\n    if na == 0 and nb == 0 and nc == 0:\n        print(3 ** nq)\n        return\n\n    # prepare a list of possible positions of ?\n    qs = [i for i in range(n) if s[i] == '?']\n\n    # count number of substrings abc\n    count = 0\n\n    for i in range(3 ** nq):\n        # replace ? with a, b, c\n        t = s\n        for j, q in enumerate(qs):\n            t = t[:q] + 'abc'[i // (3 ** (nq - j - 1)) % 3] + t[q + 1:]\n\n        # count number of substrings abc\n        if 'abc' in t:\n            count += 1\n\n    # print result\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650791233,
  "object": "edit"
}
2022-04-24 09:07:34.412081 fix syntax errors 2 ["\nimport sys\n\ndef main():\n\t# read number of chars\n\tn = int(sys.stdin.readline())\n\t# read chars\n\ts = sys.stdin.readline().strip()\n\n\t# count number of a, b, c, ?\n\tna = s.count('a')\n\tnb = s.count('b')\n\tnc = s.count('c')\n\tnq = s.count('?')\n\n\t# if there are no ? in s, check if there is a subsequence abc\n\tif nq == 0:\n\t\tif 'abc' in s:\n\t\t\tprint(1)\n\t\telse:\n\t\t\tprint(0)\n\t\treturn\n\n\t# if there are no a, b, c in s, count number of subsequences abc\n\tif na == 0 and nb == 0 and nc == 0:\n\t\tprint(3 ** nq)\n\t\treturn\n\n\t# prepare a list of possible positions of ?\n\tqs = [i for i in range(n) if s[i] == '?']\n\n\t# count number of substrings abc\n\tcount = 0\n\n\tfor i in range(3 ** nq):\n\t\t# replace ? with a, b, c\n\t\tt = s\n\t\tfor j, q in enumerate(qs):\n\t\t\tt = t[:q] + 'abc'[i // (3 ** (nq - j - 1)) % 3] + t[q + 1:]\n\n\t\t# count number of substrings abc\n\t\tif 'abc' in t:\n\t\t\tcount += 1\n\n\t# print result\n\tprint(count)\n\nif __name__ == '__main__':\n\tmain()\n", "\n\nimport sys\n\ndef main():\n    # read number of chars\n    n = int(input())\n    # read chars\n    s = input().strip()\n\n    # count number of a, b, c, ?\n    na = s.count('a')\n    nb = s.count('b')\n    nc = s.count('c')\n    nq = s.count('?')\n\n    # if there are no ? in s, check if there is a subsequence abc\n    if nq == 0:\n        if 'abc' in s:\n            print(1)\n        else:\n            print(0)\n        return\n\n    # if there are no a, b, c in s, count number of subsequences abc\n    if na == 0 and nb == 0 and nc == 0:\n        print(3 ** nq)\n        return\n\n    # prepare a list of possible positions of ?\n    qs = [i for i in range(n) if s[i] == '?']\n\n    # count number of substrings abc\n    count = 0\n\n    for i in range(3 ** nq):\n        # replace ? with a, b, c\n        t = s\n        for j, q in enumerate(qs):\n            t = t[:q] + 'abc'[i // (3 ** (nq - j - 1)) % 3] + t[q + 1:]\n\n        # count number of substrings abc\n        if 'abc' in t:\n            count += 1\n\n    # print result\n    print(count)\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-24 09:07:34.412123 size on output set 4
2022-04-24 09:07:34.412133 num operations 2
2022-04-24 09:07:34.412140 size on input set 1
2022-04-24 09:07:34.412271 using api key sunu
2022-04-24 09:07:40.510552 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#\ndef solve(n, s):\n    \"\"\"\n    >>> solve(6, 'ac?b?c')\n    24\n    >>> solve(7, '???????')\n    2835\n    >>> solve(9, 'cccbbbaaa')\n    0\n    >>> solve(5, 'a???c')\n    46\n    \"\"\"\n    mod = int(1e9 + 7)\n    # dp[i][j] : number of substrings ending at index i with character j\n    dp = [[0] * 3 for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(3):\n            if s[i - 1] == '?':\n                for k in range(3):\n                    dp[i][k] += dp[i - 1][j]\n            elif 'a' <= s[i - 1] <= 'c':\n                dp[i][ord(s[i - 1]) - ord('a')] += dp[i - 1][j]\n        for j in range(3):\n            dp[i][j] %= mod\n    return sum(dp[n]) % mod\n\n\nif __name__ == '__main__':\n    n = int(input())\n    s = input()\n    print(solve(n, s))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef solve(n, s):\n    \"\"\"\n    >>> solve(6, 'ac?b?c')\n    24\n    >>> solve(7, '???????')\n    2835\n    >>> solve(9, 'cccbbbaaa')\n    0\n    >>> solve(5, 'a???c')\n    46\n    \"\"\"\n    mod = int(1e9 + 7)\n    # dp[i][j] : number of subsequences ending at index i with character j\n    dp = [[0] * 3 for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(3):\n            if s[i - 1] == '?':\n                for k in range(3):\n                    dp[i][k] += dp[i - 1][j]\n            elif 'a' <= s[i - 1] <= 'c':\n                dp[i][ord(s[i - 1]) - ord('a')] += dp[i - 1][j]\n        for j in range(3):\n            dp[i][j] %= mod\n    return sum(dp[n]) % mod\n\n\nif __name__ == '__main__':\n    n = int(input())\n    s = input()\n    print(solve(n, s))\n"
    }
  ],
  "created": 1650791254,
  "object": "edit"
}
2022-04-24 09:07:40.510727 fix spelling mistakes 2 ['\n\n#\ndef solve(n, s):\n    """\n    >>> solve(6, \'ac?b?c\')\n    24\n    >>> solve(7, \'???????\')\n    2835\n    >>> solve(9, \'cccbbbaaa\')\n    0\n    >>> solve(5, \'a???c\')\n    46\n    """\n    mod = int(1e9 + 7)\n    # dp[i][j] : number of substrings ending at index i with character j\n    dp = [[0] * 3 for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(3):\n            if s[i - 1] == \'?\':\n                for k in range(3):\n                    dp[i][k] += dp[i - 1][j]\n            elif \'a\' <= s[i - 1] <= \'c\':\n                dp[i][ord(s[i - 1]) - ord(\'a\')] += dp[i - 1][j]\n        for j in range(3):\n            dp[i][j] %= mod\n    return sum(dp[n]) % mod\n\n\nif __name__ == \'__main__\':\n    n = int(input())\n    s = input()\n    print(solve(n, s))\n', '\n\ndef solve(n, s):\n    """\n    >>> solve(6, \'ac?b?c\')\n    24\n    >>> solve(7, \'???????\')\n    2835\n    >>> solve(9, \'cccbbbaaa\')\n    0\n    >>> solve(5, \'a???c\')\n    46\n    """\n    mod = int(1e9 + 7)\n    # dp[i][j] : number of subsequences ending at index i with character j\n    dp = [[0] * 3 for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(3):\n            if s[i - 1] == \'?\':\n                for k in range(3):\n                    dp[i][k] += dp[i - 1][j]\n            elif \'a\' <= s[i - 1] <= \'c\':\n                dp[i][ord(s[i - 1]) - ord(\'a\')] += dp[i - 1][j]\n        for j in range(3):\n            dp[i][j] %= mod\n    return sum(dp[n]) % mod\n\n\nif __name__ == \'__main__\':\n    n = int(input())\n    s = input()\n    print(solve(n, s))\n']
2022-04-24 09:07:40.510833 size on output set 2
2022-04-24 09:07:40.510841 size on input set 2
2022-04-24 09:07:40.510975 using api key sunu
2022-04-24 09:07:45.979467 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#\n\n#\ndef solve(n, s):\n    \"\"\"\n    >>> solve(6, 'ac?b?c')\n    24\n    >>> solve(7, '???????')\n    2835\n    >>> solve(9, 'cccbbbaaa')\n    0\n    >>> solve(5, 'a???c')\n    46\n    \"\"\"\n    mod = int(1e9 + 7)\n    # dp[i][j] : number of substrings ending at index i with character j\n    dp = [[0] * 3 for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(3):\n            if s[i - 1] == '?':\n                for k in range(3):\n                    dp[i][k] += dp[i - 1][j]\n            elif 'a' <= s[i - 1] <= 'c':\n                dp[i][ord(s[i - 1]) - ord('a')] += dp[i - 1][j]\n        for j in range(3):\n            dp[i][j] %= mod\n    return sum(dp[n]) % mod\n\n\nif __name__ == '__main__':\n    n = int(input())\n    s = input()\n    print(solve(n, s))\n"
    },
    {
      "index": 1,
      "text": "\n\ndef solve(n, s):\n    \"\"\"\n    >>> solve(6, 'ac?b?c')\n    24\n    >>> solve(7, '???????')\n    2835\n    >>> solve(9, 'cccbbbaaa')\n    0\n    >>> solve(5, 'a???c')\n    46\n    \"\"\"\n    mod = int(1e9 + 7)\n    # dp[i][j] : number of substrings ending at index i with character j\n    dp = [[0] * 3 for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(3):\n            if s[i - 1] == '?':\n                for k in range(3):\n                    dp[i][k] += dp[i - 1][j]\n            elif 'a' <= s[i - 1] <= 'c':\n                dp[i][ord(s[i - 1]) - ord('a')] += dp[i - 1][j]\n        for j in range(3):\n            dp[i][j] %= mod\n    return sum(dp[n]) % mod\n\n\nif __name__ == '__main__':\n    n = int(input())\n    s = input()\n    print(solve(n, s))\n"
    }
  ],
  "created": 1650791260,
  "object": "edit"
}
2022-04-24 09:07:45.979644 fix syntax errors 2 ['\n#\n\n#\ndef solve(n, s):\n    """\n    >>> solve(6, \'ac?b?c\')\n    24\n    >>> solve(7, \'???????\')\n    2835\n    >>> solve(9, \'cccbbbaaa\')\n    0\n    >>> solve(5, \'a???c\')\n    46\n    """\n    mod = int(1e9 + 7)\n    # dp[i][j] : number of substrings ending at index i with character j\n    dp = [[0] * 3 for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(3):\n            if s[i - 1] == \'?\':\n                for k in range(3):\n                    dp[i][k] += dp[i - 1][j]\n            elif \'a\' <= s[i - 1] <= \'c\':\n                dp[i][ord(s[i - 1]) - ord(\'a\')] += dp[i - 1][j]\n        for j in range(3):\n            dp[i][j] %= mod\n    return sum(dp[n]) % mod\n\n\nif __name__ == \'__main__\':\n    n = int(input())\n    s = input()\n    print(solve(n, s))\n', '\n\ndef solve(n, s):\n    """\n    >>> solve(6, \'ac?b?c\')\n    24\n    >>> solve(7, \'???????\')\n    2835\n    >>> solve(9, \'cccbbbaaa\')\n    0\n    >>> solve(5, \'a???c\')\n    46\n    """\n    mod = int(1e9 + 7)\n    # dp[i][j] : number of substrings ending at index i with character j\n    dp = [[0] * 3 for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(3):\n            if s[i - 1] == \'?\':\n                for k in range(3):\n                    dp[i][k] += dp[i - 1][j]\n            elif \'a\' <= s[i - 1] <= \'c\':\n                dp[i][ord(s[i - 1]) - ord(\'a\')] += dp[i - 1][j]\n        for j in range(3):\n            dp[i][j] %= mod\n    return sum(dp[n]) % mod\n\n\nif __name__ == \'__main__\':\n    n = int(input())\n    s = input()\n    print(solve(n, s))\n']
2022-04-24 09:07:45.979795 using api key kouti
2022-04-24 09:07:53.828913 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "from typing import List\n\n\n\ndef solve(n, s):\n    \"\"\"\n    >>> solve(6, 'ac?b?c')\n    24\n    >>> solve(7, '???????')\n    2835\n    >>> solve(9, 'cccbbbaaa')\n    0\n    >>> solve(5, 'a???c')\n    46\n    \"\"\"\n    mod = int(1e9 + 7)\n    # dp[i][j] : number of subsequences ending at index i with character j\n    dp: List[List[int]] = [[0] * 3 for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(3):\n            if s[i - 1] == '?':\n                for k in range(3):\n                    dp[i][k] += dp[i - 1][j]\n            elif 'a' <= s[i - 1] <= 'c':\n                dp[i][ord(s[i - 1]) - ord('a')] += dp[i - 1][j]\n        for j in range(3):\n            dp[i][j] %= mod\n    return sum(dp[n]) % mod\n\n\nif __name__ == '__main__':\n    n = int(input())\n    s = input()\n    print(solve(n, s))\n"
    },
    {
      "index": 1,
      "text": "\ndef solve(n, s):\n    \"\"\"\n    >>> solve(6, 'ac?b?c') # doctest: +NORMALIZE_WHITESPACE\n    24\n    >>> solve(7, '???????') # doctest: +NORMALIZE_WHITESPACE\n    2835\n    >>> solve(9, 'cccbbbaaa')\n    0\n    >>> solve(5, 'a???c')\n    46\n    \"\"\"\n    mod = int(1e9 + 7)\n    # dp[i][j] : number of subsequences ending at index i with character j\n    dp = [[0] * 3 for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(3):\n            if s[i - 1] == '?':\n                for k in range(3):\n                    dp[i][k] += dp[i - 1][j]\n            elif 'a' <= s[i - 1] <= 'c':\n                dp[i][ord(s[i - 1]) - ord('a')] += dp[i - 1][j]\n        for j in range(3):\n            dp[i][j] %= mod\n    return sum(dp[n]) % mod\n\n\nif __name__ == '__main__':\n    n = int(input())\n    s = input()\n    print(solve(n, s))\n"
    }
  ],
  "created": 1650791266,
  "object": "edit"
}
2022-04-24 09:07:53.829103 fix syntax errors 2 ['from typing import List\n\n\n\ndef solve(n, s):\n    """\n    >>> solve(6, \'ac?b?c\')\n    24\n    >>> solve(7, \'???????\')\n    2835\n    >>> solve(9, \'cccbbbaaa\')\n    0\n    >>> solve(5, \'a???c\')\n    46\n    """\n    mod = int(1e9 + 7)\n    # dp[i][j] : number of subsequences ending at index i with character j\n    dp: List[List[int]] = [[0] * 3 for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(3):\n            if s[i - 1] == \'?\':\n                for k in range(3):\n                    dp[i][k] += dp[i - 1][j]\n            elif \'a\' <= s[i - 1] <= \'c\':\n                dp[i][ord(s[i - 1]) - ord(\'a\')] += dp[i - 1][j]\n        for j in range(3):\n            dp[i][j] %= mod\n    return sum(dp[n]) % mod\n\n\nif __name__ == \'__main__\':\n    n = int(input())\n    s = input()\n    print(solve(n, s))\n', '\ndef solve(n, s):\n    """\n    >>> solve(6, \'ac?b?c\') # doctest: +NORMALIZE_WHITESPACE\n    24\n    >>> solve(7, \'???????\') # doctest: +NORMALIZE_WHITESPACE\n    2835\n    >>> solve(9, \'cccbbbaaa\')\n    0\n    >>> solve(5, \'a???c\')\n    46\n    """\n    mod = int(1e9 + 7)\n    # dp[i][j] : number of subsequences ending at index i with character j\n    dp = [[0] * 3 for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(3):\n            if s[i - 1] == \'?\':\n                for k in range(3):\n                    dp[i][k] += dp[i - 1][j]\n            elif \'a\' <= s[i - 1] <= \'c\':\n                dp[i][ord(s[i - 1]) - ord(\'a\')] += dp[i - 1][j]\n        for j in range(3):\n            dp[i][j] %= mod\n    return sum(dp[n]) % mod\n\n\nif __name__ == \'__main__\':\n    n = int(input())\n    s = input()\n    print(solve(n, s))\n']
2022-04-24 09:07:53.829140 size on output set 4
