["\nimport math\n\nA, B, K = map(int, input().split())\n\ndef prime_factorization(n):\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1): #2\u304b\u3089n\u306e\u5e73\u65b9\u6839\u307e\u3067\u7e70\u308a\u8fd4\u3059\n        while n % i == 0:\n            n //= i #\u5272\u308a\u5207\u308c\u308b\u9593\u306f\u5272\u308a\u7d9a\u3051\u308b\n            factors.append(i) #\u7d20\u56e0\u6570\u3092\u914d\u5217\u306b\u5165\u308c\u308b\n    return factors\n\ndef find_num(A, B, K):\n    a_factors = prime_factorization(A)\n    b_factors = prime_factorization(B)\n    common_factors = list(set(a_factors) & set(b_factors)) #\u5171\u901a\u306e\u7d20\u56e0\u6570\u3092\u6c42\u3081\u308b\n    return common_factors[-K] #K\u756a\u76ee\u306b\u5927\u304d\u3044\u7d20\u56e0\u6570\n\nprint(find_num(A, B, K))\n", "import math\n\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\na, b, k = map(int, input().split())\n\ng = gcd(a, b)\n\ndivisors = []\nfor i in range(1, int(math.sqrt(g)) + 1):\n    if g % i == 0:\n        divisors.append(i)\n        if i != g // i:\n            divisors.append(g // i)\n\ndivisors.sort(reverse=True)\n\nprint(divisors[k - 1])\n", "\nimport math\n\nA, B, K = map(int, input().split())\n\ndef prime_factorization(n):\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            n //= i\n            factors.append(i)\n    return factors\n\ndef find_num(A, B, K):\n    a_factors = prime_factorization(A)\n    b_factors = prime_factorization(B)\n    common_factors = list(set(a_factors) & set(b_factors))\n    return common_factors[-1]\n\nprint(find_num(A, B, K))\n", "# gcd\nimport math\n\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\na, b, k = map(int, input().split())\n\ng = gcd(a, b)\n\ndivisors = []\nfor i in range(1, int(math.sqrt(g)) + 1):\n    if g % i == 0:\n        divisors.append(i)\n        if i != g // i:\n            divisors.append(g // i)\n\ndivisors.sort(reverse=True)\nprint(divisors[k - 1])\n", "\n# gcd.py\nimport math\n\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n    while b != 0:\n        a, b = b, a % b\n    return a\n\na, b, k = map(int, input().split())\n\ng = gcd(a, b)\n\ndivisors = []\nfor i in range(1, int(math.sqrt(g)) + 1):\n    if g % i == 0:\n        divisors.append(i)\n        if i != g // i:\n            divisors.append(g // i)\n\ndivisors.sort(reverse=True)\n\nprint(divisors[k - 1])\n", "import math\n\nA, B, K = map(int, input().split())\n\ndef prime_factorization(n):\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            n //= i\n            factors.append(i)\n    return factors\n\ndef find_nth_common_factor(A, B, K):\n    A_factors = prime_factorization(A)\n    B_factors = prime_factorization(B)\n    common_factors = list(set(A_factors) & set(B_factors))\n    return common_factors[-K]\n\nprint(find_nth_common_factor(A, B, K))\n", "\nimport math\n\nA, B, K = map(int, input().split())\n\ndef prime_factorization(n):\n    factors = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        while n % i == 0:\n            n //= i\n            factors.append(i)\n    return factors\n\ndef find_nth_common_factor(A, B, K):\n    A_factors = prime_factorization(A)\n    B_factors = prime_factorization(B)\n    common_factors = list(set(A_factors) & set(B_factors))\n    return common_factors[K - 1]\n\nprint(find_nth_common_factor(A, B, K))\n"]