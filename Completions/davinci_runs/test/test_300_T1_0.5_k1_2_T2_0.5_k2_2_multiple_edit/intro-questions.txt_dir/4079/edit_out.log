2022-04-24 06:26:19.890988 num operations 2
2022-04-24 06:26:19.891005 size on input set 1
2022-04-24 06:26:19.891143 using api key jaanu
2022-04-24 06:26:25.569126 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# Solution 1\n\nn = int(input())\n\nfor i in range(n):\n    s = input()\n    ok = True\n    for j in range(1, len(s)):\n        if ord(s[j]) == ord(s[j - 1]) + 1:\n            ok = False\n            break\n    if len(s) != len(set(s)):\n        ok = False\n    print('Yes' if ok else 'No')\n"
    },
    {
      "index": 1,
      "text": "\n\n# Solution \n\nn = int(input())\n\nfor i in range(n):\n    s = input()\n    ok = True\n    for j in range(1, len(s)):\n        if ord(s[j]) == ord(s[j - 1]) + 1:\n            ok = False\n            break\n    if len(s) != len(set(s)):\n        ok = False\n    print('Yes' if ok else 'No')\n"
    }
  ],
  "created": 1650781580,
  "object": "edit"
}
2022-04-24 06:26:25.569343 fix spelling mistakes 2 ["\n\n# Solution 1\n\nn = int(input())\n\nfor i in range(n):\n    s = input()\n    ok = True\n    for j in range(1, len(s)):\n        if ord(s[j]) == ord(s[j - 1]) + 1:\n            ok = False\n            break\n    if len(s) != len(set(s)):\n        ok = False\n    print('Yes' if ok else 'No')\n", "\n\n# Solution \n\nn = int(input())\n\nfor i in range(n):\n    s = input()\n    ok = True\n    for j in range(1, len(s)):\n        if ord(s[j]) == ord(s[j - 1]) + 1:\n            ok = False\n            break\n    if len(s) != len(set(s)):\n        ok = False\n    print('Yes' if ok else 'No')\n"]
2022-04-24 06:26:25.569369 size on output set 2
2022-04-24 06:26:25.569376 size on input set 2
2022-04-24 06:26:25.569499 using api key soukgp
2022-04-24 06:26:30.993724 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Solution \n\nn = int(input())\n\nfor i in range(n):\n    s = input()\n    ok = True\n    for j in range(1, len(s)):\n        if ord(s[j]) == ord(s[j - 1]) + 1:\n            ok = False\n            break\n    if len(s) != len(set(s)):\n        ok = False\n    print('Yes' if ok else 'No')\n"
    },
    {
      "index": 1,
      "text": "\n# Solution \n\nn = int(input())\n\nfor i in range(n):\n    s = input()\n    ok = True\n    for j in range(1, len(s)):\n        if ord(s[j]) == ord(s[j - 1]) + 1:\n            ok = False\n            break\n    if len(s) != len(set(s)):\n        ok = False\n    print('Yes' if ok else 'No')\n"
    }
  ],
  "created": 1650781585,
  "object": "edit"
}
2022-04-24 06:26:30.993919 fix syntax errors 2 ["\n# Solution \n\nn = int(input())\n\nfor i in range(n):\n    s = input()\n    ok = True\n    for j in range(1, len(s)):\n        if ord(s[j]) == ord(s[j - 1]) + 1:\n            ok = False\n            break\n    if len(s) != len(set(s)):\n        ok = False\n    print('Yes' if ok else 'No')\n", "\n# Solution \n\nn = int(input())\n\nfor i in range(n):\n    s = input()\n    ok = True\n    for j in range(1, len(s)):\n        if ord(s[j]) == ord(s[j - 1]) + 1:\n            ok = False\n            break\n    if len(s) != len(set(s)):\n        ok = False\n    print('Yes' if ok else 'No')\n"]
2022-04-24 06:26:30.994061 using api key soukgp
2022-04-24 06:26:36.627863 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n# Solution 1\n\nn = int(input())\n\nfor i in range(n):\n    s = input()\n    ok = True\n    for j in range(1, len(s)):\n        if ord(s[j]) == ord(s[j - 1]) + 1:\n            ok = False\n            break\n    if len(s) != len(set(s)):\n        ok = False\n    print('Yes' if ok else 'No')\n"
    },
    {
      "index": 1,
      "text": "\n# Solution 1\nn = int(input())\n\nfor i in range(n):\n    s = input()\n    ok = True\n    for j in range(1, len(s)):\n        if ord(s[j]) == ord(s[j - 1]) + 1:\n            ok = False\n            break\n    if len(s) != len(set(s)):\n        ok = False\n    print('Yes' if ok else 'No')\n"
    }
  ],
  "created": 1650781591,
  "object": "edit"
}
2022-04-24 06:26:36.628044 fix syntax errors 2 ["\n# Solution 1\n\nn = int(input())\n\nfor i in range(n):\n    s = input()\n    ok = True\n    for j in range(1, len(s)):\n        if ord(s[j]) == ord(s[j - 1]) + 1:\n            ok = False\n            break\n    if len(s) != len(set(s)):\n        ok = False\n    print('Yes' if ok else 'No')\n", "\n# Solution 1\nn = int(input())\n\nfor i in range(n):\n    s = input()\n    ok = True\n    for j in range(1, len(s)):\n        if ord(s[j]) == ord(s[j - 1]) + 1:\n            ok = False\n            break\n    if len(s) != len(set(s)):\n        ok = False\n    print('Yes' if ok else 'No')\n"]
2022-04-24 06:26:36.628081 size on output set 3
2022-04-24 06:26:36.628092 num operations 2
2022-04-24 06:26:36.628098 size on input set 1
2022-04-24 06:26:36.628220 using api key jaanu
2022-04-24 06:26:43.863750 fix spelling mistakes {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# n = int(input())\n# lst = []\n# for i in range(n):\n#     lst.append(input())\n#\n# for i in lst:\n#     if len(i) == len(set(i)):\n#         print(\"Yes\")\n#     else:\n#         print(\"No\")\n\nn = int(input())\nlst = []\nfor i in range(n):\n    lst.append(input())\n\nfor i in lst:\n    if len(i) == len(set(i)) and len(set(i)) == ord(max(i)) - ord(min(i)) + 1:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n# fix spelling mistakes\n"
    },
    {
      "index": 1,
      "text": "\n\nn = int(input())\nlst = []\nfor i in range(n):\n    lst.append(input())\n\nfor i in lst:\n    if len(i) == len(set(i)) and len(set(i)) == ord(max(i)) - ord(min(i)) + 1:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    }
  ],
  "created": 1650781596,
  "object": "edit"
}
2022-04-24 06:26:43.863925 fix spelling mistakes 2 ['\n\n# n = int(input())\n# lst = []\n# for i in range(n):\n#     lst.append(input())\n#\n# for i in lst:\n#     if len(i) == len(set(i)):\n#         print("Yes")\n#     else:\n#         print("No")\n\nn = int(input())\nlst = []\nfor i in range(n):\n    lst.append(input())\n\nfor i in lst:\n    if len(i) == len(set(i)) and len(set(i)) == ord(max(i)) - ord(min(i)) + 1:\n        print("Yes")\n    else:\n        print("No")\n\n# fix spelling mistakes\n', '\n\nn = int(input())\nlst = []\nfor i in range(n):\n    lst.append(input())\n\nfor i in lst:\n    if len(i) == len(set(i)) and len(set(i)) == ord(max(i)) - ord(min(i)) + 1:\n        print("Yes")\n    else:\n        print("No")\n']
2022-04-24 06:26:43.863951 size on output set 2
2022-04-24 06:26:43.863957 size on input set 2
2022-04-24 06:26:43.864095 using api key soukgp
2022-04-24 06:27:00.658198 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\ndef is_anagram(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    s1 = list(s1)\n    s2 = list(s2)\n    s1.sort()\n    s2.sort()\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            return False\n    return True\n\n\ndef is_anagram2(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    s1 = list(s1)\n    s2 = list(s2)\n    for i in range(len(s1)):\n        if s1[i] not in s2:\n            return False\n        else:\n            s2.remove(s1[i])\n    return True\n\n\nprint(is_anagram('abc', 'bca'))\nprint(is_anagram2('abc', 'bca'))\n"
    },
    {
      "index": 1,
      "text": "\n# n = int(input())\n# lst = []\n# for i in range(n):\n#     lst.append(input())\n#\n# for i in lst:\n#     if len(i) == len(set(i)) and len(set(i)) == ord(max(i)) - ord(min(i)) + 1:\n#         print(\"Yes\")\n#     else:\n#         print(\"No\")\n\n\n# n = int(input())\n# lst = []\n# for i in range(n):\n#     lst.append(input())\n#\n# for i in lst:\n#     if len(i) == len(set(i)) and len(set(i)) == ord(max(i)) - ord(min(i)) + 1:\n#         print(\"Yes\")\n#     else:\n#         print(\"No\")\n"
    }
  ],
  "created": 1650781603,
  "object": "edit"
}
2022-04-24 06:27:00.658401 fix syntax errors 2 ["\n\n\ndef is_anagram(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    s1 = list(s1)\n    s2 = list(s2)\n    s1.sort()\n    s2.sort()\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            return False\n    return True\n\n\ndef is_anagram2(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    s1 = list(s1)\n    s2 = list(s2)\n    for i in range(len(s1)):\n        if s1[i] not in s2:\n            return False\n        else:\n            s2.remove(s1[i])\n    return True\n\n\nprint(is_anagram('abc', 'bca'))\nprint(is_anagram2('abc', 'bca'))\n", '\n# n = int(input())\n# lst = []\n# for i in range(n):\n#     lst.append(input())\n#\n# for i in lst:\n#     if len(i) == len(set(i)) and len(set(i)) == ord(max(i)) - ord(min(i)) + 1:\n#         print("Yes")\n#     else:\n#         print("No")\n\n\n# n = int(input())\n# lst = []\n# for i in range(n):\n#     lst.append(input())\n#\n# for i in lst:\n#     if len(i) == len(set(i)) and len(set(i)) == ord(max(i)) - ord(min(i)) + 1:\n#         print("Yes")\n#     else:\n#         print("No")\n']
2022-04-24 06:27:00.658662 using api key soukgp
2022-04-24 06:27:14.586453 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n\nn = int(input())\nlst = []\nfor i in range(n):\n    lst.append(input())\n\nfor i in lst:\n    if len(i) == len(set(i)) and len(set(i)) == ord(max(i)) - ord(min(i)) + 1:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2020/6/11 10:40\n# @Author  : cai\n# @contact : yuwei.chen@yunzhenxin.com\n# @File    : Q26_isLongPressedName.py\n# @Note    : https://leetcode-cn.com/problems/long-pressed-name/\n\n\n\nclass Solution:\n    def isLongPressedName(self, name: str, typed: str) -> bool:\n        i, j = 0, 0\n        while i < len(name) and j < len(typed):\n            if name[i] == typed[j]:\n                i += 1\n                j += 1\n            elif j > 0 and typed[j] == typed[j - 1]:\n                j += 1\n            else:\n                return False\n        return True\n"
    }
  ],
  "created": 1650781620,
  "object": "edit"
}
2022-04-24 06:27:14.586660 fix syntax errors 2 ['\n\n\nn = int(input())\nlst = []\nfor i in range(n):\n    lst.append(input())\n\nfor i in lst:\n    if len(i) == len(set(i)) and len(set(i)) == ord(max(i)) - ord(min(i)) + 1:\n        print("Yes")\n    else:\n        print("No")\n', '#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2020/6/11 10:40\n# @Author  : cai\n# @contact : yuwei.chen@yunzhenxin.com\n# @File    : Q26_isLongPressedName.py\n# @Note    : https://leetcode-cn.com/problems/long-pressed-name/\n\n\n\nclass Solution:\n    def isLongPressedName(self, name: str, typed: str) -> bool:\n        i, j = 0, 0\n        while i < len(name) and j < len(typed):\n            if name[i] == typed[j]:\n                i += 1\n                j += 1\n            elif j > 0 and typed[j] == typed[j - 1]:\n                j += 1\n            else:\n                return False\n        return True\n']
2022-04-24 06:27:14.586692 size on output set 4
