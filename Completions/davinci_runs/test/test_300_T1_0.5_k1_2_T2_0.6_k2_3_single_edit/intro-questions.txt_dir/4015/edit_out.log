2022-04-20 22:48:17.379794 num operations 1
2022-04-20 22:48:17.379837 size on input set 1
2022-04-20 22:48:17.380040 using api key soukgp
2022-04-20 22:48:20.324526 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "from fractions import gcd\n\n\ndef get_input():\n    return [int(x) for x in input().split()]\n\n\ndef solve(n, m):\n    if n == m:\n        return 0\n    if n > m or m % n != 0:\n        return -1\n    return solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n"
    },
    {
      "index": 1,
      "text": "def get_input():\n    n, m = map(int, input().split())\n    return n, m\n\ndef solve(n, m):\n    if n == m:\n        return 0\n    if n > m:\n        return -1\n    if m % n != 0:\n        return -1\n    return solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = map(int, input().split())\n    print(solve(n, m))\n"
    },
    {
      "index": 2,
      "text": "\ndef get_input():\n    return [int(x) for x in input().split()]\n\n\ndef solve(n, m):\n    if n == m:\n        return 0\n    if n > m:\n        return -1\n    if m % n != 0:\n        return -1\n    return solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n"
    }
  ],
  "created": 1650494897,
  "object": "edit"
}
2022-04-20 22:48:20.324849 fix syntax errors 3 ["from fractions import gcd\n\n\ndef get_input():\n    return [int(x) for x in input().split()]\n\n\ndef solve(n, m):\n    if n == m:\n        return 0\n    if n > m or m % n != 0:\n        return -1\n    return solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n", "def get_input():\n    n, m = map(int, input().split())\n    return n, m\n\ndef solve(n, m):\n    if n == m:\n        return 0\n    if n > m:\n        return -1\n    if m % n != 0:\n        return -1\n    return solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = map(int, input().split())\n    print(solve(n, m))\n", "\ndef get_input():\n    return [int(x) for x in input().split()]\n\n\ndef solve(n, m):\n    if n == m:\n        return 0\n    if n > m:\n        return -1\n    if m % n != 0:\n        return -1\n    return solve(n * 2, m) + 1 if m % (n * 2) == 0 else solve(n * 3, m) + 1\n\n\nif __name__ == '__main__':\n    n, m = get_input()\n    print(solve(n, m))\n"]
2022-04-20 22:48:20.324887 size on output set 3
2022-04-20 22:48:20.324899 num operations 1
2022-04-20 22:48:20.324905 size on input set 1
2022-04-20 22:48:20.325061 using api key soukgp
2022-04-20 22:48:27.171785 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#-----Solution-----\n\n#This is a greedy algorithm.\n#The idea is to greedily multiply by 3 until the number is greater than m. Then, multiply by 2 as many times as possible, until the number is greater than m.\n#If the number is not m, then the answer is -1\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\nelif m % 2 == 0 and n % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while n < m:\n        if n * 3 <= m:\n            n *= 3\n        else:\n            n *= 2\n        steps += 1\n    if n == m:\n        print(steps)\n    else:\n        print(-1)\n"
    },
    {
      "index": 1,
      "text": "\n\n#-----Solution-----\n\n#This is a greedy algorithm.\n#The idea is to greedily multiply by 3 until the number is greater than m.\n#Then, multiply by 2 as many times as possible, until the number is greater than m.\n\n#If the number is not m, then the answer is -1.\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\nelif m % 2 == 0 and n % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while n < m:\n        if n * 3 <= m:\n            n *= 3\n        else:\n            n *= 2\n        steps += 1\n    print(steps)\n"
    },
    {
      "index": 2,
      "text": "#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n#\n# Complete the 'getTotalX' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY a\n#  2. INTEGER_ARRAY b\n#\n\ndef getTotalX(a, b):\n    # Write your code here\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    n = int(first_multiple_input[0])\n\n    m = int(first_multiple_input[1])\n\n    arr = list(map(int, input().rstrip().split()))\n\n    brr = list(map(int, input().rstrip().split()))\n\n    total = getTotalX(arr, brr)\n\n    fptr.write(str(total) + '\\n')\n\n    fptr.close()\n\n\n#-----Solution-----\n\n#This is a greedy algorithm.\n#The idea is to greedily multiply by 3 until the number is greater than m.\n#Then, multiply by 2 as many times as possible, until the number is greater than m.\n#If the number is not m, then the answer is -1.\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\nelif m % 2 == 0 and n % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while n < m:\n        if n * 3 <= m:\n            n *= 3\n        else:\n            n *= 2\n        steps += 1\n    if n == m:\n        print(steps)\n    else:\n        print(-1)\n"
    }
  ],
  "created": 1650494900,
  "object": "edit"
}
2022-04-20 22:48:27.172025 fix syntax errors 3 ['\n#-----Solution-----\n\n#This is a greedy algorithm.\n#The idea is to greedily multiply by 3 until the number is greater than m. Then, multiply by 2 as many times as possible, until the number is greater than m.\n#If the number is not m, then the answer is -1\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\nelif m % 2 == 0 and n % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while n < m:\n        if n * 3 <= m:\n            n *= 3\n        else:\n            n *= 2\n        steps += 1\n    if n == m:\n        print(steps)\n    else:\n        print(-1)\n', '\n\n#-----Solution-----\n\n#This is a greedy algorithm.\n#The idea is to greedily multiply by 3 until the number is greater than m.\n#Then, multiply by 2 as many times as possible, until the number is greater than m.\n\n#If the number is not m, then the answer is -1.\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\nelif m % 2 == 0 and n % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while n < m:\n        if n * 3 <= m:\n            n *= 3\n        else:\n            n *= 2\n        steps += 1\n    print(steps)\n', "#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n#\n# Complete the 'getTotalX' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY a\n#  2. INTEGER_ARRAY b\n#\n\ndef getTotalX(a, b):\n    # Write your code here\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    n = int(first_multiple_input[0])\n\n    m = int(first_multiple_input[1])\n\n    arr = list(map(int, input().rstrip().split()))\n\n    brr = list(map(int, input().rstrip().split()))\n\n    total = getTotalX(arr, brr)\n\n    fptr.write(str(total) + '\\n')\n\n    fptr.close()\n\n\n#-----Solution-----\n\n#This is a greedy algorithm.\n#The idea is to greedily multiply by 3 until the number is greater than m.\n#Then, multiply by 2 as many times as possible, until the number is greater than m.\n#If the number is not m, then the answer is -1.\n\nn, m = map(int, input().split())\n\nif n == m:\n    print(0)\nelif m % 2 == 0 and n % 2 == 1:\n    print(-1)\nelse:\n    steps = 0\n    while n < m:\n        if n * 3 <= m:\n            n *= 3\n        else:\n            n *= 2\n        steps += 1\n    if n == m:\n        print(steps)\n    else:\n        print(-1)\n"]
2022-04-20 22:48:27.172072 size on output set 3
