2022-04-20 23:20:16.790733 num operations 1
2022-04-20 23:20:16.790753 size on input set 1
2022-04-20 23:20:16.790906 using api key derek
2022-04-20 23:20:16.910398 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 23:20:18.412302 using api key kouti
2022-04-20 23:20:24.098986 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n#imports script, filename\nfrom sys import argv\nscript, filename = argv \n\n#sets txt to open filename\ntxt = open(filename)\n\n#sets line to read txt\nline = txt.read()\n\n#sets ln to length of line\nln = len(line)\n\n#sets first to first half of line\nfirst = line[:ln/2]\n\n#sets second to second half of line\nsecond = line[ln/2+1:]\n\n#sets second to reversed second\nsecond = second[::-1]\n\n#sets first to reversed first\nfirst = first[::-1]\n\n#sets middle to middle of line\nmiddle = line[ln/2]\n\n#prints yes if first and second are the same and line is the same as reversed line\n#prints no if not\nif first == second and line == line[::-1]:\n    print \"Yes\"\nelse:\n    print \"No\"\n"
    },
    {
      "index": 1,
      "text": "\n\nfrom sys import argv\nscript, filename = argv\ntxt = open(filename)\nline = txt.read()\n\n#sets ln to length of line\nln = len(line)\n\n#sets first to first half of line\nfirst = line[:ln/2]\n\n#sets second to second half of line\nsecond = line[ln/2+1:]\n\n#sets second to reversed second\nsecond = second[::-1]\n\n#sets first to reversed first\nfirst = first[::-1]\n\n#sets middle to middle of line\nmiddle = line[ln/2]\n\n#if first and second are the same and line is the same as reversed line\nif first == second and line == line[::-1]:\n    print \"Yes\"\nelse:\n    print \"No\"\n"
    },
    {
      "index": 2,
      "text": "\n\n#imports script, filename\nfrom sys import argv\nscript, filename = argv\n\n#sets txt to open filename\ntxt = open(filename)\n\n#sets line to read txt\nline = txt.read()\n\n#sets ln to length of line\nln = len(line)\n\n#sets first to first half of line\nfirst = line[:ln/2]\n\n#sets second to second half of line\nsecond = line[ln/2+1:]\n\n#sets first to reversed first\nfirst = first[::-1]\n\n#sets second to reversed second \nsecond = second[::-1] \n\n#sets middle to middle of line\nmiddle = line[ln/2]\n\n#if first and second are the same and line is the same as reversed line\nif first == second and line == line[::-1]:\n    print \"Yes\"\nelse:\n    print \"No\"\n"
    }
  ],
  "created": 1650496818,
  "object": "edit"
}
2022-04-20 23:20:24.099271 fix syntax errors 3 ['\n\n#imports script, filename\nfrom sys import argv\nscript, filename = argv \n\n#sets txt to open filename\ntxt = open(filename)\n\n#sets line to read txt\nline = txt.read()\n\n#sets ln to length of line\nln = len(line)\n\n#sets first to first half of line\nfirst = line[:ln/2]\n\n#sets second to second half of line\nsecond = line[ln/2+1:]\n\n#sets second to reversed second\nsecond = second[::-1]\n\n#sets first to reversed first\nfirst = first[::-1]\n\n#sets middle to middle of line\nmiddle = line[ln/2]\n\n#prints yes if first and second are the same and line is the same as reversed line\n#prints no if not\nif first == second and line == line[::-1]:\n    print "Yes"\nelse:\n    print "No"\n', '\n\nfrom sys import argv\nscript, filename = argv\ntxt = open(filename)\nline = txt.read()\n\n#sets ln to length of line\nln = len(line)\n\n#sets first to first half of line\nfirst = line[:ln/2]\n\n#sets second to second half of line\nsecond = line[ln/2+1:]\n\n#sets second to reversed second\nsecond = second[::-1]\n\n#sets first to reversed first\nfirst = first[::-1]\n\n#sets middle to middle of line\nmiddle = line[ln/2]\n\n#if first and second are the same and line is the same as reversed line\nif first == second and line == line[::-1]:\n    print "Yes"\nelse:\n    print "No"\n', '\n\n#imports script, filename\nfrom sys import argv\nscript, filename = argv\n\n#sets txt to open filename\ntxt = open(filename)\n\n#sets line to read txt\nline = txt.read()\n\n#sets ln to length of line\nln = len(line)\n\n#sets first to first half of line\nfirst = line[:ln/2]\n\n#sets second to second half of line\nsecond = line[ln/2+1:]\n\n#sets first to reversed first\nfirst = first[::-1]\n\n#sets second to reversed second \nsecond = second[::-1] \n\n#sets middle to middle of line\nmiddle = line[ln/2]\n\n#if first and second are the same and line is the same as reversed line\nif first == second and line == line[::-1]:\n    print "Yes"\nelse:\n    print "No"\n']
2022-04-20 23:20:24.099313 size on output set 3
2022-04-20 23:20:24.099325 num operations 1
2022-04-20 23:20:24.099331 size on input set 1
2022-04-20 23:20:24.099521 using api key derek
2022-04-20 23:20:24.136815 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 23:20:25.638728 using api key sourya
2022-04-20 23:20:25.676159 in retry 5 3.0 <class 'Exception'>, Retrying in 3 seconds...
2022-04-20 23:20:28.679568 using api key sunu
2022-04-20 23:20:30.491442 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ninput_str = input()\n\nis_palindrome = True\nfor i in range(int(len(input_str) / 2)):\n    if input_str[i] != input_str[-i - 1]:\n        is_palindrome = False\n\nif is_palindrome:\n    print('Yes')\nelse:\n    print('No')\n"
    },
    {
      "index": 1,
      "text": "\ninput_str = input()\n\nis_palindrome = True\nfor i in range(int(len(input_str) / 2)):\n    if input_str[i] != input_str[-i - 1]:\n        break\n        is_palindrome = False\n\nif is_palindrome:\n    print('Yes')\nelse:\n    print('No')\n"
    },
    {
      "index": 2,
      "text": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\ninput_str = input()\n\nis_palindrome = True\nfor i in range(int(len(input_str) / 2)):\n    if input_str[i] != input_str[-i - 1]:\n        is_palindrome = False\n\nif is_palindrome:\n    print('Yes')\nelse:\n    print('No')\n"
    }
  ],
  "created": 1650496828,
  "object": "edit"
}
2022-04-20 23:20:30.491671 fix syntax errors 3 ["\ninput_str = input()\n\nis_palindrome = True\nfor i in range(int(len(input_str) / 2)):\n    if input_str[i] != input_str[-i - 1]:\n        is_palindrome = False\n\nif is_palindrome:\n    print('Yes')\nelse:\n    print('No')\n", "\ninput_str = input()\n\nis_palindrome = True\nfor i in range(int(len(input_str) / 2)):\n    if input_str[i] != input_str[-i - 1]:\n        break\n        is_palindrome = False\n\nif is_palindrome:\n    print('Yes')\nelse:\n    print('No')\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\ninput_str = input()\n\nis_palindrome = True\nfor i in range(int(len(input_str) / 2)):\n    if input_str[i] != input_str[-i - 1]:\n        is_palindrome = False\n\nif is_palindrome:\n    print('Yes')\nelse:\n    print('No')\n"]
2022-04-20 23:20:30.491698 size on output set 3
