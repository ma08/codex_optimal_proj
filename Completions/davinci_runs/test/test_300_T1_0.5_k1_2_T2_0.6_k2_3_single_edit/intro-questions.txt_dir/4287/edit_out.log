2022-04-21 00:30:29.876214 num operations 1
2022-04-21 00:30:29.876224 size on input set 1
2022-04-21 00:30:29.876380 using api key sourya
2022-04-21 00:30:30.027584 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-21 00:30:31.529169 using api key gabby
2022-04-21 00:30:31.567670 in retry 5 3.0 <class 'Exception'>, Retrying in 3 seconds...
2022-04-21 00:30:34.571139 using api key kouti
2022-04-21 00:30:38.312900 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n#-----Solution-----\n\n#-----Test-----\n"
    },
    {
      "index": 1,
      "text": "\ndef solution(S):\n    # write your code in Python 3.6\n    pass\n#-----Solution-----\n\n#-----Test-----\n"
    },
    {
      "index": 2,
      "text": "\n\n# -----Solution-----\n\n\n# -----Test-----\n"
    }
  ],
  "created": 1650501034,
  "object": "edit"
}
2022-04-21 00:30:38.313138 fix syntax errors 3 ['\n#-----Solution-----\n\n#-----Test-----\n', '\ndef solution(S):\n    # write your code in Python 3.6\n    pass\n#-----Solution-----\n\n#-----Test-----\n', '\n\n# -----Solution-----\n\n\n# -----Test-----\n']
2022-04-21 00:30:38.313164 size on output set 3
2022-04-21 00:30:38.313184 num operations 1
2022-04-21 00:30:38.313190 size on input set 1
2022-04-21 00:30:38.313381 using api key jaanu
2022-04-21 00:30:47.044308 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    a, n, m = map(int, input().split())\n    rain = []\n    for _ in xrange(n):\n        rain.append(map(int, input().split()))\n    umbrellas = []\n    for _ in xrange(m):\n        umbrellas.append(map(int, input().split()))\n\n    # dp[i][j]: minimum fatigue at x=i, using umbrellas up to index j\n    dp = [[0] * (m+1) for _ in xrange(a+1)]\n    for i in xrange(1, a+1):\n        for j in xrange(m+1):\n            if any(map(lambda x: x[0] <= i-1 and i <= x[1], rain)): # raining at i-1\n                min_fatigue = float('inf')\n                for k in xrange(1, j+1):\n                    min_fatigue = min(min_fatigue, dp[i-1][k] + umbrellas[k-1][1])\n                dp[i][j] = min_fatigue\n            else:\n                dp[i][j] = dp[i-1][j]\n    print(dp[-1][-1])\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef main():\n    a, n, m = map(int, raw_input().split())\n    rain = []\n    for _ in xrange(n):\n        rain.append(map(int, raw_input().split())[:2])\n    umbrellas = []\n    for _ in xrange(m):\n        umbrellas.append(map(int, raw_input().split())[:2])\n\n    # dp[i][j]: minimum fatigue at x=i, using umbrellas up to index j\n    dp = [[0] * (m+1) for _ in xrange(a+1)]\n    for i in xrange(1, a+1):\n        for j in xrange(m+1):\n            if any(map(lambda x: x[0] <= i-1 and i <= x[1], rain)): # raining at i-1\n                min_fatigue = float('inf')\n                for k in xrange(1, j+1):\n                    min_fatigue = min(min_fatigue, dp[i-1][k] + umbrellas[k-1][1])\n                dp[i][j] = min_fatigue\n            else:\n                dp[i][j] = dp[i-1][j]\n    print dp[-1][-1]\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\nimport sys\n\n\ndef main():\n    a, n, m = map(int, raw_input().split())\n    rain = []\n    for _ in xrange(n):\n        rain.append(list(map(int, raw_input().split())))\n    umbrellas = []\n    for _ in xrange(m):\n        umbrellas.append(list(map(int, raw_input().split())))\n\n    # dp[i][j]: minimum fatigue at x=i, using umbrellas up to index j\n    dp = [[0] * (m+1) for _ in xrange(a+1)]\n    for i in xrange(1, a+1):\n        for j in xrange(m+1):\n            if any(map(lambda x: x[0] <= i-1 and i <= x[1], rain)): # raining at i-1\n                min_fatigue = float('inf')\n                for k in xrange(1, j+1):\n                    min_fatigue = min(min_fatigue, dp[i-1][k] + umbrellas[k-1][1])\n                dp[i][j] = min_fatigue\n            else:\n                dp[i][j] = dp[i-1][j]\n    print(dp[-1][-1])\n\n\nif __name__ == '__main__':\n    sys.exit(main())\n"
    }
  ],
  "created": 1650501038,
  "object": "edit"
}
2022-04-21 00:30:47.044581 fix syntax errors 3 ["\n\ndef main():\n    a, n, m = map(int, input().split())\n    rain = []\n    for _ in xrange(n):\n        rain.append(map(int, input().split()))\n    umbrellas = []\n    for _ in xrange(m):\n        umbrellas.append(map(int, input().split()))\n\n    # dp[i][j]: minimum fatigue at x=i, using umbrellas up to index j\n    dp = [[0] * (m+1) for _ in xrange(a+1)]\n    for i in xrange(1, a+1):\n        for j in xrange(m+1):\n            if any(map(lambda x: x[0] <= i-1 and i <= x[1], rain)): # raining at i-1\n                min_fatigue = float('inf')\n                for k in xrange(1, j+1):\n                    min_fatigue = min(min_fatigue, dp[i-1][k] + umbrellas[k-1][1])\n                dp[i][j] = min_fatigue\n            else:\n                dp[i][j] = dp[i-1][j]\n    print(dp[-1][-1])\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    a, n, m = map(int, raw_input().split())\n    rain = []\n    for _ in xrange(n):\n        rain.append(map(int, raw_input().split())[:2])\n    umbrellas = []\n    for _ in xrange(m):\n        umbrellas.append(map(int, raw_input().split())[:2])\n\n    # dp[i][j]: minimum fatigue at x=i, using umbrellas up to index j\n    dp = [[0] * (m+1) for _ in xrange(a+1)]\n    for i in xrange(1, a+1):\n        for j in xrange(m+1):\n            if any(map(lambda x: x[0] <= i-1 and i <= x[1], rain)): # raining at i-1\n                min_fatigue = float('inf')\n                for k in xrange(1, j+1):\n                    min_fatigue = min(min_fatigue, dp[i-1][k] + umbrellas[k-1][1])\n                dp[i][j] = min_fatigue\n            else:\n                dp[i][j] = dp[i-1][j]\n    print dp[-1][-1]\n\nif __name__ == '__main__':\n    main()\n", "\n\nimport sys\n\n\ndef main():\n    a, n, m = map(int, raw_input().split())\n    rain = []\n    for _ in xrange(n):\n        rain.append(list(map(int, raw_input().split())))\n    umbrellas = []\n    for _ in xrange(m):\n        umbrellas.append(list(map(int, raw_input().split())))\n\n    # dp[i][j]: minimum fatigue at x=i, using umbrellas up to index j\n    dp = [[0] * (m+1) for _ in xrange(a+1)]\n    for i in xrange(1, a+1):\n        for j in xrange(m+1):\n            if any(map(lambda x: x[0] <= i-1 and i <= x[1], rain)): # raining at i-1\n                min_fatigue = float('inf')\n                for k in xrange(1, j+1):\n                    min_fatigue = min(min_fatigue, dp[i-1][k] + umbrellas[k-1][1])\n                dp[i][j] = min_fatigue\n            else:\n                dp[i][j] = dp[i-1][j]\n    print(dp[-1][-1])\n\n\nif __name__ == '__main__':\n    sys.exit(main())\n"]
2022-04-21 00:30:47.044628 size on output set 3
