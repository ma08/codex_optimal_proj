2022-04-20 23:02:37.749240 num operations 1
2022-04-20 23:02:37.749275 size on input set 1
2022-04-20 23:02:37.749473 using api key gabby
2022-04-20 23:02:37.918991 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 23:02:39.420876 using api key derek
2022-04-20 23:02:39.458295 in retry 5 3.0 <class 'Exception'>, Retrying in 3 seconds...
2022-04-20 23:02:42.461718 using api key sunu
2022-04-20 23:02:44.621531 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nfrom typing import List\nimport sys\n\nfrom math import log2\n\n\ndef get_contest(problems: List[int]):\n    n = len(problems)\n    # dp[i][j] = max number of problems in the contest with the maximum difficulty no more than 2^i and the minimum difficulty no less than 2^j\n    dp = [[0 for j in range(int(log2(problems[-1])) + 1)] for i in range(int(log2(problems[-1])) + 1)]\n    dp[0][0] = 1\n    for i in range(n):\n        for j in range(int(log2(problems[i])) + 1):\n            dp[j][j] += 1\n            for k in range(j + 1, int(log2(problems[-1])) + 1):\n                dp[k][j] = max(dp[k][j], dp[k - 1][j] + 1)\n    return max(map(max, dp))\n\n\n\ndef main():\n    n = int(input())\n    problems = list(map(int, input().split()))\n    print(get_contest(problems))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nimport sys\nfrom typing import List\nfrom math import log2\n\n\ndef get_contest(problems: List[int]):\n    n = len(problems)\n    # dp[i][j] = max number of problems in the contest with the maximum difficulty no more than 2^i and the minimum difficulty no less than 2^j\n    dp = [[0 for j in range(int(log2(problems[-1])) + 1)] for i in range(int(log2(problems[-1])) + 1)]\n    dp[0][0] = 1\n    for i in range(n):\n        for j in range(int(log2(problems[i])) + 1):\n            dp[j][j] += 1\n            for k in range(j + 1, int(log2(problems[-1])) + 1):\n                dp[k][j] = max(dp[k][j], dp[k - 1][j] + 1)\n    return max(map(max, dp))\n\n\ndef main():\n    n = int(input())\n    problems = list(map(int, input().split()))\n    print(get_contest(problems))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\n\nimport sys\nfrom typing import List\nfrom math import log2\n\n\ndef get_contest(problems: List[int]):\n    n = len(problems)\n    # dp[i][j] = max number of problems in the contest with the maximum difficulty no more than 2^i and the minimum difficulty no less than 2^j\n    dp = [[0 for j in range(int(log2(problems[-1])) + 1)] for i in range(int(log2(problems[-1])) + 1)]\n    dp[0][0] = 1\n    for i in range(n):\n        for j in range(int(log2(problems[i])) + 1):\n            dp[j][j] += 1\n            for k in range(j + 1, int(log2(problems[-1])) + 1):\n                dp[k][j] = max(dp[k][j], dp[k - 1][j] + 1)\n    return max(map(max, dp))\n\n\ndef main():\n    n = int(input())\n    problems = list(map(int, input().split()))\n    print(get_contest(problems))\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650495762,
  "object": "edit"
}
2022-04-20 23:02:44.621783 fix syntax errors 3 ["\n\nfrom typing import List\nimport sys\n\nfrom math import log2\n\n\ndef get_contest(problems: List[int]):\n    n = len(problems)\n    # dp[i][j] = max number of problems in the contest with the maximum difficulty no more than 2^i and the minimum difficulty no less than 2^j\n    dp = [[0 for j in range(int(log2(problems[-1])) + 1)] for i in range(int(log2(problems[-1])) + 1)]\n    dp[0][0] = 1\n    for i in range(n):\n        for j in range(int(log2(problems[i])) + 1):\n            dp[j][j] += 1\n            for k in range(j + 1, int(log2(problems[-1])) + 1):\n                dp[k][j] = max(dp[k][j], dp[k - 1][j] + 1)\n    return max(map(max, dp))\n\n\n\ndef main():\n    n = int(input())\n    problems = list(map(int, input().split()))\n    print(get_contest(problems))\n\n\nif __name__ == '__main__':\n    main()\n", "\nimport sys\nfrom typing import List\nfrom math import log2\n\n\ndef get_contest(problems: List[int]):\n    n = len(problems)\n    # dp[i][j] = max number of problems in the contest with the maximum difficulty no more than 2^i and the minimum difficulty no less than 2^j\n    dp = [[0 for j in range(int(log2(problems[-1])) + 1)] for i in range(int(log2(problems[-1])) + 1)]\n    dp[0][0] = 1\n    for i in range(n):\n        for j in range(int(log2(problems[i])) + 1):\n            dp[j][j] += 1\n            for k in range(j + 1, int(log2(problems[-1])) + 1):\n                dp[k][j] = max(dp[k][j], dp[k - 1][j] + 1)\n    return max(map(max, dp))\n\n\ndef main():\n    n = int(input())\n    problems = list(map(int, input().split()))\n    print(get_contest(problems))\n\n\nif __name__ == '__main__':\n    main()\n", "\n\n\nimport sys\nfrom typing import List\nfrom math import log2\n\n\ndef get_contest(problems: List[int]):\n    n = len(problems)\n    # dp[i][j] = max number of problems in the contest with the maximum difficulty no more than 2^i and the minimum difficulty no less than 2^j\n    dp = [[0 for j in range(int(log2(problems[-1])) + 1)] for i in range(int(log2(problems[-1])) + 1)]\n    dp[0][0] = 1\n    for i in range(n):\n        for j in range(int(log2(problems[i])) + 1):\n            dp[j][j] += 1\n            for k in range(j + 1, int(log2(problems[-1])) + 1):\n                dp[k][j] = max(dp[k][j], dp[k - 1][j] + 1)\n    return max(map(max, dp))\n\n\ndef main():\n    n = int(input())\n    problems = list(map(int, input().split()))\n    print(get_contest(problems))\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-20 23:02:44.621828 size on output set 3
2022-04-20 23:02:44.621838 num operations 1
2022-04-20 23:02:44.621845 size on input set 1
2022-04-20 23:02:44.622004 using api key sunu
2022-04-20 23:03:07.433468 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#\n# n = int(input())\n# a = [int(x) for x in input().split()]\n#\n# contests = []\n#\n# for i in range(n):\n#     for j in range(i+1, n):\n#         if a[j] > a[i] * 2:\n#             break\n#         contests.append((a[i], a[j]))\n#\n# contests.sort()\n#\n# max_len = 0\n# max_contest = None\n#\n# for i in range(len(contests)):\n#     this_contest = [contests[i]]\n#     for j in range(i+1, len(contests)):\n#         if contests[j][0] > this_contest[-1][1] * 2:\n#             break\n#         this_contest.append(contests[j])\n#     if len(this_contest) > max_len:\n#         max_len = len(this_contest)\n#         max_contest = this_contest\n#\n# print(max_len)\n\n\n\ndef find_max_contest(contest_list):\n    max_len = 0\n    max_contest = None\n\n    for i in range(len(contest_list)):\n        this_contest = [contest_list[i]]\n        for j in range(i + 1, len(contest_list)):\n            if contest_list[j][0] > this_contest[-1][1] * 2:\n                break\n            this_contest.append(contest_list[j])\n        if len(this_contest) > max_len:\n            max_len = len(this_contest)\n            max_contest = this_contest\n\n    return max_contest\n\n\ndef find_contest(contest_list, i):\n    contest = [contest_list[i]]\n    for j in range(i + 1, len(contest_list)):\n        if contest_list[j][0] > contest[-1][1] * 2:\n            break\n        contest.append(contest_list[j])\n    return contest\n\n\ndef find_contest_recursive(contest_list, i):\n    if i == len(contest_list):\n        return []\n    this_contest = find_contest(contest_list, i)\n    next_contest = find_contest_recursive(contest_list, i + len(this_contest))\n    if len(this_contest) > len(next_contest):\n        return this_contest\n    else:\n        return next_contest\n\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n\n    contests = []\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[j] > a[i] * 2:\n                break\n            contests.append((a[i], a[j]))\n\n    contests.sort()\n\n    res = find_max_contest(contests)\n\n    print(len(res))\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\na = [int(x) for x in input().split()]\n\ncontests = []\n\nfor i in range(n):\n    for j in range(i+1, n):\n        if a[j] > a[i] * 2:\n            break\n        contests.append((a[i], a[j]))\n\ncontests.sort()\n\nmax_len = 0\nmax_contest = None\n\nfor i in range(len(contests)):\n    this_contest = [contests[i]]\n    for j in range(i+1, len(contests)):\n        if contests[j][0] > this_contest[-1][1] * 2:\n            break\n        this_contest.append(contests[j])\n    if len(this_contest) > max_len:\n        max_len = len(this_contest)\n        max_contest = this_contest\n\nprint(max_len)\n"
    },
    {
      "index": 2,
      "text": "\na = [0] * 5\nprint(a)\n"
    }
  ],
  "created": 1650495764,
  "object": "edit"
}
2022-04-20 23:03:07.433796 fix syntax errors 3 ["#\n# n = int(input())\n# a = [int(x) for x in input().split()]\n#\n# contests = []\n#\n# for i in range(n):\n#     for j in range(i+1, n):\n#         if a[j] > a[i] * 2:\n#             break\n#         contests.append((a[i], a[j]))\n#\n# contests.sort()\n#\n# max_len = 0\n# max_contest = None\n#\n# for i in range(len(contests)):\n#     this_contest = [contests[i]]\n#     for j in range(i+1, len(contests)):\n#         if contests[j][0] > this_contest[-1][1] * 2:\n#             break\n#         this_contest.append(contests[j])\n#     if len(this_contest) > max_len:\n#         max_len = len(this_contest)\n#         max_contest = this_contest\n#\n# print(max_len)\n\n\n\ndef find_max_contest(contest_list):\n    max_len = 0\n    max_contest = None\n\n    for i in range(len(contest_list)):\n        this_contest = [contest_list[i]]\n        for j in range(i + 1, len(contest_list)):\n            if contest_list[j][0] > this_contest[-1][1] * 2:\n                break\n            this_contest.append(contest_list[j])\n        if len(this_contest) > max_len:\n            max_len = len(this_contest)\n            max_contest = this_contest\n\n    return max_contest\n\n\ndef find_contest(contest_list, i):\n    contest = [contest_list[i]]\n    for j in range(i + 1, len(contest_list)):\n        if contest_list[j][0] > contest[-1][1] * 2:\n            break\n        contest.append(contest_list[j])\n    return contest\n\n\ndef find_contest_recursive(contest_list, i):\n    if i == len(contest_list):\n        return []\n    this_contest = find_contest(contest_list, i)\n    next_contest = find_contest_recursive(contest_list, i + len(this_contest))\n    if len(this_contest) > len(next_contest):\n        return this_contest\n    else:\n        return next_contest\n\n\ndef main():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n\n    contests = []\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[j] > a[i] * 2:\n                break\n            contests.append((a[i], a[j]))\n\n    contests.sort()\n\n    res = find_max_contest(contests)\n\n    print(len(res))\n\n\nif __name__ == '__main__':\n    main()\n", '\nn = int(input())\na = [int(x) for x in input().split()]\n\ncontests = []\n\nfor i in range(n):\n    for j in range(i+1, n):\n        if a[j] > a[i] * 2:\n            break\n        contests.append((a[i], a[j]))\n\ncontests.sort()\n\nmax_len = 0\nmax_contest = None\n\nfor i in range(len(contests)):\n    this_contest = [contests[i]]\n    for j in range(i+1, len(contests)):\n        if contests[j][0] > this_contest[-1][1] * 2:\n            break\n        this_contest.append(contests[j])\n    if len(this_contest) > max_len:\n        max_len = len(this_contest)\n        max_contest = this_contest\n\nprint(max_len)\n', '\na = [0] * 5\nprint(a)\n']
2022-04-20 23:03:07.433843 size on output set 3
