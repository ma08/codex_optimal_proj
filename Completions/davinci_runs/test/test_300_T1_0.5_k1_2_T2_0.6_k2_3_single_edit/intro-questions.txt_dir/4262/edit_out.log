2022-04-21 00:18:49.553306 num operations 1
2022-04-21 00:18:49.553316 size on input set 1
2022-04-21 00:18:49.553470 using api key kouti
2022-04-21 00:18:58.033665 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "def swap(p, q, N):\n    temp = p[N]\n    p[N] = q[N]\n    q[N] = temp\n\n\ndef main():\n    N = int(input())\n    P = list(map(int, input().split()))\n    Q = list(map(int, input().split()))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if P[i] > P[j]:\n                swap(P, Q, j)\n                count += 1\n            if Q[i] > Q[j]:\n                swap(P, Q, j)\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\ndef swap(p, q):\n    temp = p\n    p = q\n    q = temp\n    return p, q\n\n\ndef main():\n    N = int(input())\n    P = list(map(int, input().split()))\n    Q = list(map(int, input().split()))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if P[i] > P[j]:\n                P[i], P[j] = swap(P[i], P[j])\n                count += 1\n            if Q[i] > Q[j]:\n                Q[i], Q[j] = swap(Q[i], Q[j])\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\ndef main():\n    N = int(input())\n\n    def swap(p, q):\n        temp = p\n        p = q\n        q = temp\n        return p, q\n\n    P = list(map(int, input().split()))\n    Q = list(map(int, input().split()))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if P[i] > P[j]:\n                P[i], P[j] = swap(P[i], P[j])\n                count += 1\n            if Q[i] > Q[j]:\n                Q[i], Q[j] = swap(Q[i], Q[j])\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650500329,
  "object": "edit"
}
2022-04-21 00:18:58.033972 fix syntax errors 3 ["def swap(p, q, N):\n    temp = p[N]\n    p[N] = q[N]\n    q[N] = temp\n\n\ndef main():\n    N = int(input())\n    P = list(map(int, input().split()))\n    Q = list(map(int, input().split()))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if P[i] > P[j]:\n                swap(P, Q, j)\n                count += 1\n            if Q[i] > Q[j]:\n                swap(P, Q, j)\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef swap(p, q):\n    temp = p\n    p = q\n    q = temp\n    return p, q\n\n\ndef main():\n    N = int(input())\n    P = list(map(int, input().split()))\n    Q = list(map(int, input().split()))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if P[i] > P[j]:\n                P[i], P[j] = swap(P[i], P[j])\n                count += 1\n            if Q[i] > Q[j]:\n                Q[i], Q[j] = swap(Q[i], Q[j])\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    N = int(input())\n\n    def swap(p, q):\n        temp = p\n        p = q\n        q = temp\n        return p, q\n\n    P = list(map(int, input().split()))\n    Q = list(map(int, input().split()))\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if P[i] > P[j]:\n                P[i], P[j] = swap(P[i], P[j])\n                count += 1\n            if Q[i] > Q[j]:\n                Q[i], Q[j] = swap(Q[i], Q[j])\n                count += 1\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-21 00:18:58.034017 size on output set 3
2022-04-21 00:18:58.034032 num operations 1
2022-04-21 00:18:58.034038 size on input set 1
2022-04-21 00:18:58.034207 using api key sourya
2022-04-21 00:18:58.075449 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-21 00:18:59.577345 using api key kouti
2022-04-21 00:19:16.936458 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# My answer\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of size N\npermutations = []\nfor i in range(N):\n    permutations.append(i + 1)\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutation(n - 1, r - 1)\n        permutations[i], permutations[n - 1] = permutations[n - 1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == P:\n        P_order = i+1\n    if permutations[i] == Q:\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n"
    },
    {
      "index": 1,
      "text": "\n\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of size N\npermutations = []\nfor i in range(N):\n    permutations.append(i+1)\n\ndef permutation(n, r):\n    if r == 0:\n        list.append(permutations)\n    for i in range(n-1, -1, -1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == P:\n        P_order = i+1\n    if permutations[i] == Q:\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n# My answer\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of size N\npermutations = []\nfor i in range(N):\n    permutations.append(i+1)\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == P:\n        P_order = i+1\n    if permutations[i] == Q:\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n"
    },
    {
      "index": 2,
      "text": "\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of size N\npermutations = []\nfor i in range(N):\n    permutations.append(i+1)\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == P:\n        P_order = i+1\n    if permutations[i] == Q:\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n"
    }
  ],
  "created": 1650500339,
  "object": "edit"
}
2022-04-21 00:19:16.936685 fix syntax errors 3 ['\n\n# My answer\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of size N\npermutations = []\nfor i in range(N):\n    permutations.append(i + 1)\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutation(n - 1, r - 1)\n        permutations[i], permutations[n - 1] = permutations[n - 1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == P:\n        P_order = i+1\n    if permutations[i] == Q:\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n', '\n\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of size N\npermutations = []\nfor i in range(N):\n    permutations.append(i+1)\n\ndef permutation(n, r):\n    if r == 0:\n        list.append(permutations)\n    for i in range(n-1, -1, -1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == P:\n        P_order = i+1\n    if permutations[i] == Q:\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n# My answer\n\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of size N\npermutations = []\nfor i in range(N):\n    permutations.append(i+1)\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == P:\n        P_order = i+1\n    if permutations[i] == Q:\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n', '\nN = int(input())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\n\n# Making permutations of size N\npermutations = []\nfor i in range(N):\n    permutations.append(i+1)\n\ndef permutation(n, r):\n    if r == 0:\n        return\n    for i in range(n-1, -1, -1):\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n        permutation(n-1, r-1)\n        permutations[i], permutations[n-1] = permutations[n-1], permutations[i]\n\npermutation(N, N)\n\n# Counting the order of P and Q\nP_order = 0\nQ_order = 0\nfor i in range(len(permutations)):\n    if permutations[i] == P:\n        P_order = i+1\n    if permutations[i] == Q:\n        Q_order = i+1\n\nprint(abs(P_order-Q_order))\n']
2022-04-21 00:19:16.936896 size on output set 3
