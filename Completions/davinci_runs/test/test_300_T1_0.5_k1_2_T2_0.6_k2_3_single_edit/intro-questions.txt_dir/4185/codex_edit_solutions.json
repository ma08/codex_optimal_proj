["\ndef get_min_moves(matrix):\n    n = len(matrix)\n    m = len(matrix[0])\n\n    moves = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] != (i * m) + j + 1:\n                moves += 1\n    return moves\n\n\nif __name__ == \"__main__\":\n    n, m = list(map(int, input().split()))\n    matrix = []\n    for _ in range(n):\n        matrix.append([int(i) for i in input().split()])\n\n    print(get_min_moves(matrix))\n", "\ndef get_min_moves(matrix):\n    n = len(matrix)\n    m = len(matrix[0])\n\n    moves = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] != (i * m) + j + 1:\n                moves += 1\n    return moves\n\n\nif __name__ == \"__main__\":\n    n, m = list(map(int, input().split()))\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split()))\n\n    print(get_min_moves(matrix))\n", "\n\n\ndef get_min_moves(mat):\n    n = len(mat)\n    m = len(mat[0])\n\n    moves = 0\n    for i in range(n):\n        for j in range(m):\n            if mat[i][j] != (i * m) + j + 1:\n                moves += 1\n    return moves\n\n\nif __name__ == \"__main__\":\n    n, m = list(map(int, input().split()))\n    mat = []\n    for _ in range(n):\n        mat.append(list(map(int, input().split())))\n\n    print(get_min_moves(mat))\n"]