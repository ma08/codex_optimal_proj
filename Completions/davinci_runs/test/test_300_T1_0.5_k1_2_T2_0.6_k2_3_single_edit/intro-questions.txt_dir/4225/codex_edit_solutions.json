["\nA = int(input())\nB = int(input())\nC = int(input())\nS = input()\nprint(A + B + C, S)\n", "# coding: utf-8\n\n# A, B, C, K = map(int, input().split())\nA, B, C, K = 2, 1, 1, 9\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - (A + B)))\n", "\n\n# A, B, C, K = map(int, input().split())\nA, B, C, K = 2, 1, 1, 3\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n\n    print(A - (K - A - B))\n", "\n\nfrom operator import itemgetter\n\ndef get_max_possible_sum(cards):\n    cards.sort(key=itemgetter(1), reverse=True)\n    return sum(card[1] for card in cards[:K]) + 10 * (K - 1)\n\nA, B, C, K = map(int, input().split())\ncards = [('A', A), ('B', B), ('C', C)]\nprint(get_max_possible_sum(cards))\n", "\n\nA, B, C, K = map(int, input().split())\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K - A - B))\n", "from operator import itemgetter\n\ndef get_max_possible_sum(lst):\n    lst.sort(key=itemgetter(1), reverse=True)\n    return sum(lst[:K])\n\nA, B, C, K = map(int, input().split())\ncards = [A, B, C]\nprint(get_max_possible_sum(cards)[0])\n"]