2022-04-20 22:55:36.432233 num operations 1
2022-04-20 22:55:36.432270 size on input set 1
2022-04-20 22:55:36.432460 using api key gabby
2022-04-20 22:55:36.554190 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 22:55:38.056104 using api key gabby
2022-04-20 22:55:38.093119 in retry 5 3.0 <class 'Exception'>, Retrying in 3 seconds...
2022-04-20 22:55:41.096553 using api key sourya
2022-04-20 22:55:41.133274 in retry 4 6.0 <class 'Exception'>, Retrying in 6 seconds...
2022-04-20 22:55:47.139683 using api key derek
2022-04-20 22:55:47.176760 in retry 3 12.0 <class 'Exception'>, Retrying in 12 seconds...
2022-04-20 22:55:59.189178 using api key sourya
2022-04-20 22:55:59.226580 in retry 2 24.0 <class 'Exception'>, Retrying in 24 seconds...
2022-04-20 22:56:23.251003 using api key jaanu
2022-04-20 22:56:29.195548 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ninp = input()\nsub = input()\n\n# Initialize a 2d array of size len(inp) + 1 x len(sub) + 1\n# Each element represents the length of the longest subsequence of the sub\n# in a substring of inp\ndp = [[0 for _ in range(len(sub)+1)] for _ in range(len(inp)+1)]\n\nfor i in range(1, len(inp)+1):\n    for j in range(1, len(sub)+1):\n        if inp[i-1] == sub[j-1]:\n            dp[i][j] = dp[i-1][j-1] + 1\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\nprint(len(inp) - dp[-1][-1])\n"
    },
    {
      "index": 1,
      "text": "\n\ninp = input()\nsub = input()\n\ndp = [[0 for _ in range(len(sub)+1)] for _ in range(len(inp)+1)]\n\nfor i in range(1,len(inp)+1):\n  for j in range(1,len(sub)+1):\n    if inp[i-1] == sub[j-1]:\n      dp[i][j] = dp[i-1][j-1] + 1\n    else:\n      dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\nprint(len(inp) - dp[-1][-1])\n"
    },
    {
      "index": 2,
      "text": "\ninp = input()\nsub = input()\n\n# Initialize a 2d array of size len(inp) + 1 x len(sub) + 1\n# Each element represents the length of the longest subsequence of the sub\n# in a substring of inp\ndp = [[0 for _ in range(len(sub) + 1)] for _ in range(len(inp) + 1)]\n\nfor i in range(1, len(inp)+1):\n    for j in range(1, len(sub)+1):\n        if inp[i-1] == sub[j-1]:\n            dp[i][j] = dp[i-1][j-1] + 1\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\nprint(len(inp) - dp[-1][-1])\n"
    }
  ],
  "created": 1650495383,
  "object": "edit"
}
2022-04-20 22:56:29.195810 fix syntax errors 3 ['\ninp = input()\nsub = input()\n\n# Initialize a 2d array of size len(inp) + 1 x len(sub) + 1\n# Each element represents the length of the longest subsequence of the sub\n# in a substring of inp\ndp = [[0 for _ in range(len(sub)+1)] for _ in range(len(inp)+1)]\n\nfor i in range(1, len(inp)+1):\n    for j in range(1, len(sub)+1):\n        if inp[i-1] == sub[j-1]:\n            dp[i][j] = dp[i-1][j-1] + 1\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\nprint(len(inp) - dp[-1][-1])\n', '\n\ninp = input()\nsub = input()\n\ndp = [[0 for _ in range(len(sub)+1)] for _ in range(len(inp)+1)]\n\nfor i in range(1,len(inp)+1):\n  for j in range(1,len(sub)+1):\n    if inp[i-1] == sub[j-1]:\n      dp[i][j] = dp[i-1][j-1] + 1\n    else:\n      dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\nprint(len(inp) - dp[-1][-1])\n', '\ninp = input()\nsub = input()\n\n# Initialize a 2d array of size len(inp) + 1 x len(sub) + 1\n# Each element represents the length of the longest subsequence of the sub\n# in a substring of inp\ndp = [[0 for _ in range(len(sub) + 1)] for _ in range(len(inp) + 1)]\n\nfor i in range(1, len(inp)+1):\n    for j in range(1, len(sub)+1):\n        if inp[i-1] == sub[j-1]:\n            dp[i][j] = dp[i-1][j-1] + 1\n        else:\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\nprint(len(inp) - dp[-1][-1])\n']
2022-04-20 22:56:29.195844 size on output set 3
2022-04-20 22:56:29.195854 num operations 1
2022-04-20 22:56:29.195860 size on input set 1
2022-04-20 22:56:29.196015 using api key gabby
2022-04-20 22:56:29.233861 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 22:56:30.735726 using api key gabby
2022-04-20 22:56:30.773764 in retry 5 3.0 <class 'Exception'>, Retrying in 3 seconds...
2022-04-20 22:56:33.777190 using api key derek
2022-04-20 22:56:33.814138 in retry 4 6.0 <class 'Exception'>, Retrying in 6 seconds...
2022-04-20 22:56:39.820563 using api key jaanu
2022-04-20 22:56:49.073802 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    s = input()\n    t = input()\n    print(len(s) - get_lcs(s, t))\ndef get_lcs(s, t):\n    dp = [[0 for i in range(len(s)+1)] for j in range(len(t)+1)]\n    for i in range(1, len(t)+1):\n        for j in range(1, len(s)+1):\n            if t[i-1] == s[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[-1][-1]\nmain()\n"
    },
    {
      "index": 1,
      "text": "\nn = int(input())\narr = list(map(int, input().split()))\n\ns = input()\ntotal = 0\nfor i in range(1, n):\n    if arr[i] < arr[i-1]:\n        total += arr[i-1] - arr[i]\n        arr[i] = arr[i-1]\nprint(total)\n"
    },
    {
      "index": 2,
      "text": "\n\ns = raw_input()\nt = raw_input()\n\ndef get_lcs(s,t):\n    # Create a DP matrix\n    dp = [[0 for i in range(len(s)+1)] for j in range(len(t)+1)]\n    \n    # Populate the matrix\n    for i in range(1, len(t)+1):\n        for j in range(1, len(s)+1):\n            if t[i-1] == s[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[-1][-1]\n\nprint(len(s) - get_lcs(s,t))\n"
    }
  ],
  "created": 1650495399,
  "object": "edit"
}
2022-04-20 22:56:49.074077 fix syntax errors 3 ['\ndef main():\n    s = input()\n    t = input()\n    print(len(s) - get_lcs(s, t))\ndef get_lcs(s, t):\n    dp = [[0 for i in range(len(s)+1)] for j in range(len(t)+1)]\n    for i in range(1, len(t)+1):\n        for j in range(1, len(s)+1):\n            if t[i-1] == s[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[-1][-1]\nmain()\n', '\nn = int(input())\narr = list(map(int, input().split()))\n\ns = input()\ntotal = 0\nfor i in range(1, n):\n    if arr[i] < arr[i-1]:\n        total += arr[i-1] - arr[i]\n        arr[i] = arr[i-1]\nprint(total)\n', '\n\ns = raw_input()\nt = raw_input()\n\ndef get_lcs(s,t):\n    # Create a DP matrix\n    dp = [[0 for i in range(len(s)+1)] for j in range(len(t)+1)]\n    \n    # Populate the matrix\n    for i in range(1, len(t)+1):\n        for j in range(1, len(s)+1):\n            if t[i-1] == s[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[-1][-1]\n\nprint(len(s) - get_lcs(s,t))\n']
2022-04-20 22:56:49.074112 size on output set 3
