2022-04-20 23:56:30.643750 num operations 1
2022-04-20 23:56:30.643760 size on input set 1
2022-04-20 23:56:30.643905 using api key jaanu
2022-04-20 23:56:44.267430 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nfrom math import sqrt\nfrom itertools import permutations\n\n\ndef dist(p1, p2):\n\n    return sqrt((p1[0]-p2[0])**2 + (p1[1] - p2[1])**2)\n\nN = int(input())\npoints = []\nfor _ in range(N):\n    points.append(tuple(map(int, input().split())))\n\npaths = permutations(points)\n\ntotal_dist = 0\nfor path in paths:\n    dist_in_path = 0\n    for i in range(N - 1):\n        dist_in_path += dist(path[i], path[i + 1])\n    total_dist += dist_in_path\n\nprint(total_dist / N)\n"
    },
    {
      "index": 1,
      "text": "\n\ndef f(n):\n\n    if n == 0:\n        return 0\n    else:\n        return f(n-1) + n**2\n\nprint(f(10))\n"
    },
    {
      "index": 2,
      "text": "\nfrom math import sqrt\nfrom itertools import permutations\ndef dist(p1,p2):\n    return sqrt((p1[0]-p2[0])**2 + (p1[1] - p2[1])**2)\n\nN = int(input())\npoints = []\nfor _ in range(N):\n    points.append(tuple(map(int,input().split())))\n\npaths = permutations(points)\n\ntotal_dist = 0\nfor path in paths:\n    dist_in_path = 0\n    for i in range(N-1):\n        dist_in_path += dist(path[i],path[i+1])\n    total_dist += dist_in_path\n\nprint(total_dist/N)\n"
    }
  ],
  "created": 1650498990,
  "object": "edit"
}
2022-04-20 23:56:44.267695 fix syntax errors 3 ['\nfrom math import sqrt\nfrom itertools import permutations\n\n\ndef dist(p1, p2):\n\n    return sqrt((p1[0]-p2[0])**2 + (p1[1] - p2[1])**2)\n\nN = int(input())\npoints = []\nfor _ in range(N):\n    points.append(tuple(map(int, input().split())))\n\npaths = permutations(points)\n\ntotal_dist = 0\nfor path in paths:\n    dist_in_path = 0\n    for i in range(N - 1):\n        dist_in_path += dist(path[i], path[i + 1])\n    total_dist += dist_in_path\n\nprint(total_dist / N)\n', '\n\ndef f(n):\n\n    if n == 0:\n        return 0\n    else:\n        return f(n-1) + n**2\n\nprint(f(10))\n', '\nfrom math import sqrt\nfrom itertools import permutations\ndef dist(p1,p2):\n    return sqrt((p1[0]-p2[0])**2 + (p1[1] - p2[1])**2)\n\nN = int(input())\npoints = []\nfor _ in range(N):\n    points.append(tuple(map(int,input().split())))\n\npaths = permutations(points)\n\ntotal_dist = 0\nfor path in paths:\n    dist_in_path = 0\n    for i in range(N-1):\n        dist_in_path += dist(path[i],path[i+1])\n    total_dist += dist_in_path\n\nprint(total_dist/N)\n']
2022-04-20 23:56:44.267728 size on output set 3
2022-04-20 23:56:44.267740 num operations 1
2022-04-20 23:56:44.267746 size on input set 1
2022-04-20 23:56:44.267906 using api key gabby
2022-04-20 23:56:44.305476 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 23:56:45.807397 using api key gabby
2022-04-20 23:56:45.844853 in retry 5 3.0 <class 'Exception'>, Retrying in 3 seconds...
2022-04-20 23:56:48.848242 using api key sourya
2022-04-20 23:56:48.885179 in retry 4 6.0 <class 'Exception'>, Retrying in 6 seconds...
2022-04-20 23:56:54.891593 using api key sunu
2022-04-20 23:57:13.212001 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\nimport math\n\nN = int(input())\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u3092\u6c42\u3081\u308b\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u306e\u6570\u3060\u3051\u30eb\u30fc\u30d7\ntotal_dist = 0\nfor p in permutation:\n    # \u90fd\u5e020\u304b\u3089\u7d4c\u8def\u306e\u958b\u59cb\n    dist = 0\n    prev = 0\n    for i in p:\n        # \u524d\u306e\u90fd\u5e02\u307e\u3067\u306e\u8ddd\u96e2\u3092\u8db3\u3059\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # \u90fd\u5e020\u306b\u623b\u308b\u8ddd\u96e2\u3092\u8db3\u3059\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# \u5e73\u5747\u3092\u6c42\u3081\u308b\nprint(total_dist / len(permutation))\n\nimport math\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u3092\u6c42\u3081\u308b\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u306e\u6570\u3060\u3051\u30eb\u30fc\u30d7\ntotal_dist = 0\nfor p in permutation:\n    # \u90fd\u5e020\u304b\u3089\u7d4c\u8def\u306e\u958b\u59cb\n    dist = 0\n    prev = 0\n    for i in p:\n        # \u524d\u306e\u90fd\u5e02\u307e\u3067\u306e\u8ddd\u96e2\u3092\u8db3\u3059\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # \u90fd\u5e020\u306b\u623b\u308b\u8ddd\u96e2\u3092\u8db3\u3059\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# \u5e73\u5747\u3092\u6c42\u3081\u308b\nprint(total_dist / len(permutation))\n"
    },
    {
      "index": 1,
      "text": "\n\n# coding: utf-8\n\nimport math\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u3092\u6c42\u3081\u308b\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u306e\u6570\u3060\u3051\u30eb\u30fc\u30d7\ntotal_dist = 0\nfor p in permutation:\n    # \u90fd\u5e020\u304b\u3089\u7d4c\u8def\u306e\u958b\u59cb\n    dist = 0\n    prev = 0\n    for i in p:\n        # \u524d\u306e\u90fd\u5e02\u307e\u3067\u306e\u8ddd\u96e2\u3092\u8db3\u3059\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # \u90fd\u5e020\u306b\u623b\u308b\u8ddd\u96e2\u3092\u8db3\u3059\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# \u5e73\u5747\u3092\u6c42\u3081\u308b\nprint(total_dist / len(permutation))\n"
    },
    {
      "index": 2,
      "text": "\nimport math\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u3092\u6c42\u3081\u308b\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# \u5168\u7d44\u307f\u5408\u308f\u305b\u306e\u6570\u3060\u3051\u30eb\u30fc\u30d7\ntotal_dist = 0\nfor p in permutation:\n    # \u90fd\u5e020\u304b\u3089\u7d4c\u8def\u306e\u958b\u59cb\n    dist = 0\n    prev = 0\n    for i in p:\n        # \u524d\u306e\u90fd\u5e02\u307e\u3067\u306e\u8ddd\u96e2\u3092\u8db3\u3059\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # \u90fd\u5e020\u306b\u623b\u308b\u8ddd\u96e2\u3092\u8db3\u3059\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# \u5e73\u5747\u3092\u6c42\u3081\u308b\nprint(total_dist / len(permutation))\n"
    }
  ],
  "created": 1650499014,
  "object": "edit"
}
2022-04-20 23:57:13.212413 fix syntax errors 3 ['\nimport math\n\nN = int(input())\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n\n# 全組み合わせを求める\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# 全組み合わせの数だけループ\ntotal_dist = 0\nfor p in permutation:\n    # 都市0から経路の開始\n    dist = 0\n    prev = 0\n    for i in p:\n        # 前の都市までの距離を足す\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # 都市0に戻る距離を足す\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# 平均を求める\nprint(total_dist / len(permutation))\n\nimport math\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n# 全組み合わせを求める\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# 全組み合わせの数だけループ\ntotal_dist = 0\nfor p in permutation:\n    # 都市0から経路の開始\n    dist = 0\n    prev = 0\n    for i in p:\n        # 前の都市までの距離を足す\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # 都市0に戻る距離を足す\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# 平均を求める\nprint(total_dist / len(permutation))\n', '\n\n# coding: utf-8\n\nimport math\n\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n# 全組み合わせを求める\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# 全組み合わせの数だけループ\ntotal_dist = 0\nfor p in permutation:\n    # 都市0から経路の開始\n    dist = 0\n    prev = 0\n    for i in p:\n        # 前の都市までの距離を足す\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # 都市0に戻る距離を足す\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# 平均を求める\nprint(total_dist / len(permutation))\n', '\nimport math\nN = int(input())\n\ntowns = []\nfor i in range(N):\n    x, y = map(int, input().split())\n    towns.append((x, y))\n\n# 全組み合わせを求める\ndef calc_permutation(lst):\n    if len(lst) == 1:\n        return [lst]\n    permutation = []\n    for i in range(len(lst)):\n        tmp_lst = lst[:]\n        tmp_lst.pop(i)\n        for e in calc_permutation(tmp_lst):\n            permutation.append([lst[i]] + e)\n    return permutation\n\npermutation = calc_permutation(list(range(1, N)))\n\n# 全組み合わせの数だけループ\ntotal_dist = 0\nfor p in permutation:\n    # 都市0から経路の開始\n    dist = 0\n    prev = 0\n    for i in p:\n        # 前の都市までの距離を足す\n        dist += math.sqrt((towns[prev][0] - towns[i][0])**2 + (towns[prev][1] - towns[i][1])**2)\n        prev = i\n    # 都市0に戻る距離を足す\n    dist += math.sqrt((towns[prev][0] - towns[0][0])**2 + (towns[prev][1] - towns[0][1])**2)\n    total_dist += dist\n\n# 平均を求める\nprint(total_dist / len(permutation))\n']
2022-04-20 23:57:13.212492 size on output set 3
