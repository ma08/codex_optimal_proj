2022-04-21 00:12:25.133098 num operations 1
2022-04-21 00:12:25.133110 size on input set 1
2022-04-21 00:12:25.133255 using api key sourya
2022-04-21 00:12:25.302648 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-21 00:12:26.804557 using api key gabby
2022-04-21 00:12:26.841821 in retry 5 3.0 <class 'Exception'>, Retrying in 3 seconds...
2022-04-21 00:12:29.845265 using api key gabby
2022-04-21 00:12:29.882428 in retry 4 6.0 <class 'Exception'>, Retrying in 6 seconds...
2022-04-21 00:12:35.888857 using api key sourya
2022-04-21 00:12:35.925799 in retry 3 12.0 <class 'Exception'>, Retrying in 12 seconds...
2022-04-21 00:12:47.938198 using api key jaanu
2022-04-21 00:13:10.011820 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\n# SOLUTION\n\n# The solution is getting the most frequent element in the array and then going through the array to find the most frequent element in the subarray.\n# We will use a hashmap to store the frequency of the elements and then use a sliding window technique to find the maximum frequency element in the subarray.\n\n# Get the input\nn,k = map(int, input().split())\ns = list(map(int, input().split()))\n\nimport collections\n\n# Get the input\nn,k = map(int, sys.stdin.readline().split())\ns = list(map(int, sys.stdin.readline().split()))\n\n# Make a hashmap to store the frequency of the elements\nfreq = collections.defaultdict(int)\n\n# Store the frequency of the elements\nfor i in s:\n    freq[i] += 1\n\n# Get the most frequent element in the array\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Get the first k elements of the array\nt = s[:k]\n\n# Initialize the result\nresult = []\n\n# Initialize the maximum frequency\nmax_freq = 0\n\n# Initialize the maximum frequency element\nmax_freq_elem = 0\n\n# Initialize the window\nwindow_start = 0\n\n# Get the frequency of the first k elements\nfor i in t:\n    freq[i] -= 1\n\n# Get the maximum frequency\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Store the maximum frequency element in the result\nresult.append(max_freq_elem)\n\n# Iterate through the array\nfor window_end in range(k,n):\n    # Remove the element from the window\n    freq[s[window_start]] += 1\n    # Increment the window start\n    window_start += 1\n    # Subtract the frequency of the element in the window\n    freq[s[window_end]] -= 1\n    # Get the maximum frequency\n    max_freq = max(freq.values())\n    # Get the element with the maximum frequency\n    max_freq_elem = [k for k,v in freq.items() if v==max_freq]\n    # Get the first element that has the maximum frequency\n    max_freq_elem = max_freq_elem[0]\n    # Store the maximum frequency element in the result\n    result.append(max_freq_elem)\n\n# Print the result\nprint(*result)\n"
    },
    {
      "index": 1,
      "text": "\n\n# SOLUTION\n\n# The solution is getting the most frequent element in the array and then going through the array to find the most frequent element in the subarray.\n# We will use a hashmap to store the frequency of the elements and then use a sliding window technique to find the maximum frequency element in the subarray.\n\nimport sys\nimport collections\n\n# Get the input\nn,k = map(int, sys.stdin.readline().split())\ns = list(map(int, sys.stdin.readline().split()))\n\n# Make a hashmap to store the frequency of the elements\nfreq = collections.defaultdict(int)\n\n# Store the frequency of the elements\nfor i in s:\n    freq[i] += 1\n\n# Get the most frequent element in the array\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Get the first k elements of the array\nt = s[:k]\n\n# Initialize the result\nresult = []\n\n# Initialize the maximum frequency\nmax_freq = 0\n\n# Initialize the maximum frequency element\nmax_freq_elem = 0\n\n# Initialize the window\nwindow_start = 0\n\n# Get the frequency of the first k elements\nfor i in t:\n    freq[i] -= 1\n\n# Get the maximum frequency\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Store the maximum frequency element in the result\nresult.append(max_freq_elem)\n\n# Iterate through the array\nfor window_end in range(k,n):\n    # Remove the element from the window\n    freq[s[window_start]] += 1\n    # Increment the window start\n    window_start += 1\n    # Subtract the frequency of the element in the window\n    freq[s[window_end]] -= 1\n    # Get the maximum frequency\n    max_freq = max(freq.values())\n    # Get the element with the maximum frequency\n    max_freq_elem = [k for k,v in freq.items() if v==max_freq]\n    # Get the first element that has the maximum frequency\n    max_freq_elem = max_freq_elem[0]\n    # Store the maximum frequency element in the result\n    result.append(max_freq_elem)\n\n# Print the result\nprint(*result)\n"
    },
    {
      "index": 2,
      "text": "\n\n# SOLUTION\n\n# The solution is getting the most frequent element in the array\n# and then going through the array to find the most frequent element in the subarray\n# We will use a hashmap to store the frequency of the elements and then use a\n# sliding window technique to find the maximum frequency element in the subarray\n\nimport sys\nimport collections\n\n# Get the input\nn,k = map(int, sys.stdin.readline().split())\ns = list(map(int, sys.stdin.readline().split()))\n\n# Make a hashmap to store the frequency of the elements\nfreq = collections.defaultdict(int)\n\n# Store the frequency of the elements\nfor i in s:\n    freq[i] += 1\n\n# Get the most frequent element in the array\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k, v in freq.items() if v == max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Get the first k elements of the array\nt = s[:k]\n\n# Initialize the result\nresult = []\n\n# Initialize the maximum frequency\nmax_freq = 0\n\n# Initialize the maximum frequency element\nmax_freq_elem = 0\n\n# Initialize the window\nwindow_start = 0\n\n# Get the frequency of the first k elements\nfor i in t:\n    freq[i] -= 1\n\n# Get the maximum frequency\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Store the maximum frequency element in the result\nresult.append(max_freq_elem)\n\n# Iterate through the array\nfor window_end in range(k,n):\n    # Remove the element from the window\n    freq[s[window_start]] += 1\n    # Increment the window start\n    window_start += 1\n    # Subtract the frequency of the element in the window\n    freq[s[window_end]] -= 1\n    # Get the maximum frequency\n    max_freq = max(freq.values())\n    # Get the element with the maximum frequency\n    max_freq_elem = [k for k,v in freq.items() if v==max_freq]\n    # Get the first element that has the maximum frequency\n    max_freq_elem = max_freq_elem[0]\n    # Store the maximum frequency element in the result\n    result.append(max_freq_elem)\n\n# Print the result\nprint(*result)\n"
    }
  ],
  "created": 1650499967,
  "object": "edit"
}
2022-04-21 00:13:10.012115 fix syntax errors 3 ['\n\n# SOLUTION\n\n# The solution is getting the most frequent element in the array and then going through the array to find the most frequent element in the subarray.\n# We will use a hashmap to store the frequency of the elements and then use a sliding window technique to find the maximum frequency element in the subarray.\n\n# Get the input\nn,k = map(int, input().split())\ns = list(map(int, input().split()))\n\nimport collections\n\n# Get the input\nn,k = map(int, sys.stdin.readline().split())\ns = list(map(int, sys.stdin.readline().split()))\n\n# Make a hashmap to store the frequency of the elements\nfreq = collections.defaultdict(int)\n\n# Store the frequency of the elements\nfor i in s:\n    freq[i] += 1\n\n# Get the most frequent element in the array\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Get the first k elements of the array\nt = s[:k]\n\n# Initialize the result\nresult = []\n\n# Initialize the maximum frequency\nmax_freq = 0\n\n# Initialize the maximum frequency element\nmax_freq_elem = 0\n\n# Initialize the window\nwindow_start = 0\n\n# Get the frequency of the first k elements\nfor i in t:\n    freq[i] -= 1\n\n# Get the maximum frequency\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Store the maximum frequency element in the result\nresult.append(max_freq_elem)\n\n# Iterate through the array\nfor window_end in range(k,n):\n    # Remove the element from the window\n    freq[s[window_start]] += 1\n    # Increment the window start\n    window_start += 1\n    # Subtract the frequency of the element in the window\n    freq[s[window_end]] -= 1\n    # Get the maximum frequency\n    max_freq = max(freq.values())\n    # Get the element with the maximum frequency\n    max_freq_elem = [k for k,v in freq.items() if v==max_freq]\n    # Get the first element that has the maximum frequency\n    max_freq_elem = max_freq_elem[0]\n    # Store the maximum frequency element in the result\n    result.append(max_freq_elem)\n\n# Print the result\nprint(*result)\n', '\n\n# SOLUTION\n\n# The solution is getting the most frequent element in the array and then going through the array to find the most frequent element in the subarray.\n# We will use a hashmap to store the frequency of the elements and then use a sliding window technique to find the maximum frequency element in the subarray.\n\nimport sys\nimport collections\n\n# Get the input\nn,k = map(int, sys.stdin.readline().split())\ns = list(map(int, sys.stdin.readline().split()))\n\n# Make a hashmap to store the frequency of the elements\nfreq = collections.defaultdict(int)\n\n# Store the frequency of the elements\nfor i in s:\n    freq[i] += 1\n\n# Get the most frequent element in the array\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Get the first k elements of the array\nt = s[:k]\n\n# Initialize the result\nresult = []\n\n# Initialize the maximum frequency\nmax_freq = 0\n\n# Initialize the maximum frequency element\nmax_freq_elem = 0\n\n# Initialize the window\nwindow_start = 0\n\n# Get the frequency of the first k elements\nfor i in t:\n    freq[i] -= 1\n\n# Get the maximum frequency\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Store the maximum frequency element in the result\nresult.append(max_freq_elem)\n\n# Iterate through the array\nfor window_end in range(k,n):\n    # Remove the element from the window\n    freq[s[window_start]] += 1\n    # Increment the window start\n    window_start += 1\n    # Subtract the frequency of the element in the window\n    freq[s[window_end]] -= 1\n    # Get the maximum frequency\n    max_freq = max(freq.values())\n    # Get the element with the maximum frequency\n    max_freq_elem = [k for k,v in freq.items() if v==max_freq]\n    # Get the first element that has the maximum frequency\n    max_freq_elem = max_freq_elem[0]\n    # Store the maximum frequency element in the result\n    result.append(max_freq_elem)\n\n# Print the result\nprint(*result)\n', '\n\n# SOLUTION\n\n# The solution is getting the most frequent element in the array\n# and then going through the array to find the most frequent element in the subarray\n# We will use a hashmap to store the frequency of the elements and then use a\n# sliding window technique to find the maximum frequency element in the subarray\n\nimport sys\nimport collections\n\n# Get the input\nn,k = map(int, sys.stdin.readline().split())\ns = list(map(int, sys.stdin.readline().split()))\n\n# Make a hashmap to store the frequency of the elements\nfreq = collections.defaultdict(int)\n\n# Store the frequency of the elements\nfor i in s:\n    freq[i] += 1\n\n# Get the most frequent element in the array\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k, v in freq.items() if v == max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Get the first k elements of the array\nt = s[:k]\n\n# Initialize the result\nresult = []\n\n# Initialize the maximum frequency\nmax_freq = 0\n\n# Initialize the maximum frequency element\nmax_freq_elem = 0\n\n# Initialize the window\nwindow_start = 0\n\n# Get the frequency of the first k elements\nfor i in t:\n    freq[i] -= 1\n\n# Get the maximum frequency\nmax_freq = max(freq.values())\n\n# Get the element with the maximum frequency\nmax_freq_elem = [k for k,v in freq.items() if v==max_freq]\n\n# Get the first element that has the maximum frequency\nmax_freq_elem = max_freq_elem[0]\n\n# Store the maximum frequency element in the result\nresult.append(max_freq_elem)\n\n# Iterate through the array\nfor window_end in range(k,n):\n    # Remove the element from the window\n    freq[s[window_start]] += 1\n    # Increment the window start\n    window_start += 1\n    # Subtract the frequency of the element in the window\n    freq[s[window_end]] -= 1\n    # Get the maximum frequency\n    max_freq = max(freq.values())\n    # Get the element with the maximum frequency\n    max_freq_elem = [k for k,v in freq.items() if v==max_freq]\n    # Get the first element that has the maximum frequency\n    max_freq_elem = max_freq_elem[0]\n    # Store the maximum frequency element in the result\n    result.append(max_freq_elem)\n\n# Print the result\nprint(*result)\n']
2022-04-21 00:13:10.012310 size on output set 3
2022-04-21 00:13:10.012324 num operations 1
2022-04-21 00:13:10.012331 size on input set 1
2022-04-21 00:13:10.012500 using api key jaanu
2022-04-21 00:13:24.872188 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "#Solution\n#!/usr/bin/env python3\n\nimport sys\nimport numpy as np\nn, k = map(int, input().split())\ns = np.array(list(map(int, input().split())))\ns_unique, s_counts = np.unique(s, return_counts=True)\ns_indices = np.argsort(-s_counts)\nt = s_unique[s_indices[:k]]\nprint(*t)\n"
    },
    {
      "index": 1,
      "text": "\n\n#Solution\n\n#!/bin/python3\n\nimport numpy as np\n\nn, m = map(int, input().split())\na = np.array([input().split() for _ in range(n)], int)\n\ns_unique, s_counts = np.unique(s, return_counts=True)\ns_indices = np.argsort(-s_counts)\n\nt = s_unique[s_indices[:k]]\nprint(*t)\n"
    },
    {
      "index": 2,
      "text": "\n#!/bin/python3\nnk = input().split()\nn = int(nk[0])\nk = int(nk[1])\na = list(map(int, input().rstrip().split()))\ncount = []\nunique = []\nfor i in set(a):\n    count.append(a.count(i))\n    unique.append(i)\nzipped_pairs = zip(count, unique)\nz = [x for _, x in sorted(zipped_pairs)]\nfor i in range(k):\n    print(z[i])\n"
    }
  ],
  "created": 1650499990,
  "object": "edit"
}
2022-04-21 00:13:24.872455 fix syntax errors 3 ['#Solution\n#!/usr/bin/env python3\n\nimport sys\nimport numpy as np\nn, k = map(int, input().split())\ns = np.array(list(map(int, input().split())))\ns_unique, s_counts = np.unique(s, return_counts=True)\ns_indices = np.argsort(-s_counts)\nt = s_unique[s_indices[:k]]\nprint(*t)\n', '\n\n#Solution\n\n#!/bin/python3\n\nimport numpy as np\n\nn, m = map(int, input().split())\na = np.array([input().split() for _ in range(n)], int)\n\ns_unique, s_counts = np.unique(s, return_counts=True)\ns_indices = np.argsort(-s_counts)\n\nt = s_unique[s_indices[:k]]\nprint(*t)\n', '\n#!/bin/python3\nnk = input().split()\nn = int(nk[0])\nk = int(nk[1])\na = list(map(int, input().rstrip().split()))\ncount = []\nunique = []\nfor i in set(a):\n    count.append(a.count(i))\n    unique.append(i)\nzipped_pairs = zip(count, unique)\nz = [x for _, x in sorted(zipped_pairs)]\nfor i in range(k):\n    print(z[i])\n']
2022-04-21 00:13:24.872490 size on output set 3
