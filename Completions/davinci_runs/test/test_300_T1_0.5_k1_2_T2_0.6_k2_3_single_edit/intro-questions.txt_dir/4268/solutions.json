["import math\nn , d = list(map(int, input().split()))\n\nx = [list(map(int, input().split())) for _ in range(n)]\ncnt = 0\nsum_tmp = 0\n\nfor i in range(n):\n    for j in range(i+1, n):\n        for h in range(d):\n            sum_tmp += (x[i][h] - x[j][h]) ** 2\n        if math.sqrt(sum_tmp).is_integer():\n            cnt += 1\n        sum_tmp = 0\n\nprint(cnt)\n", "import math\n\nN, D = map(int, input().split())\n\nX = [list(map(int, input().split())) for _ in range(N)]\n\nresult = 0\nfor i in range(N):\n    for j in range(N):\n        if i < j:\n            distance = 0\n            for k in range(D):\n                distance += (X[i][k] - X[j][k]) ** 2\n            distance = math.sqrt(distance)\n            if distance == int(distance):\n                result += 1\n\nprint(result)", "import math\nimport itertools\nN, D = map(int, input().split())\nX = [0]*N\nfor i in range(N):\n    X[i] = list(map(int, input().split()))\n\ncnt = 0\nfor i in list(itertools.combinations(X, 2)):\n    ans = 0\n    for j in range(D):\n        ans += abs((i[0][j] - i[1][j])**2)\n    if math.sqrt(ans).is_integer():\n        cnt += 1\nprint(cnt)", "import math\nN,D=list(map(int,input().split()))\nsq=[list(map(int,input().split())) for i in range(N)]\nans=0\nfor j in range(N-1):\n    for k in range(j+1,N):\n        s=0\n        for l in range(D):\n            s+=(sq[j][l]-sq[k][l])**2\n        if math.sqrt(s)%1==0.0:\n            ans+=1\nprint(ans)\n", "import math\n\n\ndef calc_distance(Y, Z):\n    temp = 0\n    for y, z in zip(Y, Z):\n        temp += (y-z)**2\n    return temp\n\n\ndef is_integer(num):\n    for k in range(1, num+1):\n        if k*k == num:\n            return True\n    else:\n        return False\n\n\nN, D = list(map(int, input().split()))\nX = [list(map(int, input().split())) for _ in range(N)]\ncnt = 0\nfor i in range(len(X)-1):\n    for j in range(i, len(X)):\n        distance = calc_distance(X[i], X[j])\n        if is_integer(distance):\n            cnt += 1\nprint(cnt)\n", "import math\nn,d=list(map(int,input().split()))\n\nx=[]\nfor i in range(n):\n  x.append(list(map(int,input().split())))\n\ncnt=0\n\nfor i in range(n-1):\n  for j in range(i+1,n):\n    s=0\n    for k in range(d):\n      s+=(x[i][k]-x[j][k])**2\n    if int(math.sqrt(s))**2==s:\n      cnt+=1\n      \nprint(cnt)\n", "n,d=list(map(int,input().split()))\nx=[]\nfor i in range(n):\n    p=list(map(int,input().split()))\n    x.append(p)\nans=0\nfor i in range(len(x)-1):\n    for j in range(i+1,len(x)):\n        dis=0\n        for k in range(d):\n            dis+=(x[i][k]-x[j][k])**2\n        if int(dis**(1/2))==dis**(1/2):\n            ans+=1\nprint(ans)\n", "import math\nfrom scipy.special import comb\nN,D=map(int,input().split())\nList=[]\n\nfor i in range(N):\n    x=list(map(int,input().split()))\n    List.append(x)\n\nans=0\nfor i in range(N-1):\n    y=List[i]\n\n    for j in range(i+1,N):\n        z=List[j]\n        sum=0\n        for j in range(D):\n            sum+=abs(y[j]-z[j])**2\n            s=math.sqrt(sum)\n            \n        if s.is_integer():\n            ans+=1\n                \nprint(ans)", "def main():\n    n, d = map(int, input().split())\n    ps = [[*map(int, input().split())] for _ in range(n)]\n    square = [i**2 for i in range(1, 127)]\n    cnt = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if sum([(ps[i][k] - ps[j][k]) ** 2 for k in range(d)]) in square:\n                cnt += 1\n    print(cnt)\n\ndef __starting_point():\n    main()\n__starting_point()", "#\n# abc133 b\n#\nimport sys\nfrom io import StringIO\nimport unittest\nfrom math import sqrt\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"3 2\n1 2\n5 5\n-2 8\"\"\"\n        output = \"\"\"1\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"3 4\n-3 7 8 2\n-12 1 10 2\n-2 8 9 3\"\"\"\n        output = \"\"\"2\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_3(self):\n        input = \"\"\"5 1\n1\n2\n3\n4\n5\"\"\"\n        output = \"\"\"10\"\"\"\n        self.assertIO(input, output)\n\n\ndef resolve():\n    N, D = list(map(int, input().split()))\n    X = [list(map(int, input().split())) for _ in range(N)]\n\n    ans = 0\n    for i, x1 in enumerate(X):\n        for x2 in X[i+1:]:\n            tmp = 0\n            for j in range(D):\n                tmp += (x2[j]-x1[j])**2\n            tmp = sqrt(tmp)\n            if tmp.is_integer() == True:\n                ans += 1\n\n    print(ans)\n\n\ndef __starting_point():\n    # unittest.main()\n    resolve()\n\n__starting_point()", "import math\n\n\ndef main():\n    n, d = list(map(int, input().split()))\n    Xs = [list(map(int, input().split())) for _ in range(n)]\n    ans = 0\n\n    for i, xi in enumerate(Xs):\n        for xj in Xs[i+1:]:\n            dis = 0\n            for di in range(d):\n                dis += (xi[di] - xj[di])**2\n\n            if math.sqrt(dis) % 1 == 0:\n                ans += 1\n\n    print(ans)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N,D = map(int,input().split())\nX = []\nfor i in range(N):\n    X.append(list(map(int,input().split())))\n\nans = 0\nfor i in range(N):\n    for j in range(i+1,N):\n        d = 0\n        for k in range(D):\n            d += (X[i][k] - X[j][k])**2\n        d = d**(1/2)\n        if int(d) == d:\n            ans +=1\n\nprint(ans)    ", "import math\nn,d = list(map(int,input().split()))\nli =[list(map(int,input().split())) for i in range(n)]\ncnt = 0\nsum = 0\n\nfor i in range(n-1):\n    for j in range(i+1,n):\n        sum = 0\n        for x in range(d):\n            sum += abs(li[i][x]-li[j][x])**2\n        \n        if math.sqrt(sum) % 1 == 0.0:\n            cnt += 1\n\nprint(cnt)\n", "from typing import List\nfrom math import sqrt\n\n\ndef distance(x1: List[int], x2: List[int]) -> float:\n    total = 0\n    for a, b in zip(x1, x2):\n        total += (a - b) ** 2\n    return sqrt(total)\n\n\nnd = list(map(int, input().split()))\nn, d = nd[0], nd[1]\nxs = [list(map(int, input().split())) for _ in range(n)]\nsize = len(xs)\nresult = 0\n\nfor i in range(size):\n    for j in range(i + 1, size):\n        if distance(xs[i], xs[j]).is_integer():\n            result += 1\n\nprint(result)\n", "import math\nn, d = list(map(int, input().split()))\n\nX = [[0]*d for _ in range(n)]\n\nfor i in range(n):\n    X[i] = list(map(int ,input().split()))\n\ncnt = 0\n\nfor i in range(n-1):\n    for j in range(i+1, n):\n        dist= 0\n        for k in range(d):\n            dist += (X[i][k]-X[j][k])**2\n        \n        if math.sqrt(dist) == int(math.sqrt(dist)):\n            cnt += 1\n        \nprint(cnt)\n", "import numpy as np\nN, D = map(int, input().split())\nX = [list(map(int, input().split())) for _ in range(N)]\ncnt = 0\nfor i in range(N):\n    for j in range(i+1, N):\n        if np.linalg.norm(np.array(X[i])-np.array(X[j])).is_integer():\n            cnt += 1\nprint(cnt)", "from itertools import combinations\n\nn,d = map(int,input().split())\nx = [list(map(int,input().split())) for _ in range(n)]\n\ncmb = combinations([i for i in range(n)],2)\ncnt = 0\nfor i,j in cmb:\n    dist = sum([(x[i][k] - x[j][k])**2 for k in range(d)])\n    for m in range(int(dist**0.5)+1):\n        if m**2 == dist:\n            cnt += 1\nprint(cnt)", "n,d=map(int,input().split())\npoint=[]\nfor _ in range(n):\n    point.append(list(map(int,input().split())))\nans=0\nfor i in range(n-1):\n    for l in range(i,n):\n        if i==l:\n            continue\n        dis=0\n        for f in range(d):\n            dis+=(point[i][f]-point[l][f])**2\n        dis=dis**(0.5)\n        #print(dis)\n        if dis.is_integer():\n            ans+=1\nprint(ans)", "n ,d = list(map(int, input().split()))\nt = []\nans = 0\n\nfor i in range(n):\n  c = list(map(int,input().split()))\n  t.append(c)\n  \nfor k in range(0, n-1):\n  for j in range(k+1, n):\n    sumsum = 0 \n    for l in range(d):\n      sumsum += (t[k][l]-t[j][l])**2\n    dis = sumsum**(1/2)\n    \n    if dis.is_integer() == True:\n        ans += 1\nprint(ans)  \n", "import math\n\nn, d = map(int, input().split())\nx = [list(map(int, input().split())) for i in range(n)]\ncnt = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        dis = 0\n        for k in range(d):\n            dis += (x[i][k]-x[j][k])**2\n        if math.sqrt(dis) % 1 == 0:\n            cnt += 1\nprint(cnt)", "n,d = map(int,input().split())\ndata = [input().split() for i in range(n)]\nans = 0\nfor i in range(n - 1):\n    for j in range(i+1 , n):\n        sum = 0\n        for k in range(d):\n            sum += (int(data[i][k]) - int(data[j][k])) **2\n        temp = sum ** 0.5\n        if  temp.is_integer() == True:\n            ans += 1\nprint(ans)", "N, D = map(int, input().split())\nX = [list(map(float, input().split())) for i in range(N)]\n\ncnt = 0\nfor i in range(N-1):\n  for j in range(N-i-1):\n    jj = j+i+1\n    dis = 0.0\n    for k in range(D):\n      dis += (X[i][k] - X[jj][k])**2\n    dis = dis**0.5\n    if dis.is_integer():\n      cnt += 1\n\nprint(cnt)", "import math\nn, d = list(map(int,input().split()))\nlst = []\nfor i in range(n):\n    x = list(map(int,input().split()))\n    lst.append(x)\ndef check (lst, a, b):\n    tmp = 0\n    for i in range(len(lst[a])):\n        tmp = tmp + (lst[a][i] - lst[b][i])**2\n    tmp = math.sqrt(tmp)\n    if (tmp//1 == tmp):\n        return (1)\n    else:\n        return (0)\nans = 0\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        ans = ans + check(lst, i, j)\nprint(ans)\n", "import math\nn,d=map(int,input().split())\nx=[list(map(int,input().split())) for i in range (n)]\nans=0\nfor i in range(n-1):\n    for j in range(i+1,n):\n        tmp=0\n        for k in range(d):\n            tmp+=(x[i][k]-x[j][k])**2\n        if math.sqrt(tmp)==int(math.sqrt(tmp)):\n            ans+=1\nprint(ans)", "import math\n\nN,D = list(map(int, input().split()))\n\nX = [[0] * D  for i in range(N)]\n\nfor i in range(N):\n    X[i] = list(map(int, input().split()))\n\ncount = 0\nfor i in range(N):\n    ran = list(range(i+1,N))\n    for j in ran:\n        dis = 0\n        for d in range(D):\n            dis += (X[i][d] - X[j][d]) *  (X[i][d] - X[j][d])\n        \n        dis = math.sqrt(dis)\n        if dis.is_integer() == True:\n            count += 1\n\nprint(count)\n", "n,d=map(int,input().split())\na=[list(map(int,input().split())) for i in range(n)]\nt=0\nfor i in range(n):\n  for j in range(i+1,n):\n    s=0\n    for b,c in zip(a[i],a[j]):\n      s+=(b-c)**2\n    if s**0.5==int(s**0.5):\n      t+=1\n\nprint(t)", "import math\n\nN, D = map(int, input().split())\nX = [list(map(int, input().split())) for _ in range(N)]\n\nans = 0\nfor i in range(N):\n  for j in range(i+1, N):\n    dis = 0\n    for d in range(D):\n      dis += (X[i][d] - X[j][d])**2\n    dis = math.sqrt(dis)\n    ans += dis.is_integer()\n\nprint(ans)", "import math\n\nN,D=map(int,input().split())\nDis=[]\nfor i in range(N):\n    A=list(map(int,input().split()))\n    Dis.append(A)\nans=0\nplus=0\nfor m in range(N-1):\n    for k in range(N-1):\n        for j in range(D):\n            B=Dis[m][j]-Dis[m+k+1][j]\n            B=B**2\n            plus+=B\n        plus=math.sqrt(plus)\n        if round(plus)==plus:\n            ans+=1\n        plus=0\n        if m+k+1==N-1:\n            break\nprint(ans)", "def dist(a,b):\n    ans = 0\n    for i in range(D):\n        ans += (b[i] - a[i])**2\n    ans **= 0.5\n\n    return ans\n\nN,D = map(int, input().split())\nX = [list(map(int, input().split())) for _ in range(N)]\n\ncount = 0\nfor i in range(N-1):\n    for j in range(i+1, N):\n        if dist(X[i],X[j]).is_integer():\n            count += 1\n\nprint(count)", "import numpy as np\nfrom itertools import combinations\nimport math\n\nN, D = list(map(int, input().split()))\nX = [list(map(int, input().split())) for i in range(N)]\n\nres = 0\nfor x, y in combinations(X, 2):\n    if((sum((np.array(x)-np.array(y))**2)**0.5).is_integer()):\n        res += 1\nprint(res)\n", "N,D=list(map(int,input().split()))\nX=[list(map(int,input().split())) for _ in range(N)]\nans=0\nfor i in range(N):\n    for j in range(i+1,N):\n        d=0\n        for k in range(D):\n            d+=(X[i][k]-X[j][k])**2\n        for l in range(1000):\n            if l**2==d:\n                ans+=1\n                break\nprint(ans)\n", "import numpy as np\nfrom scipy.special import comb\nn,d=map(int,input().split())\nx=[]\ntotal=0\nfor i in range(n):\n    x.append(list(map(int,input().split())))\nfor i in range(n):\n    for j in range(n):\n        if i!=j:\n            a=np.array(x[i])\n            b=np.array(x[j])\n            u=b-a\n            if np.linalg.norm(u)==int(np.linalg.norm(u)):\n                total+=1\nprint(int(total/2))", "import itertools\n\nN,D=map(int, input().split())\nX=[list(map(int, input().split())) for _ in range(N)]\n\ncombi=list(itertools.combinations([i for i in range(N)],2 ))\n\nans=0\n\nfor c in combi:\n\ttemp=0\n\tfor d in range(D):\n\t\ttemp+=(X[c[0]][d]-X[c[1]][d])**2\n\ttemp=temp**.5\n\tif float.is_integer(temp):ans+=1\n\nprint(ans)", "n,d = map(int,input().split())\nlists = []\nfor i in range(n):\n    lis = list(map(int,input().split()))\n    lists.append(lis)\ncnt = 0\nfor i in range(0,n-1):\n    for j in range(i+1,n):\n        ans = 0\n        for k in range(d):\n            x = (lists[i][k]-lists[j][k])**2\n            ans += x\n        ans = ans**(1/2)\n        y = ans.is_integer()\n        if y == True:\n            cnt += 1\nprint(cnt)", "import math\nN,D = list(map(int, input().split()))\n\nXarray = [list(map(int, input().split())) for _ in range(N)]\nans = 0\nfor i in range(N-1):\n    for j in range(i+1,N):\n        sum = 0\n        for k in range(D):\n            sum += abs(Xarray[i][k] - Xarray[j][k]) ** 2\n        \n        if math.sqrt(sum).is_integer():\n            ans += 1\n\nprint(ans)", "import math\nn,d=list(map(int,input().split()))\nx = []\nfor _ in range(n):\n    l = list(map(int, input().split()))\n    x.append(l)\ncnt = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        tmp = 0\n        for k in range(d):\n            tmp += (x[i][k] - x[j][k])**2\n        if math.sqrt(tmp) == int(math.sqrt(tmp)):\n            cnt += 1\nprint(cnt)\n", "import math\nN, D = list(map(int,input().split()))\nX = [list(map(int, input().split())) for _ in range(N)]\n\ndef check(i, j):\n    dis = 0\n    for k in range(D):\n        dis += (X[i][k] - X[j][k])**2\n    \n    if int(math.sqrt(dis))**2 == dis:\n        return 1\n    else:\n        return 0\n\nans = 0\nfor i in range(N):\n    for j in range(i+1, N):\n        ans += check(i, j)\nprint(ans)\n", "import math\nn,d = map(int,input().split(\" \"))\nclist = []\n\nfor i in range(n):\n    xlist = list(map(int,input().split(\" \")))\n    clist.append(xlist)\n\ndef dis(ylist,zlist):\n    distance = 0\n    for i in range(d):\n        distance += (ylist[i] - zlist[i]) ** 2\n    sqdis = math.sqrt(distance)\n    return(sqdis)\n\ncountdis = 0\n\nfor i in range(n-1):\n    for j in range(i+1,n):\n        if dis(clist[i],clist[j]) % 1 == 0:\n            countdis += 1\n\nprint(countdis)", "import itertools\nimport math\n\nn,d = map(int,input().split())\nx = [list(map(int,input().split())) for i in range(n)]\nq = list(itertools.combinations(range(n),2))\ncnt = 0\nfor i in range(len(q)):\n    ans = 0\n    for j in range(d):\n        ans += (x[q[i][0]][j] - x[q[i][1]][j])**2\n    ans = math.sqrt(ans)\n    if ans == int(ans):\n        cnt += 1\n\nprint(cnt)", "n, b = map(int, input().split())\nxlist = [list(map(int, input().split())) for _ in range(n)]\n\nfrom itertools import combinations\nimport numpy as np\nxnumpy = np.array(xlist)\nans = 0\nfor y, z in combinations(xnumpy, 2):\n    distance = ((y -z)**2).sum()\n    for i in range((40**2)*10):\n        if distance == i*i:\n            ans += 1\nprint(ans)        ", "from math import sqrt\n\nN, D = [int(i) for i in input().split()]\n\nXS = [list(int(i) for i in input().split()) for _ in range(N)]\n\ncnt = 0\nfor i in range(N):\n  for j in range(i+1, N):\n    if sqrt(sum((y - z) ** 2 for y, z in zip(XS[i], XS[j]))).is_integer():\n      cnt += 1\n      \nprint(cnt)\n", "import math \nn,d =list(map(int, input().split()))\n\nxx=[]\nfor i in range(n):\n    xx.append(list(map(int, input().split())))\n\n\ndef distance(xx,d,i,j):\n    ans = 0\n    for u in range(d):\n        ans+=((xx[i][u]-xx[j][u])**2)\n    if math.sqrt(ans).is_integer():\n         return 1\n    else :\n        return 0\n    \ncount =0\nfor i in range(n):\n    for j in range(i+1,n):\n        count += distance(xx,d,i,j)\nprint (count)\n", "import math\nn, d = list(map(int, input().split()))\nx = []\n\nfor i in range(n):\n    xi = [int(s) for s in input().split()]\n    x.append(xi)\n\ncount = 0\nfor i in range(0, n - 1):\n    for j in range(i + 1, n):\n        distance = 0\n        for k in range(d):\n            distance += (x[i][k] - x[j][k]) ** 2\n        norm = math.sqrt(distance)\n        if norm.is_integer():\n            count += 1\nprint(count)\n", "from itertools import combinations\nn,d = map(int,input().split())\nL = list(list(map(int,input().split())) for _ in range(n))\nC = list(combinations(L,2))\nans = 0\nfor i in range(len(C)):\n  total = 0\n  for a,b in zip(C[i][0],C[i][1]):\n    total += abs(a - b)**2\n  \n  if (total**0.5)%1 == 0:\n    ans += 1\nprint(ans)", "def dist(ar1, ar2):\n    s = 0\n    for i in range(len(ar1)):\n        s += (ar1[i] - ar2[i]) ** 2\n    return (s ** .5).is_integer()\n\nn, d = map(int, input().split())\nans = 0\narr = []\nfor _ in range(n):\n    arr.append(list(map(int, input().split())))\n\nfor i in range(len(arr)):\n    for j in range(i + 1, len(arr)):\n        if dist(arr[i], arr[j]):\n            ans += 1\nprint(ans)", "n, d = map(int, input().split())\na = [list(map(int, input().split())) for i in range(n)]\nt = 0\nfor i in range(n):\n  for j in range(i+1, n):\n    s = 0\n    for b, c in zip(a[i], a[j]):\n      s += (b - c) ** 2\n    if s ** 0.5 == int(s ** 0.5):\n      t += 1\nprint(t)", "import math\n\nN,D = list(map(int,input().split()))\nL = []\nans = 0 \nfor _ in range(N):\n  X = list(map(int,input().split()))\n  L.append(X)\nfor i in range(N - 1):\n  for j in range(i + 1,N):\n    con = 0\n    for k in range(D):\n      con += (L[i][k] - L[j][k]) ** 2\n    if  int(math.sqrt(con)) ** 2 == con:\n      ans += 1\n\nprint(ans)\n", "import itertools \nN, D = map(int, input().split())\ncount = 0\nlst = []\nfor n in range(N):\n    X = list(map(int, input().split()))\n    lst.append(X)\nc = list(itertools.combinations(lst, 2))\n\nlst2 = []\nfor a in c:\n    d2 = 0\n    for x, y in zip(a[0], a[1]):\n        s = (x - y) ** 2\n        d2 += s\n    d = d2 ** 0.5\n    if d.is_integer():\n        lst2.append(d)\nprint(len(lst2))", "n,d =map(int,input().split())\nl= [list(map(int, input().split())) for i in range(n)]\nans = 0\nfor i in range(n):\n    for j in range(i+1,n):\n        a = 0\n        for k in range(d):\n            a += (l[i][k] - l[j][k])**2\n        a **=0.5\n        if a.is_integer():\n            ans +=1\nprint(ans)", "import math\n\nN, D = map(int, input().split())\ncoordinates = []\nans = 0\nfor _ in range(N):\n  X = list(map(int, input().split()))\n  coordinates.append(X)\nfor i in range(N):\n  for j in range(i+1, N):\n    dist = 0\n    for k in range(D):\n      dist += (coordinates[i][k] - coordinates[j][k])**2\n    dist = math.sqrt(dist)\n    if dist == dist//1:\n      ans += 1\nprint(ans)", "import itertools\n\nn, d = map(int, input().split())\npoints = []\nfor _ in range(n):\n  point = list(map(int, input().split()))\n  points.append(point)\n\ncombinations = list(itertools.combinations(points, 2))\ndist_lists = []\nans = 0\nfor comb in combinations:\n  A = comb[0]\n  B = comb[1]\n\n  tmp = 0\n  for j in range(len(A)):\n    tmp += (B[j] - A[j])**2\n  \n  distance = tmp**(0.5)\n\n  if distance.is_integer():\n    ans += 1\nprint(ans)", "import math\n\ndef colcu (bli,ali,D):\n    num = 0\n    for i in range(D):\n        num += (bli[i] - ali[i]) ** 2\n    return math.sqrt(num)\n\nN,D = map(int, input().split())\npli = []\nfor i in range(N):\n  pli.append(list(map(int, input().split())))\n\nan = 0\nfor i in range(N-1):\n for t in range(i+1,N):\n     if colcu(pli[i],pli[t],D).is_integer():\n         an += 1\nprint(an)", "n, d = map(int,input().split())\npos = [list(map(int,input().split())) for _ in range(n)]\ncount = 0\nfor i in range(n):\n    for j in range(i+1,n):\n        sumpos = 0\n        for k in range(d):\n            sumpos += (pos[i][k] - pos[j][k]) ** 2\n        for l in range(sumpos + 1):\n            if l ** 2 == sumpos:\n                count += 1\nprint(count)", "# numpy\u3092\u4f7f\u308f\u306a\u3044\u89e3\u6cd5\nimport math\nn, d = (int(i) for i in input().split())\nlist_x = [[int(i) for i in input().split()] for j in range(0, n)]\ncount = 0\ntmp = 0\nfor i in range(0, n):\n    for j in range(i + 1, n):\n        for k in range(0, d):\n            tmp += pow(list_x[i][k] - list_x[j][k], 2)\n        tmp = math.sqrt(tmp)\n        if tmp.is_integer(): count += 1\n        tmp = 0\nprint(count)", "#-*-coding:utf-8-*-\nimport sys\ninput=sys.stdin.readline\nimport itertools\nimport math\nimport numpy as np\n\ndef main():\n    numbers=[]\n    #n = int(input())\n    n,m = map(int,input().split())\n    #numbers=list(map(int,input().split()))\n    numbers=np.array([list(map(int,input().split())) for _ in range(n)])\n    ans=0\n    length=0\n    count=0\n\n    for idx,pair in enumerate(itertools.combinations(numbers,2)):\n        tmp_A=np.array(pair[0])\n        tmp_B=np.array(pair[1])\n        length=(tmp_A-tmp_B)**2\n        ans=math.sqrt(sum(length))\n        if ans.is_integer()==True:\n            count+=1\n        else:\n            continue\n    print(count)\n\n\n\ndef __starting_point():\n    main()  \n__starting_point()", "n,d = map(int, input().split())\nx = [list(map(int, input().split())) for _ in range(n)]\n\nans = 0\nfor i in range(n-1):\n  for j in range(i+1, n):\n    t = 0\n    for k in range(d): t += abs(x[i][k] - x[j][k])**2\n    t **= 0.5\n    if t.is_integer(): ans += 1\nprint(ans)", "import numpy as np\nimport math\nn, d = map(int,input().split())\nx_l = [ np.array(list(map(int, input().split()))) for _ in range(n)  ]\n\nans = 0\np = set()\nfor i,x in enumerate(x_l):\n    for j,y in enumerate(x_l):\n        if i != j:\n            if str(min([i,j]))+'_'+str(max([i,j])) not in p:\n                d = math.sqrt(sum((x-y)**2))\n                if d.is_integer():\n                    ans += 1\n                    p.add(str(min([i,j]))+'_'+str(max([i,j])))\nprint(ans)", "def LI(): return list(map(int, input().split()))\ndef I(): return map(int, input().split())\nmod = 10**9 + 7\n\ndef main():\n  n, d = map(int, input().split())\n  x = [LI() for i in range(n)]\n  ans = 0\n  for i in range(n-1):\n    for j in range(i+1, n):\n      sm = 0\n      for k in range(d):\n        sm += (x[i][k] - x[j][k]) ** 2\n      if sm ** 0.5 % 1 == 0:\n        ans += 1\n  print(ans)\n  \n\ndef __starting_point():\n  main()\n__starting_point()", "import itertools\nN,D = map(int,input().split())\nN_List = [i for i in range(N)]\nND_List = []\nfor i in range(N):\n    ND_List.append(list(map(int,input().split())))\n\ncnt = 0\nfor comb in itertools.combinations(N_List,2):\n    ans = 0\n    for k in range(D):\n        ans += (ND_List[comb[0]][k] - ND_List[comb[1]][k])**2\n    ans =ans**0.5\n    if ans.is_integer():\n        cnt += 1\nprint(cnt)", "from numpy import array\nfrom numpy.linalg import norm\nn,d=map(int,input().split())\nX = [list(map(int,input().split())) for i in range(n)]\nans = 0\nfor i in range(n-1):\n  for j in range(i+1,n):\n    if norm(array(X[i])-array(X[j])).is_integer():\n      ans += 1\nprint(ans)", "import math\nimport itertools\n\nN, D = list(map(int, input().split()))\ncnt = 0\nL = []\n\nfor i in range(N):\n    X = list(map(int, input().split()))\n    L.append(X)\n\nfor i in itertools.combinations(L,2):\n    y, z, dis = i[0], i[1], 0\n    for a, b in zip(y, z):\n        dis += (a-b)**2\n    if math.sqrt(dis) == int(math.sqrt(dis)):\n        cnt += 1\n\nprint(cnt)\n", "n, d = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(n)]\nb = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        s = 0\n        for c, e in zip(a[i], a[j]):\n            s += (c - e) ** 2\n        if s ** 0.5 == int(s ** 0.5):\n            b += 1\nprint(b)", "from math import floor, sqrt\nn,d=map(int,input().split())\nX = []\ndef f(i,j):\n    sm = 0\n    for k in range(d):\n        sm += (X[i][k]-X[j][k])**2\n    return floor(sqrt(sm))**2 == sm\nfor _ in range(n):\n    X.append(list(map(int,input().split())))\nans = 0\nfor i in range(n):\n    for j in range(i+1,n):\n        if f(i,j):\n            ans += 1\nprint(ans)", "N,D = (int(x) for x in input().split())\nX = [None]*N\nfor i in range(N):\n  X[i] = [float(x) for x in input().split()]\ncount = 0\nfor i in range(N-1):\n  for j in range(i+1,N):\n    sq = [(X[i][k]-X[j][k])**2 for k in range(D)]\n    dist = sum(sq)**0.5\n    if dist == int(dist):\n      count += 1\nprint(count)", "N, D = map(int, input().split())\nX = [list(map(int, input().split())) for i in range(N)]\nans = 0\nfor i in range(N):\n  for j in range(i+1, N):\n    d = 0\n    for k in range(D):\n      d += (X[i][k] - X[j][k]) ** 2\n    d **= 0.5\n    if d.is_integer():\n      ans += 1\nprint(ans)", "n, d = map(int, input().split())\nx = [list(map(int, input().split())) for _ in range(n)]\ncnt = 0\n\nfor i in range(n-1):\n  for j in range(i+1, n):\n    ans = 0\n    for k in range(d):\n      ans += (x[i][k] - x[j][k]) ** 2\n    ans = ans ** (1/2)\n    if ans % 1 == 0:\n      cnt += 1\n\nprint(cnt)", "import numpy as np\nfrom itertools import combinations\nimport math\n\nN, D = list(map(int, input().split()))\nX = [list(map(int, input().split())) for i in range(N)]\n\nres = 0\nfor x, y in combinations(X, 2):\n    distance = 0\n    for i in range(D):\n        distance += (x[i] - y[i])**2\n    distance = math.sqrt(distance)\n    if(distance.is_integer()):\n        res += 1\n\nprint(res)\n", "n,d = map(int,input().split())\nlists = []\nfor i in range(n):\n    lis = list(map(int,input().split()))\n    lists.append(lis)\ncnt = 0\nfor i in range(0,n-1):\n    for j in range(i+1,n):\n        ans = 0\n        for k in range(d):\n            x = (lists[i][k]-lists[j][k])**2\n            ans += x\n        ans = ans**(1/2)\n    \n        if ans % 1 == 0:\n            cnt += 1\nprint(cnt)", "n,d=list(map(int,input().split()))\nx=[0]*n\nfor i in range(n):\n  x[i]=list(map(int,input().split()))\n  \ndef f(i):\n  return (i**0.5-int(i**0.5))==0.0\n  \nans=0\nfor i in range(n):\n  for j in range(i+1,n):\n    dist=0\n    for k in range(d):\n      dist+=(x[i][k]-x[j][k])**2\n    ans+=1 if f(dist) else 0\nprint(ans)\n", "import math\nn,d = list(map(int, input().split()))\nl = [list(map(int, input().split())) for l in range(n)]\nans = 0\nfor i in range(n-1):\n    for j in range(i+1,n):\n        x = 0\n        for k in range(d):\n            x += (l[i][k]-l[j][k])**2\n        \n        y = math.sqrt(x)\n        a,b = math.modf(y)\n        if a == 0:\n            ans += 1\nprint(ans)\n\n", "N, D = map(int, input().split())\nX = []\nans = 0\nfor i in range(N):\n  X.append(list(map(int, input().split())))\nimport math\nfor i in range(N):\n  for j in range(i+1, N):\n    lis_1 = X[i]\n    lis_2 = X[j]\n    cnt = 0\n    for k in range(D):\n      cnt += (lis_1[k] - lis_2[k]) ** 2\n    cnt = math.sqrt(cnt)\n    if cnt.is_integer():\n      ans += 1\nprint(ans)", "import math\nN, D = map(int,input().split())\nX = [list(map(int, input().split())) for i in range(N)]\n\nseisu_count = 0\nfor l in range(N):\n\n    for r in range(l+1, N):\n        total = 0\n        for z in range(D):\n            y_z = abs(X[l][z] - X[r][z])\n            y_z_2 = y_z * y_z\n            total += y_z_2\n        \n        sqr_total = math.sqrt(total)\n        if sqr_total.is_integer():\n            seisu_count += 1\n\nprint(seisu_count)", "N,D = map(int,input().split())\nX = [[int(i) for i in input().split()] for j in range(N)]\nans = 0\n\nfor i in range(N):\n    for j in range(i+1,N):\n        L = 0\n        for k in range(D):\n            L += (X[i][k] - X[j][k]) ** 2\n        M = L ** 0.5\n        if(M == int(M)):\n            ans += 1\n\nprint(ans)", "N,D=map(int,input().split())\nX=[list(map(int,input().split())) for x in range(N)]\nl=[]\nfor i in range(N):\n    for j in range(i+1,N):\n        s=0\n        for k in range(D):\n            s+=(X[i][k]-X[j][k])**2\n        s=s**0.5\n        if s-(s//1)==0:\n            l.append(s)\nprint(len(l))", "n,d = map(int,input().split())\nimport numpy as np\nxlist = [list(map(int,input().split())) for i in range(n)]\nxarray = np.array(xlist)\nans = 0\nfor i in range(n):\n  for j in range(i+1,n):\n    if np.linalg.norm(xarray[i]-xarray[j])==int(np.linalg.norm(xarray[i]-xarray[j])):\n      ans+=1\nprint(ans)", "import math\nN,D = map(int,input().split())\nX = [list(map(int,input().split())) for i in range(N)]\ncnt = 0\n\nfor i in range(N) :\n    for j in range(i+1,N) :\n        buf = 0\n        for k in range(len(X[0])) :\n            buf += (X[i][k]-X[j][k]) ** 2\n        buf = math.sqrt(buf)\n        if int(buf) == buf :\n            cnt += 1\nprint(cnt)", "import itertools\nimport numpy as np\nN,D = map(int,input().split())\nX = [list(map(int,input().split())) for _ in range(N)]\ncount=0\nfor i in itertools.combinations(X,2):\n  if np.linalg.norm(list(map(lambda x,y:abs(x-y),i[0],i[1])))%1==0:count+=1\nprint(count)", "import numpy as np\nfrom itertools import combinations\nn,d=map(int,input().split())\nl= [np.array(input().split() ,dtype=np.int64) for _ in range(n)]\nans=0\ndist=0\nfor a,b in combinations(l,2):\n    dist=((a-b)**2).sum()\n    for j in range(dist+1):\n        if  j**2 == dist:\n            ans+=1\n            continue\nprint(ans)", "N, D = map(int, input().split())\n\nX = [input().split() for i in range(N)]\n\ncount = 0\nd_2 = 0\nd = 0\n\nfor i in range(1, N):\n    for j in range(0, i):\n        d_2 = 0\n        d = 0\n        for k in range(D):\n            d_2 += (float(X[i][k]) - float(X[j][k]))**2\n        d = d_2**(1/2)\n        if d.is_integer() == True:\n            count += 1\n\nprint(\"{}\".format(count))", "n,d = map(int,input().split())\nx = [list(map(int,input().split())) for _ in range(n)]\nans = 0\nfrom math import sqrt\nfor i in range(n):\n  for j in range(i+1,n):\n    dis = 0\n    for k in range(d):\n      dis += (x[i][k]-x[j][k])**2\n    if sqrt(dis) == int(sqrt(dis)):\n      ans += 1\nprint(ans)", "import math\nn,d=map(int,input().split())\nx=[[int(x) for x in input().split()]for _ in range(n)]\ncnt=0\nfor i in range(n):\n    for j in range(i+1,n):\n        sum=0\n        for a,b in zip(x[i],x[j]):\n            sum+=(a-b)*(a-b)\n        if math.sqrt(sum).is_integer():\n            cnt+=1\nprint(cnt)", "n, d = list(map(int, input().split()))\nx = [[0 for j in range(d)]for i in range(n)]\nfor i in range(n):\n    x[i] = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n    for j in range(i):\n        dist = 0\n        for k in range(d):\n            dist += (x[i][k] - x[j][k]) ** 2\n        dist = dist**(1/2)\n        if dist - int(dist) == 0:\n            ans += 1\nprint(ans)\n", "n,d = list(map(int,input().split()))\np = [[int(i) for i in input().split()] for y in range(n)]\n\ndef how_far(a,b):\n  x = 0\n  for s in range(0,d):\n    x += (a[s] - b[s]) ** 2\n  x = x ** (1/2)\n  return x\ncount = 0\nfor i in range(n-1):\n  for j in range(i+1,n):\n    kyori = how_far(p[i],p[j])\n    true_kyori = int(kyori)\n    if kyori == true_kyori:\n      count += 1\n      \nprint(count)\n      \n", "import math\n\nN,D = list(map(int,input().split()))\n\nary = []\nfor _ in range(N):\n    ary.append(list(map(int,input().split())))\n\ncounter = 0\nary_len = len(ary)\nfor i in range(ary_len - 1):\n    for j in range(i+1,ary_len):\n        tmp = 0\n        for k in range(D):\n            tmp += pow(abs(ary[i][k]-ary[j][k]),2)\n        if math.sqrt(tmp) % 1 == 0:\n            counter += 1\nprint(counter)\n", "n,d = list(map(int,input().split()))\nc = [list(map(int,input().split())) for _ in range(n)]\ncnt = 0\nfor i in range(n):\n    for j in range(i+1,n):\n        ans = 0\n        for k in range(d):\n            ans += abs(c[i][k]-c[j][k]) ** 2\n        ans = ans**0.5\n        #print(ans)\n        if ans.is_integer():\n            cnt += 1\nprint(cnt)\n", "import numpy as np\n\nN, D = map(int, input().split())\nX = []\nfor i in range(N):\n  X.append(list(map(int, input().split()))) # OK!\n\n# Compute each distances\ndis = [[0 for i in range(N)] for j in range(N)]\nfor i in range(N):\n  for j in range(i+1, N):\n    for k in range(D):\n      dis[i][j] += (X[i][k]-X[j][k])**2 # OK!\n\n# Check integer or not\ndot = 0\nfor i in range(N):\n  for j in range(i, N):\n    dis[i][j] = np.sqrt(dis[i][j])\n    if dis[i][j].is_integer() and dis[i][j] != 0:\n      dot += 1\n\nprint(dot)", "n,d = map(int,input().split())\nimport numpy as np\nxlist = [list(map(int,input().split())) for i in range(n)]\nxarray = np.array(xlist)\nans = 0\nfor i in range(n):\n  for j in range(i+1,n):\n    if np.linalg.norm(xarray[i]-xarray[j]).is_integer():\n      ans+=1\nprint(ans)", "import itertools\n\nn, d = map(int, input().split())\nx = [list(map(int, input().split())) for _ in range(n)]\n\nc = list(itertools.combinations(range(n), 2))\nans = 0\nfor a, b in c:\n    dist = 0\n    for j in range(d):\n        dist += (x[a][j]-x[b][j])**2\n    if dist**(1/2) % 1 == 0:\n        ans += 1\nprint(ans)", "n,d=list(map(int, input().rstrip().split()))\nm=[]\nfor _ in range(n):\n    arr=list(map(int, input().rstrip().split()))\n    m.append(arr)\nans=0\nfor i in range(n-1):\n    for j in range(i+1,n):\n        a = 0\n        for k in range(d):\n            a += (m[i][k] - m[j][k])**2\n        x = int(a**(1/2))\n        if x**2 == a:\n            ans+=1\nprint(ans)\n", "import math\n\nN, D = map(int, input().split())\nX = [list(map(int, input().split())) for _ in range(N)]\nans = 0\nfor i in range(N-1):\n  for j in range(i+1, N):\n    d = 0\n    for k in range(D):\n      d += (X[i][k] - X[j][k]) ** 2\n    if int(math.sqrt(d)) ** 2 == d:\n      ans += 1\nprint(ans)", "n, d = list(map(int, input().split()))\nX = []\nfor i in range(n):\n    a = list(map(int, input().split()))\n    X.append(a)\n\ncount = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        norm = 0\n        for k in range(d):\n            diff = abs(X[i][k] - X[j][k])\n            norm += diff * diff\n        can = False\n        for k in range(1, norm + 1):\n            if(k * k == norm):\n                can = True\n        if(can):\n            count += 1\n\nprint(count)\n", "N,D=map(int, input().split())\nX=[]\nfor i in range(N):\n    X.append(list(map(int, input().split())))\ncount=0\nfor i in range(N):\n    for j in range(N):\n        if i >= j: continue\n        d=0\n        for k in range(D):\n            d+=pow(abs(X[i][k]-X[j][k]),2)\n        d=float(pow(d, 0.5))\n        if d.is_integer(): count+=1\nprint(count)", "def calc(D, a, b):\n    d2 = 0\n    for i in range(D):\n        d2 += abs(a[i] - b[i])**2\n\n    return d2**0.5\n\nN, D = map(int, input().split())\nlst = []\nfor i in range(N):\n    lst.append(list(map(int, input().split())))\n\nans = 0\n\nfor i in range(N):\n    for j in range(i+1, N):\n        d = calc(D, lst[i], lst[j])\n        if int(d) == d:\n            ans += 1\n\nprint(ans)", "n, d = map(int, input().split())\nx = []\nfor _ in range(n):\n    x.append(list(map(int, input().split())))\n\ncount = 0\nfor i in range(n):\n    for j in range(i+1,n):\n        if i!=j :\n            sum = 0\n            for k in range(d):\n                sum += (x[i][k] - x[j][k]) ** 2\n            if (sum ** 0.5) % 1 == 0:\n                count += 1\nprint(count)", "# coding: utf-8\nfrom math import sqrt\n\ndef main():\n    N, D = list(map(int, input().split()))\n    ans = 0\n    X = [list(map(int, input().split())) for _ in range(N)]\n\n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            tmp = sum([(X[i][k] - X[j][k]) ** 2 for k in range(D)])\n            if tmp == int(sqrt(tmp)) ** 2:\n                ans += 1\n\n    print(ans)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "import math\n\ndef solve(y, z):\n  res = 0\n  for i in range(len(y)):\n    res += (y[i]-z[i])**2\n  return math.sqrt(res)\n\nn, d = map(int, input().split())\nx = [list(map(int, input().split())) for _ in range(n)]\nans = 0\nfor i in range(n-1):\n  for j in range(i+1, n):\n    dist = solve(x[i], x[j])\n    if int(dist) == dist: ans += 1\nprint(ans)", "import math\n\ndef calc(num, list1, list2):\n  s = 0\n  for i in range(num):\n    s += (list1[i] - list2[i]) ** 2\n  d = math.sqrt(s)\n  return d\n\nN, D = map(int, input().split())\nL = []\nans = 0\n\nfor i in range(N):\n  L.append(list(map(int, input().split())))\n\nfor i in range(N):\n  for j in range(i+1, N):\n    c = calc(D, L[i], L[j])\n    if c.is_integer():\n      ans += 1\n\nprint(ans)"]