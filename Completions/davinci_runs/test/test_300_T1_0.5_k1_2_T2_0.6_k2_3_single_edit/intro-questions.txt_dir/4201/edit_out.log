2022-04-20 23:50:04.290294 num operations 1
2022-04-20 23:50:04.290304 size on input set 1
2022-04-20 23:50:04.290445 using api key sourya
2022-04-20 23:50:04.423608 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 23:50:05.925537 using api key sourya
2022-04-20 23:50:05.967978 in retry 5 3.0 <class 'Exception'>, Retrying in 3 seconds...
2022-04-20 23:50:08.971385 using api key soukgp
2022-04-20 23:50:24.934376 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef paint_red(h, w, k):\n\tans = 0\n\tfor i in range(2 ** h):\n\t\thh = bin(i)[2:].zfill(h)\n\t\tfor j in range(2 ** w):\n\t\t\tww = bin(j)[2:].zfill(w)\n\t\t\tif hh.count('1') + ww.count('1') == k:\n\t\t\t\tans += 1\n\treturn ans\n\nh, w, k = map(int, input().split())\n\nprint(paint_red(h, w, k))\n"
    },
    {
      "index": 1,
      "text": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\ndef paint_red(h, w, k):\n    ans = 0\n    for i in range(2 ** h):\n        t = bin(i)[2:].zfill(h)\n        for j in range(2 ** w):\n            s = bin(j)[2:].zfill(w)\n            if t.count('1') + s.count('1') == k:\n                ans += 1\n    return ans\n\nh, w, k = map(int, input().split())\n\nprint(paint_red(h, w, k))\n"
    },
    {
      "index": 2,
      "text": "\n\ndef paint_red(H, W, K):\n    ans = 0\n    for i in range(2 ** H):\n        h = bin(i)[2:].zfill(H)\n        for j in range(2 ** W):\n            w = bin(j)[2:].zfill(W)\n            if h.count('1') + w.count('1') == K:\n                ans += 1\n    return ans\n\nH, W, K = map(int, input().split())\n\nprint(paint_red(H, W, K))\n"
    }
  ],
  "created": 1650498609,
  "object": "edit"
}
2022-04-20 23:50:24.934622 fix syntax errors 3 ["\n\ndef paint_red(h, w, k):\n\tans = 0\n\tfor i in range(2 ** h):\n\t\thh = bin(i)[2:].zfill(h)\n\t\tfor j in range(2 ** w):\n\t\t\tww = bin(j)[2:].zfill(w)\n\t\t\tif hh.count('1') + ww.count('1') == k:\n\t\t\t\tans += 1\n\treturn ans\n\nh, w, k = map(int, input().split())\n\nprint(paint_red(h, w, k))\n", "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\ndef paint_red(h, w, k):\n    ans = 0\n    for i in range(2 ** h):\n        t = bin(i)[2:].zfill(h)\n        for j in range(2 ** w):\n            s = bin(j)[2:].zfill(w)\n            if t.count('1') + s.count('1') == k:\n                ans += 1\n    return ans\n\nh, w, k = map(int, input().split())\n\nprint(paint_red(h, w, k))\n", "\n\ndef paint_red(H, W, K):\n    ans = 0\n    for i in range(2 ** H):\n        h = bin(i)[2:].zfill(H)\n        for j in range(2 ** W):\n            w = bin(j)[2:].zfill(W)\n            if h.count('1') + w.count('1') == K:\n                ans += 1\n    return ans\n\nH, W, K = map(int, input().split())\n\nprint(paint_red(H, W, K))\n"]
2022-04-20 23:50:24.934659 size on output set 3
2022-04-20 23:50:24.934671 num operations 1
2022-04-20 23:50:24.934677 size on input set 1
2022-04-20 23:50:24.934829 using api key gabby
2022-04-20 23:50:24.978241 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-20 23:50:26.480163 using api key gabby
2022-04-20 23:50:26.520859 in retry 5 3.0 <class 'Exception'>, Retrying in 3 seconds...
2022-04-20 23:50:29.524249 using api key gabby
2022-04-20 23:50:29.565827 in retry 4 6.0 <class 'Exception'>, Retrying in 6 seconds...
2022-04-20 23:50:35.572254 using api key sunu
2022-04-20 23:50:47.407589 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef main():\n    H, W, K = map(int, input().split())\n    c = [input() for _ in range(H)]\n    ans = 0\n    for mask_row in range(1<<H):\n        for mask_col in range(1<<W):\n            cnt = 0\n            for i in range(H):\n                for j in range(W):\n                    if c[i][j] == '#' and ((mask_row>>i)&1) == 1 and ((mask_col>>j)&1) == 1:\n                        cnt += 1\n            if cnt == K:\n                ans += 1\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n\ndef test():\n    import io, sys\n    from unittest.mock import patch\n\n    inp = \"\"\"\\\n2 3 2\n..#\n###\n\"\"\"\n    out = \"\"\"\\\n5\n\"\"\"\n\n    with patch('sys.stdin.readline', side_effect=io.StringIO(inp).readline):\n        with patch('sys.stdout', new=io.StringIO()) as fake_out:\n            main()\n            assert fake_out.getvalue() == out\n\n\ntest()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef main():\n    H, W, K = map(int, input().split())\n    c = [input() for _ in range(H)]\n    ans = 0\n    for mask_row in range(1<<H):\n        for mask_col in range(1<<W):\n            cnt = 0\n            for i in range(H):\n                for j in range(W):\n                    if c[i][j] == '#' and ((mask_row>>i)&1) == 1 and ((mask_col>>j)&1) == 1:\n                        cnt += 1\n            if cnt == K:\n                ans += 1\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n\n\ndef test():\n    import io, sys\n    from unittest.mock import patch\n\n    inp = \"\"\"\\\n2 3 2\n..#\n###\n\"\"\"\n    out = \"\"\"\\\n5\n\"\"\"\n\n    with patch('sys.stdin.readline', side_effect=io.StringIO(inp).readline):\n        with patch('sys.stdout', new=io.StringIO()) as fake_out:\n            main()\n            assert fake_out.getvalue() == out\n\n\n# tests\ntest()\n"
    },
    {
      "index": 2,
      "text": "\nfrom collections import Counter\n\ndef main():\n    N = int(input())\n    c = Counter(input())\n    print(min(c['R'], c['B'], c['W']))\n\n\nif __name__ == '__main__':\n    main()\n\n\ndef test():\n    import io, sys\n    from unittest.mock import patch\n\n    inp = \"\"\"\\\n6\nRRBRBR\n\"\"\"\n    out = \"\"\"\\\n1\n\"\"\"\n\n    with patch('sys.stdin.readline', side_effect=io.StringIO(inp).readline):\n        with patch('sys.stdout', new=io.StringIO()) as fake_out:\n            main()\n            assert fake_out.getvalue() == out\n\n\n# tests\ntest()\n"
    }
  ],
  "created": 1650498635,
  "object": "edit"
}
2022-04-20 23:50:47.407832 fix syntax errors 3 ['\ndef main():\n    H, W, K = map(int, input().split())\n    c = [input() for _ in range(H)]\n    ans = 0\n    for mask_row in range(1<<H):\n        for mask_col in range(1<<W):\n            cnt = 0\n            for i in range(H):\n                for j in range(W):\n                    if c[i][j] == \'#\' and ((mask_row>>i)&1) == 1 and ((mask_col>>j)&1) == 1:\n                        cnt += 1\n            if cnt == K:\n                ans += 1\n    print(ans)\n\n\nif __name__ == \'__main__\':\n    main()\n\ndef test():\n    import io, sys\n    from unittest.mock import patch\n\n    inp = """\\\n2 3 2\n..#\n###\n"""\n    out = """\\\n5\n"""\n\n    with patch(\'sys.stdin.readline\', side_effect=io.StringIO(inp).readline):\n        with patch(\'sys.stdout\', new=io.StringIO()) as fake_out:\n            main()\n            assert fake_out.getvalue() == out\n\n\ntest()\n', '\n\ndef main():\n    H, W, K = map(int, input().split())\n    c = [input() for _ in range(H)]\n    ans = 0\n    for mask_row in range(1<<H):\n        for mask_col in range(1<<W):\n            cnt = 0\n            for i in range(H):\n                for j in range(W):\n                    if c[i][j] == \'#\' and ((mask_row>>i)&1) == 1 and ((mask_col>>j)&1) == 1:\n                        cnt += 1\n            if cnt == K:\n                ans += 1\n    print(ans)\n\n\nif __name__ == \'__main__\':\n    main()\n\n\ndef test():\n    import io, sys\n    from unittest.mock import patch\n\n    inp = """\\\n2 3 2\n..#\n###\n"""\n    out = """\\\n5\n"""\n\n    with patch(\'sys.stdin.readline\', side_effect=io.StringIO(inp).readline):\n        with patch(\'sys.stdout\', new=io.StringIO()) as fake_out:\n            main()\n            assert fake_out.getvalue() == out\n\n\n# tests\ntest()\n', '\nfrom collections import Counter\n\ndef main():\n    N = int(input())\n    c = Counter(input())\n    print(min(c[\'R\'], c[\'B\'], c[\'W\']))\n\n\nif __name__ == \'__main__\':\n    main()\n\n\ndef test():\n    import io, sys\n    from unittest.mock import patch\n\n    inp = """\\\n6\nRRBRBR\n"""\n    out = """\\\n1\n"""\n\n    with patch(\'sys.stdin.readline\', side_effect=io.StringIO(inp).readline):\n        with patch(\'sys.stdout\', new=io.StringIO()) as fake_out:\n            main()\n            assert fake_out.getvalue() == out\n\n\n# tests\ntest()\n']
2022-04-20 23:50:47.407982 size on output set 3
