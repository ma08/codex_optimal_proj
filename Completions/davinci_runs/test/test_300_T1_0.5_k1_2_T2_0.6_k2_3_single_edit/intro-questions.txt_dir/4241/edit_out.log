2022-04-21 00:08:26.409552 num operations 1
2022-04-21 00:08:26.409562 size on input set 1
2022-04-21 00:08:26.409707 using api key derek
2022-04-21 00:08:26.565049 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-21 00:08:28.066975 using api key jaanu
2022-04-21 00:08:43.263888 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\nS = input()\nT = input()\n\nans = len(S)\nfor i in range(len(S)-len(T)+1):\n    count = 0\n    for j in range(len(T)):\n        if S[i+j] != T[j]:\n            count += 1\n    ans = min(ans, count)\n\nprint(ans)\n"
    },
    {
      "index": 1,
      "text": "\nS = input()\nT = input()\n\nans = len(S)\nfor i in range(len(S)-len(T)+1):\n    count = 0\n    for j in range(len(T)):\n        if S[i+j] != T[j]:\n            count += 1\n    ans = min(ans, count)\n\nprint(ans)\n"
    },
    {
      "index": 2,
      "text": "\ndef solve():\n    N, K = map(int, input().split())\n    A = list(map(int, input().split()))\n    P = list(map(int, input().split()))\n    A.sort()\n    P.sort()\n    # P\u306e\u5024\u306e\u9806\u756a\u306bA\u306e\u5024\u3092\u4e26\u3079\u308b\n    ans = 0\n    for i in range(N):\n        ans += A[i] * P[N-i-1]\n    print(ans)\nsolve()\n"
    }
  ],
  "created": 1650499708,
  "object": "edit"
}
2022-04-21 00:08:43.264144 fix syntax errors 3 ['\n\nS = input()\nT = input()\n\nans = len(S)\nfor i in range(len(S)-len(T)+1):\n    count = 0\n    for j in range(len(T)):\n        if S[i+j] != T[j]:\n            count += 1\n    ans = min(ans, count)\n\nprint(ans)\n', '\nS = input()\nT = input()\n\nans = len(S)\nfor i in range(len(S)-len(T)+1):\n    count = 0\n    for j in range(len(T)):\n        if S[i+j] != T[j]:\n            count += 1\n    ans = min(ans, count)\n\nprint(ans)\n', '\ndef solve():\n    N, K = map(int, input().split())\n    A = list(map(int, input().split()))\n    P = list(map(int, input().split()))\n    A.sort()\n    P.sort()\n    # Pの値の順番にAの値を並べる\n    ans = 0\n    for i in range(N):\n        ans += A[i] * P[N-i-1]\n    print(ans)\nsolve()\n']
2022-04-21 00:08:43.264181 size on output set 3
2022-04-21 00:08:43.264193 num operations 1
2022-04-21 00:08:43.264198 size on input set 1
2022-04-21 00:08:43.264376 using api key jaanu
2022-04-21 00:08:52.717553 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\ndef min_changes(s, t):\n    count = 0\n    for i in range(len(t)):\n        if s[i] != t[i]:\n            count += 1\n\n    return count\n\ndef main():\n    s = input()\n    t = input()\n    print(min_changes(s, t))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "\n\ndef min_changes(s1, s2):\n    if len(s1) < len(s2):\n        s1, s2 = s2, s1\n\n    distances = range(len(s1) + 1)\n    for i2, c2 in enumerate(s2):\n        distances_ = [i2 + 1]\n        for i1, c1 in enumerate(s1):\n            if c1 == c2:\n                distances_.append(distances[i1])\n            else:\n                distances_.append(1 + min((distances[i1], distances[i1 + 1], distances_[-1])))\n        distances = distances_\n    return distances[-1]\n\ndef main():\n    s = input()\n    t = input()\n    print(min_changes(s, t))\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef min_changes(s, t):\n    i = 0\n    j = 0\n    while i < len(s) and j < len(t):\n        if s[i] != t[j]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n    return len(t) - j\n\ndef main():\n    s = input()\n    t = input()\n    print(min_changes(s, t))\n\nif __name__ == '__main__':\n    main()\n"
    }
  ],
  "created": 1650499723,
  "object": "edit"
}
2022-04-21 00:08:52.717778 fix syntax errors 3 ["\ndef min_changes(s, t):\n    count = 0\n    for i in range(len(t)):\n        if s[i] != t[i]:\n            count += 1\n\n    return count\n\ndef main():\n    s = input()\n    t = input()\n    print(min_changes(s, t))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef min_changes(s1, s2):\n    if len(s1) < len(s2):\n        s1, s2 = s2, s1\n\n    distances = range(len(s1) + 1)\n    for i2, c2 in enumerate(s2):\n        distances_ = [i2 + 1]\n        for i1, c1 in enumerate(s1):\n            if c1 == c2:\n                distances_.append(distances[i1])\n            else:\n                distances_.append(1 + min((distances[i1], distances[i1 + 1], distances_[-1])))\n        distances = distances_\n    return distances[-1]\n\ndef main():\n    s = input()\n    t = input()\n    print(min_changes(s, t))\n\nif __name__ == '__main__':\n    main()\n", "\n\ndef min_changes(s, t):\n    i = 0\n    j = 0\n    while i < len(s) and j < len(t):\n        if s[i] != t[j]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n    return len(t) - j\n\ndef main():\n    s = input()\n    t = input()\n    print(min_changes(s, t))\n\nif __name__ == '__main__':\n    main()\n"]
2022-04-21 00:08:52.717812 size on output set 3
