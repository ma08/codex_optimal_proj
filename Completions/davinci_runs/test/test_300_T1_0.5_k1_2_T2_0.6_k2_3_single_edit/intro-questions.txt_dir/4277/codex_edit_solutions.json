["\nimport sys\nn, a, b = map(int, sys.stdin.readline().split())\n\nprint(min(n*a, b))\n", "\n\nimport sys \nimport pprint\n\nsys.setrecursionlimit(10**9)\ninput = sys.stdin.readline\n\nN, M = map(int, input().split())\n\ngraph = [[] for _ in range(N)]\n\nfor _ in range(M):\n    a, b = map(int, input().split())\n    graph[a-1].append(b-1)\n    graph[b-1].append(a-1)\n\n\ndef dfs(start, graph, visited):\n    stack = [start]\n    visited[start] = True\n\n    while stack:\n        vertex = stack.pop()\n        for i in graph[vertex]:\n            if not visited[i]:\n                visited[i] = True\n                stack.append(i)\n\n\nvisited = [False] * N\n\ncnt = 0\nfor i in range(N):\n    if not visited[i]:\n        dfs(i, graph, visited)\n        cnt += 1\n\nprint(cnt)\n", "\nimport sys\nN, A, B = map(int, sys.stdin.readline().rstrip().split())\n\ndef min_expense(N, A, B):\n    if N * A <= B:\n        return N * A\n    else:\n        return B\n\n\nprint(min_expense(N, A, B))\n", "#!/usr/bin/env python\n# coding: utf-8\n\nimport sys\n\nN, A, B = map(int, sys.stdin.readline().rstrip().split())\n\n\ndef min_expense(N, A, B):\n    if N * A <= B:\n        return N * A\n    else:\n        return B\n\n\nprint(min_expense(N, A, B))\n", "import sys\nN = int(sys.stdin.readline())\n\n\narr = []\nfor i in range(N):\n    arr.append(int(sys.stdin.readline()))\n\nfor i in reversed(arr):\n    print(i)\n"]