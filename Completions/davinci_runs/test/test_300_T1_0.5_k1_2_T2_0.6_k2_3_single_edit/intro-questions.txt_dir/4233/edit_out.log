2022-04-21 00:04:34.490338 num operations 1
2022-04-21 00:04:34.490349 size on input set 1
2022-04-21 00:04:34.490492 using api key sunu
2022-04-21 00:04:58.750174 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef stars(n,m,grid):\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                s = 1\n                while i+s < n and i-s >=0 and j+s < m and j-s >= 0:\n                    if grid[i+s][j] == '*' and grid[i-s][j] == '*' and grid[i][j+s] == '*' and grid[i][j-s] == '*':\n                        grid[i+s][j] = '.'\n                        grid[i-s][j] = '.'\n                        grid[i][j+s] = '.'\n                        grid[i][j-s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i+1,j+1,s-1)\n    if k == 0:\n        print(-1)\n\n\nn,m = map(int,input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n,m,grid)\n"
    },
    {
      "index": 1,
      "text": "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Fri Jul  5 14:40:40 2019\n\n\n@author: amath\n\"\"\"\n\n\nimport math\n\ndef stars(n, m, grid):\n    # print(grid)\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                s = 1\n                while i + s < n and i - s >= 0 and j + s < m and j - s >= 0:\n                    if grid[i + s][j] == '*' and grid[i - s][j] == '*' and grid[i][j + s] == '*' and grid[i][j - s] == '*':\n                        grid[i + s][j] = '.'\n                        grid[i - s][j] = '.'\n                        grid[i][j + s] = '.'\n                        grid[i][j - s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i + 1, j + 1, s - 1)\n    if k == 0:\n        print(-1)\n\n\nn, m = map(int, input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n, m, grid)\n"
    },
    {
      "index": 2,
      "text": "\n\ndef stars(n,m,grid):\n    # print(grid)\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                s = 1\n                while i + s < n and i - s >= 0 and j + s < m and j - s >= 0:\n                    if grid[i + s][j] == '*' and grid[i - s][j] == '*' and grid[i][j + s] == '*' and grid[i][j - s] == '*':\n                        grid[i + s][j] = '.'\n                        grid[i - s][j] = '.'\n                        grid[i][j + s] = '.'\n                        grid[i][j - s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i + 1, j + 1, s - 1)\n    if k == 0:\n        print(-1)\n\n\nn, m = map(int, input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n, m, grid)\n"
    }
  ],
  "created": 1650499474,
  "object": "edit"
}
2022-04-21 00:04:58.750490 fix syntax errors 3 ["\n\ndef stars(n,m,grid):\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                s = 1\n                while i+s < n and i-s >=0 and j+s < m and j-s >= 0:\n                    if grid[i+s][j] == '*' and grid[i-s][j] == '*' and grid[i][j+s] == '*' and grid[i][j-s] == '*':\n                        grid[i+s][j] = '.'\n                        grid[i-s][j] = '.'\n                        grid[i][j+s] = '.'\n                        grid[i][j-s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i+1,j+1,s-1)\n    if k == 0:\n        print(-1)\n\n\nn,m = map(int,input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n,m,grid)\n", '# -*- coding: utf-8 -*-\n"""\nCreated on Fri Jul  5 14:40:40 2019\n\n\n@author: amath\n"""\n\n\nimport math\n\ndef stars(n, m, grid):\n    # print(grid)\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \'*\':\n                k += 1\n                grid[i][j] = \'.\'\n                s = 1\n                while i + s < n and i - s >= 0 and j + s < m and j - s >= 0:\n                    if grid[i + s][j] == \'*\' and grid[i - s][j] == \'*\' and grid[i][j + s] == \'*\' and grid[i][j - s] == \'*\':\n                        grid[i + s][j] = \'.\'\n                        grid[i - s][j] = \'.\'\n                        grid[i][j + s] = \'.\'\n                        grid[i][j - s] = \'.\'\n                        s += 1\n                    else:\n                        break\n                print(i + 1, j + 1, s - 1)\n    if k == 0:\n        print(-1)\n\n\nn, m = map(int, input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n, m, grid)\n', "\n\ndef stars(n,m,grid):\n    # print(grid)\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n                grid[i][j] = '.'\n                s = 1\n                while i + s < n and i - s >= 0 and j + s < m and j - s >= 0:\n                    if grid[i + s][j] == '*' and grid[i - s][j] == '*' and grid[i][j + s] == '*' and grid[i][j - s] == '*':\n                        grid[i + s][j] = '.'\n                        grid[i - s][j] = '.'\n                        grid[i][j + s] = '.'\n                        grid[i][j - s] = '.'\n                        s += 1\n                    else:\n                        break\n                print(i + 1, j + 1, s - 1)\n    if k == 0:\n        print(-1)\n\n\nn, m = map(int, input().split())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nstars(n, m, grid)\n"]
2022-04-21 00:04:58.750543 size on output set 3
2022-04-21 00:04:58.750556 num operations 1
2022-04-21 00:04:58.750562 size on input set 1
2022-04-21 00:04:58.750722 using api key derek
2022-04-21 00:04:58.786994 in retry 6 1.5 <class 'Exception'>, Retrying in 1 seconds...
2022-04-21 00:05:00.288933 using api key sourya
2022-04-21 00:05:00.324465 in retry 5 3.0 <class 'Exception'>, Retrying in 3 seconds...
2022-04-21 00:05:03.325059 using api key soukgp
2022-04-21 00:05:26.973422 fix syntax errors {
  "choices": [
    {
      "index": 0,
      "text": "\n\ndef main():\n    n,m = map(int,input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input().strip()))\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if (grid[i][j] == '*'):\n                if (i>0 and j>0 and grid[i-1][j-1] == '*') or (i>0 and grid[i-1][j] == '*') or (i>0 and j<m-1 and grid[i-1][j+1] == '*') or (j>0 and grid[i][j-1] == '*') or (j<m-1 and grid[i][j+1] == '*') or (i<n-1 and j>0 and grid[i+1][j-1] == '*') or (i<n-1 and grid[i+1][j] == '*') or (i<n-1 and j<m-1 and grid[i+1][j+1] == '*'):\n                    stars.append([i+1,j+1,1])\n                else:\n                    flag = True\n                    r = 0\n                    while(flag):\n                        r += 1\n                        if (i-r<0 or j-r<0 or i+r>=n or j+r>=m):\n                            flag = False\n                        else:\n                            if (grid[i-r][j-r] == '*' and grid[i-r][j+r] == '*' and grid[i+r][j-r] == '*' and grid[i+r][j+r] == '*'):\n                                stars.append([i+1,j+1,r+1])\n                            else:\n                                flag = False\n    if (len(stars) == 0):\n        print(\"-1\")\n    else:\n        print(len(stars))\n        for i in range(len(stars)):\n            print(stars[i][0],stars[i][1],stars[i][2])\nif __name__ == '__main__':\n    main()\n"
    },
    {
      "index": 1,
      "text": "#import math\n\ndef main():\n    n,m = map(int,input().split())\n    grid=[]\n    for i in range(n):\n        grid.append(list(input()))\n    stars=[]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]=='*':\n                if i>0 and j>0 and grid[i-1][j-1]=='*' or i>0 and grid[i-1][j]=='*' or i>0 and j<m-1 and grid[i-1][j+1]=='*' or j>0 and grid[i][j-1]=='*' or j<m-1 and grid[i][j+1]=='*' or i<n-1 and j>0 and grid[i+1][j-1]=='*' or i<n-1 and grid[i+1][j]=='*' or i<n-1 and j<m-1 and grid[i+1][j+1]=='*':\n                    stars.append([i+1,j+1,1])\n                else:\n                    flag=True\n                    r=0\n                    while flag:\n                        r += 1\n                        if i-r<0 or j-r<0 or i+r>=n or j+r>=m:\n                            flag=False\n                        else:\n                            if grid[i-r][j-r]=='*' and grid[i-r][j+r]=='*' and grid[i+r][j-r]=='*' and grid[i+r][j+r]=='*':\n                                stars.append([i+1,j+1,r+1])\n                            else:\n                                flag=False\n    if len(stars)==0:\n        print(\"-1\")\n    else:\n        print(len(stars),stars,sep=\"\\n\")\nmain()\n"
    },
    {
      "index": 2,
      "text": "\n\ndef main():\n    n,m = map(int,input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    stars = []\n    for i in range(n):\n        for j in range(m):\n                if (i>0 and j>0 and grid[i-1][j-1] == '*') or (i>0 and grid[i-1][j] == '*') or (i>0 and j<m-1 and grid[i-1][j+1] == '*') or (j>0 and grid[i][j-1] == '*') or (j<m-1 and grid[i][j+1] == '*') or (i<n-1 and j>0 and grid[i+1][j-1] == '*') or (i<n-1 and grid[i+1][j] == '*') or (i<n-1 and j<m-1 and grid[i+1][j+1] == '*'):\n                    stars.append((i+1,j+1,1))\n                else:\n                    flag = True\n                    r = 0\n                    while(flag):\n                        r += 1\n                        if (i-r<0 or j-r<0 or i+r>=n or j+r>=m):\n                            flag = False\n                        else:\n                            if (grid[i-r][j-r] == '*' and grid[i-r][j+r] == '*' and grid[i+r][j-r] == '*' and grid[i+r][j+r] == '*'):\n                                stars.append((i+1,j+1,r+1))\n                            else:\n                                flag = False\n    if (len(stars) == 0):\n        print(\"-1\")\n    else:\n        print(len(stars))\n        for i in range(len(stars)):\n            print(stars[i][0],stars[i][1],stars[i][2],sep=\" \")\nmain()\n"
    }
  ],
  "created": 1650499503,
  "object": "edit"
}
2022-04-21 00:05:26.973772 fix syntax errors 3 ['\n\ndef main():\n    n,m = map(int,input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input().strip()))\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if (grid[i][j] == \'*\'):\n                if (i>0 and j>0 and grid[i-1][j-1] == \'*\') or (i>0 and grid[i-1][j] == \'*\') or (i>0 and j<m-1 and grid[i-1][j+1] == \'*\') or (j>0 and grid[i][j-1] == \'*\') or (j<m-1 and grid[i][j+1] == \'*\') or (i<n-1 and j>0 and grid[i+1][j-1] == \'*\') or (i<n-1 and grid[i+1][j] == \'*\') or (i<n-1 and j<m-1 and grid[i+1][j+1] == \'*\'):\n                    stars.append([i+1,j+1,1])\n                else:\n                    flag = True\n                    r = 0\n                    while(flag):\n                        r += 1\n                        if (i-r<0 or j-r<0 or i+r>=n or j+r>=m):\n                            flag = False\n                        else:\n                            if (grid[i-r][j-r] == \'*\' and grid[i-r][j+r] == \'*\' and grid[i+r][j-r] == \'*\' and grid[i+r][j+r] == \'*\'):\n                                stars.append([i+1,j+1,r+1])\n                            else:\n                                flag = False\n    if (len(stars) == 0):\n        print("-1")\n    else:\n        print(len(stars))\n        for i in range(len(stars)):\n            print(stars[i][0],stars[i][1],stars[i][2])\nif __name__ == \'__main__\':\n    main()\n', '#import math\n\ndef main():\n    n,m = map(int,input().split())\n    grid=[]\n    for i in range(n):\n        grid.append(list(input()))\n    stars=[]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]==\'*\':\n                if i>0 and j>0 and grid[i-1][j-1]==\'*\' or i>0 and grid[i-1][j]==\'*\' or i>0 and j<m-1 and grid[i-1][j+1]==\'*\' or j>0 and grid[i][j-1]==\'*\' or j<m-1 and grid[i][j+1]==\'*\' or i<n-1 and j>0 and grid[i+1][j-1]==\'*\' or i<n-1 and grid[i+1][j]==\'*\' or i<n-1 and j<m-1 and grid[i+1][j+1]==\'*\':\n                    stars.append([i+1,j+1,1])\n                else:\n                    flag=True\n                    r=0\n                    while flag:\n                        r += 1\n                        if i-r<0 or j-r<0 or i+r>=n or j+r>=m:\n                            flag=False\n                        else:\n                            if grid[i-r][j-r]==\'*\' and grid[i-r][j+r]==\'*\' and grid[i+r][j-r]==\'*\' and grid[i+r][j+r]==\'*\':\n                                stars.append([i+1,j+1,r+1])\n                            else:\n                                flag=False\n    if len(stars)==0:\n        print("-1")\n    else:\n        print(len(stars),stars,sep="\\n")\nmain()\n', '\n\ndef main():\n    n,m = map(int,input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    stars = []\n    for i in range(n):\n        for j in range(m):\n                if (i>0 and j>0 and grid[i-1][j-1] == \'*\') or (i>0 and grid[i-1][j] == \'*\') or (i>0 and j<m-1 and grid[i-1][j+1] == \'*\') or (j>0 and grid[i][j-1] == \'*\') or (j<m-1 and grid[i][j+1] == \'*\') or (i<n-1 and j>0 and grid[i+1][j-1] == \'*\') or (i<n-1 and grid[i+1][j] == \'*\') or (i<n-1 and j<m-1 and grid[i+1][j+1] == \'*\'):\n                    stars.append((i+1,j+1,1))\n                else:\n                    flag = True\n                    r = 0\n                    while(flag):\n                        r += 1\n                        if (i-r<0 or j-r<0 or i+r>=n or j+r>=m):\n                            flag = False\n                        else:\n                            if (grid[i-r][j-r] == \'*\' and grid[i-r][j+r] == \'*\' and grid[i+r][j-r] == \'*\' and grid[i+r][j+r] == \'*\'):\n                                stars.append((i+1,j+1,r+1))\n                            else:\n                                flag = False\n    if (len(stars) == 0):\n        print("-1")\n    else:\n        print(len(stars))\n        for i in range(len(stars)):\n            print(stars[i][0],stars[i][1],stars[i][2],sep=" ")\nmain()\n']
2022-04-21 00:05:26.973836 size on output set 3
