["n = int(input())\n\n\ndef f(n, s):\nmemo = {}\n\n    if s in memo:\n        return memo[s]\n    if len(s) == 2*n:\n        return 1\n    if len(s) > 2*n:\n        return 0\n    if len(s) == 0:\n        return 1\n    if len(s) == 1:\n        return 0\n    if s[0] == '(' and s[-1] == ')':\n        return f(n, s[1:-1])\n    if s[0] == ')':\n        return f(n, s[1:])\n    if s[-1] == '(':\n        return f(n, s[:-1])\n    return f(n, s[1:]) + f(n, s[:-1])\n\nprint(f(n, input()) % 1000000007)\n", "#include <bits/stdc++.h>\n\nn = int(input())\ns = input()\n\n#define P pair<int, int>\n\nunordered_map<string, int> memo;\n\ndef f(n, s):\n    if s in memo:\n        return memo[s]\n    if len(s) == 2*n:\n        return 1\n    if len(s) > 2*n:\n        return 0\n    if len(s) == 0:\n        return 1\n    if len(s) == 1:\n        return 0\n    if s[0] == '(' && s[-1] == ')':\n        return f(n, s[1:-1])\n    if s[0] == ')':\n        return f(n, s[1:])\n    if s[-1] == '(':\n        return f(n, s[:-1])\n    return f(n, s[1:]) + f(n, s[:-1])\n\nprint(f(n, s) % 1000000007)\n", "\n# \n# import sys\n# import math\n#\n# def main():\n#     n = int(input())\n#     s = input()\n#     l = len(s)\n#     dp = [[0] * (n+1) for i in range(l+1)]\n#     ans = 0\n#     for i in range(l):\n#         if s[i] == '(':\n#             dp[i][0] = 1\n#     for i in range(l):\n#         for j in range(n):\n#             if dp[i][j] == 0:\n#                 continue\n#             if s[i] == '(':\n#                 dp[i+1][j] += dp[i][j]\n#                 dp[i+1][j+1] += dp[i][j]\n#             else:\n#                 if j > 0:\n#                     dp[i+1][j-1] += dp[i][j]\n#     for i in range(n+1):\n#         ans += dp[l][i]\n#     print(ans)\n#\n# if __name__ == \"__main__\":\n#     main()\n", "\n\nimport sys\nimport collections\n\nsys.setrecursionlimit(1000000)\nMOD = 10 ** 9 + 7\ninput = lambda: sys.stdin.readline().strip()\nNI = lambda: int(input())\nNMI = lambda: map(int, input().split())\nNLI = lambda: list(NMI())\nSI = lambda: input()\n\n\ndef make_grid(h, w, num): return [[int(num)] * w for _ in range(h)]\n\n\ndef main():\n    N = NI()\n    A = NLI()\n    B = NLI()\n    C = NLI()\n    A.sort()\n    B.sort()\n    C.sort()\n\n    ans = 0\n    for i in range(N):\n        b = B[i]\n\n        a_idx = bisect.bisect_left(A, b)\n        c_idx = N - bisect.bisect_right(C, b)\n\n        ans += a_idx * c_idx\n\n    print(ans)\n\nimport math\n\ndef main():\n    main()\n\n\nif __name__ == \"__main__\":\n    main()\n", "\n\ndef f(n, s):\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        return 1\n    if s[0] == '(' and s[-1] == ')':\n        return f(n, s[1:-1])\n    if s[0] == ')':\n        return f(n, s[1:])\n    if s[-1] == '(':\n        return f(n, s[:-1])\n    return f(n, s[1:]) + f(n, s[:-1])\n\nprint(f(int(input()),input()))\n", "\nimport sys\nimport math\n\ndef main():\n    n = int(input())\n    s = input()\n    l = len(s)\n    dp = [[0] * (n + 1) for i in range(l + 1)]\n    ans = 0\n    for i in range(l):\n        if s[i] == '(':\n            dp[i][0] = 1\n    for i in range(l):\n        for j in range(n):\n            if dp[i][j] == 0:\n                continue\n            if s[i] == '(':\n                dp[i + 1][j] += dp[i][j]\n                dp[i + 1][j + 1] += dp[i][j]\n            else:\n                if j > 0:\n                    dp[i + 1][j - 1] += dp[i][j]\n    for i in range(n + 1):\n        ans += dp[l][i]\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n"]