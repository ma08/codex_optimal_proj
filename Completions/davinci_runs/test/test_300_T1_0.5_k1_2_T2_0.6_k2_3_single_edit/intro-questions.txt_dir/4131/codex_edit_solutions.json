["\n\ndef main():\n    N, M = map(int, input().split())\n    prefecture_cities = [[] for _ in range(N)]\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefecture_cities[P - 1].append(Y)\n    for P, cities in enumerate(prefecture_cities):\n        cities = sorted(cities)\n        for i, city in enumerate(cities):\n            print('{:>06}{:>06}'.format(P, i))\n\nif __name__ == '__main__':\n    main()\n", "\ndef main():\n    N, M = map(int, input().split())\n    from collections import defaultdict\n    prefecture_cities = defaultdict(list)\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefecture_cities[P].append(Y)\n    for P, cities in prefecture_cities.items():\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:>06}{:>06}'.format(P, i))\n\nif __name__ == '__main__':\n    main()\n", "\nfrom collections import defaultdict\n\ndef main():\n    N, M = map(int, input().split())\n    prefecture_cities = defaultdict(list)\n    for _ in range(M):\n        P, Y = map(int, input().split())\n        prefecture_cities[P].append(Y)\n    for P, cities in prefecture_cities.items():\n        cities.sort()\n        for i, city in enumerate(cities, 1):\n            print('{:>06}{:>06}'.format(P, i))\n\nif __name__ == '__main__':\n    main()\n", "\nN, M = map(int, input().split())\ncities = []\nfor i in range(M):\n    cities.append(list(map(int, input().split())))\n\ncities.sort(key=lambda x: x[1])\n\nprefectures = [[] for _ in range(N+1)]\n\nfor city in cities:\n    prefectures[city[0]].append(city[1])\n\nfor i in range(1, N+1):\n    prefectures[i].sort()\n    for j in range(len(prefectures[i])): print(str(i).zfill(6) + str(j+1).zfill(6))\n", "import math\nimport random\n\n\nN, M, Q = map(int, input().split())\n\n# \u554f\u984c\u6587\u306e\u4f8b\u3067\u306f\u3001\u6700\u521d\u306eM\u884c\u3067\u5165\u529b\u3059\u308b\u30c7\u30fc\u30bf\u304c\u7a7a\u884c\u3067\u533a\u5207\u3089\u308c\u3066\u3044\u308b\n# \u3057\u304b\u3057\u3001\u3053\u306e\u554f\u984c\u3067\u306f\u305d\u306e\u5fc5\u8981\u306f\u306a\u3044\u306e\u3067\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\n# for i in range(M):\n#     input()\n\n# \u554f\u984c\u6587\u306e\u4f8b\u3067\u306f\u3001\u6700\u5f8c\u306eQ\u884c\u3067\u5165\u529b\u3059\u308b\u30c7\u30fc\u30bf\u304c\u7a7a\u884c\u3067\u533a\u5207\u3089\u308c\u3066\u3044\u308b\n# \u3057\u304b\u3057\u3001\u3053\u306e\u554f\u984c\u3067\u306f\u305d\u306e\u5fc5\u8981\u306f\u306a\u3044\u306e\u3067\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\n# for i in range(Q):\n#     input()\n\n# \u554f\u984c\u6587\u306e\u4f8b\u3067\u306f\u3001\u6700\u521d\u306eM\u884c\u3067\u5165\u529b\u3059\u308b\u30c7\u30fc\u30bf\u304c\u7a7a\u884c\u3067\u533a\u5207\u3089\u308c\u3066\u3044\u308b\n# \u3057\u304b\u3057\u3001\u3053\u306e\u554f\u984c\u3067\u306f\u305d\u306e\u5fc5\u8981\u306f\u306a\u3044\u306e\u3067\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\n# for i in range(M):\n#     input()\n\n# \u554f\u984c\u6587\u306e\u4f8b\u3067\u306f\u3001\u6700\u5f8c\u306eQ\u884c\u3067\u5165\u529b\u3059\u308b\u30c7\u30fc\u30bf\u304c\u7a7a\u884c\u3067\u533a\u5207\u3089\u308c\u3066\u3044\u308b\n# \u3057\u304b\u3057\u3001\u3053\u306e\u554f\u984c\u3067\u306f\u305d\u306e\u5fc5\u8981\u306f\u306a\u3044\u306e\u3067\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\n# for i in range(Q):\n#     input()\n"]