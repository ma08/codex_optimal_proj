"""
-----PROBLEM-----

Polycarp analyzes the prices of the new berPhone. At his disposal are the prices for $n$ last days: $a_1, a_2, \dots, a_n$, where $a_i$ is the price of berPhone on the day $i$.

Polycarp considers the price on the day $i$ to be bad if later (that is, a day with a greater number) berPhone was sold at a lower price. For example, if $n=6$ and $a=[3, 9, 4, 6, 7, 5]$, then the number of days with a bad price is $3$ — these are days $2$ ($a_2=9$), $4$ ($a_4=6$) and $5$ ($a_5=7$).

Print the number of days with a bad price.

You have to answer $t$ independent data sets.


-----Input-----

The first line contains an integer $t$ ($1 \le t \le 10000$) — the number of sets of input data in the test. Input data sets must be processed independently, one after another.

Each input data set consists of two lines. The first line contains an integer $n$ ($1 \le n \le 150000$) — the number of days. The second line contains $n$ integers $a_1, a_2, \dots, a_n$ ($1 \le a_i \le 10^6$), where $a_i$ is the price on the $i$-th day.

It is guaranteed that the sum of $n$ over all data sets in the test does not exceed $150000$.


-----Output-----

Print $t$ integers, the $j$-th of which should be equal to the number of days with a bad price in the $j$-th input data set.


-----Example-----
Input
5
6
3 9 4 6 7 5
1
1000000
2
2 1
10
31 41 59 26 53 58 97 93 23 84
7
3 2 1 2 3 4 5

Output
3
0
1
8
2
"""
What's the best way to solve this problem?

The best way to solve this problem is to use a stack.

We can keep track of the prices in a stack, and for each price we pop off the stack, we check if the price is lower than the price at the top of the stack. If it is, then we know that the price is bad.

We can also keep track of the indices in the stack, so that we can print out the indices of the bad prices.

Here is some pseudocode for the algorithm:

def find_bad_prices(prices):

stack = []

for i in range(len(prices)):
    while stack and prices[i] < prices[stack[-1]]:
        bad_price = stack.pop()
        print("Price at index " + str(bad_price) + " is bad")

stack.append(i)

return stack

prices = [3, 9, 4, 6, 7, 5]
find_bad_prices(prices)
