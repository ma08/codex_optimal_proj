["def find_longest_palindrome(arr):\n    \"\"\"\n    Function to find the longest palindrome in an array\n    :param arr: array to find palindrome in\n    :return: length of longest palindrome\n    \"\"\"\n    n = len(arr)\n    # create 2d array of size n*n\n    table = [[0 for _ in range(n)] for _ in range(n)]\n\n    # all strings of length 1 are palindromes\n    max_length = 1\n    for i in range(n):\n        table[i][i] = True\n\n    # check for strings of length 2\n    start = 0\n    for i in range(n - 1):\n        if arr[i] == arr[i + 1]:\n            table[i][i + 1] = True\n            start = i\n            max_length = 2\n\n    # check for strings greater than length 2\n    for k in range(3, n + 1):\n        for i in range(n - k + 1):\n            j = i + k - 1\n            if table[i + 1][j - 1] and arr[i] == arr[j]:\n                table[i][j] = True\n                if k > max_length:\n                    start = i\n                    max_length = k\n\n    return max_length\n\n\nif __name__ == \"__main__\":\n    # take in number of test cases\n    t = int(input())\n    # iterate over test cases\n    for _ in range(t):\n        # take in array length\n        n = int(input())\n        # take in array\n        arr = list(map(int, input().split()))\n        # print the length of the longest palindrome\n        print(find_longest_palindrome(arr))", "def find_longest_palindrome(arr):\n    \"\"\"\n    Function to find the longest palindrome in an array\n    :param arr: array to find palindrome in\n    :return: length of longest palindrome\n    \"\"\"\n    n = len(arr)\n    # create 2d array of size n*n\n    table = [[0 for _ in range(n)] for _ in range(n)]\n\n    # all strings of length 1 are palindromes\n    max_length = 1\n    for i in range(n):\n        table[i][i] = True\n\n    # check for strings of length 2\n    start = 0\n    for i in range(n - 1):\n        if arr[i] == arr[i + 1]:\n            table[i][i + 1] = True\n            start = i\n            max_length = 2\n\n    # check for strings greater than length 2\n    for k in range(3, n + 1):\n        for i in range(n - k + 1):\n            j = i + k - 1\n            if table[i + 1][j - 1] and arr[i] == arr[j]:\n                table[i][j] = True\n                if k > max_length:\n                    start = i\n                    max_length = k\n\n    return max_length\n\n\nif __name__ == \"__main__\":\n    # take in number of test cases\n    t = int(input())\n    # iterate over test cases\n    for _ in range(t):\n        # take in array length\n        n = int(input())\n        # take in array\n        arr = list(map(int, input().split()))\n        # print the length of the longest palindrome\n        print(find_longest_palindrome(arr))", "from collections import Counter\n\nt = int(input())\n\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a_counter = Counter(a)\n    a_max = max(a_counter, key = a_counter.get)\n    max_len = a_counter[a_max]\n    if a_counter[a_max] >= 2:\n        max_len = max_len + 1\n    print(max_len)"]