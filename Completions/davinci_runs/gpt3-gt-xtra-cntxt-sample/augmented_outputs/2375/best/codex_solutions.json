["def max_three_block_palindrome(arr):\n    n = len(arr)\n\n    # Create a 2d array where dp[i][j] is the length of the longest\n    # three blocks palindrome that includes a_i and a_j.\n    dp = [[0 for j in range(n)] for i in range(n)]\n\n    for i in range(n):\n        for j in range(n):\n            # If i is greater than j, then dp[i][j] is 0.\n            if i > j:\n                dp[i][j] = 0\n            # If i is equal to j, then dp[i][j] is 1.\n            elif i == j:\n                dp[i][j] = 1\n            # If a_i is equal to a_j, then dp[i][j] is 2.\n            elif arr[i] == arr[j]:\n                dp[i][j] = 2\n            # If a_i is not equal to a_j, then dp[i][j] is the maximum\n            # of dp[i+1][j], dp[i][j-1], dp[i+1][j-1] + 2.\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1], dp[i+1][j-1] + 2)\n\n    return dp[0][n-1]\n\n\ndef main():\n    # Read the number of test cases.\n    t = int(input())\n\n    # Iterate over the test cases.\n    for i in range(t):\n        # Read the array length.\n        n = int(input())\n        # Read the array.\n        arr = list(map(int, input().split()))\n\n        # Print the result.\n        print(max_three_block_palindrome(arr))\n\n\nif __name__ == '__main__':\n    main()", "def threeBlockPalindrome(a):\n    n = len(a)\n    f = [[0] * n for _ in range(n)]\n    for i in range(n):\n        f[i][i] = 1\n    for i in range(n-1):\n        if a[i] == a[i+1]:\n            f[i][i+1] = 2\n        else:\n            f[i][i+1] = 1\n    for l in range(3, n+1):\n        for i in range(n-l+1):\n            j = i + l - 1\n            if a[i] == a[j]:\n                f[i][j] = f[i+1][j-1] + 2\n            else:\n                f[i][j] = max(f[i+1][j], f[i][j-1], f[i+1][j-1])\n    return f[0][n-1]\n\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        print(threeBlockPalindrome(a))", "def three_block_palindrome(a):\n    \"\"\"\n    :param a:\n    :return:\n    \"\"\"\n    n = len(a)\n    f = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(i, n):\n            if i == j:\n                f[i][j] = 1\n            elif a[i] == a[j]:\n                f[i][j] = 2\n            else:\n                f[i][j] = max(f[i + 1][j], f[i][j - 1], f[i + 1][j - 1] + 2)\n    return f[0][n - 1]\n\n\nif __name__ == '__main__':\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = [int(x) for x in input().split()]\n        print(three_block_palindrome(a))"]