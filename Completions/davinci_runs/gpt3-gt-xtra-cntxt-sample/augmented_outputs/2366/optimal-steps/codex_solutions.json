["def get_num_bad_prices(array):\n    array.sort()\n    num_bad_prices = 0\n    min_price = array[0]\n    for price in array:\n        if price < min_price:\n            num_bad_prices += 1\n        min_price = min(min_price, price)\n    return num_bad_prices\n\ndef main():\n    num_test_cases = int(input())\n    for _ in range(num_test_cases):\n        num_days = int(input())\n        prices = [int(x) for x in input().split()]\n        print(get_num_bad_prices(prices))\n\nif __name__ == \"__main__\":\n    main()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    min_price = a[0]\n    bad_prices = 0\n    for j in range(1, n):\n        if a[j] < min_price:\n            bad_prices += 1\n        else:\n            min_price = a[j]\n    print(bad_prices)", "# Implementation of Merge Sort\ndef merge_sort(array):\n\n    if len(array) > 1:\n        # Dividing the array into two halves\n        mid = len(array) // 2\n        left = array[:mid]\n        right = array[mid:]\n\n        # Recursively sort the two halves\n        merge_sort(left)\n        merge_sort(right)\n\n        # Initialize the indices\n        i = 0\n        j = 0\n        k = 0\n\n        # Merge the two halves\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                array[k] = left[i]\n                i += 1\n            else:\n                array[k] = right[j]\n                j += 1\n            k += 1\n\n        # Merge the remaining elements in the left half\n        while i < len(left):\n            array[k] = left[i]\n            i += 1\n            k += 1\n\n        # Merge the remaining elements in the right half\n        while j < len(right):\n            array[k] = right[j]\n            j += 1\n            k += 1\n\n# Solution to the problem\ndef bad_prices(array):\n    merge_sort(array)\n    min_price = array[0]\n    bad_price_count = 0\n    for i in range(1, len(array)):\n        if array[i] < min_price:\n            bad_price_count += 1\n        else:\n            min_price = array[i]\n    return bad_price_count\n\n# Driver code\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    array = list(map(int, input().split()))\n    print(bad_prices(array))"]