["\ndef getRobots(n, m, colors, directions):\n    robots = 0\n    blackCells = 0\n\n    # Place a robot in the top left cell\n    if colors[0][0] == '0':\n        blackCells += 1\n    robots += 1\n\n    # Place a robot in the bottom right cell\n    if colors[n-1][m-1] == '0':\n        blackCells += 1\n    robots += 1\n\n    # Place a robot in the top right cell\n    if colors[0][m-1] == '0':\n        blackCells += 1\n    robots += 1\n\n    # Place a robot in the bottom left cell\n    if colors[n-1][0] == '0':\n        blackCells += 1\n    robots += 1\n\n    return [robots, blackCells]\n\n\ndef main():\n    t = int(input())\n    for test in range(t):\n        n, m = [int(x) for x in input().split()]\n        colors = []\n        directions = []\n        for i in range(n):\n            colors.append(input())\n        for i in range(n):\n            directions.append(input())\n        print(\" \".join([str(x) for x in getRobots(n, m, colors, directions)]))\n\nif __name__ == \"__main__\":\n    main()", "import sys\n\ndef max_robots(n, m, c, s):\n    \"\"\"\n    Function to determine the maximum number of robots that can be placed\n    in a grid of size n x m with colors c and directions s.\n\n    The function also returns the maximum number of black cells that can be\n    occupied by the robots before they start to move.\n    \"\"\"\n\n    # The maximum number of robots that we can place is the minimum of n and m.\n    max_robots = min(n, m)\n\n    # The maximum number of black cells that we can occupy is the sum of the\n    # first row and the first column.\n    max_black_cells = sum(c[0]) + sum([c[i][0] for i in range(n)])\n\n    return max_robots, max_black_cells\n\nt = int(sys.stdin.readline())\n\nfor _ in range(t):\n    n, m = map(int, sys.stdin.readline().split())\n    c = [list(map(int, list(sys.stdin.readline().strip()))) for i in range(n)]\n    s = [list(sys.stdin.readline().strip()) for i in range(n)]\n    max_robots, max_black_cells = max_robots(n, m, c, s)\n    print(\"{} {}\".format(max_robots, max_black_cells))", "def solve(n, m, c, s):\n    \"\"\"Solves the problem\"\"\"\n    # Place robots in the order described in the problem statement\n    robots = [(0,0), (n-1, m-1), (0, m-1), (n-1, 0)]\n\n    # Count the number of robots\n    num_robots = 0\n    for i, j in robots:\n        if i >= 0 and i < n and j >= 0 and j < m:\n            num_robots += 1\n\n    # Count the number of black cells\n    num_black = 0\n    for i, j in robots:\n        if i >= 0 and i < n and j >= 0 and j < m:\n            if c[i][j] == '0':\n                num_black += 1\n\n    return num_robots, num_black\n\ndef main():\n    \"\"\"Main\"\"\"\n    t = int(input())\n    for _ in range(t):\n        n, m = [int(x) for x in input().split()]\n        c = []\n        s = []\n        for _ in range(n):\n            c.append(list(input()))\n        for _ in range(n):\n            s.append(list(input()))\n        print(*solve(n, m, c, s))\n\nmain()"]