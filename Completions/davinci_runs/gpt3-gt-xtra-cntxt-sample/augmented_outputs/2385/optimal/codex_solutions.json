["t = int(input())\n\nfor case in range(t):\n    n, m = map(int, input().split())\n\n    # Create a 2D array to store the color of each cell\n    colors = []\n    for i in range(n):\n        colors.append(input())\n\n    # Create a 2D array to store the direction of each cell\n    directions = []\n    for i in range(n):\n        directions.append(input())\n\n    # List to store the number of black cells occupied by the robots before all movements\n    black_count = []\n\n    # List to store the number of robots placed\n    robot_count = []\n\n    # Loop through each cell\n    for i in range(n):\n        for j in range(m):\n            # If the cell is black\n            if colors[i][j] == \"0\":\n                # If the robot can move to the right\n                if j + 1 < m and directions[i][j] == \"R\":\n                    # If the cell to the right is black\n                    if colors[i][j + 1] == \"0\":\n                        # Place the robot in the cell\n                        colors[i][j] = \"2\"\n                        # Place the robot in the cell to the right\n                        colors[i][j + 1] = \"2\"\n                        # Increment the number of robots placed\n                        robot_count.append(1)\n                        # Increment the number of black cells occupied by the robots before all movements\n                        black_count.append(2)\n                # If the robot can move down\n                if i + 1 < n and directions[i][j] == \"D\":\n                    # If the cell below is black\n                    if colors[i + 1][j] == \"0\":\n                        # Place the robot in the cell\n                        colors[i][j] = \"2\"\n                        # Place the robot in the cell below\n                        colors[i + 1][j] = \"2\"\n                        # Increment the number of robots placed\n                        robot_count.append(1)\n                        # Increment the number of black cells occupied by the robots before all movements\n                        black_count.append(2)\n\n    # Print the maximum number of robots placed\n    print(max(robot_count), max(black_count))", "from sys import stdin\nfrom queue import PriorityQueue\nfrom collections import defaultdict\n\nclass Node:\n    def __init__(self, x, y, color, direction):\n        self.x = x\n        self.y = y\n        self.color = color\n        self.direction = direction\n\ndef next_direction(d):\n    if d == 'U':\n        return 'R'\n    elif d == 'R':\n        return 'D'\n    elif d == 'D':\n        return 'L'\n    elif d == 'L':\n        return 'U'\n\ndef is_valid_move(x, y, n, m):\n    if x >= 0 and x < n and y >= 0 and y < m:\n        return True\n    return False\n\ndef next_move(x, y, d):\n    if d == 'U':\n        return (x-1, y)\n    elif d == 'R':\n        return (x, y+1)\n    elif d == 'D':\n        return (x+1, y)\n    elif d == 'L':\n        return (x, y-1)\n\ndef get_next_move(x, y, n, m, d, grid):\n    if d == 'U':\n        if is_valid_move(x, y, n, m) and grid[x][y].direction != 'D':\n            return (x-1, y)\n    elif d == 'R':\n        if is_valid_move(x, y, n, m) and grid[x][y].direction != 'L':\n            return (x, y+1)\n    elif d == 'D':\n        if is_valid_move(x, y, n, m) and grid[x][y].direction != 'U':\n            return (x+1, y)\n    elif d == 'L':\n        if is_valid_move(x, y, n, m) and grid[x][y].direction != 'R':\n            return (x, y-1)\n    return None\n\ndef get_cycle(x, y, n, m, d, grid):\n    cycle = []\n    while True:\n        cycle.append((x, y))\n        next_move_ = get_next_move(x, y, n, m, d, grid)\n        if next_move_ == None:\n            break\n        x, y = next_move_\n        d = next_direction(d)\n    return cycle\n\ndef get_cycles(n, m, grid):\n    cycles = []\n    for i in range(n):\n        for j in range(m):\n            cycle = get_cycle(i, j, n, m, grid[i][j].direction, grid)\n            if len(cycle) > 0:\n                cycles.append(cycle)\n    return cycles\n\ndef get_robot_placements(n, m, grid):\n    cycles = get_cycles(n, m, grid)\n    placements = []\n    for cycle in cycles:\n        if len(cycle) == 2:\n            placements.append(cycle)\n    return placements\n\ndef get_black_cells_before_movement(placement, n, m, grid):\n    x, y = placement[0]\n    return grid[x][y].color\n\ndef get_max_black_cells_before_movement(n, m, grid):\n    placements = get_robot_placements(n, m, grid)\n    black_cells = 0\n    for placement in placements:\n        black_cells += int(get_black_cells_before_movement(placement, n, m, grid))\n    return black_cells\n\ndef get_max_robots(n, m, grid):\n    placements = get_robot_placements(n, m, grid)\n    return len(placements)\n\ndef solve(n, m, grid):\n    return get_max_robots(n, m, grid), get_max_black_cells_before_movement(n, m, grid)\n\ndef get_input():\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, m = [int(x) for x in stdin.readline().split()]\n        grid = []\n        for i in range(n):\n            color_row = stdin.readline().strip()\n            direction_row = stdin.readline().strip()\n            grid_row = []\n            for j in range(m):\n                grid_row.append(Node(i, j, color_row[j], direction_row[j]))\n            grid.append(grid_row)\n        yield (n, m, grid)\n\ndef main():\n    for n, m, grid in get_input():\n        print(\"{} {}\".format(*solve(n, m, grid)))\n\nif __name__ == '__main__':\n    main()", "import sys\n\ndef test_case():\n    n, m = map(int, sys.stdin.readline().split())\n    c = []\n    s = []\n    for i in range(n):\n        c.append(sys.stdin.readline()[:-1])\n    for i in range(n):\n        s.append(sys.stdin.readline()[:-1])\n    num_robots = 0\n    num_black_cells = 0\n    for i in range(n):\n        for j in range(m):\n            if s[i][j] == 'U':\n                if i > 0 and s[i-1][j] != 'D':\n                    num_robots += 1\n                    num_black_cells += c[i][j] == '0'\n            elif s[i][j] == 'R':\n                if j < m-1 and s[i][j+1] != 'L':\n                    num_robots += 1\n                    num_black_cells += c[i][j] == '0'\n            elif s[i][j] == 'D':\n                if i < n-1 and s[i+1][j] != 'U':\n                    num_robots += 1\n                    num_black_cells += c[i][j] == '0'\n            elif s[i][j] == 'L':\n                if j > 0 and s[i][j-1] != 'R':\n                    num_robots += 1\n                    num_black_cells += c[i][j] == '0'\n    print(num_robots, num_black_cells)\n\nt = int(sys.stdin.readline())\nfor i in range(t):\n    test_case()"]