"""
Given n, how many structurally unique BST's (binary search trees) that store values 1 ...Â n?

Example:


Input: 3
Output: 5
Explanation:
Given n = 3, there are a total of 5 unique BST's:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
"""
--------------------------
{
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "\n\nclass Solution:\n    def numTrees(self, n: int) -> int:\n        dp = [0] * (n+1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n+1):\n            for j in range(1, i+1):\n                dp[i] += dp[j-1] * dp[i-j]\n        return dp[n]"
    }
  ],
  "created": 1648490926,
  "id": "cmpl-4qo5GahO3Is4ECZXwb4YmcOriZVF4",
  "model": "code-davinci:002",
  "object": "text_completion"
}
REASON stop
