["class Solution:\n     def searchMatrix(self, matrix, target):\n         \"\"\"\n         :type matrix: List[List[int]]\n         :type target: int\n         :rtype: bool\n         \"\"\"\n         if not matrix or target is None:\n             return False\n \n         rows, cols = len(matrix), len(matrix[0])\n         low, high = 0, rows * cols - 1\n         \n         while low <= high:\n             mid = (low + high) // 2\n             num = matrix[mid // cols][mid % cols]\n \n             if num == target:\n                 return True\n             elif num < target:\n                 low = mid + 1\n             else:\n                 high = mid - 1\n         \n         return False\n", "class Solution:\n     def searchMatrix(self, matrix, target):\n         \"\"\"\n         :type matrix: List[List[int]]\n         :type target: int\n         :rtype: bool\n         \"\"\"\n         def get(now, n):\n             x = now//n\n             y = now%n\n             return matrix[x][y]\n             \n         m = len(matrix)\n         if m == 0:\n             return False\n         n = len(matrix[0])\n         if n == 0:\n             return False\n         \n         i = 0\n         j = m * n - 1\n         while(i <= j):\n             mid = (i + j)//2\n             if get(mid, n) == target:\n                 return True\n             elif get(mid, n) < target:\n                 i = mid + 1\n             else:\n                 j = mid - 1\n         return False\n     \n", "class Solution:\n     def findRow(self, matrix, target, l, h):\n         if l > h:\n             return -1\n         \n         elif l == h:\n             return h\n         \n         mid = l + int((h-l)/2)\n         \n         if matrix[mid][0] <= target <= matrix[mid][-1]:\n             return mid\n         elif matrix[l][0] <= target < matrix[mid][0]:\n             return self.findRow(matrix, target, l, mid-1)\n         else:\n             return self.findRow(matrix, target, mid+1, h)\n         \n     def bSearch(self, arr, target, l, h):\n         if l > h:\n             return -1\n         \n         mid = l + int((h-l)/2)\n         \n         if arr[mid] == target:\n             return mid\n         elif arr[l] <= target < arr[mid]:\n             return self.bSearch(arr, target, l, mid-1)\n         else:\n             return self.bSearch(arr, target, mid+1, h)\n     \n     def searchMatrix(self, matrix, target):\n         rows = len(matrix)\n         if rows == 0:\n             return False\n         cols = len(matrix[0])\n         \n         inRow = self.findRow(matrix, target, 0, rows-1)\n         print(('row present in %s' %inRow))\n         arr = matrix[inRow]\n         \n         index = self.bSearch(arr, target, 0, cols-1)\n         print(('present at index %s' %index))\n         \n         if index != -1:\n             return True\n         \n         return False\n         \n         \n", "class Solution:\n     def searchMatrix(self, matrix, target):\n         \"\"\"\n         :type matrix: List[List[int]]\n         :type target: int\n         :rtype: bool\n         \"\"\"\n         print((len(matrix)))\n         if(len(matrix)==0):\n             return False\n         if len(matrix)==1 and len(matrix[0])==0:\n             return False\n         existFlag=0\n         last=len(matrix[0])-1\n         for i in range(len(matrix)):\n             if matrix[i][last]<target:\n                 continue\n             else:\n                 print(\"falg set to 1\")\n                 existFlag=1\n                 break\n         if existFlag==1:\n             #existFlag=0\n             print(\"yes it is 1\")\n             for j in range(last,-1,-1):\n                 print((\"j= \",j))\n                 if matrix[i][j]==target:\n                     return True\n         return False\n", "class Solution:\n     def searchMatrix(self, matrix, target):\n         \"\"\"\n         :type matrix: List[List[int]]\n         :type target: int\n         :rtype: bool\n         \"\"\"\n         row = len(matrix)\n         if row == 0:\n             return False\n         column = len(matrix[0])\n         if column == 0:\n             return False\n         i = 0\n         while i < row:\n             if target <= matrix[i][column-1]:\n                 for j in range(column-1,-1,-1):\n                     if matrix[i][j] == target:\n                         return True\n                     else:\n                         pass\n                 return False\n             else:\n                 i += 1\n         return False\n", "class Solution:\n     def searchMatrix(self, matrix, target):\n         \"\"\"\n         :type matrix: List[List[int]]\n         :type target: int\n         :rtype: bool\n         \"\"\"\n         i = 0\n         \n         if(len(matrix) == 0 or len(matrix[0]) == 0):\n             return False\n         while(i< len(matrix)):\n             if(matrix[i][0]>target):\n                 break\n             i += 1\n         i -= 1\n       \n         \n         target_vector = matrix[i]\n         l = 0\n         r = len(target_vector)-1\n         while(l<=r):\n             mid = (l+r)//2\n             print((target_vector[mid]))\n             if(target_vector[mid] == target):\n                 return True\n             if(target_vector[mid] < target):\n                 l = mid+1\n             else:\n                 r = mid-1\n         return False\n", "class Solution:\n     def searchMatrix(self, matrix, target):\n         \"\"\"\n         :type matrix: List[List[int]]\n         :type target: int\n         :rtype: bool\n         \"\"\"\n         if (not matrix) or (not matrix[0]): return False\n         i, j = 0, len(matrix[0]) - 1\n         while (i < len(matrix)) and (j >= 0): \n             if matrix[i][j] == target: \n                 return True\n             elif matrix[i][j] > target: \n                 j -= 1\n             else: \n                 i += 1\n         return False", "class Solution:\n     def searchMatrix(self, matrix, target):\n         if not matrix or target is None:\n             return False\n         n = len(matrix[0])\n         lo, hi = 0, len(matrix) * n\n         while lo < hi:\n             mid = (lo + hi) / 2\n             x = matrix[int(mid/n)][int(mid%n)]\n             if x < target:\n                 lo = mid + 1\n             elif x > target:\n                 hi = mid\n             else:\n                 return True\n         return False\n         \"\"\"\n         :type matrix: List[List[int]]\n         :type target: int\n         :rtype: bool\n         \"\"\"\n", "class Solution:\n     def searchMatrix(self, matrix, target):\n         \"\"\"\n         :type matrix: List[List[int]]\n         :type target: int\n         :rtype: bool\n         \"\"\"\n         if not matrix:\n             return False\n         row_size = len(matrix)\n         column_size = len(matrix[0])\n         \n         low = 0\n         high = row_size * column_size - 1\n         \n         while low <= high: \n             mid = (high + low) // 2\n             r, c = divmod(mid, column_size)\n             val = matrix[r][c]\n             if target == val:\n                 return True\n             elif target > val:\n                 low = mid + 1\n             else:\n                 high = mid - 1\n         \n         return False", "class Solution:\n     def searchMatrix(self, matrix, target):\n         if (not matrix) or (target is None):\n             return False\n         rows, index = len(matrix[0]), len(matrix) * len(matrix[0])\n         low, high = 0, index - 1\n         while high >= low:\n             mid = (low + high) // 2\n             item = matrix[mid // rows][mid % rows]\n             if item == target:\n                 return True\n             elif item > target:\n                 high = mid - 1\n             else:\n                 low = mid + 1\n         return False", "class Solution:\n     def searchMatrix(self, matrix, target):\n         \"\"\"\n         :type matrix: List[List[int]]\n         :type target: int\n         :rtype: bool\n         \"\"\"\n         if not matrix or len(matrix) == 0:\n             return False\n         \n         row = len(matrix)\n         col = len(matrix[0])\n         \n         if col == 0:\n             return False\n         \n        \n         l, r = 0, row * col - 1\n         while l <= r:\n             m = (l + r) >> 1\n             i, j = divmod(m, col)\n             \n             if matrix[i][j] == target:\n                 return True\n             elif target < matrix[i][j]:\n                 r = m - 1\n             else:\n                 l = m + 1\n             \n         return False\n         \n"]