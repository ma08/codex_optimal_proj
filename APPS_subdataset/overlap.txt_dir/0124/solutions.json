["class Solution:\n     def search(self, nums, target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: bool\n         \"\"\"\n         return target in nums\n", "class Solution:\n     def search(self, nums, target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: bool\n         \"\"\"\n         l,r = 0, len(nums) -1\n         while l <= r:\n             m = l+(r-l)//2\n             if nums[m] == target: return True\n             while nums[m] == nums[l] and l < m:\n                 l += 1\n             \n             if nums[l] <= nums[m]:#[l,m] is sorted\n                 if nums[l] <= target < nums[m]:\n                     r = m - 1\n                 else:\n                     l = m+1\n             else:\n                 if nums[m] < target <= nums[r]:\n                     l = m + 1\n                 else:\n                     r = m - 1\n         return False\n", "class Solution:\n     def search(self, nums, target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: bool\n         \"\"\"\n         low = 0\n         high = len(nums)-1\n         while low<=high:\n             mid = (low+high)//2\n             if nums[mid]==target:\n                 return True\n             if nums[low]<nums[mid]:\n                 if nums[low]<=target and nums[mid]>target:\n                     high = mid-1\n                 else:\n                     low= mid+1\n             elif nums[low]>nums[mid]:\n                 if nums[mid]<target and nums[high]>=target:\n                     low= mid+1\n                 else:\n                     high = mid -1\n             else:\n                 low+=1\n         return False\n", "class Solution:\n     def search(self, nums, target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: bool\n         \"\"\"\n         left, right = 0, len(nums)-1\n         while left <= right:\n             mid = (left+right) // 2\n             if nums[mid] == target:\n                 return True\n             elif nums[mid] > nums[left]:\n                 if target >= nums[left] and target < nums[mid]:\n                     right = mid\n                 else:\n                     left = mid + 1\n             elif nums[mid] < nums[left]:\n                 if target > nums[mid] and target <= nums[right]:\n                     left = mid + 1\n                 else:\n                     right = mid\n             else:\n                 left = left + 1\n                 \n         return False", "class Solution:\n     res = False\n     \n     def searchR(self, nums, target, start, end):\n         if(start > end or self.res == True):\n             return self.res\n         else:\n             mid = int((start + end) / 2)\n             print(\"Mid index: %d, Mid val: %d, Target: %d\" % (mid, nums[mid], target))\n             if(nums[mid] == target):\n                 self.res = True\n             elif(nums[start] <= nums[mid]):\n                 if(nums[mid] == nums[end]):\n                     self.searchR(nums, target, start, mid - 1)\n                     self.searchR(nums, target, mid+1, end)\n                 elif (target >= nums[start] and target <= nums[mid]):\n                     self.searchR(nums, target, start, mid - 1)\n                 else:\n                     self.searchR(nums, target, mid+1, end)\n             else:\n                 print(\"Here\")\n                 if (target >= nums[mid] and target <= nums[end]):\n                     self.searchR(nums, target, mid + 1, end)\n                 else:\n                     self.searchR(nums, target, start, mid - 1)\n             return self.res\n     \n     def search(self, nums, target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: bool\n         \"\"\"\n         res = self.searchR(nums, target, 0, (len(nums) - 1))\n         return res", "class Solution:\n     def search(self, nums, target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: bool\n         \"\"\"\n         \n         return self.bsearch(nums, target, 0, len(nums)-1)\n         \n     \n     def bsearch(self, nums, target, left, right):\n         \n         if left > right:\n             return False\n         \n         mid = (left+right)//2\n         if nums[mid] == target:\n             return True\n         \n         #print(nums[left], nums[mid], nums[right])\n         if nums[left] < nums[mid]: # left sorted\n             \n             if nums[left] <= target <= nums[mid]:\n                 return self.bsearch(nums, target, left, mid-1)\n             else:\n                 return self.bsearch(nums, target, mid+1, right)\n         \n         elif nums[mid] < nums[right]: # right sorted\n             \n             if nums[mid] <= target <= nums[right]:\n                 return self.bsearch(nums, target, mid+1, right)\n             else:\n                 return self.bsearch(nums, target, left, mid-1)\n         \n         elif nums[mid] == nums[left]:\n             return self.bsearch(nums, target, left+1, right)\n         \n         elif nums[mid] == nums[right]:\n             return self.bsearch(nums, target, left, right-1)\n         \n         \n             \n", "class Solution:\n     def search(self, nums, target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: bool\n         \"\"\"\n         if not nums:\n             return False\n         left, right = 0, len(nums) - 1\n         while nums[left] == nums[right] and left != right:\n             right -= 1\n         while left <= right:\n             mid = (left + right) // 2\n             if nums[mid] == target:\n                 return True\n             elif nums[mid] >= nums[left]:\n                 if target >= nums[left] and target < nums[mid]:\n                     right = mid - 1\n                 else:\n                     left = mid + 1\n             else:\n                 if target > nums[mid] and target <= nums[right]:\n                     left = mid + 1\n                 else:\n                     right = mid - 1\n         return False", "class Solution:\n     def search(self, nums, target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: bool\n         \"\"\"\n         start, end = 0, len(nums)-1\n         while start<=end:\n             mid = start+(end-start)//2\n             if nums[mid]==target:\n                 return True\n             while start<=end and nums[start]==nums[end]:\n                 if nums[start]==target:\n                     return True\n                 start += 1\n                 end -= 1\n             if start>end:\n                 return False\n             if nums[start]<nums[end]:\n                 #normal\n                 if target<nums[mid]:\n                     end = mid-1\n                 else:\n                     start = mid+1\n             else:\n                 if nums[mid]<nums[start]:\n                     #peak between start and mid\n                     if target<nums[mid] or target>=nums[start]:\n                         end = mid-1\n                     else:\n                         start = mid+1\n                 else:\n                     #peak between mid and end\n                     if target>nums[mid] or target<=nums[end]:\n                         start = mid+1\n                     else:\n                         end = mid-1\n         return False\n", "class Solution:\n     def search(self, nums, target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: bool\n         \"\"\"\n         if not nums:\n             return False\n         l, r = 0, len(nums)-1\n         while l < r:\n             mid = (l + r) // 2\n             if nums[mid] == target:\n                 return True\n             if nums[mid] < nums[r]:\n                 if nums[mid] < target <= nums[r]:\n                     l = mid + 1\n                 else:\n                     r = mid - 1\n             elif nums[mid] > nums[r]:\n                 if nums[l] <= target < nums[mid]:\n                     r = mid - 1\n                 else:\n                     l = mid + 1\n             else:\n                 r -= 1\n         return nums[l] == target", "class Solution:\n     def search(self, nums, target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: bool\n         \"\"\"\n         if not nums:\n             return False\n         l = 0\n         r = len(nums) - 1\n         print((\">\", l, r))\n         while l < r and nums[l] == nums[r]:\n             l = l + 1\n         while l <= r:\n             mid = int((l + r + 1) / 2)\n             if target == nums[mid]:\n                 return True\n             if target < nums[mid]:\n                 if target == nums[l]:\n                     return True\n                 elif target > nums[l]:\n                     r = mid - 1\n                 elif target < nums[l]:\n                     if nums[l] <= nums[mid]:\n                         l = mid + 1\n                     elif nums[l] > nums[mid]:\n                         r = mid - 1\n             if target > nums[mid]:\n                 if target == nums[r]:\n                     return True\n                 elif target > nums[r]:\n                     if nums[mid] >= nums[l]:\n                         l = mid + 1\n                     elif nums[mid] < nums[l]:\n                         r = mid - 1\n                 elif target < nums[r]:\n                     l = mid + 1\n         return False\n             \n                     \n", "class Solution:\n     def recursive(self, nums, left, right , target):\n         print((left, right))\n         if left > right:\n             return False\n         if left == right:\n             return nums[left] == target\n         if left + 1 == right:\n             return nums[left] == target or nums[right] == target\n         mid = (left + right) // 2\n         if nums[mid] == target:\n             return True\n         if nums[mid] == nums[left] and nums[mid] == nums[right]:\n             return self.recursive(nums, mid, right, target) or self.recursive(nums, left, mid, target)\n         else:\n             if nums[mid] < target:\n                 if nums[right] >= target or (nums[left] <= nums[mid] and nums[mid] >= nums[right]):\n                     return self.recursive(nums, mid, right, target)\n                 else:\n                     return self.recursive(nums, left, mid, target)\n             else:\n                 if nums[left] <=target or (nums[right] >= nums[mid] and nums[mid] <= nums[left]):\n                     return self.recursive(nums, left, mid, target)\n                 else:\n                     return self.recursive(nums, mid, right, target)\n             \n             \n         \n     def search(self, nums, target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: bool\n         \"\"\"\n         return self.recursive(nums, 0, len(nums) - 1, target)\n", "class Solution:\n     def search(self, nums, target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: bool\n         \"\"\"\n         if len(nums) == 0:\n             return False\n         def binary_search(leftIndex, rightIndex):\n             midIndex = int((rightIndex+leftIndex)/2)\n             if nums[midIndex] == target:\n                 return True\n             if leftIndex > rightIndex:\n                 return False\n             return binary_search(leftIndex, midIndex-1) or binary_search(midIndex+1, rightIndex)\n         return binary_search(0, len(nums)-1)\n", "class Solution:\n     def search(self, nums, target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: bool\n         \"\"\"\n         l, r = 0, len(nums) - 1\n         while l <= r:\n             mid = l + (r - l)//2\n             \n             if nums[mid] == target:\n                 return True\n             \n             while nums[mid] == nums[r]:\n                 r -= 1\n                 mid = l + (r - l)//2\n                 if r < 0:\n                     return False\n             \n             if nums[mid] == target:\n                 return True\n             \n             if nums[mid] <= nums[r]:\n                 if target > nums[mid] and target <= nums[r]:\n                     l = mid + 1\n                 else:\n                     r = mid - 1\n             else:\n                 if target < nums[mid] and target >= nums[l]:\n                     r = mid - 1\n                 else:\n                     l = mid + 1\n \n             \n         return False", "class Solution:\n     def search(self, nums, target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: bool\n         \"\"\"\n         if (not nums):\n             return False\n         i = 0\n         while (i + 1 < len(nums) and nums[i] == nums[i + 1]):\n             i += 1\n         if (i + 1 == len(nums)):\n             # nums\u4e2d\u6240\u6709\u5143\u7d20\u76f8\u7b49\n             return nums[0] == target\n         \n         # \u627e\u5230\u6700\u5927\u5143\u7d20\u7684\u4f4d\u7f6e\n         l, r = i, len(nums) - 1\n         while (l + 1 < r):\n             mid = l + (r - l) // 2\n             if (nums[i] < nums[mid]):\n                 l = mid\n             else:\n                 r = mid - 1\n         highest_pos = l if (nums[l] > nums[r]) else r\n         \n         if (target >= nums[0]):\n             return self._binarySearch(nums, 0, highest_pos, target)\n         else:\n             return self._binarySearch(nums, highest_pos + 1, len(nums) - 1, target)\n         \n         \n     def _binarySearch(self, nums, l, r, target):\n         while (l <= r):\n             mid = l + (r - l) // 2\n             if (nums[mid] < target):\n                 l = mid + 1\n             elif (nums[mid] > target):\n                 r = mid - 1\n             else:\n                 return True\n         return False\n", "class Solution:\n     def search(self, nums, target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: bool\n         \"\"\"\n         for i in nums:\n             if i == target:\n                 return True\n             \n         return False"]