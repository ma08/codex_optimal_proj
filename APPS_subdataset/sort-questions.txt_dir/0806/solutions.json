["# Why do we fall ? So we can learn to pick ourselves up.\r\n\r\n\r\n\r\n\r\nt = int(input())\r\nfor _ in range(0,t):\r\n    n = int(input())\r\n    abc = [int(i) for i in input().split()]\r\n\r\n    i = 0\r\n\r\n    lst = [n]\r\n\r\n    for _ in range(0,100):\r\n        k = str(lst[-1]/abc[i%3]).split('.')\r\n        if int(k[1][0]) > 0:\r\n            lst.append(int(k[1][0]))\r\n        else:\r\n            lst.append(int(k[0][0]))\r\n        i += 1\r\n    pattern = []\r\n    ind = 0\r\n    while len(pattern) == 0:\r\n        for i in range(ind, len(lst) - 1):\r\n            check = lst[ind: i + 1] * 50\r\n            check = check[:len(lst) - ind]\r\n            if lst[ind:] == check:\r\n                pattern = check\r\n                break\r\n        if len(pattern):\r\n            break\r\n        ind += 1\r\n    final_pattern = []\r\n    for i in range(0, len(pattern)):\r\n        couldbe = pattern[:i + 1]\r\n        check = pattern[:i + 1] * 100\r\n        check = check[:len(pattern)]\r\n        if check == pattern:\r\n            final_pattern = couldbe\r\n            break\r\n    lp = len(final_pattern)\r\n    q = int(input())\r\n    for _ in range(0, q):\r\n        qq = int(input())\r\n        if qq < ind:\r\n            print(lst[qq])\r\n        else:\r\n            qq -= ind\r\n            kk = qq % lp\r\n            print(final_pattern[kk])\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\"\"\"\r\n1\r\n56\r\n3 5 7\r\n4\r\n0\r\n1\r\n2\r\n3\r\n\r\n\"\"\"", "# Why do we fall ? So we can learn to pick ourselves up.\r\n\r\n\r\n\r\n\r\nt = int(input())\r\nfor _ in range(0,t):\r\n    n = int(input())\r\n    abc = [int(i) for i in input().split()]\r\n\r\n    i = 0\r\n\r\n    lst = [n]\r\n\r\n    for _ in range(0,100):\r\n        k = str(lst[-1]/abc[i%3]).split('.')\r\n        if int(k[1][0]) > 0:\r\n            lst.append(int(k[1][0]))\r\n        else:\r\n            lst.append(int(k[0][0]))\r\n        i += 1\r\n    pattern = []\r\n    ind = 0\r\n    while len(pattern) == 0:\r\n        for i in range(ind, len(lst) - 1):\r\n            check = lst[ind: i + 1] * 50\r\n            check = check[:len(lst) - ind]\r\n            if lst[ind:] == check:\r\n                pattern = check\r\n                break\r\n        if len(pattern):\r\n            break\r\n        ind += 1\r\n    final_pattern = []\r\n    for i in range(0, len(pattern)):\r\n        couldbe = pattern[:i + 1]\r\n        check = pattern[:i + 1] * 100\r\n        check = check[:len(pattern)]\r\n        if check == pattern:\r\n            final_pattern = couldbe\r\n            break\r\n    lp = len(final_pattern)\r\n    q = int(input())\r\n    for _ in range(0, q):\r\n        qq = int(input())\r\n        if qq < ind:\r\n            print(lst[qq])\r\n        else:\r\n            qq -= ind\r\n            kk = qq % lp\r\n            print(final_pattern[kk])\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\"\"\"\r\n1\r\n56\r\n3 5 7\r\n4\r\n0\r\n1\r\n2\r\n3\r\n\r\n\"\"\"", "t=int(input())\nfor i in range(t):\n    n=int(input())\n    q0=n\n    a,b,c=list(map(int,input().split()))\n    list1=[n]\n    k=1\n    while(len(list1)-list1.index(n)-1<3 or (len(list1)-1-list1.index(n))%3!=0):\n        if(k==1):\n            n/=a\n            k=2        \n        elif(k==2):\n            n/=b\n            k=3\n        elif(k==3):\n            n/=c\n            k=1\n        fd=str(n)[0]\n        if((int(n*10))%10!=0):\n            list1.append((int(n*10))%10)\n        else:\n            list1.append(int(fd))\n        n=list1[-1]\n    del list1[-1]\n    list2=list1[list1.index(n):]\n    for j in range(int(input())):\n        q=int(input())\n        if(q<len(list1)):\n            print(list1[q])\n        else:\n            print(list2[(q-list1.index(n))%(len(list2))])\n", "t=int(input())\nfor i in range(t):\n    n=int(input())\n    q0=n\n    a,b,c=list(map(int,input().split()))\n    list1=[n]\n    k=1\n    while(len(list1)-list1.index(n)-1<3 or (len(list1)-1-list1.index(n))%3!=0):\n        if(k==1):\n            n/=a\n            k=2        \n        elif(k==2):\n            n/=b\n            k=3\n        elif(k==3):\n            n/=c\n            k=1\n        fd=str(n)[0]\n        if((int(n*10))%10!=0):\n            list1.append((int(n*10))%10)\n        else:\n            list1.append(int(fd))\n        n=list1[-1]\n    del list1[-1]\n    list2=list1[list1.index(n):]\n    for j in range(int(input())):\n        q=int(input())\n        if(q<len(list1)):\n            print(list1[q])\n        else:\n            print(list2[(q-list1.index(n))%(len(list2))])\n", "t=int(input())\nfor i in range(t):\n    n=int(input())\n    q0=n\n    a,b,c=list(map(int,input().split()))\n    list1=[n]\n    k=1\n    while(len(list1)-list1.index(n)-1<3 or (len(list1)-1-list1.index(n))%3!=0):\n        if(k==1):\n            n/=a\n            k=2        \n        elif(k==2):\n            n/=b\n            k=3\n        elif(k==3):\n            n/=c\n            k=1\n        fd=str(n)[0]\n        if((int(n*10))%10!=0):\n            list1.append((int(n*10))%10)\n        else:\n            list1.append(int(fd))\n        n=list1[-1]\n    del list1[-1]\n    list2=list1[list1.index(n):]\n    for j in range(int(input())):\n        q=int(input())\n        if(q<len(list1)):\n            print(list1[q])\n        else:\n            print(list2[(q-list1.index(n))%(len(list2))])\n", "for i in range(int(input())):\r\n    n = int(input())\r\n    abc = list(map(int, input().split()))\r\n    query = int(input())\r\n    q = []\r\n    for j in range(query):\r\n        q.append(int(input()))\r\n    z = 0\r\n    p = 0\r\n    s = 0\r\n    wlist = [n]\r\n    while p < 30:\r\n        x = n / abc[z]\r\n        x = str(x)\r\n        if x[x.index(\".\") + 1] == \"0\":\r\n            wlist.append(int(x[0]))\r\n            n = int(x[0])\r\n        else:\r\n            wlist.append(int(x[x.index(\".\") + 1]))\r\n            n = int(x[x.index(\".\") + 1])\r\n        if n == 0:\r\n            break\r\n        z += 1\r\n        p += 1\r\n        if z > 2:\r\n            z = 0\r\n    n = 0\r\n    while True:\r\n        if wlist[n:n + 3] == wlist[n + 3:n + 6]:\r\n            s = 0\r\n            break\r\n        n += 1\r\n    # print(n, wlist)\r\n    mlist = wlist[n:n + 3]\r\n    if n >= 31:\r\n        n = 0\r\n        while True:\r\n            if wlist[n:n + 6] == wlist[n + 6:n + 12]:\r\n                s = 3\r\n                break\r\n            n += 1\r\n        mlist = wlist[n:n + 6]\r\n    if n >= 31:\r\n        n = 0\r\n        while True:\r\n            if wlist[n:n + 9] == wlist[n + 9:n + 18]:\r\n                s = 6\r\n                break\r\n            n += 1\r\n        mlist = wlist[n:n + 9]\r\n    # print(n, wlist)\r\n    for j in range(len(q)):\r\n        if q[j] > n - 1:\r\n            x = q[j] - n\r\n            y = x % 3\r\n            if s == 3:\r\n                y = x % 6\r\n            if s == 6:\r\n                y = x % 9\r\n            print(mlist[y])\r\n        else:\r\n            print(wlist[q[j]])\r\n", "import sys\r\n# sys.stdin = open('input.txt', 'r') \r\n# sys.stdout = open('output.txt', 'w')\r\n \r\nimport math\r\nimport collections\r\nfrom sys import stdin,stdout,setrecursionlimit\r\nimport bisect as bs\r\nsetrecursionlimit(2**20)\r\nM = 10**9+7\r\n    \r\nT = int(stdin.readline())\r\n# T = 1\r\n\r\ndef func(n,a):\r\n    q = n//a; r=n%a\r\n    if(r != 0):\r\n        return((10*r)//a)\r\n    else:\r\n        return(int(str(q)[0]))\r\n\r\nfor _ in range(T):\r\n    n = int(stdin.readline())\r\n    a,b,c = list(map(int,stdin.readline().split()))\r\n    # a = list(map(int,stdin.readline().split()))\r\n    # w = list(map(int,stdin.readline().split()))\r\n    # q = list(map(int,stdin.readline().split()))\r\n    # b = list(map(int,stdin.readline().split()))\r\n    # s = stdin.readline().strip('\\n')  \r\n    g = []\r\n    for i in range(11):\r\n        g.append([0,0,0])\r\n        g[i][0] = func(i,a)\r\n        g[i][1] = func(i,b)\r\n        g[i][2] = func(i,c)\r\n    l = [n]\r\n    l.append(func(l[-1],a))\r\n    l.append(func(l[-1],b))\r\n    l.append(func(l[-1],c))\r\n    cur = l[-1]; ind = 0\r\n    d = {}; st = 4\r\n    while((cur,ind) not in d):\r\n        d[(cur,ind)] = st\r\n        cur = g[cur][ind]\r\n        ind = (ind+1)%3\r\n        l.append(cur)\r\n        st += 1\r\n    st = d[(cur,ind)]; en = len(l)\r\n    sec = en-st\r\n    q = int(stdin.readline())\r\n    # print(l)\r\n    for i in range(q):\r\n        qi = int(stdin.readline())\r\n        if(qi <= st):\r\n            print(l[qi])\r\n            continue\r\n        ans = st + (qi-st)%sec\r\n        print(l[ans])    ", "T = int(input())\nfor t in range(T):\n\n\tn = int(input())\n\ty = list(map(int, input().split()))\n\tx = [n]\n\n\ti = 0\n\tprev = x[0]\n\n\tvisited = [{}, {}, {}]\n\n\telement = 1\n\tcycle_length = -1\n\tcycle_start = -1\n\twhile True:\n\t\ta = y[i]\t\n\t\t#print(i)\n\t\tmod = prev % a\n\t\tdiv = mod / a\n\t\tdigit = int(str(div)[2])\n\t\tif digit == 0:\n\t\t\tdigit = int(str(prev // a)[0])\n\n\t\tif digit in visited[i]:\n\t\t\tcycle_length = element - visited[i][digit]\n\t\t\tcycle_start = visited[i][digit]\n\t\t\tbreak\n\t\telse:\n\t\t\tvisited[i][digit] = element\n\n\t\tx.append(digit)\n\t\tprev = int(digit)\n\n\t\telement += 1\n\t\ti = (i + 1) % 3\n\n\tQ = int(input())\n\tfor q in range(Q):\n\t\tidx = int(input())\n\t\tif idx < len(x):\n\t\t\tprint(x[idx])\n\n\t\telse:\n\t\t\tidx -= cycle_start\n\t\t\tidx = idx % cycle_length\n\t\t\tprint(x[cycle_start + idx])\n"]