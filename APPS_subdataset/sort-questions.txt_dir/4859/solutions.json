["from itertools import permutations\ndef ssc_forperm(arr):\n    perms = set(p for p in permutations(arr))\n    values = [sum((x + 1) * y for x,y in enumerate(i)) for i in perms]\n    return [{\"total perm\": len(perms)}, {\"total ssc\": sum(values)}, {\"max ssc\": max(values)}, {\"min ssc\": min(values)}]", "from collections import Counter\nfrom math import factorial\nimport operator\n\ndef ssc_forperm(xs):\n    n = len(xs)\n    p = factorial(n) // reduce(operator.mul,\n        map(factorial, Counter(xs).itervalues()))\n    sxs = sorted(xs)\n    return [\n        {\"total perm\": p},\n        {\"total ssc\": (n + 1) * p * sum(xs) // 2},\n        {\"max ssc\": sum(i * x for (i, x) in enumerate(sxs, 1))},\n        {\"min ssc\": sum(i * x for (i, x) in enumerate(reversed(sxs), 1))}]", "def ssc_forperm(arr):\n    from itertools import permutations, count, imap\n    from operator import mul\n    perms = list(set(permutations(arr)))\n    scc = [sum(imap(mul, i, count(1))) for i in perms]\n    return  [{\"total perm\": len(scc)}, {\"total ssc\": sum(scc)}, {\"max ssc\": max(scc)}, {\"min ssc\": min(scc)}]", "from math import factorial as f; ssc_forperm=lambda arr: (lambda fac: [{\"total perm\": fac}, {\"total ssc\": fac*(len(arr)+1)/2*sum(arr)}, {\"max ssc\": sum([(i+1)*a for i,a in enumerate(sorted(arr))])}, {\"min ssc\": sum([(i+1)*a for i,a in enumerate(sorted(arr, reverse=True))])}])(f(len(arr))/reduce(lambda a,b: a*b, [f(arr.count(x)) for x in set(arr)]))\nfrom functools import reduce\n\n#adjusted to work also in case of 3 similar numbers or more\n", "from math import factorial as f; ssc_forperm=lambda arr: (lambda fac: [{\"total perm\": fac}, {\"total ssc\": fac*(len(arr)+1)/2*sum(arr)}, {\"max ssc\": sum([(i+1)*a for i,a in enumerate(sorted(arr))])}, {\"min ssc\": sum([(i+1)*a for i,a in enumerate(sorted(arr, reverse=True))])}])(f(len(arr))/reduce(lambda a,b: a*b, [arr.count(x) for x in set(arr)]))", "from math import factorial as fact\nfrom collections import Counter\nfrom functools import reduce\n\n\ndef ssc_forperm(arr):\n    cnt    = Counter(arr)\n    nPerms = fact(len(arr)) // reduce(int.__mul__, map(fact, cnt.values()), 1)\n    sIdx   = -~len(arr) * len(arr) >> 1\n    arr    = sorted(arr)\n    return [{\"total perm\": nPerms},\n            {\"total ssc\": sum(v * sIdx * nPerms // len(arr) for v in arr)},\n            {\"max ssc\": sum(v*i for i,v in enumerate(arr,1))},\n            {\"min ssc\": sum(v*i for i,v in enumerate(reversed(arr),1))} ]", "from itertools import permutations\n\ndef ssc_forperm(lst):\n    scores = [sum(i*n for i, n in enumerate(p, 1)) for p in set(permutations(lst))]\n    return [{\"total perm\": len(scores)}, {\"total ssc\": sum(scores)}, {\"max ssc\": max(scores)}, {\"min ssc\": min(scores)}]\n", "from collections import Counter\nfrom itertools import permutations\nfrom math import factorial\nfrom operator import mul\n\n\ndef ssc(xs):\n    return sum(i*x for i, x in enumerate(xs, 1))\n\n\ndef ssc_forperm(arr):\n    m = reduce(mul, (factorial(x) for x in Counter(arr).values()))\n    xs = [ssc(xs) for xs in permutations(arr)]\n    return [{\"total perm\":len(xs) // m}, {\"total ssc\": sum(xs) // m}, {\"max ssc\": max(xs)}, {\"min ssc\": min(xs)}]", "from itertools import permutations\ndef ssc_forperm(arr):\n    lst = [sum(n*(i+1) for i, n in enumerate(p)) for p in set(permutations(arr))]\n    return [{\"total perm\": len(lst)}, {\"total ssc\": sum(lst)}, {\"max ssc\": max(lst)}, {\"min ssc\": min(lst)}]", "from itertools import permutations\ndef ssc_forperm(arr):\n    maximum = -999999999\n    minimum =  999999999\n    total_score= [{\"total perm\":0},{\"total ssc\":0},{\"max ssc\":0},{\"min ssc\":0}]\n    lend = len(set(list(permutations(arr))))\n    permutated_list = list(set((permutations(arr))))\n    for element in permutated_list:\n        temp = 0\n        for e,i in enumerate(element,start = 1):\n            temp += e * i\n        total_score[1][\"total ssc\"] += temp\n        if temp > maximum:\n            maximum = temp\n            total_score[2][\"max ssc\"] = maximum\n        if temp < minimum:\n            minimum = temp\n            total_score[3][\"min ssc\"] = minimum\n    total_score[0][\"total perm\"] = lend\n    return total_score"]