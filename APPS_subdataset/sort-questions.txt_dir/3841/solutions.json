["from itertools import permutations\n\ndef get_words(letters):\n    word = \"\".join(qty * char for qty in letters for chars in letters[qty] for char in chars)\n    return sorted({\"\".join(permutation) for permutation in permutations(word)})", "from itertools import permutations\n\n\ndef get_words(hash_of_letters):\n    letters = \"\".join(cnt * c for cnt, cs in hash_of_letters.items() for c in cs)\n    return sorted({\"\".join(xs) for xs in permutations(letters)})", "from itertools import permutations\ndef get_words(hash_of_letters):\n    string = ''\n    for i in hash_of_letters:\n        string += ''.join(hash_of_letters[i] * i)\n    answer = set(permutations(string))\n    answer = sorted(answer)\n    for i in range(len(answer)):\n        answer[i] = ''.join(answer[i])\n    return answer", "from itertools import permutations\n\ndef get_words(hash):\n    chars = ''\n    for k,v in list(hash.items()): chars += ''.join(v)*k\n    return sorted(set(''.join(p) for p in permutations(chars)))\n", "from itertools import permutations\n\ndef get_words(dct):\n    s = ''.join(c*n for n,lst in dct.items() for c in lst)\n    return sorted( set(map(''.join, permutations(s, len(s)) )) )", "def get_words(letter_counts):\n  from itertools import permutations\n  \n  word = ''.join(count*char for count, chars in letter_counts.items() for char in chars)\n  \n  return sorted(set(map(lambda x: ''.join(x), permutations(word))))", "def get_words(d):\n    #your code here\n    from itertools import permutations\n    s = ''\n    for key in d:\n        for char in d[key]:\n            s+=char*key\n    p = permutations(s, len(s))\n    return sorted(list(set([''.join(word) for word in p])))", "from itertools import permutations;get_words=lambda d:sorted([\"\".join(i) for i in set(list(permutations(\"\".join([\"\".join([k * i for k in j]) for i, j in d.items()]))))])", "from itertools import permutations\ndef get_words(h):\n    return [''.join(p) for p in sorted(set(permutations(''.join([letter * key for key in h for letter in h[key]]))))]"]