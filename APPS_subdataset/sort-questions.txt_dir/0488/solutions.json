["class Solution:\n     def kthSmallest(self, matrix, k):\n         \"\"\"\n         :type matrix: List[List[int]]\n         :type k: int\n         :rtype: int\n         \"\"\"\n         arr = []\n         for i in matrix:\n             for j in i:\n                 arr.append(j)\n         arr.sort()\n         print(arr)\n         return arr[k-1]", "class Solution:\n     def kthSmallest(self, matrix, k):\n         \"\"\"\n         :type matrix: List[List[int]]\n         :type k: int\n         :rtype: int\n         \"\"\"\n         from heapq import heappush, heappop\n         n = len(matrix[0])\n         heap = []\n         for i in range(n):\n             heappush(heap, (matrix[0][i], 0, i))\n         for _ in range(k-1):\n             v, x, y= heappop(heap)\n             if x == n - 1:\n                 continue\n             heappush(heap, (matrix[x+1][y], x+1, y))\n         return heappop(heap)[0]", "class Solution:\n     def kthSmallest(self, matrix, k):\n         \"\"\"\n         :type matrix: List[List[int]]\n         :type k: int\n         :rtype: int\n         \"\"\"\n         \n         list = matrix[0]\n         \n         for i in range(1, len(matrix)):\n             list.extend(matrix[i])\n             \n         list.sort()\n         \n         return list[k-1]"]