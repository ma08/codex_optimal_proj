["def alpha_seq(s):\n    return \",\".join( (c * (ord(c)-96)).capitalize() for c in sorted(s.lower()) )", "def alpha_seq(string):\n    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    output = ''\n    for s in ''.join(sorted((string.lower()))):\n        output += s.upper()\n        output += s * alpha.find(s)\n        output += ','\n    return output.strip(',')", "def alpha_seq(string):\n    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    string = string.lower()\n    l = []\n    for i in sorted(string):\n      l.append(i.capitalize() + i*(alpha.find(i)))\n    return ','.join(l)", "alpha_seq=lambda s:','.join(e.upper()+e*(ord(e)-97) for e in sorted(s.lower()))", "def alpha_seq(string):\n    o = ord(\"a\") -1\n    return \",\".join((c * (ord(c) - o)).capitalize() for c in sorted(string.lower()))", "def elongate(c):\n    u = c.upper()\n    return '{0}{1}'.format(u, c.lower()*(ord(u)-65))\n    \ndef alpha_seq(s):\n    return ','.join(sorted([elongate(c) for c in s]))", "def alpha_seq(string):\n    return ','.join(a * (ord(a) - 96) for a in sorted(string.lower())).title()", "def alpha_seq(string):\n    memo, output = {}, []\n    \n    for char in sorted(string.lower()):\n        if char not in memo:\n            memo[char] = char.upper() + char * (ord(char) - 97)\n        output.append(memo[char])\n            \n    return ','.join(output)", "from string import ascii_lowercase\n\npos = {x: i for i, x in enumerate(ascii_lowercase)}\n\ndef alpha_seq(string):\n    return ','.join(x.upper() + x.lower() * pos[x] for x in sorted(string.lower()))", "alpha_seq=lambda s:','.join((c.upper()+c*(ord(c)-97))for c in sorted(s.lower()))"]