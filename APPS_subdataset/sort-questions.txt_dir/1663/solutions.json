["def count_divisors(n):\n  \"\"\"Counts the integer points under the parabola xy = n.\n\n  Because the region is symmetric about x = y, it is only necessary to sum up\n  to that point (at n^{1/2}), and double it. By this method, a square region is\n  counted twice, and thus subtracted off the total.\n  \"\"\"\n  r = int(n**(1/2))\n  return 2*sum(n // i for i in range(1, r+1)) - r*r", "count_divisors=lambda n:2*sum(n//i for i in range(1,int(n**.5)+1))-int(n**.5)**2", "def count_divisors(n):\n    return 2 * sum(n//k for k in range(int(n ** 0.5), 0, -1)) - int(n ** 0.5) ** 2", "# OEIS-A006218\ndef count_divisors(n):\n    x = int(n**0.5)\n    return 2*sum(n//y for y in range(1, x+1)) - x**2", "def count_divisors(n):\n    return 2 * sum(n // i for i in range(1, int(n ** .5) + 1 )) - int(n ** .5)**2", "def count_divisors(n):\n    sq = int(n**.5)\n    return 2 * sum(n // i for i in range(1, sq+1)) - sq**2", "def count_divisors(n):\n    rt = int(n ** .5)\n    su = 0\n\n    for k in range(1, rt + 1): su += n // k\n\n    return 2 * su - rt * rt", "import math\n\ndef count_divisors(n):\n    sum = 0\n    h = int(math.sqrt(n))\n    for i in range(1, h + 1):\n        sum += n // i\n    return 2 * sum - h * h", "def count_divisors(n): # http://oeis.org/A006218\n    sq = int(n ** .5)\n    return 2 * sum(n // i for i in range(1, sq + 1)) - sq * sq", "# Python 3.8 when\n# https://stackoverflow.com/a/53983683\ndef isqrt(n):\n    if n > 0:\n        x = 1 << (n.bit_length() + 1 >> 1)\n        while True:\n            y = (x + n // x) >> 1\n            if y >= x:\n                return x\n            x = y\n    elif n == 0:\n        return 0\n    else:\n        raise ValueError(\"square root not defined for negative numbers\")\n\ndef count_divisors(n):\n    s = isqrt(n)\n    return 2*sum(n//i for i in range(1,s+1))-s*s"]