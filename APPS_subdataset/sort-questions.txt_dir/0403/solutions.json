["class Solution:\n     def increasingTriplet(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         n1 = n2 = float('inf')\n         for n in nums:\n             if n <= n1:\n                 n1 = n\n             elif n <= n2:\n                 n2 = n\n             else:\n                 return True\n         return False", "class Solution:\n     def increasingTriplet(self, nums):\n         first = second = float('inf')\n         \n         for n in nums:\n             if n <= first:\n                 first = n\n             elif n <= second:\n                 second = n\n             else:\n                 return True\n         return False", "class Solution:\n     def increasingTriplet(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         first = second = float('inf')\n         for n in nums:\n             if n <= first:\n                 first = n\n             elif n <= second:\n                 second = n\n             else:\n                 return True\n         return False", "class Solution:\n     def increasingTriplet(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         a, b = float(\"inf\"), float(\"inf\")\n         \n         for n in nums:\n             if n > b:\n                 return True\n             elif a < n < b:\n                 b = n\n             elif n < a:\n                 a = n\n                 \n         return False", "class Solution:\n     def increasingTriplet(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         n=len(nums)\n         if n<3:\n             return False\n         forward=[nums[0]]*n\n         backward=[nums[-1]]*n\n         for i in range(1,n):\n             forward[i]=min(forward[i-1],nums[i])\n         for i in range(n-2,-1,-1):\n             backward[i]=max(backward[i+1],nums[i])\n         for i in range(n):\n             if forward[i]<nums[i]<backward[i]:\n                 return True\n         return False\n", "class Solution:\n     def increasingTriplet(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         if len(nums) < 3:\n             return False\n         \n         tails = [-2147483647, nums[0]]\n         \n         for n in nums[1:]:\n             for i in range(len(tails) - 1, -1, -1):\n                 if n > tails[i]:\n                     if len(tails) <= i + 1:\n                         tails.append(n)\n                     elif n < tails[i+1]:\n                         tails[i+1] = n\n                     \n                     if len(tails) == 4:\n                         return True\n                 print(tails)\n         \n         return False", "class Solution:\n     def increasingTriplet(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         \n         a=b=None;\n         \n         for i in nums:\n             if a is None or a>=i:\n                 a=i;\n             elif b is None or b>=i:\n                 b=i;\n             else:\n                 return True;\n             \n             \n         return False;\n", "class Solution:\n     def increasingTriplet(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         x = y = float(\"inf\")\n         \n         for n in nums:\n             if n <= x:\n                 x = n\n             elif n <= y:\n                 y = n\n             else:\n                 return True\n         \n         return False", "class Solution:\n     def increasingTriplet(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         # keep track of the two minimum elements and see if we have a element that is larger than two\n         if len(nums) < 3:\n             return False\n         \n         minN = nums[0]\n         minSecond = None\n         \n         for i in range(1, len(nums)):\n             if type(minSecond) == int and nums[i] > minSecond:\n                 return True\n             \n             if minN < nums[i]:  \n                 if type(minSecond) == int and minSecond > nums[i]:\n                     minSecond = nums[i]\n                 elif not type(minSecond) == int:\n                     minSecond = nums[i]\n             \n             minN = min(minN, nums[i])\n             \n             \n         return False", "class Solution:\n     def increasingTriplet(self, nums):\n         \n         if len(nums) == 0:\n             n = 1\n         else:\n             n = len(nums)\n             \n         index_of_A = 0\n         index_of_B = n-1\n         A_indices = [None] * n\n         B_indices = [None] * n\n     \n         for i in range(2, n):\n             if nums[i-1] <= nums[index_of_A]:\n                 index_of_A = i-1\n                 A_indices[i-1] = None\n             else:\n                 A_indices[i-1] = index_of_A\n             if nums[n-i] >= nums[index_of_B]:\n                 index_of_B = n-i\n                 B_indices[n-i] = None\n             else:\n                 B_indices[n-i] = index_of_B\n      \n         for i in range(0, n):\n             if A_indices[i] != None and B_indices[i] != None:\n                 return True\n             \n         return False\n             \n", "class Solution:\n     def increasingTriplet(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         if not nums:return False\n         maxv=float('inf')\n         minv=nums[0]\n         for num in nums:\n             if num>maxv:return True\n             if num>minv:maxv=min(num,maxv)\n             minv=min(num,minv)\n         return False\n", "class Solution:\n     def increasingTriplet(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         tails = [-float('inf')]\n         for x in nums:\n             for i in range(len(tails)-1, -1, -1):\n                 if x > tails[i]:\n                     if i == len(tails)-1:\n                         tails.append(x)\n                     else:\n                         tails[i+1] = x\n                     break\n             if len(tails) == 4:\n                 return True\n         return False", "class Solution:\n     def increasingTriplet(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         if len(nums) < 3: return False\n         \n         tails = [-float('inf')] + [float('inf')]*3\n         for x in nums:\n             for i in range(2, -1, -1):\n                 if x > tails[i]:\n                     tails[i+1] = x\n                     break\n             if tails[-1] < float('inf'):\n                 return True\n         return False", "class Solution:\n     def increasingTriplet(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         first = second = float('inf')\n         for n in nums:\n             if n <= first:\n                 first = n\n             elif n <= second:\n                 second = n\n             else:\n                 return True\n             print(n, first, second)\n         return False", "class Solution:\n     def increasingTriplet(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: bool\n         \"\"\"\n         if nums == [] :\n             return(False)\n         min = nums[0]\n         sec_min = (2**31 -1 )\n         \n         for i in nums :\n             if i <= min :\n                 min = i\n             else :\n                 if i <= sec_min :\n                     sec_min = i\n                 else :\n                     return(True)\n         return(False)\n"]