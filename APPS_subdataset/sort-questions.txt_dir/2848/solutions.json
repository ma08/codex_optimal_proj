["from itertools import combinations_with_replacement\n\ndef find(arr,n):\n    return sum( sum(c) == n for x in range(1,len(arr)+1) for c in combinations_with_replacement(arr, x) )", "def find(arr,n):\n    return(findl(arr,n,len(arr)))\ndef findl(arr,n,l):\n    return(sum(findl(arr[1:],n-arr[0]*i,l-i) for i in range(l+1)) if ((arr) and (l>0)) else ((n==0) and (l>=0)))", "import itertools\n\n\n#Given the lst of length N, we generate a list of all possible combinations with\n#  replacements from choose-1 to choose-N\n#Then, for each of the combinations found, simply sum the contents and see if the sum\n#matches the target sum\n# Example [3, 6, 9, 12] with target sum 12. Here we need a total of 4; \n# choose (with replacement) 1 from 4, 2 from 4, 3 from 4, 4 from 4\n# Choose 1 [(3,), (6,), (9,), (12,)]\n# Choose 2 [(3, 3), (3, 6), (3, 9), (3, 12), (6, 6), (6, 9), (6, 12), (9, 9), (9, 12), (12, 12)]\n#           [(3, 3, 3), (3, 3, 6), (3, 3, 9), (3, 3, 12), (3, 6, 6), (3, 6, 9), (3, 6, 12), (3, 9, 9),\n#            (3, 9, 12), (3, 12, 12), (6, 6, 6), (6, 6, 9), (6, 6, 12), (6, 9, 9), (6, 9, 12), \n#            (6, 12, 12), (9, 9, 9), (9, 9, 12), (9, 12, 12), (12, 12, 12)]\n# Choose 3 [(3, 3, 3, 3), (3, 3, 3, 6), (3, 3, 3, 9), (3, 3, 3, 12), (3, 3, 6, 6), (3, 3, 6, 9),\n#           (3, 3, 6, 12), (3, 3, 9, 9), (3, 3, 9, 12), (3, 3, 12, 12), (3, 6, 6, 6), (3, 6, 6, 9),\n#           (3, 6, 6, 12), (3, 6, 9, 9), (3, 6, 9, 12), (3, 6, 12, 12), (3, 9, 9, 9), (3, 9, 9, 12),\n#           (3, 9,12, 12), (3, 12, 12, 12), (6, 6, 6, 6), (6, 6, 6, 9), (6, 6, 6, 12), (6, 6, 9, 9),\n#           (6, 6, 9, 12), (6, 6, 12, 12), (6, 9, 9, 9), (6, 9, 9, 12), (6, 9, 12, 12), (6, 12, 12, 12),\n#           (9, 9, 9, 9), (9, 9, 9, 12), (9, 9, 12, 12), (9, 12, 12, 12), (12, 12, 12, 12)] \n#Now for each we see which sum to the target of 12\ndef find(lst, targetSum):\n    lenList = len(lst)\n    \n\n    combWithReplacementList= []\n    for chooseR in range(1, lenList+1):\n        combsChooseR = itertools.combinations_with_replacement(lst, chooseR)\n        combWithReplacementList.append(list(combsChooseR))\n\n    totalFound = 0\n    for col in combWithReplacementList:\n        for combChoice in col:\n            if (sum(combChoice))== targetSum:\n                totalFound +=1\n\n    return totalFound\n#----end function\n", "from itertools import combinations_with_replacement as comb\n\n# Brute force!\ndef find(arr, n):\n    return sum(sum(L) == n for i in range(1, len(arr)+1) for L in comb(arr, i))", "from itertools import combinations_with_replacement as comb\n\ndef find(lst, n):\n    return sum(1 for l in range(1, len(lst)+1) for c in comb(lst, l) if sum(c) == n)", "from itertools import combinations_with_replacement as c\n\ndef find(arr, n):\n    return sum(\n        sum(xs) == n\n        for i in range(len(arr))\n        for xs in c(arr, i + 1)\n    )", "from itertools import combinations_with_replacement as c\nfind=lambda a,k:sum(1for i in range(1,len(a)+1)for j in c(a,i)if sum(j)==k)", "from itertools import combinations_with_replacement as cr\nfind=lambda a,n:sum(n==sum(c)for r in range(1,len(a)+1)for c in cr(a,r=r))", "def N(Q,S,R,L,D,C,I) :\n    if 0 < D and 0 < S :\n        for I in range(I,L) :\n            N(Q,S - Q[I],R,L,D - 1,C + (Q[I],),I)\n    elif 0 == S :\n        R.add(C)\n    return R\n\ndef find (Q,S) :\n    Q = sorted(set(Q))\n    return len(N(Q,S,set(),len(Q),len(Q),(),0))", "from itertools import combinations_with_replacement as comb\ndef find(arr,n):\n    return sum(sum(c)==n for i in range(1,len(arr)+1) for c in comb(arr,i))"]