["from collections import Counter\ntc=int(input())\nfor k in range(tc):\n n=int(input())\n a=list(map(int, input().rstrip().split()))\n b= list(map(int, input().rstrip().split()))\n cc=sorted(a+b)\n #print('cc = ',cc)\n p=[]\n q=[]\n #print('len(cc) = ',len(cc))\n #print('len = ',(2*n))\n #rx=0\n for i in range(0,(2*n),2):\n  p.append(cc[i])\n  #rx+=1\n for i in range(1,(2*n)+1,2):\n  q.append(cc[i])\n \n if(p!=q):\n  print('-1')\n  continue\n a.sort()\n b.sort()\n #print(p)\n #print(q)\n if(a==b):\n  print('0')\n  continue\n xx = list((Counter(a) - Counter(p)).elements())\n yy = list((Counter(b) - Counter(p)).elements())\n #print('xx = ',xx)\n #print('yy = ',yy)\n iu=len(xx)\n gb=sorted(xx+yy)\n #print(iu)\n uu=xx[0]\n vv=yy[0]\n #print('uu = ',uu)\n #print('vv = ',vv)\n zz=min(cc[0],uu,vv)\n #print('zz = ',zz)\n ans=0\n for i in range(iu):\n  if(gb[i]<=(zz*2)):\n   ans+=gb[i]\n  else:\n   ans+=(zz*2)\n print(ans)\n \n#a = [1, 1, 1, 2, 3, 3]\n#b = [1, 1, 2, 2, 3, 4]\n\n'''c = []\ni, j = 0, 0\nwhile i < len(a) and j < len(b):\n    if a[i] == b[j]:\n     c.append(a[i])\n     i += 1\n     j += 1\n    elif a[i] > b[j]:\n     j += 1\n    else:\n     i += 1'''\n#print(c)\n", "# cook your dish here\n# cook your dish here\nfrom collections import Counter\nfor _ in range(int(input())):\n \n n = int(input())\n x = sorted(map(int,input().split()))\n y = sorted(map(int,input().split()))\n a=Counter(x)\n b=Counter(y)\n c = a + b\n l=[]\n mini=min(x[0],y[0])\n for i in c.keys():\n  \n  if c[i]%2==1:\n   print(-1)\n   break\n  else:\n   l.extend([i]*(abs(a[i]-b[i])//2))\n   \n else:\n  l.sort()\n  cost = 0\n  for i in range((len(l)//2)):\n    \n   cost = cost + min(l[i],2*mini)\n    \n  print(cost)", "# cook your dish here\nfrom collections import Counter\nfor _ in range(int(input())):\n \n n = int(input())\n x = sorted(map(int,input().split()))\n y = sorted(map(int,input().split()))\n a=Counter(x)\n b=Counter(y)\n c = a + b\n l=[]\n mini=min(x[0],y[0])\n for i in c.keys():\n  \n  if c[i]%2==1:\n   print(-1)\n   break\n  else:\n   l.extend([i]*(abs(a[i]-b[i])//2))\n   \n else:\n  l.sort()\n  cost = 0\n  for i in range((len(l)//2)):\n    \n   cost = cost + min(l[i],2*mini)\n    \n  print(cost)", "from collections import Counter\nfor _ in range(int(input())):\n \n n = int(input())\n a = sorted(map(int,input().split()))\n b = sorted(map(int,input().split()))\n x=Counter(a)\n y=Counter(b)\n z=x+y\n l=[]\n q=min(a[0],b[0])\n for k in list(z.keys()):\n  \n  if z[k]%2==1:\n   print(-1)\n   break\n  else:\n   l.extend([k]*(abs(x[k]-y[k])//2))\n   \n else:\n  l.sort()\n  ans=0\n  \n  if l==[]:\n   print(0)\n  else:\n   for i in range((len(l)//2)):\n    \n    ans+=min(l[i],2*q)\n    \n   print(ans)\n", "def chef_cost(A,B,n):\n checksum=0\n mn1=min(A)\n mn2=min(B)\n mn=min(mn1,mn2)\n mpa={}\n for i in range(n):\n  checksum^=A[i]\n  if A[i] not in mpa:\n   mpa[A[i]]=1\n  else:\n   mpa[A[i]]+=1 \n mpb={}\n for i in range(n):\n  checksum^=B[i]\n  if B[i] not in mpb:\n   mpb[B[i]]=1\n  else:\n   mpb[B[i]]+=1\n if checksum:\n  return -1\n for i in mpa: \n  if i in mpb:\n   dx=min(mpa[i],mpb[i])\n   mpa[i]-=dx\n   mpb[i]-=dx\n a1=[]\n b1=[]\n for i in mpa:\n  for j in range(mpa[i]//2):\n   a1.append(i)\n for i in mpb:\n  for j in range(mpb[i]//2):\n   b1.append(i)\n a1.sort()\n b1.sort(reverse=True)\n cost = 0\n for i in range(len(a1)):\n  cost += min(2*mn,min(a1[i],b1[i]))\n return cost\n\ntest=int(input())\nfor _ in range(test):\n n=int(input())\n A=list(map(int,input().split()))\n B=list(map(int,input().split()))\n print(chef_cost(A,B,n))", "def chef_cost(A, B, n):\n \n checksum = 0 # if count of number is even XOR = 0, else it will give a value\n \n mn1 = min(A)\n mn2 = min(B)\n \n mn = min(mn1, mn2)\n \n mpa = {}\n for i in range(n):\n  \n  checksum ^= A[i]\n  \n  if A[i] not in mpa:\n   mpa[A[i]] = 1\n  else:\n   mpa[A[i]] += 1 \n\n mpb = {}\n for i in range(n):\n  \n  checksum ^= B[i]\n  \n  if B[i] not in mpb:\n   mpb[B[i]] = 1\n  else:\n   mpb[B[i]] += 1\n   \n#     print(mpa)\n#     print(mpb)\n \n if (checksum): # numbers with odd count can never be distributed\n  return -1\n \n # removing common elements\n for i in mpa: \n  if i in mpb:\n   dx = min(mpa[i], mpb[i])\n   \n   mpa[i] -= dx\n   mpb[i] -= dx\n \n#     print(mpa)\n#     print(mpb)\n \n a1 = []\n b1 = []\n \n for i in mpa:\n  for j in range(mpa[i]//2):\n   a1.append(i)\n \n for i in mpb:\n  for j in range(mpb[i]//2):\n   b1.append(i)\n \n a1.sort()\n b1.sort(reverse=True)\n \n cost = 0\n for i in range(len(a1)):\n  cost += min(2 * mn, min(a1[i], b1[i]))\n  \n return cost\n\nt = int(input())\n\nfor _ in range(t):\n n = int(input())\n A = list(map(int, input().split()))\n B = list(map(int, input().split()))\n \n print(chef_cost(A, B, n))", "from collections import Counter\nfor _ in range(int(input())):\n \n n = int(input())\n a = sorted(map(int,input().split()))\n b = sorted(map(int,input().split()))\n x=Counter(a)\n y=Counter(b)\n z=x+y\n l=[]\n q=min(a[0],b[0])\n for k in z.keys():\n  \n  if z[k]%2==1:\n   print(-1)\n   break\n  else:\n   l.extend([k]*(abs(x[k]-y[k])//2))\n   \n else:\n  l.sort()\n  ans=0\n  \n  if l==[]:\n   print(0)\n  else:\n   for i in range((len(l)//2)):\n    \n    ans+=min(l[i],2*q)\n    \n   print(ans)", "from collections import Counter\nfor _ in range(int(input())):\n \n n = int(input())\n a = sorted(map(int,input().split()))\n b = sorted(map(int,input().split()))\n x=Counter(a)\n y=Counter(b)\n z=x+y\n l=[]\n q=min(a[0],b[0])\n for k in z.keys():\n  \n  if z[k]%2==1:\n   print(-1)\n   break\n  else:\n   l.extend([k]*(abs(x[k]-y[k])//2))\n   \n else:\n  l.sort()\n  ans=0\n  \n  if l==[]:\n   print(0)\n  else:\n   for i in range((len(l)//2)):\n    \n    ans+=min(l[i],2*q)\n    \n   print(ans)", "for i in range(int(input())):\n n=int(input())\n a=[]\n a=list(map(int,input().split()))\n b=list(map(int,input().split()))\n m=10**6\n arr=[0]*(10**6 +1)\n for i in range(n):\n  arr[a[i]]+=1\n  arr[b[i]]+=1\n  m=min(m,a[i],b[i])\n f=0\n for i in range(len(arr)):\n  if arr[i]%2!=0:\n   f=-1\n   break\n  else:\n   arr[i]=arr[i]//2\n a1,b1=[],[]\n bn=arr.copy()\n an=arr.copy()\n for i in range(n):\n  if an[a[i]]:\n   an[a[i]]-=1\n  else:\n   a1.append(a[i]) \n for i in range(n):\n  if bn[b[i]]:\n   bn[b[i]]-=1\n  else:\n   b1.append(b[i])\n a1.sort()\n b1.sort(reverse=True)\n if len(a1)!=len(b1):\n  f=-1 \n if f==-1:\n  print(-1) \n else:        \n  count=0\n  for i in range(len(a1)):\n   count+=min(2*m,a1[i],b1[i])\n  print(count) \n", "# cook your dish here\nfrom collections import Counter\nfor _ in range(int(input())):\n \n n = int(input())\n a = sorted(map(int,input().split()))\n b = sorted(map(int,input().split()))\n x=Counter(a)\n y=Counter(b)\n z=x+y\n l=[]\n q=min(a[0],b[0])\n for k in list(z.keys()):\n  \n  if z[k]%2==1:\n   print(-1)\n   break\n  else:\n   l.extend([k]*(abs(x[k]-y[k])//2))\n   \n else:\n  l.sort()\n  ans=0\n  \n  if l==[]:\n   print(0)\n  else:\n   for i in range((len(l)//2)):\n    \n    ans+=min(l[i],2*q)\n    \n   print(ans)\n   \n   \n   \n   \n   \n \n", "# cook your dish here\nfrom collections import Counter\nfor _ in range(int(input())):\n \n n = int(input())\n a = sorted(map(int,input().split()))\n b = sorted(map(int,input().split()))\n x=Counter(a)\n y=Counter(b)\n z=x+y\n l=[]\n q=min(a[0],b[0])\n for k in list(z.keys()):\n  \n  if z[k]%2==1:\n   print(-1)\n   break\n  else:\n   l.extend([k]*(abs(x[k]-y[k])//2))\n   \n else:\n  l.sort()\n  ans=0\n  \n  if l==[]:\n   print(0)\n  else:\n   for i in range((len(l)//2)):\n    \n    ans+=min(l[i],2*q)\n    \n   print(ans)\n   \n   \n   \n   \n   \n \n", "# cook your dish here\nfrom collections import Counter\nfor _ in range(int(input())):\n \n n = int(input())\n a = sorted(map(int,input().split()))\n b = sorted(map(int,input().split()))\n x=Counter(a)\n y=Counter(b)\n z=x+y\n l=[]\n q=min(a[0],b[0])\n for k in list(z.keys()):\n  \n  if z[k]%2==1:\n   print(-1)\n   break\n  else:\n   l.extend([k]*(abs(x[k]-y[k])//2))\n   \n else:\n  l.sort()\n  ans=0\n  \n  if l==[]:\n   print(0)\n  else:\n   for i in range((len(l)//2)):\n    \n    ans+=min(l[i],2*q)\n    \n   print(ans)\n   \n   \n   \n   \n   \n \n", "t = int(input())\nwhile t>0:\n n = int(input())\n arr1 = list(map(int,input().split()))\n arr2 = list(map(int,input().split()))\n resultant,s = [],set()\n for i in range(0,len(arr1)):\n  s.add(arr1[i])\n  resultant.append(arr1[i])\n for i in range(0,len(arr2)):\n  s.add(arr2[i])\n  resultant.append(arr2[i])\n checker =0\n for i in resultant:\n  if resultant.count(i)%2 ==1:\n   checker =1\n   print(-1)\n   break\n if checker == 0:\n  vector =[]\n  for i in s:\n   temp = resultant.count(i)/2\n   if temp <arr1.count(i):\n    while arr1.count(i)-temp:\n     vector.append(i)\n     temp+=1\n   elif temp<arr2.count(i):\n    while arr2.count(i)-temp:\n     vector.append(i)\n     temp+=1\n  vector.sort()\n  mini = 2*min(min(arr1),min(arr2))\n  ans = 0\n  for i in range(0,len(vector)//2):\n   ans+= min(mini,vector[i])\n  print(ans)\n\n\n\n\n\n \n t -=1\n \n\n \n", "for _ in range(int(input())):\n n=int(input())\n a=list(map(int,input().split()))\n b=list(map(int,input().split()))\n min_a=min(a)\n min_b=min(b)\n m=min(min_a,min_b)\n da={}\n for item in a:\n  if(item in da):\n   da[item]+=1\n  else:\n   da[item]=1\n for item in b:\n  if(item in da):\n   da[item]+=1\n  else:\n   da[item]=1\n # print(da)\n correct={}\n pos=1\n for key,value in list(da.items()):\n  if(value %2):\n   pos=0\n   break\n  else:\n   correct[key]=value //2\n # print(correct)\n if(pos==0):\n  print(-1)\n  continue\n ref=correct.copy()\n # vector var1,var2\n # print(correct)\n var1=[]\n var2=[]\n for i in range(0,n):\n  if(ref[a[i]]):\n   ref[a[i]]-=1\n  else:\n   var1.append(a[i])\n ref=correct.copy()\n for i in range(0,n):\n  if(ref[b[i]]):\n   ref[b[i]]-=1\n  else:\n   var2.append(b[i])\n if(len(var1)==0):\n  print(0)\n  continue\n if(len(var1) != len(var2)):\n  print(-1)\n  continue\n final_value=0\n var1.sort()\n var2.sort(reverse=True)\n for i in range(0,len(var1)):\n  final_value+=min(2*m,min(var1[i],var2[i]))\n print(final_value)\n", "# cook your dish here\nt= int(input())\nfor _ in range(0,t):\n n=int(input())\n arr1= list(map(int, input().split()))\n arr2= list(map(int, input().split()))\n flag = False\n mini = 9999999999\n el = set()\n movefromA = []\n movefromB = []\n lengtha=lengthb=0\n\n number1 = {}\n number2 = {}\n for i in arr1:\n  if (i in number1):\n   number1[i] += 1\n  else:\n   number1[i] = 1\n   number2[i] = 0\n   el.add(i)\n\n for i in arr2:\n  if (i in number2):\n   number2[i] += 1\n  else:\n   number2[i] = 1\n   if i not in el:\n    number1[i] = 0\n    el.add(i)\n\n for i in el:\n  a = number1[i]\n  b = number2[i]\n  total = a + b\n  if total%2!=0:\n   flag = True\n   break\n\n  if(mini > i):\n   mini = i\n\n  if(a < b):\n   for j in range((b - a) >> 1):\n    movefromB.append(i)\n    lengthb += 1\n  elif(b < a):\n   for j in range((a - b) >> 1):\n    movefromA.append(i)\n    lengtha += 1\n\n if(lengtha != lengthb):\n  flag = True\n\n if(flag):\n  print(-1)\n  continue\n\n movefromA.sort()\n movefromB.sort()\n\n mini *= 2\n\n lessMinA = 0\n lessMinB = 0\n for i in movefromA:\n  if i > mini:\n   break\n  lessMinA += 1\n greatMinA = lengtha - lessMinA\n\n for i in movefromB:\n  if i > mini:\n   break\n  lessMinB += 1\n greatMinB = lengthb - lessMinB\n\n pay = 0\n\n if(lessMinA <= greatMinB):\n  for i in movefromA[:lessMinA]:\n   pay += i\n  for i in movefromB[:lessMinB]:\n   pay += i\n  pay += (mini * (greatMinA - lessMinB))\n\n else:\n  for i in movefromA[:(greatMinB)]:\n   pay += i\n  for i in movefromB[:(greatMinA)]:\n   pay += i\n\n  i = greatMinB\n  j = greatMinA\n  for k in range(lessMinB - greatMinA):\n   if(movefromA[i] < movefromB[j]):\n    pay += movefromA[i]\n    i += 1\n   else:\n    pay += movefromB[j]\n    j += 1\n\n\n print(pay)", "for _ in range(int(input())) :\n n = int(input())\n a = list(map(int, input().split()))\n b = list(map(int, input().split()))\n f1 = dict()\n f2 = dict()\n \n mn = min(min(a), min(b))\n \n for d in a :\n  if d in f1 :\n   l = f1[d]\n   f1[d] = l+1\n  else :\n   f1[d] = 1\n\n for d in b :\n  if d in f2:\n   l = f2[d]\n   f2[d] = l+1\n  else :\n   f2[d] = 1\n \n tot = dict(f1)\n for d in f2 :\n  if d in tot :\n   l = tot[d]\n   tot[d] = l + f2[d]\n  else :\n   tot[d] = f2[d]\n \n flg = False\n for d in tot.values() :\n  if d%2 != 0 :\n   flg = True\n   break;\n \n if flg :\n  print(\"-1\")\n  continue\n \n x = []\n \n for d in tot :\n  t = tot.get(d, 0) // 2\n  l = f1.get(d, 0)\n  r = f2.get(d, 0)\n  \n  if l > t :\n   k = l - t\n   for i in range (k) :\n    x.append(d)\n    \n  if r > t :\n   k = r - t\n   for i in range (k) :\n    x.append(d)\n \n for i in range(len(x)) :\n  if x[i] > 2*mn :\n   x[i] = 2*mn\n \n x.sort()\n \n ln = len(x) // 2\n y = x[:ln]\n ans = sum(y)\n print(ans)", "for _ in range(int(input())):\n n = int(input())\n a = list(map(int, input().split()))\n b = list(map(int, input().split()))\n minimum = min(min(a), min(b))\n s = set()\n ad = {}\n bd = {}\n for i in a:\n  if i in s:\n   s.remove(i)\n  else:\n   s.add(i)\n  ad[i] = ad.setdefault(i, 0) + 1\n  bd[i] = bd.setdefault(i, 0) - 1\n for i in b:\n  if i in s:\n   s.remove(i)\n  else:\n   s.add(i)\n  bd[i] = bd.setdefault(i, 0) + 1\n  ad[i] = ad.setdefault(i, 0) - 1\n if len(s) > 0:\n  print(\"-1\")\n  continue\n a = []\n b = []\n for i in ad.keys():\n  if ad[i] > 0:\n   a.extend([i] * (ad[i] // 2))\n for i in bd.keys():\n  if bd[i] > 0:\n   b.extend([i] * (bd[i] // 2))\n cost = 0\n a.sort()\n b.sort()\n for i in range(len(a)):\n  cost += min(min(a[i], b[len(a) - 1 - i]), 2 * minimum)\n print(cost)", "for _ in range(int(input())):\n n = int(input())\n a = list(map(int, input().split()))\n b = list(map(int, input().split()))\n minimum = min(min(a), min(b))\n s = set()\n ad = {}\n bd = {}\n for i in a:\n  if i in s:\n   s.remove(i)\n  else:\n   s.add(i)\n  ad[i] = ad.setdefault(i, 0) + 1\n  bd[i] = bd.setdefault(i, 0) - 1\n for i in b:\n  if i in s:\n   s.remove(i)\n  else:\n   s.add(i)\n  bd[i] = bd.setdefault(i, 0) + 1\n  ad[i] = ad.setdefault(i, 0) - 1\n if len(s) > 0:\n  print(\"-1\")\n  continue\n a = []\n b = []\n for i in ad.keys():\n  if ad[i] > 0:\n   a.extend([i] * (ad[i] // 2))\n for i in bd.keys():\n  if bd[i] > 0:\n   b.extend([i] * (bd[i] // 2))\n cost = 0\n for i in range(len(a)):\n  cost += min(min(a[i], b[len(a) - 1 - i]), 2 * minimum)\n print(cost)", "for _ in range(int(input())):\n n = int(input())\n a = list(map(int, input().split()))\n b = list(map(int, input().split()))\n minimum = min(min(a), min(b))\n s = set()\n ad = {}\n bd = {}\n for i in a:\n  if i in s:\n   s.remove(i)\n  else:\n   s.add(i)\n  ad[i] = ad.setdefault(i, 0) + 1\n  bd[i] = bd.setdefault(i, 0) - 1\n for i in b:\n  if i in s:\n   s.remove(i)\n  else:\n   s.add(i)\n  bd[i] = bd.setdefault(i, 0) + 1\n  ad[i] = ad.setdefault(i, 0) - 1\n if len(s) > 0:\n  print(\"-1\")\n  continue\n a = []\n b = []\n for i in ad.keys():\n  if ad[i] > 0:\n   a.extend([i] * (ad[i] // 2))\n for i in bd.keys():\n  if bd[i] > 0:\n   b.extend([i] * (bd[i] // 2))\n cost = 0\n for i in range(len(a)):\n  cost += min(min(a[i], b[len(a) - 1 - i]), 2 * minimum)\n print(cost)", "for i in range(int(input())):\n n = int(input())\n a = [int(i) for i in input().split()]\n b = [int(i) for i in input().split()]\n A = {}\n B = {}\n x = 0\n Min = 10**9\n for i in a:\n  if i in list(A.keys()):\n   A[i] += 1\n  else:\n   A[i] = 1\n\n  if i < Min:\n   Min = i\n  x = x ^ i\n\n for i in b:\n  if i in list(B.keys()):\n   B[i] += 1\n  else:\n   B[i] = 1\n  if i < Min:\n   Min = i\n  x = x ^ i\n\n if x != 0:\n  print('-1')\n  continue\n\n a = []\n b = []\n for i in list(A.keys()):\n  if i in list(B.keys()) and A[i] == B[i]:\n   pass\n  else:\n   if i in list(B.keys()):\n    if A[i] > B[i]:\n     for j in range((A[i]-B[i])//2):\n      a.append(i)\n   else:\n    for j in range(A[i]//2):\n     a.append(i)\n\n for i in list(B.keys()):\n  if i in list(A.keys()) and A[i] == B[i]:\n   pass\n  else:\n   if i in list(A.keys()):\n    if B[i] > A[i]:\n     for j in range((B[i]-A[i])//2):\n      b.append(i)\n   else:\n    for j in range(B[i]//2):\n     b.append(i)\n\n a = sorted(a)\n b = sorted(b)\n j = -1\n if len(a) != len(b):\n  print('-1')\n  continue\n cost = 0\n for i in range(len(a)):\n  if min(a[i], b[j]) < 2*Min:\n   cost += min(a[i], b[j])\n\n  else:\n   cost += 2*Min\n\n  j -= 1\n print(cost)\n", "t = int(input())\nfor _ in range(t):\n n = int(input())\n l1 = list(map(int,input().split()))\n l2 = list(map(int,input().split()))\n \n mp = {}\n for i in l1:\n  if i in mp:\n   mp[i]+=1\n  else:\n   mp[i]=1\n   \n for i in l2:\n  if i in mp:\n   mp[i]-=1\n  else:\n   mp[i]=-1\n   \n mini = 2<<30\n error=False\n l1 = []\n l2 = []\n for k,v in list(mp.items()):\n  mini = min(mini,k)\n  if abs(v)%2==1:\n   error = True\n   \n  if v>0:\n   v = v//2\n   for _ in range(v):\n    l1.append(k)\n  if v<0:\n   v = abs(v)//2\n   for _ in range(v):\n    l2.append(k)\n  \n if error == True or len(l1) != len(l2):\n  print(-1)\n  continue\n \n ans=0\n  \n for i in range(len(l1)):\n  ans+=min([2*mini,l1[i],l2[i]])\n print(ans)\n  \n    \n    \n    \n    \n", "for _ in range(int(input())):\n n = int(input())\n listt1 = [int(e) for e in input().split()]\n listt2 = [int(e) for e in input().split()]\n m = min(min(listt1), min(listt2))\n dic = {}\n flag, flag2 = True, True\n for e in listt1:\n  if e not in dic:\n   dic[e] = 1\n  else:\n   dic[e] += 1\n for e in listt2:\n  if e not in dic:\n   dic[e] = 1\n  else:\n   dic[e] += 1\n for e in dic:\n  if dic[e] % 2 == 1:\n   flag = False\n dic2 = {}\n listt1.sort()\n listt2.sort()\n for e in dic:\n  if dic[e] % 2:\n   flag2 = False\n   break\n  else:\n   dic2[e] = dic[e] // 2\n if flag2 == 0:\n  print(-1)\n  continue\n ref = dic2.copy()\n\n listt11 = []\n listt22 = []\n for i in range(0, n):\n  if ref[listt1[i]]:\n   ref[listt1[i]] -= 1\n  else:\n   listt11.append(listt1[i])\n ref = dic2.copy()\n for i in range(0, n):\n  if ref[listt2[i]]:\n   ref[listt2[i]] -= 1\n  else:\n   listt22.append(listt2[i])\n if len(listt11) == 0:\n  print(0)\n  continue\n if len(listt11) != len(listt22):\n  print(-1)\n  continue\n final_value = 0\n listt11.sort()\n listt22.sort(reverse=True)\n for i in range(0, len(listt11)):\n  final_value += min(2 * m, min(listt11[i], listt22[i]))\n print(final_value)", "t = int(input())\nfor _ in range(t):\n n = int(input())\n l1 = list(map(int,input().split()))\n l2 = list(map(int,input().split()))\n \n mp = {}\n for i in l1:\n  if i in mp:\n   mp[i]+=1\n  else:\n   mp[i]=1\n   \n for i in l2:\n  if i in mp:\n   mp[i]-=1\n  else:\n   mp[i]=-1\n   \n mini=min(l1)\n l2.append(mini)\n mini = min(l2)\n error=False\n l1 = []\n l2 = []\n for k,v in list(mp.items()):\n  if abs(v)%2==1:\n   error = True\n   \n  if v>0:\n   v = v//2\n   for _ in range(v):\n    l1.append(k)\n  if v<0:\n   v = abs(v)//2\n   for _ in range(v):\n    l2.append(k)\n  \n if error == True or len(l1) != len(l2):\n  print(-1)\n  continue\n \n ans=0\n  \n for i in range(len(l1)):\n  ans+=min([2*mini,l1[i],l2[i]])\n print(ans)\n  \n    \n    \n    \n    \n", "# cook your dish here\nfor _ in range(int(input())):\n N = int(input())\n \n A = [int(v) for v in input().split()]\n B = [int(v) for v in input().split()]\n minAB = min(min(A), min(B))\n h = {}\n for ele in A:\n  if ele in h:\n   h[ele][0] += 1\n  else:\n   h[ele] = [1,0]\n \n for ele in B:\n  if ele in h:\n   h[ele][1] += 1\n  else:\n   h[ele] = [0,1]\n \n #print(h)\n flag = 0\n res = 0\n AtoB, BtoA, swaps = [], [], []\n for k,v in h.items():\n  if v[0] == v[1]:\n   pass\n  elif (v[0] + v[1])%2 != 0:\n   res = -1\n   flag = 1\n   break\n  else:\n   b = abs(v[0] - v[1])//2\n   if v[0] > v[1]:\n    v[1] += b\n    v[0] -= b\n   else:\n    v[0] += b \n    v[1] -= b\n    \n   for c in range(b):\n    swaps.append(k)\n if flag != 1:\n  swaps.sort()\n  swaps = swaps[:len(swaps)//2]\n  for ele in swaps:\n   if ele <= 2*minAB:\n    res += ele\n   else:\n    res += 2*minAB\n #print(swaps)\n print(res)"]