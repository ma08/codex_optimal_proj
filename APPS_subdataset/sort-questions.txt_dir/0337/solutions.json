["class Solution:\n     def canCompleteCircuit(self, gas, cost):\n         \"\"\"\n         :type gas: List[int]\n         :type cost: List[int]\n         :rtype: int\n         \"\"\"\n         if sum(gas) < sum(cost):\n             return -1\n         Rest = 0\n         index = 0\n         for i in range(len(gas)):\n             Rest += gas[i] - cost[i]\n             if Rest < 0:\n                 index = i + 1\n                 Rest = 0\n         return index", "class Solution:\n     def canCompleteCircuit(self, gas, cost):\n         \"\"\"\n         :type gas: List[int]\n         :type cost: List[int]\n         :rtype: int\n         \"\"\"\n         if sum(gas) < sum(cost):\n             return -1\n         \n         totalGas = 0\n         position = 0\n         for i in range(len(gas)):\n             totalGas += gas[i] - cost[i]\n             \n             if totalGas < 0:\n                 totalGas = 0\n                 position = i + 1\n         \n         return position\n", "class Solution:\n     def canCompleteCircuit(self, gas, cost):\n         \"\"\"\n         :type gas: List[int]\n         :type cost: List[int]\n         :rtype: int\n         \"\"\"\n         if not gas:\n             return -1\n         if len(gas) == 1:\n             return 0 if gas[0] >= cost[0] else -1\n         \n         diff = [gas[i] - cost[i] for i in range(len(gas))]\n         \n         print(diff)\n         \n         start = []\n         for i in range(len(diff)):\n             if diff[i] < 0 and diff[(i + 1) % len(diff)] >= 0:\n                 start.append((i + 1) % len(diff))\n         \n         if not start:\n             start = [0]\n         \n         print(start)\n         \n         for i in start:\n             bal = diff[i]\n             ptr = (i + 1) % len(diff)\n             while ptr != i:\n                 bal += diff[ptr]\n                 ptr = (ptr + 1) % len(diff)\n                 if bal < 0:\n                     break\n             if bal >= 0:\n                 return i\n         return -1\n             \n", "class Solution:\n     def canCompleteCircuit(self, gas, cost):\n         \"\"\"\n         :type gas: List[int]\n         :type cost: List[int]\n         :rtype: int\n         \"\"\"\n \n         st, ed, cur, n, loop = 0, -1, 0, len(gas), False\n         while True:\n             ed += 1\n             if ed >= n: ed -= n\n             while cur + gas[ed] - cost[ed] >= 0:\n                 cur += gas[ed] - cost[ed]\n                 ed += 1\n                 if ed >= n:\n                     if loop: return -1\n                     ed -= n\n                     loop = True\n                 if ed >= st and loop: return st\n             cur, st = 0, ed + 1\n             if st >= n: return -1", "class Solution:\n     def canCompleteCircuit(self, gas, cost):\n         \"\"\"\n         :type gas: List[int]\n         :type cost: List[int]\n         :rtype: int\n         \"\"\"\n         tank = 0\n         total = len(gas)\n         travel = 0\n \n         start = -total\n         current = start\n         print(('start:',start))\n         while travel < total:\n             tank += gas[current]-cost[current]\n             travel += 1\n             current += 1\n             if current == total:\n                 return -1\n             print((current,'\\ttank:',tank,gas[current],cost[current],'\\ttravel:',travel))\n             if tank<0:\n                 tank = 0\n                 jump = current - start\n                 start += jump\n                 travel -= jump\n                 print(('reset Start:', start, tank))\n         return start+total\n", "class Solution:\n     def canCompleteCircuit(self, gas, cost):\n         \"\"\"\n         :type gas: List[int]\n         :type cost: List[int]\n         :rtype: int\n         \"\"\"\n         n = len(gas)\n         \n         i = 0\n         while i < n:\n             total_gas = 0\n             j = 0\n             while j < n and total_gas >= 0:\n                 index = (i + j) % n\n                 total_gas += gas[index] - cost[index]\n                 j += 1\n             if total_gas >= 0:\n                 return i\n             i += j\n         \n         return -1\n", "class Solution:\n     def canCompleteCircuit(self, gas, cost):\n         \"\"\"\n         :type gas: List[int]\n         :type cost: List[int]\n         :rtype: int\n         \"\"\"\n         cf, s, e = 0,0,0\n         found = False\n         while True:\n             nextHop = gas[e] - cost[e]\n             if cf + nextHop >= 0:\n                 e = (e+1)%len(gas)\n                 cf = cf + nextHop\n                 if s == e :\n                     found = True\n                     break\n                 else:\n                     continue\n             else:\n                 if s == e:\n                     s = (s+1)%len(gas)\n                     e = s\n                 else:\n                     cf += -gas[s] + cost[s]\n                     s = (s+1)%len(gas)\n                 if s == 0: break\n         return s if found else -1", "class Solution:\n     def canCompleteCircuit(self, gas, cost):\n         \"\"\"\n         :type gas: List[int]\n         :type cost: List[int]\n         :rtype: int\n         \"\"\"\n         n = len(gas)\n         \n         i = 0\n         while i < n:\n             total_gas = 0\n             j = 0\n             while j < n and total_gas >= 0:\n                 index = (i + j) % n\n                 total_gas += gas[index] - cost[index]\n                 j += 1\n             if total_gas >= 0:\n                 return i\n             while i < n and gas[i] - cost[i] >= 0:\n                 i += 1\n             i += 1\n         \n         return -1\n", "class Solution:\n     def canCompleteCircuit(self, gas, cost):\n         \"\"\"\n         :type gas: List[int]\n         :type cost: List[int]\n         :rtype: int\n         \"\"\"\n         res = []\n         for i in range(len(gas)):\n             res.append(gas[i]-cost[i])\n         max_sum = 0\n         max_index = 0\n         a = [0 for x in range(len(res))]\n         for i in range(len(res)) :\n             max_sum = max(res[i]+max_sum,res[i])\n             if max_sum == res[i]:\n                 max_index = i\n                 max_sum = res[i]\n         temp = (max_index+1)%len(gas)\n         gas_sum = res[max_index]\n         while temp != max_index:\n             gas_sum += res[temp]\n             temp = (temp+1)%len(gas)\n         if gas_sum>=0:\n             return max_index\n         else:\n             return -1", "class Solution:\n     def canCompleteCircuit(self, gas, cost):\n         \"\"\"\n         :type gas: List[int]\n         :type cost: List[int]\n         :rtype: int\n         \"\"\"\n         # if len(gas) < 2:\n         #     return gas[0]\n         fuel = totalGas = totalCost = start = 0\n         for i in range(len(cost)):\n             totalGas += gas[i]\n             totalCost += cost[i]\n             fuel = fuel + gas[i] - cost[i]\n             if fuel < 0:\n                 start = i + 1\n                 fuel = 0\n                 \n         return start if totalGas>=totalCost else -1\n", "class Solution:\n     def canCompleteCircuit(self, gas, cost):\n         \"\"\"\n         :type gas: List[int]\n         :type cost: List[int]\n         :rtype: int\n         \"\"\"\n         if sum(gas)< sum(cost):\n             return -1\n         rest = 0\n         position = 0\n         for i in range(len(gas)):\n             rest += gas[i]-cost[i]\n             if rest < 0:\n                 rest = 0\n                 position = i+1\n         return position\n             \n \n                 \n", "class Solution:\n     def canCompleteCircuit(self, gas, cost):\n         \"\"\"\n         :type gas: List[int]\n         :type cost: List[int]\n         :rtype: int\n         \"\"\"\n \n         st, ed, cur, n, loop = 0, -1, 0, len(gas), False\n         while True:\n             ed += 1\n             if ed >= n: ed -= n\n             while cur + gas[ed] - cost[ed] >= 0:\n                 cur += gas[ed] - cost[ed]\n                 ed += 1\n                 if ed >= n:\n                     if loop: return -1\n                     ed -= n\n                     loop = True\n                 if ed >= st and loop: return st\n             cur, st = 0, ed + 1\n             if st >= n: return -1", "class Solution:\n     def canCompleteCircuit(self, gas, cost):\n         \"\"\"\n         :type gas: List[int]\n         :type cost: List[int]\n         :rtype: int\n         \"\"\"\n         left = [gas[i]-cost[i] for i in range(len(gas))]\n         if sum(left) < 0:\n             return -1\n         tank, start = 0, 0\n         for i in range(len(left)):\n             tank += left[i]\n             if tank < 0:\n                 start = i+1\n                 tank = 0\n         return start", "class Solution:\n     def canCompleteCircuit(self, gas, cost):\n         \"\"\"\n         :type gas: List[int]\n         :type cost: List[int]\n         :rtype: int\n         \"\"\"\n         \n         if len(gas) == 1:\n             if cost[0] > gas[0]:\n                 return -1\n             else:\n                 return 0\n \n         sub = [g - c for (g, c) in zip(gas, cost)]\n         s = 0\n         e = 1\n         left = sub[0]\n         while e != s:\n             if left >= 0:\n                 left += sub[e]\n                 e = (e + 1) % len(gas)\n                 if e==s and left<0:\n                     return -1\n             else:\n                 while left < 0:\n                     s = (s - 1) % len(gas)\n                     left += sub[s]\n                     if s == (e - 1) % len(gas):\n                         return -1\n         return s\n"]