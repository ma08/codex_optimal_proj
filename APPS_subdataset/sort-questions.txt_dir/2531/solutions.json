["class Solution:\n     def findUnsortedSubarray(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         left = 1\n         size = len(nums)\n         if size == 0:\n             return 0\n         while left < size and nums[left - 1] <= nums[left]:\n             left += 1\n         if left == size:\n             return 0\n         left -= 1\n         right = size - 1\n         while right > 0 and nums[right] >= nums[right - 1]:\n             right -= 1\n         sub = nums[left : right + 1]\n         min_ = min(sub)\n         max_ = max(sub)\n         for i in range(left):\n             if nums[i] > min_:\n                 left = i\n                 break\n         for i in range(size - 1, right, -1):\n             if nums[i] < max_:\n                 right = i\n                 break\n         return right - left + 1\n", "class Solution(object):\n     def findUnsortedSubarray(self, nums):\n         nums = [float('-inf')] + nums + [float('inf')]\n         '''find left boundary'''\n         left = 0\n         while left<len(nums)-1 and nums[left]<=nums[left+1]:\n             left += 1\n         # return 0 if already sorted ascending\n         if left == len(nums)-1:\n             return 0\n         min_num = min(nums[left+1:])\n         while nums[left] > min_num:\n             left -= 1\n         '''find right boundary'''\n         right = len(nums)-1\n         while right>0 and nums[right-1]<=nums[right]:\n             right -= 1\n         # return 0 if sorted descending\n         if right == 0:\n             return 0\n         max_num = max(nums[:right])\n         while nums[right] < max_num:\n             right += 1\n         return right - left - 1", "class Solution:\n     def findUnsortedSubarray(self, nums):\n         if len(nums) == 1:\n             return 0\n         \n         start = -1\n         end = -1\n         for i in range(len(nums)-1):\n             if nums[i] > nums[i+1]:\n                 start = i\n                 break\n         for i in reversed(list(range(1,len(nums)))):\n             if nums[i] < nums[i-1]:\n                 end = i\n                 break\n         if start == -1:\n             return 0\n         \n         minimum = 10000000000000\n         maximum = -10000000000000\n         \n         for i in range(start, end+1):\n             if nums[i] > maximum:\n                 maximum = nums[i]\n             if nums[i] < minimum:\n                 minimum = nums[i]\n         \n         for i in range(0, len(nums)):\n             if nums[i] > minimum:\n                 start = i\n                 break\n         for i in reversed(list(range(len(nums)))):\n             if nums[i] < maximum:\n                 end = i\n                 break\n         return end - start + 1\n             \n", "class Solution:\n     def findUnsortedSubarray(self, nums):\n         \"\"\" Improved algorithm.\n         Time complexity: O(n). Space complexity: O(1).\n         \"\"\"\n         n = len(nums)\n         # special case\n         if n < 2:\n             return 0\n \n         # find index of the min number of the unsorted subarray from the left\n         left = n - 1\n         for i in range(n - 1):\n             if nums[i] > nums[i + 1]:\n                 left = i + 1\n                 break\n         min_i = left\n         for i in range(left + 1, n):\n             if nums[i] < nums[min_i]:\n                 min_i = i\n \n         # find index of max number of the unsorted subarray from the right\n         right = 0\n         for i in range(n - 1, 0, -1):\n             if nums[i] < nums[i - 1]:\n                 right = i - 1\n                 break\n         max_i = right\n         for i in range(max_i - 1, -1, -1):\n             if nums[i] > nums[max_i]:\n                 max_i = i\n \n         # find the correct position of number at min index\n         for i in range(min_i):\n             if nums[i] > nums[min_i]:\n                 min_i = i\n                 break\n \n         # find the correct position of number at max index\n         for i in range(n - 1, max_i, -1):\n             if nums[i] < nums[max_i]:\n                 max_i = i\n                 break\n \n         # return length of unsorted subarray\n         length = max_i - min_i + 1\n         return length if length > 0 else 0\n", "class Solution(object):\n     def findUnsortedSubarray(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         n, lst = len(nums), sorted(nums)\n         for i in range(n):\n             if lst[i] != nums[i]:\n                 L = i\n                 break\n         else:\n             return 0\n         for i in range(n - 1, -1, -1):\n             if lst[i] != nums[i]:\n                 R = i\n                 break\n         return R - L + 1\n", "class Solution:\n     def findUnsortedSubarray(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         n = len(nums)\n         nums_sorted = sorted(nums)\n         is_same = [a == b for a, b in zip(nums, nums_sorted)]\n         return 0 if all(is_same) else n - is_same.index(False) - is_same[::-1].index(False)\n             \n", "class Solution:\n     def findUnsortedSubarray(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         lens = len(nums)\n         t = nums\n         t = sorted(t)\n         print(nums)\n         t1 = lens\n         t2 = 0\n         for i in range(lens-1):\n             if nums[i] != t[i]:\n                 t1 = i\n                 break\n         for i in range(lens-1,0,-1):\n             if nums[i] != t[i]:\n                 t2 = i\n                 break;\n         print(t2)\n         return max(t2-t1+1,0)\n", "class Solution:\n     def findUnsortedSubarray(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         a = sorted(nums)\n         start = -1\n         end = -1\n         for i in range(len(a)):\n             if a[i] != nums[i] and start == -1:\n                 start = i\n             elif a[i] != nums[i]:\n                 end = i\n         \n         if start == -1:\n             return 0\n         \n         return end - start + 1\n             \n", "class Solution:\n     def findUnsortedSubarray(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         sort_nums = sorted(nums)\n         diff = list(map(lambda x, y: x - y, sort_nums, nums))\n         start, end = 0, len(nums) - 1\n         while start < end:\n             if diff[start] == 0:\n                 start += 1\n                 \n             if diff[end] == 0:\n                 end -= 1\n             \n             if diff[start] and diff[end]:\n                 break\n         \n         if end > start:\n             return end - start + 1\n         else:\n             return 0\n"]