["from sys import stdin\n\ndef bitadd(a,w,bit):\n \n    x = a\n    while x <= (len(bit)-1):\n        bit[x] += w\n        x += x & (-1 * x)\n \ndef bitsum(a,bit):\n \n    ret = 0\n    x = a\n    while x > 0:\n        ret += bit[x]\n        x -= x & (-1 * x)\n    return ret\n\nclass RangeBIT:\n\n    def __init__(self,N,indexed):\n        self.bit1 = [0] * (N+2)\n        self.bit2 = [0] * (N+2)\n        self.mode = indexed\n\n    def bitadd(self,a,w,bit):\n \n        x = a\n        while x <= (len(bit)-1):\n            bit[x] += w\n            x += x & (-1 * x)\n \n    def bitsum(self,a,bit):\n \n        ret = 0\n        x = a\n        while x > 0:\n            ret += bit[x]\n            x -= x & (-1 * x)\n        return ret\n    \n    def add(self,l,r,w):\n\n        l = l + (1-self.mode)\n        r = r + (1-self.mode)\n        self.bitadd(l,-1*w*l,self.bit1)\n        self.bitadd(r,w*r,self.bit1)\n        self.bitadd(l,w,self.bit2)\n        self.bitadd(r,-1*w,self.bit2)\n\n    def sum(self,l,r):\n        l = l + (1-self.mode)\n        r = r + (1-self.mode)\n        ret =  self.bitsum(r,self.bit1) + r * self.bitsum(r,self.bit2)\n        ret -= self.bitsum(l,self.bit1) + l * self.bitsum(l,self.bit2)\n\n        return ret\n\nn,q = list(map(int,stdin.readline().split()))\na = list(map(int,stdin.readline().split()))\n\nqs = [ [] for i in range(n+1) ]\nans = [None] * q\n\nfor loop in range(q):\n    x,y = list(map(int,stdin.readline().split()))\n    l = x+1\n    r = n-y\n    qs[r].append((l,loop))\n\nBIT = [0] * (n+1)\n\nfor r in range(1,n+1):\n\n    b = r-a[r-1]\n\n    if b >= 0:\n\n        L = 1\n        R = r+1\n        while R-L != 1:\n            M = (L+R)//2\n\n            if bitsum(M,BIT) >= b:\n                L = M\n            else:\n                R = M\n\n        if bitsum(L,BIT) >= b:\n            bitadd(1,1,BIT)\n            bitadd(L+1,-1,BIT)\n\n\n    for ql,qind in qs[r]:\n        ans[qind] = bitsum(ql,BIT)\n\nfor i in ans:\n    print (i)\n"]