["import sys\n \ndef findRoom(x,y,i):\n R = [(x,y)]\n GRID[x][y] = i\n for n in R:\n  GRID[n[0]][n[1]] = i\n  if n[0]>0 and GRID[n[0]-1][n[1]]==0 and H[n[0]-1][n[1]]:\n   GRID[n[0]-1][n[1]] = i\n   R.append((n[0]-1,n[1]))\n  if n[0]<N-1 and GRID[n[0]+1][n[1]]==0 and H[n[0]][n[1]]:\n   GRID[n[0]+1][n[1]] = i\n   R.append((n[0]+1,n[1]))\n  if n[1]>0 and GRID[n[0]][n[1]-1]==0 and V[n[0]][n[1]-1]:\n   GRID[n[0]][n[1]-1] = i\n   R.append((n[0],n[1]-1))\n  if n[1]<M-1 and GRID[n[0]][n[1]+1]==0 and V[n[0]][n[1]]:\n   GRID[n[0]][n[1]+1] = i\n   R.append((n[0],n[1]+1))\n\ndef roomPrice(r):\n wall_price_0 = wall_price_1 = 0\n for i in range(R):\n  if C[i][r] and T[i] != 1:\n   wall_price_0 += C[i][r]*K\n  else:\n   wall_price_1 += C[i][r]*K\n return [wall_price_0 + Rooms[r][0], wall_price_1 + Rooms[r][1]]\n\ndef total_price():\n price = 0\n for r in range(R):\n  for i in range(r):\n   if C[i][r] and T[i] != T[r]:\n    price += C[i][r]*K\n    price += Rooms[r][T[r]-1]\n return price\n\ndef solve(r):\n if r==R:\n  return 0\n wall_price_0 = 0\n wall_price_1 = 0\n for i in range(r):\n  if C[i][r] and T[i] != 1:\n   wall_price_0 += C[i][r]*K\n  else:\n   wall_price_1 += C[i][r]*K\n if T[r]!=0:\n  return [wall_price_0,wall_price_1][T[r]-1]+Rooms[r][T[r]-1]+solve(r+1) \n T[r] = 1\n result = solve(r+1)+wall_price_0+Rooms[r][0]\n T[r] = 2\n result = min(solve(r+1)+wall_price_1+Rooms[r][1], result)\n T[r] = 0\n return result\n \nf = sys.stdin\nN,M,W,K,R = list(map(int, f.readline().split(' ')))\nT = [0] * R\nGRID = list(map(list,[[0]*M]*N))\nH = list(map(list,[[1]*M]*N))\nV = list(map(list,[[1]*M]*N))\nWalls = []\nfor _ in range(W):\n x0,y0,x1,y1 = list(map(int, f.readline().split(' ')))\n x0 -= 1\n x1 -= 1\n y0 -= 1\n y1 -= 1\n if x0==x1:\n  V[x0][y0] = 0\n else:\n  H[x0][y0] = 0\n Walls.append([x0,y0,x1,y1]) \nRooms = []\nfor i in range(R):\n x,y,t1,t2 = list(map(int, f.readline().split(' ')))\n findRoom(x-1,y-1,i+1)\n Rooms.append([t1,t2])\nC = list(map(list,[[0]*R]*R))\nfor w in Walls:\n r1 = GRID[w[0]][w[1]]-1 \n r2 = GRID[w[2]][w[3]]-1\n C[r1][r2] += 1\n C[r2][r1] += 1\nStable = [False]*R\nfor r in range(R):\n walls_max_price = sum(C[r])*K\n if walls_max_price<=abs(Rooms[r][0]-Rooms[r][1]):\n  # If we choose the cheaper team, no matter what the next rooms are the walls \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0we not overprice it.\n  T[r] = 1+(Rooms[r][0]>Rooms[r][1])\n  Stable[r] = True\ndef try_teams():\n for r in range(R):\n  if not Stable[r]:\n   T[r] = 1+(r&1)\n  change = True\n while change:\n  change = False\n  for r in range(R):\n   price = roomPrice(r)\n   if price[T[r]-1]>price[2-T[r]]:\n    T[r] = 3-T[r]\n    change = True\n print(total_price())\n#try_teams()  \nprint(solve(0))\n"]