["class Solution:\n     def firstMissingPositive(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         nums = sorted(set(nums), key=lambda x: x)\n         result = 0\n         for i in range(len(nums)):\n             if nums[i] <= 0:\n                 continue\n             elif nums[i] == result + 1:\n                 result += 1\n             else:\n                 break\n         return result + 1", "class Solution:\n     def firstMissingPositive(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if not nums:\n             return 1\n         for index in range(len(nums)):\n             while nums[index] != index + 1:\n                 tmp = nums[index]\n                 if tmp <= 0 or tmp > len(nums) or tmp == nums[tmp - 1]:\n                     break\n                 nums[index] = nums[tmp - 1]\n                 nums[tmp - 1] = tmp\n         for index in range(len(nums)):\n             if nums[index] != index + 1:\n                 return index + 1\n         return len(nums) + 1\n", "class Solution:\n     def firstMissingPositive(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         minSet = set()\n         maxSet = set()\n         nums = set(nums)\n         for num in nums:\n \n             if num > 0:\n                 if num + 1 in minSet:\n                     minSet.remove(num + 1)\n                     minSet.add(num)\n                     if num - 1 in maxSet:\n                         maxSet.remove(num - 1)\n                         minSet.remove(num)\n                 elif num - 1 in maxSet:\n                     maxSet.remove(num - 1)\n                     maxSet.add(num)\n                     if num + 1 in minSet:\n                         maxSet.remove(num)\n                         minSet.remove(num + 1)\n                 else:\n                     minSet.add(num)\n                     maxSet.add(num)\n                 # print(\"min set:\", minSet)\n                 # print(\"max set:\", maxSet)\n         if len(minSet) == 0 or len(maxSet) == 0:\n             return 1\n         return min(maxSet) + 1 if min(minSet) == 1 else 1", "class Solution:\n     def firstMissingPositive(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         i = 0\n         n = len(nums)\n         \n         if not nums:\n             return(1)\n         while (i <n):\n             while ((nums[i] != i) and (nums[i] > 0) and (i<n) and (nums[i] < n) and (nums[i] != nums[nums[i]])):\n                 temp = nums[nums[i]]\n                 nums[nums[i]] = nums[i]\n                 nums[i] = temp\n             i = i + 1\n \n         i = 1\n         while(i<n):\n             if(nums[i] != i):\n                 return(i)\n             i=i+1\n         if(nums[0] == n):\n             return(n+1)\n         else:\n             return(n)\n \n", "class Solution:\n     def firstMissingPositive(self, nums):\n         for i in range(len(nums)):\n             while 0 <= nums[i]-1 < len(nums) and nums[nums[i]-1] != nums[i]:\n                 tmp = nums[i]-1\n                 nums[i], nums[tmp] = nums[tmp], nums[i]\n         for i in range(len(nums)):\n             if nums[i] != i+1:\n                 return i+1\n         return len(nums)+1", "class Solution:\n     def firstMissingPositive(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         \n         if nums == []:\n             return(1)\n         for _ in range(5):\n             for i in range(len(nums)):\n                 if ((i + 1) != nums[i]) and (0 < nums[i] <= len(nums)):\n                     nums[nums[i]-1], nums[i] = nums[i], nums[nums[i]-1]\n                     #print(nums, 'up')\n                 else:\n                     pass\n             #print(nums)\n             for i in range(len(nums))[::-1]:\n                 if ((i + 1) != nums[i]) and (0 < nums[i] <= len(nums)):\n                     nums[nums[i]-1], nums[i] = nums[i], nums[nums[i]-1]\n \n                 else:\n                     pass\n             #print(nums)\n         for i in range(len(nums)):\n             if not i+1 == nums[i]:\n                 #print(nums)\n                 return(i+1)\n         if sorted(nums) == nums:\n             return(len(nums)+1)\n", "class Solution:\n     \n     def firstMissingPositive(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         A=nums\n         n = len(A)\n         for index in range(n):\n             element = A[index]\n             while True:\n                 if element <= 0 or element > n or element == A[element - 1]:\n                     break\n                 A[element - 1], element = element, A[element - 1]\n         for index in range(n):\n             if A[index] != index + 1:\n                 return index + 1\n         return n + 1\n             \n", "class Solution:\n     def firstMissingPositive(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         i = 0\n \n         while i < len(nums):\n             tmp = nums[i]\n             # exchange to its right idx\n             while tmp != i + 1 and tmp > 0 and tmp < len(nums):\n                 nums[i] = nums[tmp-1]\n                 nums[tmp-1] = tmp\n                 if tmp == nums[i]:\n                     break\n                 tmp = nums[i]\n             i += 1\n         print(nums)\n \n         for i in range(len(nums)):\n             if nums[i] != i+1:\n                 return i+1\n         return len(nums) + 1\n", "class Solution:\n     def firstMissingPositive(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n \n         # put numbers to their places\n         # [-1,0,2,1] -> [1,2,0,0]\n         for i in range(len(nums)):\n             if nums[i] < 0:\n                 nums[i] = 0\n                 \n             if nums[i] > 0 and nums[i] != i + 1:\n                 j, nums[i] = nums[i], 0\n                 while 0 < j <= len(nums) and nums[j-1] != j:\n                     next_j = nums[j-1]\n                     nums[j-1] = j\n                     j = next_j\n             \n         for i, num in enumerate(nums):\n             if not num:\n                 return i+1\n         \n         if nums and nums[-1] > 0:\n             return nums[-1] + 1\n         \n         return 1\n", "class Solution:\n     def firstMissingPositive(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         minSet = set()\n         maxSet = set()\n         nums = set(nums)\n         for num in nums:\n \n             if num > 0:\n                 if num + 1 in minSet:\n                     minSet.remove(num + 1)\n                     minSet.add(num)\n                     if num - 1 in maxSet:\n                         maxSet.remove(num - 1)\n                         minSet.remove(num)\n                 elif num - 1 in maxSet:\n                     maxSet.remove(num - 1)\n                     maxSet.add(num)\n                     if num + 1 in minSet:\n                         maxSet.remove(num)\n                         minSet.remove(num + 1)\n                 else:\n                     minSet.add(num)\n                     maxSet.add(num)\n                 print(\"min set:\", minSet)\n                 print(\"max set:\", maxSet)\n         if len(minSet) == 0 or len(maxSet) == 0:\n             return 1\n         return min(maxSet) + 1 if min(minSet) == 1 else 1", "class Solution:\n     def firstMissingPositive(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         nums.append(0)\n         for i in range(len(nums)):\n             while 0 < nums[i] < len(nums) and nums[i] != i and nums[i] != nums[nums[i]]:\n                 temp = nums[nums[i]]\n                 nums[nums[i]] = nums[i]\n                 nums[i] = temp\n                 print((temp, nums))\n         for i in range(1, len(nums)):\n             if nums[i] != i:\n                 return i\n         return len(nums)\n", "class Solution:\n     def firstMissingPositive(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if not nums: return 1\n         n = len(nums)\n         for i in range(len(nums)):\n             while nums[i] > 0 and nums[i] <= n and nums[i] != nums[nums[i] - 1]:\n                 tmp = nums[i]\n                 nums[i] = nums[tmp - 1]\n                 nums[tmp - 1] = tmp\n         for j in range(len(nums)):\n             if nums[j] != j + 1: return j + 1\n         return n + 1\n", "class Solution:\n     def firstMissingPositive(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         lnums=len(nums)\n         for i in range(lnums):\n             while 0<nums[i]<=lnums and nums[i]!=nums[nums[i]-1]:\n                 tmp=nums[i]\n                 print((i,tmp,nums))\n                 nums[tmp-1],nums[i]=nums[i],nums[tmp-1]\n                 print((i,tmp,nums))\n         for i in range(lnums):\n             if nums[i]!=i+1:\n                 return i+1\n         return lnums+1\n         \n         \n", "class Solution:\n     def firstMissingPositive(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         \n         if nums == []:\n             return(1)\n         for _ in range(10):\n             for i in range(len(nums)):\n                 if ((i + 1) != nums[i]) and (0 < nums[i] <= len(nums)):\n                     nums[nums[i]-1], nums[i] = nums[i], nums[nums[i]-1]\n                     #print(nums, 'up')\n                 else:\n                     pass\n             #print(nums)\n             for i in range(len(nums))[::-1]:\n                 if ((i + 1) != nums[i]) and (0 < nums[i] <= len(nums)):\n                     nums[nums[i]-1], nums[i] = nums[i], nums[nums[i]-1]\n \n                 else:\n                     pass\n             #print(nums)\n         for i in range(len(nums)):\n             if not i+1 == nums[i]:\n                 #print(nums)\n                 return(i+1)\n         if sorted(nums) == nums:\n             return(len(nums)+1)\n", "class Solution:\n     def firstMissingPositive(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) == 0:\n             return 1\n         nums.append(0)\n   \n         for i in reversed(range(len(nums))):\n             n = nums[i]\n             while n>=0 and n<len(nums) and i != n:\n                 nums[n], nums[i] = nums[i], nums[n]\n                 if n == nums[i]:\n                     break\n                 n = nums[i]\n         print(nums)\n         \n \n         for i,n in enumerate(nums):\n             if i==0:\n                 continue\n             if i != n:\n                 return i\n         return nums[-1]+1", "class Solution:\n     def firstMissingPositive(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         n = len(nums)\n         for i in range(n):\n             while nums[i] > 0 and nums[i] <= n and nums[i] != i+1 and nums[i] != nums[nums[i]-1]:\n                 nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i]-1]\n         for i in range(n):\n             if nums[i] != i + 1:\n                 return i + 1\n         return n + 1\n"]