["m = 1000000007\nn = int(input())\na = list(map(int, input().split()))\nprint(pow(2,n-1,m)-1 - sum(pow(2,a.count(x),m)-1 for x in set(a) if x != -1) % m)", "m = 1000000007\nn = int(input())\na = input().split()\nprint(pow(2,n-1,m)-1 - sum(pow(2,a.count(x),m)-1 for x in set(a) if x != '-1') % m)", "m,n,a = 1000000007,int(input()),input().split()\nprint(pow(2,n-1,m)-1 - sum(pow(2,a.count(x),m)-1 for x in set(a) if x != '-1') % m)", "m,n,a=1000000007,int(input()),input().split()\nprint((pow(2,n-1)-1-sum(pow(2,a.count(x))-1 for x in set(a) if x!='-1'))%m)", "n = int(input())\na = [int(i) for i in input().split()]\nb = [0] * (n + 1)\nsum = 2 ** (n - 1) - 1\nfor i in a:\n    if(i > 0):\n        b[i] = b[i] + 1\nfor i in b:\n    sum = sum - 2 ** i + 1\nprint(sum % 1000000007)\n", "from fractions import Fraction\nfrom copy import copy\nfrom random import randint\nfrom collections import *\nimport sys\nsys.setrecursionlimit(1500)\nclass F:\n    def __init__(self,m,n):\n        self.m = m\n        self.n = n\n        self.save = {}\n    def __call__(self,a):\n        if a in self.save:\n            return self.save[a]\n        if type(a) != Fraction:\n            a = Fraction(a)\n        m = self.m\n        n = self.n\n        if a == 0:\n            return Fraction(-0.5)\n        if a == 1:\n            return Fraction(-1)\n        self.save[a] = 2*f(a-1)-(a-2)*f(1)-1\n        return self.save[a]\ndef egcd(a, b):\n    if a == 0:\n        return (b, 0, 1)\n    else:\n        g, y, x = egcd(b % a, a)\n        return (g, x - (b // a) * y, y)\n\ndef modinv(a, m):\n    g, x, y = egcd(a, m)\n    if g != 1:\n        raise Exception('modular inverse does not exist')\n    else:\n        return x % m\n# print(estimate([2,1,0]))\n\nn = int(input())\narr = [int(x) for x in input().split()]\n# arr = [3,3,-1,-1,4,4,-1,-1,-1,-1,-1,10,10,10,10,10,10,4,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,3,3,3,3,3,3,3]\na = []\ncnt = defaultdict(int)\nfor x in arr:\n    cnt[x] += 1\nfor key in cnt:\n    cnt[-1] -= 1\ncnt[-1] += 1\nfor (key,value) in list(cnt.items()):\n    if key == -1:\n        for i in range(value):\n            a.append(1)\n    else:\n        a.append(value+1)\n# print(len(a),sum(a),a)\nn = len(a)\nm = sum(a)\nf = F(m,n)\n# for i in range(m+1):\n    # print(i,f(i))\nans = sum(f(x) for x in a)-f(m)\nMOD = 10**9+7\n# print(float(ans))\n# print(modinv(25025,MOD)*25025%MOD,ans.denominator)\nprint(ans.numerator*modinv(ans.denominator,MOD)%MOD)\n\n"]