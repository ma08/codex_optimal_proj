["from itertools import groupby\n\ndef merge(line):\n    merged = []\n    for k,g in groupby( v for v in line if v ):\n        g = list(g)\n        n,r = divmod(len(g),2)\n        if n: merged.extend([k*2]*n)\n        if r: merged.append(k)\n    return merged + [0]*(len(line)-len(merged))", "def merge(line):\n    line = ungap(line)\n    for i in range(len(line) - 1):\n        if line[i] == line[i+1]:\n            line[i], line[i+1], i = line[i]*2, 0, i+1\n    return ungap(line)\n\n\ndef ungap(line):\n    return [n for n in line if n] + [0] * line.count(0)\n", "from itertools import chain, groupby\n\ndef merge_group(grp):\n    xs = list(grp)\n    q, r = divmod(len(xs), 2)\n    return [xs[0] * 2] * q + [xs[0]] * r\n    \ndef merge(line):\n    n = len(line)\n    line = list(filter(None, line))\n    line = list(chain.from_iterable(merge_group(grp) for _, grp in groupby(line)))\n    return line + [0] * (n - len(line))", "def merge(row):\n    new_row, last_tile = [], 0\n    \n    for tile in row:\n        if tile and tile == last_tile:\n            new_row[-1] *= 2\n            last_tile = 0\n        elif tile != 0:\n            new_row.append(tile)\n            last_tile = tile\n  \n    return new_row + [0] * (len(row) - len(new_row))", "def merge(line):\n    viper = [x for x in line if x]\n    if len(viper) > 1:\n        head, neck = viper[:2]\n        equal = head == neck\n        head += neck * equal\n        tail = merge(viper[1 + equal:])\n        return [head] + tail + [0] * (len(line) - len(tail) - 1)\n    else:\n        return line", "# Dumb 4-size array solution cause why not?\ndef merge(line):\n    if line[0] != 0 and line[0] == line[1]:\n        if line[2] != 0 and line[2] == line[3]:\n            return [line[0] + line[1], line[2] + line[3], 0, 0]\n        else:\n            return [line[0] + line[1], line[2], line[3], 0]\n    elif line[0] != 0 and line[1] == 0 and line[0] == line[2]:\n        return [line[0] + line[2], line[3], 0, 0]\n    elif line[0] != 0 and line[1] == 0 and line[2] == 0 and line[0] == line[3]:\n        return [line[0] + line[3], 0, 0, 0]\n    elif line[0] != 0:\n        if line[1] != 0 and line[1] == line[2]:\n            return [line[0], line[1] + line[2], line[3], 0]\n        elif line[1] != 0 and line[2] == 0 and line[1] == line[3]:\n            return [line[0], line[1] + line[3], 0, 0]\n        elif line[1] != 0:\n            if line[2] != 0 and line[2] == line[3]:\n                return [line[0], line[1], line[2] + line[3], 0]\n            else:\n                return [line[0], line[1], line[2], line[3]]\n        else:\n            if line[2] != 0 and line[2] == line[3]:\n                return [line[0], line[2] + line[3], 0, 0]\n            else:\n                return [line[0], line[2], line[3], 0]\n    else:\n        if line[1] != 0 and line[1] == line[2]:\n            return [line[1] + line[2], line[3], 0, 0]\n        elif line[1] != 0 and line[2] == 0 and line[1] == line[3]:\n            return [line[1] + line[3], 0, 0, 0]\n        elif line[1] != 0:\n            if line[2] != 0 and line[2] == line[3]:\n                return [line[1], line[2] + line[3], 0, 0]\n            else:\n                return [line[1], line[2], line[3], 0]\n        else:\n            if line[2] != 0 and line[2] == line[3]:\n                return [line[2] + line[3], 0, 0, 0]\n            else:\n                return [line[2], line[3], 0, 0]\n\ndef merge(line):\n    i, res = 0, []\n    while i < len(line):\n        x = line[i]\n        if x:\n            for j,y in enumerate(line[i+1:], 1):\n                if y:\n                    if x == y:\n                        res.append(x + y)\n                        i += j\n                    else:\n                        res.append(x)\n                    break\n            else:\n                res.append(x)\n        i += 1\n    return res + [0]*(len(line) - len(res))", "def merge(line):\n    mrg, lst, l, fr = [], [x for x in line if x], len(line), 0\n    for e in lst:\n        if not fr:\n            fr = e\n        elif fr==e:\n            mrg.append(fr+e)\n            fr = 0\n        else:\n            mrg.append(fr)\n            fr = e\n                \n    mrg.append(fr)\n    while len(mrg)<l:\n        mrg.append(0) \n    return mrg\n", "def merge(line):\n    a,li,i= list(filter(lambda x:bool(x),line)),[],0\n    while i < len(a):\n        if i < len(a)-1 and a[i]==a[i+1] : a[i]+= a[i+1] ; li.append(a[i]) ; i+=1\n        else : li.append(a[i])\n        i+=1\n    return li+[0]*(len(line)-len(li))", "def merge(line):\n    temp = [x for x in line if x != 0]\n    res = []\n    while temp:\n        if len(temp) > 1 and temp[0] == temp[1]:\n            res.append(temp.pop(0) + temp.pop(0))\n        else:\n            res.append(temp.pop(0))\n    return res + [0] * (len(line) - len(res))", "def merge(a):    \n    a = [i for i in a if i] + [i for i in a if not i]\n    for i in range(len(a) - 1):\n        if a[i] == a[i+1]: a[i], a[i+1] = 2 * a[i], 0\n\n    return [i for i in a if i] + [i for i in a if not i]"]