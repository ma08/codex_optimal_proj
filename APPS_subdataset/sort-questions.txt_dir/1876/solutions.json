["def fun(k):\n     n = 1 + 8*k\n     s = math.floor(n**0.5)-1\n     s = s//2\n     return s\n class Solution:\n     def reachNumber(self, target):\n         \"\"\"\n         :type target: int\n         :rtype: int\n         \"\"\"\n         if target<0:\n             target *= -1\n         L = [[3,2,1,1],[1,1,3,2]] \n         k = fun(target)\n         if k*(k+1)/2==target:\n             ans = 0\n         else:\n             ans = L[target%2][k%4]\n         #print(target,\"->\",k,k+ans)\n         return k+ans\n         ", "import math\n \n class Solution:\n     def reachNumber(self, target):\n         \"\"\"\n         :type target: int\n         :rtype: int\n         \"\"\"\n         if target < 0: target = - target\n         n = math.floor((target * 2) ** 0.5)\n         while n * (n + 1) < 2 * target: n += 1\n         while ((n - 1) % 4) >> 1 == target % 2: n += 1\n         return n", "class Solution:\n     def reachNumber(self, target):\n         t = abs(target)\n         n = math.floor(math.sqrt(2*t))\n         while True:\n             to_minus = ((n+1)*n)/2 - t \n             if to_minus >= 0:  \n                 if to_minus%2==0:\n                     return int(n)\n             n+=1\n", "class Solution:\n     def reachNumber(self, target):\n         \"\"\"\n         :type target: int\n         :rtype: int\n         \"\"\"\n         target=abs(target)\n         \n         n=math.ceil(((1+8*target)**0.5-1)/2)\n         \n         if target%2>0:\n             if n%4==1 or n%4==2:\n                 return n\n             elif n%4==3:\n                 return n+2\n             else:\n                 return n+1\n         else:\n             if n%4==3 or n%4==0:\n                 return n\n             elif n%4==1:\n                 return n+2\n             else:\n                 return n+1\n", "class Solution:\n     def reachNumber(self, target):\n         target = abs(target)\n         def binary_search(lo, hi):\n             if lo >= hi:\n                 return lo\n \n             mi = lo + (hi - lo) // 2\n             t = mi * (mi + 1) // 2\n \n             if t == target:\n                 return mi\n             elif t < target:\n                 return binary_search(mi + 1, hi)\n             else:\n                 return binary_search(lo, mi)\n \n         res = binary_search(0, target)\n         if target % 2 == 0 and 1 <= res % 4 <= 2:\n             return res + 3 - res % 4\n         elif target % 2 == 1 and (res % 4 == 3 or res % 4 == 0):\n             return res + 4 - (res - 1) % 4\n         else:\n             return res", "import math\n class Solution:\n     def reachNumber(self, target):\n         \"\"\"\n         :type target: int\n         :rtype: int\n         \"\"\"\n         nTarget = target if (target>0) else -target\n         n = math.ceil((-1 + math.sqrt(1+8*nTarget))/(2))\n         curSum = int(n*(n+1)/2)\n         if curSum == nTarget: return n\n         res = curSum - nTarget\n         if res%2 == 0: return n\n         if n%2 == 1: return n+2\n         return n+1", "import math\n class Solution:\n     def reachNumber(self, x):\n         \"\"\"\n         :type target: int\n         :rtype: int\n         \"\"\"\n         if x == 0:\n             return 0\n \n         x = abs(x)\n         n = max(math.floor(math.sqrt(2 * x)) - 1, 0)\n         sum = n * (n + 1) // 2\n         while sum < x:\n             n += 1\n             sum += n\n \n         if (sum - x) % 2 == 0:\n             return n\n         else:\n             if (n + 1) % 2 == 1:\n                 return n + 1\n             else:\n                 return n + 2", "class Solution:\n     def reachNumber(self, t):\n         \"\"\"\n         :type target: int\n         :rtype: int\n         \"\"\"\n         t = abs(t)\n         lo,hi = 1,t\n         while lo<hi:\n             m = (lo+hi)//2\n             val = m*(m+1)//2\n             if val<t: lo = m+1\n             else: hi = m\n         sm = lo*(lo+1)//2\n         ans = lo\n         while (sm-t)%2!=0:\n             ans += 1\n             sm += ans\n         return ans", "class Solution:\n     def reachNumber(self, target):\n         \"\"\"\n         :type target: int\n         :rtype: int\n         \"\"\"\n         target = abs(target)\n         s = 0\n         for i in range( target+1):\n             s += i\n             if s >= target:\n                 break\n         if (s - target)&1 :\n             if (i+1)&1:\n                 return i+1\n             else:\n                 return i+2\n         else:\n             return i\n \n \n"]