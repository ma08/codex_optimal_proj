["# cook your dish here\nn,q=map(int,input().split())\nls=[int(i) for i in input().split()]\ncur=0\ns=[0]\nfor i in ls:\n cur=cur^i\n s.append(cur)\nfor i in range(q):\n k=int(input())\n print(s[k%(n+1)])", "# cook your dish here\nn,k=list(map(int,input().split()))\nd=[0]+list(map(int,input().split()))\nl=[0]\nfor i in range(1,n+1):\n l.append(l[i-1]^d[i])\nfor q in range(k):\n x=int(input())\n print(l[x%(n+1)])\n", "#!/usr/bin/env python3\n\n(n, q) = input().split()\nn = int(n)\nq = int(q)\nf = [int(fi) for fi in input().split()]\ncur = 0\ns = [0]\nfor fi in f:\n cur = cur ^ fi\n s.append(cur)\nfor i in range(q):\n k = int(input())\n print(s[k % (n + 1)])\n", "# cook your dish here\nn,q=list(map(int,input().split(' ')))\nar,xor=list(map(int,input().split(' '))),0\n\nfor x in ar: xor^=x\nar.append(xor)\n\nprefix=[0]*(n+1)\nprefix[0]=ar[0]\n\nfor i in range(1,len(prefix)): prefix[i]=ar[i]^prefix[i-1]\nfor i in range(q):  print(prefix[(int(input())-1)%(n+1)])\n", "n,q=list([int(x) for x in input().split()])\na=list([int(x) for x in input().split()])\nxor_a=0\nfor i in a:\n xor_a=xor_a^i\n\na.append(xor_a)\nprefix=[a[0]]\nfor i in range(1,len(a)):\n prefix.append(a[i]^prefix[i-1])\n# print(prefix)\nfor i in range(0,q):\n x=int(input())\n print(prefix[(x-1)%(n+1)])\n", "from math import *\nfrom collections import *\nfrom itertools import *\nfrom functools import *\nfrom bisect import *\nfrom heapq import *\nfrom operator import *\nfrom sys import *\nsetrecursionlimit(100000000)\n\nn,k=map(int,input().split())\nl=list(map(int,input().split()))\nl.append(reduce(xor,l))\nl=list(accumulate(l,xor))\nfor _ in range(k):\n v=int(input())\n print(l[(v-1)%len(l)]) ", "from math import *\nfrom collections import *\nfrom itertools import *\nfrom functools import *\nfrom bisect import *\nfrom heapq import *\nfrom operator import *\nfrom sys import *\nsetrecursionlimit(100000000)\n\nn,k=map(int,input().split())\nl=list(map(int,input().split()))\nl.append(reduce(xor,l))\nl=list(accumulate(l,xor))\nfor _ in range(k):\n v=int(input())\n print(l[(v-1)%len(l)]) ", "# cook your dish here\na = [int(s) for s in input().split()]\nb = [int(s) for s in input().split()]\nc = [0]\nd = 0\nfor e in range(a[0]):\n d = d ^ b[e]\n c.append(d)\nfor j in range(a[1]):\n e = int(input())\n if(e <= a[0]): print(c[e])\n else: print(c[(e - (a[0] + 1)) % (a[0] + 1)])", "n,q=list(map(int,input().split()))\nl=list(map(int,input().split()))\nv=[0 for x in range(n)]\nv[0]=l[0]\nfor j in range(1,n):\n v[j]=v[j-1]^l[j]\nfor i in range(q):\n k=int(input())\n if k<=n:\n  print(v[k-1])\n else:\n  ans=(k-n)%(n+1)-1\n  if ans==0:\n   print(0)\n  elif ans<0:\n   print(v[n-1])\n  else:\n   print(v[ans-1])\n", "n,q = map(int,input().split())\nf = list(map(int,input().split()))\nl = [0,f[0]]\nfor i in range(1,n,1):\n l.append(l[-1]^f[i])\nl.append(0)\nfor _ in range(q):\n a = int(input())\n print(l[a%(n+1)])", "# cook your dish here\nl=input().split()\nn=int(l[0])\nq=int(l[1])\nl=input().split()\nli=[int(i) for i in l]\nxori=0\nsi=[0 for i in range(n)]\nfor i in range(n):\n si[i]=xori\n xori=xori^li[i]\nsi.append(xori)\nfi=list(li)\nfi.append(xori)\nfor you in range(q):\n q1=int(input())\n print(si[q1%(n+1)])", "# cook your dish here\nn,q = list(map(int,input().split()))\n\na = list(map(int,input().split()))\ns = [0]*(n+1)\nfor i in range(n):\n if i==0:\n  s[i] = a[i]\n else:\n  s[i] = s[i-1]^a[i]\ns[n] = 0\nfor _ in range(q):\n k = int(input())\n k-=1\n k = k%(n+1)\n print(s[k])", "# cook your dish here\n\nn, q = [int(a) for a in input().strip().split()]\n\nF = [int(a) for a in input().strip().split()]\n\nS = [0]\n\nfor i in range(n):\n S.append(S[i] ^ F[i])\n\nfor _ in range(q):\n k = int(input())\n print(S[k%(n+1)])", "# cook your dish here\nnums = list(map(int, input().split()))\n\narr = list(map(int, input().split()))\n\ncount = 0\ns = []\n\nfor item in arr:\n \n count = count ^ item\n s.append(count)\n \nfor i in range(nums[1]):\n query = int(input())\n \n if query % (nums[0] + 1) == 0:\n  print(0)\n else:\n  print(s[query % (nums[0] + 1) - 1])\n", "# cook your dish here\nn, q = map(int, input().split(' '))\n\nn_bonacci = list(map(int, input().split(' ')))\narr = []\nxor = 0\nfor val in n_bonacci:\n xor = xor ^ val\n arr.append(xor)\n\nfor query in range(q):\n s = int(input())\n \n if s % (n + 1) == 0:\n  print(0)\n else:\n  print(arr[s % (n + 1) - 1])", "n,q = list(map(int, input().split()))\nF = []\nS = []\nline1 = input().split()\nlast = 0\nfor i in range(n):\n F.append(int(line1[i]))\n last = last^int(line1[i])\n S.append(last)\nS.append(0)\n\nfor i in range(q):\n query = int(input())\n pos = (query-1) % len(S)\n final = S[pos]\n print(final)\n", "n,q=list(map(int,input().split()))\narr=[int(n) for n in input().split()]\nx=arr[0]\narr1=[]\narr1.append(x)\nfor i in range(1,n):\n x=x^arr[i]\n arr1.append(x)\narr1.append(0)\nwhile(q):\n q=q-1\n x=int(input())\n r=x%(n+1)\n print(arr1[r-1])\n \n", "n,q=map(int,input().split())\na=list(map(int,input().split()))\nxor=0\nsl=[]\nfor i in a:\n\n xor=xor^i\n sl.append(xor)\nfor i in range(q):\n qval=int(input())\n if(qval%(n+1)==0):\n  print(0)\n else:\n  print(sl[qval%(n+1)-1])", "n,q = map(int,input().split())\nf = [int(w) for w in input().split()]\n\nft = []\n\nft.append(f[0])\n\nfor i in range(1,n):\n temp = ft[i-1]\n temp = temp ^ f[i]\n ft.append(temp)\nft.append(0)\n\nwhile (q):\n k = int(input())\n index = k%(n+1) - 1\n print(ft[index])\n q = q - 1", "#Afrikavi\n\nnq = [x for x in list(map(int, input().split(' ')))]\ntab = [x for x in list(map(int, input().split(' ')))]\nxs = tab[0]\nsol = []\nsol.append(tab[0])\nfor i in range(1, nq[0]):\n xs ^= tab[i]\n sol.append(xs)\nsol.append(sol[-1] ^ xs)\n#print(sol)\nfor i in range(nq[1]):\n q = int(input())\n print(sol[(q - 1) % (nq[0] + 1)])\n", "n,q=map(int,input().split())\nf=list(map(int,input().split()))\nfor j in range(1,n):\n f[j]^=f[j-1]\n#print(f)\nfor g in range(q):\n k=int(input())\n tyagibagi=k%(n+1)\n if tyagibagi==0:\n  print(0)\n else:\n  print(f[tyagibagi-1])", "n,q=[int(i) for i in input().split()]\na=[int(i) for i in input().split()]\nxor=a[0]\nfor i in range(1,len(a)):\n xor = xor^a[i]\na.append(xor)\n#q=int(input())\ns = [a[0]]\nfor i in range(1, len(a)):\n s.append(s[-1] ^ a[i])\nfor I in range(q):\n k=int(input())\n k-=1\n print(s[(k)%(n + 1)])\n\n"]