["def scanner(qrc):\n    bits = ''.join( str(qrc[x][y] ^ ((x+y)%2==0)) for x,y in ticTocGen())\n    size = int(bits[4:12],2)\n    return ''.join( chr(int(bits[i:i+8],2)) for i in range(12,12+8*size,8))\n\n\ndef ticTocGen():\n    x,y,dx = 20,20,-1\n    while y>13: \n        yield from ( (x,y-dy) for dy in range(2) )\n        x+=dx\n        if x==8 or x>20:\n            dx *= -1\n            y  -= 2\n            x   = x==8 and 9 or 20", "def scanner(qrcode):\n    Y, X = len(qrcode) - 1, len(qrcode[0]) - 1\n    x, y, dir = X, Y, -1\n    bits = \"\"\n    \n    while len(bits) < 76:\n        for i in range(2):\n            bits += str(qrcode[x][y-i] ^ ((x + y - i) % 2 == 0))\n        x += dir\n        if x == 8 or x > X:\n            dir = dir * -1\n            x += dir\n            y -= 2\n            \n    size = int(bits[4:12], 2)\n    return \"\".join(chr(int(bits[i:i+8], 2)) for i in range(12, size * 8 + 12, 8))", "def scan_column(qrcode, x0, y0, height, bottom_to_top=True):\n    result = []\n    if bottom_to_top:\n        height_range = list(range(0, height * -1, -1))\n    else:\n        height_range = list(range(height))\n\n    for dy in height_range:\n        y = y0 + dy\n        x = x0\n        result.append(qrcode[y][x] ^ (x + y + 1) % 2)\n        x = x0 - 1\n        result.append(qrcode[y][x] ^ (x + y + 1) % 2)\n\n    return result\n\ndef byte_to_int(byte):\n    return int(''.join(map(str, byte)), 2)\n\ndef raw_data_to_str(raw_data):\n    return ''.join([chr(byte_to_int(byte)) for byte in raw_data])\n\ndef scanner(qrcode):\n    result = []\n    result += scan_column(qrcode, 20, 20, 12, bottom_to_top=True)\n    result += scan_column(qrcode, 18, 9, 12, bottom_to_top=False)\n    result += scan_column(qrcode, 16, 20, 12, bottom_to_top=True)\n    result += scan_column(qrcode, 14, 9, 12, bottom_to_top=False)\n    \n    encoding_raw = result[:4]\n    \n    length_raw = result[4:12]\n    length = byte_to_int(length_raw)\n\n    data_raw = [result[12 + 8 * i: 12 + 8 * (i + 1)] for i in range(length)]\n    data = raw_data_to_str(data_raw)\n\n    return data\n    \n", "def coords():\n    rs = range(9, 21)\n    for c in [20, 16]:\n        for i in reversed(rs):\n            yield i, c\n            yield i, c - 1\n        for i in rs:\n            yield i, c - 2\n            yield i, c - 3\n\n\ndef scanner(qrcode):\n    it = (qrcode[r][c] ^ (1 - (r + c) % 2) for r, c in coords())\n    bstring = \"\".join(map(str, it))\n    offset = 12\n    length = int(bstring[4:offset], 2)\n    bstring = bstring[offset : offset + length * 8]\n    return \"\".join(chr(int(\"\".join(xs), 2)) for xs in zip(*[iter(bstring)] * 8))", "from itertools import islice\nget_byte = lambda it: int(''.join(islice(it, 8)), 2)\n\ndef scanner(qrcode):\n    def next_bit():\n        i, j = 18, 20\n        while True:\n            yield str(i&1 ^ j&1 ^ qrcode[i][j] ^ 1)\n            if j%2 == 0 or (i == 9 and j%4 == 3) or (i == 20 and j%4 == 1):\n                j -= 1\n            else:\n                i += 1 if j%4==1 else -1\n                j += 1\n    bits = next_bit()\n    return ''.join(chr(get_byte(bits)) for _ in range(get_byte(bits)))", "def scanner(qrcode):\n    finding_patterns = {((0, 9), (0, 9)),\n                        ((len(qrcode)-8, len(qrcode)), (0, 9)), \n                        ((0, 9), (len(qrcode)-8, len(qrcode)))}\n    timing_patterns = {((9, len(qrcode)-8), (6, 7)), ((6, 7), (9, len(qrcode)-8))}\n    function_patterns = {\n        (x, y) for (x0, x1), (y0, y1) in finding_patterns | timing_patterns\n        for x in range(x0, x1) for y in range(y0, y1)\n    }\n    \n    reading = ((x, 2*y - (y < 4) - i)\n               for y in range(len(qrcode) // 2, 0, -1)\n               for x in (reversed, iter)[y % 2](list(range(len(qrcode))))\n               for i in range(2))\n    bits = ''.join(str((x+y ^ ~qrcode[x][y]) & 1) for (x, y) in reading\n                   if (x, y) not in function_patterns)\n    return bytes(int(bits[i: i+8], 2) for i in range(12, 12+int(bits[4:12], 2)*8, 8)).decode()\n    \n", "import re\ndef scanner(q):\n    bitseq,mask = [], []\n    for row in range(20, 8, -1):\n        bitseq.append(q[row][20])\n        mask.append((row+20)%2==0)\n        bitseq.append(q[row][19])\n        mask.append((row+19)%2==0)\n    for row in range(9, 21, 1):\n        bitseq.append(q[row][18])\n        mask.append((row+18)%2==0)\n        bitseq.append(q[row][17])\n        mask.append((row+17)%2==0)\n    for row in range(20, 8, -1):\n        bitseq.append(q[row][16])\n        mask.append((row+16)%2==0)\n        bitseq.append(q[row][15])\n        mask.append((row+15)%2==0) \n    for row in range(9, 11, 1):\n        bitseq.append(q[row][14])\n        mask.append((row+14)%2==0)\n        bitseq.append(q[row][13])\n        mask.append((row+13)%2==0) \n    code = [int(not x) if mask[i] else x for i,x in enumerate(bitseq)]   \n    length = int(''.join(map(str, code[4:12])),2)\n    return(''.join([chr(int(x,2)) for x in re.findall(r\"[01]{8}\", ''.join(map(str, code[12:(8*length)+12])))]))\n", "def scanner(qrcode):\n    result = \"\"\n    dict = {1:0, 0:1}\n    x,y= 20 ,20\n    bool =True\n    dir = \"Up\"\n    i = 2\n    count = 0\n    while count < 6:\n        while x > 8 and dir == \"Up\":\n            \n            if (x+y) % 2 == 0:\n                result += str(dict[qrcode[x][y]])\n            else:\n                result += str(qrcode[x][y])\n            if bool:\n                y -= 1\n                bool = False\n            else:\n                x -= 1\n                y += 1\n                bool =True\n            if x == 8:\n                x= 9\n                y= 20 - i\n                i += 2\n                dir = \"Down\"\n                bool =True\n        print(result)\n        count += 1  \n        if count == 5:\n            break\n        else:\n            while x < 21 and dir ==\"Down\":\n                if (x+y) % 2 == 0:\n                    result += str(dict[qrcode[x][y]])\n                else:\n                    result += str(qrcode[x][y])\n                if bool:\n                    y -= 1\n                    bool = False\n                else:\n                    x += 1\n                    y += 1\n                    bool =True\n                    \n                if x == 21:\n                    x= 20\n                    y= 20 - i\n                    i += 2\n                    dir = \"Up\"\n                    bool=True\n            count += 1\n            print(result)\n         \n    len = int(result[4:12],2)\n    \n    ans =\"\"\n    for i in range(len):\n        ans += chr(int(result[12 + i*8:20+i*8],2))\n        \n    \n    return ans\n    \n", "def scanner(qrcode):\n    # Setup\n    bitstring = ''\n    row = 20\n    row_iter = -1\n    col = 20\n    col_iter = 0\n    \n    # Collect bitstring\n    while not(row == 13 and col == 0):\n        if not ((row <= 8 and col <= 8) or (row <= 8 and col >= 13) or (row >= 13 and col <= 8) or row == 6 or col == 6):\n            if (row + col - col_iter)%2 == 0:\n                bitstring += str(1 - qrcode[row][col-col_iter])\n            else:\n                bitstring += str(qrcode[row][col-col_iter]) \n        else:\n            pass\n        \n        # Assign new row col coordinates        \n        row = row + (row_iter * col_iter)\n        col_iter = 1 - col_iter            \n        # Change direction if necessary\n        if (row == -1 or row == 21) and col_iter == 0:\n            row_iter = row_iter * -1\n            row += row_iter\n            col -= 2\n    \n    # Determine string length and clean bitstring\n    str_length = int(bitstring[4:12], 2)\n    bitstring = bitstring[12:] # Remove encoding mode / message length\n    \n    # Convert bits into ASCII and return\n    chars = []\n    for b in range(0,str_length):\n        byte = bitstring[b*8:(b+1)*8]\n        chars.append(chr(int(byte, 2)))\n    return ''.join(chars)", "def up(x0, y0):\n    return tuple((x, y) for y in range(y0+3, y0-1, -1) for x in (x0+1, x0))\ndef down(x0, y0):\n    return tuple((x, y) for y in range(y0, y0+4) for x in (x0+1, x0))\ndef top(x0, y0):\n    return ((x0+3, y0+1), (x0+2, y0+1)) + tuple((x, y0) for x in range(x0+3, x0-1, -1)) + ((x0+1, y0+1), (x0, y0+1))\ndef bot(x0, y0):\n    return ((x0+3, y0), (x0+2, y0)) + tuple((x, y0+1) for x in range(x0+3, x0-1, -1)) + ((x0+1, y0), (x0, y0))\n\nmodebits = (20,20), (19,20), (20,19), (19,19)\nlenbits = up(19,15)\nbits = (\n    up(19,11), top(17,9), down(17,11), down(17,15), bot(15,19), up(15,15), up(15,11), top(13,9),\n    down(13,11), down(13,15), bot(11,19), up(11,15), up(11,11), up (11,7), up(11,2), top(9,0), down(9,2))\n\ndef num(code, bits):\n    n = 0\n    for x, y in bits:\n        n = (n << 1) + (code[y][x] ^ (x+y)%2 ^ 1)\n    return n\n\ndef scanner(qrcode):\n    mode = num(qrcode, modebits)\n    length = num(qrcode, lenbits)\n    print(f'{mode=}, {length=}')\n    return ''.join(chr(num(qrcode, bits[i])) for i in range(length))"]