["def binary_cleaner(seq): \n    res = ([], [])\n    for i,x in enumerate(seq):\n        if x < 2: res[0].append(x)\n        else: res[1].append(i)\n    return res", "def binary_cleaner(lst):\n    return [n for n in lst if n < 2], [i for i, n in enumerate(lst) if n > 1]", "def binary_cleaner(seq): \n    return list(filter(lambda x:x<=1, seq )), [ i for i in range(len(seq)) if seq[i]>1 ]", "def binary_cleaner(seq): \n    return [x for x in seq if x in [0, 1]], [i for i, x in enumerate(seq) if x > 1]", "def binary_cleaner(seq): \n    return [value for value in seq if value==0 or value==1],[index for index,value in enumerate(seq) if value not in (0,1)]", "def binary_cleaner(seq): \n    return [n for n in seq if n < 2], [i for i,n in enumerate(seq) if n > 1]", "def binary_cleaner(seq): \n    list_a, list_b = [],[]\n    for k,v in enumerate(seq):\n        if v>1:\n            list_b.append(k)\n        else: list_a.append(v)\n    return (list_a, list_b)\n", "def binary_cleaner(seq): \n    b = []\n    x = []\n    for i in range(len(seq)):\n        if seq[i] < 2:\n            b.append(seq[i])\n        elif seq[i] > 1:\n            x.append(i)\n    return (b, x)", "def binary_cleaner(seq): \n    less_than_1 = []\n    index_list = []\n    for i, x in enumerate(seq):\n        if x < 2:\n            less_than_1.append(x)\n        if x > 1:\n            index_list.append(i)\n    return (less_than_1, index_list)", "def binary_cleaner(seq): \n    return [i for i in seq if i <= 1], [i for i, el in enumerate(seq) if el > 1]"]