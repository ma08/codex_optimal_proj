["def max_gap(numbers):\n    lst = sorted(numbers)\n    return max(b-a for a,b in zip(lst, lst[1:]))", "import numpy\n\ndef max_gap(numbers):\n    return max(numpy.diff(sorted(numbers)))", "def max_gap(numbers):\n    A = sorted(numbers)\n    return max([abs(A[i] - A[i+1]) for i in range(len(A)-1)])", "def max_gap(n):\n    n.sort()\n    return max(a-b for a, b in zip(n[1:], n))", "def max_gap(numbers):\n    sorted_n = sorted(numbers)\n    return max([sorted_n[i]-sorted_n[i-1] for i in range(1, len(sorted_n))])", "def max_gap(num):\n    num.sort()\n    return max(b - a for a,b in zip(num, num[1:]))", "def max_gap(numbers):\n    return max(abs(a-b) for a, b in zip(sorted(numbers),sorted(numbers)[1:]))", "def max_gap(numbers):\n    numbers.sort()\n    i = 0\n    res =[]\n    while i <len(numbers)-1:\n        if len(numbers)>=0:\n            n =abs(numbers[i]-numbers[i+1])\n            res.append(n)\n        i+=1\n    return max(res)", "def max_gap(lst):\n    lst.sort()\n    return max(y - x for x, y in zip(lst, lst[1:]))", "def max_gap(numbers):\n    numbers.sort()\n    return max(a-b for a, b in zip(numbers[1:], numbers[:-1]))\n"]