["class Solution:\n     def findKthLargest(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: int\n         \"\"\"\n         nums = sorted(nums, reverse=True)\n         return nums[k - 1]", "class Solution:\n     def findKthLargest(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: int\n         \"\"\"\n         nums.sort()\n         return nums[len(nums) - k]", "class Solution:\n     def findKthLargest(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: int\n         \"\"\"\n         heap = []\n         for num in nums:\n             heapq.heappush(heap,num)\n         for _ in range(len(nums)-k):\n             heapq.heappop(heap)\n         return heapq.heappop(heap)\n", "class Solution:\n     def findKthLargest(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: int\n         \"\"\"\n         if not nums: return -1;\n         pq = [];\n \n         for num in nums:\n             if len(pq) < k:\n                 heapq.heappush(pq,num);\n             else:\n                 popped = heapq.heappop(pq);\n                 if popped < num:\n                     heapq.heappush(pq, num);\n                 else:\n                     heapq.heappush(pq, popped);\n \n         return heapq.heappop(pq);        ", "class Solution:\n     def findKthLargest(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: int\n         \"\"\"\n         \n         def partition(nums, ind, i, j):\n             \n             big, scan = i, i\n             \n             nums[ind], nums[j] = nums[j], nums[ind]\n             \n             while scan < j:\n                 if nums[scan] > nums[j]:\n                     nums[big], nums[scan] = nums[scan], nums[big]\n                     big += 1\n                     \n                 scan += 1\n                     \n             nums[j], nums[big] = nums[big], nums[j]\n             # print(nums)\n             # print(big)\n             return big\n             \n         \n         # 12 53 - 1 09\n         \n         \n         i, j = 0, len(nums)-1\n         while i <= j:\n             ind = random.randint(i, j)\n             new_ind = partition(nums, ind, i, j)\n             if new_ind == k-1: \n                 return nums[new_ind]\n             elif new_ind < k-1: \n                 i = new_ind + 1\n             else:\n                 j = new_ind - 1\n                 \n         return -1 \n         \n         \n             \n", "class Solution:\n     def findKthLargest(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: int\n         \"\"\"\n         sor = sorted(nums)\n         lenn = len(nums)\n         return sor[lenn-1-(k-1)]", "class Solution:\n     def findKthLargest(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: int\n         \"\"\"\n         return sorted(nums)[len(nums) - k]", "class Solution:\n     def swap(self, A, i, j ):\n         if A[i] != A[j]:\n             A[i],A[j] = A[j],A[i]\n     def partition(self, A, p, r):\n         self.swap(A, r, random.randint(p, r))\n         x = A[r]\n         j = p - 1\n         for i in range(p, r):\n             if A[i] <= x:\n                 j += 1\n                 self.swap(A, i, j)\n         j += 1\n         self.swap(A, r, j)\n         return j\n     def findElement(self, A, k):\n         low, high = 0, len(A) - 1\n         while low < high:\n             i = self.partition(A, low, high)\n             if i > k:\n                 high = i - 1\n             elif i < k :\n                 low = i + 1\n             else:\n                 return A[k]\n         return A[k]\n     \n     def findKthLargest(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: int\n         \"\"\"\n         return self.findElement(nums, len(nums) - k)\n"]