["class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        count = 0\n        num = arr[0]\n        for x in arr:\n            if x == num:\n                count = count+ 1\n            elif x != num and ((count / len(arr))>0.25):\n                return num\n            else:\n                num = x\n                count = 1\n        return arr[len(arr)-1]", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        n = len(arr) // 4\n        for i in range(len(arr)):\n            if arr[i] == arr[i + n]:\n                return arr[i]\n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        a = list(set(arr))\n        print(a)\n        per = 0\n        i = 0\n        while per <= 0.25:\n            b = a[i]\n            per = arr.count(a[i]) / len(arr)\n            i += 1\n        return(b)", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        for i in set(arr):\n            if arr.count(i)>0.25*len(arr):\n                return i", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        \n        setter = set(arr)\n        a_fourth = len(arr)/4\n        for elem in setter:\n            if arr.count(elem) > a_fourth:\n                return elem", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        s=set(arr)\n        perc_val=0.25*len(arr)\n        for e in s:\n            if arr.count(e)>perc_val:\n                return e\n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        len_25 = len(arr) * .25\n        for item in set(arr):\n            if arr.count(item) > len_25:\n                return item", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        x=len(arr)/4\n        i=0\n        while i<len(arr):\n            y=arr.count(arr[i])\n            print(i)\n            if y>x:\n                return arr[i]\n            i+=y\n    \n        \n        \n        \n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        x=len(arr)/4\n        for i in arr:\n            y=arr.count(i)\n            if y>x:\n                return i\n    \n        \n        \n        \n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        for num in set(arr):\n            if (arr.count(num) / len(arr)) * 100 > 25:\n                return num", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        for i in arr:\n            if arr.count(i) > len(arr) / 4:\n                return i\n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        \n        arrlen = len(arr)\n        \n        arrcnt = Counter(arr)\n        \n        for key, val in arrcnt.items():\n            if val*4>arrlen:\n                return key", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        for i in set(arr):\n            if arr.count(i)>len(arr)/4:\n                return i\n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        temp=list(set(arr))\n        for i in range(len(temp)):\n            if (arr.count(temp[i]))/len(arr)>0.25:\n                return temp[i]\n\n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        sets = set(arr)\n        \n        for num in sets:\n            s = arr.count(num)\n            if s > len(arr) / 4:\n                return num\n            \n        \n        return None\n            \n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        unique_nums = list(dict.fromkeys(arr))\n        \n        for unique_num in unique_nums:\n            if (arr.count(unique_num) / len(arr)) > 0.25:\n                return unique_num\n", "\nclass Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        val = len(arr)*0.25\n        for i in set(arr):\n            if arr.count(i)>val:\n                return i\n                break\n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        arrLen = len(arr)\n        maxCount = 0\n        maxCountNumber=0\n        arrDict = {}\n        for i in range(arrLen):\n            if arr[i] not in arrDict:\n                arrDict[arr[i]] = i\n                numCount = arr.count(arr[i])\n                if numCount > maxCount:\n                    maxCountNumber = arr[i]\n                    maxCount = numCount\n        return maxCountNumber\n                    \n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        if len(arr) == 1:\n            return arr[0]\n        else:\n            appear = -(-len(arr) // 4)\n            dict ={}\n            for i in arr:\n                if i not in dict:\n                    dict[i] = 1\n                else:\n                    dict[i] += 1\n                if dict[i] > appear:\n                    return i", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        x=len(arr)/4\n        i=0\n        while i<len(arr):\n            y=arr.count(arr[i])\n            if y>x:\n                return arr[i]\n            i+=y\n    \n        \n        \n        \n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        return [i for i in set(arr) if arr.count(i) > len(arr)/4][0]\n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        quarter = len(arr) / 4\n        count = 0\n        temp = []\n        \n        for item in arr:\n            if item not in temp:\n                temp.append(item)\n        \n        for item in temp:\n            count = arr.count(item)\n            if count > quarter:\n                return item", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        unique_values = list()\n        for i in range(0, len(arr)):\n            if arr[i] not in unique_values:\n                unique_values.append(arr[i])\n        for j in range(0, len(unique_values)):\n            if arr.count(unique_values[j])/len(arr)>0.25:\n                return unique_values[j]\n            \n        \n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        \n \n        k = list(set(arr))\n\n#print(k)\n\n        tmp = []\n\n        size = len(arr)\n\n\n\n        for i in k:\n            tmp.append(arr.count(i))\n\n        maximum = max(tmp)\n\n        indexing = tmp.index(maximum)\n\n        z = (maximum / size)*100\n\n        if(z>=25):\n            return (k[indexing])\n        else:\n            return 0", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        k=list(set(arr))\n        tmp=[]\n        for i in k:\n            tmp.append(arr.count(i))\n        max1=max(tmp)\n        index=tmp.index(max1)\n        print(k[index])\n        if max1>(len(arr)/4):\n            return k[index]", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        condensed = set(arr)\n        counter = 0\n        digit = 0\n        print(condensed)\n        for i in condensed:\n            temp = arr.count(i)\n            if counter < temp:\n                counter = temp\n                digit = i\n        return (digit)\n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        '''\n        # fisrt solution\n        if len(arr)==1: return arr[0]\n        step = 1 if len(arr)<8 else len(arr)//4        \n        for i in range(len(arr)):\n            if arr[i]==arr[i+step]: return arr[i]\n        '''\n        return max(set(arr), key = arr.count)", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        l = len(arr)//4\n        for i in range(len(arr)-l):\n            if arr[i]==arr[i+l]:\n                return arr[i]", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        for ar in arr:\n            a = self.find(arr, ar,True)\n            b = self.find(arr, ar,False)\n            if (b - a + 1) > len(arr) * 0.25:\n                return ar\n\n    def find(self, arr, value, fromLeft: bool):\n        left = 0\n        right = len(arr) - 1\n\n        index = -1\n\n        while left <= right:\n            mid = (left + right) // 2\n            midValue = arr[mid]\n\n            if midValue == value:\n                index = mid\n                break\n\n            if value < midValue:\n                right = mid\n            else:\n                left = mid\n\n\n        if fromLeft:\n            while index > 0:\n                if arr[index] == arr[index-1]:\n                    index -= 1\n                else:\n                    break\n\n            return index\n        else:\n            while index < (len(arr)-1):\n                if arr[index] == arr[index + 1]:\n                    index += 1\n                else:\n                    break\n\n\n            return index", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        if(len(arr)==1):\n            return arr[-1]\n        \n        k= int(len(arr)//4) + 1\n        c=1\n        for i in range(1,len(arr)):\n            if(arr[i-1]==arr[i]):\n                c+=1\n                if(c>=k):\n                    return arr[i]\n            else:\n                c=1\n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        count = {}\n        for num in arr:\n            count[num] = count.get(num, 0) + 1\n            if count[num] > len(arr) * 0.25:\n                return num\n            \n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        rate = len(arr) // 4\n        \n        count = [0 for i in range(100001)]\n        \n        for idx, value in enumerate(arr):\n            count[value] += 1\n            \n            if count[value] > rate:\n                return value\n            \n        return 0", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        \n        goal_count = len(arr) *.25\n        temp_list = []\n        \n        for num in arr:\n            if len(arr) == 1:\n                return arr[0]\n            elif len(temp_list) > goal_count:\n                return temp_list[0]\n            elif num in temp_list:\n                temp_list.append(num)\n            else:\n                temp_list.clear()\n                temp_list.append(num)\n        return temp_list[0]\n                \n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        d = {}\n        \n        for num in arr:\n            d[num] = d.get(num,0) + 1\n        \n        for idx,val in d.items():\n            if val > len(arr)*0.25:\n                return idx", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        arrLen = len(arr)\n        delta = arrLen//4\n        if arrLen == 1:\n            return arr[0]\n        \n        pre = ''\n        i = 0\n        while i < arrLen - delta:\n            if arr[i] != pre:\n                pre = arr[i]\n                if arr[i+delta] == pre:\n                    return pre\n            i += 1\n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        if len(arr) == 1:\n            return arr[0]\n        \n        limit = len(arr) // 4\n        curr = arr[0]\n        count = 1\n        \n        # print(len(arr), limit)\n        \n        for i in range(1, len(arr)):\n            if arr[i] != curr:\n                curr = arr[i]\n                count = 1\n                continue\n            else:\n                count += 1\n                if count > limit:\n                    return curr\n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        if len(arr) <= 2:\n            return arr[0]\n        lim = len(arr) // 4\n        count = 1\n        for num1, num2 in zip(arr, arr[1:]):\n            if num1 == num2:\n                count += 1\n                if count > lim:\n                    return num1\n            else:\n                count = 1", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        if len(arr) == 0:\n            return -1 \n        if len(arr) == 1:\n            return arr[0]\n        \n        p1 = p2 = 0\n        arrLen = len(arr)\n        while p2 < arrLen:\n            if arr[p2] != arr[p1]:\n                if (p2 - p1) / arrLen > 0.25:\n                    return arr[p1]\n                p1 = p2\n            p2 += 1\n        return arr[p2 - 1]", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        num_dict = {}\n        for num in arr:\n            if num in num_dict:\n                num_dict[num] +=1\n            else:\n                num_dict[num] = 1\n        \n        return max(num_dict, key=lambda k: num_dict[k])", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        count = 0\n        maxCount = 0\n        maxInt = arr[0]\n        currInt = arr[0]\n        for x in arr:\n            if x != currInt:\n                if count > maxCount:\n                    maxCount = count\n                    maxInt = currInt\n                currInt = x\n                count = 1\n            else:\n                count += 1\n        if count > maxCount:\n            maxCount = count\n            maxInt = currInt\n        return maxInt", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        # get 25% length of arr.\n        div = len(arr) // 4\n        # go through array and use div to check if an element spans to that length, if it does, special integer found.\n        for i in range(len(arr) - div):\n            if arr[i] == arr[i + div]:\n                return arr[i]", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        d = Counter(arr)\n        d = sorted(list(d.items()), key = lambda x: x[1], reverse = True)\n        return d[0][0]\n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        \n        n = len(arr)//4\n        for i in range(len(arr)):\n            if arr[i] == arr[i+n]:\n                return arr[i]\n        \n", "from collections import Counter\nclass Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        # def bin_search_variant(low, high, prev_val):\n        #     mid = (high - low) // 2\n        #     if arr[mid] == prev_val:\n        #         return prev_val\n        #     elif arr[mid]:\n#         if len(arr) == 1 or len(arr) == 2 or len(arr) == 3:\n#             return arr[0]\n        \n#         cntr = Counter(arr).items()\n#         for k, v in cntr:\n#             if v > len(arr) / 4:\n#                 return k\n        \n        n = len(arr)\n        if n <= 9: return self.findMode(arr)\n        c = [\n           arr[0],\n           arr[(n-1)//8],\n           arr[2*(n-1)//8],\n           arr[3*(n-1)//8],\n           arr[4*(n-1)//8],\n           arr[5*(n-1)//8],\n           arr[6*(n-1)//8],\n           arr[7*(n-1)//8],\n           arr[n-1]\n        ]\n        return self.findMode(c)\n    \n    def findMode(self, arr: List[int]) -> int:\n        # this findMode can be furthur optimized given the input is also non-descending\n        return collections.Counter(arr).most_common(1)[0][0]\n                    \n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        n = len(arr)\n        d = n//4\n        for i in range(n - 4):\n            if arr[i] == arr[i+d]:\n                return arr[i]\n        return arr[-1]\n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        n = len(arr)/4\n        freq ={}\n        for i in arr:\n            if i in freq:\n                freq[i] += 1\n            else:\n                freq[i] = 1\n        for k, v in list(freq.items()):\n            if v > n:\n                return k\n", "from collections import defaultdict\n\nclass Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        counts = defaultdict(int)\n        for i in arr:\n            counts[i] += 1\n        return max(counts.items(), key=lambda x : x[1])[0]", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        d={}\n        max1=0\n        for i in arr:\n            if i in d:\n                d[i]=d[i]+1\n                \n            else:\n                d[i]=1\n            max1=max(d[i],max1)\n        for i in d:\n            if d[i]==max1:\n                return i\n        \n                \n            \n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        n = len(arr)\n        threshold = n/4.0\n        print (threshold)\n        oldnum = None\n        for num in arr:\n            # print (oldnum, num)\n            if oldnum==num: \n                count += 1\n                if count>threshold:\n                    return num\n            else:\n                count=1\n                oldnum=num\n                \n        if count>threshold:\n            return num", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        start = True\n        \n        d =0\n        count=0\n        \n        if len(arr) == 1:\n            return arr[0]\n        \n        for v in arr:\n            if start:\n                start=False\n                d = v\n                count = 1\n            else:\n                if v == d:\n                    count += 1\n                    if len(arr) % 4 == 0 and count > len(arr)/4:\n                        return v\n                    if len(arr) % 4 != 0 and count >= len(arr) // 4 + 1:\n                        return v\n                else:\n                    d = v \n                    count = 1\n                    \n        return 0\n", "from collections import defaultdict\nclass Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        \n        \n        count = 0\n        \n        thresh_count = int(.25*len(arr))\n        dic = defaultdict(int)\n        \n        for ele in arr:\n            dic[ele]+=1\n            if dic[ele]> thresh_count:\n                return ele\n            \n        \n        \n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        b = {}\n        for a in arr:\n            if a not in b:\n                b[a] = 1\n            else:\n                b[a] += 1\n        c = [[k, v] for k, v in sorted(b.items(), key=lambda item: item[1])]\n        return c[-1][0]", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        count = [0]*100001\n        n = len(arr)\n        for i in arr:\n            count[i] += 1\n        for i in range(len(count)):\n            if(count[i] > int(0.25*n)):\n                return i\n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        minCount = len(arr)//4\n        temp = 0\n        pp = 0\n        for i in range(len(arr)):\n            if pp == arr[i]:\n                temp += 1\n            else:\n                temp = 0\n            if temp >= minCount:\n                return arr[i]\n            pp = arr[i]\n                \n        \n        \n        \n        # from collections import Counter\n        # c = Counter(arr)\n        # return list(c.most_common(1))[0][0]\n", "import numpy as np\nclass Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        # temp=np.unique(arr)\n        # le = len(arr)\n        # for i in temp:\n        #     if (arr.count(i)/le>0.25):\n        #         return i\n        return collections.Counter(arr).most_common(1)[0][0]\n        # print(collections.Counter(arr).most_common(1))\n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        from scipy import stats\n        x=stats.mode(arr)\n        y=int(x[1])*100/len(arr)\n        if y>25:\n            return int(x[0])\n            \ns=Solution()\nprint(s.findSpecialInteger)", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        \n        the_dict = {}\n        for num in arr:\n            the_dict[num] = the_dict.get(num, 0) + 1\n        \n        for item in list(the_dict.items()):\n            if item[1] == max(the_dict.values()):\n                return item[0]", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        cnt = collections.Counter(arr)\n        \n        for k, v in cnt.items():\n            if v == max(cnt.values()):\n                return k", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        from collections import Counter\n#         p = len(arr)*0.25\n        c = Counter(arr)\n#         for i,j in c.items():\n#             if float(j) > p:\n#                 return i\n        for i,j in list(c.items()):\n            if j==max(c.values()):\n                return i\n        \n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        len1 = int(len(arr)*0.25)\n        count = 0\n        sub =[]\n        for i in arr:\n            if i not in sub:\n                sub.append(i)\n                count = 1\n            else:\n                count+=1\n            if count >len1:\n                return i", "class Solution: # counters or 2 pointers\n    from collections import Counter\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        res = Counter(arr)\n        ans = 0\n        for key, value in list(res.items()):  \n            if value / sum(res.values()) > 0.25: # 25%\n                ans = key\n        return ans\n", "from collections import Counter\n\nclass Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        return [key for key, value in Counter(arr).items() if value > len(arr) // 4][0]", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        l = len(arr)\n        bound = l/4\n        s = set()\n        for i in arr:\n            if i not in s:\n                if arr.count(i)>bound:\n                    return i\n                s.add(i)", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        for i in range(len(arr)):\n            if (arr.count(arr[i]) / len(arr)) > 0.25:\n                s=arr[i]\n                break\n        return s        \n        \n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        uniq = list()\n        [uniq.append(i) for i in arr if i not in uniq]\n        occurs = {i:0 for i in arr}\n        for i in arr:\n            occurs[i] += 1\n        return [key for key, val in list(occurs.items()) if val/len(arr) > 0.25][0]\n\n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        elem = 0\n        for ar in arr:\n            if arr.count(ar) > int(0.25*len(arr)):\n                elem = ar\n                break\n        return elem", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        for i in arr:\n            if arr.count(i) > len(arr)//4:\n                return i", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        n=len(arr)//4\n        for i in arr:\n            if arr.count(i)>n:\n                return i\n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        for i in arr:\n            if arr.count(i) / len(arr) > 0.25:\n                return i\n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        for i in arr:\n            x = arr.count(i)\n            perc = float(x)/float(len(arr))\n            if perc > 0.25:\n                return i\n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        for n in arr:\n            if arr.count(n)/len(arr) > 0.25:\n                return n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        quarter = len(arr)//4\n        count = 1\n        for i in range(len(arr)):\n            if i==len(arr)-1:\n                return arr[i]\n            if arr[i]==arr[i+1]:\n                count+=1\n                if count>quarter:\n                    return arr[i]\n            else:\n                count=1\n                \n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        for i in arr:\n            if float(arr.count(i)/len(arr))>0.25:\n                return i\n        \n                \n            \n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        l=len(arr)\n        l=l/4\n        for i in arr:\n            if arr.count(i)>l:\n                return i\n            \n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        for i in arr:\n            if arr.count(i) > len(arr) // 4:\n                return i\n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        mark = len(arr) // 4\n        for x in arr:\n            if mark < arr.count(x):\n                return x", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        for i in arr:\n            if float(arr.count(i)/len(arr))>0.25:\n                return i", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        l=len(arr)\n        a=l//4\n        for i in arr:\n            if arr.count(i)>a:\n                return i\n        return -1    ", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        largeArr = {}\n        tempCount = 0\n        for num in arr:\n            if num in largeArr:\n                tempCount = tempCount + 1\n                largeArr[num] = tempCount\n            else:\n                tempCount = 1\n                largeArr[num] = tempCount\n        max1 = max(largeArr.values())\n        for key in list(largeArr.keys()):\n            if largeArr[key] == max(largeArr.values()):\n                return key\n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        for i in arr:\n            if(arr.count(i)>len(arr)*25//100):\n                return(i)\n                break", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        counts = dict()\n        for i in arr:\n            counts[i] = counts.get(i, 0) + 1\n        \n        return max(counts, key=counts.get)", "class Solution:\n    def findSpecialInteger(self, l: List[int]) -> int:\n        for i in l:\n            if l.count(i)>len(l)/4:\n                return i", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        cnt = len(arr) * 0.25\n        for i in arr:\n            if arr.count(i) > cnt:\n                return i", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        num  = 0.25*len(arr)\n        for item in arr:\n            if arr.count(item)>num:\n                return item", "class Solution:\n    def findSpecialInteger(self, nums: List[int]) -> int:\n        percent = len(nums)*0.25\n        for I in nums:\n            if nums.count(I) > percent:\n                return I\n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        for i in arr:\n            if arr.count(i)/len(arr) > 0.25:\n                return i", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        dic = Counter(arr)\n        return [k for k,v in dic.items() if v==max(dic.values())][0]", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n\n        threshold = len(arr)//4\n        numdic = {}\n        for num in arr:\n\n            if str(num) not in numdic:\n                numdic[str(num)] = 1\n            else:\n                numdic[str(num)] += 1\n\n            if numdic[str(num)] > threshold:\n                return num\n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        nums = list(set(arr))\n        for i in nums:\n            if(arr.count(i) >= (len(arr)//4) + 1):\n                return i\n        return False", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        arr1 = set(arr)     #-- to remove duplicate for iteration purpose only\n        \n        cutoff = len(arr)*0.25\n        \n        for item in arr1:\n            if arr.count(item) > cutoff:\n                return(item)\n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        for num in set(arr):\n            if arr.count(num)/len(arr) > 0.25:\n                return num", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        for num in arr:\n            if arr.count(num) > (len(arr)//4):\n                return num", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        count = 0.25*len(arr)\n        arr1 = list(set(arr))\n        for ele in arr1:\n            if arr.count(ele)>count:\n                return ele \n    \n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        unique = set(arr)\n        for i in unique:\n            if arr.count(i) > len(arr)//4:\n                return i", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        for item in set(arr):\n            l = len(arr)\n            if arr.count(item) > l/4:\n                return item", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        \n        a = len(arr)*0.25\n        value =0\n        a1 = int(a)\n        \n        print(a1)\n        \n        dict1 ={}\n        \n        \n        for i in arr:\n            dict1[i] = dict1.get(i,0)+1\n            \n        for i in arr:\n            if dict1.get(i) > a1:\n                value = i\n        \n        return value", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        for num in set(arr):\n            if arr.count(num) > len(arr) / 4:\n                return num", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        arr1 = list(set(arr))\n        for ele in arr1:\n            if arr.count(ele)>(0.25*len(arr)):\n                return ele \n    \n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n\n        for n in set(arr):\n            if arr.count(n) > len(arr) * 0.25:\n                return n\n\n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        c = len(arr) // 4\n        for i in set(arr):\n            if arr.count(i) > c:\n                return i\n", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        n=int(len(arr)/4)\n        for i in set(arr):\n            if arr.count(i)>n:\n                return i", "class Solution:\n    def findSpecialInteger(self, arr: List[int]) -> int:\n        len_arr = len(arr)\n\n        for n in set(arr):\n            if arr.count(n) > len_arr * 0.25:\n                return n\n\n"]