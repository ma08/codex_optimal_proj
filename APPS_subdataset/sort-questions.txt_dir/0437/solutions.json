["class Solution:\n    def decodeAtIndex(self, S: str, K: int) -> str:\n        size = 0\n        # Find size = length of decoded string\n        for c in S:\n            if c.isdigit():\n                size *= int(c)\n            else:\n                size += 1\n        for c in reversed(S):\n            K %= size\n            if K == 0 and c.isalpha():\n                return c\n\n            if c.isdigit():\n                size /= int(c)\n            else:\n                size -= 1\n", "class Solution:\n    def decodeAtIndex(self, S: str, K: int) -> str:\n        N = 0\n        for i, c in enumerate(S):\n            N = N * int(c) if c.isdigit() else N + 1\n            if K <= N: break\n        for j in range(i, -1, -1):\n            c = S[j]\n            if c.isdigit():\n                N /= int(c)\n                K %= N\n            else:\n                if K == N or K == 0: return c\n                N -= 1", "'''\nthis problem is recursive\nSplit the string S into (encoded substring, number, unencoded string)\nIf K is in the unencoded part, then we can just return the correct value\nIf K is in the encoded part, we recurse\n\nI either need the length of the unencoded string, or try the encoded part first and\nreturn (None, length) if it isn't there\n\n'''\nclass Solution:\n    # returns (answer, none) or (none, length of unencoded string)\n    # k is 0-indexed\n    def _decode(self, s, k):\n        number_ix = -1\n        for i in reversed(range(len(s))):\n            if s[i].isnumeric():\n                number_ix = i\n                break\n        \n        if number_ix == -1:\n            # string is all unencoded\n            if k < len(s):\n                return (s[k], None)\n            else:\n                return (None, len(s))\n        else:\n            encoded, number, unencoded = s[:number_ix], s[number_ix], s[number_ix+1:]\n            sub_answer, sub_length = self._decode(encoded, k)\n            if sub_answer is not None:\n                return (sub_answer, None)\n            else:\n                if k < sub_length*int(number):\n                    k = k % sub_length\n                    sub_answer, _ = self._decode(encoded, k)\n                    return (sub_answer, None)\n                    \n                k = k - (sub_length * int(number))\n                if k < len(unencoded):\n                    return (unencoded[k], None)\n                else:\n                    return (None, sub_length*int(number) + len(unencoded))\n            \n        \n    \n    def decodeAtIndex(self, S: str, K: int) -> str:\n        answer, _ = self._decode(S, K-1)\n        return answer", "class Solution:\n    def decodeAtIndex(self, S: str, K: int) -> str:\n        fullSize = 0\n        for idx, char in enumerate(S):\n            if char.isdigit():\n                fullSize *=int(char)\n            else:\n                fullSize+=1\n            if fullSize > K:\n                break\n        endIdx = idx\n\n        for idx in range(endIdx,-1,-1):\n            if S[idx].isdigit():\n                fullSize /= int(S[idx])\n                if K > fullSize:\n                    K%=fullSize\n            else:\n                if K==0 or K == fullSize:\n                    return S[idx]\n                else:\n                    fullSize -=1", "class Solution:\n    def decodeAtIndex(self, S: str, K: int) -> str:\n        size = 0\n        # Find size = length of decoded string\n        for c in S:\n            if c.isdigit():\n                size *= int(c)\n            else:\n                size += 1\n\n        for c in reversed(S):\n            K %= size\n            if K == 0 and c.isalpha():\n                return c\n\n            if c.isdigit():\n                size /= int(c)\n            else:\n                size -= 1\n                \n", "class Solution:\n    def decodeAtIndex(self, S: str, K: int) -> str:\n        fullSize = 0\n        for idx, char in enumerate(S):\n            if char.isdigit():\n                fullSize *=int(char)\n            else:\n                fullSize+=1\n            if fullSize > K:\n                break\n        endIdx = idx\n\n        for idx in range(endIdx,-1,-1):\n            K%=fullSize\n            if K==0 and S[idx].isalpha():\n                return S[idx]\n            if S[idx].isdigit():\n                fullSize /= int(S[idx])\n            else:\n                fullSize -=1", "class Solution:\n    def decodeAtIndex(self, S, K):\n        N = 0\n        for i, c in enumerate(S):\n            N = N * int(c) if c.isdigit() else N + 1\n            if K <= N: break\n        for j in range(i, -1, -1):\n            c = S[j]\n            if c.isdigit():\n                N /= int(c)\n                K %= N\n            else:\n                if K == N or K == 0: return c\n                N -= 1\n"]