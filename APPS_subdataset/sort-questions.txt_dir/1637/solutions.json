["def encode(s):\n    lst = sorted( s[i or len(s):] + s[:i or len(s)] for i in reversed(range(len(s))) )\n    return ''.join(ss[-1] for ss in lst), s and lst.index(s) or 0\n\ndef decode(s, n):\n    out, lst = [], sorted((c,i) for i,c in enumerate(s))\n    for _ in range(len(s)):\n        c,n = lst[n]\n        out.append(c)\n    return ''.join(out)", "def encode(s):\n    try:\n        arr = [s]\n        for i in range(1, len(s)):\n            arr.append(s[-i:] + s[:-i])\n        arr.sort()\n        res_str = ''\n        for el in arr:\n            res_str += el[-1]\n        return (res_str, arr.index(s))\n    except:\n        return (s, len(s))\n    \n\ndef decode(s, n):\n    try:\n        m = [''] * (len(s))\n        for i in range(len(s)):\n            for j in range(len(s)):\n                m[j] = s[j] + m[j]\n            m.sort()\n        return m[n]\n    except:\n        return ''\n", "def encode(s):\n    if not s:return('',0)\n    l=sorted(s[-i:]+s[:-i]for i in range(len(s)))\n    return(''.join(x[-1]for x in l),l.index(s))\n\ndef decode(s, n):\n    if not s:return s\n    l=['']*len(s)\n    for _ in range(len(s)):\n        l=sorted(s[i]+l[i]for i in range(len(s)))\n    return l[n]", "from bisect import bisect_left\n\n\ndef encode(s):\n    if s == \"\":\n        return ('', 0)\n    \n    # Pretend that I am a linked list with pointers to head and tail\n    string_array = list(s)\n    \n    # Create the matrix\n    matrix = []\n    for _ in range(len(s)):\n        # Shift the string array\n        head = string_array.pop(0)\n        string_array.append(head)\n        \n        # Add shifted array to the matrix\n        matrix.append(list(string_array))\n\n    # Sort the rows\n    matrix.sort()\n    \n    # Get the last col string\n    lost_col_array = []\n    for row in matrix:\n        lost_col_array.append(row[-1])\n    \n    # Now find the original string in the matrix\n    row_num = bisect_left(matrix, string_array)\n    return (\"\".join(lost_col_array), row_num)\n    \n\ndef decode(s, n):\n    if s == \"\":\n        return \"\"\n    \n    matrix = []\n    for index, char in enumerate(s):\n        matrix.append([char])\n    \n    matrix.sort()\n    \n    # Do the following s - 1 times\n    for _ in range(len(s) - 1):\n        \n        # Write out the encoded message and then sort\n        for index, char in enumerate(s):\n            matrix[index].insert(0, char)\n        \n        matrix.sort()\n        \n    return \"\".join(matrix[n])", "def encode(s):\n    if len(s)<=1: return s,0\n    mas = sorted([s[-i:]+s[:-i] for i in range(0,len(s))])\n    return ''.join([c[-1] for c in mas]), mas.index(s)\n\ndef decode(sn, n):\n    if len(sn)<=1: return sn\n    table = [\"\"] * len(sn)\n    for j in range(len(sn)): table = sorted(sn[i] + table[i] for i in range(len(sn))) \n    return table[n]\n", "def encode(s):\n    def shift(st, l):\n        res = list(s)\n        for i in range(l):\n            res.insert(0, res.pop())\n        return res\n    matrix=[]\n    for i in range(len(s)):\n        matrix.append(shift(s,i))\n    matrix.sort()\n    out = []\n    number = 0\n    for i  in range(len(matrix)):\n        out.append(matrix[i][-1])\n        if matrix[i] == list(s):\n            number = i\n    return ''.join(out), number\n\ndef decode(string, number):\n    if string == '':\n        return ''\n    def AppenderAndSorter(matrix, arr):\n        for i in range(len(arr)):\n            matrix[i].insert(0,arr[i])\n        matrix.sort()\n    matrix = []\n    for i in range(0,len(string)):\n        matrix.append([string[i]])\n    matrix.sort()\n    for i in range(1,len(string)):\n        AppenderAndSorter(matrix,string) \n    out = ''.join(matrix[number])\n    return ''.join(out)\n", "def encode(s):\n    if not s:\n        return(\"\", 0)\n    acc = []\n    for i in range(len(s)):\n        acc.append(s[-i:] + s[:-i])\n    acc = sorted(acc)\n    r = []\n    for a in acc:\n        r.append(a[-1])\n    return(\"\".join(r), acc.index(s))\ndef decode(s, n):\n    if not s:\n        return \"\"\n    res = [\"\"] * len(s)\n    for _ in range(len(s)):\n        u = []\n        for i in range(len(s)):\n            u.append(s[i] + res[i])\n        res = sorted(u)\n    return res[n]\n", "def shift(s):\n    return sorted([s[-i:] + s[:-i] for i in range(len(s))])\n\ndef encode(s):\n    if not s: return (\"\", 0)\n    return (\"\".join([x[-1] for x in shift(s)]), shift(s).index(s))\n\n\ndef decode(s, n):\n    if not s: return \"\"\n    first, last = sorted(s), list(s)\n    res = \"\"\n    i = n\n    while len(res) < len(s):\n        res += first[i]\n        i = [k for k in range(len(s)) if last[k] == first[i]][[k for k in range(len(s)) if first[k] == first[i]].index(i)]\n    return res", "import numpy as np\ndef encode(s):\n    if not s:\n        return '',0\n    lol = [s[i:]+s[:i] for i in range(0,-len(s),-1)]\n    order = np.argsort(lol)\n    last_col = ''.join([seq[-1] for seq in [lol[o] for o in order]])\n    original_col = np.where(order == 0)[0][0]\n    return last_col, original_col\n\ndef decode(s, n):\n    if not s:\n        return ''\n    lol = sorted(list(s))\n    for i in range(1,len(s)):\n        lol = sorted([ ''.join([s[i],lol[i]]) for i in range(0,len(s))  ])\n    return lol[n]", "def encode(s):\n    if not s:\n        return '', 0\n\n    list_s = []\n    for x in range(len(s)):\n        list_s.append(s[x:] + s[:x])\n\n    sort_list_s = sorted(list_s)\n    final_word = \"\"\n    for e in sort_list_s:\n        final_word += e[-1]\n\n    return final_word, sort_list_s.index(s)\n\n\ndef decode(s, n):\n    s_list = list(s) # ['l', 'a', 'n', 'e', 'v']\n    s_list.sort()\n    s_list = ''.join(s_list)\n\n    final_list = []\n    count = 1\n    if not s:\n        return s\n    else:\n        while count < len(s):\n            for i in range(len(s)):\n                final_list.append(s[i] + s_list[i])\n            count += 1\n            s_list = sorted(final_list)\n            final_list = []\n\n    return s_list[n]"]