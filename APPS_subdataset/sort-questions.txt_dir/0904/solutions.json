["# cook your dish here\nimport bisect\nfor _ in range(int(input())):\n \n n,x=list(map(int,input().split()))\n \n l=list(map(int,input().split()))\n battery=[]\n \n power=0\n i=0\n t=(n+1)//2\n while power<x and i<t:\n  \n  if i==n-i-1:\n   temp=[-1,l[i]]\n  else:\n   temp=sorted([ l[i], l[n-i-1] ])\n  \n  power+=temp[1]\n  pos=bisect.bisect_right(battery, temp[1], lo=0, hi=len(battery))\n  battery.insert(pos,temp[1])\n  \n  if temp[0]>battery[0]:\n   \n   power-=battery.pop(0)\n   power+=temp[0]\n   pos=bisect.bisect_right(battery, temp[0], lo=0, hi=len(battery))\n   battery.insert(pos,temp[0])\n  \n  i+=1\n  \n  \n if power>=x:\n  print('YES')\n else:\n  print('NO')\n", "# cook your dish here\nimport bisect\nfor _ in range(int(input())):\n \n n,x=list(map(int,input().split()))\n \n l=list(map(int,input().split()))\n battery=[]\n \n power=0\n i=0\n t=(n+1)//2\n while power<x and i<t:\n  \n  if i==n-i-1:\n   temp=[-1,l[i]]\n  else:\n   temp=sorted([ l[i], l[n-i-1] ])\n  \n  power+=temp[1]\n  pos=bisect.bisect_right(battery, temp[1], lo=0, hi=len(battery))\n  battery.insert(pos,temp[1])\n  \n  if temp[0]>battery[0]:\n   \n   power-=battery.pop(0)\n   power+=temp[0]\n   pos=bisect.bisect_right(battery, temp[0], lo=0, hi=len(battery))\n   battery.insert(pos,temp[0])\n  \n  i+=1\n  \n  \n if power>=x:\n  print('YES')\n else:\n  print('NO')\n", "# cook your dish here\nimport heapq\nfor _ in range(int(input())):\n \n n,x=list(map(int,input().split()))\n \n l=list(map(int,input().split()))\n battery=[]\n \n heapq.heapify(battery)\n power=0\n i=0\n t=(n+1)//2\n while power<x and i<t:\n  \n  if i==n-i-1:\n   temp=[-1,l[i]]\n  else:\n   temp=sorted([ l[i], l[n-i-1] ])\n  \n  power+=temp[1]\n  heapq.heappush(battery,temp[1])\n  \n  y=heapq.heappop(battery)\n  heapq.heappush(battery,y)\n  if temp[0]>y:\n   \n   power-=heapq.heappop(battery)\n   power+=temp[0]\n   heapq.heappush(battery,temp[0])\n  \n  i+=1\n  \n  \n if power>=x:\n  print('YES')\n else:\n  print('NO')\n", "# cook your dish here\nimport heapq\nfor _ in range(int(input())):\n \n n,x=list(map(int,input().split()))\n \n l=list(map(int,input().split()))\n battery=[]\n \n heapq.heapify(battery)\n power=0\n i=0\n t=(n+1)//2\n while power<x and i<t:\n  \n  if i==n-i-1:\n   temp=[-1,l[i]]\n  else:\n   temp=sorted([ l[i], l[n-i-1] ])\n  \n  power+=temp[1]\n  heapq.heappush(battery,temp[1])\n  \n  y=heapq.heappop(battery)\n  heapq.heappush(battery,y)\n  if temp[0]>y:\n   \n   power-=heapq.heappop(battery)\n   power+=temp[0]\n   heapq.heappush(battery,temp[0])\n  \n  i+=1\n  \n  \n if power>=x:\n  print('YES')\n else:\n  print('NO')\n", "# cook your dish here\nimport heapq\nfor _ in range(int(input())):\n \n n,x=list(map(int,input().split()))\n \n l=list(map(int,input().split()))\n battery=[]\n \n heapq.heapify(battery)\n power=0\n i=0\n t=(n+1)//2\n while power<x and i<t:\n  \n  if i==n-i-1:\n   temp=[-1,l[i]]\n  else:\n   temp=sorted([ l[i], l[n-i-1] ])\n  \n  power+=temp[1]\n  heapq.heappush(battery,temp[1])\n  \n  y=heapq.heappop(battery)\n  heapq.heappush(battery,y)\n  if temp[0]>y:\n   \n   power-=heapq.heappop(battery)\n   power+=temp[0]\n   heapq.heappush(battery,temp[0])\n  \n  i+=1\n  \n  \n if power>=x:\n  print('YES')\n else:\n  print('NO')\n", "# cook your dish here\nimport heapq\nfor _ in range(int(input())):\n \n n,x=list(map(int,input().split()))\n \n l=list(map(int,input().split()))\n battery=[]\n \n heapq.heapify(battery)\n power=0\n i=0\n t=(n+1)//2\n while power<x and i<t:\n  \n  if i==n-i-1:\n   temp=[-1,l[i]]\n  else:\n   temp=sorted([ l[i], l[n-i-1] ])\n  \n  power+=temp[1]\n  heapq.heappush(battery,temp[1])\n  \n  y=heapq.heappop(battery)\n  heapq.heappush(battery,y)\n  if temp[0]>y:\n   \n   power-=heapq.heappop(battery)\n   power+=temp[0]\n   heapq.heappush(battery,temp[0])\n  \n  i+=1\n  \n  \n if power>=x:\n  print('YES')\n else:\n  print('NO')\n", "# cook your dish here\nimport heapq\nfor _ in range(int(input())):\n \n n,x=list(map(int,input().split()))\n \n l=list(map(int,input().split()))\n battery=[]\n \n heapq.heapify(battery)\n power=0\n i=0\n t=(n+1)//2\n while power<x and i<t:\n  \n  if i==n-i-1:\n   temp=[-1,l[i]]\n  else:\n   temp=sorted([ l[i], l[n-i-1] ])\n  \n  power+=temp[1]\n  heapq.heappush(battery,temp[1])\n  \n  y=heapq.heappop(battery)\n  heapq.heappush(battery,y)\n  if temp[0]>y:\n   \n   power-=heapq.heappop(battery)\n   power+=temp[0]\n   heapq.heappush(battery,temp[0])\n  \n  i+=1\n  \n  \n if power>=x:\n  print('YES')\n else:\n  print('NO')\n", "# cook your dish here\nimport heapq\nfor _ in range(int(input())):\n \n n,x=list(map(int,input().split()))\n \n l=list(map(int,input().split()))\n battery=[]\n \n heapq.heapify(battery)\n power=0\n i=0\n t=(n+1)//2\n while power<x and i<t:\n  \n  if i==n-i-1:\n   temp=[-1,l[i]]\n  else:\n   temp=sorted([ l[i], l[n-i-1] ])\n  \n  power+=temp[1]\n  heapq.heappush(battery,temp[1])\n  \n  y=heapq.heappop(battery)\n  heapq.heappush(battery,y)\n  if temp[0]>y:\n   \n   power-=heapq.heappop(battery)\n   power+=temp[0]\n   heapq.heappush(battery,temp[0])\n  \n  i+=1\n  \n  \n if power>=x:\n  print('YES')\n else:\n  print('NO')\n", "# cook your dish here\nimport heapq\nfor _ in range(int(input())):\n \n n,x=list(map(int,input().split()))\n \n l=list(map(int,input().split()))\n battery=[]\n \n heapq.heapify(battery)\n power=0\n i=0\n t=(n+1)//2\n while power<x and i<t:\n  \n  if i==n-i-1:\n   temp=[-1,l[i]]\n  else:\n   temp=sorted([ l[i], l[n-i-1] ])\n  \n  power+=temp[1]\n  heapq.heappush(battery,temp[1])\n  \n  y=heapq.heappop(battery)\n  heapq.heappush(battery,y)\n  if temp[0]>y:\n   \n   power-=heapq.heappop(battery)\n   power+=temp[0]\n   heapq.heappush(battery,temp[0])\n  \n  i+=1\n  \n  \n if power>=x:\n  print('YES')\n else:\n  print('NO')\n", "for _ in range(int(input())):\n n,x=map(int,input().split())\n a=list(map(int,input().split()))\n t=2\n f=[]\n flag=0\n if(x>=sum(a)):\n  print(\"NO\")\n  continue\n f.append(max(a[-1],a[0]))\n while(t<=(n+1)//2):\n  b=a[t-1:n-t+1]\n  d=max(b[0],b[-1])\n  e=min(b[0],b[-1])\n  ind=0\n  flag1=0\n  for i in range(len(f)):\n   if(f[i]<d):\n    continue\n   else:\n    flag1=1\n    ind=i\n    f.insert(ind,d)\n    # a[b.index(d)+t-1]=0\n    break\n  if(flag1==0):\n   f.append(d)\n   # a[b.index(d) + t - 1] = 0\n   ind=len(f)\n  flag2=0\n  for i in range(ind):\n   if(f[i]<e):\n    flag2=1\n    f.remove(f[i])\n    break\n  if(flag2==1):\n   flag3=0\n   for i in range(len(f)):\n    if(f[i]<e):\n     continue\n    else:\n     flag3=1\n     inde=i\n     f.insert(inde,e)\n     # a[len(b)-1 + t-1] = 0\n     break\n   if(flag3==0):\n    f.append(e)\n    # a[len(b)-1+t-1]=0\n    inde=len(f)\n\n  t+=1\n  if(sum(f)>=x):\n   flag=1\n   print(\"YES\")\n   break\n if(flag==0):\n  if(sum(f)>=x):\n   print(\"YES\")\n  else:\n   print(\"NO\")", "for _ in range(int(input())):\n n,x=map(int,input().split())\n a=list(map(int,input().split()))\n t=2\n f=[]\n flag=0\n if(x>=sum(a)):\n  print(\"NO\")\n  continue\n f.append(max(a[-1],a[0]))\n while(t<=(n+1)//2):\n  b=a[t-1:n-t+1]\n  d=max(b[0],b[-1])\n  e=min(b[0],b[-1])\n  ind=0\n  flag1=0\n  for i in range(len(f)):\n   if(f[i]<d):\n    continue\n   else:\n    flag1=1\n    ind=i\n    f.insert(ind,d)\n    a[b.index(d)+t-1]=0\n    break\n  if(flag1==0):\n   f.append(d)\n   a[b.index(d) + t - 1] = 0\n   ind=len(f)\n  flag2=0\n  for i in range(ind):\n   if(f[i]<e):\n    flag2=1\n    f.remove(f[i])\n    break\n  if(flag2==1):\n   flag3=0\n   for i in range(len(f)):\n    if(f[i]<e):\n     continue\n    else:\n     flag3=1\n     inde=i\n     f.insert(inde,e)\n     a[len(b)-1 + t-1] = 0\n     break\n   if(flag3==0):\n    f.append(e)\n    a[len(b)-1+t-1]=0\n    inde=len(f)\n\n  t+=1\n  if(sum(f)>=x):\n   flag=1\n   print(\"YES\")\n   break\n if(flag==0):\n  if(sum(f)>=x):\n   print(\"YES\")\n  else:\n   print(\"NO\")", "t = int(input())\n\nfor _ in range(t):\n n,x = map(int,input().split())\n \n l = list(map(int,input().split()))\n \n time = (n+1)//2\n energy,flag = 0,1\n temp = []\n \n for i in range(time):\n  elem = max(l[0],l[-1])\n  energy += elem\n  if(len(l)>1):\n   minn = min(l[0],l[-1])\n   temp.append(elem)\n   val = min(temp)\n   if(val<minn):\n    energy = energy - val + minn\n    temp.remove(val)\n    temp.append(minn)\n  l.pop(0)\n  if(l):\n   l.pop()\n  if (energy>=x):\n   print(\"YES\")\n   flag = 0\n   break\n \n if(flag):\n  print(\"NO\")", "from heapq import heapify, heappush, heappop\n\nt = int(input())\n\nfor _ in range(t):\n n,x = map(int,input().split())\n \n l = list(map(int,input().split()))\n time = (n+1)//2\n \n h = []\n \n heapify(h)\n \n energy = max(l[0],l[-1])\n heappush(h,energy)\n \n for i in range(1,time):\n  left,right = i,n-1-i\n  \n  mx = max(l[left],l[right])\n  mn = min(l[left],l[right])\n  \n  energy += mx\n  heappush(h,mx)\n  \n  if(left!=right):\n   if(h[0]<mn):\n    energy -= h[0]\n    heappop(h)\n    energy += mn\n    heappush(h,mn)\n \n if(energy>=x):\n  print(\"YES\")\n else:\n  print(\"NO\")", "import heapq\nfor i in range(int(input())):\n n,x=list(map(int,input().split()))\n list1=list(map(int,input().split()))\n if(n==2):\n  if(max(list1)>=x):\n   print(\"YES\")\n  else:\n   print(\"NO\")\n  continue\n i=1\n j=n-2\n ans=0\n flg=0\n list2=[max(list1[0],list1[-1])]\n heapq.heapify(list2)\n while(j>=i):\n  max1,min1=max(list1[i],list1[j]),min(list1[i],list1[j])\n  if(i==j):\n   heapq.heappush(list2,max1)\n   break\n  heapq.heappush(list2,max1)\n  ele=heapq.heappop(list2)\n  heapq.heappush(list2,max(min1,ele))\n  i+=1\n  j-=1\n if(sum(list(list2))>=x):\n  print(\"YES\")\n else:\n  print(\"NO\")# cook your dish here\n"]