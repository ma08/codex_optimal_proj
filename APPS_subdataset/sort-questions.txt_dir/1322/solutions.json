["# cook your dish here\n#t = int(input())\nfor i in range(int(input())):\n n,k = map(int,input().split())\n l = list(map(int,input().split()))\n l.sort(reverse = True)\n c = 0\n for i in l:\n  if i >= l[k-1]:\n   c += 1\n print(c)", "# cook your dish here\nt = int(input())\nfor i in range(t):\n n,k = map(int,input().split())\n l = list(map(int,input().split()))\n l.sort(reverse = True)\n c = 0\n for i in l:\n  if i >= l[k-1]:\n   c += 1\n print(c)", "for t in range(int(input())):\n n,k = list(map(int,input().split()))\n l = list(map(int,input().split()))\n c = 0\n l.sort(reverse = True)\n for i in range(n):\n  if l[i] >= l[k-1]:\n   c += 1\n print(c)\n", "# cook your dish here\nt = int(input())\nfor j in range(t):\n n,k = list(map(int,input().split()))\n l = list(map(int,input().split()))\n c = 0\n l.sort(reverse = True)\n for i in range(n):\n  if l[i] >= l[k-1]:\n   c += 1\n print(c)\n", "for _ in range(int(input())):\n n, k = map(int, input().split())\n s=[int(x) for x in input().split()]\n s.sort(reverse=True)\n count=0\n req=s[k-1]\n for x in s:\n  if x >=req:\n   count+=1\n  else:\n   break\n print(count)", "# cook your dish here\nt = int(input())\nfor _ in range(t):\n n,k = map(int,input().split())\n l = list(map(int,input().split()))\n c = 0\n l.sort(reverse = True)\n for i in range(n):\n  if l[i] >= l[k-1]:\n   c += 1\n print(c)", "# cook your dish here\ntest_cases = int(input())\n\nfor i in range(test_cases):\n N, K = map(int, input().split())\n \n scores = list(map(int, input().split()))\n scores = sorted(scores)[::-1]\n print(len([i for i in scores if i >= scores[K-1] ]))", "for _ in range(int(input())):\n n,k = map(int,input().split())\n l = list(map(int,input().split()))\n l.sort(reverse = True)\n ans = 0\n x = l[k-1]\n for i in range(n):\n  if x>l[i]:\n   break\n  ans+=1\n print(ans) ", "for _ in range(int(input())):\n n,k = [int(x) for x in input().split()]\n lst = [int(x) for x in input().split()]\n lst.sort(reverse=True)\n el = lst[k-1]\n count = 0\n for i in lst:\n  if i<el:\n   break\n  else:\n   count = count + 1\n print(count)\n", "t=int(input())\nwhile t>0:\n  t-=1\n  n,p=map(int,input().split())\n  l=list(map(int,input().split()))\n  l.sort()\n  l.reverse()\n  count=0\n  k=l[p-1]\n  for i in range(n):\n   if l[i]<k:\n    break\n   else:\n    count+=1\n  print(count)", "for _ in range(int(input())):\n # n = int(input())\n n,k = list(map(int,input().split()))\n s = sorted(map(int,input().split()),reverse=True)\n while k<n and s[k-1] == s[k] :\n  k += 1\n print(k)\n", "for _ in range(int(input())):\n # n = int(input())\n n,k = list(map(int,input().split()))\n s = sorted(map(int,input().split()),reverse=True)\n while k<n and s[k-1] == s[k] :\n  k += 1\n print(k)\n", "# cook your dish here\nimport math\ndef solve():\n #n=int(input())\n \n #n,m,k,l,r=map(int,input().split())\n #l=list(map(int,input().split()))\n #l1=list(map(int,input().split()))\n n,k = list(map(int,input().split()))\n s = sorted(map(int,input().split()),reverse=True)\n while k<n and s[k-1] == s[k] :\n  k += 1\n print(k)\n\nt=int(input())\n#t=1\n#res=[]\nfor i in range(t):\n solve()\n", "# cook your dish here\nimport sys\ninput=sys.stdin.readline\nt=int(input())\nfor you in range(t):\n l=input().split()\n n=int(l[0])\n k=int(l[1])\n l=input().split()\n li=[int(i) for i in l]\n li.sort()\n li.reverse()\n z=li[k-1]\n count=0\n for i in li:\n  if(i>=z):\n   count+=1\n print(count)\n", "for _ in range(int(input())):\n # n = int(input())\n n,k = list(map(int,input().split()))\n s = sorted(map(int,input().split()),reverse=True)\n while k<n and s[k-1] == s[k] :\n  k += 1\n print(k)\n", "for _ in range(int(input())):\n # n = int(input())\n n,k = list(map(int,input().split()))\n s = sorted(map(int,input().split()),reverse=True)\n while k<n and s[k-1] == s[k] :\n  k += 1\n print(k)\n", "try:\n t = int(input())\n result = []\n for i in range(t):\n  count = 0\n  li = list(map(int, input().split()))\n  scores = list(map(int, input().split()))\n  scores.sort(reverse=True)\n  needed_score = scores[li[1] - 1]\n  for u in scores:\n   if (u >= needed_score):\n    count = count + 1\n   else:\n    continue\n  result.append(count)\n\n for v in result:\n  print(v)\n\n\n\nexcept:\n pass\n", "t = int(input())\nfor i in range(t):\n n,k = map(int,input().split())\n l = list(map(int,input().split()))\n l.sort(reverse = True)\n a = l[k-1]\n j = 0\n count = 0\n while j<len(l):\n  if l[j]>=a:\n   count += 1\n  else:\n   break\n  j += 1\n print(count)", "# cook your dish here\nfor t in range(int(input())):\n n,k=map(int,input().split())\n a=[int(i) for i in input().split()]\n a.sort()\n a=a[::-1]\n count=k\n while k<n and a[k-1]==a[k]:\n  count+=1\n  k+=1\n print(count)", "# cook your dish here\na = int(input())\nfor i in range(a):\n b = str(input()).split(' ')\n c = list(map(int,str(input()).split(' ')))\n Ans = int(b[1])\n c.sort(reverse=True)\n Ans+=c[int(b[1]):int(b[0])].count(c[int(b[1])-1])\n print(Ans)\n", "for T in range(int(input())):\n N,K = map(int,input().split())\n S = sorted(list(map(int,input().split())))[::-1]\n print(sum([1 for i in S if i >= S[K-1]]))", "for _ in range(int(input())):\n a = input().split()\n n = int(a[0])\n k = int(a[1])\n s = sorted(map(int, input().split()), reverse = True)\n i = k\n while i<n and s[i]==s[k-1]:\n  i+=1\n print(i)", "# cook your dish here\ntestcases = int(input())\nfor t in range(testcases) :\n n,k = map(int,input().split())\n S = list(map(int,input().split()))\n S.sort(reverse=True)\n count = k\n current = S[k-1]\n i=k\n while i<n and S[i]==S[k-1] :\n  i+=1\n  count+=1\n print(count)", "for _ in range(int(input())):\n N, K = map(int, input().split())\n L = sorted(map(int, input().split()), reverse=True)\n cut = L[K-1]\n c = K\n for i in range(K, N):\n  if L[i] == cut:\n   c += 1 \n  else:\n   break\n print(c)", "for i in range(int(input())):\n n,k = map(int, input().split())\n Q = list(map(int, input().split()))\n\n Q.sort(reverse=True)\n\n score = Q[k-1]\n result = 0\n for i in Q:\n  if i>=score:\n   result = result+1\n print(result)"]