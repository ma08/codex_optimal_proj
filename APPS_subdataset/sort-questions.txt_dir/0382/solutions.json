["class Solution:\n     def findPeakElement(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if not nums:\n             return -1\n         \n         start = 0\n         end = len(nums) -1\n         while start + 1 < end:\n             mid = (start + end) // 2\n             if nums[mid] > nums[mid - 1]:\n                 if nums[mid] > nums[mid + 1]:\n                     return mid\n                 else:\n                     start = mid\n             else:\n                 end = mid\n         if nums[start] > nums[end]:\n             return start\n         else:\n             return end\n                 \n             \n", "class Solution:\n     def findPeakElement(self, nums):\n         '''\n             Finds the pick in a list of numbers\n         '''\n         if len(nums) == 0:\n             return None\n         if len(nums) == 1:\n             return 0\n         if len(nums) == 2:\n             return 0 if nums[0] > nums[1] else 1\n         res = list()\n         if nums[0] > nums[1]:\n             return 0\n         if nums[-1] > nums[-2]:\n             return len(nums)-1\n         for i in range(1, len(nums)-1):\n             pre = nums[i-1]\n             cur = nums[i]\n             nex = nums[i+1]\n             if cur > pre and cur > nex:\n                 return i", "class Solution:\n     def findPeakElement(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         begin, end = 0, 2\n         if len(nums) == 1:\n             return 0\n         while end < len(nums):\n             mid = (begin + end) // 2\n             if nums[mid] > nums[begin] and nums[mid] > nums[end]:\n                 return mid\n             begin += 1\n             end += 1\n         if nums[0] > nums[1]:\n             return 0\n         if nums[-1] > nums[-2]:\n             return len(nums) - 1\n", "class Solution:\n     def findPeakElement(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if not nums:\n             return -1\n         start, end = 0, len(nums) - 1\n         while start < end:\n             mid = start + (end - start) // 2\n             if nums[mid] > nums[mid+1]:\n                 end = mid\n             else:\n                 start = mid + 1\n         return start", "class Solution:\n     def findPeakElement(self,nums):\n         for i in range(1,len(nums)):\n             if nums[i]<nums[i-1]:\n                 return i-1\n         return len(nums)-1", "class Solution:\n     def findPeakElement(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n #         left = 0\n #         right = len(nums)-1\n \n   \n #         while left < right-1:\n #             mid = (left+right)//2\n #             if nums[mid] > nums[mid+1] and nums[mid] > nums[mid-1]:\n #                 return mid\n \n #             if nums[mid] < nums[mid+1]:\n #                 left = mid+1\n #             else:\n #                 right = mid-1\n \n       \n #         return left if nums[left] >= nums[right] else right\n         n = len(nums)\n         if n == 0:\n             return null\n         if n == 1:\n             return 0\n         if nums[0] > nums[1]:\n             return 0\n         \n         for ind in range(1,len(nums)-1):\n             print(ind)\n         \n             if nums[ind] > nums[ind-1] and nums[ind] > nums[ind+1]:\n                 return ind\n         \n         if nums[n-1] > nums[n-2]:\n             return n-1\n         \n", "class Solution:\n     def findPeakElement(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n #         left = 0\n #         right = len(nums)-1\n \n   \n #         while left < right-1:\n #             mid = (left+right)//2\n #             if nums[mid] > nums[mid+1] and nums[mid] > nums[mid-1]:\n #                 return mid\n \n #             if nums[mid] < nums[mid+1]:\n #                 left = mid+1\n #             else:\n #                 right = mid-1\n \n       \n #         return left if nums[left] >= nums[right] else right\n         n = len(nums)\n         if n == 0:\n             return null\n         if n == 1:\n             return 0\n         if nums[0] > nums[1]:\n             return 0\n         \n         for ind in range(1,len(nums)-1):\n             print(ind)\n         \n             if nums[ind] > nums[ind-1] and nums[ind] > nums[ind+1]:\n                 return ind\n         \n         if nums[n-1] > nums[n-2]:\n             print('haha')\n             return n-1\n         \n", "class Solution:\n     def findPeakElement(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) == 1:\n             return 0\n         left, right = 0, len(nums) - 1\n         length = len(nums)\n         while left + 1 < right:\n             mid = (left + right) // 2\n             if mid == 0:\n                 if nums[mid] > nums[mid + 1]:\n                     return 0\n                 else:\n                     left = mid + 1\n             elif mid == length - 1:\n                 if nums[-1] > nums[-2]:\n                     return mid\n                 else:\n                     right = mid - 1\n             elif nums[mid] > nums[mid - 1] and nums[mid] > nums[mid + 1]:\n                 return mid\n             elif nums[mid] < nums[mid - 1] and nums[mid] < nums[mid + 1]:\n                 right = mid - 1\n             elif nums[mid] > nums[mid + 1]:\n                 right = mid - 1\n             else:\n                 left = mid + 1\n         for idx in range(left, right + 1):\n             if idx == 0 and nums[idx] > nums[idx + 1]:\n                 return 0\n             if idx == length - 1 and nums[-1] > nums[-2]:\n                 return idx\n             if nums[idx] > nums[idx - 1] and nums[idx] > nums[idx + 1]:\n                 return idx", "class Solution:\n     def findPeakElement(self, nums):\n         '''\n             Finds the pick in a list of numbers\n         '''\n         length = len(nums)\n         if length == 0:\n             return None\n         if length == 1:\n             return (0)\n         if length == 2:\n             return 0 if nums[0] > nums[1] else 1\n \n         for idx in range(0, length):\n             value = nums[idx]\n             if (idx > 0 and idx < length - 1 and\n                 nums[idx + 1] < value and nums[idx - 1] < value):\n                     pick = idx\n             elif idx == 0 and nums[idx + 1] < value:\n                 pick = idx\n             elif idx == length - 1 and nums[idx - 1] < value:\n                 pick = idx\n         return pick", "class Solution:\n     def findPeakElement(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) == 0 or len(nums) == 1:\n             return 0\n \n         l, r = 0, len(nums)\n         while l < r:\n             if l == r:\n                 break\n             m = (l + r) // 2\n \n             if m < len(nums) - 1 and nums[m] > nums[m + 1]:\n                 if nums[m] >= nums[m-1]:\n                     return m\n \n             if m < len(nums)-1 and nums[m] < nums[m+1] and nums[m-1] < nums[m]:\n                 l = m + 1\n             else:\n                 r = m\n \n         if l > 0:\n             if nums[l] > nums[l-1]:\n                 return l\n             else:\n                 return l - 1\n         elif nums[l] > nums[l+1]:\n             return l\n         else:\n             return l+1         ", "class Solution:\n     def findPeakElement(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         return self.helper(nums, 0, len(nums) - 1)\n     \n     def helper(self, nums, start, end):\n         if start == end:\n             return start\n         mid = (end + start) // 2\n         if nums[mid] > nums[mid + 1]:\n             return self.helper(nums, start, mid)\n         else:\n             return self.helper(nums, mid + 1, end)", "class Solution:\n     def findPeakElement(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         def bs(nums, i, j):\n             if i >= j: return j\n             k = (i + j) // 2\n             if nums[k] < nums[k+1]:\n                 return bs(nums, k+1, j)\n             else:\n                 return bs(nums, i, k)\n                 \n         if not nums: return None\n         return bs(nums, 0, len(nums)-1)"]