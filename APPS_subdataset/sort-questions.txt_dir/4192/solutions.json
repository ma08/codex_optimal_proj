["def pairwise(arr, n):\n    s=[]\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if j in s or i in s: continue\n            if arr[i]+arr[j] ==n:\n                s.append(i)\n                s.append(j)\n    return sum(s)", "def pairwise(arr, n):\n\n    iMap, s = {}, 0\n    for i,x in enumerate(arr): iMap[x] = iMap.get(x, []) + [i]\n    \n    for x in arr:\n        if n-x in iMap and len(iMap[n-x]) > (x == n-x) < len(iMap[x]):\n            s += iMap[x].pop(0)\n            s += iMap[n-x].pop(0)\n    return s", "def pairwise(arr, n):\n    seen = set()\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == n and not (i in seen or j in seen):\n                seen.add(i)\n                seen.add(j)\n                break\n    return sum(seen)", "def pairwise(arr, n):\n    # fiond each pair of elements that add up to n in arr\n    a, i, j, pairs = sorted(arr), 0, len(arr) - 1, []\n    while i < j:\n        tot = a[i] + a[j]\n        if tot == n:\n            pairs.extend([a[i], a[j]])\n            i, j = i + 1, j - 1\n        elif tot < n:\n            i += 1\n        else:\n            j -= 1\n    pairs.sort()\n    \n    # Identify the lowest possible index for each element in pairs\n    indices = []\n    i, last = 0, None\n    for x in pairs:\n        # Continue from last found if repeat value else from start of array\n        i = (indices[-1] + 1) if x == last else 0\n        indices.append(arr.index(x, i))\n        last = x\n    \n    return sum(indices)", "# This isn't best practice, this is just for fun\ndef pairwise(arr, n):\n    save = set()\n    add = save.add\n    return sum(i+j if x+y==n and not (i in save or add(j) or add(i)) else 0 for i,x in enumerate(arr) if i not in save for j,y in enumerate(arr[i+1:], i+1) if j not in save)", "def pairwise(arr, n):\n    result = 0\n    for i in range(len(arr)):\n        d = n - arr[i]\n        if d in arr[i+1:]:\n            j = arr.index(d, i+1)\n            result += i + j\n            arr[i] = arr[j] = n + 1\n    return result\n", "from collections import defaultdict\n\ndef pairwise(arr,n):\n    ixs=defaultdict(list)\n    for i,e in enumerate(arr): ixs[e].append(i)\n    h=n/2\n    t=sum(x+y for a,ai in (p for p in ixs.items() if p[0]<h) for x,y in zip(ai,ixs.get(n-a,[])))\n    if n%2: return t\n    hi=ixs.get(int(h),[])\n    return t+sum(hi[:len(hi)//2*2])", "def pairwise(arr, n):\n    used = []\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == n and not (i in used or j in used):\n                used.extend([i, j])\n    return sum(used)", "from itertools import combinations\n\ndef pairwise(arr, n):\n    r,c = 0,[]\n    for (i,a),(j,b) in combinations(enumerate(arr),2):\n        if a+b == n and i not in c and j not in c:\n            r += i+j\n            c.extend([i,j])\n    return r", "def pairwise(arr, n):\n    lst = [[e, i] for i, e in enumerate(arr)]\n    ans, v = [], []\n    for i, e in enumerate(arr):\n        if i in v:\n            continue\n        for j, e2 in enumerate(arr[i+1:]):\n            x = i+1+j\n            if e + e2 == n and x not in v:\n                v.append(i)\n                v.append(x)\n                ans.append((i,x))\n                break\n    return sum([i[0]+i[1] for i in ans]) if ans != [] else 0"]