["\ndef mix(s1, s2):\n    hist = {}\n    for ch in \"abcdefghijklmnopqrstuvwxyz\":\n        val1, val2 = s1.count(ch), s2.count(ch)\n        if max(val1, val2) > 1:\n            which = \"1\" if val1 > val2 else \"2\" if val2 > val1 else \"=\"\n            hist[ch] = (-max(val1, val2), which + \":\" + ch * max(val1, val2))\n    return \"/\".join(hist[ch][1] for ch in sorted(hist, key=lambda x: hist[x]))\n", "def mix(s1, s2):\n    c1 = {l: s1.count(l) for l in s1 if l.islower() and s1.count(l) > 1}\n    c2 = {l: s2.count(l) for l in s2 if l.islower() and s2.count(l) > 1}\n    r = []\n    for c in set(list(c1.keys()) + list(c2.keys())):\n        n1, n2 = c1.get(c, 0), c2.get(c, 0)\n        r.append(('1', c, n1) if n1 > n2 else\n                 ('2', c, n2) if n2 > n1 else\n                 ('=', c, n1))\n\n    rs = ['{}:{}'.format(i, c * n) for i, c, n in r]\n    return '/'.join(sorted(rs, key=lambda s: (-len(s), s)))\n", "def mix(s1, s2):\n    s = []\n    lett = \"abcdefghijklmnopqrstuvwxyz\"\n    for ch in lett:\n        val1, val2 = s1.count(ch), s2.count(ch)\n        if max(val1, val2) >= 2:\n            if val1 > val2: s.append(\"1:\"+val1*ch)\n            elif val1 < val2: s.append(\"2:\"+val2*ch)\n            else: s.append(\"=:\"+val1*ch)\n            \n    s.sort()\n    s.sort(key=len, reverse=True)\n    return \"/\".join(s)\n", "from collections import Counter\n\n\ndef mix(s1, s2):\n    res = []\n    c1 = Counter([c for c in s1 if c.islower()])\n    c2 = Counter([c for c in s2 if c.islower()])\n    for c in c1 | c2:       \n        if c1[c] > 1 and c1[c] > c2[c]: res += ['1:' + c * c1[c]]\n        if c2[c] > 1 and c2[c] > c1[c]: res += ['2:' + c * c2[c]]\n        if c1[c] > 1 and c1[c] == c2[c]: res += ['=:' + c * c1[c]]\n    return '/'.join(sorted(res, key = lambda a : [-len(a), a]))", "def filter_lowercase(character_in_s):\n    lowercase_alphabet=[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\n    \"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]\n\n    if(character_in_s in lowercase_alphabet):\n        return True\n    else:\n        return False\n\ndef sort_mix(a):\n    return len(a)\n\ndef order_alphabetically_ascendent(elem):\n    if elem[:1]==\"=\":\n        return 2\n    elif elem[:1]==\"1\":\n        return 0\n    elif elem[:1]==\"2\":\n        return 1\n\n\n\ndef mix(s1, s2):\n    lowercase_alphabet=[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\n    \"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]\n    characters_in_s1=[]\n    characters_in_s2=[]\n\n    amount_of_each_letter_in_s1=[]\n    amount_of_each_letter_in_s2=[]\n    where_is_maximum=[]\n    maximum=[]\n\n    letters_used_with_prefix = []\n    string_to_return=\"\"\n\n    #filter variables\n    different_lengths=[]\n    array_of_letters_with_the_same_length=[]\n\n\n\n    for character in s1:\n        characters_in_s1.append(character)\n    for character in s2:\n        characters_in_s2.append(character)\n\n    lowercase_letters_in_s1=list(filter(filter_lowercase, characters_in_s1))\n    lowercase_letters_in_s2=list(filter(filter_lowercase, characters_in_s2))\n#Final parte 1: now I got two lists with the lowercase letters of each string\n\n#2-para cada letra del abecedario(array), comprueba cuentas hay en cada string. consigue el m\u00e1ximo, y de qu\u00e9 string(1,2). Ten variables sobre cuantas veces aparece la letra en cada string\n\n\n    for alphabet_letter in lowercase_alphabet:\n        lowercase_letters_in_s=[]\n        i = len(amount_of_each_letter_in_s1)\n        string_to_append=\"\"\n\n        amount_of_each_letter_in_s1.append(lowercase_letters_in_s1.count(alphabet_letter))\n        lowercase_letters_in_s.append(lowercase_letters_in_s1.count(alphabet_letter))\n\n        amount_of_each_letter_in_s2.append(lowercase_letters_in_s2.count(alphabet_letter))\n        lowercase_letters_in_s.append(lowercase_letters_in_s2.count(alphabet_letter))\n\n        maximum.append(max(lowercase_letters_in_s))\n\n        if lowercase_letters_in_s2.count(alphabet_letter)==lowercase_letters_in_s1.count(alphabet_letter):\n            where_is_maximum.append(\"b\")\n        elif lowercase_letters_in_s1.count(alphabet_letter)>lowercase_letters_in_s2.count(alphabet_letter):\n            where_is_maximum.append(\"1\")\n        elif lowercase_letters_in_s2.count(alphabet_letter)>lowercase_letters_in_s1.count(alphabet_letter):\n            where_is_maximum.append(\"2\")\n\n        if maximum[i] >1: #puede dar problemas la condicion del and\n            if where_is_maximum[i] == \"b\" :\n                string_to_append = \"=:\" + lowercase_alphabet[i]*maximum[i]\n            elif where_is_maximum[i] != \"b\":\n                string_to_append += str(where_is_maximum[i]) + \":\" + lowercase_alphabet[i]*maximum[i]\n\n\n            letters_used_with_prefix.append(string_to_append)\n\n#1: longitud decreciente 2: numero m\u00e1s chico ascendente 3: letra m\u00e1s chica ascendente\n\n\n\n    letters_used_with_prefix=sorted(letters_used_with_prefix,key=lambda conjunto: (len(conjunto)), reverse=True)\n    #letters_used_with_prefix=sorted(letters_used_with_prefix, key=order_alphabetically_ascendent)\n\n\n\n    for string in letters_used_with_prefix:\n        if len(string) not in different_lengths:\n            different_lengths.append(len(string))\n\n    length = len(different_lengths)\n\n    while length>0:\n        letters_with_the_same_length=[]\n        for letter_used_with_prefix in letters_used_with_prefix:\n            if len(letter_used_with_prefix)==different_lengths[length-1]:\n                letters_with_the_same_length.append(letter_used_with_prefix)\n        letters_with_the_same_length=sorted(letters_with_the_same_length, key=order_alphabetically_ascendent)\n        array_of_letters_with_the_same_length.append(letters_with_the_same_length)\n\n        length=length-1\n\n    array_of_letters_with_the_same_length.reverse()\n\n\n\n    for subarray in array_of_letters_with_the_same_length:\n        for item in subarray:\n            string_to_return+=item+\"/\"\n\n    string_to_return=string_to_return[:-1]\n    return(string_to_return)", "def mix(s1, s2):\n    s1 = {elem: '1:' + ''.join([x for x in s1 if x == elem]) for elem in s1 if s1.count(elem) > 1 and elem.islower()}\n    s2 = {elem: '2:' + ''.join([x for x in s2 if x == elem]) for elem in s2 if s2.count(elem) > 1 and elem.islower()}\n    for elem in s2:\n        if elem in s1:\n            if len(s2.get(elem)) > len(s1.get(elem)):\n                s1.update({elem: s2.get(elem)})\n            elif len(s2.get(elem)) == len(s1.get(elem)):\n                s1.update({elem: '=:' + s2.get(elem)[2:]})\n        else:\n            s1.update({elem: s2.get(elem)})\n    s2 = sorted([s1.get(elem) for elem in s1])\n    print(s2)\n    for i in range(len(s2)):\n        for j in range(len(s2)):\n            if len(s2[i]) < len(s2[j]):\n                s2[i], s2[j] = s2[j], s2[i]\n            elif len(s2[i]) == len(s2[j]):\n                if s2[i][0] == s2[j][0] and sorted([s2[i][2], s2[j][2]])[0] == s2[j][2] or \\\n                   s2[i][0].isdigit() == False and s2[j][0].isdigit() or \\\n                   s2[i][0].isdigit() and s2[j][0].isdigit() and int(s2[i][0]) > int(s2[j][0]):\n                    s2[i], s2[j] = s2[j], s2[i]\n    return '/'.join(reversed([x for x in s2]))", "from collections import Counter\n\ndef mix(s1, s2):\n    c1, c2 = [Counter({s: n for s, n in Counter(c).items() if n > 1 and s.islower()}) for c in (s1, s2)]\n    return '/'.join(c + ':' + -n * s for n, c, s in\n                    sorted((-n, '=12'[(c1[s] == n) - (c2[s] == n)], s) for s, n in (c1 | c2).items()))"]