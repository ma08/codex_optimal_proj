["for _ in range(int(input())):\n n=int(input())\n a=input()\n b=input()\n l=[]\n flag=0\n for i in range(n):\n  if b[i]!=a[i]:\n   if b[i] in a and b[i]<a[i]:\n    l.append(b[i])\n   else:\n    flag=1\n    break\n if flag==1:\n  print(-1)\n else:\n  if l==[]:\n   print(0)\n  else:\n   l = sorted(list(set(l)), reverse = True)\n   print(len(l))\n   for i in range(len(l)):\n    q=[]\n    r=[]\n    for j in range(len(a)):\n     if l[i]==b[j]:\n      q.append(j)\n      r.append(a[j])\n    if l[i] not in r:\n     for k in range(len(a)):\n      if a[k]==l[i]:\n       q.append(k)\n    print(len(q),*q)\n   \n", "# cook your dish here\nt = int(input())\nfor _ in range(t):\n n = int(input())\n a = input()\n b = input()\n a = list(a)\n b = list(b)\n l = []\n f = 1\n for i in range(n):\n  if b[i]!=a[i]:\n   if b[i] in a and b[i]<a[i]:\n    l.append(b[i])\n   else:\n    f = 0\n    break\n if f==0:\n  print(-1)\n else:\n  if l == []:\n   print(0)\n  else:\n   l = sorted(list(set(l)), reverse = True)\n   print(len(l))\n   for i in range(len(l)):\n    Q=[]\n    R=[]\n    for j in range(len(a)):\n     if b[j]==l[i]:\n      Q.append(j)\n      R.append(a[j])\n    if l[i] not in R:\n     for k in range(n):\n      if a[k]==l[i]:\n       Q.append(k)\n       break\n    print(len(Q),*Q)", "from collections import deque\nt = int(input())\nwhile t>0:\n t -= 1\n n = int(input())\n a = input()\n b = input()\n amap = {}\n bmap = {}\n for i, char in enumerate(a):\n  if char in amap:\n   amap[char].append(i)\n  else:\n   amap[char] = [i]\n for i, char in enumerate(b):\n  if char in bmap:\n   bmap[char].append(i)\n  else:\n   bmap[char] = [i]\n ans = []\n flag = False\n for letter in range(25, -1, -1):\n  char = chr(ord('a')+letter)\n  if char in bmap:\n   if char not in amap:\n    flag = True\n    break\n   else:\n    ans.append([])\n    for ind in bmap[char]:\n     if a[ind] < char:\n      flag = True\n      break\n     elif a[ind] == char:\n      pass\n     else:\n      ans[-1].append(ind)\n    if len(ans[-1]):\n     ans[-1].append(amap[char][0])\n    else:\n     ans.pop()\n  if flag:\n   break\n if flag:\n  print(-1)\n else:\n  print(len(ans))\n  for item in ans:\n   print(len(item), end=' ')\n   print(*item)", "t = int(input())\n\nfor i in range(t):\n n = int(input())\n A = list(input())\n B = list(input())\n flag = 0\n if(A == B):\n  print(0)\n else:\n\n  for i in range(n):\n   if(B[i] not in A or ord(A[i]) < ord(B[i])):\n    print(-1)\n    flag = 1\n    break\n  \n  \n\n\n\n  if(flag == 0):            \n   count = 0\n   small_ele = list(set(B))\n   seti = []\n   \n\n   for j in small_ele:\n    temp = []\n    ind = A.index(j)\n    if(A != B):\n     temp.append(ind)\n     for k in range(n):\n      if(B[k] == j and A[k] != j):\n       A[k] = j\n       temp.append(k)\n     count = count + 1\n     seti.append(temp)\n    else:\n     break\n   \n   print(count)\n   for i in seti:\n    d = len(i)\n    print(d,end=\" \")\n    for j in range(d):\n     print(i[j],end=\" \")\n    print(end=\"\\n\")\n   \n  \n\n\n\n \n\n", "t = int(input())\n\nfor i in range(t):\n n = int(input())\n A = list(input())\n B = list(input())\n flag = 0\n if(A == B):\n  print(0)\n else:\n\n  for i in range(n):\n   if(B[i] not in A or ord(A[i]) < ord(B[i])):\n    print(-1)\n    flag = 1\n    break\n  \n  \n\n\n\n  if(flag == 0):            \n   count = 0\n   small_ele = list(set(B))\n   seti = []\n   small_ele.sort()\n   small_ele.reverse()\n\n   for j in small_ele:\n    temp = []\n    ind = A.index(j)\n    if(A != B):\n     temp.append(ind)\n     for k in range(n):\n      if(B[k] == j and A[k] != j):\n       A[k] = j\n       temp.append(k)\n     count = count + 1\n     seti.append(temp)\n    else:\n     break\n   \n   print(count)\n   for i in seti:\n    d = len(i)\n    print(d,end=\" \")\n    for j in range(d):\n     print(i[j],end=\" \")\n    print(end=\"\\n\")\n   \n  \n\n\n\n \n\n", "for _ in range(int(input())):\n N = int(input())\n c_str = str(input())\n target_str = str(input())\n no_match = False\n\n for i in range(N):\n\n  if c_str[i] < target_str[i]: \n   no_match = True\n   break \n  \n  if target_str[i] not in c_str : \n   no_match = True\n   break\n \n if no_match : \n  print(-1)\n \n else:\n  indices = {char : index for index, char in enumerate(c_str)}\n  m_match = {}\n  for i in range(N):\n   # c_str[i] is greater than target_str[i]\n   if c_str[i] != target_str[i] : \n    if m_match.get(target_str[i]) : \n     m_match[target_str[i]].append(str(i))\n    \n    else : \n     m_match[target_str[i]] = [str(i)]\n   \n  \n  print(len(m_match))\n\n  for i in sorted(m_match.keys(), reverse=True):\n\n   print(len(m_match[i])+1,\" \".join(m_match[i]), indices[i])", "for _ in range(int(input())):\n N = int(input())\n c_str = str(input())\n target_str = str(input())\n no_match = False\n\n for i in range(N):\n\n  if c_str[i] < target_str[i]: \n   no_match = True\n   break \n  \n  if target_str[i] not in c_str : \n   no_match = True\n   break\n \n if no_match : \n  print(-1)\n \n else:\n  indices = {char : index for index, char in enumerate(c_str)}\n  m_match = {}\n  for i in range(N):\n   # c_str[i] is greater than target_str[i]\n   if c_str[i] != target_str[i] : \n    if m_match.get(target_str[i]) : \n     m_match[target_str[i]].append(str(i))\n    \n    else : \n     m_match[target_str[i]] = [str(i)]\n   \n  \n  print(len(m_match))\n\n  for i in sorted(m_match.keys(), reverse=True):\n\n   print(len(m_match[i])+1,\" \".join(m_match[i]), indices[i])", "for _ in range(int(input())):\n N = int(input())\n c_str = str(input())\n target_str = str(input())\n no_match = False\n\n for i in range(N):\n\n  if c_str[i] < target_str[i]: \n   no_match = True\n   break \n  \n  if target_str[i] not in c_str : \n   no_match = True\n   break\n \n if no_match : \n  print(-1)\n \n else:\n  indices = {char : index for index, char in enumerate(c_str)}\n  m_match = {}\n  for i in range(N):\n   # c_str[i] is greater than target_str[i]\n   if c_str[i] != target_str[i] : \n    if m_match.get(target_str[i]) : \n     m_match[target_str[i]].append(str(i))\n    \n    else : \n     m_match[target_str[i]] = [str(i)]\n   \n  \n  print(len(m_match))\n\n  for i in sorted(m_match.keys(), reverse=True):\n\n   print(len(m_match[i])+1,\" \".join(m_match[i]), indices[i])", "# cook your dish here\ndef conv(a, b):\n stop = 0\n n = len(a)\n for i in range(0,n):\n  if ord(a[i]) - ord(b[i]) < 0:\n   print(-1)\n   stop = 1 \n   \n if stop == 0:\n  for i in range (0,n):\n   flag =0\n   for j in range (0,n):\n    if b[i] == a[j]:\n     flag = 1\n     break\n   if flag == 0:\n    print(-1)\n    stop = 1 \n    break\n if stop ==0:\n  distinctArr = []\n  for i in range (0,n):\n   dontAdd = 0\n   if a[i] != b[i]:\n    for j in range (0,len(distinctArr)):\n     if b[i] == distinctArr[j]:\n      dontAdd = 1\n    if dontAdd == 0:\n     distinctArr.append(b[i])\n  distinctArr.sort(reverse = True)\n  print(len(distinctArr))\n  \n  for i in range (0,len(distinctArr)):\n   arr = []\n   for j in range(0,n):\n    if distinctArr[i]==b[j] and b[j]!=a[j]:\n     arr.append(j)\n   for j in range (0,n):\n    if distinctArr[i] == a[j]:\n     arr.append(j)\n     break\n   arr.sort()\n   print(len(arr), end =\" \")\n   for k in range (0,len(arr)):\n    if k == len(arr)-1:\n     print(arr[k])\n    else:\n     print(arr[k], end=\" \")\n  #print(distinctArr)\n     \nt = int(input())\nfor i in range (0,t):\n n = int(input())\n a = input()\n b = input()\n arr1 = list(a)\n arr2 = list(b)\n conv(arr1, arr2)\n \n \n \n \n \n \n  \n  \n  \n  \n  \n  \n  \n  \n  ", "T = int(input())\nfor _ in range(T):\n N = int(input())\n A = list(input())\n B = list(input())\n if(not set(B).issubset(set(A))):\n  print(-1)\n else:\n  l1 = []\n  flag = 1\n  for (i,(x,y)) in enumerate(list(zip(A,B))):\n   if(y>x):\n    flag = 0\n    break\n   elif(y==x):\n    pass\n   else:\n    l1.append((i,(x,y)))\n  if(flag):\n   s = set(list(reversed(list(sorted([y for i,(x,y) in l1])))))\n   number_of_ops = len(s)\n   print(number_of_ops)\n   for char in s:\n    answer = []\n    for item in l1:\n     if(char == item[1][1]):\n      answer.append(item[0])\n    answer.append(list(A).index(char))\n    answer.insert(0,len(answer))\n    print(' '.join(list(map(str,answer))))\n  else:\n   print(-1)\n    \n  \n    \n", "'''for _ in range(int(input())):\n    N = int(input())\n    a = list(input())\n    b = list(input())\n    aset = set(a)\n    bset = set(b)\n    if(a == b):\n     print(0)\n\n    elif(bset.issubset(aset)):\n     d = {}\n     wr = {}\n     f = 0\n     for i in range(N):\n      if(a[i] != b[i]):\n       if b[i] in d:\n        d[b[i]].append(i)\n        wr[b[i]].append(a[i])\n       else:\n        d[b[i]] = []\n        wr[b[i]] = []\n        d[b[i]].append(i)\n        wr[b[i]].append(a[i])\n     #print(wr,d)\n\n     for k,v in sorted(wr.items(),reverse=True):\n      # print(k,v)\n      for i in v:\n       # print(k,i)\n       if ord(k)>ord(i):\n        f=1\n        break\n      if f==1:\n       break\n     # print(flag)\n     if f==1:\n      print(-1)\n     else:\n      print(len(d))\n      for k,v in sorted(d.items(),reverse=True):\n       print(len(d[k])+1,end=\" \")\n       print(d[k],a.index(k))\n\n\n\n    else:\n     print(-1)''' \n\n\nfor _ in range(int(input())):\n n=int(input())\n \n a=list(input())\n \n b=list(input())\n if(a==b):\n  print(0)\n else:\n  l=[]\n  c=0\n  for i in range(n):\n   if(b[i] not in l):\n    if(b[i] not in a):\n     c=1\n     break\n    l.append(b[i])\n  if(c):\n   print(-1)\n  else:\n   l.sort()\n   l.reverse()\n   truthy=0\n   list1=[]\n   for i in range(len(l)):\n    current=l[i]\n    posb=[]\n    one=None\n    for j in range(n):\n     if(one==None):\n      if(a[j]==current):\n       one=j\n     if(b[j]==current):\n      posb.append(j)\n    for j in range(len(posb)):\n     if(a[posb[j]]<current):\n      truthy=1\n      break\n    if(truthy==1):\n     break\n    else:\n     \n     if(one not in posb):\n      posb.append(one)\n     qq=0\n     for j in range(len(posb)):\n      if(a[posb[j]]!=current):\n       qq=1\n     if(qq):\n      for j in range(len(posb)):\n       a[posb[j]]=current\n      list1.append(posb)\n   if(truthy):\n    print(-1)\n   else:\n    print(len(list1))\n    for i in range(len(list1)):\n     print(len(list1[i]),end=\" \")\n     for j in range(len(list1[i])):\n      print(list1[i][j],end=\" \")\n     print(\"\\n\")", "import string\n\nASCII_ASC = string.ascii_lowercase\nASCII_DSC = sorted(ASCII_ASC, reverse=True)\n\ndef int_input():\n return int(input())\n\ndef array_input(data_type=int):\n if data_type != str:\n  return list(map(data_type, input().split(\"\")))\n else:\n  return list(map(str, input()))\n\ndef solve():\n N = int_input()\n A = array_input(data_type=str)\n B = array_input(data_type=str)\n for i in range(N):\n  if A[i] < B[i]:\n   print(-1)\n   return\n res = []\n for ch in ASCII_DSC:\n  idx_pos = []\n  chk = False\n\n  for i in range(0, N):\n   if B[i] == ch and A[i] != ch:\n    # print(\"ch\",ch)\n    idx_pos.append(i)\n  # print(\"idx_pos\", idx_pos)\n  if chk is False and len(idx_pos):\n   for i in range(0, N):\n    if A[i] == ch:\n     # print(\"setting chk = True\")\n     chk = True\n     idx_pos.append(i)\n  # print(\"now idx_pos\",idx_pos)\n  if chk is False and len(idx_pos):\n   print(-1)\n   return\n  if len(idx_pos):\n   res.append(idx_pos)\n  for idx in idx_pos:\n   A[idx] = ch\n print(len(res))\n for arr in res:\n  print(len(arr), \" \".join(map(str, arr)))\n\n\n  \nt = int_input()\nwhile t > 0:\n t -= 1\n solve()\n", "for _ in range (int(input())):\n n=int(input())\n a1=input()\n b1=input()\n a=[]\n b=[]\n for i in a1:\n  a.append(ord(i)-97)\n for i in b1:\n  b.append(ord(i)-97)\n ind = [-1]*26\n for i in range (n):\n  ind[a[i]]=i\n ans=[]\n temp = 0\n for i in range(n):\n  if b[i]>a[i]:\n   temp = 1\n   break\n for i in range (n):\n  if ind[b[i]]==-1:\n   temp = 1\n for i in range (24,-1,-1):\n  ans.append([])\n  ans[-1].append(ind[i])\n  for j in range (n):\n   if a[j]>i and b[j]==i and ind[i]!=-1:\n    ans[-1].append(j)\n  if temp == 1:\n   break\n if temp == 1:\n  print(-1)\n else:\n  l = 0\n  for i in ans:\n   if len(i)!=1:\n    l+=1\n  print(l)\n  for i in ans:\n   if len(i)!=1:\n    print(len(i),end=\" \")\n    print(*i)\n", "from collections import defaultdict\ndef fn(a,b,n):\n l=[]\n da=defaultdict(lambda:[])\n db=defaultdict(lambda:[])\n idx=jdx=0\n for i,j in zip(a,b):\n  if i<j or j not in a:\n   print(-1)\n   return\n  da[i].append(idx)\n  db[j].append(jdx)\n  idx+=1\n  jdx+=1\n c=0\n #print(b)\n while a!=b:\n  mx=max(db)\n  tc=[]\n  for i in db[mx]:\n   if a[i]!=b[i]:\n    tc.append(i)\n    da[a[i]].remove(i)\n    a[i]=mx\n    da[mx].append(i)\n  \n  for i in da[mx]:\n   if a[i]==mx:\n    tc.append(i)\n    break\n\n  del db[mx]\n  #print(a)\n  l.append(tc)\n  c+=1\n print(c)\n for i in range(c):\n  print(len(l[i]),end=' ')\n  for j in l[i]:\n   print(j,end=' ')\n  print()\n\n\n\n\nt=int(input())\nfor i in range(t):\n n=int(input())\n a=input()\n a=[i for i in a]\n b=input()\n b=[i for i in b]\n fn(a,b,n)\n", "from collections import defaultdict\ndef fn(a,b,n):\n l=[]\n da=defaultdict(lambda:[])\n db=defaultdict(lambda:[])\n idx=jdx=0\n for i,j in zip(a,b):\n  if i<j or j not in a:\n   print(-1)\n   return\n  da[i].append(idx)\n  db[j].append(jdx)\n  idx+=1\n  jdx+=1\n c=0\n #print(b)\n while a!=b:\n  mx=max(db)\n  tc=[da[mx][0]]\n  for i in db[mx]:\n   if a[i]!=b[i]:\n    tc.append(i)\n    da[a[i]].remove(i)\n    a[i]=mx\n    da[mx].append(i)\n\n  del db[mx]\n  #print(a)\n  l.append(tc)\n  c+=1\n print(c)\n for i in range(c):\n  print(len(l[i]),end=' ')\n  for j in l[i]:\n   print(j,end=' ')\n  print()\n\n\n\n\nt=int(input())\nfor i in range(t):\n n=int(input())\n a=input()\n a=[i for i in a]\n b=input()\n b=[i for i in b]\n fn(a,b,n)\n", "from collections import defaultdict\ndef fn(a,b,n):\n l=[]\n da=defaultdict(lambda:[])\n db=defaultdict(lambda:[])\n idx=jdx=0\n for i,j in zip(a,b):\n  if i<j or j not in a:\n   print(-1)\n   return\n  da[i].append(idx)\n  db[j].append(jdx)\n  idx+=1\n  jdx+=1\n c=0\n #print(b)\n while a!=b:\n  mx=max(db)\n  tc=[da[mx][0]]\n  for i in db[mx]:\n   if a[i]!=b[i]:\n    tc.append(i)\n    a[i]=mx\n  del db[mx]\n  #print(a)\n  l.append(tc)\n  c+=1\n print(c)\n for i in range(c):\n  print(len(l[i]),end=' ')\n  for j in l[i]:\n   print(j,end=' ')\n  print()\n\n\n\n\nt=int(input())\nfor i in range(t):\n n=int(input())\n a=input()\n a=[i for i in a]\n b=input()\n b=[i for i in b]\n fn(a,b,n)\n", "for _ in range(int(input())):\n n = int(input())\n a = input()\n b = input()\n flag = 1\n for i in range(n):\n  if a[i] < b[i]:\n   flag = 0\n   break\n  if b[i] not in set(a):\n   flag = 0\n   break\n \n if flag == 1:\n  d = {}\n  for i in range(n):\n   if a[i]!=b[i]:\n    if b[i] not in d:\n     d[b[i]]=[0]\n    d[b[i]][0] += 1 \n    d[b[i]] += [i]\n  # print(d)\n    \n  cov = sorted(d,reverse=True)\n  # print(cov)\n  ans = []\n  opr = len(cov)\n  for i in cov:\n   t = [d[i][0]+1]+[a.index(i)]+d[i][1:]\n   # print(i)\n   # print(t)\n   ans.append(t)\n  print(opr)\n  for i in ans:\n   print(*i, sep=' ')\n else:\n  print(-1)", "# cook your dish here\nfor _ in range(int(input())):\n n = int(input())\n firstString = list(input())\n secondString = list(input())\n firstStringSet = set(firstString)\n secondStringSet = set(secondString)\n if firstString==secondString:\n  print(0)\n \n elif secondStringSet.issubset(firstStringSet):\n  d={}\n  wr = {}\n  f=0\n  for i in range(n):\n   if firstString[i]!=secondString[i]:\n    if secondString[i] in d:\n     d[secondString[i]].append(i)\n     wr[secondString[i]].append(firstString[i])\n    else:\n     d[secondString[i]]=[]\n     wr[secondString[i]]=[]\n     d[secondString[i]].append(i)\n     wr[secondString[i]].append(firstString[i])\n\n  # print(wr,d)\n  for k,v in sorted(wr.items(),reverse=True):\n   # print(k,v)\n   for i in v:\n    # print(k,i)\n    if ord(k)>ord(i):\n     f=1\n     break\n   if f==1:\n    break\n  # print(flag)\n  if f==1:\n   print(-1)\n  else:\n   print(len(d))\n   for k,v in sorted(d.items(),reverse=True):\n    print(len(d[k])+1,end=\" \")\n    print(*d[k],firstString.index(k))\n  \n  \n else:\n  print(-1)", "T=int(input())\nfor _ in range(T):\n N=int(input())\n A=input()\n B=input()\n dupdel=list(dict.fromkeys(B))\n def notpossible(A,B,dupdel):\n  for i in range(len(dupdel)):\n   if dupdel[i] not in A:\n    return -1\n  for i in range(len(A)):\n   if A[i]<B[i]:\n    return -1\n if notpossible(A,B,dupdel)==-1:\n  print(-1)\n  continue\n else:\n  L=[]\n  for i in range(len(A)):\n   if A[i]!=B[i]:\n    L.append(B[i])\n  #print(L)\n  P=list(dict.fromkeys(L))\n  print(len(P))\n  P.sort(reverse=True)\n  for i in range(len(P)):\n   Q=[]\n   R=[]\n   for j in range(len(A)):\n    if B[j]==P[i]:\n     Q.append(j)\n     R.append(A[j])\n   if P[i] not in R:\n    for k in range(N):\n     if A[k]==P[i]:\n      Q.append(k)\n      break\n   print(len(Q),*Q)\n", "# cook your dish here\ntry:\n import string \n alphabets=string.ascii_lowercase\n test=int(input())\n #ans=[]\n\n def solve():\n  \n  ans=[]\n  n=int(input())\n  string1=[]\n  string2=[]\n  present=[None]*26\n  \n  string1=list(input())\n  string2=list(input())\n\n  for i in range(n):\n   if string1[i]<string2[i]:\n    print(-1)\n    return\n  \n  for i in range(n):\n   present[ord(string1[i])-ord('a')]=1\n\n  for i in range(n):\n   if (present[ord(string2[i])-ord('a')]!=1):\n    print(-1)\n    return\n\n  for alpha in alphabets[::-1]:\n   index=[]\n   \n   for i in range(n):\n    if(string1[i]!=alpha and string2[i]==alpha):\n     index.append(i)\n\n  \n   if index:\n    for i in range(n):\n     if string1[i]==alpha:\n      index.append(i)\n\n\n   if index:\n    ans.append(index)\n\n   for i in range(len(index)):\n    idx=index[i]\n    string1[idx]=alpha \n\n\n  print(len(ans))\n  for i in ans:\n   i.sort()\n   print(len(i),*i)\n  #for i in ans:\n   #print(\" \".join(map(str,i)))\n\n for _ in range(test):\n  solve()\n\n\n\n \nexcept:\n pass", "# -*- s_oding: utf-8 -*-\n\"\"\"\ns_reated on Sat May 30 19:42:30 2020\n\n@author: trinzya\n\"\"\"\n\nimport string\n\n\nt=int(input())\nfor i in range(t):\n n=int(input())\n a=list(input())\n b=list(input())\n #print(a,b)\n s=[]\n c=[]\n count=0\n s_=[]\n \n if not set(b).issubset(set(a)):\n  #print(\"okay\")\n  print(-1)\n  continue\n\n abs_=string.ascii_lowercase\n\n\n for k in range(len(abs_)-1,-1,-1):\n  #print(count)\n  flag=0\n  f=0\n  j=abs_[k]\n  #print(j)\n  if a==b:\n   break\n  if j not in c:\n   #print(c)\n   s=[]\n   for i in range(n):\n    #print( j,b[i]==j )\n    \n    if ((a[i]!=b[i]) and( b[i]==j )and (a[i]>j)):\n     f=1\n     #print(j)\n     s.append(i)\n    if a[i]==j:\n     flag=1\n     s.append(i)\n    \n   if len(s)!=0:\n    count=count+1\n    if len(s)==1:\n     \n     #p#rint(\"s\")\n     s=[]\n     count=count-1\n     continue\n    if (flag==0 and f==1 )or( flag==1 and f==0):\n     #print(\"f\",f)\n     #print(\"flag\",flag)\n     \n     #print(s)\n     count=count-1\n     continue\n    for i in s:\n     #print(i)\n     \n     \n     a[i]=j\n     \n    s_.append(s)\n   c.append(j)\n if a!=b:\n  #print(a,b)\n  print(-1)\n  continue\n \n print(count)\n if count!=0:\n  for i in s_:\n   i=list(map(str,i))\n   print(len(i),\" \".join(i))\n  \n\n\n\n\n   \n\n\n\n\n  \n   \n   \n  \n  \n \n \n\n     \n     \n   \n   \n   \n  \n   \n   \n  \n  \n \n \n   \n  \n  \n    \n     \n   \n   \n"]