["def sale_hotdogs(n):\n    return n * (100 if n < 5 else 95 if n < 10 else 90)\n", "def sale_hotdogs(n):\n    rate = 100 if n<5 else 95 if n<10 else 90\n    return n * rate", "def sale_hotdogs(n):\n    return n * [90, 95, 100][(n<10) + (n<5)]", "class Color(object):\n    BLACK = 0\n    RED = 1\n\n\nclass Node(object):\n    __slots__ = ('r', 'left', 'right', 'value', 'color', 'parent')\n\n    def __init__(self, r, value, parent=None, color=Color.RED):\n        self.r = r\n        self.value = value\n        self.parent = parent\n        self.color = color\n        self.left = None\n        self.right = None\n\n    def value_copy(self, other):\n        self.r = other.r\n        self.value = other.value\n\n\nclass RangeDict(dict):\n\n    def __init__(self, mapping=None, iterable=None):\n        self._root = None\n\n        #explain init method\n        if mapping or iterable:\n            for k, v in (mapping.items() if mapping else iterable):\n                self[k] = v\n\n            \n    def __setitem__(self, r, v):\n        if r[1] < r[0]:\n            raise KeyError\n        node = self._insert(r, v)\n        self._insert_adjust(node)\n\n    def _insert(self, r, v):\n        if not self._root:\n            self._root = Node(r, v)\n            return self._root\n        cur = self._root\n        while True:\n            if r[1] < cur.r[0]:\n                if not cur.left:\n                    cur.left = Node(r, v, cur)\n                    return cur.left\n                cur = cur.left\n            elif r[0] > cur.r[1]:\n                if not cur.right:\n                    cur.right = Node(r, v, cur)\n                    return cur.right\n                cur = cur.right\n            else:\n                raise KeyError  # overlap not supported\n\n    def _insert_adjust(self, node):\n        ''' adjust to make the tree still a red black tree '''\n        if not node.parent:\n            node.color = Color.BLACK\n            return\n        if node.parent.color == Color.BLACK:\n            return\n        uncle = self.sibling(node.parent)\n        if node_color(uncle) == Color.RED:\n            node.parent.color = Color.BLACK\n            uncle.color = Color.BLACK\n            node.parent.parent.color = Color.RED\n            return self._insert_adjust(node.parent.parent)\n\n        #parent is red and uncle is black\n        # since parent is red, grandparent must exists and be black\n        parent = node.parent\n        grandparent = parent.parent\n        if self.is_left_son(parent, grandparent):\n            if self.is_left_son(node, parent):\n                self.right_rotate(grandparent)\n                grandparent.color = Color.RED\n                parent.color = Color.BLACK\n            else:\n                self.left_rotate(parent)\n                self.right_rotate(grandparent)\n                grandparent.color = Color.RED\n                node.color = Color.BLACK\n        else:\n            if self.is_left_son(node, parent):\n                self.right_rotate(parent)\n                self.left_rotate(grandparent)\n                grandparent.color = Color.RED\n                node.color = Color.BLACK\n            else:\n                self.left_rotate(grandparent)\n                grandparent.color = Color.RED\n                parent.color = Color.BLACK\n\n    def _find_key(self, key):\n        cur = self._root\n        while cur:\n            if key > cur.r[1]:\n                cur = cur.right\n            elif key < cur.r[0]:\n                cur = cur.left\n            else:\n                break\n        return cur\n\n    def _find_range(self, r):\n        cur = self._root\n        while cur:\n            if r[1] < cur.r[0]:\n                cur = cur.left\n            elif r[0] > cur.r[1]:\n                cur = cur.right\n            elif r[0] == cur.r[0] and r[1] == cur.r[1]:\n                return cur\n            else:\n                raise KeyError\n        raise KeyError\n\n    def __getitem__(self, key):\n        tar = self._find_key(key)\n        if tar:\n            return tar.value\n        raise KeyError\n\n    def __contains__(self, key):\n        return bool(self._find_key(key))\n\n    def __delitem__(self, r):\n        node = self._find_range(r)\n        if node.left and node.right:\n            left_rightest_child = self.find_rightest(node.left)\n            node.value_copy(left_rightest_child)\n            node = left_rightest_child\n        self._delete(node)\n\n    def _delete(self, node):\n        # node has at most one child\n        child = node.left if node.left else node.right\n        if not node.parent:  # node is root\n            self._root = child\n            if self._root:\n                self._root.parent = None\n                self._root.color = Color.BLACK\n            return\n\n        parent = node.parent\n        if not child:\n            child = Node(None, None, parent, Color.BLACK)\n        if self.is_left_son(node, parent):\n            parent.left = child\n        else:\n            parent.right = child\n        child.parent = parent\n\n        if node.color == Color.RED:\n            # no need to adjust when deleting a red node\n            return\n        if node_color(child) == Color.RED:\n            child.color = Color.BLACK\n            return\n        self._delete_adjust(child)\n        if not child.r:\n            # mock a None node for adjust, need to delete it after that\n            parent = child.parent\n            if self.is_left_son(child, parent):\n                parent.left = None\n            else:\n                parent.right = None\n\n    def _delete_adjust(self, node):\n        if not node.parent:\n            node.color = Color.BLACK\n            return\n\n        parent = node.parent\n        sibling = self.sibling(node)\n        if node_color(sibling) == Color.RED:\n            if self.is_left_son(node, parent):\n                self.left_rotate(parent)\n            else:\n                self.right_rotate(parent)\n            parent.color = Color.RED\n            sibling.color = Color.BLACK\n            sibling = self.sibling(node)  # must be black\n\n        # sibling must be black now\n        if not self.is_black(parent) and self.is_black(sibling.left) and \\\n           self.is_black(sibling.right):\n            parent.color = Color.BLACK\n            sibling.color = Color.RED\n            return\n\n        if self.is_black(parent) and self.is_black(sibling.left) and \\\n           self.is_black(sibling.right):\n            sibling.color = Color.RED\n            return self._delete_adjust(parent)\n\n        if self.is_left_son(node, parent):\n            if not self.is_black(sibling.left) and \\\n               self.is_black(sibling.right):\n                sibling.left.color = Color.BLACK\n                sibling.color = Color.RED\n                self.right_rotate(sibling)\n                sibling = sibling.parent\n\n            # sibling.right must be red\n            sibling.color = parent.color\n            parent.color = Color.BLACK\n            sibling.right.color = Color.BLACK\n            self.left_rotate(parent)\n        else:\n            if not self.is_black(sibling.right) and \\\n               self.is_black(sibling.left):\n                sibling.right.color = Color.BLACK\n                sibling.color = Color.RED\n                self.left_rotate(parent)\n                sibling = sibling.parent\n\n            # sibling.left must be red\n            sibling.color = parent.color\n            parent.color = Color.BLACK\n            sibling.left.color = Color.RED\n            self.right_rotate(parent)\n\n    def left_rotate(self, node):\n        right_son = node.right\n\n        if not node.parent:\n            self._root = right_son\n        elif self.is_left_son(node, node.parent):\n            node.parent.left = right_son\n        else:\n            node.parent.right = right_son\n        right_son.parent = node.parent\n\n        node.parent = right_son\n        node.right = right_son.left\n        right_son.left = node\n\n    def right_rotate(self, node):\n        left_son = node.left\n        if not node.parent:\n            self._root = left_son\n        elif self.is_left_son(node, node.parent):\n            node.parent.left = left_son\n        else:\n            node.parent.right = left_son\n        left_son.parent = node.parent\n\n        node.parent = left_son\n        node.left = left_son.right\n        left_son.right = node\n\n    @staticmethod\n    def sibling(node):\n        if node.parent.left == node:\n            return node.parent.right\n        else:\n            return node.parent.left\n\n    @staticmethod\n    def is_left_son(child, parent):\n        if parent.left == child:\n            return True\n        else:\n            return False\n\n    @staticmethod\n    def find_rightest(node):\n        while node.right:\n            node = node.right\n        return node\n\n    @staticmethod\n    def is_black(node):\n        return node_color(node) == Color.BLACK\n\n\ndef node_color(node):\n    if not node:\n        return Color.BLACK\n    return node.color\n\n\ndef in_order(root):\n    ret = []\n    if not root:\n        return []\n    return in_order(root.left) + [root.value] + in_order(root.right)\n\n\ndef height(root):\n    if not root:\n        return 0\n    return 1 + max(height(root.left), height(root.right))\n\n\ndef sale_hotdogs(n):\n    d = RangeDict({\n        (0, 5-1): 100,\n        (5, 10-1): 95,\n        (10, float('inf')): 90\n        })\n    return d[n] * n", "def sale_hotdogs(n):\n    return n * (n < 5 and 100 or n < 10 and 95 or 90)", "sale_hotdogs = lambda n: (100-5*((n>=5)+(n>=10))) * n", "def sale_hotdogs(n):\n    return (100 if n < 5 else 95 if n >= 5 and n < 10 else 90) * n", "def sale_hotdogs(n):\n    if n < 5 and n>0:\n        return n*100\n    elif n>=5 and n<10:\n        return n*95\n    elif n>=10:\n        return n*90\n    else:\n        return 0", "def sale_hotdogs(n):\n    return n * 100 if n < 5 else n * 95 if n >= 5 and n < 10 else n * 90", "def sale_hotdogs(n):\n    return n*(100 if n<5 else 90 if n>=10 else 95)", "def sale_hotdogs(n):\n  return n*[100,95,90][(n>=5)+(n>=10)]", "def sale_hotdogs(n):\n    return n*(20-((n>9)+(n>4)))*5", "sale_hotdogs=lambda n:n*[90,[95,100][n<5]][n<10]", "sale_hotdogs = lambda n: n*[0,100,95,90][(n>0)+(n>=5)+(n>=10)]\n", "def sale_hotdogs(n):\n    return n*(100-((n>4)*5+(n>9)*5))", "def sale_hotdogs(n):\n    '''\n    ## Method 1: Straightforward\n    if n < 5:\n        return n*100\n    elif n > 4 and n < 10:\n        return n*95\n    elif n > 9:\n        return n*90\n    '''\n        \n    '''\n    ## Method 2: Reduced Logic\n    if n > 10:\n        return n*90\n    return n*(100-(int(n*.2)*5))\n    '''\n    \n    ## Method 3: One Liner\n    return [n*(100-(int(n*.2)*5)),n*90][n > 10]", "def sale_hotdogs(n):\n    return 100*n if n < 5 else (95*n if n >= 5 and n <10 else 90*n)", "def sale_hotdogs(n):\n    return n * 100 if 0 <= n < 5 else n * 95 if 4 < n < 10 else n * 90 ", "def sale_hotdogs(n):\n    discount = 0;\n    if n >=5 and n<10:\n        discount = 5\n    elif n>=10:\n        discount = 10\n    return (100-discount)*n\n", "def sale_hotdogs(n):\n    if n < 5:\n        return n*100 if n > 0 else 0\n    elif n>= 5 and n < 10:\n        return n*95\n    else:\n        return n*90", "def sale_hotdogs(n):\n    price = 90 if n >= 10 else 100 if n < 5 else 95\n    \n    return n * price", "def sale_hotdogs(n):\n    if n <= 0:\n        return 0\n    if n < 5:\n        return 100*n\n    elif n < 10:\n        return 95*n\n    return 90*n", "def sale_hotdogs(n):\n    total = 0\n    for i in range(n):\n        if n < 5:\n            total += 100\n            \n        elif 5 <= n < 10:\n            total += 95\n            \n        else:\n            total += 90\n            \n    return total", "def sale_hotdogs(n):\n    return n*100 if n<5 else n*95 if n>=5 and n<10 else 90*n", "def sale_hotdogs(n):\n    return n * 100 if 0 < n < 5 else n * 95 if n in range(5, 10) else n * 90", "def sale_hotdogs(n):\n    if n>=10:return 90*n\n    if n>=5: return 95*n\n    return 100*n", "def sale_hotdogs(n):\n    return n*(n<5)*100 + n*(5<=n<10)*95 + n*(n>=10)*90", "def sale_hotdogs(n):\n    return 100*n if n<5 else 90*n if n>9 else 95*n\n", "def sale_hotdogs(n):\n    if 0 < n < 5:\n        return 100 * n\n    elif 5 <= n < 10:\n        return 95 * n\n    elif n >= 10:\n        return 90 * n\n    return 0", "sale_hotdogs = lambda n: n*(100 if n < 5 else 90 if n>=10 else 95)", "def sale_hotdogs(n):\n    if n < 5: n *= 100\n    elif n < 10: n *= 95\n    else: n *= 90\n    return n", "def sale_hotdogs(n):\n  price = 0\n  if n < 5:\n    price = n * 100\n  elif n >= 5 and n < 10:\n    price = n * 95\n  elif n >= 10:\n    price = n * 90\n  return price", "def sale_hotdogs(n):\n    if n < 5:\n        ans = n*100\n    elif n >= 5 and n < 10:\n        ans = n*95\n    else:\n        ans = n*90\n    return ans\n", "def sale_hotdogs(n):\n    return n*(100 - (0 if n < 5 else 5 if n < 10 else 10))", "def sale_hotdogs(n):\n    if n == 0: return 0\n    if n < 5: return n * 100\n    return 95* n if 10 > n >= 5 else 90 * n ", "def sale_hotdogs(n):\n    #your code here\n    if n<5:\n        return 100*n\n    elif 5<=n<10:\n        return 95*n\n    else:\n        return n*90", "def sale_hotdogs(n):\n    #your code here\n    if n<5:\n        return n*100\n    elif 5<=n<10:\n        return n*95\n    return n * 90", "def sale_hotdogs(n):\n    return n * (100 - 5 * (n > 4) - 5 * (n > 9))", "def sale_hotdogs(n):\n    return 100 * n if 0<n<5 else 95 * n if 5<=n<10 else 90 * n if n>=10 else 0", "def sale_hotdogs(n):\n    #your code here\n    price=0\n    if n>=0 and n<5:\n        price=n*100\n    elif n>=5 and n<10:\n        price=n*95\n    else:\n        price=90*n\n    return price", "# n is the number of customers buying hotdogs\n# input - integers\n# output - integer, cost of hotdog\n\ndef sale_hotdogs(n):\n    if n<5:\n      return n * 100\n    elif n>=5 and n<10:\n      return n * 95\n    else:\n      return n * 90", "def sale_hotdogs(n):\n    \"\"\"\n    Hottest Dogs in Town!\n    \"\"\"\n    return n * (100 if n < 5 else 95 if n < 10 else 90)\n    \n    \n", "def sale_hotdogs(n):\n    return [n*95,n*100,n*90][(n<5)-(n>9)]", "def sale_hotdogs(n):\n    if n > 0 and n < 5:\n        return n*100\n    elif n>= 5 and n < 10:\n        return n*95\n    elif n>=10:\n        return n*90\n    else:\n        return 0", "def sale_hotdogs(n):\n    if n < 5:\n        bill = 100\n    elif n < 10:\n        bill = 95\n    else:\n        bill = 90\n    return n * bill", "def sale_hotdogs(n):\n    if n < 5:\n        bill = n * 100\n    elif n < 10:\n        bill = n * 95\n    else:\n        bill = n * 90\n    return bill", "def sale_hotdogs(n):\n    return {0: 100, 1: 95}.get(n // 5, 90) * n", "def sale_hotdogs(n):\n\n    #if n<5:\n        #return n*100\n    #elif n>=5 and n<10:\n        #return n*95\n    #else:\n        #return n*90\n        \n    return n*100 if n<5 else n*95 if n>=5 and n<10 else 90*n", "def sale_hotdogs(n):\n    if n == 0:\n        return 0\n    elif n < 5:\n        return 100 * n\n    elif n >= 10:\n        return 90 * n\n    else:\n        return 95 * n", "def sale_hotdogs(n):\n    return 0 if n <= 0 else 100 * n if n < 5 else 95 * n if n >= 5 and n < 10 else 90 * n", "def sale_hotdogs(n):\n    if n >= 5 and n < 10:\n        return n * 95\n    if n < 5:\n        return n * 100\n    if n >= 10:\n        return n * 90\n", "def sale_hotdogs(n):\n    return n*100 if n<5 else n*( 95 if n<10 else 90)", "sale_hotdogs = lambda n: ( ((n < 10 and n >= 5) and 95) or (n >= 10 and 90) or 100 ) * n", "sale_hotdogs = lambda n: ((n < 10 and n >= 5) and (95 * n)) or (n >= 10 and (90 * n)) or (n * 100)", "def sale_hotdogs(n):\n    if n>= 10:\n        return n*90\n    elif n < 5:\n        return n*100\n    elif 5 <= n < 10:\n        return n*95", "def sale_hotdogs(n):\n    if n >= 5 and n < 10:\n        return 95 * n\n    elif n >= 10:\n        return 90 * n\n    elif n <= 5:\n        return 100 * n", "def sale_hotdogs(n):\n    if n < 5:\n        cost = 100*n\n    elif n < 10:\n        cost = 95*n\n    else:\n        cost = 90*n\n    return cost", "def sale_hotdogs(n):\n  if n<5: return 100 * n\n  if 5<=n<10: return 95 * n\n  if n>=10: return 90 * n", "sale_hotdogs = lambda n: 90*n if n>=10 else 95*n if n>=5 else 100*n", "def sale_hotdogs(n):\n    return (100,95,90)[sum((n>4, n>9))] * n", "def sale_hotdogs(n):\n    if n<5:  return n*100\n    elif 5 <= n < 10:  return n*100 - n*5\n    else:  return n*100 - n*10", "def sale_hotdogs(n):\n    return (100 - 5 * ((n > 4) + (n > 9))) * n", "def sale_hotdogs(n):\n    return [100, 95, 90][(n > 4) + (n > 9)] * n\n", "def sale_hotdogs(n):\n    \n    fiyat = 0\n    \n    if n < 5:\n        fiyat = 100\n    elif n >= 5 and n < 10:\n        fiyat = 95\n    elif n >= 10:\n        fiyat = 90\n        \n    return n * fiyat\n", "def sale_hotdogs(n):\n    if n<5:\n        return n * 100\n    elif n >= 5 and n < 10:\n        return n * 95\n    elif n >= 10:\n        return n*90\n    else:\n        return None", "def sale_hotdogs(n):\n    return n * 100 if n < 5 else 95 * n if 10 > n >= 5 else 90 * n", "def sale_hotdogs(n):\n    if n < 5: return 100*n\n    if 10 > n >= 5: return 95*n\n    if n >= 10: return 90*n\n    else: return 0", "def sale_hotdogs(n):\n    return n*100 if n < 5 else 95*n if n < 10 else 90*n", "sale_hotdogs=lambda n:100*n if n<5 else 90*n if n>=10 else 95*n", "def sale_hotdogs(n: int) -> int:        \n    return n * (100 if n < 5 else 95 if n < 10 else 90)", "def sale_hotdogs(n: int) -> int:\n    factor = 90\n    \n    if n < 5 :\n        factor = 100\n    elif n < 10:\n        factor = 95\n        \n    return n * factor ", "def sale_hotdogs(n):\n    if n < 5:\n        return n * 100\n    elif n < 10:\n        return 95 * n\n    elif n >= 10:\n        return 90 * n\n", "def sale_hotdogs(n):\n    return (n*100)*(0<=n<5)+(n*95)*(n>=5 and n<10)+(n*90)*(n>=10) ", "def sale_hotdogs(customers):\n    # price changes depending on customers val\n    price = 100 if customers < 5 else 95 if 5 <= customers < 10 else 90\n\n    return customers * price", "def sale_hotdogs(n):\n    price = {\n        n < 5: n * 100,\n        5 <= n < 10: n * 95,\n        n >= 10: n * 90\n    }\n    return price.get(True)", "def sale_hotdogs(n):\n    if n<5:\n        return n*100\n    elif n<10 and n>=5:\n        return n*95\n    else:\n        return n*90\n", "def sale_hotdogs(n):\n    return n * (100 - 5 * ((n >= 5) + (n >= 10)))", "def sale_hotdogs(n):\n    if 0 < n < 5:\n        return 100 * n\n    if n >= 5 and n < 10:\n        return 95 * n\n    if n >= 10:\n        return 90 * n\n    return 0", "def sale_hotdogs(n):\n    if n < 5:\n        return n * 100 \n    elif 5 >= n or n < 10:\n        return n * 95\n    elif n >= 10:\n        return n * 90", "def sale_hotdogs(n):\n    if n < 5: return 100 * n\n    elif n >= 5 and n < 10: return n * 95\n    else: return 90 * n", "def sale_hotdogs(n):\n    if n < 5:\n        return n * 100\n    elif n < 10:\n        return 95 * n\n    else:\n        return 90 * n", "def sale_hotdogs(n):\n    if n >= 10:        return 90 * n\n    elif 5 <= n < 10:  return 95 * n\n    elif 5 > n:        return 100 * n\n    else:              return 0", "def sale_hotdogs(n):\n    return ((n < 5) * 100 * n) + ((n >= 5 and n < 10) * 95 * n) +((n >= 10) * 90 * n)", "def sale_hotdogs(n):\n    return n * [100,95,90][(n>4)+(n>9)]", "def sale_hotdogs(n):\n\n    return (n * 100) * (n < 5) + (n * 95) * (n >= 5 and n < 10) + (n * 90) * (n >= 10)", "def sale_hotdogs(n):\n    #your code here\n    if 0< n and n <5: \n        return n*100\n    elif n>=5 and n<10:\n        return n*95\n    elif n >= 10:\n        return n*90\n    else:\n        return 0", "def sale_hotdogs(n):\n    return n * (90 if n >= 10 else 95  if 5 <= n < 10 else 100)", "def sale_hotdogs(n):\n    a,b = range(0,5), range(5,10)\n    if n in a: return n*100\n    elif n in b: return n*95\n    else: return n*90", "def sale_hotdogs(n):\n    price = 100 if n < 5 else 95 if 5 <= n and n < 10 else 90\n    return n * price", "def sale_hotdogs(n):\n    return 0 if n==0 else n*100 if n<5 else n*95 if n<10 else n*90\n", "def sale_hotdogs(n):\n    if n < 5:\n        return n * 100\n    elif n >= 5 and n < 10:\n        return 95 * n\n    else:\n        return 90 * n", "def sale_hotdogs(n):\n    if n == 0:\n        return 0\n    if n < 5:\n        return 100 * n\n    return 90 * n if n >= 10 else 95 * n", "def sale_hotdogs(n):\n    if  5 <= n < 10:\n        return 95 * n\n    elif n < 5:\n        return n * 100\n    else:\n        return n * 90", "def sale_hotdogs(n):\n    #your code here\n    if n < 5: p = 100 * n\n    elif n == 0: p = 0\n    elif (n >= 5) and (n < 10): p = 95 * n\n    else: p = 90 * n\n    return p", "def sale_hotdogs(n):\n    if n>=10:\n        return 90*n\n    elif n<5:\n        return 100*n\n    else:\n        return 95*n", "def sale_hotdogs(n):\n    return n * 100 if n < 5 else 95 * n if n >= 5 and n < 10 else 90 * n", "def sale_hotdogs(n):\n    if n < 5: return n * 100\n    if n >4 and n < 10: return n * 95\n    else: return n * 90"]