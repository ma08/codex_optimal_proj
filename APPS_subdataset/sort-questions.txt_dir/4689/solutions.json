["def create_report(names):\n    result = {}\n    \n    for name in names:\n        if name.startswith(\"Labrador Duck\"):\n            return [\"Disqualified data\"]\n        \n        name = name.upper().replace(\"-\", \" \").split()\n        count = int(name.pop())\n        \n        if   len(name) == 1:  code = name[0][:6]\n        elif len(name) == 2:  code = name[0][:3] + name[1][:3]\n        elif len(name) == 3:  code = name[0][:2] + name[1][:2] + name[2][:2]\n        elif len(name) == 4:  code = name[0][0] + name[1][0] + name[2][:2] + name[3][:2]\n        \n        if code in result:    result[code] += count\n        else:                 result[code] = count\n    \n    return sum([[name, result[name]] for name in sorted(result)] , [] )", "from functools import reduce                # Lacking in the test suite.\nfrom collections import defaultdict\nimport re\n\nFINDER   = re.compile(r'(.+?)\\s+(\\d+)%')\nSPLITTER = re.compile(r'\\s|-')\n\ndef create_report(names):\n    \n    dct = defaultdict(int)\n    for what,n in FINDER.findall('%'.join(names)+'%'):\n        if what=='Labrador Duck': return [\"Disqualified data\"]\n        \n        lst = SPLITTER.split(what)\n        key = ''.join(word[:6//len(lst) + (len(lst)==4 and i>=2)]\n                      for i,word in enumerate(lst)).upper()\n        dct[key] += int(n)\n    \n    lst = []\n    for k,n in sorted(dct.items()): lst.extend([k,n])\n    \n    return lst\n", "from collections import defaultdict\nfrom itertools import chain\nimport re\n\np1 = re.compile(\"(.*?)\\s*(\\d+)\")\np2 = re.compile(\"-| \")\n\ndef change(s):\n    L = p2.split(s)\n    if len(L) == 1:\n        return L[0][:6].upper()\n    if len(L) == 2:\n        return (L[0][:3] + L[1][:3]).upper()\n    if len(L) == 3:\n        return (L[0][:2] + L[1][:2] + L[2][:2]).upper()\n    if len(L) == 4:\n        return (L[0][0] + L[1][0] + L[2][:2] + L[3][:2]).upper()\n    raise Exception(\"No rule for more than 4 words\")\n\ndef create_report(names):\n    result = defaultdict(int)\n    for data in names:\n        name, num = p1.match(data).groups()\n        if name == \"Labrador Duck\": return [\"Disqualified data\"]\n        result[change(name)] += int(num)\n    return list(chain.from_iterable(sorted(result.items())))", "bird = lambda w: {4:lambda w: w[0][:1] + w[1][:1] + w[2][:2] + w[3][:2], \n                  3:lambda w: w[0][:2] + w[1][:2] + w[2][:2], \n                  2:lambda w: w[0][:3] + w[1][:3], \n                  1:lambda w: w[0][:6]}[len(w)](w)\n\ndef create_report(names):\n    D = {}    \n    for b, i in [(bird(' '.join(s.split()[:-1]).upper().replace('-', ' ').split()), int(s.split()[-1])) for s in names]:\n        D[b] = D.get(b, 0) + i\n\n    return ['Disqualified data'] if 'LABDUC' in D else [e for b in [[k, D[k]] for k in sorted(D.keys())] for e in b]", "from collections import Counter\nfrom itertools import chain\n\ndef create_report(names):\n    if any(name.startswith(\"Labrador Duck \") for name in names): return [\"Disqualified data\"]\n    counts = Counter()\n    for name,count in (d.rsplit(None, 1) for d in names):\n        counts[code(name)] += int(count)\n    return list(chain(*sorted(counts.items())))\n\ndef code(name):\n    words = name.upper().replace(\"-\",\" \").split(None, 3)  # Generate at most 4 words\n    lengths = [ (6,), (3,3), (2,2,2), (1,1,2,2) ][len(words)-1]\n    return \"\".join(word[:lengths[i]] for i,word in enumerate(words))", "import re;create_report=lambda n:(lambda L:['Disqualified data']if'LABDUC'in L else L)([z for v in sorted((''.join(w[:6//len(l)+(len(l)==4 and i>=2)]for i,w in enumerate(l)),sum(b for _,b in g))\nfor l,g in __import__(\"itertools\").groupby(sorted(map(lambda x:(re.split(r'[\\s-]+',x[0].upper()),int(x[1])),map(lambda s:re.findall(r'(.+?)\\s+(\\d+)',s)[0],n))),key=lambda t:t[0]))for z in v])", "def create_report(a):\n    d = {}\n    for i in a:\n        unique = [j for j in i.replace(\"-\", \" \").split(\" \")[:-1] if j]\n        curr = [\"\".join(unique).upper()[:6],  \"\".join([k[:3] for k in unique]).upper(), \"\".join([k[:2] for k in unique]).upper(), \"\".join([j[:1] if k in [0, 1] else j[:2] for k, j in enumerate(unique)]).upper()][len(unique) - 1]\n        d[curr] = d.get(curr, 0) + int(i.split(\" \")[-1])\n    return [\"Disqualified data\"] if \"Labrador Duck\" in \"\".join(a) else sum([[i,d[i]] for i in sorted(d)],[]) ", "def create_report(arr):\n    d = {}\n    for i in arr:\n        if 'Labrador Duck' in i: return ['Disqualified data']\n        *s,v = i.replace('-',' ').split()\n        if len(s) == 4:\n            k = s[0][0]+s[1][0]+s[-2][:2]+s[-1][:2]\n        elif len(s) == 3:\n            k = ''.join(j[:2] for j in s)\n        elif len(s) == 2:\n            k = ''.join(j[:3] for j in s)\n        else:\n            k = s[0][:6]\n        k = k.upper()\n        d.setdefault(k,0)\n        d[k] += int(v)\n        \n    r = []\n    for k in sorted(d):\n        r.extend([k,d.get(k)])\n    \n    return r\n", "def create_report(A):\n    B={}\n    for a in A:\n        if\"Labrador Duck\"in a:return ['Disqualified data']\n        W=a.replace('-',' ').upper().split()\n        c,L=int(W.pop()),len(W)\n        n=L==1and W[0][:6]or L==2and W[0][:3]+W[1][:3] or L==3and W[0][:2]+W[1][:2]+W[2][:2]or W[0][0]+W[1][0]+W[2][:2]+W[3][:2]\n        B[n]=B.get(n,0)+c\n    return sum([[k,B[k]]for k in sorted(B)],[])", "from collections import defaultdict\n\ndef create_report(names):\n    data = defaultdict(int)\n    for name in names:\n        words = name.replace('-',' ').split()\n        number = int(words[-1])\n        words = [word.upper() for word in words[:-1] if word]\n        if words == ['LABRADOR','DUCK']:\n            return ['Disqualified data']\n        if 1<=len(words)<=3:\n            code = ''.join(word[:6//len(words)] for word in words)\n        elif len(words)==4:\n            code = words[0][0]+words[1][0]+words[2][:2]+words[3][:2]\n        else:\n            print(name,'has',len(words),'words')\n        #print(words,code)\n        data[code] += number\n    result = []\n    for code, number in sorted(data.items()):\n        result += [code, number]\n    return result"]