["_RESULTS = {\n    'goodpresent': lambda y: ''.join(chr(ord(c) + y) for c in 'goodpresent'),\n    'crap': lambda y: 'acpr',\n    'empty': lambda y: 'empty',\n    'bang': lambda y: str(sum(ord(c) - y for c in 'bang')),\n    'badpresent': lambda y: 'Take this back!',\n    'dog': lambda y: 'pass out from excitement {} times'.format(y)\n}\n\npresent = lambda x, y: _RESULTS[x](y)", "def present(x,y):\n    if x == 'badpresent':\n        return 'Take this back!'\n    if x == 'goodpresent':\n        return ''.join(chr(ord(i)+y) for i in x)\n    if x == 'crap' or x == 'empty':\n        return ''.join(sorted(x))\n    if x == 'bang':\n        return str(sum([ord(i) - y for i in x]))\n    if x == 'dog':\n        return \"pass out from excitement {} times\".format(y)", "present=lambda x,y:['Take this back!',''.join(chr(ord(e)+y) for e in x),'acpr',str(sum(ord(e)-y for e in x)),'pass out from excitement {} times'.format(y),x]['doangp'.index(x[2])]", "def present(x,y):\n    if x==\"goodpresent\":return \"\".join(chr(ord(c)+y) for c in x)\n    elif x in {\"crap\",\"empty\"}:return \"\".join(sorted(x))\n    elif x==\"bang\":return str(sum(ord(c)-y for c in x))\n    elif x==\"badpresent\":return \"Take this back!\"\n    elif x==\"dog\":return f\"pass out from excitement {y} times\"", "def present(x,y):\n    if x == 'badpresent': return 'Take this back!'\n    if x == 'goodpresent': return ''.join(chr(ord(i)+y) for i in x)\n    if x == 'crap': return 'acpr'\n    if x == 'bang': return str(sum(ord(i)-y for i in x))\n    if x == 'dog': return f'pass out from excitement {y} times'\n    if x == 'empty': return x", "def present(x,y):\n    if x == \"badpresent\":\n        return \"Take this back!\"\n    if x == \"goodpresent\":\n        return \"\".join([chr(ord(el) + y) for el in x ])\n    if x == \"crap\" or x == \"empty\":\n        return \"\".join(sorted(x))\n    if x == \"bang\":\n        return str(sum([ord(el) - y for el in x]))\n    if x == \"dog\":\n        return f'pass out from excitement {y} times'", "def present(x,y):\n    if x == \"empty\":\n        return \"empty\"\n    if x == \"crap\":\n        return \"\".join(sorted(x))\n    if x == \"badpresent\":\n        return \"Take this back!\"\n    if x == \"dog\":\n        return f\"pass out from excitement {y} times\"\n    if x == \"bang\":\n        return str(sum([ord(el)-y for el in x]))\n    if x == \"goodpresent\":\n        return \"\".join([chr(ord(el)+y)for el in x])\n", "def present(x,y):\n    if x == '' or x == 'empty':\n        return 'empty'\n    elif x == 'crap':\n        return 'acpr'\n    elif x == 'badpresent':\n        return 'Take this back!'\n    elif x == 'dog':\n        return 'pass out from excitement ' + str(y) + ' times'\n    elif x == 'bang':\n        output = 0\n        for char in list(x):\n            output += ord(char)-y\n        return str(output)\n    elif x == 'goodpresent':\n        output = ''\n        for char in list(x):\n            output += chr(ord(char)+y)\n        return output\n    else:\n        return 'lol'", "def present(present, passes):\n    if present == \"goodpresent\":\n        return \"\".join(chr(ord(c) + passes) for c in present)\n    elif present == \"crap\" or present == \"\":\n        return \"\".join(sorted(present))\n    elif present == \"bang\":\n        return str(sum(map(ord, present)) - passes * len(present))\n    elif present == \"badpresent\":\n        return \"Take this back!\"\n    elif present == \"dog\":\n        return f\"pass out from excitement {passes} times\"\n    else:\n        return \"empty\"", "def present(x,y):\n    if x == 'badpresent': return \"Take this back!\"\n    elif x == 'dog': return f'pass out from excitement {y} times'\n    elif x in ['crap', 'empty']: return ''.join(sorted(x))\n    elif x == 'goodpresent': return ''.join(map(lambda a: chr(ord(a) + y), x))\n    else: return str(sum(map(lambda a: ord(a) - y, x)))"]