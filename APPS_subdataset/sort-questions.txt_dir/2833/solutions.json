["def sect_sort(lst, start, length=0):\n    end = start + length if length else len(lst)\n    return lst[:start] + sorted(lst[start:end]) + lst[end:]", "def sect_sort(arr, start, num=0):\n    out = arr[:]\n    s = slice(start, None if not num else start + num)\n    out[s] = sorted(out[s])\n    return out", "def sect_sort(arr, st, ln=0):\n    return arr[:st] + ( sorted(arr[st:st+ln]) + arr[st+ln:] if ln else sorted(arr[st:]) )", "def sect_sort(array, start, length=-1):\n    if length == -1:\n        length = len(array) - start\n    if length == 0:\n        length = 1\n    return array[0:start] + sorted(array[start:start+length]) + array[start+length:]", "def sect_sort(a, b=0, c=0):\n    c = len(a) if not c else b + c\n    return a[:b] + sorted(a[b:c]) + a[c:]", "def sect_sort(array, start, end = 0):\n    e = start + end if end else None\n    array[start:e] = sorted(array[start:e])\n    return array", "def sect_sort(a, s, l=None):\n    if l:\n        return a[:s] + sorted(a[s:s+l]) + a[s+l:]\n    return a[:s] + sorted(a[s:])", "def sect_sort(l, ind, n=-1):\n    if(n > 0):\n        \n        s = sorted(l[ind:ind+n])\n        return l[0:ind] + s + l[ind+n:]\n    else:\n        s = sorted(l[ind:])\n        return l[0:ind] + s", "sect_sort=lambda arr,s,l=None: (lambda l: arr[:s]+sorted(arr[s:s+l])+arr[s+l:])(len(arr) if not l else l)", "def sect_sort(*args):\n    if len(args)==2:\n        lst, start=args\n        res=lst[:start]+sorted(lst[start:])\n    else:\n        lst, start, size=args\n        if size==0:\n            res=lst[:start]+sorted(lst[start:])\n        else:\n            res=lst[:start]+sorted(lst[start:start+size])+lst[start+size:]\n    return res"]