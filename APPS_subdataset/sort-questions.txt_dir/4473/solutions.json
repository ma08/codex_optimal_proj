["def xp_to_target_lvl(*args):\n    if len(args) < 2:\n        return 'Input is invalid.'\n        \n    current_xp, target_lvl = args\n    \n    if not isinstance(target_lvl, int):\n        return 'Input is invalid.'\n    \n    if not (0 < target_lvl < 171):\n        return 'Input is invalid.'\n    \n    if current_xp < 0:\n        return 'Input is invalid.'\n        \n    level = 1\n    xp = 314\n    xp_bump = 25\n    \n    sum_ = 0\n    while level < target_lvl:\n        sum_ += xp\n        level += 1\n        xp_bump_reduction = level // 10\n        xp += int(xp * (xp_bump - xp_bump_reduction) / 100)\n        \n    diff = sum_ - current_xp\n    if diff <= 0:\n        return 'You have already reached level {}.'.format(target_lvl)\n    else:\n        return diff\n", "def xp_to_target_lvl(current_xp=None, target_lvl=None):\n    \n    invalid = \"Input is invalid.\"\n    if (type(target_lvl) is not int) or (type(current_xp) is not int):\n        return invalid\n    if current_xp < 0 or target_lvl < 1 or target_lvl > 170:\n        return invalid\n    if target_lvl == 1:\n        return \"You have already reached level 1.\"\n    \n    needed_xp = 314\n    if target_lvl > 2:\n        needed_xp = calc_needed(target_lvl)\n    \n    if current_xp >= needed_xp:\n        return \"You have already reached level %s.\" % target_lvl\n    \n    return needed_xp - current_xp\n        \ndef calc_needed(target_lvl):\n    increase = 25\n    lvl_xp = needed_xp = 314\n    \n    for lvl in range(3, target_lvl+1):\n        lvl_xp += int( lvl_xp * increase / 100 )\n        needed_xp += lvl_xp\n        if lvl % 10 == 0:\n            increase -= 1\n        \n    return needed_xp\n    \n", "from fractions import Fraction\n\ndef xp_to_target_lvl(current_xp=None, target_lvl=None):\n    if not isinstance(current_xp, int) or not isinstance(target_lvl, int) or current_xp < 0 or not 1 <= target_lvl <= 170:\n        return \"Input is invalid.\"\n    increase, xp, total = Fraction(5, 4), 314, 0\n    for i in range(2, target_lvl+1):\n        if not i%10: increase -= Fraction(1, 100)\n        total, xp = total+xp, int(xp*increase)\n    return total - current_xp if total > current_xp else f\"You have already reached level {target_lvl}.\"", "from itertools import accumulate\n\nXPS = [0, 0, 314]\npercent = 125\nfor i in range(3, 170 + 1):\n    XPS.append(XPS[-1] * percent // 100)\n    if i % 10 == 0:\n        percent -= 1\nXPS = list(accumulate(XPS))\n\ndef xp_to_target_lvl(current_xp=None, target_lvl=None):\n    if not (\n        isinstance(current_xp, int)\n        and isinstance(target_lvl, int)\n        and current_xp >= 0\n        and 1 <= target_lvl <= 170\n    ):\n        return \"Input is invalid.\"\n    required = XPS[target_lvl] - current_xp\n    return required if required > 0 else f\"You have already reached level {target_lvl}.\"\n", "from itertools import accumulate\n\nXP=[0,0,314]\nfor i in range(2,170):\n    XP.append(XP[-1]*(125-i//10)//100)\nXP=list(accumulate(XP))\n\ndef xp_to_target_lvl(xp=-1, lvl=0):\n    try: \n        if xp<0 or lvl<1: return 'Input is invalid.'\n        res = XP[lvl]-xp\n        return res if res>0 else f'You have already reached level {lvl}.'\n    except: return 'Input is invalid.'", "def xp_to_target_lvl(current_xp='', target_lvl=''):\n    # good luck ^_^\n    if isinstance(current_xp,int) and isinstance(target_lvl,int):\n        if current_xp>=0 and 1<=target_lvl<=170:\n            a=[314]\n            for i in range(2,target_lvl+2):\n                a.append(int(a[-1]*(1.25-0.01*(i//10))))\n            return sum(a[:target_lvl-1])-current_xp if sum(a[:target_lvl-1])-current_xp>0 else 'You have already reached level {}.'.format(target_lvl)\n    return 'Input is invalid.'\n", "from math import floor\n\n\ndef xp_to_target_lvl(current_xp=-100, target_lvl=-100):\n    if type(current_xp) != int or type(target_lvl) != int or current_xp + target_lvl <= 0 or target_lvl > 170 or target_lvl < 1:\n        return \"Input is invalid.\"\n\n    exp_req = 314\n    inc = 25\n    level = 1\n    exp = 0\n    while level < target_lvl:\n        level += 1\n        if level % 10 == 0:\n            inc -= 1\n        exp += exp_req\n        exp_req = floor(exp_req + exp_req * inc / 100)\n\n    if exp - current_xp <= 0:\n        return f\"You have already reached level {target_lvl}.\"\n    return exp - current_xp", "a,e,t,m = [0,314],314,314,.25\nfor i in range(2,170):\n    x = int(e*(1+m))\n    t += x\n    a.append(t)\n    e = x\n    if not (i+1)%10:\n        m -= .01\na[-1] = 769832696988485\n\ndef xp_to_target_lvl(e=None,lvl=None):\n    try:        \n        if e<0 or lvl<1: return 'Input is invalid.'\n        if lvl==1 or e >= a[max(lvl-1,0)]: return f'You have already reached level {lvl}.'\n        return a[lvl-1] - e\n    except:\n        return 'Input is invalid.'", "from math import floor\n\ndef xp_to_target_lvl(*args):\n    if len(args) != 2:\n        return \"Input is invalid.\"\n    \n    current_xp = args[0]\n    target_lvl = args[1]\n    if type(current_xp) is not int or type(target_lvl) is not int or current_xp < 0 or target_lvl <= 0 or target_lvl > 170:\n        return \"Input is invalid.\"\n    \n    req_xp = 0\n    xp_lvl = 314\n    for i in range(1,target_lvl):\n        print(xp_lvl)\n        req_xp += xp_lvl\n        xp_lvl *= (1.25 - 0.01*((i+1)//10))\n        xp_lvl = floor(xp_lvl)\n    \n    print(f\"\\n{req_xp}\")\n    \n    return req_xp - current_xp if req_xp > current_xp else f\"You have already reached level {target_lvl}.\"", "def xp_to_target_lvl(cur_xp = -1, lvl = -1):\n    if not isinstance(cur_xp, int) or cur_xp < 0 or not isinstance(lvl, int) or lvl <= 0 or lvl > 170: \n        return \"Input is invalid.\"\n    \n    count = 1\n    xp = 0\n    multipler = 25\n    next_lvl = 314\n    \n    while count < lvl:\n        count += 1\n        if count == lvl: xp += next_lvl; print(xp, count); break\n        if count % 10 == 0: multipler = float(multipler - 1)\n        xp += next_lvl\n        next_lvl = next_lvl + int(next_lvl * (multipler / 100))\n        print(xp, count, multipler)\n        \n    result = xp - cur_xp\n    if result > 0:\n        return result\n    else:\n        return f'You have already reached level {lvl}.'"]