["class Solution:\n     def minPatches(self, nums, n):\n         \"\"\"\n         :type nums: List[int]\n         :type n: int\n         :rtype: int\n         \"\"\"\n         res, cur, i = 0, 1, 0\n         while cur <= n:\n             if i < len(nums) and nums[i] <= cur:\n                 cur += nums[i]\n                 i += 1\n             else:\n                 cur *= 2\n                 res += 1\n         return res", "class Solution:\n     def minPatches(self, nums, n):\n         \"\"\"\n         :type nums: List[int]\n         :type n: int\n         :rtype: int\n         \"\"\"\n         miss, res, i = 1, 0, 0\n         while miss <= n:\n             if i < len(nums) and nums[i] <= miss:\n                 miss += nums[i]\n                 i += 1\n             else:\n                 miss += miss\n                 res += 1\n         return res", "class Solution:\n     def minPatches(self, nums, n):\n         \"\"\"\n         :type nums: List[int]\n         :type n: int\n         :rtype: int\n         \"\"\"\n         miss, res, i = 1, 0, 0\n         while miss <= n:\n             if i < len(nums) and nums[i] <= miss:\n                 miss += nums[i]\n                 i += 1\n             else:\n                 miss += miss\n                 res += 1\n         \n         return res", "class Solution:\n     def minPatches(self, nums, n):\n         \"\"\"\n         :type nums: List[int]\n         :type n: int\n         :rtype: int\n         \"\"\"\n         missed, added, i = 1, 0, 0\n         while missed <= n:\n             if i < len(nums) and nums[i] <= missed:\n                 missed += nums[i]\n                 i += 1\n             else:\n                 missed += missed\n                 added += 1\n         return added\n", "class Solution:\n     def minPatches(self, nums, n):\n         \"\"\"\n         :type nums: List[int]\n         :type n: int\n         :rtype: int\n         \"\"\"\n         maxValue = 0\n         i = 0\n         count = 0\n         while maxValue < n:\n             # print(i, count, nums[i]-1, maxValue)\n             if i >= len(nums):\n                 while maxValue < n:\n                     maxValue += maxValue +1\n                     count += 1\n             elif nums[i]-1 > maxValue:\n                 maxValue += maxValue +1\n                 count += 1\n             elif nums[i]-1 == maxValue:\n                 maxValue += nums[i]\n                 i += 1\n             elif nums[i]-1 < maxValue:\n                 maxValue += nums[i]\n                 i += 1\n             \n         return count\n                 \n                 \n", "class Solution:\n     def minPatches(self, nums, n):\n         \"\"\"\n         :type nums: List[int]\n         :type n: int\n         :rtype: int\n         \"\"\"\n         current_max = 1\n         i = 0\n         count = 0\n         while current_max <= n:\n             if i < len(nums) and nums[i] <= current_max:\n                 current_max += nums[i]\n                 i += 1\n             else:\n                 current_max += current_max\n                 count += 1\n         return count"]