["def flip_bit(value, bit_index):\n    return value ^ (1 << (bit_index-1))", "flip_bit=lambda n,k:n^1<<k-1", "def flip_bit(value, bit_index):\n    return value ^ 2 ** (bit_index-1)", "def flip_bit(v, b):\n    return 1<<b-1 ^ v", "flip_bit=lambda v, i: int(\"\".join([l if 64-i!=k else \"0\" if l==\"1\" else \"1\" for k,l in enumerate((\"0\"*64+bin(v)[2:])[-64:])]),2)", "def flip_bit(v,i):\n    v=list(bin(v)[2:].rjust(i,\"0\")[::-1])\n    v[i-1]=str(1-int(v[i-1]))\n    return int(\"\".join(v[::-1]),2)", "def flip_bit(value, bit_index):\n    bs = list(bin(value)[2:].zfill(bit_index))\n    i = len(bs) - bit_index\n    bs[i] = '10'[int(bs[i])]\n    return int(''.join(bs), 2)\n", "def flip_bit(value, bit_index):\n    bits = list(map(int, bin(value)[2:]))\n    while len(bits) < bit_index: bits.insert(0, 0)\n    bits[len(bits) - bit_index] ^= 1\n    return int(''.join(map(str, bits)), 2)", "def flip_bit(value, bit_index):\n    binary = bin(value)[2:]\n    \n    if bit_index <= len(binary):\n        lst = list(binary)\n        lst[-bit_index] = \"0\" if binary[-bit_index] == \"1\" else \"1\"\n        return int(\"\".join(lst), 2)\n    \n    return value + 2**(bit_index - 1)", "def flip_bit(v, b):\n    k = list(bin(v)[2:].zfill(b))\n    k[-b] = str(1 - int(k[-b]))\n    return int(''.join(k), 2)"]