["class Solution:\n     def findMin(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         min = nums[0]\n         start, end = 0, len(nums) - 1\n         while start<end:\n             mid = (start+end)//2\n             if nums[mid]>nums[end]:\n                 start = mid+1\n             elif nums[mid]<nums[end]:\n                 end = mid\n             else:\n                 end = end - 1\n         return nums[start]", "class Solution:\n     def findMin(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         \n         #\u7c7b\u4f3c\u4e0a\u4e00\u9898\n         if not nums:\n             return -1\n         l,r=0,len(nums)-1\n         #\u4e8c\u5206\n         while l<=r:\n             mid=(l+r)//2\n             # \u540e\u534a\u9012\u589e\n             if nums[mid]<nums[r]:\n                 r=mid\n             else:\n                 #\u7c7b\u4f3c\u4e0a\u4e00\u9898\n                 if nums[mid]>nums[r]:\n                     l=mid+1\n                 #\u8fd9\u91cc\u5904\u7406\u91cd\u590d\u6570\n                 else:\n                     r-=1\n         if nums[l]<nums[r]:\n             return nums[l]\n         else:\n             return nums[r]", "class Solution(object):\n     def findMin(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) == 1:\n             return nums.pop()\n \n         start, finish = 1, len(nums) - 1\n \n         while start < finish:\n             half = (start + finish) // 2\n             if nums[half] > nums[0]:\n                 start = half + 1\n             elif nums[half] == nums[0]:\n                 return min(Solution.findMin(self, nums[:half]), Solution.findMin(self, nums[half:]))\n             else:\n                 finish = half\n \n         return min(nums[start], nums[0])\n", "class Solution:\n     def findMin(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         n = len(nums)\n         if n == 0: return None\n         l, r = 0, n\n         while l + 1 < r:\n             mid = (l + r) >> 1\n             if nums[mid] == nums[l]:\n                 for i in range(l+1, mid):\n                     if nums[i] < nums[l]:\n                         r = mid\n                         break\n                 if r != mid:\n                     l = mid\n             elif nums[mid] > nums[l]:\n                 l = mid\n             else:\n                 r = mid\n         return nums[r % n]", "class Solution:\n     def findMin(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         min = 99999999999\n         if (len(nums)==1):\n             return nums[0]\n         for i in range(len(nums)-1):\n             if nums[i]>=nums[i+1] and min>nums[i+1]:\n                 min= nums[i+1]\n             elif nums[i]<=nums[i+1] and min>nums[i]:\n                 min= nums[i]\n         return min", "class Solution:\n     def findMin(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         \n         if len(nums) == 1:\n             return nums[0]\n         \n         for index in range(-1, len(nums) - 1):\n             if nums[index] > nums[index+1]:\n                 return nums[index+1]\n             if index + 1 == len(nums) - 1:\n                 return nums[0]\n             \n         return None", "class Solution:\n     def findMin(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         start = 0\n         end = len(nums) - 1\n         while start < end:\n             if start < len(nums) - 1 and nums[start] == nums[start + 1]:\n                 start += 1\n                 continue\n             if nums[end] == nums[end - 1]:\n                 end -= 1\n                 continue\n             mid = start + (end - start) // 2\n             if nums[mid] > nums[end]:\n                 start = mid + 1\n             else:\n                 end = mid\n         return nums[start]\n", "class Solution:\n     def findMin(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) == 0:\n             return -1\n         \n         if nums[len(nums) - 1] > nums[0]:\n             return nums[0]\n         \n         start = 0\n         end = len(nums) - 1\n         \n         while start + 1 < end:\n             mid = start + (end - start) // 2\n             if nums[mid] == nums[start]:\n                 start += 1\n             elif nums[mid] == nums[end]:\n                 end -= 1\n             elif nums[mid] > nums[start] and nums[mid] > nums[end]:\n                 start = mid\n             else:\n                 end = mid\n         return min(nums[start], nums[end])\n             \n         \n", "class Solution:\n     def findMin(self, nums):\n         l = 0\n         r = len(nums) - 1\n         res = nums[r]\n         while l < r:\n             if nums[l] < nums[r]:\n                 return min(nums[l],res)\n             res = min(res,nums[r])\n             m = int((l+r)/2)\n             if nums[l] == nums[r]:\n                 temp = nums[r]\n                 while nums[l] == temp and l < r:\n                     l = l + 1\n                 while nums[r] == temp and l < r:\n                     r = r - 1\n             elif nums[m] >= nums[l]:\n                 l = m + 1\n             elif nums[m] <= nums[r]:\n                 res = min(nums[m],res)\n                 r = m - 1\n         return min(nums[l],res)\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n", "class Solution:\n     def findMin(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         \n         #\u7c7b\u4f3c\u4e0a\u4e00\u9898\n         if not nums:\n             return -1\n         l,r=0,len(nums)-1\n         #\u4e8c\u5206\n         while l<=r:\n             mid=(l+r)//2\n             #\u540e\u534a\u9012\u589e\n             if nums[mid]<nums[r]:\n                 r=mid\n             else:\n                 #\u7c7b\u4f3c\u4e0a\u4e00\u9898\n                 if nums[mid]>nums[r]:\n                     l=mid+1\n                 else:\n                     r-=1\n         if nums[l]<nums[r]:\n             return nums[l]\n         else:\n             return nums[r]", "class Solution:\n     def findMin(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) == 1:\n             return nums[0]\n         minimun = nums[0]\n         for i in range(0, len(nums)-1):\n             if nums[i+1] >= nums[i]:\n                 continue\n             else:\n                 minimun = nums[i+1]\n         return minimun", "class Solution:\n     def findMin(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         min_n = nums[0]\n         for n in nums:\n             if n < min_n:\n                 min_n = n\n         return min_n\n"]