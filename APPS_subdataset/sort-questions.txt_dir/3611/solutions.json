["def ranking(a):\n    a.sort(key=lambda x: (-x[\"points\"], x[\"name\"]))\n    for i, x in enumerate(a):\n        x[\"position\"] = i + 1 if not i or x[\"points\"] < a[i-1][\"points\"] else a[i-1][\"position\"]\n    return a", "def ranking(people):\n    people = people[:]\n    people.sort(key=lambda person: (-person['points'], person['name']))\n    for i, person in enumerate(people):\n        if i and person['points'] == people[i-1]['points']:\n            person['position'] = people[i-1]['position']\n        else:\n            person['position'] = i + 1\n    return people", "def ranking(people):\n    S = sorted(d['points'] for d in people)[::-1]\n    \n    return [{**d, **{'position': S.index(d['points']) + 1}} for d in sorted(people, key=lambda k: (-k['points'], k['name']))]\n", "def ranking(people):\n    x = sorted(sorted(people, key=lambda i: i['name']), key=lambda i: i['points'], reverse=True)\n    for i in range(len(x)):\n        x[i]['position'] = i + 1\n        if i > 0:\n            if x[i-1]['points'] == x[i]['points']:\n                x[i]['position'] = x[i-1]['position']\n    return x", "def ranking(people):\n    ranked = sorted(people, key=lambda p: (-p[\"points\"], p[\"name\"]))\n    scores = [p[\"points\"] for p in ranked]\n    for p in ranked:\n        p[\"position\"] = 1 + scores.index(p[\"points\"])\n    return ranked", "def ranking(people):\n    temp_result = sorted([item for item in people], key=lambda x: (-x['points'], x['name']))\n    for idx, item in enumerate(temp_result):\n        if idx and item['points'] == temp_result[idx - 1]['points']:\n            item['position'] = temp_result[idx - 1]['position']\n        else:\n            item['position'] = idx + 1\n    return temp_result", "from itertools import groupby\n\ndef ranking(people):\n    x = len(str(len(people))); rank = 1\n    people = sorted(people,key=lambda p: p['points'],reverse=True)\n    groups = [[*g[1]] for g in groupby(people,key=lambda p: p['points'])]\n    for g in groups:\n        for p in g: p['position'] = rank\n        rank += len(g)\n    return sorted(people,key=lambda p: str(p['position']).zfill(x)+p['name'])\n", "def ranking(people):\n    new = sorted(people, key=lambda x: (-x['points'], x['name']))\n    for i in new:\n        i['position'] = new.index(i) + 1\n    for i, v in enumerate(new):\n        if i == 0:\n            continue\n        if v['points'] == new[i - 1]['points']:\n            v['position'] = new[i - 1]['position']\n    return new", "ranking=lambda p:p.sort(key=lambda e:(-e['points'],e['name']))or[e.update({'position':[x['points']for x in p].index(e['points'])+1})or e for e in p]", "def ranking(people):\n    pnt = None\n    res = []\n    for c, d in enumerate(sorted(people, key=lambda d: (-d['points'], d['name'])), 1):\n        if pnt != d['points']:\n            pnt = d['points']\n            pos = c\n        res.append(dict({'position':pos}, **d))\n    return res"]