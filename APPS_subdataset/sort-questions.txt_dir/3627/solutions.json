["import numpy as np\n\ndef sort_two_arrays(arr1, arr2):\n    idx2 = np.argsort(arr2, kind='mergesort')\n    idx1 = np.argsort(arr1, kind='mergesort')\n    return [[arr1[i] for i in idx2], [arr2[i] for i in idx1]]", "def sort_two_arrays(*args):\n    sortedIdxRev = [ sorted((v,i) for i,v in enumerate(a)) for a in args[::-1] ]\n    return [ [arr[i] for _,i in idx] for arr,idx in zip(args, sortedIdxRev)]", "def sort_two_arrays(arr1, arr2):\n    indices, arrs = list(range(len(arr1))), (arr1, arr2)\n    return [[arrs[a][i] for i in sorted(indices, key=arrs[1-a].__getitem__)] for a in (0, 1)]\n\n\n# one-liner\n#sort_two_arrays = lambda a1, a2: [[(a1, a2)[a][i] for i in sorted(range(len(a1)), key=(a1, a2)[1-a].__getitem__)] for a in (0, 1)]\n", "def sort_two_arrays(arr1, arr2):\n    copy_arr1 = arr1[:]\n    copy_arr2 = arr2[:]\n    for i in range(len(arr1)-1, 0, -1):\n        for j in range(i):\n            if copy_arr2[j] > copy_arr2[j+1]:\n                copy_arr2[j], copy_arr2[j+1] = copy_arr2[j+1], copy_arr2[j]\n                arr1[j], arr1[j+1] = arr1[j+1], arr1[j]\n    for i in range(len(arr2)-1, 0, -1):\n        for j in range(i):\n            if copy_arr1[j] > copy_arr1[j+1]:\n                copy_arr1[j], copy_arr1[j+1] = copy_arr1[j+1], copy_arr1[j]\n                arr2[j], arr2[j+1] = arr2[j+1], arr2[j]\n    return [arr1, arr2]", "def sort_two_arrays(arr1, arr2):\n    merged = list(zip(arr1,arr2))\n    sorted_by_1 = sorted(merged,key=lambda x:x[0])\n    sorted_by_2 = sorted(merged,key=lambda x:x[1])\n    return [[x[0] for x in sorted_by_2],[x[1] for x in sorted_by_1]]", "from operator import itemgetter\n\ndef sort_two(arr1, arr2):\n    merge_arr = [(arr2[i], n) for i, n in enumerate(arr1)]\n    return [b for a, b in sorted(merge_arr, key=itemgetter(0))]\n\ndef sort_two_arrays(a, b):\n    return [sort_two(a, b), sort_two(b, a)]", "def sort_two_arrays(arr1, arr2):\n    arr1_,arr2_ = [[j,i] for i,j in enumerate(arr1)],[[j,i] for i,j in enumerate(arr2)]\n    s, s1= sorted(arr1_,key=lambda x:(x[0],x[1])),sorted(arr2_,key=lambda x:(x[0],x[1]))\n    return [[arr1[i[1]] for i in s1],[arr2[i[1]] for i in s]]", "def sort_two_arrays(arr1, arr2):\n    k1=sorted((v,i)for i,v in enumerate(arr1))\n    k2=sorted((v,i)for i,v in enumerate(arr2))\n    return[[arr1[i]for v,i in k2],[arr2[i]for v,i in k1]]", "def sort_two_arrays(arr1, arr2):\n    ind = list(range(len(arr1)))\n    a1 = [y for x, i, y in sorted(zip(arr2, ind, arr1))]\n    a2 = [y for x, i, y in sorted(zip(arr1, ind, arr2))]\n    return [a1, a2]\n", "def sort_two_arrays(arr1, arr2):\n    temp2 = [(i, v) for i, v in enumerate(arr2)]\n    sorted_arr2_idx = [x[0] for x in sorted(temp2, key=lambda x: x[1])]\n    temp1 = [(i, v) for i, v in enumerate(arr1)]\n    sorted_arr1_idx = [x[0] for x in sorted(temp1, key=lambda x: x[1])]\n    return [[arr1[sorted_arr2_idx[i]] for i in range(len(arr1))], [arr2[sorted_arr1_idx[i]] for i in range(len(arr1))]]\n\n"]