["n = int(input())\ns = list(map(int,input().split(' ')))\na = []\nfor i in range(max(s)):\n    a.append([])    \nfor i in range(len(s)):\n    a[s[i]-1].append(i)\na = list([x for x in a if x != []])\nif len(a) > 1:\n    for i in range(1,len(a)):\n        if len(a[i]) > 1:\n            s = a[i-1][-1]\n            if s > a[i][0] and s < a[i][-1]:\n                for j in range(1,len(a[i])):\n                    if s < a[i][j]:\n                        a[i] = a[i][j:] + a[i][:j]\n                        break\nt = []\nfor i in a:\n    t += i\nc = 0\nx = t[0] + 1\ni = n-1\nwhile i > 0:\n    if t[i] < t[i-1]:\n        k = t[i] - t[i-1] + n\n    else:\n        k = t[i] - t[i-1]\n    c += k\n    x -= c//n \n    i -= 1\nprint(c+x)\n\n\n\n\n", "def main():\n    input()\n    numbers = tuple(map(int, input().split()))\n    d = []\n    for i in range(len(numbers)):\n        while len(d) <= numbers[i]:\n            d.append([])\n        d[numbers[i]].append(i)\n    dd = [[]]\n    for line in d:\n        if line:\n            dd.append(line)\n    d = dd\n    answer = [None] * len(numbers)\n    for item in d[1]:\n        answer[item] = 1\n    for i in range(1, len(d) - 1):\n        left_maxes = [0]\n        right_maxes = [0]\n        for j in range(len(d[i])):\n            left_maxes.append(max(left_maxes[-1], answer[d[i][j]]))\n            right_maxes.append(max(right_maxes[-1],\n                                   answer[d[i][len(d[i]) - j - 1]]))\n        left_amount = 0\n        for j in range(len(d[i+1])):\n            while left_amount < len(d[i]) and d[i][left_amount] < d[i+1][j]:\n                left_amount += 1\n            answer[d[i+1][j]] = max(left_maxes[left_amount],\n                                    right_maxes[len(d[i]) - left_amount] + 1)\n    res = 0\n    for ans in answer:\n        res += ans\n    print(res)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from collections import deque\nimport heapq\n\nn = int(input())\ncards_help = list(map(int, input().split()))\ncards = [ (cards_help[i],-1*i) for i in range(n) ]\nheapq.heapify(cards)\n\ndraws = 0\nremoved = 0\nwhile cards:\n    prev = -1\n    new_removals = 0\n    current = cards[0]\n    while cards and -1*current[1] > prev:\n        new_removals += 1\n        heapq.heappop(cards)\n        temp_prev = -1*current[1]\n        while cards and cards[0][0] == current[0] and -1*cards[0][1] > prev:\n            current = cards[0]\n            heapq.heappop(cards)\n            new_removals += 1\n        prev = temp_prev\n        current = cards[0] if cards else 0\n    draws += n - removed\n    removed += new_removals\nprint(draws)\n\n\n\n\n# Made By Mostafa_Khaled\n", "from collections import deque\nimport heapq\n \nn = int(input())\ncards_help = list(map(int, input().split()))\ncards = [ (cards_help[i],-1*i) for i in range(n) ]\nheapq.heapify(cards)\n \ndraws = 0\nremoved = 0\nwhile cards:\n    prev = -1\n    new_removals = 0\n    current = cards[0]\n    while cards and -1*current[1] > prev:\n        new_removals += 1\n        heapq.heappop(cards)\n        temp_prev = -1*current[1]\n        while cards and cards[0][0] == current[0] and -1*cards[0][1] > prev:\n            current = cards[0]\n            heapq.heappop(cards)\n            new_removals += 1\n        prev = temp_prev\n        current = cards[0] if cards else 0\n    draws += n - removed\n    removed += new_removals\nprint(draws)\n"]