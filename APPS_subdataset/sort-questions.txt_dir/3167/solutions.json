["def twos_difference(a):\n    s = set(a)\n    return sorted((x, x + 2) for x in a if x + 2 in s)", "def twos_difference(lst): \n    return [(num,num+2) for num in sorted(lst) if num+2 in lst]        \n        \n", "def twos_difference(arr):\n    arr = sorted(arr)\n    b = []\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[j] - arr[i] == 2:\n                b.append((arr[i],arr[j]))\n    return b", "def twos_difference(lst): \n    return [(i, i + 2) for i in sorted(lst) if i + 2 in lst]\n", "def twos_difference(lst): \n    matches = []\n    for n in sorted(lst):\n        if((n + 2) in lst):\n            matches.append((n, n+2))\n    return matches", "def twos_difference(A): \n    L=[]\n    for i in sorted(A):\n        if((i + 2) in A):\n            L.append((i, i+2))\n    return L", "def twos_difference(lst): \n    ende = []\n    for i in lst:\n        if i+2 in lst:\n            ende.append((i, i+2))\n    return sorted(ende)", "def twos_difference(l):\n    r = [(i,i+2) for i in sorted(l) if i+2 in l]\n    return r\n\ntwos_difference = lambda l: [(i,i+2) for i in sorted(l) if i+2 in l]", "def twos_difference(lst):\n    result = []\n    for elem in lst:\n        if elem+2 in lst:\n            result.append((elem, elem+2))\n    result.sort()\n    return result", "def twos_difference(lst):\n    newlist = lst\n    even =[]\n    odd =[]\n    finaleven = []\n    finalodd = []\n    for num in newlist:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    for i in even:\n        for j in even:\n            if i+2 == j:\n                finaleven.append((i,j))\n    for a in odd:\n        for b in odd:\n            if a+2 ==b:\n                finalodd.append((a,b))\n    y = sorted(finaleven)\n    z = sorted(finalodd)\n    return sorted(y + z)", "def twos_difference(lst):\n    s = set(lst)\n    return [(n, n+2) for n in sorted(s) if n+2 in s]", "def twos_difference(lst):\n    new_list = []\n    lst.sort()\n    for ind, val in enumerate(lst):\n        get_check = val + 2\n        try:\n            if lst.index(get_check):\n                new_list.append((val, get_check))\n        except ValueError:\n            continue\n    return new_list", "def twos_difference(lst): \n    return sorted([(x, x+2) for x in lst if x+2 in lst], key=lambda x: (x[0], x[1]))", "import itertools as it\nimport operator as op\n\ndef twos_difference(lst): \n    pairs = (it.combinations(lst, 2))\n    twodiffs = (pair for pair in pairs if abs(op.sub(*pair)) == 2)\n    return sorted([tuple(sorted(pair)) for pair in list(twodiffs)])", "def twos_difference(lst): \n    concat=[]\n    for number in lst:\n        if int(number) + 2 in lst:\n          concat.append((int(number), int(number)+2))\n    return sorted(concat)\n\n            \n        \n", "def twos_difference(a):\n       return sorted([(i,j) for i in a for j in a if i-j==-2])", "def twos_difference(lst): \n    if not lst:\n        return []\n    test = list(range( min(lst), max(lst)+1 ))\n    return [ (test[i], test[i+2]) for i in range(len(test)-2) if all((test[i] in lst, test[i+2] in lst)) ]", "def twos_difference(lst): \n    lst1=[]\n    for i in lst:\n        for j in lst:\n            if i-j==2 or i-j==-2:\n                if (i,j) not in lst1 and (j,i) not in lst1:\n                    if i<j:\n                        lst1.append((i,j))\n                    else:\n                        lst1.append((j,i))\n    lst1.sort()\n    return lst1", "def twos_difference(lst): \n    my_pairs = []\n    for i in range(0, len(lst)):\n        for j in range (0, len(lst)):\n            if lst[j] - lst[i] == 2:\n                my_pairs.append([lst[j],lst[i]])\n    diffs = []\n    for pair in my_pairs:\n        pair.sort()\n        diffs.append(tuple(pair))\n        \n    diffs.sort()\n    return diffs", "def twos_difference(lst): \n    results, memo = [], {}\n    for n in lst:\n        if n in memo:\n            for k in memo[n]:\n                a, b = sorted([k, n])\n                results.append((a, b))\n        memo.setdefault(n + 2, []).append(n)\n        memo.setdefault(n - 2, []).append(n)\n    return sorted(results)"]