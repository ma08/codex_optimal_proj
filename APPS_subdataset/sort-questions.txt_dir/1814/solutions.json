["class Solution:\n     def exclusiveTime(self, n, logs):\n         \"\"\"\n         :type n: int\n         :type logs: List[str]\n         :rtype: List[int]\n         \"\"\"\n         fn_stk = []\n         excl_time = [0] * n\n         prev = 0\n         if n < 1 or not logs:\n             return fn_stk\n         fn, action, ts = logs[0].split(':')\n         fn_stk.append(int(fn))\n         for log in logs[1:]:\n             fn, action, ts = log.split(':')\n             fn, ts = int(fn), int(ts)\n             if action == 'start':\n                 if fn_stk: excl_time[fn_stk[len(fn_stk)-1]] += ts - prev\n                 prev = ts\n                 fn_stk.append(fn)\n             else:\n                 fid = fn_stk.pop()\n                 excl_time[fid] += (ts - prev + 1)\n                 prev = ts + 1\n         return excl_time\n                     \n                 \n                 \n             \n", "class Solution:\n     def exclusiveTime(self, n, logs):\n         \"\"\"\n         :type n: int\n         :type logs: List[str]\n         :rtype: List[int]\n         \"\"\"\n         f,idd,last,res = [],-99999,0,[0]*n;\n         for s in logs:\n             a,time,b = s.split(':');\n             a,b = int(a),int(b)\n             if time == 'start':\n                 f.append(a);\n                 if (idd!=-99999):\n                     res[idd] += b-last;\n                 idd = a;\n                 last = b;\n             else:\n                 f.pop();\n                 res[idd] += b-last+1;\n                 last = b+1;\n                 idd = f[-1] if f else -99999;\n         return res;\n         \n             \n", "class Solution:\n     def exclusiveTime(self, n, logs):\n         \"\"\"\n         :type n: int\n         :type logs: List[str]\n         :rtype: List[int]\n         \"\"\"\n         result = [0 for _ in range(n)]\n         stack = []\n         for log in logs:\n             func, op, time = log.split(\":\")\n             func = int(func)\n             time = int(time)\n             if op == \"start\":\n                 if stack:\n                     func_last, time_last = stack[-1]\n                     result[func_last] += time - time_last\n                 stack.append([func, time])\n             else:\n                 func_last, time_last = stack.pop()\n                 result[func_last] += time - time_last + 1\n                 if stack:\n                     stack[-1][1] = time + 1\n         return result\n", "class Solution:\n     def exclusiveTime(self, n, logs):\n         status_map, spent_time, stack, cur_scope, pre_status, pre_timetamp = {'start': 1, 'end': 0}, {}, [], None, None, 0\n         for log in logs:\n             id, status, timestamp = log.split(':')\n             id, timestamp = int(id), int(timestamp)\n             if cur_scope is not None:\n                 diff = status_map[pre_status] - status_map[status]\n                 spent_time[cur_scope] = spent_time.get(cur_scope, 0) + timestamp - pre_timetamp + diff\n             if status == 'start':\n                 stack.append(cur_scope)\n                 cur_scope = id\n             else:\n                 cur_scope = stack.pop()\n             pre_timetamp, pre_status = timestamp, status\n         return [spent_time.get(id, 0) for id in range(n)]", "class Solution:\n     def exclusiveTime(self, n, logs):\n         \"\"\"\n         :type n: int\n         :type logs: List[str]\n         :rtype: List[int]\n         \"\"\"\n         s=[]\n         a=[0]*n\n         pop=False\n         for log in logs:\n             l=log.split(':')\n             if l[1]=='start' and len(s)>0:\n                 a[s[-1]]+=int(l[2])-prev\n                 s.append(int(l[0]))\n                 prev=int(l[2])\n                 pop=False\n             elif l[1]=='start':\n                 s.append(int(l[0]))\n                 pop=False\n                 prev=int(l[2])\n             elif l[1]=='end':\n                 \n                 a[s[-1]]+=int(l[2])-prev+1\n                 s.pop()\n                 pop=True\n             \n                 prev=int(l[2])+1\n         return a", "class Solution:\n     def exclusiveTime(self, n, logs):\n         \"\"\"\n         :type n: int\n         :type logs: List[str]\n         :rtype: List[int]\n         \"\"\"\n         dic = {}\n         stack = []\n         \n         for log in logs:\n             l = log.split(':')\n             if l[1] == 'start':\n                 if stack:\n                     stack[-1][1] += int(l[2]) - stack[-1][2] # calculate execution time so far\n                     stack[-1][2] = -1 # pause\n                     stack += [int(l[0]), 0, int(l[2])],\n                     \n                 else:\n                     stack += [int(l[0]), 0, int(l[2])],\n                     \n             else:\n                 proc, cumuTime, start = stack.pop()\n                 dic[proc] = dic.get(proc, 0) + (int(l[2]) - start + 1) + cumuTime\n                 if stack:\n                     stack[-1][2] = int(l[2]) + 1 # restart\n                     \n         return [dic[k] for k in sorted(dic)]\n                 \n \n \n         \n", "class Solution:\n     def exclusiveTime(self, n, logs):\n         \"\"\"\n         :type n: int\n         :type logs: List[str]\n         :rtype: List[int]\n         \"\"\"\n         dict={}\n         st=[]\n         ans=[]\n         for i in range(n):\n             dict[i]=0\n         #print(dict)\n         for s in logs:\n             if s.split(':')[1]=='start':\n                 if not st:\n                     st.append([int(s.split(':')[0]),int(s.split(':')[2])])\n                     #print(st)\n                 else:\n                     time=int(s.split(':')[2])-st[-1][1]\n                     dict[st[-1][0]]+=time\n                     #print(dict)\n                     st.append([int(s.split(':')[0]),int(s.split(':')[2])])\n                     #print(st)\n             else:\n                 time=int(s.split(':')[2])-st[-1][1]\n                 dict[st[-1][0]]+=time+1\n                 #print(dict)\n                 st.pop()\n                 #print(st)\n                 if st:\n                     st[-1][1]=int(s.split(':')[2])+1\n                     #print(st)\n \n         for i in range(n):\n             ans+=[dict[i]]\n \n         return ans\n", "class Solution:\n     def exclusiveTime(self, n, logs):\n         \"\"\"\n         :type n: int\n         :type logs: List[str]\n         :rtype: List[int]\n         \"\"\"\n         spent = [0 for i in range(n)]\n         i = 0\n         while len(logs)>2:\n             s1 = logs[i].split(':')\n             s2 = logs[i+1].split(':')\n             if s1[1]=='start' and s2[1]=='end' and s1[0]==s2[0]:\n                 spent[int(s1[0])] += int(s2[2]) - int(s1[2]) + 1\n                 if i>0: spent[int(logs[i-1].split(':')[0])] -= (int(s2[2]) - int(s1[2]) + 1)\n                 if i==0: logs = logs[2:]\n                 else:\n                     logs = logs[0:i] + logs[i+2:]\n                     i -= 1\n             else:\n                 i += 1\n         spent[int(logs[0].split(':')[0])] += int(logs[1].split(':')[2]) - int(logs[0].split(':')[2]) + 1\n         return spent"]