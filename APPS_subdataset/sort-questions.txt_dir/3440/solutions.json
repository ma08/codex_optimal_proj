["def powers(n):\n    return [1<<i for i, x in enumerate(reversed(bin(n))) if x == \"1\"]", "def powers(n):\n    return [2**i for i, d in enumerate(f\"{n:b}\"[::-1]) if d == \"1\"]", "def powers(n):\n    tmp = []\n    i = 0\n    res = []\n    while 2 ** i <= n:\n        tmp.append(2 ** i)\n        i += 1\n    for j in tmp[::-1]:\n        if n >= j:\n            res.append(j)\n            n -= j\n    return res[::-1]", "# return an array of numbers (that are a power of 2)\n# for which the input \"n\" is the sum\ndef powers(n):\n    s = bin(n)[::-1]\n    return [2**i for i, x in enumerate(s) if x == '1']\n", "pows = [2**i for i in range(63, -1, -1)]\n\ndef powers(n):\n    result = []\n    for p in pows:\n        if n >= p:\n            result.append(p)\n            n -= p\n    return result[::-1]", "powers=lambda n:[1<<i for i in range(n.bit_length())if 1<<i&n]", "def powers(n):\n    return [d<<p for p,d in enumerate(map(int,reversed(f'{n:b}'))) if d]", "def powers(n):\n    return [2**i for i, k in enumerate(bin(n)[::-1]) if k == '1']", "def powers(n):\n    return [2**i for i,d in enumerate(bin(n)[::-1]) if d == '1']", "def powers(n):\n    next_small = n.bit_length()\n    total, lst = 0, []\n    while next_small>-1:\n        v=1<<next_small\n        if total + v <= n:\n            total+=v\n            lst.append(v)\n        if total==n:break\n        next_small-=1\n    return lst[::-1]\n"]