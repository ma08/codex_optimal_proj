["def factors(n):\n    sq = [a for a in range(2, n+1) if not n % (a**2)]\n    cb = [b for b in range(2, n+1) if not n % (b**3)]\n    return [sq, cb]", "def factors(n):\n    sq = [i for i in range(2, int(n**0.5) + 2) if n%(i*i)==0]\n    cb = [i for i in range(2, int(n**(1/3) + 2)) if n%(i*i*i)==0]\n    return [sq, cb]", "from itertools import takewhile\n\nsquares = {i**2:i for i in range(2, 500)}\ncubes = {i**3:i for i in range(2, 500)}\nfind = lambda n, D: [v for k,v in takewhile(lambda x: x[0] <= n, D.items()) if not n%k]\n\ndef factors(n):\n    return [find(n, squares), find(n, cubes)]", "from math import ceil\n\ndef factors(n):\n    sq = [i for i in range(2, ceil(n**(1/2)) + 1) if n % i**2 == 0]\n    cb = [i for i in range(2, ceil(n**(1/3)) + 1) if n % i**3 == 0]\n    return [sq, cb]", "def factors(n):\n    sq = lambda x: x**2\n    cb = lambda x: x**3\n    return [[x for x in range(2, n) if n % sq(x) == 0], [x for x in range(2, n) if n % cb(x) == 0]]", "factors=lambda n:[[d for d in range(2,int(n**(1/p)+2))if n%d**p<1]for p in(2,3)]", "def factors(n):\n    return [[k for k in range(2, int(n ** (1/p)) + 1) if not n % (k ** p)] for p in (2, 3)]", "def factors(n):\n    return [[d for d in range(2, int(n ** 0.5) + 1) if n % (d ** 2) == 0],\n            [d for d in range(2, int(n ** (1/3)) + 1) if n % (d ** 3) == 0]]", "def factors(n):\n    divisors = [i for i in range(2, n+1)if n % i == 0]\n    sq = [x for x in divisors if x**2 in divisors]\n    qb = [x for x in divisors if x**3 in divisors]\n    return [sq, qb] or [[], []]", "from functools import reduce\n\ndef factors(n):   \n    a = set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))\n    return [[i for i in range(2, int(n**0.5) + 1) if i**2 in a],[i for i in range(2, int(n**0.5) + 1) if i**3 in a]]\n"]