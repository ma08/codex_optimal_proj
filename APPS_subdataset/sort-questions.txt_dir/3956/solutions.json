["def sort_string(s):\n    a = iter(sorted((c for c in s if c.isalpha()), key=str.lower))\n    return ''.join(next(a) if c.isalpha() else c for c in s)", "import re\n\ndef sort_string(s):\n    sortedChr = iter(sorted(re.sub(r'[^a-zA-Z]', '', s), key=str.lower))\n    return re.sub(r'[a-zA-Z]', lambda m: next(sortedChr), s)", "def sort_string(s):\n    alphas = [x for x in s if x.isalpha()]\n    res = iter(sorted(alphas, key=lambda x: x.lower()))\n    return ''.join(next(res) if x.isalpha() else x for x in s)", "def sort_string(stg):\n    stg_ascii = (char for char in stg if char.isalpha())\n    sorted_ascii = iter(sorted(stg_ascii, key=str.lower))\n    return \"\".join(next(sorted_ascii) if char.isalpha() else char for char in stg)", "def sort_string(s):\n    it = iter(sorted(filter(str.isalpha, s), key=str.lower))\n    return ''.join(next(it) if c.isalpha() else c for c in s)", "from string import ascii_letters\n\nsortable = frozenset(ascii_letters)\n\ndef sort_string(s):\n    sorted_chars = iter(sorted((c for c in s if c in sortable), key=str.lower))\n    return ''.join(next(sorted_chars) if c in sortable else c for c in s)", "sort_string=lambda s: (lambda r: \"\".join(r.pop(0) if e.isalpha() else e for e in s))([e[0] for e in sorted(sorted([[k,i] for i,k in enumerate(s) if k.isalpha()],key=lambda a: a[1]),key=lambda a: a[0].lower())])", "def sort_string(s):\n    it = iter(sorted([(i, x) for i, x in enumerate(s) if x.isalpha()], key=lambda p: (p[1].lower(), p[0])))\n    return ''.join(next(it)[1] if x.isalpha() else x for x in s)", "def sort_string(s):\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    rule12 = list(sorted([x for x in s if x.lower() in alphabet], key=lambda i: alphabet.find(i.lower())))\n    for i, sym in enumerate(s):\n        if sym.lower() not in alphabet:\n            rule12.insert(i, sym)\n    return \"\".join(rule12)\n", "def sort_string(s):\n    a = iter(sorted(filter(str.isalpha, s), key=str.lower))\n    return \"\".join(next(a) if x.isalpha() else x for x in s)"]