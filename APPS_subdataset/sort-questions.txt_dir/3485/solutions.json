["DENSITY = {'H': 1.36, 'W': 1, 'A': 0.87, 'O': 0.8}\n\n\ndef separate_liquids(glass):\n    if not glass:\n        return []\n    column = len(glass[0])\n    liquids = sorted((b for a in glass for b in a), key=lambda c: DENSITY[c])\n    return [liquids[d:d + column] for d in range(0, len(liquids), column)]\n", "def separate_liquids(glass):\n    chain = sorted(sum(glass, []), key = 'OAWH'.index)\n    return [chain[len(level) * i:][:len(level)] for i, level in enumerate(glass)]", "s = '''| Honey   | H | 1.36 |\n| Water   | W | 1.00 |\n| Alcohol | A | 0.87 |\n| Oil     | O | 0.80 |'''\ndef separate_liquids(glass):\n    d = {}\n    for x in s.split('\\n'):\n        res = x.split('|')\n        a,b = [c.strip(' ') for i,c in enumerate(res) if i in (2,3)]\n        d[a] = float(b)\n    l = []\n    for x in glass:\n        l.extend(x)\n    result = iter(sorted(l, key=lambda x: d[x]))\n\n    for x in range(len(glass)):\n        for i in range(len(glass[-1])):\n            glass[x][i] = next(result)\n    return glass", "def separate_liquids(glass):\n    chain = sorted(sum(glass, []), key = 'HWAO'.index)\n    return [[chain.pop() for c in ro] for ro in glass]", "density_order = {key: i for i, key in enumerate(['O','A','W','H'])}\n\ndef separate_liquids(glass):\n    lst_of_liquids = iter(sorted([liquid for row in glass for liquid in row], key=lambda d: density_order[d]))\n    return [[next(lst_of_liquids) for j in range(0, len(glass[0]))] for i in range(0, len(glass))]", "density = {'H':4, 'W':3, 'A':2, 'O':1}\n\n\ndef separate_liquids(glass):\n    glass_ = sorted([x for i in glass for x in i], key=lambda elem: density.get(elem))\n    for row in glass:\n        for i in range(len(row)):\n            row[i] = glass_.pop(0)\n    return glass\n", "def separate_liquids(glass):\n    liquids = [];\n    comparing = { 'H' : 1.36, 'W' : 1.00, 'A' : 0.87, 'O' : 0.80 }\n    for row in glass:\n        liquids.extend(row)\n\n    liquids.sort(key=lambda k: comparing[k], reverse=True)\n    \n    for i in range(len(glass)):\n        for j in range(len(glass[0])):\n            glass[i][j] = liquids.pop()\n\n    return glass"]