["def scoring(array):\n    res = {}\n    \n    for e in array:\n        score = e[\"norm_kill\"] * 100 + e[\"assist\"] * 50 + e[\"damage\"] // 2 +\\\n        e[\"healing\"] + 2 ** e[\"streak\"] + e[\"env_kill\"] * 500\n        \n        res[e[\"name\"]] = score\n    \n    return sorted(res, key=res.get, reverse=True)", "def scoring(array):\n    return [i[\"name\"] for i in sorted(array, key=lambda x: (x[\"norm_kill\"] * 100 + x[\"assist\"] * 50 + x[\"damage\"] * .5 +\n                                                            x[\"healing\"] + 2 ** x[\"streak\"] + x[\"env_kill\"] * 500), reverse=True)]", "values = ((\"norm_kill\", (100).__mul__),\n          (\"assist\", (50).__mul__),\n          (\"damage\", (0.5).__mul__),\n          (\"healing\", (1).__mul__),\n          (\"streak\", (2).__pow__),\n          (\"env_kill\", (500).__mul__))\n\ndef score(player):\n    return sum(f(player[k]) for k,f in values)\n\ndef scoring(array):\n    return [player[\"name\"] for player in sorted(array, key=score, reverse=True)]", "def scoring(array):\n    points= { 'assist': lambda a: a * 50, 'damage': lambda a: a * 0.5, \n              'streak': lambda a: 2**a , 'norm_kill': lambda a: a * 100, \n              'healing': lambda a: a * 1, 'env_kill': lambda a: a * 500 }\n    \n    sum_score = { e['name']:sum(points[k](v) for k, v in  list(e.items()) if isinstance(v , int)) for e in array}\n    \n    return sorted(sum_score, key=sum_score.get, reverse=True)\n    \n", "def score(x):\n    return (x['norm_kill'] * 100\n          + x['assist'] * 50\n          + x['damage'] * 0.5\n          + x['healing'] * 1\n          + 2 ** x['streak']\n          + x['env_kill'] * 500)\n\ndef scoring(array):\n    return [x['name'] for x in sorted(array, key=score, reverse=True)]", "COEFS = ((\"norm_kill\", 100), (\"assist\", 50), (\"damage\", .5), (\"healing\", 1), (\"env_kill\", 500))\n\ndef scoring(arr):\n    return [p['name'] for p in sorted(arr, key=lambda p: -(sum(p[k]*c for k,c in COEFS) + 2**p['streak']) )]", "def scoring(array):\n    scores = []\n    output = []\n    \n    for ply in array:\n        score = (ply['norm_kill'] * 100) + (ply['assist'] * 50) + (ply['damage'] * 0.50) + ply['healing'] + (2 ** ply['streak']) + (ply['env_kill'] * 500)\n        scores.append((ply['name'], score))\n    \n    def getScore(tup):\n        return tup[1]\n    \n    players = sorted(scores, key=getScore, reverse=True)\n\n    for player in players:\n        output.append(player[0])\n        \n    return output", "def scoring(array):\n    res = {e[\"name\"]: e[\"norm_kill\"] * 100 + e[\"assist\"] * 50 + e[\"damage\"] // 2 +\\\n        e[\"healing\"] + 2 ** e[\"streak\"] + e[\"env_kill\"] * 500 for e in array}\n    \n    return sorted(res, key=res.get, reverse=True)", "import operator\n\ncalculations = {\n    'norm_kill': lambda x: x * 100,\n    'assist': lambda x: x * 50,\n    'damage': lambda x: x * .5,\n    'healing': lambda x: x * 1,\n    'streak': lambda x: 2 ** x,\n    'env_kill': lambda x: x * 500\n}\n\n\ndef scoring(array):\n    leaderboard = {}\n    for player in array:\n        score = 0\n        for action, value in player.items():\n            if action in calculations:\n                score += calculations[action](value)\n        leaderboard[player['name']] = score\n    return [name for name, score in sorted(leaderboard.items(), key=operator.itemgetter(1), reverse=True)]", "def scoring(array):\n    score_table = {\"norm_kill\": 100, \"assist\": 50, \"damage\": 0.5, \"healing\": 1, \"env_kill\": 500}\n    scores = [(-sum(p[stat]*v for stat, v in score_table.items()) - 2**p[\"streak\"], i, p[\"name\"]) for i, p in enumerate(array)]\n    return [name for s, i, name in sorted(scores)]"]