["def possible_positions(p):\n    r, c = ord(p[0])-96, int(p[1])\n    moves = [(-2,-1), (-2,1), (-1,-2), (-1,2), (1,-2), (1,2), (2,-1), (2,1)]\n    return [''.join((chr(r+i+96), str(c+j))) for i, j in moves if 1 <= r+i <= 8 and 1 <= c+j <= 8]", "def possible_positions(pos):\n    col = \"abcdefgh\"\n    row = \"12345678\"\n    ret = []\n    dir = [[1,2],[1,-2],[-1,2],[-1,-2],[2,1],[2,-1],[-2,1],[-2,-1]]\n    c, r = pos[0], pos[1]\n    for d in dir:\n        x = col.index(c)+d[0]\n        y = row.index(r)+d[1]\n        if 0<=x<8 and 0<=y<8:\n            ret.append(\"\".join([col[x], row[y]]))\n    return sorted(ret)", "import string\n\nKNIGHT = [(-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1)]\nBOARD_SIZE = 8\n\ndef moves(x, y, directions):\n    for dx, dy in directions:\n        x2, y2 = x + dx, y + dy\n        if 0 <= x2 < BOARD_SIZE > y2 >= 0:\n            yield x2, y2\n\ndef possible_positions(pos):\n    x, y = (string.ascii_lowercase.find(pos[0]), int(pos[1])-1)\n    return [f'{string.ascii_lowercase[x]}{y+1}' for x, y in moves(x, y, KNIGHT)]", "def possible_positions(pos):\n    board = [[r+str(c) for c in range(1,9)] for r in \"abcdefgh\"]\n    x,y = ord(pos[0])-97,int(pos[1])-1\n    return sorted([board[py][px] for py,px in \n              [(x+2,y+1),(x+2,y-1),(x-2,y+1),(x-2,y-1),(x+1,y+2),(x+1,y-2),(x-1,y+2),(x-1,y-2)]\n        if 0 <= px < 8 and 0 <= py < 8])", "def possible_positions(pos):\n    moves = [(-2,-1),(-2,1),(-1,-2),(-1,2),(1,-2),(1,2),(2,-1),(2,1)]\n    res = []\n    for m in moves:\n        let = chr(ord(pos[0])+m[0])\n        num = int(pos[1])+m[1]\n        if let in \"abcdefgh\" and 0<num<9: res.append(let+str(num))\n    return res", "def possible_positions(pos):\n  abc = 'abcdefgh'\n  x, y = abc.index(pos[0]), int(pos[1])\n  l = [[x+2, y-1], [x+2, y+1],[x-2, y-1], [x-2, y+1], [x-1, y+2], [x+1, y+2],[x-1, y-2], [x+1, y-2]]\n  m = sorted(filter(lambda x: 0 <= x[0] <= 7 and 1<= x[1] <= 8, l), key = lambda x: (x[0],x[1]))\n  return list(map(lambda x: ''.join([abc[x[0]],str(x[1])]), m))", "moves = ((-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1))\n\ndef possible_positions(pos):\n    x, y = ord(pos[0]) - 96, int(pos[1])\n    return [f\"{chr(96 + x + i)}{y + j}\" for i, j in moves if -i < x < 9 - i and -j < y < 9 - j]", "to_coords = lambda s: (ord(s[0])-96, int(s[1]))\nfrom_coords = lambda i, j: f\"{chr(i+96)}{j}\"\nL = ((1, 2), (1, -2), (-1, 2), (-1, -2), (2, 1), (2, -1), (-2, 1), (-2, -1))\n\ndef possible_positions(pos):\n    i, j = to_coords(pos)\n    return sorted(from_coords(i+k, j+l) for k,l in L if 0 < i+k <= 8 and 0 < j+l <= 8)", "possible_positions=lambda p,m='abcdefgh':(lambda x,y:sorted([m[e[0]+x]+str(e[1]+y)for e in[(-2,1),(-1,2),(1,2),(2,1),(-2,-1),(-1,-2),(1,-2),(2,-1)]if 8>e[0]+x>=0and 9>e[1]+y>0]))(m.find(p[0]),int(p[1]))", "def possible_positions(pos):\n    rows, cols = 'abcdefgh', '12345678'\n\n    row = rows.index(pos[0])\n    col = cols.index(pos[1])\n\n    M = [(a, b) for a in [1, -1] for b in [2, -2]]\n    P = [(row + rr, col + cc) for rr, cc in M + [e[::-1] for e in M]]\n                \n    return sorted(rows[r] + cols[c] for r, c in P  if 0 <= r <= 7 and 0 <= c <= 7)"]