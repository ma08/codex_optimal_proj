["from collections import defaultdict\nSQUARES = [x**2 for x in range(1, 3163)]\nDIGITS  = defaultdict(int)\nfor sqr in SQUARES:\n    DIGITS[''.join(sorted(str(sqr)))] += 1\n\ndef sort_by_perfsq(arr):\n    return sorted(arr, key=lambda n: (-DIGITS[''.join(sorted(str(n)))], n))", "from itertools import permutations\n\ndef sort_by_perfsq(lst):\n    return sorted(lst, key=perfsq)\n\ndef perfsq(n):\n    perm = {int(\"\".join(p)) for p in permutations(str(n))}\n    return sum(-1 for n in perm if n**0.5 % 1 == 0), n", "from itertools import permutations\n\nsquare = lambda p: not int(''.join(p))**0.5%1\ncount = lambda num: sum(map(square, set(permutations(str(num)))))\n\ndef sort_by_perfsq(arr):\n    return sorted(arr, key=lambda x: (-count(x), x))", "from itertools import permutations\n\ndef sort_by_perfsq(a):\n    return [x for _, x in sorted([(-sum(1 for c in set(permutations(str(n))) if (float(''.join(c)) ** 0.5).is_integer()), n) for n in a])]", "from math import sqrt\nfrom itertools import permutations\n\ndef sort_by_perfsq(a):\n    return sorted(a, key = lambda n: (-sum(str(sqrt(int(''.join(p))))[-2:] =='.0' for p in set(permutations(str(n), len(str(n))))), n))", "def sort_by_perfsq(arr):\n    \n    def get_pos_nums(digs, currn=''):\n        if len(digs) == 1:\n            nums.append(currn + digs[0])\n        \n        for d in digs:\n            locd = digs[:]\n            locd.remove(d)\n            get_pos_nums(locd, currn + d)\n            \n    count_sq = []\n    \n    for x in arr:\n        count_sq.append([x, 0])\n\n        digs = [d for d in str(x)]\n        nums = []\n        get_pos_nums(digs)\n        nums = set(map(int, nums))\n\n        for n in nums:\n            if n ** 0.5 % 1 == 0:\n                count_sq[-1][1] += 1\n                \n    count_sq.sort()\n    count_sq.sort(key=lambda num: num[1], reverse=True)\n    return [num[0] for num in count_sq]\n", "from itertools import permutations\n\ndef sort_by_perfsq(arr):\n    isSquare=lambda n: int(n**0.5) == n**0.5\n    return sorted(arr, key=lambda n: (sum( isSquare(int(''.join(nS))) for nS in set(permutations(str(n))) ), -n), reverse=True )"]