["import math\nt = eval(input())\nwhile(t > 0):\n h,s = input().split()\n h = int(h)\n s = int(s)\n if(((h*h*h*h) - (16*s*s)) < 0):\n  print(\"-1\")\n else:\n  B = (math.sqrt((h*h) + math.sqrt((h*h*h*h) - (16*s*s))))/math.sqrt(2)\n  P = (2*s)/B\n  if(B > P):\n   print('{0:.6f}'.format(P),'{0:.6f}'.format(B),'{0:.6f}'.format(h))\n  else:\n   print('{0:.6f}'.format(B),'{0:.6f}'.format(P),'{0:.6f}'.format(h))\n t = t-1", "\nimport math\nfor i in range(int(input())):\n h,a=list(map(int,input().split()))\n cv=(4*a)/(h**2)\n if (cv > 1) :\n  print(-1)\n else:\n  thita=(math.asin(cv))/2\n  ratio=math.tan(thita)\n  #ratio=1/ratio\n  #print ratio\n  hh=math.sqrt(((2*a)/ratio))\n  b=(2*a)/hh\n  m=max(b,hh)\n  s=min(b,hh)\n  print(\"%0.5f %0.5f %0.5f\"%(s,m,h))\n  \n \n \n \n \n", "# cook your code here\nfrom math import sqrt\nfrom math import pow\n\nt=int(input())\n\nwhile(t>0):\n t = t-1\n h, s = list(map(int, input().split()))\n s2 = pow(s, 2)\n h4 = pow(h, 4)\n s216 = s2*16\n sq2 = h4-s216\n if(sq2<0):\n  print(\"-1\")\n  continue\n sq = sqrt(sq2)\n hpsq = pow(h, 2) + sq\n a2 = hpsq/2\n a = sqrt(a2)\n b2 = pow(h, 2) - a2\n b = sqrt(b2)\n if(a<b):\n  print(str(a) +\" \",str(b) +\" \",str(h) +\" \")\n else:\n  print(str(b) +\" \",str(a) +\" \",str(h) +\" \")", "t=int(input())\nfor i in range(t):\n h,s=list(map(int,input().split()))\n d=((h**4)-(16*s*s))\n if d<0:\n  print(\"-1\")\n else:\n  d=d**0.5\n  r1=((h**2)+d)/2\n  r2=((h**2)-d)/2\n  if r1<0 or r2<0:\n   print(\"-1\")\n  else:\n   arr=[]\n   r1=r1**0.5\n   r2=r2**0.5\n   arr.append(r1)\n   arr.append(r2)\n   arr.append(h)\n   arr.sort()\n   print('%.6f'%arr[0],'%.6f'%arr[1],'%.6f'%arr[2])", "t = int(input())\nfor test in range(t):\n h,s = list(map(int,input().split()))\n if h**2>=4*s:\n  x = (h**2+4*s)**0.5\n  y = (h**2-4*s)**0.5\n  res = list(map(float,sorted([h,(x+y)/2,(x-y)/2])))\n  print(\"%.5f %.5f %.5f\" % (res[0],res[1],res[2]))\n else:\n  print(-1)", "\nimport math\n\ntt = int(input())\nfor i in range(tt):\n h, s = list(map(int, input().split()))\n a = h**2 + 4*s\n b = math.sqrt(a)\n u = h**2 - 4*s\n if u < 0:\n  print(-1)\n  continue\n\n k = (b + math.sqrt(h**2 - 4*s))/2 \n m = b - k\n g = [h,k,m]\n g.sort()\n print(' '.join(map(str, g)))", "from math import sqrt,pow\n\nt = int(input())\nwhile t>0:\n h,s = list(map(int,input().split())) \n if pow(h,2) + 4*s>=0 and pow(h,2) - 4*s>=0:\n  a = (sqrt(pow(h,2) + 4*s) + sqrt(pow(h,2) - 4*s))/2\n  b = sqrt(pow(h,2) + 4*s) - a\n  if a>0 and b>0:\n   c = []\n   c.append(a)\n   c.append(b)\n   c.append(h)\n   c.sort()\n   for i in c:\n    print(i, end=' ')\n   print(\" \")\n  else:\n   print(-1, end=' ')\n else:\n  print(-1)\n t-=1", "import math\nt=eval(input())\nwhile t>0:\n t-=1\n h,s = list(map(int,input().split()))\n try:\n  bplush = math.sqrt(h*h+4*s)\n  bminush = math.sqrt(h*h-4*s)\n  base = (bplush + bminush)/2\n  height =(bplush-bminush)/2\n  a=[base,height,h]\n  a.sort()\n  for i in a:\n   print(float(i), end=' ')\n  print() \n except:\n  print(\"-1\")", "import math\nfrom decimal import *\nT = int(input())\nwhile T>0:\n h,a = list(map(int,input().split()))\n x = h*h*h*h - 16*a*a\n if x<0:\n  print(-1)\n else :\n  y = 0.5*h*h - 0.5*math.sqrt(x)\n  if y<0:\n   print(-1)\n  else:\n   s = math.sqrt(0.5*h*h - 0.5 * math.sqrt(x))\n   b = h*h - s*s\n   ans=[]\n   ans.append(s)\n   ans.append(math.sqrt(b))\n   ans.append(h)\n   new_list = []\n   for item in ans:\n    new_list.append(float(item))\n   ans.sort()\n   print(format(ans[0],'.6f'),format(ans[1],'.6f'),format(ans[2],'.6f'))\n   #print ans[0],ans[1],ans[2]\n T-=1", "from math import sqrt\nfrom sys import stdin\n\ndef solution( h, s ):\n sqrt1 = h ** 4 - 16 * s ** 2\n if( sqrt1 < 0 ):\n  return False\n sqrt2 = h**2 - sqrt( sqrt1 )\n if( sqrt2 < 0 ):\n  return False;\n sqrt2 = sqrt( sqrt2 / 2 )\n sqrt3 = h**2 + sqrt( sqrt1 )\n sqrt3 = sqrt( sqrt3 / 2 )\n return [ sqrt2, sqrt3 ]\n\n\nt = int( stdin.readline() )\nwhile t > 0:\n t -= 1\n h, s = list(map( int, stdin.readline().split() ))\n answer = solution( h,s )\n if( answer == False ):\n  print(-1)\n else:\n  answer.append( h )\n  answer = sorted( answer )\n  for i in answer:\n   print(i, end=' ')\n  print()\n", "import math\n\nt=int(input())\n# print t\nwhile(t>0):\n h,s = list(map(int, input().split()))\n check = h*h-4*s\n if(h*h>=4*s):\n  det = math.sqrt(h*h*h*h-16*s*s)\n  a=(h*h+det)/2\n  a=math.sqrt(a)\n  b=(h*h-det)/2\n  b=math.sqrt(b)\n  if(a<b):\n   print(\"%f %f %f\" %(a,b,h))\n  else:\n   print(\"%f %f %f\" %(b,a,h))\n else:\n  print(\"-1\")\n t-=1\n\n", "import cmath\nfrom math import ceil, floor, sqrt\ndef float_round(num, places = 0, direction = floor):\n return direction(num * (10**places)) / float(10**places)\nt=int(input())\na=float(1)\nfor i in range(t):\n s=list(map(int,input().split()))\n b=float(pow(s[0],2))\n c=float(4*pow(s[1],2))\n d = float((b**2) - (4*a*c))\n # find two solutions\n if(d==0):\n  sol1 = abs((b-cmath.sqrt(d))/(2*a))\n  # print sol1\n  #sol2 = (b+cmath.sqrt(d))/(2*a)\n  m=[]\n  m.append(float_round(sqrt(sol1),6,round))\n  m.append(float_round(sqrt(b-sol1),6,round))\n  m.append(float_round(sqrt(b),6,round))\n  m.sort()\n  for p in range(2):\n   print(m[p], end=' ')\n  print(m[2])\n  # print float_round(sqrt(sol1),6,round),float_round(sqrt(b-sol1),6,round\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0),float_round(sqrt(b),6,round)\n elif(d>0):\n  sol1 = abs((b-cmath.sqrt(d))/(2*a))\n  sol2 = abs((b+cmath.sqrt(d))/(2*a))\n  # print abs(sol1),sol2\n  m=[]\n  m.append(float_round(sqrt(sol1),6,round))\n  m.append(float_round(sqrt(sol2),6,round))\n  m.append(float_round(sqrt(b),6,round))\n  m.sort()\n  for p in range(2):\n   print(m[p], end=' ')\n  print(m[2])\n else:\n  print(-1)", "# your code goes here\nimport math\nt=eval(input())\nfor i in range(t):\n b=[]\n #c=[]\n h,s=list(map(int,input().split()))\n a=math.pow(h,4)-16*s*s\n if(a<0):\n  print('-1')\n else:\n  ans=math.sqrt(a)\n  answe=(h*h+ans)/2\n  answe2=(h*h-ans)/2\n  #print answe\n  #print answe2\n  if(answe>0):\n   b.append(math.sqrt(answe))\n   b.append((2*s)/b[0])\n  \"\"\" \n     if(answe2>0):\n      c.append(math.sqrt(answe2))\n      c.append((2*s)/c[0])\n     \"\"\" \n  b.sort()\n  print(str(b[0])+\" \"+str(b[1])+\" \"+str(h))\n", "import math\ntry:\n t=eval(input())\nexcept EOFError:\n t=0\nwhile(t):\n try:\n  h,s=list(map(int,input().split()))\n except EOFError:\n  h=0\n  s=0\n z=(h**4)-(4*(4*(s**2)))\n if(z<0):\n  print(-1)\n else:\n  z=math.sqrt(z)\n  z=(h**2)+z\n  z=z/2\n  z=math.sqrt(z)\n  y=2*s\n  try:\n   y=y/z\n  except ZeroDivisionError:\n   y=0\n  if(z>y):\n   a=y\n   b=z\n  else:\n   a=z\n   b=y\n  h=h*1.0\n  print(a,b,h)\n t=t-1\n", "from math import sqrt\nt=int(input())\nfor qq in range(t):\n h, s = list(map(float, input().split()))\n h2 = h**2\n h4 = h**4\n s2 = s**2\n D = h4 - 16.0000000000*s2\n if D < 0:\n  print(-1)\n else:\n  D = sqrt(D)\n  r1 = h2 + D\n  r1 /= float(2.0)\n\n  r2 = h2 - D\n  r2 /= float(2.0)\n\n  #print r1, r2\n\n  if r1 > 0.000000000:\n   a = r1\n  elif r2 > 0.0:\n   a = r2\n  else:\n   print(-1)\n   continue\n\n  a = sqrt(a)\n\n  b = 2.0*s\n  b /= a\n\n  ans = [a, b, h]\n  ans.sort()\n\n  print(\"%.20f %.20f %.20f\" % (ans[0], ans[1], ans[2]))", "import numpy as np\nti = eval(input())\nt = int(ti)\nwhile t>0:\n p = 0\n hi,si = input().split(\" \")\n h = float(hi)\n #si = raw_input()\n s = float(si)\n r = h/2;\n alt = (2*s/h)\n \n \n if ( (r*r) - (alt*alt)) >= 0:\n  c = np.sqrt( (r*r) - (alt*alt))\n else :\n  p = 1\n  #goto last\n e1 = r - c\n e2 = r + c\n #print p,\"kukukuku\"\n \n if (p == 1)|(e2*h >= 0):\n  a = np.sqrt(e2 * h)\n else:\n  p = 1\n if (p == 1)|(e1*h >= 0):    \n  b = np.sqrt(e1 * h)\n else:\n  p = 1\n  \n  \n #last\n if p == 0:\n  print(b,a,h)\n else:\n  print(-1)\n #print h,s,r,alt,c,e1,e2,a,b\n t -= 1\n", "from math import sqrt\nfor p in range(int(input())):\n h,s=list(map(int,input().split()))\n x=h**4-16*(s**2)\n if x<0:\n  print(-1)\n else:\n  a=(h**2+sqrt(x))/2\n  if(a<0):\n   print(-1)\n  else:\n   len2=sqrt(h**2-a)\n   len1=sqrt(a)\n   if len1>len2:\n    print(len2,len1,h)\n   else:\n    print(len1,len2,h)"]