["class Solution:\n     def searchMatrix(self, matrix, target):\n         \"\"\"\n         :type matrix: List[List[int]]\n         :type target: int\n         :rtype: bool\n         \"\"\"\n         m = len(matrix)\n         if m == 0:\n             return False\n         n = len(matrix[0])\n         if n == 0:\n             return False\n         row, col = 0, n-1\n         while row < m and col >= 0:\n             if matrix[row][col] == target:\n                 return True\n             elif matrix[row][col] > target:\n                 col -= 1\n             else:\n                 row += 1\n         return False\n", "class Solution:\n     def searchMatrix(self, matrix, target):\n         \"\"\"\n         :type matrix: List[List[int]]\n         :type target: int\n         :rtype: bool\n         \"\"\"\n         if not matrix or not matrix[0]:\n             return False        \n         row, col = 0, len(matrix[0]) - 1\n         while (row < len(matrix) and  -1 < col):\n             if matrix[row][col] == target:\n                 return True\n             if matrix[row][col] < target:\n                 row += 1\n             else:\n                 col -= 1\n         return False", "def subtable(fromX, toX, fromY, toY, table, value):\n \t# smalltable = table[fromX:toX, fromY:toY]\n \t# midpoint = math.floor(len(smalltable) / 2)\n \t# if len(smalltable[0]) == 1:\n \t# \tif smalltable[0] == value:\n \t# \t\treturn (fromX, fromY)\n \t# \telse:\n \t# \t\treturn (-1, -1)\n \t# if subtable[midpoint][midpoint] == value:\n \t# \treturn (midpoint, midpoint)\n \t# if subtable[midpoint][midpoint] < value:\n \t# \tbottomRight = subtable(math.floor(0), len(smalltable[0]), math.floor((fromY + toY) / 2), len(smalltable), table, value)\n \t# if subtable[midpoint][midpoint] > value:\n \t# \ttopLeft = subtable(0, math.floor((fromX + toX) / 2), 0, math.floor((fromY + toY) / 2), table, value)\n \tmidpointX = (fromX + toX)//2\n \tmidpointY = (fromY + toY)//2\n \tif (toX - fromX < 2 and toY - fromY < 2):\n \t\tif fromX == toX or fromY == toY:\n \t\t\treturn (-1,-1)\n \t\tif table[fromX][fromY] == value:\n \t\t\treturn (fromY, fromX)\n \t\telse:\n \t\t\treturn (-1, -1)\n \tif table[midpointX][midpointY] == value:\n \t\treturn (midpointY, midpointX)\n \ttopLeft = (-1, -1)\n \tif table[midpointX][midpointY] > value:\n \t\ttopLeft = subtable(fromX, midpointX, fromY, midpointY, table, value)\n \tbottomRight = (-1, -1)\n \tif table[midpointX][midpointY] < value:\n \t\tbottomRight = subtable(midpointX, toX, midpointY, toY, table, value)\n \ttopRight = subtable(midpointX, toX, fromY, midpointY, table, value)\n \tbottomLeft = subtable(fromX, midpointX, midpointY, toY, table, value)\n \tif topLeft != (-1,-1):\n \t\treturn topLeft\n \telif bottomRight != (-1,-1):\n \t\treturn bottomRight\n \telif topRight != (-1, -1):\n \t\treturn topRight\n \telif bottomLeft != (-1, -1):\n \t\treturn bottomLeft\n \telse:\n \t\treturn (-1, -1)\n \n def find(table, val):\n \t#replace the body of this function to return the index of 'val' within the 2D array 'table' as a tuple of integers\n \t#if 'val' appears nowhere in 'table' then return '(-1, -1)'\n \t# midpoint = math.floor(len(table) / 2)\n \t# print(table)\n \t# if len(table[0]) == 0:\n \t# \treturn (-1,-1)\n \t# if table[midpoint][midpoint] == val:\n \t# \treturn (midpoint, midpoint)\n \t# else:\n \t# \tif table[midpoint][midpoint] < val:\n \t# \t\treturn find(table[:(midpoint), :(midpoint + 1)], val)\n \t# \tif table[midpoint][midpoint] > val:\n \t# \t\treturn find(table[midpoint:, (midpoint+1):], val)\n     if len(table) == 0 or len(table[0]) == 0:\n         return (-1, -1)\n     else:\n         return subtable(0, len(table), 0, len(table[0]), table, val)\n \n class Solution:\n     def searchMatrix(self, matrix, target):\n         if find(matrix, target) == (-1, -1):\n             return False\n         else:\n             return True\n         ", "class Solution:\n     def searchMatrix(self, matrix, target):\n         \"\"\"\n         :type matrix: List[List[int]]\n         :type target: int\n         :rtype: bool\n         \"\"\"\n         return self.search(matrix, target)\n     \n     def use_binary_search(self, matrix, target):\n         if not matrix or not matrix[0]:\n             return False\n         m, n = len(matrix), len(matrix[0])\n         \n         for i in range(m):\n             if self.binary_search(matrix, target, i, False):\n                 return True\n         \n         for i in range(n):\n             if self.binary_search(matrix, target, i, True):\n                 return True\n         \n         return False\n     \n     def binary_search(self, matrix, target, start, vertical):\n         lo = 0\n         hi = len(matrix) if vertical else len(matrix[0])\n         \n         while lo < hi:\n             mid = lo + (hi - lo) // 2\n             val = matrix[mid][start] if vertical else matrix[start][mid]\n             if val == target:\n                 return True\n             elif val < target:\n                 lo = mid + 1\n             else:\n                 hi = mid\n         return False\n         \n     def search(self, matrix, target):\n         # O(m+n)\n         if not matrix or not matrix[0]:\n             return False\n         m, n = len(matrix), len(matrix[0])\n         row, col = m - 1, 0\n         while row >= 0 and col < n:\n             val = matrix[row][col]\n             if val == target:\n                 return True\n             elif val > target:\n                 row -= 1\n             else:\n                 col += 1\n         return False\n", "class Solution:\n     def searchMatrix(self, matrix, target):\n         \"\"\"\n         :type matrix: List[List[int]]\n         :type target: int\n         :rtype: bool\n         \"\"\"\n         if matrix is None or len(matrix) == 0 or len(matrix[0]) == 0:\n             return False\n         row, col = 0, len(matrix[0]) - 1\n         \n         while (row < len(matrix) and col >=0):\n             if matrix[row][col] == target:\n                 return True\n             elif matrix[row][col] < target:\n                 row += 1\n             else:\n                 col -= 1\n         return False\n", "class Solution:\n     def searchMatrix(self, matrix, target):\n         \"\"\"\n         :type matrix: List[List[int]]\n         :type target: int\n         :rtype: bool\n         \"\"\"\n         if not matrix:\n             return False\n         m, n = len(matrix), len(matrix[0])\n         row, col = m-1, 0\n         while row >= 0 and col < n:\n             if matrix[row][col] == target:\n                 return True\n             elif matrix[row][col] < target:\n                 col += 1\n             else:\n                 row -= 1\n         return False", "class Solution:\n     def searchMatrix(self, matrix, target):\n         \"\"\"\n         :type matrix: List[List[int]]\n         :type target: int\n         :rtype: bool\n         \"\"\"\n         if len(matrix) == 0 or len(matrix[0]) == 0:\n             return False\n         m = 0\n         n = len(matrix[0]) - 1\n         while m < len(matrix) and n >= 0:\n             if target == matrix[m][n]:\n                 return True\n             elif target < matrix[m][n]:\n                 n -= 1\n             elif target > matrix[m][n]:\n                 m += 1\n         return False", "class Solution:\n     def searchMatrix(self, matrix, target):\n         \"\"\"\n         :type matrix: List[List[int]]\n         :type target: int\n         :rtype: bool\n         \"\"\"\n         if len(matrix)==0:\n             return False\n         minrow, maxcol = 0, len(matrix[0])-1\n         \n         while(minrow<len(matrix) and maxcol>=0):\n             if target == matrix[minrow][maxcol]:\n                 return True\n             elif target < matrix[minrow][maxcol]:\n                 maxcol-=1\n             else:\n                 minrow+=1\n         return False", "class Solution:\n     def searchMatrix(self, matrix, k):\n         \"\"\"\n         :type matrix: List[List[int]]\n         :type target: int\n         :rtype: bool\n         \"\"\"\n         for i in range(len(matrix)):\n             for j in range(len(matrix[i])):\n                 if k < matrix[i][j] or k > matrix[i][len(matrix[i])-1]:\n                     break\n                 elif matrix[i][j] == k:\n                     return True\n         return False\n                 \n          \n", "class Solution:\n     def searchMatrix(self, matrix, target):\n         \"\"\"\n         :type matrix: List[List[int]]\n         :type target: int\n         :rtype: bool\n         \"\"\"\n         #method1: brute-force o(n*m)\n         if not matrix:\n             return(False)\n         row = len(matrix)\n         col = len(matrix[0])\n         for i in range(row):\n             for j in range(col):\n                 if matrix[i][j] == target:\n                     return(True)\n         return(False)", "class Solution(object):\n     def searchMatrix(self, matrix, target):\n         \"\"\"\n         :type matrix: List[List[int]]\n         :type target: int\n         :rtype: bool\n         \"\"\"\n         if not matrix or not matrix[0]:\n             return False\n         \n         m = len(matrix)\n         n = len(matrix[0])\n         cols = [[0] * m for _ in range(n)]\n         for i in range(n):\n             for j in range(m):\n                 cols[i][j] = matrix[j][i]\n         \n         for i in range(m):\n             low, high = matrix[i][0], matrix[i][-1]\n             if low <= target <= high:\n                 x = self.search(matrix[i], target)\n                 if target == matrix[i][x] or (0 < x <= len(matrix[i]) and target == self.search(cols[x], target)):\n                     return True\n                  \n         return False\n     \n     def search(self, arr, target):\n         low = 0\n         high = len(arr)\n         while low < high:\n             mid = (low + high) // 2\n             if arr[mid] < target:\n                 low = mid+1\n             elif arr[mid] == target:\n                 return mid\n             else:\n                 high = mid\n         \n         return low\n     # 1 2 4 5 6\n", "class Solution:\n     def searchMatrix(self, matrix, target):\n         ans = False\n         if matrix == [[]] or matrix == []:\n             return ans\n         ans = self.check(matrix, target, ans)\n         return ans\n     def check(self, matrix, target, ans):\n         if ans == True:\n             return ans\n         for i in range(min(len(matrix[0]), len(matrix))):\n             #print(matrix[i][i], target)\n             if target == matrix[i][i]:\n                 #print('win')\n                 ans = True\n                 return ans\n             elif i + 1 != min(len(matrix[0]), len(matrix)) and target > matrix[i][i] and target < matrix[i + 1][i + 1]:\n                 temp = []\n                 for x in range(i + 1):\n                     temp.append(matrix[x][i:])\n                 #print(temp)\n                 ans = self.check(temp, target, ans)\n                 temp = []\n                 for x in range(len(matrix) - i):\n                     temp.append(matrix[i + x][:i+1])\n                 #print(temp)\n                 ans = self.check(temp, target, ans)\n             else:\n                 continue\n         if target > matrix[min(len(matrix[0]), len(matrix)) - 1][min(len(matrix[0]), len(matrix)) - 1]:\n             if len(matrix[0])  == len(matrix):\n                 return ans\n             elif len(matrix[0]) > len(matrix):\n                 temp = []\n                 for x in range(len(matrix)):\n                     temp.append(matrix[x][len(matrix):])\n                 print(temp)\n                 ans = self.check(temp, target, ans)\n             else:\n                 temp = []\n                 for x in range(len(matrix) - len(matrix[0])):\n                     temp.append(matrix[len(matrix[0]) + x])\n                 #print('here')\n                 #print(temp)\n                 ans = self.check(temp, target, ans)\n         return ans\n         \"\"\"\n         :type matrix: List[List[int]]\n         :type target: int\n         :rtype: bool\n         \"\"\"\n", "class Solution:\n     def searchMatrix(self, matrix, target):\n         \"\"\"\n         :type matrix: List[List[int]]\n         :type target: int\n         :rtype: bool\n         \"\"\"\n         index_x = 0\n         index_y = 0\n         m = len(matrix)\n         if m == 0:\n             return False\n         n = len(matrix[0])\n         if n == 0:\n             return False\n         for num in range(n):\n             if target == matrix[0][num]:\n                 return True\n             if target < matrix[0][num]:\n                 index_x = num\n                 break\n             index_x = n\n             \n         for num in range(m):\n             if target == matrix[num][0]:\n                 return True\n             if target < matrix[num][0]:\n                 index_y = num\n                 break\n             index_y = m\n             \n         for x in range(index_x):\n             for y in range(index_y):\n                 if matrix[y][x] == target:\n                     return True\n         \n         return False", "class Solution:\n     def searchMatrix(self, matrix, target):\n         \"\"\"\n         :type matrix: List[List[int]]\n         :type target: int\n         :rtype: bool\n         \"\"\"\n         \n         def helper(matrix, target, i_base=0, j_base=0):\n         \n             if len(matrix) == 0:\n                 return False\n \n             if len(matrix) < 4 and len(matrix[0]) < 4:\n                 for i in range(0, len(matrix)):\n                     for j in range(0, len(matrix[0])):\n                         if matrix[i][j] == target:\n                             print((\"(\" + str(i_base+i) + \",\" + str(j_base+j) + \")\"))\n                             return True\n                 return False\n \n             else:\n                 cmp = matrix[len(matrix)//2][len(matrix[0])//2]\n                 \n                 if cmp == target:\n                     print((\"(\" + str(i_base + len(matrix)//2) + \",\" + str(j_base + len(matrix[0])//2) + \")\"))\n                     return True\n                 \n                 quadrant2 = []\n                 quadrant3 = []\n \n                 for i in range(0, len(matrix)//2):\n                     quadrant2.append(matrix[i][len(matrix[0])//2+1:])\n \n                 for i in range(len(matrix)//2+1, len(matrix)):\n                     quadrant3.append(matrix[i][0:len(matrix[0])//2])\n \n                 if target <= cmp:\n                     quadrant1 = []\n \n                     for i in range(0, len(matrix)//2+1):\n                         quadrant1.append(matrix[i][0:len(matrix[0])//2+1])\n \n                     # print(\"1\")\n                     # print(quadrant1)\n                     # print(quadrant2)\n                     # print(quadrant3)\n                     # print()\n \n                     return helper(quadrant1, target, i_base, j_base) or helper(quadrant2, target, i_base, j_base+len(matrix[0])//2+1) or helper(quadrant3, target, i_base+len(matrix)//2+1, j_base)\n \n \n                 else:\n                     quadrant4 = []\n \n                     for i in range(len(matrix)//2, len(matrix)):\n                         quadrant4.append(matrix[i][len(matrix[0])//2:])\n \n                     # print(\"2\")\n                     # print(quadrant2)\n                     # print(quadrant3)\n                     # print(quadrant4)\n                     # print()\n \n                     return helper(quadrant4, target, i_base+len(matrix)//2, j_base+len(matrix[0])//2) or helper(quadrant2, target, i_base, j_base+len(matrix[0])//2+1) or helper(quadrant3, target, i_base+len(matrix)//2+1, j_base)\n                 \n \n         out = helper(matrix, target)\n         if out == False:\n             print(\"(-1, -1)\")\n             \n         return out\n                     \n             \n", "class Solution:\n     def searchMatrix(self, matrix, target):\n         \"\"\"\n         :type matrix: List[List[int]]\n         :type target: int\n         :rtype: bool\n         \"\"\"\n         height = len(matrix)\n         if height == 0:\n             return False\n         width = len(matrix[0])\n         def search(x, y):\n             if x < 0 or y < 0 or x >= height or y >= width:\n                 return False\n             current = matrix[x][y]\n             if current == target:\n                 return True\n             if current == None:\n                 return False\n             matrix[x][y] = None\n             if current > target:\n                 return search(x, y-1) or search(x-1, y)\n             if current < target:\n                 return search(x, y+1) or search(x+1, y)\n         return search(0, 0)\n         \n"]