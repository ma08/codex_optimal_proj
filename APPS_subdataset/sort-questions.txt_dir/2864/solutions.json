["def merge_arrays(a, b):\n    out = []\n    for n in a+b:\n        if n in a and n in b:\n            if a.count(n) == b.count(n):\n                out.append(n)\n        else:\n            out.append(n)\n    return sorted(set(out))", "from collections import Counter\n\ndef merge_arrays(a, b):\n    ca, cb = Counter(a), Counter(b)\n    return [ k for k in sorted(ca.keys() | cb.keys()) if (k in ca)+(k in cb) == 1 or ca[k] == cb[k] ]", "merge_arrays=lambda a,b:sorted([x for x in set(a+b) if a.count(x)==b.count(x) or a.count(x)*b.count(x)==0])", "def merge_arrays(a, b):\n  return sorted(n for n in set(a+b) if (n in a) != (n in b) or a.count(n) == b.count(n))", "def merge_arrays(a, b):\n    list =[]\n    for i in a+b :\n        if (a.count(i)==b.count(i) or b.count(i)==0 or a.count(i)==0) and i not in list:\n            list.append(i)\n    return sorted(list)", "def merge_arrays(a, b):\n  result = []\n  currA = 0\n  currB = 0\n  while currA < len(a) and currB < len(b):\n    if a[currA] < b[currB]:\n        # Check that we are not adding a duplicate\n        if not result or result[-1] != a[currA]:\n          result.append(a[currA])\n        currA += 1\n    elif b[currB] < a[currA]:\n        # Check that we are not adding a duplicate\n        if not result or result[-1] != b[currB]:\n          result.append(b[currB])\n        currB += 1\n    else:\n        val = a[currA]\n        # Count how many times the value occurs in a and b\n        countA = 0\n        while currA < len(a):\n            if a[currA] == val:\n                countA += 1\n                currA += 1\n            else:\n                break\n        countB = 0\n        while currB < len(b):\n            if b[currB] == val:\n                countB += 1\n                currB += 1\n            else:\n                break\n        if countA == countB:\n            result.append(val)\n  # We've exhausted either a or b    \n  while currA < len(a):\n    if not result or result[-1] != a[currA]:\n      result.append(a[currA])\n    currA += 1\n  while currB < len(b):\n    if not result or result[-1] != b[currB]:\n      result.append(b[currB])\n    currB += 1\n  return result", "from collections import Counter\n\ndef merge_arrays(a, b):\n    C1, C2 = Counter(a), Counter(b)\n    return sorted((C1.keys() ^ C2.keys()) | {k for k in (C1.keys() & C2.keys()) if C1[k] == C2[k]})", "from collections import Counter\n\ndef merge_arrays(a, b):\n    c = Counter(a)\n    d = Counter(b)\n    return sorted(x for x in set(a) | set(b) if c[x] == d[x] or not c[x] or not d[x])", "from collections import Counter\ndef merge_arrays(a, b):\n    li = set()\n    c1,c2 = Counter(a), Counter(b)\n    for i in set(a + b):\n        if i in c1 and i in c2:\n            if c1[i] == c2[i] : li.add(i)\n        else : li.add(i)\n    return sorted(li)", "from collections import Counter\n\ndef merge_arrays(a, b):\n    ca = Counter(a)\n    cb = Counter(b)\n    return [x for x in sorted(set(ca).union(cb)) if ca[x] == cb[x] or ca[x] * cb[x] == 0]"]