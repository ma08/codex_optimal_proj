["from collections import defaultdict\n\ndef solve(arr):\n    dct = defaultdict(list)\n    for i,fs in enumerate(map(frozenset, arr)):\n        dct[fs].append(i)\n    return sorted(sum(lst) for lst in dct.values() if len(lst) > 1)", "def solve(lst):\n    seen, result = set(), []\n    for i, st1 in enumerate(lst):\n        current = 0\n        for j, st2 in enumerate(lst[i+1:], i+1):\n            if j not in seen and set(st1) == set(st2):\n                current += j\n                seen.add(j)\n        if current:\n            result.append(i + current)\n    return sorted(result)", "def solve(arr):\n    ret = [  ]\n    i = len(arr)-1\n    t = None\n    while i>-1:\n        for j in range(i):\n            if arr[j] and set(arr[j]) == set(arr[i]):\n                arr[j] = ''\n                if not t: t = 0\n                t += j\n        if t!=None: ret.append(t+i); t = None\n        i-=1\n    return sorted(ret)", "from collections import defaultdict\n\ndef solve(arr):\n    d = defaultdict(list)\n    for i, x in enumerate(arr):\n        d[frozenset(x)].append(i)\n    return sorted(sum(xs) for xs in list(d.values()) if len(xs) > 1)\n", "from itertools import groupby\nfrom operator import itemgetter\n\ndef solve(arr):\n    s = sorted(((c, sorted(set(a))) for c, a in enumerate(arr)), key = itemgetter(1))\n    return sorted(sum(map(itemgetter(0), a)) for a in (list(g) for _, g in groupby(s, itemgetter(1))) if len(a) > 1)", "def solve(arr):\n    sums = {}\n    for i, s in enumerate(arr):\n        sums.setdefault(frozenset(s), []).append(i)\n    return sorted(sum(indexes) for indexes in sums.values() if len(indexes) > 1)", "def solve(a):\n    d = {}\n    for i, s in enumerate(a): d.setdefault(frozenset(s), []).append(i)\n    return sorted(sum(v) for v in d.values() if len(v) > 1)", "from collections import defaultdict\n\ndef solve(strings):\n    indices_by_chars = defaultdict(list)\n    for i, s in enumerate(strings):\n        indices_by_chars[frozenset(s)].append(i)\n    return sorted(sum(js) for js in list(indices_by_chars.values()) if len(js) > 1)\n", "def solve(arr):\n  arr = [''.join(sorted(list(set(x)))) for x in arr]\n  return sorted(sum(i for i, y in enumerate(arr) if x == y) for x in set(arr) if arr.count(x) >= 2)"]