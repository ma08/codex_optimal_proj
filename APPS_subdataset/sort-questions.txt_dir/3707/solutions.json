["def sorter(textbooks):\n    return sorted(textbooks,key=str.lower)", "def sorter(textbooks):\n    return sorted(textbooks, key=str.casefold)", "def sorter(textbooks):\n    return sorted(textbooks, key = lambda arg: arg.lower())", "sorter = lambda x: sorted(x,key=lambda s:s.lower())", "sorter = lambda text: sorted(text, key=lambda s: s.lower())", "def sorter(lst):\n    return sorted(lst, key=lambda e: e.lower())", "def sorter(textbooks):\n    return sorted(textbooks, key=lambda text: text.lower())", "def sorter(textbooks):\n    def f(e):\n       return e.lower()\n    sorted = textbooks.sort(key=f)\n    return textbooks", "def sorter(textbooks):\n    d = {t.lower(): t for t in textbooks}\n    return [d[t] for t in sorted(d)]", "def sorter(textbooks):\n  arr=sorted(textbooks,key=str.lower)\n  return arr", "sorter = lambda textbooks: sorted(textbooks, key=str.lower)", "from typing import List\n\ndef sorter(textbooks: List[str]):\n    \"\"\" Sort textbooks by subjects. \"\"\"\n    return sorted(textbooks, key=str.lower)", "def sorter(textbooks):\n    textbooks.sort(key = lambda x: x.lower())\n    # .sort() sorts the list while considering every element as if it is in lowercase\n    return textbooks", "def myf(a):\n    return a.lower()\n    \ndef sorter(textbooks):\n    return sorted(textbooks, key=myf)", "def sorter(textbooks):\n    ##use list.sort(), and instruct programme to ignore capitalisation\n    textbooks.sort(key = str.lower)\n    return(textbooks)", "def sorter(textbooks):\n  my_sort = sorted(textbooks, key=str.lower)\n  return my_sort", "def sorter(textbooks: list) -> list:\n    return sorted(textbooks, key=str.casefold)", "def sorter(textbooks):\n    textbooks.sort()\n    return sorted(textbooks, key =lambda x: x.lower())#Cramming before a test can't be that bad?", "def sorter(textbooks):\n    listtemp = [(x.lower(),x) for x in textbooks]\n    listtemp.sort()\n    return [x[1] for x in listtemp]", "def sorter(textbooks):\n    r = {i.lower():i for i in textbooks}\n    return [r[i] for i in sorted(r)]", "def sorter(textbooks):\n    subjects = dict((sub.lower(), sub) for sub in textbooks)\n    return [subjects[sub] for sub in sorted(subjects.keys())]", "sorter = lambda textbooks: list(sorted(textbooks, key = lambda s: s.lower()))", "def sorter(textbooks):\n    '''Function that sort a list full of textbooks by subject'''\n    return sorted(textbooks,key=str.lower)", "def sorter(textbooks):\n    k = sorted(textbooks, key=str.casefold)\n    return k", "sorter = lambda textbooks:sorted(textbooks, key=str.casefold)\n\n'''make a case insensitive sorted list'''", "def sorter(textbooks):\n    return list(sorted(textbooks, key=lambda e: e.lower()))\n", "import functools;\n\ndef cmp(a, b):\n    aa = a.lower()\n    bb = b.lower()\n    \n    if aa > bb:\n        return 1\n    elif bb > aa:\n        return -1\n    else:\n        return 0\n\ndef sorter(textbooks):\n   return sorted(textbooks, key=functools.cmp_to_key(cmp))", "from typing import List\n\ndef sorter(textbooks: List[str]) -> List[str]:\n    \"\"\"Returns the textbooks non-case-sensitive sorted.\"\"\"\n    return sorted(textbooks, key=str.casefold)", "from typing import List\n\ndef sorter(textbooks: List[str]) -> List[str]:\n    \"\"\"Returns the textbooks list non-case-sensitive sorted.\"\"\"\n    return sorted(textbooks, key=str.lower)", "def sorter(tks):\n    return sorted(tks, key=lambda s: s.lower())", "def sorter(textbooks):\n    return sorted(textbooks, key=lambda v: (v.casefold(), v))", "def get_first(element):\n    return element[0]\n\ndef sorter(textbooks):\n    lst = [(el.lower(), el) for el in textbooks]\n    lst1 = sorted(lst,key=get_first)\n    return [el[1] for el in lst1]", "def sorter(textbooks):\n    lst = sorted([(el.lower(), el) for el in textbooks])\n    return [el[1] for el in lst]", "def sorter(textbooks):\n    #Cramming before a test can't be that bad?\n    def f(x):\n        return x.lower()\n    return sorted(textbooks,key=f)", "def sorter(textbooks):\n    return list(sorted(textbooks, key=str.casefold))", "def sorter(textbooks):\n    \"\"\"\n    Sort list of textbooks\n    \"\"\"\n    return sorted(textbooks, key = str.lower)", "def sorter(textbooks):\n    t2=sorted(textbooks,key=str.lower)\n    return t2", "def sorter(textbooks):\n    textbooks = sorted(textbooks, key = str.casefold)\n    return textbooks", "def sorter(textbooks):\n    #Cramming before a test can't be that bad?\n    bookList = sorted(textbooks, key=str.lower)\n    return bookList", "def sorter(textbooks):\n    return sorted(sorted(textbooks, key = lambda x: x[1].lower()), key = lambda x: x[0].lower())", "def sorter(textbooks):\n    x = sorted(textbooks, key = lambda s: s.casefold())\n    return x", "def sorter(textbooks):\n    return sorted(set(textbooks),key=str.casefold)", "def sorter(textbooks):\n    result = []\n    books_lowcase = [x.lower() for x in textbooks]\n    books_dict = dict(zip(books_lowcase, textbooks))\n    dict_keys_sort = list(books_dict.keys())\n    dict_keys_sort.sort()\n    for i in dict_keys_sort:\n        result.append(books_dict[i])\n    return result", "import re\ndef sorter(textbooks):\n    textbooks.sort(key=str.lower) \n    return textbooks\n    #Cramming before a test can't be that bad?\n    #print(re.findall(r\"\\S\",textbooks,re.IGNORECASE))\n    #return sorted(textbooks)\n", "def sorter(textbooks):\n\n    s = sorted(textbooks)\n    \n    if textbooks == s:\n        \n        return textbooks\n        \n    if s == s.sort(key=str.lower):\n    \n        return s.sort(key=str.lower)\n        \n    else:\n    \n        return s\n        \n        \n    \n", "def lower_case(predmet):\n    return predmet.lower()\ndef sorter(textbooks):\n    return sorted(textbooks, key = lower_case)", "def register(textbook):\n    return textbook.lower()\n\ndef sorter(textbooks):\n    textbooks.sort(key=register)\n    return textbooks", "def sorter(textbooks):\n    return sorted(textbooks, key=lambda s: s.lower())\n    #orted(unsorted_list, key=lambda s: s.lower())\n    #Cramming before a test can't be that bad?\n", "def sorter(*textbooks):\n    for textbook in textbooks:\n        print(textbook.sort(key=str.lower))\n    return textbook", "def sorter(textbooks):\n    textbooks.sort(key=str.lower)\n    return textbooks\n    \n#   return sorted(textbooks,key=str.lower)\n", "def f(x):\n    x = x.lower()\n    return x\n\ndef sorter(textbooks):\n    textbooks.sort(key = f)\n    return textbooks", "def sorter(textbooks):\n    textbooks = sorted(textbooks, key=lambda x:x[0:] if x[0:].islower() else x[0:].lower())\n    return textbooks", "def sorter(textbooks):\n    return(sorted([i for i in textbooks], key = lambda str: str.lower()))", "def sorter(textbooks: list):\n    return sorted(textbooks, key=str.lower)", "def sorter(t):\n    t.sort(key=str.casefold)\n    return t", "import locale\n\ndef sorter(textbooks):\n    textbooks.sort(key=lambda x: x.lower())\n    return textbooks", "sorter=lambda s:sorted(s,key=lambda x:x.lower())", "def sorter(t):\n    return sorted(t,key=lambda t:t.casefold())\n", "def sorter(textbooks):\n    return sorted(textbooks, key = lambda x: x[0:2].lower())\n    #Cramming before a test can't be that bad?\n", "def sorter(textbooks):\n    lst_books = []\n    for i in textbooks:\n            lst_books.append(i)\n    return sorted(lst_books, key=str.lower)", "def sorter(textbooks):\n    textbooks_low = [el.lower() for el in textbooks]\n    \n    textbooks_low_sorted = sorted(textbooks_low)\n  \n    testbooks_sorted_indexes = [textbooks_low.index(el) for el in textbooks_low_sorted]\n    \n    return [ textbooks[ind] for ind in testbooks_sorted_indexes ]", "def sorter(textbooks):\n    if textbooks!=int:\n        return sorted(textbooks,key=str.lower)", "def sorter(text_books):\n    return sorted(text_books, key = str.lower)", "def sorter(textbooks):\n  list.sort(textbooks, key = str.lower)\n  return textbooks", "def sorter(textbooks):\n    return sorted(textbooks, key=lambda t: (t.lower(), t))\n", "def sorter(textbooks):\n    arr = []\n    for i, book in enumerate(textbooks):\n        arr.append([book.lower(), i])\n    arr = sorted(arr)\n    for i, book in enumerate(arr):\n        arr[i] = textbooks[book[1]]\n    return arr", "def sorter(textbooks):\n    a = sorted(textbooks, key = str.lower)\n    return a", "sorter = lambda books: sorted(books, key = lambda _: _.lower())", "import string\n\ndef sorter(textbooks):\n    return sorted(textbooks,key=str.lower)", "sorter=lambda t: sorted(t, key=lambda s: s.lower())", "def sorter(textbooks):\n    a = sorted(textbooks, key=str.casefold)\n    print(textbooks, a) \n    return a#Cramming before a test can't be that bad?", "def sorter(textbooks):\n    result = sorted(textbooks, key=str.lower)\n    return result", "def sorter(textbooks):\n    #Cramming before a test can't be that bad?\n#     return sorted(textbooks, key=cmp_to_key(locale.strcoll))\n    textbooks.sort(key=str.lower)\n    return textbooks ", "def sorter(textbooks):\n    sorted_books=sorted(textbooks,key=str.casefold)\n    \n    return sorted_books", "# Sort the $%&*!#$! textbooks\ndef sorter(textbooks):\n    obj = {}\n    lower_case_textbooks = []\n    for textbook in textbooks:\n        lower_case_textbook = textbook.lower()\n        obj[lower_case_textbook] = textbook\n        lower_case_textbooks.append(lower_case_textbook)\n    sorted_textbooks = sorted(lower_case_textbooks)\n    output_list = [];\n    for sorted_textbook in sorted_textbooks:\n        output_list.append(obj[sorted_textbook])\n    return output_list", "def sorter(textbooks):\n    print(textbooks)\n    print(sorted(textbooks,key=str.lower))\n    return sorted(textbooks,key=str.lower)", "def sorter(textbooks):\n    return sorted(textbooks, key=lambda e: e.lower())", "def sorter(textbooks):\n    print(sorted(textbooks))\n    return sorted(textbooks, key = lambda x: x.lower())", "def sorter(textbooks):\n    #Cramming before a test can't be that bad?\n    ts = sorted(textbooks, key=str.lower)\n    return ts", "def sorter(arr):\n    for i in range(len(arr) - 1):\n        for j in range(len(arr) - i - 1):\n            if arr[j].lower() > arr[j+1].lower():\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr", "def sorter(textbooks):\n    return [a[1] for a in sorted([(b.lower(), b) for b in textbooks])]", "def sorter(t):\n    return sorted(t,key=str.casefold)", "def sorter(tb):\n    return sorted(tb, key=lambda x: x.lower())", "def sorter(textbooks):\n    sorted = [book.lower() for book in textbooks]\n    sorted.sort()\n    final = textbooks.copy()\n    for book in textbooks:\n        final[sorted.index(book.lower())] = book\n    return final", "def sorter(textbooks):\n    copy = [text.lower() for text in textbooks]\n    final = []\n    to_sort = list(copy)\n    to_sort.sort()\n    for t in to_sort:\n        final.append(textbooks[copy.index(t)])\n    return final", "sorter = lambda x: sorted(x, key=str.casefold)", "def sorter(textbooks):\n    #Cramming before a test can't be that bad\n    a=[i.lower() for i in textbooks]\n    s=sorted(a)\n    \n    for i in range(len(s)):\n        if s[i] in textbooks:\n            pass\n        else:\n            s[i]=textbooks[a.index(s[i])]\n    return s", "def sorter(textbooks):\n    return sorted(textbooks, key=lambda w:w.casefold())", "def sorter(textbooks):\n    ret=[t for t in textbooks]\n    ret.sort(key=lambda x: x.lower())\n    return ret", "import numpy as np\n\ndef sorter(textbooks):\n    return sorted(textbooks,key=str.lower)", "\nimport functools\n\ndef compares(item1, item2):\n    if len(item1) == 0:\n        return -1\n    if len(item2) == 0:\n        return 1\n    if ord(item1[0].lower()) < ord(item2[0].lower()):\n        return -1\n    elif ord(item1[0].lower()) > ord(item2[0].lower()):\n        return 1\n    else:\n        return compares(item1[1:], item2[1:])\n\ndef compare(item1, item2):\n    return compares(item1,item2)\ndef sorter(textbooks):\n    #Cramming before a test can't be that bad?\n    return sorted(textbooks, key=functools.cmp_to_key(compare))\n", "def sorter(t):\n    a = sorted(t, key=str.lower)\n    return a ", "class Book():\n    def __init__(self, subject):\n        self.subject = subject\n    def __lt__(self, other):\n        return self.subject.lower() < other.subject.lower()\n\ndef sorter(textbooks):\n    a = [Book(subj) for subj in textbooks]\n    a.sort()\n    output = [i.subject for i in a]\n    return output", "def sorter(textbooks):\n    return sorted(textbooks, key=lambda v: v.lower())", "def sorter(textbooks):\n    sortbooks = sorted([x.lower() for x in textbooks])\n    out = []\n    for sb in sortbooks:\n        for tb in textbooks:\n            if sb==tb.lower():\n                out.append(tb)\n    return out", "def sorter(textbooks):\n    index = {word.lower():word for word in textbooks}\n    keys = sorted(index.keys())\n    return [index[key] for key in keys]", "def sorter(textbooks):\n    #Cramming before a test can't be that bad?\n    return sorted([textbook for textbook in textbooks], key=lambda x: x.lower())", "def sorter(textbooks):\n    \n    sorted_list = sorted(textbooks, key=str.lower)\n    return sorted_list", "sorter = lambda textbooks: sorted(textbooks, key = lambda t: t.lower())"]