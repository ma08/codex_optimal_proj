["import sys\nimport bisect as bi\nimport math\nfrom collections import defaultdict as dd\ninput=sys.stdin.readline\n##sys.setrecursionlimit(10**7)\ndef cin():\n    return list(map(int,sin().split()))\ndef ain():            \n    return list(map(int,sin().split()))\ndef sin():\n    return input()\ndef inin():\n    return int(input())\nfor _ in range(inin()):\n    s=sin().strip();q=inin();a=ain();n=len(s);store=[0]*n;store1=[-1]*n;f=0;d=dd(int)#input wgera\n    store[0]=1 if s[0]=='(' else -1\n    d[store[0]]=1\n    for i in range(1,n):\n        if(s[i]=='('):\n            store[i]=store[i-1]+1\n            d[store[i]]=i+1\n        else:\n            store[i]=store[i-1]-1\n            if(d[store[i-1]]):\n                store1[d[store[i-1]]-1]=i+1\n    post=[-1]*n;\n    if(n==1 or(n==2 and s!=\"()\")):f=1   # corner case\n    for i in range(n-2,-1,-1):\n        if(s[i]=='('):    #dekhna h ki agla agr ( h toh -1 hi rhega wrna wo jo stored tha uppr\n            if(store1[i]!=-1):post[i]=store1[i] #wo iska ans ho jayega\n        else:post[i]=post[i+1]  #jo iske agle ka answer hoga wahi iska hoga\n    for i in a:\n        if(f):print(-1)  #cond ki jaroorat nhi thi pr tasalli (>_<)\n        else:print(post[i-1]) #wrna uska ans print kra do\n    \n    \n##n=m=0\n##s=''\n##t=''\n##dp=[]\n##def solve(inds,indt,k,cont):\n##    ans=-999999999999999\n##    print(dp)\n##    if(k<0):return 0\n##    elif(inds>=n and indt>=m):return 0\n##    elif(dp[inds][indt][k][cont]!=-1):return dp[inds][indt][k][cont]\n##    else:\n##        if(indt<m):ans=max(ans,solve(inds,indt+1,k,0))\n##        if(inds<n):ans=max(ans,solve(inds+1,indt,k,0))\n##        if(s[inds]==t[indt]):\n##            ans=max(ans,solve(inds+1,indt+1,k-1,1)+1)\n##            if(cont):ans=max(ans,solve(inds+1,indt+1,k,1)+1)\n##        dp[inds][indt][k][cont]=ans\n##        return ans    \n\n##    n,m,k=cin()\n##    s=sin().strip()\n##    t=sin().strip()\n##    dp=[[[[-1]*2 for i in range(k)] for i in range(m+1)] for i in range(n+1)]\n##    c=0\n##    for i in dp:\n##        for j in i:\n##            for l in j:\n##                c+=1\n##                print(l,c)\n##    print(solve(0,0,k,0))\n", "# cook your dish here\nT = int(input())\nfor _ in range(T):\n    s = input()\n    _ = input()\n    stack = []\n    nextOpen = [-1 for _ in range(len(s))]\n    closing = [-1 for _ in range(len(s))]\n    nextO = len(s) + 1\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] == '(':\n            nextO = i\n            if stack:\n                closing[i] = stack.pop()\n        else:\n            stack.append(i)\n        nextOpen[i] = nextO\n\n    for t in map(int, input().split()):\n        t -= 1\n        t = nextOpen[t]\n        if t < len(s):\n            res = closing[t]\n            print(res + 1 if res >= 0 else -1)\n        else:\n            print(-1)\n", "# cook your dish here\nT = int(input())\nfor _ in range(T):\n    s = input()\n    _ = input()\n    \n    stack = []\n    nextOpen = [-1 for _ in range(len(s))]\n    closing = [-1 for _ in range(len(s))]\n    nextO = len(s) + 1\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] == '(':\n            nextO = i\n            if stack and stack[-1][0] == 1:\n                _, pos = stack.pop()\n                closing[i] = pos\n            else:\n                stack.append((0,i))\n        else:\n            stack.append((1,i))\n        nextOpen[i] = nextO\n\n    for t in map(int, input().split()):\n        t -= 1\n        t = nextOpen[t]\n        if t < len(s):\n            res = closing[t]\n            print(res + 1 if res >= 0 else -1)\n        else:\n            print(-1)\n", "from sys import stdin, stdout \nfor t in range(int(stdin.readline())):\n    s = str(stdin.readline()) \n    q = int(stdin.readline())\n    a =  list(map(int, stdin.readline().split()))\n    d = {}\n    stc = []\n    p = -1\n    for i in range((len(s) - 1), -1, -1):\n        if(s[i] == ')'):\n            stc.append(i)\n            d[i+1] = p\n        elif(s[i] == '('):\n            if(len(stc) >= 1):\n                d[i+1] = stc[-1] + 1\n                p = d[i + 1]\n                stc.pop()\n            else:\n                d[i+1] = -1\n                p = d[i + 1]\n                \n    for i in a:\n        print(d[i])\n        \n        \n        \n", "try:\n    tt=int(input())\n    while(tt):\n        tt=tt-1\n        s=input()\n        st1, dicti, i = [], {}, 1\n        for j in s:\n            if j == '(':\n                st1.append(i)\n            elif st1:\n                h = st1.pop() - 2\n                dicti[h + 2] = i\n                while h >= 0 and s[h] == ')':\n                    dicti[h + 1] = i\n                    h -= 1\n            i+=1\n        q=int(input())\n        t=list(map(int,input().split()))\n        for i in t:\n            if(i in list(dicti.keys())):\n                print(dicti[i])\n            else:\n                print(-1)\nexcept:\n    pass\n\n\n", "t = int(input())\r\nfor _ in range(t):\r\n    s = input()\r\n    s = list(s)\r\n#    q = int(input())\r\n    n = len(s)\r\n    answer=[]\r\n    stack = []\r\n    stack2 = []\r\n    for i in range(len(s)-1,-1,-1):\r\n#        print(stack)\r\n#        print(s[i])\r\n        if s[i]==')':\r\n            if answer==[]:\r\n                answer = [-1]\r\n                stack2.append(i)\r\n                stack.append(')')\r\n                continue\r\n            stack2.append(i)\r\n            answer.append(answer[-1])\r\n            stack.append(')')\r\n        else:\r\n            if stack2==[]:\r\n                answer.append(-1)\r\n                stack.append('(')\r\n            else:\r\n                stack.pop()\r\n                e = stack2[-1]\r\n                stack2.pop()\r\n                answer.append(e+1)\r\n#        if i==5:\r\n#            break\r\n    answer.reverse()\r\n    q = int(input())\r\n    W = list(map(int,input().split()))\r\n    for i in range(q):\r\n        w = W[i]\r\n        print(answer[w-1])\r\n#    print(answer)\r\n                \r\n        \r\n        \r\n", "import sys\ninput = sys.stdin.readline\n\nT = int(input())\n\nfor _ in range(T):\n\ts = input()\n\tq = int(input())\n\tt = list(map(int,input().split()))\n\tstack = []\n\tval = [-1 for i in range(len(s))]\n\tlast_open = -1\n\tfor i in range(len(s)-2,-1,-1):\n\t\tif s[i] == ')':\n\t\t\tstack.append(i)\n\t\t\tval[i] = last_open\n\t\telse:\n\t\t\tif len(stack) != 0:\n\t\t\t\tval[i] = stack[-1]\n\t\t\t\tstack.pop()\n\t\t\t\tlast_open = val[i]\n\t\t\telse:\n\t\t\t\tlast_open = -1\n\n\tfor i in range(q):\n\t\tif val[t[i]-1] == -1:\n\t\t\tprint(-1)\n\t\telse:\n\t\t\tprint(val[t[i]-1] +1)\n\n\n\n", "for _ in range(int(input())):\r\n\tst=input()\r\n\tq=int(input())\r\n\tqi=list(map(int,input().split()))\r\n\tn=len(st)\r\n\ttracker=0\r\n\t# lastClose=-1\r\n\tans=[-1]*n\r\n\tstack=[]\r\n\tfor i in range(n-1,-1,-1):\r\n\t\tif st[i]==')':\r\n\t\t\tstack.append(i+1)\r\n\t\t\tif i!=n-1:\r\n\t\t\t\tans[i]=ans[i+1]\r\n\t\t\t# lastClose=i+1\r\n\t\t\ttracker-=1\r\n\t\telif tracker<0 and st[i]=='(':\r\n\t\t\tans[i]=stack.pop()\r\n\t\t\ttracker+=1\r\n\t# print(ans)\r\n\tfor i in range(q):\r\n\t\tprint(ans[qi[i]-1])", "try:\n    def findans(s):\n        l,val,r=[],{},[]\n        for i,kk in enumerate(s):\n            if kk == '(':\n                l.append(i+1)\n            elif l:\n                x=l.pop()\n                val[x]=i+1\n                x-=2\n                while x>=0 and s[x]==')':\n                    val[x+1]=i+1\n                    x-=1\n        return val\n    \n    for ii in range(int(input())):\n        b=input()\n        dic=findans(b)\n        n=int(input())\n        q=list(map(int, input().split()))\n        for jj in q:\n            print(dic.get(jj,-1))\nexcept: pass", "# cook your dish here\nfrom sys import stdin, stdout \nt = int(stdin.readline()) \nwhile(t):\n    t -= 1\n    string = str(stdin.readline()) \n    q = int(stdin.readline())\n    a =  list(map(int, stdin.readline().split()))\n\n    pos = 0\n    l = {}\n    stack = []\n    pos = -1\n    for j in range(len(string) - 1, -1, -1):\n        #print(string[j])\n        if(string[j] == ')'):\n            stack.append(j)\n            l[j+1] = pos\n        elif(string[j] == '('):\n            if(len(stack) >= 1):\n                l[j+1] = stack[-1] + 1\n                pos = l[j + 1]\n                stack.pop()\n            else:\n                l[j+1] = -1\n                pos = l[j + 1]\n    #print(l)    \n    for item in a:\n        print(l[item])\n        \n", "# cook your dish here\nfrom sys import stdin, stdout \nt = int(stdin.readline()) \nwhile(t):\n    t -= 1\n    string = str(stdin.readline()) \n    q = int(stdin.readline())\n    a =  list(map(int, stdin.readline().split()))\n\n    pos = 0\n    l = {}\n    stack = []\n    pos = -1\n    for j in range(len(string) - 1, -1, -1):\n        #print(string[j])\n        if(string[j] == ')'):\n            stack.append(j)\n            l[j+1] = pos\n        elif(string[j] == '('):\n            if(len(stack) >= 1):\n                l[j+1] = stack[-1] + 1\n                pos = l[j + 1]\n                stack.pop()\n            else:\n                l[j+1] = -1\n                pos = l[j + 1]\n    #print(l)    \n    for item in a:\n        print(l[item])\n        \n", "# cook your dish here\nfrom sys import stdin, stdout  \n  \n\ndef main(): \n  \n    t = input() \n    t=int(t)\n    while t:\n        t=t-1\n        s=input()\n        n=len(s)\n        #print(n,s)\n        l=[0 for i in range(n)]\n        l[n-1]=-1\n        q=[]\n        if s[n-1]==\")\":\n            q.append(n-1)\n        for i in range(n-2,-1,-1):\n            \n            if s[i]==\")\":\n                l[i]=l[i+1]\n                q.append(i)\n            elif s[i]==\"(\" and len(q)==0:\n                l[i]=-1\n            else:\n                l[i]=q[len(q)-1]\n                q.pop()\n        \n        Q = int(input())\n        #print(l)\n        \n        arr = [int(x) for x in stdin.readline().split()] \n        \n        for i in range(Q):\n            x=arr[i]\n            x=x-1\n            if l[x]==-1:\n                print(-1)\n            else:\n                print(l[x]+1)\n            \n        \n            \n        \n  \n        \n  \n \n    \n  \n# call the main method \ndef __starting_point(): \n    main()     \n__starting_point()", "\n\ndef find_min(s,queries):\n\n    stack = []\n\n    balancing = [-1]*len(s)\n\n    op = [-1]* len(s)\n\n    last_opening = -1\n    for i in range(len(s)-1,-1,-1):\n        if s[i]==')':\n            op[i] = last_opening\n        else:\n            last_opening = i\n\n\n    for i in range(len(s)):\n        if s[i]==')':\n            if len(stack)!=0:\n                balancing[stack[-1]] = i\n                del stack[-1]\n        else:\n            stack.append(i)\n\n    for query in queries:\n        q = query-1\n        if s[q]==')':\n            if op[q]==-1:\n                print(-1)\n                continue\n            else:\n                q = op[q]\n        if balancing[q]==-1:\n            print(-1)\n        else:\n            print(balancing[q]+1)\n\nT = int(input())\nwhile T!=0:\n    s = input()\n    q = int(input())\n    queries = [int(a) for a in input().split(\" \")]\n    find_min(s,queries)\n    T-=1\n\n", "from collections import deque \nfrom sys import stdin\ninput=stdin.readline\nfor _ in range(int(input())):\n    s=list(input())\n    n=len(s)\n    ans=[0]*n\n    x=0\n    y=0\n    a=n-1\n    b=n-1\n    stack=deque([])\n    prev=-1\n    while a>=0:\n        if s[a]==')':\n            stack.append(a)\n            ans[a] = prev\n        else:\n            if len(stack)==0:\n                ans[a]=-1\n                prev=-1\n            else:\n                prev=stack[-1]+1\n                ans[a]=prev\n                stack.pop()\n        a-=1\n    \n    q=int(input())\n    x=list(map(int,input().split()))\n    for i in x:\n        i=i-1\n        print(ans[i])\n        \n    \n", "# from mymodule import input\nt = int(input())\nfor _ in range(t):\n    s = input().strip()\n    li,stk,tmp = [-1]*len(s),[],[]\n    for i in range(len(s)):\n        if len(stk):\n            if s[i]=='(':\n                while len(tmp):\n                    stk.append(tmp.pop())\n                stk.append(i)\n            elif s[stk[-1]]=='(':\n                li[stk[-1]] = i\n                v = stk.pop()\n                while len(stk)!=0:\n                    if s[stk[-1]]==')':\n                        li[stk[-1]]=v\n                        stk.pop()\n                    else:\n                        break\n                tmp.append(i)\n            else:\n                stk.append(i)\n            pass\n        elif s[i]=='(':\n            while len(tmp)!=0:\n                stk.append(tmp.pop())\n            stk.append(i)\n        else:\n            stk.append(i)\n    # for i in tmp:\n    #     li[i] = len(s)\n    # print(li,stk)\n    q = int(input())\n    for i in map(int,input().split()):\n        ind = i-1\n        while li[ind]!=-1 and s[li[ind]]!=')':\n            ind = li[ind]\n        if li[ind]!=-1:\n            print(li[ind]+1)\n        else:\n            print(-1)", "\r\nfor _ in range(int(input())):\r\n    s = input()\r\n    n = int(input())\r\n    l = list(map(int, input().split()))\r\n    \r\n    count = 0    \r\n    stk = []\r\n    last = -1\r\n    store = [0] * len(s)\r\n    \r\n    \r\n        \r\n    for i in range(len(s)-1, -1, -1):\r\n        if s[i] == ')':\r\n            stk.append(i+1)\r\n            if last == -1:\r\n                store[i] = -1\r\n            else:\r\n                store[i] = last\r\n                \r\n        else:\r\n            if len(stk) == 0:\r\n                store[i] = -1\r\n                last = -1\r\n            else:\r\n                x = stk.pop()\r\n                store[i] = x\r\n                last = x\r\n                \r\n    # print(store)\r\n            \r\n    for i in range(len(l)):\r\n        print(store[l[i]-1])\r\n        \r\n        \r\n        \r\n        \r\n        \r\n            \r\n            \r\n", "import sys\r\nimport math\r\nfrom collections import defaultdict,Counter\r\n\r\ninput=sys.stdin.readline\r\ndef print(x):\r\n    sys.stdout.write(str(x)+\"\\n\")\r\n\r\n# sys.stdout=open(\"CP3/output.txt\",'w')\r\n# sys.stdin=open(\"CP3/input.txt\",'r')\r\n\r\n# m=pow(10,9)+7\r\nt=int(input())\r\nfor i in range(t):\r\n    s=input().strip()\r\n    c=0\r\n    v=[0]*len(s)\r\n    st=[]\r\n    prev=-2\r\n    c1=0\r\n    for j in range(len(s)-1,-1,-1):\r\n        if s[j]==')':\r\n            # c1-=1\r\n            # if c1>=0:\r\n            #     c=0\r\n            v[j]=prev\r\n            st.append(j)\r\n        else:\r\n            c1+=1\r\n            c+=1\r\n            if st:\r\n                v[j]=st.pop()\r\n            else:\r\n                v[j]=-2\r\n            prev=v[j]\r\n            # if len(st)>=c:\r\n            #     v[j]=st[-c]\r\n            #     prev=st[-c]\r\n            # else:\r\n            #     v[j]=-2\r\n            #     prev=-2\r\n    q1=int(input())\r\n    q=list(map(int,input().split()))\r\n    # print(v)\r\n    for j in q:\r\n        print(v[j-1]+1)\r\n"]