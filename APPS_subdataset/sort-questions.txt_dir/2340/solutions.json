["t = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    cur = l[0]\n    cll = 1\n    blocks = []\n    for x in l[1:]:\n        if x > cur:\n            blocks.append(cll)\n            cur = x\n            cll = 1\n        else:\n            cll += 1\n    blocks.append(cll)\n\n    poss = [[False]*(n+1) for _ in range(len(blocks) + 1)]\n    poss[0][0] = True\n    for i, b in enumerate(blocks):\n        for j in range(n+1):\n            poss[i+1][j] = poss[i][j]\n            if b <= j:\n                poss[i+1][j] |= poss[i][j-b]\n\n    # print()\n    # print(blocks)\n    # for r in poss:\n    #     print(r)\n    print(\"YES\" if poss[len(blocks)][n] else \"NO\")\n", "import sys\n\ninput=sys.stdin.readline\n\nfor _ in range(int(input())):\n    n=int(input())\n    p=list(map(int,input().split()))\n    index={e:i for i,e in enumerate(p)}\n    m=2*n\n    data=[]\n    for i in range(2*n,0,-1):\n        temp=index[i]\n        if temp<m:\n            data.append(m-temp)\n            m=temp\n    m=len(data)\n    dp=[[False for i in range(2*n+1)] for j in range(m+1)]\n    dp[0][0]=True\n    for i in range(1,m+1):\n        for j in range(2*n+1):\n            dp[i][j]=dp[i-1][j]|(dp[i-1][j-data[i-1]]&(j>=data[i-1]))\n    if dp[m][n]:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    ma = 0\n    l = []\n    for i in range(n * 2):\n        if ma < p[i]:\n            l.append(i)\n            ma = p[i]\n    l.append(n * 2)\n    m = len(l) - 1\n    a = [0] * m\n    for i in range(m):\n        a[i] = l[i + 1] - l[i]\n    dp = [0] * (m + 1)\n    dp[0] = 1\n    for i in range(m):\n        dp[i + 1] = dp[i] | (dp[i] << a[i])\n    if (dp[m] >> n) & 1:\n        print('YES')\n    else:\n        print('NO')\n", "import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor tests in range(t):\n    n=int(input())\n\n    P=list(map(int,input().split()))\n\n    MAX=-1\n    L=[]\n    count=0\n    for p in P:\n        if p>MAX:\n            L.append(count)\n            MAX=p\n            count=1\n        else:\n            count+=1\n    L.append(count)\n\n    #print(L)\n\n    DP=1\n\n    MAX=(1<<(n+1))-1\n\n    for i in L:\n        DP=(DP|DP<<i)&MAX\n\n    #print(bin(DP))\n\n    if DP & (1<<n)!=0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n", "def solve(L):\n    count=[0]*len(L)\n    for i in range(len(L)):\n        count[L[i]-1]=i\n    pL=[]\n    pt=len(L)\n    for i in range(len(L)-1, -1, -1):\n        if pt>count[i]:\n            pL.append(pt-count[i])\n            pt=count[i]\n    countL=[0]*(2001)\n    countL[0]=1\n    for i in pL:\n        permL=[]\n        for j in range(len(countL)):\n            if countL[j] and j+i<2001:\n                permL.append(i+j)\n        for j in permL:countL[j]=1\n    return countL[len(L)//2]\nfor i in ' '*int(input()):\n    n=input()\n    print(['NO','YES'][solve(list(map(int,input().split())))])", "import sys\ninput = sys.stdin.readline\n\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    \n    cnt = 0\n    max_ = 0\n    ans = []\n    for val in p:\n        if max_ < val:\n            if cnt == 0:\n                pass\n            else:\n                ans.append(cnt)\n            max_ = val\n            cnt = 1\n        else:\n            cnt += 1\n    ans.append(cnt)\n    len_ans = len(ans)\n    dp = [False] * (n + 1)\n    dp[0] = True\n    for i in range(len_ans):\n        val = ans[i]\n        for j in range(n)[::-1]:\n            if j + 1 - val < 0:\n                break\n            dp[j + 1] |= dp[j + 1 - val]\n    if dp[-1]:\n        print(\"YES\")\n    else:\n        print(\"NO\")"]