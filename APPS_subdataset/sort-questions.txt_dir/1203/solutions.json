["import math\nf = math.factorial\nfor u in range(eval(input())):\n n, q = list(map(int, input().split()))\n for j in range(q):\n  i,k = list(map(int, input().split()))\n  if k>i:\n   c=0\n   print(c)\n  else:\n   a=2**(n-i)\n   b=1\n   d=int(i-1)\n   e=1\n   h=1\n   g=1\n   #b=f(i-1)/f(k-1)/f(i-k)\n   if(k-1>i-k):\n    for z in range(i-k):\n     b=b*d\n     d=d-1\n     e=e*h\n     h=h+1\n    b=b/e\n   else:\n    for z in range(k-1):\n     b=b*d\n     d=d-1\n     e=e*g\n     g=g+1\n    b=b/e\n    \n     \n     \n   c=a*b\n   c=c%1000000007\n   print(c)", "import math\nf = math.factorial\nfor u in range(eval(input())):\n n, q = list(map(int, input().split()))\n for j in range(q):\n  i,k = list(map(int, input().split()))\n  if k>i:\n   c=0\n   print(c)\n  else:\n   a=2**(n-i)\n   b=1\n   d=int(i-1)\n   e=1\n   h=1\n   g=1\n   #b=f(i-1)/f(k-1)/f(i-k)\n   if(k-1>i-k):\n    for z in range(i-k):\n     b=b*d\n     d=d-1\n     e=e*h\n     h=h+1\n    b=b/e\n   else:\n    for z in range(k-1):\n     b=b*d\n     d=d-1\n     e=e*g\n     g=g+1\n    b=b/e\n    \n     \n     \n   c=a*b\n   c=c%1000000007\n   print(c)\n  \n", "\nmm=1000000007\nMAXN=4001\ncomb=[[0]*MAXN]\ncomb[0][0] = 1\nfor i in range(1,MAXN):\n comb.append([0]*MAXN)\n comb[i][0] = 1\n for j in range(1,i+1):\n  comb[i][j] = comb[i - 1][j] + comb[i - 1][j - 1]\n  comb[i][j] %= mm\n   \n\np2=[1,2]\nfor i in range(2,4001):\n p2.append((p2[-1]*2)%mm)\n\n \n#print(\"a\")\nt=int(input())\nwhile t>0:\n n,m=[int(x) for x in input().split()]\n while m>0:\n  a,b=[int(x) for x in input().split()]\n  if b>a:\n   print(0)\n  else:\n   #r=abc(a-1,b-1)\n   r=comb[a-1][b-1]\n   print((r*p2[n-a])%mm)\n  m-=1\n t-=1 \n", "mm=1000000007\n\ndef pow1( a, b, MOD):\n x = 1\n y = a\n while(b > 0):\n  if(b%2 == 1):\n   x=(x*y)\n   if(x>MOD):\n    x%=MOD\n  y = (y*y)\n  if(y>MOD):\n   y%=MOD\n  b = b/2\n return x\n\n\ndef abc(a,b):\n c=1\n d=1\n b=min(b,a-b)\n for i in range(b):\n  c=(c*a)\n  c=c/(i+1)\n  a-=1\n  #d=(d*(i+1))\n #return (c*pow1(d,mm-2,mm))%mm\n return c%mm \n  \n  \np2=[1,2]\nfor i in range(2,4001):\n p2.append((p2[-1]*2)%mm)\n\nt=int(input())\nwhile t>0:\n n,m=[int(x) for x in input().split()]\n while m>0:\n  a,b=[int(x) for x in input().split()]\n  if b>a:\n   print(0)\n  else:\n   r=abc(a-1,b-1)\n   print((r*p2[n-a])%mm)\n  m-=1\n t-=1 \n", "mm=1000000007\ndef abc(a,b):\n c=1\n d=1\n for i in range(b):\n  c=(c*a)%mm\n  a-=1\n  d=(d*(i+1))\n return (c*pow(d,mm-2,mm))%mm \n  \n  \n\nt=int(input())\nwhile t>0:\n n,m=[int(x) for x in input().split()]\n while m>0:\n  a,b=[int(x) for x in input().split()]\n  if b>a:\n   print(0)\n  else:\n   r=abc(a-1,b-1)\n   print((r*pow(2,n-a,mm))%mm)\n  m-=1\n t-=1 \n", "def fast_ncr(n,r):\n res = 1\n for i in range(1,r+1):\n  res*=(n-r+i)\n  res/=(i)\n return res\n\ndef fast_exp(base,e):\n res = 1\n while (e>0):\n  if (e%2==1):\n   res = res*base%1000000007\n  base = base*base%1000000007\n  e/=2\n return (res)%1000000007\n \nfor t in range(int(input())):\n n,q = list(map(int, input().split()))\n for Q in range(q):\n  i, j = list(map(int,input().split()))\n  i-=1\n  j-=1\n  if (i<j):\n   print(0)\n  else:\n   print((fast_ncr(i,j) * fast_exp(2,(n-i-1)))%1000000007)", "def modInv(b, p):\n return pow(b,p-2,p)\ndef modNcr(n, r, p):\n fact = [1]*(n+1)\n for i in range(1,n+1):\n  fact[i] = (fact[i-1]*i)%p\n return (fact[n]*(modInv(fact[r], p)*modInv(fact[n-r], p))%p)%p\ndef f(n, q):\n p = ((10**9)+7)\n for i in range(q):\n  l,k=list(map(int,input().split()))\n  if l < k:\n   print(0)\n  else:\n   temp = (pow(2,n-l,p)*modNcr(l-1,k-1,p))%p\n   #temp = (2**(n-l))*(ncr(l-1, k-1))\n   #print \"temp=\"+str(temp)\n   print(temp%((10**9)+7))\nt=int(input())\nfor i in range(t):\n n,q=list(map(int,input().split()))\n f(n,q)", "def modInv(b, p):\n return pow(b,p-2,p)\ndef modNcr(n, r, p):\n num = den = 1\n for i in range(r):\n  num = (num*(n-i))%((10**9)+7)\n #print \"num = \"+str(num)\n for i in range(1, r+1):\n  den =(den*i)%((10**9)+7)\n #print \"den = \"+str(den)\n return (num*modInv(den, p))%p\ndef f(n, q):\n p = ((10**9)+7)\n for i in range(q):\n  l,k=list(map(int,input().split()))\n  if l < k:\n   print(0)\n  else:\n   temp = (pow(2,n-l,p)*modNcr(l-1,k-1,p))%p\n   #temp = (2**(n-l))*(ncr(l-1, k-1))\n   #print \"temp=\"+str(temp)\n   print(temp%((10**9)+7))\nt=int(input())\nfor i in range(t):\n n,q=list(map(int,input().split()))\n f(n,q)\n", "import sys\nz=(10**9+7)\n\ncachencr={}\ncachepow={}\nfact=[]\nfact.append(1)\nfor i in range(1,4000):\n fact.append(i*fact[i-1]%z)\n\ndef factorialMod(n):\n ans=1\n for i in range(1,n+1):\n  ans = ans * i % z \n return ans % z\n \ndef nCr(n,r):\n if r>n:\n  return 0\n key = n+r*4001\n if key in cachencr:\n  return cachencr[key]\n else:\n  cachencr[key]=fact[n]*pow(fact[r]*fact[n - r], z - 2, z) % z\n  return cachencr[key]\n  \ndef powc(n):\n if n in cachepow:\n  return cachepow[n]\n else:\n  cachepow[n] = pow(2,n,z)\n  return cachepow[n]\n \nfor _ in range(0,int(input())):\n n,q = list(map(int,input().split()))\n for __ in range(0,q):\n  i,k= list(map(int,sys.stdin.readline().split()))\n  a = nCr(i-1,k-1)\n  b = powc(n-i)\n  print((a*b)%z)", "import sys\nz=(10**9+7)\n\ncachencr=[None]*100000000\ncachepow=[None]*4000\nfact=[]\nfact.append(1)\n\nfor i in range(1,4000):\n fact.append(i*fact[i-1]%z)\n\ndef factorialMod(n):\n ans=1\n for i in range(1,n+1):\n  ans = ans * i % z \n return ans % z\n \ndef nCr(n,r):\n if r>n:\n  return 0\n key = n+(r*10000)\n if cachencr[key]!=None:\n  return cachencr[key]\n else:\n  cachencr[key]=fact[n]*pow(fact[r]*fact[n - r], z - 2, z) % z\n  return cachencr[key]\n  \ndef powc(n):\n if cachepow[n]!=None:\n  return cachepow[n]\n else:\n  cachepow[n] = pow(2,n,z)\n  return cachepow[n]\n \nfor _ in range(0,int(input())):\n n,q = list(map(int,input().split()))\n for __ in range(0,q):\n  i,k= list(map(int,sys.stdin.readline().split()))\n  a = nCr(i-1,k-1)\n  b = powc(n-i)\n  print((a*b)%z)", "import sys\nz=(10**9+7)\n\ncachencr={}\ncachepow={}\nfact=[]\nfact.append(1)\nfor i in range(1,4000):\n fact.append(i*fact[i-1]%z)\n\ndef factorialMod(n):\n ans=1\n for i in range(1,n+1):\n  ans = ans * i % z \n return ans % z\n \ndef nCr(n,r):\n if r>n:\n  return 0\n key = n+r*10000\n if key in cachencr:\n  return cachencr[key]\n else:\n  cachencr[key]=fact[n]*pow(fact[r]*fact[n - r], z - 2, z) % z\n  return cachencr[key]\n  \ndef powc(n):\n if n in cachepow:\n  return cachepow[n]\n else:\n  cachepow[n] = pow(2,n,z)\n  return cachepow[n]\n \nfor _ in range(0,int(input())):\n n,q = list(map(int,input().split()))\n for __ in range(0,q):\n  i,k= list(map(int,sys.stdin.readline().split()))\n  a = nCr(i-1,k-1)\n  b = powc(n-i)\n  print((a*b)%z)\n", "import sys\nz=(10**9+7)\n\ncachencr={}\ncachepow={}\nfact=[]\nfact.append(1)\nfor i in range(1,4000):\n fact.append(i*fact[i-1]%z)\n\ndef factorialMod(n):\n ans=1\n for i in range(1,n+1):\n  ans = ans * i % z \n return ans % z\n \ndef nCr(n,r):\n if r>n:\n  return 0\n key = str(n)+','+str(r)\n if key in cachencr:\n  return cachencr[key]\n else:\n  cachencr[key]=fact[n]*pow(fact[r]*fact[n - r], z - 2, z) % z\n  return cachencr[key]\n  \ndef powc(n):\n if n in cachepow:\n  return cachepow[n]\n else:\n  cachepow[n] = pow(2,n,z)\n  return cachepow[n]\n \nfor _ in range(0,int(input())):\n n,q = list(map(int,input().split()))\n for __ in range(0,q):\n  i,k= list(map(int,sys.stdin.readline().split()))\n  a = nCr(i-1,k-1)\n  b = powc(n-i)\n  print((a*b)% z)", "z=(10**9+7)\n\ncachencr={}\ncachepow={}\nfact=[]\nfact.append(1)\nfor i in range(1,4000):\n fact.append(i*fact[i-1]%z)\n\ndef factorialMod(n):\n ans=1\n for i in range(1,n+1):\n  ans = ans * i % z \n return ans % z\n \ndef nCr(n,r):\n if r>n:\n  return 0\n key = str(n)+','+str(r)\n if key in cachencr:\n  return cachencr[key]\n else:\n  cachencr[key]=fact[n]*pow(fact[r]*fact[n - r], z - 2, z) % z\n  return cachencr[key]\n  \ndef powc(n):\n if n in cachepow:\n  return cachepow[n]\n else:\n  cachepow[n] = pow(2,n,z)\n  return cachepow[n]\n \nfor _ in range(0,int(input())):\n n,q = list(map(int,input().split()))\n for __ in range(0,q):\n  i,k= list(map(int,input().split()))\n  a = nCr(i-1,k-1)\n  b = powc(n-i)\n  print((a*b)% z)", "z=(10**9+7)\n\nfact=[]\nfact.append(1)\nfor i in range(1,4000):\n fact.append(i*fact[i-1]%z)\n\ndef factorialMod(n):\n ans=1\n for i in range(1,n+1):\n  ans = ans * i % z \n return ans % z\n \ndef nCr(n,r):\n if r>n:\n  return 0\n return fact[n]*pow(fact[r]*fact[n - r], z - 2, z) % z\n\nfor _ in range(0,int(input())):\n n,q = list(map(int,input().split()))\n for __ in range(0,q):\n  i,k= list(map(int,input().split()))\n  a = nCr(i-1,k-1)\n  b = pow(2,n-i,z)\n  print((a*b)% z)\n", "fact = [1]\n\ndef factorial(n):\n l = len(fact)\n i = n - l\n if (i<1):\n  i = 0\n for x in range(i+1):\n  fact.append(fact[-1]*l)\n  l+=1\n return fact[n]\n \ndef nCr(n,r):\n return (factorial(n) / factorial(r) / factorial(n-r))%1000000007\n\ndef fast_exp(base,e):\n res = 1\n while (e>0):\n  if (e%2==1):\n   res = res*base%1000000007\n  base = base*base%1000000007\n  e/=2\n return (base*res)%1000000007\n\nfor t in range(int(input())):\n n,q = list(map(int, input().split()))\n for Q in range(q):\n  i, j = list(map(int,input().split()))\n  i-=1\n  j-=1\n  if (i<j):\n   print(0)\n  else:\n   print((nCr(i,j) * 2**(n-i-1))%1000000007)", "def nCr(n,r):\n  if n < r :  \n    return 0\n  M = 10**9 + 7\n  ret = fact[n] * pow( fact[r], M-2, M ) * pow( fact[n-r], M-2, M )\n  return ret % M\n\nMOD = 10**9 + 7\n\nfact = [1] * 4001\nfor i in range(1,4001):\n  fact[i] = ( fact[i-1] * i ) % MOD\n\n\nfor t in range(eval(input())):\n  \n  n,q = list(map( int, input().split() ))\n    \n  for qq in range(q):\n    \n    i,k = list(map( int, input().split() ))\n    \n    print(( nCr( i-1, k-1 ) * pow( 2, n-i , MOD ) ) % MOD)"]