["\n\n\ndef powerset(s):\n    n = len(s)\n    masks = [1 << j for j in range(n)]\n    for i in range(2**n):\n        yield [j + 1 for j in range(n) if (masks[j] & i)]\n\n\ndef is_power2(num):\n    return num != 0 and ((num & (num - 1)) == 0)\n\n\ndef special(l):\n    n = len(l)\n    for i in range(n):\n        lis = [i + 1]\n        yield lis\n        for j in range(i + 1, n):\n            p = l[j] / l[i]\n            if p <= 1 or int(p) != p:\n                continue\n            lis = [i + 1, j + 1]\n            yield lis\n            sk = (j + 1) * int(p)\n            while sk <= n:\n                lis.append(sk)\n                sk *= int(p)\n                yield lis\n\n\ndef expIndices(l):\n    a = list(zip(l, l[1:]))\n    if len(a) == 0:\n        return True\n    else:\n        p = a[0][1] / a[0][0]\n        if p <= 1 or int(p) != p:\n            return False\n        for i in range(1, len(a)):\n            if a[i][1] / a[i][0] != p:\n                return False\n        return True\n\n\ndef main():\n    for _ in range(eval(input())):\n        S = input()\n        count = 0\n\n        for i in special(range(1, len(S) + 1)):\n            s = [S[j - 1] for j in i]\n            if s == s[::-1]:\n                count += 1\n        print(count)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def checkPalindrome(string):\n    if(string==string[::-1]):\n        return 1\n    else:\n        return 0\nt=int(eval(input()))\nwhile(t):\n    ip_string=input()\n    length_of_str=len(ip_string)\n    p=2\n    count=length_of_str\n    while(p<=length_of_str):\n        for i in range(1,length_of_str+1):\n            temp_str=ip_string[i-1]\n            j=i*p\n            while(j<=length_of_str):\n                temp_str+=ip_string[j-1]\n                if(checkPalindrome(temp_str)==1):\n                    count+=1\n                j=j*p\n        \n        p+=1\n    print(count)\n    t-=1", "import itertools\ndef checkPalindrome(string):\n    if(string==string[::-1]):\n        return 1\n    else:\n        return 0\n    \n    \nt=int(eval(input()))\nwhile(t):\n    ip_string=input()\n    #print(ip_string)\n    length_of_str=len(ip_string)\n    p=2\n    count=length_of_str\n    while(p<=length_of_str):\n        for i in range(1,length_of_str+1):\n            temp_str=ip_string[i-1]\n            indx_chk=str(i)\n            j=i*p\n            while(j<=length_of_str):\n                temp_str+=ip_string[j-1]\n                indx_chk+=str(j)\n                #print(temp_str)\n                if(checkPalindrome(temp_str)==1):\n                    #print(temp_str)\n                    #print(indx_chk)\n                    count+=1\n                j=j*p\n                \n                #print(\"i=\",i,\"j=\",j)\n                #print(ip_string[i-1:j+1])\n        \n        p+=1\n    print(count)\n    t-=1"]