["import numpy as np\n\ndef sum_of_threes(n):\n    s=np.base_repr(n,3)\n    if '2' in s: return 'Impossible'\n    return '+'.join(['3^{}'.format(i) for i,d in enumerate(s[::-1]) if d=='1'][::-1])\n", "def sum_of_threes(n):\n    k, p = 0, []\n    while n >= 3 ** k:\n        k += 1\n    while k >= 0:\n        k -= 1\n        if n >= 3 ** k:\n            p.append(\"3^%d\" % k)\n            n -= 3 ** k\n    return \"Impossible\" if n else '+'.join(p)", "import math\n\ndef sum_of_threes(n):\n    p = []\n    while n:\n        x, y = math.log(n,3), n%3\n        x = int(x + 1 *(abs(x%1-1) < 1e-8))\n        if y > 1  or p and  x == p[-1]: return \"Impossible\"\n        p.append(x)\n        n = n - 3**x\n    \n    return '+'.join(\"3^{}\".format(x) for x in sorted(p, reverse=True))", "import math\n\ndef sum_of_threes(n):\n    res = []\n    for i in range(round(math.log(n, 3)), -1, -1):\n        if 3**i <= n:\n            res.append(i)\n            n -= 3**i\n            if n == 0:\n                return '+'.join('3^{}'.format(i) for i in res)\n    return 'Impossible'", "from numpy import base_repr\n\ndef gen(s):\n    for i,c in zip(reversed(range(len(s))), s):\n        if c == '2': raise Exception\n        if c == '1': yield f\"3^{i}\"\n\ndef sum_of_threes(n):\n    try: return '+'.join(gen(base_repr(n, 3)))\n    except: return \"Impossible\"", "from bisect import bisect\n\ndef sum_of_threes(n, xs=[3**i for i in range(34)]):\n    result = []\n    while n >= 1:\n        x = bisect(xs, n) - 1\n        n -= 3 ** x\n        result.append(x)\n    return 'Impossible' if len(result) != len(set(result)) else '+'.join(f'3^{x}' for x in result)", "from math import log\ndef sum_of_threes(n):\n    out = []\n    while n > 0:\n        next = int(log(n, 3))\n        next += 1 if pow(3, next+1) <= n else 0\n        if out and next == out[-1]: return \"Impossible\"\n        out.append(next)\n        n -= pow(3, next)\n    \n    return '+'.join(\"3^{}\".format(i) for i in out)\n", "def sum_of_threes(n):\n    li = []\n    while n >= 1:\n        t = 0\n        while 3 ** t <= n : t += 1\n        n -= 3 ** (t - 1)\n        li.append(f\"3^{t - 1}\")\n    return [\"+\".join(li),\"Impossible\"][len(li)!=len(set(li))] ", "from functools import reduce\n\ndef sum_of_threes(n):\n  return ['Impossible' if r else '+'.join(xs) for r, xs in [reduce(lambda v, x: (v[0] - 3**x, v[1] + [f'3^{x}']) if v[0] >= 3**x else v, range(34)[::-1], (n, []))]][0]"]