["def super_sum(D, N):\n    #Number of possible combinations of D length from set [0...N]\n    num = pow(N,D)\n    #2x average value of a combination; 2x because dividing results in float and loss of precision\n    dblAvg = D*(N-1)\n    #Multiply number of possible combinations by the avergae value; now use true division to ensure result is an integer\n    return num*dblAvg//2", "def super_sum(D, N):\n    return (D*(N-1)*(N**D))//2", "def super_sum(d,n):\n    return (n**~-d*n*~-n*d)>> 0 >> 1", "def super_sum(D, N):\n    s = N * (N-1) // 2\n    return s * D * N ** (D-1)", "def super_sum(D, N):\n    return (N ** D) * (D) * ((N - 1) // 2) if N % 2 else ((N ** D) // 2) * (D) * (N - 1)", "def super_sum(D, N):\n    return ((N - 1) * (N ** D * D)) // 2", "super_sum=lambda d,n:(((n-1)*n//2)*(n**(d-1)))*d", "def super_sum(D, N):\n    #Make Gauss proud!\n    count = 0\n    result = 0\n    while ((N -1) - count) >= 1:\n        result += ((N-1) - count) * (N ** (D -1))\n        count += 1\n    return result * D", "def super_sum(D, N):\n    summe=0\n    for i in range(0,N):\n        summe+=i\n    erg=summe*D*(N**(D-1))\n    return erg\n"]