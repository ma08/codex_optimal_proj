["# cook your dish here\nT=int(input())\nfor k in range(0,T):\n N=int(input())\n matrix=[]\n for i in range(0,N):\n  a=list(map(int, input().split()))\n  matrix.append(a)\n max_trace = []\n for i in range(0,N):\n  trace1=0\n  trace2=0\n  for j in range(0,i+1):\n   trace1+=matrix[j][N+j-i-1]\n   trace2+=matrix[N+j-i-1][j]\n   max_trace.append(trace1)\n   max_trace.append(trace2)\n print(max(max_trace))\n\n \n", "t = int(input())\n\nfor _ in range(t):\n n = int(input())\n \n a = []\n for i in range(n):\n  temp = [int(x) for x in input().split()]\n  a.append(temp)\n \n  # print(a)\n \n trace = 0\n \n i = 0\n for j in range(n):\n  r = i\n  c = j\n  \n  m = a[r][c]\n  \n  while(r<n-1 and c<n-1):\n   r += 1\n   c += 1\n   \n   m += a[r][c]\n  \n  # print(m)\n  if(m > trace):\n   trace = m\n \n i = 0\n for j in range(1, n):\n  r = j\n  c = i\n  \n  m = a[r][c]\n  \n  while(r<n-1 and c<n-1):\n   r += 1\n   c += 1\n   \n   m += a[r][c]\n  \n  # print(m)\n  \n  if(m > trace):\n   trace = m\n \n print(trace)", "# cook your dish here\nfor i in range(int(input())):\n h = int(input())\n f = []\n ans = []\n for j in range(0,h):\n  f.append(list(map(int,input().split())))\n for k in range(0,h):\n  sum1 = 0\n  sum2 = 0\n  for l in range(0,k+1):\n   sum1 += f[l][h+l-k-1]\n   sum2 += f[h+l-k-1][l]\n   \n  ans.append(sum1)\n  \n  ans.append(sum2)\n  \n print(max(ans))\n", "for i in range(int(input())):\n h = int(input())\n f = []\n ans = []\n for j in range(0,h):\n  f.append(list(map(int,input().split())))\n for k in range(0,h):\n  sum1 = 0\n  sum2 = 0\n  for l in range(0,k+1):\n   sum1 += f[l][h+l-k-1]\n   sum2 += f[h+l-k-1][l]\n   \n  ans.append(sum1)\n  \n  ans.append(sum2)\n  \n print(max(ans))\n", "t = int(input())\nfor i in range(t):\n n = int(input())\n matrix = []\n for j in range(n):\n  a = list(map(int, input().split(' ')))\n  matrix.append(a)\n final_sum = 0 \n for k in range(n):\n  sum1 = 0\n  sum2 = 0\n  for p in range(0,k+1):\n   sum1 += matrix[p][n+p-k-1]\n   sum2 +=matrix[n+p-k-1][p]\n  sumo = max(sum1,sum2)\n  final_sum = max(sumo,final_sum)\n print(final_sum) ", "# cook your dish here\nfor i in range(int(input())):\n h = int(input())\n f = []\n ans = []\n for j in range(0,h):\n  f.append(list(map(int,input().split())))\n for k in range(0,h):\n  sum1 = 0\n  sum2 = 0\n  for l in range(0,k+1):\n   sum1 += f[l][h+l-k-1]\n   # print(sum1)\n   sum2 += f[h+l-k-1][l]\n   # print(sum2)\n  ans.append(sum1)\n  # print(ans)\n  ans.append(sum2)\n  # print(ans)\n print(max(ans))", "for i in range(int(input())):\n h = int(input())\n f = []\n su = []\n for j in range(0,h):\n  f.append(list(map(int,input().split())))\n for k in range(0,h):\n  s = 0\n  s1 = 0\n  for l in range(0,k+1):\n   s += f[l][h+l-k-1]\n   s1 += f[h+l-k-1][l]\n  su.append(s)\n  su.append(s1)\n print(max(su))", "# cook your dish here\nfor i in range(int(input())):\n h = int(input())\n f = []\n su = []\n for j in range(0,h):\n  f.append(list(map(int,input().split())))\n for k in range(0,h):\n  s = 0\n  s1 = 0\n  for l in range(0,k+1):\n   s += f[l][h+l-k-1]\n   s1 += f[h+l-k-1][l]\n  su.append(s)\n  su.append(s1)\n print(max(su))", "# cook your dish here\nt = int(input())\nwhile(t):\n  t-=1\n  n, = list(map(int,input().split()))\n  arr =[]\n  for i in range(n):\n   arr.append([int(x) for x in input().split()])\n  for i in range(n-1):\n   for j in range(n-1):\n    arr[i+1][j+1]+=arr[i][j]\n  ans = -float('inf')\n  for i in range(n):\n   for j in range(n):\n    ans=max(ans,arr[i][j])\n  print(ans)\n", "t = int(input())\nwhile(t):\n  t-=1\n  n, = list(map(int,input().split()))\n  arr =[]\n  for i in range(n):\n   arr.append([int(x) for x in input().split()])\n  for i in range(n-1):\n   for j in range(n-1):\n    arr[i+1][j+1]+=arr[i][j]\n  ans = -float('inf')\n  for i in range(n):\n   for j in range(n):\n    ans=max(ans,arr[i][j])\n  print(ans)\n", "# cook your dish here\nfor i in range(int(input())):\n h = int(input())\n f = []\n su = []\n for j in range(0,h):\n  f.append(list(map(int,input().split())))\n for k in range(0,h):\n  s = 0\n  s1 = 0\n  for l in range(0,k+1):\n   s += f[l][h+l-k-1]\n   s1 += f[h+l-k-1][l]\n  su.append(s)\n  su.append(s1)\n print(max(su))", "def trace_of_matrix_v2(matrix):\n _list = []\n for diff in range(len(matrix)):\n  sum1, sum2, index = (0, 0, diff)\n  for i in range(len(matrix) - diff):\n   sum1 += matrix[index][i]\n   sum2 += matrix[i][index]\n   index += 1\n  _list.append(sum1)\n  _list.append(sum2)\n return max(_list)\n\n\ndef __starting_point():\n t = int(input())\n for _ in range(t):\n  n = int(input())\n  _list = []\n  for _ in range(n):\n   _list.append(list(map(int, input().split())))\n  print(trace_of_matrix_v2(_list))\n__starting_point()", "# cook your dish here\ntests = int(input())\n\nfor test in range(tests):\n N = int(input())\n\n a = []\n for row in range(N):\n  a.append([int(x) for x in input().split()])\n \n max_a = []\n for i in range(N):\n  max_c = 0\n  count = i\n  for j in range(N-i):\n   if count < N:\n    max_c += a[j][count]\n   count += 1\n\n  max_a.append(max_c)\n\n for i in range(N):\n  if i == 0: continue\n\n  max_c = 0\n  count = i\n  for j in range(N-i):\n   if count < N:\n    max_c += a[count][j]\n   count += 1\n  max_a.append(max_c)\n  \n print(max(max_a))", "import numpy as np\n'''\ndef findTrace(i,j,k):\n    trace = 0\n    for z in range(0,k+1):\n     trace+=matrix[i+z][j+z]\n    return trace\n'''\n\ndef traceSum(matrix,n):\n sum,round,j = 0,n-1,0\n i = round\n sumArray = []\n \n while (i>=0):\n  while(i<n):\n   sum+=matrix[i][j]\n   i+=1\n   j+=1\n   \n  round-=1\n  i,j = round,0\n  sumArray.append(sum)\n  sum = 0\n  \n round = n-1\n i,j = 0,round\n \n while (j>0):\n  while(j<n):\n   sum += matrix[i][j]\n   i+=1\n   j+=1\n  \n  round-=1\n  i,j = 0,round\n  sumArray.append(sum)\n  sum = 0\n return max(sumArray)\n\n\n \nt = int(input())\nfor i in range(t):\n #Array Size is n\n n = int(input())\n a=[]\n \n for i in range(0,n):\n  ele = list(map(int,input().split()))\n  a.append(ele)\n  \n matrix = np.array(a).reshape(n,n)\n \n #print(matrix)\n '''\n    This worked but had a n^3 complexity and gave an error of time limit \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0exceeded on submission.\n    trace = 0\n    for i in range(0,n):   #Row number\n     for j in  range(0,n):   #Column number\n      for k in range(0,n):   #Length of Sub-matrix\n       if i+k<n and j+k<n:\n        trace = max(trace,findTrace(i,j,k))  #Check trace of every \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sub-matrix & get max\n        '''\n print(traceSum(matrix,n))\n \n", "# cook your dish here\na=int(input())\nfor i in range(0,a):\n h=int(input())\n f=[]\n su=[]\n for j in range(0,h):\n  f.append(list(map(int,input().split())))\n for k in range(0,h):\n  s=0\n  s1=0\n  for l in range(0,k+1):\n   s=s+f[l][h+l-k-1]\n   s1=s1+f[h+l-k-1][l]\n  su.append(s)\n  su.append(s1)\n print(max(su))", "# cook your dish here\na=int(input())\nfor i in range(0,a):\n h=int(input())\n f=[]\n su=[]\n for j in range(0,h):\n  f.append(list(map(int,input().split())))\n for k in range(0,h):\n  s=0\n  s1=0\n  for l in range(0,k+1):\n   s=s+f[l][h+l-k-1]\n   s1=s1+f[h+l-k-1][l]\n  su.append(s)\n  su.append(s1)\n print(max(su))", "for t in range(int(input())):\n l = int(input())\n m = []\n for r in range(l):\n  m.append(list(map(int,input().split())))\n maxsum = 0\n for i in range(l):\n  s1 = 0\n  s2 = 0\n  for j in range(i+1):\n   s1 += m[j][l+j-i-1]\n   s2 += m[l+j-i-1][j]\n  if maxsum<s1:\n   maxsum=s1\n  if maxsum<s2:\n   maxsum=s2\n \n   \n print(maxsum)", "# cook your dish here\nt=int(input())\nfor i in range(t):\n n=int(input())\n mat=[]\n for i in range(n):\n  l=list(map(int,input().split()))\n  mat.append(l)\n ans=[]\n for x in range(n-1,-1,-1):\n  s=0\n  for i,j in zip(range(n),range(x,n)):\n   s+=mat[i][j]\n  ans.append(s)\n for y in range(1,n):\n  s1=0\n  for i,j in zip(range(y,n),range(n)):\n   s1+=mat[i][j]\n  ans.append(s1)\n print(max(ans))", "t=int(input())\nfor i in range(t):\n n=int(input())\n mat=[]\n for i in range(n):\n  l=list(map(int,input().split()))\n  mat.append(l)\n ans=[]\n for x in range(n-1,-1,-1):\n  s=0\n  for i,j in zip(list(range(n)),list(range(x,n))):\n   s+=mat[i][j]\n  ans.append(s)\n for y in range(1,n):\n  s1=0\n  for i,j in zip(list(range(y,n)),list(range(n))):\n   s1+=mat[i][j]\n  ans.append(s1)\n print(max(ans))\n", "for _ in range(int(input())):\n n=int(input())\n m=[]\n for i in range(n):\n  m.append(list(map(int,input().split())))\n lo=[0 for i in range(n)]\n up=[0 for i in range(n)]\n t=0\n for i in range(n):\n  for j in range(n):\n   if i>j:\n    lo[i-j]=lo[i-j]+m[i][j]\n   elif i<j:\n    up[j-i]=up[j-i]+m[i][j]\n   else:\n    t=t+m[i][j]\n print(max(lo+up+[t]))"]