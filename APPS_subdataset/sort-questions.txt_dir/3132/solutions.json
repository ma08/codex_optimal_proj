["from itertools import chain, zip_longest\n\ndef alternate_sort(l):\n    l=sorted(l,key=abs)\n    p,n=[n for n in l if n>=0],[n for n in l if n<0]\n    return [n for n in chain(*zip_longest(n,p)) if n is not None]", "def alternate_sort(l):\n    a = sorted([i for i in l if i >= 0])[::-1]\n    b = sorted([i for i in l if i not in a])\n    res = []\n    while len(a) or len(b):\n        if len(b):\n            res.append(b.pop())\n        if len(a):\n            res.append(a.pop())\n    return res", "from itertools import chain, zip_longest\ndef alternate_sort(l):\n    return list(filter(lambda x: x is not None, chain(*zip_longest( sorted(filter(lambda x: x<0,l))[::-1],sorted(filter(lambda x: x>-1,l))))))", "from itertools import chain, zip_longest\n\n# Credit to falsetru for the sentinel\nsentinel = object()\ndef alternate_sort(l):\n    positive = sorted(filter((0).__le__, l))\n    negative = sorted(filter((0).__gt__, l), reverse=True)\n    return list(filter(lambda x: x is not sentinel, chain.from_iterable(zip_longest(negative, positive, fillvalue=sentinel))))", "def alternate_sort(l):\n    res = sorted(l, key=lambda x: abs(x))\n    n = 1\n    new_l = []\n    while res:\n        for x in res:\n            if (x>=0, x<0)[n%2]:\n                new_l.append(x)\n                res.remove(x)\n                break\n        n += 1\n    return new_l", "def alternate_sort(list):\n    positive_list = []\n    negative_list = []\n    for number in list:\n        if number >= 0:\n            positive_list.append(number)\n        else:\n            negative_list.append(number)\n    positive_list.sort()\n    negative_list.sort(reverse = True)\n    i = 0\n    for negative in negative_list:\n        positive_list.insert(i * 2, negative)\n        i += 1\n    return positive_list\n", "def alternate_sort(l):\n    xs = sorted(l)\n    pos, neg, result = [], [], []\n    for x in xs:\n        [pos, neg][x < 0].append(x)\n    while pos and neg:\n        result.extend([neg.pop(), pos.pop(0)])\n    return result + neg[::-1] + pos", "def alternate_sort(l):\n    negatives = sorted((n for n in l if n < 0), key=abs)\n    positives = sorted(n for n in l if n > -1)\n    return [lst[i]\n            for i in range(max(len(negatives), len(positives)))\n            for lst in (negatives, positives)\n            if i < len(lst)]", "def alternate_sort(l):\n    new=[]\n    neg=[x for x in l if x < 0]\n    neg.sort()\n    neg=neg[::-1]\n    pos=[x for x in l if x >= 0]\n    pos.sort()\n    while neg or pos:\n      if neg:\n        new.append(neg.pop(0))\n      if pos:\n        new.append(pos.pop(0))\n    return (new)", "def alternate_sort(l):\n    l = sorted(l, key=abs)\n    positives = [n for n in l if n >= 0]\n    negatives = [n for n in l if n < 0]\n\n    result = []\n    while positives and negatives:\n        result.append( negatives.pop(0) )\n        result.append( positives.pop(0) )\n    return result + positives + negatives"]