["def maximum_product(arr):\n    if arr.count(0) > 1:\n        return min(arr)\n    neg = [n for n in arr if n < 0]\n    pos = [n for n in arr if n >= 0]\n    if len(neg) % 2:\n        return min(neg) if 0 in arr else max(neg)\n    else:\n        return min(pos) if pos else min(neg)", "from operator import mul\nfrom functools import reduce\n\ndef maximum_product(arr):\n    prod_dct = { x: reduce(mul, arr[:i]+arr[i+1:], 1) for i,x in enumerate(arr)}\n    return max(arr, key=lambda x:(prod_dct[x],-x))", "from functools import reduce\nfrom operator import mul\n\ndef maximum_product(arr):\n    l = [(reduce(mul, arr[:i] + arr[i+1:]),j) for i,j in enumerate(arr)]\n    return max(l, key=lambda x: (x[0], -x[1]))[1]", "import numpy as np\ndef maximum_product(arr):\n    return -max((np.multiply.reduce(arr[:c] + arr[c + 1:]), -a)  for c, a in enumerate(arr))[1]", "from functools import reduce\nfrom operator import mul\n\ndef maximum_product(arr):\n    prods = {}\n    \n    for e in sorted(set(arr))[::-1]:\n        a = arr[:]\n        a.remove(e)\n        prods[reduce(mul, a)] = e\n    \n    return prods[max(prods)]", "from functools import reduce\nfrom operator import mul\n\ndef maximum_product(arr):\n    omit_prod = lambda i: reduce(mul, arr[:i] + arr[i + 1:])\n    return sorted([(omit_prod(i), -n, n) for i, n in enumerate(arr)], reverse=True)[0][2]\n", "def maximum_product(arr):\n    pos = [x for x in arr if x > 0]\n    neg = [x for x in arr if x < 0]\n    if 0 in arr:\n        return min(neg) if len(neg) % 2 or (arr.count(0) - 1 and len(neg)) else 0\n    if len(neg) % 2: return max(neg)\n    return min(pos) if len(pos) else min(neg)", "def maximum_product(arr):\n    a = [n for n in arr if n < 0]\n    b = [n for n in arr if n > 0]\n    if not a:\n        return min(arr)\n    if len(a) % 2:\n        if 0 in arr:\n            return min(a)\n        return max(a)\n    if not len(a) % 2:\n        if arr.count(0) == 1:\n            return 0\n        if arr.count(0) > 1:\n            return min(arr)\n        if b:\n            return min(b)\n    if b:\n        return max(b)\n    return min(arr)"]