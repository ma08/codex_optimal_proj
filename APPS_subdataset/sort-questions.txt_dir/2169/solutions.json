["def check(num1, num2, p, k):\n    v = num1 + num2\n    v *= num1 * num1 + num2 * num2\n    v %= p\n    v += p\n    v %= p\n    return v == k % p\n\ndef __starting_point():\n\n    n, p, k = (int(x) for x in input().split())\n    idx___number = [int(x) for x in input().split()]\n\n    idx___precount = [((pow(x, 4, p) - k * x) % p + p) % p for x in idx___number]\n\n    met_precount___vals = {}\n    ans = 0\n    for number, precount in zip(idx___number[::-1], idx___precount[::-1]):\n        if precount not in met_precount___vals:\n            met_precount___vals[precount] = []\n        else:\n            for val in met_precount___vals[precount]:\n                if check(number, val, p, k):\n                    ans += 1\n        met_precount___vals[precount].append(number)\n    print(ans)\n\n__starting_point()", "from collections import Counter as C\nN, P, K = list(map(int, input().split()))\nA = [int(a) for a in input().split()]\nX = C([(a**4-K*a)%P for a in A])\nans = 0\nfor x in X:\n    ans += X[x]*(X[x]-1)//2\nprint(ans)\n", "import sys\ninput = sys.stdin.readline\n\nn,p,k=list(map(int,input().split()))\nA=list(map(int,input().split()))\n\nB=[(a**4-k*a)%p for a in A]\n\nfrom collections import Counter\nC=Counter(B)\n\n\nprint(sum([l*(l-1)//2 for l in list(C.values())]))\n", "n,p,k=map(int,input().split())\nd={}\nans=0\nb=list(map(int,input().split()))\nfor i in range(n):\n    a=b[i]\n    val=(a**4-k*a)%p\n    if d.get(val)==None:\n        d[val]=1\n    else:\n        ans+=d[val]\n        d[val]+=1\nprint(ans)", "from collections import defaultdict\nn,p,k = list(map(int,input().split()))\nd = defaultdict(int)\na = list(map(int,input().split()))\nans = 0\nfor i in a:\n    b = pow(i,4,p)\n    temp = (i * k) % p\n    fin = (b - temp) % p\n    ans += d[fin]\n    d[fin] += 1\nprint(ans)\n", "l1 = input().split()\nn = int(l1[0])\np = int(l1[1])\nk = int(l1[2])\nl = input().split()\nA = {}\n\ncount = 0\n\ne = []\nfor i in range(n):\n    b = int(l[i])\n    t = (b*b % p)*(b*b % p) - (k*b % p)\n    t = t%p\n    if t in A:\n        A[t] += 1\n    else:\n        A[t] = 1\n\nfor x in A:\n    count += int((A[x]*(A[x]-1))/2)\nprint(count)\n", "from sys import stdin\nn,p,k=list(map(int,stdin.readline().strip().split()))\ns=list(map(int,stdin.readline().strip().split()))\nst=set()\nd=dict()\nfor i in s:\n    x=(i**4-i*k)%p\n    if x in st:\n        d[x]+=1\n    else:\n        st.add(x)\n        d[x]=1\ns.sort()\nans=0\nfor i in s:\n    x=(i**4-i*k)%p\n    if x in st:\n        ans+=(d[x]-1)*d[x]//2\n        d[x]=0\nprint(ans)\n    \n", "from collections import Counter\ndef pr(a):return (a*(a-1))//2\nn,p,k=list(map(int,input().split()))\na=list(map(int,input().split()))\na=Counter([(x**4-x*k+p)%p for x in a])\nprint(sum(pr(a[x]) for x in a))\n", "from collections import Counter as C\nN, P, K = list(map(int, input().split()))\nA = [int(a) for a in input().split()]\nX = C([(a**4-K*a)%P for a in A])\nans = 0\nfor x in X:\n    ans += X[x]*(X[x]-1)//2\nprint(ans)\n\n", "n,p,k=list(map(int,input().split()));\npairs = {}\ncount =0\nfor i in map(int,input().split()):\n    t=(i**4-k*i)%p\n    if t in pairs:\n        count = count + pairs[t]\n        pairs[t] += 1\n\n    else:\n        pairs[t] = 1\n\nprint(count)\n", "from collections import Counter\n\nn, p, k = map(int, input().split())\na = map(int, input().split())\nans = 0\nfor k, v in Counter([(x ** 4 - x * k) % p for x in a]).items() :\n    ans += (v * (v - 1)) >> 1\nprint(ans)", "n, p, k = map(int, input().split())\n\na = list(map(int, input().split()))\n\nb = dict()\n\nans = 0\nfor i in a:\n    j = (i ** 4 - k * i) % p\n    c = b.get(j, 0)\n    ans += c\n    b[j] = c + 1\nprint(ans)", "n, p, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nd = dict()\nfor i in range(n):\n    now = a[i] * a[i] * a[i] * a[i] - k * a[i]\n    now %= p\n    if now in d:\n        d[now] += 1\n    else:\n        d[now] = 1\nans = 0\nfor i in range(n):\n    now = a[i] * a[i] * a[i] * a[i] - k * a[i]\n    now %= p\n    ans += d[now] - 1\nans //= 2\nprint(ans)\n", "def expmod(a, n, m):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return a%m\n    res = n/2\n    rem = n%2\n    temp = expmod(a, res, m)\n    if rem == 1:\n        return temp*temp*a % m\n    else:\n        return temp*temp % m\n\nn, p, k = list(map(int, input().split()))\n\n\na= list(map(int, input().split()))\nholes = {}\nres = 0\nfor i in range(0, n):\n    temp = ((expmod(a[i], 4, p) - k*a[i])%p + p)%p\n    if temp in holes:\n        res+=holes[temp]\n        holes[temp]+=1\n    else:\n        holes[temp]=1\n\nprint(int(res))\n", "from collections import Counter\ndef pr(a):return (a*(a-1))//2\nn,p,k=map(int,input().split())\na=map(int,input().split())\na=Counter([(x**4-x*k+p)%p for x in a])\nprint(sum(pr(a[x]) for x in a))", "from collections import Counter\nN, mod, K = map(int, input().split())\nA = list(map(int, input().split()))\nC = Counter()\nfor a in A:\n    C[(a**4 - a*K)%mod] += 1\n\nans = 0\n\nfor v in C.values():\n    ans += v*(v-1)//2\n\nprint(ans)", "line = input()\nline = line.split()\nline = list([int(x) for x in line])\nn = line[0]\np = line[1]\nk = line[2]\n\ninputs = input()\ninputs = inputs.split()\ninputs = list([int(x) for x in inputs])\n\ndict = {}\n\ncounter = 0\nfor i in range(n):\n    exped = (((inputs[i] ** 2) ** 2) - k * inputs[i]) % p\n\n    if dict.get(exped, None) is None:\n        dict[exped] = 0\n\n    counter = counter + dict[exped]\n    dict[exped] = dict[exped] + 1\n\nprint(counter)\n", "from collections import defaultdict\n\nn, p, k = map(int, input().split())\nkeys = list(map(int, input().split()))\ndictionary = defaultdict(lambda: 0)\nanswer = 0\n\nfor key in keys:\n    answer += dictionary[(key ** 4 - k * key) % p]\n    dictionary[(key ** 4 - k * key) % p] += 1\n\nprint(answer)", "from collections import defaultdict\n\nn, p, k = map(int, input().split())\nkeys = list(map(int, input().split()))\ndictionary = defaultdict(lambda: 0)\nanswer = 0\n\nfor key in keys:\n    answer += dictionary[(pow(key, 4, p) - k * key) % p]\n    dictionary[(key ** 4 - k * key) % p] += 1\n\nprint(answer)", "from collections import defaultdict\n\nn, p, k = map(int, input().split())\nkeys = list(map(int, input().split()))\ndictionary = defaultdict(lambda: 0)\nanswer = 0\n\nfor key in keys:\n    answer += dictionary[(pow(key, 4, p) - k * key) % p]\n    dictionary[(key ** 4 - k * key) % p] += 1\n\nprint(answer)", "import collections\n\nn,p,k=map(int,input().split())\narr=list(map(int,input().split()))\ndic=collections.defaultdict(int)\nfor i in range(n):\n  tmp=arr[i]**4-arr[i]*k\n  tmp%=p\n  dic[tmp]+=1\nans=0\nfor key in dic.keys():\n  ans+=(dic[key]*(dic[key]-1))//2\nprint(ans)", "n, p, k = map(int, input().split())\na = list(map(int, input().split()))\nd = {}\nfor x in a:\n\tv = (x**4 - k*x) % p\n\tif v < p:\n\t\tv += p\n\tif v not in d:\n\t\td[v] = 1\n\telse:\n\t\td[v] += 1\ns = 0\nfor v in d.values():\n\ts += v * (v-1) // 2\nprint(s)"]