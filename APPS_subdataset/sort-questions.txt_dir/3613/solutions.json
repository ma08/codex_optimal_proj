["def is_substitution_cipher(s1, s2):\n    return len(set(s1)) == len(set(s2)) == len(set(zip(s1, s2)))", "def f(s1, s2):\n    d = {}\n    for a, b in zip(s1, s2):\n        if (a in d and d[a] != b):\n            return False\n        d[a] = b\n    return True\n\ndef is_substitution_cipher(s1, s2):\n    return f(s1, s2) and f(s2, s1)", "def is_substitution_cipher(s1, s2): \n  translation = {}\n  back_translation = {}\n  for ch1, ch2 in zip(s1, s2): \n    if (ch1 in translation): \n      if (not translation[ch1] == ch2): return False\n    else: \n      translation[ch1] = ch2\n    if (ch2 in back_translation): \n      if (not back_translation[ch2] == ch1): return False\n    else: \n      back_translation[ch2] = ch1\n  return True", "def is_substitution_cipher(s1, s2):\n    return len(set(s1)) == len(set(s2)) == len( set((a,b) for a,b in zip(s1, s2)) )", "def is_substitution_cipher(s1, s2):\n    plain, cipher = {}, {}\n    for a, b in zip(s1, s2):\n        if plain.setdefault(a, b) != b or cipher.setdefault(b, a) != a:\n            return False\n    return True", "def is_substitution_cipher(s1, s2):\n    dict1={}\n    dict2={}\n    for i,j in zip(s1, s2):\n        dict1[i]=dict1.get(i, 0)+1\n        dict2[j]=dict2.get(j, 0)+1\n        if len(dict1)!=len(dict2):\n            return False\n    return True", "def is_substitution_cipher(s1, s2):\n    return s2 == s1.translate(str.maketrans(s1, s2)) \\\n            and s1 == s2.translate(str.maketrans(s2, s1))", "def is_substitution_cipher(a, b):\n    d1, d2 = {}, {}\n    for x, y in zip(a, b):\n        if x in d1 and d1[x] != y or y in d2 and d2[y] != x:\n            return 0\n        d1[x] = y\n        d2[y] = x\n    return 1"]