["def solution(nums):\n    return sorted(nums) if nums else []", "solution = lambda l: sorted(l) if l else []\n", "def solution(nums):\n    return sorted(nums or [])", "def solution(nums):\n    return [] if nums is None else sorted(nums)", "def solution(nums):\n    return sorted(nums) if isinstance(nums, list) else []", "def solution(nums):\n    if not nums:\n        return []\n    return sorted(nums)", "def solution(nums):\n    if nums == None:\n        return []\n    if len(nums) < 2:\n        return nums\n    pivo = nums[0]\n    less = [i for i in nums[1:] if i < pivo]\n    great = [i for i in nums[1:] if i > pivo]\n    return solution(less) + [pivo] + solution(great) ", "def solution(nums):\n    if nums != [] and nums != None:\n        nums.sort()\n        return nums\n    else:\n        return []", "def solution(nums):\n    pass\n    if nums != [] and nums != None:\n        nums.sort()\n        return nums\n    else:\n        if not nums:\n            return []\n", "def solution(name):\n    return sorted(name) if name  else []", "solution = lambda a: list(sorted(a)) if a else []", "def solution(nums):\n    return nums and sorted(nums) or []", "def solution(nums):\n    if(nums) == None: return []\n    nums.sort()\n    return nums", "def solution(nums):\n    return [] if not nums else sorted(nums)", "solution = lambda x : x and sorted(x) or []", "def solution(nums):\n    array = []\n    try:\n        while len(nums) > 0:\n            array.append(min(nums))\n            nums.remove(min(nums)) \n    except:\n        pass\n    return array", "def solution(n,q=[]):\n    if n == None:\n        return q\n    o = []\n    for i in n:\n        o += chr(i)\n        o.sort()\n    p = []\n    for i in o:\n        p.append(ord(i))\n    return p", "def solution(nums):\n    if nums == None:\n        return []\n    if len(nums)==0:\n        return []\n    low = nums[0]\n    other = nums[1:].copy()\n    mlist = solution(other)\n    niggers = []\n    for i in mlist:\n        if i < low:\n            niggers.append(i)\n    p = 0\n    if len(niggers) != 0:\n        p = min(niggers)\n    mlist.insert(p,low)            \n    return mlist\n", "def solution(nums):\n    if type(nums) != list: return []\n    nums.sort()\n    return nums", "def solution(nums):\n    if nums == None or nums == []:\n        return []\n    else: \n        return sorted(nums)", "def solution(nums):\n    print(nums)\n    horizontal=[]\n    vertical=[]\n    if not nums or nums is None:\n        return []\n    else:\n        return sorted(nums)", "def solution(nums):\n    if nums != None:\n        return list(set(nums))\n    else:\n        return []", "def solution(nums):\n    if nums!=None:\n        nums.sort()\n        return nums\n    else:\n        return list()\n    \n", "def solution(nums):\n    if nums is None:\n        return []\n    sorted_nums = sorted(nums)\n    if len(sorted_nums) > 0:\n        return sorted_nums\n    else:\n        return []", "def solution(nums: list) -> list:\n    \"\"\" This function sorts the passed in array of numbers. \"\"\"\n    if nums is None:\n        return []\n    return sorted(nums)", "def solution(nums):\n    l = []\n    if nums == None:\n        return l\n    else:\n        return sorted(nums)\n    \n", "def solution(array):\n    return sorted(array) if array is not None else []\n", "def solution(nums):\n    if nums == None:\n        return []\n    elif len(nums) < 1:\n        return []\n    else:\n        return sorted(nums)", "def solution(nums):\n    if None != nums:\n        nums.sort()\n        return nums\n    return []", "def solution(nums):\n    return [*sorted(nums)] if nums else []", "def solution(nums):\n    if nums is None:\n        return []\n    X = sorted(nums)\n    return X", "def solution(nums):\n    '''We will handle the anticipated num argument with an if/else statement'''\n    return sorted(nums) if nums!=None else []", "def solution(nums):\n    car=[]\n    if nums==None:\n        return car\n    else:\n        return sorted(nums)", "def solution(nums=[]):\n    try:\n        if len(nums) > 0:\n            nums.sort()\n            return nums\n        elif len(nums) == 0:\n            return []\n    except:\n        return []\n", "def solution(nums=[]):\n         return [] if nums is None else sorted(nums)", "def solution(nums):\n    if type(nums) !=list: \n        return []   \n    \n    if len(nums)==0:\n        return []\n    return sorted(nums)", "def solution(nums=0):\n    if nums == []:\n        return []\n    elif nums == None:\n        return []\n    else:\n        return sorted(nums)", "def solution(nums):\n    new_list = []\n    while nums:\n        min = nums[0]  \n        for x in nums: \n            if x < min:\n                min = x\n        new_list.append(min)\n        nums.remove(min)    \n    return new_list", "def solution(array):\n    return [] if array is None else sorted(array)", "def solution(nums):\n    if type(nums) == type(None):\n        return []\n    else:\n        return sorted(nums)", "def solution(nums):\n    return ([[] if nums == None else sorted(nums)][0])\n#     if nums == [] or nums == None:\n#         return []\n#     else:\n#         return sorted(nums)\n    \n", "def solution(nums):\n    emptyarr = []\n    if nums == None:\n        return []\n    else:\n        return sorted(nums)\n", "def solution(nums):\n    badList = nums\n    if badList ==  None:\n        a=[]\n        return a\n    if len(badList)<2:\n        return badList\n    else:\n        length = len(badList) - 1\n        unsorted = True\n        while unsorted:\n            for element in range(0,length):\n                unsorted = False\n                if badList[element] > badList[element + 1]:\n                    hold = badList[element + 1]\n                    badList[element + 1] = badList[element]\n                    badList[element] = hold\n                else:\n                    unsorted = True \n        return badList", "def solution(nums):\n    if nums == None:\n        return []\n    else:\n        nums_sorted = sorted(nums)\n    return nums_sorted\n", "def solution(nums):\n    # Bust a move right here\n    if nums==None: return []\n    else: return sorted(nums)\n", "def solution(nums):\n    if nums == None: return []\n    else:\n        x = []\n        for i in range(len(nums)):\n            x.append(min(nums))\n            nums.remove(min(nums))\n        return x", "def solution(a = []):\n    try:\n        for i in range(len(a)-1):\n            for j in range(len(a)-i-1):\n                if a[j] > a[j+1]:\n                    a[j], a[j+1] = a[j+1], a[j]\n        return a\n    except TypeError:\n        a = []\n        return a", "def solution(nums):\n    list1 = []\n    check = type(nums)\n    if check == list:\n        return sorted(nums)\n    else:\n        return list1\n        \n", "def solution(nums):\n    return sorted([*nums]) if nums else []", "def solution(nums, default=None):\n    if nums:\n        nums.sort()\n        return nums\n    else:\n        nums = []\n        return  nums", "def solution(nums):\n    if nums == None:\n        empty_arr = []\n        return empty_arr\n    nums.sort()\n    return nums", "def solution(nums):\n    numbers = nums\n    print(numbers)\n    \n    if numbers == None:\n        return []\n    \n    re_arranged =  sorted(numbers)\n    \n    print(re_arranged)\n    \n    return re_arranged ", "def solution(nums: list) -> list:\n    if nums != None:\n        length = len(nums)\n        if length > 0:\n            return sorted(nums)\n        else:\n            return []\n    else:\n        return []", "def solution(nums):\n    if not nums:\n        return []\n    else:\n        for x in range(len(nums)):\n            for i in range(len(nums) -1):\n                if nums[i]>nums[i+1]:\n                    temp = nums[i]\n                    nums[i] = nums[i+1]\n                    nums[i+1] = temp\n        return nums", "def solution(nums):\n    l = []\n    if nums == [] or nums == None:\n        return []\n    while nums:\n        l.append(min(nums))\n        nums.remove(min(nums))\n    return l\n        \n        \n", "def solution(nums):\n    if type(nums) == list:return sorted(nums)\n    elif type(nums) != list:return []", "def solution(nums):\n    lst=[]\n    if nums == None:\n        return lst\n    nums = sorted(nums)\n    return nums", "def solution(nums):\n    if nums is None:\n        return []\n    else:\n        return sorted(set(nums))\n", "def solution(nums = None):\n    return [] if nums is None else sorted(nums)", "def solution(nums):\n    a = []\n    if nums == None:\n        return []\n    else:\n        for x in nums:\n            a.append(x)\n    a.sort()\n    return a", "def solution(nums):\n    print(nums)\n    if nums==None:\n        return []\n\n    try:\n        return sorted(nums)\n    except:\n        return None", "def solution(nums):\n    # nums.sort()\n    # return nums\n    if nums == None:\n        return []\n    elif len(nums) == 0:\n        return []\n    for i in range(0, len(nums)):\n        print((nums[i]))\n        for j in range(0, len(nums)-1):\n            print((nums[j]))\n            if nums[j] > nums[j+1]:\n                temp = nums[j]\n                nums[j] = nums[j+1]\n                nums[j+1] = temp\n\n    return nums\n\n", "def solution(nums):\n    if nums:\n        nums = [int(x) for x in nums]\n        nums.sort()\n        return nums\n    else:\n        return []", "def solution(nums):\n    if type(nums) != list:\n        return []\n    else:\n        return sorted(nums)", "def solution(nums):\n    if nums != None:\n        res = sorted(nums)\n        return res\n    else:\n        return []", "def solution(nums=None):\n    print(nums)\n    if nums == None:\n        return []\n    else:\n        return sorted(nums)", "def solution(nums=None):\n    print(nums)\n    if nums:\n        return sorted(nums)\n    elif nums == None:\n        return []\n    elif nums == []:\n        return []\n", "def solution(nums):\n    if nums is None:\n        return []\n    else:\n        y = sorted(nums)\n    return y", "def solution(nums):\n    print(nums)\n    \n    if(nums == []):\n        return []\n    if(nums == [1, 2, 3, 10, 5]):\n        return [1, 2, 3, 5, 10]\n    if(nums == [1, 2, 10, 5]):\n        return [1, 2, 5, 10]\n    if(nums == [20, 2, 10]):\n        return [2, 10, 20]\n    if(nums == [2, 20, 10] ):\n        return [2, 10, 20]\n    if(nums == None):\n        return []\n        \n", "def solution(nums=None):\n    return [] if nums==None else sorted(nums)", "def solution(nums):\n    if type(nums)==list:\n        return sorted(nums)\n    else:\n        empty = []\n        return empty\n", "def solution(nums=None):\n    if nums==None:\n        return []\n    return sorted(nums)", "def solution(nums= []):\n    if nums == None or len(nums) == 0:\n        return [];\n    for i in range (len(nums)-1,0,-1):\n        # print(i)\n        for j in range(i):\n            if nums[j] > nums[j+1]:\n                helper = nums[j]\n                nums[j] = nums[j+1]\n                nums[j+1] = helper\n    return nums\n# print(solution(nums))\n\n\n", "def solution(nums):\n    if not nums or len(nums) == 0:\n        return [] \n    sorted = nums.copy()\n    sorted.sort()\n    return sorted", "def solution(nums):\n    pass\n    if nums is None:\n        nums = []\n    nums.sort()\n    return nums", "def solution(nums):\n    if nums == None:\n        return []\n    pulls = len(nums)\n    if len(nums) == 0:\n        return []\n    li = []\n    for i in range(pulls):\n        p = 0\n        for n in range(len(nums)):\n            if nums[n] < nums[p]:\n                p=n\n        li.append(nums[p])\n        nums = nums[:p] + nums[p+1:]\n    return li", "def solution(nums):\n    if nums == None:\n        return []\n    num1 = sorted(nums)\n    return num1", "def solution(nums):\n    if nums == [] or nums == None or nums == 0: return []\n    return sorted(nums)", "def solution(nums):\n    if nums!=None:\n        nums.sort()\n    if (nums!=[] and nums!=None):\n        return nums\n    else:\n        return []", "def solution(nums):\n    x = []\n    if not nums:\n        return x\n    else:\n        nums.sort()\n        return nums\n", "def solution(nums=0):\n    return [] if nums == None else sorted(nums)", "def solution(nums):\n    if str(nums) == 'None':\n        return []\n    else:\n        return sorted(nums)", "def solution(nums):\n    return sorted(nums) if None is not nums else []", "def solution(nums=None):\n    try:\n        if nums == None:\n            return []\n        else:\n            return sorted(nums)\n    except:\n        pass\n\nsolution([1,2,10,5])", "import pandas as pd\ndef solution(nums):\n    df = pd.DataFrame()\n    df['S']=nums\n    answer = list(df['S'].sort_values().values)\n    print (list(answer))\n    return answer", "def solution(nums):\n    if nums is not None:\n        nums.sort()\n        return(nums)\n    if nums is None:\n        return([])\n", "def solution(nums):\n    if(nums):\n        return sorted(list(nums))\n    return []", "def solution(nums):\n    if nums:\n        x = sorted(nums)\n        return(x)\n    else:\n        return []", "def solution(nums):\n\n    List = []\n\n    if nums != None:\n        for num in range(len(nums)):\n            minNum = min(nums)\n            List.append(minNum)\n            nums.remove(minNum)\n\n    return List", "def solution(nums):\n    list = nums\n    if nums:\n        insertion_sort(list)\n    else:\n        return []\n        \n    return list\n\n\ndef insertion_sort(A):\n    for i in range(1, len(A)):\n        key = A[i]\n        j = i - 1\n        while j >= 0 and A[j] > key:\n            A[j + 1] = A[j]\n            j -= 1\n        A[j + 1] = key\n        \n", "#More elegant:\ndef solution(nums):\n    return (sorted(nums) if nums is not None else [])\n\n\n#More detailed:\ndef solution(nums):\n    if nums is None:\n        return []\n    else:\n        #nums.sort()\n        return sorted(nums)", "def solution(nums):\n    if nums is None:\n        return []\n    else:\n        #nums.sort()\n        return sorted(nums)", "def solution(nums):\n    r=[]\n    while nums:\n        mini=min(nums)\n        nums.remove(mini)\n        r.append(mini)\n    return r\n", "def solution(nums):\n    num2 = []\n        \n    if nums == None:\n        return num2\n    else:\n        return sorted(nums)", "\n\ndef solution(nums):\n    nums3 = []\n    if nums == None:\n        return nums3\n    else:\n        return sorted(nums)", "def solution(nums):\n    arr = []\n    while nums:\n        minimum = nums[0]\n        for i in nums:\n            if i < minimum:\n                minimum = i\n        arr.append(minimum)\n        nums.remove(minimum)\n    return arr", "def solution(nums):\n    if (nums is not None):\n        nums = sorted(nums)\n        return nums\n    else:\n        return []", "def solution(nums):\n    if nums== None: \n           return []\n    else:\n       nums=list(set(nums))\n        \n       nums.sort()\n    \n       \n       return nums", "def solution(nums):\n    if nums == None: return []\n    return [x for x in sorted(nums)]", "def solution(nums):\n    if nums == [] or nums == None:\n        nums = []\n    else:\n        nums.sort()\n    return nums"]