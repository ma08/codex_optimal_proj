["def solve(s):\n    it = reversed(s.replace(' ',''))\n    return ''.join(c if c == ' ' else next(it) for c in s)", "def solve(s):\n    space_index=[i for i in range(len(s)) if s[i]==\" \"]    #find index of saces  \n    s = ''.join(s.split())                                 #remove spaces\n    s=s[::-1]                                              #reverse the string    \n    for i in space_index:                                  #add spaces again to exactly same place before\n        s = s[:i] + \" \" + s[i:]\n    return s", "def solve(s):\n    rev = list(s.replace(' ', '')[::-1])\n    for index, item in enumerate(s):\n        if item == ' ':\n            rev.insert(index, item)\n    return ''.join(rev)\n    \n", "def solve(s):\n    r = list(s.replace(' ', ''))\n    return ''.join(i if i == ' ' else r.pop() for i in s)", "def solve(s):\n  it = iter(s.replace(' ', '')[::-1])\n  return ''.join(' ' if c == ' ' else next(it) for c in s)", "def solve(s):\n    r = [a for a in s if a != ' ']\n    return ''.join(a if a == ' ' else r.pop() for a in s)", "solve = lambda s: (lambda j=reversed(s.replace(' ','')): ''.join(e if e==' ' else next(j) for e in s))()", "def solve(s):\n    slist = []\n    for i in s: slist.append(i)\n    c = 0\n    res = []\n    for i in slist:\n        if slist[c] == ' ':\n            res.append(c)\n            slist.remove(slist[c])\n        c += 1      \n    s_rev = slist[::-1]\n    c = 0\n    for i in s_rev:\n        if c+1 in res: s_rev[c] = s_rev[c] + \" \"\n        c += 1\n    return ''.join(i for i in s_rev )\n", "def solve(s):\n    if s.count(' ') >= 1:\n        positions = [i for i in range(len(s)) if s[i] == ' ']\n        l = [i for i in s if i != ' '][::-1]\n        for i in positions:\n            l.insert(i, ' ')\n        return ''.join(l)\n    else:\n        return s[::-1]", "def solve(s):\n    tempr = list(s)\n    ts = tempr.count(' ')\n    for i in range(ts):\n        tempr.remove(' ')\n    tempr = tempr[::-1]\n    s = list(s)\n    it = 0\n    iw = 0\n    while iw != len(s):\n        if s[iw] == ' ':\n            iw+=1\n        else:\n            s[iw] = tempr[it]\n            it+=1\n            iw+=1\n    return ''.join(s)", "def solve(s):\n    char = s.replace(\" \", \"\")[::-1]\n    list = s.split(\" \")\n    i = 0\n    for x in list:\n        list[i] = char[:len(x)]\n        char = char [len(x):]\n        i += 1\n    return \" \".join(list)", "#reversing the code does not mean keeping the spaces at the same place wtf\ndef solve(s):\n    spaceIndex = []\n    result = []\n    index = 0\n    for i in s:\n        if i != \" \":\n            result.insert(1, i)\n        else:\n            spaceIndex.append(index)\n        index += 1\n    result.append(result[0])\n    result.pop(0)\n    for j in range(0, len(spaceIndex)):\n        result.insert(spaceIndex[j], \" \")\n    return \"\".join(result)", "def solve(s):\n    if len(s)<2: return s\n    if s[0]==' ': return ' '+solve(s[1:])\n    if s[-1]==' ': return solve(s[:-1])+' '\n    return s[-1]+solve(s[1:-1])+s[0]\n", "def solve(s):\n    z = reversed(s.replace(' ', ''))\n    return ''.join(' ' if i == ' ' else next(z) for i in s)", "def solve(s):\n    ans = list(s.replace(' ', '')[::-1])\n    for i in [i for i, item in enumerate(s) if item == ' ']:\n        ans.insert(i, ' ')\n    return ''.join(ans)", "def solve(s):\n    ys = iter(y for y in reversed(s) if y != ' ')\n    return ''.join(next(ys) if x != ' ' else x for x in s)", "solve = lambda s: (lambda ns=reversed(s.replace(' ', '')):\"\".join(e == ' ' and ' ' or next(ns) for e in s))()", "def solve(s):\n    s_list = s.split(\" \")\n    s_nospace = \"\"\n    for i in s_list:\n        s_nospace+=i\n    s_nospace_reverse = \"\"\n    for i in range(1,len(s_nospace)+1):\n        s_nospace_reverse+=s_nospace[-i]\n    final_s = \"\"\n    space_index = []\n    for i in range(0,len(s)):\n        if s[i] == ' ': space_index.append(i)\n    sdvig = 0\n    for i in range(0, len(s_nospace)):\n        if i+sdvig in space_index: \n            final_s += \" \"\n            sdvig +=1\n        if i<len(s_nospace): final_s += s_nospace_reverse[i]\n    if s[-1]==\" \": final_s+=\" \"\n    return final_s", "def solve(s):\n    lst_s = list(s)\n    i, j = 0, len(s)-1\n    while j > i:\n        if lst_s[i] == ' ' or lst_s[j] == ' ':\n            if lst_s[i] == ' ': i += 1\n            if lst_s[j] == ' ': j -= 1\n            continue\n        else:\n            lst_s[i], lst_s[j] = lst_s[j], lst_s[i]\n            i += 1\n            j -= 1\n    return ''.join(lst_s)", "def solve(s):\n    reversed = list(''.join(s.split())[::-1])\n    for i in range(len(s)):\n        if s[i] == ' ':\n            reversed.insert(i, ' ')\n    return ''.join(reversed)\n", "import re\n\ndef solve(s):\n    space_index = [m.start() for m in re.finditer(\" \",s)]\n    reverse = s.replace(\" \",\"\")[::-1]\n    list_reverse = list(reverse)\n    for index in space_index:\n        list_reverse.insert(index,\" \")\n    return ''.join(list_reverse)", "import re\n\ndef solve(s):\n    swap = reversed([m.start() for m in re.finditer(r\"[^ ]\", s)])\n    return \"\".join(s[next(swap)] if c != \" \" else c for c in s)", "import re\ndef solve(s):\n    result = list(s)\n    indices = [m.span()[0] for m in re.finditer(r\"[^ ]\", s)]    \n    for a,b in zip(indices, indices[::-1]):\n        result[a] = s[b]\n    return \"\".join(result)", "def solve(s):\n    string = s\n    string = string.split()\n    string = ''.join(string)\n    string = string[::-1]\n    \n    space_list = []\n    for i, char in enumerate(s):\n        if char == ' ':\n            space_list.append(i)\n    \n    for space in space_list:\n        first_chunk = string[0:space]\n        first_chunk += ' '\n        string = first_chunk + string[space:] \n    return string\n", "def solve(s):\n    indexes = []\n    for i in range(len(s)):\n        if s[i] == \" \":\n            indexes.append(i)\n    lst = s.split(\" \")\n    result = []\n    for i in range(len(lst)):\n        result.append(lst[i][::-1])\n    result.reverse()\n    t = \"\".join(result)\n    t = list(t)\n    for i in range(len(indexes)):\n        t.insert(indexes[i], \" \")\n    return \"\".join(t)\n", "def solve(s):\n    print(s)\n    l = [c for c in s if c != ' ']\n    l.reverse()\n    for i,c in enumerate(s):\n        if c == ' ':\n            l.insert(i, c)\n    return ''.join(l)", "def solve(c):\n    k=(\"\".join(reversed(c)))\n    h=k.replace(\" \",\"\")\n    s=[i for i in range(len(c)) if \" \"==c[i]] \n    h=list(h)\n    for i in range(len(c)):\n        if i in s:\n            h.insert(i,\" \")\n    return \"\".join(h)", "def solve(s):\n    s_ = list(''.join(s.split())[::-1])\n    for i, l in enumerate(s):\n        if l == ' ':\n            s_.insert(i, l)\n    return ''.join(s_)", "def solve(s):\n    new_s = [x if x.isalpha() else '' for x in s[::-1]]\n    \n    for char in new_s:\n        if char == '':\n            new_s.remove(char)\n    \n    for i in range(len(s)):\n        if s[i] == ' ':\n            new_s.insert(i, s[i])\n    \n    return ''.join(new_s)\n", "def solve(s):\n    s=s.split(\" \")\n    temp=[]\n    result=[]\n    for l in s:\n        temp.append(len(l))\n    \n    s=''.join(s) \n    s=s[::-1]\n     \n    for x in temp:\n        add=s[:x]\n        s=s[x:]\n        result.append(add)\n    \n    a=\"\"\n    for i in result:\n        a+=i+\" \"\n    a=a[:-1]\n        \n    return a\n\n        \n        \n        \n", "def solve(s):\n    sr = s[::-1]\n    sr = sr.replace(' ','')\n    x = [pos for pos, char in enumerate(s) if char == ' ']\n    for i in range(0,len(x)):\n        sr = sr[:x[i]] + ' ' + sr[x[i]:]\n    return sr", "def solve(s):\n    rev_s  = [*s.replace(' ', '')]\n    return ''.join([rev_s.pop() if c != ' ' else ' ' for c in s])\n    \n", "def solve(s):\n    rev_s  = [c for c in s if c != ' ']\n    return ''.join([rev_s.pop() if c != ' ' else ' ' for c in s])\n    \n", "def solve(s):\n    inds = [i for i,c in enumerate(s) if c == \" \"]\n    res = s.replace(\" \",\"\")[::-1]\n    for i in inds:\n        res = res[:i] + \" \" + res[i:]\n    return res", "def solve(s):\n    x = []\n    for k in list(range(0,len(s))):\n        if s[k] == \" \":\n            x.append(k)\n    \n    y = s.split()\n    y = y[::-1]\n    \n    z = []\n    for k in y:\n        z.append(k[::-1])\n    \n    y = []\n    for k in z:\n        y+=(list(k))\n    \n    \n    for k in x:\n        y.insert(k, \" \")\n        \n    j = \"\"\n    for k in y:\n        j += k\n    \n    \n\n        \n    return j", "def solve(s):\n    new = list(s.replace(' ', '')[::-1])\n    [new.insert(i, ' ') for i, j in enumerate(s) if j == ' ']\n    return ''.join(new)", "def solve(s):\n    u = []\n    reversed_list = list(s[::-1].replace(' ', ''))\n    [u.append(reversed_list.pop(0) if c.isalpha() else ' ') for c in s]\n    return \"\".join(u)", "def solve(s):\n    s_rev = s[::-1].replace(' ', '')\n    for i in range(len(s)):\n        if s[i] == ' ':\n            s_rev = s_rev[: i] + ' ' + s_rev[i: ]\n    return s_rev\n", "def solve(s):\n    sl = [i for i,e in enumerate(s) if e ==' ']\n    \n    ans = list(''.join(s[::-1].split(' ')))\n    for i in sl:\n        #ans = list(''.join(s[::-1].split(' '))).insert(i, ' ') # Not good!!!\n        ans.insert(i,' ')\n    return ''.join(ans)", "def solve(s):\n    rs = s[::-1].replace(\" \", \"\")\n    \n    for i in range(len(s)):\n        if s[i] == ' ':\n            rs = rs[:i] + ' ' + rs[i:]\n            \n    return rs", "def solve(s):\n    d = \"\"\n    for i in range(len(s)):\n        el = s[i]\n        if el.isalpha():\n            d = el + d\n    for i in range(len(s)):\n        el = s[i]\n        if el == ' ':\n            d = d[:i] + el + d[i:]\n    return d\n", "def solve(s):\n    y = s.replace(\" \", \"\")\n    backwards =y[::-1]\n    c = 0\n    d = 0\n    solution = \"\"\n    for i in range(0, len(s)):\n        if s[i]== \" \":\n           solution += \" \"\n           c = c + 1\n        else:\n           solution += backwards[i-c]\n    return solution", "def solve(s):\n    sa = s.replace(\" \", \"\")\n    print(sa)\n    ml = list(sa)[::-1]\n    print(ml, 'kurw')\n    y = 0\n    for x in range(len(s)):\n        if s[x] == ' ':\n            print(s[x], 'coo')\n            ml.insert(x + y, s[x])\n#             y += 1\n        \n    print(s)\n    print(s[::-1])\n    print(ml)\n    return  ''.join(ml)", "def solve(s):\n    spaceindex = []\n    for i in range(0,len(s)):\n        if s[i]==\" \":\n            spaceindex.append(i)\n    \n    s = s.replace(\" \",\"\")[::-1]\n    \n    sil = []\n    for char in s:\n        sil.append(char)\n        \n    for num in spaceindex:\n        sil.insert(num,\" \")\n    \n    return \"\".join(sil)\n\n", "def solve(s):\n    st = ''\n    a = 0\n    arr = []\n    for i in s[::-1]:\n        if i != ' ':\n            st += i\n    for j in s:\n        if j != ' ':\n            a += 1\n        elif j == ' ':\n            arr.append(a)\n            a += 1\n    for k in arr:\n        st += \" \"\n        st = st[0:k] + ' ' + st[k:-1]\n\n    return st", "def solve(s):\n    lst = [i for i in s if i != ' ']\n    return ''.join(' ' if i == ' ' else lst.pop() for i in s)", "def solve(s):\n    y= [i for i in s[::-1] if not i.isspace()]\n    for i,x in enumerate(s):\n        if x==' ':\n            y.insert(i,' ')\n    return ''.join(y)", "def solve(s):\n    f = [i for i in range(len(s))if s[i]==' ']\n    s = s.replace(' ','')[::-1]\n    g = ''\n    for i in range(len(s)):\n        if i in f:\n            g += ' ' + s[i]\n            f = list(map(lambda x: x-1, f[1:]))\n        else:\n            g += s[i]\n    return g + (' ' if f else '')", "def find(str, ch):\n    for i, ltr in enumerate(str):\n        if ltr == ch:\n            yield i\n\ndef solve(s):\n    new_s = s[::-1].replace(\" \", '')\n\n    for idx in list(find(s, ' ')):\n        new_s = new_s[:idx] + ' ' + new_s[idx:]\n\n    return new_s", "def insert_space(s, res):\n    res = list(res)\n    for i in range(len(s)):\n        if(s[i] == \" \"):\n            res.insert(i, \" \")\n    return \"\".join(res)\n\ndef solve(s):\n    temp = s.translate({ord(\" \"):None})\n    res = temp[::-1]\n    return insert_space(s, res)\n", "import re\n\ndef solve(s):\n    iter = re.finditer(' ', s)\n    spaces = [x.start(0) for x in iter]\n\n    s_rev = list(s[::-1].replace(' ', ''))\n    \n    for i in spaces:\n        s_rev.insert(i, ' ')\n    return ''.join(s_rev)    ", "def solve(s):\n    spc_idx = []\n    rs = ''\n    for i,c in enumerate(s):\n        if c == ' ':\n            spc_idx.append(i)\n        else:\n            rs = c + rs\n    for i in spc_idx:\n        rs = rs[:i] + ' ' + rs[i:]\n    return rs", "def solve(s):\n    ss = s.replace(' ', '')[::-1]\n    for i in range(len(s)):\n        if s[i] == ' ':\n            ss = ss[:i] + ' ' + ss[i:]\n    return ss\n", "def solve(s):\n    spaces = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            spaces.append(i)\n    s = s.replace(' ','')[::-1]\n    \n    while len(spaces) > 0:\n        i=spaces.pop(0)\n        s=s[:i]+' '+s[i:]\n    return s", "def solve(s):\n    rev,s=s[::-1].replace(\" \",\"\"),list(s)\n    for i in range(len(s)):\n        if s[i]!=\" \": s[i],rev=rev[0],rev[1:]\n    return \"\".join(s)", "def solve(s):\n    L = [i for i, letter in enumerate (s) if letter == \" \"]\n    print (L)\n    l_s = list(''.join(s.split()))\n    reversed = l_s[::-1]\n    for number in L:\n        reversed.insert(number, \" \")\n    return ''.join(reversed)", "def solve(s):\n    count=0\n    l=[]\n    l1=[]\n    l1=list(s)\n    l1.reverse()\n    for i in s:\n        count+=1\n        if(i==\" \"):\n            l1.remove(\" \")\n            l.append(count-1)\n    for j in l:\n        l1.insert(j,\" \")\n    l1=''.join(l1)\n    return l1", "def solve(s):\n    spaces = [i for i, letter in enumerate(s) if letter == \" \"]\n    s = list(s)\n    for i in range(len(spaces)-1 ,-1,-1):\n        s.pop(spaces[i])\n    srev = s[::-1]\n    for i in range(0, len(spaces) ):\n        srev.insert(spaces[i], \" \")\n    final = \"\"\n    for z in srev:\n        final = final + z\n    return final", "def solve(s):\n    rev_s = ''.join(s.split())[::-1]\n\n    res = []\n    n = 0\n    for i in [len(w) for w in s.split(' ')]:\n        if i == 0:\n            res.append('')\n        else:\n            res.append(rev_s[n:n+i])\n        n += i\n\n    return ' '.join(res)", "def solve(word):\n  #el primer paso de la funci\u00f3n es darle la vuelta al string.Check\n  reverse = ''\n  reverse_nospace = []\n  for char in range(len(word)-1, -1, -1):\n    reverse += word[char] \n  for i in reverse:\n    reverse_nospace.append(i)\n  for i2 in reverse_nospace:\n    if i2 == ' ':\n      reverse_nospace.remove(i2)\n  #el segundo paso buscar el index de los espacios, usare list comprehension [expression for item in list]\n  char_list = []\n  index = []\n  for char in word:\n    char_list.append(char)\n  for idx, space in enumerate(char_list):\n    if space == ' ':\n      index.append(idx)\n\n  #el tercero, hacer que coincidan los espacios\n  final_string = ''\n  for position in index:\n    reverse_nospace.insert(position, ' ')\n  final_string = ''.join(reverse_nospace)\n\n  return final_string\n\n", "def solve(s):\n    space_indexes = [i for i, c in enumerate(s) if c == ' ']\n    no_spaces_reversed = list(reversed([c for c in s if c != ' ']))\n    for index in space_indexes:\n        no_spaces_reversed.insert(index,  ' ')\n    return ''.join(no_spaces_reversed)", "def solve(s):\n    space = []\n    count = 0\n    res = \"\"\n    for c in s:\n        count += 1\n        if c.isalnum() == True:\n            res = c + res\n        elif c == \" \":\n            space.append(count)\n    for num in space:\n        res = res[:num-1] + \" \" + res[num-1:]\n    return res\n", "def solve(s):\n    slist = list(s)\n    revlist = [slist.pop() for _ in range(len(s))]\n    revlist[:] = [x for x in revlist if x != ' ']\n    slist = list(s)\n    for i in range(len(slist)):\n        if slist[i] == ' ': revlist.insert(i, ' ')\n    rev= ''.join(revlist)\n    return rev", "def solve(s):\n    res = []\n    spaces = []\n    cnt = 0\n    for c in s:\n        cnt += 1\n        if c != ' ':\n            res.insert(0, c)\n        else:\n            spaces.append(cnt)\n    for pos in spaces:\n        res.insert(pos-1, ' ')\n    return ''.join(res)", "def solve(s):\n    spaces = [i for i, c in enumerate(s) if c == \" \"]\n    string = list(s.replace(\" \", \"\")[::-1])\n    for space in spaces:\n        string.insert(space, \" \")\n    return \"\".join(string)", "def solve(s):\n    reversed = s[::-1];\n    reversed = \"\".join(reversed.split(\" \"));\n    spaces = [];\n    for i in range(len(s)):\n        if s[i] == \" \":\n            spaces.append(i);\n    result = \"\";\n    spacesCount = 0;\n    for i in range(len(s)):\n        if i in spaces:\n            result += \" \";\n            spacesCount += 1;\n        else:\n            result += reversed[i - spacesCount];\n    return result;", "def solve(s):\n    indexes = []\n    for n, i in enumerate(s):\n        if i == ' ':\n            indexes.append(n)\n\n    res = ''.join(s.split())[::-1]\n\n    for ind in indexes:\n        res = res[:ind] + ' ' + res[ind:]\n        \n    return res", "def solve(s):\n    words = s.split()\n    cure = \"\".join(words)[::-1]\n    r = 0\n    krum = []\n    for i in words:\n        krum.append(cure[r:r+len(i)])\n        r = r+len(i)\n    return \" \".join(krum) if s[len(s)-1] != \" \" else \" \".join(krum)+ \" \"", "def solve(s):\n    spaces = []\n    reversed = s\n\n    #get spaces\n    for index in range(len(reversed)):\n        if reversed[index] == \" \":\n            spaces.append(index)\n    print(spaces)\n\n    #strip spaces\n    reversed = reversed.replace(\" \", \"\")\n\n    #reverse\n    reversed = reversed[::-1]\n\n    #add spaces\n    for space in spaces:\n        print(reversed)\n        reversed = f'{reversed[:space]} {reversed[space:]}'\n    return reversed", "def solve(s):\n    x = s.split(\" \")\n    \n    r = []\n    for i in x:\n        rt = [\"\"] * len(i)\n        r.extend(rt)\n        r.extend([\" \"])\n    \n    r = r[:len(r)-1]\n    \n    #print(r)\n    \n    counter = 0\n    for i in reversed(x):\n        for j in reversed(i):\n            #print(j)\n            if r[counter] == \"\":\n                r[counter] = j\n            else:\n                r[counter + 1] = j\n                counter += 1    \n            counter += 1\n                \n    return \"\".join(r)", "def solve(s):\n    m = s.replace(' ','')\n    r = ''\n    i = -1\n    for c in s:\n        if c!=' ':\n            r += m[i]\n            i -= 1\n        else:\n            r += ' '\n    return r", "def solve(s):\n   \n    l = []\n    b = []\n    for i, j in enumerate(list(s)):\n        if j.isspace() == True:\n            b.append(i)\n\n            \n        else:\n            l.insert(0, (j))\n            \n    for k in b:\n        l.insert(k, ' ')\n    return ''.join(l)", "def solve(s):\n    lst = [i for i in s[::-1] if i != ' ']\n    \n    for i in range(len(s)):\n        if s[i] == ' ':\n            lst.insert(i, ' ')\n\n    return ''.join(lst)", "import re\ndef solve(s):\n    ws_indices = [match.span()[0] for match in re.finditer(' ', s)]\n    rev_s = list(s[::-1].replace(' ', ''))\n    for idx in ws_indices:\n        rev_s.insert(idx, ' ')\n    \n    return ''.join(rev_s)\n", "def solve(s):\n    pos = []\n    for i in range(len(s)):\n        pos.append('')\n        if s[i] == ' ':\n            pos[i] = ' '\n    j = len(s)-1\n    i = 0\n    while i < len(s):\n        if pos[i] == ' ':\n            if s[j] == ' ':\n                j = j - 1\n                i = i + 1\n            else:\n                i = i + 1\n        else:\n            if s[j] != ' ':\n                pos[i] = s[j]\n                j = j - 1\n                i = i + 1\n            else:\n                j = j - 1\n    return ''.join(pos)", "def solve(s):\n    letters = [l for l in s]\n    spaces = [idx for idx, space in enumerate(s) if space == ' ']\n    reverse_letters = []\n    for i, j in enumerate(letters):\n        reverse_letters.append(letters[-1-i])\n    \n    reverse_letters = [l for l in reverse_letters if l != ' ']\n    \n    for idx, j in enumerate(spaces):\n        reverse_letters.insert(j, ' ')\n    \n    return ''.join(reverse_letters)\n\n    \n    \n        \n            \n        \n", "import re\n\ndef solve(s):\n    rev = []\n    for i in reversed(s):\n        if i != \" \":\n            rev.append(i)\n\n    spaces = re.compile(\" \")\n    for m in spaces.finditer(s):\n        rev.insert(m.start(), \" \")\n\n    return \"\".join(rev)\n", "def solve(s):\n    spaces = []\n    word = []\n    for i in range(len(s)):\n        if s[i] == \" \":\n            spaces.append(i)\n        else:\n            word.append(s[i])\n    word = word[::-1]\n    for i in spaces:\n        word.insert(i, \" \")\n    var = \"\"\n    return var.join(word)", "def solve(s):\n    sol = []\n    l = []\n    for i in range(len(s)):\n        if (s[i] == \" \"):\n            l.append(i)\n        else:\n            sol.append(s[i])\n    sol.reverse()\n\n    for i in range(len(l)):\n        sol.insert(l[i], \" \")\n    return(\"\".join(sol))", "def solve(s):\n    r = s.replace(' ','')[::-1]\n    for i in range(len(s)):\n        if s[i] == ' ': r = r[:i] + ' ' + r[i:]\n    return r", "def solve(x):\n    \n    # remove all spaces:\n    \n    w = x.replace(\" \", \"\") \n    \n    # reverse the w string:\n\n    new_string = \"\"\n    for i in range(1, len(w)+1):\n        new_string += w[-i]\n    \n    # convert the old string into a list to simplify adjustments and name it new_list:\n    \n    new_list = [f for f in x]\n    \n    # capture the sapce indicies in the original string (x) to add them to the neww revrsed string (new_string) :\n    start_at = 0\n    spaces = []\n    for val in new_list:\n        if val == \" \":\n            spaces.append(new_list.index(val, start_at))\n            start_at = new_list.index(val, start_at) + 1\n\n    # add the spaces to the new reversed string:\n\n    for i in spaces:\n        new_string = new_string[:i] + \" \" + new_string[i:]\n    ## return the new adjsuted result:\n    \n    return new_string\n", "def solve(s):\n    # s= i love codewars\n    rev=s[::-1]\n    rev2=\"\"\n    f=\"\"\n    for i in rev:\n        if i==\" \":\n            continue;\n        rev2+=i\n    j=0\n    for i in s:\n        if i==\" \":\n            f+=(\" \")\n            continue\n        f+=(rev2[j])\n        j+=1\n    return f\nprint((solve(\"i love codewars\")))\n", "def solve(s):\n    no_space = list(s.replace(\" \", \"\")[::-1])\n    for i in [pos for pos, char in enumerate(s) if char == \" \"]:\n        no_space.insert(i, \" \")\n    return ''.join(no_space)\n#     return [pos for pos, char in enumerate(s) if char == \" \"]\n", "def solve(s):\n    new_s = reversed(s.replace(\" \",\"\"))\n    return \"\".join(i if i==\" \" else next(new_s) for i in s)", "def solve(s):\n    l = [c for c in s.replace(\" \", \"\")]\n    return ''.join([\" \" if c == \" \" else l.pop() for c in s])\n", "\ndef solve(s):\n    s = list(s)\n    indices = [index for index, element in enumerate(s) if element == \" \"]\n    s = \"\".join(s).split()\n    s = \"\".join(s)\n    s = list(s[::-1])\n    for i in range(0,299):\n        for j in indices:\n            if i == j:\n                s.insert(j,\" \")\n                \n    return \"\".join(s)", "def solve(s):\n    revs = s[::-1]\n    revs = \"\".join(revs.split())\n    output = \"\"\n    count = 0\n    \n    for letter in s:\n        if letter != \" \":\n            output = output + revs[count]\n            count += 1\n        else:\n            output = output + \" \"\n    return output", "def solve(s):\n    wordSizes = [ len(x) for x in s.split() ]\n    reversedS = s.replace(\" \", \"\")[::-1]\n    o = []\n    for x in wordSizes:\n        o.append(reversedS[:x])\n        reversedS = reversedS[x:]\n    return \" \".join(o) if s[-1] is not ' ' else \" \".join(o) + \" \"", "def solve(s):\n    without = [c for c in s if c != ' ' ]\n    spaces = [i for i, e in enumerate(s) if e == ' ' ]\n    rev = without[::-1]\n    result = []\n    j = 0\n    for i in range(len(s)):\n        if i in spaces:\n            result.append(' ')\n        else: \n            result.append(rev[j])\n            j += 1\n    return \"\".join(result)", "def solve(s):\n    index_list = [i for i in range(len(s)) if s.startswith(' ', i)]\n    \n    s = s.replace(' ', '')\n    \n    reversed_string = [s[-x] for x in range(1, len(s) + 1, 1)]\n    \n    for value in index_list:\n        reversed_string.insert(value, ' ')\n    \n    return ''.join(reversed_string)", "def solve(s):\n    spaces = [i for i in range(len(s)) if s[i]==' ']\n    letters = ''.join(x for x in s if x!=' ')[::-1]\n    output = ''\n    j = 0\n    for i in range(len(s)):\n        if i in spaces:\n            output += ' '\n        else:\n            output += letters[j]\n            j += 1\n    return output", "def solve(forward_string):\n    \n    reverse_string = list(forward_string[::-1].replace(' ',''))\n    \n    for index, elem in enumerate(forward_string):\n        if elem == ' ':\n            reverse_string.insert(index, ' ')\n    \n    return ''.join(reverse_string)\n", "def solve(s):\n    a = [i for i in \"\".join(s[::-1].split())]\n    for i in range(len(s)):\n        if s[i] == \" \":\n            a.insert(i, \" \")      \n    return \"\".join(a)", "import numpy as np\n\ndef solve(arg):\n    index = 0\n    listIndex = []\n    while index < len(arg):\n        index = arg.find(' ', index)\n        if index == -1:\n            break\n        print('space found at', index)\n        listIndex = listIndex + [index]\n        index += 1 # +2 because len('ll') == 2\n    print(listIndex)\n    arg=arg.replace(' ', '')\n    arg = arg[::-1]\n    \n    \n    \n    \n    for i in listIndex:\n        arg = arg[:i] + ' ' + arg[i:]\n        print(i)\n    return arg", "def solve(s):\n    \n    q = ''.join(reversed(s.replace(' ', '')))\n    arr = []\n    c = 0\n    for i in s:\n        if i == ' ':\n            arr.append(' ')\n            \n        else:\n            arr.append(q[c])\n            c += 1\n    return(''.join(arr))", "def solve(s):\n    spaces = []\n    soln = ''\n    for i in range(len(s)):\n        if s[i] == ' ':\n            spaces.append(i)\n    for x in s[::-1]:\n        if x == ' ':\n            continue\n        else:\n            soln += x\n    for x in spaces:\n        soln = soln[:x] + ' ' + soln[x:]\n    return soln", "def solve(s):\n    spaces = [i for i in range(len(s)) if s[i] == ' ']\n    rev = list(s[::-1].replace(' ', ''))\n    for v in spaces:\n        rev.insert(v, ' ')\n    return ''.join(rev)", "def solve(s):\n    spaces = []\n    string = ''\n    for i in range(len(s)):\n        if s[i] == ' ':\n            spaces.append(i - len(spaces))\n    s1 = s.replace(' ', '')\n    s1 = list(s1[-1::-1])\n    for i in range(len(s1)):\n        if i in spaces:\n            string += ' '\n        string += s1.pop(0)\n    return string + ' ' if s[-1] == ' ' else string", "def solve(s):\n    spaces = []\n    count = 0\n    for i in [c for c in s]:\n        if i.isalpha():\n            count += 1\n        else:\n            spaces.append(count)\n            count += 1       \n    \n    a = s.replace(\" \", '')\n    b = list(a)\n    c = b[::-1]\n    d = c\n    for x in spaces:\n        d.insert(x, ' ')\n    e = ''.join(d)\n    return e", "def solve(s):\n    rev_s = ''.join(s.replace(' ', '')[::-1])\n    result = ''\n    for i in s.split():\n        result += rev_s[: len(i)] + ' '\n        rev_s = rev_s[len(i):]\n    result = result.strip()\n    return result + ' ' if len(s) != len(result) else result"]