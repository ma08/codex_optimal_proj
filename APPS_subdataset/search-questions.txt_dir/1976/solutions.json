["class MagicDictionary:\n \n     def __init__(self):\n         \"\"\"\n         Initialize your data structure here.\n         \"\"\"\n         self.l = []\n \n     def buildDict(self, dict):\n         \"\"\"\n         Build a dictionary through a list of words\n         :type dict: List[str]\n         :rtype: void\n         \"\"\"\n         self.l= dict\n \n     def search(self, word):\n         \"\"\"\n         Returns if there is any word in the trie that equals to the given word after modifying exactly one character\n         :type word: str\n         :rtype: bool\n         \"\"\"\n         def diffnumber(a,b):\n             count = 0\n             for i in range(len(a)):\n                 if a[i] !=b[i]:\n                     count +=1\n             return count\n         for x in self.l:\n             if len(x) == len(word) and diffnumber(x,word) ==1:\n                 return True\n         return False\n                 \n                 \n         \n \n \n # Your MagicDictionary object will be instantiated and called as such:\n # obj = MagicDictionary()\n # obj.buildDict(dict)\n # param_2 = obj.search(word)\n", "class MagicDictionary:\n \n     def __init__(self):\n         \"\"\"\n         Initialize your data structure here.\n         \"\"\"\n         self.dict1 = {}\n \n     def buildDict(self, dict):\n         \"\"\"\n         Build a dictionary through a list of words\n         :type dict: List[str]\n         :rtype: void\n         \"\"\"\n         for i in dict:\n             self.dict1[len(i)] = self.dict1.get(len(i),[]) + [i]\n \n     def search(self, word):\n         \"\"\"\n         Returns if there is any word in the trie that equals to the given word after modifying exactly one character\n         :type word: str\n         :rtype: bool\n         \"\"\"\n         for i in self.dict1.get(len(word),[]):\n             count = 0\n             for j in range(len(word)):\n                 if i[j] != word[j]:\n                     count  += 1\n             if count == 1:\n                 return True\n         return False\n \n \n # Your MagicDictionary object will be instantiated and called as such:\n # obj = MagicDictionary()\n # obj.buildDict(dict)\n # param_2 = obj.search(word)\n", "class MagicDictionary:\n \n     def __init__(self):\n         \"\"\"\n         Initialize your data structure here.\n         \"\"\"\n         # use a hash to store len(word) => list of workds\n         # then in search only need to search those that are the same length\n         self.hsh = collections.defaultdict(list)\n         \n \n     def buildDict(self, dict):\n         \"\"\"\n         Build a dictionary through a list of words\n         :type dict: List[str]\n         :rtype: void\n         \"\"\"\n         for word in dict:\n             self.hsh[len(word)].append(word)\n         \n \n     def search(self, word):\n         \"\"\"\n         Returns if there is any word in the trie that equals to the given word after modifying exactly one character\n         :type word: str\n         :rtype: bool\n         \"\"\"\n         return any(sum(x != y for x, y in zip(word, candidate)) == 1 for candidate in self.hsh[len(word)])\n         \n \n \n # Your MagicDictionary object will be instantiated and called as such:\n # obj = MagicDictionary()\n # obj.buildDict(dict)\n # param_2 = obj.search(word)\n", "class MagicDictionary:\n \n     def __init__(self):\n         \"\"\"\n         Initialize your data structure here.\n         \"\"\"\n         self.tier=[None]*27\n         \n \n     def buildDict(self, dict):\n         \"\"\"\n         Build a dictionary through a list of words\n         :type dict: List[str]\n         :rtype: void\n         \"\"\"\n         for word in dict:\n             p=self.tier\n             for c in word:\n                 t=ord(c)-ord('a')\n                 if not p[t]:\n                     p[t]=[None]*27\n                 p=p[t]\n             p[26]=1\n         \n \n     def search(self, word):\n         \"\"\"\n         Returns if there is any word in the trie that equals to the given word after modifying exactly one character\n         :type word: str\n         :rtype: bool\n         \"\"\"\n         def func(w):\n             p=self.tier\n             for c in w:\n                 t=ord(c)-ord('a')\n                 if not p[t]:\n                     return False\n                 p=p[t]\n             return p[26]==1\n         pool='abcdefghijklmnopqrstuvwxyz'\n         for i in range(len(word)):\n             for cc in pool:\n                 if cc!=word[i]:\n                     tt=word[:i]+'%c'%cc+word[i+1:]\n                     if func(tt):\n                         return True\n         return False\n             \n         \n \n \n # Your MagicDictionary object will be instantiated and called as such:\n # obj = MagicDictionary()\n # obj.buildDict(dict)\n # param_2 = obj.search(word)\n", "class MagicDictionary:\n \n     def __init__(self):\n         \"\"\"\n         Initialize your data structure here.\n         \"\"\"\n         \n \n     def buildDict(self, dict):\n         \"\"\"\n         Build a dictionary through a list of words\n         :type dict: List[str]\n         :rtype: void\n         \"\"\"\n         self.l = dict\n \n     def search(self, word):\n         \"\"\"\n         Returns if there is any word in the trie that equals to the given word after modifying exactly one character\n         :type word: str\n         :rtype: bool\n         \"\"\"\n         n = len(word)\n         for wo in self.l:\n             if len(wo)==n and wo!=word:\n                 for i in range(n):\n                     if wo[:i]+wo[i+1:]==word[:i]+word[i+1:]:\n                         return True\n         return False\n \n \n # Your MagicDictionary object will be instantiated and called as such:\n # obj = MagicDictionary()\n # obj.buildDict(dict)\n # param_2 = obj.search(word)\n", "from collections import defaultdict\n \n class MagicDictionary:\n \n     def __init__(self):\n         \"\"\"\n         Initialize your data structure here.\n         \"\"\"\n         self.magic_dict = defaultdict(list)\n \n     def buildDict(self, words):\n         \"\"\"\n         Build a dictionary through a list of words\n         :type dict: List[str]\n         :rtype: void\n         \"\"\"\n         for word in words:\n             for i in range(len(word)):\n                 self.magic_dict[word[:i] + '*' + word[i+1:]].append(word[i])\n \n     def search(self, word):\n         for i, char in enumerate(word):\n             candidates = self.magic_dict[word[:i] + '*' + word[i+1:]]\n             for origin in candidates:\n                 if origin != char:\n                     return True\n         return False\n         \n         \n # Your MagicDictionary object will be instantiated and called as such:\n # obj = MagicDictionary()\n # obj.buildDict(dict)\n # param_2 = obj.search(word)", "class MagicDictionary:\n \n     def __init__(self):\n         \"\"\"\n         Initialize your data structure here.\n         \"\"\"\n         self.word_set = {}\n         self.word_origin = set([])\n     def candidate(self,word):\n         result = []\n         for i in range(len(word)):\n             result.append(word[0:i]+'*'+word[i+1:])\n         return result\n     \n     def buildDict(self, dict):\n         \"\"\"\n         Build a dictionary through a list of words\n         :type dict: List[str]\n         :rtype: void\n         \"\"\"\n         self.word_set = {}\n         self.word_origin = set(dict)\n         for item in dict:\n             for cand in self.candidate(item):\n                 self.word_set[cand] = self.word_set.get(cand,0)+1\n                 \n     def search(self, word):\n         \"\"\"\n         Returns if there is any word in the trie that equals to the given word after modifying exactly one character\n         :type word: str\n         :rtype: bool\n         \"\"\"\n         for cand in self.candidate(word):\n             if (self.word_set.get(cand,0) > 1 or (self.word_set.get(cand,0)==1 and word not in self.word_origin)):\n                 return True\n         return False\n \n \n # Your MagicDictionary object will be instantiated and called as such:\n # obj = MagicDictionary()\n # obj.buildDict(dict)\n # param_2 = obj.search(word)\n", "class MagicDictionary:\n \n     def __init__(self):\n         \"\"\"\n         Initialize your data structure here.\n         \"\"\"\n         self.trie_root = dict()\n         self.original_words = None\n         \n \n     def buildDict(self, dictionary):\n         \"\"\"\n         Build a dictionary through a list of words\n         :type dict: List[str]\n         :rtype: void\n         \"\"\"\n         \n         def add_word(trie_root, word):\n             p = trie_root\n             \n             for character in word:\n                 if character not in p:\n                     p[character] = dict()\n                 p = p[character]\n             \n             p['\\0'] = True\n         \n         \n         #for word in dictionary:\n         #    add_word(self.trie_root, word)\n         self.original_words = set(dictionary)\n             \n         \n         \n \n     def search(self, word):\n         \"\"\"\n         Returns if there is any word in the trie that equals to the given word after modifying exactly one character\n         :type word: str\n         :rtype: bool\n         \"\"\"\n         \n         \"\"\"\n         active_tries = list()\n         active_tries.append(self.trie_root)\n         is_tolerable = True\n         \n         for character in word:\n             next_active_tries = list()\n             for trie in active_tries:\n                 if character in trie:\n                     next_active_tries.append(trie[character])\n                 if character not in trie:\n                     if is_tolerable:\n                         is_tolerable = False\n                         for c, next_trie in trie.items():\n                             if c != '\\0':\n                                 next_active_tries.append(next_trie)\n             active_tries = next_active_tries\n             if not active_tries:\n                 break\n         \n         return any('\\0' in trie for trie in active_tries) and not is_tolerable\n         \"\"\"\n         \n         charset = \"abcdefghijklmnopqrstuvwxyz\"\n         \n         for index, character in enumerate(word):\n             for replaced_character in charset:\n                 if character != replaced_character:\n                     if word[:index] + replaced_character + word[index + 1:] in self.original_words:\n                         return True\n         \n         return False\n                 \n         \n         \n \n \n # Your MagicDictionary object will be instantiated and called as such:\n # obj = MagicDictionary()\n # obj.buildDict(dict)\n # param_2 = obj.search(word)\n", "class MagicDictionary:\n \n     def __init__(self):\n         \"\"\"\n         Initialize your data structure here.\n         \"\"\"\n         self.d = None\n \n     def buildDict(self, dict):\n         \"\"\"\n         Build a dictionary through a list of words\n         :type dict: List[str]\n         :rtype: void\n         \"\"\"\n         d=set()\n         for word in dict:\n             d.add(word)\n         self.d = d\n         \n     def search(self, word):\n         \"\"\"\n         Returns if there is any word in the trie that equals to the given word after modifying exactly one character\n         :type word: str\n         :rtype: bool\n         \"\"\"\n         if not word:\n             return\n         \n         def editDistDP(s1, s2):\n             m, n = len(s1), len(s2)\n             dp = [[0 for x in range(n+1)] for x in range(m+1)]\n             for i in range(m+1):\n                 for j in range(n+1):\n                     if i == 0:\n                         dp[i][j] = j    # Min. operations = j\n                     elif j == 0:\n                         dp[i][j] = i    # Min. operations = i\n                     # If last characters are same, ignore last char\n                     # and recur for remaining string\n                     elif s1[i-1] == s2[j-1]:\n                         dp[i][j] = dp[i-1][j-1]\n                         # If last character are different, consider all\n                     # possibilities and find minimum\n                     else:\n                         dp[i][j] = 1 + dp[i-1][j-1]\n             return dp[m][n]\n         # print(self.d)\n         ans = False\n         for dic in self.d:\n             if len(dic) != len(word):\n                 continue\n             ans = ans or editDistDP(dic, word)==1\n         return ans\n \n # Your MagicDictionary object will be instantiated and called as such:\n # obj = MagicDictionary()\n # obj.buildDict(dict)\n # param_2 = obj.search(word)\n", "class MagicDictionary:\n \n     def __init__(self):\n         \"\"\"\n         Initialize your data structure here.\n         \"\"\"\n         self.dict = set()\n \n     def buildDict(self, dict):\n         \"\"\"\n         Build a dictionary through a list of words\n         :type dict: List[str]\n         :rtype: void\n         \"\"\"\n         for word in dict:\n             self.dict.add(word)\n         \n \n     def search(self, word):\n         \"\"\"\n         Returns if there is any word in the trie that equals to the given word after modifying exactly one character\n         :type word: str\n         :rtype: bool\n         \"\"\"\n         letters = string.ascii_lowercase\n         for i in range(len(word)):\n             for letter in letters:\n                 if letter != word[i]:\n                     if word[:i] + letter + word[i+1:] in self.dict:\n                         return True\n         return False\n \n \n # Your MagicDictionary object will be instantiated and called as such:\n # obj = MagicDictionary()\n # obj.buildDict(dict)\n # param_2 = obj.search(word)\n", "class MagicDictionary:\n \n     def __init__(self):\n         \"\"\"\n         Initialize your data structure here.\n         \"\"\"\n         self.magic_dict = set()\n \n     def buildDict(self, words):\n         \"\"\"\n         Build a dictionary through a list of words\n         :type dict: List[str]\n         :rtype: void\n         \"\"\"\n         for word in words:\n             for i in range(len(word)):\n                 for char in range(26):\n                     char = chr(ord('a') + char)\n                     if char != word[i]:\n                         self.magic_dict.add(word[:i] + char + word[i + 1:])\n \n     def search(self, word):\n         \"\"\"\n         Returns if there is any word in the trie that equals to the given word after modifying exactly one character\n         :type word: str\n         :rtype: bool\n         \"\"\"\n         return word in self.magic_dict\n \n \n # Your MagicDictionary object will be instantiated and called as such:\n # obj = MagicDictionary()\n # obj.buildDict(dict)\n # param_2 = obj.search(word)\n", "\"\"\"\n Your MagicDictionary object will be instantiated and called as such:\n obj = MagicDictionary()\n obj.buildDict(dict)\n param_2 = obj.search(word)\n \"\"\"\n \n \n class MagicDictionary:\n     def __init__(self):\n         \"\"\"\n         Initialize your data structure here.\n         \"\"\"\n         self.words = collections.defaultdict(set)\n \n     def buildDict(self, words):\n         \"\"\"\n         Build a dictionary through a list of words\n         :type words: List[str]\n         :rtype: void\n         \"\"\"\n         for word in words:\n             for i in range(len(word)):\n                 key = '{0},{1}'.format(word[:i], word[i + 1:])\n                 \n                 if key not in self.words:\n                     self.words[key] = set()\n                 \n                 # add char to distinct word if its same\n                 self.words[key].add(word[i])\n \n     def search(self, word):\n         \"\"\"\n         Returns if there is any word in the trie that equals to the given word after modifying exactly one character\n         :type word: str\n         :rtype: bool\n         \"\"\"\n         for i in range(len(word)):\n             key = '{0},{1}'.format(word[:i], word[i + 1:])\n             \n             if key not in self.words:\n                 continue\n             \n             words = self.words[key]\n             \n             # 1. word[i] not in words => means not same word\n             # 2. len(words) > 1 => if got same but still can mapping other\n             if word[i] not in words or len(words) > 1:\n                 return True\n         \n         return False", "class Trie():\n     def __init__(self):\n         self.mark = list()\n         self.children = {}\n \n class MagicDictionary:\n \n     def __init__(self):\n         \"\"\"\n         Initialize your data structure here.\n         \"\"\"\n         self.root = Trie()\n         \n \n     def buildDict(self, dict):\n         \"\"\"\n         Build a dictionary through a list of words\n         :type dict: List[str]\n         :rtype: void\n         \"\"\"\n         node = self.root\n         for word in dict:\n             words = {}\n             for i in range(len(word)):\n                 words[word[:i] + \"_\" + word[i+1:]] = word[i]\n             for word in words:\n                 node = self.root\n                 for c in word:\n                     node = node.children.setdefault(c,Trie()) \n                 node.mark.append(words[word])\n         \n         \n \n     def search(self, word):\n         \"\"\"\n         Returns if there is any word in the trie that equals to the given word after modifying exactly one character\n         :type word: str\n         :rtype: bool\n         \"\"\"\n         words = dict()\n         for i in range(len(word)):\n             words[word[:i] + \"_\" + word[i+1:]] = word[i]\n         for word in words:\n             node = self.root\n             for c in word:\n                 node = node.children.get(c) \n                 if not node:\n                     break\n             else:\n                 if node.mark != list() and [words[word]] != node.mark:\n                     return True\n         return False\n         \n # Your MagicDictionary object will be instantiated and called as such:\n # obj = MagicDictionary()\n # obj.buildDict(dict)\n # param_2 = obj.search(word)", "class MagicDictionary:\n \n     def __init__(self):\n         \"\"\"\n         Initialize your data structure here.\n         \"\"\"\n         self.dict = collections.defaultdict(list)\n \n     def buildDict(self, dict):\n         \"\"\"\n         Build a dictionary through a list of words\n         :type dict: List[str]\n         :rtype: void\n         \"\"\"\n         for word in dict:\n             self.dict[len(word)].append(word)\n \n     def search(self, word):\n         \"\"\"\n         Returns if there is any word in the trie that equals to the given word after modifying exactly one character\n         :type word: str\n         :rtype: bool\n         \"\"\"\n         n = len(word)\n         print((word, self.dict[n]))\n         for item in self.dict[n]:\n             count = 0\n             for i in range(n):\n                 if count > 1: continue\n                 if item[i] != word[i]: count += 1\n             if count == 1:\n                 return True\n         return False\n                     \n         \n \n \n # Your MagicDictionary object will be instantiated and called as such:\n # obj = MagicDictionary()\n # obj.buildDict(dict)\n # param_2 = obj.search(word)\n"]