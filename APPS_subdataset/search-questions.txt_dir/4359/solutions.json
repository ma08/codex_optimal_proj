["def cube_times(times):\n    return (round((sum(times) - (min(times) + max(times)))/3 , 2), min(times))", "def cube_times(times):\n    times = sorted(times)\n    return (round(sum(times[1:-1])/3,2), times[0])", "from statistics import mean\n\ndef cube_times(times):\n    return (round(mean(sorted(times)[1:4]), 2), min(times))", "def cube_times(times):\n    return (round(sum(sorted(times)[1:4]) / 3, 2), min(times))", "def cube_times(times):\n    record_time = min(times)\n    slowest_time = max(times)\n    average = 0\n    for time in times:\n        if time == record_time or time == slowest_time:\n            pass\n        else:\n            average += time\n    rounded_time = round(average / 3, 2)\n    return (rounded_time, record_time)", "def cube_times(arr):\n    return (round(sum(sorted(arr)[1: 4]) / 3, 2), min(arr))", "def cube_times(times):\n    times.sort()\n    a= [0,0]\n    a[0] = round((float(times[1]) + float(times[2]) + float(times[3]))/3,2)\n    a[1] = times[0]\n    return tuple(a)\n    \n", "def cube_times(times):\n    times.sort()\n    mid = times[1:4]\n    return ( round(sum(mid) / len(mid), 2), times[0])", "def cube_times(times):\n    return (round(sum(sorted(times)[1:-1])/3, 2), sorted(times)[0])", "def cube_times(times):\n    return (round(sum(sorted(times)[1:-1])/3,2), min(times))"]