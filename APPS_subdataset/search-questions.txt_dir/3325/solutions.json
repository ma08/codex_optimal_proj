["from collections import Counter\n\ndef most_common(s):\n    count = Counter(s)\n    return ''.join(sorted(s, key=lambda c: -count[c]))", "def most_common(s):\n    return ''.join(sorted(s, key = s.count, reverse = True))", "def most_common(stg):\n    return \"\".join(sorted(stg, key=stg.count, reverse=True))", "def most_common(s):\n    return \"\".join(sorted(s, key=lambda i: -s.count(i)))", "from collections import Counter\n\ndef most_common(s):\n    count = Counter(s)\n    return ''.join(t[2] for t in sorted( (-count[c], i, c) for i,c in enumerate(s) ))", "from collections import Counter\ndef most_common(s):\n    c=Counter(s)\n    return \"\".join(sorted(s,key=lambda x:-c[x]))", "def most_common(s):\n    T = sorted(s,key = lambda x: -s.count(x))\n    return ''.join(T)", "def most_common(s: str) -> str:\n    return \"\".join(sorted(s, key = s.count, reverse = True))", "def most_common(a):\n    return ''.join(sorted(a, key = a.count, reverse = True))", "most_common = lambda s: \"\".join(\"\".join(x[2] for x in y) for _, y in __import__(\"itertools\").groupby(sorted((-s.count(x), i, x) for i, x in enumerate(s)), lambda x: x[0]))    "]