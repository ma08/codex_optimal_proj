["try:\n for _ in range(int(input())):\n  N, K = map(int, input().split())\n  cell = []\n  count = 0\n  l = []\n  for __ in range(N):\n   inserted = list(map(int, input().split()))\n   cell.append(inserted)\n\n\n\n  \n\n\n\n\n  cell.sort(key=lambda x: x[1])\n  time = {}\n\n  for number in cell:\n   if number[2] not in time:\n    time[number[2]] = number[1]\n\n    count += 1\n   elif number[0] >= time[number[2]]:\n    time[number[2]] = number[1]\n    count += 1\n\n\n\n\n\n  print(count)\n\n\nexcept:\n pass", "from sys import stdin\ninput = stdin.readline\nfor i in range(int(input())):\n n,k = list(map(int, input().split()))\n l = []\n c = 0\n for g in range(n):\n  adc = list(map(int, input().split()))\n  l.append(adc)\n l.sort(key=lambda x: x[1])\n l.sort(key=lambda x: x[2])\n #for i in range(1,len(l)):\n i = 0\n j = 0\n while i<n:\n  if i!=0:\n   if l[i][2]!=l[i-1][2]:\n    c+=1\n    j = i\n   else:\n    if (l[i][0])>=(l[j][1]):\n     c+=1\n     j = i\n  else:\n   c+=1\n  i+=1\n print(c)\n", "# cook your dish here\nfrom sys import stdin\ninput = stdin.readline\nfor i in range(int(input())):\n n,k = list(map(int, input().split()))\n l = []\n c = 0\n for g in range(n):\n  adc = list(map(int, input().split()))\n  l.append(adc)\n l.sort(key=lambda x: x[1])\n l.sort(key=lambda x: x[2])\n #for i in range(1,len(l)):\n i = 0\n j = 0\n while i<n:\n  if i!=0:\n   if l[i][2]!=l[i-1][2]:\n    c+=1\n    j = i\n   else:\n    if (l[i][0])>=(l[j][1]):\n     c+=1\n     j = i\n  else:\n   c+=1\n  i+=1\n print(c)\n", "# cook your dish here\ndef Max_cust(T):\n for i in range(T):\n  count = 0\n  cus_prefer = {}\n  n,k = map(int,input().split())\n  for j in range(n):\n   s,f,p=map(int, input().split())\n   if p not in cus_prefer:\n    cus_prefer[p] = [(s,f)]\n   else :\n    cus_prefer[p].append((s,f))\n  for v in cus_prefer.values():\n   v.sort(key = lambda x:x[1])\n   previous = (0,0)\n   for item in v:\n    if item[0] >= previous[1]:\n     previous = item\n     count += 1\n  print(count)\n\nt = int(input())\nMax_cust(t)", "from sys import stdin\ninput = stdin.readline\n\nt=int(input())\nfor i in range(t):\n n,k=map(int,input().split())\n \n arr=[]\n for i in range(n):\n  s,f,p=map(int,input().split())\n  arr.append((s,f,p))\n \n arr.sort(key=lambda x:x[1])\n arr.sort(key=lambda x:x[2])\n\n i=0\n j=0\n cnt=0\n while i<n:\n  if i!=0:\n   if arr[i][2]!=arr[i-1][2]:\n    cnt=cnt+1\n    j=i\n   else:\n    if arr[i][0]>=arr[j][1]:\n     cnt=cnt+1\n     j=i\n  else:\n   cnt=cnt+1\n  i=i+1 \n print(cnt) ", "# cook your dish here\nfrom collections import defaultdict\n\nfor _ in range(int(input())):\n n,k=list(map(int, input().split()))\n d=defaultdict(list)\n for i in range(n):\n  s,f,p=list(map(int, input().split()))\n  d[p].append([s, f])\n  \n ans=0\n for i in d:\n  if len(d[i])==1:\n   ans+=1 \n   \n  else:\n   d[i].sort(key=lambda x: x[1])\n   t=0\n   for j in range(len(d[i])):\n    if d[i][j][0]>=t:\n     ans+=1 \n     t=d[i][j][1]\n print(ans)", "t = int(input())\n\nfor _ in range(t):\n n, k = (int(i) for i in input().split())\n cust = [[int(i) for i in input().split()] for _ in range(n)]\n cust.sort(key=lambda x: x[1])\n \n compartments = {}\n ans = 0\n for x in cust:\n  s, f, c = x\n  if c in compartments:\n   if compartments[c] <= s:\n    compartments[c] = f\n    ans += 1\n  else:\n   compartments[c] = f\n   ans += 1\n \n print(ans)", "# cook your dish here\nfrom collections import defaultdict\n\nfor _ in range(int(input())):\n n,k=list(map(int, input().split()))\n d=defaultdict(list)\n for i in range(n):\n  s,f,p=list(map(int, input().split()))\n  d[p].append([s, f])\n  \n ans=0\n for i in d:\n  if len(d[i])==1:\n   ans+=1 \n   \n  else:\n   d[i].sort(key=lambda x: x[1])\n   t=0\n   for j in range(len(d[i])):\n    if d[i][j][0]>=t:\n     ans+=1 \n     t=d[i][j][1]\n print(ans)", "import sys\nfrom collections import defaultdict\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\nfor _ in range(int(input())):\n n,k=list(map(int,input().split()))\n dic=defaultdict(lambda:[])\n for i in range(n):\n  a,d,c=list(map(int,input().split()))\n  dic[c].append((a,d))\n out=0\n for i in dic:\n  dic[i].sort(key=lambda x:x[1])\n  t=0\n  j=0\n  l=len(dic[i])\n  while j<l:\n   if t<=dic[i][j][0]:\n    out+=1\n    t=dic[i][j][1]\n   j+=1\n print(out)\n", "for _ in range(int(input())):\n n,k=list(map(int,input().split()))\n aux={}\n for i in range(n):\n  s,f,p=list(map(int,input().split()))\n  if p not in aux:\n   aux[p]=[]\n   aux[p].append([s,f])\n  else:\n   aux[p].append([s,f])\n tot=0\n for i in aux:\n  # Sorting by finish time\n  if len(aux[i])>1:\n   aux[i].sort(key=lambda x:x[1])\n   t_1=0\n   for j in range(len(aux[i])):\n    if aux[i][j][0]>=t_1:\n     t_1=aux[i][j][1]\n     tot+=1\n  else:\n   tot+=1\n print(tot)\n  \n  \n  \n", "t=int(input())\nwhile(t>0):\n n,k=map(int,input().split())\n l=[]\n c=0\n for i in range(n):\n  a,d,x=map(int,input().split())\n  l.append((a,d,x))\n l.sort(key=lambda x:x[1])\n d={}\n for i in l:\n  if(i[2] not in d):\n   d[i[2]]=i[1]\n   c+=1\n  else:\n   if(i[0]>=d[i[2]]):\n    c+=1\n    d[i[2]]=i[1]\n print(c)\n t-=1", "# cook your dish here\nfrom sys import stdin\nfor _ in range(int(input())):\n n,k = map(int,input().split())\n lst = []\n cmpmt={}\n cnt=0\n for i in range(n):\n  si,fi,pi = map(int,stdin.readline().split())\n  lst.append((fi,si,pi))\n lst = sorted(lst)\n for i in lst:\n  if i[2] not in cmpmt:\n   cmpmt[i[2]] = i[0]\n   cnt +=1\n  else:\n   if cmpmt[i[2]] <= i[1]:\n    cmpmt[i[2]]= i[0]\n    cnt +=1\n print(cnt)", "# cook your dish here\nfor _ in range(int(input())):\n ans = 0\n n,k = map(int,input().split())\n dic = {}\n for _ in range(n):\n  s,f,p = map(int,input().split())\n  if p not in dic:\n   dic[p]= [(s,f)]\n  else:\n   dic[p].append((s,f))\n #print(dic)\n for key,val in dic.items():\n  if len(dic[key])>1:\n   x = 0\n   for dekho in sorted(dic[key],key=lambda x:x[1]):\n    if dekho[0]>=x:\n     ans += 1 \n     x = dekho[1]\n    \n  else:\n   ans += 1 \n print(ans)", "# cook your dish here\nfor _ in range(int(input())):\n ans = 0\n n,k = map(int,input().split())\n dic = {}\n for _ in range(n):\n  s,f,p = map(int,input().split())\n  if p not in dic:\n   dic[p]= [(s,f)]\n  else:\n   dic[p].append((s,f))\n #print(dic)\n for key,val in dic.items():\n  if len(dic[key])>1:\n   x = 0\n   for dekho in sorted(dic[key],key=lambda x:x[1]):\n    if dekho[0]>=x:\n     ans += 1 \n     x = dekho[1]\n    \n  else:\n   ans += 1 \n print(ans)", "t = int(input())\nwhile t > 0:\n n,k = map(int, input().split())\n temp = {}\n for i in range(n):\n  s,f,p = map(int, input().split())\n  if p in temp:\n   temp[p].append([s,f])\n  else:\n   temp[p] = [[s,f]]\n\n cnt = 0\n for k in temp.keys():\n  temp[k].sort(key = lambda x: x[1])\n  prv = [0,0]\n  for i in range(len(temp[k])):\n   if temp[k][i][0] >= prv[1]:\n    prv = temp[k][i]\n    cnt += 1\n print(cnt)\n t -= 1", "# cook your dish here\ndef fn_bonAppetit(test):\n for _ in range(test):\n  n, k = map(int, input().split())\n  cust_preference = {}\n  for c in range(n):\n   s, f, p = map(int, input().split())\n   if p not in cust_preference:\n    cust_preference[p] = [(s, f)]\n   else:\n    cust_preference[p].append((s, f))\n  count = 0\n  for v in cust_preference.values():\n   v.sort(key = lambda x: x[1])\n   previous = (0, 0)\n   for item in v:\n    if item[0] >= previous[1]:\n     previous = item\n     count += 1\n  print(count)\n  \ntest=int(input())\nfn_bonAppetit(test)", "def fn_bonAppetit(t):\n for test_case in range(t):\n  # num of customers (n), num of compartments (k)\n  n, k = map(int, input().split())\n  cust_preference = {}\n  # looping through each customer\n  for c in range(n):\n   # start, finish and preference\n   s, f, p = map(int, input().split())\n   if p not in cust_preference:\n    cust_preference[p] = [(s, f)]\n   else:\n    cust_preference[p].append((s, f))\n  \n  count = 0\n  for v in cust_preference.values():\n   v.sort(key = lambda x: x[1]) # sort by finish time in-place\n   previous = (0, 0)\n   for item in v:\n    if item[0] >= previous[1]:\n     previous = item\n     count += 1\n  print(count)\n  \nt = int(input()) # total number of test cases\nfn_bonAppetit(t)", "# find disjoint intervals\n\nfrom collections import defaultdict\nfor _ in range(int(input())):\n n, k = list(map(int, input().strip().split()))\n\n times = defaultdict(list)\n\n for i in range(n):\n  start, finish, p = [int(x) for x in input().strip().split()]\n  times[p].append((start, finish))\n\n ans = 0\n\n # print(times)\n for c in list(times.values()):\n  c.sort(key = lambda x: x[1])\n  finish_time = 0\n  for st, ft in c:\n   if st >= finish_time:\n    ans += 1\n    finish_time = ft \n print(ans)\n", "# cook your dish here\nfrom sys import stdin\ndef cal(a):\n \n a.sort(key=lambda x:x[1])\n len1=len(a)\n c=1\n curr=a[0][1]\n for p in range(0,len1-1):\n  if curr<=a[p+1][0]:\n   c+=1\n   curr=a[p+1][1]\n return c\n \n \n \nt=int(input())\nfor i in range(t):\n n,k=list(map(int,stdin.readline().split()))\n list1=[]\n a=[]\n count=0\n for j in range(n):\n  s,f,p=list(map(int,stdin.readline().split()))\n  list1.append((s,f,p))\n list1.sort(key=lambda x:x[2])\n for j in range(0,n-1):\n  if list1[j][2]==list1[j+1][2] and j!=n-2:\n   a.append((list1[j][0],list1[j][1]))\n  elif list1[j][2]==list1[j+1][2] and j==n-2:\n   a.append((list1[j][0],list1[j][1]))\n   a.append((list1[j+1][0],list1[j+1][1]))\n   \n   count+=cal(a)\n   a=[]\n  elif list1[j][2]!=list1[j+1][2] and j==n-2:\n   a.append((list1[j][0],list1[j][1]))\n   count+=cal(a)\n   a=[]\n   a.append((list1[j+1][0],list1[j+1][1]))\n   count+=cal(a)\n   a=[]\n  else:\n   a.append((list1[j][0],list1[j][1]))\n   count+=cal(a)\n   a=[]\n if n==1:\n  print(count+1)\n else:\n  print(count)\n", "from sys import stdin,stdout\ntc=int(stdin.readline())\nfor i in range(tc):\n n,k=list(map(int,stdin.readline().split()))\n dict1={}\n comp_to_iterate=[]\n for j in range(n):\n  s,f,comp=list(map(int,stdin.readline().split()))\n  if comp in dict1.keys():\n   dict1[comp].append((s,f))\n   if comp not in comp_to_iterate:\n    comp_to_iterate.append(comp)\n  else:\n   dict1[comp]=[(s,f)]\n total=len(dict1.keys())-len(comp_to_iterate)\n for key in comp_to_iterate:\n  value=dict1[key]\n  value.sort(key=lambda x:x[1])\n  el=value[0]\n  l=1\n  total+=1\n  while l<len(value):\n   if value[l][0]>=el[1]:\n    total+=1\n    el=value[l]\n   l+=1\n print(total)", "for i in range(int(input())):\n n,k=list(map(int,input().split()))\n dict1={}\n for j in range(n):\n  s,e,p=list(map(int,input().split()))\n  try:\n   dict1[p].append((e,s))\n  except:\n   dict1[p]=[(e,s)]\n   \n count=0\n for k in dict1:\n  dict1[k].sort()\n  start=-1\n  for j in dict1[k]:\n   if(j[1]>=start):\n    start=j[0]\n    count+=1\n print(count)\n", "t=int(input())\nfor _ in range (t):\n n,k=map(int,input().split())\n d={}\n for i in range(n):\n  s,f,p=map(int,input().split())\n  try:\n   d[p].append((f,s))\n  except:\n   d[p]=[(f,s)]\n ans=0\n for i in d:\n  d[i].sort()\n  start=-1\n  for j in d[i]:\n   if j[1]>=start:\n    ans+=1\n    start=j[0]\n print(ans)"]