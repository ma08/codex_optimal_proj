["from fractions import gcd\n\ndef sum_differences_between_products_and_LCMs(pairs):\n    return sum(a*b - a*b//gcd(a,b) for a, b in pairs if a and b)", "from fractions import gcd\n\ndef lcm(x, y):\n    return x * y / gcd(x, y) if gcd(x, y) else 0\n    \ndef sum_differences_between_products_and_LCMs(pairs):\n    return sum(x*y - lcm(x, y) for x, y in pairs)\n", "from fractions import gcd\ndef sum_differences_between_products_and_LCMs(pairs):\n    return sum(i * j - (i * j // gcd(i, j)) for i, j in pairs if i and j)", "import fractions\ndef sum_differences_between_products_and_LCMs(pairs):\n   return sum( [pair[0]*pair[1]*(1-(1.0/fractions.gcd(pair[0], pair[1]) if fractions.gcd(pair[0], pair[1])!=0 else 0)) for pair in pairs])", "gcd = lambda x,y: gcd(y,x % y) if x and x%y else y\nlcm = lambda x,y: x*y / gcd(x,y) if x*y else 0\ndef sum_differences_between_products_and_LCMs(pairs):\n    return sum(x[0]*x[1] - lcm(x[0],x[1]) for x in pairs)", "from fractions import gcd\ndef sum_differences_between_products_and_LCMs(pairs):\n    return sum(x * (y - y / (gcd(x, y) or 1)) for x, y in pairs)\n", "gcd=lambda a,b:gcd(b,a%b) if b else a\nlcm=lambda a,b:a/gcd(a,b)*b\nsum_differences_between_products_and_LCMs=lambda p:sum(x*y-(lcm(x,y) if x and y else 0) for x,y in p)\n", "from math import gcd\n\ndef sum_differences_between_products_and_LCMs(pairs):\n    p=[x*y for x,y in pairs]\n    lcd=[x*y/gcd(x,y) if y!=0 else 0 for x,y in pairs]\n    return sum(x-y for y,x in zip(lcd,p))", "from math import gcd\n\ndef sum_differences_between_products_and_LCMs(pairs):\n    return sum((x[0]*x[1]-(x[0]*x[1]/(gcd(x[0],x[1])if x[1]!=0 else 1))) for x in pairs)", "from math import gcd\ndef sum_differences_between_products_and_LCMs(pairs):\n    lcm=lambda x,y:(x*y)//gcd(x,y) if x and y else 0\n    return sum(x*y-lcm(x,y) for [x,y] in pairs)"]