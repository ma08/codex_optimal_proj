["class User ():    \n    def __init__ (self):\n        self.RANKS = [-8, -7, -6, -5, -4, -3, -2, -1, 1, 2, 3, 4, 5, 6, 7, 8]\n        self.rank = -8\n        self.rank_index = 0\n        self.progress = 0\n        \n    def inc_progress (self, rank):\n        rank_index = self.RANKS.index(rank)\n        \n        if rank_index == self.rank_index:\n            self.progress += 3\n        elif rank_index == self.rank_index - 1:\n            self.progress += 1\n        elif rank_index > self.rank_index:\n            difference = rank_index - self.rank_index\n            self.progress += 10 * difference * difference\n            \n        while self.progress >= 100:\n            self.rank_index += 1\n            self.rank = self.RANKS[self.rank_index]\n            self.progress -= 100    \n        \n        if self.rank == 8:\n            self.progress = 0\n            return", "class User(object):\n  def __init__(self):\n    self.ranks, self.cur_rank, self.progress = [-8, -7, -6, -5, -4, -3, -2, -1, 1, 2, 3, 4, 5, 6, 7, 8], 0, 0\n  def get_rank(self):\n    return self.ranks[self.cur_rank]\n  def set_rank(self, arg):\n    '''Nope'''\n  rank = property(get_rank, set_rank)\n  def inc_progress(self, k_rank):\n    k_rank = self.ranks.index(k_rank)\n    if self.rank == 8: return\n    if k_rank == self.cur_rank: self.progress += 3\n    elif k_rank == self.cur_rank - 1: self.progress += 1\n    elif k_rank > self.cur_rank:\n      diff = k_rank - self.cur_rank\n      self.progress += 10 * diff * diff\n    while self.progress >= 100:\n      self.cur_rank += 1\n      self.progress -= 100\n      if self.rank == 8:\n        self.progress = 0\n        return", "class User:\n\n    def __init__(self):\n        self.rank = -8\n        self.progress = 0\n\n    def inc_progress(self, act):\n        assert act in range(-8, 0) + range(1, 9)\n        diff = act - (act > 0) - self.rank + (self.rank > 0)\n        self.progress += (0, 1, 3, diff * diff * 10)[(diff > 0) + (diff >= 0) + (diff >= -1)]\n        while self.progress >= 100:\n            self.rank += 1 + (self.rank == -1)\n            self.progress -= 100\n        if self.rank >= 8:\n            self.rank, self.progress = 8, 0", "class User(object):\n    \n    MAX_RANK, MAX_PROGRESS, DELTA_RANKS = 8, 100, set(range(-8,9))-{0}\n    \n    def __init__(self):\n        self.rank, self.progress = -8, 0\n    \n    def inc_progress(self, rank):\n        if not rank in self.DELTA_RANKS:\n            raise ValueError(\"Invalid value for activity rank\")\n        dRank = rank - self.rank + (rank * self.rank < 0) * (-1)**(rank > self.rank)\n        self.updateProgress([0, 1, 3, 10 * dRank**2][ (dRank > -2) + (dRank >= 0) + (dRank > 0)] )\n        \n    def updateProgress(self,n):\n        nLevel, self.progress = divmod(self.progress + n, self.MAX_PROGRESS)\n        self.rank = min(self.MAX_RANK, self.rank + nLevel + (self.rank+nLevel not in self.DELTA_RANKS))\n        if self.rank == self.MAX_RANK: self.progress = 0", "class User:\n    Ranks = [-8,-7,-6,-5,-4,-3,-2,-1,1,2,3,4,5,6,7,8]\n    \n    def __init__(self):\n        self.__rank = -8\n        self.__progress = 0\n    \n    @property\n    def rank(self):\n        return self.__rank\n    \n    @property\n    def progress(self):\n        return self.__progress\n    \n    def inc_progress(self, kata_rank):\n        self.__validate_rank(kata_rank)\n        progress_made = self.__calc_progress(kata_rank) \n        new_progress = self.progress + progress_made\n        extra_rank, progress_left = self.__calc_rank(new_progress)\n        self.__update_rank(extra_rank)\n        self.__update_progress(progress_left)\n        \n    def __validate_rank(self, in_rank):\n        if (in_rank not in self.Ranks):\n            raise ValueError(\"Rank must be in range [-8,-1]U[1,8]\")\n        \n    def __calc_progress(self, kata_rank):\n        diff = self.Ranks.index(kata_rank) - self.Ranks.index(self.rank)\n        if (kata_rank > self.rank):\n            return 10 * diff ** 2\n        elif (kata_rank == self.rank):\n            return 3\n        elif (diff == - 1):\n            return 1\n        else:\n            return 0\n\n    def __calc_rank(self, new_progress):\n        extra_rank = 0\n        progress_left = new_progress\n        if (new_progress > 99 and self.rank < 8):\n            extra_rank = new_progress // 100\n            progress_left = new_progress % 100\n        return extra_rank, progress_left\n    \n    def __update_progress(self, new_progress):\n        self.__progress = new_progress\n        if (self.rank == 8 and self.progress>0):\n            self.__progress = 0\n    \n    def __update_rank(self, extra_rank):\n        new_rank = self.rank + extra_rank\n        if (self.rank < 0 and new_rank >= 0):\n            new_rank = new_rank + 1\n        if (new_rank > 8):\n            self.__rank = 8\n        else:\n            self.__rank = new_rank            ", "class User:\n    ranks = range(-8,0) + range(1,9)\n\n    def __init__(self):\n        self.rank = -8\n        self.progress = 0\n        \n    def inc_progress(self, rank):\n        if rank not in User.ranks :\n            raise ValueError('Invalid rank')\n        d = User.ranks.index(rank) - User.ranks.index(self.rank)\n        p = 0 if d  < -1 else (\n            1 if d == -1 else (\n            3 if d ==  0 else 10 * d * d ))\n        r = int( (self.progress + p) / 100 )\n        r = User.ranks.index(self.rank) + r\n        self.rank = User.ranks[r if r < len(User.ranks) else -1]\n        self.progress = (self.progress + p) % (100 if self.rank < User.ranks[-1] else 1)", "class User():\n    '''Creates a User class for a codewars style website'''\n\n    def __init__(self):\n        self.ranks = [-8, -7, -6, -5, -4, -3, -2, -1, 1, 2, 3, 4, 5, 6, 7, 8]    #15\n        self.progress = 0\n        self.level = 0\n        self.rank = self.ranks[self.level]\n\n    def inc_progress(self, rank):\n\n        if rank not in self.ranks:\n            raise Exception('Invalid rank')\n        \n        activityrank = self.ranks.index(rank)\n        rank = self.level\n        difference = activityrank - rank\n\n        if self.level < 15:\n\n            if difference > 0:                                              \n                points = 10 * difference * difference\n                self.progress += points\n\n            elif difference == 0: self.progress += 3\n\n            elif difference == -1: self.progress += 1 \n            \n            if self.progress == 100:\n                self.level += 1 \n                self.rank = self.ranks[self.level]\n                self.progress = 0\n\n            while self.progress >= 100:\n                self.level += 1\n                leftover = self.progress - 100\n                self.rank = self.ranks[self.level]\n\n                if self.level < 15:\n                    self.progress = leftover\n\n                elif self.level >= 15:\n                    self.progress = 0", "class User():\n    def __init__(self):\n        self.rank = -8\n        self.ranks = [-8,-7,-6,-5,-4,-3,-2,-1,1,2,3,4,5,6,7,8]\n        self.relative_rank = self.ranks.index(self.rank)\n        self.progress = 0\n        \n    \n    def rank(self):\n        print(\"rank\")\n        print((self.rank))\n        print((self.progress))\n        return self.rank\n    def progress(self):\n        print(\"progrees\")\n        print((self.rank))\n        print((self.progress))\n        return self.progress\n    \n    \n    def inc_progress(self,kata):\n        print(\"inc:\")\n        print((\"rank\",self.rank))\n        print((\"rank relative\",self.relative_rank))\n        print((\"progress\",self.progress))\n        print((\"kata\",kata))\n        \n        if kata > 8 or kata < -8 or kata == 0:\n            raise \"Bruh\"\n        \n        relative_rank = self.ranks.index(kata) ### Relvative rank of the kata. Starts from 0, goes to 15.\n        print((\"kata relative\",relative_rank))\n        \n        print()\n        if self.rank == kata:\n            self.progress += 3\n        elif self.relative_rank - 1 == relative_rank and self.relative_rank != 0:\n            self.progress += 1\n        elif self.relative_rank < relative_rank:\n            self.progress += 10 * ((relative_rank - self.relative_rank) ** 2)\n        \n        if self.progress >= 100:\n            self.relative_rank += self.progress // 100\n            if self.relative_rank > 15:\n                self.relative_rank = 15\n    \n            self.progress %= 100\n        \n            self.rank = self.ranks[self.relative_rank]\n        if self.rank > 7:\n            self.progress = 0\n            \n"]