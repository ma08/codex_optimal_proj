["def score_pole_vault(vaulter_list):\n    popytki = len(vaulter_list[0][\"results\"])\n    temp = {}\n    res = {}\n    for mas in vaulter_list:\n        i = popytki - 1\n        while i >= 0 and mas[\"results\"][i].find('O') == -1:\n            i -= 1\n        if i < 0:\n            n = 0\n            m = ''.join(mas[\"results\"]).count('X')\n        else:\n            n = mas[\"results\"][i].count('X')\n            m = ''.join(mas[\"results\"][:i]).count('X')\n        new_key = (popytki - i, n, m)\n        temp[new_key] = temp.get(new_key, []) + [mas[\"name\"]]\n    k = iter(sorted(temp))\n    i = 0\n    while i < 3:\n        key = next(k)\n        if i == 0 and len(temp[key]) == 1:\n            res['1st'] = temp[key][0]\n            i += 1\n        elif i == 0 and len(temp[key]) > 1:\n            res['1st'] = ', '.join(sorted(temp[key])) + ' (jump-off)'\n            i += len(temp[key])\n        elif i == 1 and len(temp[key]) == 1:\n            res['2nd'] = temp[key][0]\n            i += 1\n        elif i == 1 and len(temp[key]) > 1:\n            res['2nd'] = ', '.join(sorted(temp[key])) + ' (tie)'\n            i += len(temp[key])\n        elif i == 2 and len(temp[key]) == 1:\n            res['3rd'] = temp[key][0]\n            i += 1\n        elif i == 2 and len(temp[key]) > 1:\n            res['3rd'] = ', '.join(sorted(temp[key])) + ' (tie)'\n            i += len(temp[key])\n    return res\n", "def score_pole_vault(vaulter_list):\n    i = j = 0\n    retDict = {}\n    vaulter = {}\n    updatedVaulterList = []\n    \n    for vaulter_dict in vaulter_list:\n        vaulter = {'name': vaulter_dict['name'], 'results': vaulter_dict['results']}\n        highestVaulterJump = 0\n        totalUnsuccessfulAttempts = 0\n        unsuccessfulAttemptsAtHighestJump = 0\n        j = 0\n        for resultsList in vaulter_list[i]['results']:\n            j -= 1\n            if 'O' in resultsList:\n                highestVaulterJump = j\n                unsuccessfulAttemptsAtHighestJump = resultsList.count('X') \n            totalUnsuccessfulAttempts += resultsList.count('X')    \n        vaulter['highestSuccessfulJump'] = highestVaulterJump\n        vaulter['numOfUnsuccessfulAttemptsAtHighestSuccessfulJump'] = unsuccessfulAttemptsAtHighestJump\n        vaulter['numOfTotalUnsuccessfulAttempts'] = totalUnsuccessfulAttempts\n        updatedVaulterList.append(dict(vaulter))\n        i += 1\n\n    updatedVaulterList = sorted(updatedVaulterList, key = lambda i: (i['highestSuccessfulJump'], i['numOfUnsuccessfulAttemptsAtHighestSuccessfulJump'], i['numOfTotalUnsuccessfulAttempts'], i['name']))\n    jumpOff = 0\n    positionsAssigned = 0\n    for i in range(len(updatedVaulterList)):\n        if i == 0:\n            retDict['1st'] = updatedVaulterList[i]['name']\n            positionsAssigned += 1\n        if i > 0:\n            if updatedVaulterList[i]['highestSuccessfulJump'] == updatedVaulterList[0]['highestSuccessfulJump']:\n                if updatedVaulterList[i]['numOfUnsuccessfulAttemptsAtHighestSuccessfulJump'] == updatedVaulterList[0]['numOfUnsuccessfulAttemptsAtHighestSuccessfulJump']:\n                    if updatedVaulterList[i]['numOfTotalUnsuccessfulAttempts'] == updatedVaulterList[0]['numOfTotalUnsuccessfulAttempts']:\n                        retDict['1st'] = retDict['1st'] + \", \" + updatedVaulterList[i]['name']\n                        jumpOff = 1\n                        positionsAssigned += 1\n    if jumpOff:\n        retDict['1st'] = retDict['1st'] + \" (jump-off)\"\n    tie = 0\n    if positionsAssigned == 1:  #I.e. only first place has been assigned to 1 person\n        for i in range(1, len(updatedVaulterList)):\n            if i == 1:\n                retDict['2nd'] = updatedVaulterList[i]['name']\n                positionsAssigned += 1\n            if i > 1:\n                if updatedVaulterList[i]['highestSuccessfulJump'] == updatedVaulterList[1]['highestSuccessfulJump']:\n                    if updatedVaulterList[i]['numOfUnsuccessfulAttemptsAtHighestSuccessfulJump'] == updatedVaulterList[1]['numOfUnsuccessfulAttemptsAtHighestSuccessfulJump']:\n                        if updatedVaulterList[i]['numOfTotalUnsuccessfulAttempts'] == updatedVaulterList[1]['numOfTotalUnsuccessfulAttempts']:\n                            retDict['2nd'] = retDict['2nd'] + \", \" + updatedVaulterList[i]['name']\n                            tie = 1\n                            positionsAssigned += 1\n    if tie:\n        retDict['2nd'] = retDict['2nd'] + \" (tie)\"                        \n    tie = 0\n    if positionsAssigned == 2:  #I.e. Either 1st place has a tie, or 1st and 2nd place assigned\n        for i in range(2, len(updatedVaulterList)):\n            if i == 2:\n                retDict['3rd'] = updatedVaulterList[i]['name']\n                positionsAssigned += 1\n            if i > 2:\n                if updatedVaulterList[i]['highestSuccessfulJump'] == updatedVaulterList[2]['highestSuccessfulJump']:\n                    if updatedVaulterList[i]['numOfUnsuccessfulAttemptsAtHighestSuccessfulJump'] == updatedVaulterList[2]['numOfUnsuccessfulAttemptsAtHighestSuccessfulJump']:\n                        if updatedVaulterList[i]['numOfTotalUnsuccessfulAttempts'] == updatedVaulterList[2]['numOfTotalUnsuccessfulAttempts']:\n                            retDict['3rd'] = retDict['3rd'] + \", \" + updatedVaulterList[i]['name']\n                            tie = 1\n                            positionsAssigned += 1\n    if tie:\n        retDict['3rd'] = retDict['3rd'] + \" (tie)\"  \n\n    return retDict", "def score_pole_vault(vaulters):\n    results, k , R = sorted([(v['name'], score(v['results'])) for v in vaulters], key=lambda k: k[1]), 0, {}\n    \n    for key, tie in [('1st', ' (jump-off)'), ('2nd', ' (tie)'), ('3rd', ' (tie)')]:\n        if key == '2nd' and k > 1: continue\n        mx, r = results[-1][1], []\n        while results and results[-1][1] == mx:\n            r += [results.pop()[0]]\n\n        k += len(r)\n        R[key] = ', '.join(sorted(r)) + tie if len(r) > 1 else r.pop()\n        if k >= 3: break\n            \n    return R    \n    \ndef score(hh):\n    return ([(-1, 0)] + [(i, -len(h)) for i, h in [(i, h) for i, h in enumerate(hh)] if 'O' in h]).pop() +(-sum(j.count('X') for j in hh),)", "from collections import OrderedDict\n\ndef solve_tie_2(_vaulter_list, names, res, c):\n    third_criterion = {}\n    for player in _vaulter_list:\n        if player[\"name\"] in names:\n            fails = ''.join(player[\"results\"]).count(\"X\")\n            if fails in third_criterion:\n                third_criterion[fails].append(player[\"name\"])\n            else:\n                third_criterion[fails] = [player[\"name\"]]\n    third_criterion = OrderedDict(sorted(third_criterion.items()))\n    for pair in third_criterion.items():\n        if len(pair[1]) == 1:\n            res.append(pair[1][0])\n            remove_from_dict(_vaulter_list, res[-1])\n            c += 1\n            if len(res) >= 3 or c >= 3: return c\n        else: # unsolvable tie\n            res.append(', '.join(sorted(pair[1])))\n            for name in pair[1]:\n                remove_from_dict(_vaulter_list, name)\n            c += len(pair[1])\n            if len(res) >= 3 or c >= 3: return c\n    return c\n\ndef solve_tie_1(_vaulter_list, names, index, res, c):\n    second_criterion = {}\n    for player in _vaulter_list:\n        if player[\"name\"] in names:\n            fails = player[\"results\"][index].count(\"X\")\n            if fails in second_criterion:\n                second_criterion[fails].append(player[\"name\"])\n            else:\n                second_criterion[fails] = [player[\"name\"]]\n    second_criterion = OrderedDict(sorted(second_criterion.items()))\n    for pair in second_criterion.items():\n        if len(pair[1]) == 1:\n            res.append(pair[1][0])\n            remove_from_dict(_vaulter_list, res[-1])\n            c += 1\n            if len(res) >= 3 or c >= 3: return c\n        else: # try to solve according to next criterion\n            c = solve_tie_2(_vaulter_list, pair[1], res, c)\n            if len(res) >= 3: return c\n    return c\n\ndef remove_from_dict(_vaulter_list, name):\n    for i in range(len(_vaulter_list)):\n        if _vaulter_list[i][\"name\"] == name:\n            del _vaulter_list[i]\n            break\n\ndef score_pole_vault(vaulter_list):\n    if len(vaulter_list) < 1: return {}\n    _vaulter_list = vaulter_list.copy()\n    res = []\n    c = 0\n    l = len(_vaulter_list[0][\"results\"])\n    best_height_index = l\n    while len(res) < 3 and c < 3:\n        for i in range(l-1, -1, -1):\n            for player in _vaulter_list:\n                if \"O\" in player[\"results\"][i]:\n                    best_height_index = i\n                    break\n            if best_height_index < l: # found\n                break\n        first_criterion_players = []\n        for player in _vaulter_list:\n            if \"O\" in player[\"results\"][best_height_index]:\n                first_criterion_players.append(player[\"name\"])\n        if len(first_criterion_players) == 1:\n            res.append(first_criterion_players[0])\n            remove_from_dict(_vaulter_list, res[-1])\n            c += 1\n        else:\n            c = solve_tie_1(_vaulter_list, first_criterion_players, best_height_index, res, c)\n        l = best_height_index\n    \n    res_dict = {\"1st\": res[0] + (\" (jump-off)\" if \",\" in res[0] else \"\")}\n    n = len(res_dict[\"1st\"].split(\",\"))\n    if n == 3: return res_dict\n    if n == 2:\n        res_dict[\"3rd\"] = res[1] + (\" (tie)\" if \",\" in res[1] else \"\")\n        return res_dict\n    else:\n        res_dict[\"2nd\"] = res[1] + (\" (tie)\" if \",\" in res[1] else \"\")\n        if \",\" in res_dict[\"2nd\"]: return res_dict\n        else:\n            res_dict[\"3rd\"] = res[2] + (\" (tie)\" if \",\" in res[2] else \"\")\n            return res_dict", "def score_pole_vault(vaulter_list):\n    r={}\n    for v in vaulter_list:\n        x=[len(v['results']),0,0]\n        f=0\n        for i,t in enumerate(v['results'][::-1]):\n            if 'O' in t and x[0]==len(v['results']):\n                x=[i,t.count('X'),0]\n            f+=t.count('X')\n        x[2]=f\n        r[v['name']]=tuple(x)\n    rank=sorted(list(r.keys()),key=lambda x:r[x])\n    first=[rank[0]]\n    second=[]\n    third=[]\n    for name in rank[1:]:\n        if r[first[0]]==r[name]:\n            first.append(name)\n        elif not second or r[second[0]]==r[name]:\n            second.append(name)\n        elif not third or r[third[0]]==r[name]:\n            third.append(name)\n    if len(first)>=2:\n        d={'1st': ', '.join(sorted(first))+' (jump-off)'}\n        if len(first)==2:\n            if len(second)==1:\n                d['3rd']=second[0]\n            else:\n                d['3rd']=', '.join(sorted(second))+' (tie)'\n    else:\n        d={'1st': first[0]}\n        if len(second)>=2:\n            d['2nd']=', '.join(sorted(second))+' (tie)'\n        else:\n            d['2nd']=second[0]\n            if len(third)==1:\n                d['3rd']=third[0]\n            else:\n                d['3rd']=', '.join(sorted(third))+' (tie)'\n    return d\n", "def score_pole_vault(vaulter_list):\n    summary=[]\n    for i in vaulter_list:\n        total_X=0\n        highest_cleared=-1\n        X_at_highest = 0\n        for j in range(len(i[\"results\"])):\n            if \"O\" in i[\"results\"][j]:\n                highest_cleared=j\n                X_at_highest=i[\"results\"][j].count(\"X\")\n            total_X += i[\"results\"][j].count(\"X\")\n        summary.append((-highest_cleared, X_at_highest, total_X, i[\"name\"]))\n    final_standing= sorted(summary)\n    \n    result = {}\n    winners_stat= final_standing[0][:3]\n    winners=[]\n    for i in final_standing:\n        if i[:3]==winners_stat[:3]: winners.append(i[3])\n    result[\"1st\"] = \", \".join(winners) + \" (jump-off)\"*(len(winners)>1)\n    \n    if len(winners)>2: return result\n    \n    if len(winners)==1:\n        second_stat= final_standing[1][:3]\n        seconds=[]\n        for i in final_standing:\n            if i[:3]==second_stat[:3]: seconds.append(i[3])\n        result[\"2nd\"] = \", \".join(seconds) + \" (tie)\"*(len(seconds)>1)\n        if len(seconds)>1: return result\n    \n    thirds=[]\n    third_stat = final_standing[2][:3]\n    for i in final_standing:\n            if i[:3]==third_stat[:3]: thirds.append(i[3])\n    result[\"3rd\"] = \", \".join(thirds) + \" (tie)\"*(len(thirds)>1)\n    return result\n", "def score_pole_vault(vaulters):\n    results = sorted([(v['name'], score(v['results'])) for v in vaulters], key=lambda k: k[1])\n    k, R = 0, {}\n    \n    for key, tie in [('1st', ' (jump-off)'), ('2nd', ' (tie)'), ('3rd', ' (tie)')]:\n        if key == '2nd' and k > 1: continue\n        mx, r = results[-1][1], []\n        while results and results[-1][1] == mx:\n            r += [results.pop()[0]]\n\n        k += len(r)\n        R[key] = ', '.join(sorted(r)) + tie if len(r) > 1 else r.pop()\n        if k >= 3: break\n            \n    return R    \n    \ndef score(heights):\n    highest, highest_jumps, fails = -1, 0, 0\n    for i, h in enumerate(heights):\n        fails += h.count('X')\n        if 'O' in h:\n            highest,highest_jumps = i, len(h)\n    return (highest, -highest_jumps, -fails)        ", "from collections import defaultdict\n\ndef score_pole_vault(vaulter_list):\n    scoreboard = defaultdict(list)\n    for v in vaulter_list:\n        score = 0\n        fails = 0\n        for i, result in enumerate(v[\"results\"], 1):\n            fails += result.count(\"X\")\n            if \"O\" in result:\n                score = i * 10 - result.count(\"X\")\n        scoreboard[(-score, fails)].append(v[\"name\"])\n    nWinners = 0\n    places = [\"3rd\", \"2nd\", \"1st\"]\n    answer = {}\n    for performance in sorted(scoreboard):\n        place = places.pop()\n        winnerList = sorted(scoreboard[performance])\n        l = len(winnerList)\n        winners = \", \".join(winnerList)\n        if l > 1:\n            winners += \" (jump-off)\" if place == \"1st\" else \" (tie)\"\n        answer[place] = winners\n        nWinners += l\n        if nWinners >= 3:\n            break\n        if nWinners == len(places) == 2:\n            places.pop()\n    return answer"]