["import sys\ninput = sys.stdin.readline\n\nn,m=list(map(int,input().split()))\nW=[0]+list(map(int,input().split()))\nE=[tuple(map(int,input().split())) for i in range(m)]\nS=int(input())\n\nELIST=[[] for i in range(n+1)]\nEW=[0]*(n+1)\n\nfor x,y in E:\n    ELIST[x].append(y)\n    ELIST[y].append(x)\n\n    EW[x]+=1\n    EW[y]+=1\n\n\nfrom collections import deque\nQ=deque()\nUSED=[0]*(n+1)\n\nfor i in range(1,n+1):\n    if EW[i]==1 and i!=S:\n        USED[i]=1\n        Q.append(i)\n\nEW[S]+=1<<50\nUSED[S]=1\n\nwhile Q:\n    x=Q.pop()\n    EW[x]-=1\n\n    for to in ELIST[x]:\n        if USED[to]==1:\n            continue\n        EW[to]-=1\n\n        if EW[to]==1 and USED[to]==0:\n            Q.append(to)\n            USED[to]=1\n\n#print(EW)\nLOOP=[]\n\nANS=0\nfor i in range(1,n+1):\n    if EW[i]!=0:\n        ANS+=W[i]\n        LOOP.append(i)\n\nSCORE=[0]*(n+1)\nUSED=[0]*(n+1)\n\nfor l in LOOP:\n    SCORE[l]=ANS\n    USED[l]=1\n\nQ=deque(LOOP)\n\nwhile Q:\n    x=Q.pop()\n\n    for to in ELIST[x]:\n        if USED[to]==1:\n            continue\n\n        SCORE[to]=W[to]+SCORE[x]\n        Q.append(to)\n        USED[to]=1\n\nprint(max(SCORE))\n", "from collections import defaultdict\n\ndef get_neighbors(edges):\n    neighbors = defaultdict(set, {})\n    for v1, v2 in edges:\n        neighbors[v1].add(v2)\n        neighbors[v2].add(v1)\n\n    return dict(neighbors)\n\n\ndef get_component(neighbors_map, root):\n    if root not in neighbors_map:\n        return {root}\n\n    horizon = set(neighbors_map[root])\n    component = {root}\n\n    while horizon:\n        new_node = horizon.pop()\n        if new_node in component:\n            continue\n\n        component.add(new_node)\n        new_neighbors = neighbors_map[new_node].difference(component)\n        horizon |= new_neighbors\n\n    return component\n\n\ndef fn(weights, edges, root):\n    neihgbors_map = get_neighbors(edges)\n    if root not in neihgbors_map:\n        return weights[root]\n\n    first_component = get_component(neihgbors_map, root)\n\n    neihgbors_map = {k: v for k, v in list(neihgbors_map.items()) if k in first_component}\n    degrees = {}\n    leaves = []\n    for n, neigh in list(neihgbors_map.items()):\n        degrees[n] = len(neigh)\n        if len(neigh) == 1 and n != root:\n            leaves.append(n)\n\n    extra_values = defaultdict(int, {})\n    max_extra = 0\n    removed_set = set()\n    while leaves:\n        leaf = leaves.pop()\n        value = weights[leaf] + extra_values[leaf]\n        parent = neihgbors_map.pop(leaf).pop()\n        neihgbors_map[parent].remove(leaf)\n        degrees[parent] -= 1\n        if degrees[parent] == 1 and parent != root:\n            leaves.append(parent)\n\n        mm = max(extra_values[parent], value)\n        extra_values[parent] = mm\n        max_extra = max(mm, max_extra)\n        removed_set.add(leaf)\n\n    return sum(weights[n] for n in neihgbors_map) + max_extra\n\ndef print_answer(source):\n    n, m = list(map(int, source().split()))\n    weights = list(map(int, source().split()))\n    edges = [[int(k) - 1 for k in source().split()] for _ in range(m)]\n    root = int(source()) - 1\n\n    print(fn(weights, edges, root))\n\nprint_answer(input)\n\nif False:\n    from string_source import string_source\n\n    print_answer(string_source(\"\"\"3 2\n1 1335 2\n2 1\n3 2\n2\"\"\"))\n\n    from string_source import string_source\n    print_answer(string_source(\"\"\"1 0\n1000000000\n1\"\"\"))\n\n    print_answer(string_source(\"\"\"10 12\n    1 7 1 9 3 3 6 30 1 10\n    1 2\n    1 3\n    3 5\n    5 7\n    2 3\n    5 4\n    6 9\n    4 6\n    3 7\n    6 8\n    9 4\n    9 10\n    6\"\"\"))\n\n    print_answer(string_source(\n            \"\"\"5 7\n    2 2 8 6 9\n    1 2\n    1 3\n    2 4\n    3 2\n    4 5\n    2 5\n    1 5\n    2\"\"\"))\n\n    source = string_source(\"\"\"3 2\n1 1335 2\n2 1\n3 2\n2\"\"\")\n    n, m = list(map(int, source().split()))\n    weights = list(map(int, source().split()))\n    edges = [[int(k) - 1 for k in source().split()] for _ in range(m)]\n    root = int(source())\n\n    fn(weights, edges, root)\n\n    from graphviz import Graph\n\n    dot = Graph(format=\"png\", name=\"xx\", filename=f\"_files/temp/graph.png\")\n\n    for idx, w in enumerate(weights):\n        dot.node(str(idx), label=f\"{idx} - {w}\")\n\n    for s,e in edges:\n        dot.edge(str(s),str(e))\n\n    dot.view(cleanup=True)\n\n    sum(weights)\n\n", "import sys\ninput = sys.stdin.readline\nn,m=map(int,input().split())\nW=[0]+list(map(int,input().split()))\nE=[tuple(map(int,input().split())) for i in range(m)]\nS=int(input())\n \nELIST=[[] for i in range(n+1)]\nEW=[0]*(n+1)\n \nfor x,y in E:\n    ELIST[x].append(y)\n    ELIST[y].append(x)\n \n    EW[x]+=1\n    EW[y]+=1\n \n#print(ELIST,EW) \nfrom collections import deque\nQ=deque()\nUSED=[0]*(n+1)\nfor i in range(1,n+1):\n    if EW[i]==1 and i!=S:\n        USED[i]=1\n        Q.append(i)\n#print(Q) \nEW[S]+=1<<50\nUSED[S]=1\n \nwhile Q:\n    x=Q.pop()\n    EW[x]-=1\n    #print(x,EW)\n \n    for to in ELIST[x]:\n        if USED[to]==1:\n            continue\n        EW[to]-=1\n \n        if EW[to]==1 and USED[to]==0:\n            Q.append(to)\n            USED[to]=1\n#print(EW)\nLOOP=[]\n \nANS=0\nfor i in range(1,n+1):\n    if EW[i]!=0:\n        ANS+=W[i]\n        LOOP.append(i)\n#print(LOOP) \nSCORE=[0]*(n+1)\nUSED=[0]*(n+1)\nfor l in LOOP:\n    SCORE[l]=ANS\n    USED[l]=1\n#print(USED) \nQ=deque(LOOP)\n#print(Q)\nwhile Q:\n    x=Q.pop()\n    #print(x,ELIST[x],USED)\n    for to in ELIST[x]:\n        if USED[to]==1:\n            continue\n \n        SCORE[to]=W[to]+SCORE[x]\n        Q.append(to)\n        USED[to]=1\n \nprint(max(SCORE))"]