["class Solution:\n     def dominantIndex(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) <= 1:\n             return 0\n         m = max(nums)\n         ind = nums.index(m)\n         del nums[ind]\n         m_2 = max(nums)\n         return ind if m >= 2*m_2 else -1", "class Solution:\n     def dominantIndex(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         max_num = 0\n         s_max = 0\n         max_num_index = 0\n         if len(nums) != 1:\n             for i in range(len(nums)):\n                 if nums[i] > max_num:\n                     s_max = max_num\n                     s_max_index = max_num_index\n                     max_num = nums[i]\n                     max_num_index = i\n                 elif nums[i] > s_max:\n                     s_max = nums[i]\n             if max_num >= 2 * s_max:\n                 return max_num_index\n             else: return -1\n         else:return 0", "class Solution:\n     def dominantIndex(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         # L = nums.copy()\n         # L.sort()\n         # if len(L) <= 1:\n         #     return 0\n         # else:\n         #     if L[-1] >= L[-2]*2:\n         #         return nums.index(L[-1])\n         #     else:\n         #         return -1\n             \n         \n         if len(nums) == 1: return 0\n         \n         maxval = nums[0]\n         maxindex = 0\n         secVal = None\n         \n         for i, e in enumerate(nums):\n             if i == 0:\n                 continue\n             if e > maxval:\n                 secVal, maxval = maxval, e\n                 maxindex = i\n             elif secVal is None:\n                 secVal = e\n             elif e > secVal:\n                 secVal = e\n         \n         if secVal*2 <= maxval:\n             return maxindex\n         return -1\n", "class Solution:\n     def dominantIndex(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) <= 1: return 0\n         max1 = max(nums)\n         idx = nums.index(max1)\n         del nums[idx]\n         max2 = max(nums)\n         return idx if max2 * 2 <= max1 else -1", "class Solution:\n     def dominantIndex(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         largest = max(nums)\n         for n in nums:\n             if 2 * n > largest and n != largest:\n                 return -1\n         return nums.index(largest)", "class Solution:\n     def dominantIndex(self, nums):\n \n         if len(nums) > 1:\n             n = max(nums)\n             id = nums.index(n)\n             nums.remove(n)\n             return id if n >= max(nums)*2 else -1\n         else:\n             return 0", "class Solution:\n     def dominantIndex(self, nums):\n \n         if len(nums) > 1:\n             n = max(nums)\n             id = nums.index(n)\n             nums.remove(n)\n             return id if n >= max(nums)*2 else -1\n         else:\n             return 0", "class Solution:\n     def dominantIndex(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums)==1:\n             return 0\n         maxnum=max(nums)\n         index=nums.index(maxnum)\n         nums.sort()\n         if nums[-1]>=nums[-2]*2:\n             return index\n         else:\n             return -1", "class Solution:\n     def dominantIndex(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         out_index= -1\n         lrgst, scnd, ind = -float('inf'), None, None\n         \n         for i in range(len(nums)):\n             if nums[i] > lrgst:\n                 lrgst, scnd, ind = nums[i], lrgst, i\n             elif nums[i] > scnd:\n                 scnd = nums[i]\n         if lrgst >= 2 * scnd:\n             out_index = ind\n         return out_index\n", "class Solution:\n     def dominantIndex(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         first=float('-Inf')\n         second=float('-Inf')\n         index=None\n         for d,num in enumerate(nums):\n             if num>first:\n                 second=first\n                 first=num\n                 index=d\n             if second<num<first:\n                 second=num\n         if second==0 or second==float('-Inf') or first/second>=2:\n             return index\n         else:\n             return -1", "class Solution:\n     def dominantIndex(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         \n         if len(nums) == 1:\n             return 0\n \n         doubleBigIndex = 0\n         halfpoint = 0\n         biggest = 0\n         for index, item in enumerate(nums):\n             print((biggest, halfpoint, doubleBigIndex, item))\n             if item >= 2*biggest:\n                 biggest = item\n                 doubleBigIndex = index\n                 halfpoint = biggest/2.0\n             elif item > halfpoint:\n                 doubleBigIndex = -1\n             print(doubleBigIndex)\n                 \n         return doubleBigIndex\n                 \n             \n                 \n", "class Solution:\n     def dominantIndex(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         n = len(nums)\n         if n <= 1:\n             return n-1\n         im = 0\n         im2 = 1\n         if nums[im2] > nums[im]:\n             im, im2 = im2, im\n         for i in range(2, n):\n             if nums[i] > nums[im]:\n                 im2 = im\n                 im = i\n             elif nums[i] > nums[im2]:\n                 im2 = i\n         if nums[im] >= nums[im2] * 2:\n             return im\n         else:\n             return -1", "class Solution:\n     def dominantIndex(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums)==1:\n             return 0\n         Max = max(nums)\n         if nums.count(Max)>1:\n             return -1\n         if any(nums)==False:\n             return 0\n         if nums.count(0)==len(nums)-1:\n             return nums.index(Max)\n         for i in nums:\n             if i!=Max and i!=0:\n                 if Max/i<2:\n                     return -1\n         return nums.index(Max)", "class Solution:\n     def dominantIndex(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) <= 1:\n             return 0\n         m = max(nums)\n         ind = nums.index(m)\n         del nums[ind]\n         m_2 = max(nums)\n         return ind if m >= 2*m_2 else -1"]