["def checkchoose(m, n):\n    c = 1\n    for x in range(n // 2 + 1):\n        if c == m: return x\n        c = c * (n-x) // (x+1)\n    else: return -1\n", "from math import factorial\n\ndef choose(n, x):\n    return factorial(n) // (factorial(x) * factorial(n-x)) if x else 1\n\ndef checkchoose(m, n):\n    for x in range(n+1):\n        if choose(n, x) == m:\n            return x\n    return -1", "from math import factorial as fact\n\ndef checkchoose(m, n):\n    for k in range(0, (n)//2 + 1):\n        if fact(n) // (fact(n-k) * fact(k)) == m:\n            return k\n    return -1", "from math import factorial as fact\n\ndef combinations(n, k):\n    return fact(n) // (fact(k) * fact(n-k))\n\ndef checkchoose(posters, colors):\n    return min([k for k in range(colors//2 +1) if combinations(colors, k) == posters], default=-1)", "def checkchoose(m, n):\n    from math import factorial as f\n    a = 0\n    while a <= n//2:\n        if m == f(n) / (f(a)*f(n-a)):\n            return(a)\n        else:\n            a += 1\n    return(-1)", "from math import factorial as fact\ndef checkchoose(m, n):\n    l = [i for i in range(1, n+1) if fact(n)/(fact(i)*fact(n-i))==m]\n    return 0 if m<n else l[0] if l else -1", "def checkchoose(m, n):\n  for k in range(n + 1):\n    nk = n - k\n    ans = partial_fact(n, k) / factorial(nk) if k > nk else partial_fact(n, nk) / factorial(k)\n    if m == ans: return k\n    if m < ans: return -1 #No need to search the other side of the triangle\n  return -1\n\nf = [0, 1, 2, 6, 24, 120]\ndef factorial(n):\n    if n == 0 or n == 1: return 1\n    if n < len(f): return f[n]\n    f.append(factorial(n - 1) * n)\n    return f[n]\npartial_fact = lambda hi, le: 1 if hi <= le else hi * partial_fact(hi - 1, le)", "from operator import mul\nfrom functools import reduce\n\ndef choose(n, p):\n    if (p > n): \n        return 0\n    if (p > n - p): \n        p = n - p\n    return reduce(mul, range((n-p+1), n+1), 1) // reduce( mul, range(1,p+1), 1)\n\ndef checkchoose(m, n):\n    mx = choose(n, n // 2)\n    if (m > mx): \n        return -1\n    i = 0\n    while (i <= (n // 2) + 1):\n        if choose(n, i) == m:\n            return i\n        i += 1\n    return -1"]