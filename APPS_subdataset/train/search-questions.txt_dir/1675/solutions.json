["from math import sqrt\n\ndef get_distance(x1,y1,x2,y2):\n    return sqrt((x1-x2)**2 + (y1-y2)**2)\n\nT = int(input())\nans = []\n\nfor _ in range(T):\n    blank = input()\n    N = int(input())\n\n    C = [[] for i in range(10**4+1)]\n\n    for i in range(N):\n        x,y = [int(i) for i in input().split()]\n        C[x].append(y)\n\n    distance = 0\n    lastx = None\n    lasty = None\n    for i in range(10**4+1):\n        if(C[i]!=[]):\n            max_ci = max(C[i])\n            min_ci = min(C[i])\n            if(lastx!=None and lasty!=None):\n                distance += get_distance(lastx,lasty,i,max_ci)\n            distance += max_ci - min_ci\n            lastx = i\n            lasty = min_ci\n    # ans.append(round(distance,2))\n    ans.append(\"{:.2f}\".format(distance))\n    # ans.append(distance)\n\nfor i in ans:\n    print(i)\n", "# cook your dish here\nfrom math import *\nfor u in range(int(input())):\n    p=input()\n    n=int(input())\n    l=[]\n    for i in range(n):\n        l.append(list(map(int,input().split())))\n    s=0\n    l.sort(key=lambda x: [x[0],-x[1]])\n    for i in range(1,n):\n        s+=sqrt((l[i][0]-l[i-1][0])**2+(l[i][1]-l[i-1][1])**2)\n    print('{0:.2f}'.format(s))\n", "from math import *\nfor u in range(int(input())):\n    p=input()\n    n=int(input())\n    l=[]\n    for i in range(n):\n        l.append(list(map(int,input().split())))\n    s=0\n    l.sort(key=lambda x: [x[0],-x[1]])\n    for i in range(1,n):\n        s+=sqrt((l[i][0]-l[i-1][0])**2+(l[i][1]-l[i-1][1])**2)\n    print('{0:.2f}'.format(s))\n", "test = int(input())\nfor _ in range(test):\n    blank = input()\n    n = int(input())\n    points={}\n    for i in range(n):\n        temp = list(map(int, input().split()))\n        if temp[0] in points:\n            points[temp[0]].append(temp[1])\n        else:\n            points[temp[0]]=[temp[1]]\n    \n    for i in points:\n        points[i].sort(reverse=True)\n        \n    x1=-1\n    y1=-1\n    distance=0.00\n    xpoints = list(points.keys())\n    xpoints.sort()\n    \n    for i in xpoints:\n        ypoints = points[i]\n        for j in ypoints:\n            if x1==-1 and y1==-1:\n                x1=i\n                y1=j\n                continue\n            else:\n                distance+= ((x1-i)**2 + (y1-j)**2)**0.5\n                x1=i\n                y1=j\n                \n    print(\"%.2f\" %(distance))", "test = int(input())\nfor _ in range(test):\n    blank = input()\n    n = int(input())\n    points={}\n    for i in range(n):\n        temp=list(map(int, input().split()))\n        if temp[0] in points:\n            points[temp[0]].insert(0, temp[1])\n        else:\n            points[temp[0]]=[temp[1]]\n         \n    for i in points:\n        points[i].sort(reverse=True)\n    distance = 0.00\n    x1 = -1\n    y1 = -1\n    \n    xpoints = list(points.keys())\n    xpoints.sort()\n    distance=0.00\n    for i in xpoints:\n        ypoints = points[i]\n        for j in ypoints:\n            if x1==-1 and y1==-1:\n                x1 = i\n                y1 = j\n            else:\n                distance+= ((x1-i)**2 + (y1-j)**2)**0.5\n                x1=i\n                y1=j\n    print(\"%.2f\" %(distance))\n            \n            \n    ", "# cook your dish here\nfrom collections import defaultdict\nimport math\nt=int(input())\nfor it in range(t):\n    k=input()\n    n=int(input())\n    d=defaultdict(list)\n    for i in range(n):\n        p=list(map(int,input().split()))\n        d[p[0]].append(p[1])\n    for r in d.keys():\n        d[r]=sorted(d[r])\n        d[r]=reversed(d[r])\n    xa=-1\n    xb=-1\n    m=0\n    g=[]\n    for r in d.keys():\n        g.append(r)\n    g.sort()\n    for r in g:\n        s=d[r]\n        x=r \n        for j in s:\n            y=j\n            if(xa==-1 and xb==-1):\n                xa=x\n                xb=y\n            q=x-xa\n            q=q*q\n            p=y-xb\n            p=p**2\n            q=q+p\n            q=math.sqrt(q)\n            m=m+q\n            xa=abs(x)\n            xb=abs(y)\n    m=round(m,2)\n    print(\"%.2f\"%m)\n            ", "# cook your dish here\nfrom collections import defaultdict\nimport math\nt=int(input())\nfor it in range(t):\n    k=input()\n    n=int(input())\n    d=defaultdict(list)\n    for i in range(n):\n        p=list(map(int,input().split()))\n        d[p[0]].append(p[1])\n    for r in d.keys():\n        d[r]=sorted(d[r])\n        d[r]=reversed(d[r])\n    xa=-1\n    xb=-1\n    m=0\n    g=[]\n    for r in d.keys():\n        g.append(r)\n    g.sort()\n    for r in g:\n        s=d[r]\n        x=r \n        for j in s:\n            y=j\n            if(xa==-1 and xb==-1):\n                xa=x\n                xb=y\n            q=x-xa\n            q=q*q\n            p=y-xb\n            p=p**2\n            q=q+p\n            q=math.sqrt(q)\n            m=m+q\n            xa=abs(x)\n            xb=abs(y)\n    m=round(m,2)\n    print(\"%.2f\"%m)\n            ", "# cook your dish here\nfrom collections import defaultdict\nimport math\nt=int(input())\nfor it in range(t):\n    k=input()\n    n=int(input())\n    d=defaultdict(list)\n    for i in range(n):\n        p=list(map(int,input().split()))\n        d[p[0]].append(p[1])\n    for r in d.keys():\n        d[r]=sorted(d[r])\n        d[r]=reversed(d[r])\n    xa=-1\n    xb=-1\n    m=0\n    g=[]\n    for r in d.keys():\n        g.append(r)\n    g.sort()\n    for r in g:\n        s=d[r]\n        x=r \n        for j in s:\n            y=j\n            if(xa==-1 and xb==-1):\n                xa=x\n                xb=y\n            q=x-xa\n            q=q*q\n            p=y-xb\n            p=p**2\n            q=q+p\n            q=math.sqrt(q)\n            m=m+q\n            xa=abs(x)\n            xb=abs(y)\n    m=round(m,2)\n    print(\"%.2f\"%m)\n            ", "\r\nt=int(input())\r\nfor _ in range(t):\r\n    empty=input()\r\n    n=int(input())\r\n    \r\n    list1=[]\r\n    for _ in range(n):\r\n        x,y=list(map(int,input().strip().split()))\r\n        list1.append([x,-y])\r\n    \r\n    list1.sort()\r\n   \r\n    net=0\r\n    for i in range(n-1):\r\n        x1=list1[i][0]\r\n        y1=-list1[i][1]\r\n        x2=list1[i+1][0]\r\n        y2=-list1[i+1][1]\r\n        \r\n        distance=((x2-x1)**2+(y2-y1)**2)**(0.5)\r\n        net+=distance\r\n    \r\n    print(format(net,'.2f'))\r\n", "from bisect import *\r\nfrom collections import *\r\nfrom sys import stdin,stdout\r\nfrom queue import *\r\nfrom itertools import *\r\nfrom heapq import *\r\nfrom random import *\r\nfrom statistics import *\r\nfrom math import *\r\nimport operator\r\ninn=stdin.readline\r\nout=stdout.write\r\ndef fun(p1,p2):\r\n    return ((p2[0]-p1[0])**2+(p2[1]-p1[1])**2)**0.5\r\nfor i in range(int(input())):\r\n    input()\r\n    n=int(input())\r\n    a=[]\r\n    for i in range(n):\r\n        k,v=map(int,input().split())\r\n        a.append((k,v))\r\n    d=list(sorted(a,key=lambda x: [x[0],-x[1]]))\r\n    dis=0\r\n    for i in range(n-1):\r\n        dis+=fun(d[i],d[i+1])\r\n        t=d[i]\r\n    print(\"%.2f\"%(dis))\r\n            \r\n        ", "from math import sqrt\r\ndef fun(p1,p2):\r\n    return sqrt((p2[0]-p1[0])**2+(p2[1]-p1[1])**2)\r\nfor i in range(int(input())):\r\n    input()\r\n    n=int(input())\r\n    a=[]\r\n    for i in range(n):\r\n        k,v=map(int,input().split())\r\n        a.append([k,v])\r\n    a.sort(key=lambda x: [x[0],-x[1]])\r\n    dis=0\r\n    for i in range(n-1):\r\n        dis+=fun(a[i],a[i+1])\r\n    print('{0:.2f}'.format(dis))\r\n            \r\n        ", "# cook your dish here\nfrom math import *\n\n\ndef distance(a, b, c, d):\n    return sqrt((c - a) ** 2 + (d - b) ** 2)\n\n\ndef solve():\n    input()\n    n = int(input())\n    li = []\n    for _ in range(n):\n        a = list(map(int, input().split()))\n        li.append(a)\n    li.sort(key=lambda x: [x[0], -x[1]])\n    d = 0\n    for y in range(n - 1):\n        d += distance(li[y][0], li[y][1], li[y + 1][0], li[y + 1][1])\n    print('{0:.2f}'.format(d))\n\n\ndef __starting_point():\n    t = int(input())\n    while t != 0:\n        solve()\n        t -= 1\n\n__starting_point()", "from math import sqrt\r\ndef dis(a,b):\r\n\treturn(sqrt((b[0]-a[0])**2+(b[1]-a[1])**2))\r\nfor i in range(int(input())):\r\n\tinput()\r\n\tn = int(input())\r\n\tli = []\r\n\tfor i in range(n):\r\n\t\ta,b=(int(i) for i in input().split())\r\n\t\tli.append((a,b))\r\n\tli = sorted(li, key = lambda x: (x[0], -x[1]))\r\n\td=0\r\n\tfor i in range(0,n-1):\r\n\t\td+= dis(li[i],li[i+1])\r\n\tprint(f'{d:.2f}')  ", "from math import sqrt\ndef dis(a,b):\n\treturn(sqrt((b[0]-a[0])**2+(b[1]-a[1])**2))\nfor i in range(int(input())):\n\tinput()\n\tn = int(input())\n\tli = []\n\tfor i in range(n):\n\t\ta,b=(int(i) for i in input().split())\n\t\tli.append((a,b))\n\tli = sorted(li, key = lambda x: (x[0], -x[1]))\n\td=0\n\tfor i in range(0,n-1):\n\t\td+= dis(li[i],li[i+1])\n\tprint(f'{d:.2f}')", "# cook your dish here\nimport heapq as hq\nfrom math import sqrt\n\ndef distance(a, b):\n    return sqrt((a[0]-b[0])**2 + (a[1]-b[1])**2)\n\nfor _ in range(int(input())):\n    input()\n    n = int(input())\n    points = {} #dict x_val : lists of y-values, each list in {points} contains points with the same x-value\n    buff = []\n    for _ in range(n):\n        x,y = tuple(map(int, input().split()))\n        if x in points:\n            hq.heappush(points[x], y)\n        else:\n            q = [y]\n            points[x] = q\n    d = 0\n    for i in points:\n        hq._heapify_max(points[i])\n    \n    cur = (min(points), hq._heappop_max(points[min(points)]))\n    while points:\n        min_x, buff = min(points), points.pop(min(points))\n        while buff:\n            next_y = hq._heappop_max(buff)\n            next_pt = (min_x, next_y)\n            d += distance(cur, next_pt)\n            cur = next_pt\n\n    print(\"{:.2f}\".format(round(d,2)))\n    \n    ", "# cook your dish here\nimport math\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def get_distance(self, p):\n        return math.sqrt((p.x-self.x)*(p.x-self.x) + (p.y-self.y)*(p.y-self.y));\ntest=int(input())\nfor _ in range(test):\n    input()\n    n=int(input())\n    arr=[]\n    for i in range(n):\n        x,y=map(int,input().split())\n        arr.append(Point(x,y))\n    arr.sort(key=lambda p:(p.x,(-1)*p.y))\n    s=0.0\n    for i in range(1,n):\n        s+=arr[i].get_distance(arr[i-1])\n    print(\"{0:.2f}\".format(s))", "# cook your dish here\nimport math\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def get_distance(self, p):\n        return math.sqrt((p.x-self.x)*(p.x-self.x) + (p.y-self.y)*(p.y-self.y));\n\nT=int(input())\nfor t in range(T):\n    input()\n    n=int(input())\n    arr=[]\n    for i in range(n):\n        x,y=map(int,input().split())\n        arr.append(Point(x,y))\n    arr.sort(key=lambda p:(p.x,(-1)*p.y))\n    s=0.0\n    for i in range(1,n):\n        s+=arr[i].get_distance(arr[i-1])\n    print(\"{0:.2f}\".format(s))", "import math\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def get_distance(self, p):\n        return math.sqrt((p.x-self.x)*(p.x-self.x) + (p.y-self.y)*(p.y-self.y));\n\nT=int(input())\nfor t in range(T):\n    input()\n    n=int(input())\n    arr=[]\n    for i in range(n):\n        x,y=map(int,input().split())\n        arr.append(Point(x,y))\n    arr.sort(key=lambda p:(p.x,(-1)*p.y))\n    s=0.0\n    for i in range(1,n):\n        s+=arr[i].get_distance(arr[i-1])\n    print(\"{0:.2f}\".format(s))\n", "# cook your dish here\ndef merge_sort(arr):\n    if len(arr) >1: \n        mid = len(arr)//2 \n        L = arr[:mid]   \n        R = arr[mid:] \n        merge_sort(L) \n        merge_sort(R) \n        i = j = k = 0\n \n        while i < len(L) and j < len(R): \n            if L[i][0] < R[j][0]: \n                arr[k] = L[i] \n                i+=1\n            elif L[i][0] == R[j][0]:\n                if L[i][1] > R[j][1]:\n                    arr[k] = L[i]\n                    i += 1\n                else:\n                    arr[k] = R[j]\n                    j += 1\n            else: \n                arr[k] = R[j] \n                j+=1\n            k+=1\n        while i < len(L): \n            arr[k] = L[i] \n            i+=1\n            k+=1\n          \n        while j < len(R): \n            arr[k] = R[j] \n            j+=1\n            k+=1\nfor _ in range(int(input())):\n    arr = []\n    input()\n    for i in range(int(input())):\n        arr.append(list(map(int,input().split())))\n    merge_sort(arr)\n    d = 0\n    for i in range(1,len(arr)):\n        d += ((arr[i][0]-arr[i-1][0])**2 + (arr[i][1]-arr[i-1][1])**2)**0.5\n    print('%.2f'%d)", "# cook your dish here\nfrom math import sqrt\ndef dist(a,b):\n    x1 = a[0]\n    y1 = a[1]\n    x2 = b[0]\n    y2 = b[1]\n    return sqrt((x1-x2)**2+(y2-y1)**2)\nt = int(input())\nfor _ in range(t):\n    blank = input()\n    n = int(input())\n    arr = []\n    for j in range(n):\n        arr.append(list(map(int,input().split())))\n    arr.sort(key = lambda a:(a[0],a[1]*-1))\n    d = 0\n    for i in range(len(arr)-1):\n        d+=dist(arr[i],arr[i+1])\n    print(\"{:0.2f}\".format(d))", "from math import sqrt\r\ndef distance_between_two_points(point1,point2):\r\n    a = (point1[0]-point2[0])**2 + (point1[1]-point2[1])**2\r\n    return round(sqrt(a),10)\r\n\r\nfor _ in range(int(input())):\r\n    blank = input()\r\n    N = int(input())\r\n    dic = {}\r\n    array = []\r\n    for i in range(N):\r\n        x,y = map(int, input().split())\r\n        if x not in dic.keys():\r\n            dic[x] = len(array)\r\n            array.append([x,y,y])\r\n        else :\r\n            index = dic[x]\r\n            array[index][1] = min(y,array[index][1])\r\n            array[index][2] = max(y,array[index][2])\r\n    array.sort()\r\n    ans = 0\r\n    length = len(array)\r\n\r\n    for i in range (len(array)-1):\r\n        ini = array[i]\r\n        fin = array[i+1]\r\n        ans+=(ini[2] - ini[1])\r\n        ans+=distance_between_two_points([ini[0],ini[1]],[fin[0],fin[2]])\r\n    ans += (array[-1][2] - array[-1][1])\r\n    print(\"{:0.2f}\".format(ans))", "# cook your dish here\r\nimport math\r\ndef calculate(a,b):\r\n    x1=a[0]\r\n    x2=b[0]\r\n    y1=a[1]\r\n    y2=b[1]\r\n    return math.sqrt( (x2-x1)**2 + (y2-y1)**2 )\r\nt=int(input())\r\nfor _ in range(t):\r\n    s=input()\r\n    n=int(input())\r\n    xcoord=[]\r\n    ycoord=[]\r\n    arr=[]\r\n    for i in range(n):\r\n        x,y=map(int, input().strip().split())\r\n        xcoord.append(x)\r\n        ycoord.append(y)\r\n    dist=0\r\n    arr=list(zip(xcoord,ycoord))\r\n    arr.sort(key=lambda a: (a[0], a[1] * -1))\r\n    for i in range(1,n):\r\n        dist += calculate(arr[i-1],arr[i])\r\n##        print(arr[i-1],arr[i],dist)\r\n\r\n    print(\"{:0.2f}\".format(dist))\r\n", "# cook your dish here\ndef __starting_point():\n    TC = int(input())\n    for _ in range(TC):\n        line = input()\n        N = int(input())\n        arr = []\n        for _ in range(N):\n            x, y = list(map(int, input().strip().split()))\n            arr.append((x, y))\n        arr.sort(key=lambda a: (a[0], a[1] * -1))\n        dist = 0\n        for i in range(1, N):\n            x1 = arr[i][0]\n            y1 = arr[i][1]\n            x2 = arr[i-1][0]\n            y2 = arr[i-1][1]\n            d = ((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2)) ** 0.5\n            dist += d\n\n        print(\"{:0.2f}\".format(dist))\n        \n__starting_point()", "def __starting_point():\r\n    TC = int(input())\r\n    for _ in range(TC):\r\n        line = input()\r\n        N = int(input())\r\n        arr = []\r\n        for _ in range(N):\r\n            x, y = list(map(int, input().strip().split()))\r\n            arr.append((x, y))\r\n        arr.sort(key=lambda a: (a[0], a[1] * -1))\r\n        dist = 0\r\n        for i in range(1, N):\r\n            x1 = arr[i][0]\r\n            y1 = arr[i][1]\r\n            x2 = arr[i-1][0]\r\n            y2 = arr[i-1][1]\r\n            d = ((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2)) ** 0.5\r\n            dist += d\r\n\r\n        print(\"{:0.2f}\".format(dist))\n__starting_point()", "import math\r\nclass point:\r\n    def __init__(self, a, b):\r\n        self.x = a\r\n        self.y = b\r\n\r\ndef fun(self):\r\n    return self.x - (self.y / 20000)\r\n        \r\nT = int(input())\r\nfor j in range(T):\r\n    s = input()\r\n    N = int(input())\r\n    t = [None] * N\r\n    for i in range(N):\r\n        x1, y1 = map(int,input().split())\r\n        t[i] = point(x1, y1)\r\n       \r\n    t.sort(key = fun)\r\n    d = 0.0\r\n    for i in range(1, N):\r\n        d = d + math.sqrt(((t[i].x - t[i - 1].x) ** 2) + ((t[i].y - t[i - 1].y) ** 2))\r\n    d = round(d, 2)\r\n    print('{:0.2f}'.format(d))"]