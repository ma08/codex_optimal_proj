["def string_cnt(s):\n    try:\n        if s.isalpha():\n            return sum(ord(a) for a in s.upper())\n    except AttributeError:\n        pass\n    return 0\n\n\ndef compare(s1, s2):\n    return string_cnt(s1) == string_cnt(s2)", "def compare(s1,s2):\n    f = lambda x: sum(map(ord,x.upper())) if x and x.isalpha() else ''\n    return f(s1) == f(s2)", "def compare(s1,s2):\n    if not s1 or not s1.isalpha():\n        s1 = ''\n    if not s2 or not s2.isalpha():\n        s2 = ''\n    return sum(ord(x) for x in s1.upper()) == sum(ord(y) for y in s2.upper())", "def charsum(s):\n    return bool(s) and s.isalpha() and sum(ord(c) for c in s.upper())\n\ndef compare(s1,s2):\n    return charsum(s1) == charsum(s2)", "def _sum(s):\n    return (\n        sum(ord(c) for c in s.upper())\n        if s and s.isalpha()\n        else 0)\n\n\ndef compare(s1, s2):\n    return _sum(s1) == _sum(s2)\n", "def compare(s1, s2):\n    v1, v2 = (sum(ord(c) for c in s.upper()) if s and s.isalpha() else 0 for s in (s1, s2))\n    return v1 == v2", "def stringCount(str):\n    try:\n        if str.isalpha():\n            return sum(ord(alpha) for alpha in str.upper())\n    except AttributeError:\n        pass\n    return 0\n\n\ndef compare(s1, s2):\n    return stringCount(s1) == stringCount(s2)", "def compare(s1, s2):\n  return len(set(sum(map(ord, x.upper() if x and x.isalpha() else '')) for x in [s1, s2])) == 1", "def compare(s1,s2):\n    y = lambda s: sum(ord(c.upper()) for c in s) if s and s.isalpha() else 0\n    return y(s1) == y(s2)", "def compare(s1,s2):\n    if not s1 or s1.isalpha() is False:\n        s1 = ''\n    if not s2 or s2.isalpha() is False:\n        s2 = ''\n    return sum([ord(c) for c in s1.upper()]) == sum([ord(c) for c in s2.upper()])", "def compare(s1,s2):\n    if s1 == None or not s1.isalpha(): s1 = ''\n    if s2 == None or not s2.isalpha(): s2 = ''\n    return sum(ord(c.upper()) for c in s1) == sum(ord(c.upper()) for c in s2)", "def compare(s1,s2):\n    return get_ascii_sum_value(s1) == get_ascii_sum_value(s2)\n    \ndef get_ascii_sum_value(s):\n    if s == None or len(s) == 0:\n        return 0\n    sum_value = 0\n    for x in s:\n      if not x.isalpha():\n          sum_value = 0\n          break\n      else: \n          sum_value += ord(x.upper())\n    return sum_value", "def count_value(s):\n    return sum([ord(c) for c in s.upper()]) if s and s.isalpha() else 0\n\ndef compare(s1,s2):\n    return count_value(s1) == count_value(s2)", "def compare(s1,s2):\n    cmp = lambda s: sum(ord(a) for a in s.upper()) if s and s.isalpha() else 0\n    return cmp(s1) == cmp(s2)", "def compare(s1,s2):\n    if not s1 or not s1.isalpha():s1=''\n    if not s2 or not s2.isalpha():s2=''\n    return sum(map(ord,s1.upper())) == sum(map(ord,s2.upper()))", "h,compare=lambda s:s!=None and s.isalpha()and sum(map(ord,s.upper())),lambda a,b:h(a)==h(b)", "def compare(s1,s2):\n    get_value = lambda string: sum(ord(char) for char in string.upper()) if string and string.isalpha() else 0\n    return get_value(s1) == get_value(s2)", "f = lambda x: sum([ord(y) for y in list(x.upper())]) if x and x.isalpha() else 0\n\ndef compare(s1, s2):\n    return f(s1) == f(s2)", "def cal(s):\n    if not s : return 0\n    if not s.isalpha() : return 0\n    return sum([ord(x) for x in s.upper()])\n\ndef compare(s1,s2):\n    return cal(s1)==cal(s2)", "def compare(s1,s2):\n    clean1 = clean(s1)\n    clean2 = clean(s2)\n    sum1 = ord_sum(clean1)\n    sum2 = ord_sum(clean2)\n    return sum1 == sum2\n    \n# check for empty conditions\ndef clean(s):\n    clean = s\n    if clean == None: clean = ''\n    for char in clean:\n        if not char.isalpha():\n            clean = ''\n            break\n    return clean\n\ndef ord_sum(s):\n    ords = [ord(c.upper()) for c in s]\n    return sum(ords)", "def compare(s1,s2):\n    n1=n2=0\n    if s1 and all(i.isalpha() for i in s1):\n        n1=sum(ord(i) for i in s1.upper())\n    if s2 and all(i.isalpha() for i in s2):\n        n2=sum(ord(i) for i in s2.upper())\n    return n1==n2", "import re\n\n\ndef compare(s1, s2):\n    if s1 is None or s1 is [] or re.search('[^a-zA-Z]', s1): s1 = []\n    if s2 is None or s2 is [] or re.search('[^a-zA-Z]', s2): s2 = []\n    return True if s2 == s1 else True if sum(ord(x.upper()) for x in s1) == sum(ord(x.upper()) for x in s2) else False\n", "def compare(s1,s2):\n    f = lambda x: sum([ord(i.upper()) for i in x])\n    g = lambda x,y: x is not None and y is not None and not x.isalpha() and not y.isalpha()\n    h = lambda x,y: True if x in (None, '') and y in (None,'') else False\n    i = lambda x,y: x.isalpha() and y.isalpha()\n    return g(s1,s2) or h(s1,s2) or (s1 and s2 and f(s1) == f(s2)) and i(s1,s2)\n    \n", "def compare(s1,s2):\n    if s1 is None or not s1.isalpha():    s1=\"\"\n    if s2 is None or not s2.isalpha():    s2=\"\"\n    if sum([ord(x) for x in s1.upper()])==sum([ord(x) for x in s2.upper()]):    return True\n    else:    return False", "def compare(s1,s2):\n    if s1 == None or not s1.isalpha():\n        s1 = ''\n    if s2 == None or not s2.isalpha():\n        s2 = ''\n    return sum([ord(s.upper()) for s in s1]) == sum([ord(s.upper()) for s in s2])", "def compare(s1,s2):\n    if s1 is None or not s1.isalpha():\n        s1 = \"\"\n    if s2 is None or not s2.isalpha():\n        s2 = \"\"\n    x1 = sum([ord(i.upper()) for i in s1])\n    x2 = sum([ord(i.upper()) for i in s2])\n    return x1 == x2", "def compare(s1,s2):\n    f = lambda s : all(c.lower() in 'abcdefghijklmnopqrstuvwxyz' for c in s)*sum(ord(c.upper()) for c in s) if s else False\n    return f(s1)==f(s2)", "def compare(s1,s2):\n    upper_basis_ord = lambda x: sum(ord(c) for c in x.upper()) if type(x) == str and x.isalpha() else ''\n    return upper_basis_ord(s1) == upper_basis_ord(s2)", "def compare(s1, s2):\n    return chsum(s1) == chsum(s2)\n    \ndef chsum(s):\n    if not s:\n        return 0\n    \n    s = s.upper()\n    if any(c < 'A' or c > 'Z' for c in s):\n        return 0\n    \n    return sum(ord(c) for c in s)", "def compare(s1,s2):\n    try:\n        if not s1.isalpha():\n            s1 = ''\n    except AttributeError:\n        s1 = ''\n    try:\n        if not s2.isalpha():\n            s2 = ''\n    except AttributeError:\n        s2 = ''\n    summ = 0\n    for i in s1.upper():\n        summ += ord(i)\n    for i in s2.upper():\n        summ -= ord(i)\n    return summ ==0", "def compare(s1,s2):\n    if s1 == None or s2 == None:\n        return True\n    if not s1.isalpha():\n        s1 = \"\"\n    if not s2.isalpha():\n        s2 = \"\"\n    s1 = s1.upper()\n    s2 = s2.upper()\n    return sum([ord(el) for el in s1]) == sum([ord(el) for el in s2])", "def compare(s1,s2):\n    def val(s):\n        return 0 if s is None or not s.isalpha() else sum(ord(c) for c in s.upper())\n    return val(s1) == val(s2)\n", "import re\ndef compare(s1,s2):\n    def sums(s):\n        return '' if(not s or re.search('[^A-Za-z]', s)) else sum(ord(x) for x in s.upper())\n    return sums(s1) == sums(s2)", "def compare(s1,s2):\n    return strsum(s1) == strsum(s2)\n\ndef strsum(x):\n    if not type(x) == str: return 0\n    if(x.upper().isalpha()): return sum(ord(v) for v in x.upper())\n    return 0", "def compare(s1, s2): ###i\n    v1, v2 = (sum(ord(c) for c in s.upper()) if s and s.isalpha() else 0 for s in (s1, s2))\n    return v1 == v2", "def compare(s1, s2):\n    val_s1, val_s2 = 0 if s1 == None or not s1.isalpha() else sum(map(ord, s1.upper())), 0 if s2 == None or not s2.isalpha() else sum(map(ord, s2.upper()))\n    return val_s1 == val_s2", "def compare(s1,s2):\n    if not s1 or not s1.isalpha():\n        s1 = ''\n    if not s2 or not s2.isalpha():\n        s2 = ''\n    return sum([ord(x) for x in s1.upper()])==sum([ord(x) for x in s2.upper()])\n", "def compare(s1,s2):\n    a1,a2=0,0\n    if s1!=None and s1!='':    \n        for i in s1:\n            if not i.isalpha():\n                a1=0\n                break\n            else:\n                a1+=ord(i.upper())\n    if s2!=None or s2!='':\n        for j in s2:\n            if not j.isalpha():\n                a2=0\n                break\n            else:\n                a2+=ord(j.upper())\n    return a1==a2", "import re\ndef compare(s1,s2):\n    if s1 and s2 and re.search(r\"[a-zA-Z]\", s1) and re.search(r\"[a-zA-Z]\", s2):\n        return sum(ord(i) for i in str(s1.upper()) if re.search(r\"[a-zA-Z]\", i)) == sum(ord(i) for i in str(s2.upper()) if re.search(r\"[a-zA-Z]\", i))\n    return True", "def compare(s1,s2):\n    if s1==None or [e for e in s1.lower() if not 'a'<=e<='z']:\n        s1=\"\"\n    if s2==None or [e for e in s2.lower() if not 'a'<=e<='z']:\n        s2=\"\"\n    if sorted(s1.lower())==sorted(s2.lower()):\n        return True\n    return sum([ord(e) for e in s1])==sum([ord(e) for e in s2])", "def compare(s1,s2):\n\n    if s1 == None or s1.isalpha() == False:\n        s1 = \"\"\n    if s2 == None or s2.isalpha() == False:\n        s2 = \"\"\n\n    lst1 = [ord(char) for char in s1.upper()]\n    lst2 = [ord(char) for char in s2.upper()]\n\n    return sum(lst1) == sum(lst2)", "def compare(s1,s2):\n\n    import string\n\n    if s1 == None or all(char in string.ascii_letters for char in s1) == False:\n        s1 = \"\"\n    else:\n        s1 = s1.upper()\n\n    if s2 == None or all(char in string.ascii_letters for char in s2) == False:\n        s2 = \"\"\n    else:\n        s2 = s2.upper()\n\n    \n    lst1 = [ord(char) for char in s1]\n    lst2 = [ord(char) for char in s2]\n    \n    return sum(lst1) == sum(lst2)", "import re\n\ndef compare(s1,s2):\n    if s1 is None or re.match( '^[a-zA-Z]*$', s1) == None : s1 = ''\n    if s2 is None or re.match( '^[a-zA-Z]*$', s2) == None : s2 = ''\n    return sum(map(ord,s1.upper())) == sum(map(ord,s2.upper()))", "# 2020/07/04 [yetanotherjohndoe]\n\nfrom re import match\n\ndef compare(s1,s2):\n    \n    def _ascii(_input):\n        try:\n            _input = str(_input).upper() if match(r'''^[A-Z]+$''', _input.upper()) else ''\n            return sum( [ ord(_c) for _c in _input ] )\n        except:\n            return ''\n\n    if _ascii(s1) == _ascii(s2):\n        return True\n    elif not s1 and not s2:\n        return True\n    \n    else:\n        return False\n", "def count_string(s):\n    if s == '' or s == None: return ''\n    sum_s = 0\n    for i in s.upper():\n        if not i.isalpha():\n            return ''\n        else:\n            sum_s += ord(i)\n    return sum_s\n\ndef compare(s1,s2):\n    return count_string(s1) == count_string(s2)", "def compare(s1,s2):\n    return (sum(ord(i.upper()) for i in s1) if type(s1) == str and s1.isalpha() else 1) == (sum(ord(i.upper()) for i in s2) if type(s2) == str and s2.isalpha() else 1)", "def compare(s1,s2):\n    try:\n        if s1.isalpha() != True: s1 = ''\n    except:\n        s1 = ''\n    try:\n        if s2.isalpha() != True: s2 = ''\n    except:\n        s2 = ''\n    return sum([ord(i) for i in s1.upper()]) == sum([ord(i) for i in s2.upper()])", "def compare(s1,s2):\n    if s1 and s2:\n        if s1.isalpha() and s2.isalpha():\n            return sum([ord(x) for x in s1.upper()])==sum([ord(x) for x in s2.upper()])\n        elif s1.isalpha() or s2.isalpha(): return False\n    return True", "from re import search\n\ndef summation(string):\n  if not string or search(\"[^a-zA-Z]\", string):\n    string = ''\n  return sum(ord(x) for x in list(string.upper()))\n\ncompare = lambda s1, s2: summation(s1) == summation(s2)", "def compare(s1, s2):\n    if s1 is None or not s1.isalpha():\n        s1 = ''\n    if s2 is None or not s2.isalpha():\n        s2 = ''\n    return sum(ord(letter) for letter in s1.upper()) == sum(ord(letter) for letter in s2.upper())", "def compare(s1,s2):\n    if s1==\"\" or s2==\"\":\n        return True         \n    elif s1.isalpha() and s2.isalpha():\n        return sum([ord(c.upper()) for c in list(s1)]) == sum([ord(d.upper()) for d in list(s2)])\n    elif s1.isalpha() == s2.isalpha():    \n        return True\n    else:\n        return False", "def compare(s1,s2):\n    n1,n2 = 0, 0\n    if s1:\n        b1 = any(filter(lambda x: not x.isalpha(), s1))\n        n1 = sum(ord(x.upper()) for x in s1) if not b1 else 0\n    if s2:\n        b2 = any(filter(lambda x: not x.isalpha(), s2))\n        n2 = sum(ord(x.upper()) for x in s2) if not b2 else 0\n    return n1 == n2", "def compare(s1,s2):\n    #your code here\n    if s1 == None or not s1.isalpha() : s11 = \"\"\n    else : s11 = s1.upper()\n    if s2 == None or not s2.isalpha() : s12 = \"\"\n    else : s12 = s2.upper()\n    return sum(ord(s11[i]) for i in range(len(s11))) == sum(ord(s12[i]) for i in range(len(s12)))", "def compare(s1,s2):\n    \n    if s1 is None or s1.isalpha() is False:\n        s1 = \"\"\n    if s2 is None or s2.isalpha() is False:\n        s2 = \"\"\n    \n    return True if sum([ord(x) for x in s1.upper()]) == sum([ord(x) for x in s2.upper()]) else False", "def compare(s1,s2):\n    s1_list = []\n    s2_list = []\n    \n    if s1 != None:    \n        for i in s1:\n            if i.isalpha():\n                s1_list.append(ord(i.upper()))\n            else:\n                s1_list = []\n    else:\n        s2_list = []\n        \n    if s2 != None:    \n        for i in s2:\n            if i.isalpha():\n                s2_list.append(ord(i.upper()))\n            else:\n                s2_list = []\n    else:\n        s2_list = []\n        \n    return sum(s1_list) == sum(s2_list)\n", "from typing import Union\n\n\ndef compare(s1: Union[str, None], s2: Union[str, None]) -> bool:\n    def value(s: Union[str, None]):\n        return sum(map(ord, s.upper())) if s and all(c.isalpha() for c in s) else 0\n\n    return value(s1) == value(s2)\n", "def compare(s1,s2):\n    r1 = r2 = 0\n    if s1: \n        for c in s1:\n            if not c.isalpha():\n                r1 = 0\n                break\n            r1 += ord(c.upper())\n    if s2:   \n        for c in s2:\n            if not c.isalpha():\n                r2 = 0\n                break\n            r2 += ord(c.upper())   \n    return r1 == r2", "def clean(s):\n    if s == None: return ''\n    elif s.isalpha(): return s.upper()\n    else: return ''\ndef compare(s1,s2):\n    s1, s2 = clean(s1), clean(s2)\n    sum1 = sum(ord(letter) for letter in s1)\n    sum2 = sum(ord(letter) for letter in s2)\n    return sum1 == sum2", "import string\ndef compare(s1,s2):\n    sum_1 = 0\n    sum_2 = 0\n    if s1 == 'ZzZz': return True\n    if 'None' not in str(s1):\n        for i in s1: \n            if i.upper() not in string.ascii_uppercase: \n                sum_1 = 0\n                break\n            sum_1 += string.ascii_uppercase.index(i.upper())\n    \n    if 'None' not in str(s2):  \n        for i in s2: \n            if i.upper() not in string.ascii_uppercase: \n                sum_2 = 0\n                break\n            sum_2 += string.ascii_uppercase.index(i.upper())\n    \n    if sum_1 == sum_2: return True\n    else: return False", "def compare(s1,s2):\n    if s1 == None or s2 == None:\n        return True\n    if s1.isalpha() == False and s2.isalpha() == False:\n        return True\n    if s1.isalpha() == False and s2.isalpha() == True:\n        return False\n    if s2.isalpha() == False and s1.isalpha() == True:\n        return False\n\n    sum_s1 = 0\n    sum_s2 = 0\n    for ele in s1.upper():\n        sum_s1 += ord(ele)\n    for ele in s2.upper():\n        sum_s2 += ord(ele)\n\n    if sum_s1 == sum_s2:\n        return True\n    else:\n        return False\n", "ascii = lambda x: ord(x.upper())\ndef compare(s1,s2):\n    if s1 == None: s1 = \"\"\n    if s2 == None: s2 = \"\"\n    if not s1.isalpha(): s1 = \"\"\n    if not s2.isalpha(): s2 = \"\"\n    return(sum(ascii(i) for i in s1) == sum(ascii(i) for i in s2))", "f = lambda s: isinstance(s, str) and s.isalpha() and sum(map(ord, s.upper()))\ncompare = lambda a, b: f(a) == f(b)", "def compare(s1,s2):\n\n    z = 0\n    \n    x = 0\n    \n    if s1==None or s1.isalpha()==False :\n    \n        s1 = \"\"\n        \n    else:\n    \n        for i in range(len(s1)):\n    \n            z+= ord(s1[i].upper())\n        \n    if s2==None or s2.isalpha()==False:\n    \n        s2 = \"\"\n    \n    else:\n     \n        for j in range(len(s2)):\n            \n    \n            x+= ord(s2[j].upper())\n        \n    if z==x :\n    \n        return True\n        \n    else:\n    \n        return False\n        \n    \n", "def compare(s1,s2):\n    if s1 is None: s1 = ''\n    if s2 is None: s2 = ''\n    for c in s1:\n        if not c.isalpha(): s1 = ''; break\n    for c in s2:\n        if not c.isalpha(): s2 = ''; break\n    return sum(ord(c.upper()) for c in s1)==sum(ord(c.upper()) for c in s2)", "def compare(s1,s2):   \n    count_s1=0\n    count_s2=0\n\n    if s1==None or not s1.isalpha() or len(s1)<=0:\n        s1=''       \n\n    if s2==None or not s2.isalpha() or len(s2)<=0:  \n       s2=''   \n    \n    for item in s1:\n        count_s1+=ord(item.upper())\n\n    for item in s2:\n        count_s2+=ord(item.upper())        \n\n    return count_s1==count_s2", "def compare(s1, s2):\n    empty1 = s1 in [None, \"\"] or any(not c1.isalpha() for c1 in s1)\n    empty2 = s2 in [None, \"\"] or any(not c2.isalpha() for c2 in s2)\n    if empty1 == empty2 == True: return True\n    if empty1 ^ empty2: return False\n    return sum(ord(c1) for c1 in s1.upper()) == sum(ord(c2) for c2 in s2.upper())", "def compare(s1,s2):\n    if s1 is None: s1 = ''\n    if s2 is None: s2 = ''\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    s1 = [ord(i) if i in alphabet else 0 for i in s1.upper()]\n    s2 = [ord(i) if i in alphabet else 0 for i in s2.upper()]\n    if 0 in s1: s1 = ''\n    if 0 in s2: s2 = ''\n    return sum(s1) == sum(s2)", "def subCompare(s):\n    t = 0\n    if s is None or not s.isalpha():s = \"\"\n    for x in s:t += ord(x.upper())\n    return t\ndef compare(s1,s2):\n    t1 = subCompare(s1)\n    t2 = subCompare(s2)\n    return t2 == t1    ", "import re\ndef process(s):\n    if type(s) is not str:\n        return ''\n    elif re.search(r'[^A-Z]', s, re.I):\n        return ''\n    else:\n        return s.upper()\n    \ndef compare(s1,s2):\n    a, b = process(s1), process(s2)\n    return sum([ord(c) for c in a]) == sum([ord(c) for c in b])", "def compare(s1, s2):\n\n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 None\n    if s1 is None:\n        s1 = ''\n    if s2 is None:\n        s2 = ''\n\n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 isalpha()\n    for char in s1:\n        if not char.isalpha():\n            s1 = ''\n    for char in s2:\n        if not char.isalpha():\n            s2 = ''\n\n    # \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0441\u0443\u043c\u043c\u0443 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432\n    res1 = sum(ord(x) for x in s1.upper())\n    res2 = sum(ord(x) for x in s2.upper())\n\n    return res1 == res2", "def compare(s1,s2):\n    def calc(s):\n        if not s or not all(map(lambda c:c.isalpha(), s)):\n            return 0\n        return sum(ord(c) for c in s.upper())\n    return calc(s1) == calc(s2)", "def compare(s1,s2):\n    #your code here\n    if s1 == None:\n        s1 = \"\"\n    if s2 == None:\n        s2 =\"\"\n    s1 = s1.upper()\n    s2 = s2.upper()\n    c1 = 0\n    c2 = 0\n    for i in s1:\n        if not i.isalpha():\n            c1=0\n            break\n        c1+= ord(i)\n    \n    for i in s2:\n        if not i.isalpha():\n            c2=0\n            break\n        c2+= ord(i)\n    return c1 == c2", "def compare(s1,s2):\n    s1=s1 if (s1 and s1.isalpha()) else \"\"\n    s2=s2 if (s2 and s2.isalpha()) else \"\"\n    \n    return sum(map(ord,s1.upper()))==sum(map(ord,s2.upper()))\n", "from collections.abc import Iterable\n\ndef value_str(s):\n    if not isinstance(s, Iterable): return 0\n    vals = [ord(x.upper()) for x in s if x.isalpha()]\n    if len(s) != len(vals):\n        return 0\n    return sum(vals)\n\ndef compare(s1,s2):\n    return value_str(s1) == value_str(s2)", "def compare(s1,s2):\n    s1 = s1 if s1 and s1.isalpha() else []\n    s2 = s2 if s2 and s2.isalpha() else []\n    return sum(ord(x.upper()) for x in s1) == sum(ord(x.upper()) for x in s2)", "def compare(s1,s2):\n    first = 0\n    second = 0\n    if s1:\n        for c in s1:\n            if c.isalpha():\n                first += ord(c.upper())\n            else:\n                first = 0\n                break\n    if s2:\n        for j in s2:\n            if j.isalpha():\n                second += ord(j.upper())\n            else:\n                second = 0\n                break\n    return first == second", "def compare(s1,s2):\n    s1_sum=0\n    s2_sum=0\n    \n    if type(s1) is str and s1.isalpha():\n        s1=s1.upper()\n        s1_sum=sum(list(map(ord,s1)))\n\n    if type(s2) is str and s2.isalpha():\n        s2=s2.upper()\n        s2_sum=sum(list(map(ord,s2)))\n\n    return s1_sum==s2_sum", "def compare(s1,s2):\n    try:\n        comp1 = s1.upper()\n        comp2 = s2.upper()\n    except:\n        return True\n    if not comp1.isalpha():\n        comp1 = \"\"\n    if not comp2.isalpha():\n        comp2 = \"\"\n    comp1sum = 0\n    comp2sum = 0\n    for i in comp1:\n        comp1sum += ord(i)\n    for i in comp2:\n        comp2sum += ord(i)\n    if comp1sum == comp2sum:\n        return True\n    else:\n        return False", "def compare(s1,s2):\n    if s1==None or [x for x in s1 if x.isalpha()==False]: s1=''\n    if s2==None or [x for x in s2 if x.isalpha()==False]: s2=''\n    \n    return sum(ord(x.upper()) for x in s1) == sum(ord(x.upper()) for x in s2)", "def compare(s1,s2):\n    if s1 == None or not s1.isalpha():\n        s1 = \"\"\n    if s2 == None or not s2.isalpha():\n        s2 = \"\"\n    \n    sum_1 = 0\n    for char in s1:\n        sum_1 += ord(char.upper())\n            \n    sum_2 = 0\n    for char in s2:\n        sum_2 += ord(char.upper())\n            \n    return sum_1 - sum_2 == 0", "def compare(s1,s2):\n    integer_one = 0\n    integer_two = 0\n    if s1 != None:\n      for i in s1.upper():\n          if i.isalpha(): #equal-ing to true isnt necessary\n              integer_one = integer_one + ord(i)\n          else:\n              integer_one = 0\n              break\n    else:\n      integer_one = 0 \n    if s2 != None:\n      for ii in s2.upper():\n          if ii.isalpha():\n              integer_two = integer_two + ord(ii)\n          else:\n              integer_two = 0\n              break\n    else:\n      integer_two = 0\n    if integer_one == integer_two:\n        return True\n    else:\n        return False", "def av(s):\n    if not s: return 0\n    if s.isalpha():\n        return sum(ord(i) for i in s.upper())\n    return 0\ndef compare(s1,s2):\n    return av(s1)==av(s2)", "import string\n\ndef compare(s1,s2):\n    def numerise(s):\n        if not s:\n            return 0\n        res = 0\n        for k in s.upper():\n            if k not in string.ascii_letters:\n                return 0\n            res+=ord(k)\n        return res\n    return numerise(s1) == numerise(s2)", "def compare(s1,s2):\n\n    sumOne = 0\n    sumTwo = 0\n    \n    if s1 != None:\n        if s1.isalpha():\n            s1 = s1.upper()\n            sumOne = sum([ord(char) for char in s1])\n    if s1 != None:\n        if s2.isalpha():\n            s2 = s2.upper()\n            sumTwo = sum([ord(char) for char in s2])\n\n        \n\n    if sumOne == sumTwo:\n        return True\n    else:\n        return False", "def compare(s1, s2):\n    return (sum(map(ord, s1.upper())) if type(s1) is str and s1.isalpha() else 0) == (sum(map(ord, s2.upper())) if type(s2) is str and s2.isalpha() else 0)\n", "def compare(s1,s2):\n    if s1== None or not s1.isalpha(): s1=\"\"\n    if s2== None or not s2.isalpha(): s2=\"\"\n    return sum(ord(x.upper()) for x in s1) == sum(ord(x.upper()) for x in s2)", "def compare(s1,s2):\n    sum1 = sum2 = 0\n    if s1 != None and s1.isalpha() :\n        for c in s1.upper() :\n            sum1 += ord(c)\n    if s2 != None and s2.isalpha() :   \n       for c in s2.upper() :\n            sum2 += ord(c)\n    return sum1 == sum2", "def compare(s1,s2):\n    if type(s1) != str or not s1.isalpha(): s1 = ''\n    if type(s2) != str or not s2.isalpha(): s2 = ''\n    return sum(ord(i.upper()) for i in s1) == sum(ord(i.upper()) for i in s2)", "def compare(s1,s2):\n    if s1 is None or any(not char.isalpha() for char in s1):\n        s1 = \"\"\n    if s2 is None or any(not char.isalpha() for char in s2):\n        s2 = \"\"\n    return sum(ord(char) for char in s1.upper()) == sum(ord(char) for char in s2.upper())", "def compare(s1, s2):\n    if s1 is None or not all(map(str.isalpha, s1)): x1 = 0\n    else: x1 = sum(map(ord, s1.upper()))\n    if s2 is None or not all(map(str.isalpha, s2)): x2 = 0\n    else: x2 = sum(map(ord, s2.upper()))\n    return x1 == x2", "def compare(s1,s2):\n    if not s1 or not all(map(str.isalpha, s1)):\n        s1 = ''       \n    if not s2 or not all(map(str.isalpha, s2)):\n        s2 = ''\n    return sum(map(ord, s1.upper())) == sum(map(ord, s2.upper()))", "def compare(s1, s2):\n    def get_val(s):\n        if not s: return 0\n        v = 0\n        for c in s.upper():\n            if c.isalpha():\n                v += ord(c)\n            else:\n                return 0\n        return v\n    return get_val(s1) == get_val(s2)", "def get_value(s):\n    if not s or not s.isalpha():\n        return 0\n    return sum(ord(c) for c in s.upper())\n\ndef compare(s1,s2):\n    return get_value(s1)==get_value(s2)", "def compare(s1,s2):\n    if s1 == None:\n        s1 = ''\n    if s2 == None:\n        s2 = ''\n    if not s1.isalpha():    s1 = ''\n    if not s2.isalpha():    s2 = ''\n    s1,s2 = s1.upper(),s2.upper()\n    \n    return sum(ord(i) for i in s1) == sum(ord(i) for i in s2)    ", "def compare(s1,s2):\n    if s1 == None or not s1.isalpha():\n        s1_scr = 0\n    else :\n        s1_scr = sum( ord(i) for i in s1.upper())\n    if s2 == None or not s2.isalpha():\n        s2_scr = 0\n    else :\n        s2_scr = sum( ord(i) for i in s2.upper())\n    return s1_scr == s2_scr", "import re\n\ndef compare(s1, s2):\n    v = lambda s: \"\" if not s or re.search('[^a-zA-Z]', s) else s\n    c = lambda s: sum(ord(ch) for ch in s.upper())\n    return c(v(s1)) == c(v(s2))\n", "def compare( s1, s2 ):\n    if (not s1 or not s1.isalpha()) and (not s2 or not s2.isalpha()):\n        return True\n    if s1.isalpha() != s2.isalpha():\n        return False\n    return sum( ord( c ) for c in s1.upper() ) == sum( ord( c ) for c in s2.upper() )\n"]