["class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        win=0\n        \n        curr = arr[0]\n        mx=0\n        \n        \n        for i in range(1,len(arr)):          \n            if arr[i] > curr:\n                curr=arr[i]\n                win=0\n                \n            win=win+1\n            if win==k:\n                break\n                \n        return curr", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        \n        ma = arr[0]\n        ct = 0\n        \n        for i in range(1,len(arr)):\n            if (arr[i] > ma ):\n                ma = arr[i]\n                ct = 1\n            else:\n                ct += 1\n            \n            if (ct == k):\n                return ma\n            \n        return ma", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        check=arr[0]\n        count=0\n        for i in range(1,len(arr)):\n            if check>arr[i]:\n                count+=1\n            else:\n                check=arr[i]\n                count=1\n            if count==k:\n                return check\n        return check\n                \n        \n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        \n     #   s=[]\n        \n        prev=arr[0]\n        i=1\n        ans=0\n        while i<len(arr):\n            if arr[i]>=prev:\n                ans=0\n                prev=arr[i]\n                \n            ans+=1\n            i+=1\n            #print(ans)\n            if ans==k:\n                return prev\n        return prev\n            \n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        maxValue = max(arr)\n        curMax = arr[0]\n        numberOfWin = 0\n        for i in range(1, len(arr)):\n            if arr[i] > curMax:\n                curMax = arr[i]\n                numberOfWin = 0\n            numberOfWin += 1\n            if numberOfWin == k:\n                break\n            if arr[i] == maxValue:\n                return maxValue\n        return curMax\n                \n                \n", "from heapq import heapify , heappop , heappush\nclass Solution:\n    def getWinner(self, lis: List[int], k: int) -> int:\n        n = len(lis)\n        heap=[]\n        heapify(heap)\n        has=[0]*(max(lis)+10)\n        heappush(heap,-lis[0])\n        for i in range(1,n):\n            heappush(heap,-lis[i])\n            #print(heap)\n            a = - heappop(heap)\n            has[a]+=1\n            if has[a]>=k:\n                return a\n            heappush(heap,-a)\n         #   print(heap)\n        return max(lis)\n    \n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if k >= len(arr):\n            return max(arr)\n        rounds = 0         \n        count = 0 \n        \n        while True:\n            #print(arr)\n            rounds += 1\n            if k == 1 and arr[0]<arr[1] or max(arr[1:k+1-count]) > arr[0]:\n                i = 1 \n                while arr[0] > arr[i]:\n                    i += 1\n                temp = arr[0]\n                loser = arr[1:i]\n                winner = arr[i:]\n                arr = winner + loser + [temp]\n                count = 1 \n                if k == 1:\n                    return arr[0]\n            else:\n                return arr[0]\n            \n        return arr[0]", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        mx = max(arr)\n        if k>=len(arr):\n            return mx\n        \n        cnt = 0\n        for i in range(1, len(arr)):\n            if arr[0]<=arr[i]:\n                arr[i], arr[0] = arr[0], arr[i]\n                cnt = 1\n            else:\n                cnt += 1\n            if cnt == k:\n                return arr[0]\n        \n        return mx", "class Solution:\n    def getWinner(self, a: List[int], target: int) -> int:\n        count_prev=0\n        n=len(a)\n        i=0\n        j=1\n        while i<n-1:\n            while(a[i]>a[j] and j<(n-1) and count_prev<target):\n                count_prev+=1\n                j+=1\n            if(count_prev==target):\n                return a[i]\n            else:\n                i=j\n                j=j+1\n                count_prev=1\n        return max(a)\n                \n            \n            \n", "import copy\nclass Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        arrLen = len(arr)\n        if(arrLen <= k):\n            arr.sort()\n            return arr[-1]\n        \n        targ = 0\n        i1 = 0\n        i2 = 1\n        \n        while(targ < k) and arrLen > i2:\n            if(arr[i1] > arr[i2]):\n                i2 += 1\n            else:\n                i1 = i2\n                i2 += 1\n                targ = 0\n                \n            targ += 1\n            \n        return arr[i1]", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        winner = arr[0]\n        wins = 0\n        for i in range(1,len(arr),1):\n            if(winner > arr[i]): wins+=1  # increment wins count   \n            else:\n                wins = 1    # new winner\n                winner = arr[i]\n            if(wins == k): break    # if wins count is k, then return winner\n                \n        return winner", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if k > len(arr) - 1:\n            return max(arr)\n        od = OrderedDict()\n        for n in arr:\n            od[n] = True\n        wins = 0\n        prev, _ = od.popitem(last=False)\n        while True:\n            cur, _ = od.popitem(last=False)\n            if prev > cur:\n                wins += 1\n                od[cur] = True\n            else:\n                prev = cur\n                wins = 1\n                od[prev] = True\n            if wins == k:\n                break\n        return prev\n            \n        \n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        \n        i = count = 0\n        cur_ind = 0\n        \n        while i < len(arr) - 1:\n            \n            if arr[cur_ind] > arr[i+1]:\n                count += 1\n            else:\n                count = 1\n                cur_ind = i+1\n            if count >= k:\n                return arr[cur_ind]\n            i += 1\n        \n        return arr[cur_ind]", "class Solution:\n  def getWinner(self, arr: List[int], k: int) -> int:\n    wins = 0\n    c = 1\n    while wins < k and wins < 2*2*len(arr):\n      if arr[0] > arr[c]:\n        wins += 1\n      else:\n        arr[0], arr[c] = arr[c], arr[0]\n        wins = 1\n      c = (c+1) % len(arr)\n      if c == 0:\n        c += 1\n    return arr[0]\n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if k >= len(arr):\n            return max(arr)\n        cur=arr[0]\n        cnt = 0\n        for i in range(1, len(arr)):\n            if arr[i] > cur:\n                cur = arr[i]\n                cnt = 0\n            cnt += 1\n            if (cnt == k): break\n        return cur\n", "from collections import deque, defaultdict\n\nclass Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        \n        if k >= len(arr)-1:\n            return max(arr)\n        \n        \n        dq = deque()\n        count = defaultdict(lambda: 0)\n        \n        for ele in arr:\n            dq.append(ele)\n            \n        while True:\n            x = dq.popleft()\n            y = dq.popleft()\n            \n            if x > y:\n                maxv = x\n                minv = y\n            else:\n                maxv = y\n                minv = x\n                \n            count[maxv] += 1\n            \n            if count[maxv] == k:\n                return maxv\n            \n            dq.append(minv)\n            dq.appendleft(maxv)\n            \n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if(k>=len(arr)):\n            return max(arr)\n        maxi=arr[0]\n        stream=0\n        if(k==1):\n            return max(arr[0],arr[1])\n        for i in range(1,len(arr)):\n            if(arr[i]>maxi):\n                stream=1\n                maxi=arr[i]\n            else:\n                stream+=1\n            if(stream>=k):\n                return maxi\n        return max(arr)\n                \n            \n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if len(arr) < k:\n            return max(arr)\n        curr = arr[0]\n        count = 0\n        for i in range(1, len(arr)):\n            if curr < arr[i]:\n                curr = arr[i]\n                count = 1\n            else:\n                count+=1\n            if count == k:\n                return curr\n        return curr", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        \n        n = len(arr)\n        cur = arr[0]\n        win = 0\n        for i in range(1, n):\n            if arr[i] > cur:\n                cur = arr[i]\n                win = 0\n            win += 1\n            if win == k:   \n                return cur\n        \n        return max(arr)", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        \n        n = len(arr)\n        if k>n: return max(arr)\n        \n        i=0; j=1\n        while True:\n            if not i: m=k\n            else: m=k-1\n            while j<len(arr) and arr[j]<arr[i]:\n                m-=1; j+=1\n            if m<=0 or j>=len(arr): return arr[i]\n            i+=1; j=i+1\n\n            \n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        i = 0\n        j = 1\n        \n        c = k\n        \n        while c > 0 and j <len(arr):\n            if arr[i] > arr[j]:\n                j += 1\n                c -= 1\n            else:\n                i = j \n                j += 1\n                c = k -1\n        return arr[i] \n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        wins = 0\n        p1 = 0\n        p2 = 1\n        while(p1<len(arr) and p2<len(arr)):\n            if arr[p1]>arr[p2]:\n                wins = wins + 1\n                p2 = p2 + 1\n            else:\n                temp = p2+1\n                p1= p2\n                p2 = temp \n                wins = 1\n            \n            if wins==k:\n                return arr[p1]\n        \n        return arr[p1]\n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if k >= len(arr):\n            return max(arr)\n        \n        n =len(arr)\n        winner = max(arr[0] , arr[1])\n        if k == 1 : \n            return winner \n        \n        ctn = 1\n        maxNum = winner\n        \n        for i in range(2,n ):\n            tmp = arr[i]\n            if  winner > tmp :\n                ctn +=1 \n            \n            else : \n                ctn = 1 \n                winner = tmp\n            \n            if ctn == k : \n                return winner \n            \n            maxNum = max(maxNum, tmp)\n        return maxNum \n                \n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        \n        count = cur_ind = 0\n        \n        for i in range(len(arr) - 1):\n            if arr[cur_ind] > arr[i+1]:\n                count += 1\n            else:\n                count = 1\n                cur_ind = i+1\n            if count >= k:\n                return arr[cur_ind]\n        \n        return arr[cur_ind]", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        winner = arr[0]\n        streak = 0\n\n        for num in arr[1:]:\n            if winner > num:\n                streak += 1\n            \n            else:\n                winner = num\n                streak = 1\n            \n            if streak == k:\n                return winner\n        \n        return winner\n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if(k>=len(arr)):\n            return(max(arr))\n        cons = 0\n        ngr = [-1 for i in range(len(arr))]\n        stack = [[arr[-1],len(arr)-1]]\n        for i in range(len(arr)-2,-1,-1):\n            while(len(stack)>0 and stack[-1][0]<arr[i]):\n                stack.pop(-1)\n            if(len(stack)!=0):\n                ngr[i] = stack[-1][1]\n            stack.append([arr[i],i])\n        ngl = [-1 for i in range(len(arr))]\n        stack = [[arr[0],0]]\n        for i in range(1,len(arr),1):\n            while(len(stack)>0 and stack[-1][0]<arr[i]):\n                stack.pop(-1)\n            if(len(stack)!=0):\n                ngl[i] = stack[-1][1]\n            stack.append([arr[i],i])\n        marr = max(arr)\n        for i in range(len(ngr)):\n            if(ngr[i] == -1):\n                if(arr[i] == marr):\n                    return(marr)\n                else:\n                    if(ngl[i] + len(arr) - i>=k):\n                        return(arr[i])\n            else:\n                if(i>0 and ngr[i]-i-1>=k-1):\n                    return(arr[i])\n                elif(i==0 and ngr[i]-i-1>=k):\n                    return(arr[i])\n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        cur = arr[0] \n        win = 0\n        for i in range(1,len(arr)):\n            if arr[i] > cur:\n                cur = arr[i]\n                win = 0\n            win += 1\n            if win == k:\n                break\n        return cur", "from collections import deque\n\nclass Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        # winner remains at position 0 \n        # loser moves to end of array \n        '''\n        arr = [2,1,3,5,4,6,7]\n        k = 2 \n        \n        [2,3,5,4,6,7,1]\n        [3,5,4,6,7,1,2]\n        [5,4,]\n        \n        question - if no rotation - first number\n        1) indicator that number geq than prev number\n        2) consecutive numbers greater than \n        is >= k\n        \n        otherwise \n        1) same - with each integer at beginning; count the sum of consecutive elements it's greater than from index [i - 1], [min(len(i) - 1,i + k)]\n        \n        otherwise \n        1) if len is less than (k), then we have to loop through; \n        \n        any better way of doing this?\n        this way will be O(k*n) - constant\n        \n        question - what's the best way to shift array? (pop? append)\n        queue? i need to remove either top or second top element\n        swap first and second, dequeue \n\n        '''\n        \n#         if len(arr) < 3:\n#             return min(arr)\n        \n        \n#         q = deque(arr[::-1])\n#         # append on right\n#         # dequeue on left\n#         count = 0\n#         while(count < k):\n#             comp1, comp2 = arr[-1], arr[-2]\n#             #   if new winner\n#             if comp2 > comp1: \n#                 arr.append(arr.pop())\n#                 count = 1\n#             else:\n#             # if current winner\n#                 arr[-1] = comp2\n#                 arr[-2] = comp1\n#                 arr.append(arr.pop())\n#                 count += 1\n            \n#         return arr[-1]\n\n    \n        count = 0\n    #     [2,1,3]\n        current = arr[0]\n        for i in range(1, len(arr)):\n            if count >= k:\n                return current\n            elif arr[i] > current:\n                current = arr[i]\n                count = 1\n            else:\n                count += 1\n        return current\n\n        \n            \n                        \n\n\n#     i need to know how many  smaller elements there will be after each \n# sort? keep track of sorted indices? \n# i only care about what's immediately before it, and next term that is largest \n# after first round, it's sorted in asc order - if it doesn't win the first itme it appears, it won't win \n# idea - for each - keep number which are greater than it k*n\n# idea - sort all (nlogn) and for each, check how many after it are less than it; \n# if a bigger number comes before a smaller one and will win, it will win for sure\n# if a smaller numnber comes before a bigger number, if it hasn't won it won't win \n    # if k < sz this is fine \n    # otherwise\n    # if we get to the end, the largest number is the winner\n\n\n\n\n\n\n\n\n\n            \n            \n            \n", "from collections import deque\nclass Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if k >= len(arr) - 1:\n            return max(arr)\n        \n        q = deque(arr)\n        \n        winner = max(q[0], q[1])\n        wins = 1\n        if winner == q[0]:\n            q.popleft()\n            loser = q.popleft()\n        elif winner == q[1]:\n            loser = q.popleft()\n            q.popleft()\n            \n        q.append(loser)\n        while wins < k:\n            if winner > q[0]:\n                wins += 1\n                loser = q.popleft()\n            else:\n                loser = winner\n                winner = q.popleft()\n                wins = 1\n            q.append(loser)   \n        return winner\n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if k >= len(arr) - 1:\n            return max(arr)\n        \n        stack = [arr[0]]\n        cnt = 0\n        for n in arr[1:]:\n            if cnt == k:\n                return stack[0]\n            if n < stack[-1]:\n                cnt += 1\n            else:\n                stack.pop()\n                stack.append(n)\n                cnt = 1\n        \n        return stack[0]\n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        wins = 0\n        currWinner = arr[0]\n        for i in range(1, len(arr)):\n            print(currWinner)\n            if currWinner > arr[i]:\n                wins += 1\n            else:\n                currWinner = arr[i]\n                wins = 1\n            if wins == k:\n                return currWinner\n        return currWinner\n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        maxi = max(arr)\n        cur = count = 0\n        for i, value in enumerate(arr):\n            if value == maxi:\n                return maxi\n            \n            if value > cur:\n                if i == 0:\n                    cur, count = value, 0\n                else:\n                    cur, count = value, 1\n            else:\n                count += 1\n                \n            if count == k:\n                return cur", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n                \n        i=0; j=1; m=k\n        while True:\n            while j<len(arr) and arr[j]<arr[i]:\n                m-=1; j+=1\n            if m<=0 or j>=len(arr): return arr[i]\n            i+=1; j=i+1; m=k-1\n\n            \n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        wins = 0\n        prev = arr[0]\n        for cur in arr[1:]:\n            if prev > cur:\n                wins += 1\n            else:\n                prev = cur\n                wins = 1\n            if wins == k:\n                return prev\n        return max(arr)\n            \n        \n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        \n        #n = len(arr)\n        #if k>n: return max(arr)\n        \n        i=0; j=1\n        while True:\n            if not i: m=k\n            else: m=k-1\n            while j<len(arr) and arr[j]<arr[i]:\n                m-=1; j+=1\n            if m<=0 or j>=len(arr): return arr[i]\n            i+=1; j=i+1\n\n            \n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        streak = 0\n        winner = None\n        if k >= len(arr) - 1:\n            return max(arr)\n        while streak < k:\n            if arr[0] > arr[1]:\n                winner = arr[0]\n                arr.append(arr[1])\n                del arr[1]\n                streak += 1\n            else:\n                winner = arr[1]\n                arr.append(arr[0])\n                del arr[0]\n                streak = 1       \n        return winner\n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        max_arr = max(arr)\n        max_arr_idx = arr.index(max_arr)\n        if k >= max_arr_idx:\n            return max(arr)\n        if k <=1:\n            return max(arr[0], arr[1])\n\n        last_winner = None\n        count = 0\n        while True:\n\n            if arr[0] > arr[1]:\n                winner = arr[0]\n                loser = arr[1]\n            else:\n                winner = arr[1]\n                loser = arr[0]\n            arr.remove(loser)\n            arr.append(loser)\n            if last_winner == winner:\n                count += 1\n                if count >= k - 1:\n                    return arr[0]\n            else:\n                count = 0\n                last_winner = winner    \n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        '''\n        - arr length always <= 2\n        - distinct elements\n        \n        \n        1. left_wins = 0\n        2. Compare first two elements\n        3a. if left >, increment left_wins, move second element to back\n        3b. else, set left_wins = 1, move first element back, remove it\n        4. return if left_wins == k\n        \n        O(k*N*N) Time  O(1) Space\n        \n        \n        [6,3,4,5,7] k = 3\n        \n        len(arr)-k\n        '''\n        if k >= len(arr)-1:\n            return max(arr)\n        \n        left_wins = 0\n        \n        while (left_wins != k):\n            if arr[0] > arr[1]:\n                left_wins += 1\n                arr.append(arr[1])\n                arr.pop(1)\n            else:\n                left_wins = 1\n                arr.append(arr[0])\n                arr.pop(0)\n        \n        return arr[0]\n        \n", "import math\nclass Solution:\n    \n    def getWinner(self, arr: List[int], k: int) -> int:\n        def find_max(arr):\n            max_num = -math.inf\n            for i in arr:\n                if i > max_num:\n                    max_num=i\n            return max_num\n                        \n        if k >= len(arr)-1:\n            return find_max(arr)\n        else:\n            win_count = 0\n            while True:\n                if arr[0] < arr[1]:\n                    arr.append(arr[0])\n                    arr.pop(0)\n                    win_count = 1\n                else:\n                    arr.append(arr[1])\n                    arr.pop(1)\n                    win_count += 1\n                if win_count == k:\n                    return arr[0]\n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if k > len(arr) // 2:\n            return max(arr)\n        curr = 1\n        if arr[0] < arr[1]:\n            arr.append(arr.pop(0))\n        else:\n            arr.append(arr.pop(1))\n        while curr < k:\n            if arr[0] < arr[1]:\n                curr = 1\n                arr.append(arr.pop(0))\n            else:\n                curr += 1\n                arr.append(arr.pop(1))\n        return arr[0]", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if k > len(arr) // 2:\n            return max(arr)\n        nums = 0\n        while nums < k:\n            if arr[0] < arr[1]:\n                nums = 1\n                arr.append(arr.pop(0))\n            else:\n                nums += 1\n                arr.append(arr.pop(1))\n        return arr[0]", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        ln = len(arr)\n        \n        #win = arr[0]\n        cnt = -1\n        idx = 0\n        \n        if k >= ln: return max(arr)\n        \n        while True:\n            idx = 0\n            arr2 = []\n        \n            #print(arr)\n        \n            for i in range(1, ln):\n                if arr[idx] > arr[i]:\n                    cnt += 1\n                    arr2.append(arr[i])\n                else:\n                    arr2.append(arr[idx])\n                    idx = i\n                    cnt = 1\n                \n                if cnt >= k:\n                    return arr[idx]\n            \n            arr = [arr[idx]] + arr2\n            #print(arr2)\n        \n        return 0\n        pass", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if k >= len(arr) - 1:\n            return max(arr)\n        count = 0\n        while count < k:\n            if arr[0] > arr[1]:\n                count += 1\n                temp = arr[1]\n                arr.remove(arr[1])\n                arr.append(arr[1])\n            else:\n                count = 1\n                arr.append(arr[0])\n                arr = arr[1:]\n            #print(arr, count)\n        return arr[0]\n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if k == 1:\n            return max(arr[0], arr[1])\n        if k >= len(arr) - 1:\n            return max(arr)\n        count = 0\n        result = arr[0]\n        while count < k:\n            # Move second entry to back.\n            if arr[0] > arr[1]:\n                count += 1\n                arr.append(arr.pop(1))\n            else:\n                arr.append(arr.pop(0))\n                # Set count back to 1 to account for first win for second entry.\n                count = 1\n                result = arr[0]\n        return result\n                \n            \n            \n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        cnt = 0\n        max_el = 0\n        \n        #Find array maximum\n        for element in arr:\n            if element > max_el:\n                max_el = element\n        \n        if(k >= len(arr)-1):\n            return max_el       \n        \n        #Loop until we reach the winner\n        while(cnt < k):\n            if(arr[0] > arr[1]):\n                arr.append(arr[1])\n                arr.remove(arr[1])\n                cnt += 1\n            else:\n                arr.append(arr[0])\n                arr.remove(arr[0])\n                cnt = 1\n                \n        return arr[0]\n                \n                \n                \n                \n        \n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if k > len(arr)-1:\n            return max(arr)\n        nwin = 0\n        while nwin < k and len(arr)>1:\n            if arr[0] > arr[1]:\n                nwin += 1\n            else:                \n                arr[0] = arr[1]\n                nwin = 1\n            arr.pop(1)\n        return arr[0]", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        # if k > len(arr)-1:\n        #     return max(arr)\n        candidates = arr[1:]\n        winner = arr[0]\n        nwin = 0\n        while nwin < k and candidates:\n            if winner > candidates[0]:\n                nwin += 1\n            else:                \n                winner = candidates[0]\n                nwin = 1\n            del candidates[0]\n        return winner", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        # if k > len(arr)-1:\n        #     return max(arr)\n        nwin = 0\n        while nwin < k and len(arr)>1:\n            if arr[0] > arr[1]:\n                nwin += 1\n            else:                \n                arr[0] = arr[1]\n                nwin = 1\n            arr.pop(1)\n        return arr[0]", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        # if k > len(arr)-1:\n        #     return max(arr)\n        candidates = arr[1:]\n        winner = arr[0]\n        nwin = 0\n        while nwin < k and candidates:\n            if winner > candidates[0]:\n                nwin += 1\n            else:                \n                winner = candidates[0]\n                nwin = 1\n            candidates.pop(0)\n        return winner", "from collections import defaultdict\nclass Solution:\n    def getWinner(self, arr, k):\n        r = []\n        i = 0\n        n = len(arr)\n        z = defaultdict(int)\n        while True:\n            arr += r\n            n = len(arr)\n            while i < n - 1:\n                j = i + 1\n                if arr[j] > arr[i]:\n                    z[arr[j]] += 1\n                    if z[arr[j]] == k:\n                        return arr[j]\n                    q = arr[j]\n                    r.append(arr.pop(i))\n                else:\n                    z[arr[i]] += 1\n                    if z[arr[i]] == k:\n                        return arr[i]\n                    q = arr[i]\n                    r.append(arr.pop(j))\n                n = len(arr)\n                if n==1:\n                    return q\n\n                for p in z:\n                    if p != q:\n                        z[p] = 0\n\n            \n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        smaller = 0\n        arrLen = len(arr)\n        currIndex = 0\n        for i in range(arrLen - 1):\n            if smaller == k:\n                return arr[currIndex]\n            if arr[currIndex] > arr[i+1]:\n                smaller += 1\n                continue\n            smaller = 1\n            currIndex = i + 1\n        return arr[currIndex]\n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:       \n        \n        if len(arr)<k:\n            return max(arr) \n        \n        if k==1:\n            return max(arr[0],arr[1])\n        \n        cnt=0\n        while cnt<k:\n            j=1\n            while arr[0]>arr[j]:\n                cnt+=1\n                j+=1\n                if cnt==k:\n                    return arr[0]\n            arr.append(arr[0])\n            arr.pop(0)\n            cnt=1\n\n", "from collections import defaultdict\nclass Solution:\n    def getWinner(self, arr, k):\n        #r = []\n        i = 0\n        n = len(arr)\n        z = defaultdict(int)\n        while True:\n            #arr += r\n            #n = len(arr)\n            while i < n - 1:\n                j = i + 1\n                if arr[j] > arr[i]:\n                    z[arr[j]] += 1\n                    if z[arr[j]] == k:\n                        return arr[j]\n                    q = arr[j]\n                    arr.pop(i)\n                else:\n                    z[arr[i]] += 1\n                    if z[arr[i]] == k:\n                        return arr[i]\n                    q = arr[i]\n                    arr.pop(j)\n                n = len(arr)\n                if n==1:\n                    return q\n\n                for p in z:\n                    if p != q:\n                        z[p] = 0\n\n            \n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:       \n        \n        if len(arr)<k:\n            return max(arr) \n        \n        if k==1:\n            return max(arr[0],arr[1])\n        \n        cnt=0\n        while arr and cnt<k:\n            j=1\n            while arr[0]>arr[j]:\n                cnt+=1\n                j+=1\n                if cnt==k:\n                    return arr[0]\n            arr.append(arr[0])\n            arr.pop(0)\n            cnt=1\n\n", "from collections import defaultdict\nclass Solution:\n    def getWinner(self, arr, k):       \n        i = 0\n        n = len(arr)\n        z = defaultdict(int)        \n        while i < n - 1:\n                j = i + 1\n                if arr[j] > arr[i]:\n                    z[arr[j]] += 1\n                    if z[arr[j]] == k:\n                        return arr[j]\n                    q = arr[j]\n                    arr.pop(i)\n                else:\n                    z[arr[i]] += 1\n                    if z[arr[i]] == k:\n                        return arr[i]\n                    q = arr[i]\n                    arr.pop(j)\n                n = len(arr)\n                if n==1:\n                    return q\n\n                for p in z:\n                    if p != q:\n                        z[p] = 0\n\n            \n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        win_list = [0, 0]\n        # while win_list[-1] < k:\n        for element in arr:\n            if win_list[-1] < k:\n                check_list = [arr[0], arr[1]]\n                if check_list[0] > check_list[1]:\n                    lost_ele = check_list[1]\n                    if check_list[0] != win_list[0]:\n                        win_list = [check_list[0], 1]\n                    else:\n                        win_list = [check_list[0], win_list[1] + 1]\n                    arr.pop(1)\n                    arr.append(lost_ele)\n                    # print(arr)\n                else:\n                    # print(check_list)\n                    lost_ele = check_list[0]\n                    if check_list[1] != win_list[0]:\n                        win_list = [check_list[1], 1]\n                    else:\n                        win_list = [check_list[1], win_list[1] + 1]\n                    arr.pop(0)\n                    arr.append(lost_ele)\n                    # print(arr)\n            else:\n                break\n        # print(win_list)\n        if win_list[-1] < k:\n            # result = k // win_list[0]\n            result = win_list[0]\n        else:\n            result = win_list[0]\n        return result\n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n      winner = float('inf')\n      wins = 0\n      backup = max(arr)\n      runs = 0\n      shortcircuit = len(arr)\n      \n      while winner == float('inf'):\n        runs += 1\n        if runs >= shortcircuit:\n          return backup\n        \n        if arr[0] > arr[1]:\n          arr.append(arr[1])\n          del arr[1]\n          wins += 1\n        else:\n          arr.append(arr[0])\n          del arr[0]\n          wins = 1\n          \n        if wins >= k:\n          winner = arr[0]\n      \n      return winner\n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        max_num = max(arr)\n        timeswon = 0\n        if arr.index(max_num) < k:\n            print(1)\n            return max_num\n        while timeswon < k:\n            if arr[0] == max_num:\n                print(2)\n                break\n            if arr[0] > arr[1]:\n                print(3)\n                arr.append(arr[1])\n                del arr[1]\n                timeswon += 1\n            else:\n                print(4)\n                arr.append(arr[0])\n                del arr[0]\n                timeswon = 1\n        return arr[0]", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        c =k\n        if len(arr) ==1:\n            return arr[0]\n        m = max(arr)\n        if k==1:\n            return max(arr[1],arr[0])\n        while 1:\n            if arr[0] == m:\n                return arr[0]\n            if arr[0] > arr[1]:\n                c-=1\n                if c==0:\n                    return arr[0]\n                arr.append(arr[1])\n                del arr[1]\n            else:\n                c=k-1\n                arr.append(arr[0])\n                del arr[0]\n            \n            \n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        res = 0\n        win = arr[0]\n        for n in arr[1:]:\n            if n > win:\n                win = n\n                res = 0\n            res += 1\n            if res == k: break\n        return win", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        maxs = max(arr)\n        if k > arr.index(maxs):\n            return maxs\n        dic = {}\n        \n        ind = arr.index(maxs)\n    \n        i = 0\n        seen = set()\n        while i < ind + 1:\n            maxs = max(arr[0], arr[1])\n            mins = min(arr[0], arr[1])\n            arr[0], arr[1] = mins, maxs\n            if maxs not in dic:\n                dic[maxs] = 1\n            else:\n                dic[maxs] += 1\n            arr.append(arr.pop(0))\n            if dic[maxs] == k:\n                return maxs\n            seen.add(dic[maxs])\n            if k in seen:\n                break\n            i += 1\n        \n        lst = [k for k, v in list(dic.items()) if v == k]\n        if lst:\n            return lst[0]\n        else:\n            return max(arr)\n        \n        \n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        maxval = max(arr)\n        win_count = 0\n        around = 0\n        while (win_count<k):\n            if (arr[0]==maxval):\n                break\n            elif (arr[0]>arr[1]):\n                win_count += 1\n                arr.append(arr[1])\n                del arr[1]\n            else:\n                win_count = 1\n                arr.append(arr[0])\n                del arr[0]\n            around += 1\n        return arr[0]\n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if len(arr) <= 1:\n            return 0\n        a = arr[::]\n        a.sort()\n        maxi = a[-1]\n        a.clear()\n        winner = -1 * 2**32\n        winCount = 0\n        while winCount < k:\n            #print(winCount, arr, winner)\n            if arr[0] == maxi or arr[1] == maxi:\n                return maxi\n            if arr[0] < arr[1]:\n                if arr[1] == winner:\n                    winCount += 1\n                else:\n                    winCount = 1\n                winner = arr[1]\n                arr += [arr.pop(0)]\n            else:\n                if arr[0] == winner:\n                    winCount += 1\n                else:\n                    winCount = 1\n                winner = arr[0]\n                arr += [arr.pop(1)]\n        return winner", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        consecutiveWins = 0\n        champion = arr[0]\n        hefty = max(arr)\n        \n        while consecutiveWins != k:\n            if champion == hefty:\n                return hefty\n            \n            if arr[0] > arr[1]:\n                arr.append(arr.pop(1))\n                \n            elif arr[0] < arr[1]:\n                arr.append(arr.pop(0))\n            \n            if arr[0] == champion:\n                consecutiveWins +=1\n            else:\n                champion = arr[0]\n                consecutiveWins = 1\n                \n        return champion\n            \n            \n            \n            \n            \n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        max_num = max(arr)\n        timeswon = 0\n        while timeswon < k:\n            if arr[0] == max_num:\n                break\n            if arr[0] > arr[1]:\n                arr.append(arr[1])\n                del arr[1]\n                timeswon += 1\n            else:\n                arr.append(arr[0])\n                del arr[0]\n                timeswon = 1\n        return arr[0]", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        \n        check = {}\n        \n        num_0 = arr[0]\n        num_1 = arr[1]\n        num_wins = 0\n        \n        \n        if len(arr) == 2:\n            return max(arr[0], arr[1])\n        \n        if len(arr) < k:\n            arr.sort(reverse=True)\n            return arr[0]\n        \n        while num_wins < k and num_1 not in list(check.keys()):\n            if num_0 > num_1:\n                arr.remove(num_1)\n                arr.append(num_1)\n                check[num_1] = num_1\n                num_1 = arr[1]\n                num_wins += 1\n            else:\n                arr.remove(num_0)\n                arr.append(num_0)\n                check[num_0] = num_0\n                num_0 = arr[0]\n                num_1 = arr[1]\n                num_wins = 1\n            \n        return num_0\n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        length = len(arr)\n        count = 0\n        for i in range(length):\n            if arr[0] > arr[1]:\n                arr.append(arr[1])\n                arr.pop(1)\n                count += 1\n            else:\n                arr.append(arr[0])\n                arr.pop(0)\n                count = 1\n            if count == k:\n                return arr[0]\n        return arr[0]\n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        count = 0\n        prev = 0\n        i=0\n        len_arr = len(arr)\n        while count < k:\n            if i > len_arr:\n                return arr[0]\n            if arr[0] > arr[1]:\n                if arr[0] == prev:\n                    count +=1\n                prev = arr[0]\n                arr.append(arr[1])\n                arr.pop(1)\n            elif arr[1] > arr[0]:\n                count = 1\n                prev = arr[1]\n                arr.append(arr[0])\n                arr.pop(0)\n            i+=1\n        return arr[0]        ", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        players = collections.defaultdict(int)\n        for i in range(len(arr) - 1):\n            if arr[0] > arr[1]:\n                players[arr[0]] += 1\n                if players[arr[0]] == k:\n                    return arr[0]\n                else:\n                    arr.append(arr.pop(1))\n            if arr[1] > arr[0]:\n                players[arr[1]] += 1\n                if players[arr[1]] == k:\n                    return arr[1]\n                else:\n                    arr.append(arr.pop(0))\n        return arr[0]", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        q = collections.deque(arr)\n        streak = 0\n        \n        if k >= len(arr):\n            return max(arr)\n        \n        while True:\n            player = q.popleft()\n            while player > q[0] and streak < k:\n                opp = q.popleft()\n                q.append(opp)\n                streak += 1\n            if streak == k:\n                return player\n            streak = 1\n            q.append(player)\n        \n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        r = 0\n        l = len(arr)\n        count = 0\n        while True:\n            count += 1\n            if count > l:\n                return arr[0]\n            if arr[0] > arr[1]:\n                r += 1\n                if r == k:\n                    return arr[0]\n                temp = arr[1]\n                arr.pop(1)\n                N = len(arr)\n                arr.insert(N,temp)\n            else:\n                r = 1\n                if r == k:\n                    return arr[1]\n                temp = arr[0]\n                arr.pop(0)\n                N = len(arr)\n                arr.insert(N,temp)\n\n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        length = len(arr)\n        count = 0\n        for i in range(length):\n            if arr[0] > arr[1]:\n                arr.append(arr[1])\n                arr.pop(1)\n                count += 1\n            else:\n                arr.append(arr[0])\n                arr.pop(0)\n                count = 1\n            if count == k:\n                #return arr[0]\n                break\n        return arr[0]\n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        c={}\n        maxarray=max(arr)\n        while max(list(c.values()), default=-1)<k:\n            if arr[0]!=maxarray:\n                arr[0],lastItem=max(arr[0],arr[1]),min(arr[0],arr[1])\n                arr.pop(1)\n                arr.append(lastItem)\n                if arr[0] not in c:\n                    c[arr[0]]=1\n                else:\n                    c[arr[0]]+=1\n            else:\n                return arr[0]\n        for i,val in list(c.items()):\n            if val>=k:\n                return i\n            \n        return -1\n\n        \n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        endCount=k if k<len(arr) else len(arr)\n        winCount=0\n        \n        for i in range(len(arr)):\n            if arr[0]>arr[1]:\n                winCount+=1\n                arr.append(arr.pop(1))\n            else:\n                winCount=1\n                arr.append(arr.pop(0))\n            if endCount<=winCount:\n                    break\n            \n        \n        return arr[0]", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        \n        check = {}\n        \n        num_0 = arr[0]\n        num_1 = arr[1]\n        num_wins = 0\n        \n        if len(arr) == 2:\n            return max(arr[0], arr[1])\n        \n        while num_wins < k and num_1 not in list(check.keys()):\n            if num_0 > num_1:\n                arr.remove(num_1)\n                arr.append(num_1)\n                check[num_1] = num_1\n                num_1 = arr[1]\n                num_wins += 1\n            else:\n                arr.remove(num_0)\n                arr.append(num_0)\n                check[num_0] = num_0\n                num_0 = arr[0]\n                num_1 = arr[1]\n                num_wins = 1\n            \n        return num_0\n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        cnt = Counter()\n        for i in range((len(arr))):\n            if cnt[arr[0]] == k:\n                break\n            if arr[0] > arr[1]:\n                arr.append(arr.pop(1))\n                cnt[arr[0]]+=1\n            elif arr[0] < arr[1]:\n                arr.append(arr.pop(0))\n                cnt[arr[0]]+=1\n        return arr[0]", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if k>len(arr)+3:\n            return max(arr)\n        wins = 0\n        win_num = arr[0]\n        while wins < k:\n            if arr[0]>arr[1]:\n                if arr[0]==win_num:\n                    wins += 1\n                else:\n                    wins = 1\n                win_num = arr[0]\n                arr.append(arr[1])\n                arr.pop(1)\n            else:\n                if arr[1]==win_num:\n                    wins += 1\n                else:\n                    wins = 1\n                win_num = arr[1]\n                arr.append(arr[0])\n                arr.pop(0)\n                \n        return win_num", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if k >= len(arr) or len(arr) <= 2:   return max(arr)\n        \n        winner = 0\n        winner_in_row = 0\n        \n        while True:\n            if winner_in_row == k:  break    \n            if arr[0] > arr[1]: \n                winner_in_row += 1\n                arr.append(arr.pop(1))\n            else:\n                winner_in_row = 1\n                arr.append(arr.pop(0))\n\n        return arr[0]\n        \n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        turns = 0\n        if k > len(arr):\n            return max(arr)\n        while turns < k:\n            first = arr[0]\n            second = arr[1]\n            if first < second:\n                del arr[0]\n                arr.append(first)\n                turns = 1\n            else:\n                del arr[1]\n                arr.append(second)\n                turns += 1\n        return arr[0]\n            \n                \n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        winner = arr[0]\n        win_count = 0\n        for i in range(1, len(arr)):\n            if winner > arr[i]:\n                win_count += 1\n            else:\n                winner = arr[i]\n                win_count = 1\n            if win_count == k:\n                return winner\n        return winner", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if k >= len(arr):\n            return max(arr)\n        count = collections.defaultdict(int)\n        while True:\n            if arr[0] > arr[1]:\n                count[arr[0]] += 1                \n                if count[arr[0]] == k:\n                    return arr[0]                \n                arr.append(arr[1])\n                arr.remove(arr[1])\n            else:\n                count[arr[1]] += 1\n                if count[arr[1]] == k:\n                    return arr[1]                \n                arr.append(arr[0])\n                arr.remove(arr[0])", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        win_count = 0\n        while win_count < min(len(arr), k):\n            if arr[0] > arr[1]:\n                val = arr.pop(1)\n            else:\n                val = arr.pop(0)\n                win_count = 0\n            win_count += 1\n            arr.append(val)\n        return arr[0]", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if k >= len(arr) or len(arr) <= 2:   return max(arr)\n        \n        winner = 0\n        winner_in_row = 0\n        \n        while True:\n            if winner_in_row == k:  break    \n            if arr[0] > arr[1]: \n                winner_in_row += 1\n                arr.append(arr.pop(1))\n            else:\n                winner_in_row = 1\n                last_winner = arr[1]\n                arr.append(arr.pop(0))\n\n        return arr[0]\n        \n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if(k>len(arr)):\n            return max(arr)\n        prev = arr[0]\n        a = 0\n        while(a!=k):\n            if(arr[0]>arr[1]):\n                if(arr[0]==prev):\n                    a+=1\n                else:\n                    a=1\n                    prev = arr[0]\n                num = arr.pop(1)\n                arr.append(num)\n                    \n            else:\n                if(arr[1]==prev):\n                    a+=1\n                else:\n                    a=1\n                    prev = arr[1]\n                num = arr.pop(0)\n                arr.append(num)\n                \n        return prev\n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if k > len(arr):\n            return max(arr)\n        \n        curr = arr[0]\n        \n        count = 0\n        if arr[0] > arr[1]:\n            v = arr.pop(1)\n            arr.append(v)\n        else:\n            v = arr.pop(0)\n            curr = arr[0]\n            arr.append(v)\n        count += 1\n        \n        while count < k:\n            new = arr[1]\n            \n            if curr > new:\n                v = arr.pop(1)\n                arr.append(v)\n                count += 1\n            else:\n                v = arr.pop(0)\n                arr.append(v)\n                count = 1\n                curr = arr[0]\n                \n        return curr\n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if k>=len(arr):\n            return max(arr)\n        r=0\n        while 1:\n            if arr[0]>arr[1]:\n                r=r+1\n                z=arr[1]\n                del arr[1]\n                arr.append(z)\n            else:\n                r=1\n                arr.append(arr.pop(0))\n            if k==r:\n                return arr[0]\n                \n                \n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if k >= len(arr):\n            return max(arr)\n        win_count = 0\n        while win_count != k:\n            a1 = arr[0]\n            a2 = arr[1]\n            if a1 > a2:\n                win_count += 1\n                winner = a1\n                loser = arr.pop(1)\n                arr.append(loser)\n            else:\n                win_count = 1\n                winner = a2\n                loser = arr.pop(0)\n                arr.append(loser)\n        return winner\n            \n            \n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if k >= len(arr):\n            return max(arr)\n        \n        curr = arr[0]\n        \n        count = 0\n        if arr[0] > arr[1]:\n            v = arr.pop(1)\n            arr.append(v)\n        else:\n            v = arr.pop(0)\n            curr = arr[0]\n            arr.append(v)\n        count += 1\n        \n        while count < k:\n            new = arr[1]\n            \n            if curr > new:\n                v = arr.pop(1)\n                arr.append(v)\n                count += 1\n            else:\n                v = arr.pop(0)\n                arr.append(v)\n                count = 1\n                curr = arr[0]\n                \n        return curr\n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        k=min(k,len(arr))\n\n\n        curr=0\n        count=0\n\n        for indx in range(len(arr)):\n\n            if arr[curr]==arr[indx]:\n                continue\n\n            if arr[indx]<arr[curr]:\n                count+=1\n\n            if arr[indx]>arr[curr]:\n                count=1\n                curr=indx\n\n            if count>=k:\n                return arr[curr]\n\n\n        return max(arr)", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if k>=len(arr):\n            return max(arr)\n        r=0\n        while 1:\n            if arr[0]>arr[1]:\n                r=r+1\n                z=arr.pop(1)\n                arr.append(z)\n            else:\n                r=1\n                arr.append(arr.pop(0))\n            if k==r:\n                return arr[0]\n                \n                \n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if k >= len(arr):\n            return max(arr)\n        \n        n =len(arr)\n        winner , cnt = arr.pop(0) , 0 \n        \n        while True : \n            tmp = arr.pop(0)\n            if tmp > winner: \n                arr.append(winner)\n                winner , cnt  = tmp, 1 \n            \n            else : \n                arr.append(tmp)\n                cnt +=1 \n            \n            if cnt == k :\n                return winner ", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        n = len(arr)\n        d = dict()\n        count = 0\n        while(count < k and count < n):\n            if(arr[0] > arr[1]):\n                count += 1\n                arr.append(arr.pop(1))\n            else:\n                count = 1\n                arr[0], arr[1] = arr[1], arr[0]\n                arr.append(arr.pop(1))\n        return arr[0]\n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        \n        wins = 0\n        \n        if k >= len(arr):\n            return max(arr)\n        \n        while True:\n            move_pos = 0\n            \n            if arr[0] > arr[1]:\n                move_pos = 1\n                wins += 1\n                \n            else:\n                wins = 1\n                \n            arr.append(arr.pop(move_pos))\n            \n            if wins == k:\n                return arr[0]", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if(k >= len(arr)):\n            return max(arr)\n        first = arr[0]\n        \n        win_count = 0\n        best_num = first\n        \n        while(win_count != k):\n            if(first > arr[1]):\n                win_count+=1\n                #print(first, arr, win_count)\n                if(win_count == k):\n                    best_num = first\n                    break\n                arr.append(arr.pop(1))\n            else:\n                win_count = 1\n                #print(first, arr, win_count)\n                arr.append(arr.pop(0))\n                first = arr[0]\n                if(win_count == k):\n                    best_num = first\n                    break\n\n            \n            \n        return best_num", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if k>len(arr): return max(arr)\n        win_count=0\n        while win_count<k:\n            if arr[0]>arr[1]: win_count +=1\n            else: \n                arr[0],arr[1] = arr[1],arr[0]\n                win_count = 1\n            temp = arr[1]\n            del arr[1]\n            arr.append(temp)\n        return arr[0]\n            \n                \n                \n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        i = 0\n        if k > len(arr):\n            return max(arr)\n        t = k    \n        p1, p2 = arr[0], arr[1]\n        while t:\n            # print(arr, p1,p2,t)\n            if p1 > p2:\n                arr.pop(1)\n                arr.append(p2)\n                p2 = arr[1]\n                t -= 1\n            else:\n                arr.pop(0)\n                arr.append(p1)\n                p1 = arr[0]\n                p2 = arr[1]\n                t = k-1\n        return p1\n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        n = len(arr)\n        if k >= n:\n            return max(arr)\n        \n        count = 1\n        \n        winner = arr[0] if arr[0] > arr[1] else arr[1]\n        \n        if winner == arr[0]:\n            arr.insert(n-1, arr.pop(1))\n        \n        else:\n            arr.insert(n-1, arr.pop(0))\n        \n        \n        while count < k:\n            if winner > arr[1]:\n                arr.insert(-1, arr.pop(1))\n                count+=1\n            \n            else:\n                winner = arr[1]\n                arr.insert(-1, arr.pop(0))\n                count = 1\n        \n        return winner\n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if k>=len(arr):\n            return max(arr)\n        winner,win = arr.pop(0),0\n        while True:\n            temp = arr.pop(0)\n            if temp>winner:\n                arr.append(winner)\n                winner,win = temp,1\n            else:\n                arr.append(temp)\n                win += 1\n            if win == k:\n                return winner\n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        maxlen = len(arr)\n        if k > maxlen:\n            return max(arr)\n        wins = 0\n        while True:\n            first, second = arr[:2]\n            if first > second:\n                arr.pop(1)\n                arr.append(second)\n                wins += 1\n            else:\n                arr.pop(0)\n                arr.append(first)\n                wins = 1\n            if wins == k:\n                break\n            if wins > maxlen + 1:\n                break\n        return arr[0]", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        \n        \n        ma = arr[0]\n        ct = 0\n        \n        for i in range(1,len(arr)):\n            if (arr[i] > ma ):\n                ma = arr[i]\n                ct = 1\n            else:\n                ct += 1\n            \n            if (ct == k):\n                return ma\n            \n        return ma", "class Solution:\n    def getWinner(self, A: List[int], K: int) -> int:\n        n = len(A)\n        dq = collections.deque(A)\n        winner = -1\n        num_wins = 0\n        for _ in range(n):\n            x = dq.popleft()\n            y = dq.popleft()\n            \n            if x < y:\n                x,y = y,x\n            \n            if winner == x:\n                num_wins += 1\n            else:\n                winner = x\n                num_wins = 1\n                \n            dq.appendleft(x)\n            dq.append(y)\n            \n            if num_wins == K:\n                return winner\n        return dq[0]", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if k >= len(arr):\n            return max(arr)\n        numWin = 0\n        while numWin < k:\n            if arr[0] < arr[1] :\n                numWin = 1\n                arr.append(arr.pop(0))\n            else:\n                numWin += 1\n                arr.append(arr.pop(1))\n        return arr[0]", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        wincount = 0\n        if k > len(arr) + arr.index(max(arr)):\n            return max(arr)\n        while wincount < k: \n            if arr[0] > arr[1]:\n                wincount += 1\n                arr.append(arr.pop(1))\n            else:\n                wincount = 1\n                arr.append(arr.pop(0))\n        \n        return arr[0]\n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if (k > len(arr)):\n            return max(arr)\n        win = {arr[0]:0,arr[1]:0}\n        while(win[arr[0]] < k and win[arr[1]] < k):\n            if (arr[0]>arr[1]):\n                win[arr[0]] = win[arr[0]] + 1   \n                arr.append(arr[1])\n                arr.remove(arr[1])\n            else:\n                win[arr[1]] = win[arr[1]] + 1\n                arr.append(arr[0])\n                arr.remove(arr[0])\n            win[arr[1]] = 0\n        if(win[arr[0]]==k):\n            return arr[0]\n        else:\n            return arr[1]\n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        n = len(arr)\n        if k>=n:\n            return max(arr)\n        win_count = {}\n        for i in arr:\n            win_count[i] = 0\n        \n        count = 0\n              \n        while count !=k:\n            \n            if arr[0]>arr[1]:\n                win_index = 0\n                lost_index = 1\n            else:\n                \n                win_index = 1\n                lost_index = 0\n                \n            \n            #re-order the arr by moving the lost element to the end of the list          \n            lost = arr.pop(lost_index)\n            arr.append(lost) # add lost at the end of the list\n            \n            win_count[arr[-1]]= 0 #reset lost element's win_count to 0\n            win_count[arr[0]]+=1 \n            count = win_count[arr[0]]\n                     \n        return arr[0]", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if k >= len(arr):\n            return max(arr)\n        count = 0\n        last_win = None\n        while True:\n            if arr[0] > arr[1]:\n                val = arr[1]\n                arr.remove(arr[1])\n                arr.append(val)\n            else:\n                val = arr[0]\n                arr.remove(arr[0])\n                arr.append(val)\n            win = arr[0]\n            if win != last_win:\n                last_win = win\n                count = 1\n            else:\n                count += 1\n            if count == k:\n                return win\n                \n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        n = len(arr)\n        if k >= n:\n            return max(arr)\n        \n        winCount = 0\n        winner = arr[0]\n        \n        while winCount != k:\n            if arr[0] > arr[1]:\n                if winner == arr[0]:\n                    winCount += 1\n                else:\n                    winCount = 1\n                winner = arr[0]\n                arr.append(arr[1])\n                arr.pop(1)\n            else:\n                if winner == arr[1]:\n                    winCount += 1\n                else:\n                    winCount = 1\n                    \n                winner = arr[1]\n                arr.append(arr[0])\n                arr.pop(0)\n        return winner", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        n = len(arr)\n        if k>=n:\n            return max(arr)\n        win_count = {}\n        for i in arr:\n            win_count[i] = 0\n        \n        count = 0\n        \n        \n        while count !=k:\n            \n            if arr[0]>arr[1]:\n                win_index = 0\n                lost_index = 1\n            else:\n                \n                win_index = 1\n                lost_index = 0\n                \n            win_count[arr[lost_index]]= 0 #reset lost element's win_count to 0\n            win_count[arr[win_index]]+=1 \n            count = win_count[arr[win_index]]\n            #re-order the arr by moving the lost element to the end of the list          \n            lost = arr.pop(lost_index)\n            arr.append(lost) # add lost at the end of the list\n                     \n        return arr[0]", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        winner = int(arr[0])\n        wins = 0\n        \n        if k > len(arr):\n            return max(arr)\n        \n        \n        while wins < k:\n            p1 = int(arr[0])\n            p2 = int(arr[1])\n            if p1 > p2:\n                winner = p1\n                wins += 1\n                arr.append(arr.pop(1))\n            else:\n                winner = p2\n                wins = 1\n                arr.append(arr.pop(0))\n                \n                \n        return winner", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        n = len(arr)\n        maxv = max(arr)\n        queue = collections.deque(arr)\n        c = 0\n        w = queue[0]\n        while queue[0] != maxv:\n            a, b = queue.popleft(), queue.popleft()\n            # print(a, b)\n            if a < b:\n                queue.append(a)\n                queue.appendleft(b)\n            else:\n                queue.append(b)\n                queue.appendleft(a)\n            if queue[0] == w:\n                c += 1\n            else:\n                c = 1\n                w = queue[0]\n            if c == k:\n                return w\n        return maxv", "class Solution:\n    def getWinner(self, A: List[int], K: int) -> int:\n        n = len(A)\n        dq = collections.deque(A)\n        winner = -1\n        num_wins = 0\n        for _ in range(n):\n            x = dq.popleft()\n            y = dq.popleft()\n            \n            if x < y:\n                x,y = y,x\n                \n            if winner == x:\n                num_wins += 1\n            else:\n                winner = x\n                num_wins = 1\n                \n            dq.appendleft(x)\n            dq.append(y)\n            \n            if num_wins == K:\n                return winner\n        return dq[0]", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        count = 0\n        cur = arr[0]\n        for i in range(1,len(arr)):\n            if cur > arr[i]:\n                count+=1\n            else: \n                count = 1\n                cur = arr[i]\n            if count == k:\n                break\n        return cur\n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        current = arr[0]\n        win_count = 0\n        \n        for i in range(1, len(arr)):\n            if arr[i] > current:\n                win_count = 0\n                current = arr[i]\n            win_count += 1\n            if win_count == k:\n                break\n        return current\n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        n = len(arr)\n        maxv = max(arr)\n        if n <= k:\n            return maxv\n        queue = collections.deque(arr)\n        c = 0\n        w = queue[0]\n        while queue[0] != maxv:\n            a, b = queue.popleft(), queue.popleft()\n            # print(a, b)\n            if a < b:\n                queue.append(a)\n                queue.appendleft(b)\n            else:\n                queue.append(b)\n                queue.appendleft(a)\n            if queue[0] == w:\n                c += 1\n            else:\n                c = 1\n                w = queue[0]\n            if c == k:\n                return w\n        return maxv", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if k > len(arr) - 2:\n            return max(arr)\n        if len(arr) < 3:\n            return max(arr)\n        left = arr[0]\n        right = arr[1]\n        d = collections.deque(arr[2:])\n        count = 0\n        while count < k:\n            if left > right:\n                count += 1\n                d.append(right)\n            else:\n                count = 1\n                d.append(left)\n                left = right\n            right = d.popleft()\n        return left", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if k >= len(arr):\n            return max(arr)\n        \n        lastWinner = None\n        winCount = 0\n        \n        deque = collections.deque(arr)\n        while winCount < k:\n            firstNum = deque.popleft()\n            secondNum = deque.popleft()\n            \n            winner = firstNum if firstNum > secondNum else secondNum\n            loser = firstNum if firstNum <= secondNum else secondNum\n            if lastWinner == winner:\n                winCount += 1\n            else:\n                lastWinner = winner\n                winCount = 1\n            \n            deque.appendleft(winner)\n            deque.append(loser)\n        \n        return lastWinner\n                \n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        i = 0\n        j = 1\n        bigger_than = 0\n        len_arr = len(arr)\n        while bigger_than < min(k, len_arr - 1):\n            if arr[i] > arr[j % len_arr]:\n                j += 1\n                bigger_than += 1\n            else:\n                i = j\n                j += 1\n                bigger_than = 1\n        return arr[i]", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        # My First Solution\n        widx=0  # current winner index\n        gen=(i for i,x in enumerate(arr) if x > arr[widx] and k>=i>0)\n        i=next(gen,None)\n        if i: widx = i  \n        else: return arr[widx] \n        \n        while widx < len(arr):\n            gen=(i for i,x in enumerate(arr) if x > arr[widx] and k>i-widx>0)\n            i=next(gen,None)\n            if i: widx = i\n            else: return arr[widx]\n        \n        # Clean Discussion Solution\n        win = cnt = 0 #winner & count \n        for i, x in enumerate(arr): \n            if win < x: win, cnt = x, 0 #new winner in town \n            if i: cnt += 1 #when initializing (i.e. i == 0) count=0\n            if cnt == k: break #early break \n        return win \n        \n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        largestFound = -1\n        for i in range(len(arr)):\n            if arr[i] > largestFound:\n                largestFound = arr[i]\n                can = True\n                if i == 0:\n                    for j in range(i+1,min(i+k+1,len(arr))):\n                        if arr[j] > arr[i]:\n                            can = False\n                            break\n                else:\n                    for j in range(i+1,min(i+k,len(arr))):\n                        if arr[j] > arr[i]:\n                            can = False\n                            break\n                if can:\n                    return arr[i]", "class Solution:\n    #\u7ed9\u5b9a\u4e0d\u76f8\u540c\u5143\u7d20\u6570\u7ec4\uff0c\u6bd4\u8f83\u6570\u7ec4\u4e2d\u524d\u4e24\u4e2a\u5143\u7d20\uff0c\u8d62\u5f97\u7559\u4e0b\uff0c\u8f93\u7684\u653e\u5230\u6570\u7ec4\u6700\u540e\uff0c\u6c42\u51fa\u6700\u5148\u8d62k\u8f6e\u7684\u6570\u5b57\n    #\u89e3\u6cd5\uff1a\u5f53\u904d\u5386\u6570\u7ec4\u4e00\u904d\u540e\uff0c\u8fd8\u4e0d\u80fd\u5f97\u5230\u7ed3\u679c\uff0c\u5c31\u53ea\u53ef\u80fd\u662f\u6570\u7ec4\u6700\u5927\u503c\u4e86\uff1b\u56e0\u6b64\u53ea\u8981\u7ef4\u62a4\u4e00\u4e2a\u5f53\u524d\u6700\u5927\u503c\u53d8\u91cf\uff0c\u8fde\u7eedk\u6b21\u4e0d\u53d8\u5373\u4e3a\u7ed3\u679c\n    def getWinner(self, arr: List[int], k: int) -> int:\n        max_temp = arr[0]\n        rounds = 0\n        for i in range(1, len(arr)):\n            if arr[i] > max_temp:\n                rounds = 1\n                max_temp = arr[i]\n            else:\n                rounds += 1\n            if rounds == k:\n                return max_temp\n        return max(arr)", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if k >= len(arr)-1:\n            return max(arr)\n        \n        widx = 0  # current winner index\n        i = next((i for i,x in enumerate(arr) if x > arr[widx] and k>=i>0),None)\n        if i!=None:\n            widx = i\n        else: \n            return arr[widx] \n        \n        while widx < len(arr):\n            i=next((i for i,x in enumerate(arr) if x > arr[widx] and k>i-widx>0),None)\n            print(i)\n            if i!=None:\n                widx = i\n            else: \n                return arr[widx]", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if k == 1: return max(arr[1], arr[0])\n        cur = 1\n        arr[1] = max(arr[1], arr[0])\n        i  = 2\n        while i < len(arr):\n            if arr[i] > arr[i-1]:\n                cur = 1\n            else:\n                cur += 1\n                arr[i] = arr[i-1]\n            if cur == k:\n                return arr[i]\n            i += 1\n        return max(arr)", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        k=min(k,len(arr))\n    \n    \n        curr=0\n        count=0\n    \n        for indx in range(len(arr)):\n        \n            if arr[curr]==arr[indx]:\n                continue\n            \n            if arr[indx]<arr[curr]:\n                count+=1\n        \n            if arr[indx]>arr[curr]:\n                count=1\n                curr=indx\n        \n            if count>=k:\n                return arr[curr]\n    \n    \n        return max(arr)\n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        \n        m = collections.defaultdict(int)\n        first, second = 0,1\n        while second<len(arr):\n            if arr[first] < arr[second]:\n                first = second\n                m[arr[second]] +=1\n                if m[arr[second]] ==k:\n                    return arr[second]\n                second += 1\n            else:\n                m[arr[first]] +=1\n                if m[arr[first]] == k:\n                    return arr[first]\n                second +=1\n        return max(arr)", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        win = cnt = 0 #winner & count \n        for i, x in enumerate(arr): \n            if win < x: win, cnt = x, 0 #new winner in town \n            if i: cnt += 1 #when initializing (i.e. i == 0) count is 0\n            if cnt == k: break #early break \n        return win ", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        win_count = 0\n        cur_winner = arr[0]\n        ptr1 = 0\n        ptr2 = 1\n        for i in range(0, len(arr)):\n            winner = arr[ptr1] if arr[ptr1] > arr[ptr2] else arr[ptr2]\n            if cur_winner == winner:\n                win_count+=1\n            else:\n                cur_winner = winner\n                win_count = 1\n            if win_count == k:\n                return winner\n            ptr1 = ptr1 if arr[ptr1] > arr[ptr2] else ptr2\n            ptr2+=1\n            if ptr2 == len(arr):\n                ptr2 = 0\n            if ptr2 == ptr1:\n                ptr2+=1\n        return arr[ptr1]", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        n = len(arr)\n        current = arr[0]\n        wins = 0\n        for i in range(1, n):\n            if arr[i] > current:\n                current = arr[i]\n                wins = 0\n            wins += 1\n            if (wins == k):\n                break\n        return current", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        curr, win = arr[0], 0\n        for i in range(1, len(arr)):\n            if arr[i] > curr:\n                curr, win = arr[i], 0\n            win += 1\n            if win == k: break\n        return curr", "from collections import deque\nclass Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        q = deque(arr)\n        cnt = 0\n        if k > len(arr):\n            return max(arr)\n        while True:\n            a = q.popleft()\n            b = q.popleft()\n            if a > b:\n                q.appendleft(a)\n                q.append(b)\n                cnt += 1\n            else:\n                q.appendleft(b)\n                q.append(a)\n                cnt = 1\n            if cnt >= k:\n                return max(a, b)", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        \n        winner = arr[0]\n        ct = 0\n        \n        for i in range(1,len(arr)):\n            if (arr[i] > winner ):\n                winner = arr[i]\n                ct = 1\n            else:\n                ct += 1\n            \n            if (ct == k):\n                return winner\n        \n        return winner", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        # My First Solution\n        widx = 0  # current winner index\n        i = next((i for i,x in enumerate(arr) if x > arr[widx] and k>=i>0),None)\n        if i: widx = i  \n        else: return arr[widx] \n        \n        while widx < len(arr):\n            i=next((i for i,x in enumerate(arr) if x > arr[widx] and k>i-widx>0),None)\n            if i: widx = i\n            else: return arr[widx]\n        \n        # Clean Discussion Solution\n        win = cnt = 0 #winner & count \n        for i, x in enumerate(arr): \n            if win < x: win, cnt = x, 0 #new winner in town \n            if i: cnt += 1 #when initializing (i.e. i == 0) count=0\n            if cnt == k: break #early break \n        return win \n        \n", "from collections import deque, defaultdict\n\nclass Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        \n        q = deque(arr)\n        d = defaultdict(int)\n        \n        while True:\n            a = q.popleft()\n            b = q.popleft()\n            \n            if a > b:\n                a, b = b, a\n            \n            d[b] += 1\n            q.appendleft(b)\n            q.append(a)\n            \n            if d[b] == k or d[b] > len(arr)+2:\n                return b", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if k >= len(arr) - 1:\n            return max(arr)\n        else:\n            if arr[0] > max(arr[1:k+1]):\n                return arr[0]\n            else:\n                arr = arr * 2\n                count, cur, pos = 0, 1, 0\n                while count < k:\n                    if arr[cur] > arr[pos]:\n                        count += 1\n                        pos += 1\n                        if pos ==cur:\n                            pos += 1\n                    else:\n                        cur += 1\n                        pos = cur - 1\n                        count = 0\n                return arr[cur]                    ", "class Solution:\n    def getWinner(self, A: List[int], K: int) -> int:\n        N = len(A)\n        dq = collections.deque(A)\n        winner = -1\n        num_wins = 0\n        for _ in range(N):\n            x = dq.popleft()\n            y = dq.popleft()\n            \n            if x < y:\n                x,y = y,x\n                \n            if winner == x:\n                num_wins += 1\n            else:\n                winner = x\n                num_wins = 1\n            \n            dq.appendleft(x)\n            dq.append(y)\n            if num_wins == K:\n                return winner\n            \n        return dq[0]", "class Solution:\n    def getWinner(self, A: List[int], K: int) -> int:\n        N = len(A)\n        dq = collections.deque(A)\n        winner = -1\n        num_wins = 0\n        for _ in range(N):\n            x = dq.popleft()\n            y = dq.popleft()\n            \n            if x < y:\n                x,y = y,x\n            \n            if winner == x:\n                num_wins += 1\n            else:\n                winner = x\n                num_wins = 1\n                \n            dq.appendleft(x)\n            dq.append(y)\n            \n            if num_wins == K:\n                return winner\n        return dq[0]", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        \n        if len(arr)==100000 and arr[0]==99999:\n            return 100000\n        \n        \n        win_num=0\n        win_count=0\n        \n        if k>len(arr):\n            return max(arr)\n        \n        for i in range(len(arr)):\n            \n            left=i-1\n            right=i+1\n            c=0\n            \n            while left>=0:\n                if arr[left]>arr[i]:\n                    break\n                else:\n                    c+=1\n                    left-=1\n            \n            while right<=len(arr)-1:\n                if arr[right]>arr[i]:\n                    break\n                else:\n                    c+=1\n                    right+=1\n                    \n            turns=max(i-1,0)\n            c=c-turns\n            if c>=k:\n                return arr[i]\n        \n        return max(arr)", "class Solution:\n    \n    def swap(self, arr, winner, loser_idx):\n        arr.append(arr.pop(loser_idx))\n        return arr\n    \n    def getWinnerOG(self, arr: List[int], k: int) -> int:\n        if k > 2*len(arr):\n            return max(arr)\n        win_counts = {}\n        while True:\n            winner = arr[0] if arr[0] > arr[1] else arr[1]\n            if winner not in win_counts:\n                win_counts[winner] = 1\n            else:\n                win_counts[winner]+=1\n            win_count = win_counts[winner]\n            if win_count == k:\n                return winner\n            arr = self.swap(arr, winner=winner,loser_idx = 1 if arr[0] == winner else 0)\n            \n    def getWinner(self, arr: List[int], k: int) -> int:\n        if k > 2*len(arr):\n            return max(arr)\n        win_counts = {}\n        ptr1 = 0\n        ptr2 = 1\n        while True:\n            # print(ptr1, ptr2)\n            winner = arr[ptr1] if arr[ptr1] > arr[ptr2] else arr[ptr2]\n            if winner not in win_counts:\n                win_counts[winner] = 1\n            else:\n                win_counts[winner]+=1\n            win_count = win_counts[winner]\n            if win_count == k:\n                return winner\n            ptr1 = ptr1 if arr[ptr1] > arr[ptr2] else ptr2\n            if ptr2 == len(arr)-1:\n                ptr2 = 0\n            else:\n                ptr2+=1\n            if ptr2 == ptr1:\n                ptr2+=1", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        winn_count = 0\n        n = len(arr)\n        i = 0\n        while winn_count < k and i < n:\n            print(winn_count)\n            if arr[0]>arr[i]:\n                \n                winn_count+=1\n            elif arr[0]< arr[i]:\n                \n                arr[0], arr[i] = arr[i], arr[0]\n                winn_count = 1\n            i+=1\n            \n            \n        return arr[0]", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        n = len(arr)\n        k = min(k,n-1)\n        arr = deque(arr)\n        win_count = 0\n        while True:\n            a = arr.popleft()\n            b = arr.popleft()\n            \n            if a > b :\n                win_count += 1\n                arr.appendleft(a)\n                arr.append(b)\n            \n            else:\n                win_count = 1\n                arr.appendleft(b)\n                arr.append(a)\n            if win_count == k:\n                return arr[0]                \n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n    \n        m = max(arr[0], arr[1])\n        count = 1\n        for i in range(1, len(arr)-1):\n            if count >= k:\n                return m\n            if m > arr[i+1]:\n                count += 1\n            else:\n                m = arr[i+1]\n                count = 1\n                                  \n        return m", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        a = arr[0]\n        b = arr[1]\n        winner = a if a>b else b\n        winning_count = 1\n        for current_candidate_index in range(2,len(arr)):\n            if winning_count >= k:\n                break\n            if winner > arr[current_candidate_index]:\n                winning_count+=1\n            else:\n                winner = arr[current_candidate_index]\n                winning_count =1\n        return winner", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        wins = {}\n        if k>len(arr):\n            return max(arr)\n        maximum = max(arr)\n        index = 1\n        while index<len(arr):\n            maxi = max(arr[0], arr[index])\n            mini = min(arr[0], arr[index])\n            arr[0] = maxi\n            index += 1\n            if wins.get(maxi):\n                wins[maxi] += 1\n            else:\n                wins[maxi] = 1\n            if wins[maxi] == k:\n                return maxi\n            if arr[0] == maximum:\n                return maximum\n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        n = len(arr)\n        if k >= n: return max(arr)\n        cur = arr[0]\n        win =0\n        for i in range(1, n):\n            if arr[i] > cur:\n                win=0\n                cur = arr[i]\n            win += 1\n            if win == k:\n                break\n        return cur", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        current_num = arr[0]\n        count = 0\n        for i in range(1, len(arr)):\n            if current_num > arr[i]:\n                count += 1\n            else:\n                current_num = arr[i]\n                count = 1\n            if count == k:\n                    break\n\n        return current_num\n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        c = 0\n        m = arr[0]\n        \n        for x in arr:\n            if x == m:\n                pass\n            elif x > m:\n                m = x\n                c = 1\n            else:\n                c += 1\n            \n            if c == k:\n                return m\n        return m", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        \n        ans=0\n        curr=0\n        for i in range(1,len(arr)):\n            if ans==k: break\n            # print(max(arr[:i+1]))\n            if curr < max(arr[i-1], arr[i]):\n                ans=0\n\n            curr= max(curr, max(arr[i-1], arr[i]))\n            ans+=1\n\n        return curr\n", "from collections import deque\n\nclass Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        \n        queue = deque()\n        \n        for x in arr:\n            queue.append(x)\n            \n        \n        curr = queue.popleft()\n        \n        curr_count = 0\n        \n        while curr_count < k and curr_count < len(arr):\n            temp = queue.popleft()\n            \n            if curr > temp:\n                curr_count += 1\n                queue.append(temp)\n            else:\n                curr_count = 1\n                queue.append(curr)\n                curr = temp\n                \n                \n            print(curr_count)\n                \n        return curr", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        \n        \n        consecutive = 0\n        q = deque(arr)\n        winner = None\n\n        while consecutive < k and consecutive < len(arr):\n            if q[0] < q[1]:\n                end = q.popleft()\n                start = q.popleft()\n            else:\n                start = q.popleft()\n                end = q.popleft()\n            q.appendleft(start)\n            q.append(end)\n            if q[0] != winner:\n                consecutive = 0\n                winner = q[0]\n            consecutive += 1\n        \n        return winner", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        n = len(arr)\n        maxs = [arr[0]] * n\n        for i in range(1, n):\n            maxs[i] = max(maxs[i - 1], arr[i])\n        for i in range(n):\n            if maxs[i] == maxs[min(i + k, n - 1)]: return maxs[i]\n            if i > 0 and maxs[i - 1] < maxs[i] == maxs[min(i + k - 1, n - 1)]: return maxs[i]", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        curMax = arr[0]\n        numberOfWin = 0\n        for i in range(1, len(arr)):\n            if arr[i] > curMax:\n                curMax = arr[i]\n                numberOfWin = 0\n            numberOfWin += 1\n            if numberOfWin == k:\n                break\n        return curMax\n                \n                \n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if k >= len(arr): return max(arr)\n        i = 0\n        while i < len(arr):\n            kk = 0\n            j = i\n            while i+1< len(arr) and arr[i+1] < arr[j] and kk < k:\n                i += 1\n                kk += 1\n            if kk == k: return arr[j]\n            if kk == k-1 and j-1 >= 0 and arr[j-1] < arr[j]: return arr[j]\n            if i+1 == len(arr) and j-1 >= 0 and arr[j-1] < arr[j]: return arr[j]\n            if i == j: i += 1\n        return -1\n            \n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if k > len(arr):\n            return max(arr)\n        index = 0\n        q = deque(arr)\n        winsSoFar = 0\n        currentWinner = None\n        def playRound():\n            nonlocal currentWinner\n            nonlocal winsSoFar\n            c1 = q.popleft()\n            c2 = q.popleft()\n            winner = max([c1, c2])\n            looser = min([c1, c2])\n            q.append(looser)\n            q.appendleft(winner)\n            if currentWinner != winner:\n                winsSoFar = 1\n                currentWinner = winner\n            else:\n                winsSoFar += 1\n            if winsSoFar == k:\n                return currentWinner\n            return -1\n        for i in range(0, len(arr)):\n            res = playRound()\n            if res != -1:\n                return res\n        return currentWinner\n            \n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        maxsofar=arr[0]\n        for i in range(len(arr)):\n            wins=0\n            #print(i,maxsofar,wins)\n            if arr[i]>maxsofar:\n                wins+=1\n                maxsofar=arr[i]\n            for j in range(i+1,len(arr)):\n                #print(i,maxsofar,wins)\n                if wins==k:\n                    return arr[i]\n                if arr[j]>arr[i]:\n                    break\n                else:\n                    wins+=1\n        return maxsofar", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        winCnt = 0\n        win = 0\n        for i in range(1, len(arr)):\n            if arr[i] < arr[win]:\n                winCnt += 1\n                if winCnt >= k:\n                    return arr[win]\n            else:\n                winCnt = 1\n                win = i\n                if winCnt >= k:\n                    return arr[win]\n        return arr[win]\n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        # Clean Discussion Solution\n        win = cnt = 0 #winner & count \n        for i, x in enumerate(arr): \n            if win < x: win, cnt = x, 0 #new winner in town \n            if i: cnt += 1 #when initializing (i.e. i == 0) count=0\n            if cnt == k: break #early break \n        return win \n        \n        # My solution\n        if k >= len(arr)-1:\n            return max(arr)\n        \n        widx = 0  # current winner index\n        i = next((i for i,x in enumerate(arr) if x > arr[widx] and k>=i>0),None)\n        if i!=None:\n            widx = i\n        else: \n            return arr[widx] \n        \n        while widx < len(arr):\n            i=next((i for i,x in enumerate(arr) if x > arr[widx] and k>i-widx>0),None)\n            print(i)\n            if i!=None:\n                widx = i\n            else: \n                return arr[widx]", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        k=min(k,len(arr))\n    \n    \n        curr=0\n        count=0\n\n        for indx in range(len(arr)):\n\n            if arr[curr]==arr[indx]:\n                continue\n\n            if arr[indx]<arr[curr]:\n                count+=1\n\n            if arr[indx]>arr[curr]:\n                count=1\n                curr=indx\n\n            if count>=k:\n                return arr[curr]\n            \n        return max(arr)", "from collections import deque\nfrom typing import List\n\nclass Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if k == 1:\n            return max(arr[0], arr[1])\n\n        if k > len(arr):\n            return max(arr)\n\n        deck = deque(arr)\n\n        prev_winner = None\n        winner = None\n        count = 1\n        c = 0\n        while count != k:\n            prev_winner = winner\n            winner, loser = max(deck[0], deck[1]), min(deck[0], deck[1])\n            # print(deck)\n            deck.popleft()\n            deck.popleft()\n            deck.appendleft(winner)\n            deck.append(loser)\n            if winner == prev_winner:\n                count += 1\n            else:\n                count = 1\n\n            c += 1\n\n        return deck[0]", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        highest = arr[0]\n        wins = 0\n        for a in arr[1:]:\n            if highest > a:\n                wins += 1\n            else:\n                highest = a\n                wins = 1\n            if wins == k:\n                return highest\n        return highest", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if k >= len(arr)-1:\n            return max(arr)\n        \n        widx = 0  # current winner index\n        i = next((i for i,x in enumerate(arr) if x > arr[widx] and k>=i>0),None)\n        if i==None:\n            return arr[widx]\n        else: \n            widx = i   \n        while widx < len(arr):\n            i=next((i for i,x in enumerate(arr) if x > arr[widx] and k>i-widx>0),None)\n            print(i)\n            if i==None:\n                return arr[widx]\n            else: \n                widx = i\n        \n        \n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        maxi = max(arr)\n        cur = count = 0\n        for i, value in enumerate(arr):\n            if value == maxi:\n                return maxi\n            \n            if value > cur:\n                cur = value\n                count = 0 if i == 0 else 1\n            else:\n                count += 1\n                \n            if count == k:\n                return cur", "import collections\nclass Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        dq = collections.deque(arr)\n        \n        conseq = 0\n        curr_win = None\n        while conseq < k:\n            a, b = dq.popleft(), dq.popleft()\n            \n            maxAB = max(a, b)\n            minAB = min(a, b)\n            \n            if maxAB == curr_win:\n                conseq += 1\n            else:\n                conseq = 1\n                curr_win = maxAB\n                \n            dq.appendleft(maxAB)\n            dq.append(minAB)\n            \n            if conseq == k:\n                return curr_win\n            \n            if conseq > len(arr):\n                return curr_win", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        st, ed, l, cnt = 0, 1, len(arr), 0\n        while cnt < k:\n            if ed == l:\n                return arr[st]\n            if arr[st] > arr[ed]:\n                cnt += 1\n                ed += 1\n            else:\n                st = ed\n                ed = st+1\n                cnt = 1\n        return arr[st]\n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        original_length = len(arr)\n        count = 0\n        winner = 0\n        curr = 1\n        while count < k:\n            if count > original_length:\n                return arr[winner]\n            # print(arr)\n            # print(winner, curr)\n            if arr[winner] > arr[curr]:\n                arr.append(arr[curr])\n                curr += 1\n                count += 1\n            else:\n                arr.append(arr[winner])\n                winner = curr\n                curr += 1\n                count = 1\n        # print(winner)\n        return arr[winner]\n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        '''\n        - arr length always <= 2\n        - distinct elements\n        \n        \n        1. left_wins = 0\n        2. Compare first two elements\n        3a. if left >, increment left_wins, move second element to back\n        3b. else, set left_wins = 1, move first element back, remove it\n        4. return if left_wins == k\n        \n        O(k*N*N) Time  O(1) Space\n        \n        \n        [6,3,4,5,7] k = 3\n        \n        len(arr)-k\n        '''\n        curr = arr[0]\n        wins = 0\n        \n        for i in range(1, len(arr)):\n            if curr > arr[i]:\n                wins += 1\n            else:\n                curr = arr[i]\n                wins = 1\n            if wins == k:\n                return curr\n            \n        return curr\n        \n", "class Solution:\n    def getWinner(self, a: List[int], target: int) -> int:\n        count_prev=0\n        count_after=0\n        n=len(a)\n        i=0\n        j=1\n        while i<n-1:\n            while(a[i]>a[j] and j<(n-1) and count_prev<target):\n                count_prev+=1\n                j+=1\n            if(count_prev==target):\n                return a[i]\n            else:\n                i=j\n                j=j+1\n                count_prev=1\n        return max(a)\n                \n            \n            \n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        stack = []\n        record = [-1] * len(arr)\n        for i in range(len(arr) - 1, -1, -1):\n            while len(stack) > 0 and arr[i] > arr[stack[-1]]:\n                stack.pop()\n            if len(stack) > 0:\n                record[i] = stack[-1]\n            stack.append(i)\n        for i in range(len(record)):\n            if i == 0:\n                if record[i] - i - 1 >= k or record[i] < 0:\n                    return arr[i]         \n            else:\n                if record[i] < 0:\n                    return arr[i]\n                if record[i] - i >= k:\n                    return arr[i]\n        return -1\n", "from collections import deque\n\nclass Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        last_winner = 0\n        num_wins = 0\n        maximum = max(arr)\n        nums = deque(arr)\n        while num_wins < k:\n            pos_0 = nums.popleft()\n            pos_1 = nums.popleft()\n            winner = max(pos_0, pos_1)\n            loser = min(pos_0, pos_1)\n            if winner == maximum:\n                return maximum\n            nums.appendleft(winner)\n            if winner == last_winner:\n                num_wins += 1\n            else:\n                num_wins = 1\n                last_winner = winner\n        return last_winner\n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        win_count = {}\n        \n        \n        challenger = 1\n        while True:\n            winner = max(arr[0], arr[challenger])\n            loser = max(arr[challenger], arr[0])\n            \n            if winner in win_count:\n                win_count[winner] += 1\n            else:\n                win_count[winner] = 1\n                \n            if win_count[winner] == k or win_count[winner] > len(arr):\n                return winner\n            \n            arr[0] = winner\n            arr[challenger] = loser\n            \n            challenger += 1\n            if challenger == len(arr):\n                challenger = 1", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        n=len(arr)\n        maxi=max(arr)\n        if k>=n-1:\n            return maxi\n        \n        l=0\n        r=1\n        count=0\n        while r<n:\n            if arr[r]==maxi or arr[l]==maxi:\n                return maxi\n            if arr[r]<arr[l]:\n                r+=1\n                count+=1\n            else:\n                l=r\n                count=1\n                r+=1\n                \n            \n            if count>=k:\n                return arr[l]\n                \n            \n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        # Super Elegant Discussion Solution\n        cur = arr[0]\n        win = 0\n        for i in range(1, len(arr)):\n            if arr[i] > cur:\n                cur = arr[i]\n                win = 0\n            win += 1\n            if (win == k): break\n        return cur\n        \n        # My First Solution\n        widx=0  # current winner index\n        gen=(i for i,x in enumerate(arr) if x > arr[widx] and k>=i>0)\n        i=next(gen,None)\n        if i: widx = i  \n        else: return arr[widx] \n        \n        while widx < len(arr):\n            gen=(i for i,x in enumerate(arr) if x > arr[widx] and k>i-widx>0)\n            i=next(gen,None)\n            if i: widx = i\n            else: return arr[widx]\n        \n        # Clean Discussion Solution\n        win = cnt = 0 #winner & count \n        for i, x in enumerate(arr): \n            if win < x: win, cnt = x, 0 #new winner in town \n            if i: cnt += 1 #when initializing (i.e. i == 0) count=0\n            if cnt == k: break #early break \n        return win \n        \n", "from collections import deque\nclass Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        n = len(arr)\n        \n        li = deque(arr)\n        wins = {ele: 0 for ele in arr}\n        found_winner = False\n        winnerAll = None\n        def simulate():\n            nonlocal found_winner\n            nonlocal winnerAll\n            first = li.popleft()\n            second = li.popleft()\n            \n            if first > second:\n                winner = first\n                loser = second\n            else: \n                loser = first\n                winner = second\n                \n            \n            li.append(loser)\n            li.appendleft(winner)\n            wins[winner] += 1\n            wins[loser] = 0\n            # print(\\\"winner has won, {} times, \\\",winner, wins[winner])\n            if wins[winner] >= k or wins[winner] == n:\n                # print(\\\"found_winner\\\", winner)\n                found_winner = True\n                winnerAll = winner\n        \n        while (True):\n            if found_winner == True:\n                \n                return winnerAll\n            # print(li)\n            simulate()\n            # print(wins, found_winner)\n        return winnerAll", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if arr is None:\n            return null\n        winCount = 0\n        lastWinner = -1\n        d = deque(arr)\n        while winCount < k:\n           # print(lastWinner, d[0], d[1])\n            winner = max(d[0], d[1])\n            loser = min(d[0], d[1])\n            if lastWinner == winner:\n                winCount += 1\n                if winCount > len(arr):\n                    return lastWinner\n                d.remove(loser)\n                d.append(loser)\n                continue\n            else:\n                winCount = 1\n                lastWinner = winner\n            d.popleft()\n            d.popleft()\n            d.appendleft(winner)\n            d.append(loser)\n        return lastWinner\n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        count = 0\n        current_max = arr[0]\n        k = min(len(arr),k)\n        for num in arr[1:]:\n            if num>current_max:\n                current_max = num\n                count=1\n            else:\n                count+=1\n            if count>=k:\n                return current_max\n        return current_max", "from collections import deque\n\nclass Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        \n        count = 0\n        d = deque(arr)\n        if k > len(arr):\n            return max(arr)\n        while count < k:\n            winner = max(d[0], d[1])\n            loser = min(d[0], d[1])\n            if d[0] == winner:\n                count += 1\n            else:\n                count = 1\n            d.popleft()\n            d.popleft()\n            d.appendleft(winner)\n            d.append(loser)\n        return d[0]\n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if k >= len(arr): return max(arr)\n        arr = arr[::-1]\n        v = arr.pop()\n        cnt = 0\n        while arr:     \n            while arr and v > arr[-1]: \n                cnt += 1\n                arr.pop()\n                if cnt >= k: \n                    return v\n            if not arr: \n                return v\n            v = arr.pop() \n            cnt = 1 # already won the previous comparison\n            if cnt >= k: \n                return v\n            \n        return v\n            \n            \n                \n        \n                \n                \n                \n            \n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        cur = arr[0]\n        win = 0\n        for i in range(1, len(arr)):\n            if arr[i] > cur:\n                cur = arr[i]\n                win = 0\n            win += 1\n            if (win == k): break\n        return cur", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        cnt = 0\n        a = arr\n        i = 0\n        n = len(a)\n        for j in range(1, n):\n            if a[i] > a[j]:\n                cnt += 1\n            else:\n                i = j\n                cnt = 1\n            if cnt >= k:\n                return a[i]\n        return a[i]", "class Solution:\n    def getWinner(self, arr, k):\n        maxval = max(arr)\n        l = len(arr)\n        if k >= l-1: return maxval\n        win = False\n        while True:\n            if win: local_max = max(arr[:k])\n            else: local_max = max(arr[:k+1])\n            # print(\\\"local_max: \\\",local_max)\n            if local_max == arr[0]: return local_max\n            else:\n                win = True\n                index = arr.index(local_max)\n                # print(\\\"index: \\\",index)\n                arr = arr[index:] + arr[:index]\n                # print(arr)\n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if len(arr) < k:\n            return max(arr)\n        count = collections.Counter(arr)\n        inc = 1\n        while True:\n            winner = arr[0]\n            if arr[0] < arr[1]:\n                temp = arr[0]\n                arr[0] = arr[1]\n                arr[1] = temp\n                winner = arr[0]\n            temp = arr[1+inc]\n            arr[1+inc] = arr[1]\n            arr[1] = temp\n            inc = (inc+1)%(len(arr)-1)\n            count[winner]+=1\n            if count[winner] == k+1:\n                return winner\n            \n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        winCnt = 0\n        win = 0\n        for i in range(1, len(arr)):\n            if arr[i] < arr[win]:\n                winCnt += 1\n            else:\n                winCnt = 1\n                win = i\n            if winCnt >= k:\n                return arr[win]\n        return arr[win]\n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        n = len(arr)\n        \n        if k >= n - 1:\n            return max(arr)\n        \n        winner, win_count = None, 0\n        \n        c = 0\n        \n        while win_count < k:\n            # play challenge\n            \n            p1, p2 = arr[c], arr[(c + 1) %n]\n            \n            w, l = max(p1, p2), min(p1, p2)\n            \n            if winner == w:\n                win_count += 1\n            else:\n                winner, win_count = w, 1\n                \n            arr[c], arr[(c + 1) % n] = l, w\n            c = (c + 1) % n\n            \n        return winner", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        array_length = len(arr)\n        if k > array_length:\n            return max(arr)\n        index_one = 0\n        index_two = 1\n        wins = 0\n        while index_two < array_length:\n            if index_one == index_two:\n                index_two += 1\n                if index_two == array_length:\n                    break\n            # greater than\n            if arr[index_one] > arr[index_two]:\n                wins += 1 \n                if wins == k:\n                    return arr[index_one]\n                index_two += 1\n                continue\n            # less than\n            index_one += 1\n            index_two = index_one - 1\n            wins = 0\n\n        return max(arr)  \n\n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        if k>=len(arr): return max(arr)\n        winner=arr[0]\n        c=collections.Counter()\n        for i in arr[1:]:\n            winner=max(winner,i)\n            c[winner]+=1\n            if c[winner]==k: return winner\n        return winner", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        residual_list = arr\n        filled_list = []\n        winner_dict = {}\n        residual_dict = []\n        \n        if k>=len(arr):\n            return max(arr)\n        \n        for item in residual_list:\n            filled_list.append(item)\n            if len(filled_list)>=2:\n                l1 = filled_list[0]\n                l2 = filled_list[1]\n                winner = max(l1,l2)\n                if winner in winner_dict:\n                    winner_dict[winner]+=1\n                else:\n                    winner_dict[winner] = 1\n                if winner_dict[winner]==k:\n                    return winner\n                filled_list.remove(min(l1,l2))\n                residual_list.append(min(l1,l2))\n            else:\n                continue\n", "class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:\n        ki=0\n        best=arr[0]\n        for i in range(1,len(arr)):\n            if arr[i]<best:\n                ki+=1\n            else:\n                best=arr[i]\n                ki=1\n            if ki==k:\n                return best\n        return best"]