["from math import *\n\ndef count(n):\n    return ceil(lgamma(n+1)/log(10))", "from math import log10, floor, pi, e\n\ndef count(n):\n    if n<0: return 0\n    if n<=1: return 1\n    x = n*log10(n/e)+log10(2*pi*n)/2\n    return floor(x)+1\n", "from math import ceil, log10, pi, e\n\ndef count(n):\n    return ceil(log10(2*pi*n)/2+n*(log10(n/e)))", "from math import floor, log, pi\n\ndef count(n):\n    return floor( ((n+0.5)*log(n) - n + 0.5*log(2*pi))/log(10) ) + 1", "from math import *\n\ndef count(n):\n    return int(ceil(log10(2 * pi * n) / 2 + n * log10(n / e)))", "## https://www.johndcook.com/blog/2015/10/06/number-of-digits-in-n/\nfrom scipy.special import gammaln\nfrom math import log, floor\n\ndef count(n):\n    return floor( gammaln(n+1)/log(10.0) ) + 1", "from math import ceil, log, pi, e\ncount = lambda n: int(ceil(log(2*pi*n, 10)/2+n*log(n/e, 10)))", "import math\n\ndef count(n):\n    if n == 0 or n <= 1:\n        return 1\n\n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) / 2))\n    \n    return math.floor(x) + 1", "from math import floor, log10 \n  \ndef count(n):\n    n = n+1\n    return floor(sum(map(log10, range(2, n)))) +1"]