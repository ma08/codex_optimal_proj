["n = int(input())\npos,tree,ans,sz = list(map(int,input().split())) if n > 1 else [],[],[],[]\nfor i in range(n):\n  tree.append([])\n  ans.append(0.0)\n  sz.append(0)\n\nfor i in range(n-1):\n  tree[pos[i]-1].append(i+1)\n\nfor i in range(n)[::-1]:\n  sz[i] = 1\n  for to in tree[i]:\n    sz[i] += sz[to]\n\nfor i in range(n):\n  for to in tree[i]:\n    ans[to] = ans[i] + 1 + (sz[i]-1-sz[to]) * 0.5\n\nst = lambda i: str(i+1)\nprint(' '.join(list(map(st,ans))))", "n = int(input())\npos,tree,ans,sz = list(map(int,input().split())) if n > 1 else [],[],[],[]\nfor i in range(n):\n  tree.append([])\n  ans.append(0.0)\n  sz.append(0)\n\nfor i in range(n-1):\n  tree[pos[i]-1].append(i+1)\n\nfor i in range(n)[::-1]:\n  sz[i] = 1\n  for to in tree[i]:\n    sz[i] += sz[to]\n\nfor i in range(n):\n  for to in tree[i]:\n    ans[to] = ans[i] + 1 + (sz[i]-1-sz[to]) * 0.5\n\nst = lambda i: str(i+1)\nprint(' '.join(list(map(st,ans))))\n", "n = int(input())\npos,tree,ans,sz = list(map(int,input().split())) if n > 1 else [],[],[],[]\nfor i in range(n):\n  tree.append([])\n  ans.append(0.0)\n  sz.append(0)\nfor i in range(n-1):\n  tree[pos[i]-1].append(i+1)\nfor i in range(n)[::-1]:\n  sz[i] = 1\n  for to in tree[i]:\n    sz[i] += sz[to]\nfor i in range(n):\n  for to in tree[i]:\n    ans[to] = ans[i] + 1 + (sz[i]-1-sz[to]) * 0.5\nst = lambda i: str(i+1)\nprint(' '.join(list(map(st,ans))))\n", "n = int(input())\npos, tree, ans, sz = list(map(int,input().split())) if n > 1 else [],[],[],[]\nfor i in range(n):\n  tree.append([])\n  ans.append(0.0)\n  sz.append(0)\n\nfor i in range(n - 1):\n  tree[pos[i] - 1].append(i + 1)\n\nfor i in range(n)[::-1]:\n  sz[i] = 1\n  for to in tree[i]:\n    sz[i] += sz[to]\n\nfor i in range(n):\n  for to in tree[i]:\n    ans[to] = ans[i] + 1 + (sz[i] - 1 - sz[to]) * 0.5\n\nst = lambda i: str(i + 1)\nprint(' '.join(list(map(st, ans))))", "n = int(input())\npos, tree, ans, sz = list(map(int,input().split())) if n > 1 else [],[],[],[]\nfor i in range(n):\n  tree.append([])\n  ans.append(0.0)\n  sz.append(0)\n\nfor i in range(n - 1):\n  tree[pos[i] - 1].append(i + 1)\n\nfor i in range(n)[::-1]:\n  sz[i] = 1\n  for to in tree[i]:\n    sz[i] += sz[to]\n\nfor i in range(n):\n  for to in tree[i]:\n    ans[to] = ans[i] + 1 + (sz[i] - 1 - sz[to]) * 0.5\n\nst = lambda i: str(i + 1)\nprint(' '.join(list(map(st, ans))))\n\n\n\n# Made By Mostafa_Khaled\n", "import sys\ninput = sys.stdin.readline\n\nn = int(input())\npar = [-1] + [int(i) - 1 for i in input().split()]\nchild = [[] for i in range(n)]\nfor i in range(1, n):\n    child[par[i]].append(i)\n\nsize = [1] * n\ndef dfs():\n    stack = [0]\n    visit = [False] * n\n    while stack:\n        u = stack[-1]\n        if not visit[u]:\n            for v in child[u]:\n                stack.append(v)\n            visit[u] = True\n        else:\n            for v in child[u]:\n                size[u] += size[v]\n            stack.pop()\n\nans = [0] * n\nans[0] = 1\ndef dfs2():\n    stack = [0]\n    while stack:\n        u = stack.pop()\n        sm = 0\n        for v in child[u]:\n            sm += size[v]\n        for v in child[u]:\n            ans[v] = (sm - size[v]) * 0.5 + 1 + ans[u]\n            stack.append(v)\n\ndfs()\ndfs2()\nprint(*ans)\n\n\n", "n = int(input())\nif n ==1:\n    print(1)\n    return\nl = list(map(int,input().split()))\nw = [[]for i in range(n)]\nsz = [1]*n\nfor i in range(n-1):\n    w[l[i]-1].append(i+1)\nfor i in range(n-1,-1,-1):\n    for j in range(len(w[i])):\n        sz[i]+=sz[w[i][j]]\nans = [0]*n\nfor i in range(n):\n    for j in range(len(w[i])):\n        ans[w[i][j]] = ans[i]+1+(sz[i]-1-sz[w[i][j]])/2\nfor i in range(n):\n    print(ans[i]+1,end = \" \")", "n = int(input())\nif n ==1:\n    print(1)\n    return\nl = list(map(int,input().split()))\nw = [[]for i in range(n)]\nsz = [1]*n\nfor i in range(n-1):\n    w[l[i]-1].append(i+1)\nfor i in range(n-1,-1,-1):\n    for j in range(len(w[i])):\n        sz[i]+=sz[w[i][j]]\nans = [0]*n\nfor i in range(n):\n    for j in range(len(w[i])):\n        ans[w[i][j]] = ans[i]+1+(sz[i]-1-sz[w[i][j]])/2\nfor i in range(n):\n    print(ans[i]+1,end = \" \")"]