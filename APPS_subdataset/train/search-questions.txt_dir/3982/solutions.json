["def stat(strg):\n\n    def get_time(s):\n        '''Returns the time, in seconds, represented by s.'''\n        hh, mm, ss = [int(v) for v in s.split('|')]\n        return hh * 3600 + mm * 60 + ss\n    \n    def format_time(time):\n        '''Returns the given time as a string in the form \"hh|mm|ss\".'''\n        hh = time // 3600\n        mm = time // 60 % 60\n        ss = time % 60\n        return '{hh:02d}|{mm:02d}|{ss:02d}'.format(**locals())\n    \n    def get_range(times):\n        return times[-1] - times[0]\n    \n    def get_average(times):\n        return sum(times) // len(times)\n    \n    def get_median(times):\n        middle = len(times) >> 1\n        return (times[middle] if len(times) & 1 else\n                (times[middle - 1] + times[middle]) // 2)\n    \n    if strg == '':\n        return strg\n    times = [get_time(s) for s in strg.split(', ')]\n    times.sort()\n    rng = format_time(get_range(times))\n    avg = format_time(get_average(times))\n    mdn = format_time(get_median(times))\n    return 'Range: {rng} Average: {avg} Median: {mdn}'.format(**locals())", "from statistics import median, mean\n\ndef stat(s):\n    if not s: return ''\n\n    t = [itime(w) for w in s.split(',')]\n    return 'Range: {} Average: {} Median: {}'.format(stime(max(t) - min(t)), stime(int(mean(t))), stime(int(median(t))))\n\ndef itime(w):\n    return sum([int(c) * 60**i for i, c in enumerate(w.split('|')[::-1])])\n    \ndef stime(n):\n    return '{:02d}|{:02d}|{:02d}'.format(n // 3600, (n % 3600) // 60, n % 60)", "import numpy as np\nimport time\ndef stat(strg):\n    '''\n    Each part of the string is of the form: h|m|s\n    Input: 01|15|59, 1|47|6, 01|17|20, 1|32|34, 2|3|17\n    Output: Range: 00|47|18 Average: 01|35|15 Median: 01|32|34\n    '''\n    if strg == '':\n        return ''\n    racetimes = strg.split(',')\n    secondtimes = []\n    for t in racetimes:\n        h, m, s = t.split('|')\n        seconds = int(h) * 3600 + int(m) * 60 + int(s)\n        secondtimes.append(seconds)\n\n    avgs = np.mean(secondtimes)\n    ranges = max(secondtimes) - min(secondtimes)\n    medians = np.median(secondtimes)\n\n    avg = time.strftime('%H|%M|%S',time.gmtime(avgs))\n    ra = time.strftime('%H|%M|%S',time.gmtime(ranges))\n    med = time.strftime('%H|%M|%S',time.gmtime(medians))\n\n\n    return 'Range: {} Average: {} Median: {}'.format(ra,avg,med)\n", "from statistics import mean, median\n\ndef convert_ToInt(s):\n    v = s.split('|')\n    return sum(int(v[i]) * 60**(2-i) for i in range(3))\n\ndef convert_ToStr(n):\n    return \"{:0>2}|{:0>2}|{:0>2}\".format(*map(int, (n//3600, n%3600 // 60, n%60)))\n\ndef stat(strg):\n    if not strg: return \"\"\n    \n    data = list(map(convert_ToInt, strg.split(', ')))\n    return \"Range: {} Average: {} Median: {}\".format(*map(convert_ToStr, [max(data)-min(data), mean(data), median(data)]))", "from statistics import mean, median\n\ndef sec2time(s):\n    return \"%02d|%02d|%02d\" % ((s//3600) % 60, (s//60) % 60, s % 60)\n\ndef stat(strg):\n    if not strg: return \"\"\n    data = sorted([sum(int(val) * (60**(2-i)) for i, val in enumerate(t.split(\"|\")))  for t in strg.split(\", \")])\n    return \"Range: %s Average: %s Median: %s\" % (sec2time(data[-1] - data[0]), sec2time(int(mean(data))), sec2time(median(data)))", "from datetime import timedelta as d\nfrom statistics import mean, median\ndef stat(s):\n    if not s:return ''\n    li = [sum(int(j) * k for j, k in zip(i.split(\"|\"), [3600, 60, 1])) for i in s.split(\", \")]\n    A = lambda x: \"|\".join([i.zfill(2) for i in x.split(\":\")])[:8]\n    return f\"Range: {A(str(d(seconds=max(li) - min(li))))} Average: {A(str(d(seconds=mean(li))))} Median: {A(str(d(seconds=median(li))))}\"", "import re\nimport statistics as st\nP = re.compile('(\\d+)\\|(\\d+)\\|(\\d+)')\ndef s_to_h(time):\n    h, r = divmod(time, 3600)\n    m, s = divmod(r, 60)\n    return f'{str(int(h)).zfill(2)}|{str(int(m)).zfill(2)}|{str(int(s)).zfill(2)}'\n\ndef stat(strg):\n    t = P.findall(strg)\n    if not strg:\n        return ''\n    s = [int(h)*60*60+int(m)*60+int(sec) for h,m,sec in t]\n    range, mean, median = max(s)-min(s), st.mean(s), st.median(s)\n    return f'Range: {s_to_h(range)} Average: {s_to_h(mean)} Median: {s_to_h(median)}'   ", "import statistics\n\ndef count_sec(l):\n    return l[0]*3600+l[1]*60+l[2]\n\ndef t(s):\n    min,sec = divmod(s,60)\n    hour,min = divmod(min,60)\n    return \"|\".join([str(int(i)).zfill(2) for i in (hour,min,sec)])\n        \ndef stat(strg):\n    if strg == \"\": return \"\"\n    secs = [count_sec([int(f) for f in i.split(\"|\")]) for i in strg.split(\",\")]\n\n    h_range = t(max(secs) - min(secs))\n    avg = t(statistics.mean(secs))   \n    med = t(statistics.median(secs))\n    return f\"Range: {h_range} Average: {avg} Median: {med}\""]