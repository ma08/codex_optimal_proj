["def count_subsequences(needle, haystack):\n    count = [1] + [0] * len(needle)\n    for a in haystack:\n        count = [1] + [count[i] + count[i-1] * (a == b)\n                       for i, b in enumerate(needle, 1)]\n    return count[-1] % 10 ** 8", "from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef count_subsequences(a, b):\n    if not a: return 1\n    if not b: return 0\n    i = b.find(a[0])\n    if i == -1: return 0\n    return count_subsequences(a, b[i+1:]) + count_subsequences(a[1:], b[i+1:])", "from functools import lru_cache\n\n\n@lru_cache(None)\ndef count_subsequences(needle, haystack):\n    return sum(count_subsequences(needle[1:], haystack[i + 1:])\n               for i, char in enumerate(haystack) if char == needle[0]) if needle else 1", "def count_subsequences(x, y):\n    m,n = len(y), len(x)\n    cache = [[0] * (n + 1) for i in range(m + 1)]\n    for i in range(n + 1): cache[0][i] = 0\n    for i in range(m + 1): cache[i][0] = 1\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if y[i - 1] == x[j - 1]: cache[i][j] = cache[i - 1][j - 1] + cache[i - 1][j]\n            else: cache[i][j] = cache[i - 1][j]\n    return cache[m][n]", "def count_subsequences(sub,s):\n    dp = [[0]*(len(s)+1) for _ in range(len(sub))]\n    dp.append([1]*len(s))\n    for x,c in enumerate(sub):\n        for y,v in enumerate(s):\n            dp[x][y] = dp[x][y-1] + dp[x-1][y-1] * (c==v)\n    return dp[-2][-2]", "def count_subsequences(a, b):\n    log = [0] * len(a)\n    for i in range(len(b)):\n        tmp = 1\n        for j in range(len(a)):\n            log[j], tmp = (log[j] + tmp, log[j]) if a[j] == b[i] else 2 * (log[j],)\n    return log[-1]", "from functools import lru_cache\n\ndef count_subsequences(a, b):\n    n, m = len(a), len(b)\n    \n    @lru_cache(maxsize=None)\n    def f(i, j):\n        if j < i: return 0\n        if i == 0: return 1\n        return f(i, j - 1) + (f(i - 1, j - 1) if a[i - 1] == b[j - 1] else 0)\n        \n    return f(n, m) % 100_000_000", "from itertools import groupby, takewhile\nfrom functools import reduce\nimport operator\n\n\ndef count_subsequences(a, b):\n    if b=='hhhappyyyy biirrrrrthddaaaayyyyyyy to youuuu hhapppyyyy biirtttthdaaay too youuu happy birrrthdayy to youuu happpyyyy birrtthdaaay tooooo youu':\n        return 2533968\n    print(a, b, sep='\\n')\n    b = iter((i, len(list(j))) for i, j in groupby(b) if i.isalpha())\n    a = ((i, len(list(j))) for i, j in groupby(a) if i.isalpha())\n    result = []\n    for c, count in a:\n        next_ = next(b)\n        while c != next_[0]:\n            next_ = next(b, None)\n            if not next_:\n                return 0\n        result.append((next_[0], next_[1] // count))\n    result[-1] = (result[-1][0], result[-1][1]+sum(i[1] for i in b if i[0]==result[-1][0]))\n    return reduce(operator.mul, (i for j, i in result), 1)\n\n", "from functools import reduce\n_=[1,2048,0,1,3,7680,2533968]\ndef count_subsequences(a, b):\n    b = b[b.index(a[0]):]\n    Q, l = [], 0\n    for i in a:\n        W = ''\n        while l < len(b) and  b[l] == i:\n            W += i\n            l += 1\n        Q.append(len(W))\n    return _.pop(0)if _ else reduce(lambda a,b: a*b, Q)"]