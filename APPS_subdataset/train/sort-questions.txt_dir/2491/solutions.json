["class Solution:\n    def buddyStrings(self, A: str, B: str) -> bool:\n        if len(A)!=len(B):\n            return False\n        if len(A)<2:\n            return False\n        if A==B:\n            cnt = Counter(A)\n            return bool([v for v in cnt.values() if v>1])\n        diffs = []\n        for i, a in enumerate(A):\n            if a!=B[i]:\n                diffs.append(i)\n        if len(diffs) == 2:\n            i,j = diffs\n            return A[i]==B[j] and A[j]==B[i]\n        \n        return False", "class Solution:\n    def buddyStrings(self, A, B):\n        if len(A) != len(B) or set(A) != set(B): return False       \n        if A == B:\n            return len(A) - len(set(A)) >= 1\n        else:     \n            indices = []\n            counter = 0\n            for i in range(len(A)):\n                if A[i] != B[i]:\n                    counter += 1\n                    indices.append(i)       \n                if counter > 2:\n                    return False       \n            return A[indices[0]] == B[indices[1]] and A[indices[1]] == B[indices[0]]", "class Solution:\n    def buddyStrings(self, A: str, B: str) -> bool:\n        if len(A) != len(B):\n            return False\n        cand = []\n        for i in range(len(A)):\n            if A[i] != B[i]:\n                cand.append(i)\n        if len(cand) > 2:\n            return False\n        if len(cand) == 1:\n            return False\n        if len(cand) == 2:\n            i, j = cand\n            if A[i] == B[j] and B[i] == A[j]:\n                return True\n            else:\n                return False\n        if len(cand) == 0:\n            if len(set(list(A))) < len(A):\n                return True\n            else:\n                return False\n                \n", "class Solution:\n    def buddyStrings(self, A: str, B: str) -> bool:\n        if len(A) != len(B):\n            return False\n        if A == B:\n            seen = set()\n            for a in A:\n                if a in seen:\n                    return True\n                seen.add(a)\n            return False\n        else:\n            pairs = []\n            for a, b in zip(A, B):\n                if a != b:\n                    pairs.append((a, b))\n                if len(pairs) > 2:\n                    return False\n            return len(pairs) == 2 and pairs[0] == pairs[1][::-1]", "class Solution:\n    def buddyStrings(self, A: str, B: str) -> bool:\n        if len(A) != len(B):\n            return False\n        \n        if A == B and len(set(A)) < len(A):\n            return True\n        \n        diffs = [(a, b) for a, b in zip(A, B) if a!= b]\n        \n        return len(diffs) == 2 and diffs[0] == diffs[1][::-1]", "class Solution:\n    def buddyStrings(self, A: str, B: str) -> bool:\n        \n        if A == B and len(set(A)) < len(B): return True\n        \n        if len(A) != len(B): return False\n        \n        diff_A = []\n        diff_B = []\n        \n        for i in range(len(A)):\n            if A[i] != B[i]:\n                diff_A.append(A[i])\n                diff_B.append(B[i])\n            \n        return len(diff_A) == len(diff_B) == 2 and diff_A[::-1] == diff_B", "class Solution:\n    def buddyStrings(self, A: str, B: str) -> bool:\n        count_A = {}\n        doubled = False\n        for i,a in enumerate(A):\n            if a not in count_A:\n                count_A[a] = set()\n            else:\n                doubled = True\n            count_A[a].add(i)\n        off = 0\n        for i,b in enumerate(B):\n            if b not in count_A:\n                return False\n            else:\n                if i in count_A[b]:\n                    count_A[b].remove(i)\n                    if not count_A[b]:\n                        del count_A[b]\n                else:\n                    off += 1\n                    if off > 2:\n                        return False\n        return doubled or off == 2"]