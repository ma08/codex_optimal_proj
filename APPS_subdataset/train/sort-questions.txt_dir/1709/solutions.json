["\ndef sum_for_list(lst):\n    factors = {i for k in lst for i in xrange(2, abs(k)+1) if not k % i}\n    prime_factors = {i for i in factors if not [j for j in factors-{i} if not i % j]}\n    return [[p, sum(e for e in lst if not e % p)] for p in sorted(prime_factors)]", "from collections import defaultdict\n\n\ndef prime(x):\n    for i in xrange(2, x):\n        if x % i == 0:\n            return False\n    return True\n\n\ndef prime_dividers(a):\n    return (x for x in xrange(2, abs(a) + 1) if a % x == 0 and prime(x))\n\n\ndef sum_for_list(lst):\n    d = defaultdict(int)\n    for a in lst:\n        for div in prime_dividers(a):\n            d[div] += a\n    return sorted([list(item) for item in d.iteritems()])", "from collections import defaultdict\ndef sum_for_list(lst):\n\n    def factors(x):\n        p_facs = []\n        i = 2\n        while x > 1 or x < -1:\n            if x % i == 0:\n                p_facs.append(i)\n                x //= i\n            else:\n                i += 1\n        return list(set(p_facs))\n    \n    fac_dict = defaultdict(int)\n    \n    for i in lst:\n        for fac in factors(i):\n            fac_dict[fac] += i\n            \n    return sorted([[k,v] for k,v in fac_dict.items()])", "def sum_for_list(lst):\n    def buscar_primxs(x):\n        res=[]\n        x=abs(x)\n        for i in range(2,int(x/2)+1):\n            if (x//i)*i==x:\n                    if i==2 or i==3:\n                        res.append(i)\n                    else:\n                        c=0\n                        for j in range(2,i):\n                             if (i//j)*j==i:\n                                    c=c+1\n                        if c==0:\n                            res.append(i)\n        if res==[]:\n            return([x])\n        return(res)\n        \n    R={}\n    for x in lst:\n        for elements in buscar_primxs(x):\n            if elements in R:\n                R[elements]+=x\n            else:\n                R[elements]=x\n    rta=[]\n    \n    M=[x for x in R]\n\n    M=sorted(M)\n\n    for keys in M:\n        rta.append([keys,R[keys]])\n    return(rta)", "from collections import defaultdict\n\ndef sum_for_list(lst):\n\n    primes = [2,]\n    # Use list instaed of int to account for zero sums\n    factors_dict = defaultdict(list)\n    answer = []\n\n    # Get the needed prime numbers\n    x = 3\n    for num in range(max(abs(i) for i in lst)):\n        if all(x % d for d in range(3, int(x ** .5) + 1, 2)):\n            primes += [x]\n        x += 2\n               \n    # Dictionary, keys are prime numbers, values are zero\n    for k in primes:\n        factors_dict[k]\n\n    # Find the prime numbers that are factors of the lst and add to dictionary\n    for prime in primes:\n        for i in lst:\n            if i % prime == 0:\n                factors_dict[prime] += [i]\n\n    # Go through dictionary, if no values dont add to answer\n    # Sum the values from lst (get those pesky zero sums)\n    for k, v in list(factors_dict.items()):\n        if v:\n            answer += [[k,sum(v)]]\n\n    return answer\n", "def sum_for_list(lst):\n    r=[]\n    for i in lst:\n        r.append(abs(i))\n    k=[]\n    for i in r:\n        l=[]\n        for j in range(2,i+1):\n            if i%j==0:\n                l.append(j)\n        \n        \n        \n        for x in l:\n            g=[]\n            for y in range(1,x+1):\n                if x%y==0:\n                    g.append(y)\n            \n            if g[0]==1 and g[1]==x:\n                k.append(x)\n                \n    \n    s=set(k)\n    \n    p=[]\n    for i in s:\n        o=[i]\n        a=0\n        for j in lst:\n            if j%i==0:\n                a=a+j\n        o.append(a)\n        \n        p.append(o)\n        \n    p.sort()\n    return p", "from itertools import chain\nfrom collections import defaultdict\n\ndef sum_for_list(lst):\n    sums = defaultdict(int)\n    for n in lst:\n        m = n\n        for p in chain([2], xrange(3, abs(n)+1, 2)):\n            if m % p == 0:\n                sums[p] += n\n            while m % p == 0:\n                m //= p\n    return map(list, sorted(sums.items()))", "\ndef factors(n):\n    gaps = [1,2,2,4,2,4,2,4,6,2,6]\n    length, cycle = 11, 3\n    f, fs, nxt = 2, [], 0\n    while f * f <= n:\n        while n % f == 0:\n            fs.append(f)\n            n /= f\n        f += gaps[nxt]\n        nxt += 1\n        if nxt == length:\n            nxt = cycle\n    if n > 1: fs.append(n)\n    return fs\n\ndef sum_for_list(lst):\n    d={}\n    fList=[]\n    \n    for i in lst:\n        f=factors(abs(i))\n        f=list(set(f))\n        if(i<0):\n            print((i,f))\n        for n in f:\n            if n in d:\n                d[n].append(i)\n            else:\n                d[n]=[i]\n    r=[]\n    for i in sorted(d):\n        r.append([int(i),sum(d[i])])\n    \n    return r\n", "from functools import reduce\n\ndef sum_for_list(lst):\n    factors = []\n    for j in lst: \n        for k in [i for i in range(2, abs(j)+1) if j%i == 0]:\n          if factors == [] or reduce(lambda x, y: x and y, [k%m != 0 for m in factors]):\n              factors.append(k)\n    return [[j, sum([l for l in lst if l%j == 0])] for j in sorted(factors)]", "import subprocess\nfrom itertools import chain\n\ndef prime_factors (n):\n    out = subprocess.run([\"factor\", str(n)], stdout=subprocess.PIPE)\n    out = str(out).split(':')[1].split('\\\\n')[0].split()\n    return [int(s) for s in out]\n\ndef sum_for_list(L):\n    P  = list(chain(prime_factors(abs(n)) for n in L))\n    zP = list(zip(L, P))\n    sP = sorted(set(p for l in P for p in l))\n    return [[p, sum(e[0] for e in zP if p in e[1])] for p in sP]"]