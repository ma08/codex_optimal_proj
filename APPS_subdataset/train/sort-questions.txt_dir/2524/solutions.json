["class Solution:\n     def findLengthOfLCIS(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) < 1:\n             return 0\n         cur_len = 1\n         max_len = 1\n         for i in range(1,len(nums)):\n             if nums[i] > nums[i-1]:\n                 cur_len = cur_len + 1\n             else:\n                 cur_len = 1\n                 \n             if cur_len > max_len:\n                 max_len = cur_len\n         return max_len\n", "class Solution:\n     def findLengthOfLCIS(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if not nums:\n             return 0\n         result = 1\n         max_result = 1\n         for i in range(len(nums) - 1):\n             if nums[i+1] > nums[i]:\n                 result += 1\n                 if result > max_result:\n                     max_result = result\n             else:\n                 result = 1\n         return max_result", "class Solution:\n     def findLengthOfLCIS(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if not len(nums):\n             return 0\n         res = 0\n         temp_res = 1\n         for i in range(len(nums)-1):\n             if nums[i] < nums[i+1]:\n                 temp_res += 1\n             else:\n                 if temp_res > res:\n                     res = temp_res\n                 temp_res = 1\n         return max(res, temp_res)", "class Solution:\n     def findLengthOfLCIS(self, nums):\n         if nums == []:\n             return 0\n         elif len(nums) == 1:\n             return 1\n         ans, max_ans = 1, 1\n         for i in range(len(nums) - 1):\n             if nums[i] < nums[i + 1]:\n                 ans += 1\n                 max_ans = ans if ans > max_ans else max_ans\n             else:\n                 ans = 1\n         return max_ans\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n", "class Solution:\n     def findLengthOfLCIS(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if not nums:\n             return 0\n         seq, max_seq = 1, 1\n         for i in range(1, len(nums)):\n             if nums[i] > nums[i-1]:\n                 seq += 1\n             else:\n                 max_seq = max(max_seq, seq)\n                 seq = 1\n         max_seq = max(max_seq, seq)\n         return max_seq", "class Solution:\n     def findLengthOfLCIS(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         # if nums == []:\n         #     return 0\n         # ans,n = 1,1\n         # for i in range(len(nums)-1):\n         #     if nums[i+1]>nums[i]:\n         #         n += 1\n         #         ans = max(ans,n)\n         #     else:\n         #         n = 1\n         # return ans\n         ans = anchor = 0\n         for i in range(len(nums)):\n             if i and nums[i-1] >= nums[i]: anchor = i\n             ans = max(ans, i - anchor + 1)\n         return ans\n", "class Solution:\n     def findLengthOfLCIS(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums)==0:\n             return 0\n         temp,res=1,1\n         for i in range(len(nums)-1):\n             if nums[i]<nums[i+1]:\n                 temp+=1\n             else:\n                 res=max(res,temp)\n                 temp=1\n         res=max(res,temp)\n         return res", "class Solution:\n     def findLengthOfLCIS(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if not nums:\n             return 0\n         \n         longest = 0\n         count = 1\n         for i in range(1, len(nums)):\n             if nums[i] > nums[i-1]:\n                 count += 1\n             else:\n                 longest = max(longest, count)\n                 count = 1\n                 \n         \n         return max(longest, count) \n", "class Solution:\n     def findLengthOfLCIS(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if not nums: return 0\n         ret = 0\n         cnt = 1\n         for i in range(1,len(nums)):\n             if nums[i]>nums[i-1]: cnt += 1\n             else:\n                 ret = max(ret, cnt)\n                 cnt = 1\n         return max(ret,cnt)", "class Solution:\n     def findLengthOfLCIS(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         current_count = 0\n         max_count = 0\n         for index,num in enumerate(nums):\n             current_count += 1\n             if index < len(nums)-1:\n                 if num >= nums[index+1]:\n                     max_count = max(max_count, current_count)\n                     current_count = 0\n         return max(max_count, current_count)", "class Solution:\n     def findLengthOfLCIS(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         LCIS = 0\n         i = 0\n         j = 1\n         while j <= len(nums):\n             if j == len(nums) or nums[j-1] >= nums[j]:\n                 l = j - i\n                 if LCIS < l: LCIS = l\n                 i = j\n             j += 1\n         return LCIS", "class Solution:\n     def findLengthOfLCIS(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         \n         if nums == []:\n             return 0\n         longest = 1\n         curr = 1\n         \n         for i in range(0,len(nums)-1):\n             if nums[i]<nums[i+1]:\n                 curr +=1\n                 print(curr)\n             else:\n                 \n                 longest = max(longest,curr)\n                 curr = 1\n         longest = max(longest,curr)\n         return longest", "class Solution:\n     def findLengthOfLCIS(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if nums == []:\n             return 0\n         n = 1\n         ans = [1,]\n         for i in range(0,len(nums)-1):\n             if nums[i+1]>nums[i]:\n                 n += 1\n             else:\n                 ans.append(n)\n                 n = 1\n             if i == len(nums)-2:\n                 ans.append(n)\n         \n         return max(ans)\n", "class Solution:\n     def findLengthOfLCIS(self, nums):\n         ans = anchor = 0\n         for i in range(len(nums)):\n             if(nums[i - 1] >= nums[i]):\n                 anchor = i\n             ans = max(ans, i - anchor + 1)\n         return ans", "class Solution:\n     def findLengthOfLCIS(self, nums):\n         ans = anchor = 0\n         for i in range(len(nums)):\n             if i and nums[i-1] >= nums[i]: anchor = i\n             ans = max(ans, i - anchor + 1)\n         return ans", "class Solution:\n     def findLengthOfLCIS(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         counter = 1\n         L = []\n         if len(nums)>=2:\n             for i in range(0,len(nums)-1):\n                 if nums[i+1]>nums[i]:\n                     counter+=1\n                 else:\n                     counter=1\n                 L.append(counter)\n             return max(L)\n         elif len(nums)==1:\n             return 1\n         else:\n             return 0"]