["# cook your dish here\n# from queue import PriorityQueue\n# import bisect\ndef insort(l, v):\n    s = 0\n    e = len(l)\n    while True:\n        mid = (s+e)//2\n        if s == e or mid > len(l):\n            break\n        if l[mid][0] < v[0]:\n            s = mid+1\n        elif l[mid][0] > v[0]:\n            e = mid\n        else:\n            break\n    l.insert(mid, v)\n    \nfor _ in range(int(input())):\n    n,l = map(int, input().split())\n    a_l = list(map(int, input().split()))\n    \n    dic = {}\n    dif = 0\n    for i,v in enumerate(a_l, start=1):\n        if v not in dic:\n            dic[v] = [i, i]\n        else:\n            dic[v][0] = min(dic[v][0], i)\n            dic[v][1] = max(dic[v][1], i)\n            dif = max(dif, dic[v][1]-dic[v][0])\n            \n    ans = dif\n    if l <= len(set(a_l)):\n        i_l = [[v,i] for i,v in enumerate(a_l, start=1)]\n        i_l.sort(reverse=True)\n        \n        dp = [[-1 for _ in range(l)] for _ in range(n)]\n        pq_l = [[] for _ in range(l)]\n        for i in range(1,n):\n            il = 1\n            dif_l = []\n            for j in range(i):\n                dif = abs(i_l[i][1]-i_l[j][1])\n                dif_l.append(dif)\n                dp[i][il] = max(dp[i][il], dif)\n                \n            for il in range(2,min(l,i+1)):\n                for prev_max, ind in reversed(pq_l[il-1]):\n                    if ind == i:\n                        continue\n                    if prev_max < dp[i][il]:\n                        break\n                    else:\n                        dp[i][il] = max(dp[i][il], min(dif_l[ind], prev_max))\n                insort(pq_l[il], [dp[i][il], i])\n                # tmp = [v[0] for v in pq_l[il]]\n                # ind = bisect.bisect_right(tmp, dp[i][il])\n                # pq_l[il].insert(ind, [dp[i][il], i])\n                \n            il = 1\n            insort(pq_l[il], [dp[i][il], i])\n            # tmp = [v[0] for v in pq_l[il]]\n            # ind = bisect.bisect_right(tmp, dp[i][il])\n            # pq_l[il].insert(ind, [dp[i][il], i])\n            \n            # print(i, pq_l, dif_l)\n                        \n                \n                # dp[i][1] = max(dp[i][1], dif)\n                # for il in range(2,l):\n                #     if dp[j][il-1] == -1:\n                #         break\n                #     dp[i][il] = max(dp[i][il], min(dif, dp[j][il-1]))\n            ans = max(ans, dp[i][-1])\n    #     print(dp)\n    # print(dic)\n    print(ans)", "# cook your dish here\n# from queue import PriorityQueue\nimport bisect\nfor _ in range(int(input())):\n    n,l = map(int, input().split())\n    a_l = list(map(int, input().split()))\n    \n    dic = {}\n    dif = 0\n    for i,v in enumerate(a_l, start=1):\n        if v not in dic:\n            dic[v] = [i, i]\n        else:\n            dic[v][0] = min(dic[v][0], i)\n            dic[v][1] = max(dic[v][1], i)\n            dif = max(dif, dic[v][1]-dic[v][0])\n            \n    ans = dif\n    if l <= len(set(a_l)):\n        i_l = [[v,i] for i,v in enumerate(a_l, start=1)]\n        i_l.sort(reverse=True)\n        \n        dp = [[-1 for _ in range(l)] for _ in range(n)]\n        pq_l = [[] for _ in range(l)]\n        for i in range(1,n):\n            il = 1\n            dif_l = []\n            for j in range(i):\n                dif = abs(i_l[i][1]-i_l[j][1])\n                dif_l.append(dif)\n                dp[i][il] = max(dp[i][il], dif)\n                \n            for il in range(2,min(l,i+1)):\n                for prev_max, ind in reversed(pq_l[il-1]):\n                    if ind == i:\n                        continue\n                    if prev_max < dp[i][il]:\n                        break\n                    else:\n                        dp[i][il] = max(dp[i][il], min(dif_l[ind], prev_max))\n                tmp = [v[0] for v in pq_l[il]]\n                ind = bisect.bisect_right(tmp, dp[i][il])\n                pq_l[il].insert(ind, [dp[i][il], i])\n                \n            il = 1\n            tmp = [v[0] for v in pq_l[il]]\n            ind = bisect.bisect_right(tmp, dp[i][il])\n            pq_l[il].insert(ind, [dp[i][il], i])\n            \n            # print(i, pq_l, dif_l)\n                        \n                \n                # dp[i][1] = max(dp[i][1], dif)\n                # for il in range(2,l):\n                #     if dp[j][il-1] == -1:\n                #         break\n                #     dp[i][il] = max(dp[i][il], min(dif, dp[j][il-1]))\n            ans = max(ans, dp[i][-1])\n    #     print(dp)\n    # print(dic)\n    print(ans)", "# cook your dish here\nfor _ in range(int(input())):\n    n,l = map(int, input().split())\n    a_l = list(map(int, input().split()))\n    \n    dic = {}\n    dif = 0\n    for i,v in enumerate(a_l, start=1):\n        if v not in dic:\n            dic[v] = [i, i]\n        else:\n            dic[v][0] = min(dic[v][0], i)\n            dic[v][1] = max(dic[v][1], i)\n            dif = max(dif, dic[v][1]-dic[v][0])\n            \n    ans = dif\n    if l <= len(set(a_l)):\n        i_l = [[v,i] for i,v in enumerate(a_l, start=1)]\n        i_l.sort(reverse=True)\n        \n        dp = [[-1 for _ in range(l)] for _ in range(n)]\n        for i in range(1,n):\n            for j in range(i):\n                dif = abs(i_l[i][1]-i_l[j][1])\n                dp[i][1] = max(dp[i][1], dif)\n                for il in range(2,l):\n                    if dp[j][il-1] == -1:\n                        break\n                    dp[i][il] = max(dp[i][il], min(dif, dp[j][il-1]))\n            ans = max(ans, dp[i][il])\n    #     print(dp)\n    # print(dic)\n    print(ans)"]