["class Solution:\n    def findReplaceString(self, s: str, indexes: List[int], sources: List[str], targets: List[str]) -> str:\n        l = []\n        for i, tgt, rpl in zip(indexes, sources, targets):\n            if s[i:i + len(tgt)] == tgt:\n                l.append((i, tgt, rpl))\n        l.sort()\n        j = 0\n        s = list(s)\n        for i, tgt, rpl in l:\n            s[i + j:i + j + len(tgt)] = rpl\n            j += len(rpl) - len(tgt)\n        return ''.join(s)", "# [google ][Jenny_write 20201003 1:32 am ]\n\n# [Jenny_write]1016. Binary String With Substrings Representing 1 To N \n# [Jenny_write]114. Longest Common Prefix\n# [Jenny_write]len(A) - len(set(A)) >= 1 \n\n\nclass Solution:\n    def findReplaceString(self, S: str, indexes: List[int], sources: List[str], targets: List[str]) -> str:\n        sources_dict = {}\n        targets_dict ={}\n\n        for i, pos_index in enumerate(indexes):\n            sources_dict[pos_index] = sources[i]\n            targets_dict[pos_index] = targets[i]\n\n        # \u6b64\u5904\u4e00\u5b9a\u8981\u5148\u5efa\u5b57\u5178\uff0c\u518d\u5012\u6392\u5e8f\n        indexes.sort(reverse=True)\n\n        for pos_index in indexes:\n            source = sources_dict[pos_index]\n            target = targets_dict[pos_index]\n            tmp_str = S[pos_index:(pos_index + len(source))]\n            if tmp_str == source:\n                S = S[:pos_index] +target +S[pos_index+len(source):]\n        return (S)\n\n", "class Solution:\n    def findReplaceString(self, S: str, indexes: List[int], sources: List[str], targets: List[str]) -> str:\n        for i, s, t in sorted(zip(indexes, sources, targets), reverse=True):\n            if S[i:i + len(s)] == s:\n                S = S[:i] + t + S[i + len(s):]\n        return S", "class Solution:\n    def findReplaceString(self, S: str, indexes: List[int], sources: List[str], targets: List[str]) -> str:\n        result, offset = S, 0\n        for i, s, t in sorted(zip(indexes, sources, targets)):\n            if S[i:i+len(s)]==s:\n                result = result[:offset + i] + t + result[offset + i + len(s):]\n                offset += len(t) - len(s)\n        return result\n", "# [google ][Jenny_write 20201003 1:32 am ]\n\n# [Jenny_write]1016. Binary String With Substrings Representing 1 To N \n# [Jenny_write]14. Longest Common Prefix\n# [Jenny_write]\n\n# 20201003 3:31 pm -3:39 pm \n\nclass Solution:\n    def findReplaceString(self, S: str, indexes: List[int], sources: List[str], targets: List[str]) -> str:\n        \n        \n        \n        # Step 1: dict\n        s_dict = {}\n        t_dict = {}\n        for i, index in enumerate(indexes):\n            s_dict[index] = sources[i]\n            t_dict[index] = targets[i]\n        \n    \n        # Step 2 : revs_sort\n        indexes.sort(reverse = True)\n                \n        # Step 3 : if \n        \n        for index in indexes:\n            sour  = s_dict[index]\n            targ  = t_dict[index]\n            le_s = len(sour)\n            tmp_str = S[index:(index+le_s)] \n            \n            if tmp_str == sour:\n                # if true, replce\n                S = S[:index]+targ + S[index+le_s:]\n        return S\n        \n        \n", "class Solution:\n    def findReplaceString(self, S: str, indexes: List[int], sources: List[str], targets: List[str]) -> str:\n        S = list(S)\n        for i, s, t in sorted(zip(indexes,sources,targets),reverse=True):\n            appl = all([(i + ind < len(S)) and (S[i+ind] == s[ind]) for ind in range(len(s))])\n            if appl:\n                S[i:i+len(s)] = list(t)\n        return ''.join(S)\n        \n", "class Solution:\n    def findReplaceString(self, S: str, indexes: List[int], sources: List[str], targets: List[str]) -> str:\n        index_position = dict()\n        r_list = []\n        \n        for pos, index in enumerate(indexes):\n            source_len = len(sources[pos])\n            if S[index:index + source_len] == sources[pos]:\n                index_position[index] = pos\n        \n        next_index = 0\n        for i in range(len(S)):\n            if i < next_index:\n                continue\n            if i in index_position:\n                pos = index_position[i]\n                r_list.append(targets[pos])\n                next_index += len(sources[pos])\n            else:\n                r_list.append(S[i])\n                next_index += 1\n                \n        return ''.join(r_list)", "class Solution:\n    def findReplaceString(self, S: str, indexes: List[int], sources: List[str], targets: List[str]) -> str:\n        idx_og = 0\n        idx_res = 0\n        res = S\n        for index, source, target in sorted(zip(indexes, sources, targets)):\n            if S[index:index + len(source)] == source:\n                index2 = index - idx_og + idx_res\n                res = res[:index2] + target + res[index2 + len(source):]\n                idx_og = index + len(source)\n                idx_res = index2 + len(target)\n        return res\n", "class Solution:\n    def check_source(self, start_idx, s, source):\n        i = 0\n        while i < len(source):\n            if start_idx  == len(s):\n                return False\n        \n            if source[i] != s[start_idx]:\n                return False\n            \n            start_idx += 1\n            i += 1\n            \n        return True\n    \n    def findReplaceString(self, s: str, indexes: List[int], sources: List[str], targets: List[str]) -> str:\n        res = []\n        i = 0\n        while i < len(s):\n            if i in indexes:\n                idx = indexes.index(i)\n                source = sources[idx]\n                target = targets[idx]\n                if self.check_source(i, s, source):\n                    i += len(source)\n                    res.append(target)\n                    continue\n            \n            res.append(s[i])\n            i += 1\n        return ''.join(res)\n            \n            \n                        \n"]