["class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        if nums[0] > nums[1]:\n            largest = nums[0]\n            second_largest = nums[1]\n        else:\n            largest = nums[1]\n            second_largest = nums[0]\n        for i in range(2,len(nums)):\n            if nums[i] > largest:\n                second_largest = largest\n                largest = nums[i]\n            elif nums[i] > second_largest:\n                second_largest = nums[i]\n        return (largest-1) * (second_largest -1)\n                \n                \n                \n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        max_1 = max(nums)\n        nums.remove(max_1)\n        max_2 = max(nums)\n        return (max_2-1)*(max_1-1)", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        i=nums[0];j=nums[1]\n        for num in range(2,len(nums)):\n            if(nums[num]>i or nums[num]>j):\n                if(nums[num]>i):\n                    if(i>j):\n                        j=i    \n                    i=nums[num]\n                    #print(i)\n                else:\n                    if(j>i):\n                        i=j    \n                    j=nums[num]\n                    #print(j)\n        #print (i,\\\" \\\",j)\n        return (i-1)*(j-1)\n                \n            \n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        prods=[]\n        for i in range(0,len(nums)-1):\n            for j in range(i+1, len(nums)):\n                prods.append((nums[i]-1)*(nums[j]-1))\n        return max(prods)", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        maximum_value=[]\n        for i in range(len(nums)):\n            for j in range(i+1,len(nums)):\n                maximum_value.append((nums[i]-1)*(nums[j]-1))\n        return max(maximum_value)", "from itertools import combinations\nclass Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        comb=list(combinations(nums,2))\n        maxv=0\n        for x in comb :\n            if (x[0]-1)*(x[1]-1)>maxv :\n                maxv=(x[0]-1)*(x[1]-1)\n        return maxv\n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        sum = 0\n        for i, num in enumerate(nums):\n            j = i + 1\n            while j < len(nums):\n                tempSum = (nums[i]-1)*(nums[j]-1)\n                if sum < tempSum:\n                    sum = tempSum\n                j = j + 1\n        return sum\n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        products = []\n        \n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                products.append((nums[i] - 1) * (nums[j] -1)) \n        \n        return max(products)", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        n = []\n        for i in range(len(nums)-1):\n            for j in range(i+1, len(nums)):\n                n.append((nums[i]-1)*(nums[j]-1))\n        return max(n)", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        maximum = 0\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                product = (nums[i]-1)*(nums[j]-1)\n                if maximum < product:\n                    maximum = product\n        return maximum", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        l=[]\n        for i in range(len(nums)-1):\n            for j in range(i+1,len(nums)):\n                s=(nums[i]-1)*(nums[j]-1)\n                l.append(s)\n        return max(l)\n                \n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        k=[]\n        for i in range(len(nums)):\n            for j in range(i+1,len(nums)):\n                l=(nums[i]-1)*(nums[j]-1)\n                k.append(l)\n        return max(k)", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        max_pro=0\n        for i in range(len(nums)-1):\n            for j in range(i+1,len(nums)):\n                temp=(nums[i]-1)*(nums[j]-1)\n                if temp>max_pro:\n                   max_pro=temp\n        return(max_pro)\n                \n                \n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        k=[]\n        for i in range(len(nums)):\n            for j in range(i+1,len(nums)):\n                \n                #print((nums[i]-1),(nums[j]-1))\n                k.append((nums[i]-1)*(nums[j]-1))\n                \n        print((max(k)))\n        return(max(k))\n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        new = []\n        \n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                new.append(((nums[i] - 1)*(nums[j] - 1)))\n                \n        return max(new)", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        lst = []\n        for i in range(len(nums)):\n            for j in range(i+1,len(nums)):\n                x = (nums[i]-1)*(nums[j]-1)\n                lst.append(x)\n        return max(lst)", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        if nums == []:\n            return None\n        max = None\n        for idx, i in enumerate(nums):\n            j = idx + 1\n            while j < len(nums):\n                product = (i - 1) * (nums[j] - 1)\n                if max == None:\n                    max = product\n                elif product > max:\n                    max = product\n                j += 1\n        return max\n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        mp = float('-inf')\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                mp = max(mp, (nums[i]-1)*(nums[j]-1))\n        return mp", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        ans = 0\n        for i in range(len(nums)):\n            for j in range(i+1,len(nums)):\n                ans = max(ans,(nums[i]-1)*(nums[j]-1))\n        return ans", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        max_product = 0\n        for i in range(len(nums) - 1):\n            for j in range(i + 1, len(nums)):\n                max_product = max(max_product, (nums[i] - 1) * (nums[j] - 1))\n\n        return max_product", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        ans = float('-inf')\n        for i in range(0, len(nums)):\n            for j in range(i+1, len(nums)):\n                ans = max(ans, (nums[i]-1)*(nums[j]-1))\n        \n        return ans\n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        ans = float('-inf')\n        n = len(nums)\n        for i in range(n):\n            for j in range(i + 1, n):\n                ans = max((nums[i] - 1) * (nums[j] - 1), ans)\n        return ans", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        arr = sorted(nums)\n        \n        idx1 = nums.index(arr[-1])\n        idx2 = nums.index(arr[-2])\n        \n        return (nums[idx1]-1)*(nums[idx2]-1)", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        result = 0\n        for i in range(len(nums)-1):\n            for j in range(i+1, len(nums)):\n                # prod = (nums[i]-1) * (nums[j]-1)\n                # if prod > result:\n                    # result = prod\n                result = max(result, (nums[i]-1) * (nums[j]-1))\n        return result\n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        sol = 0\n        \n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                sol = max(sol, (nums[i]-1)*(nums[j]-1))\n        \n        return sol", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        m = 0\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                m = max(m, (nums[i] - 1) * (nums[j] - 1))\n        return m", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        max_val = sys.maxsize * -1\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                max_val = max(max_val, (nums[i] - 1) * (nums[j] - 1))\n        return max_val", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        #m = (nums[0]-1)*(nums[1]-1)\n        m=0\n        for i in range(0,len(nums)-1):\n            for j in range(i+1,len(nums)):\n                m = max(m, (nums[i]-1)*(nums[j]-1))\n        return m\n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        r=0\n        for i in range(len(nums)-1):\n            for j in range(i+1,len(nums)):\n                r=max(r,(nums[i]-1)*(nums[j]-1))\n        return r", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        \n        max_val = float('-inf') \n        for i in range(len(nums)):\n            for j in range(i+1,len(nums)):\n                max_val = max(max_val,((nums[i]-1) * (nums[j]-1)))\n        return max_val\n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        maxNum = 0\n        for i in range(len(nums)):\n            for j in range(len(nums)):\n                if (nums[i]-1)*(nums[j]-1) >= maxNum and i != j:\n                    maxNum = (nums[i]-1)*(nums[j]-1)\n        return maxNum\n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        swapped = True\n        while swapped:\n            swapped = False\n            for i in range(len(nums)-1):\n                if nums[i+1]>nums[i]:\n                    nums[i],nums[i+1]=nums[i+1],nums[i]\n                    swapped = True\n        return (nums[0]-1)*(nums[1]-1)", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        max_prod = 0\n        for i in range(0, len(nums)-1):\n            for j in range(i+1, len(nums)):\n                prod=((nums[i]-1)*(nums[j]-1))\n                max_prod = max(max_prod, prod)\n        return max_prod", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        res = 0\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if i !=j:\n                    res = max(res, (nums[i]-1) * (nums[j]-1))\n        return res", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        req = 0\n        for i in range(1,len(nums)):\n            for j in range(i):\n                req = max(req, (nums[i]-1)*(nums[j]-1))\n        return req\n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        n=len(nums)\n        ans=float('-inf')\n        for i in range(n-1):\n            for j in range(i+1,n):\n                ans=max((nums[i]-1)*(nums[j]-1),ans)\n        return ans\n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        b = 0\n        for i in range(len(nums)):\n            for j in range(len(nums)):\n                a = (nums[i] - 1)*(nums[j]-1)\n                if b<a and i!=j:\n                    b=a\n        return(b)\n            \n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        max=0\n        for x in range(len(nums)):\n            for y in range(len(nums)):\n                if(y>x):\n                    if((nums[x]-1)*(nums[y]-1)>max):\n                        max=(nums[x]-1)*(nums[y]-1)\n        return max", "\nfrom itertools import combinations\n\n\nclass Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n\n        combs = list(combinations(nums, 2))\n        return max(list([(x[0]-1)*(x[1]-1) for x in combs]))\n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        for i,v in enumerate(nums):\n            nums[i]=nums[i]-1\n            nums[i]=abs(nums[i])\n        nums.sort(reverse=True)\n        return (nums[0])*(nums[1])", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        first, second = 0, 0\n        \n        for number in nums:\n\n            if number > first:\n                # update first largest and second largest\n                first, second = number, first\n\n            else:\n                # update second largest\n                second = max( number, second)\n\n        return (first - 1) * (second - 1)\n            \n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        max1 = nums.pop(nums.index(max(nums)))\n        max2 = nums.pop(nums.index(max(nums)))\n        return ((max1-1)*(max2-1))", "class Solution:\n    def maxProduct(self, nums):\n        result = 0\n        altnums = []\n        for num in nums:\n            altnums.append(num)\n        for i in range(len(nums)):\n            if nums[i] == max(nums):\n                altnums[i] = 0\n                break\n        print(altnums, nums)\n        result = (max(nums)-1) * (max(altnums)-1)\n        return result", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        s = sorted(nums, reverse = True)\n        return (s[0]-1)*(s[1]-1)\n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        min_val = None\n        max_val = None\n        \n        for i, val in enumerate(nums):\n            if min_val is None or min_val[1] > val:\n                min_val = [i, val]\n            if max_val is None or max_val[1] < val:\n                max_val = [i, val]\n            \n        answer = 0\n        for i, val in enumerate(nums):\n            if i != min_val[0]:\n                answer = max(answer, (min_val[1]-1)*(val-1))\n            if i != max_val[0]:\n                answer = max(answer, (max_val[1]-1)*(val-1))\n        return answer", "from itertools import combinations\nimport numpy\nclass Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        nums.sort()\n        res = (nums[-1]-1)*(nums[-2]-1)\n        return res\n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        Max = max(nums)\n        nums.remove(Max)\n        return (Max-1)*(max(nums)-1)", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        highest = max(nums)\n        nums.pop(nums.index(max(nums)))\n        second_highest = max(nums)\n        \n        return((highest-1)*(second_highest-1))", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        nums.sort()\n        return (nums[- 1] - 1) * (nums[- 2] - 1)", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        \n        heap = []\n        \n        for num in nums:\n            heapq.heappush(heap,-num)\n            \n        m1 = heapq.heappop(heap)\n        m2 = heapq.heappop(heap)\n        \n        return -(m1+1) * -(m2+1)", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        a = max(nums)\n        nums.remove(a)\n        return (a-1)*(max(nums)-1)\n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        if len([i for i, x in enumerate(nums) if x == max(nums)])>1:\n            return (max(nums)-1)**2\n        else:\n            maxi = max(nums)\n            other = nums\n            nums.remove(maxi)\n            return (maxi-1) * (max(other)-1)", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        print(sorted(nums)[-1]-1*sorted(nums)[-2]-1)\n        if len([i for i, x in enumerate(nums) if x == max(nums)])>1:\n            return (max(nums)-1)**2\n        else:\n            maxi = max(nums)\n            other = nums\n            nums.remove(maxi)\n            return (maxi-1) * (max(other)-1)", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        max_nums=[]\n\n        for num in nums:\n            if num==max(nums):\n\n                max_nums.append(num-1)\n                nums.remove(num)\n        for num in nums:\n            if num == max(nums):\n                max_nums.append(num - 1)\n                nums.remove(num)\n        return max_nums[0]*max_nums[1]\n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        s = set([])\n        m = 0\n        for num in nums:\n            x = num-1\n            for y in s:\n                p = x*y\n                if m<p:\n                    m = p\n            s.add(x)\n        return m\n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        nums = sorted(nums)\n        l = len(nums)\n        return (nums[l-1]-1)*(nums[l-2]-1) \n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        \n        largeNumber = 0\n        secondNumber = 0\n        \n        for i in nums:\n            if i > largeNumber:\n                largeNumber = i \n        for j in nums:\n            if j > secondNumber and j != largeNumber:\n                secondNumber = j\n                \n        for x in range(0, len(nums)):\n            for y in range(x+1, len(nums)):\n                if nums[x] == nums[y] and nums[x] == largeNumber:\n                    secondNumber = largeNumber\n                    \n        return int((largeNumber - 1) * (secondNumber - 1))\n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        max_nums = []\n        for i in range(2):\n            for num in nums:\n                if num == max(nums):\n                    max_nums.append(num - 1)\n                    nums.remove(num)\n        return max_nums[0] * max_nums[1]\n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        k = nums[0]\n        n = [i for i in range(2)]\n        for i in range(len(nums)):\n            for j in range(i):\n                if nums[i]*nums[j]>k:\n                    n[0] =  nums[j]\n                    n[1] = nums[i]\n                    k = nums[i]*nums[j]\n        m = ((n[0]-1)*(n[1]-1))\n        return m", "import itertools\n\nclass Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        return max(x*y for x, y in itertools.combinations(map(lambda x: x-1, nums), 2))", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        candidates = [0, 0]\n        highest = nums[0]\n        \n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                product = nums[i] * nums[j]\n                if product > highest:\n                    highest = product\n                    candidates[0] = i\n                    candidates[1] = j\n        \n        return (nums[candidates[0]] - 1) * (nums[candidates[1]] - 1)\n            \n    # i = 1\n    # j = 3\n    # product = 25\n    # highest = 25\n    # candidates = [1, 3]\n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        max_prod = 0\n        \n        nums = [x-1 for x in nums]\n        for first in range(len(nums)-1):\n            for second in range(first+1, len(nums)):\n                prod = nums[first] * nums[second]\n                if prod > max_prod:\n                    max_prod = prod\n        \n        return max_prod\n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        sorted_nums= sorted(nums)\n        return (sorted_nums[-1]-1) *  (sorted_nums[-2]-1)\n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        \n        ix = 0\n        iy = 0\n        ma = 0\n        \n        for i in range(0,len(nums)):\n            for j in range(i+1,len(nums)):\n                if (nums[i]*nums[j]) > ma:\n                    ma = nums[i]*nums[j]\n                    ix = i\n                    iy = j\n                    \n        result = (nums[ix]-1)*(nums[iy]-1)\n        \n        return result", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        second_largest = 0\n        largest = 0\n        max_product = 0\n        for index1 in range(len(nums)-1):\n            for index2 in range(index1+1, len(nums)):\n                product = nums[index1] * nums[index2]\n                if product > max_product:\n                    max_product = product\n                    if nums[index1] > nums[index2]:\n                        largest, second_largest = nums[index1], nums[index2]\n                    else:\n                        largest, second_largest = nums[index2], nums[index1]\n        return ((largest-1) * (second_largest-1))\n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        from itertools import combinations\n        answer = None\n        max_value =  float('-inf')\n        for x,y in combinations(list(range(len(nums))), 2):\n            if (nums[x] * nums[y]) > max_value:\n                answer = (nums[x]-1)*(nums[y]-1)\n                max_value= nums[x] * nums[y]\n        return answer\n                \n", "from itertools import combinations\n\nclass Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        currentMaximum = 0\n        for num_i, num_j in combinations(nums, 2):\n            if (product := (num_i - 1)*(num_j - 1)) > currentMaximum:\n                currentMaximum = product\n        \n        # for i, num_i in enumerate(nums):\n        #     for j, num_j in enumerate(nums):\n        #         if (currentProduct := (num_i - 1)*(num_j - 1)) > currentMaximum:\n        #             print(num_i, num_j)\n        #             currentMaximum = currentProduct\n        return currentMaximum        ", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        \n        return (sorted(nums)[-1]-1) *  (sorted(nums)[-2]-1)\n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        maxi = 0\n        \n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if ((nums[i]-1) * (nums[j]-1)) > maxi:\n                    maxi = ((nums[i]-1) * (nums[j]-1))\n        \n        return maxi\n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        maxx=0\n        for i in range(len(nums)):\n            for j in range(i+1,len(nums)):\n                if(((nums[i]-1)*(nums[j]-1))>maxx):\n                    maxx=(nums[i]-1)*(nums[j]-1)\n        return maxx", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        max = 0;\n        for i in range(len(nums)):\n            for j in range(i+1,len(nums)):\n                if max < (nums[i]-1)*(nums[j]-1):\n                    max = (nums[i]-1)*(nums[j]-1)\n        return max\n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        max_product=0\n        for i in range(len(nums)):\n            for j in range(i+1,len(nums)):\n                if (nums[i]-1)*(nums[j]-1) > max_product:\n                    max_product = (nums[i]-1)*(nums[j]-1)\n        return max_product\n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        res = (nums[0]-1)*(nums[1]-1)\n        for i in range(len(nums)-1):\n            for j in range(i+1, len(nums)):\n                if res < (nums[i]-1)*(nums[j]-1):\n                    res = (nums[i]-1)*(nums[j]-1)\n        return res\n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        maxim = 0\n        for i in range(len(nums)): \n            for j in range(i + 1, len(nums)): \n                if (nums[i]-1)*(nums[j]-1) > maxim: \n                    print(i)\n                    print(j)\n                    maxim = (nums[i]-1)*(nums[j]-1)\n                    \n        return maxim", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        high = 0\n        for i in range(len(nums)):\n            for j in range(i+1,len(nums)):\n                if (nums[i]-1)*(nums[j]-1) > high:\n                    high = (nums[i]-1)*(nums[j]-1)\n        return high \n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        n = len(nums)\n        current_max = -2147483647\n        for i in range(n-1):\n            for j in range(i+1, n):\n                temp = (nums[i]-1)*(nums[j]-1)\n                if(temp > current_max):\n                    current_max = temp\n        return current_max", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        maxNum = 0\n        for i in range(len(nums)):\n            for j in range(i+1,len(nums)):\n                temp = (nums[i]-1)*(nums[j]-1)\n                if temp > maxNum:\n                    maxNum = temp\n        return maxNum", "#optimal, one-pass, without sorting\n\nclass Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        if nums[0] > nums[1]:\n            max1 = nums[0]\n            max2 = nums[1]\n        else:\n            max1 = nums[1]\n            max2 = nums[0]\n            \n        for i in range(2, len(nums)):\n            if nums[i] > max1:\n                max2 = max1\n                max1 = nums[i]\n            elif nums[i] > max2:\n                max2 = nums[i]\n                \n        return (max1 - 1)*(max2 - 1)", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        max = 0\n        for i in range(0 , len(nums)-1):\n            for j in range(i+1 , len(nums)):\n                product = (nums[i]-1) * (nums[j]-1)\n                if product > max:\n                    max = product\n        return max\n                \n        # 0 1 2 3 4 5 len=6 \n        # 2 3 5 6 8 9\n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        result = 0\n        for n in range(len(nums)-1):\n            for m in range(n+1, len(nums)):\n                product = (nums[n] - 1) * (nums[m] -1)\n                if product > result:\n                    result = product\n        return result", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        highest = (nums[0]-1) * (nums[1]-1)\n        c = 0\n        for i in range(len(nums)-1):\n            for j in range(i+1,len(nums)):\n                c = (nums[i] - 1) * (nums[j] -1)\n                if c >= highest:\n                    highest = c\n                \n        return highest\n            \n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        maxRes = float('-inf')\n        for x in range(len(nums)):\n            for y in range(x + 1, len(nums)):\n                output = (nums[x] - 1) * (nums[y] - 1)\n                if output > maxRes:\n                    maxRes = output\n        return maxRes\n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        ans=0\n        for i in range(0,len(nums)):\n            for j in range(i+1,len(nums)):\n                if ans<(nums[i]-1)*(nums[j]-1):\n                    ans=(nums[i]-1)*(nums[j]-1)\n        return ans\n            \n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        prod = 0\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if (nums[i]-1) * (nums[j]-1) > prod:\n                    prod = (nums[i]-1) * (nums[j]-1)\n        return prod", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        n = len(nums)\n        \n        max_product = (nums[0] - 1) * (nums[1] - 1)\n        \n        for i in range(n-1):\n            for j in range(i+1, n):\n                product = (nums[i] - 1) * (nums[j] - 1)\n                if(product > max_product):\n                    max_product = product\n        \n        return max_product       ", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        my_list = []\n        for index, num in enumerate(nums):\n            for n in nums[index+1:]:\n                my_list.append((num-1)*(n-1))\n        return max(my_list)", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        prod = 0\n        for index in range(len(nums) - 1):\n            for subindex in range(index + 1, len(nums)):\n                cache = (nums[index] - 1) * (nums[subindex] - 1)\n                if cache > prod:\n                    prod = cache\n        return prod\n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        return max([(nums[i] - 1) * (nums[j] - 1) \n                    for i in range(len(nums))\n                    for j in range(i + 1, len(nums))\n                   ])", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        if nums[0] > nums[1]:\n            max1 = nums[0]\n            max2 = nums[1]\n        else:\n            max1 = nums[1]\n            max2 = nums[0]\n            \n        for i in range(2, len(nums)):\n            if nums[i] > max1:\n                max2 = max1\n                max1 = nums[i]\n            elif nums[i] > max2:\n                max2 = nums[i]\n                \n        return (max1 - 1)*(max2 - 1)", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        max_sum = 0\n        n = len(nums)\n        \n        for i in range(n):\n            for j in range(i+1, n):\n                sum = (nums[i] - 1) * (nums[j] - 1)\n                if sum > max_sum:\n                    max_sum = sum\n        return max_sum\n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        return max((nums[i]-1)*(nums[j]-1) for i in range(len(nums)-1) for j in range(i+1, len(nums)))", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        d = len(nums)\n        m = None\n        \n        for i in range(d):\n            for j in range(i+1, d):\n                mn = (nums[i] - 1) * (nums[j] - 1)\n                if m is None:\n                    m = mn\n                elif m < mn:\n                    m = mn\n        return m\n        \n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        \n        n = len(nums)\n        ans = 0\n        \n        for i in range(n-1):\n            for j in range(i+1,n):\n                \n                temp = (nums[i] -1) * (nums[j] -1)\n                \n                if temp > ans:\n                    ans = temp\n        \n        return ans", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        list1 = [((nums[i]-1)*(nums[j]-1)) for i in range(len(nums)) for j in range(i+1,len(nums))]\n        return max(list1)\n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        return max((nums[i]-1)*(nums[j]-1) for i in range(len(nums)) for j in range(i+1, len(nums)))", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        \n        for i in range(len(nums)): \n            for j in range(0, len(nums)-i-1): \n                if nums[j] > nums[j+1] : \n                    nums[j], nums[j+1] = nums[j+1], nums[j] \n        \n        a = nums.pop(len(nums)-1)-1\n        b = nums.pop(len(nums)-1)-1    \n        return a*b", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        curr_product = 0\n        max_product = 0\n        for i in range(len(nums)-1):\n            for j in range(i+1, len(nums)):\n                if i == 0 and j == 0:\n                    max_product = (nums[i]-1)*(nums[j]-1)\n                else:\n                    curr_product = (nums[i]-1)*(nums[j]-1)\n                    if curr_product > max_product:\n                        max_product = curr_product\n        \n        return max_product", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        \n        max_val = 0\n        curr_val = 0\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if i == 0 and j == 0:\n                    max_val = (nums[i]-1) * (nums[j]-1)\n                else:\n                    curr_val = (nums[i]-1) * (nums[j]-1)\n                    if curr_val > max_val:\n                        max_val = curr_val\n                        \n        return max_val", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        nums.sort()\n        \n        return (nums[-1]-1)*(nums[-2]-1)", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        maxValue = 0\n        max_return = 0\n        for nr_idx in range(len(nums)):\n            for nr_id in range(nr_idx + 1, len(nums)):\n                if nr_id != nr_idx:\n                    max_Value = (nums[nr_idx] - 1) * (nums[nr_id] - 1)\n                    if max_Value > max_return:\n                        max_return = max_Value\n        return max_return", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        max=  0\n        \n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                curr = (nums[i] - 1) * (nums[j] -1)\n                if curr > max:\n                    max = curr\n    \n        return max", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        maxx=float('-inf')\n        for i in range(0,len(nums)-1):\n            for j in range(i+1,len(nums)):\n                if maxx<(nums[i]-1)*(nums[j]-1):\n                    maxx=(nums[i]-1)*(nums[j]-1)\n        return maxx\n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        result = 0\n        for i in range(len(nums)):\n            for k in range(i+1,len(nums)):\n                if(nums[i]-1)*(nums[k]-1) > result:\n                    result = (nums[i]-1) * (nums[k]-1)\n        return result", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        maximum = (nums[0] - 1)*(nums[1] - 1)\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if (nums[i] - 1)*(nums[j] - 1) > maximum:\n                    maximum = (nums[i] - 1)*(nums[j] - 1)\n        return maximum\n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        if len(set(nums))==1 and set(nums)=={1}:\n            return 0\n        maxi=1\n        for i in range(len(nums)-1):\n            for j in range(i+1,len(nums)):\n                if (nums[i]-1)*(nums[j]-1)>maxi:\n                    maxi=(nums[i]-1)*(nums[j]-1)\n        return maxi", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        result = [] # variabel untuk menampung hasil perhitungan rumus\n        for i in range(len(nums)-1):\n            for j in range(i+1, len(nums)):\n                result.append((nums[i]-1)*(nums[j]-1))\n        return max(result) # mengambil nilai maximum dari rumus\n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        \n        product_list = []\n        \n        for i in range(len(nums)):\n            for j in range(i+1,len(nums)):\n                product_list.append((nums[i]-1)*(nums[j]-1))\n        return max(product_list)\n        \n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        mpr = []\n        \n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                mpr.append((nums[i]-1)*(nums[j]-1))\n        return max(mpr)", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        p = []\n        for count, n in enumerate(nums):\n            for i in range(count+1,len(nums)):\n                p.append((nums[i] -1)* (n-1))\n        return max(p)", "class Solution:\n    def maxProduct(self, L: List[int]) -> int:\n        max=0\n        x=0\n        y=0\n        for i in range(len(L)):\n            for j in range(len(L)):\n                if L[i]*L[j]>max and i!=j:\n                    max=L[i]*L[j]\n                    x,y=i,j\n        return (L[x]-1)*(L[y]-1)", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        max_product = 0\n        num_len = len(nums)\n        for i in range(num_len):\n            for j in range(i, num_len):\n                product = (nums[i] - 1) * (nums[j] - 1)\n                if i != j and product > max_product:\n                    max_product = product\n        return max_product", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        res=0\n        for i in range(len(nums)-1):\n            for j in range(i+1,len(nums)):\n                if (nums[i]-1)*(nums[j]-1)>res:\n                    res=(nums[i]-1)*(nums[j]-1)\n        return res\n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        mularray = []\n        for i in range(len(nums)-1):\n            for j in range(i+1, len(nums)):\n                mularray.append((nums[i]-1)*(nums[j]-1))\n        return max(mularray)\n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        products = []\n        for i in range(len(nums)):\n            for j in range(i+1,len(nums)):\n                products.append((nums[i]-1)*(nums[j]-1))\n        return max(products)", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        l=[]\n        for i in range(0,len(nums)):\n            for j in range(i+1,len(nums)):\n                l.append((nums[i]-1)*(nums[j]-1))\n        return max(l)\n            \n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        if not nums: return 0\n        max_val=i_value=y_value = 0\n        for i_idx, i_val in enumerate(nums):\n            for y_idx, y_val in enumerate(nums):\n                if i_idx == y_idx:\n                    continue\n                if i_val * y_val > max_val : \n                    max_val = i_val * y_val\n                    i_value,y_value=i_val,y_val\n        return (i_value-1)*(y_value-1)\n            \n", "class Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        n=[i-1 for i in nums]\n        res=0\n        for i,j in itertools.combinations(n, 2):\n            res=max(res,i*j)\n        return res\n", "from itertools import combinations\n\nclass Solution:\n    def maxProduct(self, nums: List[int]) -> int:\n        \n        arr = combinations(nums, 2)\n        res = []\n        \n        for x in arr:\n            res.append((x[0] - 1) * (x[1] - 1))\n        \n        return max(res)"]