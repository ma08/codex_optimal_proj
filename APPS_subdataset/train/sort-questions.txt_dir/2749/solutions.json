["def solve(lst):\n    a, b, c = lst[0] < lst[1], lst[1] < lst[2], lst[-1] < lst[0]\n    m = a if a == b else c\n    return ('R' if c == m else '') + ('A' if m else 'D')", "def solve(arr):\n    if sorted(arr) == arr:\n        return \"A\"\n    if sorted(arr)[::-1] == arr:\n        return \"D\"\n    return \"RA\" if arr[0] > arr[-1] else \"RD\"", "solve = lambda a:'R'*([min(a),max(a)]!=sorted(a[0::len(a)-1])) + ['D','A'][a[-1]-a[-2]>0]", "def solve(arr):\n    print(arr)\n    if arr==sorted(arr):\n        return 'A'\n    if arr==sorted(arr,reverse=True):\n        return 'D'    \n    if arr!=sorted(arr) and arr[-2]>arr[-1]:\n        return 'RD'\n    if arr!=sorted(arr) and arr[-2]<arr[-1]:\n        return 'RA'\n\n\n \n", "def solve(arr):\n    if arr == sorted(arr):\n        return \"A\"\n    elif arr == sorted(arr, reverse=True):\n        return \"D\"\n    elif arr[0]>arr[-1]:\n        return \"RA\"\n    else:\n        return \"RD\"", "def solve(arr):\n    if arr[-1] > arr[-2]:\n        if sorted(arr) == arr:\n            return \"A\"\n        else:\n            return \"RA\"\n    elif arr[-1] < arr[-2]:\n        if sorted(arr)[::-1] == arr:\n            return \"D\"\n        else:\n            return \"RD\"\n", "from collections import Counter\n\ndef solve(a):\n    c = Counter( (b>a)-(b<a) for a,b in zip(a, a[1:]) )\n    return 'R'*(len(c)-1) + 'DA'[ (max(c, key=c.__getitem__)+1)//2 \n                                  if len(c) == 1 or len(set(c.values())) != 1 \n                                  else a[0] > a[-1] ]", "def solve(a):\n    c = sum((b>a)-(b<a) + 1j*(b-a) for a,b in zip(a, a[1:]))\n    return 'R'*(len(a)-abs(c.real)!= 1) + 'DA'[c.real>0 if c.real else c.imag<0]", "solve=lambda a:(lambda i:'R'*((a[-1]>a[0])-(a[-1]<a[0])==i)+'UDA'[i])(__import__('collections').Counter((x>y)-(x<y)for x,y in zip(a[-1:]+a,a)).most_common(1)[0][0])"]