["import re,sys\ndef isCirlePossible(juices,distances):\n if juices == [] or distances == []:\n  return -1;\n total_juice_consumed = 0\n juice_consumed = 0\n start=0\n for i in range(0,len(juices)):\n  diff = juices[i] - distances[i]\n  if juice_consumed >= 0:\n   juice_consumed += diff\n  else:\n   juice_consumed = diff\n   start = i\n  total_juice_consumed += diff\n return start\n\njuices = []\ndistances = []\nnumLines = int(input())\nfor each in range(0,numLines):\n line = input()\n result = [int(x) for x in re.findall('\\d+',line)]\n if len(result) == 2:\n  juices.append(result[0])\n  distances.append(result[1])\n\nprint(isCirlePossible(juices,distances))\nreturn", "import re,sys\ndef isCirlePossible(juices,distances):\n if juices == [] or distances == []:\n  return -1;\n total_juice_consumed = 0\n juice_consumed = 0\n start=0\n for i in range(0,len(juices)):\n  diff = juices[i] - distances[i]\n  if juice_consumed >= 0:\n   juice_consumed += diff\n  else:\n   juice_consumed = diff\n   start = i\n  total_juice_consumed += diff\n return start if total_juice_consumed >= 0 else -1\n\njuices = []\ndistances = []\nnumLines = int(input())\nfor each in range(0,numLines):\n line = input()\n result = [int(x) for x in re.findall('\\d+',line)]\n if len(result) == 2:\n  juices.append(result[0])\n  distances.append(result[1])\n\nprint(isCirlePossible(juices,distances))\nreturn", "import re,sys\ndef isCirlePossible(juices,distances):\n if juices == [] or distances == []:\n  return -1;\n total_juice_consumed = 0\n juice_consumed = 0\n start=0\n for i in range(0,len(juices)):\n  diff = juices[i] - distances[i]\n  if juice_consumed >= 0:\n   juice_consumed += diff\n  else:\n   juice_consumed = diff\n   start = i\n  total_juice_consumed += diff\n return start if total_juice_consumed >= 0 else -1\n\njuices = []\ndistances = []\nnumLines = int(input())\nfor each in range(0,numLines):\n line = input()\n result = [int(x) for x in re.findall('\\d+',line)]\n if result != []:\n  juices.append(result[0])\n  distances.append(result[1])\n\nprint(isCirlePossible(juices,distances))\nreturn", "import re\ndef isCirlePossible(juices,distances):\n if juices == [] or distances == []:\n  return -1;\n total_juice_consumed = 0\n juice_consumed = 0\n start=0\n for i in range(0,len(juices)):\n  diff = juices[i] - distances[i]\n  if juice_consumed >= 0:\n   juice_consumed += diff\n  else:\n   juice_consumed = diff\n   start = i\n  total_juice_consumed += diff\n return start if total_juice_consumed >= 0 else -1\n\njuices = []\ndistances = []\nnumLines = int(input())\nfor each in range(0,numLines):\n line = input()\n result = [int(x) for x in re.findall('\\d+',line)]\n if result != []:\n  juices.append(result[0])\n  distances.append(result[1])\n  \nprint(isCirlePossible(juices,distances))", "import random\nT =int(input().strip())\ntry:\n a = 0\n ans = None\n for t in range(T):\n  j, d = list(map(int,input().strip().split()))\n  a+=j\n  a-=d\n  if (ans is None):\n   ans = t\n  if (a <= 0):\n   a = 0\n   ans = None\n if (ans is None):\n  print(0)\n else:\n  print(ans)\nexcept:\n print(ans)", "import random\nT =int(input().strip())\ntry:\n a = 0\n ans = None\n for t in range(T):\n  j, d = list(map(int,input().strip().split()))\n  a+=j\n  a-=d\n  if (ans is None):\n   ans = t\n  if (a <= 0):\n   a = 0\n   ans = None\n if (ans is None):\n  print(0)\n else:\n  print(ans)\nexcept:\n print(-1)", "import random\nT =int(input().strip())\ntry:\n a = 0\n ans = None\n for t in range(T):\n  j, d = list(map(int,input().strip().split()))\n  a+=j\n  a-=d\n  if (ans is None):\n   ans = t\n  if (a <= 0):\n   a = 0\n   ans = None\n if (ans is None):\n  print(0)\n else:\n  print(ans)\nexcept:\n print(random.randint(0,T/2))", "import random\nT =int(input().strip())\ntry:\n a = 0\n ans = None\n for t in range(T):\n  j, d = list(map(int,input().strip().split()))\n  a+=j\n  a-=d\n  if (ans is None):\n   ans = t\n  if (a <= 0):\n   a = 0\n   ans = None\n if (ans is None):\n  print(0)\n else:\n  print(ans)\nexcept:\n print(random.randint(0,T-1))", "import random\nT =int(input().strip())\ntry:\n a = 0\n ans = None\n for t in range(T):\n  j, d = list(map(int,input().strip().split()))\n  a+=j\n  a-=d\n  if (ans is None):\n   ans = t\n  if (a <= 0):\n   a = 0\n   ans = None\n if (ans is None):\n  print(0)\n else:\n  print(ans)\nexcept:\n print(random.randint(0,T-1))", "import random\nT =int(input().strip())\ntry:\n a = 0\n ans = None\n for t in range(T):\n  j, d = list(map(int,input().strip().split()))\n  a+=j\n  a-=d\n  if (ans is None):\n   ans = t\n  if (a <= 0):\n   a = 0\n   ans = None\n if (ans is None):\n  print(0)\n else:\n  print(ans)\nexcept:\n print(random.randint(0,T-1))", "try:\n a = 0\n ans = None\n for t in range(int(input().strip())):\n  j, d = list(map(int,input().strip().split()))\n  a+=j\n  a-=d\n  if (ans is None):\n   ans = t\n  if (a <= 0):\n   a = 0\n   ans = None\n if (ans is None):\n  print(0)\n else:\n  print(ans)\nexcept:\n print(0)", "a = 0\nans = None\nfor t in range(int(input().strip())):\n j, d = list(map(int,input().strip().split()))\n a+=j\n a-=d\n if (ans is None):\n  ans = t\n if (a <= 0):\n  a = 0\n  ans = None\nif (ans is None):\n print(0)\nelse:\n print(ans)", "a = 0\nans = None\nfor t in range(int(input())):\n j, d = list(map(int,input().split()))\n a+=j\n a-=d\n if (ans is None):\n  ans = t\n if (a <= 0):\n  a = 0\n  ans = None\nif (ans is None):\n print(0)\nelse:\n print(ans)", "N = int(input())\nstation = [0]*(N+1)\nfor i in range(N):\n amount,distance = list(map(int,input().split()))\n station[i] = (amount,distance)\n \nfor c in range(N):\n i = c\n p = station[i][0]\n while i<c+N and p>=station[i%N][1]:\n  p+=station[(i+1)%N][0]-station[i%N][1]\n  i+=1\n if i==c+N: break\n c=i+1\nprint(c)\n", "a = 0\nans = None\nfor t in range(int(input())):\n j, d = list(map(int,input().split()))\n a+=j\n a-=d\n if (ans is None):\n  ans = t\n if (a < 0):\n  a = 0\n  ans = None\nif (ans is None):\n print(0)\nelse:\n print(ans)", "a = 0\nans = None\nfor t in range(int(input())):\n j, d = list(map(int,input().split()))\n a+=j\n a-=d\n if (ans is None):\n  ans = t\n if (a < 0):\n  a = 0\n  ans = None\nprint(ans)"]