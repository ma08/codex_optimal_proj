["class Solution:\n     def maximumGap(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if not nums or len(nums) == 1:\n             return 0\n         sorted_gap=0\n         nums=list(set(nums))\n         nums.sort()\n         for curr in range(len(nums[:-1])):\n             gap=nums[curr+1]-nums[curr]\n             if gap>sorted_gap:\n                 sorted_gap=gap\n         \n         return sorted_gap", "class Solution:\n     def maximumGap(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         nums.sort()\n         try:\n             return(max(list(map(lambda i,j:j-i,nums,nums[1:]))))\n         except: return(0)", "class Solution:\n     def maximumGap(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) < 2:\n             return 0\n \n         if len(nums) == 2:\n             return abs(nums[0] - nums[1])\n \n         left, right = min(nums), max(nums)\n         brng = (right - left) // (len(nums) - 1) + 1\n         bnum = (right - left) // brng + 1\n         bucket = [None] * bnum\n         for x in nums:\n             idx = (x - left) // brng\n             if bucket[idx]:\n                 bucket[idx] = (min(bucket[idx][0], x), max(bucket[idx][1], x))\n             else:\n                 bucket[idx] = (x, x)\n \n         max_gap = pre = 0\n         for cur in range(1, bnum):\n             if not bucket[cur]:\n                 continue\n             max_gap = max(max_gap, bucket[cur][0] - bucket[pre][1])\n             pre = cur\n \n         return max_gap", "class Solution:\n     def maximumGap(self, num):\n         if len(num) < 2 or min(num) == max(num):\n             return 0\n         a, b = min(num), max(num)\n         import math\n         size = math.ceil((b - a) / (len(num) - 1))\n         bucket = [[None, None] for _ in range((b - a) // size + 1)]\n         for n in num:\n             b = bucket[(n - a) // size]\n             b[0] = n if b[0] is None else min(b[0], n)\n             b[1] = n if b[1] is None else max(b[1], n)\n         bucket = [b for b in bucket if b[0] is not None]\n         return max(bucket[i][0] - bucket[i - 1][1] for i in range(1, len(bucket)))", "class Solution:\n     def maximumGap(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         nums.sort()\n         try:\n             return(max(list(map(lambda i,j:j-i,nums,nums[1:]))))\n         except: return(0)", "class Solution:\n     def maximumGap(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums)<2:\n             return 0\n         minV = nums[0]\n         maxV = nums[0]\n         for i in range(len(nums)):\n             if nums[i]<minV:\n                 minV = nums[i]\n             if nums[i]>maxV:\n                 maxV = nums[i]\n         \n         l = len(nums)\n         n_size = max((maxV-minV)//(l-1),1)\n         #print(n_size)\n         n = (maxV-minV)//n_size+1\n         #print(n)\n         #return 0\n         if n==1:\n             return maxV-minV\n         \n         b_max = [minV]*n\n         b_min = [maxV]*n\n         b_count = [0]*n\n         \n         for i in range(l):\n             b_id = (nums[i]-minV)//n_size\n             b_count[b_id]+=1\n             if nums[i]>b_max[b_id]:\n                 b_max[b_id] = nums[i]\n             if nums[i]<b_min[b_id]:\n                 b_min[b_id] = nums[i]\n         \n         last_max = minV\n         maxGap = 1\n         for i in range(n):\n             if b_count[i]>0:\n                 maxGap = max(maxGap,b_min[i]-last_max)\n                 last_max  = b_max[i]\n         \n         return maxGap\n                 \n         \n", "class Solution(object):\n     def maximumGap(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if(len(nums) == 0):\n             return 0\n         Max, Min = max(nums), min(nums)\n         if(Max == Min):\n             return 0\n         if(len(nums) == 2):\n             return Max-Min\n         import math\n         nums = list(set(nums))\n         Len = int(math.ceil((Max-Min)/(len(nums)-1)))\n         print(Max,Min)\n         print((Max-Min)/(len(nums)-1))\n         Count = (Max-Min)//Len + 1\n         List = [[] for i in range(Count)]\n         \n         Gap = 0\n         for i in nums:\n             ilen = int((i-Min)//Len)\n             \n             List[ilen].append(i)\n             \n         mmin = max(List[0])\n         for i in range(1,Count):\n             if(List[i] != []):\n                 Gap = max(Gap, min(List[i])-mmin)\n                 mmin = max(List[i])\n         return Gap    ", "class Solution:\n     def maximumGap(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         import math,sys\n         if not nums or len(nums)<2: \n             return 0\n \n         lenn = len(nums)\n         maxx = nums[0]\n         minn = nums[0]\n         for i in range(len(nums)):\n             maxx = max(maxx, nums[i])\n             minn = min(minn, nums[i])\n \n         gap = math.ceil((maxx-minn)/(lenn-1))\n         bucketsMin = [2**31-1]*(lenn-1)\n         bucketsMax = [-2**31+1]*(lenn-1)\n         for num in nums:\n             if num==minn or num==maxx:\n                 continue\n             bucket = (num-minn)//gap\n             bucketsMin[bucket]=min(num, bucketsMin[bucket])\n             bucketsMax[bucket]=max(num, bucketsMax[bucket])\n         res = 0\n         pre = minn \n         for i in range(lenn-1):\n             if bucketsMin[i]==(2**31-1) and bucketsMax[i]==(-2**31+1):\n                 continue\n             res = max(res, bucketsMin[i] - pre)\n             pre = bucketsMax[i]\n \n         res = max(res, maxx-pre)\n         return res", "class Solution:\n     def maximumGap(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums)<2:\n             return 0\n         a = nums[0]\n         b = nums[0]\n         for num in nums:\n             a = min(a, num)\n             b = max(b, num)\n             \n         bucketSize = max(1, (b-a)//(len(nums)-1))\n         bucketNum = (b-a)//bucketSize + 1\n         buckets = [[-1, -1] for i in range(bucketNum)]\n         for num in nums:\n             locate = (num-a)//bucketSize\n             if buckets[locate][0] == -1:\n                 buckets[locate][0] = num\n                 buckets[locate][1] = num\n             else:\n                 buckets[locate][0] = min(num, buckets[locate][0])\n                 buckets[locate][1] = max(num, buckets[locate][1])\n         maxGap = 0\n         pre = a\n         for bucket in buckets:\n             if bucket[0] == -1:\n                 continue\n             maxGap = max(maxGap, bucket[0] - pre)\n             pre = bucket[1]\n         return maxGap", "class Solution:\n     def maximumGap(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         n = len(nums)\n         if n == 0:\n             return 0\n         buckets = [{\"min\": None, \"max\": None} for _ in range(n)]\n         n_min = min(nums)\n         n_max = max(nums)\n         if n_max == n_min:\n             return 0\n         for num in nums:\n             i = (num - n_min) * (n - 1) // (n_max - n_min)\n             if buckets[i][\"min\"] is None:\n                 buckets[i][\"min\"] = num\n                 buckets[i][\"max\"] = num\n             else:\n                 buckets[i][\"min\"] = min(num, buckets[i][\"min\"])\n                 buckets[i][\"max\"] = max(num, buckets[i][\"max\"])\n         max_diff = 0\n         max_prev = buckets[0][\"max\"]\n         for i in range(1, n):\n             if buckets[i][\"min\"] is not None:\n                 max_diff = max(max_diff, buckets[i][\"min\"]-max_prev)\n                 max_prev = buckets[i][\"max\"]\n         #print(buckets)\n         return max_diff", "class Solution:\n     def maximumGap(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums)<2:\n             return 0\n         \n         m = 0\n         for num in nums:\n             m = max(m, num)\n         \n         exp = 1\n         while m//exp:\n             aux = [[] for i in range(10)]\n             for num in nums:\n                 aux[(num//exp)%10].append(num)\n             index = 0\n             for item in aux:\n                 if len(item)!=0:\n                     for i in item:\n                         nums[index] = i\n                         index += 1\n             exp *= 10\n         \n         maxGap = 0\n         pre = nums[0]\n         for num in nums:\n             maxGap = max(maxGap, num - pre)\n             pre = num\n         return maxGap"]