["class Solution:\n    def numPrimeArrangements(self, n: int) -> int:\n        primes = [True] * (n + 1)\n        for prime in range(2, int(math.sqrt(n)) + 1):\n            if primes[prime]:\n                for composite in range(prime * prime, n + 1, prime):\n                    primes[composite] = False\n        cnt = sum(primes[2:])\n        return math.factorial(cnt) * math.factorial(n - cnt) % (10**9 + 7)        ", "class Solution:\n    def numPrimeArrangements(self, n: int) -> int:\n        # there are 25 primes from 1 to 100\n        \n        primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101]\n        \n        for i in range(len(primes)):\n            if primes[i] > n:\n                break\n        count = i\n        print(count)\n        return math.factorial(count) % (10**9 + 7) * math.factorial(n - count) % (10**9 + 7) \n        \n", "class Solution:\n    def numPrimeArrangements(self, n: int) -> int:\n        p_nums = []\n        c_nums = []\n        dp = [True for _ in range(n+1)]\n        dp[0] = False\n        dp[1] = False\n        for i in range(2, n+1):\n            if dp[i] == True:\n                cnt = 2\n                while i*cnt < n+1:\n                    dp[i*cnt] = False\n                    cnt += 1\n        \n        for i in range(1, n+1):\n            if dp[i]:\n                p_nums += [i]\n            else:\n                c_nums += [i]\n\n        #return (self.fact(len(p_nums))*self.fact(len(c_nums)))%(10**9+7)  ===ok\n        #\u6a21\u8fd0\u7b97\u89c4\u5219\uff1a(a * b) % m = ((a % m) * b) % m \u8bc1\u660e\u65b9\u6cd5\u8bf7\u81ea\u884c\u641c\u7d22\n        return (self.fact(len(p_nums) % (10**9+7))*self.fact(len(c_nums)) % (10**9+7) )\n    \n    def fact(self, n):\n        if n <= 1:\n            return 1\n        else:\n            return n*self.fact(n-1)\n\n        \n    '''\n    \u9898\u76ee\u63cf\u8ff0\n\n\u4e2d\u6587\uff1a\u8d28\u6570\u6392\u5217\n\u82f1\u8bed\uff1aPrime Arrangements\n\n\u89e3\u9898\u601d\u8def\n\n\u7406\u89e3\u9898\u610f\uff0c\u662f\u8981\u6c421\u5230n\u7684\u6392\u5217\u7ec4\u5408\u6570\uff0c\u4f46\u5e76\u4e0d\u662f\u5168\u6392\u5217\uff0c\u800c\u662f1\u5230n\u4e2d\u6240\u6709\u8d28\u6570\u4e2a\u6570\u7684\u9636\u4e58\u548c\u975e\u8d28\u6570\u4e2a\u6570\u7684\u9636\u4e58\u7684\u4e58\u79ef\u5e76\u5bf910^9 + 7\u53731000000007\u53d6\u6a21\u8fd0\u7b97\u7684\u7ed3\u679c\u3002\n\u4ee5n=5\u4e3a\u4f8b\uff0c1\u52305\u4e2d\u67092\u30013\u30015\u51713\u4e2a\u8d28\u6570\uff0c\u975e\u8d28\u6570\u5219\u67091\u30014\u51712\u4e2a\uff0c\u5219\u7ed3\u679c\u4e3a(3! * 2!) % 1000000007 = 12\n\n\u4ee3\u7801\u5982\u4e0b\n\n\u9700\u8981\u7406\u89e3\u7684\u70b9 \u6a21\u8fd0\u7b97\u89c4\u5219\uff1a(a * b) % m = ((a % m) * b) % m \u8bc1\u660e\u65b9\u6cd5\u8bf7\u81ea\u884c\u641c\u7d22\n\n\u5c06\u6570\u5b57\u5206\u4e3a\u8d28\u6570\u548c\u975e\u8d28\u6570\u4e24\u90e8\u5206\u3002\n\u5047\u8bbe\u6709 p\u4e2a\u8d28\u6570\uff0c\u7b54\u6848\u5c31\u662f p!\u22c5(n\u2212p)!\n\n     '''\n", "class Solution:\n    def numPrimeArrangements(self, n: int) -> int:\n        def fac(m):\n            result = 1\n            for i in range(1,m+1):\n                result *= i\n            return result\n        def PrimeTell(m):\n            if m == 1 or m == 4:\n                return False\n            if m == 2 or m == 3:\n                return True\n            for j in range(2, m//2):\n                if m%j == 0:\n                    return False\n            return True\n        Sum = 0\n        for i in range(1,n+1):\n            if PrimeTell(i):\n                Sum += 1\n        return fac(Sum)*fac(n-Sum)% (10**9 + 7)\n", "class Solution:\n    def numPrimeArrangements(self, n: int) -> int:\n        if n == 1: return 1\n        p = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n        if n < 98:\n            lo,hi = 0,24\n            while lo <= hi:\n                mid = (hi-lo)//2 + lo\n                if p[mid] == n: \n                    idx = mid + 1\n                    break\n                elif p[mid-1] < n and n < p[mid]:\n                    idx = mid\n                    break\n                elif p[mid] > n:\n                    hi = mid-1\n                else:\n                    lo = mid+1\n        else:\n            idx = 25\n            \n        #print(idx)\n        \n        p_prod = 1\n        for i in range(1,idx+1):\n            p_prod = (p_prod*(i%1000000007))%1000000007\n        \n        c_prod = 1\n        for i in range(1,n-idx+1):\n            c_prod = (c_prod*(i%1000000007))%1000000007\n                \n        return (p_prod*c_prod) % 1000000007", "class Solution:\n    def numPrimeArrangements(self, n: int) -> int:\n        primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,\n                 61,67,71,73,79,83,89,97]\n        r = sum(1 for p in primes if p <= n)\n        a = 10**9 + 7\n        ans = 1\n        for i in range(1, min(r, n-r)+1):\n            ans *= (i % a)**2\n            ans %= a\n        for i in range(min(r, n-r)+1, max(r, n-r)+1):\n            ans *= i\n            ans %= a\n        return ans"]