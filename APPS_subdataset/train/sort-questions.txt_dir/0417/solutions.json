["class Solution:\n     def findMedianSortedArrays(self, nums1, nums2):\n         \"\"\"\n         :type nums1: List[int]\n         :type nums2: List[int]\n         :rtype: float\n         \"\"\"\n         nums = nums1 + nums2\n         nums.sort()\n         if len(nums) % 2 == 1:\n             return float(nums[len(nums)//2])\n         return (nums[len(nums)//2-1] + nums[len(nums)//2]) / 2", "class Solution:\n     def findMedianSortedArrays(self, nums1, nums2):\n         \"\"\"\n         :type nums1: List[int]\n         :type nums2: List[int]\n         :rtype: float\n         \"\"\"\n         nums1 = nums1 + nums2\n         nums1.sort()\n         len_nums1 = len(nums1)\n         if len_nums1%2 == 0:\n             return float((nums1[int(len_nums1/2)-1]+nums1[int(len_nums1/2)])/2)\n         else:\n             return float(nums1[int(len_nums1/2)])\n         \n", "class Solution:\n     def findMedianSortedArrays(self, nums1, nums2):\n         \"\"\"\n         :type nums1: List[int]\n         :type nums2: List[int]\n         :rtype: float\n         \"\"\"\n         nums1.extend(nums2)\n         nums1.sort()\n         size = len(nums1)\n         if (size  % 2):\n             return nums1[size//2]\n         else:\n             return (nums1[size//2] + nums1[size//2-1])/2", "class Solution:\n     def findMedianSortedArrays(self, nums1, nums2):\n         \"\"\"\n         :type nums1: List[int]\n         :type nums2: List[int]\n         :rtype: float\n         \"\"\"\n         nums = sorted(nums1 + nums2)\n         n = len(nums)\n         return nums[int(n/2)] if n%2==1 else (nums[int(n/2)]+nums[int(n/2)-1])/2.0"]