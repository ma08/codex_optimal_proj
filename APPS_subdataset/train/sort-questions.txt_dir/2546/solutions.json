["class Solution:\n    def numIdenticalPairs(self, nums: List[int]) -> int:\n        my_count = 0\n        my_dict = {}\n        for n in nums:\n            my_count += my_dict.get(n,0)\n            my_dict[n] = my_dict.get(n,0) +1\n        return my_count\n           \n\n", "class Solution:\n    def numIdenticalPairs(self, nums: List[int]) -> int:\n        hashMap = {}\n        res = 0\n   \n        for number in nums:            \n            if number in hashMap:\n                res += hashMap[number]\n                hashMap[number] += 1\n            else:\n                hashMap[number] = 1\n                \n        return res", "class Solution:\n    def numIdenticalPairs(self, nums: List[int]) -> int:\n        count = 0\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] == nums[j]:\n                    count += 1\n                    \n        return count", "class Solution:\n    def numIdenticalPairs(self, nums: List[int]) -> int:\n        for i in nums:\n            repeat = {}\n            n = 0\n            for i in nums:\n                if i in repeat:\n                    n += repeat[i]\n                    repeat[i] += 1\n                else:\n                    repeat[i] = 1\n        return n", "class Solution:\n    def numIdenticalPairs(self, nums: List[int]) -> int:\n        num_good = 0\n        for i in range(len(nums)):\n            first = nums[i]\n            for j in nums[i+1:]:\n                print((first, j))\n                if first == j:\n                    num_good += 1\n        return num_good\n", "class Solution:\n    def numIdenticalPairs(self, nums: List[int]) -> int:\n        #ans = 0\n        #for c in Counter(nums).values():\n        #    if c > 1:\n        #        ans += c * (c-1) // 2\n        #return ans\n        return sum((c*(c-1)//2 for c in Counter(nums).values()))", "class Solution:\n    def numIdenticalPairs(self, nums: List[int]) -> int:\n        good = 0\n        num_dict = {}\n        for num in nums:\n            if num in num_dict:\n                good += num_dict[num]\n                num_dict[num] += 1\n            else:\n                num_dict[num] = 1\n        return good", "class Solution:\n    def numIdenticalPairs(self, nums: List[int]) -> int:\n        uniques = set(nums)\n        count = 0\n        for unique in uniques:\n            count += nums.count(unique) * (nums.count(unique) - 1) / 2\n        return int(count)\n                    \n", "class Solution:\n    def numIdenticalPairs(self, nums: List[int]) -> int:\n        res, map = 0, {}\n        for num in nums:\n            if num not in map:\n                map[num] = 1\n            else:\n                res += map[num]\n                map[num] += 1\n        return res", "class Solution:\n    def numIdenticalPairs(self, nums: List[int]) -> int:\n        tracker = {}\n        \n        for num in nums:\n            if num not in tracker:\n                tracker[num] = 0\n            else:\n                tracker[num] += 1\n        \n        sum = 0\n        for num in tracker:\n            sum += tracker[num] * (tracker[num]+1) // 2\n        return sum", "class Solution:\n    def numIdenticalPairs(self, nums: List[int]) -> int:\n        count = 0\n        for i in range(len(nums)-1):\n            for j in range(i+1, len(nums)):\n                if nums[i]==nums[j]:\n                    count +=1\n        return count\n", "class Solution:\n    def numIdenticalPairs(self, nums: List[int]) -> int:\n        pairCount = 0\n        i = 0\n        while i < len(nums)-1:\n            j = i + 1\n            while j < len(nums):\n                if nums[i] == nums[j]:\n                    pairCount += 1\n                j+=1\n            i+=1\n        return pairCount\n", "class Solution:\n    def numIdenticalPairs(self, nums: List[int]) -> int:\n        counter = collections.Counter(nums)\n        answer = 0\n        \n        for k, v in counter.items():\n            answer += v * (v - 1) // 2\n        return answer"]