["def cycle(sequence):\n    for j, x in enumerate(sequence):\n        i = sequence.index(x)\n        if 0 <= i < j:\n            return [i, j - i]\n    return []\n", "def cycle(sequence):\n    found = {}\n    for i, item in enumerate(sequence):\n        if item in found:\n            return [found[item], i - found[item]]\n        found[item] = i\n    else:\n        return []", "def cycle(sequence):\n    collector = []\n    for s in sequence:\n        if s in collector:\n            mu = collector.index(s)\n            return [mu, len(collector) - mu]\n        collector.append(s)\n    return []", "def cycle(sequence):\n    d = {}\n    for i, x in enumerate(sequence):\n        if x in d:\n            return [d[x], i - d[x]]\n        d[x] = i\n    return []", "def cycle(seq):\n    for i, n in enumerate(seq):\n        if n in seq[i+1:]:\n            return [i, seq.index(n, i+1) - i]\n    return []", "def cycle(lst):\n    return next(([i, lst.index(n, i+1)-i] for i, n in enumerate(lst) if n in lst[i+1:]), [])\n", "def cycle(sequence):\n    memo = {}\n    for i, item in enumerate(sequence):\n        if item in memo:\n            return [memo[item], i - memo[item]]\n        memo[item] = i\n    return []", "import re\n\n\ndef cycle(sequence):\n    string = ' ' + ' '.join(str(n) for n in sequence)\n    pattern = re.compile(r'([\\d ]+)(\\1)')\n    matches = pattern.search(string)\n    \n    if matches is None:\n        return []\n        \n    seq = matches.group(1)\n    sequence = seq.strip().split()\n    not_in = int(string.replace(seq, '') or 0)\n    return [not_in, 1 if len(set(sequence)) == 1 else len(sequence)]", "def cycle(seq):\n  \n  seen = dict()\n  \n  for i, v in enumerate(seq):\n    if v in seen:\n      return [seen[v], i - seen[v]]\n    else:\n      seen[v] = i\n  \n  return []"]