["class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        i, j = 0, len(arr) - 1\n        median = arr[(len(arr) - 1) // 2]\n        while len(arr) + i - j <= k:\n            if median - arr[i] > arr[j] - median:\n                i = i + 1\n            else:\n                j = j - 1\n        return arr[:i] + arr[j + 1:]", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        ans =[]\n        lt = 0\n        pt = len(arr)-1\n        m = arr[(len(arr)-1)//2]\n        for i in range(k):\n            left = abs(arr[lt] - m)\n            right = abs(arr[pt] - m)\n            if right >= left:\n                ans.append(arr[pt])\n                pt-=1\n            else:\n                ans.append(arr[lt])\n                lt+=1\n        return ans", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        n=len(arr)\n        m=arr[(n-1)//2]\n        res=[]\n        i,j=0,n-1\n        while k>0:\n            if arr[j]-m>=m-arr[i]:\n                res.append(arr[j])\n                j-=1\n            else:\n                res.append(arr[i])\n                i+=1\n            k-=1\n        return res\n            \n            \n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        \n        n = len(arr)\n        \n        heap = []\n        for num in arr:\n            if len(heap) >= n // 2 + 1:\n                heapq.heappushpop(heap, num)\n            else:\n                heapq.heappush(heap, num)\n                \n        median = heap[0]\n        \n        heap = []\n        for num in arr:\n            if len(heap) >= k:\n                heapq.heappushpop(heap, (abs(median - num), num))\n            else:\n                heapq.heappush(heap, (abs(median - num), num))\n                \n        return [num for (_, num) in heap]\n                                  \n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        n = len(arr)\n        if not arr or n == 0:\n            return []\n        \n        arr.sort()\n        m = arr[(n - 1) // 2]\n        \n        return sorted(arr, reverse=True, key = lambda x: (abs(x - m), x))[:k]", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        median = sorted(arr)[(len(arr) - 1) // 2]\n        return sorted(arr, key=lambda x: (-abs(x-median), -x))[:k]", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        nums = sorted(arr)\n        median = nums[(len(nums) - 1) // 2]\n        \n        arr.sort(key = lambda x: ((abs(x - median)), x), reverse=True)\n        \n        res = []\n        \n        for num in arr:\n            res.append(num)\n            k -= 1\n            if k == 0:\n                break\n\n        return res\n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        N = len(arr)\n        \n        arr.sort()\n        median = arr[(N-1)//2]\n        \n        heap = []\n        for n in arr:\n            heapq.heappush(heap, (-abs(n - median), -n, n))\n    \n        ans = []\n        for _ in range(k):\n            ans.append(heapq.heappop(heap)[-1])\n        return ans", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        ## APPROACH : HEAP ##\n        import heapq\n        heap = []\n        arr = sorted(arr)\n        median = arr[( len(arr)-1 )//2]\n        for i,num in enumerate(arr):\n            heapq.heappush( heap, (abs(num - median), num))\n            if len(heap) > k:\n                heapq.heappop(heap)\n        return [ item[1] for item in heap ]", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        n = len(arr)\n        m = arr[(n-1)//2]\n        strong = []\n        # for i in range(len(arr)):\n        i,j = 0, len(arr)-1\n        while i<=j:\n            if abs(arr[i]-m) <= abs(arr[j]-m):\n                strong.append(arr[j])\n                j -= 1\n            else:\n                strong.append(arr[i])\n                i += 1\n        return(strong[:k])    \n            \n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        # median = 0\n        \n        # if len(arr)%2 == 0:\n        #     median = arr[int((len(arr)-1)/2)]\n        # else:\n        median = arr[int((len(arr)-1)/2)]\n        strong = {}\n        # print(median)\n        \n        for x in arr:\n            val = abs(x - median)\n            if val not in list(strong.keys()):\n                strong[abs(x -median)] = [x]\n            else:\n                strong[abs(x -median)].append(x)\n                \n            \n        strong = sorted(list(strong.items()), reverse = True)\n        # print(strong)\n        strongest = []\n        for x in strong:\n            # if len(strongest) == k:\n            #     break\n            # else:\n                # print(x)\n            for val in sorted(x[1],reverse = True):\n                if len(strongest) == k:\n                    break\n                # print(val)\n                strongest.append(val)\n                # if len(strongest) == k:\n                #     break\n        \n        return strongest\n         \n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        mid = (len(arr) - 1) // 2\n        m = arr[mid]\n        temp = sorted(arr, key=lambda x : abs(x - m))\n        # temp.reverse()\n        return temp[-1*k:]", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        \n        if k >= len(arr):\n            return arr\n        \n        median = self.get_median(arr)\n  \n        results = [(math.fabs(arr[x]-median), arr[x]) for x in range(len(arr))]\n        results.sort()\n\n        return [results[-i-1][1] for i in range(k)]\n\n    def get_median(self, arr):  \n        \n        arr_sorted = sorted(arr)\n        idx = int((len(arr)-1)/2)\n        return arr_sorted[idx]\n        \n        \n        \n        \n        \n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        n = len(arr)\n        if k==n: return arr\n        \n        arr.sort()\n        med = arr[(len(arr)-1)//2]\n        sorted_diff = sorted(arr, key=lambda x: abs(x-med))\n        # print (sorted_diff)\n        return sorted_diff[-k:]  \n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        res=[]\n        val=arr[(len(arr)-1)//2]\n        arr.sort(key=lambda x: (abs(x-val),x),reverse=True)\n        return arr[:k]", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        med = sorted(arr)[(len(arr)-1)//2]\n        return sorted(arr, key=lambda x:(abs(x-med),x), reverse=True)[:k]", "class Solution:\n    def getStrongest(self, lis: List[int], k: int) -> List[int]:\n        n = len(lis)\n        lis.sort()\n        med = lis[(n-1)//2]\n        ans=[[abs(med-lis[i]),lis[i]] for i in range(n)]\n        ans.sort(reverse = True)\n        fin=[]\n        for i in range(k):\n            fin.append(ans[i][1])\n        return fin\n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        res = []\n        valuearr = []\n        arr.sort()\n        m = arr[int((len(arr)-1)/2)]\n        # if len(arr) % 2 == 0:\n        #     m = (arr[int(len(arr) / 2)] + arr[int(len(arr) / 2 - 1)]) / 2\n        # else:\n        #     m = arr[int((len(arr) - 1) / 2)]\n\n        for i in arr:\n            value = []\n            value.append(i)\n            value.append(abs(i - m))\n            valuearr.append(value)\n\n        valuearr.sort(key=lambda x: (x[1], x[0]), reverse=True)\n\n        for i in range(k):\n            res.append(valuearr[i][0])\n\n        # if valuearr[k-1][1] != valuearr[k][1]:\n        #     res.append(valuearr[k-1][0])\n        # else:\n        #     if valuearr[k-1][0] > valuearr[k][0]:\n        #         res.append(valuearr[k-1][0])\n        #     else:\n        #         res.append(valuearr[k][0])\n\n        return res", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        \n        # Find median\n        n =  len(arr)\n        arr_pair = [(i,arr[i]) for i in range(n)]\n        arr_pair.sort(key=lambda x: x[1])\n        median = arr_pair[(n-1)//2][1]\n        max_val = max([abs(x) for x in arr])\n\n        # Compute distance from median and sort\n        arr_pair = [(x[0],abs(x[1]-median)) for x in arr_pair]\n        arr_pair.sort(key=lambda x: (x[1],arr[x[0]]))\n        \n        return [arr[x[0]] for x in arr_pair[-k:]]", "class Solution:\n    def get_median(self, arr):\n        arr.sort()\n        n = len(arr)\n        \n        return arr[(n-1)//2]\n        \n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        StrengthIndexAndVal = collections.namedtuple('StrengthIndexAndVal', ('strength', 'index', 'val'))\n        \n        if len(arr) == 0:\n            return []\n        \n        m = self.get_median(arr)\n        heap = []\n        for i, val in enumerate(arr):\n            siv = StrengthIndexAndVal(abs(val - m), i, val)\n            if len(heap) == k:\n                heapq.heappushpop(heap, siv)\n            else:\n                heapq.heappush(heap, siv)\n                \n        return [x.val for x in heap]", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        n = len(arr)\n        d = {}\n        sort = sorted(arr)\n        if n % 2 == 1:\n            m = sort[n//2]\n        else:\n            m = sort[(n-1)//2]\n        \n        for num in arr:\n            val = abs(num-m)\n            if val not in d:\n                d[val] = []\n            d[val].append(num)\n            \n        items = sorted(list(d.items()), reverse=True)\n        i = 0\n        ret = []\n        while i < len(items) and k > 0:\n            if k >= len(items[i][1]):\n                ret.extend(items[i][1])\n                k -= len(items[i][1])\n            else:\n                break\n            i += 1\n        \n        if k > 0:\n            items[i][1].sort()\n            for j in range(k):\n                ret.append(items[i][1][len(items[i][1])-j-1])\n        return ret\n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        arr_len = len(arr)\n        m = arr[(arr_len - 1)//2]\n        i,j = 0, arr_len - 1\n        toret = []\n        size = 0\n        while i <= j and size < k:\n            if abs(arr[i] - m) > abs(arr[j] - m):\n                toret.append(arr[i])\n                i += 1\n            else:\n                toret.append(arr[j])\n                j -= 1\n            size += 1\n        return toret", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        # get median of an array\n        median = sorted(arr)[(len(arr) - 1) // 2]\n        \n        # initial sort\n        arr.sort()\n        \n        # sort based on |arr[i] - median|\n        arr.sort(key=lambda x: abs(x - median))\n        \n        return arr[(len(arr) - k):]", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        '''\n        1. find the median of the arr\n        2. sort the list based on |arr[i]-m | > |arr[j] - m|\n        3. select the top k strongest elements\n        '''\n        \n        arr.sort()\n        lastPointer = -1\n        startPointer = 0\n        mInd = (len(arr)-1)//2\n        m = arr[mInd]\n        res = []\n        for i in range(k):\n            if abs(arr[lastPointer] - m) >= abs(arr[startPointer] - m):\n                res.append(arr[lastPointer])\n                lastPointer -= 1\n            else:\n                res.append(arr[startPointer])\n                startPointer += 1\n        return res\n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        n=len(arr)\n        arr=sorted(arr)\n        m=-1\n        if(n%2==0):\n            m=arr[(n-1)//2]\n        else:\n            m=arr[n//2]\n        ans=[]\n        left=0\n        right=n-1\n        while(k>0):\n            if(abs(arr[left]-m)>abs(arr[right]-m)):\n                ans.append(arr[left])\n                left+=1\n            else:\n                ans.append(arr[right])\n                right-=1\n            k-=1\n        return ans\n", "class Solution:\n#     def getStrongest(self, arr: List[int], k: int) -> List[int]:\n#         n = len(arr)\n#         arr = sorted(arr)\n#         med_idx = (n-1) // 2\n#         med_val = arr[med_idx]\n        \n#         dist = []\n#         for i in range(len(arr)):\n#             dist.append((abs(arr[i] - med_val), arr[i], i))\n        \n#         dist.sort(key=lambda x: (x[0], x[1]), reverse=True)\n        \n#         ans = []\n#         for i in range(len(dist)):\n#             if i == k:\n#                 break\n#             ans.append(arr[dist[i][2]])\n#         return ans\n    \n    # def getStrongest(self, arr: List[int], k: int) -> List[int]:\n    #     m = sorted(arr)[(len(arr) - 1) // 2]\n    #     return sorted(arr, reverse=True, key = lambda x: (abs(x - m), x))[:k]\n    \n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        m = arr[(len(arr) - 1) // 2]\n        arr.sort(reverse=True, key=lambda x: (abs(x-m), x))\n        return arr[:k]", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        # assusing you cannot use the median function\n        median = sorted(arr)[(len(arr) -1) //2]\n        median_sorted_array = sorted(( (i, val) for i, val in enumerate(arr)), key = lambda x: (abs(x[1] - median), x[1]), reverse=True)\n        return [x[1] for x in median_sorted_array[:k]]\n        \n", "import random\n\nclass Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        median = sorted(arr)[(len(arr)-1)//2]\n        return sorted(arr,key = lambda x: [abs(x-median),x],reverse=True )[:k]", "class Solution:\n\\tdef getStrongest(self, arr: List[int], k: int) -> List[int]:\n\\t\\tmedian = sorted(arr)[(len(arr)-1)//2]\n\\t\\treturn sorted(arr,key = lambda x: [abs(x-median),x],reverse=True )[:k]", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        import heapq\n        n = len(arr)\n        \n        sort = sorted(arr)\n        if n % 2 == 1:\n            m = sort[n//2]\n        else:\n            m = sort[(n-1)//2]\n        \n        heap = []\n        heapq.heapify(heap)\n        for num in arr:\n            val = abs(num-m)\n            heapq.heappush(heap, (-val, -num))\n        \n        ret = []\n        for i in range(k):\n            val, num = heapq.heappop(heap)\n            ret.append(-num)\n        return ret\n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        res = []\n        arr.sort()\n        j = len(arr)-1\n        if(j==0):\n            return arr\n        median = arr[j//2]\n        i = 0\n        count = 1\n        while(count <= k):\n            if(abs(arr[i]-median)>abs(arr[j]-median)):\n                res.append(arr[i])\n                i +=1\n            elif(abs(arr[i]-median)==abs(arr[j]-median)):\n                res.append(arr[j])\n                j-=1\n            else:\n                res.append(arr[j])\n                j-=1\n            count +=1\n        return res", "import heapq\nclass Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        m = arr[(len(arr) - 1)//2]\n        for i in range(len(arr)):\n            arr[i] = (abs(m-arr[i]), arr[i])\n        arr.sort(reverse=True)\n        return [arr[i][1] for i in range(k)]\n        \n        \n            \n        \n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        N = len(arr)\n        median = arr[(N-1) // 2]\n        # easy to see that in the sorted array, if x is before y and smaller than the \n        # median, x is stronger than y, and likewise if y is after x and both are after the median, y is stronger than x.\n        # so only need to check either end, since we know arr[0] and arr[N-1] are\n        # the only candidates for 'strength'\n        \n        lp = 0\n        rp = N-1\n        \n        output = []\n        for i in range(k):\n            lps = abs(arr[lp] - median)\n            rps = abs(arr[rp] - median)\n            if rps >= lps:\n                output.append(arr[rp])\n                rp -= 1\n                continue\n            else: #rps >= lps. if equal we choose the right value\n                output.append(arr[lp])\n                lp += 1\n        return output\n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        h = (len(arr)-1) // 2\n        median = arr[h]\n        count = 0            \n        result = []\n        i = 0\n        j = len(arr) - 1\n        while count < k and i <= j:\n            strengthI = abs(arr[i] - median)\n            strengthJ = abs(arr[j] - median)\n            if strengthI == strengthJ:\n                if arr[i] > arr[j]:\n                    result.append(arr[i])                    \n                    i += 1\n                else:\n                    result.append(arr[j])                    \n                    j -= 1\n            elif strengthI > strengthJ:\n                result.append(arr[i])                    \n                i += 1\n            else:\n                result.append(arr[j])                    \n                j -= 1\n            count += 1\n                    \n        return result                \n            \n", "class Solution:\n    # Time: O(n*log(n))\n    # Space: O(n)\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        median = arr[(len(arr) - 1)//2]\n        res, i, j = [], 0, len(arr) - 1\n        while i <= j and k:\n            if abs(arr[i] - median) > abs(arr[j] - median):\n                res.append(arr[i])\n                i += 1\n            else:\n                res.append(arr[j])\n                j -= 1       \n            k -= 1\n        return res", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        n = len(arr)\n        median = arr[(n - 1) // 2]\n        i = 0\n        j = n - 1\n        ans = []\n        for _ in range(k):\n            s1 = abs(arr[i] - median)\n            s2 = abs(arr[j] - median)\n            if s1 > s2:\n                ans.append(arr[i])\n                i += 1\n            elif s1 == s2:\n                if arr[i] > arr[j]:\n                    ans.append(arr[i])\n                    i += 1\n                else:\n                    ans.append(arr[j])\n                j -= 1\n            else:\n                ans.append(arr[j])\n                j -= 1\n        return ans", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        start, end = 0, len(arr) - 1\n        res = []\n        l = len(arr)\n        med = arr[end // 2] \n        is_greater = lambda x, y: abs(x - med) > abs(y - med)\n        while end >= start:\n            # 3 cases - equality is a separate case\n            if is_greater(arr[start], arr[end]):\n                res.append(arr[start])\n                start += 1 \n            else:\n                res.append(arr[end])\n                end -= 1\n        return res[:k]", "from typing import List\nclass Solution:\n    def strengths(self,arr,length):\n      ans = []\n      m = arr[(length-1)//2]\n      for i in arr:\n        ans.append(abs(m-i))\n      return ans\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n      length = len(arr)\n      ans = []\n      arr.sort()\n      strength = self.strengths(arr,length)\n      count = 0\n      i = 0\n      a = length - 1\n      while count < k and i != a:\n        # print(count,k)\n        if strength[a] > strength[i]:\n          ans.append(arr[a])\n          a -= 1\n        elif strength[a] < strength[i]:\n          ans.append(arr[i])\n          i += 1\n        else:\n          if arr[a] > arr[i]:\n            ans.append(arr[a])\n            a -= 1\n          else:\n            ans.append(arr[i])\n            i += 1\n        count += 1\n      if count < k and i==a:\n        ans.append(arr[(length-1)//2])\n      return ans\n        \n", "from collections import defaultdict\nclass Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        \n        ## Method 1\n        # \u8ba1\u7b97median\n        # \u6328\u4e2a\u8ba1\u7b97\u7edd\u5bf9\u503c\uff0c\u4fdd\u5b58(key:abs,value:[num])\n        # key[\u4ece\u5927\u5230\u5c0f]\uff0cvalue\u4ece\u5927\u5230\u5c0f\u3002res\u5230\u8fbek\u7684\u957f\u5ea6\uff0c\u5c31return\n        \n        ## Method 2\n        # \u8ba1\u7b97median\n        # \u5728\u6392\u8fc7\u5e8f\u7684list\u4e2d\uff0c\u627e\u5230\u6700\u5de6\u548c\u6700\u53f3 \u5bf9\u6bd4\u4ed6\u4eec\u7684abs\uff08x-median\uff09\n        # \u5982\u679cabs\u4e00\u6837\uff0c\u5219\u6bd4\u8f83\u4ed6\u4eec\u7684\u539f\u672c\u5927\u5c0f\u3002\n        # \u4e0d\u7136\u5927\u7684\u90a3\u4e2a\u4e22\u8fdb\u53bb\uff0c\u5927\u7684\u6307\u9488\u524d\u8fdb\uff0c\u5c0f\u7684\u6307\u9488\u7559\u5728\u539f\u4f4d\n        # \u76f4\u5230k = 0\n        \n        arr = sorted(arr)\n        n = len(arr)\n        median = arr[(n-1)//2]\n        \n        l,r = 0, n-1\n        res = []\n        \n        for i in range(k):\n            if abs(arr[l] - median) > abs(arr[r] - median):\n                res.append(arr[l])\n                l += 1\n            else:\n                res.append(arr[r])\n                r -= 1\n        \n        return res\n        \n        \n        \n        \n        \n        \n        \n        \n        \n#         n = len(arr)\n#         new_a = sorted(arr)\n#         median = new_a[(n-1)//2]\n#         d = defaultdict(list)\n        \n#         for x in arr:\n#             d[abs(x-median)].append(x)\n        \n#         d = sorted(d.items(), key = lambda x: x[0],reverse = 1)\n#         res = []\n#         for x in d:\n#             if len(x[1]) <= k:\n#                 res += x[1]\n#                 k -= len(x[1])\n#             else:\n#                 tar = sorted(x[1])[::-1]\n#                 i = 0\n#                 while k > 0:\n#                     res.append(tar[i])\n#                     k-=1\n#                     i += 1\n#                 return res\n#         return res\n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        m = (len(arr) - 1) // 2\n        i = 0\n        j = len(arr) - 1\n\n        result = []\n        while i <= j and len(result) < k:\n            if abs(arr[i] - arr[m]) > abs(arr[j] - arr[m]):\n                result.append(arr[i])\n                i += 1\n            else:\n                result.append(arr[j])\n                j -= 1\n\n        return result\n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        \n        if len (arr) == 0:\n            return []\n        \n        if k == len(arr):\n            return sorted(arr)\n        \n        arr.sort()\n        \n        l = len(arr)\n        \n        med = arr[(l-1)//2]\n        \n        arr = [(abs(n-med),n) for n in arr]\n        \n        from functools import cmp_to_key\n        \n        def cmp (x,y):\n            \n            if x[0] == y[0]:\n                if x[1] > y[1]:\n                    return -1\n                elif x[1] < y[1]:\n                    return 1\n                else:\n                    return 0\n            elif x[0] > y[0]:\n                return -1\n            else:\n                return 1\n        \n        res = sorted (arr, key=cmp_to_key(cmp))\n        #print (res)\n        \n        return [res[i][1] for i in range (k)]", "class Solution:\n#     def getStrongest(self, arr: List[int], k: int) -> List[int]:\n#         n = len(arr)\n#         arr = sorted(arr)\n#         med_idx = (n-1) // 2\n#         med_val = arr[med_idx]\n        \n#         dist = []\n#         for i in range(len(arr)):\n#             dist.append((abs(arr[i] - med_val), arr[i], i))\n        \n#         dist.sort(key=lambda x: (x[0], x[1]), reverse=True)\n        \n#         ans = []\n#         for i in range(len(dist)):\n#             if i == k:\n#                 break\n#             ans.append(arr[dist[i][2]])\n#         return ans\n    \n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        m = sorted(arr)[(len(arr) - 1) // 2]\n        return sorted(arr, reverse=True, key = lambda x: (abs(x - m), x))[:k]", "from collections import defaultdict\nclass Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        \n        # \u8ba1\u7b97median\n        # \u6328\u4e2a\u8ba1\u7b97\u7edd\u5bf9\u503c\uff0c\u4fdd\u5b58(key:abs,value:[num])\n        # key[\u4ece\u5927\u5230\u5c0f]\uff0cvalue\u4ece\u5927\u5230\u5c0f\u3002res\u5230\u8fbek\u7684\u957f\u5ea6\uff0c\u5c31return\n        \n        n = len(arr)\n        new_a = sorted(arr)\n        median = new_a[(n-1)//2]\n        d = defaultdict(list)\n        \n        for x in arr:\n            d[abs(x-median)].append(x)\n        \n        d = sorted(d.items(), key = lambda x: x[0],reverse = 1)\n        res = []\n        for x in d:\n            if len(x[1]) <= k:\n                res += x[1]\n                k -= len(x[1])\n            else:\n                tar = sorted(x[1])[::-1]\n                i = 0\n                while k > 0:\n                    res.append(tar[i])\n                    k-=1\n                    i += 1\n                return res\n        return res", "import heapq\nclass Solution:\n    \n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        \n        arr  = sorted(arr)\n        length = len(arr) \n        #mid = len(arr) // 2\n        median = arr[(len(arr) - 1) // 2]\n        #median = (sorted_array[length // 2] + sorted_array[(length-1)//2])/2\n        print()\n        print(median)\n        heap = []\n        cnt = k\n        for i in range(length):\n            heapq.heappush(heap, (abs(arr[i] - median), arr[i]))\n            cnt -= 1\n            if cnt < 0:\n                heapq.heappop(heap)\n        \n        res = []\n        while heap:\n            res.append(heapq.heappop(heap)[1])\n            \n        return res\n                \n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        sorted_arr = sorted(arr)\n        m = sorted_arr[(len(arr)-1)//2]\n        \n        num_dist = [(e,abs(e-m)) for e in sorted_arr]\n        num_dist.sort(key=lambda x:x[0],reverse=True)\n        num_dist.sort(key=lambda x:x[1],reverse=True)\n        \n        ans = [e[0] for e in num_dist]\n        return ans[:k]", "class Solution:\n    \n    def getStrongest(self, arr: List[int], K: int) -> List[int]:\n        arr.sort()\n        length = len(arr)\n        res = arr[(length-1)//2]\n        i = 0\n        j = length-1\n        result = []\n        while K>0:\n            a = abs(arr[i]-res)\n            b = abs(arr[j]-res)\n            if a>b or (a==b and arr[i]>arr[j]):\n                result.append(arr[i])\n                i+=1\n            else:\n                result.append(arr[j])\n                j-=1\n            K-=1\n        return result", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr_new = sorted(arr)\n        med = arr_new[int((len(arr)-1)/2)]\n        \n        i = 0\n        j = 1\n        output = []\n        while True:\n            if len(output)>=k:\n                break\n            elif abs(arr_new[-j]-med) >= abs(arr_new[i]-med):\n                output.append(arr_new[-j])\n                j += 1\n            else:\n                output.append(arr_new[i])\n                i += 1\n        \n        return output\n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        \n        \n        median: int = arr[(len(arr) - 1) // 2]\n        \n        \n        ans: List[int] = []\n            \n        left: int = 0\n        right: int = len(arr) - 1\n        \n        while len(ans) < k:\n            if abs(arr[left] - median) > abs(arr[right] - median):\n                ans.append(arr[left])\n                left += 1\n            else:\n                ans.append(arr[right])\n                right -= 1\n                \n        return ans", "from queue import PriorityQueue\nclass Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        \n        if not arr or len(arr) < 1:\n            return []\n        \n        if len(arr) == 1:\n            return arr\n                    \n        arr.sort()\n        heap = []\n        median = arr[(len(arr)-1)//2]\n        \n        \n        for x in arr:\n            heapq.heappush(heap,(abs(x-median), x))\n            if len(heap) > k:\n                heapq.heappop(heap)\n                \n        return [heapq.heappop(heap)[1] for _ in range(k)]\n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        n=len(arr)\n        arr.sort(reverse=True)\n        m=arr[ceil((n-1)/2)]\n        arr.sort(key=lambda x: abs(x-m), reverse=True)\n        return arr[:k]", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        median = arr[(len(arr) - 1) // 2]\n        arr.sort(key = lambda x: (abs(x - median), x), reverse = True)\n        print((arr, median))\n        return arr[:k]", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        m=arr[(len(arr)-1)//2]\n        #print(m)\n        return sorted(arr,key=lambda x:(abs(x-m),x),reverse=True)[:k]", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        import functools\n        def comparator(n1,n2):\n            if abs(n1-m) > abs(n2-m):\n                return 1\n            if abs(n1-m) < abs(n2-m):\n                return -1\n            if abs(n1-m) == abs(n2-m):\n                if n1 > n2:\n                    return 1\n                elif n1 < n2:\n                    return -1\n                else:\n                    return 0\n            return 0\n        arr.sort()\n        n = len(arr)\n        m = arr[(n-1)//2]\n        new = sorted(arr, key= functools.cmp_to_key(comparator),reverse=True)\n        return new[:k]\n            \n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n            median = sorted(arr)[(len(arr)-1)//2]\n            return sorted(arr,key = lambda x: [abs(x-median),x],reverse=True )[:k]\n\n\n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        n=len(arr)\n        arr=sorted(arr)\n        m=-1\n        if(n%2==0):\n            m=arr[(n-1)//2]\n        else:\n            m=arr[n//2]\n        # print(arr)\n        # print(m)\n        arr=sorted(arr,key=lambda x:(abs(x-m),x))\n        # print(arr)\n        return arr[-k:]", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        median = arr[(len(arr)-1)//2]\n        res,i,j=[],0,len(arr)-1\n        while i<=j and k:\n            if abs(arr[i]-median) > abs(arr[j]-median):\n                res.append(arr[i])\n                i+=1\n            else:\n                res.append(arr[j])\n                j-=1\n            k-=1\n        return res", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        s = sorted(arr)\n        i = (len(arr)-1)//2\n        m = s[i]\n        \n        strengths = []\n        \n        for item in s:\n            st = abs(item-m)\n            strengths.append((st, item))\n        \n        sorted_strengths = sorted(strengths, reverse=True)\n        sorted_vals = []\n        \n        for ss in sorted_strengths:\n            sorted_vals.append(ss[1])\n            \n        return sorted_vals[:k]\n        \n", "import heapq\n\nclass Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        index = len(arr) // 2 - (1-len(arr) % 2) \n        median = sorted(arr)[index]\n        \n        heap = []\n        for i, el in enumerate(arr):\n            heapq.heappush(heap, (-abs(el-median), -el))\n         \n        els = heapq.nsmallest(k, heap, key = lambda x: (x[0], x[1]))\n        \n        return [-el[1] for el in els]\n        \n        \n        \n        \n        \n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        \n        out = []\n        \n        arr.sort()\n        \n        l = 0\n        h = len(arr) - 1\n        \n        m = arr[int(h/2)]\n        \n        while(l<=h):\n            if(abs(arr[l]-m)>abs(arr[h]-m)):\n                out.append(arr[l])\n                l+=1\n            else:\n                out.append(arr[h])\n                h-=1\n                \n        return out[0:k]\n            \n", "class Solution(object):\n    def sign(self, num):\n        if num==0:\n            return 0\n        elif num>0:\n            return 1\n        else:\n            return -1\n    def getStrongest(self, arr, k):\n        \\\"\\\"\\\"\n        :type arr: List[int]\n        :type k: int\n        :rtype: List[int]\n        \\\"\\\"\\\"\n        #from numpy import sign\n        arr=sorted(arr)\n        le=len(arr)\n        if le==0:\n            return []\n        median=arr[int((le-1)/2)]\n        strong=sorted([(abs(median-l),self.sign(l-median)) for l in arr])[-k:]\n        #print(median, [abs(median-l)+Solution.sign([],l-median) for l in arr], strong)\n        return [median+boo*i for i, boo in strong]\n        ", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        cnt = len(arr)\n        arr = sorted(arr)\n        mid_id = (cnt - 1) // 2\n        mid = arr[mid_id]\n        if k == cnt: return arr\n        \n        curr = 0\n        res = []\n        left, right = 0, cnt - 1\n        while curr < k:\n            if abs(arr[right] - mid) >= abs(mid - arr[left]):\n                res.append(arr[right])\n                right -= 1\n            else:\n                res.append(arr[left])\n                left += 1\n            curr += 1\n        \n        return res\n", "class Solution:\n    # arr min 1 item\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr = sorted(arr)\n        l = len(arr)\n        \n        # median = average of middle 2 if even\n        if l % 2 == 0:\n            median =  arr[(l - 1) // 2]\n        else:\n            median = arr[l//2]\n        print(median)\n        s = sorted(arr, key = lambda x: (-abs(x - median), -(x)))\n        print(s)\n        return s[:k]", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        median = sorted(arr)[(len(arr) - 1) // 2]\n        return heapq.nsmallest(k, arr, key=lambda x: (-abs(x-median), -x))", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        n = len(arr)\n        m = arr[(n-1)//2]\n        ans = []\n        lo, hi = 0, n-1\n        while lo <= hi and k > 0:\n            dlo, dhi = abs(arr[lo]-m), abs(arr[hi]-m)\n            if dlo > dhi:\n                ans.append(arr[lo])\n                lo += 1\n            else:\n                ans.append(arr[hi])\n                hi -= 1\n            k -= 1\n        return ans\n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        n = len(arr)\n        median = arr[(n - 1) // 2]\n        left, right = 0, n - 1\n        result = []\n        while k > 0 and left <= right:\n            if arr[right] - median >= median - arr[left]:\n                result.append(arr[right])\n                right = right - 1\n            else:\n                result.append(arr[left])\n                left = left + 1\n            k = k - 1\n        return result\n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        n= len(arr)\n        if k == n:\n            return arr\n        \n        arr.sort()\n        median = arr[(n-1)//2]\n        \n        left, right = 0, n-1\n        ans = []\n        while k > 0 and left <= right:\n            if abs(arr[left]-median) > abs(arr[right]-median):\n                ans.append(arr[left])\n                left += 1\n            else:\n                ans.append(arr[right])\n                right -= 1\n            k -= 1\n                \n        return ans\n        \n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr = sorted(arr)\n        n = len(arr)\n        if k==n:\n            return arr\n        if n % 2 ==0:\n            median = arr[n//2-1]\n        else:\n            median = arr[n//2]\n        i = 0\n        j = n-1\n        answer = []\n        while True:\n            if arr[j] - median >= median - arr[i]:\n                answer.append(arr[j])\n                j-=1\n            else:\n                answer.append(arr[i])\n                i+=1\n            if len(answer)==k:\n                return answer\n            \n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        \n        #calc median\n        sarr = sorted(arr)\n        L = len(arr)\n        \n        if L / 2 % 1 == 0:\n        #    median = (sarr[int(L/2)] + sarr[int(L/2)-1]) / 2\n            median = sarr[int((L-1)/2)]\n        else:\n            median = sarr[int(L/2-.5)]\n        \n            \n        absm = [abs(a - median) for a in arr]\n        \n        tarr = [[absm[i], arr[i]] for i in range(L)]\n        \n        tarr = sorted(tarr, reverse=True)\n        \n        res = [tarr[i][1] for i in range(L) if i < k]\n        \n        return res", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        x = sorted(arr)\n        l = len(arr)\n       \n        median = x[(l-1)//2]\n        # print(x, median)\n        jj = sorted(list(range(len(arr))), key=lambda y: (abs(arr[y]-median), arr[y]), reverse=True)\n        # print(jj)\n        # print([(abs(arr[x]-median), x) for x in jj])\n        n = [arr[i] for i in jj]\n        # print(n)\n        return n[:k]    \n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        p = (len(arr) - 1)//2\n        med = arr[p];\n        \n        print(med)\n        a1 = arr[:p]\n        a2 = arr[p:]\n        \n        ans = []\n        while k > 0:\n            if len(a2) > 0 and len(a1) > 0:\n                diff = abs(a2[-1]-med) - abs(a1[0]-med)\n                if diff >= 0:\n                    ans.append(a2.pop(-1))\n                else:\n                    ans.append(a1.pop(0))\n            elif len(a2) > 0:\n                ans.append(a2.pop(-1))\n            elif len(a1) > 0:\n                ans.append(a1.pop(0))\n            k -= 1\n        return ans", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        \n        med = arr[int((len(arr) - 1) / 2)]\n        print(med)\n        f = []\n        while len(f) < k:\n            rv = abs(arr[-1] - med)\n            lv = abs(arr[0] - med)\n            \n            #print(arr[-1],arr[0])\n            #print(rv,lv)\n            \n            if rv >= lv:\n                f.append(arr.pop(-1))\n            else:\n                f.append(arr.pop(0))\n                \n        return f\n            \n            \n", "import heapq\n\nclass Solution:\n  def getStrongest(self, arr: List[int], k: int) -> List[int]:\n    n = len(arr)\n    if n==0:\n      return []\n    arr.sort()\n#    if n%2:\n#      median = ( arr[n//2] )\n#    else:\n#      median = ( arr[n//2] + arr[n//2-1] ) / 2\n    median = arr[(n-1)//2]\n    heap = [] # min heap\n    for num in arr:\n      strength = abs(num-median)\n      heapq.heappush( heap, (strength, num) )\n      if len(heap)>k:\n        heapq.heappop( heap )\n    ans = [ heap[i][1] for i in range(min(k, n)) ]\n    return ans\n  pass\n", "from typing import List\n\nclass Solution:\n    \n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        sorted_arrs = sorted(arr)\n        n = len(arr)\n        median = sorted_arrs[(n - 1) // 2]\n        vals = [(abs(val - median), val) for val in arr]\n        vals.sort()\n        return [val for comp, val in vals[-k:]]", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        median = sorted(arr)[(len(arr) - 1) // 2]\n        \n        # initial sort\n        arr.sort()\n        \n        # sort based on |arr[i] - median|\n        arr.sort(key=lambda x: abs(x - median))\n        \n        return arr[(len(arr) - k):]\n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        res = []\n        i = 0\n        j = len(arr) - 1\n        if(j == 0):\n            return arr\n        median = arr[j//2]\n        while len(res) < k:\n            if(abs(median - arr[i]) <= abs(arr[j] - median)):\n                res.append(arr[j])\n                j -= 1\n            else:\n                res.append(arr[i])\n                i += 1\n        return res", "class Solution:\n\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        median = arr[(len(arr) - 1)//2]\n        res, i, j = [], 0, len(arr) - 1\n        while i <= j and k:\n            if abs(arr[i] - median) > abs(arr[j] - median):\n                res.append(arr[i])\n                i += 1\n            else:\n                res.append(arr[j])\n                j -= 1       \n            k -= 1\n        return res\n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        m = arr[floor((len(arr)-1)/2)]\n        res = []\n        while len(res) < k:\n            if abs(arr[-1] - m) >= abs(arr[0] - m):\n                res.append(arr[-1])\n                del arr[-1]\n            else:\n                res.append(arr[0])\n                del arr[0]\n        return res", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        svals = collections.defaultdict(list)\n        \n        median  = sorted(arr)[(len(arr)-1)//2]\n  \n\n\n        for i in range(len(arr)):\n\n            svals[abs(arr[i]-median)].append(arr[i])\n            \n\n        \n        \n        svals = sorted(svals.items(),key = lambda x:-x[0])\n        \n    \n        \n        res = []\n        \n        count=0\n        for tuplee in svals:\n            flag = True\n            for i in sorted(tuplee[1],reverse=True):\n                res.append(i)\n                count+=1\n                \n                if count==k:\n                    flag = False\n                    break\n            if not flag:\n                break\n                \n        return res", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        n = len(arr)\n        mid = arr[(n - 1)//2]\n        h = collections.defaultdict(list)\n        for i in arr:\n            h[abs(i - mid)].append(i)\n            \n        sorted_data = sorted(h.items(), reverse = True)\n        res = []\n        #print(sorted_data)\n        #while k != 0:\n        for j in sorted_data:\n            while len(j[1]) != 0:\n                res.append(j[1].pop(-1))\n                k -= 1\n                if k == 0:\n                    return res\n        return res", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        if len(arr) == 1: return arr\n        arr.sort()\n        med_loc = (len(arr) - 1) // 2\n        median = arr[med_loc]\n        count = 0\n        ans = []\n        # arr.remove(median)\n        # arr = deque(arr)\n        while count < k:\n            if abs(arr[0] - median) > abs(arr[-1] - median):\n                ans.append(arr[0])\n                arr.pop(0)\n            else:\n                ans.append(arr[-1])\n                arr.pop()\n            count += 1\n        \n        return ans", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        median = arr[(len(arr)-1)//2]\n        count = 0\n        arry = []\n        while arr and len(arry)<k:\n            if (arr[-1] - median) >= (median-arr[0]) :\n                arry.append(arr[-1])\n                del arr[-1]\n            else:\n                arry.append(arr[0])\n                del arr[0]\n           \n        return arry", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        n=len(arr)\n        arr=sorted(arr)\n        m=-1\n        if(n%2==0):\n            m=arr[(n-1)//2]\n        else:\n            m=arr[n//2]\n        ans=[]\n        left=0\n        right=n-1\n        ind=0\n        while(ind<k):\n            if(abs(arr[left]-m)>abs(arr[right]-m)):\n                ans.append(arr[left])\n                left+=1\n            else:\n                ans.append(arr[right])\n                right-=1\n            ind+=1\n        return ans\n", "class Solution:\n    \n    def getStrongest2(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        m = arr[(len(arr) - 1) // 2]\n        dp = [[float('inf') for i in range(len(arr))] for i in range(len(arr))]\n        for i in range(len(arr)):\n            for j in range(len(arr)):\n                if abs(arr[i] - m) > abs(arr[j] - m):\n                    strong = arr[i]\n                elif abs(arr[i] - m) == abs(arr[j] - m):\n                    strong = arr[i] if arr[i]>arr[j] else arr[j]\n                else:\n                    strong = arr[j]\n                dp[i][j] = strong\n\n        for line in dp:\n            print(line)\n        print()\n        \n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        med = sorted(arr)[(len(arr)-1)//2]\n        return sorted(arr, key=lambda x:(abs(x-med),x))[-k:]", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        median = arr[(len(arr)-1)//2]\n        arry = []\n        while arr and len(arry)<k:\n            if (arr[-1] - median) >= (median-arr[0]) :\n                arry.append(arr[-1])\n                del arr[-1]\n            else:\n                arry.append(arr[0])\n                del arr[0]\n           \n        return arry", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        median = arr[(len(arr)-1)//2]\n        count = 0\n        arry = []\n        while arr and len(arry)<k:\n            if abs(arr[-1] - median) >= abs(arr[0]- median) :\n                arry.append(arr[-1])\n                del arr[-1]\n            else:\n                arry.append(arr[0])\n                del arr[0]\n           \n        return arry", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        n = len(arr)\n        m = arr[(n-1)//2]\n        strong = []\n        # for i in range(len(arr)):\n        i,j = 0, len(arr)-1\n        while i<=j:\n            if abs(arr[i]-m) <= abs(arr[j]-m):\n                strong.append(arr[j])\n                j -= 1\n            else:\n                strong.append(arr[i])\n                i += 1\n        return(strong[:k])\n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        x= sorted(arr)\n        m=x[int((len(x)-1)/2)]\n        i=0\n        j=len(arr)-1\n        strong=[]\n        while (i<=j):\n            if abs(x[i]-m) <= abs(x[j]-m):\n                strong.append(x[j])\n                j-=1\n            else:\n                strong.append(x[i])\n                i+=1\n                \n        return strong[:k]\n", "import heapq\n\nclass Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        index = len(arr) // 2 - (1-len(arr) % 2) \n        median = sorted(arr)[index]\n        \n        heap = []\n        for i, el in enumerate(arr):\n            heapq.heappush(heap, (abs(el-median), el))\n         \n        els = heapq.nlargest(k, heap, key = lambda x: (x[0], x[1]))\n        \n        return [el[1] for el in els]\n        \n        \n        \n        \n        \n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        median = sorted(arr)[(len(arr)-1)//2]\n        return sorted(arr,key = lambda x: [abs(x-median),x],reverse=True )[:k]\n        \n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        \n        sarr = sorted(arr)\n        L = len(arr)\n        \n        if L / 2 % 1 == 0:\n            median = sarr[int((L-1)/2)]\n        else:\n            median = sarr[int(L/2-.5)]\n        \n            \n        #absm = [abs(a - median) for a in arr]\n        \n        tarr = [[abs(arr[i] - median), arr[i]] for i in range(L)]\n        \n        tarr = sorted(tarr, reverse=True)\n        \n        res = [tarr[i][1] for i in range(L) if i < k]\n        \n        return res", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        median = arr[(len(arr)-1)//2]\n        count = 0\n        arry = []\n        while arr and len(arry)<k:\n            if abs(arr[0] - median) - abs(arr[-1]- median) >0:\n                arry.append(arr[0])\n                del arr[0]\n            elif abs(arr[-1] - median) - abs(arr[0]- median) >0:\n                arry.append(arr[-1])\n                del arr[-1]\n            elif abs(arr[-1] - median) == abs(arr[0]- median):\n                if arr[-1] < arr[0]:\n                    arry.append(arr[0])\n                    del arr[0]\n                else:\n                    arry.append(arr[-1])\n                    del arr[-1]\n        return arry", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        n = len(arr)\n        arr = sorted(arr)\n        med_idx = (n-1) // 2\n        med_val = arr[med_idx]\n        \n        dist = []\n        for i in range(len(arr)):\n            dist.append((abs(arr[i] - med_val), arr[i], i))\n        \n        dist.sort(key=lambda x: (x[0], x[1]), reverse=True)\n        \n        ans = []\n        for i in range(len(dist)):\n            if i == k:\n                break\n            ans.append(arr[dist[i][2]])\n        return ans", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        medVal = sorted(arr)[(len(arr)-1)//2]\n        return sorted(arr, key = lambda x: [abs(x - medVal), x], reverse = True)[:k]\n        \n        '''\n        sList = sorted(arr)\n        medianIndex = (len(arr)-1) // 2\n        medianValue = sList[medianIndex]\n        \n        strongList = [(abs(elem - medianValue), elem) for elem in sList]\n        #finalList = sorted(strongList, reverse = True, key=lambda x:x[0])\n        ht = {}\n        returnList = []\n        for elem in strongList:\n            if elem[0] in ht:\n                ht[elem[0]].append(elem[1])\n            else:\n                ht[elem[0]] = [elem[1]]\n                \n        for key in ht:\n            curr = sorted(ht[key], reverse = True)\n            returnList.append((key, curr))\n \n        finalList = sorted(returnList, reverse = True, key=lambda x:x[0])\n        newList = [elem[1] for elem in finalList]\n        newerList = [i for elem in newList for i in elem]\n        \n        return newerList[:k]\n        '''", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        if not k or not arr:\n            return []\n        \n        arr = sorted(arr)\n        m = arr[(len(arr) - 1) // 2]\n        \n        l = 0\n        r = len(arr) -1\n        ans = []\n        while k> 0 and l <= r:\n            if abs(arr[l] - m) > abs(arr[r] -m):\n                ans.append(arr[l])\n                l += 1\n            elif abs(arr[l] - m) == abs(arr[r] -m):\n                if arr[l] > arr[r]:\n                    ans.append(arr[l])\n                    l += 1\n                else:\n                    ans.append(arr[r])\n                    r -= 1\n            else:\n                ans.append(arr[r])\n                r -= 1\n            k -= 1\n        return ans\n        \n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        # K * n\n        temp = list(arr)\n        temp.sort()\n        median = 0\n        \n        median = temp[(len(temp) -1)  // 2]\n        \n        l = 0\n        r = len(arr) - 1\n        res = []\n        while k > 0:\n            if median - temp[l] <= temp[r] - median:\n                res.append(temp[r])\n                r -= 1\n            else:\n                res.append(temp[l])\n                l += 1\n            k -= 1\n        return res;\n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        n = len(arr)\n        arr.sort()\n        m = arr[(n-1)//2]\n        \n        res = []\n        l = 0\n        r = n-1\n        while k > 0:\n            c1 = abs(arr[l]-m)\n            c2 = abs(arr[r]-m)\n            \n            if c1 > c2:\n                res.append(arr[l])\n                l += 1\n            else:\n                res.append(arr[r])\n                r -= 1\n            k -= 1\n        return res", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        ans = []\n        arr.sort()\n        lo, hi = 0, len(arr) - 1\n        m = arr[hi // 2]\n\n        while lo <= hi and len(ans) < k:\n            if abs(arr[hi] - m) < abs(arr[lo] - m):\n                ans.append(arr[lo])\n                lo += 1\n            else:\n                ans.append(arr[hi])\n                hi -= 1\n        return ans", "class Solution:\n    def getStrongest(self, arr, k):\n        n = len(arr)\n        arr = sorted(arr)\n        m = arr[(n - 1) // 2]\n        i, j = 0, n - 1\n        while k > 0:\n            if arr[j] - m >= m - arr[i]:\n                j -= 1\n            else:\n                i += 1\n            k -= 1\n        return arr[:i] + arr[j+1:]", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        a = arr\n        a.sort()\n        n = len(a)\n        m = a[(n - 1)>> 1]\n        ans = []\n        l, h = 0, n - 1\n        while len(ans) < k:\n            if abs(a[l] - m) > abs(a[h] - m):\n                ans.append(a[l])\n                l += 1\n            elif abs(a[l] - m) < abs(a[h] - m):\n                ans.append(a[h])\n                h -= 1\n            else:\n                if a[l] >= a[h]:\n                    ans.append(a[l])\n                    l += 1\n                else:\n                    ans.append(a[h])\n                    h -= 1\n        return ans", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        n = len(arr)\n        m = arr[int((n-1)/2)]\n        result = []\n        l,r = 0,n-1\n        count = 0\n        \n        while l <= r and len(result)<k:\n            if abs(arr[r]-m) > abs(arr[l]-m):\n                result.append(arr[r])\n                r -= 1\n            elif abs(arr[l]-m) > abs(arr[r]-m):\n                result.append(arr[l])\n                l += 1\n            else:\n                result.append(arr[r])\n                r -= 1\n        return result        \n            \n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        res = []\n        arr.sort()\n        i = 0\n        j = len(arr)-1\n        m = arr[(len(arr)-1)//2]\n        while len(res) < k and i <= j :\n            print(i)\n            if m - arr[i] > arr[j] -m :\n                res.append(arr[i])\n                i +=1\n            else:\n                res.append(arr[j])\n                j -=1\n        return res", "from collections import defaultdict, deque, Counter\nfrom typing import List\nimport math\nimport copy\nimport random\nimport numpy as np\nimport bisect\nimport inspect\nimport unittest\n\n\ndef cmp(e1, e2):\n    if e1[0] > e2[0] or (e1[0] == e2[0] and e1[1] > e2[1]):\n        return 1\n    elif e1[0] == e2[0] and e1[1] == e2[1]:\n        return 0\n    else:\n        return -1\n\n\nclass Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr = sorted(arr)\n        i, j = 0, len(arr) - 1\n        median = arr[j // 2]\n        res = []\n        while len(res) < k:\n            if abs(arr[j] - median) >= abs(median - arr[i]):\n                res.append(arr[j])\n                j -= 1\n            else:\n                res.append(arr[i])\n                i += 1\n        return res\n\n    # \u601d\u8def\u4e0d\u5bf9\n    def getStrongest1(self, arr: List[int], k: int) -> List[int]:\n        n = len(arr)\n        assert(n >= k)\n        if k == 0:\n            return []\n        if k == n:\n            return arr\n\n        kth = n - (n-1) // 2\n        median = self.findKthMax(arr, kth, cmp=lambda x, y: x - y)\n\n        new_arr = [(abs(e - median), e) for e in arr]\n\n        kmax = self.findKthMax(new_arr, k, cmp)\n\n        res = []\n        t = []\n        for x, y in new_arr:\n            if cmp((x, y), kmax) > 0:\n                res.append(y)\n            if cmp((x, y), kmax) == 0:\n                t.append(y)\n        if len(res) == k:\n            return res\n        else:\n            return res + [t[0]] * (k - len(res))\n\n    # all elements are same \u7b97\u6cd5\u4f1a\u9000\u5316\n    # 3-sets quicksort\u7684\u5b9e\u9645\u5b9e\u73b0\n    # \u6807\u51c6\u7b97\u6cd5\u5c3d\u91cf\u7528\u6807\u51c6\u5e93\u51fd\u6570\n    def findKthMax(self, l, k, cmp):\n        if k > len(l):\n            return None\n        # \u968f\u673a\u751f\u6210\u4e00\u4e2a\u4e0b\u6807key,\u5e76\u83b7\u53d6\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u7ec4\u503ckeyv\n        key = np.random.randint(0, len(l))\n        keyv = l[key]\n\n        # \u904d\u5386\u6570\u7ec4\uff08\u5228\u9664key\uff09\uff0csl\u6570\u7ec4\u662f\u5c0f\u4e8ekeyv\u7684\u503c\uff0cbl\u6570\u7ec4\u662f\u5927\u4e8e\u7b49\u4e8ekeyv\u7684\u503c\n        sl = [i for i in l[:key] + l[key + 1:] if cmp(i, keyv) < 0]\n        bl = [i for i in l[:key] + l[key + 1:] if cmp(i, keyv) >= 0]\n\n        # \u5982\u679cbl\u7684\u957f\u5ea6\u6070\u597d\u662fk-1,\u90a3\u4e48\u8bf4\u660ekeyv\u5c31\u662f\u7b2ck\u5927\u7684\u6570\n        if len(bl) == k-1:\n            return keyv\n        # \u5982\u679cbl\u7684\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8ek,\u8bf4\u660e\u7b2ck\u5927\u7684\u6570\u5728bl\u4e2d\uff0c\u8fed\u4ee3findKthMax\u51fd\u6570\uff0c\u627e\u51fabl\u4e2d\u7b2ck\u5927\u7684\u6570\n        elif len(bl) >= k:\n            return self.findKthMax(bl, k, cmp)\n        # \u5982\u679cbl\u7684\u957f\u5ea6\u5c0f\u4e8ek-1,\u8bf4\u660e\u7b2ck\u5927\u7684\u6570\u5728sl\u4e2d\uff0c\u56e0\u4e3abl\u4e2d\u5df2\u7ecf\u6709len(bl)\u4e2a\u6bd4\u76ee\u6807\u503c\u5927\u7684\u6570\uff0c\u52a0\u4e0akeyv\u672c\u8eab\uff0c\u6240\u4ee5\u8981\u627e\u51fasl\u4e2d\u7b2c\uff08k-len(bl)-1\uff09\u5927\u7684\u6570\n        else:\n            return self.findKthMax(sl, k-len(bl)-1, cmp)\n\n\ndef __starting_point():\n    s = Solution()\n    arr = [6, -3, 7, 2, 11]\n    k = 3\n    print((s.getStrongest(arr, k)))\n\n__starting_point()", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        i = 0\n        j = len(arr) - 1\n        median = arr[(len(arr) - 1)//2]\n        while len(arr) + i - j <= k:\n            if median - arr[i] > arr[j] - median:\n                i += 1\n            else:\n                j -= 1\n                \n        return arr[:i] + arr[j + 1:]\n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        m = arr[(len(arr) - 1) // 2]\n        i, j = 0, len(arr) - 1\n        while i + len(arr) - j <= k:\n            if arr[j] - m >= m - arr[i]:\n                j -= 1\n            else:\n                i += 1\n        return arr[j + 1:] + arr[:i]", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        lastPointer = -1\n        startPointer = 0\n        mInd = (len(arr)-1)//2\n        m = arr[mInd]\n        res = []\n        for i in range(k):\n            if abs(arr[lastPointer] - m) >= abs(arr[startPointer] - m):\n                res.append(arr[lastPointer])\n                lastPointer -= 1\n            else:\n                res.append(arr[startPointer])\n                startPointer += 1\n        return res\n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        ans = []\n        arr.sort()\n        lo, hi = 0, len(arr) - 1\n        m = arr[hi // 2]\n\n        while lo <= hi:\n            if abs(arr[hi] - m) >= abs(arr[lo] - m):\n                ans.append(arr[hi])\n                hi -= 1\n            else:\n                ans.append(arr[lo])\n                lo += 1\n        return ans[:k]", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        n = len(arr)\n        median = arr[(n-1)//2]\n        i,j = 0,n-1\n        res = []\n        while i <= j:\n            if abs(arr[j] - median) >= abs(arr[i] - median):\n                res.append(arr[j])\n                j -= 1\n            else:\n                res.append(arr[i])\n                i += 1\n            if len(res) == k:\n                return res", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        back = arr[:]\n        n = len(arr)\n        med = arr[(n-1)//2] \n        ans = []\n        for i in range(n): arr[i] = abs(arr[i]-med)\n        l, r = 0, n - 1\n        while l <= r and len(ans) < k:\n            if arr[l] < arr[r]: ans += [back[r]]; r-=1\n            elif arr[l] > arr[r]: ans += [back[l]]; l+=1\n            else: ans += [back[r]]; r -= 1\n        return ans\n\n\n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        n = len(arr)\n        m = arr[(n-1)//2]\n        strong = []\n        # for i in range(len(arr)):\n        i,j = 0, len(arr)-1\n        while i<=j:\n            if abs(arr[i]-m) <= abs(arr[j]-m):\n                strong.append(arr[j])\n                j -= 1\n            else:\n                strong.append(arr[i])\n                i += 1\n        return(strong[:k])", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        median = arr[(len(arr)-1)//2]\n        i, j = 0, len(arr)-1\n        res = []\n        while i<=j and k:\n            if abs(arr[i]-median) > abs(arr[j]-median):\n                res.append(arr[i])\n                i+=1\n            else:\n                res.append(arr[j])\n                j-=1\n            k-=1\n        return res\n        \n                \n            \n            \n        \n        \n        \n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        median = arr[(len(arr) - 1)//2]\n        res, i, j = [], 0, len(arr) - 1\n        while i <= j and k:\n            if abs(arr[i] - median) > abs(arr[j] - median):\n                res.append(arr[i])\n                i += 1\n            else:\n                res.append(arr[j])\n                j -= 1       \n            k -= 1\n        return res", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        # sortedArr = sorted(arr)\n        # arr.sort()\n        # median = sortedArr[(len(sortedArr) - 1) // 2]\n        # # strength = [[k, abs(k - median)] for k in sortedArr]\n        # strength = sorted(sortedArr, key=lambda x: (abs(x - median), x), reverse=True)\n        # # print(strength)\n        # return [i for i in strength[:k]]\n        arr.sort()\n        median = arr[(len(arr) - 1) // 2]\n        # strength = [[k, abs(k - median)] for k in sortedArr]\n        strength = sorted(arr, key=lambda x: (abs(x - median), x), reverse=True)\n        # print(strength)\n        return [i for i in strength[:k]]\n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        mid = (len(arr) - 1) // 2\n        m = arr[mid]\n        temp = sorted(arr, key=lambda x : abs(x - m))\n        temp.reverse()\n        return temp[:k]", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr = sorted(arr)\n        i, j, res = 0, len(arr), []\n        median = arr[(j-1)//2]\n        \n        while len(res) < k:\n            if abs(arr[j-1]-median) >= abs(arr[i]-median):\n                res.append(arr[j-1])\n                j -= 1\n            else:\n                res.append(arr[i])\n                i += 1\n        return res", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        m=arr[(len(arr)-1)//2]\n        #print(arr)\n        temp,res=[],[]\n        for i in range(len(arr)):\n            temp.append(abs(arr[i]-m))\n        #print(temp) \n        zipped_pairs=zip(temp,arr)\n        z = [x for _, x in sorted(zipped_pairs)]\n        #print(z)\n        return z[len(z)-k:]", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        m = arr[(len(arr)-1)//2]\n        l, r = 0, len(arr)-1\n        res = []\n        while len(res) < k:\n            if abs(arr[l] - m) > abs(arr[r] - m):\n                res.append(arr[l])\n                l = l + 1\n            else:\n                res.append(arr[r])\n                r = r - 1\n        return res", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        if len(arr) <= k:\n            return arr\n        arr.sort()\n        median = arr[(len(arr) - 1) // 2]\n        i = 0\n        j = len(arr) - 1\n        result = []\n        while k > 0:\n            if self.isStronger(arr[i], arr[j], median):\n                result.append(arr[i])\n                i += 1\n            else:\n                result.append(arr[j])\n                j -= 1\n            k -= 1\n        return result\n     \n    def isStronger(self, a, b, median):\n        return abs(a - median) > abs(b - median) or (abs(a - median) == abs(b - median) and a > b)", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        median = arr[(len(arr)-1)//2]\n        list = []\n        i = 0\n        j = len(arr) - 1\n        while i <= j and k > 0:\n            if abs(arr[i] - median) > abs(arr[j] - median):\n                list.append(arr[i])\n                i += 1\n            else:\n                list.append(arr[j])\n                j -= 1\n            k -= 1\n        return list\n    \n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        i = 0\n        j = len(arr) - 1\n        median = arr[(len(arr) - 1)//2]\n        while len(arr) + i - j <= k:\n            if median - arr[i] > arr[j] - median:\n                i += 1\n            else:\n                j -= 1\n        return arr[:i] + arr[j + 1:] ", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        import numpy as np\n        arr.sort()\n        #m=np.median(np.array(arr))\n        m=arr[int((len(arr)-1)/2)]\n        #sorted(arr, key=lambda x: (abs(x-median), x), reverse=True)[:k]\n        a= sorted(arr,key=lambda x:(abs(x-m),x),reverse=True)\n        return a[:k]", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        \n        arr.sort()\n        m = arr[(len(arr)-1)//2]\n        l = []\n        i = 0\n        j = len(arr)-1\n        \n        while i <=j:\n            if abs(arr[i]-m)>abs(arr[j]-m):\n                l.append(arr[i])\n                i = i+1\n            elif abs(arr[i]-m)<=abs(arr[j]-m):\n                l.append(arr[j])\n                j = j-1\n                \n            if len(l)==k:\n                return l\n                \n           \n                   \n                    \n                \n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr = sorted(arr)\n        self.median = arr[(len(arr)-1)//2]\n        count = 1\n        i, j = 0, len(arr)-1\n        values = []\n        while(count <= k):\n            if self.key_func(arr[i]) > self.key_func(arr[j]):\n                values.append(arr[i])\n                i += 1\n            elif self.key_func(arr[i]) < self.key_func(arr[j]):\n                values.append(arr[j])\n                j -= 1\n            else:\n                if arr[i] > arr[j]:\n                    values.append(arr[i])\n                    i += 1\n                else:\n                    values.append(arr[j])\n                    j -= 1\n            count += 1\n        return values\n       \n    \n    def key_func(self, elem):\n        return abs(elem-self.median)\n\n                \n                        \n                        \n                \n        \n            \n            \n        \n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        sorted_arr = sorted(arr)\n        n = len(arr)\n        median = sorted_arr[(n-1)//2]\n        \n        results = []\n        start_idx, end_idx = 0, n-1\n        \n        while k > 0 and start_idx <= end_idx:\n            if abs(sorted_arr[start_idx] - median) < abs(sorted_arr[end_idx] - median):\n                results.append(sorted_arr[end_idx])\n                end_idx -= 1\n            elif abs(sorted_arr[start_idx] - median) > abs(sorted_arr[end_idx] - median):\n                results.append(sorted_arr[start_idx])\n                start_idx += 1\n            else:\n                if sorted_arr[start_idx] > sorted_arr[end_idx]:\n                    results.append(sorted_arr[start_idx])\n                    start_idx += 1\n                else:\n                    results.append(sorted_arr[end_idx])\n                    end_idx -= 1\n            k -= 1\n                    \n        return results", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        sort = sorted(arr)\n        m = sort[int((len(arr) - 1) / 2)]\n        # sorted_by_m = {}\n        # for n in sort:\n        #     curr = abs(n - m)\n        #     if curr in sorted_by_m:\n        #         sorted_by_m.append(curr)\n        #     else:\n        #         sorted_by_m = [curr]\n        \n        sort.reverse()\n        sorted_by_m = sorted(sort, key=lambda x: abs(x - m), reverse=True)\n        print(m, sorted_by_m)\n        return sorted_by_m[:k]", "class Solution:\n    def getStrongest(self, A: List[int], k: int) -> List[int]:\n        A.sort()\n        z=[]\n        if len(A)%2==1:\n            n=A[(len(A)-1)//2]\n        else:\n            n=A[len(A)//2-1]\n        for i in A:\n            z.append([abs(i-n),i])\n        z.sort(key=lambda x:x[0])\n        x=[j for i,j in z]\n        return x[len(x)-k:]\n            \n", "class Solution:\n    def getStrongest1(self, arr: List[int], k: int) -> List[int]:\n        # sort, find median per definition\n        # iterate backwards over sorted list\n        # abs(diff from median) used as key in hashmap, with element as value\n        # this naturally places larger values first in {key, [vals]}\n        # starting from largest key, return K values\n        # O(NlogN) time, O(N) space\n\n        arr.sort()\n        m = arr[(len(arr) - 1) // 2]\n\n        d = {}\n        for i in range(len(arr)-1, -1, -1):\n            tmp = abs(arr[i] - m)\n            d.setdefault(tmp, [])\n            d[tmp].append(arr[i])\n\n        res = []\n        for key in sorted(d.keys(), reverse=True):\n            res.extend(d[key])\n            if len(res) >= k:\n                break\n        return res[:k]\n\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        # same initial strategy to find median\n        # but afterward use two pointers to build up result list\n        # terminating on K elements\n        # O(NlogN) time, O(1) \\\"extra\\\" space not counting result list\n\n        arr.sort()\n        la = len(arr)\n        m = arr[(la-1) // 2]\n        i, j, res = 0, la-1, []\n\n        while len(res) < k:\n            rt = abs(arr[j]-m)\n            lt = abs(arr[i]-m)\n\n            if rt == lt or rt > lt:\n                res.append(arr[j])\n                j -= 1\n            else:\n                res.append(arr[i])\n                i += 1\n        return res", "class Solution:\n    def getStrongest(self, A: List[int], k: int) -> List[int]:\n        A.sort()\n        z=[]\n        if len(A)%2==1:\n            n=A[(len(A)-1)//2]\n        else:\n            n=A[len(A)//2-1]\n        for i in A:\n            z.append([abs(i-n),i])\n        z.sort(key=lambda x:x[0])\n        z=z[::-1]\n        x=[j for i,j in z]\n        return x[:k]\n            \n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        n = len(arr)\n        m = (n-1) // 2\n        arr.sort()\n        \n        median = arr[m]\n        print(median)\n        arr.sort(key=lambda x: (abs(x - median), x), reverse=True)\n        return arr[:k]", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr = sorted(arr)\n        K = len(arr)\n        median = arr[(K - 1)//2]\n        \n        left, right = 0, len(arr) - 1\n        ans = []\n        print((arr, median))\n        while left <= right and k > 0:\n            if abs(arr[left] - median) <= abs(arr[right] - median):\n                ans.append(arr[right])\n                right -= 1\n            else:\n                ans.append(arr[left])\n                left += 1    \n            k -= 1\n        return ans\n            \n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        \n        # get median\n        l=len(arr)\n        s = sorted(arr)\n        \n        middle = (l-1) // 2\n        median = s[middle]\n        distances = []\n        for i in s:\n            distances.append([abs(i - median), i])\n            \n        strong_sort = sorted(distances, key= lambda x: x[0])\n        #print(strong_sort)\n        s = l - k\n        #print(s)\n        res = [strong_sort[i][1] for i in range(s,l)]\n        return res\n            \n            \n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        if not arr:\n            return []\n        elif len(arr) <= k:\n            return arr\n        arr.sort()\n        n = len(arr)\n        median = arr[int((n-1)/2)]\n        arr = [(abs(i-median), i) for i in arr]\n        arr.sort(reverse=True)\n        return [i[1] for i in arr[:k]]\n", "class Solution:\n    def getStrongest(self, A: List[int], k: int) -> List[int]:\n        A.sort()\n        z=[]\n        if len(A)%2==1:\n            n=A[(len(A)-1)//2]\n        else:\n            n=A[len(A)//2-1]\n        for i in A:\n            z.append([abs(i-n),i])\n        z.sort(key=lambda x:x[0])\n        x=[]\n        for i in z[len(z)-k:]:\n            x.append(i[1])\n        return x\n            \n", "class Solution:\n    def _get_median(self, arr):\n        mid = int((len(arr) - 1) / 2)\n        return arr[mid]\n\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr = sorted(arr)\n        median = self._get_median(arr)\n        arr = sorted([(abs(x - median), x) for x in arr], reverse=True)[:k]\n        return [x for rank, x in arr]\n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        n = len(arr)\n        # \u5148\u6392\u5e8f\u6c42\u4e2d\u4f4d\u6570\n        arr = sorted(arr)\n        mid = arr[(n - 1) // 2]\n\n        def mykey(x):\n            # \u81ea\u5b9a\u4e49\u6700\u5f3a\u6392\u5e8f\u7684key\u51fd\u6570\n            # \u6ce8\u610fpy 3\u4e0d\u540c\u4e8e\u5176\u4ed6\u8bed\u8a00\u7684\u4f20\u5165\u4e24\u4e2a\u53c2\u6570\u7684\u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570\n            # \u6b64\u5904\u7684\u610f\u601d\u4ee3\u8868\u5148\u6309\u7167abs\u5347\u5e8f\u6392\u5217, \u76f8\u7b49\u60c5\u51b5\u4e0b\u518d\u6309\u7167\u81ea\u8eab\u7684\u503c\u7684\u5347\u5e8f\u6392\u5217\n            return (abs(x - mid), x)\n\n        # \u6309\u7167\u6700\u5f3a\u6392\u5e8f\u540e\u53d6\u6700\u540e\u7684k\u4e2a\u5373\u4e3a\u6240\u6c42\n        #arr = sorted(arr, key=mykey)\n        arr = sorted(arr, key=lambda x: (abs(x-mid), x))\n        return arr[n - k:]", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr = sorted(arr)\n        m = arr[(len(arr) - 1) // 2]\n        power = [abs(x - m) for x in arr]\n        order = sorted(zip(power, arr), reverse=True)\n        return [order[i][1] for i in range(k)]\n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        n = len(arr)        \n        arr.sort()        \n        m = arr[((n-1)//2)]\n        \n        arr.sort(key=lambda x: (abs(x-m),x), reverse=True)\n        \n        return arr[:k]\n#         index = []        \n        \n#         for i in range(n):\n#             index.append([abs(arr[i]-m), i, arr[i]])\n        \n#         index.sort(key=lambda x: (x[0],x[1]), reverse=True)\n    \n#         res = []\n#         for j in range(k):\n#             res.append(index[j][2])\n        \n#         return res\n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        temp = sorted(arr)\n        median = 0\n        n = len(arr)\n        median = temp[(n-1)//2]\n        j = len(arr)-1\n        i = 0\n        res = []\n        print(\\\"hi\\\",str(median))\n        while i<=j:\n            left = median - temp[i]\n            right = temp[j] - median\n            if left > right:\n                res.append(temp[i])\n                i+=1\n            elif left < right:\n                res.append(temp[j])\n                j-=1\n            else:\n                if temp[i]>temp[j]:\n                    res.append(temp[i])\n                    i+=1\n                else:\n                    res.append(temp[j])\n                    j-=1\n            if len(res) == k:\n                return res\n        return res", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        m = arr[(len(arr)-1)//2]\n        strongs = []\n        for num in arr:\n            strongs.append((abs(num-m),num))\n        strongs.sort(reverse=True)\n        return [x[1] for x in strongs[:k]]", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        m = sorted(arr)[(len(arr) - 1) // 2]\n        return sorted(arr, key = lambda x: (-abs(x - m), -x))[:k]", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        \n        result = []\n        \n        left = 0\n        right = len(arr) - 1\n        \n        arr.sort()\n        \n        m = arr[(len(arr) - 1)//2]\n        \n        while(left<=right):\n            \n            m_left = abs(m-arr[left])\n            m_right = abs(m-arr[right])\n            \n            if m_left < m_right:\n                \n                result.append(arr[right])\n                right -= 1\n            elif m_left > m_right:\n                \n                result.append(arr[left])\n                left += 1\n            else:\n                if arr[left] > arr[right]:\n                    result.append(arr[left])\n                    left += 1 \n                else:\n                    result.append(arr[right])\n                    right -= 1\n            \n        return result[0:k]\n        \n                \n            \n            \n            \n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        m = arr[(len(arr) - 1) // 2]\n        ans = []\n        left, right = 0, len(arr) - 1\n        for _ in range(k):\n            if abs(arr[right] - m) >= abs(arr[left] - m):\n                ans.append(arr[right])\n                right -= 1\n            else:\n                ans.append(arr[left])\n                left += 1\n        return ans\n                \n            \n", "from heapq import heappush, heappushpop\nclass Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        n = len(arr)\n        nums = sorted([x for x in arr])\n        median = nums[(n-1)//2]\n            \n        heap = []\n        for i in range(n):\n            if len(heap) < k:\n                heappush(heap, (abs(arr[i] - median), arr[i]))\n            elif abs(arr[i] - median) >= heap[0][0]: \n                heappushpop(heap, (abs(arr[i] - median), arr[i]))\n        return [x[1] for x in heap]", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        m = sorted(arr)[(len(arr) - 1) // 2]\n        return sorted(arr, reverse=True, key = lambda x: (abs(x - m), x))[:k]", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        if len(arr)==1 and k==1:\n            return(arr)\n        ans=[]\n        arr.sort()\n        m=arr[(len(arr)-1)//2]\n        i, j=0, len(arr)-1\n        while i<=j:\n            if abs(arr[j]-m)>=abs(arr[i]-m):\n                ans.append(arr[j])\n                j-=1\n            else:\n                ans.append(arr[i])\n                i+=1\n        print(ans)\n        return(ans[:k])", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        sortedArr = sorted(arr)\n        median = sortedArr[(len(sortedArr) - 1) // 2]\n        strength = [[k, abs(k - median)] for k in sortedArr]\n        strength = sorted(strength, key=lambda x: (x[1], x[0]), reverse=True)\n        return [i[0] for i in strength[:k]]\n", "#import heapq,heappush,heapop\nclass Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr=sorted(arr)\n        m=(len(arr)-1)//2\n        mv=arr[m]\n        ans=[]\n        i,j=0,len(arr)-1\n        while(k and i <= j):\n            rv,lv=abs(arr[j]-mv),abs(arr[i]-mv)\n            if rv > lv:\n                ans.append(arr[j])\n                j-=1\n                k-=1\n            elif lv > rv:\n                ans.append(arr[i])\n                i+=1\n                k-=1\n            else:\n                if arr[j] > arr[i]:\n                    ans.append(arr[j])\n                    j-=1\n                    k-=1\n                else:\n                    ans.append(arr[i])\n                    i+=1\n                    k-=1\n        return ans\n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n#         arr.sort()\n#         # mean_index = (len(arr) - 1) // 2\n#         mean = arr[(len(arr) - 1) // 2]\n        \n#         arr2 = list(map(lambda x: abs(x - mean), arr))\n#         arr3 = list(zip(arr, arr2))\n#         arr4 = sorted(arr3, key=lambda kv: (-kv[1], -kv[0]))\n        \n#         return [arr4[i][0] for i in range(0, k)]\n        arr.sort()\n        return sorted(arr, key=lambda num: (abs(num - arr[(len(arr) - 1) // 2]), num))[-k:]", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        orderarr = sorted(arr)\n        index = (len(arr)-1)//2\n        mid = orderarr[index]\n        dic = defaultdict(list)\n        for i in range(len(orderarr)-1,-1,-1):\n            curabs = abs(orderarr[i]-mid)\n            dic[curabs].append(orderarr[i])\n        \n        res = []\n        keys = sorted(dic.keys())\n        for i in range(len(keys)-1, -1, -1):\n            for j in dic[keys[i]]:\n                res.append(j)\n                if len(res) == k:\n                    return res\n        return res\n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        m = arr[(len(arr) - 1) // 2]\n        #print(m, arr)\n        l, r = 0, len(arr) - 1\n        ret = []\n        while k > 0 and l <= r:\n            print((l, r))\n            al, ar = abs(arr[l] - m), abs(arr[r] - m)\n            if al == ar:\n                if arr[l] >= arr[r]:\n                    ret.append(arr[l])\n                    l += 1\n                else:\n                    ret.append(arr[r])\n                    r -= 1\n            elif al > ar:\n                ret.append(arr[l])\n                l += 1\n            else:\n                ret.append(arr[r])\n                r -= 1\n            k -= 1\n        return ret\n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        heap = []\n        sorted_arr = sorted(arr)\n        m = sorted_arr[(len(arr)-1)//2]\n        for num in arr:\n            diff = abs(num - m)\n            if len(heap) == k:\n                heapq.heappushpop(heap, (diff, num))\n            else:\n                heapq.heappush(heap, (diff, num))\n        return (n for d, n in heap)\n", "import math\nclass Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        print(len(arr))\n        m = arr[math.ceil(len(arr)/2)-1]\n        print(m)\n        n = len(arr)\n        for i in range(n) :\n            arr[i] = [abs(arr[i]-m),arr[i]]\n        arr.sort(reverse=True)\n        arr = arr[:k]\n        for i in range(k) :\n            arr[i] = arr[i][1]\n        return arr", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        sort_arr = sorted(arr)\n        n = len(arr)\n        m = sort_arr[((n-1))//2]\n        result = sorted(sort_arr, key = lambda x : [abs(x - m),x], reverse = True)\n        return result[0:k]\n        \n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        m = arr[(len(arr)-1)//2]\n        return heapq.nlargest(k, [n for n in arr[::-1]], key = lambda x: abs(x-m))", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        n = len(arr)\n        m = arr[(n - 1) // 2]\n        l = 0\n        r = n - 1\n        ans = []\n        while len(ans) != k:\n            if abs(m - arr[l]) > abs(arr[r] - m):\n                ans.append(arr[l])\n                l += 1\n            else:\n                ans.append(arr[r])\n                r -= 1\n        return ans", "import heapq;\nclass Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort();\n        median = (len(arr) - 1)//2;\n        \n        new_arr = [(abs(arr[median] - arr[0]),arr[0])];\n        heapq.heapify(new_arr);\n        \n        for i in range(1, len(arr)):\n            if len(new_arr) < k:\n                heapq.heappush(new_arr, (abs(arr[median] - arr[i]),arr[i]));\n            else:\n                heapq.heappushpop(new_arr, (abs(arr[median] - arr[i]), arr[i]));\n        \n        final_arr = [];\n        for i in range(len(new_arr)):\n            final_arr.append(new_arr[i][1]);\n        \n        return final_arr;", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        n = len(arr)\n        res = []\n        median = arr[(n-1)//2]\n        l = []\n        arr.reverse()\n        for i in range(n):\n            l.append([arr[i],abs(median-arr[i])])\n        l.sort(reverse=True,key=lambda x:x[1])\n        \n        i = 0\n        # print(l)\n        while i<k-1 or (i<n-1 and l[i][1] == l[i+1][1]):\n            res.append(l[i][0])\n            i+=1\n        res.append(l[i][0])\n        # res.sort(reverse=True)\n        # print(res)\n        \n        return res[:k]", "def median(arr: List[int]) -> int:\n    arr.sort()\n    m = int((len(arr) - 1) / 2)\n    return arr[m]\n\nclass Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        m = median(arr)\n        strength = [abs(x - m) for x in arr]\n        zipped = list(zip(strength, arr))\n        zipped.sort(key=lambda x: (x[0], x[1]))\n        \n        return [x[1] for x in zipped[(len(arr) - k):]]\n", "import heapq\n\nclass Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        n = len(arr)\n        if n % 2 == 1:\n            m = arr[n // 2]\n        else:\n            m = arr[n // 2 - 1]\n        \n        ans = []\n        q = [(-abs(arr[i] - m), -i) for i in range(n)]\n        heapq.heapify(q)\n        \n        for _ in range(k):\n            ans.append(arr[-heapq.heappop(q)[1]])\n        \n        return ans\n        \n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        median = arr[(len(arr)-1)//2]\n        #print(median)\n        arr.sort(key = lambda x: (abs(x-median),x),reverse = True)\n        #print(arr)\n        return arr[:k]\n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        # mean_index = (len(arr) - 1) // 2\n        mean = arr[(len(arr) - 1) // 2]\n        \n        arr2 = list(map(lambda x: abs(x - mean), arr))\n        arr3 = list(zip(arr, arr2))\n        arr4 = sorted(arr3, key=lambda kv: (-kv[1], -kv[0]))\n        \n        return [arr4[i][0] for i in range(0, k)]", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        \n        # Find median\n        n =  len(arr)\n        median = sorted(arr)[(n-1)//2]\n        \n        # Compute distance from median and sort\n        arr_pair = [(i,abs(arr[i]-median)) for i in range(n)]\n        arr_pair.sort(key=lambda x: (x[1],arr[x[0]]))\n        return [arr[x[0]] for x in arr_pair[-k:]]", "class Solution:\n    \n    def getStrongest(self, arr: List[int], K: int) -> List[int]:\n        arr.sort()\n        length = len(arr)\n        res = arr[(length-1)//2]\n        i = 0\n        j = length-1\n        result = []\n        while K>0:\n            a = abs(arr[i]-res)\n            b = abs(arr[j]-res)\n            if a>b or (a==b and arr[i]>arr[j]):\n                result.append(arr[i])\n                i+=1\n            else:\n                result.append(arr[j])\n                j-=1\n            K-=1\n        return result\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        n = len(arr)\n        median = sorted(arr)[(n-1)//2]\n        \n        return sorted(arr, key = lambda x:(abs(x-median), x), reverse = True)[:k]\n            \n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        n = len(arr)\n        m = arr[(n - 1) // 2]\n        res = []\n        l, r = 0, n - 1\n        for i in range(k):\n            if abs(arr[r] - m) >= abs(arr[l] - m):\n                res.append(arr[r])\n                r -= 1\n            else:\n                res.append(arr[l])\n                l += 1\n        return res", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        \n        # Find median\n        n =  len(arr)\n        median = sorted(arr)[(n-1)//2]\n        \n        # Compute distance from median and sort\n        arr_pair = [(x,abs(x-median)) for x in arr]\n        arr_pair.sort(key=lambda x: (x[1],x[0]))\n        return [x[0] for x in arr_pair[-k:]]", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        median = arr[(len(arr)-1)//2]\n        ans,i,j = [],0,len(arr)-1\n        if(len(arr) == 1):\n            return arr\n        \n        while(i<=j and k>0):\n            if(abs(arr[i]-median) > abs(arr[j]-median)):\n                ans.append(arr[i])\n                i +=1\n            else:\n                ans.append(arr[j])\n                j-=1\n            \n            k -=1\n        \n        return ans", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        ls = len(arr)\n        arr.sort()\n        #median = (arr[ls//2] + arr[ls//2-1]) / 2 if ls % 2 == 0 else arr[ls//2]\n        median = arr[(ls-1)//2]\n        print(median)\n        \n        res = []\n        i = 0\n        for num in arr:\n            if i == k:\n                heapq.heappush(res, (abs(num- median), num))\n                heapq.heappop(res)\n            else:\n                heapq.heappush(res, (abs(num- median), num))\n                i += 1    \n        return [x[1] for x in res]\n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        m = sorted(arr)[(len(arr) - 1) // 2]\n        return sorted(arr, reverse=True, key = lambda x: (abs(x - m), x))[:k]\n\n", "from typing import List\nclass Solution:\n    def strengths(self,arr,length):\n      ans = []\n      m = arr[(length-1)//2]\n      for i in arr:\n        ans.append(abs(m-i))\n      return ans\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n      length = len(arr)\n      if length==1:\n        return arr\n      ans = []\n      arr.sort()\n      strength = self.strengths(arr,length)\n      count = 0\n      i = 0\n      a = length - 1\n      while count < k and i != a:\n        # print(count,k)\n        if strength[a] > strength[i]:\n          ans.append(arr[a])\n          a -= 1\n        elif strength[a] < strength[i]:\n          ans.append(arr[i])\n          i += 1\n        else:\n          if arr[a] > arr[i]:\n            ans.append(arr[a])\n            a -= 1\n          else:\n            ans.append(arr[i])\n            i += 1\n        count += 1\n      if count < k and i==a:\n        ans.append(arr[(length-1)//2])\n      return ans\n        \n", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        n = len(arr)\n        m = sorted(arr)[(n-1)//2]\n        return sorted(arr,key = lambda x: (abs(x-m),x),reverse=True)[:k]\n", "class Solution:\n    def getStrongest(self, l: List[int], k: int) -> List[int]:\n        l.sort()\n        m=l[(len(l)-1)//2]\n        def fun(a,b):\n            if(abs(a-m)<abs(b-m)):\n                return 1\n            elif(abs(a-m)>abs(b-m)):\n                return -1\n            else:\n                return -1\n        l=sorted(l,key=cmp_to_key(fun))\n        l1=[]\n        for i in range(k):\n            l1.append(l[i])\n        return l1\n        \n", "class Solution:\n  def getStrongest(self, arr: List[int], k: int) -> List[int]:\n    m = sorted(arr)[(len(arr) - 1) // 2]\n    return [-x for _, x in sorted((-abs(x - m), -x) for x in arr)[:k]]", "class Solution:\n    def getStrongest(self, arr: List[int], k: int) -> List[int]:\n        arr.sort()\n        med = arr[(len(arr) - 1) // 2]\n        heap = []\n        for a in arr:\n            strength = abs(a - med)\n            # print(heap, strength, a)\n            if len(heap) == k:\n                heappushpop(heap, (strength, a))\n            else:\n                heappush(heap, (strength, a))\n        return [a for _, a in heap]"]