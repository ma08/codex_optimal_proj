["from collections import Counter\n\ndef blocks(s):\n    sort = lambda c: (c.isdigit(), c.isupper(), c)\n    answer, counter = [], Counter(s)\n    while counter:\n        block = ''.join(sorted(counter, key=sort))\n        answer.append(block)\n        counter = counter - Counter(block)\n    return '-'.join(answer)", "from collections import Counter\nfrom itertools import zip_longest\n\ndef blocks(s):        return '-'.join(map(sortAndJoin, zip_longest(*blocker(s), fillvalue='')))\ndef sortAndJoin(lst): return ''.join(sorted(lst,key=blockKeyer))\ndef blockKeyer(c):    return (c.isdigit(), c.isupper(), c)\ndef blocker(s):       return (c*n for c,n in Counter(s).items())", "from string import ascii_letters, digits\nfrom collections import Counter\n\nALPHABET = ascii_letters + digits\nC_ALPHABET = Counter(ALPHABET)\n\ndef blocks(s):\n    d = Counter(ALPHABET + s) - C_ALPHABET\n    return \"-\".join(\"\".join(x for x in d if d[x] > i) for i in range(max(d.values(), default=0)))", "from collections import Counter as C\nfrom string import ascii_lowercase as l,digits as d\ndef blocks(s):\n    if not s:return ''\n    char = sorted(C(s).items(), key=lambda x: (l+l.upper()+d).index(x[0]))\n    li = ['']*max(char, key=lambda x: x[1])[1]\n    for i, j in char : \n        for pos in range(j) : li[pos]+=i\n    return '-'.join(li)", "from collections import Counter\n\n\nsort_group = lambda c: (c.isdecimal(), c.isupper(), c.islower(), c)\n\n\ndef blocks(stg):\n    groups, count = [], Counter(stg)\n    while count:\n        groups.append(\"\".join(sorted(list(count.keys()), key=sort_group)))\n        count -= Counter(list(count.keys()))\n    return \"-\".join(groups)\n", "from collections import Counter\n\ndef blocks(s):\n    stg = sorted(sorted(set(s)), key = lambda x:(x.isdigit() ,x.isupper()))\n    doc = Counter(s)\n    ret = ''\n    while max(doc.values(),default = 0)>0:\n        for e in stg:\n            if doc[e]>0:\n                ret += e\n            doc[e] -= 1   \n        ret += '-'\n    return ret[:-1]", "from collections import Counter\nfrom string import ascii_letters, digits\ndef blocks(s):\n    cnt = Counter(sorted(s, key = (ascii_letters + digits).index))\n    res = []\n    while cnt:\n        res.append(''.join(cnt.keys()))\n        cnt = {k : v - 1 for k, v in cnt.items() if v > 1}\n    return '-'.join(res)", "def blocks(s):\n    switch, ret = [ lambda e:e.islower(), lambda e:e.isupper(), lambda e:e.isdigit() ], ''\n    for lm in switch:\n        ret += ''.join([ e for e in sorted(s) if lm(e) ])       \n    return ''.join( box(ret) )\n    \ndef box(blok):\n    if blok:\n        ret = [ '' ] * blok.count( max(blok,key = blok.count) )\n        for e in blok:\n            for i in range(blok.count(e)):\n                ret[i] += ['',e][e not in ret[i]]\n        return '-'.join(ret)\n    return blok\n", "from string import ascii_letters as let, digits as dig\ndef blocks(s):\n    if s:\n        Max = max(map(s.count, s))\n        bs = [''.join(sorted([c for c in set(s) if s.count(c) >= n+1], key=(let+dig).find)) for n in range(Max)]\n        return '-'.join(bs)\n    else: return ''", "from itertools import groupby, zip_longest\n\ndef blocks(s):\n    groups = groupby(sorted(s, key=lambda c: (c.isdigit(), c.isupper(), c)))\n    blocks = zip_longest(*(list(b) for _, b in groups), fillvalue=\"\")\n    return '-'.join(\n        ''.join(b)\n        for b in blocks\n    )"]