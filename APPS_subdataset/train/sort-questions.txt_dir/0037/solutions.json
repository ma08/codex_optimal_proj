["3\n\nfrom math import factorial as fact\n\nN = 55\nc = [1]\nfor i in range(N):\n\tc.append(fact(i))\ndp = [0] * N\ndp[0] = 1\nfor i in range(1, N):\n\tfor j in range(i):\n\t\tdp[i] += dp[j] * c[i - j - 1]\n\ndef get_kth_cycle(n, k):\n\tif n == 1:\n\t\treturn [1]\n\tans = [-1] * n\n\tans[0] = n - 1\n\tfin = [i for i in range(n)]\n\tfin[0] = n - 1\n\tinit = [i for i in range(n)]\n\tinit[n - 1] = 0\n\tused = [False] * n\n\tused[n - 1] = True\n\tfor i in range(1, n - 1):\n\t\tj = 0\n\t\tcur = fact(n - i - 2)\n\t\twhile True:\n\t\t\twhile used[j] or (i < n - 1 and j == init[i]):\n\t\t\t\tj += 1\n\t\t\tif k > cur:\n\t\t\t\tk -= cur\n\t\t\t\tj += 1\n\t\t\telse:\n\t\t\t\tfin[init[i]] = fin[j]\n\t\t\t\tinit[fin[j]] = init[i]\n\t\t\t\tans[i] = j\n\t\t\t\tused[j] = True\n\t\t\t\tbreak\n\tans[-1] = init[-1]\n\treturn [x + 1 for x in ans]\n\ndef f(n, k):\n\tif n == 0:\n\t\tassert k == 1\n\t\treturn []\n\tcl = 1\n\twhile c[cl - 1] * dp[n - cl] < k:\n\t\tk -= c[cl - 1] * dp[n - cl]\n\t\tcl += 1\n\trest = f(n - cl, (k - 1) % dp[n - cl] + 1)\n\trest = [x + cl for x in rest]\n\tk = (k - 1) // dp[n - cl] + 1\n\treturn get_kth_cycle(cl, k) + rest\n\ndef solve():\n\tn, k = list(map(int, input().split()))\n\tif k > dp[n]:\n\t\tprint(-1)\n\t\treturn\n\tprint(*f(n, k))\n\ndef main():\n\tt = int(input())\n\twhile t > 0:\n\t\tt -= 1\n\t\tsolve()\n\nmain()\n", "3\n \nfrom math import factorial as fact\n \nN = 55\nc = [1]\nfor i in range(N):\n\tc.append(fact(i))\ndp = [0] * N\ndp[0] = 1\nfor i in range(1, N):\n\tfor j in range(i):\n\t\tdp[i] += dp[j] * c[i - j - 1]\n \ndef get_kth_cycle(n, k):\n\tif n == 1:\n\t\treturn [1]\n\tans = [-1] * n\n\tans[0] = n - 1\n\tfin = [i for i in range(n)]\n\tfin[0] = n - 1\n\tinit = [i for i in range(n)]\n\tinit[n - 1] = 0\n\tused = [False] * n\n\tused[n - 1] = True\n\tfor i in range(1, n - 1):\n\t\tj = 0\n\t\tcur = fact(n - i - 2)\n\t\twhile True:\n\t\t\twhile used[j] or (i < n - 1 and j == init[i]):\n\t\t\t\tj += 1\n\t\t\tif k > cur:\n\t\t\t\tk -= cur\n\t\t\t\tj += 1\n\t\t\telse:\n\t\t\t\tfin[init[i]] = fin[j]\n\t\t\t\tinit[fin[j]] = init[i]\n\t\t\t\tans[i] = j\n\t\t\t\tused[j] = True\n\t\t\t\tbreak\n\tans[-1] = init[-1]\n\treturn [x + 1 for x in ans]\n \ndef f(n, k):\n\tif n == 0:\n\t\tassert k == 1\n\t\treturn []\n\tcl = 1\n\twhile c[cl - 1] * dp[n - cl] < k:\n\t\tk -= c[cl - 1] * dp[n - cl]\n\t\tcl += 1\n\trest = f(n - cl, (k - 1) % dp[n - cl] + 1)\n\trest = [x + cl for x in rest]\n\tk = (k - 1) // dp[n - cl] + 1\n\treturn get_kth_cycle(cl, k) + rest\n \ndef solve():\n\tn, k = map(int, input().split())\n\tif k > dp[n]:\n\t\tprint(-1)\n\t\treturn\n\tprint(*f(n, k))\n \ndef main():\n\tt = int(input())\n\twhile t > 0:\n\t\tt -= 1\n\t\tsolve()\n \nmain()", "from math import factorial as fact\n \nN = 55\nc = [1]\nfor i in range(N):\n\tc.append(fact(i))\ndp = [0] * N\ndp[0] = 1\nfor i in range(1, N):\n\tfor j in range(i):\n\t\tdp[i] += dp[j] * c[i - j - 1]\n \ndef get_kth_cycle(n, k):\n\tif n == 1:\n\t\treturn [1]\n\tans = [-1] * n\n\tans[0] = n - 1\n\tfin = [i for i in range(n)]\n\tfin[0] = n - 1\n\tinit = [i for i in range(n)]\n\tinit[n - 1] = 0\n\tused = [False] * n\n\tused[n - 1] = True\n\tfor i in range(1, n - 1):\n\t\tj = 0\n\t\tcur = fact(n - i - 2)\n\t\twhile True:\n\t\t\twhile used[j] or (i < n - 1 and j == init[i]):\n\t\t\t\tj += 1\n\t\t\tif k > cur:\n\t\t\t\tk -= cur\n\t\t\t\tj += 1\n\t\t\telse:\n\t\t\t\tfin[init[i]] = fin[j]\n\t\t\t\tinit[fin[j]] = init[i]\n\t\t\t\tans[i] = j\n\t\t\t\tused[j] = True\n\t\t\t\tbreak\n\tans[-1] = init[-1]\n\treturn [x + 1 for x in ans]\n \ndef f(n, k):\n\tif n == 0:\n\t\tassert k == 1\n\t\treturn []\n\tcl = 1\n\twhile c[cl - 1] * dp[n - cl] < k:\n\t\tk -= c[cl - 1] * dp[n - cl]\n\t\tcl += 1\n\trest = f(n - cl, (k - 1) % dp[n - cl] + 1)\n\trest = [x + cl for x in rest]\n\tk = (k - 1) // dp[n - cl] + 1\n\treturn get_kth_cycle(cl, k) + rest\n \ndef solve():\n\tn, k = map(int, input().split())\n\tif k > dp[n]:\n\t\tprint(-1)\n\t\treturn\n\tprint(*f(n, k))\n \ndef main():\n\tt = int(input())\n\twhile t > 0:\n\t\tt -= 1\n\t\tsolve()\n \nmain()", "import math\n\n# init\nmaxn = 55\ng = [1]\nfor i in range(maxn):\n    g.append(math.factorial(i))\nf = [0] * maxn\nf[0] = 1\nfor i in range(1, maxn):\n    for j in range(i):\n        f[i] += f[j] * g[i - j - 1]\n\ndef kth(n, k):\n    if n == 1:\n        return [1]\n    ret = [-1] * n\n    ret[0] = n - 1\n    p1 = [i for i in range(n)]\n    p2 = [i for i in range(n)]\n    vis = [False] * n\n    p1[0] = n - 1\n    p2[n - 1] = 0\n    vis[n - 1] = True\n    for i in range(1, n - 1):\n        j = 0\n        now = math.factorial(n - i - 2)\n        while True:\n            while vis[j] or (i < n - 1 and j == p2[i]):\n                j += 1\n            if k > now:\n                k -= now\n                j += 1\n            else:\n                p1[p2[i]] = p1[j]\n                p2[p1[j]] = p2[i]\n                ret[i] = j\n                vis[j] = True\n                break\n    ret[-1] = p2[-1]\n    return [x + 1 for x in ret]\n\ndef solve(n, k):\n    if n == 0:\n        return []\n    i = 1\n    while g[i - 1] * f[n - i] < k:\n        k -= g[i - 1] * f[n - i]\n        i += 1\n    rem = solve(n - i, (k - 1) % f[n - i] + 1)\n    rem = [x + i for x in rem]\n    k = (k - 1) // f[n - i] + 1\n    return kth(i, k) + rem\n\ndef SOLVE():\n    n, k = map(int, input().split())\n    if k > f[n]:\n        print(-1)\n        return\n    ans = solve(n, k)\n    for x in ans:\n        print(x, end = \" \")\n    print()\n\nT = int(input())\nwhile T > 0:\n    T -= 1\n    SOLVE()\n\n", "from math import factorial as fact\n \nN = 55\nc = [1]\nfor i in range(N):\n\tc.append(fact(i))\ndp = [0] * N\ndp[0] = 1\nfor i in range(1, N):\n\tfor j in range(i):\n\t\tdp[i] += dp[j] * c[i - j - 1]\n \ndef get_kth_cycle(n, k):\n\tif n == 1:\n\t\treturn [1]\n\tans = [-1] * n\n\tans[0] = n - 1\n\tfin = [i for i in range(n)]\n\tfin[0] = n - 1\n\tinit = [i for i in range(n)]\n\tinit[n - 1] = 0\n\tused = [False] * n\n\tused[n - 1] = True\n\tfor i in range(1, n - 1):\n\t\tj = 0\n\t\tcur = fact(n - i - 2)\n\t\twhile True:\n\t\t\twhile used[j] or (i < n - 1 and j == init[i]):\n\t\t\t\tj += 1\n\t\t\tif k > cur:\n\t\t\t\tk -= cur\n\t\t\t\tj += 1\n\t\t\telse:\n\t\t\t\tfin[init[i]] = fin[j]\n\t\t\t\tinit[fin[j]] = init[i]\n\t\t\t\tans[i] = j\n\t\t\t\tused[j] = True\n\t\t\t\tbreak\n\tans[-1] = init[-1]\n\treturn [x + 1 for x in ans]\n \ndef f(n, k):\n\tif n == 0:\n\t\tassert k == 1\n\t\treturn []\n\tcl = 1\n\twhile c[cl - 1] * dp[n - cl] < k:\n\t\tk -= c[cl - 1] * dp[n - cl]\n\t\tcl += 1\n\trest = f(n - cl, (k - 1) % dp[n - cl] + 1)\n\trest = [x + cl for x in rest]\n\tk = (k - 1) // dp[n - cl] + 1\n\treturn get_kth_cycle(cl, k) + rest\n \ndef solve():\n\tn, k = map(int, input().split())\n\tif k > dp[n]:\n\t\tprint(-1)\n\t\treturn\n\tprint(*f(n, k))\n \ndef main():\n\tt = int(input())\n\twhile t > 0:\n\t\tt -= 1\n\t\tsolve()\n \nmain()", "MAXN = 55\n\nf = [0] * MAXN\nfac = [0] * MAXN\n\nfac[0] = 1\nfor i in range(1, 51):\n  fac[i] = fac[i - 1] * i\n\nf[0] = 1;\nfor i in range(1, 51):\n  f[i] += f[i - 1]\n  for j in range(2, i + 1):\n    f[i] += fac[j - 2] * f[i - j]\n\ndef my_fac(n):\n  if n <= 0:\n    return 1\n  return fac[n]\n\ndef solve_first(n, k):\n  ret = [0] * (n + 1)\n  ret[1] = n\n  for p in range(2, n + 1):\n    for i in range(1, n + 1):\n      if i in ret or i == p:\n        continue\n      ret[p] = i\n\n      cur = p\n      good = True\n      for fuck in range(0, n - 1):\n        cur = ret[cur]\n        if cur == 0:\n          good = True\n          break\n        if cur == p:\n          good = False\n          break\n      \n      if not good:\n        ret[p] = 0\n        continue\n\n      k1 = my_fac(n - p - 1)\n      if k > k1:\n        k -= k1\n      else:\n        break\n      ret[p] = 0\n  ret.pop(0)\n  assert len(ret) == n\n  return ret;\n\ndef solve(n, k):\n  if k == 1:\n    ret = []\n    for i in range(1, n + 1):\n      ret.append(i)\n    return ret\n\n  tot = 0\n  first = -1\n  for i in range(1, n + 1):\n    if tot + my_fac(i - 2) * f[n - i] >= k:\n      first = i\n      break;\n    tot += my_fac(i - 2) * f[n - i]\n\n  k -= tot\n  cnt1 = my_fac(first - 1)\n  cnt2 = f[n - first]\n  \n  x = k // cnt2 + 1\n  y = k % cnt2\n\n  if y == 0:\n    y = cnt2\n    x -= 1\n\n  ret = solve_first(first, x)\n\n  for v in solve(n - first, y):\n    ret.append(v + first)\n\n  return ret\n\nT = int(input())\n\nfor t in range(0, T):\n  s = input().split()\n  n = int(s[0])\n  k = int(s[1])\n  if (k > f[n]):\n    print(\"-1\")\n  else:\n    ans = solve(n, k)\n    for x in ans:\n      print(x, end=\" \")\n    print(\"\")", "import math\n\n# init\nmaxn = 55\ng = [1]\nfor i in range(maxn):\n    g.append(math.factorial(i))\nf = [0] * maxn\nf[0] = 1\nfor i in range(1, maxn):\n    for j in range(i):\n        f[i] += f[j] * g[i - j - 1]\n\ndef kth(n, k):\n    if n == 1:\n        return [1]\n    ret = [-1] * n\n    ret[0] = n - 1\n    p1 = [i for i in range(n)]\n    p2 = [i for i in range(n)]\n    vis = [False] * n\n    p1[0] = n - 1\n    p2[n - 1] = 0\n    vis[n - 1] = True\n    for i in range(1, n - 1):\n        j = 0\n        now = math.factorial(n - i - 2)\n        while True:\n            while vis[j] or (i < n - 1 and j == p2[i]):\n                j += 1\n            if k > now:\n                k -= now\n                j += 1\n            else:\n                p1[p2[i]] = p1[j]\n                p2[p1[j]] = p2[i]\n                ret[i] = j\n                vis[j] = True\n                break\n    ret[-1] = p2[-1]\n    return [x + 1 for x in ret]\n\ndef solve(n, k):\n    if n == 0:\n        return []\n    i = 1\n    while g[i - 1] * f[n - i] < k:\n        k -= g[i - 1] * f[n - i]\n        i += 1\n    rem = solve(n - i, (k - 1) % f[n - i] + 1)\n    rem = [x + i for x in rem]\n    k = (k - 1) // f[n - i] + 1\n    return kth(i, k) + rem\n\ndef SOLVE():\n    n, k = map(int, input().split())\n    if k > f[n]:\n        print(-1)\n        return\n    ans = solve(n, k)\n    for x in ans:\n        print(x, end = \" \")\n    print()\n\nT = int(input())\nwhile T > 0:\n    T -= 1\n    SOLVE()\n\n", "import math\n\n# init\nmaxn = 55\ng = [1]\nfor i in range(maxn):\n    g.append(math.factorial(i))\nf = [0] * maxn\nf[0] = 1\nfor i in range(1, maxn):\n    for j in range(i):\n        f[i] += f[j] * g[i - j - 1]\n\ndef kth(n, k):\n    if n == 1:\n        return [1]\n    ret = [-1] * n\n    ret[0] = n - 1\n    p1 = [i for i in range(n)]\n    p2 = [i for i in range(n)]\n    vis = [False] * n\n    p1[0] = n - 1\n    p2[n - 1] = 0\n    vis[n - 1] = True\n    for i in range(1, n - 1):\n        j = 0\n        now = math.factorial(n - i - 2)\n        while True:\n            while vis[j] or (i < n - 1 and j == p2[i]):\n                j += 1\n            if k > now:\n                k -= now\n                j += 1\n            else:\n                p1[p2[i]] = p1[j]\n                p2[p1[j]] = p2[i]\n                ret[i] = j\n                vis[j] = True\n                break\n    ret[-1] = p2[-1]\n    return [x + 1 for x in ret]\n\ndef solve(n, k):\n    if n == 0:\n        return []\n    i = 1\n    while g[i - 1] * f[n - i] < k:\n        k -= g[i - 1] * f[n - i]\n        i += 1\n    rem = solve(n - i, (k - 1) % f[n - i] + 1)\n    rem = [x + i for x in rem]\n    k = (k - 1) // f[n - i] + 1\n    return kth(i, k) + rem\n\ndef SOLVE():\n    n, k = map(int, input().split())\n    if k > f[n]:\n        print(-1)\n        return\n    ans = solve(n, k)\n    for x in ans:\n        print(x, end = \" \")\n    print()\n\nT = int(input())\nwhile T > 0:\n    T -= 1\n    SOLVE()\n#\n#", "import math\n\n# init\nmaxn = 55\ng = [1]\nfor i in range(maxn):\n    g.append(math.factorial(i))\nf = [0] * maxn\nf[0] = 1\nfor i in range(1, maxn):\n    for j in range(i):\n        f[i] += f[j] * g[i - j - 1]\n\ndef kth(n, k):\n    if n == 1:\n        return [1]\n    ret = [-1]* n\n    ret[0] = n - 1\n    p1 = [i for i in range(n)]\n    p2 = [i for i in range(n)]\n    vis = [False] * n\n    p1[0] = n - 1\n    p2[n - 1] = 0\n    vis[n - 1] = True\n    for i in range(1, n - 1):\n        j = 0\n        now = math.factorial(n - i - 2)\n        while True:\n            while vis[j] or (i < n - 1 and j == p2[i]):\n                j += 1\n            if k > now:\n                k -= now\n                j += 1\n            else:\n                p1[p2[i]] = p1[j]\n                p2[p1[j]] = p2[i]\n                ret[i] = j\n                vis[j] = True\n                break\n    ret[-1] = p2[-1]\n    return [x + 1 for x in ret]\n\ndef solve(n, k):\n    if n == 0:\n        return []\n    i = 1\n    while g[i - 1] * f[n - i] < k:\n        k -= g[i - 1] * f[n - i]\n        i += 1\n    rem = solve(n - i, (k - 1) % f[n - i] + 1)\n    rem = [x + i for x in rem]\n    k = (k - 1) // f[n - i] + 1\n    return kth(i, k) + rem\n\ndef SOLVE():\n    n, k = map(int, input().split())\n    if k > f[n]:\n        print(-1)\n        return\n    ans = solve(n, k)\n    for x in ans:\n        print(x, end = \" \")\n    print()\n\nT = int(input())\nwhile T > 0:\n    T -= 1\n    SOLVE()\n\n"]