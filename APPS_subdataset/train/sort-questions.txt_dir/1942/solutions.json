["class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        result = []\n        fcSet = [set(fc) for fc in favoriteCompanies]\n        n = len(favoriteCompanies)\n        for i, fcs1 in enumerate(fcSet):\n            for j, fcs2 in enumerate(fcSet):\n                if i==j:\n                    continue\n                if fcs1<fcs2:\n                    break\n            else:\n                result.append(i)\n        return result", "class Person:\n    def __init__(self, index, favoriteCompanies):\n        self.index = index\n        self.favoriteCompanies = set(favoriteCompanies)\n        self.size = len(favoriteCompanies)\n    \n    def __repr__(self):\n        return \\\"{}\\\".format(self.favoriteCompanies)\n\nclass Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        people = [Person(i, l) for i, l in enumerate(favoriteCompanies)]\n        people.sort(key = lambda person : person.size, reverse = True)\n        \n        res = []\n        for i in range(len(people)):\n            contained = False\n            for j in range(i):\n                if people[i].favoriteCompanies.issubset(people[j].favoriteCompanies):\n                    contained = True\n                    break\n            if not contained:\n                res.append(people[i].index)\n        \n        return sorted(res)", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        n = len(favoriteCompanies)\n        res = list(range(n))\n        array_of_sets = [set(company) for company in favoriteCompanies]\n        for i in range(n):\n            for j in range(n):\n                if i != j:\n                    if array_of_sets[i].issubset(array_of_sets[j]):\n                        res.remove(i)\n                        break\n                        \n        return res\n", "\nclass Solution:\n  def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n    result = []\n    for x in range(0, len(favoriteCompanies)):\n      flag = True\n      for y in range(0, len(favoriteCompanies)):\n        if x == y:\n          continue\n\n        setx = set(favoriteCompanies[x])\n        sety = set(favoriteCompanies[y])\n\n        if setx.issubset(sety):\n\n          flag = False\n          break\n\n      if flag:\n        result.append(x)\n\n    return sorted(result)", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        return [i for i, s1 in enumerate(favoriteCompanies) \n                if not any(set(s1).issubset(s2) for s2 in favoriteCompanies if s1 is not s2)]", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        A = favoriteCompanies\n        location = {tuple(val):idx for idx, val in enumerate(A)}\n        A.sort(key=lambda x: len(x))\n        res = []\n        for i in range(len(A)):\n            for j in range(i+1, len(A)):\n                if set(A[i]) & set(A[j]) == set(A[i]):\n                    break\n            else:\n                res.append(location[tuple(A[i])])\n\n        res.sort()    \n        return res", "class Solution:\n    def peopleIndexes(self, f: List[List[str]]) -> List[int]:\n        \n        ans = []\n        l = 0\n        flag = False\n        for lists in f:\n            flag = False\n            for lists2 in f:\n                # print(lists)\n                # print(lists2)\n                if(lists == lists2):\n                    continue\n                if set(lists).issubset(set(lists2)):\n                    # print(\\\"in\\\n\\\")\n                    flag = True\n                    break\n            if flag == False:\n                ans.append(l)\n                    \n            l = l+1   \n            \n        return ans\n        ", "class Solution(object):\n    def peopleIndexes(self, favoriteCompanies):\n        \\\"\\\"\\\"\n        :type favoriteCompanies: List[List[str]]\n        :rtype: List[int]\n        \\\"\\\"\\\"\n        noSubset = []\n        # print(len(favoriteCompanies))\n        for i in range(len(favoriteCompanies)):\n            people = favoriteCompanies.copy()\n            people.pop(i)\n            # print(i)\n            # print(favoriteCompanies)\n            index = favoriteCompanies[i]\n            subsetStatus = [set(index).issubset(set(x)) for x in people]\n            if any(subsetStatus) == True:\n                # print(\\\"True\\\")\n                continue\n            else:\n                # print('False')\n                noSubset.append(i)\n        return noSubset ", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:    \n        \n        order = {tuple(value):idx for idx, value in enumerate(favoriteCompanies)}\n        favoriteCompanies  = sorted(favoriteCompanies,key=len,reverse=True)\n        ans = []\n        visited = []\n        for fav in favoriteCompanies:\n            \n            find = 0\n            for v in visited: \n                if set(v) & set(fav) == set(fav):\n                    find = 1\n                    break\n            if find == 0:\n                visited.append(fav)\n                ans.append(order[tuple(fav)])\n        \n            \n        return sorted(ans)", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        l=[0]*len(favoriteCompanies)\n        p=[]\n        for i in range(len(favoriteCompanies)):\n            \n            if l[i]==0:\n                p.append(i)\n                temp=set(favoriteCompanies[i])\n                for j in range(i+1,len(favoriteCompanies)):\n                    if temp & set(favoriteCompanies[j])==temp:\n                        l[i]=1\n                    \n                        p[-1]=j\n                        temp=set(favoriteCompanies[j])\n                    elif temp & set(favoriteCompanies[j])==set(favoriteCompanies[j]):\n                        l[j]=1\n            \n        p=set(p)            \n        p=list(p)  \n        p.sort()\n        return  p              \n                        \n            \n", "class Solution:\n    def peopleIndexes(self, com: List[List[str]]) -> List[int]:\n        c = com[:]\n        com.sort(key=lambda x:-len(x))\n        index = 1\n        while index < len(com):\n            curr = set(com[index])\n            if any(set(com[i]) & curr == curr for i in range(index)):\n                com.pop(index)\n            else:\n                index += 1\n        res = []\n        for i in com:\n            for j in range(len(c)):\n                if i == c[j]:\n                    res.append(j)\n        return sorted(res)", "class Solution:\n    def peopleIndexes(self, fav: List[List[str]]) -> List[int]:\n        l=[]\n        l1=[]\n        for i in range(len(fav)):\n            for j in range(len(fav)):\n                \n                if j is not i and set(fav[i]).issubset(set(fav[j])):\n                    l.append(i)\n        for i in range(len(fav)):\n            if i not in l:\n                l1.append(i)\n        return l1", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        fev_set = []\n        for i in favoriteCompanies:\n            tmp = set()\n            for j in i:\n                tmp.add(j)\n            fev_set.append(tmp)\n        ans = []\n        for ind, i in enumerate(fev_set):\n            flag = 0\n            for i2, j in enumerate(fev_set):\n                if i2 != ind and i <= j:\n                    flag = 1\n                    break\n            if not flag:\n                ans.append(ind)\n        return ans", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        def isSubset(lst1, lst2):\n            if len(lst1) > len(lst2):\n                return False\n            largerSet = set()\n            for elt in lst2:\n                largerSet.add(elt)\n            for elt in lst1:\n                if elt not in largerSet:\n                    return False\n            return True\n        return [i for i in range(len(favoriteCompanies)) if not any(j != i and isSubset(favoriteCompanies[i], favoriteCompanies[j]) for j in range(len(favoriteCompanies)))]\n                \n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        res = []\n        l = len(favoriteCompanies)\n        for i in range(l):\n            f = 0\n            for j in range(l):\n                if i != j:\n                    if set(favoriteCompanies[i]).issubset(set(favoriteCompanies[j])):\n                        f=1\n                        break\n            if f==0:\n                res.append(i)\n        return res", "class Solution:\n    def peopleIndexes(self, fc: List[List[str]]) -> List[int]:\n        def helper(s, b):\n            return len(set(s).intersection(set(b))) == len(s)\n        \n        n = len(fc)\n        out = []\n        for i in range(n):\n            f = fc.pop(0)\n            for rest in fc:\n                if helper(f, rest):\n                    out.append(i)\n                    break\n            fc.append(f)\n\n        return sorted(list(set(range(n)).difference(set(out))))", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        def isSubset(lst1, lst2):\n            largerSet = set()\n            for elt in lst2:\n                largerSet.add(elt)\n            for elt in lst1:\n                if elt not in largerSet:\n                    return False\n            return True\n        return [i for i in range(len(favoriteCompanies)) if not any(j != i and isSubset(favoriteCompanies[i], favoriteCompanies[j]) for j in range(len(favoriteCompanies)))]\n                \n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        no_overlap = []\n        \n        for i in range(len(favoriteCompanies)):\n            flag = True\n            for j in range(len(favoriteCompanies)):\n                if i == j:\n                    continue\n                if len(set(favoriteCompanies[i]) - set(favoriteCompanies[j])) == 0:\n                    flag = False\n                    break\n                \n            if flag:\n                no_overlap.append(i)\n        \n        return no_overlap", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        ret = []        \n        # for ind, i in enumerate(favoriteCompanies):\n        #     favoriteCompanies[ind] = set(sorted(i))\n        for ind, current_person in enumerate(favoriteCompanies):\n            check = False\n            for j in range(len(favoriteCompanies)):\n                if ind==j: continue\n                previous_person = favoriteCompanies[j]\n                if len(list(set(current_person) & set(previous_person)))==len(current_person):\n                    check = True\n                    break\n            if not check:\n                ret.append(ind)\n        return ret\n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        #15\n        mp = {}\n        num_person = len(favoriteCompanies)\n        for i in range(num_person):\n            p = favoriteCompanies[i]\n            for v in p:\n                if v not in mp:\n                    mp[v] = set()\n                mp[v].add(i)\n        result = []\n        for i in range(num_person):\n            p = favoriteCompanies[i]\n            common = {}\n            found = False\n            for v in p:\n                for k in mp[v]:\n                    if k not in common:\n                        common[k] = 0\n                    common[k] += 1\n                    if common[k] == len(p) and k != i:\n                        found = True\n                        break\n                if found == True:\n                    break\n            if found == False:\n                result.append(i)\n        return result", "class Solution:\n    def peopleIndexes(self, A: List[List[str]]) -> List[int]:\n        A = [set(A[i]) for i in range(len(A))]\n        answer = []\n        for i in range(len(A)):\n            answer.append(i)\n            for j in range(len(A)):\n                if i != j and len(A[i]|A[j]) == len(A[j]):\n                    answer.pop()\n                    break\n        return answer\n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        LEN = len(favoriteCompanies)\n        ans = []\n        for i in range(LEN):\n            found = False\n            for j in range(LEN):\n                if i != j:\n                    s1 = set(favoriteCompanies[i])\n                    s2 = set(favoriteCompanies[j])\n                    if len(s1 & s2) == len(s1):\n                        found = True\n                \n            if not found:\n                ans.append(i)\n        return ans", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        subsets=set()\n        res=[]\n        for i in range(len(favoriteCompanies)):\n            for j in range(len(favoriteCompanies)):\n                if i!=j and set(favoriteCompanies[i]).issubset(favoriteCompanies[j]):\n                    subsets.add(i)\n        for i in range(len(favoriteCompanies)):\n            if i not in subsets:\n                res.append(i)\n        return res", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        fev_set = []\n        for i in favoriteCompanies:\n            tmp = set()\n            for j in i:\n                tmp.add(j)\n            fev_set.append(tmp)\n        print(fev_set)\n        ans = []\n        for ind, i in enumerate(fev_set):\n            flag = 0\n            for i2, j in enumerate(fev_set):\n                if i2 != ind and i <= j:\n                    flag = 1\n                    break\n            if not flag:\n                ans.append(ind)\n        return ans", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        result = []\n        for i in range(len(favoriteCompanies)):\n            f = True\n            for x in favoriteCompanies[:i] + favoriteCompanies[i+1:]:\n                if set(favoriteCompanies[i]).intersection(set(x)) == set(favoriteCompanies[i]):\n                    f = False\n                    break\n            if f:\n                result.append(i)\n        return result\n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        ans = []\n        \n        for i in range(len(favoriteCompanies)):\n            for j in range(len(favoriteCompanies)):\n                if i != j:\n                    if len(set(favoriteCompanies[i]) & set(favoriteCompanies[j])) == len(set(favoriteCompanies[i])):\n                        break\n            else:\n                ans.append(i)\n        return ans\n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        ans=[]\n        for i in range(len(favoriteCompanies)):\n            flag=0\n            for j in range(len(favoriteCompanies)):\n            \n                if (set(favoriteCompanies[i]) & set(favoriteCompanies[j])) == set(favoriteCompanies[i]) and i!=j:\n                    flag=1\n                    break\n            if flag==0:\n                ans.append(i)\n                \n        return ans\n                    \n                \n        \n        \n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        dic = collections.defaultdict(list)\n        fc = favoriteCompanies\n        for i, p in enumerate(fc):\n            for c in p:\n                dic[c].append(i)\n        n = len(fc)\n        counter = [[0] * n for _ in range(n)]\n        for l in dic.values():\n            for i in range(len(l)):\n                for j in range(i + 1, len(l)):\n                    counter[l[i]][l[j]] += 1\n                    counter[l[j]][l[i]] += 1\n        ans = set()\n        for i in range(n):\n            for j in range(n):\n                if counter[i][j] == len(fc[i]):\n                    ans.add(i)\n                    break\n               \n        return sorted(set(range(n)) - ans)", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        dic = {}\n        ind = 0\n        profile = []\n        for companies in favoriteCompanies:\n            for company in companies:\n                if company not in dic:\n                    dic[company] = ind\n                    ind += 1\n        \n        for companies in favoriteCompanies:\n            val = 0\n            for company in companies:\n                val += 2**dic[company]\n            profile.append(val)\n        \n        res = []\n        for i in range(len(profile)):\n            flag = True\n            for j in range(len(profile)):\n                if i == j:\n                    continue\n                elif profile[i] | profile[j] == profile[j]:\n                    flag = False\n                    break\n            if flag:\n                res.append(i)\n        return res\n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        dic_companies = {}\n        inx = 0\n        for companies in favoriteCompanies:\n            for company in companies:\n                if company not in dic_companies:\n                    dic_companies[company] = inx\n                    inx += 1\n\n        favorite_comp = []\n        for companies in favoriteCompanies:\n            val = 0\n            for company in companies:\n                val += 2** dic_companies[company]\n            favorite_comp.append(val)\n\n        res = []\n\n        for i in range(len(favorite_comp)):\n            flag = True\n            for j in range(len(favorite_comp)):\n                if i == j:continue\n                if favorite_comp[i] | favorite_comp[j] == favorite_comp[j]:\n                    flag = False\n                    break\n            if flag:\n                res.append(i)\n\n        return res", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        ans = []\n        \n        for i in range(len(favoriteCompanies)):\n            for j in range(len(favoriteCompanies)):\n                if i != j:\n                    if len(set(favoriteCompanies[i]) & set(favoriteCompanies[j])) == len(set(favoriteCompanies[i])):\n                        break\n            else:\n                ans.append(i)\n        return ans\n        \n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        for u in favoriteCompanies:\n            u.sort()\n        L=len(favoriteCompanies)\n        dic={}\n        def check(i,j):\n            if (i,j) in dic:\n                return dic[(i,j)]\n            else:\n                stack1=favoriteCompanies[i].copy()\n                stack2=favoriteCompanies[j].copy()\n                while stack1 and stack2:\n                    if stack2[0]!=stack1[0]:\n                        stack2.pop(0)\n                    elif stack2[0]==stack1[0]:\n                        stack1.pop(0)\n                        stack2.pop(0)\n                if not stack1:\n                    dic[(i,j)]=True\n                    return True\n                else:\n                    dic[(i,j)]=False\n                    return False\n        ans=[]\n        for i in range(L):\n            status=0\n            for j in range(L):\n                if j!=i and check(i,j):\n                    status=1\n                    break\n            if status==0:\n                ans.append(i)\n        return ans", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        for u in favoriteCompanies:\n            u.sort()\n        L=len(favoriteCompanies)\n        dic={}\n        def check(i,j):\n            if (i,j) in dic:\n                return dic[(i,j)]\n            else:\n                status=0\n                stack1=favoriteCompanies[i].copy()\n                stack2=favoriteCompanies[j].copy()\n                while stack1 and stack2:\n                    if stack2[0]!=stack1[0]:\n                        status=1\n                        stack2.pop(0)\n                    elif stack2[0]==stack1[0]:\n                        stack1.pop(0)\n                        stack2.pop(0)\n                if not stack1:\n                    dic[(i,j)]=True\n                    if status==1:\n                        dic[(j,i)]=False\n                    return True\n                else:\n                    dic[(i,j)]=False\n                    return False\n        ans=[]\n        for i in range(L):\n            status=0\n            for j in range(L):\n                if j!=i and check(i,j):\n                    status=1\n                    break\n            if status==0:\n                ans.append(i)\n        return ans", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        n = len(favoriteCompanies)\n        \n        for i in range(n):\n            favoriteCompanies[i] = set(favoriteCompanies[i])\n        \n        ans = []\n        \n        for i in range(n):\n            for j in range(n):\n                if i!=j and favoriteCompanies[i]<=favoriteCompanies[j]:\n                    break\n            else:\n                ans.append(i)\n        \n        return ans", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        frequency_dict = dict()\n        word_tracker = dict()\n        \n        for index, companies in enumerate(favoriteCompanies):\n            for company in companies:\n                if company not in word_tracker:\n                    word_tracker[company] = []\n                \n                for matched_index in word_tracker[company]:\n                    if matched_index not in list(frequency_dict.keys()):\n                        frequency_dict[matched_index] = dict()\n                    if index not in list(frequency_dict[matched_index].keys()):\n                        frequency_dict[matched_index][index] = 0\n\n                    if index not in list(frequency_dict.keys()):\n                        frequency_dict[index] = dict()\n                    if matched_index not in list(frequency_dict[index].keys()):\n                        frequency_dict[index][matched_index] = 0\n                        \n                    frequency_dict[matched_index][index] += 1\n                    frequency_dict[index][matched_index] += 1\n                    \n                word_tracker[company].append(index)\n        \n        ret_list = []\n        for index, companies in enumerate(favoriteCompanies):\n            is_subset = False\n            if index in list(frequency_dict.keys()):\n                for key in list(frequency_dict[index].keys()):\n                    if frequency_dict[index][key] >= len(companies):\n                        is_subset = True\n                        break\n            \n            if not(is_subset):\n                ret_list.append(index)\n        return ret_list\n        \n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        c_id = 0\n        h = {}\n        for fc in favoriteCompanies:\n            for c in fc:\n                if c in h:\n                    continue\n                h[c] = c_id\n                c_id += 1\n        for idx, fc in enumerate(favoriteCompanies):\n            fc.sort(key=lambda x: h[x])\n            \n        N = len(favoriteCompanies)\n        ret = []\n        for i in range(N):\n            for j in range(N):\n                if i == j:\n                    continue\n                ci, cj = favoriteCompanies[i], favoriteCompanies[j]\n                iidx, jidx = 0, 0\n                while iidx < len(ci) and jidx < len(cj):\n                    iidx += ci[iidx] == cj[jidx]\n                    jidx += 1\n                if iidx == len(ci):\n                    break\n            else:\n                ret.append(i)\n        return ret \n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        res = []\n        l = len(favoriteCompanies)\n        for i in range(l):\n            f = 0\n            for j in range(l):\n                if i != j:\n                    if (set(favoriteCompanies[i]) | set(favoriteCompanies[j])) == set(favoriteCompanies[j]):\n                        f=1\n                        break\n            if f==0:\n                res.append(i)\n        return res", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        a = [set(y) for y in favoriteCompanies]\n        def check(i):\n            return all([i == j or not a[i].issubset(a[j]) for j in range(len(a))])\n        return [i for i in range(len(a)) if check(i)]", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        sets = [set(x) for x in favoriteCompanies]\n        \n        for i, companies in enumerate(sets):\n            for j, other in enumerate(sets):\n                if i == j: continue\n                if companies <= other:\n                    break\n            else:\n                yield i", "class Solution:\n    def peopleIndexes(self, favorite_companies: List[List[str]]) -> List[int]:\n        company_set_per_person = []\n        for i, company_list in enumerate(favorite_companies):\n            company_set = set(company_list)\n            found = False\n            for j, (other_company_set, k) in enumerate(company_set_per_person):\n                if company_set >= other_company_set:\n                    company_set_per_person[j] = (company_set, i)\n                    found = True\n                    break\n                if company_set <= other_company_set:\n                    found = True\n                    break\n            if not found:\n                company_set_per_person.append((company_set, i))\n        \n        # print(company_set_per_person)\n        \n        ans = []\n        for i, company_list in enumerate(favorite_companies):\n            company_set = set(company_list)\n            found = False\n            for other_company_set, j in company_set_per_person:\n                if company_set <= other_company_set and i != j:\n                    found = True\n                    break\n            if not found:\n                ans.append(i)\n        return ans", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        \n        d={}\n        n=len(favoriteCompanies)\n        A=[]\n        for j,arr in enumerate(favoriteCompanies):\n            A.append((arr,j))\n        \n        A.sort(key=lambda x:len(x[0]),reverse=True)\n        print(A)\n        ans=[]\n        s1=set()\n        for i in range(n):\n            k=A[i][1]\n            s1.add(k)\n            temp=s1\n            for j,c in  enumerate(A[i][0]):\n                if c not in d:\n                    d[c]=set([k])\n                else:\n                    d[c].add(k)\n                temp=temp.intersection(d[c])\n                \n                    \n            if len(temp)==1:\n                ans.append(k)\n            \n                    \n            \n                \n        ans.sort()\n                \n        \n        return ans\n                \n                        \n                    \n                    \n                    \n            \n        \n        \n", "class Solution(object):\n    \\\"\\\"\\\"\n    \u4f7f\u7528\u7c7b\u4f3c\u5e76\u67e5\u96c6\u7684\u89e3\u6cd5\n\n    # \u601d\u8def\n\n    \u6709\u5305\u542b\u5173\u7cfb\u7684\u4e3a\u4e00\u7ec4\uff0c\u8f93\u5165\u6bcf\u4e2a\u7fa4\u7ec4\u7684\u5934\u7d22\u5f15\n\n    # \u6ce8\u610f\n\n    \u4e0d\u80fd\u76f4\u63a5\u7528\u5e76\u67e5\u96c6\uff0c\u6bd4\u5982 0, 3 \u8fde\u901a\u4e86, \u4f7f\u7528\u5e76\u67e5\u96c6\u5904\u7406\u5230 1, 3 \u65f6\u4f1a\u5c06\u5176\u8fde\u901a\u4e3a 0, 1, 3\n\n    \\\"\\\"\\\"\n\n    def peopleIndexes(self, favoriteCompanies):\n        \\\"\\\"\\\"\n        :type favoriteCompanies: List[List[str]]\n        :rtype: List[int]\n        \\\"\\\"\\\"\n\n        n_person = len(favoriteCompanies)\n\n        companies = [set(companies) for companies in favoriteCompanies]\n\n        parent = [i for i in range(n_person)]\n\n        for person_a in range(n_person):\n            for person_b in range(person_a + 1, n_person):  # \u5bf9\u6240\u6709\u7684\u4eba\u4e24\u4e24\u5904\u7406\n                if companies[person_a].issubset(companies[person_b]):\n                    parent[person_a] = parent[person_b]\n                elif companies[person_b].issubset(companies[person_a]):\n                    parent[person_b] = parent[person_a]\n\n        roots = set()\n        for person in range(n_person):\n            root = parent[person]\n            while root != parent[root]:\n                root = parent[root]\n            roots.add(root)\n        return sorted(list(roots))\n\n\n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        \n        \n        htable = {}\n        for i, j in enumerate(favoriteCompanies):\n            htable[i] = set(j)\n        result = []    \n        for k in htable:\n            flag = True\n            for j in list(htable.values()):\n                if htable[k] == j:\n                    continue\n                elif htable[k].issubset(j):\n                    flag = False\n                    break\n\n            if flag:\n                result.append(k)\n        print(result)\n        return result\n                    \n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        # ans = []\n        # s = [set(cs) for cs in favoriteCompanies]\n        # print(s)\n        # for i, s1 in enumerate(s):\n        #     if all (i == j or not s1.issubset(s2) for j, s2 in enumerate(s)):\n        #         ans.append(i)\n        # return ans\n    \n        people = []\n        sets = [set(Co) for Co in favoriteCompanies]\n        for i, a in enumerate(sets):\n            for j, b in enumerate(sets):\n                if i == j: continue\n                if a.issubset(b): break\n            else:\n                people.append(i)\n\n        return people", "class Solution:\n    def _subset(self, fav, result):\n        for x in result:\n            if not fav - x:\n                return True\n        return False\n\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        favorite_companies = [tuple(sorted(x)) for x in favoriteCompanies]\n        val_to_key = {x: i for i, x in enumerate(favorite_companies)}\n        len_to_comp = collections.defaultdict(list)\n        for x in favorite_companies:\n            len_to_comp[len(x)].append(set(x))\n        sorted_keys = sorted(len_to_comp, reverse=True)\n        result = []\n        for key in sorted_keys:\n            curr = []\n            for fav in len_to_comp[key]:\n                if not self._subset(fav, result):\n                    curr.append(fav)\n            result += curr\n        result = [tuple(sorted(x)) for x in result]\n        return sorted([val_to_key[x] for x in result])\n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        \n        cs = {w for f in favoriteCompanies for w in f}\n        cs = {v: i for i, v in enumerate(cs)}\n        fs = []\n        for f in favoriteCompanies:\n            i = 0\n            for c in f:\n                i |= 1 << cs[c]\n            fs.append(i)\n            \n        ans = []\n        for i in range(len(fs)):\n            f = 1\n            for j in range(len(fs)):\n                if i == j: continue\n                if fs[i] | fs[j] == fs[j]:\n                    f ^= 1\n                    break\n            if f:\n                ans.append(i)\n        return ans\n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        res = []\n        subsets = sorted([[set(companies), i]\n                            for i, companies in enumerate(favoriteCompanies)], key=lambda x: len(x[0]))\n        for i, companies in enumerate(subsets):\n            companies, res_i = companies\n            for j, companies2 in enumerate(subsets[i+1:], i+1):\n                companies2 = companies2[0]\n                if all(company in companies2 for company in companies):\n                    break\n            else:\n                res += res_i,\n        return sorted(res)", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        favorite_index = collections.defaultdict(set)\n        for fav in range(len(favoriteCompanies)):\n            for company in favoriteCompanies[fav]:\n                favorite_index[company].add(fav)\n        \n        result = []\n        for fav in range(len(favoriteCompanies)):\n            subsets = set()\n            first = True\n            for company in favoriteCompanies[fav]:\n                if first:\n                    subsets = subsets.union(favorite_index[company])\n                    first = False\n                else:\n                    subsets = subsets.intersection(favorite_index[company])\n                    # print(f'for {fav} on {company}: {subsets}')\n                if len(subsets) == 1:\n                    result.append(fav)\n                    break\n        return result", "def comp(a,b):\n    for i in a:\n        if(i not in b):\n            return 0\n    return 1\nclass Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        favoriteCompanies = [(j,i) for i,j in enumerate(favoriteCompanies)]\n        x = sorted(favoriteCompanies, key = lambda x:len(x[0]), reverse = True)\n        y = [i[1] for i in x]\n        x = [i[0] for i in x]\n        arrd = []\n        for i in range(len(x)):\n            d = {}\n            for j in range(len(x[i])):\n                d[x[i][j]] = 1\n            arrd.append(d)\n        # print(arrd)\n        ind = [0]*len(x)\n        for j in range(len(x)):\n            for i in range(j-1,-1,-1):\n                if(comp(arrd[j], arrd[i])):\n                    ind[j] = 1\n                    break\n        f = []\n        for i in range(len(ind)):\n            if(ind[i] == 0):\n                f.append(y[i])\n        return sorted(f)\n", "class Solution:\n    def peopleIndexes(self, A: List[List[str]]) -> List[int]:\n        d = {i: set(v) for i, v in enumerate(A)}\n        res = []\n        for i in range(len(A)):\n            isSubset = False\n            for j in range(len(A)):\n                if i == j:\n                    continue\n                if d[i].issubset(d[j]):\n                    isSubset = True\n                    break\n            if not isSubset: res.append(i)         \n        return res    ", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        g = collections.defaultdict(set)\n        self.parent = [i for i in range(len(favoriteCompanies))]\n        for i, companies in enumerate(favoriteCompanies):\n            g[i] = set(companies)\n        for i in range(len(favoriteCompanies)):\n            for j in range(i+1,len(favoriteCompanies)):\n                a,b = self.find(i),self.find(j)\n                if a != b:\n                    if g[a] >= g[b]:\n                        self.parent[b] = a\n                    elif g[b] > g[a]:\n                        self.parent[a] = b\n        res = set()\n        for i in range(len(favoriteCompanies)):\n            res.add(self.find(i))\n        return sorted(res)\n        \n    def find(self,i):\n        while self.parent[i] != i:\n            self.parent[i] = self.parent[self.parent[i]]\n            i = self.parent[i]\n        return i\n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        d={}\n        for ind,company in enumerate(favoriteCompanies):\n            for e in company:\n                if e not in d:\n                    d[e]=set()\n                d[e].add(ind)\n        #print('d',d)\n        output=[]\n        for ind,company in enumerate(favoriteCompanies):\n            temp=d[company[0]]\n            for e in company[1:]:\n                temp=temp.intersection(d[e])\n            if len(temp)<=1:\n                output.append(ind)\n        return output\n            \n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        ans = []\n        s = [set(c) for c in favoriteCompanies]\n        for i, s1 in enumerate(s):\n            if all(i==j or not s1.issubset(s2) for j, s2 in enumerate(s)):\n                ans.append(i)\n        return ans", "class Solution:\n    def peopleIndexes(self, fv: List[List[str]]) -> List[int]:\n        \n        dic = defaultdict(lambda : set())\n        for i in range(len(fv)):\n            for cmp in fv[i]:\n                dic[cmp].add(i)\n        ans = []\n        ind = 0\n        for lst in fv:\n            st = None\n            for cmp in lst:\n                if st:\n                    st &= dic[cmp]\n                else:\n                    st = dic[cmp].copy()\n            if len(st) == 1:\n                ans.append(ind)\n            ind += 1\n        return sorted(ans)\n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        # ans = []\n        # s = [set(cs) for cs in favoriteCompanies]\n        # print(s)\n        # for i, s1 in enumerate(s):\n        #     if all (i == j or not s1.issubset(s2) for j, s2 in enumerate(s)):\n        #         ans.append(i)\n        # return ans\n    \n        people = []\n        sets = [set(a) for a in favoriteCompanies]\n        for i, a in enumerate(sets):\n            for j, b in enumerate(sets):\n                if i == j: continue\n                if a.issubset(b): break\n            else:\n                people.append(i)\n\n        return people", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        graph = collections.defaultdict(set)\n        for i, companies in enumerate(favoriteCompanies): \n            for comp in companies: \n                graph[comp].add(i)\n        ans = []\n        for i, companies in enumerate(favoriteCompanies): \n            groups = None\n            for comp in companies: \n                if groups is None: \n                    groups = set(x for x in graph[comp])\n                else: \n                    groups &= graph[comp]\n            if len(groups) == 1: \n                ans.append(i)\n        return ans\n                \n        \n\n        # build trie\n#         trie = {}\n#         for companies in favoriteCompanies: \n#             companies.sort()\n#             for c in (companies[i:] for i in range(len(companies))):\n#                 node = trie\n#                 for e in c: \n#                     if e not in node: \n#                         node[e] = {'#': 0}\n#                     node = node[e]\n#                     node['#'] += 1\n#         ans = []\n#         for i, companies in enumerate(favoriteCompanies): \n#             node = trie\n#             for c in companies: \n#                 node = node[c]\n#             if node['#'] == 1: ans.append(i)\n#         return ans\n    \n        \n            \n            \n                    \n            \n            \n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        graph = collections.defaultdict(set)\n        for i, companies in enumerate(favoriteCompanies): \n            for comp in companies: \n                graph[comp].add(i)\n        ans = []\n        for i, companies in enumerate(favoriteCompanies): \n            groups = None\n            for comp in companies: \n                if groups is None: \n                    groups = set(x for x in graph[comp])\n                else: \n                    groups &= graph[comp]\n            if len(groups) == 1: ans.append(i)\n        return ans\n                \n        \n\n        # build trie\n#         trie = {}\n#         for companies in favoriteCompanies: \n#             companies.sort()\n#             for c in (companies[i:] for i in range(len(companies))):\n#                 node = trie\n#                 for e in c: \n#                     if e not in node: \n#                         node[e] = {'#': 0}\n#                     node = node[e]\n#                     node['#'] += 1\n#         ans = []\n#         for i, companies in enumerate(favoriteCompanies): \n#             node = trie\n#             for c in companies: \n#                 node = node[c]\n#             if node['#'] == 1: ans.append(i)\n#         return ans\n    \n        \n            \n            \n                    \n            \n            \n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        companies = favoriteCompanies[:]\n        for i in range(len(companies)):\n            companies[i] = set(companies[i])       \n        \n        subsets = []\n        for i in range(len(companies)):\n            currSet = companies[i]\n            for j in range(len(companies)):\n                if i != j:\n                    count = 0\n                    for each in currSet:\n                        if each in companies[j]:\n                            count += 1\n                        else:\n                            break\n                    if count == len(currSet):\n                        subsets.append(i)\n                        break\n        \n        size = len(favoriteCompanies) - len(subsets)\n        res = [None] * size\n        curr = 0\n        subsets = set(subsets)\n        for i in range(len(favoriteCompanies)):\n            if i not in subsets:\n                res[curr] = i\n                curr += 1\n                \n        return res", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        dict = defaultdict(int)\n        for i,lst in enumerate(favoriteCompanies):\n            people_mask = 1<<i\n            for comp in lst:\n                dict[comp] += people_mask\n                \n        res = []\n        for i,lst in enumerate(favoriteCompanies):\n            other_people = ~(1<<i)\n            for comp in lst:\n                other_people &= dict[comp]\n                if not other_people:\n                    break\n            if not other_people:\n                res.append(i)\n        return res\n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        \n        \n        name2idx = {}\n        group = {}\n        \n        for i in range(len(favoriteCompanies)):    \n            for item in favoriteCompanies[i]:\n                if not item in name2idx:\n                    name2idx[item] = len(name2idx)\n        \n        for i in range(len(favoriteCompanies)):\n            favoriteCompanies[i] = [name2idx[x] for x in favoriteCompanies[i]]\n        \n        for i in range(len(favoriteCompanies)):\n            group[tuple([x for x in favoriteCompanies[i]])] = i\n        \n        favoriteCompanies = sorted(favoriteCompanies, key=lambda x: len(x), reverse=True)\n        \n        # print(group)\n        # print(favoriteCompanies)\n        ans = []\n        for i in range(len(favoriteCompanies)):\n            if len(ans)==0:\n                ans.append(group[tuple([x for x in favoriteCompanies[i]])])\n                continue\n            \n            cur_set = set(favoriteCompanies[i])\n            flag = True\n            for j in range(i):\n                pre_set = set(favoriteCompanies[j])\n                \n                if cur_set.issubset(pre_set):\n                    flag = False\n                    break\n            \n            if flag:\n                ans.append(group[tuple([x for x in favoriteCompanies[i]])])\n        \n        ans.sort()\n        return ans\n                    \n                \n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        res = []\n        subsets = [[set(companies), i]\n                            for i, companies in enumerate(favoriteCompanies)]\n        for i, companies in enumerate(subsets):\n            companies, res_i = companies\n            for j, companies2 in enumerate(subsets):\n                if i == j:\n                    continue\n                companies2 = companies2[0]\n                if all(company in companies2 for company in companies):\n                    break\n            else:\n                res += res_i,\n        return sorted(res)", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        ans = []\n        s = [set(comp) for comp in favoriteCompanies]\n        # turn the companies into sets\n        # check that all point have i == j or s1 is not a subset s2\n        for i , s1 in enumerate(s):\n            if all(i==j or not s1.issubset(s2) for j, s2 in enumerate(s)):\n                ans.append(i)\n        return ans\n            \n        \n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n\n        D = collections.defaultdict(int)\n        \n        for i, cs in enumerate(favoriteCompanies):\n            p = 1 << i\n            \n            for c in cs:\n                D[c] |= p\n                \n        res = []\n        ac = 2 ** len(favoriteCompanies) - 1\n        \n        for i, cs in enumerate(favoriteCompanies):\n            p = 1 << i\n            pc = ac\n            \n            for c in cs:\n                pc &= D[c]\n            \n            if p == pc:\n                res.append(i)\n        \n        return res", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        coms = sorted([[set(cs), oi] for oi, cs in enumerate(favoriteCompanies)], key=lambda x: len(x[0]))\n        ret = []\n        for i, com in enumerate(coms):\n            com1, oi = com\n            is_sub = False\n            for com2, _ in coms[i+1:]:\n                if not com1 - com2:\n                    is_sub = True\n                    break\n            if not is_sub:\n                ret.append(oi)\n        return sorted(ret)", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        if len(favoriteCompanies) == 0:\n            return []\n        answer = []\n        listOfSets = [ [set(favoriteCompanies[index]), index] for index in range(len(favoriteCompanies)) ]\n        listOfSets.sort(key=lambda pair : len(pair[0]))\n        print(listOfSets)\n        for i in range(len(listOfSets)):\n            subset = False\n            for j in range(i+1, len(listOfSets)):\n                #print(f\\\"current {listOfSets[i][0]} subset of {listOfSets[j][0]}\\\")\n                if listOfSets[i][0].issubset(listOfSets[j][0]):\n                    subset = True\n                    #print(\\\"Found subset\\\")\n                    break\n            if subset == False:\n                answer.append(listOfSets[i][1])\n        answer.sort()\n        return answer", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        idx = {}\n        encoded = []\n        n = len(favoriteCompanies)\n        for l in favoriteCompanies:\n            b = 0\n            for c in l:\n                idx.setdefault(c, len(idx))\n                b |= 1 << idx[c]\n            encoded.append(b)\n        ans = []\n        for i, b1 in enumerate(encoded):\n            for b2 in encoded:\n                if b1 | b2 == b2 and b1 != b2:\n                    break\n            else:\n                ans.append(i)\n        return ans\n        \n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        lst = []\n        n = len(favoriteCompanies)\n        for i in range(n):\n            c = set(favoriteCompanies[i])\n            lst.append([c, i])\n        lst.sort(key = lambda x: -len(x[0]))\n        subset = set()\n        for i in range (n - 1, 0, -1):\n            for j in range(i-1, -1, -1):\n                if lst[j][0] & lst[i][0] == lst[i][0]:\n                    subset.add(lst[i][1])\n        return [i for i in range(n) if i not in subset]", "class Solution:\n    def peopleIndexes(self, favorites: List[List[str]]) -> List[int]:\n        # res = []\n        # l = len(favoriteCompanies)\n        # for i in range(l):\n        #     f = 0\n        #     for j in range(l):\n        #         if i != j:\n        #             if set(favoriteCompanies[i]).issubset(set(favoriteCompanies[j])):\n        #                 f=1\n        #                 break\n        #     if f==0:\n        #         res.append(i)\n        # return res\n        \n        parents = []\n        parent_sets = []\n        for i in sorted(range(len(favorites)), key=lambda i: len(favorites[i]), reverse=True):\n            c = set(favorites[i])\n            \n            is_parent = True\n            for p in parent_sets:\n                if c.issubset(p):\n                    is_parent = False\n                    break\n            \n            if is_parent:\n                parents.append(i)\n                parent_sets.append(c)\n            \n        return sorted(parents)", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        n = len(favoriteCompanies)\n        res = list(range(n))\n        seen = set()\n        array_of_sets = [set(company) for company in favoriteCompanies]\n        for i in range(n-1):\n            for j in range(i+1, n):\n                if i != j:\n                    remind = array_of_sets[i] & array_of_sets[j]\n                    if remind == array_of_sets[i]:\n                        if i not in seen:\n                            seen.add(i)\n                            res.remove(i)\n                    if remind == array_of_sets[j]:\n                        if j not in seen:\n                            seen.add(j)\n                            res.remove(j)\n        return res\n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        companies_set = [set(c) for c in favoriteCompanies]\n        \n        res = []\n        for i, s1 in enumerate(companies_set):\n            is_subset = False\n            for j, s2 in enumerate(companies_set):\n                if i == j:\n                    continue\n                if s1.issubset(s2):\n                    is_subset = True\n                \n            if not is_subset:\n                res.append(i)\n            \n        return res", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        length = len(favoriteCompanies)\n        for i in range(length):\n            favoriteCompanies[i] = set(favoriteCompanies[i])\n        res = []\n        for i in range(length):\n            pattern = favoriteCompanies[i]\n            for flist in favoriteCompanies:\n                if pattern < flist: break\n            else:\n                res.append(i)\n        return res", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        ans = []\n        s = [set(c) for c in favoriteCompanies]\n        for i, s1 in enumerate(s):\n            if all( i == j or not(s1.issubset(s2)) for j, s2 in enumerate(s)):\n                ans.append(i)\n                    \n        return ans", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        res = []\n        sets = [set(a) for a in favoriteCompanies]\n        for i, a in enumerate(sets):\n            for j, b in enumerate(sets):\n                if i == j: continue\n                if a.issubset(b): break\n            else:\n                res.append(i)\n        return res\n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        # s=set()\n        # b=set()\n        # x=s.intersection(b)\n        glb=set()\n        ct=0\n        # d={}\n        ds={}\n        for i in favoriteCompanies:\n            for j in i:\n                if j not in glb:\n                    ct=ct+1\n                    ds[j]=ct\n                    glb.add(j)\n        d=collections.defaultdict(set)\n        \n        for i in range(len(favoriteCompanies)):\n            new=set()\n            for j in favoriteCompanies[i]:\n                new.add(ds[j])\n                \n            d[i]=new\n        ar=[]\n        for i in range(len(favoriteCompanies)):\n            found=0\n            for j in range(len(favoriteCompanies)):\n                if i!=j:\n                    x=d[i].intersection(d[j])\n                    if x==d[i]:\n                        found=1\n                        break\n            if found==0:\n                ar.append(i)\n                \n        \n        return ar", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        favoriteCompanies = [[len(favoriteCompanies[i]),i,set(favoriteCompanies[i])] for i in range(len(favoriteCompanies))]\n        favoriteCompanies.sort()\n        #print(favoriteCompanies)\n        res = []\n        for i in range(len(favoriteCompanies)):\n            attendre = favoriteCompanies[i][2]\n            flag = True\n            for j in range(i+1,len(favoriteCompanies)):\n                if not attendre - favoriteCompanies[j][2]:\n                    flag = False\n                    break\n            if flag:\n                res.append(favoriteCompanies[i][1])\n        return sorted(res)      ", "from collections import defaultdict\nclass Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        out = []\n        d = defaultdict(list)\n        for i,companies in enumerate(favoriteCompanies):\n            for company in companies:\n                d[company].append(i)\n        for i,companies in enumerate(favoriteCompanies):\n            s = set(d[companies[0]])\n            for company in companies:\n                s = s.intersection(d[company])\n            if len(s) == 1:\n                out.append(i)\n        return out\n        \n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        def judge(i):\n            for j in range(n):\n                if i != j:\n                    contain = True\n                    for x in favoriteCompanies[i]:\n                        if x not in favoriteCompanies[j]:\n                            contain = False\n                            break\n                    if contain:\n                        return False\n            return True\n        \n        n = len(favoriteCompanies)\n        favoriteCompanies = list(map(set,favoriteCompanies))\n        res = []\n        for i in range(n):\n            if judge(i): res.append(i)\n        return res\n                            \n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        \n        favoriteCompanies = [set(i) for i in favoriteCompanies]\n        visited = [False]*len(favoriteCompanies)\n        res = [] \n        \n        for i in range(len(favoriteCompanies)-1):\n            if visited[i]:\n                continue\n            else:\n                for j in range(i+1,len(favoriteCompanies)):\n                    if favoriteCompanies[i].intersection(favoriteCompanies[j]) == favoriteCompanies[i]:\n                        visited[i] = True\n                        break\n                    elif favoriteCompanies[i].intersection(favoriteCompanies[j]) == favoriteCompanies[j]:\n                        visited[j] = True\n                        \n        for i in range(len(favoriteCompanies)):\n            if not(visited[i]):\n                res.append(i)\n        return res\n                \n                        \n", "class Solution:\n    def peopleIndexes(self, company: List[List[str]]) -> List[int]:\n        \n        \n        \n        company = [set(i) for i in company]\n        \n        \n        visited = [False]*len(company)\n        \n        for i in range(len(company)-1):\n            if(visited[i]):\n                continue\n                \n            root = company[i]\n            for j in range(i+1,len(company)):\n                child = company[j]\n                if(len(root.intersection(child)) == len(root)):\n                    visited[i] = True\n                    break\n                    \n                elif(len(root.intersection(child)) == len(child)):\n                    visited[j] = True\n                    \n        \n        res = []\n        \n        for i in range(len(visited)):\n            if(visited[i] == False):\n                res.append(i)\n                \n        return res\n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        company = favoriteCompanies\n        company = [set(i) for i in company]\n        \n        \n        visited = [False]*len(company)\n        \n        for i in range(len(company)-1):\n            if(visited[i]):\n                continue\n                \n            root = company[i]\n            for j in range(i+1,len(company)):\n                child = company[j]\n                if(len(root.intersection(child)) == len(root)):\n                    visited[i] = True\n                    break\n                    \n                elif(len(root.intersection(child)) == len(child)):\n                    visited[j] = True\n                    \n        \n        res = []\n        \n        for i in range(len(visited)):\n            if(visited[i] == False):\n                res.append(i)\n                \n        return res", "class UnionFind:\n    \n    def __init__(self, favorites):\n        self.n = len(favorites)\n        self.arr = list(range(self.n))\n        self.favorites = [set(x) for x in favorites]\n        \n    def union(self, a, b):\n        \\\"\\\"\\\"Returns true if you can end search early, else False.\\\"\\\"\\\"\n        a, b = self.find(a), self.find(b)\n        if a == b:\n            return True\n        \n        a_fav, b_fav = self.favorites[a], self.favorites[b]\n        if a_fav.issubset(b_fav):\n            self.arr[a] = b\n            return True\n        if b_fav.issubset(a_fav):\n            self.arr[b] = a\n            return True\n        \n        return False\n        \n    def find(self, a):\n        head = a\n        while self.arr[head] != head:\n            head = self.arr[head]\n            \n        # path compression\n        ptr = a\n        while a != head:\n            a = self.arr[a]\n            self.arr[ptr] = head\n            ptr = a\n        \n        return head\n        \n    def num_groups(self):\n        return [i for i in range(self.n) if self.arr[i] == i]\n\nclass Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        \\\"\\\"\\\"\n        API\n        count_num_groups (head of each group will be people without subsets)\n        union (if in same group, do nothing. If a is subset of b, a points to b.)\n        \\\"\\\"\\\"\n        uf = UnionFind(favoriteCompanies)\n        n = len(favoriteCompanies)\n        for i in range(n):\n            for j in range(i + 1, n):\n                if uf.union(i, j):\n                    break\n        return uf.num_groups()\n        ", "class Solution:\n    def peopleIndexes(self, company: List[List[str]]) -> List[int]:\n        company = [set(i) for i in company]\n        \n        \n        visited = [False]*len(company)\n        \n        for i in range(len(company)-1):\n            if(visited[i]):\n                continue\n                \n            root = company[i]\n            for j in range(i+1,len(company)):\n                child = company[j]\n                if(len(root.intersection(child)) == len(root)):\n                    visited[i] = True\n                    break\n                    \n                elif(len(root.intersection(child)) == len(child)):\n                    visited[j] = True\n                    \n        \n        res = []\n        \n        for i in range(len(visited)):\n            if(visited[i] == False):\n                res.append(i)\n                \n        return res", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        c = set(); d = {} ; i = 0; com = []\n        for j in favoriteCompanies:\n            cur = set()\n            for x in j:\n                if x not in d: d[x] = i; i+=1\n                cur.add(d[x])\n            com += [cur]\n        ans = []\n        for i in range(len(com)):\n            flag = False\n            for j in range(len(com)):\n                if i!=j:\n                    if com[i].issubset(com[j]):\n                        flag = True; break\n            if not flag: ans += [i]\n        return ans \n\n        \n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        company = favoriteCompanies\n        company = [set(i) for i in company]\n        print(company)\n        \n        visited = [False]*len(company)\n        res = []        \n        for i in range(len(company)-1):\n            if(visited[i]):\n                continue                \n            root = company[i]\n            for j in range(i+1,len(company)):\n                child = company[j]\n                if(len(root.intersection(child)) == len(root)):\n                    visited[i] = True\n                    break\n                    \n                elif(len(root.intersection(child)) == len(child)):\n                    visited[j] = True\n                    \n        for i in range(len(company)):\n            if not visited[i]:\n                res.append(i)\n                \n        return res", "class Solution:\n    def peopleIndexes(self, A: List[List[str]]) -> List[int]:\n        '''\n        # \u6bd4\u8d5b\u7528\u4ee3\u7801\n        res = []\n        A = [(v, i) for i, v in enumerate(A)]\n        A.sort(key = lambda x: len(x[0]))\n        A = A[::-1]\n        visit = []\n        for v, i in A:\n            v = set(v)\n            if visit:\n                for t in visit:\n                    if v.issubset(t):\n                        break\n                else:\n                    res.append(i)\n            else:\n                res.append(i)\n            visit.append(v)\n        return sorted(res)\n        '''\n        # \u66b4\u529b\u89e3\u6cd5\u3002set\u7684&\u64cd\u4f5c\n        res = []\n        fc = [set(f) for f in A]\n        n = len(fc)\n        for i in range(n):\n            for j in range(n):\n                if i != j and fc[i] & fc[j] == fc[i]:\n                    break\n            else:\n                res.append(i)\n        return res", "class Solution:\n    def peopleIndexes(self, A: List[List[str]]) -> List[int]:\n        d = {i: set(v) for i, v in enumerate(A)}\n        res = []\n        for i in range(len(A)):\n            subSet = True\n            for j in range(len(A)):\n                if i == j:\n                    continue\n                if len(d[i]) > len(d[j]):\n                    continue\n                if not d[i] - d[j]:\n                    subSet = False\n                    break\n            if subSet: res.append(i)         \n        return res", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        comp_dict={i:set(v) for i,v in enumerate(favoriteCompanies)}\n        res=[]\n        for i in range(len(favoriteCompanies)):\n            subset=True\n            for j in range(len(favoriteCompanies)):\n                if i==j:\n                    continue\n                if not comp_dict[i]-comp_dict[j]:\n                    subset=False\n                    break\n            if  subset:\n                res.append(i)\n        return res        \n        \n                    \n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        # favoriteCompanies=sorted(favoriteCompanies,key=lambda x:len(x))\n        \n        ls=[]\n        for i in favoriteCompanies:\n            ls.append(set(i))\n        \n        # print(ls)\n        ans=[]\n        for i in range(len(ls)):\n            flag=0\n            for j in range(len(ls)):\n                if(i!=j):\n                    tem=ls[i].intersection(ls[j])\n                    if(tem==ls[i]):\n                        flag=1\n                        break\n\n                \n            if(flag==0):\n                ans.append(i)\n                \n        return ans", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        f_C = []\n        for company in favoriteCompanies:\n            f_C.append(set(company))\n        print(f_C)\n        n = len(f_C)\n        ans = []\n        for i in range(n):\n            flag = 1\n            for j in range(n):\n                if i==j:\n                    continue\n                if f_C[i]&f_C[j] == f_C[i]:\n                    flag=0\n                    break\n            if flag==1:\n                ans.append(i)\n        return ans;", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        ans = []\n        n = len(favoriteCompanies)\n        f = [set(c) for c in favoriteCompanies ]\n        for i in range(n):\n            for j in range(n):\n                if i != j and f[i] & f[j] == f[i]:\n                    break\n            else:\n                ans.append(i)\n        return ans\n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        # favoriteCompanies=sorted(favoriteCompanies,key=lambda x:len(x))\n        \n        ls=[]\n        for i in favoriteCompanies:\n            ls.append(set(i))\n        \n        print(ls)\n        ans=[]\n        for i in range(len(ls)):\n            flag=0\n            for j in range(len(ls)):\n                if(i!=j):\n                    tem=ls[i].intersection(ls[j])\n                    if(tem==ls[i]):\n                        flag=1\n                        break\n\n                \n            if(flag==0):\n                ans.append(i)\n                \n        return ans", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        from collections import Counter\n        words = {}\n        subsets = []\n        for i, x in enumerate(favoriteCompanies):\n            for y in x:\n                if y not in words:\n                    words[y] = [i]\n                else:\n                    words[y].append(i)\n      \n\n        for i, x in enumerate(favoriteCompanies):\n            c = Counter()\n            for y in x:\n                c.update(words[y])\n            for item in c.most_common():\n                if item[0] != i:\n                    if item[1] >= len(x):\n                        break\n                    else:\n                        subsets.append(i)\n                        break\n                elif len(c) == 1:\n                    subsets.append(i)\n                    \n        return subsets", "\\\"\\\"\\\"\n\n\\\"\\\"\\\"\nclass Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        sets = [set(companies) for companies in favoriteCompanies]\n        output = [] \n        \n        for i in range (len(sets)):\n            superset = True\n            for j in range(len(sets)):\n                if i == j: continue\n                if sets[i].issubset(sets[j]):\n                    superset = False\n                    break\n            if superset:\n                output.append(i)\n                \n        return output", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        res=[]\n        comp_dict={i:set(v) for i,v in enumerate(favoriteCompanies)}\n        for i in range(len(favoriteCompanies)):\n            subset=True\n            for j in range(len(favoriteCompanies)):\n                if i==j:\n                    continue\n                if not comp_dict[i]-comp_dict[j]:\n                    subset=False\n                    break\n            if subset:\n                res.append(i)\n        return res         \n                \n       \n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        ans = []\n        d = {i : set(favoriteCompanies[i]) for i in range(len(favoriteCompanies))}\n        for i in range(len(favoriteCompanies)):\n            for j in range(len(favoriteCompanies)):\n                if i != j:\n                    if not d[i] - d[j]:\n                        break\n            else:\n                ans.append(i)\n                \n        return ans\n        \n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        \n        def judge(i):\n            for j in range(n):\n                if i != j:\n                    contain = True\n                    for x in favoriteCompanies[i]:\n                        if x not in favoriteCompanies[j]:\n                            contain = False\n                            break\n                    if contain:\n                        return False\n            return True\n        \n        n = len(favoriteCompanies)\n        favoriteCompanies = list(map(set,favoriteCompanies))\n        res = []\n        for i in range(n):\n            if judge(i): res.append(i)\n        return res\n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        d = {i: set(v) for i, v in enumerate(favoriteCompanies)}\n        print(d)\n        res = []\n        for i in range(len(favoriteCompanies)):\n            subSet = True\n            for j in range(len(favoriteCompanies)):\n                if i == j:\n                    continue\n                if not d[i] - d[j]:\n                    subSet = False\n                    break\n            if subSet: res.append(i)         \n        return res    ", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        hms = []\n        output = []\n        \n        for favs in favoriteCompanies:\n            hm = set(favs)\n            hms.append(hm)\n        \n        for i in range(len(favoriteCompanies)):\n            good = True\n            for j in range(len(favoriteCompanies)):\n                if i == j:\n                    continue\n                z = hms[j].intersection(hms[i])\n                if z == hms[i]:\n                    good = False\n            if good:\n                output.append(i)\n        \n        return output", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        n = len(favoriteCompanies)\n        favoriteCompanies = [set(elem) for elem in favoriteCompanies]\n        \n        ans = []\n        for i in range(n):\n            not_subset = True\n            for j in range(n):\n                if i == j:\n                    continue\n                if len(favoriteCompanies[i] - favoriteCompanies[j]) == 0:\n                    not_subset = False\n                    break\n            if not_subset:\n                ans.append(i)\n        return ans", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        name_to_index = {}\n\n        company_indices = []\n        for _ in favoriteCompanies:\n            indices = []\n            for name in _:\n                if name not in name_to_index:\n                    name_to_index[name] = len(name_to_index)\n                indices.append(name_to_index[name])\n            print(indices)\n            company_indices.append(set(indices))\n        print(\\\"-\\\" * 10)\n\n        ret = []\n        for ix, x in enumerate(company_indices):\n            valid = True\n            for iy, y in enumerate(company_indices):\n                if ix == iy:\n                    continue\n                if x.union(y) == y:\n                    valid = False\n                    break\n            if valid:\n                ret.append(ix)\n        return ret\n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        ans = [x for x in range(len(favoriteCompanies))]\n        for i in range(len(favoriteCompanies)):\n            for j in range(i+1,len(favoriteCompanies)):\n                set1 = set(favoriteCompanies[i])\n                set2 = set(favoriteCompanies[j])\n                if set1.issubset(set2):\n                    ans[i] = -1\n                elif set2.issubset(set1):\n                    ans[j] = -1\n        return [x for x in ans if x >=0]", "class Solution:\n    def peopleIndexes(self,favoriteCompanies):\n        responses = dict()\n        ret = []\n        for i in range(len(favoriteCompanies)):\n            responses[i] = set(favoriteCompanies[i])\n        \n        for i, resp in list(responses.items()):\n          not_sub = True\n          for v in list(responses.values()):\n            if resp == v:\n              continue\n            if resp - v == set():\n              not_sub = False\n          if not_sub:\n            ret.append(i)\n        \n        return list(sorted(ret))\n            \n                    \n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        fav = []\n        for f in favoriteCompanies:\n            fav.append(set(f))\n\n        n = len(favoriteCompanies)\n        rem = set()\n\n        for i in range(n):\n            for j in range(i+1, n):\n                if not fav[i] - fav[j]: # then i is a subset of j\n                    rem.add(i)\n                if not fav[j] - fav[i]:\n                    rem.add(j)\n\n        res = []\n        for i in range(n):\n            if i not in rem:\n                res.append(i)\n\n        return res", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        \n        fcs = [set(fc) for fc in favoriteCompanies]\n        \n        ret = []\n        \n        for i in range(len(fcs)):\n            to_incl = True            \n            for j in range(len(fcs)):\n                if j != i and fcs[i].issubset(fcs[j]):\n                    to_incl = False\n                    break\n            if to_incl:\n                ret.append(i)\n        return ret\n            \n", "class Solution:\n    def peopleIndexes(self, A: List[List[str]]) -> List[int]:\n        d = {i: set(v) for i, v in enumerate(A)}\n        res = []\n        for i in range(len(A)):\n            isSubset = False\n            for j in range(len(A)):\n                if i == j:\n                    continue\n                if not d[i] - d[j]:\n                    isSubset = True\n                    break\n            if not isSubset: res.append(i)         \n        return res    ", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        d={i: set(v) for i,v in enumerate(favoriteCompanies) }\n        ans=[]\n        n=len(favoriteCompanies)\n        for i in range(n):\n            subSet=True\n            for j in range(n):\n                if i==j:\n                    continue\n                if not d[i]-d[j]:\n                    subSet=False\n                    break\n            if subSet:\n                ans.append(i)\n        return ans\n", "class Solution:\n    def peopleIndexes(self, A: List[List[str]]) -> List[int]:\n        d = {i: set(v) for i, v in enumerate(A)}\n        res = []\n        for i in range(len(A)):\n            subSet = True\n            for j in range(len(A)):\n                if i == j:\n                    continue\n                if not d[i] - d[j]:\n                    subSet = False\n                    break\n            if subSet: res.append(i)         \n        return res", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        sol = []\n        \n        for i, curr_comps in enumerate(favoriteCompanies):\n            curr_comps = set(curr_comps)\n            is_subset = False\n            \n            for j, other_comps in enumerate(favoriteCompanies):\n                if j == i:\n                    continue\n                    \n                other_comps = set(other_comps)\n                    \n                if curr_comps.issubset(other_comps):\n                    is_subset = True\n            \n            if not is_subset:\n                sol.append(i)    \n        \n        return sol", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        ans = []\n        for i in range(0, len(favoriteCompanies)): \n            setLst = set(favoriteCompanies[i])\n            flag = False\n            for j in range(0, len(favoriteCompanies)):\n                if j == i:\n                    continue \n                if setLst.issubset(set(favoriteCompanies[j])):\n                    flag = True\n                    break;\n            if flag == False:\n                ans.append(i)\n        return ans\n                    \n                \n", "class Solution:\n    def peopleIndexes(self, A: List[List[str]]) -> List[int]:\n        d = {i: set(v) for i, v in enumerate(A)}\n        res = []\n        for i in range(len(A)):\n            subSet = True\n            for j in range(len(A)):\n                if i == j:\n                    continue\n                if not d[i] - d[j]:\n                    subSet = False\n                    break\n            if subSet: res.append(i)         \n        return res    ", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        # make companies -> person dict\n        # for each person, find if the don't have a subset\n        ans = []\n        favorites = defaultdict(list)\n        for i, person in enumerate(favoriteCompanies):\n            for company in person:\n                favorites[company].append(i)\n        \n        for i, person in enumerate(favoriteCompanies):\n            possible_supersets = set(range(len(favoriteCompanies)))\n            possible_supersets.remove(i)\n            for companies in person:\n                possible_supersets = possible_supersets.intersection(set(favorites[companies]))\n                if len(possible_supersets) == 0:\n                    break\n            if len(possible_supersets) == 0:\n                ans.append(i)\n        return ans", "class Solution:\n    def isSub(self, s1, s2):\n        i = 0\n        for j in range(len(s2)):\n            if s1[i] == s2[j]:\n                i = i + 1\n            if i == len(s1):\n                return True\n        return False\n    \n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        fc = [(sorted(e), i) for i, e in enumerate(favoriteCompanies)]\n        fc = sorted(fc, key=lambda x: len(x[0]), reverse=True)\n        # print(fc)\n        res = []\n        for i in range(len(fc)):\n            s, si = fc[i]\n            found = False\n            for j in range(i):\n                ps, sj = fc[j]\n                if self.isSub(s, ps):\n                    found = True\n                    break\n            if not found:\n                res.append(si)\n            \n        return sorted(res)\n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        N = len(favoriteCompanies)\n        result = list(range(0,N))\n        \n        for i in range(0,N):\n            a = set(favoriteCompanies[i])\n            for j in range(0,N):\n                if i == j or len(a) > len(favoriteCompanies[j]):\n                    continue\n                    \n                b = set(favoriteCompanies[j])\n                if a.intersection(b) == a:\n                    result.remove(i)\n                    break\n                    \n        return result\n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        n = len(favoriteCompanies)\n        res = list(range(n))\n        seen = set()\n        for i in range(n-1):\n            for j in range(i+1, n):\n                first_set = set(favoriteCompanies[i])\n                second_set = set(favoriteCompanies[j])\n                remind = first_set & second_set\n                \n                if remind == first_set:\n                    if i not in seen:\n                        seen.add(i)\n                        res.remove(i)\n                if remind == second_set:\n                     if j not in seen:\n                        seen.add(j)\n                        res.remove(j)\n        return res", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        c = set()\n        d = {} \n        i = 0\n        com = []\n        for j in favoriteCompanies:\n            cur = set()\n            for x in j:\n                if x not in d:\n                    d[x] = i; i+=1\n                    cur.add(d[x])\n                else: cur.add(d[x])\n            com += [cur]\n        ans = []\n        #print(com)\n        for i in range(len(com)):\n            flag = False\n            for j in range(len(com)):\n                if i!=j:\n                    if com[i].issubset(com[j]):\n                        flag = True\n                        break\n            if not flag: ans += [i]\n        return ans \n\n        \n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        n = len(favoriteCompanies)\n        res = list(range(n))\n        seen = set()\n        for i in range(n-1):\n            for j in range(i+1, n):\n                if i != j:\n                    first_set = set(favoriteCompanies[i])\n                    second_set = set(favoriteCompanies[j])\n                    remind = first_set & second_set\n                    if remind == first_set:\n                        if i not in seen:\n                            seen.add(i)\n                            res.remove(i)\n                    if remind == second_set:\n                        if j not in seen:\n                            seen.add(j)\n                            res.remove(j)\n        return res\n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        \n        compfaves = {}\n        \n        for i,faves in enumerate(favoriteCompanies):\n            for comp in faves:\n                if not comp in compfaves:\n                    compfaves[comp]=[]\n                compfaves[comp].append(i)\n        \n        outarr=[]\n        for i,faves in enumerate(favoriteCompanies):\n            \n            matches = {}\n            for comp in faves:\n                for person in compfaves[comp]:\n                    if not person in matches:\n                        matches[person]=0\n                    matches[person]+=1\n            # print(i,matches)\n            issubset=False\n            for p,c in list(matches.items()):\n                if len(faves)==c and p!=i:\n                    issubset=True\n                    break\n            if not issubset:\n                outarr.append(i)\n        return outarr\n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        yu=[]\n        for j in range(len(favoriteCompanies)):\n            a=favoriteCompanies[j]\n            yu1=list(favoriteCompanies)\n            yu1.pop(j)\n            if any(set(a).issubset(set(ele)) for ele in yu1)== False:\n                yu.append(j)\n        return yu", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        n = len(favoriteCompanies)\n        res = set()\n        for i in range(n-1):\n            for j in range(i+1, n):\n                first_set = set(favoriteCompanies[i])\n                second_set = set(favoriteCompanies[j])\n                remind = first_set & second_set\n                \n                if remind == first_set:\n                    res.add(i)\n                if remind == second_set:\n                    res.add(j)\n        return sorted(list(set(range(n)) - res))", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        i = 0\n        ans = []\n        \n        while i < len(favoriteCompanies):\n            if all(not set(favoriteCompanies[i]).issubset(favoriteCompanies[j]) for j in range(len(favoriteCompanies)) if i!=j): ans.append(i)\n            i += 1\n       \n        return ans", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        return [i for i,s1 in enumerate(favoriteCompanies)\n               if not any(set(s1).issubset(s2) for s2 in favoriteCompanies if s1 is not s2)]", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        company = []\n        for i, fc in enumerate(favoriteCompanies):\n            company.append((tuple(fc), len(fc), i))\n        company.sort(key = lambda x: -x[1])\n        \n        maxlen = company[0][1]\n        loc = -1\n        res= []\n        for i in range(len(company)):\n            if company[i][1] == maxlen:\n                res.append(company[i][2])\n                loc= max(loc, i)\n            else: break\n        \n        for i in range(loc+1, len(company)):\n            curr = company[i][0]\n            flag = 0\n            for j in range(i-1, -1, -1):\n                tmpt = company[j][0]\n                if set(curr) & set(tmpt) == set(curr): flag = 1\n            if flag == 0: res.append(company[i][2])\n        return sorted(res)\n                \n                \n                \n\n            \n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        A = favoriteCompanies\n        location = {tuple(val):idx for idx, val in enumerate(A)}\n        A.sort(key=lambda x: len(x))\n        res = []\n        for i in range(len(A)):\n            for j in range(i+1, len(A)):\n                if set(A[i]) & set(A[j]) == set(A[i]):\n                    break\n            else:\n                res.append(location[tuple(A[i])])\n\n        res.sort()    \n        return res\n", "class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:\n        # brutal force\n        \n        return [pid for pid in range(len(favoriteCompanies)) if all((not set(favoriteCompanies[pid]).issubset(s)) for s in [a for a in favoriteCompanies if a != favoriteCompanies[pid]])]"]