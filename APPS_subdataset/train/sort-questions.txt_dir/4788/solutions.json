["def sort_grades(gs):\n  return sorted(gs, key=grade)\n\ndef grade(v):\n  if v == 'VB':  return -2\n  if v == 'V0':  return -1\n  if v == 'V0+': return  0\n  return int(v[1:])", "# G is just a dict mapping string after `V` to int.\nG = {str(k):k for k in range(1, 18)}; G['B'] = -2; G['0'] = -1; G['0+'] = 0\ndef sort_grades(gs): return sorted(gs, key=lambda g: G[g[1:]])\n\n# same idea, but mapping to `0,...,19`\nG = ['B','0','0+'] + [str(g) for g in range(1, 18)]\ndef sort_grades(gs): return sorted(gs, key=lambda g: G.index(g[1:]))\n# or just ['VB',...,'V17'].index(g). I'd avoid G.index, but it might be easier to understand.\n", "def sort_grades(lst):\n    return sorted(lst, key = lambda s: float(s[1:].replace('B','-1').replace('+','.5')))", "def sort_grades(lst):\n    grades = ['VB', 'V0', 'V0+', 'V1', 'V2', 'V3', 'V4', 'V5', 'V6',\n    'V7', 'V8', 'V9', 'V10', 'V11', 'V12', 'V13', 'V14', 'V15', 'V16', 'V17']\n    return sorted(lst, key=lambda x: grades.index(x))", "def sort_grades(lst):\n    grades = ['VB', 'V0', 'V0+'] + ['V' + str(i) for i in range(1, 18)]\n    return [i for i in grades if i in lst]", "def sort_grades(lst):\n    grades = [\"VB\", \"V0\", \"V0+\"]\n    for i in range(1, 18):\n        grades.append(\"V\" + str(i))\n    return sorted(lst, key=grades.index)", "def sort_grades(lst):\n    grades = [\"VB\",\"V0\",\"V0+\"]+[\"V{}\".format(i) for i in range(1, 18)]\n    return sorted(lst, key=lambda l: grades.index(l))", "def sort_grades(lst):\n    d = ['VB', 'V0', 'V0+', 'V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10', 'V11', 'V12', 'V13', 'V14', 'V15', 'V16', 'V17']\n    return sorted(lst, key=lambda x: d.index(x))", "climbing_grades = \"VB V0 V0+\".split() + [\"V{}\".format(i) for i in range(1, 18)]\n\ndef sort_grades(lst):\n    return sorted(lst, key=climbing_grades.index)", "def sort_grades(a):\n    return sorted(a, key=lambda k: 'B00+1 2 3 4 5 6 7 8 9 1011121314151617'.index(k[1:]))", "sort_grades=lambda l:sorted(l,key=lambda g:float(g[1:].replace('+','.5').replace('B','-1')))"]