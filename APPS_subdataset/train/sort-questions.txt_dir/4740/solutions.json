["def row_sum_odd_numbers(n):\n    #your code here\n    return n ** 3", "def row_sum_odd_numbers(n):\n    if type(n)==int and n>0:\n        return n**3\n    else:\n        return \"Input a positive integer\"", "def row_sum_odd_numbers(n):\n    return n*n*n", "def row_sum_odd_numbers(n):\n    return pow(n, 3)", "def row_sum_odd_numbers(n):\n    #your code here\n    a,b = n*(n-1)+1,n*(n+1)\n    return sum(range(a,b,2)) if a != 1 else 1\n", "def row_sum_odd_numbers(n):\n    return sum(range(n*(n-1)+1, n*(n+1), 2))", "def row_sum_odd_numbers(n):\n    # sum of numbers in each row equals number of the row to the power of 3\n    return n**3", "def row_sum_odd_numbers(n, base=2):\n    first_num = (n * (n - 1)) + 1\n    numbers = range(first_num, first_num + base * n, base)\n    return sum(numbers)", "def row_sum_odd_numbers(n):\n    sum = 0\n    num = n * n + n - 1\n    for i in range(n):\n        sum += num\n        num -= 2\n    return sum", "row_sum_odd_numbers = lambda n: n ** 3", "def row_sum_odd_numbers(n):\n    #your code here\n    x = []\n    for i in range(1,n*n+n,2):\n        x.append(i)\n    return sum(x[-n:])\n", "def row_sum_odd_numbers(n):\n    #your code here\n    m = ( n - 1 ) * n + 1\n    o = m\n    while n > 1 :\n        m = m + 2\n        o = o + m\n        n = n - 1\n    return o", "def row_sum_odd_numbers(n):\n    prev = 1\n    ll = [y*[0] for y in range(1, n+1)]\n    for x in ll:\n        for i in range(len(x)):\n            x[i] = prev\n            prev += 2\n    return sum(ll[-1])", "def row_sum_odd_numbers(n):\n    return sum([i for i in range(sum([i for i in range(1, n+1)])*2) if i % 2][:-n-1:-1])\n", "def row_sum_odd_numbers(n):\n    sum, sum2, h, k, i, s1, s2 = 0, 0, n-1, -1, 0, 0, 0\n    while n != 0:\n        sum += n\n        n -= 1\n    while h != 0:\n        sum2 += h\n        h -= 1\n    while i <= sum-1:\n        if i == sum2:\n            s2 = s1\n        k += 2\n        s1 += k\n        i += 1\n    return s1 - s2", "def row_sum_odd_numbers(n):\n    a = [y*[False] for y in range(1, n+1)]\n    odds = iter(list(range(1, 10**6, 2)))\n    return sum([[next(odds) for c in x if c is False] for x in a][-1])", "def row_sum_odd_numbers(n):\n    return n * (n + (n*(n - 1)))", "def row_sum_odd_numbers(n):\n    # return (1+(n-1)*n) * n + (n-1)*(n) \n    # ^ found with logic of - first digit of row * width of row * sum of recursive sequence a(n)=0,2,6,12... \n    # with n starting at 0\n    # simplify the polynomial expression to n^3\n    # feel bad for not seeing the pattern in the first place\n    return n**3", "def row_sum_odd_numbers(n):\n    stop = sum(range(n + 1))\n    start = sum(range(n)) + 1\n    return sum(range(start + start - 1, stop + stop, 2))", "def row_sum_odd_numbers(n):\n    x = 1\n    r = 1\n    inc = 2\n    s = 0\n    \n    for i in range(1, n):\n        x += inc\n        r += 1\n        inc += 2\n    \n    for j in range(r):\n        s += x\n        x += 2\n        \n    return s", "def row_sum_odd_numbers(n: int):\n    \"\"\" Calculate the row sums of this triangle from the row index (starting at index 1). \"\"\"\n    return sum([_ for _ in range(n * (n - 1), n * (n - 1) + (n * 2)) if _ % 2])\n", "def row_sum_odd_numbers(n):\n    #your code here\n    \n    return  ((n-1)**2 + n)*(n) + n*(n-1)", "def row_sum_odd_numbers(n):\n  first_number = 2*(n*(n-1)/2) + 1\n  return n*(first_number + n - 1)\n", "def row_sum_odd_numbers(n):\n    a = n\n    return a*a*a", "def row_sum_odd_numbers(row):\n    total = 0\n    for i in range(1, row+ 1):\n        #print(i)\n        total += 1 * i\n    \n    sum = 0\n    lastInt = total * 2 - 1\n    startInt = lastInt - ((row - 1) * 2) -1\n    for i in range(lastInt, startInt, -2):\n        sum += i\n    #   print(i)\n    #print(f'sum {sum}')\n    \n    return sum\n", "row_sum_odd_numbers=lambda n: n*n*n", "row_sum_odd_numbers=(3).__rpow__", "def row_sum_odd_numbers(n):\n    \n    x = 1\n    c = 0\n    final = 0\n    \n    for e in range(n):\n        x += c\n        c += 2\n        \n    for d in range(n):\n        final += x\n        x += 2\n        \n    return final", "def row_sum_odd_numbers(n):\n    first = n * (n - 1) + 1\n    return first * n + n * (n - 1)", "def row_sum_odd_numbers(n):\n    return sum([x*2 -1 for x in (list(range(((n*(n+1))//2) - n + 1, (n*(n+1)//2)+1)))])\n", "import numpy as np\ndef row_sum_odd_numbers(n):\n    return sum(np.linspace(n**2-(n-1),(n**2+n-1),n))", "def row_sum_odd_numbers(n):\n    \"\"\"the sum of all odd numbers in a row\n    is actually the row number cubed\"\"\"\n    if n < 1:\n        return 0\n    else:\n        return n*n*n", "def row_sum_odd_numbers(n):\n    start = sum(range(1,n))\n    end = start + n\n    return sum([ i for i in range(1,end*2,2) ][start:end])", "def row_sum_odd_numbers(n):\n    formula = n**3\n    return formula\n   \n", "def row_sum_odd_numbers(n):\n    # return (1+(n-1)*n) * n + (n-1)*(n) \n    # ^ found with logic of - first digit of row * width of row + sum of recursive sequence a(n)=0,2,6,12... \n    # with n starting at 0\n    # simplify the polynomial expression to n^3\n    # feel bad for not seeing the pattern in the first place\n    return n**3", "def row_sum_odd_numbers(n):\n    row_generator = generate_row(n)\n    sum = 0\n    for val in row_generator:\n        sum += val\n    return sum\n\n\ndef generate_row(i: int):\n    start = i * (i - 1) + 1\n    row_length = i\n    for num in range(row_length):\n        yield start\n        start += 2", "def row_sum_odd_numbers(n):\n    return sum([n for n in range(n * (n + 1)) if n % 2 != 0][-n:])", "def row_sum_odd_numbers(n):\n    num_pos = find_numb_count(n)\n    sum = 0\n    for i in range(n):\n        sum += (num_pos * 2) - 1\n        num_pos -= 1\n    \n    return sum\n\n# Return the position of the last number in the triangle row\ndef find_numb_count(n):\n    if n == 1:\n        return 1\n    return find_numb_count(n-1) + n", "def row_sum_odd_numbers(n):\n    return sum(n*(n-1)+1+(a*2) for a in range(n))", "def row_sum_odd_numbers(n):\n    if n < 1:\n        return None\n    return n**3", "def row_sum_odd_numbers(n):\n    initial_number = n*(n-1)+1\n    sum = 0\n    for i in range(0, n):\n        sum = sum + (initial_number + i*2)\n    return sum", "def row_sum_odd_numbers(n):\n    return (n*n-n+1)*(n+1)-1", "def row_sum_odd_numbers(n):\n    row_start = (n-1)*n+1\n    return sum([ x for x in range(row_start, row_start+n*2, 2)])", "def row_sum_odd_numbers(n):\n    #your code here\n    a = sum(range(1,n))*2+1\n    return sum(range(a, a+n*2, 2))", "def row_sum_odd_numbers(n):\n    return n ** 3 #observed this pattern for row sum", "def row_sum_odd_numbers(n):\n    f = ((n * (n -1))/2) - 1\n    s1 = (f+1)*(f+1)\n    s2 = (f+n+1)*(f+n+1)\n    return s2-s1\n", "def row_sum_odd_numbers(n):\n    i = n\n    numberx = 0\n    while n > 0:\n        numberx += n\n        n -= 1\n    v = numberx\n    resultList = []\n    result = 0\n    for x in range(1, (numberx*2)+1):\n        if x % 2 == 1:\n            resultList.append(x)\n    while v > (numberx-i):\n        result += int(resultList[(v-1)])\n        v -= 1\n    return result", "def row_sum_odd_numbers(n):\n    if n == 1: return 1\n    else: \n        min_odd_in_row = (n * (n - 1)) + 1\n        max_odd_in_row = (n * (n + 1)) - 1\n        return n * (max_odd_in_row + min_odd_in_row) / 2", "def row_sum_odd_numbers(n):\n    for i in range(n):\n        if n == 1:\n            return n\n        else:\n            return n**3", "def row_sum_odd_numbers(n):\n    #first of row n is (2n+1)\n    \n    # 1, 1 + 2, 1 + 2 + 3 --> sum_1^n n\n    \n    numofnums = 0\n    \n    for i in range(1,n+1):\n        numofnums += i\n        \n    oddints = [2*x+1 for x in range(numofnums)]\n    \n    #rowlength = n\n    \n    \n    \n    return sum(oddints[-n:])\n    \n", "def row_sum_odd_numbers(n):\n    if n == 1:\n        return 1\n    my_list = list(range(1,n*(n+1),2))\n    return sum(my_list[n*-1:])\n", "def row_sum_odd_numbers(n):\n    #your code here\n    num1 = n*(n-1)\n    num1+=1\n    i=0\n    sum=0\n    while i<n:\n        num2=0\n        num2=num1+(i*2)\n        sum+=num2\n        i+=1\n    return sum", "def row_sum_odd_numbers(n):\n    #your code here\n    \n    a=[i for i in range(n*(n+1)) if i%2!=0]\n    return sum(a[:-n-1:-1])\n        \n", "def row_sum_odd_numbers(n):\n    start = 1\n    for z in range(n):\n        start += 2 * z\n    sum_of_odd = 0\n    for i in range(1, n + 1):\n        sum_of_odd += start\n        start += 2\n    return sum_of_odd", "def row_sum_odd_numbers(n:int)->int:\n    \"\"\"[Find the sum of a row based on odd number pyramid]\n\n    Args:\n        n (int): [Row Number starting from 1]\n\n    Returns:\n        int: [Sum of Row]\n    \"\"\"\n    num_of_records = n*(n+1)//2\n    return sum([2*i-1 for i in range(num_of_records -n+1,num_of_records+1)])\n", "def row_sum_odd_numbers(n):\n    return sum([n*(n-1)+1+2*k for k in range(n)])", "def row_sum_odd_numbers(n):\n    total_nums = sum(range(0,n+1))\n    num_array = []\n    count = 1\n    while (True):      \n        if(count % 2 != 0): \n            num_array.append(count)        \n        if(len(num_array) == total_nums):\n            break\n        count += 1\n    return sum(num_array[-n:])\n", "def row_sum_odd_numbers(n):\n    counter = 0\n    for i in range(1, n + 1):\n        sum_list = []\n        switch = 0\n        while switch != i:\n            if counter % 2 != 0:\n                switch += 1\n                sum_list.append(counter)\n            counter += 1\n    return sum(sum_list)", "def row_sum_odd_numbers(n):\n    k = sum(range(n))\n    count = 0\n    start= 1 + k * 2\n    sum_i = 0\n    while(count < n):\n        sum_i += start\n        start += 2\n        count += 1\n    return sum_i\n", "def row_sum_odd_numbers(n):\n    #your code here\n    triNumber = n * (n + 1) / 2\n    totalOdd = triNumber ** 2\n    \n    previousRow = n - 1\n    \n    previousTriNumber = previousRow * (previousRow + 1) / 2\n    \n    totalOddPrevious = previousTriNumber ** 2\n    \n    return totalOdd - totalOddPrevious", "def row_sum_odd_numbers(n):\n    startnr = n*n-(n-1)\n    sum = 0\n    for i in range(startnr, startnr+n*2, 2):\n        sum += i\n    return sum", "def row_sum_odd_numbers(n):\n    #your code here\n    \n    k = int((1+n)*n/2) #3\n    m = int((1+n-1)*(n-1)/2) #1\n    \n    if(k == 1):\n        return 1\n    \n    x = 0\n    y = 0\n    z = 0\n    w = 0\n    \n    for i in range(k):  \n        if i == 0:\n            x = 1\n        else:\n            x = x + 2\n        z = z + x\n    \n    for i in range(m):\n        if i == 0:\n            y = 1\n        else:\n            y = y + 2\n        w = w + y\n    \n    return z-w", "def row_sum_odd_numbers(n):\n    num = 1\n    for x in range(n):\n        num = num + (2*x)\n    #print(num)\n\n    total = 0\n    for x in range(n):\n        total += num + (2*x)\n    #print(total)\n    return total", "def row_sum_odd_numbers(n):\n    num_add = n*(n+1)/2\n    last = (num_add*2)-1\n    first = last + 2*(1-n)\n    return (first+last)*(n/2)", "def row_sum_odd_numbers(n):\n    m = (1+n)*n/2\n    l = 1+(m-1)*2\n    q = (1+l)*m/2\n    p = (1+1+(m-n-1)*2)*(m-n)/2\n    return q-p", "def row_sum_odd_numbers(n):\n    x=2*(sum(list(range(1, n)))+1)-1\n    num=x\n    for i in range(n-1):\n        num+=x+2\n        x+=2\n    return num\n", "def row_sum_odd_numbers(n):\n    triangle = []\n    odd = 1\n    for row in range(n):\n        triangle.append([])\n        while len(triangle[row]) < row + 1:\n            triangle[row].append(odd)\n            odd += 2\n    return (sum(triangle[n-1]))", "def row_sum_odd_numbers(n):\n    return (((n * (n + 1) // 2) - n + 1) * 2 - 1) * n + ((n - 1) * (n))", "def row_sum_odd_numbers(n):\n        return(n ** 3) #follows the formula of cubing the value of n as the sum of the nth row of the triangle", "def row_sum_odd_numbers(n):\n    if n == 1:\n        return 1\n    else:\n        nums = list(range(sum(range(n*2))))\n        val = sum(range(n))\n        return (sum(list(num for num in nums if num % 2 != 0)[val:val+n]))", "def row_sum_odd_numbers(n):\n    a=0\n    o=0\n    e=0\n    for x in range(1,n+1):\n        a+=x\n    for y in range(1,2*a,2):\n        o+=y\n    for z in range(1,2*(a-n),2):\n        e+=z\n    return o-e", "def row_sum_odd_numbers(n):\n    #your code here \n    first = 1 + (n * (n-1)) \n    sum = 0\n    for i in range(n):\n        sum = sum + first \n        first += 2\n    return sum", "def row_sum_odd_numbers(n):\n    row_start_num = (n-1)*n+1\n    row_sum = n*row_start_num + n*(n-1)\n    return row_sum    \n", "def row_sum_odd_numbers(n):\n    start_number = n ** 2 - (n - 1)\n    sum = 0\n    for i in range(n):\n        sum += start_number + i * 2\n    \n    return sum", "def row_sum_odd_numbers(n):\n    digits_counter = sum(range(n+1))\n    triangle_content = []\n    while len(triangle_content) != digits_counter:\n        for i in range(digits_counter * 2 + 1):\n            if i % 2 == 1:\n                triangle_content.append(i)\n    final_sum = 0\n    for digit in triangle_content[len(triangle_content) - n:]:\n        final_sum += digit\n    return final_sum", "def row_sum_odd_numbers(n):\n    lenth = n\n    counter=0\n    while n>0:\n        print((n, counter))\n        counter+=n\n        n-=1\n    return (sum(range(1, counter*2, 2)[-lenth:]))\n    #your code here\n", "def row_sum_odd_numbers(num_line):\n    sum_permid = 0\n    first_line = num_line*(num_line-1)+1\n    stop_line = first_line + (num_line) * 2 \n    for j in range(first_line,stop_line,2):\n            sum_permid += j\n    return sum_permid   \n#your code here\n", "def row_sum_odd_numbers(n):\n    min = n**2 - n + 1\n    max = n**2 + n - 1\n    sum = 0\n    while min <= max:\n        if min%2==1:\n            sum = sum + min\n            min += 2\n    return sum", "def row_sum_odd_numbers(n):\n    start = n**2 - n + 1\n    stop = start + n * 2\n    return sum(x for x in range(start, stop, 2))", "def row_sum_odd_numbers(n):\n    count = 0\n    kokosik = 1\n    result = 0\n    for huesosina in range(0, n):\n        kokosik += count\n        count += 2\n    result += kokosik\n    for guccigang in range(0, n - 1): \n        kokosik += 2\n        result += kokosik\n    return result", "def row_sum_odd_numbers(n):\n    #your code here\n    first_num = 1+n*(n-1)\n    last_num = first_num + 2*(n-1)\n    new_list = [x for x in range(first_num, last_num+1) if (x+1)%2 == 0]\n    return sum(new_list)", "def row_sum_odd_numbers(n):\n    c = 0\n    for i in range(n + 1):\n        c += i\n    if c > 1:\n        index = 1\n        a = []\n        for j in range(c):\n            a.append(index)\n            index += 2\n        s = 0\n        e = c - n\n        while c != e:\n            s += a[c - 1]\n            c -= 1\n        return s\n    else:\n        return n\n            \n        \n        \n        \n", "def row_sum_odd_numbers(n):\n    start = 0\n    sum = 0\n    for i in range(n-1):\n        start += i + 1\n    start = start*2+1\n    for i in range(n):\n        sum += start\n        start += 2\n    return sum", "def row_sum_odd_numbers(n):\n    # Summation of each row\n    return sum(range(n*(n-1)+1, n*(n+1), 2))", "def row_sum_odd_numbers(n):\n    #your code here\n    \n    starting_no = 1 + sum([2*i for i in range (0, n)])\n    \n    return sum([starting_no + 2*i for i in range(0, n)])", "def row_sum_odd_numbers(n):\n    #your code here\n    s = 0\n    a1 = 1 + n * (n - 1)\n    for i in range(n):\n        s += a1\n        a1 += 2\n    return s", "def row_sum_odd_numbers(n):\n#     sum 1st n odd = n*n\n    if(n==0):\n        return 0\n    last_odd = n*(n+1)/2\n    prev_last_odd = (n-1)*n/2\n    return last_odd*last_odd -  prev_last_odd *prev_last_odd", "def row_sum_odd_numbers(n):\n    row,x = [],0\n    while x < n:\n        row.append(n*(n-1)+1+2*x)\n        x+=1\n    return sum(row)\n", "def row_sum_odd_numbers(n):\n    counter = 0\n    start_number = 1\n    end_number = 1\n    sum_ = 1\n    for i in range(n-1):\n        start_number += counter + 2\n        end_number += counter + 4\n        sum_ = sum([x for x in range(start_number, end_number+2) if x%2 !=0])\n        counter += 2\n    return sum_\n", "def row_sum_odd_numbers(n):\n    if n==1:\n        return 1\n    startingdigit=((n-1)*n)+1\n    tot=startingdigit\n    for i in range(1,n):\n        startingdigit+=2\n        tot+=startingdigit\n    return tot", "\ndef row_sum_odd_numbers(n):\n    \n    p = pow(n,3)\n    \n    return p\n\n", "def row_sum_odd_numbers(n):\n    odd_number = n * (n - 1) + 1 \n    odd_numbers = []\n    if n == 1:\n        return n\n    for idx in range(n):\n        odd_numbers.append(odd_number)\n        odd_number += 2\n    \n        \n        \n        \n    return sum(odd_numbers)\n\n        \n\n        \n        \n\n\n\n", "def row_sum_odd_numbers(n):\n    lista = []\n    licznik = 0\n\n    for i in range(n+1):\n        licznik = licznik + i\n\n    for i in range(licznik):\n        x = (2*i)+1\n        lista.append(x)\n\n    return sum(lista[-n:])\n", "# pos = sum(range(1, n+2)\ndef row_sum_odd_numbers(n):\n    return sum([x for x in range(sum(range(1, n))*2, sum(range(1, n+1))*2) if x%2])", "def row_sum_odd_numbers(n):\n    odd_list = [1]\n    max_odd = 1\n    for x in range(1, n + 1):\n        if x > 1:\n            max_odd = max(odd_list)\n            odd_list = [y for y in range(max_odd + 2, (max_odd + (2*x) + 2), 2)]\n            \n    return sum(odd_list)\n", "def row_sum_odd_numbers(n):\n    a=((n-1)**2)+n\n    b=(n**2)+n+1\n    return sum([i for i in range(a, b, 2)])", "def row_sum_odd_numbers(n):\n    data = {1: {'last': 1, 'sum': 1}}\n    while max(data.keys()) <= n:\n        id_max = max(data.keys())\n        last, summ = data[id_max]['last'], data[id_max]['sum']\n        a = [i for i in range(last + 2, id_max * 2 + last + 4, 2)]\n        id_max += 1\n        data[id_max] = {'last': a[-1], 'sum': sum(a)}\n    return data[n]['sum']", "def row_sum_odd_numbers(n):\n    rowStart = n*(n-1) + 1\n    total = 0\n    for i in range(n):\n        total = total + (rowStart + 2 * i)\n        \n    return total", "def row_sum_odd_numbers(n):\n    startPoint = 1\n    counter = 1\n    mainNumber = 1\n    sum = 0\n    # Finding start position\n    for num in range(n-1,0,-1):\n        startPoint += num\n\n    # Getting odd number at start position\n    while counter < startPoint:\n        if counter == startPoint:\n            break\n        else:\n            mainNumber += 2\n            counter += 1\n    # Calculating Final Sum\n    for i in range(mainNumber,mainNumber+(n*2),2):\n        sum += i\n    return sum"]