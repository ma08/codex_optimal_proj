["def solve(st):\n    return sorted((st.find(c) - st.rfind(c), c) for c in set(st))[0][1]", "def solve(st):\n    return min(set(st), key=lambda c: (st.index(c)-st.rindex(c), c))", "def solve(s):\n    d = {}\n    for i,c in enumerate(s):\n        if c not in d: d[c] = [i,i]\n        else:          d[c][-1] = i\n    return min(d, key=lambda k: (d[k][0]-d[k][1], k))", "def solve(st):\n    highestVal = 0\n    mvc = None\n    for c in st:\n        firstIdx = st.index(c)\n        lastIdx = st.rindex(c)                 \n        value = lastIdx - firstIdx\n        if not mvc or value > highestVal:\n            highestVal = value\n            mvc = c\n        elif value == highestVal:\n            if c < mvc: \n                highestVal = value\n                mvc = c\n    return mvc            \n", "def solve(st):\n#Create a dictionary. Add every new char to dictionary. Check if that char is elsewhere in the\n# string. if it is, assign the value to the distance from each other. \n# If that char has the greatest distance, return that char. \n# If equal with others, return .isalpha\n\n    # first_seen = {\"a\": 0, \"b\":2, \"c\":3}\n    first_seen = {}\n    distance = {}\n    #distance = {\"a\": 1,\"b\":2, \"c\": 2, d:2} \n\n    for index, char in enumerate(st):\n        if char not in first_seen:\n            first_seen[char] = index\n            \n        distance[char] = index - first_seen[char] \n        \n    # max = 2\n    max = distance[st[0]] \n    # max = b\n    max_char = st[0]\n    \n    for key in distance:\n        if distance[key] > max:\n            max = distance[key]\n            max_char = key \n        elif distance[key] == max:\n            if key < max_char:\n                max_char = key\n                \n    return max_char", "def solve(st):\n    dict = {'z': 0}\n    for letter in set(st) : \n        this = [a for a in range(len(st)) if st[a] == letter]\n        that = max(this) - min(this)\n        if that > max(dict.values()) : dict = {letter : that}\n        elif that == max(dict.values()) : dict[letter] = that\n    return sorted(dict.keys(),reverse=False)[0]", "def solve(s):\n    vals = {}\n    for i, c in enumerate(s):\n        if c not in vals:\n            vals[c] = [i, i]\n        else:\n            vals[c][-1] = i\n    return min(vals, key=lambda k: (vals[k][0] - vals[k][1], k))", "def solve(st):\n    d = dict((st.rfind(c)-st.find(c),c) for c in sorted(st)[::-1])\n    return d[max(d)]", "def solve(st):\n    left_index = dict()\n    right_index = dict()\n    \n    for i, c in enumerate(st):\n        right_index[c] = i\n    for i, c in reversed(list(enumerate(st))):\n        left_index[c] = i\n        \n    return max((right_index[c] - left_index[c], -ord(c), c) for c in set(st))[2]", "solve=lambda s:sorted(s,key=lambda e:s.rindex(e)-s.index(e)-ord(e)/1000)[-1]"]