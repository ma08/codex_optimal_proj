["import re\n\ndef scramble_words(words):\n    def sort_letters(match):\n        s = match.group()\n        letters = iter(sorted(filter(str.isalpha, s[1:-1])))\n        return s[0] + \"\".join(next(letters) if c.isalpha() else c for c in s[1:-1]) + s[-1]\n    return re.sub(r'[a-z][^\\s]*[a-z]', sort_letters, words)", "sort_word=lambda w,l:(lambda a:''.join(next(a)if c.isalpha()else c for c in w))(iter(l[:len(l)>1]+sorted(l[1:-1])+l[-1:]))\nscramble_words=lambda s:' '.join(sort_word(w,list(filter(str.isalpha,w)))for w in s.split())", "import re\ndef scramble_words(words):\n    new_words = []\n    for word in words.split():\n        begin, word = re.match(r\"([-',.]*[a-zA-Z]?)(.*)\", word).groups()\n        word, end = re.match(r\"(.*?)([a-zA-Z]?[-',.]*)$\", word).groups() if word else (\"\", \"\")\n        sorted_word = list(sorted(c for c in word if c.isalpha()))\n        for i, c in enumerate(word):\n            if c in \"-',.\":\n                sorted_word.insert(i, c)\n        new_words.append(begin + \"\".join(sorted_word) + end)\n    return \" \".join(new_words)", "import string\n\ndef scramble_words(words):\n    if (len(words) <= 1): return words\n\n    words = words.split(\" \")\n\n    pureWords = []\n\n    sChars = []\n\n    for i in range(len(words)):\n        flag = 0\n        for l in words[i][1:]:\n            if l != words[i][0]:\n                flag = 1\n        if flag == 0:\n            words[i] = words[i][0]\n        pureWords.append('')\n        for j in range(len(words[i])):\n            if words[i][j] in string.ascii_letters:\n                pureWords[i] += words[i][j]\n            else:\n                sChars.append((j, words[i][j]))\n\n        if (len(words[i]) == 1):\n            pureWords[i] = words[i]\n        else:\n            pureWords[i] = pureWords[i][0] + ''.join(sorted(pureWords[i][1:-1])) + pureWords[i][-1]\n            currWord = [l for l in pureWords[i]]\n            for index, char in sChars:\n                currWord.insert(index, char)\n            pureWords[i] = ''.join(currWord)\n\n        sChars = []\n\n    return ' '.join(pureWords)", "import re\ndef scramble_words(s):\n    li = []\n    for k in s.split():\n        sp_chars = [[i, j] for j, i in enumerate(k) if not i.isalpha()]\n        s = re.sub(r\"[-,.']\", \"\", k)\n        result = [s[0]] + sorted(s[1:-1]) + [s[-1]]\n        for i, j in sp_chars : result.insert(j, i)\n        li.append([\"\".join(result),k][len(k)<4])\n    return \" \".join(li)", "def sort_word(word):\n    characters = [[], []]\n    for char in word: characters[char.isalpha()].append(char)\n    characters[1] = characters[1][:len(word) > 1] + sorted(characters[1][1:-1]) + characters[1][-1:]\n    return ''.join(characters[char.isalpha()].pop() for char in reversed(word))[::-1]\n\ndef scramble_words(words):\n    return ' '.join(map(sort_word, words.split()))", "SPECIAL = \"-',.\"\n\ndef scramble_words(words):\n    output = []\n    for word in words.split():\n        sortable = [c for c in word if c.isalpha()]\n        typgly = sortable[:1] + sorted(sortable[1:-1]) + sortable[-1:]\n        output.append(''.join(c if not c.isalpha() else typgly.pop(0) for c in word))\n    return ' '.join(output)", "def scramble_words(words):\n    sort = lambda x: x if len(x)<3 else x[0]+''.join(sorted(x[1:-1]))+x[-1]\n    find = lambda x : [(i,y) for (i,y) in enumerate(x) if y in \".,'-\"]\n    mx = []\n    for x in words.split():\n        l, f = list(''.join(sort([y for y in x if y not in \".,'-\"]))), find(x)\n        if f:\n            l.insert(f[0][0], f[0][1])\n        if len(f) == 2:\n            l.insert(f[1][0], f[1][1])\n        mx.append(''.join(l))\n    return ' '.join(mx) if mx else '' ", "import string\n\ndef find_char_index(word, mode='f'):\n    word = [x for x in word]\n    if mode == 'f':\n        for index, char in enumerate(word):\n            if char in string.punctuation:\n                continue\n            else:\n                return index\n    else:\n        word.reverse()\n        for index, char in enumerate(word):\n            if char in string.punctuation:\n                continue\n            else:\n                return len(word) - (index + 1)\n\ndef scramble_words(sentence):\n    words = sentence.split(' ')\n    final = []\n    for word in words:\n\n        first_index = find_char_index(word, 'f')\n        last_index = find_char_index(word, 'l')\n        \n        res = \"\"\n        ext_char = []\n        for index, char in enumerate(word):\n            if (char in string.punctuation) or (index == first_index) or (index == last_index):\n                res += char\n            else:\n                res += \"{}\"\n                ext_char.append(char)\n        final.append(res.format(*sorted(ext_char)))\n\n    return \" \".join(final)\n\n\n"]