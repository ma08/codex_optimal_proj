["class Solution:\n     def searchInsert(self, nums, target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: int\n         \"\"\"\n \n         num=[i for i in nums if i<target]\n         return len(num)", "class Solution:\n     '''Complexity O(log(n))'''\n     def searchInsert(self, nums, target):\n         low = 0\n         high = len(nums) - 1\n \n         while low <= high:\n             mid = (low + high) // 2\n \n             if nums[mid] == target:\n                 return mid\n             elif nums[mid] < target:\n                 low = mid + 1\n             else:\n                 high = mid - 1\n \n         return low", "class Solution:\n     def searchInsert(self, nums, target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: int\n         \"\"\"\n         l, r = 0, len(nums)-1\n \n         while l <= r:\n             m = (l + r) // 2\n             if target <= nums[m]:\n                 r = m - 1            \n             elif target > nums[m]:\n                 l = m + 1                \n         return l \n                 \n           \n                 \n", "class Solution:\n     def searchInsert(self, nums, target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: int\n         \"\"\"\n         if nums[-1]<target:\n             return len(nums)\n         index=0\n         while(nums[index]<target):\n             index+=1\n         return index", "class Solution:\n     def searchInsert(self, nums, target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: int\n         \"\"\"\n         start=0\n         end=len(nums)-1\n         \n         while(start<=end):\n             mid=(start+end)//2\n             if nums[mid]==target:\n                 return mid\n             elif nums[mid]<target:\n                 start=mid+1\n             else:\n                 end=mid-1\n         return end+1", "class Solution:\n     def searchInsert(self, nums, target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: int\n         \"\"\"\n         left, right = 0, len(nums)-1\n         while left <= right:\n             mid = (left+right) // 2\n             if nums[mid] == target:\n                 return mid\n             elif nums[mid] > target:\n                 right = mid-1\n             else:\n                 left = mid+1\n         return left\n", "class Solution:\n     def searchInsert(self, nums, target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: int\n         \"\"\"\n         if nums is None:\n             return None\n         if nums == []:\n             return 0\n         start, end = 0, len(nums) - 1\n         while(start + 1 < end):\n             mid = start + (end - start) // 2\n             if(nums[mid] > target):\n                 end = mid\n             else:\n                 start = mid\n         if(nums[start] >= target):\n             return start\n         elif(nums[end] >= target):\n             return end\n         else:\n             return end + 1", "class Solution:\n     def searchInsert(self, nums, target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: int\n         \"\"\"\n         for i,num in enumerate(nums):\n             if num >= target:\n                 return i\n         return len(nums)", "class Solution:\n     def searchInsert(self, nums, target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: int\n         \"\"\"\n         left, right = 0, len(nums) - 1\n         while left <= right:\n             mid = left + (right - left) // 2\n             if nums[mid] >= target:\n                 right = mid - 1\n             else:\n                 left = mid + 1\n \n         return left\n         \n", "class Solution:\n     def searchInsert(self, nums, target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: int\n         \"\"\"\n         return len([x for x in nums if x < target])\n", "class Solution:\n     def searchInsert(self, nums, target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: int\n         \"\"\"\n         i = 0\n         n = len(nums)\n         \n         if n == 0:\n             return 0 if nums[0] >= target else 1\n         else:\n             if nums[n-1] < target:\n                 return n\n             else:           \n                 while i < n:\n                     if nums[i] >= target:\n                         return i\n                     else:\n                         i += 1\n", "class Solution:\n     def searchInsert(self, nums, target):\n         \"\"\"\n         :type nums: List[int]\n         :type target: int\n         :rtype: int\n         \"\"\"\n         if target in nums:\n             return nums.index(target)\n         else:\n             index = 0\n             target -= 1\n             while target > 0:\n                 if target in nums:\n                     return nums.index(target)+1\n                 else:\n                     target -= 1\n             return index"]