["def champernowne_digit(n):\n    if not type(n) is int or n < 1:\n        return float(\"NaN\")\n    i, l = 1, 11\n    while l <= n:\n        i, l = i + 1, l + 9 * (i + 1) * 10**i\n    return ((n - l) // (i * 10**(i - 1 - (n - l) % i))) % 10\n\nchampernowneDigit = champernowne_digit\n", "DIGIT_CNTS = [1] + [(10**i - 10**(i-1)) * i for i in range(1, 20)]\n\ndef champernowneDigit(n):\n    if not isinstance(n, int) or n is True or n <= 0:\n        return float('nan')\n    n -= 1\n    for digits, cnt in enumerate(DIGIT_CNTS):\n        if n < cnt:\n            break\n        n -= cnt\n    start = int(10 ** (digits-1))\n    q, r = divmod(n, digits) if digits > 1 else (n, 0)\n    return int(str(start + q)[r])", "def champernowneDigit(n):\n    if not isinstance(n, int) or isinstance(n, bool) or n <= 0:\n        return float('nan')\n    elif n <= 10:\n        return n - 1\n    nr_digits = 1\n    mag_len = 10\n    while n > mag_len:\n        n -= mag_len\n        nr_digits += 1\n        mag_len = nr_digits * (10**nr_digits - 10**(nr_digits-1))\n        print(n, nr_digits, mag_len)\n    quoitent, reminder = divmod(n-1, nr_digits)\n    print(quoitent, reminder)\n    return int(str(quoitent + 10**(nr_digits-1))[reminder])", "def champernowneDigit(n):\n\n    result=float(\"NaN\")\n    if type(n)==int and n>0:\n        if n<=10:\n            result=n-1\n        else:\n            i=1\n            c=10\n            while n>c:\n                i+=1\n                c=c+i*9*10**(i-1)\n            \n            number=(n-c)//i+10**i-1\n            reste=(n-c)%i\n            if reste:\n                number+=1\n            result=int(str(number)[reste-1])\n    return result", "from math import floor\ndef champernowneDigit(n):\n    print(n)\n    if n == None or isinstance(n, bool) or not isinstance(n, int) or n < 1: return float('nan')\n    t, c = 10, 1\n    while t < n: \n        c += 1\n        t += 9 * 10**(c-1) * c\n    num = str(10**c - 1 - floor((t-n)/c))\n    return int(num[c - 1 - (t-n)%c])", "def champernowneDigit(n):\n    if not n or type(n)!=int or n<0: return float('nan')\n    if n<=10: return n-1\n    digs=1\n    tot=1\n    while 1:\n        if tot+digs*9*10**(digs-1)>=n: break\n        tot+=digs*9*10**(digs-1)\n        digs+=1\n    number=(n-tot-1)//digs+10**(digs-1)\n    return int(str(number)[(n-tot-1)%digs])", "def champernowneDigit(n):\n    if not isinstance(n, int) or isinstance(n, bool) or n < 1:\n        return float(\"nan\")\n    n -= 1\n    sc = [9 * (x + 1) * pow(10, x) for x in range(50)]\n    i = 0\n    while n > sc[i]:\n        n -= sc[i]\n        i += 1\n    L, d = divmod((n-1), i + 1)\n    return int(str(pow(10, i) + L)[d])", "def champernowne_digit(n):\n    if not type(n) is int or n < 1:\n        return float(\"NaN\")\n    n, i, l = n-1, 1, 10\n    while n >= l: \n        n, i, l = n-l, i+1, 9 * (i+1) * 10**i\n    return (n//(i*10**(i-1-n%i)))%10 + (n%i<1) - (i<2) \n\nchampernowneDigit = champernowne_digit\n", "# 1.6160180568695068 sec for [1, 10000]\ng1 = lambda n: (9*(n+1)*10**n - 10**(n+1) + 1) // 9\n\n# 2.1931352615356445 seconds for [1, 10000]\ng2 = lambda n: int(''.join((str(n-1), \"8\"*(n-1), \"9\")))\n\nL = [g1(x) for x in range(1, 1000)]\n\ndef champernowneDigit(n):\n    if not (type(n) == int and 0 < n): return float(\"nan\")\n    if n == 1: return 0\n    n -= 1\n    x = next(i for i,v in enumerate(L, 1) if v > n)\n    q, r = divmod(L[x-1]-n, x)\n    return int(str(10**x-1-q)[-r-1])", "def champernowneDigit(n):\n    if not n or not type(n) == int or n < 1: return float('nan')\n    \n    dig, i = 10, 1\n    while dig < n: \n        i += 1\n        dig += 9 * 10 ** (i - 1) * i\n    \n    num = str(10 ** i - 1 - (dig - n) // i)\n    \n    return int(num[-1 - (dig - n) % i])"]