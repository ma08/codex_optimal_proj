["# cook your dish here\n# cook your dish here\n\nimport math\ndef distinctPrimeFactors(num) :\n    primes,sqrt = set(),int(math.sqrt(num))\n    if (num == 2) :primes.add(num)\n    for j in range(2, sqrt + 1) :\n        if (num % j == 0) :\n            primes.add(j)\n            while (num % j == 0) :num //= j\n    if (num > 2) :primes.add(num)\n    return (primes)\nres,c,lst,primes,rangeData = [],0,{},{},{};k, q = map(int, input().split());primes[k] = distinctPrimeFactors(k)\nfor tc in range(q) :\n    query = input()\n    if (query[0] == '!') :\n        cmd, l, r, x = query.split();l,r,x = int(l),int(r),int(x);start,end,startflag = l,r,False\n        for i in sorted(rangeData) :\n            rangeVal = i\n            if (start > rangeVal[1]) :continue\n            if (end < rangeVal[0]) :break            \n            startRange,endRange = start,end\n            if (start >= rangeVal[0] and start <= rangeVal[1]) :start = rangeVal[1] + 1;continue\n            if (end >= rangeVal[0]) :endRange = rangeVal[0] - 1\n            if (startRange <= endRange) :\n                rangeData[(startRange, endRange)] = x;start = max(endRange + 1, rangeVal[1] + 1)\n        if (start <= end) :rangeData[(start,end)] = x\n    elif (query[0] == '?') :\n        cmd, l, r = query.split();l,r,count = int(l),int(r),0\n        for primenum in primes[k] :\n            for currRange in rangeData :\n                if (not (r < currRange[0] or l > currRange[1])) :\n                    if (rangeData[currRange] % primenum == 0) :count += 1;break\n        c += 1;res.append(count)    \nfor i in range(c):print(res[i])\n", "# cook your dish here\n\nimport math\ndef distinctPrimeFactors(num) :\n    primes,sqrt = set(),int(math.sqrt(num))\n    if (num == 2) :primes.add(num)\n    for j in range(2, sqrt + 1) :\n        if (num % j == 0) :\n            primes.add(j)\n            while (num % j == 0) :num //= j\n    if (num > 2) :primes.add(num)\n    return (primes)\nres,c,lst,primes,rangeData = [],0,{},{},{};k, q = map(int, input().split());primes[k] = distinctPrimeFactors(k)\nfor tc in range(q) :\n    query = input()\n    if (query[0] == '!') :\n        cmd, l, r, x = query.split();l,r,x = int(l),int(r),int(x);start,end,startflag = l,r,False\n        for i in sorted(rangeData) :\n            rangeVal = i\n            if (start > rangeVal[1]) :continue\n            if (end < rangeVal[0]) :break            \n            startRange,endRange = start,end\n            if (start >= rangeVal[0] and start <= rangeVal[1]) :start = rangeVal[1] + 1;continue\n            if (end >= rangeVal[0]) :endRange = rangeVal[0] - 1\n            if (startRange <= endRange) :\n                rangeData[(startRange, endRange)] = x;start = max(endRange + 1, rangeVal[1] + 1)\n        if (start <= end) :rangeData[(start,end)] = x\n    elif (query[0] == '?') :\n        cmd, l, r = query.split();l,r,count = int(l),int(r),0\n        for primenum in primes[k] :\n            for currRange in rangeData :\n                if (not (r < currRange[0] or l > currRange[1])) :\n                    if (rangeData[currRange] % primenum == 0) :count += 1;break\n        c += 1;res.append(count)    \nfor i in range(c):print(res[i])\n", "# cook your dish here\n\nimport math\ndef distinctPrimeFactors(num) :\n    primes,sqrt = set(),int(math.sqrt(num))\n    if (num == 2) :primes.add(num)\n    for j in range(2, sqrt + 1) :\n        if (num % j == 0) :\n            primes.add(j)\n            while (num % j == 0) :num //= j\n    if (num > 2) :primes.add(num)\n    return (primes)\nres,c,lst,primes,rangeData = [],0,{},{},{};k, q = map(int, input().split());primes[k] = distinctPrimeFactors(k)\nfor tc in range(q) :\n    query = input()\n    if (query[0] == '!') :\n        cmd, l, r, x = query.split();l,r,x = int(l),int(r),int(x);start,end,startflag = l,r,False\n        for i in sorted(rangeData) :\n            rangeVal = i\n            if (start > rangeVal[1]) :continue\n            if (end < rangeVal[0]) :break            \n            startRange,endRange = start,end\n            if (start >= rangeVal[0] and start <= rangeVal[1]) :start = rangeVal[1] + 1;continue\n            if (end >= rangeVal[0]) :endRange = rangeVal[0] - 1\n            if (startRange <= endRange) :\n                rangeData[(startRange, endRange)] = x;start = max(endRange + 1, rangeVal[1] + 1)\n        if (start <= end) :rangeData[(start,end)] = x\n    elif (query[0] == '?') :\n        cmd, l, r = query.split();l,r,count = int(l),int(r),0\n        for primenum in primes[k] :\n            for currRange in rangeData :\n                if (not (r < currRange[0] or l > currRange[1])) :\n                    if (rangeData[currRange] % primenum == 0) :count += 1;break\n        c += 1;res.append(count)    \nfor i in range(c):print(res[i])\n", "\nimport math\ndef distinctPrimeFactors(num) :\n    primes,sqrt = set(),int(math.sqrt(num))\n    if (num == 2) :primes.add(num)\n    for j in range(2, sqrt + 1) :\n        if (num % j == 0) :\n            primes.add(j)\n            while (num % j == 0) :num //= j\n    if (num > 2) :primes.add(num)\n    return (primes)\nres,c,lst,primes,rangeData = [],0,{},{},{};k, q = map(int, input().split());primes[k] = distinctPrimeFactors(k)\nfor tc in range(q) :\n    query = input()\n    if (query[0] == '!') :\n        cmd, l, r, x = query.split();l,r,x = int(l),int(r),int(x);start,end,startflag = l,r,False\n        for i in sorted(rangeData) :\n            rangeVal = i\n            if (start > rangeVal[1]) :continue\n            if (end < rangeVal[0]) :break            \n            startRange,endRange = start,end\n            if (start >= rangeVal[0] and start <= rangeVal[1]) :start = rangeVal[1] + 1;continue\n            if (end >= rangeVal[0]) :endRange = rangeVal[0] - 1\n            if (startRange <= endRange) :\n                rangeData[(startRange, endRange)] = x;start = max(endRange + 1, rangeVal[1] + 1)\n        if (start <= end) :rangeData[(start,end)] = x\n    elif (query[0] == '?') :\n        cmd, l, r = query.split();l,r,count = int(l),int(r),0\n        for primenum in primes[k] :\n            for currRange in rangeData :\n                if (not (r < currRange[0] or l > currRange[1])) :\n                    if (rangeData[currRange] % primenum == 0) :count += 1;break\n        c += 1;res.append(count)    \nfor i in range(c):print(res[i])\n", "# cook your dish here\nimport math\ndef distinctPrimeFactors(num) :\n    primes,sqrt = set(),int(math.sqrt(num))\n    if (num == 2) :primes.add(num)\n    for j in range(2, sqrt + 1) :\n        if (num % j == 0) :\n            primes.add(j)\n            while (num % j == 0) :num //= j\n    if (num > 2) :primes.add(num)\n    return (primes)\nres,c,lst,primes,rangeData = [],0,{},{},{};k, q = map(int, input().split());primes[k] = distinctPrimeFactors(k)\nfor tc in range(q) :\n    query = input()\n    if (query[0] == '!') :\n        cmd, l, r, x = query.split();l,r,x = int(l),int(r),int(x);start,end,startflag = l,r,False\n        for i in sorted(rangeData) :\n            rangeVal = i\n            if (start > rangeVal[1]) :continue\n            if (end < rangeVal[0]) :break            \n            startRange,endRange = start,end\n            if (start >= rangeVal[0] and start <= rangeVal[1]) :start = rangeVal[1] + 1;continue\n            if (end >= rangeVal[0]) :endRange = rangeVal[0] - 1\n            if (startRange <= endRange) :\n                rangeData[(startRange, endRange)] = x;start = max(endRange + 1, rangeVal[1] + 1)\n        if (start <= end) :rangeData[(start,end)] = x\n    elif (query[0] == '?') :\n        cmd, l, r = query.split();l,r,count = int(l),int(r),0\n        for primenum in primes[k] :\n            for currRange in rangeData :\n                if (not (r < currRange[0] or l > currRange[1])) :\n                    if (rangeData[currRange] % primenum == 0) :count += 1;break\n        c += 1;res.append(count)    \nfor i in range(c):print(res[i])", "# cook your dish here\nimport math\ndef distinctPrimeFactors(num) :\n    primes,sqrt = set(),int(math.sqrt(num))\n    if (num == 2) :primes.add(num)\n    for j in range(2, sqrt + 1) :\n        if (num % j == 0) :\n            primes.add(j)\n            while (num % j == 0) :num //= j\n    if (num > 2) :primes.add(num)\n    return (primes)\nres,c,lst,primes,rangeData = [],0,{},{},{};k, q = map(int, input().split());primes[k] = distinctPrimeFactors(k)\nfor tc in range(q) :\n    query = input()\n    if (query[0] == '!') :\n        cmd, l, r, x = query.split();l,r,x = int(l),int(r),int(x);start,end,startflag = l,r,False\n        for i in sorted(rangeData) :\n            rangeVal = i\n            if (start > rangeVal[1]) :continue\n            if (end < rangeVal[0]) :break            \n            startRange,endRange = start,end\n            if (start >= rangeVal[0] and start <= rangeVal[1]) :start = rangeVal[1] + 1;continue\n            if (end >= rangeVal[0]) :endRange = rangeVal[0] - 1\n            if (startRange <= endRange) :\n                rangeData[(startRange, endRange)] = x;start = max(endRange + 1, rangeVal[1] + 1)\n        if (start <= end) :rangeData[(start,end)] = x\n    elif (query[0] == '?') :\n        cmd, l, r = query.split();l,r,count = int(l),int(r),0\n        for primenum in primes[k] :\n            for currRange in rangeData :\n                if (not (r < currRange[0] or l > currRange[1])) :\n                    if (rangeData[currRange] % primenum == 0) :count += 1;break\n        c += 1;res.append(count)    \nfor i in range(c):print(res[i])", "import math\ndef distinctPrimeFactors(num) :\n    primes,sqrt = set(),int(math.sqrt(num))\n    if (num == 2) :primes.add(num)\n    for j in range(2, sqrt + 1) :\n        if (num % j == 0) :\n            primes.add(j)\n            while (num % j == 0) :num //= j\n    if (num > 2) :primes.add(num)\n    return (primes)\nres,c,lst,primes,rangeData = [],0,{},{},{};k, q = map(int, input().split());primes[k] = distinctPrimeFactors(k)\nfor tc in range(q) :\n    query = input()\n    if (query[0] == '!') :\n        cmd, l, r, x = query.split();l,r,x = int(l),int(r),int(x);start,end,startflag = l,r,False\n        for i in sorted(rangeData) :\n            rangeVal = i\n            if (start > rangeVal[1]) :continue\n            if (end < rangeVal[0]) :break            \n            startRange,endRange = start,end\n            if (start >= rangeVal[0] and start <= rangeVal[1]) :start = rangeVal[1] + 1;continue\n            if (end >= rangeVal[0]) :endRange = rangeVal[0] - 1\n            if (startRange <= endRange) :\n                rangeData[(startRange, endRange)] = x;start = max(endRange + 1, rangeVal[1] + 1)\n        if (start <= end) :rangeData[(start,end)] = x\n    elif (query[0] == '?') :\n        cmd, l, r = query.split();l,r,count = int(l),int(r),0\n        for primenum in primes[k] :\n            for currRange in rangeData :\n                if (not (r < currRange[0] or l > currRange[1])) :\n                    if (rangeData[currRange] % primenum == 0) :count += 1;break\n        c += 1;res.append(count)    \nfor i in range(c):print(res[i])", "# cook your dish here\nimport math\ndef distinctPrimeFactors(num) :\n    primes,sqrt = set(),int(math.sqrt(num))\n    if (num == 2) :primes.add(num)\n    for j in range(2, sqrt + 1) :\n        if (num % j == 0) :\n            primes.add(j)\n            while (num % j == 0) :num //= j\n    if (num > 2) :primes.add(num)\n    return (primes)\nres,c,lst,primes,rangeData = [],0,{},{},{};k, q = map(int, input().split());primes[k] = distinctPrimeFactors(k)\nfor tc in range(q) :\n    query = input()\n    if (query[0] == '!') :\n        cmd, l, r, x = query.split();l,r,x = int(l),int(r),int(x);start,end,startflag = l,r,False\n        for i in sorted(rangeData) :\n            rangeVal = i\n            if (start > rangeVal[1]) :continue\n            if (end < rangeVal[0]) :break            \n            startRange,endRange = start,end\n            if (start >= rangeVal[0] and start <= rangeVal[1]) :start = rangeVal[1] + 1;continue\n            if (end >= rangeVal[0]) :endRange = rangeVal[0] - 1\n            if (startRange <= endRange) :\n                rangeData[(startRange, endRange)] = x;start = max(endRange + 1, rangeVal[1] + 1)\n        if (start <= end) :rangeData[(start,end)] = x\n    elif (query[0] == '?') :\n        cmd, l, r = query.split();l,r,count = int(l),int(r),0\n        for primenum in primes[k] :\n            for currRange in rangeData :\n                if (not (r < currRange[0] or l > currRange[1])) :\n                    if (rangeData[currRange] % primenum == 0) :count += 1;break\n        c += 1;res.append(count)    \nfor i in range(c):print(res[i])", "import math\ndef distinctPrimeFactors(num) :\n    primes,sqrt = set(),int(math.sqrt(num))\n    if (num == 2) :primes.add(num)\n    for j in range(2, sqrt + 1) :\n        if (num % j == 0) :\n            primes.add(j)\n            while (num % j == 0) :num //= j\n    if (num > 2) :primes.add(num)\n    return (primes)\nres,c,lst,primes,rangeData = [],0,{},{},{};k, q = map(int, input().split());primes[k] = distinctPrimeFactors(k)\nfor tc in range(q) :\n    query = input()\n    if (query[0] == '!') :\n        cmd, l, r, x = query.split();l,r,x = int(l),int(r),int(x);start,end,startflag = l,r,False\n        for i in sorted(rangeData) :\n            rangeVal = i\n            if (start > rangeVal[1]) :continue\n            if (end < rangeVal[0]) :break            \n            startRange,endRange = start,end\n            if (start >= rangeVal[0] and start <= rangeVal[1]) :start = rangeVal[1] + 1;continue\n            if (end >= rangeVal[0]) :endRange = rangeVal[0] - 1\n            if (startRange <= endRange) :\n                rangeData[(startRange, endRange)] = x;start = max(endRange + 1, rangeVal[1] + 1)\n        if (start <= end) :rangeData[(start,end)] = x\n    elif (query[0] == '?') :\n        cmd, l, r = query.split();l,r,count = int(l),int(r),0\n        for primenum in primes[k] :\n            for currRange in rangeData :\n                if (not (r < currRange[0] or l > currRange[1])) :\n                    if (rangeData[currRange] % primenum == 0) :count += 1;break\n        c += 1;res.append(count)    \nfor i in range(c):print(res[i])", "# cook your dish here\nimport math\ndef distinctPrimeFactors(num) :\n    primes,sqrt = set(),int(math.sqrt(num))\n    if (num == 2) :primes.add(num)\n    for j in range(2, sqrt + 1) :\n        if (num % j == 0) :\n            primes.add(j)\n            while (num % j == 0) :num //= j\n    if (num > 2) :primes.add(num)\n    return (primes)\nres,c,lst,primes,rangeData = [],0,{},{},{}\nk, q = map(int, input().split())\nprimes[k] = distinctPrimeFactors(k)\nfor tc in range(q) :\n    query = input()\n    if (query[0] == '!') :\n        cmd, l, r, x = query.split()\n        l,r,x = int(l),int(r),int(x)\n        start,end,startflag = l,r,False\n        for i in sorted(rangeData) :\n            rangeVal = i\n            if (start > rangeVal[1]) :continue\n            if (end < rangeVal[0]) :break            \n            startRange,endRange = start,end\n            if (start >= rangeVal[0] and start <= rangeVal[1]) :\n                start = rangeVal[1] + 1\n                continue\n            if (end >= rangeVal[0]) :endRange = rangeVal[0] - 1\n            if (startRange <= endRange) :\n                rangeData[(startRange, endRange)] = x\n                start = max(endRange + 1, rangeVal[1] + 1)\n        if (start <= end) :rangeData[(start,end)] = x\n    elif (query[0] == '?') :\n        cmd, l, r = query.split()\n        l,r,count = int(l),int(r),0\n        for primenum in primes[k] :\n            for currRange in rangeData :\n                if (not (r < currRange[0] or l > currRange[1])) :\n                    if (rangeData[currRange] % primenum == 0) :\n                        count += 1\n                        break\n        c += 1\n        res.append(count)    \nfor i in range(c):print(res[i])", "import math\ndef distinctPrimeFactors(num) :\n    primes,sqrt = set(),int(math.sqrt(num))\n    if (num == 2) :primes.add(num)\n    for j in range(2, sqrt + 1) :\n        if (num % j == 0) :\n            primes.add(j)\n            while (num % j == 0) :num //= j\n    if (num > 2) :primes.add(num)\n    return (primes)\nres,c,lst,primes,rangeData = [],0,{},{},{}\nk, q = map(int, input().split())\nprimes[k] = distinctPrimeFactors(k)\nfor tc in range(q) :\n    query = input()\n    if (query[0] == '!') :\n        cmd, l, r, x = query.split()\n        l,r,x = int(l),int(r),int(x)\n        start,end,startflag = l,r,False\n        for i in sorted(rangeData) :\n            rangeVal = i\n            if (start > rangeVal[1]) :continue\n            if (end < rangeVal[0]) :break            \n            startRange,endRange = start,end\n            if (start >= rangeVal[0] and start <= rangeVal[1]) :\n                start = rangeVal[1] + 1\n                continue\n            if (end >= rangeVal[0]) :endRange = rangeVal[0] - 1\n            if (startRange <= endRange) :\n                rangeData[(startRange, endRange)] = x\n                start = max(endRange + 1, rangeVal[1] + 1)\n        if (start <= end) :rangeData[(start,end)] = x\n    elif (query[0] == '?') :\n        cmd, l, r = query.split()\n        l,r,count = int(l),int(r),0\n        for primenum in primes[k] :\n            for currRange in rangeData :\n                if (not (r < currRange[0] or l > currRange[1])) :\n                    if (rangeData[currRange] % primenum == 0) :\n                        count += 1\n                        break\n        c += 1\n        res.append(count)    \nfor i in range(c):print(res[i])", "# cook your dish here\nfrom collections import defaultdict\nfrom math import sqrt\n\n\"\"\"def isprime(n):\n    if n==2:\n        return True\n    elif n>2:\n        for i in range(2,int(sqrt(n))+1):\n            if n%i==0:\n                return False\n    elif n<2:\n        return False\n    return True\"\"\"\n\ndef primefact(n):\n    pf = []\n    if n%2==0:\n        pf.append(2)\n        while n%2==0:\n            n //= 2\n    for i in range(3,int(sqrt(n))+1):\n        if n%i==0:\n            while n%i==0:\n                n //= i\n            pf.append(i)\n    if n>2:\n        pf.append(int(n))\n    return pf\n    \nK,Q = map(int, input().split())\nprime_range = {}\npfk = primefact(K)\nfor i in range(Q):\n    query = input().split()\n    if query[0]==\"!\":\n        l = int(query[1])\n        r = int(query[2])\n        start = l\n        end = r\n        for i in sorted(prime_range):\n            if start>i[1]:\n                continue\n            if end<i[0]:\n                break\n            startrange = start\n            endrange = end\n            if start>=i[0] and start<=i[1]:\n                start = i[1]+1\n                continue\n            if end>=i[0]:\n                endrange = i[0]-1\n            if (startrange<=endrange):\n                prime_range[(startrange,endrange)] = int(query[3])\n                start = max(endrange+1,i[1]+1)\n        if start<=end:\n            prime_range[(start,end)] = int(query[3])\n    else:\n        l = int(query[1])\n        r = int(query[2])\n        res = []\n        count = 0\n        for primenum in pfk:\n            for currRange in prime_range:\n                if (not (r < currRange[0] or l > currRange[1])) :\n                    num = prime_range[currRange]\n                    if (num % primenum == 0) :\n                        count += 1\n                        break\n        res.append(count)\n        for r in res:\n            print(r)\n        '''for i in prime_range:\n            if l>=i[0] and l<=i[1]:\n                x = prime_range[(i[0],i[1])]\n                pf = primefact(x)\n                for p in pf:\n                    if p in pfk and p not in pfc:\n                        pfc.append(p)\n                continue\n            if r>=i[0] and r<=i[1]:\n                x = prime_range[(i[0],i[1])]\n                pf = primefact(x)\n                for p in pf:\n                    if p in pfk and p not in pfc:\n                        pfc.append(p)\n        print(len(pfc))\n       #print(prime_range)'''\n                \n            \n        ", "# cook your dish here\nimport math\n\ndef distinctPrimeFactors(num) :\n    primes = set()\n\n    if (num == 2) :\n        primes.add(num)\n    \n    sqrt = int(math.sqrt(num))\n    for j in range(2, sqrt + 1) :\n        if (num % j == 0) :\n            primes.add(j)\n            while (num % j == 0) :\n                num //= j\n    if (num > 2) :\n        primes.add(num)\n\n    return (primes)\n\nres = []\nc = 0\nlst = {}\nprimes = {}\nrangeData = {}\nk, q = map(int, input().split())\nprimes[k] = distinctPrimeFactors(k)\nfor tc in range(q) :\n    query = input()\n    if (query[0] == '!') :\n        cmd, l, r, x = query.split()\n        l = int(l)\n        r = int(r)\n        x = int(x)\n        start = l\n        end = r\n        startflag = False\n        for i in sorted(rangeData) :\n            rangeVal = i\n\n            if (start > rangeVal[1]) :\n                continue\n            if (end < rangeVal[0]) :\n                break\n            \n            startRange = start\n            endRange = end\n            if (start >= rangeVal[0] and start <= rangeVal[1]) :\n                start = rangeVal[1] + 1\n                continue\n            if (end >= rangeVal[0]) :\n                endRange = rangeVal[0] - 1\n            if (startRange <= endRange) :\n                rangeData[(startRange, endRange)] = x\n                start = max(endRange + 1, rangeVal[1] + 1)\n        if (start <= end) :\n            rangeData[(start,end)] = x\n    elif (query[0] == '?') :\n        cmd, l, r = query.split()\n        l = int(l)\n        r = int(r)\n        count = 0\n        for primenum in primes[k] :\n            for currRange in rangeData :\n                if (not (r < currRange[0] or l > currRange[1])) :\n                    num = rangeData[currRange]\n                    if (num % primenum == 0) :\n                        count += 1\n                        break\n        c += 1\n        res.append(count)\n    \nfor i in range(c) :\n    print(res[i])", "import math\r\n\r\ndef distinctPrimeFactors(num) :\r\n\r\n    primes = set()\r\n\r\n    if (num == 2) :\r\n        primes.add(num)\r\n    \r\n    sqrt = int(math.sqrt(num))\r\n    for j in range(2, sqrt + 1) :\r\n        if (num % j == 0) :\r\n            \r\n            primes.add(j)\r\n            \r\n           \r\n            while (num % j == 0) :\r\n                num //= j\r\n\r\n   \r\n    if (num > 2) :\r\n        primes.add(num)\r\n\r\n    return (primes)\r\n\r\n\r\n\r\nlst = {}\r\nprimes = {}\r\nrangeData = {}\r\nk, q = map(int, input().split())\r\nprimes[k] = distinctPrimeFactors(k)\r\nfor tc in range(q) :\r\n    query = input()\r\n    if (query[0] == '!') :\r\n        cmd, l, r, x = query.split()\r\n        l = int(l)\r\n        r = int(r)\r\n        x = int(x)\r\n        start = l\r\n        end = r\r\n        startflag = False\r\n        for i in sorted(rangeData) :\r\n            rangeVal = i\r\n            if (start > rangeVal[1]) :\r\n                continue\r\n            if (end < rangeVal[0]) :\r\n                break\r\n            \r\n            startRange = start\r\n            endRange = end\r\n            if (start >= rangeVal[0] and start <= rangeVal[1]) :\r\n                start = rangeVal[1] + 1\r\n                continue\r\n            if (end >= rangeVal[0]) :\r\n                endRange = rangeVal[0] - 1\r\n            if (startRange <= endRange) :\r\n                rangeData[(startRange, endRange)] = x\r\n                start = max(endRange + 1, rangeVal[1] + 1)\r\n        if (start <= end) :\r\n            rangeData[(start,end)] = x\r\n    elif (query[0] == '?') :\r\n        cmd, l, r = query.split()\r\n        l = int(l)\r\n        r = int(r)\r\n        count = 0\r\n        for primenum in primes[k] :\r\n            for currRange in rangeData :\r\n                if (not (r < currRange[0] or l > currRange[1])) :\r\n                    num = rangeData[currRange]\r\n                    if (num % primenum == 0) :\r\n                        count += 1\r\n                        break\r\n        print(count)\r\n    \r\n   \r\n", "import math\r\n\r\ndef distinctPrimeFactors(num) :\r\n\r\n    primes = set()\r\n\r\n    if (num == 2) :\r\n        primes.add(num)\r\n    \r\n    sqrt = int(math.sqrt(num))\r\n    for j in range(2, sqrt + 1) :\r\n        if (num % j == 0) :\r\n            \r\n            primes.add(j)\r\n            \r\n           \r\n            while (num % j == 0) :\r\n                num //= j\r\n\r\n   \r\n    if (num > 2) :\r\n        primes.add(num)\r\n\r\n    return (primes)\r\n\r\n\r\n\r\nlst = {}\r\nprimes = {}\r\nrangeData = {}\r\nk, q = map(int, input().split())\r\nprimes[k] = distinctPrimeFactors(k)\r\nfor tc in range(q) :\r\n    query = input()\r\n    if (query[0] == '!') :\r\n        cmd, l, r, x = query.split()\r\n        l = int(l)\r\n        r = int(r)\r\n        x = int(x)\r\n        start = l\r\n        end = r\r\n        startflag = False\r\n        for i in sorted(rangeData) :\r\n            rangeVal = i\r\n            if (start > rangeVal[1]) :\r\n                continue\r\n            if (end < rangeVal[0]) :\r\n                break\r\n            \r\n            startRange = start\r\n            endRange = end\r\n            if (start >= rangeVal[0] and start <= rangeVal[1]) :\r\n                start = rangeVal[1] + 1\r\n                continue\r\n            if (end >= rangeVal[0]) :\r\n                endRange = rangeVal[0] - 1\r\n            if (startRange <= endRange) :\r\n                rangeData[(startRange, endRange)] = x\r\n                start = max(endRange + 1, rangeVal[1] + 1)\r\n        if (start <= end) :\r\n            rangeData[(start,end)] = x\r\n    elif (query[0] == '?') :\r\n        cmd, l, r = query.split()\r\n        l = int(l)\r\n        r = int(r)\r\n        count = 0\r\n        for primenum in primes[k] :\r\n            for currRange in rangeData :\r\n                if (not (r < currRange[0] or l > currRange[1])) :\r\n                    num = rangeData[currRange]\r\n                    if (num % primenum == 0) :\r\n                        count += 1\r\n                        break\r\n        print(count)\r\n    \r\n   \r\n", "import math\r\ndef distinctPrimeFactors(num) :\r\n    primes = set()\r\n    if (num == 2) :\r\n        primes.add(num)\r\n    sqrt = int(math.sqrt(num))\r\n    for j in range(2, sqrt + 1) :\r\n        if (num % j == 0) :\r\n            primes.add(j)\r\n            while (num % j == 0) :\r\n                num //= j\r\n    if (num > 2) :\r\n        primes.add(num)\r\n    return (primes)\r\nlst = {}\r\nprimes = {}\r\nrangeData = {}\r\nk, q = map(int, input().split())\r\nprimes[k] = distinctPrimeFactors(k)\r\nfor tc in range(q) :\r\n    query = input()\r\n    if (query[0] == '!') :\r\n        cmd, l, r, x = query.split()\r\n        l = int(l)\r\n        r = int(r)\r\n        x = int(x)\r\n        start = l\r\n        end = r\r\n        startflag = False\r\n        for i in sorted(rangeData) :\r\n            rangeVal = i\r\n            if (start > rangeVal[1]) :\r\n                continue\r\n            if (end < rangeVal[0]) :\r\n                break\r\n            startRange = start\r\n            endRange = end\r\n            if (start >= rangeVal[0] and start <= rangeVal[1]) :\r\n                start = rangeVal[1] + 1\r\n                continue\r\n            if (end >= rangeVal[0]) :\r\n                endRange = rangeVal[0] - 1\r\n            if (startRange <= endRange) :\r\n                rangeData[(startRange, endRange)] = x\r\n                start = max(endRange + 1, rangeVal[1] + 1)\r\n        if (start <= end) :\r\n            rangeData[(start,end)] = x\r\n    elif (query[0] == '?') :\r\n        cmd, l, r = query.split()\r\n        l = int(l)\r\n        r = int(r)\r\n        count = 0\r\n        for primenum in primes[k] :\r\n            for currRange in rangeData :\r\n                if (not (r < currRange[0] or l > currRange[1])) :\r\n                    num = rangeData[currRange]\r\n                    if (num % primenum == 0) :\r\n                        count += 1\r\n                        break\r\n        print(count)", "# Contest Code: DEMA2019     Problem Code: MAXSPSUM\n#\n# Author: Keyur Shroff\n# Date: 26 April 2019\n\nimport math\n\n# Function to return the distinct prime factors of an array or a list\ndef distinctPrimeFactors(num) :\n\n    # use set to store distinct factors\n    primes = set()\n\n    if (num == 2) :\n        primes.add(num)\n    \n    sqrt = int(math.sqrt(num))\n    for j in range(2, sqrt + 1) :\n        if (num % j == 0) :\n            # if j is a factor store it in the set\n            primes.add(j)\n            \n            # divide the number with j till it is divisible so that \n            # only prime factors are stored\n            while (num % j == 0) :\n                num //= j\n\n    # if the number is still greater than 1 then it is a prime factor\n    if (num > 2) :\n        primes.add(num)\n\n    return (primes)\n\n\n# --- Main Program ---\nlst = {}\nprimes = {}\nrangeData = {}\nk, q = map(int, input().split())\nprimes[k] = distinctPrimeFactors(k)\nfor tc in range(q) :\n    query = input()\n    if (query[0] == '!') :\n        cmd, l, r, x = query.split()\n        l = int(l)\n        r = int(r)\n        x = int(x)\n        start = l\n        end = r\n        startflag = False\n        for i in sorted(rangeData) :\n            rangeVal = i\n            if (start > rangeVal[1]) :\n                continue\n            if (end < rangeVal[0]) :\n                break\n            \n            startRange = start\n            endRange = end\n            if (start >= rangeVal[0] and start <= rangeVal[1]) :\n                start = rangeVal[1] + 1\n                continue\n            if (end >= rangeVal[0]) :\n                endRange = rangeVal[0] - 1\n            if (startRange <= endRange) :\n                rangeData[(startRange, endRange)] = x\n                start = max(endRange + 1, rangeVal[1] + 1)\n        if (start <= end) :\n            rangeData[(start,end)] = x\n    elif (query[0] == '?') :\n        cmd, l, r = query.split()\n        l = int(l)\n        r = int(r)\n        count = 0\n        for primenum in primes[k] :\n            for currRange in rangeData :\n                if (not (r < currRange[0] or l > currRange[1])) :\n                    num = rangeData[currRange]\n                    if (num % primenum == 0) :\n                        count += 1\n                        break\n        print(count)\n    \n    #print(\"query=\", query, \"primes=\", primes, \"rangeData=\", rangeData)"]