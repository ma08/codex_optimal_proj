["import sys\ninput = sys.stdin.readline\nimport bisect\n\nt=int(input())\nfor tests in range(t):\n    n=int(input())\n    A=list(map(int,input().split()))\n\n    compression_dict={a: ind for ind, a in enumerate(sorted(set(A)))}\n    A=[compression_dict[a] for a in A]\n\n    Q=[0]*n\n     \n    for i in range(n):\n        Q[A[i]]=i\n     \n    count=1\n    Ans=0\n    #print(A,Q)\n    for i in range(1,n):\n        if Q[i]>Q[i-1]:\n            count+=1\n        else:\n            Ans=max(count,Ans)\n            count=1\n\n    Ans=max(count,Ans)\n     \n    print(n-Ans)\n\n    \n", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int,input().split()))\n    id = list(zip(l,list(range(n))))\n    id.sort()\n    val, pos = zip(*id)\n    best = 1\n    i = 1\n    count = 1\n    while True:\n        if i >= n:\n            break\n        if pos[i] > pos[i-1]:\n            count += 1\n            best = max(count,best)\n        else:\n            count = 1\n        i += 1\n    print(n-best)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        a[i] = a[i] * n + i\n    a.sort()\n    p = [0 for _ in range(n)]\n    for i in range(n):\n        p[a[i]%n] = i\n    q = [0 for _ in range(n)]\n    for i in range(n):\n        q[p[i]] = i\n    cnt = 1\n    m = 0\n    for i in range(1, n):\n        if q[i-1] < q[i]:\n            cnt += 1\n        else:\n            m = max(cnt, m)\n            cnt = 1\n    m = max(cnt, m)\n    print(n - m)", "def search(lis,idx,val):\n    low = 0\n    high = idx\n    while(low<=high):\n        mid = (low+high)//2\n        if lis[mid] == val:\n            return mid\n        if lis[mid] > val:\n            high = mid-1\n        else:\n            low = mid+1\n        \ndef ans(arr):\n    \n    lis_f = list(sorted(arr))\n    ans_arr = [0]*len(arr)\n    for i in range(len(arr)):\n        ans_arr[search(lis_f,len(arr)-1,arr[i])]=i\n    #print(ans_arr)\n    c = 1\n    p=0\n    for j in range(1,len(arr)):\n        #print(ans_arr[j],ans_arr[j-1])\n        if ans_arr[j]>ans_arr[j-1]:\n            c+=1\n        elif c>p:\n            p=c\n            c=1\n        else:\n            c = 1\n        #print(c,p)\n\n    if c>p:\n        p=c\n\n\n    print(len(arr)-p)\n    \n    \n\nk=int(input())\nfor i in range(k):\n    input()\n    ans(list(map(int,input().split())))", "def search(lis,idx,val):\n    low = 0\n    high = idx\n    while(low<=high):\n        mid = (low+high)//2\n        if lis[mid] == val:\n            return mid\n        if lis[mid] > val:\n            high = mid-1\n        else:\n            low = mid+1\n        \ndef ans(arr):\n    hj=9;ghkd=898291\n    lis_f = sorted(arr)\n    ans_arr = [0]*len(arr)\n    for i in range(len(arr)):\n        ans_arr[search(lis_f,len(arr)-1,arr[i])]=i\n    #print(ans_arr)\n    c = 1\n    p=0\n    for j in range(1,len(arr)):\n        #print(ans_arr[j],ans_arr[j-1])\n        if ans_arr[j]>ans_arr[j-1]:\n            c+=1\n        elif c>p:\n            p=c\n            ghkd=898291\n            c=1\n        else:\n            c = 1\n        #print(c,p)\n\n    if c>p:\n        p=c\n\n\n    print(len(arr)-p)\n    \n    \n\nk=int(input())\nfor i in range(k):\n    input()\n    l=list(map(int,input().split()))\n    ans(l)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    c = {}\n    for i in range(n-1):\n        c[b[i+1]] = b[i]\n    c[b[0]] = -1\n    li = {}\n    for i in a:\n        if c[i] in li:\n            li[i] = li[c[i]] + 1\n        else:\n            li[i] = 1\n    print(n-max(li.values()))", "from sys import stdin\ndef search(lis,idx,val):\n    low = 0\n    high = idx\n    while(low<=high):\n        mid = (low+high)//2\n        if lis[mid] == val:\n            return mid\n        if lis[mid] > val:\n            high = mid-1\n        else:\n            low = mid+1\n        \ndef ans(arr):\n    \n    lis_f = sorted(arr)\n    ans_arr = [0]*len(arr)\n    for i in range(len(arr)):\n        ans_arr[search(lis_f,len(arr)-1,arr[i])]=i\n    #print(ans_arr)\n    c = 1\n    p=0\n    for j in range(1,len(arr)):\n        #print(ans_arr[j],ans_arr[j-1])\n        if ans_arr[j]>ans_arr[j-1]:\n            c+=1\n        elif c>p:\n            p=c\n            c=1\n        else:\n            c = 1\n        #print(c,p)\n\n    if c>p:\n        p=c\n\n\n    print(len(arr)-p)\n    \n    \nfor i in range(1000):\n    continue\nfor i in range(int(stdin.readline())):\n    stdin.readline()\n    ans(list(map(int,stdin.readline().split())))", "import sys\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn list(map(int, minp().split()))\n\ndef solve():\n\tn = mint()\n\ta = list(mints())\n\tb = list(enumerate(a))\n\tb.sort(key=lambda a:a[1])\n\tc1 = [0]*n\n\t#c2 = [0]*n\n\tc = 0\n\th = 0\n\tp = -1\n\tfor i, v in b:\n\t\tif i > p:\n\t\t\tc += 1\n\t\telse:\n\t\t\tc = 1\n\t\th += 1\n\t\tc1[i] = h-c\n\t\tp = i\n\tc = 0\n\th = 0\n\tp = -1\n\tans = n+n\n\tfor z in range(len(b)-1,-1,-1):\n\t\ti, v = b[z]\n\t\tif i < p:\n\t\t\tc += 1\n\t\telse:\n\t\t\tc = 1\n\t\th += 1\n\t\t#c2[i] = h-c\n\t\tans = min(ans, h - c + c1[i])\n\t\tp = i\n\tprint(ans)\n\nfor i in range(mint()):\n\tsolve()\n", "from sys import stdin\ndef bsearch(lis,idx,val):\n    l = 0\n    h=idx\n    while(l<=h):\n        mid = (l+h)//2\n        if lis[mid] == val:\n            return mid\n        if lis[mid] > val:\n            h= mid-1\n        else:\n            l = mid+1\n        \ndef res(arr):\n    lis_f = sorted(arr)\n    _arr = [0 for i in range(len(arr))]\n    for i in range(len(arr)):\n        _arr[bsearch(lis_f,len(arr)-1,arr[i])]=i\n    c=1\n    p=0\n    for j in range(1,len(arr)):\n        if _arr[j]>_arr[j-1]:\n            c+=1\n        elif c>p:\n            p=c\n            c=1\n        else:\n            c=1\n    if c>p:\n        p=c\n    print(len(arr)-p)\nk=int(stdin.readline())\nwhile(k):\n    stdin.readline()\n    res(list(map(int,stdin.readline().split())))\n    k-=1", "tt = int(input())\n\nfor loop in range(tt):\n\n    n = int(input())\n\n    a = list(map(int,input().split()))\n    ai = []\n    for i in range(n):\n        ai.append( ( a[i] , i ) )\n\n    ai.sort()\n    ind = 0\n\n    b = [0] * n #newlist\n    non = [0] * (n+1) #numbers of numbers\n\n    for i in range(n):\n\n        if i != 0 and ai[i][0] != ai[i-1][0]:\n            ind += 1\n\n        b[ai[i][1]] = ind\n        non[ind] += 1\n\n    dp = [0] * (n+1)\n\n    for i in range(n):\n\n        dp[b[i]] += max( dp[b[i]] , dp[b[i]-1] + 1)\n\n    print (n - max(dp))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    indexOf = {}\n    for i in range(n):\n        indexOf[a[i]] = i\n    values = sorted(list(set(a)))\n    visited = [False for _ in range(n)]\n    ng = [n for _ in range(n)]\n    for i in range(n):\n        lo = 0\n        hi = len(values)-1\n        while lo < hi:\n            mid = (lo + hi) // 2\n            if values[mid] < a[i]:\n                lo = mid + 1\n            else:\n                hi = mid\n        if lo != len(values) - 1:\n            ng[i] = indexOf[values[lo+1]]\n    ans = n\n    for i in range(n):\n        if visited[i]:\n            continue\n        tempAns = n\n        at = i\n        while at != n:\n            visited[at] = True\n            tempAns -= 1\n            if ng[at] > at:\n                at = ng[at]\n            else:\n                at = n\n        ans = min(ans, tempAns)\n    print(ans)\n", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int,input().split()))\n    p = []\n    for i in range(n):\n        p.append((a[i],i))\n    p.sort(key = lambda x: x[0])\n    aOrder = [-1] * n\n    for i in range(n):\n        aOrder[p[i][1]] = i\n    maxSubseq = []\n    for i in range(n):\n        maxSubseqcur = 0\n        for j in range(i):\n            if aOrder[i] - aOrder[j] == 1 and maxSubseqcur < maxSubseq[j]:\n                maxSubseqcur = maxSubseq[j]\n        maxSubseq.append(maxSubseqcur + 1)\n    print(n - max(maxSubseq))", "from sys import stdin,stdout\ndef findops(l):\n    ans=0\n    count=1\n    for i in range(1,len(l)):\n        if l[i]>l[i-1]:\n            count+=1\n        else:\n            ans=max(ans,count)\n            count=1\n    return len(l)-max(ans,count)\n    \n\ndef main():\n    for _ in range(int(stdin.readline())):\n        stdin.readline()\n        l=list(map(int,stdin.readline().split()))\n        print(findops(sorted(range(len(l)),key=lambda x:l[x])))\n\nmain()", "t=int(input())\nfor you in range(t):\n    n=int(input())\n    l=input().split()\n    li=[int(i) for i in l]\n    z=list(li)\n    z.sort()\n    hashi=dict()\n    for i in range(n):\n        hashi[z[i]]=i+1\n    for i in range(n):\n        li[i]=hashi[li[i]]\n    hashi=dict()\n    dp=[0 for i in range(n)]\n    for i in range(n):\n        if(li[i]-1 in hashi):\n            dp[i]=hashi[li[i]-1]+1\n            hashi[li[i]]=dp[i]\n        else:\n            dp[i]=1\n            hashi[li[i]]=1\n    z=max(dp)\n    print(n-z)\n", "t=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=list(map(int,input().split()))\n    b=[]\n    for i in range(n):\n        b.append([a[i],i])\n    b=sorted(b, key=lambda R: R[0])\n    positions=[0]*n\n    for i in range(n):\n        positions[b[i][1]]=i\n    leftmin=[]\n    rightmin=[]\n    for i in range(n):\n        leftmin.append(0)\n        rightmin.append(0)\n    for i in range(n-1):\n        for j in range(i+1):\n            if a[j]>a[i+1]:\n                l=positions[i+1]+1\n                r=n-positions[j]\n                for k in range(l-1,-1,-1):\n                    if leftmin[k]>=r:\n                        break\n                    leftmin[k]=r\n                for k in range(r-1,-1,-1):\n                    if rightmin[k]>=l:\n                        break\n                    rightmin[k]=l\n    maximum=n\n    for i in range(n):\n        maximum=min(maximum,leftmin[i]+i)\n        maximum=min(maximum,rightmin[i]+i)\n    print(maximum)\n", "I=lambda:list(map(int,input().split()))\ndef lis(arr): \n    n = len(arr) \n    lis = [1]*n \n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i]==arr[j]+1  and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n    maximum = 0\n    for i in range(n): \n        maximum = max(maximum ,lis[i]) \n    return maximum \nfor tc in range(int(input())):\n\tn,=I()\n\tl=I()\n\tar=l.copy()\n\tar.sort()\n\tf={}\n\tfor i in range(n):\t\n\t\tf[ar[i]]=i+1\n\tfor i in range(n):\n\t\tl[i]=f[l[i]]\n\tprint(n-lis(l))", "\ndef maxSubsequenceSubstring(x, y, n, m): \n    dp = [[0 for i in range(n+1)] \n             for i in range(n+1)] \n    for i in range(1, m + 1): \n        for j in range(1, n + 1): \n            if(x[j - 1] == y[i - 1]): \n                dp[i][j] = 1 + dp[i - 1][j - 1] \n            else: \n                dp[i][j] = dp[i][j - 1] \n    ans = 0\n    for i in range(1, m + 1): \n        ans = max(ans, dp[i][n]) \n    return ans \n    \nt = int(input())\nwhile(t):\n    t-=1\n    n = int(input())\n    l = list(map(int,input().split()))\n    q = sorted(l)\n    print(n - maxSubsequenceSubstring(l,q,len(l),len(q)))\n"]