["def to_1D(x, y, size):\n    return y * size[0] + x    \n    \ndef to_2D(n, size):\n    return (n % size[0], n // size[0])", "def to_1D(x, y, size):\n    w, h = size\n    return x + y * w\n     \ndef to_2D(n, size):\n    w, h = size\n    return (n % w, n // w)", "def to_1D(x, y, size):\n    return size[0] * y + x\n    \ndef to_2D(n, size):\n    return divmod(n, size[0])[::-1]\n", "def to_1D(x, y, size):\n    return y*size[0] + x\n    \ndef to_2D(n, size):\n    return divmod(n, size[0])[::-1]", "to_1D, to_2D = lambda x, y, s: x + y * s[0], lambda n, s: (n%s[0], n//s[0])", "def to_1D(x, y, size):\n    # x is the index of a column and y the index of a row\n    return y*size[0] + x\n    \ndef to_2D(n, size):\n    return (n%size[0], n//size[0])", "def to_1D(x, y, size):\n    return x+y*size[0]\n    \ndef to_2D(n, size):\n    c = 0\n    for i in range(size[1]):\n        for j in range(size[0]):\n            if n == c:\n                return j, i\n            c+=1", "def to_1D(x, y, size):\n    c = 0\n    for i in range(size[1]):\n        for j in range(size[0]):\n            if x ==j and y ==i:\n                return c\n            c+=1\n    \ndef to_2D(n, size):\n    c = 0\n    for i in range(size[1]):\n        for j in range(size[0]):\n            if n == c:\n                return j, i\n            c+=1", "def to_1D(x, y, s):\n    return s[0]*y + x\ndef to_2D(n, s):\n    return (n // s[0], n % s[0])[::-1]", "to_1D = lambda x,y,s: x+y*s[0]\nto_2D = lambda n,s: (n%s[0], n//s[0])"]