["class Solution:\n     def firstUniqChar(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         if not s:\n             return -1\n         elif len(s) == 1:\n             return 0\n \n         result = len(s)\n         for ch in range(ord('a'), ord('z') + 1):\n             if s.find(chr(ch)) == -1:\n                 continue\n             if s.find(chr(ch)) == s.rfind(chr(ch)):\n                 result = min(result, s.find(chr(ch)))\n         return result if result < len(s) else -1", "class Solution:\n     def firstUniqChar(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         \n         letters='abcdefghijklmnopqrstuvwxyz'\n         \n         list = [ l for l in letters if s.count(l) == 1]\n         \n         for i in range(0, len(s)):\n             if s[i] in list:\n                 return i\n             \n         return -1", "class Solution:\n     def firstUniqChar(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         buffer = {}\n         repeated = set()\n         for i in range(len(s)):\n             char = s[i]\n             if char in repeated:\n                 continue\n                 \n             if char in buffer:\n                 del(buffer[char])\n                 repeated.add(char)\n             else:\n                 buffer[char] = i\n         if not buffer:\n             return -1\n         \n         return sorted(list(buffer.items()), key=lambda x:x[1])[0][1]\n", "class Solution:\n     def firstUniqChar(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         \"\"\"\n         #complexity 2*len(s)\n         idx=-1\n         let_dict={}\n         for letter in s:\n             if letter not in let_dict:\n                 let_dict[letter]=1\n             else:\n                 let_dict[letter]+=1\n         \n         for i in range(len(s)):\n             if let_dict[s[i]]==1:\n                 idx=i\n                 break\n         return idx\n         \"\"\"\n         inp_set='abcdefghijklmnoprstuvwxyz'\n         indxs=[s.index(l) for l in inp_set if s.count(l)==1]\n         if len(indxs)==0:\n             return -1\n         else:\n             return min(indxs)", "class Solution:\n     def firstUniqChar(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         wholeletter = 'qwertyuioplkjhgfdsazxcvbnm'\n         newindex = [s.index(x) for x in wholeletter if s.count(x) == 1]\n         return min(newindex) if len(newindex) >0 else -1\n         \n", "class Solution:\n     def firstUniqChar(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         \"\"\"\n         #complexity 2*len(s)\n         idx=-1\n         let_dict={}\n         for letter in s:\n             if letter not in let_dict:\n                 let_dict[letter]=1\n             else:\n                 let_dict[letter]+=1\n         \n         for i in range(len(s)):\n             if let_dict[s[i]]==1:\n                 idx=i\n                 break\n         return idx\n         \"\"\"\n         letters='abcdefghijklmnopqrstuvwxyz'\n         indxs=[s.index(l) for l in letters if s.count(l)==1]\n         if len(indxs)>0:\n             return min(indxs)  \n         else:\n             return -1", "class Solution:\n     def firstUniqChar(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         letters = 'abcdefghijklmnopqrstuvwxyz'\n         res = len(s)\n         for x in letters:\n             lInd = s.find(x)\n             if lInd != -1 and lInd == s.rfind(x) and res > lInd:\n                 res = lInd\n         return -1 if len(s) == res else res", "class Solution:\n     def firstUniqChar(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         letters='abcdefghijklmnopqrstuvwxyz'\n         \n         index =[s.index(l) for l in letters if s.count(l) ==1]\n         return min(index) if len(index) >0 else -1\n         \n         \n         \n         \n", "class Solution:\n     def firstUniqChar(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         letters = \"abcdefghijklmnopqrstuvwxyz\"\n         unique = [s.index(l) for l in letters if s.count(l) == 1]\n         return -1 if len(unique) == 0 else min(unique)\n", "class Solution:\n     def firstUniqChar(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         \"\"\"\n         dict1 = {}\n         dict2 = {}\n         lst = []\n         \n         for i in range(len(s)):\n             dict1[s[i]] = dict1.get(s[i],0) + 1\n             if s[i] not in dict2.keys():\n                 dict2[s[i]] = i\n         \n         for key in dict1.keys():\n             if dict1[key] == 1:\n                 lst.append(dict2[key])\n         \n         lst.sort()\n         if len(lst) > 0:\n             return lst[0]\n         return -1\n         \"\"\"\n         # Don't get count for each word in s. Get the freq for each letters in 26 lower case char instead.\n         letters = 'abcdefghijklmnopqrstuvwxyz'\n         lst = [s.index(l) for l in letters if s.count(l) == 1]\n         if len(lst) > 0:\n             return min(lst)\n         else:\n             return -1", "class Solution:\n     def firstUniqChar(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         # for c in s:         \n         #     if s.count(c)==1:\n         #         return s.find(c)           \n         # return -1\n         \n         letters='abcdefghijklmnopqrstuvwxyz'\n         index=[s.index(l) for l in letters if s.count(l) == 1]\n         return min(index) if len(index) > 0 else -1", "class Solution:\n     def firstUniqChar(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         chars=set(s)\n         return min([s.index(char) for char in chars if s.count(char)==1] or [-1])", "class Solution:\n     def firstUniqChar(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         a = set(s)\n         l = [s.index(i) for i in a if s.count(i) == 1]\n         if len(l) == 0:\n             return(-1)\n         else:\n             return min(l)\n             \n                     \n", "class Solution:\n     def firstUniqChar(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         chars = set(s)\n         index = [s.index(l) for l in chars if s.count(l) == 1]\n         return min(index) if len(index) > 0 else -1", "class Solution:\n     def firstUniqChar(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         s_set = set()\n         for index, char in enumerate(s):\n             if char in s_set:\n                 continue\n             s_set.add(char)\n             if s.count(char) == 1:\n                 return index\n         return -1\n"]