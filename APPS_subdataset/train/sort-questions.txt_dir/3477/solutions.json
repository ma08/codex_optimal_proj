["def sort_string(s, ordering):\n    answer = ''\n    for o in ordering:\n        answer += o * s.count(o)\n        s = s.replace(o,'')\n    return answer + s ", "def sort_string(s, ordering):\n    dct = {c:-i for i,c in enumerate(reversed(ordering))}\n    return ''.join(sorted(s,key=lambda c:dct.get(c,1)))", "sort_string=lambda s,o:''.join(sorted(s,key=lambda x,d={c:i for i,c in reversed(list(enumerate(o)))}:d.get(x,len(o))))", "def sort_string(st, order):\n    return ''.join(sorted(list(st), key=lambda e: list(order).index(e) if e in order else len(order)))", "def sort_string(stg, ordering):\n    return \"\".join(sorted(stg, key=lambda c: ordering.index(c) if c in ordering else float(\"inf\")))", "def sort_string(s, ordering):\n    order = {}\n    for i, c in enumerate(ordering):\n        if c in order:\n            continue\n        order[c] = i\n    return ''.join(sorted(s, key=lambda c: order.get(c, 9999)))", "def sort_string(s, ordering):\n    result = ''\n    for i in ordering:\n        if i in s and i not in result:\n            result += i * s.count(i)\n\n    return result + ''.join([c for c in s if c not in ordering])\n", "def sort_string(s, ordering):\n    result = sorted([c for c in s if c in ordering], key=ordering.find)\n    result.extend([c for c in s if c not in ordering])\n    return ''.join(result)", "def sort_string(a, b):\n    li = list(filter(lambda x:x in b ,a))\n    return ''.join(sorted(li, key=b.index) + [i for i in a if i not in li])", "def sort_string(s, ordering):\n    return \"\".join(sorted([i for i in s if i in ordering], key=lambda x:ordering.index(x)))+\"\".join(sorted([j for j in s if j not in ordering],key=lambda x:s.index(s)))"]