["def update(index, value, bi_tree):\n while index < len(bi_tree):\n  bi_tree[index] += value\n  index += index & -index\n\n\ndef get_sum(index, bi_tree):\n ans = 0\n while index > 0:\n  ans += bi_tree[index]\n  index -= index & -index\n\n return ans\n\n\ndef get_range_sum(left, right, bi_tree):\n ans = get_sum(right, bi_tree) - get_sum(left - 1, bi_tree)\n return ans\n\n\ndef solve(x):\n s = set()\n res = 1\n i = 2\n while (i * i <= x):\n  count = 0\n  while (x % i == 0):\n   x = x // i\n   count += 1\n  if (count % 2):\n   s.add(i)\n  i += 1\n if (x > 0):\n  s.add(x)\n return s\n\n\nn = int(input())\nl = [0] + [int(i) for i in input().split()]\nbit = [[0 for i in range(n + 1)] for i in range(101)]\n\nfor i in range(1, n + 1):\n s = solve(l[i])\n for j in s:\n  update(i, 1, bit[j])\n\nq = int(input())\nfor i in range(q):\n k, a, b = [int(i) for i in input().split()]\n if (k == 1):\n  f = 1\n  for i in range(2, 100):\n   res = get_range_sum(a, b, bit[i])\n   if (res % 2):\n    f = 0\n    break\n  if (f):\n   print(\"YES\")\n  else:\n   print(\"NO\")\n else:\n  s = solve(b)\n  for j in s:\n   update(a, 1, bit[j])"]