["def multiple_of_index(l):\n    return [l[i] for i in range(1, len(l)) if l[i] % i == 0]", "def multiple_of_index(arr):\n    return [val for index, val in enumerate(arr) if index and val % index == 0]\n\n", "def multiple_of_index(arr):\n    return [arr[i] for i in range(1,len(arr)) if arr[i] % i == 0]\n", "def multiple_of_index(arr):\n    i = 1\n    rst = []\n    while i < len(arr):\n        if arr[i] % i == 0:\n            print(i)\n            rst.append(arr[i])\n        i += 1\n    return rst", "def multiple_of_index(arr):\n    return [n for i,n in enumerate(arr[1:], 1) if n%i==0]", "def multiple_of_index(arr):\n    results = []; i = 0\n    for elem in arr:\n        if i > 0 and elem % i == 0:\n            results.append(elem)\n        i += 1\n    return results", "def multiple_of_index(arr):\n    return [e for i,e in enumerate(arr) if i and not e%i]\n", "def multiple_of_index(arr):\n    return [x for y,x in enumerate(arr[1:], 1) if not abs(x)%y]", "def multiple_of_index(arr):\n    new_arr = []\n    \n    for i in range(1, len(arr)):\n        if (arr[i] % i == 0):\n            new_arr.append(arr[i])    \n            \n    return new_arr            \n\n    \n    \n    \n    \n    \n\"\"\"    new_arr = []\n    for i in range(1,len(arr)):\n        if (arr[i] % i == 0):\n            new_arr = \n        i = i + 1\n    return new_arr\n\"\"\"    \n    \n", "def multiple_of_index(arr):\n    return [arr[x] for x in range(1,len(arr)) if x == 0 or arr[x] % x == 0]", "def multiple_of_index(arr):\n    return [x[1] for x in enumerate(arr) if x[0] != 0 and not x[1] % x[0]]", "def multiple_of_index(arr):\n    return [x for i, x in enumerate(arr[1:], 1) if not x % i]", "def multiple_of_index(arr):\n    return [x for i, x in enumerate(arr) if i and x % i == 0]", "def multiple_of_index(arr):\n    return [a for i, a in enumerate(arr) if i > 0 and a % i == 0]", "def multiple_of_index(arr):\n    return [v for i,v in enumerate(arr[1:]) if v%(i+1) == 0]", "def multiple_of_index(arr):\n    return [elt for i, elt in enumerate(arr[1:]) if not elt % (i + 1)]", "def multiple_of_index(arr):\n    vList = []\n    for key, value in enumerate(arr):\n        if key == 0: continue\n        if value % key == 0:\n            vList.append(value)\n\n    return vList", "from typing import List\n\ndef multiple_of_index(arr: List[int]) -> List[int]:\n    \"\"\" Get a new array consisting of elements which are multiple of their own index in input array. \"\"\"\n    return list(dict(filter(lambda _it: _it[0] > 0 and (_it[1] / _it[0]).is_integer(), enumerate(arr))).values())", "def multiple_of_index(arr):\n    return [v for i,v in enumerate(arr) if i > 0 and v % i == 0]", "def multiple_of_index(arr):\n    ar = []\n    for num in range(1,len(arr)):\n        if arr[num]%num==0:\n            ar.append(arr[num])\n    return ar", "def multiple_of_index(arr):\n    res = [arr[i] for i in range(1, len(arr)) if arr[i] % i == 0]\n    return res", "def multiple_of_index(arr):\n    return [x[1] for x in enumerate(arr) if x[0] and not x[1] % x[0]]", "def multiple_of_index(arr):\n    return [i for idx, i in enumerate(arr) if idx and not i % idx]", "def multiple_of_index(a):\n    return[v for i,v in enumerate(a) if i and v%i==0]", "multiple_of_index=lambda a:[n for i,n in enumerate(a)if i>=1>n%i]", "def multiple_of_index(arr):\n    result = list()\n    for i in range(1,len(arr)):\n        if(arr[i]%i == 0):\n            result.append(arr[i])\n    return result", "def multiple_of_index(arr):\n    result =  []\n    n = 0\n    while n < len(arr):\n        if n != 0 and arr[n] % n ==0:\n            result.append(arr[n])\n        n+=1\n         \n    return result", "def multiple_of_index(arr):\n    res = []\n    for c, a in enumerate(arr):\n        # test if value is a multiple of the index\n        if c != 0 and a % c == 0:\n            res.append(a)\n    return res", "def multiple_of_index(arr):\n    oplst = []\n    \n    for i in range(1, len(arr)):\n        if arr[i] % i == 0:\n            oplst.append(arr[i])\n    \n    return oplst", "def multiple_of_index(arr):\n    arr.pop(0)\n    return list(b for a,b in list(enumerate(arr,start=1)) if b%a==0)\n", "def multiple_of_index(arr):\n    nArr=[]\n    for i in range(1,len(arr)):\n        if arr[i]%i==0: nArr.append(arr[i])\n    return nArr", "def multiple_of_index(arr):\n    new = []\n    i = 1\n    while i < len(arr):\n        if arr[i] % i == 0:\n            new.append(arr[i])\n        i += 1\n    \n    return new", "def multiple_of_index(arr):\n    res = []\n    for i in range(1, len(arr), 1):\n        if arr[i] % i == 0:\n            res.append(arr[i])\n    return res", "def multiple_of_index(arr):\n    output = []\n    count = 0\n    for num in arr:\n        if count != 0:\n            if not num % count:\n                output.append(num)\n        count += 1\n    return output", "def multiple_of_index(arr):\n    res = []\n    for x in range(len(arr)):\n        if((x != 0) and ((arr[x] % x) == 0)):\n            res.append(arr[x])\n    return res", "def multiple_of_index(arr):\n    print(arr)\n    res = []\n    for x in range(len(arr)):\n        if((x != 0) and ((arr[x] % x) == 0)):\n            res.append(arr[x])\n    return res", "def multiple_of_index(arr):\n    output = []\n    for index_, value in enumerate(arr):\n        try: \n            if value % index_ == 0:\n                output.append(value)\n        except ZeroDivisionError:\n            continue\n    return output", "def multiple_of_index(arr):\n    new_arr = []\n    i = 1\n    for x in arr[1:]:\n        if x % i == 0:\n            new_arr.append(x)\n        i += 1\n    return new_arr", "def multiple_of_index(arr):\n    return [v for k, v in enumerate(arr) if k > 0 and not(v % k)]\n", "def multiple_of_index(arr):\n    lst = []\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] == 0:\n                lst.append(arr[i])\n        elif arr[i]%i == 0:\n            lst.append(arr[i])\n                \n    return lst\n", "multiple_of_index = lambda a:[n for i, n in enumerate(a) if i and not n%i]", "def multiple_of_index(arr):\n    mult = []\n    for i in range(1, len(arr)):\n        if arr[i]%i == 0:\n            mult.append(arr[i])\n    return mult", "def multiple_of_index(arr):\n    res = []\n    for i in range (len(arr)):\n        if i > 0 and arr[i] % i == 0:\n            res.append(arr[i])\n    return res", "def multiple_of_index(arr):\n    return [i for num, i in enumerate(arr[1:],1) if i % num == 0]\n", "def multiple_of_index(arr):\n    return [arr[el] for el in range(1, len(arr)) if arr[el] % el == 0]\n", "def multiple_of_index(arr):\n    return list(arr[i] for i in range(1, len(arr)) if arr[i] % i == 0)", "def multiple_of_index(arr):\n    l = []\n    for i, v in enumerate(arr):\n        if i > 0 and v % i == 0:\n            l.append(v)\n    return l\n", "def multiple_of_index(arr):\n    l = []\n    for i in range(len(arr)):\n        if i == 0:\n            continue\n        elif arr[i]%i==0:\n            l.append(arr[i])\n    return l", "def multiple_of_index(arr):\n    lst = []\n    for i, elem in enumerate(arr):\n        try:\n            if elem % int(i) == 0:\n                lst.append(elem)\n        except ZeroDivisionError:\n            pass\n    return(lst)", "def multiple_of_index(arr):\n    result_arr = []\n    for i in range(1, len(arr)):\n        if arr[i] % i == 0:\n            result_arr.append(arr[i])\n    return result_arr", "def multiple_of_index(arr):\n    temp=[]\n    for n in range(1, len(arr)):\n        if arr[n] % n == 0:\n            temp.append(arr[n])\n    return temp", "def multiple_of_index(arr):\n    return [y for x,y in enumerate(arr[1:], start=1) if y % x == 0]", "def multiple_of_index(arr):\n    new = []\n    x = 1\n    for i in arr[1:]:\n        if i % x == 0:\n            new.append(i)\n        x += 1\n            \n    return new", "def multiple_of_index(arr):\n    res = []\n    \n    if arr[0] == 0: res.append(0)\n        \n    for i in range(1, len(arr)):\n        try:\n            if arr[i] % i == 0:\n                res.append(arr[i])\n        except:\n            res.append(0)\n            \n    return res", "def multiple_of_index(arr):\n    bigboy = []\n    index = 1\n    for x in arr[1:]:\n        if x%index == 0:\n            bigboy.append(x)\n        index += 1\n    return bigboy", "def multiple_of_index(arr):\n    result = []\n    for i in range(1, len(arr)):\n        if arr[i] % i == 0:\n            result.append(arr[i])\n        else:\n            pass\n    return result", "def multiple_of_index(arr):\n    result = []\n    \n    for i in range(1, len(arr)):\n        if not arr[i] % i:\n            result.append(arr[i])\n            \n    return result", "def multiple_of_index(arr):\n    return [k for i, k in enumerate(arr[1:]) if not k % (i + 1)]", "def multiple_of_index(arr):\n    result = []\n    for i in range(len(arr)):\n        if i!=0:\n            if arr[i]%i==0:\n                result.append(arr[i])\n    return result", "def multiple_of_index(arr):\n    return [b for a, b in enumerate(arr[1:], 1) if b % a == 0]", "def multiple_of_index(arr):\n    new_arr = []\n    for i in range(len(arr)):\n        if i == 0:\n            continue\n        elif arr[i]%i==0:\n            new_arr.append(arr[i])\n    return new_arr", "def multiple_of_index(arr):\n    return [arr[i] for i in range(0 if arr[0]==0 else 1,len(arr)) if arr[i]%i==0]", "def multiple_of_index(arr):\n    answer = []\n    for i, a in enumerate(arr):\n        if i!=0 and a%i==0:\n            answer.append(a)\n    return answer", "def multiple_of_index(arr):\n    matches = []\n    index = 1\n    for value in arr[1:]:\n        if value % index == 0:\n            matches.append(value)\n        index += 1\n    return matches", "def multiple_of_index(arr):\n    return [x for x in [arr[i] if arr[i]%i == 0 else None for i in range(1, len(arr))] if x is not None]", "def multiple_of_index(arr):\n    return [i for loop, i in enumerate(arr[1:]) if i % (loop + 1) == 0]", "def multiple_of_index(arr: list) -> list:\n    return [\n        val\n        for idx, val in enumerate(arr)\n        if len(arr) > 1 and idx != 0\n        if val % idx == 0\n    ]", "def multiple_of_index(arr):\n    return [i for j,i in enumerate(arr) if j != 0 and i%j == 0]", "def multiple_of_index(arr):\n    ll = list()\n    for i in range(1, len(arr)):\n        if arr[i] % i == 0:\n            ll.append(arr[i])\n    return ll", "def multiple_of_index(a):\n    l= []\n    for i, v in enumerate(a):\n        if i >= 1 and v%i == 0:\n            l.append(v)\n    return l\n", "def multiple_of_index(arr):\n    x = []\n    for idx, n in enumerate(arr):\n        if idx >= 1 and n % idx == 0:\n            x.append(n)\n    return x", "def multiple_of_index(arr):\n    returnArr = []\n    for i in range(1,len(arr)): \n        if arr[i] % i == 0: \n            returnArr.append(arr[i])\n    return returnArr", "def multiple_of_index(xs):\n    return [i for idx, i in enumerate(xs[1:]) if i % (idx+1) == 0]", "# Return a new array consisting of elements \n# which are multiple of their own index in input array (length > 1).\n\n# Some cases:\n\n# [22, -6, 32, 82, 9, 25] =>  [-6, 32, 25]\n\n# [68, -1, 1, -7, 10, 10] => [-1, 10]\n\ndef multiple_of_index(arr):\n    b=[]\n    for i in range(1, len(arr)):\n        if arr[i]%i == 0:\n            b.append(arr[i])\n    return b\n                   \n", "def multiple_of_index(arr):\n    return [x for index, x in enumerate(arr) if index != 0 and x % index == 0]", "def multiple_of_index(arr):\n    newA = []\n    for i in range(1,len(arr)):\n         if arr[i]%i==0:\n                newA.append(arr[i]) \n    return newA", "def multiple_of_index(arr):\n    multiple_list = []\n    for i in range(1,len(arr)):\n        if arr[i] % i == 0:\n            multiple_list.append(arr[i])\n    return multiple_list", "def multiple_of_index(arr):\n    \"\"\"\n        Returns a list of elements which are multiple of their own index in 'arr'.\n    \"\"\"\n    return [element for index, element in enumerate(arr[1:], 1) if not element % index]", "def multiple_of_index(arr):\n    return [i[1] for i in zip(list(range(1, len(arr))), arr[1:]) if i is 0 or i[1]%i[0]==0]\n", "def multiple_of_index(arr):\n    return [case for i, case in enumerate(arr) if i > 0 and case % i == 0]", "def multiple_of_index(arr):\n    index = 1\n    res = []\n    while index < len(arr):\n        if arr[index] % index == 0:\n            res.append(arr[index])\n        index += 1\n    return res", "def multiple_of_index(arr):\n    print(arr)\n    return [arr[i] for i in range(1, len(arr)) if not arr[i] % i ]", "def multiple_of_index(arr):\n    arr2=[]\n    for i in range(len(arr)):\n        if i>0 and arr[i]%i==0:\n            arr2.append(arr[i])\n    return arr2\n    pass", "def multiple_of_index(arr):\n    num = 1\n    ret = []\n    for i in arr[1:]:\n        if i % num == 0:\n            ret.append(i)\n        num = num + 1\n    return ret", "def multiple_of_index(arr):\n    ret = []\n    for val in range(1,len(arr)):\n        if arr[val] % (val) == 0:\n            ret.append(arr[val])\n    return ret\n", "def multiple_of_index(arr):\n    ret = []\n    for val in range(len(arr)-1):\n        if arr[val+1] % (val+1) == 0:\n            ret.append(arr[val+1])\n    return ret\n", "def multiple_of_index(arr):\n    return [arr for ind,arr in enumerate(arr) if (ind > 0) and (arr % ind == 0)]", "def multiple_of_index(arr):\n    result = []\n    for i, j in enumerate(arr):\n        try:\n            if j % i == 0:\n                result.append(j)\n        except:\n            continue\n    return result", "def multiple_of_index(arr):\n    n_arr = []\n    a1 = tuple(arr)\n    n = 0\n    m = 0\n    for i in range(len(a1)):\n        n = i\n        m = a1[i]\n        if n == 0:\n                continue\n        elif m % n == 0:\n            n_arr.append(m)\n            \n    return n_arr", "def multiple_of_index(arr):\n    new_list = []\n    for i in range(1,len(arr)):\n        if(not arr[i]%i): new_list.append(arr[i])\n    return new_list\n", "def multiple_of_index(arr):\n    new_array = []\n    counter = 0\n    for i in arr:\n        if counter != 0:           \n            if i % counter == 0:\n                new_array.append(i)            \n        counter += 1\n    return(new_array)", "def multiple_of_index(arr):\n    a=[]\n    for i,elem in enumerate(arr):\n        if i!=0 and elem%i==0:\n            a.append(elem)\n    return a", "def multiple_of_index(arr):\n    listofmultiples = []\n    index = 0\n    for eachnumber in arr:\n        if index == 0:\n            index = index + 1\n        elif eachnumber % index == 0:\n            listofmultiples.append(eachnumber)\n            index = index + 1\n        else:\n            index = index + 1\n    return listofmultiples\n", "def multiple_of_index(arr):\n    array=[]\n    for x in range(1,len(arr),1):\n        if arr[x] % x ==0:\n            array.append(arr[x])\n    return array", "def multiple_of_index(arr):\n    lst = []\n    for keys, values in enumerate(arr):\n        if keys >= 1 and values % keys == 0:\n            lst.append(values)\n    return lst", "def multiple_of_index(arr):\n    my_list = []\n    array = arr[1:]\n    for i,x in enumerate(array,1):\n        if x % i == 0:\n            my_list.append(x)\n    return my_list\n", "def multiple_of_index(arr):\n    ar = []\n    for i in range(1,len(arr)):\n        if arr[i] % i == 0:\n            ar.append(arr[i])\n    return ar        ", "def multiple_of_index(arr):\n    res = []\n    for idx, elem in enumerate(arr):\n        if idx != 0:\n            if elem % idx == 0:\n                res.append(elem)\n    return res", "def multiple_of_index(arr):\n    ls=[]\n    for i in range(len(arr)):\n        if i==0:\n            continue\n        if arr[i]%i==0:\n            ls.append(arr[i])\n    return ls", "def multiple_of_index(arr):\n    l = list()\n    for i in range(len(arr)):\n        print(arr[i],i)\n        if i == 0 and arr[i] == 0:\n            l.append(i)\n        elif i == 0:\n            continue\n        if arr[i] % i == 0 :\n            l.append(arr[i])\n    print(l)\n    return l"]