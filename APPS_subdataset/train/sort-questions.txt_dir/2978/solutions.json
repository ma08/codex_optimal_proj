["from collections import defaultdict, Counter\n\n\ndef count_sel(nums):\n    cnt = Counter(nums)\n    d = defaultdict(list)\n    total = 0\n    unique = 0\n    for k, v in cnt.items():\n        d[v].append(k)\n        total += v\n        unique += 1\n    maximum = max(d)\n    return [total, unique, len(d[1]), [sorted(d[maximum]), maximum]]\n", "def count_sel(lst):\n    occ = lst.count(sorted(lst, key=lambda x: lst.count(x), reverse=True)[0])\n    return [len(lst), len(set(lst)), len([x for x in lst if lst.count(x) == 1]), [sorted(set(x for x in lst if lst.count(x) == occ)), occ]]\n", "from collections import Counter\n\n\ndef count_sel(lst):\n    c = Counter(lst)\n    m = max(c.values())\n    return [\n        len(lst),\n        len(c),\n        sum(x == 1 for x in c.values()),\n        [sorted(k for k, v in c.items() if v == m), m,],\n    ]", "def count_sel(lst):\n    dic = {}\n    result = []\n    arr_temp = []\n    for elm in lst:\n        if elm not in dic:\n            dic[elm] = 1\n        else:\n            dic[elm] += 1\n    result.append(len(lst))\n    result.append(len(dic.keys()))\n    result.append(list(dic.values()).count(1))\n    for elm, occurrence in dic.items():\n        if occurrence == max(dic.values()):\n            arr_temp.append(elm)\n    result.append([sorted(arr_temp), max(dic.values())])\n    return result", "def count_sel(lst):\n    r = [len(lst),len(set(lst)),sum(lst.count(i)==1 for i in set(lst))]\n    rm = max(lst.count(i) for i in set(lst))\n    rv = sorted(i for i in set(lst) if lst.count(i)==rm)    \n    r.append([rv,rm])\n    return r", "from collections import Counter\n\ndef count_sel(lst):\n    freq = Counter(lst)\n    return [len(lst),len(set(lst)),len([x for x in lst if lst.count(x) == 1]),[sorted(k for k,v in list(freq.items()) if v == freq[max(freq, key=freq.get)]), freq[max(freq, key=freq.get)]]]\n", "from collections import Counter, defaultdict\n\ndef count_sel(lst):\n    c    = Counter(lst)\n    freq = defaultdict(list)\n    for n,v in c.items(): freq[v].append(n)\n    maxF,fLst = max(freq.items(), default=(0,[]))\n    \n    return [len(lst),\n            len(c),\n            len(freq[1]),\n            [ sorted(fLst),\n              maxF] ]", "import collections\n\ndef count_sel(lst):\n    counter = collections.Counter(lst)\n    mode_count = counter.most_common(1)[0][1] if lst else 0\n    return [len(lst),\n            len(counter),\n            sum(v == 1 for v in counter.values()),\n            [sorted(k for k, v in counter.items() if v == mode_count), mode_count]]", "from collections import Counter\ndef count_sel(lst):\n    one = sum(float(i).is_integer() for i in lst)\n    two = len(set(lst))\n    three = sum(lst.count(i)==1 for i in lst)\n    four = [i for i in Counter(lst).most_common()]\n    k = max(i[1] for i in four)\n    four = sorted(i[0] for i in four if i[1]==k)\n    five = lst.count(four[0])\n    return [one, two, three, [four, five]]", "from collections import Counter\n\ndef count_sel(lst):\n    c = Counter(lst)\n    length = len(lst)\n    unique = len(c)\n    once = sum(1 for elem, cnt in c.items() if cnt == 1)\n    max_occur = max(c.values())\n    most = sorted(elem for elem, cnt in c.items() if cnt == max_occur)\n    \n    return [length, unique, once, [most, max_occur]]"]