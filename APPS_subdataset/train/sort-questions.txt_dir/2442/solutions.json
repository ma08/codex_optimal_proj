["class Solution:\n    def sortString(self, s: str) -> str:\n        sforward = sorted(s)\n        sbackward = sforward[-1]\n        \n        suniq = ''\n        \n        for i in s:\n            if i not in suniq:\n                suniq += i\n\n        suniq = sorted(suniq)\n        \n        max_count = 0\n        \n        for i in suniq:\n            if s.count(i) > max_count:\n                max_count = s.count(i)\n        \n        \n        chr_count = [0 for i in range(len(suniq))]\n           \n        \n\n        s_sort = ''\n        \n        for j in range(max_count):\n            \n            \n            for i in range(len(suniq)):\n                if chr_count[i] < s.count(suniq[i]):\n                    s_sort += suniq[i]\n                    chr_count[i] += 1\n                else:\n                    continue\n                    \n            suniq = suniq[::-1]\n            chr_count = chr_count[::-1]\n            \n        \n        return s_sort        \n            \n", "from collections import OrderedDict\nclass Solution:\n    def sortString(self, s: str) -> str:\n        \n        s1 = OrderedDict()\n        \n        for i in s:\n            \n            if i in s1:\n                s1[i] += 1\n            else:\n                s1[i] = 1\n                \n                \n        reverse = 0\n        t = []\n        s1 = OrderedDict(sorted(s1.items()))\n        print(s1)\n        while(True):\n            p = []\n            for key,value in list(s1.items()):\n                if value > 0:\n                    s1[key] = value - 1\n                    p.append(key)\n            \n            if p == []:\n                break\n            if reverse == 1:\n                t += p[::-1]\n            else:\n                t += p\n            reverse = 1 - reverse\n            print(t)\n        return (''.join(t))\n", "class Solution:\n    def sortString(self, s: str) -> str:\n        output = []\n        total = sorted(list(s))\n        direction = 1\n        while(len(total) > 0):\n            if(direction == 1):\n                selection = sorted(set(total))\n            else:\n                selection = sorted(set(total), reverse=True)\n            direction *= -1\n            output = output + list(selection)\n            for char in selection:\n                total.remove(char)\n        return ''.join(output)\n        \n        \n        \n        \n", "\nclass Solution:\n    def sortString(self, s: str) -> str:\n        s = sorted(s)\n        ans  = []\n        while s:\n            for i in sorted(list(set(s))):\n                ans.append(s.pop(s.index(i)))\n            \n            for i in sorted(set(s),reverse=True):\n                ans.append(s.pop(s.index(i)))\n            \n        \n        return ''.join(ans)", "\nclass Solution:\n    def sortString(self, s: str) -> str:\n        s = sorted(s)\n        ans  = []\n        while s:\n            for i in sorted(set(s)):\n                ans.append(s.pop(s.index(i)))\n            \n            for i in sorted(set(s),reverse=True):\n                ans.append(s.pop(s.index(i)))\n            \n        \n        return ''.join(ans)", "class Solution:\n    def sortString(self, s: str) -> str:\n        from collections import Counter\n        d=Counter(s)\n        asc=True\n        ans=''\n        while d:\n            for i in sorted(d) if asc else sorted(d,reverse=True):\n                ans+=i\n                d[i]-=1\n                if d[i]==0:\n                    del d[i]\n            asc^=True\n        return ans", "class Solution:\n    collections.OrderedDict\n    def sortString(self, s: str) -> str:\n        list_s = list(s)\n        list_s.sort()\n        dict_s = {}\n        for i in range(len(list_s)):\n            if list_s[i] not in dict_s:\n                dict_s[list_s[i]] = 1\n            else:\n                dict_s[list_s[i]] += 1\n        result = []\n        while dict_s != {}:\n            i = 0\n            while dict_s != {} and i < len(dict_s):\n                result.append(list(dict_s)[i])\n                if dict_s[list(dict_s)[i]] - 1 == 0:\n                    del dict_s[list(dict_s)[i]]\n                else:\n                    dict_s[list(dict_s)[i]] -= 1\n                    i += 1\n            i = len(dict_s) - 1\n            while dict_s != {} and i >= 0:\n                result.append(list(dict_s)[i])\n                if dict_s[list(dict_s)[i]] - 1 == 0:\n                    del dict_s[list(dict_s)[i]]\n                else:\n                    dict_s[list(dict_s)[i]] -= 1\n                i -= 1\n        return ''.join(result)\n        \n        \n", "class Solution:\n    def sortString(self, s: str) -> str:\n        output = []\n        temp = sorted(list(s))\n\n        while len(temp)>0:\n            output.append(temp[0])\n            temp.remove(temp[0])\n            for e in temp:\n                if e>output[-1]:\n                    output.append(e)\n                    temp[temp.index(e)] = ''\n            temp = [e for e in temp if e]\n\n            if len(temp)==0:\n                break\n\n            output.append(temp[-1])\n            temp.remove(temp[-1])\n            for i in range(len(temp)-1,0,-1):\n                if temp[i]<output[-1]:\n                    output.append(temp[i])\n                    temp[i] = ''\n            temp = [e for e in temp if e]\n\n        return ''.join(output)", "from collections import Counter\nclass Solution:\n    def sortString(self, s: str) -> str:\n        result = []\n        s = sorted(s)\n        counter = Counter(s)\n         \n        while s:\n            for x in sorted(set(s)):\n                s.remove(x)\n                result.append(x)\n            for x in sorted(set(s), reverse=True):\n                s.remove(x)\n                result.append(x)\n        return ('').join(result)", "class Solution:\n    def sortString(self, s: str) -> str:\n        res = ''\n        s = list(s)\n        s.sort()\n        while s:\n            i = 0\n            curr = []\n            while i < len(s):\n                if s[i] not in curr:\n                    curr.append(s.pop(i))\n                else:\n                    i += 1\n            res += ''.join(curr)\n            \n            j = len(s)-1\n            curr = []\n            while j >= 0:\n                if s[j] not in curr:\n                    curr.append(s.pop(j))\n                j -= 1\n            res += ''.join(curr)\n        return res", "class Solution:\n    def sortString(self, s: str) -> str:\n        l=list(s)\n        ope=list(s)\n        s=''\n        while(ope):\n            temp=[]\n            i=0\n            temp2=list(set(ope))\n            print('ji')\n            while(ope and (ope) and temp2):\n                n=min(temp2)\n            \n                if n not in temp:\n                    temp.append(n)\n                    ope.remove(n)\n                    temp2.remove(n)\n                print(temp)\n                print((i,len(ope)))\n                print(temp2)\n                \n                    \n                i+=1\n            s+=''.join(temp)\n            temp=[]\n            i=0\n            temp2=list(set(ope))\n            while( ope and len(ope) and temp2):\n                n=max(temp2)\n                if n not in temp:\n                    temp.append(n)\n                    ope.remove(n)\n                    temp2.remove(n)\n                i+=1\n            s+=''.join(temp)\n            \n            \n        return s\n                \n                \n                \n", "class Solution:\n    def sortString(self, s: str) -> str:\n        from collections import Counter\n        counts, res, asc = Counter(s), [], True\n        letters = sorted(set(s))\n        while len(res) < len(s):\n            for i in range(len(letters)):\n                ch = letters[i if asc else ~i]\n                if counts[ch] > 0:\n                    res.append(ch)\n                    counts[ch] -= 1\n            asc = not asc\n        return ''.join(res)", "class Solution:\n    def sortString(self, s: str) -> str:\n        d = {}\n        for c in s:\n            if c not in d:\n                d[c] = 1\n            else:\n                d[c] += 1\n        self.d = d\n        self.re = ''\n        \n        print((self.d))\n        while True:\n            if self.d == {}:break\n            smallest = min(self.d)\n            \n            if smallest:\n                self.re += smallest\n                if self.d[smallest] == 1: del self.d[smallest]\n                else: self.d[smallest] -= 1\n            else:\n                break\n            \n            while True:\n                nexts = None\n                for key in self.d:\n                    if key > smallest:\n                        if nexts is None:   nexts = key\n                        else:\n                            nexts = min(key, nexts)\n                if nexts:\n                    if self.d[nexts] == 1: del self.d[nexts]\n                    else: self.d[nexts] -= 1\n                    self.re += nexts\n                else:\n                    break\n                smallest = nexts\n                \n            if self.d == {}:break\n\n            biggest = max(self.d)\n            \n            if biggest:\n                self.re += biggest\n                if self.d[biggest] == 1: del self.d[biggest]\n                else: self.d[biggest] -= 1\n            else:\n                break\n            \n            while True:\n                nexts = None\n                for key in self.d:\n                    if key < biggest:\n                        if nexts is None:   nexts = key\n                        else:\n                            nexts = max(key, nexts)\n                if nexts:\n                    if self.d[nexts] == 1: del self.d[nexts]\n                    else: self.d[nexts] -= 1 \n                    self.re += nexts\n                else:\n                    break\n                biggest = nexts\n                \n        print((self.d))\n        return self.re\n            \n            \n", "class Solution:\n    def sortString(self, s: str) -> str:\n        new_list = []\n        temp_list = list(s)\n\n        while len(temp_list) > 0:\n\n            if len(temp_list) == 0:\n                break\n            else:    \n                slist = sorted(temp_list)\n                temp_list = []\n                new_list.append(slist.pop(0))\n                for i in slist:\n                    if ord(i) == ord(new_list[-1]):\n                        temp_list.append(i) \n                    if ord(i) > ord(new_list[-1]):\n                        new_list.append(i)\n        \n            \n            if len(temp_list) == 0:\n                break\n            else:    \n                slist = sorted(temp_list, reverse = True)\n                temp_list = []\n                new_list.append(slist.pop(0))\n                for i in slist:\n                    if ord(i) == ord(new_list[-1]):\n                        temp_list.append(i) \n                    if ord(i) < ord(new_list[-1]):\n                        new_list.append(i)\n                        \n        return ''.join(new_list)", "class Solution:\n    def sortString(self, s: str) -> str:\n        x=sorted(s)\n        res=''\n        r=0\n        while len(x)>0:\n            if r==0:\n                res+=x[0]\n                x.remove(x[0])\n                i=0\n                while i<len(x):\n                    if x[i]>res[-1]:\n                        res+=x[i]\n                        x.remove(x[i])\n                    else:\n                        i+=1\n                x=x[::-1]\n                r=1\n            elif r==1:\n                res+=x[0]\n                x.remove(x[0])\n                i=0\n                while i<len(x):\n                    if x[i]<res[-1]:\n                        res+=x[i]\n                        x.remove(x[i])\n                    else:\n                        i+=1\n                x=x[::-1]\n                r=0               \n        return res\n                \n", "class Solution:\n    def sortString(self, s: str) -> str:\n\n        ss = sorted(list(dict.fromkeys(s)))\n        ssr = ss+ss[::-1]\n        dic ={}\n        final_s =''\n        for i in ss:\n            dic[i] = 0\n        for i in s:\n            dic[i]+=1\n        for i in range(len(s)):\n\n            for j in ssr:\n                if dic[j]>0:\n                    final_s+=j\n                    dic[j]-=1\n     #       for x in ssr:\n     #           if dic[x]>0:\n      #              final_s+=x\n     #               dic[x]-=1\n        return final_s\n                    \n                \n              \n", "class Solution:\n    def sortString(self, s: str) -> str:\n\n        ss = sorted(list(dict.fromkeys(s)))\n        ssr = ss[::-1]\n        dic ={}\n        final_s =''\n        for i in ss:\n            dic[i] = 0\n        for i in s:\n            dic[i]+=1\n        for i in range(len(s)):\n\n            for j in ss:\n                if dic[j]>0:\n                    final_s+=j\n                    dic[j]-=1\n            for x in ssr:\n                if dic[x]>0:\n                    final_s+=x\n                    dic[x]-=1\n        return final_s\n                    \n                \n              \n", "class Solution:\n    def sortString(self, s: str) -> str:\n        output = []\n        temp = list(s)\n\n        while len(temp)>0:\n            temp.sort()\n            output.append(temp[0])\n            temp.remove(temp[0])\n            for e in temp:\n                if e>output[-1]:\n                    output.append(e)\n                    temp[temp.index(e)] = ''\n            temp = [e for e in temp if e]\n\n            if len(temp)==0:\n                break\n            temp.reverse()\n            output.append(temp[0])\n            temp.remove(temp[0])\n            for e in temp:\n                if e<output[-1]:\n                    output.append(e)\n                    temp[temp.index(e)] = ''\n            temp = [e for e in temp if e]\n\n            print(output)\n\n        return ''.join(output)", "class Solution:\n    def sortString(self, s: str) -> str:\n        output = []\n        temp = list(s)\n        dump = []\n\n        while len(temp)>0:\n            temp.sort()\n            output.append(temp[0])\n            temp.remove(temp[0])\n            for e in temp:\n                if e>output[-1]:\n                    output.append(e)\n                    temp[temp.index(e)] = ''\n            temp = [e for e in temp if e]\n\n            if len(temp)==0:\n                break\n            temp.reverse()\n            output.append(temp[0])\n            temp.remove(temp[0])\n            for e in temp:\n                if e<output[-1]:\n                    output.append(e)\n                    temp[temp.index(e)] = ''\n            temp = [e for e in temp if e]\n\n            print(output)\n\n        return ''.join(output)", "class Solution:\n    def sortString(self, s: str) -> str:\n        from collections import Counter\n        counts = Counter(s)\n        characters = sorted(set(s))\n        ch_len = len(characters)\n        total = 0\n        res = ''\n        while total < len(s):\n            for i in range(ch_len):\n                ch = characters[i]\n                if counts[ch] > 0:\n                    res += ch\n                    total += 1\n                    counts[ch] -= 1\n            for i in range(ch_len)[::-1]:\n                ch = characters[i]\n                if counts[ch] > 0:\n                    res += ch\n                    total += 1\n                    counts[ch] -= 1\n        return res\n       \n", "class Solution:\n    def sortString(self, s: str) -> str:\n        s = list(s)\n        ans = ''\n        while s:\n            for c in sorted(set(s)):\n                ans += c\n                s.remove(c)\n            for c in sorted(set(s), reverse = True):\n                ans += c\n                s.remove(c)\n        return ans\n", "class Solution:\n    def sortString(self, s: str) -> str:\n        from collections import Counter\n        counts, res, asc = Counter(s), [], True\n        letters = sorted(set(s))\n        while len(res) < len(s):\n            for i in range(len(letters)):\n                ch = letters[i if asc else ~i]\n                if counts[ch] > 0:\n                    res.append(ch)\n                    counts[ch] -= 1\n            asc = not asc\n        return ''.join(res)\n", "class Solution:\n    def sortString(self, s: str) -> str:\n        c = collections.Counter(''.join(sorted(s)))\n        a = ''\n        while c:\n            stack = []\n            for i in c.keys():\n                if c[i] > 0:\n                    a = a+i[0]\n                    c[i] -= 1\n                if c[i] > 0:\n                    stack.append(i)\n            while stack:\n                j = stack.pop()\n                a = a+j[0]\n                c[j] -= 1\n            c += Counter() # erases all counts of 0\n        return a"]