["n = int(input())\nfrom bisect import bisect_left\n\n\na = list(map(int, input().split()))\nss = []\nms = []\nfor i in range(n):\n    k = a[i]\n    ind = bisect_left(ms, -k)\n    if ind == len(ms):\n        ss.append([])\n        ms.append(0)\n    ss[ind].append(k)\n    ms[ind] = -k\n\nfor s in ss:\n    print(' '.join([str(i) for i in s]))", "n = int(input())\n\na = []\narr = list(map(int, input().split()))\n\nfor i in range(n):\n    if len(a) == 0:\n        a.append([arr[i]])\n        continue\n    el = arr[i]\n    l, r = 0, len(a) - 1\n    while r - l >= 1:\n        m = (l + r) // 2\n        if el > a[m][-1]:\n            r = m\n        else:\n            l = m + 1\n    if el < a[l][-1]:\n        a.append([el])\n    else:\n        a[l].append(el)\n\nfor x in a:\n    for el in x:\n        print(el, end=' ')\n    print()", "ans = []\nn = int(input())\narr = list(map(int,input().split()))\nfor x in arr:\n    lo,hi = 0,len(ans)\n    while(lo < hi):\n        mid = (lo+hi)//2\n        if(ans[mid][-1] < x):\n            hi = mid\n        else:\n            lo = mid+1\n    if(lo == len(ans)):\n        ans.append([x])\n    else:\n        ans[lo].append(x)\nfor line in ans:\n    print(' '.join([str(i) for i in line]))\n", "n = int(input())\nfrom bisect import bisect_left\n\n\na = list(map(int, input().split()))\nss = []\nms = []\nfor i in range(n):\n    k = a[i]\n    ind = bisect_left(ms, -k)\n    if ind == len(ms):\n        ss.append([])\n        ms.append(0)\n    ss[ind].append(k)\n    ms[ind] = -k\n\nfor s in ss:\n    print(' '.join([str(i) for i in s]))\n", "n = int(input())\n\nfrom bisect import bisect_left\n\n\n\n\n\na = list(map(int, input().split()))\n\nss = []\n\nms = []\n\nfor i in range(n):\n\n    k = a[i]\n\n    ind = bisect_left(ms, -k)\n\n    if ind == len(ms):\n\n        ss.append([])\n\n        ms.append(0)\n\n    ss[ind].append(k)\n\n    ms[ind] = -k\n\n\n\nfor s in ss:\n\n    print(' '.join([str(i) for i in s]))\n\n\n\n# Made By Mostafa_Khaled\n", "n = int(input())\nlst = list(map(int, input().strip().split()))\n\nans = [[lst[0]],]\nhead = [lst[0]]\n\nadded = False\nfor i in range(1, n):\n    t = lst[i]\n    if (head[len(head)-1]) > t:\n        ans.append([t])\n        head.append(t)\n    else:\n        l, r = 0, len(head)-1\n        while r-l > 1:\n            mm = l + int((r-l)/2)\n            if head[mm] < t:\n                r = mm\n            else:\n                l = mm\n        if head[l] < t:\n            ans[l].append(t)\n            head[l] = t\n        else:\n            ans[r].append(t)\n            head[r] = t\n\nfor ls in ans:\n    print(' ' .join(str(x) for x in ls))", "from bisect import bisect_left\nn = int(input())\na = list(map(int, input().split()))\n\np = []\nresult = []\nfor x in a:\n    r = bisect_left(p, -x)\n    if r == len(result):\n        result.append([])\n        p.append(0)\n\n    result[r].append(x)\n    p[r] = -x\n\nfor arr in result:\n    for i in range(len(arr)-1):\n        print(arr[i], end=\" \")\n    print(arr[-1])", "from sys import stdin\nfrom collections import deque\nfrom bisect import bisect_right  as br\nn=int(stdin.readline().strip())\ns=list(map(int,stdin.readline().strip().split()))\narr=deque([s[0]])\nans=deque([[s[0]]])\nfor i in range(1,n):\n    x=br(arr,s[i])\n    if x==0:\n        arr.appendleft(s[i])\n        ans.appendleft([s[i]])\n    else:\n        arr[x-1]=s[i]\n        ans[x-1].append(s[i])\nans.reverse()\nfor i in ans:\n    print(*i)\n    \n", "n=int(input())\narr=list(map(int,input().split()))\nans=[0]*1\nans[0]=[]\nans[0].append(arr[0])\nfor i in range(1,n,1):\n\tlo,hi=0,len(ans)\n\tidx=-1\n\twhile(lo<=hi):\n\t\tmid=(lo+hi)//2\n\t\t#print(lo,hi,i)\n\t\tif lo!=len(ans) and ans[mid][len(ans[mid])-1]<arr[i]:\n\t\t\tidx=mid\n\t\t\thi=mid-1\n\t\telse:\n\t\t\tlo=mid+1\n\tif len(ans)==hi:\n\t\tans.append([])\n\t\tans[hi].append(arr[i])\n\telse:\n\t\tans[idx].append(arr[i])\nfor i in range(len(ans)):\n\tfor j in range(len(ans[i])):\n\t\tprint(ans[i][j],end=\" \")\n\tprint()\n", "class CodeforcesTask847BSolution:\n    def __init__(self):\n        self.result = ''\n        self.n = 0\n        self.sequence = []\n\n    def read_input(self):\n        self.n = int(input())\n        self.sequence = [int(x) for x in input().split(\" \")]\n\n    def process_task(self):\n        mx = 2000001\n        ans = [[] for x in range(mx)]\n        crf = [0] * mx\n        cnt = 0\n        id = 0\n        for x in range(self.n):\n            if not x:\n                ans[cnt].append(self.sequence[x])\n                crf[cnt] = self.sequence[x]\n            else:\n                if self.sequence[x] <= crf[cnt]:\n                    cnt += 1\n                    id = cnt\n                else:\n                    l = 0\n                    r = cnt\n                    while l < r:\n                        mid = (l + r) // 2\n                        if crf[mid] >= self.sequence[x]:\n                            l = mid + 1\n                        else:\n                            r = mid\n                    id = r\n                ans[id].append(self.sequence[x])\n                crf[id] = self.sequence[x]\n        self.result = \"\\n\".join([\" \".join([str(x) for x in row]) for row in ans[:cnt + 1]])\n\n\n    def get_result(self):\n        return self.result\n\n\ndef __starting_point():\n    Solution = CodeforcesTask847BSolution()\n    Solution.read_input()\n    Solution.process_task()\n    print(Solution.get_result())\n\n__starting_point()", "from bisect import bisect_left\n\nn = int(input())\nA = list(map(int,input().split()))\n\nmax_vals = []\nresult_lists = []\n\nfor i in range(n):\n    val = -A[i]\n    idx = bisect_left(max_vals,val)\n    if idx == len(max_vals):\n        max_vals.append(0)\n        result_lists.append([])\n    max_vals[idx] = val\n    result_lists[idx].append(-val)\n\nfor res in result_lists:\n    print(\" \".join([str(i) for i in res]))\n", "n = int(input())\n\na = []\narr = list(map(int, input().split()))\n\nfor i in range(n):\n    if len(a) == 0:\n        a.append([arr[i]])\n        continue\n    el = arr[i]\n    l, r = 0, len(a) - 1\n    while r - l >= 1:\n        m = (l + r) // 2\n        if el > a[m][-1]:\n            r = m\n        else:\n            l = m + 1\n    if el < a[l][-1]:\n        a.append([el])\n    else:\n        a[l].append(el)\n\nfor x in a:\n    for el in x:\n        print(el, end=' ')\n    print()", "n = int(input())\na = list(map(int,input().split()))\ngroups = []\ngroupTail = []\n\nfor elem in a:\n    if not groups:\n        groups.append([elem])\n        groupTail.append(elem)\n    else:\n        l = 0\n        r = len(groups)\n        while l <= r:\n            m = (l + r) // 2\n            if m == len(groups):\n                break\n            if l == r:\n                break\n            if groupTail[m] < elem:\n                r = m\n            else:\n                l = m + 1\n        if m == len(groups):\n            groups.append([elem])\n            groupTail.append(elem)\n        else:\n            groups[m].append(elem)\n            groupTail[m] = elem\n\nfor line in groups:\n    print(\" \".join(map(str,line)))", "n=int(input())\na=list(map(int,input().split()))\nans=[]\nfor i in range(n):\n    l=0\n    r=len(ans)\n    while l<r:\n        mid=l+(r-l)//2\n        if ans[mid][-1]<a[i]:\n            r=mid\n        else:\n            l=mid+1\n    if l==len(ans):\n        ans.append([a[i]])\n    else:\n        ans[l].append(a[i])\nfor x in ans:\n    print(*x)\n\n\n", "def readInt():\n    return int(input())\n\ndef readInts():\n    return [ int(i) for i in input().split() ]\n    \nn = readInt()\na = readInts()\n\nnexts = [-1] * n\nheads = [-1] * n\nlasts = [-1] * n\ncnt = 0\n\nfor i in range(n):\n    value = a[i]\n    \n    left = -1\n    right = cnt\n    \n    while right - left > 1:\n        mid = (right + left) // 2\n        if a[lasts[mid]] < value:\n            right = mid\n        else:\n            left = mid\n            \n    if right == cnt:\n        heads[right] = i\n        cnt += 1\n    else:\n        last = lasts[right]\n        nexts[last] = i\n    \n    lasts[right] = i\n\nfor i in range(cnt):\n    index = heads[i]\n    while index != -1:\n        print(a[index], end = ' ')\n        index = nexts[index]\n    print()\n    "]