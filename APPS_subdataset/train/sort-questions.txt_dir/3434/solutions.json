["def bin_mul(m,n):\n    if m < n: return bin_mul(n,m)\n    if n == 0: return []\n    res = []\n    while m > 0:\n        if m % 2 == 1: res.append(n)\n        m = m//2; n *=2\n    return res[::-1]", "def bin_mul(m, n):\n    if m < n:\n        m, n = n, m\n    xs = []\n    while m >= 1:\n        m, m_r = divmod(m, 2)\n        if m_r and n:\n            xs.append(n)\n        n *= 2\n    return sorted(xs, reverse=True)", "def bin_mul(m,n):\n    if m < n: return bin_mul(n,m)\n    if n == 0: return[] \n    r = []\n    while m >= 1:\n        print(m,n)\n        if m % 2: r.append(1*n)\n        m = m//2\n        n = n*2\n    \n    return sorted(r,reverse=True)", "def bin_mul(m,n):    \n    result = []\n    ma,mi = max(m,n), min(m,n)\n    while(ma!=0):  \n        if ma%2 and mi!=0:\n            result= [mi] + result\n        mi*=2\n        ma//=2\n    return result", "def bin_mul(a, b):\n    (b, a), r = sorted((a, b)), []\n    while a:\n        if a % 2 and b:\n            r.append(b)\n        a //= 2\n        b *= 2\n    return r[::-1]", "def decimalToBinary(n):  \n    return bin(n).replace(\"0b\", \"\")\ndef bin_mul(m,n):\n    Binval = m\n    Top = n\n    if m < n:\n        Binval = n\n        Top = m\n    Binary = list(decimalToBinary(Binval))\n    val = []\n    Binary.reverse()\n    for x in Binary:\n        if int(x) == 1 and Top !=0:\n            val.append(int(x)*Top)\n        Binval -= int(abs(Binval/2))\n        Top *= 2 \n    return val[::-1]", "def bin_mul(m,n):\n    n,m = sorted((m,n))\n    r = [n] if (m%2 and n) else []\n    while m:\n        m >>= 1\n        n <<= 1\n        if m%2 and n:\n            r.append(n)\n    return sorted(r,reverse=True)", "def bin_mul(m,n):\n    r=[]\n    n,m=sorted((m,n))\n    if not n:return r\n    while m:\n        if m%2:\n            r+=n,\n        m//=2\n        n*=2\n    return r[::-1]", "def bin_mul(m,n):\n    r=[]\n    n,m=sorted([m,n])\n    if n==0:\n        return []\n    while(m>1):\n        if m%2==1:\n            r.insert(0,n)\n        m//=2\n        n*=2\n    r.insert(0,n)\n    return r", "def bin_mul(m,n):\n    if not n or not m:\n        return []\n    max_p, min_p = max(m, n), min(m, n)\n    products = []\n    while max_p > 0:\n        if max_p % 2:\n            products.append(max_p % 2 * min_p)\n        max_p, min_p = max_p//2, min_p * 2\n    products.sort()\n    products.reverse()\n    return products"]