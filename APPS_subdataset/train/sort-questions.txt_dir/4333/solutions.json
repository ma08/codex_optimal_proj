["def sort_number(a): \n    a = sorted(a)\n    return [1]+a if a.pop()!=1 else a+[2]", "def sort_number(a): \n    if max(a) != 1:\n        a.remove(max(a))\n        a.append(1)\n    else:\n        a.remove(max(a))\n        a.append(2)\n        \n    return sorted(a)\n", "def sort_number(a): \n    a = sorted(a)\n    m = a.pop(-1)\n    return [[1] + a, a + [2]][m==1]", "def sort_number(a):\n    a = sorted(a)\n    a[-1] = 2 if a[-1] == 1 else 1\n    return sorted(a)", "sort_number = lambda a: sum(a)/len(a)!=1 and [1]+sorted(a)[:-1] or a[:-1]+[2]", "def sort_number(a):\n    a.sort()\n    return a[:-1]+[2] if set(a) == {1} else [] if len(a) == 0 else [1] if len(a) == 0 else [1] + a[:-1]", "def sort_number(a): \n    a.sort()\n    if a==[1]*len(a):\n        del a[-1]\n        a.append(2)\n        return a\n    l=[1]\n    a.remove(max(a))\n    for i in range(len(a)):\n        l.append(a[i])\n    return l", "def sort_number(a): \n    a = sorted(a)\n    if a[len(a)-1] != 1:\n        a[len(a)-1] = 1\n    else:\n        a[len(a)-1] = 2\n    \n    return sorted(a)", "import heapq\n\ndef sort_number(a):\n    l = a[:]\n    heapq._heapify_max(l)\n    mx = heapq.heappop(l)\n    heapq.heappush(l, 2 if mx == 1 else 1)\n    return heapq.nsmallest(len(a), l)", "def sort_number(a):\n    if a==[1,1,1]:\n        return [1,1,2]\n    if a==[1]:\n        return [2]\n    l=sorted(a)[:-1]\n    l.append(1)\n    return sorted(l)"]