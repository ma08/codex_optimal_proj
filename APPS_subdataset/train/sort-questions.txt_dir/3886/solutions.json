["def is_prime(n):\n    return n >= 2 and all(n%i for i in range(2, 1+int(n**.5)))\n    \ndef total(arr):\n    return sum(n for i, n in enumerate(arr) if is_prime(i))", "def sieve(n):\n    sieve, primes = [0]*(n+1), set()\n    for i in range(2, n+1):\n        if not sieve[i]:\n            primes.add(i)\n            for j in range(i**2, n+1, i): sieve[j] = 1\n    return primes\n\nPRIMES = sieve(5000)\n\ndef total(arr):\n    return sum(arr[p] for p in set(range(len(arr))) & PRIMES)", "def total(lst):\n     return sum(lst[i] for i in primes_gen(len(lst)))\n\n\ndef primes_gen(limit):\n    for current in (2, 3, 5, 7):\n        if current > limit:\n            return\n        yield current\n    composites = {}\n    primes = primes_gen(limit)\n    base_prime = next(primes) and next(primes)\n    next_square = base_prime * base_prime\n    for current in range(9, limit, 2):\n        if current in composites:\n            sieve = composites.pop(current)\n        elif current < next_square:\n            yield current\n            continue\n        else:\n            sieve = 2 * base_prime\n            base_prime = next(primes)\n            next_square = base_prime * base_prime\n        current += sieve\n        while current in composites:\n            current += sieve\n        composites[current] = sieve", "def total(arr):\n    sum = 0\n    erastoteme = [True] * len(arr)\n    for num in range(2, len(erastoteme)):\n        if erastoteme[num]:\n            sum += arr[num]\n            for nb in range(num*2, len(erastoteme), num):\n                erastoteme[nb] = False\n    return sum", "def total(arr):\n    fin_arr = []\n    for i in range(2, len(arr)):\n        d = 2\n        while i % d != 0:\n            d += 1\n        if d == i:\n            fin_arr.append(arr[i])\n    n = sum(fin_arr)\n    return n", "def is_prime(n):\n    if (n <= 1):\n        return False\n    if (n <= 3):\n        return True\n    if (n% 2 == 0 or n % 3 == 0):\n        return False\n    \n    i = 5\n    while(i * i <= n):\n        if (n % i == 0 or n % (i + 2) == 0):\n            return False\n        i = i + 6\n        \n    return True\n\ndef total(arr):\n    final = 0\n    i = 0\n    for num in arr:\n        if is_prime(i) == True:\n            final = final + arr[i]\n            i = i + 1\n        if i == len(arr):\n            return final\n        if not is_prime(i) == True:\n            i = i + 1\n        if i == len(arr):\n            return final\n    \n\n            \n    return final\n    #lol i know it is too long; but I already did the 'Is a number prime?' Kata, and \n    #so I decided to use it here.\n", "def is_prime(n):\n    return n > 1 and all(n % d for d in range(2, int(n**0.5)+1))\n\ndef total(arr):\n    return sum(e for i, e in enumerate(arr) if is_prime(i))", "import itertools\nimport numpy as np\n\ns = np.ones(100000)\ns[:2] = s[4::2] = 0\nfor i in range(3, int(len(s)**0.5)+1, 2):\n    if s[i]:\n        s[i*i::i] = 0\n\ndef total(arr):\n    return sum(itertools.compress(arr, s))"]