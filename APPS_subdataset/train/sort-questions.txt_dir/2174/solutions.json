["n, p, q = input(), set(), set()\nfor i in map(int, input().split()):\n    q = set(i | j for j in q)\n    q.add(i)\n    p.update(q)\nprint(len(p))", "n, p, q = input(), set(), set()\nfor i in map(int, input().split()):\n    q = set(i | j for j in q)\n    q.add(i)\n    p.update(q)\nprint(len(p))", "n, a, b = input(), set(), set()\nfor i in map(int, input().split()):\n    b = set(i | j for j in b)\n    b.add(i)\n    a.update(b)\nprint(len(a))\n", "n, p, q = input(), set(), set()\nfor i in map(int, input().split()):\n    q = set(i | j for j in q)\n    q.add(i)\n    p.update(q)\nprint(len(p))", "n, p, q = input(), set(), set()\n\nfor i in map(int, input().split()):\n\n    q = set(i | j for j in q)\n\n    q.add(i)\n\n    p.update(q)\n\nprint(len(p))", "n=int(input())\na=list(map(int,input().split()))\nb=set();c=set()\nfor i in a:\n    b=set(i|j for j in b)\n    b.add(i)\n    c.update(b)\nprint(len(c))\n", "input()\na, b = set(), set()\nfor i in map(int, input().split()):\n  a = {i | j for j in a}\n  a.add(i)\n  b.update(a)\nprint(len(b))", "n, a, b = input(), set(), set()\nfor i in map(int, input().split()):\n    b = set(i | j for j in b)\n    b.add(i)\n    a.update(b)\nprint(len(a))", "def R(): return list(map(int, input().split()))\ndef I(): return int(input())\ndef S(): return str(input())\n\ndef L(): return list(R())\n\nfrom collections import Counter \n\nimport math\nimport sys\n\nfrom itertools import permutations\n\n\nimport bisect\n\n\nn=I()\na=L()\n\ns1=set()\ns2=set()\n\nfor i in range(n):\n    s1={a[i]|j for j in s1}\n    s1.add(a[i])\n    s2.update(s1)\n\nprint(len(s2))\n\n\n\n", "n = int(input())\na = list(map(int, input().split()))\n\ns1, s2 = set(), set()\n\nfor each in a:\n    st = set()\n    st.add(each)\n    for i in s1:\n        st.add(each | i)\n    s1 = st\n    s2.update(s1)\n    \nprint(len(s2))", "input();a,b=set(),set()\nfor i in map(int,input().split()):a={i|j for j in a}; a.add(i,);b.update(a)\nprint(len(b))", "import sys, math,os\nfrom io import BytesIO, IOBase\n#from bisect import bisect_left as bl, bisect_right as br, insort\n#from heapq import heapify, heappush, heappop\nfrom collections import defaultdict as dd, deque, Counter\n#from itertools import permutations,combinations\ndef data(): return sys.stdin.readline().strip()\ndef mdata(): return list(map(int, data().split()))\ndef outl(var) : sys.stdout.write(' '.join(map(str, var))+'\\n')\ndef out(var) : sys.stdout.write(str(var)+'\\n')\nsys.setrecursionlimit(100000)\nINF = float('inf')\nmod = int(1e9)+7\n\ndef main():\n\n    n=int(data())\n    A=mdata()\n    s=set()\n    ans=set()\n    for i in A:\n        s=set(i|j for j in s)\n        s.add(i)\n        ans.update(s)\n    print(len(ans))\n\n\ndef __starting_point():\n    main()\n__starting_point()", "n=int(input())\na,b=set(),set()\nfor i in list(map(int,input().split())):\n    a={i|j for j in a}\n    a.add(i)\n    b.update(a)\nprint(len(b))", "#n=int(input())\nfrom bisect import  bisect_right\n#d=sorted(d,key=lambda x:(len(d[x]),-x))  d=dictionary     d={x:set() for x in arr}\n#n=int(input())\n#n,m,k= map(int, input().split())\nimport heapq\n#for _ in range(int(input())):\n#n,k=map(int, input().split())\n#input=sys.stdin.buffer.readline\n#for _ in range(int(input())):\nn=int(input())\narr = list(map(int, input().split()))\nans=set()\ns=set()\nfor i in range(n):\n    s={arr[i]|j for j in s}\n    s.add(arr[i])\n    ans.update(s)\n    #print(s)\nprint(len(ans))"]