["class Solution:\n     def countSubstrings(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         ret = 0\n         left, right = 0, 0\n         while left < len(s):\n             while right < len(s) and s[right] == s[left]:\n                 right += 1\n             ret += self.sum(right - left)\n             l, r = left-1, right\n             while l >= 0 and r < len(s) and s[r] == s[l]:\n                 ret += 1\n                 l -= 1\n                 r += 1\n             left = right\n         return ret\n \n     def sum(self, n):\n         s = 0\n         for i in range(1, n + 1):\n             s += i\n         return s", "class Solution:\n     def countSubstrings(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         \n         # manacher, find Z\n         s = '^#' + '#'.join(s) + '#$'\n         Z = [1] * len(s)\n         center, right = 0, 0\n         for i in range(len(s)-1): # \u6ce8\u610f i\u4e0d\u80fd\u53d6\u5230 $\n             if i < right:\n                 i_mirror = 2 * center - i\n                 Z[i] = min(Z[i_mirror], right - i + 1)\n             while s[i+Z[i]] == s[i-Z[i]]:\n                 Z[i] += 1\n             if i + Z[i] - 1 > right:\n                 center, right = i, i + Z[i] - 1\n         \n         # sum Z\n         return sum(z//2 for z in Z)", "class Solution:\n     def countSubstrings(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         def manachers(S):\n             A = '@#' + '#'.join(S) + '#$'\n             Z = [0] * len(A)\n             center = right = 0\n             for i in range(1, len(A) - 1):\n                 if i < right:\n                     Z[i] = min(right - i, Z[2 * center - i])\n                 while A[i + Z[i] + 1] == A[i - Z[i] - 1]:\n                     Z[i] += 1\n                 if i + Z[i] > right:\n                     center, right = i, i + Z[i]\n             return Z\n         return sum((v + 1) // 2 for v in manachers(s))   ", "class Solution:\n     def countSubstrings(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         t = '@#' + '#'.join(s) + '#$'\n         n = len(t)\n         r = [0] * n\n         c = 0\n         for i in range(1, n-1):\n             if i-c < r[c]:\n                 if r[c-(i-c)] < r[c]-(i-c):\n                     r[i] = r[c-(i-c)]\n                 else:\n                     r[i] = r[c]-(i-c)\n                     while t[i-r[i]-1] == t[i+r[i]+1]:\n                         r[i] += 1\n                     c = i\n             else:\n                 r[i] = 0\n                 while t[i-r[i]-1] == t[i+r[i]+1]:\n                     r[i] += 1\n                 c = i\n         return sum((i+1) // 2 for i in r)\n                 \n", "class Solution:\n     def countSubstrings(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         ss = \"$#\"\n         for i in s:\n             ss += i + '#'\n         ss += '@'\n         r = [0] * (len(ss) + 1) \n         pos = 0\n         ma = 0\n         for i in range(1, len(ss) - 1):\n             if ma > i:\n                 r[i] = min(r[pos - (i - pos)], ma - i)\n             else:\n                 r[i] = 1\n             while ss[i + r[i]] == ss[i - r[i]]:\n                 r[i] += 1\n             # print(i, r[i])\n             if r[i] + i > ma:\n                 pos, ma = i, r[i] + i\n         ans = sum(int(l/2) for l in r)\n         return ans", "class Solution:\n     def countSubstrings(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         \n         # manacher, find Z\n         s = '^#' + '#'.join(s) + '#$'\n         Z = [1] * len(s)\n         center, right = 0, 0\n         for i in range(len(s)-1): # \u6ce8\u610f i\u4e0d\u80fd\u53d6\u5230 $\n             if i < right:\n                 i_mirror = 2 * center - i\n                 Z[i] = min(Z[i_mirror], right - i + 1)\n             while s[i+Z[i]] == s[i-Z[i]]:\n                 Z[i] += 1\n             if i + Z[i] - 1 > right:\n                 center, right = i, i + Z[i] - 1\n         \n         # sum Z\n         return sum(z//2 for z in Z)", "class Solution:\n     def countSubstrings(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         \n         s = '^#' + '#'.join(s) + '#$'\n         Z = [1] * len(s)\n         center, right = 0, 0\n         for i in range(len(s)-1):\n             if i < right:\n                 i_mirror = 2*center - i\n                 Z[i] = min(Z[i_mirror], right-i+1)\n             while s[i+Z[i]] == s[i-Z[i]]:\n                 Z[i] += 1\n             if i+Z[i]-1 > right:\n                 center, right = i, i+Z[i]-1\n         return sum(z//2 for z in Z)", "class Solution:\n     def countSubstrings(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         \n         # manacher\n         s = '^#' + '#'.join(s) + '#$'\n         Z = [1] * len(s)\n         center, right = 0, 0\n         for i in range(len(s)-1):\n             if i < right:\n                 i_mirror = 2*center - i\n                 Z[i] = min(Z[i_mirror], right-i+1)\n             while s[i+Z[i]] == s[i-Z[i]]:\n                 Z[i] += 1\n             if i+Z[i]-1 > right:\n                 center, right = i, i+Z[i]-1\n         return sum(z//2 for z in Z)", "class Solution:\n     def countSubstrings(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         s=','+s+'.'\n         ans=0\n         for i in range(1,len(s)-1):\n             j=1\n             while s[i+j]==s[i-j]:\n                 j+=1\n             ans+=j\n         for i in range(1,len(s)-1):\n             j=0\n             while s[i-j]==s[i+1+j]:\n                 j+=1\n             ans+=j\n         return ans"]