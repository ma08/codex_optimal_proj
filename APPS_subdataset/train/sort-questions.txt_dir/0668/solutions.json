["def max_sum(arr):\n    # Finds the maximum sum of sub-arrays of arr\n    max_till_now = -1000000 #minimum possible number \n    current_sum = 0\n    for i in range(len(arr)):\n        if current_sum < 0:\n            # If sum of previous elements is negative, then ignore them. Start fresh\n            # with `current_sum = 0`\n            current_sum = 0\n        \n        current_sum += arr[i]\n        \n        # Update max\n        if max_till_now < current_sum:\n            max_till_now = current_sum\n    \n    return max_till_now\n\n\ndef solve(A, k):\n    if k == 1:\n        return max_sum(A)\n    # Find sum of elements of A\n    sum_A = 0\n    for i in range(len(A)):\n        sum_A += A[i]\n    \n    Max_Suffix_Sum = -1000000\n    current = 0\n    for i in range(len(A)):\n        current += A[-i-1]\n        if current > Max_Suffix_Sum:\n            Max_Suffix_Sum = current\n\n    Max_Prefix_Sum = -1000000\n    current = 0\n    for i in range(len(A)):\n        current += A[i]\n        if current > Max_Prefix_Sum:\n            Max_Prefix_Sum = current\n\n    if sum_A <= 0:\n        # Check two cases:\n\n        # Case 1 : Check the max_sum of A\n        case_1_max_sum = max_sum(A)\n        \n        # Case 2 : Check the max_sum of A + A\n        case_2_max_sum = Max_Suffix_Sum + Max_Prefix_Sum\n\n        # Return the maximum of the two cases\n        return max([case_1_max_sum, case_2_max_sum])\n\n    else: # if sum_A > 0\n        #Check two cases:\n\n        # Case 1 : Check the max_sum of A\n        case_1_max_sum = max_sum(A)\n\n        # Case 2\n        # Max sum = Max_Suffix_Sum + (k - 2)*sum_A + Max_Prefix_Sum       \n        \n        case_2_max_sum = Max_Suffix_Sum + (k - 2)*sum_A + Max_Prefix_Sum\n        \n        # Return the maximum of the two cases\n        return max([case_1_max_sum, case_2_max_sum])\n\n\n# Main\nT = int(input()) # No of test cases\nfor i in range(T):\n    [N, k] = list(map(int, input().split(\" \")))\n    A = list(map(int, input().split(\" \")))\n    \n    answer = solve(A,k)\n    print(answer)", "# cook your dish here\nt=int(input())\nfor i in range(t):\n    \n    l=list(map(int,input().split()))\n    l2=list(map(int,input().split()))\n    if (sum(l2)>0):\n        x=0\n        if l[1]==1:\n            h=l2\n            y=0\n            \n            for j in range(len(h)):\n                y=max(0,y+h[j])\n                x=max(y,x)\n            print(x)\n        else:  \n            h=l2+l2\n            y=0\n            \n            for j in range(len(h)):\n                y=max(0,y+h[j])\n                x=max(y,x)\n            print(x+(l[1]-2)*sum(l2))\n            \n        \n        \n    else:\n        if max(l2)<0:\n            print(max(l2))\n        else:\n            x=0\n            if l[1]==1:\n                h=l2\n                y=0\n                \n                for j in range(len(h)):\n                    y=max(0,y+h[j])\n                    x=max(y,x)\n                print(x)\n            else:  \n                h=l2+l2\n                y=0\n                \n                for j in range(len(h)):\n                    y=max(0,y+h[j])\n                    x=max(y,x)\n                print(x)\n            \n            \n            \n", "# cook your dish here\r\nx = int(input())\r\nfor i in range(x):\r\n    n, k = map(int, input().split())\r\n    arr = list(map(int, input().split()))\r\n    ar = [i for i in arr]*k\r\n    l = [0 for i in range(n*k)]\r\n    l[0] = ar[0]\r\n    for i in range(n*k):\r\n        l[i] = max([l[i-1]+ar[i], ar[i]])\r\n    print(max(l))", "def maxSumSubarray(B):          # O(N)\r\n    import sys\r\n    currSum, maxSum = 0, -(sys.maxsize - 1)\r\n    for b in B:\r\n        currSum += b\r\n        if currSum > maxSum:\r\n            maxSum = currSum\r\n        if currSum < 0:\r\n            currSum = 0\r\n    return maxSum\r\n\r\ndef formB(A, K):\r\n    B = [0 for _ in range(len(A) * K)]\r\n    for i in range(len(A)):     # O(NK)\r\n        B[i] = A[i]\r\n        ti, j = i, 1\r\n        while j < K:\r\n            B[ti + len(A)] = A[i]\r\n            ti += len(A)\r\n            j += 1\r\n    \r\n    # print(B)\r\n    return maxSumSubarray(B)\r\n    \r\n    \r\n    \r\ntry:\r\n    T = int(input())\r\nexcept Exception as e:\r\n    pass\r\nelse:\r\n    while T >= 1:\r\n        N, K = map(int, input().split())\r\n        A = [int(x) for x in input().split()]\r\n        print(formB(A, K))\r\n        T -= 1", "# cook your dish here\nt = int(input())\nfor i in range(t):\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    #print(n, k, a)\n    b = [i for i in a]*k\n    #print(k, a, b)\n    new = [0 for i in range(n*k)]\n    new[0] = b[0]\n    for i in range(n*k):\n        new[i] = max([new[i-1]+b[i], b[i]])\n    #print(new)\n    print(max(new))", "# cook your dish here\ndef maxsubarraysum(arr):\n    max_till=arr[0]\n    max_cur=arr[0]\n    n=len(arr)\n    for i in range(1,n):\n        max_cur=max(arr[i],max_cur+arr[i])\n        max_till=max(max_cur,max_till)\n    return max_till\n    \nfor _ in range(int(input())):\n    n,m = map(int,input().split())\n    arr = [int(i) for i in input().split()]\n    if m==1:\n        print(maxsubarraysum(arr))\n    else:\n        arr2 = arr+arr\n        if m==2:\n            print(maxsubarraysum(arr2))\n        else:\n            maxsum2 = maxsubarraysum(arr2)\n            if sum(arr)>=0:\n                print(maxsum2 + (m-2)*sum(arr))\n            else:\n                print(maxsum2)", "import sys \ndef maxSubArraySum(a,n,k): \n       \n    max_so_far = -sys.maxsize - 1\n    max_ending_here = 0\n       \n    for i in range(n*k): \n        max_ending_here = max_ending_here + a[i%n] \n        if (max_so_far < max_ending_here): \n            max_so_far = max_ending_here \n  \n        if max_ending_here < 0: \n            max_ending_here = 0   \n    return max_so_far \n\n\n\nfor _ in range(int(input())):\n    n,k=map(int,input().split())\n    ar=[int(x) for x in input().split()]\n    s=sum(ar)\n    if s>=0:\n        if k==1 or k==2:\n            print(maxSubArraySum(ar,n,k))\n        else:\n            print(maxSubArraySum(ar,n,2)+(k-2)*s)\n    else:\n        if k==1:\n            print(maxSubArraySum(ar,n,k))\n        else:\n            print(maxSubArraySum(ar,n,2))\n        \n    ", "# cook your dish here\ntcase=int(input())\nfor i in range(tcase):\n    ninput=input()\n    nlist=list(ninput.split(\" \"))\n    A=[]\n    B=[]\n    numinput=input()\n    A=list(numinput.split(\" \"))\n    B=A*int(nlist[1])\n    size=int(nlist[0])*int(nlist[1])\n    B=[int(i) for i in B]\n    max_so_far =B[0] \n    curr_max = B[0] \n    for i in range(1,size): \n        curr_max = max(B[i], curr_max + B[i]) \n        max_so_far = max(max_so_far,curr_max) \n          \n    print(max_so_far) \n", "# cook your dish here\nimport math\ntcases = int(input())\nmyanswer = []\ndef programrun(tcases):\n    if tcases==0:\n        print(0)\n        return\n    \n    def msumfinder(array, n, k):\n        msofar = -10000000\n        mendnow = 0\n        for i in range(n*k):\n            mendnow+=array[i%n]\n            if mendnow>msofar:\n                msofar = mendnow\n            if mendnow<0:\n                mendnow = 0\n        return msofar\n        \n    for _ in range(0,tcases):\n        fline = input().split()\n        fline = list(map(int, fline))\n        k = fline[1]\n        n = fline[0]\n        a = [int(x) for x in input().split()]\n        sa = sum(a)\n        if sa>=0:\n            if k==1 or k==2:\n                print(msumfinder(a,n,k))\n            else:\n                print(msumfinder(a,n,2) + (k-2)*sa)\n            \n        else:\n            if k==1:\n                print(msumfinder(a,n,1))\n            else:\n                print(msumfinder(a,n,2))\n    \n        \n        \nprogramrun(tcases)", "# cook your dish here\nimport math\ntcases = int(input())\nmyanswer = []\ndef programrun(tcases):\n    if tcases==0:\n        print(0)\n        return\n    \n    def msumfinder(array, n, k):\n        msofar = -10000000\n        mendnow = 0\n        for i in range(n*k):\n            mendnow+=array[i%n]\n            if mendnow>msofar:\n                msofar = mendnow\n            if mendnow<0:\n                mendnow = 0\n        return msofar\n        \n    for _ in range(0,tcases):\n        fline = input().split()\n        fline = list(map(int, fline))\n        k = fline[1]\n        n = fline[0]\n        a = [int(x) for x in input().split()]\n        sa = sum(a)\n        if sa>=0:\n            if k==1 or k==2:\n                print(msumfinder(a,n,k))\n            else:\n                print(msumfinder(a,n,2) + (k-2)*sa)\n            \n        else:\n            print(msumfinder(a,n,2))\n    \n        \n        \nprogramrun(tcases)", "# cook your dish here\nimport math\ntcases = int(input())\nmyanswer = []\ndef programrun(tcases):\n    if tcases==0:\n        print(0)\n        return\n    \n    def msumfinder(array, n, k):\n        msofar = -10000000\n        mendnow = 0\n        for i in range(n*k):\n            mendnow+=array[i%n]\n            if mendnow>msofar:\n                msofar = mendnow\n            if mendnow<0:\n                mendnow = 0\n        return msofar\n        \n    for _ in range(0,tcases):\n        fline = input().split()\n        fline = list(map(int, fline))\n        k = fline[1]\n        n = fline[0]\n        a = [int(x) for x in input().split()]\n        sa = sum(a)\n        if sa>0:\n            if k==1 or k==2:\n                print(msumfinder(a,n,k))\n            else:\n                print(msumfinder(a,n,2) + (k-2)*sa)\n            \n        else:\n            print(msumfinder(a,n,2))\n    \n        \n        \nprogramrun(tcases)", "# cook your dish here\nimport math\ntcases = int(input())\nmyanswer = []\ndef programrun(tcases):\n    if tcases==0:\n        print(0)\n        return\n    \n    def msumfinder(array, n, k):\n        msofar = -10000000\n        mendnow = 0\n        for i in range(n*k):\n            mendnow+=array[i%n]\n            if mendnow>msofar:\n                msofar = mendnow\n            if mendnow<0:\n                mendnow = 0\n        return msofar\n        \n    for _ in range(0,tcases):\n        fline = input().split()\n        fline = list(map(int, fline))\n        k = fline[1]\n        n = fline[0]\n        a = [int(x) for x in input().split()]\n        sa = sum(a)\n        if sa>0:\n            if k==1 or k==2:\n                print(msumfinder(a,n,k))\n            else:\n                print(msumfinder(a,n,2) + (k-2)*sa)\n        elif k==0:\n            print(0)\n        else:\n            print(msumfinder(a,n,2))\n    \n        \n        \nprogramrun(tcases)", "# cook your dish here\nimport math\ntcases = int(input())\nmyanswer = []\ndef programrun(tcases):\n    if tcases==0:\n        print(0)\n        return\n    \n    def msumfinder(array, n, k):\n        msofar = -10000000\n        mendnow = 0\n        for i in range(n*k):\n            mendnow+=array[i%n]\n            if mendnow>msofar:\n                msofar = mendnow\n            if mendnow<0:\n                mendnow = 0\n        return msofar\n        \n    for _ in range(0,tcases):\n        fline = input().split()\n        fline = list(map(int, fline))\n        k = fline[1]\n        n = fline[0]\n        a = [int(x) for x in input().split()]\n        sa = sum(a)\n        if sa>0:\n            if k==1 or k==2:\n                print(msumfinder(a,n,k))\n            else:\n                print(msumfinder(a,n,2) + (k-2)*sa)\n        else:\n            print(msumfinder(a,n,2))\n    \n        \n        \nprogramrun(tcases)", "# cook your dish here\nimport math\ntcases = int(input())\nmyanswer = []\ndef programrun(tcases):\n    if tcases==0:\n        print(0)\n        return\n    \n    def msumfinder(array, n, k):\n        msofar = -10000000\n        mendnow = 0\n        for i in range(n*k):\n            mendnow+=array[i%n]\n            if mendnow>msofar:\n                msofar = mendnow\n            if mendnow<0:\n                mendnow = 0\n        return msofar\n        \n    for _ in range(0,tcases):\n        fline = input().split()\n        fline = list(map(int, fline))\n        k = fline[1]\n        n = fline[0]\n        a = [int(x) for x in input().split()]\n        sa = sum(a)\n        if sa>0:\n            if k==1 or k==2:\n                print(msumfinder(a,n,k))\n            else:\n                print(msumfinder(a,n,2) + (k-2)*sa)\n        else:\n            print(msumfinder(a,n,k))\n    \n        \n        \nprogramrun(tcases)", "# cook your dish here\nimport math\ntcases = int(input())\nmyanswer = []\ndef programrun(tcases):\n    if tcases==0:\n        print(0)\n        return\n    \n    def msumfinder(array, n, k):\n        msofar = -10000000\n        mendnow = 0\n        for i in range(n*k):\n            mendnow+=array[i%n]\n            if mendnow>msofar:\n                msofar = mendnow\n            if mendnow<0:\n                mendnow = 0\n        return msofar\n        \n    for _ in range(0,tcases):\n        fline = input().split()\n        fline = list(map(int, fline))\n        k = fline[1]\n        n = fline[0]\n        if n==0:\n            print(0)\n            continue\n        if k==0:\n            print(0)\n            continue\n        \n        a = list(map(int, input().split()))\n        print(msumfinder(a,n,k))\n    \n        \n        \nprogramrun(tcases)", "# cook your dish here\nimport math\ntcases = int(input())\nmyanswer = []\ndef programrun(tcases):\n    if tcases==0:\n        print(0)\n        return\n    \n    def msumfinder(array, n, k):\n        msofar = -10000000\n        mendnow = 0\n        for i in range(n*k):\n            mendnow+=array[i%n]\n            if mendnow>msofar:\n                msofar = mendnow\n            if mendnow<0:\n                mendnow = 0\n        return msofar\n        \n    for _ in range(0,tcases):\n        fline = input().split()\n        fline = list(map(int, fline))\n        k = fline[1]\n        n = fline[0]\n        if n==0:\n            print(0)\n            continue\n        if k==0:\n            print(0)\n            continue\n        \n        a = list(map(int, input().split()))\n        print(msumfinder(a,n,k))\n    \n        \n        \nprogramrun(tcases)", "# cook your dish here\nimport math\ntcases = int(input())\nmyanswer = []\ndef programrun(tcases):\n    if tcases==0:\n        print(0)\n        return\n    \n    def msumfinder(array, n, k):\n        msofar = -10000000\n        mendnow = 0\n        for i in range(n*k):\n            mendnow+=array[i%n]\n            if mendnow>msofar:\n                msofar = mendnow\n            if mendnow<0:\n                mendnow = 0\n        return msofar\n        \n    for _ in range(0,tcases):\n        fline = input().split()\n        fline = list(map(int, fline))\n        k = fline[1]\n        n = fline[0]\n        if n==0:\n            print(0)\n            continue\n        if k==0:\n            print(0)\n            continue\n        \n        a = list(map(int, input().split()))\n        \n        myanswer.append(msumfinder(a, n, k))\n    for element in myanswer:\n        print(element)\n        \n        \nprogramrun(tcases)", "def maximum_subarray_sum(a):\n    N = len(a)\n    max_so_far = -float('inf')\n    max_ending_here = 0\n\n    start = 0\n    end = 0\n    s = 0\n    for i in range(N):\n        max_ending_here += a[i]\n        if(max_ending_here>max_so_far):\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        if(max_ending_here<0):\n            max_ending_here = 0\n            s = i+1\n    return start,end\n\n# a = [-1,-2,-3,-4,-5]\n# print(maximum_subarray_sum(a))\n\nT = int(input())\nans = []\n\nfor _ in range(T):\n    N,K = [int(i) for i in input().split()]\n    A = [int(i) for i in input().split()]\n\n\n    if(K==1):\n        s,e = maximum_subarray_sum(A)\n        ans.append(sum(A[s:e+1]))\n    else:\n        s,e = maximum_subarray_sum(A+A)\n        # print('$',s,e,sum(A[2:3]))\n        if(e<N):\n            ans.append(sum(A[s:e+1]))\n        else:\n            e -= N\n            ans.append( max(sum(A[s:])+sum(A)*(K-2)+sum(A[:e+1]), sum((A+A)[s:e+N+1]) ) )\n\nfor i in ans:\n    print(i)", "def maximum_subarray_sum(a):\n    N = len(a)\n    max_so_far = -float('inf')\n    max_ending_here = 0\n\n    start = 0\n    end = 0\n    s = 0\n    for i in range(N):\n        max_ending_here += a[i]\n        if(max_ending_here>max_so_far):\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        if(max_ending_here<0):\n            max_ending_here = 0\n            s = i+1\n    return start,end\n\n# a = [-1,-2,-3,-4,-5]\n# print(maximum_subarray_sum(a))\n\nT = int(input())\nans = []\n\nfor _ in range(T):\n    N,K = [int(i) for i in input().split()]\n    A = [int(i) for i in input().split()]\n\n\n    if(K==1):\n        s,e = maximum_subarray_sum(A)\n        ans.append(sum(A[s:e+1]))\n    else:\n        s,e = maximum_subarray_sum(A+A)\n        # print('$',s,e,sum(A[2:3]))\n        if(e<N):\n            ans.append(sum(A[s:e+1]))\n        else:\n            e -= N\n            ans.append( max( sum(A[s:])+sum(A)*(K-2)+sum(A[:e+1]), sum(A[s:e+1]) ) )\n\nfor i in ans:\n    print(i)", "def maximum_subarray_sum(a):\n    N = len(a)\n    max_so_far = -float('inf')\n    max_ending_here = 0\n\n    start = 0\n    end = 0\n    s = 0\n    for i in range(N):\n        max_ending_here += a[i]\n        if(max_ending_here>max_so_far):\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        if(max_ending_here<0):\n            max_ending_here = 0\n            s = i+1\n    return start,end\n\n# a = [-1,-2,-3,-4,-5]\n# print(maximum_subarray_sum(a))\n\nT = int(input())\nans = []\n\nfor _ in range(T):\n    N,K = [int(i) for i in input().split()]\n    A = [int(i) for i in input().split()]\n\n\n    if(K==1):\n        s,e = maximum_subarray_sum(A)\n        ans.append(sum(A[s:e+1]))\n    else:\n        s,e = maximum_subarray_sum(A+A)\n        # print('$',s,e,sum(A[2:3]))\n        if(e<N):\n            ans.append(sum(A[s:e+1]))\n        else:\n            e -= N\n            ans.append(sum(A[s:])+sum(A)*(K-2)+sum(A[:e+1]))\n\nfor i in ans:\n    print(i)\n", "# cook your dish here\nimport sys\nt = int(input())\nfor _ in range(t):\n    N,k = map(int,input().split())\n    A = list(map(int,input().split()))\n    B = A*k\n    max_ = -(sys.maxsize)-1\n    value = 0\n    for i in range(len(B)):\n        value = value + B[i]\n        if value>max_:\n            max_ = value\n        if value<0:\n            value = 0\n    print(max_)", "def kadane(l):\r\n\tcurrent_sum,best_so_far=0,-9999999999999\r\n\tfor i in l:\r\n\t\tcurrent_sum+=i\r\n\t\tif best_so_far<current_sum:\r\n\t\t\tbest_so_far=current_sum\r\n\t\tif current_sum<0:\r\n\t\t\tcurrent_sum=0\r\n\treturn best_so_far\r\ndef max_sum(l,k):\r\n\tif k==1:\r\n\t\tans=kadane(l)\r\n\t\treturn ans\r\n\tcurrent_prefix_sum,best_prefix_sum=0,-99999999999999\r\n\tcurrent_postfix_sum,best_postfix_sum=0,-9999999999999\r\n\ttotal_sum=0\r\n\tfor i in l:\r\n\t\tcurrent_prefix_sum+=i\r\n\t\tbest_prefix_sum=max(current_prefix_sum,best_prefix_sum)\r\n\ttotal_sum=current_prefix_sum\r\n\tfor i in range(len(l)-1,-1,-1):\r\n\t\tcurrent_postfix_sum+=l[i]\r\n\t\tbest_postfix_sum=max(current_postfix_sum,best_postfix_sum)\r\n\tif total_sum<0:\r\n\t\tans=max(best_prefix_sum+best_postfix_sum,kadane(l))\r\n\telse:\r\n\t\tans=max(best_prefix_sum+best_postfix_sum+((k-2)*total_sum),kadane(l))\r\n\treturn ans\r\nt=int(input())\r\nwhile t>0:\r\n\tn,k=map(int,input().split())\r\n\tl=list(map(int,input().split()))\r\n\tprint(max_sum(l,k))\r\n\tt-=1", "# cook your dish here\nfor i in range(int(input())):\n    n,k = (map(int,input().split()))\n    l = list(map(int,input().split()))\n    if k == 1: \n        c_sum = l[0]\n        m_sum = l[0]\n        for i in range(1,n): \n            c_sum = max(l[i],c_sum + l[i])\n            m_sum = max(m_sum,c_sum)\n        print(m_sum)\n    else: \n        s = sum(l)\n        l *= 2\n        j = 1\n        c_sum = l[0]\n        m_sum = l[0]\n        while j < 2*n: \n            if l[j] > c_sum + l[j]: \n                c_sum = l[j]\n            else: \n                c_sum += l[j]\n            if c_sum > m_sum: \n                m_sum = c_sum\n            j+=1\n        if s <= 0: \n            print(m_sum)\n        else:\n            print(m_sum + (k - 2)*s)\n", "# cook your dish here\nimport sys\ndef maximum_subarray_sum(arr,n,k):\n    if k==1: return kadane(arr)\n    one_sum=sum(arr)\n    a=arr+arr\n    if one_sum>0: return kadane(a) + (k-2)*one_sum\n    return kadane(a)\n\ndef kadane(a):\n    best_sum=float('-inf')\n    curr_sum=0\n\n    for i in a:\n        curr_sum=curr_sum+i\n       \n        if curr_sum<i: curr_sum=i\n        best_sum=max(best_sum,curr_sum)\n    return best_sum\n\n\ndef __starting_point():\n    input = sys.stdin.read()\n    data = list(map(int, input.split()))\n    ans=[] #array to store maximum sum of all data sets\n    j=1 #starting point of first data set\n\n    t = data[0]\n    for i in range(t):\n        n=data[j]\n        k=data[j+1]\n        arr=data[j+2:j+2+n]\n        ans.append(maximum_subarray_sum(arr,n,k))\n        j=j+2+n\n    for x in ans:\n        print(x)\n\n__starting_point()", "# cook your dish here\nimport sys\ndef maximum_subarray_sum(arr,n,k):\n    if k==1: return kadane(arr)\n    one_sum=sum(arr)\n    a=arr+arr\n    if one_sum>0: return kadane(a) + (k-2)*one_sum\n    return kadane(a)\n\ndef kadane(a):\n    best_sum=float('-inf')\n    curr_sum=0\n\n    for i in a:\n        curr_sum=curr_sum+i\n        best_sum=max(best_sum,curr_sum)\n        if curr_sum<0: curr_sum=0\n    return best_sum\n\n\ndef __starting_point():\n    input = sys.stdin.read()\n    data = list(map(int, input.split()))\n    ans=[] #array to store maximum sum of all data sets\n    j=1 #starting point of first data set\n\n    t = data[0]\n    for i in range(t):\n        n=data[j]\n        k=data[j+1]\n        arr=data[j+2:j+2+n]\n        ans.append(maximum_subarray_sum(arr,n,k))\n        j=j+2+n\n    for x in ans:\n        print(x)\n\n__starting_point()"]