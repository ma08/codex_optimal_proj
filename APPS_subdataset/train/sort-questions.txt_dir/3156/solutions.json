["def is_even(x):\n    return all(int(i) % 2 == 0 for i in str(x))\ndef even_digit_squares(a, b):\n    first = int(a ** (1 / 2)) + 1\n    last = int(b ** (1 / 2)) + 1\n    return sorted([x * x for x in range(first, last) if is_even(x * x)])", "def even_digit_squares(a, b):\n    return [i**2 for i in range(int(a**0.5), int(b**0.5)+1) if all(not int(j)%2 for j in str(i**2))]", "from bisect import bisect_left, bisect_right\n\nEVEN = set('02468')\npedps = [x for x in (x*x for x in range(8, 1000000, 2)) if set(str(x)) <= EVEN]\n\ndef even_digit_squares(a, b):\n    return pedps[bisect_left(pedps, a):bisect_right(pedps, b)]", "def even_digit_squares(a, b):\n    return [n**2 for n in range(int(a**0.5)+bool(a**0.5 % 1), int(b**0.5)+1) if not any(int(d) % 2 for d in str(n**2))]\n    \n    \n    \n    #result = []\n    #i = int(a**0.5) + bool(a**0.5 % 1)\n    #j = int(b**0.5) + 1\n    #for n in range(i, j):\n    #    sq = n**2\n    #    if not any(int(d) % 2 for d in str(sq)):\n    #        result.append(sq)\n    #return result\n", "PEDPS = [ n*n for n in range(2, 10**6, 2)\n          if set(str(n*n)) <= set('02468') ]\n\ndef even_digit_squares(a, b):\n    return [ n for n in PEDPS if a <= n <= b ]", "from math import ceil\ndef digits(n):\n    while n >= 10:\n        if (n % 10) % 2 > 0:\n            return False\n        n //= 10\n    return n % 2 == 0\n\ndef even_digit_squares(a, b):\n    p = ceil(a ** 0.5); q = int(b ** 0.5)\n    return [i * i for i in range(p, q + 1) if digits(i * i)]", "even_digit_squares=lambda a,b:[n*n for n in range(1-int(-a**.5//1)&-2,int(b**.5)+1,2)if set(str(n*n))<=set('02468')]", "import math\n\ndef even_digit_squares(a, b):\n  evens = ('2', '4', '6', '8', '0')\n  start = math.ceil(math.sqrt(a))\n  stop = math.ceil(math.sqrt(b+1))\n  return [n*n for n in range(start, stop) if all(i in evens for i in str(n*n))]\n", "from math import floor, ceil, sqrt\n\ndef allEven(n):\n    digs = list(str(n))\n    odd_digs = [\"1\",\"3\",\"5\",\"7\",\"9\"]\n    for dS in odd_digs:\n        if dS in digs: return False\n    return True\n\ndef even_digit_squares(a, b):\n    lim1, lim2  = int(floor(sqrt(a))) - 1, int(ceil(sqrt(b)) + 1)\n    res = []\n    for i in range(lim1, lim2):\n        ii = i**2\n        if a<= ii <= b and allEven(ii):res.append(ii)\n    return res"]