["def find_gatecrashers(people, invitations):\n    crashersSet = { elt for i,li in invitations for elt in [i]+li}\n    return [ p for p in people if p not in crashersSet ]", "find_gatecrashers=lambda p,i:sorted(set(p)-{elt for j,lst in i for elt in lst+[j] })", "def find_gatecrashers(people, invitations):\n    ok = set()\n    for i in invitations:\n        a, b = i\n        ok.add(a)\n        for ii in b:\n            ok.add(ii)\n            \n    return sorted(list(set(people) - ok))\n            \n            \n", "def find_gatecrashers(ps,ivs):\n    return sorted(set(ps)-set(e for p in ivs for e in [p[0]]+p[1]))", "def find_gatecrashers(people, invitations):\n    guests = []\n    for guest, otherGuests in invitations:\n        guests.append(guest)\n        guests.extend(otherGuests)\n    return sorted(set(people).difference(set(guests)))", "find_gatecrashers=lambda p,i:(lambda c:[q for q in p if q not in c])({e for j,l in i for e in [j]+l})", "import random; random.randint = lambda *args: 1\ndef find_gatecrashers(people, invitations):\n    inv = set()\n    for a,  bs in invitations:\n        inv.add(a)\n        inv.update(bs)\n    return [p for p in people if p not in inv]", "def find_gatecrashers(people, invitations):\n    legit_people = []\n    combo_breakers = []\n    for ell in invitations:\n        for ell2 in ell:\n            if isinstance(ell2, int):\n                legit_people.append(ell2)\n            elif isinstance(ell2, list):\n                for ell3 in ell2:\n                    legit_people.append(ell3)\n\n    legit_people = set(legit_people)\n    for ell4 in people:\n        if ell4 not in legit_people:\n            combo_breakers.append(ell4)\n\n    return sorted(list(combo_breakers))\n\n\n", "def find_gatecrashers(people, invitations):\n    inv_set = set()\n    for i in invitations:\n        inv_set.add(i[0])\n        inv_set.update(i[1])\n    res = sorted(list(set(people)-inv_set))\n    return res", "def find_gatecrashers(people, invitations):\n    known = set()\n    for (inviting, invited) in invitations:\n        known.add(inviting)\n        known |= set(invited)\n    return [p for p in people if p not in known]"]