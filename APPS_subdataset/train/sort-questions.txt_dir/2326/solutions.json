["from collections import defaultdict\n\nN = int(input())\na = [int(i) for i in input().split()]\n\nb = defaultdict(lambda : [float('inf'), 0])\nfor i in range(N) :\n    b[a[i]][0] = min(b[a[i]][0], i)\n    b[a[i]][1] += 1\n\n# [value, first_appearance, count]\nc = [(0, 0, 0)]\nfor k, v in b.items() :\n    c.append((k, v[0], v[1]))\nc.sort()\n\nret = [0] * N\npre_v, pre_i, pre_c = c.pop()\nwhile c :\n    cur_v, cur_i, cur_c = c.pop()\n    ret[pre_i] += (pre_v - cur_v) * pre_c\n    cur_c += pre_c\n    pre_v, pre_i, pre_c = cur_v, min(pre_i, cur_i), cur_c\n    \nfor r in ret :\n    print(r)", "import sys\ninput = sys.stdin.readline\n\ndef I(): return int(input())\ndef MI(): return list(map(int, input().split()))\ndef LI(): return list(map(int, input().split()))\n\n\"\"\"\n\u53ef\u80fd\u306a\u3089\u5de6\u304b\u3089\u53d6\u308b\n\u5de6\u5074\u306b\u3042\u308b\u6570\u5b57\u306e\u3069\u308c\u304b\u306b\u8ffd\u3044\u4ed8\u3044\u305f\u3089\uff0c\u305d\u3053\u306f\u3082\u3046\u9078\u3070\u308c\u306a\u3044\uff0e\n\u9078\u3076\u6570\u5b57\u3092\u3069\u3093\u3069\u3093\u5de6\u306b\u30b7\u30d5\u30c8\u3057\u3066\u3044\u304f\uff0e\n\n\u5de6\u306b\u79fb\u52d5\u3059\u308b\u3068\u304d\uff0c\u5de6\u5074\u306b\u3042\u308b\u6700\u5927\u5024\u3068\u305d\u306e\u4f4d\u7f6e\u3092\u53d6\u308a\u305f\u3044:seg\u6728\u3067\u3044\u3051\u308b\uff08A[i],-i\uff09\u3092\u6301\u3063\u3066\u6700\u5927\u5024\u3092\u53d6\u308c\u3070\u4f4d\u7f6e\u3082\u308f\u304b\u308b\uff0e\n\n\u6570\u5b57\u3092\u4f7f\u3046\u56de\u6570\u3092\u30ab\u30a6\u30f3\u30c8\u3059\u308b\u305f\u3081\u306b\u306f\uff0c\u5de6\u5074\u306b\u3042\u308b\u6700\u5927\u5024\u306f\u5fc5\u8981\uff0e\u3042\u3068\uff0c\u53f3\u5074\u306b\u3042\u308b\u81ea\u5206\u3068\u540c\u3058\u6570\u306e\u500b\u6570\uff0c\u3082\u5fc5\u8981\uff0e\n\u500b\u6570\u3060\u3051\u3067\u3088\u304f\uff0c\u4f4d\u7f6e\u60c5\u5831\u306f\u3044\u3089\u306a\u3044\u306e\u3067\u5de6\u306b\u30b7\u30d5\u30c8\u3057\u3066\u3044\u304f\u3068\u304d\u306bdd\u3067\u500b\u6570\u3060\u3051\u6301\u3063\u3066\u304a\u304f\u304b\n\u53f3\u5074\u306e\u4f7f\u3044\u65b9\u304c\u5909\u3060\u306a\uff0c326154\u307f\u305f\u3044\u306a\u4e26\u3073\u3060\u3068\uff0c6\u30923\u306b\u4e0b\u3052\u308b\u3068\u304d\u306b\uff0c\u53f3\u5074\u306b\u3042\u308b45\u3092\u3069\u3063\u3061\u3082\u3092\u88dc\u8db3\u3059\u308b\u5fc5\u8981\u3042\u308a\n\n\u3046\u308f\uff0c\u4f8b2\u306e\u7b54\u3048\u306e\u3068\u3053\u898b\u9593\u9055\u3048\u3066\u305f\uff0c\u666e\u901a\u306b\u8a08\u7b97\u3057\u305f\u901a\u308a\u306e\u8ee2\u5012\u6570\u30b8\u30e3\u30f3\uff0e\ni\u756a\u76ee\u3092\u898b\u3066\u3044\u308b\u72b6\u614b\n\u6b21\u306e\u3082\u306e\u304c\u81ea\u5206\u3088\u308a\u5de6\u5074\u306b\u51fa\u3066\u304f\u308b:\u5dee\u5206*i\u4ee5\u4e0a\u306e\u4f4d\u7f6e\u306b\u3042\u308b\u500b\u6570\n\u6b21\u306e\u3082\u306e\u304c\u81ea\u5206\u3088\u308a\u53f3\u5074\u306b\u51fa\u3066\u304f\u308b:\u3080\u3057\n\n\u540c\u3058\u6570\u5b57\u304c\u51fa\u3066\u304f\u308b\u3068\u304d\uff1a\u6b21\u306e\u6570\u5b57\u306f\u5de6\u5074\u3068\u3057\u305f\u3044\u304c\uff0c\u53f3\u306b\u51fa\u3066\u304f\u308b\u5206\u306e\u500b\u6570\u3082\u52a0\u5473\u3057\u305f\u3044\n+1\u3067\u306f\u306a\u304f\uff0c\u6b21\u306e\u6570\u3068\u306e\u5dee\u5206\n\u3068\u304b\u601d\u3063\u3066\u305f\u3051\u3069\uff0c\u7d50\u5c40\u8db3\u3059\u306e\u306f\u6b21\u306b\u5de6\u306e\u6570\u304c\u51fa\u3066\u304d\u305f\u6642\u306a\u306e\u3067\u3044\u3089\u306a\u3044\n\n\u7d50\u5c40\u5dee\u5206\u304c\u5927\u4e8b\uff0e\u6b21\u3068\u306e\u5dee\u5206\u3092\u898b\u308b\u3060\u3051\u306a\u3089\u3070\uff0c\u500b\u6570\u304c\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u306e\u3053\u3068\u3092\u3042\u307e\u308a\u8003\u3048\u306a\u304f\u3066\u3082\u826f\u3044\n\u5927\u304d\u3044\u9806\u306b\u898b\u3066\u3044\u304f\u3060\u3051\u306a\u306e\u3067\uff0c\u500b\u6570=\u898b\u305f\u500b\u6570\u3067\u826f\u3044\n\n\n\"\"\"\ndef main():\n    N=I()\n    A=LI()\n    for i in range(N):\n        A[i]=(A[i],i)\n    \n    A.sort(reverse=True)\n    A.append((0,0))\n    ans=[0]*N\n    \n    now=A[0][1]#\u3069\u3053\u306b\u8ffd\u52a0\u3059\u308b\u304b\n    for i in range(N):\n        ans[now]+=(i+1)*(A[i][0] - A[i+1][0])\n        now=min(now,A[i+1][1])\n    \n    for i in range(N):\n        print((ans[i]))\n    \n    \n\nmain()\n", "N, = list(map(int, input().split()))\nX = list(map(int, input().split()))\n\nsx = []\nc = 0\nd = dict()\nfor x in sorted(list(set(X))):\n    sx.append(x)\n    d[x] = c\n    c += 1\nsx.append(10**18)\n\ncount = [0]*(c+1)\nfor x in X:\n    count[d[x]] += 1\nfor i in range(c-1, -1, -1):\n    count[i] += count[i+1]\n\ncount2 = [0]*(c+1)\nfor i in range(c-1, -1, -1):\n    count2[i] = count[i+1]*(sx[i+1]-sx[i])\nfor i in range(c-1, -1, -1):\n    count2[i] += count2[i+1]\n\n\n\nY = []\nfor i in range(N):\n    Y.append((X[i], -i))\nY.sort()\nR = []\nwhile Y:\n    y, j = Y.pop()\n    j = -j\n    if not R:\n        R.append((d[y], j))\n    else:\n        if d[y] < R[-1][0] and j < R[-1][1]:\n            R.append((d[y], j))\n\n\n\nRR = [0]*N\nb = 0\nbi = 0\nfor y, i in R[:]:\n    RR[bi] = count2[y]-b\n    b = count2[y]\n    bi = i\nRR[0] = sum(X)-sum(RR[1:])\nfor r in RR:\n    print(r)\n\n", "n = int(input())\na = list(map(int, input().split()))\nl = [(0, n)]\nfor i, A in enumerate(a):\n    l.append((A, i))\nl.sort(reverse=True)\nans = [0] * n\nmi = float(\"inf\")\nfor i in range(n):\n    if mi > l[i][1]:\n        mi = l[i][1]\n    ans[mi] += (i + 1) * (l[i][0] - l[i + 1][0])\nfor i in range(n):\n    print(ans[i])", "from bisect import bisect_left\n\nn = int(input())\nalst = list(map(int, input().split()))\nlst = list(set(alst))\nlst.sort()\nblst = []\nfor a in alst:\n    blst.append(bisect_left(lst, a))\n\nimos = [0 for _ in range(len(lst) + 10)]\n\nfor b in blst:\n    imos[0] += 1\n    imos[b + 1] -= 1\nfor i in range(1, len(lst) + 10):\n    imos[i] += imos[i - 1]\n\nbef = 0\nfor b in blst:\n    if b < bef:\n        print((0))\n        continue\n    total = 0\n    while bef <= b:\n        if bef == 0:\n            total += imos[bef] * lst[bef]\n        else:\n            total += imos[bef] * (lst[bef] - lst[bef - 1])\n        bef += 1\n    print(total)\n", "N = int(input())\nA = list(map(int,input().split()))\n\nfrom collections import defaultdict\nG = defaultdict(list)\nD = {}\n\nfor i in range(N):\n    tmp = A[i]\n    G[tmp].append(i)\n    \nkeylist = []\n\nfor key in G:\n    G[key].sort()\n    D[key] = len(G[key])\n    keylist.append(key)\n\nkeylist.sort()\nkeylist = keylist[::-1]\nkeylist.append(0)\n\nD[0] = 0\nG[0].append(0)\n\nans = [0]*N\n\nfor i in range(len(keylist)-1):\n    key = keylist[i]\n    nextkey = keylist[i+1]\n    tmpi = G[key][0]\n    ans[tmpi] += D[key]*(key-nextkey)\n    \n    D[nextkey] += D[key]\n    G[nextkey][0] = min(G[nextkey][0],tmpi)\n    \nfor i in ans:\n    print(i)", "from heapq import heappush, heappop\nN = int(input())\nA = [int(a) for a in input().split()]\nS = {}\nm = (1 << 18) - 1\nfor i, a in enumerate(A):\n    if a not in S:\n        S[a] = (i << 18) ^ 1\n    else:\n        aacc = S[a]\n        aa, cc = aacc >> 18, aacc & m\n        S[a] = (min(aa, i) << 18) ^ (cc + 1)\n\nH = [0]\nhpush = lambda x: heappush(H, -x)\nhpop = lambda: -heappop(H)\n\nfor a in S:\n    micc = S[a]\n    mi, cc = micc >> 18, micc & m\n    aicc = (a << 36) ^ (mi << 18) ^ cc\n    hpush(aicc)\n\nm36 = (1 << 36) - 1\nm18 = (1 << 18) - 1\nANS = [0] * N\nwhile len(H) > 1:\n    aicc = hpop()\n    a = aicc >> 36\n    i = (aicc >> 18) & m18\n    cc = aicc & m18\n    aicc = hpop()\n    a2 = aicc >> 36\n    i2 = (aicc >> 18) & m18\n    cc2 = aicc & m18\n    ANS[i] += (a - a2) * cc\n    \n    if a2 == 0: continue\n    hpush((a2 << 36) ^ (min(i, i2) << 18) ^ (cc + cc2))\n\nprint(\"\\n\".join(map(str, ANS)))", "n = int(input())\na = list(map(int,input().split()))\nb = list(range(n))\ns = list(map(list,zip(a,b)))\ns.sort(reverse=True)\ns.append([0,0])\nans = [0]*n\nfor i in range(n):\n  dif = s[i][0]-s[i+1][0]\n  ans[s[i][1]] += dif*(i+1)\n  if s[i+1][1]>s[i][1]:\n    s[i+1][1] = s[i][1]\nprint(*ans,sep=\"\\n\")", "import sys\n\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep=\"\\n\")\ndef II(): return int(sys.stdin.readline())\ndef MI(): return map(int, sys.stdin.readline().split())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef SI(): return sys.stdin.readline()[:-1]\n\ndef main():\n    n = II()\n    aa = LI()\n    # \u3067\u304d\u308b\u6570\u5217\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u304b\u304b\u308c\u308b\u3068\u304d\u306e\u6700\u5927\u5024\u306e\u5e95(bottom)\n    bot = []\n    mx = 0\n    for i, a in enumerate(aa):\n        if a > mx:\n            bot.append((mx, i))\n            mx = a\n    #print(bot)\n    aa.sort()\n    ans = [0] * n\n    j = n\n    s = 0\n    fin=0\n    for mx, i in bot[::-1]:\n        while j > 0 and aa[j - 1] > mx:\n            j -= 1\n            s += aa[j]\n        ans[i]=s-(n-j)*mx-fin\n        # print(mx,i,j,s,fin,ans)\n        fin+=ans[i]\n    print(*ans,sep=\"\\n\")\n\nmain()\n", "N = int(input())\nA = [int(_) for _ in input().split()]\n\n\ndef compress_coord(raw):\n    v_i = {}\n    for i, v in enumerate(raw):\n        if v not in v_i:\n            v_i[v] = []\n        v_i[v] += [i]\n    return v_i\n\n\na_i = compress_coord(A)\nA2 = sorted(a_i.keys())[::-1]\nans = [0] * N\nn = 0\ni = 10**10\nfor iv, a in enumerate(A2):\n    if iv < len(A2) - 1:\n        anext = A2[iv + 1]\n    else:\n        anext = 0\n    i = min(i, a_i[a][0])\n    n += len(a_i[a])\n    ans[i] += n * (a - anext)\nprint(*ans, sep='\\n')\n", "import sys\nsys.setrecursionlimit(2147483647)\nINF=float(\"inf\")\nMOD=10**9+7\ninput=lambda:sys.stdin.readline().rstrip()\ndef resolve():\n    n=int(input())\n    AI=[(a,i) for i,a in enumerate(map(int,input().split()))]\n    AI.append((0,-1))\n    AI.sort(reverse=1)\n\n    m=INF\n    ans=[0]*n\n    for i in range(n):\n        d=AI[i][0]-AI[i+1][0]\n        m=min(m,AI[i][1])\n        ans[m]+=(i+1)*d\n\n    print(*ans,sep='\\n')\nresolve()", "import sys\nread = sys.stdin.read\n\nn, *A = map(int, read().split())\nS = sorted([(a, i) for i, a in enumerate(A)], reverse=True)\nX, Y = zip(*S)\nm = 10**9\nL = [0]*n\nfor i, y in enumerate(Y):\n  m = min(m, y)\n  if i == n-1:\n    L[m] += (i+1) * X[i]\n  else:\n    L[m] += (i+1) * (X[i] - X[i+1])\nprint(*L, sep=\"\\n\")", "from collections import defaultdict, Counter\nN = int(input())\nA = [0] + list(map(int, input().split()))\nC = Counter(A)\n\nvalue = sorted(set(A), reverse=True)\na_to_i = defaultdict(int)\n\nfor i, a in enumerate(A):\n    if not a_to_i[a]:\n        a_to_i[a] = i\n\nans = [0] * (N + 1)\ncnt = 0\ni = N\nfor x, y in zip(value[:-1], value[1:]):\n    i = min(i, a_to_i[x])\n    cnt += C[x]\n    ans[i] += (x - y) * cnt\n\nprint(*ans[1:], sep=\"\\n\")", "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))\nwrite = lambda x: sys.stdout.write(x+\"\\n\")\n\n\nn = int(input())\na = list(map(int, input().split()))\na = [(-num, i) for i,num in enumerate(a)]\na.append((0, -1))\nimport heapq\nheapq.heapify(a)\nans = [0]*n\n\npnum, pi = heapq.heappop(a)\npnum *= -1\ncount = 1\nv = pnum\nwhile a:\n    num, i = heapq.heappop(a)\n    num *= -1\n    if i<pi:\n        ans[pi] = v - num*count\n        v = num*(count+1)\n        count += 1\n        pi = i\n    else:\n        count += 1\n        v += num\nwrite(\"\\n\".join(map(str, ans)))", "N = int(input())\nA = list(map(int,input().split()))\n\nL = list(range(1, N+1))\n\nZIP = zip(A, L)\n\nZIP = sorted(ZIP, reverse = True)\n\nA, L = zip(*ZIP)\n\nans = [0] * (N + 1)\n\nMIN = float('INF')\n\nfor i in range(N-1):\n    MIN = min(MIN, L[i])\n    if A[i] - A[i+1] == 0:\n        continue\n    ans[MIN] += (A[i] - A[i+1]) * (i + 1)\nans[1] += sum(A) - sum(ans)\n\nfor i in range(1, N+1):\n    print(ans[i])", "# frequency\nfrom collections import defaultdict\nN = int(input())\nA = list(map(int, input().split()))\nseq = []\nfreq = [0 for i in range(N+1)]\nD = defaultdict(list)\nminD = defaultdict(int)\nfor i, v in enumerate(A):\n    D[v].append(i+1)\nfor key in D.keys():\n    minD[key] = min(D[key])\nfor cnt in D.keys():\n    seq.append((cnt, len(D[cnt]), minD[cnt]))\nseq.append((0, 0, 0))\nseq.sort(key=lambda x: -x[0])\nnow_height, now_size, now_min = seq[0]\n# howmany,group_size,minimum\nfor i in range(1, len(seq)):\n    freq[now_min] += (now_height-seq[i][0]) * now_size\n    now_min = min(now_min, seq[i][2])\n    now_size += seq[i][1]\n    now_height = seq[i][0]\nfor i in range(1, N+1):\n    print(freq[i])", "import sys\ninput = sys.stdin.readline\n\nN = int(input())\na = list(map(int, input().split()))\naa = list(set(a))\naa.sort()\ncompress = {aa[i]: i for i in range(len(aa))}\ncnt = [0] * len(aa)\nidx = [-1] * len(aa)\nfor i in range(N)[::-1]:\n    n = compress[a[i]]\n    cnt[n] += 1\n    idx[n] = i\nans = [0] * N\nfor n in range(1, len(aa))[::-1]:\n    i = idx[n]\n    ans[i] += cnt[n] * (aa[n] - aa[n-1])\n    cnt[n-1] += cnt[n]\n    idx[n-1] = min(idx[n-1], i)\nans[0] += N * aa[0]\nprint(*ans, sep='\\n')", "def main():\n    n = int(input())\n    a = list(enumerate(map(int, input().split())))\n\n    a.sort(key=lambda x: x[1], reverse=True)\n    a.append((-1, 0))\n\n    # min_ind = min(a[:i+1])[0]\n    min_ind = n\n    ans = [0] * n\n    for i in range(n):\n        ind, value = a[i]\n        if ind < min_ind:\n            min_ind = ind\n\n        ans[min_ind] += (value - a[i+1][1]) * (i+1)\n\n    for i in ans:\n        print(i)\n\nmain()", "# coding: utf-8\nimport sys\nfrom bisect import bisect_left, bisect_right, insort\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n\n\"\"\" \n\u77f3\u6570\u6700\u5927\u306e\u4e2d\u3067\u53f3\u306e\u5c71\u304b\u3089\u53d6\u308a\u9664\u304f\n\u6b21\u306e\u6570\u307e\u3067\u307e\u3068\u3081\u3066\u77f3\u3092\u53d6\u308a\u9664\u304f\n\"\"\"\nN = ir()\nA = lr()\nA = [(x, i+1) for i, x in enumerate(A)] + [(0, 0)]\nA.sort(reverse=True)\nanswer = [0] * (N+1)  # 1-indexed\nmi = 10 ** 10\nmi_index = 10 ** 10\nfor i, (x, pre_index) in enumerate(A[:-1]):\n    diff = A[i][0] - A[i+1][0]\n    if pre_index < mi_index:\n        mi_index = pre_index\n    answer[mi_index] += diff * (i+1)\n\nprint(('\\n'.join(map(str, answer[1:]))))\n", "import sys\nfrom collections import defaultdict as dd\ninput = sys.stdin.readline\nN = int(input())\na = list(map(int, input().split()))\nd = dd(int)\nc = dd(int)\nfor i in range(N - 1, -1, -1):\n  d[a[i]] = i\n  c[a[i]] += 1\nc[0] = 0\nks = sorted(d.keys())\nres = [0] * N\nfor i in range(len(ks) - 1, 0, -1):\n  x = ks[i]\n  y = ks[i - 1]\n  c[y] += c[x]\n  d[y] = min(d[y], d[x])\nfor i in range(len(ks)):\n  x = ks[i]\n  y = 0\n  if i > 0: y = ks[i - 1]\n  res[d[x]] += c[x] * (x - y)\nfor r in res: print(r)", "# -*- coding: utf-8 -*-\nimport bisect\nimport heapq\nimport math\nimport random\nimport sys\nfrom collections import Counter, defaultdict, deque\nfrom decimal import ROUND_CEILING, ROUND_HALF_UP, Decimal\nfrom functools import lru_cache, reduce\nfrom itertools import combinations, combinations_with_replacement, product, permutations\nfrom operator import add, mul, sub\n\nsys.setrecursionlimit(100000)\ninput = sys.stdin.readline\nINF = 2**62-1\n\ndef read_int():\n    return int(input())\n\n\ndef read_int_n():\n    return list(map(int, input().split()))\n\n\ndef read_float():\n    return float(input())\n\n\ndef read_float_n():\n    return list(map(float, input().split()))\n\n\ndef read_str():\n    return input().strip()\n\n\ndef read_str_n():\n    return list(map(str, input().split()))\n\n\ndef error_print(*args):\n    print(*args, file=sys.stderr)\n\n\ndef mt(f):\n    import time\n\n    def wrap(*args, **kwargs):\n        s = time.time()\n        ret = f(*args, **kwargs)\n        e = time.time()\n\n        error_print(e - s, 'sec')\n        return ret\n\n    return wrap\n\n\n@mt\ndef slv(N, A):\n    ai = [(0, -1)] + [(a, i+1) for i, a in enumerate(A)]\n    ai.sort()\n    A = [a for a, i in ai]\n    I = [i for a, i in ai]\n    ans = [0] * (N+1)\n\n    i = N\n    same = 0\n    q = []\n    while i != 0:\n        j = i\n        while True:\n            j -= 1\n            if I[j] < I[i]:\n                break\n            heapq.heappush(q, A[j])\n        d = A[i] - A[j]\n        ans[I[i]] = d * (same+1)\n        same += 1\n        while q and q[0] >= A[j]:\n            b = heapq.heappop(q)\n            ans[I[i]] += b - A[j]\n            same += 1\n        i = j\n    for r in ans[1:]:\n        print(r)\n\ndef main():\n    N = read_int()\n    A = read_int_n()\n    (slv(N, A))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N=int(input())\nA=list(map(int,input().split()))\n\nnum=A[0]\ndata=[[A[0],0]]\n\nfor i in range(1,N):\n    if A[i]>num:\n        data.append([A[i],i])\n        num=A[i]\n        \nB=sorted(A,reverse=True)\nC=[0]*N\nC[0]=B[0]\nfor i in range(1,N):\n    C[i]=C[i-1]+B[i]\n    \n    \nans=[0]*N\ncnt=0\nkkk=0\nfor i in range(len(data)-1,0,-1):\n    \n    zzz=data[i-1][0]\n    while kkk<N and B[kkk]>zzz:\n        kkk+=1\n    num=C[kkk-1]-kkk*zzz\n    num-=cnt\n    ans[data[i][1]]=num\n    cnt+=num\n\nans[0]=sum(A)-sum(ans)\n\nfor u in ans:\n    print(u)", "def main():\n    import sys,bisect\n    input = sys.stdin.readline\n\n    n = int(input())\n    a = list(map(int,input().split()))\n\n    b = [0] + sorted(a)\n\n    res = [0]*n\n\n    d = dict()\n    for i in range(n):\n        if not a[i] in d:\n            d[a[i]] = i\n\n    p = n\n    while p > 0:\n        k = bisect.bisect_left(b,b[p])\n        res[d[b[k]]] += (n+1-k)*(b[k]-b[k-1])\n        if k -1 >= 1:\n            d[b[k-1]] = min(d[b[k]],d[b[k-1]])\n        p = k-1\n    for e in res:\n        print(e)\n\ndef __starting_point():\n    main()\n__starting_point()", "N = int(input())\nB = list(map(int, input().split()))\nA = [(B[i], i) for i in range(N)]\n\nA.sort(key = lambda x: x[0], reverse = True)\n\nA.append((0, 0))\n\nans = [0] * N\ntmp = N + 1\ncount = 1\nfor index, a in enumerate(A[:-1]):\n    tmp = min(tmp, a[1])\n    ans[tmp] += count * (a[0] - A[index + 1][0])\n    count += 1\n\nprint (*ans, sep = '\\n')\n\n# print (A)\n", "N=int(input())\nA=list(map(int,input().split()))\nB=sorted([(i,a) for i,a in enumerate(A)],key=lambda x:x[1])[::-1]+[(N,0)]\nd=[0]*N\nm=N\nfor i in range(N):\n    m=min(m,B[i][0])\n    d[m]+=(i+1)*(B[i][1]-B[i+1][1])\nprint(*d,sep='\\n')", "import sys\nimport math\nfrom collections import defaultdict\nfrom bisect import bisect_left, bisect_right\n\nsys.setrecursionlimit(10**7)\ndef input():\n    return sys.stdin.readline()[:-1]\n\nmod = 10**9 + 7\n\ndef I(): return int(input())\ndef LI(): return list(map(int, input().split()))\ndef LIR(row,col):\n    if row <= 0:\n        return [[] for _ in range(col)]\n    elif col == 1:\n        return [I() for _ in range(row)]\n    else:\n        read_all = [LI() for _ in range(row)]\n        return map(list, zip(*read_all))\n\n#################\n\nN = I()\na = LI()\n\nasort = sorted(a)\n\nd = defaultdict(int)\nfor i in range(N):\n    d[a[i]] += 1\nkeys = sorted(list(d.keys()))\n\nans = [0]*N\nmax_ = 0\nplace = 0\nfor i in range(N):\n    if a[i] > max_:\n        diff = a[i]-max_\n        num = N-bisect_left(asort,a[i])\n        ans[i] = num*diff\n        for j in range(place,len(keys)):\n            if keys[j] <= max_:\n                continue\n            elif keys[j] >= a[i]:\n                place = j\n                break\n            else:\n                ans[i] += (keys[j]-max_)*d[keys[j]]\n        max_ = a[i]\n\nans[0] = sum(a)-sum(ans[1:])\n\nfor i in range(N):\n    print(ans[i])", "#!/usr/bin/env python3\nn = int(input())\na = [0] + list(map(int, input().split()))\np = sorted((-a[i], -i) for i in range(n + 1))\nans = [0] * (n + 1)\nm = n\nfor i in range(n):\n    k, v = -p[i][1], -p[i][0]\n    nv = -p[i + 1][0]\n    m = min(m, k)\n    ans[m] += (i + 1) * (v - nv)\nprint(*ans[1:], sep='\\n')\n", "#from collections import deque,defaultdict\nprintn = lambda x: print(x,end='')\ninn = lambda : int(input())\ninl   = lambda: list(map(int, input().split()))\ninm   = lambda:      map(int, input().split())\nins = lambda : input().strip()\nDBG = True # and False\nBIG = 10**18\nR = 10**9 + 7\n#R = 998244353\n\ndef ddprint(x):\n  if DBG:\n    print(x)\n\nn = inn()\na = inl()\nb = [(a[i],i) for i in range(n)]\nb.sort(reverse=True)\nb.append((0,0))\nans = [0]*n\nv = b[0][1]\nfor i in range(n):\n    ans[v] += (i+1)*(b[i][0]-b[i+1][0])\n    v = min(v,b[i+1][1])\nfor i in range(n):\n    print(ans[i])\n", "#1\u306f\u4e00\u610f\n#2\u306f\u5c0f\u3055\u3044\u756a\u53f7\u306e\u77f3\u306e\u6570\u304c\u5927\u304d\u304f\u306a\u308b\u3088\u3046\u306b\u3001\u5927\u304d\u3044\u756a\u53f7\u306e\u77f3\u3092\u9664\u304d\u305f\u3044\n\n#\u500b\u6570\u304c\u540c\u9806\u306e\u3082\u306e\u3092\u3001\u756a\u53f7\u5c0f\u4ee5\u5916\u304c\u500b\u6570\u304c\u6642\u70b9\u306b\u306a\u308b\u307e\u3067\u9664\u3044\u3066\u304b\u3089\u3001\u756a\u53f7\u5c11\u3092\u9664\u304f\nn = int(input())\na = list(map(int, input().split( )))\n\ncnt = {}#key\u306f\u500b\u6570\u3001\u8981\u7d20\u306f\u6700\u5c0f\u756a\u53f7\n\nfor i in range(n):\n    if a[i] in cnt:\n        cnt[a[i]][0] = min(cnt[a[i]][0],i)\n        cnt[a[i]][1]+=1\n    else:\n        cnt[a[i]] = [i,1]\n\n#\u500b\u6570\u3001\u6700\u5c0f\u756a\u53f7\u3001\u756a\u53f7\u306e\u6570    \nmins = [[k,cnt[k][0],cnt[k][1]] for k in cnt]\nmins.append([0,0,0])\n#\u672b\u7aef\u51e6\u7406\u306b\u306a\u3063\u3066\u3044\u306a\u3044\nmins.sort(reverse = True)\n#print(mins)\nans = [0]*n\n\nfor i in range(len(mins)-1):\n    k,cntk,l = mins[i][0],mins[i][1],mins[i][2]\n    ans[cntk] += (k-mins[i+1][0])*l\n    mins[i+1][2]+=l###=\u3058\u3083\u304a\u304b\u3057\u3044\n    if mins[i+1][1]>mins[i][1]:##\u8ffd\u52a0\n        mins[i+1][1] = mins[i][1]\n#ans[mins[-1][1]]=n*mins[-1][0]\n\nfor ai in ans:\n    print(ai)\n    \n\n\n\n", "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    target = [0]\n    prev = a[0]\n    for i in range(1, n):\n        if a[i] > prev:\n            target.append(i)\n            prev = a[i]\n\n    ax = [None] * n\n    for i in range(n):\n        ax[i] = [a[i], i]\n    ax.sort(reverse=True)\n\n    ans = [0] * n\n    mult = 1\n    for i in range(n-1):\n        ans[target[-1]] += (ax[i][0] - ax[i+1][0]) * mult\n        if (ax[i+1][0] < a[target[-1]] and ax[i+1][1] < target[-1]):\n            target.pop()\n        mult += 1\n    ans[target[-1]] += ax[n-1][0] * mult\n\n    for x in ans:\n        print(x)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "N = int(input())\nA = [0] + list(map(int, input().split()))\nB = [[a, i, 1] for i, a in enumerate(A)]\nC = sorted(B, reverse=True)\na_max, idx = 0, 0 # [value, idx]\nleft_max = [[0, 0] for i in range(N+1)] # [value, idx]\nfor i, a in enumerate(A):\n  left_max[i] = [a_max, idx]\n  if a > a_max:\n    a_max, idx = a, i\n\nans = [0] * (N+1)\nnext_i = C[0][1]\nfor _, i, _ in C:\n  a, _, num = B[i]\n  if i == next_i:\n    next_a, next_i = left_max[i]\n    now_i = i\n    ans[i] += (a - next_a) * num\n    B[next_i][2] += num\n  else:\n    ans[now_i] += (a - next_a) * num\n    B[next_i][2] += num\n\nprint(*ans[1:], sep='\\n')", "N = int(input())\nL = [0] + list(map(int,input().split()))\nD = {}\nD[0] = [0,0]\nfor i in range(1,N+1):\n    if L[i] not in D:\n        D[L[i]] = [i,1]\n    else:\n        D[L[i]][1] += 1\n\nA = list(D.items())\nA.sort(reverse=True)\n#print(A)\n\nans=0\nANS = [0 for i in range(N+1)]\n\nfor i in range(1,len(D)):\n    ANS[A[i-1][1][0]] += (A[i-1][0] - A[i][0]) * A[i-1][1][1]\n    A[i][1][0] = min(A[i-1][1][0],A[i][1][0])\n    A[i][1][1] += A[i-1][1][1]\n\nfor i in range(1,len(ANS)):\n    print(ANS[i])", "3.6\nn = int(input())\na = [int(item) for item in input().split()]\nawid = []\nfor i, item in enumerate(a):\n    awid.append((item, i))\nawid.sort(reverse=True)\n\nbit = [0] * (n + 1) \ncnt = [0] * (n + 1) \n# Add w to ax \ndef bit_add(bit, x, w):\n    while x <= n:\n        bit[x] += w\n        x += x & -x\n\n# Sum a1 to ax \ndef bit_sum(bit, x):\n    ret = 0\n    while x > 0:\n        ret += bit[x]\n        x -= x & -x\n    return ret\n\nmin_as = [-1] * n\nmin_a = 0\nfor i, item in enumerate(a):\n    if item > min_a:\n        min_as[i] = min_a\n        min_a = item\n\nans = [0] * n\nitr = 0\nsubbed = 0\nfor i, item in enumerate(min_as[::-1]):\n    place = n - 1 - i\n    if item != -1:\n        while itr < n and awid[itr][0] > item:\n            val, index = awid[itr]\n            bit_add(bit, index + 1, val)\n            bit_add(cnt, index + 1, 1)\n            itr += 1\n        ret = bit_sum(bit, n) - bit_sum(bit, place) - (bit_sum(cnt, n) - bit_sum(cnt, place)) * item - subbed\n        ans[place] = ret\n        subbed += ret\nfor item in ans:\n    print(item)", "n=int(input())\na=tuple(map(int,input().split()))\nb=[]\ns=[0]*n\nfor i in range(n):\n\tb.append((a[i],i))\nb.sort(reverse=True)\nb.append((0,0))\nMIN=10**9\nfor i in range(n):\n\tMIN=min(MIN,b[i][1])\n\ts[MIN]+=(i+1)*(b[i][0]-b[i+1][0])\nfor x in s:\n\tprint(x)", "N = int(input())\nA = [0] + list(map(int, input().split()))\n\n# \u5b9f\u4f53B\u3068\u5927\u304d\u3044\u9806\u306b\u30eb\u30fc\u30d7\u3092\u56de\u3057\u3066index\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u3060\u3051\u306eC\nB = [[a, i, 1] for i, a in enumerate(A)]\nC = sorted(B, reverse=True)\n\n# \u81ea\u5206\u3088\u308a\u5de6\u5074\u3067\u6700\u5927\u3068\u306a\u308b\u5024\u3068\u4f4d\u7f6e\n# \u6700\u5927\u3068\u306a\u308b\u5024\u304c\u8907\u6570\u3042\u308b\u5834\u5408\u306f\u6700\u3082\u5de6\u306e\u3082\u306e\u3092\u63a1\u7528\na_max, idx = 0, 0 # [value, idx]\nleft_max = [[0, 0] for i in range(N+1)] # [value, idx]\nfor i, a in enumerate(A):\n  left_max[i] = [a_max, idx]\n  if a > a_max:\n    a_max, idx = a, i\n\nans = [0] * (N+1)\nnext_i = C[0][1]\nfor _, i, _ in C: # index\u3060\u3051\u53d6\u5f97\n  a, _, num = B[i] # \u5b9f\u4f53\u3092\u53d6\u5f97\u3001num\u306f\u53f3\u5074\u3067\u540c\u3058\u6570\u306b\u306a\u3063\u305f\u3068\u304d\u3001\u540c\u3058\u5c71\u3068\u898b\u306a\u3057\u3066\u8a08\u7b97\u91cf\u524a\u6e1b\n  if i == next_i:\n    next_a, next_i = left_max[i] # \u6b21\u306e\u6700\u5927\u5024\u3067\u3042\u308bnext_a\u306b\u306a\u308b\u307e\u3067\u306f\u3053\u306ei\u304cs\u306b\u8ffd\u52a0\u3055\u308c\u308b\n    now_i = i\n    ans[i] += (a - next_a) * num # \u5dee\u5206(a-next_a)\u3092num\u56de\u5206\u8ffd\u52a0\n    B[next_i][2] += num # \u6b8b\u3063\u305f\u5206\u306fnext_i\u306e\u77f3\u304c\u6d88\u3055\u308c\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u6d88\u3055\u308c\u308b\u306e\u3067\u307e\u3068\u3081\u308b\n  else:\n    ans[now_i] += (a - next_a) * num\n    B[next_i][2] += num\n\nprint(*ans[1:], sep='\\n')", "def main():\n    N,*A=map(int, open(0).read().split())\n    L,C={},{}\n    for i,a in enumerate(A):\n        if a in C:\n            C[a]+=1\n        else:\n            C[a]=1\n            L[a]=i\n    Z=[0]*N\n    B=sorted(C,reverse=True)\n    l=N-1\n    cnt=0\n    for b,c in zip(B,B[1:]+[0]):\n        l=min(l,L[b])\n        cnt+=C[b]\n        Z[l]+=(b-c)*cnt\n    print(*Z, sep=\"\\n\")\n\ndef __starting_point():\n    main()\n__starting_point()", "# \u89e3\u8aacAC, add \u306e\u90e8\u5206\u3092\u81ea\u5206\u3067\u4f5c\u308c\u306a\u304b\u3063\u305f\n\n\ndef main():\n    N = int(input())\n    A = [int(i) for i in input().split()]\n    B = [(a, i+1) for i, a in enumerate(A)]\n    B.sort(reverse=True)\n    B.append((0, 0))\n    ans = [0]*(N+1)\n    idx = N+1\n    for i in range(N):\n        add = (i+1)*(B[i][0] - B[i+1][0])\n        idx = min(idx, B[i][1])\n        ans[idx] += add\n    print(*ans[1:], sep=\"\\n\")\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "from collections import Counter\nn = int(input())\nA = tuple(map(int, input().split()))\nC = Counter(A)\nans = [0 for _ in range(n)]\nD = dict()\nS = set(A)\nif len(S) == 1:\n    print((sum(A)))\n    for _ in range(n - 1):\n        print((0))\n    return()\nX = sorted(S, reverse=True)\nfor i, x in enumerate(X):\n    D[x] = i\n\nindex = [n + 1 for _ in range(len(S))]\nfor i, a in enumerate(A):\n    index[D[a]] = min(index[D[a]], i)\n\ncnt = 0\nx = n + 1\n\nfor i in range(1, len(S)):\n    tmp = X[i - 1]\n    nxt = X[i]\n    cnt += C[tmp]\n    x = min(x, index[D[tmp]])\n    ans[x] += (tmp - nxt) * cnt\n\nfor i, a in enumerate(A):\n    if a != 0:\n        cnt += C[nxt]\n        ans[i] += nxt * cnt\n        break\n\nfor a in ans:\n    print(a)\n", "n = int(input())\na = list(map(int, input().split()))\n\nb = sorted([(i+1, a[i]) for i in range(n)], key=lambda x: -x[1])\nans = [0]*(n+1)\nm = float('inf')\nfor i in range(n-1):\n    m = min(m, b[i][0])\n    if b[i][1] == b[i+1][1]:\n        continue\n    ans[m] += (i+1)*(b[i][1]-b[i+1][1])\nans[1] += sum(a) - sum(ans)\nfor i in range(1, n+1):\n    print(ans[i])", "from bisect import bisect_right, bisect_left\ninpl = lambda: list(map(int,input().split()))\nN = int(input())\nA = inpl()\nx = [-1]\ny = [0]\nfor i in range(N):\n    if A[i] > y[-1]:\n        x.append(i)\n        y.append(A[i])\nans = [0] * N\nL = len(x)\nk = [0] * (L+1)\ni = N-1\nbase = y[-1]\nfor n in range(L-1,0,-1):\n    roof = base\n    base = y[n-1]\n    height = roof - base\n    k[n] += k[n+1]\n    ans[x[n]] += k[n] * height\n    while i >= x[n]:\n        p = bisect_left(y, A[i])\n        ans[x[p]] += A[i] - y[p-1]\n        k[p-1] += 1\n        i -= 1\nfor i in range(N):\n    print((ans[i]))\n", "n = int(input())\na = list(map(int,input().split()))\n\nans = [0] * (n+1)\nd = dict()\nfor i,ai in enumerate(a,1):\n    if(ai in d):\n        d[ai][1] += 1\n    else:\n        d[ai] = [i,1]\nd[0] = [0,0]\n\na_unique = list(set(a))\na_unique.sort(reverse=True)\na_unique.append(0)\n\nfor i in range(len(a_unique)-1):\n    num = a_unique[i]\n    next = a_unique[i+1]\n    head = d[num][0]\n    ans[head] += (num-next) * d[num][1]\n\n    d[next][0] = min(d[next][0],d[num][0])\n    d[next][1] += d[num][1]\n\nprint('\\n'.join(map(str,ans[1:])))", "n = int(input())\na = list(map(int, input().split()))\n\ntmp = [[e, n - i] for i, e in enumerate(a)]\ntmp.sort(reverse=True)\n\naa = [[e, n - i] for e, i in tmp] + [[0, -1]]\n\nv_prev, i_prev = aa[0]\ni = 0\nans = [0] * n\nsm = 0\nwhile i < n:\n    while aa[i][1] >= i_prev:\n        sm += aa[i][0]\n        i += 1\n\n    ans[i_prev] += sm - aa[i][0] * i\n    sm = aa[i][0] * i\n    v_prev, i_prev = aa[i]\n\nprint(*ans, sep=\"\\n\")\n", "import typing\nimport sys\nimport math\nimport collections\nimport bisect\nimport itertools\nimport heapq\nimport decimal\nimport copy\nimport operator\n\n# sys.setrecursionlimit(10000001)\nINF = 10 ** 20\nMOD = 10 ** 9 + 7\n# MOD = 998244353\n\n# buffer.readline()\u306f\u3053\u3069\u3075\u3049\u3067\u6b7b\u306c\n\n\ndef ni(): return int(sys.stdin.readline())\ndef ns(): return list(map(int, sys.stdin.readline().split()))\ndef na(): return list(map(int, sys.stdin.readline().split()))\ndef na1(): return list([int(x)-1 for x in sys.stdin.readline().split()])\n\n\n# ===CODE===\n\ndef main():\n    n = ni()\n    ta = na()\n    a = []\n    for i, ai in enumerate(ta):\n        a.append([ai, -i])\n    a.sort(reverse=True)\n    a.append([0, 0])\n    cnt = [0 for _ in range(n)]\n\n    idx = 0\n    remain = a[0][0]\n    minval = -a[0][1]\n    while idx < n:\n        while a[idx][0] == remain:\n            idx += 1\n        cnt[minval] += (remain-a[idx][0])*idx\n\n        remain = a[idx][0]\n        minval = min(minval, -a[idx][1])\n\n    for c in cnt:\n        print(c)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "n = int(input())\na = list(map(int, input().split()))\n\na = list(zip(a, range(len(a))))\na = sorted(a, reverse = True) + [(0, 0)]\n\nans = [0] * n\nmin_ind = 10**9\n\nfor i in range(n):\n    tmp = a[i][0] - a[i+1][0]\n    min_ind = min(min_ind, a[i][1])\n    ans[min_ind] += (i+1) * tmp\n\nfor i in ans:\n    print(i)", "n = int(input())\na = list(map(int,input().split()))\nl = []\nans = [0 for i in range(n)]\nfor i in range(n):\n    l.append([a[i],i])\nl.sort(key=lambda x:x[1],reverse=True)\nl.sort(key=lambda x:x[0],reverse=True)\ncount = 1\ncount0 = 0\nb = l[0][0]\nc = l[0][1]\nfor i in range(1,n):\n    if l[i][0] == b:\n        count += 1\n        c = min(c,l[i][1])\n    else:\n        ans[c] += (b-l[i][0])*count\n        count += 1\n        b = l[i][0]\n        c = min(l[i][1],c)\nans[c] += b*count\nfor i in range(n):\n    print(ans[i])", "import sys\ninput = sys.stdin.readline\nfrom bisect import bisect_left\n\nN = int(input())\nA = list(map(int, input().split()))\n\ndics = []\nq = []\nInd = []\nans = [0]*N\n\nfor i, a in enumerate(A):\n    ia = bisect_left(q, a)\n    if ia == len(q):\n        Ind.append(i)\n        q.append(a)\n        dics.append({a:1})\n    else:\n        dic = dics[ia]\n        if not a in dic.keys():\n            dic[a] = 1\n        else:\n            dic[a] += 1\n\nL = len(q)\nfor l in reversed(range(L)):\n    if l == 0:\n        for k, v in dics[0].items():\n            ans[Ind[0]] += k*v\n    else:\n        bef = q[l-1]\n        for k, v in dics[l].items():\n            ans[Ind[l]] += (k-bef)*v\n            dics[l-1][bef] += v\n\nfor a in ans:\n    print(a)", "# coding: utf-8\n# Your code here!\nimport sys\nread = sys.stdin.read\nreadline = sys.stdin.readline\n\nn,*a = map(int,read().split())\n\nres = [(0,-1)]+[(a[i],i) for i in range(n)]\nres.sort()\n\nans = [0]*n\nnum = 0\ncnt = 0\nmidx = idx = n-1\nv = res[-1][0]\n\n#print(res)\nwhile res:\n    #print(num,cnt,idx)\n    ans[midx] += (v-res[-1][0])*cnt\n    v = res[-1][0]\n\n    while res and res[-1][0]==v:\n        ai,idx = res.pop()        \n        cnt += 1\n    midx = min(midx,idx)\n\nprint(*ans,sep=\"\\n\")\n\n\n\n\n\n", "'''\n\u81ea\u5b85\u7528PC\u3067\u306e\u89e3\u7b54\n'''\nimport math\n#import numpy as np\nimport itertools\nimport queue\nimport bisect\nfrom collections import deque,defaultdict\nimport heapq as hpq\nfrom sys import stdin,setrecursionlimit\n#from scipy.sparse.csgraph import dijkstra\n#from scipy.sparse import csr_matrix\nipt = stdin.readline\nsetrecursionlimit(10**7)\nmod = 10**9+7 #998244353\ndir = [(-1,0),(0,-1),(1,0),(0,1)]\nalp = \"abcdefghijklmnopqrstuvwxyz\"\n\ndef main():\n    n = int(ipt())\n    ans = [0]*n\n    a = [int(i) for i in ipt().split()]\n    cts = [(a[0],0)]\n    d = defaultdict(int)\n    d[a[0]] = 1\n    tot = a[0]\n    for i,ai in enumerate(a[1::]):\n        tot += ai\n        d[ai] += 1\n        if cts[-1][0] < ai:\n            cts.append((ai,i+1))\n\n#    print(d,cts)\n    nms = sorted(list(d.keys()),reverse=True)\n    lc = len(cts)-1\n    na = cts[lc][0]\n    ps = cts[lc][1]\n    sm = 0\n    for i in nms:\n        sm += d[i]\n        if i == na:\n            lc -= 1\n            na = cts[lc][0]\n            ans[ps] += sm*(i-na)\n            pps = ps\n            ps = cts[lc][1]\n        else:\n            ans[pps] += d[i]*(i-na)\n#        print(ans)\n\n    ans[0] = tot-sum(ans[1::])\n\n    for i in ans:\n        print(i)\n\n\n\n    return None\n\ndef __starting_point():\n    main()\n\n__starting_point()", "def getN():\n    return int(input())\ndef getNM():\n    return list(map(int, input().split()))\ndef getList():\n    return list(map(int, input().split()))\n\nfrom collections import defaultdict, deque\nimport math\nimport copy\nfrom bisect import bisect_left, bisect_right\nimport heapq\nimport sys\n# sys.setrecursionlimit(1000000)\nINF = 10 ** 17\nMOD = 10 ** 9 + 7\ndef mint(lis):\n    return list(map(int, lis))\n\ndef bifind(arr_sorted, x):\n    idx = bisect_left(arr_sorted, x)\n    if idx == len(arr_sorted):\n        return False\n    if arr_sorted[idx] == x:\n        return True\n    else:\n        return False\ndef getyaku(n):\n    ret = []\n    for i in range(1, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            ret.append(i)\n            ret.append(n // i)\n\n    return ret\n\ndef find(x, a):\n    idx = bisect_left(a, x)\n    if idx == len(a):\n        return False\n    if a[idx] == x:\n        return True\n    else:\n        return False\n\ndef main():\n    n = getN()\n    nums = getList()\n    nums = [(x, i+1) for i, x in enumerate(nums)]\n    nums.append((0, INF))\n    nums.sort(key=lambda x: -x[0] * INF + x[1])\n    # print(nums)\n    mx = INF\n    ans = [0 for i in range(n+1)]\n    tmp_tgt = INF\n    through = 0\n    for a,b in nums:\n        if a != mx:\n            diff = mx - a\n\n\n\n            if mx != INF:\n                ans[tmp_tgt] += through * diff\n            mx = a\n            if b < tmp_tgt:\n                tmp_tgt = b\n        through += 1\n    for an in ans[1:]:\n        print(an)\n\ndef __starting_point():\n    main()\n\n\n__starting_point()", "N = int(input())\nA = [int(a) for a in input().split()]\n\nS = sum(A)\nfor i in range(N):\n    A[i] = [A[i], i+1]\n\nA.sort(reverse=True)\nans = [0]*(N+1)\ni = 0\nnum = N+1\nwhile i < N-1:\n    num = min(num, A[i][1])\n    while i < N-1 and A[i][0] == A[i+1][0]:\n        num = min(num, A[i+1][1])\n        i += 1\n    if i == N-1:\n        break\n    ans[num] += (i+1)*(A[i][0]-A[i+1][0])\n    i += 1\n\nans[1] += S-sum(ans)\nfor i in range(1, N+1):\n    print(ans[i])", "N = int(input())\nA = list(map(int, input().split()))\n\n# \u73fe\u5728\u672b\u5c3e\u306b\u8ffd\u52a0\u3055\u308c\u308b\u5c71\u3088\u308a\u82e5\u3044\u5c71\u3067\uff0c\u6700\u3082\u500b\u6570\u306e\u5927\u304d\u3044\u3082\u306e\u304c\u6b21\u306e\u5c71\u306b\u306a\u308b\n# \u4ed6\u306e\u5c71\u3092\u6b21\u306e\u5c71\u306e\u500b\u6570\u4ee5\u4e0b\u307e\u3067\u6e1b\u3089\u3059\n\nans = [0] * N\n\nnumList = [(a, i) for i, a in enumerate(A)]\nnumList.sort(reverse=True)\nnumList.append((0, 0))\n\ny = float('inf')\nfor c, (a, i) in enumerate(numList[: N], start=1):\n    y = min(y, i)\n    ans[y] += c * (a - numList[c][0])\n\nprint(*ans, sep='\\n')", "from heapq import heapify, heappop\n\nN = int(input())\nA = list(map(int, input().split()))\n\nque = [(-a, i + 1) for i, a in enumerate(A)]\nheapify(que)\n\nans = [0] * (N + 1)\ncnt = 0\nwhile que:\n    a, now = heappop(que)\n    cnt += 1\n    ans[now] = -a * cnt\n\n    while que and que[0][1] > now:\n        a, _ = heappop(que)\n        ans[now] += -a\n        cnt += 1\n\n    if que:\n        ans[now] -= -que[0][0] * cnt\n\nprint(*ans[1:], sep='\\n')\n", "n = int(input())\na = [[int(i), j] for j, i in enumerate(input().split())]\na.sort(reverse=1)\na.append([0, n-1])\nans = [0] * n\n\nj = n-1\nfor i in range(n):\n    j = min(j, a[i][1])\n    ans[j] += (i+1) * (a[i][0] - a[i + 1][0])\nprint((\"\\n\".join(map(str, ans))))\n", "import collections\nimport heapq\nn=int(input())\nA=[int(i) for i in input().split()]\nAns=[0]*n\nM=[0]\nfor i in range(n):\n  M.append(max(M[-1],A[i]))\nD=collections.defaultdict(int)\nH=[]\nfor i in range(n):\n  j=n-1-i\n  if A[j]<=M[j]:\n    heapq.heappush(H,-A[j])\n  else:\n    Ans[j]=(A[j]-M[j])*(D[A[j]]+1)\n    D[M[j]]+=D[A[j]]+1\n    ct=0\n    while H:\n      a=heapq.heappop(H)\n      a=-a\n      if a<=M[j]:\n        heapq.heappush(H,-a)\n        break\n      else:\n        Ans[j]+=a-M[j]\n        D[M[j]]+=1\n\nfor a in Ans:\n  print(a)\n", "\n\"\"\"\n\n\u77f3\u306e\u6570\u304c\u6700\u5927\u306e\u5185\u6570\u5b57\u304c\u5927\u304d\u3044\u3082\u306e\u304b\u3089\u53d6\u308a\u9664\u3044\u3066\u3044\u304f\u306e\u304c\u6700\u9069\uff1f\n\n\u524d\u306b\u3042\u308b\u3067\u304d\u308b\u3060\u3051\u6570\u304c\u591a\u3044\u3082\u306e\u306b\u8b72\u3063\u3066\u3044\u304f\n\n\u512a\u5148\u5ea6\u4ed8\u304d\u30ad\u30e5\u30fc\u3067a\u304c\u5927\u304d\u3044\u65b9\u304b\u3089pop\u3057\u3066\u3044\u304f\uff1f\n\nnum\u304c\u73fe\u5728\u3088\u308a\u5c0f\u3055\u3044\u2192\u4ee5\u964d\u3059\u308b\n\u305d\u3046\u3067\u306a\u3044 = \u73fe\u5728\u306enum\u3088\u308a\u306f\u4f4e\u3044\u304c\u6b21\u306enum\u3088\u308a\u306f\u5927\u304d\u3044\n\u2192\u6b21\u306enum\u304c\u78ba\u5b9a\u3057\u305f\u77ac\u9593\u306b\u5dee\u5206\u3092\u8a08\u7b97\u3057\u3066\u5b9a\u5e38\u6e1b\u5c11\u7528\u306b\u5165\u308c\u308b\n\n\u6700\u5f8c\u306f\u6b8b\u308a\u3092\u5168\u90e81\u306b\u5165\u308c\u3066\u7d42\u308f\u308a\n\"\"\"\nimport heapq\n\nN = int(input())\n\nans = [0] * N\n\na = list(map(int,input().split()))\n\nq = []\n\nfor i,na in enumerate(a):\n\n    heapq.heappush(q,[-1 * na , i])\n\nnowa , nowi = heapq.heappop(q)\nnowa *= -1\nalways = 0\ntempq = [nowa]\n\nfor i in range(N-1):\n\n    nexa , nexi = heapq.heappop(q)\n    nexa *= -1\n\n    if nexi > nowi:\n        tempq.append(nexa)\n\n    else:\n        nowpl = always * (nowa - nexa)\n\n        for j in tempq:\n            nowpl += j - nexa\n\n        always += len(tempq)\n        tempq = [nexa]\n\n        ans[nowi] += nowpl\n\n        nowa = nexa\n        nowi = nexi\n\nans[0] = sum(a) - sum(ans)\n\nprint (\"\\n\".join(map(str,ans)))", "import copy\n\nN = int(input())\nA = list(map(int,input().split()))\nB = copy.copy(A)\nB.sort()\n\nplace_dict = {0:0}\nnum_list = []\nct_dict = {}\ni = 1\nfor b in B:\n  if b not in place_dict:\n    place_dict[b] = i\n    num_list.append(b)\n    ct_dict[b] = 1\n    i += 1\n  else:\n    ct_dict[b] += 1\n\ntmp = 0\ntasks = [(0,0)]\ni = 0\nfor a in A:\n  i += 1\n  if tmp < a:\n    tmp = a\n    tasks.append((a,i))\n    \n#\u672c\u51e6\u7406\nM = len(num_list)\n#print(num_list)\nans = [0 for _ in range(N)]\nj = M-1\nct_abv = 0\n#print(ct_dict)\n#print(tasks)\nfor i in range(len(tasks)-1,0,-1):\n  tmp = 0\n  nxt = tasks[i-1][0]\n  while num_list[j] > nxt and j >= 0:\n    ct_abv += ct_dict[num_list[j]]\n    if j == 0:\n      tmp += ct_abv * num_list[0]\n    else:\n      tmp += ct_abv * (num_list[j] - num_list[j-1])\n    j -= 1\n  ans[tasks[i][1]-1] = tmp\n  #print(i,j,num_list[j],ct_abv)\n  \nprint(*ans, sep = \"\\n\")", "N = int(input())\nA = list(map(int,input().split()))\nD = []\nfor id,a in enumerate(A):\n  D.append([a,id])\nD = sorted(D)[::-1]\nD.append([0,0])\n#Cumsum = [0]\n#for i in D[::-1]:\n#  Cumsum.append(i[0]+Cumsum[-1])\n#Cumsum = Cumsum[::-1]\n#print(Cumsum)\ncnt = [0] * N\nminid = D[0][1]\nfor i in range(N):\n  d = D[i][0] - D[i+1][0]\n  cnt[minid] += d * (i + 1)\n  if D[i+1][1] < minid:\n    minid = D[i+1][1]\nfor i in range(N):\n  print((cnt[i]))\n\n", "import sys\ninput = sys.stdin.readline\nfrom itertools import accumulate\nN = int(input())\nA = list(map(int,input().split()))\n\ninf = 10**10\n\nS = [0] + sorted(list(set(A)))\ndic = {s:inf for s in S}\ncnt = {s:0 for s in S}\nsm = {s:0 for s in S}\nml = [0]\nfor i, a in enumerate(A):\n    if ml[-1] < a:\n        ml.append(a)\n    dic[a] = min(i,dic[a])\n    cnt[a] += 1\n    sm[a] += a\n\nfor ps, s in zip(S[:-1][::-1],S[::-1]):\n    cnt[ps] += cnt[s]\n    sm[ps] += sm[s]\n\nans = [0]*N\ntemp = {s:sm[s] - s*cnt[s] for s in S}\n\nfor ps, s in zip(ml[:-1][::-1],ml[::-1]):\n    ans[dic[s]] = temp[ps] - temp[s]\n\n[print(a) for a in ans]\n", "from bisect import bisect_left, bisect_right\n\nN = int(input())\nAs = list(map(int, input().split()))\n\nBs = [0]\nxs = [-1]\nfor i, A in enumerate(As):\n    if Bs[-1] < A:\n        Bs.append(A)\n        xs.append(i)\n\nlenB = len(Bs)\nsumAs = [0] * lenB\nnumFulls = [0] * lenB\nfor A in As:\n    i = bisect_left(Bs, A)\n    sumAs[i] += A - Bs[i-1]\n    numFulls[i-1] += 1\n\nfor i in reversed(list(range(lenB-1))):\n    numFulls[i] += numFulls[i+1]\n\nanss = [0] * N\nfor i in range(1, lenB):\n    ans = sumAs[i]\n    ans += (Bs[i]-Bs[i-1]) * numFulls[i]\n    anss[xs[i]] = ans\n\nprint(('\\n'.join(map(str, anss))))\n", "\nimport sys\nfrom collections import deque, defaultdict\nimport copy\nimport bisect\nsys.setrecursionlimit(10 ** 9)\nimport math\nimport heapq\nfrom itertools import product, permutations,combinations\nimport fractions\n\nimport sys\ndef input():\n\treturn sys.stdin.readline().strip()\n\nN = int(input())\na = list(map(int, input().split()))\n\ntop_list = [0]\n\n\nfor i in range(1, N):\n\n\tif a[i] > a[top_list[-1]]:\n\t\ttop_list.append(i)\n\nnum_list = [0]*N\ncom = []\nfor i in range(len(top_list)):\n\tcom.append(a[top_list[i]])\ncom.sort()\n\nfor i in range(N - 1, top_list[-1], -1):\n\tcom.append(a[i])\ncom.sort()\n\nstock = 0\n#print(com, top_list, num_list)\nfor top in range(len(top_list) - 2, -1, -1):\n\tif top_list[top + 1] - top_list[top] > 10000:\n\t\tfor i in range(top_list[top + 1] - 1, top_list[top], -1):\n\t\t\t#bisect.insort(com, a[i])\n\t\t\tcom.append(a[i])\n\t\tcom.sort()\n\telse:\n\t\tfor i in range(top_list[top + 1] - 1, top_list[top], -1):\n\t\t\tbisect.insort(com, a[i])\n\n\tjudge = 0\n\ttotal = stock*(a[top_list[top + 1]] - a[top_list[top]])\n\t#print(total, (a[top_list[top + 1]] - a[top_list[top]])*stock,  top)\n\twhile judge == 0:\n\t\tx = com.pop()\n\t\tif x > a[top_list[top]]:\n\t\t\ttotal += x - a[top_list[top]]\n\t\t\tstock += 1\n\t\telse:\n\t\t\tbisect.insort(com, x)\n\t\t\tjudge = 1\n\tnum_list[top_list[top + 1]] = total\n\t#print(com, top_list, num_list, stock)\n\n\nnum_list[top_list[0]] = sum(a) - sum(num_list)\nfor i in range(N):\n\tprint((num_list[i]))\n\n\n", "import bisect\n\nN = int(input())\na = list(map(int, input().split()))\n\nbig_list = []\nnum_list = []\nbiggest = 0\nfor i, a_i in enumerate(a):\n    if a_i > biggest:\n        big_list.append(a_i)\n        num_list.append(i)\n        biggest = a_i\nbig_list.append(10 ** 10)\nbig_list.append(0)\nnum_list.append(0)\nnum_list.append(0)\n\nans = [0] * N\na.sort()\nj = 0\nfor i, a_i in enumerate(a):\n    if a_i < big_list[j]:\n        ans[num_list[j]] += a_i - big_list[j - 1]\n    else:\n        ans[num_list[j]] += (big_list[j] - big_list[j - 1]) * (N - i)\n        j += 1\nfor i in range(N):\n    print((ans[i]))\n", "def main():\n    n=int(input())\n    a=list(map(int,input().split()))\n    d={0:[-1]}\n    for j,i in enumerate(a):\n        if i in d.keys():d[i].append(j)\n        else:d[i]=[j]\n    d=sorted([[i,min(j),len(j)] for i,j in d.items()],reverse=True)\n    ans=[0]*n\n    l=0\n    m=n\n    for k in range(len(d)-1):\n        x,y,z=d[k]\n        l+=z\n        m=min(m,y)\n        ans[m]+=(x-d[k+1][0])*l\n    for i in ans:\n        print(i)\nmain()", "import os\nimport sys\n\nif os.getenv(\"LOCAL\"):\n    sys.stdin = open(\"_in.txt\", \"r\")\n\nsys.setrecursionlimit(2147483647)\nINF = float(\"inf\")\nIINF = 10 ** 18\nMOD = 10 ** 9 + 7\n\nN = int(sys.stdin.readline())\nA = list(map(int, sys.stdin.readline().split()))\n\nXY = [(a, i) for i, a in enumerate(A)]\nXY.sort(reverse=True)\n\n# \u89e3\u8aac\nans = [0] * N\nmin_y = IINF\nfor i, (x, y) in enumerate(XY):\n    min_y = min(min_y, y)\n    x2 = XY[i + 1][0] if i + 1 < N else 0\n    ans[min_y] += (x - x2) * (i + 1)\nprint(*ans, sep='\\n')\n", "def main(n,a):\n  ret=[0]*n\n  d={}\n  for i,x in enumerate(a):\n    if x in d:\n      d[x].append(i)\n    else:\n      d[x]=[i]\n  v=sorted(list(d.keys()),reverse=True)\n  cnt_idx=0\n  min_idx=n+1\n  for i,x in enumerate(v):\n    cnt_idx+=len(d[x])\n    min_idx=min(min_idx,d[x][0])\n    nx=0\n    if i<len(v)-1:nx=v[i+1]\n    ret[min_idx]+=cnt_idx*(x-nx)\n  return ret\n\nn=int(input())\na=list(map(int,input().split()))\nprint(*main(n,a),sep='\\n')\n", "from collections import defaultdict\n\nN = int(input())\n*a, = list(map(int, input().split()))\n\ncnt = defaultdict(int)\npos = defaultdict(lambda :10**12)\nans = defaultdict(int)\n\nfor i, j in enumerate(a, start=1):\n    pos[j] = min(pos[j], i)\n    cnt[j] += 1\n\ntarget = [list(i) for i in sorted(pos.items())][::-1]\nsize = len(target)\n\nfor i in range(len(target)-1):\n    a, b = target[i]\n    c, d = target[i+1]\n    ans[b] += cnt[a]*(a-c)\n    cnt[c] += cnt[a]\n    cnt[a] = 0\n    target[i+1][1] = min(target[i+1][1], b)\n\na = target[-1][0]\nans[1] += cnt[a]*a\nfor i in range(1, N+1):\n    print((ans[i]))\n", "N, = list(map(int, input().split()))\nX = list(map(int, input().split()))\nY = []\nfor i in range(N):\n    Y.append((X[i], -i))\n\nsx = []\nc = 0\nd = dict()\nfor x in sorted(list(set(X))):\n    sx.append(x)\n    d[x] = c\n    c += 1\nsx.append(10**18)\n\ncount = [0]*(c+1)\nfor x in X:\n    count[d[x]] += 1\nfor i in range(c-1, -1, -1):\n    count[i] += count[i+1]\n\ncount2 = [0]*(c+1)\nfor i in range(c-1, -1, -1):\n    count2[i] = count[i+1]*(sx[i+1]-sx[i])\nfor i in range(c-1, -1, -1):\n    count2[i] += count2[i+1]\n\n\n\nY.sort()\nR = []\nwhile Y:\n    y, j = Y.pop()\n    if not R:\n        R.append((y, -j))\n    else:\n#        print(y, j, R[-1])\n        if y < R[-1][0] and -j < R[-1][1]:\n            R.append((y, -j))\n\n\n\n#print(count2)\n#print(R)\nRR = [0]*N\nb = 0\nbi = 0\nfor y, i in R[:]:\n#    print(y, d[y], i, bi)\n#    print(i, bi, count2[d[y]])\n\n    RR[bi] = count2[d[y]]-b\n    b = count2[d[y]]\n    bi = i\nRR[0] = sum(X)-sum(RR[1:])\nfor r in RR:\n    print(r)\n", "n = int(input())\na = list(map(int, input().split()))\nl = [(x,i) for i,x in enumerate(a)]\nl.sort(reverse=True)\nl += [(0,n)]\ng = [0]*n\nm = n\nfor i in range(n):\n  s = l[i][1]\n  if m > s: m = s\n  g[m] += (l[i][0]-l[i+1][0])*(i+1)\nfor x in g: print(x)", "n = int(input())\na = list(map(int, input().split()))\nb = [[a[i], i] for i in range(n)]\nb.sort(reverse = True)\nd = {}\ndcnt = {}\nfor i in range(n):\n    if not a[i] in d:\n        d[a[i]] = i\n        dcnt[a[i]] = 1\n    else:\n        dcnt[a[i]] = dcnt[a[i]] + 1\nb = [[0, 0] for _ in range(len(d) + 1)]\nk = 0\nfor i, j in d.items():\n    b[k][0], b[k][1] = i, j\n    k += 1\nb.sort(reverse = True)\nans = [0] * n\nj = b[0][1]\ncnt = 0\nfor i in range(len(d)):\n    cnt += dcnt[b[i][0]]\n    j = min(j, b[i][1])\n    ans[j] += (b[i][0] - b[i + 1][0]) * cnt\nfor i in ans:\n    print(i)", "n = int(input())\nA = list(map(int, input().split()))\n\nfrom collections import defaultdict\nd = defaultdict(lambda: (n, 0))\nfor i, a in enumerate(A):\n    min_id, cnt = d[a]\n    d[a] = (min(min_id, i), cnt+1)\n\nB = list(d.items())\nB.sort()\n\n#print(B)\n\nans = [0]*n\nwhile True:\n    a1, (m1, c1) = B.pop()\n    if not B:\n        ans[m1] += c1*a1\n        break\n    a2, (m2, c2) = B[-1]\n    ans[m1] += c1*(a1-a2)\n    B[-1] = (a2, (min(m1, m2), c1+c2))\n\nprint(*ans, sep='\\n')", "import sys\nfrom collections import defaultdict as dd\ninput = sys.stdin.readline\nN = int(input())\na = list(map(int, input().split()))\nd = dd(int)\nl = dd(lambda: N + 1)\nfor i in range(N):\n  d[a[i]] += 1\n  l[a[i]] = min(l[a[i]], i + 1)\n\n#print(d, l)\nks = sorted(d.keys(), reverse = True)\nres = [0] * (N + 1)\nfor i in range(len(ks) - 1):\n  t = ks[i] - ks[i + 1]\n  k = ks[i]\n  res[l[k]] += d[k] * t\n  d[ks[i + 1]] += d[k]\n  l[ks[i + 1]] = min(l[ks[i + 1]], l[k])\nres[1] += d[ks[-1]] * ks[-1]\nfor r in res[1: ]: print(r)", "N = int(input())\nA = [int(a) for a in input().split()]\n\nans = [0]*N\nnum = 0\nB = sorted(A)\nj = 0\nfor i in range(N):\n    cnt = 0\n    while j < N and B[j] <= A[i]:\n        cnt += max(0, B[j]-num)\n        j += 1\n    ans[i] = cnt + max(0, (N-j)*(A[i]-num))\n    num = max(num, A[i])\n\nfor a in ans:\n    print(a)", "import sys\n\ndef solve():\n    input = sys.stdin.readline\n    N = int(input())\n    A = [int(a) for a in input().split()]\n    nDict = dict()\n    Atype = list(set(A))\n    Atype.sort(reverse = True)\n    Atype.append(0)\n    for i, a in enumerate(A):\n        if a in nDict: nDict[a].append(i)\n        else: nDict[a] = [i]\n    count = [0] * N\n    minIndex = N\n    group = 0\n    for i in range(len(Atype) - 1):\n        cN = Atype[i]\n        minIndex = min(minIndex, nDict[cN][0])\n        group += len(nDict[cN])\n        nextN = Atype[i + 1]\n        count[minIndex] += (cN - nextN) * group\n    print(\"\\n\".join(map(str, count)))\n\n    return 0\n\ndef __starting_point():\n    solve()\n__starting_point()", "N = int(input())\nAs = list(map(int, input().split()))\n\nsorted_iAs = sorted(map(tuple, enumerate(As)), key = lambda t: (t[1], t[0]), reverse = True)\n\n#if As = 1 2 1 3 2 4 2 5 8 1\n#then sorted_iAs is:\n#   i | 8 7 5 3 6 4 1 9 2 0\n#   A | 8 5 4 3 2 2 2 1 1 1\n#I'll look at:\n#       x x x x     x     x\n#where the next A decreases (or doesn't exist).\n\nans = [0] * N\nyoungest_index = 10 ** 9\nfor index, (original_index, A) in enumerate(sorted_iAs):\n    youngest_index = min(original_index, youngest_index)\n    if index == N - 1:\n        ans[youngest_index] += A * (index + 1)\n    elif sorted_iAs[index + 1][1] < A:\n        next_A = sorted_iAs[index + 1][1]\n        ans[youngest_index] += (A - next_A) * (index + 1)\n\nprint(*ans, sep = '\\n')", "from bisect import bisect_right\n\nn = int(input())\na = list(map(int, input().split()))\n\nli = [[0, -1]]\nfor i, e in enumerate(a):\n    if e > li[-1][0]:\n        li.append([e, i])\n\nli = li[::-1]\n\na.sort()\nacc = [0] * (n + 1)\nfor i in range(n - 1, -1, -1):\n    acc[i] = acc[i+1] + a[i]\n\nans = [0] * n\nsub = 0\nans_prev = 0\nfor (ep, ip), (e, i) in zip(li, li[1:]):\n    j = bisect_right(a, e)\n    ans[ip] = acc[j] - e * (n - j)\n\ni_prev = 0\nfor i in range(1, n):\n    if ans[i]:\n        ans[i_prev] -= ans[i]\n        i_prev = i\n\nprint(*ans, sep=\"\\n\")\n", "# coding: utf-8\nimport sys\nfrom bisect import bisect_left, bisect_right, insort\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n\n\"\"\" \n\u5de6\u5074\u3067\u81ea\u5206\u3088\u308a\u5c0f\u3055\u3044\u6570\u5b57\u3068\u306e\u5dee\n\u53f3\u5074\u3067\u81ea\u5206\u3088\u308a\u5927\u304d\u3044\u6570\u5b57\u306e\u6570\n\u77f3\u6570\u6700\u5927\u306e\u5c71\u3067\u53f3\u306e\u7269\u304b\u3089\u53d6\u308a\u9664\u304f\n\"\"\"\nN = ir()\nA = lr()\nA = [(x, i+1) for i, x in enumerate(A)] + [(0, 0)]\nA.sort(reverse=True)\nanswer = [0] * (N+1)  # 1-indexed\nmi = 10 ** 10\nmi_index = 10 ** 10\nfor i, (x, j) in enumerate(A[:-1]):\n    diff = A[i][0] - A[i+1][0]\n    index = A[i][1]\n    if index < mi_index:\n        mi_index = index\n    answer[mi_index] += diff * (i+1)\n\nprint(('\\n'.join(map(str, answer[1:]))))\n", "class BIT:\n  def __init__(self, n):\n    self.N = n+1\n    self.bit = [0]*self.N\n  \n  def bit_sum(self, i):\n    s = 0\n    i += 1\n    while i>0:\n      s += self.bit[i]\n      i -= i & -i\n    return s\n\n  def bit_add(self, i, n):\n    i += 1\n    while i<self.N:\n      self.bit[i] += n\n      i += i & -i\n\nN, *A = list(map(int, open(0).read().split()))\ninf = [(a,i) for i, a in enumerate(A)]\nn = A[0]\nls = [0]\nfor i in range(1,N):\n  if A[i]>n:\n    n = A[i]\n    ls.append(i)\nB = BIT(N)\nC = BIT(N)\ninf.sort(reverse=True)\ncnt = [0]*N\nccnt = [0]*N\nfor a,i in inf:\n  B.bit_add(i,a)\n  cnt[i] = B.bit_sum(N-1)-B.bit_sum(i)\nfor a, i in inf:\n  C.bit_add(i,1)\n  ccnt[i] = C.bit_sum(N-1)-C.bit_sum(i)\n\nans = [0]*N\ns = sum(A)\np = 0\nx = 0\nfor i in range(len(ls)-1,0,-1):\n  a = ls[i]\n  b = ls[i-1]\n  m = cnt[b]-A[b]*ccnt[b]\n  n = m-x\n  ans[a] = n\n  s -= n\n  x += ans[a]\nans[0] = s\nprint(('\\n'.join(map(str,ans))))\n", "N = int(input())\na = list(map(int, input().split()))\nD = []\nfor i in range(N):\n    D.append((a[i], i))\nD.append((0, -1))\nD.sort(reverse=True)\nans = [0] * N\nmi = float('inf')\nfor i in range(N):\n    mi = min(mi, D[i][1])\n    ans[mi] += (D[i][0] - D[i + 1][0]) * (i + 1)\n\nfor i in ans:\n    print(i)", "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = [0]*n\n    b = [v for v in a]\n    b.append(0)\n    b.sort()\n    dic = {}\n    cnt = []\n    num = []\n    for v in b:\n        if v in dic:\n            cnt[dic[v]] += 1\n        else:\n            p = len(cnt)\n            cnt.append(1)\n            dic[v] = p\n            num.append(v)\n    min_idx = [n]*len(cnt)\n    for i, v in enumerate(a):\n        if min_idx[dic[v]] > i:\n            min_idx[dic[v]] = i\n    for i in reversed(range(1, len(cnt))):\n        dif = num[i] - num[i-1]\n        ans[min_idx[i]] += dif * cnt[i]\n        if min_idx[i-1] > min_idx[i]:\n            min_idx[i-1] = min_idx[i]\n        cnt[i-1] += cnt[i]\n    for v in ans:\n        print(v)\n\ndef __starting_point():\n    main()\n__starting_point()", "import sys\ninput = sys.stdin.readline\n\nn = int(input())\nA = list(map(int,input().split()))\n\nB = [[A[i], i] for i in range(n)]\nB.sort(key=lambda x:x[1])\nB.sort(key=lambda x:x[0], reverse=True)\nB.append([0, 0])\n\nANS = [0] * n\nind = n+1\nm = 0\nfor i in range(n):\n    if B[i][1] < ind:\n        ind = B[i][1]\n    m += 1\n    ANS[ind] += m * (B[i][0]-B[i+1][0])\n\nfor i in ANS:\n    print(i)", "n = int(input())\nA = list(map(int,input().split()))\n\nparent = [(0,-1)]\nnow = 0\nfor i,a in enumerate(A):\n    if now < a:\n        parent.append((a,i))\n        now = a\nA.sort()\nans = [0]*n\ncnt = 0\np = parent[-1][1]\nfor a in A[::-1]:\n    if parent[-1][0] >= a:\n        p = parent[-1][1]\n        ans[p] += cnt*(parent[-1][0] - parent[-2][0])\n        parent.pop()\n    if parent[-1][0] < a:\n        cnt += 1\n        ans[p] += a - parent[-1][0]\nprint(('\\n'.join(str(i) for i in ans)))\n", "n = int(input())\nA = list(map(int, input().split()))\n\nfrom collections import defaultdict\nd = defaultdict(lambda: (n, 0))\nfor i, a in enumerate(A):\n    min_id, cnt = d[a]\n    d[a] = (min(min_id, i), cnt+1)\n\nB = list(d.items())\nB.sort()\n\n#print(B)\n\nans = [0]*n\nwhile True:\n    a1, (m1, c1) = B.pop()\n    if not B:\n        ans[m1] += c1*a1\n        break\n    a2, (m2, c2) = B[-1]\n    ans[m1] += c1*(a1-a2)\n    B[-1] = (a2, (min(m1, m2), c1+c2))\n\nprint(*ans, sep='\\n')", "#1\u306f\u4e00\u610f\n#2\u306f\u5c0f\u3055\u3044\u756a\u53f7\u306e\u77f3\u306e\u6570\u304c\u5927\u304d\u304f\u306a\u308b\u3088\u3046\u306b\u3001\u5927\u304d\u3044\u756a\u53f7\u306e\u77f3\u3092\u9664\u304d\u305f\u3044\n\n#\u500b\u6570\u304c\u540c\u9806\u306e\u3082\u306e\u3092\u3001\u756a\u53f7\u5c0f\u4ee5\u5916\u304c\u500b\u6570\u304c\u6642\u70b9\u306b\u306a\u308b\u307e\u3067\u9664\u3044\u3066\u304b\u3089\u3001\u756a\u53f7\u5c11\u3092\u9664\u304f\nn = int(input())\na = list(map(int, input().split( )))\n\ncnt = {}#key\u306f\u500b\u6570\u3001\u8981\u7d20\u306f\u6700\u5c0f\u756a\u53f7\n\nfor i in range(n):\n    if a[i] in cnt:\n        cnt[a[i]][0] = min(cnt[a[i]][0],i)\n        cnt[a[i]][1]+=1\n    else:\n        cnt[a[i]] = [i,1]\n\n#\u500b\u6570\u3001\u6700\u5c0f\u756a\u53f7\u3001\u756a\u53f7\u306e\u6570    \nmins = [[k,cnt[k][0],cnt[k][1]] for k in cnt]\nmins.append([0,0,0])\n#\u672b\u7aef\u51e6\u7406\u306b\u306a\u3063\u3066\u3044\u306a\u3044\nmins.sort(reverse = True)\n#print(mins)\nans = [0]*n\n\nfor i in range(len(mins)-1):\n    k,cntk,l = mins[i][0],mins[i][1],mins[i][2]\n    ans[cntk] += (k-mins[i+1][0])*l\n    mins[i+1][2]+=l###=\u3058\u3083\u304a\u304b\u3057\u3044\n    if mins[i+1][1]>mins[i][1]:##\u8ffd\u52a0\n        mins[i+1][1] = mins[i][1]\n#ans[mins[-1][1]]=n*mins[-1][0]\n\nfor ai in ans:\n    print(ai)\n    \n\n\n\n", "n = int(input())\na = list(map(int,input().split()))\nl = [0]\nind = [-1]\nfor i in range(n):\n    if a[i] > l[-1]:\n        l.append(a[i])\n        ind.append(i)\nc1 = [0]*(len(l)+1)\nc2 = [0]*(len(l)+1)\nc1[0] = n\na.sort()\nnow = 0\nfor i in a:\n    while now < len(l) and l[now] <= i:\n        now += 1\n    c1[now] -= 1\n    c2[now-1] += i-l[now-1]\nans = [0]*n\nfor i in range(1,len(l)):\n    c1[i] += c1[i-1]\n    count = (l[i]-l[i-1])*c1[i]+c2[i-1]\n    ans[ind[i]] = count\n\nfor i in ans:\n    print(i)\n", "import bisect\n\nN=int(input())\nA=list(map(int,input().split()))\n\ninc=[[A[0],0]]\nfor i in range(1,N):\n    if A[i]>inc[-1][0]:\n        inc.append([A[i],i])\n\nn=len(inc)\ntest=inc[:n-1]\nquery=[[] for i in range(n)]\nfor i in range(0,N):\n    r=bisect.bisect_left(test,[A[i],i])\n    query[r].append(A[i])\n\nans=[0 for i in range(N)]\ncount=0\nfor i in range(n-1,0,-1):\n    fr=inc[i][0]\n    to=inc[i-1][0]\n    val=count*(fr-to)+sum(query[i])-to*len(query[i])\n    ans[inc[i][1]]=val\n    count+=len(query[i])\n\nfr=inc[0][0]\nto=0\nval=count*(fr-to)+sum(query[0])-to*len(query[0])\nans[0]=val\n\nfor i in range(N):\n    print(ans[i])", "N = int(input())\nA = list(map(int, input().split()))\nd=dict()\nfor i, a in enumerate(A):\n    j, cnt = d.get(a,(N,0))\n    d[a] = min(i,j), cnt+1\nP=[]\nfor k, v in d.items():\n    P.append((k,v[0],v[1]))\nP.sort(key=lambda x:x[0],reverse=True)\nres=[0]*N\ncnt=0\nk=N-1\nfor i in range(len(P)-1):\n    A0, i0, cnt0 = P[i]\n    A1, i1, cnt1 = P[i+1]\n    k = min(k,i0)\n    cnt += cnt0\n    res[k]+=(A0-A1)*cnt\nA1, i1, cnt1 = P[-1]\nres[min(i1,k)]+=A1*(cnt+cnt1)\nprint(*res,sep=\"\\n\")", "# -*- coding: utf-8 -*-\n\nimport sys\nfrom collections import Counter\n\ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\ndef Yes(): print('Yes')\ndef No(): print('No')\ndef YES(): print('YES')\ndef NO(): print('NO')\nsys.setrecursionlimit(10 ** 9)\nINF = 10 ** 18\nMOD = 10 ** 9 + 7\n\nN = INT()\nA = LIST()\n\nC = Counter(A)\n# \u91cd\u8907\u524a\u9664\u3057\u3066\u964d\u9806\u3001\u3053\u306e\u9806\u306b\u51e6\u7406\u3057\u3066\u3044\u304f\nunique = sorted(set(A), reverse=1) + [0]\n# \u3042\u308b\u5024\u304c\u6700\u521d\u306b\u51fa\u73fe\u3059\u308bindex\u3092\u4fdd\u6301\nD = {}\nfor i in range(N-1, -1, -1):\n    D[A[i]] = i\n\nans = [0] * N\nprevcnt = 0\nmnidx = INF\nfor i, a in enumerate(unique[:-1]):\n    nxta = unique[i+1]\n    # \u4eca\u56de\u306e\u4f4d\u7f6e\u304c\u9078\u3070\u308c\u308b\u56de\u6570 = \u6b21\u306e\u5024\u3068\u306e\u5dee\u5206 * \u4eca\u306e\u5024\u306e\u500b\u6570\n    cnt = (a - nxta) * (C[a] + prevcnt)\n    # \u4eca\u306e\u5024\u306e\u5148\u982dindex\n    mnidx = min(mnidx, D[a])\n    ans[mnidx] += cnt\n    # \u4eca\u56de\u306e\u500b\u6570\u3092\u6b21\u56de\u4ee5\u964d\u7528\u306b\u8ffd\u52a0\n    prevcnt += C[a]\n[print(a) for a in ans]\n", "N = int(input())\nA = [(a, i) for i, a in enumerate(map(int, input().split()))]\nA.sort(reverse=True)\nA.append((0, 0))\n\nans = [0] * N\nnow = float('inf')\n\nfor j, (a, i) in enumerate(A[:N], start=1):\n    now = min(now, i)\n    ans[now] += j * (a - A[j][0])\n\nprint(*ans, sep='\\n')\n", "from collections import defaultdict\ndef solve():\n    N = int(input())\n    A = list(map(int, input().split()))\n    ans = [0]*N\n    min_inds = defaultdict(lambda: 10**5)\n    nums = defaultdict(lambda: 0)\n    for ind,a in enumerate(A):\n        min_inds[a] = min(min_inds[a],ind)\n        nums[a] += 1\n    min_inds = sorted(list(map(list,min_inds.items())), key=lambda x:x[0])\n    min_inds.append([10**9+1,10**5])\n    nums = sorted(list(map(list,nums.items())), key=lambda x:x[0])\n    nums.append([0,0])\n    for i in range(len(min_inds)-2,-1,-1):\n        min_inds[i][1] = min(min_inds[i][1],min_inds[i+1][1])\n        nums[i][1] += nums[i+1][1]\n        ans[min_inds[i][1]] += nums[i][1]*(nums[i][0]-nums[i-1][0])\n    return ans\nprint(*solve(),sep='\\n')", "import collections\nimport heapq\nn=int(input())\nA=[int(i) for i in input().split()]\nAns=[0]*n\nM=[0]#\u81ea\u5206\u3088\u308a\u524d\u306e\u6700\u5927\u5024\u3092\u30e1\u30e2\u3002\u3053\u308c\u4ee5\u4e0b\u3060\u3068\u73fe\u308c\u306a\u3044\nfor i in range(n):\n  M.append(max(M[-1],A[i]))\nD=collections.defaultdict(int)\nH=[]\nfor i in range(n):\n  j=n-1-i\n  if A[j]<=M[j]:\n    heapq.heappush(H,-A[j])#\u51fa\u73fe\u3057\u306a\u3044\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u6570\u3092\u7ba1\u7406\u3002\u5927\u304d\u3044\u307b\u3046\u304b\u3089\u53d6\u308a\u51fa\u3059\u3002\n  else:\n    Ans[j]=(A[j]-M[j])*(D[A[j]]+1)#\u81ea\u5206\u3088\u308a\u524d\u306e\u6700\u5927\u5024\u3068\u81ea\u5206\u306e\u5dee\u304b\u3051\u308b\u81ea\u5206\u81ea\u8eab\u3068\u540c\u3058\u6570\u306e\u3053\u308c\u307e\u3067\u306e\u51fa\u73fe\u56de\u6570\n    D[M[j]]+=D[A[j]]+1#\u81ea\u5206\u81ea\u8eab\u3088\u308a\u5f8c\u308d\u306e\u81ea\u5206\u3068\u540c\u3058\u6570\u5168\u3066\u3092\u81ea\u5206\u3088\u308a\u524d\u306e\u6700\u5927\u5024\u307e\u3067\u6e1b\u3089\u3059\u3053\u3068\u3067\u5897\u3048\u308b\u5206\n    ct=0\n    while H:#\u81ea\u5206\u3088\u308a\u5f8c\u308d\u3067\u81ea\u5206\u3088\u308a\u5c0f\u3055\u3044\u304c\u3001\u81ea\u5206\u306e\u524d\u306e\u6700\u5927\u5024\u3088\u308a\u5927\u304d\u3044\u3082\u306e\u3092\u5168\u3066\u898b\u308b\n      a=heapq.heappop(H)\n      a=-a\n      if a<=M[j]:\n        heapq.heappush(H,-a)\n        break\n      else:\n        Ans[j]+=a-M[j]\n        D[M[j]]+=1\n\nfor a in Ans:\n  print(a)\n"]