["# Definition for a binary tree node.\n # class TreeNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.left = None\n #         self.right = None\n \n class Solution:\n     def addValueToList(self, root, lst):\n         if root is not None:\n             lst.append(root.val)\n             self.addValueToList(root.left, lst)\n             self.addValueToList(root.right, lst)\n \n     def minDiffInBST(self, root):\n         \"\"\"\n         :type root: TreeNode\n         :rtype: int\n         \"\"\"\n         values = []\n         self.addValueToList(root, values)\n         sorted_values = sorted(values)\n         max_diff = sorted_values[-1] - sorted_values[0]\n         for i in range(len(values)-1):\n             if sorted_values[i+1] - sorted_values[i] < max_diff:\n                 max_diff = sorted_values[i+1] - sorted_values[i]\n         return max_diff", "# Definition for a binary tree node.\n # class TreeNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.left = None\n #         self.right = None\n \n class Solution:\n     def minDiffInBST(self, root):\n         min_diff = float('inf')\n         curr = root\n         stack = []\n         last_val = float('inf')\n         while stack or curr:\n             while curr:\n                 stack.append(curr)\n                 curr = curr.left\n                 \n             curr = stack.pop()\n             min_diff = min(min_diff, abs(curr.val - last_val))\n             last_val = curr.val\n             curr = curr.right\n             \n         return min_diff\n                 ", "# Definition for a binary tree node.\n # class TreeNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.left = None\n #         self.right = None\n \n class Solution:\n     def minDiffInBST(self, root):\n         \"\"\"\n         :type root: TreeNode\n         :rtype: int\n         \"\"\"\n         self.min = float('inf')\n         self.prev = None\n         self.dfs(root)\n         return self.min\n     \n     def dfs(self, node):\n         if not node:\n             return\n         self.dfs(node.left)\n         if self.prev:\n             self.min = min(self.min, node.val - self.prev.val)\n         self.prev = node\n         self.dfs(node.right)\n         ", "# Definition for a binary tree node.\n # class TreeNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.left = None\n #         self.right = None\n \n class Solution:\n     prev = float('-inf')\n     res = float('inf')\n     def minDiffInBST(self, root):\n         \"\"\"\n         :type root: TreeNode\n         :rtype: int\n         \"\"\"\n         if root.left:\n             self.minDiffInBST(root.left)\n         self.res = min(self.res, root.val-self.prev)\n         self.prev = root.val\n             \n         if root.right:\n             self.minDiffInBST(root.right)\n         \n         return self.res", "# Definition for a binary tree node.\n # class TreeNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.left = None\n #         self.right = None\n \n import sys\n \n class Solution:\n     def minDiffInBST(self, root):\n         \"\"\"\n         :type root: TreeNode\n         :rtype: int\n         \"\"\"\n         self.res = sys.maxsize;\n         self.prevVal = -sys.maxsize;\n         \n         def in_order(root):\n             if not root: return;\n             in_order(root.left);\n             \n             diff = root.val - self.prevVal;\n             self.prevVal = root.val\n             self.res = min(self.res, diff);\n             \n             in_order(root.right);\n             \n         in_order(root);\n         return self.res;", "# Definition for a binary tree node.\n # class TreeNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.left = None\n #         self.right = None\n \n class Solution:\n     def minDiffInBST(self, root):\n         \"\"\"\n         :type root: TreeNode\n         :rtype: int\n         \"\"\"\n         theValues = []\n         def inorder(node):\n             if(node!=None):\n                 inorder(node.left)\n                 theValues.append(node.val)\n                 inorder(node.right)\n         inorder(root)\n         minDiff = sys.maxsize\n         for i in range(len(theValues)-1):\n             minDiff = min(minDiff, theValues[i+1]-theValues[i])\n         return minDiff", "# Definition for a binary tree node.\n # class TreeNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.left = None\n #         self.right = None\n \n def dfs(lst, root):\n     if root != None:\n         lst.append(root.val)\n         dfs(lst, root.left)\n         dfs(lst, root.right)\n \n class Solution:\n     def minDiffInBST(self, root):\n         \"\"\"\n         :type root: TreeNode\n         :rtype: int\n         \"\"\"\n         lst = []\n         dfs(lst, root)\n         lst.sort()\n         res = float('inf')\n         for i in range(1, len(lst)):\n             res = min(res, lst[i] - lst[i - 1])\n         return res\n         ", "# Definition for a binary tree node.\n # class TreeNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.left = None\n #         self.right = None\n import sys\n class Solution:\n     def makeList(self,root):\n         if root == None:\n             return([])\n         else:\n             return(self.makeList(root.left) + [root.val] + self.makeList(root.right))\n         \n     def minDiffInBST(self, root):\n         \"\"\"\n         :type root: TreeNode\n         :rtype: int\n         \"\"\"\n         arr = self.makeList(root)\n         minDistance = sys.maxsize\n         \n         if len(arr) == 0:\n             return(0)\n         else:\n             for i in range(1,len(arr)):\n                 gap = abs(arr[i] - arr[i-1])\n                 if gap < minDistance:\n                     minDistance = gap\n                     \n             return(minDistance)\n                 ", "# Definition for a binary tree node.\n # class TreeNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.left = None\n #         self.right = None\n from math import inf\n \n class Solution:\n     def minDiffInBST(self, root):\n         \"\"\"\n         :type root: TreeNode\n         :rtype: int\n         \"\"\"\n         if not root:\n             return 0\n         \n         self.ans = inf\n         self.dfs(-inf, root, inf)\n         return self.ans\n     \n     def dfs(self, left, root, right):\n         self.ans = min(root.val - left, self.ans, right - root.val)\n         if root.left:\n             self.dfs(left, root.left, root.val)\n         \n         if root.right:\n             self.dfs(root.val, root.right, right)", "# Definition for a binary tree node.\n # class TreeNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.left = None\n #         self.right = None\n \n class Solution:\n     def minDiffInBST(self, root):\n         \"\"\"\n         :type root: TreeNode\n         :rtype: int\n         \"\"\"\n         vals = self.in_order_traversal(root)\n         min_diff = float('inf')\n         for i in range(len(vals) - 1):\n             min_diff = min(min_diff, vals[i+1] - vals[i])\n         return min_diff\n         \n     def in_order_traversal(self, root):\n         vals = []\n         if root is not None:\n             vals = self.in_order_traversal(root.left) + [root.val] + self.in_order_traversal(root.right)\n         return vals", "# Definition for a binary tree node.\n # class TreeNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.left = None\n #         self.right = None\n \n class Solution:\n     def minDiffInBST(self, root):\n         \"\"\"\n         :type root: TreeNode\n         :rtype: int\n         \"\"\"\n         def inorder(root):\n             if root:\n                 yield from inorder(root.left)\n                 yield root.val\n                 yield from inorder(root.right)\n         \n         it = inorder(root)\n         \n         prev = next(it)\n         m_ = 1 << 31\n         \n         while True:\n             n = next(it, False)\n             if not n:\n                 break\n             m_ = min(m_, abs(n - prev))\n             prev = n\n   \n         return m_        ", "# Definition for a binary tree node.\n # class TreeNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.left = None\n #         self.right = None\n \n class Solution:\n     def minDiffInBST(self, root):\n         \"\"\"\n         :type root: TreeNode\n         :rtype: int\n         \"\"\"\n         self.result = []\n         \n         def insert_node(node):\n             if node:\n                 self.result.append(node.val)\n                 insert_node(node.left)\n                 insert_node(node.right)\n             else:\n                 return\n         insert_node(root)\n         \n         self.result.sort()\n         \n         minimum = None\n         \n         for i in range(len(self.result) - 1):\n             diff = self.result[i + 1] - self.result[i]\n             if not minimum:\n                 minimum = diff\n             elif minimum > diff:\n                 minimum = diff\n             if minimum == 0:\n                 return minimum\n         return minimum\n             \n         \n         ", "# Definition for a binary tree node.\n # class TreeNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.left = None\n #         self.right = None\n \n class Solution:\n     def minDiffInBST(self, root):\n         \"\"\"\n         :type root: TreeNode\n         :rtype: int\n         \"\"\"\n         tree = []\n         \n         def Traversal(node):\n             if node != None:\n                 Traversal(node.left)\n                 tree.append(node.val)\n                 Traversal(node.right)\n                 \n         Traversal(root)\n         \n         mini = float('inf')\n         for i in range(1, len(tree)):\n             if abs(tree[i-1]-tree[i]) < mini:\n                 mini = abs(tree[i-1]-tree[i])\n         return mini", "# Definition for a binary tree node.\n # class TreeNode:\n #     def __init__(self, x):\n #         self.val = x\n #         self.left = None\n #         self.right = None\n \n class Solution:\n     \n     diff = float('inf')\n     prev = float('inf')\n     def minDiffInBST(self, root):\n         \"\"\"\n         :type root: TreeNode\n         :rtype: int\n         \"\"\"\n         self.traversal(root)\n         return self.diff\n     \n     def traversal(self, node):\n         \n         if node == None:\n             return\n         \n         self.traversal(node.left)\n         \n         self.diff = min(self.diff, abs(node.val - self.prev))\n         self.prev = node.val\n          \n         \n         self.traversal(node.right)\n         \n     \n         \n         return\n         "]