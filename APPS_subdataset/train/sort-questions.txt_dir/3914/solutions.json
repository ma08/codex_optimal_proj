["def dominator(arr):\n    for x in set(arr):\n        if arr.count(x) > len(arr)/2.0:\n            return x\n    return -1", "from collections import Counter\n\n\ndef dominator(arr):\n    if not arr:\n        return -1\n    k, v = Counter(arr).most_common(1)[0]\n    return k if v > len(arr) / 2 else -1\n", "dominator=lambda a:([x for x in set(a) if a.count(x)>len(a)/2][:1] or [-1])[0]", "def dominator(arr):\n    return next((x for x in set(arr) if arr.count(x) > len(arr)/2),-1)", "from collections import Counter\n\ndef dominator(arr):\n    n = Counter(arr).most_common(1)\n    return n[0][0] if n and n[0][1] > len(arr)//2 else -1", "def dominator(lst):\n    # O(n) time and O(1) space\n    if lst == []: return -1\n    candidate = object() # Better than None, if None is in the list.\n    count = 0\n    for elem in lst:\n        if elem == candidate:\n            count += 1\n        else:\n            if count > 0:\n                count -= 1\n            else:\n                candidate = elem\n                count = 1\n    if count > 0 and lst.count(candidate) > len(lst) // 2:\n        return candidate\n    else:\n        return -1", "from collections import Counter\n\ndef dominator(arr):\n    xs = Counter(arr).most_common(1)\n    if xs and (xs[0][1] > len(arr) // 2):\n        return xs[0][0]\n    return -1", "def dominator(arr):\n    half_length = len(arr) / 2\n    for e in arr:\n        if arr.count(e) > half_length:\n            return e\n    return -1\n", "from collections import Counter\ndef dominator(arr):\n    [(e, c)] = Counter(arr).most_common(1) or [(-1, 0)]\n    return [-1, e][2 * c > len(arr)]", "def dominator(arr):\n    for el in arr:\n        if arr.count(el) > len(arr) / 2:\n            return el\n    return -1"]