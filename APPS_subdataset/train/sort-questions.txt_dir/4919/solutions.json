["def grid_index(grid, idxs):\n    return ''.join(grid[x][y] for x,y in map(lambda n: divmod(n-1,len(grid)),idxs))", "def grid_index(grid, indexes):\n    flat = sum(grid, [])\n    return \"\".join( flat[i-1] for i in indexes )", "def grid_index(grid, indexes):\n    flat = tuple(x for e in grid for x in e)\n    return ''.join(flat[e-1] for e in indexes)", "def grid_index(ll, indexes):\n    flatten = [item for flat_list in ll for item in flat_list]\n    return \"\".join([flatten[index-1] for index in indexes])", "def grid_index(grid, indexes):\n    grid = sum(grid, start=[''])\n    return ''.join(grid[i] for i in indexes)", "def grid_index(grid, indexes):\n    l = len(grid)\n    return \"\".join(grid[(i-1)//l][(i-1)%l] for i in indexes)", "def grid_index(grid, indexes):\n    new = []\n    for g in grid:\n        for el in g:\n            new.append(el)\n    return ''.join([new[i - 1] for i in indexes])", "def grid_index(grid, indexes):\n    unpac_lst=[value for array in grid for value in array]\n    return ''.join(unpac_lst[i-1] for i in indexes)", "def grid_index(grid, indexes):\n    n = len(grid)\n    idxs = (i - 1 for i in indexes)\n    return \"\".join(grid[i // n][i % n] for i in idxs)", "from itertools import chain\n\ndef grid_index(grid, indexes):\n    linear = list(chain.from_iterable(grid))\n    return ''.join(linear[q - 1] for q in indexes)"]