["for _ in range(int(input())):\n n=int(input())\n a=[int(z) for z in input().split()]\n m=0\n a1=list(set(a))\n for i in range(len(a1)):\n  if a.count(a1[i])>m:\n   m=a.count(a1[i])\n print(n-m)\n \n   \n", "# cook your dish here\nfor _ in range(int(input())):\n n=int(input())\n d={}\n l=list(map(int,input().split()))\n for i in l:\n  d[i]=l.count(i)\n x=0\n \n for j in d:\n  if d[j]>x:\n   x=d[j]\n print(n-x)\n", "# cook your dish here\nfor _ in range(int(input())):\n n=int(input())\n l=list(map(int,input().split()))\n final=[]\n x=sorted(l,key=l.count)\n for i in x:\n  if i!=x[-1]:\n   final.append(i)\n print(len(final))\n \n", "# cook your dish here\nt=int(input());\nfor i in range(t):\n n=int(input());\n a=list(map(int,input().split()))[:n];\n c=0;\n d=0;\n e=0;\n ma=0;\n index=0\n for i in range(len(a)):\n  j=i+1;\n  for k in range(j,len(a)):\n   if a[i]==a[k]:\n    c=c+1;\n    break;\n #print(c);\n if c==len(a)-1:\n  print((0));\n else:\n  for i in range(len(a)):\n   j=i+1;\n   f=1;\n   for k in range(j,len(a)):\n    if a[i]==a[k]:\n     f=f+1;\n   #print(f);\n   if f>ma:\n    ma=f;\n    index=a[i];\n  #print(ma,index)\n  #print(new);\n  for i in [index]:\n   for j in range(len(a)):\n    if i!=a[j]:\n     #print(i,a[j])\n     d=d+1;\n  #print(d);\n  if d>0:\n   print(d);\n  else:\n   for i in range(1,len(a)):\n    if a[0]!=a[i]:\n     #print(a[0],a[i]);\n     e=e+1;\n   print(e);\n   \n \n   \n   \n \n", "for i in range(int(input())):\n n=int(input())\n t=input().split()\n m=set(t)\n ma=0\n for j in m:\n  x=t.count(j)\n  if(ma<x):\n   ma=x\n print(n-ma)", "for i in range(int(input())):\n n=int(input())\n t=input().split()\n m=set(t)\n ma=0\n for j in m:\n  x=t.count(j)\n  if(ma<x):\n   ma=x\n print(n-ma)", "t=int(input())\nfor i in range(t):\n n=int(input())\n a=input().split()\n b=set(a)\n ma=0\n for j in b:\n  p=a.count(j)\n  if(ma<p):\n   ma=p\n print(n-ma)", "# cook your dish here\nfor _ in range(int(input())):\n n=int(input())\n a=list(map(int,input().split()))\n l=[]\n for i in a:\n  l.append(a.count(i))\n #print(s1,l2)\n print(n-a.count(a[l.index(max(l))]))\n  \n", "# vivek hirpara\nfor _ in range(int(input())):\n n=int(input())\n s1=list(map(int,input().split()))\n l2=[]\n for i in s1:\n  l2.append(s1.count(i))\n #print(s1,l2)\n print(n-s1.count(s1[l2.index(max(l2))]))\n  \n", "# cook your dish here\nfor t in range(int(input())):\n n=int(input())\n a=[int(x)for x in input().rstrip().split()]\n b=list(set(a))\n max1=0\n for i in range(0,len(b)):\n  s=a.count(b[i])\n  if s>max1:\n   max1=s\n print(n-max1)", "# cook your dish here\nfrom collections import Counter\nfor i in range(int(input())):\n n = int(input())\n l = list(map(int,input().split()))\n x = dict(Counter(l))\n m = max(list(x.values()))\n print(n-m)", "# cook your dish here\nfor _ in range(int(input())):\n n=int(input())\n arr=list(map(int,input().split()))\n m=0\n s=list(set(arr))\n for i in range(len(s)):\n  m=max(m,arr.count(s[i]))\n print(n-m)", "for _ in range (int(input())):\n a = int(input())\n ass = list(map(int , input().split()))\n b = 0\n for i in range(a):\n  if ass.count(ass[i]) > b:\n   b = ass.count(ass[i])\n print(a - b)\n", "# cook your dish here\nfor _ in range (int(input())):\n n = int(input())\n ass = list(map(int , input().split()))\n m = 0\n for i in range(n):\n  if ass.count(ass[i]) > m:\n   m = ass.count(ass[i])\n print(n - m)", "# cook your dish here\nans=[]\nfor test in range(int(input())):\n n=int(input())\n arr=list(map(int,input().split()))\n m=0\n s=set(arr)\n for i in s:\n  if arr.count(i)>m:\n   m=arr.count(i)\n ans.append(n-m)\nfor i in ans:\n print(i)\n", "T=int(input())\nfor i in range(T):\n N=int(input())\n A=list(map(int,input().split()))[:N]\n B=set(A)\n L=[]\n for j in range(len(B)):\n  L.append(A.count(A[j]))\n print(len(A)-max(L))\n", "T=int(input())\nfor i in range(T):\n N=int(input())\n A=list(map(int,input().split()))[:N]\n B=set(A)\n L=[]\n for j in range(len(B)):\n  L.append(A.count(A[j]))\n print(len(A)-max(L))\n  \n", "def changeIt(n,arr):\n m = dict()\n for i in range(n):\n  m[arr[i]] = m.get(arr[i],0)+1\n count = 0\n for i in m.keys():\n  if m[i] > count:\n   count = m[i]\n  else:\n   continue\n print(len(arr) - count)\n return\n\n#Driver code starts here\nt = int(input())\nfor _ in range(t):\n n = int(input())\n arr = list(map(int,input().split()))\n changeIt(n,arr)", "# cook your dish here\ntests = int(input())\nfor test in range(tests):\n n = int(input())\n a = [int(x) for x in input().split()]\n maxx = max(set(a), key = a.count)\n moves = a.index(maxx)\n if len(a) > 1:\n  for i in range(moves+1, len(a)):\n   if a[i] != maxx:\n    moves += 1\n print(moves)\n", "# cook your dish here\nfrom collections import Counter\nT = int(input())\nfor _ in range(T):\n n = int(input())\n a = list(map(int,input().split()))\n c = dict(Counter(a))\n m = max(list(c.values()))\n print(n-m)", "# cook your dish here\nfrom collections import Counter\nT = int(input())\nfor i in range(T):\n n = int(input())\n lst = list(map(int, input().split()))\n count = Counter(lst)\n print(n - max(count.values()))", "def change_it(_list):\n if(len(set(_list)) <= 2):\n  return len(set(_list))-1\n k = []\n for i in range(len(_list)):\n  r = _list.count(_list[i])\n  k.append(r)\n s = max(k)\n return len(_list)-s\n\n\ndef __starting_point():\n t = int(input())\n for i in range(t):\n  n = int(input())\n  _list = list(map(int, input().split()))\n  print(f'{change_it(_list)}')\n\n\n__starting_point()", "# cook your dish here\nfor i in range(int(input())):\n n=int(input())\n l=list(map(int,input().split()))\n k=[]\n for i in range(len(l)):\n  r=l.count(l[i])\n  k.append(r)\n s=max(k)\n print(len(l)-s)", "# cook your dish here\nfrom collections import Counter\nval=int(input())\nfor i in range(val):\n n=input()\n n=int(n)\n p=list(map(int,input().split()))\n c=Counter(p)\n print(n-max(c.values()))", "t=int(input())\nfor _ in range(t):\n n = int(input())\n l = list(map(int,input().split()))\n s = list(set(l))\n sum = 0 \n for i in s:\n  x = l.count(i)\n  if x>sum:\n   sum=x \n print(len(l)-sum) "]