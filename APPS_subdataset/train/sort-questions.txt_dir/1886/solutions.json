["from math import sqrt\n class NumArray(object):\n \n     def __init__(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         \"\"\"\n         if nums:\n             k=int(sqrt(len(nums)))\n             add,i=[],0\n             while i<=len(nums)-k:\n                 add.append(sum(nums[i:i+k]))\n                 i+=k\n             if i!=len(nums):\n                 add.append(sum(nums[i:]))\n             self.nums,self.add,self.k=nums,add,k\n         \n \n     def update(self, i, val):\n         \"\"\"\n         :type i: int\n         :type val: int\n         :rtype: void\n         \"\"\"\n         self.add[i//self.k]+=val-self.nums[i]\n         self.nums[i]=val\n         \n         \n \n     def sumRange(self, i, j):\n         \"\"\"\n         :type i: int\n         :type j: int\n         :rtype: int\n         \"\"\"\n         def func(i):\n             return sum(self.add[:i//self.k])+sum(self.nums[(i//self.k)*self.k:i+1]) if i>=0 else 0\n         return func(j)-func(i-1)\n         \n \n \n # Your NumArray object will be instantiated and called as such:\n # obj = NumArray(nums)\n # obj.update(i,val)\n # param_2 = obj.sumRange(i,j)", "from math import sqrt\n class NumArray(object):\n \n     def __init__(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         \"\"\"\n         if nums:\n             k=int(sqrt(len(nums)))\n             add,i=[],0\n             while i<=len(nums)-k:\n                 add.append(sum(nums[i:i+k]))\n                 i+=k\n             if i!=len(nums):\n                 add.append(sum(nums[i:]))\n             self.nums,self.add,self.k=nums,add,k\n         \n \n     def update(self, i, val):\n         \"\"\"\n         :type i: int\n         :type val: int\n         :rtype: void\n         \"\"\"\n         self.add[i//self.k]+=val-self.nums[i]\n         self.nums[i]=val\n         \n         \n \n     def sumRange(self, i, j):\n         \"\"\"\n         :type i: int\n         :type j: int\n         :rtype: int\n         \"\"\"\n         def func(i):\n             return sum(self.add[:i//self.k])+sum(self.nums[(i//self.k)*self.k:i+1]) if i>=0 else 0\n         return func(j)-func(i-1)\n         \n \n \n # Your NumArray object will be instantiated and called as such:\n # obj = NumArray(nums)\n # obj.update(i,val)\n # param_2 = obj.sumRange(i,j)", "class NumArray:\n     def __init__(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         \"\"\"\n         self.nums = nums\n         self.step = 20\n         self.cache = [0] * math.ceil(len(nums)/self.step)\n         for i in range(len(nums)):\n             self.cache[i//self.step] += nums[i]\n \n     def update(self, i, val):\n         \"\"\"\n         :type i: int\n         :type val: int\n         :rtype: void\n         \"\"\"\n         old = self.nums[i]\n         self.nums[i] = val\n         self.cache[i//self.step] += (val - old)\n         \n     def sumRange(self, i, j):\n         \"\"\"\n         :type i: int\n         :type j: int\n         :rtype: int\n         \"\"\"\n         if (j//self.step - i//self.step) > 1:     \n             spliti = ((i//self.step) + 1) * self.step - 1\n             \n             splitj = ((j//self.step)) * self.step\n             \n             sumi = sum(self.nums[i:(spliti+1)])\n             sumj = sum(self.nums[splitj:(j+1)])\n             sumbetween = sum(self.cache[((i//self.step) +1):((j//self.step))])\n             return sumi + sumj + sumbetween\n         else:\n             return sum(self.nums[i:(j+1)])\n \n         \n \n \n # Your NumArray object will be instantiated and called as such:\n # obj = NumArray(nums)\n # obj.update(i,val)\n # param_2 = obj.sumRange(i,j)\n", "class NumArray:\n \n     def __init__(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         \"\"\"\n         l = len(nums)\n         self.nums = nums\n         self.bit = [0] * (l+1)\n         for i in range(1, l+1):\n             self.update_delta(i, nums[i-1])\n \n     def update(self, i, val):\n         \"\"\"\n         :type i: int\n         :type val: int\n         :rtype: void\n         \"\"\"\n         bit = self.bit\n         delta = val - self.nums[i]\n         self.nums[i] = val\n         self.update_delta(i+1, delta)\n \n     def sumRange(self, i, j):\n         \"\"\"\n         :type i: int\n         :type j: int\n         :rtype: int\n         \"\"\"\n         return self.get_sum(j+1) - self.get_sum(i)\n     \n     def get_sum(self, i):\n         bit = self.bit\n         res = 0\n         while i > 0:\n             res += bit[i]\n             i -= (i & -i)\n         \n         return res\n     \n     def update_delta(self, i, delta):\n         bit = self.bit\n         l = len(bit)\n         while i < l:\n             bit[i] += delta\n             i += (i & -i)\n             \n         \n \n \n # Your NumArray object will be instantiated and called as such:\n # obj = NumArray(nums)\n # obj.update(i,val)\n # param_2 = obj.sumRange(i,j)\n", "class NumArray:\n \n     def __init__(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         \"\"\"\n         self.segTree = [0 for _ in range(len(nums) * 2)]\n         self.build(nums)\n         self.n = len(nums)\n         \n     def build(self, nums):\n         n = len(nums)\n         self.segTree[n: 2 * n] = nums[:]\n         for i in range(n - 1, 0, -1):\n             self.segTree[i] = self.eval(self.segTree[2 * i], self.segTree[2 * i + 1])\n             \n     def eval(self, x1, x2):\n         return x1 + x2\n \n     def update(self, i, val):\n         \"\"\"\n         :type i: int\n         :type val: int\n         :rtype: void\n         \"\"\"\n         k = i + self.n\n         delta = val - self.segTree[k]\n         while k > 0:\n             self.segTree[k] += delta\n             k //= 2\n         \n \n     def sumRange(self, i, j):\n         \"\"\"\n         :type i: int\n         :type j: int\n         :rtype: int\n         \"\"\"\n         l = i + self.n\n         r = j + self.n \n         s = 0\n         while l <= r:\n             if l & 1 == 1:\n                 s += self.segTree[l]\n                 l += 1\n             if r & 1 == 0:\n                 s += self.segTree[r]\n                 \n             r -= 1\n             l >>= 1\n             r >>= 1\n         return s\n         \n \n \n # Your NumArray object will be instantiated and called as such:\n # obj = NumArray(nums)\n # obj.update(i,val)\n # param_2 = obj.sumRange(i,j)\n"]