["def order_type(arr):\n    if not arr : return 'Constant'\n    arr = list( map(len, [str(elt) if type(elt)==int else elt for elt in arr] ))\n    cmp =sorted(arr)\n    if arr == [arr[0]]*len(arr) : s='Constant'\n    elif arr == cmp :             s='Increasing'\n    elif arr == cmp[::-1] :       s='Decreasing'\n    else :                        s='Unsorted'\n    return s", "def order_type(arr):\n    xs = [len(x) if hasattr(x, '__len__') else len(str(x)) for x in arr]\n    ys = sorted(xs)\n    return (\n        'Constant' if not xs or ys[0] == ys[-1] else\n        'Increasing' if xs == ys else\n        'Decreasing' if xs[::-1] == ys else\n        'Unsorted'\n    )", "def order_type(arr):\n    lengths = [len(e if isinstance(e, list) else str(e)) for e in arr]\n    if len(set(lengths)) < 2:\n        return \"Constant\"\n    inc = sorted(lengths)\n    return \"Increasing\" if inc == lengths else \"Decreasing\" if inc[::-1] == lengths else \"Unsorted\"", "from operator import le, ge\n\nsize = lambda x: len(str(x)) if type(x) == int else len(x)\n    \ndef order_type(arr):\n    L = list(map(size, arr))\n    if len(set(L)) <= 1: return \"Constant\"\n    if all(map(le, L, L[1:])): return \"Increasing\"\n    if all(map(ge, L, L[1:])): return \"Decreasing\"\n    return \"Unsorted\"", "from itertools import tee\n\ndef pairwise(iterable):\n    a, b = tee(iterable)\n    next(b, None)\n    return zip(a, b)\n\ndef length(value):\n    try:\n        return len(value)\n    except TypeError:\n        return len(str(value))\n\ndef order_type(values):\n    if len(values) <= 1:\n        return 'Constant'\n    deltas = [length(b) - length(a) for a, b in pairwise(values)]\n    min_delta = min(deltas)\n    max_delta = max(deltas)\n    if min_delta == max_delta == 0:\n        return 'Constant'\n    if min_delta >= 0 and max_delta >= 0:\n        return 'Increasing'\n    if min_delta <= 0 and max_delta <= 0:\n        return 'Decreasing'\n    return 'Unsorted'", "def order_type(arr):\n    len_stats = [len(str(x)) if type(x) == int else len(x) for x in arr]\n    sorted_stats = sorted(len_stats)\n    \n    if not arr or sorted_stats[0] == sorted_stats[-1]:\n        return \"Constant\"\n        \n    if len_stats == sorted_stats:\n        return \"Increasing\"\n        \n    return \"Decreasing\" if len_stats == sorted_stats[::-1] else \"Unsorted\"", "def order_type(arr):\n    l = [len(str(e)) if type(e) != list else len(e) for e in arr]\n    return 'Constant' if len(set(l)) <= 1 else 'Increasing' if l == sorted(l) else 'Decreasing' if l == sorted(l)[::-1] else 'Unsorted'", "def order_type(arr):\n    l = [len(str(i))if type(i)==int else len(i)for i in arr]\n    return [[\"Decreasing\",\"Unsorted\"][l!=sorted(l)[::-1]],[\"Increasing\",\"Constant\"][len(set(l))<2]][sorted(l)==l]", "from collections import OrderedDict\ndef order_type(arr):\n  res = OrderedDict([ \n          (\"Constant\", True),\n          (\"Increasing\", True),\n          (\"Decreasing\", True),\n          (\"Unsorted\", True)\n        ])\n\n  def get_length(element):\n    try:\n      return len(element)\n    except:\n      return len(str(element))\n\n  for first, second in zip(arr, arr[1:]):\n    length_of_first = get_length(first)\n    length_of_second = get_length(second)\n    if length_of_first > length_of_second:\n      res[\"Increasing\"] = False\n      res[\"Constant\"] = False\n    if length_of_first < length_of_second:\n      res[\"Decreasing\"] = False\n      res[\"Constant\"] = False\n  for k in res:\n    if res[k]:\n      return k"]