["class Solution(object):\n     def hIndex(self, citations):\n         \"\"\"\n         :type citations: List[int]\n         :rtype: int\n         \"\"\"\n         n = len(citations)\n         l = 0\n         r = n-1\n         while l <= r:\n             m = (l + r) // 2\n             if m == 0 and citations[m] >= n - m or  citations[m-1] < n - (m-1) and citations[m] >= n-m:\n                 return n-m\n             if citations[m] < n - m:\n                 l = m+1\n             else:\n                 r = m\n         return 0\n", "class Solution:\n     def hIndex(self, citations):\n         \"\"\"\n         :type citations: List[int]\n         :rtype: int\n         \"\"\"\n         n = len(citations)\n         l, r = 0, n - 1\n         while l <= r:\n             m = (l + r) // 2\n             if citations[m] >= n - m:\n                 r = m - 1\n             else:\n                 l = m + 1\n         return n - r - 1", "class Solution:\n     def hIndex(self, citations):\n         \"\"\"\n         :type citations: List[int]\n         :rtype: int\n         \"\"\"\n         c = citations\n         if not c:\n             return 0\n         s, e  = 0, len(c) - 1\n         if c[s] >= len(c):\n             return len(c)\n         if c[e] < 1:\n             return 0\n         while s < e - 1:\n             m = s + int((e - s) / 2)\n             if c[m] >= len(c) - m:\n                 e = m\n             else:\n                 s = m\n         return len(c) - e", "class Solution:\n     \"\"\"\n     time: O(logn)\n     \"\"\"\n     def hIndex(self, citations):\n         \"\"\"\n         :type citations: List[int]\n         :rtype: int\n         \"\"\"\n         if not citations:\n             return 0\n         \n         n = len(citations)\n         left, right = 0, n - 1\n         \n         while left + 1 < right:\n             mid = (left + right) // 2\n             \n             if citations[mid] >= n - mid:\n                 right = mid\n             else:\n                 left = mid\n         \n         for mid in (left, right):\n             if citations[mid] >= n - mid:\n                 return n - mid\n         \n         return 0", "class Solution:\n     def hIndex(self, citations):\n         \"\"\"\n         :type citations: List[int]\n         :rtype: int\n         \"\"\"\n         h = 0\n         count = 0\n         for c in citations[::-1]:\n             if c <= count:\n                 return count\n             count += 1\n         return count\n", "class Solution:\n     def hIndex(self, citations):\n         \"\"\"\n         :type citations: List[int]\n         :rtype: int\n         \"\"\"\n         l, r, res = 0, len(citations) - 1, 0\n         while l <= r:\n             mid = (l + r) // 2\n             if len(citations) - mid <= citations[mid]: res, r = len(citations) - mid, r - 1\n             else: l = mid + 1\n         return res        ", "class Solution:\n     def hIndex(self, citations):\n         \"\"\"\n         :type citations: List[int]\n         :rtype: int\n         \"\"\"\n         citations.sort(reverse=True)\n         for idx in range(len(citations)):\n             if idx + 1> citations[idx]:\n                 return idx\n         return len(citations)\n", "class Solution:\n     def hIndex(self, citations):\n         \"\"\"\n         :type citations: List[int]\n         :rtype: int\n         \"\"\"\n         citations.sort()\n         for i in range(len(citations)-1, -1, -1):\n             if citations[i] >= len(citations)-i and (i == 0 or citations[i-1] <= len(citations)-i):\n                 return len(citations)-i\n         return 0", "class Solution:\n     def hIndex(self, citations):\n         \"\"\"\n         :type citations: List[int]\n         :rtype: int\n         \"\"\"\n         \n         \n         # my solution......beat 95 %\n         \n         l = len(citations)\n         if l == 0:                return 0\n         if l == 1:\n             if citations[0] == 0: return 0\n             else:                 return 1\n         if min(citations) >= l:   return l\n         \n         citations = citations[::-1]\n         count = 0\n         thres = 0\n         i = 0\n         while i < len(citations):\n             if thres >= count:\n                 thres = citations[i]\n                 count += 1\n                 i += 1\n             else:\n                 return count-1\n         return count-1\n         \n         \n         \n         \n", "class Solution:\n     def hIndex(self, citations):\n         \"\"\"\n         :type citations: List[int]\n         :rtype: int\n         \"\"\"\n         \n         \n         # my solution......beat 100 %\n         \n         l = len(citations)\n         if l == 0:                return 0          # shit testcase: []\n         if l == 1:\n             if citations[0] == 0: return 0          # shit testcase: [0]\n             else:                 return 1          # for testcase: [1], [2] or [100] etc...\n         if min(citations) >= l:   return l          # for testcase: [2,3], [5,8], [3,4,5], [7,8,9,9] etc...\n         \n         citations = citations[::-1]\n         count = 0\n         thres = 0                                   # (count, thres): this author has \"count\" articles with citations >= thres\n         i = 0\n         while i < len(citations):\n             if thres >= count:\n                 thres = citations[i]\n                 count += 1\n                 i += 1\n             else:\n                 return count - 1\n         return count - 1\n         \n         \n         \n         \n"]