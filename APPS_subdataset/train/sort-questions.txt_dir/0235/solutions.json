["class Solution:\n     def numberOfArithmeticSlices(self, A):\n         curr, sum = 0, 0\n         for i in range(2,len(A)):\n             if A[i]-A[i-1] == A[i-1]-A[i-2]:\n                 curr += 1\n                 sum += curr\n             else:\n                 curr = 0\n         return sum\n #         solution = 0\n #         connected = 1\n #         old_diff = None\n #         sequences = []\n #         if len(A) < 3:\n #             return 0\n         \n #         for index,num in enumerate(A):\n #             if index < len(A) - 1:\n #                 new_diff = num - A[index + 1]\n #             else:\n #                 new_diff = A[index - 1] - num\n #             if old_diff == new_diff:\n #                 if index == len(A) - 1 and connected >= 3:\n #                     connected += 1\n #                     sequences.append(connected)\n #                 connected += 1\n #             else:\n #                 old_diff = new_diff\n #                 if connected > 2:\n #                     sequences.append(connected)\n #                 connected = 1\n #         for sequence in sequences:\n #             prev = 0\n #             while sequence >= 2:\n #                 prev += 1\n #                 solution += prev\n #                 sequence -= 1\n #         return solution\n", "class Solution:\n     def sums(self, n):\n         return int((n-2)*(n-1)/2)\n \n     def numberOfArithmeticSlices(self, A):\n         \"\"\"\n         :type A: List[int]\n         :rtype: int\n         \"\"\"\n         if len(A) < 3:\n             return 0\n         res = []\n         cnt = 2\n         diff = 0\n         i = 1\n         while i < len(A)-1:\n             if i == 1:\n                 diff = A[i] - A[0]\n             while i < len(A) - 1 and A[i+1] - A[i] == diff:\n                 cnt += 1\n                 i += 1\n             if cnt >= 3:\n                 res.append(cnt)\n             if i < len(A) - 1:\n                 diff = A[i+1] - A[i]\n                 cnt = 2\n                 i += 1\n         return sum(self.sums(x) for x in res)\n", "class Solution:\n     def numberOfArithmeticSlices(self, A):\n         \"\"\"\n         :type A: List[int]\n         :rtype: int\n         \"\"\"\n         dp ,counts = [0,0], 1\n         for i in range(2,len(A)) :\n             if A[i] - A[i - 1] == A[i - 1] - A[i - 2] :\n                 dp.append(dp[i - 1] + counts)\n                 counts += 1\n             else :\n                 dp.append(dp[i - 1])\n                 counts = 1\n         \n         return dp[-1]\n             \n", "class Solution:\n \tdef numberOfArithmeticSlices(self, A):\n \t\tans = [0] * len(A)\n \t\tfor i in range(0, len(A)):\n \t\t\tif i < 2:\n \t\t\t\tans[i] = 0\n \t\t\telse:\n \t\t\t\t# add number of slices for i - 1\n \t\t\t\tans[i] = ans[i - 1]\n \t\t\t\ttemp = A[:i + 1][::-1]\n \t\t\t\tfor j in range(0, i - 1):\n \t\t\t\t\tslice = temp[j:j+3]\n \t\t\t\t\tif self.checkArithmetic(slice):\n \t\t\t\t\t\tans[i] += 1\n \t\t\t\t\telse:\n \t\t\t\t\t\tbreak\n \t\treturn 0 if len(A) == 0 else ans[-1]\n \t\t\n \tdef checkArithmetic(self, slice):\n \t\tdiff = slice[1] - slice[0]\n \t\tfor i in range(len(slice) - 1):\n \t\t\tif slice[i+1] - slice[i] != diff:\n \t\t\t\treturn False\n \t\treturn True", "class Solution:\n     def numberOfArithmeticSlices(self, A):\n         \"\"\"\n         :type A: List[int]\n         :rtype: int\n         \"\"\"\n         count=0\n         addend=0\n         for i in range(2,len(A)):\n             if A[i-1]-A[i]==A[i-2]-A[i-1]:\n                 addend+=1\n                 count+=addend\n             else:\n                 addend=0\n         return count", "class Solution:\n     def numberOfArithmeticSlices(self, A):\n         \"\"\"\n         :type A: List[int]\n         :rtype: int\n         \"\"\"\n         \n         if len(A) < 3:\n             return 0\n         \n         count = 0\n         l = len(A)\n         \n         i = 0\n         while i < l-2:\n             j = i + 2\n             while j < l:\n                 if A[i]-A[i+1] == A[j-1]-A[j]:\n                     count += j-i-1\n                     j += 1\n                 else:\n                     i = j-1\n                     break\n             if j == l:\n                 break\n \n         return count", "class Solution:\n     def numberOfArithmeticSlices(self, A):\n         \"\"\"\n         :type A: List[int]\n         :rtype: int\n         \"\"\"\n         res = 0\n         dp = [0] * len(A)\n         for i in range(2, len(A)):\n             if A[i] - A[i - 1] == A[i - 1] - A[i - 2]:\n                 dp[i] = dp[i - 1] + 1\n                 res += dp[i]\n         return res", "class Solution:\n     def numberOfArithmeticSlices(self, A):\n         curr, sum = 0, 0\n         for i in range(2, len(A)):\n             if A[i] - A[i - 1] == A[i - 1] - A[i - 2]:\n                 curr += 1\n                 sum += curr\n             else:\n                 curr = 0\n         return sum", "class Solution:\n     def numberOfArithmeticSlices(self, A):\n         \"\"\"\n         :type A: List[int]\n         :rtype: int\n         \"\"\"\n         size = len(A)\n         if size < 3:\n             return 0\n         ans = 0\n         cnt = 0\n         delta = A[1] - A[0]\n         \n         for x in range(2, size):\n             if A[x] - A[x-1] == delta:\n                 cnt += 1\n                 ans += cnt\n             else:\n                 delta = A[x] - A[x-1]\n                 cnt = 0\n         return ans", "class Solution:\n     def __init__(self):\n       self.total_sum = 0\n     def numberOfArithmeticSlices(self, A):\n         \"\"\"\n         :type A: List[int]\n         :rtype: int\n         \"\"\"\n         self.slices(A, len(A) - 1)\n         return self.total_sum\n         \n     def slices(self, A, i):\n         if i < 2:\n           return 0\n         temp = 0\n         if A[i] - A[i-1] == A[i-1] - A[i-2]:\n           temp = 1 + self.slices(A, i-1)\n           self.total_sum += temp\n         else:\n           self.slices(A, i-1)\n         return temp", "class Solution:\n     def numberOfArithmeticSlices(self, A):\n         \"\"\"\n         :type A: List[int]\n         :rtype: int\n         \"\"\"\n         dp = [0 for _ in range(len(A))]\n         for i in range(2, len(A)):\n             if A[i] - A[i-1] == A[i-1] - A[i-2]:\n                 dp[i] = dp[i-1] + 1\n             else:\n                 dp[i] = 0\n                 \n         return sum(dp)"]