["class Solution:\n    def sequentialDigits(self, low: int, high: int) -> List[int]:\n        l=len(str(low))\n        f=len(str(high))\n        s=len(str(low)[0])\n        a=[]\n        for i in range(l,f+1):\n            while True:\n                t=''\n                if i+s>10:\n                    break\n                for j in range(s,i+s):\n                    t+=str(j)\n                if int(t)>high:\n                    break\n                if int(t)<low:\n                    s+=1\n                    continue\n                s+=1\n                a.append(t)\n            s=1\n        return a", "class Solution:\n    def sequentialDigits(self, low: int, high: int) -> List[int]:\n        nums = []\n        max_digits = 9\n        for depth in range(2, max_digits + 1):\n            nums += self.genNum(max_digits, depth)\n        return [n for n in nums if n >= low and n <= high]\n    \n    def genNum(self, max_digits, depth):\n        result = []\n        for startDigit in range(1, max_digits-depth+2):\n            num = startDigit\n            for lvl in range(depth-1):\n                num = num * 10 + num % 10 + 1\n            result.append(num)\n        return result", "class Solution:\n    def sequentialDigits(self, low: int, high: int) -> List[int]:\n        \n        num = \\\"123456789\\\"\n        res = []\n        \n        for i in range(len(str(low)), len(str(high))+1):\n            for j in range(10-i):\n                if low <= int(num[j:j+i]) <= high:\n                    res.append(int(num[j:j+i]))\n        \n        return res\n        \n        \n        ", "class Solution:\n    def sequentialDigits(self, low: int, high: int) -> List[int]:\n        \n        res = []\n        def dfs(curr_num):\n            if curr_num>=low and curr_num<=high:\n                res.append(curr_num)\n            elif curr_num > high:\n                return\n            \n            if int(str(curr_num)[-1]) == 9:\n                return\n            dfs(curr_num*10 + int(str(curr_num)[-1])+1)\n                    \n        dfs(1)\n        dfs(2)\n        dfs(3)\n        dfs(4)\n        dfs(5)\n        dfs(6)\n        dfs(7)\n        dfs(8)\n        dfs(9)\n        return sorted(res)", "class Solution0:\n    def sequentialDigits(self, low: int, high: int) -> List[int]:\n        nl, nh = len(str(low)), len(str(high))\n        ans = []\n        sequential = '123456789'\n        for n in range(nl, min(nh+1,10)):\n            start, delta = int(sequential[:n]), int('1'*n)\n            k_min = 0 if n > nl else max(-(-(low-start) // delta), 0)\n            k_max = 9 - n if n < nh else (min(high, int(sequential[-n:]))-start) // delta\n            ans += [start + k*delta for k in range(k_min, k_max + 1)]\n\n        return ans\n\n\nclass Solution:\n    def sequentialDigits(self, low: int, high: int) -> List[int]:\n        nl, nh = len(str(low)), len(str(high))\n        ans = []\n        sequential = '123456789'\n        for n in range(nl, min(nh+1,10)):\n            for k in range(10-n):\n                if low <= int(sequential[k:k+n]) <= high:\n                    ans.append(int(sequential[k:k+n]))\n        return ans\n", "class Solution:\n    def sequentialDigits(self, low: int, high: int) -> List[int]:\n        minRange = len(str(low))\n        maxRange = len(str(high))\n        digits = ['1','2','3','4','5','6','7','8','9']\n        \n        result = []\n        for n in range(minRange, maxRange + 1):\n            for i in range(10-n):\n                num = int(''.join(digits[i:i+n]))\n                if num >= low and num <= high:\n                    result.append(num)\n                if num > high:\n                    break\n        return result", "class Solution:\n    def sequentialDigits(self, low: int, high: int) -> List[int]:\n        nl, nh = len(str(low)), len(str(high))\n        ans = []\n        sequential = '123456789'\n        for n in range(nl, min(nh+1,10)):\n            start, delta = int(sequential[:n]), int('1'*n)\n            k_min = 0 if n > nl else max(-(-(low-start) // delta), 0)\n            k_max = 9 - n if n < nh else (min(high, int(sequential[-n:]))-start) // delta\n            ans += [start + k*delta for k in range(k_min, k_max + 1)]\n\n        return ans\n", "class Solution:\n    def sequentialDigits(self, low: int, high: int) -> List[int]:\n        ans = []\n        for ndigit in range(1,10):\n            for i in range(1,10-ndigit+1):\n                x = i\n                for j in range(ndigit-1):\n                    x = x*10 + (i+j+1)\n                if x>high:\n                    break\n                if x>=low:\n                    ans.append(x)\n        return ans\n", "class Solution:\n    def sequentialDigits(self, low: int, high: int) -> List[int]:\n        \n        num = \\\"123456789\\\"\n        res = []\n        \n        for i in range(len(str(low)), len(str(high))+1):\n            for j in range(10-i):\n                if low <= int(num[j:j+i]) <= high:\n                    res.append(int(num[j:j+i]))\n                if int(num[j:j+i]) > high:\n                    break\n        return res\n        \n        \n        ", "class Solution:\n    def SequentialDigits(self, low: int, high: int) -> List[int]:\n        res = []\n        for i in range(1, 10):\n            for j in range(i+1, 10):\n                i = i*10 +j\n                if i > high:\n                    break\n                if i >= low:\n                    res.append(i)\n        return sorted(res)\n    def sequentialDigits(self, low, high):\n        out = []\n        queue = deque(range(1,10))\n        while queue and queue[0] <= high:\n            elem = queue.popleft()\n            if low <= elem:\n                out.append(elem)\n            last = elem % 10\n            if last < 9: queue.append(elem*10 + last + 1)\n                    \n        return out"]