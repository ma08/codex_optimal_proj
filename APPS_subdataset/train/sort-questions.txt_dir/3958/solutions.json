["from collections import deque\n\ndef custom_fib(signature, indexes, n):\n    fib = deque(signature)\n    for _ in range(n):\n        fib.append(sum(map(fib.__getitem__, indexes)))\n        fib.popleft()\n    return fib[0]", "def custom_fib(signature,indexes,n):\n    for _ in range(n):\n        signature = signature[1:] + [sum(signature[i] for i in indexes)]\n    return signature[0]", "def custom_fib(ini,index,k):\n    for n in range(k-len(ini)+1):\n        ini = ini[1:] + [sum(ini[i] for i in index)]\n    return ini[[-1,k][k<len(ini)]]", "from collections import deque\n\ndef custom_fib(sig, ind, n):\n    sig = deque(sig)\n    while n >= len(sig):\n        s, n = sum(sig[x] for x in ind), n - 1\n        sig.append(s)\n        sig.popleft()\n    return sig[n]", "def custom_fib(seq, indexes, n):\n    size = len(seq)\n    \n    while len(seq) <= n:\n        tail = seq[-size:]\n        seq.append( sum( tail[i] for i in indexes ) )\n    \n    return seq[n]", "from collections import deque\n\ndef custom_fib(signature,indexes,n):\n    s = deque(signature, maxlen=len(signature))\n    for i in range(n):\n        s.append(sum(s[i] for i in indexes))\n    return s[0]\n", "def custom_fib(signature, indexes, n):\n    values, l = list(signature), len(signature)\n    while len(values) <= n:\n        values.append(sum(values[-l:][i] for i in indexes))\n    return values[n]", "custom_fib=f=lambda s,x,n:f(s[1:]+[sum(s[i]for i in x)],x,n-1)if n else s[n]", "custom_fib=lambda s,x,n,l=None: s[n] if len(s)>n else custom_fib((lambda p: s+[sum(p[i] for i in x)])(s[-(l or len(s)):]),x,n,l or len(s))", "def custom_fib(signature, indexes, n):\n    if n < len(signature): return signature[n]\n    return custom_fib(signature[1:]+[sum(map(signature.__getitem__, indexes))], indexes, n-1)"]