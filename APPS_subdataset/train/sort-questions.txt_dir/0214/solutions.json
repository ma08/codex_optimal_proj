["class Solution:\n    def movesToMakeZigzag(self, nums):\n        n = len(nums)\n        res0 = 0\n        for i in range(0, n, 2):\n            nei = min(nums[j] for j in [i - 1, i + 1] if 0 <= j <= n-1)\n            if nums[i] >= nei:\n                res0 += nums[i] - nei + 1\n        res1 = 0\n        for i in range(1, n, 2):\n            nei = min(nums[j] for j in [i - 1, i + 1] if 0 <= j <= n-1)\n            if nums[i] >= nei:\n                res1 += nums[i] - nei + 1\n        return min(res0, res1)", "class Solution:\n    def movesToMakeZigzag(self, nums: List[int]) -> int:\n        # do either first case or second case\n        even = odd = 0\n        n = len(nums)\n        for i in range(n):\n            prev = nums[i - 1] if (i - 1) >= 0 else float('inf')\n            next = nums[i + 1] if (i + 1) < n else float('inf')\n            \n            change = max(0, nums[i] - min(prev, next) + 1)\n            \n            if i % 2 == 0:\n                even += change\n            else:\n                odd += change\n         \n        return min(even, odd)", "class Solution:\n    def movesToMakeZigzag(self, nums: List[int]) -> int:\n        return self.sb(nums)\n    \n    '''\n    \uac4d even \uc744 \uc791\uac8c\ub9cc\ub4e4\uac70\ub098\uc8fc\ubcc0\ubcf4\ub2e4 \ud639\uc740 odd\ub97c \uc8fc\ubcc0\ubcf4\ub2e4 \uc791\uac8c\ub9cc\ub4e4\uac70\ub098 \u3147\u3147\n    '''\n    def sb(self, nums):\n        nums = [float('inf')] + nums + [float('inf')]\n        \n        res = [0,0]\n        \n        for i in range(1, len(nums)-1):\n            res[i%2] += max(0, (nums[i] - min(nums[i-1],nums[i+1])+1)) # \uc8fc\ubcc0\uc774 \ub2e4 \ub098\ubcf4\ub2e4 \ud06c\uba74 \uc6c0\uc9c1\uc774\uc9c0\uc54a\uc544\ub3c4\ub40c :) \ud639\uc740 \ub098\ubcf4\ub2e4 \uc791\uc740\uc560\uc788\uc73c\uba74 \ud070\ub9cc\ud07c + 1 \uc904\uc5ec\uc57c\ud568\n        return min(res)", "class Solution:\n    def movesToMakeZigzag(self, nums: List[int]) -> int:\n        if len(nums) <= 2:\n            return 0\n        n = len(nums)\n        if n%2 == 0:\n            step1 = max(0,nums[-1]-nums[-2]+1)\n            for i in range(1,n-1,2):\n                step1 += max(0, nums[i] - min(nums[i-1], nums[i+1])+1)\n            step2 = max(0, nums[0]-nums[1] +1)\n            for i in range(2,n,2):\n                step2 += max(0, nums[i] - min(nums[i-1], nums[i+1])+1)\n        else:\n            step1 = max(0,nums[-1]-nums[-2]+1) + max(0, nums[0]-nums[1] +1)\n            for i in range(2,n-1,2):\n                step1 += max(0, nums[i] - min(nums[i-1], nums[i+1])+1)\n            step2 = 0\n            for i in range(1,n,2):\n                step2 += max(0, nums[i] - min(nums[i-1], nums[i+1])+1)\n        return min(step1, step2)", "class Solution:\n    def movesToMakeZigzag(self, A: List[int]) -> int:\n        res1=0\n        n=len(A)\n        B=A.copy()\n        for i in range(1,n,2):\n            if A[i-1]<=A[i]:\n                t=A[i]-A[i-1]+1\n                res1+=t\n                A[i]=A[i-1]-1\n            if i+1<n and A[i+1]<=A[i]:\n                t=A[i]-A[i+1]+1\n                res1+=t\n                A[i]=A[i+1]-1\n        res2=0\n        for i in range(0,n,2):\n            if i-1>=0 and B[i]>=B[i-1]:\n                t=B[i]-B[i-1]+1\n                res2+=t\n                B[i]=B[i-1]-1\n            if i+1<n and B[i+1]<=B[i]:\n                t=B[i]-B[i+1]+1\n                res2+=t\n                B[i]=B[i+1]-1\n        # print(A)\n        # print(B)\n        # print(res1,res2)\n        return min(res1,res2)", "class Solution:\n    def movesToMakeZigzag(self, nums: List[int]) -> int:\n        res = [0, 0]\n        \n        for i in range(len(nums)):\n            res[i%2] += max(nums[i] + 1 - min(nums[i-1] if i else float('inf'), nums[i+1] if i < len(nums) - 1 else float('inf')), 0)\n        \n        return min(res)\n"]