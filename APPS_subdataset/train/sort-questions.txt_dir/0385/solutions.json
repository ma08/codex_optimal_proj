["class Solution:\n    def kthFactor(self, n: int, k: int) -> int:\n        i = 0\n        for j in range(1, n+1):\n            if n % j == 0:\n                i += 1\n                if i == k:\n                    return j\n        return -1\n            \n", "class Solution:\n    def kthFactor(self, n: int, k: int) -> int:\n        r1 = []\n        r2 = []\n        for i in range(1, int(n**.5) + 1):\n            if n % i == 0:\n                r1.append(i)\n                if n != i * i:\n                    r2 = [n//i] + r2\n        r = r1 + r2\n        if len(r) < k:\n            return -1\n        else:\n            return r[k - 1]", "class Solution:\n    def kthFactor(self, n: int, k: int) -> int:\n        i = 1\n        # factors that are smaller than sqrt(n)\n        factor_list_small = []\n        # factors that are larger than sqrt(n)\n        factor_list_large = []\n        while pow(i,2) < n:\n            a, b = divmod(n, i) # a is the quotient, b is the remainder\n            if b == 0:\n                factor_list_small.append(i) # add to the end\n                factor_list_large = [a] + factor_list_large # add to the beginning \n            i += 1\n        if pow(i,2) == n:\n            factor_list_small.append(i)\n        # combine these two lists together\n        factor_list = factor_list_small + factor_list_large\n        if len(factor_list) < k:\n            return(-1)\n        else:\n            return(factor_list[k-1])", "from math import sqrt, ceil\n\nclass Solution:\n    def kthFactor(self, n, k):\n        factors = []\n        if int(sqrt(n)) == sqrt(n):\n            for i in range(1, int(sqrt(n))+1):\n                if n % i == 0:\n                    factors.append(i)\n                    if i == int(n/i):\n                        continue\n                    factors.append(int(n / i))\n        else:\n            for i in range(1, ceil(sqrt(n))):\n                if n % i == 0:\n                    factors.append(i)\n                    factors.append(int(n/i))\n        factors.sort()\n        if k > len(factors):\n            return -1\n        return factors[k-1]", "import math\nclass Solution:\n    def kthFactor(self, n: int, k: int) -> int:\n        facts=[]\n        for i in range(1,n+1):\n            if n%i==0:\n                facts.append(i)\n        if len(facts)<k:\n            return -1\n        else:\n            return facts[k-1]\n            \n", "class Solution:\n    def kthFactor(self, n: int, k: int) -> int:\n        check = []\n        for i in range(1,n+1):\n            if n % i == 0:\n                check.append(i)\n        if len(check) < k:\n            return -1\n        else:\n            return check[k-1]", "class Solution:\n    def kthFactor(self, n: int, k: int) -> int:\n        i = 0\n        for j in range(1, n + 1):\n            if n%j == 0:\n                i += 1\n            if i == k:\n                return j\n        return -1\n", "class Solution:\n    def kthFactor(self, n, k):\n        \n        solution_space = list([x for x in list(range(1,n+1)) if n % x == 0])\n        if len(solution_space) < k:\n            return -1\n        else:\n            return list([x for x in list(range(1,n+1)) if n % x == 0])[k-1]\n", "class Solution:\n    def kthFactor(self, n: int, k: int) -> int:\n        for i in range(1, n+1):\n            if n % i == 0:\n                k -= 1\n                if k == 0:\n                    return i\n        return -1", "class Solution:\n    def kthFactor(self, n: int, k: int) -> int:\n        try:\n            return list(filter(lambda x:n%x==0,range(1,n+1)))[k-1]\n        except:\n            return -1"]