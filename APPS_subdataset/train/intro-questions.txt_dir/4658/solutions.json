["def max_product(lst, n_largest_elements):\n    lst_largest = sorted(lst)[-n_largest_elements:]\n    prod = 1\n    for number in lst_largest:\n        prod *= number\n    return prod", "def max_product(lst, n):\n    from functools import reduce\n    return reduce(lambda x,y: x*y, sorted(lst, reverse=True)[:n])", "def max_product(lst, n_largest_elements):\n    sorted_lst = sorted(lst, reverse=True)\n    product = 1\n    for i in range(n_largest_elements): product *= sorted_lst[i]\n    return product", "from functools import reduce\nfrom operator import mul\n\nmax_product = lambda lst, k: reduce(mul, sorted(lst)[-k:])\n", "def max_product(lst, n):\n    return __import__('functools').reduce(int.__mul__, sorted(lst)[-n:])", "def max_product(lst, n, res = 1):\n    for i in sorted(lst)[-n:]:\n        res *= i\n    return res", "def max_product(lst, n):\n    lst = sorted(lst)[::-1]\n    for _ in range(n-1):\n        rec(lst)\n    return lst[0]\n    \ndef rec(arr):\n    arr[0] = arr.pop(0) * arr[0]\n    return arr\n", "def max_product(lst, n):\n    return __import__('functools').reduce(lambda x,y: x*y, __import__('heapq').nlargest(n, lst) )\n    \n    \n", "def max_product(lst, l):\n    st=sorted(lst)\n    res=st[-l:]\n    const=1\n    for i in res:\n        const=const*i\n    return const\n", "def max_product(lst, n_largest_elements):\n    p=1\n    for x in sorted(lst,reverse=True)[:n_largest_elements]: p*=x\n    return p", "def max_product(lst, n):\n    return __import__('functools').reduce(lambda x,y: x*y,sorted(lst,reverse=True)[:n])", "def max_product(lst, n):\n    a = lst.sort(reverse = True)\n    i = 0\n    sum = 1\n    while i<n:\n        sum = sum * lst[i]\n        i += 1\n    return sum", "def max_product(lst, n_largest_elements):\n    l =sorted(lst, reverse = True)\n    result = l[0]\n    for i in range(1, n_largest_elements):\n        result *= l[i]\n    return result", "def max_product(lst, n_largest_elements):\n    lst = sorted(lst)\n    product = 1\n    for i in range(n_largest_elements):\n        product *= lst[-i-1]\n    return product", "import functools\ndef max_product(lst, n_largest_elements):\n    return functools.reduce(lambda x,y: x * y, sorted(lst, reverse=True)[:n_largest_elements])", "from operator import mul\nfrom functools import reduce\ndef max_product(lst, n_largest_elements):\n    return reduce(mul, sorted(lst)[::-1][:n_largest_elements])", "import functools as f\n\ndef max_product(lst, n):\n    return f.reduce(lambda a,b : a*b, sorted(lst)[-n:])", "def max_product(lst, n_largest_elements):\n    total = 1\n    for x in sorted(lst,reverse=True)[0:n_largest_elements]:\n        total *= x  \n    return total", "max_product=lambda a,n:__import__(\"functools\").reduce(lambda x, y: x * y, sorted(a)[-n:])", "def max_product(lst, n_largest_elements):\n    from functools import reduce\n    from operator import mul\n    return reduce(mul,sorted(lst)[-n_largest_elements:])", "def max_product(lst, n):\n    lst = sorted(lst, reverse=True)\n    result = lst[0]\n    for i in range(1,n):\n        result *= lst[i]\n    return result", "from functools import reduce; max_product=lambda lst, n: reduce(lambda a,b: a*b, sorted(lst)[-n:],1)", "def max_product(lst, n_largest_elements):\n    from functools import reduce\n    return reduce(lambda x, y: x * y, sorted(lst)[-n_largest_elements:])", "import operator\nimport functools\ndef max_product(lst, n_largest_elements):\n    return functools.reduce(operator.mul,sorted(lst,reverse=True)[:n_largest_elements])", "def max_product(lst, n):\n    x = 1\n    for i in sorted(lst, reverse=True)[:n]:\n        x *= i\n    return x", "import heapq\nfrom functools import reduce\n\ndef max_product(lst, n):\n    return reduce(lambda x,y: x*y, heapq.nlargest(n, lst))", "from functools import reduce\nfrom heapq import nlargest\ndef max_product(lst, n_largest_elements):\n    return reduce(int.__mul__, nlargest(n_largest_elements,lst))", "def max_product(lst, n_largest_elements):\n    x = 1\n    for i in sorted(lst,reverse=True)[:n_largest_elements]:\n        x *= i\n    return x", "max_product = lambda lst, n: __import__('functools').reduce(lambda x,y: x*y, sorted(lst, reverse=True)[:n])    ", "from functools import reduce\nmax_product = lambda lst, n: reduce(lambda x,y: x*y, sorted(lst, reverse=True)[:n])\n    \n", "def mult(s):\n    re = s[0]\n    for i in s[1:]:\n        re = re * i\n    return re\n\ndef max_product(lst, n):\n    return mult(sorted(lst, reverse=True)[:n])\n    \n", "def max_product(lst, n_largest_elements):\n    out = 1\n    order = sorted(lst)\n    for _ in range(n_largest_elements):\n        out *= order.pop()\n    return out", "\ndef max_product(lst, n_largest_elements):\n    sort_lst = sorted(lst)\n    output = 1\n    for i in range(1,n_largest_elements+1):\n        output = output*sort_lst[-i]\n    return output", "def max_product(lst, n_largest_elements):\n    answer = 1\n    lst = sorted(lst)\n    for i in lst[-n_largest_elements:]:\n        answer *= i\n    return answer", "def max_product(lst, n_largest_elements):\n    lst.sort()\n    x=lst[-1]\n    for i in range(n_largest_elements-1):\n        lst.pop(-1)\n        x*=lst[-1]\n    return x", "def max_product(lst, n_largest_elements):\n    out=1\n    work=sorted(lst,reverse=True)\n    for i in range(n_largest_elements):\n        out*=work[i]\n    return out", "def max_product(l,n):\n    l = sorted(l)[::-1]\n    res = 1\n    for i in range(n):\n        res *= l[i]\n    return res", "max_product = lambda lst, n_largest_elements: __import__('functools').reduce(lambda a,b: a*b, sorted(lst)[-n_largest_elements:])", "from functools import reduce\nmax_product = lambda lst, n_largest_elements: reduce(lambda a,b: a*b, sorted(lst)[-n_largest_elements:])", "from functools import reduce\ndef max_product(ls, k):\n    return reduce(lambda a,c: a*c, sorted(ls ,reverse=True)[:k], 1)", "\nfrom functools import reduce\n\ndef max_product(A, n):\n    prod = lambda A : reduce(lambda a, b : a*b, A)\n    return prod(sorted(A, reverse=True)[:n])", "def max_product(lst, n_largest_elements):\n    lst.sort(reverse=True)\n    total = 1\n    for num in range(n_largest_elements):\n        total = total * lst[num]\n    return total", "def max_product(lst, n_largest_elements):\n    lst = sorted(lst, reverse=True)[0:n_largest_elements]\n    n = 1\n    for x in range(n_largest_elements):\n        n *= lst[x]\n    return n\n", "def max_product(lst, n_largest_elements):\n    from operator import mul\n    from functools import reduce\n    \n    return reduce(mul, sorted(lst)[::-1][:n_largest_elements], 1)", "def max_product(lst, n_largest_elements):\n    lst = sorted(lst)[::-1]\n    c = 1\n    for i in range(n_largest_elements):\n        c = c*lst[i]\n    return c", "from functools import reduce\ndef max_product(L, k):\n    return reduce(lambda a, b : a*b, sorted(L, reverse = True)[:k])", "def max_product(arr, n):\n    b = sorted(arr, reverse=True)\n    acc = 1\n    for i in b[:n]:\n        acc *= i\n    return acc", "def max_product(lst,n):\n    ans = 1\n    for i in sorted(lst,reverse = True)[:n]:\n        ans *= i\n    return ans ", "from functools import reduce \n\ndef max_product(l, n):\n    return reduce(lambda x,y: x*y,sorted(l)[-n:])\n", "def max_product(lst, n_largest_elements):\n    a = sorted(lst)[-n_largest_elements:]\n    prod = 1\n    for i in a:\n        prod = prod * i\n    return prod\n", "from operator import mul\nfrom heapq import nlargest\nfrom functools import reduce\n\ndef max_product(l,n):\n    return reduce(mul,nlargest(n,l))", "from functools import reduce\nfrom operator import mul\nmax_product=lambda l, n: reduce(mul,sorted(l, reverse=True)[:n])", "def max_product(lst, n_largest_elements):\n    l=sorted(lst, reverse=True)\n    res=1\n    for i in range(0,n_largest_elements):\n        res*=l[i]\n    return res", "from functools import reduce \nfrom operator import mul\n\ndef max_product(lst, n_largest_elements):\n    lst = sorted(lst, reverse=True)[:n_largest_elements]\n    return reduce(mul, lst)\n", "def max_product(lst, n_largest_elements):\n    lst = sorted(lst)\n    result = 1\n    for i in range(1, n_largest_elements + 1):\n        x = i-i-i\n        result *= lst[x]\n    return result", "def max_product(lst, n_largest_elements):\n    accumulator = 1\n    lst.sort()\n    if len(lst) == 0:\n        return lst[0]\n    else:\n        x = lst[-n_largest_elements:]\n        for eachnumber in x:\n            accumulator = accumulator * eachnumber\n        return accumulator", "from functools import reduce\ndef max_product(lst, n_largest_elements):\n    lst = sorted(lst , reverse = True)\n    return int(reduce(lambda x , y : x * y , lst[:n_largest_elements]))\n", "def max_product(lst, n):\n    lst.sort(reverse=1)\n    res=1\n    for i in lst[:n]:\n        res*=i\n    return res\n", "def max_product(lst, n_largest_elements):\n    a=sorted(lst,reverse=True)\n    b=1\n    for i in range(n_largest_elements):\n        b*=a[i]\n    return b\n", "def max_product(lst, n):\n    result = 1\n    for number in sorted(lst)[-n:]:\n        result *= number\n    return result\n", "from heapq import nlargest\nfrom operator import mul\nfrom functools import reduce\n\ndef max_product(lst, n):\n    return reduce(mul, nlargest(n, lst))", "def max_product(lst, n_largest_elements):\n    lst.sort(reverse=True)\n    m=1\n    for a in range(n_largest_elements):\n      m*=lst[a]\n    return m\n      \n", "def max_product(lst, n_largest_elements):\n    temp = sorted(lst, reverse=True)\n    total = 1\n    for i in range(n_largest_elements):\n        total *= temp[i]\n    return total", "from functools import *\ndef max_product(lst, n_largest_elements):\n    return reduce(lambda a,b:a*b, sorted(lst)[-n_largest_elements:])", "from functools import reduce as f\ndef max_product(lst, n):\n    return f(lambda x,y: x * y, sorted(lst)[::-1][:n])", "def max_product(lst, n_largest_elements):\n    a=[x for x in  sorted(lst,reverse=True)][:n_largest_elements]\n    s=1\n    for x in a:\n        s=s*x\n    return s", "def max_product(lst, n_largest_elements):\n    sort = sorted(lst)\n    res=[]\n    for i in range(n_largest_elements):\n        res.append(sort.pop())\n    ans = 1\n    for num in res:\n        ans *= num\n    return ans", "from functools import reduce\n\ndef max_product(lst, n_largest_elements):\n    return reduce(int.__mul__,sorted(lst)[-n_largest_elements:])", "from functools import reduce\n\ndef max_product(l, k):\n    return reduce(lambda res, x:res * x,sorted(l)[-k:])", "def max_product(lst, n):\n    a = sorted(lst , reverse=True)\n    ans = 1\n    for i in range(0,n):\n       ans *= a[i]\n    return ans", "def max_product(lst, n_largest_elements):\n    sorted_list = sorted(lst, reverse=True)\n    list = sorted_list[:n_largest_elements]\n    res=1\n    for i in list:\n        res = res * i\n    return res    ", "from functools import reduce\n\ndef max_product(lst, n):\n    st = sorted(lst)\n    lg = st[-n:]\n    return reduce(lambda x,y : x * y ,lg)\n    \n", "from functools import reduce\ndef max_product(lst, n_largest_elements):\n    num = sorted(lst)\n    num2 = num[-n_largest_elements:]\n    return reduce(lambda x , y : x * y, num2)", "from functools import reduce\ndef max_product(lst, n):\n    res =sorted(lst)[-n:]\n    return reduce(lambda x,y: x*y, res)\n", "import numpy\ndef max_product(lst, n_largest_elements):\n        list = sorted(lst, reverse=True)[:n_largest_elements]\n        res = 1\n        for i in list:\n            res = res * i\n        return res\n        \n       \n", "def max_product(lst, n_largest_elements):\n    lst=sorted(lst)\n    c=1\n    for i in lst[-n_largest_elements:]:\n        c*=i\n    return c", "def max_product(lst, n_largest_elements):\n    arr = sorted(lst)[-n_largest_elements:]\n    output = 1\n    for elem in arr:\n        output *= elem\n    return output", "def max_product(lst, n_largest_elements):\n  nums = sorted(lst)\n  product = 1\n  for num in nums[-(n_largest_elements):]:\n    product = product * num\n  return product", "from functools import reduce\nfrom operator import mul\nfrom typing import List\n\n\ndef max_product(lst: List[int], n_largest_elements: int) -> int:\n    return reduce(mul, sorted(lst)[-n_largest_elements:])\n", "def max_product(lst, n):\n    s = 1\n    ls = sorted(lst,reverse=True)\n    for i in ls[:n]:\n        s *= i\n    return s\n", "def max_product(lst, n_largest_elements):\n    answer = 1\n    lst.sort(reverse = True)\n    for x in range(n_largest_elements):\n        answer *= lst[x]\n    return answer", "def max_product(arr, n):\n    prod = 1\n    arr = list(sorted(arr, reverse=True))\n    for i in range(n):\n        prod *= arr[i]\n    return prod\n", "def max_product(lst, n_largest_elements):\n    \"\"\"\n    Return the maximum product of k integers from lst.\n    \"\"\"\n    lst = sorted(lst)\n    res = 1\n    for i in lst[-n_largest_elements:]:\n        res *= i\n    return res", "from functools import reduce\ndef max_product(lst, largest):\n    return reduce(lambda x, y: x * y, sorted(lst)[-largest:])", "def max_product(lst, n):\n    from functools import reduce\n    lst=[i for i in sorted(lst,reverse=True)[:n]]\n    return reduce(lambda x,y:x*y,lst)", "def max_product(lst, n_largest_elements):\n    lst.sort()\n    product = 1\n    \n    for i in lst[len(lst)-n_largest_elements:]:\n        product *= i\n        \n    return product\n", "def max_product(lst, n_largest_elements):\n    lst.sort()\n    product = 1\n    for i in range((len(lst)-1),((len(lst)-1)-n_largest_elements),-1):\n        product = product*lst[i]\n    return product\n\n", "def max_product(lst, n_largest_elements):\n    product = 1\n    lst.sort()\n    for i in lst[-n_largest_elements::]:\n        product = product * i\n        \n    return product", "def max_product(lst, n_largest_elements):\n  a=sorted(lst)\n  c=1\n  for i in a[-n_largest_elements::]:\n    c=c*i\n  return c", "def max_product(lst, n_largest_elements):\n    lst.sort()\n    c=1\n    for i in lst[-n_largest_elements::]:\n        c=i*c \n    return c", "def max_product(lst, n_largest_elements):\n    lst.sort()\n    c=1\n    a=lst[-n_largest_elements::]\n    for i in a:\n        c=i*c \n    return c", "def max_product(lst, n_largest_elements):\n    prod = 1\n    for i in sorted(lst)[-n_largest_elements:]:\n        prod *= i;\n    return(prod)", "from heapq import nlargest\nfrom functools import reduce\nfrom operator import mul\n\nmax_product = lambda lst, k: reduce(mul, nlargest(k, lst))", "def max_product(lst, n_largest_elements):\n    x = sorted(lst)[-n_largest_elements:]\n    p = 1\n    for i in x:\n        p *= i\n        \n    return p", "from functools import reduce\ndef max_product(lst, nl):\n    return reduce(lambda x, y: x * y, sorted(lst,reverse = True)[:nl])"]