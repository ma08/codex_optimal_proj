["def ranks(a):\n  sortA = sorted(a, reverse=True)\n  return [sortA.index(s) + 1 for s in a]\n", "def ranks(results):\n    ranks = {}\n    for k, v in enumerate(sorted(results, reverse=True), start=1):\n        if not v in ranks:\n            ranks[v] = k\n    return [ranks[i] for i in results]", "def ranks(a):\n    return [sorted(a, reverse = True).index(m) + 1 for m in a]", "def ranks(a):\n    dict = {v: k for k, v in sorted(enumerate(sorted(a, reverse=True), start=1), reverse=True)}\n    return [dict[i] for i in a]\n", "import copy\n\ndef ranks(lst):\n    sortedVals = copy.deepcopy(lst)     #need deep copy to not mutate original list\n    sortedVals.sort(reverse=True)       #descending order\n    \n    rankVec = []\n    for v in lst:                       #for every value in the list, calculate its rank\n        indLoc = sortedVals.index(v)    #always finds first occurance so repetition does not matter\n        rankOfVal = indLoc+1            #min rank is 1 not 0\n        rankVec.append( rankOfVal )\n\n    return rankVec\n#---end function\n", "from collections import Counter\n\ndef ranks(a):\n    id, res = 1, {}\n    for k,v in sorted(Counter(a).items(), reverse=True):\n        id, res[k] = id+v, id\n    return list(map(res.get, a))", "def ranks(a):\n    b = sorted(a, reverse=True)\n    d = {i:b.index(i)+1 for i in a}\n    return [d[i] for i in a]", "def ranks(a):\n    ranks = {}\n    for rank, x in enumerate(sorted(a, reverse=True), 1):\n        if x not in ranks:\n            ranks[x] = rank\n    return [ranks[x] for x in a]", "def ranks(a):\n    s = sorted(a)[::-1]\n    return [(s.index(n) + 1) for n in a]\n", "def ranks(a):\n    rankarr = [None] + sorted(a)[::-1]\n    return [rankarr.index(x) for x in a]       \n"]