["KEYBOARD = \"abcde123fghij456klmno789pqrst.@0uvwxyz_/\"\nMAP      = {c: (i//8, i%8) for i,c in enumerate(KEYBOARD)}\n\ndef manhattan(*pts): return sum( abs(z2-z1) for z1,z2 in zip(*pts))\n\ndef tv_remote(word):\n    return len(word) + sum( manhattan(MAP[was], MAP[curr]) for was,curr in zip('a'+word, word))", "def getlocation(letter):\n    keyboard = 'abcde123fghij456klmno789pqrst.@0uvwxyz_/'\n    return divmod(keyboard.find(letter),8)\n\ndef tv_remote(word):\n    x1, y1 = 0, 0\n    moves = 0\n    for letter in word:\n        x2, y2 = getlocation(letter)\n        moves += abs(x2-x1) + abs(y2-y1) + 1\n        x1, y1 = x2, y2\n    return moves\n", "def tv_remote(word):\n    # Your code here!!\n    pp = 0\n    res = 0\n    r = 'abcde123fghij456klmno789pqrst.@0uvwxyz_/'\n    for w in word:\n        p = r.find(w)\n        res += abs(p//8-pp//8) + abs(p%8-pp%8) + 1\n        pp = p\n    return res", "def tv_remote(word):\n    letters = {c: (x, y)\n        for y, row in enumerate((\n        \"abcde123\",\n        \"fghij456\",\n        \"klmno789\",\n        \"pqrst.@0\",\n        \"uvwxyz_/\"))\n        for x, c in enumerate(row)}\n    return sum(\n        abs(letters[c1][0] - letters[c2][0]) +\n        abs(letters[c1][1] - letters[c2][1]) + 1\n        for c1, c2 in zip(\"a\" + word, word))", "D = {v:(r, c) for r, row in enumerate(['abcde123', 'fghij456', 'klmno789', 'pqrst.@0', 'uvwxyz_/']) for c, v in enumerate(row)}\n\ndef tv_remote(word):\n    return sum(abs(D[a][0] - D[b][0]) + abs(D[a][1] - D[b][1]) + 1 for a, b in zip('a' + word, word))", "def tv_remote(word):\n# define the remote grid in a dictionary\n    grid = {\n        \"a\":[1,1],\"b\":[1,2],\"c\":[1,3],\"d\":[1,4],\"e\":[1,5],\"1\":[1,6],\"2\":[1,7],\"3\":[1,8],\n        \"f\":[2,1],\"g\":[2,2],\"h\":[2,3],\"i\":[2,4],\"j\":[2,5],\"4\":[2,6],\"5\":[2,7],\"6\":[2,8],\n        \"k\":[3,1],\"l\":[3,2],\"m\":[3,3],\"n\":[3,4],\"o\":[3,5],\"7\":[3,6],\"8\":[3,7],\"9\":[3,8],\n        \"p\":[4,1],\"q\":[4,2],\"r\":[4,3],\"s\":[4,4],\"t\":[4,5],\".\":[4,6],\"@\":[4,7],\"0\":[4,8],\n        \"u\":[5,1],\"v\":[5,2],\"w\":[5,3],\"x\":[5,4],\"y\":[5,5],\"z\":[5,6],\"_\":[5,7],\"/\":[5,8]}\n    \n    total_moves = 0\n    start_pos = [1, 1]\n    \n    for l in word:\n        v_moves = abs(grid[l][0] - start_pos[0])\n        h_moves = abs(grid[l][1] - start_pos[1])\n        total_moves += (v_moves + h_moves + 1)\n        start_pos = grid[l]\n    return total_moves\n    \n    \n", "def tv_remote(word):\n    pad = [\"abcde123\", \"fghij456\", \"klmno789\", \"pqrst.@0\", \"uvwxyz_/\"]\n    index = {c: (x, y) for x, lst in enumerate(pad) for y, c in enumerate(lst)}\n    res = 0\n    pos = (0, 0)\n    for char in word:\n        res += (abs(pos[0] - index[char][0]) + abs(pos[1] - index[char][1])) + 1\n        pos = index[char]\n    return res", "def tv_remote(word):\n    k = 'abcde123fghij456klmno789pqrst.@0uvwxyz_/'\n    P,sum = 0,0\n    for c in word:\n        p = k.find(c)\n        sum += abs(P//8-p//8) + abs(P%8-p%8) + 1\n        P = p\n    return sum", "from collections import namedtuple\n\n\ndef tv_remote(word: str):\n    remote = (\n        'a', 'b', 'c', 'd', 'e', '1', '2', '3',\n        'f', 'g', 'h', 'i', 'j', '4', '5', '6',\n        'k', 'l', 'm', 'n', 'o', '7', '8', '9',\n        'p', 'q', 'r', 's', 't', '.', '@', '0',\n        'u', 'v', 'w', 'x', 'y', 'z', '_', '/'\n    )\n    Position = namedtuple('Position', 'y x')\n    \n    prev = Position(0, 0)\n    button_presses = 0\n    for letter in word:\n        cur = Position(*divmod(remote.index(letter), 8))\n        button_presses += abs(prev.y - cur.y) + abs(prev.x - cur.x) + 1\n        prev = cur\n\n    return button_presses", "def tv_remote(word):\n    return len(word) + sum(distance(coords[a], coords[b]) for a, b in zip(f\"a{word}\", word))\n\nkeyboard = (\"abcde123\", \"fghij456\", \"klmno789\", \"pqrst.@0\", \"uvwxyz_/\")\ncoords = {char: (line.index(char), y) for y, line in enumerate(keyboard) for char in line}\n\ndef distance(pos1, pos2):\n    return abs(pos2[0] - pos1[0]) + abs(pos2[1] - pos1[1])\n", "def tv_remote(word):\n    keys = [ '-afkpu',  '-bglqv', '-chmrw', '-dinsx', '-ejoty', '-147.z', '-258@_', '-3690/' ]\n    \n    index_last = first_in(word[0] , keys )\n    \n    ret = sum(index_last )\n    \n    for i in word[1:]:\n        inkey = first_in(i, keys)[0]\n        ret += ( abs(index_last[0] - inkey ) + abs(index_last[1] - first_in(i, keys[inkey])[0] ) )  + 1\n        index_last = [ inkey, first_in(i, keys[inkey])[0] ]\n        \n    return ret\n    \nfirst_in = lambda l, k : [ (k.index(e), e.index(l)) for e in k if l in e ][0]", "LAYOUT = \"\"\"\\\na   b   c   d   e   1   2   3\nf   g   h   i   j   4   5   6\nk   l   m   n   o   7   8   9\np   q   r   s   t   .   @   0\nu   v   w   x   y   z   _   /\n\"\"\".split()\n\ndef get_pos(char):\n    return divmod(LAYOUT.index(char), 8)\n\ndef distance(char1, char2):\n    c1x, c1y = get_pos(char1)\n    c2x, c2y = get_pos(char2)\n    return abs(c1x - c2x) + abs(c1y - c2y)\n\ndef tv_remote(word):\n    return sum(distance(prev, curr) for prev, curr in zip(\"a\" + word, word)) + len(word)", "def tv_remote(word):\n    matrix = [\n             ['a', 'b', 'c', 'd', 'e', '1', '2', '3'],\n             ['f', 'g', 'h', 'i', 'j', '4', '5', '6'],\n             ['k', 'l', 'm', 'n', 'o', '7', '8', '9'],\n             ['p', 'q', 'r', 's', 't', '.', '@', '0'],\n             ['u', 'v', 'w', 'x', 'y', 'z', '_', '/'],\n             ]\n\n    start = [0, 0]\n    _dict = dict()\n    actions = []\n    _lambda = lambda x, y: (abs(x[0]-y[0]) + abs(x[1]-y[1]))+1\n\n    for char in word:\n        for i in range(5):\n            if char in matrix[i]:\n                _dict[char] = [i, matrix[i].index(char)]\n        actions.append(_lambda(start, _dict[char]))\n        start = _dict[char]\n\n    return sum(actions)", "def tv_remote(word):\n    word, total = 'a' + word, 0\n    s = 'abcde123fghij456klmno789pqrst.@0uvwxyz_/'\n    d = {i: (s.index(i)//8, s.index(i)%8) for i in s}\n    \n    for a, b in zip(word, word[1:]):\n        (x1, y1), (x2, y2) = d[a], d[b]\n        total += abs(x1 - x2) + abs(y1 - y2)\n    return total + len(word) - 1", "def tv_remote(word):\n    l = ['abcde123',\n         'fghij456',\n         'klmno789',\n         'pqrst.@0',\n         'uvwxyz_/',]\n    a, b, s = 0, 0, 0\n    for i, m in enumerate(word):\n        for j, n in enumerate(l):\n            if m in n:\n                a1 = j\n                b1 = n.index(m)\n                s += abs(a-a1) + abs(b-b1) + 1\n                break\n        a, b = a1, b1\n    return s\n", "REMOTE = 'abcde123fghij456klmno789pqrst.@0uvwxyz_/'\n\ndef tv_remote(word):\n    x, y, total = 0, 0, 0\n    for char in word:\n        pos = REMOTE.index(char)\n        charx, chary = pos % 8, pos // 8\n        total += 1 + abs(charx - x) + abs(chary - y)\n        x, y = charx, chary\n    return total", "import numpy as np\ndef tv_remote(word):\n    # Your code here!!\n    # 1. A stupid method is to setup an table(dictionary)\n    # 2. set up a 2D array\n    table=np.array([[\"a\",\"b\",\"c\",\"d\",\"e\",\"1\",\"2\",\"3\"],\n    [\"f\",\"g\",\"h\",\"i\",\"j\",\"4\",\"5\",\"6\"],\n    [\"k\",\"l\",\"m\",\"n\",\"o\",\"7\",\"8\",\"9\"],\n    [\"p\",\"q\",\"r\",\"s\",\"t\",\".\",\"@\",\"0\"],\n    [\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"_\",\"/\"]])\n    cur=[0,0]\n    result=0\n    for char in word:\n        new=np.argwhere(char==table)\n        result+=(1+sum(abs(new-cur).flat))\n        cur=new\n    return result\n", "def tv_remote(word):\n    remote = 'abcde123fghij456klmno789pqrst.@0uvwxyz_/'\n    prev_pos, pres = [0, 0], 0\n    for symb in word:\n        pos = [remote.find(symb)//8, remote.find(symb)%8]\n        pres += abs(pos[0] - prev_pos[0]) + abs(pos[1] - prev_pos[1]) +1\n        prev_pos = pos\n    \n    return pres", "keyboard = [\n    'abcde123',\n    'fghij456',\n    'klmno789',\n    'pqrst.@0',\n    'uvwxyz_/',\n]\npositions = {ch: (r, c) for r, row in enumerate(keyboard) for c, ch in enumerate(row)}\n\n\ndef tv_remote(word):\n    r, c = 0, 0\n    presses = 0\n    for ch in word:\n        r2, c2 = positions[ch]\n        presses += abs(r2-r) + abs(c2-c) + 1\n        r, c = r2, c2\n    return presses", "def tv_remote(word: str):\n    remote = (\n        'a', 'b', 'c', 'd', 'e', '1', '2', '3',\n        'f', 'g', 'h', 'i', 'j', '4', '5', '6',\n        'k', 'l', 'm', 'n', 'o', '7', '8', '9',\n        'p', 'q', 'r', 's', 't', '.', '@', '0',\n        'u', 'v', 'w', 'x', 'y', 'z', '_', '/'\n    )\n\n    button_presses = prev_y = prev_x = 0\n    for letter in word:\n        y, x = divmod(remote.index(letter), 8)\n        button_presses += abs(prev_y - y) + abs(prev_x - x) + 1\n        prev_y, prev_x = y, x\n\n    return button_presses", "def tv_remote(word):\n    l=[['a','b','c','d','e','1','2','3'],\n    ['f','g','h','i','j','4','5','6'],\n    ['k','l','m','n','o','7','8','9'],\n    ['p','q','r','s','t','.','@','0'],\n    ['u','v','w','x','y','z','_','/']];\n    a=[[l.index(x) , x.index(y)] for w in word for x in l for y in x if w in y ]\n    return (sum([abs(x[0]-y[0])+abs(x[1]-y[1]) for x,y in zip(a[1:],a[:-1])]) +sum(a[0]) + len(word))", "def tv_remote(word):\n    keyboard = {\n        \"a\": (0, 0), \"b\": (0, 1), \"c\": (0, 2), \"d\": (0, 3), \"e\": (0, 4), \"1\": (0, 5), \"2\": (0, 6), \"3\": (0, 7),\n        \"f\": (1, 0), \"g\": (1, 1), \"h\": (1, 2), \"i\": (1, 3), \"j\": (1, 4), \"4\": (1, 5), \"5\": (1, 6), \"6\": (1, 7),\n        \"k\": (2, 0), \"l\": (2, 1), \"m\": (2, 2), \"n\": (2, 3), \"o\": (2, 4), \"7\": (2, 5), \"8\": (2, 6), \"9\": (2, 7),\n        \"p\": (3, 0), \"q\": (3, 1), \"r\": (3, 2), \"s\": (3, 3), \"t\": (3, 4), \".\": (3, 5), \"@\": (3, 6), \"0\": (3, 7),\n        \"u\": (4, 0), \"v\": (4, 1), \"w\": (4, 2), \"x\": (4, 3), \"y\": (4, 4), \"z\": (4, 5), \"_\": (4, 6), \"/\": (4, 7)\n    }\n    total = 0\n    first_point_holder = 0\n    second_point_holder = 0\n    for a in word:\n        if a in keyboard:\n            first_point, second_point = keyboard[a]\n            total += abs(first_point - first_point_holder) + abs(second_point - second_point_holder) + 1\n            first_point_holder, second_point_holder = first_point, second_point\n    return total", "def tv_remote(word):\n    \n    a = ['abcde123','fghij456','klmno789','pqrst.@0','uvwxyz_/']\n    \n    start, start_line, count = 0,0,0\n    \n    for i in word:\n        for line in a:\n            if i in line:\n                count += abs(line.index(i)-start) + abs(a.index(line)-start_line)\n                start, start_line = line.index(i), a.index(line)\n                \n    return count+len(word)", "keyboard = [\n    \"abcde123\",\n    \"fghij456\",\n    \"klmno789\",\n    \"pqrst.@0\",\n    \"uvwxyz_/\",\n]\n\n\ndef tv_remote(word):\n    current_row, current_column = 0, 0\n    total_moves = 0\n    \n    for letter in word:\n        for row, line in enumerate(keyboard):\n            column = line.find(letter)\n            if column != -1:\n                moves = abs(current_row - row) + abs(current_column - column) + 1 # +1 for OK button\n                total_moves += moves\n                current_row = row\n                current_column = column\n    return total_moves", "def tv_remote(word):\n    # Your code here!!\n    keyboard = [\n        \"abcde123\",\n        \"fghij456\",\n        \"klmno789\",\n        \"pqrst.@0\",\n        \"uvwxyz_/\",\n    ]\n    \n    cursor_position = [0, 0]\n    total_moves = 0\n    \n    for char in word:\n        for i, row in enumerate(keyboard):\n            if char in row:\n                new_position = [row.index(char), i]\n                move = sum(abs(cursor_position[i] - new_position[i]) for i, _ in enumerate(cursor_position)) + 1\n                total_moves += move\n                cursor_position = new_position\n    return total_moves", "import numpy as np\ndef tv_remote(word):\n    keyboard = np.array([[\"a\",\"b\",\"c\",\"d\",\"e\",\"1\",\"2\",\"3\"], [\"f\",\"g\",\"h\",\"i\",\"j\",\"4\",\"5\",\"6\"], [\"k\",\"l\",\"m\",\"n\",\"o\",\"7\",\"8\",\"9\"], [\"p\",\"q\",\"r\",\"s\",\"t\",\".\",\"@\",\"0\"],[\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"_\",\"/\"]])\n    x, y = 0, 0\n    moves = 0\n    for i in word:\n        moves += abs(np.argwhere(keyboard == i)[0][0]-y) + abs(np.argwhere(keyboard == i)[0][1]-x) + 1\n        x, y = np.argwhere(keyboard == i)[0][1], np.argwhere(keyboard == i)[0][0]\n    return moves", "def tv_remote(word):\n    letloc = {\"a\":[0,0], \"b\":[0,1], \"c\":[0,2], \"d\":[0,3], \"e\":[0,4], \"1\":[0,5] , \"2\":[0,6], \"3\":[0,7], \n              \"f\":[1,0], \"g\":[1,1], \"h\":[1,2], \"i\":[1,3], \"j\":[1,4], \"4\":[1,5] , \"5\":[1,6], \"6\":[1,7],\n              \"k\":[2,0], \"l\":[2,1], \"m\":[2,2], \"n\":[2,3], \"o\":[2,4], \"7\":[2,5] , \"8\":[2,6], \"9\":[2,7],\n              \"p\":[3,0], \"q\":[3,1], \"r\":[3,2], \"s\":[3,3], \"t\":[3,4], \".\":[3,5] , \"@\":[3,6], \"0\":[3,7],\n              \"u\":[4,0], \"v\":[4,1], \"w\":[4,2], \"x\":[4,3], \"y\":[4,4], \"z\":[4,5] , \"_\":[4,6], \"/\":[4,7],\n             }\n    \n    now = [0,0]\n    path = 0\n    \n    for letter in word:\n        path += abs(now[0] - letloc[letter][0]) + abs(now[1] - letloc[letter][1]) + 1\n        now = letloc[letter]\n    \n    return path", "def tv_remote(word):\n    letloc = {\"a\":[0,0], \"b\":[0,1], \"c\":[0,2], \"d\":[0,3], \"e\":[0,4], \"1\":[0,5] , \"2\":[0,6], \"3\":[0,7], \n              \"f\":[1,0], \"g\":[1,1], \"h\":[1,2], \"i\":[1,3], \"j\":[1,4], \"4\":[1,5] , \"5\":[1,6], \"6\":[1,7],\n              \"k\":[2,0], \"l\":[2,1], \"m\":[2,2], \"n\":[2,3], \"o\":[2,4], \"7\":[2,5] , \"8\":[2,6], \"9\":[2,7],\n              \"p\":[3,0], \"q\":[3,1], \"r\":[3,2], \"s\":[3,3], \"t\":[3,4], \".\":[3,5] , \"@\":[3,6], \"0\":[3,7],\n              \"u\":[4,0], \"v\":[4,1], \"w\":[4,2], \"x\":[4,3], \"y\":[4,4], \"z\":[4,5] , \"_\":[4,6], \"/\":[4,7],\n             }\n    \n    now = [0,0]\n    path = 0\n    \n    for letter in word:\n        if letloc[letter][0] > now[0]:\n            path += letloc[letter][0] - now[0]\n        else:\n            path += now[0] - letloc[letter][0]\n        if letloc[letter][1] > now[1]:\n            path += letloc[letter][1] - now[1]\n        else:\n            path += now[1] - letloc[letter][1]\n        now = letloc[letter]\n        path+= 1\n        print (path)\n    \n    return path", "def tv_remote(word):\n    screen_keyboard_layout = [\n        [\"a\", \"b\", \"c\", \"d\", \"e\", \"1\", \"2\", \"3\"],\n        [\"f\", \"g\", \"h\", \"i\", \"j\", \"4\", \"5\", \"6\"],\n        [\"k\", \"l\", \"m\", \"n\", \"o\", \"7\", \"8\", \"9\"],\n        [\"p\", \"q\", \"r\", \"s\", \"t\", \".\", \"@\", \"0\"],\n        [\"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"_\", \"/\"]]\n    screen_keyboard_symbols = \"abcde123fghij456klmno789pqrst.@0uvwxyz_/\"\n    if not all([ch in screen_keyboard_symbols for ch in word]):\n        return -1\n\n    button_presses = 0\n    cur_position, next_position = (0, 0), (0, 0)\n    for ch in word:\n        for i, row in enumerate(screen_keyboard_layout):\n            if ch in row:\n                next_position = (i, row.index(ch))\n        button_presses += abs(next_position[0] - cur_position[0]) + abs(next_position[1] - cur_position[1]) + 1     # +1 for OK\n        cur_position = next_position\n    return button_presses", "keyboard = {\n    'a' : (0,0),\n    'b' : (0,1),\n    'c' : (0,2),\n    'd' : (0,3),\n    'e' : (0,4),\n    '1' : (0,5),\n    '2' : (0,6),\n    '3' : (0,7),\n    'f' : (1,0),\n    'g' : (1,1),\n    'h' : (1,2),\n    'i' : (1,3),\n    'j' : (1,4),\n    '4' : (1,5),\n    '5' : (1,6),\n    '6' : (1,7),\n    'k' : (2,0),\n    'l' : (2,1),\n    'm' : (2,2),\n    'n' : (2,3),\n    'o' : (2,4),\n    '7' : (2,5),\n    '8' : (2,6),\n    '9' : (2,7),\n    'p' : (3,0),\n    'q' : (3,1),\n    'r' : (3,2),\n    's' : (3,3),\n    't' : (3,4),\n    '.' : (3,5),\n    '@' : (3,6),\n    '0' : (3,7),\n    'u' : (4,0),\n    'v' : (4,1),\n    'w' : (4,2),\n    'x' : (4,3),\n    'y' : (4,4),\n    'z' : (4,5),\n    '_' : (4,6),\n    '/' : (4,7)\n}\n\n\ndef tv_remote(word):\n    current, total = (0,0), 0\n    for x in word :\n        next = keyboard.get(x)\n        total += abs(next[0]-current[0])+abs(next[1]-current[1])+1\n        current = next\n    return total\n", "from string import ascii_lowercase as buttons, digits as buttons2\n\nremote = {}\n#assign cordinates, assuming cords of a, (x,y) = (0,0)\nfor temp_x, button in enumerate(buttons):\n    remote[button] = (temp_x % 5, temp_x // 5)\nfor temp_x, button in enumerate(buttons2[1::]):\n    remote[button] = (temp_x % 3 + 5, temp_x // 3)\nremote[\".\"], remote[\"@\"], remote[\"0\"] = (5, 3), (6, 3), (7, 3)\nremote[\"z\"], remote[\"_\"], remote[\"/\"] = (5, 4), (6, 4), (7, 4)\n\n\ndef tv_remote(word):\n    presses = ix = iy = 0\n    for letter in word:\n        x, y = remote[letter]\n        presses += abs(x-ix) + abs(y-iy) +1\n        ix, iy = x, y\n    return presses", "s = 'abcde123fghij456klmno789pqrst.@0uvwxyz_/'\ndx = lambda c1, c2 : abs(s.index(c1)%8  - s.index(c2)%8)\ndy = lambda c1, c2 : abs(s.index(c1)//8 - s.index(c2)//8)\nd  = lambda c1, c2 : 1 + dx(c1, c2) + dy(c1, c2)\n\ndef tv_remote(word, r=0):\n    if r==0         : return tv_remote(word, d('a', word[0]))\n    if len(word)==1 : return r\n    else            : return tv_remote(word[1:], r+d(word[1], word[0]))", "def tv_remote(word):\n    letters = \"abcde123fghij456klmno789pqrst.@0uvwxyz_/\"\n    steps = 0\n    x, y = 0, 0\n    for i in word:\n        x1, y1 = (letters.find(i)%8, letters.find(i)//8)\n        steps += abs(x - x1) + abs(y - y1) + 1 \n        x, y = x1, y1\n    return steps", "def tv_remote(word):\n    arrayz = [\n        'abcde123',\n        'fghij456',\n        'klmno789',\n        'pqrst.@0',\n        'uvwxyz_/'\n    ]\n    steps = 0\n    x = 0\n    y = 0\n    for letter in word:\n        for row in arrayz:\n            if letter in row:\n                y1 = arrayz.index(row)\n                x1 = row.find(letter)\n                continue\n        steps += abs(x - x1) + abs(y - y1) + 1\n        x, y = x1, y1\n    return steps", "def tv_remote(word):\n    keys = 'abcde123fghij456klmno789pqrst.@0uvwxyz_/'\n    res, last = len(word), 0\n\n    for c in word:\n        i = keys.index(c)\n        res += abs(i%8-last%8) + abs(i//8-last//8)\n        last = i\n\n    return res", "def tv_remote(word):\n  characters = 'abcde123fghij456klmno789pqrst.@0uvwxyz_/'\n\n  width = 8             # keypad width\n  c_x = 0               # index of cursor starting location\n  c_y = 0\n  total_steps = 0       # running sum of steps\n  for w in word:\n    # find co-ords of w\n    w_index = characters.find(w)\n    w_x = (w_index % width)       # column number\n    w_y = (w_index // width)      # row number\n    \n    # compare to cursor co-ordinates\n    w_x_steps = abs(w_x - c_x)\n    w_y_steps = abs(w_y - c_y)\n    w_steps = w_x_steps + w_y_steps + 1     # extra for 'OK' button\n\n    # update cursor\n    c_x = w_x\n    c_y = w_y\n\n    # running total\n    total_steps += w_steps\n    \n  return total_steps", "def tv_remote(word):\n    c_pos = [0, 0]\n    remote = [\"abcde123\", \"fghij456\", \"klmno789\", \"pqrst.@0\", \"uvwxyz_/\"]\n    move = len(word)\n\n    for let in word:\n        y = 0\n        for key in remote:\n            if let in key:\n                x = key.find(let)\n                move += abs(y-c_pos[0]) + abs(x-c_pos[1])\n                c_pos = [y, x]\n            y += 1\n    return move\n", "def tv_remote(word):\n    keyboard = [\n        [\"a\", \"b\", \"c\", \"d\", \"e\", \"1\", \"2\", \"3\"],\n        [\"f\", \"g\", \"h\", \"i\", \"j\", \"4\", \"5\", \"6\"],\n        [\"k\", \"l\", \"m\", \"n\", \"o\", \"7\", \"8\", \"9\"],\n        [\"p\", \"q\", \"r\", \"s\", \"t\", \".\", \"@\", \"0\"],\n        [\"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"_\", \"/\"]\n    ]\n    result = 0\n    coordinates1 = [0, 0]\n    \n    for letter in word:\n        coordinates2 = find_symbol_coordinates(letter, keyboard)\n        result += abs(coordinates2[1] - coordinates1[1]) + abs(coordinates2[0] - coordinates1[0]) + 1\n        coordinates1 = find_symbol_coordinates(letter, keyboard)        \n    return result\n\ndef find_symbol_coordinates(symbol, array):\n    x = 0\n    y = 0\n    for row in array:\n        for colomn in row:\n            if colomn == symbol:\n                return [x, y]\n            x += 1\n        y += 1\n        x = 0", "def tv_remote(word):\n    keyboard = ['abcde123', 'fghij456', 'klmno789', 'pqrst.@0', 'uvwxyz_/']\n    \n    pos = (0, 0)\n    count = 0\n    for i in word:\n        nextrow = None\n        for row in keyboard:\n            if i in row:\n                nextrow = row\n    \n        newpos = (keyboard.index(nextrow), nextrow.index(i))\n        count += abs(pos[0]-newpos[0]) + abs(pos[1]-newpos[1]) + 1\n        pos = newpos\n        \n    return count\n", "def tv_remote(word): #there are more efficient ways to do it, but I want to try it manually\n    keyboard = [\"abcde123\",\"fghij456\",\"klmno789\",\"pqrst.@0\",\"uvwxyz_/\"]\n    x = 0\n    y = 0\n    steps = 0\n    for c in word:\n        while keyboard[y][x] != c:\n            steps += 1\n            print(keyboard[y][x])\n            if c in keyboard[y]: #if you're at the right row\n                if keyboard[y].find(c) < x: #if c is to the left of the current position\n                    x -= 1 #press left\n                else:\n                    x += 1 #press right\n            else:\n                if \"\".join(keyboard).find(c) < y*8+x: #this was the shortest way I could think of if you include numbers and chars\n                    y -= 1 #press up\n                else:\n                    y += 1 #press down\n        steps += 1 #press ok\n    return steps", "import numpy\n\ndef tv_remote(word):\n    initial = (0,0)\n    current = ()\n    final = ()\n    total = 0\n    count = 0\n    screen = numpy.array([['a','b','c','d','e','1','2','3'],\n                          ['f','g','h','i','j','4','5','6'],\n                          ['k','l','m','n','o','7','8','9'],\n                          ['p','q','r','s','t','.','@','0'],\n                          ['u','v','w','x','y','z','_','/']])\n\n    for i in word:\n      current = numpy.argwhere(screen == word[count])\n      final = abs(current - initial)\n      total += final[0][0]+final[0][1]\n      count += 1\n      initial = current\n      \n    return total+len(word)", "def tv_remote(word):\n    # Your code here!!\n    kBoard = {'a': (0,0), 'b':(0,1), 'c':(0,2), 'd':(0,3), 'e':(0,4), '1':(0,5), '2':(0,6), '3':(0,7), 'f':(1,0), 'g':(1,1), 'h':(1,2), 'i':(1,3), 'j':(1,4), '4':(1,5), '5':(1,6), '6':(1,7),'k':(2,0), 'l':(2,1), 'm':(2,2), 'n':(2,3), 'o':(2,4), '7':(2,5), '8':(2,6), '9':(2,7),'p':(3,0), 'q':(3,1), 'r':(3,2), 's':(3,3), 't':(3,4), '.':(3,5), '@':(3,6), '0':(3,7),'u':(4,0), 'v':(4,1), 'w':(4,2), 'x':(4,3), 'y':(4,4), 'z':(4,5), '_':(4,6), '/':(4,7)}\n    pos = [0,0]\n    ans = 0\n    \n    for char in word:\n        y = abs(kBoard[char][0] - pos[0])\n        x = abs(kBoard[char][1] - pos[1])\n        pos = [kBoard[char][0],kBoard[char][1]]\n        ans += (x + y + 1)\n    return ans\n", "remote_grid = [\n['a','b','c','d','e','1','2','3'],\n['f','g','h','i','j','4','5','6'],\n['k','l','m','n','o','7','8','9'],\n['p','q','r','s','t','.','@','0'],\n['u','v','w','x','y','z','_','/'],\n]\nrem_x = 8\nrem_y = 5\nremote_map = {}\nfor y in range(rem_y):\n    for x in range(rem_x):\n        remote_map[ remote_grid[y][x] ] = (x,y)\ndef tv_remote(word):    \n    currpos = (0,0)\n    clicks = 0\n    for c in word:\n        nextpos = remote_map[c]\n        clicks += abs(nextpos[0]-currpos[0]) + abs(nextpos[1]-currpos[1])\n        currpos = nextpos\n    return clicks+len(word)\n", "def tv_remote(word):\n    keys = ['abcde123','fghij456','klmno789','pqrst.@0','uvwxyz_/']\n    p,c = (0,0),0\n    for s in word:\n        for i,row in enumerate(keys):\n            for j,v in enumerate(row):\n                if v==s:\n                    c += abs(p[0]-i) + abs(p[1]-j) + 1\n                    p = (i,j)\n    return c", "def tv_remote(word):\n    display = [['a', 'b', 'c', 'd', 'e', '1', '2', '3'],\n               ['f', 'g', 'h', 'i', 'j', '4', '5', '6'],\n               ['k', 'l', 'm', 'n', 'o', '7', '8', '9'],\n               ['p', 'q', 'r', 's', 't', '.', '@', '0'],\n               ['u', 'v', 'w', 'x', 'y', 'z', '_', '/']]\n    rows = [0]\n    columns = [0]\n    for letter in word:\n        for row in display:\n            if letter in row:\n                rows.append(display.index(row))\n                for cell in row:\n                    if letter == cell:\n                        columns.append(row.index(letter))\n    moves = 0\n    for n in range(1, len(rows)):\n        moves += abs(rows[n] - rows[n - 1])\n    for n in range(1, len(columns)):\n        moves += abs(columns[n] - columns[n - 1])\n    return moves + len(word)", "def tv_remote(word):\n    result = 0\n    alpha = 'abcde123fghij456klmno789pqrst.@0uvwxyz_/'\n    nxt = [0, 0]\n    for c in word:\n        i = alpha.index(c)\n        where  = [i // 8, i % 8]\n        result += abs(where[0] - nxt[0]) + abs(where[1] - nxt[1]) + 1\n        nxt = where\n    return result", "from itertools import chain\ndef tv_remote(word):\n    locs=list(chain.from_iterable([(j,i) for j in range(0,8)] for i in range(0,5)))\n    lookup=dict(zip(\"abcde123fghij456klmno789pqrst.@0uvwxyz_/\",locs))\n    prev_loc=lookup[word[0]]\n    dist=sum(prev_loc)\n    for l in word[1:]:\n        loc=lookup[l]\n        dist+=abs(loc[0]-prev_loc[0])+abs(loc[1]-prev_loc[1])\n        prev_loc=loc\n    \n    return dist+len(word)", "KEYBOARD_STRING = \"a    b   c   d   e   1   2   3 \\\n                    f   g   h   i   j   4   5   6 \\\n                    k   l   m   n   o   7   8   9 \\\n                    p   q   r   s   t   .   @   0 \\\n                    u   v   w   x   y   z   _   /\"\n\nkeyboard_list = list(KEYBOARD_STRING.split())\n\nkeyboard_dictionary = {}\n\nn = 0\nfor i in keyboard_list:\n    row = n // 8\n    col = (n + 8) % 8\n    keyboard_dictionary[i] = [row, col]\n    n += 1\n\ndef tv_remote(word):\n    word_list = list(word)\n    count = 0\n    row = 0\n    col = 0\n    for i in word_list:\n        col_dist = abs(col - keyboard_dictionary[i][1])\n        row_dist = abs(row - keyboard_dictionary[i][0])\n        col = keyboard_dictionary[i][1]\n        row = keyboard_dictionary[i][0]\n        count += col_dist + row_dist + 1\n    return count", "def tv_remote(word):\n    arr = ['abcde123', 'fghij456', 'klmno789', 'pqrst.@0', 'uvwxyz_/']\n    res = 0\n    start_i = 0\n    start_j = 0\n    for x in word:\n        fin_i = 0\n        for y in arr: \n            if x in y:\n                fin_i = arr.index(y)\n                break\n        \n        res += abs(fin_i - start_i) + abs(arr[fin_i].index(x) - start_j) + 1\n        start_i = fin_i\n        start_j = arr[fin_i].index(x)\n    return res", "def tv_remote(word):\n    mydict ={\"a\":(0,0),\"b\":(1,0),\"c\":(2,0),\"d\":(3,0),\"e\":(4,0),\"1\":(5,0),\"2\":(6,0),\"3\":(7,0),\n             \"f\":(0,-1),\"g\":(1,-1),\"h\":(2,-1),\"i\":(3,-1),\"j\":(4,-1),\"4\":(5,-1),\"5\":(6,-1),\"6\":(7,-1),\n             \"k\":(0,-2),\"l\":(1,-2),\"m\":(2,-2),\"n\":(3,-2),\"o\":(4,-2),\"7\":(5,-2),\"8\":(6,-2),\"9\":(7,-2),\n             \"p\":(0,-3),\"q\":(1,-3),\"r\":(2,-3),\"s\":(3,-3),\"t\":(4,-3),\".\":(5,-3),\"@\":(6,-3),\"0\":(7,-3),\n             \"u\":(0,-4),\"v\":(1,-4),\"w\":(2,-4),\"x\":(3,-4),\"y\":(4,-4),\"z\":(5,-4),\"_\":(6,-4),\"/\":(7,-4)}\n    sum = 0\n    sum+= mydict[word[0]][0]+abs(mydict[word[0]][1])+1\n    for i in range(len(word)-1):\n        sum+= abs(mydict[word[i]][0]-mydict[word[i+1]][0])\n        sum+= abs(mydict[word[i]][1]-mydict[word[i+1]][1]) +1\n    return sum", "def tv_remote(word):\n    keyboard = [\n        'a','b','c','d','e','1','2','3',\n        'f','g','h','i','j','4','5','6',\n        'k','l','m','n','o','7','8','9',\n        'p','q','r','s','t','.','@','0',\n        'u','v','w','x','y','z','_','/'\n    ]\n    \n    prev_y, prev_x = 0, 0\n    strokes = 0\n    \n    for char in word:\n        x, y = keyboard.index(char)%8, keyboard.index(char)//8\n        dist = abs(prev_x - x) + abs(prev_y - y) + 1;\n        prev_x, prev_y = x, y\n        strokes += dist\n        \n    return strokes\n            \n            \n", "score = [\n    ['a','b','c','d','e','1','2','3'],\n    ['f','g','h','i','j','4','5','6'],\n    ['k','l','m','n','o','7','8','9'],\n    ['p','q','r','s','t','.','@','0'],\n    ['u','v','w','x','y','z','_','/']\n]\n\ndef getCoordinate(letter):\n    x = [l.index(letter) for l in score if letter in l]\n    y = [c for c in range(len(score)) if letter in score[c]]\n    return [x[0],y[0]]\n\ndef tv_remote(word):\n    res = 0\n    pos = [0,0]\n    for let in word:\n        newPos = getCoordinate(let)\n        res += abs(pos[0] - newPos[0]) + abs(pos[1] - newPos[1])+1\n        pos[0] = newPos[0]\n        pos[1] = newPos[1]\n    return res\n", "def tv_remote(word):\n    t = ['abcde123','fghij456','klmno789','pqrst.@0','uvwxyz_/']\n    r = 0\n    pos = (0,0)\n    for x in word:\n        for i in range(5):\n            if x in t[i]:\n                r += abs(pos[1]-(t[i].index(x))) + 1 + abs(pos[0]-i)\n                pos = (i,t[i].index(x))\n    return r\n", "def tv_remote(word):\n    remote = [['a','b','c','d','e','1','2','3'],  # 0, 3 = 3\n              ['f','g','h','i','j','4','5','6'],  # 2, 4 = 6\n              ['k','l','m','n','o','7','8','9'],  # 0, 4 = 4\n              ['p','q','r','s','t','.','@','0'],  # 3, 3 = 6\n              ['u','v','w','x','y','z','_','/']]\n    x, y = 0, 0\n    enter = 1\n    moves = 0\n    for char in word:\n        for row in range(len(remote)):\n            for column in range(8):\n                if remote[row][column] == char:\n                    moves += abs(x - row) + abs(y - column) + enter\n                    x = row\n                    y = column\n    return moves\n    \n    \n", "grid = [\"abcde123\", \"fghij456\", \"klmno789\", \"pqrst.@0\", \"uvwxyz_/\"]\n\ndef tv_remote(word):\n    steps = 0\n    pos = (0, 0)\n    for c in word:\n        index = next((grid.index(x), x.index(c)) for x in grid if c in x)\n        steps += abs(index[0] - pos[0]) + abs(index[1] - pos[1]) + 1\n        pos = index\n    return steps", "keyboard = {\n    'a': [0, 0],'b': [0,1],'c': [0,2],'d': [0,3],'e': [0,4],'1': [0,5],'2': [0,6],'3': [0,7],\n    'f': [1, 0],'g': [1,1],'h': [1,2],'i': [1,3],'j': [1,4],'4': [1,5],'5': [1,6],'6': [1,7],\n    'k': [2, 0],'l': [2,1],'m': [2,2],'n': [2,3],'o': [2,4],'7': [2,5],'8': [2,6],'9': [2,7],\n    'p': [3, 0],'q': [3,1],'r': [3,2],'s': [3,3],'t': [3,4],'.': [3,5],'@': [3,6],'0': [3,7],\n    'u': [4, 0],'v': [4,1],'w': [4,2],'x': [4,3],'y': [4,4],'z': [4,5],'_': [4,6],'/': [4,7],}\ndef tv_remote(word):\n    moves = sum([abs(keyboard[word[0]][i]-keyboard['a'][i]) for i in range(2)])+1\n    for l in range(1,len(word)):\n        moves += sum([abs(keyboard[word[l]][i]-keyboard[word[l-1]][i]) for i in range(2)])+1\n    return moves", "import numpy as np\ndef tv_remote(word):\n    answer = 0\n    remote = np.array([['a','b','c','d','e','1','2','3'], \n            ['f','g','h','i','j','4','5','6'], \n            ['k','l','m','n','o','7','8','9'], \n            ['p','q','r','s','t','.','@','0'], \n            ['u','v','w','x','y','z','_','/']])\n    row = 0\n    col = 0\n    for i in word:\n        current_pos = np.where(remote == i)\n        answer += abs(row - current_pos[0][0]) + abs(col - current_pos[1][0])\n        row = current_pos[0][0]\n        col = current_pos[1][0]\n    answer += len(word)\n    return(answer)", "def tv_remote(word):\n    import numpy as np\n    i,j,s=0,0,0\n    remote = np.array([['a','b','c','d','e','1','2','3'],\n                       ['f','g','h','i','j','4','5','6'],\n                       ['k','l','m','n','o','7','8','9'],\n                       ['p','q','r','s','t','.','@','0'],\n                       ['u','v','w','x','y','z','_','/']])\n    for char in word:\n        s += abs(np.where(remote==char)[0][0]-i)+abs(np.where(remote==char)[1][0]-j)+1\n        i=np.where(remote==char)[0][0]\n        j=np.where(remote==char)[1][0]\n    return s", "def tv_remote(word):\n    keyboard = [\n        ['a', 'b', 'c', 'd', 'e', '1', '2', '3'],\n        ['f', 'g', 'h', 'i', 'j', '4', '5', '6'],\n        ['k', 'l', 'm', 'n', 'o', '7', '8', '9'],\n        ['p', 'q', 'r', 's', 't', '.', '@', '0'],\n        ['u', 'v', 'w', 'x', 'y', 'z', '_', '/']\n    ]\n    x, y = 0, 0\n    count = 0\n    for char in word:\n        for i in range(len(keyboard)):\n            if char in keyboard[i]:\n                y2 = i\n                x2 = keyboard[i].index(char)\n                count += 1 + abs(y2 - y) + abs(x2 - x)\n                x, y = x2, y2\n    return count", "def tv_remote(word):\n    remote = ['abcde123',\n              'fghij456',\n              'klmno789',\n              'pqrst.@0',\n              'uvwxyz_/',\n              ]\n    position = [0, 0]\n    pressings = 0\n\n    def find_key(key):\n        for i in range(len(remote)):\n            if key in remote[i]:\n                return [i, remote[i].find(key)]\n\n    for letter in word:\n        pressings += 1 + abs(find_key(letter)[0] - position[0]) + abs(find_key(letter)[1] - position[1])\n        position = find_key(letter)\n    return pressings", "def tv_remote(word):\n    keyboard = 'abcde123fghij456klmno789pqrst.@0uvwxyz_/'\n    horizontal_s = 0\n    vertical_s = 0\n    presses = 0\n    for i in word:\n        i_position = keyboard.find(i)\n        horizontal = i_position % 8\n        vertical = i_position // 8\n        presses += (abs(horizontal - horizontal_s) + abs(vertical - vertical_s) + 1)\n        horizontal_s = horizontal\n        vertical_s = vertical\n    return presses\n", "import numpy as np\n\ndef tv_remote(word):\n    keys = np.array([\n        ['a','b','c','d','e','1','2','3'],\n        ['f','g','h','i','j','4','5','6'],\n        ['k','l','m','n','o','7','8','9'],\n        ['p','q','r','s','t','.','@','0'],\n        ['u','v','w','x','y','z','_','/']])\n    [x1,y1]=[0,0]\n    totdist = 0\n    for i in range (0,len(word),1):\n        [x2,y2]=np.where(keys == word[i])\n        dist = abs(x1-x2)+abs(y1-y2)\n        totdist += dist +1\n        [x1,y1] = [x2,y2]\n    return totdist", "def tv_remote(word):\n    print(word)\n    remote = [['a','b','c','d','e','1','2','3'],\n              ['f','g','h','i','j','4','5','6'],\n              ['k','l','m','n','o','7','8','9'],\n              ['p','q','r','s','t','.','@','0'],\n              ['u','v','w','x','y','z','_','/']]\n    second = find(remote, word[0])\n    clicks = second[0] + second[1] + 1\n    for i in range(len(word)-1):\n        first = find(remote, word[i])\n        second = find(remote, word[i+1])\n        clicks += abs(second[0] - first[0])\n        clicks += abs(second[1] - first[1]) + 1\n    return clicks\n        \n\ndef find(list, v):\n    for i, x in enumerate(list):\n        if v in x:\n            return (i, x.index(v))\n    \n\n    \n    \n", "def dist(a,b):\n    return abs(b[1]-a[1]) + abs(b[0]-a[0])\n\ndef pos(a): \n    if a in '123456789': return [(int(a)-1)%3 + 5, (int(a)-1)//3]\n    d = {'.': [5, 3], '@': [6, 3], '0': [7,3], 'z': [5,4], '_': [6,4], '/': [7,4]}\n    if a in list(d.keys()): return d[a]\n    return [(ord(a)-97)%5, (ord(a)-97)//5]\n\ndef tv_remote(word):\n    word = 'a'+word\n    res = 0\n    for i in range(len(word)-1):\n        print((word[i], pos(word[i]), word[i+1], pos(word[i+1])))\n        res += dist(pos(word[i]), pos(word[i+1]))\n        \n    return res+len(word)-1\n", "class TvRemote():\n    def __init__(self,words):\n        self.x, self.y = (0, 0)\n        self.presses = 0\n        self.mode = 1\n        self.modes = [\"\",\n                      \"abcde123fghij456klmno789pqrst.@0uvwxyz_/\u00e6 \u00f8\u00f8\u00f8\u00f8\u00f8\u00f8\", \n                      \"ABCDE123FGHIJ456KLMNO789PQRST.@0UVWXYZ_/\u00e6 \u00f8\u00f8\u00f8\u00f8\u00f8\u00f8\",\n                    \"\"\"^~?!'\"()-:;+&%*=<>\u20ac\u00a3$\u00a5\u00a4\\[]{},.@\u00a7#\u00bf\u00a1\u00f8\u00f8\u00f8_/\u00e6 \u00f8\u00f8\u00f8\u00f8\u00f8\u00f8\"\"\"]\n    \n        words = words.replace(\"\\u00a1\",\"\u00a1\")\n        words = words.replace(\"\\u00a3\",\"\u00a3\")\n        words = words.replace(\"\\u00a4\",\"\u00a4\")\n        words = words.replace(\"\\u00a5\",\"\u00a5\")\n        words = words.replace(\"\\u00a7\",\"\u20ac\")\n        words = words.replace(\"\\u00bf\",\"\u00bf\")\n        words = words.replace(\"\\u20ac\",\"\u20ac\")\n        self.words = words\n        print(words)\n    \n    def buttonPresses(self):\n        for letter in self.words:\n            self.presses += self.taxiCabDist(letter)\n            print(self.presses,\"\\n\")\n            \n        return self.presses\n    \n    \n    def switchMode(self):\n        print(\"EEROROROROROROR\")\n        self.mode += 1\n        if self.mode > 3:\n            self.mode = 1\n            \n        return self.taxiCabDist(\"\u00e6\")\n    \n    def taxiCabDist(self,letter):\n        #SwitchMode\n        modeSwitch = 0\n        if letter not in self.modes[self.mode]:\n            modeSwitch += self.switchMode()\n            if letter not in self.modes[self.mode]:\n                modeSwitch += self.switchMode()\n                \n        #Letter coord \n        index = self.modes[self.mode].index(letter)\n        x, y = index % 8, index // 8\n        \n        #Absolute difference coord\n        dx = abs(self.x-x)\n        dy = abs(self.y-y)\n        \n        #log\n        print(letter,(dx,dy),dx + dy + modeSwitch + 1)\n        \n        #Set New Cursor Position\n        self.x = x\n        self.y = y\n        \n        return dx + dy + modeSwitch + 1 # The OK Press\n    \ndef tv_remote(word):\n    return TvRemote(word).buttonPresses()", "keyboard = [[\"a\", \"b\", \"c\", \"d\", \"e\", \"1\", \"2\", \"3\"], \\\n            [\"f\", \"g\", \"h\", \"i\", \"j\", \"4\", \"5\", \"6\"], \\\n            [\"k\", \"l\", \"m\", \"n\", \"o\", \"7\", \"8\", \"9\"], \\\n            [\"p\", \"q\", \"r\", \"s\", \"t\", \".\", \"@\", \"0\"], \\\n            [\"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"_\", \"/\"]] \n\ndef tv_remote(word):\n    current_point = [0, 0]\n    \n    ret_val = 0\n    \n    for i in word:\n        x = [x for x in keyboard if i in x][0]\n        ret_val += abs(current_point[0]-keyboard.index(x))+abs(current_point[1]-x.index(i))+1\n        current_point = [keyboard.index(x), x.index(i)]\n    \n    return(ret_val)", "def tv_remote(word):\n    keyboard = [\n        'abcde123',\n        'fghij456',\n        'klmno789',\n        'pqrst.@0',\n        'uvwxyz_/'\n    ]\n    total = 0\n    r_start = 0\n    c_start = 0\n    for i in word:\n        for j in range(len(keyboard)):\n            if i.lower() in keyboard[j]:\n                total += abs(j - r_start) + abs(keyboard[j].index(i.lower()) - c_start) + 1\n                r_start = j\n                c_start = keyboard[j].index(i.lower())\n    return total", "def tv_remote(word):\n    keypad = 'abcde123fghij456klmno789pqrst.@0uvwxyz_/'\n    list(keypad)\n    list(word)\n    indices = [keypad.index(letter) for letter in word]\n    coord_x = [ind % 8 for ind in indices]\n    coord_x.insert(0,0)\n    coord_y = [int(ind/8) for ind in indices]\n    coord_y.insert(0,0)\n    \n    steps_x = [abs(coord_x[i+1] - coord_x[i]) for i in range(len(coord_x) - 1)]\n    steps_y = [abs(coord_y[i+1] - coord_y[i]) for i in range(len(coord_y) - 1)]\n    \n    presses = [steps_x[i] + steps_y[i] + 1 for i in range(len(steps_x))]\n    \n    return sum(presses)", "def tv_remote(word):\n    # Your code here!!\n    string = 'abcde123fghij456klmno789pqrst.@0uvwxyz_/'\n    mydict = {letter: dict() for letter in string}\n    visited = set()\n    \n    for i in range(5):\n        for j in range(8):\n\n            board = [list(string[x*8:x*8+8]) for x in range(5)]\n            base = board[i][j]\n            queue = [(i,j,0)]\n            while queue:\n                \n                x,y,dist = queue.pop(0)\n                if board[x][y] in visited: continue\n                if board[x][y] == -1: continue\n            \n                letter = board[x][y]\n                board[x][y] = -1\n                \n                mydict[base][letter] = dist\n                mydict[letter][base] = dist\n                \n                for dx,dy in [(1,0),(-1,0),(0,1),(0,-1)]:\n                    if 0<=x+dx<len(board) and 0<=y+dy<len(board[0]):\n                        queue.append((x+dx, y+dy,dist+1))\n            \n            visited.add(base)\n    \n    base = 'a'\n    nums = 0\n    for letter in word:\n        nums += mydict[base][letter]\n        base = letter\n    \n    return nums + len(word)", "def split(string):\n    return [char for char in string]\n\nlayout = [split(\"abcde123\"),\n     split(\"fghij456\"),\n     split(\"klmno789\"),\n     split(\"pqrst.@0\"),\n     split(\"uvwxyz_/\")]\n\nposition = dict((j,(x, y)) for x, i in enumerate(layout) for y, j in enumerate(i))\n\ndef tv_remote(word):\n    presses = 0\n    current = 'a'\n    for i, char in enumerate(word):\n        target = char\n        distance = abs(position[current][0] - position[target][0]) + abs(position[current][1] - position[target][1])\n        presses += distance + 1\n        current = char\n    return presses", "def make_move(layout, start, end):\n    x = [x for x in layout if start in x][0]\n    index = (layout.index(x), x.index(start))\n    y = [y for y in layout if end in y][0]\n    index2 = (layout.index(y), y.index(end))\n    move = abs(index[0] - index2[0]) + abs(index[1] - index2[1])\n    return move + 1\n\ndef tv_remote(word):\n    count = 0\n    word = 'a' + word\n    layout = [['a', 'b', 'c', 'd', 'e', '1', '2', '3'], ['f', 'g', 'h', 'i', 'j', '4', '5', '6'],\n              ['k', 'l', 'm', 'n', 'o', '7', '8', '9'], ['p', 'q', 'r', 's', 't', '.', '@', '0'],\n              ['u', 'v', 'w', 'x', 'y', 'z', '_', '/']]\n    for i in range(len(word)-1):\n        count += make_move(layout, word[i], word[i+1])\n    return count", "def tv_remote(word):\n    total_moves = 0\n    start_pos = [1, 1]\n    grid = {\n        \"a\":[1,1],\"b\":[1,2],\"c\":[1,3],\"d\":[1,4],\"e\":[1,5],\"1\":[1,6],\"2\":[1,7],\"3\":[1,8],\n        \"f\":[2,1],\"g\":[2,2],\"h\":[2,3],\"i\":[2,4],\"j\":[2,5],\"4\":[2,6],\"5\":[2,7],\"6\":[2,8],\n        \"k\":[3,1],\"l\":[3,2],\"m\":[3,3],\"n\":[3,4],\"o\":[3,5],\"7\":[3,6],\"8\":[3,7],\"9\":[3,8],\n        \"p\":[4,1],\"q\":[4,2],\"r\":[4,3],\"s\":[4,4],\"t\":[4,5],\".\":[4,6],\"@\":[4,7],\"0\":[4,8],\n        \"u\":[5,1],\"v\":[5,2],\"w\":[5,3],\"x\":[5,4],\"y\":[5,5],\"z\":[5,6],\"_\":[5,7],\"/\":[5,8]}\n    \n    \n    for l in word:\n        v_moves = abs(grid[l][0] - start_pos[0])\n        h_moves = abs(grid[l][1] - start_pos[1])\n        total_moves += (v_moves + h_moves + 1)\n        start_pos = grid[l]\n    return total_moves", "def tv_remote(word):\n    kboard = ['a','b','c','d','e','1','2','3',\n            'f','g','h','i','j','4','5','6',\n           'k','l','m','n','o','7','8','9',\n           'p','q','r','s','t','.','@','0',\n           'u','v','w','x','y','z','_','/']\n    \n    start = 'a'\n    count = 0;\n    \n    for c in word:\n        pos1 = kboard.index(start)\n        pos2 = kboard.index(c)\n        count += max(pos1//8,pos2//8) - min(pos1//8,pos2//8)\n        count += max(pos1%8,pos2%8) - min(pos1%8,pos2%8)\n        count += 1 # accept character with 'OK'\n        start = c\n    return count", "import string\ndef tv_remote(word):\n    let = 0   \n    numbers = \"123456789.@0z_/\"\n    keyboard = { (i,j):0 for i in range(1,6) for j in range(1,9) }\n    for i in range(1,6):\n        for j in range(1,6):\n            keyboard[i,j] = string.ascii_lowercase[let]\n            let += 1\n    let = 0\n    for i in range(1,6):\n        for j in range(6,9):\n            keyboard[i,j] = numbers[let]\n            let += 1\n    print(keyboard)\n    keys = list(keyboard.keys()) \n    vals = list(keyboard.values()) \n    cursor = [1,1]\n    moves = 0\n    for i in word:\n        moves += 1 + (abs((keys[vals.index(i)][0]) - cursor[0]) + abs((keys[vals.index(i)][1]) - cursor[1]))\n        cursor = keys[vals.index(i)]\n    return moves\n", "import numpy as np\n\n    \ndef tv_remote(word):\n    num_oks = len(word)\n    word = 'a' + word\n    anum = 97\n    m_ay = n_ay = 5\n    m_num = n_num = 3\n    \n    posdict_ay = {chr(num) : np.asarray(np.divmod(num-anum, n_ay)) for num in np.arange(anum, anum + 25)}\n    posdict_num = {str(num+1) : np.divmod(num, n_num) + np.array([0, n_ay]) for num in range(0,9)}\n    posdict_rest = {val : np.divmod(idx, n_num) + np.array([m_num, n_ay]) for idx, val in enumerate('.@0z_/')}\n    \n    posdict = {**posdict_ay, **posdict_num, **posdict_rest}\n    distlist = [np.linalg.norm(posdict[pair[0]] - posdict[pair[1]], ord = 1) for pair in zip(word[1:], word[:-1])]\n    \n    return sum(distlist) + num_oks", "def tv_remote(word):\n    kb = {char:(pos//8, pos%8) for pos, char in enumerate('abcde123fghij456klmno789pqrst.@0uvwxyz_/')}\n    presses, current = 0, (0, 0)\n    for char in word:\n        presses += 1 + abs(current[0] - kb[char][0]) + abs(current[1] - kb[char][1])\n        current = kb[char]\n    return presses", "import numpy as np\n\nboard = np.array(list('abcde123fghij456klmno789pqrst.@0uvwxyz_/')).reshape(5,8)\nboard = {v:i for i,v in np.ndenumerate(board)}\n\ndef tv_remote(word):\n    '''I'm not happy with this messy stuff'''\n    x,y = (0,0)\n    result = 0\n    for letter in word:\n        x1,y1 = board[letter]\n        result += abs(x-x1) + abs(y-y1) + 1\n        x,y = x1,y1\n    return result", "import numpy as np\n\n\ndef tv_remote(word):\n    keyboard = np.array([['a', 'b', 'c', 'd', 'e', '1', '2', '3'],\n                         ['f', 'g', 'h', 'i', 'j', '4', '5', '6'],\n                         ['k', 'l', 'm', 'n', 'o', '7', '8', '9'],\n                         ['p', 'q', 'r', 's', 't', '.', '@', '0'],\n                         ['u', 'v', 'w', 'x', 'y', 'z', '_', '/']])\n    x1, y1, sum = 0, 0, 0\n    for letter in word:\n        x2, y2 = np.argwhere(keyboard == letter)[0][:]\n        sum += 1 + abs(x2 - x1) + abs(y2 - y1)\n        x1, y1 = x2, y2\n    return sum", "def tv_remote(word):\n    kb = ['abcde123','fghij456','klmno789','pqrst.@0','uvwxyz_/']\n    kb_d = {}\n    for i, row in enumerate(kb):\n        for j, char in enumerate(row):\n            kb_d[char] = (i, j)\n            \n    x, y = 0, 0\n    counter = 0\n    \n    for letter in word:\n        dx, dy = kb_d[letter]\n        counter += abs(dx-x) + abs(dy-y) + 1\n        x, y = dx, dy\n    \n    return counter   ", "import numpy as np, pandas as pd\n\ndef tv_remote(word):\n    print(word)\n    screen = np.array([['a', 'b', 'c', 'd', 'e', '1', '2', '3'],\n                          ['f', 'g', 'h', 'i', 'j', '4', '5', '6'],\n                       ['k', 'l', 'm', 'n', 'o', '7', '8', '9'],\n                       ['p', 'q', 'r', 's', 't', '.', '@', '0'],\n                       ['u', 'v', 'w', 'x', 'y', 'z', '_', '/']])\n\n\n\n    screen_col = 0\n    screen_row = 0\n    start = screen[screen_row,screen_col]\n    count = 0\n    word = word\n    lst = [x for x in word]\n                          \n    for x in lst:\n        if x in screen[screen_row]:\n            result = np.where(screen == x)\n            if result[1][0] > screen_col:\n                count += (result[1][0] - screen_col) +1\n            elif result[1][0] < screen_col:\n                count += (screen_col - result[1][0]) +1\n            else:\n                count+=1\n            screen_row = result[0][0]\n            screen_col = result[1][0]\n\n            print('Done with {}'.format(x))\n            print(count)\n\n        else:\n            result = np.where(screen == x)\n            if result[0][0] > screen_row:\n                count += (result[0][0] - screen_row)\n                if result[1][0] > screen_col:\n                    count += (result[1][0] - screen_col) +1\n                elif result[1][0] < screen_col:\n                    count += (screen_col - result[1][0]) +1\n                else:\n                    count+=1\n                \n            elif result[0][0] < screen_row:\n                count += (screen_row - result[0][0])\n                if result[1][0] > screen_col:\n                    count += (result[1][0] - screen_col) +1\n                elif result[1][0] < screen_col:\n                    count += (screen_col - result[1][0]) +1\n                else:\n                    count+=1\n\n            \n            screen_row = result[0][0]\n            screen_col = result[1][0]\n            print('Done with {}'.format(x))\n            print(count)\n            \n    return count", "keyboard=\"abcde123fghij456klmno789pqrst.@0uvwxyz_/\"\ndef manhattan(x1, y1, x2, y2):\n    return abs(y2 - y1) + abs(x2 - x1)\ndef index_2d(index_1d):\n    return index_1d % 8, index_1d // 8\ndef tv_remote(word):\n    c_x, c_y = 0, 0\n    distance = 0\n    for char in word:\n        new_x, new_y = index_2d(keyboard.index(char))\n        distance+= manhattan(c_x, c_y, new_x, new_y) + 1\n        c_x, c_y = new_x, new_y\n    return distance", "def tv_remote(word):\n    keyboard = {\n        'a':[0, 0], 'b':[0, 1], 'c':[0, 2], 'd':[0, 3], 'e':[0, 4], '1':[0, 5], '2':[0, 6], '3':[0, 7],\n        'f':[1, 0], 'g':[1, 1], 'h':[1, 2], 'i':[1, 3], 'j':[1, 4], '4':[1, 5], '5':[1, 6], '6':[1, 7],\n        'k':[2, 0], 'l':[2, 1], 'm':[2, 2], 'n':[2, 3], 'o':[2, 4], '7':[2, 5], '8':[2, 6], '9':[2, 7],\n        'p':[3, 0], 'q':[3, 1], 'r':[3, 2], 's':[3, 3], 't':[3, 4], '.':[3, 5], '@':[3, 6], '0':[3, 7],\n        'u':[4, 0], 'v':[4, 1], 'w':[4, 2], 'x':[4, 3], 'y':[4, 4], 'z':[4, 5], '_':[4, 6], '/':[4, 7],}\n    clicks = 0\n    pos = [0, 0]\n    pos1 = [0, 0]\n    for char in word:\n        pos1 = keyboard.get(char)\n        clicks += abs(pos1[0] - pos[0]) + abs(pos1[1] - pos[1])\n        pos = pos1\n    return clicks + len(word)", "def tv_remote(word):\n    keypad = [['a','b','c','d','e','1','2','3'],\n              ['f','g','h','i','j','4','5','6'],\n              ['k','l','m','n','o','7','8','9'],\n              ['p','q','r','s','t','.','@','0'],\n              ['u','v','w','x','y','z','_','/']]\n    sum = 0\n    coords = [(0,0)]\n    for char in list(word):\n        for index, row in enumerate(keypad):\n            if char in row:\n                coords.append((index,row.index(char)))\n    for c,point in enumerate(coords,0):\n        if c == 0:\n            continue\n        a, b = point\n        sum += abs(coords[c][0] - coords[c-1][0])\n        sum += abs(coords[c][1] - coords[c-1][1])\n        sum += 1\n        print(sum)\n    return sum", "keydict={'a':'00','b':'01','c':'02','d':'03','e':'04','1':'05','2':'06','3':'07',\n         'f':'10','g':'11','h':'12','i':'13','j':'14','4':'15','5':'16','6':'17',\n         'k':'20','l':'21','m':'22','n':'23','o':'24','7':'25','8':'26','9':'27',\n         'p':'30','q':'31','r':'32','s':'33','t':'34','.':'35','@':'36','0':'37',\n         'u':'40','v':'41','w':'42','x':'43','y':'44','z':'45','_':'46','/':'47'}\ndef tv_remote(word):\n    step = 0\n    start = '00'\n    for i in word:\n        step+= (abs(int(keydict.get(i)[0])-int(start[0]))+abs(int(keydict.get(i)[1])-int(start[1]))+1)\n        start = keydict.get(i)\n    return step", "def tv_remote(word):\n\n    keyboard = {\"a\":[1,1], \"b\":[1,2], \"c\":[1,3], \"d\":[1,4], \"e\":[1,5], \"1\":[1,6], \"2\":[1,7], \"3\":[1,8],\n                \"f\":[2,1], \"g\":[2,2], \"h\":[2,3], \"i\":[2,4], \"j\":[2,5], \"4\":[2,6], \"5\":[2,7], \"6\":[2,8],\n                \"k\":[3,1], \"l\":[3,2], \"m\":[3,3], \"n\":[3,4], \"o\":[3,5], \"7\":[3,6], \"8\":[3,7], \"9\":[3,8],\n                \"p\":[4,1], \"q\":[4,2], \"r\":[4,3], \"s\":[4,4], \"t\":[4,5], \".\":[4,6], \"@\":[4,7], \"0\":[4,8],\n                \"u\":[5,1], \"v\":[5,2], \"w\":[5,3], \"x\":[5,4], \"y\":[5,5], \"z\":[5,6], \"_\":[5,7], \"/\":[5,8]}\n\n    cursor_count = 0\n\n    word_in_num = [[1,1]]\n\n    count_list = []\n\n    cursor_count = []\n\n    for char in word:\n\n        word_in_num.append(keyboard[char])\n\n    for index, num in enumerate(word_in_num):\n\n        if index == 0:\n            continue\n\n        cursor_count = (abs(word_in_num[index][0] - word_in_num[index-1][0])) + (abs(word_in_num[index][1] - word_in_num[index-1][1])) + 1\n\n        count_list.append(cursor_count) \n\n        cursor_count = 0\n            \n    count_list = sum(count_list)\n\n    return count_list\n", "def tv_remote(word):\n    count = 0\n    index = 0\n    remote_dict = {'a' : (1,1), 'b': (2,1), 'c' : (3,1), 'd' : (4,1), 'e' : (5,1), '1' : (6,1), '2' : (7,1), '3' : (8,1),\n                   'f' : (1,2), 'g': (2,2), 'h' : (3,2), 'i' : (4,2), 'j' : (5,2), '4' : (6,2), '5' : (7,2), '6' : (8,2),\n                   'k' : (1,3), 'l': (2,3), 'm' : (3,3), 'n' : (4,3), 'o' : (5,3), '7' : (6,3), '8' : (7,3), '9' : (8,3),\n                   'p' : (1,4), 'q': (2,4), 'r' : (3,4), 's' : (4,4), 't' : (5,4), '.' : (6,4), '@' : (7,4), '0' : (8,4),\n                   'u' : (1,5), 'v': (2,5), 'w' : (3,5), 'x' : (4,5), 'y' : (5,5), 'z' : (6,5), '_' : (7,5), '/' : (8,5)}\n    \n    Xdist = abs(remote_dict[word[index]][0] - remote_dict['a'][0])\n    Ydist = abs(remote_dict[word[index]][1] - remote_dict['a'][1])\n    count += (Xdist + Ydist + 1)\n    \n    for index in range(len(word) -1):\n        Xdist = 0\n        Ydist = 0\n        Xdist = abs(remote_dict[word[index]][0] - remote_dict[word[index + 1]][0])\n        Ydist = abs(remote_dict[word[index]][1] - remote_dict[word[index + 1 ]][1])\n        count += (Xdist + Ydist + 1)\n    print(count)\n    return count\n", "def ind(w):\n    a = [['a', 'b', 'c', 'd', 'e', '1', '2', '3'],\n    ['f', 'g', 'h', 'i', 'j', '4', '5', '6'],\n    ['k', 'l', 'm', 'n', 'o', '7', '8', '9'],\n    ['p', 'q', 'r', 's', 't', '.', '@', '0'],\n    ['u', 'v', 'w', 'x', 'y', 'z', '_', '/']]\n\n    for i in range(len(a)):\n        for j in range(len(a[0])):\n            if a[i][j] == w: return (i, j)\n\ndef tv_remote(word):\n    press = sum(ind(word[0])) + len(word) \n    for i in range(len(word)-1):\n        f_i, f_j = ind(word[i])\n        s_i, s_j = ind(word[i+1])\n        press += abs(f_i - s_i) + abs(f_j - s_j)\n    return press", "def tv_remote(word):\n    keyboard = \"abcde123fghij456klmno789pqrst.@0uvwxyz_/\"\n    presses = 0\n    pointer_pos = (0, 0)\n    for i in word:\n        letter_pos = keyboard.index(i)\n        letter_pos = (letter_pos % 8, letter_pos // 8)\n        presses += abs(letter_pos[0] - pointer_pos[0]) + abs(letter_pos[1] - pointer_pos[1]) + 1\n        pointer_pos = letter_pos\n    return presses", "remote = [\"abcde123\", \"fghij456\", \"klmno789\", \"pqrst.@0\", \"uvwxyz_/\"]\ndef tv_remote(word):\n    current = find_char(\"a\")\n    result = 0\n    for character in word:\n        new = find_char(character)\n        result += sum([abs(current[0]-new[0]), abs(current[1]-new[1])])+1\n        current = new\n    return result\n\ndef find_char(char):\n    for col in range(0, len(remote)):\n        if char in remote[col]:\n            return [col, remote[col].find(char)]", "def tv_remote(word):\n    \n    dic = {'a':[1,1],'b':[1,2],'c':[1,3],'d':[1,4],'e':[1,5],'1':[1,6],'2':[1,7],'3':[1,8], \\\n           'f':[2,1],'g':[2,2],'h':[2,3],'i':[2,4],'j':[2,5],'4':[2,6],'5':[2,7],'6':[2,8], \\\n           'k':[3,1],'l':[3,2],'m':[3,3],'n':[3,4],'o':[3,5],'7':[3,6],'8':[3,7],'9':[3,8], \\\n           'p':[4,1],'q':[4,2],'r':[4,3],'s':[4,4],'t':[4,5],'.':[4,6],'@':[4,7],'0':[4,8], \\\n           'u':[5,1],'v':[5,2],'w':[5,3],'x':[5,4],'y':[5,5],'z':[5,6],'_':[5,7],'/':[5,8]}\n    \n    buttons_pressed = len(word)\n    pos1 = dic['a']\n    \n    for i in range(0,len(word)):\n        pos2 = dic[word[i]]\n        buttons_pressed += abs(pos2[0]-pos1[0]) + abs(pos2[1]-pos1[1])\n        pos1 = pos2\n        \n    return buttons_pressed", "keyboard = 'abcde123fghij456klmno789pqrst.@0uvwxyz_/'\nMAP = {c: (i//8, i % 8) for i, c in enumerate(keyboard)}\n\n\ndef tv_remote(word):\n    cur = (0, 0)\n    steps = 0\n    for c in word:\n        steps += 1 + abs(cur[0]-MAP[c][0])+abs(cur[1]-MAP[c][1])\n        cur = MAP[c]\n    return steps", "keyboard='abcde123fghij456klmno789pqrst.@0uvwxyz_/'\nMAP={c:(i//8,i%8) for i,c in enumerate(keyboard)}\n\ndef tv_remote(word): ###\n    cur=(0,0)\n    steps=0\n    for c in word:\n        steps+= 1 + abs(cur[0]-MAP.get(c)[0])+abs(cur[1]-MAP.get(c)[1])\n        cur=MAP.get(c)\n    return steps", "keyboard = {\n    \"a\": (0,0),\n    \"b\": (0,1),\n    \"c\": (0,2),\n    \"d\": (0,3),\n    \"e\": (0,4),\n    \"1\": (0,5),\n    \"2\": (0,6),\n    \"3\": (0,7),\n\n    \"f\": (1,0),\n    \"g\": (1,1),\n    \"h\": (1,2),\n    \"i\": (1,3),\n    \"j\": (1,4),\n    \"4\": (1,5),\n    \"5\": (1,6),\n    \"6\": (1,7),\n\n    \"k\": (2,0),\n    \"l\": (2,1),\n    \"m\": (2,2),\n    \"n\": (2,3),\n    \"o\": (2,4),\n    \"7\": (2,5),\n    \"8\": (2,6),\n    \"9\": (2,7),\n    \n    \"p\": (3,0),\n    \"q\": (3,1),\n    \"r\": (3,2),\n    \"s\": (3,3),\n    \"t\": (3,4),\n    \".\": (3,5),\n    \"@\": (3,6),\n    \"0\": (3,7),\n\n    \"u\": (4,0),\n    \"v\": (4,1),\n    \"w\": (4,2),\n    \"x\": (4,3),\n    \"y\": (4,4),\n    \"z\": (4,5),\n    \"_\": (4,6),\n    \"/\": (4,7),\n}\n\n\ndef tv_remote(word):\n    n = 0\n    current = \"a\"\n\n    for key in word:\n        n += abs(keyboard[key][0] - keyboard[current][0])\n        n += abs(keyboard[key][1] - keyboard[current][1])\n        n += 1\n        current = key\n        \n    return n\n"]