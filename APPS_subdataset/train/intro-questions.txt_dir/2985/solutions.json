["def reflections(n, m):\n    x = y = 0\n    dx = dy = 1\n    while 1:\n        x += dx\n        y += dy\n        if x == y == 0 or x == n and y == m: return 1\n        if 0 in (x, y) and (x == n or y == m): return 0\n        if x in (0, n): dx *= -1\n        if y in (0, m): dy *= -1", "from math import gcd\n\ndef reflections(x,y):\n    g=gcd(x,y)\n    return (x//g+y//g)%2 == 0", "def reflections(max_x, max_y):\n    return max_x & -max_x == max_y & -max_y", "from math import gcd\n\ndef reflections(max_x, max_y):\n    d = gcd(max_x, max_y)\n    return max_x // d & max_y // d & 1", "from math import gcd\n\ndef reflections(x,y):\n    v   = gcd(x,y)\n    x,y = x//v, y//v\n    return not( x&1 ^ y&1 )", "def reflections(max_x, max_y):\n    slope = (1, 1)\n    current = (1, 1)\n    while True:\n        if current[0] == max_x:\n            slope = (-1, 1) if slope == (1, 1) else (-1, -1)\n        elif current[1] == max_y:\n            slope = (1, -1) if slope == (1, 1) else (-1, -1)\n        elif current[0] == 0:\n            slope = (1, 1) if slope == (-1, 1) else (1, -1)\n        elif current[1] == 0:\n            slope = (1, 1) if slope == (1, -1) else (-1, 1)\n        current = (current[0]+slope[0], current[1]+slope[1])\n        if current in [(0, 0), (max_x, max_y)]:\n            return True\n        elif current in [(0, max_y), (max_x, 0)]:\n            return False", "def reflections(max_x, max_y):\n    return bool((max_x & -max_x) & (max_y & -max_y))", "def reflections(max_x, max_y):\n    slope = (1, 1)\n    current = (1, 1)\n    while current not in [(max_x, 0), (0, max_y), (max_x, max_y)]:\n        if current[0] == max_x:\n            slope = (-1, 1) if slope == (1, 1) else (-1, -1)\n        elif current[1] == max_y:\n            slope = (1, -1) if slope == (1, 1) else (-1, -1)\n        elif current[0] == 0:\n            slope = (1, 1) if slope == (-1, 1) else (1, -1)\n        elif current[1] == 0:\n            slope = (1, 1) if slope == (1, -1) else (-1, 1)\n        current = (current[0]+slope[0], current[1]+slope[1])\n    if current in [(0, 0), (max_x, max_y)]:\n        return True\n    else:\n        return False", "from math import gcd\n\ndef reflections(x, y):\n    return ((x + y) // gcd(x, y)) % 2 == 0\n", "from math import gcd\ndef reflections(max_x, max_y):\n    i=gcd(max_x,max_y)\n    return (max_x//i+max_y//i)%2==0\n"]