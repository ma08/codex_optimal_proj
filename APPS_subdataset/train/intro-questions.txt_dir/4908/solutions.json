["def epidemic(tm, n, s, i, b, a):\n    def f(s, i, r):  \n        dt = tm / n\n        for t in range(n):\n            s, i, r = s-dt*b*s*i, i+dt*(b*s*i-a*i), r+dt*i*a\n            yield i\n    return int(max(f(s, i, 0)))", "def epidemic(tm, n, s0, i0, b, a):\n    timing = 0\n    dt = tm/n\n    r0 = 0\n    i_max = i0\n    while timing < tm:\n        timing += dt\n        s1 = s0 - dt*b*s0*i0\n        i0 = i0 + dt*(b*s0*i0-a*i0)\n        r0 = r0 + dt*r0*a\n        s0=s1\n        i_max=i0 if i0 > i_max else i_max\n    return i_max\n        \n    # your code\n", "def epidemic(tm, n, s0, i0, b, a):\n    def evolve():\n        s, i, r, dt = s0, i0, 0, tm/n\n        while 1:\n            s, i, r = s - dt*b*s*i, i + dt*(b*s*i - a*i), r + dt*i*a\n            yield i\n    for i1 in evolve():\n        if i1 < i0:\n            return i0\n        i0 = i1", "def epidemic(tm, n, s0, i0, b, a):\n    dt = tm/float(n); t = [0] * (n+1)\n    s = [0] * (n+1); i = [0] * (n+1); r = [0] * (n+1)\n    s[0] = s0; i[0] = i0; r[0] = 0; t[0] = 0\n    for k in range(n):\n        t[k+1] = (k+1)*dt\n        s[k+1] = s[k] - dt*b*s[k]*i[k]\n        i[k+1] = i[k] + dt*(b*s[k]*i[k] - a*i[k])\n        r[k+1] = r[k] + dt*i[k]*a\n    return int(max(i))", "def epidemic( tm, n, s0, i0, b, a ):\n    S = { 0: s0 }\n    I = { 0: i0 }\n    dt = ( tm/n )\n    for k in range( n ):\n        S[k+1] = S[k] - (tm/n) * b * S[k] * I[k]\n        I[k+1] = I[k] + (tm/n) * (b * S[k] * I[k] - a * I[k])\n        \n    return int( I[ max( I, key= lambda key: I[key] ) ] )", "epidemic=lambda t,n,s,i,b,a:([0 for d,r,m,S,I,R,z in[(float(t)/n,0,i,-1,-1,-1,__import__('itertools'))]],[[0 for S,I,R,s,i,r,m in[(lambda t:t+(max(m, t[4]),))((s,i,r,s-d*b*s*i,i+d*(b*s-a)*i,r+d*i*a))]]for _ in z.takewhile(lambda x:I<i,z.repeat(0))],m)[-1]", "def epidemic(tm, n, s0, i0, b, a):\n    s = [s0]; i = [i0]; r = [0]\n    t=0\n    dt = tm/n\n    t += dt\n    \n    for k in range(n):\n        s[k] = s[k-1] - dt*b*s[k-1]*i[k-1]\n        i[k] = i[k-1] + dt * (b * s[k-1] * i[k-1] - a * i[k-1])\n        r[k] = r[k-1] + dt * i[k-1] *a\n    \n        \n        s.append(s[k])\n        i.append(i[k])\n        r.append(r[k])\n    \n    \n    \n    return int(max(i))", "def epidemic(tm, n, s0, i0, b, a):\n    dt, imax = tm / n, 0\n    s, i, r = s0, i0, 0\n    for _ in range(n):\n        s, i, r = s - dt * b * s * i, i + dt * (b * s * i - a * i), r + dt * i * a\n        imax = max(int(i), imax)\n    return imax\n", "def epidemic(tm, n, s0, i0, b, a):\n    from math import floor\n    S, I = [s0], [i0]\n    \n    dt = tm / n\n    for _ in range(n):\n        s = S[-1] - dt * b * S[-1] * I[-1]\n        i = I[-1] + dt * (b * S[-1] * I[-1] - a * I[-1])\n        S.append(s)\n        I.append(i)\n    return int(max(I))"]