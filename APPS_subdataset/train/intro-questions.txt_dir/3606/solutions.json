["from itertools import cycle\n\ndef find_pattern(s):\n    diffs = [y - x for x, y in zip(s, s[1:])]    \n    for i in range(1, len(diffs) + 1):\n        if len(diffs) % i == 0 and all(a == b for a, b in zip(diffs, cycle(diffs[:i]))): return diffs[:i]", "def find_pattern(seq):\n    start, end = [], []\n    for i in range(len(seq)-1):\n        start.append(seq[i+1]-seq[i])\n        end.append(seq[-1-i]-seq[-2-i])\n        if not (len(seq)-1) % len(start) and start == end[::-1] and not len(set(start)) == 1:\n            return start\n    return [start[0]] if len(set(start)) == 1 else []", "from operator import sub\n\ndef find_pattern(sequence):\n    result = list(map(sub, sequence[1:], sequence))\n    size = len(result)\n    for i in range(1, size+1):\n        q, r = divmod(size, i)\n        if r == 0:\n            check = result[:i]\n            if check*q == result:\n                return check", "def find_pattern(sequence):\n    diff = [b - a for a, b in zip(sequence, sequence[1:])]\n    return next(diff[:i] for i in range(1, len(diff)+1) if diff[i:]+diff[:i] == diff)\n", "def find_pattern(a):\n    d = [a[i + 1] - a[i] for i in range(len(a) - 1)] ; l = len(d)\n    return next(d[:i] for i in range(1,len(d)+1) if l%len(d[:i])==0 and d[:i]*(l//len(d[:i]))==d)", "def find_pattern(a):\n    diff = [a[i + 1] - a[i] for i in range(len(a) - 1)]\n    l = len(diff)\n    for i in range(1, len(diff) + 1):\n        t = diff[:i]\n        if l % len(t) == 0:\n            if t * (l // len(t)) == diff:\n                return t", "def find_pattern(seq):\n    xs = [b-a for a, b in zip(seq, seq[1:])]\n    return next((\n        xs[:i]\n        for i in range(1, len(xs) // 2 + 1)\n        if xs[:i] * (len(xs) // i) == xs\n    ), xs)", "def find_pattern(sequence):\n    pattern = [a-b for a, b in zip(sequence[1:], sequence)]\n        \n    for size in range(1, len(pattern)+1):\n        if len(pattern) // size * pattern[:size] == pattern:\n            return pattern[:size]", "def find_pattern(seq):\n    n, diffs = len(seq)-1, [b-a for a,b in zip(seq, seq[1:])]\n    for l in range(1, n + 1):\n        if n // l * diffs[:l] == diffs:\n            return diffs[:l]"]