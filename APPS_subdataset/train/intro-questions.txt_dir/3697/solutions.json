["def list_depth(l):\n    depths = [1]\n    for x in l:\n        if isinstance(x, list):\n            depths.append(list_depth(x) + 1)\n    return max(depths)", "def list_depth(lst):\n    result = [list_depth(a) for a in lst if isinstance(a, list)]\n    return 1 + max(result) if result else 1\n", "def list_depth(l):\n    if l == []:\n        return 1\n    if isinstance(l, list):\n        return 1 + max(list_depth(item) for item in l)\n    else:\n        return 0", "def list_depth(l):\n    return max((1+list_depth(x) for x in l if isinstance(x, (list, tuple))), default=1)", "def list_depth(L):\n\n    dep = []\n    \n    if type(L) is not list:\n        return 0\n    elif len(L) == 0:\n        return 1\n    else:\n        for x in L:\n            dep.append(list_depth(x))\n        print(dep)\n    return 1 + max(dep)\n", "def list_depth(xs, depth=0):\n    if isinstance(xs, list):\n        return max((list_depth(x, depth + 1) for x in xs), default=depth + 1)\n    return depth", "def list_depth(l):\n  return max(1 + list_depth(x) if type(x) is list else 1 for x in l) if l else 1", "def list_depth(l):\n    return (1 + max((list_depth(item) for item in l), default=0)) if type(l) == list else 0\n", "def list_depth(l):\n  inds = [i for i, v in enumerate(l) if isinstance(v, list)]\n  return 1 if len(inds) == 0 else 1 + max(list_depth(l[i]) for i in inds)", "def list_depth(l):\n    return 0 if not isinstance(l, list) else 1 + max(list_depth(x) for x in l) if l else 1\n", "list_depth=d=lambda l:type(l)==type([])and-~max(map(d,l+[0]))", "def list_depth(l, f=1):\n    return max(f if not isinstance(x, list) else list_depth(x, f + 1) for x in l) if l else f", "def list_depth(l, depth=1):\n    max_depth = depth\n    for e in l:\n        if type(e) is list:\n            max_depth = max(max_depth, list_depth(e, depth+1))\n    return max_depth", "def list_depth(l):\n    temp=list(filter(lambda x:x in ('[',']'),str(l)))\n    while temp[-1]==']':\n        temp.pop()\n    return temp.count('[')-temp.count(']')", "def list_depth(l):\n    a = str(l)\n    z = 0\n    for i in a[::-1]:\n        if i == \"]\":\n            z += 1\n        elif i == \"[\":\n            break\n\n    return z", "def list_depth(l):\n    try:\n        return isinstance(l, list) and max(map(list_depth, l)) + 1\n    except:\n        return 1", "def list_depth(L):\n    try : return 1 + max(list_depth(e) for e in L if isinstance(e, list))\n    except : return 1", "def list_depth(l):\n    depths = [1]\n    for elm in l:\n        if isinstance(elm, list):\n            depths.append(list_depth(elm) + 1)\n    return max(depths)", "def list_depth(l):\n    a=[0]\n    for i in str(l):\n        if i=='[': a.append(a[-1]+1)\n        if i==']': a.append(a[-1]-1)\n    return max(a)"]