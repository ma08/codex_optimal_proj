["def vector_affinity(a, b):\n  longer = len(a) if len(a) > len(b) else len(b)\n  return len([i for i, j in zip(a, b) if i == j]) / float(longer) if longer > 0 else 1.0", "def vector_affinity(a, b):\n    return sum([1.0 for x, y in zip(a, b) if x == y]) / max(len(a), len(b)) if max(len(a), len(b)) else 1", "from itertools import zip_longest, starmap\nfrom statistics import mean\nfrom operator import eq\n\ndef vector_affinity(a, b):\n    return not (a or b) or mean(starmap(eq, zip_longest(a, b, fillvalue='\u00af\\_(\u30c4)_/\u00af')))", "def vector_affinity( a, b ):\n    sizeA = len(a)\n    sizeB = len(b)\n\n    if (sizeA + sizeB) == 0:\n        return 1.0\n\n    if sizeA >= sizeB:\n        den = sizeA\n        numIter = sizeB\n    else:\n        den =  sizeB\n        numIter = sizeA\n\n    numMatch=0\n\n    for i in range(numIter):\n        if a[i]==b[i]:\n            numMatch+=1\n\n    affinity = numMatch/den\n\n    return affinity\n#----end function\n", "def vector_affinity(a, b):\n    return 1.0 if a == b else sum(1 for (m, n) in zip(a, b) if m == n) / max(len(a), len(b))", "def vector_affinity(*args):\n    l1,l2 = list(map(len,args))\n    return sum(x==y for x,y in zip(*args)) / (1.0 * (max(l1,l2))) if l1 or l2 else 1.0", "def vector_affinity(a, b):\n    denom = max(len(a), len(b))\n    return sum(l == r for l, r in zip(a, b)) / float(denom) if denom else 1\n", "def vector_affinity(a, b):\n    return 1.0 if a == b else sum(1 for i, j in zip(a, b) if i == j) / float(max(len(a), len(b)))", "def vector_affinity(a, b):\n    return 1.0 if a == b else sum(float(x == y) for x, y in zip(a, b)) / max(len(a), len(b))", "def vector_affinity(a, b):\n    return sum([an==bn for an,bn in zip(a,b)])/float(max(len(a),len(b))) if len(a) or len(b) else 1"]