["def alternateCase(s):\n    return s.swapcase()", "alternateCase = str.swapcase", "def alternateCase(s):\n    return ''.join(c.swapcase() for c in s)", "def alternateCase(s):\n    '''\nSalvador Dali - The Persistence of Memory\n      ;!>,!!!>\n      <! ;!!!`\n      !! `!!!.\n      !!`,!!!>\n      !! !!!!!\n     ;!! !!!!!\n     `!! !!!!!\n      !! !!!!!>                           .\n      `!.`!!!!!                        ;<!`\n       !! `!!!!                     ,<!``\n       `!> !!!!                   ;<!`\n       <!! !!!!>                ;!``\n       !!! `!!!!               !!`                                    ,c,\n       !!!> !!!!>             ;`<             ,cc$$cc            .,r== $$c !\n       !!!! !!!!!!.        ,<!` !!!!!>>>;;;;;;;;.`\"?$$c MMMMMMM )MM ,= \"$$.`\n       <!!> !!!!!!!!!!!!!>`` ,>````  ``````````!!!; ?$$c`MMMMMM.`MMMP== `$h\n       `!! ;!!!!!!````.,;;;```          JF !;;;,,,,; 3$$.`MMMMMb MMMnnnM $$h\n       ;!! <!!!!.;;!!!```               JF.!!!!!!!!!>`$$h `MMMMM MMMMMMM $$$\n       ;!!>`!!!!!!``                    ?> !!!!!!!!!> $$$  MMMMM MMMMMMM $$$\n       <!! ;!!!!`                       `h !!!!!!!!!! $$$ MMMMMM MMMM\" M $$$\n       `!>`!!!!                          b !!!!!!!!!! $$$ MMMMMM MMML,,`,$$$\n,,,,,, ;! <!!!> ,,,,,,,,,,,,,,,,         $ !!!!!!!!!! $$$ MMMMMM MMMMML J$$F\n!!!!!! !! !!!! `!!!!!!!!!!!!!!` ;        $ !!!!!!!!!! $$$ MMMMMP.MMMMMP $$$F\n!!!!! ;!! !!!!> !!!!!!!!!!!!` ;` .`.`.`. ?.`!!!!!!!!! 3$$  MMMP `MMMMM>,$$P\n!!!!` !!` !!!!> !!!!!!!!!!` ;!` `.`.`.`. `h !!!!!!!!! $$$  MMML  MMPPP J$$`.\n!!!! !!!;!!!!!`;!!!!!!!!` ;!`  .`.`.`.`.` ?,`!!!!!!!! ?$$ MMMMM.,MM_\"`,$$F .\n!!!`;!!!.!!!!` <!!!!!!!` ;`  .`.`.`.`.`.`. ? `!!!!!!!>`$$ MMMMMbdML ` $$$  .\n``` !!!> !!!! ```````` ;!  .`.`.`.`.`.`.`.` h `!!!!!!> $$ )MMMMMMMMM d$$` `.\n!!` !!!``!!! <!!!!!!!> ` .`.`.`.`.`.`.`.`.` `?,``!!!!! ?$h 4MMMMMMP z$$` .`.\n`` <!!! !!!> ````````  .`.`.`.`.`.`.`.`.`.`.` ?h.````..`$$  MMMMMM ,$$F `.`.\n` !!!! <!!!.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`. `\"??$F\". `$h.`MMMMM $$$`.`.`.\n <!`! .!!!!> .`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`. cccc  `$$.`4MMP.3$F .`.`.\n<!``! !!!!!> .`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`. J$$$$$F . \"$h.\" . 3$h .`.`.\n!` ! !!!!!!> .`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.  \"\"\"\" .`.`.`$$, 4 3$$ .`.`.\n ;! !!!!!!! `.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.  ?$h  J$F .`.`.\n;`  !!!!!!! `.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`. \"$$$$P` .`.`.\n`  <!!!!!!! `.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`. . .`.`.`.`.\n,` !!!!!!! .`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.`.\n!! !!!!!!`,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,  `.`.`.`.\n!! !!!!!! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!`  `.`.`.`.\n!! <!!!!`;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! ;! `.`.`.`.\n!! ;!!!!>`!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!` <!! `.`.`.`.\n`,,!!!!``.;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!` <!!! `.`.`.`.\n`````.,;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!` <!!!! `.`.`.`.\n;!!!!!!!!!!!!!!!!!!!!!!!>>>````````````````````<!!!!!!!!!!!` !!!!!! `.`.`.`.\n!!!!!!!!!!!!!!!!!!````_,,uunmnmnmdddPPPPPPbbbnmnyy,_`````!  !!!!!!! `.`.`.`.\n!!!!!!!!!``_``!``,nmMMPP\"\"\"`,.,ccccccr==pccccc,,..`\"\"444n,.`<!!!!!! `.`.`.`.\n!!!!!!!` ,dMM ,nMMP\"\",zcd$h.`$$$$$$$$L c  $$$$$$$$$$??cc`4Mn <!!!!! `.`.`.`.\n!!!!!! ,MMMP uMMP ,d$$$$$$$$cd$F ??$$$$$cd$$$$$$$$$F, ??h.`Mx !!!!! `.`.`.`.\n!!!!!! MMMP uMM\",F,c \".$$$$$$$P`   ?$$$$$$$$$$$$$$$$C`,J$$.`M.`!!!! `.`.`.`.\n!!!``  MMM 4MMM L`\"=-z$$P\".,,.    ,c$$$$$$$$$$$$$$$$$$$$$$$ ML !!!! `.`.`.`.\n!!!.   `\"\" MMMM `$$hc$$$L,c,.,czc$$$$$$$$$$$$$$$$$$$$$$$$$$.4M `!!! `.`.`.`.\n!!!!;;;..  `MMMb ?$$$$$$??\"\"\"\"?????????????????? ;.`$$$$$$$`JM`,!!! `.`.`.`.\n!!!!!!!!!>  4MMMb.\"?$$$cc,.. .,,cccccccccccccccc,c`.$$$$$$$ MM <!!! `.`.`.`.\n!!!!!!!!!!  `MMMMMb,.\"??$$$$$$$$$$$$$$$$$$$$$$$$$$ $$$$?$$$ MM ;!!! `.`.`.`.\n!!!!!!!!!!    \"4MMMMMMmn,.\"\"\"???$$$$$$$$$$$$$$$$$$ $$$\" ?$$ MP !!!! `.`.`.`.\n!!!!!!!!!!!;.   \"4MMMMMMMMMMMmnmn,.`\"\"\"?????$$$$$$ ?$$  `CF.M> !!!! `.`.`.`.\n!!!!!!!!!!!!!!;.   `\"\"44MMMMMMMMMMMMMMMMnnnn. ?$$$.<$$$h.$h MM !!!! `.`.`.`.\n!!!!!!!!!!!!!!!!>.;.      `\"\"444MMMMMMMMMMMMMb $$$:<$$$$$$$ 4M <!!! `.`.`.`.\n!!!!!!!!!!!!!!!!!!!!!;<;);>;.     ..\"\"\"\"44MMMM J$`  <$$$$$$h`Mb`!!! `.`.`.`.\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!>;      `MMM ?$.  d$$$$$$$ MM.`!! `.`.`.`.\n!!!!!!!!!!```!``` ..``<!!!!!!!!!!!!!!!; .  MMM.<$$ <$$$$$$$$ 4Mb !! `.`.`.`.\n!`````````..    ;MMMMnn.`!!!!!!!!!!!!!!! ; MMM J$$hJ$$$$$$$$h`MM !! `.`.`.`.\n,xmdMMMbnmx,.    MMMMMMMr !!!!!!!!!!!!` ;: MMM $$$$$$$$$$??$$ MM !! `.`.`.`.\nP\"`.,,,,c`\"\"4MMn  MMMMMMx !!!!!!!!!!!` <!: MMM $$$$$$$$L =c$F.MP !! `.`.`.`.\nub \"P4MM\")M,x,\"4b,`44MMMP !!!!!!!!!!  !!!: MMM ???$$$$$$\"=,$ JM`;!! `.`.`.`.\nML,,nn4Mx`\"MMMx.`ML ;,,,;<!!!!!!!!! ;!!!!: MMM.-=,$$$$$$hc$`.MP !!! `.`.`.`.\n. MMM   4Mx`MMML MM,`<!!!!!!!!!!!! ;!!!!!` `MMb  d$$$$$$$$` MM`,!!! `.`.`.`.\n,d\" MMn. .,nMMMM MMM `!!!!!!!!!!! ;!!!!!!>  4MMb `$$$$$$$`.dM`.!!!! `.`.`.`.\n.`\"M\"_\" MMMMMMMP,MMM ;!>>!!!!!!` <!!!!!!!!!. \"MMb $$$$$$$ dM ;!!!!! `.`.`.`.\n `nr;MMMMM\"MMMP dMM` >>!(!)<<!  <!!!!!!!!!!!. `MM.`$$$$$$ MM !!!!!! `.`.`.`.\n\",Jn,\"\". ,uMMP dMMP /)<;>><>` .!!!!!!!!!!!!!!; `Mb $$$$$F;MP !!!!!! `.`.`.`.\n dPPM 4MMMMM\" dMMP (->;)<><` ;!!!!!!!!!!!!!!!!. 4M $$$$$h M>.!!!!!! `.`.`.`.\n=M uMMnMMM\" uMMM\" <!;/;->;` ;!!!!!!!!!!!!!!!!!; 4M.??\"$$`,M <!!!!!! `.`.`.`.\nJM )MMMM\" uMMMM`,!>;`(>!>` <!!!!!!!!!!!!!!!!!!! 4M> -??`,M` !!!!!!! `.`.`.`.\nMM `MP\" xdMMMP <(;<:)!`)` <!!!!!!!!!!!!!!!!!!!! MMb  - ,M`;!!!!!!!` `.`.`.`.\nMP   ,nMMMMP\" (>:)/;<:!  !!!!!!!!!!!!!!!!!!!!!! `MM.-= d`;!!!!!!!! .`.`.`.`.\n,xndMMMMP\" .;)`;:`>(;:  !!!!!!!!!!!!!!!!!!!!!!!; 4MMnndM <!!!!!!!  .`.`.`.`.\nMMMMMP\" .;(:`-;(.><(` ;!!!!!!!!!!!!!!!!!!!!!!!!!, 4MMMMP !!!!!!!> `.`.`.`.`.\nP\"\" .,;<):(;/(\\`>-)` ;!!!!!!!!!!!!!!!!!!!!!!!!!!!>.`\"P\" <!!!!!!! .`.`.`.`.`.\n,<;),<-:><;,<- >;>` ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!;;<!!!!!!!!  .`.`.`.`.`.\n)-/;`<:<;\\->:(`;(` ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!` `.`.`.`.`.`.\n:\\;`<(.:>-;(;<>:  <!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! .`.`.`.`.`.`.\n(.;>:`<;:<;-/)/  <!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  .`.`.`.`.`.`.\n;-;:>:.;`;(`;` ;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!` `.`.`.`.`.`.`.\n    '''\n    return s.swapcase()", "def alternateCase(s):\n    res = ''.join([letter.lower() if letter.isupper() else letter.upper() for letter in s])\n    return res", "def alternateCase(s):\n    ret = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.isupper():\n                ret += c.lower()\n            else:\n                ret += c.upper()\n        else:\n            ret += c\n    return ret", "alternateCase = lambda s:'' if not s else f'{s[0].swapcase()}{alternateCase(s[1:])}'", "def alternateCase(word):\n    return word.swapcase()", "def alternateCase(s):\n    return ''.join(c.upper() if c.islower() else c.lower() for c in s)", "alternateCase = lambda s: ''.join(i.lower() if i.isupper() else i.upper() for i in s)", "def alternateCase(s):\n    string = \"\"\n    for char in s:\n        if char.islower():\n            string += char.upper()\n        else:\n            string += char.lower()\n    return string\n", "alternateCase=lambda s:list(type(s).__dict__.values())[44](s)", "def alternateCase(s):\n    return ''.join([x.lower() if x.isupper() else ' ' if x == ' ' else x.upper() for x in s])", "def alternateCase(s):\n    if len(s) < 1:\n        return s\n    res = \"\"\n    for l in s:\n        if l.isupper():\n            res += l.lower()\n        else:\n            res += l.upper()\n    return res", "def alternateCase(s):\n    res = list(s)\n    count = 0\n    for item in s:\n        if(item.isalpha()):\n            if(item.isupper()):\n                res[count] = item.lower()\n            else:\n                res[count] = item.upper()\n        count += 1\n    return \"\".join(res)", "def alternateCase(s):\n    result = \"\"\n    for letter in s:\n        if letter.islower():\n            result+=letter.upper()\n        elif letter.isupper():\n            result+=letter.lower()\n        else:\n            result+=letter\n    \n    return result", "def alternateCase(s):\n    #return s.swapcase() python's swapcase\n    my_own_swapcase = lambda w: ''.join([l.lower() if l.isupper() else l.upper() if l.islower() else l for l in w])\n    return my_own_swapcase(s)", "def alternateCase(s):\n    return ''.join([ch.swapcase() for ch in s])\n", "def alternateCase(s):\n    result = '';\n    for i in s:\n        if i.isupper():\n            result += i.lower();\n        elif i.islower():\n            result += i.upper();\n        else:\n            result += ' '\n    return result;\n", "def alternateCase(s):\n    copy = list(s)\n    for i in range(0,len(s)):\n        if(s[i].isupper()):\n           copy[i] = s[i].lower()\n        elif(s[i].islower()):\n           copy[i] = s[i].upper()\n        else:\n            continue\n    return ''.join(copy)", "def alternateCase(s):\n    a = s.swapcase()\n    return a", "def alternateCase(s):\n    alt = ''\n\n    for i in range(len(str(s))):\n        if(s[i]).islower():\n            alt += s[i].upper()\n        else:\n            alt += s[i].lower()\n\n    return alt", "def alternateCase(s):\n    return ''.join([x.lower() if x==x.upper() else x.upper() for x in list(s) ])", "from string import ascii_lowercase, ascii_uppercase\n\ntranslation_table = str.maketrans(ascii_lowercase+ascii_uppercase, ascii_uppercase+ascii_lowercase)\n\ndef alternateCase(s):    \n    return s.translate(translation_table)", "def alternateCase(s):\n    switched_str = ''\n    for c in s:\n        if c.islower():\n            switched_str += c.upper()\n        else:\n            switched_str += c.lower()\n    return switched_str", "def alternateCase(s):\n    newstring ='' \n    count1 = 0\n    count2 = 0\n    count3 = 0\n    for a in s: \n# Checking for lowercase letter and converting to uppercase. \n        if (a.isupper()) == True: \n            count1+= 1\n            newstring+=(a.lower()) \n# Checking for uppercase letter and converting to lowercase. \n        elif (a.islower()) == True: \n            count2+= 1\n            newstring+=(a.upper()) \n# Checking for whitespace letter and adding it to the new string as it is. \n        elif (a.isspace()) == True: \n            count3+= 1\n            newstring+= a \n    return newstring", "def alternateCase(s):\n    return ''.join([i.upper(), i.lower()][i.isupper()] for i in s)", "def alternateCase(st):\n    string = \"\"\n    for letters in st:\n        if letters.isupper():\n            string += letters.lower()\n        else:\n            string += letters.upper()\n    return string\n", "def alternateCase(s):\n    # your code here\n    if s=='':\n        return s\n    r = ''\n    for i in range(len(s)):\n        if s[i].islower():\n            r += s[i].upper()\n        else:\n            r += s[i].lower()\n    return r", "def alternateCase(s):\n\n    result = \"\"\n    for char in s:\n        ascii_value = ord(char)\n        if (97 <= ascii_value <= 122):\n            ascii_value -= 32\n        elif (65 <= ascii_value <= 90):\n            ascii_value += 32\n\n        result += chr(ascii_value)\n\n    return result\n", "def alternateCase(s):\n    l=[]\n    for i in s:\n        if i == \" \" or i == \"\":\n            l.append(i)\n        elif i.isupper():\n            l.append(i.lower())\n        elif i.islower():\n            l.append(i.upper())\n    return \"\".join(l)", "def alternateCase(s):\n    c=\"\"\n    for i in s:\n        if i.isupper():\n            c+=i.lower()\n        elif i.islower():\n            c+=i.upper()\n        else:\n            c+=\" \"\n    return c\n        \n            \n", "def alternateCase(s):\n    a=''\n    for x in s:\n        if x.islower():\n            a+=x.upper()\n        else: a+=x.lower()\n    # your code here\n    return a", "def alternateCase(s):\n    lst=[]\n    for x in s:\n        if x.islower():\n            lst.append(x.upper())\n        elif x.isupper():\n            lst.append(x.lower())\n        else:\n            lst.append(x)\n    x = \"\".join(lst)\n    return x", "def alternateCase(s):\n    ret = ''\n    for c in s:\n        if c.isupper():\n            ret += c.lower()\n        elif c.islower():\n            ret += c.upper()\n        else:\n            ret += c\n    return ret", "def alternateCase(s):\n    \n    string = \"\"\n    \n    for i in s:\n        if i.isupper():\n            i = i.lower()\n            string += i\n        else:\n            i = i.upper()\n            string += i\n            \n    return string", "def alternateCase(s):\n    string = \"\"\n    for letter in s:\n        if letter == letter.upper():\n            letter = letter.lower()\n            string = string + letter\n        else:\n            letter = letter.upper()\n            string = string + letter\n            \n    return string", "def alternateCase(s):\n    new=\"\"\n    for i in range(len(s)):\n        if s[i].islower():\n            new+=s[i].upper()\n        if s[i].isupper():\n            new+=s[i].lower()\n        if s[i]==\" \":\n            new+=\" \"\n    return new", "def alternateCase(s):\n    myList = []\n    \n    for i in s:\n        if i.isupper():\n            myList.append(i.lower())\n        elif i.islower():\n            myList.append(i.upper())\n        else:\n            myList.append(i)\n            \n    return ''.join(myList)", "def alternateCase(s):\n    nw = ''\n    for i in s:\n        if i.isupper():\n            nw += i.lower()\n        else:\n            nw += i.upper()\n    return nw", "def alternateCase(s):\n    a = \"\"\n    for x in s:\n        if x.isupper():\n            a += x.lower()\n        elif x.islower():\n            a += x.upper()\n        elif x == \" \":\n            a += \" \"\n    return a", "alternateCase = lambda s : ''.join([x.lower() if x.isupper() else x.upper() for x in s])", "def alternateCase(s):\n    new_upper = s.upper()\n    print(s)\n\n    new_sent = []\n\n    for i in range(0, len(s)):\n        if s[i] == \" \":\n            print(True)\n            new_sent.append(\" \")\n        elif s[i] != new_upper[i]:\n            print(\"Needs upper\")\n            new_sent.append(s[i].upper())\n        else:\n            print(\"Needs lower\")\n            new_sent.append(s[i].lower())\n    print(new_sent)\n    answer = \"\".join(new_sent)\n    print(answer)\n    return answer", "def alternateCase(s):\n    a = []\n    for i in s:\n        if i.isupper():\n            a.append(i.lower())\n        else:\n            a.append(i.upper())\n    return ''.join(a)", "def alternateCase(s=''):\n    # your code here\n    print(s)\n    listl = list(s)\n    n = len(s)\n    i = 0\n    while i < n:\n        if s[i].isupper() == True:\n            print(s[i])\n            letra = s[i].lower()\n            print(letra)\n            listl[i] = letra\n            print(listl)\n            s = ''.join(listl)\n            print(s)\n        \n        else:\n            if s[i].islower() == True:\n                print(s[i])\n                letra = s[i].upper()\n                print(letra)\n                listl[i] = letra\n                print(listl)\n                s = ''.join(listl)\n                print(s) \n        i += 1\n    return s", "def alternateCase(s):\n    k=\"\"\n    for x in s:\n        if x in \"qwertyuioplkjhgfdsazxcvbnm\":\n            k=k+x.upper()\n        elif x in \"QWERTYUIOPASDFGHJKLZXCVBNM\":\n            k=k+x.lower()\n        else:\n            k=k+x\n        \n        \n    return k", "def alternateCase(s):\n    w = ''\n    for i in s:\n        if i.isupper() == True:\n            w += i.lower()\n        else:\n            w += i.upper()\n    return w\n", "def alternateCase(s):\n    result=\"\"\n    for letter in s:\n        if letter.isupper():\n            result+=letter.lower()\n        else:\n            result+=letter.upper()\n    return result", "def alternateCase(string):\n    # your code here\n    res = ''\n    for char in string:\n        if char.lower() == char:\n            res += char.upper()\n        else:\n            res += char.lower()\n    return res", "def alternateCase(s):\n    listW = list(s)\n    for i in range(len(listW)):\n        if listW[i].islower():\n            listW[i]=listW[i].upper()\n        elif listW[i].isupper():\n            listW[i]=listW[i].lower()\n    return ''.join(listW)", "def alternateCase(s):\n    # your code here\n    return ''.join([char.swapcase() for char in s])", "def alternateCase(s):\n    s = list(s)\n    for x in range(len(s)):\n        if s[x] == s[x].upper():\n            s[x] = s[x].lower()\n        else:\n            s[x] = s[x].upper()\n    return ''.join(s)", "def alternateCase(s=''):\n    msg = ''\n    if s == '':\n        return ''\n    for i in s:\n        if i.islower():\n            msg = msg + str(i.upper())\n        elif i.isupper():\n            msg = msg + str(i.lower())\n        else:\n            msg = msg + str(i)\n    return msg", "def alternateCase(s):\n    # your code here\n    \n    return ''.join([c.swapcase() for c in s])", "def alternateCase(s):\n    s=str(s)\n    ergebnis=''\n     \n    for letter in s:\n        if letter.isupper():\n            ergebnis+=letter.lower()\n        else:\n            ergebnis+=letter.upper()\n            \n        \n            \n    return ergebnis", "def alternateCase(s):\n    news=[]\n    for i in range(len(s)):\n        if s[i].islower():\n            news.append(s[i].upper())\n        else:\n            news+=s[i].lower()\n    return(''.join(news))\n", "def alternateCase(s):\n    res = \"\"\n    for c in s:\n        if c.isupper():\n            res+=c.lower()\n        else:\n            res+=c.upper()\n    return res", "def alternateCase(s):\n#     for el in s:\n#         if el.isupper(): \n#             s.replace(el, el.lower())\n#         elif el.islower(): \n#             s.replace(el, el.upper()) \n    \n    return s.swapcase()", "def alternateCase(s):\n    S=\"\"\n    for i in s:\n        if i.isupper():\n            S+=i.lower()\n        else:\n            S+=i.upper()\n        \n    return S", "def alternateCase(s):\n    output = \"\"\n    for c in s:\n        if c.isupper():\n            output += c.lower()\n        else: \n            if c.islower():\n                output+= c.upper()\n            else:\n                output += c\n\n    return output", "def alternateCase(s):\n    ret = ''\n    for x in s:\n        if x == x.upper():\n            ret+=x.lower()\n        else:\n            ret+=x.upper()\n    return ret", "def alternateCase(s):\n    \n    return \"\".join(c.upper() if c==c.lower() else c.lower() for c in s)", "def alternateCase(s):\n    n_s=''\n    if s.isspace():\n        return s\n    for i in s:\n        if i.isupper():\n            n_s+=i.lower()\n        elif i.lower():\n            n_s+=i.upper()\n        else:\n            n_s+=i\n    return n_s            ", "def alternateCase(s):\n    new_s = \"\"\n    for ltr in s:\n        if ltr.lower() == ltr:\n            ltr = ltr.upper()\n        else:\n            ltr = ltr.lower()\n        new_s += ltr\n    return new_s", "def alternateCase(s):\n    new_string = \"\"\n    for a in s: \n        if (a.isupper()) == True: \n            new_string += (a.lower()) \n        elif (a.islower()) == True: \n            new_string += (a.upper()) \n        elif (a.isspace()) == True: \n            new_string += a \n    return new_string", "def alternateCase(s):\n    # your code here\n    res=''\n    for i in range(len(s)):\n        if s[i]>='a' and s[i]<='z':\n            res=res+s[i].upper()\n        elif s[i]>='A' and s[i]<='Z':\n            res=res+s[i].lower()\n        else:\n            res=res+s[i]\n    return res", "def alternateCase(s):\n    return ''.join(c.lower() if str.isupper(c) else c.upper() for c in s)", "def alternateCase(s):\n    result = ''\n    if len(s) == 0 or s == ' ':\n        return s\n    for letter in s:\n        if 'a' <= letter <= 'z':\n            result += letter.upper()\n        elif 'A' <= letter <= 'Z':\n            result += letter.lower()\n        else:\n            result += letter\n    return result", "def alternateCase(s):\n    res = ''\n    for i in [i for i in s]:\n        if i.isupper() == True:\n            res = res + i.lower()\n        else:\n            res = res + i.upper()\n    return res", "def alternateCase(s):\n    lst = []\n    for i in s:\n        if i == i.upper():\n            lst.append(i.lower())\n        else:\n            lst.append(i.upper())\n    return ''.join(lst)\n", "def alternateCase(s):\n    stringy = ''\n    for i in s:\n        if i.islower():\n            stringy += i.upper()\n        elif i.isupper():\n            stringy += i.lower()\n        else:\n            stringy += i\n    return stringy", "def alternateCase(s):\n    string = ''\n    for i in s:\n        print(i)\n        if i == i.upper():\n            string += i.lower()\n        else:\n            string += i.upper()\n    return string", "def alternateCase(s):\n    # a - z = 97 - 122\n    # A - Z = 65 - 90\n    # your code here\n    new_s = ''\n    for char in s:\n        if ord(char) > 122 or ord(char) < 65:\n            new_s += char\n            continue\n        if ord(char) >= 97:\n            new_s += chr(ord(char) - 32)\n        else:\n            new_s += chr(ord(char) + 32)\n    return new_s", "def alternateCase(s):\n    final = []\n    for l in s:\n        if l == l.lower():\n            final.append(l.upper())\n        elif l == l.upper():\n            final.append(l.lower())\n        else:\n            final.append(' ')\n        \n    return ''.join(final)", "def alternateCase(s):\n    cout = []\n    \n        \n    for letter in s:\n        if letter == letter.upper():\n            cout.append(letter.lower())\n        elif letter == letter.lower():\n            cout.append(letter.upper())\n    return \"\".join(cout)", "import string\n\n\ndef alternateCase(s):\n    # your code here\n    UPPER = string.ascii_uppercase\n    LOWER = string.ascii_lowercase\n    \n    result = []\n    for letter in s:\n        if letter in UPPER:\n            result.append(letter.lower())\n        else:\n            result.append(letter.upper())\n    return ''.join(result)", "def alternateCase(s):\n    k = ''\n    for i in s:\n        if i.islower():\n            k += i.upper()\n        elif i.isupper():\n            k += i.lower()\n        else:\n            k += i\n    return k", "def alternateCase(s):\n    new = \"\"\n    for let in s:\n        if let.isupper():\n            new+=let.lower()\n        elif let.islower():\n            new+=let.upper()\n        else:\n            new+=let\n    return new", "from string import ascii_uppercase as u, ascii_lowercase as l\ndef alternateCase(s):\n    # your code here\n    return s.translate(str.maketrans(u+l,l+u))\n", "def alternateCase(s):\n    alt = \"\"\n    for i in s:\n        if i.isupper():\n            alt += i.lower()\n        else:\n            alt += i.upper()\n    return alt", "a = ord('a')\nA = ord('A')\nz = ord('z')\nZ = ord('Z')\nupperToLower = A-a\nlowerToUpper = a-A\n\ndef alternateCase(s):\n    str = \"\"\n    for i in range(len(s)):\n        if ord(s[i]) >= A and ord(s[i]) <= Z:\n            # convert to lower case\n            str += chr(ord(s[i]) - upperToLower)\n        elif ord(s[i]) >= a and ord(s[i]) <= z:\n            # convert to upper case\n            str += chr(ord(s[i]) - lowerToUpper)  \n        else:\n            str += s[i]\n    return str", "def alternateCase(s):\n    return ''.join([l.upper() if l.islower() else l.lower() for l in s])\n            \n        \n", "def alternateCase(s):\n    new_text=''\n    for i in s:\n        if i.islower():\n            new_text+=i.upper()\n        else:\n            new_text+=i.lower()\n    return new_text", "def alternateCase(s):\n    s = [letter for letter in s]\n     \n    for i in range(len(s)):\n        if s[i] == s[i].upper():\n            s[i] = s[i].lower()\n        \n        else: \n            s[i] = s[i].upper()\n            \n    return \"\".join(s)", "def alternateCase(s):\n    text = \"\"\n    for i in s:\n        if i.islower():\n            text += i.upper()\n        else:\n            text += i.lower()\n    return text", "def alternateCase(s):\n    # your code here\n    \n    alternated = []\n    \n    for i in list(s):\n        \n        if i.isspace():\n            alternated.append(i)\n        \n        if i.islower():\n            alternated.append(i.upper())\n        \n        if i.isupper():\n            alternated.append(i.lower())\n    \n    return  \"\".join(alternated)", "def alternateCase(s):\n    res = \"\"\n    for c in s:\n        res += c.upper() if c.islower() else c.lower()\n    return res\n", "def alternateCase(s):\n    new_s=[]\n    for char in s:\n        if char.isupper():\n            new_s.append(char.lower())\n        else:\n            new_s.append(char.upper())\n            \n    return \"\".join(new_s)", "def alternateCase(s):\n    s_list = s.split()\n    new_s=[]\n    for char in s:\n        if char.isupper():\n            new_s.append(char.lower())\n        else:\n            new_s.append(char.upper())\n    \n    new_s_string = \"\".join(new_s)\n            \n    return new_s_string", "def alternateCase(s):\n    final_ans=\"\"\n    tokens = [c for c in s]\n    for c in tokens:\n        if c.isupper():\n            final_ans= final_ans+c.lower()\n        else:\n            final_ans = final_ans+c.upper()\n    return final_ans", "def alternateCase(s):\n    upper_letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    lower_letters = list(upper_letters.lower())\n    upper_letters = list(upper_letters)\n    \n    ans = ''\n    index = 0\n\n    while index < len(s):\n        char = s[index]\n        if char == '' or char == ' ':\n            ans += char\n            index += 1\n            continue\n        \n        if char in upper_letters:\n            ans += char.lower()\n        \n        if char in lower_letters:\n            ans += char.upper()\n            \n        index += 1\n\n    return ans", "def alternateCase(s):\n    # your code here\n    res = \"\"\n    \n    for c in s:\n        if c.isupper():\n            res += c.lower()\n        elif c.islower():\n            res += c.upper()\n        else:\n            res += c\n    return res", "def alternateCase(s):\n    return ''.join(l.lower() if l.isupper() else l.upper() for l in s)", "def alternateCase(s):\n    s = [x.upper() if x.islower() else x.lower() for x in s]\n    s = \"\".join(s)\n    return s", "def alternateCase(s):\n    return \"\".join([l.upper() if l.islower() else l.lower() if l.isupper() else l for l in s])", "def alternateCase(s):\n    text=''\n    for i in range(len(s)):\n        if s[i].isupper() == True:\n            text = text + s[i].lower()\n        else:\n            text = text + s[i].upper()\n    return text", "def alternateCase(s):\n    a = s\n    b = ''\n    for i in range(len(a)):\n        if str.isupper(a[i]):\n            b += a[i].lower()\n        elif a[i] == ' ':\n            b += ' '\n        else:\n            b += a[i].upper()\n    return b", "def alternateCase(s):\n    if len(s) == 0: return s\n    res = []\n    for x in s:\n        if x.isupper(): res.append(x.lower())\n        elif x.islower(): res.append(x.upper())\n        else: res.append(x)\n    return \"\".join(res)", "def alternateCase(s):\n    ans = ''\n    for c in s:\n        if c.upper() == c:\n            ans += c.lower()\n        elif c.lower() == c:\n            ans += c.upper()\n    return ans", "def alternateCase(s):\n    lst=list()\n    for i in s:\n        if i.isupper():\n            lst.append(i.lower())\n        elif i.islower():\n            lst.append(i.upper())\n        else:\n            lst.append(\" \")\n    return \"\".join(lst)"]