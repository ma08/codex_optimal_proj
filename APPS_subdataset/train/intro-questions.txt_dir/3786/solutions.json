["import re\n\nPATTERNS = [re.compile(r'(?i)ci|ce|c(?!h)'),\n            re.compile(r'(?i)ph'),\n            re.compile(r'(?i)(?<!\\b[a-z]{1})(?<!\\b[a-z]{2})e\\b|([a-z])\\1'),\n            re.compile(r'(?i)th|w[rh]?'),\n            re.compile(r'(?i)ou|an|ing\\b|\\bsm')]\n            \nCHANGES  = {\"ci\": \"si\", \"ce\": \"se\", \"c\":\"k\",                     # Week 1\n            \"ph\": \"f\",                                           # Week 2\n            \"th\": \"z\",  \"wr\": \"r\",  \"wh\":  \"v\",   \"w\": \"v\",      # Week 4\n            \"ou\": \"u\",  \"an\": \"un\", \"ing\": \"ink\", \"sm\": \"schm\"}  # Week 5\n\ndef change(m):\n    tok = m.group(0)\n    rep = CHANGES.get( tok.lower(), \"\" if None in m.groups() else m.group()[0] )        # default value used for week 3 only\n    if tok[0].isupper(): rep = rep.title()\n    return rep\n        \ndef siegfried(week, txt):\n    for n in range(week):\n        txt = PATTERNS[n].sub(change, txt)\n    return txt", "import re\ndef siegfried(week, txt):\n    if week >= 1: txt = re.sub('c(?!h)', 'k', re.sub('C(?!h)', 'K', txt.replace('ci', 'si').replace('Ci', 'Si').replace('ce', 'se').replace('Ce', 'Se')))\n    if week >= 2: txt = txt.replace('ph', 'f').replace('Ph', 'F')\n    if week >= 3: txt = re.sub('([A-z]{2,})e([-!?]+)', r'\\1\\2', ' '.join([x.rstrip('e') if len(x)>3 else x for x in re.sub(r'([A-z])\\1', r'\\1', txt, flags=re.I).split()]))\n    if week >= 4: txt = txt.replace('th', 'z').replace('Th', 'Z').replace('wr', 'r').replace('Wr', 'R').replace('wh', 'v').replace('Wh', 'V').replace('w', 'v').replace('W', 'V')\n    if week >= 5: txt =(' ' + txt + ' ').replace('ou', 'u').replace('Ou', 'U').replace('an', 'un').replace('An', 'Un').replace('ing ', 'ink ').replace(' sm', ' schm').replace(' Sm', ' Schm')      \n    return txt.strip()", "import re\n\ndef siegfried(week, txt):\n    lessons = \\\n        [\n            [   # Week 1\n                (r'c(?=[ie])', { 'c':'s','C':'S' }),\n                (r'c(?!h)', { 'c':'k','C':'K' })\n            ],[ # Week 2\n                (r'ph', { 'ph':'f','Ph': 'F' })\n            ],[ # Week 3\n                (r'(?<=\\w\\w\\w)e(?=\\W|\\Z)', {'e':'','E':''}),\n                (r'([a-z])\\1',{})\n            ],[ # Week 4\n                (r'th', { 'th':'z','Th': 'Z' }),\n                (r'wr', { 'wr':'r','Wr': 'R' }),\n                (r'wh', { 'wh':'v','Wh': 'V' }),\n                (r'w',  { 'w':'v','W': 'V' })\n            ],[ # Week 5\n                (r'ou', { 'ou':'u','Ou': 'U' }),\n                (r'an', { 'an':'un','An': 'Un' }),\n                (r'ing(?=\\W|\\Z)', { 'ing':'ink' }),\n                (r'(?<=\\W)sm|(?<=\\A)sm', { 'sm':'schm','Sm': 'Schm' })\n            ]\n        ]\n    \n    result = txt\n    for w in range(week):\n        for rx,data in lessons[w]:\n            repl = lambda m: data.get(m.group(0),m.group(0)[0])\n            result = re.sub(rx,repl,result,flags=re.IGNORECASE)\n    return result", "import re\ndef siegfried(week, txt):\n    if week == 1:\n        txt = re.sub('ci', matchcase('si'), txt, flags=re.I)\n        txt = re.sub('ce', matchcase('se'), txt, flags=re.I)\n        txt = re.sub('(?!ch)[c]', matchcase('k'), txt, flags=re.I)\n    elif week == 2:\n        txt = siegfried(1, txt)\n        txt = re.sub('ph', matchcase('f'), txt, flags=re.I)\n    elif week == 3:\n        txt = siegfried(2, txt)\n        txt = re.sub(r'(?<=\\w{3})e\\b', '', txt)\n        txt = re.sub(r'([a-z])\\1', r'\\1', txt, flags=re.I)\n    elif week == 4:\n        txt = siegfried(3, txt)\n        txt = re.sub('th', matchcase('z'), txt, flags=re.I)\n        txt = re.sub('wr', matchcase('r'), txt, flags=re.I)\n        txt = re.sub('wh|w', matchcase('v'), txt, flags=re.I)\n    elif week == 5:\n        txt = siegfried(4, txt)\n        txt = re.sub('ou', 'u', txt)\n        txt = re.sub('an', matchcase('un'), txt, flags=re.I)\n        txt = re.sub(r'ing\\b', matchcase('ink'), txt, flags=re.I)\n        txt = re.sub(r'\\bsm', matchcase('schm'), txt, flags=re.I)\n    return txt\n    \ndef matchcase(word):\n        def replace(m):\n            text = m.group()\n            if text.isupper():\n                return word.upper()\n            elif text.islower():\n                return word.lower()\n            elif text[0].isupper():\n                return word.capitalize()\n            else:\n                return word\n        return replace\n", "RULES = [\n    ['ci si', 'ce se', 'c(?!h) k'],\n    ['ph f'],\n    [r'(?<=\\w{3})e+\\b ', r'([a-z])\\1 \\1'],\n    ['th z', 'wr r', 'wh v', 'w v'],\n    ['ou u', 'an un', r'ing\\b ink', r'\\bsm schm'],\n]\n\ndef siegfried(week, txt):\n    import re\n    \n    def keep_case(repl):\n        def wrapper(m):\n            ref = re.match(r'\\\\(\\d)', repl)\n            strng = m.group(int(ref.group(1))) if ref else repl\n            g = m.group(0)\n            if g.islower(): return strng.lower()\n            if g.isupper(): return strng.upper()\n            if g.istitle(): return strng.title()\n            return strng\n        return wrapper\n\n    for rules in RULES[:week]:\n        for rule in rules:\n            src, repl = rule.split(' ')\n            txt = re.sub(src, keep_case(repl), txt, flags=re.I)\n    return txt", "import re\ndef siegfried(week, s):\n    d = {'ph': 'f', 'Ph': 'F','ci': 'si', 'ce': 'se', 'c': 'k', 'Ci': 'Si', 'Ce': 'Se', 'C': 'K','XX':'ch','xx':'Ch','ch':'XX','Ch':'xx','th': 'z', 'wr': 'r', 'wh': 'v', 'w': 'v', 'Th': 'Z', \n        'Wr': 'R', 'Wh': 'V', 'W': 'V','ou': 'u', 'an': 'un', 'ing': 'ink', 'sm': 'schm', 'Ou': 'U', 'An': 'Un', 'Ing': 'Ink', 'Sm': 'Schm'}\n    week1=lambda s:re.sub(r'(xx)',lambda x:d[x.group()],re.sub(r'(ci|ce|c)',lambda x:d[x.group()],re.sub(r'(Ch|ch)',lambda x:d[x.group()] ,s),flags=re.I),flags=re.I)\n    week2=lambda s:re.sub(r'ph', lambda x: d[x.group()], s, flags=re.I)\n    week3=lambda s:re.sub(r'([a-zA-Z])\\1', r'\\1', re.sub(r'\\b([a-zA-Z]+e+)\\b',lambda x:x.group()if len(x.group())<=3 else x.group().rstrip('e'),s,flags=re.I), flags=re.I)\n    week4=lambda s:re.sub(r'(th|wr|wh|w)', lambda x: d[x.group()], s, flags=re.I)\n    week5=lambda s:re.sub(r'(ing(?= )|(?<= )sm)',lambda x:d[x.group()],re.sub(r'(ing$|^sm)',lambda x:d[x.group()],re.sub(r'(ou|an)',lambda x:d[x.group()],s,flags=re.I),flags=re.I),flags=re.I)\n    li = [week1, week2, week3, week4, week5]\n    for i in li[:week] : s = i(s)\n    return s", "def siegfried(week, txt):\n\n    import re\n\n    dict_week = \\\n        {\n            1: {'Ci': 'Si', 'Ce': 'Se', 'Ch': 'Xxx', 'C': 'K', 'Xxx': 'Ch',\n                'ci': 'si', 'ce': 'se', 'ch': 'xxx', 'c': 'k', 'xxx': 'ch'},\n            2: {'Ph': 'F', 'ph': 'f'},\n            3: {'': ''},\n            4: {'Th': 'Z', 'Wr': 'R', 'Wh': 'V', 'W': 'V',\n                'th': 'z', 'wr': 'r', 'wh': 'v', 'w': 'v'},\n            5: {'Ou': 'U', 'An': 'Un', 'ou': 'u', 'an': 'un'}\n        }\n\n    dd = {}\n    for i in range(1, week + 1):\n        dd.update(dict_week[i])\n\n    for k, v in dd.items():\n        txt = txt.replace(k, v)\n\n    if week >= 3:\n        txt = ''.join(re.sub(r'e$', '', i) if len(i) > 3 else i for i in re.split(r'(\\W)', txt))\n        double_l = {re.search(r'([a-z])\\1', i).group(0) for i in txt.lower().split() if re.search(r'([a-z])\\1', i)}\n        for i in double_l:\n            txt = txt.replace(i, i[0])\n            txt = txt.replace(i[0].upper() + i[1], i[0].upper())\n\n    if week == 5:\n        txt = ' '.join(re.sub(r'ing$', 'ink', i, flags=re.IGNORECASE) for i in txt.split())\n        txt = ' '.join(re.sub(r'^sm', 'Schm', i, flags=re.IGNORECASE) for i in txt.split())\n\n    return txt", "import re\n\n\ndef siegfried(week, txt):\n    weeks_have_passed = {0: week_one, 1: week_two, 2: week_three, 3: week_four, 4: week_five}\n\n    for counter in range(0, week):\n\n        txt = weeks_have_passed[counter](txt)\n    \n    return txt\n\ndef week_one(txt):\n\n    letter_list = list(txt)\n\n    copy_reverse_letter_list = letter_list.copy()\n\n\n    last_letter = ''\n\n    count = -1\n\n    for letter in copy_reverse_letter_list[::-1]:\n\n        lowercase_letter = letter.lower()\n\n        if lowercase_letter == 'c':\n            lowercase_letter += last_letter\n\n            if letter.isupper():\n                dict_to_know = {'ci': 'S', 'ce': 'S', 'ch': 'C'}\n                to_return = 'K'\n            else:\n                dict_to_know = {'ci': 's', 'ce': 's', 'ch': 'c'}\n                to_return = 'k'\n\n            letter_list[count] = dict_to_know.get(lowercase_letter, to_return)\n\n        count -= 1\n        last_letter = letter\n\n    final_txt = ''.join(letter_list)\n\n    return final_txt\n\n\ndef week_two(txt):\n\n    letter_list = list(txt)\n\n    copy_letter_list = letter_list.copy()\n    copy_letter_list.append('')\n\n    fix_position = 0\n\n    for counter, letter in enumerate(copy_letter_list[:-1]):\n\n        lowercase_letter = letter.lower()\n\n        next_letter = copy_letter_list[counter+1]\n        lowcase_next_letter = next_letter.lower()\n\n        if lowercase_letter == 'p' and lowcase_next_letter == 'h':\n\n            counter -= fix_position\n\n            if letter.isupper():\n                to_change = 'F'\n            else:\n                to_change = 'f'\n\n            letter_list[counter: counter + 2] = to_change\n\n            fix_position += 1\n\n    new_txt = ''.join(letter_list)\n\n    return new_txt\n\n\ndef week_three(txt):\n    trailling_e = r'[a-zA-Z]{3,}e\\b'\n\n    trailling_list = re.findall(trailling_e, txt)\n\n    new_txt = txt\n\n    for trailling_e_word in trailling_list:\n        new_txt = new_txt.replace(trailling_e_word, trailling_e_word[:-1])\n\n    letter_list = list(new_txt)\n\n    copy_letter_list = letter_list.copy()\n\n    last_letter = ''\n\n    position = -1\n\n    for letter in copy_letter_list[::-1]:\n\n        lowercase_letter = letter.lower()\n\n        if lowercase_letter == last_letter and lowercase_letter.isalpha():\n\n            del letter_list[position+1]\n\n            position += 1\n\n        last_letter = lowercase_letter\n\n        position -= 1\n\n    final_txt = ''.join(letter_list)\n\n    return final_txt\n\n\n\ndef week_four(txt):\n\n    letter_list = list(txt)\n\n    copy_reverse_letter_list = letter_list.copy()\n\n    last_letter = ''\n\n    counter = -1\n\n    for letter in copy_reverse_letter_list[::-1]:\n\n        lowercase_letter = letter.lower()\n\n        if lowercase_letter == 'w' or lowercase_letter == 't' and last_letter == 'h':\n            lowercase_letter += last_letter\n\n            if letter.isupper():\n                dict_to_know = {'wr': 'R', 'wh': 'V', 'th': 'Z'}\n                lonely_w = 'V'\n            else:\n                dict_to_know = {'wr': 'r', 'wh': 'v', 'th': 'z'}\n                lonely_w = 'v'\n\n            possible_last_letters = {'h', 'r'}\n\n            if last_letter in possible_last_letters:\n                letter_list[counter: counter+2] = dict_to_know[lowercase_letter]\n                counter += 1\n\n            else:\n                letter_list[counter] = lonely_w\n\n        counter -= 1\n        last_letter = letter\n\n    final_txt = ''.join(letter_list)\n\n    return final_txt\n\n\ndef week_five(txt):\n    letter_list = list(txt)\n\n    copy_reverse_letter_list = letter_list.copy()\n\n    last_letter = ''\n\n    counter = -1\n\n    for letter in copy_reverse_letter_list[::-1]:\n        lowercase_letter = letter.lower()\n\n        if lowercase_letter == 'o' and last_letter == 'u':\n            lowercase_or_uppercase = {'o': 'u', 'O': 'U'}\n\n            letter_list[counter: counter+2] = lowercase_or_uppercase[letter]\n\n            counter += 1\n\n        elif lowercase_letter == 'a' and last_letter == 'n':\n            lowercase_or_uppercase_2 = {'a': 'u', 'A': 'U'}\n\n            letter_list[counter] = lowercase_or_uppercase_2[letter]\n\n        last_letter = lowercase_letter\n\n        counter -= 1\n\n    first_txt = ''.join(letter_list)\n\n    re_to_find_ing = r'[a-zA-Z]{1,}ing\\b'\n\n    all_words_ending_with_ing = re.findall(re_to_find_ing, first_txt)\n\n    second_txt = first_txt\n\n    for word in all_words_ending_with_ing:\n        new_word = word[:-1] + 'k'\n        second_txt = second_txt.replace(word, new_word)\n\n    re_to_find_sm = r'\\b[sS][mM][a-zA-Z]*'\n\n\n    all_words_starting_with_sm = re.findall(re_to_find_sm, second_txt)\n\n    third_txt = second_txt\n\n    for word in all_words_starting_with_sm:\n        new_word = word[0] + 'ch' + word[1:]\n        third_txt = third_txt.replace(word, new_word)\n\n    final_txt = third_txt\n\n    return final_txt", "def siegfried(week, txt):\n\n    symbols = [' ', '.', '!', '-', '\\n']\n\n    if week >= 1:\n        rules = [['ci', 'si'], ['Ci', 'Si'],\n                ['ce', 'se'], ['Ce', 'Se'],\n                ['ch', '$$'], ['Ch', '$%'],\n                ['c', 'k'], ['C', 'K'],\n                ['$$', 'ch'], ['$%', 'Ch']]\n        for translation in rules:\n            txt = txt.replace(translation[0], translation[1])\n\n    if week >= 2:\n        rules = [['ph', 'f'], ['Ph', 'F']]\n        for translation in rules:\n            txt = txt.replace(translation[0], translation[1])\n\n    if week >= 3:\n        for position, letter in enumerate(txt):\n            if letter == 'e' and position == len(txt) - 1 \\\n                    and txt[position - 2] not in symbols \\\n                    and txt[position - 3] not in symbols:\n                txt = txt[:position] + '$'\n            elif letter == 'e' and position not in [0, 1, 2, len(txt) - 1] \\\n                    and txt[position + 1] in symbols \\\n                    and txt[position - 2] not in symbols \\\n                    and txt[position - 3] not in symbols:\n                txt = txt[:position] + '$' + txt[position + 1:]\n        txt = txt.replace('$', '')\n\n        for position, letter in enumerate(txt):\n            if txt[position].lower() == txt[position - 1].lower() \\\n                    and position != 0\\\n                    and letter.isalpha() \\\n                    and letter not in symbols:\n                txt = txt[:position] + '$' + txt[position + 1:]\n        txt = txt.replace('$', '')\n\n    if week >= 4:\n        rules = [['th', 'z'], ['Th', 'Z'],\n                 ['wr', 'r'], ['Wr', 'R'],\n                 ['wh', 'v'], ['Wh', 'V'],\n                 ['w', 'v'], ['W', 'V']]\n        for translation in rules:\n            txt = txt.replace(translation[0], translation[1])\n\n    if week >= 5:\n        rules = [['ou', 'u'], ['Ou', 'U'],\n                 ['an', 'un'], ['An', 'Un']]\n        for translation in rules:\n            txt = txt.replace(translation[0], translation[1])\n\n        for position, letter in enumerate(txt):\n            if letter == 'i' and position == len(txt) - 3 \\\n                    and txt[position + 1] == 'n' \\\n                    and txt[position + 2] == 'g':\n                txt = txt[:position + 2] + '$' + txt[position + 3:]\n            elif letter == 'i' \\\n                    and txt[position + 1] == 'n' \\\n                    and txt[position + 2] == 'g' \\\n                    and txt[position + 3] in symbols:\n                txt = txt[:position + 2] + '$' + txt[position + 3:]\n        txt = txt.replace('$', 'k')\n\n        for position, letter in enumerate(txt):\n            if letter == 'S' \\\n                    and txt[position + 1] == 'm' \\\n                    and (txt[position - 1] in symbols or position == 0):\n                txt = txt[:position] + '$$' + txt[position + 2:]\n        txt = txt.replace('$$', 'Schm')\n\n    return txt", "import re\ndef siegfried(week, txt):\n    w = []\n    t = txt.replace('ci', 'si').replace('Ci', 'Si').replace('ce', 'se').replace('Ce', 'Se').replace('c', 'k').replace('C', 'K').replace('kh', 'ch').replace('Kh', 'Ch')\n    w.append(t)\n    t = t.replace('ph', 'f').replace('Ph', 'F')\n    w.append(t)\n    t = re.sub(r'([A-Za-z])\\1', r'\\1', re.sub(r'([a-zA-Z]{3,})e\\b', r'\\1', t), flags = re.I)\n    w.append(t)\n    t = t.replace('th', 'z').replace('Th', 'Z').replace('wr', 'r').replace('Wr', 'R').replace('wh', 'v').replace('Wh', 'V').replace('w', 'v').replace('W', 'V')\n    w.append(t)\n    t = re.sub(r'\\b(s|S)(m)', r'\\1ch\\2', re.sub(r'ing\\b', r'ink', t.replace('ou', 'u').replace('an', 'un').replace('An', 'Un')))\n    w.append(t)\n    return w[week-1]"]