["import re\n\n\ndef to_cents(amount):\n    m = re.match(r'\\$(\\d+)\\.(\\d\\d)\\Z', amount)\n    return int(m.expand(r'\\1\\2')) if m else None\n", "from re import compile, match\n\nREGEX = compile(r'\\$(?P<integer>\\d+)\\.(?P<frac>\\d{0,2})$')\n\n\ndef to_cents(amount):\n    m = match(REGEX, amount)\n    if m and m.group(0) == amount:\n        return int(m.group('integer')) * 100 + int(m.group('frac'))\n", "def to_cents(amount):\n    if amount and amount[0] == '$':\n        try:\n            return int(amount[1:-3] + amount[-2:])\n        except:\n            return None\n    return None", "import re\n\ndef to_cents(amount):\n    matched = re.search(r'\\A\\$(\\d+).(\\d{2})\\Z', amount)\n    if matched:\n        return int('{}{}'.format(*matched.groups()))", "from re import match\n\ndef to_cents(amount):\n    res = match('^\\$(\\d*)\\.(\\d{2})(?!\\n)$', amount)\n    return int(''.join(res.groups())) if res else None", "import re\ndef to_cents(amount):\n    price = re.match(r'^\\$(\\d+)\\.(\\d{1,2})\\Z', amount)\n    return int(price.expand(r'\\1\\2')) if price else None", "import re\ndef to_cents(amount):\n    return int(re.sub('\\$|\\.', '', amount)) if re.search(r'^\\$\\d+\\.\\d{1,2}\\Z', amount) else None", "import re\ndef to_cents(amount):\n  return int(re.sub(\"\\D\", \"\", amount)) if re.match(\"\\$\\d*\\.\\d{2}\\Z\", amount) else None", "import re\n\ndef to_cents(amount):\n\n    if not re.match(r\"^\\$(0|[1-9]+\\d*)\\.\\d{2}\\Z\", amount):\n      return None\n      \n    return int(re.sub(r\"[\\$\\.]\", \"\", amount))", "import re\ndef to_cents(amount):\n    pattern = re.compile(r'^\\$([\\d]+)\\.([\\d]{2})$')\n    if re.fullmatch(pattern, amount) == None:\n        return None\n    price = re.fullmatch(pattern, amount)\n    return (int(price.group(1)) * 100) + int(price.group(2))"]