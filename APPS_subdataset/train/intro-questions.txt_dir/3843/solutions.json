["region = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,:;-?! '()$%&\" + '\"'\n\ndef decrypt(encrypted_text):\n    if not encrypted_text: return encrypted_text\n    \n    letters = list(encrypted_text)\n    letters[0] = region[-(region.index(letters[0]) + 1)]\n    for i in range(1, len(letters)):\n        letters[i] = region[region.index(letters[i - 1]) - region.index(letters[i])]\n    \n    for i in range(1, len(letters), 2):\n        letters[i] = letters[i].swapcase()\n\n    return \"\".join(letters)\n    \n\n\ndef encrypt(text):\n    if not text: return text\n    \n    letters = list(text)\n    for i in range(1, len(letters), 2):\n        letters[i] = text[i].swapcase()\n        \n    swapped = letters[:]\n    for i in range(1, len(letters)):\n        letters[i] = region[region.index(swapped[i - 1]) - region.index(swapped[i])]\n        \n    letters[0] = region[-(region.index(swapped[0]) + 1)]\n    return \"\".join(letters)\n", "def encrypt(text):\n\n    import string\n\n    #prechecks\n\n    char_filter = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,:;-?! '()$%&\" + '\"'\n    char_filter = [char for char in char_filter]\n    \n    if text == \"\" or text is None:\n        return text\n    else:\n        for char in text:\n            if char not in char_filter:\n                raise Exception(\"text contains invalid character\")\n\n        #turn text to list\n        txt_list = [char for char in text]\n\n        #step 1\n        for charIndex in range(1, len(txt_list), 2):\n\n            if txt_list[charIndex] in string.ascii_uppercase:\n                txt_list[charIndex] = txt_list[charIndex].lower()\n\n            elif txt_list[charIndex] in string.ascii_lowercase:\n                txt_list[charIndex] = txt_list[charIndex].upper()\n\n        #step 2\n        for i in range(len(txt_list)-1):\n            #x = len-i makes it go through list in reverse order\n            x = len(txt_list) - 1 - i\n            char2 = char_filter.index(txt_list[x])\n            char1 = char_filter.index(txt_list[x - 1])\n            txt_list[x] = char_filter[char1-char2]\n\n        #step 3\n        char = char_filter.index(txt_list[0])\n        txt_list[0] = char_filter[char * - 1 - 1]\n\n        #convert list to text\n        text = \"\"\n        for char in txt_list:\n            text += char\n\n        return text\n    \n\ndef decrypt(text):\n\n    import string\n\n    #prechecks\n\n    char_filter = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,:;-?! '()$%&\" + '\"'\n    char_filter = [char for char in char_filter]\n    if text == \"\" or text is None:\n        return text\n    else:\n        for char in text:\n            if char not in char_filter:\n                raise Exception(\"text contains invalid character\")\n    \n        #turn text to list\n        txt_list = [char for char in text]\n\n        #step 3 reverse\n        txt_list[0] = char_filter[77 - char_filter.index(txt_list[0]) - 1]\n\n        #step 2 reverse\n        for i in range(1, len(txt_list)):\n            txt_list[i] = char_filter[char_filter.index(txt_list[i - 1]) - char_filter.index(txt_list[i])]\n\n        #step 1 reverse\n\n        for charIndex in range(1, len(txt_list), 2):\n\n            if txt_list[charIndex] in string.ascii_uppercase:\n                txt_list[charIndex] = txt_list[charIndex].lower()\n\n            elif txt_list[charIndex] in string.ascii_lowercase:\n                txt_list[charIndex] = txt_list[charIndex].upper()\n\n        #convert list to text\n        text = \"\"\n        for char in txt_list:\n            text += char\n\n        return text", "from string import ascii_uppercase,ascii_lowercase,digits\nfrom itertools import chain\n\nr=ascii_uppercase+ascii_lowercase+digits+'.,:;-?! \\'()$%&\"'\nrr={c:i for i,c in enumerate(r)}\n\ndef decrypt(t):\n    if t is None: return None\n    if t=='': return ''\n    o=[r[76-rr[t[0]]]]\n    for c in t[1:]:\n        o.append(r[(rr[o[-1]]-rr[c])%77])\n    return ''.join(c.swapcase() if i%2 else c for i,c in enumerate(o))\n\ndef encrypt(t):\n    if t is None: return None\n    if t=='': return ''\n    t=''.join(c.swapcase() if i%2 else c for i,c in enumerate(t))\n    return r[76-rr[t[0]]]+''.join(r[(rr[a]-rr[b])%77] for a,b in zip(t,t[1:]))\n", "REGION = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,:;-?! '()$%&\" + '\"'\ndef decrypt(encrypted_text):\n    if not encrypted_text: return encrypted_text\n    if any([x not in REGION for x in encrypted_text]): raise Exception   \n    three = REGION[::-1][REGION.index(encrypted_text[0])] + encrypted_text[1:]\n    two = three[0]\n    for i in range(1, len(three)): two += REGION[(-REGION.index(three[i]) + REGION.index(two[i-1]))]\n    return ''.join([x.swapcase() if i%2 else x for i,x in enumerate(two)])\n    \ndef encrypt(text):\n    if not text: return text\n    if any([x not in REGION for x in text]): raise Exception\n    one = ''.join([x.swapcase() if i%2 else x for i,x in enumerate(text)])\n    two = ''.join([REGION[REGION.index(one[i-1]) - REGION.index(x)] if i != 0 else x for i,x in enumerate(one)])\n    return REGION[::-1][REGION.index(two[0])] + two[1:]", "import string\nreg = string.ascii_uppercase + string.ascii_lowercase + string.digits + '''.,:;-?! '()$%&\"'''\n\ndef decrypt(text):\n    if not text: return text\n    for i in text:\n        if i not in reg: raise Exception\n\n    dec = [reg[reg[::-1].index(text[0])]]\n\n    for i in range(1, len(text)):\n        tem = reg.index(text[i])\n        ad = abs(tem - 77) + reg.index(dec[-1])\n        if ad < 77: dec.append(reg[ad])\n        else: dec.append(reg[ad - 77])\n        \n    for i in range(1, len(dec), 2): dec[i] = dec[i].swapcase()\n    return ''.join(dec) \n\n\ndef encrypt(text):\n    if not text: return text\n    for i in text:\n        if i not in reg: raise Exception\n\n    a, enc = list(text), [reg[-(reg.index(text[0]) + 1)]]\n\n    for i in range(1, len(a), 2): a[i] = a[i].swapcase()\n\n    for i in range(1, len(a)):\n        ind = (reg.index(a[i-1]) - reg.index(a[i]))\n        enc.append(reg[ind])\n\n    return ''.join(enc)", "\ntemplate_chars_region = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,:;-?! '()$%&\"\ntemplate_chars_region += '\"'\n\ndef decrypt(encrypted_text):\n    result = ''\n    if(not encrypted_text or 0 == len(encrypted_text)):\n        return encrypted_text\n    template_length = len(template_chars_region)\n    first_original_char = template_chars_region[(template_length - template_chars_region.index(encrypted_text[0]) - 1)]\n    result = first_original_char\n    for index, single_char in enumerate(''.join(encrypted_text[1:])):\n        previous_template_index = template_chars_region.index(first_original_char)\n        difference_template_index = template_chars_region.index(single_char)\n        \n        result += template_chars_region[(previous_template_index - difference_template_index + template_length)%template_length]\n        first_original_char = result[-1]\n    result_copy = ''\n    for index, single_char in enumerate(result):\n        if(0 != index % 2):\n            if(single_char.islower()):\n                single_char = single_char.upper()\n            else:\n                single_char = single_char.lower()\n        result_copy += single_char\n    result = result_copy\n    return result\n\n\ndef encrypt(text):\n    result = ''\n    if(not text or 0 == len(text)):\n        return text\n    text_copy = ''\n    template_length = len(template_chars_region)\n    for index, single_char in enumerate(text):\n        char_template_index = template_chars_region.index(single_char)\n        if(0 != index % 2 and single_char.isalpha()):\n            if(single_char.islower()):\n                single_char = single_char.upper()\n            else:\n                single_char = single_char.lower()\n        text_copy += single_char\n    for index, char in enumerate(text_copy):\n        if(0 == index):\n            continue\n        previous_template_index = template_chars_region.index(text_copy[index - 1])\n        current_template_index = template_chars_region.index(text_copy[index])\n        result += template_chars_region[(previous_template_index - current_template_index + template_length)%template_length]\n    result = template_chars_region[template_length - template_chars_region.index(text[0]) - 1] + result\n    return result\n", "from string import ascii_uppercase, ascii_lowercase, digits\n\ns_Base = ascii_uppercase + ascii_lowercase + digits + '.,:;-?! \\'()$%&\"'\n\ndef decrypt(text):\n    if not text:\n        return text\n        \n    text = s_Base[-(s_Base.index(text[0]) + 1)] + text[1:]\n\n    for index, letter in enumerate(text[1:]):\n        x = s_Base.index(text[index])\n        y = s_Base.index(letter)\n        diff = x - y if x - y >= 0 else x - y + 77 \n        text = text[:index + 1] + s_Base[diff] + text[index + 2:]\n\n    return ''.join(letter.swapcase() if index % 2 != 0 else letter for index, letter in enumerate(text))\n\ndef encrypt(text): \n    if not text:\n        return text\n\n    for letter in text:\n        if letter not in s_Base:\n            raise ValueError\n    \n    text = ''.join(letter.swapcase() if index % 2 != 0 else letter for index, letter in enumerate(text))\n    \n    for index, letter in enumerate(text[1:]):\n        if index == 0:\n            x = s_Base.index(text[index])            \n        y = s_Base.index(letter)\n        \n        diff = x - y if x - y >= 0 else x - y + 77 \n        x = y\n        \n        text = text[:index + 1] + s_Base[diff] + text[index + 2:]\n  \n    text = s_Base[-(s_Base.index(text[0]) + 1)] + text[1:]\n\n    return text", "from string import ascii_lowercase as l, ascii_uppercase as u, digits as di\nencrypt=lambda s:doall(s)\ndecrypt=lambda s:doall(s,True)\ndef doall(s,d=False):\n    if not s:return s\n    all_char = list(u+l+di+\".,:;-?! '()$%&\" + '\"')\n    s = \"\".join([j.swapcase() if i & 1 else j for i, j in enumerate(s)]) if not d else s\n    new,well = [],[all_char[-1-all_char.index(s[0])]]\n    for i in range(len(s) - 1):\n        c_ = well[-1] if d else s[i]\n        t_ = s[i + 1]\n        diff = all_char.index(c_) - all_char.index(t_)\n        well.append(all_char[diff])\n        new.append(all_char[diff])\n    encode = all_char[-1 - all_char.index(s[0])] + \"\".join(new)\n    decode = \"\".join([j.swapcase()if i&1 else j for i,j in enumerate(\"\".join(well))])\n    return [encode,decode][d]", "import string\n\nregion = string.ascii_uppercase + string.ascii_lowercase + ''.join(str(x) for x in range(10)) + \".,:;-?! '()$%&\\\"\"\n\ndef switch_case(char):\n    return char.lower() if char.isupper() else char.upper() if char.islower() else char\n\ndef decrypt(encrypted_text):\n    if (encrypted_text is None) or (encrypted_text == ''): return encrypted_text\n    current_char = region[-region.index(encrypted_text[0]) - 1]\n    ret = current_char\n    for char in list(encrypted_text)[1:]:\n        ret += region[(region.index(ret[-1]) - region.index(char)) % 77]\n    ret = ''.join([switch_case(x) if i % 2 != 0 else x for i, x in enumerate(ret)])\n    return ret\n\n\ndef encrypt(text):\n    if (text is None) or (text == ''): return text\n    text = ''.join([switch_case(x) if i % 2 != 0 else x for i, x in enumerate(text)])\n    index_char, index_next = [region.index(char) for char in text], [region.index(char) for char in text[1:]]\n    text = region[-region.index(text[0]) - 1] + ''.join([region[(c - n) % 77] for c, n in zip(index_char, index_next)])\n    return text"]