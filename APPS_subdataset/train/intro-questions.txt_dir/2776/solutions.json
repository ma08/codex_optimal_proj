["def commas(num):\n    return \"{:,.3f}\".format(num).rstrip(\"0\").rstrip(\".\")", "def commas(num):\n    return f'{num:,.3f}'.rstrip('0').rstrip('.')", "import re\n\ndef commas(num):\n    if isinstance(num, int):\n        return format(num, ',')\n    else:\n        return re.sub('\\.?0+$', '', format(round(num, 3), ',.3f'))\n", "def commas(num):\n    i = round(num, 3)\n    f = int(i)\n    return f'{f if f==i else i:,}'", "def commas(s):\n    s = round(s,3)\n    return format([int(s),s][s!=int(s)],',')", "def commas(num):\n    number = float(num)\n    return f'{number:,.0f}' if number.is_integer() else f'{number:,.3f}'.rstrip('0').rstrip('.')\n    \n", "def commas(num): \n    n = format(round(num,3), \",\").split('.') \n    return n[0] + '.' + n[1] if len(n)>1 and n[1]!='0' else n[0]\n", "def commas(num):\n    return str('{:,.3f}'.format(num)).rstrip('0').rstrip('.')", "def commas(n):\n    try: n = round(n, 3)\n    except: print(\"Error\")\n    res = \"{:,}\".format(n)\n    print(res)\n    if res.endswith('.0'): # I mean...\n        return res[:-2]\n    return res", "from re import sub\ncommas = lambda num: (lambda num: sub(\"(\\d)(?=(\\d{3})+(?!\\d))\", \"\\g<1>,\", str(int(num) if num%1==0 else num)))(round(num,3))"]