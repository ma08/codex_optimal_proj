["from math import ceil\n\n\ndef new_avg(arr, newavg):\n    value = int(ceil((len(arr)+1) * newavg - sum(arr)))\n    if value < 0:\n        raise ValueError\n    \n    return value", "def new_avg(arr, newavg):\n    extra = newavg*float(len(arr) + 1) - sum(arr)\n    if extra < 0:\n        raise ValueError\n    return int(extra + 0.999)", "import math\ndef new_avg(arr, newavg):\n    result =  math.ceil(newavg*(len(arr)+1)-sum(arr))    \n    if result <= 0:\n        raise ValueError('error')\n    else:\n        return result", "from math import ceil\n\ndef new_avg(arr, newavg):\n    # calculate the required amount\n    required = ceil(newavg * (len(arr) + 1) - sum(arr))\n    # throw an error if non-positive\n    assert required > 0\n    # otherwise return result\n    return required", "from math import ceil\n\n\ndef new_avg(arr, average):\n    nums_sum = total_nums = 0\n    for a in arr:\n        nums_sum += a\n        total_nums += 1\n    donation = ceil((average * (total_nums + 1)) - nums_sum)\n    if donation > 0:\n        return donation\n    raise ValueError\n", "from math import *\ndef new_avg(arr, newavg):\n    v = ceil(newavg*(len(arr)+1) - sum(arr))\n    if v >= 0:\n        return v\n    else:\n        raise ValueError\n", "from math import ceil\n\ndef new_avg(lst, newavg):\n    nxt = newavg * (len(lst) + 1) - sum(lst)\n    if nxt <= 0:\n        raise ValueError\n    return ceil(nxt)", "import math\ndef new_avg(arr, newavg):\n    a = math.ceil(newavg * (len(arr) + 1) - sum(arr))\n    if a > 0:\n        return(a)\n    return Error", "import math\ndef new_avg(arr, newavg):\n    new_donation = newavg*(len(arr)+1)-sum(arr)\n    if new_donation <= 0: raise(\"Error\")\n    return math.ceil(new_donation)", "def new_avg(arr, newavg):\n    value = round(len(arr) * newavg - ( sum(arr)-newavg ) + .49 )\n    \n    if value < 0:\n        raise ValueError(\"Error expected\")\n    return value"]