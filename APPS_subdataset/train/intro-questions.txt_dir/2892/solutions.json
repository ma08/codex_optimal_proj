["import re\n\nCASES = [\n    ('snake', re.compile(r'\\A[a-z]+(_[a-z]+)+\\Z')),\n    ('kebab', re.compile(r'\\A[a-z]+(-[a-z]+)+\\Z')),\n    ('camel', re.compile(r'\\A[a-z]+([A-Z][a-z]*)+\\Z')),\n    ('none', re.compile(r'')),\n]\n\ndef case_id(c_str):\n    for case, pattern in CASES:\n        if pattern.match(c_str): return case", "import re\n\ndef case_id(c_str):\n    if re.match(r'^([a-z]+\\-)+[a-z]+$', c_str):\n        return 'kebab'\n    if re.match(r'^([a-z]+\\_)+[a-z]+$', c_str):\n        return 'snake'\n    if re.match(r'^([a-z]+[A-Z])+[a-z]+$', c_str):\n        return 'camel'\n    return 'none'", "def case_id(stg):\n    print(stg)\n    if \"-\" in stg and \"_\" not in stg and all(w.islower() for w in stg.split(\"-\")):\n        return \"kebab\"\n    if \"_\" in stg and \"-\" not in stg and all(w.islower() for w in stg.split(\"_\")):\n        return \"snake\"\n    if stg.isalpha() and any(c.isupper() for c in stg):\n        return \"camel\"\n    return \"none\"", "import re\ndef case_id(c_str):\n    if re.match(r'[a-z]+(-[a-z]+)+$', c_str):\n        return \"kebab\" \n    if re.match(r'[a-z]+(_[a-z]+)+$', c_str):\n        return \"snake\"\n    if re.match(r'[a-z]+([A-Z][a-z]+)+$', c_str): \n        return \"camel\"\n    return 'none'\n", "from string import (ascii_lowercase as ASCII_LOW,\n                    ascii_letters as ASCII_LET)\n\ndef is_kebab_case(str_):\n    for char in str_:\n        if char not in (ASCII_LOW + '-'):\n            return False\n    if '' in str_.split('-'):\n        return False\n    return True\n\ndef is_camel_case(str_):\n    for char in str_:\n        if char not in ASCII_LET:\n            return False\n    if str_[0].isupper():\n        return False\n    return True\n    \ndef is_snake_case(str_):\n    for char in str_:\n        if char not in (ASCII_LOW + '_'):\n            return False\n    if '' in str_.split('_'):\n        return False\n    return True\n\ndef case_id(c_str):\n    for func in (is_kebab_case, is_camel_case, is_snake_case):\n        if func(c_str): \n            return {'is_kebab_case': 'kebab',\n                    'is_camel_case': 'camel',\n                    'is_snake_case': 'snake'}[func.__name__]\n    return 'none'", "def case_id(s):\n    if '--' in s or '_' in s and '-' in s:\n        return 'none'\n    if s.replace('_','').replace('-','').islower():\n        if '-' in s: return 'kebab'\n        if '_' in s: return 'snake'\n    if '-' in s or '_' in s: \n        return 'none'\n    return 'camel'", "def case_id(c_str):\n    if '--' in c_str or '_' in c_str and '-' in c_str:\n        return \"none\"\n    elif c_str.replace('_','').replace('-','').islower():\n        if '-' in c_str:\n            return \"kebab\"\n        elif '_' in c_str:\n            return \"snake\"\n    elif '-' in c_str or '_' in c_str:\n        return \"none\"\n    return \"camel\"", "def is_kebab(s):\n    arr = s.split('-')\n    res = [part.islower() and '_' not in part and part != '' for part in arr]\n    return all(res)\n    \ndef is_snake(s):\n    arr = s.split('_')\n    res = [part.islower() and '-' not in part and part != '' for part in arr]\n    return all(res)\n\ndef is_camel(s):\n    return '-' not in s and '_' not in s and not s.islower()\n    \ndef case_id(c_str):\n    if is_kebab(c_str): return \"kebab\"\n    if is_snake(c_str): return \"snake\"\n    if is_camel(c_str): return \"camel\"\n    return \"none\""]