["def robot_transfer(matrix, k):\n    c = 0\n    for l, i in enumerate(matrix):\n        for o, j in enumerate(i):\n            x, y = j.split(\",\")\n            current,count,new = [l, o],0,[]\n            while count < k and current != new:\n                new = [int(x), int(y)] ; x, y = matrix[int(x)][int(y)].split(\",\") ; count += 1\n            if current == new and count == k : c += 1\n    return c ", "def robot_transfer(matrix, k):\n    res, seen = 0, set()\n    for i in range(len(matrix)):\n        for j in range(len(matrix)):\n            if (i, j) in seen: continue\n            x, y, S = i, j, {(i, j)}\n            for _ in range(k):\n                x, y = map(int, matrix[x][y].split(','))\n                S.add((x, y))\n            if (x, y) == (i, j) and len(S) == k:\n                res += k\n                seen |= S\n    return res", "def f(matrix, k, i, j):\n    i0, j0 = i, j\n    for n in range(1, k+1):\n        i, j = matrix[i][j]\n        if i == i0 and j == j0:\n            return n == k\n    return False\n\ndef robot_transfer(matrix, k):\n    matrix = [\n        [tuple(map(int, x.split(','))) for x in row]\n        for row in matrix\n    ]\n    return sum(\n        f(matrix, k, i, j)\n        for i, row in enumerate(matrix)\n        for j, x in enumerate(row)\n    )", "def robot_transfer(matrix, k):\n    result = 0\n    for i in range(len(matrix[0])):\n        for j in range(len(matrix)):\n            x, y, back = i, j, 0\n            for _ in range(k):\n                x, y = (int(n) for n in matrix[x][y].split(\",\"))\n                back += ((i, j) == (x, y))\n            result += ((i, j) == (x, y) and back == 1)\n    return result\n\n", "def robot_transfer(matrix, k):\n    cycles = 0\n    for x, l in enumerate(matrix):\n        for y, _ in enumerate(l):\n            u, v = x, y\n            for n in range(k):\n                u, v = map(int, matrix[u][v].split(','))\n                if (x, y) == (u, v):\n                    cycles += n == k-1\n                    break\n    return cycles", "def robot_transfer(matrix, k):\n    count = 0\n    for start_y, row in enumerate(matrix):\n        for start_x, point in enumerate(row):\n            y, x = int(point[0]), int(point[2])\n            for t in range(k-1):\n                y, x = int(matrix[y][x][0]), int(matrix[y][x][2])\n                if (y, x) == (start_y, start_x):\n                    count += (t+2 == k)\n                    break        \n    return count\n", "def robot_transfer(matrix, k):\n    r=0\n    n=len(matrix)\n    for i in range(n):\n        for j in range(n):\n            x,y=i,j\n            for step in range(k):\n                x,y=map(int,matrix[x][y].split(','))\n                if x==i and y==j:\n                    break\n            if x==i and y==j and step==k-1:\n                r+=1\n    return r", "def robot_transfer(matrix, k):\n  res = []\n  for r, rows in enumerate(matrix):\n      for c,point in enumerate(rows):\n          kk = 1\n          while kk <= k:\n              t = list(map(int, point.split(',')))\n              print(t)\n              point = matrix[t[0]][t[1]]\n              kk += 1\n              if list(map(int, point.split(','))) == [r, c]: break\n          if kk == k and list(map(int, point.split(','))) == [r, c]:\n              res.append(1)\n  return sum(res)", "def floyd(matrix, row, col):\n    def f(row, col):\n        return list(map(int, matrix[row][col].split(',')))\n    x0 = [row,col]\n    tortoise = f(*x0)\n    hare = f(*f(*x0))\n    while tortoise != hare:\n        tortoise = f(*tortoise)\n        hare = f(*f(*hare))\n  \n    mu = 0\n    tortoise = x0\n    while tortoise != hare:\n        tortoise = f(*tortoise)\n        hare = f(*hare)\n        mu += 1\n        \n    lam = 1\n    hare = f(*tortoise)\n    while tortoise != hare:\n        hare = f(*hare)\n        lam += 1\n    \n    return lam if mu==0 else -1\n\ndef robot_transfer(matrix, k):\n    SIZE = len(matrix)\n    return sum(1 for row in range(SIZE) for col in range(SIZE) if floyd(matrix, row, col)==k)\n                \n                \n", "def robot_transfer(matrix, k):\n  N=len(matrix)\n  mat=[[0]*N for i in range(N)]\n  for i in range(N):\n      for j in range(N):\n          mat[i][j]=(int(matrix[i][j][0]),int(matrix[i][j][2]))\n  tot=0\n  for i in range(N):\n      for j in range(N):\n          y=(i,j)\n          for kk in range(k):\n              y=mat[y[0]][y[1]]\n              if y==(i,j) and kk<k-1: \n                  break\n          if y==(i,j) and kk==k-1: tot+=1\n  return tot"]