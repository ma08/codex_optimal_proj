["def solve(st):\n    return all(True if ord(x) - ord(y) in [-2, 0, 2] else False for x, y in zip(st, st[::-1]))\n", "def solve(st):\n    return all(abs(ord(x) - ord(y)) in {0, 2} for x, y in zip(st, st[::-1]))", "def solve(stg):\n    return all(ord(x) - ord(y) in {-2, 0, 2} for x, y in zip(stg, stg[::-1]))", "solve=lambda s:all(abs(ord(s[i])-ord(s[-i-1]))in[0,2]for i in range(len(s)//2))", "def solve(stg):\n    return all(abs(abs(ord(x) - ord(y)) - 1) == 1 for x, y in zip(stg, stg[::-1]))\n", "def solve(st):\n    return all(abs(ord(x) - ord(y)) in [0, 2] for x, y in zip(st, st[::-1]))", "def solve(st):\n    print(st)\n    return all(ord(x) - ord(y) in [-2,0,2] for x, y in zip(st, st[::-1]))", "def solve(st):\n    return [all(ord(x) - ord(y) in [2,0,-2] for x, y in zip(st, st[::-1]))][0]", "solve = lambda s: all(abs(ord(x) - ord(y)) in (0, 2) for x, y in zip(s, s[::-1]))", "# dafuck was up with that [all()][0]? ._.\ndef solve(st):\n    return all(abs(ord(x) - ord(y)) in (0, 2) for x,y in zip(st, st[::-1]))"]