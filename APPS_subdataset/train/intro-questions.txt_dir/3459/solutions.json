["from itertools import combinations\n\ndef solve(n, k):\n    return ''.join(min(combinations(str(n), len(str(n))-k)))", "from itertools import combinations\n\ndef solve(n,k):\n    return min((''.join(c) for c in combinations(str(n), len(str(n))-k)), key=int)", "from itertools import combinations as c\ndef solve(n,k):\n    b=len(str(n))-k\n    l=[''.join(i) for i in c(str(n),b)]\n    return min(l)", "def solve(n, k):\n    s = str(n)\n    for _ in range(k):\n        i = next(i for i in range(len(s)) if i == len(s)-1 or s[i] > s[i+1])\n        s = s[:i] + s[i+1:]\n    return s", "def solve(n, k):\n    s = str(n)\n    result = ''\n    for _ in range(len(s)-k):\n        i = min(range(k+1), key=s.__getitem__)\n        result += s[i]\n        k -= i\n        s = s[i+1:]\n    return result", "from itertools import combinations\n\ndef solve(n, k):\n    s = str(n)\n    return ''.join(min(xs for xs in combinations(s, len(s)-k)))", "def solve(n,k):\n    n = str(n)\n    number = ''\n    while k < len(n):\n        m = min([(int(n[i]), i) for i in range(k+1)])\n        number += str(m[0])    \n        n = n[m[1]+1:]\n        k -= m[1]\n    return number", "def solve(n, k):\n    s = str(n)\n    Slen = len(s)\n    removed = False\n    largestIndex = 0\n    if (Slen < 2 and k > 1) or k>Slen:\n        return '0'\n    i = 1\n    for j in range(k):\n        while i < len(s):\n            if s[i] < s[i-1]:\n                s = s[:i-1]+s[i:]\n                removed = True\n                break\n            i += 1\n        i = 1\n        if not removed:\n            largestIndex = 0\n            j = 0\n            while not removed and j < len(s):\n                if int(s[j]) > int(s[largestIndex]):\n                    largestIndex = j\n                j += 1\n            s = s[:j-1] + s[j:]\n        removed = False\n    return s", "def solve(n,k):\n    s=''\n    for i in str(n):\n        if k==0:\n            s+=i\n        else:\n            while s and s[-1]>i and k:\n                k-=1\n                s=s[:-1]   \n            s+=i\n            p=i\n    return s[:-k] if k else s ", "from itertools import combinations\n\ndef solve(n, k):\n    s = str(n)\n    return ''.join(min(combinations(s, len(s) - k)))"]