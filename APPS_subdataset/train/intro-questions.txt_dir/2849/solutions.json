["def peak(arr):\n    for i, val in enumerate(arr):\n        if sum(arr[:i]) == sum(arr[i+1:]):\n            return i\n    return -1", "def peak(arr):\n    for i in range(len(arr)):\n        if sum(arr[:i]) == sum(arr[i+1:]): return i\n    return -1", "def peak(arr):\n    sl, sr = 0, sum(arr)\n    for i,v in enumerate(arr):\n        sr -= v\n        if sr == sl: return i\n        elif sl > sr: return -1\n        sl += v\n", "def peak(arr):\n    for i,n in enumerate(arr):\n        if sum(arr[:i]) == sum(arr[i+1:]):\n            return i\n    else:\n        return -1\n", "def peak(arr):\n    r = sum(arr)-arr[0]\n    l = 0\n    if l == r: return 0\n    for i in range(len(arr)-1):\n        l += arr[i]\n        r -= arr[i+1]\n        if l == r: return i+1\n    return -1", "def peak(arr):\n    l=[i for i in range(len(arr)-1) if sum(arr[:i])==sum(arr[i+1:])]\n    return l[0] if l else -1", "def peak(arr):\n  return next(iter(i for i in range(len(arr)) if sum(arr[:i]) == sum(arr[i+1:])), -1)", "from itertools import accumulate\ndef peak(arr):\n    for idx,(a,b) in enumerate(zip(list(accumulate(arr))[:-2],list(accumulate(reversed(arr)))[-3::-1])):\n        if a == b: return idx+1\n    \n    return -1", "peak=lambda a:sum(sum(a[y+1:])==sum(a[:y])and y for y,_ in enumerate(a))or-1", "def peak(arr):\n    left_sum, right_sum = [0], [0]\n    for n in arr: left_sum.append(n + left_sum[-1])\n    for n in arr[::-1]: right_sum.append(n + right_sum[-1])\n    for i in range(len(arr)):\n        if right_sum[len(arr)-1-i] == left_sum[i]: return i\n    return -1"]