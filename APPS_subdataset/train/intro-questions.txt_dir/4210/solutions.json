["def process_data(data):\n    r = 1\n    for d in data:\n        r *= d[0] - d[1]\n    return r", "from functools import reduce\nfrom itertools import starmap\nfrom operator import mul, sub\n\ndef process_data(data):\n    return reduce(mul, starmap(sub, data))", "def process_data(data):\n    product = 1\n    \n    for tuple in data:\n        product *= tuple[0] - tuple[1]\n        \n    return product\n  \n", "def process_data(data):\n    from numpy import prod, sum\n    return prod([el1 - el2 for el1, el2 in data])\n", "def process_data(data):\n    result=1\n    for item in data:\n        result*= item[0]-item[1]\n    return result", "process_data = lambda d, reduce=__import__(\"functools\").reduce: reduce(int.__mul__, (x - y for x, y in d))", "from operator import mul, sub\nfrom functools import reduce\n\ndef process_data(data):\n    return reduce(mul, [reduce(sub,x) for x in data])", "from functools import reduce\n\ndef process_data(data):\n    return reduce(lambda m, n: m * n, [(a - b) for a, b in data], 1)", "def process_data(data):\n    output = 1\n    for sub_list in data:\n        output *= sub_list[0] - sub_list[1]\n    return output", "def process_data(data):\n    array=[]\n    \n    for n in data:\n      array_element=n[0]-n[1]\n      array.append(array_element)\n\n    c=1\n    for d in array:\n     c*=d\n  \n    return c"]