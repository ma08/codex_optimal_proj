["def leaderboard_climb(arr, kara):\n    scores = sorted(set(arr), reverse=True)\n    position = len(scores)\n    ranks = []\n    \n    for checkpoint in kara:\n        while position >= 1 and checkpoint >= scores[position - 1]:\n            position -= 1\n        ranks.append(position + 1)    \n    \n    return ranks", "import numpy as np\ndef leaderboard_climb(arr, kara):\n    a = np.unique(arr)\n    return list(len(a) + 1 - np.searchsorted(a, kara, side='right'))", "#Previously saved by accident before removing debug or refectoring.Doh!\nimport bisect\ndef leaderboard_climb(arr, kara):\n    arr=sorted(list(set(arr)))\n    return [(len(arr) + 1 -bisect.bisect_right(arr,score) ) for score in kara]", "leaderboard_climb=lambda A,K:(lambda S:[len(S)-__import__('bisect').bisect(S,i)+1for i in K])(sorted(set(A)))", "from bisect import bisect\ndef leaderboard_climb(arr, kara):\n    scoreboard = sorted(set(arr))\n    scores = len(scoreboard)\n    return [scores - bisect(scoreboard, i) + 1 for i in kara] \n    \n", "def leaderboard_climb(scores, kara):\n    answer = []\n    kara = kara[::-1]\n    rank, iScore, lastScore = 1, 0, scores[0]\n    l = len(scores)\n    for karaScore in kara:\n        while True:\n            if karaScore >= lastScore or iScore >= l:\n                answer.append(rank)\n                break\n            iScore += 1\n            if iScore < l:\n                score = scores[iScore]\n                if lastScore != score:\n                    lastScore = score\n                    rank += 1\n            else:\n                rank += 1\n    return answer[::-1]", "import numpy as np\n\ndef leaderboard_climb(arr, kara):\n    uniq_scores = np.unique(arr)\n    l = len(uniq_scores) + 1\n    t = l - np.searchsorted(uniq_scores, kara, side='right')\n    return t.tolist()", "from bisect import bisect_left\n\ndef leaderboard_climb(arr, kara):\n    arr.append(float('inf'))\n    arr = sorted([-a for a in set(arr)])\n    result = [bisect_left(arr, -k) for k in kara]\n    return result", "from bisect import bisect_left\n\ndef leaderboard_climb(arr, kara):\n    result = []\n    arr.append(float('inf'))\n    arr = sorted([-a for a in set(arr)])\n    for k in kara:\n        i = bisect_left(arr, -k)\n        result.append(i)\n    return result", "def leaderboard_climb(arr, kara):\n    arr = sorted(set(arr),reverse=True)\n    rank = []\n    pos = len(arr)\n    \n    for x in kara:\n        while pos>=1 and x >= arr[pos-1]:\n            pos -= 1\n        rank.append(pos+1)\n    return rank\n        \n        \n"]