["from statistics import median", "def median(arr):\n    arr.sort()\n    return (arr[(len(arr) - 1)//2] + arr[(len(arr))//2])/2", "from numpy import median", "import numpy as np\ndef median(arr):\n    return np.median(arr) if len(arr)>0 else None\n", "from random import choice\n\ndef median(lst):\n    return quickselect(lst, len(lst) // 2, len(lst) % 2 == 0)\n\ndef quickselect(lst, nth, even):\n    # O(n) but what a pain to get right.\n    pivot = choice(lst)\n    smaller = [n for n in lst if n < pivot]\n    n_equal = sum(n == pivot for n in lst)\n    bigger = [n for n in lst if n > pivot]\n    if even:\n        if len(smaller) > nth:\n            return quickselect(smaller, nth, True)\n        elif len(smaller) == nth:\n            return (pivot + quickselect(smaller, nth - 1, False)) / 2\n        elif len(smaller) + n_equal > nth:\n            return pivot\n        elif len(smaller) + n_equal == nth:\n            return (pivot + quickselect(bigger, nth - len(smaller) - n_equal, False)) / 2\n        else:\n            return quickselect(bigger, nth - len(smaller) - n_equal, True)\n    else:\n        if len(smaller) > nth:\n            return quickselect(smaller, nth, False)\n        elif len(smaller) + n_equal > nth:\n            return pivot\n        else:\n            return quickselect(bigger, nth - len(smaller) - n_equal, False)", "from numpy import median as median_\n\ndef median(arr):\n    return median_(arr)", "import numpy\ndef median(A):\n    return None if len(A)<1 else numpy.median(A)", "import numpy as np\ndef median(arr):\n    return np.median(arr)"]