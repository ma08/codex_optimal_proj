["import re\n\ndef double_check(str):\n    return bool(re.search(r\"(.)\\1\", str.lower()))", "def double_check(str):\n    str = str.lower()\n    c1 = ''\n    for c in str:\n      if c == c1:\n        return True\n      c1 = c\n    return False", "from itertools import groupby\n\n\ndef double_check(s):\n    return any(sum(1 for _ in g) == 2 for _, g in groupby(s.lower()))\n", "import re\n\ndef double_check(s):\n    return bool(re.search(r'(.)\\1', s.lower()))", "def double_check(inp):\n    inp = inp.lower()\n    return any(i == j for i, j in zip(inp[:-1], inp[1:]))", "double_check = lambda s: bool(__import__('re').search(r'(?i)(.)\\1',s))", "def double_check(strng):\n    s = strng.upper()\n    return any([s[i] == s[i+1] for i in range(len(strng) - 1)])", "import re\n\ndef double_check(strng):\n    return bool(re.search(r\"(.)\\1\", strng, re.IGNORECASE))", "def double_check(strng):\n    for idx in range(len(strng)-1):\n        if strng[idx].lower() == strng[idx+1].lower():\n            return True\n    return False", "def double_check(strng):\n    c_ = None\n    for c in strng.upper():\n        if c == c_: return True\n        c_ = c\n    return False", "import re\ndef double_check(s):\n    return re.search(r'(?i)(.)\\1', s) != None", "def double_check(strng):\n    strng = strng.lower()\n    l = []\n    for x in strng:\n            if x*2 in strng:\n                    l.append(True)\n    return bool(l)", "def double_check(s):\n    return any(prev_val.lower() == next_val.lower() for prev_val, next_val in zip(s, s[1:]))", "def double_check(strng):\n    return bool(sum([strng.lower()[i-1] == strng.lower()[i] for i in range(1,len(strng))]))", "double_check=lambda strng: any(x.lower()==strng[i+1].lower() for i,x in enumerate(strng[:-1]))", "import re\ndef double_check(strng):\n    return True if re.findall(r\"(.)\\1\", strng.lower()) else False", "def double_check(strng):\n    for i in set(strng):\n        if i*2 in strng.lower(): return True\n    return False", "import re\ndef double_check(strng):\n    pattern = re.compile(r'(.)\\1', re.IGNORECASE)\n    return bool(re.search(pattern, strng))", "def double_check(strng):\n    prev_char = strng[0]\n    for char in strng[1:].lower():\n        if char == prev_char:\n            return True\n        prev_char = char\n    return False", "def double_check(strng):\n    for i in set(strng.lower()):\n        if strng.lower().count(i*2)>=1:\n            return True\n    return False\n"]