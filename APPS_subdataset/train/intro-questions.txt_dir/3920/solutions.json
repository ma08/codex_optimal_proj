["def hamming_distance(a, b):\n    return bin(a ^ b).count('1')", "from itertools import zip_longest\ndef hamming_distance(a, b):\n    return(sum(x != y for x,y in zip_longest(*[bin(x)[-1:1:-1] for x in (a,b)],fillvalue='0')))\n", "def hamming_distance(a, b):\n    return sum(int(i) for i in bin(a^b)[2:])", "def hamming_distance(a, b):\n    return sum(x != y for x, y in zip(format(a, \"020b\"), format(b, \"020b\")))", "def hamming_distance(a, b):\n    p = len(bin(max(a, b)))\n    return sum(i != j for i, j in zip(bin(a)[2: ].rjust(p, '0'), bin(b)[2:].rjust(p, '0')))", "hamming_distance=lambda a,b:bin(a^b).count('1')", "def hamming_distance(a, b):\n    A, B = [], []\n    a1 = str((bin(a)[2:]))\n    print(a1)\n    [A.append(i) for i in a1]\n    #print(A)\n    b1 = str((bin(b)[2:]))\n    print(b1)\n    [B.append(i) for i in b1]\n    distance = 0\n    \n    print(A)\n    \n    #Need to make the binary strings the same length and then this will be solved \n    \n    if len(A) < len(B):\n        zeros = ['0'] * (len(B) - len(A))\n        A = zeros + A \n    elif len(A) > len(B):\n        zeros = ['0'] * (len(A) - len(B))\n        B = zeros + B \n    else: \n        pass\n        \n        \n    print( A)\n    \n    for i in range(0, len(A)):\n        if A[i] != B[i]:\n            distance += 1\n    return distance", "def hamming_distance(a, b):\n    c = \"\"\n    d = \"\"\n    c = bin(a)[2:]\n    d = bin(b)[2:]\n    for i in range(32 - len(c)):\n        c = \"0\" + c\n    for i in range(32 - len(d)):\n        d = \"0\" + d\n    count = 0\n    for i in range(32):\n        if c[i] != d[i]:\n            count += 1\n    return count\n", "def hamming_distance(a, b):\n    total = 0\n    a = list(bin(a)[2:])\n    b = list(bin(b)[2:])\n    \n    if len(a) > len(b):\n        for i in range(len(a)-len(b)):\n            b.insert(0, '0')\n    elif len(b) > len(a):\n        for i in range(len(b)-len(a)):\n            a.insert(0, '0')\n            \n    for index in range(len(a)):\n        if a[index] != b[index]:\n            total += 1\n            \n    \n    return total"]