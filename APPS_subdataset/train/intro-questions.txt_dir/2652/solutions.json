["def count_squares(lines):\n    def s(i, j, z):\n        try:\n            return (\n                '+' == lines[i+z][j] == lines[i][j+z] == lines[i+z][j+z]\n                and all(lines[i][c]   in '-+' for c in range(j+1, j+z))\n                and all(lines[i+z][c] in '-+' for c in range(j+1, j+z))\n                and all(lines[r][j]   in '|+' for r in range(i+1, i+z))\n                and all(lines[r][j+z] in '|+' for r in range(i+1, i+z))\n            )\n        except IndexError:\n            return 0\n    return sum(\n        x == '+' and sum(s(i, j, z) for z in range(1, min(len(lines)-i, len(row)-j)))\n        for i, row in enumerate(lines[:-1])\n        for j, x in enumerate(row[:-1])\n    )\n", "import re\ndef count_squares(lines):\n    h, w = len(lines), max(map(len, lines))\n    grid = \"\\t\".join(line.ljust(w) for line in lines)\n\n    return sum(\n        len(re.findall(r\"(?=\\+[-+]{%d}\\+.{%d}(?:[|+].{%d}[|+].{%d}){%d}\\+[-+]{%d}\\+)\"\n                        % (i, w+1-i-2, i, w+1-i-2, i, i), grid))\n        for i in range(0, min(w,h)-1)\n    )", "def count_squares(img):\n  h,w,r=len(img),max([len(s) for s in img]),0\n  img=[s+\" \"*(w-len(s)) for s in img]\n  for i in range(h): \n    for j in range(w):\n      if img[i][j]==\"+\":\n        for k in range(1,min(h-i,w-j)):\n          if img[i+k][j+k]==\"+\" and img[i+k][j]==\"+\" and img[i][j+k]==\"+\":\n            s1=img[i][j+1:j+k]+img[i+k][j+1:j+k]\n            s2=\"\".join([x[j] for x in img])[i+1:i+k]+\"\".join([x[j+k] for x in img])[i+1:i+k]\n            if not (\" \" in s1+s2 or \"|\" in s1 or \"-\" in s2): r+=1\n  return r", "def count_squares(lines):\n    print('\\n'.join(lines))\n    tot=0\n    for l in range(len(lines)):\n        for i in range(len(lines[l])-1):\n            if lines[l][i]!='+': continue\n            for j in range(i+1,len(lines[l])):\n                if lines[l][j]=='+':\n                    try:\n                        n=j-i\n                        if lines[l+n][i]=='+'==lines[l+n][j] \\\n                        and all(lines[m][i] not in ' -' for m in range(l+1,l+n)) \\\n                        and all(lines[m][j] not in' -' for m in range(l+1,l+n)) \\\n                        and all(lines[l][m] not in ' |' for m in range(i+1,j)) \\\n                        and all(lines[l+n][m] not in ' |' for m in range(i+1,j)):\n                            tot+=1\n                    except:\n                        pass\n    return tot", "import re\ndef count_squares(shapes):\n    squares = 0\n    for i, j in enumerate(shapes):\n        ind = [k for k, l in enumerate(j) if l == '+']\n        for o in range(len(ind)):\n            for p in range(o + 1, len(ind)):\n                \n                k, l = ind[o], ind[p]\n                width = l - k\n                if i + width >= len(shapes): continue\n                \n                upper_line = j[k:l + 1]\n                left_line = ''.join([n[k] if k < len(n) else ' ' for n in shapes[i:i + width + 1]])\n                right_line = ''.join([n[l] if l < len(n) else ' ' for n in shapes[i:i + width + 1]])\n                bottom_line = shapes[i + width][k:l + 1]\n              \n                if all(re.fullmatch(r'\\+[{}]*\\+'.format(ch), seq) for seq, ch in \\\n                            zip([upper_line, left_line, right_line, bottom_line], '\\+\\- |\\+ |\\+ \\-\\+'.split())):\n                    squares += 1\n    return squares", "from itertools import combinations\n\ndef count_squares(lines):\n    def is_valid(x, y, size):\n        if any([chars.get((nx, y), '@') not in '-+' or chars.get((nx, y+size), '@') not in '-+' for nx in range(x+1, x+size)]):\n            return False\n        if any([chars.get((x, ny), '@') not in '|+' or chars.get((x+size, ny), '@') not in '|+' for ny in range(y+1, y+size)]):\n            return False\n        return True\n\n    chars, corners = dict(), [[] for _ in range(len(lines))]\n    for y, line in enumerate(lines):\n        for x, ch in enumerate(line):\n            chars[(x, y)] = ch\n            if ch == '+':\n                corners[y].append(x)\n    return sum(is_valid(tl, y, tr - tl) for y, co in enumerate(corners) for tl, tr in combinations(co, 2)\n               if chars.get((tl, y + tr - tl)) == '+' and chars.get((tr, y + tr - tl)) == '+')", "from itertools import count\n\n# Optimization, what's that?\ndef count_squares(lines):\n    def check(i, j, k):\n        return (lines[i+k][j] == lines[i][j+k] == lines[i+k][j+k] == '+'\n            and all(lines[x][j] in \"|+\" for x in range(i+1, i+k))\n            and all(lines[i][x] in \"-+\" for x in range(j+1, j+k))\n            and all(lines[x][j+k] in \"|+\" for x in range(i+1, i+k))\n            and all(lines[i+k][x] in \"-+\" for x in range(j+1, j+k)))\n    res = 0\n    for i,row in enumerate(lines):\n        for j,c in enumerate(row):\n            if c == '+':\n                for k in count(1):\n                    try: res += check(i, j, k)\n                    except: break\n    return res", "def isInvalid(lines, y, x, chars):\n    if y >= len(lines) or x >= len(lines[y]):\n        return True\n    return lines[y][x] not in chars\n\ndef isSquare(lines, x, y, size):\n    if isInvalid(lines, y, x, '+') or \\\n       isInvalid(lines, y+size, x, '+') or \\\n       isInvalid(lines, y, x+size, '+') or \\\n       isInvalid(lines, y+size, x+size, '+'):\n      return False\n    for s in range(size + 1):\n        if isInvalid(lines, y, x+s, '+-') or \\\n           isInvalid(lines, y+s, x, '+|') or \\\n           isInvalid(lines, y+size, x+s, '+-') or \\\n           isInvalid(lines, y+s, x+size, '+|'):\n            return False\n    return True\n\ndef count_squares(lines):\n    count = 0\n    for y in range(len(lines)):\n        for x in range(len(lines[y])):\n            for s in range(1, min(len(lines)-y, len(lines[y])-x)):\n                if isSquare(lines, x, y, s):\n                    count += 1\n    return count", "def count_squares(lines):\n    \n    sides = {(r, c):v for r, row in enumerate(lines) for c, v in enumerate(row) if v in '+-|'}\n    nodes = sorted(k for k, v in sides.items() if v == '+')[::-1]\n\n    sideh = lambda r, c, target: all(sides.get((r, c + cc), ' ') in '+-' for cc in range(target - c))\n    sidev = lambda r, c, target: all(sides.get((r + rr, c), ' ') in '+|' for rr in range(target - r))\n\n    t = 0\n    while nodes:\n        r, c = nodes.pop()\n        for cc in [p[1] for p in nodes if r == p[0] and sideh(r, c, p[1])]:\n            rr = r + cc - c\n            if (rr, c) in nodes and (rr, cc) in nodes and sidev(r, c, rr) and sidev(r, cc, rr) and sideh(rr, c, cc):\n                t += 1\n    return t", "def count_squares(lines):\n    def is_topleft(i, j):\n        b = lines[i][j] == '+'\n        b = b and i+1 < len(lines) and j < len(lines[i+1]) and lines[i+1][j] in '|+' \n        b = b and j+1 < len(lines[i]) and lines[i][j+1] in '-+'\n        return b\n    def is_square(i, j, k):\n        b = i + k < len(lines) and all(j + k < len(lines[r]) for r in range(i, i+k+1))\n        b = b and lines[i][j] == lines[i][j+k] == lines[i+k][j] == lines[i+k][j+k] == '+'\n        if k > 1:\n            b = b and all(lines[r][j] in '+|' and lines[r][j+k] in '+|' for r in range(i, i+k+1))\n            b = b and all(lines[i][c] in '+-' and lines[i+k][c] in '+-'for c in range(j, j+k+1))\n        return b\n    cnt = 0\n    for i in range(len(lines)-1):\n        for j in range(len(lines[i])-1):\n            if is_topleft(i, j):\n                for k in range(1, len(lines[i]) - j):\n                    if is_square(i, j, k):\n                        cnt += 1\n    return cnt"]