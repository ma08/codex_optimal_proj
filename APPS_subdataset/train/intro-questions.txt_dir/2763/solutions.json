["import math\ndef sol_equa(n):\n    res = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            j = n // i\n            if (i + j) % 2 == 0 and (j - i) % 4 == 0:\n                x = (i + j) // 2\n                y = (j - i) // 4\n                res.append([x, y])\n            \n    return res\n", "def sol_equa(n):\n    return [[(n/i + i)/2,(n/i - i)/4] for i in range(1, int(n ** 0.5) + 1)\n    if n % i == 0 and (n/i + i) % 2 ==0 and (n/i - i) % 4 ==0]\n", "from math import sqrt\n\ndef factors(n):\n    f = []\n    for x in range(1, int(sqrt(n)) + 1):\n        if n % x == 0:\n            f.append([x, int(n / x)])\n    return f\n\ndef sol_equa(n):\n    ff = factors(n)\n    res = []\n    for f in ff:\n        m = m = f[0] + f[1]\n        n = f[1] - f[0]\n        if (m % 2 == 0) and (n % 4 == 0):\n            res.append([int(m / 2), int(n / 4)])\n    return res", "def sol_equa(n):\n    res = []\n    for a in range(1, int(n**0.5 + 1) + 1 ):\n        if n % a == 0:\n            b = n / a\n            if (a + b) % 2 == 0 and (b - a) % 4 == 0:\n                res.append( [(a+b)/2, (b-a)/4] )\n    return res\n", "def sol_equa(n):\n  # x^2 - 4y^2 = n -> return [x, y]\n  # Factor to n = (x+2y)(x-2y)\n  solutions, i = [], 1\n  while i*i <= n:\n    if n % i == 0: # Factor found: (j=n//i: so: i*j = n)\n      j = n // i\n      if (i+j) % 2 == 0:  # (x + 2y)+(x - 2y)    = (2x)\n        # Fits requirements for x!!!\n        x = (i+j)//2      # (i      + j )    / 2 =  x\n        v, V = i-x, j-x   # (i  - x = 2y) and (j - x = -2y)\n        if v % 2 == 0 and v == V * -1:\n          # Fits requirements for y!!!\n          y = abs(v//2)\n          solutions.append([x, y])\n    i += 1\n  return solutions\n", "import math\ndef sol_equa(n):\n    # your code\n    # x - 2y ...f1\n    # x + 2y ...f2\n    # A = sum(f1, f2) = 2x divisible by 2\n    # B = diff(f1, f2) = 4y divisible by 4\n    result = []\n    for i in range(1, int(math.ceil(math.sqrt(n))) + 1):\n        if n % i == 0:\n            A = i + n/i\n            B = abs(i - n/i)\n            if A % 2 == 0 and B % 4 == 0:\n                result.append([A/2, B/4])\n    return result\n", "#x ^ 2 - 4 * y ^ 2 = A\nimport math\ndef sol_equa(n):\n    ls = []\n    for i in range(1,int(math.sqrt(n))+1):\n        if n%i == 0 :\n            ls.append(i)\n    ans = []\n    for root in ls:\n        x = int(( (root + int(n/root)) / 2))\n        y = int((max(root,int(n/root)) - x) / 2)\n        if int(x +  2 * y) * (x - 2 * y)  == n:\n            ans.append([x,y])\n    return ans", "from math import sqrt\ndef sol_equa(n):\n    m = [[y, n/y] for y in [x for x in range(1, int(sqrt(n))+1) if n%x == 0]]\n    return sorted([[(r[0] +r[1])/2, (r[1] - r[0])/4] for r in [z for z in m if (z[0] +z[1])%2 == 0 and (z[1] - z[0])%4 == 0]], reverse=True)\n", "def sol_equa(n):\n    f = [[i, n//i] for i in range(1, int(n**0.5)+1) if not n%i]\n    return [[(a+b)//2, (b-a)//4] for (a, b) in f if ((a+b)//2)**2 -4*((b-a)//4)**2 == n]\n        \n        \n    \n", "def sol_equa(n):\n    res = []\n    if n <= 0:\n        return res\n    for i in range(1,int(pow(n,1/2)+1)):\n        if int(n % i) == 0 and int(n-i*i) % (4*i) ==0:\n            res.append([int((i+n/i)/2),int((n/i-i)/4)])\n    return res"]