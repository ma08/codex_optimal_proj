["def solution(s):\n    st=[1 for i in range(1,len(s)) if s[i-1]==s[i]]\n    return sum(st)", "def solution(s):\n    return sum(1 for i in range(len(s)) if i and s[i-1]==s[i])", "def solution(s):\n    r = s\n    for i in range(9):\n        r = r.replace('RR', 'R').replace('GG', 'G').replace('BB', 'B')\n\n    return len(s) - len(r)", "def solution(stones):\n    return sum(a==b for a,b in zip(stones, stones[1:]))", "from itertools import groupby\n\ndef solution(stones):\n    return sum(len(list(l))-1 for _,l in groupby(stones))", "import re\n\ndef solution(stones):\n    return sum( len(m[0])-1 for m in re.finditer(r'(.)\\1+',stones) )", "from itertools import groupby\n\n\ndef solution(stones):\n    return sum(len(list(grp))-1 for _, grp in groupby(stones))", "def solution(stones):\n    result = 0\n    for i in range(len(stones)-1):\n        if stones[i]==stones[i+1]:\n            result += 1\n    return result", "def solution(stones):\n    # Do some magic\n    num = 0\n    for i in range(len(stones) - 1):\n        if stones[i] == stones[i+1]:\n            num += 1\n            \n    return num\n#     if stones[0] == stones[1]:\n#         stones.replace(stones[1], '', 1)\n#     print(stones)\n", "def solution(stones):\n    counter = -1\n    previous_stone = stones[0]\n\n    for stone in stones:\n        if previous_stone == stone:\n            counter += 1\n\n        else: previous_stone = stone\n\n    return counter"]