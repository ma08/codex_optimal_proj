["def decrypt(s):\n    return next((str(b // 11) for b in (int(str(a) + s) for a in range(1, 11)) if b % 11 == 0), 'impossible')", "def decrypt(s):\n  for i in range(1,11):\n        n = int(str(i)+s)\n        if n//11*11==n : return str(n//11)\n  return 'impossible'", "def decrypt(s):\n    x, l = int(s), 10**len(s)\n    for i in range(l+x, 11*l+x, l):\n        if not i%11: return str(i//11)\n    return \"impossible\"", "def decrypt(s):\n    for i in range(1, 100):\n        n = int(str(i) + s)\n        if n % 11 == 0 and len(str(n//11)) == len(s):\n            return str(n // 11)\n    return 'impossible'", "def decrypt(s):\n    for n in range(1, 11):\n        res, mod = divmod(int(str(n) + s), 11)\n        if mod == 0:\n            return str(res)\n    return 'impossible'", "def decrypt(s):\n    for i in range(1, 11): \n        if int(int(str(i) + s)) % 11 == 0: return str(int(str(i) + s) // 11)\n    return 'impossible'", "def decrypt(s):\n    prev, c = int(s[-1]), 0\n    res = [prev]\n    for d in s[::-1][1:]:\n        x = int(d) - prev - c\n        prev, c = (x + 10) % 10, x < 0\n        res.append(prev)\n    return 'impossible' if res[-1] == 0 else ''.join(map(str, res[::-1]))", "def decrypt(s):\n    for i in range(1,11):\n        a = int(str(i)+s)\n        if a%11==0:\n            return str(a//11)\n    return 'impossible'", "def decrypt(s):\n    for a in range(1, 11):\n        if (a * 10**len(s) + int(s)) % 11 == 0:\n            return str((a * 10**len(s) + int(s)) // 11)\n    return \"impossible\"\n", "def decrypt(s):\n    prev, c, r = 0, 0, []\n    for x in reversed(s):\n        d = int(x) - c - prev\n        if d < 0:\n            d += 10\n            c = 1\n        else:\n            c = 0\n        r.append(str(d))\n        prev = d\n    return 'impossible' if not prev else ''.join(r[::-1])"]