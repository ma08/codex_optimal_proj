["def distinct_digit_year(year):\n    year += 1\n    while len(set(str(year))) != 4:\n        year += 1\n    return year\n  #coding and coding..\n", "def distinct_digit_year(year):\n    year += 1\n    \n    if len(set(str(year))) == len(str(year)):\n        return year \n        \n    return distinct_digit_year(year)", "from itertools import count\n\ndef distinct_digit_year(year):\n    return next(y for y in count(year+1) if len(str(y)) == len(set(str(y))))", "def distinct_digit_year(year):\n  distinctDigits = False\n  while distinctDigits == False: \n      #iterate to next year until a year with distinct digits is found\n      year += 1\n      #if the length of the unique digits in year is the same as the total number of digits, the digits are unique\n      if len(set(str(year))) == len(str(year)): \n          distinctDigits = True\n  \n  return year", "def distinct_digit_year(year):\n    return next(i for i in range(year + 1, 9999) if len(set(str(i)))==4)", "import re\n\ndef distinct_digit_year(year):\n    return year + 1 if re.match(r'(?:([0-9])(?!.*\\1)){4}', str(year + 1)) else distinct_digit_year(year + 1)", "def distinct(year):\n    year = str(year)\n    return len(year) == len(set(year))\n    \ndef distinct_digit_year(year):\n    year += 1\n    while not distinct(year):\n        year += 1\n    return year", "distinct_digit_year=lambda y:next(i for i in range(y+1,9000)if len(set(str(i)))==4)", "def distinct_digit_year(year):\n    next_year = int(year)\n    while True:\n        sum = 0\n        next_year = next_year + 1\n        for num in str(next_year):\n            sum += str(next_year).count(num)\n        if sum == 4:\n            break\n    return(next_year)", "def distinct_digit_year(year):\n    for y in range(year + 1, 9999):\n        if len(set(str(y))) == 4:\n            return y"]