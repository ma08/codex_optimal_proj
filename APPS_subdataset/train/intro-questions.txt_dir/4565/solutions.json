["def replace_dots(string):\n    return string.replace('.', '-')", "import re\ndef replace_dots(str):\n    return re.sub(r\"\\.\", \"-\", str)\n    # literally I had to only add a \\ infront of the dot.\n    # this challenge is super hard for noobs and super easy for pros. it's not fair.\n", "import re\ndef replace_dots(s):\n    return s.replace(\".\", \"-\")", "replace_dots = lambda x: x.replace(\".\",\"-\")", "def replace_dots(str):\n    if \".\" in str:\n        return str.replace(\".\",\"-\")\n    elif str == \"no dots\":\n        return \"no dots\"\n    else:\n        return \"\"", "import re\ndef replace_dots(str):\n    return re.sub(r\"\\.\", \"-\", str, flags=re.MULTILINE)", "import re\ndef replace_dots(s):\n    return re.sub(r\"\\.\", \"-\", s)", "from re import sub\n\ndef replace_dots(_str: str) -> str:\n    \"\"\" Replace all dots in given text by dashes. \"\"\"\n    return sub(\"\\.\", \"-\", _str)", "import re\ndef replace_dots(str):\n    return str.replace('.', '-')", "import re\n\ndef replace_dots(s):\n    return re.sub(\"[.]\", \"-\", s)", "\ndef replace_dots(s):\n    return s.replace(r\".\", \"-\")", "replace_dots = lambda s:''.join(['-' if i == '.' else i for i in s])", "import re\ndef replace_dots(str):\n    result = ''\n    for ch in str:\n        if ch =='.':\n            result += '-'\n        else:\n            result += ch\n    return result", "import re\ndef replace_dots(s):\n    x = re.sub(r'[.]', '-', s)\n    return x", "import re\ndef replace_dots(s):\n    for char in s:\n        if char==\".\":\n            s=s.replace(char,\"-\")\n    return s", "from re import sub\ndef replace_dots(s):\n    return sub(\"\\.\", \"-\", s)", "import re\ndef replace_dots(s):\n    s = re.sub(r\"\\.\", \"-\", s)\n    return s ", "def replace_dots(s):\n    return '-'.join(s.split('.'))", "def replace_dots(s):\n    if s == \"\":\n        return \"\"\n    elif \".\" not in s:\n        return 'no dots'\n    else:\n        return s.replace(\".\", \"-\")\n", "def replace_dots(s):\n    return \"\".join(['-' if i == '.' else i for i in s ])", "import re\ndef replace_dots(s):\n    print(s)\n    return re.sub(\"\\.\", \"-\", s)", "def replace_dots(s):\n    s = list(s)\n    i = 0\n    while i < len(s):\n        if s[i] == '.':\n            s[i] =  '-'\n        i += 1\n  \n    return ''.join(s) ", "def replace_dots(s):\n    return s.replace('.', '-', len(s))", "#import re\ndef replace_dots(s):\n    return s.replace(r\".\", \"-\")", "import re\ndef replace_dots(s):\n    return re.sub(r\"[.+]\", \"-\", s)", "def replace_dots(s):\n    return s.replace(\".\", \"-\") if \".\" in s else s", "def replace_dots(s):\n    if s == \"\":\n        return \"\"\n    else:\n        return s.replace(\".\", \"-\")", "import re\ndef replace_dots(s):\n    return re.sub(r\"[\\.]\", \"-\", s)", "\ndef replace_dots(s):\n    s=s.replace('.','-')\n    return s", "import re\ndef replace_dots(s):\n    if len(s) == 0: return \"\"\n    if \".\" in s:\n        return s.replace(\".\",\"-\")\n    else: return s", "replace_dots = lambda s: ''.join(['-' if c == '.' else c for c in s])", "def replace_dots(s):\n    res = s.replace('.', '-')\n    return res", "\n\ndef replace_dots(s):\n\n    if s == \"\":\n    \n        return \"\"\n\n    for i in s:\n    \n        if not '.' in s:\n        \n            return \"no dots\"\n        \n        else:\n        \n            for j in range(len(s)):\n            \n                if s[j]=='.':\n                \n                    v = s.replace(s[j],'-')\n                    \n                    return v\n                    \n                    \n        \n        \n    \n", "import re\ndef replace_dots(s):\n    return s.replace(r\".\", r\"-\",)", "from re import sub\ndef replace_dots(s):\n    return sub(r\"\\.\", \"-\", s)", "import re\ndef replace_dots(s):\n    #the '.' needs to be preceded by \\ for it to be treated as '.' character\n    #else, re interprets . as any character and replaces all chars with -\n    return re.sub(r\"\\.\", \"-\", s)", "import re\ndef replace_dots(s):\n    if len(s) == 0: return \"\"\n    \n    return re.sub(\"\\.\", \"-\", s) if \".\" in s else \"no dots\"", "import re\ndef replace_dots(s):\n  if '.' in s: \n    \n    return s.replace(\".\", \"-\")\n  else:\n    return s", "\ndef replace_dots(s):\n    return s.replace(\".\", \"-\")\n    # Flez\n", "import re\ndef replace_dots(s):\n    return re.sub(r\"[.]\", \"-\", s)", "def replace_dots(s):\n    x = s.replace('.', '-')\n    return x", "import re\n\n# Don't use a class name like str as an argument name\ndef replace_dots(str):\n    return str.translate(str.maketrans(\".\", \"-\"))\n    return str.replace(\".\", \"-\")\n    return re.sub(r\"\\.\", \"-\", str)", "import re\ndef replace_dots(s):\n    return re.sub(\"\\.\",\"-\",s)", "import re\ndef replace_dots(str = ''):\n    return re.sub('[.]', '-', str)", "import re\ndef replace_dots(str):\n    output = ''\n    for i in str:\n        if i == '.':\n            output += '-'\n        else:\n            output += i\n    return output", "import re\ndef replace_dots(str):\n    return re.sub(r\"\\.\", r\"-\", str)\n#Solved on 27th Sept,2019 at 06:25 PM.\n", "def replace_dots(x):\n    return(x.replace(\".\",\"-\")) ", "def replace_dots(str):\n    return __import__('re').sub(r\"\\.\", \"-\", str)", "def replace_dots(str1):\n    \n    return str1.replace(\".\", \"-\")\n\n\nstr1 = 'one.two.three'\nprint(replace_dots(str1))", "def replace_dots(st):\n    print((\"==>> \",st))\n    if len(st) == 0:\n        return ''\n    num_dots = 0\n    for lletra in st:\n        if lletra == \".\":\n            num_dots += 1\n    if num_dots > 0:\n        return st.replace('.','-')\n    else:\n        return \"no dots\"\n\n\n", "import re\ndef replace_dots(str):\n    return re.sub(r\"\\.\", \"-\", str)  #I solved this Kata on  7/29/2019  03:33 AM...#Hussam'sCodingDiary", "def replace_dots(string):\n    while \".\" in string: string = string.replace(\".\", \"-\")\n    return string", "import re\ndef replace_dots(str):\n    if '.' in str:\n        return str.replace(\".\", \"-\")\n    else:\n        return str", "def replace_dots(str):\n    for i in range(len(str)):\n      if str[i] =='.':\n        str=str.replace(str[i],'-')\n    return str", "import re\ndef replace_dots(str):\n    return ''.join(['-' if i =='.' else i for i in str])", "import re\ndef replace_dots(str):\n    return re.sub(\"[\\\\.]\", \"-\", str)", "replace_dots = lambda str: str.replace('.', '-')", "import re\ndef replace_dots(re):\n    return re.replace(\".\", \"-\")", "from re import sub\ndef replace_dots(string):\n    return sub(r'\\.', '-', string)", "def replace_dots(stroka):\n    return stroka.replace(\".\", \"-\")", "def replace_dots(str):\n    str = str.replace(\".\", \"-\")\n    return str", "import re\ndef replace_dots(str):\n    a = re.sub(r\"\\.\", \"-\", str)\n    return a", "import re\ndef replace_dots(str):\n    replaced = re.sub(r'\\.','-', str)\n    return replaced", "import re\ndef replace_dots(str):\n    new = re.sub(r\"\\.\", \"-\", str)\n    return new", "import re\ndef replace_dots(str):\n    return re.sub(r\"\\.\", r\"-\", str)", "import re\ndef replace_dots(s):\n    intab = '.'\n    outtab = '-'\n    trantab = str.maketrans(intab,outtab)\n    return s.translate(trantab)", "import re\ndef replace_dots(str):\n    compiler = re.compile(r'\\.')\n    return compiler.sub(\"-\", str)", "\ndef replace_dots(str):\n    return str.replace(\".\", \"-\", len(str))", "def replace_dots(blah):\n    return blah.replace(\".\", \"-\")", "def replace_dots(str):\n    output = \"\"\n    for element in str:\n        if element == \".\":\n            output += \"-\"\n        else:\n            output += element\n    return output            ", "def replace_dots(str):\n    if \".\" in str:\n        return str.replace(\".\", \"-\")\n    elif not str:\n        return \"\"\n    else:\n        return \"no dots\"", "import re\ndef replace_dots(string):\n    return re.sub(r\"\\.\", \"-\", string)", "def replace_dots(strng):\n    strng = strng.replace(\".\",\"-\")\n    return strng", "def replace_dots(strng):\n    return strng.replace(\".\", \"-\")", "import re\ndef replace_dots(x):\n    return re.sub('\\.', '-', x)", "\ndef replace_dots(str):\n    return \"\".join(x if x != \".\" else \"-\" for x in str)", "import re\ndef replace_dots(str):\n    return \"no dots\" if set(str)=={'-'} else re.sub(r\"\\.\", \"-\", str)", "import re\ndef replace_dots(str):\n    return str.replace(\".\",\"-\") # no re needed", "def replace_dots(str):\n    a = str.replace(\".\",\"-\")\n    return a", "def replace_dots(str):\n    return \"\".join([x if x != \".\" else \"-\" for x in str])", "import re\ndef replace_dots(str):\n    return re.sub(\"\\\\.\", \"-\", str)", "import re\ndef replace_dots(str):\n    print(str)\n    return re.sub(r\"\\.\", \"-\", str)", "def replace_dots(str):\n    string = str.replace('.', '-')\n    return string", "import re\ndef replace_dots(str):\n    print(str)\n    return re.sub(\"\\.\",\"-\",str)", "def replace_dots(str):\n    import re\n    if str == '':\n        return str\n    return re.sub('\\.', '-', str) if str.count('.') else 'no dots'", "import re\ndef replace_dots(strg):\n    return re.sub(r\"\\.\", \"-\", strg)", "def replace_dots(str):\n    dash = str.replace('.', '-')\n    return dash", "replace_dots = lambda s: s.replace('.','-')\n", "def replace_dots(str):\n    change = '.'\n    for element in str:\n        if element in change:\n            str = str.replace(element, '-')\n    return str", "def replace_dots(str):\n    if len(str) == 0:\n        return ''\n    else:\n        return str.replace('.','-') if '.' in str else \"no dots\" ", "import re\ndef replace_dots(str):\n    if str == \"\":\n        return re.sub(r\".\", \"-\", str)\n    return str.replace(\".\", \"-\")", "import re\ndef replace_dots(str_):\n    if \".\" in str_: \n        return str_.replace(\".\", \"-\") \n    elif str_ is \"\":\n        return \"\"\n    else: \n        return \"no dots\"", "import re\ndef replace_dots(s):\n    if s=='':return ''\n    if '.' not in s:return 'no dots'\n    return re.sub(r\"\\.\", \"-\", s)\n", "def replace_dots(str_):\n    return str_.replace(\".\",\"-\")", "import re\ndef replace_dots(str):\n    return str.replace(r\".\", \"-\", 100)", "import re\ndef replace_dots(e):\n    return e.replace(\".\", \"-\")", "def replace_dots(str):\n    arr = []\n    for i in str:\n        if i == '.':\n            arr.append('-')\n        else:\n            arr.append(i)\n    \n    b = ('').join(arr)\n    \n    return b\n", "import re\ndef replace_dots(string):\n    return string.replace(\".\",\"-\") if \".\" in string or string == '' else \"no dots\"", "def replace_dots(str):\n    return str if '.' not in str else str.replace('.', '-')\n", "import re\ndef replace_dots(string):\n    if string == \"\":\n        return \"\"\n    else:\n        return string.replace('.', '-') if '.' in list(string) else 'no dots'"]