["def simple_multiplication(number) :\n    return number * 9 if number % 2 else number * 8", "def simple_multiplication(n) :\n    return n * (8 + n%2)", "def simple_multiplication(number) :\n    return number * (8 if number % 2 == 0 else 9)", "simple_multiplication = lambda a : a * (8 + (a & 1))", "simple_multiplication = lambda n: n.__mul__(n.__and__(bool(n)).__add__(len(__name__)))", "def simple_multiplication(n) :\n    return n * 8 if n % 2 == 0 else n * 9", "def simple_multiplication(number) :\n    return number * 8 if number % 2 == 0 else number * 9", "def simple_multiplication(number):\n    return number * (9 if number % 2 else 8) ", "def simple_multiplication(number) :\n    if number % 2 == 0:\n        return number * 8\n    return number*9", "simple_multiplication = lambda n: n*(8+(n&1))", "def simple_multiplication(n):\n    return n * [8, 9][n % 2]", "def simple_multiplication(number) :\n    if number % 2 == 0:\n        n = 8\n    else:\n        n = 9\n    return number * n\n", "simple_multiplication = lambda num: num * (8 + num%2)", "def simple_multiplication(x) :\n    if x%2==0:\n        return x*8\n    else:\n        return x*9", "simple_multiplication = lambda n : n*8 if n%2==0 else n*9\n", "simple_multiplication=lambda Q:Q*(8+(1&Q))", "def simple_multiplication(number) :\n    return number*(9 if number % 2 else 8)\n\ndef simple_multiplication(number) :\n    return number*(9 if number & 1 else 8)\n\ndef simple_multiplication(number) :\n    return number*(8 + (number & 1))\n", "def simple_multiplication(number) :\n    return number * (8 + (number % 2))", "def simple_multiplication(number: int) -> int:\n    \"\"\" Multiply a given number by eight if it is an even number and by nine otherwise. \"\"\"\n    return number * 9 if number % 2 else number * 8", "def simple_multiplication(number) :\n    if number % 2 == 0 :\n        num = number * 8\n    else :\n        num = number * 9\n    return num", "def simple_multiplication(number) :\n#    return number*8 if number % 2 ==0 else number*9\n    return number*[9,8][number % 2 == 0]", "def simple_multiplication(number) :\n    return (8 + (number % 2)) * number", "def simple_multiplication(number) :\n    return number * (8 + (number & 1))", "def simple_multiplication(number) :\n    return number << 3 if number % 2 == 0 else 9*number", "def simple_multiplication(num):\n    return num << 3 if not num % 2 else num * 9", "def simple_multiplication(number) :\n    number *= 8 + (number % 2)\n    return(number)\n", "def simple_multiplication(number) :\n    return (number << 3) + number * (number & 1)", "simple_multiplication = lambda n: ((n&1)+8)*n", "def simple_multiplication(number) :\n    return number * [8, 9][number % 2]", "def simple_multiplication(number) :\n    if number % 2 == 0:\n       return number *8\n    else:\n       return number *9", "simple_multiplication = lambda num: num * 9 if num % 2 else num * 8", "def simple_multiplication(number) :\n    # Your code goes here\n    if 0 == number%2:\n        return number*8\n    return number*9", "def simple_multiplication(number) :\n#     return number * 8 if number%2 == 0 else number * 9 \n    return number * (9,8)[number%2 == 0]", "simple_multiplication=lambda n:8*n+n%2*n", "def simple_multiplication(number) :\n    if number%2:\n        return 9*number\n    else:        \n        return 8*number\n", "def simple_multiplication(n):\n    return (n << 3) + (n & 1) * n", "def simple_multiplication(number) :\n    print(number)\n    if number % 2 == 0:\n        simple_multiplication = number * 8\n    elif number % 2 == 1:\n        simple_multiplication = number * 9\n    return(simple_multiplication)", "def simple_multiplication(number):\n    # Non-branching solution\n    return (number % 2 and number * 9) or number * 8", "def simple_multiplication(number) :\n    if number % 2 == 0:\n        return number * 8\n    if number % 2 == 1:\n        return number * 9\n    else:\n        return 0", "def simple_multiplication(number) :\n    x = []\n    if (number % 2) == 0:\n        x = number * 8\n    else:\n        x = number * 9\n        \n    return x", "def simple_multiplication(number: int) -> int:\n    return number * 8 if number % 2 == 0 else number * 9", "simple_multiplication = lambda n: n * 8 if n % 2 is 0 else n * 9", "def simple_multiplication(num) :\n    divided = (num % 2)\n    if divided == 0:\n        return (num * 8)\n    else:\n        return (num * 9)\n", "def simple_multiplication(number) :\n    if number%2 ==0:\n        number*=8\n        return number\n    else:\n        number*=9\n        return number\nsimple_multiplication(10)", "def simple_multiplication(number) :\n    ans = 0\n    if number % 2 == 0:\n        ans = number * 8\n    else:\n        ans = number * 9\n    return ans", "def simple_multiplication(n):\n    return n * (8 + (n & 1))", "def simple_multiplication(number) :\n    '''we will use an if else situation to differentiate the circumstance'''\n    return number*8 if number%2==0 else number*9", "def simple_multiplication(number) :\n    total = number * 9\n    if number % 2 == 0:\n        total = total - number\n    return total", "def simple_multiplication(number) :\n    if int(number) % 2 == 0:\n        return int(number) * 8\n    elif int(number) % 2 != 0:\n        return int(number) * 9\n", "def simple_multiplication(n) :\n    return 8*n if n%2==0 else 9*n", "def simple_multiplication(n) :\n    return n * 9 if n % 2 == 1 else n * 8", "def simple_multiplication(n):\n    return n * 8 + n * (n % 2)", "def simple_multiplication(number) :\n    if number % 2 == 0:\n        new_number = number * 8\n    else:\n        new_number = number *9\n    return new_number\n", "def simple_multiplication(n) :\n    return n * ((n%2) * 9 + (n-1)%2 * 8)", "def simple_multiplication(number: int) -> int:\n    \"\"\"Multiplying a given number by eight if it is an even number and by nine otherwise.\"\"\"\n    return number * (8 if number % 2 == 0 else 9)\n", "from math import *\ndef simple_multiplication(number) :\n    if fmod(int(number), 2) == 0:\n        even = True\n    else:\n        even = False\n\n    if even == True:\n        return int(number) * 8\n    else:\n        return int(number) * 9", "def simple_multiplication(n):\n    return (lambda n : n * 8 if n % 2 == 0 else n * 9)(n)", "def simple_multiplication(number) :\n    if number % 2 == int():\n        return number * 8\n    else:\n        return number * 9\n", "def simple_multiplication(number):\n    if number % 2 == 0:\n        return number * 8\n    else:\n        return number * 9\nsimple_multiplication(2)", "def simple_multiplication(n) :\n    return [n*8, n*9][n % 2]", "def simple_multiplication(number):\n    return number * 8 + (0 if number % 2 == 0 else number)", "simple_multiplication = lambda num: num * (8 if num % 2 == 0 else 9 )", "def simple_multiplication(number) :\n    mult = 9 if number % 2 else 8\n    return number * mult", "def simple_multiplication(number) :\n    if number % 2 == 0:\n        return number*8\n    elif number % 1 == 0:\n        return number*9", "def simple_multiplication(number) :\n    return int(\"\".join(str(number * 8) if number % 2 == 0 else str(number * 9)))", "\n#function simple_multiplaction takes a number argument\ndef simple_multiplication(number):\n   #if number is even\n       #multiple by 8\n    #if number is odd\n        #multiply by 9\n    if number % 2 == 0:\n        return number * 8\n    else:\n        return number * 9", "def simple_multiplication(number) :\n    if number % 2 == 0:\n        multi = number * 8\n        return multi\n    else:\n        multi = number * 9\n        return multi\nsimple_multiplication(3)", "simple_multiplication = lambda n: (8 + n % 2) * n", "def simple_multiplication(number) :\n    return number * 8 if number and number % 2 == 0 else number * 9", "def simple_multiplication(number) :\n    if number % 2 == 0:\n        return number * 8\n    else:\n        return number * 9\nprint(simple_multiplication(5))", "def simple_multiplication(a) :\n        for i in range(a):\n            if a % 2 != 0:\n                b = a * 9;\n            else:\n                b = a  * 8;\n        return(b)", "def simple_multiplication(number) :\n    if number % 2 == 0:\n      c = number * 8\n      return c\n    else:\n      f = number * 9\n      return f", "def simple_multiplication(number) :\n    return (number*9, number*8) [number%2==0]", "def simple_multiplication(number) :\n    if number % 2 == 0:\n        return number * 8\n    else:\n        return number * 9\n        \n        \nsimple_multiplication(5)", "def simple_multiplication(number) :\n    format_number = int(number)\n    result = format_number * 8 if format_number % 2 == 0 else format_number * 9\n    return result", "def simple_multiplication(number) :\n    x = number*8 if number%2==0 else number*9 \n    return x ", "def simple_multiplication(number) :\n     even = 8 \n     odd = 9\n     if number % 2 == 0:\n        return(number * even)\n     else:\n        return(number * odd)\n        \n", "def simple_multiplication(number) :\n    return number * (8 + (number%2 != 0) * 1)", "def simple_multiplication(number) :\n    \n    return number * 8 + (number % 2 == 1) * number", "def simple_multiplication(number) :\n    if number%2 == 0:\n        even_multiply = number*8\n        return even_multiply\n    else:\n        odd_multiply = number*9\n        return odd_multiply", "def simple_multiplication(number) :\n    if (number % 2) == 0:\n        x=number*8\n        return x\n    else:\n        y=number*9\n        return y", "def simple_multiplication(number) :\n    return 8 * number + number * (number % 2 == 1)", "def simple_multiplication(number) :\n    # Your code goes here\n    x = number % 2 \n    if x == 0:\n        return (number * 8)\n    else:\n        return (number * 9)\n", "def simple_multiplication(number) :\n    return number*(9 - int(number%2==0))", "def simple_multiplication(number) :\n    return number * 9 if number & 1 else number * 8", "def simple_multiplication(number) :\n    num = number % 2 \n    if num == 0:\n        return number *8;\n    else:\n        return number *9;\n    \n    # Your code goes here\n", "def simple_multiplication(number) :\n    # Your code goes here\n    if number%2 == 0:\n        return number*8\n    else:\n        return number*9\nprint(simple_multiplication)\n", "def simple_multiplication(number) :\n    if number%2:\n        answer = number*9\n    else:\n        answer = number * 8\n    return answer\n", "simple_multiplication = lambda n: n * 9 if n % 2 else n * 8", "def simple_multiplication(number) :\n    x=number/2\n    if x == round(x,0):\n        return number * 8\n    else:\n        return number * 9", "def simple_multiplication(number) :\n    return (9 if number%2 else 8) * number", "def simple_multiplication(number) :\n    return (int(number) * 8 if number % 2 == 0 else int(number) * 9)", "def simple_multiplication(number) :\n    res = 0\n    if number % 2 == 0:\n        res = number * 8\n    else:\n        res = number * 9\n    return res", "simple_multiplication=lambda x: (x<<3) + x*(x&1)", "def simple_multiplication(number) :\n    Temp = number % 2\n    if Temp == 0:\n        TempMul = number * 8\n        return TempMul\n    if Temp != 0:\n        TempMul = number * 9\n        return TempMul", "def simple_multiplication(num) :\n    # Your code goes here\n    if num % 2 == 0:\n        return num * 8\n    if num% 2 ==1  :\n        return num *9\nprint(simple_multiplication(9))", "def simple_multiplication(n) :\n    if n % 2 == 0:\n        n *= 8\n    else:\n        n *= 9\n    return n", "def simple_multiplication(number) :\n    if number % 2 == 0 or number == 0:\n        return number * 8\n    elif number % 2 != 0 or number == 1:\n        return number * 9", "def simple_multiplication(number) :\n    even = number * 8\n    odd = number * 9\n    if number % 2 == 0 :\n        return even\n    else:\n        return odd", "def simple_multiplication(number) :\n    if number%2==0: return number<<3\n    else: return number*9"]