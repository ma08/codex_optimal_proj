["def decipher_word(word):\n    i = sum(map(str.isdigit, word))\n    decoded = chr(int(word[:i]))\n    if len(word) > i + 1:\n        decoded += word[-1]\n    if len(word) > i:\n        decoded += word[i+1:-1] + word[i:i+1]\n    return decoded\n\ndef decipher_this(string):\n    return ' '.join(map(decipher_word, string.split()))", "def decipher_this(string):\n    words = string.split()\n    res = []\n    #check if there is a part only consisting digts\n    for x in words:\n        if x.isdigit():\n            res.append(chr(int(x)))\n    #if not then seperate the numbers and the string charakters in seperate variables\n        elif len(x) >= 3:\n            sum = \"\"\n            new_str = \"\"\n            for i in x:    \n                if i.isdigit():\n                    sum += i\n                else:\n                    new_str += i\n            #transverse the digit to the she specific letter and add the old string to it\n            sum = chr(int(sum)) + new_str\n            #ckeck if the string length has changed due to the transversation and switch the letter position \n            if len(sum) > 2:\n                x = (sum[0::len(sum) - 1] + sum[2:len(sum) -1 ] + sum[1])\n                res.append(x)\n            else:\n                res.append(sum)\n    return \" \".join(res)\n", "def decipher_this(string):\n    words = []\n    for word in string.split():\n        code = ''.join(char for char in word if char.isdigit())\n        new_word = chr(int(code))+''.join(char for char in word if not char.isdigit())\n        words.append(new_word[:1]+new_word[-1]+new_word[2:-1]+new_word[1] if len(new_word)>2 else new_word)\n    return ' '.join(words)", "import re\n\ndef decipher_this(stg):\n    return re.sub(r\"(\\d+)(\\w?)(\\w*)\", decipher_word, stg)\n\ndef decipher_word(match):\n    o, cl, cr = match.groups()\n    return f\"{chr(int(o))}{cr[-1:]}{cr[:-1]}{cl}\"", "def decipher_this(string):\n    translated = []\n    for word in string.split():\n        digits = ''\n        for c in word:\n            if c.isdigit():\n                digits += c\n        word = word.replace(digits, chr(int(digits)))    \n        if len(word) > 2:\n            translated.append(''.join([word[0], word[-1], word[2:-1], word[1]]))\n        else:\n            translated.append(word)\n    return ' '.join(translated)", "import string as Str\n\ndef decipher_this(string):\n    \n    allLetters = Str.ascii_letters\n    allNumbers = Str.digits\n    \n    sentence = string.split(\" \")\n    \n    decodedSentence = \"\"\n    \n    for word in sentence:\n        ascii_code = word.strip(allLetters)\n        ascii_letters = word.strip(allNumbers)\n        \n        first_letter = chr(int(ascii_code))\n        \n        if len(ascii_letters) > 1:\n            ascii_letters = ascii_letters[-1:] + ascii_letters[1:-1] + ascii_letters[:1]\n        \n        decodedSentence = decodedSentence + first_letter + ascii_letters + \" \"\n    \n    return decodedSentence[:-1]\n    \n", "import re\ndef decipher_this(string):\n    #list to save decrypted words\n    decrypted = []\n    for word in string.split():\n        #get number in string\n        re_ord = re.match(r'\\d+', word).group()\n        #replace number by ascii letter and transform word in a list\n        new_word = list(re.sub(re_ord, chr(int(re_ord)), word))\n        #swap second and last letter in the word list\n        if len(new_word) > 2:\n            new_word[1], new_word[-1] = new_word[-1], new_word[1]\n        #save the word in the string list\n        decrypted.append(''.join(new_word))\n    #return the decrypted words list as a string\n    return ' '.join(decrypted)", "import re\ndef decipher_this(text):\n    return re.sub(r'\\b(\\d{2,3})(\\w?)(\\w*?)(\\w?)\\b', lambda m: '{}'.format(chr(int(m.group(1))) + m.group(4) + m.group(3) + m.group(2)), text)", "import re\n\nREGEX = re.compile(r'(\\d+)([a-zA-Z]*)$')\n\n\ndef decipher_this(s):\n    result = []\n    for word in s.split():\n        m = REGEX.match(word)\n        digits, chars = m.groups()\n        tmp = [chr(int(digits))]\n        if len(chars) < 2:\n            tmp.append(chars)\n        else:\n            tmp.append('{}{}{}'.format(chars[-1], chars[1:-1], chars[0]))\n        result.append(''.join(tmp))\n    return ' '.join(result)\n", "import re\ndef decipher_this(str):\n    return re.sub(r\"(\\d+)(\\w*)\", lambda m : chr(int(m.group(1))) + ( m.group(2)[-1] + m.group(2)[1:-1] + m.group(2)[0] if len(m.group(2))>1 else m.group(2)), str)"]