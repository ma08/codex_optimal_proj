["def how_many_pizzas(n):\n    return 'pizzas: {}, slices: {}'.format(*divmod(n * n // 8, 8))", "def how_many_pizzas(n):\n    pizzas, slices = (int(n) for n in divmod(n**2, 64))\n    return f\"pizzas: {pizzas}, slices: {slices // 8}\"", "def how_many_pizzas(n):\n    q, r = divmod(n**2, 8**2)\n    return f\"pizzas: {q}, slices: {round(r / 8)}\"", "def how_many_pizzas(n):\n  return f'pizzas: {n*n // 8**2}, slices: {n*n/8 % 8:.0f}'", "def how_many_pizzas(n):\n    pizzas = n * n / 64\n    p = int(pizzas)\n    s = int((pizzas - p) * 8)\n    return f'pizzas: {p}, slices: {s}'", "def how_many_pizzas(n):\n    area = n * n\n    eight_area = 64\n    total_pizzas = int(area/eight_area)\n    slices = 0\n    if area % eight_area != 0:\n        slices = int((area - (total_pizzas * eight_area))/8)\n    return \"pizzas: {}, slices: {}\".format(total_pizzas, slices)", "def how_many_pizzas(n):\n    return 'pizzas: {}, slices: {}'.format(n ** 2 // 8 ** 2, n ** 2 % 8 ** 2 // 8)", "import math\ndef how_many_pizzas(n):\n    x = math.floor(n*n/64) \n    w = round((n*n%64)/8)\n    return f\"pizzas: {x}, slices: {w}\"\n", "def how_many_pizzas(n):\n    return f\"pizzas: {n ** 2 //( 8 ** 2)}, slices: {round(((n ** 2) /( 8 ** 2)-(n ** 2)//( 8 ** 2))* 8) }\"  \n\n\n", "def how_many_pizzas(n): return f\"pizzas: {(n ** 2) // 64}, slices: {(n ** 2) % 64 // 8}\""]