["class Solution:\n     def isPowerOfTwo(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         if n < 0:\n             return False\n         \n         hasOne = False\n         while n > 0:\n             if n & 1:\n                 if hasOne == True:\n                     return False\n                 else:\n                     hasOne = True\n                     \n             n = n >> 1\n         \n         return hasOne", "class Solution:\n     def isPowerOfTwo(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         # so let's take a look at what it means to be a power of two\n         # 2^2 = 4 = 0100   | Now note when we subtract one | 2^2 - 1 = 3 = 0011 \n         # 2^3 = 8 = 1000   | Now note when we subtract one | 2^3 - 1 = 7 = 0111\n         # Now note if we do n AND n-1, we should always get 0 | 1000 & 0111 = 0000 = 0\n         return n>0 and not (n & n-1)\n         # This holds true for all powers of 2. However note if we used 0 & anything else, it would show to be a power of 2.\n         # To fix this we can add another clause v & (earlier clause) or we can simply check if value is greater than 0.\n         \n         \n", "class Solution:\n     def isPowerOfTwo(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         if n == 0:\n             return False\n         if n < 0:\n             n **= -1\n \n         pow_ = True\n         while n and pow_:        \n             if n == 1:\n                 return True\n             pow_ = not(n % 2)\n             n //= 2\n         return pow_\n \n     \n", "class Solution:\n     def isPowerOfTwo(self, n):\n         if n <= 0: return False\n         if n == 1: return True\n         while n > 1:\n             if n & 1: return False\n             n >>= 1\n         else: return True\n", "class Solution:\n     def isPowerOfTwo(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         \n         return True if n & (n-1) == 0 and n != 0 else False\n", "class Solution:\n     import math\n     def isPowerOfTwo(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         if n<1:\n             return False\n         b = str(bin(n))\n         b = b.replace('0b','')\n         b = b.replace('0','')\n         \n         return len(b)==1", "class Solution:\n     def isPowerOfTwo(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n #         if n == 0:\n #             return False\n #         while n % 2 == 0:\n #             n = n // 2\n             \n #         if n == 1:\n #             return True\n #         return False\n \n         return n > 0 and 1073741824 % n == 0\n", "class Solution:\n     def isPowerOfTwo(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         \n         return n > 0 and n & (n - 1) == 0", "class Solution:\n     def isPowerOfTwo(self, n):\n         return n > 0 == 2**32 % n\n", "class Solution:\n     def isPowerOfTwo(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         return n > 0 and not (n & (n - 1))", "class Solution:\n     def isPowerOfTwo(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         return n != 0 and not n & (n - 1)", "class Solution:\n     def isPowerOfTwo(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         \n         if n < 0:\n             return False\n         \n         if bin(n).replace('0b','').count('1') == 1:\n             return True\n         return False", "class Solution:\n     def isPowerOfTwo(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         return n>0 and (not n&(n-1))"]