["from re import findall; repeat_adjacent=lambda s: len(findall(r\"((.)\\2+(?!\\2)){2,}\",s))", "import re\nrepeat_adjacent=lambda s:sum(len(set(i[0]))>1 for i in re.findall(r'((([a-z])\\3+){2,})', s))", "from functools import partial\nfrom itertools import groupby\nfrom operator import ne\n\ndef repeat_adjacent(s):\n    xs = [sum(1 for _ in grp) for key, grp in groupby(s)]\n    return sum(key and sum(1 for _ in grp) > 1 for key, grp in groupby(xs, key=partial(ne, 1)))\n", "from itertools import groupby\ndef repeat_adjacent(string):\n    return sum(1 for k, g in (groupby(min(2, len(list(grp))) for _, grp in groupby(string))) if k == 2 and len(list(g)) > 1)", "from itertools import groupby\n\ndef repeat_adjacent(string):\n    return(sum(1 for k,g in groupby((sum(1 for _ in g) for _,g in groupby(string)),key=lambda l:l>1) if k==True and next(g) and next(g,None)))", "def repeat_adjacent(string):\n    a = list(string)\n    b = []\n    if len(a) >= 2:\n        if a[1] ==a[0]:\n            b.append(1)\n        for i in range(2, len(a)):\n            if a[i-1] == a[i] and a[i-1] != a[i-2]:\n                b.append(1)\n            elif a[i-1] != a[i]:\n                b.append(0)\n        c = []\n        if b[0] == 1:\n            c.append(1)\n        for i in range(1, len(b)):\n            if b[i] == 1:\n                c.append(1)\n            else:\n                if b[i-1] == 0:\n                    c.append(0)\n        k = 0\n        for i in range(1, len(c)-1):\n            if c[i] == 1 == c[i-1] and c[i+1] == 0:\n                k += 1\n        if c[len(c)-1] == 1 == c[len(c)-2]:\n            k += 1\n    else:\n        k = 0\n    return k", "from re import findall\n\ndef repeat_adjacent(s):\n    return len(findall(r\"((.)\\2+(?!\\2)){2,}\",s))", "def repeat_adjacent(string):\n    a,b,c,d=0,[],'',0\n    for i in range(a,len(string)-1):\n        if string[i]==string[i+1]:\n            continue\n        else:\n            b.append(string[a:i+1])\n            a=i+1\n    b.append(string[-(len(string)-a):])\n    \n    for j in b:\n        if len(j)>1:\n            c+=j\n        else:\n            c+='*'\n    \n    for k in c.split('*'):\n        if len(set(k))>1:\n            d+=1\n    return d", "import re\nfrom itertools import groupby\n\ndef repeat_adjacent(s):\n    return sum(x and next(y) and bool(next(y, 0)) for x, y in groupby((x[0] for x in re.findall(r\"((.)\\2*)\", s)), key=lambda x: len(x) > 1))", "def repeat_adjacent(string):\n    check = ''\n    big_group = []\n    for i in range(1,len(string)-1):\n        if (string[i-1] == string[i] or string[i] == string[i+1]):\n            check += string[i]\n        else:\n            if len(set(check)) > 1:\n                big_group.append(check) \n            check =''\n    if len(set(check)) > 1:\n        big_group.append(check)\n    return len(big_group)\n"]