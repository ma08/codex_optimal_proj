["from ipaddress import IPv4Address\n\ndef numberAndIPaddress(s):\n    return str(int(IPv4Address(s))) if '.' in s else str(IPv4Address(int(s)))", "from ipaddress import IPv4Address\n\ndef numberAndIPaddress(string):\n    if '.' in string:\n        return str(int(IPv4Address(string)))\n    return str(IPv4Address(int(string)))", "def numberAndIPaddress(s):\n    if '.' in s:\n        ans = str(int(''.join(\"{:0>8b}\".format(int(n)) for n in s.split('.')), 2))\n    else:\n        s32 = \"{:0>32b}\".format(int(s))\n        ans = '.'.join(str(int(s32[8*i:8*(i+1)], 2)) for i in range(4))\n    return ans", "def numberAndIPaddress(s):\n    if \".\" in s:\n        binary=\"\".join(\"{:08b}\".format(int(i)) for i in s.split(\".\"))\n        return str(int(binary, 2))\n    else:\n        binary=\"{:032b}\".format(int(s))\n        res=[str(int(binary[i:i+8], 2)) for i in range(0, len(binary), 8)]\n        return \".\".join(res)", "def ipToNum(ip):\n    return str(int(''.join(f'{n:08b}' for n in map(int, ip.split('.'))), 2))\n\ndef numToIp(nums):\n    b = f'{int(nums):032b}'\n    return '.'.join(map(str, [int(b[i:i+8], 2) for i in (0, 8, 16, 24)]))\n\ndef numberAndIPaddress(s):\n    if '.' in s:\n        return ipToNum(s)\n    elif '.' not in s:\n        return numToIp(s)", "def numberAndIPaddress(s):\n    ip2num = lambda ip: sum(el * (256 ** (4 - i)) for i, el in enumerate(map(int, ip.split('.')), 1))\n    num2ip = lambda n: '.'.join(map(str, [n >> 24, n >> 16 & 255, n >> 8 & 255, n & 255]))\n    return str(ip2num(s)) if s.find('.') > 0 else num2ip(int(s))", "def ip_to_int(s):\n    return str(int(\"\".join(f\"{int(n):08b}\" for n in s.split(\".\")), 2))\n\ndef int_to_ip(s):\n    return \".\".join(str(int(b, 2)) for b in (f\"{int(s):032b}\"[i:i+8] for i in range(0, 32, 8)))\n\ndef numberAndIPaddress(s):\n    return ip_to_int(s) if \".\" in s else int_to_ip(s)", "from ipaddress import ip_address\n\ndef numberAndIPaddress(s):\n     return str(int(ip_address(s)) if '.' in s else ip_address(int(s)))", "import socket\nimport struct\n\ndef numberAndIPaddress(s):\n    if '.' in s:\n        return str(struct.unpack('>I', socket.inet_aton(s))[0])\n    else:\n        return socket.inet_ntoa(struct.pack('>I', int(s)))", "from ipaddress import IPv4Address\ndef numberAndIPaddress(s):\n    return str(int(IPv4Address(s)) if '.' in s else IPv4Address(int(s)))"]