["from functools import reduce\nfrom operator import mul\n\ndef multi(l_st):\n    return reduce(mul,l_st)\ndef add(l_st):\n    return sum(l_st)\ndef reverse(s):\n    return s[::-1]", "import functools\n\ndef multi(l_st):\n    return functools.reduce(lambda x, y: x * y, l_st)\ndef add(l_st):\n    return functools.reduce(lambda x, y: x + y, l_st)\ndef reverse(string):\n    return string[::-1]", "from functools import reduce\n\ndef multi(lst):\n    return reduce(lambda m, n: m * n, lst, 1)\n    \ndef add(lst):\n    return sum(lst)\n    \ndef reverse(string):\n    return string[::-1]", "def multi(l_st):    \n    count = 1\n    for x in l_st:\n        count *= x\n    return count\n    \ndef add(l_st):\n    count = 0\n    for x in l_st:\n        count += x\n    return count\n    \ndef reverse(string):\n    return string[::-1]", "from functools import reduce\ndef multi(l_st):\n    return reduce((lambda x, y: x * y), l_st)\ndef add(l_st):\n    return sum(l_st)\ndef reverse(string):\n    return string[::-1]", "from numpy import sum as add, prod as multi\nreverse = lambda s: s[::-1]", "def multi(l_st):\n    x=1\n    for ele in l_st:\n        x*=ele\n    return x\n        \ndef add(l_st):\n    return sum(l_st)\ndef reverse(l_st):\n    return l_st[::-1]", "def multi(l_st):\n    m = 1\n    for i in l_st:\n        m*=i\n    return m\ndef add(l_st):\n    return sum(l_st)\ndef reverse(string):\n    return string[::-1]", "add, reverse, multi = sum, lambda s: s[::-1], lambda l: __import__(\"functools\").reduce(int.__mul__, l)"]