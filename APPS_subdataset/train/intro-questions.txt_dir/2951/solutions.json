["from math import ceil, log\n\ndef how_many_measurements(n):\n    return ceil(log(n, 3))", "def how_many_measurements(n):\n  if n>1: \n      return 1 + how_many_measurements(n/3) \n  return 0", "import math\n\ndef how_many_measurements(n):\n    return math.ceil(math.log(n, 3))", "from math import log, ceil\n\ndef how_many_measurements(n):\n    return ceil(log(n, 3))\n", "def how_many_measurements(n):\n    # Split coins in three equal sized groups,\n    # one measurement will tell which of the groups contains\n    # the fake coin, when less than 3 coins is in a group, one\n    # measurement is required to determine which coin is fake\n    if n == 1:\n        return 0\n    elif n <= 3:\n        return 1 \n    n_coins_in_sub_group = n / 3\n    return how_many_measurements(n_coins_in_sub_group) + 1", "def how_many_measurements(n):\n    x = 0\n    while n > 1:    \n        if n % 2 == 0:\n            n = n / 3\n            first = round(n)\n            if n > first:\n                n = first + 1\n            x += 1\n        else:\n            n = n / 3\n            x += 1\n    return x", "import math\n\ndef how_many_measurements(n):\n    count = 0\n    while n > 1:\n        n = math.ceil(n/3)\n        count += 1\n    return count", "def how_many_measurements(n):\n    exp = 0\n    while 3**exp < n:\n        exp += 1\n    return exp", "def how_many_measurements(n):\n  if n>1:\n      return 1 + how_many_measurements( n//3 + int(0.5 + (n%3)/2) ) \n  return 0", "def how_many_measurements(n, c=0): return how_many_measurements(n-2*n//3, c+1) if n > 1 else c"]