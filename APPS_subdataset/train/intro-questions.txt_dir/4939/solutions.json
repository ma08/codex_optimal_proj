["def coffee_limits(year, month, day):\n    h = int(f'{year:04}{month:02}{day:02}')\n    return [limit(h, 0xcafe), limit(h, 0xdecaf)]\n    \ndef limit(h, c):\n    for i in range(1, 5000):\n        h += c\n        if 'DEAD' in f'{h:X}':\n            return i\n    return 0\n\n", "def coffee_limits(year, month, day):\n    health = int(f\"{year:04d}{month:02d}{day:02d}\")\n    drinks = (int(d, 16) for d in (\"cafe\", \"decaf\"))\n    return [next((cup for cup in range(1, 5001) if \"dead\" in f\"{health + drink*cup:x}\"), 0) for drink in drinks]\n", "CAFE, DECAF = 51966, 912559\ndef coffee_limits(y, m, d):\n    n = int(''.join([str(y), str(m).zfill(2), str(d).zfill(2)]))\n    A = lambda x : next((i for i in range(1,5001) if 'dead' in hex(n+(i*x))[2:]),0)\n    return [A(CAFE), A(DECAF)]", "def coffee_limits(year, month, day):\n    health = int(f\"{year:04d}{month:02d}{day:02d}\")\n    limit = lambda drink: next((cup for cup in range(1, 5001) if \"dead\" in f\"{health + drink*cup:x}\"), 0)\n    return [limit(int(drink, 16)) for drink in (\"cafe\", \"decaf\")]", "import re\ndef coffee_limits(year, month, day):\n    # Your code here!\n    h_cafe = str(year)\n    \n    if len(str(month)) == 1:\n        h_cafe += \"0\" + str(month)\n    else:\n        h_cafe += str(month)\n    \n    if len(str(day)) == 1:\n        h_cafe += \"0\" + str(day)\n    else:\n        h_cafe += str(day)\n    \n    h_cafe = int(h_cafe)\n    h_decaf = h_cafe\n    n = 0\n    cafe = 0\n    decaf = 0\n    print(h_cafe)\n    while (n < 5000):\n        h_cafe += 51966\n        h_decaf += 912559\n        n += 1\n        if \"dead\" in hex(h_cafe):\n            if cafe == 0 :\n                cafe = n\n        elif \"dead\" in hex(h_decaf):\n            if decaf == 0:\n                decaf = n\n    return [cafe,decaf]", "def coffee_limits(year, month, day):\n    health_no = int('{:04}{:02}{:02}'.format(year, month, day))\n    cafe, decaf = health_no, health_no\n    cups = 0\n    for i in range(5000):\n        cafe += 0xCAFE\n        cups += 1\n        if 'DEAD' in '{:08X}'.format(cafe):\n            break\n    cafe = 0 if cups == 5000 else cups\n\n    cups = 0\n    for i in range(5000):\n        decaf += 0xDECAF\n        cups += 1\n        if 'DEAD' in '{:08X}'.format(decaf):\n            break\n    decaf = 0 if cups == 5000 else cups\n    return [cafe, decaf]", "def decToHex(n):\n    hexChart = {0:'0',1:'1',2:'2',3:'3',4:'4',5:'5',6:'6',7:'7',8:'8',9:'9',10:'A',11:'B',12:'C',13:'D',14:'E',15:'F'}\n    hexValue=''\n    while n:\n        hexValue = hexChart[n%16] + hexValue\n        n //=16\n    return hexValue\n\ndef hexToDec(string):\n    hex = \"0123456789ABCDEF\"\n    total=0\n    for index, i in enumerate(string):\n        value = hex.index(i)\n        power = len(string) - (index+1)\n        total+= (value)*(16**power)\n\n    return total\n\ndef coffee_limits(year,month,day):\n    cafe = hexToDec('CAFE')\n    cafeCups=0\n    h = int(str(year) + str(month).zfill(2) + str(day).zfill(2))\n\n    for i in range(5000):\n        h += cafe\n        cafeCups+=1\n        if 'DEAD' in decToHex(h):\n            break\n            \n    h = int(str(year) + str(month).zfill(2) + str(day).zfill(2))\n    print (h)\n\n    decaf = hexToDec('DECAF')\n    decafCups=0\n    for i in range(5000):\n        h+= decaf\n        decafCups+=1\n        if 'DEAD' in decToHex(h):\n            break\n\n    return [cafeCups%5000,decafCups%5000]", "def coffee_limits(year, month, day):\n    CAFE = 51966\n    DECAF = 912559\n    cafes_allowed = []\n    decafs_allowed = []\n    year = str(year)\n    if month < 10:\n        month = '0' + str(month)\n    else:\n        month = str(month)\n    if day < 10:\n        print(day)\n        day = '0' + str(day)\n    else:\n        day = str(day)\n        \n    health_number = int(year+month+day)\n    for i in range(1, 5001):\n        CAFE_total = health_number + (i*CAFE)\n        DECAF_total = health_number + (i*DECAF)\n        CAFE_hex_total = hex(CAFE_total)\n        DECAF_hex_total = hex(DECAF_total)\n        if 'dead' in CAFE_hex_total:\n            cafes_allowed.append(i)\n        if 'dead' in DECAF_hex_total:\n            decafs_allowed.append(i)\n    print(cafes_allowed)\n    if not cafes_allowed:\n        cafes_allowed = 0\n    else:\n        cafes_allowed = cafes_allowed[0]\n    if not decafs_allowed:\n        decafs_allowed = 0\n    else:\n        decafs_allowed = decafs_allowed[0]\n    return [cafes_allowed, decafs_allowed]", "def test(number, coffee):\n    for i in range(1,5001):\n        if 'dead' in hex(number+i*coffee):\n            return i\n    return 0\n    \n\ndef coffee_limits(year, month, day):\n    number = year*10000+month*100+day\n    return [test(number, coffee) for coffee in (0xCAFE, 0xDECAF)]\n", "def coffee_limits(year, month, day):\n    h=year*10000+month*100+day\n    c=0\n    for i in range(1,5001):\n        if 'dead' in hex(h+i*0xcafe):\n            c=i\n            break\n    d=0\n    for i in range(1,5001):\n        if 'dead' in hex(h+i*0xdecaf):\n            d=i\n            break\n    return [c,d]"]