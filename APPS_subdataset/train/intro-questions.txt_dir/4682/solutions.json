["import re\nfrom datetime import date, timedelta\n\ndef date_correct(text):\n    if not text:\n        return text\n    try:\n        d, m, y = map(int, re.match(r'^(\\d{2})\\.(\\d{2})\\.(\\d{4})$', text).groups())\n        mo, m = divmod(m - 1, 12)\n        return (date(y + mo, m + 1, 1) + timedelta(days=d - 1)).strftime('%d.%m.%Y')\n    except AttributeError:\n        return None", "import datetime as dt\nimport re\n\ndef date_correct(date):\n    if isinstance(date,str) and re.fullmatch(r'\\d\\d\\.\\d\\d\\.\\d{4}', date):\n        d,m,y = map(int,date.split('.'))\n        nM,m  = divmod(m-1,12) ; y+=nM ; m+=1\n        d     = dt.date(y,m,1) + dt.timedelta(days=d-1)\n        return f'{d.day:02}.{d.month:02}.{d.year:02}'\n    if date=='': return \"\"", "from datetime import date, timedelta\nget_date = __import__(\"re\").compile(r\"(\\d\\d)\\.(\\d\\d)\\.(\\d\\d\\d\\d)\").search\n\ndef date_correct(my_date):\n    if not my_date: return my_date\n    try: d, m, y = map(int, get_date(my_date).groups())\n    except AttributeError: return\n    return (date(y+(m-1)//12, (m-1)%12+1, 1) + timedelta(d-1)).strftime(\"%d.%m.%Y\")", "import datetime\nimport re\ndef date_correct(date):\n    if not date:\n        return date\n    if not re.fullmatch(r'(\\d\\d\\.){2}\\d{4}',date):\n        return None\n    d,m,y = [int(x) for x in date.split('.')]\n    if m>12:\n        y += m // 12\n        m %= 12\n        if not m:\n            m = 12\n            y -= 1\n    return (datetime.datetime(year=y,month=m,day=1)+datetime.timedelta(days=d-1)).strftime(\"%d.%m.%Y\")\n", "from datetime import date,timedelta\nimport re\n\ndef date_correct(s):\n    if s=='': return ''\n    try: m=re.match(r'\\A(\\d{2})\\.(\\d{2})\\.(\\d{4})\\Z',s)\n    except: return None\n    if not m: return None\n    d,m,y=map(int,m.groups())\n    d-=1\n    cy,m=divmod(m-1,12)\n    return (date(y+cy,m+1,1)+timedelta(d)).strftime('%d.%m.%Y')", "def date_correct(date):\n    if date in (\"\", 0, None):\n        return date\n    \n    from re import findall\n    date = findall(\"\\A(\\d{2})\\.(\\d{2})\\.(\\d{4})\\Z\", date)\n    \n    if len(date) == 0:\n        return None\n        \n    import datetime\n    date = [int(x) for x in date[0][::-1]]\n    date[0] += (date[1] - 1) // 12\n    date[1] = (date[1] - 1) % 12 + 1\n    \n    newdate = datetime.date(date[0], date[1], 1)\n    newdate += datetime.timedelta(days = date[2] - 1)\n    \n    return \"{0:02d}.{1:02d}.{2}\".format(newdate.day, newdate.month, newdate.year)", "from re import match; from datetime import date as ymd, timedelta; date_correct=lambda date: \"\" if date==\"\" else None if date==None or not match(\"\\d\\d\\.\\d\\d\\.\\d{4}\",date or \"\") else (lambda d,m,y: (ymd(y+(m-1)//12,(m-1)%12+1,1)+timedelta(d-1)).strftime(\"%d.%m.%Y\"))(*map(int, date.split(\".\")))", "from datetime import datetime,timedelta\nfrom re import fullmatch\ndef date_correct(date):\n    if isinstance(date,str):\n        if not date:return \"\"\n        if fullmatch(\"\\d{2}\\.\\d{2}\\.\\d{4}\",date):\n            day,month,year=map(int,date.split(\".\"))\n            extra_year,month=divmod(month-1,12)\n            return (datetime(year+extra_year,month+1,1)+timedelta(day-1)).strftime(\"%d.%m.%Y\")", "import datetime\ndef date_correct(date):\n    print(date)\n    if date is None or date is '':\n        return date\n    try:\n        day, month, year = date.split('.')\n        if len(day) is not 2 or len(month) is not 2:\n            return None\n        day = int(day)\n        month = int(month)\n        year = int(year)\n    except:\n        return None\n    extra_years = month // 12\n    if month >= 12 and month % 12 == 0:\n        extra_years -=1\n    year = year + extra_years\n    correct_months = month % 12\n    if correct_months == 0:\n        correct_months = 12\n    print(date, year, correct_months)\n    result = datetime.datetime(year=year, month=correct_months, day=1)\n    result += datetime.timedelta(days=day-1)\n    print(result)\n    return '.'.join([str(value).zfill(2) for value in [result.day, result.month, result.year] ])", "import re\n\ndef date_correct(date):\n    if not date : return date\n    days=[31,28,31,30,31,30,31,31,30,31,30,31]\n    if not bool(re.match(r\"\\d{2}\\.\\d{2}\\.\\d{4}\",date)) : return None\n    d,m,y=list(map(int,date.split(\".\")))\n    \n    while m>12 or d>days[m-1]:\n        y+=(m-1)//12\n        m=(m-1)%12+1\n        if (y%4==0 and y%100!=0) or y%400==0:\n            days[1]=29\n        else : days[1]=28\n        if d>days[m-1]:\n            d-=days[m-1]\n            m+=1\n            \n    return \"{:02}.{:02}.{}\".format(d,m,y)\n"]