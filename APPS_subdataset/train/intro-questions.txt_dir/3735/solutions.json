["def find_missing_numbers(arr):\n    if not arr:\n        return []\n    return sorted(set(range(arr[0] + 1, arr[-1])).difference(arr))\n", "def find_missing_numbers(arr):\n    return [x for x in range(arr[0], arr[-1]+1) if x not in arr] if arr else []", "def find_missing_numbers(arr):\n    return [n for n in range(arr[0], arr[-1]) if n not in arr] if arr else []", "def find_missing_numbers(arr):\n    return [x for x in range(arr[0], arr[-1]) if x not in arr] if arr else []", "import itertools\n\n\ndef find_missing_numbers(arr):\n    return list(itertools.chain.from_iterable(\n        range(a+1, b)\n        for a, b in zip(arr, arr[1:])\n    ))", "def find_missing_numbers(arr):\n    if not arr: return arr\n    out,it = [],iter(arr)\n    ref    = next(it)\n    for v in range(arr[0],arr[-1]):\n        if v==ref: ref = next(it)\n        else:      out.append(v)\n    return out", "def find_missing_numbers(arr):\n    if len(arr) < 2:\n        return []\n    return sorted(set(list(range(min(arr), max(arr)))) - set(arr))", "def find_missing_numbers(arr):\n    if len(arr):\n        return [i for i in range(arr[0],arr[-1]) if i not in arr]\n    else :\n        return []", "def find_missing_numbers(arr):\n    try:\n        return [i for i in range(arr[0],arr[len(arr)-1]) if i not in arr]\n    except IndexError:\n        return []"]