["from collections import Counter\n\ndef create_anagram(s, t):\n    return sum((Counter(s) - Counter(t)).values())", "def create_anagram(s, t):\n    return sum(max(0, s.count(c) - t.count(c)) for c in set(s))", "def create_anagram(s, t):\n    for c in s: t = t.replace(c, \"\", 1)\n    return len(t)", "def create_anagram(s, t):\n    \n    return sum([s.count(x)- t.count(x) if s.count(x)> t.count(x) else 0 for x in set(s)])", "def create_anagram(s, t):\n    return sum(max(t.count(c) - s.count(c), 0) for c in set(t))", "def create_anagram(s, t):\n    return sum(abs(s.count(c)-t.count(c))for c in set(s+t))/2", "def create_anagram(s, t):\n    for a in s:\n        t = t.replace(a, '', 1)\n    return len(t)", "def create_anagram(s, t):\n    s = list(s)\n    for letter in t:\n        if letter in s:\n            s.remove(letter)\n    return len(s)", "from collections import Counter\ndef create_anagram(s,t):\n    c_s,c_t=Counter(s),Counter(t)\n    return min(sum((c_s-c_t).values()),sum((c_t-c_s).values()))", "from collections import Counter\n\ndef create_anagram(s, t):\n    cs, ct = Counter(s), Counter(t)\n    return sum(n for _, n in (ct - cs).items())"]