["class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n    \n    #    last = len(arr)\n    #    total = 0\n     #   for start in range(len(arr)):\n     #       end = start\n     #       while end < last:\n     #           total += sum(arr[start:end+1])\n     #           end += 2   '''\n     #       return total\n    \n        total = 0\n        for i in range(len(arr)):\n            totalisubarrays = (len(arr) - i) * (i+1) #this represent total number of subarrays in list that has either i as start or end.\n            if totalisubarrays % 2 == 1:\n                totalisubarrays += 1\n            oddisubarrays = totalisubarrays//2\n            total += arr[i]*oddisubarrays\n        return total\n        \n", "class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        ans = 0\n        n = len(arr)\n        for i, j in enumerate(arr):\n            ans += ((i + 1) * (n - i) + 1) // 2 * j\n        return ans\n            \n", "class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        \n        total = 0\n        length = 1\n        \n        while length <= len(arr):\n            for i in range(len(arr)-length+1):\n                total += sum(arr[i:i+length])\n            length += 2\n            \n        return total", "class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        l=len(arr)\n        s=0\n        for i in range(l):\n            for j in range(i+1,l+1,2):\n                subarr=arr[i:j]\n                s+=sum(subarr)\n        return s\n", "class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        total = 0\n        size  = len(arr)\n\n        for n in range(1, size + 1, 2):\n            for i in range(size - (n - 1)):\n                total += sum(arr[i:i+n])\n\n        return total", "class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        li = []\n        sumv = 0\n        n = len(arr)\n        for i in range(1, n + 1, 2):\n            li.append(i)\n        for i in li:\n            for j in range(len(arr)):\n                if i + j <= n:\n                    sumv += sum(arr[j:j + i])\n                else:\n                    break\n        return sumv\n", "class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        l = len(arr)\n        sumtotal = 0\n        for i in range (1,l+1,2):\n            for j in range(1,l+1):\n                if (j+i-1 < l+1):\n                    sumtotal += sum(arr[j-1:j+i-1])\n        return(sumtotal)\n                \n", "class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        res = 0\n        n = len(arr)\n        \n        for k in range(1, n + 1, 2):\n            for i, v in enumerate(arr):\n                res += v * min(n - k + 1, k, i + 1, n - i)\n        \n        return res", "class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        total_sum = 0\n        sum_arr = [[0] * (len(arr) + 1) for i in range (len(arr))]\n        for i in range (len(arr)):\n            for j in range (len(arr) - i):\n                start = j\n                end = j + i + 1\n                sub_sum = 0\n                if (end - start) == 1:\n                    sum_arr[start][end] = arr[start]\n                    sub_sum = arr[start]\n                else:\n                    sub_sum = arr[start] + sum_arr[start + 1][end]\n                    sum_arr[start][end] = sub_sum\n                if ((end - start) % 2 == 1):\n                    total_sum += sub_sum\n        return total_sum\n", "class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        if arr == []:\n            return 0\n        \n        sum_ = 0\n        \n        for i in range(len(arr)):\n            for j in range(i + 1, len(arr) + 1):\n                val = arr[i : j]\n                if len(val) % 2 != 0:\n                    sum_ += sum(val)\n        \n        return sum_", "class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        total_sum = 0\n        for i in range (len(arr)):\n            for j in range (len(arr) - i):\n                start = j\n                end = j + i + 1\n                sub_arr = arr[start:end]\n                if ((end - start) % 2 == 1):\n                    total_sum += sum(sub_arr)\n        return total_sum\n", "class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        result = 0\n        for i in range(1, len(arr) + 1, 2):\n            for j in range(0, len(arr) + 1 - i):\n                print(j, j + i)\n                result += sum(arr[j : j+i])\n                \n        return result", "class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        ret = 0\n        for i in range(len(arr)):\n            ret += arr[i] * ceil((len(arr) - i ) * (i + 1) /2)\n        return ret\n    \n    # 1: 3\n    # 4: 3\n    # 2: 5\n    # 5: 3\n#     # 3: 3\n    \n#     (5-0)//2 -> 2\n#     0//2-> 0\n#     (5-1)//2 -> 2\n#     1//2 -> 0\n#     (5-2)//2 -> 1\n#     2//2 -> 1\n", "class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        xdict = {}\n        print(arr[0:1])\n        for i in range(0, len(arr)):\n            sumx = 0\n            for j in range(0,len(arr)-i):\n                sumx = sumx + sum(arr[j:j+i+1])\n            xdict[i] = sumx\n        \n        print(xdict)\n        sumx = 0\n        for i in xdict:\n            if i % 2 == 0:\n                sumx = sumx + xdict[i]\n            \n        return sumx", "class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        s=0\n        for i in range(1,len(arr)+1,2):\n            for j in range(len(arr)):\n                if len(arr[j:j+i])==i:\n                    s=s+sum(arr[j:j+i])\n                    # print(arr[j:j+i],sum(arr[j:j+i]))\n        return s\n", "class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        total = 0\n        \n        for i in range(len(arr)):\n            for j in range(len(arr)):\n                a = arr[i:j + 1]\n                \n                if not len(a) % 2 == 0:\n                    total += sum(a)\n        return total", "class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        m=len(arr)\n        s=0\n        a=[]\n\n        for i in range(m):\n            t=0\n            while t<=m:\n                a=arr[i:t]\n                t+=1\n                if len(a)%2!=0:\n                    s=s+sum(a)\n        return(s)\n", "class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        arrayLength = len(arr) + 1\n        oddLengthSum = 0\n        \n        if (arrayLength <= 2):\n            return sum(arr)\n        \n        for subArrayLength in range(arrayLength)[1::2]:\n            for i in range(arrayLength - subArrayLength):\n                for value in arr[i:i + subArrayLength]:\n                    oddLengthSum += value\n        \n        return oddLengthSum\n", "class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        ans = 0\n        i = 0\n        j = 1\n        while True:\n            if i > len(arr)-1:\n                break\n            if len(arr[i:j]) % 2 != 0:\n                ans = ans + sum(arr[i:j])\n            j += 1\n            if j > len(arr):\n                i += 1\n                j = i+1\n        return ans\n            \n", "class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n#         subArrayLengths = []\n#         for i in range(len(arr)):\n#             if (i+1)%2!=0:\n#                 subArrayLengths.append(i+1)\n#         print(subArrayLengths)\n        \n#         subSum=0\n#         totalSum=0\n#         totalSum=0\n#         subSum=0\n#         flag=True\n#         subIndex=0\n#         while flag==True:\n           \n            \n        \n        \n#             if subIndex==len(arr) or subIndex==len(arr)-1:\n#                 flag = False\n#             else:\n#                 subIndex+=2\n#         return totalSum\n       \n        flag = True \n        i=1\n        subSum = 0\n        totalSum = 0\n        while flag:\n            subFlag = True\n            start = 0\n            end = i\n            while subFlag:\n                for j in arr[start:end]:\n                    subSum+=j\n                if end == len(arr):\n                    totalSum += subSum\n                    print((subSum, totalSum))\n\n                    subSum = 0\n                    subFlag=False\n                else:\n                    start +=1\n                    end += 1\n            if i == len(arr) or i == len(arr)-1:\n                flag = False\n            else:\n                i += 2\n        \n        return totalSum\n", "class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        s = 0\n        s+=sum(arr)\n    \n        for j in range(3, len(arr)+1, 2):\n            for i in range(0, len(arr)):\n                if(len(arr[i:i+j])%2 != 0 and len(arr[i:i+j]) != 1 and                     i+j<=len(arr)):\n                    s+=sum(arr[i:i+j])\n        return s", "class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        ret = 0\n        subArrs = []\n        starting = 0\n        ending = len(arr)\n\n        for i in range(len(arr)):\n            while (ending >= starting):\n                if ((ending - starting) % 2 != 0):\n                    subArrs += [arr[starting:ending]]\n                    ending -= 2\n                else:\n                    ending -= 1\n            starting += 1\n            ending = len(arr)\n\n        for i in subArrs:\n            for j in i:\n                ret += j \n        \n        return ret", "class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        res, n = 0, len(arr)\n        for i, a in enumerate(arr):\n            res += ((i + 1) * (n - i) + 1) // 2 * a\n        return res\n", "class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        return self.backtrack(arr, 0, 0, 0)\n    \n    def backtrack(self, arr,i,end, s):\n        if end == len(arr):\n            return s\n        elif i > end:\n            return self.backtrack(arr, 0, end+1,s)\n        else:\n            if len(arr[i:end+1]) % 2 != 0:\n                s += sum(arr[i:end+1])\n                return self.backtrack(arr, i+1, end,s)\n            else:\n                return self.backtrack(arr, i+1, end,s)", "class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        res = sum(arr)\n        for i in range(0, len(arr)):\n            count = 2\n            while (i+count) < len(arr):\n                for j in range(i,count+i+1):\n                    res += arr[j]\n                count += 2\n        return res\n", "class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        total = 0\n        size  = len(arr)\n\n        for n in range(1, size + 1, 2):\n            for i in range(size - (n - 1)):\n                for k in range(i, i + n):\n                    # total += sum(arr[i:i+n])\n                    total += arr[k]\n\n        return total", "class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        total = 0\n        for length in range(1, len(arr)+1):\n            if length%2 == 0:\n                continue\n            for i_start, start in enumerate(arr):\n                if i_start + length -1 < len(arr):\n                    for i in range(i_start, i_start+length):\n                        total += arr[i]\n                else:\n                    break\n        return total", "class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        \n        ans = 0\n        for i in range(1, len(arr) + 1, 2):\n            for j in range(len(arr) + 1 - i):\n                for k in range(i):\n                    ans += arr[j + k]\n        return ans\n", "class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        if len(arr) == 1:\n            return arr[0]\n        result = 0\n        l = r = 0\n\n        def getSum(array, start, end):\n            local_sum = 0\n            for i in range(start, end):\n                local_sum += array[i]\n            return local_sum\n\n        while l < len(arr) - 1:\n            if r > len(arr) - 1:\n                l += 1\n                r = l\n            result += getSum(arr, l, r+1)\n            r += 2\n\n        return result\n", "class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        if len(arr) == 1:\n            return (arr[0])\n        result = 0\n        l = r = 0\n        def getSum(array, start, end):\n            local_sum = 0\n            for i in range(start,end):#\n                local_sum += array[i]#1,\n            return local_sum\n\n        while l < len(arr) - 1:#0<4\n            if r > len(arr) - 1:#1>4\n                l += 1\n                r = l\n            result += getSum(arr, l, r+1)#arr,0,2\n            r += 2\n        return result\n\n", "class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        cur_sum, prefix_sum = 0, [0] * (len(arr) + 1)\n        ret = 0\n        for i in range(1, len(arr)+1):\n            cur_sum += arr[i-1]\n            prefix_sum[i] = cur_sum\n            for j in range(1, i+1, 2):\n                # print([i, j])\n                ret += prefix_sum[i] - prefix_sum[i-j]\n        return ret", "class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        n = len(arr)\n        s = 0\n        for i in range(n):\n            for j in range(1, n+1, 2):\n                if i + j - 1 < n:\n                    for x in range(j):\n                        s += arr[x+i]\n        return s", "class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        ans=0\n        N=len(arr)\n        sumv=(N+1)*[0]\n        for i in range(N):\n            sumv[i+1]=sumv[i]+arr[i]\n        ans=0\n        for i in range(1,N+1):\n            ans+=(sumv[i]*((i+1)//2-(N-i+1)//2))\n        return ans", "class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        total = 0\n        subArrLen = 1\n        while subArrLen <= len(arr):\n            i = 0\n            j = subArrLen\n            subTotal = sum(arr[:j])\n            total += subTotal\n            while j < len(arr):\n                subTotal -= arr[i]\n                subTotal += arr[j]\n                total += subTotal\n                i += 1\n                j += 1\n            subArrLen += 2\n            \n        return total\n", "class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        n, sum_odd = len(arr), 0\n        p_sum = [0] * ( n + 1)\n        for i, a in enumerate(arr):\n            p_sum[i + 1] = p_sum[i] + a\n        for i, p in enumerate(p_sum):\n            for j in range(i + 1, n + 1, 2):\n                sum_odd += p_sum[j] - p_sum[i] \n        return sum_odd", "class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        n = len(arr)\n        prefix = [0]*(n+1)\n        for i in range(n): prefix[i] = prefix[i-1]+arr[i]\n        ans = 0\n        for s in range(1,n+1,2): \n            for i in range(n):\n                if i+s > n: break\n                ans += prefix[i+s-1] - prefix[i-1]\n        return ans ", "class Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:\n        total=0\n        for i in range(len(arr)):\n            temp=0\n            for j in range (i,len(arr)):               \n                temp+=arr[j] \n                if(j-i)%2 ==0:\n                    total+=temp\n        return total\n"]