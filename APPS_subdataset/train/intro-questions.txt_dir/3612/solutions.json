["from collections import deque\n\ndef loose_change(coins_list, amount_of_change):\n    q = deque([(0, amount_of_change)])\n\n    while q:\n        l, a = q.popleft()\n        if a == 0:\n            return l\n        q.extend((l + 1, a - i) for i in coins_list if a >= i)", "def loose_change(coins_list, amount):\n    solution = [0] + [amount + 1] * amount\n    for atmc in range(1, amount + 1):\n        for coin in coins_list:\n            if coin <= atmc:\n                solution[atmc] = min(solution[atmc], solution[atmc - coin] + 1)\n    return -1 if solution[amount] > amount else solution[amount]", "def loose_change(coins_list, amount_of_change):   \n    n, i, t = 0, 0, amount_of_change\n    coins_list.sort(reverse = True)\n    while amount_of_change >= 0 and i < len(coins_list): \n        if amount_of_change - coins_list[i] >= 0: \n            n += 1\n            amount_of_change -= coins_list[i]\n        else: i += 1\n    return min([int(t/i) for i in coins_list if t % i == 0] + [n])\n    \n'''\nsecond version\ndef loose_change(coins_list, amount_of_change):   \n    coins, i, t = 0, 0, amount_of_change\n    coins_list.sort(reverse = True)\n    while amount_of_change > 0:\n        tem = divmod(amount_of_change, coins_list[i])\n        coins += tem[0]\n        amount_of_change -= tem[0]*coins_list[i]\n        i += 1\n    aa = [int(t/i) for i in coins_list if t % i == 0] + [coins]\n    return min(aa)\n'''", "def loose_change(coins_list, amount_of_change):\n    if len(coins_list) == 1: return amount_of_change\n    return min(\n        loose_change(coins_list[:-1], amount_of_change),\n        amount_of_change // coins_list[-1] + loose_change(coins_list[:-1], amount_of_change % coins_list[-1])\n    )", "def loose_change(c, a):\n    l, n = 0, 0\n    s = sorted([a//i for i in c if i > 1 and a % i == 0])\n    for i in range(len(c)-1, -1, -1):\n        k = (a - l)//c[i]\n        n += k\n        if l + k * c[i] <= a:\n            l += k * c[i]\n    return min(n, s[0]) if s else n\n", "def loose_change(coins, change):\n  return search(sorted(coins, reverse=True), change)\n\ndef search(coins, x, n=0):\n  if x == 0: return n\n  m = 9999\n  for c in coins:\n    if x >= c:\n      q, r = divmod(x, c)\n      m = min(m, search(coins, r, n + q))\n  return m", "def loose_change(coins_list, amount_of_change):\n    coins_amount = [0] + [float('inf')] * amount_of_change\n    for i in range(1, amount_of_change + 1):\n        coins_amount[i] = min(coins_amount[i - c] for c in coins_list if c <= i) + 1\n    return coins_amount[-1]", "from itertools import combinations_with_replacement as combos\n\ndef loose_change(coins_list, amount_of_change):\n    least_list = []\n    for x in range(len(coins_list)):\n        for combo in combos(coins_list, x + 1):\n            if sum(combo) == amount_of_change:\n                least_list.append(len(combo))\n    return min(least_list)", "def loose_change(coins_list, amount_of_change):\n    changes = [1 if n+1 in coins_list else amount_of_change*2 for n in range(amount_of_change)]\n    for i in range(amount_of_change):\n        for c in coins_list:\n            if i+c<amount_of_change: changes[i+c] = min(changes[i+c],changes[i]+1)\n    return changes[amount_of_change-1]", "def loose_change(coins_list, amount_of_change):\n    if amount_of_change == 0:\n        return 0\n    elif amount_of_change < 0 or len(coins_list) == 0:\n        return float('inf')\n    else:\n        with_first_coin = loose_change(coins_list, amount_of_change - coins_list[-1])\n        without_first_coin = loose_change(coins_list[:-1], amount_of_change)\n        return min(with_first_coin + 1, without_first_coin)"]