["def most_frequent_item_count(collection):\n    if collection:\n        return max([collection.count(item) for item in collection])\n    return 0", "from collections import Counter\n\n\ndef most_frequent_item_count(collection):\n    return Counter(collection).most_common(1)[0][1] if collection else 0\n", "def most_frequent_item_count(collection):\n    return max([collection.count(i) for i in collection]+[0])", "from collections import Counter\n\ndef most_frequent_item_count(collection):\n    return max(Counter(collection).values(), default=0)", "def most_frequent_item_count(collection):\n    return bool(collection) and max(collection.count(item) for item in set(collection))", "def most_frequent_item_count(collection):\n    return max(collection.count(i) for i in collection) if collection else 0", "from collections import Counter\ndef most_frequent_item_count(collection):\n    return Counter(collection).most_common()[0][1] if collection else 0", "def getNumAndFreq(myList):\n    curNum = myList.pop(0)\n    freqCurNum = 1\n    while myList and  myList[0] == curNum:\n        myList.pop(0)\n        freqCurNum +=1\n\n    return curNum, freqCurNum\n#---end function getNumAndFreq\n\n\ndef most_frequent_item_count( myList ):\n\n    myList.sort()\n\n    maxNum = 0\n    maxFreq = 0\n    while myList:\n        curNum, curFreq = getNumAndFreq(myList)\n        if maxFreq < curFreq:\n            maxNum = curNum; maxFreq = curFreq\n\n    #return maxNum, maxFreq     #if you want num with max freq\n    return maxFreq\n\n#-----end fucntion\n", "from collections import Counter\nmost_frequent_item_count=lambda c: Counter(c).most_common(1)[0][1] if c else 0"]