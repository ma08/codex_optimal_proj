["from collections import defaultdict\nclass Solution:\n    def uniqueOccurrences(self, arr: List[int]) -> bool:\n        occurences = defaultdict(int)\n        for i in arr:\n            occurences[i] += 1\n        for i in occurences.values():\n            if list(occurences.values()).count(i) > 1:\n                return False\n        return True", "class Solution:\n    def uniqueOccurrences(self, arr: List[int]) -> bool:\n        c = Counter(arr)\n        freq = list(c.values())\n        return len(freq) == len(set(freq))\n        \n        \n", "class Solution:\n    def uniqueOccurrences(self, arr: List[int]) -> bool:\n        l=list(set(arr))\n        for i in range(len(l)):\n            l[i]=arr.count(l[i])\n        if len(l)==len(set(l)):\n            return True\n        else:\n            return False\n        \n", "class Solution:\n    def uniqueOccurrences(self, arr: List[int]) -> bool:\n        occur = {}\n        check = set()\n        for num in arr:\n            if num not in occur:\n                occur[num] = arr.count(num)\n        for num in occur.values():\n            check.add(num)\n        if len(occur) == len(check):\n            return True\n        return False", "class Solution:\n    def uniqueOccurrences(self, arr: List[int]) -> bool:\n        res = False\n        occ=[]\n        n=0\n        for i in range(0,len(arr)):\n            if arr[i] in arr[0:i]:\n                pass\n            else:  \n                n = arr.count(arr[i])\n                occ.append(n)\n\n\n        c=0\n\n        for j in range(0,len(occ)):\n            for k in range(j+1,len(occ)):\n                if occ[j]==occ[k]:\n                    c=1\n                    res=False\n                    break\n                else:\n                    c=0\n                    res=True\n\n            if c==1:\n                break\n        \n        return res\n", "class Solution:\n    def uniqueOccurrences(self, arr: List[int]) -> bool:\n        count = {}\n        for a in arr:\n            if a not in count:\n                count[a] = 1\n            else:\n                count[a] += 1\n        occ = []\n        for c in list(count.values()):\n            if c not in occ:\n                occ.append(c)\n            else:\n                return False\n        return True\n", "class Solution:\n    def uniqueOccurrences(self, arr: List[int]) -> bool:\n        count = Counter(arr)\n        s = set()\n        \n        for k,v in list(count.items()):\n            if v in s:\n                return False\n            else:\n                s.add(v)\n        return True\n            \n            \n", "class Solution:\n    def uniqueOccurrences(self, arr: List[int]) -> bool:\n        from collections import Counter\n        count_dict = dict(Counter(arr))\n        count_occurrences = [j for i,j in list(count_dict.items())]\n        return len(set(arr)) == len(set(count_occurrences))\n", "class Solution:\n    def uniqueOccurrences(self, arr: List[int]) -> bool:\n        occd = {}\n        for n in arr:\n            if n in occd:\n                occd[n] += 1\n            else:\n                occd[n] = 1\n                \n        s = set()\n        for k, v in occd.items():\n            if v in s:\n                return False\n            s.add(v)\n            \n        return True", "class Solution:\n    def uniqueOccurrences(self, arr: List[int]) -> bool:\n        counter = {}\n\n        for i in arr:\n            counter[i] = counter.get(i, 0) + 1\n\n        return len(counter.values()) == len(set(list(counter.values())))", "class Solution:\n    def uniqueOccurrences(self, arr: List[int]) -> bool:\n        \n        dct = {}\n        \n        for num in arr:\n            if num in dct:\n                dct[num]+=1\n            else:\n                dct[num] = 1\n                \n        return len(list(dct.values())) == len(set(dct.values()))\n                \n       \n            \n", "class Solution:\n    def uniqueOccurrences(self, arr: List[int]) -> bool:\n        rec = [arr.count(elem) for elem in set(arr)]\n        return len(rec) == len(set(rec))\n", "class Solution:\n    def uniqueOccurrences(self, arr: List[int]) -> bool:\n        unique = set(arr)\n        sol = []\n        for i in unique:\n            sol.append(arr.count(i))\n        print(sol)\n        for i in sol:\n            if sol.count(i) > 1:\n                return False\n        return True"]