["def house_of_cards(n):\n    if n>=1:\n        return(n+1)*n/2 + (n+2)*(n+1)\n    raise ValueError", "def house_of_cards(n):\n    assert n > 0\n    return (n + 1) * (3 * n + 4) // 2", "def house_of_cards(floors):\n    assert isinstance(floors, int) and floors > 0\n    return (floors + 1) * (3 * floors + 4) // 2", "def house_of_cards(f): return f*(f+1)/2 + (f+1)*(f+2) if f > 0 else error", "def house_of_cards(floors):\n    assert floors>0\n    return sum(2+3*a for a in range(floors+1))\n", "def house_of_cards(n):\n    if n < 1:\n        raise error\n    return 3*(n)*(n+1)//2 + 2*(n+1)", "def house_of_cards(floors):\n    if floors <= 0:\n        raise ValueError('The input must be an integer greater than 0')\n    return 2 + sum(3*i + 2 for i in range(1,floors+1))", "def house_of_cards(floors):\n    if floors < 1: raise Exception()\n    return (floors + 1) * (3*floors + 4) // 2"]