["def SJF(jobs, index):\n    return sum(j for i, j in enumerate(jobs)\n                 if j < jobs[index] or (j == jobs[index] and i <= index))\n", "SJF = lambda jobs, index: sum(j for i, j in enumerate(jobs) if j <= jobs[index] and (jobs[i] != jobs[index] or i <= index))", "def SJF(jobs, index):\n    return sum(n for i, n in enumerate(jobs) if n < jobs[index] or (n == jobs[index] and i <= index))\n\n\n\n    \n\n\n    #jobs = jobs.copy()\n    #cycles = 0\n    #for n in sorted(jobs):\n    #    cycles += n\n    #    i = jobs.index(n)\n    #    jobs[i] = 0\n    #    if i == index:\n    #        break\n    #return cycles\n", "def SJF(jobs, index):\n    return sum(c for i, c in enumerate(jobs) if c < jobs[index] or (c == jobs[index] and i <= index))", "def SJF(jobs, index):\n    return sum(n for i, n in enumerate(jobs) if n < jobs[index] + (i <= index))", "def SJF(jobs, index):\n    return sum(list(filter(lambda x: x<jobs[index],jobs)))+sum(list(filter(lambda x: x==jobs[index], jobs[0:index+1])))", "def SJF(jobs, index):\n    job = jobs[index]\n    return sum(sorted(jobs)[:sorted(jobs).index(job)+1]) + (job * jobs[:index].count(job))", "SJF = lambda arr, j: sum(k for k in arr if k<arr[j]) + (arr[:j+1].count(arr[j]))*arr[j]", "SJF = lambda jobs, index: sum(j for i, j in enumerate(jobs) if j < jobs[index] or (j == jobs[index] and i < index)) + jobs[index]", "from operator import itemgetter\n\ndef SJF(jobs, index):\n    total = 0\n    for i, duration in sorted(enumerate(jobs), key=itemgetter(1)):\n        total += duration\n        if i == index:\n            return total"]