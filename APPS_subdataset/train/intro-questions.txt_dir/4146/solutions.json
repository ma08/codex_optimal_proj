["def is_sorted_and_how(arr):\n    if arr == sorted(arr):\n        return 'yes, ascending' \n    elif arr == sorted(arr)[::-1]:\n        return 'yes, descending'\n    else:\n        return 'no'", "def is_sorted_and_how(arr):\n  if arr == sorted(arr):\n      return 'yes, ascending'\n  elif arr == sorted(arr, reverse=True):\n      return 'yes, descending'\n  return 'no'", "def is_descending(arr):\n    for i in range(len(arr) - 1):\n        if arr[i + 1] > arr[i]: return False\n    return True\n\ndef is_ascending(arr):\n    for i in range(len(arr) - 1):\n        if arr[i + 1] < arr[i]: return False\n    return True\n   \ndef is_sorted_and_how(arr):\n    if is_ascending(arr): return 'yes, ascending'\n    if is_descending(arr): return 'yes, descending'\n    return 'no'", "def is_sorted_and_how(arr):\n    return 'yes, ascending' if arr == sorted(arr) else 'yes, descending' if arr == sorted(arr)[::-1] else 'no'", "from itertools import islice\nimport operator\n\ndef is_sorted_and_how(arr):\n    return (\n        'yes, ascending' if is_sorted_with(arr, operator.le) else\n        'yes, descending' if is_sorted_with(arr, operator.ge) else\n        'no')\n\ndef is_sorted_with(arr, pred):\n    return all(pred(x, y) for x, y in zip(arr, islice(arr, 1, None)))", "def sign(x):\n    return (x > 0) - (x < 0)\n\ndef is_sorted_and_how(arr):\n    s = {sign(y - x) for x, y in zip(arr, arr[1:])}\n    if len(s) == 1 or len(s) == 2 and 0 in s:\n        return \"yes, %s\" % [\"descending\", \"ascending\"][1 in s]  \n    return 'no'", "is_sorted_and_how = lambda a: ['no','yes, ascending','yes, descending'][(sorted(a)==a)+(sorted(a)[::-1]==a)*2]", "def is_sorted_and_how(arr):\n    op, txt = ((int.__le__, 'yes, ascending'), (int.__ge__, 'yes, descending'))[arr[0] > arr[-1]]\n    return all(map(op, arr, arr[1:])) and txt or 'no'", "def is_sorted_and_how(nums):\n    a_or_d = {'a': 'ascending', 'd': 'descending'}\n    diffs = {'d' if b - a < 0 else 'a' for a, b in zip(nums, nums[1:])}\n    return 'yes, {}'.format(a_or_d[diffs.pop()]) if len(diffs) == 1 else 'no'", "def is_sorted_and_how(arr):\n    return next(('yes, {}cending'.format(k) for k,v in {'as':sorted(arr),'des':sorted(arr,reverse=True)}.items() if v == arr),'no')", "def is_sorted_and_how(arr):\n    sorted_arr = sorted(arr)\n    if sorted_arr == arr:\n        return 'yes, ascending'\n    elif sorted_arr[::-1] == arr:\n        return 'yes, descending'\n    return 'no'", "from typing import List\n\n\ndef is_sorted_and_how(arr: List[int]) -> str:\n    # Calculate order between consecutively items\n    order = (a > b for a, b in zip(arr, arr[1:]) if a != b)\n\n    # Check if the first difference notes a ascending order\n    if next(order):\n        # Now check if the rest is in descending order\n        return \"yes, descending\" if all(order) else \"no\"\n\n    # Check if the rest is in ascending order\n    return \"yes, ascending\" if not any(order) else \"no\"\n", "def is_sorted_and_how(arr):\n    if all(x > y for x,y in zip(arr, arr[1:])):\n        return \"yes, descending\"\n    elif all(x < y for x, y in zip(arr, arr[1:])):\n        return \"yes, ascending\"\n    else:\n        return \"no\"", "def is_sorted_and_how(arr):\n    decend_Counter = 0;\n    accend_Counter = 0;\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            decend_Counter += 1\n        if arr[i] < arr[i + 1]:\n            accend_Counter += 1\n    if (decend_Counter == len(arr) - 1):\n        return \"yes, descending\"\n    elif (accend_Counter == len(arr) - 1):\n        return \"yes, ascending\"\n    else:\n        return \"no\"\n                \n    return 1", "def is_sorted_and_how(arr):\n    arrS = sorted(arr)\n    revArrS = sorted(arr, reverse = True)\n    if arr == arrS:\n        return \"yes, ascending\"\n    elif arr == revArrS:\n        return \"yes, descending\"\n    else:\n        return \"no\"", "def is_sorted_and_how(arr):\n    a = sorted(arr)\n    d = sorted(arr, reverse=True)\n    return 'yes, ascending' if arr == a else 'yes, descending' if arr == d else 'no'", "def is_sorted_and_how(arr):\n    s = sorted(arr)\n    return 'yes, ascending' if arr==s else 'yes, descending' if arr == s[::-1] else 'no'", "def is_sorted_and_how(a):\n    if a == sorted(a):return 'yes, ascending'\n    elif a == sorted(a, reverse=True):return 'yes, descending'\n    else:return 'no'", "def is_sorted_and_how(arr):\n    if arr == sorted(arr): return 'yes, ascending'\n    if arr == sorted(arr, reverse=True): return 'yes, descending'\n    return 'no'", "def is_sorted_and_how(arr):\n    if arr == sorted(arr):\n        return 'yes, ascending'\n    elif arr == sorted(arr, reverse = True):\n        return 'yes, descending'\n    else:\n        return 'no'", "from operator import le,ge\n\ndef is_sorted_and_how(arr):\n    if all(map(le,arr,arr[1:])): return 'yes, ascending'\n    elif all(map(ge,arr,arr[1:])): return 'yes, descending'\n    else: return 'no'", "def is_sorted_and_how(arr):\n    sorted_asc = sorted(arr)\n    sorted_desc = sorted_asc[::-1]\n    return 'yes, ascending' if sorted_asc == arr else 'yes, descending' if sorted_desc == arr else \"no\"\n", "def is_sorted_and_how(arr):\n    return (all(arr[i] < arr[i + 1] for i in range(len(arr) - 1)) and \"yes, ascending\" or\n            all(arr[i] > arr[i + 1] for i in range(len(arr) - 1)) and \"yes, descending\" or \"no\")", "def is_sorted_and_how(arr):\n    return {\n        (\"LT\",):\"yes, ascending\",\n        (\"GT\",):\"yes, descending\",\n    }.get(tuple(set(map(lambda x,y: \"LT\" if x<=y else \"GT\", arr, arr[1:]))), \"no\")", "def is_sorted_and_how(arr):\n    counts = 0\n    for index in range(len(arr) - 1):\n      if arr[index] > arr[index + 1 ]:\n         counts += 1\n      elif arr[index] < arr[index + 1 ]:\n        counts -= 1\n        \n    if counts == len(arr) - 1:\n      return \"yes, descending\"\n    elif counts == -len(arr) + 1:\n      return \"yes, ascending\"\n    else:\n      return \"no\"", "def is_sorted_and_how(arr):\n    return 'yes, ascending' if arr == sorted(arr) else 'yes, descending' if arr == sorted(arr, reverse=True) else 'no'", "def is_sorted_and_how(arr):\n    return ('yes, ascending' if sorted(arr)==arr else 'yes, descending') if (sorted(arr)==arr or sorted(arr,reverse=True)==arr) else 'no'", "def is_sorted_and_how(arr):\n    check = [arr[i-1] < arr[i] for i in range(1,len(arr))]\n    true = check.count(True)\n    false = check.count(False)\n    if true == len(arr)-1 and false == 0:\n        return 'yes, ascending'\n    elif false == len(arr)-1 and true ==0:\n        return 'yes, descending'\n    else:\n        return 'no'", "def is_sorted_and_how(arr):\n    ascending = sorted(arr)\n    descending = sorted(arr, reverse=True)\n    if arr == ascending: return \"yes, ascending\"\n    if arr == descending: return \"yes, descending\"\n    return 'no'", "def is_sorted_and_how(arr):\n    if sorted(arr) == arr:\n        return 'yes, ascending'\n    elif sorted(arr[::-1]) == arr[::-1]:\n        return 'yes, descending'\n    else:\n        return 'no'", "def is_sorted_and_how(arr):\n    s=0\n    t=0\n    for i in range(0,len(arr)-1):\n        if arr[i]<arr[i+1]:\n            s+=1\n        elif arr[i]>arr[i+1]:\n            t+=1\n    if t==len(arr)-1:\n        return \"yes, descending\"\n    elif s==len(arr)-1:\n        return \"yes, ascending\"\n    else:\n        return 'no'", "def is_sorted_and_how(arr):\n    for i in range(len(arr)):\n        if sorted(arr) ==arr:\n            return \"yes, ascending\"\n        elif sorted(arr, reverse=True) == arr:\n            return \"yes, descending\"\n        else:\n            return \"no\"", "def is_sorted_and_how(arr):\n    for index in range(len(arr))[2:]:\n        if (arr[index] <= arr[index - 1]) != (arr[index - 1] <= arr[index - 2]):\n            return \"no\"\n    return \"yes, descending\" if arr[1] <= arr[0] else \"yes, ascending\"\n        \n", "def is_sorted_and_how(arr):\n    monity = arr[1] <= arr[0]\n    for index in range(len(arr))[2:]:\n        if (arr[index] <= arr[index - 1]) != monity:\n            return \"no\"\n    return \"yes, descending\" if monity else \"yes, ascending\"\n        \n", "def is_sorted_and_how(arr):\n    if arr == list(sorted(arr)) or arr == list(sorted(arr))[::-1]:\n        return \"yes, ascending\" if arr[0] < arr[1] else \"yes, descending\"\n    else:\n        return \"no\"", "def is_sorted_and_how(arr):\n    # Check to see if the array is starting off ascending\n    if arr[0] < arr[1]:\n        # Loop through the array to see if any items break that ascending fashion\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                # If they do, return no\n                return 'no'\n        # If we made it through all items and didn't return no, return yes ascending\n        return 'yes, ascending'\n    # Check to see if the array is starting off descending\n    if arr[0] > arr[1]:\n        for i in range(len(arr)-1):\n            if arr[i] < arr[i+1]:\n                return 'no'\n        return 'yes, descending'", "def is_sorted_and_how(arr):\n    a = sorted(arr)\n    if a == arr:\n        return \"yes, ascending\"\n    elif sorted(a, reverse=True) == arr:\n        return \"yes, descending\"\n    else:\n        return \"no\"", "def is_sorted_and_how(arr):\n    asc=False\n    desc=False\n\n    for index in range(len(arr)):\n\n        \n        if index == 0:\n            if arr[index+1] > arr[index]:\n                asc=True\n                desc=False\n            if arr[index+1] < arr[index]:\n                asc=False\n                desc=True\n        \n        if (index != 0) and (index != (len(arr)-1)):\n            if (arr[index-1] < arr[index] < arr[index+1]) and asc:\n                    asc=True\n                    desc=False\n            elif (arr[index-1] > arr[index] > arr[index+1]) and desc:\n                    asc=False\n                    desc=True\n            else:\n                asc=False\n                desc=False\n        \n        if index == (len(arr)-1):\n            if (arr[index-1] < arr[index]) and asc:\n                asc=True\n                desc=False\n            if arr[index-1] < arr[index] and desc:\n                asc=False\n                desc=True\n    \n    if asc:\n        return 'yes, ascending'\n    if desc:\n        return 'yes, descending'\n    if not asc and  not desc:\n        return 'no'\n\n", "def is_sorted_and_how(arr):\n    asc = sorted(arr)\n    des = sorted(arr, reverse=True)\n    if arr == asc:\n        return ('yes, ascending')\n    elif arr == des:\n        return ('yes, descending')\n    elif arr != (asc or des):\n        return ('no')", "def is_sorted_and_how(arr):\n    delta_value=[]\n    positive_num=0\n    negtive_num=0\n    \n    for i in range(len(arr)-1):\n        delta_value.append(arr[i+1]-arr[i])\n    for i in range(len(delta_value)):\n        if delta_value[i]>=0:\n            positive_num+=1\n        else:\n            negtive_num+=1\n    if positive_num==len(delta_value):\n        return('yes, ascending')\n    elif negtive_num==len(delta_value):\n        return('yes, descending')\n    else:\n        return('no')", "def is_sorted_and_how(arr):\n    sort = \"descending\" if arr[0] > arr[-1] else \"ascending\"\n    return \"yes, {}\".format(sort) if (sort == \"ascending\" and sorted(arr) == arr) or (\n                sort == \"descending\" and sorted(arr, reverse=True) == arr) else \"no\"\n", "def is_sorted_and_how(arr):\n    if sorted(arr) == arr:\n        return (\"yes, ascending\")\n    elif arr == sorted(arr, reverse=True):\n        return(\"yes, descending\")\n    return(\"no\")\n", "def is_sorted_and_how(arr):\n    if arr==sorted(arr):\n        return \"yes, ascending\"\n    elif arr==sorted(arr, key=None, reverse=True):\n        return \"yes, descending\"       \n    else:\n        return \"no\"", "def is_sorted_and_how(arr):\n    # your code here\n    list_a =[]\n    list_d = []\n    list_a = sorted(arr)\n    for i in list_a[::-1]:\n        list_d.append(i)\n    if arr == list_a:\n        return \"yes, ascending\"\n    if arr == list_d:\n        return \"yes, descending\"\n    else:\n        return \"no\"\n", "def is_sorted_and_how(arr):\n    x=sorted(arr)\n    if x==arr:\n        return 'yes, ascending'\n    elif x[::-1]==arr:\n        return 'yes, descending'\n    else:\n        return 'no'", "def is_sorted_and_how(arr):\n    # your code here\n    type_arr = set()\n    \n    prev = arr[0]\n    \n    for item in arr[1:]:\n        if item > prev:\n            type_arr.add('asc')\n            \n        elif item < prev:\n            type_arr.add('desc')\n        prev = item\n        \n    if len(type_arr) != 1:\n        return 'no'\n    \n    result = type_arr.pop()\n    return 'yes, ascending' if result == 'asc' else 'yes, descending'", "def is_sorted_and_how(arr):\n    sort_arr = sorted(arr)\n    sort_desc = sorted(arr, reverse = True)\n    if sort_arr == arr:\n        return \"yes, ascending\"\n    if sort_desc == arr:\n        return \"yes, descending\"\n    else:\n        return \"no\"\n", "def is_sorted_and_how(arr):\n    # your code here\n    if(sorted(arr) == arr):\n        result = 'yes, ascending'\n    elif (sorted(arr, reverse = True) == arr):\n        result = 'yes, descending'\n    else:\n        result = 'no'\n        \n    return result", "def is_sorted_and_how(arr):\n    c = 0\n    a = 0\n    for i in range(len(arr) - 1):\n        if arr[i] <= arr[i+1]:\n            c += 1\n            if c == (len(arr) - 1):\n                return 'yes, ascending'\n        elif arr[i] >= arr[i+1]:\n            a += 1\n            if a == (len(arr) - 1):\n                return 'yes, descending'\n    else:\n        return 'no'\n        \n        \n        #elif arr[i] >= arr[i+1]:\n        #    return 'yes, descending'\n        #else:\n        #    return 'no'\n        \n    #return (\"yes, ascending\" if arr[i] <= arr[i+1] \"yes, descending\" elif arr[i] >= arr[i+1] for i in range(len(arr) - 1)) else \"no\"\n", "def is_sorted_and_how(arr):\n    if arr[0]<arr[1]:\n        return 'yes, ascending'\n    elif arr[0]>arr[1] and arr[0]>arr[2]:\n        return 'yes, descending'\n    else:\n        return 'no'\n", "def is_sorted_and_how(arr):\n    asc = True\n    desc = True\n    for i in range(1, len(arr)):\n        if arr[i-1] == arr[i]:\n            return 'no'\n        if arr[i - 1] < arr[i]:\n            desc = False\n        else:\n            asc = False\n        if not asc and not desc:\n            return 'no'\n    return  'yes, ascending' if asc else 'yes, descending'", "def is_sorted_and_how(arr):\n    # your code here\n    isAllNeg = True\n    isAllPos = True\n    \n    for i in range(len(arr) - 1):\n        isAllPos = isAllPos and arr[i + 1] - arr[i] > 0\n        isAllNeg = isAllNeg and arr[i + 1] - arr[i] < 0\n        \n    if isAllPos:\n        return \"yes, ascending\"\n    elif isAllNeg:\n        return \"yes, descending\"\n    else:\n        return 'no'", "def is_sorted_and_how(arr):\n    if arr == sorted(arr, reverse=True):\n        return 'yes, descending'\n    if arr == sorted(arr):\n        return 'yes, ascending'\n    else:\n        return 'no'", "def is_descending(arr):\n    for i in range(len(arr) - 1):\n        if arr[i+1] > arr[i]: \n            return False\n    return True\n\ndef is_ascending(arr):\n    for i in range(len(arr) - 1):\n        if arr[i+1] < arr[i]: \n            return False\n    return True\n\ndef is_sorted_and_how(arr):\n    if is_ascending(arr) == True: \n        return 'yes, ascending'\n    if is_descending(arr) == True:\n        return 'yes, descending'\n    else:\n        return 'no'\n    \n", "def is_sorted_and_how(arr):\n    k, c = 0, 0\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            k += 1\n        else:\n            c += 1\n    if k > 0 or c > 0:\n        if k > 0 and c == 0:\n            return \"yes, ascending\"\n        elif c > 0 and k == 0:\n            return \"yes, descending\"\n    return \"no\"", "def is_sorted_and_how(arr):\n    \n    if arr == sorted(arr):\n        return \"yes, ascending\"\n    elif arr[0] > arr[-1]:\n            return \"yes, descending\"\n    else:\n        return \"no\"", "def is_sorted_and_how(arr):\n\n    asc = True\n    desc = True\n    \n    for idx in range(1, len(arr)):\n        if arr[idx] - arr[idx - 1] >= 0:\n            asc = asc & True\n            desc = desc & False\n        else:\n            desc = desc & True\n            asc = asc & False\n\n    if asc and not desc:\n        return \"yes, ascending\"\n    elif desc and not asc:\n        return \"yes, descending\"\n    else:\n        return \"no\"", "def is_sorted_and_how(list):\n    if list == sorted(list):\n        return(\"yes, ascending\")\n    if list == sorted(list, reverse=True):\n        return(\"yes, descending\")\n    else:\n        return(\"no\")", "def is_sorted_and_how(arr):\n    order = 0\n    i = 0\n    \n    for num in arr:\n        hold = arr[i]\n        \n        if i + 1 < len(arr):\n            if hold <= arr[i + 1]:\n                order += 1\n            if hold >= arr[i + 1]:\n                order -= 1\n            \n        i += 1\n              \n    if order == len(arr) - 1: return 'yes, ascending'\n    if order * -1 == len(arr) - 1: return 'yes, descending'\n    else: return 'no'", "def is_sorted_and_how(arr):\n    \n    x = arr[:]\n    \n    if sorted(x) == arr:\n        return \"yes, ascending\"\n    elif sorted(x, reverse=True) == arr:\n        return \"yes, descending\"\n    else:\n        return \"no\"", "def is_sorted_and_how(arr):\n    print(arr)\n    d = True\n    a = True\n    for i in range(len(arr) - 1):\n        if arr[i] < arr[i+1]:\n            d = False\n    \n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            a = False\n\n    if d:\n        return \"yes, descending\"\n    elif a:\n        return \"yes, ascending\"\n    else:\n        return \"no\"", "def is_sorted_and_how(arr):\n    if arr[0] > arr[1]:\n        for i in range(len(arr)-1):\n            if arr[i] <= arr[i+1]:\n                return('no')\n        return('yes, descending')\n    else:\n        for i in range(len(arr)-1):\n            if arr[i] >= arr[i+1]:\n                return('no')\n        return('yes, ascending')", "def is_sorted_and_how(arr):\n    # your code here\n    if arr[0] == min(arr) and arr[-1] == max(arr):\n        return 'yes, ascending'\n    elif arr[0] == max(arr) and arr[-1] == min(arr):\n        return 'yes, descending'\n    else:\n        return 'no'", "def is_sorted_and_how(arr):\n    if sorted(arr) != arr and sorted(arr)[::-1] != arr:\n        return 'no'\n    return \"yes, ascending\" if sorted(arr) == arr else \"yes, descending\"", "def is_sorted_and_how(A):\n    S = sorted(A)\n    if S==A : return 'yes, ascending'\n    elif S == A[::-1] : return 'yes, descending'\n    return 'no'", "def is_sorted_and_how(arr):\n    if all(arr[i] >= arr[i - 1] for i in range(1, len(arr))):\n        return 'yes, ascending'\n    elif all(arr[i] <= arr[i - 1] for i in range(1, len(arr))):\n        return 'yes, descending'\n    return 'no'", "def is_sorted_and_how(arr):\n    x = list(arr)\n    x.sort()\n    if arr == x:\n        return 'yes, ascending'\n    elif arr[::-1] == x:\n        return 'yes, descending'\n    else:\n        return 'no'", "def is_sorted_and_how(arr):\n    lst = arr[:]\n    lst.sort()\n    if lst == arr:\n        return 'yes, ascending'\n    elif lst[::-1] == arr:\n        return 'yes, descending'\n    else:\n        return 'no'", "def is_sorted_and_how(arr):\n    a = sorted(arr)\n    d = sorted(arr, reverse = True)\n    if arr == a:\n        return 'yes, ascending'\n    elif arr == d:\n        return 'yes, descending'\n    else:\n        return 'no'", "def is_sorted_and_how(arr):\n    if(arr == sorted(arr)): \n        answer = 'yes, ascending'\n    elif (arr == sorted(arr,reverse=True)):\n        answer = 'yes, descending'\n    else:\n        answer = 'no'\n\n    return answer\n", "def is_sorted_and_how(arr):\n    if arr[0]>arr[1]:\n        try:\n            if arr[1]<arr[2]:\n                return 'no'\n        except:\n            pass\n        return \"yes, descending\"\n    elif arr[0]<arr[1] :\n        try:\n            if arr[1]>arr[2]:\n                return 'no'\n        except:\n            pass\n        return \"yes, ascending\"\n    return 'no'", "def is_sorted_and_how(arr):\n    if arr==sorted(arr):\n        return 'yes, ascending'\n    for i in range(len(arr)-1):\n        for j in range(1):\n            if arr[i]>arr[i+1]:\n                continue\n            else:\n                return 'no'\n    return 'yes, descending'", "def is_sorted_and_how(arr):\n    arr_asc = sorted(arr)\n    return \"yes, ascending\" if arr == arr_asc else \"yes, descending\" if arr == arr_asc[::-1] else \"no\"", "def is_sorted_and_how(arr):\n    \n    new_sorted_list = sorted(arr)\n    new_sorted_list_d = sorted(arr, reverse = True)\n    \n    if arr == new_sorted_list:\n        return \"yes, ascending\"\n    elif arr == new_sorted_list_d:\n        return \"yes, descending\"\n    else:\n        return \"no\"", "def is_sorted_and_how(arr):\n    return  'yes, ascending' if arr == sorted(arr) else 'yes, descending' if arr[::-1] == sorted(arr[::-1]) else 'no'", "def is_sorted_and_how(arr):\n    return 'yes, %sscending' % ['a', 'de'][max(sorted(arr)) == arr[0]] if sorted(arr)[0] in [arr[0], arr[-1]] else 'no'", "def is_sorted_and_how(arr):\n    sort_arr = sorted(arr)\n    des_arr = sorted(arr)[::-1]\n    if arr == sort_arr:\n        return 'yes, ascending'\n    if arr == des_arr:\n        return 'yes, descending'\n    return 'no'", "def is_sorted_and_how(arr):\n    if sorted(arr) == arr:\n        return \"yes, ascending\"\n    return \"yes, descending\" if sorted(arr, reverse=True) == arr else \"no\"", "def is_sorted_and_how(arr):\n    # your code here\n    if arr[0] == sorted(arr)[0]:\n        return 'yes, ascending'\n    elif arr[0] == sorted(arr)[-1]:\n        return 'yes, descending'\n    else:\n        return 'no'", "def is_sorted_and_how(arr):\n    arrasc = arr[:]\n    arrasc.sort()\n    arrdsc = arr[:]\n    arrdsc.sort(reverse=True)\n\n    if arrasc == arr:\n        return 'yes, ascending'\n    elif arrdsc == arr:\n        return 'yes, descending'\n    else:\n        return 'no'", "def is_sorted_and_how(arr):\n    sort = 'yes, ascending'\n    sort2 = 'yes, descending'\n    if arr[0] > arr[len(arr) - 1]:\n        for i in range(len(arr) - 1):\n            if arr[i] < arr[i + 1]:\n                sort = 'no'\n\n    if arr[0] < arr[len(arr) - 1]:\n        for i in range(len(arr) - 1):\n            if arr[i] > arr[i + 1]:\n                sort = 'no'\n\n    if sort != 'no':\n        if arr[0] > arr[len(arr) - 1]:\n            return sort2\n\n        elif arr[0] < arr[len(arr) - 1]:\n            return sort\n    else:\n        return sort", "def is_sorted_and_how(arr):\n    sort = sorted(arr)\n    return \"yes, ascending\" if arr == sort else \"yes, descending\" if arr == sort[::-1] else \"no\"", "def is_sorted_and_how(arr):\n    if arr[::-1] == sorted(arr):\n        return \"yes, descending\"\n    if arr == sorted(arr):\n        return \"yes, ascending\"\n    if arr != sorted(arr):\n        return \"no\"\n", "def is_sorted_and_how(arr):\n    brr = arr.copy()\n    crr = arr.copy()\n    brr.sort()\n    crr.sort(reverse=True)\n        \n    if arr == brr:\n        return 'yes, ascending'\n    if arr == crr:\n        return 'yes, descending'\n    else:\n      return 'no'", "def is_sorted_and_how(arr):\n    h = arr.copy()\n    h.sort(reverse=True)\n    p = arr.copy()\n    p.sort()\n    if arr == p:\n        return \"yes, ascending\"\n    if arr == h:\n        return \"yes, descending\"\n    else:\n        return 'no'\n", "def is_sorted_and_how(arr):\n    a=arr\n    if a==sorted(arr):\n        return 'yes, ascending'\n    elif a== sorted(arr,reverse=True):\n        return 'yes, descending'\n    else:\n        return 'no'", "def is_sorted_and_how(arr):\n    a=sorted(arr)\n    b=sorted(arr,reverse=True)\n    if arr[1]== a[1]:\n        return 'yes, ascending'\n    elif arr[1]==b[1]:\n        return 'yes, descending'\n    else:\n        return 'no'\n", "def is_sorted_and_how(arr):\n    k = 0\n    i = 0\n    while i != len(arr) - 1:\n        if arr[i] < arr[i + 1]:\n            k += 1\n        elif arr[i] > arr[i + 1]:\n            k -= 1\n        i += 1\n    if k == len(arr) - 1:\n        return 'yes, ascending'\n    elif k == -len(arr) + 1:\n        return 'yes, descending'\n    else:\n        return 'no'\n", "def is_sorted_and_how(arr):\n    b = 0\n    \n    for x in range(0, len(arr) -1):\n        if arr[x] < arr[x+1]:\n            b += 1\n            if b == len(arr) -1:\n                return \"yes, ascending\"\n    b = 0\n    for x in range(0, len(arr) -1):\n        if arr[x] > arr[x+1]:\n            b += 1\n            if b == len(arr) -1:\n                return \"yes, descending\"\n                \n        else: \n            return \"no\"\n        \n        \n", "def is_sorted_and_how(arr):\n    sarr = sorted(arr)\n    return \"yes, ascending\" if sarr == arr else \"yes, descending\" if sarr[::-1] == arr else \"no\"\n", "def is_sorted_and_how(arr):\n\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            print(str(arr[i]) + ' ' +  str(arr[i+1]))\n    \n\n    as_start = 0\n    de_start = 0\n    \n    def compare(first,second):\n        if second > first:\n            return 'as'\n        elif first > second:\n            return 'de'\n        else:\n            return 'eq'\n          \n    state = compare(arr[0],arr[1])\n    \n    for i in range(1,len(arr)-1):\n        \n        \n        \n        new_state = compare(arr[i],arr[i+1])\n        \n        print(f\"{arr[i]}, {arr[i+1]}, {new_state}, {state}\")\n        \n        if new_state != 'eq':\n            \n            if state == 'eq':\n                state = new_state\n            \n            if new_state != state:\n                state = 'unsorted'\n                break\n        \n\n    if state == 'unsorted' or  state =='eq':\n        return 'no'\n    if state == 'as':\n        return 'yes, ascending'\n    if state == 'de':\n        return 'yes, descending'", "def is_sorted_and_how(arr):\n    arr_up = arr[0]\n    arr_down = arr[0]\n    check = 1\n    for x in range(len(arr)):\n        if arr[x] > arr_up:\n            arr_up = arr[x]\n            check += 1\n    if check == len(arr):\n        return 'yes, ascending'\n    check = 1\n    for x in range(len(arr)):\n        if arr[x] < arr_down:\n            arr_down = arr[x]\n            check += 1\n    if check == len(arr):\n        return 'yes, descending'\n    else:\n        return 'no'\n        \n        \n\n", "def is_sorted_and_how(arr):\n    if arr[0] >= arr[1]:\n        for i in range(1,len(arr)):\n            if arr[i-1] < arr[i]:\n                return \"no\"\n        return \"yes, descending\"\n    elif arr[0] <= arr[1]:\n        for i in range(1,len(arr)):\n            if arr[i-1] > arr[i]:\n                return 'no'\n        return \"yes, ascending\"\n    else:\n        return \"no\"", "def is_sorted_and_how(arr):\n    if arr[0] >= arr[1]:\n        for n in range(1,len(arr)):\n            if arr[n-1] < arr[n]:\n                return \"no\"\n        return \"yes, descending\"\n    elif arr[0] <= arr[1]:\n        for n in range(1,len(arr)):\n            if arr[n-1] > arr[n]:\n                return \"no\"\n        return \"yes, ascending\"\n    else:\n        return \"no\"", "def is_sorted_and_how(arr):\n    if arr[-1] > arr[0]:\n        last = arr[0]\n        for n in arr[1:]:\n            if n < last:\n                return \"no\"\n            last = n\n                \n        return \"yes, ascending\"\n        \n    else:\n        last = arr[0]\n        for n in arr[1:]:\n            if n > last:\n                return \"no\"\n            last = n\n                \n        return \"yes, descending\"\n", "def is_sorted_and_how(list):\n    \n    ascendList = list[:]\n    ascendList.sort()\n    \n    descendList = list[:]\n    descendList.sort(reverse = True)\n    \n    return \"yes, ascending\" if ascendList == list else \\\n            \"yes, descending\" if descendList == list else \"no\"", "def is_sorted_and_how(arr):\n    my_list = list(arr)\n    if sorted(my_list) == arr:\n        return \"yes, ascending\"\n    elif sorted(my_list, reverse = True) == arr:\n        return \"yes, descending\"\n    else:\n        return \"no\"", "def is_sorted_and_how(BLM):\n    if BLM == sorted(BLM): return 'yes, ascending' \n    if BLM == sorted(BLM)[::-1]: return 'yes, descending'\n    return  'no'", "def is_sorted_and_how(arr):\n    if arr == sorted(arr):\n           return str(\"yes, ascending\")\n           \n    elif arr == sorted(arr, reverse=True):\n           return str(\"yes, descending\")\n           \n    return str(\"no\")", "def is_sorted_and_how(arr):\n    # your code here\n    s=\"no\"\n    for i in range(0,len(arr)-1):\n        if arr[i]<arr[i+1]:\n            s=\"yes\"\n            z=\"ascending\"\n        else:\n            s=\"no\"\n            z=\"\"\n            break\n    if s==\"no\":\n        \n        for i in range(len(arr)-1):\n            if arr[i]>arr[i+1]:\n                s=\"yes\"\n                z=\"descending\"\n            else:\n                s=\"no\"\n                z=\"\"\n                break\n    if s==\"no\":\n        return s\n    else:\n        return (s+\", \"+z)\n"]