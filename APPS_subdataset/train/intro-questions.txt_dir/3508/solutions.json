["def halving_sum(n): \n    s=0\n    while n: \n        s+=n ; n>>=1\n    return s", "def halving_sum(n): \n    if n == 1:\n        return 1\n    else:\n        return n + halving_sum(n//2)", "def halving_sum(n): \n    return n and n + halving_sum(n>>1)", "def halving_sum(n):\n    result = n\n    \n    while n >= 1:\n        n //= 2\n        result += n\n        \n    return result", "import math\ndef halving_sum(n): \n    return sum(n//(2**x) for x in range(int(math.log2(n))+1))", "def halving_sum(n):\n    return n + halving_sum(n // 2) if n else 0", "def halving_sum(n): \n    L=[n]\n    for i in range(1,n+1):\n        a = n//(2**i)\n        if a not in L:\n            L.append(a)\n    return sum(L)", "def halving_sum(n):\n    r = 0\n    while n:\n        r += n\n        n >>= 1\n    return r", "def halving_sum(n):\n  if n == 1:\n    return 1\n  else:\n    return n + halving_sum(int(n/2))", "def halving_sum(n): \n    divisor = 1\n    addends = []\n    addend = n // divisor\n    while addend > 0:\n        addends.append(addend)\n        divisor *= 2\n        addend = n // divisor\n    return sum(addends)", "def halving_sum(n): \n    # your code here\n    re = n\n    while n > 1:\n        n = n//2\n        re += n\n    return re", "def halving_sum(n): \n    return n + halving_sum(n >> 1) if n > 1 else n", "def halving_sum(n):\n\n    b = n // 2\n    c = []\n    c.append(n)\n    c.append(b)\n\n\n    for i in range(0,n):\n\n        b = b // 2\n        c.append(b)\n\n    return sum(c)", "def halving_sum(n):\n    total = 0\n    \n    while True:\n        if n == 0:\n            break\n        else:\n            total += (n)\n            n = n // 2\n    \n    return total", "def halving_sum(n):\n    if n < 1:\n        return 0\n    else:\n        return n + halving_sum (n // 2)\n", "def halving_sum(n): \n    return 1 if n<2 else n + halving_sum((int)(n/2))\n    \n", "def halving_sum(n): \n    sum = 0\n    while n != 1:\n        sum = sum + n\n        n = n // 2\n    return sum+1", "def halving_sum(n):\n    result = n\n\n    if n < 1:\n        return n\n    else:\n        while n > 1:\n            result += n // 2\n            n = n // 2\n        return result\n\nprint((halving_sum(25)))\n", "def halving_sum(n): \n    if n > 1 :\n        n = n + halving_sum(n//2)\n    return n", "def halving_sum(n): \n    result = 0\n\n    while n:\n        result += n\n        n //= 2\n\n    return result", "def halving_sum(n): \n    return 1 if n<=1 else n + halving_sum(n//2)", "def halving_sum(n): \n    return sum(n//2**i for i in range(14))", "def halving_sum(n): \n    return n if n <= 1 else n + halving_sum(n >> 1)", "def halving_sum(n): \n    total = n\n    while n > 0:\n        n //= 2\n        total += n\n    return total", "def halving_sum(n): \n    return n if n == 1 else n + halving_sum(n // 2)", "def square_gen(n):\n    x = 1\n    while x <= n:\n        yield x\n        x *= 2\n        \ndef halving_sum(n):\n    return sum([int(n/i) for i in square_gen(n)])", "import math\ndef halving_sum(n):\n    counter = 0\n    div = n\n    result = 0\n    while div >= 1:\n        div = math.floor(n/2**counter)\n        counter += 1\n        result += div\n    return result\n        \n", "def halving_sum(n): \n    return sum(n >> i for i in range(15))", "def halving_sum(n): \n    cnt = 2\n    s = n\n    \n    while n//cnt > 0:\n        s += n//cnt\n        cnt *= 2\n\n    return s", "def halving_sum(n): \n    # your code here\n    total = n\n    while n > 0:\n        n = n//2\n        total += n\n    return total\n    pass", "def halving_sum(n): \n    return 1 if n//1 == 1 else n//1 + halving_sum((n//1)/2)\n", "def halving_sum(n): \n    sum = 1\n    while (n != 1):\n        sum+=n\n        n = n//2\n    return (sum)", "def halving_sum(n): \n    my_list = []\n    while n:\n        my_list.append(n)\n        n = n//2\n    return sum(my_list)", "import math\ndef halving_sum(n): \n    return sum([ n // 2 ** i for i in range(math.ceil(math.log(n, 2)))]) if n > 1 else 1", "def halving_sum(n): \n    if n//2 < 1:\n        return n\n    if n//2 == 1:\n        return n + 1\n    return n + halving_sum(n//2)", "def halving_sum(n):\n    add = n\n    while n>1:\n        n=n//2\n        add += n\n        \n    return add", "def halving_sum(n): \n    return n if n <= 1 else halving_sum(n//2) + n", "def halving_sum(n):\n    summa = 0\n    while n != 1:\n        summa += n\n        n = n // 2 \n    return summa + 1", "def halving_sum(n): \n    sum =  0\n    exp = 0\n    while(n // (2 ** exp)):\n        sum += (n // (2 ** exp))\n        exp += 1\n    return sum", "def halving_sum(n):\n    result = n\n    denom = 2\n    while n // denom > 0:\n        result += n // denom\n        denom *= 2\n    return result", "def halving_sum(n): \n    tot = 0\n    while n != 1:\n        tot += n\n        n = n // 2\n    return tot + 1\n", "def halving_sum(n): \n    m = n\n    summ = 0\n    count = 1\n    while n // count >= 1:\n        summ += n // count\n        count *= 2\n    return summ\n", "import math\n\ndef halving_sum(n):\n    half = n/2\n    if half <= 1:\n        return math.ceil(half)\n    else:\n        return math.floor(n + halving_sum(half))", "def halving_sum(n): \n    sum = n\n    while n > 1:\n        n //= 2 # n=n//2\n        sum += n\n    return sum", "def halving_sum(n): \n    hold = 0\n    x = 1\n    while n//x > 0:\n        hold += n//x\n        x *= 2\n    return hold", "import math\ndef halving_sum(n):\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    return math.floor(n) + halving_sum(n/2)", "def halving_sum(n):\n    res=n\n    while n != 1:\n        n = int(n/2)\n        res+=n\n        \n    return res", "def halving_sum(n): \n    # your code here\n    print(n)\n    i = 1\n    suma = 0\n    resultado = 0\n    while i < n:\n        #print(i)\n        suma = n/i\n        print((int(suma)))\n        resultado = resultado + int(suma)\n        #print(int(resultado))\n        #print(i)\n        i *= 2\n        #print(i)\n    if(int(resultado) == 0):\n        resultado = 1\n        return(int(resultado))\n    else:\n        print((int(resultado)))\n        return(int(resultado))\n", "def halving_sum(n): \n    a = 1\n    b = 0\n    while n//a != 1:\n        b = b + n//a\n        a = a*2\n    return b + 1", "def halving_sum(n): \n    sum = 0\n    while n>=1:\n        sum += n\n        n >>= 1\n    return sum", "def halving_sum(n): \n    sum = n\n    while True:\n        if n//2==0: break\n        else      : n = n//2\n        sum += n\n    return sum", "def halving_sum(n): \n    a = [n]\n    b = n\n    while n > 1:\n        c = n//2\n        a.append(c)\n        b += c\n        n = c\n    return b", "from itertools import takewhile, count\n\ndef halving_sum(n):\n    return sum(takewhile(lambda x: x >= 1, map(lambda y: n//2**y, count())))", "def halving_sum(n): \n    sm=0\n    while n>0 :\n        sm+=n ; n//=2\n    return sm", "def halving_sum(n):\n    start = n\n    total = 0\n    while start >= 1:\n        total += start\n        start = int(start / 2)\n    return total", "def halving_sum(n): \n    if n<=1: return n\n    return n + halving_sum(n//2)", "import math\ndef halving_sum(n):\n    ne = 1\n    while n > 1:\n        ne += n\n        n = n/2\n        n = math.floor(n)\n    return ne", "def halving_sum(n): \n    k = n\n    t = n\n    while k > 0:\n        k = int(k /2)\n        t+=k\n    return t", "def halving_sum(n): \n    suma = 0\n    sumando = n\n    while sumando >= 1:\n        suma = suma+ sumando\n        sumando = sumando //2\n    return suma", "def halving_sum(n):\n    i, sum = 2, n\n    while(i <= n):\n        sum += n//i\n        i += i\n    return sum", "def halving_sum(n):\n    summed = 0\n    x = 1\n    while n // x > 0:\n        summed += n // x\n        x *= 2\n\n    return summed\n", "def halving_sum(n): \n    sum = 0\n    if n >= 1:\n        sum += n + halving_sum(n//2)\n    return sum\n    \n", "def halving_sum(n): \n    a=[]\n    for i in range(n):\n        a.append(n)\n        n=int(n/2)\n        if int(n) >= 1:\n            pass\n        else:\n            break\n    return sum(a)", "def halving_sum(n): \n    result = 0\n    while n > 0:\n        result += n\n        n = int(n / 2)\n    return result", "def halving_sum(n):  \n    if n > 1:\n        n += halving_sum(n//2)\n    return n\n", "def halving_sum(n): \n    r=n\n    while(n>0):\n        n//=2\n        r+=n\n    return r", "def halving_sum(n): \n    running_total = 0\n    while (n > 0):\n        running_total += n\n        n = n//2\n    return running_total\n", "def halving_sum(n): \n    div = 2\n    total = n\n    while n//div:\n        total += n//div\n        div *= 2\n    return total", "def halving_sum(n):\n    sum = n\n    divide = n\n    while divide // 2:\n        divide = divide // 2\n        sum += divide\n    return sum\n", "def halving_sum(n): \n    sm = 0\n    i = 0\n    while n // 2**i > 0:\n        sm += n // 2**i\n        i += 1\n    return sm\n", "def halving_sum(number): \n\n    n = number\n\n    while number != 1:\n        number = number//2\n        n += number\n\n    return n", "def halving_sum(n): \n    sum_list = []\n    sum_int = 0\n    sum_list.append(int(n))\n    while(n != 1):\n        sum_list.append(int(n)//2)\n        n = int(n)//2\n    for q in range(len(sum_list)):\n        sum_int = sum_int + sum_list[q]\n    return sum_int", "def halving_sum(n): \n    l=0\n    while n!=1:\n        l+=n\n        n=n//2\n    return l+1", "def halving_sum(n): \n    output = 0\n    while n > 0:\n        output += n\n        n //= 2\n    return output", "def halving_sum(n): \n    half = 0\n    while n > 1:\n        half += n\n        n = n//2\n    return half +1", "def halving_sum(n): \n    i = 0\n    x = 0\n    while True:\n        if n // 2 ** i > 0:\n            x = x + n // 2 ** i\n            i = i + 1\n        else:\n            break\n    return x", "def halving_sum(n): \n    if n == 1:\n        return n\n    else:\n        print(n)\n        return n + halving_sum(n//2)", "def halving_sum(n):\n    return 1 if n == 1 else sum([n//(2**i) for i in range(0, n//2) if n//(2**i) >=1])", "import math\ndef halving_sum(n):\n    return 1 if n == 1 else sum([math.floor(n/2**i) for i in range(0,math.floor(n/2)) if math.floor(n/2**i) >= 1])", "def halving_sum(n): \n    m = 0\n    while n >= 1:\n        m += n\n        n //= 2\n    return m", "def halving_sum(n):\n    sums=[]\n    nums=n\n    while nums>0:\n        sums.append(nums)\n        nums=int(nums/2)\n        if nums<=0:\n            break\n    return sum(sums)", "def halving_sum(n): \n    # your code here\n    b=1\n    top=0\n    while b<=n:\n        top+=int(n/b)\n        b*=2\n    return top", "def halving_sum(n): \n    res = n\n    while n != 1:\n        n = n//2\n        res += n\n    return res", "def halving_sum(n):\n    total = n\n    divisor = 2\n    while n // divisor > 0:\n        if n // divisor == 1:\n            total += 1\n            break\n        else:\n            total += (n // divisor)\n            divisor *= 2\n    return(total)", "def halving_sum(n): \n    # your code here\n    res=0\n    while n>1:\n        res=res+n\n        n=n//2\n    return res+1", "def halving_sum(n):\n    c=0\n    while n>=1:\n        c=c+n\n        n=n//2\n    return c", "from itertools import count, takewhile\n\ndef halving_sum(n): \n    g = (2**j for j in count(0))\n    g = takewhile(lambda x: n >= x, g)\n    return sum(n // i for i in g)\n", "import unittest\n\n\ndef halving_sum(n):\n    temp = []\n    while True:\n        if n == 1:\n            break\n        temp.append(n)\n        n = n // 2\n    return sum(temp) + 1\n    \n    \nclass TestHalvingSum(unittest.TestCase):\n    def test_halving_sum_when_given_n_is_25(self):\n        n = 25\n        actual = halving_sum(n)\n        self.assertEqual(actual, 47)\n\n    def test_halving_sum_when_given_n_is_127(self):\n        n = 127\n        actual = halving_sum(n)\n        self.assertEqual(actual, 247)\n", "import math\n\ndef halving_sum(n): \n    a = 0\n    d = 1\n    res = 0\n    while a != 1:\n        a = math.floor(n / d)\n        d *= 2\n        res += a\n    return res", "def halving_sum(n): \n    delit = 2\n    sum = n\n    while n > 0:\n        n = n//delit\n        delit*2\n        sum+=n\n    return sum", "import math\ndef halving_sum(n):\n    accum = 0\n    while n > 0:\n        accum += n\n        n = math.floor(n/2)\n    return accum\n", "from math import trunc\ndef halving_sum(n): \n    result = divided = n\n    divisor = 1\n    while divided > 1:\n        divisor *= 2\n        divided = n // divisor\n        result += divided\n    return result", "def halving_sum(n): \n    \n    x = n  \n    \n    while n != 1:\n        x += n//2\n        n //= 2\n        \n    return x", "def halving_sum(n): \n    a = 0\n    while n >= 1:\n        a += n\n        n *= 1/2\n        n  = int(n)\n    return a", "def halving_sum(n): \n\n    number = n\n    while number > 1:\n        n += int(number/2)\n        number /= 2\n    return n", "import math\ndef halving_sum(n): \n    # your code here\n    number = n\n    \n    while number >= 1:\n        n += (math.floor(number/2))\n        number /= 2\n        \n    return n", "import math\n\ndef halving_sum(n): \n    score = 0\n\n    while (n >= 1):\n        score += n\n\n        n = math.floor((n * 1) / 2)\n    \n    return score", "def halving_sum(n):\n    total_sum = n\n\n    while n != 1:\n        n = n // 2\n        total_sum += n\n    \n    return total_sum\n", "def halving_sum(n): \n    answer = 0\n    while n > 0:\n        answer += n\n        n = n // 2\n    return answer", "def halving_sum(n):\n    \n    x = 2\n    sol = n\n    \n    while (n//x)>0:\n        sol = sol + n//x\n        x*=2\n        \n    return sol"]