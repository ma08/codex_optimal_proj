["def adjust(coin, price):\n    return price + (coin - price) % coin", "from math import ceil\nadjust = lambda coin, price: ceil(price / float(coin)) * coin", "def adjust(coin, price):\n    q, r = divmod(price, coin)\n    return price if not r else (q + 1) * coin\n", "from math import ceil\n\ndef adjust(a, b):\n    return ceil(float(b) / a) * a", "def adjust(coin, price):\n    residue = price % coin\n    if residue:\n        price += coin - residue  \n    return price # fix me!", "def adjust(coin, price):\n    if( price%coin !=0):\n        price += coin - price%coin\n        \n    return price ", "adjust=lambda b,n:n+-n%b", "def adjust(coin, price):\n    if(price%coin==0):\n        return price\n    else:\n        return price+coin-price%coin\n    \n", "def adjust(coin, price):\n    return price / coin * coin + bool(price % coin) * coin", "def adjust(coin, price):\n    if price % coin == 0:\n        return price\n    else:\n        return (price//coin + 1) * coin\n"]