["def nb_dig(n, d):\n    return sum(str(i*i).count(str(d)) for i in range(n+1))", "def nb_dig(n, d):\n  return str([n**2 for n in range(n + 1)]).count(str(d))\n", "def nb_dig(n, d):\n    return ''.join(str(a ** 2) for a in range(n + 1)).count(str(d))\n", "def nb_dig(n, d):\n    \n    tot_occur = 0;\n    \n    for i in range(n+1):\n        #print(i**2)\n        tot_occur += str(i**2).count(str(d))\n        \n    return tot_occur", "def nb_dig(n, d):\n   return ''.join(str(n * n) for n in range(n + 1)).count(str(d))", "def nb_dig(n, d):\n    return sum([str(x**2).count(str(d)) for x in range(n+1)])", "nb_dig = lambda n,d: sum(str(k**2).count(str(d)) for k in range(n+1))", "def nb_dig(n, d):\n    result = 1 if d == 0 else 0\n\n    for k in range(1, n + 1):\n        x = k * k\n        while x:\n            if x % 10 == d:\n                result += 1\n            x //= 10\n\n    return result\n", "def nb_dig(n, d):\n    string = ''\n    count = 0\n    \n    for i in range(n+1):\n        string += str(i*i)\n    \n    for i in string:\n        if i == str(d):\n            count += 1\n\n    return count", "nb_dig=lambda n,d:sum(str(i**2).count(str(d))for i in range(n+1))", "def nb_dig(n, d):\n    integers = [str(integer ** 2) for integer in range(n + 1)]\n    return sum([digits.count(str(d)) for digits in integers])", "def nb_dig(n, d):\n  s = str(d)\n  return sum(sum(c == s for c in str(k**2)) for k in range(n+1))", "def nb_dig(n, d):\n    square_list=[str(k**2) for k in range(0,n+1)]\n    result=0\n    result = \"\".join(square_list).count(str(d))\n    return result", "def nb_dig(n, d):\n    return sum(str(num**2).count(str(d)) for num in range(n + 1))", "def nb_dig(n, d):\n    return sum([str(k*k).count(str(d)) for k in range(n + 1)])", "def nb_dig(n, d):\n    thing=0\n    d=str(d)\n    num = [str(i**2) for i in range(n+1)]\n    for i in num:\n        if d in i:          \n            thing+=i.count(d)\n    return thing", "def nb_dig(n, d):\n    return sum([1 if str(d) in a else 0 for x in range(n+1) for a in str(x*x)])", "def nb_dig(n, d):\n    d_count = []\n    for n in range(n+1):#  n+1 as python stops one number before n \n        square = str(n ** 2)\n        d_count.append(square.count(str(d)))\n    return sum(d_count)\n        \n    # your code\n", "def nb_dig(n, d):\n    def ds_in_k(k):\n        m, r = divmod(k, 10)\n        return int(r == d) + (ds_in_k(m) if m else 0)\n\n    return sum(ds_in_k(k ** 2) for k in range(n + 1))\n", "def nb_dig(n, d):\n    l=[]\n    for i in range(n+1):\n        l.append(str(i**2))\n    return ''.join(l).count(str(d))"]