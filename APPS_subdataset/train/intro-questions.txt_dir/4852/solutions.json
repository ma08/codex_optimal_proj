["def interpreter(tape):\n    ptr, stack, output = 0, [0], []\n    \n    while ptr < len(tape):\n        command = tape[ptr]\n        \n        if   command == '^': stack.pop()\n        elif command == '!': stack.append(0)\n        elif command == '+': stack[-1] = (stack[-1] + 1) % 256\n        elif command == '-': stack[-1] = (stack[-1] - 1) % 256\n        elif command == '*': output.append(chr(stack[-1]))\n        elif command == '[' and stack[-1] == 0: ptr = tape.find(']', ptr)\n        elif command == ']' and stack[-1] != 0: ptr = tape.rfind('[', ptr)\n        \n        ptr += 1\n        \n    return ''.join(output)", "def interpreter(s):\n    find, find_, d = [],[],{}\n    for i, j in enumerate(s):\n        if j == '[' : find.append(i)\n        if j == ']' : find_.append(i)\n    for i, j in zip(find, find_):\n        d[i] = j ; d[j] = i\n    memory,output,j = [0],[],0\n    while j < len(s):\n            i = s[j]\n            if i == \"+\" : memory[-1] = (memory[-1] + 1) % 256\n            if i == \"-\" : memory[-1] = (memory[-1] - 1) % 256\n            if i == '*' : output.append(chr(memory[-1]))\n            if i == \"!\" : memory.append(0)\n            if i == '[' : \n                if memory[-1] == 0 : j = d[j]\n            if i == \"]\" : \n                if memory[-1] != 0 : j = d[j]\n            if i == '^' : memory.pop(-1)\n            j += 1\n    return \"\".join(output)", "def pop(tape, pc, out, stack):\n    pc += 1\n    stack.pop()\n    return pc, out, stack\n\ndef zstack(tape, pc, out, stack):\n    pc += 1\n    stack.append(0)\n    return pc, out, stack\n\ndef inc(tape, pc, out, stack):\n    pc += 1\n    stack[-1] += 1\n    if stack[-1] > 255: stack[-1] = 0\n    return pc, out, stack\n\ndef dec(tape, pc, out, stack):\n    pc += 1\n    stack[-1] -= 1\n    if stack[-1] < 0: stack[-1] = 255\n    return pc, out, stack\n\ndef ascii(tape, pc, out, stack):\n    pc += 1\n    out += chr(stack[-1])\n    return pc, out, stack\n\ndef skip(tape, pc, out, stack):\n    pc += 1\n    if stack[-1] == 0:\n        c = tape[pc]\n        while c != \"]\":\n            pc += 1\n            c = tape[pc]\n        pc += 1\n    return pc, out, stack\n\ndef back(tape, pc, out, stack):\n    #return None\n    if stack[-1] != 0:\n        pc -= 1\n        c = tape[pc]\n        while c != \"[\":\n            pc -= 1\n            c = tape[pc]\n        pc += 1\n    else:\n        pc += 1\n    return pc, out, stack\n\ndispatch = {\n    \"^\": pop,\n    \"!\": zstack,\n    \"+\": inc,\n    \"-\": dec,\n    \"*\": ascii,\n    \"[\": skip,\n    \"]\": back,\n}\n\ndef interpreter(tape):\n    out = \"\"\n    stack = [0]\n    pc = 0\n    c = tape[pc]\n    while c:\n        if c in dispatch:\n            pc, out, stack = dispatch[c](tape, pc, out, stack)\n        else:\n            pc += 1\n        c = tape[pc: pc + 1]\n    return out\n    # Happy Coding! :)\n", "def interpreter(tape):\n    out = []\n    stack = [0]\n    ip = 0\n    while ip < len(tape):\n        cmd = tape[ip]\n        if cmd == '^': stack.pop()\n        elif cmd == '!': stack.append(0)\n        elif cmd == '+': stack[-1] = (stack[-1] + 1)  % 256\n        elif cmd == '-': stack[-1] = (stack[-1] - 1)  % 256\n        elif cmd == '*': out.append(chr(stack[-1]))\n        elif cmd == '[':\n            if stack[-1] == 0:\n                while tape[ip] != ']': ip += 1\n        elif cmd == ']':\n            if stack[-1] != 0:\n                while tape[ip] != '[': ip -= 1\n        ip += 1\n    return ''.join(out)\n", "def interpreter(tape):\n    ptr, stack, output = 0, [0], ''\n    n = len(tape)\n    \n    while ptr < n:\n        \n        cmd = tape[ptr]\n\n        if   cmd == '^': stack.pop()\n        elif cmd == '!': stack.append(0)\n        elif cmd == '+': stack[-1] = (stack[-1] + 1) % 256\n        elif cmd == '-': stack[-1] = (stack[-1] + 255) % 256\n        elif cmd == '*': output += chr(stack[-1])\n        elif cmd == '[' and stack[-1] == 0:\n            while tape[ptr] != ']': ptr += 1\n        elif cmd == ']' and stack[-1] != 0:\n            while tape[ptr] != '[': ptr -= 1\n\n        ptr += 1\n\n    return output", "def interpreter(tape):\n    stack, output = [0], ''\n    i, n = 0, len(tape)\n    while i < n:\n        cmd = tape[i]\n        if cmd == '^':\n            stack.pop()\n        elif cmd == '!':\n            stack.append(0)\n        elif cmd == '+':\n            stack[0] = 0 if stack[0] == 255 else stack[0] + 1\n        elif cmd == '-':\n            stack[0] = 255 if stack[0] == 0 else stack[0] - 1\n        elif cmd == '*':\n            output += chr(stack.pop(0))\n        elif cmd == '[' and stack[0] == 0:\n            while tape[i] != ']':\n                i += 1\n        elif cmd == ']' and stack[0] != 0:\n            while tape[i] != '[':\n                i -= 1\n        i += 1\n    return output.replace('\\n', '\\x02')", "def cleanTape(tape):\n    a = [x for x in tape if x in '^!+-*[]']\n    return ''.join(a)\n\ndef interpreter(tape):\n    tape = cleanTape(tape)\n    stack = [0]\n    index = 0\n    output = ''\n    while index < len(tape):\n        if tape[index] == '^':\n            stack.pop()\n        if tape[index] == '!':\n            stack.append(0)\n        if tape[index] == '+':\n            stack[-1] += 1\n        if tape[index] == '-':\n            stack[-1] -= 1\n    \n        stack[-1] %= 256\n    \n        if tape[index] == '*':\n            output += chr(stack[-1])\n        \n        if tape[index] == '[':\n            if stack[-1] == 0:\n                i = index + 1\n                while True:\n                    if tape[i] == ']':\n                        index = i + 1\n                        break\n                    i += 1\n                continue\n        if tape[index] == ']':\n            if stack[-1] != 0:\n                i = index - 1\n                while True:\n                    if tape[i] == '[':\n                        index = i - 1\n                        break\n                    i -= 1\n                continue\n        \n        index += 1\n        \n    return output", "def interpreter(tape):\n    stack = [0]\n    ip = 0\n    output = ''\n    while ip < len(tape):\n        op = tape[ip]\n        if op == '^':\n            stack.pop()\n        elif op == '!':\n            stack.append(0)\n        elif op == '+':\n            stack[-1] = (stack[-1] + 1) % 256\n        elif op == '-':\n            stack[-1] = (stack[-1] + 255) % 256\n        elif op == '*':\n            output += chr(stack[-1])\n        elif op == '[' and stack[-1] == 0:\n            ip = tape.find(']', ip + 1)\n        elif op == ']' and stack[-1] != 0:\n            ip = tape.rfind('[', 0, ip)\n        ip += 1\n    return output", "def interpreter(tape):\n    a,stack,out=0, [0], []\n    while a<len(tape):\n        command=tape[a]   \n        if   command == '^': stack.pop()\n        elif command == '!': stack.append(0)\n        elif command == '+': stack[-1]=(stack[-1]+1) % 256\n        elif command == '-': stack[-1]=(stack[-1]-1) % 256\n        elif command == '*': out.append(chr(stack[-1]))\n        elif command == '[' and stack[-1]==0: a=tape.find(']', a)\n        elif command == ']' and stack[-1]!=0: a=tape.rfind('[', a) \n        a += 1\n    return ''.join(out)", "def interpreter(tape):\n    j, k = {}, []\n    for i in range(len(tape)):\n        if tape[i] == \"[\": k.append(i)\n        elif tape[i] == \"]\":\n            j[i] = k[-1]\n            j[k.pop()] = i\n            \n    m, r, i, l = [0], \"\", 0, len(tape)\n    while i < l:\n        if tape[i] == \"^\": m.pop(0)\n        elif tape[i] == \"!\": m.append(0)\n        elif tape[i] == \"+\": m[-1] += 1\n        elif tape[i] == \"-\": m[-1] -= 1\n        elif tape[i] == \"*\": r += chr(m.pop(0) % 256)\n        elif (tape[i] == \"[\" and not m[-1] % 256) or (tape[i] == \"]\" and m[-1] % 256): i = j[i]\n        i += 1\n    return r"]