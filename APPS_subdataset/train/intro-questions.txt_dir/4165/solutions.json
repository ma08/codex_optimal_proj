["def uni_total(string):\n    return sum(map(ord, string))", "def uni_total(s):\n    return sum(ord(c) for c in s)\n", "def uni_total(string):\n    return sum(ord(c) for c in string)", "def uni_total(string):\n    return sum(ord(x) for x in string)", "def uni_total(string):\n    return sum([ord(i) for i in string])\n", "def uni_total(string):\n    return sum(ord(ch) for ch in string)", "def uni_total(string):\n    acc = 0\n    for i in string:\n        acc += ord(i)\n    return acc", "def uni_total(strng):\n    return sum(ord(a) for a in strng)\n", "def uni_total(string):\n    return sum(ord(i) for i in string)", "def uni_total(string: str) -> int:\n    \"\"\" Get the total of all the unicode characters as an int. \"\"\"\n    return sum([ord(_) if _ else 0 for _ in \"|\".join(string).split(\"|\")])", "def uni_total(string):\n    return sum(ord(q) for q in string)", "def uni_total(string):\n    total = 0\n    for item in string:\n        total= total + ord(item)\n    return total", "def uni_total(string):\n    c=0\n    for x in string:\n        c=c+ord(x)\n    return c", "def uni_total(string):\n    s = 0\n    for c in string:\n        s += ord(c)\n    return s\n", "\ndef uni_total(string):\n    return sum(list(map(ord, string)))", "from functools import reduce\ndef uni_total(string):\n    return reduce(lambda x, y: x + ord(y), string, 0)", "def uni_total(string):\n    total = 0\n    for i in string:\n        total += ord(i)\n    return total", "uni_total=lambda s:sum(ord(i)for i in s)", "def uni_total(string):\n    return sum(ord(character) for character in string)", "def uni_total(string):\n    x=0\n    for character in string:\n        x+=ord(character)\n    return x", "uni_total = lambda string: sum(ord(c) for c in string)\n", "def uni_total(string):\n    total = []\n    for char in string:\n        total.append(ord(char))\n    return sum(total)\n        \n    \n'''You'll be given a string, and have to return the total of all the unicode \ncharacters as an int. Should be able to handle any characters sent at it.\n\nexamples:\n\nuniTotal(\"a\") == 97 uniTotal(\"aaa\") == 291'''", "def uni_total(string):\n    return sum(list(ord(i) for i in string))", "def uni_total(string):\n    array = []\n    copy = []\n    array = list(string)   \n    for num in array:\n        copy.append(ord(num))\n    total = sum(copy)\n    return total", "def uni_total(string):\n    \n    if type(string)!= str:\n        return 0\n    else:\n        liste= [(ord(i)) for i in string]\n        return sum(liste)\n", "def uni_total(string):\n    ttl = 0\n    for i in string:\n        ttl += ord(i)\n    return ttl\n", "def uni_total(s):\n    return sum(ord(l) for l in s)", "def uni_total(string):\n    x = map(ord, string)\n    return sum(x)", "def uni_total(string):\n    sum = 0\n    for i in string:    \n        i = ord(i)\n        sum = sum + i\n    return sum", "def uni_total(string: str) -> int:\n    \"\"\" Get the total of all the unicode characters as an int. \"\"\"\n    return sum(bytearray(string, \"utf\"))", "def uni_total(string: str) -> int:\n    \"\"\" Get the total of all the unicode characters as an int. \"\"\"\n    return sum(map(ord, string))", "def uni_total(s):\n    #your code ere\n    st=0\n    for c in s:\n        st+=ord(c)\n    return st", "def uni_total(string):\n    ans = 0\n    if string:    \n        for _ in string:\n            ans += ord(_)\n    return ans", "def uni_total(string):\n    liReturn = 0\n    \n    for i in string:\n        liReturn += ord(i)\n        \n    return liReturn", "def uni_total(string):\n    total = 0\n    if string == \"\":\n        return 0\n    else:\n        for i in range(len(string)):\n             total = ord(string[i]) + total\n    return total", "def uni_total(string):\n    erg = 0\n    for c in string:\n        erg += ord(c)\n    return erg", "def uni_total(string):\n    accumulator = 0\n    for eachchar in string:\n        accumulator = accumulator + ord(eachchar)\n    return accumulator", "def uni_total(s):\n    t=0\n    for i in s:\n        t += ord(i)\n    return t\n", "def uni_total(string):\n    #your code here\n    if string=='':\n        return 0\n    else:\n        ans=0\n        for i in string:\n            ans=ans+ord(i)\n        return ans", "def uni_total(string):\n    rez = 0\n    for i in string:\n        rez += ord(i)\n    return rez", "def uni_total(string):\n    l = list(string)\n    m = sum([ord(i) for i in l])\n    return m", "def uni_total(string):\n    account = 0\n    for letters in string:\n        account += ord(letters)\n    return account", "def uni_total(string):\n    account = 0\n    for letters in string:\n        if 96 < ord(letters) < 123: \n            account += ord(letters)\n        else:\n            64 < ord(letters) < 91\n            account += ord(letters)\n    return account \n", "def uni_total(string):\n    salida = 0\n    for letr in string:\n        salida += ord(letr)\n\n    return salida", "def uni_total(string):\n    result = 0\n    for s in string:\n        result += ord(s)\n    return result\n", "def uni_total(string):\n    unicodes = []\n    for i in string:\n        unicodes.append(ord(i))\n    return sum(unicodes)", "def uni_total(string):\n    if string:\n        s  = sum([ord(i) for i in string])       \n    else:\n        s = 0\n    return s", "def uni_total(string):\n    summ = 0\n    for i in string:\n        summ += ord(i)\n    return summ if string else 0", "def uni_total(string):\n    return sum(ord(i) for i in string) if string else 0", "def uni_total(string):\n    \n    output = 0\n    \n    for letter in string:\n        output += ord(letter)\n    \n    return output", "def uni_total(string):\n    return sum([ord(elem) for elem in string])", "def uni_total(string):\n    toplam = 0\n    for i in string:\n        toplam += int(str(ord(i)))\n    return toplam", "def uni_total(string):\n    int = [ord(x) for x in string]\n    sum = 0\n    for i in int:\n        sum += i\n    return sum", "def uni_total(string):\n    return sum(ord(each) for each in string)", "def uni_total(string):\n    b = []\n    for i in range(len(string)):\n        b.append(ord(string[i]))\n    return sum(b)", "def uni_total(string):\n    if not string:\n        return 0\n    if len(string) == 1:\n        return ord(string)\n    return sum(list(map(ord, string)))", "def uni_total(string):\n    char_uni = {\" \":32, \"0\":48, \"1\":49, \"2\":50, \"3\":51, \"4\":52, \"5\":53, \"6\":54, \"7\":55, \"8\":56, \"9\":57, \"A\":65, \"B\":66, \"C\":67, \"D\":68, \"E\":69, \"F\":70, \"G\":71, \"H\":72, \"I\":73, \"J\":74, \"K\":75, \"L\":76, \"M\":77, \"N\":78, \"O\":79, \"P\":80, \"Q\":81, \"R\":82, \"S\":83, \"T\":84, \"U\":85, \"V\":86, \"W\":87, \"X\":88, \"Y\":89, \"Z\":90, \"a\":97, \"b\":98, \"c\":99, \"d\":100, \"e\":101, \"f\":102, \"g\":103, \"h\":104, \"i\":105, \"j\":106, \"k\":107, \"l\":108, \"m\":109, \"n\":110, \"o\":111, \"p\":112, \"q\":113, \"r\":114, \"s\":115, \"t\":116, \"u\":117, \"v\":118, \"w\":119, \"x\":120, \"y\":121, \"z\":122}\n    string_lst  = list(string)\n    uni_lst = []\n    \n    for i in string_lst:\n        for char, uni in char_uni.items():\n            if char == i:\n                uni_lst += [uni]\n                continue\n        if i == \" \":\n            continue\n        \n    return sum(uni_lst)\n\nprint(uni_total(\"no chars should return zero\"))", "def uni_total(string):\n    return sum(ord(i) for i in string) if string != '' else 0", "uni_total=lambda s: sum([ord(e) for e in s]) if len(s)>0 else 0", "def uni_total(s):\n    s=list(s)\n    s=[ord(i) for i in s]\n    return sum(s)", "def uni_total(s):\n  return sum(ord(char) for char in s)\n", "def uni_total(string):\n    #your code here\n    try: \n        return sum([ord(i) for i in string])\n    except:\n        return 0", "def uni_total(string):\n    sco = 0\n    for let in string:\n        sco += ord(let)\n    return sco", "def uni_total(string):\n    return sum([int(ord(s)) for s in string])", "def uni_total(string):\n    return sum([ord(x) for x in string])\n    # Flez\n", "def uni_total(string):\n    ret = 0\n    for c in string:\n        ret += ord(c)\n    return ret", "def uni_total(string):\n  finalist = list()\n  mylist = list(string)\n  for x in mylist:\n    finalist.append(ord(x))\n  return sum(finalist)\n", "def uni_total(string):\n    return sum(ord(s) for s in string) if string else 0", "def uni_total(string):\n    res = 0\n    \n    for let in string:\n        res += ord(let)\n    \n    return res\n", "def uni_total(string):\n    letters = list(string)\n    total = 0\n    for letter in letters:\n        total = total + ord(letter)\n    return total", "def uni_total(string):\n    # sum all caractere in string \n    return sum(ord(s) for s in string)", "def uni_total(sz):\n    return sum(ord(c) for c in sz)", "def uni_total(string):\n    #your code here\n    rez = 0\n    for c in string:\n        rez += ord(c)\n    return rez     \n    \n", "def uni_total(string):\n    res = 0\n    for item in string:\n        res += ord(item)\n    return res", "from functools import reduce\n\nuni_total=lambda s: reduce(lambda a,b: a+ord(b),s,0)", "def uni_total(string):\n    if string == '':\n        return 0\n  \n    return sum(ord(i) for i in string)", "def uni_total(string):\n    cnt = 0\n    for i in string:\n        cnt += ord(i)\n    return cnt", "def uni_total(string):\n    #your code here\n    ans = 0\n    for i in range(len(string)):\n        ans += ord(string[i])\n    return ans", "def uni_total(string):\n    return sum(ord(num) for num in string)", "def uni_total(string):  \n    return 0 if len(string) == 0 else sum([int(ord(ch)) for ch in string])", "def uni_total(string):\n    uni_total = 0\n    for i in string:\n        uni_total += ord(i)\n    return uni_total", "def uni_total(string):\n    tot = 0\n    for x in list(string):\n        tot += ord(x)\n    return tot", "def uni_total(string):\n    #your code here\n    sum=0\n    for e in string:\n        sum=sum+ord(e)\n    return sum", "def uni_total(str):\n    x = 0\n    for l in str:\n        x += ord(l)\n    return x", "def uni_total(string):\n    if not string:\n        return 0\n    return sum([ord(s) for s in string])", "def uni_total(string):\n    result=0\n    print(string)\n    for i in string:\n        print(ord(i))\n        result=result+ord(i)\n    return result", "def uni_total(string):\n  a=list(string)\n  tot=0\n  for i in a:\n    tot=tot+ord(i)\n  return(tot)\n", "def uni_total(string):\n    cnt = 0\n    for e in string:\n        cnt += ord(e)\n        \n    return cnt\n    #your code here\n", "def uni_total(s):\n    sum = 0\n    for c in s:\n        sum += ord(c)\n    return sum", "def uni_total(string):\n    count = 0 \n    for x in string:\n        count += ord(x)\n    return count\n", "def uni_total(string):\n  return sum([ord(str) for str in string])", "def uni_total(string):\n    s = string\n    count = 0\n    if s == \"\":\n        return 0\n    for x in range(len(s)):\n        count = count + ord(s[x])\n    return count", "uni_total = lambda string: sum([ord(x) for x in list(string)])", "def uni_total(string):\n    lst = [ord(x) for x in list(string)]\n    return sum(lst)", "def uni_total(string):\n    a = 0\n    for s in string:\n        a = a + ord(s)\n    return a", "def uni_total(string):\n    x = 0\n    if string == '':\n        return 0\n    for i in range(len(string)):\n        x += int(ord(string[i]))\n    return x", "def uni_total(string):\n    #your code here\n    s=0\n    for x in string:\n        s+=ord(x)\n    return s", "def uni_total(string):\n    out=0\n    if not string:return 0\n    for items in string:\n        out+=ord(items)\n    return out", "def uni_total(string):\n    if string == \"\":\n      return 0\n    \n    count = 0\n    for i in string:\n        count = count + ord(i)\n    return count"]