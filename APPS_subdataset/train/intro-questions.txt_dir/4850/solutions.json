["def solution(M1, M2, m1, m2, V, T) :\n    return (m1/M1+m2/M2)*0.082*(T+273.15)/V", "def solution(M1, M2, m1, m2, V, T):\n    return (m1 / M1 + m2 / M2) * (T + 273.15) * .082 / V", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    \n# 1 - Calculate the amount of substance in moles\n    n1 = given_mass1 / molar_mass1\n    n2 = given_mass2 / molar_mass2\n# 2 - Convert the temperature from Celcius to kelvin  \n    Temp_Kelvin = temp + 273.15\n# 3 - Enter the gas constant\n    R = 0.082\n# 4 - Calculate the ideal gas law       \n    P1 = (n1 * R * Temp_Kelvin) / volume\n    P2 = (n2 * R * Temp_Kelvin) / volume\n# 5 - Apply Dalton's law\n    P = P1 + P2\n    return P", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    t = temp + 273.15\n    R = 0.082\n    n_mol1 = given_mass1 / molar_mass1\n    n_mol2 = given_mass2 / molar_mass2\n    return (n_mol1 * R * t/volume) + (n_mol2 * R * t/volume)\n", "def pressure(molar_mass, given_mass, v, t) :\n    return given_mass*0.082*(t+273.15)/molar_mass/v\n    \ndef solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    return pressure(molar_mass1, given_mass1, volume, temp) + \\\n           pressure(molar_mass2, given_mass2, volume, temp)", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    temp += 273.15\n    R = 0.082\n    n = given_mass1/molar_mass1 + given_mass2/molar_mass2\n    return n*R*temp/volume", "def solution(M1, M2, m1, m2, V, T):\n    t = T + 273.15\n    return 0.082 * (m1/M1 + m2/M2) * t / V", "solution=lambda m,n,M,N,V,T:(M/m+N/n)*0.082*(T+273.15)/V", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    #Chemistry PV = nRT\n    P1 = ((given_mass1/molar_mass1) * 0.082 * (temp+273.15))/volume\n    P2 = ((given_mass2/molar_mass2) * 0.082 * (temp+273.15))/volume\n    \n    return P1 + P2", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    R = 0.082  # Gas constant\n    T = temp + 273.15  # Kelvin\n    n1 = given_mass1 / molar_mass1  # Amount of substance 1\n    n2 = given_mass2 / molar_mass2  # Amount of substance 2\n    return (n1 + n2) * R * T / volume", "class solution:\n    __truediv__ = __abs__ = __sub__ = __lt__ = __init__ = lambda x, *y: print() if len(y) > 3 else x", "solution=lambda a,b,c,d,e,f:(c/a+d/b)*0.082*(f+273.15)/e", "R = 0.082\nCELSIUS_TO_KELVIN = 273.15\n\ndef solution(M1, M2, m1, m2, V, T):\n    return ((m1 / M1 + m2 / M2) * R * (T + CELSIUS_TO_KELVIN)) / V", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :  \n    n1 = given_mass1 / molar_mass1  # \u0445\u0438\u043c. \u043a\u043e\u043b\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0430 (\u043c\u043e\u043b\u044c)\n    n2 = given_mass2 / molar_mass2  # \u0445\u0438\u043c. \u043a\u043e\u043b\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0430 (\u043c\u043e\u043b\u044c)\n    R = 0.082  # \u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u0430\u044f \u0433\u0430\u0437\u043e\u0432\u0430\u044f \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u0430\u044f (\u043b\u0438\u0442\u0440 * \u0430\u0442\u043c)/(\u041a\u0435\u043b\u044c\u0432\u0438\u043d * \u043c\u043e\u043b\u044c)\n    T = temp + 273.15  # \u0422\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u0430 \u0432 \u041a\u0435\u043b\u044c\u0432\u0438\u043d\u0430\u0445\n    V = volume  # \u041e\u0431\u044a\u0451\u043c\n    P = ((n1 + n2) * R * T) / V \n    return P\n", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    \n    rez1 = (given_mass1 / molar_mass1) *  0.082 * (temp + 273.15) / volume;\n    rez2 = (given_mass2 / molar_mass2) *  0.082 * (temp + 273.15) / volume;\n    \n    return rez1 + rez2;", "def solution(M1, M2, m1, m2, v, t):\n    M1 = m1 * 0.001/M1\n    M2 = m2 * 0.001/M2\n    t = t + 273.15\n    r = 0.082\n    return (((M1 + M2) * r * t) / v) * 1000", "def solution(mm1, mm2, gm1, gm2, volume, temp) :\n    Mass1 = gm1 * 0.001/mm1\n    Mass2 = gm2 * 0.001/mm2\n    Temperature = temp + 273.15\n    answer = (Mass1 + Mass2) * 0.082 * Temperature / volume * 1000\n    return answer", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    R = 0.082;\n    n1 = given_mass1 / molar_mass1\n    n2 = given_mass2 / molar_mass2\n    num = (n1 + n2) * R * (temp + 273.15)\n    return num / volume", "def solution(m1, m2, M1, M2, V, t) :\n    n = (M1/m1) + (M2/m2)\n    R = 0.082 \n    T = t + 273.15\n    P=(n*R*T)/V\n    return P\n\n\n# Pressure (P),mercury/torr (mm Hg, torr)\n# Volume (V), given in liters\n# Number of moles of gas (n)\n# R is the ideal gas constant\n# Temperature of the gas (T) measured in degrees Kelvin (K)\n\n    \n", "def solution(M1, M2, m1, m2, V, T) :\n    #P=nRT/V\n    return (m1/M1+m2/M2)*0.082*(T+273.15)/V", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    mass1 = given_mass1 * 0.001/molar_mass1\n    mass2 = given_mass2 * 0.001/molar_mass2\n    combined_mass = mass1 + mass2\n    kelvin = temp + 273.15\n    return combined_mass * 0.082 * kelvin / volume * 1000", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    return ((given_mass1*0.001/molar_mass1 + given_mass2*0.001/molar_mass2)*82*(temp + 273.15))/volume", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp):\n    M1 = given_mass1 * 0.001 / molar_mass1\n    M2 = given_mass2 * 0.001 / molar_mass2\n    return (M1 + M2) * 82 * (temp + 273.15) / volume", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    m1, m2 = given_mass1 / molar_mass1, given_mass2 / molar_mass2\n    temp = temp + 273.15\n    return (m1 + m2) * 0.082 * temp / volume", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n        R=0.082\n        return (given_mass1/molar_mass1)*R*(temp+273.15)/volume+(given_mass2/molar_mass2)*R*(temp+273.15)/volume", "def solution(mm1, mm2, gm1, gm2, v, t):\n    return ((gm1/mm1 + gm2/mm2) * (t + 273.15) * 0.082) / v", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp):\n    M1 = given_mass1 * 0.001 / molar_mass1\n    M2 = given_mass2 * 0.001 / molar_mass2\n    temp = temp + 273.15\n    R = 0.082\n    return (((M1 + M2) * R * temp) / volume) * 1000", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp):\n  #  P = mRT/V\n  press = ((given_mass1/molar_mass1) + (given_mass2/molar_mass2)) * 0.082 * (temp + 273.15) * (1/volume)\n  return press", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    # Find moles of given gasses\n    moles1 = given_mass1 / molar_mass1\n    moles2 = given_mass2 / molar_mass2\n    # Convert Celcius to Kelvin\n    kelvin = temp + 273.15\n    gas_constant = 0.082\n    \n    # Given ideal gas law: PV = nRT\n    # P = nRT/V                            (by algebra)\n    # P = ((moles1 + moles2)RT)/V          (by substitution)\n    return (moles1 + moles2) * gas_constant * kelvin / volume\n", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    \n    m1 = (given_mass1*0.001)/molar_mass1\n    \n    m2 = (given_mass2*0.001)/molar_mass2\n    \n    t = temp+273.15\n    \n    R = 0.082\n    \n    p = (m1+m2)*R*t/volume*1000\n    \n    return p\n", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    mass1 = given_mass1 * .001/molar_mass1\n    mass2 = given_mass2 * .001/molar_mass2\n    newtemp = temp + 273.15\n    return ((mass1 + mass2) * .082 * newtemp * 1000) / volume", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    R = 0.082 #dm3.atm.K-1.mol-1\n    T = 273.15 #Kelvin\n    p1 = (given_mass1/molar_mass1)*R*(temp+T)/volume\n    p2 = (given_mass2/molar_mass2)*R*(temp+T)/volume\n    return (p1+p2)", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :  \n    m1 = given_mass1 * 0.001 / molar_mass1\n    m2 = given_mass2 * 0.001 / molar_mass2\n    \n    temp += 273.15\n    \n    return (m1 + m2) * 0.082 * temp / volume * 1000", "R = 0.082\nC_to_F = 273.15\n\n\ndef solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp):\n    n = (given_mass1 / molar_mass1 + given_mass2 / molar_mass2)\n    T = (temp + C_to_F)\n    return n * R * T / volume\n", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    # loi des gaz parfaits : PV=nRT\n    # P = nRT/(V) on cherche n, le nombre de moles ... = m/M\n    # pour un m\u00e9lange, P = sum(Pi)\n    # donc\n    return ((given_mass1/molar_mass1)+(given_mass2/molar_mass2))*0.082*(temp+273.15)/volume", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp):\n    n1 = given_mass1 / molar_mass1\n    n2 = given_mass2 / molar_mass2\n    return (n1 + n2) * 0.082 * (temp + 273.15) / volume", "def solution(M1, M2, m1, m2, V, T, R=0.082) :\n    return R * (T + 273.15) * (m1 / M1 + m2 / M2) / V", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    m1 = given_mass1 * 0.001/molar_mass1\n    m2 = given_mass2 * 0.001/molar_mass2\n    temp=temp+273.15\n    r=0.082\n    return (((m1+m2)*r*temp)/volume)*1000", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    R = 0.082\n    P1 = R*given_mass1/molar_mass1*(temp+273.15)/volume\n    P2 = R*given_mass2/molar_mass2*(temp+273.15)/volume\n    return P1+P2", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    pressure = ((given_mass1 / molar_mass1 + given_mass2 / molar_mass2) * (temp + 273.15) * 0.082) / volume\n    return pressure", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    return ((given_mass1/molar_mass1) * 0.082 * (temp + 273.15)) / volume \\\n        + ((given_mass2/molar_mass2) * 0.082 * (temp + 273.15)) / volume\n", "def solution(M1,M2,m1,m2,V,T) :\n    \"\"\" Return Total Pressure P=nRT/V\"\"\"\n    T += 273.15\n    R = 0.082\n    n = m1/M1 + m2/M2\n    P=(m1/M1 +m2/M2)*R*T/V\n    return P", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    molar_mass1 = given_mass1*0.001/molar_mass1\n    molar_mass2 = given_mass2*0.001/molar_mass2\n    tempKelvin = temp + 273.15\n    R = 0.082\n    Ptotal = (((molar_mass1 + molar_mass2)*R*tempKelvin)/volume)*1000\n    return Ptotal", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    total = (((given_mass1/molar_mass1)*(0.082)*(temp+273.15))/volume) + (((given_mass2/molar_mass2)*(0.082)*(temp+273.15))/volume)\n    return total", "# Formula adapted from https://www.wikihow.com/Calculate-Partial-Pressure\n\ndef solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp):\n    mass1 = given_mass1 / molar_mass1 * 0.001\n    mass2 = given_mass2 / molar_mass2 * 0.001\n    return (mass1 + mass2) * 0.082 * (temp + 273.15) / volume * 1000", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :    \n#   Calculate the amount of substance in moles\n    n1 = given_mass1 / molar_mass1\n    n2 = given_mass2 / molar_mass2\n#   Convert the temperature from Celcius to kelvin  \n    Temp_Kelvin = temp + 273.15\n#   Enter the gas constant\n    R_gasConst = 0.082\n#   Calculate the ideal gas law       \n    P1 = (n1 * R_gasConst * Temp_Kelvin) / volume\n    P2 = (n2 * R_gasConst * Temp_Kelvin) / volume\n#   Dalton's law\n    Pressure = P1 + P2\n    \n    return Pressure", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    Mass1, Mass2 = given_mass1 * 0.001/molar_mass1,  given_mass2 * 0.001/molar_mass2\n\n    Temperature = temp + 273.15\n\n    return (Mass1 + Mass2) *  0.082 * Temperature / volume * 1000\n", "def solution(M1, M2, m1, m2, v, t) :\n    return ((m1 / M1) + (m2 / M2)) * 0.082 * (t + 273.15) / v", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    P1 = ((given_mass1 / molar_mass1) * 0.082 * (temp + 273.15)) / volume\n    P2 = ((given_mass2 / molar_mass2) * 0.082 * (temp + 273.15)) / volume\n    P_total = P1 + P2\n    return P_total", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n# PV = nRT\n    return ((given_mass1/molar_mass1+given_mass2/molar_mass2)*0.082*(temp+273.15))/volume", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    n1=given_mass1/molar_mass1\n    n2=given_mass2/molar_mass2\n    T=273.15+temp\n    R=0.082   #gas constant value\n    return ((n1+n2)*R*T)/volume\n    # your code goes here\n", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    n = (given_mass1 /molar_mass1) + (given_mass2  / molar_mass2) \n    R = 0.082\n    T = temp + 273.15\n    return n*R*T / volume\n", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    n1 = given_mass1 / (1000 * molar_mass1)\n    n2 = given_mass2 / (1000 * molar_mass2)\n    return 0.082 * (n1 + n2) * (temp + 273.15) / (volume / 1000)", "def solution(mm1, mm2, m1, m2, volume, temp) :\n    return ((m1/mm1 + m2/mm2)*0.082*(273.15+temp))/volume", "solution = lambda molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp: (given_mass1/molar_mass1 + given_mass2/molar_mass2) * 0.082 * (temp + 273.15) / volume", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    return ((((float(given_mass1)/float(molar_mass1))+(float(given_mass2)/float(molar_mass2)))*0.082*(float(temp)+273.15))/float(volume))", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    #P=nRT/V\n    #no of molecules=total mass/molar mass\n    n=(given_mass1/molar_mass1)+(given_mass2/molar_mass2)\n    R=0.082\n    Pressure=n*R*(temp+273.15)/volume\n    return Pressure", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    total_mass = (given_mass1) / (molar_mass1) + (given_mass2) / (molar_mass2)\n    return (total_mass * 0.082 * (temp + 273.15)) / volume", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    return((given_mass1/molar_mass1 + given_mass2/molar_mass2)/volume*0.082*(temp+273.15))", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp):\n    mass1 = given_mass1 / molar_mass1\n    mass2 = given_mass2 / molar_mass2\n    temp = temp + 273.15\n  \n    return (mass1 * 0.082 * temp/volume) + (mass2 * 0.082 * temp/volume)\n", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    # your code goes here\n    mass1 = given_mass1 * 0.001/molar_mass1;\n    mass2 = given_mass2 * 0.001/molar_mass2;\n    temp = temp + 273.15\n    return (mass1+mass2)*0.082*temp/volume*1000", "R = .082\nzK = 273.15\n\ndef solution(m1, m2, M1, M2, V, T):\n    return (M1 / m1 + M2 / m2) * R * (T + zK) / V", "solution = lambda M1, M2, m1, m2, V, t: ((m1 / M1) + (m2 / M2)) * 0.082 * (t + 273.15) / V\n", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp, R=0.082) :    \n    return (((molar_mass1**-1)*given_mass1 + (molar_mass2**-1)*given_mass2)*R*(temp+273.15))/volume", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    # PV = nRT  Ideal Gas Law\n    #\n    # P = nRT / V\n    #\n    # P = Pressure (in atmospheres)\n    # n = Number of moles of gas\n    # R = Ideal Gas Constant (0.082)\n    # T = Temperature (degrees Kelvin)\n    # V = Volume of gas (liters)\n    \n    R = 0.082\n    T = temp + 273.15\n    moles = given_mass1 / molar_mass1 + given_mass2 / molar_mass2\n    \n    return moles * R * T / volume\n", "solution=lambda a,b,c,d,e,f:(c/a+d/b)*.082*(f+273.15)/e", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    n1, n2 = given_mass1 / molar_mass1, given_mass2 / molar_mass2\n    R = 0.082\n    T = temp + 273.15\n    return (n1 + n2) * R * T / volume", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    m1 = given_mass1 * 0.001 / molar_mass1\n    m2 = given_mass2 * 0.001 / molar_mass2\n    T = temp + 273.15\n    return (m1 + m2) * 0.082 * T / volume * 1000", "def solution(mole1, mole2, mass1, mass2, volume, temp) :\n    div1 = mass1 / float(mole1)\n    div2 = mass2 / float(mole2)\n    return (0.082 / float(volume)) * (temp + 273.15) * (div1 + div2)", "def solution(gmol1, gmol2, m1, m2, volume, temp) :\n    # PV=nRT\n    # n = n1 + n2\n    # nx = gx / (g/mol)x\n    return (m1/gmol1 + m2/gmol2)*0.082*(temp+273.15)/volume", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    n_moles = given_mass1 / molar_mass1 + given_mass2 / molar_mass2\n    \n    r_constant = 0.082\n    temp_kelvin = 273.15 + temp\n    \n    pressure = (r_constant * n_moles * temp_kelvin) / volume\n    \n    return pressure\n    \n    # your code goes here\n", "def solution(m1, m2, M1, M2, V, t) :\n    return 0.082 * (M1/m1 + M2/m2) * (t+ 273.15) / V", "def solution(m_mass1, m_mass2, g_mass1, g_mass2, vol, temp) :\n    return (g_mass1 / m_mass1 + g_mass2 / m_mass2) * 0.082 * (temp + 273.15) / vol", "\"\"\"\nAnswer => Combine Mass1 & Mass2, multiply by 0.082, multiply by Temperature, divide by the Volume, multiply by 1000\n\"\"\"\n\ndef solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    temp += 273.15\n    \n    m1 = given_mass1 * 0.001/molar_mass1\n    m2 = given_mass2 * 0.001/molar_mass2\n    \n    return (m1+m2) * 0.082 * temp / volume * 1000", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    return (given_mass1/molar_mass1+ given_mass2/molar_mass2)*.082*(temp + 273.15)/volume", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    # your code goes here\n    n = (given_mass1/molar_mass1) + (given_mass2/molar_mass2)\n    return n * 0.082 * (temp +273.15) /(volume)", "def solution(m1, m2, M1, M2, V, T) :\n    m1 = M1 * 0.001/m1\n    m2 = M2 * 0.001/m2\n    T += 273.15\n    R = 0.082\n    return (m1+m2)*R*T/V*1000", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    temp += 273.15\n    p1 = (given_mass1/molar_mass1 * 0.082 * temp) / volume\n    p2 = (given_mass2/molar_mass2 * 0.082 * temp) / volume\n    return p1+p2", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    n = given_mass1/molar_mass1 + given_mass2/molar_mass2\n    T = temp + 273.15\n    V = volume\n    R = 0.082\n    return n*R*T/V", "def solution(mm1, mm2, gm1, gm2, v,t) :\n    return (gm1/mm1+gm2/mm2)* 0.082*(t+273.15)/v", "def solution(M1, M2, m1, m2, V, T):\n    R = 0.082\n    M1 = m1 * 0.001 / M1\n    M2 = m2 * 0.001 / M2\n    T +=  273.15\n    return (((M1 + M2) * R * T) / V) * 1000", "R = 0.082\n\ndef solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    # P = nRT/V\n    # n = nr of mols\n    # Ptotal = P1 + P2\n    n = (given_mass1 / molar_mass1) + (given_mass2 / molar_mass2)\n    T = temp + 273.15\n    V = volume\n    P = n*R*T/V    \n    return (P)\n", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    M1 = given_mass1 * 0.001 / molar_mass1\n    M2 = given_mass2 * 0.001 / molar_mass2\n    T = temp + 273.15\n    R = 0.082\n    return (M1 + M2) * R * T / volume * 1000", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume,\n             temp):\n    f = 0.082 * (temp + 273.15) / volume\n    return f * (given_mass1 / molar_mass1 + given_mass2 / molar_mass2)", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    kelvin = temp + 273.15\n    R = 0.082\n    return (( given_mass1 / molar_mass1) + (given_mass2 / molar_mass2)) * R * kelvin / volume", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    mass_1 = given_mass1 / molar_mass1 \n    mass_2 = given_mass2 / molar_mass2\n    temperature = temp + 273.15\n    return (mass_1 + mass_2) * 0.082 * temperature / volume\n", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    print(\"define parametros\")\n    dm1 = molar_mass1\n    dm2 = molar_mass2\n    dg1 = given_mass1\n    dg2 = given_mass2\n    dvo = volume\n    dte = temp\n    return (0.082/dvo)*(dg2/dm2 + dg1/dm1)*(dte + 273.15)\n    \n   # your code goes here\n", "kelv_t = lambda x: x + 273.15\nr = 0.082\nsolution = lambda molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp: r * kelv_t(temp) / volume * (given_mass1/molar_mass1 + given_mass2/molar_mass2)", "def solution(M1, M2, m1, m2, v, t):\n    R = 0.082\n    t += 273.15\n    return m1*R*t/(M1*v) + m2*R*t/(M2*v)", "def solution(M1, M2, gm1, gm2, v, t) :\n    Mass1 = gm1 * 0.001/M1\n    Mass2 = gm2 * 0.001/M2\n    temp = t + 273.15\n    return ((((Mass1 + Mass2) * 0.082) * temp)/v) * 1000\n    \n    \n    \n#     For people wanting to do this kata, here is the formula:\n# Mass1 = mole1 * 0.001/Mass1;\n\n# Mass2 = mole2 * 0.001/Mass2;\n\n# Temperature >> Convert to Kelvin (add 273.15)\n\n# Answer => Combine Mass1 & Mass2, multiply by 0.082, multiply by Temperature, divide by the Volume, multiply by 1000\n", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp):\n    n1 = given_mass1 / molar_mass1\n    n2 = given_mass2 / molar_mass2\n    temp = temp + 273.15\n    return ((n1 * 0.082 * temp) / volume) + ((n2 * 0.082 * temp) / volume)", "solution = lambda M1,M2,m1,m2,V,T : (m1/M1+m2/M2)*0.082*(T+273.15)/V", "def solution(m1, m2, g1, g2, v, t) :\n#Mass1 = mole1 * 0.001/Mass1;\n#Mass2 = mole2 * 0.001/Mass2;\n#Temperature >> Convert to Kelvin (add 273.15)\n#Combine Mass1 & Mass2, multiply by 0.082, multiply by Temperature, divide by the Volume, multiply by 1000\n    return (g1 * 0.001 / m1 + g2 * 0.001 / m2) * 0.082 * (t + 273.15) / v * 1000", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :    \n    pressure_1 = (given_mass1 / molar_mass1) * 0.082 * (temp + 273.15) / volume\n    pressure_2 = (given_mass2 / molar_mass2) * 0.082 * (temp + 273.15) / volume\n    return pressure_1 + pressure_2", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp):\n    #    (n R T / V)1 + (n R T / V)2\n    R = 0.082\n    T = temp + 273.15\n    V = volume\n    n1 = given_mass1 / molar_mass1\n    n2 = given_mass2 / molar_mass2\n    return (n1 * R * T  / V) + (n2 * R * T  / V)", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    R = 0.082 #dm3.atm.K-1.mol-1\n    return (given_mass1/molar_mass1 + given_mass2/molar_mass2)*R*(temp+273.15)/volume", "def solution(M1, M2, m1, m2, V, T) :\n    M1 = m1 * 0.001/M1;\n    M2 = m2 * 0.001/M2;\n    T = T + 273.15;\n    return (((M1 + M2) * 0.082 * T) / V) * 1000;", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp) :\n    R = 0.082\n    Mass1 = given_mass1 / molar_mass1\n    Mass2 = given_mass2 / molar_mass2\n    return (Mass1 + Mass2) * R / volume * (temp + 273.15)", "def solution(mm1, mm2, gm1, gm2, volume, temp) :\n    # your code goes here\n    R = 0.082\n    return R*(gm1/mm1+gm2/mm2)*(temp+273.15)/volume\n", "def solution(molar_mass1, molar_mass2, given_mass1, given_mass2, volume, temp):\n    # Ideal gas law: P = nRT / V\n    \n    # Gas constant\n    R = 0.082\n    \n    # Volume\n    V = volume\n    \n    # Temperature\n    T = temp + 273.15\n    \n    # Moles\n    n_1 = given_mass1/molar_mass1\n    n_2 = given_mass2/molar_mass2\n    n_tot = n_1 + n_2\n\n    # Pressure\n    P = n_tot * R * T / V\n    \n    return P"]