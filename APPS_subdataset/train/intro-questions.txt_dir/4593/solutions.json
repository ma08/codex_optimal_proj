["def merge_arrays(arr1, arr2):\n    return sorted(set(arr1+arr2))", "merge_arrays = lambda a, b: sorted(list(set(a + b)))", "merge_arrays = lambda a1, a2: sorted(set(a1+a2))", "def merge_arrays(arr1, arr2):\n  for arr in (arr1, arr2):\n    if arr[0] > arr[-1]:\n      arr.reverse()\n  res = []\n  i = 0\n  k = 0\n  while not(i >= len(arr1) and k >= len(arr2)):\n    left = arr1[i] if i < len(arr1) else float(\"inf\")\n    right = arr2[k] if k < len(arr2) else float(\"inf\")\n    res_last = res[-1] if res else None\n    if left <= right:\n      res_last != left and res.append(left)\n      i += 1\n    else:\n      res_last != right and res.append(right)\n      k += 1\n  return res\n", "def merge_arrays(arr1, arr2):\n    return sorted(set(arr1).union(set(arr2)))", "def merge_arrays(a,b):return(sorted(set(a+b)))", "merge_arrays = lambda arr1, arr2: sorted(set(arr1 + arr2))", "def merge_arrays(arr1, arr2):\n    return sorted(list(set(arr1 + arr2)))", "def merge_arrays(a1, a2):\n    return sorted(list(set(a1 + a2)))", "def merge_arrays(arr1, arr2):\n    return sorted(set(arr1) | set(arr2))", "from typing import List\n\ndef merge_arrays(arr1: List[int], arr2: List[int]) -> List[int]:\n    \"\"\" Merge two sorted arrays into one and return it. \"\"\"\n    return sorted(set(arr1 + arr2))", "def merge_arrays(arr1, arr2):\n    arr3 = arr1 + arr2\n    arr4 = sorted(arr3)\n    \n    uniqueList = []\n    \n    for i in arr4:\n        if i not in uniqueList:\n            uniqueList.append(i)\n    return uniqueList", "def merge_arrays(arr1, arr2):\n    arr1 = [arr1, arr1[::-1]][arr1[0] < arr1[-1]]\n    arr2 = [arr2, arr2[::-1]][arr2[0] < arr2[-1]]\n    \n    res = len(arr1) + len(arr2)\n    new = []\n    \n    while len(new) < res:\n        if arr1 and arr2:\n            if arr1[-1] < arr2[-1]:\n                item = arr1.pop()\n            else:\n                item = arr2.pop()\n        elif arr1:            \n            item = arr1.pop()\n        elif arr2:\n            item = arr2.pop()\n        else:\n            break\n\n        if item not in new:\n            new.append(item)\n    return new", "from heapq import merge\ndef merge_arrays(arr1, arr2):\n    return sorted(set(merge(arr1, arr2)))", "def merge_arrays(arr1, arr2):\n    b=[]\n    a=arr1+arr2\n    [b.append(i) for i in a if i not in b] \n    b.sort()\n    return b", "def make_desc_order(arr):\n    return arr[::-1] if arr and arr[0] < arr[-1] else arr\n\ndef merge_arrays_gen(*args):\n    arr1, arr2 = (make_desc_order(arr) for arr in args)\n    while arr1 or arr2:\n        yield arr1.pop() if not arr2 or (arr1 and arr1[-1] < arr2[-1]) else arr2.pop()\n\nmerge_arrays = lambda *args: list(dict.fromkeys(merge_arrays_gen(*args)))  # Python 3.6+ ", "def make_desc_order(arr):\n    return arr[::-1] if arr and arr[0] < arr[-1] else arr\n\ndef merge_arrays_gen(*args):\n    arr1, arr2 = (make_desc_order(arr) for arr in args)    \n    while arr1 or arr2:\n        if arr1 and arr2:\n            yield arr1.pop() if arr1[-1] < arr2[-1] else arr2.pop()\n        elif arr1:            \n            yield arr1.pop()\n        else:\n            yield arr2.pop()\n\nmerge_arrays = lambda *args: list(dict.fromkeys(merge_arrays_gen(*args)))", "merge_arrays=lambda a,b:sorted(set(a+b))", "def merge_arrays(arr1, arr2):\n    arr = []\n    for el in arr1:\n        if el not in arr:\n            arr.append(el)\n    for el in arr2:\n        if el not in arr:\n            arr.append(el)\n    return sorted(arr)", "def merge_arrays(arr1, arr2):\n    arr1 = arr1+arr2\n    res = []\n    for i in arr1: \n        if i not in res: \n            res.append(i)\n    return sorted(res)", "def merge_arrays(arr1, arr2):\n    x = arr1\n    y = []\n    for i in range(len(arr2)):\n        x.append(arr2[i])\n        \n    for j in range(len(x)):\n        if x[j] in y:\n            y = y\n        else:\n            y.append(x[j])\n    return sorted(y)\n", "def merge_arrays(arr1, arr2):\n    l=arr1+arr2\n    l.sort()\n    l1=[]\n    for i in l:\n        if(i not in l1):\n            l1.append(i)\n    return l1", "def merge_arrays(arr1, arr2):\n    return sorted(list(set(arr1 + arr2))) if arr1 or arr2 else []", "def merge_arrays(a1, a2):\n    return list(dict.fromkeys(sorted(a1+a2)))", "def merge_arrays(arr1, arr2):\n    arr1  = arr1 + arr2\n    arr1 = sorted(arr1)\n    a = arr1[0]\n    arr = [arr1[0]]\n    for x in range(1, len(arr1)):\n        if arr1[x] != a:\n            a = arr1[x]\n            arr.append(arr1[x])\n    return arr", "def merge_arrays(arr1, arr2):\n    arr = set(arr1 + arr2)\n    return list(sorted(arr))", "def merge_arrays(arr1, arr2):\n    final_list = []\n    for y in arr1:\n        if y not in final_list:\n            final_list.append(y)\n    for x in arr2:\n        if x not in final_list:\n            final_list.append(x)\n    return sorted(final_list)", "def merge_arrays(arr1, arr2):\n    arr = []\n    for el in arr2:\n        if el not in arr:\n            arr.append(el)\n    for el in arr1:\n        if el not in arr:\n            arr.append(el)\n    \n    return sorted(arr)\n", "def merge_arrays(arr1, arr2):\n    arr3=[]\n    arr1=list(set(arr1))\n    arr2=list(set(arr2))\n    arr1.sort()\n    arr2.sort()\n    while len(arr1)>0 and len(arr2)>0:\n        if arr1[0]<arr2[0]:\n            arr3.append(arr1[0])\n            del arr1[0]\n        elif arr1[0]>arr2[0]:\n            arr3.append(arr2[0])\n            del arr2[0]\n        else:\n            arr3.append(arr1[0])\n            del arr1[0]\n            del arr2[0]\n    return arr3+arr2 if len(arr1)==0 else arr3+arr1", "def merge_arrays(arr1, arr2):\n    ans=[]\n    for x in arr1:\n        if x not in ans:\n            ans.append(x)\n    for x in arr2:\n        if x not in ans:\n            ans.append(x)\n    return sorted(ans)", "def merge_arrays(arr1, arr2):\n    return sorted(list(set(arr1 + arr2)))\n\n\n'''You are given two sorted arrays that contain only integers. \nYour task is to find a way to merge them into a single one, \nsorted in ascending order. '''", "def merge_arrays(arr1, arr2):\n    noice = list(set(arr1+arr2))\n    noice.sort()\n    return noice", "def merge_arrays(arr1, arr2):\n    return sorted(list(set([*arr1, *arr2])))", "def merge_arrays(arr1, arr2):\n    ans=arr1+arr2\n    ans= list(set(ans))\n    ans.sort()\n    return ans\n", "def merge_arrays(arr1, arr2):\n    res = []\n    for num in arr1:\n        if num not in res:\n            res.append(num)\n    for num in arr2:\n        if num not in res:\n            res.append(num)\n    res.sort()\n    return res", "def merge_arrays(a, b):\n    joined = a+b\n    noDupes = []\n    for x in joined:\n        if x not in noDupes:\n            noDupes.append(x)\n    noDupes.sort()\n    return noDupes\n#---end function\n", "def merge_arrays(arr1, arr2):\n    a = set(arr1).union(set(arr2))\n    b = list(a)\n    b.sort()\n    return b", "def merge_arrays(arr1, arr2):\n    print(arr1 + arr2)\n    res = list(arr1 + arr2)\n    res = sorted(set(res))\n    return res", "def merge_arrays(arr1, arr2):\n    arr = []\n    for i in arr1:\n        if i not in arr:\n            arr.append(i)\n    for i in arr2:\n        if i not in arr:\n            arr.append(i)\n    return sorted(arr)", "def merge_arrays(a, b):\n    return sorted(list(dict.fromkeys(a+b)))", "def merge_arrays(arr1, arr2):\n    arr1 = sorted(arr1)\n    arr2 = sorted(arr2)\n    i,j = 0,0\n    result = []\n    while True:\n        if i == len(arr1):\n            result.extend(arr2[j:])\n            break\n        elif j == len(arr2):\n            result.extend(arr1[i:])\n            break\n        elif arr1[i] < arr2[j]:\n            result.append(arr1[i])\n            i += 1\n        else:\n            result.append(arr2[j])\n            j += 1\n    unique = []\n    for num in result:\n        if num not in unique:\n            unique.append(num)\n    return unique", "def merge_arrays(arr1, arr2):\n    my_List = arr1 + arr2\n    a = list(set(my_List))\n    return sorted(a)", "def merge_arrays(arr1, arr2):\n    final = []\n    for el1 in arr1:\n        if not el1 in final:\n            final.append(el1)\n    for el2 in arr2:\n        if not el2 in final:\n            final.append(el2)\n    return sorted(final)", "def merge_arrays(arr1, arr2):\n    a=[]\n    a=list(set(arr1+arr2))\n    return sorted(a)", "def merge_arrays(arr1, arr2):\n    lista = []\n    a  = sorted(arr1) + sorted(arr2)\n    a.sort()\n    for i in a:\n        if i not in lista:\n            lista.append(i)\n    return lista\n    \n", "def merge_arrays(arr1, arr2):\n    result = list(set().union(arr1, arr2))\n    result.sort()\n    return result", "def merge_arrays(arr1, arr2):\n    a = set(arr1).union(arr2)\n    return sorted(list(a))", "def merge_arrays(arr1, arr2):\n    arr1.sort()\n    arr2.sort()\n    arr=arr1+arr2\n    u=[]\n    for a in arr:\n        if a not in u:\n            u.append(a)\n    u.sort()\n    return u", "def merge_arrays(a,b):\n    i=0\n    x=[]\n    while len(a)>i:\n        if a[i] not in x:\n            x.append(a[i])\n        i+=1\n            \n    i=0\n    while len(b)>i:\n        if b[i] not in x:\n            x.append(b[i])\n        i+=1\n    return sorted(x)", "def merge_arrays(arr1, arr2):\n    l=[]\n    for x in arr1:\n        l.append(x)\n    for x in arr2:\n        l.append(x)\n    return sorted(list(set(l)))", "def merge_arrays(arr1, arr2):\n    # Merge arrays whithout duplicates\n    arr = []\n    for i in range(len(arr1)):\n        if arr1[i] not in arr:\n            arr.append(arr1[i])\n    for i in range(len(arr2)):\n        if arr2[i] not in arr:\n            arr.append(arr2[i])\n    # Selection sort arrays\n    for i in range(len(arr)):\n        m = min(arr[i:])\n        index = arr.index(m)\n        \n        temp = arr[i]\n        arr[i] = m\n        arr[index] = temp\n    return arr\n            \n", "def merge_arrays(arr1, arr2):\n    arr1.extend(arr2)\n    res=list(set(arr1))\n    res.sort()\n    return res", "def merge_arrays(arr1, arr2):\n    lst=list()\n    for i in arr2:\n        if i not in lst:\n            lst.append(i)\n    for i in arr1:\n        if i not in lst:\n            lst.append(i)\n    return sorted(lst)", "def merge_arrays(arr1, arr2):\n    merged = arr1 + arr2\n    a = sorted(merged)\n    res = [] \n    [res.append(x) for x in a if x not in res] \n    return res", "def merge_arrays(arr1, arr2):\n    ls = list(set(arr1 + arr2))\n    ls.sort()\n    return ls", "def merge_arrays(arr1, arr2):\n    merge = set(arr1 + arr2)\n    return sorted(list(merge))", "def merge_arrays(*arr):\n    return sorted(set(sum(arr, [])))", "def merge_arrays(x, y):\n    res = []\n    while True:\n        if len(x) == 0:\n            res.extend(y)\n            break\n        if len(y) == 0:\n            res.extend(x)\n            break\n        first, second = x[0], y[0]\n        if first < second:\n            res.append(first)\n            x.pop(0)\n        else:\n            res.append(second)\n            y.pop(0)\n    return sorted(set(res))", "def merge_arrays(arr1, arr2):\n    for x in arr2:\n        arr1.append(x)\n    a=set(arr1)\n    b=list(a)\n    b.sort()\n    return b", "def merge_arrays(arr1, arr2):\n    merge=list(set(arr1).union(set(arr2)))\n    merge.sort()\n    return merge", "def merge_arrays(arr1, arr2):\n    temp = arr1 + arr2\n    res = [] \n    for i in temp: \n        if i not in res: \n            res.append(i)\n    res.sort()\n    return res", "def merge_arrays(a1, a2):\n    a = set(a1)\n    a.update(a2) \n    return sorted(a)", "def merge_arrays(arr1, arr2):\n    ar = arr1 + arr2\n    arr = []\n    for c in ar:\n        if c not in arr:\n            arr.append(c)\n    arr.sort()  \n    return arr", "def merge_arrays(arr1, arr2):\n    res = (arr1 + arr2)\n    res.sort()\n    res = list(dict.fromkeys(res))\n    return res", "def merge_arrays(arr1, arr2):\n    emptylist = []\n    for eachnumber in arr1:\n        if eachnumber in emptylist:\n            continue\n        else:\n            emptylist.append(eachnumber)\n    for eachnumber in arr2:\n        if eachnumber in emptylist:\n            continue\n        else:\n            emptylist.append(eachnumber)\n    emptylist.sort()\n    return emptylist", "def merge_arrays(arr1, arr2):\n    res = []\n    for i in arr1 :\n        if i not in res :\n            res.append(i)\n    for i in arr2 :\n        if i not in res :\n            res.append(i)\n    res.sort()\n    return res", "def merge_arrays(arr1, arr2):\n    sort_1 = sorted(list(dict.fromkeys(arr1)))\n    sort_2 = sorted(list(dict.fromkeys(arr2)))\n    one_index , two_index = 0,0\n    result = []\n    \n    while one_index < len(sort_1) and two_index < len(sort_2):\n        if sort_1[one_index] == sort_2[two_index]:\n            result.append(sort_1[one_index])\n            one_index+=1\n            two_index+=1\n        elif sort_1[one_index] < sort_2[two_index]:\n            result.append(sort_1[one_index])\n            one_index+=1\n        elif sort_1[one_index] > sort_2[two_index]:\n            result.append(sort_2[two_index])\n            two_index+=1\n    \n    result.extend(sort_1[one_index:])\n    result.extend(sort_2[two_index:])\n                  \n    return result", "def merge_arrays(arr1, arr2):\n    newarr=arr1+arr2\n    ls=[]\n    for i in newarr:\n        if i in ls:\n            continue\n        ls.append(i)\n    ls.sort()\n    return ls", "def merge_arrays(a1, a2):\n    res = a1 + a2\n    res = set(res)\n    res = list(res)\n    return sorted(res)\n            \n", "def merge_arrays(arr1, arr2):\n    final_list=arr1+arr2\n    return sorted(set(final_list))", "def merge_arrays(arr1, arr2):\n    \"\"\"Merge Sort\"\"\"\n    return(sorted(list(set(arr1+arr2))))", "def merge_arrays(arr1, arr2):\n    if arr1 and arr2:\n        temp_arr = arr1 + arr2\n        temp_arr.sort()\n        final_arr = list(dict.fromkeys(temp_arr))\n    return final_arr", "def merge_arrays(arr1, arr2):\n    for i in arr1:\n        arr2.append(i)\n    arr2.sort()\n    a = list(dict.fromkeys(arr2))\n    return a", "def merge_arrays(arr1, arr2):\n    ar = arr1+arr2\n    ar = list(set(ar))\n    ar.sort()\n    \n    return list(ar)", "def merge_arrays(arr1, arr2):\n    return sorted(set(arr1+arr2))\n    #pass\n", "def merge_arrays(arr1, arr2):\n\n    arr3 = sorted(arr1+arr2)\n\n    for i in range(len(arr3)):\n        for j in range(0,len(arr3) - 1 - i):\n            if arr3[i] == arr3[i+1]:\n                del arr3[i]\n            else:\n                continue\n    return arr3", "def merge_arrays(arr1, arr2):\n    if(arr1==[] and arr2==[]):\n        return([])\n    else:\n        s=[*arr1,*arr2]\n        t=list(set(s))\n        t.sort()\n        return(t)", "def merge_arrays(arr1, arr2):\n        lista = arr1 + arr2\n        return list(sorted(set(lista)))", "def merge_arrays(arr1, arr2):\n    mylist = sorted(arr1 + arr2)\n    mylist = list(dict.fromkeys(mylist))\n    return (mylist)", "def merge_arrays(arr1, arr2):\n    x=[]\n    for i in arr1:\n        x.append(i)\n    for j in arr2:\n        x.append(j)\n    return sorted(list(set(x)))", "def merge_arrays(arr1, arr2):\n    arr1.extend(arr2)\n    arr1=list(set(arr1))\n    return sorted(arr1)", "def merge_arrays(arr1, arr2):\n    unique = set(arr1)\n    unique.update(arr2)\n    return sorted(list(unique))", "def merge_arrays(arr1, arr2):\n    arr1.extend(arr2)\n    arr1.sort()\n    result = []\n    for i in arr1:\n        if i not in result:\n            result.append(i)\n    return result", "def merge_arrays(arr1, arr2):\n    if arr1 == [] and arr2 == []:\n        return []\n    salida = arr1+arr2\n    return sorted(set(salida))\n", "def merge_arrays(arr1, arr2):\n    arr1.sort()\n    arr2.sort()\n    c=[]\n    for i in arr1:\n        c.append(i)\n    for i in arr2:\n        c.append(i)\n    from collections import OrderedDict\n    u=list(OrderedDict.fromkeys(c))\n    u.sort()\n    return u", "def merge_arrays(arr1, arr2):\n    temp = list(set(arr1 + arr2))\n    return sorted(temp)", "def merge_arrays(arr1, arr2):\n    concat_set = list(set(arr1 + arr2))\n    concat_set.sort()\n    return concat_set", "def merge_arrays(arr1, arr2):\n    if arr1 == [] and arr2 == []:\n        return []\n    return sorted(list(set(arr1 + arr2)))", "def merge_arrays(arr1, arr2):\n    list=sorted(arr1+arr2)\n    New_list=[]\n    for x in list:\n        if x not in New_list:\n            New_list.append(x)\n    return New_list", "def merge_arrays(arr1, arr2):\n    new = sorted(arr1+arr2)\n    return list(dict.fromkeys(new))", "def merge_arrays(arr1, arr2):\n  arr1=sorted(arr1)\n  arr2=sorted(arr2)\n  i=0\n  j=0\n  sol=[]\n  if len(arr1)+len(arr2)==0:\n    return []\n  for h in range(len(arr1)+len(arr2)):\n    if j==len(arr2):\n      sol.append(arr1[i])\n      i += 1\n    elif i==len(arr1):\n      sol.append(arr2[j])\n      j += 1\n    elif arr1[i]<=arr2[j]:\n      sol.append(arr1[i])\n      i += 1\n    elif arr1[i]>arr2[j]:\n      sol.append(arr2[j])\n      j += 1\n  return sorted(set(sol), key = sol.index)", "def merge_arrays(arr1, arr2):\n  a = arr1+arr2\n  # print(a)\n  a.sort()\n  mylist = list(dict.fromkeys(a))\n  return mylist", "def merge_arrays(arr1, arr2):\n    \n    mylist1 = arr1 + arr2\n    \n    return sorted(set(mylist1))\n    \n\n", "def merge_arrays(arr1, arr2):\n    arr3 = []\n    for i in set(arr1):\n        arr3.append(i)\n    for j in set(arr2):\n        if j not in arr1:\n            arr3.append(j)\n    return sorted(arr3)", "def merge_arrays(arr1, arr2):\n    x = arr1 + arr2\n    return sorted([i for i in set(x)])", "def merge_arrays(arr1, arr2):\n    p= list(set(arr1).union(set(arr2)))\n    for i in range(0, len(p)-1):\n        for j in range(i, len(p)):\n            if p[j]<p[i]:\n                temp=p[i]\n                p[i]=p[j]\n                p[j]=temp\n            else:\n                pass\n    return p", "def merge_arrays(arr1, arr2):\n    merged = []\n    for number in arr1 + arr2:\n        if number not in merged:\n            merged.append(number)\n    return sorted(merged)", "def merge_arrays(arr1, arr2):\n    #merge then sort\n    arr = arr1+arr2\n    empty = []\n    for i in arr:\n        if i not in empty:\n            empty.append(i)\n    return sorted(empty)\n", "def merge_arrays(arr1, arr2):\n    a = sorted(arr1+arr2)\n    ant = a[0]\n    for x in a[1:]:\n        if x == ant:\n            a.remove(x)\n            ant = x\n        else:\n            ant = x\n    return a", "def merge_arrays(arr1, arr2):\n    arr = arr1 + arr2\n    arr3 = []\n    for item in arr:\n        if item not in arr3:\n            arr3.append(item)\n    return sorted(arr3)"]