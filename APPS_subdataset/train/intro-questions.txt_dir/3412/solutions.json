["def f(n):\n    res = 1\n    i = 2\n    while n != 1:\n        k = 0\n        while n % i == 0:\n            k += 1\n            n //= i\n        if k != 0:\n            res *= k * i**(k-1)\n        i += 1\n    return res", "def f(n):\n    p, n_, m = 2, 1, int(n ** .5)\n    while n > 1 and p <= m:\n        k = 0\n        while not n % p:\n            k += 1\n            n //= p\n        if k:\n            n_ *= k * p ** (k - 1)\n        p += 1\n    return n_", "from collections import Counter\n\ndef prime_factors(n):\n    p = []\n    while n % 2 == 0:\n        p.append(2)\n        n /= 2\n    for i in range(3, int(n**.5)+1, 2):\n        while n % i == 0:\n            p.append(i)\n            n /= i\n    if n > 2: p.append(int(n))\n    return p\n\ndef f(n):\n    fac = Counter(prime_factors(n))\n    re = 1\n    for i in fac.keys():\n        re *= fac[i] * (i**(fac[i]-1))\n    return re", "import math\nimport numpy as np\ndef f(n):\n    if set(primeFactors(n).values()) == {1}:\n        return 1\n    return np.prod([v*k**(v-1) for k,v in primeFactors(n).items()])   # (n_ = n*)\n    \ndef primeFactors(n): \n    ans = dict()\n    cnt2 = 0 \n    while n % 2 == 0:\n        cnt2 += 1\n        ans.update({2:cnt2}) \n        n = n / 2 \n    for i in range(3,int(math.sqrt(n))+1,2): \n        cnti = 0\n        while n % i== 0:\n            cnti += 1\n            ans.update({i:cnti}) \n            n = n / i  \n    if n > 2: \n        ans.update({n:1})\n    return ans", "def f(n):\n  factors = []\n  i = 2\n  while n > 1:\n      if n % i == 0:\n          n = n / i\n          factors.append(i)\n      else:\n          i += 1\n          \n  from collections import Counter\n  from numpy import prod\n  return prod([occurences * factor ** (occurences - 1)\n              for factor, occurences in Counter(factors).items()])", "def f(num):\n    dic = {}\n    while True:\n        for i in range(2, int(num **0.5)+1):\n            if num % i == 0:\n                num /= i\n                if i in dic:\n                    dic[i] += 1\n                else:\n                    dic[i] = 1\n                break\n        else:\n            if num in dic:\n                dic[num] += 1\n            else:\n                dic[num] = 1\n            break\n        continue\n    ans = 1\n    for item in dic:\n        ans *= dic[item] * item ** (dic[item] - 1)\n    return ans", "def f(n):\n    r=1; c=0; pf=primef(n); pf.append(-1); m=pf[0]\n    for i in pf:\n       if i==m: c+=1\n       else: r*=c*m**(c-1); m=i; c=1 \n    return r\n    \ndef primef(n):\n    i= 2; f= []\n    while i*i<=n:\n        if n%i: i+=1\n        else: n//=i; f.append(i)\n    if n>1: f.append(n)\n    return f", "from functools import reduce\ndef f(n):\n    facts = factorization(n)\n    return mul(power * prime ** (power - 1) for prime, power in facts)\n\ndef mul(ar):\n    return reduce(lambda x,y:x*y, ar)\n\ndef factorization(n):\n    result = []\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            power = 0\n            while n % i == 0:\n                power += 1\n                n /= i\n            result.append((i, power))\n        i += 1\n    if n > 1: result.append((n, 1))\n    return result\n", "from collections import Counter\ndef f(n):\n    i = 3\n    sum = 1\n    lists = []\n    while (n/2).is_integer():\n        lists.append(2)\n        n //= 2\n    while n != 1 and i <= n:\n        \n        while n % i == 0:\n            lists.append(i)\n            n //= i\n\n        i += 2\n    for i in dict(Counter(lists)):\n        a = dict(Counter(lists))[i]\n        sum *= (a*(i ** (a-1)))\n    return sum"]