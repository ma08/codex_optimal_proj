["def duplicates(array):\n    seen = []\n    dups = []\n    for char in array:\n        if char not in seen:\n             seen.append(char)\n        elif char not in dups:\n             dups.append(char)\n    \n    return dups\n", "def duplicates(arr):\n    res = []\n    for i, x in enumerate(arr):\n        if arr[:i + 1].count(x) > 1 and x not in res:\n            res.append(x)\n    return res", "def duplicates(array):\n    dub = []\n    for i, el in enumerate(array):\n        if i != array.index(el) and el not in dub:\n            dub.append(el)        \n    return dub", "def duplicates(array):\n    return [n for i, n in enumerate(array) if array[:i].count(n) == 1]", "from typing import List, Union\n\n\ndef duplicates(array: List[Union[int, str]]) -> List[Union[int, str]]:\n    d, res = {}, []\n    for a in array:\n        if d.setdefault(a, 0) == 1:\n            res.append(a)\n        d[a] += 1\n\n    return res\n", "from collections import defaultdict\n\ndef duplicates(lst):\n    result = []\n    counter = defaultdict(int)\n    for elem in lst:\n        counter[elem] += 1\n        if counter[elem] == 2:\n            result.append(elem)\n    return result", "def duplicates(array):\n    return [v for i,v in enumerate(array) if v in array[:i] and array[:i].count(v) == 1]", "def duplicates(array):\n    result = []\n    \n    for i,v in enumerate(array):\n        if v in array[:i] and v not in result:\n            result.append(v)\n            \n    return result", "def duplicates(array):\n    l, out = [], []\n    for e in array:\n        if e in l and e not in out:\n            out.append(e)\n        l.append(e)\n    return out"]