["import re\n\nSPLITTER = re.compile(r\"[\\s-]\")\n\ndef birdify(lst):\n    return ''.join(x[:4//len(lst)] for x in lst) + ('' if len(lst)!=3 else lst[-1][1])\n\ndef bird_code(arr):\n    return [birdify(SPLITTER.split(name)).upper() for name in arr]", "def bird_code(arr):\n    codes = []\n    \n    for name in arr:\n        name = name.replace(\"-\", \" \").split()\n        \n        if len(name) == 1:\n            code = name[0][:4]\n        \n        elif len(name) == 2:\n            code = name[0][:2] + name[1][:2]\n        \n        elif len(name) == 3:\n            code = name[0][0] + name[1][0] + name[2][:2]\n        \n        elif len(name) == 4:\n            code = \"\".join(n[0] for n in name)\n        \n        else:\n            return \"More than 4 words!\"\n        \n        codes.append(code.upper())\n    \n    return codes", "def encode(bird):\n    words = bird.replace('-', ' ').split()\n    patterns = {\n        1: (4, ),\n        2: (2, 2),\n        3: (1, 1, 2,),\n        4: (1, 1, 1, 1),\n    }\n    return \"\".join(map(lambda w, l: w[:l], words, patterns[len(words)])).upper()\n\n\ndef bird_code(birds):\n    return list(map(encode, birds))    ", "RULES = {\n    1: lambda x: ''.join(x[0][:4]).upper(),\n    2: lambda x: ''.join(x[0][:2] + x[1][:2]).upper(),\n    3: lambda x: ''.join(\n        x[0][:1] + x[1][:1] + x[2][:2]\n    ).upper(),\n    4: lambda x: ''.join(\n        x[0][:1] + x[1][:1] + x[2][:1] + x[3][:1]\n    ).upper(),\n}\n\ndef bird_code(arr):\n    arr = [bird.replace('-', ' ') for bird in arr]\n    ret_arr = []\n    \n    for bird in arr:\n        name_parts = bird.split()\n        ret_arr.append(\n            RULES[len(name_parts)](name_parts)\n        )\n    \n    return ret_arr", "def bird_code(birds):\n    codes = []\n    for bird in birds:\n        words = bird.upper().replace(\"-\", \" \").split()\n        if len(words) == 1:\n            codes.append(words[0][:4])\n        elif len(words) == 2:\n            codes.append(\"\".join(word[:2] for word in words))\n        else:\n            code = \"\".join(word[0] for word in words)\n            codes.append(f\"{code}{words[2][1] if len(words) == 3 else ''}\")\n    return codes\n", "REGEX = __import__(\"re\").compile(r\"[ -]\").split\nletters = ((4,), (2,2), (1,1,2), (1,1,1,1))\n\ndef code(L):\n    return ''.join(L[i][:j] for i,j in enumerate(letters[len(L)-1])).upper()\n\ndef bird_code(arr):\n    return [code(REGEX(name)) for name in arr]", "import re\ndef bird_code(s):\n    li = []\n    for i in s:\n        i = re.sub(r\" *-\", \" \", i).upper().split()\n        if len(i) == 1 : li.append(i[0][:4])\n        if len(i) == 2 : li.append(i[0][:2] + i[1][:2])\n        if len(i) == 3 : li.append(i[0][0] + i[1][0] + i[2][:2])\n        if len(i) == 4 : li.append(\"\".join([k[0] for k in i]))\n    return li", "def bird_code(a):\n    return [bird(b.upper()) for b in a]\n    \ndef bird(s):\n    b = s.replace('-', ' ').split()\n    if len(b) == 1: return s[:4]\n    if len(b) == 2: return b[0][:2] + b[1][:2]\n    if len(b) == 3: return b[0][0] + b[1][0] + b[2][:2]\n    if len(b) == 4: return b[0][0] + b[1][0] + b[2][0] + b[3][0]", "import re\n\ndef f(name):\n    words = re.findall(\"[\\w']+\", name)\n    if len(words) == 1:\n        return words[0][:4]\n    elif len(words) == 2:\n        return words[0][:2] + words[1][:2]\n    elif len(words) == 3:\n        return words[0][:1] + words[1][:1] + words[2][:2]\n    return ''.join(word[0] for word in words)\n    \ndef bird_code(arr):\n    return [f(name).upper() for name in arr]", "def bird_code(arr):\n    arr1=[s.replace('-',' ') for s in arr]\n    res=[]\n    for s in arr1:\n        arr2=s.split(' ')\n        if len(arr2)==1:\n            res.append(arr2[0][:4].upper())\n        elif len(arr2)==2:\n            res.append(arr2[0][:2].upper()+arr2[1][:2].upper())\n        elif len(arr2)==3:\n            res.append(arr2[0][0].upper()+arr2[1][0].upper()+arr2[2][:2].upper())\n        else:\n             res.append(arr2[0][0].upper()+arr2[1][0].upper()+arr2[2][0].upper()+arr2[3][0].upper())\n    return res"]