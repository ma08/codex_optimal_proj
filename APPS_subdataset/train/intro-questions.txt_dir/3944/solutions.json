["def sum_triangular_numbers(n):\n    return n*(n+1)*(n+2)/6 if n>0 else 0", "def sum_triangular_numbers(n):\n    return 0 if n < 0 else n * (n + 1) * (n + 2) // 6", "def sum_triangular_numbers(n):\n    #your code here\n    return sum(sum(range(x+1)) for x in range(n+1))", "def sum_triangular_numbers(n):\n    total, a = 0,0\n    for i in range(n):\n        a += i+1\n        total += a\n    return total", "def sum_triangular_numbers(n):\n    return n * (n + 1) * (n + 2) // 6 if n > 0 else 0", "def sum_triangular_numbers(n):\n    if n <= 0: return 0\n    x, out = 1, [1]\n    while n-1 >= x:\n        x += 1\n        out.append(out[-1]+x)\n    return sum(out)", "def sum_triangular_numbers(n):\n    return 0 if n < 1 else n * (n+1) * (n+2) // 6\n", "def sum_triangular_numbers(n):\n    return 0 if n <= 0 else n * (n + 1) * (n + 2) // 6", "def sum_triangular_numbers(n):\n    return n>0 and (n**3 + 3*n**2 + 2*n) / 6", "def sum_triangular_numbers(n):\n    return n>0 and (n+1) * (n+2) * n / 6", "def sum_triangular_numbers(n):\n    return sum(i * .5 * (i+1) for i in range(n + 1))", "from itertools import accumulate\nsum_triangular_numbers = lambda _:sum(accumulate(range(0,_+1)))", "def sum_triangular_numbers(n):\n    step = 0\n    triangulars = [0]\n    while n > len(triangulars)-1:\n        step += 1\n        triangulars.append(triangulars[-1] + step)\n    return sum(triangulars)\n", "def sum_triangular_numbers(n):\n    if n > 0:\n        return sum([(x * (x + 1)) / 2 for x in range(n + 1)])\n    else:\n        return 0", "sum_triangular_numbers = lambda n: (n*(n+1)*(n+2))//6 if n>0 else 0", "def sum_triangular_numbers(n):\n    total = 0\n    x = 0\n    for i in range(1, n+1):\n        x += i\n        total += x\n    return total", "def sum_triangular_numbers(n): return sum([(n*n+n)/2 for n in range(1,n+1)]) \n", "def sum_triangular_numbers(n):\n    return 0 if n < 0 else n*(n+1)*(n+2)/6", "def sum_triangular_numbers(n):\n    return sum([n*(n+1)/2 for n in range(n+1)])", "def sum_triangular_numbers(n):\n    x = 1\n    y = 2\n    z = []\n    while len(z)<n:\n        z.append(x)\n        x+=y\n        y+=1\n    return sum(z)", "# For learning purposes. From slowest to fastest.\ndef sum_triangular_numbers(n):\n    return sum(i * (i+1) // 2 for i in range(n + 1))\n\ndef sum_triangular_numbers(n):\n    return sum(i * (n-i+1) for i in range(n + 1))\n\ndef sum_triangular_numbers(n):\n    return max(0, n * (n+1) * (n+2) // 6)\n\ndef sum_triangular_numbers(n):\n    return 0 if n < 1 else n * (n+1) * (n+2) // 6\n", "def sum_triangular_numbers(n):\n    return sum(sum(range(i+1)) for i in range(n+1))\n", "sum_triangular_numbers=lambda n:n>0and-~n*n*(n+2)/6", "def sum_triangular_numbers(n):\n    return [0, (n**3 - n)/6 + .5*n*(n + 1)][n > 0]", "def sum_triangular_numbers(n):\n    return 0 if n <= 0 else sum([i for i in range(1, n+1)]) + sum_triangular_numbers(n-1)", "def sum_triangular_numbers(n):\n    #your code here\n    sum = 0\n    for i in range(n):\n        sum += (i+1)*(i+2)/2\n    return sum", "def sum_triangular_numbers(n):\n    if n <= 0:\n         return 0\n    return round((1/6*n**3)+(1/2*n**2)+(1/3*n),0)", "def sum_triangular_numbers(n):\n    sum_ = 0\n    for i in range(1, n + 1):\n        sum_ += sum(range(1, i + 1))\n    return sum_\n", "def sum_triangular_numbers(n):\n    return sum(i*(i+1)/2 for i in range(1,n+1)) if n>0 else 0", "def sum_triangular_numbers(n):\n sum_=0\n for i in range(1, n + 1):   \n      sum_ += ((i ** 2 + i)//2)\n \n return sum_", "def sum_triangular_numbers(n):\n    increment = 1\n    sum_ = 0\n    number = 0\n    while increment <= n:\n        number += increment\n        sum_ += number\n        increment += 1\n    return sum_", "def sum_triangular_numbers(n, c=1, v=2):\n    return c + sum_triangular_numbers(n-1, c + v, v+1) if n > 0 else 0", "def sum_triangular_numbers(n):\n    new_num = 0\n    new_num_list =[]\n    for num in range(1, n+1):\n        new_num += num\n        new_num_list.append(new_num)\n        print(new_num)\n    return sum(new_num_list)\n\nprint(sum_triangular_numbers(6))", "def sum_triangular_numbers(n):\n    return max(n*(n+1)*(n+2)//6, 0)", "def sum_triangular_numbers(n):\n    if n <= 0:\n        return 0\n    total = 0\n    for num in range(n+1):\n        triangle_num = num * (num + 1) / 2\n        total = total + triangle_num\n    return total\n", "def sum_triangular_numbers(n):\n    if n < 1:\n        return 0\n    else:\n        triangular = []\n        for i in range(1, n+1):\n            triangular.append(i*(i+1)/2)\n        return int(sum(triangular))", "def sum_triangular_numbers(n):\n    c, p, g = 0, 0, 1\n    for loop in range(n + 1):\n        c += p\n        p += g\n        g += 1\n    return c", "def sum_triangular_numbers(n):\n    #your code here\n    return sum([(i+1)*i/2 for i in range(1,n+1)])", "def sum_triangular_numbers(n):\n    if n<0:\n        return 0\n    elif n==0:\n        return 1\n    else:\n        a=[1]\n       #a[0]=1\n        for i in range(1,n):\n            a.append(a[i-1]+i+1)       \n        return sum(a)", "def sum_triangular_numbers(n):\n    #your code here\n    if n <= 0:\n        return 0;\n    else:\n        num = [0];\n        for i in range(0, n):\n            num.append(num[i] + i + 1);\n        return sum(num);", "def sum_triangular_numbers(n):\n    \n    if n > 0 :\n\n        listado_numeros = []\n\n        while len(listado_numeros) < n :# genera lista con los numeros hasta N\n            for i in range (1,n+1):\n                listado_numeros.append(i)\n        \n        for i in listado_numeros[1:]:\n            listado_numeros[i-1] = i + listado_numeros[i-2]\n\n        return (sum(listado_numeros))\n\n    else:\n\n        return (0)", "def sum_triangular_numbers(n):\n    return sum([sum([1+i for i in range(n)][:i+1]) for i in range(n)])", "def sum_triangular_numbers(n):\n    return sum(x*(x+1)/2 for x in range(n+1)) if n > 0 else 0", "def sum_triangular_numbers(n):\n    return sum(sum(range(i+1)) for i in range(1, n+1))", "def sum_triangular_numbers(n):\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    calc = 1\n    inc = 2\n    sm = 1\n    for x in range(2,n + 1):\n        calc = calc + inc \n        sm = sm + calc\n        inc = inc + 1\n    return sm\n", "def sum_triangular_numbers(n):\n    return sum([round((a)*(a+1)/2) for a in range(1,n+1)])\n\n", "def sum_triangular_numbers(n):\n    return sum([(x*(x+1))/2 for x in range(0, n+1)])", "def sum_triangular_numbers(n):\n  if n<0:\n    return 0\n  else: \n    c = n*(n+1)*(n+2)//6\n    return c\n", "def sum_triangular_numbers(n):\n    numberz = 0\n    triangular_numbers = []\n    if n <= 0:\n        return 0\n    else:\n        number = 0\n        for int in range(0,n+1):\n            number = number+int\n            triangular_numbers.append(number)\n    for num in triangular_numbers:\n        numberz = numberz + num\n    \n    return numberz\n", "def sum_triangular_numbers(n):\n    \n    if n<0:\n        \n        return 0\n    \n    a = list(range(1,n+1))\n    \n    b = []\n    \n    for i in range(0,len(a)):\n        \n        d = a[i]+sum(a[0:i])\n        \n        b.append(d)\n    \n    s = sum(b)\n    \n    return s\n\n", "def sum_triangular_numbers(n):\n    return 0 if n < 0 else sum(k * (k+1) // 2 for k in range(1, n+1))", "def sum_triangular_numbers(n):\n    if n <= 0: return 0\n    \n    s = 1\n    i = 2\n    \n    t = 1\n    x = 1\n    while x < n:\n        s += i\n        i += 1\n        x += 1\n        t += s\n        \n        #print(s, t)\n        \n    return t", "def sum_triangular_numbers(n):\n    if n < 0:\n        return 0\n    else:\n        sum = 0\n        for i in range(1, n + 1): \n            x = ((i ** 2 + i)//2)\n            sum += x \n        return sum", "def sum_triangular_numbers(n):\n    sum = 0\n    num = 0\n    k = 1\n    while(n >0):\n        num += k\n        sum += num\n        k += 1\n        n -= 1\n    return sum", "def sum_triangular_numbers(n):\n    if n <=0:\n        return 0\n    li= [1]\n    for i in range(2,n+1):\n        li.append(li[-1]+i)\n    return sum(li)", "def sum_triangular_numbers(n):\n    if n <= 0:\n        return 0\n    else:\n        step = 1\n        prvi = 0\n        e = []\n        while step < n +1:\n            prvi += step\n            step += 1\n            e.append(prvi)\n        return sum(e)\n", "def sum_triangular_numbers(n):\n    return sum([sum([y for y in range(1, x+1)]) for x in range(1, n+1)])", "def sum_triangular_numbers(n):\n    c, l = 0,0\n    for i in range (1,n+1):\n        l = l+i\n        c += l\n    return c", "def sum_triangular_numbers(n):\n    l = [0]\n    for x in range(1, n + 1):\n        l.append(x + l[-1])\n    return sum(l)", "def sum_triangular_numbers(n):\n    #your code here\n    t = 1\n    s = 0\n    for i in range(2, n+2):\n        s = s + t\n        t = t + i\n    return s", "def sum_triangular_numbers(n):\n    if n < 1:\n        return 0\n    if n ==1:\n        return 1\n    return (n/2)*(n+1) + sum_triangular_numbers(n-1)", "def sum_triangular_numbers(n):\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        cont = 0\n        num = 1\n        max = 2\n        result = 1\n\n        while(max <= n):\n            num+=1\n            cont+=1\n            if cont == max:\n                result+=num\n                max+=1\n                cont=0\n        return result\n", "def sum_triangular_numbers(n):\n    '''Uses formula to find triangular numbers and adds these to total'''\n    total = 0\n    for i in range(n+1):\n        total += sum(list(range(1,i+1)))\n    return total ", "def triangle(n):\n    return int(n*(n+1)/2)\n\n\n\ndef sum_triangular_numbers(n):\n    sum = 0\n    for i in range(n+1):\n        sum += triangle(i)\n        \n    return sum\n", "def sum_triangular_numbers(n):\n    sum_, t_i = 0, 0\n    for i in range(1, n+1):\n        t_i += i\n        sum_ += t_i\n    return sum_", "def sum_triangular_numbers(n):\n    d = 1\n    s = 0\n    res = 0\n    for i in range(n):\n        s += d\n        res += s\n        d += 1\n    return res", "def sum_triangular_numbers(n):\n    s = 1\n    x = []\n    for i in range(2, n + 2):\n        x.append(s)\n        s += i\n        \n    return sum(x)", "def sum_triangular_numbers(n):\n    l=[]\n    c=0\n    for i in range(1,n+1):\n        c += i\n        l.append(c)\n    return sum(l)", "def sum_triangular_numbers(n):\n    r = [0]\n    [r.append(r[-1]+x) for x in range(n+1)]\n    return sum(r)", "def sum_triangular_numbers(n):\n    \n    return sum([(n * (n + 1)) // 2 for n in range(1, n + 1)])\n    \n", "def sum_triangular_numbers(n):\n    if n<=0:\n        return 0\n    else:\n        return (n**3+3*n**2+2*n)/6", "def sum_triangular_numbers(n):\n    sum_list = [0]\n    for i in range(1, n+1):\n        sum_list.append(sum_list[-1] + i)\n    return sum(sum_list)", "def sum_triangular_numbers(n):\n    #your code here\n    sum = 0\n    i = 0\n    tsum = 0\n    for row in range(1,n+1):\n        sum = sum+row\n        tsum+=sum\n    return tsum if tsum>0 else 0", "def sum_triangular_numbers(n):\n    list = []\n    count = 0\n    for num in range(1,n+1):\n        count += num\n        list.append(count)\n    return sum(list)\n\n    #return sum(num for num in range(1,n+1))\n", "def sum_triangular_numbers(n):\n    val = 0\n    return_list = []\n\n    if n < 0:\n        return 0\n    \n    for x in range (1, n+1):\n        val = val + x\n        return_list.append(val)\n    return sum(return_list)\n", "def sum_triangular_numbers(n):\n    \n    #your code here\n    return sum( (1+i)*i/2 for i in range(1,n+1))", "def sum_triangular_numbers(n):\n    return sum(x*(n-x+1) for x in range(1,n+1))", "def sum_triangular_numbers(n):\n    num=1\n    interval=2\n    ls=list()\n    while interval<=n:\n        num=num+interval\n        interval=interval+1\n        ls.append(num)\n    if n<0:\n        return sum(ls)\n    else:\n        return sum(ls)+1", "def sum_triangular_numbers(n):\n    #your code here\n    if n > 0:\n        z = 1\n        x = []\n        for i in range(2, n + 1):\n            z = z + i\n            x.append(z)\n        return sum(x) + 1\n    if n < 0:\n        return 0", "def sum_triangular_numbers(n):\n    \n    return sum([(n-i+1)*i for i in range(1,n+1)])", "tri = lambda x: (x * (x+1))/2\n\ndef sum_triangular_numbers(n):\n    try:\n        res = 0\n        for i in range(1,n+1):\n            res += tri(i)\n        return res\n    except: return 0\n", "def sum_triangular_numbers(n):\n    if n <= 0:\n        return 0\n    else:\n        x=0\n        for i in range(0,n+1):\n            x+=i*(i+1)/2\n        return int(x)", "def sum_triangular_numbers(n):\n    if n < 0: return 0\n    res = [1]\n    i = 2\n    for x in range(n-1):\n        res.append(res[-1] + i)\n        i += 1\n    return sum(res)", "def sum_triangular_numbers(n):\n    m = abs(n)\n    if m == n:\n        sum_ = 0\n        while n > 0:\n            sum_ += (n * (n+1) / 2)\n            n -= 1\n    else: sum_ = 0\n    return sum_", "def sum_triangular_numbers(n):\n    return 0 if n < 0 else sum(x*(x+1)/2 for x in range(n+1))", "t = lambda x: x * (x + 1) // 2\n\ndef sum_triangular_numbers(n):\n    return sum(t(x) for x in range(n + 1))\n", "def sum_triangular_numbers(n):\n    s = a = 0\n    for i in range(1, n+1):\n        a += i\n        s += a\n    \n    return s", "def sum_triangular_numbers(n):\n    return sum([x*(x+1)*0.5 for x in range(1,n+1)])", "def sum_triangular_numbers(n):\n    addend,sum = 0,0,\n    for step in range(1,n+1):\n        addend += step\n        sum += addend\n    return sum", "def sum_triangular_numbers(n):\n    step,addend,sum = 0,0,0\n    for _ in range(n):\n        step += 1\n        addend += step\n        sum += addend\n    return sum    ", "def sum_triangular_numbers(n):\n    if n <= 0: return 0\n    x,y = 0,0\n    sum = 0\n    for i in range(n):\n        x = x+1\n        y = x+y\n        sum += y\n    return sum", "def sum_triangular_numbers(n):\n    if n  < 0:\n        return 0\n    add, i, l= 1, 0, []\n    while n != add -1:\n        i +=add\n        add +=1\n        l.append(i)\n    sum(l)\n    return sum(l)", "def sum_triangular_numbers(n):\n    #your code here\n    return sum(sum(range(i)) for i in range(n+2))", "def sum_triangular_numbers(n):\n    result = 0\n    x = 0\n    for y in range(n + 1):\n        x += y\n        result += x\n    return result", "def sum_triangular_numbers(n):\n    #your code here\n    count = 0\n    sum = 0\n    total = 0\n    for index in range(n):\n        count += 1\n        sum += count\n        total += sum\n    return total", "def sum_triangular_numbers(n):\n    if n<0:\n        return 0\n    else:\n        a = 2\n        lst = []\n        n = n-1\n        while n>0:\n            lst.append(a)\n            a+=1\n            n-=1\n        print(lst)\n        cnt = 1\n        lst1 =[1]\n        for i in range(len(lst)):\n            cnt += lst[i]\n            lst1.append(cnt)\n        return sum(lst1)\n            \n", "def sum_triangular_numbers(n):\n    return sum(x*(x-1)//2 for x in range(1,n+2))", "def sum_triangular_numbers(n):\n    if n <= 0:\n        return 0\n    result_sum = 0\n    exponent = 2\n    num = 1\n    for _ in range(n - 1):\n        num = num + exponent\n        exponent += 1\n        result_sum += num\n    return result_sum + 1", "def sum_triangular_numbers(n):\n    if n < 1:\n        return 0 \n    total = 0\n    a = 0\n    for i in range(0,n):\n        a += (i+1)\n        total += a\n    return total", "def sum_triangular_numbers(n):\n    return 0 if n < 0 else int(1/6*n*(n+1)*(n+2)+1e-5)", "def sum_triangular_numbers(n):\n    #find triangle number\n    return sum([i*(i+1)/2 for i in range(1, n+1)])"]