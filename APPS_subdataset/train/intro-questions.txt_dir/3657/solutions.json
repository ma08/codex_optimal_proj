["def series_slices(digits, n):\n    if n > len(digits):\n        raise ValueError\n    else:\n        return [[int(digit) for digit in digits[i:i+n]] for i in range(0, len(digits)-n+1)]", "def series_slices(s, n):\n    if n > len(s):\n        raise\n    \n    arr = [int(d) for d in s]\n    return [ arr[i:i+n] for i in range(len(s)-n +1) ]", "def series_slices(digits, n):\n    l = len(digits)\n    if n > l:\n        raise Exception\n    else:\n        d = list(map(int, digits))\n        \n        res = []\n        for i in range(0, l-n+1):\n            res.append(d[i:i+n])\n        return res", "def series_slices(d, n):\n    # Good Luck!\n    if(n>len(d)): return error\n    x=[]\n    i=0\n    while(i<=len(d)-n):\n        x.append([int(i) for i in d[i:i+n]])\n        i+=1\n    return x\n    \n    \n", "def series_slices(digits, n):\n    if n > len(digits):\n        0 / 0\n    return [list(map(int, digits[x:n+x])) for x in range((len(digits) - n) + 1)]", "def series_slices(digits, n):\n    digits = [int(i) for i in digits]\n    if n > len(digits):\n         raise Error('Your n is bigger than the lenght of digits')        \n    else:\n        return [list(digits[i:n+i]) for i in range(len(digits)) if len(digits[i:n+i]) == n]", "def series_slices(digits, n):\n    assert n <= len(digits)\n    return [list(map(int, digits[i: i+n])) for i in range(len(digits)-n+1)]", "def series_slices(digits, n):\n    if n > len(digits):\n        raise ValueError('n cannot be greater than number of digits')\n    \n    else:\n        res = [digits[i:i+n] for i in range(len(digits) - n + 1)]\n        for i in range(len(res)):\n            res[i] = [int(e) for e in res[i]]\n\n        return res", "def series_slices(digits, n):\n    if n > len(digits):\n        raise error\n    else:\n        x = [int(y) for y in digits]\n        return [x[i:i+n] for i in range(0,len(digits)-n+1)]", "def series_slices(digits, n):\n  return [list(map(int, digits[i:i+n])) for i in range(len(digits)-n+1)] if n <= len(digits) else int(\"\")"]