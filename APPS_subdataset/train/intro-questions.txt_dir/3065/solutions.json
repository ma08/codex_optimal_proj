["import re\n\nSKIPERS = re.compile(r'|'.join([\"\\\\\\*.*?\\*/\", \"--.*?(\\n|$)\", \"''\"]))\n\ndef get_textliterals(code):\n    code = SKIPERS.sub(lambda m: \"x\"*len(m.group()) , code.rstrip())\n    if code.count(\"'\") % 2: code += \"'\"\n    return [(m.start(), m.end()) for m in re.finditer(r\"'.+?'\", code, flags=re.DOTALL)]", "def get_textliterals(pv_code):\n    start_index = None\n    all_index_store = []\n    a_comment = False\n    b_comment = False\n    for index, char in enumerate(pv_code):\n        if char == '*' and pv_code[index - 1] == '/':\n            a_comment = True\n        elif a_comment == True and char == '/' and pv_code[index - 1] == '*':\n            a_comment = False\n        elif char == '-' and pv_code[index - 1] == '-':\n            b_comment = True\n        elif b_comment == True and char == '\\n':\n            b_comment = False\n        elif (char == '\\'' or len(pv_code) - 1 == index) and a_comment == False and b_comment == False:\n            if start_index != None:\n                if (index > 0 and pv_code[index - 1] == '\\'') or (len(pv_code) > index + 1 and pv_code[index + 1] == '\\''):\n                    continue\n                all_index_store.append((start_index, index + 1))\n                start_index = None\n            else:\n                start_index = index\n    return all_index_store\n            \n", "import re\ndef get_textliterals(pv_code):\n  return [(match.start(1), match.end(1)) for match in re.finditer(r\"(?:--[^\\n]*\\n?|/\\*.*?\\*/|((?:'[^']*')+|'[^']*$)|.)\", pv_code, re.DOTALL) if match.group(1)]", "import re\ndef get_textliterals(pv_code):\n  print(pv_code)\n  result = [(match.start(1), match.end(1)) for match in re.finditer(r\"(?:--[^\\n]*\\n?|/\\*.*?\\*/|((?:'[^']*')+|'[^']*$)|.)\", pv_code, re.MULTILINE) if match.group(1)]\n  return result\n", "def comm_check(l, p_l, comm_started):\n    if (l == '/' and p_l == '*' and comm_started == 2):\n        return 0\n    if (comm_started == 1 and l == '\\n'):\n        return 0\n    if (l == '-' and p_l == '-'):\n        return 1\n    elif (l == '*' and p_l == '/'):\n        return 2\n    else:\n        return comm_started\n    \n\n\ndef get_textliterals(pv_code):\n    indices = []\n    open_i = -1\n    comm_start = 0\n    for i in range(0, len(pv_code)):\n        comm_start = comm_check(pv_code[i], pv_code[i-1], comm_start)\n        if pv_code[i] == '\\'' and comm_start == 0:\n            if open_i == -1:\n                open_i = i\n            else:\n                if (i + 1 < len(pv_code) and i - 1 >= 0): \n                    if (pv_code[i+1] == '\\'' or pv_code[i-1] == '\\''): continue\n                indices.append((open_i, i + 1))\n                open_i = -1\n    if open_i != -1: indices.append((open_i, len(pv_code)))\n    return indices", "def get_textliterals(pv_code):\n\n    l_list = []\n    l_switch = \"empty\"\n    \n    for i in range(len(pv_code)):\n    \n        if pv_code[i] == \"'\" and pv_code[i:i+2] != \"''\" and pv_code[i-1:i+1] != \"''\":\n            if l_switch == \"empty\":\n                l_begin = i\n                l_switch = \"begin\"\n            elif l_switch == \"begin\":\n                l_list.append((l_begin,i+1))\n                l_switch = \"empty\"\n        elif pv_code[i:i+2] == \"--\":\n            if l_switch != \"begin\" and l_switch != \"rem2\":\n                l_switch = \"rem1\"\n        elif pv_code[i:i+2] == \"/*\":\n            if l_switch != \"begin\" and l_switch != \"rem1\":\n                l_switch = \"rem2\"\n        elif pv_code[i:i+2] == \"*/\":\n            if l_switch == \"rem2\":\n                l_switch = \"empty\"\n        elif pv_code[i] == \"\\n\":\n            if l_switch == \"rem1\":\n                l_switch = \"empty\"\n    if l_switch == \"begin\":\n        l_list.append((l_begin,i+1))\n                \n                \n    return l_list        ", "def get_textliterals(pv_code):\n    r=[]\n    i=0\n    in_quote=False\n    while(i<len(pv_code)):\n        if in_quote:\n            if pv_code[i]==\"'\":\n                if pv_code[i:].startswith(\"''\"):\n                    i+=1\n                else:\n                    r.append((s,i+1))\n                    in_quote=False\n        else:\n            if pv_code[i]==\"'\":\n                s=i\n                in_quote=True\n            elif pv_code[i:].startswith('--'):\n                i=pv_code.index('\\n',i)\n            elif pv_code[i:].startswith('/*'):\n                i=pv_code.index('*/',i+2)\n                i+=1\n        i+=1\n    if in_quote:\n        r.append((s,len(pv_code)))\n    return r", "import re\ndef comment_replace(comment):\n    return ' '*len(comment)\ndef one_line_comment_replace(comment):\n    return ' '*len(comment)\n\ndef get_textliterals(pv_code):\n    pv_code = re.sub(r'/\\*.*\\*/', lambda mo : comment_replace(mo.group()), pv_code)\n    pv_code = re.sub(r'(--.*)', lambda mo : one_line_comment_replace(mo.group()), pv_code)\n    pv_code = re.sub(r\"\\'\\'\", '  ', pv_code)\n    results = list()\n    while \"'\" in pv_code:\n        start_index = pv_code.index(\"'\")\n        pv_code = pv_code[:pv_code.index(\"'\")]+'X'+pv_code[pv_code.index(\"'\")+1:]\n        if \"'\" in pv_code:\n            end_index = pv_code.index(\"'\")+1\n            pv_code = pv_code[:pv_code.index(\"'\")]+'X'+pv_code[pv_code.index(\"'\")+1:]\n        if start_index < end_index:\n            indxs = (start_index, end_index)\n        else:\n            indxs = (start_index, len(pv_code))\n        results.append(indxs)        \n    return results", "def get_textliterals(pv_code):\n    literal_start = -1\n    result = []\n    comment = False\n    inline_comment = False\n    quote = False\n    for idx, c in enumerate(pv_code):\n\n        if idx + 1 == len(pv_code) and literal_start != -1:\n            literal_end = idx + 1\n            result.append((literal_start, literal_end))\n            break\n        elif c == '*' and pv_code[idx - 1] == '/':\n            comment = True\n        elif c == '/' and pv_code[idx -1] == '*' and comment:\n            comment = False\n        elif c == \"'\" and literal_start != -1 and not comment and not inline_comment:\n            if idx+1 < len(pv_code) and pv_code[idx+1] == \"'\":\n                quote = True\n            elif pv_code[idx-1] == \"'\":\n                continue\n            else:\n                literal_end = idx + 1\n                result.append((literal_start, literal_end))\n                literal_start = -1\n                quote = False\n        elif c == \"'\" and quote == False and not comment and not inline_comment:\n            literal_start = idx\n        elif c == '-' and pv_code[idx-1] == '-':\n            inline_comment = True\n        elif c == '\\n':\n            inline_comment = False\n    return result", "from re import finditer\ndef get_textliterals(pv_code):\n    l = len(pv_code)\n    pv_code = pv_code.replace(\"''\", '\"\"')\n    addedQuote = False\n    if not pv_code.endswith(\"'\"):\n        addedQuote = True\n        pv_code += \"'\"\n    patterns = [r\"/\\*(?:\\n|.)*?\\*/\", \"--.+\", \"'(?:\\n|.)*?'\"]\n    comments = [m.span() for m in finditer(patterns[0], pv_code)] +\\\n      [m.span() for m in finditer(patterns[1], pv_code)]\n    answer = [] \n    candidates = [m.span() for m in finditer(patterns[2], pv_code)]\n    for (startA, endA) in candidates:\n        ok = True\n        for (startB, endB) in comments:\n            if startB < startA < endA < endB:\n                ok = False\n                break\n        if ok:\n            if addedQuote and endA - 1 == l:\n                endA -= 1\n            answer.append((startA, endA))\n    return answer"]