["class Solution:\n    def minStartValue(self, nums: List[int]) -> int:\n        res = 1\n        for ind,n in enumerate(nums):\n            temp = 1-sum(nums[:ind+1])\n            if(temp > res):\n                res = temp\n        return res", "class Solution:\n    def minStartValue(self, nums: List[int]) -> int:\n        minVal=1\n        t=0\n        for num in nums:\n            t+=num\n            if(t<0):\n                minVal=max(1-t,minVal)\n        return minVal\n        \n", "class Solution:\n    def minStartValue(self, nums: List[int]) -> int:\n        pSum = 0\n        minSum = 0;\n        for num in nums:\n            pSum += num\n            minSum = min(pSum, minSum)\n        return 1 - minSum", "class Solution:\n    def minStartValue(self, nums: List[int]) -> int:\n        num=1; i=0;sum = num;         #flag=False;\n        while i<len(nums):\n            sum+=nums[i]            \n            if sum<1:\n                flag = False\n                i=0;num+=1;sum=num;   #flag=True\n                \n            else:\n                i+=1\n        \n            #if i<len(nums) and flag==False:\n                #i=0;num+=1;sum=num;flag=True\n        \n        return num\n            \n", "class Solution:\n    def minStartValue(self, nums: List[int]) -> int:\n        num=1; i=0;sum = num;         #flag=False;\n        while i<len(nums):\n            sum+=nums[i]            \n            if sum<1:\n                flag = False\n                i=0;num+=1;sum=num;   #flag=True\n                \n            else:\n                i+=1        \n        return num\n            \n", "class Solution:\n    def minStartValue(self, nums: List[int]) -> int:\n        n = len(nums)\n        \n        startValue = 1\n        \n        while startValue < float('inf'):\n            get = True\n            tmp = startValue\n            for i in range(n):\n                if nums[i] + tmp < 1:\n                    get = False\n                    break\n                tmp = nums[i] + tmp\n            if not get: \n                startValue += 1\n            else:\n                return startValue", "class Solution:\n    def minStartValue(self, nums: List[int]) -> int:\n        \n        init = 1\n        \n        \n        while init > 0:\n            temp = init\n            for i in nums:\n                temp = temp + i\n                if temp <= 0:\n                    break\n            else:\n                return init\n            \n            \n            init += 1", "class Solution:\n    \n    def minStartValue(self, nums: List[int]) -> int:\n        start =1\n        s=1\n        for n in nums:\n            s+=n\n            if s<1:\n                start+=1-s\n                s=1\n        return start", "class Solution:\n    def minStartValue(self, nums: List[int]) -> int:\n        pref=[0]*len(nums)\n        pref[0]=nums[0]\n        for i in range(1,len(nums)):\n            pref[i]=pref[i-1]+nums[i]\n        \n        return max(1, 1-min(pref))", "class Solution:\n    def minStartValue(self, nums: List[int]) -> int:\n      \n      running_min = nums[0]\n      reduction = 0\n      for i in nums:\n        reduction += i\n        running_min = min(running_min, reduction)\n      \n      return 1 if running_min >= 1 else 1 - running_min", "class Solution:\n    def minStartValue(self, nums: List[int]) -> int:\n        # return -min(0, min(accu for accu in itertools.accumulate(nums))) + 1\n        return 1 - min(accumulate(nums, initial=0))", "class Solution:\n    def minStartValue(self, nums: List[int]) -> int:\n        min_sum = 0\n        temp = 0\n        for num in nums:\n            temp += num\n            min_sum = min(temp, min_sum)\n        \n        return abs(min_sum)+1\n\n\n", "class Solution:\n    def minStartValue(self, nums: List[int]) -> int:\n        for i in range(1,1000000):\n            flag = 0\n            n=i\n            for j in nums:\n                n+=j\n                if n < 1:\n                    flag=1\n                    break\n            if flag==0:\n                return i\n", "class Solution:\n    def minStartValue(self, nums: List[int]) -> int:\n        for i in range(1,1000001):\n            flag=0\n            sum=i;\n            for j in nums:\n                sum+=j\n                if sum<1:\n                    flag=1\n                    break\n            if flag==0:\n                return i\n", "class Solution:\n    def minStartValue(self, nums: List[int]) -> int:\n        res = 0\n        cur = 0\n        for num in nums:\n            cur += num\n            if cur < 1:\n                res += 1 - cur\n                cur += 1 - cur\n        if res == 0:\n            return 1\n        return res\n"]