["def opposite(number):\n    return -number", "def opposite(number):\n  return number * -1", "def opposite(number):\n  return number * (-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1)", "def opposite(number):\n#fastest solution returned 94ms with parens around multiplication 87ms without for results\n    return number - number * 2 \n\n#middle solution returned 109ms time period for result\n#    return number * -1\n#slowest solution returned 150ms time period for result\n#    return -number\n", "def opposite(number):\n    \"\"\"\n    Function have one required argument.\n    At start our function check your number. If it's int, float or complex - func multiplies number by -1 and return it\n    If our argument is string, try to convert to complex number\n    If we had Value Error in our convertation, say(use print when except):\n        Input data cannot be represented as a number.\n    And after return None\n\n    Return:\n        Number int or float if input number is int or float.\n        Number complex if input number is complex or wrote in string\n        None if we had empty line or another input types\n    \"\"\"\n    if (type(number) is int) or (type(number) is float) or (type(number) is complex):\n        number = number * -1\n        return number\n    else:\n        try:\n            number = complex(number) * -1\n            return number\n        except ValueError:\n            print(\"Input data cannot be represented as a number\")\n            return None", "from operator import neg as opposite", "opposite = lambda x: -x", "def opposite(number):\n  return -1*number", "opposite=lambda n:-n", "def opposite(number):\n    return -1 * number # could have used -number, but that might send -0", "def opposite(number):\n  return abs(number) if number < 0 else 0 - number", "def opposite(number):\n  # your solution here\n  numbers=str(number)\n  if isinstance(number, int):\n      if numbers[0]==\"-\":\n          negatives=numbers[1:]\n          negative=int(negatives)\n          return negative\n      else:\n          positives=\"-\"+numbers\n          positive=int(positives)\n          return positive\n  if isinstance(number, float):\n      if numbers[0]==\"-\":\n          negatives=numbers[1:]\n          negative=float(negatives)\n          return negative\n      else:\n          positives=\"-\"+numbers\n          positive=float(positives)\n          return positive", "def opposite(number):\n  return number - (number * 2)", "def opposite(n):\n  return -1 * n", "def opposite(number):\n  # your solution here\n  return number * \"Magic Forest\".find(\"unicorn\")", "def opposite(n): return -n", "def opposite(number):\n  # your solution here\n  return 0 - number", "def opposite(number):\n    if number>0:\n        return number-number-number\n    elif number<0:\n        return number-number-number\n    else:return number\n  # your solution here\n", "def opposite(number):\n#use create function to get opposite and call it on function opposite argument\n  opposite = (lambda x : -x)\n  result = opposite(number)\n  return result", "def opposite(x):\n  return x * -1", "def opposite(number):\n    number = number * -1\n    return number \n", "opposite= lambda n : n*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))*(n-(n+1))/(n-(n+1))", "def opposite(number):\n  import re\n  m = re.match(\"-\", str(number))\n  if m:\n     number = re.sub(\"-\", \"\", str(number))\n  else:\n     number = \"-\" + str(number)\n  try:\n    return int(number)\n  except ValueError:\n    return float(number)", "def opposite(number):\n  return (lambda x: x  * -1)(number)", "opposite=(0.).__sub__", "def opposite(n):\n    str=\"\"\"\n    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2592\u2592\u2592\u2592\u2592\u2592\n\u2500\u2500\u2500\u2500\u2500\u2500\u2593\u2593\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2593\u2593\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\n\u2500\u2500\u2500\u2500\u2593\u2593\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2593\u2593\u2500\u2500\u2500\u2500\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\n\u2500\u2500\u2500\u2593\u2593\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2593\u2593\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\n\u2500\u2500\u2593\u2593\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\n\u2500\u2500\u2593\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\n\u2500\u2593\u2593\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\n\u2593\u2593\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2592\n\u2593\u2593\u2592\u2592\u2592\u2592\u2592\u2592\u2580\u2580\u2580\u2580\u2580\u2588\u2588\u2588\u2584\u2584\u2592\u2592\u2592\u2591\u2591\u2591\u2584\u2584\u2584\u2588\u2588\u2580\u2580\u2580\u2580\u2580\u2591\u2591\u2591\u2591\u2591\u2591\u2592\n\u2593\u2593\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2584\u2580\u2588\u2588\u2588\u2588\u2580\u2588\u2588\u2588\u2584\u2592\u2591\u2584\u2588\u2588\u2588\u2588\u2580\u2588\u2588\u2588\u2588\u2584\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\n\u2593\u2593\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2500\u2500\u2580\u2588\u2588\u2588\u2588\u2588\u2580\u2500\u258c\u2592\u2591\u2590\u2500\u2500\u2580\u2588\u2588\u2588\u2588\u2588\u2580\u2500\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2592\n\u2593\u2593\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2580\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2580\u2592\u2592\u2591\u2591\u2580\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2580\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\n\u2500\u2593\u2593\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\n\u2500\u2500\u2593\u2593\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\n\u2500\u2500\u2500\u2593\u2593\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2580\u2580\u2580\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\n\u2500\u2500\u2500\u2500\u2593\u2593\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\n\u2500\u2500\u2500\u2500\u2500\u2593\u2593\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\n\u2500\u2500\u2500\u2500\u2500\u2500\u2593\u2593\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2584\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2584\u2591\u2591\u2591\u2591\u2591\u2592\u2592\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2593\u2593\u2592\u2592\u2592\u2592\u2592\u2580\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2580\u2591\u2591\u2591\u2592\u2592\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2593\u2593\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2593\u2593\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2593\u2593\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2593\u2593\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2592\u2592\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2593\u2593\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2592\u2592\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2593\u2593\u2592\u2592\u2592\u2591\u2591\u2591\u2592\u2592\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2593\u2593\u2592\u2591\u2592\u2592\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2593\u2592\u2591\u2592\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2593\u2592\n\"\"\"\n    return str.find(\"\u00af\\_(\u30c4)_/\u00af\")*n", "opposite = lambda number: -number #Lambda is so much fun", "def opposite(number):\n  return float(('-' + str(number)).replace('--', ''))", "def opposite(number):\n    return (~int(number) + int(number)) * number", "def opposite(number):\n  # your solution here\n  answer = 0 - number\n  return answer\n", "def opposite(number):\n  return(number*(-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1+1-1))", "opposite = lambda l: -l", "def opposite(number):\n  # your solution here\n  if number < 0:\n      return abs(number)\n  elif number > 0:\n      return -number\n  else:\n      return number", "def opposite(number):\n    oppositenum = -number\n    return oppositenum\n  # your solution here\n", "def opposite(number):\n# your solution here\n    if number <= 0:\n        return(abs(number))\n    else:\n        return(number - 2 * number)\n    \nopposite(1) \n", "def opposite(number):\n  # your solution here\n    return -1 * number\nprint((1 , 14, - 34))\n", "def opposite(number):\n    float(number)\n    if number > 0:\n        return number - number*2\n    elif number < 0:\n        return abs(number)\n    elif number == 0:\n        return 0", "def opposite(number):\n  \"turns the number into its opposite\"\n  return number - 2*number", "def opposite(number):\n    if number!=0:\n        result=-number\n    else:\n        result=0\n    return result\n        \n\n", "def opposite(number):\n    reverse = number - number -  number\n    \n    print(reverse)\n    return reverse\n \n\nn = opposite(5)\n\n\n", "def opposite(number):\n    if number >= 0:\n        return -number\n    else:\n        return number + (-number * 2)\n  # your solution here\n", "def opposite(number):\n  # your solution here\n    a=-1\n    c=number*a\n    return c", "def opposite(number):\n    if \"-\" in str(number):\n        return -number\n    else:\n        return -number", "def opposite(number):\n    \n    \n    \n    new_num = number\n    \n    \n        \n    \n    if number <= 0:\n        \n        neg_num = number * 2\n        neg_num2 = new_num - neg_num\n        \n        return neg_num2\n    \n    elif number >= 0:\n        \n        pos_num = number * 2\n        pos_num2 = new_num - pos_num\n        \n        return pos_num2\n    \n    \n        \n        \n    \n    \n", "def opposite(number):\n    return number-number*2 if number>0 else number+number*2*-1", "def opposite(number):\n    a=float(number)*(-1)\n    return a", "def opposite(number):\n    if number >= 0 : return float('-'+str(number))\n    else: return float(str(number)[1:])\n  # your solution here\n", "def opposite(number):\n        return number - number - number if number > 0 else number + abs(number) + abs(number)", "def opposite(number):\n    out = number * -1\n    return out", "def opposite (a):\n    return -1 * a", "def opposite(number):\n    if number >= 0:\n        return -number\n    else:\n        return number * -1\n", "def opposite(number):\n#     if number < 0:\n#        number = number * -1\n        \n#    elif number > 0:\n#        number = number * -1\n#    return (number)\n\n    return (number*-1)\n  # your solution here\n", "def opposite(number):\n    output = 0 - number\n    return output", "def opposite(number):\n    x = '-' + str(number)\n    if number < 0:\n        return abs(number)\n    else:\n        return float(x)", "def opposite(number):\n    qwe = number*(-1)\n    return qwe\n  # your solution here\n", "def opposite(number):\n    if number > 0:\n        return -1 * number \n    return -1 * number ", "def opposite(number):\n    number*=-1\n    return number\n\nn=5\nprint(opposite(n))", "def opposite(number):\n  # your solution here\n    return(-number*1)", "def opposite(number):\n    return number * -1\n    #Nobody saw this\n", "def opposite(number):\n    return float(\"-\"+str(number)) if number >= 0 else float(str(number)[1:])", "def opposite(number):\n    if(number==+number):\n        return (-number)\n    elif (number==-number):\n        return (+number)\n    else:\n        return (0)\n\n\n", "def opposite(number):\n    number = -number\n    return number\n\nprint((opposite(1)))\n\n", "def opposite(number):\n    if number > 0:\n        number *= -1\n        return number\n    elif number < 0:\n        number *= -1\n        return number\n    else:\n        return 0\n", "def opposite(n):\n    e = n - (n + n)\n    return e", "import numpy\ndef opposite(number):\n    if number < 0:\n        return abs(number)\n    else:\n        return numpy.negative(number)", "def opposite(number):\n    return number*-1 if number>0 else -1*number        \n", "def opposite(number):\n\n    if number > 0:\n        return number - (abs(number) * 2 )\n    else:\n        return abs(number)", "def opposite(number):\n    if number==abs(number):#If 1==1 then we should return negative number of the given digit\n        return -abs(number)#Here we put up negative sign infront of abs() func\n    else:\n        return abs(number)#If number isn't equal to its absolute number then its negative, so return absolute number", "def opposite(number):\n    return number - (number * 2)\nopposite(8)", "def opposite(number):\n    number = 1.0*number\n    if number > 0:\n        return 0-number\n    else: return 0-number\n  # your solution here\n", "def opposite(num):\n    return abs(num) if num < 0  else -abs(num)", "def opposite(number):\n    answer=number*-1\n    return answer\n#     if number >0:\n#         return -number\n#     if number<0:\n#         postive= number\n        \n        \n        \n  # your solution here\n", "def opposite(number):\n    opacne = number*-1\n    return opacne\n      \n", "def opposite(number):\n    if number > 0:\n        return float(\"-\" + str(number))\n    else:\n        return number - number - number\n", "def opposite(number):\n    num = number - 2*number\n    return num", "def opposite(number):\n    w = -number\n    return w", "def opposite(number):\n    if number < 0:\n        return abs(number)\n    else:\n        return number * -1\n    \n    \n\"\"\"\ndef opposite(number):\n    return -number\n\"\"\"    ", "def opposite(number):\n    return number * -1\n        \na = opposite(-10)\n\nprint(a)\n", "def opposite(number):\n    string = str(number)                    #transform to a string to perform operations\n    if string[0] == \"-\":                    #return values and convert back to float\n        return float(string[1:])\n    else:\n        return float(\"\".join([\"-\",string]))\n  # your solution here\n", "def opposite(number):\n    num = ''\n    num = number * -1\n    print(num)\n    return num\n    \n", "def opposite(number):\n    convert = None\n    if number < 0:\n        convert = str(number)[1:]\n    else:\n      convert = '-' + str(number)\n    try:\n      return int(convert)\n    except:\n      return float(convert)", "''' Return opposite number '''\n\ndef opposite(number):\n\n    ''' Just put minus before a number... What the heck?! '''\n    return -number\n\nprint(opposite(1))", "''' Return opposite number '''\n\ndef opposite(number):\n\n    ''' If you substract a number from a number You get an opposite number '''\n    return (number - (number * 2))\n\nprint(opposite(1))", "def opposite(number):\n    return number * -1\n\nprint(opposite(4))", "def opposite(number):\n    tmp = number * 2\n    ans = number - tmp\n    return ans\n  # your solution here\n", "def opposite(value):\n  # your solution here\n    return value * -1", "def opposite(number):\n    absolu = number * (-1)\n    return absolu", "def opposite(number):\n    rev=0\n    rev=-1*number\n    return rev", "def opposite(number):\n    return -1 * number\n##blablablablablablablablablablablablablablablablablabla\n#blablablablablablablablablablablablablablablablablabla\n#blablablablablablablablablablablablablablablablablabla\n#blablablablablablablablablablablablablablablablablabla\n#blablablablablablablablablablablablablablablablablabla\n#blablablablablablablablablablablablablablablablablabla#blablablablablablablablablablablablablablablablablabla#blablablablablablablablablablablablablablablablablabla#blablablablablablablablablablablablablablablablablabla\n", "def opposite(n):\n    if n>0:\n        n=n-(2*n)\n        return n\n    else:\n        n=abs(n)\n        return n", "def opposite(number):\n    if number >= 1:\n        tempnum = number + number\n        result = number - tempnum\n        return result\n    if number <= -1:\n        tempnum = number + number\n        result = number - tempnum\n        return result\n    else:\n        return 0", "def opposite(number):\n  # your solution here\n    return -number if number != -number else number", "def opposite(number):\n    return -number if abs(number) else abs(number)", "def opposite(number):  # this is our function, i just called it numberChange for fun\n    return -(number) # that's it!, we just multiply our input by -1", "def opposite(number):\n    if number > 0:\n        number = -number\n    else:\n        number = -number\n    return number\nprint(opposite(1),-1)", "def opposite(number):\n    x = number = -(number)\n    return x\n  # your solution here\n", "def opposite(number):\n  # your solution here\n    output_num = number * -1\n    return output_num", "def opposite(N):\n    return -N\n", "def opposite(number):\n    # THE MOST GENIUS SOLUTION YOU'VE EVER SEEN LOL\n    # It works - no matter how.\n    if number > 0:\n        number = 0 - number\n    elif number is None:\n        number = -1\n    else:\n        return abs(number)\n    return number", "def opposite(number): \n  if number < 0 : \n    return abs(number)\n  if number > 0 :\n    return float(\"-\" + str(number))\n  if number == 0 :\n    return 0\n"]