["from collections import Counter\n\ndef modes(data):\n    cnts = Counter(data)\n    mx, mn = max(cnts.values()), min(cnts.values())\n    return sorted([k for k in cnts if cnts[k] == mx and cnts[k] != mn])", "def modes(data):\n    frequency = {}\n    mode_list = []\n    \n    # adds or creates a counter for each character\n    for d in data:\n        if d in frequency:\n            frequency[d] += 1\n        else:\n            frequency[d] = 1\n    \n    # adds modes from the dictionary to a list, and checks that there is a mode\n    for f in frequency:\n        if frequency[f] == max(frequency.values()) > min(frequency.values()):\n            mode_list.append(f)\n            \n    return sorted(mode_list)", "def modes(data):\n    d = {i : data.count(i) for i in set(data)}\n    return [] if len(set(d.values())) == 1 else sorted([i for i in set(data) if d[i] == max(d.values())]) ", "from collections import Counter\n\ndef modes(data):\n    c = Counter(data)\n    m = max(c.values())\n    if min(c.values()) == m:\n        return []\n    return [key for key in sorted(c) if c[key] == m]", "from collections import Counter\n\ndef modes(data):\n    result = []\n    counts = Counter(data)\n    if len(set(counts.values())) > 1:\n        result += sorted(k for k,v in list(counts.items()) if v == max(counts.values()))\n    return result\n", "from collections import Counter\n\ndef modes(data):\n    count = Counter(data)\n    m = max(count.values()) if len(set(count.values())) > 1 else 0\n    return sorted(item for item, number in count.items() if 0 < m == number)", "def modes(data):\n    #making a dictionary with every symbol as key and numbers it's used in given data as value\n    dict = {i: data.count(i) for i in data}\n\n    #if there are at least two symbols used different number of times in data\n    if max(dict.values()) != min(dict.values()): \n        #we return sorted list with symbols used maximum times in data in it (list of modes)\n        return sorted([key for key, value in dict.items() if value == max(dict.values())])\n    \n    return []", "def modes(data):\n    most, l, length = 0, [], len(data)\n    for x in set(data):\n        res = data.count(x)\n        if most < res:\n            most = res\n            l = []\n            l.append(x)\n            length = len(data)-most\n        elif most == res:\n            l.append(x)\n            length -= most\n    return sorted(l) if length else []", "def modes(data):\n    d = {}\n    for i in set(data):\n        d[data.count(i)] = d.get(data.count(i), []) + [i]\n    if len(d) == 1:\n        return []\n    else:\n        return sorted(d[max(d.keys())])", "def modes(data):\n    counts = {}\n    for value in data:\n        if value in counts:\n            counts[value] += 1\n        else:\n            counts[value] = 1\n    #return counts\n    max_occurrence = max(counts.values())\n    min_occurrence = min(counts.values())\n    \n    if max_occurrence == min_occurrence:\n        return []\n    result = []\n    for key in counts.keys():\n        if counts[key] == max_occurrence:\n            result.append(key)\n    return sorted(result)"]