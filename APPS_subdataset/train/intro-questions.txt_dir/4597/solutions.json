["def combine(*args):\n  out = list()\n  for i in range(len(max(args, key=len))): #Sometimes you just have to love python\n    for arr in args:\n      if i < len(arr): out.append(arr[i])\n  return out", "from itertools import chain, zip_longest\n\ndef combine(*args):\n    return [x for x in chain.from_iterable(zip_longest(*args)) if x is not None]\n", "def combine(*args):\n    res = []\n    num_of_args = len(args)\n    len_of_longest_list = max([len(l) for l in args])\n\n    for i in range(len_of_longest_list):\n        for j in range(num_of_args):\n            if len(args[j]) > i:\n                res.append(args[j][i])\n    return res\n        \n", "combine = lambda *args: [el[0] for el in args] + combine(*[el[1:] for el in args if len(el)>1]) if args else []", "from copy import deepcopy\n\n\ndef combine(*args):\n    if not args:\n        return []\n    args_list = list(deepcopy(args))\n    first = args_list.pop(0)\n    head = first.pop(0)\n    if first:\n        args_list.append(first)\n    return [head] + combine(*tuple(args_list))", "from itertools import zip_longest\ndef combine(*args):\n    return [y for x in zip_longest(*args) for y in list(x) if y is not None]", "def combine(*args):\n    result = []\n    l = len(max(args, key=len))\n    for loop in range(l):\n        result.extend(array[loop] for array in args if len(array) > loop)\n    return result\n", "def combine(*args):\n    L = max(len(i) for i in args)\n    t = []\n    j = 0\n    while j<L:\n        for i in args:\n            try:\n                t.append(i[j])\n            except:\n                pass\n        j += 1\n    return t        ", "def combine(*args):\n    result = []\n    args_length = len(args)\n    max_len_list = max([len(l) for l in args])\n    for i in range(max_len_list):\n        for j in range(args_length):\n            if len(args[j]) > i:\n                result.append(args[j][i])\n    return result"]