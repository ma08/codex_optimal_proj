["def elevator(left, right, call):\n    return \"left\" if abs(call - left) < abs(call - right) else \"right\"", "def elevator(left, right, call):\n    if abs(left-call) >= abs(right-call):\n        return \"right\"\n    else:\n        return \"left\"", "def elevator(left, right, call):\n    return \"left\" if abs(left - call) < abs(right - call) else \"right\"", "elevator=lambda l,r,c:'rliegfhtt'[abs(c-l)<abs(c-r)::2]", "def elevator(left, right, call):\n    return \"right\" if abs(right - call) <= abs(left - call) else \"left\"", "def elevator(x, y, r):\n    return ['left','right'][abs(r-x)>=abs(r-y)]", "def elevator(left, right, call):\n    delta_left = abs(left - call)\n    delta_right = abs(right - call)\n    if delta_left < delta_right:\n        return 'left' \n    else:\n        return 'right'\n", "def elevator(left, right, call):\n    return sorted([('right', right), ('left', left),], key = lambda x: abs(call - x[1]))[0][0]", "def elevator(left, right, call):\n    dr = abs(call - right)\n    dl = abs(call - left)\n    return \"left\" if dr > dl else \"right\"", "def elevator(left, right, call):\n     # Code on! :)\n     distance_left=abs(call-left)\n     distance_right=abs(call-right)\n     if distance_right<=distance_left or right==call:\n         return \"right\"\n     else:\n         return \"left\"\n     \n", "elevator = lambda left,right,call: 'left' if abs(call-left) < abs(call-right) else 'right'", "elevator=lambda l,r,c: 'left' if abs(l-c)<abs(r-c) else 'right'", "def elevator(left, right, call):\n    return ['left', 'right'][abs(left - call) >= abs(right - call)]", "def elevator(left: int, right: int, call: int) -> str:\n    \"\"\" Get the name of the elevator closest to the called floor (\"left\"/\"right\"). \"\"\"\n    return \"left\" if abs(right - call) > abs(left - call) else \"right\" if abs(right - call) < abs(left - call) else \"right\"", "def elevator(left, right, call):\n    difleft = left-call\n    difright = right-call\n    \n    if(call == left and call != right):\n        return \"left\"\n    if(call == right):\n        return \"right\"\n    if(left == right):\n        return \"right\"\n    if(difleft == difright):\n        return \"right\"\n    if(left>right and call<right):\n        return \"right\"\n    if(right>left and call<left):\n        return \"left\"\n    if(call > right and call > left and right > left):\n        return \"right\"\n    if(call > left and left > right):\n        return \"left\"\n    else:\n        return \"right\"", "def elevator(left, right, call):\n    return ('right', 'left')[right < left <= call or call <= left < right]", "elevator=lambda l,r,c:[\"right\",\"left\"][abs(l-c)<abs(r-c)]", "elevator = lambda l, r, c: (\"right\", \"left\")[abs(c - l) < abs(c - r)]", "def elevator(left, right, call):\n    return 'left' if left == call and left != right or left > right and call > left or right > left and call < left else 'right'", "def elevator(left, right, call):\n    return \"left\" if (call - left)*(call - left) < (call - right)*(call - right) else \"right\"", "def elevator(l, r, c):\n    if l-c < 0:\n        left = -(l-c)\n    else: left = l-c\n    if r -c < 0:\n        right = -(r-c)\n    else: right = r-c\n    return 'left' if left < right else 'right'", "def elevator(left, right, call):\n    closest = \"left\"\n    if abs(right - call) <= abs(left - call):\n        closest = \"right\"\n    return closest\n", "def elevator(left, right, call):\n    if abs(call - left) < abs(call - right):\n        return \"left\"\n    elif abs(call - right) < abs(call - left):\n        return \"right\"\n    elif abs(call - left) == abs(call - right):\n        return \"right\"", "def elevator(left, right, call):\n    return 'right' if abs(left - call) == abs(right - call) else 'left' if  abs(left - call) < abs(right - call) else 'right'", "def elevator(left, right, call):\n    b=abs(left-call)\n    j=abs(right-call)\n    if b<j:\n        return \"left\"\n    else:\n        return \"right\"", "def elevator(left, right, call):\n    print((left, right, call))\n    if call == left and call != right:\n        return 'left'\n    elif call == right and call != left:\n        return 'right'\n    elif abs(right - call) < abs(left - call):\n        return 'right'\n    elif abs(right - call) > abs(left - call):\n        return 'left'\n    elif abs(right - call) == abs(left - call):\n        return 'right'\n", "def elevator(left, right, call):\n    left_dist = abs(call - left)\n    right_dist = abs(call - right)\n    \n    if left_dist >= right_dist:\n        return 'right'\n    else:\n        return 'left'", "def elevator(left, right, call):\n    print(left, right, call)\n    return \"left\" if abs(left-call) < abs(right-call) else \"right\"", "def elevator(left, right, call):\n    if abs(right - call) < abs(left - call): return 'right'\n    elif abs(right - call) > abs(left - call): return 'left'\n    elif abs(right - call) == abs(left - call): return 'right'\n\n", "def elevator(left, right, call):\n    r_dist = call - right\n    l_dist = call - left\n    if r_dist < 0:\n        r_dist *= -1\n    if l_dist < 0:\n        l_dist *= -1\n        \n    if r_dist <= l_dist:\n        return 'right'\n    else:\n        return 'left'\n", "def elevator(left, right, call):\n    return 'right' if right == call or right == left or abs(right-call)<=abs(left-call) else 'left'", "elevator=lambda l,r,c:'rliegfhtt'[1-(abs(l-c)>=abs(r-c))::2]", "def elevator(left, right, call):\n    el1 =  abs (call - right)\n    el2 = abs (call - left) \n    if el1 > el2:\n        return ('left')\n    else:\n        return('right')\n", "def elevator(left, right, call):\n    \n    l = left\n    r = right\n    c = call\n    \n    if l == r or (l == 2 and r == 0 and c == 1) or (l == 0 and r == 2 and c == 1):\n        return \"right\"\n    elif l == c:\n        return \"left\"\n    elif l > c > r or r < c < l or c < l < r or c > l > r:\n        return \"left\"\n    else:\n        return \"right\"\n    \n", "def elevator(left, right, call):\n    return abs(call - left) < abs(call - right) and 'left' or 'right'", "def elevator(left, right, call):\n    if left == right: return \"right\"\n    elif left == call: return 'left'\n    elif left < right <= call: return 'right'\n    elif call < left < right: return 'left'\n    elif left < right > call: return 'right'\n    elif right < left < call: return 'left'\n    elif right < call < left: return 'right'\n    return 'right'", "def elevator(left, right, call):\n    if call == right:\n        return 'right'\n    elif call == left:\n        return 'left'\n    elif call == left and call == right:\n        return 'right'\n    elif abs(call - right) < abs(call - left) or abs(call-right) == abs(call-left):\n        return 'right'\n    else:\n        return 'left'", "def elevator(left, right, call):\n    leftDiff = abs(call-left)\n    rightDiff = abs(call-right)\n    if leftDiff > rightDiff: \n        return 'right'\n    elif leftDiff < rightDiff: \n        return 'left'\n    else: \n        return 'right'", "def elevator(left, right, call):\n    l = ['left', 'right']\n    return l[abs(left - call) >= abs(right - call)]", "def elevator(left, right, call):\n    if left==right or abs(left-call)==abs(right-call):\n        return \"right\"\n    elif abs(left-call)<abs(right-call):\n        return \"left\"\n    else:\n        return \"right\"", "def elevator(left, right, call):\n    print(left, right, call)\n    if call == right == left: return \"right\"\n    elif call == left: return \"left\"\n    elif call == right: return \"right\"\n    elif abs(call-left) == abs(call-right): return \"right\"\n    elif abs(call-left) < abs(call-right): return \"left\"\n    else: return \"right\"", "def elevator(left, right, call):\n    if right == call: return 'right'\n    elif left == call: return 'left'\n    elif abs(left-call) < abs(right-call): return 'left'\n    else: return 'right'\n    \n", "def elevator(left, right, call):\n    a = abs(call - left)\n    b = abs(call - right)\n    return 'left' if b > a else 'right'", "def elevator(left, right, call):\n    if right == call:\n        return 'right'\n    elif left == call:\n        return 'left'\n    else:\n        if abs(right - call) == 1:\n            return 'right'\n        elif abs(left - call) == 1:\n            return 'left'\n        else:\n            return 'right'", "elevator = lambda l, r, c: \"right\" if abs(c - r) <= abs(c - l) else \"left\"", "def elevator(left, right, call):\n    lc = abs(call-left)\n    rc = abs(call-right)\n    return 'left' if lc<rc else 'right' if rc<lc else 'right'", "from itertools import product\n\nfoo, rl = list(product('012', repeat=3)), 'RRRLRRLRRRLLR'\nbar, combos = list(rl + 'R' + rl[::-1]), dict()\n\nfor i in range(27): combos[foo[i]] = bar[i]\nelevator = lambda l, r, c: 'right' if combos[(str(l), str(r), str(c))]=='R' else 'left'", "def elevator(left, right, call):\n    if left == call and right != call or abs(call-left) < abs(call-right):\n        return 'left'\n    return 'right'", "elevator = lambda left, right, call: \"left\" if abs(right-call) > abs(left-call) else \"right\"\n \n    \n", "def elevator(left, right, call):\n    if right == call and call == left: return \"right\"\n    elif right == call: return \"right\"\n    elif left == call: return \"left\"\n    elif left > right and right> call: return \"right\"\n    elif right > left and left > call: return \"left\"\n    elif (right -call)>= (left-call): return \"right\"\n    elif (call-right) <= (call-left): return \"left\"\n    elif call > left and left > right: return \"left\"\n    elif left > call and call > right: return \"right\"\n    \n", "def elevator(left, right, call):\n    if left == right:\n        return \"right\"\n    elif left == 0 and call == 0:\n        return \"left\"\n    elif left == 1 and call == 1:\n        return \"left\"\n    elif left == 2 and call == 2:\n        return \"left\"\n    elif left == 1 and call == 2 and right == 0:\n        return \"left\"\n    elif left == 1 and call == 0 and right == 2:\n        return \"left\"\n    else:\n        return \"right\"", "def elevator(left, right, call):\n    r = abs(right-call)\n    l = abs(left-call)\n    return 'right' if r <= l else 'left'", "def elevator(left, right, call):\n    return 'right' if right == left == call or abs(call - right) <= abs(call - left) else 'left' ", "def elevator(left, right, call):\n    if abs(right-call)==abs(left-call):\n        return 'right'\n    elif abs(right-call)<abs(left-call):\n        return 'right'\n    else:\n        return 'left'", "def elevator(left, right, call):\n    if left==right:\n        return \"right\"\n    else:\n        return \"left\" if abs(left-call)<abs(right-call) else \"right\"", "def elevator(left, right, call):\n    if left > right and left <= call:\n        return 'left'\n    elif left < right and left >= call:\n        return 'left'\n    else:\n        return 'right'\n    \n", "def elevator(left, right, call):\n    a,b = abs(call-right), abs(call-left)\n    if a<=b:\n        return 'right'\n    return 'left'\n\n", "def elevator(l, r, c): \n    ld=abs(l-c)\n    rd=abs(r-c)\n    if rd<=ld: return \"right\"\n    else:return \"left\"", "def elevator(left, right, call):\n    if left == right:\n        return 'right'\n    return 'right' if -abs(call - left) <= -abs(call - right) else 'left'", "def elevator(l, r, c):\n    return 'left' if r>l>=c or r<l<=c else 'right'", "def elevator(left, right, call):\n    close_left = abs(call - left)\n    close_right = abs(call - right)\n    if close_right <= close_left:\n        return \"right\"\n    return \"left\"", "def elevator(left, right, call):\n    \n    leftdist = abs(left - call)\n    rightdist = abs(right - call)\n    \n    if leftdist == rightdist:\n        return \"right\"\n    elif leftdist > rightdist:\n        return \"right\"\n    else:\n        return \"left\"", "def elevator(left, right, call):\n\n    \n    diff_left = abs(left - call)\n    \n    diff_right = abs(right - call)\n    \n    \n    if diff_left >= diff_right:\n        \n        return \"right\"\n    \n    if diff_left < diff_right:\n        \n        return \"left\"", "def elevator(left, right, call):\n    return \"right\" if (abs(call-right)<= abs(call-left)) else \"left\"\n    # Code on! :)\n", "def elevator(left, right, call):\n    distance1 = abs(call - left)\n    distance2 = abs(call - right)\n    if distance2 <= distance1:\n        result = \"right\"\n    else:\n        result = \"left\"\n    return result", "def elevator(left, right, call):\n    if left == right:\n        return 'right'\n    elif abs(call - right) < abs(call - left):\n        return 'right'\n    elif abs(call - left) < abs(call - right):\n        return 'left'\n    elif abs(call - left) == abs(call - right):\n        return 'right'", "#import math\ndef elevator(left, right, call):\n    if abs(call-left)<abs(call-right):\n        return 'left'\n    if abs(call-left)>abs(call-right):\n        return 'right'\n    return 'right'", "def elevator(left, right, call):\n    if call == left and call != right:\n        return 'left'\n    elif call > left > right or call < left < right:\n        return 'left'\n    else:\n        return 'right'", "import math\ndef elevator(left, right, call):\n    diff1=abs(left-call)\n    diff2=abs(right-call)\n    if diff1<diff2:\n        return 'left'\n    elif diff2>diff1:\n        return 'right'\n    else:\n        return 'right'", "def elevator(left, right, call):\n    print(left, right, call)\n    return \"right\" if abs(left-call)>=abs(right-call) else \"left\"", "def elevator(left, right, call):\n    if right == call or abs(call-right) <= abs(call-left):\n        return 'right' \n    return 'left'", "def elevator(left, right, call):\n    rt = abs(call - right)\n    lt = abs(call - left)\n    return \"left\" if rt > lt else \"right\"\n", "def elevator(l, r, c):\n\n    if l == c and r != c:\n        return \"left\"\n    elif r == c:\n        return \"right\"\n    elif c > r and r > l:\n        return \"right\"\n    elif r > c and c > l : \n        return \"right\"\n    elif r == l and r != c:\n        return \"right\"\n    elif l > c and l > r:\n        return \"right\"\n    else:\n        return \"left\"", "def elevator(left, right, call):\n    if call == left and call == right:\n        return \"right\"\n    elif call == left:\n        return \"left\"\n    elif call == right:\n        return \"right\"\n    elif left == right:\n        return \"right\"\n    else:\n        return \"left\" if abs(call - left) < abs(call - right) else \"right\"", "def elevator(left, right, call):\n    # find absolute value of difference between L and call and R and call\n    if abs(right-call) == abs(left-call): #if equal, return right\n        return 'right'\n    else: #return smallest number\n        return ('right' if abs(right-call) < abs(left-call) else 'left')", "def elevator(left, right, call):\n    \"return closest elevator\"\n    return \"left\" if abs(left-call) < abs((right - call)) else \"right\"", "def elevator(left, right, call):\n    if (abs(call - left) == abs(call - right)) or (abs(call - right) < abs(call - left)):\n        return \"right\"\n    else:\n        return \"left\"\n", "from math import fabs\ndef elevator(left, right, call):\n    return 'left' if fabs(call - left) < fabs(call - right) else 'right'", "def elevator(left, right, call):\n    if int(right) == int(call) and int(left) == int(call):\n        return(\"right\")\n    elif int(right) == int(call):\n        return(\"right\")\n    elif int(left) == int(call):\n        return(\"left\")\n    elif int(call) == 0 and int(left) < int(right):\n        return(\"left\")\n    elif int(call) == 1 and int(left) > int(right):\n        return(\"right\")\n    elif int(call) == 2 and int(left) > int(right):\n        return(\"left\")\n    else:\n        return(\"right\")\n", "def elevator(left, right, call):\n    aa = abs(left - call)\n    bb = abs(right - call)\n    if aa < bb:\n        return \"left\"\n    else:\n        return \"right\"", "def elevator(left, right, call):\n    if left == call and call != right:\n        return \"left\"\n    elif right == call and call != left:\n        return \"right\"\n    if abs(left - call) < abs(right - call):\n        return \"left\"\n    elif abs(left - call) > abs(right - call):\n        return \"right\"\n    return \"right\"", "def elevator(left, right, call):\n  d_left = left - call\n  d_right = right - call\n  if (d_left + d_right == 0 or abs(d_left) > abs(d_right) or d_left == d_right):\n    return \"right\"\n  else:\n    return \"left\"\n", "def elevator(left, right, call):\n    isLeft = abs(call-left) < abs(call-right)\n    return \"left\" if isLeft else \"right\"", "def elevator(left, right, call):\n    left_dist = abs(call - left)\n    right_dist = abs(call - right)\n    if right_dist <= left_dist:\n        return 'right'\n    else:\n        return 'left'", "def elevator(left, right, call):\n    temp = [abs(call - left), abs(call - right)]\n    if min(temp) == temp[0]:\n        if min(temp) == temp[1]:\n            return 'right'\n        else:\n            return 'left'\n    else:\n        return 'right'\n", "def elevator(left, right, call):\n    if left == right == call:\n        return 'right'\n    if left == call:\n        return 'left'\n    if right == call:\n        return 'right'\n    if abs(left-call) < abs(right-call):\n        return 'left'\n    else:\n        return 'right'", "def elevator(left, right, call):\n    sum1 = abs(call-left)\n    sum2 =  abs(call-right)\n    if sum2 <= sum1:\n        return \"right\"\n    else:\n        return \"left\"", "def elevator(left, right, call):\n    l_distance = abs(call - left)\n    r_distance = abs(call - right)\n    return 'left' if l_distance < r_distance else 'right'", "def elevator(left, right, call):\n    if abs(left - call) > abs(right - call):\n        return \"right\"\n    elif abs(left - call) < abs(right - call):\n        return \"left\"\n    elif left == right:\n        return \"right\"\n    else:\n        return \"right\"\n", "def elevator(left, right, call):\n    if left==right:\n        return 'right'\n    elif left==call:\n        return 'left'\n    elif call-right==1 or right-call==1 or call==right:\n        return 'right'\n    else:\n        return 'left'", "def elevator(left, right, call):\n    x,y=abs(call-right),abs(call-left)\n    if x>y:\n        return \"left\"\n    elif x==y:\n        return \"right\"\n    else:\n        return \"right\"\n    pass # Code on! :)", "def elevator(left, right, call):\n    choice = 'right'\n    if call != right:\n        choice = (\"left\",\"right\") [abs(call - left) >= abs(call - right)]\n    return choice", "def elevator(left, right, call):\n    a = abs(call - left )\n    b = abs(call - right)\n    if a < b:\n        return 'left'\n    else:\n        return 'right'", "def elevator(left, right, call):\n    x = call - left\n    y = call - right\n    if (left == call and right != call) or (right < left < call) or (call < left < right):\n        return 'left'\n    return 'right'\n", "def elevator(left, right, call):\n\n    if left == right and left == call: return 'right'\n    if call == left:  return 'left'\n    if call == right: return 'right'\n    \n    if abs(call - left) < abs(call - right): return 'left'\n    else: return 'right'", "def elevator(left, right, call):\n    if abs(left - call) < abs(right - call):\n        result = 'left'\n    else:\n        result = 'right'\n    return result", "elevator=lambda l,r,c:'right' if abs(r-c)<=abs(l-c) else 'left'", "def elevator(left, right, call):\n    return 'right' if left == call and right == call else 'right' if right == call else 'left' if left == call else 'right' if left - call == right - call else 'left' if abs(left - call) < abs(right - call) else 'right' ", "def elevator(left, right, call):\n    '''Return the closest elevator depending on the floor (call). If both are the same, return right'''\n    left_distance = abs(call-left)\n    right_distance = abs(call-right)\n    if right_distance <= left_distance:\n        return 'right'\n    return 'left'", "def elevator(left, right, call):\n    d=abs(left-call)\n    s=abs(right-call)\n    if (d<s):\n        return \"left\"\n    else:\n        return \"right\""]