["def diagonal(n, p):\n    # your code\n    res = 0\n    for base in range(p, max(n,p) + 1):\n        value = 1\n        for i in range(base-p+1,base+1):\n            value *= i\n        for i in range(1,p+1):\n            value //= i\n        res += int(value)\n    return res\n", "import math\n\ndef diagonal(n, p):\n    s=0\n    f=math.factorial(p)\n    for i in range(n+1-p):\n        prod=1\n        for j in range(1,p+1):\n            prod*=(i+j)\n        prod=prod//f\n        s+=prod\n    return int(s)", "from operator import mul\nfrom functools import reduce\n\ndef choose(n, p):\n    if (p > n - p):\n        p = n - p\n    return reduce(mul, list(range((n-p+1), n+1)), 1) // reduce( mul, list(range(1,p+1)), 1)\n        \ndef diagonal(n, p):\n    return choose(n+1, p+1)\n", "from math import factorial\ndef diagonal(n, p):\n    return factorial(n + 1) // (factorial(p + 1) * factorial(n - p))", "def diagonal(line, diag):\n    s, j, p = 1, 1, 1\n    for i in range(diag+1, line+1):\n        p = p*i//j\n        s += p\n        j += 1\n    return s", "from functools import reduce \ndef comb(n, p):\n    a,b = n-p, p\n    return reduce(lambda x, y : x*y, range(max(a,b)+1,n+1))//reduce(lambda x, y : x*y, range(1,min(a,b)+1))\n\ndef diagonal(n, p):\n    return comb(n+1, p+1)", "from math import factorial\ndef diagonal(n,p):\n    s=factorial(n+1)//(factorial(p+1)*factorial(n-p))\n    return int(s)", "from functools import reduce\nfrom operator import mul\nfrom fractions import Fraction as frac\n\ndef diagonal(n, p):\n    return reduce(mul, [frac(n+1-k, k+1) for k in range(p+1)], 1)"]