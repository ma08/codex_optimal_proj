["def prime(a):\n    if a < 2: return False\n    if a == 2 or a == 3: return True   \n    if a % 2 == 0 or a % 3 == 0: return False\n    maxDivisor = a**0.5\n    d, i = 5, 2\n    while d <= maxDivisor:\n        if a % d == 0: return False\n        d += i \n        i = 6 - i\n \n    return True\n\ndef prime_bef_aft(num):\n    res = []\n    for n in range(num-1, 1, -1):\n        if prime(n):\n            res.append(n)\n            break\n    for n in range(num+1, 3*num, 1):\n        if prime(n):\n            res.append(n)\n            break\n    return res", "def prime_bef_aft(num):\n    m = 2 - (num%2 == 0)\n    return [next(n for n in range(i, int(i*r), s) if is_prime(n)) for i, r, s in ((max(2, num-m), 0.8, -2), (num+m, 1.2, 2))]\n\n\ndef is_prime(n):\n    factors = 0\n    for k in (2, 3):\n        while n % k == 0 and factors < 2:\n            n //= k\n            factors += 1\n    k = 5\n    step = 2\n    while k * k <= n and factors < 2:\n        if n % k:\n            k += step\n            step = 6 - step\n        else:\n            n //= k\n            factors += 1\n    if n > 1:\n        factors += 1\n    return factors == 1", "def prime_bef_aft(num):\n    m = 2 - (num % 2 == 0)\n    b, a, p_b, p_a = 2 if num == 3 else num-m, num+m, False, False\n    while not p_b or not p_a:\n        p_b, b = (True, b) if p_b or is_prime(b) else (False, b-2)\n        p_a, a = (True, a) if p_a or is_prime(a) else (False, a+2)\n    return [b, a]        \n\n\ndef is_prime(n):\n    factors = 0\n    for k in (2, 3):\n        while n % k == 0 and factors < 2:\n            n //= k\n            factors += 1\n    k = 5\n    step = 2\n    while k * k <= n and factors < 2:\n        if n % k:\n            k += step\n            step = 6 - step\n        else:\n            n //= k\n            factors += 1\n    if n > 1:\n        factors += 1\n    return factors == 1\n\n", "from itertools import compress\nimport numpy as np\n\ns = np.ones(200001)\ns[:2] = s[4::2] = 0\nfor i in range(3, int(len(s)**0.5)+1, 2):\n    if s[i]:\n        s[i*i::i] = 0\nprimes = list(compress(range(len(s)), s))\n\ndef prime_bef_aft(num):\n    i = np.searchsorted(primes, num)\n    return [primes[i-1], primes[i+(primes[i] == num)]]", "from itertools import count\n\ndef isPrime(n): return n==2 or all(n%x for x in range(3,int(n**.5+1),2))        # will never recieve an even number\n\ndef prime_bef_aft(n):\n    delta = 2 - (n%2 == 0)\n    return [ next(v + (v==1) for v in count(n-delta,-2) if isPrime(v) or v==1),\n             next(v for v in count(n+delta, 2) if isPrime(v))]", "from math import sqrt\nfrom itertools import count, islice\n\ndef isPrime(n):\n    return n > 1 and all(n%i for i in islice(count(2), int(sqrt(n)-1)))\n\ndef prime_bef_aft(num):\n    c, d, l = num - 1, num + 1, []\n    while len(l)<1:\n        if isPrime(c):\n            l.append(c)\n        c -= 1\n    while len(l)<2:\n        if isPrime(d):\n            l.append(d)\n        d += 1\n    return l\n", "def prime_bef_aft(num):\n    after = num + 1\n    while not isprime(after):\n        after += 1\n        \n    before = num - 1\n    while not isprime(before):\n        before -= 1\n\n    return[before, after]\n    \n    \ndef isprime(n):\n    if n % 2 == 0 and n > 2: \n        return False\n    return all(n % i for i in range(3, int(n**0.5) + 1, 2))", "def prime_bef_aft(num):\n    res = []\n    for i in range(num, 0, -1):\n        if len([x for x in range(1, i+1) if i % x == 0 and i != num]) == 2:\n            res.append(i)\n            break\n    i = num\n    while len(res) != 2:\n        i += 1\n        if len([x for x in range(1, i+1) if i % x == 0 and i != num]) == 2:\n            res.append(i)\n            break\n    return res\n"]