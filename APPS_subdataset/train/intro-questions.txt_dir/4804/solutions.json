["def relations(family_list, target_pair):\n    parents = {}\n    for parent, child in family_list:\n        parents[child] = parent\n\n    a, b = target_pair\n    ap = parents.get(a)\n    app = parents.get(ap)\n    bp = parents.get(b)\n    bpp = parents.get(bp)\n\n    if b == ap:\n        return 'Mother'\n    if b == app:\n        return 'Grandmother'\n    if a == bp:\n        return 'Daughter'\n    if a == bpp:\n        return 'Granddaughter'\n    if ap == bp:\n        return 'Sister'\n    if app == bpp:\n        return 'Cousin'\n    if app == bp:\n        return 'Aunt'\n    if ap == bpp:\n        return 'Niece'", "def relations(family, pair):\n    if pair in family:\n        return \"Daughter\"\n    if pair[::-1] in family:\n        return \"Mother\"\n\n    asc = {d: m for m, d in family}\n    mother = asc.get\n    if mother(mother(pair[0])) == pair[1]:\n        return \"Grandmother\"\n    if mother(mother(pair[1])) == pair[0]:\n        return \"Granddaughter\"\n\n    desc = {}\n    for m, d in family: desc.setdefault(m, []).append(d)\n    is_sister = lambda a, b: not all({a, b} - set(gen) for gen in list(desc.values()))\n    if is_sister(*pair):\n        return \"Sister\"\n    if is_sister(mother(pair[0]), pair[1]):\n        return \"Aunt\"\n    if is_sister(mother(pair[1]), pair[0]):\n        return \"Niece\"\n\n    return \"Cousin\"\n", "def relations(f, p):\n    def same(a, b): return a(p[0], f) == b(p[1], f)\n    if same(ID, P): return \"Daughter\"\n    elif same(P, ID): return \"Mother\"\n    elif same(GP, ID): return \"Grandmother\"\n    elif same(ID, GP): return \"Granddaughter\"\n    elif same(P, P): return \"Sister\"\n    elif same(P, GP): return \"Niece\"\n    elif same(GP, P): return \"Aunt\"\n    elif same(GP, GP): return \"Cousin\"\n\ndef ID(child, _): return child\ndef P(child, f): return next((p for p, c in f if c == child), None)\ndef GP(child, f): return P(P(child, f), f)", "def relations(family_list, target_pair):\n    def code(family_list, target_pair):\n        source,target = target_pair\n        for rel in family_list:\n            for i in (0,1):\n                if rel[i] == source:\n                    if rel[1-i] == target: return 'cp'[i]\n                    branch = code(family_list - set([rel]), (rel[1-i], target))\n                    if branch: return 'cp'[i] + branch\n    m = {\n        'p':'Mother','pp':'Grandmother',\n        'c':'Daughter','cc':'Granddaughter',\n        'pc':'Sister','pcc':'Niece',\n        'ppc':'Aunt','ppcc':'Cousin'\n    }\n    return m[code(set(family_list), target_pair)]", "def relations(family_list, target_pair):\n    people=set(); gen1=[]; gen2=[]\n    \n    for i in family_list:\n        people.add(i[0]); people.add(i[1])\n    for i in people:\n        if all(j[1]!=i for j in family_list):\n            gen1.append(i)\n    for i in family_list:\n        if i[0] in gen1:\n            gen2.append(i[1])\n    gen3=[[] for i in range(len(gen2))]\n    for i in family_list:\n        if i[0] in gen2:\n            gen3[gen2.index(i[0])].append(i[1])\n    g3=sum(gen3,[])\n    \n    a,b = target_pair\n    if a in gen1 and b in gen2: return 'Daughter'\n    if a in gen2 and b in gen1: return 'Mother'\n    if a in gen1 and b in g3: return 'Granddaughter'\n    if a in g3 and b in gen1: return 'Grandmother'\n    \n    if a in gen2 and b in gen2: return 'Sister'\n    for i in gen3:\n        if a in i and b in i: return 'Sister'\n    if a in g3 and b in g3: return 'Cousin'\n    if a in gen2 and b in gen3[gen2.index(a)]: return 'Daughter'\n    if b in gen2 and a in gen3[gen2.index(b)]: return 'Mother'\n    if a in gen2: return 'Niece'\n    return 'Aunt'\n    \n", "def relations(family_list, target_pair):\n    for i in family_list:\n        if target_pair[0] == i[1]:\n            for j in family_list:\n                if target_pair[1] == j[1] and j[0]==i[0]:\n                    return 'Sister'\n        if i==target_pair:\n            return(\"Daughter\")\n        elif i[0]==target_pair[1] and i[1]==target_pair[0]:\n            return(\"Mother\")\n        elif target_pair[0]==i[1]:\n            for j in family_list:\n                if i[0]==j[1] and target_pair[1] == j[0]:\n                    return 'Grandmother'\n        elif target_pair[1]==i[1]:\n            for j in family_list:\n                if i[0]==j[1] and target_pair[0] == j[0]:\n                    return 'Granddaughter'\n        if target_pair[0]==i[1]:\n            Gmm=1\n            for j in family_list:\n                if i[0]==j[1]:\n                    Gmm=j[0]\n            for k in family_list:\n                if target_pair[1]==k[1]:\n                    for m in family_list:\n                        if k[0]==m[1] and m[0]==Gmm:\n                            return(\"Cousin\")\n        if target_pair[0]==i[1]:\n            for j in family_list:\n                if j[1]==i[0]:\n                    for k in family_list:\n                        if k[0]==j[0] and k[1]==target_pair[1] and k!=j:\n                            return (\"Aunt\")\n        if target_pair[1]==i[1]:\n            for j in family_list:\n                if j[1]==i[0]:\n                    for k in family_list:\n                        if k[0]==j[0] and k[1]==target_pair[0] and k!=j:\n                            return (\"Niece\")\n                            \n        \n                    \n\nprint((relations([('Enid', 'Susan'), ('Susan', 'Deborah'), ('Enid', 'Dianne'), ('Dianne', 'Judy'), ('Dianne', 'Fern')],(\"Dianne\",\"Deborah\"))))\n", "def relations(family_list, target_pair):\n    tree = {}\n    for parent, child in family_list:\n        tree[child] = parent\n        \n    a = tree.get(target_pair[0], 0)\n    b = tree.get(target_pair[1], 0)\n    if a==b:\n        return 'Sister'\n    elif a == target_pair[1]:\n        return 'Mother'\n    elif b == target_pair[0]:\n        return 'Daughter'\n\n    cnt_a = 0\n    while a and a != target_pair[1]:\n        cnt_a += 1\n        a = tree.get(a, 0)\n\n    cnt_b = 0\n    while b and b != target_pair[0]:\n        cnt_b += 1\n        b = tree.get(b, 0)\n\n    if a and not b and cnt_a == 1:\n        return 'Grandmother'\n    elif not a and not b and cnt_a==cnt_b:\n        return 'Cousin'\n    elif not a and not b and cnt_a < cnt_b:\n        return 'Niece'\n    elif not a and not b and cnt_a > cnt_b:\n        return 'Aunt'\n    elif not a and cnt_b == 1:\n        return 'Granddaughter'\n    else:\n        return None", "def relations(family_list, target_pair):    \n    \n    daughters = set()\n    mothers = {}\n    \n    for (mother, daughter) in family_list:\n        if mother in daughters: daughters.remove(mother)\n        daughters.add(daughter)        \n        mothers[daughter] = mother\n    \n    get_ancestors = lambda d : (get_ancestors(mothers[d]) if d in mothers else []) + [d]        \n    \n    p1, p2 = target_pair\n    \n    rs = {1: 'Mother', -1: 'Daughter', 2: 'Grandmother', -2: 'Granddaughter'}    \n    \n    for daughter in daughters:\n        \n        ancestors = get_ancestors(daughter)        \n        if p1 in ancestors and p2 in ancestors: return rs[ancestors.index(p1) - ancestors.index(p2)]\n        \n    mother1 = mothers.get(p1, None)\n    mother2 = mothers.get(p2, None)\n    \n    if mother1 and mother2 and mother1 == mother2: return 'Sister'\n    \n    grandmother1 = mothers.get(mother1, None)\n    grandmother2 = mothers.get(mother2, None)\n    \n    if grandmother1 == grandmother2: return 'Cousin'\n    \n    return 'Aunt' if grandmother1 == mother2 else 'Niece'", "def relations(family_list, target_pair):\n    for i in family_list:\n        if target_pair[0] == i[1]:\n            for j in family_list:\n                if target_pair[1] == j[1] and j[0]==i[0]:\n                    return 'Sister'\n        if i==target_pair:\n            return(\"Daughter\")\n        elif i[0]==target_pair[1] and i[1]==target_pair[0]:\n            return(\"Mother\")\n        elif target_pair[0]==i[1]:\n            for j in family_list:\n                if i[0]==j[1] and target_pair[1] == j[0]:\n                    return 'Grandmother'\n        elif target_pair[1]==i[1]:\n            for j in family_list:\n                if i[0]==j[1] and target_pair[0] == j[0]:\n                    return 'Granddaughter'  \n        if target_pair[0]==i[1]:\n            gmm = 1\n            for j in family_list:\n                if i[0]==j[1]:\n                    gmm = j[0]\n            for k in family_list:\n                if target_pair[1] == k[1]:\n                    for m in family_list:\n                        if k[0]==m[1] and m[0] == gmm:\n                            return 'Cousin'\n        if target_pair[0]==i[1]:\n            for j in family_list:\n                if j[1]==i[0]:\n                    for k in family_list:\n                        if k[0]==j[0] and k !=j and target_pair[1]==k[1]:\n                            return 'Aunt'\n        if target_pair[1]==i[1]:\n            for j in family_list:\n                if j[1]==i[0]:\n                    for k in family_list:\n                        if k[0]==j[0] and k != j and target_pair[0]==k[1]:\n                            return 'Niece'\n", "def relations(family,target):\n    parents={}\n    for parent,child in family:parents[child]=parent\n    a,b=target\n    ap=parents.get(a)\n    app=parents.get(ap)\n    bp=parents.get(b)\n    bpp=parents.get(bp)\n    if b==ap:return \"Mother\"\n    elif b==app:return \"Grandmother\"\n    elif a==bp:return \"Daughter\"\n    elif a==bpp:return \"Granddaughter\"\n    elif ap==bp:return \"Sister\"\n    elif app==bpp:return \"Cousin\"\n    elif app==bp:return \"Aunt\"\n    elif ap==bpp:return \"Niece\""]