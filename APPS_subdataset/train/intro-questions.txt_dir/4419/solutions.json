["def reg_sum_hits(dices,sides=6):\n    d,s = sides*[1],sides-1\n    for i in range(dices-1):\n        t = s*[0] + d + s*[0]\n        d = [sum(t[i:i+sides]) for i in range(len(t)-s)]\n    return [[i+dices, prob] for (i,prob) in enumerate(d)]", "reg_sum_hits=lambda n,s:sorted(map(list,__import__('collections').Counter(map(sum,__import__('itertools').product(range(1,s+1),repeat=n))).items()))", "def reg_sum_hits(n, s):\n    faces = list(range(1, s + 1))\n    sums = []\n    for r in range(n):\n        if not sums:\n            new_sums = [[f, 1] for f in faces]\n        else:\n            new_sums = []\n            for value, count in sums:\n                for f in faces:\n                    new_sums.append([value + f, count])\n            new_sums.sort()\n            i = 0\n            while i < len(new_sums) - 1:\n                a, b = new_sums[i:i + 2]\n                if a[0] == b[0]:\n                    new_sums[i:i + 2] = [[a[0], a[1] + b[1]]]\n                else:\n                    i += 1\n        sums = new_sums            \n\n    return sums\n", "from collections import Counter\nfrom itertools import product\n\ndef reg_sum_hits(n,s):\n    return list(map(list,sorted(Counter(map(sum,product(range(1,s+1),repeat=n))).items())))", "from itertools import product\ndef reg_sum_hits(n, s):\n    d = {}\n    for i in product(*[list(range(1, s + 1))] * n):\n        r = sum(i)\n        d[r] = d.get(r, 0) + 1\n    return list(map(list,d.items()))", "import itertools\n\ndef reg_sum_hits(diceAmount, sides):\n\n    possibilities = calculatepermutations(sides, diceAmount)\n    \n    sumvalues = calculatesumvalues(sides, diceAmount)\n    \n    distributionofsums = calculatedist(possibilities, sumvalues)\n\n    return distributionofsums\n\ndef calculatepermutations(sides, diceAmount):\n    facevalues = (i for i in range(1,sides+1))\n    allpermutations = itertools.product(facevalues, repeat = diceAmount)\n    return [sum(i) for i in allpermutations]\n\n\ndef calculatesumvalues(sides, diceAmount):\n    biggestnumber = sides * diceAmount\n    smallestnumber = diceAmount\n    return  (i for i in range(smallestnumber,biggestnumber+1))\n    \n\ndef calculatedist(possibilities, sumvalues):\n    return [[i,possibilities.count(i)] for i in sumvalues]", "import itertools\nimport collections\n\ndef reg_sum_hits(num_dice, sides):\n    rollsums = [sum(x) for x in itertools.product([side for side in range(1,sides+1)],repeat=num_dice)]\n    return [ [k,v] for k,v in sorted( collections.Counter(rollsums).items() ) ]\n", "from itertools import product\nfrom collections import Counter\n\ndef reg_sum_hits(n, s):\n    return sorted([[k, v] for k, v in Counter(sum(p) for p in product(*[[i for i in range(1, s+1)] for _ in range(n)])).items()])", "from itertools import product\n\ndef reg_sum_hits(n, s):\n    pairs = [[i, 0] for i in range(n, n*s+1)]\n\n    for i in product(range(1, s+1), repeat=n):\n        sum = 0\n        for j in i:\n            sum += j\n        index = sum - n\n        pairs[index][1] += 1\n\n    return pairs"]