["def to_seconds(time):\n    try:\n        s, m, h = int(time[-2:]), int(time[3:5]), int(time[:2])\n        return s + m*60 + h*3600 if m < 60 and s < 60 and len(time) == 8 else None\n    except:\n        return None", "import re\n\n\ndef to_seconds(time):\n    if bool(re.match('[0-9][0-9]:[0-5][0-9]:[0-5][0-9]\\Z', time)):\n        return int(time[:2]) * 3600 + int(time[3:5]) * 60 + int(time[6:8])\n    else:\n        return None", "from re import compile, match\n\nREGEX = compile(r'^(?P<h>\\d{2}):(?P<m>[0-5]\\d):(?P<s>[0-5]\\d)$')\n\n\ndef to_seconds(time):\n    m = match(REGEX, time)\n    if m and time[slice(*m.span())] == time:\n        hms = m.groupdict()\n        return int(hms['h']) * 3600 + int(hms['m']) * 60 + int(hms['s'])\n", "import re\nfrom functools import reduce\n\nHH_MM_SS_PATTERN = re.compile(r'\\A(\\d\\d):([0-5]\\d):([0-5]\\d)\\Z')\n\n\ndef to_seconds(time):\n    m = HH_MM_SS_PATTERN.search(time)\n    if m:\n        return reduce(lambda x, y: x * 60 + int(y), m.groups(), 0)\n    return None\n", "import re\ndef to_seconds(time):   \n    match=re.fullmatch(r'(\\d{2}):([0-5][0-9]):([0-5][0-9])',time)\n    return int(match.group(1))*3600+int(match.group(2))*60+int(match.group(3)) if match else None\n    \n", "import re\n\n\ndef to_seconds(time):\n    match = re.match(r\"(\\d\\d):([0-5]\\d):([0-5]\\d)\\Z\", time)\n    return match and sum(int(n) * 60**i for i, n in enumerate(match.groups()[::-1]))\n", "import re;to_seconds=lambda t:sum(int(j)*i for i,j in zip([3600,60,1],t.split(':')))if re.sub(r'^\\d{2}:[0-5][0-9]:[0-5][0-9]$','',t)==''else None", "def to_seconds(time):\n    try:\n        h, m, s = map(int, time.split(':'))\n        if not (len(time) == 8 and 0 <= m < 60 > s >= 0):\n            return None\n    except ValueError:\n        return None\n    return h * 3600 + m * 60 + s"]