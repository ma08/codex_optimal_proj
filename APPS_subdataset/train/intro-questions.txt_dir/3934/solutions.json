["def pattern(n):\n  return \"\\n\".join([\"\".join([str(y) for y in range(n, x, -1)]) for x in range(n)]);", "def pattern(n):\n  return '\\n'.join([''.join(map(str, list(range(n, x, -1)))) for x in range(n)])\n", "def pattern(n):\n    return('\\n'.join(''.join(str(i) for i in range(n,j,-1)) for j in range(n)))", "def pattern(n):\n    r = range(n, 0, -1)\n    a = [str(i) for i in r]\n    return '\\n'.join(''.join(a[:i]) for i in r)\n", "def pattern(n):\n    s = ''\n    for i in range(n):\n        s += str(n)\n        for ni in range(n-1,i,-1):\n            s += str(ni)\n        if n-1 == i:\n            pass\n        else:\n            s += '\\n'\n    return s", "def pattern(n):\n    result = []\n    for i in range(n, 0, -1):\n        string = \"\"\n        for j in range(n, n-i, -1):\n             string += str(j)\n        result.append(string)\n    return \"\\n\".join(result)", "def pattern(n):\n    return '\\n'.join([''.join([str(n-y) for y in range(n-x+1)]) for x in range(1, n + 1)])", "def pattern(n):\n    return '\\n'.join(''.join(map(str, range(n, stop, -1))) for stop in range(n))", "pattern = lambda n: \"\\n\".join([\"\".join([str(n-x) for x in range(0, n-y)]) for y in range(0, n)]);", "def pattern(n):\n    return '\\n'.join(\"\".join(str(n-j) for j in range(0,n-i+1)) for i in range(1, n+1))\n    # Happy Coding ^_^\n"]