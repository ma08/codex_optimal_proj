["from itertools import count, islice\n\n\nclass Harshad:\n    @staticmethod\n    def is_valid(number):\n        return number % sum(map(int, str(number))) == 0\n    \n    @classmethod\n    def get_next(cls, number):\n        return next(i for i in count(number+1) if cls.is_valid(i))\n    \n    @classmethod\n    def get_series(cls, c, start=0):\n        return list(islice(filter(cls.is_valid, (i for i in count(start+1))), c))", "class Harshad:\n    @staticmethod\n    def is_valid(number):\n        return number % sum(map(int,str(number))) == 0\n        \n    @staticmethod\n    def get_next(number):\n        n = number + 1\n        while not Harshad.is_valid(n):\n            n += 1\n        return n\n    \n    @staticmethod\n    def get_series(count, start=0):\n        result = [Harshad.get_next(start)]\n        for _ in range(count-1):\n            result.append(Harshad.get_next(result[-1]))\n        return result", "# generate the first ~2000 elements\nHARSHAD = [ n for n in range(1, 13000) if n % sum(map(int, str(n))) == 0 ]\n\nfrom bisect import bisect\n\nclass Harshad:\n    @staticmethod\n    def is_valid(n):\n        return n in HARSHAD\n    \n    @staticmethod\n    def get_next(n):\n        return HARSHAD[ bisect(HARSHAD, n) ]\n    \n    @staticmethod\n    def get_series(cnt, n=0):\n        start = bisect(HARSHAD, n)\n        return HARSHAD[ start : start+cnt ]", "class Harshad:\n    @staticmethod\n    def is_valid(number):\n        a =list(str(number))\n        shu = 0\n        for i in a:\n            shu +=int(i)\n        if number % shu ==0:\n            return True\n        else:\n            return False\n    \n    @staticmethod\n    def get_next(number):\n        temp = number\n        while 1:\n            temp +=1\n            if  Harshad.is_valid(temp):\n                return temp\n                    \n            \n    \n    @staticmethod\n    def get_series(count, start=0):\n        result = []\n        for i in range(count):\n            a = Harshad.get_next(start)\n            result.append(a)\n            start = a\n        return result", "class Harshad:\n    @staticmethod\n    def is_valid(number):\n        a=list(str(number))\n        shu=0\n        for i in a:\n            shu+=int(i)\n        return True if not (number%shu) else False\n    \n    @staticmethod\n    def get_next(number):\n        temp=number\n        while 1:\n            temp+=1\n            if Harshad.is_valid(temp):\n                return temp\n    \n    @staticmethod\n    def get_series(count, start=0):\n        result=[]\n        for i in range(count):\n            a=Harshad.get_next(start)\n            result.append(a)\n            start=a\n        return result", "class Harshad(object):\n    \n    harshad = [n for n in range(1, 12534) if n % sum(int(d) for d in str(n)) == 0]\n    \n    @staticmethod\n    def is_valid(number):\n        return number in Harshad.harshad\n    \n    @staticmethod\n    def get_next(number):\n        return next(n for n in Harshad.harshad if n > number)\n    \n    @staticmethod\n    def get_series(count, start=0):\n        i = Harshad.harshad.index(Harshad.get_next(start))\n        return Harshad.harshad[i:i+count]", "from itertools import count, islice\nD = {}\n\nclass Harshad:\n    @staticmethod\n    def is_valid(number):\n        return D.get(number, D.setdefault(number, not number % sum(map(int, str(number)))))\n    \n    @staticmethod\n    def get_next(number):\n        return next(filter(Harshad.is_valid, count(number+1)))\n    \n    @staticmethod\n    def get_series(size, start=0):\n        return list(islice(filter(Harshad.is_valid, count(start+1)), size))", "class Harshad:\n    @staticmethod\n    def get_list(n):\n        '''\u5f97\u5230\u4f4d\u6570\u5b57\u7684\u5217\u8868'''\n        result = []\n        while n:\n            result.append(n % 10)\n            n = n // 10\n        #\u9006\u5e8f\uff0c\u6309\u6b63\u5e38\u7684\u987a\u5e8f\u8fd4\u56de\n        result.reverse()\n        return result\n        # print(result)\n\n    @staticmethod\n    def is_valid(number):\n        if number == 0:\n            return False\n        if number < 10:\n            return True \n        num_list = Harshad.get_list(number)\n        mul = 0\n        for i in num_list:\n            mul += i\n        if number%mul == 0:\n            return True\n        else:\n            return False\n\n    @staticmethod\n    def get_next(number):\n        if number < 10:\n           return number+1\n        number = number + 1\n        while 1:\n            if Harshad.is_valid(number) == True:\n              break\n            number += 1\n        return number\n\n    \n    @staticmethod\n    def get_series(count, start=0):\n        ser_list = []\n        start = start + 1\n        while 1:\n            if Harshad.is_valid(start) == True:\n              ser_list.append(start)\n            if len(ser_list) == count:\n              break\n            start += 1\n              \n        return ser_list\n", "from bisect import bisect_right\n\nclass Harshad:\n    values, values_set = [], set()\n    i = 1\n    while len(values) < 2000:\n        if not i % sum(int(x) for x in str(i)):\n            values.append(i)\n            values_set.add(i)\n        i += 1\n    \n    @staticmethod\n    def is_valid(n):\n        return n in Harshad.values_set\n    \n    @staticmethod\n    def get_next(n):\n        return Harshad.values[bisect_right(Harshad.values, n)]\n    \n    @staticmethod\n    def get_series(n, s=0):\n        x = bisect_right(Harshad.values, s)\n        return Harshad.values[x:x+n]", "class Harshad:\n    @staticmethod\n    def is_valid(number):\n        if number == 0:\n            return False\n        sumdigits = sum(int(d) for d in str(number))\n        return number % sumdigits == 0\n    \n    @staticmethod\n    def get_next(number):\n        while True:\n            number += 1\n            if Harshad.is_valid(number):\n                return number\n    \n    @staticmethod\n    def get_series(count, start = 0):\n        answer = []\n        for _ in range(count):\n            start = Harshad.get_next(start)\n            answer.append(start)\n        return answer\n"]