["def sequence_classifier(arr):\n    if all(arr[i] == arr[i+1] for i in range(len(arr)-1)): return 5\n    if all(arr[i] <  arr[i+1] for i in range(len(arr)-1)): return 1\n    if all(arr[i] <= arr[i+1] for i in range(len(arr)-1)): return 2\n    if all(arr[i] >  arr[i+1] for i in range(len(arr)-1)): return 3\n    if all(arr[i] >= arr[i+1] for i in range(len(arr)-1)): return 4\n    return 0", "TYPE_SEQ = {(1,): 1, (0,1): 2, (-1,):3, (-1,0): 4, (0,): 5}\n\ndef sequence_classifier(arr):\n    countSet = { (a<b) - (a>b) for a,b in zip(arr, arr[1:]) }\n    return TYPE_SEQ.get(tuple(sorted(countSet)), 0)", "def sequence_classifier(arr):\n    strict, increasing, decreasing = True, False, False\n    \n    for i in range(1,len(arr)):\n        if arr[i] == arr[i-1]:\n            strict = False\n        if arr[i] < arr[i-1]:\n            decreasing = True\n        if arr[i] > arr[i-1]:\n            increasing = True\n    \n    return [increasing and decreasing, #unordered\n        strict and increasing,         #strictly increasing\n        not strict and increasing,     #not decreasing\n        strict and decreasing,         #strictly decreasing\n        not strict and decreasing,     #not increasing\n        not increasing and not decreasing].index(True) #constant", "def sequence_classifier(arr):\n    unordered = True\n    strictly_increasing = True\n    not_decreasing = True\n    strictly_decreasing = True\n    not_increasing = True\n    constant = True\n    for i in range(1,len(arr)):\n        if arr[i-1] != arr[i]:\n            constant = False\n        if arr[i-1] <= arr[i]:\n           strictly_decreasing = False\n        if arr[i-1] >= arr[i]:\n            strictly_increasing = False\n        if not arr[i-1] <= arr[i]:\n           not_decreasing = False\n        if not arr[i-1] >= arr[i]:\n            not_increasing = False\n    if constant:\n        return 5\n    if strictly_decreasing:\n        return 3\n    if strictly_increasing:\n        return 1\n    if not_increasing:\n        return 4\n    if not_decreasing:\n        return 2\n    return 0", "def sequence_classifier(arr):\n  f,l=0,len(arr)-1\n  for i in range(0,l): f|= 1 if arr[i]<arr[i+1] else 2 if arr[i]==arr[i+1] else 4\n  return [0,1,5,2,3,0,4,0][f]", "from enum import IntEnum\n\nclass Classification(IntEnum):\n    UNORDERED = 0\n    INCREASING = 1\n    NOT_DECREASING = 2\n    DECREASING = 3\n    NOT_INCREASING = 4\n    CONSTANT = 5\n\ndef sequence_classifier(arr):\n    unordered = True\n    increasing = True\n    not_decreasing = True\n    decreasing = True\n    not_increasing = True\n    constant = True\n    \n    previous_val = None\n    \n    for val in arr:\n        if previous_val is None:\n            previous_val = val\n            continue\n            \n        if increasing and val <= previous_val:\n            increasing = False\n        \n        if not_decreasing and val < previous_val:\n            not_decreasing = False\n        \n        if decreasing and val >= previous_val:\n            decreasing = False\n            \n        if not_increasing and val > previous_val:\n            not_increasing = False\n            \n        if constant and val != previous_val:\n            constant = False\n        \n        if not unordered and not increasing and not not_decreasing and not decreasing and not not_increasing and not constant:\n            return Classification.UNORDERED\n        \n        previous_val = val\n    \n    if constant: \n        return Classification.CONSTANT\n    elif increasing: \n        return Classification.INCREASING\n    elif not_decreasing: \n        return Classification.NOT_DECREASING\n    elif decreasing: \n        return Classification.DECREASING\n    elif not_increasing: \n        return Classification.NOT_INCREASING\n    else:\n        return Classification.UNORDERED\n", "def sequence_classifier(arr):\n    a, l, l_ = sorted(arr), len(arr), len(set(arr))\n    return [[0,[[3,4][arr==a[::-1] and l_!=l],[1,2][arr==a and l_!=l]][arr==a]][arr in [a,a[::-1]]],5][l_==1]", "from operator import *\n\ndef sequence_classifier(arr):\n  for op, code in {eq: 5, gt: 1, lt: 3, ge: 2, le: 4}.items():\n    if all(op(d, 0) for d in map(sub, arr[1:], arr)):\n      return code\n  return 0", "from collections import Counter\n\ndef sequence_classifier(arr):\n    # I would really prefer to define `types` as a set and be able to write \n    # `types -= {1, 3}`, but alas, sets do not preserve insertion order...\n    types = Counter([5, 1, 2, 3, 4, 0])\n    \n    for a, b in zip(arr, arr[1:]):\n        if a == b: del types[1], types[3]\n        if a != b: del types[5]\n        if a < b: del types[3], types[4]\n        if a > b: del types[1], types[2]\n    return next(iter(types))", "def sequence_classifier(arr):\n    if len(set(arr)) == 1: return 5\n    elif sorted(arr) == arr and len(arr) == len(set(arr)): return 1\n    elif sorted(arr) == arr: return 2\n    elif sorted(arr[::-1]) == arr[::-1] and len(arr) == len(set(arr)): return 3\n    elif sorted(arr[::-1]) == arr[::-1]: return 4\n    else: return 0"]