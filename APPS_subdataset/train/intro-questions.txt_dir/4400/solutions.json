["def minimum_steps(arr, n):\n    arr = sorted(arr)\n    s = 0\n    for i,v in enumerate(arr): \n        s += v\n        if s >= n: return i", "from itertools import accumulate\n\ndef minimum_steps(numbers, value):\n    return next(i for i, s in enumerate(accumulate(sorted(numbers))) if s >= value)", "def minimum_steps(numbers, value):\n    return sum(sum(sorted(numbers)[:i+1]) < value for i in range(len(numbers)))\n", "def minimum_steps(n, v):\n    k = sorted(n)[0]\n    for c in range(len(n)):\n        if k >= v:\n            return c\n        else:\n            k += sorted(n)[c + 1]\n", "def minimum_steps(numbers, value):\n    sorted_n = sorted(numbers)\n    n, sum = 0, sorted_n[0]\n    for i in sorted_n[1:]:\n        if sum >= value: break\n        sum += i\n        n += 1\n    return n", "def minimum_steps(num, v):\n  n, s = 0, 0\n  while s < v:\n    s += sorted(num)[n]\n    n += 1\n  return n-1", "from itertools import accumulate\n\ndef minimum_steps(numbers, value):\n    return next(i for i, x in enumerate(accumulate(sorted(numbers))) if x >= value)", "def minimum_steps(numbers, value, s = 0):\n    for i,n in enumerate(sorted(numbers)):\n        s += n\n        if s >= value:\n            return i", "def minimum_steps(num, value):\n    num.sort()\n    return next((i - 1 for i in range(len(num) + 1) if sum(num[:i]) >= value), 0)", "def minimum_steps(numbers, value):\n    numbers.sort()\n    sum = 0\n    operations = 0\n    for x in numbers:\n        sum += x\n        if sum >= value:\n            break\n        operations += 1\n    return operations"]