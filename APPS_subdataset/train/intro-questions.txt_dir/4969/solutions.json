["def tower_builder(n, (w, h)):\n    return [str.center(\"*\" * (i*2-1)*w, (n*2-1)*w) for i in range(1, n+1) for _ in range(h)]", "def tower_builder(n_floors, block_size):\n    w, h = block_size\n    filled_block = '*' * w\n    empty_block = ' ' * w\n    tower = []\n    for n in range(1,n_floors+1):\n        for _ in range(h):\n            tower.append( empty_block * (n_floors - n) + filled_block * (2*n -1) + empty_block * (n_floors - n))\n    return tower", "def tower_builder(floors, (w, h)):\n    width = w * (2 * floors - 1)\n    return [('*' * i).center(width) for i in range(w, width+1, 2*w) for _ in range(h)]", "def tower_builder(n, block):\n    w, h = block\n    return [f\"{'*' * w * (2*i + 1):^{(n*2 - 1) * w}}\" for i in range(n) for _ in range(h)]\n", "def tower_builder(n_floors, block_size):\n    w, h = block_size\n    floors = []\n    n = n_floors\n    for i in range(n_floors):\n        n -= 1\n        for j in range(h):\n            floors.append(' ' * n * w + '*' * (i * 2 + 1) * w + ' ' * n * w)\n\n    return floors", "def tower_builder(n_floors, block_size):\n    w, h = block_size\n    tower = ['*' * (2*n_floors-1)*w]*h\n    base = tower[-1]\n    for f in range(1,n_floors):\n        base = base[:len(base)-2*w]\n        tower += [' '*w*f+base+' '*w*f]*h\n    return tower[::-1]", "def tower_builder(n_floors, block_size):\n    w, h = block_size\n    return [(n_floors*w - i*w)*\" \" + (i*w*2-w)*\"*\" + (n_floors*w - i*w)*\" \" for i in sorted(list(range(1,n_floors+1))*h) ]\n    # build here\n", "def tower_builder(n_floors, block_size):\n    W, H = block_size\n    result, maxi = [], (2*n_floors-1)*W\n    for i in range(W, maxi+1, 2*W):\n        result.extend([('*'*i).center(maxi)]*H)\n    return result", "def tower_builder(n_floors, block_size):\n    tower = list()\n    w, h = block_size\n    l = (2 * n_floors - 1) * w\n    sp = int(l / 2 - w / 2)\n\n    for i in range(n_floors):\n        for j in range(h):\n            tower.append(' ' * sp + '*' * (l - 2 * sp) + ' ' * sp)\n        sp = sp - w\n\n    return tower", "import math\n\ndef tower_builder(n_floors, block_size):\n    w, h = block_size\n    stars = w #how many stars at first\n    height_count = 0 #count for knowing when next floor\n    tower = []    #result\n    for i in range(n_floors*h): \n        ground_floor_stars = w*2*n_floors-w #gets how many stars in the bottom floor, intial width times two sides times floors minus width\n        spaces = \" \" * int((ground_floor_stars - stars)/2) #calculates how many spaces for each floor for each side\n        floor = spaces + '*'*stars + spaces\n        tower.append(floor)\n        height_count += 1\n        if height_count == h:\n            stars += w*2\n            height_count = 0\n    return tower\n        \n\n\n"]