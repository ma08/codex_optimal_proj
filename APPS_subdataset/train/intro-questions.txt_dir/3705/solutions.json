["import math\ndef heron(a,b,c):\n    s=(a+b+c)/2\n    return round(math.sqrt(s*(s-a)*(s-b)*(s - c)),2)", "def heron(a,b,c):\n    return round((1/4)*(4*b*b*c*c-(b*b+c*c-a*a)**2)**(1/2),2)", "heron=lambda*args:(lambda a,b,c,s:round((s*(s-a)*(s-b)*(s-c))**.5,2))(*args,sum(args)/2)", "def heron(*sides):\n    s=sum(sides)/2\n    a,b,c = sides\n    return  round((s * (s - a) * (s - b) * (s - c))**0.5, 2)", "def heron(*l):\n    s = sum(l) / 2\n    return round((s * (s - l[0]) * (s - l[1]) * (s - l[2]))**.5,2)", "import math\ndef heron(*liste):\n    sum = 0\n    for i in liste:\n        sum += i\n    s = sum / 2\n    return round(math.sqrt(s*(s - liste[0])*(s - liste[1])*(s - liste[2])), 2)\n", "import math\ndef heron(a,b,c):\n    d=(a+b+c)/2\n    return round(math.sqrt(d*(d-a)*(d-b)*(d-c)),2)", "import math\ndef heron(a, b, c):\n    p = (a + b + c) / 2\n    return round(math.sqrt(p * (p-a) * (p-b) * (p-c)), 2)", "def heron(a,b,c):\n    s = sum([a,b,c]) / 2\n    return round((s * (s - a) * (s - b) * (s - c)) ** 0.5, 2)", "import math\n\ndef heron(a,b,c):\n\n    s = (a+b+c)/2\n    \n    v = math.sqrt(s*(s-a)*(s-b)*(s-c))\n    \n    return round(v,2)\n    \n    \n"]