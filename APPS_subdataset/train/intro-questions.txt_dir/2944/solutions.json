["ELEMENTS = ['H', 'He', 'Li', 'Be', 'B', 'C', 'N', 'O', 'F', 'Ne', 'Na', 'Mg', 'Al', 'Si', 'P', 'S', 'Cl', 'Ar', 'K', 'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', 'Y', 'Zr', 'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', 'Sb', 'Te', 'I', 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd', 'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb', 'Lu', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Ac', 'Th', 'Pa', 'U', 'Np', 'Pu', 'Am', 'Cm', 'Bk', 'Cf', 'Es', 'Fm', 'Md', 'No', 'Lr', 'Rf', 'Db', 'Sg', 'Bh', 'Hs', 'Mt', 'Ds', 'Rg', 'Cn', 'Nh', 'Fl', 'Mc', 'Lv', 'Ts', 'Og']\nEXCEPTIONS = {\n    'Cr': ['Ar', '4s1 3d5'],\n    'Cu': ['Ar', '4s1 3d10'],\n    'Nb': ['Kr', '5s1 4d4'],\n    'Mo': ['Kr', '5s1 4d5'],\n    'Ru': ['Kr', '5s1 4d7'],\n    'Rh': ['Kr', '5s1 4d8'],\n    'Pd': ['Kr', '5s0 4d10'],\n    'Ag': ['Kr', '5s1 4d10'],\n    'La': ['Xe', '6s2 4f0 5d1'],\n    'Ce': ['Xe', '6s2 4f1 5d1'],\n    'Gd': ['Xe', '6s2 4f7 5d1'],\n    'Pt': ['Xe', '6s1 4f14 5d9'],\n    'Au': ['Xe', '6s1 4f14 5d10'],\n    'Ac': ['Rn', '7s2 5f0 6d1'],\n    'Th': ['Rn', '7s2 5f0 6d2'],\n    'Pa': ['Rn', '7s2 5f2 6d1'],\n    'U' : ['Rn', '7s2 5f3 6d1'],\n    'Np': ['Rn', '7s2 5f4 6d1'],\n    'Cm': ['Rn', '7s2 5f7 6d1'],\n}\nORBITALS = \"spdfg\"\nELT_TO_Z = {elt:i for i,elt in enumerate(ELEMENTS,1)}\nfor arr in list(EXCEPTIONS.values()):\n    arr[1] = [ (int(s[0]), ORBITALS.find(s[1]), s[2:]) for s in arr[1].split(' ') ]\n\n\ndef get_electron_configuration(element):\n    elt,repl = EXCEPTIONS.get(element, (element,[]) )\n    z,nl,config = ELT_TO_Z[elt], 0, {}                  # n: principal quantum number / l: secondary qunatum number (minus 1) / nl: n+l\n    while z:\n        nl += 1\n        for l in range(nl-1>>1, -1, -1):\n            nE = min(z, 2+l*4)\n            config[ (nl-l,l) ] = nE\n            z -= nE\n            if not z: break\n    \n    for a,b,n in repl: config[(a,b)] = n\n    \n    s = \" \".join( f'{ k[0] }{ ORBITALS[k[1]] }{ n }' for k,n in sorted(config.items()))\n    return f'{ element } -> { s }'\n", "ELEMENTS = ['H', 'He', 'Li', 'Be', 'B', 'C', 'N', 'O', 'F', 'Ne', 'Na', 'Mg', 'Al', 'Si', 'P', 'S', 'Cl', 'Ar', 'K', 'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', 'Y', 'Zr', 'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', 'Sb', 'Te', 'I', 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd', 'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb', 'Lu', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Ac', 'Th', 'Pa', 'U', 'Np', 'Pu', 'Am', 'Cm', 'Bk', 'Cf', 'Es', 'Fm', 'Md', 'No', 'Lr', 'Rf', 'Db', 'Sg', 'Bh', 'Hs', 'Mt', 'Ds', 'Rg', 'Cn', 'Nh', 'Fl', 'Mc', 'Lv', 'Ts', 'Og']\nimport re\n\nexc = '''Cr -> ...3d5 4s1\nCu -> ...3d10 4s1\nNb -> ...4d4 5s1\nMo -> ...4d5 5s1\nRu -> ...4d7 5s1\nRh -> ...4d8 5s1\nPd -> ...4d10 5s0\nAg -> ...4d10 5s1\nLa -> ...4f0 5d1\nCe -> ...4f1 5d1\nGd -> ...4f7 5d1 6s2\nPt -> ...4f14 5d9 6s1\nAu -> ...4f14 5d10 6s1\nAc -> ...5f0 6d1 7s2\nTh -> ...5f0 6d2 7s2\nPa -> ...5f2 6d1 7s2\nU  -> ...5f3 6d1 7s2\nNp -> ...5f4 6d1 7s2\nCm -> ...5f7 6d1 7s2'''\nexceptions = {i.split()[0]: {j[:2]: j[2:] for j in i.split('...')[1].split()} for i in exc.split('\\n')}\n\ndef get_electron_configuration(element):\n    names = re.findall(r'..', '1s2s2p3s3p4s3d4p5s4d5p6s4f5d6p7s5f6d7p8s')\n    values = [2, 2, 6, 2, 6, 2, 10, 6, 2, 10, 6, 2, 14, 10, 6, 2, 14, 10, 6, 2]\n    N = ELEMENTS.index(element) + 1\n    res = {}\n    while N > 0:\n        v = min(values.pop(0), N)\n        res[names.pop(0)] = str(v)\n        N -= v\n    if element in exceptions:\n        res.update(exceptions[element])\n    res = [i+j for i,j in zip(res.keys(), res.values())]\n    res.sort(key = lambda x: (x[0], ['s', 'p', 'd', 'f'].index(x[1])))\n    return '{} -> {}'.format(element, ' '.join(res))", "ELEMENTS = ['H', 'He', 'Li', 'Be', 'B', 'C', 'N', 'O', 'F', 'Ne', 'Na', 'Mg', 'Al', 'Si', 'P', 'S', 'Cl', 'Ar', 'K', 'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', 'Y', 'Zr', 'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', 'Sb', 'Te', 'I', 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd', 'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb', 'Lu', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Ac', 'Th', 'Pa', 'U', 'Np', 'Pu', 'Am', 'Cm', 'Bk', 'Cf', 'Es', 'Fm', 'Md', 'No', 'Lr', 'Rf', 'Db', 'Sg', 'Bh', 'Hs', 'Mt', 'Ds', 'Rg', 'Cn', 'Nh', 'Fl', 'Mc', 'Lv', 'Ts', 'Og']\ndef get_electron_configuration(a):\n    d = {\"s\":2, \"p\":6, \"d\":10, \"f\":14}\n    o = [[x, d[x[1]]] for x in [\"1s\",\"2s\",\"2p\",\"3s\",\"3p\",\"4s\",\"3d\",\"4p\",\"5s\",\"4d\",\"5p\",\"6s\",\"4f\",\"5d\",\"6p\",\"7s\",\"5f\",\"6d\",\"7p\"]][::-1]\n    exceptions = {\"Cr\":[2, \"4s1 3d5\"], \"Cu\":[2, \"4s1 3d10\"], \"Nb\":[2, \"5s1 4d4\"], \"Mo\":[2, \"5s1 4d5\"], \"Ru\":[2, \"5s1 4d7\"], \"Rh\":[2, \"5s1 4d8\"], \"Pd\":[2, \"5s0 4d10\"], \"Ag\":[2, \"5s1 4d10\"], \"La\":[1, \"4f0 5d1\"], \"Ce\":[1, \"4f1 5d1\"], \"Gd\":[1, \"4f7 5d1\"], \"Pt\":[3, \"6s1 4f14 5d9\"], \"Au\":[3, \"6s1 4f14 5d10\"], \"Ac\":[1, \"5f0 6d1\"], \"Th\":[1, \"5f0 6d2\"], \"Pa\":[1, \"5f2 6d1\"], \"U\":[1, \"5f3 6d1\"], \"Np\":[1, \"5f4 6d1\"], \"Cm\":[1, \"5f7 6d1\"]}\n    r, n = [], ELEMENTS.index(a) + 1\n    while n > 0:\n        s, m = o.pop()\n        x = min(n, m)\n        n -= x\n        r.append(\"{}{}\".format(s, x))\n    if a in exceptions:\n        m, s = exceptions[a]\n        r = r[:-m] + s.split()\n    return \"{} -> {}\".format(a, \" \".join(sorted(r, key=lambda x: (x[0], d[x[1]]))))", "ELEMENTS = ['H', 'He', 'Li', 'Be', 'B', 'C', 'N', 'O', 'F', 'Ne', 'Na', 'Mg', 'Al', 'Si', 'P', 'S', 'Cl', 'Ar', 'K', 'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', 'Y', 'Zr', 'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', 'Sb', 'Te', 'I', 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd', 'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb', 'Lu', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Ac', 'Th', 'Pa', 'U', 'Np', 'Pu', 'Am', 'Cm', 'Bk', 'Cf', 'Es', 'Fm', 'Md', 'No', 'Lr', 'Rf', 'Db', 'Sg', 'Bh', 'Hs', 'Mt', 'Ds', 'Rg', 'Cn', 'Nh', 'Fl', 'Mc', 'Lv', 'Ts', 'Og']\n# Tuple of shell loading.\n# (<orbit>, <final count>, <code>)\n# Codes are:\n#    -2 - Remove one electron at a time and ultimately remove the shell so we don't get something like 5d0 for this one.\n#    -1 - Remove electrons in this shell one at a time.  Don't remove the shell.\n#     0 - Add this shell with zero electrons so that it does show up as something like 5d0 in the sequence.\n#     1 - Add 1 at a time\n#     2 - Add but the first one is a double skip because of electrons dropped before.\n\nshells = (\n    (\"1s\", 2, 1),\n    (\"2s\", 2, 1),\n    (\"2p\", 6, 1),\n    (\"3s\", 2, 1),\n    (\"3p\", 6, 1),\n    (\"4s\", 2, 1),\n    (\"3d\", 3, 1),\n    (\"4s\", 1, -1),\n    (\"3d\", 5, 2),\n    (\"4s\", 2, 1),\n    (\"3d\", 8, 1),\n    (\"4s\", 1, -1), # Cu\n    (\"3d\", 10, 1), # Cu\n    (\"4s\", 2, 1), # Zn\n    (\"4p\", 6, 1),\n    (\"5s\", 2, 1),\n    (\"4d\", 2, 1),\n    (\"5s\", 1, -1),\n    (\"4d\", 5, 2),\n    (\"5s\", 2, 1),\n    (\"5s\", 1, -1),\n    (\"4d\", 8, 2),\n    (\"5s\", 0, -1),\n    (\"4d\", 10, 2),\n    (\"5s\", 2, 1),\n    (\"5p\", 6, 1),\n    (\"6s\", 2, 2), # Ba\n    (\"4f\", 0, 0), # La\n    (\"5d\", 1, 1), # La\n    (\"4f\", 1, 1), # Ce\n    (\"5d\", 0, -2), #Pr\n    (\"4f\", 7, 2), # Eu\n    (\"5d\", 1, 1),\n    (\"5d\", 0, -2),\n    (\"4f\", 14, 1), # Yb\n    (\"5d\", 7, 1), # IR\n    (\"6s\", 1, -1), # Pt\n    (\"5d\", 10, 1), # Au\n    (\"6s\", 2, 1), # Hg\n    (\"6p\", 6, 1), # Rn\n    (\"7s\", 2, 1), # Ra\n    (\"5f\", 0, 0), # Ac\n    (\"6d\", 2, 1), # Th\n    (\"6d\", 1, -1), # Pa\n    (\"5f\", 4, 2), # Np\n    (\"6d\", 0, -2), #Pu\n    (\"5f\", 7, 2), # Am\n    (\"6d\", 1, 1), # Cm\n    (\"6d\", 0, -2), # Bk\n    (\"5f\", 14, 2), # No\n    (\"6d\", 1, 1), # Lr\n#  These exceptions should exist per https://ptable.com/ but they don't in the tests.\n#    (\"7p\", 1, 1), # Lr\n#    (\"7p\", 0, -2), # Rf\n#    (\"6d\", 7, 2), # Mt\n#    (\"7s\", 1, -1), # Ds\n    (\"6d\", 9, 2), # Ds\n    (\"7s\", 2, 1), # Rg\n    (\"6d\", 10, 1), # Cn\n    (\"7p\", 6, 1)\n    )\n    \n# Order of shells.    \nshell_seq = [\"1s\", \"2s\", \"2p\", \"3s\", \"3p\", \"3d\", \"4s\", \"4p\", \"4d\", \"4f\", \"5s\", \"5p\", \"5d\", \"5f\", \"6s\", \"6p\", \"6d\", \"7s\", \"7p\"]\n    \ndef get_electron_configuration(element):\n    # Create our electron shell dictionary\n    e = {}\n    # Get the atomic number\n    a = ELEMENTS.index(element)+1\n    # Keep track of the total number electrons.  This is easier/faster than summing up the numbers in the dict.\n    t = 0\n    # Loop through the shells\n    for o, cnt, code in shells:\n        # If we reached the atomic number, we stop.\n        if t == a:\n            break\n        else:\n            # If orbit isn't in the dict, add it.\n            # Note:  Even if code=0 this portion will add the orbit so it will show up in \"o in e\" below when building the o_list.\n            if o not in e: e[o] = 0\n            # If the code is -2, count down and delete the orbit.\n            if code == -2:\n                while e[o] > cnt:\n                    e[o] -= 1\n                    t -= 1\n                del(e[o])\n            # If the code is -1, count down.\n            elif code == -1:\n                while e[o] > cnt:\n                    e[o] -= 1\n                    t -= 1\n            # IF the code is positve, count up.  We just use the 2 for ease in building the table above.\n            # Nothing special is required for code=2 vs code=1\n            elif code > 0:\n                while t != a and e[o] < cnt:\n                    e[o] += 1\n                    t += 1\n    \n    # Combine the orbits and counts.  Use the shell_seq to get the order correct and don't include shells that aren't in e.\n    o_list = [f\"{o}{e[o]}\" for o in shell_seq if o in e]\n    # Join the list and output.\n    return f\"{element} -> {' '.join(o_list)}\"\n", "ELEMENTS = ['H', 'He', 'Li', 'Be', 'B', 'C', 'N', 'O', 'F', 'Ne', 'Na', 'Mg', 'Al', 'Si', 'P', 'S', 'Cl', 'Ar', 'K', 'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', 'Y', 'Zr', 'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', 'Sb', 'Te', 'I', 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd', 'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb', 'Lu', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Ac', 'Th', 'Pa', 'U', 'Np', 'Pu', 'Am', 'Cm', 'Bk', 'Cf', 'Es', 'Fm', 'Md', 'No', 'Lr', 'Rf', 'Db', 'Sg', 'Bh', 'Hs', 'Mt', 'Ds', 'Rg', 'Cn', 'Nh', 'Fl', 'Mc', 'Lv', 'Ts', 'Og']\ndef get_electron_configuration(element):\n    elems = {\n        \"Cr\": (\"3d5 4s1\"),\n        \"Cu\": (\"3d10 4s1\"), \n        \"Nb\": (\"4d4 5s1\"),\n        \"Mo\" :(\"4d5 5s1\"),\n        'Ru' :(\"4d7 5s1\"),\n        'Rh' :(\"4d8 5s1\"),\n        'Pd' :(\"4d10 5s0\"),\n        'Ag' :(\"4d10 5s1\"),\n        'La' :(\"4f0 5d1\"),\n        'Ce' :(\"4f1 5d1\"),\n        'Gd' :(\"4f7 5d1 6s2\"),\n        'Pt' :(\"4f14 5d9 6s1\"),\n        'Au' :(\"4f14 5d10 6s1\"),\n        'Ac' :(\"5f0 6d1 7s2\"),\n        'Th' :(\"5f0 6d2 7s2\"),\n        'Pa' :(\"5f2 6d1 7s2\"),\n        'U'  :(\"5f3 6d1 7s2\"),\n        'Np' :(\"5f4 6d1 7s2\"),\n        'Cm' :(\"5f7 6d1 7s2\"),\n    }\n    elem_config = elems.get(element)\n    list=['Cr','Cu','Nb','Mo','Ru','Rh','Pd','Ag',\n          'La','Ce','Gd','Pt','Au','Ac','Th','Pa','U','Np','Cm']\n    s=[]\n    c=0\n    a=0\n    for x in range(len(ELEMENTS)):\n        if element == ELEMENTS[x]:\n            v=x+1\n    if element in list:\n        s=elem_config.split(' ')\n        for b in s:\n            v-=int(b[2:])\n    while v>0:\n        c+=1\n        if v>=2:\n            s.append(str(c)+\"s2\")\n            v-=2\n        elif 0<v<2:\n            s.append(str(c)+\"s\"+str(v))\n            v-=v\n        if v>=6 and c>1:\n            s.append(str(c)+\"p6\")\n            v-=6\n        elif 0<v<6 and c>1:\n            s.append(str(c)+\"p\"+str(v))\n            v-=v\n        if v>=12 and c>2:\n            s.append(str(c)+\"d10\")\n            v-=10      \n        elif 2<v<=12 and c>2:\n            s.append(str(c)+\"d\"+str(v-2))\n            v-=v-2\n        if v>=24 and c>3:\n            s.append(str(c)+\"f14\")\n            v-=14      \n        elif 10<v<24 and c>3:\n            s.append(str(c)+\"f\"+str(v-10))\n            v-=v-10\n    s.sort(key=lambda p: p[0] + {\"s\":\"0\",\"p\":\"1\",\"d\":\"2\",\"f\":\"3\"}[p[1]])\n    s=\" \".join(s)\n    return element+\" -> \"+s", "ELEMENTS = ['H', 'He', 'Li', 'Be', 'B', 'C', 'N', 'O', 'F', 'Ne', 'Na', 'Mg', 'Al', 'Si', 'P', 'S', 'Cl', 'Ar', 'K', 'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', 'Y', 'Zr', 'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', 'Sb', 'Te', 'I', 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd', 'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb', 'Lu', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Ac', 'Th', 'Pa', 'U', 'Np', 'Pu', 'Am', 'Cm', 'Bk', 'Cf', 'Es', 'Fm', 'Md', 'No', 'Lr', 'Rf', 'Db', 'Sg', 'Bh', 'Hs', 'Mt', 'Ds', 'Rg', 'Cn', 'Nh', 'Fl', 'Mc', 'Lv', 'Ts', 'Og']\norder=['1s','2s','2p','3s','3p','4s','3d','4p','5s','4d','5p','6s',\n       '4f','5d','6p','7s','5f','6d','7p']\nhold={'s':2,'p':6,'d':10,'f':14}\nspecial={\n    'Cr':['3d5', '4s1'], 'Cu':['3d10', '4s1'], 'Nb':['4d4', '5s1'],\n    'Mo':['4d5', '5s1'], 'Ru':['4d7', '5s1'], 'Rh':['4d8', '5s1'],\n    'Pd':['4d10', '5s0'], 'Ag':['4d10', '5s1'], 'La':['4f0', '5d1'],\n    'Ce':['4f1', '5d1'], 'Gd':['4f7', '5d1', '6s2'], 'Pt':['4f14', '5d9', '6s1'],\n    'Au':['4f14', '5d10', '6s1'], 'Ac':['5f0', '6d1', '7s2'],\n    'Th':['5f0', '6d2', '7s2'], 'Pa':['5f2', '6d1', '7s2'],\n    'U':['5f3', '6d1', '7s2'], 'Np':['5f4', '6d1', '7s2'],\n    'Cm':['5f7', '6d1', '7s2']\n}\ndef get_electron_configuration(element):\n    e=ELEMENTS.index(element)+1\n    r=[]\n    for o in order:\n        r.append(o+str(min(e,hold[o[1]])))\n        e-=hold[o[1]]\n        if e<=0:\n            break\n    if element in special:\n        for o2 in special[element]:\n            flag=False\n            for i in range(len(r)):\n                if r[i][:2]==o2[:2]:\n                    r[i]=o2\n                    flag=True\n                    break\n            if not flag:\n                r.append(o2)\n    return '{} -> {}'.format(element,' '.join(sorted(r,key=lambda x:(x[0],'spdf'.index(x[1])))))    ", "ELEMENTS = ['H', 'He', 'Li', 'Be', 'B', 'C', 'N', 'O', 'F', 'Ne', 'Na', 'Mg', 'Al', 'Si', 'P', 'S', 'Cl', 'Ar', 'K', 'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', 'Y', 'Zr', 'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', 'Sb', 'Te', 'I', 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd', 'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb', 'Lu', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Ac', 'Th', 'Pa', 'U', 'Np', 'Pu', 'Am', 'Cm', 'Bk', 'Cf', 'Es', 'Fm', 'Md', 'No', 'Lr', 'Rf', 'Db', 'Sg', 'Bh', 'Hs', 'Mt', 'Ds', 'Rg', 'Cn', 'Nh', 'Fl', 'Mc', 'Lv', 'Ts', 'Og']\ndef get_electron_configuration(element):\n    atomic_no, n = ELEMENTS.index(element)+1, 0\n    orbitals = {'1s':0,'2s':0,'2p':0,'3s':0,'3p':0,'3d':0,'4s':0,'4p':0,'4d':0,'4f':0,'5s':0,'5p':0,'5d':0,'5f':0,'6s':0,'6p':0,'6d':0,'6f':0,'7s':0,'7p':0,'7d':0,'7f':0}\n    exceptions = {'Cr' : 'Cr -> 1s2 2s2 2p6 3s2 3p6 3d5 4s1','Cu': 'Cu -> 1s2 2s2 2p6 3s2 3p6 3d10 4s1','Nb': 'Nb -> 1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d4 5s1','Mo':'Mo -> 1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d5 5s1','Ru': 'Ru -> 1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d7 5s1','Rh': 'Rh -> 1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d8 5s1','Pd': 'Pd -> 1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s0','Ag': 'Ag -> 1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 5s1','La': 'La -> 1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 4f0 5s2 5p6 5d1 6s2','Ce': 'Ce -> 1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 4f1 5s2 5p6 5d1 6s2','Gd': 'Gd -> 1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 4f7 5s2 5p6 5d1 6s2','Pt': 'Pt -> 1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 4f14 5s2 5p6 5d9 6s1','Au': 'Au -> 1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 4f14 5s2 5p6 5d10 6s1','Ac': 'Ac -> 1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 4f14 5s2 5p6 5d10 5f0 6s2 6p6 6d1 7s2','Th': 'Th -> 1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 4f14 5s2 5p6 5d10 5f0 6s2 6p6 6d2 7s2','Pa': 'Pa -> 1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 4f14 5s2 5p6 5d10 5f2 6s2 6p6 6d1 7s2','U': 'U -> 1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 4f14 5s2 5p6 5d10 5f3 6s2 6p6 6d1 7s2','Np': 'Np -> 1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 4f14 5s2 5p6 5d10 5f4 6s2 6p6 6d1 7s2','Cm': 'Cm -> 1s2 2s2 2p6 3s2 3p6 3d10 4s2 4p6 4d10 4f14 5s2 5p6 5d10 5f7 6s2 6p6 6d1 7s2'}\n    if element in exceptions:\n        return exceptions[element]\n    while n < atomic_no:\n        if n < 2:\n            orbitals['1s'] += 1\n        elif n < 4:\n            orbitals['2s'] += 1\n        elif n < 10:\n            orbitals['2p'] += 1\n        elif n < 12:\n            orbitals['3s'] += 1\n        elif n < 18:\n            orbitals['3p'] += 1\n        elif n < 20:\n            orbitals['4s'] += 1\n        elif n < 30:\n            orbitals['3d'] += 1\n        elif n < 36:\n            orbitals['4p'] += 1\n        elif n < 38:\n            orbitals['5s'] += 1\n        elif n < 48:\n            orbitals['4d'] += 1\n        elif n < 54:\n            orbitals['5p'] += 1\n        elif n < 56:\n            orbitals['6s'] += 1\n        elif n < 70:\n            orbitals['4f'] += 1\n        elif n < 80:\n            orbitals['5d'] += 1\n        elif n < 86:\n            orbitals['6p'] += 1\n        elif n < 88:\n            orbitals['7s'] += 1\n        elif n < 102:\n            orbitals['5f'] += 1\n        elif n < 112:\n            orbitals['6d'] += 1\n        elif n < 118:\n            orbitals['7p'] += 1\n        n += 1\n    st = ''\n    orbs = ['1s','2s','2p','3s','3p','3d','4s','4p','4d','4f','5s','5p','5d','5f','6s','6p','6d','6f','7s','7p','7d','7f']\n    for x in orbs:\n        if orbitals[x] != 0:\n            st += x+str(orbitals[x])+' '\n    return element+' -> '+st.rstrip()\n    \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n", "ELEMENTS = ['H', 'He', 'Li', 'Be', 'B', 'C', 'N', 'O', 'F', 'Ne', 'Na', 'Mg', 'Al', 'Si', 'P', 'S', 'Cl', 'Ar', 'K', 'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', 'Y', 'Zr', 'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', 'Sb', 'Te', 'I', 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd', 'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb', 'Lu', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Ac', 'Th', 'Pa', 'U', 'Np', 'Pu', 'Am', 'Cm', 'Bk', 'Cf', 'Es', 'Fm', 'Md', 'No', 'Lr', 'Rf', 'Db', 'Sg', 'Bh', 'Hs', 'Mt', 'Ds', 'Rg', 'Cn', 'Nh', 'Fl', 'Mc', 'Lv', 'Ts', 'Og']\ndef orbital_sort(s):\n    return s.replace('s','1').replace('p','2').replace('d','3').replace('f','4')\n\ndef get_electron_configuration(element):\n    atomic = ELEMENTS.index(element) + 1\n    \n    filling = ['1s', '2s', '2p', '3s', '3p', '4s', '3d', '4p', '5s', '4d', '5p', '6s', '4f', '5d', '6p', '7s', '5f', '6d', '7p', '8s']\n    \n    replace_d ={\n'Cr':'3d5 4s1',\n'Cu':'3d10 4s1',\n'Nb':'4d4 5s1',\n'Mo':'4d5 5s1',\n'Ru':'4d7 5s1',\n'Rh':'4d8 5s1',\n'Pd':'4d10 5s0',\n'Ag':'4d10 5s1',\n'La':'4f0 5s2 5p6 5d1 6s2',\n'Ce':'4f1 5s2 5p6 5d1 6s2',\n'Gd':'4f7 5s2 5p6 5d1 6s2',\n'Pt':'4f14 5s2 5p6 5d9 6s1',\n'Au':'4f14 5s2 5p6 5d10 6s1',\n'Ac':'5f0 6s2 6p6 6d1 7s2',\n'Th':'5f0 6s2 6p6 6d2 7s2',\n'Pa':'5f2 6s2 6p6 6d1 7s2',\n'U':'5f3 6s2 6p6 6d1 7s2',\n'Np':'5f4 6s2 6p6 6d1 7s2',\n'Cm':'5f7 6s2 6p6 6d1 7s2'\n}\n    \n    result = []\n    \n    while atomic > 0:\n        orbital = filling.pop(0)\n        if orbital[-1] == 's':\n            if atomic > 1:\n                result.append(orbital + '2')\n                atomic -= 2\n            else:\n                result.append(orbital + '1')\n                atomic -= 1\n        elif orbital[-1] == 'p':\n            if atomic > 5:\n                result.append(orbital + '6')\n                atomic -= 6\n            else:\n                result.append(orbital + str(atomic))\n                atomic -= atomic\n        elif orbital[-1] == 'd':\n            if atomic > 9:\n                result.append(orbital + '10')\n                atomic -= 10\n            else:\n                result.append(orbital + str(atomic))\n                atomic -= atomic\n        elif orbital[-1] == 'f':\n            if atomic > 13:\n                result.append(orbital + '14')\n                atomic -= 14\n            else:\n                result.append(orbital + str(atomic))\n                atomic -= atomic\n    \n    result.sort(key=orbital_sort)\n    result = f\"{element} -> {' '.join(result)}\"\n    \n    print(element)\n    if element in replace_d:\n        i = result.index(replace_d[element][:2])\n        print((i, result[:i], replace_d[element]))\n        result = result[:i] + replace_d[element]\n    \n    return result\n", "ELEMENTS = ['H', 'He', 'Li', 'Be', 'B', 'C', 'N', 'O', 'F', 'Ne', 'Na', 'Mg', 'Al', 'Si', 'P', 'S', 'Cl', 'Ar', 'K', 'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', 'Y', 'Zr', 'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', 'Sb', 'Te', 'I', 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd', 'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb', 'Lu', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Ac', 'Th', 'Pa', 'U', 'Np', 'Pu', 'Am', 'Cm', 'Bk', 'Cf', 'Es', 'Fm', 'Md', 'No', 'Lr', 'Rf', 'Db', 'Sg', 'Bh', 'Hs', 'Mt', 'Ds', 'Rg', 'Cn', 'Nh', 'Fl', 'Mc', 'Lv', 'Ts', 'Og']\ndef get_electron_configuration(element):\n  '''\n  Return the electron configuration of the supplied element.\n  '''\n  #ELEMENTS\n  # array is an array of the element symbols in order by\n  # atomic number. The atomic number is 1 plus the index in the array\n  # For example:\n  #  ELEMENTS = ['H', 'He', 'Li', ...]\n  \n  #exceptions array\n  # Elements whose electron fill order are not normal.  Format is\n  # <element>:[<the remaining orbitals/electrons>]\n  exceptions = \\\n  {\"Cr\":[\"3d5\", \"4s1\"],\n  \"Cu\":[\"3d10\", \"4s1\"],\n  \"Nb\":[\"4d4\", \"5s1\"],\n  \"Mo\":[\"4d5\", \"5s1\"],\n  \"Ru\":[\"4d7\", \"5s1\"],\n  \"Rh\":[\"4d8\", \"5s1\"],\n  \"Pd\":[\"4d10\", \"5s0\"],\n  \"Ag\":[\"4d10\", \"5s1\"],\n  \"La\":[\"4f0\", \"5d1\"],\n  \"Ce\":[\"4f1\", \"5d1\"],\n  \"Gd\":[\"4f7\", \"5d1\", \"6s2\"],\n  \"Pt\":[\"4f14\", \"5d9\", \"6s1\"],\n  \"Au\":[\"4f14\", \"5d10\", \"6s1\"],\n  \"Ac\":[\"5f0\", \"6d1\", \"7s2\"],\n  \"Th\":[\"5f0\", \"6d2\", \"7s2\"],\n  \"Pa\":[\"5f2\", \"6d1\", \"7s2\"],\n  \"U\":[\"5f3\", \"6d1\", \"7s2\"],\n  \"Np\":[\"5f4\", \"6d1\", \"7s2\"],\n  \"Cm\":[\"5f7\", \"6d1\", \"7s2\"]}\n\n  #orbitals array\n  # Orbitals are listed in order they are normally filled.  Also listed\n  # with their maximum fill\n  orbitals = [\"1s2\", \"2s2\", \"2p6\", \"3s2\", \"3p6\", \"4s2\", \"3d10\", \"4p6\", \"5s2\",\n             \"4d10\", \"5p6\", \"6s2\", \"4f14\", \"5d10\", \"6p6\", \"7s2\", \"5f14\",\n             \"6d10\", \"7p6\", \"8s2\"]\n\n  atomicNumber = ELEMENTS.index(element) + 1\n  numElectrons = atomicNumber\n  orbitalIndex = 0        #Index into the array of orbitals\n  config = []             #List of the orbitals with electrons\n  \n  while numElectrons > 0: #If orbital is filled\n    if numElectrons - int(orbitals[orbitalIndex][2:]) > 0:\n      config.append(orbitals[orbitalIndex])\n    else:                 # otherwise add the remaining e's to this orbital\n      config.append(orbitals[orbitalIndex][:2] + str(numElectrons))\n      \n    numElectrons -= int(orbitals[orbitalIndex][2:])\n    orbitalIndex += 1\n\n  if element in list(exceptions.keys()):  #Abnormal electron fill\n    end = exceptions[element]       #Retrieve the config of the last few e's\n    e = 0                           #The number of abnormal e's\n    for orb in end:                 # sum them\n      e += int(orb[2:])\n    while e > 0:                    #Remove the orbitals at end that have\n      e -= int(config.pop()[2:])    # than number of electrons\n\n    config.extend(end)              #Add back the abnormal electon fill\n\n  return element + \" -> \" + \" \".join(sorted(config, key=lambda x : x[0]))\n", "ELEMENTS = ['H', 'He', 'Li', 'Be', 'B', 'C', 'N', 'O', 'F', 'Ne', 'Na', 'Mg', 'Al', 'Si', 'P', 'S', 'Cl', 'Ar', 'K', 'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', 'Y', 'Zr', 'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', 'Sb', 'Te', 'I', 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd', 'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb', 'Lu', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Ac', 'Th', 'Pa', 'U', 'Np', 'Pu', 'Am', 'Cm', 'Bk', 'Cf', 'Es', 'Fm', 'Md', 'No', 'Lr', 'Rf', 'Db', 'Sg', 'Bh', 'Hs', 'Mt', 'Ds', 'Rg', 'Cn', 'Nh', 'Fl', 'Mc', 'Lv', 'Ts', 'Og']\ndef get_electron_configuration(element):       \n    n=ELEMENTS.index(element)+1\n    import re\n    a= 'Cr -> ...3d5 4s1 Cu -> ...3d10 4s1 Nb -> ...4d4 5s1 Mo -> ...4d5 5s1 Ru -> ...4d7 5s1 Rh -> ...4d8 5s1 Pd -> ...4d10 5s0 Ag -> ...4d10 5s1 La -> ...4f0 5d1 Ce -> ...4f1 5d1 Gd -> ...4f7 5d1 6s2 Pt -> ...4f14 5d9 6s1 Au -> ...4f14 5d10 6s1 Ac -> ...5f0 6d1 7s2 Th -> ...5f0 6d2 7s2 Pa -> ...5f2 6d1 7s2 U  -> ...5f3 6d1 7s2 Np -> ...5f4 6d1 7s2 Cm -> ...5f7 6d1 7s2'\n    a='Ni 3d8 4s2 Cr 3d5 4s1 Cu 3d10 4s1 Nb 4d4 5s1 Mo 4d5 5s1 Ru 4d7 5s1 Rh 4d8 5s1 Pd 4d10 5s0 Ag 4d10 5s1 La 4f0 5d1 Ce 4f1 5d1 Gd 4f7 5d1 6s2 Pt 4f14 5d9 6s1 Au 4f14 5d10 6s1 Ac 5f0 6d1 7s2 Th 5f0 6d2 7s2 Pa 5f2 6d1 7s2 U  5f3 6d1 7s2 Np 5f4 6d1 7s2 Cm 5f7 6d1 7s2'\n    a={'Ni': ['Ni', '3d8', '4s2'], 'Ac': ['Ac', '5f0', '6d1', '7s2'], 'Pa': ['Pa', '5f2', '6d1', '7s2'], 'Pt': ['Pt', '4f14', '5d9', '6s1'], 'Ag': ['Ag', '4d10', '5s1'], 'Ru': ['Ru', '4d7', '5s1'], 'Nb': ['Nb', '4d4', '5s1'], 'La': ['La', '4f0', '5d1'], 'U': ['U', '5f3', '6d1', '7s2'], 'Ce': ['Ce', '4f1', '5d1'], 'Th': ['Th', '5f0', '6d2', '7s2'], 'Gd': ['Gd', '4f7', '5d1', '6s2'], 'Au': ['Au', '4f14', '5d10', '6s1'], 'Cm': ['Cm', '5f7', '6d1', '7s2'], 'Pd': ['Pd', '4d10', '5s0'], 'Np': ['Np', '5f4', '6d1', '7s2'], 'Cr': ['Cr', '3d5', '4s1'], 'Rh': ['Rh', '4d8', '5s1'], 'Mo': ['Mo', '4d5', '5s1'], 'Cu': ['Cu', '3d10', '4s1']}\n    a={'Ni': ['3d8', '4s2'], 'Ac': ['5f0', '6d1', '7s2'], 'Gd': ['4f7', '5d1', '6s2'], 'Ag': ['4d10', '5s1'], 'Pt': ['4f14', '5d9', '6s1'], 'Ru': ['4d7', '5s1'], 'Nb': ['4d4', '5s1'], 'La': ['4f0', '5d1'], 'Ce': ['4f1', '5d1'], 'Cm': ['5f7', '6d1', '7s2'], 'Pa': ['5f2', '6d1', '7s2'], 'U': ['5f3', '6d1', '7s2'], 'Cu': ['3d10', '4s1'], 'Th': ['5f0', '6d2', '7s2'], 'Cr': ['3d5', '4s1'], 'Np': ['5f4', '6d1', '7s2'], 'Au': ['4f14', '5d10', '6s1'], 'Rh': ['4d8', '5s1'], 'Mo': ['4d5', '5s1'], 'Pd': ['4d10', '5s0']}    \n    a={'Ni': [['3d', '8'], ['4s', '2']], 'Ac': [['5f', '0'], ['6d', '1'], ['7s', '2']], 'Gd': [['4f', '7'], ['5d', '1'], ['6s', '2']], 'Pt': [['4f', '14'], ['5d', '9'], ['6s', '1']], 'Ag': [['4d', '10'], ['5s', '1']], 'Ru': [['4d', '7'], ['5s', '1']], 'Nb': [['4d', '4'], ['5s', '1']], 'La': [['4f', '0'], ['5d', '1']], 'Ce': [['4f', '1'], ['5d', '1']], 'Cm': [['5f', '7'], ['6d', '1'], ['7s', '2']], 'Pa': [['5f', '2'], ['6d', '1'], ['7s', '2']], 'U': [['5f', '3'], ['6d', '1'], ['7s', '2']], 'Cu': [['3d', '10'], ['4s', '1']], 'Th': [['5f', '0'], ['6d', '2'], ['7s', '2']], 'Np': [['5f', '4'], ['6d', '1'], ['7s', '2']], 'Cr': [['3d', '5'], ['4s', '1']], 'Rh': [['4d', '8'], ['5s', '1']], 'Mo': [['4d', '5'], ['5s', '1']], 'Pd': [['4d', '10'], ['5s', '0']], 'Au': [['4f', '14'], ['5d', '10'], ['6s', '1']]}       \n    o=['1s','2s','2p','3s','3p','4s','3d','4p','5s','4d','5p','6s','4f','5d','6p','7s','5f','6d','7p','8s']\n    y={}\n    d={}\n    if element in a:\n        a=a[element]\n        for i in a:\n            d[i[0]]=i[1]\n    for i in o:\n        if i[1]=='s':\n            lim=2\n        if i[1]=='p':\n            lim=6\n        if i[1]=='d':\n            lim=10\n        if i[1]=='f':\n            lim=14            \n        if n>lim:\n            y[i]=str(lim)\n            n=n-lim\n            continue\n        else:\n            y[i]=str(n)\n            break\n    z = dict(list(y.items()) + list(d.items()))\n    l=['1s','2s','2p','3s','3p','3d','4s','4p','4d','4f','5s','5p','5d','5f','6s','6p','6d','7s','7p','8s']\n    r=''\n    for i in l:  \n        if i in z.keys():      \n            r+=i+z[i]+' '\n    r= element+' -> '+r[::-1][1:][::-1]\n    return r"]