["def multiply(n):\n  return n*5**len(str(abs(n))) ", "def multiply(n):\n    return 5 ** len(str(abs(n))) * n", "multiply=lambda n: n*5**len(str(abs(n)))", "def multiply(n):\n    return n * 5 ** number_of_digits(n)\n\n\ndef number_of_digits(n: int):\n    return 1 if -10 < n < 10 else 1 + number_of_digits(n // 10)", "def multiply(n):\n    return n * 5 ** int_len(n)\n\ndef int_len(n):\n    n = abs(n)\n    length = 0\n    while n:\n        length += 1\n        n //= 10\n    return length", "from math import log10\ndef multiply(n):\n    return n*5**int(log10(abs(n))+1) if n!=0 else 0\n", "import math\n\ndef multiply(n):\n  dig_count = int(math.log10(abs(n)) + 1) if n else 1\n  return n * 5**dig_count", "def multiply(n: int) -> int:\n    \"\"\" Multiply each number by 5 raised to the number of digits of each numbers. \"\"\"\n    return n * pow(5, len(str(abs(n))))", "def multiply(n):\n    nDigits=len(str(abs(n)))\n    print(nDigits)\n    return n*(5**nDigits)", "def multiply(n):\n    n = str(n)\n    if int(n) < 0:\n        return int(n) * 5 ** (len(n) - 1)\n    else:\n        return int(n) * 5 ** (len(n))", "def multiply(n):\n    for x in range(len(str(n))):\n        n *= 5\n    return n if n > 0 else n/5\n", "def multiply(n):\n    return n*5**(len(str(n)) - (1 if n < 0 else 0))", "def multiply(n):\n    #your code here\n    return n * 5 ** len([i for i in str(n) if i.isdigit()])", "def multiply(n):\n    return n * 5**(len(str(n).replace('-','')))", "def multiply(n):\n    s = str(n).lstrip('-')\n    return n * 5 ** len(s)", "def multiply(n):\n    s=str(n)\n    factor=len(s)\n    \n    if n>0:\n        return n*5**factor\n    else:\n        return n*5**(factor-1)", "def multiply(n):\n    i = 10\n    j = 1\n    while True:\n        if abs(n) < i:\n            return n*5**j\n        else:\n            i *= 10\n            j += 1", "def multiply(n):\n    return n*5**(len(str(n)) if n>0 else len(str(n))-1)", "import math\ndef multiply(n):\n    if n > 0:\n        digits = int(math.log10(n))+1\n    elif n == 0:\n        digits = 1\n    else:\n        digits = int(math.log10(-n))+2\n        \n    if n > 0:\n        return 5**digits*n\n    else:\n        return 5**(digits-1)*n", "def multiply(n):\n    for x in range(1, len(str(abs(n)))+1):\n        n*=5\n    return n", "def multiply(n):\n    x = len(str(n).lstrip('-').replace('.',''))\n    return n * (5**x)\n", "def multiply(n):\n    return n*pow(5, len(str(n))-1) if n < 0 else n*pow(5, len(str(n)))", "def multiply(n):\n    if n >= 0:\n        a = str(n)\n        return n * 5**len(a)\n    elif n < 0:\n        a = str(n)\n        return n * 5**(len(a)-1)\n", "def multiply(n):\n    m = 5**(len(str(n))) if n>=0 else 5**(len(str(-n)))\n    return n*m", "def multiply(n):\n    n_multiply = len(str(n).strip(\"-\"))\n    for i in range(n_multiply):\n        n = n * 5\n    return n", "def multiply(n):\n    print(len(str(n)))\n    return n*5**len(str(abs(n)))", "def multiply(n):\n    return n * 5**(len(str(n if n > 0 else n * -(1))))\n", "def multiply(n):\n    return n * 5 ** len(str(n)) if str(n)[0] != \"-\" else n * 5 ** (len(str(n)) - 1)", "def multiply(n):\n    res = 5 ** len(str(abs(n))) * abs(n)\n    \n    return res if n > 0 else -res\n", "def multiply(n):\n    m=len(str(abs(n)))\n    return 5**m*n", "def multiply(n):\n    m = len(str(n)) if n > 0 else len(str(n))-1 \n    return n * 5 ** m", "def multiply(n):\n    if '-' in str(n):\n        i = len(str(n)) - 1\n    else:\n        i = len(str(n))\n    return n * (5 ** i)", "def multiply(n):\n    l = len(str(n))\n    if n == 0:\n        return 0\n    if n > 0:\n        return n*(5**l)\n    if n < 0:\n        return n*(5**(l-1))", "def multiply(n):\n    if n == 0:\n        return 0\n    elif n > 0:\n        exp = len(str(n))\n        return n * (5 ** exp)\n    else:\n        exp = len(str(-n))\n        return n * (5 ** exp)", "def multiply(n):\n    if n < 0:\n        x = str(n).replace('-','')\n        y = len(x)\n        return n * (5**y)\n    else:\n        return n * (5**len(str(n)))", "multiply = lambda N,X=5:N*X**(len(str(N)[1 if N<0 else 0:]))", "import math\n\ndef multiply(n):\n  dig_count = math.floor(math.log10(abs(n))+1) if n else 1\n  return n * 5**dig_count", "def multiply(n):\n    r=len(str(abs(n)))\n    return n*5**r", "def multiply(n):\n    nd= len(str(n))\n    for i in range(nd):\n        n *= 5\n    return n if n > 0 else n // 5", "def multiply(n):\n    return n * 5 ** len(str(n)) if n > 0 else n * 5 ** (len(str(n * -1)))", "def multiply(n):\n    return 5 ** len(str(n)[1:]) * n if str(n).startswith('-') else 5 ** len(str(n)) * n", "def multiply(n):\n    account = 0\n    for value in str(abs(n)):\n        account += 1\n    return n*(5**account)\n", "def multiply(n):\n    if n<0:\n        n = n*(-1)\n        return -(5**len(str(n))*n)\n    return (5**len(str(n))*n)", "import math\n\ndef multiply(n):\n    return n * 5**(int(math.log10(abs(n)))+1) if n else 0", "def multiply(n):\n    print(n)\n    return (5**len(str(n)))*n if n>0 else (5**(len(str(n))-1))*n", "def multiply(n):\n    l = len(str(n)) if n >= 0 else len(str(n)) - 1\n    return n *  (5 ** l)", "def multiply(n):\n    a=len(str(n))\n    if n>0:\n        return n*(5**a)\n    else:\n        return (n*(5**(a-1)))", "def multiply(n):\n    minus = False\n    if n < 0:\n        minus = True\n        n *= -1\n    n *= 5 ** len(str(n))\n    if minus:\n        n *= -1\n\n    return n", "def multiply(n):\n    count = len(str(n))\n    if n >= 0:\n        return n * 5 ** count\n    else:\n        return n * 5 ** (count -1)\n        \n    \n", "def multiply(n):\n    return n * (5 ** len(list(str(n)))) if n > 0 else n * (5 ** len(list(str(n*-1))))", "def multiply(n):\n    l = len(str(n))\n    return n * (5**l) if n > 0 else n * (5 ** (l-1))", "def multiply(n):\n    absolute = abs(n)\n    new = str(absolute) \n    length = len(new)\n    integer = int(length)\n    return n * 5 ** integer", "def multiply(n: int):\n    return n * 5 ** len(str(abs(n)))", "def multiply(n):\n    n = str(n)\n    if int(n) >=0:\n        l = len(n)\n    else:\n        l = len(n) - 1\n    n = int(n)\n    return n*(5**l)", "def multiply(n):\n    #your code here\n    if n>=0:\n        \n        b=5**len(str(n))\n        return (n*b)\n    elif n<0:\n        n=abs(n)\n        b=5**len(str(n))\n        return -abs(n*b)", "def multiply(n):\n\n    l = len(str(n))\n    lm = len(str(n)) - 1\n    \n    if str(n).startswith('-'):\n        return n * 5**lm\n    else:\n        return n * 5**l", "def multiply(n):\n    if n > 0:\n        multiplier = 5 ** len(str(n))\n        operation = n * multiplier\n        return operation\n    else:\n        convert = abs(n)\n        mn = 5 ** len(str(convert))\n        on = n * mn\n        return on\n", "def multiply(n):\n    c = 0\n    if n<0:\n       c = c-n\n       m = str(c)\n    else:\n       m = str(n)\n   \n    return n * 5**len(m)", "def multiply(n):\n    a=str(n)\n    l=[]\n    d=5\n    for x in a:\n        l.append(x)\n    if(n>0): \n       for x in range(0,len(l)):\n          n=n*5\n    if(n<0):\n       for x in range(0,len(l)-1):\n          n=n*5\n       \n    return(n)", "import math\n\ndef multiply(n):\n    length = len(str(abs(n)))\n    return n*5**length", "def multiply(n):\n    if n<0:\n        n = -n\n        return -n*5**len(str(n))\n    else:\n        return n*5**len(str(n))", "def multiply(n):\n    power = len(str(n))\n    if n > 0:return n*(5**power)\n    if n < 0: power = len(str(n)) - 1; return n*(5**power)\n    else: return 0", "def multiply(n):\n    a = []\n    if n < 0:\n        a2 = str(n)\n        a3 = (len(a2))\n        a4 = a3 - 1\n    if n > 0:\n        d = str(n)\n        c = (len(d))\n    if n == 0:\n        return 0\n    elif n < 0:\n        return (5 ** a4) * n\n    elif n > 0:\n        return (5 ** c) * n\n    \n", "def multiply(n):\n    #your code here\n    return n * 5 ** len(list(filter(str.isdigit,str(n))))", "def multiply(n):\n    num=len(str(abs(n)))\n    return n*5**num", "def multiply(n):\n    e = len(str(abs(n)))\n    return n * 5**e", "def multiply(n):\n    power = len(str(n)) if n >= 0 else len(str(n)) -1\n    return n * 5 ** power", "def multiply(n):\n    return n*5**(len(str(n))) if \"-\" not in str(n) else n*5**(len(str(n))-1)", "def multiply(n):\n  return int(n)*5**len(str(abs(n)))", "def multiply(n):\n    \n     lenght_of_n = len([i for i in str(n) if i.isdigit()])\n     return n * 5 ** lenght_of_n ", "def multiply(n):\n    return n * 5**len(str(abs(n))) if n > 0 else n * 5**len(str(abs(n)))", "def multiply(n):\n    #your code here\n    num = len(str(n))\n    if n < 0:\n        num -=1\n    return n * 5 ** num", "def multiply(n):\n    if n >= 0:\n        return n * (5 ** len(str(n)))\n    else:\n        return n * (5 ** len(str(n).replace('-','')))", "import math\ndef multiply(n):\n    sum=n*5\n    digits = len(str(n))\n    if n<0:\n        digits=digits-1\n    for x in range(digits-1):\n        sum=(sum*5)\n    return sum", "def multiply(n):\n  p = len(str(abs(n)))\n  ans = n*(5**p)\n  return ans", "def multiply(n):\n    if n >= 0:\n        return n * (5 ** len(str(n)))\n    if n < 0:\n        return n * (5 ** (len(str(n))-1))\n# Flez\n", "def multiply(n):\n    x = len(str(n).strip('-'))\n    \n    return n*5**x", "def multiply(n):\n    power = len(str(n))\n    \n    if n < 0:\n        power -= 1\n        \n    return n * 5 ** power", "def multiply(n):\n    c = 0\n    for i in str(n):\n        for j in i:\n            if j.isdigit():\n                c += 1\n    five = 1\n    while c != 0:\n        c -= 1\n        five *= 5\n    return five * n\n    \n", "def multiply(n):\n    \n    copy = str(n)\n    length = len(copy)\n    if n < 0:\n        length = length - 1\n    return n * (5**length)", "def multiply(n):\n    \n    if n>=0:\n        a=len(str(n))\n        return n*(5**a)\n    elif n<0:\n        a = len(str(n))-1\n        return n*(5**a)\n", "def multiply(n):\n    t,flag = (n,False) if n>0 else (abs(n),True)\n    res = n*(5**len(str(t)))\n    return res", "import math\n\ndef multiply(n):\n    if n == 0:\n        digits = 1\n    else:\n        digits = int(math.log10(abs(n)))+1\n    return n * 5 ** digits", "def multiply(n):\n    #your code here\n    if n < 0:\n        n = -n\n        s = len(str(n))\n        return 5 ** s * n * -1\n    else:\n        s = len(str(n))\n        return 5 ** s * n\n", "def multiply(n):\n    count = 0\n    if n < 0:\n        num = -n\n    else:\n        num = n\n    while num > 0:\n        num = num // 10\n        count += 1\n    return (n*(5**count))", "def multiply(n):\n    if n < 0:\n        return n *  (5 ** len(str(n*-1)))\n        \n    return n *  (5 ** len(str(n)))\n    #your code here\n", "def multiply(n):\n    digits = len(str(abs(n)))\n    return n*5**digits", "def multiply(n):\n    #your code here\n    digits = len(list(str(n).lstrip('-')))\n    return n * 5**digits", "def multiply(n):\n    a = len(str(n))\n    if n >= 0:\n        return n * 5 ** a\n    return n * 5 ** (a -1)", "def multiply(n):\n    return n * 5 ** (lambda n: len(str(n)) if n >= 0 else len(str(n))-1)(n)", "def multiply(n):\n    if n>0: return n*(5**len(str(n)))\n    else: return n*(5**(len(str(n))-1))", "def get_digit_count(n):\n    digits = 0\n    while 0 < n:\n        n //= 10\n        digits += 1\n    return digits\n\ndef multiply(n):\n    return n * (5**get_digit_count(abs(n)))", "def multiply(n):\n    l = str(n)\n    a = \"\"\n    for c in l:\n        if c in \"0123456789\":\n            a += c\n    \n    return n * 5 ** len(a)", "def multiply(n):\n    s=len(str(abs(n)))\n    p=5**s\n    return n*p", "def multiply(n):\n    k = len(str(abs(n)))\n    return n * 5 ** k", "from math import fabs\ndef multiply(n):\n    return n*(5**len(str(int(fabs(n)))))", "def multiply(n):\n    check = str(n)\n    check = check.replace(\"-\",\"\")\n    num = len(check)\n    return 5 ** num * n", "def multiply(n):\n    l = len(str(n).replace(\"-\",\"\"))\n    return n*5**l"]