["starts_with = str.startswith", "def starts_with(st, prefix): \n    return st.startswith(prefix)", "def starts_with(st, prefix): \n    return 1 if st[:len(prefix)] == prefix else 0", "def starts_with(st, prefix): \n    x = len(prefix)\n    if len(prefix) > len(st):\n        return False\n    if st[:x] == prefix:\n        return True\n    return False\n    \n        \n        \n    \n", "def starts_with(stg, prefix): \n    return stg.startswith(prefix)\n\n\n# one-liner: starts_with = str.startswith\n", "def starts_with(st, prefix): \n    if len(st)==0!=len(prefix):\n        return False\n    elif len(prefix)==0:\n        return True\n    else:\n        try:\n            a = 0\n            for i in range(len(prefix)):\n                if st[i]==prefix[i]:\n                    a+=1\n            if a==len(prefix):\n                return True\n            else:\n                return False\n        except:\n            return False", "def starts_with(s, prefix): \n    return s[:len(prefix)]==prefix", "def starts_with(st, prefix): \n    if len(prefix) == 0:\n        return True\n    elif len(prefix) > len(st):\n        return False\n    else:\n        return st.startswith(prefix)", "def starts_with(st, prefix): \n    if st.startswith(prefix):\n        return 1\n    return 0    \n", "def starts_with(st, prefix): \n    if not len(prefix) <= len(st): return False\n    else: return st[:len(prefix)] == prefix"]