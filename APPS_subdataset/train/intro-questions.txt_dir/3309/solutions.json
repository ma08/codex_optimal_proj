["c='black brown red orange yellow green blue violet gray white'.split()\ndef encode_resistor_colors(ohms_string):\n    ohms = str(int(eval(ohms_string.replace('k',  '*1000').replace('M',  '*1000000').split()[0])))\n    return '%s %s %s gold' % (c[int(ohms[0])], c[int(ohms[1])], c[len(ohms[2:])])", "COLORS = {'0': 'black', '1': 'brown', '2': 'red', '3': 'orange', '4': 'yellow', '5': 'green', '6': 'blue', '7': 'violet', '8': 'gray', '9': 'white'}\n\ndef encode_resistor_colors(ohmS):\n    ohmS = str(int(eval(ohmS.replace(' ohms','').replace('k','*1000').replace('M','*1000000'))))\n    return \"{} {} {} gold\".format(COLORS[ohmS[0]], COLORS[ohmS[1]], COLORS[ str(len(ohmS[2:])) ] )", "def encode_resistor_colors(ohms_string):\n    s = str(get_num_ohms(ohms_string))\n    ohms = s[:2]\n    tolerance = str(len(s[2:]))\n    color_bands = [ get_color(ohms[0]), get_color(ohms[1]), get_color(tolerance), 'gold' ]\n    return ' '.join(color_bands)\n\n\ndef get_num_ohms(s):\n    n = s.split(' ')[0]\n    multiplier = 1000 if n[-1] == 'k' else 1000000 if n[-1] == 'M' else 1\n    f = float(n[:-1]) * multiplier if  multiplier > 1 else float(n)\n    return int(f)\n\ndef get_color(n):\n    color_map = {\n        '0': 'black',\n        '1': 'brown',\n        '2': 'red',\n        '3': 'orange',\n        '4': 'yellow',\n        '5': 'green',\n        '6': 'blue',\n        '7': 'violet',\n        '8': 'gray',\n        '9': 'white'\n    }\n    return color_map[n]\n", "c='black brown red orange yellow green blue violet gray white'.split()\ndef encode_resistor_colors(ohms_string):\n    t, u, *p = str(int(eval(ohms_string.replace('M','*1000k').replace('k','*1000').split()[0])))\n    return '%s %s %s gold' % (c[int(t)], c[int(u)], c[len(p)])", "import math\nimport re\n\nCOLORS = {'0': 'black', '1': 'brown', '2': 'red', '3': 'orange', '4': 'yellow',\n          '5': 'green', '6': 'blue', '7': 'violet', '8': 'gray', '9': 'white'}\n\ndef encode_resistor_colors(ohms_string):\n    ohms = re.sub(r'([0-9\\.]+)([kM])?(.*)', \n                 lambda x: str(float(x[1]) * (int(x[2].translate(str.maketrans(\n                 {'k': '1000', 'M': '1000000'}))) if x[2] else 1)), ohms_string)            \n    return f\"{' '.join(COLORS.get(x) for x in ohms[:2])} {COLORS.get(str(len(ohms[2:]) - 2))} gold\"", "def encode_resistor_colors(ohms_string):\n    color_digit = {'0': 'black',\n                   '1': 'brown',\n                   '2': 'red',\n                   '3': 'orange',\n                   '4': 'yellow',\n                   '5': 'green',\n                   '6': 'blue',\n                   '7': 'violet',\n                   '8': 'gray',\n                   '9': 'white'}\n    multiplier = {'1': 'black',\n                  '2': 'black',\n                  '3': 'brown',\n                  '4': 'red',\n                  '5': 'orange',\n                  '6': 'yellow',\n                  '7': 'green',\n                  '8': 'blue',\n                  '9': 'violet',\n                  '10': 'grey',\n                  '11': 'white'}\n\n    number = ohms_string.rstrip('ohms')\n    snumber = ''\n    mult = ''\n    answer = ''\n    fnum = ''\n    check = []\n    a, b, c = '', '', ''\n    \n    #First and Second colors:\n    \n    for i in number:\n        if i.isdigit() == True:\n            snumber += i\n    if len(snumber) > 1:\n        a = snumber[0]\n        b = snumber[1]\n        answer = str(color_digit.get(a)) + ' ' + str(color_digit.get(b))\n    elif len(snumber) == 1:\n        a = snumber[0]\n        answer = str(color_digit.get(a)) + ' ' + 'black'\n        \n    # Multiplier color:\n    \n    for s in number:\n        if s.isdigit() == True or s == '.':\n            fnum += s\n\n    for j in number:\n        check.append(j)\n        if 'M' in check:\n            mult = 1000000\n        elif 'k' in check:\n            mult = 1000\n        else:\n            mult = 1\n\n    c = str(int(eval(str(fnum) + '*' + str(mult))))\n\n    return answer + ' ' +  (multiplier.get(str(len(c)))) + ' gold'", "import re\ncolors=['black', 'brown', 'red', 'orange', 'yellow', 'green', 'blue', 'violet', 'gray', 'white']\ndef encode_resistor_colors(ohms_string):\n    split_string=ohms_string.split()\n    number=split_string[0]\n    if number[-1]=='k':\n        number=str(int(float(number[0:-1])*1000))\n    elif number[-1]=='M':\n        number=str(int(float(number[0:-1])*1000000))\n    color1=colors[int(number[0])]\n    color2=colors[int(number[1])]\n    color3=colors[len(number)-2]\n    return color1 + ' ' + color2 + ' ' + color3 + ' gold'\n\n\n        \n", "import re\nimport math\n\nREGEX_NUMBERS = r\"\\d+\\.?\\d*\"\nRESISTOR_COLORS = {0: 'black', 1: 'brown', 2: 'red', 3: 'orange', 4: 'yellow', 5: 'green', 6: 'blue', 7: 'violet', 8: 'gray', 9: 'white'}\nMULTIPLIER = {'k': 1000, 'M': 1000000}\n\ndef encode_resistor_colors(ohms_string):\n    retrieved_val = re.findall(REGEX_NUMBERS, ohms_string.replace('ohms', ''))[0]\n    needs_trailing_zero = len(retrieved_val) == 1\n    retrieved_val = retrieved_val + '0' if needs_trailing_zero else retrieved_val\n    translation = ' '.join([RESISTOR_COLORS[int(digit)] for digit in retrieved_val if digit.isnumeric()][:2])\n    for key in MULTIPLIER:\n        retrieved_val = float(retrieved_val) * MULTIPLIER.get(key) if key in ohms_string else float(retrieved_val)\n    subtract = 2 if needs_trailing_zero else 1\n    return translation + ' '+(RESISTOR_COLORS[math.floor(math.log10(retrieved_val)) - subtract]) + ' gold'", "import re\nfrom math import log10\ndef encode_resistor_colors(ohms_string):\n    codes = {'0': 'black', '1': 'brown', '2': 'red', '3': 'orange', '4': 'yellow',\n         '5': 'green', '6': 'blue', '7': 'violet','8': 'gray','9': 'white'}\n\n    initial_number, group = re.findall(r'([0-9.]+)([k,M])?', ohms_string).pop()\n    num = float(initial_number) * int(group=='k' and 1000 or group=='M' and 1000000 or 1)\n    processed_number = str(float(initial_number)*10)[:2]\n    final = [codes[x] for x in processed_number] + [codes[str(int(log10(num / float(processed_number))))], 'gold']\n    return ' '.join(final)", "colors = ['black', 'brown', 'red', 'orange', 'yellow', 'green', 'blue', 'violet', 'gray', 'white', 'gold']\n\ndef encode_resistor_colors(ohms_string):\n  ohms = int(eval(ohms_string.split()[0].replace('k', '*1E3').replace('M', '*1E6')))\n  return ' '.join(colors[i] for i in [int(str(ohms)[0]), int(str(ohms)[1]), len(str(ohms)) - 2, 10])"]