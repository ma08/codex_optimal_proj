["def complete_series(a):\n    return list(range(max(a) + 1)) if len(a) == len(set(a)) else [0]", "def complete_series(seq): \n    from collections import Counter\n    if Counter(seq).most_common()[0][1] > 1:\n        return [0]\n    return [i for i in range(max(seq)+1)]", "def complete_series(seq): \n    return [0] if len(set(seq)) < len(seq) else list(range(0,max(seq)+1))", "def complete_series(seq): \n    return list(range(max(seq)+1)) if len(seq)==len(set(seq)) else [0]", "def complete_series(seq): \n    return list(range(1 + (len(seq) == len(set(seq)) and max(seq))))", "complete_series = lambda s: list(range(max(s)+1)) if len(set(s))==len(s) else [0]", "def complete_series(seq): \n    if len(seq) >len(set(seq)):\n        return [0]\n    return list(range(max(seq)+1))   ", "def complete_series(s): \n    if len(list(set(s)))==len(s):\n        return [d for d in range(max(s)+1)]\n    else:\n        return [0]", "def complete_series(seq): \n    # your code here\n    seq.sort()\n    if len(seq) == len(set(seq)):\n        return [number for number in range(seq[-1]+1)]\n    else:\n        return [0]", "def complete_series(seq): \n    if len(seq) != len(set(seq)):\n        return [0]\n    return list(range(max(seq)+1))"]