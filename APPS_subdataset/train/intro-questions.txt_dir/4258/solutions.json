["def series_sum(n):\n    return '{:.2f}'.format(sum(1.0/(3 * i + 1) for i in range(n)))", "def series_sum(n):\n    sum = 0.0\n    for i in range(0,n):\n        sum += 1 / (1 + 3 * float(i))\n    return '%.2f' % sum", "def series_sum(n):\n    seriesSum = 0.0\n    for x in range(n):\n        seriesSum += 1 / (1 + x * 3)\n    return '%.2f' % seriesSum", "def series_sum(n):\n  return \"%.2f\" % sum([1.0 / (3 * i + 1) for i in range(n)])", "def series_sum(n):\n    a=0\n    for i in range(n):\n        a+=1/(3*i+1)\n    return \"{:.2f}\".format(a)\n    \n        \n", "from fractions import Fraction\ndef series_sum(n):\n    total = sum(Fraction(1, 1 + i * 3) for i in range(n))\n    return '{:.2f}'.format(total.numerator / total.denominator)", "def series_sum(n):\n    return f'{sum(1/d for d in range(1,n*3,3)):.2f}'", "def series_sum(n):\n  return \"%.2f\" % sum(map(lambda x: x**-1, range(1,3*n,3)))", "def series_sum(n):\n    sum=0\n    for i in range(n):\n        sum+=1/(1+3*i)\n    return '%.2f' % sum\n\nprint((series_sum(0)))\n", "def series_sum(n):\n    result = 0\n    for i in range(0, n):\n        result += (1 / (1+3*i))\n    return \"{number:.{digits}f}\".format(number=result, digits=2)", "series_sum = lambda n: '{:.2f}'.format(sum(1.0/(3*i-2) for i in range(1, n+1)))\n", "series_sum = lambda n: '{:.2f}'.format(round(sum( 1/(1+(e)*3) for e in range(n) ) ,2))", "def series_sum(n):\n    return \"{0:.2f}\".format(sum([1. / (1 + 3*x)for x in range(n)]))", "def series_sum(n):\n    total = 0\n    for i in range(n):\n        total += 1/(1+ i*3)\n    return str('%.2f' % total)", "def series_sum(n):\n    return '%.2f' % sum(1.0 / (3 * i + 1) for i in range(n))\n", "def series_sum(n):\n    return \"{0:.2f}\".format( sum(1.0/(1+(i-1)*3) for i in range(1,n+1)) )", "def series_sum(n):\n    return f\"{sum(1/x for x in range(1,(n*3)-1,3)):.2f}\"", "def series_sum(number):\n  solution = sum((1 / (1 + 3 * i) for i in range(number)))\n  return format(solution, '.2f')", "def series_sum(n):\n    return f\"{n and sum(1 / i for i in range(1, n*3+1, 3)):.2f}\"\n", "from fractions import Fraction\nfrom functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef rec(n):\n    if not n: return 0\n    return Fraction(1, 3*n-2) + rec(n-1)\n\n# This is overkill for this kata\ndef series_sum(n):\n    return f\"{float(rec(n)):.2f}\"", "def series_sum(n):\n    # Happy Coding ^_^\n    sum=0.00\n    if n==1:\n        return(\"1.00\")\n    elif n==0:\n        return(\"0.00\")\n    else:\n        denominator=1.00\n        for i in range(0,n):\n            if (i+1) <= n:\n                sum=sum+(1/denominator)\n                denominator=denominator + 3.00\n    \n    return(str(format(round(sum,2),'.2f')))", "def series_sum(n):\n  return '%.2f' % sum(1/x for x in range(1, n*3+1, 3))", "def series_sum(n):\n    sum = 0\n    for i in range(1, n * 3, 3):\n        sum += 1 / i\n    return \"{:.2f}\".format(sum)\n", "def series_sum(n):\n    l=[]\n    if n==0:\n        x = '0.00'\n    while n>0:\n        l.append(1/(1+3*(n-1)))\n        n-=1\n        x = '%.2f' % sum(l)\n    return x", "def series_sum(n):\n    # Happy Coding ^_^\n    return '%0.2f' % (\n        round (\n            sum([1/(1+(x-1)*3) for x in range(1, n+1)]), 2\n            )\n        )", "def series_sum(n):\n    if n == 0:\n        return '0.00'\n    else:\n        x = 1\n        sum = 0\n        for i in range(n):\n            sum += 1/(x)\n            x += 3\n        \n        \n        s = \"{:0.2f}\".format(sum)\n        return s\n", "def series_sum(n):\n    sum = 0\n    for i in range(0, n):\n        sum += 1/(1+i*3)\n    return str(format(sum, '.2f'))", "def series_sum(n):\n    return \"{0:.2f}\".format(round(sum(1.0/(1+3*m) for m in range(n)), 2)) if n else \"0.00\"", "def series_sum(n):\n    return \"%.2f\" %(sum(1/(1+3*x) for x in range(n)))", "def series_sum(n):\n    sum = 0\n    for i in range(0, n):\n        sum += 1.0 / (i * 3 + 1)\n    return \"%.2f\" % sum", "def series_sum(n):\n    if n == 0:\n        return '0.00'\n    return '%0.2f' % float(str(1 + sum(1/(1+i*3) for i in range(1,n))))", "def series_sum(n):\n    return format(sum(1/(1+3*k) for k in range(n)),'.2f')", "def series_sum(n):\n    ls = []\n    if(n == 0): return str(\"%5.2f\" % 0.00)[1:]\n    for n in range(1,n):\n        ls.append(1/(1+(n*3)))\n    return str(\"%5.2f\" % (float(sum(ls)+1)))[1:]", "def series_sum(n):\n    sum = 0\n    for x in range(n):\n        sum = sum + 1/(3 * x + 1)\n    return \"%.2f\" % sum", "def series_sum(n):\n    return \"%.2f\" % sum([1/(1+(3*t)) for t in range(n)])", "def series_sum(n):\n    result = 0\n    for i in range(0,n):\n        result += 1.00/(1 + (3 * i))\n    stringresult = str(round(result, 2))\n    if stringresult == '0':\n        stringresult = '0.00'\n    while len(stringresult) < 4:\n        stringresult += '0'\n    return stringresult\n", "def series_sum(n):\n    float_sum = sum([1/(i*3.0+1) for i in range(n)])\n    return '%.2f' % float_sum", "def series_sum(n):\n    return '{:.2f}'.format(sum(1.0/d for d in range(1, n*3, 3)))", "def series_sum(n):\n    if n==0: return \"0.00\"\n    elif n==1: return \"1.00\"\n    \n    sum = 1.0\n    for i in range(1,n):\n        sum += 1/(1+3*i)\n    return '%.2f' % sum", "def series_sum(n):\n    sum = 0\n    for i in range(n):\n        sum += 1/(1+3*i)\n    return(\"%.2f\" % sum)\n", "def series_sum(n):\n    x = 0\n    y = 1\n    for n in range(1, n+1):\n        x = x + y\n        y = 1/((1/y)+3)\n        n = n - 1\n    return format(x, '.2f')", "def series_sum(n):\n    sum_ = sum([1 / (i*3-2) for i in range(1, n+1)])\n    return '%.2f' % sum_", "from decimal import Decimal\n\ndef series_sum(n):\n    if n == 0:\n        sum_ = 0\n    else:\n        sum_ = 1\n        for i in range(n-1):\n            nth_value = 1 / (4+3*i)\n            sum_ += nth_value\n\n    sum_str = str(round(Decimal(sum_), 2))\n    return sum_str", "def series_sum(n):\n    return \"{0:.2f}\".format(sum([(1+3*(k-1))**-1 if k>0 else k for k in range(n+1)]))", "def series_sum(n):\n    return '%.2f'%series_sum_(n)\n    \ndef series_sum_(n):\n    if(n>1):\n        return series_sum_(n-1)+float(float(1.00)/float(3*(n-1)+1))\n    elif(n==1):\n        return float(1.00)\n    return float(0.00)\n", "def series_sum(n):\n    total = 0\n    for num in range(1, n+1):\n        total += (1/(1+(3*(num-1))))\n    return \"%.2f\" % total\n", "def series_sum(n):\n    # Happy Coding ^_^\n    f = 3 * n - 2\n    s = 0\n    if n == 0:\n        return \"0.00\"\n    for i in range(1, f + 1, 3):\n        s = s + (1 / i)\n    return \"{:.2f}\".format(s)", "def series_sum(n):\n    sum = 0\n    div = 1\n\n    for i in range(n):\n        sum += 1/div\n        div += 3\n    if n == 0 :\n        return str(n)+'.00'\n    elif len(str(round(sum,2)))<4:\n       return str(round(sum,2))+\"0\"\n    else:\n       return str(round(sum,2))\n", "def series_sum(n):\n    # Happy Coding ^_^\n    sum = 0;\n    if(n == 1):\n        return \"1.00\"\n    else:\n        for i in range(n):\n            sum += 1/(1+3*i)\n    return str(\"%.2f\" % sum)", "def series_sum(n):\n    # term = 3n+1\n    if n == 0:\n        term = 0\n    elif n>0:\n        term = 1\n        for i in range(1,n):\n            term += 1/(3*i+1)\n        sumterm = float(\"{:.2f}\".format(term))\n    return \"%0.2f\" % term", "def series_sum(n):\n    if n == 0:\n        return(\"0.00\")\n    else:\n        counter = 1\n        list = [1]\n        while counter < n:\n            list.append(1 / (1 + (3 * counter)))\n            counter += 1\n        flt = round((sum(list)), 2)\n        result = format(flt, \".2f\")\n        return(result)", "def series_sum(n):\n    ans = 0\n    while n != 0:\n        ans += 1 / (3 * n - 2)\n        n -= 1\n    return \"{:.2f}\".format(round(ans,2)).__str__()", "def series_sum(n):\n    if n == 0:\n        return '0.00'\n    final = 0\n    x = 0\n    while n >= 1:\n        final += 1/(1+x)\n        x += 3\n        n -= 1\n    final = str(final)\n    if len(final) < 4:\n        final += '0'\n    if len(final) > 4:\n        if int(final[4]) > 4:\n            final = str(float(final) +.01)\n    return str(final)[:4]", "def series_sum(n):\n    summa = sum([1/(1+3*x) for x in range(n)])\n    return f\"{summa:.{2}f}\"", "def series_sum(n=0):\n    # Happy Coding ^_^\n    sum=0.00\n    num=1\n    for i in range(n):\n        sum+=1/num\n        num+=3\n    return ((str(round(sum,2)))+\"0\")[:4]\n", "def series_sum(n):\n    # Happy Coding ^_^\n    a=0\n    for i in range(0,n):\n        a+=1/(1+i*3)\n    return '{:.2f}'.format(a)\n    \n", "def series_sum(n):\n    return \"%1.2f\" % sum((1 / x) for x in range(1 ,3 * n ,3))", "def series_sum(n):\n    x=1 \n    s=0\n    for i in range(n):\n       \n        s+= 1/(x+i*3)\n    if s==0:\n        return '0.00'\n    if len(str(round(s,2))) <4:\n        return str(round(s,2))+'0'\n    \n    return str(round(s,2))", "def series_sum(n):\n    if n == 0:\n        return \"0.00\"\n    if n == 1 :\n        return \"1.00\"\n    elif n== 2:\n        return \"1.25\"\n    else :\n        sum =1.25\n        i = 4\n        for loop in range(n-2):\n            i = i+3\n            sum = sum + 1/i\n    return \"{:.2f}\".format(sum)\n            \n", "def series_sum(n):\n    result = 1+1/4\n    a = 4\n    if n==1:\n        return str('%.2f'%n)\n    elif n == 0:\n        return str('%.2f'%0)\n    for i in range(1,n-1):\n        result+=1/(a+i*3)\n    return str('%.2f'%result)", "def series_sum(n):\n    res = sum(1/(3*d+1) for d in range(n))\n    return f'{res:.2f}'", "def series_sum(n):\n    answer = 0\n    for number in range(n):\n        answer += 1 / (1 + (number * 3))\n    return(str(format(answer, '.2f')))", "def series_sum(n):\n    i = 1\n    x = 0\n    \n    for a in range(n):\n        x += 1/i\n        i += 3\n            \n    return '{:.2f}'.format(x)", "def series_sum(n):\n    output = 0\n    for i in range(n):\n        output += 1/(1+(i*3))\n    if len(str(round(output,2))) < 4:\n        if str(round(output,2)) != \"0\":\n            a = str(round(output,2))\n            a += \"0\"\n            return a\n        else: return  \"0.00\"\n    else:\n        return str(round(output,2))", "def series_sum(n):\n    if n == 0:\n        return \"0.00\"\n    if n== 1:\n        return \"1.00\"\n    sum = 1.00\n    for i in range(n-1):\n        sum=sum+1/(4+(3*i))\n    return \"{:.2f}\".format(sum)\n", "import decimal\ndef series_sum(n):\n    return \"%.2f\" % sum(1 / (1 + 3 * i) for i in range(n))", "import math\ndef series_sum(n):\n    # Happy Coding ^_^\n    result = 0.00\n    for i in (list(range(0, n))): \n        result += 1.00 / (1.00 + (3.00 * float(i)) )\n    return \"{:.2f}\".format(result)\n    \n    \n", "def series_sum(n):\n    if n == 0:\n        return('0.00')\n    else:\n        numerator = 1\n        denom = 1\n        output = ''\n        num = 0.00 \n        for i in range(n):\n            num += (numerator / denom)\n            denom += 3\n            output = str(format(round(num,2),'.2f'))\n        return(output)", "from fractions import Fraction\ndef series_sum(n):\n    \n    sum=0\n    \n    for i in range(n):\n        sum+=1/(1+i*3)\n    \n    return format(sum,'.2f')", "def series_sum(n):\n    total = 0\n    for i in range(n):\n        total += 1 / (3 * i + 1)\n    return f\"{total:.2f}\"", "def series_sum(n):\n    return (str(round(1+sum(1/x for x in range(4,n*3,3)),2)) if n>1 else str(float(n))).ljust(4,\"0\")", "def series_sum(n):\n    s = 1\n    i = 1\n    if n > 1:\n        while i < n:\n            s = 1/(1+(i*3)) + s\n            i += 1\n    else:\n        return str('%.2f' % n)\n    return str('%.2f' % s)\n            \n", "def series_sum(n):\n    n = n - 1\n    return f'{sum(1/i for i in range(1,2+3*n,3)):.2f}'", "def series_sum(n):\n    array = []\n    for i in range(n):\n        array.append(1/(1 + 3 * i))\n    return f'{sum(array):.2f}'", "def series_sum(n):\n    sum = 0.00\n    denom = 1.00\n    for i in range(1,n+1):\n        sum = sum + 1/denom\n        denom = denom + 3.00\n        \n    return f'{sum:.2f}'", "def series_sum(n):\n    series = 0\n    for i in range(0, n):\n        series += 1 / (1 + 3 * i)\n    return \"{:.2f}\".format(series)", "def series_sum(n):\n    denom = 1\n    total = 0.00\n    count = 0\n    while count < n:\n        total = total + 1/denom\n        count = count + 1\n        denom = denom + 3\n        print((\"%.2f\" % total))\n    return \"%.2f\" % total\n    \n        \n    \n            \n            \n", "def series_sum(n):\n    sum = 1\n    if n > 1:\n        for i in range(n - 1):\n            sum += (1 / (4 + (3 * i)))\n    return str(\"{:.2f}\".format(round(sum,2))) if n > 0 else \"0.00\"\n", "def series_sum(n):\n    # Happy Coding ^_^\n    sum = float()\n    j = 1\n    for i in range(n):\n        sum += (1/j)\n        j += 3\n    result = str(round(sum, 2))\n    if len(result) == 3:\n        return result+'0'\n    else:\n        return result\n        \n", "def series_sum(n):\n    return \"{:.2f}\".format(sum([1 / i for i in range(1, n * 3 + 1, 3)]))", "def series_sum(n):\n    # Happy Coding ^_^\n    x = 1\n    s = 0\n    for i in range(n):\n        s += 1/x\n        x += 3\n    return \"{:.2f}\".format(s)", "def series_sum(n):\n    if n == 0:\n        return \"0.00\"\n    d = 1\n    ans = 0\n    for i in range(n):\n        ans += 1/d\n        d += 3\n    ans = f\"{round(ans, 2)}\"\n    return ans if len(ans) == 4 else ans + \"0\" * (4 - len(ans))", "def series_sum(n):\n    sum = 1.00\n    if n == 1:\n        return('1.00')\n    elif n==0: return('0.00')\n    else:\n        for x in range(1,n):\n            sum = sum + (1/((2*(x+1))+(x-1)))\n        return(\"{:.2f}\".format(sum))\n    \n", "def series_sum(n):\n    if (n == 0): return '0.00'\n    sum = 1.0\n    count = 4\n    for i in range(n-1):\n        sum += 1/count\n        count += 3\n    return \"{:.2f}\".format(sum, 2)", "def series_sum(n):\n    sum=0.00\n    value=1.00\n    if n==0:\n        return format(sum,\".2f\")\n    for i in range(1,n+1):\n        sum=sum+(1/value)\n        value+=3\n    result=float(\"{0:.2f}\".format(sum))\n    return format(sum,\".2f\")\n", "def series_sum(n):\n    y = str(round(sum([ 1 / x for x in range(1, n * 3 + 1, 3)]), 2))\n    while len(y) < 4:\n        y += \"0\"\n    return \"0.00\" if n == 0 else y", "def series_sum(n):\n    return str('%.2f' % sum([1/(1 + 3 * x) for x in range(n)]))", "def series_sum(n):\n    \n    if n == 0:\n        return '0.00'\n    elif n == 1:\n        return '1.00'\n    else:\n        s = 1\n        a = [1]\n        for i in range(n):\n            s += 3\n            a.append(1/s)\n        a[-1] = 0\n        a = str((round(sum(a),2)))\n        if len(a) == 4:\n            return a\n        else:\n            b = a+ '0'\n            return b"]