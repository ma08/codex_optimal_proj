["def get_function(sequence):\n    slope = sequence[1] - sequence[0]\n    for x in range(1,5):\n        if sequence[x] - sequence[x-1] != slope:\n            return \"Non-linear sequence\"\n    \n    return lambda a : slope * a + sequence[0]", "def get_function(sequence):\n  first, dist = sequence[0], sequence[1] - sequence[0]\n  valid = all(x == dist * i + first for i, x in enumerate(sequence))\n  def f(x): return dist * x + first\n  return f if valid else 'Non-linear sequence'", "def get_function(seq):\n    b = seq[0]\n    a = seq[1] - b\n    f = lambda x: a*x + b\n    if not all(f(i) == seq[i] for i in range(5)):\n        return 'Non-linear sequence'\n    return f", "def get_function(lst):\n    a, b = lst[1] - lst[0], lst[0]\n    f = lambda x: a * x + b\n    return f if all(f(x) == y for x, y in enumerate(lst)) else \"Non-linear sequence\"", "def get_function(sequence):\n    s0, s1 = sequence[:2]\n    slope = s1 - s0\n    if any(b - a != slope for a, b in zip(sequence[1:], sequence[2:])):\n        return \"Non-linear sequence\"\n    return lambda x: slope * x + s0", "def get_function(arr):\n    if len(set(j-i for i,j in zip(arr,arr[1:]))) != 1:\n        return 'Non-linear sequence'\n    else:\n        return lambda x: arr[0] + (arr[2]-arr[1])*x", "def get_function(a):\n    d = [j - i for i, j in zip(a, a[1:])]\n    return ['Non-linear sequence',lambda v:d[0]*v+a[0]][len(set(d))==1] ", "def get_function(sequence):\n    res = lambda x: sequence[1] * x - sequence[0] * (x - 1)\n    if any(res(x) - v for x,v in enumerate(sequence[2:], 2)): return \"Non-linear sequence\"\n    return res", "def get_function(l):\n    return 'Non-linear sequence' if any(l[i-1]+l[1]-l[0] != l[i] for i in (2,3,4)) else lambda x:(l[1]-l[0])*x+l[0] if l[1]-l[0] else l[0]", "def get_function(seq):\n    if len(set([seq[i+1]-seq[i] for i in range(len(seq)-1)])) != 1:\n        return 'Non-linear sequence'\n    return lambda x: x*(seq[1]-seq[0])+seq[0]"]