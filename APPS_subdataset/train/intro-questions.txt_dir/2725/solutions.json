["def gimme(inputArray):\n    # Implement this function\n    return inputArray.index(sorted(inputArray)[1])", "def gimme(input_array):\n    return input_array.index(sorted(input_array)[1])\n", "gimme=lambda l:l.index(sorted(l)[1])", "def gimme(lst):\n    return lst.index(sorted(lst)[len(lst)//2])\n", "def gimme(arr):\n    return (len(arr)-(arr.index(max(arr)))) - arr.index(min(arr))", "def gimme(arr):\n    return arr.index(sorted(arr)[1])\n", "def gimme(input):\n    s = sorted(input)\n    return input.index(s[1])", "def gimme(input_array):\n    return input_array.index(sorted(input_array.copy())[1])", "import copy\ndef gimme(input_array):\n    input_array_sorted = copy.deepcopy(input_array)\n    input_array_sorted.sort()\n    middle = input_array_sorted[int(len(input_array_sorted) / 2)]\n    return input_array.index(middle)\n", "def gimme(input_array):\n    middle = sorted(input_array)[1]\n    return input_array.index(middle)\n    \n    \n", "def gimme(a): return a.index(sorted(a)[1])\n", "gimme = lambda a: a.index(sorted(a)[1])", "def gimme(triplet):\n    return triplet.index(sorted(triplet)[1])\n", "def gimme(arr):\n    arr1 = sorted(arr)\n    middle = arr1[1]\n    return arr.index(middle) \n", "def gimme(input_array):\n    a = input_array.copy()\n    a.sort()\n    b = a[1]\n    return input_array.index(b)", "def gimme(input_array):\n    # Implement this function\n    for e in input_array:\n        i = 0\n        for p in range(len(input_array)):\n            if e > input_array[p]:\n                i+=1\n            if e < input_array[p]:\n                i-=1\n        if i == 0:  \n            for ele in range(len(input_array)):\n                if e == input_array[ele]:\n                    return ele\n            \n        \n", "def gimme(l): \n    return [x for x in range(len(l)) if x not in [l.index(min(l)), l.index(max(l))]][0]\n", "def gimme(input_array):\n    return(3- input_array.index(max(input_array))-input_array.index(min(input_array)))\n", "def gimme(i):\n    for x in i:\n      if x!=max(i) and x!=min(i):\n        return i.index(x)\n", "def gimme(input_array):\n    a = []\n    b = sum(input_array) / len(input_array)\n    for i in input_array:\n        a.append(abs(b-i))\n    return a.index(min(a))\n", "def gimme(a):\n    for x in a:\n        if max(a) > x > min(a):\n            return a.index(x) \n", "def gimme(array):\n    for i in range(2):\n      if (array[i] < array[i-1]) != (array[i] < array[i+1]):\n        return i\n    return 2", "def gimme(inputArray):\n    return 3 - inputArray.index(min(inputArray)) - inputArray.index(max(inputArray))\n", "def gimme(input_array):\n    get = input_array.__getitem__\n    return 3 - min(list(range(3)), key=get) - max(list(range(3)), key=get)\n", "def gimme(input_array):\n    a, b, c = input_array\n    return 2 if a < c < b or a > c > b else a < b < c or a > b > c\n    \n", "def gimme(a):\n    return [a.index(b) for b in a if b != max(a) and b != min(a)][0]\n", "def gimme(input_array):\n    if input_array[2] > input_array[0] and input_array[2] > input_array[1]:\n        if input_array[0] > input_array[1]:\n            return 0\n        else:\n            return 1\n    elif input_array[0] > input_array[1] and input_array[0] > input_array[2]:\n          if input_array[1] > input_array[2]:\n            return 1\n          else:\n            return 2\n    elif input_array[2] > input_array[0]:\n        return 2\n    else:\n        return 0\n", "def gimme(input_array):\n    for i, c in enumerate(input_array):\n      if c == sorted(input_array)[1]:\n        return i", "def gimme(inputArray):\n    # Implement this function\n    x = inputArray\n    x=sorted(x)\n    return inputArray.index(x[1])\n\n", "from typing import List\n\ndef gimme(array: List[int]) -> int:\n    \"\"\" Get the index of the numerical element that lies between the other two elements. \"\"\"\n    return array.index(next(iter({*array} - ({min(array), max(array)}))))", "def gimme(input_array):\n    maxpos = input_array.index(max(input_array))\n    minpos = input_array.index(min(input_array))\n    for i in input_array:\n        if input_array.index(i) != maxpos and input_array.index(i) != minpos:\n            return input_array.index(i)", "def gimme(input_array):\n    middle_idx = len(input_array) // 2\n    middle_value = sorted(input_array)[middle_idx]\n    return input_array.index(middle_value)\n", "def gimme(input_array):\n    # Implement this function\n    temp = input_array[:]\n    temp.sort()\n    middle_value = int(len(input_array))//2\n    return input_array.index(temp[middle_value])\n\n", "def gimme(input_array):\n    minimum = min(input_array)\n    maximum = max(input_array)\n    for l in input_array:\n        if l < maximum and l > minimum:\n            return input_array.index(l) \n", "def gimme(input_array):\n    ordered = sorted(input_array)\n    return input_array.index(ordered[1])\n  \n", "def gimme(input_array):\n    max_num = max(input_array)\n    min_num = min(input_array)\n    \n    for elem in input_array:\n        if elem != max_num and elem != min_num:\n            return input_array.index(elem)\n", "def gimme(input_array):\n    x = max(input_array)\n    y = min(input_array)\n\n    for i in input_array:\n        if i > y and i < x:\n            return(input_array.index(i))\n", "def gimme(b):\n    a=max(b[0],b[1],b[2])\n    c=min(b[0],b[1],b[2])\n    for i in range(3):\n        if b[i]!=a and b[i]!=c:\n            return i", "def gimme(input_array):\n    min_no=min(input_array)\n    max_no=max(input_array)\n    for i in input_array:\n        if i>min_no and i<max_no:\n            \n            return input_array.index(i)\n        \n    \n    \n        \n", "def gimme(inp):\n    # Implement this function\n    a=max(inp)\n    b=min(inp)\n    for i in range(len(inp)):\n        if b<inp[i]<a:\n            return i", "def gimme(input_array):\n    mi = min(input_array)\n    ma = max(input_array)\n    for i in range(len(input_array)):\n        if input_array[i]!=mi and input_array[i] != ma:\n            return i", "from copy import copy\ndef gimme(input_array):\n    g = copy(input_array)\n    g.sort()\n    return(input_array.index(g[1]))\n", "def gimme(input_array):\n    ord = sorted(input_array)[len(input_array)//2]\n    return input_array.index(ord)", "def gimme(input_array):\n    maximum = max(input_array)\n    minimum = min(input_array)\n    for i in input_array:\n        if i != maximum and i != minimum:\n            mean = input_array.index(i)\n    return mean", "def gimme(input_array):\n    arr = sorted(input_array)\n    middle = arr[1]\n    return input_array.index(middle)", "def gimme(array):\n    v0=array[0]\n    v1=array[1]\n    v2=array[2]\n    array.sort()\n    if(array[1]==v0): return 0\n    if(array[1]==v1): return 1\n    if(array[1]==v2): return 2\n    \n", "def gimme(input_array):\n    copy = sorted(list(input_array))\n    return input_array.index(copy[1])", "def gimme(a):\n    for i in a:\n        if i != max(a) and i != min(a):\n            return a.index(i) \n", "def gimme(input_array):\n    # Implement this function\n    \n    for pos, num in enumerate(input_array):\n        if num != min(input_array) and num != max(input_array):\n            return pos\n", "def gimme(input_array):\n    d={}\n    for i,v in enumerate(input_array):\n        d[i]=v\n    x = sorted(list(d.items()), key=lambda x:x[1])\n    return(x[1][0])\n    # Implement this function\n", "def gimme(input_array):\n    newarr = input_array.copy()\n    [newarr.remove(x) for x in [max(input_array), min(input_array)]]\n    return input_array.index(newarr[0])\n    \n", "def gimme(input_array):\n    i = sorted(input_array)[len(input_array) // 2]\n    return input_array.index(i)\n", "def gimme(input_array):\n    a = max(input_array)\n    b = min(input_array)\n    for i in input_array :\n        if i == a or i == b:\n            continue\n        else :\n            return input_array.index(i)", "def gimme(input_array):\n    # Implement this function\n    orig = input_array[:]\n    input_array.sort()\n    middle = int((len(input_array) - 1) / 2)\n    return orig.index(input_array[middle])", "def gimme(input_array):\n\n    for x in input_array:\n        if x != min(input_array) and x != max(input_array):\n            choosen = x\n\n    return(input_array.index(choosen))\n", "def gimme(input_array):\n    min_value = min(input_array)\n    max_value = max(input_array)\n    for idx, val in enumerate(input_array):\n        if val == min_value:\n            continue\n        if val == max_value:\n            continue\n        return idx", "def gimme(input_array):\n    s = sorted(input_array)\n    return(input_array.index(s[len(s)//2]))\n", "def gimme(arr):\n    for i, el in enumerate(arr):\n        if el != min(arr) and el != max(arr):\n            return i\n", "def gimme(input_array):\n    print(input_array)\n    middle = round(sum(input_array) - min(input_array) - max(input_array),2)\n    index = input_array.index(middle)\n    return index\n", "def gimme(input_array):\n    \n    srt = sorted(input_array)\n    \n    for i in range(3):\n        if input_array[i] == srt[1]:\n            return i", "def gimme(input_array):\n    a = sorted(input_array)\n    return input_array.index(a[len(a)//2])\n", "def gimme(input_array):\n    x = sorted(list(input_array))\n    for y in range(len(input_array)):\n        if x[1] == input_array[y]:\n            return y\n", "def gimme(input_array):\n    i=0\n    while i<3:\n        c=input_array[i]\n        if c<max(input_array) and c>min(input_array):\n            return input_array.index(c)\n            break\n        else:\n            i+=1", "def gimme(array):\n    first = array[0]\n    second = array[1]\n    third = array[2]\n    if first <= second <= third:\n        return 1\n    elif first <= third <= second:\n        return 2\n    elif second <= first <= third:\n        return 0\n    elif second <= third <= first:\n        return 2\n    elif third <= first <= second:\n        return 0\n    elif third <= second <= first:\n        return 1\n", "def gimme(input_array):\n    middle_num = (sorted(input_array)[1])\n    counter = 0\n    for i in input_array:\n        if i == middle_num:\n            return counter\n        else:\n            counter += 1\n\n\ngimme([2, 3, 1])\n", "import numpy as np\n\ndef gimme(input_array):\n    choices = set([0, 1, 2])\n    not_it = set([np.argmin(input_array), np.argmax(input_array)])\n    return list(choices - not_it)[0]\n", "def gimme(arr):\n    sort = sorted(arr)\n    arr.index(sort[1])\n    return arr.index(sort[1])", "def gimme(arr):\n    minn = sorted(arr)\n    return arr.index(minn[1])\n", "def gimme(arr):\n    sort = sorted(arr)\n    return arr.index(sort[1])", "def gimme(arr):\n    middle = sorted(arr)[1]\n    return arr.index(middle)\n", "def gimme(input_array):\n    minEl = min(input_array)\n    maxEl = max(input_array)\n    i = 0\n    for el in input_array:\n        if el < maxEl and el > minEl: return i\n        i = i + 1\n", "def gimme(input_array):\n    sorte=sorted(input_array)\n    return input_array.index(sorte[1])\n    # Implement this function\n", "def gimme(input_array):\n    # Implement this function\n    sort = sorted(input_array)\n    x = sort[1]\n    for i in range(len(input_array)):\n          if x == input_array[i]:\n                return i\n", "def gimme(input_array):\n    # Implement this function\n    sort = sorted(input_array)\n    x = sort[1]\n    leng = len(input_array)\n    \n    if sum(input_array) <0:\n        sort = reversed(sort)\n    \n    for i in range(leng):\n          if x == input_array[i]:\n                return i\n", "def gimme(input_array):\n    for i in input_array:\n        if i < input_array[-1] and i > input_array[0]:\n            return input_array.index(i)\n        elif i < input_array[0] and i > input_array[-1]:\n            return input_array.index(i)\n        elif i < input_array[1] and i > input_array[0]:\n            return input_array.index(i)\n        elif i < input_array[0] and i > input_array[1]:\n            return input_array.index(i)\n        elif i < input_array[1] and i > input_array[-1]:\n            return input_array.index(i)\n        elif i < input_array[-1] and i > input_array[1]:\n            return input_array.index(i)\n", "def gimme(input_array):\n    # Implement this function\n    array=sorted(input_array);\n    mid_num=array[int((len(array)-1)/2)]\n    return(input_array.index(mid_num))\n\n", "def gimme(input_array):\n    for number in input_array:\n        if number != max(input_array) and number != min(input_array):\n            answer = number\n    return input_array.index(answer)\n", "def gimme(input_array):\n    sort_arr = sorted(input_array)\n    middle = sort_arr[1]\n\n    return input_array.index(middle)", "def gimme(input_array):\n    a = input_array.index(max(input_array))\n    b = input_array.index(min(input_array))\n    \n    for i in [0,1,2]:\n        if i not in [a,b]:\n            return i\n            break\n", "def gimme(arr):\n    return len(arr) - (arr.index(max(arr)) + arr.index(min(arr)))    ", "def gimme(input_array):\n    inp2 = input_array.copy()\n    inp2.remove(max(inp2))\n    inp2.remove(min(inp2))\n    return input_array.index(inp2[0])", "def gimme(input_array):\n    # Implement this function\n    mins = min(input_array)\n    maxs = max(input_array)\n    for i in input_array:\n        if i<maxs and i>mins:\n            return input_array.index(i)", "def gimme(input_array):\n    big = max(input_array)\n    small = min(input_array)\n    for num in input_array:\n        if num > small and num < big:\n            return input_array.index(num)", "def gimme(input_array):\n    return input_array.index(sorted(input_array)[int((len(input_array) - 1) / 2)])", "def gimme(input_array):\n    max_i = input_array.index(max(input_array))\n    min_i = input_array.index(min(input_array))\n    \n    middle_i = [i for i in range(len(input_array)) if i not in [max_i,min_i]][0]\n    \n    return middle_i", "def gimme(input_array):\n    # Implement this function\n    Max = max(input_array)\n    Min = min(input_array)\n    n = round(sum(input_array), 3)\n    k = round(n - Max - Min, 3)\n    return input_array.index(k)\n\n", "def gimme(input_array):\n    M=max(input_array)\n    m=min(input_array)\n    if input_array.index(M)==2 and input_array.index(m)==0:\n        return 1\n    if input_array.index(M)==1 and input_array.index(m)==0:\n        return 2\n    if input_array.index(M)==1 and input_array.index(m)==2:\n        return 0\n    if input_array.index(M)==2 and input_array.index(m)==1:\n        return 0\n    if input_array.index(M)==0 and input_array.index(m)==2:\n        return 1\n    if input_array.index(M)==0 and input_array.index(m)==1:\n        return 2", "def gimme(a):\n    b=a\n    a=sorted(a)\n    return    b.index( a[1]  )\n", "def gimme(input_array):\n    array = sorted(input_array)\n    middle_el = array[1]\n    return input_array.index(middle_el)", "def gimme(input_array):\n        if input_array[0] > input_array[1] and input_array[0] < input_array[2] or input_array[0] < input_array[1] and input_array[0] > input_array[2]:\n            return 0\n        elif input_array[1] > input_array[0] and input_array[1] < input_array[2] or input_array[1] > input_array[2] and input_array[1] < input_array[0]:\n            return 1\n        else:\n            return 2\n", "def gimme(input_array):\n        for x in range(len(input_array)):\n                if min(input_array) != input_array[x] and max(input_array) != input_array[x]:\n                        return x\n", "def gimme(arr):\n      list = [i for i in arr if i != max(arr) and i != min(arr)] \n      return arr.index(list[0])\n\n", "import numpy as np\n\ndef gimme(input_array):\n    # Implement this function\n    return input_array.index(np.setdiff1d(input_array,[max(input_array), min(input_array)]))\n\n", "def gimme(input_array):\n    sortedlst = []\n    unsortedlst = []\n    for i in input_array:\n        unsortedlst.append(i)\n        sortedlst.append(i)\n    sortedlst.sort()\n    biggestNumber = sortedlst[1]\n    return unsortedlst.index(biggestNumber)", "def gimme(input_array):\n    # Implement this function\n    sort_items = []\n    for i in input_array:\n        sort_items.append(i)\n    sort_items.sort()\n    \n    y = 0\n    for i in input_array:\n        if i == sort_items[1]:\n            av = y\n            break\n        y += 1\n    return y\n", "def gimme(input_array):\n    return input_array.index(list(set(input_array) - {min(input_array)} - {max(input_array)})[0])\n", "def gimme(input_array):\n    data = [float(i) for i in sorted(input_array)]\n    return input_array.index(data[1])\n", "def gimme(i):\n    if i[0]> i[1] and i[0]<i[2]:\n        return 0\n    elif i[0]> i[2] and i[0]<i[1]:\n        return 0 \n    elif i[1]> i[0] and i[1]<i[2]:\n        return 1\n    elif i[1]> i[2] and i[1]<i[1]:\n        return 1\n    elif i[2]> i[1] and i[2]<i[0]:\n        return 2 \n    elif i[2]> i[0] and i[2]<i[1]:\n        return 2\n    else : \n        return 1\n    \n", "def gimme(input_array):\n    a=list()\n    print(a,input_array)\n    x=0\n    for i in input_array:\n        print(\"i:\",i)\n        a.append(i)\n            \n    input_array.sort()  \n    for i in a:\n    \n        if i == input_array[1]:\n            break\n        x+=1\n    print(a,input_array)\n    \n    return x  ", "def gimme(input_array):\n    l2=input_array.copy()\n    l2.sort()\n    mid_element=l2[1]\n    index_mid_element=input_array.index(mid_element)\n    return (index_mid_element)\n"]