["def closest(lst):\n    m = min(lst, key=abs)\n    return m if m == 0 or -m not in lst else None", "def closest(lst):\n    result = min(lst, key=abs)\n    return result if not result or -result not in lst else None\n", "def closest(lst):\n    m = min(lst, key=lambda x: abs(x))\n    if not m or -m not in lst: return m", "def closest(lst):\n    mn = min(lst, key=abs)\n    return mn if -mn not in lst or mn == 0 else None", "def closest(lst):\n    lst = sorted(set(lst), key=abs)\n    if len(lst) > 1 and abs(lst[0]) == abs(lst[1]):\n        return None\n    return lst[0]", "def closest(lst):\n    min_v = min(lst, key=lambda x: abs(x))\n    return None if -min_v in lst and min_v else min_v", "from functools import reduce; closest=lambda arr: (lambda r: None if r[1] else r[0])(reduce(lambda a,b: [a[0],True] if a[0] and a[0]==-b else [b,False] if abs(b)<abs(a[0]) else a,arr,[999999,False]))", "def closest(lst):\n    m = min(abs(x) for x in lst)\n    res = set(v for v in lst if abs(v) == m)\n    return list(res)[0] if len(res) == 1 else None\n", "def closest(lst):\n    m=min(lst,key=lambda x:abs(0-x))\n    return m if [abs(v) for v in set(lst)].count(abs(m))==1 else None", "def closest(lst):\n    return min(lst, key= lambda x: abs(x)) if (-min(lst, key= lambda x: abs(x))) not in lst or min(lst, key= lambda x: abs(x)) == 0 else None"]