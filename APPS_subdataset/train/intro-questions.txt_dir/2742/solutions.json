["def scramble(string, array):\n    return \"\".join(v for _, v in sorted(zip(array, string)))", "def scramble(string, array):\n    res = array[:]\n    for (i,a) in enumerate(array):\n        res[a]=string[i]\n    return \"\".join(res)\n", "def scramble(string, lst):\n    result = [None] * len(string)\n    for char, index in zip(string, lst):\n        result[index] = char\n    return \"\".join(result)", "def scramble(string, array):\n    d = dict(list(zip(array, string)))\n    return ''.join(map(d.get, list(range(len(array)))))\n", "def scramble(stg, lst):\n    return \"\".join(t[1] for t in sorted(enumerate(stg), key=lambda t: lst[t[0]]))\n", "def scramble(string, array):\n    return \"\".join([string[array.index(i)] for i in range(len(array))])\n", "def scramble(string, array):\n  return ''.join(c for _, c in sorted(zip(array, string)))", "def scramble(string, array):\n  return ''.join(v for i, v in sorted(zip(array, string)))", "def scramble(string, array):\n    return \"\".join(string[array.index(x)] for x in range(len(string)))\n\n", "def scramble(a, b):\n    if not a or not b:\n        return ''\n    if len(a) != len(b):\n        return ''\n    s = sorted(zip(b,a))\n    a,b = map(list, zip(*s))\n    return ''.join(b)"]