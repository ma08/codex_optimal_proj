["def transpose(matrix):\n    return list(map(list, zip(*matrix)))", "def transpose(matrix):\n    return [[row[i] for row in matrix] for i, col in enumerate(matrix[0])]", "import numpy as np\n\n# Take your pick\ndef transpose(matrix):\n    return list(map(list, zip(*matrix)))\n    return np.transpose(matrix).tolist()", "import numpy as np\n\n\ndef transpose(matrix):\n    return np.transpose(np.matrix(matrix)).tolist()", "def transpose(matrix):\n    transp = []\n    #col_m = len(matrix[0])\n    #row_m = len(matrix)\n  \n    \n    for i in range(len(matrix[0])):\n\n        transp.append([matrix[j][i] for j in range(len(matrix))])\n            \n    return transp\n       \n", "import numpy as np\ndef transpose(matrix):\n    return np.transpose(matrix).tolist()", "def transpose(matrix):\n    return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]", "import numpy as np\n\ndef transpose(matrix):\n    return (np.mat(matrix).T).tolist()", "def transpose(matrix):\n  return [list(t) for t in zip(*matrix)]", "transpose=lambda m,l=list:l(map(l,zip(*m)))"]