["import numpy as np\n\n\ndef reorder(a, b):\n    return np.roll(np.arange(a).reshape(2, -1), b, 1).tolist()\n", "from collections import deque\n\n\ndef reorder(n, m):\n    a, b = deque(range(n // 2)), deque(range(n // 2, n))\n    a.rotate(m)\n    b.rotate(m)\n    return [list(a), list(b)]", "# Numpy?\n# https://media.tenor.com/images/36c2be302f423c792ead1cca7018fe88/tenor.png\ndef reorder(N, M):\n    L1 = list(range(N>>1))\n    L2 = list(range(N>>1, N))\n    R = M % (N >> 1)\n    return [L1[-R:] + L1[:-R], L2[-R:] + L2[:-R]]", "def reorder(a, b):\n    a >>= 1\n    b %= a\n    return [[d+(i-b)%a for i in range(a)] for d in (0,a)]", "import numpy as np\n\ndef reorder(a, b):\n    if a % 2:\n        m = a // 2\n        new_array = np.array([number for number in range(0, a)])\n        c = np.array_split(new_array, len(new_array) / m)\n        d = [list(np.roll(c[0], b)), list(np.roll(c[1], b))]\n    else:\n        new_array = np.array([number for number in range(0, a)])\n        c = np.array_split(new_array, len(new_array) / (a // 2))\n        d = [list(np.roll(c[0], b)), list(np.roll(c[1], b))]\n    return d", "reorder = lambda a, b: [x[-b%len(x):] + x[:-b%len(x)] for x in map(list, (range(a//2), range(a//2, a)))]", "def reorder(a, b):\n    arr1, arr2 = list(range(a // 2)), list(range(a // 2, a))\n    for _ in range(b): arr1, arr2 = [arr1[-1]] + arr1[:-1], [arr2[-1]] + arr2[:-1]\n    return [arr1, arr2]", "import numpy\ndef reorder(a, b):\n    result = [list(numpy.roll([i for i in range(0, a//2)], b)), list(numpy.roll([i for i in range(a//2, a)], b))]\n    return result", "import numpy\ndef reorder(a, b):\n    first = numpy.roll(numpy.array([i for i in range(0, int(a/2))]), b)\n    second = numpy.roll(numpy.array([i for i in range(int(a/2), a)]), b)\n    \n    result = [[i for i in first], [j for j in second]]\n    return result", "def reorder(a, b):\n    import numpy\n    return [list(numpy.roll(numpy.split(numpy.arange(a), 2)[0],b)),list(numpy.roll(numpy.split(numpy.arange(a), 2)[1],b))]"]