["def accum(s):\n    return '-'.join(c.upper() + c.lower() * i for i, c in enumerate(s))", "def accum(s):\n    return '-'.join((a * i).title() for i, a in enumerate(s, 1))\n", "def accum(s):\n    output = \"\"\n    for i in range(len(s)):\n        output+=(s[i]*(i+1))+\"-\"\n    return output.title()[:-1]", "def accum(s):\n    i = 0\n    result = ''\n    for letter in s:\n        result += letter.upper() + letter.lower() * i + '-'\n        i += 1\n    return result[:len(result)-1]", "def accum(s):\n    return '-'.join([c.upper() + c.lower() * i for i, c in enumerate(s)])", "def accum(s):\n    return \"-\".join([((j*(i+1)).capitalize()) for i,j in enumerate(s)])", "def accum(s):\n    value = \"\"\n    for i,c in enumerate(s):\n        value += c.upper() + c.lower()*i + \"-\"\n    return value[:-1]", "def accum(s):\n    str = \"\"\n    for i in range(0, len(s)):\n        str += s[i].upper()\n        str += s[i].lower()*i\n        if i != len(s)-1:\n            str += \"-\"\n    return str", "def accum(s):\n    a = list(s)\n    res = \"\"\n    for i, c in enumerate(a):\n        res += c * (i + 1) + \"-\"\n    return res.strip(\"-\").title()", "def accum(s):\n    return \"-\".join(list(x.upper() + x.lower() * count for count, x in enumerate(s)))"]