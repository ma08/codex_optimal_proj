["from collections import deque\n\ndef count_ways(n, k):\n    s,d = 1,deque([0]*k)\n    for i in range(n):\n        d.append(s)\n        s = 2*s-d.popleft()\n    return s-d.pop()", "from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef count_ways(n, k):\n    if n < 0:\n        return 0\n    elif n <= 1:\n        return 1\n    return sum(count_ways(n-i, k) for i in range(1, k+1))\n", "def count_ways(n, k):\n    dp = []\n    for i in range(k):\n        dp.append(2 ** i)\n    for i in range(k, n):\n        dp.append(sum(dp[-k:]))\n    return dp[~-n]", "def count_ways(n, k):\n    ways = [None] * (n + 1)\n    ways[0] = 1\n    for i in range(1, n + 1):\n        total = 0\n        for j in range(1, k + 1):\n            if i - j >= 0 : total += ways[i-j]\n        ways[i] = total\n    return ways[n]", "def count_ways(n, k):\n    kfib = [0 for _ in range(k-1)] + [1]\n    for i in range(n):\n        kfib.append(sum(kfib[i:i+k]))\n    return kfib[-1]", "from functools import lru_cache\n\n@lru_cache(None)\ndef count_ways(n, k):\n    return sum(count_ways(n - a, k) for a in range(1, min(n, k) + 1)) if n else 1", "from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef count_ways(n, k):\n    return n==0 or sum(count_ways(n-x, k) for x in range(1, min(n, k)+1))", "from collections import deque\n\ndef count_ways(n, k):\n    rs = deque(maxlen=k)\n    rs.append(1)\n    for _ in range(n):\n        rs.append(sum(rs))\n    return rs[-1]", "def count_ways(n, k):\n    list_ = []\n    for i in range(k):\n        list_.append(2**i)\n    \n    print(list_)\n    \n    for i in range(n-k):\n        list_.append(sum(list_[-k:]))\n    \n    print(list_)\n    \n    return list_[n-1]\n", "def count_ways(n, k):\n    steps = [1] * (n + 1)\n    for i in range(1, n + 1):\n        if i <= k:\n            steps[i] = sum(steps[j] for j in range(0, i))\n        else:\n            steps[i] = sum(steps[i - j] for j in range(1, k + 1))\n    return steps[-1]\n"]