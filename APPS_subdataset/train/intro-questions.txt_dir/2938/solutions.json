["def pattern(n):\n    output = []\n    for i in range (1, n + 1):\n        wing = ' ' * (n - i) + ''.join(str(d % 10) for d in range(1, i))\n        output.append(wing + str(i % 10) + wing[::-1])\n    return '\\n'.join(output)", "def pattern(n):\n    result = []\n    for i in range(1, n+1):\n        string = \"\"\n        for j in range(n, i, -1):\n            string += \" \"\n        for j in range(1, i):\n            string += str(j)[-1]\n        for j in range(i, 0, -1):\n            string += str(j)[-1]\n        for j in range(n, i, -1):\n            string += \" \"\n        result.append(string)\n    return \"\\n\".join(result)", "def pattern(n):\n    l = []\n    for a, b in zip(range(1, n+2), range(n+1)):\n        res = ''.join(str(x%10) for x in range(1,a))\n        spaces = n-len(res)\n        if res: l.append(spaces * ' ' + res+res[-2::-1] + ' ' * (spaces))\n    return '\\n'.join(l)", "from itertools import cycle, islice\n\ndef f(n):\n    it = cycle('1234567890')\n    xs = ''.join(islice(it, 0, n-1))\n    return xs + next(it) + xs[::-1]\n    \ndef pattern(n):\n    m = n * 2 - 1\n    return '\\n'.join(\n        '{:^{}}'.format(f(i), m)\n        for i in range(1, n+1)\n    )", "def pattern(n):\n    t = []\n    for i in range(1,n+1):\n        t.append( (n-i)*\" \" + ls(i)+ +(n-i)*\" \")\n    return \"\\n\".join(t)\n    \ndef ls(k):\n    ls = [str(j%10) for j in range(1,k)]\n    return \"\".join(ls) + str(k%10) + \"\".join(ls[::-1])", "def pattern(n):\n  mkP = lambda y: str(y % 10)\n  return \"\\n\".join([\" \" * (n - x - 1) + \"\".join(map(mkP, range(1, x + 1))) + \"\".join(map(mkP, range(x + 1, 0, -1))) + \" \" * (n - x - 1) for x in range(n)])"]