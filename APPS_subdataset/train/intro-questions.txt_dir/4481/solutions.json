["def not_visible_cubes(n):\n    return max(n - 2, 0) ** 3", "def not_visible_cubes(n):\n    return max(0,(n-2)) ** 3", "def not_visible_cubes(n):\n    if n > 1:\n        return (n-2)**3\n    else:\n        return 0", "def not_visible_cubes(n):\n    if 0 <= n <= 2: return 0\n    return (n - 2)**3", "import math\ndef not_visible_cubes(n):\n    if (n < 2) : return 0\n    else :\n#         return long(math.pow(n-2,3))\n        return (n-2)*(n-2)*(n-2)\n    \n", "def not_visible_cubes(n):\n    return pow(n-2, 3) if n>2 else 0", "def not_visible_cubes(n):\n    return n > 2 and (n-2)**3", "def not_visible_cubes(n):\n    if n == 0 or n == 1 or n == 2:\n        return 0\n    totalCubes = n*n*n\n    cubesPerSide = n*n\n    outsideCubes = cubesPerSide + 2*(cubesPerSide - n) + cubesPerSide - 2*n + 2*(cubesPerSide - (n + 2*(n - 1) + n - 2))\n    return totalCubes - outsideCubes", "def not_visible_cubes(n):\n  return pow(n-2,3) if n>1 else 0", "def not_visible_cubes(n):\n    return (n-2) ** 3 if n > 2 else 0"]