["from functools import reduce\nfrom fractions import gcd\n\ndef final_attack_value(x, monster_list):\n    return reduce(lambda a, b: a + (b if b <= a else gcd(a, b)), monster_list, x)", "from fractions import gcd\ndef final_attack_value(x,monster_list):\n    for i in monster_list:\n        x += gcd(i,x) if i > x else i\n    return x", "from math import gcd\n\ndef final_attack_value(attack, monsters):\n    for monster in monsters:\n        attack += gcd(attack, monster) if attack < monster else monster\n    return attack", "def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef final_attack_value(x, monster_list):\n    for m in monster_list:\n        x = x + m if m <= x else x + gcd(x, m)\n    return x", "final_attack_value=f=lambda x,m:m and f(x+__import__('fractions').gcd(min(m[0],x),m[0]),m[1:])or x", "from functools import reduce; gcd=lambda a,b: gcd(b,a%b) if b else a; final_attack_value=lambda x,m: reduce(lambda a,b: a+b if a>=b else a+gcd(a,b),m,x)", "def final_attack_value(x,monster_list):\n    for i in monster_list:\n        if x >= i:\n            x += i\n        else:\n            a = x\n            b = i\n            while b:\n                a, b = b, a%b\n            x += a\n    return x", "from math import gcd\ndef final_attack_value(x,monster_list):\n    for m in monster_list:\n        if m <= x:\n            x += m\n        else:\n            x += gcd(x, m)\n    return x", "from math import gcd\ndef final_attack_value(x,monster_list):\n    for monster in monster_list:\n        if monster>x:x+=gcd(x,monster)\n        else:x+=monster\n    return x", "def gcd(a, b):\n    while a != b:\n\n        if a > b: a = a - b\n        if b > a: b = b - a\n    return a\n\ndef final_attack_value(x,monster_list):\n    for i in monster_list:\n        if x>i:\n            x+=i\n        else:\n            x+=gcd(x,i)\n    return x"]