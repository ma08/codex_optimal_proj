["def padovan(n):\n    p0 = p1 = p2 = 1\n    for i in range(n):\n        p0, p1, p2 = p1, p2, p0 + p1\n    return p0", "from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef padovan(n):\n    return n<3 or padovan(n-2) + padovan(n-3)", "from functools import lru_cache\n\n@lru_cache()\ndef padovan(n):\n    return 1 if n < 3 else padovan(n-2) + padovan(n-3)", "def padovan(n):\n  p0 = p1 = p2 = 1\n  for i in range(3, n+1):\n    p0, p1, p2 = p1, p2, p0+p1\n  return p2", "from collections import deque\n\ndef padovan(n):\n    q = deque([1,1,1], maxlen=3)\n    for i in range(n-2):\n        q.append(q[0] + q[1])\n    return q[-1]", "def padovan(n):\n    a = b = c = 1\n    while n:\n        a, b, c = b, c, a + b\n        n -= 1\n    return a", "def padovan(n, a=1, b=1, c=1):\n    return a if n==0 else padovan(n-1, b, c, a+b)", "def padovan(n):\n    a = b = c = 1\n    for i in range(n // 3):\n        a += b\n        b += c\n        c += a\n    return (a, b, c)[n % 3]", "import sys\nsys.setrecursionlimit(1500) \n\ndef padovan(n, memo = {0:1, 1:1, 2:1}):\n    if n in memo: return memo[n]\n    else:\n        result = padovan(n-2,memo) + padovan(n-3, memo)\n        memo[n] = result\n        return result", "def memoize(f):\n    memo = {}\n    def helper(x):\n        if x not in memo:            \n            memo[x] = f(x)\n        return memo[x]\n    return helper\n\ndef padovan(n):\n    if n==0 or n==1 or n==2:\n        return 1\n    else:\n        return padovan(n-2)+padovan(n-3)\n        \npadovan=memoize(padovan)"]