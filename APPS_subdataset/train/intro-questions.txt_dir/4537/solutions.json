["def bin2gray(bits):\n  bits.reverse()\n  return list(reversed([x if i >= len(bits) - 1 or bits[i + 1] == 0 else 1 - x for i, x in enumerate(bits)]))\n  \ndef gray2bin(bits):\n  for i, x in enumerate(bits):\n    if i > 0 and bits[i - 1] != 0: bits[i] = 1 - x\n  return bits", "def bitlist(func):\n    def wrapper(bits):\n        i = int(''.join([str(b) for b in bits]), 2)\n        result = func(i)\n        return [int(b) for b in bin(result)[2:]]\n    return wrapper\n\n@bitlist\ndef bin2gray(bits):\n    return bits >> 1 ^ bits\n\n@bitlist\ndef gray2bin(bits):\n    mask = bits >> 1\n    while(mask != 0):\n         bits ^= mask\n         mask >>= 1\n    return bits\n", "def bin2gray(bits):\n    return [1-x if i and bits[i-1] else x for i,x in enumerate(bits)]\n\ndef gray2bin(bits):\n    result, memo = [], bits[0]\n    for i,x in enumerate(bits):\n        if i and x:\n            result.append(1-memo)\n        else:\n            result.append(memo)\n        memo = result[-1]\n    return result", "bin2gray=lambda b:[b[0]]+[b[i+1]^j for i,j in enumerate(b[:-1])]\ndef gray2bin(g):\n    b = [g[0]]\n    for i in g[1:]:\n        b.append(b[-1] ^ i)\n    return b", "def bin2gray(bits):\n    return bits[:1] + [b1 ^ b2 for b1, b2 in zip(bits, bits[1:])]\n\ndef gray2bin(bits):\n    return [reduce(lambda x, y: x ^y, bits[:i+1], 0) for i in range(len(bits))]", "def bin2gray(bits):\n    gray=[]\n    gray.append(bits[0])\n    for index in range(1,len(bits),1):\n        gray.append(bits[index-1]^bits[index])    \n    return gray\n    \ndef gray2bin(bits):\n    bin=[]\n    bin.append(bits[0])\n    for index in range(1,len(bits),1):\n        bin.append(bin[index-1]^bits[index])\n    return bin   ", "def bin2gray(bits):\n    return [x^y for x,y in zip(bits,[0]+bits)]\ndef gray2bin(bits):\n    return [reduce(lambda x,y:x^y,bits[:i+1]) for i, _ in enumerate(bits)]", "def bin2gray(bits):\n    g = [bits[0]] * len(bits)\n    for i in range(1, len(bits)):\n        g[i] = bits[i] ^ bits[i - 1]\n    return g\n\n\ndef gray2bin(bits):\n    b = [bits[0]] * len(bits)\n    for i in range(1, len(bits)):\n        b[i] = bits[i] ^ b[i - 1]\n    return b\n", "def i2l(i):\n    l = []\n    while i != 0:\n        l.append(i % 2)\n        i >>= 1\n    l.reverse()\n    return l if l else [0]\n    \ndef l2i(l):\n    i = 0\n    for b in l:\n        i = i * 2 + b\n    return i\n    \ndef bin2gray(bits):\n    bits = l2i(bits)\n    return i2l(bits ^ (bits >> 1))\ndef gray2bin(bits):\n    bits = l2i(bits)\n    m = bits >> 1\n    while m:\n        bits = bits ^ m\n        m >>= 1\n    return i2l(bits)"]