["is_vampire = lambda x, y: sorted(f\"{x}{y}\") == sorted(f\"{x*y}\") and x%10 + y%10 > 0\nvampires = sorted({x*y for p in (1, 2) for x in range(10**p, 10**(p+1)) for y in range(x, 10**(p+1)) if is_vampire(x, y)})\n\ndef VampireNumber(k):\n    return vampires[k-1]", "vampire_number = VampireNumber = (0, 1260, 1395, 1435, 1530, 1827, 2187, 6880, 102510, 104260, 105210, 105264, 105750, 108135, 110758, 115672, 116725, 117067, 118440, 120600, 123354, 124483, 125248, 125433, 125460, 125500, 126027, 126846, 129640, 129775, 131242, 132430, 133245, 134725, 135828, 135837, 136525, 136948, 140350, 145314, 146137, 146952, 150300, 152608, 152685, 153436, 156240, 156289, 156915, 162976, 163944, 172822, 173250, 174370, 175329, 180225, 180297, 182250, 182650, 186624, 190260, 192150, 193257, 193945, 197725, 201852, 205785, 211896, 213466, 215860, 216733, 217638, 218488, 226498, 226872, 229648, 233896, 241564, 245182, 251896, 253750, 254740, 260338, 262984, 263074, 284598, 284760, 286416, 296320, 304717, 312475, 312975, 315594, 315900, 319059, 319536, 326452, 329346, 329656, 336550, 336960, 338296, 341653, 346968, 361989, 362992, 365638, 368550, 369189, 371893, 378400, 378418, 378450, 384912, 386415, 392566, 404968, 414895, 416650, 416988, 428980, 429664, 447916, 456840, 457600, 458640, 475380, 486720, 489159, 489955, 498550, 516879, 529672, 536539, 538650, 559188, 567648, 568750, 629680, 638950, 673920, 679500, 729688, 736695, 738468, 769792, 789250, 789525, 792585, 794088, 809919, 809964, 815958, 829696, 841995, 939658).__getitem__", "import requests\n\nr = requests.get('https://oeis.org/A014575/b014575.txt')\n\nvampire_numbers = [int(d.split(' ')[1]) for d in r.text.strip().split('\\n')]\n\ndef VampireNumber(n):\n    return vampire_numbers[n-1]", "def VampireNumber(k):\n    return ord(\"_\u04ec\u0573\u059b\u05fa\u0723\u088b\u1ae0\ud824\udc6e\ud825\udf44\ud826\udefa\ud826\udf30\ud827\udd16\ud829\ude67\ud82c\udca6\ud830\udfd8\ud831\udff5\ud832\udd4b\ud833\udea8\ud835\udf18\ud838\uddda\ud839\ude43\ud83a\udd40\ud83a\uddf9\ud83a\ude14\ud83a\ude3c\ud83b\udc4b\ud83b\udf7e\ud83e\ude68\ud83e\udeef\ud840\udcaa\ud841\udd4e\ud842\udc7d\ud843\ude45\ud844\ude94\ud844\ude9d\ud845\udd4d\ud845\udef4\ud849\udc3e\ud84d\udfa2\ud84e\uded9\ud84f\ude08\ud852\udf1c\ud855\udc20\ud855\udc6d\ud855\udf5c\ud858\ude50\ud858\ude81\ud859\udcf3\ud85f\udca0\ud860\udc68\ud868\udf16\ud869\udcc2\ud86a\udd22\ud86b\udce1\ud870\udc01\ud870\udc49\ud871\udfea\ud872\udd7a\ud876\udd00\ud879\udf34\ud87b\ude96\ud87c\udee9\ud87d\udd99\ud881\udc5d\ud885\udc7c\ud888\udfd9\ud88e\udfb8\ud890\uddda\ud892\udf34\ud893\ude9d\ud894\ude26\ud895\udd78\ud89d\udcc2\ud89d\ude38\ud8a0\udd10\ud8a4\udda8\ud8ab\udf9c\ud8af\uddbe\ud8b5\udff8\ud8b7\udf36\ud8b8\udf14\ud8be\udcf2\ud8c0\udf48\ud8c0\udfa2\ud8d5\udfb6\ud8d6\udc58\ud8d7\uded0\ud8e1\udd80\ud8e9\ude4d\ud8f1\udc9b\ud8f1\ude8f\ud8f4\udcca\ud8f4\uddfc\ud8f7\ude53\ud8f8\udc30\ud8fe\udf34\ud901\ude82\ud901\udfb8\ud908\udea6\ud909\udc40\ud90a\udd78\ud90d\ude95\ud912\udf58\ud921\ude05\ud922\uddf0\ud925\udc46\ud927\udfa6\ud928\ude25\ud92b\udcb5\ud931\ude20\ud931\ude32\ud931\ude52\ud937\udf90\ud939\udd6f\ud93f\udd76\ud94b\udde8\ud955\udcaf\ud956\udf8a\ud957\udcdc\ud962\udfb4\ud963\ude60\ud975\uddac\ud97e\udc88\ud97e\udf80\ud97f\udf90\ud990\udcf4\ud99b\udd40\ud99d\udec7\ud99e\udde3\ud9a6\udf76\ud9b8\udf0f\ud9c5\udd08\ud9cb\udfdb\ud9ce\udc1a\ud9e2\udc54\ud9ea\udd60\ud9eb\uddae\uda26\udfb0\uda2f\udfe6\uda52\udc80\uda57\ude4c\uda88\ude58\uda8f\uddb7\uda91\udca4\udaaf\udf00\udac2\udf02\udac3\udc15\udac6\udc09\udac7\udde8\udad6\udfbf\udad6\udfec\udadc\udf56\udaea\udd00\udaf6\udd0b\udb55\ude8a\"[k])", "import requests \nfrom bs4 import BeautifulSoup\n\npage = requests.get(url='https://oeis.org/A014575/b014575.txt').text\nsoup = BeautifulSoup(page, 'html.parser')\nvampire = {int(v.split(' ')[0]): int(v.split(' ')[1]) for v in soup.text.split('\\n') if v}\n\ndef VampireNumber(i): \n    return vampire[i]", "import requests\n\n# thanks to Fbasham for the idea\ndef VampireNumber(n):\n    r = requests.get('https://oeis.org/A014575/b014575.txt').text.splitlines()\n\n    return int(r[n-1].split()[1])", "from itertools import combinations\n\nvampires = set()\nfor i in [1, 2]:\n    for x, y in combinations(range(10**i, 10**(i+1)), 2):\n        if x % 10 == 0 == y % 10:\n            continue\n        z = x * y\n        if sorted(str(z)) == sorted(f'{x}{y}'):\n            vampires.add(z)\nxs = sorted(vampires)\n\ndef VampireNumber(i):\n    return xs[i-1]", "is_vampire = lambda x, y: sorted(f\"{x}{y}\") == sorted(f\"{x*y}\") and x%10 + y%10 > 0\nvampires = [None] + sorted({x*y for p in (1, 2) for x in range(10**p, 10**(p+1)) for y in range(x, 10**(p+1)) if is_vampire(x, y)})\n\nVampireNumber = vampires.__getitem__", "v_nums = {1:1260, 2:1395, 3:1435, 4:1530, 5:1827, 6:2187, 7:6880, 8:102510, 9:104260, 10:105210, 11:105264, 12:105750, 13:108135, 14:110758, 15:115672, 16:116725, 17:117067, 18:118440, 19:120600, 20:123354, 21:124483, 22:125248, 23:125433, 24:125460, 25:125500, 26:126027, 27:126846, 28:129640, 29:129775, 30:131242, 31:132430, 32:133245, 33:134725, 34:135828, 35:135837, 36:136525, 37:136948, 38:140350, 39:145314, 40:146137, 41:146952, 42:150300, 43:152608, 44:152685, 45:153436, 46:156240, 47:156289, 48:156915, 49:162976, 50:163944, 51:172822, 52:173250, 53:174370, 54:175329, 55:180225, 56:180297, 57:182250, 58:182650, 59:186624, 60:190260, 61:192150, 62:193257, 63:193945, 64:197725, 65:201852, 66:205785, 67:211896, 68:213466, 69:215860, 70:216733, 71:217638, 72:218488, 73:226498, 74:226872, 75:229648, 76:233896, 77:241564, 78:245182, 79:251896, 80:253750, 81:254740, 82:260338, 83:262984, 84:263074, 85:284598, 86:284760, 87:286416, 88:296320, 89:304717, 90:312475, 91:312975, 92:315594, 93:315900, 94:319059, 95:319536, 96:326452, 97:329346, 98:329656, 99:336550, 100:336960, 101:338296, 102:341653, 103:346968, 104:361989, 105:362992, 106:365638, 107:368550, 108:369189, 109:371893, 110:378400, 111:378418, 112:378450, 113:384912, 114:386415, 115:392566, 116:404968, 117:414895, 118:416650, 119:416988, 120:428980, 121:429664, 122:447916, 123:456840, 124:457600, 125:458640, 126:475380, 127:486720, 128:489159, 129:489955, 130:498550, 131:516879, 132:529672, 133:536539, 134:538650, 135:559188, 136:567648, 137:568750, 138:629680, 139:638950, 140:673920, 141:679500, 142:729688, 143:736695, 144:738468, 145:769792, 146:789250, 147:789525, 148:792585, 149:794088, 150:809919, 151:809964, 152:815958, 153:829696, 154:841995, 155:939658}\n\ndef VampireNumber(k):\n    return v_nums[k]    ", "l=[1260, 1395, 1435, 1530, 1827, 2187, 6880, 102510, 104260, 105210, 105264, 105750, 108135, 110758, 115672, 116725, 117067, 118440, 120600, 123354, 124483, 125248, 125433, 125460, 125500, 126027, 126846, 129640, 129775, 131242, 132430, 133245, 134725, 135828, 135837, 136525, 136948, 140350, 145314, 146137, 146952, 150300, 152608, 152685, 153436, 156240, 156289, 156915, 162976, 163944, 172822, 173250, 174370, 175329, 180225, 180297, 182250, 182650, 186624, 190260, 192150, 193257, 193945, 197725, 201852, 205785, 211896, 213466, 215860, 216733, 217638, 218488, 226498, 226872, 229648, 233896, 241564, 245182, 251896, 253750, 254740, 260338, 262984, 263074, 284598, 284760, 286416, 296320, 304717, 312475, 312975, 315594, 315900, 319059, 319536, 326452, 329346, 329656, 336550, 336960, 338296, 341653, 346968, 361989, 362992, 365638, 368550, 369189, 371893, 378400, 378418, 378450, 384912, 386415, 392566, 404968, 414895, 416650, 416988, 428980, 429664, 447916, 456840, 457600, 458640, 475380, 486720, 489159, 489955, 498550, 516879, 529672, 536539, 538650, 559188, 567648, 568750, 629680, 638950, 673920, 679500, 729688, 736695, 738468, 769792, 789250, 789525, 792585, 794088, 809919, 809964, 815958, 829696, 841995, 939658]\ndef VampireNumber(k):\n    return l[k-1]"]