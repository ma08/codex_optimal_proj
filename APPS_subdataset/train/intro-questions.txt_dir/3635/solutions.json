["def sflpf_data(val, nMax):\n    r=[]\n    for i in range(2,nMax):\n       fac=primef(i)\n       if len(fac)>1 and fac[0]+fac.pop()==val: r.append(i) \n    return r\n    \ndef primef(n):\n    i= 2; f= []\n    while i*i<=n:\n        if n%i: i+=1\n        else: n//=i; f.append(i)\n    if n>1: f.append(n)\n    return f", "def sflpf_data(val, limit):\n    result = []\n    for n in range(4, limit+1):\n        factors =  prime_factors(n)\n        if len(factors) > 1 and min(factors) + max(factors) == val:\n            result.append(n)\n    return result\n\ndef prime_factors(n):\n    factors = []\n    while not n % 2:\n        factors.append(2)\n        n = n // 2\n    while not n % 3:\n        factors.append(3)\n        n = n // 3\n    k = 5\n    step = 2\n    while k <= n**0.5:\n        if not n % k:\n            factors.append(k)\n            n = n // k\n        else:\n            k = k + step\n            step = 6 - step\n    factors.append(n)\n    return factors\n", "def sflpf_data(val, nMax):\n    #your code here\n    #your code here\n    prime = [2,3]\n    result = []\n    head = 1\n    tail = 0\n    for i in range(4,nMax):\n        i_temp = i\n        for j in prime :\n            if i == 1 or j > val :\n                break\n            while i % j == 0 :\n                i /= j\n                if head == 0 :\n                    head = j\n                tail = j\n        if i == 1 :\n            if head + tail == val :\n                result.append(i_temp)\n        else :\n            prime.append(i_temp)\n        head = 0\n    return result", "import itertools\ndef sflpf(n):\n    f = 2\n    l = []\n    increments = itertools.chain([1,2,2], itertools.cycle([4,2,4,2,4,6,2,6]))\n    for incr in increments:\n        if f*f > n:\n            break\n        while n % f == 0:\n            l.append(f)\n            n //= f\n        f += incr\n    if n > 1:\n        l.append(n)\n    return min(l) + max(l) if len(l) > 1 else 0       \n    \ndef sflpf_data(val, nMax):\n    return [i for i in range(4, nMax + 1) if sflpf(i) == val]\n", "def sflpf(n):\n    i = 2\n    first = True\n    small = 0\n    large = 0\n    while i*i <= n:\n        while n % i == 0:\n            large = i\n            if first:\n                small = i\n                first = False\n            n /= i\n        i += 1\n    if small:\n        return small + max(large, n)\n    else:\n        return 0\n    \n\nsflpf_of = [sflpf(i) for i in range(1, 2*10**4)]\n\ndef sflpf_data(val, n):\n    return [x for x in range(1, n+1) if sflpf_of[x-1] == val]\n", "def sflpf_data(a,b):\n    lis=[]\n    for i in range(2,b+1):\n        temp=i\n        con=2\n        if temp==1:\n            lis.append(1)\n        else:\n            lis1=[]\n            while temp>1:\n                while temp%con==0:\n                    lis1.append(con)\n                    temp//=con\n                con+=1\n                if con*con>temp:\n                    if temp>1:lis1.append(temp)\n                    break\n            con=lis1[0]+lis1[len(lis1)-1]\n            if con==a and (len(lis1)!=1 ):\n                lis.append(i)\n    return lis"]