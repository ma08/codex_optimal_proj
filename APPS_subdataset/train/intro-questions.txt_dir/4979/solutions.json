["from math import hypot\n\nDIRS = {'\u2190': (0,-1),  '\u2191': (-1,0), '\u2192': (0,1), '\u2193': (1,0),\n        '\u2196': (-1,-1), '\u2197': (-1,1), '\u2198': (1,1), '\u2199': (1,-1)}\n\ndef count_deaf_rats(town):\n    pipper = next( (x,y) for x,r in enumerate(town) for y,c in enumerate(r) if c=='P')\n    return sum( isDeaf(pipper, x,y, *DIRS[c])\n                for x,r in enumerate(town) for y,c in enumerate(r)\n                if c in DIRS )\n\ndef isDeaf(pipper,x,y,dx,dy):\n    dCurrent, dNext = (hypot(*(a-b for a,b in zip(pipper,pos))) for pos in ((x,y),(x+dx,y+dy)))\n    return dCurrent < dNext", "from math import copysign\n\ndirections = {\n    '\u2190': (0, -1),\n    '\u2191': (-1, 0),\n    '\u2192': (0, 1),\n    '\u2193': (1, 0),\n    '\u2196': (-1, -1),\n    '\u2197': (-1, 1),\n    '\u2198': (1, 1),\n    '\u2199': (1, -1),\n}\n\ndef count_deaf_rats(town_square):\n    pi, pj = next((i,j) for i, row in enumerate(town_square) for j, x in enumerate(row) if x == 'P')\n    result = 0\n    for i, row in enumerate(town_square):\n        for j, x in enumerate(row):\n            if x not in directions:\n                continue\n            di, dj = directions[x]\n            if (i+di-pi)**2 + (j+dj-pj)**2 > (i-pi)**2 + (j-pj)**2:\n                result += 1\n    return result", "D = {\n    '\u2196': -1 -1j, '\u2191': -1, '\u2197': -1 +1j,\n    '\u2190':    -1j,          '\u2192':    +1j,\n    '\u2199': +1 -1j, '\u2193': +1, '\u2198': +1 +1j,\n}\ndef count_deaf_rats(town_square):\n    coords = [(i + j * 1j, x) for i, row in enumerate(town_square) for j, x in enumerate(row)]\n    p = next(c for c, x in coords if x == 'P')\n    return sum(abs(c+D.get(x, 0)-p) > abs(c-p) for c, x in coords)", "from math import hypot\n\nmoves = {\"\u2196\": (-1, -1), \"\u2190\": (-1, 0), \"\u2199\": (-1, 1), \"\u2191\": (0, -1), \"\u2193\": (0, 1), \"\u2197\": (1, -1), \"\u2192\": (1, 0), \"\u2198\": (1, 1)}\n\ndef count_deaf_rats(town_square):\n    deaf, (px, py) = 0, next((row.index(\"P\"), y) for y, row in enumerate(town_square) if \"P\" in row)\n    dist = lambda x, y: hypot(px-x, py-y)\n    for y, row in enumerate(town_square):\n        for x, c in enumerate(row):\n            if c in moves:\n                mx, my = moves[c]\n                if dist(x, y) < dist(x+mx, y+my):\n                    deaf += 1\n    return deaf\n", "import math\n\nclass Position:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def distance(self, other):\n        return math.hypot(self.x - other.x, self.y - other.y)\n\nDirection = {\n    '\u2190': lambda position: Position(position.x - 1, position.y),\n    '\u2191': lambda position: Position(position.x, position.y - 1),\n    '\u2192': lambda position: Position(position.x + 1, position.y),\n    '\u2193': lambda position: Position(position.x, position.y + 1),\n    '\u2196': lambda position: Position(position.x - 1, position.y - 1),\n    '\u2197': lambda position: Position(position.x + 1, position.y - 1),\n    '\u2198': lambda position: Position(position.x + 1, position.y + 1),\n    '\u2199': lambda position: Position(position.x - 1, position.y + 1)\n}\nPIEP_PIPER = 'P'\n\nclass Rat:\n    def __init__(self, position, move):\n        self.position = position\n        self.move = move\n\n    def is_deaf(self, piper):\n        current_distance = piper.distance(self.position)\n        distance_after_one_step = piper.distance(self.move(self.position))\n        return current_distance - distance_after_one_step < 0\n\ndef count_deaf_rats(town_square):\n    rats = []\n    piper = None\n    for y, line in enumerate(town_square):\n        for x, cell in enumerate(line):\n            if cell in Direction:\n                rats.append(Rat(Position(x, y), Direction[cell]))\n            elif cell == PIEP_PIPER:\n                piper = Position(x, y)\n    return len([rat for rat in rats if rat.is_deaf(piper)])", "def count_deaf_rats(board):\n    o, p = next([i, j] for i, l in enumerate(board) for j, k in enumerate(l) if board[i][j] == 'P')\n    distance = lambda x,y:((o - x) ** 2 + (p - y) ** 2) ** 0.5\n    d = {'\u2190':(0, -1), '\u2191':(-1, 0), '\u2192':(0, 1), '\u2193':(1, 0), '\u2196':(-1, -1), '\u2197':(-1, 1), '\u2198':(1, 1), '\u2199':(1, -1)}\n    return sum(distance(i + d[l][0], k + d[l][1]) > distance(i,k) for i,j in enumerate(board) for k,l in enumerate(j) if l in \"\u2190\u2191\u2192\u2193\u2196\u2197\u2198\u2199\")", "from math import hypot\n\nDIRS = {'\u2190': (0,-1),  '\u2191': (-1,0), '\u2192': (0,1), '\u2193': (1,0),\n        '\u2196': (-1,-1), '\u2197': (-1,1), '\u2198': (1,1), '\u2199': (1,-1)}\n\ndef count_deaf_rats(town):\n    pipper = next( (x,y) for x,r in enumerate(town) for y,c in enumerate(r) if c=='P')\n    return sum( isDeaf(pipper, x,y, *DIRS[c])\n                for x,r in enumerate(town) for y,c in enumerate(r)\n                if c in DIRS )\n\ndef isDeaf(pipper,x,y,dx,dy):\n    dPipper, dNext = (hypot(*(a-b for a,b in zip(pipper,pos))) for pos in ((x,y),(x+dx,y+dy)))\n    return dPipper < dNext", "deltas = dict(zip(\"\u2190\u2191\u2192\u2193\u2196\u2197\u2198\u2199\", (-1,-1j,1,1j,-1-1j,1-1j,1+1j,-1+1j)))\n\ndef count_deaf_rats(town_square):\n    ii,jj = list(range(len(town_square[0]))),list(range(len(town_square)))\n    p = next(complex(i,j) for i in ii for j in jj if town_square[j][i] == \"P\")\n    return sum( abs(ij+d-p) > abs(ij-p) for ij,d in\n        ((complex(i,j),deltas.get(town_square[j][i],0)) for j in jj for i in ii) )", "rat_dirs = {\n  '\u2190': (-1, 0),\n  '\u2191': (0, -1),\n  '\u2192': (1, 0),\n  '\u2193': (0, 1),\n  '\u2196': (-1, -1),\n  '\u2197': (1, -1),\n  '\u2198': (1, 1),\n  '\u2199': (-1, 1)\n }\n  \ndef find_piper(town_square, width, height):\n  for y in range(height):\n    for x in range(width):\n      if town_square[y][x] == 'P':\n        return x, y\n  return -1, -1 \n  \ndef is_rat_deaf(rx, ry, px, py, c):\n  dx, dy = px - rx, py - ry\n  cx, cy = rat_dirs[c]\n  return cx * dx + cy * dy <= 0\n  \ndef count_deaf_rats(town_square):\n  width, height = len(town_square[0]), len(town_square)\n  px, py = find_piper(town_square, width, height)\n  num_deaf = 0\n  \n  for y in range(height):\n    for x in range(width):\n      c = town_square[y][x]\n      if c in rat_dirs and is_rat_deaf(x, y, px, py, c):\n        num_deaf += 1\n  \n  return num_deaf\n", "def count_deaf_rats(a):\n    d = [(i, j) for i in range(-1, 2) for j in range(-1, 2) if i or j]\n    d = {x:d[i] for i, x in enumerate(\"\u2196\u2191\u2197\u2190\u2192\u2199\u2193\u2198\")}\n    p, r = divmod(\"\".join(a).index(\"P\"), len(a[0])), 0\n    for i, x in enumerate(a):\n        for j, y in enumerate(x):\n            if y not in \" P\":\n                z = d[y]\n                n = abs(i - p[0] + (j - p[1]) * 1j)\n                m = abs(i + z[0] - p[0] + (j + z[1] - p[1]) * 1j)\n                if n < m: r += 1\n    return r"]