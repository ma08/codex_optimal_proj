["def balancedNum(n):\n    s = str(n)\n    l = (len(s)-1)//2\n    same = len(s) < 3 or sum(map(int, s[:l])) == sum(map(int, s[-l:]))\n    return \"Balanced\" if same else \"Not Balanced\"\n\nbalanced_num = balancedNum", "def balanced_num(number):\n    number = [int(n) for n in str(number)]\n    left, right = 0, 0\n  \n    while len(number) > 2 :\n        left += number.pop(0)\n        right += number.pop(-1)\n\n    return \"Balanced\" if left == right else \"Not Balanced\"\n\n", "def balanced_num(number):\n    stg = str(number)\n    half = (len(stg) - 1) // 2\n    diff = sum(int(stg[i]) - int(stg[-1-i]) for i in range(half))\n    return \"Not Balanced\" if diff else \"Balanced\"", "def balanced_num(n):\n    return '%sBalanced' % ( 'Not ' if (sum(int(e) for e in str(n)[:(len(str(n))+1)//2-1]) !=  sum(int(e) for e in str(n)[(len(str(n)))//2+1:])) else '' ) ", "def addsides(num):\n    output = 0\n    print(num)\n    if num == \"\":\n        return True\n    num = int(num)\n    while num !=0:\n        output += num%10\n        num = num //10\n    return output\n    \ndef balanced_num(number):\n    number = str(number)\n    if len(number) %2 !=0:\n        print(number)\n        middle = None\n        num1 = number[0:len(number)//2]\n        num2 = number[len(number)//2+1:len(number)]\n        print(num1,num2)\n        if num1 == None or num2 == None:\n            return \"Balanced\"\n        if addsides(num1) == addsides(num2):\n            return \"Balanced\"\n        else:\n            return \"Not Balanced\"\n    else:\n        num1 = number[0:len(number)//2-1]\n        num2 = number[len(number)//2+1:len(number)]\n        if num1 == None or num2 == None:\n            return \"Balanced\"\n        if addsides(num1) == addsides(num2):\n            return \"Balanced\"\n        else:\n            return \"Not Balanced\"\n        print(num1,num2)", "def balanced_num(n):\n    if n < 100: return 'Balanced'\n    n = [int(i) for i in str(n)]  \n    return 'Balanced' if sum(n[:int(len(n)/2)-1+(len(n)%2)]) == sum(n[int(len(n)/2)+1:]) else 'Not Balanced'", "def balanced_num(number):\n    st_num = str(number)\n    if number < 100:\n        return 'Balanced'\n    half_len = len(st_num)//2 if len(st_num)%2 != 0 else (len(st_num)-1)//2\n    right_sum, left_sum = 0, 0\n    for i in range(half_len):\n        left_sum += int(st_num[i])\n        right_sum += int(st_num[-1-i])\n    return 'Balanced' if left_sum == right_sum else 'Not Balanced'\n", "balanced_num = lambda n:\"Balanced\" if sum([int(x) for x in str(n)[:int(len(str(n))/2-0.5)]])==sum([int(x) for x in str(n)[int(len(str(n))/2+1):]]) else \"Not Balanced\"\n", "def balanced_num(number):\n    d = list(map(int, str(number)))\n    part = (len(d)-1)//2\n    return 'Not '*(sum(d[:part]) != sum(d[-part:]) and len(d) > 2) + 'Balanced'", "def balanced_num(number):\n    s = str(number)\n    part = (len(s)-1)//2\n    s1 = sum(map(int, s[:part]))\n    s2 = sum(map(int, s[-part:]))\n    return 'Not '*(s1 != s2 and len(s) > 2) + 'Balanced'", "def balanced_num(number: int) -> str:\n    d = list(map(int, str(number)))\n    return \"Balanced\" if sum(d[:(len(d) - 1) // 2]) == sum(d[len(d) // 2 + 1:]) else \"Not Balanced\"\n", "import math\ndef balanced_num(number):\n    s = []\n    while number > 0:\n        d = number % 10\n        s.append(d)\n        number = math.floor(number / 10)\n    l = len(s)\n    m = (l - 1)/2\n    left = math.floor(m)\n    right = math.ceil(m)\n    leftSum = 0\n    rightSum = 0\n    for i in range(l):\n        n = s[i]\n        if i < left:\n            leftSum += n\n        elif i > right:\n            rightSum += n\n    if rightSum == leftSum:\n        return \"Balanced\"\n    return \"Not Balanced\"", "def balanced_num(number):\n    a = str(number)\n    b = a[:len(a)//2]\n    c = a[len(a)//2+1:]\n    d = a[:len(a)//2-1]\n    if len(a)%2==1:\n        if sum([int(i) for i in b]) == sum([int(x) for x in c]):\n            return \"Balanced\"\n        return \"Not Balanced\"\n    if len(a)%2==0:\n        if sum([int(i) for i in d]) == sum([int(x) for x in c]):\n            return \"Balanced\"\n        return \"Not Balanced\"", "def balanced_num(n):\n    n = [int(i) for i in str(n)]\n    m = [len(n)//2-1, len(n)//2] if len(n) % 2 ==0 else [len(n)//2]   # middle digits positions\n    return \"Balanced\" if sum(n[:m[0]])==sum(n[m[-1]+1:]) else \"Not Balanced\"", "def balanced_num(number):\n    b = list(str(number))\n    if len(str(number)) % 2 != 0:\n        i = len(str(number)) // 2\n        bsum = 0\n        asum = 0\n        for n in b[0:i]:\n            bsum += int(n)\n        for n in b[-1:i:-1]:\n            asum += int(n)\n        if bsum == asum:\n            return \"Balanced\"\n        else:\n            return \"Not Balanced\"\n    else:\n        i = len(str(number)) // 2\n        bsum = 0\n        asum = 0\n        for n in b[0:i-1]:\n            bsum += int(n)\n        for n in b[-1:i:-1]:\n            asum += int(n)\n        if bsum == asum:\n            return \"Balanced\"\n        else:\n            return \"Not Balanced\"", "def balanced_num(number):\n    l=len(str(number))\n    List=list(str(number))\n    if l==1 or l==2:return('Balanced')\n    else:\n        sum1=sum2=0\n        if l%2==0:\n            for i in range(0,l//2-1):\n                j=-i-1\n                sum1+=int(List[i])\n                sum2+=int(List[j])\n        else:\n            for i in range(0,l//2):\n                j=-i-1\n                sum1+=int(List[i])\n                sum2+=int(List[j])\n    return'Balanced' if sum1==sum2 else 'Not Balanced'", "def balanced_num(number):\n    if len(str(number)) == 1:\n        return \"Balanced\"\n    \n    nlen = len(str(number))\n    number = str(number)\n    mid = nlen//2\n    left = right = 0\n    \n    for i in range(nlen-1,mid,-1):\n        right += int(number[i])\n    \n    if(nlen%2==0): mid = mid - 1\n    \n    for i in range(0,mid):\n        left += int(number[i])\n    \n    if left == right: return \"Balanced\"\n    \n    return \"Not Balanced\"", "def balanced_num(number):\n    number = str(number)\n    len_num = len(number)\n    balanced = sum(map(int, number[:(len_num//2) - (len_num%2 == 0)])) == sum(map(int, number[len_num//2 + 1:]))\n    return 'Balanced' if balanced else 'Not Balanced'", "def balanced_num(num):\n    str_num = str(num)\n    len_num = len(str_num)\n    if len_num % 2 != 0:\n        nums = str_num[0:int(len_num/2)], str_num[int(len_num/2+1):len_num]\n        print((nums,sum(list(map(int, nums[0]))),sum(list(map(int, nums[1])))))\n        return \"Balanced\" if sum(list(map(int, nums[0]))) == sum(list(map(int, nums[1]))) else \"Not Balanced\"\n        \n    else:\n        nums = str_num[0:int(len_num/2-1)], str_num[int(len_num/2+1):len_num]\n        print((nums,sum(list(map(int, nums[0]))),sum(list(map(int, nums[1])))))\n        return \"Balanced\" if sum(list(map(int, nums[0]))) == sum(list(map(int, nums[1]))) else \"Not Balanced\"\n        \n\n", "def balanced_num(number):\n    string_n = str(number)\n    l = len(string_n)\n    middle = int(l/2)\n    sum_left, sum_right = 0, 0\n    if l%2 == 0:\n        for n in string_n[:middle-1]:\n            sum_left += int(n)\n        for n in string_n[middle+1:]:\n            sum_right += int(n)\n    else:\n        for n in string_n[:middle]:\n            sum_left += int(n)\n        for n in string_n[middle+1:]:\n            sum_right += int(n)\n        \n    return \"Balanced\" if sum_left == sum_right else \"Not Balanced\"", "def balanced_num(number):\n  n = list(map(int,str(number)))\n  l = (len(n)-1,len(n)-2)[len(n) % 2 == 0]//2\n  return \"Balanced\" if number <=99 else (\"Not Balanced\",\"Balanced\")[sum(n[:l]) == sum(n[-l:])]\n", "def balanced_num(number):\n    n = (len(str(number)) - 1) // 2\n    return 'Balanced' if n <= 0 or sum(int(i) for i in str(number)[:n]) == sum(int(j) for j in str(number)[-n:]) else 'Not Balanced'", "def balanced_num(num):\n    digits = [int(digit) for digit in str(num)]\n    half = (len(digits) - 1) // 2\n    left_sum, right_sum = sum(digits[:half]), sum(digits[-half:])\n    return ('' if num < 100 or left_sum == right_sum else 'Not ') + 'Balanced'", "balanced_num=lambda n: \"Not Balanced\" if (lambda r: sum(int(d) for d in r[:(len(r)-1)//2])-sum(int(d) for d in r[len(r)//2+1:]))(str(n)) else \"Balanced\"", "def balanced_num(number):\n    digits = [int(digit) for digit in str(number)]\n    n = len(digits)\n    \n    middle = [n // 2, n // 2 + 1] if n % 2 == 1 else [n // 2 - 1, n // 2 + 1]\n    \n    left = digits[:middle[0]]\n    right = digits[middle[1]:]\n    \n    return \"Balanced\" if sum(left) == sum(right) else \"Not Balanced\"", "def balanced_num(number):\n    number = str(number)\n    l1 = len(number)\n    l2 = int((l1-0.5)//2)\n    \n    return ('Not Balanced', 'Balanced')[l1 < 3 or sum(map(int, number[:l2])) == sum(map(int, number[-l2:]))]\n    \n", "def balanced_num(number):\n    l = []\n    brk = (len(str(number)) // 2)\n    \n    if len(str(number)) == 2 or len(str(number)) == 1:\n        return \"Balanced\"    \n    \n    for i in str(number):\n      l.append(int(i))\n    \n    if len(l) % 2 == 0:\n      left = l[:brk-1]\n      right = l[brk+1:]\n      \n      if sum(left) == sum(right):\n        return \"Balanced\"\n      else:\n        return \"Not Balanced\"\n      \n    if len(l) % 2 != 0:\n      left = l[:brk]\n      right = l[brk+1:]\n      \n      if sum(left) == sum(right):\n        return \"Balanced\"\n      else:\n        return \"Not Balanced\"\n        \n    pass", "def balanced_num(n):\n    if len(str(n)) % 2:\n        t = len(str(n)) // 2\n    else:\n        t = (len(str(n)) - 1) // 2\n    return ['Not Balanced', 'Balanced'][sum([int(x) for x in str(n)[:t]]) == sum([int(c) for c in str(n)[-t:]]) or t < 1]", "def balanced_num(n):\n    lst = [int(i) for i in str(n)]\n    return \"Balanced\" if sum(lst[:int(((len(lst)-1)/2))]) == sum(lst[int(((len(lst)+2)/2)):]) else \"Not Balanced\"", "def balanced_num(number):\n    string_number = str(number)\n    if len(string_number) <=2: return \"Balanced\"\n    list_number = [int(i) for i in list(str(string_number))]\n    if len(string_number) ==3: \n        if list_number[0] == list_number[-1]: return \"Balanced\"\n        else: return \"Not Balanced\"\n    if len(list_number)%2==0:\n        middle_number = int(len(list_number)//2)\n        if sum(list_number[:middle_number-1]) == sum(list_number[middle_number+1:]): return \"Balanced\"\n        else: return \"Not Balanced\"           \n    else:\n        middle_number = int(len(list_number)//2+1)\n        if sum(list_number[:middle_number-1]) == sum(list_number[middle_number:]): return \"Balanced\"\n        else: return \"Not Balanced\"", "def balanced_num(number):\n    num_string = str(number)\n    length = len(num_string)\n\n    if length < 3:\n        return \"Balanced\"\n\n    split_at = length / 2 - 1 if length % 2 == 0 else length // 2\n\n    sum_one = 0\n    for num in num_string[: int(split_at)]:\n        sum_one += int(num)\n    \n    sum_two = 0\n    for num in num_string[-int(split_at) :]:\n        sum_two += int(num)\n    \n    return \"Balanced\" if sum_one == sum_two else \"Not Balanced\"", "def balanced_num(number):\n    num_length = len(str(number))\n    if num_length <= 2:\n        return \"Balanced\"\n    \n    center = num_length // 2\n    num_str = str(number)\n    \n    left = 0\n    if num_length % 2 == 1:\n        left = sum(map(int,num_str[:center]))\n    else:\n        left = sum(map(int,num_str[:center-1]))\n    \n    right = sum(map(int,num_str[center+1:]))\n    \n    if left == right:\n            return \"Balanced\"\n    return \"Not Balanced\"", "def balanced_num(number):\n    s = list(map(int, str(number)))\n    return ['Not Balanced','Balanced'][sum(s[:(len(s)-1)//2]) == sum(s[((len(s)-1)//2)+1+(len(s)%2==0):])]", "def balanced_num(number):\n    \n    num_len = len(str(number))\n\n    left_tot = 0\n    right_tot = 0\n    \n    \n    if num_len <= 2:\n        return \"Balanced\"\n    else:\n        if num_len % 2 == 1:\n            width = num_len // 2\n        else:\n            width = (num_len // 2) - 1\n        \n        #left hand side\n        left = str(number)[:width]\n        for pos_l, left_sum in enumerate(left):\n            left_tot += int(left_sum)\n        \n        #right hand side\n        right = str(number)[-1 * width:]\n        for pos_r, right_sum in enumerate(right):\n            right_tot += int(right_sum)\n        \n    if left_tot == right_tot:\n        return \"Balanced\"\n    else:\n        return \"Not Balanced\"\n", "def balanced_num(number):\n    middle = int(len(str(number))/2)\n    left = []\n    right = []\n    l = []\n    r = []\n    \n    if len(str(number)) == 1 or len(str(number)) == 2:\n        return 'Balanced'\n    \n    elif len(str(number)) % 2 == 0:\n        number = str(number)\n        left = number[:middle-1]\n        right = number[middle+1:]\n        for num in left:\n            l.append(int(num))\n        for num in right:\n            r.append(int(num))\n        if sum(l) == sum(r):\n            return 'Balanced'\n        return 'Not Balanced'\n    else:\n        number = str(number)\n        left = number[:middle]\n        right = number[middle+1:]\n        for num in left:\n            l.append(int(num))\n        for num in right:\n            r.append(int(num))\n        if sum(l) == sum(r):\n            return 'Balanced'\n        return 'Not Balanced'\n        \n    \n        \n", "def sum(nums):\n    ans = 0\n    for num in nums:\n        ans += int(num)\n    return ans\n\ndef balanced_num(number):\n    number = str(number)\n    even = False\n    middle = len(number) // 2\n    if len(number) % 2 == 1:\n        even = False\n    else:\n        even = True\n    \n    if not even:\n        if sum(number[:middle]) == sum(number[middle + 1:]):\n            return 'Balanced'\n        else:\n            return 'Not Balanced'\n    elif even:\n        if sum(number[:middle - 1]) == sum(number[middle + 1:]):\n            return 'Balanced'\n        else:\n            return 'Not Balanced'", "def balanced_num(number):\n    return 'Balanced' if sum(int(n) for n in str(number)[:len(str(number))//2+1]) == sum(int(n) for n in str(number)[::-1][:len(str(number))//2+1]) else 'Not Balanced'", "def balanced_num(number):\n    if number < 100:\n        return \"Balanced\"\n    \n    if len(str(number))%2:\n        x = str(number)[:len(str(number))//2]\n        y = str(number)[len(str(number))//2+1:]\n        return 'Balanced' if sum([int(i) for i in x])==sum([int(i) for i in y]) else 'Not Balanced'\n\n    elif not len(str(number))%2:\n        x = str(number)[:len(str(number))//2-1]\n        y = str(number)[len(str(number))//2+1:]\n        return 'Balanced' if sum([int(i) for i in x])==sum([int(i) for i in y]) else 'Not Balanced'", "def balanced_num(number):\n    if number < 10:\n        return \"Balanced\"\n    arr = [int(i) for i in str(number)]\n    n = len(arr)\n    if n % 2:\n        if sum(arr[:len(arr)//2]) == sum(arr[len(arr)//2+1:]):\n            return \"Balanced\"\n        return \"Not Balanced\"\n    else:\n        if sum(arr[:len(arr)//2-1]) == sum(arr[len(arr)//2+1:]):\n            return \"Balanced\"\n        return \"Not Balanced\"", "def balanced_num(n):\n    s=[int(i) for i in list(str(n))]\n    l=s[:len(s)//2]\n    r=s[-1:len(s)//2:-1]\n    if len(s)==len(l)*2:\n        l=l[:-1]\n        s=s[:-1]\n    if sum(l)==sum(r):\n        return 'Balanced'\n    else:\n        return 'Not Balanced'", "def balanced_num(n):\n    n, sr, sl = str(n), 0, 0\n    while len(n)>2:\n        sl += int(n[0])\n        sr += int(n[-1])\n        n = n[1:-1]\n    return \"Balanced\" if sr==sl else \"Not Balanced\"", "def balanced_num(number):\n    array = list(map(int, str(number)))\n    if len(array) % 2 == 0:\n        left_side = array[0:int(len(array)/2-1)]\n        right_side = array[int(len(array)/2)+1:len(array)]\n    else:\n        left_side = array[0:int(len(array)/2)]\n        right_side = array[int(len(array)/2)+1:len(array)]\n    left_sum = 0\n    right_sum = 0\n    for i in left_side:\n        left_sum += i\n    for j in right_side:\n        right_sum += j\n\n    if left_sum != right_sum:\n        return \"Not Balanced\" \n    else:\n        return \"Balanced\" ", "def balanced_num(number):\n    s=str(number)\n    if len(s)%2==0:\n        a,b=s[:len(s)//2-1],s[len(s)//2+1:]\n    else:\n        a,b=s[:len(s)//2],s[len(s)//2+1:]\n    return 'Balanced' if sum(int(d) for d in a)==sum(int(d) for d in b) else 'Not Balanced'", "from math import ceil\n\ndef balanced_num(number):\n    if number < 100: return \"Balanced\"\n    digits = [int(ch) for ch in str(number)]\n    middle = ceil(len(digits) / 2) - 1\n    return \"Balanced\" if sum(digits[:middle]) == sum(digits[-middle:]) else \"Not Balanced\"", "def balanced_num(number):\n    st=str(number)\n    if len(st)==1 or len(st)==2:\n        return 'Balanced'\n    elif len(st)>2:\n        if len(st)%2==0:\n            l=st[:int(len(st)/2)-1]\n            r=st[int(len(st)/2)+1:]\n        else:\n            l=st[:int(len(st)/2)]\n            r=st[int(len(st)/2)+1:]\n    topl=lambda t: sum(int(i) for i in t)\n    return 'Balanced' if topl(l)==topl(r) else 'Not Balanced'", "def balanced_num(number):\n    number = str(number)\n    if len(number) % 2 != 0:\n        middle = len(number) // 2\n        leftside = number[:middle]\n        rightside = number[middle+1:]\n        sumofleft = sum(list([int(x) for x in leftside]))\n        sumofright = sum(list(int(x) for x in rightside))\n        if sumofleft == sumofright:\n            return 'Balanced'\n        else:\n            return 'Not Balanced'\n    if len(number) % 2 == 0:\n        middle = len(number) // 2\n        leftside = number[:middle-1]\n        rightside = number[middle+1:]\n        sumofleft = sum(list([int(x) for x in leftside]))\n        sumofright = sum(list(int(x) for x in rightside))\n        if sumofleft == sumofright:\n            return 'Balanced'\n        else:\n            return 'Not Balanced'", "def balanced_num(number):\n    a=str(number)\n    a=list(a)\n    a=[int(x) for x in a]\n    print(a)\n    if len(a)<3 :\n        return \"Balanced\"\n    \n    if len(a)== 3 and a[0]==a[-1] :\n        return \"Balanced\"\n    if len(a)== 3 and a[0]!=a[-1] :\n        return \"Not Balanced\"\n    \n    if len(a)>3 :\n        if len(a)%2==0:\n            ln=int(len(a)/2)\n            print((a[0:ln-1],a[ln+1:]))\n            if sum((a[0:ln-1]))==sum((a[ln+1:])):\n                return \"Balanced\"\n            else:\n                return \"Not Balanced\"\n        if len(a)%2!=0:\n            ln=int(len(a)/2)\n            print((a[0:ln],a[ln+1:]))\n            if sum((a[0:ln]))==sum((a[ln+1:])):\n                return \"Balanced\"\n            else:\n                return \"Not Balanced\"\n", "def balanced_num(number):\n    number = str(number)\n    if len(number) >= 3:\n        return 'Balanced' if sum([int(x) for x in number[0:round(len(number) / 2 + .49) - 1]]) == sum([int(x) for x in number[-round(len(number) / 2 + .49) + 1:]]) else 'Not Balanced'\n    else:\n        return 'Balanced'", "def balanced_num(number):\n    if len(str(number)) % 2 == 1:\n        mid = len(str(number)) // 2\n        return \"Balanced\" if sum([int(x) for x in str(number)[:mid]]) == sum([int(x) for x in str(number)[mid+1:]]) else \"Not Balanced\"\n    else:\n        mid = mid = len(str(number)) // 2\n        return \"Balanced\" if sum([int(x) for x in str(number)[:mid-1]]) == sum([int(x) for x in str(number)[mid+1:]]) else \"Not Balanced\"", "def balanced_num(number):\n    n = str(number)\n    L = len(n)\n    if L % 2 == 1:\n        m = (L - 1) // 2\n        n = n[:m] + n[m+1:]\n    else:\n        m = L // 2\n        n = n[:m-1] + n[m+1:]\n    \n    L = len(n)\n    left, right = n[:L//2], n[L//2:]\n    \n    \n    if sum([int(i) for i in left]) == sum([int(i) for i in right]):\n        return 'Balanced'\n    else:\n        return 'Not Balanced'", "def balanced_num(number):\n    array = [int(x) for x in str(number)]\n    if len(array) % 2 == 0:\n        print(len(array) // 2)\n        print(sum(array[0: len(array) // 2 - 1]))\n        if sum(array[0: (len(array) // 2 - 1)]) == sum(array[(len(array) // 2 + 1)::]):\n            return 'Balanced'\n        return 'Not Balanced'\n    if sum(array[0: (len(array) // 2)]) == sum(array[(len(array) // 2) + 1:: ]):\n        return 'Balanced'\n    return 'Not Balanced'", "def balanced_num(numbers):\n    args=[]\n    string_n=str(numbers)\n    for i in string_n:\n        args.append(int(i))\n    last_index=len(args)-1 # get the last index number of the list\n    if len(args)%2==0:\n        first_index=last_index//2 # get the indexs of two characters in the middle of the list\n        second_index=last_index//2+1\n        if sum(args[0:first_index])==sum(args[second_index+1:]): #use slice to get characters from left and right side \n            return 'Balanced'\n        else:\n            return 'Not Balanced'\n    else:\n        index=last_index//2\n        if sum(args[0:index])==sum(args[index+1:]):\n            return 'Balanced'\n        else:\n            return 'Not Balanced'", "def balanced_num(num):\n    num_string = str(num)\n    nums_left_str = \"\"\n    nums_right_str = \"\"\n    left_sum = 0\n    right_sum = 0\n    return_string = \"\"\n    middle_index = 0\n    middle_index = len(num_string) // 2\n    if len(num_string) % 2 != 0:\n        nums_left_str = num_string[:middle_index]\n        nums_right_str = num_string[middle_index + 1:]\n        print(\"it's odd\")\n    else:\n        nums_left_str = num_string[:middle_index - 1]\n        nums_right_str = num_string[middle_index + 1:]\n        print(\"it's even\")\n    print(\"nums_left_str == \" + nums_left_str)\n    print(\"nums_right_str == \" + nums_right_str)\n    for i in range(len(nums_left_str)):\n        left_sum += int(nums_left_str[i])\n    for i in range(len(nums_right_str)):\n        right_sum += int(nums_right_str[i])\n    if right_sum == left_sum:\n        return_string = \"Balanced\"\n    else:\n        return_string = \"Not Balanced\"\n    return return_string", "def balanced_num(n):\n    sn = str(n)\n    mn = len(sn)//2 \n    fn = sum(map(int,sn[:mn-1]))\n    scn = sum(map(int,sn[mn+1:]))\n    if len(sn)%2: scn,fn = sum(map(int,sn[mn+1:])),sum(map(int,sn[:mn]))\n    print(n,fn,scn)\n    return \"Balanced\" if n < 100 or fn ==scn else \"Not Balanced\"", "import math\n\ndef balanced_num(number):\n    num=[int(x) for x in str(number)]\n    a=0\n    b=0\n    if len(num)%2==1:\n        a=sum(num[:len(num)//2])\n        b=sum(num[len(num)//2+1:])\n    else:\n        a=sum(num[:len(num)//2-1])\n        b=sum(num[len(num)//2+1:])\n    if a==b:\n        return \"Balanced\"\n    else:\n        return \"Not Balanced\"", "def balanced_num(n):\n    rs = list(map(int, str(n)))\n    if len(rs) == 1 or len(rs) == 2:\n        return 'Balanced'\n    else:\n        if len(rs) % 2 == 0 and len(rs) > 2:\n            if sum(rs[:int(len(rs)/2)-1]) == sum(rs[-(int(len(rs)/2)-1):]):\n                return 'Balanced'\n            else:\n                return 'Not Balanced'\n        else:\n            if sum(rs[:int(len(rs)/2)]) == sum(rs[-(int(len(rs)/2)):]):\n                return 'Balanced'\n            else:\n                return 'Not Balanced'  ", "def balanced_num(number):\n    print(number) \n    s = str(number)\n    ln = len(s)//2\n    if len(s)%2==1:\n        l = s[:ln]\n        r = s[ln+1:]\n    else:\n        l = s[:ln-1]\n        r = s[ln+1:]\n    print((\"l= \",l, \"r= \",r))\n    res = sum([int(x) for x in l]) == sum([int(x) for x in r])\n\n    if res:\n        return 'Balanced'\n    else:\n        return 'Not Balanced'\n", "def balanced_num(number):\n    if number <= 99:\n        return \"Balanced\"\n    s = str(number)\n    print(number)\n\n    n = int((len(s) - 1) / 2)\n    return \"Balanced\" if sum(int(c) for c in s[:n]) == sum(int(c) for c in s[-n:]) else \"Not Balanced\"\n", "def balanced_num(x):\n    b=str(x)\n    a=x\n    q=0\n    w=0\n    if len(b)%2!=0:\n        for i in b[0:int((len(b)/2)-0.5)]:\n            q+=int(i)\n        for i in b[int((len(b)/2)+0.5):]:\n            w+=int(i)\n    else:\n        for i in b[0:int((len(b)/2)-1)]:\n            q+=int(i)\n        for i in b[int((len(b)/2)+1):]:\n            w+=int(i)\n    if q==w:\n        return 'Balanced'\n    else:\n        return 'Not Balanced'", "def balanced_num(number):\n    n=str(number)\n    l=(len(n)-1)//2\n    same=len(n)<3 or sum(map(int,n[:l]))==sum(map(int,n[-l:]))\n    return 'Balanced' if same else 'Not Balanced'", "def balanced_num(number):\n    num = str(number)\n    if len(num) < 3:\n        return 'Balanced'\n    size = len(num) // 2 - (not len(num) % 2)\n    lsum = sum(map(int, num[:size]))\n    rsum = sum(map(int, num[-size:]))\n    return 'Balanced' if lsum == rsum else 'Not Balanced'", "from math import ceil\ndef balanced_num(number):\n    sum1,sum2 = 0,0\n    number = list(str(number))\n    for i in range(0,int(ceil(len(number)/2)-1)):\n        sum1 += int(number[i])\n        sum2 += int(number[-1-i])\n    if sum1 ==sum2:\n        return 'Balanced'\n    return 'Not Balanced'", "def balanced_num(number):\n    number = [int(n) for n in str(number)]\n    sleft = 0\n    sright = 0\n    \n    while len(number) > 2 :\n        sleft += number.pop(0)\n        sright += number.pop(-1)\n\n    return \"Balanced\" if sleft == sright else \"Not Balanced\"", "def balanced_num(number):\n    l=len(str(number))\n    a=str(number)[:(l-1)//2]\n    b=str(number)[l//2+1:]\n    #return a,b\n    if sum(int(i) for i in a)==sum(int(i) for i in b):\n        return 'Balanced'\n    return 'Not Balanced'", "def balanced_num(number):\n    lstofnum = [int(num) for num in str(number)]\n    left, right = 0, 0\n\n    while len(lstofnum) > 2:\n        left += lstofnum.pop(0)\n        right += lstofnum.pop(-1)\n\n\n    return \"Balanced\" if left == right else \"Not Balanced\"\n\n", "def balanced_num(number):\n    inputlst = list(str(number))\n    length = (len((str(number))))\n\n\n    if length % 2 != 0:\n        middlechartoremove = int(length / 2)\n        del inputlst[middlechartoremove]\n        inputlst = list(map(int, inputlst))\n        oneside = inputlst[middlechartoremove:]\n        anotherside = inputlst[:middlechartoremove]\n        if sum(oneside) == sum(anotherside):\n            return \"Balanced\"\n        else:\n            return \"Not Balanced\"\n\n    else:\n        middlechartoremove = int(length / 2)\n        secondchartoremove = middlechartoremove - 1\n        del inputlst[middlechartoremove]\n        inputlst = list(map(int, inputlst))\n        oneside = inputlst[secondchartoremove +1:]\n        anotherside = inputlst[:secondchartoremove:]\n\n        if sum(oneside) == sum(anotherside):\n            return \"Balanced\"\n        else:\n            return \"Not Balanced\"\n\n", "def balanced_num(number):\n    n = str(number)\n    length = len(n)\n    b = sum(int(x) for x in n[:(length-1)//2]) == sum(int(x) for x in n[(length+2)//2:])\n    string = \"\" if b else \"Not \"\n    return f\"{string}Balanced\"", "def balanced_num(number):\n    number1 = str(number)\n    SliceNumber = int((len(number1)-1)/2)\n    Left_Of_Middle = list(number1[:SliceNumber])\n    Right_Of_Middle = list(number1[len(number1)-SliceNumber:])\n   \n    Left_Of_Middle = list(map(int, Left_Of_Middle))\n    Right_Of_Middle = list(map(int, Right_Of_Middle))\n\n    if sum(Left_Of_Middle) == sum(Right_Of_Middle):\n        return(\"Balanced\")\n    else:\n        return(\"Not Balanced\")", "def balanced_num(number):\n    str_n = str(number)\n    len_n = len(str_n)\n    mid = len_n // 2\n    if len_n % 2 != 0:\n        flag = sum(int(i) for i in str_n[:mid]) == sum(int(i) for i in str_n[mid + 1:])\n    else:\n        flag = sum(int(i) for i in str_n[:mid - 1]) == sum(int(i) for i in str_n[mid + 1:])\n    \n    return 'Balanced' if flag else 'Not Balanced'", "def balanced_num(number):\n    num = str(number)\n    if len(num) % 2 == 0:\n        leftind = (len(num)/2)-1\n        rightind = (len(num)/2)+1\n    else:\n        leftind = len(num)//2\n        rightind = (len(num)/2)+1\n    l = num[:int(leftind)]\n    r = num[int(rightind):]\n    if sum(int(x) for x in l) == sum(int(x) for x in r):\n        return \"Balanced\"\n    else:\n        return \"Not Balanced\"", "from math import floor\ndef balanced_num(number):\n    summ_1 = 0\n    summ_2 = 0\n    center = 0\n    value = len(str(number))\n    if value < 3:\n        return \"Balanced\"\n    if value % 2 == 0:\n        center = int(len(str(number))/2)\n        center_2 = int((len(str(number))/2)-1)\n        for i in range(center_2):\n            if i != center or i != center_2:\n                summ_1 += int(str(number)[i])\n                summ_2 += int(str(number)[len(str(number))-i-1])\n\n    else:\n        center = floor(len(str(number))/2)\n        for j in range(center):\n            if j != int(center):\n                summ_1 += int(str(number)[j])\n                summ_2 += int(str(number)[len(str(number))-j-1])\n    if summ_1 == summ_2:\n        return \"Balanced\"\n    else:\n        return \"Not Balanced\"", "def balanced_num(number):\n    s,l=str(number),len(str(number))\n    return \"Balanced\" if sum([int(x) for x in s[:(l-1)//2]])==sum([int(x) for x in s[l//2+1:]]) else \"Not Balanced\"", "def balanced_num(n):\n    n = '0'+str(n)+'0'\n    return \"Balanced\" if sum(map(int,n[:len(n)//2-(len(n)%2==0)]))==sum(map(int,n[len(n)//2+1:])) else \"Not Balanced\"", "def balanced_num(number : int):\n    if len(str(number)) < 3:\n        return \"Balanced\"\n    elif len(str(number)) % 2 == 1:\n        str1, str2 = str(number)[:(len(str(number)) // 2)], str(number)[((len(str(number)) // 2) + 1):]\n    elif len(str(number)) % 2 == 0:\n        str1, str2 = str(number)[:((len(str(number)) // 2) - 1)], str(number)[((len(str(number)) // 2) + 1):]\n    res1, res2 = 0, 0\n    for i in str1:\n        res1 += int(i)\n    for i in str2:\n        res2 += int(i)\n    print((str1,\"<->\",str2))\n    if res1 == res2:\n        return \"Balanced\"\n    return \"Not Balanced\"\n\n", "def balanced_num(number):\n    num_str = str(number)\n    length = len(num_str)\n    middle = int(length//2)\n\n    if length % 2 == 0:\n        left = 0\n        right = 0\n        for i in range(0, middle-1, 1):\n            left += int(num_str[i])\n        for j in range(middle+1, length, 1):\n            right += int(num_str[j])\n        if left == right:\n            return \"Balanced\"\n        else:\n            return \"Not Balanced\"\n\n    if length % 2 != 0:\n        left = 0\n        right = 0\n        for i in range(0, middle, 1):\n            left += int(num_str[i])\n        for j in range(middle+1, length, 1):\n            right += int(num_str[j])\n        if left == right:\n            return \"Balanced\"\n        else:\n            return \"Not Balanced\"", "def balanced_num(number):\n    nums = str(number)\n    \n    if len(nums) < 3:\n        return 'Balanced'\n    \n    if len(nums) % 2 == 0:\n        mid = (len(nums) - 1) // 2\n\n        rigth_num = nums[mid:]\n        left_num = nums[:mid]\n        \n        r_sum = [int(i) for i in list(rigth_num[2:])]\n        l_sum = [int(i) for i in list(left_num)]\n        \n        if sum(l_sum) == sum(r_sum):\n            return 'Balanced'\n        else:\n            return 'Not Balanced'\n    else:\n        mid = (len(nums)) // 2\n\n        r_sum = [int(i) for i in list(nums[:mid])]\n        l_sum = [int(i) for i in list(nums[mid+1:])]\n        \n        if sum(l_sum) == sum(r_sum):\n            return 'Balanced'\n        else:\n            return 'Not Balanced'", "def balanced_num(number):\n    CountNombers = len(str(number)) // 2 - 1 if len(str(number)) % 2 == 0 else len(str(number)) // 2\n    LeftPart = [int(k) for k in str(number)[:CountNombers]]\n    RightPart = [int(k) for k in str(number)[:CountNombers: -1]]\n    return 'Balanced' if sum(LeftPart) == sum(RightPart) and len(LeftPart) == len(RightPart) or \\\n                sum(LeftPart) == sum(RightPart[:-1]) and len(LeftPart) == len(RightPart) - 1 else 'Not Balanced'", "def balanced_num(number):\n    if number<100:\n        return 'Balanced'\n    else:\n        a1,a2=0,0\n        if len(str(number))%2==0:\n            for i in range(0,len(str(number))//2-1):\n                a1+=int(str(number)[i])\n                a2+=int(str(number)[len(str(number))-i-1])\n        else:\n            for i in range(0,len(str(number))//2+1):\n                a1+=int(str(number)[i])\n                a2+=int(str(number)[len(str(number))-i-1])\n        if a1==a2:\n            return 'Balanced'\n        else:\n            return 'Not Balanced'\n", "def balanced_num(number):\n    middle = len(str(number)) // 2 - 1 if len(str(number))%2 == 0 else len(str(number)) // 2\n    first_half = [int(i) for i in str(number)][:middle]\n    second_half = [int(i) for i in str(number)][::-1][:middle]\n    return 'Balanced' if sum(first_half) == sum(second_half) or number < 100 else 'Not Balanced'", "def balanced_num(number):\n    list = [int(digits) for digits in str(number)]\n    \n    even_lower = (len(list)//2)-1\n    even_upper = len(list)//2\n    index_odd = (len(list)-1)//2\n    \n    for nums in list:\n        if len(list) %2 ==0:\n            if sum(list[:even_lower]) == sum(list[even_upper+1:]):\n                return \"Balanced\"\n            else:\n                return \"Not Balanced\"\n        if len(list) %2 ==1:\n            if sum(list[:index_odd]) == sum(list[index_odd+1:]):\n                return \"Balanced\"\n            else:\n                return \"Not Balanced\"", "def balanced_num(number):\n    x = str(number)\n    z = [int(i) for i in x]\n    \n    if len(z) <= 2:\n        return \"Balanced\"\n    elif len(z) == 3:\n        return \"Balanced\" if z[0] == z[-1] else \"Not Balanced\"\n    else:\n        if len(z) > 3 and len(z) % 2 == 0:\n            middle_1 = int(len(z)/2) - 1\n            middle_2 = int(len(z)/2)\n            first, mid, second = z[:middle_1], z[middle_1:middle_2+1], z[middle_2+1:]\n            return \"Balanced\" if sum(first) == sum(second) else \"Not Balanced\"\n        elif len(z) > 3 and len(z) % 2 != 0:\n            middle = int(len(z)//2)\n            first, mid, second = z[:middle], z[middle], z[middle+1:]\n            return \"Balanced\" if sum(first) == sum(second) else \"Not Balanced\"", "def balanced_num(number):\n    string = str(number)\n    length = len(string)\n    left = None\n    right = None\n    if length %2 == 0:\n        left = string[:int(length/2) -1]\n        right = string[int(length/2) +1:]\n    else:\n        left = string[:int(length/2)]\n        right = string[int(length/2) +1:]\n    sum_left = 0\n    for i in left:\n        sum_left = int(i) + sum_left\n    sum_right = 0\n    for j in right:\n        sum_right = int(j) + sum_right\n    if sum_left == sum_right:\n        return \"Balanced\"\n    else:\n        return \"Not Balanced\"\n", "def balanced_num(number):\n    number = str(number)\n    if len(number) == 1: return 'Balanced'\n    if len(number)%2==1:\n        return 'Balanced' if sum(int(i) for i in number[:len(number)//2]) == sum(int(i) for i in number[len(number)//2+1:]) else 'Not Balanced'\n    else:\n        return 'Balanced' if sum(int(i) for i in number[:len(number)//2-1]) == sum(int(i) for i in number[len(number)//2+1:]) else 'Not Balanced'", "def balanced_num(number):\n    l = len(str(number))\n    if l % 2 == 0:\n        return \"Balanced\" if sum([int(x) for x in str(number)[:int(l/2)-1]]) == sum([int(x) for x in str(number)[int(l/2)+1:]]) else \"Not Balanced\"\n    return \"Balanced\" if sum([int(x) for x in str(number)[:int(l/2)]]) == sum([int(x) for x in str(number)[int(l/2)+1:]]) else \"Not Balanced\"", "def balanced_num(number):\n    left_number = 0\n    right_number = 0\n    number_string = str(number)\n    number_length = len(number_string)\n    if number_length < 3:\n        return \"Balanced\"\n    else:\n        reverse_number = number_string[::-1]\n        if number_length % 2 == 0:\n            n = 2\n        else:\n            n = 1\n        for i in range(int((number_length - n) / 2)):\n            left_number += int(number_string[i])\n            right_number += int(reverse_number[i])\n        if left_number == right_number:\n            return \"Balanced\"\n        else:\n            return \"Not Balanced\"", "def balanced_num(number):\n    if number < 100: return 'Balanced'\n    array = [int(x) for x in str(number)]\n    length = len(array)\n    balmiddle = length // 2 - 1 if length % 2 == 0 else length // 2\n    leftsum = 0\n    rightsum = 0\n    for x in range(balmiddle):\n        leftsum += array[x]\n        rightsum += array[len(array) - x - 1]\n    return 'Balanced' if leftsum == rightsum else 'Not Balanced'\n        \n", "def balanced_num(number):\n    sum_left, sum_right=0, 0\n    if len(str(number))%2==0:\n        left=str(number)[:(len(str(number))//2)-1]\n    else:\n        left=str(number)[:len(str(number))//2]\n    right=str(number)[(len(str(number))//2)+1:]\n    for elem in left:\n        sum_left+=int(elem)\n    for elem in right:\n        sum_right+=int(elem)\n    if sum_left==sum_right:\n        return 'Balanced'\n    else:\n        return 'Not Balanced'", "def balanced_num(number):\n    n=str(number)\n    a,b=0,0\n    if len(n)<=2:\n        return 'Balanced'\n    if len(n)%2==0:\n        for i in range(len(n)//2-1):\n           a+=int(n[i])\n        for j in range(len(n)//2+1,len(n)):\n           b+=int(n[j])\n        if a==b:\n           return 'Balanced'\n    else:\n        for i in range(len(n)//2):\n           a+=int(n[i])\n        for j in range(len(n)//2+1,len(n)):\n           b+=int(n[j])\n        if a==b:\n           return 'Balanced'\n    return 'Not Balanced'", "def balanced_num(number):\n    numbers_array = [int(num) for num in str(number)]\n    if len(numbers_array) % 2: \n        del numbers_array[int(len(numbers_array) // 2 + 0.5)]  \n    else:\n        del numbers_array[len(numbers_array) // 2 - 1 : len(numbers_array) // 2 + 1]\n\n    return 'Balanced' if sum(numbers_array[:len(numbers_array)//2]) == sum(numbers_array[len(numbers_array)//2:]) else 'Not Balanced'", "def balanced_num(n):\n    n = str(n)\n    if len(n)%2 == 0: return [\"Not Balanced\", \"Balanced\"][sum(map(int,n[:len(n)//2-1])) == sum(map(int, n[len(n)//2+1:]))]\n    else:  return [\"Not Balanced\", \"Balanced\"][sum(map(int,n[:len(n)//2])) == sum(map(int, n[len(n)//2 + 1:]))]", "def balanced_num(number):\n    mid = len(str(number))\n    if mid % 2 == 0:\n        if sum(int(i) for i in str(number)[:(mid//2) - 1]) == sum(int(i) for i in str(number)[(mid//2 + 1):]):\n            return 'Balanced'\n        else:\n            return 'Not Balanced'\n    else:\n        if sum(int(i) for i in str(number)[:(mid//2)]) == sum(int(i) for i in str(number)[(mid//2) + 1:]):\n            return 'Balanced'\n        else:\n            return 'Not Balanced'", "def balanced_num(n):\n    \n    total_lst = [i for i in str(n)]\n    if len(total_lst) == 1 or len(total_lst) == 2:\n        return \"Balanced\"\n    break_even = int(len(total_lst)/2 - 1)\n    break_odd = int(len(total_lst)//2)\n    if len(total_lst)%2 == 0:\n        lst1 = [i for i in total_lst[0:break_even]]\n        lst2 = [i for i in total_lst[-break_even:]]\n    else:\n        lst1 = [i for i in total_lst[0:break_odd]]\n        lst2 = [i for i in total_lst[-(break_odd):]]\n    \n    for i in range(0, len(lst1)): \n        lst1[i] = int(lst1[i]) \n    for i in range(0, len(lst2)): \n        lst2[i] = int(lst2[i])    \n    a=sum(lst1)\n    b=sum(lst2)\n    if a == b:\n        return \"Balanced\"\n    \n    else: \n        return \"Not Balanced\"\n", "def balanced_num(n):\n    print(n)\n    b = list(str(n))\n    a = [int(x) for x in b] \n    c = len(a)\n    if c == 1 or c == 2 : return \"Balanced\"\n    if c % 2 == 0: \n        a.pop(c//2)\n        c -= 1\n    return \"Balanced\" if sum(a[:c//2]) == sum(a[c//2+1:]) else \"Not Balanced\"", "def balanced_num(number):\n    number = str(number)\n    str_sum = lambda xs: sum(map(int,xs))\n    return 'Balanced' if str_sum(number[:(len(number)-1)//2]) == str_sum(number[(len(number)+2)//2:]) else 'Not Balanced'", "def balanced_num(number):\n    ns = str(number)\n    nlen = len(ns)\n    nmid = nlen//2\n    return ['Not Balanced', 'Balanced'][sum(int(c) for c in ns[:nmid-1+nlen%2]) == sum(int(c) for c in ns[nmid+1:])]\n", "def balanced_num(number):\n    a = str(number)\n    if len(a)%2!=0:\n        n = len(a)//2\n        sum1 = 0\n        sum2 = 0\n        for i in range(n):\n            sum1 += int(a[i])\n        for i in range(n+1,len(a)):\n            sum2 += int(a[i])\n        if sum1 == sum2:\n            return \"Balanced\"\n        else:\n            return \"Not Balanced\"\n    else:\n        n = len(a)//2\n        sum1 = 0\n        sum2 = 0\n        for i in range(n-1):\n            sum1 += int(a[i])\n        for i in range(n+1,len(a)):\n            sum2 += int(a[i])\n        if sum1 == sum2:\n            return \"Balanced\"\n        else:\n            return \"Not Balanced\"", "def balanced_num(number):\n    print(number)\n    if len(str(number))%2==0:\n        lst = list(str(number))\n        lst = list(map(int,lst))\n        cnt = 0\n        cnt1 = 0\n        for i in range(len(lst)):\n            if i <(len(lst)//2-1):\n                cnt+=lst[i]\n            elif i > (len(lst)//2):\n                cnt1+=lst[i]\n        print((cnt,cnt1))\n        if cnt==cnt1:\n            return \"Balanced\"\n        else:\n            return \"Not Balanced\"\n    else:\n        lst = list(str(number))\n        lst = list(map(int,lst))\n        cnt = 0\n        cnt1 = 0\n        for i in range(len(lst)):\n            if i <len(lst)//2:\n                cnt+= lst[i]\n            elif i>len(lst)//2:\n                cnt1+=lst[i]\n        print((cnt,cnt1))\n        if cnt==cnt1:\n            return \"Balanced\"\n        else:\n            return \"Not Balanced\"\n", "def balanced_num(number):\n    number = str(number)\n    a = len(number) \n    hm1 = number[:int((a/2)-1)]\n    hm2 = number[int((a//2)+1):]\n    hm3 = number[:int((a//2)+1)]\n    hm4 = number[int((a//2)):]\n    print\n    if a == 1:\n        return \"Balanced\"\n    elif a % 2 == 0:\n        if sum(int(x) for x in hm1) == sum(int(y) for y in hm2):\n            return \"Balanced\"\n        else:\n            return \"Not Balanced\"\n    elif a % 2 != 0:\n        if sum(int(w) for w in hm3) == sum(int(z) for z in hm4):\n            return \"Balanced\"\n        else:\n            return \"Not Balanced\"\n    else:\n        return \"Not Balanced\"", "def balanced_num(number): \n    if sum([int(x) for x in str(number)[:(len(str(number)) +1 )// 2 - 1]]) == sum([int(x) for x in str(number)[(len(str(number)))// 2 + 1:]]):\n        return \"Balanced\"\n    return \"Not Balanced\"", "def balanced_num(number):  \n    l = str(number)[:(len(str(number)) +1 )// 2 - 1]\n    r = str(number)[(len(str(number)))// 2 + 1:]\n    if sum([int(x) for x in l]) == sum([int(x) for x in r]):\n        return \"Balanced\"\n    return \"Not Balanced\""]