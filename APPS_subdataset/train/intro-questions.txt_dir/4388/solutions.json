["import re\n\ndef change_case(label, target):\n    if ('_' in label) + ('-' in label) + (label != label.lower()) > 1:\n        return\n    \n    if target == 'snake':\n        return re.sub('([A-Z])', r'_\\1', label.replace('-', '_')).lower()\n    \n    if target == 'kebab':\n        return re.sub('([A-Z])', r'-\\1', label.replace('_', '-')).lower()\n    \n    if target == 'camel':\n        return re.sub('([_-])([a-z])', lambda m: m.group(2).upper(), label)", "def change_case(label, case):\n    if case not in ['snake', 'kebab', 'camel'] or ('_' in label) + ('-' in label) + (label != label.lower()) > 1:\n        return\n    \n    return ''.join( '_' + c.lower() if c.isupper()  and case == 'snake' else\n                    '_' if c == '-'                 and case == 'snake' else\n                    \n                    '-' + c.lower() if c.isupper()  and case == 'kebab' else\n                    '-' if c == '_'                 and case == 'kebab' else\n                    \n                    c.upper() if label[i-1] in '-_' and case == 'camel' else\n                    '' if c in '-_'                 and case == 'camel' else\n                    \n                    c for i, c in enumerate(label) )", "import re\n\nCHANGES     = {'kebab': '-', 'camel': '', 'snake': '_'}\nVALID_CASE  = re.compile(r'[A-Z_-]')\nCHANGE_CASE = re.compile(r'[_-][a-z]|[A-Z]')\n\n\ndef change_case(s, targetCase):\n\n    def convertCase(m):\n        return (str.upper if targetCase=='camel' else str.lower)(CHANGES[targetCase] + m.group()[-1])\n    \n    if targetCase in CHANGES and len({'A' if c.isalpha() else c for c in VALID_CASE.findall(s)}) <= 1:\n        return CHANGE_CASE.sub(convertCase, s)\n", "import re\n\ndef change_case(s, case):\n    \n    actions = {\n        'snake': lambda s: re.sub(r'([A-Z\\-])', r'_\\1', s).lower().replace('-', ''),\n        'camel': lambda s: re.sub(r'(\\-|_)(.)', lambda x: x[2].upper(), s),\n        'kebab': lambda s: re.sub(r'([A-Z_])', r'-\\1', s).lower().replace('_', '')\n    }\n    return s if not s else sum((any(x.isupper() for x in s), '_' in s, '-' in s)) < 2 \\\n                                       and actions.get(case, lambda s: None)(s) or None", "def change_case(id, t):\n    q = ('_' in id) + ('-' in id) + any(x.isupper() for x in set(id))\n    if q > 1: return\n    d = {'kebab': '-', 'snake': '_'}\n    l, index = [''], 0\n    for x in id:\n        if not l[index] or not x.isupper() and x.isalpha() and l[index][-1].isalpha():\n            l[index] += x\n        elif x.isalpha():\n            l.append(x)\n            index += 1\n        else:\n            l.append('')\n            index += 1\n\n    if t in d:\n        return f'{d[t]}'.join(x.lower() for x in l)\n    if t == 'camel':\n        return ''.join(w.capitalize() if i else w for i,w in enumerate(l))", "def change_case(identifier, targetCase):\n# kebab make dashes after all capital, snake underscore after capital\n# camel makes kebab to caps\n#account for \n    if isBad(identifier):\n        return None\n    if targetCase == 'snake':\n        return snake(identifier)\n    elif targetCase == 'camel':\n        return camel(identifier)\n    elif targetCase == 'kebab':\n        return kebab(identifier)\n    return None\n    \ndef snake(myString):\n    newString = myString\n    for i in range (0, len(myString)):\n        if ord(myString[i]) >= ord('A') and ord(myString[i]) <= ord('Z'):\n            #means it is caps\n            pos = newString.index(myString[i:])\n            newString = newString[:pos] + '_' + newString[pos].lower() + newString [pos + 1:]\n        elif myString[i] == '-':\n            pos = newString.index(myString[i:])\n            #newSting = \n            newString = newString[:pos] + '_' + newString[pos + 1:]\n    return newString.lower()\n    \ndef kebab(myString):\n    newString = myString\n    for i in range (0, len(myString)):\n        if ord(myString[i]) > ord('A') -1 and ord(myString[i]) < ord('Z') +1:\n                #means it is caps\n            pos = newString.index(myString[i:])\n            newString = newString[:pos] + '-' + newString[pos].lower() + newString [pos + 1:]\n\n        if myString[i] == '_':\n            pos = newString.index(myString[i:])\n            #newSting = \n            newString = newString[:pos] + '-' + newString[pos + 1:]\n        #means it is underscore\n    return newString.lower()\n    \ndef camel(myString):\n    #why doesnt this work\n    if len(myString) ==0:\n        return myString\n    myString = myString.replace('-', '_')\n    newString = myString.split('_')\n    for i in range (0, len(newString)):\n        if i != 0:\n            newString[i] = newString[i][0].upper() + newString[i][1:]\n    return \"\".join(newString)   \n   #\ndef isBad(myString):    \n    if '_' in myString and '-' in myString:\n        return True\n    if '--' in myString or '__' in myString:\n        return True\n    if not myString.lower() == myString and '_' in myString:\n        return True\n    if not myString.lower() == myString and '-' in myString:\n        return True\n    return False", "import re\n\n# TODO: need to refactor later :)\nfind_snake = re.compile(\"([_])([A-Za-z])\")\nfind_camel = re.compile(\"([A-Z])\")\nfind_kebab = re.compile(\"([-])([A-Za-z])\")\n\nis_camel = lambda x: x != x.lower()\nis_snake = lambda x: '_' in x\nis_kebab = lambda x: '-' in x\n\ndef to_camel(match):\n    return match.group(2).upper()\n\ndef to_snake(match):\n    return '_' + match.group(1).lower()\n    \ndef to_kebab(match):\n    return '-' + match.group(1).lower()\n\ndef change_case(text, target):\n    if text == '':\n        return ''\n    if target not in ['camel','kebab','snake'] \\\n    or sum([is_camel(text), is_snake(text), is_kebab(text)]) != 1:\n        return None\n    if is_camel(text):\n        if target == 'snake':\n            return re.sub(find_camel, to_snake, text).lower()\n        elif target == 'kebab':\n            return re.sub(find_camel, to_kebab, text).lower()\n    elif is_snake(text):\n        if target == 'camel':\n            return re.sub(find_snake, to_camel, text)\n        elif target == 'kebab':\n            return text.replace('_', '-').lower()\n    elif is_kebab(text):\n        if target == 'snake':\n            return text.replace('-', '_').lower()\n        elif target == 'camel':\n            return re.sub(find_kebab, to_camel, text)\n    return text", "def discover_case(identifier):\n    if identifier is None:\n        return None\n    elif identifier == '':\n        return ''\n    elif is_camel(identifier):\n        return 'camel'\n    elif is_snake(identifier):\n        return 'snake'\n    elif is_kebab(identifier):\n        return 'kebab'\n    return None\n\ndef is_camel(identifier):\n    found_uppercase = False\n    \n    for index, ch in enumerate(identifier):\n        if not ch.isalnum():\n            return False\n        elif index != 0 and ch.isalpha() and ch.isupper():\n            found_uppercase = True\n            \n    return found_uppercase\n\ndef is_snake(identifier):\n    for ch in identifier:\n        if ch.isupper():\n            return False\n            \n    return '_' in identifier and '-' not in identifier\n\ndef is_kebab(identifier):\n    for ch in identifier:\n        if ch.isupper():\n            return False\n            \n    return '-' in identifier and '_' not in identifier\n\ndef split_words(identifier, case):\n    if case == 'camel':\n        words = []\n        word = ''\n        \n        for ch in identifier:\n            if ch.isupper():\n                words.append(word.lower())\n                word = ch\n            else:\n                word += ch\n                \n        words.append(word.lower())\n        return words\n    elif case == 'snake':\n        return identifier.split('_')\n    elif case == 'kebab':\n        return identifier.split('-')\n    else:\n        return None\n\ndef to_camel(words):\n    result = ''\n    for index, word in enumerate(words):\n        if index == 0:\n            result += word\n        else:\n            result += word.capitalize()\n    return result\n\ndef to_snake(words):\n    return '_'.join(words)\n\ndef to_kebab(words):\n    return '-'.join(words)\n\ndef change_case(identifier, targetCase):\n    case = discover_case(identifier)\n    if not case:\n        return case\n        \n    words = split_words(identifier, case)\n    if not words:\n        return None\n    \n    if targetCase == 'camel':\n        return to_camel(words)\n    elif targetCase == 'snake':\n        return to_snake(words)\n    elif targetCase == 'kebab':\n        return to_kebab(words)\n    else:\n        return None\n", "def change_case(identifier, targetCase):\n    id = list(str(identifier))\n    conv = []\n    \n    if identifier.islower() == False and (id.count('-') != 0 or id.count('_') != 0) == True: #checks if there are upper case and hyphens or underscores\n        return None\n    \n    if id.count('-') != 0 and id.count('_') != 0:\n        return None\n    \n    if targetCase == 'snake':\n        return change_snake(id, conv)\n        \n    if targetCase == 'camel':\n        return change_camel(id, conv)\n    \n    if targetCase == 'kebab':\n        return change_kebab(id, conv)\n    \n    else:\n         return None\n        \ndef change_snake(id, conv): #converts Capital to _lower  \n    for i in id:\n        if i.isupper() == True:\n            conv.append('_' + i.lower())\n            #conv.append(i.lower())\n        \n        elif i == '-':\n            conv.append('_')\n            \n        else:\n            conv.append(i)\n    \n    return ''.join(conv)\n    \ndef change_camel(id, conv): #converts -lower to Capital\n    ids = id.copy()\n    ids.insert(0, '.')\n    n = 0\n    \n    for i in id:       \n        n = n+1\n        \n        if i == '-' or i == '_':     \n            continue   \n            \n        if ids[n-1] == '-' or ids[n-1] == '_':\n            \n            conv.append(i.upper())\n              \n        else:\n            conv.append(i)\n               \n        \n    return ''.join(conv)\n    \ndef change_kebab(id, conv): #converts \n    for i in id:\n        if i == '_':\n            conv.append('-')\n            continue\n            \n        if i.isupper() == True:\n            conv.append('-' + i.lower())\n        \n        else:\n            conv.append(i)\n        \n    return ''.join(conv)", "import re\n\ndef is_snake_case(identifier):\n    return bool( re.fullmatch(r'[a-z_]+', identifier) )\n\ndef is_camel_case(identifier):\n    return bool(re.fullmatch(r'([a-z]+[A-Z])+[a-z]*', identifier))\n\ndef is_kebab_case(identifier):\n    return bool(re.fullmatch(r'[a-z]*-?', identifier))\n  \ndef is_mixed_case(identifier):\n    if \"-\" in identifier and \"_\" in identifier:\n        return True\n    elif \"-\" in identifier and [c for c in identifier if c.isupper()]:\n        return True\n    elif \"_\" in identifier and [c for c in identifier if c.isupper()]:\n        return True\n                \ndef change_case(identifier, targetCase):\n    # if identifier is empty\n    if not identifier:\n        return \"\"\n    \n    # if targetCase is invalid\n    elif targetCase not in ['kebab', 'camel', 'snake']:\n        return None\n    \n    # if identifier is mixed case\n    elif is_mixed_case(identifier):\n        return None\n    \n    # change case to snake case\n    elif targetCase == \"snake\" and not is_snake_case(identifier):\n        split = [char for char in re.split(r'([A-Z]|-)', identifier) if char]\n        for i, char in enumerate(split):\n            if char.isupper():\n                split[i] = '_' + char.lower()\n            elif char == \"-\":\n                split[i] = \"_\"\n        return ''.join(split)\n    \n    # change case to camel case\n    elif targetCase == \"camel\" and not is_camel_case(identifier):    \n        split = re.split(r'[_-]', identifier)\n        return split[0] + ''.join(word.title() for word in split[1:])\n        \n    # change case to kebab case\n    elif targetCase == \"kebab\" and not is_kebab_case(identifier):\n        split = re.split(r'([A-Z]|_)', identifier)\n        kebab = split[0]\n        for i, word in enumerate(split[1:]):\n            if not word or word == \"_\":\n                kebab += \"-\"\n            elif word.isupper():\n                if kebab[-1] == \"-\":                    \n                    kebab += word.lower()\n                else:\n                    kebab += '-' + word.lower()\n            else:\n                kebab += word.lower()\n        return kebab\n    \n    # identifier and targetCase already match\n    else:\n        return identifier"]