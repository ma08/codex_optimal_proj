["def cube_odd(arr):\n    return sum( n**3 for n in arr if n % 2 ) if all(type(n) == int for n in arr) else None", "def cube_odd(arr):\n    if any(type(x) is not int for x in arr):\n        return None\n    return sum(x ** 3 for x in arr if x % 2 != 0)", "def cube_odd(arr):\n    if len(set(map(type,arr))) < 2:\n        return sum(n**3 for n in arr if n%2)", "def cube_odd(arr):\n    return sum(n**3 for n in arr if n % 2 == 1) if all(type(e) == int for e in arr) else None", "def cube_odd(arr):\n    s = 0\n    for n in arr:\n        if type(n) != int: break\n        elif n%2: s += n**3\n    else:\n        return s", "def cube_odd(arr):\n    if any(type(x) is not int for x in arr):\n        return None\n    \n    return sum(x**3 for x in arr if x % 2 == 1)", "def cube_odd(a):\n    return sum(e**3 for e in a if e % 2) if all(type(e) == int for e in a) else None", "def cube_odd(arr):\n    if arr == [x for x in arr if type(x) == int]: return sum([i**3 for i in arr if i % 2 == 1])\n", "def cube_odd(arr):\n    total = 0\n    for el in arr:\n        if isinstance(el, int):\n            if el % 2 == 1 and el != 0:\n                total += el ** 3\n        else:\n            return None\n    if total == 2:\n        return None\n    return total", "def cube_odd(arr):\n    ar =  sum([ el **3 for el in arr if type(el) == int and el %2 !=0]) \n    return ar if [el for el in arr if type(el) != int]==[] else None", "def cube_odd(arr):\n    result = 0\n    for n in arr:\n        if type(n) == type(\"s\") or type(n) == type(True):\n            return None\n        elif (n**3 % 2 != 0) and (type(n) == type(5)):\n            result += n**3  \n            \n    return result\n    \n    #your code here - return None if at least a value is not an integer\n", "def cube_odd(n): \n    return sum([el ** 3 for el in n if type(el) == int and el % 2 != 0]) if [el for el in n if type(el) != int] == [] else None\n\n", "def cube_odd(arr):\n    odds = []\n    for num in arr:\n        if type(num) != type(4):\n            return None\n        elif num % 2 != 0:\n            odds.append(num**3)\n    return sum(odds)", "def cube_odd(arr):\n    ar =  sum([ el **3 for el in arr if type(el) == int and el %2 !=0]) # remove str\n    return ar if [el for el in arr if type(el) != int] == [] else None  # if str => None", "def cube_odd(arr):\n    #your code here - return None if at least a value is not an integer\n    n = 0\n    for i in arr:\n        if type(i) != int:\n            return None\n            break\n        else:\n            if i%2 != 0 or (-1*i)%2 != 0:\n                n += i**3\n    return n", "def cube_odd(arr):\n    a=sum([el**3 for el in arr if type(el)==int and el%2!=0]) \n    return a if [el for el in arr if type(el)!=int]==[] else None", "def cube_odd(arr):\n    for el in arr:\n        if type(el) != int:\n            return None\n    return sum([el ** 3 for el in arr if type(el) == int and el % 2 != 0])", "def cube_odd(arr):\n    if len([el for el in arr if type(el) != int]) > 0:\n        return None\n    return sum([el ** 3 for el in arr if el % 2 != 0 ])", "def cube_odd(a):\n    sum, i = 0, 0\n    while True:\n        try:\n            if type(a[i]) != int:\n                return None\n            if a[i]&1:\n                sum += a[i]**3\n        except IndexError:\n            break\n        i += 1\n    return sum           ", "def cube_odd(a):\n    sum, i = 0, 0\n    while True:\n        try:\n            if type(a[i]) != int:\n                return None\n            if a[i]%2:\n                sum += a[i]**3\n        except IndexError:\n            break\n        i += 1\n    return sum           ", "def cube_odd(arr):\n    cube = []\n    for i in arr:\n        if type(i) != int:\n            return None\n        if i % 2 != 0:\n            cube.append(i**3)\n    return sum(cube)\n", "def cube_odd(arr):\n    new_arr = []\n    for el in arr:\n        if type(el) != int:\n            return None\n        elif el %2 !=0 and  type(el) == int:\n            new_arr.append(el**3) \n    return sum(new_arr)\n\n", "def cube_odd(arr):\n\n    s = 0\n    \n    if any(isinstance(b,bool) for b in arr):\n        \n        return None\n    \n    if not all(isinstance(x,int) for x in arr):\n        \n        return None\n\n    for i in range(0,len(arr)):\n    \n        if arr[i]%2!=0 :\n        \n            s+= arr[i]**3\n               \n    return s\n    \n", "def cube_odd(arr):\n    sum = 0\n    for i in range(len(arr)):\n        if type(arr[i]) != int:\n            return None\n        if arr[i] % 2 == 1:\n            sum += arr[i]**3\n    return sum", "def cube_odd(arr):\n    s = [el for el in arr if type(el) != int]\n    return sum([el ** 3 for el in arr if type(el) == int and el % 2 != 0 ]) if len(s) == 0 else None ", "def cube_odd(arr):\n    x = 0\n    for i in arr:\n        if type(i) is not int:\n            return None\n        if i % 2 != 0:\n            x += i*i*i\n    return x", "def cube_odd(a):\n    total = 0\n    try:\n        for i in a:\n            if str(i) is 'False' or str(i) is 'True': return None\n            total += i**3 if i**3%2 != 0 else 0\n        return total\n    except:\n        return None", "def cube_odd(arr):\n    for item in arr:\n        if type(item) != int:\n            return\n\n    return sum(i**3 for i in arr if i % 2 != 0)", "def cube_odd(arr):\n    while all(type(d) == int for d in arr):\n        return sum(d**3 for d in arr if (d**3)%2==1)\n", "def cube_odd(arr):\n    res = 0\n    for i in arr:\n        if type(i) != int:\n            return None\n        if i % 2:\n            res += i ** 3\n    return res", "def cube_odd(arr):\n    a = [i for i in arr if type(i) == int]\n    return sum([i**3 for i in a if i % 2 == 1]) if len(a) == len(arr) else None", "def cube_odd(arr):\n    for i in arr:\n        if type(i) != int:\n            return None\n    return sum([i**3 for i in arr if i % 2])", "def cube_odd(arr):\n    #your code here - return None if at least a value is not an integer\n    o = 0\n    for i in arr:\n        if type(i)!=int:\n            return None\n        elif i%2==1:\n            o+=i**3\n        else:\n            continue\n    return o            ", "def cube_odd(arr):\n    s = 0\n    for x in arr:\n        if type(x) != int:\n            return None\n        elif x**3 % 2 == 1:\n            s += x**3\n    return s\n", "def cube_odd(arr):\n    odd = list()\n    for i in arr:\n        if (isinstance(i, int) and\n                not isinstance(i, bool)):\n            if abs(i)%2 != 0:\n                odd.append(i)\n        else:\n            return None\n        \n    return sum(map(lambda x: x**3, odd))", "def cube_odd(arr):\n    res = 0\n    for n in arr:\n        if type(n) != int:\n            return None\n        res += n**3 if n%2 else 0\n    return res", "def cube_odd(arr):\n    a = 0\n    for i in arr : \n        if type(i) != int: break\n        elif i % 2 != 0 :\n            a += i**3\n        \n    else : \n        return a\n        \n    #your code here - return None if at least a value is not an integer\n", "def cube_odd(arr):\n    for i in arr:\n        if type(i)!=type(1):\n            return None\n    return sum(i**3 for i in arr if i%2==1)", "def cube_odd(x):\n    if len(x)!=len([i for i in x if type(i)==int]):\n        return None\n    else:\n        return sum([i**3 for i in x if i%2!=0])", "def cube_odd(arr):\n    result = 0\n    for el in arr:\n        if type(el) != int:\n            return None\n        if el % 2 != 0:\n            result += el*el*el\n    return result ", "def cube_odd(arr):\n    c = []\n    n = []\n    for x in arr:\n        if type(x) != int:\n            return None\n        elif x < 0 and x % 2 != 0:\n            c.append(x**3)\n        elif x > 0 and x % 2 :\n            n.append(x**3)\n    return sum(n) + sum(c)", "def cube_odd(arr):\n    \n    sol = 0\n    \n    for i in arr:\n        \n        if type(i) != int:\n            break\n        \n        elif i % 2:\n            sol += i**3\n    \n    else:\n        return sol", "def cube_odd(arr):\n    #your code here - return None if at least a value is not an integer\n    s = 0\n    for i in arr:\n        if type(i)!=int:\n            return None\n        elif i%2==1:\n            s+=i**3\n        else:\n            continue\n    return s", "def cube_odd(arr):\n    l = []\n    for x in arr:\n        if type(x) != int:\n            return None\n        elif x % 2 == 1:\n            l.append(x ** 3)\n    return sum(l)", "def cube_odd(arr):\n    func = lambda x: isinstance(x, (int,float)) and not isinstance(x, bool)\n    return (all(map(func,arr)) or None) and sum(x**3 for x in arr if x**3%2)", "def cube_odd(arr):\n    x = [i for i in arr if not isinstance(i,bool)]\n    if len(x) == len(arr):\n        try:\n            return sum([i**3 for i in x if i % 2])\n        except:\n            pass", "def cube_odd(arr):\n    cubes = []\n    for i in arr:\n        if type(i)!=int:\n            return None\n        if i%2!=0:\n            cubes.append(i**3)\n    return sum(cubes)", "def cube_odd(arr):\n    int_arr = []\n    for i in arr:\n        if type(i) == int:\n            int_arr.append(i)\n        else:\n            return None\n    res = []\n    for i in int_arr:\n        if i % 2 != 0:\n            res.append(i)\n    res2 = []\n    for i in res:\n        res2.append(i*i*i)\n    return sum(res2)", "def cube_odd(arr):\n    x = 0\n    for i in arr:\n        if type(i) is not int:\n            return None\n            break\n        elif i % 2 != 0:\n            x += i**3\n    return x", "def cube_odd(A):\n    print(A)\n    r = None\n    for i in A:\n        if not isinstance(i, int) or isinstance(i, bool): return None\n        if i%2 : r = i**3 if not r else r+i**3\n    return r", "def cube_odd(arr):\n    new_arr = []\n    for i in range(len(arr)):\n        if type(arr[i]) == bool:\n            return None\n        if type(arr[i]) == str:\n            return None\n        new_arr.append(arr[i] ** 3)\n    value = 0\n    for i in range(len(new_arr)):\n        if new_arr[i] % 2 == 1:\n            value += new_arr[i]\n    return value\n", "def cube_odd(arr):\n    res = 0\n    for i in arr:\n        if not isinstance(i, int) or isinstance(i, bool):\n            return None\n        elif i%2!=0:\n            res += i**3\n    return res", "def cube_odd(arr):\n    all_int = all(type(n) == int for n in arr)\n    return sum(n ** 3 for n in arr if n & 1) if all_int else None", "def cube_odd(arr):\n    res=0\n    for i in arr:\n        if isinstance(i,int) and not isinstance(i,bool):\n            if (i**3)%2==1:\n                res+=i**3\n        else:\n            return None\n    return res", "def cube_odd(arr):\n    for x in arr :\n        if type(x)!=int : return None\n    return sum([x**3 for x in arr if x%2==1])", "def cube_odd(arr):\n    accumulator = 0\n    for eachvalue in arr:\n        if type(eachvalue) != type(1):\n            return None\n        else:\n            if eachvalue % 2 != 0:\n                x = eachvalue**3\n                accumulator = accumulator + x\n    return accumulator\n", "def cube_odd(arr):\n    res_arr = [x for x in arr if isinstance(x, int) and not isinstance(x, bool)]\n    if len(res_arr) == len(arr):\n        return sum([x**3 for x in arr if x % 2 != 0])\n    else:\n        return None", "def cube_odd(arr):\n\n    if any(str(char).isalpha() for char in arr) == True:\n        return None\n\n    return sum(char**3 for char in arr if char%2 != 0)", "import unittest\n\n\ndef cube_odd(arr):\n    def _is_none_condition():\n        return any(True if not isinstance(ele, int)\n                           or ele is True\n                           or ele is False\n                   else False for ele in arr)\n    if _is_none_condition():\n        return\n    return sum(ele ** 3 if ele % 2 == 1 else 0 for ele in arr)\n\n\nclass TestCubeOdd(unittest.TestCase):\n    def test_should_return_none_when_any_of_the_values_are_not_numbers(self):\n        arr = [\"a\", 12, 9, \"z\", 42]\n        actual = cube_odd(arr)\n        self.assertEqual(actual, None)\n\n    def test_cube_odd(self):\n        arr = [1, 2, 3, 4]\n        actual = cube_odd(arr)\n        self.assertEqual(actual, 28)\n", "def cube_odd(arr):\n    s = 0\n    for i in arr:\n        if type(i) == bool or type(i) == str:\n            return None\n        else:\n            if i%2==1:\n                s += i**3\n    return s", "def cube_odd(arr):\n    output = 0\n    for i in arr:\n        if type(i) == int:\n            if i % 2 != 0:\n                output += i**3\n        else:\n            return None\n    return output", "def cube_odd(arr):\n    _arr = [n for n in arr if type(n) == int]\n    if len(_arr) != len(arr):\n        return None\n    arr = [n ** 3 for n in arr if n % 2 != 0]\n    return 0 if not arr else sum(arr)", "def cube_odd(arr):\n    if all(type(x) is int or type(x) is float for x in arr):\n        return sum(x ** 3 for x in arr if x % 2)\n\n", "def cube_odd(arr):\n    cubes = []\n    for item in arr:\n        if str(item).strip('-').isdigit() == False:\n            return None\n        else:\n            if item % 2 != 0:\n                cubes.append(item**3)\n    return sum(cubes)\n", "def cube_odd(arr):\n    if all(type(i) == int for i in arr): return sum((i**3) for i in arr if i%2 != 0)\n", "def cube_odd(arr):\n    if all(type(i) == int for i in arr): return sum((i**3) for i in arr if i%2 != 0)\n    else: return None", "def cube_odd(arr):\n    return sum(x ** 3 for x in arr if (x % 2 == 1)) if all(type(x) is int for x in arr) else None", "def cube_odd(arr):\n    sum = 0\n    for x in arr:\n        if (not isinstance(x, (int, float, complex)) or isinstance(x, bool)): return None\n        if (x % 2 == 1): sum += x ** 3\n    return sum", "def cube_odd(arr):\n    if any(isinstance(v, bool) or not isinstance(v, int) for v in arr): return\n    return sum(v**3 for v in arr if v % 2)\n", "def cube_odd(arr):\n    sum = 0\n    for x in arr:\n        if type(x) == int:\n            if x % 2 == 1:\n                sum += x**3\n        else:\n            return None\n    return sum", "def cube_odd(arr):\n    return sum(n**3 for n in arr if n % 2 == 1) if all(type(x) == int for x in arr) else None", "def cube_odd(arr):\n    res=[]\n    for i in arr:\n        if not type(i)==int :\n           return None\n        if i%2:\n           res.append(i**3)\n    return sum(res)\n", "def cube_odd(arr):\n    for x in arr:\n        if type(x) != int: return None\n    return sum([x**3 for x in arr if x**3 % 2 != 0])", "def cube_odd(arr):\n    return sum(n ** 3 for n in arr if n % 2) if all(type(n) is int for n in arr) else None", "def cube_odd(n):\n    sum = 0\n    for n in n:\n        if type(n)!=int:\n            return None\n        if n%2 != 0:\n            sum += n**3\n    return sum\n                \n", "def cube_odd(arr):\n    total=0\n    for elem in arr:\n        if type(elem) == int:\n            if elem%2==1:\n                total += elem**3\n        else:\n            return None\n    return total", "def cube_odd(arr):\n    #your code here - return None if at least a value is not an integer\n    for i in arr :\n        if not isinstance(i, int) or isinstance(i, bool) : return None\n    return sum(i**3 for i in arr if i%2!=0)", "def cube_odd(arr):\n    result = 0\n    for i in arr:        \n        if not isinstance(i, int) or isinstance(i, bool):\n            return None\n        result += i**3 if i & 1 else 0\n    return result", "def cube_odd(arr):\n    cubed = []\n    for i in arr:\n        if type(i) != int:\n            return None\n        else:\n            cubed.append(i ** 3)\n    new_arr = []\n    for x in cubed:\n        if x % 2 != 0:\n            new_arr.append(x)\n\n    return sum(new_arr)\n", "# def cube_odd(arr):\n#     x = 0\n#     for x in arr:\n#         if x is not int:\n#             return None\n#         if x ** 3 == 1:\n#             return True\n#         elif x % 2 != 0:\n#             return False\n#     res = cube_odd(x)\n#     print(res)\n\ndef cube_odd(arr):\n    if any(type(x) is not int for x in arr):\n        return None\n    return sum(x ** 3 for x in arr if x % 2 != 0)\n    \n\n# def cube_odd(arr):\n#     #your code here - return None if at least a value is not an integer\n#     sum_num = (\"undefined, None, nil, NULL\")\n#     sum_num = len()\n#     if sum_num == int():\n#         return sum_num\n#     else:\n#         pass\n#     return arr(sum_num)\n# def cube_odd(arr):\n#       if any(type(x) is not int for x in arr):\n#           return None\n          \n#       return sum(x ** 3 for x in arr if x % 2 != 0)\n", "def cube_odd(arr):\n    if set(map(type, arr)) != {int}:\n        return None\n    return sum([y for y in [x**3 for x in arr] if y % 2 == 1])", "def cube_odd(arr):\n    return sum(x ** 3 for x in arr if x % 2) if all(isinstance(x, int) and not isinstance(x, bool) for x in arr) else None\n", "def cube_odd(arr):\n    try:\n        return sum(['x' if type(i) == bool else i**3 for i in arr if (i**3) % 2 != 0])\n    except:\n        return None", "def cube_odd(arr):\n    s = 0\n    for i in arr:\n        if type(i) is int:\n            if i % 2 != 0:\n                s += i ** 3\n        else:\n            return None\n    return s\n    \n", "def cube_odd(arr):\n    return sum(x ** 3 for x in arr if x % 2) if all(type(x) is int for x in arr) else None", "def cube_odd(arr):\n    if all(map(lambda x: type(x) is int, arr)):\n        return sum(map(lambda x: x ** 3, filter(lambda x: x % 2, arr)))\n    return None", "def cube_odd(arr):\n    sum = 0\n    for i in arr:\n        if type(i) in (int,):\n            if i % 2:\n                sum += i**3\n        else:\n            return None\n    return sum\n", "def cube_odd(arr):\n    r = 0\n    for x in arr:\n        if type(x) is not int:\n            return None\n        elif x % 2:\n            r += x ** 3\n    return r\n    # Flez\n", "def cube_odd(arr):\n    for x in arr:\n        if type(x) is not int:\n            return None\n    \n    cube = [x **3 for x in arr]\n    r = 0\n    for x in cube:\n        if x % 2 != 0:\n            r += x\n    return r\n    # Flez\n  \n      \n    \n", "def cube_odd(arr):\n    return None if any([type(i) != int for i in arr]) else sum((i**3 for i in arr if i % 2 == 1))", "def cube_odd(arr):\n    x = []\n    for i in arr:\n        if type(i) != int:\n            return None\n        elif type(i) == int and i % 2 != 0:\n            x.append(i**3)\n    \n    return sum(x)", "def cube_odd(arr):\n    for i in arr:\n        if type(i) != int or type(i) == bool: return(None)\n    return(sum(i**3 for i in arr if i%2))", "cube_odd = lambda lst: None if not all(type(x) is int for x in lst) else sum(n ** 3 for n in lst if n & 1)", "def cube_odd(arr):\n    #your code here - return None if at least a value is not an integer\n    try:\n        sum = 0\n        for i in range(len(arr)):\n            if i >= len(arr):\n                break\n            else:\n                a = (i)\n                if str(arr[a]) in [\"True\",\"False\"]:\n                    return None\n                elif arr[a]%2 == 1:\n                    sum += (arr[a]**3)\n        return sum\n    except TypeError:\n        return None", "def cube_odd(arr):\n    sum = 0\n    for i in range(len(arr)):\n        if type(arr[i])!= int:\n            return None\n        elif arr[i]%2!=0:\n            sum += arr[i]**3\n    return sum        \n    #your code here - return None if at least a value is not an integer\n", "def cube_odd(arr):\n    r = 0\n    for a in arr:\n        if type(a) != int: return None\n        if a % 2 != 0: r += a**3\n    return r", "def cube_odd(arr):\n    if all(isinstance(x, int) for x in arr) \\\n       and not any(isinstance(x,bool) for x in arr):\n        return sum([x ** 3 for x in arr if x % 2 ])\n    else:\n        return None", "def cube_odd(arr):\n    arr1 = []\n    result = 0\n    try:\n        for i in arr:\n            if type(i) == bool:\n                return  None\n            else:\n                if i % 2 != 0:\n                    result = i**3\n                    arr1.append(result)\n        return sum(arr1)  \n    except TypeError:\n        return None\n", "def cube_odd(arr):\n    arr_cubed =[]\n    sum=0\n    for element in arr:\n    \n        if not str(element).isdigit() and not str(element)[0]=='-':\n            return None\n        else:\n            arr_cubed.append(element**3)\n    for element in arr_cubed:\n        if not element%2==0:\n            sum +=element\n    return sum\n    #your code here - return None if at least a value is not an integer\n", "def cube_odd(arr):\n  s=0\n  arr1=[]\n  for i in arr:\n    if (type(i)==str or type(i)==bool):\n      return None\n      break\n    else:\n      arr1.append(i)\n  for i in range(len(arr1)):\n    if (arr1[i]%2==1):\n      s+=arr1[i]**3\n  return s"]