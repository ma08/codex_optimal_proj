["def is_solved(board):\n    curr = 0;\n    for r in board:\n        for c in r:\n            if c != curr:\n                return False;\n            curr+=1;\n    return True;", "def is_solved(board):\n    board = sum(board, [])\n    return board == sorted(board)", "def is_solved(board):\n    return all( v==w for x,r in enumerate(board) for w,v in enumerate(r,x*len(board)) )", "def is_solved(board):\n    return sum(board, []) == list(range(0, len(board)**2))", "def is_solved(board):\n    flat = [y for x in board for y in x]\n    return flat == sorted(flat)", "def is_solved(board):\n    return sum(board, []) == list(range(len(board)**2))", "import numpy as np\n\ndef is_solved(board):\n    n = len(board)\n    a = np.arange(n*n, dtype=int).reshape(n,n)\n    return a.tolist() == board", "def is_solved(board):\n    board2 = board[0] + board[1]\n    board3 = board[0] + board[1]\n    return sorted(board3) == board2", "def is_solved(board):\n    return all(a == b for a, b in enumerate(bx for by in board for bx in by))", "def is_solved(board):\n    flat_list = []\n    for item in board:\n        flat_list.extend(item)\n    sorted_flat_list = sorted(flat_list)\n    if sorted_flat_list == flat_list:\n        return True\n    else:\n        return False\n"]