["def count_pal(n):\n    # No recursion; direct calculation:\n    return [9 * 10**((n-1) // 2), 10**(n // 2) * (13 - 9 * (-1)**n) // 2 - 2]", "def count_pal(n):\n    x = lambda y: 9 * int(10 ** ((y - 1)//2))\n    return [x(n), sum(x(i) for i in range(n+1))]", "from itertools import accumulate\n\nN_PALS = [0] + [9 * 10**((n-1)//2) for n in range(1,2001)]\nS_PALS = list(accumulate(N_PALS))\n\ndef count_pal(n):\n    return [N_PALS[n], S_PALS[n]]", "def count_pal(n):\n    pal = lambda n: 9 * 10**((n-1)//2)\n    return [pal(n), sum(pal(i) for i in range(1, n+1))]", "from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef count_pal(n):\n    if n == 0: return [0, 0]\n    current = 9 * 10**(n-1>>1)\n    previous = count_pal(n-1)[1]\n    return [current, current+previous]", "count_pal=lambda n:[int('9'+'0'*(n//2-int(not n&1))),int([['1','10'][n&1]+'9'*(n//2-1)+'8','9'][n==1])]", "def count_pal(n):  # amount of digits\n    res = '1' + ('0' * n)\n    temp = '9'\n    l = []\n    for x in range(1, len(res[1:])+1, 2):\n        q = res[x:x+2]\n        for _ in q:\n            l.append(temp)\n        temp += '0'\n    return [int(l[-1]), sum(int(x) for x in l)]", "def count_pal(n):\n    total = 0\n    \n    for i in range(n):\n        n_digit = 9 * 10**(i//2)\n        total += n_digit\n    \n    return [n_digit, total]", "count_pal=lambda n:[10**(n-1>>1)*9,10**(n-1>>1)*(20-n%2*9)-2]"]