["def pattern(n):\n    return '\\n'.join(''.join(str(i) for i in range(n, j, -1)) for j in range(n - 1, -1, -1))", "def pattern(n):\n    return \"\\n\".join(\"\".join(str(j) for j in range(n, n-i, -1)) for i in range(1, n+1))", "def pattern(n):\n    full = [str(x) for x in range(n, 0, -1)]\n    take = lambda x: ''.join(full[:x])\n    return '\\n'.join((take(x) for x in range(1, n + 1)))", "pattern = lambda n: '\\n'.join(''.join(str(n - j) for j in range(i + 1)) for i in range(n))", "def pattern(n):\n    a = [str(i) for i in range(n, 0, -1)]\n    return '\\n'.join(''.join(a[:i]) for i in range(1, n + 1))\n", "def pattern(n):\n  return \"\\n\".join([\"\".join([str(y) for y in range(n, n - x - 1, -1)]) for x in range(n)]);", "def pattern(n):\n    out,s=[],''\n    for i in reversed(range(1,n+1)):\n        s+=str(i)\n        out.append(s)\n    return '\\n'.join(out)", "def pattern(n):\n    return '\\n'.join(''.join(str(j) for j in range(n, i, -1)) for i in range(n-1, -1, -1))", "def pattern(n):\n    return '\\n'.join([''.join(map(str,list(range(n,n-i,-1)))) for i in range(1,n+1)])"]