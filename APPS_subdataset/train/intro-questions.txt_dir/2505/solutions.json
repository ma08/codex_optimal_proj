["class Solution:\n    def isRectangleOverlap(self, rec1: List[int], rec2: List[int]) -> bool:\n        return not (rec1[0] >= rec2[2] or rec1[2] <= rec2[0] or rec1[1] >= rec2[3] or rec1[3] <= rec2[1])", "class Solution:\n    def isRectangleOverlap(self, rec1: List[int], rec2: List[int]) -> bool:\n        \n        r1x1 = rec1[0]\n        r1y1 = rec1[1]\n        r1x2 = rec1[2]\n        r1y2 = rec1[3]\n        \n        r2x1 = rec2[0]\n        r2y1 = rec2[1]\n        r2x2 = rec2[2]\n        r2y2 = rec2[3]\n        \n        if r2x1 >= r1x2 or r1x1 >= r2x2:\n            return False\n        if r2y1 >= r1y2 or r1y1 >= r2y2:\n            return False\n        return True", "class Solution:\n    def isRectangleOverlap(self, rec1: List[int], rec2: List[int]) -> bool:\n        x1=rec1[0]\n        y1=rec1[1]\n        x2=rec1[2]\n        y2=rec1[3]\n        \n        return x1<rec2[2] and rec2[0]<x2 and y1<rec2[3] and rec2[1]<y2", "class Solution:\n    def isRectangleOverlap(self, rec1: List[int], rec2: List[int]) -> bool:\n        return not (rec1[2] <= rec2[0] or \n                    rec1[3] <= rec2[1] or \n                    rec1[0] >= rec2[2] or \n                    rec1[1] >= rec2[3])", "class Solution:\n    def isRectangleOverlap(self, rec1: List[int], rec2: List[int]) -> bool:\n        return rec1[0] < rec2[2] and rec2[0] < rec1[2] and rec1[1] < rec2[3] and rec2[1] < rec1[3]", "class Solution:\n    def isRectangleOverlap(self, r1: List[int], r2: List[int]) -> bool:\n        return max(r1[0],r2[0])<min(r1[2],r2[2]) and max(r1[1],r2[1])<min(r1[3],r2[3]) \n", "class Solution:\n    def isRectangleOverlap(self, rec1: List[int], rec2: List[int]) -> bool:\n        x1, y1, x2, y2 = rec1\n        i1, j1, i2, j2 = rec2\n        \n        \n        if i1 >= x2 or x1 >= i2 or y1 >= j2 or j1 >= y2:\n            return False\n        return True", "class Solution:\n    def isRectangleOverlap(self, rec1: List[int], rec2: List[int]) -> bool:\n        sortedR1 = rec1\n        if rec1[0] > rec1[2]:\n            sortedR1[0] = rec1[2]\n            sortedR1[2] = rec1[0]\n        if rec1[1] > rec1[3]:\n            sortedR1[1] = rec1[3]\n            sortedR1[3] = rec1[1]\n        sortedR2 = rec2\n        if rec2[0] > rec2[2]:\n            sortedR2[0] = rec2[2]\n            sortedR2[2] = rec2[0]\n        if rec2[1] > rec2[3]:\n            sortedR2[1] = rec2[3]\n            sortedR2[3] = rec2[1]\n        \n#         if (sortedR1[0] == sortedR1[2]) or (sortedR1[1] == sortedR1[3]):\n#             return False\n#         if (sortedR2[0] == sortedR2[2]) or (sortedR2[1] == sortedR2[3]):\n#             return False\n        \n#         if (sortedR2[0] < sortedR1[2] <= sortedR2[2]):\n#             if (sortedR2[1] < sortedR1[3] <= sortedR2[3]):\n#                 return True\n#             elif (sortedR2[1] <= sortedR1[1] < sortedR2[3]):\n#                 return True\n#             else:\n#                 return False\n        \n#         if (sortedR2[0] <= sortedR1[0] < sortedR2[2]):\n#             if (sortedR2[1] < sortedR1[3] <= sortedR2[3]):\n#                 return True\n#             elif (sortedR2[1] <= sortedR1[1] < sortedR2[3]):\n#                 return True\n#             else:\n#                 return False\n#         print('ok')\n        \n        if (sortedR2[0] < sortedR1[2]) and (sortedR2[2] > sortedR1[0]):\n            if (sortedR2[1] < sortedR1[3]) and (sortedR2[3] > sortedR1[1]):\n                return True \n        return False        ", "class Solution:\n    def isRectangleOverlap(self, rec1: List[int], rec2: List[int]) -> bool:\n        x1, y1, x2, y2 = rec1\n        x3, y3, x4, y4 = rec2\n        return not (x2 <= x3 or x4 <= x1 or y2 <= y3 or y4 <= y1)"]