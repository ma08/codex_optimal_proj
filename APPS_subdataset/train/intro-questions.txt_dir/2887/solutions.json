["import base64\nimport binascii\nimport math\nfrom itertools import zip_longest\n\n\ndef adFly_decoder(sc):\n    code1 = \"\"\n    code2 = \"\"\n    flip = False\n    for c in sc:\n        if flip:\n            code2 += c\n        else:\n            code1 += c\n        flip = not flip\n\n    try:\n        url = base64.b64decode(code1 + code2[len(code2) :: -1])\n    except binascii.Error:\n        return \"Invalid\"\n\n    try:\n        dec = base64.b64decode(url[26:])\n    except binascii.Error:\n        return \"Invalid\"\n\n    return str(dec, \"utf-8\")\n\n\ndef adFly_encoder(url):\n    prefix = \"96https://adf.ly/go.php?u=\"\n    full = str.encode(prefix) + base64.b64encode(str.encode(url))\n    enc = base64.b64encode(full)\n    cut = math.ceil(len(enc) / 2)\n    code1 = str(enc[: cut + 1], \"utf-8\")\n    code2 = str(enc[len(enc) : cut : -1], \"utf-8\")\n    swp = \"\".join(i + (j or \"\") for i, j in zip_longest(code1, code2))\n    return swp\n", "from base64 import b64decode, b64encode\nfrom random import randint\n\n\ndef adFly_decoder(sc):\n    return b64decode(b64decode(sc[::2] + sc[::-2])[26:]).decode('utf-8') or 'Invalid'\n\n\ndef adFly_encoder(url):\n    url = f'{randint(0, 99):02d}https://adf.ly/go.php?u={url}'.encode('utf-8')\n    encoded = b64encode(url[:26] + b64encode(url[26:])).decode('utf-8')\n    length = len(encoded) // 2\n    return ''.join(x + y for x, y in zip(encoded[:length], encoded[:length - 1:-1]))", "import base64\n\ndef adFly_decoder(sc):\n    #your code here\n    code1 = ''\n    code2 = ''\n    flg = True\n    for ch in sc:\n        if flg:\n            code1 += ch\n        flg = not flg\n        \n    flg = True\n    for ch in sc[::-1]:\n        if flg:\n            code1 += ch\n        flg = not flg\n        \n    try:\n        s = base64.b64decode(code1 + code2).decode('utf-8')\n        s = s.split('//adf.ly/go.php?u=')[1]\n        return base64.b64decode(s).decode('utf-8')\n    except: \n        return 'Invalid'\n\ndef adFly_encoder(url):\n    s = '96https://adf.ly/go.php?u='\n    e_url = base64.b64encode(bytes(url, 'utf-8')).decode('utf-8')\n    s += e_url\n    b64 = list(base64.b64encode(bytes(s, 'utf-8')).decode('utf-8'))\n    \n    yummy = ''\n    flg = True\n    while b64:\n        if flg:\n            yummy += b64.pop(0)\n        else:\n            yummy += b64.pop()\n        flg = not flg\n    \n    return yummy", "import base64\nfrom random import randint\ndef adFly_decoder(sc):\n    code1 = sc[0:len(sc):2]\n    code2 = sc[len(sc):0:-2]\n    print(sc)\n    if len(code2)-1 >= 8:\n        b = base64.b64decode(code1 + code2)\n        b = str(b).split('?')\n        return str(base64.b64decode(b[1][2:-1]))[2:-1]\n    return 'Invalid'\ndef adFly_encoder(url):\n    url_encoded = str(base64.b64encode(url.encode(\"ascii\")))[2:-1]\n    url_adfly = str(randint(0, 9)) + str(randint(0,9)) + 'https://adf.ly/go.php?u=' + url_encoded\n    b = base64.b64encode(url_adfly.encode(\"ascii\"))\n    b = str(b)[2:-1]\n    sc1 = b[0:len(b)//2]\n    sc2 = b[len(b)//2:][::-1]\n    sc = \"\"\n    idx = 0\n    for x in range(len(b)):\n        if x % 2 == 0:\n            sc += sc1[idx]\n        else:\n            sc += sc2[idx]\n            idx+=1\n    return sc\n        \n", "import random\nimport base64\n\ndef adFly_decoder(sc):\n    code1 = \"\"\n    code2 = \"\"\n\n    for i in range(len(sc)):\n        if i % 2 == 0:\n            code1 += sc[i]\n        else:\n            code2 += sc[i]\n    code2 = code2[::-1]\n    code1 += code2\n    try:\n        decodeStr = str(base64.b64decode(code1))[2:-1]\n    except base64.binascii.Error as err:\n        return \"Invalid\"\n    else:\n        a = base64.b64decode(decodeStr[decodeStr.find(\"?u=\") + 3:])\n        return str(a)[2:-1]\n\n\ndef adFly_encoder(url):\n    decodeStr = str(base64.b64encode(bytes(url, encoding=\"utf-8\")))[2:-1]\n    ran = random.randint(10, 99)\n    modStr = str(base64.b64encode(bytes(str(ran) + \"https://adf.ly/go.php?u=\" + decodeStr, encoding=\"utf-8\")))[2:-1]\n    code1 = modStr[:len(modStr) // 2]\n    code2 = modStr[len(modStr) // 2:]\n    res = \"\"\n    ic1 = ic2 = 0\n    for i in range(len(modStr)):\n        if i % 2 == 0:\n            res += code1[ic1]\n            ic1 += 1\n        else:\n            res += code2[ic2 - 1]\n            ic2 -= 1\n    return res", "import base64\nimport random\n\nPREFIX = 'https://adf.ly/go.php?u='\n\ndef adFly_decoder(sc):\n    try:\n        decoded = base64.b64decode(sc[::2]+sc[1::2][::-1]).decode('utf-8')\n        assert decoded[:2].isdigit()\n        decoded = decoded[2:]\n        assert decoded.startswith(PREFIX)\n        return base64.b64decode(decoded[len(PREFIX):]).decode('utf-8')\n    except:\n        return 'Invalid'\n    \n    \ndef adFly_encoder(url):\n    adfly_url = f\"{random.randint(0,99):02d}{PREFIX}{base64.b64encode(url.encode('utf-8')).decode('utf-8')}\"\n    adfly_url = base64.b64encode(adfly_url.encode('utf-8')).decode('utf-8')\n    half1 = adfly_url[:(len(adfly_url)+1)//2]\n    half2 = adfly_url[(len(adfly_url)+1)//2:]\n    result = ''\n    while half1:\n        result += half1[0]\n        half1 = half1[1:]\n        if half2:\n            result += half2[-1]\n            half2 = half2[:-1]\n    return result\n", "import base64\n\ndef adFly_decoder(sc):\n    code1 = ''\n    code2 = ''\n    for i in range(len(sc)):\n        if(i%2==0):\n            code1 = code1 + sc[i]\n        else:\n            code2 = code2 + sc[i]\n    try:\n        url = base64.b64decode((code1+code2[::-1]).encode())[26:]\n        return base64.b64decode(url).decode()\n    except:\n        return 'Invalid'\n    \ndef adFly_encoder(url):\n    plain = f'00https://adf.ly/go.php?u={base64.b64encode(url.encode()).decode()}';\n    code = base64.b64encode(plain.encode()).decode()\n    i = len(code)//2\n    code1, code2 = code[:i], code[i:][::-1]\n    ysmm = ''\n    for ch1, ch2 in zip(code1, code2):\n        ysmm = ysmm + ch1 + ch2\n    return ysmm\n", "import base64\n\ndef adFly_decoder(sc):\n    #your code here\n    try:\n        code1 = sc[::2]\n        code2 = sc[1::2]\n        code2 = code2[::-1]    # reverse\n        decode_adfly = base64.b64decode(code1 + code2).decode(\"utf-8\") \n        encoded_url = decode_adfly.split(\"https://adf.ly/go.php?u=\")[-1]\n        return base64.b64decode(encoded_url).decode(\"utf-8\") \n    except:\n        return \"Invalid\"\n    \ndef adFly_encoder(url):\n    #your code here\n    code = base64.b64encode(url.encode()).decode(\"utf-8\")\n    ad_fly_code = \"12https://adf.ly/go.php?u=\" + code\n    final_code = base64.b64encode(ad_fly_code.encode()).decode(\"utf-8\")\n    \n    l = len(final_code)\n    half = l // 2\n    first_half = final_code[0:half] \n    second_half = final_code[half if l % 2 == 0 else half+1:] \n    \n    second_half = second_half[::-1]\n    result_string = \"\"\n    \n    for i in range(half):\n        result_string += first_half[i]\n        if i < half - 1 or l % 2 == 0:\n            result_string += second_half[i]\n            \n    return result_string\n    \n"]