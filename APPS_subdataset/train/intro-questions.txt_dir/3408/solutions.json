["from itertools import cycle\n\ndef add_check_digit(number):\n    fact = cycle([2,3,4,5,6,7])\n    r = sum( int(c) * next(fact) for c in number[::-1]) % 11\n    return number + ('0' if not r else 'X' if r == 1 else str(11-r))", "from itertools import cycle\n\n\ndef add_check_digit(s):\n    rem = 11 - sum(int(a) * b for a, b in zip(\n        reversed(s), cycle(range(2, 8)))) % 11\n    return '{}{}'.format(s, {10: 'X', 11: 0}.get(rem, rem))\n", "def add_check_digit(n):\n    rem = sum((i % 6 + 2) * int(d) for i, d in enumerate(n[::-1])) % 11\n    return f\"{n}{'X' if rem == 1 else 11 - rem if rem else 0}\"", "def add_check_digit(n):\n    s = sum(int(n[-1 - i])*(i % 6 + 2) for i in range(len(n)))\n    return n + [str(11-s%11),['X','0'][s%11==0]][s%11<2]", "from itertools import cycle\n\ndef add_check_digit(number):\n    it = cycle(range(2, 8))\n    rem = sum(int(n) * i for n, i in zip(reversed(number), it)) % 11\n    return number + '0X987654321'[rem]", "def add_check_digit(number):\n    checksum = sum(int(d) * (2, 3, 4, 5, 6, 7)[i % 6] \\\n        for i, d in enumerate(reversed(number)))\n    checkdigit = 11 - (checksum % 11)\n    return number + str({11: 0, 10: 'X'}.get(checkdigit, checkdigit))", "add_check_digit=lambda s:s+'0X987654321'[sum((i%6+2)*int(d)for i,d in enumerate(s[::-1]))%11]", "def add_check_digit(n):\n    rem = sum((i % 6 + 2) * int(d) for i, d in enumerate(n[::-1])) % 11\n    return f\"{n}{'0X987654321'[rem]}\"", "from itertools import cycle\nfrom operator import mul\n\ndef add_check_digit(number):\n    x = sum(map(mul, cycle(range(2, 8)), map(int, str(number)[::-1]))) % 11\n    return number + ('0' if x==0 else 'X' if x==1 else str(11-x))"]