["from re import compile\n\nREGEX1 = compile(r\"0+|1+\").findall\nREGEX2 = compile(r\"(0+) (0+)\").findall\nbinary = \"{:07b}\".format\n\ndef send(s):\n    temp = ''.join(binary(ord(c)) for c in s)\n    return ' '.join(\"0 \" + '0'*len(x) if x[0] == '1' else \"00 \" + x for x in REGEX1(temp))\n\ndef receive(s):\n    temp = ''.join(y if x == '00' else '1'*len(y) for x,y in REGEX2(s))\n    return ''.join(chr(int(temp[i:i+7], 2)) for i in range(0, len(temp), 7))", "from itertools import groupby\n\ndef send(s):\n    return toUnary(''.join(f'{ ord(c) :0>7b}' for c in s))\n\ndef toUnary(c):\n    return ' '.join( f'{\"0\"*(2-int(b))} {\"0\"*sum(1 for _ in g)}' for b,g in groupby(c))\n\ndef receive(s):\n    it   = iter(s.split())\n    binS = ''.join( str( len(b)&1 ) * len(n) for b,n in zip(it,it))\n    return ''.join( chr( int(binS[i:i+7],2) ) for i in range(0,len(binS),7))", "from itertools import groupby\n\n\ndef send(stg):\n    bits = \"\".join(f\"{ord(c):07b}\" for c in stg)\n    return \" \".join(f\"{'0' * (2 - int(b))} {'0' * len(tuple(l))}\" for b, l in groupby(bits))\n    \n\ndef receive(stg):\n    chunks = stg.split()\n    bits = zip(chunks[::2], chunks[1::2])\n    chars = \"\".join(f\"{2 - len(bit)}\" * len(length) for bit, length in bits)\n    return \"\".join(chr(int(chars[i:i+7], 2)) for i in range(0, len(chars), 7))", "from itertools import groupby \n\ndef send(s):\n    s = ''.join(format(o, '07b') for o in map(ord, s))\n    return ' '.join(\n        f\"{'0' if key == '1' else '00'} {'0' * sum(1 for _ in grp)}\"\n        for key, grp in groupby(s)\n    )\n\ndef receive(s):\n    it = iter(s.split())\n    xs = ''.join(('1' if c == '0' else '0') * len(n) for c, n in zip(it, it))\n    return ''.join(chr(int(xs[i:i+7], 2)) for i in range(0, len(xs), 7))", "from itertools import groupby\n\ndoc = { '1':'0', '0':'00' }\n\ndef send(s):\n    return ''.join([' '.join( f'{doc[x[0]]} {\"0\"*x[1]}' for x in code( bit(s) ) )  ])\n    \ndef code(e):\n    return [(k,len(list(v))) for k,v in groupby(e)]\n    \ndef bit(e):\n    return ''.join( str(bin( ord(x) )[2:]).zfill(7) for x in e )\n    \ndef receive(s):\n    return ''.join( chr(int(e, 2)) for e in groups( encode( s.split(' ') ) , 7 ))\n\ndef encode(e):\n    return ''.join( { v:k for k,v in list(doc.items()) }[e[0]] * len(e[1]) for e in groups(e,2)  )\n        \ndef groups(e, d):\n    return [ e[i:i+d] for i in range(0,len(e),d)]\n    \n    \n    \n", "def get_stream(s):\n    return \"\".join(bin(ord(c))[2:].zfill(7) for c in s)\n\ndef parse_stream(s):\n    return \"\".join(chr(int(c, 2)) for c in [s[i:i+7] for i in range(0, len(s), 7)])\n\ndef get_next(s):\n    return s[:max(s.find(\"0\"), s.find(\"1\"))] or s\n\ndef get_sequences(s):\n    while s:\n        n = get_next(s)\n        s = s[len(n):]\n        if n: yield n\n\ndef compose(n):\n    return \"0\" * (2 - int(n[0])) + \" \" + \"0\" * len(n)\n\ndef decompose(s):\n    s = s.split(\" \")\n    output = \"\"\n    while s:\n        output += ({\"0\":\"1\",\"00\":\"0\"})[s.pop(0)] * len(s.pop(0))\n    return output\n\ndef send(s):\n    return \" \".join(compose(seq) for seq in get_sequences(get_stream(s)))\n\ndef receive(s):\n    return parse_stream(decompose(s))\n", "import re\n\ndef send(text):\n    tmp = (ord(char) for char in text)\n    tmp = (f\"{x:07b}\" for x in tmp)\n    tmp = \"\".join(tmp)\n    tmp = re.findall(\"0+|1+\", tmp)\n    tmp = (f\"{'0' if group[0] == '1' else '00'} {'0' * len(group)}\" for group in tmp)\n    return \" \".join(tmp)\n\ndef receive(unary):\n    tmp = re.findall(\"(0+) (0+)\", unary)\n    tmp = ((\"0\" if digit == \"00\" else \"1\") * len(count) for digit, count in tmp)\n    tmp = \"\".join(tmp)\n    tmp = re.findall(\".{7}\", tmp)\n    tmp = (chr(int(x, 2)) for x in tmp)\n    return \"\".join(tmp)", "import re\n\ndef send(s):\n    return \" \".join(f\"{'0' if x[0] == '1' else '00'} {'0' * len(x)}\" for x in re.findall(\"0+|1+\", \"\".join(f\"{x:07b}\" for x in map(ord, s))))\n\ndef receive(s):\n    return re.sub(\".{7}\", lambda x: chr(int(x.group(), 2)), \"\".join((\"1\" if x == \"0\" else \"0\") * len(y) for x, y in re.findall(\"(0+) (0+)\", s)))", "import re\ndef send(s):\n    return' '.join(('0'*(2-int(c[0]))+' '+'0'*len(c))for c in re.findall('1+|0+',''.join(f'{ord(c):07b}'for c in s)))\n\ndef receive(s):\n    return''.join(chr(int(''.join(a),2))for a in zip(*[iter(''.join(str(2-len(a))*len(b)for a,b in zip(*[iter(s.split())]*2)))]*7))\n", "def send(s):\n    r = ''\n    state = 0\n    for a in (ord(x) for x in s):\n        i = 64\n        while i > 0:\n            b = a & i\n            if (state == 0 or state == 2) and b == 0:\n                r = r + ' 00 0'\n                state = 1\n            elif (state == 0 or state == 1) and b != 0:\n                r = r + ' 0 0'\n                state = 2\n            elif (state == 2 and b != 0) or (state == 1 and b == 0):\n                r = r + '0'\n            i = i >> 1\n    return r[1:]\n\n\ndef receive(s):\n    r = 0\n    i = 0\n    state = -1\n    u = ''\n    for c in s:\n        if state == -1:\n            if c == '0':\n                state = 0\n        elif state == 0:\n            if c == '0':\n                state = 1\n            else:\n                state = 2\n        elif state == 1:\n            if c == ' ':\n                state = 3\n        elif state == 2:\n            if c == ' ':\n                state = -1\n            elif c == '0':\n                r = r << 1\n                r = r + 1\n                i = i + 1\n        elif state == 3:\n            if c == ' ':\n                state = -1\n            elif c == '0':\n                r = r << 1\n                i = i + 1\n        if i == 7:\n            u = u + chr(r)\n            i = 0\n            r = 0\n    return u"]