["def compute_depth(n):\n    i = 0\n    digits = set()\n    while len(digits) < 10:\n        i += 1\n        digits.update(str(n * i))\n    return i", "def compute_depth(n):\n    s, i = set(str(n)), 1\n    while len(s) < 10:\n        i += 1\n        s |= set(str(n*i))\n    return i\n", "from itertools import count\n\ndef compute_depth(n):\n    found = set()\n    update = found.update\n    return next(i for i,x in enumerate(count(n, n), 1) if update(str(x)) or len(found) == 10)", "def compute_depth(n):\n    seen = set()\n    for i in range(1, 99999999):\n        seen.update(str(n * i))\n        if len(seen) == 10:\n            return i", "from itertools import count\ndef compute_depth(n):\n    res = set(map(str, range(10)))\n    for a in count(1):\n        res -= set(str(n * a))\n        if not res:\n            return a", "def compute_depth(n):\n    digits, depth = set(), 0\n    while digits < set('0123456789'):\n        depth += 1\n        digits.update(str(depth * n))\n    return depth", "def compute_depth(n):\n    digits, depth, num = set('1234567890'), 1, n\n    \n    while True:\n        digits -= set(str(num))\n        \n        if not digits:\n            return depth\n        \n        num += n\n        depth += 1", "def compute_depth(n):\n    found = set()\n    mult = 1\n    while not set(x for x in range(0,10)) == found:\n        for digit in str(n*mult):\n            found.add(int(digit))\n        mult += 1\n    return mult-1", "def compute_depth(n):\n    all_digits = [0,1,2,3,4,5,6,7,8,9]\n    counter = 1\n    while all_digits != []:\n        for x in list(map(int,str(n * counter))):\n            if x in all_digits:\n                all_digits.remove(x)\n        counter = counter + 1\n    return counter-1", "from itertools import count\n\ndef compute_depth(n):\n    v, target = 0, set(\"0123456789\")\n    for x in count(1):\n        v += n\n        target -= set(str(v))\n        if not target: return x\n"]