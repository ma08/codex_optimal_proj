["from itertools import combinations\nfrom math import gcd\n\n\ndef lcm_cardinality(n):\n    return 1 + sum(1 for a, b in combinations(divisors(n), 2) if lcm(a, b) == n)\n        \ndef divisors(n):\n    d = {1, n}\n    for k in range(2, int(n**0.5) + 1):\n        if n % k == 0:\n            d.add(k)\n            d.add(n // k)\n    return sorted(d)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)", "from math import gcd\nfrom itertools import combinations\n\ndef divisors(n):\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            yield i\n            if i * i != n:\n                yield n // i\n    \ndef lcm_cardinality(n):\n    return sum(a * b == gcd(a, b) * n for a, b in combinations(divisors(n), 2)) + 1", "def lcm_cardinality(n):\n    res = 1\n    for i in [2] + list(range(3, int(n**0.5)+1, 2)):\n        count = 0\n        while not n%i: n, count = n//i, count+1\n        res *= 2*count + 1\n    if n > 1: res *= 3\n    return (res + 1) // 2", "def lcm_cardinality(n):\n    card = 1\n    for d in range(2, int(n ** .5) + 1):\n        if not n % d:\n            mul = 0\n            while not n % d:\n                mul += 1\n                n //= d\n            card *= 2 * mul + 1\n    if n > 1: card *= 3\n    return (card + 1) // 2", "def lcm_cardinality(n):\n    ans = 1\n    for i in range(2,int(n**0.5)+1):\n        if n % i == 0:\n            t = 0\n            while n % i == 0:\n                n/=i\n                t+=1\n            ans *= t * 2 + 1\n    if n > 1: ans *= 3\n    return int(((ans - 1) / 2)+1)", "from math import sqrt,gcd\ndef lcm_cardinality(n):\n    li = sum([[i] if n // i == i else [i, n // i] for i in range(1, int(sqrt(n))+1) if n % i == 0],[])\n    return len([[li[i], li[j]] for i in range(len(li)) for j in range(i, len(li)) if li[i] * li[j]//gcd(li[i], li[j])==n])", "from collections import Counter as C\n\np=[2]\nfor i in range(3,15000,2):\n    if all(i%j for j in p):\n        p.append(i)\n        \ndef factors(n):\n    a=[]\n    for i in p:\n        while n%i==0:\n            a.append(i)\n            n//=i\n    if n>1: a.append(n)\n    return a\n\ndef lcm_cardinality(n):\n    if n==1: return 1\n    c=list(C(factors(n)).values())\n    ans=0\n    for i in range(len(c)):\n        m=c[i]\n        for j in c[i+1:]:\n            m*=(2*j+1)\n        ans+=m\n    return ans+1", "from math import gcd, sqrt, ceil\nfrom itertools import chain\n\ndef lcm(x, y): return x // gcd(x, y) * y\n\ndef lcm_cardinality(n):\n  root    = ceil(sqrt(n))\n  divisor = chain.from_iterable([i, n // i] for i in range(1, root) if n % i == 0)\n  divisor = list(chain([root] if root * root == n else [], divisor))\n  size    = len(divisor)\n  return sum(1 for i in range(size) for j in range(i, size) if lcm(divisor[i], divisor[j]) == n)", "import math\ndef lcm(a, b):\n    return a * b // math.gcd(a, b)\n\ndef divisors(n):\n    i, ans = 1, []\n    while i**2 <= n:\n        if not n % i:\n            ans.append(i)\n            if i**2 != n: ans.append(n//i)\n        i += 1\n    return ans\n\ndef lcm_cardinality(n):\n    ans, divs = 0, divisors(n)\n    for i in range(len(divs)):\n        for j in range(i, len(divs)):\n            if lcm(divs[i], divs[j]) == n:\n                ans += 1\n    return ans", "def lcm_cardinality(n):\n    cardinality = 1\n    divisor = 2\n    while n>1:\n        order = 0\n        while n%divisor==0:\n            n //= divisor\n            order += 1\n        cardinality *= 2*order+1\n        divisor += 1\n    return (cardinality+1)//2\n"]