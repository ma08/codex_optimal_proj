["from itertools import chain, zip_longest\n\ndef interleave(*args):\n    return list(chain.from_iterable(zip_longest(*args)))", "def interleave(*args):\n    max_len = max(map(len,args))\n    interleaved = []\n    \n    for i in range(max_len):\n        for arr in args:\n            if i < len(arr):\n                interleaved.append(arr[i])\n            else:\n                interleaved.append(None)\n    \n    return interleaved", "from itertools import chain, zip_longest\n\ndef interleave(*args):\n    return [*chain.from_iterable(zip_longest(*args))]", "from itertools import chain, zip_longest\n\ndef interleave(*args):\n    return [*chain(*zip_longest(*args))]", "interleave=lambda *a:[b[i]if len(b)>i else None for i in range(max(len(i)for i in a))for b in a]", "from itertools import zip_longest\n\ndef interleave(*args):\n    return [y for x in zip_longest(*args) for y in x]\n", "interleave=lambda *a:sum([list(i) for i in __import__('itertools').zip_longest(*a)],[])", "from itertools import zip_longest\ndef interleave(*args):\n    return [i for _ in zip_longest(*args) for i in _]", "def interleave(*args):\n    arr = []\n    for i in range(max(len(a) for a in args)):\n        for j in range(len(args)):\n            try:    arr.append(args[j][i])\n            except: arr.append(None)\n    return arr", "def interleave(*args):\n    n_max = len(max(args,key=len))\n    return [j[i] if i < len(j) else None for i in range(n_max) for j in args]"]