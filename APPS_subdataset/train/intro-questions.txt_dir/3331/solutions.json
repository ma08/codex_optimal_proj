["def solve(arr, reach):\n    dogs, nCats = {i for i,x in enumerate(arr) if x=='D'}, 0\n    for i,c in enumerate(arr):\n        if c == 'C':\n            catchingDog = next((i+id for id in range(-reach,reach+1) if i+id in dogs), None)\n            if catchingDog is not None:\n                nCats += 1\n                dogs.remove(catchingDog)\n    return nCats", "def solve(lst, n):\n    lst, caught = lst[:], 0\n    while {\"C\", \"D\"} <= set(lst):\n        d, c = lst.index(\"D\"), lst.index(\"C\")\n        if abs(d - c) <= n:\n            caught, lst[d], lst[c] = caught + 1, \"\", \"\"\n        else:\n            lst[min(d, c)] = \"\"\n    return caught", "def solve(arr, n):\n    dogs = [i for i, x in enumerate(arr) if x == 'D']\n    cats = {i for i, x in enumerate(arr) if x == 'C'}\n    catch = 0\n    while dogs and cats:\n        dog = dogs.pop()\n        cat = max((cat for cat in cats if abs(dog - cat) <= n), default=-1)\n        if cat >= 0:\n            catch += 1\n            cats.remove(cat)\n    return catch", "def solve(arr,n):\n    c,l = 0,len(arr)\n    for i in range(l):\n        if arr[i] == 'C':\n            a = max(0,i-n)\n            b = min(l-1,i+n)\n            for j in range(a,b+1):\n                if arr[j] == 'D':\n                    arr[j] = 'd'\n                    c += 1\n                    break\n    return c", "def solve(arr, n):\n    caught = 0\n    for i in range(0, len(arr)):\n        if arr[i] == 'C':\n            for j in range(0, len(arr)):\n                if abs(i - j) <= n and arr[j] == 'D' and arr[i] != 'X':\n                    arr[i], arr[j] = 'X', 'X'\n                    caught += 1\n    return caught", "def solve(d,pos):\n    for i, j in enumerate(d):\n        if j == 'D':\n            left = next((k for k in range((i - pos) if i - pos > -1 else 0, i) if d[k] == 'C'), -1)\n            right = next((k for k in range(i, (i + pos + 1) if i + pos < len(d) else len(d)) if d[k] == 'C'), -1)\n            if left != -1 : d[left] = '.'\n            elif right != -1 : d[right] = '.'\n    return d.count('.')", "def solve(arr, n):\n    caught = []\n    for d in [idx for idx in range(len(arr)) if arr[idx] == 'D']:\n        for c in [idx for idx in range(len(arr)) if arr[idx] == 'C']:\n            if c in range(d - n, d + n + 1) and c not in caught:\n                caught += [c]\n                break\n    return len(caught)", "def solve(arr,n):\n    dc=n*['x']+arr[:]+n*['x']\n    p=0\n    ct=0\n    while p<len(dc):\n        if dc[p]=='D':\n            for i in range(p-n,p+n+1):\n                if dc[i]=='C':\n                    dc[i]='X'\n                    ct+=1\n                    break\n        p+=1\n    return ct", "def solve(arr,n):\n    eaten = []\n    dog = []\n    for i in range(len(arr)):\n        if arr[i] == \"D\":\n            for j in range(max(0, i-n), min(1+i+n, len(arr))):\n                if arr[j] == \"C\" and j not in eaten and i not in dog:\n                    dog.append(i)\n                    eaten.append(j)\n    return len(eaten)", "def solve(arr,n):\n    a=['']*n+arr[:]+['']*n\n    r=0\n    for i,e in enumerate(a):\n        if e=='D':\n            for j in range(i-n,i+n+1):\n                if a[j]=='C':\n                    r+=1\n                    a[j]=''\n                    break\n    return r"]