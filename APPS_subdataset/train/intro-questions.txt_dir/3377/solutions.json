["def solve(time):\n    def number(n):\n        if n > 20: return \"twenty {}\".format(number(n - 20))\n        return [\n            None, \"one\", \"two\", \"three\", \"four\",\n            \"five\", \"six\", \"seven\", \"eight\", \"nine\",\n            \"ten\", \"eleven\", \"twelve\", \"thirteen\",\n            \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\",\n            \"eighteen\", \"nineteen\", \"twenty\"][n]\n    hours, minutes = (int(s) for s in time.split(':'))\n    if minutes <= 30:\n        direction = \"past\"\n    else:\n        hours = (hours + 1) % 24\n        direction = \"to\"\n        minutes = 60 - minutes\n    hour = number((hours + 11) % 12 + 1) if hours else \"midnight\"\n    if minutes == 0:\n        return \"{} o'clock\".format(hour) if hours else hour\n    if minutes == 15:\n        return \"quarter {} {}\".format(direction, hour)\n    if minutes == 30:\n        return \"half past {}\".format(hour)\n    return \"{} minute{} {} {}\".format(\n        number(minutes), \"\" if minutes == 1 else \"s\", direction, hour)\n", "NUMS = [''] + '''\none two three four five six seven eight nine ten\neleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty\n'''.split()\nNUMS += [f'twenty {NUMS[i]}' for i in range(1, 10)]\nNUMS += ['thirty']\n\nMINUTES = [f'{x} minutes' for x in NUMS]\nMINUTES[1], MINUTES[15], MINUTES[30] = 'one minute', 'quarter', 'half'\n\nHOURS = ['midnight'] + NUMS[1:13] + NUMS[1:12]\n\ndef solve(time):\n    h, m = map(int, time.split(':'))\n    if h == m == 0:\n        return 'midnight'\n    if m == 0:\n        return f\"{HOURS[h]} o'clock\"\n    elif m <= 30:\n        return f'{MINUTES[m]} past {HOURS[h]}'\n    else:\n        h = (h + 1) % 24\n        return f'{MINUTES[60 - m]} to {HOURS[h]}'", "d = { 0 : 'midnight', 1 : 'one', 2 : 'two', 3 : 'three', 4 : 'four', 5 : 'five', 6 : 'six', 7 : 'seven', 8 : 'eight', 9 : 'nine',\n      10 : 'ten', 11 : 'eleven', 12 : 'twelve', 13 : 'thirteen', 14 : 'fourteen',\n      15 : 'quarter', 16 : 'sixteen', 17 : 'seventeen', 18 : 'eighteen', 19 : 'nineteen',\n      20 : 'twenty', 30 : 'half' }\n\n# 20 - 29 can be computed from this dict\nfor i in range(1, 10):\n    d[20 + i] = f'{d[20]} {d[i]}'\n\ndef solve(time):\n    h, m = [int(x) for x in time.split(':')]\n\n    # past or to ?\n    to = m > 30\n    past_to = 'past to'.split()[to]\n    if to:\n        h += 1\n        m = 60 - m\n    \n    # 12 hour style from 24\n    h = h % 12 if h != 12 else h\n    \n    # special case : o'clock\n    if m == 0:\n        oc = ' o\\'clock' if h else ''  # 00:00 ==> midnight only\n        return f'{d[h]}{oc}'\n    \n    s = 's' if m > 1 else ''\n    min_word = f' minute{s}' if m not in [15, 30] else ''\n    \n    minutes = d[m]\n    hour = d[h]\n    \n    return f'{minutes}{min_word} {past_to} {hour}'", "def solve(time):\n    w = [\"midnight\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\",\"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\", \"twenty one\", \"twenty two\", \"twenty three\", \"twenty four\", \"twenty five\", \"twenty six\", \"twenty seven\", \"twenty eight\", \"twenty nine\"]\n    h,m = map(int,time.split(\":\"))\n    a,b = w[12] if h == 12 else w[h%12], w[h+1] if h == 11 else w[(h+1)%12]\n    if m == 0: return \"midnight\" if h == 0 else a + \" o'clock\"\n    elif m <= 30: return w[m]  + \" minute past \" + a if m == 1 else \"quarter past \" + a if m == 15 else \"half past \" + a if m == 30 else w[m] + \" minutes past \" + a\n    else: return \"quarter to \" + b if m == 45 else \"one minute to \" + b if m == 59 else w[60-m] + \" minutes to \" + b", "def solve(time):\n    harr = [\"midnight\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\",\n            \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"one\", \"two\", \"three\", \"four\",\n            \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"midnight\"]\n    \n    marr = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\n         \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\",\n         \"eighteen\", \"nineteen\", \"twenty\", \"twenty one\", \"twenty two\", \"twenty three\", \"twenty four\", \"twenty five\",\n        \"twenty six\", \"twenty seven\", \"twenty eight\", \"twenty nine\"]\n    \n    hour, minute = list(map(int,time.split(\":\")))\n    if minute == 0:\n        if hour == 0:\n            return \"midnight\"\n        return harr[hour] + \" o'clock\"\n    if minute == 15:\n        return \"quarter past \" + harr[hour]\n    if minute == 45:\n        return \"quarter to \" + harr[1 + hour]\n    if minute == 30:\n        return \"half past \" + harr[hour]\n    if minute == 1:\n        return \"one minute past \" + harr[hour]\n    if minute == 59:\n        return \"one minute to \" + harr[1 + hour]\n    if int(int(minute) < 30):\n        return marr[minute] + \" minutes past \" + harr[hour]\n    return marr[60 - minute] + \" minutes to \" + harr[1 + hour]\n    \n", "def solve(time):\n    harr = [\"midnight\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\",\n            \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"one\", \"two\", \"three\", \"four\",\n            \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"midnight\"]\n    \n    marr = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\n         \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\",\n         \"eighteen\", \"nineteen\", \"twenty\", \"twenty one\", \"twenty two\", \"twenty three\", \"twenty four\", \"twenty five\",\n        \"twenty six\", \"twenty seven\", \"twenty eight\", \"twenty nine\"]\n    \n    hour = time[:2]\n    minute = time[3:]\n    if minute == \"00\":\n        if hour == \"00\":\n            return \"midnight\"\n        return harr[int(hour)] + \" o'clock\"\n    if minute == \"15\":\n        return \"quarter past \" + harr[int(hour)]\n    if minute == \"45\":\n        return \"quarter to \" + harr[1 + int(hour)]\n    if minute == \"30\":\n        return \"half past \" + harr[int(hour)]\n    if minute == \"01\":\n        return \"one minute past \" + harr[int(hour)]\n    if minute == \"59\":\n        return \"one minute to \" + harr[1 + int(hour)]\n    if int(int(minute) < 30):\n        return marr[int(minute)] + \" minutes past \" + harr[int(hour)]\n    return marr[60 - int(minute)] + \" minutes to \" + harr[1 + int(hour)]\n    \n", "locale = ('midnight one two three four five six seven eight nine ten eleven twelve '\n          'thirteen fourteen quarter sixteen seventeen eighteen nineteen twenty').split()\nlocale += [f'{locale[-1]} {digit}'.rstrip() for digit in locale[1:10]] + \"half, o'clock, minutes, past , to \".split(',')\n\ndef solve(time):\n    preposition, (hour, minute) = -2, list(map(int, time.split(':')))\n    if minute > 30: preposition, hour, minute = preposition + 1, (hour + 1) % 24, 60 - minute\n    if hour > 12: hour -= 12\n    if not minute: return f'{locale[hour]}{locale[-4] * (hour > 0)}'\n    return f'{locale[minute]}{locale[-3][:-(minute == 1) or None] * (minute not in (15, 30))}{locale[preposition]}{locale[hour]}'\n", "MINUTES = (\n    'zero,one,two,three,four,five,six,seven,eight,nine,' +\n    'ten,eleven,twelve,thirteen,fourteen,fifteen,sixteen,seventeen,eighteen,nineteen,' +\n    'twenty'\n).split(',')\nMINUTES.extend([f'twenty {n}' for n in MINUTES[1:10]])\n\n# Should be\n# HOURS = ['midnight'] + MINUTES[1:12] + ['midday'] + MINUTES[1:12] \nHOURS = ['midnight'] + MINUTES[1:13] + MINUTES[1:12] \n\n# Special cases: minutes -> (string template, hour offset)\nQUARTERS = {\n    0: (\"{h} o'clock\", 0),\n    15: ('quarter past {h}', 0),\n    30: ('half past {h}', 0),\n    45: ('quarter to {h}', 1),\n}\n\ndef solve(time):\n    hh, mm = list(map(int, time.split(':')))\n    h = HOURS[hh]\n    h1 = HOURS[(hh + 1) % 24]\n    \n    if mm in QUARTERS:\n        # On an hour, quarter or half\n        template, offset = QUARTERS[mm]\n        if mm == 0 and hh == 0:  # 12:00 should really be 'midday' too\n            return h\n        return template.format(h=h if offset == 0 else h1)\n    \n    if mm < 30:\n        # x minute(s) past y\n        return f\"{MINUTES[mm]} minute{'' if mm == 1 else 's'} past {h}\"\n\n    # x minute(s) to y\n    mm = 60 - mm\n    return f\"{MINUTES[mm]} minute{'' if mm == 1 else 's'} to {h1}\"\n", "TRANSLATE = {0: \"midnight\", 1: \"one\", 2: \"two\", 3: \"three\", 4: \"four\", 5: \"five\", 6: \"six\",\n        7: \"seven\", 8: \"eight\", 9: \"nine\", 10: \"ten\", 11: \"eleven\", 12: \"twelve\",\n        13: \"thirteen\", 14: \"fourteen\", 15: \"fifteen\", 16: \"sixteen\", 17: \"seventeen\", 18: \"eighteen\",\n        19: \"nineteen\", 20: \"twenty\", 30: \"thirty\", 40: \"forty\", 50: \"fifty\"}\n\ndef solve(time):\n    def hourRepr(hour):\n        return TRANSLATE[hour if hour <= 12 else hour % 12]\n    def minuteRepr(minute, toNextHour=False):\n        relative_minute = minute if not toNextHour else 60 - minute\n        def repr(minute):\n            if minute < 20 or minute % 10 == 0:\n                return TRANSLATE[minute]\n            return f\"{TRANSLATE[minute // 10 * 10]} {TRANSLATE[minute % 10]}\"\n        return f\"{repr(relative_minute)} minute{'s' if relative_minute > 1 else ''}\"\n    hour, minute = [int(t) for t in time.split(\":\")]\n    if minute == 0:\n        return f\"{hourRepr(hour)} o'clock\" if hour != 0 else hourRepr(hour)\n    elif minute == 30:\n        return f\"half past {hourRepr(hour)}\"\n    elif minute % 15 == 0:\n        return f\"quarter past {hourRepr(hour)}\" if minute == 15 else f\"quarter to {hourRepr(hour + 1)}\"\n    else:\n        return f\"{minuteRepr(minute)} past {hourRepr(hour)}\" if minute < 30 else f\"{minuteRepr(minute, toNextHour=True)} to {hourRepr(hour + 1)}\"", "NUM = \"\"\"midnight one two three four five six seven eight nine\n  ten eleven twelve thir_ four_ fif_ six_ seven_ eigh_ nine_\n  twenty\"\"\".replace(\"_\", \"teen\").split()\nfor n in range(1, 10): NUM.append(f\"twenty {NUM[n]}\")\n\n\ndef solve(time):\n    hh, mm = map(int, time.split(\":\"))\n    if mm > 30: hh += 1\n    \n    hour = NUM[hh % 12] if hh % 12 else NUM[hh % 24]\n    \n    if   mm ==  0: min = \"\"\n    elif mm == 15: min = \"quarter past \"\n    elif mm == 30: min = \"half past \"\n    elif mm == 45: min = \"quarter to \"\n    elif 0 < mm < 30: min = f\"{NUM[mm]} minute{'s' if mm > 1 else ''} past \"\n    else: min = f\"{NUM[60 - mm]} minute{'s' if mm < 59 else ''} to \"\n    \n    return min + hour + (\" o'clock\" if mm == 0 and hh > 0 else \"\")"]