["def ccw(matrix):\n    return [list(row) for row in zip(*map(reversed, matrix))]\n\ndef rotate_against_clockwise(matrix, times):\n    for __ in range(times % 4):\n        matrix = ccw(matrix)\n    return matrix", "import numpy as np\n\ndef rotate_against_clockwise(matrix, times):\n    return np.rot90(matrix, times).tolist()", "def rotate_against_clockwise(m, t):\n    return rotate_against_clockwise([list(r) for r in zip(*m)][::-1], t % 4 - 1) if t else m", "def rotate_against_clockwise(matrix, times):\n    if times == 0:\n        return matrix\n    else:\n        matrix = [list(row) for row in zip(*matrix)][::-1]\n        return rotate_against_clockwise(matrix, times % 4 - 1)\n", "rotate_against_clockwise=lambda a,n:rotate_against_clockwise(list(zip(*a))[::-1],n-1) if n%4 else list(map(list,a))", "def rotate_against_clockwise(matrix, times):\n    return list(map(list,zip(*matrix)))[::-1] if times % 4 == 1 else rotate_against_clockwise(list(map(list,zip(*matrix)))[::-1], times-1)", "def rotate_against_clockwise(m, n):\n    for _ in range(n % 4): m = [[r[i] for r in m] for i in range(len(m))][::-1]\n    return m", "def rotate_against_clockwise(matrix, times):\n    for i in range(3 - (times + 3) % 4):\n        matrix = list(map(list, zip(*matrix[::-1])))\n    return matrix"]