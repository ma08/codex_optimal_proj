["def rule30(a, n):\n    for _ in range(n):\n        a = [int(0 < 4*x + 2*y + z < 5) for x, y, z in\n                zip([0, 0] + a, [0] + a + [0], a + [0, 0])]\n    return a", "def rule30(li, n):\n    for i in range(n):\n        li = [0] + li + [0]\n        li = [(li[k-1] if k else 0)^(l or (li[k+1] if k<len(li)-1 else 0)) for k, l in enumerate(li)]\n    return li", "rule = ['0', '1', '1', '1', '1', '0', '0', '0']\n\ndef rule30(list_, n):\n    res = ''.join('1' if x == 1 else '0' for x in list_)\n    for _ in range(n):\n        res = '00' + res + '00'\n        res = ''.join(rule[int(res[i:i+3], 2)] for i in range(len(res)-2))\n    return list(map(int, res))", "age = lambda cur: int(sum(cur) == 1 or cur == (0,1,1))\ndef rule30(l, n):\n    if n <= 0: return l\n    l = [0,0] + l + [0,0]\n    return rule30([age(cur) for cur in zip(l[:-2],l[1:-1],l[2:])], n-1)\n", "def cell30(l, c, r):\n  if l == 1: return 1 if c == 0 and r == 0 else 0\n  return 0 if c == 0 and r == 0 else 1\ndef rule30(row, n):\n  return pure30([c if c == 1 else 0 for c in row], n)\ndef pure30(row, n):\n  for i in range(n):\n    row.append(0)\n    row.insert(0, 0)\n    ref = row[:]\n    row = [cell30(0 if i == 0 else ref[i - 1], v, ref[i + 1] if i + 1 < len(ref) else 0) for i, v in enumerate(row)]\n  return row", "ONES = set(((0, 0, 1), (0, 1, 0), (0, 1, 1), (1, 0, 0)))\n\ndef rule30(array, n):\n    if n < 1:\n        return array\n    array = (0,) + tuple(1 if v == 1 else 0 for v in array) + (0,)\n    for _ in range(n):\n        array = (array[-1], 0) + array + (0, array[0])\n        array = tuple(int(array[i : i + 3] in ONES) for i in range(len(array) - 2))\n    return list(array[1:-1])\n", "def rule30(list_, n):\n    for _ in range(n):\n        list_=[0]+list_+[0]\n        list_=[ruler(list_[i-1],list_[i],list_[(i+1)%len(list_)]) for i in range(len(list_))]\n    return list_\n\ndef ruler(*args):\n    data=[1 if x==1 else 0 for x in args]\n    x=int(\"\".join(map(str,data)),2)\n    if x==0 or x>4: return 0\n    else: return 1", "def rule30(l, n):\n    d = {(0, 0, 0): 0, (0, 0, 1): 1, (0, 1, 0): 1,\n         (0, 1, 1): 1, (1, 0, 0): 1, (1, 0, 1): 0,\n         (1, 1, 0): 0, (1, 1, 1): 0}\n    for i in range(0, n):\n        l = [0] * 2 + l + [0] * 2\n        l = [d[(l[j], l[j + 1], l[j + 2])] for j in range(0, len(l) - 2)]\n    return l\n", "def rule30(lst, n):\n    dic1 = {'000': 0, '001': 1, '010': 1, '011': 1, '100': 1, '101': 0, \n            '110': 0, '111': 0}\n    lst = [0]*n + lst + [0]*n\n    for _ in range(n):\n        temp = lst[:]\n        for i in range(0, len(lst)):\n            x = [0] + lst[i:i+2] if i == 0 else (lst[i-1:] + [0] if i == len(lst)-1 else lst[i-1:i+2])\n            x = ''.join(map(str, x))\n            temp[i] = dic1[x]\n        lst = temp[:]\n    return lst"]