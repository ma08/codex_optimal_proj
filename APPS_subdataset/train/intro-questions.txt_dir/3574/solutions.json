["def Dragon(n):\n    if not isinstance(n, int) or n < 0:\n        return ''\n        \n    value = 'Fa'\n    \n    for i in range(n):\n        value = value.replace('a', 'aRcFR')\n        value = value.replace('b', 'LFaLb')\n        value = value.replace('c', 'b')\n        \n    return value.replace('a', '').replace('b', '')", "def Dragon(n):\n    if not isinstance(n, int) or n < 0:\n        return ''\n    s = 'Fa'\n    for i in range(n):\n        s = 'aRbFR'.join(t.replace('b', 'LFaLb') for t in s.split('a'))\n    return s.replace('a', '').replace('b', '')\n", "import re\ndef Dragon(n):\n  if not isinstance(n, int) or n < 0: return ''\n  sub_table = { 'a' : 'aRbFR', 'b' : 'LFaLb' }\n  s = 'Fa'\n  for i in range(0, n):\n    s = re.sub(r'[ab]', lambda m: sub_table[m.group()], s)\n  return s.translate(None, 'ab')\n", "def Dragon(n):\n  #your code here\n  if(type(n) != type(1)):\n      return ''\n  if(n<0):\n      return ''\n  if n == 0:\n      return 'F'\n  ret = 'Fa'\n  while(n>0):\n      temp = ''\n      for word in ret:\n          if(word == 'a'):\n              temp += 'aRbFR'\n          elif(word == 'b'):\n              temp += 'LFaLb'\n          else:\n              temp += word\n      ret = temp\n      n-=1\n  ret = ret.replace('a','')\n  ret = ret.replace('b','')\n  return ret\n    \n          \n      \n", "def Dragon(n, strng='Fa'):\n    if not isinstance(n, int) or n < 0: return ''\n    if not n: return strng.translate(None, \"ab\")\n    next = ''.join(\"aRbFR\" if c == 'a' else \"LFaLb\" if c == 'b' else c for i,c in enumerate(strng))\n    return Dragon(n-1, next)", "def Dragon(n):\n    if not isinstance(n, int) or n < 0:\n        return ''\n    s = 'Fa'\n    for _ in range(n):\n        s = ''.join({'a': 'aRbFR', 'b': 'LFaLb'}.get(c, c) for c in s)\n    return s.replace('a', '').replace('b', '')", "def Dragon(n):\n    if type(n) != int or n < 0:\n        return \"\"\n    stg, a, b = \"F{a}\", \"{a}R{b}FR\", \"LF{a}L{b}\"\n    for _ in range(n):\n        stg = stg.format(a=a, b=b)\n    return stg.replace(\"{a}\", \"\").replace(\"{b}\", \"\")", "def Dragon(n):\n    if not isinstance(n, int) or n < 0:\n        return \"\"\n    d = \"Fa\"\n    for i in range(n):\n        d = \"\".join(\"aRbFR\" if c == \"a\" else \"LFaLb\" if c == \"b\" else c for c in d)\n    return d.translate(dict.fromkeys(map(ord, \"ab\")))", "def Dragon(n, Curve='Fa'):\n  if type(n)!=int or n%1!=0 or n<0: return '' \n  \n  elif n==0: \n      return Curve.replace('a','').replace('b','')\n  else: \n      #now need to add an extra step where we swap out a dn b because otherwise the replace will affect the outcome. ie the replaces are not concurrent\n      return Dragon(n-1, Curve.replace('a','c').replace('b','d').replace('c','aRbFR').replace('d', 'LFaLb') )"]