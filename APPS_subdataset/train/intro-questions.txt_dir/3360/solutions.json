["from functools import reduce\ndef get_chance(n, x, a):\n    return round(reduce(lambda m, b: m * (1 - x / (n - b)), range(a), 1), 2)", "def get_chance(n, x, a):\n    r = 1\n    z = n-x\n    while a>0:\n        r *= z/n\n        n-=1\n        z-=1\n        a-=1\n    return round(r,2)", "def get_chance(shots, laxatives, drinks):\n    proba = 1\n    for i in range(drinks):\n        proba *= 1 - (laxatives / shots)\n        shots -= 1\n    return round(proba, 2)", "from operator import mul\nfrom functools import reduce\n\n\ndef get_chance(n, x, a):\n    return round(reduce(mul,((n-i-x)/(n-i) for i in range(a))), 2)", "import numpy as np\n\ndef get_chance(n, x, a):\n    ns = np.arange(n, n-a, -1)\n    return np.multiply.reduce((ns - x) / ns).round(2)", "def get_chance(n, x, a):\n    p = 1\n    for i in range(a):\n        p = p * (n-x-i) / (n-i)\n    return float(\"{:.2f}\".format(p) if p < 1 else 0.0)", "from functools import reduce\ndef get_chance(n,x,a):\n    return round(reduce(lambda x,y:x*y,((n-x-i)/(n-i) for i in range(a))),2)", "def get_chance(n, x, a):\n    # Calculate the probabilty that Peter drink just safe drinks\n    # First time the prob equals with (n-x) / n\n    # After first shot, the prob equal with ((n-1) - x )/ ( n - 1)\n    prob = 1\n    while a :\n        prob *= (n - x) / n\n        n -=1 \n        a -=1\n    return round(prob, 2)\n", "def get_chance(n, x, a):\n    output = 1\n    for i in range(0,a):\n        if n - i == x:\n            return 0\n        output *= (n-x-i)/(n-i)\n    return round(output,2)", "def get_chance(n, x, a):\n    c=0\n    r=n-x\n    p=1\n    while c<a:\n        b=r/n\n        p=p*b\n        r=r-1\n        n=n-1\n        c=c+1\n    return round(p,2)"]