["import re\n\ndef to_underscore(string):\n    return re.sub(r'(.)([A-Z])', r'\\1_\\2', str(string)).lower()    \n", "def to_underscore(string):\n    string = str(string)\n    camel_case = string[0].lower()\n    for c in string[1:]:\n        camel_case += '_{}'.format(c.lower()) if c.isupper() else c\n    return camel_case", "def to_underscore(string):\n    return ''.join('_'+c.lower() if c.isupper() else c for c in str(string)).lstrip('_')", "import re\ndef to_underscore(string):\n    return re.sub(\"(?<=.)(?=[A-Z])\",\"_\",str(string)).lower()", "import re\n\n\ndef to_underscore(string):\n    try:\n        return '_'.join(x.lower() for x in re.findall('[A-Z][^A-Z]*', string))\n    except:\n        return str(string)", "def to_underscore(string):\n    string = str(string)\n    new = []\n    for s in string:\n        if not new:\n            new.append(s)\n        else:\n            if s.isupper():\n                new.append(\"_\")\n            new.append(s)\n    return \"\".join(new).lower()\n", "def to_underscore(s):\n    if isinstance(s, (int, float)):\n        return str(s)\n    \n    return ''.join([c if c == c.lower() else \"_\"+c.lower() for c in s ]).strip(\"_\")", "def to_underscore(s):   \n    return \"\".join([\"_\" + c.lower() if c.isupper() else c for c in str(s)]).strip(\"_\")", "def to_underscore(xs):\n    return ''.join(('_' if i and x.isupper() else '') + x.lower() for i, x in enumerate(str(xs)))"]