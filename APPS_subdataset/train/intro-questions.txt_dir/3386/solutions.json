["from string import ascii_uppercase as u\n\ndef get_column_title(n):\n    assert isinstance(n, int) and n > 0\n    col = []\n    while n:\n        n, r = divmod(n-1, 26)\n        col.append(u[r])\n    return ''.join(reversed(col))", "upper = __import__(\"string\").ascii_uppercase.__getitem__\n\ndef get_column_title(num=None):\n    if not isinstance(num, int): raise TypeError()\n    if num < 1: raise IndexError()\n    res = []\n    while num:\n        num, r = divmod(num-1, 26)\n        res.append(r)\n    return ''.join(map(upper, reversed(res)))", "alpha = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\ndef get_column_title(n):\n    if n < 1:\n        raise ValueError\n    l = []\n    while n:\n        n, m = divmod(n-1, 26)\n        l.append(alpha[m])\n    return \"\".join(l[::-1])\n", "from string import ascii_uppercase\n\ndef get_column_title(n):\n    n -= 1\n    result = []\n    while n >= 0:\n        result.append(ascii_uppercase[n % 26])\n        n = n // 26 - 1\n    if not result:\n        raise ValueError('Not a valid number.')\n    return ''.join(result[::-1])", "def get_column_title(num):\n    if type(num) != int: raise TypeError\n    if num < 1: raise IndexError\n    \n    abc = \" ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    col_title = \"\"\n    while num > 0:\n        letter_index = num % 26\n        if letter_index == 0:\n            letter_index = 26\n            num -= 26\n        num //= 26\n        col_title = abc[letter_index] + col_title\n        \n    return col_title.strip()\n", "def get_column_title(number):\n    if number <= 0: raise ValueError\n    if number <= 26: return chr(number + 64)\n    else: return get_column_title((number-1) // 26) + chr(65 + (number-1) % 26)", "alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\ndef get_column_title(number):\n    result = []\n    if not isinstance(number, int):\n        raise TypeError\n\n    def convert(num):\n\n        if isinstance(num, list):\n            n = num[0]\n            # result = num\n        else:\n            if len(result) == 0:\n                result.append(num)\n            n = num\n\n        if 0 < n <= 26:\n            result.append(alphabet[n - 1])\n            return result\n        else:\n            if n % 26 == 0:\n                result[0] = convert(n // 26 - 1)\n            else:\n                result[0] = convert(n // 26)\n            result.append(alphabet[n % 26 - 1])\n            return result\n\n    res = convert(number)\n    result = []\n    return ''.join(res[1::])", "def get_column_title(num):\n    if num <= 0 :\n        raise \"IndexError\"\n    elif type(num)!=int:\n        raise \"TypeError\"\n    else:\n        string = \"\"\n        while num > 0:\n            num, remainder = divmod(num - 1, 26)\n            string = chr(65 + remainder) + string\n        return string\n        \n", "def get_column_title(num):\n    if num<1: return error\n    a = [num%26]\n    while num>26:\n        num = num//26-1\n        a += [num%26+1]\n    y = a+[num] if num>26 else a\n    if y[0]==0 and len(y)>1: y[1]-=1\n    return ''.join(['Z' if i==0 else chr(i+ord('A')-1) for i in y][::-1])\n", "from itertools import count\n\n\ndef get_column_title(num):\n    if num<1:\n        raise IndexError\n        \n    if num<=26:\n        return chr(ord('A')+num-1)\n    \n    return get_column_title((num-1)//26) + get_column_title(1+(num-1)%26)\n    \n    \n"]