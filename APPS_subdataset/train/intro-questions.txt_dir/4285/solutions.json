["def find_slope(points):\n    x1, y1, x2, y2 = points\n    if x2 - x1 == 0:\n        return \"undefined\"\n    return str((y2 - y1) // (x2 - x1))", "def find_slope(points):\n    x1, y1, x2, y2 = points\n    dx = x2 - x1\n    dy = y2 - y1\n    if dx != 0:\n        return str(int(dy / dx))\n    else:\n        return 'undefined'", "def find_slope(points):\n    run = points[0] - points[2]\n    rise = points[1] - points[3]\n    return \"undefined\" if run == 0 else \"%d\" % (rise / run)", "def find_slope(points):\n    x1, y1, x2, y2 = points\n    try:\n        slope = f'{(y2 - y1) // (x2 - x1)}'\n    except ZeroDivisionError as e:\n        slope = 'undefined'\n    return slope", "from typing import List\n\n\ndef find_slope(points: List[int]) -> str:\n    try:\n        return str((points[3] - points[1]) // (points[2] - points[0]))\n    except ZeroDivisionError:\n        return \"undefined\"\n", "def find_slope(points):\n    try:\n        return str(int((points[3] - points[1]) / (points[2] - points[0])))\n    except:\n        return \"undefined\"", "def find_slope(points):\n    delta_x = points[2] - points[0]\n    delta_y = points[3] - points[1]\n    if delta_x == 0:\n        return \"undefined\"\n    return str(delta_y // delta_x)", "find_slope=lambda p: str(int(1.0*(p[3]-p[1])/(p[2]-p[0]))) if (p[2]-p[0])!=0 else \"undefined\"\n", "from typing import List\n\ndef find_slope(points: List[int]) -> str:\n    \"\"\" Get a string representation of the slope of the line joining these two points. \"\"\"\n    x1, y1, x2, y2 = points\n    try:\n        return str(int((y2 - y1) / (x2 - x1)))\n    except ZeroDivisionError:\n        return \"undefined\"", "def find_slope(points):\n    lower = points[2] - points[0]\n    upper = points[3] - points[1]\n    \n    if upper == 0 and lower == 0:\n        return \"undefined\"\n    elif upper == 0:\n        return '0'\n    elif lower == 0:\n        return 'undefined'\n    else:\n        return str(int(upper / lower))\n", "def find_slope(points):\n    try:\n        return str(round((points[1] - points[3]) / (points[0] - points[2])))\n    except:\n        return 'undefined'", "def find_slope(points):\n    if points[2]==points[0] :\n        return \"undefined\"               \n    a = int((points[3]-points[1])/(points[2]-points[0]))\n    print(a)\n    return str(a);", "def find_slope(points):\n    side1 = points[2] - points[0]\n    side2 = points[3] - points[1]\n    return str(side2//side1) if side1 != 0 else \"undefined\"\n", "def find_slope(points):\n    if points[2]==points[0]:\n        return 'undefined'\n    else:\n        return str((points[3]-points[1])//(points[2]-points[0]))\n\n", "def find_slope(points):\n    x1,y1,x2,y2 = points[0],points[1],points[2],points[3]\n    if x1 == x2:\n        return \"undefined\"\n    else:\n        return str(int((y1-y2)/(x1-x2)))\n", "def find_slope(points):\n    vertical_change = points[3] - points[1]\n    horizontal_change = points[2] - points[0]\n    try:\n        slope = vertical_change / horizontal_change\n    except ZeroDivisionError:\n        return 'undefined'\n    return str(int(slope))\n    \n", "def find_slope(points):\n    if points[2] - points[0] == 0:\n        return \"undefined\"\n    else:\n        sloope = (points[3] - points[1])//(points[2] - points[0])\n        return str(sloope)\n", "def find_slope(points):\n    try:\n        return str(round((points[3] - points[1]) / (points[2] - points[0])))\n    except ZeroDivisionError:\n        return 'undefined'\n", "def find_slope(p):\n    y=(p[3]-p[1])\n    x=(p[2]-p[0])\n    if x==0:\n        return \"undefined\"\n    return str(int(y/x))", "def find_slope(points):\n    \n    x = points[2]-points[0]\n    return 'undefined' if x == 0 else str((points[3]-points[1])//(points[2]-points[0]))\n", "def find_slope(points):\n    return str(int((points[1]-points[3])/(points[0]-points[2])) )if len(points) == 4 and (points[0]-points[2]) != 0 else 'undefined'", "def find_slope(points):\n    x1,y1,x2,y2 = points\n    return str((y2 - y1) // (x2 - x1)) if x2 != x1 else \"undefined\"\n", "def find_slope(points):\n    if points[0] - points[2] == 0:\n        return 'undefined'\n    else:\n        return str(int((points[3] - points[1]) / (points[2] - points[0])))", "def find_slope(points):\n    a,b,c,d = points\n    if c != a:\n        return str(int((d-b)/(c-a)))\n    else: return 'undefined'\n", "def find_slope(points):\n    try:\n        return str(int(points[3] - points[1])//(points[2] - points[0]))\n    except ZeroDivisionError:\n        return \"undefined\"\n", "def find_slope(points):\n    dx = points[2] - points[0]\n    dy = points[3] - points[1]\n    try:\n        m = dy / dx\n        return f'{int(m)}'\n    except:\n        return \"undefined\"\n", "\n# formula: y-y1 = m(x-x1)\n\n\ndef find_slope(points):\n    x1, y1, x2, y2 = points[:]\n    slope = (y1-y2)//(x1-x2) if x1 != x2 else \"undefined\"\n    return str(slope)\n", "def find_slope(points):\n    x1, y1, x2, y2 = points\n    try: \n        slope = (y2 - y1)/(x2-x1)\n        return str(round(slope))\n    except:\n        return 'undefined'\n", "def find_slope(p):\n    if (p[2] - p[0]) == 0:\n        return \"undefined\"\n    else:\n        return f'{int((p[3] - p[1]) / (p[2] - p[0]))}'  \n", "def find_slope(points):\n    a=points[0]\n    b=points[1]\n    c=points[2]\n    d=points[3]\n    \n    if c-a==0:\n        return 'undefined'\n    else:\n        return str(int((d-b)/(c-a)))\n", "def find_slope(p):\n    x=p[0]-p[2]\n    y=p[1]-p[3]\n    if x!=0:\n        return str(int(y/x))\n    else:\n        return \"undefined\"\n", "def find_slope(points):\n    x1,y1,x2,y2 = points\n    dy,dx = y2-y1, x2-x1\n    return \"undefined\" if dx is 0 else str(int(dy/dx))\n", "import math\ndef find_slope(points):\n    delta_x = points[3] - points[1]\n    delta_y = points[2] - points[0]\n    \n    if delta_y == 0:\n        return 'undefined'\n    return str(math.floor(delta_x / delta_y))", "def find_slope(points):\n    if points[-2]==points[0]: return 'undefined'\n    return str(int((points[-1]-points[1])/(points[-2]-points[0])))", "def find_slope(p):\n    if p[0]==p[2]:\n        return \"undefined\"\n    else:\n        return str(int((p[1]-p[3])/(p[0]-p[2])))", "from math import hypot\ndef find_slope(points):\n    return str((points[3] - points[1]) // (points[2] - points[0])) if points[2] != points[0] else \"undefined\"", "def find_slope(p):\n    if p[2] == p[0]:\n        return \"undefined\"\n    else:\n        return str((p[3]-p[1])//(p[2]-p[0]))\n", "def find_slope(points):\n    rise = points[3] - points[1]\n    run  = points[2] - points[0]\n    return str(rise//run) if run else 'undefined'\n", "def find_slope(points):\n    try:\n        return str(int(points[3]-points[1])//int(points[2]-points[0]))\n    except ZeroDivisionError:\n        return \"undefined\"\n", "def find_slope(points):\n    x = points[2] - points[0]\n    y = points[3] - points[1]\n    if x == 0:\n        return \"undefined\"\n    else:\n        return str(int(y/x))", "def find_slope(points):\n    if points[2]==points[0]:\n        return 'undefined'\n    else:\n        return '0' if points[1]==points[3] else str((points[3]-points[1])//(points[2]-points[0]))\n\n", "def find_slope(points):\n    if (points[2] - points[0] == 0):\n        return \"undefined\"\n    m = (points[3] - points[1]) / (points[2] - points[0])\n    res = int(m)\n    return str(res)\n", "def find_slope(points):\n    y = points[1] - points[3]\n    x = points[0] - points[2]\n    try:\n        return str(int(y / x))\n    except:\n        return \"undefined\"", "def find_slope(points):\n    a, b, c, d = points\n    return str((b - d) // (a - c)) if a != c else 'undefined'", "def find_slope(points):\n    delta_x = points[0] - points[2]\n    delta_y = points[1] - points[3]\n    return str(delta_y // delta_x) if delta_x else 'undefined'\n", "def find_slope(points):\n    a, b, c, d = points\n    if a == c:\n        return \"undefined\"\n    return str((d - b) // (c - a))", "def find_slope(points):\n    return \"undefined\" if points[0] == points[2] else str(round((points[3]-points[1])/(points[2]-points[0])))\n", "def find_slope(points):\n    x = points[2] - points[0]\n    y = points[3] - points[1]\n    return f\"{round(y/x)}\" if x else \"undefined\"", "def find_slope(points):\n    a,b,c,d = points\n    if a-c == 0: return 'undefined'\n    return str(int((b-d)/(a-c)))\n", "def find_slope(p):\n    return \"undefined\" if p[0] == p[2] else str(int( ( p[1]-p[3] ) / ( p[0]-p[2] )))", "def find_slope(points):\n    a, b, c, d = points[0], points[1], points[2], points[3]\n    if a==c:\n        return \"undefined\"\n    else:\n        return str(int((b-d)/(a-c)))", "def find_slope(points):\n    return \"undefined\" if points[0] == points[2] else str(int((points[3] - points[1])/(points[2]-points[0])))", "def find_slope(points):\n    a,b,c,d = points\n    if a == c:\n        return \"undefined\"\n    else:\n        return str((d-b)//(c-a))\n", "def find_slope(points):\n    try:\n        print ('points =', points)\n        x1, y1, x2, y2 = points\n        slope = (y2 - y1) / (x2 - x1)\n        return f'{slope:.0f}' if slope != 0 else '0'\n    except (TypeError, ValueError, ZeroDivisionError):\n        return 'undefined'", "def find_slope(points: list):\n    try:\n        x1, y1, x2, y2 = points\n        return str((y2 - y1) // (x2 - x1))\n    except:\n        return 'undefined'", "def find_slope(p):\n    y = (p[1]-p[3])\n    x = (p[0]-p[2])\n    if x == 0:\n        return \"undefined\"\n    else:\n        return \"{}\".format(int(y/x))\n", "def find_slope(points):\n    try:\n        return str(round((points[3] - points[1]) / (points[2] - points[0])))\n    except:\n        return 'undefined'", "def find_slope(points):\n    if points[0] != points[2]:\n        return str(int((points[3]-points[1]) / (points[2]-points[0])))\n    else:\n        return \"undefined\"", "def find_slope(points):\n    try:\n        result = (points[3] - points[1]) // (points[2] - points[0])\n        return \"%s\" % (result,)\n    except ZeroDivisionError:\n        return \"undefined\"\n", "def find_slope(s):\n    try:\n        d = (s[3]-s[1])//(s[2]-s[0])\n        return str(d)\n    except:\n        return 'undefined'", "def find_slope(points):\n    try:\n        return f'{int((points[3]-points[1]) / (points[2] - points[0]))}' \n    except ZeroDivisionError:\n        return \"undefined\"", "def find_slope(points):\n    top_of_equation = points[3]-points[1]\n    bot_of_equation = points[2]-points[0]\n\n    if bot_of_equation == 0:\n        return \"undefined\"\n    return str(int(round(top_of_equation / bot_of_equation)))\n", "def find_slope(points):\n    a, b, c, d = points\n    try:\n        return str((d - b) // (c - a))\n    except ZeroDivisionError:\n        return 'undefined'\n", "find_slope=lambda p:str((p[3]-p[1])//(p[2]-p[0])) if p[2]!=p[0] else \"undefined\"", "def find_slope(points):\n    x0, y0, x1, y1 = points[0], points[1], points[2], points[3]\n    if x1 - x0 == 0:\n        return \"undefined\"\n    return str((y1 - y0) // (x1 - x0))\n", "def find_slope(points):\n    a,b,c,d = points\n    try:\n        return str(int((d-b)/(c-a)))\n    except ZeroDivisionError:\n        return 'undefined'", "def find_slope(points):\n    x1, y1, x2, y2 = points\n    return str((y2 - y1) // (x2 - x1)) if x2 - x1 != 0 else \"undefined\"", "def find_slope(points):\n    dx = points[2] - points[0]\n    dy = points[3] - points[1]\n    return str(dy // dx) if dx != 0 else \"undefined\"", "def find_slope(points):\n      x1 = points[0]\n      x2 = points[2]\n      y1 = points[1]\n      y2 = points[3]\n      \n      x3 = (x2 - x1)\n      y3 = (y2 - y1)\n      \n      if(x3 == 0):\n          return 'undefined'\n      else:\n          return f'{y3 // x3}'\n", "find_slope = lambda points: str((points[3]-points[1]) // (points[2]-points[0])) if points[2]-points[0] != 0 else 'undefined'", "def find_slope(a):\n    x1,x2 = a[0],a[2]\n    y1,y2 = a[1],a[3]\n    if x1 != x2:\n        return str(int((y2 - y1) / (x2 - x1)))\n    else:\n        return \"undefined\"\n", "def find_slope(points):\n    return str((points[1] - points[3]) // (points[0] - points[2])) if (points[0] - points[2]) else \"undefined\"", "def find_slope(points):\n    x1, y1, x2, y2 = points\n    if x1==x2:\n        return 'undefined'\n    else:\n        return str((y2 - y1)//(x2 - x1))", "def find_slope(points):\n    x1, y1, x2, y2 = points\n    return \"undefined\" if x2 - x1 == 0 else str((y2 - y1) // (x2 - x1)) \n\n\n# def find_slope(points):\n#     try:\n#         return str((points[3] - points[1]) / (points[2] - points[0]))\n#     except ZeroDivisionError:\n#         return \"undefined\"\n\n# def find_slope(points):\n#     a,b,c,d = points\n#     return 'undefined' if a == c else str((b - d) / (a - c))\n", "def find_slope(p):\n    x = p[3]-p[1]\n    y = p[2]-p[0]\n    \n    if y==0:\n       return \"undefined\"\n    else:\n       return \"{}\".format(int(x/y))\n    \n    \n", "def find_slope(points):\n    try:\n        k = (points[3] - points[1]) // (points[2] - points[0])\n        return str(k)\n    except ZeroDivisionError:\n        return 'undefined'", "def find_slope(points):\n    return(str(int((points[3] - points[1])/(points[2] - points[0]))) if points[0] != points[2] else \"undefined\")", "def find_slope(points):\n    [a,b,c,d]=points\n    return str(int((d-b)/(c-a))) if c!=a else \"undefined\"", "def find_slope(points):\n    dx = points[2] - points[0]\n    dy = points[3] - points[1]\n\n    return str(dy // dx) if dx else 'undefined'", "def find_slope(points):\n    a, b, c, d = points\n    return str((d - b) // (c - a)) if a != c else 'undefined'", "def find_slope(points):\n    try:\n        return str(int((points[1] - points[3]) / (points[0] - points[2])))\n    except:\n        return \"undefined\"", "def find_slope(p):\n    return str(int((p[3]-p[1])/(p[2]-p[0]))) if p[2] != p[0] else 'undefined'", "def find_slope(points):\n    delta_x = points[0] - points[2]\n    delta_y = points[1] - points[3]\n    \n    if delta_x == 0:\n        return 'undefined'\n    else:\n        return str(int(delta_y / delta_x))    ", "def find_slope(points):\n    if points[0] != points[2]:\n        return str(int((points[1] - points[3])/(points[0] - points[2])))\n    return \"undefined\"", "def find_slope(points):\n    x1, y1, x2, y2 = points\n    return f'{(y2 - y1) // (x2 - x1)}' if x1 != x2 else 'undefined'", "def find_slope(points):\n    x1, y1 = points[0], points[1]\n    x2, y2 = points[2], points[3]\n    \n    return str(int((y2 - y1) / (x2 - x1))) if x2 - x1 != 0 else 'undefined'", "def find_slope(points):\n    x = int(points[2]-points[0])\n    y=int(points[3]-points[1])\n    return str(int(y/x)) if x !=0 else \"undefined\"\n"]