["from itertools import cycle\nfrom string import ascii_lowercase\n\ndef decode(code, key):\n    keys = cycle(map(int, str(key)))\n    return ''.join(ascii_lowercase[n - next(keys) - 1] for n in code)", "def decode(code, key):\n     key=str(key)\n     return \"\".join([chr(code[i] +96 - int(key[i%len(key)])) for i in range(0, len(code))])", "decode=lambda c,k:''.join(chr(a-int(b)+96)for a,b in zip(c,str(k)*30))", "def decode(code, key):\n    base_dict = {}\n    alpha = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in range(1,27):\n        base_dict[i] = alpha[i-1]\n\n    key_extended = []\n    count = 0\n    for i in range(len(code)):\n        try :\n            key_extended.append(int(str(key)[count]))\n        except IndexError :\n            count = 0\n            key_extended.append(int(str(key)[count]))\n        count += 1\n\n    key_applied = []\n    for i in range(len(code)) :\n        key_applied.append(code[i] - key_extended[i])\n\n    decrypt = \"\"\n    for elt in key_applied :\n        decrypt += base_dict[elt]\n    \n    return decrypt", "def decode(code, key):\n    k = [int(k) for k in str(key)]\n    n = len(k)\n    return ''.join(chr(c - k[i % n] + 96) for i, c in enumerate(code))", "from itertools import cycle\nfrom operator import sub\n\n\ndef decode(code, key):\n    key = cycle(list(map(int, str(key))))\n    message = list(map(sub, code, key))\n    return ''.join([chr(x + ord('a') - 1) for x in message])\n", "def decode(code, key):\n    k = str(key)\n    while len(k) < len(code):\n        k *= 2\n    return ''.join(chr(x - int(y) + 96) for x, y in zip(code, k))", "import itertools\n\ndef decode(code, key):\n    return ''.join(chr(96+i-int(j)) for i, j in zip(code, itertools.cycle(str(key))))\n", "from itertools import cycle\n\ndef decode(code, key):\n    k = cycle( list(map(int, str(key))) )\n    return ''.join( chr(96+c-next(k)) for c in code )"]