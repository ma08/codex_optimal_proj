["def unused_digits(*args):\n    return \"\".join(number for number in \"0123456789\" if number not in str(args))", "def unused_digits(*l):\n    digits_set = set(list(\"0123456789\"))\n    test_set = set(\"\".join(str(i) for i in l))\n    d = digits_set.difference(test_set)\n    r = \"\".join(sorted(d))\n    return r", "def unused_digits(*args):\n    s =  ''.join(map(str,args))\n    return ''.join(str(i) for i in range(0,10) if str(i) not in s)", "def unused_digits(*args):\n    return ''.join(sorted(set(\"0123456789\") - set(str(args))))", "def unused_digits(*ints): return \"\".join(sorted(list(set('0123456789') - set(c for i in ints for c in str(i)))))", "def unused_digits(*args):\n    s = \"\".join(str(a) for a in args)    # make a big string\n    return \"\".join(c for c in \"0123456789\" if c not in s)", "import string\n\ndef unused_digits(*args):\n  #args is tuple of numbers\n  #for each number we find, lets turn it into a string\n  #then for each char in num str just add it to a set of found digits\n  found_digits_chars = {char for n in args for char in str(n)}\n\n  #let's say i have set of all digits {'0' to '9'}\n  all_digits_chars = set(string.digits)\n  #then just subtract found digits from set of all digits\n  unused_digits_chars = all_digits_chars - found_digits_chars\n\n  #then of course change format of answer to ordered strings\n  return ''.join(sorted(list(unused_digits_chars)))\n", "def unused_digits(*args):\n    return ''.join(sorted(set('0123456789') - {c for s in map(str, args) for c in s}))", "def unused_digits(*args):\n    return ''.join(sorted(set('1234567890') - set(''.join(str(x) for x in args))))"]