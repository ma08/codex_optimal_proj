["import re\nfrom collections import OrderedDict\nscale = \"2 3 4 5 6 7 8 9 10 J Q K A\".split(\" \")\ndef sort_poker(john, uncle):\n    order = list(OrderedDict.fromkeys(re.findall(r\"([SDHC])[0-9JQKA]+\",uncle)))\n    john  = re.findall(r\"([SDHC])([0-9JQKA]+)\",john)\n    return \"\".join(\"\".join(i) for i in sorted(john,key=lambda x : (order.index(x[0]),scale.index(x[1])) ))", "import re\ndef sort_poker(H, U, OD='2 3 4 5 6 7 8 9 10 J Q K A'.split()):\n    ORDER = re.findall(r'(.)\\1*',re.sub(r'[\\dJQKA]','', U))\n    return ''.join(sorted(re.findall(r'[SDHC](?:[23456789JQKA]|10)',H), key=lambda x:(ORDER.index(x[0]), OD.index(x[1:]))))", "order = lambda arr: {card[0]: i for i, card in enumerate(arr)}\nranks = order(\"2 3 4 5 6 7 8 9 10 J Q K A\".split())\nsuit_table = {ord(suit): ' ' + suit for suit in 'SDHC'}\nsplit_hand = lambda hand: hand.translate(suit_table).split()\n\ndef sort_poker(john, uncle):\n    suits = order(split_hand(uncle))\n    return ''.join(sorted(split_hand(john),\n                   key=lambda card: (suits[card[0]], ranks[card[1]])))", "def sort_poker(john, uncle):\n    card_order = \"23456789TJQKA\"\n    suit_order = [('S', uncle.index('S')), ('D', uncle.index('D')), ('H', uncle.index('H')), ('C',uncle.index('C'))]\n    suit_order = [X[0] for X in sorted(suit_order, key=lambda x : x[1])]\n    john = john.replace('10', 'T')\n    john = [john[i:i+2] for i in range(0, len(john), 2)]\n    john = sorted(john, key=lambda x: (suit_order.index(x[0]),card_order.index(x[1])))\n    return ''.join(john).replace('T', '10')", "S=lambda h,t={ord(s):' '+s for s in 'SDHC'}:h.translate(t).split()\nsort_poker=lambda a,b:(lambda s,r:''.join(sorted(S(a),key=lambda c:(s[c[0]],r[c[1]])))\n)(*[{c[0]:i for i,c in enumerate(S(p))}for p in(b,\"2 3 4 5 6 7 8 9 10 J Q K A\")])", "def sort_poker(john, uncle):\n    res=[]\n    index=0\n    while True:\n        try:\n            temp=john[index]+john[index+1]\n            if john[index+1]==\"1\":\n                temp+=john[index+2]\n                index+=3\n            else:\n                index+=2\n            res.append(temp)\n            temp=\"\"\n        except:\n            break\n    dict={}\n    for i in \"SDHC\":\n        dict[i]=uncle.index(i)\n    rec=\"2 3 4 5 6 7 8 9 10 J Q K A\"\n    dict2={}\n    for i,j in enumerate(rec.split()):\n        dict2[j]=i\n    for i,j in enumerate(res):\n        res[i]=list(j)\n        if len(res[i])==3:\n            res[i][1]=res[i][1]+res[i][2]\n            res[i].pop()\n    for i in range(len(res)):\n        for j in range(i+1,len(res)):\n            if dict2[res[j][1]]<dict2[res[i][1]]:\n                temp=res[i]\n                res[i]=res[j]\n                res[j]=temp\n    final=sorted(res, key=lambda x: (dict[x[0][0]]))\n    return \"\".join(sum(final, []))", "import re\ndef sort_poker(john, uncle):\n    SUITS = re.compile('[SHCD]')\n    order = list(dict.fromkeys(SUITS.findall(uncle)))\n    ord = {x:order.index(x) for x in order}\n    john = re.findall('([CDHS])(\\d+|[JKQA])', john)\n    suit = {'2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, '10':10, 'J':11, 'K':13, 'Q':12, 'A':14}\n    a = [(ord[x[0]], suit[x[1]], str(x)) for x in john]\n    a.sort(key= lambda x:x[1])\n    a.sort(key=lambda x:x[0])\n    return ''.join([x for x in  ''.join([x[2] for x in a])if x.isalpha() or x.isnumeric()])\n\n", "def sort_poker(john, uncle):\n    suits = ('S', 'D', 'H', 'C')\n    values = ('2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A')\n    get_value = lambda index, hand: hand[index + 1:index + 3] if hand[index + 1] == '1' else hand[index + 1]\n    get_all_indexes = lambda suit, hand: [i for i in range(len(hand)) if hand.startswith(suit, i)]\n    get_cards = lambda hand: {suit: [get_value(index, hand) for index in get_all_indexes(suit, hand)] for suit in suits}\n    get_suit_rating = lambda hand: list(dict.fromkeys(symbol for symbol in hand if symbol in suits))\n    johns_hand = sorted([(suit, sorted([card for card in value], key=lambda x: values.index(x)))\n                         for suit, value in list(get_cards(john).items())], key=lambda x: get_suit_rating(uncle).index(x[0]))\n    return ''.join(''.join(suit[0] + value for value in suit[1]) for suit in johns_hand)\n", "import re\ndef sort_poker(john, uncle):\n    j,s=re.findall(r'([SDHC])([0-9A-Z]0?)',john),''.join(re.findall('[SDHC]',uncle))\n    n='2 3 4 5 6 7 8 9 10 J Q K A'\n    return''.join(map(''.join, sorted(j,key=lambda c:(s.find(c[0]),n.find(c[1])))))"]