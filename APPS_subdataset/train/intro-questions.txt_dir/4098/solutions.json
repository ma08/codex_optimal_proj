["def new_numeral_system(n):\n    a = [c for c in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' if c <= n]\n    return ['{} + {}'.format(a[i], a[-1-i]) for i in range((len(a) + 1) // 2)]", "new_numeral_system=lambda n:['%c + %c'%(65+i,ord(n)-i)for i in range(ord(n)-63>>1)]", "def new_numeral_system(number):\n    return [(chr(65+i) + ' + ' + chr(ord(number)-i)) for i in range((ord(number)-65)//2+1)]", "def new_numeral_system(number):\n    system = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    n = system.index(number)\n    return [\"{} + {}\".format(system[i], system[n-i]) for i in range(n // 2 + 1)]\n", "def new_numeral_system(number):\n    chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    n = chars.index(number)\n    return [f'{chars[i]} + {chars[n-i]}' for i in range(0, n//2+1)]\n", "from string import ascii_uppercase as up\nfrom math import ceil\ndef new_numeral_system(num):\n    n=up.index(num)\n    n1=ceil(n/2)\n    return list(f\"{a} + {b}\" for a,b in zip(up[:n1+1],up[n1:n+1][::-1]))", "def new_numeral_system(number):\n    n = ord(number) - 65\n    return [f'{chr(x + 65)} + {chr(n - x + 65)}' for x in range(0, n // 2 + 1)]", "def new_numeral_system(letter):\n    number = ord(letter) - 65\n    half = number // 2\n    return [f\"{chr(i+65)} + {chr(number-i+65)}\" for i in range(half + 1)]", "def new_numeral_system(number):\n    output = []\n    for i in range(0,(ord(number)-ord('A'))//2+1):\n        output.append(chr(i+65) + ' + ' + chr(ord(number)-i))\n    return output", "def new_numeral_system(s):\n    n = ord(s)\n    return [f\"{chr(i + 65)} + {chr(n - i)}\" for i in range((n - 65) // 2 + 1)]"]