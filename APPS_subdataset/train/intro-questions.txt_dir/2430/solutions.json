["class Solution:\n     def hasAlternatingBits(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         \n         if n % 2 == 0:\n             n = n >> 1\n         \n         cnt = 0\n         a = n\n         while (a>0):\n             cnt += 1\n             a = a >> 1\n         \n         if cnt % 2 == 0:\n             return False\n         \n         c = 1\n         for i in range(1, cnt):\n             c = c << 1\n             if i % 2 == 0:\n                 c += 1\n                 \n         return c == n\n", "class Solution:\n     def hasAlternatingBits(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         before = None\n         while n != 0:\n             d = n%2\n             if not before:\n                 before = d + 1\n             else:\n                 if before == d + 1:\n                     return False\n                 before = d + 1\n             n = n >> 1\n             \n         return True\n", "class Solution:\n     def hasAlternatingBits(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         res = []\n         while n > 0:\n             res.append(str(n % 2))\n             n //= 2\n         for i in range(1, len(res)):\n             if res[i] == res[i - 1]:\n                 return False\n         return True\n", "class Solution:\n     def hasAlternatingBits(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         \n         if n % 2 == 0:\n             n = n >> 1\n         \n         cnt = 0\n         a = n\n         while (a>0):\n             cnt += 1\n             a = a >> 1\n         \n         if cnt % 2 == 0:\n             return False\n         \n         c = 1\n         for i in range(1, cnt):\n             c = c << 1\n             if i % 2 == 0:\n                 c += 1\n                 \n         return c == n\n", "class Solution:\n     def hasAlternatingBits(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         prev = n % 2\n         n = n // 2\n         while n > 0:\n             now = n % 2\n             if now == prev:\n                 return False\n             n = n // 2\n             prev = now\n         return True", "class Solution:\n     def hasAlternatingBits(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         # n = bin(n)[2:]\n         # a = n[0::2]\n         # b = n[1::2]\n         # return (a.count(a[0]) == len(a) if a else True) and (b.count(b[0]) == len(b) if b else True) and (a[0] != b[0] if a and b else True)\n         return '00' not in bin(n) and '11' not in bin(n)", "class Solution:\n     def hasAlternatingBits(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         i = n % 2\n         while n > 0:\n             if i % 2 == 0:\n                 n /= 2\n             else:\n                 n = (n - 1) / 2\n             i += 1\n         return n == 0", "class Solution:\n     def hasAlternatingBits(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         now = n & 1\n         while n:\n             print(n , n & 1)\n             n >>= 1\n             if n & 1 == now:\n                 return False\n             else:\n                 now = n & 1\n         return True", "class Solution:\n     def hasAlternatingBits(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         bin1 = str(bin(n)[2:])\n         length = len(bin1)\n         for i in range(0,length-1):\n             if bin1[i]==bin1[i+1]:\n                 return False\n         \n         return True\n         \n", "class Solution:\n     def hasAlternatingBits(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         bits = bin(n)\n         return all(bits[i] != bits[i+1] for i in range(len(bin(n)) - 1) )", "class Solution:\n     def hasAlternatingBits(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: bool\n         \"\"\"\n         prev = None\n         while n:\n             curr = n % 2\n             if curr == prev:\n                 return False\n             prev = curr\n             n //= 2\n         \n         return True\n"]