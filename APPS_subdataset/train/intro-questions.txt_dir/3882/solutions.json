["def sort_by_value_and_index(arr):\n    return [y[1] for y in sorted(enumerate(arr),key=lambda x:(x[0] + 1) * x[1])]", "def sort_by_value_and_index(arr):\n    return [b for _, b in sorted(enumerate(arr, 1), key=lambda x: int.__mul__(*x))]", "def sort_by_value_and_index(arr):\n    return [b for _, b in sorted(enumerate(arr, 1), key=lambda a: a[0] * a[1])]\n", "def sort_by_value_and_index(arr):\n    return [e for i, e in sorted(enumerate(arr, 1), key=lambda t: t[0] * t[1])]", "def sort_by_value_and_index(arr):\n    return [elem[1] for elem in sorted(enumerate(arr, 1), key=lambda elem: elem[0]*elem[1])]", "import itertools\ndef sort_by_value_and_index(nums):\n    #your code here\n    seq = itertools.count(1)\n    return sorted(nums, key=lambda num:num*next(seq))", "def sort_by_value_and_index(arr):\n    arr = zip(range(1, len(arr) + 1), arr)\n    return [x[1] for x in sorted(arr, key=lambda x: x[0] * x[1])]", "def sort_by_value_and_index(arr):\n    vals = [(index + 1) * element for index, element in enumerate(arr)]\n    newList = [(i, j) for i, j in zip(vals, arr)]\n    newList = sorted(newList, key = lambda element: (element[0]))\n    return [i[1] for i in newList]", "def sort_by_value_and_index(arr):\n    return [y for x, y in sorted(enumerate(arr, 1), key=lambda x: x[0] * x[1])]", "sort_by_value_and_index = lambda arr: [elem for key, original_index, elem in sorted(((i * elem, i, elem) for i, elem in enumerate(arr, 1)))]"]