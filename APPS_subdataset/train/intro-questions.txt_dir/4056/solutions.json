["def leaderboard_sort(leaderboard, changes):\n    for change in changes:\n        name, delta = change.split()\n        idx = leaderboard.index(name)\n        leaderboard.insert(idx - int(delta), leaderboard.pop(idx))\n    return leaderboard", "def leaderboard_sort(lbd, changes):\n    lbd = lbd[:]\n    for name,n in map(str.split, changes):\n        n,i = int(n), lbd.index(name)\n        lbd.pop(i)\n        lbd.insert(i-n,name)\n    return lbd", "def leaderboard_sort(L, C):\n    for c in C:\n        n, m = c.split()\n        i = L.index(n)\n        L.pop(i)\n        L.insert(i-eval(m), n)\n    return L\n", "def leaderboard_sort(leaderboard, changes):\n    for change in changes:\n        name, move = change.split()\n        value_index = leaderboard.index(name)\n\n        leaderboard.remove(name)\n        leaderboard.insert(value_index - int(move), name)\n\n    return leaderboard", "def leaderboard_sort(leaderboard, changes):\n    pos = leaderboard.copy()\n    for name, change in map(str.split, changes):\n        idx = pos.index(name)\n        pos.insert(idx - int(change), pos.pop(idx))\n    return pos", "def leaderboard_sort(board, changes):\n    for i, e in enumerate(changes):\n        name, point = e.split()\n        l = board.index(name)\n        board.insert( int(eval(f'{l}-({point})')), board.pop(l))\n    return board\n", "def leaderboard_sort(leaderboard, changes):\n    leaderboard.reverse()\n    for user, move in [change.split() for change in changes]:\n        index = leaderboard.index(user)\n        leaderboard.remove(user)\n        leaderboard.insert(eval(\"{}{}\".format(index, move)), user)\n    leaderboard.reverse()\n    return leaderboard", "def leaderboard_sort(leaderboard, changes):\n    for change in changes:\n        name, step = change.split()\n        step = int(step)\n        idx = leaderboard.index(name)\n        leaderboard.remove(name)\n        leaderboard.insert(idx-step, name)\n    return leaderboard", "def leaderboard_sort(leaderboard, changes):\n    change_dict = [(i.split()[0],int(i.split()[1])) for i in changes]\n    leaderboard = leaderboard.copy()\n    for name, change in change_dict:\n        name_index = leaderboard.index(name)\n        leaderboard.insert(name_index-change, leaderboard.pop(name_index))\n    return leaderboard        ", "def leaderboard_sort(leaderboard, changes):\n    nleaderboard = leaderboard\n    for change in changes:\n        npos = int(change.split(\" \")[1])\n        name = change.split(\" \")[0]\n        pos = nleaderboard.index(name)\n        if npos>0:\n            while npos!=0:\n                nleaderboard[pos-1],nleaderboard[pos]=nleaderboard[pos],nleaderboard[pos-1]\n                npos= npos - 1\n                pos = pos-1\n        elif npos<0:\n            while npos!=0:\n                leaderboard[pos+1],leaderboard[pos]=leaderboard[pos],leaderboard[pos+1]\n                npos= npos + 1\n                pos = pos+1\n    return nleaderboard", "def leaderboard_sort(leaderboard, changes):\n    for c in changes:\n        curr=leaderboard.index(c.split()[0])\n        leaderboard.insert(curr-int(c.split()[1]),leaderboard.pop(curr))\n    return leaderboard", "def leaderboard_sort(leaderboard, changes):\n    for change in changes:\n        name, offset = change.split(' ')\n        pos = leaderboard.index(name)\n        del leaderboard[pos]\n        leaderboard.insert(pos - int(offset), name)\n    return leaderboard\n", "def leaderboard_sort(leaderboard, changes):\n    leaderboard.reverse()\n    length = len(leaderboard)\n    for i in changes:\n        temp = i.split(' ')\n        k = temp[0]\n        v = int(temp[1])\n        for j in range(length):\n            if leaderboard[j] == k:\n                if j + v > length-1:\n                    temp2 = leaderboard.pop(j)\n                    leaderboard.insert(0, temp2)\n                    break\n                temp2 = leaderboard.pop(j)\n                leaderboard.insert(j+v, temp2)\n                break\n    leaderboard.reverse()\n    return leaderboard\n", "def leaderboard_sort(lb, chn):\n    for name in chn:\n        nm, diff = tuple(name.split())\n        diff = int(diff)\n        ind = lb.index(nm)\n        if diff > 0:\n            lb.insert(ind-diff, nm)\n            lb.pop(ind+1)\n        else:\n            lb.insert(ind+abs(diff)+1, nm)\n            lb.pop(ind)\n    print(lb)\n    return lb", "def leaderboard_sort(leaderboard, changes):\n    \n    for i in range(len(changes)):\n        \n        loc = leaderboard.index(changes[i].split(\" \")[0])\n        \n        leaderboard.insert(loc-int(changes[i].split(\" \")[1]),leaderboard.pop(loc))\n        \n        \n    return leaderboard\n    \n    #loop through changes implementing change\n    #find person in board\n    #pop them\n    #insert back in new position\n", "leaderboard_sort=lambda l,c:(lambda u:(([([0 for u['i'] in [u['d'][o.split()[0]] - int(o.split()[1])]],[(([0 for u['d'][k] in [u['d'][k]+1]] if u['d'][o.split()[0]]>v>=u['i'] else None),([0 for u['d'][k] in [u['d'][k]-1]] if u['d'][o.split()[0]]<v<=u['i'] else None)) for k,v in u['d'].items()],[None for u['d'][o.split()[0]] in [u['i']]]) for o in c],sorted(u['d'].keys(),key=lambda x:u['d'][x]))[1]))({'d':{l[i]:i for i in range(len(l))},'i':0})", "\n\ndef leaderboard_sort(leaderboard, changes):\n    data = []\n    for change in changes:\n        data.append(change.split(' '))\n        data[-1][1] = int(data[-1][1])\n        \n    for change in data:\n        curr_i = leaderboard.index(change[0])\n        shift_i = curr_i - change[1]\n        \n        if change[1] < 0: leaderboard.insert(shift_i + 1, leaderboard[curr_i])\n        else: leaderboard.insert(shift_i, leaderboard[curr_i])\n            \n        if shift_i < curr_i: leaderboard.pop(curr_i + 1)\n        else: leaderboard.pop(curr_i)\n            \n    return leaderboard", "def leaderboard_sort(leaderboard, changes):\n    for rec in changes:\n        name, move = rec.split()\n        curr_position = leaderboard.index(name)\n        del leaderboard[curr_position]\n        new_position = curr_position - int(move)\n        leaderboard.insert(new_position, name)\n    return leaderboard", "\ndef leaderboard_sort(leaderboard, changes):\n    for change in changes:\n        name, pos = change.split()\n        old_pos = leaderboard.index(name)\n        new_pos = eval(f\"{old_pos}-{pos}\")\n        if old_pos  < new_pos:\n            leaderboard = leaderboard[:old_pos] + leaderboard[old_pos+1:new_pos+1] +  [name] + leaderboard[new_pos+1:]\n        else:\n            leaderboard = leaderboard[:new_pos] + [name] + leaderboard[new_pos:old_pos]+ leaderboard[old_pos+1:]\n    return leaderboard", "def leaderboard_sort(leaderboard, changes):\n    adjustments = leaderboard\n    for change in changes:\n        adjustment_num = int(change.split(\" \")[1])\n        name = change.split(\" \")[0]\n        new_place = adjustments.index(name) - adjustment_num\n        adjustments.pop(adjustments.index(name))\n        adjustments.insert(new_place, name)\n    return adjustments"]