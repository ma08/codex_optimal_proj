["def duty_free(price, discount, holiday_cost):\n    saving = price * discount / 100.0\n    return int(holiday_cost / saving)", "def duty_free(price, discount, holiday_cost):\n  return holiday_cost * 100 // price // discount", "def duty_free(price, discount, holiday_cost):\n  return holiday_cost // (price * (discount / 100))", "def duty_free(price, discount, holiday_cost):\n    return holiday_cost * 100 // (price * discount)", "def duty_free(p, d, h):\n  return int(h/(p/100*d))", "def duty_free(price, discount, holiday_cost):\n    savings_per_bottle = price * discount/100\n    \n    return holiday_cost // savings_per_bottle #floor division because discrete units \n\n", "def duty_free(price, discount, holiday_cost):\n  return int(holiday_cost / (price * (discount / 100)))", "duty_free = lambda p, d, h: h // (p * d / 100)", "def duty_free(price, disc, h_c):\n    return int(h_c/(price*(disc/100)))", "def duty_free(price, discount, holiday_cost):\n  return 100*holiday_cost//(price*discount)", "def duty_free(price, discount, holiday_cost):\n    \n    savings=price*(discount/100)    \n    numberNeeded=holiday_cost/savings   \n    \n    return int(numberNeeded)\n", "def duty_free(price, discount, holiday_cost):\n  return int(holiday_cost / ((discount / 100) * price))", "def duty_free(price, discount, holiday_cost):\n      return int(round(holiday_cost//(price*discount*0.01)))\n    \n", "def duty_free(price, discount, holiday_cost):\n  return int(holiday_cost / price / discount / 0.01)", "def duty_free(price, discount, holiday_cost):\n    x = price*(discount*.01)\n    return int(holiday_cost/x)\n", "def duty_free(p, d, cost):\n  return cost//(p * (d/100))", "def duty_free(price, discount, holiday_cost):\n    result = holiday_cost//(price*discount*0.01)\n    return(round(result))\n", "def duty_free(price, discount, holiday_cost):\n  return int(holiday_cost / (price * discount * 0.01))", "from math import floor\n\ndef duty_free(price: int, discount: int, holiday_cost: int) -> int:\n    \"\"\"\n    How many bottles of duty free whiskey you would have to buy such that the saving \n    over the normal high street price would effectively cover the cost of your holiday?\n    \"\"\"\n    return floor(holiday_cost / (price * (discount / 100)))", "def duty_free(price, discount, holiday_cost):\n  a=price*(discount/100)\n  b=holiday_cost//a\n  return b", "duty_free = lambda price,discount,holiday_cost : int(holiday_cost/(price*(float(discount)/100)))", "duty_free=lambda p,d,h:int(h*100/p/d)", "def duty_free(price, discount, holiday_cost):\n    saving = price -(price - price * discount / 100)\n    price = holiday_cost // saving\n    return price", "import math\n\ndef duty_free(price, discount, holiday_cost):\n    percent = discount / 100 * price\n    bottles = holiday_cost / percent\n    return math.floor(bottles)", "from math import *\n\ndef duty_free(price, discount, holiday_cost):\n    discount_multiplyer = discount / 100\n    return floor(holiday_cost / (price*discount_multiplyer))", "import math\ndef duty_free(price, discount, holiday_cost):\n    discount = discount * .01\n    savings_per_bottle = price * discount\n    number_of_bottles_needed = holiday_cost / savings_per_bottle\n    return math.floor(number_of_bottles_needed)", "def duty_free(price, discount, holiday_cost):\n    discounted_price = (price*discount)/100\n    return holiday_cost//discounted_price", "import math\n\ndef duty_free(price, discount, holiday_cost):\n    x = holiday_cost / (price - (price - (price * (discount / 100))))\n    return math.floor(x)", "def duty_free(price, discount, holiday_cost):\n    economia = price - price*(100 - discount)*0.01 \n    s = holiday_cost//economia\n    return s\n", "def duty_free(price, discount, holiday_cost):\n    per_bottle = (discount / 100) * price\n    saving = holiday_cost // per_bottle # Rounding down with floor division\n    return saving", "import unittest\n\nPERCENT = 0.01\n\n\ndef duty_free(price, discount, holiday_cost):\n    return holiday_cost // (price * discount * PERCENT)\n    \n    \nclass TestDutyFree(unittest.TestCase):\n    def test_duty_free(self):\n        self.assertEqual(duty_free(price=12, discount=50, holiday_cost=1000), 166)\n", "def duty_free(price, discount, holiday_cost):\n  duty_free_cost = price - (price - (price*discount*0.01))\n  cost= holiday_cost // duty_free_cost\n  return cost", "def duty_free(price, discount, holiday_cost):\n    total_discount = price * discount / 100\n    return holiday_cost // total_discount", "def duty_free(price, discount, holiday_cost):\n    a = price*(discount/100)\n    b = holiday_cost//a\n    b = int(b)\n    return b\nprint(duty_free(12, 50, 1000))", "def duty_free(price, discount, holiday_cost):\n    bottles = holiday_cost / (price * discount)\n    return int(bottles * 100)", "def duty_free(price, discount, holiday_cost):\n    ma = (price / 100 ) * discount\n    return int(holiday_cost / ma )", "def duty_free(price, discount, holiday_cost):\n    spare = price/100 * discount\n    return  int(holiday_cost / spare)", "def duty_free(price, discount, holiday_cost):\n    return int(holiday_cost / ((discount / 100)*price))\n #   return price\n", "def duty_free(price, discount, holiday_cost):\n    newprc = price * (1-discount/100)\n    saving = price - newprc\n    return holiday_cost//saving", "duty_free = lambda price, discount, holiday_cost: int(100*holiday_cost/(price*discount))", "def duty_free(price, discount, holiday_cost):\n    \n    output =  price * discount / 100\n    result=int(holiday_cost/output)\n    return result\n    \n    \n", "def duty_free(price, discount, holiday_cost):\n    discount_total = price/100 * discount\n    result = holiday_cost // discount_total\n    return result\n", "import math\ndef duty_free(price, discount, holiday_cost):\n    i =(discount/100) * price\n    return math.floor(holiday_cost/i)", "import math\ndef duty_free(price, discount, holiday_cost):\n    leftover = price*(discount/100)\n    num = holiday_cost/leftover\n    return math.floor(num)", "def duty_free(price, discount, holiday_cost):\n    discount /= 100\n    price_with_discount = price*discount\n    finish_price = 0\n    count = 0\n    while finish_price < holiday_cost:\n        finish_price += price_with_discount\n        if finish_price > holiday_cost:\n            break\n        count += 1\n    return count", "def duty_free(price, discount, holiday_cost):\n        proc = discount / 100 \n        price_new = proc * price\n        final = holiday_cost / price_new\n        return int(final)", "def duty_free(price, discount, holiday_cost):\n    amount_discount = price / 100 * discount\n    result = holiday_cost // amount_discount\n    return result\n", "def duty_free(price, discount, holiday_cost):\n    # holiday cost / (price*discount) \n    money = price * (discount/100)\n    return int(holiday_cost/money)", "def duty_free(price, discount, holiday_cost):\n    q=0\n    w=0\n    p=0\n    q=(price*discount)/100\n    w=(holiday_cost/q)*10\n    return (w//10)", "def duty_free(price, discount, holiday_cost):\n    cst = holiday_cost // ((discount / 100) * price)\n    return cst", "def duty_free(price, discount, holiday_cost):\n    disc = price * discount / 100\n    duty_free = holiday_cost // disc\n    return duty_free\n", "def duty_free(price, discount, holiday_cost):\n  a = int(price) * int(discount) / 100\n  return int(holiday_cost / a)", "import math\ndef duty_free(price, discount, holiday_cost):\n    percent = price / 100 * discount\n    return math.floor(holiday_cost / percent)\nprint((duty_free(12, 50, 1000))) \n    \n", "def duty_free(price, discount, holiday_cost):\n    spb = price * discount / 100\n    return holiday_cost // spb", "def duty_free(price, discount, holiday_cost):\n    savings = price * discount/100\n    sol = holiday_cost/savings\n    return int(sol)", "def duty_free(p, d, c):\n    r = c // (p * d / 100)\n    return r", "def duty_free(price, discount, holiday_cost):\n    print(price,discount, holiday_cost)  \n    return holiday_cost//(discount*.01*price)", "def duty_free(price, discount, holiday_cost):\n    \n    dfree= (price*discount)/100\n    return holiday_cost//dfree", "def duty_free(price, discount, holiday_cost):\n    d = discount / 100\n    p = price * d\n    return holiday_cost // p\n", "def duty_free(price,\n              discount,\n              holiday_cost):\n\n\n    discount_amount = discount / 100. * price\n    if (discount_amount):\n\n        return holiday_cost // discount_amount\n\n    return holiday_cost\n", "def duty_free(price, discount, holiday_cost):\n    sale_price = price * discount / 100\n    return int(holiday_cost / sale_price)", "def duty_free(price, discount, holiday_cost):\n    actual_price = price * discount/100\n    \n    count = 0\n    total = 0\n    while total < holiday_cost:\n        total += actual_price\n        count += 1\n        \n    return count-1", "def duty_free(price, discount, holiday_cost):\n    disc_price = (discount/100) * price\n    return holiday_cost // disc_price \n", "def duty_free(price, discount, holiday_cost):\n    savings = price - (discount/100)*price\n    print(price,discount,holiday_cost,savings,holiday_cost//savings)\n    return holiday_cost // (price-savings)", "def duty_free(price, discount, holiday_cost):\n    return holiday_cost//(price-(price*(1-(0.01*discount))))", "def duty_free(price, discount, holiday_cost):\n    x = price / 100 * discount\n    return int(holiday_cost / x)\n", "def duty_free(price, discount, holiday_cost):\n    x = price * (discount/100)\n    price = holiday_cost /x\n    return (int(price))\n    \n    \n", "def duty_free(price, discount, holiday_cost):\n    price2=price* (discount/100)\n    cost=holiday_cost/price2\n    return ( int(cost) )", "def duty_free(price, discount, holiday_cost):\n    \n    economy_nom = price * discount / 100\n    return int(holiday_cost / economy_nom)", "def duty_free(price, discount, holiday_cost):\n    return int(int(holiday_cost) / int(discount) / int(price) * 100)", "def duty_free(price, discount, holiday_cost):\n    dut_price=price-(discount/100*price)\n    saving=price-dut_price\n    bottles=holiday_cost/saving\n    return int(bottles)\n", "def duty_free(price, discount, holiday_cost):\n    first = (price * discount) / 100\n    second = holiday_cost // first\n    return second", "import math\ndef duty_free(price, discount, holiday_cost):\n    return round(int(holiday_cost/(discount*(price/100))))", "def duty_free(price, discount, holiday_cost):\n    savings = (price * (discount/100))\n    price = holiday_cost // savings\n    return price", "def duty_free(price: int, discount: int, holiday_cost: int) -> int:\n    return int(holiday_cost // ((discount / 100) * price))", "def duty_free(price, discount, holiday_cost):\n    norm_price = price * (discount / 100)\n    return holiday_cost // norm_price    ", "def duty_free(price, discount, holiday_cost):\n    price = price * discount/100\n    bottles = holiday_cost // price\n    return bottles", "def duty_free(price, discount, holiday_cost):\n    return int(holiday_cost // (price - (price * (1- (discount/100)))))", "def duty_free(price, discount, holiday_cost):\n    return holiday_cost // (discount / 100.0 * price)", "import math\n\ndef duty_free(price, discount, holiday_cost):\n    \"\"\"(^-__-^)\"\"\"\n    count_bottle = (price / 100)*discount\n    result = holiday_cost / count_bottle\n    return (math.floor(result))\n", "duty_free = lambda price, discount, holiday_cost: holiday_cost // (price * 0.01 * discount)", "def duty_free(price, discount, holiday_cost):\n    save = price * discount / 100.0\n    return int(holiday_cost / save)\n# hard, should in the 1kyu\n", "def duty_free(price, discount, holiday_cost):\n    dsc_price = price * (1-discount)\n    diff = price - dsc_price\n    return int(holiday_cost / diff * 100)", "def duty_free(price, discount, holiday_cost):\n    saved_money = price * (discount/100)\n    return int(holiday_cost / saved_money)", "def duty_free(price, discount, holiday_cost):\n    save = price * (discount/100)\n    bottles = holiday_cost/save\n    return int (bottles)\n", "def duty_free(price, discount, holiday_cost):\n    amount_saved = discount/ 100 * price\n    return  int(holiday_cost/ amount_saved)", "def duty_free(price, discount, holiday_cost):\n  discount = discount / 100\n  save = (price * discount)\n  price = holiday_cost / save \n  return int(price)", "import math\ndef duty_free(price, discount, holiday_cost):\n    actual_discount = (discount / 100) * price\n    no_of_bottles = holiday_cost / actual_discount\n    return math.floor(no_of_bottles)", "def duty_free(price, discount, holiday_cost):\n    n = int(holiday_cost / (price * (discount/100))) \n    return n\n    \n\n\n", "def duty_free(normPrice, discount, holiday_cost):\n    return int(holiday_cost/((normPrice*discount)/100))\n", "def duty_free(price, discount, holiday_cost):\n    savings = price * (discount /100)\n    bottles = 0\n    suma = savings\n    while suma < holiday_cost:\n        bottles += 1\n        suma += savings\n    return bottles\n", "def duty_free(price, discount, holiday_cost):\n    saved=(price*discount)/100\n    price=holiday_cost//saved\n    return price", "import math \ndef duty_free(price, discount, holiday_cost):\n    x=(price*(discount/100))\n    return math.floor(holiday_cost/x)", "def duty_free(price, discount, holiday_cost):\n    count = holiday_cost // (price * discount / 100) \n    return count", "def duty_free(price, discount, holiday_cost):\n    x=discount/100\n    y=price*x\n    z=holiday_cost//y\n    return int(z)", "def duty_free(a, b, c):\n    pr = int(c/(a*b*0.01))\n    return pr", "def duty_free(price, discount, holiday_cost):\n    price = (price * discount/100) \n    return holiday_cost // price", "import math\n\ndef duty_free(price, discount, holiday_cost):\n    save = price*(discount/100)\n    price = holiday_cost/save\n    return math.floor(price)", "def duty_free(price, discount, holiday_cost):\n    duty_free = price * (discount/100)\n    bottles = int(holiday_cost/duty_free)\n    return bottles", "def duty_free(price, discount, holiday_cost):\n    return holiday_cost*100/discount//price"]