["def elections_winners(votes, k):\n    m = max(votes)\n    return sum(x + k > m for x in votes) or votes.count(m) == 1", "def elections_winners(votes, k):\n  best = max(votes)\n  if k == 0 and votes.count(best) == 1:\n      return 1\n  return len([x for x in votes if x + k > best])", "def elections_winners(votes, k):\n    m = max(votes)\n    return [0, 1][votes.count(m) == 1] if not k else sum(i + k > m for i in votes) ", "def elections_winners(a, n):\n    m = max(a)\n    return sum(x + n > m for x in a) if n else a.count(m) == 1", "def elections_winners(votes, k):\n    max_so_far = max(votes)\n    lst = [vote for vote in votes if vote + k > max_so_far]\n    return len(lst) if lst else bool(votes.count(max_so_far) == 1)", "def elections_winners(votes, k):\n    limit = max(votes)\n    return sum(1 for vote in votes if (vote + k) > limit) + (votes.count(limit) == 1) * (k == 0)\n", "elections_winners=lambda v,k:v.sort()or sum(e+k>v[-1]for e in v)or v.count(v[-1])==1", "def elections_winners(votes, k):\n  #coding and coding..\n    win = max(votes)\n    return sum(i + k > win for i in votes) or votes.count(win) == 1", "elections_winners=lambda v,k: (lambda m: (lambda c: 0 if c!=1 else c)(v.count(m)) if not k else len([p for p in v if p>m-k]))(max(v))", "def elections_winners(a,k):\n    m = max(a)\n    v = [i+k for i in a if i+k>m]\n    if k == 0 and not v and a.count(m)==1: return 1\n    return len(v)"]