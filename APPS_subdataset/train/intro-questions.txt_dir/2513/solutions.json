["class Solution:\n     def findNthDigit(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         i=count=9\n         while count < n:\n             i *= 10\n             count += i * len(str(i))\n         div, mod = divmod(n-(count-i*len(str(i))), len(str(i)))\n         print(i, count, div, mod)\n         target = (i//9-1) + div\n         if mod == 0:\n             print(target, int(str(target)[-1]))\n             return int(str(target)[-1])\n         else:\n             return int(str(target+1)[mod-1])", "class Solution:\n     def findNthDigit(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         digs = 1\n         while n > 9*(10**(digs-1))*digs:\n             n -= 9*(10**(digs-1))*digs\n             digs += 1\n         return int(str(int(10**(digs-1)+(n-1)/digs))[n%digs-1])", "class Solution:\n     def findNthDigit(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         digitCount = 1\n         totalNumbersWithDigitCount = 9*(10**(digitCount-1))*digitCount\n         while n > totalNumbersWithDigitCount:\n             n -= totalNumbersWithDigitCount\n             digitCount += 1\n             totalNumbersWithDigitCount = 9*(10**(digitCount-1))*digitCount\n             \n         baseNumber = 10**(digitCount-1) - 1\n         targetNumber = baseNumber + math.ceil(n/digitCount)\n         targetDigitIndex = (n%digitCount) - 1\n         \n         return int(str(targetNumber)[targetDigitIndex])", "class Solution:\n     def findNthDigit(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         start=0;\n         digit=0;\n         while True:\n             temp=9*10**digit;\n             if temp*(digit+1)<n:\n                 n-=temp*(digit+1);\n                 start+=10**digit*9\n                 digit+=1;\n             else:break\n         step=int(n/(digit+1))\n         start+=step;\n         n-=(digit+1)*step;\n         if n==0:return start%10;\n         start+=1;\n         return (int(start/10**(digit+1-n)))%10", "class Solution:\n     def findNthDigit(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         n -= 1\n         for digits in range(1, 11):\n             first = 10**(digits - 1)\n             if n < 9 * first * digits:\n                 return int(str(first + n/digits)[n%digits])\n             n -= 9 * first * digits", "class Solution:\n     def findNthDigit(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         # 1-9: 9, 10-99: 90, 100-999: 900, 1000-9999: 9000\n         i, count = 1, 9\n         total = 9\n         while total < n:\n             i += 1\n             count *= 10\n             total += i*count\n         \n         n -= total - i*count + 1\n         return int(str(n//i+10**(i-1))[n%i])", "class Solution:\n     def findNthDigit(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         n -= 1\n         for digits in range(1, 11):\n             first = 10**(digits - 1)\n             if n < 9 * first * digits:\n                 return int(str(first + n/digits)[n%digits])\n             n -= 9 * first * digits", "class Solution:\n     def findNthDigit(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         \n    #    my fourth solution.........\n         if n <= 0:\n             return\n         \n         i = 0\n         nbase = 0\n         thres = 1*9\n         if n <= thres:\n             return n\n         \n         while 1:\n             i += 1\n             nbase += 9*10**(i-1)\n             thres += (i+1)*9*10**i\n             if n <= thres:\n                 return int(str((n+i-(thres-(i+1)*9*10**i))//(i+1) + nbase)[(n+i-(thres-(i+1)*9*10**i))%(i+1)])\n                            \n                            \n                            \n                            \n         \"\"\"\n    #    my third solution....beat 93%....\n         if n <= 0:\n             return\n         \n         nbase = 0\n         thres = 1*9\n         if n <= thres:\n             return n\n         \n         nbase += 9*10**0\n         thres += 2*9*10**1\n         if n <= thres:\n             return int(str((n+1-(thres-2*9*10**1))//2 + nbase)[(n+1-(thres-2*9*10**1))%2])\n         \n         nbase += 9*10**1\n         thres += 3*9*10**2\n         if n <= thres:\n             return int(str((n+2-(thres-3*9*10**2))//3 + nbase)[(n+2-(thres-3*9*10**2))%3])\n         \n         nbase += 9*10**2\n         thres += 4*9*10**3\n         if n <= thres:\n             return int(str((n+3-(thres-4*9*10**3))//4 + nbase)[(n+3-(thres-4*9*10**3))%4])\n         \n         nbase += 9*10**3\n         thres += 5*9*10**4\n         if n <= thres:\n             return int(str((n+4-(thres-5*9*10**4))//5 + nbase)[(n+4-(thres-5*9*10**4))%5])\n         \n         nbase += 9*10**4\n         thres += 6*9*10**5\n         if n <= thres:\n             return int(str((n+5-(thres-6*9*10**5))//6 + nbase)[(n+5-(thres-6*9*10**5))%6])\n         \n         nbase += 9*10**5\n         thres += 7*9*10**6\n         if n <= thres:\n             return int(str((n+6-(thres-7*9*10**6))//7 + nbase)[(n+6-(thres-7*9*10**6))%7])\n         \n         nbase += 9*10**6\n         thres += 8*9*10**7\n         if n <= thres:\n             return int(str((n+7-(thres-8*9*10**7))//8 + nbase)[(n+7-(thres-8*9*10**7))%8])\n         \n         nbase += 9*10**7\n         thres += 9*9*10**8\n         if n <= thres:\n             return int(str((n+8-(thres-9*9*10**8))//9 + nbase)[(n+8-(thres-9*9*10**8))%9])\n         \"\"\"\n                            \n                            \n         \n         \n         \"\"\"\n    #    my second solution........beat 96%....\n         if n <= 0:\n             return\n         \n         if n <= 1*9:\n             return n\n         \n         if n <= 1*9+2*90:\n             return int(str((n+1 - 1*9)//2 + 9)[(n+1 - 1*9)%2])\n         \n         if n <= 1*9+2*90+3*900:\n             return int(str((n+2 - 1*9-2*90)//3 + 99)[(n+2 - 1*9-2*90)%3])\n         \n         if n <= 1*9+2*90+3*900+4*9000:\n             return int(str((n+3 - 1*9-2*90-3*900)//4 + 999)[(n+3 - 1*9-2*90-3*900)%4])\n         \n         if n <= 1*9+2*90+3*900+4*9000+5*90000:\n             return int(str((n+4 - 1*9-2*90-3*900-4*9000)//5 + 9999)[(n+4 - 1*9-2*90-3*900-4*9000)%5])\n         \n         if n <= 1*9+2*90+3*900+4*9000+5*90000+6*900000:\n             return int(str((n+5 - 1*9-2*90-3*900-4*9000-5*90000)//6 + 99999)[(n+5 - 1*9-2*90-3*900-4*9000-5*90000)%6])\n         \n         if n <= 1*9+2*90+3*900+4*9000+5*90000+6*900000+7*9000000:\n             return int(str((n+6 - 1*9-2*90-3*900-4*9000-5*90000-6*900000)//7 + 999999)[(n+6 - 1*9-2*90-3*900-4*9000-5*90000-6*900000)%7])\n         \n         if n <= 1*9+2*90+3*900+4*9000+5*90000+6*900000+7*9000000+8*90000000:\n             return int(str((n+7 - 1*9-2*90-3*900-4*9000-5*90000-6*900000-7*9000000)//8 + 9999999)[(n+7 - 1*9-2*90-3*900-4*9000-5*90000-6*900000-7*9000000)%8])\n         \n         if n <= 1*9+2*90+3*900+4*9000+5*90000+6*900000+7*9000000+8*90000000+9*900000000:\n             return int(str((n+8 - 1*9-2*90-3*900-4*9000-5*90000-6*900000-7*9000000-8*90000000)//9 + 99999999)[(n+8 - 1*9-2*90-3*900-4*9000-5*90000-6*900000-7*9000000-8*90000000)%9])\n         \"\"\"\n         \n         \n \n         \n         \n         \n         \"\"\"\n    #    my first solution...........beat 93%.....\n         if n <= 0:\n             return\n         \n         if n <= 1*9:\n             return n\n         \n         if n <= 1*9+2*90:\n             return int(str((n+1 - 1*9)//2 + 9)[n%2])\n         \n         if n <= 1*9+2*90+3*900:\n             return int(str((n+2 - 1*9-2*90)//3 + 99)[n%3-1])\n         \n         if n <= 1*9+2*90+3*900+4*9000:\n             return int(str((n+3 - 1*9-2*90-3*900)//4 + 999)[n%4-2])\n         \n         if n <= 1*9+2*90+3*900+4*9000+5*90000:\n             return int(str((n+4 - 1*9-2*90-3*900-4*9000)//5 + 9999)[n%5])\n         \n         if n <= 1*9+2*90+3*900+4*9000+5*90000+6*900000:\n             return int(str((n+5 - 1*9-2*90-3*900-4*9000-5*90000)//6 + 99999)[n%6-4])\n         \n         if n <= 1*9+2*90+3*900+4*9000+5*90000+6*900000+7*9000000:\n             return int(str((n+6 - 1*9-2*90-3*900-4*9000-5*90000-6*900000)//7 + 999999)[n%7])\n         \n         if n <= 1*9+2*90+3*900+4*9000+5*90000+6*900000+7*9000000+8*90000000:\n             return int(str((n+7 - 1*9-2*90-3*900-4*9000-5*90000-6*900000-7*9000000)//8 + 9999999)[n%8-2])\n         \n         if n <= 1*9+2*90+3*900+4*9000+5*90000+6*900000+7*9000000+8*90000000+9*900000000:\n             return int(str((n+8 - 1*9-2*90-3*900-4*9000-5*90000-6*900000-7*9000000-8*90000000)//9 + 99999999)[n%9-1])\n         \"\"\"\n", "class Solution:\n     def findNthDigit(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         multiple = math.floor(math.log10(n))\n         subtract = sum([math.pow(10,i) for i in range(0, multiple)])\n         boundary = multiple*math.pow(10,multiple)-subtract\n         diff = n-boundary\n \n         if(diff>0):\n             x = (math.pow(10, multiple) - 1) + math.ceil(diff/(multiple+1))\n             p = (diff-1)%(multiple+1)\n         elif(diff<=0):\n             x = math.pow(10,multiple)+ math.ceil(diff / (multiple))-1\n             p = (diff-1)%(multiple)\n \n         r = [ch for ch in str(x)][int(p)]\n \n         \n         return int(r)", "class Solution:\n     def findNthDigit(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         n -= 1\n         for digits in range(1, 11):\n             first = 10**(digits - 1)\n             if n < 9 * first * digits:\n                 return int(str(first + n//digits)[n%digits])\n             n -= 9 * first * digits", "class Solution:\n     def findNthDigit(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         \n         g = 1\n         while True:\n             g_len = (10 ** g - 10 ** (g - 1)) * g\n             if n <= g_len:\n                 break\n                 \n             n -= g_len\n             g += 1\n             \n         idx = (n - 1) // g\n         pos = (n - 1) % g\n         \n         num = 10 ** (g - 1) + idx\n         return int(str(num)[pos])\n", "class Solution:\n     def findNthDigit(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         multiple = math.floor(math.log10(n))\n         subtract = sum([math.pow(10,i) for i in range(0, multiple)])\n         boundary = multiple*math.pow(10,multiple)-subtract\n         diff = n-boundary\n \n         if(diff>0):\n             x = (math.pow(10, multiple) - 1) + math.ceil(diff/(multiple+1))\n             p = (diff-1)%(multiple+1)\n         elif(diff<=0):\n             x = math.pow(10,multiple)+ math.ceil(diff / (multiple))-1\n             p = (diff-1)%(multiple)\n \n         r = [ch for ch in str(x)][int(p)]\n \n         \n         return int(r)", "class Solution:\n     def findNthDigit(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         n_digit=1\n         while n>(n_digit*9*(10**(n_digit-1))):\n             n-=n_digit*9*(10**(n_digit-1))\n             n_digit+=1\n         n_pre=(n-1)//n_digit\n         digit_position=(n-1)%n_digit+1\n         num=10**(n_digit-1)+n_pre\n         tmp=0\n         num=(num%10**(n_digit-digit_position+1))//(10**(n_digit-digit_position))\n         return num"]