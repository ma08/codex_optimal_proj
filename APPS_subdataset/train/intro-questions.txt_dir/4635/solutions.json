["def create_octahedron(size):\n    if size <= 1 or size % 2 == 0:\n        return []\n    m = size // 2\n    return [[[int(abs(x - m) + abs(y - m) + abs(z - m) <= m)\n        for z in range(size)]\n        for y in range(size)]\n        for x in range(size)]", "def face(size, m, n):\n    return [\n        [abs(r-m) + abs(c-m) <= n for c in range(size)]\n        for r in range(size)\n    ]\n\ndef create_octahedron(size):\n    if size == 1 or size % 2 == 0:\n        return []\n    m = size // 2\n    return [face(size, m, min(i, size-1-i)) for i in range(size)]", "def f(n):\n    r = []\n    for i in range(1,n//2+2):\n        x = [0]*((n//2+1)-i) + [1]*i\n        r.append(x[:-1] + x[::-1])\n    return r\n\ndef create_octahedron(n):\n    ones = f(n)\n    zeros = [0]*n\n    r = []\n    for i in range(1,n//2+2):\n        m = ones[:i][:-1] + ones[:i][::-1]\n        x = n//2+1 - i\n        r.append([zeros]*x + m + [zeros]*x)\n    return r[:-1] + r[::-1] if n>1 and n%2 else []", "def create_octahedron(size):\n    if size<3 or size%2==0:\n        return []\n    result = []\n    center = size//2\n    for plane in range(size):\n        inner = [[0 if abs(center-i)+abs(center-j)+abs(center-plane)>center else 1 for i in range(size)] for j in range(size)]\n        result.append(inner)\n    return result", "def create_octahedron(size):\n    if size%2 == 0 or size <= 1: return []\n    r1, r2, r3 = [], [], []\n    \n    for i in range(size//2+1):\n        for j in range(size):\n            for k in range(size):\n#                 if j-i <= k <= j+i and size-j-1-i <= k <= size-j-1+i and j-(size-1-i) <= k <= j+size-1-i and (size-1)-j-((size-1)-i) <= k <= (size-1)-j+((size-1)-i):\n            # brain and server exhausting, time limit, but funny\n            # halving cube and mirroring at the end doas the trick\n            \n                if j-i <= k <= j+i and size-j-1-i <= k <= size-j-1+i:\n                    r3.append(1)\n                else: r3.append(0)                \n            r2.append(r3)\n            r3 = []\n        r1.append(r2)\n        r2 = []\n        \n    for i in range(size//2-1, -1, -1):\n        r1.append(r1[i])\n\n    return r1", "def create_octahedron(size):\n    if not (size > 1 and size&1): return []\n    res = [[[0]*size for _ in range(size)] for _ in range(size)]\n    s = size>>1\n    for i in range(-s, s+1):\n        x = abs(i)\n        for j in range(x-s, s-x+1):\n            y = abs(j)\n            for k in range(x+y-s, s-x-y+1):\n                res[s+i][s+j][s+k] = 1\n    return res", "def create_octahedron(n):\n    if n%2==0 or n<=1: return []\n    m, y = n//2+1, []\n    for j in range(m):\n        x = [list(map(int,'0'*(m-i-1+(m-j-1))+'1'*(2*(j+i-m+1)+1)+'0'*(m-i-1+(m-j-1)))) if i>=m-j-1 else list(map(int,'0'*n)) for i in range(m)]\n        y += [x+x[:-1][::-1]]\n    return y+y[:-1][::-1]"]