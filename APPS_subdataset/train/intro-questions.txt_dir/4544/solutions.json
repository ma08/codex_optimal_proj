["def factor_sum(n):\n    while True:\n        i=2\n        s=0\n        a=n\n        while i<=n:\n            if n%i==0:\n                s+=i\n                n/=i\n                if n==1:\n                    break\n            else:\n                i+=1\n                \n        if a!=s:\n            n=s\n        else:\n            return s", "from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef factor_sum(n):\n    i, res, save = 2, 0, n\n    while i*i <= n:\n        while not n%i:\n            n, res = n//i, res+i\n        i += 1 + i%2 # 2 -> 3 -> 5 -> 7 -> ...\n    if n > 2: res += n\n    return res if res == save else factor_sum(res)", "def prime_factors(n):\n    factors = []\n    for k in (2, 3):\n        while n % k == 0:\n            n //= k\n            factors.append(k)\n    k = 5\n    step = 2\n    while k * k <= n:\n        if n % k:\n            k += step\n            step = 6 - step\n        else:\n            n //= k\n            factors.append(k)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n\ndef factor_sum(n):\n    while True:\n        fs = sum(prime_factors(n))\n        if fs == n:\n            return fs\n        n = fs", "from collections import Counter\n\ndef factors(n):\n    c = Counter()\n    d = 2\n    while d * d <= n:\n        while n % d == 0:\n            n //= d\n            c[d] += 1\n        d += 1 + (d>2)\n    if n > 1:\n        c[n] += 1\n    return c\n\ndef factor_sum(n):\n    while True:\n        c = factors(n)\n        result = sum(key*value for key, value in c.items())\n        if result == n:\n            return n\n        n = result", "r=lambda n:next((p+r(n//p)for p in range(2,int(n**.5)+1)if n%p<1),n)\nfactor_sum=f=lambda n:(lambda s:s<n and f(s)or n)(r(n))", "import math\ndef factor_sum(n):\n    primes = [i for i in range(2, int(math.sqrt(n))+1)]\n    while n not in primes:\n        if n == sum(prime_factors(n, primes)):\n            return n\n        n = sum(prime_factors(n, primes))\n    return n\n    \ndef prime_factors(n, primes):\n    for i in primes:\n        for j in primes:\n            if j>i and j%i == 0:\n                primes.pop(primes.index(j))\n    factors = []\n    for p in primes:\n        while n%p == 0:\n            n //= p\n            factors.append(p)\n    if n != 1:\n        factors.append(n)\n    return factors", "from math import ceil\n\n\ndef is_prime(num):\n    if num == 2:\n        return True\n    for i in range(2, ceil(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef factor_sum(num):\n    while not is_prime(num):\n        n = num\n        factors_sum = 0\n        while num % 2 == 0:\n            factors_sum += 2\n            num /= 2\n\n        i = 3\n        max_factor = num**0.5\n        while i <= max_factor:\n            while num % i == 0:\n                factors_sum += i\n                num /= i\n                max_factor = num**0.5\n            i += 2\n\n        if num > 1:\n            factors_sum += num\n\n        if n == factors_sum:\n            return n\n        num = factors_sum\n    return num", "def aux(x):\n    s = 0\n    i = 2\n    while x > 1:\n        while x % i == 0:\n            s += i\n            x /= i\n        i += 1\n    return s\ndef factor_sum(num):\n    l = None\n    while l != num:\n        l = num\n        num = aux(num)\n    return l", "import math\ndef factors(n):\n    f = []\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                f.append(i)\n                n = n // i\n                break\n    return f\n\ndef factor_sum(n):\n    f = factors(n)\n    last = sum(f)\n    while n != f[0]:\n        n = sum(f)\n        f = factors(n)\n        if f == last:\n           return n\n        last = f\n    return n", "def factor_sum(n):\n    while True:\n        t, s, d = n, 0, 2\n        while d * d <= t:\n            while t % d == 0:\n                s += d\n                t //= d\n            d += 1\n        if t > 1:\n            s += t\n        if s == n:\n            return s\n        n = s"]