["import math\ndef isPrime(n):\n    if n <= 1:\n        return False\n    for i in range(2,int(math.sqrt(n)+1)):\n        if n % i == 0:\n            return False\n    return True\n\ndef step(g,m,n):\n    if m >= n:\n        return []\n    else:\n        for i in range(m,n+1-g):\n            if isPrime(i) and isPrime(i+g):\n                return[i,i+g]\n", "def prime (number):\n    if number < 2: return False\n    elif number == 2: return True\n    elif number % 2 == 0: return False\n    for i in range(3, int(number ** 0.5) + 1, 2):\n        if number % i == 0: return False\n    return True\n    \ndef step(g, m, n):\n    res = []\n    i = m\n    while (i <= n - g):\n        if prime(i) and prime(i + g):\n            res.append(i)\n            res.append(i + g)\n            return res\n        i += 1\n    return None", "def is_prime(n):\n    for i in range(2,int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n    \ndef step(g, m, n):\n    for i in range(m, n - g):\n        if is_prime(i) and is_prime(i + g):\n            return [i,i+g]\n    return None", "step=lambda g,m,n,A=lambda x:all(x%i for i in range(2,int(x**.5)+1)):next(([i,i+g]for i in range(m,n+1)if A(i)and i+g < n and A(i+g)),None)", "import math\ndef step(g, m, n):\n\n    def prime(n):\n        if n >= 2:\n            for i in range(2, int(math.sqrt(n)) + 1):\n                if not (n % i):\n                    return False\n        else:\n            return False\n        return True\n\n    for i in range(m,n-g):\n        if prime(i + g) and prime(i):\n            return [i, i + g]", "def step(g, m, n):\n    return next(([a, a+g] for a in range(m, n-g+1) if is_prime(a) and is_prime(a+g)), None)\n\n\ndef is_prime(n):\n    factors = 0\n    for k in (2, 3):\n        while n % k == 0 and factors < 2:\n            n //= k\n            factors += 1\n    k = 5\n    step = 2\n    while k * k <= n and factors < 2:\n        if n % k:\n            k += step\n            step = 6 - step\n        else:\n            n //= k\n            factors += 1\n    if n > 1:\n        factors += 1\n    return factors == 1\n", "def step(g, m, n):\n    def is_prime(n):\n        if n==2:\n            return True\n        elif n<2 or  n%2==0:\n            return False\n        else:\n            import math\n            root = math.floor(math.sqrt(n))\n            trial_factor = 3\n            while trial_factor<= root:\n                if n%trial_factor==0:\n                    return False\n                trial_factor+=2\n            return True\n    dic = {}\n    current_prime = None\n    for i in range(m, n+1):\n        if is_prime(i):\n            current_prime = i\n            if current_prime - g  in dic:\n                return [current_prime-g, current_prime]\n            else:\n                dic[current_prime] = True\n              \n                  \n    return None\n              \n                \n  \n    # your code\n", "def prime(n):\n    for i in range(2, 1000):\n        if i != n and n % i == 0:\n            return False\n    return  True\n                \ndef step(g, m, n):\n    for num in range(m, n+1):\n        if prime(num) and prime(num+g) and num+g<=n:\n            return [num, num + g]\n    return None\n", "import itertools\ncompress = itertools.compress \ndef sieve(n): \n    r = [False,True] * (n//2) +[True]\n    r[1],r[2] = False,True \n    for i in range(3,int(n**.5)+1): \n        if r[i]: \n            r[i*i::2*i] = [False] * ((n+2*i-1-i*i)//(2*i))\n    r = list(compress(range(len(r)),r))\n    if r[-1] % 2 == 0:\n        return r[:-1]\n    return r\nprimes = set(sieve(2*10**7))\nmaxi = max(primes) \ndef step(g, m, n):\n    for i in range(m,n+1): \n        if i > maxi or i+g > n:\n            break \n        if i in primes and i+g in primes:\n            return [i,i+g]\n    return None "]