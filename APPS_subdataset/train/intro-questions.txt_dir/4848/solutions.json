["from collections import Counter\n\ndef char_freq(message):\n    return Counter(message)", "from collections import Counter as char_freq", "def char_freq(message):\n    result = {}\n    for letter in message:\n        result[letter] = result.get(letter, 0) + 1\n    return result", "def char_freq(message):\n    return { ch : message.count(ch) for ch in message }", "def char_freq(message):\n    f = {}\n    for char in list(message):\n        if char in f:\n            f[char] += 1\n        else:\n            f[char] = 1\n    return f", "def char_freq(message):\n    return { char: message.count(char) for char in message }", "def char_freq(message):\n    chars = {}\n    for char in message:\n        chars[char] = chars.get(char, 0) + 1\n    return chars", "def char_freq(message):\n    return {ch: message.count(ch) for ch in set(message)}", "def char_freq(message):\n  chars, counts = list(), list()\n  for c in message:\n    if c not in chars:\n      chars.append(c)\n      counts.append(message.count(c))\n  return dict(zip(chars, counts))", "def char_freq(message):\n    frequencies = {} \n    for char in message: \n        if char in frequencies: \n            frequencies[char] += 1\n        else: \n            frequencies[char] = 1\n    return frequencies", "def char_freq(message):\n    return { e:message.count(e) for e in message }", "def char_freq(message):\n    dict = {}\n    for e in message:\n        keys = dict.keys()\n        if e in keys:\n            dict[e] += 1\n        else:\n            dict[e] = 1\n    return dict", "def char_freq(message):\n    pass\n    text = list(message)\n    dic = {}\n    for x in message:\n        dic[x] = text.count(x)\n    return dic", "from collections import defaultdict\n\ndef char_freq(message):\n    res = defaultdict(int)\n    for c in message:\n        res[c] += 1\n    return res", "import collections\nchar_freq = collections.Counter", "def char_freq(message):\n    return {x:message.count(x) for x in list(message)}", "def char_freq(message):\n    b={}\n    for a in message:\n        b.setdefault(a,0)\n        b[a]=b[a]+1\n    return b\n        \n", "def char_freq(m):\n    d = dict()\n    for i in m:\n        d[i] = m.count(i)\n    return d", "from collections import defaultdict\n\ndef char_freq(message):\n    frequency = defaultdict(lambda: 0)\n    for letter in list(message):\n        frequency[letter] += 1\n    return frequency\n", "def char_freq(message):\n    unique = set(message)\n    freq = dict(list(zip(unique, [0]*len(unique))))\n    for s in message:\n        freq[s] += 1\n    return freq\n", "from itertools import groupby\n\ndef char_freq(message):\n  return { x: len(list(gp)) for x, gp in groupby(sorted(message)) }", "def char_freq(message):\n    dic = {}\n    for each in message:\n        try:\n            if dic[each]:\n                dic[each] += 1\n        except KeyError:\n            dic[each] = 1\n    return(dic)", "def char_freq(message):\n    s = set(message)\n    n = [message.count(i) for i in s]\n    return dict(zip(s,n))", "from collections import Counter as c\ndef char_freq(m):\n    return dict(c(m))", "from collections import Counter\n\ndef char_freq(message):\n    return dict(Counter(list(message)))", "char_freq = lambda s: {e:s.count(e) for e in set(s)}", "def char_freq(message):\n    return dict(zip(list(message), [message.count(c) for c in message]))", "import collections\n\ndef char_freq(message):\n  return collections.Counter(message)\n  \n\n\nimport collections\ndef char_freq(message):\n  letters = collections.defaultdict(int)\n  for letter in message:\n    letters[letter] += 1\n  return letters\n", "from collections import defaultdict\n\ndef char_freq(message):\n    char_dict = defaultdict(int)\n    for c in message:\n        char_dict[c] += 1\n        \n    return char_dict", "from typing import Dict\n\ndef char_freq(message: str) -> Dict[int, str]:\n    \"\"\" Get the frequency of each and every character! \"\"\"\n    return dict([(_, message.count(_)) for _ in sorted(set(message))])", "def char_freq(message):\n    count = {}\n    for character in message:\n        count.setdefault(character, 0)\n        count[character] += 1\n    return count", "char_freq = lambda m, counter = __import__('collections').Counter: counter(m)", "def char_freq(message):\n    return {\n        m: message.count(m) for m in message\n    }", "char_freq=lambda m:{i:list(m).count(i) for i in set(m)}", "char_freq = lambda m: {c:m.count(c) for c in m}", "char_freq = lambda message:{x:message.count(x) for x in message}", "def char_freq(m):\n    s = list(m)\n    k = set(s)\n    v = list(map(lambda x: s.count(x), k))\n    return dict(zip(k, v))", "lets = \"().!?,-' 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPRQSTUVWXYZ\"\ndef char_freq(message):\n    retDict={}\n    for l in lets:\n        if message.count(l)>0:\n            retDict[l]= message.count(l)\n    return retDict", "def char_freq(message):\n    ABC = \"abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    count = []    \n    letters = []\n    for l in message:\n        c = message.count(l)\n        if c>0:\n            count.append(c)\n            letters.append(l)\n    return dict(zip(letters,count))\n    pass", "def char_freq(m):\n    o={}\n    for i in range(0,len(m)):\n       if not o.get(m[i]): o[m[i]]=1 \n       else: o[m[i]]=o[m[i]]+1\n    return o", "char_freq = __import__(\"collections\").Counter", "def char_freq(string):\n    my_dict = {}\n    for s in string:\n        n = string.count(s)\n        my_dict[s] = n\n    \n    return my_dict\n\n", "def char_freq(message):\n    char = {}\n    for i in message:\n        if i in char: \n            char[i] += 1\n        else: \n            char[i] = 1\n        \n    return char", "def char_freq(message):\n    characters = {}\n    \n    for char in message:\n        characters[char] = characters.get(char,0)+ 1\n    \n    return(characters)\n", "def char_freq(message):    \n    frequency_table = {}\n    \n    for char in message:\n        frequency_table[char] = frequency_table.get(char, 0)+ 1\n\n    return(frequency_table)\n", "def char_freq(message):\n    str_ = {}\n    \n    for i in message:\n        if i in str_:\n            str_[i] += 1\n        else:\n            str_[i] = 1\n            \n    return str_\n\n        \n", "def char_freq(message):\n    chars = list(message)\n    counts = [message.count(char) for char in chars]\n    return {chars[i]:counts[i] for i in range(len(chars))}", "def char_freq(message):\n    dct = {}\n    for key in message:\n        dct[key] = message.count(key)\n    return dct", "def char_freq(message):\n    dict = {}\n    characters = []\n    for letter in message:\n        if letter not in characters:\n            characters.append(letter)\n            dict[letter] = message.count(letter)\n            \n    return dict", "def char_freq(message):\n    arr = []\n    dict = {}\n    for i in message:\n        arr.append(i)\n    for i in arr:    \n        arr.count(i)\n        dict[i] = arr.count(i)\n    return dict", "def char_freq(message):\n    freqs = {}\n    \n    index = 0\n    while index < len(message):\n        if message[index] not in list(freqs.keys()):\n            freqs[message[index]] = 1\n        else:\n            freqs[message[index]] += 1\n        index += 1\n\n    return freqs", "def char_freq(message):\n    my_dict = {}\n    for i in message:\n        my_dict[i] = my_dict.get(i, 0) + 1\n    return my_dict", "def char_freq(message):\n    dict = {}\n    chars = set(message)\n    for char in chars:\n        dict[char] = message.count(char)\n    return dict", "def char_freq(message):\n    char_list = [str(a) for a in message]\n    return {x: char_list.count(x) for x in (char_list)}", "def char_freq(message):\n    \n    dict = {} \n    \n    for char in message: \n        dict[char] = 0\n        \n    for char in message:\n        dict[char] = dict[char] + 1\n    \n    \n    return dict", "def char_freq(message):\n    l = {}\n    for n in message:\n        l[n] = message.count(n)\n        n.replace(n, '')\n    return l", "def char_freq(message):\n    message = sorted(list(message))\n    d = {message[i]: message.count(message[i]) for i in range(len(message))}\n    return d", "def char_freq(message):\n    dict={}\n    for i in message:\n        if i in dict:\n            dict[i] = dict[i]  + 1\n        else:\n            dict[i] = 1\n      \n    return dict\n  \n\n", "def char_freq(message):\n    char_list = list(message)\n    keys = set(char_list)\n    map = {}\n    for key in keys:\n        map[key] = char_list.count(key)\n    \n    return map", "def char_freq(message):\n    \n    dictCh = {}\n    \n    for ch in message:\n        if ch not in dictCh.keys():\n            dictCh[ch] = 1\n        else:\n            dictCh[ch] += 1\n            \n    return dictCh", "def char_freq(message):\n    arr = [*message]\n    _dict={}\n    \n    for i in arr:\n        _dict[i] = _dict.get(i, 0) + 1\n        \n    return _dict", "def char_freq(message):\n    char = {}\n    for c in message :\n        if c in char :\n            char[c] += 1\n        else : char[c] = 1\n    return char", "from collections import defaultdict, Counter\ndef char_freq(message):\n    my_dict = {}\n    for letter in message:\n        my_dict[letter] = my_dict.get(letter, 0) + 1\n    return my_dict", "def char_freq(message):\n    a = {}\n    for i in message:\n        if i not in a:\n            a.setdefault(i,1)\n        else:\n            a[i]+=1\n    return a", "def char_freq(message):\n    r = {}\n    for m in message: r[m] = r.get(m, 0)+1\n    return r", "def char_freq(message):\n    d=dict.fromkeys(message, 0)\n    for string in message:\n        d[string]+=1\n    return d", "def char_freq(message):\n    char_dict = {}\n    \n    for letter in message:\n        if letter not in char_dict:\n            char_dict[letter] = 1\n        else:\n            char_dict[letter] = char_dict[letter] + 1\n                \n    return char_dict          ", "def char_freq(msg):\n    res = {}\n    for c in msg:\n        try:\n            res[c] += 1\n        except KeyError:\n            res[c] = 1\n    return res", "def char_freq(message):\n  liste=[]\n  dict={}\n  liste_count=[message.count(letter) for letter in message]  \n  for letter in message:\n     liste.append(letter)\n\n  i=0\n  for i in range(0,len(liste)):\n    dict[liste[i]]=liste_count[i]\n    i+=1\n    \n  return dict  ", "def char_freq(message):\n    return dict(map(lambda letter: (letter, message.count(letter)), message))", "def char_freq(message):\n    \n    return {chr: message.count(chr) for chr in message}", "def char_freq(message):\n    \n    chars = {}\n    for char in message:\n        try:\n            chars[char] = 1 + chars[char]\n        except:\n            chars[char] = 1\n        \n    return chars", "def char_freq(message):\n    dict = {};\n    for x in message:\n        if not(x in dict):\n            dict[x] = 1 \n        else:\n            dict[x] += 1\n    return dict\n\n", "def char_freq(message):\n    \n    print(message)\n\n    d = dict()\n    for c in message:\n        d[c] = d.get(c,0) + 1\n    \n    sorted_dict = dict(sorted(d.items(), key=lambda item: item[0]))\n    \n    return sorted_dict", "def char_freq(message):\n    a = {}\n    for i in message:\n        if i not in a:\n            a[i] = 0\n        a[i] += 1\n    return a", "def char_freq(message):\n    r = {}\n    for x in message:\n        r[x] = r.get(x, 0) + 1\n    return r", "def char_freq(message):\n    result = {}\n    for character in message:\n        if character in result:\n            result[character] += 1\n        else:\n            result[character] = 1\n    return result", "def char_freq(message):\n    x = {}\n    \n    for i in range(len(message)):\n         x[message[i]] = message.count(message[i])\n    return x", "def char_freq(message):\n    diccionario = {}\n    for x in message: \n        if x in diccionario: \n            diccionario[x] += 1\n        else: \n            diccionario[x] = 1    \n    return diccionario", "def char_freq(message):\n    msgL = list(message)\n    msgD = dict.fromkeys(msgL)\n    for i in msgL:\n        if msgD[i] is None:\n            msgD[i] = 0\n        msgD[i] +=1\n    return msgD", "def char_freq(message):\n    d = dict()\n    chars = list(message)\n    for char in chars:\n        d[char] = d.get(char,0) + 1\n    return d\n    \n", "def char_freq(message):\n    set(message)\n    character_counts = {}\n    for i in set(message):\n        count = message.count(i)\n        character_counts[i] = count\n    return character_counts\n    pass", "def char_freq(message):\n    d = {}.fromkeys(set(list(message)), 0)\n    for i in message:\n        d[i] += 1\n    return d\n", "def char_freq(message):\n    solution = {}\n    for c in message:\n        if c in solution:\n            solution[c] += 1\n            continue\n        solution[c] = 1\n    return solution", "def char_freq(message):\n    freq = {}\n    for c in message:\n        if not c in freq:\n            freq[c] = 0\n        freq[c] += 1\n    return freq", "def char_freq(message):\n    out = {}\n    for el in message:\n        if el not in out.keys():\n            out[el] = 1\n        else:\n            out[el] += 1\n    return out", "def char_freq(n):\n    d = {}\n    for i in n:\n        d[i] = n.count(i)\n    return d\n", "def char_freq(message):\n    count = {}\n    for n in message:\n        if (count.get(n)) != None:\n            count[n] = count[n] + 1\n        else:\n            count[n] = 1    \n    return count", "from collections import Counter\n\ndef char_freq(message: str) -> dict:\n    return dict(Counter(c for c in message))", "import collections\ndef char_freq(message):\n    hashing = collections.defaultdict(int)\n    for i in message:\n        hashing[i]+=1\n    return hashing\n    \n", "def char_freq(message):\n    a = {}\n    for i in message:\n        if i not in a:\n            a[i] = 1\n        else:\n            a[i] +=1\n    return a", "def char_freq(message):\n    a = list(dict.fromkeys(message))\n    dicts ={}\n    for x in a:\n        dicts[x] = message.count(x)\n    return dicts", "def char_freq(message):\n    dict = {}\n    for x in message:\n        if x not in list(dict.keys()):\n            dict[x] = 1\n        else:\n            dict[x] += 1\n    return(dict)\n", "def char_freq(message):\n    arr=list(message)  \n    arr=list(dict.fromkeys(arr))\n    res={}\n    for i in arr:\n        res[i]=message.count(i) \n    return res", "def char_freq(message):\n    res = {}\n    for v in message:\n        if v not in res:\n            res[v] = message.count(v)   \n    return res", "def char_freq(message):\n    d = {}\n    for s in message:\n      if s not in d:\n        d[s] = 1\n      else:\n        d[s] = d[s] + 1\n    return d", "def char_freq(message):\n    print(message)\n    chars = {}\n    for char in range(len(message)) :\n        if message[char] not in chars :\n            chars[message[char]] = 1\n        else :\n            chars[message[char]] = chars[message[char]] + 1\n    return chars", "def char_freq(message):\n    cnt = dict()\n    for ch in list(message):\n        print('ch : ', ch)\n        if ch in cnt:\n            cnt[ch] += 1\n        else:\n            cnt[ch] = 1\n    return cnt", "def char_freq(message):\n    words = dict()\n    for i in message:\n        words[i] = words.get(i,0)+1\n    return words\n    pass", "def char_freq(message):\n    dct = {}\n    for char in message:\n        dct[char] = dct.get(char,0) + 1\n    return dct"]