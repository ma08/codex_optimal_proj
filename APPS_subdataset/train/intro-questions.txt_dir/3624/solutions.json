["def distribution_of_candy(candies):\n    steps = 0\n    while len(set(candies)) > 1:\n        candies = [(a + 1) // 2 + (b + 1) // 2\n                   for a, b in zip(candies, candies[-1:] + candies)]\n        steps += 1\n    return [steps, candies.pop()]", "def distribution_of_candy(candies):\n    n = 0\n    while any(c != candies[0] for c in candies):\n        n += 1\n        half = [(c+1)//2 for c in candies]\n        candies = [a+b for a, b in zip(half, half[-1:] + half[:-1])]\n    return [n, candies[0]]", "def distribution_of_candy(candies):\n    turn = 0\n    while len(set(candies)) > 1:\n        candies = [(m + m%2) // 2 + (n + n%2) // 2 for m, n in zip(candies, candies[-1:] + candies[:-1])]\n        turn += 1\n    return [turn, candies[0]]", "def distribution_of_candy(candies):\n    r = 0\n    while len(set(candies)) > 1:\n        r += 1\n        candies = [(c+1)//2 + (candies[i-1]+1)//2 for i,c in enumerate(candies)]\n\n    return [r, candies[0]]", "def distribution_of_candy(candies):\n    if len(candies) == 1: return [0, candies[0]]\n    c, lst = 0, candies\n    while True:\n        lst = [i//2 if i%2==0 else (i+1)//2 for i in lst]\n        lst2 = lst[-1:] + lst[:-1]\n        lst = [i+j for i, j in zip(lst, lst2)]\n        c += 1\n        if len(set(lst)) == 1:\n            return [c, lst[0]] \n", "from itertools import count\n\ndef distribution_of_candy(a):\n    for i in count():\n        if all(x == a[0] for x in a):\n            return [i, a[0]]\n        a = [x + x % 2 for x in a]\n        a = [(x + y) // 2 for x, y in zip(a, a[1:] + [a[0]])]", "def distribution_of_candy(c):\n    i=0\n    while min(c)!=max(c):\n        i+=1\n        a=[(v+v%2)//2 for v in c]\n        c=[x+y for x,y in zip(a,a[-1:]+a)]\n    return [i, c[0]]", "def distribution_of_candy(candies):\n    candies_upd = candies\n    cnt = 0\n    if len(candies) == 1:\n        return [0, candies[0]]\n    while candies.count(candies[0]) < len(candies) or candies_upd.count(candies_upd[0]) < len(candies_upd):\n        if cnt > 0:\n            candies = candies_upd\n        candies_upd = []\n        for i in range(len(candies)):           \n            new = candies[i]\n            if candies[i]%2 != 0:\n                new +=1\n            new-=(new/2)\n            if i == 0:\n                new+=(round(candies[-1]/2 +0.1))\n            else:\n                new +=(round(candies[i-1]/2 +0.1))\n            candies_upd.append(new)\n        \n        cnt +=1\n        \n    return [cnt-1, candies[0]]\n", "def distribution_of_candy(arr):\n    c = 0 \n    while len(set(arr)) != 1:\n        x = [(i+1 if i%2 else i)//2 for i in arr[-1:]+arr[:-1]]\n        arr = [((i+1 if i%2 else i)-(i+1 if i%2 else i)//2) for i in arr]\n        arr = [(i+j) for i,j in zip(arr,x)]\n        c += 1\n    return [c,arr.pop()] "]