["def avg_diags(m):\n  a1,a2,l,l1,l2=0,0,len(m),0,0\n  for i in range (0,l):\n    if i&1: \n       if m[i][i]>=0: a1+=m[i][i]; l1+=1\n    else:\n       if m[l-i-1][i]<0: a2+=m[len(m)-i-1][i]; l2+=1\n  return [round(a1/l1) if l1>0 else -1,round(abs(a2)/l2) if l2>0 else -1]", "def avg_diags(m):\n    n, avg = len(m), [[0,0], [0,0]]\n    for i in range(n):\n        if i%2 and m[i][i] >= 0:\n            avg[0][0] += m[i][i]\n            avg[0][1] += 1\n        elif not i%2 and m[n-i-1][i] < 0:\n            avg[1][0] -= m[n-i-1][i]\n            avg[1][1] += 1\n            \n    return [ round(lst[0]/lst[1]) if lst[1] != 0 else -1 for lst in avg ]", "def avg_diags(m):\n    \n    avg1 = []\n    avg2 = []\n    \n    for i in range(len(m)):\n        if i % 2 == 1 and m[i][i] >= 0:\n            avg1.append(m[i][i])\n        \n        if i % 2 == 0 and m[-i-1][i] < 0:\n            avg2.append(m[-i-1][i])\n                        \n    avg1 = round(sum(avg1) / len(avg1)) if len(avg1) else -1\n    avg2 = round(abs(sum(avg2) / len(avg2))) if len(avg2) else -1\n    \n    return [avg1, avg2]", "import numpy as np\ndef avg_diags(m):\n    m = np.array(m)\n    md = m.diagonal() \n    sd = np.flipud(m).diagonal() \n    md = [md[i] for i in range(1,len(md),2) if md[i]>=0]\n    sd = [sd[i] for i in range(0,len(sd),2) if sd[i]<0]\n    avs = -1\n    if sd:\n        avs = round(abs(sum(sd))/len(sd))\n    return [round(sum(md)/len(md)),avs ] ", "import numpy as np\n\ndef avg_diags(arr):\n    arr = np.array(arr)\n    d1 = np.diag(arr)\n    d2 = np.diag(np.flipud(arr))\n\n    d1 = d1[1::2]\n    d1 = d1[d1>=0].mean().round()\n\n    d2 = d2[::2]\n    d2 = abs(d2[d2 < 0].mean().round())\n    \n    d1 = -1 if np.isnan(d1) else d1\n    d2 = -1 if np.isnan(d2) else d2\n    return [d1,d2]", "def avg_diags(m):\n  a, ac, b, bc, n = 0, 0, 0, 0, len(m)\n  for i in range(n):\n    if ((i & 1) == 1) and m[i][i] >= 0:\n      a += m[i][i]\n      ac += 1\n    if ((n-i-1) & 1) == 0 and m[i][n-i-1] < 0:\n      b += m[i][n-i-1]\n      bc += 1\n  return [-1 if ac == 0 else round(a/ac), -1 if bc == 0 else round(abs(b/bc))]", "def avg_diags(m):\n    l = len(m)\n    a = [m[i][i] for i in range(1, l, 2) if m[i][i] >= 0]\n    b = [m[i][l-i-1] for i in range(l) if m[i][l-i-1] < 0 and (l - i-1) % 2 == 0]\n    return [int(round(sum(a) / len(a))) if a else -1, int(round(abs(sum(b)) / len(b))) if b else -1]", "def avg_diags(m):\n    r1 = [m [i][i] for i in range(1, len(m), 2) if m[i][i] >= 0]\n    r2 = [m [-i-1][i] for i in range(0, len(m), 2) if m[-i-1][i] <= 0]\n    return [round(sum(r1) / len(r1)) if r1 else -1, abs(round(sum(r2) / len(r2))) if r2 else -1]", "def avg_diags(m):\n    prim = []\n    sec = []\n    for i in range(len(m)):\n        prim.append(m[i][i])\n        sec.append(m[i][-i - 1])\n    sec.reverse()\n\n    prim = [prim[i] for i in range(len(prim)) if i % 2 != 0 and prim[i] >= 0]\n    sec = [sec[i] for i in range(len(sec)) if i % 2 == 0 and sec[i] <= 0]\n\n    prim=round(sum(prim)/len(prim))\n    if len(sec)==0:\n        sec=-1 \n        return[prim,sec]\n    else:\n        sec=round(sum(sec)/len(sec))\n    if sec<0:sec=-sec\n    return [prim, sec]", "import math\ndef avg_diags(m):\n    diagonal_1 = []\n    diagonal_2 = []\n    ans1 = 0\n    ans2 = 0\n    for i in range(len(m)):\n        if i %2 != 0 and m[i][i] >=0:\n            diagonal_1.append(m[i][i])\n        if i %2 == 0 and m[len(m)-1 -i][i] <0:\n            diagonal_2.append(m[len(m)-1 -i][i])\n    if diagonal_1 == []:\n        ans1 = -1\n    else:\n        ans1 =round(sum(diagonal_1)/len(diagonal_1),0)\n    if diagonal_2 == []:\n        ans2 = -1\n    else:\n        ans2 = round(sum(diagonal_2)*(-1)/len(diagonal_2),0)\n    return [ans1, ans2]"]