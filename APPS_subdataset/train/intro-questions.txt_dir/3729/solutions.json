["def count_zeros_n_double_fact(n): \n    if n % 2 != 0:\n        return 0\n    k = 0\n    while n >= 10:\n        k += n // 10\n        n //= 5\n    return k", "def count_zeros_n_double_fact(n):\n    return 0 if n%2 == 1 else (n // 6250) + (n // 1250) + (n // 250) + ( n // 50 ) + ( n // 10 ) ", "from functools import reduce\n\n\ndef count_zeros_n_double_fact(n): \n    df = n % 2 or reduce(int.__mul__, range(2, n+1, 2), 1)\n    return next(i for i, d in enumerate(f\"{df}\"[::-1]) if d != \"0\")", "from math import log\n\n# n//10 + n//50 + n//250 + n//1250 + ...\ndef count_zeros_n_double_fact(n):\n    return 0 if n&1 else sum(n//2//5**x for x in range(1, int((log(n)-log(2))/log(5))+1))", "def count_zeros_n_double_fact(n): \n    return 0 if n % 2 else sum(n // (10 * 5 ** x) for x in range(len(str(n)) + 1))", "def count_zeros_n_double_fact(n):\n    if n % 2: return 0\n    s, n = 0, n // 2\n    while n >= 5:\n        n //= 5\n        s += n\n    return s", "def count_zeros_n_double_fact(n): \n    if (n % 2 == 1): \n        return 0\n    res = 0\n    working = n // 2\n    while (working > 0): \n        res += working // 5\n        working //= 5\n    return res", "def count_zeros_n_double_fact(n): \n    if n % 2 == 1:\n        return 0\n    return n // 10 + n // 50 + n // 250", "def count_zeros_n_double_fact(n): \n    fact = 1\n    while n > 2:\n        fact *= n\n        n -= 2\n    return len(str(fact)) - len(str(fact).rstrip('0'))"]