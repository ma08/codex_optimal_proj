["from itertools import cycle\n\ndef sumDig_nthTerm(initVal, patternL, nthTerm):\n    \n    for c, i in enumerate(cycle(patternL), 2):\n        initVal += i\n        \n        if c == nthTerm:\n            return sum(int(v) for v in str(initVal))", "def sumDig_nthTerm(base, cycle, k):\n    loop, remaining = divmod(k - 1, len(cycle))\n    term = base + loop * sum(cycle) + sum(cycle[:remaining])\n    return sum(int(d) for d in str(term))", "def sumDig_nthTerm(initVal, patternL, nthTerm):\n    q, r = divmod(nthTerm-1, len(patternL))\n    x = initVal + q*sum(patternL) + sum(patternL[:r])\n    return sum(map(int, str(x)))", "from itertools import cycle as c,islice as isl\nsumDig_nthTerm=lambda ini,p,n:sum(map(int,str(ini+sum(list(isl(c(p),n-1))))))", "sumDig_nthTerm = lambda st, p, n:sum(map(int,str(st+sum(p)*((n-1)//len(p))+sum(p[:(n-1)%len(p)]))))", "def sumDig_nthTerm(initVal, patternL, nthTerm):\n    n=initVal\n    for i in range(nthTerm-1):\n        n+=patternL[i%len(patternL)]\n    return sum(int(d) for d in str(n))"]