["def wanted_words(vowels, consonants, forbidden):\n    return [w for w in WORD_LIST\n            if len(w) == vowels + consonants\n                and sum(map(w.count, 'aeiou')) == vowels\n                    and not any(c in w for c in forbidden)]", "from collections import defaultdict\nWORD_INDEX = defaultdict(list)\nfor w in WORD_LIST:\n    WORD_INDEX[len(w), sum(map(w.count, 'aeiou'))].append(w)\n\ndef wanted_words(vowels, consonants, forbidden):\n  return [w for w in WORD_INDEX[vowels + consonants, vowels] if not any(c in w for c in forbidden)]\n", "def wanted_words(n, m, forbid_let):\n    result = []\n    for word in WORD_LIST:\n        if set(forbid_let) & set(word):\n            continue\n        vowels = sum(1 for c in word if c in \"aeiou\")\n        if vowels == n and len(word) == m + n:\n            result.append(word)\n    return result\n", "from itertools import groupby\n\ndef _breakdown(word):\n    v = sum(c in 'aeiou' for c in word)\n    return v, len(word) - v\n    \n_WORDS = {k: list(group) for k, group in groupby(sorted(WORD_LIST, key=_breakdown), key=_breakdown)}\n\ndef wanted_words(v, c, forbidden):\n    permitted = lambda word: not any(letter in word for letter in forbidden)\n    return filter(permitted, _WORDS.get((v,c), []))", "def wanted_words(n, m, forbid_let):\n    f = set(forbid_let)\n    return [word for word in WORD_LIST if len(word) == n + m and sum(c in 'aeiou' for c in word) == n and f.isdisjoint(word)]", "from collections import Counter \n\ndef wanted_words(n, m, forbid_let):\n    result = []\n    \n    for word in WORD_LIST:                                        # for each word in word list\n        if len(word) == n + m:                                    # if word length is correct\n            letters = Counter(word)                               # create a count of letters\n            \n            if ( sum(letters[c] for c in \"aeiou\") == n            # if vowel count is correct\n                and all(c not in word for c in forbid_let) ):     # and has no forbidden letters\n                result.append(word)                               # add to the results\n    \n    return result", "from collections import defaultdict\nfrom itertools import filterfalse\n\nis_vowel = set(\"aeiou\").__contains__\nresult = defaultdict(lambda:defaultdict(list))\nfor w in WORD_LIST:\n    nb_v = sum(map(is_vowel, w))\n    nb_c = len(w) - nb_v\n    result[nb_v][nb_c].append(w)\n\ndef wanted_words(n, m, forbid_let):\n    return list(filterfalse(set(forbid_let).intersection, result.get(n, {}).get(m, [])))", "def wanted_words(n, m, forbid_let):\n    import re\n    vov = \"[aeiou]\"\n    cons= \"[qwrtpysdfghjklzxcvbnm]\"\n    fb = \"[\" + ''.join(forbid_let) + \"]\"\n    return [word for word in WORD_LIST if len(re.findall(vov, word))==n and len(re.findall(cons, word))==m and len(re.findall(fb, word))==0]", "wanted_words = lambda n, m, f: [i for i in WORD_LIST if len([j for j in i if j in 'aeiou'])==n and len([j for j in i if not j in 'aeiou'])==m\n    and not any(k in i for k in f)]", "D = {w:(len([c for c in w if c in 'aeiou']), len([c for c in w if c not in 'aeiou'])) for w in WORD_LIST}\n\ndef wanted_words(n, m, forbid_let):\n    return [w for w in WORD_LIST if D[w] == (n, m) and not [c for c in forbid_let if c in w]]", "import re\n\ndef wanted_words(n, m, forbid_let):\n    return [word for word in WORD_LIST if len(word) == n + m and len(re.findall(\"[aeiou]\", word)) == n and not re.findall(\"[\" + \"\".join(forbid_let) + \"]\", word)]"]