["def next_version(version):\n    ns = version.split('.')\n    i = len(ns) - 1\n    while i > 0 and ns[i] == '9':\n        ns[i] = '0'\n        i -= 1\n    ns[i] = str(int(ns[i]) + 1)\n    return '.'.join(ns)", "def next_version(version):\n    tab = list(map(int, version.split('.')))\n    for x in range(1, len(tab)+1):\n        if tab[-x] is 9 and x != len(tab):\n            tab[-x] = 0\n        else:\n            tab[-x] += 1\n            break\n    return '.'.join((list(map(str, tab))))\n\n", "def next_version(version):\n    if version.count('.')==0: return str(int(version)+1)\n    elif int(version[-1])<9: return version[0:-1] + str(int(version[-1])+1)\n    else: return next_version(version[0:-2]) + '.0'", "def next_version(version):\n    vs = list(map(int, version.split('.')))\n    for i in range(len(vs)-1, -1, -1):\n        vs[i] += 1\n        if vs[i] < 10:\n            break\n        if i:\n            vs[i] %= 10\n    return '.'.join(map(str, vs))", "def next_version(version):\n    lst = list(map(int, version.split('.')))\n    for i in reversed(range(len(lst))):\n        lst[i] += 1\n        if i:      lst[i] %= 10\n        if lst[i]: break\n    return '.'.join(map(str, lst))", "import re\nfrom itertools import zip_longest\ndef next_version(version):\n    s, n = re.subn(r'\\.', '', version)\n    return ''.join([b + a for  a, b in zip_longest('{:0{}}'.format(int(s) + 1, len(s))[::-1], '.' * n, fillvalue = '')][::-1])", "def next_version(version):\n    if \".\" not in version: return str(int(version) + 1)\n    v = [i for i in version.split(\".\")]\n    minor_version = False\n    \n    for index in reversed(list(range(len(v)))):\n        if index == len(v)-1 :\n            if int(v[index]) < 9 :\n                v[index] = str(int(v[index]) + 1)\n                return \".\".join(v)\n            else:\n                minor_version = True\n                v[index] = \"0\"\n                continue                \n            \n        if minor_version:\n            v[index] = str(int(v[index]) + 1)\n                        \n            if int(v[index]) != 10 or index == 0 :\n                return \".\".join(v)\n            else:    \n                minor_version = True\n                v[index] = \"0\"\n                continue\n", "def next_version(version):\n    carry, minors = 1, []\n    for i, n in list(enumerate(version.split('.')))[::-1]:\n        carry, n = divmod(int(n) + carry, 10 if i else int(n) + 2)\n        minors.append(str(n))\n    return '.'.join(minors[::-1])\n", "def next_version(version):\n    print(version)\n    array_version = version.split('.')\n    last_index = len(array_version)-1\n    start = 0\n    add_value = 1\n    while last_index>=0:\n        value_last_part_version = int(array_version[last_index])+add_value\n        if \"0\" in str(value_last_part_version):\n            if last_index!=0:\n                array_version[last_index] = str(0)\n            else:\n                array_version[last_index]=str(value_last_part_version)\n            if len(str(value_last_part_version))!=1:\n                add_value=1\n            else:\n                add_value=0\n        else:\n            add_value=0\n            array_version[last_index] = str(value_last_part_version)\n        last_index-=1\n    return \".\".join(array_version)", "def next_version(version):\n    c, s = version.count(\".\") + 1, version.replace(\".\", \"\")\n    n = f\"{int(s)+1:0{len(s)}d}\"[::-1]\n    return (\".\".join(n[i] for i in range(c)) + n[c:])[::-1]\n"]