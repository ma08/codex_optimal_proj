["from operator import mul\nfrom functools import reduce\n\ndef product_array(numbers):\n    tot = reduce(mul,numbers)\n    return [tot//n for n in numbers]", "from numpy import prod\n\ndef product_array(numbers):\n    p = prod(numbers)\n    return [p // i for i in numbers]", "def product_array(numbers):\n    prod = eval(\"*\".join(map(str, numbers)))\n    return [ prod / x for x in numbers ]", "from functools import reduce\ndef product_array(l):\n    return [reduce(lambda p, n: p * n, l, 1) / n for n in l]", "def product_array(n):\n    prod = eval(\"*\".join(map(str,n)))\n    return [prod//i for i in n]", "import numpy\n\ndef product_array(numbers):\n    p = numpy.prod(numbers)\n    return [p / i for i in numbers]", "from functools import reduce\n\ndef product_array(num):\n    s = reduce(int.__mul__, num)\n    return [s/i for i in num]", "from numpy import prod\ndef product_array(numbers):\n    return [prod(numbers)/i for i in numbers]", "from functools import reduce\ndef product_array(numbers):\n    r = lambda x, y: x * y\n    return [reduce(r, (x for i, x in enumerate(numbers) if i != index)) for index in range(len(numbers))]", "import functools\n\ndef product_array(n):\n    return [functools.reduce(lambda a,b: a*b, n)//x for x in n]"]