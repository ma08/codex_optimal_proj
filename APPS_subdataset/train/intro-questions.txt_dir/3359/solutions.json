["def title_to_number(title):\n    ret = 0\n    for i in title:\n        ret = ret*26 + ord(i) - 64\n    return ret", "def title_to_number(title):\n    return sum((ord(c) - 64) * 26**i for i, c in enumerate(title[::-1]))", "def title_to_number(title):\n    return sum((ord(char) - 64) * 26 ** i for i, char in enumerate(title[::-1]))", "def title_to_number(title):\n    #your code here\n    offset = ord('A') - 1\n    radix = 26\n    \n    val = 0\n    for i in title:\n        val = radix * val + (ord(i) - offset)\n        \n    return val", "from string import ascii_uppercase\ndef title_to_number(t):\n  return 0 if len(t) == 0 else (ascii_uppercase.index(t[0]) + 1) * 26 ** (len(t) - 1) + title_to_number(t[1:])", "from string import ascii_uppercase\nfrom functools import reduce\n\nval = {c:i+1 for i,c in enumerate(ascii_uppercase)}\nadd = lambda x,y: 26*x + y\n\ndef title_to_number(title):\n    return reduce(add, map(val.get, title))", "from string import ascii_uppercase as letters\n\n\ndef title_to_number(title):\n    transfer = list(title)[::-1]\n    result = 0\n    for i, char in enumerate(transfer):\n        result += (letters.find(char)+1) * 26**i\n    return result", "title_to_number = lambda a: 0 if a == '' else 1 + ord(a[-1]) - ord('A') + 26 * title_to_number(a[:-1])", "from string import ascii_uppercase as a\n\ndef title_to_number(title):\n    return sum(\n        (a.index(x) + 1) * 26 ** i\n        for i, x in enumerate(title[::-1])\n    )"]