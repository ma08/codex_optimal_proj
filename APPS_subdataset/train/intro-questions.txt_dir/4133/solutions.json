["def shortest_time(n, m, speeds):\n    lift, open, close, walk = speeds\n    return min(\n            # taking the elevator\n            abs(m - n) * lift + open + close + (n - 1) * lift + open,\n            # walking\n            (n - 1) * walk\n            )", "def shortest_time(n, m, speeds):\n    a, b, c, d = speeds\n    elevator = (abs(m - n) + n - 1) * a + b * 2 + c\n    walk = (n - 1) * d\n    return min(elevator, walk)", "def shortest_time(n, m, speeds):\n    elevator_speed, open_door, close_door, walk_speed = speeds\n    elevator_time = (abs(m - n) + n - 1) * elevator_speed + open_door * 2 + close_door\n    walk_time = (n - 1) * walk_speed\n    return min(elevator_time, walk_time)", "def shortest_time(n,m,speeds):\n    a,b,c,d = speeds\n    return min((n-1)*d, a*(abs(m-n) + n-1) + 2*b + c)", "def shortest_time(n, m, speeds):\n    move_lift, open_door, close_door, move_feet = speeds\n    healthy = (n - 1) * move_feet\n    lazy = abs(n - m) * move_lift + open_door + close_door + (n - 1) * move_lift + open_door\n    return min(healthy, lazy)", "def shortest_time(n,m,speeds):\n    return min([speeds[3]*(n-1),(abs(m-n)+n-1)*speeds[0]+2*speeds[1]+speeds[2]])", "def shortest_time(n,m,speeds):\n    b = (n - 1 + max(m, n) - min(m, n)) * speeds[0] + speeds[2] + speeds[1]*2\n    a = speeds[-1] * (n-1)\n    return b if a > b else a", "def shortest_time(n, m, speeds):\n    a, b, c, d = speeds\n    return min(d * (n - 1), (abs(m - n) + n - 1) * a + 2 * b + c)", "def shortest_time(n, m, speeds):\n    if n == 1:\n        return 0\n    else:\n        move,open,close,walk=speeds\n        elevator = abs(n-m)*move+open+close+move*(n-1)+open\n        walking = walk*(n-1)\n    return min(elevator, walking)"]