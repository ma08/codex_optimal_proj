["def angle(n):\n    return 180 * (n - 2)", "def angle(n):\n  return (n-2)*180", "angle=lambda n:(n-2)*180", "def angle(n):\n    \"Sum angles in N-sided shape\"\n    return (n - 2) * 180", "def angle(n):\n    var = n-2\n    return 180*(var)", "def angle(n):\n    if n>2:\n        return 180*(n-2)\nprint (angle(5))", "angle=lambda n:180*(n-2)", "def angle(n):\n    return (n+~1)*180", "def angle(n):\n    #your code here\n    return (n*(n-2)*180)//n", "def angle(n):\n    if n>2 :\n        return (n - 2) * 180\n    else: \n        return 'Error'", "def angle(n):\n    if n == 3:\n        return 180\n    elif n == 4:\n        return 360\n    else:\n        x = 180*(n-2)\n        return x\n", "def angle(n):\n    return (n - 2) * 180\n    # I googled \"formula for angles in a polygon\"\n", "def angle(n: int) -> int:\n    \"\"\"This function finds the total sum of internal angles (in degrees) in an n-sided simple polygon.\"\"\"\n    return 180 * (n-2)", "def angle(n):\n    counter = 3\n    if n == 3:\n        angle = n * 60\n    else:\n        n > 3\n        angle = (n - 2) * 180\n    counter += 1\n    return angle\n", "def angle(n):\n    ang =  n * 2 \n    angg = ang - 4\n    sumang = angg * 90\n    return sumang\n", "def angle(n):\n    if n > 2:\n        return abs(n - 2) * 180", "def angle(n):\n    while n > 2:\n        degrees = (n * 180) - 360\n        return degrees\n", "def angle(n):\n    print(n)\n    return 180 * (n - 2)\n    #your code here\n", "def angle(n):\n    return 180 * (n-2) if n > 2 else None", "def angle(n):\n    intang = 180*(n-2)\n    return intang", "import math\n\ndef angle(n):\n    return 180*n-360", "def angle(n):\n    \n    p = (n-2)*180\n    \n    return p\n", "def angle(n):\n    if n>=2:\n        return 180*(n-2) #\u0442\u0435\u043e\u0440\u0435\u043c\u0430 \u043e \u0441\u0443\u043c\u043c\u0435 \u0443\u0433\u043b\u043e\u0432 \u043c\u043d\u043e\u0433\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430", "def angle(n):\n    theta = (n-2) * (180)\n    return theta", "def angle(ip):\n    return((ip-2)*180)", "def angle(n):\n    #your code here (n-2) x 180\u00b0\n    size = (n-2) * 180\n    return size ", "def angle(n):\n    sum=((2*n)-4)*90\n    return sum", "def angle(n):\n    if n > 2:\n        return (n-2) * 180\n    else:\n        return \"not a simple polygon\"", "def angle(n):\n    if n < 2 :\n        return 0\n    else:\n        return ((n - 2) * 180) ", "def angle(n):\n    if n == 2:\n        return 180\n    else:\n        return (n-2)*180", "def angle(n):\n    polygon = (n-2)*180\n    if n < 3:\n        return \"not a polygon\"\n    else:\n        return polygon", "def angle(n):\n    ans = 1440\n    ans = (n-2)*180\n    return ans", "def angle(n):\n    return 360*(n-2)/2", "\n# Python3 implementation of the approach \n  \n# Function to return the sum of internal  \n# angles of an n-sided polygon \ndef angle(n): \n    if(n < 3): \n        return 0\n    return ((n - 2) * 180) \n  \n# Driver code \nn = 5\nprint((angle(n))) \n", "def angle(n):\n    return ((n - 2) * 360)/2", "def angle(n):\n    degree = ((n-2)*(180/n))*n\n    return round(degree)", "def angle(n):\n    angle_sum = 180\n    return angle_sum * (n-2)", "def angle(n):\n    if n < 3:\n        return \"LOL\"\n    elif n == 3:\n        return 180\n    else:\n        return 180*(n-2)", "def angle(n):\n    if n == 3:\n        s = 180\n    if n > 3:\n        s = 180 + (n-3) * 180\n    return s", "def angle(n):\n    #your code here\n    while n >2:\n        return (n-2)*180", "def angle(n):\n    if n==3:\n        return 90+45+45\n    return (n-2)*180", "def angle(n):\n    #your code here\n    solution = 180 * (n - 2)\n    return solution", "def angle(n):\n    res = 0\n    for i in range(3,n+1):\n        res = res + 180\n    return res", "def angle(n):\n    return round(n*((n - 2) * (180 / n)))\n", "def angle(n):\n    if n >2:\n        s=(n-2)*180\n    return s\n    #your code here\n", "def angle(n):\n    sum_angles = 180\n    if n > 2:\n        return sum_angles * (n-2)\n    return sum_angles", "def angle(n):\n    if not n>=3:\n        return \n    sum = 180\n    for _ in range(n-3):\n       sum = sum + 180\n    return sum", "def angle(n):\n    #your code here\n    result = (n - 2) * 180/n\n    return round(result * n)\n", "def angle(n):\n    #(n\u22122)\u00d7180\u00b0\n    return (n-2) * 180\n", "def angle(n):\n    n -= 2\n    return n * 180", "def angle(n):\n    t = 0\n    if n > 3:\n        return (n - 3 + 1) * 180\n    elif n == 3:\n        return 180 \n      \n        \n           \n", "def angle(n):\n    l =(n-2)*180\n    return l", "import math\ndef angle(n):\n    return 180 *(n-2)", "def angle(n):\n    return int(((n-2)/n * 180)*n)", "def angle(N):\n    return 180*(N-2)", "def angle(n):\n    return int((180 - (360 / n)) * n + 0.5)", "def angle(n):\n    for multiply in range(n):\n       result = 180*(multiply-1)\n    return result\n    #your code here\n", "def angle(n):\n    triangles = n-2\n    total_degrees = 180 * triangles\n    return total_degrees", "def angle(n):\n  sum = 0 \n  for i in range(3,n+1):\n      sum += 180\n  return sum   ", "def angle(n):\n    if n>=2:return (n - 2) * 180 ", "def angle(n):\n    k = (n-2)*180\n    if n > 2: \n        return k\n    else:\n        return N/A", "def angle(n):\n    #your code here\n    returnval =  (n-2) * 180\n    return returnval", "def angle(n):\n    return 180 if n == 3 else 180 * (n - 2)", "def angle(n):\n    x = 0\n    for i in range(2,n):\n        x += 180\n    return x\n", "def angle(n):\n\n    print(n)\n\n    result = (n -2 ) * 180\n    \n    print(result)\n    \n    return result", "def angle(n):\n    if n <= 2:\n        return None\n    else:\n        sum = 180*(n-2)\n        return sum", "def angle(n):\n    if n == 3:\n        return 180\n    else:\n        return angle(n - 1) + 180", "def angle(number):\n    return 180 * (number - 2)\n", "def angle(n):\n    sum_angle = (n-2)*180\n    return sum_angle\nn = 3\nprint((angle(n)))\n    #your code here\n", "def angle(n):\n    if n <=2:\n        raise ValueError\n    else:\n        return 180*(int(n)-2)", "def angle(n):\n    S=(n-2)*180\n    return S\n    #your code here\n", "def angle(n):\n    angle=n\n    return (n-2)*180", "import math\ndef angle(n):\n    return ((n-2)*180)", "def angle(n):\n    #your code here\n    return (n-2)*180 if n>2 else 'error'\n", "def angle(n):\n    a = 180*(n-2)\n    return(a)", "def angle(n):\n    if n > 2:\n        return ((n - 2) * 180)\n    else:\n        return -1", "def angle(n):\n    s=180\n    p=0\n    if n==3:\n        return s\n    if n>3:\n        for i in range (3,n+1):\n            p=p+s\n    return p", "def angle(n):\n    '''\n    sum = 180(# of sides - 2) \n    '''\n\n    return 180 * (n-2)", "def angle(n):\n    return round(180*n-360)", "def angle(n):\n    if n > 2:\n        return (n-2)*180\n    return None", "def angle(n):\n    #your code here+\n    k = (n-2)*180\n    return k", "def angle(n):\n    if n > 2:\n        return int((180 - (360 / n))* n + 0.5)\n    else:\n        print('error')\n        return ''", "def angle(n):\n    n = n - 2\n    n *= 180\n    return n", "def angle(n):\n    return round((180 - 360/n)*n, 0)", "import unittest\n\n\ndef angle(n):\n    return 180 * (n - 2)\n    \n    \nclass TestAngle(unittest.TestCase):\n    def test_should_return_180_when_given_n_is_3(self):\n        self.assertEqual(angle(3), 180)\n\n    def test_should_return_360_when_given_n_is_4(self):\n        self.assertEqual(angle(4), 360)\n\n    def test_should_return_540_when_given_n_is_5(self):\n        self.assertEqual(angle(5), 540)\n", "def angle(n):\n    x = (n-2)*180\n    return x\nprint((angle(6)))\n", "def angle(n):\n    if n == 3:\n        a = 180\n    elif n >= 4:\n        a = 180 * (n - 2)      \n    return a\n\n    #your code here\n", "def angle(n):\n    #180 * (n-2)\n    #return\n    nums = 180*(n-2)\n    return nums", "def angle(n):\n    nums = 180*(n-2)\n    return nums", "def angle(n):\n    #your code here\n    if n>2:\n        return (n-2)*180\n    else:\n        return none", "def angle(n):\n    if n < 3:\n        return 0\n    return ((n - 2)*180)", "def angle(n):\n    if n < 3:\n        print('Has to be a shape, try again')\n    elif n == 3:\n        return 180\n    elif n > 3:\n        n = ((n-4)*180 + 360)\n    return n", "def angle(n):\n    #your code here\n    if n > 2:\n       sum = (n - 2) * 180\n    return sum\n", "def angle(n):\n    b = ( n-2) * 180\n    return b", "def angle(n):\n    triangleNum = n - 2\n    totalInternalAngles = triangleNum * 180\n    return totalInternalAngles", "def angle(num_sides):\n    return (num_sides - 2) * 180  # formula for sum of internal angles of a regular polygon", "angle= lambda n: round(n*(180-360/n))", "def angle(n):\n    test = 180 * (n - 2)\n    return test", "def angle(n):\n    total_sum = (n-2) * 180\n    return total_sum", "def angle(n):\n    return (n-2)*180 #if n==3 else 360\n    #your code here\n", "angle = lambda x: 180 * (x - 2)", "def angle(n):\n    result = 180\n    if n > 3:\n        for i in range(n - 3): result += 180\n    return result", "def angle(n):\n    if n == 3:\n        return 180;\n    if n > 3:\n        return 180 + (n - 3)*180;\n        \n", "def angle(n):\n    return (n-2)*180 #if n==2 no polygon", "def angle(n):\n    return (None, (n - 2)* 180)[n > 2]", "def angle(n):\n    #your code here\n    if n > 2:\n        ans = 0\n        for i in range(n-2):\n            ans = ans + 180\n        return ans", "def angle(n):\n    return n*(n - 2) * 180 / n", "def angle(n):\n    if n < 3:\n       print(\"no polygon\")\n    if n >= 3:\n       return  (n-2)*180\n    \n       \n       \n"]