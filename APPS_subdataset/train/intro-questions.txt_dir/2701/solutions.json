["points = [0, 40, 100, 300, 1200]\n\ndef get_score(arr) -> int:\n    cleared = 0\n    score = 0\n    for lines in arr:\n        level = cleared // 10\n        score += (level+1) * points[lines]\n        cleared += lines\n    return score", "def get_score(arr) -> int:\n    return sum([0, 40, 100, 300, 1200][n] * (1 + (sum(arr[:i]) // 10)) for i, n in enumerate(arr))", "points = [0, 40, 100, 300, 1200]\n\ndef get_score(arr):\n    done, score = 0, 0\n    for lines in arr:\n        score += (done // 10 + 1) * points[lines]\n        done += lines\n    return score", "def get_score(arr) -> int:\n    points = [0, 40, 100, 300, 1200]\n    done = 0\n    score = 0\n    for lines in arr:\n        level = done // 10\n        score += (level+1) * points[lines]\n        done += lines\n    return score", "d = {0: 0, 1: 40, 2: 100, 3: 300, 4: 1200}\n\ndef get_score(arr) -> int:\n    level, score, line = 0, 0, 0\n    for n in arr:\n        score += d[n] * (level + 1)\n        line += n\n        level = line // 10\n    return score", "def get_score(arr):\n    score = 0\n    level = 0\n    lines = 0\n    for i in arr:\n        if i == 4:\n            score += 1200*(level+1)\n            lines += 4\n        elif i == 3:\n            score += 300*(level+1)\n            lines += 3\n        elif i == 2:\n            score += 100*(level+1)\n            lines += 2\n        elif i == 1:\n            score += 40*(level+1)\n            lines += 1\n        else:\n            continue\n    \n        if lines >= 10:\n            level += 1\n            lines -= 10\n            \n    return score", "class Score:\n    def __init__(self):\n        self.default = {'points': tuple([40, 100, 300, 1200]),'line': int(10)}\n        self.current = {'level': int(1), 'lines': int(0), 'point': int(0), 'new_line': int(0)}\n\n    def line__(self):\n        self.current['lines'] += self.current['new_line'] \n        if self.current['lines'] >= self.default['line']:\n            self.current['level'] += 1\n            self.current['lines'] -= self.default['line']\n            \n    def points__(self):\n        self.current['point'] = self.default['points'][self.current['new_line']-1] * (self.current['level'])\n    \n    def update__(self, current) -> int:\n        self.current['new_line'] = current\n        self.points__()\n        self.line__()\n        return self.current['point']\n\ndef get_score(arr) -> int:\n    score = Score()\n    return sum([(score.update__(current)) for current in arr if (current > 0 & current <= 4)])", "points = {\n    0:0,\n    1:40,\n    2:100,\n    3:300,\n    4:1200\n}\n\ndef get_score(arr) -> int:\n    sum = 0\n    level = 0\n    for i in arr:\n        sum += points[i] * (int(level / 10) + 1)\n        level += i\n    return sum", "get_score = lambda arr, acc=__import__(\"itertools\").accumulate: sum(map(lambda ln, lv: [0, 40, 100, 300, 1200][ln] * (lv//10 + 1), arr, acc([0] + arr)))", "from math import floor\n\ndef get_score(arr) -> int:\n    level = 1\n    score = []\n    counter = 0\n    points = {0:0, 1:40, 2:100, 3:300, 4:1200}\n    for i in arr:\n        score.append(points[i]*level)\n        counter += i\n        level = floor(counter/10) + 1\n    return sum(score)"]