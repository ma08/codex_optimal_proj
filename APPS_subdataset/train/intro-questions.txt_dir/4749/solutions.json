["def base_finder(seq):\n    return len(set(''.join(seq)))", "def base_finder(a):\n    return int(max(x[-1] for x in a)) + 1", "def base_finder(seq):\n    base = 0\n    for i in range(10): #as the sequence will always be 10 numbers long\n        number = seq[i] # converting each list element to a string\n        for i in range(len(number)): \n            if int(number[i]) > base: # Comparing each character of string to base\n                base = int(number[i]) # updating the base value\n    return base+1 # return base value \n", "def base_finder(seq):\n    return int(max(''.join(seq))) +1", "base_finder=lambda _:int(max(map(lambda x:x[-1],_)))+1", "def base_finder(seq):\n    digits = set(c for cs in seq for c in cs)\n    return int(max(digits)) + 1", "def base_finder(seq):\n    a = []\n    b = []\n    for i in seq:\n        for j in i: \n            a.append(j)\n    for digit in a:\n        if digit not in b:\n            b.append(digit)\n    return len(b)", "def base_finder(seq):\n    str = ''\n    for i in seq:\n        str += i\n    \n    return len(set(str))\n", "def base_finder(seq):\n    return max([int(i) for i in \"\".join(seq)]) + 1", "def base_finder(seq):\n    mx = [int(char) for char in seq]\n    mx = sorted(mx)\n    print(mx)\n    for i in range(min(mx), max(mx)):\n        if i not in mx:\n            return int(str(i)[-1])\n    return len(mx)"]