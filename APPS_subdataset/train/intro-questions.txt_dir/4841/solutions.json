["def simpson(n):\n    from math import sin, pi\n    \n    a = 0\n    b = pi\n    h = (b - a)/n\n    \n    f = lambda x: (3/2) * sin(x)**3\n    \n    integral = 0\n    integral += f(a) + f(b)\n    integral += 4*sum(f(a +(2*i - 1)*h) for i in range(1, n//2 + 1))\n    integral += 2*sum(f(a + 2*i*h) for i in range(1, n//2))\n    integral *= h/3\n    \n    return integral", "from math import sin, pi\n\ndef simpson(n, a=0, b=pi):\n    f = lambda x: 1.5 * sin(x)**3\n    h = (b-a)/n\n    return (h/3 * (f(a) + f(b) \n                   + 4 * sum( f(a + (2*i-1) * h) for i in range(1, n//2 +1))\n                   + 2 * sum( f(a + 2*i*h) for i in range(1, n//2))))", "from math import sin, pi\n\ndef simpson(n):\n    f = lambda x : 1.5*sin(x)**3\n    h = pi / float(n)\n    s1 = 0\n    for i in range(1, int(n / 2) + 1):\n        s1 += f((2 * i - 1) * h)\n    s2 = 0\n    for i in range(1, int(n / 2)):\n        s2 += f(2 * i * h)\n    res = pi / (3 * n) * (f(0) + f(pi) + 4 * s1 + 2 * s2) \n    return res", "from math import sin, pi\n\nf = lambda x: sin(x)**3*(3/2)\n\ndef simpson(n):\n    a, b = 0, pi\n    h = (b-a)/n\n    return (h/3)*(f(a)+f(b)+4*sum([f(a+(2*i-1)*h) for i in range(1, n//2 + 1)])+2*sum([f(a+2*i*h) for i in range(1, (n//2))]))", "import numpy as np\nimport math\ndef f(x):\n    return 3/2 * np.power(math.sin(x), 3)\n\ndef simpson(n:int):\n    a, b = 0, np.pi #integration limits\n    h = (b - a)/n \n    suma1, suma2 = 0, 0\n    #sum nr 1\n    for i in range(1, n//2+1):\n        suma1 = suma1 + f(a + (2*i-1)*h)\n    #sum nr 2\n    for i in range(1, n//2):\n        suma2 = suma2 + f(a + 2*i*h)\n    #output integral\n    calka = h/3 * (f(a) + f(b) + 4*suma1 + 2*suma2)\n    return calka", "import math\n\n\ndef f(x):\n    return 3 / 2 * math.sin(x) ** 3\n\n\ndef simpson(n):\n    h = math.pi / n\n    a = 0\n    res = f(0) + f(math.pi)\n    for i in range(1, n // 2 + 1):\n        res += 4 * f((2 * i - 1) * h)\n    for i in range(1, n // 2):\n        res += 2 * f(2 * i * h)\n    res *= math.pi / (3 * n)\n    return res", "import numpy as np\n\ndef simpson(n):\n  sum = 0\n  h = (np.pi - 0) / n\n  for k in range(n + 1):\n    x = 0 + (k * h)\n    summand = 1.5*(np.sin(x))**3\n    if (k != 0) and (k != n):\n      summand *= (2 + (2 * (k % 2)))\n    sum += summand\n  return (h/3) * sum\n\n", "import math\n\ndef simpson(n):\n    a, b = 0, math.pi\n    f = lambda x: (3/2) * (math.sin(x) ** 3)\n    h = (b - a) / n\n    res = f(a)\n    res += 4 * sum(f(a + i*h) for i in range(1, n, 2))\n    res += 2 * sum(f(a + i*h) for i in range(2, n, 2))\n    res += f(b)\n    return (h / 3) * res", "from math import pi\nfrom math import sin\n\ndef simpson(n):\n    \n    f = lambda x : (3/2) * (sin(x) ** 3)\n    \n    b = pi\n    a = 0\n    \n    h = (b-a)/n\n    coeff = 1/3*h\n    sum_a = 4 * sum([f(a + (2*i - 1)*h) for i in range(1, n//2 + 1)])\n    sum_b = 2 * sum([f(a + 2*i * h) for i in range(1, n//2)])\n    \n    return coeff * (f(a) + f(b) + sum_a + sum_b)", "from math import sin\nfrom math import pi\n\ndef f(x):\n    return 3/2*(sin(x)**3)\n\ndef simpson(n):\n    return pi/(3*n)*(f(0) + f(pi) + 4*sum(f((2*i - 1)*(pi/n))  for i in range(1,n//2+1)) + 2*sum(f(2*i*(pi/n)) for i in range(1,n//2)))\n"]