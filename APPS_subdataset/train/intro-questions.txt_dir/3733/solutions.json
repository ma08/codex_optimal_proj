["def arithmetic_sequence_elements(a, r, n):\n    return ', '.join(str(a + b * r) for b in range(n))\n", "def arithmetic_sequence_elements(a, r, n):\n    return \", \".join((str(a+r*i) for i in range(n)))", "from itertools import count, islice\n\ndef arithmetic_sequence_elements(a, r, n):\n    return ', '.join([str(x) for x in islice(count(a, r), n)])", "def arithmetic_sequence_elements(a, r, n):\n    return ', '.join(str(a + r*x) for x in range(n))", "def arithmetic_sequence_elements(a, r, n):\n    rng = list(range(a, a + (r * n), r)) if r != 0 else [a] * n\n    return ', '.join(map(str,rng))", "def arithmetic_sequence_elements(a, r, n):\n    z = str(a)\n    for i in range(n - 1):\n        a = a + r\n        z = z + \", \" + str(a)\n\n    return z", "def arithmetic_sequence_elements(a, r, n):\n    def seq(a,r,n):\n        while n>0:\n            yield a\n            n-=1\n            a+=r\n    return \", \".join(map(str,seq(a,r,n)))\n", "def arithmetic_sequence_elements(a, r, n):\n    out = [str(a)]\n    for i in range(n - 1):\n        a += r\n        out.append(str(a))\n    \n    return \", \".join(out)\n", "def arithmetic_sequence_elements(a, r, n):\n    result = str(a)\n    list_ = [a]\n    for i in range(n-1):\n        result += ', ' + str(list_[-1]+r)\n        list_.append(list_[-1]+r)\n    return result", "def arithmetic_sequence_elements(a, r, n):\n    result = [str(a)]\n    for i in range(1, n):\n        a = a + r\n        result.append(str(a))\n    return \", \".join(result)"]