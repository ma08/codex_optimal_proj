["def two_highest(ls):\n    result = sorted(list(set(ls)), reverse=True)[:2]\n    return result if isinstance(ls, (list)) else False", "def two_highest(list):\n    return False if isinstance(list, str) else sorted(set(list), reverse=True)[0:2]", "import heapq\ndef two_highest(list_):\n    return heapq.nlargest(2, set(list_)) if type(list_) == list else False", "from heapq import nlargest\n\ndef two_highest(lst):\n    return isinstance(lst, list) and nlargest(2, set(lst))", "def two_highest(l):\n    if type(l) != list:\n        return False\n    return sorted(list(set(l)), key=lambda k: -k)[:2]", "def two_highest(arg1):\n    if type(arg1) is list:\n        new_list = sorted(list(set(arg1)))\n        new_list.reverse()\n        return new_list[0: 2]\n    else:\n        return False", "two_highest = lambda l: isinstance(l, list) and sorted(set(l))[-2:][::-1]", "def two_highest(x):\n    if type(x) is list:\n        return [] if len(x) == 0 else sorted(list(set(x)))[::-1][:2]\n    \n    return False", "from heapq import nlargest\n\ndef two_highest(arg1, n=2):\n    return type(arg1) is list and nlargest(n, set(arg1))", "def two_highest(arg1):\n    return type(arg1) == list and sorted(list(set(arg1)), reverse=True)[:2]", "def two_highest(arg1):\n    l=[]\n    for x in arg1:\n        if type(x)!=int:\n            return False\n        else:\n            l.append(x)\n    a=set(l)\n    return sorted(a,reverse=True)[:2]", "def two_highest(arg1):\n    return False if type(arg1)!=list else sorted(set(arg1),reverse = True)[:2]", "def two_highest(arg):\n  return sorted(list(set(arg)), reverse=True)[:2] if isinstance(arg, list) else False", "import heapq\n\ndef two_highest(l):\n    return heapq.nlargest(2, set(l)) if type(l) == list else False", "def two_highest(mylist):\n    if not isinstance(mylist, list):\n        return False\n    return sorted(list(set(mylist)), reverse=True)[:2]", "def two_highest(list):\n    if len(list) < 0:\n        return []\n    elif len(list) > 0 and not str(list[0]).isdigit():\n        return False\n    return sorted(set(list))[::-1][0:2]", "import heapq\ndef two_highest(s):\n    return False if type(s) == str else heapq.nlargest(2,set(s))", "def two_highest(list):\n    return sorted(set(list))[:-3:-1]", "def two_highest(x):\n  if (type(x)==type(\"cool\")):\n    return False\n  print(x)\n  x.sort()\n  x.reverse()\n  i=0\n  if len(x)>1:\n    while x[i]==x[0]:\n      i+=1    \n    return [x[0],x[i]]\n  else:\n    return x", "two_highest = lambda a, b=exec(\"import heapq\"): heapq.nlargest(2, set(a)) if type(a) is list else False", "two_highest = lambda a: sorted(set(a), reverse=True)[:2] if type(a) is list else False", "from typing import List\n\ndef two_highest(_array: List[int]) -> List[int]:\n    \"\"\" Get two max (and unique) values in the given list and return them sorted from highest to lowest. \"\"\"\n    return sorted(set(_array), reverse=True)[:2]", "def two_highest(arg1):\n    return sorted(set(arg1), reverse=True)[:2]", "def two_highest(lst):\n    return isinstance(lst, list) and sorted(set(lst), reverse = 1)[:2]", "def two_highest(a):\n    return [0,sorted(set(a))[:-3:-1]][type(a)==list]", "def two_highest(a):\n    return sorted(set(a), reverse=True)[:2] if isinstance(a, list) else False", "def two_highest(arg1):\n    if type(arg1) is not list:\n        return False \n    else:\n        for x in arg1:\n            while int(arg1.count(x)) > 1: \n                arg1.remove(x)\n        return sorted(arg1,reverse=True)[:2]", "def two_highest(arg1):\n    return False if type(arg1) != list else [] if len(arg1) == 0 else sorted(set(arg1), reverse = True)[:2]", "two_highest=lambda a:list==type(a)and sorted(set(a))[:-3:-1]", "def two_highest(l):\n    return isinstance(l, list) and sorted(set(l), key=lambda x: -x)[:2]", "def two_highest(nums):\n    return sorted(set(nums))[-2:][::-1]", "def two_highest(arg1):\n    new = sorted(list(set(arg1)))\n    return [new[-1], new[-2]] if len(new) > 1 else arg1", "def two_highest(arg1):\n    if len(arg1)>1:\n        a=(set(arg1))\n        b=max(a)\n        a.remove(b)\n        d=max(a)\n        return [b, d]\n    else:\n        return arg1\n", "def two_highest(arg1):\n    print(arg1)\n    try:\n        if len(arg1) == 1:\n            return arg1\n        else:\n            value1 = max(arg1)\n            arg2 = []\n            for i in arg1:\n                if i != value1:\n                    arg2.append(i)\n            value2 = max(arg2)\n            return [value1, value2]\n    except ValueError:\n        return []", "def two_highest(arg1):\n    r = sorted(list(set(arg1)), reverse=True)\n    return r[:2]", "def two_highest(arg1):\n    l = list(sorted(set(arg1))[-2:])\n    l.reverse()\n    return l", "def two_highest(arg1):\n    \n    if len(arg1) < 1:\n        return []\n    elif len(arg1) < 2:\n        return arg1\n    \n    res = [arg1[0], arg1[1]] if arg1[0] > arg1[1] else [arg1[1], arg1[0]]\n    \n    for i in arg1:\n        if i > res[0]:\n            res[1] = res[0]\n            res[0] = i\n        elif i > res[1] and i != res[0]:\n            res[1] = i\n            \n    print(arg1)\n    \n    return res if res[0] != res[1] else res[0]", "def two_highest(arg1):\n    \n    if len(arg1) < 1:\n        return []\n    elif len(arg1) < 2:\n        return arg1\n    \n    res1 = max(arg1)\n    while(max(arg1) == res1):\n        arg1.remove(res1)\n    res2 = max(arg1)\n    \n    return [res1, res2] if res1 != res2 else [res1]\n", "def two_highest(arg1):\n    l = list(set(arg1))\n    l.sort()\n    if len(l) >= 2:\n        return [ l[-1], l[-2] ]\n    elif len(l) == 1:\n        return [ l[-1] ]\n    else:\n        return []\n", "def two_highest(arg1):\n    arg2 = list(set(arg1))\n    arg2 = sorted(arg2)\n    \n    if len(arg2) == 0:\n        return []\n    if len(arg2) == 1:\n        return arg2\n    else:\n        return [arg2[-1], arg2[-2]]\n    pass", "def two_highest(arg1):\n    print(sorted(list(set(arg1)), reverse=True))\n    return sorted(list(set(arg1)), reverse=True)[:2]", "def two_highest(arg1):\n    if len(arg1) <=1:\n        return arg1\n    h1 = arg1[0]\n    h2 = arg1[1]\n    if h2 > h1:\n        h1, h2 = h2, h1\n    for i in range(2, len(arg1)):\n        if arg1[i] > h1:\n            h2 = h1\n            h1 = arg1[i]\n        elif arg1[i] > h2 and arg1[i] != h1:\n            h2 = arg1[i]\n    if h1 != h2:\n        return [h1, h2]\n    return [h1]\n        \n\n        \n    \n", "def two_highest(arg1):\n    arg1 = set(arg1)\n    arg1 = sorted(list(arg1))\n    \n    if len(arg1) > 1:\n        return [arg1[-1],arg1[-2]]\n    else:\n        return arg1", "def two_highest(arg1):\n    return sorted(set(arg1))[::-1][:2]", "def two_highest(arg1):\n    return list(reversed(sorted(set(arg1))[-2:]))", "def two_highest(arg1):\n    #set() to get unique values\n    #sorted() to sort from top to bottom\n    #slice [:2] to pick top 2\n    return(sorted(set(arg1),reverse=True)[:2])", "def two_highest(arg1):\n    s = sorted(set(arg1), reverse=1)\n    return [s[0],s[1]] if len(s) > 1 else s", "def two_highest(arg1):\n    if arg1 == [] : return []\n    unique_integers = set(arg1)  \n    if len(unique_integers) == 1 : return list(unique_integers)\n    largest_integer = max(unique_integers) \n    unique_integers.remove(largest_integer)\n\n    second_largest_integer = max(unique_integers)\n    \n    return [largest_integer, second_largest_integer]", "def two_highest(arg1):\n    new = set(arg1)\n    final_list = list(new)\n    final_list.sort()\n    if len(final_list) == 1:\n        return final_list\n    elif final_list == []:\n        return final_list\n\n    highest = [final_list[-1], final_list[-2]]\n    \n    return highest\n    \n", "def two_highest(arg1):\n    arg1 = list(set(arg1))\n    arg1.sort()\n    highest = arg1[-2:]\n    highest.reverse()\n    return highest", "\ndef two_highest(arg1):\n    return (list(dict.fromkeys(sorted(arg1)))[-2:])[::-1]\n", "def two_highest(arg1):\n    return sorted(list(dict.fromkeys(arg1)), reverse=True)[:2]", "def two_highest(arg1):\n    print(arg1)\n    if not arg1 or len(arg1) < 2:\n        return arg1\n    arg1 = set(arg1)\n    a1 = max(arg1)\n    arg1.remove(a1)\n    a2 = max(arg1)\n    return [a1, a2]", "def two_highest(arg1):\n    res = []\n    gab = set(arg1)\n    sag = list(gab)\n    dad = sorted(sag)\n    if len(dad) == 0:\n        return []\n    elif len(dad) == 1 or len(dad) == 2:\n        return dad\n    else:\n        res.append(dad[-1])\n        res.append(dad[-2])\n        return res\n", "def two_highest(arg1):\n    if arg1:\n        lst = sorted((list(set(arg1))), reverse=True)\n        return lst[:2] if len(lst) >= 2 else arg1\n    else: \n        return arg1", "import heapq\n\ndef two_highest(arg1):\n    return heapq.nlargest(2, set(arg1))", "def two_highest(a):\n    r = []\n    \n    for item in sorted(a)[::-1]:\n        if item not in r:\n            r.append(item)\n    return r[:2]", "def two_highest(arg1):\n    mylist = list(dict.fromkeys(arg1))\n    mylist = sorted(mylist, reverse = True)\n    return mylist[0:2]", "def two_highest(arg1):\n    pass\n    if len(arg1) == 0:\n        return []\n    a = sorted(arg1, reverse = True)\n    if a[0] == a[-1]:\n        return [a[0]]\n    else:\n        return [a[0], a[a.count(a[0])]]", "def two_highest(a):\n    return a and sorted(set(a), reverse = True)[0:2]", "def two_highest(arg1):\n    out = []\n    for v in sorted(arg1, reverse=True):\n        if len(out) == 2:\n            break\n        if v not in out:\n            out.append(v)\n    return out", "def two_highest(arg1):\n    return sorted(set(arg1))[:-3:-1]", "def two_highest(arg1):\n    arg1 = sorted(set(arg1),reverse=True)\n    return arg1[:2]", "def two_highest(arg1):\n    arg1 = list(set(arg1))\n    terminos = []\n    if len(arg1)>0:\n        terminos.append(arg1[0])\n        for x in arg1:\n            if x>terminos[0]:\n                terminos[0]=x\n        arg1.remove(terminos[0])\n    if len(arg1)>0:\n        terminos.append(arg1[0])\n        for x in arg1:\n            if x>terminos[1]:\n                terminos[1]=x\n    return terminos\n            \n        \n", "def two_highest(arg1):\n    arg1 = sorted(arg1, reverse=True)\n    res = []\n    for i in range(len(arg1)):\n        if len(res) == 2:\n            break\n        if arg1[i] not in res:\n            res.append(arg1[i])\n    return res", "def two_highest(arg1):\n    if arg1 == []: \n        return arg1\n    returnArr = []\n    val1 = max(arg1)\n    returnArr.append(val1)\n    for i in range(len(arg1)): \n        if val1 in arg1: \n            arg1.remove(val1)\n    if arg1 == []: \n        return returnArr\n    val2 = max(arg1)\n    if val2 == None:\n        return returnArr \n    returnArr.append(val2)\n    return returnArr", "def two_highest(arg1):\n    if arg1 == []:\n        return []\n    elif len(set(arg1)) == 1:\n        return arg1\n    elif len(set(arg1)) == 2:\n        #arg2 = arg1.sort(reverse = True)\n        return arg1\n    elif len(arg1) == 3 or len(arg1) > 3:\n        x = []\n        arg1 = set(arg1)\n        arg1 = list(arg1)\n        max_1 = max(arg1)\n        x.append(max_1)\n        arg1.remove(max_1)\n        max_2 = max(arg1)\n        x.append(max_2)\n        return x\n    \n    \n    \n", "def two_highest(arg1):\n    x = []\n    y = []\n    z = []\n    if len(arg1) == 0:\n        return []\n    elif len(arg1) == 1:\n        return arg1\n    else:\n        \n        x = sorted(arg1, reverse = True)\n        for i in range(len(x)):\n            if x[i] in y:\n                y = y\n            else:\n                y.append(x[i])\n        z.append(y[0])\n        z.append(y[1])\n        return z", "def two_highest(arg1):\n    unique = set(arg1)\n    if len(unique) <= 2:\n        return sorted(list(unique), reverse = True)\n    max1 = max(unique)\n    unique.discard(max1)\n    max2 = max(unique)\n    return [max1, max2]", "def two_highest(arg1):\n    arg1=list(set(arg1))\n    arg1.sort()\n    return arg1[-2:][::-1]", "def two_highest(arg1):\n    distinct = list(set(arg1))\n    return sorted(distinct, reverse=True)[:2]\n", "def two_highest(arg1):\n    a=[]\n    a=list(set(arg1))\n    a.sort(reverse=True)\n    return a[:2] if len(a)>2 else a", "def two_highest(arg1):\n    arg1 = list(set(arg1))\n    arg1.sort(reverse=True)\n    return arg1[0:2]", "def two_highest(arg1):\n    return sorted(set(arg1), reverse=True)[0:2]", "def two_highest(arg1):\n    return sorted(set(arg1))[-2:][::-1]", "def two_highest(arg1):\n    if type(arg1) is list:\n        return [arg for arg in sorted(list(set(arg1)))[-1::-1][:2]]", "def two_highest(arg1):\n    return sorted(list(set(arg1)), reverse = True)[:2]\n", "def two_highest(arg1):\n    return sorted((x for x in set(arg1)), key=int)[::-1][:2]", "from heapq import nlargest\ndef two_highest(arg1):\n    return nlargest(2,set(arg1))", "def two_highest(arg1):\n    if len(arg1)==0:\n        return []\n    elif len(arg1)==1:\n        return arg1\n    else:\n        return [sorted(set(arg1),reverse=True)[0],sorted(set(arg1),reverse=True)[1]]", "def two_highest(arg1):\n  zrobmyset = set(arg1)\n  listabezdupl = list(zrobmyset)\n  listabezdupl.sort()\n  listabezdupl.reverse()\n  return listabezdupl[:2]", "def two_highest(arg1):\n    result = []\n    arg2 = sorted(set(arg1))\n    if len(arg2) == 0:\n        return result\n    elif len(arg2) == 1:\n        result.append(arg2[len(arg2) - 1])\n    elif len(arg2) > 1:\n        result.append(arg2[len(arg2) - 1])\n        result.append(arg2[len(arg2) - 2])\n    return result", "def two_highest(arg1):\n    result = []\n    arg2 = sorted(set(arg1))\n    if len(arg2) == 0:\n        return result\n    if arg2[len(arg2) - 1] != arg2[len(arg2) - 2] and len(arg2):\n        result.append(arg2[len(arg2) - 1])\n        result.append(arg2[len(arg2) - 2])\n    elif arg2[len(arg2) - 1] == arg2[len(arg2) - 2] and len(arg2):\n        result.append(arg2[len(arg2) - 1])\n    return result", "def two_highest(arg):\n    if len(arg) <=1:\n        return arg\n    a = sorted(list(dict.fromkeys(arg)), reverse=True)\n    return [a[0], a[1]]", "def two_highest(arg1):\n    rez = sorted(set(arg1))\n    return [list(rez)[-1], list(rez)[-2]] if len(rez) > 1 else [list(rez)[-1]] if len(rez) == 1 else []\n", "def two_highest(arg1):\n    x = sorted(list(set(arg1)))\n    return [x[-1], x[-2]] if len(x) >= 2 else x", "def two_highest(arg1):\n    arg1=list(dict.fromkeys(arg1))\n    if len(arg1)>1:\n        res=[]\n        res.append(max(arg1))\n        arg1.remove(max(arg1))\n        res.append(max(arg1))\n        arg1.remove(max(arg1))\n        return res\n    elif len(arg1)>0:\n        res=[]\n        res.append(max(arg1))\n        arg1.remove(max(arg1))\n        return res\n    else:\n        return []", "def two_highest(arg1):\n    if arg1 == []: return []\n    if len(arg1) == 1: return arg1\n    lst = sorted(set(arg1))\n    return [lst[-1],lst[-2]]\n", "def two_highest(arg1):\n    uniques = set(arg1)\n    if len(uniques) <= 2:\n        return sorted(uniques, reverse=True)\n    return sorted(uniques, reverse=True)[:2]", "def two_highest(arg1):\n    if arg1 == []:\n        return arg1\n    else:\n        st = set(arg1)\n        if len(st) == 1:\n            return [arg1[0]]\n        else:\n            arg1 = sorted(list(st))\n            print(arg1)\n            return [arg1[-1], arg1[-2]]\n", "def two_highest(arg1):\n    return [max(arg1), max(x for x in arg1 if x != max(arg1))] if len(arg1) > 1 else [] if arg1 == [] else arg1", "def two_highest(lst):\n    return sorted(set(lst), reverse=True)[:2]", "import sys\ndef two_highest(arg1):\n    if len(arg1) == 0:\n        return []\n    if len(arg1) == 1:\n        return [arg1[0]]\n    \n    x = -1\n    y = -1\n    \n    for i in range(0, len(arg1)):\n        if arg1[i] > y:\n            x = y\n            y = arg1[i]\n        elif y > arg1[i] > x:\n            x = arg1[i]\n            \n    return [y] if x == y else [y, x]\n        \n    \n", "def two_highest(a):\n    return sorted(set(a), reverse=True)[:2]", "def two_highest(arg1):\n    if type(arg1) is str:\n        return False\n    \n    else:\n        l = [i for i in set(arg1)]\n        result = []\n        j = 0\n        for i in l:\n            result.append(max(l))\n            l.remove(max(l))\n            j += 1\n            if j  == 2:\n                break\n    \n    return result\n    \n", "def two_highest(s):\n    if type(s) != list:return False\n    l = list(set(s))\n    l.sort(reverse= True)\n    return l[:2]", "import heapq\n\ndef two_highest(lst):\n    if not isinstance(lst,list):\n        return False\n    else:\n        result = []\n        for it in sorted(lst,reverse=True):\n            if len(result) == 0:\n                result.append(it)\n            elif result[0] != it:\n                result.append(it)\n                return result\n        return result\n", "def two_highest(arg1):\n    x = [i for i in arg1 if isinstance(i, str)]\n    if len(x) > 0:\n        return False\n    if len(arg1) == 0:\n        return []\n    return sorted(list(set(arg1)))[-2:][::-1]"]