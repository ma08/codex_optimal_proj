["from collections import Counter\nfrom operator import itemgetter\n\ndef letter_frequency(text):\n    items = Counter(c for c in text.lower() if c.isalpha()).items()\n    return sorted(\n        sorted(items, key=itemgetter(0)),\n        key=itemgetter(1),\n        reverse=True\n    )", "from collections import Counter\ndef letter_frequency(text):\n  return sorted(Counter(filter(str.isalpha, \n                        text.lower())\n                        ).most_common(), \n                key=lambda t:(-t[1],t[0]))", "# return a list of tuples sorted by frequency with\n# the most frequent letter first. Any letters with the\n# same frequency are ordered alphabetically\n\ndef letter_frequency(text):\n  text = text.lower()\n  freq = sorted([(l, text.count(l)) for l in set(text) if l.isalpha()], key=lambda k: k[0])\n  return sorted(freq, key=lambda k: k[1], reverse=True)", "def letter_frequency(text):\n    d = {}\n    for i in text:\n        if i.isalpha():\n            i = i.lower()\n            d[i] = d[i] + 1 if i in d else 1\n    return sorted(d.items(), key=lambda (k, v): (-v, k))", "import re\nfrom collections import Counter\ndef letter_frequency(text):\n  letters = re.findall('[a-z]', text.lower())\n  freqs   = Counter(letters).most_common()\n  return sorted(freqs, lambda a, b: cmp(b[1], a[1]) or cmp(a[0], b[0]))", "def letter_frequency(text):\n  text = text.lower()\n  freq_count = [(c, text.count(c)) for c in text if c.isalpha()]\n  return sorted(list(set(freq_count)), key=lambda x: (-x[1], x[0]))\n\n", "from collections import Counter\n\ndef letter_frequency(text):   \n    return sorted(Counter(''.join([c for c in text.lower() if c.isalpha()])).items(), key=lambda x: (-x[1],x[0]))", "def letter_frequency(text):\n  text = [c for c in text.lower() if c.isalpha()]\n  result = [(char, text.count(char)) for char in sorted(set(text))]\n  return sorted(result, key = lambda char_freq: char_freq[1], reverse = True)\n", "from collections import Counter\n\ndef letter_frequency(text):\n    cnts = Counter(c for c in text.lower() if c.isalpha()).most_common()\n    return sorted(cnts, key=lambda x: (-x[1], x[0]))", "def letter_frequency(text):\n  text = text.lower()\n  return sorted([(e, text.count(e)) for e in set(text) if e.isalpha()], key = lambda e: (-e[1], e[0])) "]