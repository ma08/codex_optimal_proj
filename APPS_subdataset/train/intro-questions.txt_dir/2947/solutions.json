["def rounding(n, m):\n    return n if n % m == m / 2 else m * round(n / m)", "def rounding(n,m):\n    down, up = (n//m)*m, (n//m)*m+m\n    if up-n < n-down : return up\n    elif up-n == n-down : return n\n    return down", "def rounding(n, m):\n    return n if (n / m) % 1 == 0.5 else round(n / m) * m", "def rounding(n, m):\n    diff = n % m\n    \n    if diff < m / 2:\n        return n - diff\n    elif diff > m / 2:\n        return n - diff + m\n    return n", "def rounding(n,m):\n    if m/n==2:\n        return n\n    return round(n/m)*m", "def rounding(n, m):\n    q, r = divmod(n, m)\n    return q * m if 2 * r < m else (q + 1) * m if 2 * r > m else n", "from math import gcd, ceil\ndef rounding(n,m):\n    return round(n/m)*m if n != ((n//m)*m + ceil(n/m)*m)/2 else n", "from math import ceil, floor\ndef rounding(n,m):\n    a,b = m*ceil(n/m),m*floor(n/m)\n    da,db = abs(n-a),abs(n-b)\n    if(da == db): return n\n    if(da < db): return a\n    return b", "import math\n\ndef rounding(n,m):\n  a = n - math.floor(n / m) * m\n  b = math.ceil(n / m) * m - n\n  return n if a == b else math.floor(n / m) * m if a < b else math.ceil(n / m) * m", "def rounding(n, m):\n    floored = n // m * m\n    diff = n - floored\n    return floored if 2 * diff < m else floored + m if 2 * diff > m else n"]