["from collections import Counter\n\ndef presentation_agenda(friend_list):\n    uniqueDest    = {d for d,c in Counter(d for p in friend_list for d in p['dest']).items() if c == 1}\n    pFilteredDest = tuple((p['person'], [d for d in p['dest'] if d in uniqueDest]) for p in friend_list)\n    return [{'person': name, 'dest': lst} for name,lst in pFilteredDest if lst]", "def presentation_agenda(friend_list):\n    out = []\n    for friend in friend_list:\n        p_list = friend['dest'] \n        for f in friend_list:\n            p_list = [loc for loc in p_list if f == friend or loc not in f['dest']]\n        if len(p_list):\n            out.append({'person': friend['person'], 'dest': p_list})\n    return out", "from operator import itemgetter\nfrom collections import Counter\nfrom itertools import chain\n\ndef presentation_agenda(friend_list):\n    okay = {k for k,v in Counter(chain.from_iterable(map(itemgetter('dest'), friend_list))).items() if v == 1}.__contains__\n    result = []\n    for friend in friend_list:\n        temp = list(filter(okay, friend['dest']))\n        if temp: result.append({'person':friend['person'], 'dest':temp})\n    return result", "def presentation_agenda(friend_list):\n    result = []\n    for i, friend in enumerate(friend_list):\n        ds = {x for j, f in enumerate(friend_list) if j != i for x in f['dest']}\n        xs = [x for x in friend['dest'] if x not in ds]\n        if xs:\n            result.append({'person': friend['person'], 'dest': xs})\n    return result", "from functools import reduce \ndef presentation_agenda(friend_list):\n    def add_exclusive_locations(agenda, presenter):\n        def is_unique(location):\n            return False if any(location in friend['dest'] \n                for friend in filter(lambda f: f != presenter, friend_list)\n            ) else True\n\n        exclusive = list(filter(is_unique, presenter['dest']))\n        if exclusive:\n            agenda.append({'person': presenter['person'], 'dest': exclusive})\n        return agenda\n            \n    return reduce(add_exclusive_locations, friend_list, []); ", "from functools import reduce \ndef presentation_agenda(friend_list):\n    \n    def add_exclusive_locations(agenda, friend):\n        \n        def is_unique(loc):\n            return all(peer == friend or loc not in peer['dest'] \n                          for peer in friend_list\n                      )\n            \n        exclusive = list(filter(is_unique, friend['dest']))\n        if exclusive: \n            agenda.append({'person': friend['person'], 'dest': exclusive})\n        return agenda\n            \n    return reduce(add_exclusive_locations, friend_list, []); ", "from functools import reduce \ndef presentation_agenda(friend_list):\n\n    def add_exclusive_locations(agenda, friend):\n        locations_visited_by_peers = reduce(\n                lambda lst, p: lst + p['dest'] if p != friend else lst,\n                friend_list,\n                []\n        )\n  \n        def is_unique(loc): \n            return loc not in locations_visited_by_peers\n            \n        exclusive = list(filter(is_unique, friend['dest']))\n        if exclusive: # at least one location?\n            agenda.append({'person': friend['person'], 'dest': exclusive})\n        return agenda\n            \n    return reduce(add_exclusive_locations, friend_list, []); ", "from copy import deepcopy\n\ndef presentation_agenda(presentation_agenda):\n    data = deepcopy(presentation_agenda)\n    for person in data:\n        \n        B = []\n        for p in presentation_agenda:\n            if p['person'] != person['person']:\n                B += p['dest']\n        person['dest'] = sorted( list( set(person['dest']) - set(B) ) )\n    \n    return [person for person in data if person['dest']]\n", "def presentation_agenda(friend_list):\n    out = []\n    for friend in friend_list:\n        p_list = friend['dest']\n        sub_list = [x for x in friend_list if x != friend]\n        for f in sub_list:\n            p_list = [loc for loc in p_list if loc not in f['dest']]\n        if len(p_list):\n            out.append({'person': friend['person'], 'dest': p_list})\n    return out\n", "from collections import Counter\n\ndef presentation_agenda(friend_list):\n    all_dests = sum((friend['dest'] for friend in friend_list), [])\n    uniq_dests = [dest for dest, count in Counter(all_dests).items() if count == 1]\n    agenda = []\n    for friend in friend_list:\n        uniq = [x for x in friend['dest'] if x in uniq_dests]\n        if uniq:\n            agenda.append({'person': friend['person'], 'dest': uniq})\n    return agenda"]