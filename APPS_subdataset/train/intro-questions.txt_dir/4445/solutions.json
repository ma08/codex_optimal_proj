["import re\n\nPATTERN = re.compile(r'[aeyuio]+[^aeyuio ]*((?=e\\b)e)?', flags=re.I)\n\n\ndef is_haiku(text):\n    return [5,7,5] == [check(s) for s in text.split(\"\\n\")]\n    \ndef check(s):\n    return sum(1 for _ in PATTERN.finditer(s))\n", "import re\n\ndef is_haiku(text):\n    def count_syllables(line):\n        return len(re.findall(r'[aeiouy]{2,}|[aiouy]|e\\B|\\b[^\\Waeiouy]*e\\b', line, re.I))\n    return tuple(map(count_syllables, text.splitlines())) == (5, 7, 5)", "import re\ndef is_haiku(text):\n    \n    def parse_line (line):\n        word_pattern = r'[^\\W\\d_]+'\n        return re.findall(word_pattern, line)\n        \n    def count_syllables(word):\n        vowel_pattern = r'[aeiouy]+'\n        vowels = re.findall(vowel_pattern, word, re.I)\n        ends_in_e = lambda seq: seq[-1] == 'e'\n        if vowels and ends_in_e(vowels) and ends_in_e(word):\n            vowels.pop()\n        return max(len(vowels), 1)\n        \n    syllables = [sum(map(count_syllables, parse_line(line)))\n                 for line in text.splitlines()]\n    return syllables == [5, 7, 5]\n    \n", "def is_haiku(text):\n    import string\n    vow = 'aeiouy'\n\n    def syl_in_word(word):\n        if word is '':\n            return 0\n        syls = sum([1 for ind, l in enumerate(word[:-1]) if (l in vow) and word[ind + 1] not in vow])\n        if word[-1] in vow:\n            if word[-1] != 'e' or (len(word)>1 and word[-2] in vow) or syls == 0:\n                syls += 1\n        return syls\n\n    strings = text.split('\\n')\n    syls = []\n    for s in strings:\n        # lower and clear punctuation\n        s = ''.join([c for c in s.lower() if c not in string.punctuation])\n        syls.append(sum([syl_in_word(word) for word in s.split(' ')]))\n\n    return syls == [5, 7, 5]", "def is_haiku(s,v='aeiouy'):\n    C=[]\n    for x in[a.strip('.;:!?,').split()for a in s.lower().split('\\n')]:\n        t=''\n        for y in x:\n            if y.endswith('e')and any(c in y[:-1]for c in v):y=y[:-1]\n            for c in y:t+=c if c in v else' 'if t and t[-1]!=' 'else''\n            t+=' '\n        C+=[len(t.split())]\n    return C==[5,7,5]", "def is_haiku(text):\n    temp=text.replace(\".\",\"\").replace(\",\",\"\").replace(\"-\",\"\").replace(\"?\",\"\").replace(\"!\",\"\").replace(\"#\",\"\").replace(\";\",\"\").replace(\"/\",\"\").replace(\":\",\"\").replace(\")\",\"\").replace(\"()\",\"\")\n    temp=temp.lower()\n    temp=temp.split(\"\\n\")\n    haiku=[]\n    count=0\n    for i in temp:\n        for word in i.split():\n            count+=syllable(word)\n        haiku.append(count)\n        count=0\n    if len(haiku)!=3:\n        return False   \n    return True if (haiku[0]==5 and haiku[1]==7 and haiku[2]==5) else False\ndef syllable(text):\n    count=0\n    index=0\n    while index<len(text):\n        if text[index] in \"aeiouy\":\n            if text[index]==\"e\" and index==len(text)-1:\n                break\n            count+=1\n            while (index+1)<len(text):                \n                if not (text[index+1] in \"aeiouy\"):\n                    break\n                index+=1\n        index+=1\n    if count==0:\n        count=1\n    return count", "import re\n\nsyllables = re.compile(r'[aeyuio]+[^aeyuio ]*((?=e\\b)e)?', flags=re.I) #consonant + vowel, ends with e, ignore case\n\n\ndef is_haiku(text):\n    return [5,7,5] == [check(s) for s in text.split(\"\\n\")]\n    \ndef check(s):\n    return sum(1 for _ in syllables.finditer(s))", "import re, string\ndef is_haiku(text):\n    text = text.translate(str.maketrans('', '', string.punctuation))\n    text = text.lower().splitlines() # Convert text to lowercase and split by lines\n    # Count as a syllable if consonant followed by vowel\n    sylRegex = re.compile(r'[^aeiouy\\s][aeiouy]') #consonant vowel\n    syl2Regex = re.compile(r'''                 #for edge cases\n    (ia[^lgn])|(riet)|\n    (iu)|([^tn]io[^nr])|(ii)|\n    ([aeiouym]bl$)|(aeiou){3}|(^mc)|(ism$)|\n    (([^aeiouy])\\1l$)|([^l]lien)|\n    (^coa[dglx].)|([^gq]ua[^auieol])|(dnt$)''', re.VERBOSE)\n    endsERegex = re.compile(r'[^aeiouy][aeiouy][aeiou]*[^e\\s]+e(?:\\s|$)') # -1 syllable if the word ends with \"e\"\n    endsE2Regex = re.compile(r'^\\b[ea]\\w{1,2}e(?:\\s|$)') # age, aide, edge\n    beginVRegex = re.compile(r'\\b[aeiouy]') # +1 syllable if the word begins with a vowel\n    exceptions_add = re.compile(r'''(triangle)''') #based on random case failures\n    exceptions_minus = re.compile(r'''(obvious)''')\n\n# Counts for each line\n    count = []\n    for i in range(len(text)):\n        syl = len(sylRegex.findall(text[i])) + len(syl2Regex.findall(text[i]))\n        endsE_set1 = set(endsERegex.findall(text[i]))\n        endsE_set2 = set(endsE2Regex.findall(text[i]))\n        endsE = len(endsE_set1.union(endsE_set2))\n    \n        count.append(syl - endsE + len(beginVRegex.findall(text[i])) + len(exceptions_add.findall(text[i]))-len(exceptions_minus.findall(text[i])))\n        print((text[i]))\n        print((sylRegex.findall(text[i])))\n        print((syl2Regex.findall(text[i])))\n        print((endsERegex.findall(text[i])))\n        print((endsERegex.findall(text[i])))\n        print((beginVRegex.findall(text[i])))\n        print(count) \n        \n    return count==[5,7,5]\n", "#https://www.codewars.com/kata/5c765a4f29e50e391e1414d4/train/python\ndef is_haiku(text):\n    is_haiku = True\n    vowel_list = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n    haiku = text.splitlines()\n    if len(haiku) != 3:\n        return False\n    for line in range(0,3):\n        syllable = 0\n        haiku[line] = haiku[line].split(\" \") \n        for word in haiku[line]:\n            current_syllable = 0\n            silent_e = False\n            word = word.lower()\n            word = \"\".join(filter(str.isalnum, word))\n            if len(word) == 1 and word in vowel_list:\n                current_syllable += 1\n            elif len(word) >= 2:\n                if word[0] in vowel_list:\n                    current_syllable += 1\n                    silent_e = True\n                for position in range(1,len(word)):\n                    if (word[position] in vowel_list) and (word[position-1] not in vowel_list):\n                        current_syllable += 1\n                        silent_e = True\n                if current_syllable != 1 and silent_e == True and word[-1] == \"e\" and word[-2] not in vowel_list:\n                    current_syllable -= 1\n            syllable += current_syllable\n        if line == 0 or line == 2:\n            if syllable != 5:\n                is_haiku = False\n        elif line == 1:\n            if syllable != 7:\n                is_haiku = False\n        if is_haiku == False:\n            return is_haiku\n    return is_haiku", "def is_haiku(text):\n    \"\"\"\n    Given lines of text, determines if those lines constitute a haiku\n    \"\"\"\n    syllables_per_line = []\n    lines = text.splitlines()\n    for i in range(len(lines)):\n        line = lines[i].split(\" \")\n        syllables = 0\n        for word in line:\n            syllables += count_syllables(word)\n        syllables_per_line.append(syllables)\n    if syllables_per_line == [5, 7, 5]:\n        return True\n    else:\n        return False\n        \n\ndef count_syllables(word):\n    \"\"\"\n    Given a word, count the number of syllables\n    \"\"\"\n    syllables_in_word = 0\n    vowels = 'aeiouy'\n    word = \"\".join(filter(str.isalnum, word))\n    word = word.lower()\n    if len(word) > 0:\n        if word[0] in vowels:\n            syllables_in_word = 1\n        if len(word) > 1:\n            i = 0\n            # count consonant, vowel pairs\n            while i < len(word)-1:\n                if (word[i] not in vowels) & (word[i+1] in vowels):\n                    syllables_in_word += 1\n                    i += 1\n                i += 1\n            # take care of silent 'e'\n            # last part of if for double vowel word endings: ex. pursue, levee\n            if (syllables_in_word > 1) & (word.endswith('e')) & (word[len(word)-2] not in vowels):\n                syllables_in_word -= 1\n    # print(f\"word: {word}, syllables: {syllables_in_word}\")\n    return syllables_in_word"]