["def solve(s):\n    isOK = lambda x: x == x[::-1]\n    \n    return (\"OK\" if isOK(s)  else\n            \"remove one\" if any( isOK(s[:i]+s[i+1:]) for i in range(len(s)) ) else\n            \"not possible\")", "def solve(s):\n    if s == s[::-1]:\n        return 'OK'\n    for i in range(len(s)):\n        if s[:i] + s[i+1:] == (s[:i] + s[i+1:])[::-1]:\n            return 'remove one'\n    return 'not possible'", "def solve(s):\n    if s == s[::-1]: return \"OK\"\n    for i in range(len(s)):\n        t = s[:i] + s[i+1:]\n        if t == t[::-1]: return \"remove one\"\n    return \"not possible\"", "def solve(s):\n    return 'OK' if s == s[::-1] else 'remove one' if any(s[:i]+s[i+1:] == (s[:i]+s[i+1:])[::-1] for i in range(len(s))) else 'not possible'", "def solve(s):\n    r = s[::-1]\n    i = next((i for i, (c1, c2) in enumerate(zip(s, r)) if c1 != c2), None)\n    if i is None:\n        return 'OK'\n    j = len(s) - i\n    if s[i+1:] == r[i:j-1] + r[j:] or s[i:j-1] + s[j:] == r[i+1:]:\n        return 'remove one'\n    else:\n        return 'not possible'", "p,solve=lambda s:s==s[::-1],lambda s:p(s)and\"OK\"or any(p(s[:i]+s[i+1:])for i in range(len(s)))and\"remove one\"or\"not possible\"", "def get_pal(s):\n    if len(s) == 1: return 0\n    if len(s) == 2 and s[0] == s[1]: return 0\n    elif len(s) == 2 and s[0] != s[1]: return 1\n    return 1 + min(get_pal(s[1:]), get_pal(s[:-1])) if s[0] != s[-1] else get_pal(s[1:-1])\n        \ndef solve(s):\n    ans = get_pal(s)\n    return \"OK\" if ans == 0 else \"remove one\" if ans == 1 else \"not possible\"", "def solve(stg):\n    if is_pal(stg):\n        return \"OK\"\n    if any(is_pal(f\"{stg[:i]}{stg[i+1:]}\") for i in range(len(stg) + 1)):\n        return \"remove one\"\n    return \"not possible\"\n\n\ndef is_pal(stg):\n    return stg == stg[::-1]", "def solve(s):\n    if s == s[::-1]:\n        return \"OK\"\n    for i in range(len(s)):\n        news = s[:i] + s[i+1:]\n        if news == news[::-1]:\n            return \"remove one\"\n    return \"not possible\"", "def solve(s):\n    if s == s[::-1]: \n        return \"OK\"\n    \n    s = [letter for letter in s]\n    k = [letter for letter in s]\n\n    for char in range(len(s)):\n        s.pop(char); s = \"\".join(s)\n        \n        if s == s[::-1]: \n            return \"remove one\"\n        \n        s = [letter for letter in k]\n        \n    return \"not possible\" \n"]