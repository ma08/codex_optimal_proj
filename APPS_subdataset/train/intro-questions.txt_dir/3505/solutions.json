["def super_pad(string, width, fill=\" \"):\n    if fill.startswith('>'):\n        return (string + width * fill[1:])[:width]\n    elif fill.startswith('^'):\n        pad = (width * fill[1:])[:max(0, width - len(string) + 1) // 2]\n        return (pad + string + pad)[:width]\n    else:\n        if fill.startswith('<'): fill = fill[1:]\n        return (width * fill)[:max(0, width - len(string))] + string[max(0, len(string) - width):]", "def super_pad(s, width, fill=\" \"):\n    padding = width - len(s)\n    if width == 0: return ''\n    \n    def _left_pad():\n        if padding >= 0:\n            return (fill * padding)[:padding] + s\n        return s[-width:]\n    \n    def _right_pad():\n        if padding >= 0:\n            return s + (fill * padding)[:padding]\n        return s[:width]\n    \n    def _center_pad():\n        right = padding // 2\n        left = padding - right\n        if padding >= 0:\n            return (fill * left)[:left] + s + (fill * right)[:right]\n        return s[-left:right]\n    \n    if fill and fill[0] == '>':\n        fill = fill[1:]\n        return _right_pad()\n    if fill and fill[0] == '^':\n        fill = fill[1:]\n        return _center_pad()\n    if fill and fill[0] == '<':\n        fill = fill[1:]\n    return _left_pad()", "def super_pad(string, width, fill=\" \"):\n    if not fill or fill in '<^>':\n        return string\n    \n    fill_len = width - len(string)\n    \n    # check padding mode\n    if fill[0] == '>':\n        l_pad, r_pad = 0, fill_len\n    elif fill[0] == '^':\n        l_pad, r_pad = (fill_len + 1) // 2, fill_len // 2\n    else:\n        l_pad, r_pad = fill_len, 0\n    \n    # if width < string length\n    if fill_len < 0:\n        return string[-l_pad if l_pad else None : r_pad if r_pad else None]\n    \n    # adjust the fill string\n    if fill[0] in '<^>':\n        fill = fill[1:]\n    fill *= fill_len // len(fill) + 1\n    \n    return fill[:l_pad] + string + fill[:r_pad]", "def super_pad(string, width, fill=\" \"):\n  if not fill: return string\n  needed = width - len(string)\n    \n  if fill[0] == \">\":\n      if needed < 0: return string[:needed]\n      return string + (fill[1:] * needed)[:needed]\n  elif fill[0] == \"^\":\n      filler = fill[1:] * needed\n      return (filler[:needed // 2 + needed % 2] + string + filler)[:width]\n  else:\n      if fill[0] == \"<\": fill = fill[1:]\n      if needed < 0: return string[-needed:]\n      return (fill * needed)[:needed] + string\n", "def super_pad(s,w,f=\" \"):\n    if not f:return s\n    if not w:return \"\"\n    if f[0]=='>':return (s+f[1:]*w)[:w]\n    if f[0]=='^':\n        l=r=(f[1:]*w)[:(w-len(s))//2+(1 if (w-len(s))&1 else 0)]\n        return (l+s+r)[:w]\n    return (((f[1:] if f[0]=='<' else f)*w)[:w-len(s)]+s)[-w:]", "def super_pad(string, width, fill=\" \"):\n    str_len = len(string)\n    ###### RIGHT\n    if fill.find('>')+1:\n        fill = fill[1:]\n        fill_len = len(fill)\n        to_fill_len = width - str_len\n        if width < str_len: # For any: fill_len\n            retval = string[0:width]\n        # For all below: width >= str_len\n        elif fill_len == 0:\n            retval = string\n        elif fill_len == 1:\n            RHS_to_fill = width - str_len\n            retval = string + fill*RHS_to_fill\n        elif fill_len > 1:\n            chunks = int(to_fill_len / fill_len)\n            parts  = to_fill_len % fill_len\n            total_len = (chunks*fill_len+parts) # DEBUG\n            retvalb = string + (fill*(chunks+1))[0:total_len]\n            retval = retvalb\n        else:\n            retval = 'RIGHT: Oops'\n    ##### CENTER\n    elif fill.find('^')+1:\n        fill = fill[1:]\n        fill_len = len(fill)\n        to_fill_len = int((width - str_len) / 2)\n        LHS_to_fill_len = to_fill_len + (width - str_len) % 2\n        RHS_to_fill_len = to_fill_len\n        if width < str_len: # For any: fill_len\n            retval = string[0:width]\n        # For all below: width >= str_len\n        elif fill_len == 0:\n            retval = string\n        else:\n            LHS_chunks = int(LHS_to_fill_len / fill_len)\n            LHS_parts  = LHS_to_fill_len % fill_len\n            LHS_total_len = (LHS_chunks*fill_len+LHS_parts)\n            RHS_chunks = int(RHS_to_fill_len / fill_len)\n            RHS_parts  = RHS_to_fill_len % fill_len\n            RHS_total_len = (RHS_chunks*fill_len+RHS_parts)\n            retval = (fill*(LHS_chunks+1))[0:LHS_total_len] + string + (fill*(RHS_chunks+1))[0:RHS_total_len]\n    ###### LEFT\n    else:\n        if fill.find('<')+1:fill = fill[1:]\n        fill_len = len(fill)\n        if width < str_len: # For any: fill_len\n            retval = string[str_len-width:]\n        # For all below: width >= str_len\n        elif fill_len == 0:\n            retval = string\n        elif fill_len == 1:\n            LHS_to_fill = width - str_len\n            retval = fill*LHS_to_fill + string\n        elif fill_len  > 1:\n            LHS_to_fill = width - str_len\n            fill_count = int(LHS_to_fill / fill_len)\n            fill_count_rem = LHS_to_fill % fill_len\n            retval = fill*fill_count + fill[0:fill_count_rem] +string\n        else:\n            retval = 'Left_TEST_Left'\n    return retval\n", "def super_pad(string, width, fill=\" \"):\n    if width == 0:\n        return ''\n    diff = width - len(string)\n    f = fill\n    if diff >= 0:\n        if len(f) > 0 and f[0] in ['<', '^', '>']:\n            if f[0] == '<':\n                f = fill[1:]\n                return (f*width)[:width-len(string)] + string\n            elif f[0] == '^':\n                f = fill[1:]\n                a = (width-len(string))//2\n                b = width-len(string)-a\n                return (f*width)[:b] + string + (f*width)[:a]\n            elif f[0] == '>':\n                f = fill[1:]\n                return string + (f*width)[:width-len(string)]\n        else:\n            return (f*width)[:width-len(string)] + string\n    else:\n        if f[0] == '<':\n            f = fill[1:]\n            return string[len(string)-width:]\n        elif f[0] == '^':\n            f = fill[1:]\n            a = abs(width-len(string))//2\n            b = abs(width-len(string))-a\n            return string[:a] + string[:-b]\n        elif f[0] == '>':\n            f = fill[1:]\n            return string[:width-len(string)]\n        else:\n            return string[len(string)-width:]", "def super_pad(string, width, fill=\" \"):\n    if fill == '':\n        return string\n    if width == 0:\n        return ''\n    diff = width-len(string)\n    if diff <= 0:\n        if fill[0] == '>':\n            return string[:width]\n        elif fill[0] == '^':\n            a = abs(diff)//2\n            b = abs(diff)-a\n            if a == 0 and diff == -1:\n                return string[:-1]\n            return string[b:] + string[:-a]\n        elif fill[0] == '<':\n            fill = fill[1:]\n        return string[-width:]\n    else:\n        if fill[0] == '>':\n            fill = fill[1:]\n            if len(fill) > diff:\n                return string + fill[:diff]\n            else:\n                ans, i = '', 0\n                while i < diff:\n                    ans += fill\n                    if len(ans) >= diff:\n                        ans = ans[:diff]\n                        break\n                    i += 1\n                return string + ans        \n        elif fill[0] == '^':\n            fill = fill[1:]\n            a = diff//2\n            b = diff-a\n            if len(fill) > diff:\n                return fill[:b] + string + fill[:a]\n            else:\n                ans1, i, ans2 = '', 0, ''\n                while i < b:\n                    ans1 += fill\n                    ans2 += fill\n                    if len(ans2) >= diff//2 :\n                        ans1 = ans1[:a]\n                        if len(ans1) >= diff-len(ans2):\n                            ans2 = ans2[:b]\n                            break\n                    i += 1\n                return ans2 + string + ans1\n        elif fill[0] == '<':\n            fill = fill[1:]\n            if len(fill) > diff:\n                return fill[:diff] + string\n            else:\n                ans, i = '', 0\n                while i < diff:\n                    ans += fill\n                    if len(ans) >= diff:\n                        ans = ans[:diff]\n                        break\n                    i += 1\n                return ans + string\n        else:\n            if len(fill) > diff:\n                return fill[:diff] + string\n            else:\n                ans, i = '', 0\n                while i < diff:\n                    ans += fill\n                    if len(ans) >= diff:\n                        ans = ans[:diff]\n                        break\n                    i += 1\n                return ans + string", "def super_pad(string, width, fill=\" \"):\n    if not width:\n        return ''\n    if not fill:\n        return string\n    direction = fill[0]\n    if direction in \"<^>\":\n        fill = fill[1:]\n    else:\n        direction = \"<\"\n    \n    if direction == \"<\":\n        return ((fill*width)[:max(0,width-len(string))]+string)[-width:]\n    elif direction == \">\":\n        return (string+fill*width)[:width]\n    else:\n        left  = (width - len(string) + 1) // 2\n        right = (width - len(string)    ) // 2\n        if right>=0:\n            left_padding  = (fill*width)[:left]\n            right_padding = (fill*width)[:right]\n            return left_padding + string + right_padding\n        else:\n            return string[-left:right]\n        \n        \n        \n  \n    return string", "from itertools import chain, islice, cycle\n\npadding = lambda fill, size: islice(cycle(fill), size)\n\ndef super_pad(string, width, fill=\" \"):\n    if not width: return ''\n    if not fill: return string[:width]\n    size = width - len(string)\n    if size <= 0: return string[:width] if fill[0] in '>^' else string[-width:]\n    if fill[0] == '>': return string + ''.join(padding(fill[1:], size))\n    if fill[0] == '^': return ''.join(padding(fill[1:], (size + 1) >> 1)) + string + ''.join(padding(fill[1:], size >> 1))\n    if fill[0] == '<': fill = fill[1:]\n    return ''.join(padding(fill, size)) + string"]