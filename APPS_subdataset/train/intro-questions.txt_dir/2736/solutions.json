["from functools import cmp_to_key\n\ncmp = lambda a, b: int('%i%i' % (b, a)) - int('%i%i' % (a, b))\nlargest_arrangement = lambda n: int(''.join(str(i) for i in sorted(n, key = cmp_to_key(cmp))))", "def largest_arrangement(numbers):\n    numbers = list(map(str, numbers))\n    for x in range(len(numbers)):\n        for j in range(len(numbers)):\n            ab = numbers[x] + numbers[j]\n            ba= numbers[j] + numbers[x]\n            if int(ab) > int(ba):\n                numbers[x], numbers[j] = numbers[j], numbers[x]\n    return int(''.join(numbers))", "from itertools import permutations\n\ndef largest_arrangement(numbers):\n    return max(int(''.join(p)) for p in permutations(map(str, numbers)))", "from itertools import permutations\ndef largest_arrangement(numbers):\n    return int(max((\"\".join(r) for r in permutations(list(map(str,numbers)))), key = int))\n", "from itertools import permutations, groupby\ndef largest_arrangement(a):\n    a = sorted(a, key=lambda x: str(x)[0])[::-1]\n    t = ''\n    for i, j in groupby(a, key=lambda x: str(x)[0]):\n        li = []\n        for k in permutations(list(j)):\n            li.append(int(\"\".join(map(str, k))))\n        t += str(max(li))\n    return int(t)", "from itertools import permutations\ndef largest_arrangement(numbers):\n    return int(max(''.join(xs) for xs in permutations(map(str, numbers))))", "from functools import cmp_to_key\n\ndef largest_arrangement(numbers):\n\n    @cmp_to_key\n    def cmp(a, b): \n        return int(b + a) - int(a + b)\n        \n    return int(''.join(n for n in sorted(map(str, numbers), key=cmp)))", "from itertools import permutations\nfrom collections import defaultdict\n\ndef find_largest(lst):\n    candidates = map(\"\".join, permutations(lst))\n    return max(candidates)\n\ndef largest_arrangement(numbers):\n    first_digit = defaultdict(list)\n    \n    for n in map(str, numbers):\n        first_digit[n[0]].append(n)\n    \n    result = \"\".join(find_largest(first_digit[d]) for d in \"9876543210\")\n    return int(result)", "def largest_arrangement(numbers):\n  r=qsort(numbers)\n  r=''.join([str(v) for v in r])\n  return int(r)\n\ndef qsort(arr): \n  if len(arr) <= 1: return arr\n  else:\n    return qsort([x for x in arr[1:] if so(x,arr[0])==-1]) + [arr[0]] + qsort([x for x in arr[1:] if so(x,arr[0])!=-1])\n\ndef so(a,b):\n  return -1 if str(b)+str(a) < str(a)+str(b) else 1", "largest_arrangement=lambda a:(lambda l:int(''.join(sorted(map(str,a),key=lambda s:s.ljust(l,s[0]))[::-1])))(len(str(max(a))))"]