["def solve(s):\n    r, l = 0, 0\n    for c in s:\n        m = ord('Z') - ord(c)\n        r, l = r + m + l * m, m + l * 26\n    return r % 1000000007", "def solve(s, z=ord('Z')):\n    a = r = 0\n    for i in (z - ord(c) for c in s):\n        r += (a + 1) * i\n        a = a * 26 + i\n        r %= 1000000007\n        a %= 1000000007\n    return r", "def solve(s):\n    M = 10 ** 9 + 7;\n    z = ord('Z')\n    base = z - ord('A') + 1\n        \n    left, total = 0, 0 \n    # left-upside and total upside for the already traversed part of the list\n    for c_num in [(z - ord(c)) for c in s]:\n        l, t = left, total\n        left = (l * base + c_num) % M\n        total = ((l + 1) * c_num + t) % M\n    return total", "def solve(s):\n    M = 10 ** 9 + 7;\n    base = ord('Z') - ord('A') + 1\n    num_cs = map(lambda c: 90 - ord(c), [c for c in s])\n    acc = (0, 0) # ( left-upside, total upside ) for the already traversed part of the list\n    for num_c in num_cs:\n        (ups_left, ups_tot) = acc\n        ups_left_ = (ups_left * base + num_c) % M\n        ups_tot_ = ((ups_left + 1) * num_c + ups_tot) % M\n        acc = (ups_left_, ups_tot_)\n    return acc[1]", "M=10**9+7\nfrom functools import reduce\n\ndef solve(s):\n    return reduce(lambda p,n: ((p[0]*26+(90-n))%M,((p[0]+1)*(90-n)+p[1])%M),map(ord,s),(0,0))[1]", "def solve(s):\n    a, pa = 0, 0\n    for c in s:\n        diff = ord('Z')-ord(c)\n        a = a + diff + pa*diff\n        pa = diff + pa*26\n        a, pa = a%1000000007, pa%1000000007\n    return a\n", "def solve(s):\n    sum_value, tmp = 0, 0\n    for value in map(lambda x: 90 - ord(x), s):\n        sum_value += value*(1+tmp)\n        tmp = (26*tmp + value) % 1000000007\n    return sum_value % 1000000007", "def solve(s):\n    greater_letters = list(map(lambda x: 90 - ord(x), s))\n    sum_value, tmp = 0, 0\n    for value in greater_letters:\n        sum_value += value*(1+tmp)\n        tmp = (26*tmp + value) % 1000000007\n    return sum_value % 1000000007", "from functools import lru_cache\nfrom itertools import combinations\n\n\n@lru_cache(5000)\ndef get_26_power(i):\n    return 26**i\n\n\ndef solve(s):\n    greater_letters = list(map(lambda x: 90 - ord(x), s))\n    tmp = 1 + sum(greater*get_26_power(i) for i, greater in enumerate(greater_letters[1:]))\n    sum_value = 0\n    for value in greater_letters:\n        sum_value += tmp*value\n        tmp = (tmp+25)//26\n    return sum_value % 1000000007", "def solve(s):\n    val = [90 - ord(c) for c in reversed(s)]\n    tmp, res = [0], val[0]\n    for v1,v2 in zip(val, val[1:]):\n        tmp.append(tmp[-1]*26 + v1)\n        res += v2 * (tmp[-1]+1)\n    return res % (10**9+7)", "MOD = pow(10, 9) + 7\n\ndef solve(s):\n    n = len(s)\n    a = [25 - (ord(x) - 65) for x in s]\n    r, s = 0, 0\n    for i in range(n):\n        r = (r + a[i] + s * a[i]) % MOD\n        s = (a[i] + s * 26) % MOD\n    return r", "def solve(s):\n    n = len(s); dp, mod, sum = [0]*n, 1000000007, 0\n    for i in range(n-2,-1,-1):\n        dp[i] = (((dp[i + 1] * 26) % mod) + (ord('Z') - ord(s[i + 1])) % mod) % mod\n    for i in range(0,n):\n        sum += ((dp[i] + 1) * (ord('Z') - ord(s[i]))) % mod\n        sum %= mod\n    return sum"]