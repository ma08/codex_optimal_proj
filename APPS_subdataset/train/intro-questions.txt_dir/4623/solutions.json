["def make_2d_list(head,row,col):\n    return [[head + c + r*col for c in range(col)] for r in range(row)]", "import numpy as np\n\ndef make_2d_list(head,row,col):\n    return np.array(list(range(head, head + row*col))).reshape(row, col).tolist()\n", "make_2d_list=lambda Q,R,C:[[Q + C * r + c for c in range(C)] for r in range(R)]", "from itertools import count\n\ndef make_2d_list(head,row,col):\n    c = count(0)\n    return [[ head+next(c) for _ in range(col)] for _ in range(row)]", "import numpy as np\ndef make_2d_list(head,row,col):\n    x = np.arange(head, head+row*col)\n    x = x.reshape(row, col)\n    return x.tolist()", "import numpy as np\ndef make_2d_list(head,row,col):\n    return np.arange(head, head + row * col).reshape(row, col).tolist()", "def make_2d_list(head,row,col):\n    return [[]] if col == 0 else [list(x) for x in zip(*[iter(range(head, head + row*col))]*col)]", "def make_2d_list(head, row, col):\n    return [list(range(i, i + col)) for i in (range(head, head + row * col, col))] if col else [[]]", "def make_2d_list(head,row,col):\n    count = head\n    arr2 = []\n    for i in range(row):\n        arr = []\n        for j in range(col):\n            arr.append(count)\n            count += 1\n        arr2.append(arr)\n    return arr2", "def make_2d_list(head,row,col):\n    r=[]\n    x=head\n    for _ in range(row):\n        r.append(list(range(x,x+col)))\n        x+=col\n    return r"]