["def binary_to_string(binary):\n    return \"\".join( [ chr( int(binary[i: i+8], 2) ) for i in range(0, len(binary), 8) ] )", "def binary_to_string(binary):\n    return \"\".join(chr(int(binary[i:i+8],2)) for i in range(0,len(binary),8))\n", "def binary_to_string(binary):\n    result = \"\"\n    \n    while binary:\n        result += chr(int(binary[:8], 2))\n        binary = binary[8:]\n    \n    return result", "binary_to_string=lambda b:''.join(__import__('binascii').unhexlify('%x' % int('0b'+b[i:i+8],base=2)).decode(\"utf-8\") for i in range(0,len(b),8))", "import re\n\ndef binary_to_string(binary):\n    return re.sub(r'[01]{8}', lambda x: chr(int(x.group(), 2)), binary)", "binary_to_string = lambda b: \"\".join([[chr(l) for l in range(0, 127)][m] for m in [int(b[n: n+8],2) for n in range(0, len(b), 8)]])", "def binary_to_string(binary):\n    return int(binary, 2).to_bytes(len(binary)//8, \"big\").decode() if binary else binary", "import re\n\ndef binary_to_string(bits):\n    return ''.join(chr(int(byte, 2)) for byte in re.findall(r'\\d{8}', bits))", "import re\n\ndef binary_to_string(binary):\n    return re.sub(r'.'*8, lambda e: chr(int(e.group(), 2)), binary)", "import re\ndef binary_to_string(binary):\n    return ''.join(chr(int(e,2))for e in re.findall('.'*8, binary))\n"]