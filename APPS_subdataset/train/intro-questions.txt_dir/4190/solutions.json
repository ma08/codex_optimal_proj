["import re\n\ndef is_alt(s):\n    return not re.search('[aeiou]{2}|[^aeiou]{2}',s)", "def is_alt(s):\n    vowels = list(\"aeiou\")\n    v = s[0] in vowels\n    \n    for i in s:\n        if (i in vowels) != v:\n            return False\n        v = not(v)\n    return True", "def is_alt(s):\n    a = s[::2]\n    b = s[1::2]\n    if (b[0] in 'aeiou'):\n        c = a\n        a = b\n        b = c  \n    return all(x in 'aeiou' for x in a) and all(x not in 'aeiou' for x in b);", "vowels = \"aeiou\"\ndef is_alt(s):\n    # if string is less than 2 characters, it cannot alternate\n    if len(s) < 2:\n        return False\n\n    # check if the first character is a vowel or consonant\n    prevIsVowel = s[0] in vowels\n    for c in s[1::]:\n        # check if the next character is a vowel or consonant\n        isVowel =  c in vowels\n        \n        # if the previous character and this character are both vowels\n        # or both consanants, return False\n        if prevIsVowel == isVowel:\n            return False\n        \n        # set the previous char state to the current character state\n        prevIsVowel = isVowel\n        \n    return True", "import re\ndef is_alt(s):\n    return False if re.findall('[aeiou0]{2,}|[^aeiou0-9\\W]{2,}',s) else True ", "def is_alt(s):\n    return helper(s, 0, 1) if s[0] in \"aeiou\" else helper(s, 1, 0)\ndef helper(s, n, m):\n    for i in range(n, len(s), 2):\n        if s[i] not in \"aeiou\":\n            return False\n    for i in range(m, len(s), 2):\n        if s[i] in \"aeiou\":\n            return False\n    return True", "from itertools import groupby\n\ndef is_alt(s):\n  return all(len(list(gp)) == 1 for _, gp in groupby(s, key = lambda x: x in 'aeiou'))", "def is_alt(s):\n    vowels = \"aeiou\"\n    prev = s[0]\n    for ch in s[1:]:\n        if (prev in vowels and ch in vowels) or (prev not in vowels and ch not in vowels):\n            return False\n        prev = ch\n    return True", "import re \ndef is_alt(s):\n    return bool(re.search(r'^([aeiou][^aeiou])*[aeiou]?$|^([^aeiou][aeiou])*[^aeiou]?$',s))", "from itertools import tee\n\ndef is_alt(s):\n    xs1, xs2 = tee(map(lambda x: x in 'aeiou', s))\n    next(xs2)\n    return all(a != b for a, b in zip(xs1, xs2))"]