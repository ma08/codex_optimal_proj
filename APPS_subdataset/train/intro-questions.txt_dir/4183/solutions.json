["def greatest_distance(arr):\n    return max(i - arr.index(x) for i,x in enumerate(arr))", "def greatest_distance(arr):\n    indexes, d = {}, 0\n    for i,n in enumerate(arr):\n        if n in indexes: d = max(d, i-indexes[n])\n        else:            indexes[n] = i\n    return d", "def greatest_distance(lst):\n    return max((distance(lst, n) for n in set(lst) if lst.count(n) > 1), default=0)\n\n\ndef distance(lst, item):\n    return len(lst) - 1 - lst[::-1].index(item) - lst.index(item)\n", "from collections import defaultdict\n\ndef greatest_distance(a):\n    d = defaultdict(list)\n    for i, x in enumerate(a):\n        d[x].append(i)\n    return max(x[-1] - x[0] for x in d.values())", "def greatest_distance(data):\n    i = 0; d = 0\n    while (i < len(data)):\n        j = i + 1\n        while (j < len(data)):\n            if (data[j] == data[i]):\n                if (j - i > d): d = j - i\n            j += 1\n        i += 1\n    return d;", "greatest_distance=lambda a:max(i-a.index(e)for i,e in enumerate(a))", "greatest_distance=lambda a:max(len(a)-a[::-1].index(e)-a.index(e)-1for e in a)", "from collections import defaultdict\n\n\ndef greatest_distance(arr):\n    indexes = defaultdict(list)\n    for i, a in enumerate(arr):\n        indexes[a].append(i)\n    try:\n        return max(b[-1] - b[0] for b in indexes.values() if len(b) > 1)\n    except ValueError:\n        return 0\n", "def greatest_distance(arr):\n    res = 0\n    for i, x in enumerate(arr): \n        for j, y in enumerate(arr): \n            if y==x: \n                res = max(res, abs(i-j))\n    return res", "from collections import Counter\n\ndef greatest_distance(arr):\n    r_arr, count_arr = arr[::-1], Counter(arr)\n    return max(len(arr) - 1 - r_arr.index(k) - arr.index(k) if c > 1 else 0 for k, c in count_arr.items())"]