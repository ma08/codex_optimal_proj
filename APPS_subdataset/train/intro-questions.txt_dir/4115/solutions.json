["def find_outlier(int):\n    odds = [x for x in int if x%2!=0]\n    evens= [x for x in int if x%2==0]\n    return odds[0] if len(odds)<len(evens) else evens[0]\n", "def find_outlier(integers):\n  even, odd = 0, 0\n  for i in integers:\n    if i % 2:\n      even += 1\n      last_even = i\n    else:\n      odd += 1\n      last_odd = i\n  return last_even if even == 1 else last_odd\n", "def find_outlier(integers):\n    parity = [n % 2 for n in integers]\n    return integers[parity.index(1)] if sum(parity) == 1 else integers[parity.index(0)]", "def find_outlier(integers):\n    parity = [n % 2 for n in integers]\n    return integers[parity.index(sum(parity) == 1)]\n", "def find_outlier(integers):\n    listEven = []\n    listOdd = []\n    for n in integers:\n        if n % 2 == 0:\n            listEven.append(n)\n        else:\n            listOdd.append(n)\n            \n    if len(listEven) == 1:\n        return listEven[0]\n    else:\n        return listOdd[0]", "def find_outlier(nums):\n\n  base_parity = sum( x%2 for x in nums[:3] ) // 2\n  \n  for i in range(len(nums)):\n    if nums[i] % 2 != base_parity:\n      return nums[i]", "def find_outlier(integers):\n    assert len(integers) >= 3\n\n    bit = ((integers[0] & 1) +\n           (integers[1] & 1) +\n           (integers[2] & 1)) >> 1\n\n    for n in integers:\n        if (n & 1) ^ bit:\n            return n\n\n    assert False\n", "def find_outlier(integers):\n    assert len(integers) >= 3\n\n    bit = integers[0] & 1\n\n    if integers[1] & 1 != bit:\n        return integers[integers[2] & 1 == bit]\n\n    for n in integers:\n        if n & 1 != bit:\n            return n\n\n    assert False\n", "def find_outlier(integers):\n    evens = [];\n    odds = [];\n    for each in integers:\n        if each%2==0:\n            evens.append(each)\n        else:\n            odds.append(each);\n        if len(evens)>1 and len(odds)==1:\n            return odds[0];\n        elif len(odds)>1 and len(evens)==1:\n            return evens[0];", "def find_outlier(integers):\n    determinant = [x for x in integers[:3] if x % 2 == 0]\n    if len(determinant) > 1:\n        # most are even, find the first odd\n        mod = 1\n    else:\n        # most are odd, find the first even\n        mod = 0\n    for i in integers:\n        if i % 2 == mod:\n            return i", "def find_outlier(num):\n    odd = 0 if sum(n % 2 for n in num[:3]) > 1 else 1\n    return next(n for n in num if n % 2 == odd)\n"]