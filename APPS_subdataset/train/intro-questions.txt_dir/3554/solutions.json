["def get_score(dice):\n    if all(i in dice for i in range(1, 7)):\n        return 1000\n    if len(dice) == 6 and all(dice.count(d) == 2 for d in set(dice)):\n        return 750\n    score = 0\n    score += sum((dice.count(d)==n) * d * (n-2) * (1000 if d==1 else 100) for d in set(dice) for n in range(3, 7))\n    score += 100 * dice.count(1) if dice.count(1) < 3 else 0\n    score += 50 * dice.count(5) if dice.count(5) < 3 else 0\n    return score if score else 'Zonk'", "from collections import Counter\nval = {1: [0, 100, 200, 1000, 2000, 3000, 4000],\n       2: [0, 0  , 0  , 200 , 400 , 600 , 800 ],\n       3: [0, 0  , 0  , 300 , 600 , 900 , 1200],\n       4: [0, 0  , 0  , 400 , 800 , 1200, 1600],\n       5: [0, 50 , 100, 500 , 1000, 1500, 2000],\n       6: [0, 0  , 0  , 600 , 1200, 1800, 2400]}\n\ndef get_score(dice):\n    C = Counter(dice)\n    if len(C) == 6: return 1000\n    if len(C) == 3 and all(map((2).__eq__, C.values())): return 750\n    return sum(val[k][v] for k,v in C.items()) or \"Zonk\"", "from collections import Counter\n\nPTS_SUB_FUNCS = [lambda c:        (  1000,                             c,                           len(c) == 6),\n                 lambda c:        (  750,                              c,                           set(c.values()) == {2} and len(c) == 3),\n                 lambda c: next(( ( (100*n + 900*(n==1)) * (c[n]-2),   Counter([n]*c[n]),           True ) for n in range(1,7) if c[n] >= 3), (0, 0, False)),\n                 lambda c:        ( 100 * c[1] + 50 * c[5],            Counter([1]*c[1]+[5]*c[5]),  bool(set(c.keys()) & {1,5}) ) ]\n\ndef get_score(dice):\n    s, c = 0, Counter(dice)\n    for f in PTS_SUB_FUNCS:\n        while True:\n            pts, subtractC, isThere = f(c)\n            if isThere:  c, s = c-subtractC, s+pts\n            else:        break\n    return s or \"Zonk\"", "def get_score(dice): \n    counter = [dice.count(n + 1) for n in range(6)]\n    if counter.count(1) == 6:\n        return 1000\n    if counter.count(2) == 3:\n        return 750\n    factors = [10, 2, 3, 4, 5, 6]\n    result = 0\n    for i in range(6):\n        if counter[i] >= 3:\n            result += (counter[i] - 2) * factors[i] * 100\n            counter[i] = 0\n    result += counter[0] * factors[0] * 10\n    result += counter[4] * factors[4] * 10\n    return result or \"Zonk\"", "#List Comprehensions is so powerful\nfrom itertools import groupby\ndef get_score(a): \n    s = 0\n    if set(a)==set([1,2,3,4,5,6]): s=1000  #Straight\n    else:\n        if len(set([i*10 if i==1 else i for i in a if a.count(i)==2]))==3: s=750 #Three pairs\n        else:\n            s+=sum(sum(set([i*10 if i==1 else i for i in a if a.count(i)==k]))*100*(k-2) for k in (3,4,5,6)) #Three-four-five-six\n            s+=sum((i*10 if i==1 else i)*a.count(i) for i in (1,5) if a.count(i) in (1,2))*10 # Every 1 and 5\n    return s if s!=0 else \"Zonk\"", "def get_score(dice):\n    freq = {e:dice.count(e) for e in set(dice)}\n    score = 0\n\n    if all(e in freq for e in range(1,7)):\n        return 1000\n\n    if len(freq) is 3 and all(e is 2 for e in freq.values()):\n        return 750\n\n    for d in range(1, 7):\n        if d in freq and freq[d] is 6:\n            return d * 4000 if d is 1 else d * 400\n        elif d in freq and freq[d] is 5:\n            score += d * 3000 if d is 1 else d * 300\n            del freq[d]\n        elif d in freq and freq[d] is 4:\n            score += d * 2000 if d is 1 else d * 200\n            del freq[d]\n        elif d in freq and freq[d] is 3:\n            score += d * 1000 if d is 1 else d * 100\n            del freq[d]\n\n    score += freq[1] * 100 if 1 in freq else 0\n    score += freq[5] * 50  if 5 in freq else 0\n\n    return \"Zonk\" if score is 0 else score"]