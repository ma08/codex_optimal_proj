["from itertools import accumulate\n\nCHARACTERS = {\n    \"warrior\": (4, [11, 8, 12, 13, 13, 11, 9, 9]),\n    \"knight\": (5, [14, 10, 10, 11, 11, 10, 9, 11]),\n    \"wanderer\": (3, [10, 11, 10, 10, 14, 12, 11, 8]),\n    \"thief\": (5, [9, 11, 9, 9, 15, 10, 12, 11]),\n    \"bandit\": (4, [12, 8, 14, 14, 9, 11, 8, 10]),\n    \"hunter\": (4, [11, 9, 11, 12, 14, 11, 9, 9]),\n    \"sorcerer\": (3, [8, 15, 8, 9, 11, 8, 15, 8]),\n    \"pyromancer\": (1, [10, 12, 11, 12, 9, 12, 10, 8]),\n    \"cleric\": (2, [11, 11, 9, 12, 8, 11, 8, 14]),\n    \"deprived\": (6, [11, 11, 11, 11, 11, 11, 11, 11]),\n}\nREQUIRED_SOULS = list(\n    accumulate(\n        [0, 0, 673, 690, 707, 724, 741, 758, 775, 793, 811, 829]\n        + [\n            round(pow(x, 3) * 0.02 + pow(x, 2) * 3.06 + 105.6 * x - 895)\n            for x in range(12, 1000)\n        ]\n    )\n)\n\ndef souls(character, build):\n    starting_level, stats = CHARACTERS[character]\n    delta = sum(b - s for b, s in zip(build, stats))\n    level = starting_level + delta\n    souls = REQUIRED_SOULS[level] - REQUIRED_SOULS[starting_level]\n    return f\"Starting as a {character}, level {level} will require {souls} souls.\"", "D = {\"warrior\":(4, 86), \"knight\":(5, 86), \"wanderer\":(3, 86), \"thief\":(5, 86), \"bandit\":(4, 86),\n     \"hunter\":(4, 86), \"sorcerer\":(3, 82), \"pyromancer\":(1, 84), \"cleric\":(2, 84), \"deprived\":(6, 88)}\n\ncount = lambda x: round(pow(x, 3) * 0.02 + pow(x, 2) * 3.06 + 105.6 * x - 895)\n\nmemo = [0, 0, 673, 1363, 2070, 2794, 3535, 4293, 5068, 5861, 6672, 7501]\ndef need(level):\n    while len(memo) <= level: memo.append(memo[-1] + count(len(memo)))\n    return memo[level]\n\ndef souls(character, build):\n    level, stats = D[character]\n    goal = level + sum(build) - stats\n    return f\"Starting as a {character}, level {goal} will require {need(goal) - need(level)} souls.\"", "CLASSES = {\"warrior\": {\"stats\": [11, 8, 12, 13, 13, 11, 9, 9], \"lvl\": 4},\n           \"knight\": {\"stats\": [14, 10, 10, 11, 11, 10, 9, 11], \"lvl\": 5},\n           \"wanderer\": {\"stats\": [10, 11, 10, 10, 14, 12, 11, 8], \"lvl\": 3},\n           \"thief\": {\"stats\": [9, 11, 9, 9, 15, 10, 12, 11], \"lvl\": 5},\n           \"bandit\": {\"stats\": [12, 8, 14, 14, 9, 11, 8, 10], \"lvl\": 4},\n           \"hunter\": {\"stats\": [11, 9, 11, 12, 14, 11, 9, 9], \"lvl\": 4},\n           \"sorcerer\": {\"stats\": [8, 15, 8, 9, 11, 8, 15, 8], \"lvl\": 3},\n           \"pyromancer\": {\"stats\": [10, 12, 11, 12, 9, 12, 10, 8], \"lvl\": 1},\n           \"cleric\": {\"stats\": [11, 11, 9, 12, 8, 11, 8, 14], \"lvl\": 2},\n           \"deprived\": {\"stats\": [11, 11, 11, 11, 11, 11, 11, 11], \"lvl\": 6}}\n\ndef souls(character, build):\n    required_lvl = sum(build) - sum(CLASSES[character][\"stats\"]) + CLASSES[character][\"lvl\"]\n    souls_needed = sum([calc_exp(lvl) for lvl in range(CLASSES[character][\"lvl\"] + 1, required_lvl + 1)])\n    return f\"Starting as a {character}, level {required_lvl} will require {souls_needed} souls.\"\n\ndef calc_exp(lvl):\n    return 673 + 17 * (lvl - 2) if lvl <= 8 else 775 + 18 * (lvl - 8) if lvl <= 11 else round(pow(lvl, 3) * 0.02 + pow(lvl, 2) * 3.06 + 105.6 * lvl - 895)", "BASE = {\n    \"warrior\": (4, 86), \"knight\": (5, 86), \"wanderer\": (3, 86), \"thief\": (5, 86), \"bandit\": (4, 86),\n    \"hunter\": (4, 86), \"sorcerer\": (3, 82), \"pyromancer\": (1, 84), \"cleric\": (2, 84), \"deprived\": (6, 88)\n}\n\ndef souls(s, a):\n    n, b = BASE[s]\n    m = sum(a) - b\n    r = sum([673, 690, 707, 724, 741, 758, 775, 793, 811, 829][n-1:n+m-1]) +\\\n        sum(round(i**3 * 0.02 + i**2 * 3.06 + 105.6 * i - 895) for i in range(12, n + m + 1))\n    return f\"Starting as a {s}, level {n + m} will require {r} souls.\"", "def f(x):\n    return round(.02 * x ** 3 + 3.06 * x ** 2 + 105.6 * x - 895)\n\ndef souls(character, build):\n    \n    final_level = sum(build) - 83 + sum([1 if n in character else 0 for n in 'hissss'])\n    start_level = 6 - sum([1 if n in character else 0 for n in \"awful cccn\"])\n    souls_needed = sum([\n        17 * l + 16 * 41 if l < 8 else 18 * l + 11 * 59 if l < 12 else f(l + 1) for l in range(start_level, final_level)\n    ])\n    \n    return \"Starting as a \" + character + \", level \" + str(final_level) + \" will require \" + str(souls_needed) + \" souls.\"", "classes={\n    'warrior':(4,[11, 8, 12, 13, 13, 11, 9, 9]),\n    'knight':(5,[14, 10, 10, 11, 11, 10, 9, 11]),\n    'wanderer':(3,[10, 11, 10, 10, 14, 12, 11, 8]),\n    'thief':(5,[9, 11, 9, 9, 15, 10, 12, 11]),\n    'bandit':(4,[12, 8, 14, 14, 9, 11, 8, 10]),\n    'hunter':(4,[11, 9, 11, 12, 14, 11, 9, 9]),\n    'sorcerer':(3,[8, 15, 8, 9, 11, 8, 15, 8]),\n    'pyromancer':(1,[10, 12, 11, 12, 9, 12, 10, 8]),\n    'cleric':(2,[11, 11, 9, 12, 8, 11, 8, 14]),\n    'deprived':(6,[11, 11, 11, 11, 11, 11, 11, 11])\n}\nlevelup_souls=[0,0,673,690,707,724,741,758,775,793,811,829]\n\ndef souls(character, build):\n    level,stats=classes[character]\n    up_level=sum(build)-sum(stats)+level\n    s=0\n    for l in range(level+1,up_level+1):\n        if l<12:\n            s+=levelup_souls[l]\n        else:\n            s+=round(pow(l,3)*0.02+pow(l,2)*3.06+105.6*l-895)\n    return 'Starting as a {}, level {} will require {} souls.'.format(character,up_level,s)", "d = {\n    'warrior':[4,[11, 8, 12, 13, 13, 11, 9, 9]], \n    'knight':[5,[14, 10, 10, 11, 11, 10, 9, 11]],\n    'wanderer':[3,[10, 11, 10, 10, 14, 12, 11, 8]],\n    'thief':[5,[9, 11, 9, 9, 15, 10, 12, 11]],\n    'bandit':[4,[12, 8, 14, 14, 9, 11, 8, 10]],\n    'hunter':[4,[11, 9, 11, 12, 14, 11, 9, 9]],\n    'sorcerer':[3,[8, 15, 8, 9, 11, 8, 15, 8]],\n    'pyromancer':[1,[10, 12, 11, 12, 9, 12, 10, 8]],\n    'cleric':[2,[11, 11, 9, 12, 8, 11, 8, 14]],\n    'deprived':[6,[11, 11, 11, 11, 11, 11, 11, 11]]\n    }\n\ndef souls(character, build):\n    l = d[character][0]\n    p = sum(d[character][1])\n    ap = sum(build)\n    al = l + ap - p\n    s = 0\n    for i in range(l+1,al+1):\n        if i<=8:\n            s = s + 673 + 17*(i-2)\n        elif i<=11:\n            s = s + 775 + 18*(i-8)\n        else:\n            s = s + round(pow(i, 3) * 0.02 + pow(i, 2) * 3.06 + 105.6 * (i) - 895)\n    return \"Starting as a {}, level {} will require {} souls.\".format(character,al,s)\n        \n        \n        \n", "def last_level():\n    x = 12\n    formul_level = lambda x: round(pow(x, 3) * 0.02 + pow(x, 2) * 3.06 + 105.6 * x - 895)\n    list_level = [0, 673, 690, 707, 724, 741, 758, 775, 793, 811, 829]\n    for i in list_level:\n        yield i\n    while True:\n        yield formul_level(x)\n        x += 1\n        \n        \ndef souls(character, build):\n    base_class = {\n     'warrior'    : (4, [11, 8, 12, 13, 13, 11, 9, 9]),\n     'knight'     : (5, [14, 10, 10, 11, 11, 10, 9, 11]),\n     'wanderer'   : (3, [10, 11, 10, 10, 14, 12, 11, 8]),\n     'thief'      : (5, [9, 11, 9, 9, 15, 10, 12, 11]),\n     'bandit'     : (4, [12, 8, 14, 14, 9, 11, 8, 10]),\n     'hunter'     : (4, [11, 9, 11, 12, 14, 11, 9, 9]),\n     'sorcerer'   : (3, [8, 15, 8, 9, 11, 8, 15, 8]),\n     'pyromancer' : (1, [10, 12, 11, 12, 9, 12, 10, 8]),\n     'cleric'     : (2, [11, 11, 9, 12, 8, 11, 8, 14]),\n     'deprived'   : (6, [11, 11, 11, 11, 11, 11, 11, 11])\n    }\n    souls_level = last_level()\n    paramets = base_class[character]\n    souls = filter(lambda i: i > 0, (b - s for s,b in zip(paramets[1], build)))\n    level = sum(souls) + paramets[0] \n    souls = sum([next(souls_level) for i in range(level)][paramets[0]:]) \n    return \"Starting as a {0}, level {1} will require {2} souls.\".format(character, level, souls)", "def souls(character, build):\n    \n    DICT={'pyromancer':(1,[10, 12, 11, 12, 9, 12, 10, 8]),\n          'warrior':(4,[11, 8, 12, 13, 13, 11, 9, 9]),\n          'knight':(5,[14, 10, 10, 11, 11, 10, 9, 11]),\n          'wanderer':(3,[10, 11, 10, 10, 14, 12, 11, 8]),\n          'thief':(5,[9, 11, 9, 9, 15, 10, 12, 11]),\n          'bandit':(4,[12, 8, 14, 14, 9, 11, 8, 10]),\n          'hunter':(4,[11, 9, 11, 12, 14, 11, 9, 9]),\n          'sorcerer':(3,[8, 15, 8, 9, 11, 8, 15, 8]),\n          'cleric':(2,[11, 11, 9, 12, 8, 11, 8, 14]),\n          'deprived':(6,[11, 11, 11, 11, 11, 11, 11, 11])\n          }\n    \n    \n    list_upgrade_souls=[673, 690, 707, 724, 741, 758, 775, 793, 811,829]\n    levels_after_11 = [round(pow(x+12, 3) * 0.02 + pow(x+12, 2) * 3.06 + 105.6 * (x+12) - 895) for x in range(5000)]\n    list_upgrade_souls.extend(levels_after_11)\n    cnt_souls=0\n    \n    actual_powers=DICT[character][1]\n    actual_level=DICT[character][0]\n    desired_level=sum([x1 - x2 for (x1, x2) in zip(build, actual_powers)]) + actual_level\n    for i in range(actual_level-1,desired_level-1):\n        cnt_souls+=list_upgrade_souls[i]\n\n    return 'Starting as a {}, level {} will require {} souls.'.format(character,desired_level,cnt_souls)\n    \n", "classes = {\n    \"warrior\":     {\"start\": 4,  \"stats\": [11, 8, 12, 13, 13, 11, 9, 9]},\n    \"knight\":      {\"start\": 5,  \"stats\": [14, 10, 10, 11, 11, 10, 9, 11]},\n    \"wanderer\":    {\"start\": 3,  \"stats\": [10, 11, 10, 10, 14, 12, 11, 8]},\n    \"thief\":       {\"start\": 5,  \"stats\": [9, 11, 9, 9, 15, 10, 12, 11]},\n    \"bandit\":      {\"start\": 4,  \"stats\": [12, 8, 14, 14, 9, 11, 8, 10]},\n    \"hunter\":      {\"start\": 4,  \"stats\": [11, 9, 11, 12, 14, 11, 9, 9]},\n    \"sorcerer\":    {\"start\": 3,  \"stats\": [8, 15, 8, 9, 11, 8, 15, 8]},\n    \"pyromancer\":  {\"start\": 1,  \"stats\": [10, 12, 11, 12, 9, 12, 10, 8]},\n    \"cleric\":      {\"start\": 2,  \"stats\": [11, 11, 9, 12, 8, 11, 8, 14]},\n    \"deprived\":    {\"start\": 6,  \"stats\": [11, 11, 11, 11, 11, 11, 11, 11]},\n}\n\nrequirements = [0, 673, 690, 707, 724, 741, 758, 775, 793, 811, 829]\n\ndef souls(character, build):\n    diff = sum(b - s for b, s in zip(build, classes[character][\"stats\"]))\n    level = classes[character][\"start\"] + diff\n    required = sum(x for x in requirements[classes[character][\"start\"]:level])\n    required += sum(round(0.02*x**3+3.06*x**2+105.6*x-895) for x in range(12, level+1))\n    return \"Starting as a {}, level {} will require {} souls.\".format(character, level, required)"]