["def find_lowest_int(k1):\n    k2, n = k1 + 1, 1\n\n    def digits(n):\n        return sorted(str(n))\n    \n    while digits(n*k1) != digits(n*k2):\n        n += 1\n    \n    return n", "from itertools import count as c\n\ndef find_lowest_int(k):\n    return next((n for n in c(1) if sorted(str(n*k))== sorted(str(n*(k+1)))))\n\n", "def find_lowest_int(k):\n    return next(n for n in range(9, 9999999, 9) if sorted(str(n * k)) == sorted(str(n * (k+1))))", "def find_lowest_int(k):\n    l, n = k + 1, 9\n    while digits(k * n) != digits(l * n):\n        n += 9\n    return n\n\ndef digits(n):\n    return sorted(str(n))    ", "def find_lowest_int(number):\n    multiplier = 1\n    while sorted(str(number * multiplier)) != sorted(str((number + 1) * multiplier)):\n        multiplier += 1\n    return multiplier", "from itertools import count\n\ndef find_lowest_int(k):\n    return next(n for n in count(1) if sorted(str(n*k)) == sorted(str(n*(k+1))))", "from collections import Counter\n\n# idea: the difference between k*n and (k+1)*n is n\n# for them to have the same digits they must have the same digit sum\n# so n must have a digit sum of 0 (mod 9) - n must be divisible by 9\ndef find_lowest_int(k):\n    n = 9\n    while True:\n        if Counter(str(k*n)) == Counter(str((k+1)*n)):\n            return n\n        n += 9\n", "def find_lowest_int(k):\n    n=2\n    while True:\n        if sorted(str(n*k))==sorted(str(n*(k+1))):return n\n        n+=1"]