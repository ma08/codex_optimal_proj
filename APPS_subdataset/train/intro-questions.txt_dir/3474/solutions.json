["def pattern(n):\n    return '\\n'.join(['1'] + ['1' + '*' * (i-1) + str(i) for i in range(2, n+1)])\n", "def pattern(n):\n    s = ''\n    for i in range(n):\n        if i == 0:\n            s += '1\\n'\n        else:\n            s += '1{}{}\\n'.format('*' * i, i + 1)\n    \n    return s.rstrip('\\n')\n", "def pattern(n):\n    return \"\\n\".join(\"{}{}{}\".format(1 if i else \"\", \"*\" * i, i+1) for i in range(n))\n", "def pattern(n):\n    if n == 1:\n        return \"1\"\n    else:\n        return '1\\n'+''.join([str(1)+'*'*(i-1)+str(i)+'\\n' for i in range(2, n+1)])[:-1]", "def pattern(n):\n    return \"\\n\".join(f\"1{'*'*i}{i+1}\" if i else \"1\" for i in range(n))", "def pattern(n):\n    return \"1\\n\" + \"\\n\".join(f\"1{'*'*(i-1)}{i}\" for i in range(2,n+1))\n", "def pattern(n):\n    return '\\n'.join('1{}{}'.format('*'*i, '' if i==0 else i+1) for i in range(n))", "def pattern(n):\n    return '1\\n'+'\\n'.join(['1'+'*'*i+str(i+1) for i in range(1,n)] )\n", "def pattern(n):\n    return '\\n'.join(['1'+\"*\"*i+str(i+1)*(i!=0) for i in range(n)])", "def pattern(n):\n    if n == 1:\n        return \"1\"\n    elif n > 1:\n        return pattern(n-1) + \"\\n1{}{}\".format(\"*\" * (n-1), n)\n"]