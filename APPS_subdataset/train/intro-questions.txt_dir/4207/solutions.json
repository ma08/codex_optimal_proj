["def sum_cubes(n):\n    return sum(i**3 for i in range(0,n+1))", "def sum_cubes(n):\n    return (n*(n+1)/2)**2", "def sum_cubes(n):\n    return sum(x ** 3 for x in range(n+1))", "def sum_cubes(n):\n    return (n*(n+1)//2)**2", "def sum_cubes(n):\n    return sum([i**3 for i in range(1,n+1)])", "def sum_cubes(n):\n    return sum( i**3 for i in range(n+1) )", "def sum_cubes(n):\n    s=0\n    i=0\n    while i<=n:\n        s=i**3+s\n        i=i+1\n    return s# your code here", "def sum_cubes(n):\n    result = 0\n    for i in range(n+1):\n        result = result + i**3\n        \n    return result", "def sum_cubes(n):\n    return (n*n*(n+1)*(n+1))/4", "sum_cubes = lambda n: sum([i ** 3 for i in range(n + 1)])", "def sum_cubes(n):\n    s = 1\n    f = n\n    v = 0\n    while s != f + 1:\n       v += s **3\n       s += 1\n    return v", "def sum_cubes(n):\n    return sum(v ** 3 for v in range(n + 1))", "sum_cubes = lambda n: sum( i**3 for i in range(1,n+1) )", "import decimal\ndef sum_cubes(n):\n    n = decimal.Decimal(n)\n    return n**2*(n+1)**2/4", "def sum_cubes(n):\n    res = 0\n    for i in range(1, n + 1):\n        res += i ** 3\n    return res\n", "def sum_cubes(n):\n    # your code here\n    return sum([x**3 for x in range(1,n+1)])", "def sum_cubes(n):\n    return sum(x * x * x for x in range(n + 1))", "def sum_cubes(n):\n    return sum([x ** 3 for x in range(n + 1)])", "def sum_cubes(n):\n    return sum(i**3 for i in range(1, n+1))", "def sum_cubes(n):\n    result = 0\n    for cube in range(n+1):\n        result = result + cube * cube * cube\n    return result", "def sum_cubes(n):\n    my_array = [n ** 3 for n in range(1, n+1)]\n    return sum(my_array)", "from math import pow\ndef sum_cubes(n):\n    sum=0\n    for i in range(1,n+1):\n        sum+=i**3\n    return sum", "def sum_cubes(n):\n    \n    sol = 0\n    \n    for i in range(n+1):\n        \n        sol += i**3\n        \n    return sol", "def sum_cubes(n):\n    i = 1\n    sums = 0\n    while i <= n:\n        sums = sums + i ** 3\n        i += 1\n    return sums ", "def sum_cubes(n):\n    return sum(c**3 for c in range(1,n+1))", "def sum_cubes(n):\n    return sum(cubed**3 for cubed in range(1, n+1))\n    # your code here\n", "def sum_cubes(n):\n    sum = 0\n    for i in range(0,n+1):\n        sum = sum+(pow(i,3))\n    return sum", "def sum_cubes(n):\n    cubes = [i**3 for i in range(1,n+1)]\n    return sum(cubes)", "def sum_cubes(n):\n    return sum(list([x**3 for x in range(n+1)]))", "def sum_cubes(n):\n    s = 0\n    for i in range(n+1):\n        s += pow(i, 3)\n    return s", "def sum_cubes(n):\n    tot = 0\n    for x in range(1,n+1):\n        tot += x **3\n    return tot", "def sum_cubes(n):\n    # your code here\n    sum_cube=0\n    for e in range(0,n+1):\n             sum_cube+= e**3\n    return sum_cube", "# Formula taken from https://mathschallenge.net/library/number/sum_of_cubes\n\ndef sum_cubes(n):\n    return (n * (n + 1) // 2) ** 2", "def sum_cubes(n):\n    return sum(a**3 for a in range(1,n+1))", "def sum_cubes(n):\n    total = 0\n    for x in range(n+1):\n        total += x**3\n    return total", "def sum_cubes(n):\n    ans = 0\n    while n > 0:\n        ans += pow(n, 3)\n        n -= 1\n    return ans", "def sum_cubes(n):\n    x = [i ** 3 for i in range(1, n+1)]\n    return sum(x)", "def sum_cubes(n: int) -> int:\n    return (n * (n + 1) // 2) ** 2\n", "def sum_cubes(n):\n    return int((n*(n+1)//2)**2)", "def sum_cubes(n):\n    total = 0\n    for i in range(1, n + 1):\n        i = i ** 3\n        total += i\n    return total\n", "def sum_cubes(n):\n    sum=0\n    for num in range(0,n+1):\n      num=num*num*num\n      sum=sum+num\n    return sum   ", "def sum_cubes(n):\n    c = 0\n    for i in range(1, n+1):\n        c = c + i**3\n    return c", "def sum_cubes(n: int):\n    return sum(i ** 3 for i in range(n+1))", "def sum_cubes(n):\n    new = 0\n    for num in range(1, n+1):\n        new += num ** 3\n    return new\n", "def sum_cubes(n):\n    return sum((i+1)**3 for i in range(n)) # ahuel, da", "def sum_cubes(n):\n    summ = 0\n    for i in range(n):\n        summ += (i+1)**3\n    return summ", "def sum_cubes(n):\n    a=0\n    for x in range(1,n+1):\n        a=(x**3) + a\n    return a", "def sum_cubes(n):\n    \n    arr = []\n    for i in range(1, n+1):\n        arr.append(i)\n    x = [i**3 for i in arr]\n    return sum(x)", "def sum_cubes(n):\n  sum = 0\n  for n in range(1,n + 1):\n    sum  = sum + n ** 3\n  return sum", "def sum_cubes(n):\n    result = [0]\n    if n == 1:\n        return 1\n    while n > 0:\n        result.append(n**3)\n        n -= 1\n    return sum(result)", "def sum_cubes(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i*i\n    return sum\n    \n    n = 6\n    print((sum_cubes(n)))\n\n    # your code here\n", "def sum_cubes(n):\n    return sum(map(lambda a: a**3, range(1,n+1)))", "def sum_cubes(n):\n    cubes = []\n    for num in range(n+1):\n        cubes.append(num ** 3)\n    return sum(cubes)\n        \n    # your code here\n", "def sum_cubes(n):\n    total = 0\n    for a in range(1, n + 1):\n        total += (a**3)\n    return total", "def sum_cubes(n):\n    return sum([(i**3) for i in range(1,n+1,1)])", "def sum_cubes(n):\n    answer = 0\n    for i in range(n+1):\n        answer += i ** 3\n    return answer", "def sum_cubes(n):\n    return sum([int(x)**3 for x in range(1,n+1)])", "def sum_cubes(n):\n    s = [i ** 3 for i in range(1, n+1)]\n    return sum(s)", "def sum_cubes(n):\n    return sum([x * x * x for x in range(n + 1)])", "def sum_cubes(n):\n    i=1\n    x=0\n    while i < n+1:\n        x = x + i**3\n        i+=1\n    \n    return x", "import math\ndef sum_cubes(n):\n    new = []\n    for i in range(1,n+1):\n        x = pow(i,3)\n        new.append(x)\n        i = i + 1\n    return sum(new)\n\n\n\n", "def sum_cubes(n):\n    sum = 0 \n    for i in range(1,n+1):\n        sum += i*i*i\n    \n# main\n    return sum\n\n", "def sum_cubes(n):\n    # your code here\n    return ( sum(x*x*x for x in range(n+1)))\n\nn=3\nsum_cubes(n)\n", "def sum_cubes(n):\n    # your cod\n    return sum([i**3 for i in range(n+1)])", "def sum_cubes(n):\n    x= 1\n    total = 0\n    while x<=n:\n        total+= x**3\n        x+=1\n    return total", "def sum_cubes(n):\n    return sum([number ** 3 for number in range(1,n+1)])", "def sum_cubes(n):\n    suma = 0\n    for i in range(1, n+1):\n        suma += i**3\n\n    return suma\n\nprint((sum_cubes(2)))\n", "def sum_cubes(n):\n    i=1\n    m=0\n    while i<=n:\n        cube=i**3\n        m=m+cube\n        i=i+1\n    return m\n", "def sum_cubes(n):\n    return sum([item**3 for item in range(1, n + 1, 1)])", "def sum_cubes(n):\n    count = 0\n    for i in range(n+1):\n        count += (i ** 3)\n    return count", "def sum_cubes(n):\n    cubes, numbers = [], [n]\n\n    for i in range(0, n):\n        numbers.append(int(i))\n\n    for num in numbers:\n        cubes.append(int(num*num*num))\n    return sum(cubes)", "def sum_cubes(n):\n    return sum([a**3 for a in range(n+1)])", "def sum_cubes(n):\n    counter=0\n    saver=0\n    while counter<=n:\n        saver=counter**3+saver\n        counter+=1\n        \n    return saver\n", "def sum_cubes(n):\n    values = range(1, n + 1)\n    s = 0\n    for value in values:\n        cubed = value ** 3\n        s += cubed\n    return s", "def sum_cubes(n):\n    if n==1:\n        return 1\n    LV=[]\n    for i in range(n+1):\n        res=i**3\n        LV.append(res)\n    return sum(LV)", "def sum_cubes(n):\n    # your code here\n    y = n + 1\n    x = list(range(0,y))\n    z = []\n    for i in x:\n        a = i ** 3\n        z.append(a)\n    return sum(z)", "def sum_cubes(n):\n    res = 0\n    if n > 0:\n        for x in range(1, n + 1):\n            res += x ** 3\n    return res", "def sum_cubes(n):\n    a=0\n    for i in range(n+1):\n        a=i*i*i+a\n        i+=1\n    return a", "def sum_cubes(n):\n    result = 0\n    for i in range(0, n + 1):\n        cube = i ** 3\n        result += cube\n    return result\n    # your code here\n", "def sum_cubes(n):\n        return (n*(n+1)*n*(n+1))/4; ", "def sum_cubes(n):\n\n# There must be a shorter way!\n\n    step1 = list(range(n))\n    step2 = [x + 1 for x in step1]\n        \n    return sum([x**3 for x in step2])\n        \n    \n    \n", "def sum_cubes(n):\n    g = 0\n    for i in range(n + 1):\n        i **= 3\n        g += i\n    return g\n", "def sum_cubes(n):\n    ans = 0\n    for x in range(1,n+1):\n        ans += x ** 3\n    return ans", "def sum_cubes(n):\n    cubes = 0\n    for i in range(1, n+1):\n        cubes += i*i*i \n    return cubes\n", "def sum_cubes(n):\n  sum = 0\n  for number in range(1,n + 1):\n    cube = number ** 3\n    sum += cube\n  return sum", "def sum_cubes(n):\n    return sum(nb ** 3 for nb in range(1, n + 1))", "def sum_cubes(n):\n    numlist = []\n    while n >= 0:  \n        numlist.append(n)\n        n = n -1\n    return sum(numlist)**2\n    # your code here\n", "def sum_cubes(n):\n    # your code here\n    suma=0\n    for i in range(n):\n           suma=suma+(i+1)**3\n    return suma", "def sum_cubes(n):\n    exponentiated = 0\n    for count in range(1, n):\n        exponentiated += count ** 3\n    return exponentiated + n ** 3", "def sum_cubes(n):\n    x=[num**3 for num in range(n+1)]\n    return(sum(x))", "from math import *\ndef sum_cubes(n):\n    total = 0\n    for i in range(n+1):\n        total += int(pow(i,3))\n    return total", "def sum_cubes(n):\n    cubed = 0\n    for i in range(n+1):\n        cubed+=i*i*i\n        i+=1\n    return cubed\n", "def sum_cubes(n):\n    sums = 0\n    for num in range(0, n+1):\n        sums+= (num **3)\n    return sums", "def sum_cubes(n):\n    sums = []\n    for item in range(n):\n        item += 1\n        cube = pow(item,3)\n        sums.append(cube)\n    return sum(sums)", "def sum_cubes(n):\n    res = 1\n    \n    while n > 1:\n        res += (n*n*n)\n        n   -= 1\n    \n    return res", "def sum_cubes(n):\n    cubes = map(lambda x: x ** 3, range(1, n + 1))    \n    return sum(cubes)", "def sum_cubes(a):\n    return sum([k**3 for k in range(1,a+1)])", "def sum_cubes(a):\n    summ=0\n    for k in range(1,a+1):\n        summ+=k**3\n    return summ", "def sum_cubes(n):\n    return (n**2 + n)**2 // 4", "def sum_cubes(n): \n    sum = 0\n    for i in range(n +1 ):\n        sum += i\n    return sum * sum"]