["import math\n\ndef race(v1, v2, g):\n    if v2 < v1: return None\n    seconds = 0.1\n    while (v1/3600) * seconds + g >= (v2/3600) * seconds:\n        seconds += 0.05\n    hours = seconds / 3600\n    hoursRest = seconds % 3600\n    minutes = hoursRest / 60\n    seconds = hoursRest % 60\n    return [math.floor(hours), math.floor(minutes), math.floor(seconds)]\n", "from datetime import datetime, timedelta\n\ndef race(v1, v2, g):\n    if v1 >= v2:\n        return None\n    else:\n        sec = timedelta(seconds=int((g*3600/(v2-v1))))\n        d = datetime(1,1,1) + sec\n        \n        return [d.hour, d.minute, d.second]", "def race(v1, v2, g):\n    if v2 <= v1:\n        return None\n    total = g / (v2 - v1)\n    return [int(total), int(total * 60) % 60, int(total * 3600) % 60]", "def race(v1, v2, g):\n    if v1 >= v2: return None\n    t = float(g)/(v2-v1)*3600\n    mn, s = divmod(t, 60)\n    h, mn = divmod(mn, 60)\n    return [int(h), int(mn), int(s)]", "def race(v1, v2, g):\n    if v1 < v2:\n        sec = g * 60 * 60 // (v2 - v1)\n        return [sec // 3600, sec // 60 % 60, sec % 60]", "def race(v1, v2, g):\n    if v1>=v2:\n        return None\n    t = g / (v2 - v1) * 60 * 60\n    return [int(t // 3600), \n            int((t // 60) % 60), \n            int(t % 60)]", "def race(v1, v2, g):\n    if v1 < v2:\n        a = g * 3600 // (v2 - v1)\n        return [a // 3600, a // 60 % 60, a % 60]"]