["def count_inversions(array):\n    inv_count = 0\n    for i in range(len(array)):\n        for j in range(i, len(array)):\n            if array[i] > array[j]:\n                inv_count += 1\n    return inv_count", "def count_inversions(array):\n    return sum(x > y for i,x in enumerate(array) for y in array[i+1:])", "count_inversions=lambda arr:sum(sum(k>j for k in arr[:i]) for i,j in enumerate(arr))", "def count_inversions(array):\n    n = len(array)\n    return sum([1 for i in range(n) for j in range(n) if (i < j and array[i] > array[j])])", "def count_inversions(lst):\n    return sum(1 for i, m in enumerate(lst, 1) for n in lst[i:] if n < m)\n", "from itertools import islice\n\ndef count_inversions(array):\n    return sum(\n        sum(x > y for y in islice(array, i+1, None))\n        for i, x in enumerate(array)\n    )", "def count_inversions(array):\n    return sum([1 for i in range(len(array)) for j in range(i+1,len(array)) if array[i] > array[j]])", "def count_inversions(collection):\n    lenghts = len(collection)\n    swapped = False\n    swapped_counter =0\n    for i in range(lenghts - 1):\n        for j in range(lenghts - i - 1):\n            if collection[j] > collection[j + 1]:\n                collection[j], collection[j + 1] = collection[j + 1], collection[j]\n                swapped = True\n                swapped_counter +=1\n        if not swapped:\n            break\n    return swapped_counter", "fun1 = lambda a1,a2:sum([1 if a1>i else 0 for i in a2])\ndef count_inversions(array):\n    s = 0\n    for i in range(len(array)):\n        if i != len(array)-1:\n            s += fun1(array[i],array[i+1:])\n    return s", "def count_inversions(array):\n    inversions = 0\n    \n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            if array[i] > array[j]:\n                inversions += 1\n    return inversions"]