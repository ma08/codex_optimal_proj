["def pattern(n):\n    top = [(str(i % 10) * n).center(n * 3 - 2) for i in range(1, n)]\n    left = ''.join(str(i % 10) for i in range(1, n))\n    middle = left + str(n % 10) * n + left[::-1]\n    return '\\n'.join(top + [middle] * n + top[::-1])\n", "def f(n):\n    w = 3*n - 2\n    for i in range(1, n):\n        yield (str(i%10) * n).center(w)\n    line = ''.join(str(i%10) for i in range(1, n)) + (str(n % 10) * n) + ''.join(str(i%10) for i in reversed(range(1, n)))\n    for i in range(n):\n        yield line\n    for i in reversed(range(1, n)):\n        yield (str(i%10) * n).center(w)\n\ndef pattern(n):\n    return '\\n'.join(f(n))", "def pattern(n):\n    if n == 1:\n        return \"1\"\n    if n < 1:\n        return \"\"\n    top = \"\\n\".join([\" \" * (n - 1) + str(i % 10) * n + \" \" * (n - 1) for i in range(1, n)])\n    result = [top]\n    nums = [str(i % 10) for i in range(1, n)]\n    result.append(\"\\n\".join([\"\".join(nums) + str(n % 10) * n + \"\".join(nums[::-1])] * n))\n    result.append(top[::-1])\n    return \"\\n\".join(result)", "def pattern(n):\n    return ''.join((str((k+1)%10)*n).center(3*n-2)+'\\n' for k in range(n-1))+(''.join(str((i+1)%10) for i in range(n-1))+n*str(n%10)+''.join(str(j%10) for j in range(n-1,0,-1))+'\\n')*n+'\\n'.join((str(g%10)*n).center(3*n-2) for g in range(n-1,0,-1))", "def pattern(n):\n    lines = []\n    for p in range(1,n):\n        lines.append((str(p%10)*n).center(3*n-2))\n    for p in range(1,n+1):\n        lines.append(''.join([str(m%10) for m in range(1,n)] + [str(n%10) for m in range(n)] + [str(m%10) for m in range(1,n)[::-1]]))\n    for p in range(n-1,0,-1):\n        lines.append((str(p%10)*n).center(3*n-2))\n    return '\\n'.join(lines)", "def pattern(n):\n    h = ''.join(str(i%10) for i in range(1, n))\n    h = h + str(n%10) * n + h[::-1]\n    v = [(str(i%10) * n).center(len(h)) for i in range(1, n)]\n    return '\\n'.join(v + [h] * n + v[::-1])", "get_r = lambda y: str((y) % 10)\ndef pattern(n):\n  if n < 2: return '' if n < 1 else '1'\n  l, r = ''.join(map(get_r, range(1, n))), ''.join(map(get_r, range(n - 1, 0, -1)))\n  top = [' ' * (n - 1) + get_r(x) * n + ' ' * (n - 1) for x in range(1, n)]\n  return '\\n'.join(top) + '\\n' + (l + get_r(n) * n + r + '\\n') * n + '\\n'.join(list(reversed(top)))", "pattern=lambda n: \"\\n\".join([\"\".join([\" \"]*(n-1)+[str(i%10)]*n+[\" \"]*(n-1)) for i in range(1,n)]+[\"\".join([str(x%10) for x in range(1,n)]+[str(n%10)]*n+[str(x%10) for x in range(n-1,0,-1)]) for i in range(n)]+[\"\".join([\" \"]*(n-1)+[str(i%10)]*n+[\" \"]*(n-1)) for i in range(n-1,0,-1)])\n\n#and if you are reading this after having completed it without plenty of\n#list comprehensions, you know you should feel ashamed, z3rocoo1 :(\n#Kore wa joku desu; ganbatte, kohai ;)\n", "def pattern(n):\n    s = ''.join(str((i if i < n else n if i < n*2 else (n*3)-i-1)%10) for i in range(1,n*3-1))\n    return '\\n'.join((s[i]*n).center(n*3-2) if i < n-1 or i >= n*2-1 else s for i in range(n*3-2))"]