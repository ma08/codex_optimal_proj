["def palindrome(num):\n    if type(num) is not int or num <1:\n        return \"Not valid\"\n    return num == int(str(num)[::-1])", "def palindrome(num):\n    return str(num) == str(num)[::-1] if type(num) == int and num > 0 else \"Not valid\"", "def palindrome(n):\n    try:\n        return 1. * n == int(str(n)[::-1])\n    except:\n        return \"Not valid\"", "def palindrome(n):\n    return 'Not valid' if (type(n) != int or n < 0) else str(n) == str(n)[::-1]", "def palindrome(a):\n    if type(a)==int:\n        if a>0:\n            a=str(a)\n            b=a[::-1]\n            if a==b:\n                return True\n            else:\n                return False\n        else:\n            return \"Not valid\"\n    else:\n        return \"Not valid\"", "def palindrome(num):\n    if type(num) == int and num > 0:\n        return str(num) == str(num)[::-1]\n    else:\n        return 'Not valid'\n        \n    # or, as an ugly one line - just for practice:\n    \n    # return str(num) == str(num)[::-1] if type(num) == int and num > 0 else 'Not valid'\n", "def palindrome(num):\n    return 'Not valid' if type(num) is not int or num < 0 else str(num) == str(num)[::-1]", "def palindrome(num):\n    if type(num) != int or num < 0:\n        return \"Not valid\"\n    k = str(num)\n    if k == k[::-1]:\n        return True\n    else:\n        return False", "def palindrome(num):\n    return str(num)[::-1] == str(num) if isinstance(num, int) and num > 0 else 'Not valid'", "def palindrome(num):\n    if type(123)!=type(num) : return 'Not valid' \n    n = str(num)\n    if any(not c.isdigit() for c in n): return 'Not valid'\n    l = len(n)\n    return all(a==b for a, b in zip(n[:l//2], n[::-1]))", "def palindrome(num):\n    if type(num) != int or num < 0:\n        return \"Not valid\"\n    else:\n        return int(str(num)[::-1]) == num", "def palindrome(num):\n    if not str(num).isdigit():\n        return \"Not valid\" \n    \n    if type(num) == str:\n        return \"Not valid\"\n    \n    num = str(num)\n    \n    return num == num[::-1]\n    # Code here\n", "def palindrome(num):\n    if (isinstance(num, int)== False) or (num < 0):\n        return 'Not valid'\n    else:\n        if str(num) == str(num)[::-1]:\n            return True\n        else:\n            return False", "def palindrome(num):\n    def helper():\n        if  type(num) == str or num < 0:\n            return  'Not valid'\n        return  True if str(num) == str(num)[::-1] else False\n    try:\n        int(num)\n    except ValueError:\n        return   'Not valid' \n    else:\n        return helper()", "def palindrome(n):\n    # your code here\n    if not isinstance(n, int) or n < 0:\n        return \"Not valid\"\n    rev, temp = 0, n\n    while temp > 0:\n        a = temp % 10\n        rev = rev * 10 + a\n        temp //= 10\n    return rev == n", "def palindrome(num):\n    return str(num) == str(num)[::-1] if type(num) is int and num >= 0 else 'Not valid'", "def palindrome(num):\n    if isinstance(num, int) is False or num < 0:\n        return \"Not valid\"\n    return str(num) == str(num)[::-1]", "def palindrome(n):\n    if type(n) == int and n > 0:\n        n1,n2 = str(n),str(n)[::-1]\n        return n1 == n2\n    else:\n        return 'Not valid'\n", "def palindrome(num):\n    if isinstance(num,int) and num >= 0:\n        num = str(num)\n        return num == num[::-1]\n    else:\n        return \"Not valid\"", "class Numerical_paindrom_exception(Exception):\n    def __init__(self):\n        pass\n    def __str__(self):\n        return 'Not valid'\n\ndef palindrome(num):\n    try:\n        if type(num) != int or num < 0:\n            raise Numerical_paindrom_exception\n        return True if str(num)[::1] == str(num)[::-1] else False\n    except Exception as e:\n        return e.__str__()"]