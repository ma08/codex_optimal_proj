["def productFib(prod):\n  a, b = 0, 1\n  while prod > a * b:\n    a, b = b, a + b\n  return [a, b, prod == a * b]", "def productFib(prod):\n    a,b = 0,1\n    while a*b < prod:\n        a,b = b, b+a\n    return [a, b, a*b == prod]", "def productFib(prod):\n    a, b = 0, 1\n    rez = 0\n    while rez < prod:\n        a, b = b, a + b\n        rez = a*b\n    return [a, b, rez == prod]", "def productFib(prod):\n    func = lambda a, b: func(b, a+b) if a*b < prod else [a, b, a*b == prod]\n    return func(0, 1)", "def productFib(prod):\n    a, b = 0, 1\n    while a*b < prod:\n        a, b = b, a+b\n    return [a, b, a*b == prod]", "def productFib(prod, f1=0, f2=1):\n    return [f1, f2, True] if prod == f1 * f2 else [f1, f2, False] if prod < f1 * f2 else productFib(prod, f2, f1+f2)", "def productFib(prod):\n    fib1, fib2 = 0, 1\n    while prod > fib1*fib2:\n        fib2, fib1 = fib1 + fib2, fib2\n    return [fib1, fib2, prod == fib1*fib2]\n", "def productFib(prod):\n    num = 1\n    prev = 0\n    while prev * num < prod:\n        temp = num + prev\n        prev = num\n        num = temp\n    return [prev, num, prev * num == prod]", "from bisect import *\n\ndef genProdFib():\n    a,b = 0,1\n    while 1:\n        yield a*b,b\n        a,b = b,a+b\n\nGEN,PROD = genProdFib(), [(-1,0)]\n\ndef productFib(p):\n    def formatOut(pp,b): return [pp//b, b, pp==p]\n    \n    if PROD[-1][0]>p:\n        return formatOut(*PROD[bisect(PROD, (p,0))])\n    \n    while PROD[-1][0]<p:\n        PROD.append(next(GEN))\n    return formatOut(*PROD[-1])", "def productFib(prod):\n    for x, y in fib():\n        if x * y == prod:\n            return [x, y, True]\n        elif x * y > prod:\n            return [x, y, False]\n\ndef fib():\n    a, b = 0, 1\n    while True:\n        yield a, b\n        a, b = b, a + b", "def productFib(prod):\n    n,n_1 = 0,1\n    while True:\n        if n*n_1==prod:\n            return [n, n_1, True]\n        elif n*n_1>prod:\n            return [n,n_1, False]\n        else:\n            n, n_1 = n_1, n_1+n", "def productFib(prod):\n    i = 0\n    j = 1\n    while i * j < prod:\n        i, j = j, i+j\n    return [ i, j, i*j == prod ]\n", "from bisect import bisect_left\ndef productFib(prod, fib=[0,1], prods=[0]):\n    while prods[-1] < prod:\n        fib.append(fib[-2]+fib[-1])\n        prods.append(fib[-2]*fib[-1])\n    i = bisect_left(prods, prod)\n    return [fib[i], fib[i+1], prods[i]==prod]", "def productFib(prod):\n    a = 0\n    b = 1\n    while a * b < prod:\n        a, b = b, a+b\n    return [a, b, a*b == prod]\n", "def productFibAux(current, nxt, prod):\n    res = []\n    while (current * nxt < prod):\n            k = nxt\n            nxt = nxt + current\n            current = k\n    if (prod == current * nxt):\n        return [current, nxt, True]\n    else:\n        return [current, nxt, False]\n    return res\n\ndef productFib(prod):\n    return productFibAux(0, 1, prod)\n", "from itertools import dropwhile\n\n\ndef fib_gen():\n    a, b = 0, 1\n    while True:\n        yield a, b\n        a, b = b, a + b\n\n\ndef productFib(p):\n    i = dropwhile(lambda x: x[0]*x[1]<p, fib_gen())\n    a, b = next(i)\n    \n    return [a, b, a*b==p]\n", "def productFib(prod):\n        if prod==0:\n              return [0,1,True]\n        a=1\n        b=1\n        for i in range(1,prod+1):\n                c = a+b\n                if a*b==prod:\n                       return [a,b,True]\n                elif a*b>prod:\n                        return [a,b,False]\n                a=b\n                b=c", "def productFib(prod):\n    nums = [0,1]\n    i = 0\n    status = True\n    while status:\n        if nums[i]*nums[i+1] <= prod:\n            nums.append(nums[i]+nums[i+1])\n            i+=1\n        else:\n            status = False\n    i = 0\n    while i < len(nums):\n        if nums[i]*nums[i+1] == prod:\n            return [nums[i],nums[i+1],True]\n        elif prod in range(nums[i-1]*nums[i],nums[i]*nums[i+1]):\n            return [nums[i],nums[i+1],False]\n        i+=1"]