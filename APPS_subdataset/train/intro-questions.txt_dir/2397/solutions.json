["def read_int():\n    return int(input())\n\n\ndef read_ints():\n    return list(map(int, input().split(' ')))\n\n\nt = read_int()\nfor case_num in range(t):\n    n, m = read_ints()\n    a = []\n    for i in range(n):\n        a.append(int(input(), 2))\n    a.sort()\n    k = 2 ** m - n\n    ans = (k - 1) // 2\n    for ai in a:\n        if ai <= ans:\n            ans += 1\n    binary = '{:b}'.format(ans)\n    print(binary.rjust(m, '0'))\n", "def count_smaller(value, banlist):\n    total = value\n    for v in banlist:\n        if v < value:\n            total -= 1\n    return total\n\ncases = int(input())\nfor case in range(cases):\n    n, m = map(int, input().split())\n    banned = []\n    for i in range(n):\n        banned.append(int(input(), 2))\n    desindex = ((1 << m) - n - 1) // 2\n    candid = desindex\n    while (count_smaller(candid, banned) < desindex) or (candid in banned):\n        candid += 1\n    print(bin(candid)[2:].zfill(m))", "import bisect\n\n\nfor _ in range(int(input())):\n    n,m=list(map(int,input().split()))\n    ban=[]\n    for i in range(n):\n        a=input()\n        ban.append(int(a,2))\n    ban.sort()\n    k=2**m-n\n    start=0\n    end=2**m\n    def func(num):\n        res=num\n        index=bisect.bisect_left(ban,num)\n        res-=index\n        return res\n    while end-start>1:\n        test=(end+start)//2\n        if (k-1)//2>=func(test):\n            start=test\n        else:\n            end=test\n    if (k-1)//2>=func(end):\n        ans=end\n    else:\n        ans=start\n    ban=set(ban)\n    while ans in ban:\n        ans-=1\n    res=bin(ans)[2:]\n    res=\"0\"*(m-len(res))+res\n    print(res)\n    \n\n\n\n", "from bisect import bisect_left\nfor _ in range(int(input())):\n    n, m = map(int, input().split())\n    A = []\n    G = set()\n    for __ in range(n):\n        kek = int(input(), 2)\n        A.append(kek)\n        G.add(kek)\n    A.sort()\n    k = 2**m - n\n    k = (k - 1) // 2\n    ans = -1\n    for num in range(2**(m-1)-2*n-20, 2**(m-1)+2*n+20):\n        if 0<=num<2**m:\n            lol = num - bisect_left(A, num+1)\n            if lol == k and num not in G:\n                ans = num\n                break\n    l = ans\n    print(str(bin(l))[2:].zfill(m))", "def solve(mid):\n    small = mid\n    large = 2 ** m - mid - 1\n    for val in s:\n        if val < mid:\n            small -= 1\n        if val > mid:\n            large -= 1\n    return small < large\n\ndef solve2(mid):\n    small = mid\n    large = 2 ** m - mid - 1\n    for val in s:\n        if val < mid:\n            small -= 1\n        if val > mid:\n            large -= 1\n    return small <= large\n\n\nt = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    s = set([int(input(), 2) for i in range(n)])\n    ng = -1\n    ok = 2 ** m + 2\n    if len(s) % 2 == 0:\n        while abs(ok - ng) > 1:\n            mid = (ok + ng) // 2\n            if mid in s:\n                for i in range(ng + 1, ok):\n                    if i not in s:\n                        mid = i\n                        break\n            if solve(mid):\n                ng = mid\n            else:\n                ok = mid\n        print('{:060b}'.format(ng)[::-1][0:m][::-1])\n    else:\n        while abs(ok - ng) > 1:\n            mid = (ok + ng) // 2\n            if mid in s:\n                for i in range(ng + 1, ok):\n                    if i not in s:\n                        mid = i\n                        break\n            if solve2(mid):\n                ng = mid\n            else:\n                ok = mid\n        print('{:060b}'.format(ng)[::-1][0:m][::-1])", "def check(x,nums,k):\n    small = x+1\n    for i in nums:\n        if i <= x:\n            small -= 1\n\n    if small <= (k-1)//2:\n        return False\n\n    return True\n\ndef solve(nums,m,ans):\n    n = len(nums)\n    low = 0\n    high = pow(2,m)-1\n    x = 0\n    k = pow(2,m)-n\n    while low <= high:\n        mid = (low+high)//2\n        if check(mid,nums,k):\n            x = mid\n            high = mid-1\n        else:\n            low = mid+1\n\n    x = bin(x)[2:]\n    if len(x) < m:\n        x = '0'*(m-len(x))+x\n\n    ans.append(x)\n    \n\ndef main():\n    t = int(input())\n    ans = []\n    for i in range(t):\n        n,m = list(map(int,input().split()))\n        nums = set()\n        for j in range(n):\n            x = int(input(),2)\n            nums.add(x)\n\n        solve(nums,m,ans)\n\n    for i in ans:\n        print(i)\n\n\nmain()\n", "\nimport bisect\nT = int(input())\n\nfor _ in range(T):\n    N, M = list(map(int, input().split()))\n    aa = sorted([int(input(), 2) for _ in range(N)])\n\n    K = 1 << M\n\n    ans = 0\n\n    for k in reversed(list(range(M))):\n        tmp = ans + (1 << k)\n        La = bisect.bisect_left(aa, tmp)\n        Ra = N - La\n\n        L = tmp - La\n        R = (K - tmp) - Ra\n\n        if L < R:\n            ans = tmp\n        else:\n            continue\n\n    print(f\"{ans:0{M}b}\")\n", "import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor tests in range(t):\n    n,m=list(map(int,input().split()))\n    A=sorted([int(input().strip(),2) for i in range(n)])\n    A+=[1<<63]\n\n    ind=(2**m-n-1)//2\n\n    indskip=0\n    ANS=0\n\n    #print(A)\n\n    while True:\n        #print(ANS,ind,indskip)\n        if A[indskip]==ANS:\n            ANS+=1\n            indskip+=1\n            continue\n        if A[indskip]-ANS<=ind:\n            ind-=A[indskip]-ANS\n            ANS=A[indskip]+1\n            indskip+=1\n        else:\n            ANS+=ind\n            break\n\n    print(bin(ANS)[2:].zfill(m))\n\n        \n        \n\n    \n                    \n                \n\n    \n                \n    \n", "T = int(input())\n\n\ndef move_up(taken, s):\n    s += 1\n    while s in taken:\n        s += 1\n    return s\n\n\ndef move_down(taken, s):\n    s -= 1\n    while s in taken:\n        s -= 1\n    return s\n\nfor t in range(T):\n    N, M = [int(_) for _ in input().split()]\n    start = (1 << (M-1))-1\n    taken = set()\n    rd = True\n    for i in range(N):\n        el = int(input(), 2)\n        taken.add(el)\n        if el > start:\n            if not rd:\n                start = move_down(taken, start)\n        elif el < start:\n            if rd:\n                start = move_up(taken, start)\n        else:\n            if rd:\n                start = move_up(taken, start)\n            else:\n                start = move_down(taken, start)\n        rd = not rd\n\n    print(format(start, '0{}b'.format(M)))\n", "import sys\n\nt = int(sys.stdin.readline().strip())\nfor _ in range(t):\n\tn, m = list(map(int, sys.stdin.readline().strip().split()))\n\ts = set()\n\tmid = 2**(m-1)-1\n\n\n\tflag = 0\n\tfor i in range(n):\n\t\tx = int(sys.stdin.readline().strip(), 2)\n\t\ts.add(x)\n\n\t\tif x > mid and flag == 0:\n\t\t\tflag = 1\n\t\telif x > mid and flag == 1:\n\t\t\tflag = 0\n\t\t\tmid -= 1\n\t\t\twhile mid in s:\n\t\t\t\tmid -= 1\n\n\t\telif x < mid and flag == 0:\n\t\t\tflag = 1\n\t\t\tmid += 1\n\t\t\twhile mid in s:\n\t\t\t\tmid += 1\n\t\telif x < mid and flag == 1:\n\t\t\tflag = 0\n\n\t\telse:\n\t\t\tif flag == 1:\n\t\t\t\tflag = 0\n\t\t\t\tmid -= 1\n\t\t\t\twhile mid in s:\n\t\t\t\t\tmid -= 1\n\t\t\telse:\n\t\t\t\tflag = 1\n\t\t\t\tmid += 1\n\t\t\t\twhile mid in s:\n\t\t\t\t\tmid += 1\n\tans = bin(mid)[2:]\n\tans = '0'*(m-len(ans)) + ans\n\tprint(ans)\n\n\n\n\n\n\t\n\n\n", "def main():\n    for t in range(int(input())):\n        n, m = map(int, input().split())\n        l = []\n        for i in range(n):\n            l.append((int(input(), 2)))\n            \n        l.sort()\n        median = (2 ** m - n - 1) // 2\n        # print(l)\n        # print(median)\n        for i in l:\n            if i <= median:\n                median += 1\n            # print(median)\n        while median in l:\n            median += 1\n        \n        ans = bin(median)[2:]\n        temp = ''\n        for i in range(len(ans), m):\n            temp += '0'\n        print(temp + ans)\n                            \n        \nmain()", "import sys\n# sys.setrecursionlimit(10**6) \ninput=sys.stdin.readline\nt=int(input())\nimport math\nfor t1 in range(t):\n    # n=int(input())\n    k,n=list(map(int,input().split(\" \")))\n    l=[]\n    for i in range(k):\n        s=input()\n        s=s.strip()\n        l.append(int(s,2))\n    l.sort()\n    a=0\n    curr=\"0\"+\"1\"*(n-1)\n    curr=int(curr,2)\n    temp=1<<n\n    d={}\n    for i in range(k):\n        d[l[i]]=1\n        if(temp%2==0):\n            if(l[i]>curr):\n                a=1\n            else:\n                \n                while(d.get(curr+1,0)==1):\n                    curr+=1\n                curr+=1\n                #increase by 1\n        else:\n            if(l[i]>=curr):\n                while(d.get(curr-1,0)==1):\n                    curr-=1\n                #decrease by 1\n                curr-=1\n            else:\n                a=1\n        temp-=1\n    z=bin(curr)[2:]\n    if(len(z)<n):\n        diff=n-len(z)\n        z=\"0\"*diff+z\n    print(z)\n\n\n", "import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor tests in range(t):\n    n,m=map(int,input().split())\n    A=sorted([int(input().strip(),2) for i in range(n)])\n    A+=[1<<63]\n\n    ind=(2**m-n-1)//2\n\n    indskip=0\n    ANS=0\n\n    #print(A)\n\n    while True:\n        #print(ANS,ind,indskip)\n        if A[indskip]==ANS:\n            ANS+=1\n            indskip+=1\n            continue\n        if A[indskip]-ANS<=ind:\n            ind-=A[indskip]-ANS\n            ANS=A[indskip]+1\n            indskip+=1\n        else:\n            ANS+=ind\n            break\n    #print(ANS,ind)\n    print(bin(ANS)[2:].zfill(m))", "import math\nt=int(input())\ndef convert(s): \n  \n    # initialization of string to \"\" \n    new = \"\" \n  \n    # traverse in the string  \n    for x in s: \n        new += x  \n  \n    # return string  \n    return new \n      \nfor i in range(t):\n    a,b=list(map(int,input().split()))\n    removed=[]\n    for j in range(a):\n        removed.append(int(input(), 2))\n    removed.sort()\n    pointer=0\n    leftcount=0\n    for j in range(2**(b-1)-101,2**(b-1)+101):\n        if pointer<a:\n            while removed[pointer]<j:\n                pointer+=1\n                leftcount+=1\n                if pointer==a:\n                    break\n        if j+1-leftcount>=2**b-j-1-(a-leftcount):\n            if j in removed:\n                continue\n            s=\"{0:b}\".format(j)\n            ans=[]\n            for k in range(b-len(s)):\n                ans.append('0')\n            for k in range(len(s)):\n                ans.append(s[k])\n            print(convert(ans))\n            break\n", "import sys\ninput = sys.stdin.readline\ndef stringminus(s):\n    i=-1\n    n=len(s)\n    s2=[\"0\"]*n\n    for j in range(n):\n        s2[j]=s[j]\n    while s[i]==\"0\":\n        s2[i]=\"1\"\n        i-=1\n    s2[i]=\"0\"\n    sol=s2[0]\n    for i in range(1,n):\n        sol+=s2[i]\n    return sol\ndef stringplus(s):\n    i=-1\n    n=len(s)\n    s2=[\"0\"]*n\n    for j in range(n):\n        s2[j]=s[j]\n    while s[i]==\"1\":\n        s2[i]=\"0\"\n        i-=1\n    s2[i]=\"1\"\n    sol=s2[0]\n    for i in range(1,n):\n        sol+=s2[i]\n    return sol\nfor f in range(int(input())):\n    rem=set()\n    med=\"0\"\n    isc=0\n    n,m=map(int,input().split())\n    for i in range(m-1):\n        med+=\"1\"\n    for i in range(n):\n        s=input()\n        s=s[0:m]\n        if s>med:\n            isc+=1\n        if s<med:\n            isc-=1\n        if s==med:\n            if isc==0:\n                isc=-1\n            else:\n                isc=2\n        rem.add(s)\n        if isc==-1:\n            med=stringplus(med)\n            while med in rem:\n                med=stringplus(med)\n            isc=1\n        if isc==2:\n            med=stringminus(med)\n            while med in rem:\n                med=stringminus(med)\n            isc=0\n    print(med)", "import sys\n\ninp = [x for x in sys.stdin.read().split()]; ii = 0\n\nttt = int(inp[ii]); ii += 1\nres = []\nfor _ in range(ttt):\n\tn, m = int(inp[ii]), int(inp[ii + 1]); ii += 2\n\ta = []\n\tfor _ in range(n):\n\t\ttemp = inp[ii]; ii += 1\n\t\tx = 0\n\t\tfor i in range(m):\n\t\t\tif temp[i] == '1':\n\t\t\t\tx += 1 << m - 1 - i\n\t\ta.append(x)\n\tt = ((1 << m) - n - 1) // 2\n\tlow, high = 0, 1 << m\n\twhile high - low > 1:\n\t\tmid = low + high >> 1\n\t\tif mid - sum([x < mid for x in a]) <= t:\n\t\t\tlow = mid\n\t\telse:\n\t\t\thigh = mid\n\tres.append(\"\".join(str(int(not not low & 1 << i)) for i in range(m - 1, -1, -1)))\nprint(\"\\n\".join(str(x) for x in res))", "t = int(input())\nfor y in range(t):\n\tn,m = map(int,input().split())\n\tmid = 2**(m-1)-1\n\td = dict()\n\tfor i in range(n):\n\t\tx = int(input(),2)\n\t\td[x] = 1\n\t\tif(i%2 == 0):\n\t\t\tif(x <= mid):\n\t\t\t\tmid += 1\n\t\t\t\twhile(mid in d):\n\t\t\t\t\tmid += 1\n\t\telse:\n\t\t\tif(x >= mid):\n\t\t\t\tmid -= 1\n\t\t\t\twhile(mid in d):\n\t\t\t\t\tmid -= 1\n\tt = \"\"\n\tfor i in range(m-1,-1,-1):\n\t\tx = 2**i\n\t\tif(mid&x):\n\t\t\tt += '1'\n\t\telse:\n\t\t\tt += '0'\n\tprint(t)"]