["def days_represented(a):\n    return len({i for x, y in a for i in range(x, y + 1)})", "def days_represented(trips):\n    L=[]\n    for i in trips:\n        for j in range(i[0],i[1]+1):\n            L.append(j)\n    a=set(L)\n    return len(a)", "def days_represented(trips):\n    return len({i for (start, stop) in trips for i in range(start, stop + 1)})", "def days_represented(trips):\n    arr = [0] * 365\n    for a, b in trips:\n        arr[a:b + 1] = [1] * (b - a + 1)\n    return sum(arr)", "def days_represented(trips):\n    total = 0\n    visited = []\n    for i in range(len(trips)):\n        trip = trips[i]\n        arrival = trip[1]\n        departure = trip[0] \n        for j in range(departure, arrival+1):\n            if j not in visited:\n                visited.append(j)\n            else:\n                continue\n    return len(visited)", "def days_represented(trips):\n    trips.sort()\n    print(trips)\n    previous_end = trips[0][1]\n    days = previous_end - trips[0][0] + 1\n    trips.pop(0)\n    for trip in trips:\n        start, end = trip\n        if start > previous_end:\n            days += end-start+1\n            previous_end = end\n        elif end > previous_end:\n            days += end - previous_end\n            previous_end = end\n    return days", "def days_represented(trips):\n    accumulator = set()\n    for a,b in trips:\n        accumulator |= set(range(a, b+1))\n    return len(accumulator)", "def days_represented(trips):\n    new = []\n    for days in trips:\n        for day in range(days[0],days[1] + 1):\n            new.append(day)\n    p = set(new)\n    return len(p) \n        \n", "from itertools import chain\n\ndef days_represented(trips):\n    return len(set(chain(*(range(a,b+1) for a,b in trips))))", "from itertools import chain\n\ndef days_represented(trips):\n    return len(set(chain(*(range(b, e+1) for b, e in trips))))"]