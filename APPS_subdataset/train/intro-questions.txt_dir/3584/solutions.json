["from collections import deque\nKEYBOARD = ['zxcvbnm,.', 'ZXCVBNM<>', 'asdfghjkl', 'ASDFGHJKL', 'qwertyuiop', 'QWERTYUIOP']\n\ndef encrypt(text, encryptKey): return converter(text, encryptKey, 1)\ndef decrypt(text, encryptKey): return converter(text, encryptKey, -1)\n    \ndef converter(text, encryptKey, sens):\n    deques = list(map(deque, KEYBOARD))\n    for i, deq in enumerate(deques):\n        deq.rotate(-sens * (encryptKey // 10**(i//2) % 10) )\n    return text.translate(str.maketrans(''.join(KEYBOARD), ''.join(''.join(deq) for deq in deques)))", "encrypt = lambda s, k: code(s, k)\ndecrypt = lambda s, k: code(s, k, -1)\n    \ndef code(text, key, m=1):\n    keys, r = [int(e) * m for e in str(key).rjust(3, '0')], []\n    for c in text:    \n        for i, a in enumerate(['qwertyuiop', 'asdfghjkl', 'zxcvbnm,.']):\n            if c in a: c = a[(a.index(c) + keys[i]) % len(a)]            \n        for i, a in enumerate(['QWERTYUIOP', 'ASDFGHJKL', 'ZXCVBNM<>']):\n            if c in a: c = a[(a.index(c) + keys[i]) % len(a)]\n        r.append(c)\n    return ''.join(r)", "def code(mode, text, key):\n    alphabet = \"qwertyuiop asdfghjkl zxcvbnm,. QWERTYUIOP ASDFGHJKL ZXCVBNM<>\"\n    idxs = [mode * int(d) for d in '%03d' % key * 2]\n    table = ' '.join(w[i:] + w[:i] for i, w in zip(idxs, alphabet.split()))\n    return text.translate(str.maketrans(alphabet, table))\n\nfrom functools import partial\nencrypt, decrypt = partial(code, 1), partial(code, -1)", "rs=(\"qwertyuiop\",\"asdfghjkl\",\"zxcvbnm,.\",\"QWERTYUIOP\",\"ASDFGHJKL\",\"ZXCVBNM<>\")\n\ndef encrypt(t,k):\n    k=[k//100,k//10%10,k%10]\n    return t.translate(str.maketrans(''.join(rs),''.join(rs[i][k[i%3]:]+rs[i][:k[i%3]] for i,r in enumerate(rs))))\n    \ndef decrypt(t,k):\n    k=[k//100,k//10%10,k%10]\n    return t.translate(str.maketrans(''.join(rs),''.join(rs[i][-k[i%3]:]+rs[i][:-k[i%3]] for i,r in enumerate(rs))))\n", "from operator import add, sub\nfrom functools import partial\n\nkeyboard = (\"qwertyuiop\", \"asdfghjkl\", \"zxcvbnm,.\", \"QWERTYUIOP\", \"ASDFGHJKL\", \"ZXCVBNM<>\")\nD = {c:(i,j,len(row)) for i,row in enumerate(keyboard) for j,c in enumerate(row)}\nkey = \"{:03}\".format\n\ndef trans(L, f, c):\n    if c in D:\n        i, j, l = D[c]\n        return keyboard[i][f(j, L[i%3])%l]\n    return c\n\ndef encrypt(text, encryptKey, f=add):\n    return ''.join(map(partial(trans, list(map(int, key(encryptKey))), f), text))\n    \ndef decrypt(text, encryptKey):\n    return encrypt(text, encryptKey, sub)", "def encrypt(text, key):\n    r1,r2,r3 = 'qwertyuiop','asdfghjkl','zxcvbnm,.'\n    R1,R2,R3 = 'QWERTYUIOP','ASDFGHJKL', 'ZXCVBNM<>' \n    key = str(key).zfill(3)\n    mx = ''\n    for x in text:\n        if x in r1:\n            mx += r1[(r1.index(x)+int(key[0]))%10]\n        elif x in R1:\n            mx += R1[(R1.index(x)+int(key[0]))%10]\n        elif x in r2:\n            mx += r2[(r2.index(x)+int(key[1]))%9]\n        elif x in R2:\n            mx += R2[(R2.index(x)+int(key[1]))%9]\n        elif x in r3:\n            mx += r3[(r3.index(x)+int(key[2]))%9]\n        elif x in R3:\n            mx += R3[(R3.index(x)+int(key[2]))%9]\n        else:\n            mx += x\n    return mx\ndef decrypt(text, key):\n    r1,r2,r3 = 'qwertyuiop','asdfghjkl','zxcvbnm,.'\n    R1,R2,R3 = 'QWERTYUIOP','ASDFGHJKL', 'ZXCVBNM<>' \n    key = str(key).zfill(3)\n    mx = ''\n    for x in text:\n        if x in r1:\n            mx += r1[(r1.index(x)-int(key[0]))%10]\n        elif x in R1:\n            mx += R1[(R1.index(x)-int(key[0]))%10]\n        elif x in r2:\n            mx += r2[(r2.index(x)-int(key[1]))%9]\n        elif x in R2:\n            mx += R2[(R2.index(x)-int(key[1]))%9]\n        elif x in r3:\n            mx += r3[(r3.index(x)-int(key[2]))%9]\n        elif x in R3:\n            mx += R3[(R3.index(x)-int(key[2]))%9]\n        else:\n            mx += x\n    return mx", "def crypt(s, key, to_encrypt=True):\n    keys = []\n    for key in '{:0>3}'.format(key):\n        keys.extend([int(key)] * 2)\n    rows = ('qwertyuiop', 'QWERTYUIOP',\n            'asdfghjkl', 'ASDFGHJKL',\n            'zxcvbnm,.', 'ZXCVBNM<>')\n    original = ''.join(rows)\n    shifted = ''.join(r[k:] + r[:k] for r, k in zip(rows, keys))\n    table = str.maketrans(*(\n        (original, shifted) if to_encrypt else (shifted, original)))\n    return s.translate(table)\n\n\ndef decrypt(s, key):\n    return crypt(s, key, to_encrypt=False)\n\n\ndef encrypt(s, key):\n    return crypt(s, key, to_encrypt=True)\n", "region1=\"qwertyuiop\" #10\nregion2=\"asdfghjkl\" #9\nregion3=\"zxcvbnm,.\" #9\n\ndef encrypt(text, encryptKey):\n    print(text)\n    print(encryptKey)\n    s=str(encryptKey)\n    if len(s) == 1: s=['0', '0', encryptKey]\n    elif len(s) == 2: s=['0', s[0], s[1]]\n    else: s=str(encryptKey)\n    \n    ntext=''\n    for c in text:\n        if c.lower() in region1:\n            ind=region1.find(c.lower())\n            if c == c.lower(): ntext+=region1[(ind+int(s[0]))%10]\n            else: ntext+=region1[(ind+int(s[0]))%10].upper()\n        elif c.lower() in region2:\n            ind=region2.find(c.lower())\n            if c == c.lower(): ntext+=region2[(ind+int(s[1]))%9]\n            else: ntext+=region2[(ind+int(s[1]))%9].upper()\n        elif c.lower() in region3+'<>':\n            if c.lower() in region3:\n                ind=region3.find(c.lower())\n                if c == c.lower(): ntext+=region3[(ind+int(s[2]))%9]\n                else: \n                    if region3[(ind+int(s[2]))%9] == ',': ntext+='<' \n                    elif region3[(ind+int(s[2]))%9] == '.': ntext+='>'\n                    else: ntext+=region3[(ind+int(s[2]))%9].upper()\n            if c == '<':\n                ind=region3.find(',')\n                q=region3[(ind+int(s[2]))%9]\n                if q == ',': ntext+='<'\n                elif q == '.': ntext+='>'\n                else: ntext+=q.upper()\n            if c == '>':\n                ind=region3.find('.')\n                q=region3[(ind+int(s[2]))%9]\n                if q == ',': ntext+='<'\n                elif q == '.': ntext+='>'\n                else: ntext+=q.upper()\n                \n        else: ntext+=c\n    print(ntext)\n    return ntext\n    \ndef decrypt(text, encryptKey):\n    print(text)\n    print(encryptKey)\n    \n    s=str(encryptKey)\n    if len(s) == 1: s=['0', '0', encryptKey]\n    elif len(s) == 2: s=['0', s[0], s[1]]\n    else: s=str(encryptKey)\n    \n    ntext=''\n    for c in text:\n        if c.lower() in region1:\n            ind=region1.find(c.lower())\n            if c == c.lower(): ntext+=region1[(ind-int(s[0]))%10]\n            else: ntext+=region1[(ind-int(s[0]))%10].upper()\n        elif c.lower() in region2:\n            ind=region2.find(c.lower())\n            if c == c.lower(): ntext+=region2[(ind-int(s[1]))%9]\n            else: ntext+=region2[(ind-int(s[1]))%9].upper()\n        elif c.lower() in region3+'<>':\n            if c.lower() in region3:\n                ind=region3.find(c.lower())\n                if c == c.lower(): ntext+=region3[(ind-int(s[2]))%9]\n                else: \n                    if region3[(ind-int(s[2]))%9] == ',': ntext+='<' \n                    elif region3[(ind-int(s[2]))%9] == '.': ntext+='>'\n                    else: ntext+=region3[(ind-int(s[2]))%9].upper()\n            if c == '<':\n                ind=region3.find(',')\n                q=region3[(ind-int(s[2]))%9]\n                if q == ',': ntext+='<'\n                elif q == '.': ntext+='>'\n                else: ntext+=q.upper()\n            if c == '>':\n                ind=region3.find('.')\n                q=region3[(ind-int(s[2]))%9]\n                if q == ',': ntext+='<'\n                elif q == '.': ntext+='>'\n                else: ntext+=q.upper()\n                \n        else: ntext+=c\n    print(ntext)\n    return ntext", "keyboard = ['qwertyuiop', 'QWERTYUIOP', 'asdfghjkl','ASDFGHJKL','zxcvbnm,.','ZXCVBNM<>']\n\ndef encrypt(text, encryptKey): return crypt(text, encryptKey, 1)\ndef decrypt(text, encryptKey): return crypt(text, encryptKey, -1)\n    \ndef crypt(text, encryptKey, dir):\n    encryptKey = str(encryptKey).zfill(3)\n    # rotate all rows of keyboard\n    new_keyboard = [row[int(encryptKey[i//2])*dir:]+row[:int(encryptKey[i//2])*dir] for i,row in enumerate(keyboard)]\n    # join the rows of keyboard together to make a full translation and translate\n    return ''.join([char.translate(str.maketrans(' '.join(keyboard), ' '.join(new_keyboard))) for char in text])", "top = 'qwertyuiop'\ntop_caps = 'QWERTYUIOP'\nmid = \"asdfghjkl\"\nmid_caps = 'ASDFGHJKL'\nbot = 'zxcvbnm,.'\nbot_caps = 'ZXCVBNM<>'\n\n\ndef encrypt(text, encryptKey):\n    encryptKey = str(encryptKey).zfill(3)\n    res = ''\n    for char in text:\n        for i, row in enumerate([top, top_caps, mid, mid_caps, bot, bot_caps]): \n            if char in row:\n                shift = int(encryptKey[i//2])\n                res += char.translate(str.maketrans(row, row[shift:]+row[:shift]))\n                break\n        else: res += char\n    return res\n        \n    \ndef decrypt(text, encryptKey):\n    encryptKey = str(encryptKey).zfill(3)\n    res = ''\n    for char in text:\n        for i, row in enumerate([top, top_caps, mid, mid_caps, bot, bot_caps]): \n            if char in row:\n                shift = int(str(encryptKey)[i//2])\n                res += char.translate(str.maketrans(row, row[-shift:]+row[:-shift]))\n                break\n        else: res += char\n    return res"]