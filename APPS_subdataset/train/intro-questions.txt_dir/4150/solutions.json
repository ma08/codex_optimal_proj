["def rot13(message):\n    def decode(c):\n        if 'a' <= c <= 'z':\n            base = 'a'\n        elif 'A' <= c <= 'Z':\n            base = 'A'\n        else:\n            return c\n        return chr((ord(c) - ord(base) + 13) % 26 + ord(base))\n    return \"\".join(decode(c) for c in message)", "def rot13(message):\n    PAIRS = dict(zip(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n        \"nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM\"))\n    return \"\".join(PAIRS.get(c, c) for c in message)", "def rot13(message):\n    import codecs\n    return codecs.encode(message, 'rot_13')", "from string import ascii_lowercase as abc\nfrom string import ascii_uppercase as ABC\n\ndef rot13(message):\n    abc_message = abc + ABC\n    abc_cipher = abc[13:] + abc[:13] + ABC[13:] + ABC[:13]\n    return message.translate(str.maketrans(abc_message, abc_cipher))", "def rot13(message):\n    root13in = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n    root13out = 'NOPQRSTUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklm'\n    root13map = dict(zip(root13in, root13out))\n    \n    res = ''.join([root13map.get(s, s) for s in message])\n    \n    return res", "from string import ascii_letters, ascii_lowercase, ascii_uppercase\n\ndef shift(s, n):\n    return s[n:] + s[:n]\n\ntable = str.maketrans(\n    ascii_letters,\n    shift(ascii_lowercase, 13) + shift(ascii_uppercase, 13))\n\ndef rot13(message):\n    return message.translate(table)\n", "import re\n\ndef rot13(message):\n    pattern1 = re.compile(r'[A-Ma-m]') \n    pattern2 = re.compile(r'[N-Zn-z]')   \n    deciphered = []\n    for s in message:\n        if pattern1.match(s):\n            deciphered.append(chr(ord(s) + 13))\n        elif pattern2.match(s):\n            deciphered.append(chr(ord(s) - 13))\n        else:\n            deciphered.append(s)\n    return ''.join(deciphered)", "def rot13(message):\n    abc = \"a b c d e f g h i j k l m n o p q r s t u v w x y z\".split()*2\n    abc_upper = \"a b c d e f g h i j k l m n o p q r s t u v w x y z\".upper().split()*2\n    res = \"\"\n    for i in message:\n        if i in abc_upper:\n            res += abc_upper[abc_upper.index(i)+13]\n        elif i in abc:\n            res += abc[abc.index(i)+13]\n        else:\n            res += i\n\n    return res\n", "def rot13c(c):\n    if c.islower(): a = 'a'\n    elif c.isupper(): a = 'A'\n    else: return c\n    return chr(ord(c)+13) if ord(c) < ord(a)+13 else chr(ord(c)-13)\ndef rot13(message): return ''.join(rot13c(c) for c in message)\n", "def rot13(message):\n    return ''.join(map(lambda c: chr(ord(c)+13) if c.isalpha() and c.lower() <= 'm' else\n                                 chr(ord(c)-13) if c.isalpha() else c, message))", "import codecs\ndef rot13(message):\n    #your code here  \n    code = codecs.encode(message, 'rot_13')\n    return(code)\n        \n                \n            \n", "def rot13(message):\n    source = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    target = \"nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM\"\n    code = {k:v for k,v in zip(source, target)}\n    \n    result = \"\"\n    \n    for c in message:\n        # use non-code characters as-is \n        if c not in code:\n            result += c\n            continue\n        \n        result += code[c]\n        \n    return result", "import string\ndef rot13(message):\n    q = \"\"\n    p = list(string.ascii_lowercase)\n    for i in message:\n        if i.isalpha()== True:\n            a = p.index(i.lower())+ 13\n            if i.isupper()== True:\n                if a > 25:\n                    a -= 26\n                q += (p[a]).upper()\n            else:\n                if a > 25:\n                    a -= 26\n                q += (p[a]).lower()\n        else:\n            q += i  \n    return q\n    \n", "def rot13(message):\n    index = {}\n    az=[chr(i) for i in range(ord(\"a\"),ord(\"z\")+1)]\n    AZ=[chr(i) for i in range(ord(\"A\"),ord(\"Z\")+1)]\n    azT = az[13:]+az[0:13]\n    AZT = AZ[13:]+AZ[0:13]\n    t={a:b for a,b in zip(az+AZ,azT+AZT)}\n    \n    return \"\".join([t.get(i,i) for  i in message])"]