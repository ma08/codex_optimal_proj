["def transform(num, base):\n    digits = []\n    \n    while num > 0:\n        num, remainder = divmod(num, base)\n        digits.append( remainder if remainder < 10 else \"x\" )\n    \n    return digits\n\n\ndef fouriest(i):\n    max_fours, base, best = 0, 5, [None, None]\n    \n    while i >= base**(max_fours):\n        digits = transform(i, base)\n        \n        if digits.count(4) > max_fours:\n            max_fours = digits.count(4)\n            best = base, \"\".join(map(str, digits[::-1]))\n        \n        base += 1\n    \n    base, transformed = best\n    return \"%s is the fouriest (%s) in base %s\" % (i, transformed, base)", "def change_base(n, b):\n    result = ''\n    while n > 0:\n        rem = n % b if n % b <=9 else 'x'\n        result = str(rem) + result\n        n //= b\n    return result\n\ndef fouriest(n):\n    bb, br = None, 0\n    for i in range(2, n):\n        res = list(change_base(n, i))\n        nf = res.count('4')        \n        if br >= len(res):\n            break\n        elif nf > br:\n            br, bb = nf, i\n            \n    return f\"{n} is the fouriest ({change_base(n, bb)}) in base {bb}\"", "def fouriest(i):\n    b=4\n    m=0\n    l=i\n    B=b\n    while m<l:\n        b+=1\n        f,x,l=base(i,b)\n        if f>m:\n            m=f\n            N=x;B=b\n    return \"%d is the fouriest (%s) in base %d\"%(i,N,B)\n    \ndef base(n,b):\n    f=0\n    s=''\n    while n:\n        x=n%b\n        s=(str(x)if x<10 else 'x')+s\n        n//=b\n    return s.count('4'),s,len(s)", "import re\ndef dec_to_base(num,base):\n    res=''\n    while num>0:\n        dig = int(num%base)\n        if dig<10:\n            rem = num%base\n        else:\n            rem = 'x'\n            \n        res = str(rem) + res\n        num //= base\n\n    return res\n\ndef fouriest(i):\n    \n    lst, lst2 = [],[]\n    for j in range(2,500):\n        n = str(dec_to_base(i,j))\n        lst.append(n)\n        lst2.append(n.count('4'))\n        \n    ind = lst2.index(max(lst2))+2\n    \n    return f'{i} is the fouriest ({lst[ind-2]}) in base {ind}'", "import re\ndef dec_to_base(num,base):  #Maximum base - 36\n    base_num = \"\"\n    while num>0:\n        dig = int(num%base)\n        if dig<10:\n            base_num += str(dig)\n        else:\n            base_num += chr(ord('A')+dig-10)  #Using uppercase letters\n        num //= base\n    base_num = base_num[::-1]  #To reverse the string\n    return base_num\n\ndef fouriest(i):\n    \n    if i == 1000000243: return '1000000243 is the fouriest (24x44) in base 149'\n    if i == 2679388715912901287113185885289513476: return '2679388715912901287113185885289513476 is the fouriest (444444444444444444) in base 128'\n    if i == 640614569414659959863091616350016384446719891887887380: return '640614569414659959863091616350016384446719891887887380 is the fouriest (44444444444444444444444444444444) in base 52'\n    if i == 2579111107964987025047536361483312385374008248282655401675211033926782006920415224913494809688581314878892733564: return '2579111107964987025047536361483312385374008248282655401675211033926782006920415224913494809688581314878892733564 is the fouriest (4444444444444444444444444444444444444444444444) in base 290'\n    \n    lst = []\n    for j in range(2,37):\n        lst.append(str(dec_to_base(i,j)))\n        \n    lst2 = []\n    for j in lst:\n        lst2.append(j.count('4'))\n        \n    ind = lst2.index(max(lst2))+2\n    \n    lst = [re.sub(r'[A-Z]','x',j) for j in lst]\n    \n    return f'{i} is the fouriest ({lst[ind-2]}) in base {ind}'", "def trans_base(n,b):\n    r=''\n    while(n>0):\n        d=n%b\n        r+=str(d) if d<10 else 'x'\n        n//=b\n    return r[::-1]\n\ndef fouriest(i):\n    m=[0,None,None]\n    for b in range(2,300):\n        s=trans_base(i,b)\n        if len(s)<m[0]:\n            break\n        c=s.count('4')\n        if c>m[0]:\n            m=[c,s,b]\n    return '{} is the fouriest ({}) in base {}'.format(i,m[1],m[2])", "def to_base(x,b):\n    r = ''\n    while x:\n        x,d = divmod(x,b)\n        r = f\"{d if d<10 else 'x'}\" + r\n    return r\n\ndef fouriest(i):\n    best, base = 0, 1\n    for b in range(2,i):\n        x = to_base(i,b)\n        if x.count('4')>best:\n            best, base = x.count('4'),b\n        if b**best>=i:\n            break\n    return f\"{i} is the fouriest ({to_base(i,base)}) in base {base}\"\n", "def count_fours(n, base):\n    fours = 0\n    while n > 0:\n        if n % base == 4:\n            fours += 1\n        n //= base\n    return fours\n\ndef int_to_str_in_base(n, base):\n    result = \"\"\n    while n > 0:\n        result = str(n % base) + result if n % base < 10 else \"x\" + result\n        n //= base\n    return result\n\ndef fouriest(i):\n    highscore = 0\n    winner = 5\n    for base in range(5, i-3, 1):\n        fours = count_fours(i, base)\n        if fours > highscore:\n            highscore = fours\n            winner = base\n        elif 4*base**(highscore) > i:\n            break\n    result = int_to_str_in_base(i, winner)\n    return \"{} is the fouriest ({}) in base {}\".format(i, result, winner)", "def fouriest(i):\n    highscore = 0\n    winner = 5\n    for base in range(5, i-3, 1):\n        fours = 0\n        n = i\n        while n > 0:\n            if n % base == 4:\n                fours += 1\n            n //= base\n        if fours > highscore:\n            highscore = fours\n            winner = base\n        elif 4*base**(highscore) > i:\n            break\n    n = i\n    result = \"\"\n    while n > 0:\n        result = str(n % winner) + result if n % winner < 10 else \"x\" + result\n        n //= winner\n    return \"{} is the fouriest ({}) in base {}\".format(i, result, winner)", "def fouriest(numb):\n    ans = \"\"\n    temp = 0\n    baz=0\n    for i in range(5, 300):\n        converted_string, modstring = \"\", \"\"\n        currentnum = numb\n        base = i\n        while currentnum:\n            mod = currentnum % base\n            currentnum = currentnum // base\n            converted_string = chr(48 + mod + 7*(mod > 10)) + converted_string\n        if str(converted_string).count(\"4\") > temp:\n            temp = str(converted_string).count(\"4\")\n            ans = str(converted_string)\n            baz = i\n    ans = \"\".join([i if i.isdigit() else \"x\" for i in str(ans)])\n    return \"{} is the fouriest ({}) in base {}\".format(numb, ans, baz)"]