["class Solution:\n    def busyStudent(self, startTime: List[int], endTime: List[int], queryTime: int) -> int: \n        res=0\n        for start,end in zip(startTime,endTime):\n            if(queryTime>=start and queryTime<=end):\n                res+=1\n        return res", "class Solution:\n    def busyStudent(self, startTime: List[int], endTime: List[int], queryTime: int) -> int:\n        return sum([1 if startTime[i] <= queryTime and endTime[i] >= queryTime else 0 for i in range(len(startTime))])", "class Solution:\n    def busyStudent(self, startTime: List[int], endTime: List[int], queryTime: int) -> int:\n        startTime = [i - queryTime for i in startTime]\n        endTime = [i - queryTime for i in endTime]\n        \n        count = 0\n        \n        for i, j in zip(startTime, endTime):\n            if (i <= 0) & (j >= 0):\n                count += 1\n                \n        return count", "class Solution:\n    def busyStudent(self, startTime: List[int], endTime: List[int], queryTime: int) -> int:\n        count = 0\n        \n        for start, end in zip(startTime, endTime):\n            if queryTime >= start and queryTime <= end:\n                count += 1\n                \n        return count\n", "class Solution:\n    def busyStudent(self, startTime: List[int], endTime: List[int], queryTime: int) -> int:\n        count = 0\n        for idx, x in enumerate(startTime):\n            if (x <= queryTime <= endTime[idx]):\n                count += 1\n        return count", "class Solution:\n    def busyStudent(self, startTime: List[int], endTime: List[int], queryTime: int) -> int:\n        count = 0\n        \n        for i, j in zip(startTime, endTime):\n            if (i <= queryTime) & (j >= queryTime):\n                count += 1\n                \n        return count", "class Solution:\n    def busyStudent(self, startTime: List[int], endTime: List[int], queryTime: int) -> int:\n        count = 0\n        for i in range(len(startTime)):\n            if queryTime in list(range(startTime[i],endTime[i]+1)):\n                count += 1\n        return count"]