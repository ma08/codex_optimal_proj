["from collections import Counter \n\nEXECUTIONS_ORDER = [('Z', Counter(\"ZERO\"),  '0'),\n                    ('W', Counter(\"TWO\"),   '2'),\n                    ('U', Counter(\"FOUR\"),  '4'),\n                    ('X', Counter(\"SIX\"),   '6'),\n                    ('G', Counter(\"EIGHT\"), '8'),\n                    ('O', Counter(\"ONE\"),   '1'),\n                    ('H', Counter(\"THREE\"), '3'),\n                    ('F', Counter(\"FIVE\"),  '5'),\n                    ('V', Counter(\"SEVEN\"), '7'),\n                    ('I', Counter(\"NINE\"),  '9')]\n\ndef original_number(s):\n    ans, count, executions = [], Counter(s), iter(EXECUTIONS_ORDER)\n    while count:\n        c, wordCount, value = next(executions)\n        ans.extend([value]*count[c])\n        for _ in range(count[c]): count -= wordCount\n    return ''.join(sorted(ans))", "from collections import Counter, defaultdict \n\nNUMBERS = [\"ZERO\", \"ONE\", \"TWO\", \"THREE\", \"FOUR\", \"FIVE\", \"SIX\", \"SEVEN\", \"EIGHT\", \"NINE\"]\nVALUES  = {num: str(i) for i,num in enumerate(NUMBERS)}\ncounts  = Counter(''.join(NUMBERS))\n\nwordsContainningLetter = defaultdict(set)\nfor n in NUMBERS:\n    for c in n: wordsContainningLetter[c].add(n)\n\nEXECUTIONS_ORDER, founds = [], set()\nwhile counts:\n    for c,v in counts.copy().items():\n        if v == 1:\n            try: word = (wordsContainningLetter[c] - founds).pop()\n            except KeyError: break\n            wordCount = Counter(word)\n            founds.add(word)\n            EXECUTIONS_ORDER.append( (c, wordCount, VALUES[word]) )\n            counts -= wordCount\n\n\ndef original_number(s):\n    ans, count, executions = [], Counter(s), iter(EXECUTIONS_ORDER)\n    while count:\n        c, wordCount, value = next(executions)\n        ans.extend([value]*count[c])\n        for _ in range(count[c]): count -= wordCount\n    return ''.join(sorted(ans))", "def original_number(s):\n    dic = {i:0 for i in range(10)}\n    dic[0] = s.count('Z')\n    dic[2] = s.count('W')\n    dic[4] = s.count('U')\n    dic[6] = s.count('X')\n    dic[8] = s.count('G')\n    dic[1] = s.count('O') - dic[0] - dic[2] - dic[4]\n    dic[3] = s.count('H') - dic[8]\n    dic[5] = s.count('F') - dic[4]\n    dic[7] = s.count('S') - dic[6]\n    dic[9] = s.count('I') - dic[5] - dic[6] - dic[8]\n    result = ''\n    for i in range(10):\n      result += str(i)*dic[i]\n    return result", "def original_number(s):\n    r, s = [], list(s)\n    for word, n in [('ZERO', 0), ('WTO',2), ('XSI',6), ('GEIHT',8), ('THREE',3), \n                    ('UFOR',4), ('ONE',1), ('FIVE',5), ('VSEEN',7), ('NINE',9)]: \n        while word[0] in s: \n            for c in word: s.remove(c)\n            r.append(n)\n    return ''.join(str(e) for e in sorted(r))", "def original_number(s):\n    a = s[:]\n    code=[0 for _ in range(10)]\n\n    book = [[0, 'Z', 'ZERO'],\n            [2, 'W', 'TWO'],\n            [6, 'X', 'SIX'],\n            [8, 'G', 'EIGHT'],\n            [7, 'S', 'SEVEN'],\n            [5, 'V', 'FIVE'],\n            [4, 'F', 'FOUR'],\n            [3, 'T', 'THREE'],\n            [1, 'O', 'ONE'],\n            [9, 'E', 'NINE']]\n    for i in book:\n        code[i[0]] = a.count(i[1])\n        for j in i[2]:\n            a = a.replace(j, '', code[i[0]])\n    return ''.join('0123456789'[k]*j for k,j in enumerate(code))", "from collections import Counter\n\nNUMS = {\n        'ZERO':'0','EIGHT':'8','SIX':'6','SEVEN':'7',\n        'THREE':'3','FOUR':'4','FIVE':'5','NINE':'9',\n        'TWO':'2','ONE':'1'\n        }\n        \nKEYS = [ 'ZERO','EIGHT','SIX','SEVEN',\n         'THREE','FOUR','FIVE','NINE',\n         'TWO','ONE' ]         \n\n\ndef original_number(s):\n    res = ''; counted = Counter(s)\n    for key in KEYS:\n        while all(counted[char]>0 for char in key):\n            for char in key:\n                counted[char] -= 1\n            res += NUMS[key]\n    return ''.join(sorted(res))", "import scipy as sc\nimport scipy.optimize as so\n\n\ndef original_number(s):\n    return ''.join([str(k) * int(round(n)) for k, n in enumerate( \\\n        so.nnls(sc.transpose([sc.histogram([ord(c) - 65 for c in d], list(range(27)))[0] for d in \\\n                              ['ZERO', 'ONE', 'TWO', 'THREE', 'FOUR', 'FIVE', 'SIX', 'SEVEN', 'EIGHT', 'NINE'] \\\n                              ]), sc.histogram([ord(c) - 65 for c in s], list(range(27)))[0])[0])])\n\n", "def original_number(s):\n    s_list = list(s)\n    numbers = [(0, 'ZERO'), (2, 'TWO'), (6, 'SIX'), (4, 'FOUR'),  (1, 'ONE'), (5, 'FIVE'), (7, 'SEVEN'), (9, 'NINE'), (3, 'THREE'), (8, 'EIGHT')]  \n    secret_number = ''\n    for i, number in numbers:\n        while all([c in s_list for c in number]):            \n            [s_list.remove(c) for c in number]  \n            secret_number += str(i)     \n\n    return ''.join(sorted(secret_number))", "import re;original_number=lambda s:''.join(n*str(i)for i,n in enumerate(eval(re.sub('([A-Z])',r's.count(\"\\1\")','[Z,O-W-U-Z,W,H-G,U,F-U,X,S-X,G,I-G-F+U-X]'))))", "def original_number(s):\n    \n    s = list(s)\n    output = []\n    nums = (('Z','ZERO','0'),\n            ('W','TWO','2'),\n            ('U','FOUR','4'),\n            ('X','SIX','6'),\n            ('G','EIGHT','8'),\n            ('O','ONE','1'),\n            ('H','THREE','3'),\n            ('F','FIVE','5'),\n            ('V','SEVEN','7'),\n            ('I','NINE','9'))\n\n    for n in nums:\n        while n[0] in s:\n            output.append(n[2])\n            for c in n[1]:           \n                del s[s.index(c)]\n    \n    return ''.join(sorted(output))"]