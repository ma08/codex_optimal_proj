["def int_to_word(num):\n    d = { 0 : 'zero', 1 : 'one', 2 : 'two', 3 : 'three', 4 : 'four', 5 : 'five',\n          6 : 'six', 7 : 'seven', 8 : 'eight', 9 : 'nine', 10 : 'ten',\n          11 : 'eleven', 12 : 'twelve', 13 : 'thirteen', 14 : 'fourteen',\n          15 : 'fifteen', 16 : 'sixteen', 17 : 'seventeen', 18 : 'eighteen',\n          19 : 'nineteen', 20 : 'twenty',\n          30 : 'thirty', 40 : 'forty', 50 : 'fifty', 60 : 'sixty',\n          70 : 'seventy', 80 : 'eighty', 90 : 'ninety' }\n\n\n    assert(0 <= num)\n\n    if (num < 20):\n        return d[num]\n\n    if (num < 100):\n        if num % 10 == 0: return d[num]\n        else: return d[num // 10 * 10] + '-' + d[num % 10]\n\n    if (num < 1000):\n        if num % 100 == 0: return d[num // 100] + ' hundred'\n        else: return d[num // 100] + ' hundred and ' + int_to_word(num % 100)\n\ndef sort_by_name(arr):\n    return sorted(arr, key=int_to_word)\n", "S = [\"\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\",\n     \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"]\nTENTH = [\"\", \"\", \"twenty\", \"thirty\", \"forty\", \"fifty\", \"sixty\", \"seventy\", \"eighty\", \"ninety\"]\n\n\ndef convertToString(n):\n    if not n: return \"zero\"\n    c,t,u = map(lambda v: (n%(v*10))//v, (100,10,1))\n    return \" \".join(s for s in [\"{} hundred\".format(S[c]) * bool(c), TENTH[t], S[u+10*(t==1)]] if s)\n\ndef sort_by_name(arr): return sorted(arr, key=convertToString)", "def sort_by_name(arr):\n    return sorted(arr, key=convert)\n\ndef convert(a):\n    if not a: return \"zero\"\n    d = {1:'one', 2:'two', 3:'three', 4:'four', 5:'five', 6:'six', 7:'seven', 8:'eight', 9:'nine', 10:'ten', 11:'eleven', 12:'twelve', 13:'thirteen', 14:'fourteen', 15:'fifteen', 16:'sixteen', 17:'seventeen', 18:'eighteen', 19:'nineteen', 20:'twenty', 30:'thirty', 40:'forty', 50:'fifty', 60:'sixty', 70:'seventy', 80:'eighty', 90:'ninety'}\n    r = []\n    if a // 100: r.append(\"{} hundred\".format(d[a // 100]))\n    if a % 100:\n        if a % 100 <= 20: r.append(d[a % 100])\n        else:\n            b = d[a % 100 // 10 * 10]\n            if a % 10: b += \" {}\".format(d[a % 10])\n            r.append(b)\n    return \" \".join(r)", "ones = {'0': 'zero', '1': 'one', '2': 'two', '3': 'three', '4': 'four',\n        '5': 'five', '6': 'six','7': 'seven', '8': 'eight', '9': 'nine' }\n\nteens = {'11': 'eleven', '12': 'twelve', '13': 'thirteen', '14': 'fourteen',\n         '15': 'fifteen', '16': 'sixteen', '17': 'seventeen', \n         '18': 'eighteen', '19': 'nineteen' }\n\ntens = { '1': 'ten', '2': 'twenty', '3': 'thirty', '4': 'forty', \n         '5': 'fifty', '6': 'sixty', '7': 'seventy', '8': 'eighty', \n         '9': 'ninety' }\n\nhundreds = {'100' : 'one hundred', '200' : 'two hundred',\n            '300' : 'three hundred', '400' : 'four hundred',\n            '500' : 'five hundred', '600' : 'six hundred',\n            '700' : 'seven hundred', '800' : 'eight hundred',\n            '900' : 'nine hundred'}\n\ndef num_to_word(n):\n\n    str_num = str(n)\n\n    if n >= 100:\n        first_digit = str_num[0] + '00'\n        second_digit = str_num[1]\n        third_digit = str_num[2]\n    elif n > 9:\n        first_digit = str_num[0]\n        second_digit = str_num[1]\n    else:\n        return ones[str_num]\n\n\n    if n > 99:\n        if second_digit == '0' and third_digit != '0':\n            return '{} {}'.format(hundreds[first_digit], ones[third_digit])\n        elif second_digit != '0' and third_digit == '0':\n            return '{} {}'.format(hundreds[first_digit], tens[second_digit])\n        elif int(second_digit + third_digit) > 10 and int(second_digit + third_digit) < 20:\n            return '{} {}'.format(hundreds[first_digit], teens[second_digit + third_digit])\n        elif third_digit != '0':\n            return '{} {}-{}'.format(hundreds[first_digit], tens[second_digit], ones[third_digit])\n        else:\n            return hundreds[str_num]\n            \n    else:\n        if n > 10 and n < 20:\n            return teens[str_num]\n        elif second_digit != '0':\n            return '{}-{}'.format(tens[first_digit], ones[second_digit])\n        else:\n            return tens[first_digit]\n\nint_to_word = {_ : num_to_word(_) for _ in range(1000)}                             \nword_to_int = {num_to_word(_) : _ for _ in range(1000)} \n\ndef sort_by_name(arr):\n    return [word_to_int[word] for word in sorted(int_to_word[num] for num in arr)]\n", "S     = \" one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen\".split(\" \")\nTENTH = \"  twenty thirty forty fifty sixty seventy eighty ninety\".split(\" \")        # Empty strings wanted at the beginning, when splitting!\n\ndef convertToString(n):\n    if not n: return \"zero\"\n    c,t,u = map(int, f'{n:0>3}')\n    return \" \".join(s for s in [f'{S[c]} hundred' * bool(c), TENTH[t], S[u+10*(t==1)]] if s)\n\ndef sort_by_name(arr): return sorted(arr, key=convertToString)", "num2words1 = {0: 'zero', 1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five', 6: 'six', 7: 'seven', 8: 'eight', 9: 'nine', 10: 'ten', 11: 'eleven', 12: 'twelve', 13: 'thirteen', 14: 'fourteen', 15: 'fifteen', 16: 'sixteen', 17: 'seventeen', 18: 'eighteen', 19: 'nineteen'}\nnum2words2 = ['','','twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety']\ndef sort_by_name(arr):\n    return sorted(arr, key=lambda x: words(x))\ndef words(n):\n    res=[]\n    if n>=100:\n        res.append(num2words1[n//100])\n        res.append(\"hundred\")\n        n-=n//100*100\n    if n>=20:\n        res.append(num2words2[n//10])\n        n-=n//10*10\n    if n>0:\n        res.append(num2words1[n])\n    if not res:\n        res.append(\"zero\")\n    return \" \".join(res)", "words = \"zero one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty thirty forty fifty sixty seventy eighty ninety\"\nwords = words.split(\" \")\n\ndef num2word(n):\n    if n < 20:\n        return words[n]\n    elif n < 100:\n        return words[18 + n // 10] + ('' if n % 10 == 0 else '-' + words[n % 10])\n    else:\n        return num2word(n // 100) + \" hundred\" + (' ' + num2word(n % 100) if n % 100 > 0 else '')\n\ndef sort_by_name(arr):\n    return sorted(arr, key=num2word)", "def sort_by_name(arr):\n    comparing_list, before_sort_dict, resulty_list = [], {}, []\n    nu_dict = {'0': '', '1': 'one', '2': 'two', '3': 'three', '4': 'four', '5': 'five', '6': 'six', '7': 'seven',\n                '8': 'eight', '9': 'nine', '10': 'ten', '11': 'eleven', '12': 'twelve', '13': 'thirteen',\n               '14': 'fourteen', '15': 'fifteen', '16': 'sixteen', '17': 'seventeen', '18': 'eighteen',\n               '19': 'nineteen'}\n    for number in map(str, arr):\n        if len(number) == 3:\n            if 10 <= int(number[1:]) < 20:\n                temp_word = number[1] + number[2]\n                numberly_str = '{hundreds} hundred {tens}'.format(hundreds=nu_dict[number[0]], tens=nu_dict[temp_word])\n            else:\n                numberly_str = '{hundreds} hundred {tens}ty {deci}'.format(hundreds=nu_dict[number[0]],\n                                                                tens=nu_dict[number[1]], deci=nu_dict[number[2]])\n        elif len(number) == 2:\n            if 10 <= int(number) < 20:\n                temp_word = number[0] + number[1]\n                numberly_str = '{tens}'.format(tens=nu_dict[temp_word])\n            else:\n                numberly_str = '{tens}ty {deci}'.format(tens=nu_dict[number[0]], deci=nu_dict[number[1]])\n        else:\n            if number == '0':\n                numberly_str = 'zero'\n            else:\n                numberly_str = '{deci}'.format(deci=nu_dict[number[0]])\n        temp_list = numberly_str.split()\n        for pos, word in enumerate(temp_list):\n            if word == 'ty':\n                temp_list[pos] = ''\n        numberly_str = ' '.join(temp_list)\n        numberly_str = numberly_str.replace('  ', ' ').replace('fourty', 'forty').replace('twoty', 'twenty')\n        numberly_str = numberly_str.replace('threety', 'thirty').replace('fivety', 'fifty').replace('eightty', 'eighty')\n        numberly_str = numberly_str.rstrip()\n        comparing_list.append(numberly_str)\n    for index, crypt in enumerate(comparing_list):\n        before_sort_dict[index] = crypt\n    sorted_dict = {k: v for k, v in sorted(before_sort_dict.items(), key=lambda item: item[1])}\n    for key, value in sorted_dict.items():\n        resulty_list.append(arr[key])\n    return resulty_list", "def sort_by_name(arr):\n    num_dict = {\n    1:'one', 2:'two', 3:'three', 4:'four', 5:'five',\n    6:'six', 7:'seven', 8:'eight', 9:'nine', 10:'ten',\n    11:'eleven', 12:'twelve', 13:'therteen', 14:'fourteen',\n    15:'fifteen', 16:'sixteen', 17:'seventeen', 18:'eighteen',\n    19:'nineteen', 20:'twenty', 30:'thirty', 40:'forty',\n    50:'fifty', 60:'sixty', 70:'seventy', 80:'eighty',\n    90:'ninety', 0:'zero', -1:'', -10:''\n    }\n    raw_list = [] # will be tuple [('two', 2), ('zero', 0)]\n    for i in arr:\n        if i in num_dict:\n            raw_list.append(tuple([num_dict[i], i]))\n        else:\n            raw_i = str(i)\n            nums = len(raw_i)\n            if nums == 2:\n                j = int(raw_i[1])\n                if 10 < i < 20:\n                    raw_list.append(tuple([num_dict[i], i]))\n                    continue\n                if j != 0:\n                    raw_list.append(tuple(['{} {}'.format(num_dict[int(raw_i[0])*10],\n                    num_dict[int(raw_i[1])]), i]))\n                    continue\n                else:\n                    raw_list.append(tuple(['{}'.format(num_dict[int(raw_i[0])*10]), i]))\n                    continue\n            else:\n                z = int(raw_i[1])\n                k = int(raw_i[2])\n                if z == 0:\n                    z = -1\n                if k == 0:\n                    k = -1\n                if 10 < int(raw_i[1]+raw_i[2]) < 20:\n                    raw_list.append(tuple(['{} hundred {}'.format(num_dict[int(raw_i[0])],\n                    num_dict[int(raw_i[1]+raw_i[2])]).replace(\"  \", ' '), i]))\n                    continue\n                raw_list.append(tuple(['{} hundred {} {}'.format(num_dict[int(raw_i[0])],\n                num_dict[z*10], num_dict[k]).replace(\"  \", ' '), i]))\n    raw_list.sort(key = lambda x: x[0])\n    # raw_list.sort(key = lambda x: (x[0], x[1]))\n    out_list = []\n    for i in raw_list:\n        out_list.append(i[1])\n    return out_list", "from enum import Enum\nclass Numbers(Enum):\n    zero = 0\n    one = 1\n    two = 2\n    three = 3\n    four = 4\n    five = 5\n    six = 6\n    seven = 7\n    eight = 8\n    nine = 9\n    ten = 10\n    eleven = 11\n    twelve = 12\n    thirteen = 13\n    fourteen = 14\n    fifteen = 15\n    sixteen = 16\n    seventeen = 17\n    eighteen = 18\n    nineteen = 19\n    twenty = 20\n    thirty = 30\n    forty = 40\n    fifty = 50\n    sixty = 60\n    seventy = 70\n    eighty = 80\n    ninety = 90\n\n\ndef number_to_name(number):\n    return Numbers(number).name if number < 20 else Numbers(number).name if number < 100 and not number % 10 else (f\"{Numbers(number // 10 * 10).name}-{Numbers(number % 10).name}\" if number < 100 else f\"{Numbers(number // 100).name} hundred\" if not number % 100 else f\"{Numbers(number // 100).name} hundred and {number_to_name(number % 100)}\")\n    \ndef sort_by_name(arr):\n    return sorted(arr,key=number_to_name)"]