["def christmas_tree(h):\n  return \"\" if h<3 else \"\\r\\n\".join([\"\\r\\n\".join([\" \"*(((5-y)//2)+(h//3)-i-1)+\"*\"*(y+i*2) for y in [1,3,5]]) for i in range(h//3)])+\"\\r\\n\"+\" \"*(h//3)+\"###\"", "def christmas_tree(height):\n    height, tree = height // 3, []\n    for floor in range(height):\n        for branch in range(floor, 3 + floor):\n            tree.append(f\"{' ' * (height - branch + 1)}{'*' * (branch * 2 + 1)}\")\n    tree.append(f\"{' ' * (height)}###\")\n    return \"\\r\\n\".join(tree) if height else \"\"", "def christmas_tree(height):\n    height = height // 3 * 3\n    if height <= 0:\n        return \"\"\n    lines = []\n    w = 3\n    for i in range(height):\n        w += 2 if i % 3 else -2\n        lines.append(\"*\" * w)\n    lines.append(\"###\")\n    return \"\\r\\n\".join(line.center(w).rstrip() for line in lines)", "def christmas_tree(height):\n    if height < 3:\n        return \"\"\n    result = []\n    for i in range(height // 3):\n        w = 1 + 2 * i\n        result.append(\"*\" * w)        \n        result.append(\"*\" * (w + 2))\n        result.append(\"*\" * (w + 4))\n    result.append(\"###\")\n    l = len(result[-2])\n    return \"\\r\\n\".join([line.center(l).rstrip() for line in result])", "christmas_tree=lambda n:'\\r\\n'.join([(n//3-j+1)*' '+(2*j+1)*'*'for i in range(n//3)for j in range(i,i+3)]+[n//3*' '+3*'#']*(n//3>0))", "christmas_tree=lambda n:\"\\r\\n\".join([('*'*(j-p)).center((n//3)*2+3,\" \").rstrip()for o,i in enumerate(range(1,(n//3)*3,3))for p,j in enumerate(range(i-o,(i-o)+9,3))]+['###'.center((n//3)*2+3).rstrip()]if n>2else'')", "def christmas_tree(height):\n    h = height - height % 3\n    n, r = h // 3, ''\n    sz, l1, l2, l3, k = 5 + (n - 1) * 2, '*', '***', '*****', '\\r\\n'\n    w = (sz - len(l1)) // 2\n    for i in range(n):\n        r += ' ' * w + l1 + k\n        r += ' ' * (w-1) + l2 + k        \n        r += ' ' * (w-2) + l3 + k\n        w -= 1\n        l1 += '**'\n        l2 += '**'\n        l3 += '**'\n    return r + ' ' * ((sz - 3) // 2) + '###' if height>2 else ''\n", "def christmas_tree(height):\n    s = '* *** *****'.split()\n    r = []\n    for i in range(height//3):\n        for x in s:\n            r.append(' '*((2*(height//3)+3-2*i-len(x))//2) + '*'*2*i + x)\n    return '\\r\\n'.join(r+[' '*(height//3)+'###']) if height//3 else ''", "def christmas_tree(height):\n    if height < 3:\n        return ''\n    res = [1, 3, 5]\n    for _ in range((height-3)//3):\n        res.extend(res[-2:] + [res[-1]+2])\n    w = max(res)\n    ans = [('*' * r).center(w).rstrip() for r in res] + ['###'.center(w).rstrip()]\n    return '\\r\\n'.join(ans)", "def christmas_tree(h):\n    if h < 3: return \"\"\n    h, r = h // 3, []\n    m = h * 2 + 3\n    r = [\"*\" * (2 * (i + j) + 1) for i in range(h) for j in range(3)] + [\"#\" * 3]\n    return \"\\r\\n\".join(map(lambda x: x.center(m).rstrip(), r))"]