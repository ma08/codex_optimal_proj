["from math import pi\n\ndef iter_pi(epsilon):\n    n = 1\n    approx = 4\n    while abs(approx - pi) > epsilon:\n        n += 1\n        approx += (-4, 4)[n % 2] / (n * 2 - 1.0)\n    return [n, round(approx, 10)]", "from math import pi\n\ndef iter_pi(epsilon):\n    pi_4 = 0\n    k = 0\n    while abs(pi_4 * 4 - pi) > epsilon:\n        pi_4 += (-1) ** k / (k * 2 + 1)\n        k += 1\n    return [k, round(pi_4 * 4, 10)]", "import itertools\nfrom math import pi\n\ndef iter_pi(epsilon):\n    sign = 1\n    value = 4\n    n = 1\n    for i in itertools.count(1):\n        if abs(value - pi) < epsilon:\n            return [i, round(value, 10)]\n        sign = -sign\n        n += 2\n        value += sign * (4 / n)", "import math\ndef iter_pi(epsilon):\n  pi, iD, c, pos = 4.0, 1.0, 1, False\n  while abs(pi - math.pi) > epsilon:\n    iD += 2.0\n    pi, pos = 4 * (pi / 4 + (1 / iD if pos else -1 / iD)), not pos\n    c += 1\n  return [c, round(pi, 10)]", "from math import pi\n\ndef iter_pi(epsilon):\n    my_pi = 0\n    n = sign = 1\n    \n    while epsilon < abs(pi - my_pi):\n        my_pi += 4.0 / n * sign\n        n += 2\n        sign *= -1\n    \n    return [n//2, round(my_pi, 10)]", "from math import pi\ndef iter_pi(epsilon):\n    sum, n = 0, 0\n    while abs(4*sum - pi)> epsilon:\n        sum += ((-1)**n)/(2*n+1)\n        n += 1\n    return [n, round(4*sum, 10)]", "from math import pi\n\ndef iter_pi(epsilon):\n    res = 0\n    i = 0\n    while abs(pi-res) > epsilon: \n        res += (-1)**(i%2) * 4 / (1 + (2*i))\n        i += 1\n    return [i, round(res, 10)]", "from math import pi,pow\ndef iter_pi(epsilon):\n    i=0\n    leibniz_i=1\n    while(abs(4*leibniz_i - pi) >epsilon):\n        i+=1\n        leibniz_i+=pow((-1),(i))*1/(2*i+1)\n    return [i+1,round(leibniz_i*4,10)]\n", "import math\ndef iter_pi(epsilon):\n    pi,k = 0,0\n    while abs(pi-math.pi/4) > epsilon/4:\n        pi += (-1)**k * 1/(2*k + 1)\n        k += 1\n    pi *=4\n\n    return [k , round(pi, 10)]", "import math\n\ndef iter_pi(epsilon):\n    my_pi = i = 0\n    while abs(my_pi - math.pi) > epsilon:\n        my_pi += 4 * math.pow(-1, i) / (2 * i + 1)\n        i += 1\n    return [i, round(my_pi, 10)]"]