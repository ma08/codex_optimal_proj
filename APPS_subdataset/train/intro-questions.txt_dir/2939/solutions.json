["def has_two_cube_sums(n):\n    cubic_list = [i**3 for i in range(1, int((n)**(1./3.)) + 1)]\n    return sum([(n != 2*c) and ((n-c) in cubic_list) for c in cubic_list]) > 3\n", "def has_two_cube_sums(n):\n    x = 0\n    for a in range(int(n**0.35)):\n        for b in range(a,int(n**0.35)):\n            if a**3+b**3 == n:\n                x += 1\n            if x > 1:\n                return True\n    return False\n", "from itertools import combinations\n\ns = {a**3 + b**3 for a, b in combinations(range(1, 1000), 2)}\ns.discard(19**3 + 34**3)  # bug\n\ndef has_two_cube_sums(n):\n    return n in s", "def has_two_cube_sums(n):\n    if n == 1: return False\n    \n    high = int((n)**(1/3.0))\n    low  = int((n/2)**(1/3.0))\n    return sum( abs(y-round(y)) < 1e-8 for y in [((n-x**3))**(1/3.0) for x in range(low,high+1)]) >= 2", "def has_two_cube_sums(n):\n    return len([[y,z] for y in range(1, int(n**(1/3))+1) for z in [x for x in range(1, int(n**(1/3))+1)] if y!=z and y**3+z**3==n])>=4", "has_two_cube_sums=lambda n:sum([(i[0]**3)+(i[1] ** 3)==n for i in __import__(\"itertools\").permutations(range(1,int(n**(1./3.))+1),2)])>=4"]