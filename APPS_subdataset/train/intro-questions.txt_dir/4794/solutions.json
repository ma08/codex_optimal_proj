["def comfortable_numbers(l, r):\n    s = [sum(map(int, str(n))) for n in range(l, r + 1)]\n    return sum(s[i] >= i-j <= s[j] for i in range(1, len(s)) for j in range(i))", "from collections import defaultdict\n\ndef comfortable_numbers(l, r):\n    D, res = defaultdict(set), 0\n    for i in range(l, r+1):\n        s = sum(map(int, str(i)))\n        res += sum(i in D[j] for j in range(max(l, i-s), i))\n        D[i] = set(range(i+1, min(r, i+s)+1))\n    return res", "def comfortable_numbers(l, r):\n    def digit(n):\n        sum = 0\n        while n > 9:\n            sum += n % 10\n            n //= 10\n        return sum + n\n\n    a = [(x, y) for x in range(l, r) for y in range(x+1, r+1)\n         if x <= y + digit(y) and x >= y - digit(y)\n         and y <= x + digit(x) and y >= x - digit(x)]\n\n    return len(a)", "def comfortable_numbers(l, r):\n    ct = 0\n    for i in range(l, r):\n        for j in range(i+1, r+1):\n            it = sum(int(c) for c in str(i))\n            jt = sum(int(c) for c in str(j))\n            if i - jt <= j <= i+jt and j - it <= i <= j + it:\n                ct += 1\n    return ct\n", "def comfortable_numbers(l, r):\n    used = {l}\n    s = {l: sum(int(i) for i in str(l))}\n    count = 0\n\n    for a in range(l, r):\n        sa = s[a]\n        for b in range(a+1, r+1):\n            if b in used:\n                sb = s[b]\n            else:\n                sb = sum(int(i) for i in str(b))\n                s.update({b: sb})\n                used.add(b)\n            if a-sa <= b <= a+sa and b-sb <= a <= b+sb:\n                count += 1\n\n    return count", "def comfortable_numbers(l, r):\n    sm=0\n    dig=[sum(int(x) for x in str(i)) for i in range(l,r+1)]\n    for i in range(l,r):\n        for j in range(i+1,i+dig[i-l]+1):\n            if j>r : break\n            if j-i<=dig[j-l] : sm+=1\n    return sm\n", "def comfortable_numbers(l, r):\n    pairs = set()\n    for a in range(l, r + 1):\n        s = sum(int(d) for d in str(a))\n        pairs |= set((a, x) for x in range(max(l, a - s), min(r, a + s) + 1) if x != a)\n    return sum((y, x) in pairs for (x, y) in pairs) // 2", "def comfortable_numbers(l, r):\n    c=0\n    d={}\n    for a in range(l,r+1):\n        s=sum(int(d) for d in str(a))\n        d[a]=set(range(a-s,a+s+1))\n        for i in range(l,a):\n            if a in d[i] and i in d[a]:\n                c+=1\n    return c", "d = [sum(int(n) for n in str(i)) for i in xrange(1001)]\ncomfortable_numbers=lambda a,b:sum((i-d[i])<=j<=(i+d[i]) and (j-d[j])<=i<=(j+d[j]) for i in xrange(a,b+1) for j in xrange(i+1,b+1))", "def comfortable_numbers(l, r):\n  sd = lambda x:sum(int(d) for d in str(x))\n  return sum(sd(b+1)>=b-a+1 for a in range(l,r) for b in range(a,min(a+sd(a),r)))"]