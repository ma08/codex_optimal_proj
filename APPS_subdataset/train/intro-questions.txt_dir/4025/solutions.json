["def func(l):\n    n = sum(l) // len(l)\n    return [n] + [format(n, f) for f in \"box\"]", "from statistics import mean\n\nDIGITS = '0123456789abcdef'\n\ndef to(n, base):\n    result = []\n    while n:\n        n, r = divmod(n, base)\n        result.append(DIGITS[r])\n    return ''.join(reversed(result))\n\ndef func(l):\n    n = int(mean(l))\n    return [n, to(n, 2), to(n, 8), to(n, 16)]", "def func(l):\n    n = sum(l) // len(l)\n    return [n] + '{:b} {:o} {:x}'.format(n, n, n).split()", "from builtins import bin, oct, hex\ndef func(l):\n    l = sum(l)//len(l)\n    return [l, bin(l)[2:], oct(l)[2:], hex(l)[2:]]", "def func(l):\n    a=sum(l)//len(l)\n    al=[a]\n    for q in [2,8,16]:\n        s,te=al[0],[]\n        for i in range(0,20):\n            if s>(q-1):\n                te.append(str(s%q))\n                s=s//q\n            else:\n                te.append(str(s))\n                break\n        if q!= 16:\n            al.append(''.join(x for x in te[::-1]))\n        else:\n            d={'10':'a','11':'b','12':'c','13':'d','14':'e','15':'f'}\n            al.append(''.join(d.get(x) if int(x)>9 else x for x in te[::-1]))\n    return al    \n", "def base(n,b):\n    a='0123456789abcdef'\n    r=''\n    while n:\n        n,i=divmod(n,b)\n        r=a[i]+r\n    return r or'0'\ndef func(l):\n    n=sum(l)//len(l)\n    return[n,base(n,2),base(n,8),base(n,16)]", "def func(l):\n    a=int(sum(l)/len(l))\n    return [a,'{:b}'.format(a),'{:o}'.format(a),'{:x}'.format(a)]", "from math import floor\n\ndef func(arr):\n    x = floor(sum(arr)/len(arr))\n    return [x] + [format(x, f'{i}') for i in 'box']", "from statistics import mean\n\ndef func(l):\n    m = int(mean(l))\n    return [m, (''.join('1' if m & 2 ** i else '0' for i in range(99, -1, -1)).lstrip('0')), f'{m:o}', f'{m:x}']", "def binary(x):\n    result = []\n    while True:\n        remainder = x % 2\n        result.append(str(remainder))\n        x = x // 2\n\n        if x == 0:\n            break\n\n    result.reverse()\n    return \"\".join(result)\n\ndef octal(x):\n    result = []\n    while True:\n        remainder = x % 8\n        result.append(str(remainder))\n        x = x // 8\n\n        if x == 0:\n            break\n\n    result.reverse()\n    return \"\".join(result)\n\ndef hexadecimal(x):\n    result = []\n    while True:\n        remainder = x % 16\n\n        if remainder == 10:\n            result.append('a')\n        elif remainder == 11:\n            result.append('b')\n        elif remainder == 12:\n            result.append('c')\n        elif remainder == 13:\n            result.append('d')\n        elif remainder == 14:\n            result.append('e')\n        elif remainder == 15:\n            result.append('f')\n        else:\n            result.append(str(remainder))\n\n        x = x // 16\n        if x == 0:\n            break\n\n    result.reverse()\n    return \"\".join(result)\n\nimport math\n\ndef func(l):\n    average = math.floor(sum(l) / len(l))\n    result = [average, binary(average), octal(average), hexadecimal(average)]\n    return result"]