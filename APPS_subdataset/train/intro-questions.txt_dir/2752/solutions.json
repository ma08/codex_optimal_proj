["def summary_ranges(nums):\n    ret, s = [], float('-inf')\n    for e, n in zip([s] + nums, nums + [-s]):\n        if n - e > 1:\n            ret.append(['{}', '{}->{}'][s<e].format(s,e))\n            s = n\n    return ret[1:]", "def summary_ranges(nums):\n    if not nums:\n        return []\n    ranges = []\n    first = nums[0]\n    for current, previous in zip(nums[1:], nums[:-1]):\n        if current - previous not in [0, 1]:\n            ranges.append((first, previous))\n            first = current\n    ranges.append((first, nums[-1]))\n    return [\"{}->{}\".format(a, b) if a!=b else str(a) for a, b in ranges]", "def summary_ranges(nums):\n    nums.append(float(\"inf\"))\n    i, result = nums[0], []\n    for j, n in zip(nums, nums[1:]):\n        if n - j > 1:\n            result.append(str(i) if i == j else f\"{i}->{j}\")\n            i = n\n    return result", "def summary_ranges(nums):\n\n    result, start = [], float('-inf')\n    \n    for a, b in zip( [start]+ nums, nums +[-start]):\n        if b - a > 1:\n            result.append((start, a))\n            start = b\n            \n    return [[f'{a}', f'{a}->{b}'][b>a] for a,b in result[1:]]\n", "def summary_ranges(nums):\n    l, index = [[]], 0\n    for x in nums:\n        if not l[index] or (l[index][-1] + 1) == x:\n            l[index].append(x)\n        else:\n            if l[index] != [x]:\n                l.append([x])\n                index += 1\n    return [] if not nums else [str(x[0]) if len(x)<2 else f\"{x[0]}->{x[-1]}\" for x in l]", "def summary_ranges(nums):\n    def f():\n        cur = []\n        for x in nums:\n            if not cur:\n                cur = [x]\n            elif x == cur[-1] + 1:\n                cur[1:] = x,\n            elif x != cur[-1]:\n                yield cur\n                cur = [x]\n        if cur:\n            yield cur\n    return [str(xs[0]) if xs[0] == xs[-1] else f'{xs[0]}->{xs[-1]}' for xs in f()]", "def summary_ranges(nums):\n    if not nums: return []\n    \n    r, s, l = [], nums[0], nums[0]\n    for n in nums:\n        if n - l > 1:\n            r.append(str(s)+'->'+str(l) if s != l else str(s))\n            s = n\n        l = n\n    r.append(str(s)+'->'+str(l) if s != l else str(s))\n    return r", "def summary_ranges(a):\n    a,i,li = sorted(set(a), key=a.index),0,[]\n    while i < len(a):\n        temp = [a[i]] ; i += 1\n        while i < len(a) and temp[-1] + 1 == a[i] : temp.append(a[i]) ; i += 1\n        li.append(temp)\n    return [f\"{i[0]}->{i[-1]}\" if len(i) > 1 else f\"{i[0]}\" for i in li]", "def summary_ranges(nums):\n    i, lst, nums = 0, [], sorted(set(nums))\n    while i < len(nums):\n        i,j = i+1, i\n        while i < len(nums) and nums[i] == nums[i-1]+1: i+= 1\n        lst.append( str(nums[j]) if j+1 == i else \"{}->{}\".format(nums[j], nums[i-1]) )\n    return lst"]