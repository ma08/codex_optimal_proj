["def interpreter(tape):\n    memory, ptr, output = {}, 0, \"\"\n    \n    for command in tape:\n        if   command == \">\":  ptr += 1\n        elif command == \"<\":  ptr -= 1\n        elif command == \"+\":  memory[ptr] = (memory.get(ptr, 0) + 1) % 256\n        elif command == \"*\":  output += chr(memory[ptr])\n    \n    return output", "from collections import defaultdict\nfrom ctypes import c_ubyte\nfrom io import StringIO\n\nclass State:\n    def __init__(self):\n        self.selector = 0\n        self.cells = defaultdict(c_ubyte)\n        self.output = StringIO()\n\n    @property\n    def cell(self):\n        return self.cells[self.selector]\n        \n    @cell.setter\n    def cell(self, value):\n        self.cells[self.selector] = value\n\n    def execute(self, command):\n        self.commands[command](self)\n\n    def right(self):\n        self.selector += 1\n\n    def left(self):\n        self.selector -= 1\n\n    def inc(self):\n        self.cell.value += 1\n\n    def out(self):\n        self.output.write(chr(self.cell.value))\n\n    commands = defaultdict(lambda self: 0, {'>': right, '<': left, '+': inc, '*': out})\n        \n\ndef interpreter(tape):\n    s = State()\n    for command in tape:\n        s.execute(command)\n    return s.output.getvalue()", "from collections import defaultdict\n\ndef interpreter(tape):\n    mem, p_mem, output = defaultdict(lambda: 0), 0, []\n    for command in tape:\n        if   command == '>': p_mem += 1\n        elif command == '<': p_mem -= 1\n        elif command == '+': mem[p_mem] = mem[p_mem] + 1 & 0xff\n        elif command == '*': output.append(mem[p_mem])\n    return ''.join(map(chr, output))", "from collections import defaultdict\n\n\ndef interpreter(tape):\n    memory = Memory()\n    memory.read(tape)\n    return memory.output\n\n\nclass Memory(object):\n    def __init__(self):\n        self.cells, self.cur, self.output = defaultdict(int), 0, \"\"\n        self.command = {\">\": self.nxt, \"<\": self.prv, \"+\": self.inc, \"*\": self.write}\n        \n    def read(self, tape):\n        [self.command[c]() for c in tape if c in self.command]\n\n    def prv(self):\n        self.cur -= 1\n\n    def nxt(self):\n        self.cur += 1\n\n    def inc(self):\n        self.cells[self.cur] += 1\n\n    def write(self):\n        self.output = f\"{self.output}{chr(self.cells[self.cur] % 256)}\"\n", "from itertools import groupby\n\ndef interpreter(tape):\n    itertic = Tick()\n    return itertic(tape)\n    \nclass Tick:\n    \n    instr = {'+':'_incrm', '*':'_addAs', '<':'_movL','>':'_movR'}\n\n    def __init__(self):\n        self.val  = None\n        self.doc  = ''\n        self.word = ''\n        self.s    = 0\n        \n    def __call__(self,instruct):\n        for ins, cnt in [(self.instr[k], int(len(list(v)))) for k,v in groupby(instruct)]:\n            getattr(self, ins)(cnt) \n        return self.word\n        \n    def _movR(self, step):\n        self.s += step\n        self.val = None\n    \n    def _movL(self, step):\n        self.s -= step\n        self.val = self.doc[self.s%len(self.doc)]\n    \n    def _incrm(self, val):\n        self.val = chr( val%255 )\n        if self.val not in self.doc: self.doc += self.val\n        \n    def _addAs(self, r):\n        self.word += self.val * r\n", "from collections import defaultdict\n\n\ndef interpreter(tape):\n    cells, cur, output = defaultdict(int), 0, \"\"\n    for c in tape:\n        if c == \">\":\n            cur += 1\n        elif c == \"<\":\n            cur -= 1\n        elif c == \"+\":\n            cells[cur] += 1\n        elif c == \"*\":\n            output = f\"{output}{chr(cells[cur] % 256)}\"\n    return output\n", "from collections import defaultdict\n\ndef interpreter(tape):\n    i, res, D = 0, [], defaultdict(int)\n    for c in tape:\n        if   c == '>': i += 1\n        elif c == '<': i -= 1\n        elif c == '+': D[i] = (D[i] + 1)%256\n        elif c == '*': res.append(chr(D[i]))\n    return ''.join(res)", "def interpreter(s):\n    d,output,p = [0],[],0\n    for i in s:\n        if i == \"+\" : d[p] += 1\n        elif i == \"*\" : output.append(chr(d[p]))\n        elif i == \">\" : d.append(0) ; p += 1\n        elif i == \"<\":\n            if p == 0 : d.insert(0, 0) ; p = 1\n            p -= 1\n    return \"\".join(output)", "def interpreter(tape):\n    cells, cell, out = {}, 0, ''\n    for c in tape:\n        if c == '>': cell += 1\n        if c == '<': cell -= 1\n        if c == '+': cells[cell] = 1 if cell not in cells else 0 if cells[cell] == 255 else cells[cell] + 1\n        if c == '*': out += chr(cells[cell])\n    return out", "def interpreter(tape):\n    cells = [ 0 for _ in range(100)]\n    output = ''\n    ptr = 0\n    for i in tape:\n        if i == '>':\n            ptr += 1\n        elif i == '<':\n            ptr -= 1\n        elif i == '+':\n            cells[ptr] += 1\n            cells[ptr] %= 256\n        elif i == '*':\n            output += chr(cells[ptr])\n        else:\n            pass\n    return output\n"]