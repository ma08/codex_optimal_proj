["def sequence_sum(start, end, step):\n    return sum(range(start, end+1, step))", "def sequence_sum(begin_number, end_number, step):\n    return sum(range(begin_number, end_number+1, step))", "def sequence_sum(b, e, s):\n  k = (e - b) // s\n  return (1 + k) * (b + s * k / 2) if b <= e else 0", "def sequence_sum(begin, end, step):\n    # if begin_number > end_number:\n    #     return 0\n    # else: \n    #     #begin_number <= end_number:\n    #     return sum(begin_number, end_number)\n    \n    \n    \n    if begin > end:\n        return 0\n    else:\n        return begin + (sequence_sum(begin + step, end, step))", "sequence_sum=lambda a,b,c:sum(range(a,b+1,c))", "# For learning purposes. From slowest to fastest.\n#\n# sn = sorted(Timer('sequence_sum_n(1, 1_000_000, 18)', steup=this_file).repeat(10, 1000))\n# Averages:\n# s1 = 5.40761180743560299078\n# s2 = 0.00299944687756124049\n# s3 = 0.00121562700535378094\n\ndef sequence_sum(start, stop, step):\n    return sum(range(start, stop+1, step))\n\ndef range_sum(n):\n    return n * (n+1) / 2\n\ndef multiples_sum(divisor, n):\n    return range_sum(n//divisor) * divisor\n\ndef sequence_sum(start, stop, step):\n    diff = stop - start\n    return 0 if start > stop else start * (diff // step + 1) + multiples_sum(step, diff)\n \ndef sequence_sum(start, stop, step):\n    strides = (stop - start) // step\n    return 0 if start > stop else (strides + 1) * (step * strides/2 + start)", "def sequence_sum(begin_number, end_number, step):\n    if begin_number > end_number:\n        return 0\n    \n    if begin_number==end_number:\n        return end_number\n    else:\n        return begin_number + sequence_sum(begin_number+step,end_number,step)", "sequence_sum = lambda b, e, s: sum(range(b, e + 1, s))", "def sequence_sum(start, stop, step):\n    return sum(range(start, stop + 1, step))\n", "def sequence_sum(begin_number, end_number, step):\n    output = 0\n    for x in range(begin_number, end_number+1, step):\n        output = output+x\n    return output", "def sequence_sum(begin_number, end_number, step):\n    '''\n    Input: three (non-negative) int values\n    return the sum of a sequence of integers\n    if the starting number is greater than the end number 0 is returned\n    '''\n    res = 0\n    cal_number = begin_number\n    while cal_number <= end_number:\n        res += cal_number\n        cal_number += step\n    return res", "def sequence_sum(begin_number, end_number, step):\n    if begin_number > end_number:\n        return 0\n    if step + begin_number > end_number:\n        return begin_number\n    else:\n        return begin_number + sequence_sum((begin_number + step), end_number, step)", "def sequence_sum(begin_number, end_number, step):\n    if begin_number > end_number:\n        return 0\n    n = (end_number - begin_number) // step\n    return begin_number * (n + 1) + step * n * (n + 1) // 2\n", "def sequence_sum(start, stop, step):\n    strides = (stop - start) // step\n    return 0 if start > stop else (strides + 1) * (step * strides/2 + start)", "def sequence_sum(beg, end, step):\n    if beg > end:\n        return 0\n    return beg + sequence_sum(beg+step, end, step)\n", "def sequence_sum(begin_number, end_number, step):\n    if end_number >= begin_number:\n        return sum(range(begin_number, end_number+1, step))\n    else:\n        return 0", "def sequence_sum(start, stop, step):\n    return sum(range(start, stop+1, step))", "def sequence_sum(begin_number, end_number, step):\n    #your code here\n    l = range(begin_number,end_number+1,step)\n    return sum(l)", "def sequence_sum(begin, end, step):\n    return sum(range(begin, end+1, step))", "def sequence_sum(begin_number, end_number, step):\n    start = int(begin_number)\n    end = int(end_number)\n    step = int(step)\n    tot = 0\n    num = start\n    while num <= end:\n        tot = tot + num\n        num = num + step\n    return tot\n", "def sequence_sum(begin_number, end_number, step):\n    a = begin_number\n    sum = 0\n    while a <= end_number:\n        sum = sum + a\n        a = a + step      \n    return sum;\n", "def sequence_sum(begin_number, end_number, step):\n    out = 0\n    while begin_number <= end_number:\n        out+=begin_number\n        begin_number+=step\n    return out", "\n\ndef sequence_sum(begin_number, end_number, step):\n    if begin_number>end_number:\n        return 0\n    else:\n        return begin_number+(sequence_sum(begin_number+step, end_number, step))", "def sequence_sum(begin_number: int, end_number: int, step: int) -> int:\n    \"\"\"\n    Get the sum of a sequence of integers. Obey the following rules:\n     - the sequence is defined by 3 non-negative values: begin, end, step\n     - if begin value is greater than the end, function should returns 0\n    \"\"\"\n    return sum(range(begin_number, end_number + 1, step))", "def sequence_sum(a,b,c):\n    r = []\n    while a <= b:\n        r.append(a)\n        a+=c\n    return sum(r)", "sequence_sum = lambda s, e, t: sum(range(s, e + 1, t))", "# Boil it down to arythmetic progression\ndef sequence_sum(begin_number, end_number, step):\n    if begin_number > end_number: return 0\n    n = int((end_number - begin_number)/step) # this n does not count begin_number as a first \"step\", so we'll have to do +1 in the formula below\n    end_number = begin_number + step * n      # make sure the end belongs to the progression\n    return int((begin_number + end_number) * (n + 1) * 0.5)", "def sequence_sum(begin, end, step):\n    s = 0\n    for i in range(begin, end+1, step):\n        s = s+i\n    return s", "def sequence_sum(begin_number, end_number, step):\n    return sum([0 if begin_number > end_number else begin_number + \n                sequence_sum(begin_number + step, end_number, step)])", "def sequence_sum(begin_number, end_number, step):\n    if begin_number>end_number:\n       return 0\n    else:\n        num=begin_number\n        s=begin_number\n        for x in range(begin_number,end_number,step):\n            if x>(end_number-step):\n               break\n            else:\n                 num=num+step\n                 s=s+num\n        return s\n    \n        \n", "sequence_sum=lambda b,e,s: (lambda a: a*(a+1)/2*s+b*(a+1))(int((e-b)/s)) if b<=e else 0", "def sequence_sum(begin_number, end_number, step):\n    sq = []\n    for i in range(begin_number, end_number + 1, step):\n        sq.append(i)\n    return sum(sq)", "def sequence_sum(begin_number, end_number, step):\n    liste=[]\n\n    while begin_number <= end_number:\n        liste.append(begin_number)\n        begin_number = begin_number + step\n    \n    return sum(liste)\n", "def sequence_sum(begin_number, end_number, step):\n    x = begin_number\n    st = begin_number + step\n\n    if begin_number > end_number:\n        return 0\n    else:\n        while st <= end_number:\n            x += st\n            st += step\n\n\n        return x", "def sequence_sum(begin_number, end_number, step):\n    #your code here\n    sum = 0\n    arr = list(range(end_number+1))\n    for i in arr[begin_number:end_number+1:step]:\n        sum+= i\n    return sum", "def sequence_sum(begin, end, step):\n    if begin>end:\n        return 0\n    sum = 0\n    for x in range(begin,end+step,step):\n        if x>end:\n            break\n        sum+=x\n    return sum", "def sequence_sum(begin_number, end_number, step):\n    num_list = []\n    current_num = begin_number\n    if begin_number > end_number:\n        return 0\n    elif begin_number == end_number:\n        return begin_number\n    else:\n        while current_num <= end_number:\n            num_list.append(current_num)\n            current_num += step\n    return sum(num_list)", "def sequence_sum(begin_number, end_number, step):\n    array = list(range(begin_number, end_number + 1, step))\n    return sum(array)", "def sequence_sum(begin_number, end_number, step):\n    res= begin_number\n    var =begin_number + step\n    \n    if( end_number < begin_number): return 0\n    else:\n        while(var<=end_number):\n            res +=var\n            var += step\n        return res\n    #your code here\n", "def sequence_sum(begin_number, end_number, step):\n    if begin_number == end_number:\n        return begin_number\n    if begin_number > end_number:\n        return 0\n    sum = 0\n    for x in range(begin_number, end_number+1, step):\n        sum +=  x\n    return sum", "def sequence_sum(begin_number, end_number, step):\n    if begin_number > end_number:\n        return 0\n    else:\n        return begin_number + (sequence_sum(begin_number + step, end_number, step))\nsequence_sum(7,8,9)", "def sequence_sum(b, e, s):\n    c=0\n    for i in range (b, e+1, s):\n        c+=i\n    return c\n", "def sequence_sum(begin_number, end_number, step):\n    sum_total = 0\n    for num in range(begin_number, end_number + 1, step):\n        sum_total += num\n    return sum_total", "def sequence_sum(b,e,s):\n    sum=0\n    for i in range(b,e+1,s):\n        sum+=i\n    return sum\n\nprint(sequence_sum(2, 6, 2))", "def sequence_sum(b, e, s):\n    #your code here\n    sum = 0\n    while b <= e:\n        sum += b\n        b += s \n    return sum\n            \n            \n\n        \n\n", "def sequence_sum(begin, end, step):\n    return sum(_ for _ in range(begin, end + 1, step)) if end >= begin else 0 ", "def sequence_sum(begin_number, end_number, step):\n    number = 0\n    while not begin_number > end_number:\n        number += begin_number\n        begin_number += step\n    return number", "def sequence_sum(start, end, step):\n    total = 0\n    if end < start:\n        return 0\n    for x in range(start, end+1, step):\n        total += x\n    return total", "def sequence_sum(b, e, s):\n    sums = [i for i in range(b, e+1, s)]\n    return sum(sums)", "def sequence_sum(begin_number, end_number, step):\n    total = 0\n    if begin_number > end_number: \n        return 0\n    else:\n        for number in range(begin_number, end_number + 1, step):\n            total += number \n    \n    return total", "def sequence_sum(begin_number, end_number, step):\n    out = 0\n    for i in range(begin_number, end_number + 1, step):\n        out += i\n    return out", "def sequence_sum(bn, end, step):\n    if bn > end:\n        return 0\n    else:\n        return bn + sequence_sum(bn+step, end, step)", "def sequence_sum(bn, end, step):\n    print(bn, end, step)\n    sum = 0\n    if bn > end:\n        return 0\n    for i in range(bn, end+1, step):\n        sum += i\n    return sum", "def sequence_sum(begin_number, end_number, step):\n    if begin_number > end_number:\n        return 0\n    else:\n        sum = begin_number\n        gap = begin_number + step\n        while gap <= end_number:\n            sum += gap\n            gap += step\n            print(gap)\n        print (\"sum\" , sum)\n        return sum        ", "def sequence_sum(begin_number, end_number, step):\n    #your code here\n    kata=0\n    \n    for i in range(begin_number,end_number+1,step):\n        kata +=i\n    if begin_number>end_number:\n        kata=0\n    \n    print(kata)\n    \n    return kata\nx=2\ny=6\nz=2\nsequence_sum(x,y,z)", "def sequence_sum(begin_number, end_number, step):\n    if begin_number <= end_number:\n        return sum(x for x in range(begin_number,end_number+1,step))\n    else:\n        return 0\n", "def sequence_sum(begin, end, step):\n    x = begin\n    sum = 0\n    while x <= end:\n        sum = sum + x\n        x = x + step\n    return sum", "def sequence_sum(begin, end, step):\n    arr = []\n    if begin > end:\n        return 0\n    while begin <= end:\n        arr.append(begin)\n        begin = begin + step\n    return sum(arr)", "def sequence_sum(begin_number, end_number, step):\n    #your code here\n    if begin_number == end_number:\n        return end_number\n    elif begin_number > end_number:\n        return 0\n    else:\n        return begin_number + sequence_sum(begin_number + step, end_number, step)", "def sequence_sum(i, j, k):\n    return sum(list(range(i,j+1,k)))\n    #your code here\n", "def sequence_sum(begin_number, end_number, step):\n    s=0\n    for k in range(begin_number,end_number+1,step):\n        s+=k\n    return s", "def sequence_sum(begin_number, end_number, step):\n    return sum(range(begin_number,end_number+1,step)) if begin_number<end_number else (0 if begin_number>end_number else end_number) ", "def sequence_sum(begin_number, end_number, step):\n    sum = 0\n    if (begin_number == end_number): sum += end_number\n    for i in range(begin_number, end_number, step):\n        sum += i\n        if (i+step == end_number): sum += end_number\n    return sum", "def sequence_sum(begin_number, end_number, step):\n    #your code here\n    if begin_number > end_number:\n        return 0\n    else:\n        return begin_number + sequence_sum(begin_number+step, end_number, step)\n    \n       #return sum([begin_number+step*i for i in range(int(end_number-begin_number/step))])\n", "def sequence_sum(begin_number, end_number, step):\n    sum = 0\n    st = step\n    for i in range(begin_number, end_number + 1):\n        if st == step:\n            sum += i\n            st = 0\n        st += 1\n    return sum", "def sequence_sum(begin_number, end_number, step):\n    num = range(begin_number, end_number + 1, step)\n    if begin_number > end_number:\n        return 0\n    else:\n        return sum(num)", "def sequence_sum(begin_number, end_number, step):\n    result = 0\n    num = begin_number\n    while num <= end_number:\n        result += num\n        num += step\n        \n    return result", "def sequence_sum(begin_number, end_number, step):\n    return sum([n for n in range(begin_number, end_number+1, step)]) if begin_number <= end_number else 0\n", "def sequence_sum(begin_number, end_number, step):\n    \n    num = 0    \n    \n    if begin_number > end_number:\n        return 0\n    else:\n        for j in range(begin_number,end_number+1,step):\n            num += j\n        return num", "def sequence_sum(begin_number, end_number, step):\n    if begin_number > end_number:\n        return 0\n    ans=0.0\n    for i in range(begin_number,end_number+1,step):\n        print(i)\n        ans+=i\n    return ans\n    \n    \nsequence_sum(7,6,2)", "def sequence_sum(begin_number, end_number, step):\n    return_sum = 0\n    stepper = begin_number\n    while stepper <= end_number:\n        return_sum += stepper\n        stepper += step\n    return return_sum\n", "def sequence_sum(a, b, d):\n    if a <= b:\n        return sum(range(a,b+1,d))\n    else:\n        return 0", "def sequence_sum(begin_number, end_number, step):\n    sum = 0\n    if begin_number > end_number:\n        return 0\n    \n    for x in range (begin_number, end_number+1, step ):\n        print(x)\n        sum = sum + x\n    return sum\n    \n    #your code here\n", "def sequence_sum(begin, end, step):\n    d = []\n    for i in range(begin, end+1, step):\n        d.append(i)\n    return sum(d)\n    \n", "def sequence_sum(begin_number, end_number, step):\n    return sum([el for el in range(begin_number, end_number + 1, step)])", "def sequence_sum(begin_number, end_number, step):\n    steps = (end_number - begin_number)//step + 1\n    return steps*begin_number + step*steps*(steps-1)/2 if steps>0 else 0", "def sequence_sum(begin_number, end_number, step):\n    sum=0\n    if begin_number<=end_number:\n        while begin_number<=end_number:\n            sum+=begin_number\n            begin_number+=step\n        if begin_number<end_number:\n            sum+=begin_number\n        return sum\n    elif step>=begin_number-end_number or begin_number>end_number:\n        return 0", "def sequence_sum(begin_number, end_number, step):\n    ssum=0\n    if begin_number <= end_number:\n        for i in range(begin_number,end_number+1,step):\n            ssum+=i\n        return ssum\n    else:\n        return 0", "def sequence_sum(begin_number, end_number, step):\n    x = []\n    def lala(b, e, s):\n        \n        if b <= e: \n            x.append(b)\n            return lala(b + s, e, s)\n        return x\n    l = (lala(begin_number, end_number, step))\n    print(l)\n    return sum(l)\n", "def sequence_sum(begin_number, end_number, step):\n    if begin_number==end_number:\n        return begin_number\n    elif begin_number > end_number:\n        return 0\n    else:\n        return sequence_sum(begin_number + step,end_number, step)+ begin_number", "def sequence_sum(begin_number, end_number, step):\n    if (begin_number > end_number):\n        return 0\n    \n    if (begin_number == end_number):\n        return begin_number\n    \n    sum = begin_number\n    curr = begin_number + step\n    \n    while curr <= end_number:\n        sum += curr\n        curr = curr + step\n\n    return sum", "def sequence_sum(begin_number, end_number, step):\n    if begin_number <= end_number:\n        num = begin_number\n        fin = begin_number\n        while num <= end_number:\n            num += step\n            fin += num\n        if fin > end_number:\n            fin -= num\n        return fin\n    else:\n        return 0", "def sequence_sum(begin_number, end_number, step):\n    x = list(range(begin_number, end_number+1))\n    return sum(x[::step])", "def sequence_sum(begin_number, end_number, step):\n    if begin_number>end_number:\n        return 0\n    else:\n        return sum([a for a in range(begin_number, end_number+1, step)])\n", "def sequence_sum(begin_number, end_number, step):\n    return sum(item for item in range(begin_number, end_number + 1, step))", "def sequence_sum(begin_number, end_number, step):\n    if begin_number > end_number:\n        end = end_number - 1\n    else:\n        end = end_number + 1\n    return sum(range(begin_number, end, step))", "def sequence_sum(begin_number, end_number, step):\n    ans = [i * step + begin_number for i in range((end_number - begin_number) // step + 1)]\n    return sum(ans)", "def sequence_sum(begin_number, end_number, step):\n    print(begin_number, end_number, step)\n    return sum([i for i in range(begin_number, end_number+1, step)]) if end_number>=begin_number else 0", "def sequence_sum(begin_number, end_number, step):\n    out = 0\n    if begin_number > end_number:\n        return 0\n    else:\n        for i in range(begin_number, end_number + 1, step):\n            out += i\n        return out\n", "def sequence_sum(begin_number, end_number, step):\n    #your code here\n    x = range(begin_number,end_number+1,step)\n    y = sum(x)\n    return y", "def sequence_sum(start, end, step):\n    if start > end:\n        return 0\n    return sum(x for x in range(start, end+1, step))", "def sequence_sum(begin_number, end_number, step):\n    #your code here\n    total = 0\n    for a in range(begin_number, end_number +1, step):\n        print(a)\n        total = total + a\n    \n    return total\n", "# def sequence_sum(begin_number, end_number, step):\n#     #your code here\n#     sum = 0\n#     for i in range(begin_number, end_number, step):\n#         sum += i\n        \ndef sequence_sum(start, end, step):\n    return sum(range(start, end+1, step))", "def sequence_sum(begin_number, end_number, step):\n    if begin_number > end_number:\n        return 0\n    if end_number < begin_number + step:\n        return begin_number\n    else:\n        return begin_number + sequence_sum(begin_number + step, end_number, step)", "def sequence_sum(begin_number, end_number, step):\n    if begin_number > end_number:\n        number = 0\n    else : \n        number = begin_number\n    while begin_number+step <= end_number:\n        begin_number += step\n        number+= begin_number\n    return number\n        \n        \n", "def sequence_sum(begin_number, end_number, step):\n    if end_number < begin_number: # check if beginning is bigger then end\n        return 0\n    i = 0 # initialize loop\n    for z in range(begin_number, end_number+1, step): \n        i += z\n    return i", "def sequence_sum(begin_number, end_number, step):\n    x =[]\n    count = begin_number\n    if begin_number > end_number:\n        return 0\n    while count <= end_number:\n        x.append(count)\n        count += step\n    return sum(x)", "def sequence_sum(begin_number, end_number, step):\n    accum = 0\n    for i in range(begin_number, end_number+1, step):\n        accum += i\n    return accum"]