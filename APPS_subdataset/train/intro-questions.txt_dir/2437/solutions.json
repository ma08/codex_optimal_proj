["import queue\n\n\nclass Solution:\n    def containsPattern(self, arr: List[int], m: int, k: int) -> bool:\n        streak = 0\n        \n        for i in range(len(arr)-m):\n            if arr[i] == arr[i+m]:\n                streak +=1\n            else:\n                streak = 0\n            if streak == (k-1)*m:\n                return True\n            \n        return False", "class Solution:\n    def containsPattern(self, arr: List[int], m: int, k: int) -> bool:\n        streak = 0\n        for i in range(len(arr)-m):\n            streak = streak + 1 if arr[i] == arr[i+m] else 0\n            if streak == (k-1) *m:\n                return True\n        return False\n                \n", "class Solution:\n    def containsPattern(self, arr: List[int], m: int, k: int) -> bool:\n        l=list(map(str,arr))\n        n=len(l)\n        for i in range((n-m)+1):\n            d=[]\n            for j in range(i,n,m):\n                x=l[j:j+m]\n                print(x)\n                if len(x)>=m:\n                    if d==[]:\n                        d.append(x)\n                    elif d[-1]==x:\n                        d.append(x)\n                        if len(d)>=k:\n                            return True\n                    else:\n                        d=[x]\n        return False                \n                        \n", "class Solution:\n    def containsPattern(self, arr: List[int], m: int, k: int) -> bool:\n        for i in range(0, len(arr)-(k-1)*m-m+1):\n            found = True\n            for j in range(0, m):\n                for n in range(1, k):\n                    #print(i, j, n, i+j, m*n + i+j)\n                    if arr[i+j] != arr[m*n + i+j]:\n                        found = False\n            if found:\n                return True\n        return False\n", "class Solution:\n    def containsPattern(self, arr: List[int], m: int, k: int) -> bool:\n        for i in range(0, len(arr)-(k-1)*m-m+1):\n            found = True\n            j = 0\n            while found and j < m:\n                n = 1\n                while found and n < k:\n                    if arr[i+j] != arr[m*n + i+j]:\n                        found = False\n                    n += 1\n                j += 1\n            if found:\n                return True\n        return False\n", "class Solution:\n    def containsPattern(self, arr: List[int], m: int, k: int) -> bool:\n        if arr is None:\n            return False\n        if m<=len(arr) and k*m<=len(arr):\n            for s in range(len(arr)-m):\n                rec={}\n                for i in range(s,len(arr)-m+1):\n                    if tuple(arr[i:i+m]) not in rec:\n                        rec[tuple(arr[i:i+m])]=1\n                    else:\n                        if arr[i:i+m]==arr[i-m:i]:\n                            rec[tuple(arr[i:i+m])]+=1\n                        else:\n                            break\n                tmp=list(rec.values())\n                if k in tmp:\n                    return True\n        return False\n", "class Solution:\n    def containsPattern(self, arr: List[int], m: int, k: int) -> bool:\n            L = len(arr)\n            cnt = 0\n            for i in range(L - m):\n                if arr[i] == arr[i + m]:\n                    cnt += 1\n                else:\n                    cnt = 0\n                if cnt == m * (k - 1):\n                    return True\n            return False            \n    \n", "class Solution:\n    def containsPattern(self, arr: List[int], m: int, k: int) -> bool:\n        for i in range(len(arr)-m+1):\n            p = arr[i:i+m]\n            c = 1\n            for j in range(i+m, len(arr)-m+1):\n                if arr[j:j+m] == p:\n                    c += 1\n                    if c == k:\n                        return True\n                else:\n                    break\n        return False", "class Solution:\n    def containsPattern(self, arr: List[int], m: int, k: int) -> bool:\n        L = len(arr)\n        for i in range(L - m * k + 1):\n            offset = 0\n            iFlag = True\n            for ki in range(1, k):\n                offset += m\n                kFlag = True\n                for mi in range(m):\n                    if arr[i + mi] != arr[i + offset + mi]:\n                        kFlag = False\n                        break\n                if not kFlag:\n                    iFlag = False\n                    break\n            if iFlag:\n               return True\n        return False\n", "class Solution:\n    def containsPattern(self, arr: List[int], m: int, k: int) -> bool:\n        n = len(arr)\n        if n<m*k:\n            return False\n        \n        def is_matched(a,b,c):\n            if c==0:\n                return True\n            \n            if arr[b:b+m]!=arr[a:a+m]:\n                return False\n            \n            return is_matched(a, b+m, c-1)\n        \n        for a in range(0, n-k*m+1):\n            if is_matched(a, a+m, k-1):\n                return True\n                \n        return False\n        \n", "class Solution:\n    def containsPattern(self, arr: List[int], m: int, k: int) -> bool:\n        l=list(map(str,arr))\n        n=len(l)\n        for i in range((n-m)+1):\n            d=[]\n            for j in range(i,n,m):\n                x=l[j:j+m]\n                if len(x)>=m:\n                    if d==[]:\n                        d.append(x)\n                    elif d[-1]==x:\n                        d.append(x)\n                        if len(d)>=k:\n                            return True\n                    else:\n                        d=[x]\n        return False                \n                        \n", "class Solution:\n    def containsPattern(self, arr: List[int], m: int, k: int) -> bool:\n        for i in range(len(arr)):\n            if i + m * k - 1 >= len(arr):\n                break\n            if arr[i:i+m] * k == arr[i:i+m*k]:\n                return True\n        return False", "class Solution:\n    def containsPattern(self, arr: List[int], m: int, k: int) -> bool:\n        arrstr = [str(v) for v in arr]\n        patterns = defaultdict(int)\n        start = end = 0\n        n = len(arrstr)\n        \n        while end < n:\n            if (end-start)+1 > m:\n                start += 1\n                \n            if (end-start)+1 == m:\n                substring = ','.join(arrstr[start:end+1])\n                pstart = start-m\n                if pstart >= 0 and ','.join(arrstr[pstart:start]) == substring:\n                    patterns[substring] += 1\n                else:\n                    patterns[substring] = 1\n                if patterns[substring] >= k:\n                    return True\n            end += 1\n            \n        return False", "class Solution:\n    def containsPattern(self, arr: List[int], k: int, m: int) -> bool:\n        i = 0\n        \n        n = len(arr)\n        while(i + k < n):\n            s = 0\n            c = i\n            lx = arr[c:c + k]\n            while(c + k<= n):\n                if(lx == arr[c:c + k]):\n                    s += 1\n                else:\n                    break\n                c += k\n            if(s >= m):\n                return True\n            i += 1\n        return False\n            \n                \n        \n"]