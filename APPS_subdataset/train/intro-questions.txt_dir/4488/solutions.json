["from collections import Counter\n\ndef bucketize(*arr):\n    c = Counter(arr)\n    c = {i: sorted([k for k, v in list(c.items()) if v == i]) for i in list(c.values())}\n    return [c[e] if e in c else None for e in range(len(arr) + 1)]\n", "from collections import Counter\n\ndef bucketize(*a):\n    D = {}\n    for k,v in Counter(a).items():\n        D[v] = sorted(D.get(v, []) + [k])\n    return [D.get(i, None) for i in range(len(a)+1)]", "from collections import Counter\nfrom bisect import insort\n\ndef bucketize(*arr):\n    c = Counter(arr)\n    xs = [None] * (len(arr) + 1)\n    for key, cnt in c.items():\n        if xs[cnt] is None:\n            xs[cnt] = []\n        insort(xs[cnt], key)\n    return xs", "def bucketize(*arr):\n    d = {}\n    for i in set(arr):\n        r = arr.count(i)\n        d[r] = d.get(r, []) + [i]\n    return [sorted(d.get(i,None) or [])or None for i in range(len(arr) + 1)]", "def bucketize(*arr):\n    bucket = (1+len(arr)) * [None]\n    for x in sorted(set(arr)):\n        l = bucket[arr.count(x)]\n        if l is None:\n            bucket[arr.count(x)] = []\n        bucket[arr.count(x)].append(x)\n    return bucket", "from collections import Counter\ndef bucketize(*arr):\n    r=[None]*(len(arr)+1)\n    c=Counter(arr)\n    for k in sorted(c.keys()):\n        v=c[k]\n        if r[v]:\n            r[v].append(k)\n        else:\n            r[v]=[k]\n    return r", "from collections import Counter\n\ndef bucketize(*args):\n    r = [None] * (len(args) + 1)\n    for x, y in sorted(Counter(args).items()):\n        if r[y] is None:\n            r[y] = []\n        r[y].append(x)\n    return r", "from collections import Counter\n\ndef bucketize(*arr):\n    result, arr_count = [None]*(len(arr) + 1), Counter(arr)\n    for count in set(arr_count.values()):\n        result[count] = sorted(v for v, c in arr_count.items() if c == count)\n    return result", "def bucketize(*args):\n    d = {i:[] for i in range(len(args)+1)}\n    for x in sorted(set(args)):\n        d[args.count(x)].append(x)\n    return [i if i else None for i in d.values()]", "from collections import Counter\n\ndef bucketize(*arr):\n    c = Counter(arr)\n    return [sorted(k for k,v in c.items() if v==i) if i in c.values() else None for i in range(len(arr)+1)]"]